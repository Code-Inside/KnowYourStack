{"Data":{"Blog":{"FeedItems":[{"Title":"Generate Local .NET Secrets from Azure Deployments","PublishedOn":"2024-03-14T17:05:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post shows how to automatically generate .NET secrets that a .NET app can use from the Azure deployment.\nThe post Generate Local .NET Secrets from Azure Deployments appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/generate-dotnet-secrets-automatically-from-azure-deployment/","RawContent":null},{"Title":"Get started with .NET 8 and AI using new quickstart tutorials","PublishedOn":"2024-03-13T18:00:00+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"New quickstarts are now available to help you get started with .NET and AI development.\nThe post Get started with .NET 8 and AI using new quickstart tutorials appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/get-started-with-dotnet-ai-quickstarts/","RawContent":null},{"Title":"Unity extension for Visual Studio Code – Now Generally Available","PublishedOn":"2024-03-12T17:05:00+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We are thrilled to announce the general availability of the Unity extension for Visual Studio Code. This extension, built upon the C# Dev Kit and C# extensions, gives you a comprehensive toolkit for...","Href":"https://devblogs.microsoft.com/dotnet/unity-extension-for-visual-studio-code-now-generally-available/","RawContent":null},{"Title":".NET March 2024 Updates – .NET 8.0.3, 7.0.17, .NET 6.0.28","PublishedOn":"2024-03-12T17:00:00+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Check out latest March 2024 updates for .NET 8.0, .NET 7.0, and .NET 6.0.\nThe post .NET March 2024 Updates – .NET 8.0.3, 7.0.17, .NET 6.0.28 appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/march-2024-updates/","RawContent":null},{"Title":"Building AI Bots, Extending Copilot for Microsoft 365, and more with .NET and Teams Toolkit","PublishedOn":"2024-03-07T18:01:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Teams Toolkit for is packed with the new exciting capabilities for .NET developers including new AI Bot templates, CodeLens integration, and new Copilot preview templates.\nThe post Building AI Bots,...","Href":"https://devblogs.microsoft.com/dotnet/teams-toolkit-for-visual-studio-release-updates/","RawContent":null},{"Title":"Get Started with Milvus Vector DB in .NET","PublishedOn":"2024-03-06T18:05:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Learn how to get started managing embedding vectors for search and Retrieval Augmented Generation (RAG) scenarios using the Milvus vector database with .NET.\nThe post Get Started with Milvus Vector DB...","Href":"https://devblogs.microsoft.com/dotnet/get-started-milvus-vector-db-dotnet/","RawContent":null},{"Title":"GitHub Copilot Analysis, Customized Rules, and more come to the Azure Migrate application and code assessment","PublishedOn":"2024-03-01T18:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Learn about the latest features in Azure Migrate Application and Code Assessment to help you move your .NET applications from on-premises to Azure.\nThe post GitHub Copilot Analysis, Customized Rules,...","Href":"https://devblogs.microsoft.com/dotnet/azure-migrate-application-and-code-assessment-march-2024-update/","RawContent":null},{"Title":".NET MAUI Community Toolkit 2023 Highlights","PublishedOn":"2024-02-29T18:06:00+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Let's take a look back at all the happeneings from 2023 for the the .NET MAUI Community Toolkit's Journey of Growth, Rich Features, and Expanding Community Collaboration and a sneak peak at what is...","Href":"https://devblogs.microsoft.com/dotnet/dotnet-maui-community-toolkit-2023-highlights/","RawContent":null},{"Title":"The FAST and the Fluent: A Blazor story","PublishedOn":"2024-02-26T19:51:00+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Learn about the origin of the building blocks of the Fluent UI Blazor library. We'll talk about FAST, Web Components, Fluent Design, and more.\nThe post The FAST and the Fluent: A Blazor story appeared...","Href":"https://devblogs.microsoft.com/dotnet/the-fast-and-the-fluent-a-blazor-story/","RawContent":null},{"Title":"WinForms in a 64-Bit world – our strategy going forward","PublishedOn":"2024-02-22T18:00:00+00:00","CommentsCount":23,"FacebookCount":0,"Summary":"32-bit components can impose challenges for WinForms developers in a 64-bit Visual Studio environment, but there are options to solve this. Component modernization, migrating to .NET 6+ and a new...","Href":"https://devblogs.microsoft.com/dotnet/winforms-designer-64-bit-path-forward/","RawContent":null}],"ResultType":"Feed"},"AspNetCore-Issues":{"Issues":[{"Id":"2187576534","IsPullRequest":false,"CreatedAt":"2024-03-15T02:01:23","Actor":"BonnieSoftware","Number":"54548","RawContent":null,"Title":"Multiple ways to short-circuit pipeline is a poor design and should be reconsidered","State":"open","Body":"## Summary\r\n\r\nHaving the ability to call Run on the pipeline is confusing because you can have multiple calls to it and get no error, and the last element in the pipeline is effectively a Run anyway. Run has no logical difference to Use if the middleware in the Use call short-circuits. I propose removing Run because it can cause Use calls to be skipped and there is no error to inform the programmer of this issue.\r\n\r\n## Motivation and goals\r\n\r\n- Simplify the framework by reducing the number of methods that can be called\r\n- Remove ambiguity as to which should be used\r\n- Avoid silent pitfalls\r\n\r\n## Risks / unknowns\r\n\r\nThe risk is that is a breaking change, some might be using the Run call.\r\n\r\n## Examples\r\n\r\nThere are two ways to short-circuit:\r\n\r\nBy not calling `next.Invoke()`...\r\n\r\n```\r\napp.Use(async (context, next) =>\r\n{\r\n    // Do something\r\n    // Don't call await next.Invoke();\r\n});\r\n```\r\n\r\nAnd by calling `app.Run` instead of `app.Use` like so...\r\n\r\n```\r\napp.Run(async (context) =>\r\n{\r\n    // Do something\r\n});\r\n```\r\n\r\nRun is signalling to the programmer that no more pipeline elements will execute, whereas app.Use may or may not short-circuit. If Run is intended, why not just order the pipeline correctly so that the last item in the chain is the last item? The naming of Run is also ambiguous with the later call to Run which looks visually unappealing as if it were a bug when it isn't.","Url":"https://github.com/dotnet/aspnetcore/issues/54548","RelatedDescription":"Open issue \"Multiple ways to short-circuit pipeline is a poor design and should be reconsidered\" (#54548)"},{"Id":"2187540245","IsPullRequest":false,"CreatedAt":"2024-03-15T01:25:08","Actor":"egil","Number":"54547","RawContent":null,"Title":"Idea: Static Blazor components","State":"open","Body":"To improve the performance of Blazor apps, [the recommendation](https://learn.microsoft.com/en-us/aspnet/core/blazor/performance?view=aspnetcore-8.0) is to create reusable render fragments.\r\n\r\nFor components that qualify, the Razor compiler could create static reusable render fragments instead of regular instantiable components, that are made available as any other components for usage.\r\n\r\nFor example, the following `ChatMessage.razor` component:\r\n\r\n```razor\r\n<div class=\"chat-message\">\r\n    <span class=\"author\">@Message.Author</span>\r\n    <span class=\"text\">@Message.Text</span>\r\n</div>\r\n\r\n@code {\r\n    [Parameter]\r\n    public ChatMessage? Message { get; set; }\r\n}\r\n```\r\n\r\nThis could be transpiled into the following:\r\n\r\n```c#\r\npublic static class ChatMessage\r\n{\r\n  public readonly static RenderFragment<ChatMessage?> Fragment = builder => message =>\r\n  {\r\n    builder.OpenElement(0, \"div\");\r\n    builder.AddAttribute(1, \"class\", \"chat-message\");\r\n\r\n    builder.OpenElement(2, \"span\");\r\n    builder.AddAttribute(3, \"class\", \"author\");\r\n    builder.AddContent(4, message.Author);\r\n    builder.CloseElement();\r\n\r\n    builder.OpenElement(5, \"span\");\r\n    builder.AddAttribute(6, \"class\", \"text\");\r\n    builder.AddContent(7, message.Text);\r\n    builder.CloseElement();\r\n\r\n    builder.CloseElement();\r\n  }\r\n}\r\n```\r\n\r\nThe key is that the usage of the \"static ChatMessage\" component should be the same as if it was a regular component, i.e.:\r\n\r\n```razor\r\n<ChatMessage Message=@message />\r\n\r\n@code {\r\n  private ChatMessage? message = ... ;\r\n}\r\n```\r\n\r\n## Benefits\r\n\r\nPerformance is the key motivator, and enabling it without having to write components in a different way than normal.\r\n\r\nIt will enable performance-cautious users to break their larger components into smaller, easier-maintained components, without impacting performance.\r\n\r\nTo be valuable, it should be seamless, meaning the user should not decide, e.g. through an attribute, whether they want a static component or a normal component, and they should be used similarly.\r\n\r\n## What components would qualify\r\n\r\nI think it should be safe to create a static component if the following apply:\r\n\r\n1. Component do not have instance fields defined.\r\n2. Component do not have any life-cycle methods explicitly defined (i.e. constructor, `SetParameterAsync`, `Dispose`, `DisposeAsync`).\r\n3. Component do not have async code.\r\n4. Component can have parameters and services injected into them.\r\n\r\n**Methods, both static and instance methods**, are OK, since they can be converted to [local functions](https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/local-functions) inside the generated render fragment. \r\n\r\n**Static fields and constants** can just be included in the generated static class where the render fragment is defined, so that should be fine too. \r\n\r\nAny **parameters and/or injected services** would be passed as arguments to the generated render fragment.\r\n\r\nSince render fragments are not async, async code is not allowed, and users would have to have to do any async stuff outside and pass the resulting data in.\r\n\r\nIt may be that the compiler needs to mark the static components with an attribute or similar to mark them as static components for the editor or the compiler itself when static components are used in other components.\r\n\r\nA more complex example:\r\n\r\n```razor\r\n@inject TimeProvider tp\r\n\r\n<div class=\"chat-message\">\r\n  <span class=\"time\">@ToLocal(Message.Time, tp)</span>\r\n  <span class=\"author\">@Message?.Author ?? \"Unknown\"</span>\r\n  <span class=\"text\">@Message?.Text ?? \"No message content\"</span>\r\n  <button @onclick=\"LikeMessage\">Like</button>\r\n</div>\r\n\r\n@code {\r\n  private static int LikeMultiplier = 42;\r\n\r\n  [Parameter]\r\n  public ChatMessage? Message { get; set; }\r\n\r\n  [Parameter]\r\n  public EventCallback<int> OnLike { get; set; }\r\n\r\n  private Task LikeMessage()\r\n  {\r\n    var like = Message.Likes + LikeMultiplier;\r\n    return OnLike.InvokeAsync(like);\r\n  }\r\n\r\n  private static DateTimeOffset ToLocal(DateTimeOffset time, TimeProvider timeProvider) \r\n    => TimeZoneInfo.ConvertTime(time, timeProvider.LocalTimeZone)\r\n}\r\n```\r\n\r\nWould be compiled into the following:\r\n\r\n```c#\r\nusing Microsoft.AspNetCore.Components;\r\nusing System.Threading.Tasks;\r\n\r\npublic static class ChatMessage\r\n{\r\n  private static readonly int LikeMultiplier = 42;\r\n\r\n  public readonly static RenderFragment<ChatMessage?, EventCallback<int>, TimeProvider> Fragment = builder => (message, onLike, tp) =>\r\n  {\r\n    builder.OpenElement(0, \"div\");\r\n    builder.AddAttribute(1, \"class\", \"chat-message\");\r\n\r\n    builder.OpenElement(2, \"span\");\r\n    builder.AddAttribute(3, \"class\", \"time\");\r\n    builder.AddContent(4, ToLocal(Message.Time, tp));\r\n    builder.CloseElement();\r\n\r\n    builder.OpenElement(5, \"span\");\r\n    builder.AddAttribute(6, \"class\", \"author\");\r\n    builder.AddContent(7, Message?.Author ?? \"Unknown\");\r\n    builder.CloseElement();\r\n\r\n    builder.OpenElement(8, \"span\");\r\n    builder.AddAttribute(9, \"class\", \"text\");\r\n    builder.AddContent(10, Message?.Text ?? \"No message content\");\r\n    builder.CloseElement();\r\n\r\n    builder.OpenElement(11, \"button\");\r\n    builder.AddAttribute(12, \"onclick\", EventCallback.Factory.Create(this, LikeMessage));\r\n    builder.AddContent(13, \"Like\");\r\n    builder.CloseElement();\r\n\r\n    builder.CloseElement();\r\n  \r\n    Task LikeMessage()\r\n    {\r\n        var like = Message.Likes + LikeMultiplier;\r\n        return OnLike.InvokeAsync(like);\r\n    }\r\n\r\n    static DateTimeOffset ToLocal(DateTimeOffset time, TimeProvider timeProvider)\r\n    {\r\n        return TimeZoneInfo.ConvertTime(time, timeProvider.LocalTimeZone);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAnd be used as usual, i.e.:\r\n\r\n```razor\r\n@inject MessageRepo repo\r\n<ChatMessage Message=@message OnLike=@OnLike />\r\n@code {\r\n  private ChatMessage? message;\r\n\r\n  protected override async Task OnInitializedAsync()\r\n  {\r\n      message = await repo.LoadMessage();\r\n  }\r\n  \r\n  private async Task OnLike(int likes)\r\n  {\r\n    message.Likes += likes;\r\n    await repo.SaveAsync(message);\r\n  }\r\n}\r\n``` ","Url":"https://github.com/dotnet/aspnetcore/issues/54547","RelatedDescription":"Open issue \"Idea: Static Blazor components\" (#54547)"},{"Id":"2187222353","IsPullRequest":true,"CreatedAt":"2024-03-14T22:07:13","Actor":"dotnet-maestro[bot]","Number":"54546","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b451f54d-a9ea-4fe6-3a48-08d961c5a689)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b451f54d-a9ea-4fe6-3a48-08d961c5a689\r\n- **Build**: \r\n- **Date Produced**: March 14, 2024 2:44:39 AM UTC\r\n- **Commit**: 100394106fe203c112ab72bcc1576fb3753f7910\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.24162.4 to 6.0.0-beta.24163.13][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Installers**: [from 6.0.0-beta.24162.4 to 6.0.0-beta.24163.13][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Templating**: [from 6.0.0-beta.24162.4 to 6.0.0-beta.24163.13][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.24162.4 to 6.0.0-beta.24163.13][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/c80f6c7bcf...100394106f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b451f54d-a9ea-4fe6-3a48-08d961c5a689)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/54546","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#54546)"},{"Id":"2187097335","IsPullRequest":false,"CreatedAt":"2024-03-14T19:13:38","Actor":"htmlsplash","Number":"54545","RawContent":null,"Title":"How to generate/emit dynamically build JS into the Client's Browser from SSR Blazor page?","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nRequest, or help/suggestion needed for:\r\n\r\nOur application generates and emits java script dynamically into the client page. This was a common pattern in Webforms to register a startup or client script on the server based on some state and run it once in the client's browser.\r\n\r\nWe would like to do the same from within the SSR page in Blazor (avoiding a web socket connect, ie. non-interactive). \r\n\r\nI have reviewed the following:\r\n\r\nASP.NET Core Blazor JavaScript with static server-side rendering (static SSR) and reported issue: #51331\r\n\r\nThis provides only partial solution but in our case the generated java script code is dynamic based on some data obtained on the server. Then, the js snippet is emitted to client's browser as (from Webforms snippet):\r\n\r\n`ClientScript.RegisterStartupScript()`\r\n\r\nThe SSR JS article relies on path to physical java script file.  In our case, there's no file, it just plain javascript to be executed once.\r\n\r\n\r\n### Describe the solution you'd like\r\n\r\nProvide an similar api for SSR pages to (with a goal to avoid use of a web socket): \r\n\r\n`ClientScript.RegisterStartupScript()`\r\n\r\nThis api will allow a user to compose a java script string build from some state obtained on the server and execute it on the client once.\r\n\r\nA possible solution is to render the java script into some string variable and then inject the JS content into the through a string variable (that contains the JS) inside script block. This would work per/component basis but what about if you want to do it outside the component from some other class that is unaware of the component. \r\n\r\nExample:\r\n\r\nWe have a PageBase class that all our pages derive and sometimes this class needs to emit JS. \r\n\r\nI guess I could hack it to use current request context items collection and put the JS code there and then have a component on the page (PageJsInclude) for just the purpose of examining request context items collection, reading it, and rendering it to the page. Sounds hackish but should work. I will give it a try.\r\n\r\nIs there any work that is planned in this area to enhance SSR pages to emit JS dynamically? For SSR pages this makes sense in my opinion or is this a bad pattern and then what's the cleaner alternative??\r\n\r\n### Additional context\r\n\r\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/54545","RelatedDescription":"Open issue \"How to generate/emit dynamically build JS into the Client's Browser from SSR Blazor page?\" (#54545)"},{"Id":"2186873992","IsPullRequest":false,"CreatedAt":"2024-03-14T17:12:50","Actor":"ScarletKuro","Number":"54543","RawContent":null,"Title":"AsNonRenderingEventHandler + ErrorBoundary = unexpected behavior","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nHello.\r\n\r\nIn MudBlazor we recently did this change: https://github.com/MudBlazor/MudBlazor/pull/8203/files#diff-7258903903d30bdc973979ca0d64c61adbee3f4441e47749100907f522060a47\r\nWe added `AsNonRenderingEventHandler` (that was copied from [official MS document](https://learn.microsoft.com/en-us/aspnet/core/blazor/performance?view=aspnetcore-8.0#avoid-rerendering-after-handling-events-without-state-changes)) to our internal `onclick` and now the `ErrorBoundary` doesn't catch the exceptions that are fired within the `AsNonRenderingEventHandler` event:\r\n```razor\r\n<ErrorBoundary>\r\n    <ChildContent>\r\n        <MudButton OnClick=\"ProcessSomething\" Variant=\"Variant.Filled\" Color=\"Color.Primary\">\r\n            <MudText>Click me</MudText>\r\n        </MudButton>\r\n    </ChildContent>\r\n    <ErrorContent Context=\"exc\">\r\n      <MudAlert Severity=\"Severity.Error\">Exception: @exc.Message</MudAlert>\r\n    </ErrorContent>\r\n</ErrorBoundary>\r\n@code {\r\n    async Task ProcessSomething()\r\n    {\r\n        throw new ApplicationException(\"TESTING\");\r\n    }\r\n}\r\n```\r\nYou will see in console:\r\n```\r\ncrit: Microsoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRenderer[100]\r\n      Unhandled exception rendering component: TESTING\r\nSystem.ApplicationException: TESTING\r\n   at Try.UserComponents.__Main.ProcessSomething()\r\n   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)\r\n   at MudBlazor.MudBaseButton.OnClickHandler(MouseEventArgs ev)\r\n   at Microsoft.AspNetCore.Components.RenderTree.Renderer.GetErrorHandledTask(Task taskToHandle, ComponentState owningComponentState)\r\n```\r\nrather than the `ErrorContent`.\r\n\r\nThe weird thing about it if that I use alternative to `AsNonRenderingEventHandler`:\r\n```C#\r\npublic abstract class MudBaseButton : MudComponentBase, IHandleEvent\r\n{\r\n    Task IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, object? arg) => callback.InvokeAsync(arg);\r\n}\r\n```\r\nThen everything will work as expected and `ErrorBoundary` is working\r\nanother weird thing is that if I change this:\r\n```C#\r\npublic static Func<TValue, Task> AsNonRenderingEventHandler<TValue>(Func<TValue, Task> callback) => new AsyncReceiver<TValue>(callback).Invoke;\r\n```\r\nto this:\r\n```C#\r\npublic static Func<TValue, Task> AsNonRenderingEventHandler<TValue>(Func<TValue, Task> callback)\r\n{\r\n\tvar receiver = new AsyncReceiver<TValue>(callback);\r\n\treturn async value => await receiver.Invoke(value);\r\n}\r\n```\r\nThen the `ErrorBoundary` will catch the exception as well, but the problem is that this `return async value => await receiver.Invoke(value);` and this `return new AsyncReceiver<TValue>(callback).Invoke` should be **EQUIVALENT** in C#.\r\n\r\nI described the same in this in MudBlazor issue: https://github.com/MudBlazor/MudBlazor/issues/8365#issuecomment-1997916812\r\n\r\n@SteveSandersonMS could you please explain, as I'm very confused on what's going on.\r\n\r\n**upd:** well, with this snippet https://try.mudblazor.com/snippet/cOQSERlIheRAyAJe I just found out that `async value => await receiver.Invoke(value)` doesn't prevents re-rendering, but the `IHandleEvent` implementation in component works, so this doesn't explain few moments:\r\n1) Why with the original `EventUtil` from docs the `ErrorBoundary` doesn't work.\r\n2) Why with my offered version the exception flows, but the re-render is not prevented.\r\n3) Why if I implement `IHandleEvent` in the component it works great - the exception flows and no re-render is happening, but the `EventUtil` in 1. or 2. doesn't work as I expect?\r\n\r\n### Expected Behavior\r\n\r\n`ErrorBoundary` to work with `AsNonRenderingEventHandler `\r\n\r\n### Steps To Reproduce\r\n\r\nThis would require to fork the https://github.com/MudBlazor/MudBlazor repository and play with the [MudButton.razor](https://github.com/MudBlazor/MudBlazor/blob/dev/src/MudBlazor/Components/Button/MudButton.razor) and [MudButtonBase](https://github.com/MudBlazor/MudBlazor/blob/dev/src/MudBlazor/Base/MudBaseButton.cs) and the snippet from https://try.mudblazor.com/snippet/caQSaxvSoRhvMaSP\r\n\r\n**upd**: Minimal reproduction without MudBlazor: \r\n[BlazorEventUtilsIssue.zip](https://github.com/dotnet/aspnetcore/files/14608960/BlazorEventUtilsIssue.zip)\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n```\r\ncrit: Microsoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRenderer[100]\r\n      Unhandled exception rendering component: TESTING\r\nSystem.ApplicationException: TESTING\r\n   at Try.UserComponents.__Main.ProcessSomething()\r\n   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)\r\n   at MudBlazor.MudBaseButton.OnClickHandler(MouseEventArgs ev)\r\n   at Microsoft.AspNetCore.Components.RenderTree.Renderer.GetErrorHandledTask(Task taskToHandle, ComponentState owningComponentState)\r\n```\r\n\r\n### .NET Version\r\n\r\n8.0.103\r\n\r\n### Anything else?\r\n\r\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/54543","RelatedDescription":"Open issue \"AsNonRenderingEventHandler + ErrorBoundary = unexpected behavior\" (#54543)"},{"Id":"2185646029","IsPullRequest":false,"CreatedAt":"2024-03-14T17:09:48","Actor":"Liero","Number":"54538","RawContent":null,"Title":"Fix textarea with with large amounts of text data ","State":"closed","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nWhen user enters longer text to input/textarea,  the signalr messages exceeds MaximumReceiveMessageSize limit and are ignored.\r\n\r\n\r\n\r\n### Describe the solution you'd like\r\n\r\nthe event data should be streamed or split into multiple Signal R messages, so that there is not difference at application level.\r\n\r\nThe proposed workaround ([InputLargeTextArea](https://github.com/aspnet/samples/tree/main/samples/aspnetcore/blazor/InputLargeTextArea)) is not good enough, because any user input can be potentially large. If we accepted the workaround, it would mean the `input` `textarea` `InputText` and `InputTextArea` elements are not safe to use. \r\n\r\n### Additional context\r\n\r\nThese two issues were closed with unsatisfying \"solution\"\r\nhttps://github.com/dotnet/aspnetcore/issues/30291 - does not solve the problem\r\nhttps://github.com/dotnet/aspnetcore/issues/5623 - closed as duplicate\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/issues/54538","RelatedDescription":"Closed issue \"Fix textarea with with large amounts of text data \" (#54538)"},{"Id":"2186836928","IsPullRequest":false,"CreatedAt":"2024-03-14T16:53:58","Actor":"JoKeKt","Number":"54542","RawContent":null,"Title":"Prevent Identity lockout mechanism telling hackers which UserNames exist.","State":"open","Body":"<!--\r\nThis template is useful to build consensus about whether work should be done, and if so, the high-level shape of how it should be approached. Use this before fixating on a particular implementation.\r\n-->\r\n\r\n## Summary\r\n\r\nIn the current default configuration for ASP.NET Core Identity, a lockout mechanism is enabled, which - after a certain amount of failed login attempts - forces a certain amount of waiting time before the next login attempt may happen.\r\nBut via this mechanism, a hacker can easily check if a UserName exists or not. This should be changed.\r\n\r\n## Details\r\n\r\nThis is the response for a failed login attempt:\r\n```json\r\n{\r\n  \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.2\",\r\n  \"title\": \"Unauthorized\",\r\n  \"status\": 401,\r\n  \"detail\": \"Failed\"\r\n}\r\n```\r\n\r\nAfter e.g. 3 failed attempts, the response changes (the `detail` changes from `Failed` to `LockedOut`):\r\n```json\r\n{\r\n  \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.2\",\r\n  \"title\": \"Unauthorized\",\r\n  \"status\": 401,\r\n  \"detail\": \"LockedOut\"\r\n}\r\n```\r\n\r\nHowever, only if the userName/email exists in the database, such a `LockedOut` response will happen. For non-existing userNames/emails you _always_ get a `Failed`. This way, a hacker can find out if a certain user name exists or not.\r\n\r\n## Proposal\r\n\r\nIdentity should track failed login attempts even for non-existing users, for example with a special `NonExistingUsers` table where the number of failed attempts and timestamps could be saved.\r\nThis way, the responses could behave the same for registered and non-existing users, and thus preventing giving information to hackers.","Url":"https://github.com/dotnet/aspnetcore/issues/54542","RelatedDescription":"Open issue \"Prevent Identity lockout mechanism telling hackers which UserNames exist.\" (#54542)"},{"Id":"2184261595","IsPullRequest":false,"CreatedAt":"2024-03-14T16:33:27","Actor":"Hugoreal2","Number":"54530","RawContent":null,"Title":"Microsoft.IdentityModel.JsonWebTokens\" Version=\"7.4.0\" not working with OpenIdConnect ? (Microsoft.AspNetCore.Authentication.OpenIdConnect Version 8.0.3))","State":"closed","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\n```c#\r\n.AddOpenIdConnect(options =>\r\n{\r\n    options.ClientId = \" {clientId}\";\r\n    options.ClientSecret = \"{clientSecret}\";\r\n    options.Authority = \"{authority}\";\r\n\r\n    options.ResponseType = \"code\";\r\n    options.Scope.Add(\"role\");\r\n    options.Scope.Add(\"openid\");\r\n    options.Scope.Add(\"email\");\r\n});\r\n```\r\n\r\nI have an OpenIdConnect service here in my job\r\n\r\nIts been working fine, but when I bumped this PackageReference from 7.3.1 to 7.4.0, when I try running my code I get this error\r\n<PackageReference Include=\"Microsoft.IdentityModel.JsonWebTokens\" Version=\"7.3.1\" />\r\n\r\n`System.InvalidOperationException: Cannot redirect to the authorization endpoint, the configuration may be missing or invalid.\r\n\r\n   at Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler.HandleChallengeAsyncInternal(AuthenticationProperties properties)\r\n\r\n   at Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler.HandleChallengeAsync(AuthenticationProperties properties)\r\n\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.ChallengeAsync(AuthenticationProperties properties)\r\n\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationService.ChallengeAsync(HttpContext context, String scheme, AuthenticationProperties properties)\r\n\r\n   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.<>c__DisplayClass0_0.<<HandleAsync>g__Handle|0>d.MoveNext()\r\n\r\n--- End of stack trace from previous location ---\r\n\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n`\r\n   \r\n   \r\n   \r\n The Authority url endpoint responds perfectly.\r\n\r\nWhat I did was basicly do this version bump, clear all cookie values from my browser and try to do OpenIdConnect\r\n\r\n\r\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\nClear all cookies from the browser.\r\n\r\nUse \r\n- Microsoft.IdentityModel.JsonWebTokens Version=\"7.4.0\"\r\n- Microsoft.AspNetCore.Authentication.OpenIdConnect Version=\"8.0.3\"\r\n\r\n.NET 8\r\n\r\nSet on the Startup.cs like I've putted above\r\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.101\n\n### Anything else?\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/54530","RelatedDescription":"Closed issue \"Microsoft.IdentityModel.JsonWebTokens\" Version=\"7.4.0\" not working with OpenIdConnect ? (Microsoft.AspNetCore.Authentication.OpenIdConnect Version 8.0.3))\" (#54530)"},{"Id":"2186236718","IsPullRequest":true,"CreatedAt":"2024-03-14T14:50:38","Actor":"dotnet-maestro[bot]","Number":"54540","RawContent":null,"Title":"[release/8.0] Update dependencies from dotnet/source-build-reference-packages","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:785fec4d-50df-4a20-cbf9-08db9e4fbff5)\r\n## From https://github.com/dotnet/source-build-reference-packages\r\n- **Subscription**: 785fec4d-50df-4a20-cbf9-08db9e4fbff5\r\n- **Build**: \r\n- **Date Produced**: March 13, 2024 7:36:11 PM UTC\r\n- **Commit**: 79827eed138fd2575a8b24820b4f385ee4ffb6e6\r\n- **Branch**: refs/heads/release/8.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.SourceBuild.Intermediate.source-build-reference-packages**: [from 8.0.0-alpha.1.24162.3 to 8.0.0-alpha.1.24163.3][1]\r\n\r\n[1]: https://github.com/dotnet/source-build-reference-packages/compare/c08ec59adc...79827eed13\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:785fec4d-50df-4a20-cbf9-08db9e4fbff5)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/54540","RelatedDescription":"Closed or merged PR \"[release/8.0] Update dependencies from dotnet/source-build-reference-packages\" (#54540)"},{"Id":"2186086671","IsPullRequest":false,"CreatedAt":"2024-03-14T11:15:12","Actor":"sonnemaf","Number":"54539","RawContent":null,"Title":"Blazor Identity templates and CRUD scaffolding should use the DbContextFactory","State":"open","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nThe Identity templates and CRUD scaffolding of Blazor 8 are not using the [guidelines](https://learn.microsoft.com/en-us/aspnet/core/blazor/blazor-ef-core?view=aspnetcore-8.0#new-dbcontext-instances) for using EF Core in Blazor apps. \r\n\r\nI think this is bad because this will cause issues because the DbContext which is used in the current solution is a scoped service. In server-side Blazor apps, scoped service registrations can be problematic because the instance is shared across components within the user's circuit. [DbContext](https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontext) isn't thread safe and isn't designed for concurrent use. \r\n\r\nThe template and scaffolding should be a best practice and they are not.\r\n\r\n\n\n### Describe the solution you'd like\n\nRegister a DbContextFactory service in the `Program.cs`\r\n\r\n```cs\r\nbuilder.Services.AddDbContext<ApplicationDbContext>(options =>\r\n    options.UseSqlServer(connectionString));\r\n```\r\n\r\nThis should be:\r\n\r\n```cs\r\nbuilder.Services.AddDbContextFactory<ApplicationDbContext>(options =>\r\n    options.UseSqlServer(connectionString));\r\n```\r\n\r\nThis will also mean that the Pages and maybe also the `AddIdentityCore` services start using the Factory. This won't be easy.\r\n\r\nThe same for the scaffolded CRUD pages. They should get a `IDbContextFactory<T>` injected and not a `DbContect`.  You will have to create a `DbContext` that exists for the [lifetime of a component](https://learn.microsoft.com/en-us/aspnet/core/blazor/blazor-ef-core?view=aspnetcore-8.0#scope-to-the-component-lifetime). \r\n\r\nIf this is done the developers will use this solution too for their own components.\r\n\r\n\n\n### Additional context\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/54539","RelatedDescription":"Open issue \"Blazor Identity templates and CRUD scaffolding should use the DbContextFactory\" (#54539)"},{"Id":"2183723866","IsPullRequest":false,"CreatedAt":"2024-03-14T11:12:22","Actor":"kyurkchyan","Number":"54525","RawContent":null,"Title":"_framework/blazor.web.js & _framework/dotnet.js fail to load with 404 when changing the base URL of a .NET 8 Blazor Web App","State":"closed","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI have .NET 8 Blazor Web App that I've created from the Visual Studio template. It has server and client projects.\r\nI need to change the base URL of the application to be `/portals/sales`. Here are the changes that I've made\r\n\r\n 1. Inside `Program.cs`\r\n    ```csharp\r\n    app.UseBlazorFrameworkFiles(new PathString(\"/portals/sales\"));\r\n    app.UseStaticFiles(\"/portals/sales\");\r\n    app.UseAntiforgery();\r\n\r\n    app.MapRazorComponents<App>()\r\n        .AddInteractiveServerRenderMode()\r\n        .AddInteractiveWebAssemblyRenderMode(options =>\r\n            options.PathPrefix = \"/portals/sales\")\r\n        .AddAdditionalAssemblies(typeof(MK.Sales.Portal.Client._Imports).Assembly);\r\n    ```\r\n 2. Inside the `App.razor`\r\n    ```html\r\n     <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n        <base href=\"/portals/sales/\" />\r\n        <link rel=\"stylesheet\" href=\"bootstrap/bootstrap.min.css\" />\r\n        <link rel=\"stylesheet\" href=\"app.css\" />\r\n        <link rel=\"stylesheet\" href=\"MK.Sales.Portal.styles.css\" />\r\n        <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\" />\r\n        <HeadOutlet />\r\n    </head>\r\n\r\n    <body>\r\n        <Routes />\r\n        <script src=\"/portals/sales/_framework/blazor.web.js\"></script>\r\n    </body>\r\n\r\n    </html>\r\n    ```\r\n 3. Inside the server `csproj`\r\n    ```csproj\r\n    <PropertyGroup>\r\n      <TargetFramework>net8.0</TargetFramework>\r\n      <Nullable>enable</Nullable>\r\n      <ImplicitUsings>enable</ImplicitUsings>\r\n      <StaticWebAssetBasePath>/portals/sales/</StaticWebAssetBasePath>\r\n    </PropertyGroup>\r\n    ```\r\n\r\nWhen I launch the application under `https://localhost:5001/portals/sales` URL, everything loads correctly, except the `_framework/blazor.web.js`. I receive 404 and the `_framework/blazor.web.js` is not loaded. \r\n\r\nWhen I manually load `https://localhost:5001/_framework/blazor.web.js`, it loads just fine.\r\n\r\nI am not sure what am I missing, but Blazor fails to supply the `_framework/blazor.web.js` from the overridden base path `/portals/sales`. Instead, the `_framework/blazor.web.js` remains at the base path.\r\n\r\nWhat should I change in my code to make Blazor supply the `_framework/blazor.web.js` from the `/portals/sales` base path?\n\n### Expected Behavior\n\nWhen specifying path prefix, all resources, including the `_framework/blazor.web.js` should be served from the specified base path.\n\n### Steps To Reproduce\n\n1. Clone the repro project from  [here](https://github.com/kyurkchyan/BlazorCustomBaseUrl)\r\n2. Run the server project\r\n3. Observe that site loads\r\n4. Open developer tools\r\n5. Observe that the `_framework/blazor.web.js` can't be loaded\n\n### Exceptions (if any)\n\nWhen opening developer tools in the browser I get these errors\r\n\r\n- For `_framework/blazor.web.js`\r\n  ```\r\n  GET https://dev.m-kopa.net/portals/sales/_framework/blazor.web.js net::ERR_ABORTED 404 (Not Found)\r\n  ```\r\n- For `_framework/dotnet.js`\r\n  ```\r\n  blazor.web.js:1 \r\n   \r\n   GET https://localhost:5001/portals/sales/_framework/dotnet.js net::ERR_ABORTED 500 (Internal Server Error)\r\n  (anonymous) @ blazor.web.js:1\r\n  (anonymous) @ blazor.web.js:1\r\n  load @ blazor.web.js:1\r\n  (anonymous) @ blazor.web.js:1\r\n  await in (anonymous) (async)\r\n  ti @ blazor.web.js:1\r\n  startLoadingWebAssemblyIfNotStarted @ blazor.web.js:1\r\n  registerComponent @ blazor.web.js:1\r\n  vi @ blazor.web.js:1\r\n  fi @ blazor.web.js:1\r\n  gi @ blazor.web.js:1\r\n  fi @ blazor.web.js:1\r\n  gi @ blazor.web.js:1\r\n  fi @ blazor.web.js:1\r\n  gi @ blazor.web.js:1\r\n  fi @ blazor.web.js:1\r\n  gi @ blazor.web.js:1\r\n  fi @ blazor.web.js:1\r\n  pi @ blazor.web.js:1\r\n  (anonymous) @ blazor.web.js:1\r\n  write @ blazor.web.js:1\r\n  blazor.web.js:1  Uncaught (in promise) TypeError: Failed to fetch dynamically imported module: https://localhost:5001/portals/sales/_framework/dotnet.js\r\n  ```\n\n### .NET Version\n\n8.0.200\n\n### Anything else?\n\n- Microsoft.AspNetCore.Components.WebAssembly.Server  Version \"8.0.2\"\r\n- Rider and Visual Studio\r\n- dotnet --info output\r\n```\r\n.NET SDK:\r\n Version:           8.0.200\r\n Commit:            438cab6a9d\r\n Workload version:  8.0.200-manifests.5638171e\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22631\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.200\\\r\n\r\n.NET workloads installed:\r\n [android]\r\n   Installation Source: SDK 8.0.200, VS 17.9.34616.47\r\n   Manifest Version:    34.0.79/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.android\\34.0.79\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [ios]\r\n   Installation Source: SDK 8.0.200, VS 17.9.34616.47\r\n   Manifest Version:    17.2.8022/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.ios\\17.2.8022\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [wasm-tools]\r\n   Installation Source: SDK 8.0.200\r\n   Manifest Version:    8.0.2/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.workload.mono.toolchain.current\\8.0.2\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [maui-windows]\r\n   Installation Source: VS 17.9.34616.47\r\n   Manifest Version:    8.0.6/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maui\\8.0.6\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [maccatalyst]\r\n   Installation Source: VS 17.9.34616.47\r\n   Manifest Version:    17.2.8022/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maccatalyst\\17.2.8022\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n\r\nHost:\r\n  Version:      8.0.2\r\n  Architecture: x64\r\n  Commit:       1381d5ebd2\r\n\r\n.NET SDKs installed:\r\n  3.1.426 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.408 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.419 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.406 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.200 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```","Url":"https://github.com/dotnet/aspnetcore/issues/54525","RelatedDescription":"Closed issue \"_framework/blazor.web.js & _framework/dotnet.js fail to load with 404 when changing the base URL of a .NET 8 Blazor Web App\" (#54525)"},{"Id":"2185609715","IsPullRequest":false,"CreatedAt":"2024-03-14T07:14:19","Actor":"Tornhoof","Number":"54537","RawContent":null,"Title":"Active indicator for filter for QuickGrid","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI'm trying to add an activity indicator to the filter in the quickgrid, but it requires copying css and custom HeaderTemplates. Currently, there is no indication if a filter is active and if you have more than one filter in a grid you need to search for the active one yourself.\r\n\r\nSteps to get this working, in this code I want to modify the color of the filter indicator to something other than black\r\n1. To render the current header template the following markup code needs to copied into your own HeaderTemplate\r\nhttps://github.com/dotnet/aspnetcore/blob/268a2dfc29b33e3fdb73cbac6eb198c05314d77e/src/Components/QuickGrid/Microsoft.AspNetCore.Components.QuickGrid/src/Columns/ColumnBase.razor#L20-L42\r\nUnfortunately the isolated css for the col-title is not using ::deep, which means that the css needs to be copied too (the css for col-options-button is ::deep).\r\nOtherwise the output looks like this:\r\n![grafik](https://github.com/dotnet/aspnetcore/assets/7989549/44f02042-b8ea-4629-9d8d-c40213b129c4)\r\n\r\nSlightly simplified it looks like this (including the actual search box):\r\n```csharp\r\n<HeaderTemplate>\r\n    <button class=\"col-options-button @m_UserNameOptionsActive\" type=\"button\" title=\"Column options\" @onclick=\"@(() => context.Grid.ShowColumnOptionsAsync(context))\"></button>\r\n    <button class=\"col-title\" type=\"button\" @onclick=\"@(() => context.Grid.SortByColumnAsync(context))\">\r\n        <div class=\"col-title-text\">@context.Title</div>\r\n        <div class=\"sort-indicator\" aria-hidden=\"true\"></div>\r\n    </button>\r\n</HeaderTemplate>\r\n<ColumnOptions>\r\n    <div class=\"search-box\">\r\n        <input type=\"search\" autofocus @bind=\"m_UserNameFilter\" @bind:event=\"oninput\"/>\r\n    </div>\r\n</ColumnOptions>\r\n```\r\n\r\n2. Add a field to the css for the button (e.g.@m_UserNameOptionsActive)\r\n3. Add css which modifies the color\r\n```css\r\n.col-filter-active {\r\n   filter: invert(29%) sepia(80%) saturate(2378%) hue-rotate(207deg) brightness(98%) contrast(102%);\r\n}\r\n```\r\n4. Add code which sets the variable  \r\n```css\r\nif (!string.IsNullOrEmpty(m_UserNameFilter))\r\n{\r\n    result = result.Where(c => c.UserName.Contains(m_UserNameFilter, StringComparison.CurrentCultureIgnoreCase));\r\n    m_UserNameOptionsActive = \"col-filter-active\";\r\n}\r\nelse\r\n{\r\n    m_UserNameOptionsActive = null;\r\n}\r\n```\r\nNow the filter indicator color should change color to something like this, if the variable is not empty\r\n![grafik](https://github.com/dotnet/aspnetcore/assets/7989549/0e90e925-4e6d-4770-a99c-b16d47219169)\r\n\r\nAs described above, the steps are fairly involved, you need to copy css around, add a unique variable/field to each property you want that method to work for and you need to modify the filter code to enable/disable it.\r\n\r\nIt would be nice to have that out of the box\r\n\r\n\r\n\r\n### Describe the solution you'd like\r\n\r\nThis is just the way I did it, based on the example above, there might be a better ways, I'm rather new to the whole blazor thingie.\r\n\r\n1. Change the isolated css in https://github.com/dotnet/aspnetcore/blob/main/src/Components/QuickGrid/Microsoft.AspNetCore.Components.QuickGrid/src/Columns/ColumnBase.razor.css to be ::deep, just like the css in https://github.com/dotnet/aspnetcore/blob/main/src/Components/QuickGrid/Microsoft.AspNetCore.Components.QuickGrid/src/QuickGrid.razor.css so I don't need to copy the css around\r\n\r\n2. Add internal logic which enables some variable to be set if the oninput event output is not empty\r\n\r\nI think the minimum viable approach here is to atleast do the css ::deep thing, everything else could be just an example on the nice https://aspnet.github.io/quickgridsamples/filtering page.\r\n\r\n### Additional context\r\n\r\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/54537","RelatedDescription":"Open issue \"Active indicator for filter for QuickGrid\" (#54537)"},{"Id":"2185561311","IsPullRequest":false,"CreatedAt":"2024-03-14T06:49:51","Actor":"GihanSoft","Number":"54536","RawContent":null,"Title":"Cannot bind StringValues for HTTP request header with Minimal APIs","State":"open","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nusing `FromHeader` attribute on minimal API parameter with type `StringValues` type produce error on build and analyze\r\n\r\n```\r\nProgram.cs(7,18,7,70): error ASP0020: Parameter 'ifMatch' of type StringValues should define a bool TryParse(string, IFormatProvider, out StringValues) method, or implement IParsable<StringValues> (https://aka.ms/aspnet/analyzers)\r\n```\r\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\nbuild this code:\r\n```csharp\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Extensions.Primitives;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\"/\", ([FromHeader(Name = \"If-Match\")] StringValues ifMatch) => ifMatch);\r\n\r\napp.Run();\r\n```\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.202\n\n### Anything else?\n\nthere is an issue (#40752) that address same bug in previous versions. It seems it's returned again","Url":"https://github.com/dotnet/aspnetcore/issues/54536","RelatedDescription":"Open issue \"Cannot bind StringValues for HTTP request header with Minimal APIs\" (#54536)"},{"Id":"2185385742","IsPullRequest":false,"CreatedAt":"2024-03-14T04:17:57","Actor":"pr-benchmarks[bot]","Number":"54535","RawContent":null,"Title":"Benchmark stopped running: blazorwasmbenchmark","State":"open","Body":"| Scenario | Environment | Date |\n| -------- | ----------- | ---- ||   |  |  |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n@MackinnonBuck\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/54535","RelatedDescription":"Open issue \"Benchmark stopped running: blazorwasmbenchmark\" (#54535)"},{"Id":"2186913249","IsPullRequest":false,"CreatedAt":"2024-03-14T03:02:59","Actor":"Shane32","Number":"54544","RawContent":null,"Title":".NET 7/8 SDK breaks .NET Framework compilation","State":"open","Body":"### Description\n\nWhen compiling a .NET Framework 4.8 web application that uses ASP.NET Core 2.1 via the .NET 7/8 SDK, the web app fails to run under IIS Express.\r\n\r\nThis scenario is triggered only when there is a reference to Microsoft.NETFramework.ReferenceAssemblies.  See:\r\n- https://learn.microsoft.com/en-us/dotnet/framework/migration-guide/reference-assemblies\r\n\r\nNote that ASP.NET Core 2.1 is currently supported for .NET Framework.  See here:\r\n- https://dotnet.microsoft.com/en-us/platform/support/policy/aspnet/2.1-packages\r\n\n\n### Reproduction Steps\n\n1. Create .NET Framework 4.8 MVC web application which uses ASP.Net Core 2.1\r\n2. Add a reference to Microsoft.NETFramework.ReferenceAssemblies pursuant to MS documentation\r\n3. Attempt running it from Visual Studio 2022 with IIS Express\r\n\r\nHere is a sample repo: https://github.com/Shane32/SampleNet48Mvc\r\n\r\nSample project's csproj file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net48</TargetFramework>\r\n    <DebugType>full</DebugType>\r\n    <ApplicationIcon />\r\n    <OutputType>Exe</OutputType>\r\n    <StartupObject />\r\n    <AssemblyName>SampleNet48Mvc</AssemblyName>\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n    <LangVersion>8.0</LangVersion>\r\n    <Configurations>Debug;Release</Configurations>\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n  </PropertyGroup>\r\n\t\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.1.7\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.1.3\" />\r\n\t  \r\n    <!-- the following reference is fine with .NET 6 SDK, but breaks when using .NET 7 / 8 SDK -->\r\n    <!-- when commenting this out, must delete bin/obj folders or problem will persist -->\r\n    <PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies\" Version=\"1.0.3\" PrivateAssets=\"All\" />\r\n\t  \r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\n\n### Expected behavior\n\nThe project should run properly.\n\n### Actual behavior\n\nThrows exception:\r\n> InvalidOperationException: Cannot find reference assembly 'Microsoft.CSharp.dll' file for package Microsoft.CSharp.Reference\r\n\r\nException details:\r\n```\r\nSystem.InvalidOperationException: Cannot find reference assembly 'Microsoft.CSharp.dll' file for package Microsoft.CSharp.Reference\r\n   at Microsoft.Extensions.DependencyModel.Resolution.ReferenceAssemblyPathResolver.TryResolveAssemblyPaths(CompilationLibrary library, List`1 assemblies)\r\n   at Microsoft.Extensions.DependencyModel.Resolution.CompositeCompilationAssemblyResolver.TryResolveAssemblyPaths(CompilationLibrary library, List`1 assemblies)\r\n   at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List`1 assemblies)\r\n   at System.Linq.Enumerable.<SelectManyIterator>d__17`2.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider.PopulateFeature(IEnumerable`1 parts, MetadataReferenceFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.GetCompilationReferences()\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.get_CompilationReferences()\r\n   at Microsoft.CodeAnalysis.Razor.CompilationTagHelperFeature.GetDescriptors()\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorTagHelperBinderPhase.ExecuteCore(RazorCodeDocument codeDocument)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorEngine.Process(RazorCodeDocument document)\r\n   at Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.Process(RazorProjectItem projectItem)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.OnCacheMiss(String normalizedPath)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.CreateCacheResult(HashSet`1 expirationTokens, String relativePath, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.OnCacheMiss(ViewLocationExpanderContext expanderContext, ViewLocationCacheKey cacheKey)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.LocatePageFromViewLocations(ActionContext actionContext, String pageName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.FindView(ActionContext actionContext, ViewResult viewResult)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.<ExecuteAsync>d__6.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.ViewResult.<ExecuteResultAsync>d__26.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__20.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResultFilterAsync>d__28`2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultFilters>d__26.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__23.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__18.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__16.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\r\n```\n\n### Regression?\n\nYes; works fine when pinning the .NET 6 SDK via global.json\n\n### Known Workarounds\n\n1. Pin the .NET 6.0.420 SDK via global.json, or\r\n2. Remove the reference to Microsoft.NETFramework.ReferenceAssemblies\r\n\n\n### Configuration\n\n- .NET Framework 4.8\r\n- Windows 10 22H2\r\n- x64\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/54544","RelatedDescription":"Open issue \".NET 7/8 SDK breaks .NET Framework compilation\" (#54544)"},{"Id":"2185249399","IsPullRequest":false,"CreatedAt":"2024-03-14T02:22:14","Actor":"pr-benchmarks[bot]","Number":"54534","RawContent":null,"Title":"Perf improvement: json, plainTextNoParamsEmptyFilter","State":"open","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| json  | Json Minimal APIs 3- Trends Arm 28 Linux | 03/12/2024 22:01:19 | 922,672 | 968,029 | 4.92 % (45,356)  :thumbsup:  | 2.60 σ | 17,417.59 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Minimal.dll</td>            <td>`1.0.0` -> `1.0.0`</td>            <td>https://github.com/dotnet/Benchmarks/compare/c051dc3e8da61e66f9bdee6f5c379c637c36ccdd...b842da466dfde5a0003c38bfabcb7f86283a245d</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`9.0.0-preview.3.24157.5` -> `9.0.0-preview.3.24161.11`</td>            <td>https://github.com/dotnet/aspnetcore/compare/d9df235c2e6d41b65d8e860c5e209d9df8cbcae1...1ee58ec0d8837ac310c9ef9e784a35bf3027dbd5</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`9.0.0-preview.3.24157.12` -> `9.0.0-preview.3.24161.4`</td>            <td>https://github.com/dotnet/runtime/compare/da781b3aab1bc30793812bced4a6b64d2df31a9f...efa2b78175388a656893d0e9becc408d99afe445</td></tr></table></details> |\n| plainTextNoParamsEmptyFilter  | Plaintext (Empty Filters, No Parameters) 1- Trends Intel Windows | 03/12/2024 09:12:14 | 4,086,666 | 4,165,262 | 1.92 % (78,596)  :thumbsup:  | 3.13 σ | 25,122.67 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>MapAction.dll</td>            <td>`1.0.0` -> `1.0.0`</td>            <td>https://github.com/dotnet/Benchmarks/compare/c051dc3e8da61e66f9bdee6f5c379c637c36ccdd...9f59f381ead8fa8b20cdcaf0d4b57f7601dda7c8</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`9.0.0-preview.3.24156.20` -> `9.0.0-preview.3.24158.2`</td>            <td>https://github.com/dotnet/aspnetcore/compare/449abac6f1ca12fa0ad557a872c219fcdfae09f3...b3b8dffff4d092058b2d8942268b498cbfdb14ec</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`9.0.0-preview.3.24156.25` -> `9.0.0-preview.3.24161.4`</td>            <td>https://github.com/dotnet/runtime/compare/8330db998659c4e6410aba370b37e4304a517a2b...efa2b78175388a656893d0e9becc408d99afe445</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/54534","RelatedDescription":"Open issue \"Perf improvement: json, plainTextNoParamsEmptyFilter\" (#54534)"},{"Id":"2185021379","IsPullRequest":false,"CreatedAt":"2024-03-13T22:46:46","Actor":"SteveSandersonMS","Number":"54533","RawContent":null,"Title":"Antiforgery state doesn't always reach WebAssembly components","State":"open","Body":"Repro:\r\n\r\n* Create a Blazor Web App with global WebAssembly interactivity, and \"include sample pages\"\r\n* Edit `Counter.razor` to include a form\r\n\r\n```\r\n<form method=\"post\">\r\n    <AntiforgeryToken />\r\n</form>\r\n```\r\n\r\n* Launch the app\r\n* Verify that if you first land on the homepage, then do a client-side navigation to Counter, that the form does **not** contain any `__RequestVerificationToken` hidden field (see this using the DOM inspector)\r\n* Now reload the page while you're on Counter, so that's where you first land. Verify that the form **does** contain the `__RequestVerificationToken` hidden field. Even if you navigate away and back interactively, it will still be there\r\n\r\nThis inconsistency can't be desirable. Whether or not there's an antiforgery token shouldn't depend on which page you first arrived at.\r\n\r\nAlso note this is **not** a matter of prerendering. The exact same problem still occurs even if you disable prerendering.\r\n\r\nYou can work around it by adding `<AntiforgeryToken />` into your layout. The fact that this workaround works suggests that the problem is:\r\n\r\n * We only use the persisted component state during the first WebAssembly render cycle\r\n * If there isn't an `<AntiforgeryToken />` on the first WebAssembly render cycle, the persisted antiforgery state just gets discarded\r\n\r\nI guess we could special-case things for antiforgery by ensuring the WebAssembly renderer *always* reads that state on the first render. Not sure if an equivalent problem could occur for other persistent component state (perhaps not, because app-specific persistent state would only exist if a component is prerendered to emit it, and then the same component should occur during the WebAssembly startup to collect that state - so maybe this bug is just unique to antiforgery data).","Url":"https://github.com/dotnet/aspnetcore/issues/54533","RelatedDescription":"Open issue \"Antiforgery state doesn't always reach WebAssembly components\" (#54533)"},{"Id":"2186818773","IsPullRequest":false,"CreatedAt":"2024-03-13T20:40:12","Actor":"omajid","Number":"54541","RawContent":null,"Title":"Some thoughts on npm package-lock/cache in the VMR","State":"open","Body":"I have been poking around the package-lock.json file and the npm cache that's included in the VMR and found a few things that I wasn't expecting. I am posting a list of thoughts and questions here to share this information and get some feedback. Please let me know if there's a better place to take this disscussion, or if I should file specific issues to get some things fixed.\r\n\r\n\r\n- It looks like all packages are restored from https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm.\r\n  - Microsoft probably has equivalent or better supply chain security than npmjs.org, but depending on this custom npm registry seems a bit odd. \r\n  -  Is there some way to fetch packages from npmjs.org instead?\r\n  - If not, is there some way to validate that these are the same packages as those on npmjs.org?\r\n \r\n- Some packages have a different version in pakcage-lock.json than what's available on npmjs.org. `word-wrap` caught my eye, bcause the version in package-lock.json is [1.2.6](https://github.com/dotnet/dotnet/blob/901ef47572bee55d6e2ba50cbfc53c50b7377d05/src/aspnetcore/package-lock.json#L41-L49), but npmjs.com only has [1.2.5](https://www.npmjs.com/package/word-wrap?activeTab=versions)\r\n\r\n- There are dependencies marked as `\"dev\": true`. Are they for testing/linting/etc? Can we build ASP.NET Core without those?\r\n\r\n- Are the non-dev dependencies actually embedded into the product?\r\n\r\n- Can we split dev vs product dependencies into separate caches? That would let distros delete (or not use) the devDependencies, reducing the need to worry about prebuilts, and dev-only dependncies leaking into the product.\r\n","Url":"https://github.com/dotnet/aspnetcore/issues/54541","RelatedDescription":"Open issue \"Some thoughts on npm package-lock/cache in the VMR\" (#54541)"},{"Id":"2184491249","IsPullRequest":false,"CreatedAt":"2024-03-13T20:30:22","Actor":"mkArtakMSFT","Number":"54532","RawContent":null,"Title":"I have searched the existing issues","State":"closed","Body":"","Url":"https://github.com/dotnet/aspnetcore/issues/54532","RelatedDescription":"Closed issue \"I have searched the existing issues\" (#54532)"},{"Id":"2184251452","IsPullRequest":true,"CreatedAt":"2024-03-13T16:54:47","Actor":"dotnet-maestro[bot]","Number":"54529","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b451f54d-a9ea-4fe6-3a48-08d961c5a689)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b451f54d-a9ea-4fe6-3a48-08d961c5a689\r\n- **Build**: \r\n- **Date Produced**: March 13, 2024 12:04:36 AM UTC\r\n- **Commit**: c80f6c7bcfdd0e62a3012f9a97ab52be477c7d75\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.24113.1 to 6.0.0-beta.24162.4][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Installers**: [from 6.0.0-beta.24113.1 to 6.0.0-beta.24162.4][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Templating**: [from 6.0.0-beta.24113.1 to 6.0.0-beta.24162.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.24113.1 to 6.0.0-beta.24162.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/96facbceac...c80f6c7bcf\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b451f54d-a9ea-4fe6-3a48-08d961c5a689)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/54529","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#54529)"},{"Id":"2184276980","IsPullRequest":false,"CreatedAt":"2024-03-13T15:19:35","Actor":"mus65","Number":"54531","RawContent":null,"Title":"IIS AspNetCoreModuleV2: random/endless recycles","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nAfter deploying an update of our application at one of our customers in IIS, our application was stuck in an endless loop. It would  always start successfully and then be recycled a few seconds later.\r\n\r\nIn the event log we saw the following:\r\n\r\n```\r\nAn ISAPI reported an unhealthy condition to its worker process. Therefore, the worker process with process id of '9092' serving application pool '<PoolName>' has requested a recycle.\r\n```\r\n\r\nThis only stopped after we completely restarted the IIS server. This was not reproducible at first, but happened again a few weeks later after another update.\r\n\r\nAfter some investigation, we noticed that this would still happen randomly a few times a day, even after fixing the \"endless loop\" by restarting IIS. All auto-recycle settings on the application pool are disabled. After enabling the debug logging for the ASP .NET Core Module, we saw the following log event when a random recycle happened:\r\n\r\n```\r\n[2024-03-13T12:40:45.437Z, PID: 11716] [aspnetcorev2.dll] ASPNET_CORE_GLOBAL_MODULE::OnGlobalConfigurationChange ''\r\n[2024-03-13T12:40:45.439Z, PID: 11716] [aspnetcorev2.dll] Stopping application '/LM/W3SVC/2/ROOT/<path to app>'\r\n```\r\n\r\nRelevant code here: \r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/268a2dfc29b33e3fdb73cbac6eb198c05314d77e/src/Servers/IIS/AspNetCoreModuleV2/AspNetCore/globalmodule.cpp#L52-L68\r\n\r\nNotice that path in the OnGlobalConfigurationChange log message is empty (as far as I can see it can't be NULL since then the recycle wouldn't be triggered). Our current assumption is that this has something to do with the problem since we don't know when/how this happens. When you edit an IIS configuration file, this contains the path to the relevant config section.\r\n\r\nAfter further investigation we also saw these random recycles on other customer systems in different infrastructures. However the endless recycle loop only happened on a particular system until now. Unfortunately we have no Debug Logs for the endless loop case and can't reproduce it again. We assume that the endless loop was also caused by configuration changes with an empty path, but we can't be sure.\r\n\r\nWe currently worked around this setting [disallowRotationOnConfigChange to true](https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/advanced?view=aspnetcore-8.0#disallow-rotation-on-config). We have not seen this happen since.\r\n\r\nSo the questions are:\r\n - what triggers these global configuration events with the empty path? The [API doc](https://learn.microsoft.com/en-us/iis/web-development-reference/native-code-api-reference/iglobalconfigurationchangeprovider-getchangepath-method) gives no indication what an empty path means.\r\n - Should the ASP .NET Core Module maybe ignore the configuration change if the path is empty? From my understanding this would \"fix\" the issue.\r\n \r\nThis happened with ASP .NET Core 8.0.2 on Windows Server 2016 with a self-contained x64 app.\r\n\r\n### Expected Behavior\r\n\r\n_No response_\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.2\r\n\r\n### Anything else?\r\n\r\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/54531","RelatedDescription":"Open issue \"IIS AspNetCoreModuleV2: random/endless recycles\" (#54531)"},{"Id":"2183887165","IsPullRequest":true,"CreatedAt":"2024-03-13T14:50:54","Actor":"dotnet-maestro[bot]","Number":"54527","RawContent":null,"Title":"[release/8.0] Update dependencies from dotnet/source-build-reference-packages","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:785fec4d-50df-4a20-cbf9-08db9e4fbff5)\r\n## From https://github.com/dotnet/source-build-reference-packages\r\n- **Subscription**: 785fec4d-50df-4a20-cbf9-08db9e4fbff5\r\n- **Build**: \r\n- **Date Produced**: March 12, 2024 8:25:39 PM UTC\r\n- **Commit**: c08ec59adcf8b56cd1b4de2090c320496566b5c6\r\n- **Branch**: refs/heads/release/8.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.SourceBuild.Intermediate.source-build-reference-packages**: [from 8.0.0-alpha.1.24061.1 to 8.0.0-alpha.1.24162.3][1]\r\n\r\n[1]: https://github.com/dotnet/source-build-reference-packages/compare/453a37ef7a...c08ec59adc\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:785fec4d-50df-4a20-cbf9-08db9e4fbff5)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/54527","RelatedDescription":"Closed or merged PR \"[release/8.0] Update dependencies from dotnet/source-build-reference-packages\" (#54527)"},{"Id":"2183827972","IsPullRequest":false,"CreatedAt":"2024-03-13T12:01:25","Actor":"christiannagel","Number":"54526","RawContent":null,"Title":"TimeSpan shown as object in OpenAPI definition is not compatible with System.Text.Json serialization","State":"open","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nCreating a minimal APIs project using an object containing a `TimeSpan` such as\r\n\r\n```csharp\r\npublic record class Test(Guid Id, TimeSpan Duration);\r\n```\r\n\r\nCreates this OpenAPI definition:\r\n\r\n```json\r\n   \"schemas\": {\r\n            \"Test\": {\r\n                \"type\": \"object\",\r\n                \"properties\": {\r\n                    \"id\": {\r\n                        \"type\": \"string\",\r\n                        \"format\": \"uuid\"\r\n                    },\r\n                    \"duration\": {\r\n                        \"$ref\": \"#/components/schemas/TimeSpan\"\r\n                    }\r\n                },\r\n                \"additionalProperties\": false\r\n            },\r\n            \"TimeSpan\": {\r\n                \"type\": \"object\",\r\n                \"properties\": {\r\n                    \"ticks\": {\r\n                        \"type\": \"integer\",\r\n                        \"format\": \"int64\"\r\n                    },\r\n                    \"days\": {\r\n                        \"type\": \"integer\",\r\n                        \"format\": \"int32\",\r\n                        \"readOnly\": true\r\n                    },\r\n                    \"hours\": {\r\n                        \"type\": \"integer\",\r\n                        \"format\": \"int32\",\r\n                        \"readOnly\": true\r\n                    },\r\n                    \"milliseconds\": {\r\n                        \"type\": \"integer\",\r\n                        \"format\": \"int32\",\r\n                        \"readOnly\": true\r\n                    },\r\n                    \"microseconds\": {\r\n                        \"type\": \"integer\",\r\n                        \"format\": \"int32\",\r\n                        \"readOnly\": true\r\n                    },\r\n                    \"nanoseconds\": {\r\n                        \"type\": \"integer\",\r\n                        \"format\": \"int32\",\r\n                        \"readOnly\": true\r\n                    },\r\n                    \"minutes\": {\r\n                        \"type\": \"integer\",\r\n                        \"format\": \"int32\",\r\n                        \"readOnly\": true\r\n                    },\r\n                    \"seconds\": {\r\n                        \"type\": \"integer\",\r\n                        \"format\": \"int32\",\r\n                        \"readOnly\": true\r\n                    },\r\n                    \"totalDays\": {\r\n                        \"type\": \"number\",\r\n                        \"format\": \"double\",\r\n                        \"readOnly\": true\r\n                    },\r\n                    \"totalHours\": {\r\n                        \"type\": \"number\",\r\n                        \"format\": \"double\",\r\n                        \"readOnly\": true\r\n                    },\r\n                    \"totalMilliseconds\": {\r\n                        \"type\": \"number\",\r\n                        \"format\": \"double\",\r\n                        \"readOnly\": true\r\n                    },\r\n                    \"totalMicroseconds\": {\r\n                        \"type\": \"number\",\r\n                        \"format\": \"double\",\r\n                        \"readOnly\": true\r\n                    },\r\n                    \"totalNanoseconds\": {\r\n                        \"type\": \"number\",\r\n                        \"format\": \"double\",\r\n                        \"readOnly\": true\r\n                    },\r\n                    \"totalMinutes\": {\r\n                        \"type\": \"number\",\r\n                        \"format\": \"double\",\r\n                        \"readOnly\": true\r\n                    },\r\n                    \"totalSeconds\": {\r\n                        \"type\": \"number\",\r\n                        \"format\": \"double\",\r\n                        \"readOnly\": true\r\n                    }\r\n                },\r\n                \"additionalProperties\": false\r\n            }\r\n        }\r\n```\r\n\r\nSending a POST request passing this information fails with a `BadHttpRequestException` because the System.Text.Json does not expect an object.\r\n\r\n```\r\nMicrosoft.AspNetCore.Http.BadHttpRequestException: Failed to read parameter \"Test test\" from the request body as JSON.\r\n ---> System.Text.Json.JsonException: The JSON value could not be converted to Test. Path: $.duration | LineNumber: 2 | BytePositionInLine: 15.\r\n ---> System.InvalidOperationException: Cannot get the value of a token type 'StartObject' as a string.\r\n```\r\n\r\n\n\n### Expected Behavior\n\nI would expect this to run. Having an HTTP client calling the API succeeds, just the OpenAPI document that's created is not compatible and does not succeed calling the API. Same behavior when the JSON source generator is used.\n\n### Steps To Reproduce\n\nCreate a Web API project (see this repo: https://github.com/christiannagel/issues-timestamp)\r\n\r\n```csharp\r\nusing System.Text.Json.Serialization;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddSwaggerGen();\r\n\r\nvar app = builder.Build();\r\n\r\nif (app.Environment.IsDevelopment())\r\n{\r\n    app.UseSwagger();\r\n    app.UseSwaggerUI();\r\n}\r\n\r\napp.UseHttpsRedirection();\r\n\r\napp.MapGet(\"/test\", () =>\r\n{\r\n    return new Test(Guid.NewGuid(), TimeSpan.FromSeconds(10));\r\n});\r\n\r\napp.MapPost(\"/test\", (Test test) =>\r\n{\r\n    Console.WriteLine(test.Id);\r\n    Console.WriteLine(test.Duration);\r\n    return Results.Ok();\r\n});\r\n\r\napp.Run();\r\n\r\npublic record class Test(Guid Id, TimeSpan Duration);\r\n```\r\n\r\nCalling the API with a .NET client (also part of the source code repo) succeeds. The issue is with the Swagger OpenAPI creation, and might be an issue with https://github.com/domaindrivendev/Swashbuckle.AspNetCore or https://github.com/microsoft/OpenAPI.NET\n\n### Exceptions (if any)\n\nException:\r\n\r\nMicrosoft.AspNetCore.Http.BadHttpRequestException: Failed to read parameter \"Test test\" from the request body as JSON.\r\n ---> System.Text.Json.JsonException: The JSON value could not be converted to Test. Path: $.duration | LineNumber: 2 | BytePositionInLine: 15.\r\n ---> System.InvalidOperationException: Cannot get the value of a token type 'StartObject' as a string.\r\n   at System.Text.Json.ThrowHelper.ThrowInvalidOperationException_ExpectedString(JsonTokenType tokenType)\r\n   at System.Text.Json.Serialization.Converters.TimeSpanConverter.Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonConverter`1.TryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, T& value, Boolean& isPopulatedValue)\r\n   at System.Text.Json.Serialization.Converters.SmallObjectWithParameterizedConstructorConverter`5.TryRead[TArg](ReadStack& state, Utf8JsonReader& reader, JsonParameterInfo jsonParameterInfo, TArg& arg)\r\n   at System.Text.Json.Serialization.Converters.SmallObjectWithParameterizedConstructorConverter`5.ReadAndCacheConstructorArgument(ReadStack& state, Utf8JsonReader& reader, JsonParameterInfo jsonParameterInfo)\r\n   at System.Text.Json.Serialization.Converters.ObjectWithParameterizedConstructorConverter`1.ReadConstructorArgumentsWithContinuation(ReadStack& state, Utf8JsonReader& reader, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.Converters.ObjectWithParameterizedConstructorConverter`1.OnTryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, T& value)\r\n   at System.Text.Json.Serialization.JsonConverter`1.TryRead(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options, ReadStack& state, T& value, Boolean& isPopulatedValue)\r\n   at System.Text.Json.Serialization.JsonConverter`1.ReadCore(Utf8JsonReader& reader, JsonSerializerOptions options, ReadStack& state)\r\n   --- End of inner exception stack trace ---\r\n   at System.Text.Json.ThrowHelper.ReThrowWithPath(ReadStack& state, Utf8JsonReader& reader, Exception ex)\r\n   at System.Text.Json.Serialization.JsonConverter`1.ReadCore(Utf8JsonReader& reader, JsonSerializerOptions options, ReadStack& state)\r\n   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.ContinueDeserialize(ReadBufferState& bufferState, JsonReaderState& jsonReaderState, ReadStack& readStack)\r\n   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.DeserializeAsync(Stream utf8Json, CancellationToken cancellationToken)\r\n   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.DeserializeAsObjectAsync(Stream utf8Json, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.HttpRequestJsonExtensions.ReadFromJsonAsync(HttpRequest request, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.HttpRequestJsonExtensions.ReadFromJsonAsync(HttpRequest request, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.<HandleRequestBodyAndCompileRequestDelegateForJson>g__TryReadBodyAsync|102_0(HttpContext httpContext, Type bodyType, String parameterTypeName, String parameterName, Boolean allowEmptyRequestBody, Boolean throwOnBadRequest, JsonTypeInfo jsonTypeInfo)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.Log.InvalidJsonRequestBody(HttpContext httpContext, String parameterTypeName, String parameterName, Exception exception, Boolean shouldThrow)\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.<HandleRequestBodyAndCompileRequestDelegateForJson>g__TryReadBodyAsync|102_0(HttpContext httpContext, Type bodyType, String parameterTypeName, String parameterName, Boolean allowEmptyRequestBody, Boolean throwOnBadRequest, JsonTypeInfo jsonTypeInfo)\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.<>c__DisplayClass102_2.<<HandleRequestBodyAndCompileRequestDelegateForJson>b__2>d.MoveNext()\r\n--- End of stack trace from previous location ---\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\n\n### .NET Version\n\n8.0.200\n\n### Anything else?\n\n.NET SDK:\r\n Version:           8.0.200\r\n Commit:            438cab6a9d\r\n Workload version:  8.0.200-manifests.5295d9b5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22631\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.200\\\r\n\r\n.NET workloads installed:\r\n [aspire]\r\n   Installation Source: SDK 8.0.200\r\n   Manifest Version:    8.0.0-preview.5.24162.5/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.0.0-preview.5.24162.5\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [maui-windows]\r\n   Installation Source: VS 17.9.34622.214, VS 17.10.34707.107\r\n   Manifest Version:    8.0.10-ci.net8.10300/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maui\\8.0.10-ci.net8.10300\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [android]\r\n   Installation Source: VS 17.9.34622.214, VS 17.10.34707.107\r\n   Manifest Version:    34.0.91/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.android\\34.0.91\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [ios]\r\n   Installation Source: VS 17.9.34622.214, VS 17.10.34707.107\r\n   Manifest Version:    17.2.8257-ci.main/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.ios\\17.2.8257-ci.main\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [maccatalyst]\r\n   Installation Source: VS 17.9.34622.214, VS 17.10.34707.107\r\n   Manifest Version:    17.2.8257-ci.main/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maccatalyst\\17.2.8257-ci.main\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [wasm-tools-net7]\r\n   Installation Source: VS 17.9.34622.214\r\n   Manifest Version:    8.0.3/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.workload.mono.toolchain.net7\\8.0.3\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n\r\nHost:\r\n  Version:      8.0.2\r\n  Architecture: x64\r\n  Commit:       1381d5ebd2\r\n\r\n.NET SDKs installed:\r\n  8.0.200 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download","Url":"https://github.com/dotnet/aspnetcore/issues/54526","RelatedDescription":"Open issue \"TimeSpan shown as object in OpenAPI definition is not compatible with System.Text.Json serialization\" (#54526)"},{"Id":"2183699661","IsPullRequest":false,"CreatedAt":"2024-03-13T10:57:13","Actor":"pampua84","Number":"54524","RawContent":null,"Title":"ASP.NET Core Identity .NET 8 two factor authenticator does not comply with the rfc6238 standard","State":"open","Body":"Hi, the two-factor authentication mechanism and, consequently, the validation of the OTP, generated through an Authenticator app, and validated with Asp.Net Core Identity .NET8 and earlier versions, do not comply with the [RFC6238](https://www.rfc-editor.org/rfc/rfc6238.txt) standard. Below is what the documentation reports:\r\n\r\n> “We recommend a default time-step size of 30 seconds. This default value of 30 seconds is selected as a balance between security and usability.”\r\n\r\nHowever, in the library, the value is set to **90 seconds** forward and backward. Not only is this parameter significantly greater than the standard, but it is also not configurable, as indicated by the comment in the documentation:\r\n\r\n> \r\n“// Allow codes from 90s in each direction (we could make this configurable?)”\r\n\r\nAdditionally, there is an open issue numbered #14423 that has not yet been resolved.\r\n\r\nThanks\r\n\r\n### Expected Behavior\r\n\r\nI expect the validation window to not be a HardCoded value, and to be configurable. Also I expect there is a solution to not accept the same OTP in a specific time window\r\n\r\n### .NET Version\r\n\r\n.NET 8 and previous\r\n\r\n### Anything else?\r\n\r\nASP.NET Core Identity","Url":"https://github.com/dotnet/aspnetcore/issues/54524","RelatedDescription":"Open issue \"ASP.NET Core Identity .NET 8 two factor authenticator does not comply with the rfc6238 standard\" (#54524)"},{"Id":"2183667642","IsPullRequest":false,"CreatedAt":"2024-03-13T10:41:03","Actor":"mdzieg","Number":"54523","RawContent":null,"Title":"setting <Location Path=\"xxxx\"> in web.config results in 404 from IISExpress","State":"open","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI am unable to exclude windows authentication for a path (healthcheck) for my aspnet app.\r\n\r\nIn launchsettings we have enabled windows authentication:\r\n```\r\n\"iisSettings\": {\r\n    \"windowsAuthentication\": true,\r\n    \"anonymousAuthentication\": false,\r\n\t  \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:54594\",\r\n      \"sslPort\": 44319\r\n    }\r\n```\r\n\r\nThen, I added an element in webconfig to enable anonymous access:\r\n```\r\n\t<location path=\"health\">\r\n\t\t<system.webServer>\r\n\t\t\t<security>\r\n\t\t\t\t<authentication>\r\n\t\t\t\t\t<anonymousAuthentication enabled=\"true\" />\r\n\t\t\t\t\t<windowsAuthentication enabled=\"false\" />\r\n\t\t\t\t</authentication>\r\n\t\t\t</security>\r\n\t\t</system.webServer>\r\n\t</location>\r\n```\r\n\r\nWith this in place I have 404 error when accessing the path, the error comes from IIS. As if all handlers were wiped out.\r\n```\r\ncurl https://localhost:44319/health\r\ncurl : HTTP Error 404.0 - Not Found\r\n```\n\n### Expected Behavior\n\nI should see healthcheck page not 404 error from IISExpress.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.101\n\n### Anything else?\n\nIDE: Rider","Url":"https://github.com/dotnet/aspnetcore/issues/54523","RelatedDescription":"Open issue \"setting <Location Path=\"xxxx\"> in web.config results in 404 from IISExpress\" (#54523)"},{"Id":"2183599521","IsPullRequest":true,"CreatedAt":"2024-03-13T10:09:04","Actor":"dotnet-maestro[bot]","Number":"54522","RawContent":null,"Title":"[main] Update dependencies from dotnet/efcore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8ce5251e-8269-419d-3b2a-08d8b8050dda)\r\n## From https://github.com/dotnet/efcore\r\n- **Subscription**: 8ce5251e-8269-419d-3b2a-08d8b8050dda\r\n- **Build**: 20240313.1\r\n- **Date Produced**: March 13, 2024 10:03:06 AM UTC\r\n- **Commit**: 23bbebafe0866d29729972c38314de8594012fc8\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **dotnet-ef**: [from 9.0.0-preview.3.24162.9 to 9.0.0-preview.3.24163.1][1]\r\n  - **Microsoft.EntityFrameworkCore**: [from 9.0.0-preview.3.24162.9 to 9.0.0-preview.3.24163.1][1]\r\n  - **Microsoft.EntityFrameworkCore.Design**: [from 9.0.0-preview.3.24162.9 to 9.0.0-preview.3.24163.1][1]\r\n  - **Microsoft.EntityFrameworkCore.InMemory**: [from 9.0.0-preview.3.24162.9 to 9.0.0-preview.3.24163.1][1]\r\n  - **Microsoft.EntityFrameworkCore.Relational**: [from 9.0.0-preview.3.24162.9 to 9.0.0-preview.3.24163.1][1]\r\n  - **Microsoft.EntityFrameworkCore.Sqlite**: [from 9.0.0-preview.3.24162.9 to 9.0.0-preview.3.24163.1][1]\r\n  - **Microsoft.EntityFrameworkCore.SqlServer**: [from 9.0.0-preview.3.24162.9 to 9.0.0-preview.3.24163.1][1]\r\n  - **Microsoft.EntityFrameworkCore.Tools**: [from 9.0.0-preview.3.24162.9 to 9.0.0-preview.3.24163.1][1]\r\n\r\n[1]: https://github.com/dotnet/efcore/compare/368737c232...23bbebafe0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:8ce5251e-8269-419d-3b2a-08d8b8050dda)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/54522","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/efcore\" (#54522)"},{"Id":"2183517823","IsPullRequest":false,"CreatedAt":"2024-03-13T09:31:43","Actor":"habakuk007","Number":"54521","RawContent":null,"Title":"dotnet-openapi generates illegal method names with leading numbers (and other errors)","State":"open","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen I try to add an OpenAPI endpoint to Visual Studio 2022 (17.9.2) to a .Net Core 8 project I get several errors:\r\n\r\n- The description cannot be converted (that can be fixed by deleting the description in the OpenAPI specification)\r\n- It generated invalid code (e.g. method names that start with a number)\r\n\r\nSee https://apidocs.tempo.io/tempo-core.yaml for the OpenAPI specification and https://apidocs.tempo.io/ for more information about TempoAPI 4.0.\r\n\r\nSwagger.io can show the specification and does not report any errors.\n\n### Expected Behavior\n\nThat working code is generated.\n\n### Steps To Reproduce\n\nTry to add an OpenAPI Connected Service in Visual Studio with the specification https://apidocs.tempo.io/tempo-core.yaml \n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.200\n\n### Anything else?\n\nVisual Studio 2022 (17.9.2)","Url":"https://github.com/dotnet/aspnetcore/issues/54521","RelatedDescription":"Open issue \"dotnet-openapi generates illegal method names with leading numbers (and other errors)\" (#54521)"},{"Id":"2183414073","IsPullRequest":false,"CreatedAt":"2024-03-13T08:38:45","Actor":"ripebananas","Number":"54520","RawContent":null,"Title":"ASP.NET core inconsistent model binding from form-data and json when trying to bind to an IEnumerable<T>","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nModel binding from form-data seems to work differently than model binding from json.\r\n\r\n### Expected Behavior\r\n\r\n_No response_\r\n\r\n### Steps To Reproduce\r\n\r\nCreate a simple Web API with controllers. Also have Nullable enabled in the csproj.\r\nCreate the following controller and model:\r\n```c#\r\n[ApiController]\r\n[Route(\"[controller]\")]\r\npublic class ApiController : ControllerBase\r\n{\r\n    [HttpPost(\"[action]\")]\r\n    public IActionResult PostFormData([FromForm] PostRequest request) =>\r\n        Ok(string.Join(\",\", request.Values ?? [\"<none>\"]));\r\n\r\n    [HttpPost(\"[action]\")]\r\n    public IActionResult PostJson(PostRequest request) =>\r\n        Ok(string.Join(\",\", request.Values ?? [\"<none>\"]));\r\n}\r\n\r\npublic record PostRequest\r\n{\r\n    public IEnumerable<string> Values { get; set; } = [];\r\n}\r\n```\r\n\r\nNote that the `Values` property has a default value in the `PostRequest` record.\r\n\r\nWhen calling the `PostJson` method on the controller, the model is bound as expected (screenshot from Postman):\r\n![image](https://github.com/dotnet/aspnetcore/assets/25548778/587d0bb0-a9df-445a-8853-2510516953f9)\r\n\r\nWhen calling the `PostFormData` method, though, the application returns an error:\r\n![image](https://github.com/dotnet/aspnetcore/assets/25548778/0004f776-b874-4f03-974b-1dbfa47da7c5)\r\n\r\nThe error is:\r\n```\r\n{\r\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\r\n    \"title\": \"One or more validation errors occurred.\",\r\n    \"status\": 400,\r\n    \"errors\": {},\r\n    \"traceId\": \"00-3ea96923dfbfea72ba0c067b226b3985-0d099b1cc0b1cb3d-00\"\r\n}\r\n```\r\n\r\nI might be missing something, but there seems to be other strange behavior on the `PostFormData` method, i.e. when the model is bound from form-data:\r\n - Removing the default value of `[]` (i.e. leaving it null), will not raise an error and the model property is bound as expected.\r\n - When the default value is a collection with number of elements that is equal or greater than the elements passed in the form-data (e.g. default value of `[\"x\", \"x\", \"x\"]`), then an error is not raised but the bound collection retains the default value (`[\"x\", \"x\", \"x\"]`) and not the one passed in the form-data.\r\n - Changing the `Values` property type to one of `string[]`, `List<string>`, `ICollection<string>` seems to prevent the app from raising the error.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.200\r\n\r\n### Anything else?\r\n\r\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/54520","RelatedDescription":"Open issue \"ASP.NET core inconsistent model binding from form-data and json when trying to bind to an IEnumerable<T>\" (#54520)"},{"Id":"2182875251","IsPullRequest":true,"CreatedAt":"2024-03-13T02:07:48","Actor":"dotnet-maestro[bot]","Number":"54519","RawContent":null,"Title":"[main] Update dependencies from dotnet/efcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8ce5251e-8269-419d-3b2a-08d8b8050dda)\r\n## From https://github.com/dotnet/efcore\r\n- **Subscription**: 8ce5251e-8269-419d-3b2a-08d8b8050dda\r\n- **Build**: 20240312.9\r\n- **Date Produced**: March 12, 2024 11:58:31 PM UTC\r\n- **Commit**: 368737c23224d3771b4db7b169c7bd80630adcdc\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **dotnet-ef**: [from 9.0.0-preview.3.24162.2 to 9.0.0-preview.3.24162.9][1]\r\n  - **Microsoft.EntityFrameworkCore**: [from 9.0.0-preview.3.24162.2 to 9.0.0-preview.3.24162.9][1]\r\n  - **Microsoft.EntityFrameworkCore.Design**: [from 9.0.0-preview.3.24162.2 to 9.0.0-preview.3.24162.9][1]\r\n  - **Microsoft.EntityFrameworkCore.InMemory**: [from 9.0.0-preview.3.24162.2 to 9.0.0-preview.3.24162.9][1]\r\n  - **Microsoft.EntityFrameworkCore.Relational**: [from 9.0.0-preview.3.24162.2 to 9.0.0-preview.3.24162.9][1]\r\n  - **Microsoft.EntityFrameworkCore.Sqlite**: [from 9.0.0-preview.3.24162.2 to 9.0.0-preview.3.24162.9][1]\r\n  - **Microsoft.EntityFrameworkCore.SqlServer**: [from 9.0.0-preview.3.24162.2 to 9.0.0-preview.3.24162.9][1]\r\n  - **Microsoft.EntityFrameworkCore.Tools**: [from 9.0.0-preview.3.24162.2 to 9.0.0-preview.3.24162.9][1]\r\n\r\n[1]: https://github.com/dotnet/efcore/compare/98c33c7111...368737c232\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:8ce5251e-8269-419d-3b2a-08d8b8050dda)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/54519","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/efcore\" (#54519)"},{"Id":"2182781780","IsPullRequest":false,"CreatedAt":"2024-03-12T22:16:08","Actor":"brentschmaltz","Number":"54518","RawContent":null,"Title":"Update version of IdentityModel to >= 7.4.0 for 9.x","State":"open","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nasp.net 9.x is currently referencing IdentityModel 7.1.2, there are known serialization issues with versions <= 7.4.0.\r\nhttps://www.nuget.org/packages/Microsoft.AspNetCore.Authentication.OpenIdConnect/9.0.0-preview.2.24128.4#dependencies-body-tab\r\n\r\nUsers that update a single IdentityModel package results in a subset of IdentityModel updates and issues arise.\r\nsee: https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/2514\r\n\r\n\n\n### Describe the solution you'd like\n\nasp.net 9.x picking up regular releases of IdentityModel so we can find issues early.\n\n### Additional context\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/54518","RelatedDescription":"Open issue \"Update version of IdentityModel to >= 7.4.0 for 9.x\" (#54518)"}],"ResultType":"GitHubIssue"},"Identity-Issues":{"Issues":[{"Id":"385990535","IsPullRequest":true,"CreatedAt":"2018-12-19T00:12:57","Actor":"grahamehorner","Number":"2087","RawContent":null,"Title":"WIP: IUserTwoFactorTokenProvider token length POC","State":"closed","Body":"This is a WIP idea to support configuration of token length for UserTwoFactorTokenProviders","Url":"https://github.com/aspnet/Identity/pull/2087","RelatedDescription":"Closed or merged PR \"WIP: IUserTwoFactorTokenProvider token length POC\" (#2087)"},{"Id":"385943112","IsPullRequest":true,"CreatedAt":"2018-12-19T00:06:47","Actor":"grahamehorner","Number":"2086","RawContent":null,"Title":"Update Rfc6238AuthenticationService.cs","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2086","RelatedDescription":"Closed or merged PR \"Update Rfc6238AuthenticationService.cs\" (#2086)"},{"Id":"385172059","IsPullRequest":false,"CreatedAt":"2018-12-06T18:36:01","Actor":"ben-foster-rightio","Number":"2084","RawContent":null,"Title":"Random Authentication Sign Outs in ASP.NET Core 2.1","State":"closed","Body":"I'm receiving user complaints saying they are being directed to the login screen randomly when it has only been a minute or so since they clicked a button that would have sent a message to the server side.\r\n\r\nHere is a log of one of the errors.\r\n`[INF] Executed action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" in 1473.4897ms (afa2e885)\r\n[INF] Request finished in 1474.816ms 200 application/json; charset=utf-8 (791a596a)\r\n[INF] Request starting HTTP/1.1 GET http://MyAppmanager.MyApp.co.uk/api/AgreementAPI/GetAgreements?searchTerm=1543309403289   (ca22a1cb)\r\n[INF] Entity Framework Core \"2.1.3-rtm-32065\" initialized '\"IdentityDbContext\"' using provider '\"Microsoft.EntityFrameworkCore.SqlServer\"' with options: \"None\" (9958f5bb)\r\n[INF] Executed DbCommand (\"1\"ms) [Parameters=[\"@__get_Item_0='?' (DbType = Int32)\"], CommandType='Text', CommandTimeout='30']\"\r\n\"\"SELECT TOP(1) [e].[UserId], [e].[AcquisitionTeamId], [e].[AreaNumber], [e].[AuthorisationPassword], [e].[AutoBooking], [e].[AutoUpdateSoftware], [e].[AvayaFullName], [e].[AvayaName], [e].[AvaysExt], [e].[CanSellAgreement], [e].[ChangePassword], [e].[CompanyId], [e].[DateEnded], [e].[DateStarted], [e].[DebugLogs], [e].[DefaultQuotes], [e].[DepartmentId], [e].[EmailAddress], [e].[Forename], [e].[HomeServeEmployee], [e].[Initials], [e].[IsPurchaseOrderReviewer], [e].[JobTitle], [e].[LogonName], [e].[MaxLogins], [e].[Message], [e].[Name], [e].[Notes], [e].[PartTime], [e].[Password], [e].[ReportDDI], [e].[RoleId], [e].[Shift], [e].[ShowEngineerAlert], [e].[Surname], [e].[TerminationId], [e].[TrackFastVersion], [e].[UnreadMessage], [e].[VisibleOnChronicle]\r\nFROM [Users] AS [e]\r\nWHERE [e].[UserId] = @__get_Item_0\" (0723d8ff)\r\n[INF] AuthenticationScheme: \"Identity.Application\" signed out. (d3f50c8d)\r\n[INF] AuthenticationScheme: \"Identity.External\" signed out. (d3f50c8d)\r\n[INF] AuthenticationScheme: \"Identity.TwoFactorUserId\" signed out. (d3f50c8d)\r\n**[INF] \"Identity.Application\" was not authenticated. Failure message: \"No principal.\" (48071232)**\r\n[INF] Route matched with \"{action = \\\"GetAgreements\\\", controller = \\\"AgreementAPI\\\", page = \\\"\\\", area = \\\"\\\"}\". Executing action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" (a44c0341)\r\n[INF] Authorization failed. (b15dd539)\r\n[INF] Authorization failed for the request at filter '\"Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter\"'. (8b6446cb)\r\n[INF] Executing ChallengeResult with authentication schemes ([]). (f3dca807)\r\n[INF] AuthenticationScheme: \"Identity.Application\" was challenged. (d45f1f38)\r\n[INF] Executed action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" in 0.3846ms (afa2e885)\r\n[INF] Request finished in 9.3835ms 401  (791a596a)\r\n[INF] Request starting HTTP/1.1 POST http://MyAppmanager.MyApp.co.uk/API/CustomerAPI/WriteToLog/ application/x-www-form-urlencoded; charset=UTF-8 61 (ca22a1cb)\r\n[INF] Route matched with \"{action = \\\"WriteToLog\\\", controller = \\\"CustomerAPI\\\", page = \\\"\\\", area = \\\"\\\"}\". Executing action \"MyAppManager.Controllers.API.CustomerAPIController.WriteToLog (MyAppManager)\" (a44c0341)\r\n[INF] Executing action method \"MyAppManager.Controllers.API.CustomerAPIController.WriteToLog (MyAppManager)\" with arguments ([\"ERROR: WebAPI call is not authenticated\", \"error\"]) - Validation state: Valid (4e3479ed)\r\n[ERR] Client log: ERROR: WebAPI call is not authenticated (d4244074)\r\n`\r\n\r\n**Startup File**\r\n`public void ConfigureServices(IServiceCollection services)\r\n{\r\n\tservices.AddScoped<IRFDbRepository, RFDbRepository>();\r\n\tvar connection = _configuration.GetConnectionString(\"RFDbConnection\");\r\n\tservices.Configure<ConnectionStrings>(_configuration.GetSection(\"ConnectionStrings\"));\r\n\tservices.AddDbContext<RFDbContext>(options => options.UseSqlServer(connection));\r\n\tservices.AddDbContext<IdentityDbContext>(options => options.UseSqlServer(connection));\r\n\tservices.AddAutoMapper();\r\n\tservices.AddIdentity<User, UserRole>().AddDefaultTokenProviders();\r\n\tservices.AddTransient<IUserStore<User>, UserStore>();\r\n\tservices.AddTransient<IRoleStore<UserRole>, RoleStore>();\r\n\tservices.ConfigureApplicationCookie(options =>\r\n\t{\r\n\t\toptions.LoginPath = \"/Identity/Account/Login\";\r\n\t\toptions.LogoutPath = \"/Identity/Account/Logout\";\r\n\t\toptions.ExpireTimeSpan = TimeSpan.FromMinutes(60);\r\n\t\toptions.SlidingExpiration = true;                \r\n\t});\r\n\tservices.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1).AddRazorPagesOptions(options =>\r\n\t{\r\n\t\toptions.AllowAreas = true;\r\n\t\toptions.Conventions.AuthorizeAreaPage(\"Identity\", \"/Account/Logout\");\r\n\t});\r\n}`\r\n\r\n`public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, IRFDbRepository rFDbRepository)\r\n{\r\n\tloggerFactory.AddFile(_configuration.GetValue<string>(\"Logging:LogFile\"));\r\n\tapp.UseStaticFiles();\r\n\tapp.UseAuthentication();\r\n\tapp.UseMvc(routes =>\r\n\t{\r\n\t\troutes.MapRoute(\r\n\t\t\tname: \"default\",\r\n\t\t\ttemplate: \"{controller=Home}/{action=Index}/{id?}\");\r\n\t\troutes.MapRoute(\r\n\t\t\tname: \"ActionApi\",\r\n\t\t\ttemplate: \"api/{controller}/{action}/{id?}\");\r\n\t});\r\n\trFDbRepository.TestConnection();\r\n}`\r\n\r\nAlso I've setup the app pool as below:\r\n![image](https://user-images.githubusercontent.com/43367982/49141893-8fe42800-f2ef-11e8-8ea3-c79e45ca65a3.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2084","RelatedDescription":"Closed issue \"Random Authentication Sign Outs in ASP.NET Core 2.1\" (#2084)"},{"Id":"387530281","IsPullRequest":true,"CreatedAt":"2018-12-04T23:53:47","Actor":"natemcmaster","Number":"2092","RawContent":null,"Title":"This repo will be archived, project moved to aspnet/AspNetCore","State":"closed","Body":"As a part of https://github.com/aspnet/AspNetCore/issues/3598, this repo will be made read-only soon. The source code and issues will move to https://github.com/aspnet/AspNetCore.","Url":"https://github.com/aspnet/Identity/pull/2092","RelatedDescription":"Closed or merged PR \"This repo will be archived, project moved to aspnet/AspNetCore\" (#2092)"},{"Id":"382432623","IsPullRequest":true,"CreatedAt":"2018-12-04T23:49:57","Actor":"HaoK","Number":"2075","RawContent":null,"Title":"Port retry handler test improvement to 2.1","State":"closed","Body":"Port of similar fix for 2.2 https://github.com/aspnet/Identity/pull/2052","Url":"https://github.com/aspnet/Identity/pull/2075","RelatedDescription":"Closed or merged PR \"Port retry handler test improvement to 2.1\" (#2075)"},{"Id":"387479804","IsPullRequest":false,"CreatedAt":"2018-12-04T21:12:03","Actor":"LosManos","Number":"2091","RawContent":null,"Title":"The non-scaffolded razor page \"Register\" does not recognise Password.RequiredLength.","State":"closed","Body":"### Describe the bug\r\nSetting password length through \r\n```\r\npublic void ConfigureServices(IServiceCollection services){\r\n  ...\r\n  services.Configure<IdentityOptions>(options =>\r\n  {\r\n    options.Password.RequiredLength = 1;\r\n  });\r\n  ...\r\n```\r\ndoes not change the non-scaffolded razor page as it always says \"The Password must be at least 6 and at max 100 characters long.\" if inputed password is < 6 characters.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Create a new ASP.NET Core Web 2.1 application\r\n2. Select \"Web application (Model-View Controller)\" \r\n3. Select \"Change authentication\"\r\n3.1. Select \"Individual User Account\"\r\n4. Select Ok to have the project scaffolded.\r\n5. Open file Startup.cs\r\n6. Add \r\n```\r\nservices.Configure<IdentityOptions>(options =>\r\n{\r\n  options.Password.RequiredLength = 1;\r\n});\r\n```\r\nto method `ConfigureServices`.\r\n7. Press F5 (or select your favourite start-debug method).\r\n8. In the web browser that pops up\r\n8.1. Select Register\r\n8.2. Type \"a@example.com\" as user name (or select your favourite fast-to-type email addresss).\r\n8.3. Type \"a\" as password (or any password shorter than 6 characters).\r\n8.4. Select Register\r\n\r\n### Expected behavior\r\nThe web page should have been updated with information about successful creation of user.\r\n\r\n### Actual behaviour\r\nThe web page says \"The Password must be at least 6 and at max 100 characters long.\"\r\n\r\n### Additional context\r\nI have a question at stack overflow https://stackoverflow.com/questions/53620708/how-do-i-set-password-options-in-aspnet-core-2-1 that explains the same issue if this is not clear enough.\r\n\r\nThis issue might be duplicate of #774.","Url":"https://github.com/aspnet/Identity/issues/2091","RelatedDescription":"Closed issue \"The non-scaffolded razor page \"Register\" does not recognise Password.RequiredLength.\" (#2091)"},{"Id":"386513703","IsPullRequest":false,"CreatedAt":"2018-12-02T00:47:54","Actor":"NinoFloris","Number":"2089","RawContent":null,"Title":"No way to Add a password after creating user, except through Reset","State":"closed","Body":"So we do have RemovePasswordAsync but where's AddPasswordAsync? \r\nWe currently hack around it by using a Reset token we generated before it, but we do really need it for upgrading OAuth/Connect accounts to full accounts.","Url":"https://github.com/aspnet/Identity/issues/2089","RelatedDescription":"Closed issue \"No way to Add a password after creating user, except through Reset\" (#2089)"},{"Id":"385940834","IsPullRequest":false,"CreatedAt":"2018-12-01T01:11:14","Actor":"grahamehorner","Number":"2085","RawContent":null,"Title":"Q: moving of source","State":"closed","Body":"Is the identity repo under the aspnet/aspnetcore like other repos have ? ","Url":"https://github.com/aspnet/Identity/issues/2085","RelatedDescription":"Closed issue \"Q: moving of source\" (#2085)"},{"Id":"386331000","IsPullRequest":true,"CreatedAt":"2018-11-30T20:17:17","Actor":"dougbu","Number":"2088","RawContent":null,"Title":"Remove `SetCompatibiltyVersion(...)` call in sample","State":"closed","Body":"- aspnet/Mvc#7156 2 of ?","Url":"https://github.com/aspnet/Identity/pull/2088","RelatedDescription":"Closed or merged PR \"Remove `SetCompatibiltyVersion(...)` call in sample\" (#2088)"},{"Id":"378822046","IsPullRequest":true,"CreatedAt":"2018-11-29T21:55:44","Actor":"grahamehorner","Number":"2060","RawContent":null,"Title":"Update Rfc6238AuthenticationService.cs","State":"closed","Body":"20bytes is 160bits","Url":"https://github.com/aspnet/Identity/pull/2060","RelatedDescription":"Closed or merged PR \"Update Rfc6238AuthenticationService.cs\" (#2060)"},{"Id":"380746507","IsPullRequest":false,"CreatedAt":"2018-11-29T20:17:46","Actor":"wijnsema","Number":"2067","RawContent":null,"Title":"BypassTowFactor in SignInManager:ExternalLoginSignInAsync should default to False","State":"closed","Body":"As requested by @brockallen in #850 it is now possible to bypass 2FA in case of an external login. \r\n\r\nI'm sure there are good reasons to bypass 2FA, however the current implementation is far to general: \r\n\r\n- All providers all treated equal (some providers might not even support 2FA at all)\r\n- All users all treated equal (users can have 2FA enabled or not)\r\n\r\nThis bypass of 2FA really needs more refinement.\r\n\r\n**What makes this really a problem is the fact that it is enabled in the UI templates!** \r\nAs a developer using the template and enabling 2FA you expect 2FA to work for both local and external login!\r\n\r\nFurthermore, the redirect to the 2FA page is missing, so changing to call to `bypassTwoFactor = false` results in a confusing error that the user already exists.\r\n\r\nIn my opinion the following fragment from ExternalLogin.cshtml.cs\r\n```C#\r\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \r\n      info.ProviderKey, isPersistent: false, bypassTwoFactor: true);\r\nif (result.Succeeded)\r\n{\r\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \r\n      info.Principal.Identity.Name, info.LoginProvider);\r\n   return LocalRedirect(returnUrl);\r\n}\r\n```\r\nshould be replaced with\r\n```C#\r\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \r\n   info.ProviderKey, isPersistent: false, bypassTwoFactor: false);\r\nif (result.Succeeded)\r\n{\r\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \r\n      info.Principal.Identity.Name, info.LoginProvider);\r\n   return LocalRedirect(returnUrl);\r\n}\r\nif (result.RequiresTwoFactor)\r\n{\r\n   return RedirectToPage(\"./LoginWith2fa\", new { ReturnUrl = returnUrl });\r\n}\r\n```\r\nIf you enabled bypassTwoFactor it will still work.\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2067","RelatedDescription":"Closed issue \"BypassTowFactor in SignInManager:ExternalLoginSignInAsync should default to False\" (#2067)"},{"Id":"378006056","IsPullRequest":false,"CreatedAt":"2018-11-29T20:04:09","Actor":"blowdart","Number":"2058","RawContent":null,"Title":"Survey: Your experience using Identity UI and customization","State":"closed","Body":"We're taking a survey about how your experiences using ASP.NET Core Identity, and specifically Identity UI as a package.\r\n\r\nPlease give us your feedback, and, if you're willing, you might get a phone call to talk about your experiences in detail.\r\n\r\nhttps://microsoft.qualtrics.com/jfe/form/SV_3mTmFYDZAQutZMF ","Url":"https://github.com/aspnet/Identity/issues/2058","RelatedDescription":"Closed issue \"Survey: Your experience using Identity UI and customization\" (#2058)"},{"Id":"384918165","IsPullRequest":false,"CreatedAt":"2018-11-29T04:38:32","Actor":"OphiCA","Number":"2082","RawContent":null,"Title":"No sign-out authentication handler is registered for the scheme 'Identity.External'","State":"closed","Body":"Hello,\r\n\r\nFor several months now I've been trying to solve an issue with Identity, where 30-min on the dot after signing in, I am greeted by an `Invalid Operation Exception`:\r\n\r\n> InvalidOperationException: No sign-out authentication handler is registered for the scheme 'Identity.External'. The registered sign-out schemes are: Identity.Application. Did you forget to call AddAuthentication().AddCookies(\"Identity.External\",...)?\r\n\r\nSince it was on my blog site, I didn't put too much effort into it, even though it was an annoyance. Now, I'm looking into possibly some real world client work where I'd like to use ASP.NET Core with Identity, but I can't be having this same issue.\r\n\r\nCould someone please tell me why this exception throws? I don't want to use external schemes, so why is it trying to sign out of one? When did it sign into one?\r\n\r\nHere's the relevant code from my app, hopefully someone can point me in the right direction because I sure as heck can't.\r\n\r\n**Startup.cs**\r\n\r\n\tpublic sealed class Startup {\r\n\t\tpublic void ConfigureServices(\r\n\t\t\tIServiceCollection services) {\r\n\t\t\t//...\r\n\t\t\tservices.AddApplicationIdentity();\r\n\t\t\t//...\r\n\t\t\tservices.ConfigureApplicationCookie(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Cookie.SameSite = SameSiteMode.Strict;\r\n\t\t\t\t\to.Cookie.SecurePolicy = CookieSecurePolicy.Always;\r\n\r\n\t\t\t\t\to.AccessDeniedPath = new PathString(\"/admin\");\r\n\t\t\t\t\to.ExpireTimeSpan = TimeSpan.FromHours(4);\r\n\t\t\t\t\to.LoginPath = new PathString(\"/admin\");\r\n\t\t\t\t\to.LogoutPath = new PathString(\"/admin/sign-out\");\r\n\t\t\t\t});\r\n\t\t\tservices.Configure<IdentityOptions>(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Password.RequiredLength = 8;\r\n\r\n\t\t\t\t\to.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);\r\n\t\t\t\t\to.Lockout.MaxFailedAccessAttempts = 5;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic void Configure(\r\n\t\t\tIApplicationBuilder app) {\r\n\t\t\t//...\r\n\t\t\tapp.UseAuthentication();\r\n\t\t\t//...\r\n\t\t}\r\n\t}\r\n\r\n**ServiceCollectionExtensions**\r\n\r\n\tpublic static class ServiceCollectionExtensions {\r\n\t\tpublic static IdentityBuilder AddApplicationIdentity(\r\n\t\t\tthis IServiceCollection services) {\r\n\t\t\tservices.AddAuthentication(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.DefaultAuthenticateScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t\to.DefaultChallengeScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t\to.DefaultSignInScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t}).AddCookie(IdentityConstants.ApplicationScheme,\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Events = new CookieAuthenticationEvents {\r\n\t\t\t\t\t\tOnValidatePrincipal = SecurityStampValidator.ValidatePrincipalAsync\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\tservices.TryAddScoped<IdentityErrorDescriber>();\r\n\t\t\tservices.TryAddScoped<ILookupNormalizer, UpperInvariantLookupNormalizer>();\r\n\t\t\tservices.TryAddScoped<IPasswordHasher<User>, PasswordHasher<User>>();\r\n\t\t\tservices.TryAddScoped<IPasswordValidator<User>, PasswordValidator<User>>();\r\n\t\t\tservices.TryAddScoped<IUserClaimsPrincipalFactory<User>, UserClaimsPrincipalFactory<User>>();\r\n\t\t\tservices.TryAddScoped<UserManager<User>>();\r\n\t\t\tservices.TryAddScoped<IUserStore<User>, ApplicationUserStore>();\r\n\t\t\tservices.TryAddScoped<IUserValidator<User>, UserValidator<User>>();\r\n\t\t\tservices.TryAddScoped<ISecurityStampValidator, SecurityStampValidator<User>>();\r\n\t\t\tservices.TryAddScoped<SignInManager<User>>();\r\n\r\n\t\t\treturn new IdentityBuilder(typeof(User), services);\r\n\t\t}\r\n\t}\r\n\r\nI'm not going to include the `ApplicationUserStore` because I highly doubt it has anything to do with the exception. I'd appreciate any help because I am just struggling at this point. Thanks!","Url":"https://github.com/aspnet/Identity/issues/2082","RelatedDescription":"Closed issue \"No sign-out authentication handler is registered for the scheme 'Identity.External'\" (#2082)"},{"Id":"383003537","IsPullRequest":false,"CreatedAt":"2018-11-22T13:29:00","Actor":"LindaLawton","Number":"2079","RawContent":null,"Title":"Remember me isPersistent understanding","State":"closed","Body":"This is more of a question but its not enough of a question that i could post it up on stack overflow without risking it just getting closed as primary opinion based or to broad.   So i am going to put it here in hopes of getting an answer.\r\n\r\nThe issue is the understanding of how remember me is supposed to work.    My problem is that its not doing what we would expect it to do.   \r\n\r\nManagement expects when a user logs in and clicks remember me that they will then not be required to type their login and password again for a month.  Whether or not they will still have to type in the 2fa code is up for debate.\r\n\r\nWhat is actually happening is that i can close the browser reboot and come back for about an hour and 15 minutes and then i will be forced to type my password again.    This still happens even with a valid `.AspNetCore.Identity.Application` cookie set that is not due to expire for another month.\r\n\r\nAfter digging around in the code i found that Remember me is actually isPersistent and it is defined as.\r\n\r\n>Flag indicating whether the sign-in cookie should persist after the browser is closed.\r\n\r\nWhich brings you to:\r\n\r\nThere are two different types of Cookies:\r\n\r\n- session cookies, held in memory, and which expire once the browser exits\r\n- persistent cookies, which have a time-to-live, are persisted on disk, and are sent by the browser until their time-to-live has elapsed.\r\n\r\nAll this being said remember machine 2fa works as expected i am not prompted again for the 2fa and i have a cookie on my machine `Identity.TwoFactorRememberMe`.\r\n\r\nSo I guess my question is why are we not getting a `Identity.FactorRememberMe` or why isn't sign in respecting a long life time of the `AspNetCore.Identity.Application` cookie?\r\n\r\nHow is this supposed to work exactly?   I am following the code here even though we have normal MVC and not razor pages like you have in the example.  I am still just calling \r\n\r\n>var signInUserResult = await _signInManager.PasswordSignInAsync(userName, password, rememberMe, true);\r\n\r\nNote: I am using Asp .net Identity in Identity server 4 application.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2079","RelatedDescription":"Closed issue \"Remember me isPersistent understanding\" (#2079)"},{"Id":"383297898","IsPullRequest":false,"CreatedAt":"2018-11-21T22:08:40","Actor":"mmillican","Number":"2080","RawContent":null,"Title":"Replace a Role Validator","State":"closed","Body":"I am trying to create a custom role validator to support pseudo-multi-tenancy (which I know is not _officially_ supported in Identity) and am running into some issues.\r\n\r\nI've verified that my validator does work and is being called. However, the default validator appears to be called also. \r\n\r\nHere's my Identity service registration\r\n```\r\nservices.AddIdentity<User, Role>(setup =>\r\n    {\r\n        // Redacted settings\r\n    })\r\n    .AddRoleValidator<CustomRoleValidator<Role>>()\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders();\r\n```\r\n\r\nHow can I _remove_ the default RoleValidator?","Url":"https://github.com/aspnet/Identity/issues/2080","RelatedDescription":"Closed issue \"Replace a Role Validator\" (#2080)"},{"Id":"382890054","IsPullRequest":true,"CreatedAt":"2018-11-20T23:38:12","Actor":"dotnet-maestro-bot","Number":"2078","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\ngit checkout master\r\ngit merge --no-ff merge/release/2.2-to-master\r\ngit push origin master\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.2-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2078","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2078)"},{"Id":"382876972","IsPullRequest":true,"CreatedAt":"2018-11-20T23:38:12","Actor":"javiercn","Number":"2076","RawContent":null,"Title":"Update to IdentityServer 2.3.0","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2076","RelatedDescription":"Closed or merged PR \"Update to IdentityServer 2.3.0\" (#2076)"},{"Id":"382885320","IsPullRequest":true,"CreatedAt":"2018-11-20T23:19:15","Actor":"javiercn","Number":"2077","RawContent":null,"Title":"Update Identity Server dependencies to 2.3.0","State":"closed","Body":"This updates things on non-shipping product code, so it's ok to update (I asked).","Url":"https://github.com/aspnet/Identity/pull/2077","RelatedDescription":"Closed or merged PR \"Update Identity Server dependencies to 2.3.0\" (#2077)"},{"Id":"382068763","IsPullRequest":false,"CreatedAt":"2018-11-19T12:16:11","Actor":"wpqs","Number":"2074","RawContent":null,"Title":"Login doesn't show registered social logins after error","State":"closed","Body":"I'm using ASPNET Core 2.1 with Razor Pages UI Library and noticed that whilst registered social logins appear when I open the Login page, they disappear after an error like incorrect password.\r\n\r\nThere seems to be a bug in Identity\\Pages\\Account\\Login.cshtml.cs as \r\n````\r\n public IList<AuthenticationScheme> ExternalLogins { get; set; }\r\n\r\n````\r\nis only initialised in OnGetAsync(), but if an error happens OnPostAsync() then Page() is returned so OnGetAsyn() doesn't get called. Changing error handling in  OnPostAsync() so RedirectToPage() is returned seems to fix the problem.\r\n\r\nPlease confirm this is a bug and comment on my fix","Url":"https://github.com/aspnet/Identity/issues/2074","RelatedDescription":"Closed issue \"Login doesn't show registered social logins after error\" (#2074)"},{"Id":"381789469","IsPullRequest":true,"CreatedAt":"2018-11-17T00:27:58","Actor":"natemcmaster","Number":"2072","RawContent":null,"Title":"Upgrade projects to netcoreapp3.0","State":"closed","Body":"Changes:\r\n\r\n* Upgrade dependencies\r\n* Change TFM on Microsoft.AspNetCore.Identity to netcoreapp3.0\r\n* Remove .NET Framework tests\r\n\r\nPart of https://github.com/aspnet/AspNetCore/issues/3754","Url":"https://github.com/aspnet/Identity/pull/2072","RelatedDescription":"Closed or merged PR \"Upgrade projects to netcoreapp3.0\" (#2072)"},{"Id":"380931030","IsPullRequest":true,"CreatedAt":"2018-11-14T23:29:46","Actor":"pranavkm","Number":"2070","RawContent":null,"Title":"Use 3.0 configuration in RCLs","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2070","RelatedDescription":"Closed or merged PR \"Use 3.0 configuration in RCLs\" (#2070)"},{"Id":"378005714","IsPullRequest":false,"CreatedAt":"2018-11-14T21:00:55","Actor":"papyr","Number":"2057","RawContent":null,"Title":"AD directory user-groups; can IdentityRole be subclassed to implement Role-Groups or User-Groups","State":"closed","Body":"There is a disconnect with Active Directory, since we don't have support for User Groups in Identity, how can we implement or mirror this functionality inside ASP identity","Url":"https://github.com/aspnet/Identity/issues/2057","RelatedDescription":"Closed issue \"AD directory user-groups; can IdentityRole be subclassed to implement Role-Groups or User-Groups\" (#2057)"},{"Id":"380198930","IsPullRequest":false,"CreatedAt":"2018-11-14T17:33:59","Actor":"blankenbush","Number":"2065","RawContent":null,"Title":"Spelling error DeletePersonalData.cshtml.cs ","State":"closed","Body":"The word \"deleteing\" is wrong.  It should be \"deleting\" on line: 111; DeletePersonalData.cshtml.cs.\r\n\r\nAlso found in comment on line 183; SqlStoreTestBase.cs\r\n\r\n![capture](https://user-images.githubusercontent.com/187785/48412982-33401500-e714-11e8-903b-6e2fcc8e0a6a.PNG)\r\n","Url":"https://github.com/aspnet/Identity/issues/2065","RelatedDescription":"Closed issue \"Spelling error DeletePersonalData.cshtml.cs \" (#2065)"},{"Id":"380389829","IsPullRequest":true,"CreatedAt":"2018-11-14T17:33:01","Actor":"blankenbush","Number":"2066","RawContent":null,"Title":"Fix typo","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2066","RelatedDescription":"Closed or merged PR \"Fix typo\" (#2066)"},{"Id":"377364575","IsPullRequest":false,"CreatedAt":"2018-11-09T11:16:05","Actor":"yetanotherchris","Number":"2056","RawContent":null,"Title":"Should IdentityUser be in the EntityFramework namespace?","State":"closed","Body":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.entityframeworkcore.identityuser?view=aspnetcore-1.1\r\n\r\nI'm looking through various implementations from the [readme](https://github.com/aspnet/Identity/blob/master/README.md) and I've noticed they all use `IdentityUser ` for their concrete type to pass to `UserManager`, or have had to craft a custom type to be able to have a contract between the database and the .NET AspNetIdentity implentation they've written (see the DynamoDB library).\r\n\r\nI've had to do this too for the [Marten implementation I've written](https://github.com/yetanotherchris/Marten.AspNetIdentity), and the reason is, a `TUser` that your `UserStore` takes, should really be an interface - it will always have an email, most likely an Id of some sort, firstname, lastname and then a bag of properties.\r\n\r\nThings become even more abstract when dealing with claims.\r\n\r\nIf everyone is using `IdentityUser` or their own custom `TUser` doesn't this defeat the purpose of AspnetIdentity - which is to be able to switch and change implementations easily? That isn't possible if your consumer is tightly coupled with a `TUser` implementation of the library.\r\n\r\n### Example `TUser` implementations\r\n\r\n- [MongoIdentityUser](https://github.com/tugberkugurlu/AspNetCore.Identity.MongoDB/blob/master/src/AspNetCore.Identity.MongoDB/MongoIdentityUser.cs)\r\n- [DynamoIdentityUser](https://github.com/miltador/AspNetCore.Identity.DynamoDB/blob/master/src/AspNetCore.Identity.DynamoDB/DynamoIdentityUser.cs)\r\n- [Redis uses `IdentityUser<string>`](https://github.com/aguacongas/Identity.Redis/blob/develop/src/Aguacongas.Identity.Redis/UserStore.cs)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2056","RelatedDescription":"Closed issue \"Should IdentityUser be in the EntityFramework namespace?\" (#2056)"},{"Id":"376980171","IsPullRequest":true,"CreatedAt":"2018-11-02T21:57:29","Actor":"dotnet-maestro-bot","Number":"2055","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\ngit checkout master\r\ngit merge --no-ff merge/release/2.2-to-master\r\ngit push origin master\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.2-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2055","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2055)"},{"Id":"376978591","IsPullRequest":true,"CreatedAt":"2018-11-02T21:57:26","Actor":"javiercn","Number":"2054","RawContent":null,"Title":"Fixes integrity validation in Identity UI V3","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2054","RelatedDescription":"Closed or merged PR \"Fixes integrity validation in Identity UI V3\" (#2054)"},{"Id":"376977750","IsPullRequest":false,"CreatedAt":"2018-11-02T21:48:32","Actor":"javiercn","Number":"2053","RawContent":null,"Title":"Fix integrity tags on Identity UI V3","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/issues/2053","RelatedDescription":"Closed issue \"Fix integrity tags on Identity UI V3\" (#2053)"},{"Id":"376973581","IsPullRequest":true,"CreatedAt":"2018-11-02T21:48:08","Actor":"javiercn","Number":"2052","RawContent":null,"Title":"Fixes integrity validation hashes for Identity UI V3","State":"closed","Body":"Fixes https://github.com/aspnet/Identity/issues/2053","Url":"https://github.com/aspnet/Identity/pull/2052","RelatedDescription":"Closed or merged PR \"Fixes integrity validation hashes for Identity UI V3\" (#2052)"},{"Id":"376607709","IsPullRequest":false,"CreatedAt":"2018-11-01T23:29:51","Actor":"ycrumeyrolle","Number":"2051","RawContent":null,"Title":"[Question] Passwords should not be of type String ?","State":"closed","Body":"My security team escalated to me that the `PasswordHasher` is vulnerable to heap inspection, as the password is of type `String`. \r\nIt should be instead a byte array / span of bytes cleared at the end of the process, as it is done by any cryptographic operation in corefx. CC @bartonjs.\r\nSame problem with any password related types (`IPasswordValidator`, and maybe also the `IUserPasswordStore`)","Url":"https://github.com/aspnet/Identity/issues/2051","RelatedDescription":"Closed issue \"[Question] Passwords should not be of type String ?\" (#2051)"}],"ResultType":"GitHubIssue"},"Tooling-Issues":{"Issues":[{"Id":"597492854","IsPullRequest":true,"CreatedAt":"2020-04-09T19:44:41","Actor":"terrajobst","Number":"1097","RawContent":null,"Title":"Link Code of Conduct","State":"closed","Body":"See [this policy rule](https://github.com/dotnet/org-policy/blob/master/doc/PR15.md) for more details.","Url":"https://github.com/aspnet/Tooling/pull/1097","RelatedDescription":"Closed or merged PR \"Link Code of Conduct\" (#1097)"},{"Id":"585801568","IsPullRequest":false,"CreatedAt":"2020-03-22T20:10:12","Actor":"GaryFurash","Number":"1096","RawContent":null,"Title":"Creating Edit View with Non EFModel","State":"open","Body":"Using latest ASP.NET Core with latest Nuget on Visual Studio 2019 windows 10 pro.\r\n\r\nIf I try to create an Edit view based on a view model that isn't configured in the DB context (e.g., it's a model that doesn't map to a DB table in EF), even after adding the [Key] annotation I get the error:\r\n\r\n'The entity type 'RoleEdit' requires a primary key to be defined. If you intended to use a keyless entity type call 'HasNoKey()'.'\r\n\r\nI can't use HasNoKey since the model entity isn't in the context since it isn't a real table.\r\n","Url":"https://github.com/aspnet/Tooling/issues/1096","RelatedDescription":"Open issue \"Creating Edit View with Non EFModel\" (#1096)"},{"Id":"576654849","IsPullRequest":true,"CreatedAt":"2020-03-06T02:27:01","Actor":"mairaw","Number":"1095","RawContent":null,"Title":"Update link to a more proper target","State":"open","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1095","RelatedDescription":"Open PR \"Update link to a more proper target\" (#1095)"},{"Id":"499940912","IsPullRequest":false,"CreatedAt":"2019-09-28T16:33:15","Actor":"genifycom","Number":"1094","RawContent":null,"Title":"Add Razor Page using Entity Framework (CRUD)","State":"open","Body":"<!-- Describe what isn't working as expected -->\r\nWhen I right click on Pages and Add Razor page. I select Razor Pages using Entity Framework (CRUD). I select my Model class and my Data Context class and press Add.\r\n\r\nI expect to give the Razor page a name. But a Dialog pops up and says\r\n\r\nAdd Razor Page(s)\r\n\r\nThe following file(s) already exist:\r\n\r\nIndex\r\nIndex.cshtml.cs\r\n\r\nDo you want to replace them?\r\n---------------------------\r\nYes   No   \r\n---------------------------\r\n\r\nI do not expect that adding a Razor page will replace Index. I expect to create a NEW razor page with a new name. Saying No here does not allow one to continue.\r\n\r\n### Steps to reproduce\r\nAs above\r\n\r\nWe ❤ code! Include a complete code listing or attach a simplified project\r\n\r\nCreate a new ASP.NET Core Web Application. Use ASP.NET Core 3.0 and \"Web Application\".\r\nCreate a model class (Customer with int ID and string Name).\r\nAdd Razor Page using EF and CRUD.\r\nSelect Model class and add context class.\r\nClick Add\r\n\r\n### Further technical details\r\n\r\nEF Core version: 3.0\r\nDatabase provider: (e.g. Microsoft.EntityFrameworkCore.SqlServer)\r\nTarget framework: (e.g. .NET Core 3.0)\r\nOperating system: Windows 10\r\nIDE: (e.g. Visual Studio 2019 16.3) Visual Studio 2019 16.3.1\r\n","Url":"https://github.com/aspnet/Tooling/issues/1094","RelatedDescription":"Open issue \"Add Razor Page using Entity Framework (CRUD)\" (#1094)"},{"Id":"480473543","IsPullRequest":false,"CreatedAt":"2019-08-14T04:21:20","Actor":"AlseinX","Number":"1093","RawContent":null,"Title":"`dotnet new -i` does not work any more in preview8","State":"open","Body":"`dotnet new -i Microsoft.AspNetCore.Blazor.Templates::3.0.0-preview8.19405.7`\r\n\r\nResults:\r\n\r\n```\r\n用法: new [选项]\r\n\r\n选项:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --dry-run           Displays a summary of what would happen if the given command line were run if it would result in a template creation.\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n  --update-check      Check the currently installed template packs for updates.\r\n  --update-apply      Check the currently installed template packs for update, and install the updates.\r\n\r\n\r\nTemplates                                         Short Name               Language          Tags\r\n----------------------------------------------------------------------------------------------------------------------------------\r\nConsole Application                               console                  [C#], F#, VB      Common/Console\r\nClass library                                     classlib                 [C#], F#, VB      Common/Library\r\nWPF Application                                   wpf                      [C#], VB          Common/WPF\r\nWPF Class library                                 wpflib                   [C#], VB          Common/WPF\r\nWPF Custom Control Library                        wpfcustomcontrollib      [C#], VB          Common/WPF\r\nWPF User Control Library                          wpfusercontrollib        [C#], VB          Common/WPF\r\nWindows Forms (WinForms) Application              winforms                 [C#], VB          Common/WinForms\r\nWindows Forms (WinForms) Class library            winformslib              [C#], VB          Common/WinForms\r\nWorker Service                                    worker                   [C#]              Common/Worker/Web\r\nUnit Test Project                                 mstest                   [C#], F#, VB      Test/MSTest\r\nNUnit 3 Test Project                              nunit                    [C#], F#, VB      Test/NUnit\r\nNUnit 3 Test Item                                 nunit-test               [C#], F#, VB      Test/NUnit\r\nxUnit Test Project                                xunit                    [C#], F#, VB      Test/xUnit\r\nRazor Component                                   razorcomponent           [C#]              Web/ASP.NET\r\nRazor Page                                        page                     [C#]              Web/ASP.NET\r\nMVC ViewImports                                   viewimports              [C#]              Web/ASP.NET\r\nMVC ViewStart                                     viewstart                [C#]              Web/ASP.NET\r\nBlazor Server App                                 blazorserver             [C#]              Web/Blazor\r\nASP.NET Core Empty                                web                      [C#], F#          Web/Empty\r\nASP.NET Core Web App (Model-View-Controller)      mvc                      [C#], F#          Web/MVC\r\nASP.NET Core Web App                              webapp                   [C#]              Web/MVC/Razor Pages\r\nASP.NET Core with Angular                         angular                  [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js                        react                    [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js and Redux              reactredux               [C#]              Web/MVC/SPA\r\nRazor Class Library                               razorclasslib            [C#]              Web/Razor/Library/Razor Class Library\r\nASP.NET Core Web API                              webapi                   [C#], F#          Web/WebAPI\r\nASP.NET Core gRPC Service                         grpc                     [C#]              Web/gRPC\r\ndotnet gitignore file                             gitignore                                  Config\r\nglobal.json file                                  globaljson                                 Config\r\nNuGet Config                                      nugetconfig                                Config\r\nDotnet local tool manifest file                   tool-manifest                              Config\r\nWeb Config                                        webconfig                                  Config\r\nSolution File                                     sln                                        Solution\r\nProtocol Buffer File                              proto                                      Web/gRPC\r\n\r\nExamples:\r\n    dotnet new mvc --auth Individual\r\n    dotnet new wpfcustomcontrollib\r\n    dotnet new --help\r\n\r\n```\r\n\r\nRunning `dotnet new -i aaa::bbb` results the same.","Url":"https://github.com/aspnet/Tooling/issues/1093","RelatedDescription":"Open issue \"`dotnet new -i` does not work any more in preview8\" (#1093)"},{"Id":"477192366","IsPullRequest":true,"CreatedAt":"2019-08-06T06:25:26","Actor":"SuperChenSSS","Number":"1092","RawContent":null,"Title":"Point \"Set up DNS name for the VM\" link to the right direction","State":"open","Body":"The \"Set up DNS name for the VM\" link is incorrect and can't see the content. Change it to the right direction.","Url":"https://github.com/aspnet/Tooling/pull/1092","RelatedDescription":"Open PR \"Point \"Set up DNS name for the VM\" link to the right direction\" (#1092)"},{"Id":"477188104","IsPullRequest":true,"CreatedAt":"2019-08-06T06:24:35","Actor":"SuperChenSSS","Number":"1091","RawContent":null,"Title":"Point \"Set up DNS name for the VM\" link to the right direction","State":"closed","Body":"The \"Set up DNS name for the VM\" link is incorrect and can't see the content. Change it to the right direction.","Url":"https://github.com/aspnet/Tooling/pull/1091","RelatedDescription":"Closed or merged PR \"Point \"Set up DNS name for the VM\" link to the right direction\" (#1091)"},{"Id":"476745373","IsPullRequest":false,"CreatedAt":"2019-08-05T09:15:18","Actor":"juniormayhe","Number":"1090","RawContent":null,"Title":"Cannot start a webapi on specific SSL port managed by IISExpress","State":"open","Body":"A brand new netcore webapi 2.2 is created. \r\n\r\nCurrent launch settings:\r\n```\r\n{\r\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:62813\",\r\n      \"sslPort\": 44396\r\n    }\r\n  },\r\n```\r\n\r\nAfter setting the SSL port to anything such as 11000, application won't get started on IIS Express, but the same app runs correctly on port 11000 after being published to local IIS (https://localhost:11000).\r\n\r\nThe only way to start it on IIS Express is to keep 443 prefix (i.e. 44300, 44301, etc). \r\n\r\nIs this restriction by design as stated [here](https://developercommunity.visualstudio.com/content/problem/39430/changing-port-number-in-a-web-project-does-not-imm.html?childToView=43139#comment-43139)?\r\n\r\n\"You can change that value to whatever you want.\" definitely is not working as stated here: https://github.com/aspnet/Tooling/issues/286\r\n\r\n```\r\n- Visual Studio 2019 16.1.6\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-012264\r\n Commit:    be3f0c1a03\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27804-01\r\n  Commit:  fdf81c6faf\r\n\r\n.NET Core SDKs installed:\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800-preview-009696 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010219 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012264 [C:\\Program Files\\dotnet\\sdk]\r\n```","Url":"https://github.com/aspnet/Tooling/issues/1090","RelatedDescription":"Open issue \"Cannot start a webapi on specific SSL port managed by IISExpress\" (#1090)"},{"Id":"465641918","IsPullRequest":false,"CreatedAt":"2019-07-09T08:26:34","Actor":"plachor","Number":"1089","RawContent":null,"Title":"LaunchSettings are not respected by Test Runner","State":"open","Body":"In latest Visual Studio 2019, Test Runner ignores `environmentVariables` configuration which would allow for instance configuration of `ASPNETCORE_ENVIRONMENT`.\r\n\r\nThis would be beneficial for integration tests that in local environment use different appsettings (non-production).\r\n\r\nFor instance I would like to define following launchSettings.json:\r\n```json\r\n{\r\n  \"profiles\": {\r\n    \"SomeFancyNamespace.ProjectName.Integration.Tests\": {\r\n      \"commandName\": \"Project\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThere was an related issue that was closed: https://github.com/aspnet/Tooling/issues/456 ","Url":"https://github.com/aspnet/Tooling/issues/1089","RelatedDescription":"Open issue \"LaunchSettings are not respected by Test Runner\" (#1089)"},{"Id":"447378907","IsPullRequest":true,"CreatedAt":"2019-05-22T23:02:06","Actor":"Rick-Anderson","Number":"1088","RawContent":null,"Title":"Update dotnet-core-3.0-preview1.md","State":"open","Body":"MS Style guide violations and other clean up. Less is more.","Url":"https://github.com/aspnet/Tooling/pull/1088","RelatedDescription":"Open PR \"Update dotnet-core-3.0-preview1.md\" (#1088)"},{"Id":"433911513","IsPullRequest":true,"CreatedAt":"2019-04-16T17:57:10","Actor":"Rick-Anderson","Number":"1087","RawContent":null,"Title":"Update known-issues-vs2017.md","State":"open","Body":"Use Visual Studio Installer to install the missing Visual Studio component \".NET Core 1.0 - 1.1 developer tools for Web\" from the **Individual components** tab.","Url":"https://github.com/aspnet/Tooling/pull/1087","RelatedDescription":"Open PR \"Update known-issues-vs2017.md\" (#1087)"},{"Id":"430834286","IsPullRequest":false,"CreatedAt":"2019-04-09T17:36:29","Actor":"Ashishks1987","Number":"1086","RawContent":null,"Title":"System.Collections.Immutable dll being replace by Microsoft.Net.Compilers","State":"closed","Body":"I have referenced `system.collections.immutable.dll` from the nuget package and I also have the nuget package installed for `Microsoft.Net.Compilers`. Everything works fine in my local but when I push my code to bamboo, in the runtime I get `Could not load file or assembly 'System.Collections.Immutable, Version=1.2.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)`\r\n\r\nWhen I checked logs on bamboo when it generates the artifacts, I can see that initially it copied the correct dll here:\r\n\r\n`build    04-Apr-2019 03:20:33      Copying file from \"E:\\agt01\\ENS-EB580-JOB1\\Bin\\Packages\\System.Collections.Immutable.1.5.0\\lib\\netstandard1.0\\System.Collections.Immutable.dll\" to \"E:\\agt01\\ENS-EB580-JOB1\\Binaries\\Release\\\\temp\\Web\\_PublishedWebsites\\MyService\\bin\\System.Collections.Immutable.dll\"`.\r\n\r\nbut then at some point, it replaced this dll with this: `build    04-Apr-2019 03:20:33      Copying file from \"E:\\agt01\\ENS-EB580-JOB1\\Bin\\Packages\\Microsoft.Net.Compilers.1.0.0\\tools\\System.Collections.Immutable.dll\" to \"E:\\agt01\\ENS-EB580-JOB1\\Binaries\\Release\\\\temp\\Web\\_PublishedWebsites\\MyService\\bin\\System.Collections.Immutable.dll\".`\r\n\r\nHow can I make sure that bamboo does not replace this dll and just uses it from the nuget package installed?","Url":"https://github.com/aspnet/Tooling/issues/1086","RelatedDescription":"Closed issue \"System.Collections.Immutable dll being replace by Microsoft.Net.Compilers\" (#1086)"},{"Id":"422330835","IsPullRequest":false,"CreatedAt":"2019-03-18T17:00:12","Actor":"vikasNew","Number":"1085","RawContent":null,"Title":"web deploy on windows 10","State":"open","Body":"Hello,\r\n\r\ncan i publish my code by using web deploy to windows 10 machine.\r\n\r\ni have setup my testing windows 10 machine for deployment, which is in local area network.\r\n\r\nSo i want to publish my code to that remote machine by using web deploy. can i do that ?\r\n\r\ni have installed web deploy and also enabled web development remote service on windows 10 but i am not able to connect to remote machine using we deploy.\r\n\r\nThis returns me the following error every-time.\r\n\"ERROR_DESTINATION_NOT_REACHABLE\"\r\n\r\ninteresting thing is i also have windows 10 on my machine & i am able to use web deploy on my local machine but it's not working with remote windows 10 machine.\r\n\r\nis web deploy only meant for Windows servers not for other normal windows?\r\n\r\nThanks \r\n","Url":"https://github.com/aspnet/Tooling/issues/1085","RelatedDescription":"Open issue \"web deploy on windows 10\" (#1085)"},{"Id":"398036850","IsPullRequest":false,"CreatedAt":"2019-01-15T05:32:59","Actor":"chrgraefe","Number":"1084","RawContent":null,"Title":"Can't add area on ASP.NET Core MVC project","State":"closed","Body":"### Describe the bug\r\nA clear and concise description of what the bug is.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using this version of ASP.NET Core '3.0.100-preview-009812'\r\n2. New ASP.NET Core MVC project in VS2019 Preview\r\n3. Can't add area\r\n\r\n### Expected behavior\r\nA dialog to type area name\r\n","Url":"https://github.com/aspnet/Tooling/issues/1084","RelatedDescription":"Closed issue \"Can't add area on ASP.NET Core MVC project\" (#1084)"},{"Id":"391209971","IsPullRequest":false,"CreatedAt":"2018-12-14T18:00:59","Actor":"sai-manoj-kumar","Number":"1080","RawContent":null,"Title":"The template to create an ASP .NET VM is not working","State":"open","Body":"[The template given here](https://github.com/aspnet/Tooling/blob/AspNetVMs/docs/create-asp-net-vm-with-webdeploy.md#PowerShellScript) doesn't work. It gives the error SkuNotAvailable. Can someone please fix it?","Url":"https://github.com/aspnet/Tooling/issues/1080","RelatedDescription":"Open issue \"The template to create an ASP .NET VM is not working\" (#1080)"},{"Id":"385928083","IsPullRequest":false,"CreatedAt":"2018-12-07T20:30:45","Actor":"sinand","Number":"1079","RawContent":null,"Title":"auto build on browser request not working","State":"closed","Body":"I am using community edition 15.9.3 since  the previous update this feature is not working, everytime I have to build project.","Url":"https://github.com/aspnet/Tooling/issues/1079","RelatedDescription":"Closed issue \"auto build on browser request not working\" (#1079)"},{"Id":"383440110","IsPullRequest":false,"CreatedAt":"2018-11-26T19:03:29","Actor":"eriawan","Number":"1078","RawContent":null,"Title":"Feedback: ensure that .NET Core 1.0/1.1 tooling only supported in VS 2017 and won't be supported in VS 2019","State":"closed","Body":"Apologize if my feedback may sound controversial or may spark a debate.\r\n\r\nI need to be sure that the problem mentioned on this [page](https://github.com/aspnet/Tooling/blob/master/known-issues-vs2017.md#to-create-aspnet-core-10--11-projects-install-visual-studios-net-core-10---11-developer-tools-for-web-component) about .NET Core 1.0/1.1 tooling is installed when creating new ASP.NET Core 1.0/1.1 project should not happen or should not be supported in VS 2019.\r\n\r\nThese are my main concerns:\r\n\r\n1. VS 2019 is about to be released in around early 2019\r\n2. ASP.NET Core 1.0/1.1 is not going to be supported anymore, based on [this page](https://github.com/dotnet/core/blob/master/microsoft-support.md).\r\n3. Creating new ASP.NET Core 1.0/1.1 will always install the .NET Core 1.0/1.1 web tooling, and this is not necessary when previous reason has reached the unsupported period and it's quite near or might be the same time of VS 2019 release.\r\n4. Based on the problem mentioned above, VS 2017 has no \"built in\" tooling when creating new ASP.NET Core 1.0/1.1 project, but the external tooling may help. Therefore for those that still need to maintain ASP.NET Core 1.0/1.1 projects, we could use VS 2017 as long as the VS 2017 is still in support lifecycle or in mainstream support lifecycle.\r\n\r\nI welcome feedback 🙂 \r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1078","RelatedDescription":"Closed issue \"Feedback: ensure that .NET Core 1.0/1.1 tooling only supported in VS 2017 and won't be supported in VS 2019\" (#1078)"},{"Id":"349649932","IsPullRequest":true,"CreatedAt":"2018-08-10T20:38:21","Actor":"AndrewBrianHall","Number":"1077","RawContent":null,"Title":"Adding a .net core -> vs mapping table","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1077","RelatedDescription":"Closed or merged PR \"Adding a .net core -> vs mapping table\" (#1077)"},{"Id":"333613195","IsPullRequest":false,"CreatedAt":"2018-06-27T12:59:29","Actor":"Liero","Number":"1076","RawContent":null,"Title":"Unable to publish when using Microsoft.NET.Sdk.Razor","State":"closed","Body":"After I upgraded my solution from asp.net core 2.0 to 2.1, I'm not able to publish my web app from Visual Studio, although it can build.\r\n\r\nDuring the upgrade I've changed SDK in one of my class libraries to **Microsoft.NET.Sdk.Razor**, but now I'm getting a lot of errors and if project references were not recognized in this library when publishing.\r\n\r\n```\r\nConnecting to C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\publish\\...\r\nMyProject.Web -> C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\MyProject.Web.dll\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;RELEASE;NETCOREAPP;NETCOREAPP2_1 /errorendlocation /preferreduilang:en-US /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization.policy\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.Policy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.internal\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cryptography.Internal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.server.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.html.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Html.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.jsonpatch\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.JsonPatch.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.apiexplorer\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.dataannotations\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.json\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.viewfeatures\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.language\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Language.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.runtime\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.webutilities\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.WebUtilities.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.CodeAnalysis.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.dotnet.platformabstractions\\2.1.0\\lib\\netstandard1.3\\Microsoft.DotNet.PlatformAbstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Relational.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.SqlServer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Binder.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netcoreapp2.0\\Microsoft.Extensions.DependencyInjection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencymodel\\2.1.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.composite\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Composite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.filesystemglobbing\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileSystemGlobbing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.objectpool\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.ObjectPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Options.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.webencoders\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.WebEncoders.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.net.http.headers\\2.1.0\\lib\\netstandard2.0\\Microsoft.Net.Http.Headers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.VisualBasic.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.Win32.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.win32.registry\\4.5.0\\ref\\netstandard2.0\\Microsoft.Win32.Registry.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\mscorlib.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\netstandard.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json.bson\\1.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.Bson.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json\\11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\remotion.linq\\2.2.0\\lib\\netstandard1.0\\Remotion.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.AppContext.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Buffers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Concurrent.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Immutable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.NonGeneric.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Specialized.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Annotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.EventBasedAsync.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.TypeConverter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Console.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.Common.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.data.sqlclient\\4.5.0\\ref\\netcoreapp2.1\\System.Data.SqlClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Contracts.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Debug.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.DiagnosticSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.FileVersionInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Process.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.StackTrace.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TextWriterTraceListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tools.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TraceSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tracing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Dynamic.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Calendars.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.Brotli.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.ZipFile.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.DriveInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Watcher.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.IsolatedStorage.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.MemoryMappedFiles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Pipes.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.UnmanagedMemoryStream.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Expressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Queryable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.HttpListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Mail.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NameResolution.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NetworkInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Ping.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Requests.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.ServicePoint.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Sockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebHeaderCollection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.Client.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.Vectors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ObjectModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.DispatchProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.ILGeneration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.Lightweight.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.TypeExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Reader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.ResourceManager.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Writer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.CompilerServices.VisualC.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Handles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.RuntimeInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.WindowsRuntime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Loader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Formatters.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\ref\\netstandard2.0\\System.Security.AccessControl.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Claims.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Algorithms.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Csp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.X509Certificates.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.cryptography.xml\\4.5.0\\ref\\netstandard2.0\\System.Security.Cryptography.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.permissions\\4.5.0\\ref\\netstandard2.0\\System.Security.Permissions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Principal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.5.0\\ref\\netstandard2.0\\System.Security.Principal.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.SecureString.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceModel.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceProcess.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encodings.web\\4.5.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.RegularExpressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Overlapped.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Dataflow.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Thread.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.ThreadPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Timer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.Local.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ValueTuple.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.HttpUtility.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.ReaderWriter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlSerializer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\WindowsBase.dll\" /debug- /debug:portable /filealign:512 /optimize+ /out:obj\\Release\\netcoreapp2.1\\MyProject.Mail.dll /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:library /warnaserror- /utf8output /deterministic+ /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.CSharp.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.analyzers\\2.1.0\\analyzers\\dotnet\\cs\\Microsoft.EntityFrameworkCore.Analyzers.dll\" EmailDefaults.cs EmailOptions.cs MailSender.cs NotificationService.cs RazorViewToStringRenderer.cs \"C:\\Users\\daniel.turan\\AppData\\Local\\Temp\\.NETCoreApp,Version=v2.1.AssemblyAttributes.cs\" obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\\Release\\netcoreapp2.1\\\\Tem\tporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.RazorAssemblyInfo.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.AssemblyInfo.cs /warnaserror+:NU1605\r\nNotificationService.cs(15,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\nNotificationService.cs(16,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\n...\r\n```\r\n\r\nAlso, see https://stackoverflow.com/questions/50926116/publish-failed-when-using-microsoft-net-sdk-razor-if-reference-was-not-recognize for more details","Url":"https://github.com/aspnet/Tooling/issues/1076","RelatedDescription":"Closed issue \"Unable to publish when using Microsoft.NET.Sdk.Razor\" (#1076)"},{"Id":"329605262","IsPullRequest":false,"CreatedAt":"2018-06-05T20:05:23","Actor":"AngelosP","Number":"1075","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of dotnet-aspnet-codegenerator","State":"open","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","Url":"https://github.com/aspnet/Tooling/issues/1075","RelatedDescription":"Open issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of dotnet-aspnet-codegenerator\" (#1075)"},{"Id":"328747170","IsPullRequest":false,"CreatedAt":"2018-06-02T14:10:13","Actor":"AceHack","Number":"1074","RawContent":null,"Title":"Docker in launchSettings.json","State":"open","Body":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image.","Url":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Open issue \"Docker in launchSettings.json\" (#1074)"},{"Id":"328082529","IsPullRequest":true,"CreatedAt":"2018-06-01T17:41:04","Actor":"federicorinaldi","Number":"1073","RawContent":null,"Title":"Update dotnet-core-2.1.md","State":"closed","Body":"Visual Studio 2017 15.7 has been released now so this document is outdated","Url":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Closed or merged PR \"Update dotnet-core-2.1.md\" (#1073)"},{"Id":"323850872","IsPullRequest":false,"CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Number":"1072","RawContent":null,"Title":"can not upload file FTPS. ","State":"closed","Body":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072)"},{"Id":"317494886","IsPullRequest":false,"CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Number":"1071","RawContent":null,"Title":" Unable to start debugging","State":"open","Body":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Open issue \" Unable to start debugging\" (#1071)"},{"Id":"316585462","IsPullRequest":false,"CreatedAt":"2018-04-24T05:17:55","Actor":"rberger247","Number":"1070","RawContent":null,"Title":"Visual studio freezes when I run add-migration ","State":"closed","Body":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger.","Url":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070)"},{"Id":"308764422","IsPullRequest":false,"CreatedAt":"2018-03-27T05:23:09","Actor":"dvdobrovolskiy","Number":"1069","RawContent":null,"Title":"EntityFramework migrations not available to be applied during publish","State":"closed","Body":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc","Url":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069)"},{"Id":"304770827","IsPullRequest":false,"CreatedAt":"2018-03-14T05:33:19","Actor":"ghost","Number":"1068","RawContent":null,"Title":"Switch between Razor Page View and Code Behind","State":"closed","Body":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n","Url":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068)"},{"Id":"304312342","IsPullRequest":false,"CreatedAt":"2018-03-13T05:33:42","Actor":"RehanSaeed","Number":"1067","RawContent":null,"Title":"Support dotnet watch in launchSettings.json","State":"closed","Body":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine.","Url":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067)"},{"Id":"300865938","IsPullRequest":false,"CreatedAt":"2018-02-28T06:01:18","Actor":"rjamesnw","Number":"1066","RawContent":null,"Title":"Nesting bug","State":"closed","Body":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file.","Url":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066)"},{"Id":"290854647","IsPullRequest":false,"CreatedAt":"2018-01-24T01:14:53","Actor":"NeerajaRagesh","Number":"1065","RawContent":null,"Title":"Issue with Sales discount App - Odoo 9","State":"closed","Body":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n","Url":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"2180295666","IsPullRequest":false,"CreatedAt":"2024-03-11T21:34:47","Actor":"amcasey","Number":"512","RawContent":null,"Title":"[Breaking change]: DefaultKeyResolution.ShouldGenerateNewKey has a slightly altered meaning","State":"open","Body":"### Description\r\n\r\n`DefaultKeyResolution.ShouldGenerateNewKey` no longer reflects whether the default key is close to its expiration time.\r\n\r\n### Version\r\n\r\n.NET 9 Preview 3\r\n\r\n### Previous behavior\r\n\r\nIt was an undocumented, but consistent, feature of the API that `ShouldGenerateNewKey` would be true if the default key was within two days (an over-simplification) of its expiration time.  The amount of lead time was based on the polling interval of `ICacheableKeyRingProvider`, which was not something `IDefaultKeyResolver.ResolveDefaultKeyPolicy` should have depended upon (since, for example, alternative implementations would probably not be aware of these details).\r\n\r\n### New behavior\r\n\r\nIf `ShouldGenerateNewKey` is true, it now indicates that either there is no default key or that for some other policy reason (i.e. in a specialized implementation of `IDefaultKeyResolver`, a new key should be generated.  The `ICacheableKeyRingProvider` will make its own decision about whether the expiration time is close enough to warrant generating a new key.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nFirst, we wanted to change the logic around key generation near expiration time and, second, this makes it more straightforward to implement a custom `IDefaultKeyResolver`.\r\n\r\nNote that the documentation for this type already states that \"This API supports infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases.\"\r\n\r\n### Recommended action\r\n\r\nIf you have an `IDefaultKeyResolver` implementation that tries to replicate the expiry logic, that logic can be removed (however, leaving it is fine as well).\r\n\r\nIf you were consuming `IDefaultKeyResolver` directly, for the express purpose of determining whether expiration was pending and that continues to be important, you can the default key's `ExpirationDate` property directly.\r\n\r\n### Affected APIs\r\n\r\nMicrosoft.AspNetCore.DataProtection.KeyManagement.Internal.DefaultKeyResolution.ShouldGenerateNewKey","Url":"https://github.com/aspnet/Announcements/issues/512","RelatedDescription":"Open issue \"[Breaking change]: DefaultKeyResolution.ShouldGenerateNewKey has a slightly altered meaning\" (#512)"},{"Id":"2162366750","IsPullRequest":true,"CreatedAt":"2024-03-01T17:37:10","Actor":"amcasey","Number":"511","RawContent":null,"Title":"Update repo URL","State":"closed","Body":"We have appropriate redirects, but it seems preferable to have current URLs in the guidance.","Url":"https://github.com/aspnet/Announcements/pull/511","RelatedDescription":"Closed or merged PR \"Update repo URL\" (#511)"},{"Id":"2115619834","IsPullRequest":true,"CreatedAt":"2024-02-06T22:14:36","Actor":"dotnet-policy-service[bot]","Number":"510","RawContent":null,"Title":"FabricBot: Onboarding to GitOps.ResourceManagement because of FabricBot decommissioning","State":"closed","Body":"Add prIssueManagement.yml to onboard repo to GitOps.ResourceManagement as FabricBot replacement\n\n Details on the replacement service and the syntax of the new yaml configuration file is available publicly at: https://microsoft.github.io/GitOps/policies/resource-management.html\n\nPlease review and merge this PR to complete the process of onboarding to the new service.","Url":"https://github.com/aspnet/Announcements/pull/510","RelatedDescription":"Closed or merged PR \"FabricBot: Onboarding to GitOps.ResourceManagement because of FabricBot decommissioning\" (#510)"},{"Id":"2013176077","IsPullRequest":false,"CreatedAt":"2023-11-27T21:55:39","Actor":"captainsafia","Number":"509","RawContent":null,"Title":"[Breaking change]: Minimal APIs consuming IFormFile or IFormFileCollection parameters require anti-forgery checks","State":"open","Body":"### Description\n\nMinimal API endpoints that consume an `IFormFile` or `IFormFileCollection` will now be opted-in to requiring anti-forgery token validation using the new anti-forgery middleware.\n\n### Version\n\n.NET 8 RC 1\n\n### Previous behavior\n\nMinimal API endpoints that bound a parameter from the form via `IFormFile` or `IFormFileCollection` did not require anti-forgery validation.\n\n### New behavior\n\nMinimal API endpoints that bound a parameter from the form via `IFormFile` or `IFormFileCollection` did require anti-forgery validation. An exception will be thrown at startup if the anti-forgery middleware is not registered for an API that defines these input types.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nAnti-forgery token validation is a recommended security precaution for APIs that consume data from a form.\n\n### Recommended action\n\nUsers can opt out of anti-forgery validation for specific endpoints by using the `DisableAntiforgery` method like so:\r\n\r\n```csharp\r\nvar app = WebApplication.Create();\r\n\r\napp.MapPost(\"/\", (IFormFile formFile) => ...)\r\n  .DisableAntiforgery();\r\n\r\napp.Run();\r\n```\n\n### Affected APIs\n\nNone.","Url":"https://github.com/aspnet/Announcements/issues/509","RelatedDescription":"Open issue \"[Breaking change]: Minimal APIs consuming IFormFile or IFormFileCollection parameters require anti-forgery checks\" (#509)"},{"Id":"1811082947","IsPullRequest":false,"CreatedAt":"2023-07-19T03:36:42","Actor":"jmprieur","Number":"508","RawContent":null,"Title":"[Breaking change]: JwtBearer, WsFederation, and OpenIdConnect events context properties of type SecurityToken now return a JSonWebToken by default","State":"open","Body":"## Description\r\nThe `JwtBearerEvents`, `WsFederationEvents` and `OpenIdConnectEvents` are authentication events fired respectively by the `JwtBearer`, `WsFederation` and `OpenIdConnect` authentication handlers. For example the [OnTokenValidated](https://github.com/dotnet/aspnetcore/blob/bf303a1092f83d789031fdafac60f3fc454cfc49/src/Security/Authentication/JwtBearer/src/JwtBearerEvents.cs#L29) event is fired when a security token is validated. These events are fired with a context (for instance [TokenValidatedContext](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.jwtbearer.tokenvalidatedcontext?view=aspnetcore-7.0)) that exposes a `SecurityToken` property of abstract type [SecurityToken](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.securitytoken?view=msal-web-dotnet-latest). The default real implementation of SecurityToken changed from [JwtSecurityToken](https://learn.microsoft.com/dotnet/api/system.identitymodel.tokens.jwt.jwtsecuritytoken?view=msal-web-dotnet-latest) to [JsonWebToken](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.jsonwebtokens.jsonwebtoken?view=msal-web-dotnet-latest).\r\nIf you really need to keep using `JwtSecurityToken`, you can re-enable it by setting `UseSecurityTokenValidators` on the `JwtBearerOptions`, `WsFederationOptions`, `OpenIdConnectOptions`.\r\n\r\nFor details [#aspnetcore/49469](https://github.com/dotnet/aspnetcore/issues/49469#issue) API Review.\r\n\r\n### Version\r\n.NET 8 Preview 7\r\n\r\n### Previous behavior\r\nUntil ASP.NET Core 8-preview 7, these SecurityToken properties were implemented by a sub-class of SecurityToken named JwtSecurityToken, which is the previous generation of implementation of JWT. These JwtSecurityToken were produced by [SecurityTokenValidators](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.isecuritytokenvalidator?view=msal-web-dotnet-latest).\r\n\r\n### New behavior\r\nFrom ASP.NET Core 8-preview 7, by default the class derived from SecurityToken implenting these properties is JSonWebToken which are produced by more optimized [TokenHandlers](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.tokenhandler?view=msal-web-dotnet-latest).\r\n\r\n## Type of breaking change\r\n- [ ] Binary incompatible: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] Source incompatible: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [x] Behavioral change: Existing binaries may behave differently at run time.\r\n\r\n## Reason for change\r\nThis change was made because JSonWebToken (and its associated JSonWebTokenHandler) are bringing:\r\n- 30% performance improvement.\r\n- Improved reliability by the usage of a Last Known Good metadata (such as the OpenIdConnectMetadata)\r\n- async processing\r\n\r\n### Recommended action\r\nFor most of you, this shouldn't be a problem as the type of the properties (SecurityToken) has not changed, and you were not supposed to look at the real type.\r\n\r\nHowever, if you were downcasting one of these SecurityToken properties to JwtSecurityToken (for example to get the claims), you will now need to:\r\n- either down-cast them to JSonWebToken\r\n\r\n  ```CSharp\r\n  service.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme,  options => {\r\n      options.Events.TokenValidated = (context) => {\r\n          // Replace your cast to JwtSecurityToken.\r\n          JSonWebToken token = context.SecurityToken as JSonWebToken;\r\n          // Do something ...\r\n      };\r\n  });\r\n  ```\r\n\r\n- or set one of the UseSecurityTokenValidators boolean properties on the corresponding options (JtwBearerOptions, WsFederationOptions, OpenIdConnectOptions) to true, in which case the authentication handlers will keep using the JwtTokenValidators and will keep producing JwtSecurityTokens.\r\n\r\n  ```CSharp\r\n  service.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme,  options => {\r\n      options.UseSecurityTokenValidators = true;\r\n      options.Events.TokenValidated = (context) => {\r\n          // As you were doing before\r\n          JwtSecurityToken token = context.SecurityToken as JwtSecurityToken;\r\n          // Do something ...\r\n      };\r\n  });\r\n  ```\r\n\r\n\r\n\r\n## Affected APIs\r\nThe properties that are concerned are the following:\r\n\r\n### In WsFederationEvents\r\n\r\n- [SecurityTokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/WsFederation/src/SecurityTokenValidatedContext.cs#L31)\r\n\r\n### In JwtBearerEvents\r\n\r\n- [TokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/JwtBearer/src/TokenValidatedContext.cs#L27)\r\n\r\n### In OpenIdConnectEvents\r\n\r\n- [TokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/OpenIdConnect/src/Events/TokenValidatedContext.cs#L32)\r\n- [AuthorizationCodeReceivedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/OpenIdConnect/src/Events/AuthorizationCodeReceivedContext.cs#L34)","Url":"https://github.com/aspnet/Announcements/issues/508","RelatedDescription":"Open issue \"[Breaking change]: JwtBearer, WsFederation, and OpenIdConnect events context properties of type SecurityToken now return a JSonWebToken by default\" (#508)"},{"Id":"1805550224","IsPullRequest":false,"CreatedAt":"2023-07-14T20:44:25","Actor":"captainsafia","Number":"507","RawContent":null,"Title":"[Breaking change]: TrimMode defaults to `full` for WebSDK projects","State":"open","Body":"### Description\n\nTrimming now trims all assemblies in applications targeting the Web SDK, by default. This change only affects apps that are published with PublishTrimmed=true, and it only breaks apps that had existing trim warnings. \n\n### Version\n\n.NET 8 Preview 7\n\n### Previous behavior\n\nPreviously, `TrimMode=partial` was set by default for all projects that targeted the WebSDK. \n\n### New behavior\n\nStarting in .NET 8 Preview 7, trimming trims all the assemblies in the app by default. Apps that may have previously worked with `PublishTrimmed=true` and `TrimMode=partial` may not work in .NET 8 Preview 7. However, only apps with trim warnings will be affected. If your app has no trim warnings, the change in behavior should not cause any adverse effect.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThis change helps to decrease app size without users having to explicitly opt in and aligns with user expectations that the entire app is trimmed unless noted otherwise.\n\n### Recommended action\n\nThe best resolution is to resolve all the trim warnings in your application. For information about resolving the warnings in your own libraries, see [Introduction to trim warnings](https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/fixing-warnings).\r\n\r\nTo revert to the previous behavior, set the TrimMode property to partial.\r\n\r\n```xml\r\n<TrimMode>partial</TrimMode>\r\n```\n\n### Affected APIs\n\nNone.","Url":"https://github.com/aspnet/Announcements/issues/507","RelatedDescription":"Open issue \"[Breaking change]: TrimMode defaults to `full` for WebSDK projects\" (#507)"},{"Id":"1693295179","IsPullRequest":false,"CreatedAt":"2023-05-03T01:44:40","Actor":"JamesNK","Number":"506","RawContent":null,"Title":"[Breaking change]: ASP.NET Core rate limiting middleware now requires AddRateLimiter","State":"open","Body":"### Description\r\n\r\n[ASP.NET Core rate limiting middleware](https://learn.microsoft.com/aspnet/core/performance/rate-limit) is being updated in .NET 8 with extra functionality. The middleware now requires services registered with `AddRateLimiter`.\r\n\r\n### Version\r\n\r\n.NET 8 Preview 5\r\n\r\n### Previous behavior\r\n\r\nPreviously, rate limiting could be used without `AddRateLimiter`. For example, the middleware could be configured by calling `Configure<RateLimiterOptions>(o => { })`:\r\n\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.Configure<RateLimiterOptions>(o => o\r\n    .AddFixedWindowLimiter(policyName: \"fixed\", options =>\r\n    {\r\n        // configuration\r\n    }));\r\n\r\nvar app = builder.Build();\r\napp.UseRateLimiter();\r\napp.MapGet(\"/\", () => Results.Ok($\"Hello world\")).RequireRateLimiting(\"fixed\");\r\napp.Run();\r\n```\r\n\r\n### New behavior\r\n\r\nIf `AddRateLimiter` is not called on app startup, then ASP.NET Core will throw an informative error:\r\n\r\n> Unable to find the required services. Please add all the required services by calling 'IServiceCollection.AddRateLimiter' in the application startup code.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nRate limiting middleware requires services that are only registered by calling `AddRateLimiter`.\r\n\r\n### Recommended action\r\n\r\nEnsure `AddRateLimiter()` is called at application startup.\r\n\r\nFor example, update `Configure<RateLimiterOptions>(o => { })` to use `AddRateLimiter()`:\r\n\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddRateLimiter(o => o\r\n    .AddFixedWindowLimiter(policyName: \"fixed\", options =>\r\n    {\r\n        // configuration\r\n    }));\r\n\r\nvar app = builder.Build();\r\napp.UseRateLimiter();\r\napp.MapGet(\"/\", () => Results.Ok($\"Hello world\")).RequireRateLimiting(\"fixed\");\r\napp.Run();\r\n```\r\n\r\n### Affected APIs\r\n\r\n[UseRateLimiter()](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.builder.ratelimiterapplicationbuilderextensions.useratelimiter)","Url":"https://github.com/aspnet/Announcements/issues/506","RelatedDescription":"Open issue \"[Breaking change]: ASP.NET Core rate limiting middleware now requires AddRateLimiter\" (#506)"},{"Id":"1685250868","IsPullRequest":false,"CreatedAt":"2023-04-26T15:26:43","Actor":"Tratcher","Number":"505","RawContent":null,"Title":"[Breaking change]: ISystemClock obsolete and replaced by TimeProvider","State":"open","Body":"### Description\n\n`Microsoft.AspNetCore.Authentication.ISystemClock` has been used by the authentication and identity components since AspNetCore 1.0 to enable unit testing of time related functionality like expiration checking. .NET 8 now includes a suitable abstraction `System.TimeProvider` that provides the same functionality and much more. We're taking this opportunity to obsolete `ISystemClock` and replace it with `TimeProvider` throughout AspNetCore.\r\n\r\nSee https://github.com/dotnet/aspnetcore/pull/47717 for additional details.\n\n### Version\n\n.NET 8 Preview 5\n\n### Previous behavior\n\nISystemClock was injected into the constructors by Dependency Injection and could be overridden for testing.\r\n\r\nNote the default `SystemClock` implementation would truncate to the nearest second for easier formatting. \n\n### New behavior\n\nISystemClock remains in the Dependency Injection container but is no longer used. It may be removed from the container in a future version.\r\n\r\nTimeProvider is now a settable property on the Options classes for these types. It can be set directly or by registering a provider in the Dependency Injection container.\r\n\r\n`TimeProvider` does not truncate to the nearest second, consumers are expected to correctly format the time as needed.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nUnifying the time abstraction across the stack for easier testing.\n\n### Recommended action\n\nComponents that derive from `Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>` or `Microsoft.AspNetCore.Identity.SecurityStampValidator<TUser>` should remove their `ISystemClock` constructor parameter and call the new base constructor accordingly. Similarly, derived implementations that reference the `Clock` property on these types should reference the new `TimeProvider` property instead. `TimeProvider` is now settable for testing on the options or via DI.\r\n\r\n```diff\r\n-    public BasicAuthenticationHandler(IOptionsMonitor<AuthenticationSchemeOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock)\r\n-        : base(options, logger, encoder, clock)\r\n+    public BasicAuthenticationHandler(IOptionsMonitor<AuthenticationSchemeOptions> options, ILoggerFactory logger, UrlEncoder encoder)\r\n+        : base(options, logger, encoder)\r\n```\r\n\r\n```diff\r\n-       var currentUtc = Clock.UtcNow;\r\n+       var currentUtc = TimeProvider.GetUtcNow();\r\n```\n\n### Affected APIs\n\n- [`ISystemClock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.isystemclock)\r\n- [`SystemClock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.systemclock)\r\n- [`AuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.authenticationhandler-1)\r\n- [`AuthenticationHandler<TOptions>.Clock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.authenticationhandler-1.clock)\r\n- [`CookieAuthenticationHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.cookies.cookieauthenticationhandler)\r\n- [`FacebookHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.facebook.facebookhandler)\r\n- [`GoogleHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.google.googlehandler)\r\n- [`JwtBearerHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.jwtbearer.jwtbearerhandler)\r\n- [`MicrosoftAccountHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.microsoftaccount.microsoftaccounthandler)\r\n- [`NegotiateHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.negotiate.negotiatehandler)\r\n- [`OAuthHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.oauth.oauthhandler-1)\r\n- [`OpenIdConnectHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.openidconnect.openidconnecthandler)\r\n- [`PolicySchemeHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.policyschemehandler)\r\n- [`RemoteAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.remoteauthenticationhandler-1)\r\n- [`SignInAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.signinauthenticationhandler-1)\r\n- [`SignOutAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.signoutauthenticationhandler-1)\r\n- [`TwitterHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.twitter.twitterhandler)\r\n- [`WsFederationHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.wsfederation.wsfederationhandler)\r\n- [`SecurityStampValidator<TUser>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.identity.securitystampvalidator-1)\r\n- [`TwoFactorSecurityStampValidator<TUser>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.identity.twofactorsecuritystampvalidator-1)","Url":"https://github.com/aspnet/Announcements/issues/505","RelatedDescription":"Open issue \"[Breaking change]: ISystemClock obsolete and replaced by TimeProvider\" (#505)"},{"Id":"1661290568","IsPullRequest":false,"CreatedAt":"2023-04-10T20:06:20","Actor":"captainsafia","Number":"504","RawContent":null,"Title":"[Breaking change]: `ValidationProblemDetails` and `ProblemDetails` no longer use custom converters","State":"open","Body":"### Description\n\nPrior to .NET 8 Preview 2, `ValidationProblemDetails` and `ProblemDetails` type used custom converters to support JSON serialization due to a lack of support for the `IgnoreNullValues` option. Now that this option is supported by the S.T.J APIs, we've removed the custom converters in the framework in favor of the serialization provided by the framework.\r\n\r\nAs a result of this, the properties in the `ValidationProblemDetails` and `ProblemDetails` types no longer indiscriminately assume lowercase type names. Developers must specific a `JsonNamingPolicy` to get the correct behavior.\n\n### Version\n\n.NET 8 Preview 2\n\n### Previous behavior\n\n```csharp\r\nstring content = \"{\\\"status\\\":400,\\\"detail\\\":\\\"HTTP egress is not enabled.\\\"}\";\r\nusing MemoryStream stream = new();\r\nusing StreamWriter writer = new(stream);\r\nwriter.Write(content);\r\nwriter.Flush();\r\nstream.Position = 0;\r\n\r\nJsonSerializerOptions options = new();\r\noptions.Converters.Add(new JsonStringEnumConverter());\r\n\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\nConsole.WriteLine(details.Status); // 400\r\n```\n\n### New behavior\n\n```csharp\r\nstring content = \"{\\\"status\\\":400,\\\"detail\\\":\\\"HTTP egress is not enabled.\\\"}\";\r\nusing MemoryStream stream = new();\r\nusing StreamWriter writer = new(stream);\r\nwriter.Write(content);\r\nwriter.Flush();\r\nstream.Position = 0;\r\n\r\nJsonSerializerOptions options = new();\r\noptions.Converters.Add(new JsonStringEnumConverter());\r\n\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\nConsole.WriteLine(details.Status); // null\r\n```\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nNow that `IgnoreNullValues` is supported by the S.T.J APIs, we've removed the custom converters in the framework in favor of the serialization provided by the framework.\n\n### Recommended action\n\nProvide a JSON serializer options with the correct details.\r\n\r\n```csharp\r\nJsonSerializerOptions options = new()\r\n{\r\n   PropertyNameCaseInsensitive = true\r\n};\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\n```\n\n### Affected APIs\n\n- [`ValidationProblemDetails`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.validationproblemdetails)\r\n- [`ProblemDetails`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.problemdetails)","Url":"https://github.com/aspnet/Announcements/issues/504","RelatedDescription":"Open issue \"[Breaking change]: `ValidationProblemDetails` and `ProblemDetails` no longer use custom converters\" (#504)"},{"Id":"1657753067","IsPullRequest":true,"CreatedAt":"2023-04-06T22:49:51","Actor":"gewarren","Number":"503","RawContent":null,"Title":"Add more version choices to BC template","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/503","RelatedDescription":"Closed or merged PR \"Add more version choices to BC template\" (#503)"},{"Id":"1656483670","IsPullRequest":false,"CreatedAt":"2023-04-06T00:15:27","Actor":"mitchdenny","Number":"502","RawContent":null,"Title":"[Breaking change]: Obsolete ConcurrencyLimiterMiddleware","State":"open","Body":"### Description\r\n\r\nIn .NET 8.0 the ASP.NET Core team is deprecating the ConcurrencyLimiterMiddleware and associated methods and types (e.g. UseConcurrencyLimiter(...)). This package will be removed in .NET 9.0.\r\n\r\nDevelopers requiring rate limiting capabilties should switch to the newer and more capable rate limiting middleware that was introduced in .NET 7.0 (e.g. UseRateLimiter(...)). The .NET 7.0 rate limiting API includes a concurrency limiter along with several other rate limiting algorithms that you can apply to your application.\r\n\r\nFor more information on rate limiting in ASP.NET Core see:\r\nhttps://learn.microsoft.com/aspnet/core/performance/rate-limit\r\n\r\n### Version\r\n\r\n.NET 8 Preview 4\r\n\r\n### Previous behavior\r\n\r\nDevelopers using the `ConcurrencyLimiterMiddleware` could control concurrency by adding a policy to DI and enabling the middleware:\r\n\r\n```csharp\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddStackPolicy<options => {\r\n    options.MaxConcurrentRequests = 2;\r\n    options.RequestQueueLimit = 25;\r\n    });\r\n\r\nvar app = builder.Build();\r\napp.UseConcurrencyLimiter();\r\n// Map endpoints.\r\napp.Run();\r\n```\r\n\r\n### New behavior\r\n\r\nHere is some example usage using the new API:\r\n\r\n```csharp\r\nusing Microsoft.AspNetCore.RateLimiting;\r\nusing System.Threading.RateLimiting;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\n\r\napp.UseRateLimiter(new RateLimiterOptions()\r\n    .AddConcurrencyLimiter(\"only-one-at-a-time-stacked\", (options) =>\r\n    {\r\n        options.PermitLimit = 2;\r\n        options.QueueLimit = 25;\r\n        options.QueueProcessingOrder = QueueProcessingOrder.NewestFirst;\r\n    }));\r\n\r\napp.MapGet(\"/\", async () =>\r\n{\r\n    await Task.Delay(10000);\r\n    return \"Hello World\";\r\n}).RequireRateLimiting(\"only-one-at-a-time-stacked\");\r\n\r\napp.Run();\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nThe older `ConcurrencyLimiterMiddleware` is infrequently used and undocumented. The newer rate limiting API has more extensive functionality.\r\n\r\n### Recommended action\r\n\r\nIf you are using the older `ConcurrencyLimiterMiddleware` we recommend moving to the newer rate limiting middleware.\r\n\r\n### Affected APIs\r\n\r\nThe following APIs are impacted:\r\n\r\n* `ConcurrencyLimiterExtensions.UseConcurrencyLimiter(...)`\r\n* `ConcurrencyLimiterMiddleware`\r\n* `ConcurrencyLimiterOptions`","Url":"https://github.com/aspnet/Announcements/issues/502","RelatedDescription":"Open issue \"[Breaking change]: Obsolete ConcurrencyLimiterMiddleware\" (#502)"},{"Id":"1602073485","IsPullRequest":false,"CreatedAt":"2023-03-07T16:47:58","Actor":"dnfadmin","Number":"501","RawContent":null,"Title":"Moving to the new .NET Foundation CLA service","State":"closed","Body":"\r\nHello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team\r\n\r\n","Url":"https://github.com/aspnet/Announcements/issues/501","RelatedDescription":"Closed issue \"Moving to the new .NET Foundation CLA service\" (#501)"},{"Id":"1575203037","IsPullRequest":true,"CreatedAt":"2023-02-08T00:08:59","Actor":"brunolins16","Number":"500","RawContent":null,"Title":"Fixing announcement template","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/500","RelatedDescription":"Closed or merged PR \"Fixing announcement template\" (#500)"},{"Id":"1375214843","IsPullRequest":false,"CreatedAt":"2023-02-03T03:50:56","Actor":"halter73","Number":"493","RawContent":null,"Title":"[Breaking change]: ApiExplorer and OpenAPI metadata is generated for RequestDelegate endpoints in RC1 *only*","State":"closed","Body":"### Description\r\n\r\nIn .NET 6, ASP.NET Core added support for `Delegate` [route handlers](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0#route-handlers) in addition to conventional `RequestDelegate` endpoints which have existed since ASP.NET Core 3.0.\r\n\r\nIn .NET 7 RC 1, we started automatically generating more API metadata for the older `RequestDelegate` endpoints to align the behavior of these two kinds of endpoints. **In .NET 7 RC 2, we plan to revert this breaking change** which will cause no API metadata to inferred for `RequestDelegate` endpoints again.\r\n\r\n### Version\r\n\r\n.NET 7 RC1\r\n\r\n### Previous behavior\r\n\r\nBefore .NET 7 RC1, conventional `RequestDelegate` endpoints did not get added to the [ApiExplorer](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.apiexplorer?view=aspnetcore-6.0) model or the `OpenApiOperation` generated by [WithOpenApi()](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.openapiendpointconventionbuilderextensions.withopenapi?view=aspnetcore-7.0).\r\n\r\n### New behavior\r\n\r\nIn .NET RC 1 and RC 1 only **(this is being reverted in RC 2)**, the `RequestDelegate`'s `MethodInfo` is added to the [EndpointMetadataCollection](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.endpointmetadatacollection?view=aspnetcore-6.0) just like with `Delegate` route handlers causing ApiExplorer and WithOpenApi() to generate endpoint metadata for endpoints that previously were not part of the model.\r\n\r\nThis can impact third party libraries like [Swashbuckle](https://github.com/domaindrivendev/Swashbuckle.AspNetCore) and [NSwag](https://github.com/RicoSuter/NSwag).\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/44005 for more context. \r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nWe were [hoping ](https://github.com/dotnet/aspnetcore/pull/42827/files/cbff9e89b459111ea104ec71c2d3bf9cee6c9e5f#r925142793) that aligning the behavior of `RequestDelegate` and `Delegate` backed endpoints would reduce confusion. We've decided to walk this back though.\r\n\r\n### Recommended action\r\n\r\nYou can add a custom convention that removes the `MethodInfo` from the endpoint metadata or wait for RC 2 to revert this behavior. You can use a group to make it apply to multiple endpoints.\r\n\r\n```csharp\r\nvar noMetadataGroup = app.MapGroup(\"\");\r\nIEndpointConventionBuilder groupConventionBuilder = noMetadataGroup;\r\n\r\ngroupConventionBuilder.Add(endpointBuilder =>\r\n{\r\n    if (endpointBuilder.Metadata.FirstOrDefault(m => m is MethodInfo) is MethodInfo method)\r\n    {\r\n        endpointBuilder.Metadata.Remove(method);\r\n    }\r\n});\r\n\r\nnoMetadataGroup.MapGet(\"/\", (context) => context.Response.WriteAsync(\"RequestDelegate endpoint.\"));\r\n```\r\n\r\n### Affected APIs\r\n\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(IEndpointRouteBuilder, RoutePattern, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapGet(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPost(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapDelete(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPut(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapMethods(IEndpointRouteBuilder, String, IEnumerable<String>, RequestDelegate)`","Url":"https://github.com/aspnet/Announcements/issues/493","RelatedDescription":"Closed issue \"[Breaking change]: ApiExplorer and OpenAPI metadata is generated for RequestDelegate endpoints in RC1 *only*\" (#493)"},{"Id":"1497212375","IsPullRequest":true,"CreatedAt":"2022-12-14T19:04:06","Actor":"gewarren","Number":"499","RawContent":null,"Title":"Update incompatibility types in BC template","State":"closed","Body":"I updated the breaking change template to match dotnet/docs. Feel free to close if you don't like these definitions, however.","Url":"https://github.com/aspnet/Announcements/pull/499","RelatedDescription":"Closed or merged PR \"Update incompatibility types in BC template\" (#499)"},{"Id":"1455922247","IsPullRequest":false,"CreatedAt":"2022-11-18T22:38:34","Actor":"halter73","Number":"498","RawContent":null,"Title":"[Breaking change]: `WebApplicationBuilder` gives `ASPNET_`-prefixed environment variables lower precedence","State":"open","Body":"### Description\n\nStarting in .NET 7 preview 3, when using `WebApplicationBuilder` but not any other host (e.g. `ConfigureWebHostDefaults` or `WebHost.CreateDefaultBuilder`), command-line arguments and `DOTNET_`-prefixed environment variables override `ASPNET_`-prefixed environment variables when reading from [default host configuration sources](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#default-host-configuration-sources) which are used to read [host variables](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#host-variables) like the content root path and environment name when the `WebApplicationBuilder` is constructed and serves as a base for [application configuration](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#application-configuration-providers).\r\n\r\n`ASPNET_`-prefixed environment variables now has the lowest precedence of all of `WebApplicationBuilder`'s [default host configuration sources](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#default-host-configuration-sources).\r\n\r\nSee https://github.com/dotnet/AspNetCore.Docs/issues/25626#issuecomment-1098616664 for more context.\n\n### Version\n\n.NET 7 Preview 3\n\n### Previous behavior\n\n`ASPNET_`-prefixed environment variables overrode command-line arguments and `DOTNET_`-prefixed environment variables.\n\n### New behavior\n\nCommand-line arguments and `DOTNET_`-prefixed environment variables override `ASPNET_`-prefixed environment variables\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nTo prevent environment variables from overriding explicit command-line arguments when reading host variables which is more consistent with application configuration which has always given command-line arguments the highest precedence.\n\n### Recommended action\n\nIf you were using `ASPNETCORE_`-prefixed environment variables to override command-line arguments or `DOTNET_-`prefixed environment variables, use something with a higher priority. This could mean using custom [WebApplicationOptions](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationoptions?view=aspnetcore-7.0) which overrides all default hosting configuration sources.\n\n### Affected APIs\n\n`Microsoft.AspNetCore.Builder.WebApplicationBuilder`","Url":"https://github.com/aspnet/Announcements/issues/498","RelatedDescription":"Open issue \"[Breaking change]: `WebApplicationBuilder` gives `ASPNET_`-prefixed environment variables lower precedence\" (#498)"},{"Id":"1414759756","IsPullRequest":false,"CreatedAt":"2022-10-19T11:01:00","Actor":"javiercn","Number":"497","RawContent":null,"Title":"[Breaking change]: Updates to Authentication in webassembly applications","State":"open","Body":"### Description\n\nWe updated our support for authentication in Blazor Webassembly applications to rely on the history state instead of query strings in the URL. As a result of that, existing applications passing the return URL through the query string will fail to redirect back to the original page after a successful login.\r\n\r\nExisting applications should use the new `NavigateToLogin` extension method as it is able to flow the data to the login page corectly.\n\n### Version\n\n.NET 7 RC 1\n\n### Previous behavior\n\nThe return URL would be specified in the query string as `?returnUrl=<<return-url>>`.\n\n### New behavior\n\nThe return URL along other parameters passed to the `authentication/login` page are passed via the `history.state` entry of the page.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nWe decided to switch to using `history.state` instead of the query string as it simplifies the implementation and removes the surface attack area associated with passing data through the query string.\n\n### Recommended action\n\nMost apps have a RedirectToLogin.razor file in them that can be updated as follows:\r\n\r\n```razor\r\n@inject NavigationManager Navigation\r\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\r\n@using Microsoft.Extensions.Options\r\n\r\n@inject IOptionsSnapshot<RemoteAuthenticationOptions<ApiAuthorizationProviderOptions>> Options\r\n@code {\r\n\r\n    protected override void OnInitialized()\r\n    {\r\n        Navigation.NavigateToLogin(Options.Get(Microsoft.Extensions.Options.Options.DefaultName).AuthenticationPaths.LogInPath);\r\n    }\r\n}\r\n```\n\n### Affected APIs\n\nAs part of this change `SignOutSessionStateManager` has been obsoleted in favor of `NavigationManager.NavigateToLogout`","Url":"https://github.com/aspnet/Announcements/issues/497","RelatedDescription":"Open issue \"[Breaking change]: Updates to Authentication in webassembly applications\" (#497)"},{"Id":"1400322849","IsPullRequest":false,"CreatedAt":"2022-10-06T21:30:20","Actor":"halter73","Number":"496","RawContent":null,"Title":"[Breaking change]: IEndpointMetadataProvider and IEndpointParameterMetadataProvider interface changes in 7.0 RC2","State":"open","Body":"### Description\n\nIn ASP.NET Core 7 RC2, the `IEndpointMetadataProvider` and `IEndpointParameterMetadataProvider` interfaces [introduced in  preview 4](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-4/#self-describing-minimal-apis-with-iendpointmetadataprovider-and-iendpointparametermetadataprovider) have been updated to take an [EndpointBuilder](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.endpointbuilder?view=aspnetcore-7.0) rather than a `EndpointMetadataContext` or `EndpointParameterMetadataContext`.\r\n\r\n\n\n### Version\n\n.NET 7 RC 2\n\n### Previous behavior\n\nThe `PopulateMetadata` methods on both interfaces took their respective context arguments as a single parameter. Both contexts included services (`IServiceProvider`) and endpoint metadata (`IList<object>`).\r\n\r\n`EndpointMetadataContext` included the `MethodInfo` for the minimal route handler MVC action that took the implementing type as a parameter or returned it. `EndpointParameterMetadataContext` provided `ParameterInfo` and could only be used on parameter types.\n\n### New behavior\n\nNow in RC2, both interfaces' `PopulateMetadata` method take an `EndpointBuilder` as their second parameter. The `EndpointBuilder` provides access to the application services (`IServiceProvider`) and endpoint metadata (`IList<object>`) previously provided by `EndpointMetadataContext` and `EndpointParameterMetadataContext`.\r\n\r\nNow, `IEndpointMetadataProvider` takes a `MethodInfo` and `IEndpointParameterMetadataProvider` takes a `ParameterInfo` as their first parameter.\r\n\r\nBoth `EndpointMetadataContext` and `EndpointParameterMetadataContext` have been removed.\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/43125#issuecomment-1218534849 for an API diff.\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [ ] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThe metadata providers now get access to more metadata like the `RoutePattern` (with a downcast) and `DisplayName` via the `EndpointBuilder`, and this allowed us to delete unnecessary context types.\n\n### Recommended action\n\nUpdate implementations of `IEndpointMetadataProvider` and `IEndpointParameterMetadataProvider` to access the information necessary from the new parameters. There should be nothing that was available via the contexts previously that are unavailable via `PopulateMetadata`'s new parameters.\n\n### Affected APIs\n\n- Parameters changed: `Microsoft.AspNetCore.Http.Metadata.IEndpointMetadataProvider.PopulateMetadata`\r\n- Parameters changed: `Microsoft.AspNetCore.Http.Metadata.IEndpointParameterMetadataProvider.PopulateMetadata`\r\n- Removed: `Microsoft.AspNetCore.Http.Metadata.EndpointMetadataContext`\r\n- Removed: `Microsoft.AspNetCore.Http.Metadata.EndpointParameterMetadataContext`","Url":"https://github.com/aspnet/Announcements/issues/496","RelatedDescription":"Open issue \"[Breaking change]: IEndpointMetadataProvider and IEndpointParameterMetadataProvider interface changes in 7.0 RC2\" (#496)"},{"Id":"1396674543","IsPullRequest":false,"CreatedAt":"2022-10-04T18:23:29","Actor":"MackinnonBuck","Number":"495","RawContent":null,"Title":"[Breaking change]: Endpoints configured with 'MapFallbackToFile()' now only match 'HEAD' and 'GET' requests","State":"open","Body":"### Description\n\nThe `ConsumesAttribute` attribute allows controller actions to specify their supported content types. Starting in .NET 6, if a fallback file endpoint was configured, it could match routes that were discarded due to the request having a different content type than what was specified in an action's `ConsumesAttribute`. This was an undesirable change in behavior from .NET 5 that we are partially addressing in .NET 7 by making fallback file endpoints only match `GET` and `HEAD` requests.\n\n### Version\n\n.NET 7 RC2\n\n### Previous behavior\n\nEndpoints configured with `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()` may match requests made with any request method.\n\n### New behavior\n\nEndpoints configured with `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()` will only match `HEAD` and `GET` requests.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis partially reverts larger breaking change accidentally introduced in .NET 6. Since it's highly unusual to expect a fallback file response when making a request with a method other than `HEAD` or `GET`, we anticipate the impact of this breaking change to be minimal.\n\n### Recommended action\n\nIf you want fallback file endpoints to match requests with methods other than `HEAD` or `GET`, you can specify additional HTTP request methods using `WithMetadata()`. For example:\r\n\r\n```csharp\r\nendpoints.MapFallbackToFile(\"index.html\")\r\n    .WithMetadata(new HttpMethodMetadata(new[] { /* List supported methods here */ }));\r\n```\n\n### Affected APIs\n\nAll overloads of `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()`.","Url":"https://github.com/aspnet/Announcements/issues/495","RelatedDescription":"Open issue \"[Breaking change]: Endpoints configured with 'MapFallbackToFile()' now only match 'HEAD' and 'GET' requests\" (#495)"},{"Id":"1376539134","IsPullRequest":false,"CreatedAt":"2022-09-16T22:09:33","Actor":"brunolins16","Number":"494","RawContent":null,"Title":"[Breaking change]:  Using the System.Text.Json source generator with ASP. NET Core throws NotSupportedException in RC1 *only*","State":"open","Body":"### Description\r\n\r\nIn _**.NET 7 RC1**_, we started requiring that the type `object` to be explicitly specified with a `[JsonSerializable]` attribute applied to your Json Serializer context class in Minimal APIs applications using `System.Text.Json` source generation. _**This was an unexpected behavioral change that we will be fixed in RC2**_.\r\n\r\n### Version\r\n\r\n.NET 7 RC1\r\n\r\n### Previous behavior\r\n\r\nBefore **.NET 7 RC1**, if you are using `System.Text.Json` source generation with `ASP.NET Core Minimal APIs` your endpoint's response will be serialized (`JSON` format) correctly when you have your custom types declared in the `JsonSerializerContext`.\r\n\r\nThe following code shows an example using `System.Text.Json` source generation with `ASP.NET Core Minimal APIs` :\r\n\r\n``` c#\r\nusing System.Text.Json.Serialization;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.ConfigureHttpJsonOptions(o => o.SerializerOptions.AddContext<JsonContext>());\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\"/\", () =>\r\n{\r\n    var l = new List<MyClass> { new(), new() };\r\n    return Results.Ok(l);\r\n});\r\n\r\napp.Run();\r\n\r\n[JsonSerializable(typeof(List<MyClass>))]\r\npublic partial class JsonContext : JsonSerializerContext\r\n{}\r\n\r\npublic class MyClass\r\n{\r\n    public int MyProp { get; set; }\r\n}\r\n```\r\n\r\n### New behavior\r\n\r\nIn .NET RC 1 and **RC 1 only** (**_this is being fixed in RC 2_**) the same sample application will throw a `NotSupportedException`.\r\n\r\n```\r\nNotSupportedException: Metadata for type 'System.Object' was not provided by TypeInfoResolver of type 'JsonContext'. \r\nIf using source generation, ensure that all root types passed to the serializer have been indicated with 'JsonSerializableAttribute',\r\nalong with any types that might be serialized polymorphically.\r\n\r\nSystem.Text.Json.ThrowHelper.ThrowNotSupportedException_NoMetadataForType(Type type, IJsonTypeInfoResolver resolver)\r\n```\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/43894 for more context.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis is an unexpected side effect cause by a combination of multiple changes, listed below, detected only after **.NET 7 RC1** release. \r\n\r\n**.NET Runtime**\r\n1. https://github.com/dotnet/docs/issues/30758\r\n2. https://github.com/dotnet/docs/issues/30755\r\n\r\n**ASP.NET CORE**\r\n1. https://github.com/dotnet/aspnetcore/issues/39856\r\n2. https://github.com/dotnet/aspnetcore/issues/41724#issuecomment-1142735823\r\n\r\nThe root cause was already identified, and a fix will be available in **.NET 7 RC2**.\r\n\r\n### Recommended action\r\n\r\nYou can add the `[JsonSerializable(typeof(object))]` to your [JsonSerializerContext](https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-source-generation?pivots=dotnet-7-0) or wait for RC 2 when this unexpected behavior will be fixed.\r\n\r\n``` c#\r\n[JsonSerializable(typeof(List<MyClass>))]\r\n[JsonSerializable(typeof(object))]\r\npublic partial class JsonContext : JsonSerializerContext\r\n{}\r\n```\r\n\r\n\r\n### Affected APIs\r\n\r\n- Minimal APIs\r\n- Controllers (using [Microsoft.AspNetCore.Http.HttpResults](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.httpresults?view=aspnetcore-7.0))","Url":"https://github.com/aspnet/Announcements/issues/494","RelatedDescription":"Open issue \"[Breaking change]:  Using the System.Text.Json source generator with ASP. NET Core throws NotSupportedException in RC1 *only*\" (#494)"},{"Id":"1371807646","IsPullRequest":false,"CreatedAt":"2022-09-13T17:51:25","Actor":"sebastienros","Number":"492","RawContent":null,"Title":"[Breaking change]: Output Caching renames in 7.0 RC2","State":"open","Body":"### Description\n\nFrom 7.0 RC1 to 7.0 RC2 some APIs have changed to better represent their intent.\r\n\r\nhttps://github.com/dotnet/aspnetcore/pull/43892\r\n\n\n### Version\n\n.NET 7 RC2\n\n### Previous behavior\n\n- `OutputCachePolicyBuilder.VaryByQuery()` was additive: every call would add more query string keys to vary by.\n\n### New behavior\n\n- `OutputCachePolicyBuilder.SetVaryByQuery()` is replacing existing query string keys.\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [ ] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis change was made to improve the consistency of method names and to remove ambiguity in their behavior.\n\n### Recommended action\n\nIt is recommended you recompile any projects built with an earlier SDK. If any of these method names were referenced directly, the source should be updated to reflect the new names.\n\n### Affected APIs\n\n- Removed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.OutputCachePolicyBuilder()` \r\n- Removed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.Clear()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.AllowLocking()` to `SetLocking()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByRouteValue()` to `SetVaryByRouteValue()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByQuery()` to `SetVaryByQuery()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByHeader()` to `SetVaryByHeader()` \r\n- Added: `Microsoft.AspNetCore.OutputCaching.CacheVaryByRules.VaryByHost`\r\n- Added: `Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddPolicy(string name, Action<OutputCachePolicyBuilder> build, bool excludeDefaultPolicy)`\r\n- Added: `Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddBasePolicy(Action<OutputCachePolicyBuilder> build, bool excludeDefaultPolicy)`\r\n- Added: `Microsoft.Extensions.DependencyInjection.OutputCacheConventionBuilderExtensions.CacheOutput<TBuilder>(this TBuilder builder, Action<OutputCachePolicyBuilder> policy, bool excludeDefaultPolicy)`\r\n","Url":"https://github.com/aspnet/Announcements/issues/492","RelatedDescription":"Open issue \"[Breaking change]: Output Caching renames in 7.0 RC2\" (#492)"},{"Id":"1342406148","IsPullRequest":false,"CreatedAt":"2022-08-18T00:16:25","Actor":"Tratcher","Number":"491","RawContent":null,"Title":"[Breaking change]: AuthenticateAsync for remote authentication providers no longer fails if anonymous","State":"open","Body":"### Description\n\nRE: https://github.com/dotnet/aspnetcore/issues/43042, https://github.com/dotnet/aspnetcore/pull/43212\r\n\r\nRemote authentication providers like OpenIdConnect, WsFederation, and OAuth have been updated to avoid unnecessary errors when there is no user information available on the request.\n\n### Version\n\n.NET 7 RC1\n\n### Previous behavior\n\nWhen AuthenticateAsync was called on a remote authentication provider and there was no current user, this call would fail with a message like `OpenIdConnect was not authenticated. Failure message: Not authenticated`. \n\n### New behavior\n\nAuthenticateAsync will now return `AuthenticateResult.NoResult()`, an anonymous identity. \n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\n- This was inconsistent with Cookie and Negotiate authentication which will return `AuthenticateResult.NoResult()`.\r\n- It causes excess failure logs, especially if the remote authentication handler is set as the default handler and invoked per request.\n\n### Recommended action\n\nCode that directly invokes AuthenticateAsync should be checked to ensure it properly handles `AuthenticateResult.NoResult()` and anonymous/empty ClaimsIdentity's.\n\n### Affected APIs\n\nHttpContext.[AuthenticateAsync](https://github.com/dotnet/aspnetcore/blob/a450cb69b5e4549f5515cdb057a68771f56cefd7/src/Http/Authentication.Abstractions/src/AuthenticationHttpContextExtensions.cs#L22)","Url":"https://github.com/aspnet/Announcements/issues/491","RelatedDescription":"Open issue \"[Breaking change]: AuthenticateAsync for remote authentication providers no longer fails if anonymous\" (#491)"},{"Id":"1288995849","IsPullRequest":true,"CreatedAt":"2022-08-01T20:01:05","Actor":"msftbot[bot]","Number":"489","RawContent":null,"Title":"Migrate FabricBot Tasks to Config-as-Code","State":"closed","Body":"**TL;DR;** Requesting to add [FabricBot](https://eng.ms/docs/products/1es-data-insights/merlinbot/extensions/fabricbot_overview) configuration associated with your repository to `.github/fabricbot.json`.\r\n\r\n**Context**\r\n\r\nFabricBot is now a [config-as-code-only](https://eng.ms/docs/products/1es-data-insights/merlinbot/extensions/bot-config-as-code) platform. As a result, while you can still use the [FabricBot Configuration Portal](https://portal.fabricbot.ms/bot/?repo=aspnet/Announcements) to modify your FabricBot configuration, you can no longer save the changes. The only way to save changes to your configuration at the moment is to _export configuration_ from the portal and upload the exported configuration to `.github/fabricbot.json` in your repository. In this pull request, we are adding your FabricBot configuration to your repository at `.github/fabricbot.json` so that you can make changes to it going forward.\r\n\r\nWhile the [FabricBot Configuration Portal](https://portal.fabricbot.ms/bot/?repo=aspnet/Announcements) is the *only way* to modify your FabricBot configuration at the moment, we have a feature on our backlog to publish the JSON schema defining the structure of the FabricBot configuration file. With the JSON schema, you can (1) use a plaintext editor of your choice to modify the FabricBot configuration file and use the schema to validate the file after editing or (2) [configure](https://code.visualstudio.com/Docs/languages/json#_json-schemas-and-settings) VS Code to use the schema when editing FabricBot configuration file to take advantage of convenience features such as automatic code completion and field description on mouseover.\r\n\r\n[*Pull Request Create*](https://eng.ms/docs/products/1es-data-insights/merlinbot/extensions/prcreate), a [MerlinBot](https://https://eng.ms/docs/products/1es-data-insights/merlinbot) Extension, was used to automatically create this pull request. If you have any questions or concerns with this pull request, please contact [MerlinBot Expert DRI](mailto:merlinbotdri@microsoft.com).\r\n","Url":"https://github.com/aspnet/Announcements/pull/489","RelatedDescription":"Closed or merged PR \"Migrate FabricBot Tasks to Config-as-Code\" (#489)"},{"Id":"1311264480","IsPullRequest":false,"CreatedAt":"2022-07-20T14:46:50","Actor":"captainsafia","Number":"490","RawContent":null,"Title":"[Breaking change]: Changes in default authentication scheme handling for ASP.NET Core","State":"open","Body":"### Description\r\n\r\n\r\nStarting in .NET 7 Preview 7, we introduced new behavior in the authentication area in ASP.NET Core.\r\n\r\nPreviously, users were always required to set the default authentication scheme that would be used by authentication and authorization handlers, like so:\r\n```\r\nbuilder.Services.AddAuthentication(\"MyDefaultScheme\");\r\n```\r\nMoving forward, when (and only when) a single authentication scheme is registered, that scheme will be treated as the default scheme. For example, \"foobar\" will be treated as the default scheme in the code below.\r\n```\r\nbuilder.Services.AddAuthentication().AddOAuth(\"foobar\");\r\n```\r\nThis change might expose unintended behavior changes in applications, such as authentication options being validated earlier than expected.\r\n\r\n### Version\r\n\r\n.NET 7 Preview 7\r\n\r\n### Previous behavior\r\n\r\nPreviously, when users did not provide a default scheme in the `AddAuthentication` call, no default scheme was set.\r\n\r\n```csharp\r\nbuilder.Services.AddAuthentication().AddCookie();\r\n```\r\n\r\nThis impacted the behavior of authentication handlers in the application layer.\r\n\r\n### New behavior\r\n\r\nMoving forward, if (and only if) a _single_ scheme is registered in an application, that scheme will be treated as the default. In the code below, the `CookieDefaults.AuthenticationScheme` will be treated as the default scheme.\r\n\r\n```csharp\r\nbuilder.Services.AddAuthentication().AddCookie();\r\n```\r\n\r\nHowever, in the code snippet below, no default will be set because multiple schemes are registered.\r\n\r\n```csharp\r\nbuilder.Services.AddAuthentication().AddCookie().AddJwtBearer();\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nTo reduce boilerplate when configuring authentication and set up sensible defaults.\r\n\r\n### Recommended action\r\n\r\nThe change only impacts applications with a single scheme registered. For those scenarios, it's recommended to ensure that your application is prepared to handle the assumption that a single scheme is the default. For example, the options associated with that scheme should be configured correctly.\r\n\r\nAlternatively, this behavior can be disabled by setting the `Microsoft.AspNetCore.Authentication.SuppressAutoDefaultScheme` app context flag.\r\n\r\n### Affected APIs\r\n\r\nAuthentication APIs.","Url":"https://github.com/aspnet/Announcements/issues/490","RelatedDescription":"Open issue \"[Breaking change]: Changes in default authentication scheme handling for ASP.NET Core\" (#490)"},{"Id":"1287742787","IsPullRequest":false,"CreatedAt":"2022-06-28T18:44:22","Actor":"DamianEdwards","Number":"488","RawContent":null,"Title":"[Breaking change]: Static files, default document, and directory browsing middleware no longer no-op when an endpoint with a null RequestDelegate is active","State":"open","Body":"### Description\n\nAs detailed in dotnet/aspnetcore#42413, the file-serving middleware (`DefaultFilesMiddleware`, `DirectoryBrowserMiddleware`, and `StaticFileMiddleware`) have been updated to no longer no-op (i.e. defer to the next middleware in the pipeline) in the case that there is an active endpoint with a `null` request delegate.\r\n\r\nPR that makes the change: dotnet/aspnetcore#42458\n\n### Version\n\n.NET 7 Preview 7\n\n### Previous behavior\n\nPreviously, if the current request had an active endpoint, i.e. `HttpContext.GetEndpoint() != null`, the file-serving middleware would perform no action and simply delegate to the next middleware in the request pipeline.\n\n### New behavior\n\nThe file-serving middleware will now only perform no action if there is an active endpoint and its `RequestDelegate` property value is not `null`, i.e. `HttpContext.GetEndpoint()?.RequestDelegate is not null`.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis change will enable endpoints to be active in the request for the purposes of setting and sharing metadata with middleware that are endpoint-aware so that they can perform their intended function, while allowing other middleware (like the file-serving middleware) that would usually defer their behavior when an endpoint is active to also function.\r\n\r\nFor example, an endpoint with a `null` request delegate containing authorization metadata can be set as the active endpoint for a request, causing the `AuthorizationMiddleware` to enforce authorization requirements, which if satisfied would allow the `StaticFileMiddleware` to serve the requested files.\n\n### Recommended action\n\nIf you are relying on setting an active endpoint on the request to suppress the behavior of the file-serving middleware, ensure that the endpoint has a non-null value set for its `RequestDelegate` property.\n\n### Affected APIs\n\n- `IApplicationBuilder.UseStaticFiles()`\r\n- `IApplicationBuilder.UseDefaultFiles()`\r\n- `IApplicationBuilder.UseDirectoryBrowser()`","Url":"https://github.com/aspnet/Announcements/issues/488","RelatedDescription":"Open issue \"[Breaking change]: Static files, default document, and directory browsing middleware no longer no-op when an endpoint with a null RequestDelegate is active\" (#488)"},{"Id":"1278667050","IsPullRequest":false,"CreatedAt":"2022-06-21T16:03:03","Actor":"BrennanConroy","Number":"487","RawContent":null,"Title":"[Breaking change]: Unit testing SignalR Hubs may need updating","State":"open","Body":"### Description\n\n`IHubClients` and `IHubCallerClients` now hide interface members `IClientProxy Client(string connectionId);` and `IClientProxy Caller { get; }` with `ISingleClientProxy Client(string connectionId);` and `ISingleClientProxy Caller { get; }` in order to add support for [client results](https://docs.microsoft.com/aspnet/core/signalr/hubs?view=aspnetcore-7.0#client-results).\r\n\r\nThis is not a breaking change to production code, unless you use reflection to call the above `Client` or `Caller` methods.\n\n### Version\n\n.NET 7\n\n### Previous behavior\n\nWhen using a testing library like Moq to unit test a SignalR Hub, you may write some code like follows:\r\n```csharp\r\nvar hub = new MyHub();\r\nvar mockCaller = new Mock<IHubCallerClients>();\r\nvar mockClientProxy = new Mock<IClientProxy>();\r\nmockCaller.Setup(x => x.Caller).Returns(mockClientProxy.Object);\r\nhub.Clients = mockCaller.Object;\r\n\r\nclass MyHub : Hub { }\r\n```\n\n### New behavior\n\n```csharp\r\nvar hub = new MyHub();\r\nvar mockCaller = new Mock<IHubCallerClients>();\r\nvar mockClientProxy = new Mock<ISingleClientProxy>(); // <-- updated code\r\nmockCaller.Setup(x => x.Caller).Returns(mockClientProxy.Object);\r\nhub.Clients = mockCaller.Object;\r\n\r\nclass MyHub : Hub { }\r\n```\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [ ] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThe change was made to add new functionality to SignalR and is non-breaking in normal use cases. The main area we see the change breaking is in test code which is easily updated.\n\n### Recommended action\n\nUpdate test code to use the `ISingleClientProxy` interface when using reflection/reflection-based test code.\n\n### Affected APIs\n\n[`IHubClients`](https://docs.microsoft.com/dotnet/api/microsoft.aspnetcore.signalr.ihubclients?view=aspnetcore-6.0) and [`IHubCallerClients`](https://docs.microsoft.com/dotnet/api/microsoft.aspnetcore.signalr.ihubcallerclients?view=aspnetcore-6.0)","Url":"https://github.com/aspnet/Announcements/issues/487","RelatedDescription":"Open issue \"[Breaking change]: Unit testing SignalR Hubs may need updating\" (#487)"},{"Id":"1263972971","IsPullRequest":false,"CreatedAt":"2022-06-07T22:53:47","Actor":"Daniel-Genkin-MS-2","Number":"486","RawContent":null,"Title":"[Breaking change]: Removed default HTTPS binding on Kestrel","State":"open","Body":"### Description\n\nThe default HTTPS address and port have been removed from Kestrel in .NET 7 preview 6. This is step one in https://github.com/dotnet/aspnetcore/issues/42016 which will improve overall developer experience when dealing with HTTPS.\r\n\r\nPR that makes the change: https://github.com/dotnet/aspnetcore/pull/42021\r\n\r\n## Version\r\n.NET 7 preview 6\r\n\n\n### Version\n\nOther (please put exact version in description textbox)\n\n### Previous behavior\n\nPreviously, if no values for the address and port were specified explicitly but a local development certificate was available, Kestrel would default to binding to both http://localhost:5000 and https://localhost:5001.\n\n### New behavior\n\nUsers must now manually bind to HTTPS and specify the address and port explicitly, either via the `launchSettings.json` file, the `ASPNETCORE_URLS` environment variable, `--urls` command line argument, `urls` host configuration key, or via the [`UseUrls`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.hostingabstractionswebhostbuilderextensions.useurls?view=aspnetcore-6.0) extension method.\r\n\r\nHTTP binding is unchanged.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis current eager binding behavior occurs without regard to the configured environment and can lead to experience issues on developer machines when the certificate has not yet been trusted (i.e. trusted as root cert authority because it's self-signed). Clients often produce poor UX when hitting an HTTPS endpoint with an untrusted certificate, e.g. silent failure, scary error/warning screen, etc.\n\n### Recommended action\n\nIf you were not using the default https://localhost:5001 binding, no changes are required. However, if you were using this binding, please make sure to review [this guide](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel/endpoints) on how you can update your server to enable HTTPS.\n\n### Affected APIs\n\nN/A","Url":"https://github.com/aspnet/Announcements/issues/486","RelatedDescription":"Open issue \"[Breaking change]: Removed default HTTPS binding on Kestrel\" (#486)"},{"Id":"1240740970","IsPullRequest":false,"CreatedAt":"2022-05-18T23:44:43","Actor":"brunolins16","Number":"485","RawContent":null,"Title":"[Breaking change]: ActionResult<T> set StatusCode to 200","State":"open","Body":"### Description\r\n\r\nWhen returning a `T` in a MVC/API Controller Action that declares the return type as `ActionResult<T>` will now always set the `ObjectResult.StatusCode` to `200`, unless when the `T` is a `ProblemDetails`.\r\n\r\nSince before this change the `ObjectResult.StatusCode` was `null`, in some scenarios where the status code is set manually, this change could cause unexpected behaviors. Also, an Action Filter could be affected by this change if it expects the `null` instead of `200`.\r\n\r\n### Version\r\n\r\n.NET 6\r\n\r\n### Previous behavior\r\n\r\nBefore if you have a Controller's Action that returns `T` and sets the `Response.StatusCode` manually, similar to the example:\r\n\r\n``` C#\r\n\r\n// Generates a 202 Accepted response\r\npublic ActionResult<Model> Get()\r\n{\r\n    Response.StatusCode = StatusCodes.Status202Accepted;\r\n    return new Model();\r\n}\r\n```\r\nIt will generate the expected `202 Accepted` response status code.\r\n\r\n### New behavior\r\n\r\nAfter the changes the same Controller's Action that returns `T` that sets the `Response.StatusCode` manually, will always generate a `200 OK` response.\r\n\r\n``` C#\r\n\r\n// Generates a 200 OK response\r\npublic ActionResult<Model> Get()\r\n{\r\n    Response.StatusCode = StatusCodes.Status202Accepted;\r\n    return new Model();\r\n}\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis behavior is documented since ASP.NET Core 3.1 (https://docs.microsoft.com/en-us/aspnet/core/web-api/action-return-types?view=aspnetcore-3.1#actionresultt-type), however, it keeps the `StatusCode` as `null` that will eventually generate a `200 OK` response as default. Since the default internal behavior could easily change, was decided to avoid relying on the internal default implementation and setting the `StatusCode` to the expected `200 OK`.\r\n\r\n### Recommended action\r\n\r\nIf you are broken by this change, as the example mentioned before:\r\n\r\n``` C#\r\npublic ActionResult<Model> Get()\r\n{\r\n    Response.StatusCode = StatusCodes.Status202Accepted;\r\n    return new Model();\r\n}\r\n```\r\n\r\nYou will need to change your Controller Action. These are some possible options that will keep the desired behavior:\r\n\r\n``` c#\r\npublic ActionResult<Model> Get()\r\n{\r\n   return Accepted(new Model());\r\n}\r\n\r\n//or\r\n\r\npublic ActionResult<Model> Get()\r\n{\r\n   return StatusCode(StatusCodes.Status202Accepted, new Model());\r\n}\r\n\r\n//or\r\n\r\npublic Model Get()\r\n{\r\n   Response.StatusCode = StatusCodes.Status202Accepted;\r\n   return new Model();\r\n}\r\n```\r\n\r\n### Affected APIs\r\n\r\nMVC/API Controller actions.","Url":"https://github.com/aspnet/Announcements/issues/485","RelatedDescription":"Open issue \"[Breaking change]: ActionResult<T> set StatusCode to 200\" (#485)"},{"Id":"1190169916","IsPullRequest":false,"CreatedAt":"2022-04-01T19:03:58","Actor":"brunolins16","Number":"484","RawContent":null,"Title":"[Breaking change]: Updated empty body detection in MVC Model Binding","State":"open","Body":"### Description\r\n\r\nThe mechanism to detect an empty request `body` during the MVC Model Binding now uses the [`IHttpRequestBodyDetectionFeature.CanHaveBody`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.features.ihttprequestbodydetectionfeature.canhavebody?view=aspnetcore-6.0#microsoft-aspnetcore-http-features-ihttprequestbodydetectionfeature-canhavebody), that is currently implemented by the following behavior:\r\n\r\n- `true` when:\r\n  - It's an `HTTP/1.x` request with a non-zero `Content-Length` or a `Transfer-Encoding: chunked` header.\r\n  - It's an `HTTP/2` request that did not set the `END_STREAM` flag on the initial headers frame.\r\n\r\n- `false` when:\r\n  - It's an `HTTP/1.x` request with no `Content-Length` or `Transfer-Encoding: chunked` header, or the `Content-Length` is `0`.\r\n  - It's an `HTTP/1.x` request with `Connection: Upgrade` (e.g. WebSockets). There is no HTTP request body for these requests and no data should be received until after the upgrade.\r\n  - It's an `HTTP/2` request that set `END_STREAM` on the initial headers frame.\r\n\r\nSince the previous behavior was a simple validation of the `Content-Length == 0`, in some scenarios when requests are not sending all needed HTTP information, could now be detected as empty request and report a failure to the client.\r\n\r\n\r\n### Version\r\n\r\n7.0.0-preview3\r\n\r\n### Previous behavior\r\n\r\n Before if you have a Controller's action that bind a parameter from body:\r\n\r\n``` csharp\r\n [HttpPost()]\r\n        public IActionResult Required([FromBody] TestClass value) => Ok(value);\r\n```\r\n\r\nAnd the client request does not include a `Content-Length` header, eg.:\r\n\r\n``` curl\r\ncurl --request POST -k -i \"[action]\" -H \"Content-Type: application/json\"\r\n```\r\n\r\nThis request will cause an internal exception during the body deserialization:\r\n\r\nEg.: When using the `System.Text.Json` input formatter\r\n``` log\r\nSystem.Text.Json.JsonException: 'The input does not contain any JSON tokens. \r\nExpected the input to start with a valid JSON token, when isFinalBlock is true. \r\nPath: $ | LineNumber: 0 | BytePositionInLine: 0.'\r\n```\r\n\r\nAlso, a response payload similar to this will be receive by the client:\r\n\r\n``` json\r\n{\r\n  \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\r\n  \"title\": \"One or more validation errors occurred.\",\r\n  \"status\": 400,\r\n  \"traceId\": \"00-34e98b5841b88bfb5476965efd9d9c8c-5bb16bc50dfbabb7-00\",\r\n  \"errors\": {\r\n    \"$\": [\r\n+      \"The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true. Path: $ | LineNumber: 0 | BytePositionInLine: 0.\"\r\n    ],\r\n    \"value\": [\r\n      \"The value field is required.\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### New behavior\r\n\r\nWith the updated detection mechanism, the deserialization will not be trigger since an empty request body will be detected and only a `validation` message will be reported back to the client. Eg.:\r\n\r\n``` json\r\n{\r\n  \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\r\n  \"title\": \"One or more validation errors occurred.\",\r\n  \"status\": 400,\r\n  \"traceId\": \"00-0f87920dc675fdfdf8d7638d3be66577-bd6bdbf32d21b714-00\",\r\n  \"errors\": {\r\n    \"\": [\r\n+      \"A non-empty request body is required.\"\r\n    ],\r\n    \"value\": [\r\n      \"The value field is required.\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis change is an alignment with other parts of the framework that were already using the [`IHttpRequestBodyDetectionFeature.CanHaveBody`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.features.ihttprequestbodydetectionfeature.canhavebody?view=aspnetcore-6.0#microsoft-aspnetcore-http-features-ihttprequestbodydetectionfeature-canhavebody) and also a fix to a reported issue dotnet/aspnetcore/issues/29570\r\n\r\n### Recommended action\r\n\r\nNo change is required, however, if you getting an unexpected behavior is recommended to review if your client's requests are sending the appropriated headers/information.\r\n\r\n### Affected APIs\r\n\r\nMVC Action Controllers","Url":"https://github.com/aspnet/Announcements/issues/484","RelatedDescription":"Open issue \"[Breaking change]: Updated empty body detection in MVC Model Binding\" (#484)"},{"Id":"1154726545","IsPullRequest":false,"CreatedAt":"2022-03-01T01:08:45","Actor":"pranavkm","Number":"483","RawContent":null,"Title":"[Breaking change]: Event IDs for some Microsoft.AspNetCore.Mvc.Core log messages changed","State":"open","Body":"### Description\n\nAs part of updating the Microsoft.AspNetcore.Mvc.Core assembly to use `LoggerMessageAttribute`, we discovered logger event Ids being reused within a single log category. Log IDs and names should be unique so different message types can be identified. Consequently, these have been updated to ensure that the event Ids are unique for a logger category. \n\n### Version\n\n.NET 7\n\n### Previous behavior\n\nSome logger event IDs in Microsoft.AspNetCore.Mvc.Core were re-used within a single category.\n\n### New behavior\n\nDuplicated event ids within a single category within the Microsoft.AspNetCore.Mvc.Core assembly were updated.\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n\n### Reason for change\n\nLog IDs and names should be unique so different message types can be identified.\n\n### Recommended action\n\nIf you have code or configuration that references the old IDs, update those references to use the new IDs.\n\n### Affected APIs\n\nNot detectable via API analysis","Url":"https://github.com/aspnet/Announcements/issues/483","RelatedDescription":"Open issue \"[Breaking change]: Event IDs for some Microsoft.AspNetCore.Mvc.Core log messages changed\" (#483)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-03-15T03:30:05.6284379Z","RunDurationInMilliseconds":2441}