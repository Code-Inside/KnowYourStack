{"Data":{"Blog":{"FeedItems":[{"Title":"MCP C# SDK Gets Major Update: Support for Protocol Version 2025-06-18","PublishedOn":"2025-07-22T17:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The MCP C# SDK has been updated to support the latest Model Context Protocol specification (2025-06-18), bringing structured tool output, elicitation support, enhanced security, and more to .NET...","Href":"https://devblogs.microsoft.com/dotnet/mcp-csharp-sdk-2025-06-18-update/","RawContent":null},{"Title":"Ask Mode vs Agent Mode – Choosing the Right Copilot Experience for .NET","PublishedOn":"2025-07-21T17:05:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"GitHub Copilot Chat offers two powerful modes, Ask Mode and Agent Mode, that can dramatically accelerate your development. Learn when to use each mode to get the most out of this tool.\nThe post Ask...","Href":"https://devblogs.microsoft.com/dotnet/ask-mode-vs-agent-mode/","RawContent":null},{"Title":"Building Your First MCP Server with .NET and Publishing to NuGet","PublishedOn":"2025-07-15T20:00:00+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Learn how to create a Model Context Protocol (MCP) server using .NET 10 and publish it to NuGet — making AI capabilities discoverable and reusable across the ecosystem.\nThe post Building Your First...","Href":"https://devblogs.microsoft.com/dotnet/mcp-server-dotnet-nuget-quickstart/","RawContent":null},{"Title":".NET 10 Preview 6 is now available!","PublishedOn":"2025-07-15T17:22:00+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Find out about the new features in .NET 10 Preview 6 across the .NET runtime, SDK, libraries, ASP.NET Core, Blazor, C#, .NET MAUI, and more!\nThe post .NET 10 Preview 6 is now available! appeared first...","Href":"https://devblogs.microsoft.com/dotnet/dotnet-10-preview-6/","RawContent":null},{"Title":"Customize AI responses from GitHub Copilot","PublishedOn":"2025-07-10T17:15:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Learn how custom instructions can tailor GitHub Copilot's AI responses to your team's exact needs.\nThe post Customize AI responses from GitHub Copilot appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/customize-ai-responses-from-github-copilot/","RawContent":null},{"Title":"How the .NET MAUI Team uses GitHub Copilot for Productivity","PublishedOn":"2025-07-09T17:15:00+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"How the .NET MAUI Team uses GitHub Copilot for Productivity\nThe post How the .NET MAUI Team uses GitHub Copilot for Productivity appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/maui-team-copilot-tips/","RawContent":null},{"Title":".NET and .NET Framework July 2025 servicing releases updates","PublishedOn":"2025-07-08T19:00:00+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"A recap of the latest servicing updates for .NET and .NET Framework for July 2025.\nThe post .NET and .NET Framework July 2025 servicing releases updates appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/dotnet-and-dotnet-framework-july-2025-servicing-updates/","RawContent":null},{"Title":"Local AI + .NET = AltText Magic in One C# Script","PublishedOn":"2025-07-02T20:00:00+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Learn how to generate image AltText using .NET 10 and local AI models — all in a single C# file with dotnet run app.cs. A fun and accessible example of what AI can do beyond chat.\nThe post Local AI +...","Href":"https://devblogs.microsoft.com/dotnet/alttext-generator-csharp-local-models/","RawContent":null},{"Title":"Simpler XAML in .NET MAUI 10","PublishedOn":"2025-06-26T19:15:00+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Make your .NET MAUI XAML more consistent and easier to read with global and implicit XML namespaces.\nThe post Simpler XAML in .NET MAUI 10 appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/simpler-xaml-in-dotnet-maui-10/","RawContent":null},{"Title":"Multimodal Vision Intelligence with .NET MAUI","PublishedOn":"2025-06-17T19:30:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Enhance your .NET MAUI app with photo-based AI by capturing images and extracting structured information using Microsoft.Extensions.AI.\nThe post Multimodal Vision Intelligence with .NET MAUI appeared...","Href":"https://devblogs.microsoft.com/dotnet/multimodal-vision-intelligence-with-dotnet-maui/","RawContent":null}],"ResultType":"Feed"},"AspNetCore-Issues":{"Issues":[{"Id":"3254589840","IsPullRequest":true,"CreatedAt":"2025-07-23T02:14:45","Actor":"JamesNK","Number":"62871","RawContent":null,"Title":"Don't error on Protobuf messages that expose wrapper types","State":"open","Body":"Fixes https://github.com/dotnet/aspnetcore/issues/55254\r\n\r\nAdd logic to convert to and from wrapper types when they're exposed on Protobuf DTOs.\r\n\r\nNote that the Protobuf DTO class is added directly instead of code genned. This is done because code gen in this project wouldn't expose the wrapper types.","Url":"https://github.com/dotnet/aspnetcore/pull/62871","RelatedDescription":"Open PR \"Don't error on Protobuf messages that expose wrapper types\" (#62871)"},{"Id":"3254574868","IsPullRequest":true,"CreatedAt":"2025-07-23T02:03:27","Actor":"dotnet-maestro[bot]","Number":"62870","RawContent":null,"Title":"[main] Source code updates from dotnet/dotnet","State":"open","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:227fbda2-94d8-406e-91e6-26cb20b6628c)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [227fbda2-94d8-406e-91e6-26cb20b6628c](https://maestro.dot.net/subscriptions?search=227fbda2-94d8-406e-91e6-26cb20b6628c)\n- **Build**: [20250722.3](https://dev.azure.com/dnceng/internal/_build/results?buildId=2755594)\n- **Date Produced**: July 22, 2025 11:10:44 PM UTC\n- **Commit**: [96ac952a7886b565e83acc4c9cef656954ed0686](https://github.com/dotnet/dotnet/commit/96ac952a7886b565e83acc4c9cef656954ed0686)\n- **Commit Diff**: [fb75b2d...96ac952](https://github.com/dotnet/dotnet/compare/fb75b2d053edb9e69cfb2a49523efa4e21f7f645...96ac952a7886b565e83acc4c9cef656954ed0686)\n- **Branch**: main\n\n**Updated Dependencies**\n- From [10.0.0-preview.7.25371.106 to 10.0.0-preview.7.25372.103][1]\n  - dotnet-ef\n  - Microsoft.Bcl.AsyncInterfaces\n  - Microsoft.Bcl.TimeProvider\n  - Microsoft.EntityFrameworkCore\n  - Microsoft.EntityFrameworkCore.Design\n  - Microsoft.EntityFrameworkCore.InMemory\n  - Microsoft.EntityFrameworkCore.Relational\n  - Microsoft.EntityFrameworkCore.Sqlite\n  - Microsoft.EntityFrameworkCore.SqlServer\n  - Microsoft.EntityFrameworkCore.Tools\n  - Microsoft.Extensions.Caching.Abstractions\n  - Microsoft.Extensions.Caching.Memory\n  - Microsoft.Extensions.Configuration\n  - Microsoft.Extensions.Configuration.Abstractions\n  - Microsoft.Extensions.Configuration.Binder\n  - Microsoft.Extensions.Configuration.CommandLine\n  - Microsoft.Extensions.Configuration.EnvironmentVariables\n  - Microsoft.Extensions.Configuration.FileExtensions\n  - Microsoft.Extensions.Configuration.Ini\n  - Microsoft.Extensions.Configuration.Json\n  - Microsoft.Extensions.Configuration.UserSecrets\n  - Microsoft.Extensions.Configuration.Xml\n  - Microsoft.Extensions.DependencyInjection\n  - Microsoft.Extensions.DependencyInjection.Abstractions\n  - Microsoft.Extensions.DependencyModel\n  - Microsoft.Extensions.Diagnostics\n  - Microsoft.Extensions.Diagnostics.Abstractions\n  - Microsoft.Extensions.FileProviders.Abstractions\n  - Microsoft.Extensions.FileProviders.Composite\n  - Microsoft.Extensions.FileProviders.Physical\n  - Microsoft.Extensions.FileSystemGlobbing\n  - Microsoft.Extensions.HostFactoryResolver.Sources\n  - Microsoft.Extensions.Hosting\n  - Microsoft.Extensions.Hosting.Abstractions\n  - Microsoft.Extensions.Http\n  - Microsoft.Extensions.Logging\n  - Microsoft.Extensions.Logging.Abstractions\n  - Microsoft.Extensions.Logging.Configuration\n  - Microsoft.Extensions.Logging.Console\n  - Microsoft.Extensions.Logging.Debug\n  - Microsoft.Extensions.Logging.EventLog\n  - Microsoft.Extensions.Logging.EventSource\n  - Microsoft.Extensions.Logging.TraceSource\n  - Microsoft.Extensions.Options\n  - Microsoft.Extensions.Options.ConfigurationExtensions\n  - Microsoft.Extensions.Options.DataAnnotations\n  - Microsoft.Extensions.Primitives\n  - Microsoft.Internal.Runtime.AspNetCore.Transport\n  - Microsoft.NET.Runtime.MonoAOTCompiler.Task\n  - Microsoft.NET.Runtime.WebAssembly.Sdk\n  - Microsoft.NETCore.App.Ref\n  - Microsoft.NETCore.BrowserDebugHost.Transport\n  - Microsoft.NETCore.Platforms\n  - System.Collections.Immutable\n  - System.Composition\n  - System.Configuration.ConfigurationManager\n  - System.Diagnostics.DiagnosticSource\n  - System.Diagnostics.EventLog\n  - System.Diagnostics.PerformanceCounter\n  - System.DirectoryServices.Protocols\n  - System.Formats.Asn1\n  - System.Formats.Cbor\n  - System.IO.Hashing\n  - System.IO.Pipelines\n  - System.Memory.Data\n  - System.Net.Http.Json\n  - System.Net.Http.WinHttpHandler\n  - System.Net.ServerSentEvents\n  - System.Numerics.Tensors\n  - System.Reflection.Metadata\n  - System.Resources.Extensions\n  - System.Runtime.Caching\n  - System.Security.Cryptography.Pkcs\n  - System.Security.Cryptography.Xml\n  - System.Security.Permissions\n  - System.ServiceProcess.ServiceController\n  - System.Text.Encodings.Web\n  - System.Text.Json\n  - System.Threading.AccessControl\n  - System.Threading.Channels\n  - System.Threading.RateLimiting\n- From [10.0.0-beta.25371.106 to 10.0.0-beta.25372.103][1]\n  - Microsoft.DotNet.Arcade.Sdk\n  - Microsoft.DotNet.Build.Tasks.Archives\n  - Microsoft.DotNet.Build.Tasks.Installers\n  - Microsoft.DotNet.Build.Tasks.Templating\n  - Microsoft.DotNet.Helix.Sdk\n  - Microsoft.DotNet.RemoteExecutor\n  - Microsoft.DotNet.SharedFramework.Sdk\n- From [10.0.100-preview.7.25371.106 to 10.0.100-preview.7.25372.103][1]\n  - Microsoft.DotNet.HotReload.Agent\n  - Microsoft.DotNet.HotReload.Agent.Data\n- From [3.2.0-preview.25371.106 to 3.2.0-preview.25372.103][1]\n  - Microsoft.Web.Xdt\n- From [9.8.0-preview.1.25369.1 to 9.8.0-preview.1.25369.1](https://github.com/dotnet/dotnet/compare/b8012f4eba...b8012f4eba)\n  - Microsoft.Extensions.Caching.Hybrid\n  - Microsoft.Extensions.Diagnostics.Testing\n  - Microsoft.Extensions.TimeProvider.Testing\n\n[marker]: <> (End:227fbda2-94d8-406e-91e6-26cb20b6628c)\n\n[1]: https://github.com/dotnet/dotnet/compare/fb75b2d053...96ac952a78\n[marker]: <> (Start:Footer:CodeFlow PR)\n\n## Associated changes in source repos\n- https://github.com/dotnet/diagnostics/compare/fcaeae336c70cc9af2f7627c4b785c5eade0787f...790647464027d129ad72b901d25ecaba8474e9c6\n- https://github.com/dotnet/msbuild/compare/ac34988962956b3d4b81f086bee3878c2a5d0856...fdaf9502206681459aa4019a612dd8ea2ad0bedb\n- https://github.com/dotnet/razor/compare/aa3cf977560b3a21111c7691175043249f908215...6237a30e719e9ec76d66cc98da56e26500671baa\n- https://github.com/dotnet/roslyn/compare/a8d4395106dcc0d720dd7d1a838661a0ca7cf939...72a0df3e35a6089dcc2fabf47c6503e8a6309b31\n- https://github.com/dotnet/sdk/compare/b64c645566412038bd42f080f27525f07d88ba8b...2f666ecda03b5b6c669b9728e9f35315af6edf96\n\n[marker]: <> (End:Footer:CodeFlow PR)","Url":"https://github.com/dotnet/aspnetcore/pull/62870","RelatedDescription":"Open PR \"[main] Source code updates from dotnet/dotnet\" (#62870)"},{"Id":"3254378016","IsPullRequest":true,"CreatedAt":"2025-07-22T23:50:45","Actor":"dotnet-maestro[bot]","Number":"62869","RawContent":null,"Title":"[release/10.0-preview7] Source code updates from dotnet/dotnet","State":"open","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:1a3d93e2-a5cd-43f8-a92c-5b9611757fcb)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [1a3d93e2-a5cd-43f8-a92c-5b9611757fcb](https://maestro.dot.net/subscriptions?search=1a3d93e2-a5cd-43f8-a92c-5b9611757fcb)\n- **Build**: [20250722.2](https://dev.azure.com/dnceng/internal/_build/results?buildId=2755577)\n- **Date Produced**: July 22, 2025 11:21:22 PM UTC\n- **Commit**: [19deb21964f2c9465b5e5c45e923c32559c7f852](https://github.com/dotnet/dotnet/commit/19deb21964f2c9465b5e5c45e923c32559c7f852)\n- **Commit Diff**: [699b011...19deb21](https://github.com/dotnet/dotnet/compare/699b0116eb3df66c4dd7698af4f1cd24ac4547a3...19deb21964f2c9465b5e5c45e923c32559c7f852)\n- **Branch**: release/10.0.1xx-preview7\n\n**Updated Dependencies**\n- From [10.0.0-preview.7.25367.101 to 10.0.0-preview.7.25372.102][1]\n  - dotnet-ef\n  - Microsoft.Bcl.AsyncInterfaces\n  - Microsoft.Bcl.TimeProvider\n  - Microsoft.EntityFrameworkCore\n  - Microsoft.EntityFrameworkCore.Design\n  - Microsoft.EntityFrameworkCore.InMemory\n  - Microsoft.EntityFrameworkCore.Relational\n  - Microsoft.EntityFrameworkCore.Sqlite\n  - Microsoft.EntityFrameworkCore.SqlServer\n  - Microsoft.EntityFrameworkCore.Tools\n  - Microsoft.Extensions.Caching.Abstractions\n  - Microsoft.Extensions.Caching.Memory\n  - Microsoft.Extensions.Configuration\n  - Microsoft.Extensions.Configuration.Abstractions\n  - Microsoft.Extensions.Configuration.Binder\n  - Microsoft.Extensions.Configuration.CommandLine\n  - Microsoft.Extensions.Configuration.EnvironmentVariables\n  - Microsoft.Extensions.Configuration.FileExtensions\n  - Microsoft.Extensions.Configuration.Ini\n  - Microsoft.Extensions.Configuration.Json\n  - Microsoft.Extensions.Configuration.UserSecrets\n  - Microsoft.Extensions.Configuration.Xml\n  - Microsoft.Extensions.DependencyInjection\n  - Microsoft.Extensions.DependencyInjection.Abstractions\n  - Microsoft.Extensions.DependencyModel\n  - Microsoft.Extensions.Diagnostics\n  - Microsoft.Extensions.Diagnostics.Abstractions\n  - Microsoft.Extensions.FileProviders.Abstractions\n  - Microsoft.Extensions.FileProviders.Composite\n  - Microsoft.Extensions.FileProviders.Physical\n  - Microsoft.Extensions.FileSystemGlobbing\n  - Microsoft.Extensions.HostFactoryResolver.Sources\n  - Microsoft.Extensions.Hosting\n  - Microsoft.Extensions.Hosting.Abstractions\n  - Microsoft.Extensions.Http\n  - Microsoft.Extensions.Logging\n  - Microsoft.Extensions.Logging.Abstractions\n  - Microsoft.Extensions.Logging.Configuration\n  - Microsoft.Extensions.Logging.Console\n  - Microsoft.Extensions.Logging.Debug\n  - Microsoft.Extensions.Logging.EventLog\n  - Microsoft.Extensions.Logging.EventSource\n  - Microsoft.Extensions.Logging.TraceSource\n  - Microsoft.Extensions.Options\n  - Microsoft.Extensions.Options.ConfigurationExtensions\n  - Microsoft.Extensions.Options.DataAnnotations\n  - Microsoft.Extensions.Primitives\n  - Microsoft.Internal.Runtime.AspNetCore.Transport\n  - Microsoft.NET.Runtime.MonoAOTCompiler.Task\n  - Microsoft.NET.Runtime.WebAssembly.Sdk\n  - Microsoft.NETCore.App.Ref\n  - Microsoft.NETCore.BrowserDebugHost.Transport\n  - Microsoft.NETCore.Platforms\n  - System.Collections.Immutable\n  - System.Composition\n  - System.Configuration.ConfigurationManager\n  - System.Diagnostics.DiagnosticSource\n  - System.Diagnostics.EventLog\n  - System.Diagnostics.PerformanceCounter\n  - System.DirectoryServices.Protocols\n  - System.Formats.Asn1\n  - System.Formats.Cbor\n  - System.IO.Hashing\n  - System.IO.Pipelines\n  - System.Memory.Data\n  - System.Net.Http.Json\n  - System.Net.Http.WinHttpHandler\n  - System.Net.ServerSentEvents\n  - System.Numerics.Tensors\n  - System.Reflection.Metadata\n  - System.Resources.Extensions\n  - System.Runtime.Caching\n  - System.Security.Cryptography.Pkcs\n  - System.Security.Cryptography.Xml\n  - System.Security.Permissions\n  - System.ServiceProcess.ServiceController\n  - System.Text.Encodings.Web\n  - System.Text.Json\n  - System.Threading.AccessControl\n  - System.Threading.Channels\n  - System.Threading.RateLimiting\n- From [10.0.0-beta.25367.101 to 10.0.0-beta.25372.102][1]\n  - Microsoft.DotNet.Arcade.Sdk\n  - Microsoft.DotNet.Build.Tasks.Archives\n  - Microsoft.DotNet.Build.Tasks.Installers\n  - Microsoft.DotNet.Build.Tasks.Templating\n  - Microsoft.DotNet.Helix.Sdk\n  - Microsoft.DotNet.RemoteExecutor\n  - Microsoft.DotNet.SharedFramework.Sdk\n- From [10.0.100-preview.7.25367.101 to 10.0.100-preview.7.25372.102][1]\n  - Microsoft.DotNet.HotReload.Agent\n  - Microsoft.DotNet.HotReload.Agent.Data\n- From [3.2.0-preview.25367.101 to 3.2.0-preview.25372.102][1]\n  - Microsoft.Web.Xdt\n\n[marker]: <> (End:1a3d93e2-a5cd-43f8-a92c-5b9611757fcb)\n\n[1]: https://github.com/dotnet/dotnet/compare/699b0116eb...19deb21964\n[marker]: <> (Start:Footer:CodeFlow PR)\n\n## Associated changes in source repos\n- https://github.com/dotnet/arcade/compare/4e526204e83e615efe8eb5743be7fbccfa4e492a...d777c20040bdc2e52b372fa98dcb84141ed692d3\n- https://github.com/dotnet/diagnostics/compare/15863918a40fc31d0498ca5f1b8a5f7f7ada113a...4e46ba6fdb5073afb7b03b46e14f619d5ac456fa\n- https://github.com/dotnet/emsdk/compare/6c6421d38f085dd4822a9acd8abc4890debe4c59...e95e030a874cad1c47971460d25161eb69bff804\n- https://github.com/dotnet/fsharp/compare/4afdc9ffe3543c8fbd2b0b1271624a965bf7f48e...a69caee31bd0c35ebd11ba4ccfa4c6297a42cd69\n- https://github.com/dotnet/msbuild/compare/5d215b0562b3de52781d0bd518805e464790290d...fdaf9502206681459aa4019a612dd8ea2ad0bedb\n- https://github.com/dotnet/razor/compare/88d10f21004784390b5e220607bd4fa6ebfe1301...6237a30e719e9ec76d66cc98da56e26500671baa\n- https://github.com/dotnet/roslyn/compare/462275d9e4c56b6fa2c4e1616f7dd2251f3a3ef7...37a47b7e835dfea15be79b06aaba08a8c017afb9\n- https://github.com/dotnet/runtime/compare/af05ae4672443e875e5b7768cb71bbbfaa351674...d757c03be2c39968bca1db2ce9349fce8f1463a3\n- https://github.com/dotnet/sdk/compare/1414d33c86e760d6635a838a45da0308ff3d53c9...d90167a0db9569bc87f81e3db679dfd4f9a24699\n- https://github.com/microsoft/vstest/compare/8b102963a8cce7809a6956fe0a6df5cb93b2447a...f97214fe5fd493b90959165c6db77f878bcb60bd\n- https://github.com/dotnet/winforms/compare/c9252f63c0bfc3ad70278583bfd84963414acd04...61e6d09186f8e05f7bca6b22cfe11ce53952e0f8\n\n[marker]: <> (End:Footer:CodeFlow PR)","Url":"https://github.com/dotnet/aspnetcore/pull/62869","RelatedDescription":"Open PR \"[release/10.0-preview7] Source code updates from dotnet/dotnet\" (#62869)"},{"Id":"3254336796","IsPullRequest":true,"CreatedAt":"2025-07-22T23:26:21","Actor":"JamesNK","Number":"62868","RawContent":null,"Title":"Add gRPC JSON transcoding option for case insensitive field names","State":"open","Body":"## Description\r\n\r\nAdd a `FieldNamesCaseInsensitive` setting to gRPC JSON transcoding.\r\n\r\nFixes https://github.com/dotnet/aspnetcore/issues/50401\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/62868","RelatedDescription":"Open PR \"Add gRPC JSON transcoding option for case insensitive field names\" (#62868)"},{"Id":"3254244157","IsPullRequest":false,"CreatedAt":"2025-07-22T22:23:30","Actor":"danmoseley","Number":"62867","RawContent":null,"Title":"Remove API that was marked obsolete in <= .NET 8","State":"open","Body":"It's been since https://github.com/dotnet/aspnetcore/issues/27529 that we did a global pass to remove API that was marked Obsolete long enough ago. A good definition of long enough ago is \"shipped in the last LTS\" ie., .NET 8.0, since then even customers that only consume LTS will have had a chance to see the Obsolete attribute.\n\nIn a simple grep of release/8.0 vs main, I see roughly 140 that meet this criteria. Probably easiest to do this in chunks by folder.","Url":"https://github.com/dotnet/aspnetcore/issues/62867","RelatedDescription":"Open issue \"Remove API that was marked obsolete in <= .NET 8\" (#62867)"},{"Id":"3253734897","IsPullRequest":true,"CreatedAt":"2025-07-22T20:33:31","Actor":"dotnet-maestro[bot]","Number":"62865","RawContent":null,"Title":"[main] Source code updates from dotnet/dotnet","State":"closed","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:227fbda2-94d8-406e-91e6-26cb20b6628c)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [227fbda2-94d8-406e-91e6-26cb20b6628c](https://maestro.dot.net/subscriptions?search=227fbda2-94d8-406e-91e6-26cb20b6628c)\n- **Build**: [20250721.6](https://dev.azure.com/dnceng/internal/_build/results?buildId=2754956)\n- **Date Produced**: July 22, 2025 4:19:44 PM UTC\n- **Commit**: [fb75b2d053edb9e69cfb2a49523efa4e21f7f645](https://github.com/dotnet/dotnet/commit/fb75b2d053edb9e69cfb2a49523efa4e21f7f645)\n- **Commit Diff**: [1c92f34...fb75b2d](https://github.com/dotnet/dotnet/compare/1c92f346e02a8363def6f7bdbcc526d3c579dd74...fb75b2d053edb9e69cfb2a49523efa4e21f7f645)\n- **Branch**: main\n\n**Updated Dependencies**\n- From [10.0.0-preview.7.25368.105 to 10.0.0-preview.7.25371.106][1]\n  - dotnet-ef\n  - Microsoft.Bcl.AsyncInterfaces\n  - Microsoft.Bcl.TimeProvider\n  - Microsoft.EntityFrameworkCore\n  - Microsoft.EntityFrameworkCore.Design\n  - Microsoft.EntityFrameworkCore.InMemory\n  - Microsoft.EntityFrameworkCore.Relational\n  - Microsoft.EntityFrameworkCore.Sqlite\n  - Microsoft.EntityFrameworkCore.SqlServer\n  - Microsoft.EntityFrameworkCore.Tools\n  - Microsoft.Extensions.Caching.Abstractions\n  - Microsoft.Extensions.Caching.Memory\n  - Microsoft.Extensions.Configuration\n  - Microsoft.Extensions.Configuration.Abstractions\n  - Microsoft.Extensions.Configuration.Binder\n  - Microsoft.Extensions.Configuration.CommandLine\n  - Microsoft.Extensions.Configuration.EnvironmentVariables\n  - Microsoft.Extensions.Configuration.FileExtensions\n  - Microsoft.Extensions.Configuration.Ini\n  - Microsoft.Extensions.Configuration.Json\n  - Microsoft.Extensions.Configuration.UserSecrets\n  - Microsoft.Extensions.Configuration.Xml\n  - Microsoft.Extensions.DependencyInjection\n  - Microsoft.Extensions.DependencyInjection.Abstractions\n  - Microsoft.Extensions.DependencyModel\n  - Microsoft.Extensions.Diagnostics\n  - Microsoft.Extensions.Diagnostics.Abstractions\n  - Microsoft.Extensions.FileProviders.Abstractions\n  - Microsoft.Extensions.FileProviders.Composite\n  - Microsoft.Extensions.FileProviders.Physical\n  - Microsoft.Extensions.FileSystemGlobbing\n  - Microsoft.Extensions.HostFactoryResolver.Sources\n  - Microsoft.Extensions.Hosting\n  - Microsoft.Extensions.Hosting.Abstractions\n  - Microsoft.Extensions.Http\n  - Microsoft.Extensions.Logging\n  - Microsoft.Extensions.Logging.Abstractions\n  - Microsoft.Extensions.Logging.Configuration\n  - Microsoft.Extensions.Logging.Console\n  - Microsoft.Extensions.Logging.Debug\n  - Microsoft.Extensions.Logging.EventLog\n  - Microsoft.Extensions.Logging.EventSource\n  - Microsoft.Extensions.Logging.TraceSource\n  - Microsoft.Extensions.Options\n  - Microsoft.Extensions.Options.ConfigurationExtensions\n  - Microsoft.Extensions.Options.DataAnnotations\n  - Microsoft.Extensions.Primitives\n  - Microsoft.Internal.Runtime.AspNetCore.Transport\n  - Microsoft.NET.Runtime.MonoAOTCompiler.Task\n  - Microsoft.NET.Runtime.WebAssembly.Sdk\n  - Microsoft.NETCore.App.Ref\n  - Microsoft.NETCore.BrowserDebugHost.Transport\n  - Microsoft.NETCore.Platforms\n  - System.Collections.Immutable\n  - System.Composition\n  - System.Configuration.ConfigurationManager\n  - System.Diagnostics.DiagnosticSource\n  - System.Diagnostics.EventLog\n  - System.Diagnostics.PerformanceCounter\n  - System.DirectoryServices.Protocols\n  - System.Formats.Asn1\n  - System.Formats.Cbor\n  - System.IO.Hashing\n  - System.IO.Pipelines\n  - System.Memory.Data\n  - System.Net.Http.Json\n  - System.Net.Http.WinHttpHandler\n  - System.Net.ServerSentEvents\n  - System.Numerics.Tensors\n  - System.Reflection.Metadata\n  - System.Resources.Extensions\n  - System.Runtime.Caching\n  - System.Security.Cryptography.Pkcs\n  - System.Security.Cryptography.Xml\n  - System.Security.Permissions\n  - System.ServiceProcess.ServiceController\n  - System.Text.Encodings.Web\n  - System.Text.Json\n  - System.Threading.AccessControl\n  - System.Threading.Channels\n  - System.Threading.RateLimiting\n- From [10.0.0-beta.25368.105 to 10.0.0-beta.25371.106][1]\n  - Microsoft.DotNet.Arcade.Sdk\n  - Microsoft.DotNet.Build.Tasks.Archives\n  - Microsoft.DotNet.Build.Tasks.Installers\n  - Microsoft.DotNet.Build.Tasks.Templating\n  - Microsoft.DotNet.Helix.Sdk\n  - Microsoft.DotNet.RemoteExecutor\n  - Microsoft.DotNet.SharedFramework.Sdk\n- From [10.0.100-preview.7.25368.105 to 10.0.100-preview.7.25371.106][1]\n  - Microsoft.DotNet.HotReload.Agent\n  - Microsoft.DotNet.HotReload.Agent.Data\n- From [3.2.0-preview.25368.105 to 3.2.0-preview.25371.106][1]\n  - Microsoft.Web.Xdt\n\n[marker]: <> (End:227fbda2-94d8-406e-91e6-26cb20b6628c)\n\n[1]: https://github.com/dotnet/dotnet/compare/1c92f346e0...fb75b2d053\n[marker]: <> (Start:Footer:CodeFlow PR)\n\n## Associated changes in source repos\n- https://github.com/dotnet/diagnostics/compare/4e46ba6fdb5073afb7b03b46e14f619d5ac456fa...fcaeae336c70cc9af2f7627c4b785c5eade0787f\n- https://github.com/dotnet/efcore/compare/74068d2036ea9db2454d62865eef3a1414622538...badb1e827de2be81a4b52c09aa2d0a846cc591d2\n- https://github.com/dotnet/razor/compare/a67c6a7dd43e50cfcf7f6e14de8b1cea6861cfb1...aa3cf977560b3a21111c7691175043249f908215\n- https://github.com/dotnet/roslyn/compare/37a47b7e835dfea15be79b06aaba08a8c017afb9...a8d4395106dcc0d720dd7d1a838661a0ca7cf939\n- https://github.com/dotnet/runtime/compare/98b587ce895026e3cebec9510e8d4e6eaa403151...69eea4da555abc7ba68cb1f6ae86bfdf888dcc6e\n- https://github.com/dotnet/sdk/compare/e83454226efb08b5e7d4f48b54cf769b3ff9d9c8...b64c645566412038bd42f080f27525f07d88ba8b\n- https://github.com/dotnet/source-build-reference-packages/compare/e66cb9556591cff76527ba15386357bc2f463c7c...642f9742222bc4d58ad05fac70f0103733dfe5fd\n- https://github.com/dotnet/wpf/compare/0567cc262408546036a3f57b1d60d42eb083e5df...390c57065309a5b4ec1075894f5fcecab472aa62\n\n[marker]: <> (End:Footer:CodeFlow PR)","Url":"https://github.com/dotnet/aspnetcore/pull/62865","RelatedDescription":"Closed or merged PR \"[main] Source code updates from dotnet/dotnet\" (#62865)"},{"Id":"3253944428","IsPullRequest":true,"CreatedAt":"2025-07-22T20:09:21","Actor":"MackinnonBuck","Number":"62866","RawContent":null,"Title":"Add PQC certificate support for HTTPS ","State":"open","Body":"# Add PQC certificate support for HTTPS \r\n\r\nOpening initially as a draft:\r\n* SLH-DSA tests will fail until SLH-DSA is supported by Windows\r\n* Composite ML-DSA support isn't fully implemented in the BCL yet\r\n\r\nNote that, as of the time of writing, a Windows Insider Build (Canary) is required in order for the ML-DSA tests to pass.\r\n\r\nFixes #62030","Url":"https://github.com/dotnet/aspnetcore/pull/62866","RelatedDescription":"Open PR \"Add PQC certificate support for HTTPS \" (#62866)"},{"Id":"3251444051","IsPullRequest":false,"CreatedAt":"2025-07-22T19:14:15","Actor":"pr-benchmarks[bot]","Number":"62849","RawContent":null,"Title":"Perf improvement: json_middleware","State":"closed","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| json_middleware [Fixed] | Json 400k 5- Trends Gold Win | 07/20/2025 18:20:03 | 11,756 | 11,774 | 0.15 % (18)  :thumbsup:  | 2.33 σ | 7.55 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25368.102` -> `10.0.0-preview.7.25368.105`</td>            <td>https://github.com/dotnet/dotnet/compare/46deba7a696a2f4e00270a11c84a5aff2648dd39...1c92f346e02a8363def6f7bdbcc526d3c579dd74</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25368.102` -> `10.0.0-preview.7.25368.105`</td>            <td>https://github.com/dotnet/aspnetcore/compare/46deba7a696a2f4e00270a11c84a5aff2648dd39...1c92f346e02a8363def6f7bdbcc526d3c579dd74</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25368.102` -> `10.0.0-preview.7.25368.105`</td>            <td>https://github.com/dotnet/runtime/compare/46deba7a696a2f4e00270a11c84a5aff2648dd39...1c92f346e02a8363def6f7bdbcc526d3c579dd74</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK]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[/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/62849","RelatedDescription":"Closed issue \"Perf improvement: json_middleware\" (#62849)"},{"Id":"3253569977","IsPullRequest":false,"CreatedAt":"2025-07-22T17:49:42","Actor":"lukedukeus","Number":"62864","RawContent":null,"Title":"SignalR client not reporting version correctly","State":"open","Body":"### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen using the ts/js signalr library, if you write your own hub protocol that implements `signalR.IHubProtocol`, the version number is always reported as 1, even if you set it to something else.\n\nI have an ASP.NET Core project that has a GRPC API, so I thought it made sense to use protobuf serialization instead of JSON serailization for my hubs. I wrote a C# class that implements `IHubProtocol` that looks like this:\n\n```\n    public class ProtobufProtocol : IHubProtocol\n    {\n        public string Name => \"protobuf\";\n\n        public int Version => 3;\n\n        public TransferFormat TransferFormat => TransferFormat.Binary;\n\n        public bool IsVersionSupported(int version)\n        {\n            return Version == version;\n        }\n\n        ... omitted for berevity ...\n    }\n```\n\nI then wrote the corresponding implementation in TS, but this time, implementing `signalR.IHubProtocol`:\n```\nexport class ProtobufProtocol implements signalR.IHubProtocol {\n\tname = \"protobuf\";\n\tversion = 3;\n\ttransferFormat = TransferFormat.Binary;\n\n        ... omitted for berevity ...\n}\n```\n\n The result is that C# clients can connect to the hub fine, but TS clients cannot, and the error that they recieve is: `SignalR connection failed Error: Server returned handshake error: The server does not support version 1 of the 'protobuf' protocol.`. I would not expect this error, because neither end of the protocol reports to be version 1.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/62864","RelatedDescription":"Open issue \"SignalR client not reporting version correctly\" (#62864)"},{"Id":"3253524327","IsPullRequest":false,"CreatedAt":"2025-07-22T17:35:38","Actor":"thatplatypus","Number":"62863","RawContent":null,"Title":"Allow @await blocks in blazor markup","State":"open","Body":"### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nIn Svelte you have really nice {#await} blocks which makes the markup very readable and the intent obvious. I think a lot of developers for blazor defer to having the collection or data as nullable and using that check for it. @if(collection != null) {data} else {skeleton}\n\nIt would be nice to just be able to @await(task1 && task2) and render the markup when the Task completes. The @await block could infer it's a `Task.WhenAll` by default. This could improve designs of scoped services typically used to populate the data since it's a common pattern to return cached data and not need to run the task subsequently by returning the result.\n\nNullable could also be inferred as some different meaning context in the application, not necessarily has this loaded, but is this valid at all. It opens up more opportunities for devs to implement things.\n\n### Describe the solution you'd like\n\n@await markup that compiles down to Task.WhenAll over any Task to indicate loading states\n\nField assignment of private variables so you can do @await(collection1 = _collection1, collection2 = _collection2) which keeps the current blazor structure intact that wants to iterate over member variable collections\n\n### Additional context\n\nIt might be nice to not care about the nullability as much and focus the front end on if the operation has completed, particularly in WASM scenarios, it feels like we could streamline the nullability checks with just awaiting the thing we want to happen, and this is also applicable to the server models, or desktop hybrid models when there's an expensive fetching operation.","Url":"https://github.com/dotnet/aspnetcore/issues/62863","RelatedDescription":"Open issue \"Allow @await blocks in blazor markup\" (#62863)"},{"Id":"3253180803","IsPullRequest":false,"CreatedAt":"2025-07-22T15:38:04","Actor":"oroztocil","Number":"62862","RawContent":null,"Title":"Support excluding selected object properties/parameters from validation","State":"open","Body":"Currently, the new shared validation support (used in Minimal APIs and Blazor) does not have a mechanism for declaring that some object properties of a validated type should be skipped (i.e. the validator should not recurse into validating their types and their nested properties).\n\nWe should add an opt-out attribute similar to the [`ValidateNever`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.modelbinding.validation.validateneverattribute?view=aspnetcore-9.0) attribute from MVC.\n\nName of the attribute is to be determined. We might want to avoid conflict with `ValidateNever`. Notably, `SkipValidation` is used as a property in `JsonWriterOptions`.\n\nProposed features:\n\n- When user decorates a property of a validated type with the attribute, the validator skips that property during validation.\n- When user decorates a parameter of a validated method with the attribute, the validator skips the parameter during validation.\n- [TBD] When user decorates a type with the attribute, the validator skips all properties and parameters of that type during validation. (`ValidateNever` supports this.)\n- The source generator skips creating validation code for a type/property/parameter that is only present in the assembly as decorated with the attribute. (If there is at least one use that is not skipped from validation, the code must be generated.)","Url":"https://github.com/dotnet/aspnetcore/issues/62862","RelatedDescription":"Open issue \"Support excluding selected object properties/parameters from validation\" (#62862)"},{"Id":"3248762444","IsPullRequest":true,"CreatedAt":"2025-07-22T15:01:40","Actor":"MackinnonBuck","Number":"62841","RawContent":null,"Title":"[release/10.0-preview7] Passkey design follow-ups","State":"closed","Body":"_Backport of https://github.com/dotnet/aspnetcore/pull/62530_\r\n\r\n# Passkey design follow-ups\r\n\r\nAddresses API review feedback for passkey support\r\n\r\n## Description\r\n\r\nThis PR implements follow-up changes from the API review of passkey support in ASP.NET Core Identity (#62287). This also includes updates to the Blazor Web App project template to make use of the updated APIs. The changes ensure the passkey APIs meet the quality bar for the release and incorporate design improvements identified during review.\r\n\r\nFixes #62287\r\n\r\n## Customer Impact\r\n\r\nThese changes improve the usability of the new passkey authentication feature in ASP.NET Core Identity. While this PR contains breaking API changes, the APIs being changed were only introduced in .NET 10 preview 6, so we don't expect customer apps to be heavily relying on them.\r\n\r\n## Regression?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nThis is a new feature being introduced, not a bug fix to existing functionality.\r\n\r\n## Risk\r\n\r\n- [ ] High\r\n- [ ] Medium\r\n- [x] Low\r\n\r\nWhile this PR includes breaking changes to the passkey APIs, the initial revision was released in preview 6. Therefore, direct customer usage of these preview APIs is expected to be minimal. The changes in this PR only apply to passkey functionality and are unlikely to impact other parts of the product.\r\n\r\n## Verification\r\n\r\n- [x] Manual (required)\r\n- [x] Automated\r\n\r\n## Packaging changes reviewed?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n- [x] N/A","Url":"https://github.com/dotnet/aspnetcore/pull/62841","RelatedDescription":"Closed or merged PR \"[release/10.0-preview7] Passkey design follow-ups\" (#62841)"},{"Id":"3252946581","IsPullRequest":true,"CreatedAt":"2025-07-22T14:34:19","Actor":"opuzakov","Number":"62861","RawContent":null,"Title":"Fix RequestDelegateFactory to handle nullable types correctly in empty request body scenarios","State":"open","Body":"# Fix RequestDelegateFactory to handle nullable types correctly in empty request body scenarios\r\n\r\n<!-- Thank you for submitting a pull request to our repo. -->\r\n\r\n<!-- If this is your first PR in the ASP.NET Core repo, please run through the checklist\r\nbelow to ensure a smooth review and merge process for your PR. -->\r\n\r\n- [x] You've read the [Contributor Guide](https://github.com/dotnet/aspnetcore/blob/main/CONTRIBUTING.md) and [Code of Conduct](https://github.com/dotnet/aspnetcore/blob/main/CODE-OF-CONDUCT.md).\r\n- [x] You've included unit or integration tests for your change, where applicable.\r\n- [x] You've included inline docs for your change, where applicable.\r\n- [x] There's an open issue for the PR that you are making. If you'd like to propose a new feature or change, please open an issue to discuss the change or find an existing issue.\r\n\r\n<!-- Once all that is done, you're ready to go. Open the PR with the content below. -->\r\n\r\n## Description\r\nThis change fixes an issue where RequestDelegateFactory would incorrectly handle nullable parameter types when the request body is empty (aligning behavior with the controller-based API)\r\n\r\nThe changes include:\r\n- Add nullable type detection\r\n- Additional test coverage for nullable parameter types with an empty request body\r\n\r\nFixes #57055 \r\n","Url":"https://github.com/dotnet/aspnetcore/pull/62861","RelatedDescription":"Open PR \"Fix RequestDelegateFactory to handle nullable types correctly in empty request body scenarios\" (#62861)"},{"Id":"3252914918","IsPullRequest":false,"CreatedAt":"2025-07-22T14:25:41","Actor":"soundaranbu","Number":"62860","RawContent":null,"Title":"Reloading the InteractiveServer page consecutively throws circuit shutdown error","State":"open","Body":"### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nI noticed an issue while testing the PersistentState attribute by reloading the page consecutively, which resulted in an error. To reproduce the problem, I stripped everything down to a simple page component, but it still threw the same error.\n\n```\n[2025-07-22T13:55:32.508Z] Error: Circuit has been shut down due to error.\nlog @ blazor.web.2joo3ua8jp.js:1\nunhandledError @ blazor.web.2joo3ua8jp.js:1\n(anonymous) @ blazor.web.2joo3ua8jp.js:1\n_invokeClientMethod @ blazor.web.2joo3ua8jp.js:1\n_processIncomingData @ blazor.web.2joo3ua8jp.js:1\nCn.connection.onreceive @ blazor.web.2joo3ua8jp.js:1\ni.onmessage @ blazor.web.2joo3ua8jp.js:1\n```\n\nThe application still works but the error **continues to show up even when opening a new session in another browser/tab**. There were no warning/error observed in the terminal\n\n```razor\n@page \"/\"\n@rendermode InteractiveServer\n\n<PageTitle>Home</PageTitle>\n\n@counter\n\n@code {\n    public int counter { get; set; }\n}\n```\n\n<img width=\"2343\" height=\"1014\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/62626f1a-e20f-4219-898c-91d9204bca98\" />\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n- Create a new Blazor Web App with per page InteractiveServer render mode\n- Reload the home page consecutively for 10 or more times and you'll see the error. The number of times to reload is not fixed as I've seen it go lesser when the component grows bigger.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n10.0.100-preview.7.25368.105\n\n### Anything else?\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/62860","RelatedDescription":"Open issue \"Reloading the InteractiveServer page consecutively throws circuit shutdown error\" (#62860)"},{"Id":"3252780433","IsPullRequest":false,"CreatedAt":"2025-07-22T13:48:21","Actor":"soundaranbu","Number":"62859","RawContent":null,"Title":"PersistentState attribute throws InvalidOperationException at runtime when used with private property","State":"open","Body":"### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nHi, Is the `PersistentState` attribute supposed to work for **private** properties? There's no warning in VS nor any guidance on how it should behave for private properties unless I've missed anything.\n\n```diff\n@page \"/counter\"\n@using Microsoft.AspNetCore.Components.QuickGrid\n@rendermode InteractiveServer\n\n<PageTitle>Counter</PageTitle>\n\n<h1>Counter</h1>\n\n<p role=\"status\">Current count: @currentCount</p>\n\n<button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button>\n@code {\n+   [PersistentState]\n+   private int currentCount { get; set; } = 0;\n\n    protected override void OnInitialized()\n    {\n        if (!RendererInfo.IsInteractive)\n        {\n            currentCount = 5;\n        }\n    }\n\n    private void IncrementCount()\n    {\n        currentCount++;\n    }\n}\n```\n\n\nIt throws the following exception at runtime\n\nfail: Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager[1000]\n      There was an error executing a callback while pausing the application.\n      System.InvalidOperationException: Property currentCount not found on type BlazorApp.Net10.Components.Pages.Counter\n         at Microsoft.AspNetCore.Components.Infrastructure.PersistentStateValueProvider.PropertyGetterFactory(ValueTuple`2 key)\n         at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\n         at Microsoft.AspNetCore.Components.Infrastructure.PersistentStateValueProvider.ResolvePropertyGetter(Type type, String propertyName)\n         at Microsoft.AspNetCore.Components.Infrastructure.PersistentStateValueProvider.<>c__DisplayClass13_0.<Subscribe>b__0()\n         at Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager.<TryPauseAsync>g__TryExecuteCallback|18_0(Func`1 callback, ILogger`1 logger)\n\n### Expected Behavior\n\n- If private properties aren't supported, then the error message should be clear enough for the developer to fix the issue\nThere should also be a code analyzer warning in place and the documentation should state this explicitly as anyone would easily fall into this trap before realizing\n\n- If it's a supported use case, then there shouldn't be any exception and the value should be persisted and restored successfully for private properties\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n10.0.100-preview.7.25368.105\n\n### Anything else?\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/62859","RelatedDescription":"Open issue \"PersistentState attribute throws InvalidOperationException at runtime when used with private property\" (#62859)"},{"Id":"3252758329","IsPullRequest":false,"CreatedAt":"2025-07-22T13:42:34","Actor":"yvanddivans","Number":"62858","RawContent":null,"Title":"Critical Bug: Blazor Server – SignalR NullReferenceException when closing modal and updating QuickGrid","State":"open","Body":"## 📋 Description\nIn a Blazor Server app, when a modal component is closed (via `@if`) and an `EventCallback` adds an item to a list bound to a QuickGrid, the server crashes with a `NullReferenceException` in **SignalR**.\n\nThis causes:\n- The entire app to freeze\n- The SignalR circuit to die silently\n- No exception being caught by any `ErrorBoundary`\n\n## 🧪 Repro steps\n1. A parent component displays a `QuickGrid` bound to a list: `List<InvoiceDetailsModel>`\n2. A modal component is shown via `@if (IsModalVisible)`\n3. On form submit inside the modal, an `EventCallback` adds an item to the list and sets IsModalVisible = false\n4. This causes Blazor to:\n   - Dispose the modal component\n   - Re-render the `QuickGrid`\n5. At this point, SignalR crashes with a NullReferenceException\n\n## 💣 What actually happens\n- `RemoteJSRuntime.EndInvokeDotNet(...)` throws `NullReferenceException`\n- The app freezes completely\n- No exception bubbles up\n- Reproducible 100% of the time\n\n## ✅ What has been tried (and failed)\n|Attempted Fix | Outcome|\n|--|--|\n|Using @key to force modal recreation | ❌ No effect|\n|Implementing IDisposable and detaching event handlers | ✅ Called, no leak — but still crashes|\n|Wrapping EventCallback in InvokeAsync() or Task.Yield() | ❌ Still crashes|\n|Resetting bound model before disposal (Detail = new()) | ❌ Still crashes|\n|Toggling visibility (Visible=true/false) instead of @if | ❌ Same behavior|\n|Delaying updates to parent via Task.Delay() | ❌ Still crashes|\n|Removing QuickGrid temporarily | ✅ Prevents crash → likely trigger is grid rerender|\n\n## 📎 Stack trace\n```\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at Microsoft.AspNetCore.Components.Server.Circuits.RemoteJSRuntime.EndInvokeDotNet(DotNetInvocationInfo invocationInfo, DotNetInvocationResult& invocationResult)\n   at Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendCoreAsync(...) // decompiled source\n```\n\n## 🧰 Environment\n- .NET 8.0.x\n- Blazor Server\n- Microsoft.AspNetCore.SignalR.Core (latest)\n- Microsoft.AspNetCore.Components.QuickGrid (stable)\n\n## 🙏 Request\n- Can this be addressed in QuickGrid's rendering logic or the framework’s circuit lifecycle?\n- At minimum, can the runtime guard against this crash instead of throwing from SendCoreAsync()?\n- Should there be documentation or pattern warnings around updating QuickGrid during component disposal?\n","Url":"https://github.com/dotnet/aspnetcore/issues/62858","RelatedDescription":"Open issue \"Critical Bug: Blazor Server – SignalR NullReferenceException when closing modal and updating QuickGrid\" (#62858)"},{"Id":"3252172642","IsPullRequest":false,"CreatedAt":"2025-07-22T10:49:01","Actor":"shindepra","Number":"62856","RawContent":null,"Title":"Ensure the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds (a[href$=\"Downloads/\"]): A11y_ASP.NETCore_Index_AI4W.","State":"open","Body":"**\"Please do not close this bug. This bug should only be closed by Trusted Tester after verification.\"**\n\"[Check out Accessibility Insights!](https://accessibilityinsights.io/) - Identify accessibility bugs before check-in and make bug fixing faster and easier.\"\n\n### GitHub Tags:\n#A11ySev2; #A11yTCS; #DesktopWeb; #Win11; #.NET Core Cloud Platform; #BM_.NETCoreCloudPlatform_Web_July25; #AI4W; #WCAG1.4.3; #ColorContrast; #A11yMAS; #A11yAuto; #Accessibility; #Contrast(Minimum);\n\n### Environment Details:\nApplication Name: ASP .NET Core (.NET Core Cloud Platform)\nURL: http://localhost:53936/\nChromium Edge version: Version 138.0.3351.83 (Official build) (64-bit)\nWindows Version 24H2\nOS Build Version 26100.4652\n\n### Repro step:   \n\n1. Download the \"BlazorWebAssemblyApp\" zip file and run .exe file.\n2. Open the Command prompt and Run the command \"dnx dotnet-serve\". \n3. TAB to \"http://localhost:53936/\" link and press CTRL + ENTER key.\n4. TAB to \"Index\" page and hit ENTER key.\n5. Turn on Accessibility insights for Web and Observe that the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds (a[href$=\"Downloads/\"])\n### Issue:\nEnsure the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds (color-contrast - https://accessibilityinsights.io/info-examples/web/color-contrast)\n\n### Target application:\nIndex of / - http://localhost:53936/\n\n### Element path:\na[href$=\"Downloads/\"]\n\n### Snippet:\n<a href=\"./Downloads/\">Downloads/</a>\n\n### How to fix:\n**Fix any of the following:**\nElement has insufficient color contrast of 2.89 (foreground color: #1ba1e2, background color: #ffffff, font size: 10.5pt (14px), font weight: normal). Expected contrast ratio of 4.5:1\n\nEnvironment: Microsoft Edge version 140.0.0.0\n\n====\n\nThis accessibility issue was found using Accessibility Insights for Web 2.46.0 (axe-core 4.10.2), a tool that helps find and fix accessibility issues. Get more information & download this tool at http://aka.ms/AccessibilityInsights.\n\n### Attachment:\n\n![Image](https://github.com/user-attachments/assets/440b134c-6b6c-4af8-90b7-7fc9bef2d2f8)\n\n**Color contrast attachment:**\n\n![Image](https://github.com/user-attachments/assets/e4078744-a628-4abc-bc0b-53507def2e51)","Url":"https://github.com/dotnet/aspnetcore/issues/62856","RelatedDescription":"Open issue \"Ensure the contrast between foreground and background colors meets WCAG 2 AA minimum contrast ratio thresholds (a[href$=\"Downloads/\"]): A11y_ASP.NETCore_Index_AI4W.\" (#62856)"},{"Id":"3251844998","IsPullRequest":false,"CreatedAt":"2025-07-22T09:17:12","Actor":"oroztocil","Number":"62855","RawContent":null,"Title":"Improve disposal of Blazor server resources for disconnected clients","State":"open","Body":"## Summary\n\nCurrently, the client in a Blazor Server app tries to help the server with disposing unneeded circuits by sending a disconnection beacon during the `unload` JS event. (After merging https://github.com/dotnet/aspnetcore/pull/62805 this will be replaced with the `pagehide` event.)\n\nThis mechanism is not dependable and in many cases - in particular on mobile devices - leads to the server never realizing that the client has abandoned the session and the circuit data does not need to be kept around (in the disconnected cache, later in the serialized state storage).\n\nWe want to explore the possibility to improve these scenarios using information about page visibility. The Blazor client would send additional beacon message to the server when the page gets hidden (put into background) or made visible again (put into foreground). The server would use this when deciding what to do with the circuit if it gets disconnected.\n\n## Motivation\n\nReasoning behind the visibility-based optimization is as follows:\n\n- The `visibilitychange` event is the only one that fires somewhat reliably on mobile devices, in particular when switching tabs in the browser, switching to another app, or going to the home screen.\n- In these situations, the tab with the Blazor app (or the entire browser) is often discarded \nand no other events are processed.\n- From the server's point of view, this manifests as such: 1) the server receives the visbility change beacon with the `hidden` state, 2) depending on the timeout settings, the server recognizes at some point that the SignalR connection has disconnected.\n- Previously, unless we received the disconnect beacon (based on the `unload`/`pagehide` event), we would move the disconnected circuit into the `DisconnectedCircuits` memory cache, and later into the persistent state storage. This is wasteful for the mobile scenarios described above as circuits from closed/discarded tabs would never be restored anyway.\n\n\n## Risks\n\n1. On mobile this change can help significantly. However, on desktop, this does not help much because there the `pagehide` event fires mostly in the same situations as the `visibilitychange` - taking into account only situations where we actually _want_ to dispose the circuit (closing the tab, navigating away, hard refresh, closing the browser).\n2. Inevitably, there is a scenario which we make worse: user switches tabs (but the Blazor app is still loaded and communicates with server), then the device loses network connection. Previously, we would move the circuit into `DisconnectedCircuits`, now we terminate and dispose it (because the server sees the same order of events as e.g. in the mobile app switch scenario) even though the circuit would be eligible for restoration when the device regains network connection and the user foregrounds the Blazor tab. We want to minimize the chance of this happening.\n3. There are also other browser-side optimizations (particularly on desktop) such as background tab freezing or throttling that might lead to the SignalR connection breaking while the page was hidden. In these situations we don't want to dispose the circuits prematurely because they may be restored when the user switches back to the Blazor tab. For this reason, we might want to dispose only circuits for _recently_ hidden tabs as these optimizations typically kick in after some time.\n4. By adding the visibility change beacon, we are obviously increasing traffic and use some additional server resources for processing the beacon.\n","Url":"https://github.com/dotnet/aspnetcore/issues/62855","RelatedDescription":"Open issue \"Improve disposal of Blazor server resources for disconnected clients\" (#62855)"},{"Id":"3251767163","IsPullRequest":true,"CreatedAt":"2025-07-22T08:55:38","Actor":"Copilot","Number":"62853","RawContent":null,"Title":"Fix Blazor template HTTPS profile to include HTTP URL","State":"open","Body":"The Blazor Web template's HTTPS launch profile was missing the HTTP URL in its `applicationUrl` configuration, making it inconsistent with other ASP.NET Core templates.\n\n**Problem:**\nIn `src/ProjectTemplates/Web.ProjectTemplates/content/BlazorWeb-CSharp/BlazorWebCSharp.1/Properties/launchSettings.json`, the HTTPS profile only had:\n```json\n\"applicationUrl\": \"https://localhost:5501\"\n```\n\n**Solution:**\nUpdated to include both HTTPS and HTTP URLs for consistency:\n```json\n\"applicationUrl\": \"https://localhost:5501;http://localhost:5500\"\n```\n\nThis matches the pattern used by all other ASP.NET Core templates:\n- StarterWeb: `\"applicationUrl\": \"https://localhost:5001;http://localhost:5000\"`\n- EmptyWeb: `\"applicationUrl\": \"https://localhost:5001;http://localhost:5000\"`\n- WebAPI: `\"applicationUrl\": \"https://localhost:5001;http://localhost:5000\"`\n- GrpcService: `\"applicationUrl\": \"https://localhost:5001;http://localhost:5000\"`\n\nThe LocalhostTld conditional branch was already correct and included both URLs.\n\nFixes #62852.\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💬 Share your feedback on Copilot coding agent for the chance to win a $200 gift card! Click [here](https://survey.alchemer.com/s3/8343779/Copilot-Coding-agent) to start the survey.","Url":"https://github.com/dotnet/aspnetcore/pull/62853","RelatedDescription":"Open PR \"Fix Blazor template HTTPS profile to include HTTP URL\" (#62853)"},{"Id":"3251760513","IsPullRequest":false,"CreatedAt":"2025-07-22T08:53:52","Actor":"javiercn","Number":"62852","RawContent":null,"Title":"[Templates] Https changes broke the application URL for blazor","State":"open","Body":"> https://github.com/dotnet/aspnetcore/blob/main/src/ProjectTemplates/Web.ProjectTemplates/content/BlazorWeb-CSharp/BlazorWebCSharp.1/Properties/launchSettings.json#L12-L16\n> \n> Seems that's the culprit (potentially)\n> \n> @DamianEdwards can you take a look?\n>  \n\nThe issue is that the generated template only contains the HTTP url, not the Http and Https combo\n\nThe relevant commit de4d625c6d170156e07d77a9aa7c7a10a50adab9","Url":"https://github.com/dotnet/aspnetcore/issues/62852","RelatedDescription":"Open issue \"[Templates] Https changes broke the application URL for blazor\" (#62852)"},{"Id":"3251516734","IsPullRequest":false,"CreatedAt":"2025-07-22T07:45:22","Actor":"ilonatommy","Number":"62851","RawContent":null,"Title":"CI template tests are not running with the same sdk version","State":"open","Body":"This problem manifests when updating public API that is used in templates code (e.g. renaming after API review).\nSuch a rename is not possible in one PR. It will cause tests that run in\nhttps://github.com/dotnet/aspnetcore/blob/6ab0f4ef7ecefc2d9d78b025b1a1dfa16e128570/.azure/pipelines/jobs/default-build.yml#L210 pass:.\n```\neng/\\build.cmd -ci -prepareMachine -nativeToolsOnMachine -Configuration Release -all -pack -test -binaryLog /p:SkipHelixReadyTests=true /p:SkipIISNewHandlerTests=true /p:SkipIISTests=true /p:SkipIISExpressTests=true /p:SkipIISNewShimTests=true /p:RunTemplateTests=false /p:RunBlazorPlaywrightTemplateTests=true  /p:DotNetSignType=\n```\nUsing `10.0.100-preview.7.25322.101`:\n```\nGET https://builds.dotnet.microsoft.com/dotnet/scripts/v1/dotnet-install.ps1\n  Attempting to install 'sdk v10.0.100-preview.7.25322.101' from public location.\ndotnet-install: Remote file https://ci.dot.net/public/Sdk/10.0.100-preview.7.25322.101/dotnet-sdk-10.0.100-preview.7.25322.101-win-x64.zip size is 308362401 bytes.\ndotnet-install: Downloaded file https://ci.dot.net/public/Sdk/10.0.100-preview.7.25322.101/dotnet-sdk-10.0.100-preview.7.25322.101-win-x64.zip size is 308362401 bytes.\ndotnet-install: The remote and local file sizes are equal.\ndotnet-install: Extracting the archive.\ndotnet-install: Adding to current process PATH: \"D:\\a\\_work\\1\\s\\.dotnet\\\". Note: This change will not be visible if PowerShell was run as a child process.\ndotnet-install: Note that the script does not ensure your Windows version is supported during the installation.\ndotnet-install: To check the list of supported versions, go to https://learn.microsoft.com/dotnet/core/install/windows#supported-versions\ndotnet-install: Installed version is 10.0.100-preview.7.25322.101\ndotnet-install: Installation finished\n```\n\nPR: https://github.com/dotnet/aspnetcore/pull/62624 before commit that totally removed the public API from the template to enable merging.\n\nAt the same time, tests that run on the same CI in\n\nhttps://github.com/dotnet/aspnetcore/blob/6ab0f4ef7ecefc2d9d78b025b1a1dfa16e128570/.azure/pipelines/ci-public.yml#L660 fail:\n```\nsrc\\ProjectTemplates\\scripts\\MyBlazorApp\\Program.cs(18,51): error CS1739: The best overload for 'UseStatusCodePagesWithReExecute' does not have a parameter named 'createScopeForStatusCodePages'\n```\n\nUsing\n```\nVERBOSE: Copying dotnet folder from D:\\a\\_work\\1\\s\\.dotnet to D:\\a\\_work\\1\\s\\src\\ProjectTemplates\\scripts/.dotnet\nVERBOSE: PATH: \nD:\\a\\_work\\1\\s\\src\\ProjectTemplates\\scripts/.dotnet;D:\\a\\_work\\1\\s\\.dotnet;D:\\a\\_work\\1\\s\\.dotnet\\tools;C:\\ToolCache\\no\nde\\20.19.4\\x64;D:\\a\\_work\\1\\s\\.tools\\ProcDump\\;C:\\vss-agent\\4.258.1\\externals\\git\\cmd;C:\\vss-agent\\4.258.1\\externals\\gi\nt\\mingw64\\bin;C:\\python3\\Scripts\\;C:\\python3\\;C:\\Program Files (x86)\\Microsoft \nSDKs\\Azure\\CLI2\\wbin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\n\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files\\Microsoft SQL Server\\Client \nSDK\\ODBC\\170\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\Program Files (x86)\\Windows \nKits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\Git\\cmd;C:\\Program \nFiles\\PowerShell\\7\\;C:\\Users\\vmadmin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\ninja;C:\\Users\\cloudtest\\AppData\\Local\\Micr\nosoft\\WindowsApps\nVERBOSE: DOTNET_ROOT: D:\\a\\_work\\1\\s\\src\\ProjectTemplates\\scripts/.dotnet\nVERBOSE: Running dotnet --info\n.NET SDK:\n Version:           10.0.100-preview.7.25322.101\n Commit:            67889d9d2f\n Workload version:  10.0.100-manifests.a24b8c3f\n MSBuild version:   17.15.0-preview-25322-101+67889d9d2\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.20348\n OS Platform: Windows\n RID:         win-x64\n Base Path:   D:\\a\\_work\\1\\s\\src\\ProjectTemplates\\scripts\\.dotnet\\sdk\\10.0.100-preview.7.25322.101\\\n\n.NET workloads installed:\n...\n [wasm-tools]\n   Installation Source: VS 17.14.36017.23\n   Manifest Version:    10.0.100-preview.7.25322.101/10.0.100\n   Manifest Path:       D:\\a\\_work\\1\\s\\src\\ProjectTemplates\\scripts\\.dotnet\\sdk-manifests\\10.0.100\\microsoft.net.workload.mono.toolchain.current\\10.0.100-preview.7.25322.101\\WorkloadManifest.json\n   Install Type:        FileBased\n...\nHost:\n  Version:      10.0.0-preview.7.25367.101\n  Architecture: x64\n  Commit:       699b0116eb\n\n.NET SDKs installed:\n  10.0.100-preview.7.25322.101 [D:\\a\\_work\\1\\s\\src\\ProjectTemplates\\scripts\\.dotnet\\sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 10.0.0-dev [D:\\a\\_work\\1\\s\\src\\ProjectTemplates\\scripts\\.dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 10.0.0-preview.7.25322.101 [D:\\a\\_work\\1\\s\\src\\ProjectTemplates\\scripts\\.dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 10.0.0-preview.7.25322.101 [D:\\a\\_work\\1\\s\\src\\ProjectTemplates\\scripts\\.dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 10.0.0-preview.7.25367.101 [D:\\a\\_work\\1\\s\\src\\ProjectTemplates\\scripts\\.dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.WindowsDesktop.App 10.0.0-preview.6.25322.101 [D:\\a\\_work\\1\\s\\src\\ProjectTemplates\\scripts\\.dotnet\\shared\\Microsoft.WindowsDesktop.App]\n```\n\nIf we revert the API rename in templates, it will make the `*Locally.ps1` script pass but it will break the default build:\n```\nProject new blazor  --no-restore -int Server -au None failed to publish. Exit code 1.\\r\\nD:\\a\\_work\\1\\s\\src\\ProjectTemplates\\test\\Templates.Blazor.Tests\\bin\\Release\\net10.0\\TestTemplates\\dotnet\\dotnet.exe publish  -c Release /bl \\nStdErr: \\nStdOut:   Determining projects to restore...\\r\\n  All projects are up-to-date for restore.\\r\\nD:\\a\\_work\\1\\s\\.dotnet\\sdk\\10.0.100-preview.7.25322.101\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(335,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [D:\\a\\_work\\1\\s\\src\\ProjectTemplates\\test\\Templates.Blazor.Tests\\bin\\Release\\net10.0\\TestTemplates\\AspNet.ifa5mla2wcy3\\AspNet.ifa5mla2wcy3.csproj]\\r\\nD:\\a\\_work\\1\\s\\src\\ProjectTemplates\\test\\Templates.Blazor.Tests\\bin\\Release\\net10.0\\TestTemplates\\AspNet.ifa5mla2wcy3\\Program.cs(18,51): error CS1739: The best overload for 'UseStatusCodePagesWithReExecute' does not have a parameter named 'createScopeForErrors' [D:\\a\\_work\\1\\s\\src\\ProjectTemplates\\test\\Templates.Blazor.Tests\\bin\\Release\\net10.0\\TestTemplates\\AspNet.ifa5mla2wcy3\\AspNet.ifa5mla2wcy3.csproj]\\r\\n\n```\n\nPR: https://github.com/dotnet/aspnetcore/pull/62768","Url":"https://github.com/dotnet/aspnetcore/issues/62851","RelatedDescription":"Open issue \"CI template tests are not running with the same sdk version\" (#62851)"},{"Id":"3251444069","IsPullRequest":false,"CreatedAt":"2025-07-22T07:21:49","Actor":"pr-benchmarks[bot]","Number":"62850","RawContent":null,"Title":"Perf regression: fortunes","State":"open","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| fortunes  | Fortunes 8- Trends Database Gold Win | 07/20/2025 06:29:22 | 284,104 | 217,396 | -23.48 % (-66,708)  :thumbsdown:  | -7.31 σ | 9,124.96 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25367.104` -> `10.0.0-preview.7.25368.102`</td>            <td>https://github.com/dotnet/dotnet/compare/8eb9ff11d643a9f03d9a5c0185e0eeb35767707f...46deba7a696a2f4e00270a11c84a5aff2648dd39</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25367.104` -> `10.0.0-preview.7.25368.102`</td>            <td>https://github.com/dotnet/aspnetcore/compare/8eb9ff11d643a9f03d9a5c0185e0eeb35767707f...46deba7a696a2f4e00270a11c84a5aff2648dd39</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25367.104` -> `10.0.0-preview.7.25368.102`</td>            <td>https://github.com/dotnet/runtime/compare/8eb9ff11d643a9f03d9a5c0185e0eeb35767707f...46deba7a696a2f4e00270a11c84a5aff2648dd39</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/62850","RelatedDescription":"Open issue \"Perf regression: fortunes\" (#62850)"},{"Id":"3251444030","IsPullRequest":false,"CreatedAt":"2025-07-22T07:21:48","Actor":"pr-benchmarks[bot]","Number":"62848","RawContent":null,"Title":"Perf improvement: fortunes_ef, fortunes_ef, kestrel-encoded-url","State":"open","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| fortunes_ef  | Fortunes Platform EF 9- Trends Database Amd Lin2 | 07/20/2025 14:40:12 | 360,862 | 371,911 | 3.06 % (11,049)  :thumbsup:  | 4.01 σ | 2,754.72 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25368.102` -> `10.0.0-preview.7.25368.105`</td>            <td>https://github.com/dotnet/dotnet/compare/46deba7a696a2f4e00270a11c84a5aff2648dd39...1c92f346e02a8363def6f7bdbcc526d3c579dd74</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25368.102` -> `10.0.0-preview.7.25368.105`</td>            <td>https://github.com/dotnet/aspnetcore/compare/46deba7a696a2f4e00270a11c84a5aff2648dd39...1c92f346e02a8363def6f7bdbcc526d3c579dd74</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25368.102` -> `10.0.0-preview.7.25368.105`</td>            <td>https://github.com/dotnet/runtime/compare/46deba7a696a2f4e00270a11c84a5aff2648dd39...1c92f346e02a8363def6f7bdbcc526d3c579dd74</td></tr></table></details> |\n| fortunes_ef  | Fortunes EF 9- Trends Database Amd Lin2 | 07/20/2025 14:47:54 | 274,749 | 284,983 | 3.72 % (10,234)  :thumbsup:  | 4.02 σ | 2,544.32 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25368.102` -> `10.0.0-preview.7.25368.105`</td>            <td>https://github.com/dotnet/dotnet/compare/46deba7a696a2f4e00270a11c84a5aff2648dd39...1c92f346e02a8363def6f7bdbcc526d3c579dd74</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25368.102` -> `10.0.0-preview.7.25368.105`</td>            <td>https://github.com/dotnet/aspnetcore/compare/46deba7a696a2f4e00270a11c84a5aff2648dd39...1c92f346e02a8363def6f7bdbcc526d3c579dd74</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25368.102` -> `10.0.0-preview.7.25368.105`</td>            <td>https://github.com/dotnet/runtime/compare/46deba7a696a2f4e00270a11c84a5aff2648dd39...1c92f346e02a8363def6f7bdbcc526d3c579dd74</td></tr></table></details> |\n| kestrel-encoded-url  | Kestrel Linux: Encoded URL symbols 8- Trends Cobalt Cloud Linux AL3 | 07/21/2025 00:40:15 | 3,601 | 4,206 | 0.00 % (605)  :thumbsup:  | 3.17 σ | 190.60 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/62848","RelatedDescription":"Open issue \"Perf improvement: fortunes_ef, fortunes_ef, kestrel-encoded-url\" (#62848)"},{"Id":"3249895752","IsPullRequest":true,"CreatedAt":"2025-07-21T20:09:27","Actor":"github-actions[bot]","Number":"62846","RawContent":null,"Title":"[release/10.0-preview7] [Blazor] Support persisting component state on enhanced navigation","State":"open","Body":"Backport of #62824 to release/10.0-preview7\r\n\r\n/cc @javiercn\r\n\r\n# [Blazor] Support persisting component state on enhanced navigation\r\n\r\nAdds support for restoring data from persistent component state during enhanced navigation requests.\r\n\r\n## Description\r\nCurrently, the persistent state only works during the initial render of components for a given runtime. This limitation exists because the system doesn't recognize enhanced navigations and lacks a mechanism to update the state of already running components. \r\n\r\nThis fix adds a mechanism to opt-in to receive state updates from enhanced navigations coming from the server to running Blazor server and webassembly runtimes.\r\n\r\nFixes #51584\r\n\r\n## Customer Impact\r\n\r\nCustomers experience inconsistent behavior and confusion when using PersistentComponentState with Blazor’s enhanced navigation. \r\n\r\nThey encounter bugs such as double database queries and unpredictable initialization, leading to degraded user experience—especially flickering and repeated API calls instead of preserved state. \r\n\r\nWorkarounds require extra boilerplate, increase page size, and do not scale well for complex scenarios. Some developers avoid enhanced navigation or restructure their applications in less optimal ways to mitigate these issues. \r\n\r\n## Regression?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n## Risk\r\n\r\n- [ ] High\r\n- [ ] Medium\r\n- [X] Low\r\n\r\n[Justify the selection above]\r\n\r\n## Verification\r\n\r\n- [X] Manual (required)\r\n- [X] Automated\r\n\r\n## Packaging changes reviewed?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n- [X] N/A","Url":"https://github.com/dotnet/aspnetcore/pull/62846","RelatedDescription":"Open PR \"[release/10.0-preview7] [Blazor] Support persisting component state on enhanced navigation\" (#62846)"},{"Id":"3249705763","IsPullRequest":true,"CreatedAt":"2025-07-21T18:59:45","Actor":"DeagleGross","Number":"62845","RawContent":null,"Title":"chore: create issue template & workflow to automatically open issue for browser testing dependencies updates (Selenium / Playwright)","State":"open","Body":"The idea is to simplify the process of updating browser testing dependencies. Today engineers do it manually by instructions once per month.\r\n\r\nThe process I am proposing is:\r\n1) There is an issue template with all instructions, so that Copilot can pick this up (even if all automation fails)\r\n2) There is a workflow which runs on the first day of month, and it opens an issue with the same body as in the issue template (unfortunately, there is no way to share them in single file, or i did not find it). Workflow should open an issue and automatically assign copilot to it as per [gh issue create docs](https://cli.github.com/manual/gh_issue_create).\r\n\r\nOpen questions:\r\n1) i was testing it in a fork, and flow works [without `--assignee @copilot`](https://github.com/DeagleGross/aspnetcore/actions/runs/16425076150). \r\n2) with `--assignee @copilot` it does not work with error \"GraphQL: Could not resolve to a User with the login of '@copilot'. (u000)\". I suppose that happens in fork only, and it should work in dotnet/aspnetcore repo\r\n3) should we also add a ping of build-ops / Will?","Url":"https://github.com/dotnet/aspnetcore/pull/62845","RelatedDescription":"Open PR \"chore: create issue template & workflow to automatically open issue for browser testing dependencies updates (Selenium / Playwright)\" (#62845)"},{"Id":"3249571940","IsPullRequest":false,"CreatedAt":"2025-07-21T18:05:04","Actor":"dotnetappdev","Number":"62844","RawContent":null,"Title":"Same issues on a project myself","State":"open","Body":"I am having the exact same issue this user is having in a  project myself was the main issue ever identified\n@FilipRazvan thanks for the additional details.\n> \n> \n> \n> If a plain `ng serve --port 44449` fails to launch the project I'm out of ideas on what it might be going wrong. I would suggest you file an issue in the angular repo as they might be able to assist you in this area much better than we will be able to, since this seems a node issue on the machine/environment \n\n _Originally posted by @javiercn in [#42568](https://github.com/dotnet/aspnetcore/issues/42568#issuecomment-1174881582)_","Url":"https://github.com/dotnet/aspnetcore/issues/62844","RelatedDescription":"Open issue \"Same issues on a project myself\" (#62844)"},{"Id":"3248468866","IsPullRequest":false,"CreatedAt":"2025-07-21T16:43:11","Actor":"adamsitnik","Number":"62839","RawContent":null,"Title":"How to properly implement Server-Sent Events with ASP.NET?","State":"closed","Body":"I am back from the leave and trying to catch up with most recent changes in the A2A project. While doing that, I've focused on exception handling.\n\nI've noticed that `A2AEventStreamResult.A2AEventStreamResult` does not perform any exception handling.\n\nhttps://github.com/a2aproject/a2a-dotnet/blob/47061171e14510b0b9676b2f26095963436ee1e0/src/A2A.AspNetCore/A2AHttpProcessor.cs#L412-L432\n\nSince it was the first time I was using SSE ever, I've asked Copilot about the best practices:\n\n<img width=\"1691\" height=\"1101\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/afb471d3-5fa2-492e-8670-f9f292a1d174\" />\n\nIt has suggested to add a bunch of headers and I can see that some of our repos use it:\n\nhttps://github.com/dotnet/WatsonWebserver/blob/d3d1c5d3f93ea3be6dda3b56a2da2b6977078b2c/src/WatsonWebserver/HttpResponse.cs#L410-L412\n\nhttps://github.com/dotnet/aspnetcore/blob/b5682592eba7fd1086aca0803b7ffbf765f6aa34/src/SignalR/common/Http.Connections/src/Internal/Transports/ServerSentEventsServerTransport.cs#L33-L39\n\n@damianedwards should we also do that? And moreover, should we also ignore `OperationCanceledException` and treat it as end of streaming as suggested by LLM? And emit error and close events as it suggested below?\n\n<img width=\"977\" height=\"1065\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c39717c7-899a-4cd2-80ae-ccf0cef69b6d\" />\n\n@damianedwards I was not able to find any high quality docs about best practices for that which makes it impossible for me to say whether LLM is hallucinating or telling the truth.\n\n","Url":"https://github.com/dotnet/aspnetcore/issues/62839","RelatedDescription":"Closed issue \"How to properly implement Server-Sent Events with ASP.NET?\" (#62839)"},{"Id":"3249052943","IsPullRequest":true,"CreatedAt":"2025-07-21T15:11:52","Actor":"Copilot","Number":"62843","RawContent":null,"Title":"Add CreateScopeForStatusCodePages to Blazor templates","State":"open","Body":"This PR adds `UseStatusCodePagesWithReExecute` with the `createScopeForStatusCodePages` parameter to the Blazor Web template, restoring functionality that was removed in PR #62624 due to CI issues with SDK versions.\n\n## Changes\n\nAdded a single line to the Blazor template's `Program.cs` file:\n\n```csharp\napp.UseStatusCodePagesWithReExecute(\"/Error\", createScopeForStatusCodePages: true);\n```\n\n## Implementation Details\n\n- **Location**: Added in the non-development environment configuration block, after `UseExceptionHandler` and before `UseHsts`\n- **Route**: Uses the existing `/Error` page (same as the exception handler)\n- **Parameter**: Uses the new `createScopeForStatusCodePages: true` parameter name (renamed from the previous parameter)\n- **Middleware Order**: Follows ASP.NET Core pipeline conventions (exception handling → status code pages → security → protocol)\n\n## Verification\n\n- Template builds successfully without compilation errors\n- Only the BlazorWeb server template requires this change (BlazorWeb Client is WebAssembly-only)\n- No other project templates currently use StatusCodePages middleware\n- Change is minimal and surgical (single line addition)\n\nThe implementation enables proper service scope creation for status code page handling in Blazor applications, matching the pattern already used for exception handling with `createScopeForErrors: true`.\n\nFixes #62842.\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💬 Share your feedback on Copilot coding agent for the chance to win a $200 gift card! Click [here](https://survey.alchemer.com/s3/8343779/Copilot-Coding-agent) to start the survey.","Url":"https://github.com/dotnet/aspnetcore/pull/62843","RelatedDescription":"Open PR \"Add CreateScopeForStatusCodePages to Blazor templates\" (#62843)"},{"Id":"3249052688","IsPullRequest":false,"CreatedAt":"2025-07-21T15:11:47","Actor":"ilonatommy","Number":"62842","RawContent":null,"Title":"Add `CreateScopeForStatusCodePages` to blazor templates","State":"open","Body":"In https://github.com/dotnet/aspnetcore/pull/62624 we removed `CreateScopeForStatusCodePages` middleware from the templates when renaming parameter after API review due to problems with 2 sdk versions used in different pieplines in the CI. This PR should add it back, now with the new parameter name (`createScopeForStatusCodePages`).","Url":"https://github.com/dotnet/aspnetcore/issues/62842","RelatedDescription":"Open issue \"Add `CreateScopeForStatusCodePages` to blazor templates\" (#62842)"},{"Id":"3248538788","IsPullRequest":true,"CreatedAt":"2025-07-21T12:48:32","Actor":"dariatiurina","Number":"62840","RawContent":null,"Title":"Fixed race condition in the disposing of the QuickGrid","State":"open","Body":"# Fixed race condition in the disposing of the QuickGrid\r\n\r\n## Description\r\n\r\nThis pull request introduces changes to improve the disposal logic of the `QuickGrid` component and adds new tests to ensure proper handling of race conditions during disposal. It also updates project files to include new test dependencies and internal visibility settings. Below is a summary of the most important changes:\r\n\r\n### Changes: \r\n* Added a `_disposeBool` flag to the `QuickGrid` component to track its disposal state and prevent further operations if disposal is in progress.\r\n* Updated the `DisposeAsync` method to set `_disposeBool` to `true` and ensure proper cleanup of resources. \r\n* Modified the `OnAfterRenderAsync` method to check the `_disposeBool` flag and exit early if the component is being disposed while the JavaScript module is loading. \r\n* Introduced a new test class, `GridRaceConditionTest`, to verify that the `QuickGrid` component can handle race conditions during disposal without errors. This includes simulating JavaScript interop behavior and rendering scenarios.\r\n* Added `InternalsVisibleTo` for `Microsoft.AspNetCore.Components.QuickGrid.Tests` in the `Microsoft.AspNetCore.Components.csproj` file to allow internal access for testing purposes.\r\n* Updated the `Microsoft.AspNetCore.Components.QuickGrid.Tests.csproj` file to include shared test helpers and dependencies for the new tests. \r\n\r\nFixes #47173\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/62840","RelatedDescription":"Open PR \"Fixed race condition in the disposing of the QuickGrid\" (#62840)"}],"ResultType":"GitHubIssue"},"Identity-Issues":{"Issues":[{"Id":"385990535","IsPullRequest":true,"CreatedAt":"2018-12-19T00:12:57","Actor":"grahamehorner","Number":"2087","RawContent":null,"Title":"WIP: IUserTwoFactorTokenProvider token length POC","State":"closed","Body":"This is a WIP idea to support configuration of token length for UserTwoFactorTokenProviders","Url":"https://github.com/aspnet/Identity/pull/2087","RelatedDescription":"Closed or merged PR \"WIP: IUserTwoFactorTokenProvider token length POC\" (#2087)"},{"Id":"385943112","IsPullRequest":true,"CreatedAt":"2018-12-19T00:06:47","Actor":"grahamehorner","Number":"2086","RawContent":null,"Title":"Update Rfc6238AuthenticationService.cs","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2086","RelatedDescription":"Closed or merged PR \"Update Rfc6238AuthenticationService.cs\" (#2086)"},{"Id":"385172059","IsPullRequest":false,"CreatedAt":"2018-12-06T18:36:01","Actor":"ben-foster-rightio","Number":"2084","RawContent":null,"Title":"Random Authentication Sign Outs in ASP.NET Core 2.1","State":"closed","Body":"I'm receiving user complaints saying they are being directed to the login screen randomly when it has only been a minute or so since they clicked a button that would have sent a message to the server side.\r\n\r\nHere is a log of one of the errors.\r\n`[INF] Executed action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" in 1473.4897ms (afa2e885)\r\n[INF] Request finished in 1474.816ms 200 application/json; charset=utf-8 (791a596a)\r\n[INF] Request starting HTTP/1.1 GET http://MyAppmanager.MyApp.co.uk/api/AgreementAPI/GetAgreements?searchTerm=1543309403289   (ca22a1cb)\r\n[INF] Entity Framework Core \"2.1.3-rtm-32065\" initialized '\"IdentityDbContext\"' using provider '\"Microsoft.EntityFrameworkCore.SqlServer\"' with options: \"None\" (9958f5bb)\r\n[INF] Executed DbCommand (\"1\"ms) [Parameters=[\"@__get_Item_0='?' (DbType = Int32)\"], CommandType='Text', CommandTimeout='30']\"\r\n\"\"SELECT TOP(1) [e].[UserId], [e].[AcquisitionTeamId], [e].[AreaNumber], [e].[AuthorisationPassword], [e].[AutoBooking], [e].[AutoUpdateSoftware], [e].[AvayaFullName], [e].[AvayaName], [e].[AvaysExt], [e].[CanSellAgreement], [e].[ChangePassword], [e].[CompanyId], [e].[DateEnded], [e].[DateStarted], [e].[DebugLogs], [e].[DefaultQuotes], [e].[DepartmentId], [e].[EmailAddress], [e].[Forename], [e].[HomeServeEmployee], [e].[Initials], [e].[IsPurchaseOrderReviewer], [e].[JobTitle], [e].[LogonName], [e].[MaxLogins], [e].[Message], [e].[Name], [e].[Notes], [e].[PartTime], [e].[Password], [e].[ReportDDI], [e].[RoleId], [e].[Shift], [e].[ShowEngineerAlert], [e].[Surname], [e].[TerminationId], [e].[TrackFastVersion], [e].[UnreadMessage], [e].[VisibleOnChronicle]\r\nFROM [Users] AS [e]\r\nWHERE [e].[UserId] = @__get_Item_0\" (0723d8ff)\r\n[INF] AuthenticationScheme: \"Identity.Application\" signed out. (d3f50c8d)\r\n[INF] AuthenticationScheme: \"Identity.External\" signed out. (d3f50c8d)\r\n[INF] AuthenticationScheme: \"Identity.TwoFactorUserId\" signed out. (d3f50c8d)\r\n**[INF] \"Identity.Application\" was not authenticated. Failure message: \"No principal.\" (48071232)**\r\n[INF] Route matched with \"{action = \\\"GetAgreements\\\", controller = \\\"AgreementAPI\\\", page = \\\"\\\", area = \\\"\\\"}\". Executing action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" (a44c0341)\r\n[INF] Authorization failed. (b15dd539)\r\n[INF] Authorization failed for the request at filter '\"Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter\"'. (8b6446cb)\r\n[INF] Executing ChallengeResult with authentication schemes ([]). (f3dca807)\r\n[INF] AuthenticationScheme: \"Identity.Application\" was challenged. (d45f1f38)\r\n[INF] Executed action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" in 0.3846ms (afa2e885)\r\n[INF] Request finished in 9.3835ms 401  (791a596a)\r\n[INF] Request starting HTTP/1.1 POST http://MyAppmanager.MyApp.co.uk/API/CustomerAPI/WriteToLog/ application/x-www-form-urlencoded; charset=UTF-8 61 (ca22a1cb)\r\n[INF] Route matched with \"{action = \\\"WriteToLog\\\", controller = \\\"CustomerAPI\\\", page = \\\"\\\", area = \\\"\\\"}\". Executing action \"MyAppManager.Controllers.API.CustomerAPIController.WriteToLog (MyAppManager)\" (a44c0341)\r\n[INF] Executing action method \"MyAppManager.Controllers.API.CustomerAPIController.WriteToLog (MyAppManager)\" with arguments ([\"ERROR: WebAPI call is not authenticated\", \"error\"]) - Validation state: Valid (4e3479ed)\r\n[ERR] Client log: ERROR: WebAPI call is not authenticated (d4244074)\r\n`\r\n\r\n**Startup File**\r\n`public void ConfigureServices(IServiceCollection services)\r\n{\r\n\tservices.AddScoped<IRFDbRepository, RFDbRepository>();\r\n\tvar connection = _configuration.GetConnectionString(\"RFDbConnection\");\r\n\tservices.Configure<ConnectionStrings>(_configuration.GetSection(\"ConnectionStrings\"));\r\n\tservices.AddDbContext<RFDbContext>(options => options.UseSqlServer(connection));\r\n\tservices.AddDbContext<IdentityDbContext>(options => options.UseSqlServer(connection));\r\n\tservices.AddAutoMapper();\r\n\tservices.AddIdentity<User, UserRole>().AddDefaultTokenProviders();\r\n\tservices.AddTransient<IUserStore<User>, UserStore>();\r\n\tservices.AddTransient<IRoleStore<UserRole>, RoleStore>();\r\n\tservices.ConfigureApplicationCookie(options =>\r\n\t{\r\n\t\toptions.LoginPath = \"/Identity/Account/Login\";\r\n\t\toptions.LogoutPath = \"/Identity/Account/Logout\";\r\n\t\toptions.ExpireTimeSpan = TimeSpan.FromMinutes(60);\r\n\t\toptions.SlidingExpiration = true;                \r\n\t});\r\n\tservices.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1).AddRazorPagesOptions(options =>\r\n\t{\r\n\t\toptions.AllowAreas = true;\r\n\t\toptions.Conventions.AuthorizeAreaPage(\"Identity\", \"/Account/Logout\");\r\n\t});\r\n}`\r\n\r\n`public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, IRFDbRepository rFDbRepository)\r\n{\r\n\tloggerFactory.AddFile(_configuration.GetValue<string>(\"Logging:LogFile\"));\r\n\tapp.UseStaticFiles();\r\n\tapp.UseAuthentication();\r\n\tapp.UseMvc(routes =>\r\n\t{\r\n\t\troutes.MapRoute(\r\n\t\t\tname: \"default\",\r\n\t\t\ttemplate: \"{controller=Home}/{action=Index}/{id?}\");\r\n\t\troutes.MapRoute(\r\n\t\t\tname: \"ActionApi\",\r\n\t\t\ttemplate: \"api/{controller}/{action}/{id?}\");\r\n\t});\r\n\trFDbRepository.TestConnection();\r\n}`\r\n\r\nAlso I've setup the app pool as below:\r\n![image](https://user-images.githubusercontent.com/43367982/49141893-8fe42800-f2ef-11e8-8ea3-c79e45ca65a3.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2084","RelatedDescription":"Closed issue \"Random Authentication Sign Outs in ASP.NET Core 2.1\" (#2084)"},{"Id":"387530281","IsPullRequest":true,"CreatedAt":"2018-12-04T23:53:47","Actor":"natemcmaster","Number":"2092","RawContent":null,"Title":"This repo will be archived, project moved to aspnet/AspNetCore","State":"closed","Body":"As a part of https://github.com/aspnet/AspNetCore/issues/3598, this repo will be made read-only soon. The source code and issues will move to https://github.com/aspnet/AspNetCore.","Url":"https://github.com/aspnet/Identity/pull/2092","RelatedDescription":"Closed or merged PR \"This repo will be archived, project moved to aspnet/AspNetCore\" (#2092)"},{"Id":"382432623","IsPullRequest":true,"CreatedAt":"2018-12-04T23:49:57","Actor":"HaoK","Number":"2075","RawContent":null,"Title":"Port retry handler test improvement to 2.1","State":"closed","Body":"Port of similar fix for 2.2 https://github.com/aspnet/Identity/pull/2052","Url":"https://github.com/aspnet/Identity/pull/2075","RelatedDescription":"Closed or merged PR \"Port retry handler test improvement to 2.1\" (#2075)"},{"Id":"387479804","IsPullRequest":false,"CreatedAt":"2018-12-04T21:12:03","Actor":"LosManos","Number":"2091","RawContent":null,"Title":"The non-scaffolded razor page \"Register\" does not recognise Password.RequiredLength.","State":"closed","Body":"### Describe the bug\r\nSetting password length through \r\n```\r\npublic void ConfigureServices(IServiceCollection services){\r\n  ...\r\n  services.Configure<IdentityOptions>(options =>\r\n  {\r\n    options.Password.RequiredLength = 1;\r\n  });\r\n  ...\r\n```\r\ndoes not change the non-scaffolded razor page as it always says \"The Password must be at least 6 and at max 100 characters long.\" if inputed password is < 6 characters.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Create a new ASP.NET Core Web 2.1 application\r\n2. Select \"Web application (Model-View Controller)\" \r\n3. Select \"Change authentication\"\r\n3.1. Select \"Individual User Account\"\r\n4. Select Ok to have the project scaffolded.\r\n5. Open file Startup.cs\r\n6. Add \r\n```\r\nservices.Configure<IdentityOptions>(options =>\r\n{\r\n  options.Password.RequiredLength = 1;\r\n});\r\n```\r\nto method `ConfigureServices`.\r\n7. Press F5 (or select your favourite start-debug method).\r\n8. In the web browser that pops up\r\n8.1. Select Register\r\n8.2. Type \"a@example.com\" as user name (or select your favourite fast-to-type email addresss).\r\n8.3. Type \"a\" as password (or any password shorter than 6 characters).\r\n8.4. Select Register\r\n\r\n### Expected behavior\r\nThe web page should have been updated with information about successful creation of user.\r\n\r\n### Actual behaviour\r\nThe web page says \"The Password must be at least 6 and at max 100 characters long.\"\r\n\r\n### Additional context\r\nI have a question at stack overflow https://stackoverflow.com/questions/53620708/how-do-i-set-password-options-in-aspnet-core-2-1 that explains the same issue if this is not clear enough.\r\n\r\nThis issue might be duplicate of #774.","Url":"https://github.com/aspnet/Identity/issues/2091","RelatedDescription":"Closed issue \"The non-scaffolded razor page \"Register\" does not recognise Password.RequiredLength.\" (#2091)"},{"Id":"386513703","IsPullRequest":false,"CreatedAt":"2018-12-02T00:47:54","Actor":"NinoFloris","Number":"2089","RawContent":null,"Title":"No way to Add a password after creating user, except through Reset","State":"closed","Body":"So we do have RemovePasswordAsync but where's AddPasswordAsync? \r\nWe currently hack around it by using a Reset token we generated before it, but we do really need it for upgrading OAuth/Connect accounts to full accounts.","Url":"https://github.com/aspnet/Identity/issues/2089","RelatedDescription":"Closed issue \"No way to Add a password after creating user, except through Reset\" (#2089)"},{"Id":"385940834","IsPullRequest":false,"CreatedAt":"2018-12-01T01:11:14","Actor":"grahamehorner","Number":"2085","RawContent":null,"Title":"Q: moving of source","State":"closed","Body":"Is the identity repo under the aspnet/aspnetcore like other repos have ? ","Url":"https://github.com/aspnet/Identity/issues/2085","RelatedDescription":"Closed issue \"Q: moving of source\" (#2085)"},{"Id":"386331000","IsPullRequest":true,"CreatedAt":"2018-11-30T20:17:17","Actor":"dougbu","Number":"2088","RawContent":null,"Title":"Remove `SetCompatibiltyVersion(...)` call in sample","State":"closed","Body":"- aspnet/Mvc#7156 2 of ?","Url":"https://github.com/aspnet/Identity/pull/2088","RelatedDescription":"Closed or merged PR \"Remove `SetCompatibiltyVersion(...)` call in sample\" (#2088)"},{"Id":"378822046","IsPullRequest":true,"CreatedAt":"2018-11-29T21:55:44","Actor":"grahamehorner","Number":"2060","RawContent":null,"Title":"Update Rfc6238AuthenticationService.cs","State":"closed","Body":"20bytes is 160bits","Url":"https://github.com/aspnet/Identity/pull/2060","RelatedDescription":"Closed or merged PR \"Update Rfc6238AuthenticationService.cs\" (#2060)"},{"Id":"380746507","IsPullRequest":false,"CreatedAt":"2018-11-29T20:17:46","Actor":"wijnsema","Number":"2067","RawContent":null,"Title":"BypassTowFactor in SignInManager:ExternalLoginSignInAsync should default to False","State":"closed","Body":"As requested by @brockallen in #850 it is now possible to bypass 2FA in case of an external login. \r\n\r\nI'm sure there are good reasons to bypass 2FA, however the current implementation is far to general: \r\n\r\n- All providers all treated equal (some providers might not even support 2FA at all)\r\n- All users all treated equal (users can have 2FA enabled or not)\r\n\r\nThis bypass of 2FA really needs more refinement.\r\n\r\n**What makes this really a problem is the fact that it is enabled in the UI templates!** \r\nAs a developer using the template and enabling 2FA you expect 2FA to work for both local and external login!\r\n\r\nFurthermore, the redirect to the 2FA page is missing, so changing to call to `bypassTwoFactor = false` results in a confusing error that the user already exists.\r\n\r\nIn my opinion the following fragment from ExternalLogin.cshtml.cs\r\n```C#\r\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \r\n      info.ProviderKey, isPersistent: false, bypassTwoFactor: true);\r\nif (result.Succeeded)\r\n{\r\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \r\n      info.Principal.Identity.Name, info.LoginProvider);\r\n   return LocalRedirect(returnUrl);\r\n}\r\n```\r\nshould be replaced with\r\n```C#\r\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \r\n   info.ProviderKey, isPersistent: false, bypassTwoFactor: false);\r\nif (result.Succeeded)\r\n{\r\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \r\n      info.Principal.Identity.Name, info.LoginProvider);\r\n   return LocalRedirect(returnUrl);\r\n}\r\nif (result.RequiresTwoFactor)\r\n{\r\n   return RedirectToPage(\"./LoginWith2fa\", new { ReturnUrl = returnUrl });\r\n}\r\n```\r\nIf you enabled bypassTwoFactor it will still work.\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2067","RelatedDescription":"Closed issue \"BypassTowFactor in SignInManager:ExternalLoginSignInAsync should default to False\" (#2067)"},{"Id":"378006056","IsPullRequest":false,"CreatedAt":"2018-11-29T20:04:09","Actor":"blowdart","Number":"2058","RawContent":null,"Title":"Survey: Your experience using Identity UI and customization","State":"closed","Body":"We're taking a survey about how your experiences using ASP.NET Core Identity, and specifically Identity UI as a package.\r\n\r\nPlease give us your feedback, and, if you're willing, you might get a phone call to talk about your experiences in detail.\r\n\r\nhttps://microsoft.qualtrics.com/jfe/form/SV_3mTmFYDZAQutZMF ","Url":"https://github.com/aspnet/Identity/issues/2058","RelatedDescription":"Closed issue \"Survey: Your experience using Identity UI and customization\" (#2058)"},{"Id":"384918165","IsPullRequest":false,"CreatedAt":"2018-11-29T04:38:32","Actor":"OphiCA","Number":"2082","RawContent":null,"Title":"No sign-out authentication handler is registered for the scheme 'Identity.External'","State":"closed","Body":"Hello,\r\n\r\nFor several months now I've been trying to solve an issue with Identity, where 30-min on the dot after signing in, I am greeted by an `Invalid Operation Exception`:\r\n\r\n> InvalidOperationException: No sign-out authentication handler is registered for the scheme 'Identity.External'. The registered sign-out schemes are: Identity.Application. Did you forget to call AddAuthentication().AddCookies(\"Identity.External\",...)?\r\n\r\nSince it was on my blog site, I didn't put too much effort into it, even though it was an annoyance. Now, I'm looking into possibly some real world client work where I'd like to use ASP.NET Core with Identity, but I can't be having this same issue.\r\n\r\nCould someone please tell me why this exception throws? I don't want to use external schemes, so why is it trying to sign out of one? When did it sign into one?\r\n\r\nHere's the relevant code from my app, hopefully someone can point me in the right direction because I sure as heck can't.\r\n\r\n**Startup.cs**\r\n\r\n\tpublic sealed class Startup {\r\n\t\tpublic void ConfigureServices(\r\n\t\t\tIServiceCollection services) {\r\n\t\t\t//...\r\n\t\t\tservices.AddApplicationIdentity();\r\n\t\t\t//...\r\n\t\t\tservices.ConfigureApplicationCookie(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Cookie.SameSite = SameSiteMode.Strict;\r\n\t\t\t\t\to.Cookie.SecurePolicy = CookieSecurePolicy.Always;\r\n\r\n\t\t\t\t\to.AccessDeniedPath = new PathString(\"/admin\");\r\n\t\t\t\t\to.ExpireTimeSpan = TimeSpan.FromHours(4);\r\n\t\t\t\t\to.LoginPath = new PathString(\"/admin\");\r\n\t\t\t\t\to.LogoutPath = new PathString(\"/admin/sign-out\");\r\n\t\t\t\t});\r\n\t\t\tservices.Configure<IdentityOptions>(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Password.RequiredLength = 8;\r\n\r\n\t\t\t\t\to.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);\r\n\t\t\t\t\to.Lockout.MaxFailedAccessAttempts = 5;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic void Configure(\r\n\t\t\tIApplicationBuilder app) {\r\n\t\t\t//...\r\n\t\t\tapp.UseAuthentication();\r\n\t\t\t//...\r\n\t\t}\r\n\t}\r\n\r\n**ServiceCollectionExtensions**\r\n\r\n\tpublic static class ServiceCollectionExtensions {\r\n\t\tpublic static IdentityBuilder AddApplicationIdentity(\r\n\t\t\tthis IServiceCollection services) {\r\n\t\t\tservices.AddAuthentication(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.DefaultAuthenticateScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t\to.DefaultChallengeScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t\to.DefaultSignInScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t}).AddCookie(IdentityConstants.ApplicationScheme,\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Events = new CookieAuthenticationEvents {\r\n\t\t\t\t\t\tOnValidatePrincipal = SecurityStampValidator.ValidatePrincipalAsync\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\tservices.TryAddScoped<IdentityErrorDescriber>();\r\n\t\t\tservices.TryAddScoped<ILookupNormalizer, UpperInvariantLookupNormalizer>();\r\n\t\t\tservices.TryAddScoped<IPasswordHasher<User>, PasswordHasher<User>>();\r\n\t\t\tservices.TryAddScoped<IPasswordValidator<User>, PasswordValidator<User>>();\r\n\t\t\tservices.TryAddScoped<IUserClaimsPrincipalFactory<User>, UserClaimsPrincipalFactory<User>>();\r\n\t\t\tservices.TryAddScoped<UserManager<User>>();\r\n\t\t\tservices.TryAddScoped<IUserStore<User>, ApplicationUserStore>();\r\n\t\t\tservices.TryAddScoped<IUserValidator<User>, UserValidator<User>>();\r\n\t\t\tservices.TryAddScoped<ISecurityStampValidator, SecurityStampValidator<User>>();\r\n\t\t\tservices.TryAddScoped<SignInManager<User>>();\r\n\r\n\t\t\treturn new IdentityBuilder(typeof(User), services);\r\n\t\t}\r\n\t}\r\n\r\nI'm not going to include the `ApplicationUserStore` because I highly doubt it has anything to do with the exception. I'd appreciate any help because I am just struggling at this point. Thanks!","Url":"https://github.com/aspnet/Identity/issues/2082","RelatedDescription":"Closed issue \"No sign-out authentication handler is registered for the scheme 'Identity.External'\" (#2082)"},{"Id":"383003537","IsPullRequest":false,"CreatedAt":"2018-11-22T13:29:00","Actor":"LindaLawton","Number":"2079","RawContent":null,"Title":"Remember me isPersistent understanding","State":"closed","Body":"This is more of a question but its not enough of a question that i could post it up on stack overflow without risking it just getting closed as primary opinion based or to broad.   So i am going to put it here in hopes of getting an answer.\r\n\r\nThe issue is the understanding of how remember me is supposed to work.    My problem is that its not doing what we would expect it to do.   \r\n\r\nManagement expects when a user logs in and clicks remember me that they will then not be required to type their login and password again for a month.  Whether or not they will still have to type in the 2fa code is up for debate.\r\n\r\nWhat is actually happening is that i can close the browser reboot and come back for about an hour and 15 minutes and then i will be forced to type my password again.    This still happens even with a valid `.AspNetCore.Identity.Application` cookie set that is not due to expire for another month.\r\n\r\nAfter digging around in the code i found that Remember me is actually isPersistent and it is defined as.\r\n\r\n>Flag indicating whether the sign-in cookie should persist after the browser is closed.\r\n\r\nWhich brings you to:\r\n\r\nThere are two different types of Cookies:\r\n\r\n- session cookies, held in memory, and which expire once the browser exits\r\n- persistent cookies, which have a time-to-live, are persisted on disk, and are sent by the browser until their time-to-live has elapsed.\r\n\r\nAll this being said remember machine 2fa works as expected i am not prompted again for the 2fa and i have a cookie on my machine `Identity.TwoFactorRememberMe`.\r\n\r\nSo I guess my question is why are we not getting a `Identity.FactorRememberMe` or why isn't sign in respecting a long life time of the `AspNetCore.Identity.Application` cookie?\r\n\r\nHow is this supposed to work exactly?   I am following the code here even though we have normal MVC and not razor pages like you have in the example.  I am still just calling \r\n\r\n>var signInUserResult = await _signInManager.PasswordSignInAsync(userName, password, rememberMe, true);\r\n\r\nNote: I am using Asp .net Identity in Identity server 4 application.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2079","RelatedDescription":"Closed issue \"Remember me isPersistent understanding\" (#2079)"},{"Id":"383297898","IsPullRequest":false,"CreatedAt":"2018-11-21T22:08:40","Actor":"mmillican","Number":"2080","RawContent":null,"Title":"Replace a Role Validator","State":"closed","Body":"I am trying to create a custom role validator to support pseudo-multi-tenancy (which I know is not _officially_ supported in Identity) and am running into some issues.\r\n\r\nI've verified that my validator does work and is being called. However, the default validator appears to be called also. \r\n\r\nHere's my Identity service registration\r\n```\r\nservices.AddIdentity<User, Role>(setup =>\r\n    {\r\n        // Redacted settings\r\n    })\r\n    .AddRoleValidator<CustomRoleValidator<Role>>()\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders();\r\n```\r\n\r\nHow can I _remove_ the default RoleValidator?","Url":"https://github.com/aspnet/Identity/issues/2080","RelatedDescription":"Closed issue \"Replace a Role Validator\" (#2080)"},{"Id":"382890054","IsPullRequest":true,"CreatedAt":"2018-11-20T23:38:12","Actor":"dotnet-maestro-bot","Number":"2078","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\ngit checkout master\r\ngit merge --no-ff merge/release/2.2-to-master\r\ngit push origin master\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.2-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2078","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2078)"},{"Id":"382876972","IsPullRequest":true,"CreatedAt":"2018-11-20T23:38:12","Actor":"javiercn","Number":"2076","RawContent":null,"Title":"Update to IdentityServer 2.3.0","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2076","RelatedDescription":"Closed or merged PR \"Update to IdentityServer 2.3.0\" (#2076)"},{"Id":"382885320","IsPullRequest":true,"CreatedAt":"2018-11-20T23:19:15","Actor":"javiercn","Number":"2077","RawContent":null,"Title":"Update Identity Server dependencies to 2.3.0","State":"closed","Body":"This updates things on non-shipping product code, so it's ok to update (I asked).","Url":"https://github.com/aspnet/Identity/pull/2077","RelatedDescription":"Closed or merged PR \"Update Identity Server dependencies to 2.3.0\" (#2077)"},{"Id":"382068763","IsPullRequest":false,"CreatedAt":"2018-11-19T12:16:11","Actor":"wpqs","Number":"2074","RawContent":null,"Title":"Login doesn't show registered social logins after error","State":"closed","Body":"I'm using ASPNET Core 2.1 with Razor Pages UI Library and noticed that whilst registered social logins appear when I open the Login page, they disappear after an error like incorrect password.\r\n\r\nThere seems to be a bug in Identity\\Pages\\Account\\Login.cshtml.cs as \r\n````\r\n public IList<AuthenticationScheme> ExternalLogins { get; set; }\r\n\r\n````\r\nis only initialised in OnGetAsync(), but if an error happens OnPostAsync() then Page() is returned so OnGetAsyn() doesn't get called. Changing error handling in  OnPostAsync() so RedirectToPage() is returned seems to fix the problem.\r\n\r\nPlease confirm this is a bug and comment on my fix","Url":"https://github.com/aspnet/Identity/issues/2074","RelatedDescription":"Closed issue \"Login doesn't show registered social logins after error\" (#2074)"},{"Id":"381789469","IsPullRequest":true,"CreatedAt":"2018-11-17T00:27:58","Actor":"natemcmaster","Number":"2072","RawContent":null,"Title":"Upgrade projects to netcoreapp3.0","State":"closed","Body":"Changes:\r\n\r\n* Upgrade dependencies\r\n* Change TFM on Microsoft.AspNetCore.Identity to netcoreapp3.0\r\n* Remove .NET Framework tests\r\n\r\nPart of https://github.com/aspnet/AspNetCore/issues/3754","Url":"https://github.com/aspnet/Identity/pull/2072","RelatedDescription":"Closed or merged PR \"Upgrade projects to netcoreapp3.0\" (#2072)"},{"Id":"380931030","IsPullRequest":true,"CreatedAt":"2018-11-14T23:29:46","Actor":"pranavkm","Number":"2070","RawContent":null,"Title":"Use 3.0 configuration in RCLs","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2070","RelatedDescription":"Closed or merged PR \"Use 3.0 configuration in RCLs\" (#2070)"},{"Id":"378005714","IsPullRequest":false,"CreatedAt":"2018-11-14T21:00:55","Actor":"papyr","Number":"2057","RawContent":null,"Title":"AD directory user-groups; can IdentityRole be subclassed to implement Role-Groups or User-Groups","State":"closed","Body":"There is a disconnect with Active Directory, since we don't have support for User Groups in Identity, how can we implement or mirror this functionality inside ASP identity","Url":"https://github.com/aspnet/Identity/issues/2057","RelatedDescription":"Closed issue \"AD directory user-groups; can IdentityRole be subclassed to implement Role-Groups or User-Groups\" (#2057)"},{"Id":"380198930","IsPullRequest":false,"CreatedAt":"2018-11-14T17:33:59","Actor":"blankenbush","Number":"2065","RawContent":null,"Title":"Spelling error DeletePersonalData.cshtml.cs ","State":"closed","Body":"The word \"deleteing\" is wrong.  It should be \"deleting\" on line: 111; DeletePersonalData.cshtml.cs.\r\n\r\nAlso found in comment on line 183; SqlStoreTestBase.cs\r\n\r\n![capture](https://user-images.githubusercontent.com/187785/48412982-33401500-e714-11e8-903b-6e2fcc8e0a6a.PNG)\r\n","Url":"https://github.com/aspnet/Identity/issues/2065","RelatedDescription":"Closed issue \"Spelling error DeletePersonalData.cshtml.cs \" (#2065)"},{"Id":"380389829","IsPullRequest":true,"CreatedAt":"2018-11-14T17:33:01","Actor":"blankenbush","Number":"2066","RawContent":null,"Title":"Fix typo","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2066","RelatedDescription":"Closed or merged PR \"Fix typo\" (#2066)"},{"Id":"377364575","IsPullRequest":false,"CreatedAt":"2018-11-09T11:16:05","Actor":"yetanotherchris","Number":"2056","RawContent":null,"Title":"Should IdentityUser be in the EntityFramework namespace?","State":"closed","Body":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.entityframeworkcore.identityuser?view=aspnetcore-1.1\r\n\r\nI'm looking through various implementations from the [readme](https://github.com/aspnet/Identity/blob/master/README.md) and I've noticed they all use `IdentityUser ` for their concrete type to pass to `UserManager`, or have had to craft a custom type to be able to have a contract between the database and the .NET AspNetIdentity implentation they've written (see the DynamoDB library).\r\n\r\nI've had to do this too for the [Marten implementation I've written](https://github.com/yetanotherchris/Marten.AspNetIdentity), and the reason is, a `TUser` that your `UserStore` takes, should really be an interface - it will always have an email, most likely an Id of some sort, firstname, lastname and then a bag of properties.\r\n\r\nThings become even more abstract when dealing with claims.\r\n\r\nIf everyone is using `IdentityUser` or their own custom `TUser` doesn't this defeat the purpose of AspnetIdentity - which is to be able to switch and change implementations easily? That isn't possible if your consumer is tightly coupled with a `TUser` implementation of the library.\r\n\r\n### Example `TUser` implementations\r\n\r\n- [MongoIdentityUser](https://github.com/tugberkugurlu/AspNetCore.Identity.MongoDB/blob/master/src/AspNetCore.Identity.MongoDB/MongoIdentityUser.cs)\r\n- [DynamoIdentityUser](https://github.com/miltador/AspNetCore.Identity.DynamoDB/blob/master/src/AspNetCore.Identity.DynamoDB/DynamoIdentityUser.cs)\r\n- [Redis uses `IdentityUser<string>`](https://github.com/aguacongas/Identity.Redis/blob/develop/src/Aguacongas.Identity.Redis/UserStore.cs)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2056","RelatedDescription":"Closed issue \"Should IdentityUser be in the EntityFramework namespace?\" (#2056)"},{"Id":"376980171","IsPullRequest":true,"CreatedAt":"2018-11-02T21:57:29","Actor":"dotnet-maestro-bot","Number":"2055","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\ngit checkout master\r\ngit merge --no-ff merge/release/2.2-to-master\r\ngit push origin master\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.2-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2055","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2055)"},{"Id":"376978591","IsPullRequest":true,"CreatedAt":"2018-11-02T21:57:26","Actor":"javiercn","Number":"2054","RawContent":null,"Title":"Fixes integrity validation in Identity UI V3","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2054","RelatedDescription":"Closed or merged PR \"Fixes integrity validation in Identity UI V3\" (#2054)"},{"Id":"376977750","IsPullRequest":false,"CreatedAt":"2018-11-02T21:48:32","Actor":"javiercn","Number":"2053","RawContent":null,"Title":"Fix integrity tags on Identity UI V3","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/issues/2053","RelatedDescription":"Closed issue \"Fix integrity tags on Identity UI V3\" (#2053)"},{"Id":"376973581","IsPullRequest":true,"CreatedAt":"2018-11-02T21:48:08","Actor":"javiercn","Number":"2052","RawContent":null,"Title":"Fixes integrity validation hashes for Identity UI V3","State":"closed","Body":"Fixes https://github.com/aspnet/Identity/issues/2053","Url":"https://github.com/aspnet/Identity/pull/2052","RelatedDescription":"Closed or merged PR \"Fixes integrity validation hashes for Identity UI V3\" (#2052)"},{"Id":"376607709","IsPullRequest":false,"CreatedAt":"2018-11-01T23:29:51","Actor":"ycrumeyrolle","Number":"2051","RawContent":null,"Title":"[Question] Passwords should not be of type String ?","State":"closed","Body":"My security team escalated to me that the `PasswordHasher` is vulnerable to heap inspection, as the password is of type `String`. \r\nIt should be instead a byte array / span of bytes cleared at the end of the process, as it is done by any cryptographic operation in corefx. CC @bartonjs.\r\nSame problem with any password related types (`IPasswordValidator`, and maybe also the `IUserPasswordStore`)","Url":"https://github.com/aspnet/Identity/issues/2051","RelatedDescription":"Closed issue \"[Question] Passwords should not be of type String ?\" (#2051)"}],"ResultType":"GitHubIssue"},"Tooling-Issues":{"Issues":[{"Id":"597492854","IsPullRequest":true,"CreatedAt":"2020-04-09T19:44:41","Actor":"terrajobst","Number":"1097","RawContent":null,"Title":"Link Code of Conduct","State":"closed","Body":"See [this policy rule](https://github.com/dotnet/org-policy/blob/master/doc/PR15.md) for more details.","Url":"https://github.com/aspnet/Tooling/pull/1097","RelatedDescription":"Closed or merged PR \"Link Code of Conduct\" (#1097)"},{"Id":"585801568","IsPullRequest":false,"CreatedAt":"2020-03-22T20:10:12","Actor":"GaryFurash","Number":"1096","RawContent":null,"Title":"Creating Edit View with Non EFModel","State":"open","Body":"Using latest ASP.NET Core with latest Nuget on Visual Studio 2019 windows 10 pro.\r\n\r\nIf I try to create an Edit view based on a view model that isn't configured in the DB context (e.g., it's a model that doesn't map to a DB table in EF), even after adding the [Key] annotation I get the error:\r\n\r\n'The entity type 'RoleEdit' requires a primary key to be defined. If you intended to use a keyless entity type call 'HasNoKey()'.'\r\n\r\nI can't use HasNoKey since the model entity isn't in the context since it isn't a real table.\r\n","Url":"https://github.com/aspnet/Tooling/issues/1096","RelatedDescription":"Open issue \"Creating Edit View with Non EFModel\" (#1096)"},{"Id":"576654849","IsPullRequest":true,"CreatedAt":"2020-03-06T02:27:01","Actor":"mairaw","Number":"1095","RawContent":null,"Title":"Update link to a more proper target","State":"open","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1095","RelatedDescription":"Open PR \"Update link to a more proper target\" (#1095)"},{"Id":"499940912","IsPullRequest":false,"CreatedAt":"2019-09-28T16:33:15","Actor":"genifycom","Number":"1094","RawContent":null,"Title":"Add Razor Page using Entity Framework (CRUD)","State":"open","Body":"<!-- Describe what isn't working as expected -->\r\nWhen I right click on Pages and Add Razor page. I select Razor Pages using Entity Framework (CRUD). I select my Model class and my Data Context class and press Add.\r\n\r\nI expect to give the Razor page a name. But a Dialog pops up and says\r\n\r\nAdd Razor Page(s)\r\n\r\nThe following file(s) already exist:\r\n\r\nIndex\r\nIndex.cshtml.cs\r\n\r\nDo you want to replace them?\r\n---------------------------\r\nYes   No   \r\n---------------------------\r\n\r\nI do not expect that adding a Razor page will replace Index. I expect to create a NEW razor page with a new name. Saying No here does not allow one to continue.\r\n\r\n### Steps to reproduce\r\nAs above\r\n\r\nWe ❤ code! Include a complete code listing or attach a simplified project\r\n\r\nCreate a new ASP.NET Core Web Application. Use ASP.NET Core 3.0 and \"Web Application\".\r\nCreate a model class (Customer with int ID and string Name).\r\nAdd Razor Page using EF and CRUD.\r\nSelect Model class and add context class.\r\nClick Add\r\n\r\n### Further technical details\r\n\r\nEF Core version: 3.0\r\nDatabase provider: (e.g. Microsoft.EntityFrameworkCore.SqlServer)\r\nTarget framework: (e.g. .NET Core 3.0)\r\nOperating system: Windows 10\r\nIDE: (e.g. Visual Studio 2019 16.3) Visual Studio 2019 16.3.1\r\n","Url":"https://github.com/aspnet/Tooling/issues/1094","RelatedDescription":"Open issue \"Add Razor Page using Entity Framework (CRUD)\" (#1094)"},{"Id":"480473543","IsPullRequest":false,"CreatedAt":"2019-08-14T04:21:20","Actor":"AlseinX","Number":"1093","RawContent":null,"Title":"`dotnet new -i` does not work any more in preview8","State":"open","Body":"`dotnet new -i Microsoft.AspNetCore.Blazor.Templates::3.0.0-preview8.19405.7`\r\n\r\nResults:\r\n\r\n```\r\n用法: new [选项]\r\n\r\n选项:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --dry-run           Displays a summary of what would happen if the given command line were run if it would result in a template creation.\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n  --update-check      Check the currently installed template packs for updates.\r\n  --update-apply      Check the currently installed template packs for update, and install the updates.\r\n\r\n\r\nTemplates                                         Short Name               Language          Tags\r\n----------------------------------------------------------------------------------------------------------------------------------\r\nConsole Application                               console                  [C#], F#, VB      Common/Console\r\nClass library                                     classlib                 [C#], F#, VB      Common/Library\r\nWPF Application                                   wpf                      [C#], VB          Common/WPF\r\nWPF Class library                                 wpflib                   [C#], VB          Common/WPF\r\nWPF Custom Control Library                        wpfcustomcontrollib      [C#], VB          Common/WPF\r\nWPF User Control Library                          wpfusercontrollib        [C#], VB          Common/WPF\r\nWindows Forms (WinForms) Application              winforms                 [C#], VB          Common/WinForms\r\nWindows Forms (WinForms) Class library            winformslib              [C#], VB          Common/WinForms\r\nWorker Service                                    worker                   [C#]              Common/Worker/Web\r\nUnit Test Project                                 mstest                   [C#], F#, VB      Test/MSTest\r\nNUnit 3 Test Project                              nunit                    [C#], F#, VB      Test/NUnit\r\nNUnit 3 Test Item                                 nunit-test               [C#], F#, VB      Test/NUnit\r\nxUnit Test Project                                xunit                    [C#], F#, VB      Test/xUnit\r\nRazor Component                                   razorcomponent           [C#]              Web/ASP.NET\r\nRazor Page                                        page                     [C#]              Web/ASP.NET\r\nMVC ViewImports                                   viewimports              [C#]              Web/ASP.NET\r\nMVC ViewStart                                     viewstart                [C#]              Web/ASP.NET\r\nBlazor Server App                                 blazorserver             [C#]              Web/Blazor\r\nASP.NET Core Empty                                web                      [C#], F#          Web/Empty\r\nASP.NET Core Web App (Model-View-Controller)      mvc                      [C#], F#          Web/MVC\r\nASP.NET Core Web App                              webapp                   [C#]              Web/MVC/Razor Pages\r\nASP.NET Core with Angular                         angular                  [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js                        react                    [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js and Redux              reactredux               [C#]              Web/MVC/SPA\r\nRazor Class Library                               razorclasslib            [C#]              Web/Razor/Library/Razor Class Library\r\nASP.NET Core Web API                              webapi                   [C#], F#          Web/WebAPI\r\nASP.NET Core gRPC Service                         grpc                     [C#]              Web/gRPC\r\ndotnet gitignore file                             gitignore                                  Config\r\nglobal.json file                                  globaljson                                 Config\r\nNuGet Config                                      nugetconfig                                Config\r\nDotnet local tool manifest file                   tool-manifest                              Config\r\nWeb Config                                        webconfig                                  Config\r\nSolution File                                     sln                                        Solution\r\nProtocol Buffer File                              proto                                      Web/gRPC\r\n\r\nExamples:\r\n    dotnet new mvc --auth Individual\r\n    dotnet new wpfcustomcontrollib\r\n    dotnet new --help\r\n\r\n```\r\n\r\nRunning `dotnet new -i aaa::bbb` results the same.","Url":"https://github.com/aspnet/Tooling/issues/1093","RelatedDescription":"Open issue \"`dotnet new -i` does not work any more in preview8\" (#1093)"},{"Id":"477192366","IsPullRequest":true,"CreatedAt":"2019-08-06T06:25:26","Actor":"SuperChenSSS","Number":"1092","RawContent":null,"Title":"Point \"Set up DNS name for the VM\" link to the right direction","State":"open","Body":"The \"Set up DNS name for the VM\" link is incorrect and can't see the content. Change it to the right direction.","Url":"https://github.com/aspnet/Tooling/pull/1092","RelatedDescription":"Open PR \"Point \"Set up DNS name for the VM\" link to the right direction\" (#1092)"},{"Id":"477188104","IsPullRequest":true,"CreatedAt":"2019-08-06T06:24:35","Actor":"SuperChenSSS","Number":"1091","RawContent":null,"Title":"Point \"Set up DNS name for the VM\" link to the right direction","State":"closed","Body":"The \"Set up DNS name for the VM\" link is incorrect and can't see the content. Change it to the right direction.","Url":"https://github.com/aspnet/Tooling/pull/1091","RelatedDescription":"Closed or merged PR \"Point \"Set up DNS name for the VM\" link to the right direction\" (#1091)"},{"Id":"476745373","IsPullRequest":false,"CreatedAt":"2019-08-05T09:15:18","Actor":"juniormayhe","Number":"1090","RawContent":null,"Title":"Cannot start a webapi on specific SSL port managed by IISExpress","State":"open","Body":"A brand new netcore webapi 2.2 is created. \r\n\r\nCurrent launch settings:\r\n```\r\n{\r\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:62813\",\r\n      \"sslPort\": 44396\r\n    }\r\n  },\r\n```\r\n\r\nAfter setting the SSL port to anything such as 11000, application won't get started on IIS Express, but the same app runs correctly on port 11000 after being published to local IIS (https://localhost:11000).\r\n\r\nThe only way to start it on IIS Express is to keep 443 prefix (i.e. 44300, 44301, etc). \r\n\r\nIs this restriction by design as stated [here](https://developercommunity.visualstudio.com/content/problem/39430/changing-port-number-in-a-web-project-does-not-imm.html?childToView=43139#comment-43139)?\r\n\r\n\"You can change that value to whatever you want.\" definitely is not working as stated here: https://github.com/aspnet/Tooling/issues/286\r\n\r\n```\r\n- Visual Studio 2019 16.1.6\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-012264\r\n Commit:    be3f0c1a03\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27804-01\r\n  Commit:  fdf81c6faf\r\n\r\n.NET Core SDKs installed:\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800-preview-009696 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010219 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012264 [C:\\Program Files\\dotnet\\sdk]\r\n```","Url":"https://github.com/aspnet/Tooling/issues/1090","RelatedDescription":"Open issue \"Cannot start a webapi on specific SSL port managed by IISExpress\" (#1090)"},{"Id":"465641918","IsPullRequest":false,"CreatedAt":"2019-07-09T08:26:34","Actor":"plachor","Number":"1089","RawContent":null,"Title":"LaunchSettings are not respected by Test Runner","State":"open","Body":"In latest Visual Studio 2019, Test Runner ignores `environmentVariables` configuration which would allow for instance configuration of `ASPNETCORE_ENVIRONMENT`.\r\n\r\nThis would be beneficial for integration tests that in local environment use different appsettings (non-production).\r\n\r\nFor instance I would like to define following launchSettings.json:\r\n```json\r\n{\r\n  \"profiles\": {\r\n    \"SomeFancyNamespace.ProjectName.Integration.Tests\": {\r\n      \"commandName\": \"Project\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThere was an related issue that was closed: https://github.com/aspnet/Tooling/issues/456 ","Url":"https://github.com/aspnet/Tooling/issues/1089","RelatedDescription":"Open issue \"LaunchSettings are not respected by Test Runner\" (#1089)"},{"Id":"447378907","IsPullRequest":true,"CreatedAt":"2019-05-22T23:02:06","Actor":"Rick-Anderson","Number":"1088","RawContent":null,"Title":"Update dotnet-core-3.0-preview1.md","State":"open","Body":"MS Style guide violations and other clean up. Less is more.","Url":"https://github.com/aspnet/Tooling/pull/1088","RelatedDescription":"Open PR \"Update dotnet-core-3.0-preview1.md\" (#1088)"},{"Id":"433911513","IsPullRequest":true,"CreatedAt":"2019-04-16T17:57:10","Actor":"Rick-Anderson","Number":"1087","RawContent":null,"Title":"Update known-issues-vs2017.md","State":"open","Body":"Use Visual Studio Installer to install the missing Visual Studio component \".NET Core 1.0 - 1.1 developer tools for Web\" from the **Individual components** tab.","Url":"https://github.com/aspnet/Tooling/pull/1087","RelatedDescription":"Open PR \"Update known-issues-vs2017.md\" (#1087)"},{"Id":"430834286","IsPullRequest":false,"CreatedAt":"2019-04-09T17:36:29","Actor":"Ashishks1987","Number":"1086","RawContent":null,"Title":"System.Collections.Immutable dll being replace by Microsoft.Net.Compilers","State":"closed","Body":"I have referenced `system.collections.immutable.dll` from the nuget package and I also have the nuget package installed for `Microsoft.Net.Compilers`. Everything works fine in my local but when I push my code to bamboo, in the runtime I get `Could not load file or assembly 'System.Collections.Immutable, Version=1.2.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)`\r\n\r\nWhen I checked logs on bamboo when it generates the artifacts, I can see that initially it copied the correct dll here:\r\n\r\n`build    04-Apr-2019 03:20:33      Copying file from \"E:\\agt01\\ENS-EB580-JOB1\\Bin\\Packages\\System.Collections.Immutable.1.5.0\\lib\\netstandard1.0\\System.Collections.Immutable.dll\" to \"E:\\agt01\\ENS-EB580-JOB1\\Binaries\\Release\\\\temp\\Web\\_PublishedWebsites\\MyService\\bin\\System.Collections.Immutable.dll\"`.\r\n\r\nbut then at some point, it replaced this dll with this: `build    04-Apr-2019 03:20:33      Copying file from \"E:\\agt01\\ENS-EB580-JOB1\\Bin\\Packages\\Microsoft.Net.Compilers.1.0.0\\tools\\System.Collections.Immutable.dll\" to \"E:\\agt01\\ENS-EB580-JOB1\\Binaries\\Release\\\\temp\\Web\\_PublishedWebsites\\MyService\\bin\\System.Collections.Immutable.dll\".`\r\n\r\nHow can I make sure that bamboo does not replace this dll and just uses it from the nuget package installed?","Url":"https://github.com/aspnet/Tooling/issues/1086","RelatedDescription":"Closed issue \"System.Collections.Immutable dll being replace by Microsoft.Net.Compilers\" (#1086)"},{"Id":"422330835","IsPullRequest":false,"CreatedAt":"2019-03-18T17:00:12","Actor":"vikasNew","Number":"1085","RawContent":null,"Title":"web deploy on windows 10","State":"open","Body":"Hello,\r\n\r\ncan i publish my code by using web deploy to windows 10 machine.\r\n\r\ni have setup my testing windows 10 machine for deployment, which is in local area network.\r\n\r\nSo i want to publish my code to that remote machine by using web deploy. can i do that ?\r\n\r\ni have installed web deploy and also enabled web development remote service on windows 10 but i am not able to connect to remote machine using we deploy.\r\n\r\nThis returns me the following error every-time.\r\n\"ERROR_DESTINATION_NOT_REACHABLE\"\r\n\r\ninteresting thing is i also have windows 10 on my machine & i am able to use web deploy on my local machine but it's not working with remote windows 10 machine.\r\n\r\nis web deploy only meant for Windows servers not for other normal windows?\r\n\r\nThanks \r\n","Url":"https://github.com/aspnet/Tooling/issues/1085","RelatedDescription":"Open issue \"web deploy on windows 10\" (#1085)"},{"Id":"398036850","IsPullRequest":false,"CreatedAt":"2019-01-15T05:32:59","Actor":"chrgraefe","Number":"1084","RawContent":null,"Title":"Can't add area on ASP.NET Core MVC project","State":"closed","Body":"### Describe the bug\r\nA clear and concise description of what the bug is.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using this version of ASP.NET Core '3.0.100-preview-009812'\r\n2. New ASP.NET Core MVC project in VS2019 Preview\r\n3. Can't add area\r\n\r\n### Expected behavior\r\nA dialog to type area name\r\n","Url":"https://github.com/aspnet/Tooling/issues/1084","RelatedDescription":"Closed issue \"Can't add area on ASP.NET Core MVC project\" (#1084)"},{"Id":"391209971","IsPullRequest":false,"CreatedAt":"2018-12-14T18:00:59","Actor":"sai-manoj-kumar","Number":"1080","RawContent":null,"Title":"The template to create an ASP .NET VM is not working","State":"open","Body":"[The template given here](https://github.com/aspnet/Tooling/blob/AspNetVMs/docs/create-asp-net-vm-with-webdeploy.md#PowerShellScript) doesn't work. It gives the error SkuNotAvailable. Can someone please fix it?","Url":"https://github.com/aspnet/Tooling/issues/1080","RelatedDescription":"Open issue \"The template to create an ASP .NET VM is not working\" (#1080)"},{"Id":"385928083","IsPullRequest":false,"CreatedAt":"2018-12-07T20:30:45","Actor":"sinand","Number":"1079","RawContent":null,"Title":"auto build on browser request not working","State":"closed","Body":"I am using community edition 15.9.3 since  the previous update this feature is not working, everytime I have to build project.","Url":"https://github.com/aspnet/Tooling/issues/1079","RelatedDescription":"Closed issue \"auto build on browser request not working\" (#1079)"},{"Id":"383440110","IsPullRequest":false,"CreatedAt":"2018-11-26T19:03:29","Actor":"eriawan","Number":"1078","RawContent":null,"Title":"Feedback: ensure that .NET Core 1.0/1.1 tooling only supported in VS 2017 and won't be supported in VS 2019","State":"closed","Body":"Apologize if my feedback may sound controversial or may spark a debate.\r\n\r\nI need to be sure that the problem mentioned on this [page](https://github.com/aspnet/Tooling/blob/master/known-issues-vs2017.md#to-create-aspnet-core-10--11-projects-install-visual-studios-net-core-10---11-developer-tools-for-web-component) about .NET Core 1.0/1.1 tooling is installed when creating new ASP.NET Core 1.0/1.1 project should not happen or should not be supported in VS 2019.\r\n\r\nThese are my main concerns:\r\n\r\n1. VS 2019 is about to be released in around early 2019\r\n2. ASP.NET Core 1.0/1.1 is not going to be supported anymore, based on [this page](https://github.com/dotnet/core/blob/master/microsoft-support.md).\r\n3. Creating new ASP.NET Core 1.0/1.1 will always install the .NET Core 1.0/1.1 web tooling, and this is not necessary when previous reason has reached the unsupported period and it's quite near or might be the same time of VS 2019 release.\r\n4. Based on the problem mentioned above, VS 2017 has no \"built in\" tooling when creating new ASP.NET Core 1.0/1.1 project, but the external tooling may help. Therefore for those that still need to maintain ASP.NET Core 1.0/1.1 projects, we could use VS 2017 as long as the VS 2017 is still in support lifecycle or in mainstream support lifecycle.\r\n\r\nI welcome feedback 🙂 \r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1078","RelatedDescription":"Closed issue \"Feedback: ensure that .NET Core 1.0/1.1 tooling only supported in VS 2017 and won't be supported in VS 2019\" (#1078)"},{"Id":"349649932","IsPullRequest":true,"CreatedAt":"2018-08-10T20:38:21","Actor":"AndrewBrianHall","Number":"1077","RawContent":null,"Title":"Adding a .net core -> vs mapping table","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1077","RelatedDescription":"Closed or merged PR \"Adding a .net core -> vs mapping table\" (#1077)"},{"Id":"333613195","IsPullRequest":false,"CreatedAt":"2018-06-27T12:59:29","Actor":"Liero","Number":"1076","RawContent":null,"Title":"Unable to publish when using Microsoft.NET.Sdk.Razor","State":"closed","Body":"After I upgraded my solution from asp.net core 2.0 to 2.1, I'm not able to publish my web app from Visual Studio, although it can build.\r\n\r\nDuring the upgrade I've changed SDK in one of my class libraries to **Microsoft.NET.Sdk.Razor**, but now I'm getting a lot of errors and if project references were not recognized in this library when publishing.\r\n\r\n```\r\nConnecting to C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\publish\\...\r\nMyProject.Web -> C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\MyProject.Web.dll\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;RELEASE;NETCOREAPP;NETCOREAPP2_1 /errorendlocation /preferreduilang:en-US /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization.policy\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.Policy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.internal\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cryptography.Internal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.server.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.html.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Html.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.jsonpatch\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.JsonPatch.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.apiexplorer\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.dataannotations\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.json\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.viewfeatures\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.language\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Language.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.runtime\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.webutilities\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.WebUtilities.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.CodeAnalysis.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.dotnet.platformabstractions\\2.1.0\\lib\\netstandard1.3\\Microsoft.DotNet.PlatformAbstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Relational.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.SqlServer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Binder.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netcoreapp2.0\\Microsoft.Extensions.DependencyInjection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencymodel\\2.1.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.composite\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Composite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.filesystemglobbing\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileSystemGlobbing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.objectpool\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.ObjectPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Options.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.webencoders\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.WebEncoders.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.net.http.headers\\2.1.0\\lib\\netstandard2.0\\Microsoft.Net.Http.Headers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.VisualBasic.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.Win32.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.win32.registry\\4.5.0\\ref\\netstandard2.0\\Microsoft.Win32.Registry.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\mscorlib.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\netstandard.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json.bson\\1.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.Bson.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json\\11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\remotion.linq\\2.2.0\\lib\\netstandard1.0\\Remotion.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.AppContext.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Buffers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Concurrent.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Immutable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.NonGeneric.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Specialized.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Annotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.EventBasedAsync.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.TypeConverter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Console.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.Common.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.data.sqlclient\\4.5.0\\ref\\netcoreapp2.1\\System.Data.SqlClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Contracts.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Debug.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.DiagnosticSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.FileVersionInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Process.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.StackTrace.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TextWriterTraceListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tools.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TraceSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tracing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Dynamic.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Calendars.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.Brotli.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.ZipFile.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.DriveInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Watcher.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.IsolatedStorage.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.MemoryMappedFiles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Pipes.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.UnmanagedMemoryStream.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Expressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Queryable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.HttpListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Mail.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NameResolution.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NetworkInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Ping.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Requests.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.ServicePoint.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Sockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebHeaderCollection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.Client.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.Vectors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ObjectModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.DispatchProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.ILGeneration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.Lightweight.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.TypeExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Reader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.ResourceManager.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Writer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.CompilerServices.VisualC.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Handles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.RuntimeInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.WindowsRuntime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Loader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Formatters.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\ref\\netstandard2.0\\System.Security.AccessControl.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Claims.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Algorithms.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Csp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.X509Certificates.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.cryptography.xml\\4.5.0\\ref\\netstandard2.0\\System.Security.Cryptography.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.permissions\\4.5.0\\ref\\netstandard2.0\\System.Security.Permissions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Principal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.5.0\\ref\\netstandard2.0\\System.Security.Principal.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.SecureString.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceModel.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceProcess.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encodings.web\\4.5.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.RegularExpressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Overlapped.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Dataflow.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Thread.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.ThreadPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Timer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.Local.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ValueTuple.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.HttpUtility.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.ReaderWriter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlSerializer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\WindowsBase.dll\" /debug- /debug:portable /filealign:512 /optimize+ /out:obj\\Release\\netcoreapp2.1\\MyProject.Mail.dll /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:library /warnaserror- /utf8output /deterministic+ /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.CSharp.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.analyzers\\2.1.0\\analyzers\\dotnet\\cs\\Microsoft.EntityFrameworkCore.Analyzers.dll\" EmailDefaults.cs EmailOptions.cs MailSender.cs NotificationService.cs RazorViewToStringRenderer.cs \"C:\\Users\\daniel.turan\\AppData\\Local\\Temp\\.NETCoreApp,Version=v2.1.AssemblyAttributes.cs\" obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\\Release\\netcoreapp2.1\\\\Tem\tporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.RazorAssemblyInfo.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.AssemblyInfo.cs /warnaserror+:NU1605\r\nNotificationService.cs(15,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\nNotificationService.cs(16,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\n...\r\n```\r\n\r\nAlso, see https://stackoverflow.com/questions/50926116/publish-failed-when-using-microsoft-net-sdk-razor-if-reference-was-not-recognize for more details","Url":"https://github.com/aspnet/Tooling/issues/1076","RelatedDescription":"Closed issue \"Unable to publish when using Microsoft.NET.Sdk.Razor\" (#1076)"},{"Id":"329605262","IsPullRequest":false,"CreatedAt":"2018-06-05T20:05:23","Actor":"AngelosP","Number":"1075","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of dotnet-aspnet-codegenerator","State":"open","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","Url":"https://github.com/aspnet/Tooling/issues/1075","RelatedDescription":"Open issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of dotnet-aspnet-codegenerator\" (#1075)"},{"Id":"328747170","IsPullRequest":false,"CreatedAt":"2018-06-02T14:10:13","Actor":"AceHack","Number":"1074","RawContent":null,"Title":"Docker in launchSettings.json","State":"open","Body":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image.","Url":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Open issue \"Docker in launchSettings.json\" (#1074)"},{"Id":"328082529","IsPullRequest":true,"CreatedAt":"2018-06-01T17:41:04","Actor":"federicorinaldi","Number":"1073","RawContent":null,"Title":"Update dotnet-core-2.1.md","State":"closed","Body":"Visual Studio 2017 15.7 has been released now so this document is outdated","Url":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Closed or merged PR \"Update dotnet-core-2.1.md\" (#1073)"},{"Id":"323850872","IsPullRequest":false,"CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Number":"1072","RawContent":null,"Title":"can not upload file FTPS. ","State":"closed","Body":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072)"},{"Id":"317494886","IsPullRequest":false,"CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Number":"1071","RawContent":null,"Title":" Unable to start debugging","State":"open","Body":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Open issue \" Unable to start debugging\" (#1071)"},{"Id":"316585462","IsPullRequest":false,"CreatedAt":"2018-04-24T05:17:55","Actor":"rberger247","Number":"1070","RawContent":null,"Title":"Visual studio freezes when I run add-migration ","State":"closed","Body":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger.","Url":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070)"},{"Id":"308764422","IsPullRequest":false,"CreatedAt":"2018-03-27T05:23:09","Actor":"dvdobrovolskiy","Number":"1069","RawContent":null,"Title":"EntityFramework migrations not available to be applied during publish","State":"closed","Body":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc","Url":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069)"},{"Id":"304770827","IsPullRequest":false,"CreatedAt":"2018-03-14T05:33:19","Actor":"ghost","Number":"1068","RawContent":null,"Title":"Switch between Razor Page View and Code Behind","State":"closed","Body":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n","Url":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068)"},{"Id":"304312342","IsPullRequest":false,"CreatedAt":"2018-03-13T05:33:42","Actor":"RehanSaeed","Number":"1067","RawContent":null,"Title":"Support dotnet watch in launchSettings.json","State":"closed","Body":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine.","Url":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067)"},{"Id":"300865938","IsPullRequest":false,"CreatedAt":"2018-02-28T06:01:18","Actor":"rjamesnw","Number":"1066","RawContent":null,"Title":"Nesting bug","State":"closed","Body":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file.","Url":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066)"},{"Id":"290854647","IsPullRequest":false,"CreatedAt":"2018-01-24T01:14:53","Actor":"NeerajaRagesh","Number":"1065","RawContent":null,"Title":"Issue with Sales discount App - Odoo 9","State":"closed","Body":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n","Url":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"3244334287","IsPullRequest":false,"CreatedAt":"2025-07-18T20:43:18","Actor":"captainsafia","Number":"520","RawContent":null,"Title":"[Breaking change]: Deprecation of IActionContextAccessor","State":"open","Body":"# Description\n\n`IActionContextAccessor` and `ActionContextAccessor` have been marked as obsolete in ASP.NET Core with diagnostic ID `ASPDEPR006`. With the introduction of endpoint routing, `IActionContextAccessor` is no longer necessary as developers can access action descriptor and metadata information directly through `HttpContext.GetEndpoint()`.\n\n# Version\n\n.NET 10 Preview 7\n\n# Previous behavior\n\nDevelopers could use `IActionContextAccessor` to access the current `ActionContext`:\n\n```csharp\npublic class MyService\n{\n   private readonly IActionContextAccessor _actionContextAccessor;\n   \n   public MyService(IActionContextAccessor actionContextAccessor)\n   {\n       _actionContextAccessor = actionContextAccessor;\n   }\n   \n   public void DoSomething()\n   {\n       var actionContext = _actionContextAccessor.ActionContext;\n       var actionDescriptor = actionContext?.ActionDescriptor;\n       // Use action descriptor metadata\n   }\n}\n```\n\n# New behavior\n\nUsing `IActionContextAccessor` and `ActionContextAccessor` will produce a compiler warning with diagnostic ID `ASPDEPR006`:\n\n```\nwarning ASPDEPR006: ActionContextAccessor is obsolete and will be removed in a future version. For more information, visit https://aka.ms/aspnet/deprecate/006.\n```\n\n# Type of breaking change\n\n- **Source incompatible**: When recompiled using the new SDK, existing source code will receive obsolete warnings and may require source changes for future compatibility.\n- **Behavioral change**: The functionality still works but is marked for future removal.\n\n# Reason for change\n\nWith the introduction of endpoint routing in ASP.NET Core, `IActionContextAccessor` is no longer necessary. The endpoint routing infrastructure provides a cleaner, more direct way to access endpoint metadata through `HttpContext.GetEndpoint()`, aligning with ASP.NET Core's architectural evolution toward endpoint routing.\n\n# Recommended action\n\nMigrate from `IActionContextAccessor` to `IHttpContextAccessor` and use `HttpContext.GetEndpoint()`:\n\n**Before:**\n```csharp\npublic class MyService\n{\n   private readonly IActionContextAccessor _actionContextAccessor;\n   \n   public MyService(IActionContextAccessor actionContextAccessor)\n   {\n       _actionContextAccessor = actionContextAccessor;\n   }\n   \n   public void DoSomething()\n   {\n       var actionContext = _actionContextAccessor.ActionContext;\n       var actionDescriptor = actionContext?.ActionDescriptor;\n       // Use action descriptor metadata\n   }\n}\n```\n\n**After:**\n```csharp\npublic class MyService\n{\n   private readonly IHttpContextAccessor _httpContextAccessor;\n   \n   public MyService(IHttpContextAccessor httpContextAccessor)\n   {\n       _httpContextAccessor = httpContextAccessor;\n   }\n   \n   public void DoSomething()\n   {\n       var httpContext = _httpContextAccessor.HttpContext;\n       var endpoint = httpContext?.GetEndpoint();\n       var actionDescriptor = endpoint?.Metadata.GetMetadata<ActionDescriptor>();\n       // Use action descriptor metadata\n   }\n}\n```\n\n# Affected APIs\n\n- `Microsoft.AspNetCore.Mvc.Infrastructure.IActionContextAccessor`\n- `Microsoft.AspNetCore.Mvc.Infrastructure.ActionContextAccessor`","Url":"https://github.com/aspnet/Announcements/issues/520","RelatedDescription":"Open issue \"[Breaking change]: Deprecation of IActionContextAccessor\" (#520)"},{"Id":"3240228074","IsPullRequest":false,"CreatedAt":"2025-07-17T16:43:05","Actor":"captainsafia","Number":"519","RawContent":null,"Title":"[Breaking change]: Deprecation of `WithOpenApi` extension method","State":"open","Body":"### Description\n\nThe `WithOpenApi` extension methods in **`Microsoft.AspNetCore.OpenApi.OpenApiEndpointConventionBuilderExtensions`** have been **deprecated**. Invoking these methods now produces the compile-time diagnostic **ASPDEPR002** and a standard `[Obsolete]` warning stating that *“WithOpenApi is deprecated and will be removed in a future release. For more information, visit https://aka.ms/aspnet/deprecate/002.”*\n\n### Version  \n.NET 10 Preview 7\n\n### Previous behavior\n\n```csharp\napp.MapGet(\"/weather\", () => ...)\n   .WithOpenApi();   // no warnings\n```\n\n### New behavior\n\n```csharp\napp.MapGet(\"/weather\", () => ..)\n   .WithOpenApi();   // warning ASPDEPR002: WithOpenApi is deprecated …\n```\n\nThe call still compiles and executes, but the build now emits the new deprecation warning.\n\n### Type of breaking change\n\n- [ ] Binary incompatible  \n- [ ] Source incompatible  \n- [x] Behavioral change (new compiler warning)\n\n### Reason for change\n\n`WithOpenApi` duplicated functionality now provided by the built-in OpenAPI document generation pipeline. Deprecating it simplifies the API surface and prepares for its eventual removal.\n\n### Recommended action\n\nRemove `.WithOpenApi()` calls in the code.\n\n- If using `Microsoft.AspNetCore.OpenApi` for document generation, use with `AddOpenApiOperationTransformer` extension method.\n\n**Before**\n\n```csharp\nusing Microsoft.AspNetCore.OpenApi;\n\nvar builder = WebApplication.CreateBuilder();\nvar app = builder.Build();\n\napp.MapGet(\"/weather\", () => ..)\n   .WithOpenApi(operation =>\n   {\n       // Per-endpoint tweaks\n       operation.Summary     = \"Gets the current weather report.\";\n       operation.Description = \"Returns a short description and emoji.\";\n       return operation;\n   });\n\napp.Run();\n```\n\n**After**\n\n```csharp\nusing Microsoft.AspNetCore.OpenApi;\n\nvar builder = WebApplication.CreateBuilder();\nvar app = builder.Build();\n\napp.MapGet(\"/weather\", () => ..)\n   .AddOpenApiOperationTransformer((opperation, context, ct) =>\n   {\n       // Per-endpoint tweaks\n       operation.Summary     = \"Gets the current weather report.\";\n       operation.Description = \"Returns a short description and emoji.\";\n       return Task.CompleteTask;\n   });\n\napp.Run();\n```\n\n- If using `Swashbuckle` for document generation, use the `IOperationFilter` API.\n- If using `NSwag` for document generation, use the `IOperationProcessor` API.\n\n### Affected APIs\n\n- `TBuilder OpenApiEndpointConventionBuilderExtensions.WithOpenApi<TBuilder>(this TBuilder builder)`  \n- `TBuilder OpenApiEndpointConventionBuilderExtensions.WithOpenApi<TBuilder>(this TBuilder builder, Func<OpenApiOperation, OpenApiOperation> configureOperation)`  \n  (all overloads)","Url":"https://github.com/aspnet/Announcements/issues/519","RelatedDescription":"Open issue \"[Breaking change]: Deprecation of `WithOpenApi` extension method\" (#519)"},{"Id":"3217437297","IsPullRequest":false,"CreatedAt":"2025-07-09T23:46:12","Actor":"captainsafia","Number":"518","RawContent":null,"Title":"[Breaking change]: Deprecation of Microsoft.Extensions.ApiDescription.Client package","State":"open","Body":"### Description\n\nThe **Microsoft.Extensions.ApiDescription.Client** NuGet package has been **deprecated** starting in **.NET 10 Preview 7**.  The package supplied MSBuild targets and CLI support (e.g., `dotnet openapi`, the `OpenApiReference` item group, and `OpenApiProjectReference` property) that generated OpenAPI-based client code during the build. Projects that reference the package will now receive a warning during build.\n\n### Version\n\n.NET 10 Preview 7\n\n### Previous behavior\n\nProjects could add `<PackageReference Include=\"Microsoft.Extensions.ApiDescription.Client\" … />` and  `<OpenApiReference>` (or run `dotnet openapi`) to generate strongly-typed clients at build time.\n\n### New behavior\n\n 1. **Remove** any `<PackageReference Include=\"Microsoft.Extensions.ApiDescription.Client\" … />` from your project.  \n        2. Replace `<OpenApiReference>` items or `dotnet openapi` commands with generator-specific tooling:  \n           * **NSwag** – use `npx nswag` or `dotnet tool run nswag` with an `.nswag` config file.  \n           * **Kiota** – install with `dotnet tool install -g Microsoft.OpenApi.Kiota` and run `kiota generate`.  \n           * **OpenAPI Generator** – invoke `openapi-generator-cli` via JAR or Docker.  \n        3. Commit the generated client code or run generation in a custom pre-build step that does not rely on the removed package.\n    validations:\n      required: true\n\n  - type: textarea\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [x] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\n * The package has seen minimal updates and maintenance since its introduction.  \n* Its abstractions were tightly coupled to certain generators and did not scale well to others.\n* Each generator now ships its own CLI/configuration experience, making the MSBuild middle-layer redundant.  \n* Removing the package reduces maintenance burden and clarifies the recommended workflow for client generation.\n\n### Recommended action\n\n 1. **Remove** any `<PackageReference Include=\"Microsoft.Extensions.ApiDescription.Client\" … />` from your project.  \n2. Replace `<OpenApiReference>` items or `dotnet openapi` commands with generator-specific tooling:  \n * **NSwag** – use `npx nswag` or `dotnet tool run nswag` with an `.nswag` config file.  \n * **Kiota** – install with `dotnet tool install -g Microsoft.OpenApi.Kiota` and run `kiota generate`.  \n  * **OpenAPI Generator** – invoke `openapi-generator-cli` via JAR or Docker. \n\n### Affected APIs\n\n* NuGet package **Microsoft.Extensions.ApiDescription.Client**  \n* MSBuild item **`OpenApiReference`** (all instances)  \n* MSBuild property **`OpenApiProjectReference`**  \n* CLI command **`dotnet openapi`**","Url":"https://github.com/aspnet/Announcements/issues/518","RelatedDescription":"Open issue \"[Breaking change]: Deprecation of Microsoft.Extensions.ApiDescription.Client package\" (#518)"},{"Id":"3196976210","IsPullRequest":false,"CreatedAt":"2025-07-02T19:32:34","Actor":"BrennanConroy","Number":"517","RawContent":null,"Title":"[Breaking change]: Forwarded Headers Middleware Now Ignores X-Forwarded-* Headers from Unknown Proxies","State":"open","Body":"### Description\n\nStarting in ASP.NET Core 8.0.17 and 9.0.6, the Forwarded Headers Middleware will ignore all `X-Forwarded-*` headers from proxies that are not explicitly configured as trusted.\n\n### Version\n\n.NET 8\n\n### Previous behavior\n\nPreviously, the middleware, when not configured to use `X-Forwarded-For`, would process `X-Forwarded-Prefix`, `X-Forwarded-Proto`, and `X-Forwarded-Host` headers from any source, potentially allowing malicious or misconfigured proxies/clients to spoof these headers and affect your application's understanding of client information.\n\n### New behavior\n\nWith this change, only headers sent by known, trusted proxies (as configured via `ForwardedHeadersOptions.KnownProxies` and `ForwardedHeadersOptions.KnownNetworks`) will be processed. Headers from unknown sources will be ignored.\n\n**This is a breaking change**: If your deployment relied on forwarded headers from proxies not configured in your application's trusted proxy list, those headers will no longer be honored.\n\nThis can cause behavior like infinite redirects if you're using the Https redirection middleware and using TLS termination in your proxy. Or authentication to fail if using TLS termination and expecting an https request.\n\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [x] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThe change was made for security hardening, as the proxy and IP lists weren't being applied in all cases.\n\n### Recommended action\n\n- **Review your deployment topology:**  \n  Ensure that all legitimate proxy servers in front of your app are properly added to `KnownProxies` or `KnownNetworks` in your `ForwardedHeadersOptions` configuration.\n  ```csharp\n  app.UseForwardedHeaders(new ForwardedHeadersOptions\n  {\n      KnownProxies = { IPAddress.Parse(\"YOUR_PROXY_IP\") }\n  });\n  ```\n  Or, for a network:\n  ```csharp\n  app.UseForwardedHeaders(new ForwardedHeadersOptions\n  {\n      KnownNetworks = { new IPNetwork(IPAddress.Parse(\"YOUR_NETWORK_IP\"), PREFIX_LENGTH) }\n  });\n  ```\n\n- **If you wish to enable previous behavior:**  \n  You may need to relax your configuration, but this is **not recommended** due to security risks. You can do this by clearing the `KnownNetworks` and `KnownProxies` lists in `ForwardedHeadersOptions` to allow any proxy or network to forward these headers.\n\nYou can also set the `ASPNETCORE_FORWARDEDHEADERS_ENABLED` environment variable to true, which clears the lists and enables `ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto`.\n\nNote: In cloud environments, the proxy IP(s) can change over the lifetime of the app and `ASPNETCORE_FORWARDEDHEADERS_ENABLED` is sometimes used to make forwarded headers work.\n\n### References\n\n- [Forwarded Headers Middleware documentation](https://learn.microsoft.com/aspnet/core/host-and-deploy/proxy-load-balancer)\n\n### Affected APIs\n\n`UseForwardedHeaders();`","Url":"https://github.com/aspnet/Announcements/issues/517","RelatedDescription":"Open issue \"[Breaking change]: Forwarded Headers Middleware Now Ignores X-Forwarded-* Headers from Unknown Proxies\" (#517)"},{"Id":"2662868601","IsPullRequest":false,"CreatedAt":"2024-11-15T18:59:39","Actor":"maraf","Number":"516","RawContent":null,"Title":"[Breaking change]: Legacy Mono and Emscripten JavaScript APIs are not exported to global namespace in Blazor WebAssembly applications","State":"open","Body":"### Description\n\nIn previous versions of Blazor WebAssembly, legacy Mono and Emscripten APIs were exported to global namespace. \r\nFrom 9.0 those APIs are accessible throught Blazor.runtime object.\n\n### Version\n\n.NET 9 GA\n\n### Previous behavior\n\nLegacy Mono (MONO, BINDING) and Emscripten Module object was exported to global window object.\r\nFor example `window.Module.FS` returned emscripten virtual filesystem.\n\n### New behavior\n\nEmscripten Module object is now exported to `Blazor.runtime` object.\r\nFor example `Blazor.runtime.Module.FS` returns emscripten virtual filesystem.\r\nLegacy Mono API for interop was removed completely (MONO and BINDING) and replaced with JSImport/JSExport.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThe general goal is not to polute global namespace and keep all the APIs accessible from single Blazor object.\n\n### Recommended action\n\nReplace accessing Emscripten APIs from window object to Blazor.runtime object.\n\n### Affected APIs\n\nwindow.MONO.*\r\nwindow.BINDING.*\r\nwindow.Module.*","Url":"https://github.com/aspnet/Announcements/issues/516","RelatedDescription":"Open issue \"[Breaking change]: Legacy Mono and Emscripten JavaScript APIs are not exported to global namespace in Blazor WebAssembly applications\" (#516)"},{"Id":"2606573022","IsPullRequest":false,"CreatedAt":"2024-10-22T21:39:01","Actor":"amcasey","Number":"515","RawContent":null,"Title":"[Breaking change]: dev cert export no longer creates folder","State":"open","Body":"### Description\n\nWhen you export the ASP.NET Core development certificate (used to enable https in local development), it will no longer create the directory into which the certificate is being exported, if that directory doesn’t already exist.\r\n\r\nThis change first appears in 8.0.10 and 9.0 RC1.\n\n### Version\n\n.NET 8 GA\n\n### Previous behavior\n\n```\r\ndotnet dev-certs https -ep C:\\NonExistent\\cert.pfx\r\n```\r\n\r\nIf `C:\\NonExistent\\` did not exist when the command was run, it would be created (with permissions inherited from the containing directory).\n\n### New behavior\n\nThe target directory must exist or the export will fail with a message like `There was an error exporting the HTTPS developer certificate to a file.`\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThe development certificate is exported with its private key, so unauthorized access can be very problematic.  It may, nevertheless, be necessary to make it readable to multiple accounts - e.g. if the consuming process will not be run as the current user.  Rather than attempting to determine (and securely establish) permissions for the target directory, `dotnet dev-certs` require that it already exist.\n\n### Recommended action\n\nCreate the target directory (with appropriate permissions) before invoking `dotnet dev-certs`.\n\n### Affected APIs\n\nThis functionality is not presently exposed via an API - it is invoked from the command line.","Url":"https://github.com/aspnet/Announcements/issues/515","RelatedDescription":"Open issue \"[Breaking change]: dev cert export no longer creates folder\" (#515)"},{"Id":"2603358974","IsPullRequest":false,"CreatedAt":"2024-10-21T18:34:48","Actor":"amcasey","Number":"514","RawContent":null,"Title":"[Breaking change]: Handling of middleware types with multiple constructors","State":"open","Body":"### Description\n\nFormerly, when a middleware type with multiple satisfiable constructors was instantiated from the dependency injection container, the one with the most parameters would be used.  Now that only happens if the dependency injection container implements [`IServiceProviderIsService`](https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.iserviceproviderisservice).\n\n### Version\n\n.NET 9 RC 1\n\n### Previous behavior\n\nFormerly, the first constructor was preferred (when both were satisfied) because it has more parameters.\r\n\r\n```csharp\r\npublic class CookiePolicyMiddleware\r\n{\r\n    public CookiePolicyMiddleware(RequestDelegate next, IOptions<CookiePolicyOptions> options, ILoggerFactory factory)\r\n    {\r\n        // Omitted for brevity\r\n    }\r\n\r\n    public CookiePolicyMiddleware(RequestDelegate next, IOptions<CookiePolicyOptions> options)\r\n    {\r\n        // Omitted for brevity\r\n    }\r\n}\r\n```\n\n### New behavior\n\nNow, neither constructor is preferred and construction fails with an error like \r\n```\r\nSystem.InvalidOperationException: 'Multiple constructors accepting all given argument types have been found in type 'Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware'. There should only be one applicable constructor.'\r\n```\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThe activation mechanism was [changed](https://github.com/dotnet/aspnetcore/pull/55722) to help support keyed dependency injection.\n\n### Recommended action\n\nIf this happens and you can't upgrade to a dependency injection container that implements `IServiceProviderIsService`, you can add `ActivatorUtilitiesConstructorAttribute` to the preferred constructor of the affected middleware type.\n\n### Affected APIs\n\nThis is [known](https://github.com/dotnet/aspnetcore/issues/57231) to cause errors when instantiating `Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware` with [Autofac.Extensions.DependencyInjection](https://www.nuget.org/packages/Autofac.Extensions.DependencyInjection) 7.x.","Url":"https://github.com/aspnet/Announcements/issues/514","RelatedDescription":"Open issue \"[Breaking change]: Handling of middleware types with multiple constructors\" (#514)"},{"Id":"2518176374","IsPullRequest":true,"CreatedAt":"2024-09-12T23:00:13","Actor":"terrajobst","Number":"513","RawContent":null,"Title":"Add SECURITY.md","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/513","RelatedDescription":"Closed or merged PR \"Add SECURITY.md\" (#513)"},{"Id":"2180295666","IsPullRequest":false,"CreatedAt":"2024-03-11T21:34:47","Actor":"amcasey","Number":"512","RawContent":null,"Title":"[Breaking change]: DefaultKeyResolution.ShouldGenerateNewKey has a slightly altered meaning","State":"open","Body":"### Description\r\n\r\n`DefaultKeyResolution.ShouldGenerateNewKey` no longer reflects whether the default key is close to its expiration time.\r\n\r\n### Version\r\n\r\n.NET 9 Preview 3\r\n\r\n### Previous behavior\r\n\r\nIt was an undocumented, but consistent, feature of the API that `ShouldGenerateNewKey` would be true if the default key was within two days (an over-simplification) of its expiration time.  The amount of lead time was based on the polling interval of `ICacheableKeyRingProvider`, which was not something `IDefaultKeyResolver.ResolveDefaultKeyPolicy` should have depended upon (since, for example, alternative implementations would probably not be aware of these details).\r\n\r\n### New behavior\r\n\r\nIf `ShouldGenerateNewKey` is true, it now indicates that either there is no default key or that for some other policy reason (i.e. in a specialized implementation of `IDefaultKeyResolver`, a new key should be generated.  The `ICacheableKeyRingProvider` will make its own decision about whether the expiration time is close enough to warrant generating a new key.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nFirst, we wanted to change the logic around key generation near expiration time and, second, this makes it more straightforward to implement a custom `IDefaultKeyResolver`.\r\n\r\nNote that the documentation for this type already states that \"This API supports infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases.\"\r\n\r\n### Recommended action\r\n\r\nIf you have an `IDefaultKeyResolver` implementation that tries to replicate the expiry logic, that logic can be removed (however, leaving it is fine as well).\r\n\r\nIf you were consuming `IDefaultKeyResolver` directly, for the express purpose of determining whether expiration was pending and that continues to be important, you can the default key's `ExpirationDate` property directly.\r\n\r\n### Affected APIs\r\n\r\nMicrosoft.AspNetCore.DataProtection.KeyManagement.Internal.DefaultKeyResolution.ShouldGenerateNewKey","Url":"https://github.com/aspnet/Announcements/issues/512","RelatedDescription":"Open issue \"[Breaking change]: DefaultKeyResolution.ShouldGenerateNewKey has a slightly altered meaning\" (#512)"},{"Id":"2162366750","IsPullRequest":true,"CreatedAt":"2024-03-01T17:37:10","Actor":"amcasey","Number":"511","RawContent":null,"Title":"Update repo URL","State":"closed","Body":"We have appropriate redirects, but it seems preferable to have current URLs in the guidance.","Url":"https://github.com/aspnet/Announcements/pull/511","RelatedDescription":"Closed or merged PR \"Update repo URL\" (#511)"},{"Id":"2115619834","IsPullRequest":true,"CreatedAt":"2024-02-06T22:14:36","Actor":"dotnet-policy-service[bot]","Number":"510","RawContent":null,"Title":"FabricBot: Onboarding to GitOps.ResourceManagement because of FabricBot decommissioning","State":"closed","Body":"Add prIssueManagement.yml to onboard repo to GitOps.ResourceManagement as FabricBot replacement\n\n Details on the replacement service and the syntax of the new yaml configuration file is available publicly at: https://microsoft.github.io/GitOps/policies/resource-management.html\n\nPlease review and merge this PR to complete the process of onboarding to the new service.","Url":"https://github.com/aspnet/Announcements/pull/510","RelatedDescription":"Closed or merged PR \"FabricBot: Onboarding to GitOps.ResourceManagement because of FabricBot decommissioning\" (#510)"},{"Id":"2013176077","IsPullRequest":false,"CreatedAt":"2023-11-27T21:55:39","Actor":"captainsafia","Number":"509","RawContent":null,"Title":"[Breaking change]: Minimal APIs consuming IFormFile or IFormFileCollection parameters require anti-forgery checks","State":"open","Body":"### Description\n\nMinimal API endpoints that consume an `IFormFile` or `IFormFileCollection` will now be opted-in to requiring anti-forgery token validation using the new anti-forgery middleware.\n\n### Version\n\n.NET 8 RC 1\n\n### Previous behavior\n\nMinimal API endpoints that bound a parameter from the form via `IFormFile` or `IFormFileCollection` did not require anti-forgery validation.\n\n### New behavior\n\nMinimal API endpoints that bound a parameter from the form via `IFormFile` or `IFormFileCollection` did require anti-forgery validation. An exception will be thrown at startup if the anti-forgery middleware is not registered for an API that defines these input types.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nAnti-forgery token validation is a recommended security precaution for APIs that consume data from a form.\n\n### Recommended action\n\nUsers can opt out of anti-forgery validation for specific endpoints by using the `DisableAntiforgery` method like so:\r\n\r\n```csharp\r\nvar app = WebApplication.Create();\r\n\r\napp.MapPost(\"/\", (IFormFile formFile) => ...)\r\n  .DisableAntiforgery();\r\n\r\napp.Run();\r\n```\n\n### Affected APIs\n\nNone.","Url":"https://github.com/aspnet/Announcements/issues/509","RelatedDescription":"Open issue \"[Breaking change]: Minimal APIs consuming IFormFile or IFormFileCollection parameters require anti-forgery checks\" (#509)"},{"Id":"1811082947","IsPullRequest":false,"CreatedAt":"2023-07-19T03:36:42","Actor":"jmprieur","Number":"508","RawContent":null,"Title":"[Breaking change]: JwtBearer, WsFederation, and OpenIdConnect events context properties of type SecurityToken now return a JSonWebToken by default","State":"open","Body":"## Description\r\nThe `JwtBearerEvents`, `WsFederationEvents` and `OpenIdConnectEvents` are authentication events fired respectively by the `JwtBearer`, `WsFederation` and `OpenIdConnect` authentication handlers. For example the [OnTokenValidated](https://github.com/dotnet/aspnetcore/blob/bf303a1092f83d789031fdafac60f3fc454cfc49/src/Security/Authentication/JwtBearer/src/JwtBearerEvents.cs#L29) event is fired when a security token is validated. These events are fired with a context (for instance [TokenValidatedContext](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.jwtbearer.tokenvalidatedcontext?view=aspnetcore-7.0)) that exposes a `SecurityToken` property of abstract type [SecurityToken](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.securitytoken?view=msal-web-dotnet-latest). The default real implementation of SecurityToken changed from [JwtSecurityToken](https://learn.microsoft.com/dotnet/api/system.identitymodel.tokens.jwt.jwtsecuritytoken?view=msal-web-dotnet-latest) to [JsonWebToken](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.jsonwebtokens.jsonwebtoken?view=msal-web-dotnet-latest).\r\nIf you really need to keep using `JwtSecurityToken`, you can re-enable it by setting `UseSecurityTokenValidators` on the `JwtBearerOptions`, `WsFederationOptions`, `OpenIdConnectOptions`.\r\n\r\nFor details [#aspnetcore/49469](https://github.com/dotnet/aspnetcore/issues/49469#issue) API Review.\r\n\r\n### Version\r\n.NET 8 Preview 7\r\n\r\n### Previous behavior\r\nUntil ASP.NET Core 8-preview 7, these SecurityToken properties were implemented by a sub-class of SecurityToken named JwtSecurityToken, which is the previous generation of implementation of JWT. These JwtSecurityToken were produced by [SecurityTokenValidators](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.isecuritytokenvalidator?view=msal-web-dotnet-latest).\r\n\r\n### New behavior\r\nFrom ASP.NET Core 8-preview 7, by default the class derived from SecurityToken implenting these properties is JSonWebToken which are produced by more optimized [TokenHandlers](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.tokenhandler?view=msal-web-dotnet-latest).\r\n\r\n## Type of breaking change\r\n- [ ] Binary incompatible: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] Source incompatible: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [x] Behavioral change: Existing binaries may behave differently at run time.\r\n\r\n## Reason for change\r\nThis change was made because JSonWebToken (and its associated JSonWebTokenHandler) are bringing:\r\n- 30% performance improvement.\r\n- Improved reliability by the usage of a Last Known Good metadata (such as the OpenIdConnectMetadata)\r\n- async processing\r\n\r\n### Recommended action\r\nFor most of you, this shouldn't be a problem as the type of the properties (SecurityToken) has not changed, and you were not supposed to look at the real type.\r\n\r\nHowever, if you were downcasting one of these SecurityToken properties to JwtSecurityToken (for example to get the claims), you will now need to:\r\n- either down-cast them to JSonWebToken\r\n\r\n  ```CSharp\r\n  service.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme,  options => {\r\n      options.Events.TokenValidated = (context) => {\r\n          // Replace your cast to JwtSecurityToken.\r\n          JSonWebToken token = context.SecurityToken as JSonWebToken;\r\n          // Do something ...\r\n      };\r\n  });\r\n  ```\r\n\r\n- or set one of the UseSecurityTokenValidators boolean properties on the corresponding options (JtwBearerOptions, WsFederationOptions, OpenIdConnectOptions) to true, in which case the authentication handlers will keep using the JwtTokenValidators and will keep producing JwtSecurityTokens.\r\n\r\n  ```CSharp\r\n  service.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme,  options => {\r\n      options.UseSecurityTokenValidators = true;\r\n      options.Events.TokenValidated = (context) => {\r\n          // As you were doing before\r\n          JwtSecurityToken token = context.SecurityToken as JwtSecurityToken;\r\n          // Do something ...\r\n      };\r\n  });\r\n  ```\r\n\r\n\r\n\r\n## Affected APIs\r\nThe properties that are concerned are the following:\r\n\r\n### In WsFederationEvents\r\n\r\n- [SecurityTokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/WsFederation/src/SecurityTokenValidatedContext.cs#L31)\r\n\r\n### In JwtBearerEvents\r\n\r\n- [TokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/JwtBearer/src/TokenValidatedContext.cs#L27)\r\n\r\n### In OpenIdConnectEvents\r\n\r\n- [TokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/OpenIdConnect/src/Events/TokenValidatedContext.cs#L32)\r\n- [AuthorizationCodeReceivedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/OpenIdConnect/src/Events/AuthorizationCodeReceivedContext.cs#L34)","Url":"https://github.com/aspnet/Announcements/issues/508","RelatedDescription":"Open issue \"[Breaking change]: JwtBearer, WsFederation, and OpenIdConnect events context properties of type SecurityToken now return a JSonWebToken by default\" (#508)"},{"Id":"1805550224","IsPullRequest":false,"CreatedAt":"2023-07-14T20:44:25","Actor":"captainsafia","Number":"507","RawContent":null,"Title":"[Breaking change]: TrimMode defaults to `full` for WebSDK projects","State":"open","Body":"### Description\n\nTrimming now trims all assemblies in applications targeting the Web SDK, by default. This change only affects apps that are published with PublishTrimmed=true, and it only breaks apps that had existing trim warnings. \n\n### Version\n\n.NET 8 Preview 7\n\n### Previous behavior\n\nPreviously, `TrimMode=partial` was set by default for all projects that targeted the WebSDK. \n\n### New behavior\n\nStarting in .NET 8 Preview 7, trimming trims all the assemblies in the app by default. Apps that may have previously worked with `PublishTrimmed=true` and `TrimMode=partial` may not work in .NET 8 Preview 7. However, only apps with trim warnings will be affected. If your app has no trim warnings, the change in behavior should not cause any adverse effect.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThis change helps to decrease app size without users having to explicitly opt in and aligns with user expectations that the entire app is trimmed unless noted otherwise.\n\n### Recommended action\n\nThe best resolution is to resolve all the trim warnings in your application. For information about resolving the warnings in your own libraries, see [Introduction to trim warnings](https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/fixing-warnings).\r\n\r\nTo revert to the previous behavior, set the TrimMode property to partial.\r\n\r\n```xml\r\n<TrimMode>partial</TrimMode>\r\n```\n\n### Affected APIs\n\nNone.","Url":"https://github.com/aspnet/Announcements/issues/507","RelatedDescription":"Open issue \"[Breaking change]: TrimMode defaults to `full` for WebSDK projects\" (#507)"},{"Id":"1693295179","IsPullRequest":false,"CreatedAt":"2023-05-03T01:44:40","Actor":"JamesNK","Number":"506","RawContent":null,"Title":"[Breaking change]: ASP.NET Core rate limiting middleware now requires AddRateLimiter","State":"open","Body":"### Description\r\n\r\n[ASP.NET Core rate limiting middleware](https://learn.microsoft.com/aspnet/core/performance/rate-limit) is being updated in .NET 8 with extra functionality. The middleware now requires services registered with `AddRateLimiter`.\r\n\r\n### Version\r\n\r\n.NET 8 Preview 5\r\n\r\n### Previous behavior\r\n\r\nPreviously, rate limiting could be used without `AddRateLimiter`. For example, the middleware could be configured by calling `Configure<RateLimiterOptions>(o => { })`:\r\n\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.Configure<RateLimiterOptions>(o => o\r\n    .AddFixedWindowLimiter(policyName: \"fixed\", options =>\r\n    {\r\n        // configuration\r\n    }));\r\n\r\nvar app = builder.Build();\r\napp.UseRateLimiter();\r\napp.MapGet(\"/\", () => Results.Ok($\"Hello world\")).RequireRateLimiting(\"fixed\");\r\napp.Run();\r\n```\r\n\r\n### New behavior\r\n\r\nIf `AddRateLimiter` is not called on app startup, then ASP.NET Core will throw an informative error:\r\n\r\n> Unable to find the required services. Please add all the required services by calling 'IServiceCollection.AddRateLimiter' in the application startup code.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nRate limiting middleware requires services that are only registered by calling `AddRateLimiter`.\r\n\r\n### Recommended action\r\n\r\nEnsure `AddRateLimiter()` is called at application startup.\r\n\r\nFor example, update `Configure<RateLimiterOptions>(o => { })` to use `AddRateLimiter()`:\r\n\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddRateLimiter(o => o\r\n    .AddFixedWindowLimiter(policyName: \"fixed\", options =>\r\n    {\r\n        // configuration\r\n    }));\r\n\r\nvar app = builder.Build();\r\napp.UseRateLimiter();\r\napp.MapGet(\"/\", () => Results.Ok($\"Hello world\")).RequireRateLimiting(\"fixed\");\r\napp.Run();\r\n```\r\n\r\n### Affected APIs\r\n\r\n[UseRateLimiter()](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.builder.ratelimiterapplicationbuilderextensions.useratelimiter)","Url":"https://github.com/aspnet/Announcements/issues/506","RelatedDescription":"Open issue \"[Breaking change]: ASP.NET Core rate limiting middleware now requires AddRateLimiter\" (#506)"},{"Id":"1685250868","IsPullRequest":false,"CreatedAt":"2023-04-26T15:26:43","Actor":"Tratcher","Number":"505","RawContent":null,"Title":"[Breaking change]: ISystemClock obsolete and replaced by TimeProvider","State":"open","Body":"### Description\n\n`Microsoft.AspNetCore.Authentication.ISystemClock` has been used by the authentication and identity components since AspNetCore 1.0 to enable unit testing of time related functionality like expiration checking. .NET 8 now includes a suitable abstraction `System.TimeProvider` that provides the same functionality and much more. We're taking this opportunity to obsolete `ISystemClock` and replace it with `TimeProvider` throughout AspNetCore.\r\n\r\nSee https://github.com/dotnet/aspnetcore/pull/47717 for additional details.\n\n### Version\n\n.NET 8 Preview 5\n\n### Previous behavior\n\nISystemClock was injected into the constructors by Dependency Injection and could be overridden for testing.\r\n\r\nNote the default `SystemClock` implementation would truncate to the nearest second for easier formatting. \n\n### New behavior\n\nISystemClock remains in the Dependency Injection container but is no longer used. It may be removed from the container in a future version.\r\n\r\nTimeProvider is now a settable property on the Options classes for these types. It can be set directly or by registering a provider in the Dependency Injection container.\r\n\r\n`TimeProvider` does not truncate to the nearest second, consumers are expected to correctly format the time as needed.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nUnifying the time abstraction across the stack for easier testing.\n\n### Recommended action\n\nComponents that derive from `Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>` or `Microsoft.AspNetCore.Identity.SecurityStampValidator<TUser>` should remove their `ISystemClock` constructor parameter and call the new base constructor accordingly. Similarly, derived implementations that reference the `Clock` property on these types should reference the new `TimeProvider` property instead. `TimeProvider` is now settable for testing on the options or via DI.\r\n\r\n```diff\r\n-    public BasicAuthenticationHandler(IOptionsMonitor<AuthenticationSchemeOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock)\r\n-        : base(options, logger, encoder, clock)\r\n+    public BasicAuthenticationHandler(IOptionsMonitor<AuthenticationSchemeOptions> options, ILoggerFactory logger, UrlEncoder encoder)\r\n+        : base(options, logger, encoder)\r\n```\r\n\r\n```diff\r\n-       var currentUtc = Clock.UtcNow;\r\n+       var currentUtc = TimeProvider.GetUtcNow();\r\n```\n\n### Affected APIs\n\n- [`ISystemClock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.isystemclock)\r\n- [`SystemClock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.systemclock)\r\n- [`AuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.authenticationhandler-1)\r\n- [`AuthenticationHandler<TOptions>.Clock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.authenticationhandler-1.clock)\r\n- [`CookieAuthenticationHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.cookies.cookieauthenticationhandler)\r\n- [`FacebookHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.facebook.facebookhandler)\r\n- [`GoogleHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.google.googlehandler)\r\n- [`JwtBearerHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.jwtbearer.jwtbearerhandler)\r\n- [`MicrosoftAccountHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.microsoftaccount.microsoftaccounthandler)\r\n- [`NegotiateHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.negotiate.negotiatehandler)\r\n- [`OAuthHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.oauth.oauthhandler-1)\r\n- [`OpenIdConnectHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.openidconnect.openidconnecthandler)\r\n- [`PolicySchemeHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.policyschemehandler)\r\n- [`RemoteAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.remoteauthenticationhandler-1)\r\n- [`SignInAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.signinauthenticationhandler-1)\r\n- [`SignOutAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.signoutauthenticationhandler-1)\r\n- [`TwitterHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.twitter.twitterhandler)\r\n- [`WsFederationHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.wsfederation.wsfederationhandler)\r\n- [`SecurityStampValidator<TUser>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.identity.securitystampvalidator-1)\r\n- [`TwoFactorSecurityStampValidator<TUser>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.identity.twofactorsecuritystampvalidator-1)","Url":"https://github.com/aspnet/Announcements/issues/505","RelatedDescription":"Open issue \"[Breaking change]: ISystemClock obsolete and replaced by TimeProvider\" (#505)"},{"Id":"1661290568","IsPullRequest":false,"CreatedAt":"2023-04-10T20:06:20","Actor":"captainsafia","Number":"504","RawContent":null,"Title":"[Breaking change]: `ValidationProblemDetails` and `ProblemDetails` no longer use custom converters","State":"open","Body":"### Description\n\nPrior to .NET 8 Preview 2, `ValidationProblemDetails` and `ProblemDetails` type used custom converters to support JSON serialization due to a lack of support for the `IgnoreNullValues` option. Now that this option is supported by the S.T.J APIs, we've removed the custom converters in the framework in favor of the serialization provided by the framework.\r\n\r\nAs a result of this, the properties in the `ValidationProblemDetails` and `ProblemDetails` types no longer indiscriminately assume lowercase type names. Developers must specific a `JsonNamingPolicy` to get the correct behavior.\n\n### Version\n\n.NET 8 Preview 2\n\n### Previous behavior\n\n```csharp\r\nstring content = \"{\\\"status\\\":400,\\\"detail\\\":\\\"HTTP egress is not enabled.\\\"}\";\r\nusing MemoryStream stream = new();\r\nusing StreamWriter writer = new(stream);\r\nwriter.Write(content);\r\nwriter.Flush();\r\nstream.Position = 0;\r\n\r\nJsonSerializerOptions options = new();\r\noptions.Converters.Add(new JsonStringEnumConverter());\r\n\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\nConsole.WriteLine(details.Status); // 400\r\n```\n\n### New behavior\n\n```csharp\r\nstring content = \"{\\\"status\\\":400,\\\"detail\\\":\\\"HTTP egress is not enabled.\\\"}\";\r\nusing MemoryStream stream = new();\r\nusing StreamWriter writer = new(stream);\r\nwriter.Write(content);\r\nwriter.Flush();\r\nstream.Position = 0;\r\n\r\nJsonSerializerOptions options = new();\r\noptions.Converters.Add(new JsonStringEnumConverter());\r\n\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\nConsole.WriteLine(details.Status); // null\r\n```\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nNow that `IgnoreNullValues` is supported by the S.T.J APIs, we've removed the custom converters in the framework in favor of the serialization provided by the framework.\n\n### Recommended action\n\nProvide a JSON serializer options with the correct details.\r\n\r\n```csharp\r\nJsonSerializerOptions options = new()\r\n{\r\n   PropertyNameCaseInsensitive = true\r\n};\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\n```\n\n### Affected APIs\n\n- [`ValidationProblemDetails`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.validationproblemdetails)\r\n- [`ProblemDetails`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.problemdetails)","Url":"https://github.com/aspnet/Announcements/issues/504","RelatedDescription":"Open issue \"[Breaking change]: `ValidationProblemDetails` and `ProblemDetails` no longer use custom converters\" (#504)"},{"Id":"1657753067","IsPullRequest":true,"CreatedAt":"2023-04-06T22:49:51","Actor":"gewarren","Number":"503","RawContent":null,"Title":"Add more version choices to BC template","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/503","RelatedDescription":"Closed or merged PR \"Add more version choices to BC template\" (#503)"},{"Id":"1656483670","IsPullRequest":false,"CreatedAt":"2023-04-06T00:15:27","Actor":"mitchdenny","Number":"502","RawContent":null,"Title":"[Breaking change]: Obsolete ConcurrencyLimiterMiddleware","State":"open","Body":"### Description\r\n\r\nIn .NET 8.0 the ASP.NET Core team is deprecating the ConcurrencyLimiterMiddleware and associated methods and types (e.g. UseConcurrencyLimiter(...)). This package will be removed in .NET 9.0.\r\n\r\nDevelopers requiring rate limiting capabilties should switch to the newer and more capable rate limiting middleware that was introduced in .NET 7.0 (e.g. UseRateLimiter(...)). The .NET 7.0 rate limiting API includes a concurrency limiter along with several other rate limiting algorithms that you can apply to your application.\r\n\r\nFor more information on rate limiting in ASP.NET Core see:\r\nhttps://learn.microsoft.com/aspnet/core/performance/rate-limit\r\n\r\n### Version\r\n\r\n.NET 8 Preview 4\r\n\r\n### Previous behavior\r\n\r\nDevelopers using the `ConcurrencyLimiterMiddleware` could control concurrency by adding a policy to DI and enabling the middleware:\r\n\r\n```csharp\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddStackPolicy<options => {\r\n    options.MaxConcurrentRequests = 2;\r\n    options.RequestQueueLimit = 25;\r\n    });\r\n\r\nvar app = builder.Build();\r\napp.UseConcurrencyLimiter();\r\n// Map endpoints.\r\napp.Run();\r\n```\r\n\r\n### New behavior\r\n\r\nHere is some example usage using the new API:\r\n\r\n```csharp\r\nusing Microsoft.AspNetCore.RateLimiting;\r\nusing System.Threading.RateLimiting;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\n\r\napp.UseRateLimiter(new RateLimiterOptions()\r\n    .AddConcurrencyLimiter(\"only-one-at-a-time-stacked\", (options) =>\r\n    {\r\n        options.PermitLimit = 2;\r\n        options.QueueLimit = 25;\r\n        options.QueueProcessingOrder = QueueProcessingOrder.NewestFirst;\r\n    }));\r\n\r\napp.MapGet(\"/\", async () =>\r\n{\r\n    await Task.Delay(10000);\r\n    return \"Hello World\";\r\n}).RequireRateLimiting(\"only-one-at-a-time-stacked\");\r\n\r\napp.Run();\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nThe older `ConcurrencyLimiterMiddleware` is infrequently used and undocumented. The newer rate limiting API has more extensive functionality.\r\n\r\n### Recommended action\r\n\r\nIf you are using the older `ConcurrencyLimiterMiddleware` we recommend moving to the newer rate limiting middleware.\r\n\r\n### Affected APIs\r\n\r\nThe following APIs are impacted:\r\n\r\n* `ConcurrencyLimiterExtensions.UseConcurrencyLimiter(...)`\r\n* `ConcurrencyLimiterMiddleware`\r\n* `ConcurrencyLimiterOptions`","Url":"https://github.com/aspnet/Announcements/issues/502","RelatedDescription":"Open issue \"[Breaking change]: Obsolete ConcurrencyLimiterMiddleware\" (#502)"},{"Id":"1602073485","IsPullRequest":false,"CreatedAt":"2023-03-07T16:47:58","Actor":"dnfadmin","Number":"501","RawContent":null,"Title":"Moving to the new .NET Foundation CLA service","State":"closed","Body":"\r\nHello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team\r\n\r\n","Url":"https://github.com/aspnet/Announcements/issues/501","RelatedDescription":"Closed issue \"Moving to the new .NET Foundation CLA service\" (#501)"},{"Id":"1575203037","IsPullRequest":true,"CreatedAt":"2023-02-08T00:08:59","Actor":"brunolins16","Number":"500","RawContent":null,"Title":"Fixing announcement template","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/500","RelatedDescription":"Closed or merged PR \"Fixing announcement template\" (#500)"},{"Id":"1375214843","IsPullRequest":false,"CreatedAt":"2023-02-03T03:50:56","Actor":"halter73","Number":"493","RawContent":null,"Title":"[Breaking change]: ApiExplorer and OpenAPI metadata is generated for RequestDelegate endpoints in RC1 *only*","State":"closed","Body":"### Description\r\n\r\nIn .NET 6, ASP.NET Core added support for `Delegate` [route handlers](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0#route-handlers) in addition to conventional `RequestDelegate` endpoints which have existed since ASP.NET Core 3.0.\r\n\r\nIn .NET 7 RC 1, we started automatically generating more API metadata for the older `RequestDelegate` endpoints to align the behavior of these two kinds of endpoints. **In .NET 7 RC 2, we plan to revert this breaking change** which will cause no API metadata to inferred for `RequestDelegate` endpoints again.\r\n\r\n### Version\r\n\r\n.NET 7 RC1\r\n\r\n### Previous behavior\r\n\r\nBefore .NET 7 RC1, conventional `RequestDelegate` endpoints did not get added to the [ApiExplorer](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.apiexplorer?view=aspnetcore-6.0) model or the `OpenApiOperation` generated by [WithOpenApi()](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.openapiendpointconventionbuilderextensions.withopenapi?view=aspnetcore-7.0).\r\n\r\n### New behavior\r\n\r\nIn .NET RC 1 and RC 1 only **(this is being reverted in RC 2)**, the `RequestDelegate`'s `MethodInfo` is added to the [EndpointMetadataCollection](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.endpointmetadatacollection?view=aspnetcore-6.0) just like with `Delegate` route handlers causing ApiExplorer and WithOpenApi() to generate endpoint metadata for endpoints that previously were not part of the model.\r\n\r\nThis can impact third party libraries like [Swashbuckle](https://github.com/domaindrivendev/Swashbuckle.AspNetCore) and [NSwag](https://github.com/RicoSuter/NSwag).\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/44005 for more context. \r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nWe were [hoping ](https://github.com/dotnet/aspnetcore/pull/42827/files/cbff9e89b459111ea104ec71c2d3bf9cee6c9e5f#r925142793) that aligning the behavior of `RequestDelegate` and `Delegate` backed endpoints would reduce confusion. We've decided to walk this back though.\r\n\r\n### Recommended action\r\n\r\nYou can add a custom convention that removes the `MethodInfo` from the endpoint metadata or wait for RC 2 to revert this behavior. You can use a group to make it apply to multiple endpoints.\r\n\r\n```csharp\r\nvar noMetadataGroup = app.MapGroup(\"\");\r\nIEndpointConventionBuilder groupConventionBuilder = noMetadataGroup;\r\n\r\ngroupConventionBuilder.Add(endpointBuilder =>\r\n{\r\n    if (endpointBuilder.Metadata.FirstOrDefault(m => m is MethodInfo) is MethodInfo method)\r\n    {\r\n        endpointBuilder.Metadata.Remove(method);\r\n    }\r\n});\r\n\r\nnoMetadataGroup.MapGet(\"/\", (context) => context.Response.WriteAsync(\"RequestDelegate endpoint.\"));\r\n```\r\n\r\n### Affected APIs\r\n\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(IEndpointRouteBuilder, RoutePattern, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapGet(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPost(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapDelete(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPut(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapMethods(IEndpointRouteBuilder, String, IEnumerable<String>, RequestDelegate)`","Url":"https://github.com/aspnet/Announcements/issues/493","RelatedDescription":"Closed issue \"[Breaking change]: ApiExplorer and OpenAPI metadata is generated for RequestDelegate endpoints in RC1 *only*\" (#493)"},{"Id":"1497212375","IsPullRequest":true,"CreatedAt":"2022-12-14T19:04:06","Actor":"gewarren","Number":"499","RawContent":null,"Title":"Update incompatibility types in BC template","State":"closed","Body":"I updated the breaking change template to match dotnet/docs. Feel free to close if you don't like these definitions, however.","Url":"https://github.com/aspnet/Announcements/pull/499","RelatedDescription":"Closed or merged PR \"Update incompatibility types in BC template\" (#499)"},{"Id":"1455922247","IsPullRequest":false,"CreatedAt":"2022-11-18T22:38:34","Actor":"halter73","Number":"498","RawContent":null,"Title":"[Breaking change]: `WebApplicationBuilder` gives `ASPNET_`-prefixed environment variables lower precedence","State":"open","Body":"### Description\n\nStarting in .NET 7 preview 3, when using `WebApplicationBuilder` but not any other host (e.g. `ConfigureWebHostDefaults` or `WebHost.CreateDefaultBuilder`), command-line arguments and `DOTNET_`-prefixed environment variables override `ASPNET_`-prefixed environment variables when reading from [default host configuration sources](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#default-host-configuration-sources) which are used to read [host variables](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#host-variables) like the content root path and environment name when the `WebApplicationBuilder` is constructed and serves as a base for [application configuration](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#application-configuration-providers).\r\n\r\n`ASPNET_`-prefixed environment variables now has the lowest precedence of all of `WebApplicationBuilder`'s [default host configuration sources](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#default-host-configuration-sources).\r\n\r\nSee https://github.com/dotnet/AspNetCore.Docs/issues/25626#issuecomment-1098616664 for more context.\n\n### Version\n\n.NET 7 Preview 3\n\n### Previous behavior\n\n`ASPNET_`-prefixed environment variables overrode command-line arguments and `DOTNET_`-prefixed environment variables.\n\n### New behavior\n\nCommand-line arguments and `DOTNET_`-prefixed environment variables override `ASPNET_`-prefixed environment variables\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nTo prevent environment variables from overriding explicit command-line arguments when reading host variables which is more consistent with application configuration which has always given command-line arguments the highest precedence.\n\n### Recommended action\n\nIf you were using `ASPNETCORE_`-prefixed environment variables to override command-line arguments or `DOTNET_-`prefixed environment variables, use something with a higher priority. This could mean using custom [WebApplicationOptions](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationoptions?view=aspnetcore-7.0) which overrides all default hosting configuration sources.\n\n### Affected APIs\n\n`Microsoft.AspNetCore.Builder.WebApplicationBuilder`","Url":"https://github.com/aspnet/Announcements/issues/498","RelatedDescription":"Open issue \"[Breaking change]: `WebApplicationBuilder` gives `ASPNET_`-prefixed environment variables lower precedence\" (#498)"},{"Id":"1414759756","IsPullRequest":false,"CreatedAt":"2022-10-19T11:01:00","Actor":"javiercn","Number":"497","RawContent":null,"Title":"[Breaking change]: Updates to Authentication in webassembly applications","State":"open","Body":"### Description\n\nWe updated our support for authentication in Blazor Webassembly applications to rely on the history state instead of query strings in the URL. As a result of that, existing applications passing the return URL through the query string will fail to redirect back to the original page after a successful login.\r\n\r\nExisting applications should use the new `NavigateToLogin` extension method as it is able to flow the data to the login page corectly.\n\n### Version\n\n.NET 7 RC 1\n\n### Previous behavior\n\nThe return URL would be specified in the query string as `?returnUrl=<<return-url>>`.\n\n### New behavior\n\nThe return URL along other parameters passed to the `authentication/login` page are passed via the `history.state` entry of the page.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nWe decided to switch to using `history.state` instead of the query string as it simplifies the implementation and removes the surface attack area associated with passing data through the query string.\n\n### Recommended action\n\nMost apps have a RedirectToLogin.razor file in them that can be updated as follows:\r\n\r\n```razor\r\n@inject NavigationManager Navigation\r\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\r\n@using Microsoft.Extensions.Options\r\n\r\n@inject IOptionsSnapshot<RemoteAuthenticationOptions<ApiAuthorizationProviderOptions>> Options\r\n@code {\r\n\r\n    protected override void OnInitialized()\r\n    {\r\n        Navigation.NavigateToLogin(Options.Get(Microsoft.Extensions.Options.Options.DefaultName).AuthenticationPaths.LogInPath);\r\n    }\r\n}\r\n```\n\n### Affected APIs\n\nAs part of this change `SignOutSessionStateManager` has been obsoleted in favor of `NavigationManager.NavigateToLogout`","Url":"https://github.com/aspnet/Announcements/issues/497","RelatedDescription":"Open issue \"[Breaking change]: Updates to Authentication in webassembly applications\" (#497)"},{"Id":"1400322849","IsPullRequest":false,"CreatedAt":"2022-10-06T21:30:20","Actor":"halter73","Number":"496","RawContent":null,"Title":"[Breaking change]: IEndpointMetadataProvider and IEndpointParameterMetadataProvider interface changes in 7.0 RC2","State":"open","Body":"### Description\n\nIn ASP.NET Core 7 RC2, the `IEndpointMetadataProvider` and `IEndpointParameterMetadataProvider` interfaces [introduced in  preview 4](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-4/#self-describing-minimal-apis-with-iendpointmetadataprovider-and-iendpointparametermetadataprovider) have been updated to take an [EndpointBuilder](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.endpointbuilder?view=aspnetcore-7.0) rather than a `EndpointMetadataContext` or `EndpointParameterMetadataContext`.\r\n\r\n\n\n### Version\n\n.NET 7 RC 2\n\n### Previous behavior\n\nThe `PopulateMetadata` methods on both interfaces took their respective context arguments as a single parameter. Both contexts included services (`IServiceProvider`) and endpoint metadata (`IList<object>`).\r\n\r\n`EndpointMetadataContext` included the `MethodInfo` for the minimal route handler MVC action that took the implementing type as a parameter or returned it. `EndpointParameterMetadataContext` provided `ParameterInfo` and could only be used on parameter types.\n\n### New behavior\n\nNow in RC2, both interfaces' `PopulateMetadata` method take an `EndpointBuilder` as their second parameter. The `EndpointBuilder` provides access to the application services (`IServiceProvider`) and endpoint metadata (`IList<object>`) previously provided by `EndpointMetadataContext` and `EndpointParameterMetadataContext`.\r\n\r\nNow, `IEndpointMetadataProvider` takes a `MethodInfo` and `IEndpointParameterMetadataProvider` takes a `ParameterInfo` as their first parameter.\r\n\r\nBoth `EndpointMetadataContext` and `EndpointParameterMetadataContext` have been removed.\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/43125#issuecomment-1218534849 for an API diff.\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [ ] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThe metadata providers now get access to more metadata like the `RoutePattern` (with a downcast) and `DisplayName` via the `EndpointBuilder`, and this allowed us to delete unnecessary context types.\n\n### Recommended action\n\nUpdate implementations of `IEndpointMetadataProvider` and `IEndpointParameterMetadataProvider` to access the information necessary from the new parameters. There should be nothing that was available via the contexts previously that are unavailable via `PopulateMetadata`'s new parameters.\n\n### Affected APIs\n\n- Parameters changed: `Microsoft.AspNetCore.Http.Metadata.IEndpointMetadataProvider.PopulateMetadata`\r\n- Parameters changed: `Microsoft.AspNetCore.Http.Metadata.IEndpointParameterMetadataProvider.PopulateMetadata`\r\n- Removed: `Microsoft.AspNetCore.Http.Metadata.EndpointMetadataContext`\r\n- Removed: `Microsoft.AspNetCore.Http.Metadata.EndpointParameterMetadataContext`","Url":"https://github.com/aspnet/Announcements/issues/496","RelatedDescription":"Open issue \"[Breaking change]: IEndpointMetadataProvider and IEndpointParameterMetadataProvider interface changes in 7.0 RC2\" (#496)"},{"Id":"1396674543","IsPullRequest":false,"CreatedAt":"2022-10-04T18:23:29","Actor":"MackinnonBuck","Number":"495","RawContent":null,"Title":"[Breaking change]: Endpoints configured with 'MapFallbackToFile()' now only match 'HEAD' and 'GET' requests","State":"open","Body":"### Description\n\nThe `ConsumesAttribute` attribute allows controller actions to specify their supported content types. Starting in .NET 6, if a fallback file endpoint was configured, it could match routes that were discarded due to the request having a different content type than what was specified in an action's `ConsumesAttribute`. This was an undesirable change in behavior from .NET 5 that we are partially addressing in .NET 7 by making fallback file endpoints only match `GET` and `HEAD` requests.\n\n### Version\n\n.NET 7 RC2\n\n### Previous behavior\n\nEndpoints configured with `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()` may match requests made with any request method.\n\n### New behavior\n\nEndpoints configured with `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()` will only match `HEAD` and `GET` requests.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis partially reverts larger breaking change accidentally introduced in .NET 6. Since it's highly unusual to expect a fallback file response when making a request with a method other than `HEAD` or `GET`, we anticipate the impact of this breaking change to be minimal.\n\n### Recommended action\n\nIf you want fallback file endpoints to match requests with methods other than `HEAD` or `GET`, you can specify additional HTTP request methods using `WithMetadata()`. For example:\r\n\r\n```csharp\r\nendpoints.MapFallbackToFile(\"index.html\")\r\n    .WithMetadata(new HttpMethodMetadata(new[] { /* List supported methods here */ }));\r\n```\n\n### Affected APIs\n\nAll overloads of `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()`.","Url":"https://github.com/aspnet/Announcements/issues/495","RelatedDescription":"Open issue \"[Breaking change]: Endpoints configured with 'MapFallbackToFile()' now only match 'HEAD' and 'GET' requests\" (#495)"},{"Id":"1376539134","IsPullRequest":false,"CreatedAt":"2022-09-16T22:09:33","Actor":"brunolins16","Number":"494","RawContent":null,"Title":"[Breaking change]:  Using the System.Text.Json source generator with ASP. NET Core throws NotSupportedException in RC1 *only*","State":"open","Body":"### Description\r\n\r\nIn _**.NET 7 RC1**_, we started requiring that the type `object` to be explicitly specified with a `[JsonSerializable]` attribute applied to your Json Serializer context class in Minimal APIs applications using `System.Text.Json` source generation. _**This was an unexpected behavioral change that we will be fixed in RC2**_.\r\n\r\n### Version\r\n\r\n.NET 7 RC1\r\n\r\n### Previous behavior\r\n\r\nBefore **.NET 7 RC1**, if you are using `System.Text.Json` source generation with `ASP.NET Core Minimal APIs` your endpoint's response will be serialized (`JSON` format) correctly when you have your custom types declared in the `JsonSerializerContext`.\r\n\r\nThe following code shows an example using `System.Text.Json` source generation with `ASP.NET Core Minimal APIs` :\r\n\r\n``` c#\r\nusing System.Text.Json.Serialization;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.ConfigureHttpJsonOptions(o => o.SerializerOptions.AddContext<JsonContext>());\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\"/\", () =>\r\n{\r\n    var l = new List<MyClass> { new(), new() };\r\n    return Results.Ok(l);\r\n});\r\n\r\napp.Run();\r\n\r\n[JsonSerializable(typeof(List<MyClass>))]\r\npublic partial class JsonContext : JsonSerializerContext\r\n{}\r\n\r\npublic class MyClass\r\n{\r\n    public int MyProp { get; set; }\r\n}\r\n```\r\n\r\n### New behavior\r\n\r\nIn .NET RC 1 and **RC 1 only** (**_this is being fixed in RC 2_**) the same sample application will throw a `NotSupportedException`.\r\n\r\n```\r\nNotSupportedException: Metadata for type 'System.Object' was not provided by TypeInfoResolver of type 'JsonContext'. \r\nIf using source generation, ensure that all root types passed to the serializer have been indicated with 'JsonSerializableAttribute',\r\nalong with any types that might be serialized polymorphically.\r\n\r\nSystem.Text.Json.ThrowHelper.ThrowNotSupportedException_NoMetadataForType(Type type, IJsonTypeInfoResolver resolver)\r\n```\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/43894 for more context.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis is an unexpected side effect cause by a combination of multiple changes, listed below, detected only after **.NET 7 RC1** release. \r\n\r\n**.NET Runtime**\r\n1. https://github.com/dotnet/docs/issues/30758\r\n2. https://github.com/dotnet/docs/issues/30755\r\n\r\n**ASP.NET CORE**\r\n1. https://github.com/dotnet/aspnetcore/issues/39856\r\n2. https://github.com/dotnet/aspnetcore/issues/41724#issuecomment-1142735823\r\n\r\nThe root cause was already identified, and a fix will be available in **.NET 7 RC2**.\r\n\r\n### Recommended action\r\n\r\nYou can add the `[JsonSerializable(typeof(object))]` to your [JsonSerializerContext](https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-source-generation?pivots=dotnet-7-0) or wait for RC 2 when this unexpected behavior will be fixed.\r\n\r\n``` c#\r\n[JsonSerializable(typeof(List<MyClass>))]\r\n[JsonSerializable(typeof(object))]\r\npublic partial class JsonContext : JsonSerializerContext\r\n{}\r\n```\r\n\r\n\r\n### Affected APIs\r\n\r\n- Minimal APIs\r\n- Controllers (using [Microsoft.AspNetCore.Http.HttpResults](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.httpresults?view=aspnetcore-7.0))","Url":"https://github.com/aspnet/Announcements/issues/494","RelatedDescription":"Open issue \"[Breaking change]:  Using the System.Text.Json source generator with ASP. NET Core throws NotSupportedException in RC1 *only*\" (#494)"},{"Id":"1371807646","IsPullRequest":false,"CreatedAt":"2022-09-13T17:51:25","Actor":"sebastienros","Number":"492","RawContent":null,"Title":"[Breaking change]: Output Caching renames in 7.0 RC2","State":"open","Body":"### Description\n\nFrom 7.0 RC1 to 7.0 RC2 some APIs have changed to better represent their intent.\r\n\r\nhttps://github.com/dotnet/aspnetcore/pull/43892\r\n\n\n### Version\n\n.NET 7 RC2\n\n### Previous behavior\n\n- `OutputCachePolicyBuilder.VaryByQuery()` was additive: every call would add more query string keys to vary by.\n\n### New behavior\n\n- `OutputCachePolicyBuilder.SetVaryByQuery()` is replacing existing query string keys.\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [ ] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis change was made to improve the consistency of method names and to remove ambiguity in their behavior.\n\n### Recommended action\n\nIt is recommended you recompile any projects built with an earlier SDK. If any of these method names were referenced directly, the source should be updated to reflect the new names.\n\n### Affected APIs\n\n- Removed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.OutputCachePolicyBuilder()` \r\n- Removed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.Clear()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.AllowLocking()` to `SetLocking()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByRouteValue()` to `SetVaryByRouteValue()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByQuery()` to `SetVaryByQuery()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByHeader()` to `SetVaryByHeader()` \r\n- Added: `Microsoft.AspNetCore.OutputCaching.CacheVaryByRules.VaryByHost`\r\n- Added: `Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddPolicy(string name, Action<OutputCachePolicyBuilder> build, bool excludeDefaultPolicy)`\r\n- Added: `Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddBasePolicy(Action<OutputCachePolicyBuilder> build, bool excludeDefaultPolicy)`\r\n- Added: `Microsoft.Extensions.DependencyInjection.OutputCacheConventionBuilderExtensions.CacheOutput<TBuilder>(this TBuilder builder, Action<OutputCachePolicyBuilder> policy, bool excludeDefaultPolicy)`\r\n","Url":"https://github.com/aspnet/Announcements/issues/492","RelatedDescription":"Open issue \"[Breaking change]: Output Caching renames in 7.0 RC2\" (#492)"},{"Id":"1342406148","IsPullRequest":false,"CreatedAt":"2022-08-18T00:16:25","Actor":"Tratcher","Number":"491","RawContent":null,"Title":"[Breaking change]: AuthenticateAsync for remote authentication providers no longer fails if anonymous","State":"open","Body":"### Description\n\nRE: https://github.com/dotnet/aspnetcore/issues/43042, https://github.com/dotnet/aspnetcore/pull/43212\r\n\r\nRemote authentication providers like OpenIdConnect, WsFederation, and OAuth have been updated to avoid unnecessary errors when there is no user information available on the request.\n\n### Version\n\n.NET 7 RC1\n\n### Previous behavior\n\nWhen AuthenticateAsync was called on a remote authentication provider and there was no current user, this call would fail with a message like `OpenIdConnect was not authenticated. Failure message: Not authenticated`. \n\n### New behavior\n\nAuthenticateAsync will now return `AuthenticateResult.NoResult()`, an anonymous identity. \n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\n- This was inconsistent with Cookie and Negotiate authentication which will return `AuthenticateResult.NoResult()`.\r\n- It causes excess failure logs, especially if the remote authentication handler is set as the default handler and invoked per request.\n\n### Recommended action\n\nCode that directly invokes AuthenticateAsync should be checked to ensure it properly handles `AuthenticateResult.NoResult()` and anonymous/empty ClaimsIdentity's.\n\n### Affected APIs\n\nHttpContext.[AuthenticateAsync](https://github.com/dotnet/aspnetcore/blob/a450cb69b5e4549f5515cdb057a68771f56cefd7/src/Http/Authentication.Abstractions/src/AuthenticationHttpContextExtensions.cs#L22)","Url":"https://github.com/aspnet/Announcements/issues/491","RelatedDescription":"Open issue \"[Breaking change]: AuthenticateAsync for remote authentication providers no longer fails if anonymous\" (#491)"}],"ResultType":"GitHubIssue"}},"RunOn":"2025-07-23T03:30:07.7784102Z","RunDurationInMilliseconds":3239}