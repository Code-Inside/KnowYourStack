{"Data":{"Blog":{"FeedItems":[{"Title":"Update to the .NET language strategy","PublishedOn":"2023-02-06T18:18:38+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"Interested in what is going on and the future of .NET languages, (C#, F#, and Visual Basic)? We have just published an updated version of the .NET Language Strategy on our documentation!\nThe post...","Href":"https://devblogs.microsoft.com/dotnet/update-to-the-dotnet-language-strategy/","RawContent":null},{"Title":"Play Audio and Video in .NET MAUI apps with the new MediaElement","PublishedOn":"2023-01-31T16:02:00+00:00","CommentsCount":6,"FacebookCount":0,"Summary":".NET MAUI Community Toolkit MediaElement v1.0 is now available! Check out how to get started with playing audio and (live) video in your .NET MAUI app.\nThe post Play Audio and Video in .NET MAUI apps...","Href":"https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-communitytoolkit-mediaelement/","RawContent":null},{"Title":"Using Command Binding in Windows Forms apps to go Cross-Platform","PublishedOn":"2023-01-25T18:15:00+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"The WinForms code-behind approach has always made app development in WinForms unrivaled fast. For complex line-of-business apps, however, it can become an architectural challenge. New Command- and...","Href":"https://devblogs.microsoft.com/dotnet/winforms-cross-platform-dotnet-maui-command-binding/","RawContent":null},{"Title":"5 .NET MAUI Features for Building Great Desktop Apps","PublishedOn":"2023-01-23T18:05:00+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"When developing desktop apps with .NET MAUI there are great built in features that you can integrate into your apps to deliver a higher quality experience for the form factor. Today, we take a look at...","Href":"https://devblogs.microsoft.com/dotnet/5-dotnet-maui-desktop-features/","RawContent":null},{"Title":".NET Framework January 2023 Cumulative Update Preview","PublishedOn":"2023-01-19T22:05:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"January 2023 Cumulative Update Preview Updates for .NET Framework.\nThe post .NET Framework January 2023 Cumulative Update Preview appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2023-update/","RawContent":null},{"Title":"Announcing .NET Community Toolkit 8.1! Better, faster MVVM source generators, .NET 7 support, and more!","PublishedOn":"2023-01-18T18:05:00+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We’re happy to announce the official launch of the .NET Community Toolkit 8.1 release, bringing with it some new highly requested features, improvements, new analyzers and major performance...","Href":"https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-community-toolkit-810/","RawContent":null},{"Title":".NET January 2023 Updates – .NET 7.0.2, .NET 6.0.13","PublishedOn":"2023-01-10T18:00:00+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Check out January 2023 updates for .NET 7.0. and .NET 6.0\nThe post .NET January 2023 Updates – .NET 7.0.2, .NET 6.0.13 appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/january-2023-updates/","RawContent":null},{"Title":"Top .NET Blog Posts of 2022","PublishedOn":"2022-12-30T18:05:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Let's take a look back at the top .NET blogs posts from 2022!\nThe post Top .NET Blog Posts of 2022 appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/top-dotnet-blog-posts-of-2022/","RawContent":null},{"Title":"Top .NET Videos & Live Streams of 2022","PublishedOn":"2022-12-30T18:05:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Let's take a look at the top .NET videos and live streams from the .NET team in 2022!\nThe post Top .NET Videos &amp; Live Streams of 2022 appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/top-dotnet-videos-live-streams-of-2022/","RawContent":null},{"Title":"Accelerate ML.NET training with Intel oneDAL","PublishedOn":"2022-12-22T17:30:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The first preview release of ML.NET 3.0 brings training hardware acceleration improvements powered by Intel oneDAL.\nThe post Accelerate ML.NET training with Intel oneDAL appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/accelerate-ml-net-training-with-intel-onedal/","RawContent":null}],"ResultType":"Feed"},"AspNetCore-Issues":{"Issues":[{"Id":"1581090949","IsPullRequest":true,"CreatedAt":"2023-02-12T02:24:16","Actor":"JamesNK","Number":"46594","RawContent":null,"Title":"[AOT] Add Http.Results RouteValueDictionary overloads","State":"open","Body":"Fixes https://github.com/dotnet/aspnetcore/issues/46542\r\n\r\nNote: Waiting on API review before merging.","Url":"https://github.com/dotnet/aspnetcore/pull/46594","RelatedDescription":"Open PR \"[AOT] Add Http.Results RouteValueDictionary overloads\" (#46594)"},{"Id":"1581060565","IsPullRequest":false,"CreatedAt":"2023-02-12T00:09:29","Actor":"Artiom-Evs","Number":"46593","RawContent":null,"Title":"Problem adding custom ClaimsPrincipalFactory when using roles","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI am trying to implement role based authentication and custom user claims in my application.\r\nI using ASP.NET Core with React.js project template.\r\n\r\nTo generate custom user claims, I use the `ApplicationUserClaimsPrincipalFactory` class, which is inherited from the `UserClaimsPrincipalFactory` class with the `GenerateClaimsAsync` method overridden.\r\n\r\nThe problem is that if `AddClaimsPrincipalFactory` is called after `AddRoles`, only the `FullName` field is added to the `ClaimsPrincipal`, and if `AddClaimsPrincipalFactory` is called before `AddRoles`, then only the `role` field is added to the `ClaimsPrincipal`.\r\n\r\nI have created [repository](https://github.com/Artiom-Evs/SpaWithAuth) that represent this issue.\r\n\r\nThis issue was also raised in the [this issue](https://github.com/dotnet/aspnetcore/issues/20887), but I am not use Blazor and this solution not works for me. \r\nThis problem is also in [this post](https://stackoverflow.com/questions/61178681/how-to-add-additional-claims-to-blazor-webassembly-3-2-0-preview-3-application) on StackOverflow. This solution doesn't work for me either. I have implemented this in the `implement-profile-service` branch.\r\n\r\nI have debugged in different steps but didn't find the place where the problem occurs, only one required claim existed in each of them.\r\n\r\n### Expected Behavior\r\n\r\nThe claims `role` and `FullName` are added to the `ClaimsPrincipal` of the authorized user.\r\n\r\n### Steps To Reproduce\r\n\r\nAdd support of roles in Program.cs:\r\n\r\n```\r\nbuilder.Services.AddDefaultIdentity<ApplicationUser>(options => options.SignIn.RequireConfirmedAccount = true)\r\n    .AddRoles<IdentityRole>()\r\n    .AddEntityFrameworkStores<ApplicationDbContext>();\r\n```\r\n\r\nAdd new custom property to the ApplicationUser class:\r\n\r\n```\r\npublic class ApplicationUser : IdentityUser\r\n{\r\n    public string FullName { get; set; }\r\n}\r\n```\r\n\r\nOverride Register page of Identity UI using aspnet-codegenerator tool:\r\n\r\n```\r\ndotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design\r\ndotnet aspnet-codegenerator identity -dc SpaWithAuth.Data.ApplicationDbContext --files \"Account.Register\"\r\n```\r\n\r\nAdd full name editor in the Register.cshtml:\r\n\r\n```\r\n...\r\n<div class=\"form-floating mb-3\">\r\n    <input asp-for=\"Input.FullName\" class=\"form-control\" aria-required=\"true\" placeholder=\"Enter your full name\" />\r\n    <label asp-for=\"Input.FullName\">Full name</label>\r\n    <span asp-validation-for=\"Input.FullName\" class=\"text-danger\"></span>\r\n</div>\r\n...\r\n```\r\n\r\nEdit InputModel class in the Register.cshtml.cs:\r\n\r\n```\r\npublic class InputModel\r\n{        {\r\n    ...\r\n    [Required]\r\n    public string FullName { get; set; }    }        \r\n}\r\n```\r\n\r\nEdit User object creation in the OnPostAsync method in the Register.cshtml.cs:\r\n\r\n```\r\npublic async Task<IActionResult> OnPostAsync(string returnUrl = null)\r\n{\r\n    ...\r\n    var user = CreateUser();\r\n    user.FullName = Input.FullName;\r\n    ...\r\n}\r\n```\r\n\r\nAdd code for automatically adding all users in the 'SomeRole' role in the Register.cshtml.cs:\r\n\r\n```\r\npublic class RegisterModel : PageModel\r\n{\r\n    ...\r\n    private readonly RoleManager<IdentityRole> _roleManager;\r\n\r\n    public RegisterModel(\r\n        ...\r\n        RoleManager<IdentityRole> roleManager)\r\n    {\r\n        ...\r\n        _roleManager = roleManager;\r\n    }\r\n\r\n    ...\r\n\r\n    public async Task<IActionResult> OnPostAsync(string returnUrl = null)\r\n    {\r\n        ...\r\n        if (ModelState.IsValid)\r\n        {\r\n            ...\r\n            if (result.Succeeded)\r\n            {\r\n                if (!await _roleManager.RoleExistsAsync(\"SomeRole\"))\r\n                    await _roleManager.CreateAsync(new IdentityRole(\"SomeRole\"));\r\n                await _userManager.AddToRoleAsync(user, \"SomeRole\");\r\n                ...\r\n            }\r\n            ...\r\n        }\r\n        ...\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nEdit Home.js to display JWT data:\r\n\r\n```\r\nimport React, { Component } from 'react';\r\nimport authService from './api-authorization/AuthorizeService'\r\n\r\nexport class Home extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { user: null };\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.loadData();\r\n    }\r\n\r\n    async loadData() {\r\n        this.setState({ user: await authService.getUser() });\r\n    }\r\n\r\n    render() {\r\n      let { user } = this.state;\r\n      return (\r\n        <div>\r\n          <h1>Claims</h1>\r\n          {JSON.stringify(user)}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n```\r\n\r\nAdd roles and custom profile claim in the client scopes in the Program.cs:\r\n\r\n```\r\nbuilder.Services.AddIdentityServer()\r\n    .AddApiAuthorization<ApplicationUser, ApplicationDbContext>(options =>\r\n    {\r\n        options.IdentityResources.Add(new IdentityResource(\"roles\", \"Roles\", new[] { JwtClaimTypes.Role, ClaimTypes.Role }));\r\n        options.IdentityResources.Add(new IdentityResource(\"custom\", \"Custom profile data\", new[] { nameof(ApplicationUser.FullName) }));\r\n        options.Clients.ToList().ForEach(c =>\r\n        {\r\n            c.AllowedScopes.Add(\"roles\");\r\n            c.AllowedScopes.Add(\"custom\");\r\n        });\r\n    });\r\n```\r\n\r\nAdd ApplicationUserClaimsPrincipalFactory  class:\r\n\r\n```\r\npublic class ApplicationUserClaimsPrincipalFactory : UserClaimsPrincipalFactory<ApplicationUser>\r\n{\r\n    public ApplicationUserClaimsPrincipalFactory(\r\n        UserManager<ApplicationUser> userManager, \r\n        IOptions<IdentityOptions> optionsAccessor) \r\n        : base(userManager, optionsAccessor) { }\r\n\r\n    protected override async Task<ClaimsIdentity> GenerateClaimsAsync(ApplicationUser user)\r\n    {\r\n        var identity = await base.GenerateClaimsAsync(user);\r\n        identity.AddClaim(new Claim(nameof(ApplicationUser.FullName), user.FullName));\r\n        return identity;\r\n    }\r\n}\r\n```\r\n\r\nAdd ApplicationUserClaimsPrincipalFactory usage in the services configuration in the Program.cs:\r\n\r\n```\r\nbuilder.Services.AddDefaultIdentity<ApplicationUser>(options => options.SignIn.RequireConfirmedAccount = true)\r\n    .AddRoles<IdentityRole>()\r\n    .AddClaimsPrincipalFactory<ApplicationUserClaimsPrincipalFactory>()\r\n    .AddEntityFrameworkStores<ApplicationDbContext>();\r\n```\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.100\r\n\r\n### Anything else?\r\n\r\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/46593","RelatedDescription":"Open issue \"Problem adding custom ClaimsPrincipalFactory when using roles\" (#46593)"},{"Id":"1580988964","IsPullRequest":true,"CreatedAt":"2023-02-11T19:39:33","Actor":"dotnet-maestro[bot]","Number":"46592","RawContent":null,"Title":"[release/8.0-preview1] Update dependencies from dotnet/efcore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:37f88077-0ad0-415a-d9c3-08daf99b6fcf)\r\n## From https://github.com/dotnet/efcore\r\n- **Subscription**: 37f88077-0ad0-415a-d9c3-08daf99b6fcf\r\n- **Build**: 20230211.4\r\n- **Date Produced**: February 11, 2023 7:24:27 PM UTC\r\n- **Commit**: f050d769ec32df29146c070dbf12bf42c903f7a1\r\n- **Branch**: refs/heads/release/8.0-preview1\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **dotnet-ef**: [from 8.0.0-preview.1.23107.1 to 8.0.0-preview.1.23111.4][1]\r\n  - **Microsoft.EntityFrameworkCore**: [from 8.0.0-preview.1.23107.1 to 8.0.0-preview.1.23111.4][1]\r\n  - **Microsoft.EntityFrameworkCore.Design**: [from 8.0.0-preview.1.23107.1 to 8.0.0-preview.1.23111.4][1]\r\n  - **Microsoft.EntityFrameworkCore.InMemory**: [from 8.0.0-preview.1.23107.1 to 8.0.0-preview.1.23111.4][1]\r\n  - **Microsoft.EntityFrameworkCore.Relational**: [from 8.0.0-preview.1.23107.1 to 8.0.0-preview.1.23111.4][1]\r\n  - **Microsoft.EntityFrameworkCore.Sqlite**: [from 8.0.0-preview.1.23107.1 to 8.0.0-preview.1.23111.4][1]\r\n  - **Microsoft.EntityFrameworkCore.SqlServer**: [from 8.0.0-preview.1.23107.1 to 8.0.0-preview.1.23111.4][1]\r\n  - **Microsoft.EntityFrameworkCore.Tools**: [from 8.0.0-preview.1.23107.1 to 8.0.0-preview.1.23111.4][1]\r\n\r\n[1]: https://github.com/dotnet/efcore/compare/7074fee...f050d76\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:37f88077-0ad0-415a-d9c3-08daf99b6fcf)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/46592","RelatedDescription":"Open PR \"[release/8.0-preview1] Update dependencies from dotnet/efcore\" (#46592)"},{"Id":"1580987641","IsPullRequest":true,"CreatedAt":"2023-02-11T19:35:13","Actor":"github-actions[bot]","Number":"46591","RawContent":null,"Title":"[release/7.0] Avoid stream ID and client result ID collisions","State":"open","Body":"Backport of #46570 to release/7.0\n\n/cc @BrennanConroy\n\n# Avoid stream ID and client result ID collisions\n\nSummary of the changes (Less than 80 chars)\n\n## Description\n\n{Detail}\n\nFixes #{bug number} (in this specific format)\n\n## Customer Impact\n\n{Justification}\n\n## Regression?\n\n- [ ] Yes\n- [ ] No\n\n[If yes, specify the version the behavior has regressed from]\n\n## Risk\n\n- [ ] High\n- [ ] Medium\n- [ ] Low\n\n[Justify the selection above]\n\n## Verification\n\n- [ ] Manual (required)\n- [ ] Automated\n\n## Packaging changes reviewed?\n\n- [ ] Yes\n- [ ] No\n- [ ] N/A\n\n----\n\n## When servicing release/2.1\n\n- [ ] Make necessary changes in eng/PatchConfig.props\n","Url":"https://github.com/dotnet/aspnetcore/pull/46591","RelatedDescription":"Open PR \"[release/7.0] Avoid stream ID and client result ID collisions\" (#46591)"},{"Id":"1580978678","IsPullRequest":false,"CreatedAt":"2023-02-11T19:07:40","Actor":"pr-benchmarks[bot]","Number":"46590","RawContent":null,"Title":"Blazor time to first UI improvement: blazorwasmbenchmark","State":"open","Body":"| Scenario | Environment | Date | Old (ms) | New (ms) | Change | Dependencies |\n| -------- | ----------- | ---- | -------- | -------- | ------ | ------------ |\n| blazorwasmbenchmark  |  | 02/10/2023 18:10:18 | 243 | 238 | -1.86 % (-5)  :thumbsup: | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/46590","RelatedDescription":"Open issue \"Blazor time to first UI improvement: blazorwasmbenchmark\" (#46590)"},{"Id":"1580978561","IsPullRequest":false,"CreatedAt":"2023-02-11T19:07:19","Actor":"pr-benchmarks[bot]","Number":"46589","RawContent":null,"Title":"Perf improvement: ApiCrudGetProductDetails","State":"open","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| ApiCrudGetProductDetails  | API return element details 7- Mvc Intel Linux | 02/09/2023 17:46:34 | 388,868 | 397,199 | 2.14 % (8,332)  :thumbsup:  | 3.45 σ | 2,412.62 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Mvc.dll</td>            <td>`1.0.0` -> `1.0.0`</td>            <td>https://github.com/aspnet/benchmarks/compare/f0fa42ee177c817080bc8b09871518a1d87cd73c...e0fc663da0d89d823130fd6d7b5109dd83f2f9ad</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`8.0.0-preview.2.23107.2` -> `8.0.0-preview.2.23109.2`</td>            <td>https://github.com/dotnet/aspnetcore/compare/cec7fbf64e63af88a9165cbbf14aa4ab6f8cc76d...4e0c598110f0af2e92e8e1f67e03d66dddbd4d2c</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`8.0.0-preview.2.23107.1` -> `8.0.0-preview.2.23109.1`</td>            <td>https://github.com/dotnet/runtime/compare/e71a4fb10d7ea6b502dd5efe7a8fcefa2b9c1550...ca3936bfadce33f58c17c30b91f67881f257fce1</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n<!-- [MSGPACK]lccMYs0QAM0QAM0QAM0P0cYAAAdj8oKRia5QcmV2aW91c1Jlc3VsdIeiSWTNsd2oRXhjbHVkZWTCq0RhdGVUaW1lVXRjktf/DKLdAGPirKsAp1Nlc3Npb26qMjAyMzAyMDcuMahTY2VuYXJpb7hBcGlDcnVkR2V0UHJvZHVjdERldGFpbHOrRGVzY3JpcHRpb27ZLUFQSSByZXR1cm4gZWxlbWVudCBkKADwJSA3LSBNdmMgSW50ZWwgTGludXioRG9jdW1lbnTaHQt7ImpvYnMiOnsiYXBwbGljYXRpb24PABFyxAABGgCQbmV0U2RrVmVypQDAIjoiOC4wLjEwMC1w7wD6CmV3LjIuMjMxMDcuOSIsImFzcE5ldENvcmUwAA4uANIyK2NlYzdmYmYiLCJuMwA/QXBwNgAN+RoxK2U3MWE0ZmIiLCJiZW5jaG1hcmtzL2J1aWxkLXRpbWUiOjI5NzkuMB8A+wZwdWJsaXNoZWQtc2l6ZSI6OTI2NTgkAHNzeW1ib2xzIgAsMjMfAER0YXJ0YgAgNjUeADBydW5yAPACLWNvdW50ZXIvY3B1LXVzYWdhAPkBNy4yNzI4NDY2MTI0NjE5No8A7Xdvcmtpbmctc2V0Ijo1awDwBXByaXZhdGUtbWVtb3J5IjoxMjkycAAH8ABsY3B1Ijo5wwDQY3B1L3JhdyI6Mjc1NzIADKIACnkAjjQ4LjI3MDA4KABzZ2MtaGVhcAwBnzMzMy45MjI5MioAAXJlbi0wLWdjBQE/Ijo2dwABV2dlbi0xJQAfMSUABR8yJQANsnRocmVhZHBvb2wtCwAEeAARNAwBDPAA8ARtb25pdG9yLWxvY2stY29udGVu4AIENQAfNccBAgJZAAFkAP8CcXVldWUtbGVuZ3RoIjoyMTK5AAEHMAD0AGNvbXBsZXRlZC1pdGVtc2gAbzQ0ODgxNDwAAf8GYWxsb2MtcmF0ZSI6MTc3NDA1MDcyywACxGFjdGl2ZS10aW1lclgAD0gBA6NjLWZyYWdtZW50zQP+AzEuMTUwNTM3MjQ1MDIyMDEyNCoBAcIB/gRtbWl0dGVkIjo0NjAuMTUyODMyKgBBZXhjZXYEBIYAHzDZAAEAqACfLWluLWdjIjoxFQIGEzBiAi81OB4BAgI4AgKzA181MjI3MycABxMySgAQNCcAHzROAAIzbG9oJQBPMTgzNWYBAxZwJABPMTg2MLoAA4Rhc3NlbWJseQEBLzEwGAICo2lsLWJ5dGVzLWpWAV8yODcyOJgDAmRtZXRob2QqAARYAPE8MzIzOS4wfSwibWV0YWRhdGEiOltdLCJkZXBlbmRlbmNpZXMiOlt7ImlkIjoiSFpxT2l2NmVMMWhwSEpIdG5lMTFnZz09IiwibmFtKgDwFCJNaWNyb3NvZnQuRXh0ZW5zaW9ucy5DYWNoaW5nLkFic3RyZgIAFQBfZGxsIiwwAAsRTZ4EDyoACnFvbmZpZ3VyhwIPYAAXCTYAb0JpbmRlcmYAF79Db21tYW5kTGluZTUAFw/EABZwRW52aXJvblwDj1ZhcmlhYmxlLAELCcwAR0ZpbGV5AQ92ABY/SW5pzAAXL0pz0QAZr1VzZXJTZWNyZXSQABg/WG1skAAJFESgAlF5SW5qZVECD/0BFg88AAEPKAEIAFIBn1Byb3ZpZGVyc2UAFgo2AI9Db21wb3NpdDACCgozAH9QaHlzaWNhBgEKADIA71N5c3RlbUdsb2JiaW5nNAEJQEhvc3QjAA+FAxUEMAAPHAEIT0h0dHBzAAlPTG9nZ3MAGQQwAArUAg+BAAgHMQA/c29sXwEKBCsAT0RlYnXVAAoEKQAPdwAQf0V2ZW50TG8sABdfU291cmOnABJfVHJhY2UvAA8RTycHCwYEDwEEEwQ7AIJEYXRhQW5ub8sHD6QDCgQzAA8bAQhQUHJpbWlHCAQmAAKhAmAuRGlhZ26CAixjczcBAyIApUlPLlBpcGVsaW7xBAMaAPsKU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlBrY2QADygAAwZLBANPABFU4QkAmAJRUmF0ZUywAAM7A1FdLCJyZasD8xRvcnlVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vZG90bmV0LwoKSSIsIna4DAyIDGI1LjQiLCL7CPMjSGFzaCI6IjU4NzE5ZWM5MGIzYmJhZTUyN2RkODE2ODViZjg2NzBiOTkzZmU4ZjkifSx8B/sHS2RIeXRFN3llWk00bWJrQzhWUCtmUXwHIXZjjgMPxgATMGFzcMYABvILCckAXDEuMC4wtwD2GWYwZmE0MmVlMTc3YzgxNzA4MGJjOGIwOTg3MTUxOGExZDg3Y2Q3M2O3AP8GempsS1cvcGhmR0hZTW5jSDFRSzYwMwgGIElkPQv0BXR5TW9kZWwuSnNvbldlYlRva2Vu6gEGXwgKLAAEagQMVQgKJgCPUHJvdG9jb2xOAA0GKADRT3BlbklkQ29ubmVjdF0BD4QABwmpAANsAgqAAAMiACJKd0sAD6gBE7BBenVyZUFEL2F6dcYAAAmP8C1yZS1hY3RpdmVkaXJlY3RvcnktaWRlbnRpdHltb2RlbC1leHRlbnNpb25zLWZvci1kb3RuZXQiLCJ2ZXIWAPCRIjoiNi4xNS4xLjMwMTE5MjE0NTM1LjllNmY5MGE5YTgwMzIxMDdhZjZmNWM4NTFlOWQyNTdmNGM2YzhmZGMiLCJjb21taXRIYXNoIjpudWxsfSx7ImlkIjoiMTJ6TmNjN1pNbG94Z0pVNjFJNEtkZz09IiwibmFtZXMiOlsiTmV3dG9uc29mdC5Kc29uLkJzb24uZGxsIl0sInJlcG9zadIAMlVybFwACLYAWzEuMC4ygAD1GyJhMWRiOTI2NzhlN2U3MmViNzMzZjM3MDc5ZjNhOTNiZmI2MjE1MzM4IqYA/wZvcCsxQ0x0Rm5lVTJBeWsvSFkvL2mmAAwPoQAD8AYiaHR0cHM6Ly9naXRodWIuY29tL0rpADtOSy/oABkiyQBbMy4wLjFKAfYaImFlOWZlNDRlMTMyM2U5MWJjYmQxODVjYTFhMTQwOTlmYmE3YzAyMWbKAPoHK2tMM0lQYXF2ZFZISVZSOG1VQnZyd8oAUU1pY3JvbwHvQXNwTmV0Q29yZS5BcHBwAQAPzwABAj0CuS9hc3BuZXRjb3JlyQD+BjguMC4wLXByZXZpZXcuMi4yMzEwN6QB9hljZWM3ZmJmNjRlNjNhZjg4YTkxNjVjYmJmMTRhYTRhYjZmOGNjNzZk2gD/BlZRZ3I5Q3hOSER3YVVHQWY5ZmYwVNoABj9ORVTXACNvcnVudGlt1AARDa4B8DdlNzFhNGZiMTBkN2VhNmI1MDJkZDVlZmU3YThmY2VmYTJiOWMxNTUwIn1dLCJtZWFzdXJlbWVudHMiOltdLCJlbnZpcm9uEgDxAyI6eyJodyI6IlBIWVNJQ0FMIh8A8TAiOiJVbnNwZWNpZmllZCIsIm9zIjoiTGludXgiLCJhcmNoIjoiWDY0IiwicHJvYyI6Mjh9LCJiZW5jaG1hcmtoAHB9LCJsb2FkYgBQcmVzdWx+ABd7JABxL3N0YXJ0LQQBaDoxMDUuMEIA+wIvd29ya2luZy1zZXQiOjEyNB8A+wRwcml2YXRlLW1lbW9yeSI6MjE3IgB+Y3B1Ijo1MhYAoC9yYXciOjE0NTAcAPAHaHR0cC9maXJzdHJlcXVlc3QiOjIwMxoA8Qpib21iYXJkaWVyL2JhZHJlc3BvbnNlcyI6OAAHHgCgbGF0ZW5jeS81MBwAPzYxOB4AAiA3NR4APzczMh4AAhE5PAA/ODU1HgADATwAHzkeAAUwOSI6UQUfNDwAAkBtZWFuegD/ADY1NTM4MzQ1Njg4Mjg4OGkAA5ttYXgiOjg0LjRNADJycHMcAPoANDE3MjQwLjc0NzkxMTU0RgABJgABbwD6ATM4ODg2Ny41NDI2MDkyMDD1AJB0aHJvdWdocHXbAfkCMzYuODA5NDUyODQ3NzI1NjLGAAGsATBbeyKNAgBAAvAAbnVtYmVyT2ZDb25uZWN0aQbwAyI6MjU2LCJ0ZXN0VHlwZSI6IlQCALYCABMAQER1cmEnALBTZWNvbmRzIjoxNRQD4HRob2QiOiJHRVQiLCJ18gUBggRQOi8vMTBZBPAELjEwMjo1MDAwL1Byb2R1Y3RzL4cDoGJvZHkiOiIiLCIwAqFhbSI6ZmFsc2UscwA1b3V0ZgBhMiwiY2xpYgNQImZhc3RnAiAiffcEAAsDAMoAcGJ5dGVzUmUiA7IyMTUxOTM1MzA3LBcA8gNXcml0dGVuIjo0MjU3MjE2MTliAFVUYWtlbmQAwDE1LjAwMDc1NzU1MVoAcXExeHgiOjALABAyCwBxNTgzMTgwMxEAEDMRAAIcABY0CwATNQsAUG90aGVy2wIjLCLOAgCjAAI7Aks2NTUuOgLxDHN0ZGRldiI6NTQ2LjA4ODM0MTQ2MTEzMzQsIiYCITg0QQJAcGVyYx0IEGw2AyB7IiADAR4DAAsDAQkDQTkwIjr0AkE5NSI63wIBzAJAMzA0fSwBEXA3AAKGAA9SAgAEhgDzAjM4ODc2LjEwNTE1MjY4MDc2hgAOrAIPkQAAIDM5qwJiLjEzOTg0mgDSNDA5MTI2Ljg0NTA3OaQA0jQxMjQzNi41Mzg2OTOuANI0MTM3NDMuNjY1NjMxuADwAzQxNTU1My43NTIwMjV9fX19XTECBUUEA2AEFXOYAQBlBAAYAg8aABAPggQBATsAA64BEC9cAQN8BAkYAABrAQN2BAkYAAB6AQNwBAoYAAZqBAoYAACYAQJkBAkYAAKdAQ9eBAEKJwAIWAQBGgABLAQAFgAOpgEGIAAPTAQFASIAD0YECxF95gNSYWRhdGH2BrNkZXBlbmRlbmNpZQgHDxoHZhF9NwdBcGVydIwA8wh7InNjZW5hcmlvIjoiQXBpQ3J1ZEdldHkE9AxEZXRhaWxzIiwiYnVpbGRJZCI6IjIxMDY3OTkUABFOFQUAGABXMDIzMDIzCHBhbmQtbGluFQXwAGNyYW5rIC0tY29uZmlnIEMBAD8KQnJhdy5DCvMAdXNlcmNvbnRlbnQuY29teAklL0LWB5cvbWFpbi9zcmMUAKVBcHBzL012Yy9iJwDPLmNydWRhcGkueW1scAAwAfYA7y9henVyZS5wcm9maWxlWgA6K2NpVwAEjQEfIIsBBTMgLS2JAGAgaW50ZWxiAU4tYXBwGAAxb2FkBQANGgBwZGItZGIgLTYAMWxpY6EGYC5mcmFtZfcIeyBuZXQ4LjAfACBvcCYA+wdzLmNvbGxlY3RDb3VudGVycyB0cnVlKwADIwAXRPICAScAwSJ9fa1DdXJyZW50UpMJ8yOHoklkzbJ1qEV4Y2x1ZGVkwqtEYXRlVGltZVV0Y5LX/xiOnwBj5TF6AKdTZXNzaW9uqmICUzkuMahTtQIfuCgBBXGrRGVzY3JpuADxANktQVBJIHJldHVybiBlbI8KIiBk2wKQIDctIE12YyBJTQERIGYKUKhEb2N1oQqB2h0LeyJqb2IKBgcuAQA2AxFyxAABGgCQbmV0U2RrVmVypQBBIjoiOMIHDB8MdTkuNCIsImGMDAowAA4uAJAyKzRlMGM1OTifDQK/DD9BcHA2AA2QMStjYTM5MzZinwMFEwsCyAID7wo8Mjk0mQr8BXB1Ymxpc2hlZC1zaXplIjo5MjY5JABzc3ltYm9scyIAEjKmCgZiAAhRCywyNxALAFoCBVELMDUyMH4GBrUDDVELKzEyfwBQcy9jcHXGAAAHTvARIjo5OC4wLCJiZW5jaG1hcmtzL2NwdS9yYXciOjI3NTUcAPAAcnVudGltZS1jb3VudGVyIQBhLXVzYWdlPQDuMzAxNDMzNjUwNzAzMDcuAP4Hd29ya2luZy1zZXQiOjU0NC4yMzU1MigA/wlnYy1oZWFwLXNpemUiOjM0MC4xNjc1NjgqAAByZW4tMC1nY5EAPyI6NqUAAVdnZW4tMSUAHzElAAUfMiUADbJ0aHJlYWRwb29sLQsABHgAETQ6AQweAfQIbW9uaXRvci1sb2NrLWNvbnRlbnRpb241AB82rgACAlkAAWQA/wFxdWV1ZS1sZW5ndGgiOjE0uQACBzAA9ABjb21wbGV0ZWQtaXRlbXNoAF80NTkxMb8BAv8HYWxsb2MtcmF0ZSI6MTgxNzY2OTM2MB8BAXBhY3RpdmUt/QEUclgAD48AAsBnYy1mcmFnbWVudGHtAAAnAP4BMTI3MDgxMjQ5NzE3OTM4NSoBAcIB/wNtbWl0dGVkIjo0NjQuMTA1NDccAgBQZXhjZXBZAASGAA+vAAIAqABvLWluLWdjIQAEABQCEzBhAj81ODTzAAEAIwAUMSMAXzMwMjI5sAECACcAEzInAG80MzE4MDgMAgIzbG9oJQBfMTgzNTIkAAIWcCQAXzE4NjAxcAAChGFzc2VtYmx5AAE/MTAyvgABo2lsLWJ5dGVzLWpVAW8yODYyMTkrAAFkbWV0aG9kKgAEWADxPDMyMjcuMH0sIm1ldGFkYXRhIjpbXSwiZGVwZW5kZW5jaWVzIjpbeyJpZCI6IkhacU9pdjZlTDFocEhKSHRuZTExZ2c9PSIsIm5hbSoA8BQiTWljcm9zb2Z0LkV4dGVuc2lvbnMuQ2FjaGluZy5BYnN0cmUCABUAX2RsbCIsMAALb01lbW9yeSoACnFvbmZpZ3VyhgIPYAAXCTYAb0JpbmRlcmYAF79Db21tYW5kTGluZTUAFw/EABZwRW52aXJvblsDj1ZhcmlhYmxlLAELCcwAR0ZpbGV5AQ92ABY/SW5pzAAXL0pz0QAZr1VzZXJTZWNyZXSQABg/WG1skAAJFESgAlF5SW5qZVECD/0BFg88AAEPKAEIAFIBn1Byb3ZpZGVyc2UAFgo2AI9Db21wb3NpdDACCgozAH9QaHlzaWNhBgEKADIA71N5c3RlbUdsb2JiaW5nNAEJQEhvc3QjAA+FAxUEMAAPHAEIT0h0dHBzAAlPTG9nZ3MAGQQwAArUAg+BAAgHMQA/c29sXwEKBCsAT0RlYnXVAAoEKQAPdwAQf0V2ZW50TG8sABdfU291cmOnABJfVHJhY2UvAA8RTyYHCwYEDwEEEwQ7AJFEYXRhQW5ub3REBQ+kAwoEMwAPGwEIUFByaW1pRggEJgACoQJgLkRpYWduggIsY3M3AQMiAKVJTy5QaXBlbGlu8QQDGgD7ClNlY3VyaXR5LkNyeXB0b2dyYXBoeS5Qa2NkAA8oAAMGSwQDTwARVOAJAJgCUVJhdGVMsAADOwNRXSwicmWrA/MUb3J5VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL2RvdG5ldC8JCmAiLCJ2ZXLpBvIOIjoiOC4wLjAtcHJldmlldy4yLjIzMTA1LjQiLCL6CPMjSGFzaCI6IjU4NzE5ZWM5MGIzYmJhZTUyN2RkODE2ODViZjg2NzBiOTkzZmU4ZjkifSx8B/sHS2RIeXRFN3llWk00bWJrQzhWUCtmUXwHIXZjjgMPxgATMGFzcMYABgkMCckAEDHJAAy3APYZZTBmYzY2M2RhMGQ4OWQ4MjMxMzBmZDZkN2I1MTA5ZGQ4M2YyZjlhZLcA/wZ6amxLVy9waGZHSFlNbmNIMVFLNjAzCAYgSWQ8C/QFdHlNb2RlbC5Kc29uV2ViVG9rZW7qAQZfCAosAA+1AwUKJgCPUHJvdG9jb2xOAA0GKADRT3BlbklkQ29ubmVjdF0BD4QABwmpAANsAgqAAAMiACJKd0sAD6gBE5BBenVyZUFEL2EIADAtYWNdA7NkaXJlY3RvcnktaTMBEG0zASUtZXQJUi1mb3ItqQIJ2AH7LDYuMTUuMS4zMDExOTIxNDUzNS45ZTZmOTBhOWE4MDMyMTA3YWY2ZjVjODUxZTlkMjU3ZjRjNmM4ZmRjDgJFbnVsbJ8C+wYxMnpOY2M3Wk1sb3hnSlU2MUk0S2ToAUBOZXd0qAUhZnTbASQuQkcIDggBSG51bGxXAwCOAhsygAD1GyJhMWRiOTI2NzhlN2U3MmViNzMzZjM3MDc5ZjNhOTNiZmI2MjE1MzM4IqYA/wZvcCsxQ0x0Rm5lVTJBeWsvSFkvL2mmAAwPoQADDxcEAYtKYW1lc05LL+gAGSLJAFwzLjAuMQ8E9hlhZTlmZTQ0ZTEzMjNlOTFiY2JkMTg1Y2ExYTE0MDk5ZmJhN2MwMjFmygD/BytrTDNJUGFxdmRWSElWUjhtVUJ2cneLCwWwQXNwTmV0Q29yZS7GAAAJJ//IQXBwIl0sInJlcG9zaXRvcnlVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vZG90bmV0L2FzcG5ldGNvcmUiLCJ2ZXJzaW9uIjoiOC4wLjAtcHJldmlldy4yLjIzMTA5LjIiLCJjb21taXRIYXNoIjoiNGUwYzU5ODExMGYwYWYyZTkyZThlMWY2N2UwM2Q2NmRkZGJkNGQyYyJ9LHsiaWQiOiJWUWdyOUN4TkhEd2FVR0FmOWZmMFR3PT0iLCJuYW1lcyI6WyJNaWNyb3NvZnQuTkVUQ29yZS7XAB5vcnVudGlt1AARHDHUAPAKY2EzOTM2YmZhZGNlMzNmNThjMTdjMzBiOdgA8Bo4ODFmMjU3ZmNlMSJ9XSwibWVhc3VyZW1lbnRzIjpbXSwiZW52aXJvbhIA8QMiOnsiaHciOiJQSFlTSUNBTCIfAPEwIjoiVW5zcGVjaWZpZWQiLCJvcyI6IkxpbnV4IiwiYXJjaCI6Ilg2NCIsInByb2MiOjI4fSwiYmVuY2htYXJraABwfSwibG9hZGIAUHJlc3VsfgAXeyQAcS9zdGFydC0EAWg6MTA4LjBCAPsCL3dvcmtpbmctc2V0IjoxMjQfAPsEcHJpdmF0ZS1tZW1vcnkiOjIxNyIAbGNwdSI6NTgA0GNwdS9yYXciOjE1MTEyAAB4AvADL2ZpcnN0cmVxdWVzdCI6MjA1GgD7C2JvbWJhcmRpZXIvYmFkcmVzcG9uc2VzIjowHgCgbGF0ZW5jeS81MBwAOTYwNDwABB4AIDc1HgA/NzE2HgACETk8AD84MzceAAMBPAA/OTM4HgADjzkiOjEuMjkxHgACQG1lYW56AP8ANjQxOTEzMTgwMTMyMTcyhwADuW1heCI6NzIuOTMzTQAycnBzHAD6ATQyMTczMC45NzQwMTg2NDPsAAEnAAFwAPoBMzk3MTk5LjE0NTk3MTM1Nk8AkHRocm91Z2hwddwB+gAzOS43MTQwOTY4MjQ5NzfkAAGsATBbeyKNAgBAAvAWbnVtYmVyT2ZDb25uZWN0aW9ucyI6MjU2LCJ0ZXN0VHlwZSI6IlQCALYCABMAQER1cmEnAHBTZWNvbmRz+QEAFAPldGhvZCI6IkdFVCIsInWCBGA6Ly8xMC4CAPADMTAyOjUwMDAvUHJvZHVjdHMvhwOgYm9keSI6IiIsIjACoWFtIjpmYWxzZSxzADVvdXRmAGEyLCJjbGliA1AiZmFzdGcCICJ99wQACwMAygBwYnl0ZXNSZSIDkDIxOTc2NTI5M8IBABcA8gNXcml0dGVuIjo0MzQ3NjYwMjdiAFVUYWtlbmQAwDE1LjAwMDk1Njk4NVoAcXExeHgiOjALABAyCwBxNTk1NTY5OREAEDMRAAIcABY0CwATNQsAUG90aGVy2wIjLCKwAgCjAAI7Aks2NDEuOgLxDHN0ZGRldiI6NDc5LjU0NDk2NDAxNDgxNjYsIiYCITcyQQKQcGVyY2VudGlsNgMgeyIgAwEeAwALAwEJAwD2AgH0AkE5NSI63wIBzAJAMjkxfSwBEXA3AAKGAA9RAgAEhgDzAjM4ODY1LjQ1Nzc5NDM5OTA5hgAPrAIAD5IAANI0MDc5MzYuNTc0OTU3nADDNDE0OTQxLjEwMjczpgDSNDE3Mzk3LjU3OTA5NLAAwjQxODQwMS40MDA2NbkAEDTIAbA5LjAxNjU4OH19fX8FB0YEA2EEFXOZAQBIBAAZAg8aABAPgwQBATsAA68BCH0ECRgAAGwBITAubgEJGAAAewEDcQQKGAAGawQKGAAAmQECZQQJGAACngEPXwQBCicACFkEARoAASwEABYAD6cBAAYhAA9NBAUBIgAPRwQKEX3nA1BhZGF0YY8GwCwiZGVwZW5kZW5jaY8CABIADxsHZhF9OAdBcGVydIwA8wh7InNjZW5hcmlvIjoiQXBpQ3J1ZEdldHoE9AxEZXRhaWxzIiwiYnVpbGRJZCI6IjIxMDkyNDkUABFOFgUAGABXMDIzMDI0CHBhbmQtbGluFgXwAGNyYW5rIC0tY29uZmlnIEIBgnM6Ly9yYXcudQmxdXNlcmNvbnRlbnSACQJ5CSUvQtcHly9tYWluL3NyYxQApUFwcHMvTXZjL2InAM8uY3J1ZGFwaS55bWxwADAB9gDvL2F6dXJlLnByb2ZpbGVaADorY2lXAASNAR8giwEFMyAtLYkAYCBpbnRlbGIBTi1hcHAYADFvYWQFAA0aAHBkYi1kYiAtNgAxbGljogZgLmZyYW1l+Ah7IG5ldDguMB8AIG9wJgD7B3MuY29sbGVjdENvdW50ZXJzIHRydWUrAAMjABdE8gIBJwDxESJ9faZDaGFuZ2XLQMBFzTr4nCCxU3RhbmRhcmREZXZpiADxFstAotk8KUlJU6dBdmVyYWdly0EYBbPStrAWr1JlY292ZXJlZFLSCfEZwKZMYWJlbHOUqGFyZWEtbXZjpFBlcmavcGVyZi1yZWdyZXNzaW9uqR4AABUAkqZPd25lcnOQp4UAh3OTiaNKb2KrBQH4HqJJZLhLZEh5dEU3eWVaTTRtYmtDOFZQK2ZRPT2lTmFtZXORp012Yy5kbGytUkMMJNkk0QICzQIIwgIGmwKir1ByZXZpb3VzVkgM6aUxLjAuMK5DdXJyZW50FQAUsisAFUNPDPMc2ShmMGZhNDJlZTE3N2M4MTcwODBiYzhiMDk4NzE1MThhMWQ4N2NkNzNjsVIACDwA8hplMGZjNjYzZGEwZDg5ZDgyMzEzMGZkNmQ3YjUxMDlkZDgzZjJmOWFkqh0BAMwIHwAgAQL1BytrTDNJUGFxdmRWSElWUjhtVUJ2cncgAfQCuE1pY3Jvc29mdC5Bc3BOZXSgDA8xARANcw0MMQEgtzgxAQt3DTs3LjJDAQ8nAAI/OS4yVQEC/xljZWM3ZmJmNjRlNjNhZjg4YTkxNjVjYmJmMTRhYTRhYjZmOGNjNzZkVQEBD98NFQ9VAQ4P9g0FA3UCFrVVAT9ORVRSAQQfIYMCAANSAQPuDQ9PARQfMU8BEx8xTwEC/xllNzFhNGZiMTBkN2VhNmI1MDJkZDVlZmU3YThmY2VmYTJiOWMxNTUwTwEBD1oOFQNPAVBUeXBlAA==[/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/46589","RelatedDescription":"Open issue \"Perf improvement: ApiCrudGetProductDetails\" (#46589)"},{"Id":"1580978543","IsPullRequest":false,"CreatedAt":"2023-02-11T19:07:15","Actor":"pr-benchmarks[bot]","Number":"46588","RawContent":null,"Title":"Perf regression: plaintext","State":"open","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| plaintext  | Plaintext Query String 3- Trends Arm 28 Linux | 02/10/2023 10:18:33 | 4,930,373 | 4,748,571 | -3.69 % (-181,802)  :thumbsdown:  | -2.07 σ | 87,751.60 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.Extensions.Caching.Abstractions.dll</td>            <td>`8.0.0-preview.2.23105.4` -> `8.0.0-preview.2.23106.7`</td>            <td>https://github.com/dotnet/runtime/compare/58719ec90b3bbae527dd81685bf8670b993fe8f9...b39d6a6eb44860746e91e5ce4f585beff33d1f63</td></tr><tr>            <td>Benchmarks.dll</td>            <td>`1.0.0` -> `1.0.0`</td>            <td>https://github.com/aspnet/benchmarks/compare/4c9ee8a45e54c01359cd48944cb61326d18ea7ab...85293e69e70e5989044890d0713eb88851d087f2</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`8.0.0-preview.2.23108.7` -> `8.0.0-preview.2.23109.11`</td>            <td>https://github.com/dotnet/aspnetcore/compare/f58f9546be23e6480569b2143e7aec168f666b2a...8e0155cc7065093c8be8d5d014277ca0c2723da4</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`8.0.0-preview.2.23108.4` -> `8.0.0-preview.2.23109.14`</td>            <td>https://github.com/dotnet/runtime/compare/43a60c8ed073a4c6134facadd01c9c1c2643e41a...46cb4eddbb1f4bebdea970964d7449bacde8df1a</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK]l8cSYs0QAM0QAM0QAM0QAM0QAM0G38YAAAdz8KuRia5QcmV2aW91c1Jlc3VsdIeiSWTOAARAK6hFeGNsdWRlZMKrRGF0ZVRpbWVVdGOS1/85OHAAY+QY4ACnU2Vzc2lvbqoyMDIzMDIwOC4yqFNjZW5hcmlvqXBsYWludGV4dKtEZXNjcmlwdGlvbtktUGxhaW50ZXh0IFF1ZXJ5IFN0cmluZyAzLSBUcmVuZHMgQXJtIDI4IExpbnV4qERvY3VtZW502iSteyJqb2JzIjp7ImFwcGxpY2FQAFEiOnsicrcAARoAkG5ldFNka1ZlcpYAwCI6IjguMC4xMDAtcOIA+gpldy4yLjIzMTA4LjkiLCJhc3BOZXRDb3JlMAAOLgDSNytmNThmOTU0IiwibjMAP0FwcDYADfkaNCs0M2E2MGM4IiwiYmVuY2htYXJrcy9idWlsZC10aW1lIjozOTgwLjAfAPsHcHVibGlzaGVkLXNpemUiOjEyMTE5OSUAc3N5bWJvbHMjACw1MR8AQ3RhcnRjADAyMTMeADBydW5zAPkWLWNvdW50ZXIvY3B1LXVzYWdlIjo5OS41MTg0MjU0MjI0NzA3NpAA8AF3b3JraW5nLXNldCI6NzE1TQAHzgD8BHByaXZhdGUtbWVtb3J5IjoxNTCOAGxjcHUiOjM5AN9jcHUvcmF3IjoyNzk0ogABCnkAnjQ4LjY5OTY0OCkAdGdjLWhlYXANAY81Mi44NTM4NCkAAHJlbi0wLWdjBQE/Ijo2dwABV2dlbi0xJQAfMiUABRcyJQAB8wAMYwGydGhyZWFkcG9vbC0LAAR4AC80OFQAAfAEbW9uaXRvci1sb2NrLWNvbnRlbuECBDUALzEzyQEDAlsAAWYA/wJxdWV1ZS1sZW5ndGgiOjE0MmcAAQcwAPQAY29tcGxldGVkLWl0ZW1zagBfMzU1NTijAAKQYWxsb2MtcmF0uwKPMTIwMjY2NTFmAAJhYWN0aXZlgwIUclgAAeoCDCUBcGdjLWZyYWfjAxBh7wD/BSI6MTYuMTQ3MzgwOTUzOTA1MDQ2NgAC/wVjb21taXR0ZWQiOjY3MC43MDM2MSoAAFBleGNlcFkABIYAITQ1igIMiAABHQNfaW4tZ2OpAAUBPQIClANfOTc1MTc+AggCJgBSMjk0MzTgAwxuAABlAhMysQJvMzEzNTg3RgECM2xvaCUATzIxNzAkAAMWcCQAXzI0NDI0ZgEChGFzc2VtYmx5BQEROFEEDJYAo2lsLWJ5dGVzLWpZAV8xODExNC8BAmRtZXRob2QqAARXADEyMDFZAAcgBADnA9NwZXJpb2RzL3RvdGFsXwEPIwAFYGhyb3R0bNYBAckACycACh8A8TZ9LCJtZXRhZGF0YSI6W10sImRlcGVuZGVuY2llcyI6W3siaWQiOiJIWnFPaXY2ZUwxaHBISkh0bmUxMWdnPT0iLCJuYW0qAPAUIk1pY3Jvc29mdC5FeHRlbnNpb25zLkNhY2hpbmcuQWJzdHLSAgAVAF9kbGwiLDAACxFNDAUPKgAKcW9uZmlndXLzAg9gABcJNgBvQmluZGVyZgAXv0NvbW1hbmRMaW5lNQAXD8QAFnBFbnZpcm9uyAOPVmFyaWFibGUsAQsJzABHRmlsZXkBD3YAFj9JbmnMABcvSnPRABmvVXNlclNlY3JldJAAGD9YbWyQAAkURKACUXlJbmplUQIP/QEWDzwAAQ8oAQgAUgGfUHJvdmlkZXJzZQAWCjYAj0NvbXBvc2l0MAIKCjMAf1BoeXNpY2EGAQoAMgDvU3lzdGVtR2xvYmJpbmc0AQlASG9zdCMAD4UDFQQwAA8cAQhPSHR0cHMACU9Mb2dncwAZBDAACtQCD4EACAcxAD9zb2xfAQoEKwBPRGViddUACgQpAA93ABB/RXZlbnRMbywAF19Tb3VyY6cAEl9UcmFjZS8ADyBPcPwCCwYEDwEEEwQ7AJFEYXRhQW5ub3REBQ+kAwoEMwAPGwEIUFByaW1pswgEJgACoQJgLkRpYWduggIsY3M3AQMiAKVJTy5QaXBlbGlu8QQDGgD7ClNlY3VyaXR5LkNyeXB0b2dyYXBoeS5Qa2NkAA8oAAMGSwQDTwARVE8KAJgCUVJhdGVMsAADOwNRXSwicmWrA/MUb3J5VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL2RvdG5ldC/2B0kiLCJ2Jw0M9wxiNS40IiwiZwn1I0hhc2giOiI1ODcxOWVjOTBiM2JiYWU1MjdkZDgxNjg1YmY4NjcwYjk5M2ZlOGY5In0sfAf/BWZzU0lpNUJHc2Vvb3BLUExjNVhRfAcFYldpbjMyLvAAAW4BCyoBCmEDCQ4AVU1hbmFnDwcCQwBQLkRyYXcxAQD7BgX8BQMcABJSEQ0F5QcC2AcDHQAPkwEDkFByb3RlY3RlZHwCA0EEDDEAYlBlcm1pc0AICVMAeFdpbmRvd3NgCAAgAA+7AQA/Z2l0uQEWXDUuMC4wpwHwH2NmMjU4YTE0YjcwYWQ5MDY5NDcwYTEwOGYxMzc2NWUwZTU5ODhmNTEifSx7ImnGAAAI3PJqZCI6ImpLWkVidVFFcnllaG4yYWcyL3ZJNmc9PSIsIm5hbWVzIjpbIk1pY3Jvc29mdC5EYXRhLlNxbENsaWVudC5kbGwiXSwicmVwb3NpdG9yeVVybCI6bnVsbCwidmVyc2lvbiI6IjQuMC4wIiwiY29tbWl0SGFzaCQAUH0seyJphAD7Bm9wKzFDTHRGbmVVMkF5ay9IWS8vaYQAYU5ld3RvboUAT0pzb257AATwBiJodHRwczovL2dpdGh1Yi5jb20vSscAO05LL0IAGCKjAGsxMy4wLjGkAPUbImFlOWZlNDRlMTMyM2U5MWJjYmQxODVjYTFhMTQwOTlmYmE3YzAyMWYiygD6B0dMSjdZRXRpc2wydWc5bmtkTjJFWkFOAW9OcGdzcWzBABgRbjEAAwcACbcAHzZaAQD2GiI2NTVhMDE5MWI5ODY0MDQ5MjhkYjQ2NmY1MTJiYWM1ZDRjNmFmZDNhtgD7BmY4bTRrLzFtTW5aZ3BvbEJkSzMvT7YABgQC/wRCY2wuQXN5bmNJbnRlcmZhY2VzzQAEDAkCAGUBHDBlAfcYNGFjNGMwMzY3MDAzZmUzOTczYTM2NDhlYjA3MTVkZGIwZTNiYmNlrwD6B1BvRm1hVUFkWVFWRjF4ZHJySkpwYndlAZ9CZW5jaG1hcmucAAUPKgIBhWFzcG5ldC9iPAAJbQEfMW0BAfYZNGM5ZWU4YTQ1ZTU0YzAxMzU5Y2Q0ODk0NGNiNjEzMjZkMThlYTdhYm0B+gcxbFI5emt1bllSOFhzSDMrWmcyRTdnvgAGbQFQRXh0ZW5IA/8Bcy5EZXBlbmRlbmN5TW9kZUECGTBkb3TYAHlydW50aW1l1QAfNtUAAvYYODIyZTNjM2FhNzdlYjgyYjJmYjMzYzkzMjFmOTIzY2YxMWRkZGU21QD/BnNZK3JiUDg3WmZqYkcyL3lTOVRxctUABp9JZGVudGl0eS5HBBwuMjI/AvYZNTAwMGY0YTU2MjRjMWFjZDRjZjFjMDdiMjVjNmFiYjVlZWRmNzQ2Y6wA/wZ6amxLVy9waGZHSFlNbmNIMVFLNjCsAA4CdAEAewSCV2ViVG9rZW5aAhcsHgUE2AACLABxTG9nZ2luZxwDDyYAB49Qcm90b2NvbE4ADQYoAN9PcGVuSWRDb25uZWN0XgAMCakAa1N5c3RlbaYAAyIAIkp3SwAPzgUPMDYuOCwF/CMxMDEyMjM1NjA0LjgyNDA2OGFkYWViN2IxNThkZjJiMzZkODc4N2Y2ODk2NDZlNzE1ZbsBAB4EBTkF/wdTVkFwV0IxMkNWa3d0UmRaM3g5MThBFgMFBIcGPWl0ZQEBEUVbAvEHRnJhbWV3b3JrQ29yZS5BYnN0cmFjdEgDDJABDzEAAQ8kABFAUmVsYVIAEmGLAwjjAQ+EAAEPrwAYkVNxbFNlcnZlct0ADpMBD7wEAQPkA19lZmNvcuMDEPYZMGUzNzQyMTgzZTZhZTJiNmMzODgzNDkxOTY5OGQyNDE4MzgzNGQ4MTcD+wZ3Z0RrN3RZY3BjNnVGT2F6aDlwb3GiAQPbBg//AAGvUG9zdGdyZVNRTNUAGALzBgPVAD8ucGf9Bg/2GTAyNWZjNTUxODlhZTQxZTNmMmI5OGJjYmU0ZWI0NGM1MDU2NTM3MDDYAPoHKzkwVXl3N3kxMFdRaW1QZUVQWlJhUXoC8QpTUUxpdGVQQ0xSYXcuYmF0dGVyaWVzX3YyzAAaLCAAAIEBDxgAAcFwcm92aWRlci5lX3MMAhEzJgAP3wETlWVyaWNzaW5rL4sASS5yYXcQAVsyLjAuNl4HCWQD+wZSbVBQSzNHQUNTQ1A0TW54VUtCMFjqAFVBenVyZSMED6EABABWAAiKAUwxLjMu3gP2GiJhYzAwMzU4ZjU4ZmY3NDNlMmJkMjA4NTNjMTFiZDhhMTkwMjViYTY4igH/BmdVdjRING1OcGY2L2NXNS8xRjk0dKAAAgHVAw99ChM+MS42nAD2GTc4MzhjMmE4ZDUwNThmNmU5MGUzNjljMTBhYmEzYjkzOWRiNzQ5MDWcAPsGZXdzTCsydjRRZjM4c3A2SHVxbzVD/gJPRGFwcLQDBgw0AQCuAR0zNQGmMjQ3ZTQ5OGYwZXsA/wY4eFpTNTVZa3F1bm9PUEFLZnV0UkGwBg4EXAcHQQgjTXOrBA5zAg6eAEsxNi41TQL2GiJjMjNkZDJjMjExZjg4MTQzYjU4M2EzZGQ2OWU1MGNjNTViOGM3ZTQzvAD7BjEyek5jYzdaTWxveGdKVTYxSTRLZLwAC5gLLy5C3wsHDKcAXDEuMC4ypgD3GGExZGI5MjY3OGU3ZTcyZWI3MzNmMzcwNzlmM2E5M2JmYjYyMTUzM3kC+gcra0wzSVBhcXZkVkhJVlI4bVVCdnJ3GQMGBA1hQXNwTmV0gwI/QXBwTQEAD58FCAJiCgAiBBgiQQMAUgf8BDAtcHJldmlldy4yLjIzMTA4LjfaAABMA/UWOTU0NmJlMjNlNjQ4MDU2OWIyMTQzZTdhZWMxNjhmNjY2YjJhIlcH/wZWUWdyOUN4TkhEd2FVR0FmOWZmMFTaAAY/TkVU1wAjD1oKAQ/UAAMcNNQA8Dc0M2E2MGM4ZWQwNzNhNGM2MTM0ZmFjYWRkMDFjOWMxYzI2NDNlNDFhIn1dLCJtZWFzdXJlbWVudHMiOltdLCJlbnZpcm9uEgDxASI6eyJodyI6IkFNUEVSRSIdAPATIjoiVW5zcGVjaWZpZWQiLCJvcyI6IkxpbnV4IiwiYXJjaDEAMHJtNpkAxXByb2MiOjgwfSwiYkAMAGgAcH0sImxvYWRiAFByZXN1bH4AF3skAHEvc3RhcnQtXgtIOjAuMEAA+wIvd29ya2luZy1zZXQiOjEyMR8A+wRwcml2YXRlLW1lbW9yeSI6MzU4IgB+Y3B1Ijo0NRYAEC8DBlA6MTI2NhwAAPsOwC9maXJzdHJlcXVlc24AIDA3GgDwCXdyay9ycHMvbWVhbiI6NDkzMDM3My4yOcYAAAgh8gksIndyay90aHJvdWdocHV0Ijo2MjAuNjYYAPIDbGF0ZW5jeS9tYXgiOjQ4LjcyGADyBXJlcXVlc3RzIjo3NDQ0ODExNC4wGgD7B2Vycm9ycy9iYWRyZXNwb25zZXMiOjAeAGJzb2NrZXQrAAceAARuACA1MBUAMjUxM1MABBcAIDc1FwA6NzQ2FwCLOTAiOjUuNzQWABA5LQADlQAEQgBAbWVhbhcAvzc2OTExLCJodHRwHAAKM3JwczQAozQ5MzAzNzMuMjk3AA8yAQEKUAAHMwEBGQAPNAEDCRsADzcBAQohAAk0AQEbAATAAAc1AQkYAAc2AQkYAAY3AQoXAAI4AfAMfSwibWV0YWRhdGEiOltdLCJkZXBlbmRlbmNp0QEAEgCgbWVhc3VyZW1lbggCABIAcGVudmlyb24SAPEDIjp7Imh3IjoiUEhZU0lDQUwiHwDxMCI6IlVuc3BlY2lmaWVkIiwib3MiOiJMaW51eCIsImFyY2giOiJYNjQiLCJwcm9jIjoyOH0sImJlbmNobWFya2gAIX19HQBBcGVydIwAoHsic2NlbmFyaW9vAPIEbGFpbnRleHRRdWVyeVN0cmluZ00AcXRvY29sIjr1AfQFIiwiYnVpbGRJZCI6IjIxMDg1MjAUAGBOdW1iZXIYAPAbMDIzMDIwOC4yIiwiY29tbWFuZC1saW5lIjoiY3JhbmsgLS1jb25maWcgQgH1F3M6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2FzcG5ldC9CygBkL21haW4vugA0cy9wuQAWLu4ATy55bWxlADAB6wDvL2F6dXJlLnByb2ZpbGVaADorY2lXAATWABUg1QAzIC0tegBAIGFybUYBdy0yOC1hcHAZAAC4AXFsLWxvYWQyBgD2AiAtLXZhcmlhYmxlIHBhdGg9JAEgP3HeAYExPWxvcmVtJg0AYzI9aXBzdQ0A8AAzPWRvbG9yJTIwZXN0IC1pAPsKbGljYXRpb24uZnJhbWV3b3JrIG5ldDguMB8Ah2NvbGxlY3RE7wJbIHRydWUnACBvcE0AFHMvAHJDb3VudGVyKwDyNiJ9fa1DdXJyZW50UmVzdWx0h6JJZM4ABELEqEV4Y2x1ZGVkwqtEYXRlVGltZVV0Y5LX/7ElHwBj5hn5AKdTZXNzaW9uqn4CYzEwLjGoU98CFalPAXGrRGVzY3JphAA02S1QOwIRIPUCEiD2AvEDIDMtIFRyZW5kcyBBcm0gMjggZwNQqERvY3WiA4HaJLJ7ImpvYkIDByEBAA8AEXK3AAEaAJBuZXRTZGtWZXKWAPobIjoiOC4wLjEwMC1wcmV2aWV3LjIuMjMxMDkuMTEiLCJhc3BOZXRDb3JlMQAPLwABwis4ZTAxNTVjIiwibjQAP0FwcDcADnE0KzQ2Y2I0PAQGFwQRL84DsC10aW1lIjo0MDA0cAYHHwD7B3B1Ymxpc2hlZC1zaXplIjoxMjExNjglAHNzeW1ib2xzIwAsNTEfAEN0YXJ0YwA7MjE2HgAAUQLLaW5nLXNldCI6NzE5HwD7BXByaXZhdGUtbWVtb3J5IjoxNTA3IwB+Y3B1IjozNRYAAFYEYCI6Mjc4MhwAMHJ1bucAIi1jcgL+Di9jcHUtdXNhZ2UiOjk5LjE1MjMwNjcwNzE0NDQzLgAKpwCONDkuMzgzNjgoAHRnYy1oZWFwDAGfNTUuMjI2MTM2KgAAcmVuLTAtZ2ORACEiOhkBDKUAV2dlbi0xJQABXAEPJQABHzIlAA2ydGhyZWFkcG9vbC0LAAR4ABE0zwEMVADAbW9uaXRvci1sb2NrrQUwdGVuuAMENQASNgUCDDYAAloAAWUA/wFxdWV1ZS1sZW5ndGgiOjE0hAECBzAA9ABjb21wbGV0ZWQtaXRlbXNpAFEzMzkxM48IDGwA/wZhbGxvYy1yYXRlIjoyOTg3NzkwMDQqAANRY3RpdmWCAhRyWAAPKQACcGdjLWZyYWflAwHzBP8DIjozNC4zMTQ0MDMwNzc1MjQ5yQECAMMB/wNtbWl0dGVkIjo2NzQuMzQ5MDXzAQBBZXhjZXsEBIYALzQ1FwEDn2ltZS1pbi1nY6kABQE8AgKTA28yNjgwNTbQAAMBPgICJwBhMTA0MjQy4AMMCgMAZQIUMrICXzcxMzM3jAICM2xvaCUAXzIxNzA3ugACFnAkAF8yNTY2MJcAAoRhc3NlbWJseQYBETj1AwyWAKNpbC1ieXRlcy1qWgFPMTgyNOEBA2RtZXRob2QqAARXADEyMDNZAAfPBPMCY3B1L3BlcmlvZHMvdG90YWxgAQ8jAAVgaHJvdHRs1wEByQALJwAAygoGHwAQfdkJD/kJCPAQeyJpZCI6IkhacU9pdjZlTDFocEhKSHRuZTExZ2c9Pc4F8B1hbWVzIjpbIk1pY3Jvc29mdC5FeHRlbnNpb25zLkNhY2hpbmcuQWJzdHJhY44Df3MuZGxsIiwwAAsRTToFDyoACgGMCSF1cvQCD2AAFwk2AG9CaW5kZXJmABcSQxcKT0xpbmU1ABcP7gAJCY4AFkVQCxNWCgkPLAELCT4AR0ZpbGV5AQ92ABY/SW5pzAAXL0pz0QAZr1VzZXJTZWNyZXSQABg/WG1skAAJBaoJUXlJbmplUQIP/QEWDzwAAQ8oAQgAUgGfUHJvdmlkZXJzZQAWCjYAj0NvbXBvc2l0MAIKCjMAf1BoeXNpY2EGAQoAMgDvU3lzdGVtR2xvYmJpbmc0AQmwSG9zdGluZy5BYnPGAAAH9vERdHJhY3Rpb25zLmRsbCIsIk1pY3Jvc29mdC5FeHRlbnMbAH9Ib3N0aW5nIwAKP3R0cCAACUBMb2dnQwA/QWJzcwASBDAAkENvbmZpZ3VyYaUAD2EAEX9Db25zb2xlKwART0RlYnXVAAoEhQAPGwEIBCMAf0V2ZW50TG8sABdfU291cmOnABJfVHJhY2UvAA8gT3AjARpzMgEHxQEPxQAIBDsAkURhdGFBbm5vdG4BDzMAEg9WAAiUUHJpbWl0aXZlJgDAU3lzdGVtLkRpYWduUgIsY3M3AQMiAKxJTy5QaXBlbGluPAD7ClNlY3VyaXR5LkNyeXB0b2dyYXBoeS5Qa2NkAA8oAAMzWG1sGAIDaQBgVGhyZWFkmAJRUmF0ZUywAAPoAvArXSwicmVwb3NpdG9yeVVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9kb3RuZXQvcnVudGltZSIsInZlcjQD93AiOiI4LjAuMC1wcmV2aWV3LjIuMjMxMDYuNyIsImNvbW1pdEhhc2giOiJiMzlkNmE2ZWI0NDg2MDc0NmU5MWU1Y2U0ZjU4NWJlZmYzM2QxZjYzIn0seyJpZCI6IkhaZnNTSWk1QkdzZW9vcEtQTGM1WFE9PSIsIm5hbWVzIjpbxwNiV2luMzIu8AABbgEacwMBCS8CCj0Cek1hbmFnZXIwAEBEcmF3MQFFQ29tbZIDAl8AIi5SBwFQLkNhY2gkAAJTBAMdAA+TAQOQUHJvdGVjdGVkfAIKagAFMQBgUGVybWlzVwELvAB4V2luZG93c6sEAHMAD7sBAD9naXS5ARYQNbkBDKcB9hljZjI1OGExNGI3MGFkOTA2OTQ3MGExMDhmMTM3NjVlMGU1OTg4ZjUxpwH/B2pLWkVidVFFcnllaG4yYWcyL3ZJNmenAQUB/wCRU3FsQ2xpZW50CQEOxwBIbnVsbGMCHzSqAAAAJAD7D30seyJpZCI6Im9wKzFDTHRGbmVVMkF5ay9IWS8vaYQAQE5ld3Q0BVNmdC5Kc9IBDnsAD/0CARBKbgI7TksvQgAJBgNsMTMuMC4xTgH2GWFlOWZlNDRlMTMyM2U5MWJjYmQxODVjYTFhMTQwOTlmYmE3YzAyMWZOAfoHR0xKN1lFdGlzbDJ1Zzlua2ROMkVaQfUCUk5wZ3Nx4gMPwQATEW4xAAMHABgiWgEfNloBAPYaIjY1NWEwMTkxYjk4NjQwNDkyOGRiNDY2ZjUxMmJhYzVkNGM2YWZkM2G2APsGZjhtNGsvMW1NblpncG9sQmRLMy9PtgAGqwPzAkJjbC5Bc3luY0ludGVyZmFj/gQOzQAMCQIAZQEcMFoE9xg0YWM0YzAzNjcwMDNmZTM5NzNhMzY0OGViMDcxNWRkYjBlM2JiY2WvAPoHUG9GbWFVQWRZUVZGMXhkcnJKSnBid2UBr0JlbmNobWFya3OlAgQPKgIBMGFzcCcFFWI8AAltAR8xbQEBoTg1MjkzZTY5ZTdcA/YKOTA0NDg5MGQwNzEzZWI4ODg1MWQwODdmMm0B+gcxbFI5emt1bllSOFhzSDMrWmcyRTdnvgAGbQEHGgfvRGVwZW5kZW5jeU1vZGVBAhkwZG902AAP/wUBHzbVAAH2GTQ4MjJlM2MzYWE3N2ViODJiMmZiMzNjOTMyMWY5MjNjZjExZGRkZTbVAP8Gc1krcmJQODdaZmpiRzIveVM5VHFy1QAGUUlkZW50HwcPRwQbLjIyPwL2GTUwMDBmNGE1NjI0YzFhY2Q0Y2YxYzA3YjI1YzZhYmI1ZWVkZjc0NmOsAP8GempsS1cvcGhmR0hZTW5jSDFRSzYwrAAOAnQBAHsEf1dlYlRva2WMCgAE2AACLAAEdAkCXwYG0wEKJgAAWgZCb2NvbKgCDygAEcJPcGVuSWRDb25uZWODBQ82AAcJqQAD2QgKgAADIgAiSndLAA/FAw8wNi44LAX8IzEwMTIyMzU2MDQuODI0MDY4YWRhZWI3YjE1OGRmMmIzNmQ4Nzg3ZjY4OTY0NmU3MTVluwEAHgQFAwb/B1NWQXBXQjEyQ1Zrd3RSZFozeDkxOEEWAwUEhwYvaXSbCgABWwLfRnJhbWV3b3JrQ29yZc8LDA8xAAAMtAEPJAABQFJlbGHMChJhiwMIhQEPLwABD68AGHNTcWxTZXJ21AgOkwEPvAQBA+QDb2VmY29yZSUGD/YZMGUzNzQyMTgzZTZhZTJiNmMzODgzNDkxOTY5OGQyNDE4MzgzNGQ4MTcD+wZ3Z0RrN3RZY3BjNnVGT2F6aDlwb3GiAQPbBg//AAGvUG9zdGdyZVNRTJEFGALzBgPVAD8ucGfYABD2GDI1ZmM1NTE4OWFlNDFlM2YyYjk4YmNiZTRlYjQ0YzUwNTY1MzcwMNgA+gcrOTBVeXc3eTEwV1FpbVBlRVBaUmFRegLxClNRTGl0ZVBDTFJhdy5iYXR0ZXJpZXNfdjLMABosIAAAgQEPGAABwXByb3ZpZGVyLmVfcwwCETMmAA/fAROVZXJpY3NpbmsviwBJLnJhdxABWzIuMC42XgcJZAP8BVJtUFBLM0dBQ1NDUDRNbnhVS0IwkgtVQXp1cmXJBA+hAAQAVgAIYgJMMS4zLt4D9hoiYWMwMDM1OGY1OGZmNzQzZTJiZDIwODUzYzExYmQ4YTE5MDI1YmE2OIoB8AxnVXY0SDRtTnBmNi9jVzUvMUY5NHRRPT0iLCLGAAAIbvWNbmFtZXMiOlsiQXp1cmUuQ29yZS5kbGwiXSwicmVwb3NpdG9yeVVybCI6bnVsbCwidmVyc2lvbiI6IjEuNi4wIiwiY29tbWl0SGFzaCI6Ijc4MzhjMmE4ZDUwNThmNmU5MGUzNjljMTBhYmEzYjkzOWRiNzQ5MDUifSx7ImlkIjoiZXdzTCsydjRRZjM4c3A2SHVxbzVDQT09IiwinABvRGFwcGVymAAUXTIuMC4zmQCmMjQ3ZTQ5OGYwZXsA+gc4eFpTNTVZa3F1bm9PUEFLZnV0UkFnewDwEE1pY3Jvc29mdC5JZGVudGl0eS5DbGllbnQuRXh0ZW4MAW9zLk1zYWyeABZMMTYuNTcB9hljMjNkZDJjMjExZjg4MTQzYjU4M2EzZGQ2OWU1MGNjNTViOGM3ZTQzvAD7BjEyek5jYzdaTWxveGdKVTYxSTRLZLwAYU5ld3Rvbr0AYEpzb24uQgUAD90BFTwwLjKmAPYZYTFkYjkyNjc4ZTdlNzJlYjczM2YzNzA3OWYzYTkzYmZiNjIxNTMzOGIB/wcra0wzSVBhcXZkVkhJVlI4bVVCdnJ3YgEFYUFzcE5ldIMCP0FwcIMCAPgXImh0dHBzOi8vZ2l0aHViLmNvbS9kb3RuZXQvYXNwbmV0Y29yZSKlAvwJOC4wLjAtcHJldmlldy4yLjIzMTA5LjEx2wD2GThlMDE1NWNjNzA2NTA5M2M4YmU4ZDVkMDE0Mjc3Y2EwYzI3MjNkYTTbAP8GVlFncjlDeE5IRHdhVUdBZjlmZjBU2wAGP05FVNgAI29ydW50aW3VABIcNNUA8Ck0NmNiNGVkZGJiMWY0YmViZGVhOTcwOTY0ZDc0NDliYWNkZThkZjFhIn1dLCJtZWFzdXJlbWVudBAEoF0sImVudmlyb24SAPEBIjp7Imh3IjoiQU1QRVJFIh0A8BMiOiJVbnNwZWNpZmllZCIsIm9zIjoiTGludXgiLCJhcmNoMQAwcm02mQDxBXByb2MiOjgwfSwiYmVuY2htYXJraABwfSwibG9hZGIAUHJlc3VsfgAXeyQAcS9zdGFydC0FAUg6MC4wQAD7Ai93b3JraW5nLXNldCI6MTIxHwD7BHByaXZhdGUtbWVtb3J5IjozNTgiAH5jcHUiOjQ0FgBAL3Jhd1MAETMcAAB4AsEvZmlyc3RyZXF1ZXNuABA5NgDyCXdyay9ycHMvbWVhbiI6NDc0ODU3MS4zMxoA8gN0aHJvdWdocHV0Ijo1OTcuNzcYAPIDbGF0ZW5jeS9tYXgiOjQ4LjI2GAADXgChcyI6NzE3MDE4NNIAAGQA8AJlcnJvcnMvYmFkcmVzcG9uc7YFAQ8BBx4AYnNvY2tldCsABx4ABG4AIDUwFQAUNW0ABBcAIDc1FwAjNza0AAQXAII5MCI6NC40NGIABRYAEDktABowFQAC/QABRAAjNzQuAQXjAAEZAQocAA8xAQMBZQEPMgEBARkABVAABzMBARkADzQBAwkbAA83AQEKIQAJNAEBGwAEcAAHNQEJGAAHNgEJGAAGNwEKFwACOAEQfWkDYnRhZGF0YWUDoGRlcGVuZGVuY2nRAR9biQMWj1BIWVNJQ0FMiwMYF1iJAy4yOIkDEX2mA0FwZXJ0jADxE3sic2NlbmFyaW8iOiJQbGFpbnRleHRRdWVyeVN0cmluZyIwAER0b2NvmwX0BSIsImJ1aWxkSWQiOiIyMTEwMTM0FABgTnVtYmVyGACEMDIzMDIxMC6FBfALYW5kLWxpbmUiOiJjcmFuayAtLWNvbmZpZyBCATBzOi+MAxIu8wWAdXNlcmNvbnSBBwD+BQL3BSUvQlMEZC9tYWluL7oANHMvcLkAFi53BE8ueW1sZQAwAesA7y9henVyZS5wcm9maWxlWgA6K2NpVwAE1gAVINUAMyAtLXoAQCBhcm1GAXctMjgtYXBwGQAAuAEgbC1kBREyBgD2AiAtLXZhcmlhYmxlIHBhdGg9JAEgP3HeAYExPWxvcmVtJg0AYzI9aXBzdQ0A8AAzPWRvbG9yJTIwZXN0IC1pAOBsaWNhdGlvbi5mcmFtZZAFeyBuZXQ4LjAfAIdjb2xsZWN0RO8CWyB0cnVlJwAgb3BNABRzLwByQ291bnRlcisA8REifX2mQ2hhbmdly8EGMU+uFHrgsVN0YW5kYXJkRGV2aYgA8RbLQPVseY4UBo2nQXZlcmFnZctBUiKpozMzM69SZWNvdmVyZWRSaAbwFcCmTGFiZWxzk6RQZXJmr3BlcmYtcmVncmVzc2lvbqlhcmVhLRUA8gemT3duZXJzkaxzZWJhc3RpZW5yb3OniQCHc5SJo0pvYqsJAfAPoklkuEhacU9pdjZlTDFocEhKSHRuZTExZ2c9PaVObgtW3AAm2S1YCgdICvIAQ2FjaGluZy5BYnN0cmFjCwFfZGxs2ScvAAoRTd8GASkAHzMpAAMBTwMhdXIiAQ5eAA+NAAQJNQBCQmluZIMLL9kyZAAQEkPYAzFMaW5PDC/ZJjQAEADAAB87KAAQFkWYCBNWyQICJgEfNT0AEEdGaWxlcgEAdAAfKjcAEDFJbmlgAR8rLAAQAWwLAFkADykBEa9Vc2VyU2VjcmV0jQAXMVhtbI0AHzmNAAIFYwNReUluamVFAg7zAR8sOwAWAMkAD1YCAwBLAZ5Qcm92aWRlcnNjAB8wYwACCjUAMUNvbWQOAiUCHy8yABByUGh5c2ljYQEBD44BAwBjAOFTeXN0ZW1HbG9iYmluZy4BD+YCA0BIb3N0IgANcwMfII0AAgQvAE9kbGy9IQADP3R0cG8ACE9Mb2dnbwACHy5OAAIELwAKjAMAkwEfKDAADTJzb2xWAQ97AwOATG9nZ2luZy7GAAAD7fIXRGVidWcuZGxs2SBNaWNyb3NvZnQuRXh0ZW5zaW9ucy5Mb2dnaW4iAB8pIgAKckV2ZW50TG8rAB8sKwAPYVNvdXJjZXsADy4AC1dUcmFjZS4AHzhcAAIxT3B0sQCQQ29uZmlndXJhDwAHyQAA4wAfMDoACpFEYXRhQW5ub3Q7AAIyAA8VAQMEbAAAVAAfI1QAApFQcmltaXRpdmUlAPkEv1N5c3RlbS5EaWFnbm9zdGljcy8BE7cgAKJJTy5QaXBlbGluOAAj2SUZAPEKU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlBrY18AL9kkJwAKMVhtbGYBEyEmAGBUaHJlYWTVAVFSYXRlTKkAAuIB8C6tUmVwb3NpdG9yeVVybNkhaHR0cHM6Ly9naXRodWIuY29tL2RvdG5ldC9ydW50aW1lr1ByZXZpb3VzVmVyMAKAtzguMC4wLXAWAP8FZXcuMi4yMzEwNS40rkN1cnJlbnQnAAlENi43sk8A8yZDb21taXRIYXNo2Sg1ODcxOWVjOTBiM2JiYWU1MjdkZDgxNjg1YmY4NjcwYjk5M2ZlOGY5sWQACDwA8TFiMzlkNmE2ZWI0NDg2MDc0NmU5MWU1Y2U0ZjU4NWJlZmYzM2QxZjYzqkNoYW5nZVR5cGUAiaNKb2KrYXBwbGljCgLxHqJJZLhQb0ZtYVVBZFlRVkYxeGRyckpKcGJ3PT2lTmFtZXORrkJlbmNobWFya5EBC0gBHyRIAQAwYXNwSAEVYjgADEsBIKUxSwELOQECFQAPJwEC/xk0YzllZThhNDVlNTRjMDEzNTljZDQ4OTQ0Y2I2MTMyNmQxOGVhN2FiJwEB/xk4NTI5M2U2OWU3MGU1OTg5MDQ0ODkwZDA3MTNlYjg4ODUxZDA4N2YyJwEO9gYra0wzSVBhcXZkVkhJVlI4bVVCdnInARa4LAPrQXNwTmV0Q29yZS5BcHB5Ag8xAQEDeQICOAE/Y29yfAITOzguN0MBILg4WAELowJPOS4xMVYBAv8ZZjU4Zjk1NDZiZTIzZTY0ODA1NjliMjE0M2U3YWVjMTY4ZjY2NmIyYVYBAv8YZTAxNTVjYzcwNjUwOTNjOGJlOGQ1ZDAxNDI3N2NhMGMyNzIzZGE0VgEO9gZWUWdyOUN4TkhEd2FVR0FmOWZmMFRWARa1VgE/TkVUUwEED8wDNB04zAMPUAEFHzRQAQL/GDQzYTYwYzhlZDA3M2E0YzYxMzRmYWNhZGQwMWM5YzFjMjY0M2U0MVABAvAlNDZjYjRlZGRiYjFmNGJlYmRlYTk3MDk2NGQ3NDQ5YmFjZGU4ZGYxYapDaGFuZ2VUeXBlAA==[/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/46588","RelatedDescription":"Open issue \"Perf regression: plaintext\" (#46588)"},{"Id":"1580978534","IsPullRequest":false,"CreatedAt":"2023-02-11T19:07:13","Actor":"pr-benchmarks[bot]","Number":"46587","RawContent":null,"Title":"Perf improvement: fortunes_dapper, https, mvc","State":"open","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| fortunes_dapper  | Fortunes Dapper 1- Trends Database Intel Linux | 02/09/2023 21:10:10 | 302,370 | 310,605 | 2.72 % (8,235)  :thumbsup:  | 6.00 σ | 1,372.63 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Benchmarks.dll</td>            <td>`1.0.0` -> `1.0.0`</td>            <td>https://github.com/aspnet/benchmarks/compare/4c9ee8a45e54c01359cd48944cb61326d18ea7ab...85293e69e70e5989044890d0713eb88851d087f2</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`8.0.0-preview.2.23107.26` -> `8.0.0-preview.2.23109.3`</td>            <td>https://github.com/dotnet/aspnetcore/compare/9a6883f53837be3f3f3b979eea7b71bbd6c8ff64...105e1b2d91a6704a769a90ebd1e0a284805483b8</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`8.0.0-preview.2.23107.10` -> `8.0.0-preview.2.23109.2`</td>            <td>https://github.com/dotnet/runtime/compare/d913b94d041e192ab2f389ecae6b972da2094560...4da62e4341215905907bc93587eb44c8abb56d3f</td></tr></table></details> |\n| https  | Json Https 3- Trends Arm 28 Linux | 02/10/2023 10:27:23 | 586,434 | 644,581 | 9.92 % (58,147)  :thumbsup:  | 3.63 σ | 16,033.60 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.Extensions.Caching.Abstractions.dll</td>            <td>`8.0.0-preview.2.23105.4` -> `8.0.0-preview.2.23106.7`</td>            <td>https://github.com/dotnet/runtime/compare/58719ec90b3bbae527dd81685bf8670b993fe8f9...b39d6a6eb44860746e91e5ce4f585beff33d1f63</td></tr><tr>            <td>Benchmarks.dll</td>            <td>`1.0.0` -> `1.0.0`</td>            <td>https://github.com/aspnet/benchmarks/compare/4c9ee8a45e54c01359cd48944cb61326d18ea7ab...85293e69e70e5989044890d0713eb88851d087f2</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`8.0.0-preview.2.23108.7` -> `8.0.0-preview.2.23109.11`</td>            <td>https://github.com/dotnet/aspnetcore/compare/f58f9546be23e6480569b2143e7aec168f666b2a...8e0155cc7065093c8be8d5d014277ca0c2723da4</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`8.0.0-preview.2.23108.4` -> `8.0.0-preview.2.23109.14`</td>            <td>https://github.com/dotnet/runtime/compare/43a60c8ed073a4c6134facadd01c9c1c2643e41a...46cb4eddbb1f4bebdea970964d7449bacde8df1a</td></tr></table></details> |\n| mvc  | Plaintext Mvc 3- Trends Arm 28 Linux | 02/10/2023 10:19:25 | 3,145,429 | 3,256,953 | 3.55 % (111,524)  :thumbsup:  | 2.42 σ | 46,098.72 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.Extensions.Caching.Abstractions.dll</td>            <td>`8.0.0-preview.2.23105.4` -> `8.0.0-preview.2.23106.7`</td>            <td>https://github.com/dotnet/runtime/compare/58719ec90b3bbae527dd81685bf8670b993fe8f9...b39d6a6eb44860746e91e5ce4f585beff33d1f63</td></tr><tr>            <td>Benchmarks.dll</td>            <td>`1.0.0` -> `1.0.0`</td>            <td>https://github.com/aspnet/benchmarks/compare/4c9ee8a45e54c01359cd48944cb61326d18ea7ab...85293e69e70e5989044890d0713eb88851d087f2</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`8.0.0-preview.2.23108.7` -> `8.0.0-preview.2.23109.11`</td>            <td>https://github.com/dotnet/aspnetcore/compare/f58f9546be23e6480569b2143e7aec168f666b2a...8e0155cc7065093c8be8d5d014277ca0c2723da4</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`8.0.0-preview.2.23108.4` -> `8.0.0-preview.2.23109.14`</td>            <td>https://github.com/dotnet/runtime/compare/43a60c8ed073a4c6134facadd01c9c1c2643e41a...46cb4eddbb1f4bebdea970964d7449bacde8df1a</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/46587","RelatedDescription":"Open issue \"Perf improvement: fortunes_dapper, https, mvc\" (#46587)"},{"Id":"1580703139","IsPullRequest":false,"CreatedAt":"2023-02-11T19:07:11","Actor":"pr-benchmarks[bot]","Number":"46582","RawContent":null,"Title":"Perf regression: fortunes_ef, https","State":"closed","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| fortunes_ef [Fixed] | Fortunes Platform EF 1- Trends Database Arm 28 Linux | 02/09/2023 21:02:43 | 374,747 | 346,549 | -7.52 % (-28,199)  :thumbsdown:  | -2.33 σ | 12,076.61 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>PlatformBenchmarks.dll</td>            <td>`1.0.0` -> `1.0.0`</td>            <td>https://github.com/aspnet/benchmarks/compare/4c9ee8a45e54c01359cd48944cb61326d18ea7ab...85293e69e70e5989044890d0713eb88851d087f2</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`8.0.0-preview.2.23107.26` -> `8.0.0-preview.2.23109.3`</td>            <td>https://github.com/dotnet/aspnetcore/compare/9a6883f53837be3f3f3b979eea7b71bbd6c8ff64...105e1b2d91a6704a769a90ebd1e0a284805483b8</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`8.0.0-preview.2.23107.10` -> `8.0.0-preview.2.23109.2`</td>            <td>https://github.com/dotnet/runtime/compare/d913b94d041e192ab2f389ecae6b972da2094560...4da62e4341215905907bc93587eb44c8abb56d3f</td></tr></table></details> |\n| https [Fixed] | Json Https HttpSys 1- Trends Intel Windows | 02/09/2023 21:18:30 | 425,591 | 419,001 | -1.55 % (-6,590)  :thumbsdown:  | -2.01 σ | 3,281.60 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Benchmarks.dll</td>            <td>`1.0.0` -> `1.0.0`</td>            <td>https://github.com/aspnet/benchmarks/compare/4c9ee8a45e54c01359cd48944cb61326d18ea7ab...85293e69e70e5989044890d0713eb88851d087f2</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`8.0.0-preview.2.23107.26` -> `8.0.0-preview.2.23109.3`</td>            <td>https://github.com/dotnet/aspnetcore/compare/9a6883f53837be3f3f3b979eea7b71bbd6c8ff64...105e1b2d91a6704a769a90ebd1e0a284805483b8</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`8.0.0-preview.2.23107.10` -> `8.0.0-preview.2.23109.2`</td>            <td>https://github.com/dotnet/runtime/compare/d913b94d041e192ab2f389ecae6b972da2094560...4da62e4341215905907bc93587eb44c8abb56d3f</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/46582","RelatedDescription":"Closed issue \"Perf regression: fortunes_ef, https\" (#46582)"},{"Id":"1580969438","IsPullRequest":false,"CreatedAt":"2023-02-11T18:40:23","Actor":"Ninja4Code","Number":"46586","RawContent":null,"Title":"HttpContext not working in Kestrel in Visual Studio Code","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI have set up Windows authentication with the Negotiate package but in Kestrel I am noticing that the HttpContext gets dropped after the initial ClaimsTransformation works.  It's later down the pipeline where I'm not getting the context.User in the AuthorizationRoleHandler.  This worked in ASP.NET Core 5/IIS with essentially the same code, except Program was split into Startup, etc.\r\n\r\n**I'm noticing that the AuthenticationType is showing as NTLM.  My understanding is that Kerberos will try Negotiate first and will fall back to NTLM.  This seems to be occuring as I see NTLM listed as the AuthenticationType when I'm debugging.**\r\n\r\n`builder.Services.AddAuthentication(NegotiateDefaults.AuthenticationScheme)\r\n   .AddNegotiate();`\r\n\r\nI'm also wiring up a Claims Transformer.\r\n\r\n`builder.Services.AddSingleton<IClaimsTransformation, MyClaimsTransformer>();`\r\n\r\nWithin the Claims transformer everything is working fine.  It picks up the user identity and assigns the claims;\r\n\r\n```\r\npublic class MyClaimsTransformer : IClaimsTransformation\r\n{\r\n    public Task<ClaimsPrincipal> TransformAsync(ClaimsPrincipal principal)\r\n    {\r\n         ClaimsIdentity identity = principal.Identity as ClaimsIdentity;\r\n         //add claims\r\n        return Task.FromResult(principal);\r\n    }\r\n}\r\n```\r\n\r\nI've also wired up an HttpContextAccessor\r\n\r\n`builder.Services.AddHttpContextAccessor();`\r\n\r\n```\r\nbuilder.Services.AddAuthorization(options =>\r\n{\r\n    options.FallbackPolicy = options.DefaultPolicy;\r\n    options.AddPolicy(\"AuthenticatedOnly\", policy => {\r\n          policy.Requirements.Add(new AuthenticatedRequirement(true));\r\n    ]);\r\n]);\r\n```\r\n\r\nbuilder.Services.AddSingleton<IAuthorizationHandler,AuthenticatedRoleHandler>();`\r\n\r\nThe problem comes in where I'm using Policies with Requirements.  The AuthorizationRoleHandler is not picking up the user from the context.  This behavior I notice in Visual Studio Code with ASP.NET Core 6.  In a similar project in Visual Studio 2019, ASP.NET Core 5 the basically same code works as expected.  I'm also noticing this behavior when I deploy the application in a Docker container with Kestrel.\r\n\r\n```\r\npublic class AuthenticatedRoleHandler:AuthorizationHandler<AuthenticatedRequirement>\r\n{\r\n     protected override Task HandleRequirementAsync(AuthorizationContext context, AuthenticatedRequirement requirement)\r\n    {\r\n             **ClaimsPrincipal user = context.User;//Here it is null**\r\n             // other code\r\n     }\r\n}\r\n```\r\n\r\n### Expected Behavior\r\n\r\nThe role handler should be picking up the AuthorizationHandlerContext user, but it is null.\r\n\r\n```\r\npublic class AuthenticatedRoleHandler:AuthorizationHandler<AuthenticatedRequirement>\r\n{\r\n     protected override Task HandleRequirementAsync(AuthorizationContext context, AuthenticatedRequirement requirement)\r\n    {\r\n             **ClaimsPrincipal user = context.User;//Here it is null**\r\n             // other code\r\n     }\r\n}\r\n```\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\nI get a 401 status code Unauthorized on an annotated controller method.\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n6.0.13 runtime\r\n6.0.402 sdk","Url":"https://github.com/dotnet/aspnetcore/issues/46586","RelatedDescription":"Open issue \"HttpContext not working in Kestrel in Visual Studio Code\" (#46586)"},{"Id":"1580641139","IsPullRequest":true,"CreatedAt":"2023-02-11T17:08:53","Actor":"dotnet-maestro[bot]","Number":"46581","RawContent":null,"Title":"[release/8.0-preview1] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:cc6fe9b9-b8a4-4e24-4cf6-08dafe3cf288)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: cc6fe9b9-b8a4-4e24-4cf6-08dafe3cf288\r\n- **Build**: 20230210.8\r\n- **Date Produced**: February 11, 2023 3:43:18 AM UTC\r\n- **Commit**: 7deac7d6da3ce4e96d51d5f61a27ee85b7c42f60\r\n- **Branch**: refs/heads/release/8.0-preview1\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Extensions.Caching.Abstractions**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Caching.Memory**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Configuration**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Configuration.Abstractions**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Configuration.Binder**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Configuration.CommandLine**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Configuration.EnvironmentVariables**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Configuration.FileExtensions**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Configuration.Ini**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Configuration.Json**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Configuration.UserSecrets**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Configuration.Xml**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.DependencyInjection**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.DependencyInjection.Abstractions**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.DependencyModel**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.FileProviders.Abstractions**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.FileProviders.Composite**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.FileProviders.Physical**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.FileSystemGlobbing**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.HostFactoryResolver.Sources**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Hosting**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Hosting.Abstractions**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Http**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Logging**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Logging.Abstractions**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Logging.Configuration**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Logging.Console**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Logging.Debug**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Logging.EventLog**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Logging.EventSource**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Logging.TraceSource**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Options**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Options.ConfigurationExtensions**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Options.DataAnnotations**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Extensions.Primitives**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.Internal.Runtime.AspNetCore.Transport**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.NET.Runtime.MonoAOTCompiler.Task**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.NET.Runtime.WebAssembly.Sdk**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.browser-wasm**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.NETCore.BrowserDebugHost.Transport**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Diagnostics.DiagnosticSource**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.DirectoryServices.Protocols**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.IO.Pipelines**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Net.Http.Json**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Net.Http.WinHttpHandler**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Reflection.Metadata**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Text.Json**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Threading.Channels**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n  - **System.Threading.RateLimiting**: [from 8.0.0-preview.1.23106.5 to 8.0.0-preview.1.23110.8][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/9f654ef...7deac7d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:cc6fe9b9-b8a4-4e24-4cf6-08dafe3cf288)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/46581","RelatedDescription":"Closed or merged PR \"[release/8.0-preview1] Update dependencies from dotnet/runtime\" (#46581)"},{"Id":"1580908541","IsPullRequest":true,"CreatedAt":"2023-02-11T16:16:16","Actor":"dotnet-maestro[bot]","Number":"46585","RawContent":null,"Title":"[main] Update dependencies from dotnet/efcore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8ce5251e-8269-419d-3b2a-08d8b8050dda)\r\n## From https://github.com/dotnet/efcore\r\n- **Subscription**: 8ce5251e-8269-419d-3b2a-08d8b8050dda\r\n- **Build**: 20230211.3\r\n- **Date Produced**: February 11, 2023 4:01:41 PM UTC\r\n- **Commit**: 8af9ad12334a6ff44c58798d46ef82e6f4b1677b\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **dotnet-ef**: [from 8.0.0-preview.2.23111.2 to 8.0.0-preview.2.23111.3][1]\r\n  - **Microsoft.EntityFrameworkCore**: [from 8.0.0-preview.2.23111.2 to 8.0.0-preview.2.23111.3][1]\r\n  - **Microsoft.EntityFrameworkCore.Design**: [from 8.0.0-preview.2.23111.2 to 8.0.0-preview.2.23111.3][1]\r\n  - **Microsoft.EntityFrameworkCore.InMemory**: [from 8.0.0-preview.2.23111.2 to 8.0.0-preview.2.23111.3][1]\r\n  - **Microsoft.EntityFrameworkCore.Relational**: [from 8.0.0-preview.2.23111.2 to 8.0.0-preview.2.23111.3][1]\r\n  - **Microsoft.EntityFrameworkCore.Sqlite**: [from 8.0.0-preview.2.23111.2 to 8.0.0-preview.2.23111.3][1]\r\n  - **Microsoft.EntityFrameworkCore.SqlServer**: [from 8.0.0-preview.2.23111.2 to 8.0.0-preview.2.23111.3][1]\r\n  - **Microsoft.EntityFrameworkCore.Tools**: [from 8.0.0-preview.2.23111.2 to 8.0.0-preview.2.23111.3][1]\r\n\r\n[1]: https://github.com/dotnet/efcore/compare/a959f2e...8af9ad1\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:8ce5251e-8269-419d-3b2a-08d8b8050dda)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/46585","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/efcore\" (#46585)"},{"Id":"1580831758","IsPullRequest":true,"CreatedAt":"2023-02-11T16:00:35","Actor":"dotnet-maestro[bot]","Number":"46584","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime dotnet/efcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:32db3699-5666-45da-a1b7-08d8b804cd75)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 32db3699-5666-45da-a1b7-08d8b804cd75\r\n- **Build**: 20230210.16\r\n- **Date Produced**: February 11, 2023 11:48:30 AM UTC\r\n- **Commit**: 1750538a21be8b270c2c30f9762acd7689923917\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Extensions.Caching.Abstractions**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Caching.Memory**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Configuration**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Configuration.Abstractions**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Configuration.Binder**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Configuration.CommandLine**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Configuration.EnvironmentVariables**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Configuration.FileExtensions**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Configuration.Ini**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Configuration.Json**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Configuration.UserSecrets**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Configuration.Xml**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.DependencyInjection**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.DependencyInjection.Abstractions**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.DependencyModel**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.FileProviders.Abstractions**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.FileProviders.Composite**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.FileProviders.Physical**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.FileSystemGlobbing**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.HostFactoryResolver.Sources**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Hosting**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Hosting.Abstractions**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Http**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Logging**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Logging.Abstractions**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Logging.Configuration**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Logging.Console**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Logging.Debug**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Logging.EventLog**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Logging.EventSource**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Logging.TraceSource**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Options**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Options.ConfigurationExtensions**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Options.DataAnnotations**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Extensions.Primitives**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.Internal.Runtime.AspNetCore.Transport**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.NET.Runtime.MonoAOTCompiler.Task**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.NET.Runtime.WebAssembly.Sdk**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.browser-wasm**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.NETCore.BrowserDebugHost.Transport**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Diagnostics.DiagnosticSource**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.DirectoryServices.Protocols**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.IO.Pipelines**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Net.Http.Json**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Net.Http.WinHttpHandler**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Reflection.Metadata**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Text.Json**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Threading.Channels**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n  - **System.Threading.RateLimiting**: [from 8.0.0-preview.2.23110.1 to 8.0.0-preview.2.23110.16][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/ba1d625...1750538\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:32db3699-5666-45da-a1b7-08d8b804cd75)\r\n\r\n[marker]: <> (Begin:8ce5251e-8269-419d-3b2a-08d8b8050dda)\r\n## From https://github.com/dotnet/efcore\r\n- **Subscription**: 8ce5251e-8269-419d-3b2a-08d8b8050dda\r\n- **Build**: 20230211.2\r\n- **Date Produced**: February 11, 2023 2:08:09 PM UTC\r\n- **Commit**: a959f2eda91e5a4b152b87835f0dd9b5e810a84d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **dotnet-ef**: [from 8.0.0-preview.2.23107.16 to 8.0.0-preview.2.23111.2][2]\r\n  - **Microsoft.EntityFrameworkCore**: [from 8.0.0-preview.2.23107.16 to 8.0.0-preview.2.23111.2][2]\r\n  - **Microsoft.EntityFrameworkCore.Design**: [from 8.0.0-preview.2.23107.16 to 8.0.0-preview.2.23111.2][2]\r\n  - **Microsoft.EntityFrameworkCore.InMemory**: [from 8.0.0-preview.2.23107.16 to 8.0.0-preview.2.23111.2][2]\r\n  - **Microsoft.EntityFrameworkCore.Relational**: [from 8.0.0-preview.2.23107.16 to 8.0.0-preview.2.23111.2][2]\r\n  - **Microsoft.EntityFrameworkCore.Sqlite**: [from 8.0.0-preview.2.23107.16 to 8.0.0-preview.2.23111.2][2]\r\n  - **Microsoft.EntityFrameworkCore.SqlServer**: [from 8.0.0-preview.2.23107.16 to 8.0.0-preview.2.23111.2][2]\r\n  - **Microsoft.EntityFrameworkCore.Tools**: [from 8.0.0-preview.2.23107.16 to 8.0.0-preview.2.23111.2][2]\r\n\r\n[2]: https://github.com/dotnet/efcore/compare/8664081...a959f2e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:8ce5251e-8269-419d-3b2a-08d8b8050dda)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/46584","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime dotnet/efcore\" (#46584)"},{"Id":"1580721551","IsPullRequest":false,"CreatedAt":"2023-02-11T07:57:17","Actor":"khteh","Number":"46583","RawContent":null,"Title":"Blazor server page code-behind retrieving query string parameters","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen I tried using `NavigationManager`, I get https://github.com/dotnet/aspnetcore/issues/13906\r\n\r\nSo I try https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing?view=aspnetcore-7.0#query-strings but get nothing!\r\n\r\n### Expected Behavior\r\n\r\nEasily retrieve query string parameters.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.102\r\n\r\n### Anything else?\r\n\r\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/46583","RelatedDescription":"Open issue \"Blazor server page code-behind retrieving query string parameters\" (#46583)"},{"Id":"1580616147","IsPullRequest":true,"CreatedAt":"2023-02-11T03:01:43","Actor":"adityamandaleeka","Number":"46580","RawContent":null,"Title":"Unify HTTP token parsing code","State":"open","Body":"While looking into some perf optimizations, I noticed that we had nearly identical code in two places, HttpRuleParser and HttpTokenParsingRule, used by different parts of the codebase.\r\n\r\nIt seems like HttpRuleParser has received some updates over time which weren't applied to HttpTokenParsingRule. The diffs looked innocuous to me, so this PR just moves the HttpRuleParser to shared source and includes it in the various projects that were using HttpTokenParsingRule.\r\n\r\nThe MVC core tests (which include tests that exercise the token parsing functionality) all passed for me. Let's see how CI goes 😄.","Url":"https://github.com/dotnet/aspnetcore/pull/46580","RelatedDescription":"Open PR \"Unify HTTP token parsing code\" (#46580)"},{"Id":"1580572361","IsPullRequest":true,"CreatedAt":"2023-02-11T01:42:03","Actor":"eerhardt","Number":"46579","RawContent":null,"Title":"Update CreateSlimBuilder to use Host.CreateEmptyApplicationBuilder.","State":"open","Body":"Also fix 2 existing bugs:\r\n1. ContentRootPath is set to the app's BaseDirectory, and not CurrentWorkingDirectory. Default to CWD by using the same logic as HostApplicationBuilder.\r\n2. Add un-prefixed environment variables to the configuration, and ensure the configuration order is the same as WebApplication.CreateBuilder.\r\n\r\nFix #46293","Url":"https://github.com/dotnet/aspnetcore/pull/46579","RelatedDescription":"Open PR \"Update CreateSlimBuilder to use Host.CreateEmptyApplicationBuilder.\" (#46579)"},{"Id":"1580554775","IsPullRequest":true,"CreatedAt":"2023-02-11T01:06:49","Actor":"amcasey","Number":"46578","RawContent":null,"Title":"Don't clobber non-default status codes in static files middleware","State":"open","Body":"# Don't clobber non-default status codes in static files middleware\r\n\r\n<!-- Thank you for submitting a pull request to our repo. -->\r\n\r\n<!-- If this is your first PR in the ASP.NET Core repo, please run through the checklist\r\nbelow to ensure a smooth review and merge process for your PR. -->\r\n\r\n- [x] You've read the [Contributor Guide](https://github.com/dotnet/aspnetcore/blob/main/CONTRIBUTING.md) and [Code of Conduct](https://github.com/dotnet/aspnetcore/blob/main/CODE-OF-CONDUCT.md).\r\n- [x] You've included unit or integration tests for your change, where applicable.\r\n- [x] You've included inline docs for your change, where applicable.\r\n- [x] There's an open issue for the PR that you are making. If you'd like to propose a new feature or change, please open an issue to discuss the change or find an existing issue.\r\n\r\n<!-- Once all that is done, you're ready to go. Open the PR with the content below. -->\r\n\r\nIf the static files middleware sees a status code of 200, it can set its own - otherwise, it should leave it as-is.\r\n\r\n## Description\r\n\r\nWhen the status code page middleware requests a static error page, it's important that the overall status code remain unchanged, rather than being set to 200 to indicate that the _error page_ was retrieved correctly.\r\n\r\nFixes #40518\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/46578","RelatedDescription":"Open PR \"Don't clobber non-default status codes in static files middleware\" (#46578)"},{"Id":"1580539899","IsPullRequest":true,"CreatedAt":"2023-02-11T00:41:39","Actor":"brunolins16","Number":"46577","RawContent":null,"Title":"Prefer TypeConverter over TryParse","State":"open","Body":"Fix #46384","Url":"https://github.com/dotnet/aspnetcore/pull/46577","RelatedDescription":"Open PR \"Prefer TypeConverter over TryParse\" (#46577)"},{"Id":"1580496767","IsPullRequest":true,"CreatedAt":"2023-02-10T23:47:10","Actor":"brunolins16","Number":"46576","RawContent":null,"Title":"StatusCodePagesMiddleware: Improving response started verification","State":"open","Body":"Fix #45678","Url":"https://github.com/dotnet/aspnetcore/pull/46576","RelatedDescription":"Open PR \"StatusCodePagesMiddleware: Improving response started verification\" (#46576)"},{"Id":"1580394588","IsPullRequest":false,"CreatedAt":"2023-02-10T22:03:46","Actor":"MackinnonBuck","Number":"46575","RawContent":null,"Title":"Add 'RenderTreeBuilder.AddComponentParameter()'","State":"open","Body":"## Background and Motivation\r\n\r\nThe `RenderTreeBuilder` class currently has a method `AddAttribute()`, which is used to add attributes to the current element frame or parameters to the current component frame. There are multiple overloads of the method accepting different attribute values for well-known types (`string`, `int`, `bool`, `EventCallback`, etc.), as well as a catch-all overload accepting an `object`. It should be noted that when the relevant frame is a component, the implementation for each overload does the same thing - box the parameter value and add it to a new render tree frame.\r\n\r\nThis works well for most component parameter types, but consider if a component had a parameter of the following type:\r\n```csharp\r\npublic class Foo\r\n{\r\n    public string Value { get; set; } = string.Empty;\r\n    public static implicit operator string(Foo foo) => foo.Value;\r\n}\r\n```\r\n\r\nWe want the `AddAttribute(int sequence, string name, object? value)` overload to be resolved, but since `Foo` defines an implicit conversion to `string`, the `AddAttribute(int sequence, string name, string value)` overload gets resolved instead. As a result, the framework later tries to set the component parameter of type `Foo` to a value of type `string`, and an `InvalidCastException` is thrown.\r\n\r\nSince each `AddAttribute()` implementation is identical when acting on a component frame, we could introduce an `AddComponentParameter(int sequence, string name, object? value)` method for component parameters. There is now no ambiguity with which overload to resolve. Also, since the `AddAttribute()` implementation would end up boxing the provided `value` anyway, we aren't losing anything by performing the boxing earlier.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.AspNetCore.Components.Rendering;\r\n\r\npublic sealed class RenderTreeBuilder : IDisposable\r\n{\r\n+    public void AddComponentParameter(int sequence, string name, object? value);\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\nThis method is primarily intended to be used in code generated by the Razor compiler, but it will still be available to developers if they wish to construct a render tree without Razor.\r\n\r\n```csharp\r\n// 'builder' is a RenderTreeBuilder here\r\nbuilder.OpenComponent<SurveyPrompt>(0);\r\nbuilder.AddComponentParameter(1, \"Title\", \"How is Blazor working for you?\");\r\nbuilder.CloseComponent();\r\n```\r\n<!--\r\nPlease provide code examples that highlight how the proposed API additions are meant to be consumed.\r\nThis will help suggest whether the API has the right shape to be functional, performant and useable.\r\nYou can use code blocks like this:\r\n```csharp\r\n// some lines of code here\r\n```\r\n-->\r\n\r\n## Alternative Designs\r\n\r\nAlternatively, we could require the Razor compiler to put an `(object)` cast in front of every component parameter value passed to `AddAttribute()`. However, this would eliminate the possibility of adding a generic `AddComponentParameter<T>()` overload in the future that avoids boxing for parameter types.\r\n\r\n## Risks\r\n\r\nNo known risks. This is not a breaking change, since `AddAttribute()` will maintain its existing behavior for component parameter types.","Url":"https://github.com/dotnet/aspnetcore/issues/46575","RelatedDescription":"Open issue \"Add 'RenderTreeBuilder.AddComponentParameter()'\" (#46575)"},{"Id":"1580242387","IsPullRequest":true,"CreatedAt":"2023-02-10T19:55:32","Actor":"captainsafia","Number":"46574","RawContent":null,"Title":"Tweak exception message for  `TryParse` method not found","State":"open","Body":"Closes https://github.com/dotnet/aspnetcore/issues/44218.\r\n\r\nWe talked about linking to the docs in the issue but I don't think that'll be maintainable as we move content around. Opted to add a better description here.","Url":"https://github.com/dotnet/aspnetcore/pull/46574","RelatedDescription":"Open PR \"Tweak exception message for  `TryParse` method not found\" (#46574)"},{"Id":"1580172078","IsPullRequest":true,"CreatedAt":"2023-02-10T18:56:27","Actor":"Nick-Stanton","Number":"46573","RawContent":null,"Title":"Productize QuickGrid","State":"open","Body":"# Productize QuickGrid\r\n\r\nProductizes the experimental [QuickGrid package](https://github.com/aspnet/AspLabs/tree/main/src/QuickGrid), which aims to provide a simple and performant data grid component for Blazor.\r\n\r\n## Description\r\n\r\nThere is a [list of issues](https://github.com/dotnet/aspnetcore/issues?q=is%3Aissue+is%3Aopen+label%3Afeature-blazor-quickgrid) that we could address either as part of this PR or include small fixes and additions following a merge here. There is already a lot of new code and API being proposed.\r\n\r\nDRAFT: In draft until I complete E2E tests. Following review here I will open an API proposal for these changes.\r\n\r\nFixes #46317\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/46573","RelatedDescription":"Open PR \"Productize QuickGrid\" (#46573)"},{"Id":"1580157855","IsPullRequest":false,"CreatedAt":"2023-02-10T18:43:54","Actor":"vsfeedback","Number":"46572","RawContent":null,"Title":"Net 6.0 Razor Pages basic nagivation problem","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Net-60-Razor-Pages-basic-nagivation-pro/10270460)._\n\n---\n[severity:It's more difficult to complete my work]\r\nI have a Solution (MSV) with 2 Razor Pages projects (MSV and Video), sharing SQL database and Identity. All CRUD models are in MSV project. Video project has only few models, to show specific views to customers. I have created few folders inside Identity / Pages folders (Person/WART/Clipes folders), to put my view pages. Now I am facing the following problem in Video project: when I am using  RedirectToPage or LocalRedirect(\"Identity/Person/WART/Clipes/Index\")  I can reach the Index page, but when I am using RedirectToPage or LocalRedirect(\"Identity/Person/WART/Clipes/ClipesView\") I cannot reach the ClipesView page. But everything works in MSV project, where I have the CRUD pages inside each folder. Is it a Razor routing problem or something like \"by definition\"? Thanks.\n\n---\n### Original Comments\n\n#### Feedback Bot on 2/5/2023, 07:14 PM: \n\n(private comment, text removed)\n#### Mário Sérgio Veríssimo on 2/6/2023, 02:52 PM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/aspnetcore/issues/46572","RelatedDescription":"Open issue \"Net 6.0 Razor Pages basic nagivation problem\" (#46572)"},{"Id":"1580156370","IsPullRequest":false,"CreatedAt":"2023-02-10T18:42:16","Actor":"captainsafia","Number":"46571","RawContent":null,"Title":"Survey: Repo Contribution Experience 2023","State":"open","Body":"The start of the new year means another contributor experience survey over on the aspnetcore repo.\r\n\r\nIn addition to spending our time building ASP.NET Core, we want to make sure the repo is productive and approachable for contributors of all kinds.\r\n\r\nOver the past year, we've been rolling out small improvements to improve approachability in the repo:\r\n\r\n- Refactored our build documentation to be more friendly to different dev setups\r\n- Updated our docs to include solutions for build errors contributors might run into\r\n\r\nWe'd love your feedback in this year's repo contribution experience survey to learn more about what we can do to keep making contributing and participating in the aspnetcore repo better!\r\n\r\nSurvey Link: https://www.surveymonkey.com/r/8KTX9VT?Source=aspnetcore\r\n\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/issues/46571","RelatedDescription":"Open issue \"Survey: Repo Contribution Experience 2023\" (#46571)"},{"Id":"1580029545","IsPullRequest":true,"CreatedAt":"2023-02-10T18:37:53","Actor":"dotnet-maestro[bot]","Number":"46568","RawContent":null,"Title":"[main] Update dependencies from dotnet/source-build-externals","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:93759b2e-8cec-490d-6e3a-08da700278bb)\r\n## From https://github.com/dotnet/source-build-externals\r\n- **Subscription**: 93759b2e-8cec-490d-6e3a-08da700278bb\r\n- **Build**: 20230210.1\r\n- **Date Produced**: February 10, 2023 3:56:45 PM UTC\r\n- **Commit**: 4b86d4b30ec51a3d8953a6b87e4a795197fa987f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.SourceBuild.Intermediate.source-build-externals**: [from 8.0.0-alpha.1.23102.1 to 8.0.0-alpha.1.23110.1][1]\r\n\r\n[1]: https://github.com/dotnet/source-build-externals/compare/9443b3a...4b86d4b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:93759b2e-8cec-490d-6e3a-08da700278bb)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/46568","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/source-build-externals\" (#46568)"},{"Id":"1580127578","IsPullRequest":true,"CreatedAt":"2023-02-10T18:18:34","Actor":"BrennanConroy","Number":"46570","RawContent":null,"Title":"Avoid stream ID and client result ID collisions","State":"open","Body":"Fixes https://github.com/dotnet/aspnetcore/issues/46503 by prefixing the client results ID with \"s\". We could prefix it with \"server\" or \"cr\" (client result) instead if we want to make it more obvious what the ID is when looking at logs.","Url":"https://github.com/dotnet/aspnetcore/pull/46570","RelatedDescription":"Open PR \"Avoid stream ID and client result ID collisions\" (#46570)"},{"Id":"1580053555","IsPullRequest":false,"CreatedAt":"2023-02-10T17:14:19","Actor":"Lonli-Lokli","Number":"46569","RawContent":null,"Title":"Provide a way for ByPassing Authentication & Authorization with Server token","State":"open","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nSometimes you would like to test API and UI in cooperation, but it's too difficult because of infrastructure - database setup, auth setup, etc. It will be useful to have a method that will add static or factory-based tokens as your token for any incoming requests.\n\n### Describe the solution you'd like\n\nI see it as a middleware which might be enabled for Development environment only, and will bypass usual auth mechanism \n\n### Additional context\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/46569","RelatedDescription":"Open issue \"Provide a way for ByPassing Authentication & Authorization with Server token\" (#46569)"},{"Id":"1579847813","IsPullRequest":false,"CreatedAt":"2023-02-10T16:18:49","Actor":"Willow766","Number":"46567","RawContent":null,"Title":".Net 6 assembly utilizing Microsoft.Extensions.Diagnostics.Healthchecks v 6.0.13 fails to load .Net 7 dependency.","State":"closed","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\n.Net 6 using Microsoft.Extensions.Diagnostics.Healthchecks nuget version 6.0.13 crashes due to a missing Microsoft.Bcl.AsycInterfaces 7.0 assembly. \r\nI don't want to hear your reasoning. I want to hear that it's been corrected.  Pick a platform please.\n\n### Expected Behavior\n\nAsyncInterfaces was included in net standard 2.  It exists but the version compatibility is out of control.  Microsoft is not adhering to their own versioning standard.  Expected behavior is not to crash because referential integrity is out of control.\n\n### Steps To Reproduce\n\nCreate a .Net 6 non-WebAPI project, add Microsoft.Extensions.Diagnostics.Healthchecks 6.0.13.  Run it - will crash due to missing .net 7 assembly (Microsoft.Bcl.AsyncInterfaces v 7.0).\n\n### Exceptions (if any)\n\nMessage: Could not load file or assembly 'Microsoft.Bcl.AsyncInterfaces, Version=7.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.\r\nSource: Microsoft.Extensions.Diagnostics.HealthChecks\r\nStackTrace:    at Microsoft.Extensions.Diagnostics.HealthChecks.DefaultHealthCheckService.RunCheckAsync(HealthCheckRegistration registration, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task`1.InnerInvoke()\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__272_0(Object obj)\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.Extensions.Diagnostics.HealthChecks.DefaultHealthCheckService.<CheckHealthAsync>d__4.MoveNext()\r\n   at HealthMonitor.<RunHealthChecks>d__14.MoveNext()\r\n   at System.Threading.Tasks.Task.<>c.<ThrowAsync>b__128_1(Object state)\r\n   at System.Threading.QueueUserWorkItemCallbackDefaultContext.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\n\n### .NET Version\n\n6.0\n\n### Anything else?\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/46567","RelatedDescription":"Closed issue \".Net 6 assembly utilizing Microsoft.Extensions.Diagnostics.Healthchecks v 6.0.13 fails to load .Net 7 dependency.\" (#46567)"},{"Id":"1579118807","IsPullRequest":false,"CreatedAt":"2023-02-10T07:13:25","Actor":"Vivek-abstract","Number":"46566","RawContent":null,"Title":"Kestrel gives 401 for large file uploads via POST request","State":"open","Body":"Hi team, \n\nThere's a weird error in Kestrel for the following scenario:\n1. Windows authentication is enabled\n2. Large file upload via HTTP post request \n3. Service is hosted as Kestrel windows service.\n\nWhen I hit a POST endpoint with a large file, it initially sends a 401 status as the browser doesn't send the credentials in the first request. This is fine as it's how Kerberos works, but the issue is that Kestrel starts draining the request body as the browser is still uploading the file to it.\nAs Kestrel has a request drain timeout of 5 seconds, it is unable to do so within 5 seconds because of the large file. It closes the connection abruptly and the 401 status doesn't reach the browser. \nAs a result, the browser doesn't send the consequent request with credentials.\n\nFor small files, it works fine as Kestrel is able to drain the request body within 5 seconds and the 401 status code reaches the browser.\n\nThe issue only occurs for large files (>30mb). I have the request limits etc configured so it's not failing due to the large file, it's failing because of the request drain timeout and Kestrel closing the connection.\n\nIs there any way I can solve this issue? As a temporary fix we had to disable authentication for this method with AllowAnonymous.\n\nI am not sure if this is the right forum to post this issue. If it's not, kindly let me know where should I post it.","Url":"https://github.com/dotnet/aspnetcore/issues/46566","RelatedDescription":"Open issue \"Kestrel gives 401 for large file uploads via POST request\" (#46566)"},{"Id":"1579118678","IsPullRequest":false,"CreatedAt":"2023-02-10T07:13:15","Actor":"khteh","Number":"46565","RawContent":null,"Title":"ASP.Net Identity Blazor: How to access `ClientId` and Client's `RedirectUris` from _Host.cshtml?","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI have an external application based on https://github.com/nextauthjs/next-auth-example which successfully redirect to my blazor Identity server. I would like to achieve the following:\r\n\r\n(1) If the `ClaimsPrincipal` is null, that means the user is not logged in. `RedirectToPage(\"/Account/Login\", new {area = \"Identity\"});`\r\n\r\n(2) Otherwise, redirect back to the caller client application which is configured via `service.AddInMemoryClients(clients)`. For example, \r\n```\r\n            // interactive client using code flow + pkce\r\n            new Client\r\n            {\r\n                ClientId = \"myapp\",\r\n                ClientSecrets = { new Secret(\"whatever\".Sha512()) },\r\n\r\n                AllowedGrantTypes = new [] { GrantType.AuthorizationCode, GrantType.ResourceOwnerPassword },\r\n\r\n                RedirectUris = { \"https://www.myapp.io/api/auth/callback/myapp\" },\r\n                FrontChannelLogoutUri = \"https://myauth.io/signout-oidc\",\r\n                PostLogoutRedirectUris = { \"https://www.myapp.io\" },\r\n                //This feature refresh token\r\n                AllowOfflineAccess = true,\r\n                AllowedScopes = {\r\n                    IdentityServerConstants.StandardScopes.OpenId,\r\n                    IdentityServerConstants.StandardScopes.Profile,\r\n                    \"myapp\"\r\n                },\r\n                //Access token life time is  3600 seconds (1 hour)\r\n                AccessTokenLifetime = 3600,\r\n                //Identity token life time is 3600 seconds (1 hour)\r\n                IdentityTokenLifetime = 3600\r\n            },\r\n```\r\nAnd the HostModel:\r\n```\r\n[AllowAnonymous]\r\npublic class HostModel : PageModel\r\n{\r\n    public async Task<IActionResult> OnGetAsync()\r\n    {\r\n        if (!await _userManager.GetUserAsync(User))\r\n        {\r\n            _logger.LogWarning($\"{nameof(HostModel)}.{nameof(OnGetAsync)} Invalid User!\");\r\n            return RedirectToPage(\"/Account/Login\", new { area = \"Identity\" });\r\n        }\r\n        /*\r\n        else if (!_signInManager.IsSignedIn(User))\r\n        {\r\n            For some reasons, this always appears as false!\r\n            _logger.LogWarning($\"{nameof(HostModel)}.{nameof(OnGetAsync)} User not signed in!\");\r\n            return RedirectToPage(\"/Account/Login\", new { area = \"Identity\" });\r\n        }*/\r\n        _logger.LogWarning($\"{nameof(HostModel)}.{nameof(OnGetAsync)} User signed in!\");\r\n        return RedirectToPage(\"XXX: How to retrieve the RedirectUris and use it here?\");\r\n    }\r\n}\r\n```\r\n\r\n### Expected Behavior\r\n\r\n_No response_\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.102\r\n\r\n### Anything else?\r\n\r\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/46565","RelatedDescription":"Open issue \"ASP.Net Identity Blazor: How to access `ClientId` and Client's `RedirectUris` from _Host.cshtml?\" (#46565)"}],"ResultType":"GitHubIssue"},"Identity-Issues":{"Issues":[{"Id":"385990535","IsPullRequest":true,"CreatedAt":"2018-12-19T00:12:57","Actor":"grahamehorner","Number":"2087","RawContent":null,"Title":"WIP: IUserTwoFactorTokenProvider token length POC","State":"closed","Body":"This is a WIP idea to support configuration of token length for UserTwoFactorTokenProviders","Url":"https://github.com/aspnet/Identity/pull/2087","RelatedDescription":"Closed or merged PR \"WIP: IUserTwoFactorTokenProvider token length POC\" (#2087)"},{"Id":"385943112","IsPullRequest":true,"CreatedAt":"2018-12-19T00:06:47","Actor":"grahamehorner","Number":"2086","RawContent":null,"Title":"Update Rfc6238AuthenticationService.cs","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2086","RelatedDescription":"Closed or merged PR \"Update Rfc6238AuthenticationService.cs\" (#2086)"},{"Id":"385172059","IsPullRequest":false,"CreatedAt":"2018-12-06T18:36:01","Actor":"ben-foster-rightio","Number":"2084","RawContent":null,"Title":"Random Authentication Sign Outs in ASP.NET Core 2.1","State":"closed","Body":"I'm receiving user complaints saying they are being directed to the login screen randomly when it has only been a minute or so since they clicked a button that would have sent a message to the server side.\r\n\r\nHere is a log of one of the errors.\r\n`[INF] Executed action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" in 1473.4897ms (afa2e885)\r\n[INF] Request finished in 1474.816ms 200 application/json; charset=utf-8 (791a596a)\r\n[INF] Request starting HTTP/1.1 GET http://MyAppmanager.MyApp.co.uk/api/AgreementAPI/GetAgreements?searchTerm=1543309403289   (ca22a1cb)\r\n[INF] Entity Framework Core \"2.1.3-rtm-32065\" initialized '\"IdentityDbContext\"' using provider '\"Microsoft.EntityFrameworkCore.SqlServer\"' with options: \"None\" (9958f5bb)\r\n[INF] Executed DbCommand (\"1\"ms) [Parameters=[\"@__get_Item_0='?' (DbType = Int32)\"], CommandType='Text', CommandTimeout='30']\"\r\n\"\"SELECT TOP(1) [e].[UserId], [e].[AcquisitionTeamId], [e].[AreaNumber], [e].[AuthorisationPassword], [e].[AutoBooking], [e].[AutoUpdateSoftware], [e].[AvayaFullName], [e].[AvayaName], [e].[AvaysExt], [e].[CanSellAgreement], [e].[ChangePassword], [e].[CompanyId], [e].[DateEnded], [e].[DateStarted], [e].[DebugLogs], [e].[DefaultQuotes], [e].[DepartmentId], [e].[EmailAddress], [e].[Forename], [e].[HomeServeEmployee], [e].[Initials], [e].[IsPurchaseOrderReviewer], [e].[JobTitle], [e].[LogonName], [e].[MaxLogins], [e].[Message], [e].[Name], [e].[Notes], [e].[PartTime], [e].[Password], [e].[ReportDDI], [e].[RoleId], [e].[Shift], [e].[ShowEngineerAlert], [e].[Surname], [e].[TerminationId], [e].[TrackFastVersion], [e].[UnreadMessage], [e].[VisibleOnChronicle]\r\nFROM [Users] AS [e]\r\nWHERE [e].[UserId] = @__get_Item_0\" (0723d8ff)\r\n[INF] AuthenticationScheme: \"Identity.Application\" signed out. (d3f50c8d)\r\n[INF] AuthenticationScheme: \"Identity.External\" signed out. (d3f50c8d)\r\n[INF] AuthenticationScheme: \"Identity.TwoFactorUserId\" signed out. (d3f50c8d)\r\n**[INF] \"Identity.Application\" was not authenticated. Failure message: \"No principal.\" (48071232)**\r\n[INF] Route matched with \"{action = \\\"GetAgreements\\\", controller = \\\"AgreementAPI\\\", page = \\\"\\\", area = \\\"\\\"}\". Executing action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" (a44c0341)\r\n[INF] Authorization failed. (b15dd539)\r\n[INF] Authorization failed for the request at filter '\"Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter\"'. (8b6446cb)\r\n[INF] Executing ChallengeResult with authentication schemes ([]). (f3dca807)\r\n[INF] AuthenticationScheme: \"Identity.Application\" was challenged. (d45f1f38)\r\n[INF] Executed action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" in 0.3846ms (afa2e885)\r\n[INF] Request finished in 9.3835ms 401  (791a596a)\r\n[INF] Request starting HTTP/1.1 POST http://MyAppmanager.MyApp.co.uk/API/CustomerAPI/WriteToLog/ application/x-www-form-urlencoded; charset=UTF-8 61 (ca22a1cb)\r\n[INF] Route matched with \"{action = \\\"WriteToLog\\\", controller = \\\"CustomerAPI\\\", page = \\\"\\\", area = \\\"\\\"}\". Executing action \"MyAppManager.Controllers.API.CustomerAPIController.WriteToLog (MyAppManager)\" (a44c0341)\r\n[INF] Executing action method \"MyAppManager.Controllers.API.CustomerAPIController.WriteToLog (MyAppManager)\" with arguments ([\"ERROR: WebAPI call is not authenticated\", \"error\"]) - Validation state: Valid (4e3479ed)\r\n[ERR] Client log: ERROR: WebAPI call is not authenticated (d4244074)\r\n`\r\n\r\n**Startup File**\r\n`public void ConfigureServices(IServiceCollection services)\r\n{\r\n\tservices.AddScoped<IRFDbRepository, RFDbRepository>();\r\n\tvar connection = _configuration.GetConnectionString(\"RFDbConnection\");\r\n\tservices.Configure<ConnectionStrings>(_configuration.GetSection(\"ConnectionStrings\"));\r\n\tservices.AddDbContext<RFDbContext>(options => options.UseSqlServer(connection));\r\n\tservices.AddDbContext<IdentityDbContext>(options => options.UseSqlServer(connection));\r\n\tservices.AddAutoMapper();\r\n\tservices.AddIdentity<User, UserRole>().AddDefaultTokenProviders();\r\n\tservices.AddTransient<IUserStore<User>, UserStore>();\r\n\tservices.AddTransient<IRoleStore<UserRole>, RoleStore>();\r\n\tservices.ConfigureApplicationCookie(options =>\r\n\t{\r\n\t\toptions.LoginPath = \"/Identity/Account/Login\";\r\n\t\toptions.LogoutPath = \"/Identity/Account/Logout\";\r\n\t\toptions.ExpireTimeSpan = TimeSpan.FromMinutes(60);\r\n\t\toptions.SlidingExpiration = true;                \r\n\t});\r\n\tservices.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1).AddRazorPagesOptions(options =>\r\n\t{\r\n\t\toptions.AllowAreas = true;\r\n\t\toptions.Conventions.AuthorizeAreaPage(\"Identity\", \"/Account/Logout\");\r\n\t});\r\n}`\r\n\r\n`public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, IRFDbRepository rFDbRepository)\r\n{\r\n\tloggerFactory.AddFile(_configuration.GetValue<string>(\"Logging:LogFile\"));\r\n\tapp.UseStaticFiles();\r\n\tapp.UseAuthentication();\r\n\tapp.UseMvc(routes =>\r\n\t{\r\n\t\troutes.MapRoute(\r\n\t\t\tname: \"default\",\r\n\t\t\ttemplate: \"{controller=Home}/{action=Index}/{id?}\");\r\n\t\troutes.MapRoute(\r\n\t\t\tname: \"ActionApi\",\r\n\t\t\ttemplate: \"api/{controller}/{action}/{id?}\");\r\n\t});\r\n\trFDbRepository.TestConnection();\r\n}`\r\n\r\nAlso I've setup the app pool as below:\r\n![image](https://user-images.githubusercontent.com/43367982/49141893-8fe42800-f2ef-11e8-8ea3-c79e45ca65a3.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2084","RelatedDescription":"Closed issue \"Random Authentication Sign Outs in ASP.NET Core 2.1\" (#2084)"},{"Id":"387530281","IsPullRequest":true,"CreatedAt":"2018-12-04T23:53:47","Actor":"natemcmaster","Number":"2092","RawContent":null,"Title":"This repo will be archived, project moved to aspnet/AspNetCore","State":"closed","Body":"As a part of https://github.com/aspnet/AspNetCore/issues/3598, this repo will be made read-only soon. The source code and issues will move to https://github.com/aspnet/AspNetCore.","Url":"https://github.com/aspnet/Identity/pull/2092","RelatedDescription":"Closed or merged PR \"This repo will be archived, project moved to aspnet/AspNetCore\" (#2092)"},{"Id":"382432623","IsPullRequest":true,"CreatedAt":"2018-12-04T23:49:57","Actor":"HaoK","Number":"2075","RawContent":null,"Title":"Port retry handler test improvement to 2.1","State":"closed","Body":"Port of similar fix for 2.2 https://github.com/aspnet/Identity/pull/2052","Url":"https://github.com/aspnet/Identity/pull/2075","RelatedDescription":"Closed or merged PR \"Port retry handler test improvement to 2.1\" (#2075)"},{"Id":"387479804","IsPullRequest":false,"CreatedAt":"2018-12-04T21:12:03","Actor":"LosManos","Number":"2091","RawContent":null,"Title":"The non-scaffolded razor page \"Register\" does not recognise Password.RequiredLength.","State":"closed","Body":"### Describe the bug\r\nSetting password length through \r\n```\r\npublic void ConfigureServices(IServiceCollection services){\r\n  ...\r\n  services.Configure<IdentityOptions>(options =>\r\n  {\r\n    options.Password.RequiredLength = 1;\r\n  });\r\n  ...\r\n```\r\ndoes not change the non-scaffolded razor page as it always says \"The Password must be at least 6 and at max 100 characters long.\" if inputed password is < 6 characters.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Create a new ASP.NET Core Web 2.1 application\r\n2. Select \"Web application (Model-View Controller)\" \r\n3. Select \"Change authentication\"\r\n3.1. Select \"Individual User Account\"\r\n4. Select Ok to have the project scaffolded.\r\n5. Open file Startup.cs\r\n6. Add \r\n```\r\nservices.Configure<IdentityOptions>(options =>\r\n{\r\n  options.Password.RequiredLength = 1;\r\n});\r\n```\r\nto method `ConfigureServices`.\r\n7. Press F5 (or select your favourite start-debug method).\r\n8. In the web browser that pops up\r\n8.1. Select Register\r\n8.2. Type \"a@example.com\" as user name (or select your favourite fast-to-type email addresss).\r\n8.3. Type \"a\" as password (or any password shorter than 6 characters).\r\n8.4. Select Register\r\n\r\n### Expected behavior\r\nThe web page should have been updated with information about successful creation of user.\r\n\r\n### Actual behaviour\r\nThe web page says \"The Password must be at least 6 and at max 100 characters long.\"\r\n\r\n### Additional context\r\nI have a question at stack overflow https://stackoverflow.com/questions/53620708/how-do-i-set-password-options-in-aspnet-core-2-1 that explains the same issue if this is not clear enough.\r\n\r\nThis issue might be duplicate of #774.","Url":"https://github.com/aspnet/Identity/issues/2091","RelatedDescription":"Closed issue \"The non-scaffolded razor page \"Register\" does not recognise Password.RequiredLength.\" (#2091)"},{"Id":"386513703","IsPullRequest":false,"CreatedAt":"2018-12-02T00:47:54","Actor":"NinoFloris","Number":"2089","RawContent":null,"Title":"No way to Add a password after creating user, except through Reset","State":"closed","Body":"So we do have RemovePasswordAsync but where's AddPasswordAsync? \r\nWe currently hack around it by using a Reset token we generated before it, but we do really need it for upgrading OAuth/Connect accounts to full accounts.","Url":"https://github.com/aspnet/Identity/issues/2089","RelatedDescription":"Closed issue \"No way to Add a password after creating user, except through Reset\" (#2089)"},{"Id":"385940834","IsPullRequest":false,"CreatedAt":"2018-12-01T01:11:14","Actor":"grahamehorner","Number":"2085","RawContent":null,"Title":"Q: moving of source","State":"closed","Body":"Is the identity repo under the aspnet/aspnetcore like other repos have ? ","Url":"https://github.com/aspnet/Identity/issues/2085","RelatedDescription":"Closed issue \"Q: moving of source\" (#2085)"},{"Id":"386331000","IsPullRequest":true,"CreatedAt":"2018-11-30T20:17:17","Actor":"dougbu","Number":"2088","RawContent":null,"Title":"Remove `SetCompatibiltyVersion(...)` call in sample","State":"closed","Body":"- aspnet/Mvc#7156 2 of ?","Url":"https://github.com/aspnet/Identity/pull/2088","RelatedDescription":"Closed or merged PR \"Remove `SetCompatibiltyVersion(...)` call in sample\" (#2088)"},{"Id":"378822046","IsPullRequest":true,"CreatedAt":"2018-11-29T21:55:44","Actor":"grahamehorner","Number":"2060","RawContent":null,"Title":"Update Rfc6238AuthenticationService.cs","State":"closed","Body":"20bytes is 160bits","Url":"https://github.com/aspnet/Identity/pull/2060","RelatedDescription":"Closed or merged PR \"Update Rfc6238AuthenticationService.cs\" (#2060)"},{"Id":"380746507","IsPullRequest":false,"CreatedAt":"2018-11-29T20:17:46","Actor":"wijnsema","Number":"2067","RawContent":null,"Title":"BypassTowFactor in SignInManager:ExternalLoginSignInAsync should default to False","State":"closed","Body":"As requested by @brockallen in #850 it is now possible to bypass 2FA in case of an external login. \r\n\r\nI'm sure there are good reasons to bypass 2FA, however the current implementation is far to general: \r\n\r\n- All providers all treated equal (some providers might not even support 2FA at all)\r\n- All users all treated equal (users can have 2FA enabled or not)\r\n\r\nThis bypass of 2FA really needs more refinement.\r\n\r\n**What makes this really a problem is the fact that it is enabled in the UI templates!** \r\nAs a developer using the template and enabling 2FA you expect 2FA to work for both local and external login!\r\n\r\nFurthermore, the redirect to the 2FA page is missing, so changing to call to `bypassTwoFactor = false` results in a confusing error that the user already exists.\r\n\r\nIn my opinion the following fragment from ExternalLogin.cshtml.cs\r\n```C#\r\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \r\n      info.ProviderKey, isPersistent: false, bypassTwoFactor: true);\r\nif (result.Succeeded)\r\n{\r\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \r\n      info.Principal.Identity.Name, info.LoginProvider);\r\n   return LocalRedirect(returnUrl);\r\n}\r\n```\r\nshould be replaced with\r\n```C#\r\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \r\n   info.ProviderKey, isPersistent: false, bypassTwoFactor: false);\r\nif (result.Succeeded)\r\n{\r\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \r\n      info.Principal.Identity.Name, info.LoginProvider);\r\n   return LocalRedirect(returnUrl);\r\n}\r\nif (result.RequiresTwoFactor)\r\n{\r\n   return RedirectToPage(\"./LoginWith2fa\", new { ReturnUrl = returnUrl });\r\n}\r\n```\r\nIf you enabled bypassTwoFactor it will still work.\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2067","RelatedDescription":"Closed issue \"BypassTowFactor in SignInManager:ExternalLoginSignInAsync should default to False\" (#2067)"},{"Id":"378006056","IsPullRequest":false,"CreatedAt":"2018-11-29T20:04:09","Actor":"blowdart","Number":"2058","RawContent":null,"Title":"Survey: Your experience using Identity UI and customization","State":"closed","Body":"We're taking a survey about how your experiences using ASP.NET Core Identity, and specifically Identity UI as a package.\r\n\r\nPlease give us your feedback, and, if you're willing, you might get a phone call to talk about your experiences in detail.\r\n\r\nhttps://microsoft.qualtrics.com/jfe/form/SV_3mTmFYDZAQutZMF ","Url":"https://github.com/aspnet/Identity/issues/2058","RelatedDescription":"Closed issue \"Survey: Your experience using Identity UI and customization\" (#2058)"},{"Id":"384918165","IsPullRequest":false,"CreatedAt":"2018-11-29T04:38:32","Actor":"OphiCA","Number":"2082","RawContent":null,"Title":"No sign-out authentication handler is registered for the scheme 'Identity.External'","State":"closed","Body":"Hello,\r\n\r\nFor several months now I've been trying to solve an issue with Identity, where 30-min on the dot after signing in, I am greeted by an `Invalid Operation Exception`:\r\n\r\n> InvalidOperationException: No sign-out authentication handler is registered for the scheme 'Identity.External'. The registered sign-out schemes are: Identity.Application. Did you forget to call AddAuthentication().AddCookies(\"Identity.External\",...)?\r\n\r\nSince it was on my blog site, I didn't put too much effort into it, even though it was an annoyance. Now, I'm looking into possibly some real world client work where I'd like to use ASP.NET Core with Identity, but I can't be having this same issue.\r\n\r\nCould someone please tell me why this exception throws? I don't want to use external schemes, so why is it trying to sign out of one? When did it sign into one?\r\n\r\nHere's the relevant code from my app, hopefully someone can point me in the right direction because I sure as heck can't.\r\n\r\n**Startup.cs**\r\n\r\n\tpublic sealed class Startup {\r\n\t\tpublic void ConfigureServices(\r\n\t\t\tIServiceCollection services) {\r\n\t\t\t//...\r\n\t\t\tservices.AddApplicationIdentity();\r\n\t\t\t//...\r\n\t\t\tservices.ConfigureApplicationCookie(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Cookie.SameSite = SameSiteMode.Strict;\r\n\t\t\t\t\to.Cookie.SecurePolicy = CookieSecurePolicy.Always;\r\n\r\n\t\t\t\t\to.AccessDeniedPath = new PathString(\"/admin\");\r\n\t\t\t\t\to.ExpireTimeSpan = TimeSpan.FromHours(4);\r\n\t\t\t\t\to.LoginPath = new PathString(\"/admin\");\r\n\t\t\t\t\to.LogoutPath = new PathString(\"/admin/sign-out\");\r\n\t\t\t\t});\r\n\t\t\tservices.Configure<IdentityOptions>(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Password.RequiredLength = 8;\r\n\r\n\t\t\t\t\to.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);\r\n\t\t\t\t\to.Lockout.MaxFailedAccessAttempts = 5;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic void Configure(\r\n\t\t\tIApplicationBuilder app) {\r\n\t\t\t//...\r\n\t\t\tapp.UseAuthentication();\r\n\t\t\t//...\r\n\t\t}\r\n\t}\r\n\r\n**ServiceCollectionExtensions**\r\n\r\n\tpublic static class ServiceCollectionExtensions {\r\n\t\tpublic static IdentityBuilder AddApplicationIdentity(\r\n\t\t\tthis IServiceCollection services) {\r\n\t\t\tservices.AddAuthentication(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.DefaultAuthenticateScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t\to.DefaultChallengeScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t\to.DefaultSignInScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t}).AddCookie(IdentityConstants.ApplicationScheme,\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Events = new CookieAuthenticationEvents {\r\n\t\t\t\t\t\tOnValidatePrincipal = SecurityStampValidator.ValidatePrincipalAsync\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\tservices.TryAddScoped<IdentityErrorDescriber>();\r\n\t\t\tservices.TryAddScoped<ILookupNormalizer, UpperInvariantLookupNormalizer>();\r\n\t\t\tservices.TryAddScoped<IPasswordHasher<User>, PasswordHasher<User>>();\r\n\t\t\tservices.TryAddScoped<IPasswordValidator<User>, PasswordValidator<User>>();\r\n\t\t\tservices.TryAddScoped<IUserClaimsPrincipalFactory<User>, UserClaimsPrincipalFactory<User>>();\r\n\t\t\tservices.TryAddScoped<UserManager<User>>();\r\n\t\t\tservices.TryAddScoped<IUserStore<User>, ApplicationUserStore>();\r\n\t\t\tservices.TryAddScoped<IUserValidator<User>, UserValidator<User>>();\r\n\t\t\tservices.TryAddScoped<ISecurityStampValidator, SecurityStampValidator<User>>();\r\n\t\t\tservices.TryAddScoped<SignInManager<User>>();\r\n\r\n\t\t\treturn new IdentityBuilder(typeof(User), services);\r\n\t\t}\r\n\t}\r\n\r\nI'm not going to include the `ApplicationUserStore` because I highly doubt it has anything to do with the exception. I'd appreciate any help because I am just struggling at this point. Thanks!","Url":"https://github.com/aspnet/Identity/issues/2082","RelatedDescription":"Closed issue \"No sign-out authentication handler is registered for the scheme 'Identity.External'\" (#2082)"},{"Id":"383003537","IsPullRequest":false,"CreatedAt":"2018-11-22T13:29:00","Actor":"LindaLawton","Number":"2079","RawContent":null,"Title":"Remember me isPersistent understanding","State":"closed","Body":"This is more of a question but its not enough of a question that i could post it up on stack overflow without risking it just getting closed as primary opinion based or to broad.   So i am going to put it here in hopes of getting an answer.\r\n\r\nThe issue is the understanding of how remember me is supposed to work.    My problem is that its not doing what we would expect it to do.   \r\n\r\nManagement expects when a user logs in and clicks remember me that they will then not be required to type their login and password again for a month.  Whether or not they will still have to type in the 2fa code is up for debate.\r\n\r\nWhat is actually happening is that i can close the browser reboot and come back for about an hour and 15 minutes and then i will be forced to type my password again.    This still happens even with a valid `.AspNetCore.Identity.Application` cookie set that is not due to expire for another month.\r\n\r\nAfter digging around in the code i found that Remember me is actually isPersistent and it is defined as.\r\n\r\n>Flag indicating whether the sign-in cookie should persist after the browser is closed.\r\n\r\nWhich brings you to:\r\n\r\nThere are two different types of Cookies:\r\n\r\n- session cookies, held in memory, and which expire once the browser exits\r\n- persistent cookies, which have a time-to-live, are persisted on disk, and are sent by the browser until their time-to-live has elapsed.\r\n\r\nAll this being said remember machine 2fa works as expected i am not prompted again for the 2fa and i have a cookie on my machine `Identity.TwoFactorRememberMe`.\r\n\r\nSo I guess my question is why are we not getting a `Identity.FactorRememberMe` or why isn't sign in respecting a long life time of the `AspNetCore.Identity.Application` cookie?\r\n\r\nHow is this supposed to work exactly?   I am following the code here even though we have normal MVC and not razor pages like you have in the example.  I am still just calling \r\n\r\n>var signInUserResult = await _signInManager.PasswordSignInAsync(userName, password, rememberMe, true);\r\n\r\nNote: I am using Asp .net Identity in Identity server 4 application.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2079","RelatedDescription":"Closed issue \"Remember me isPersistent understanding\" (#2079)"},{"Id":"383297898","IsPullRequest":false,"CreatedAt":"2018-11-21T22:08:40","Actor":"mmillican","Number":"2080","RawContent":null,"Title":"Replace a Role Validator","State":"closed","Body":"I am trying to create a custom role validator to support pseudo-multi-tenancy (which I know is not _officially_ supported in Identity) and am running into some issues.\r\n\r\nI've verified that my validator does work and is being called. However, the default validator appears to be called also. \r\n\r\nHere's my Identity service registration\r\n```\r\nservices.AddIdentity<User, Role>(setup =>\r\n    {\r\n        // Redacted settings\r\n    })\r\n    .AddRoleValidator<CustomRoleValidator<Role>>()\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders();\r\n```\r\n\r\nHow can I _remove_ the default RoleValidator?","Url":"https://github.com/aspnet/Identity/issues/2080","RelatedDescription":"Closed issue \"Replace a Role Validator\" (#2080)"},{"Id":"382890054","IsPullRequest":true,"CreatedAt":"2018-11-20T23:38:12","Actor":"dotnet-maestro-bot","Number":"2078","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\ngit checkout master\r\ngit merge --no-ff merge/release/2.2-to-master\r\ngit push origin master\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.2-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2078","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2078)"},{"Id":"382876972","IsPullRequest":true,"CreatedAt":"2018-11-20T23:38:12","Actor":"javiercn","Number":"2076","RawContent":null,"Title":"Update to IdentityServer 2.3.0","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2076","RelatedDescription":"Closed or merged PR \"Update to IdentityServer 2.3.0\" (#2076)"},{"Id":"382885320","IsPullRequest":true,"CreatedAt":"2018-11-20T23:19:15","Actor":"javiercn","Number":"2077","RawContent":null,"Title":"Update Identity Server dependencies to 2.3.0","State":"closed","Body":"This updates things on non-shipping product code, so it's ok to update (I asked).","Url":"https://github.com/aspnet/Identity/pull/2077","RelatedDescription":"Closed or merged PR \"Update Identity Server dependencies to 2.3.0\" (#2077)"},{"Id":"382068763","IsPullRequest":false,"CreatedAt":"2018-11-19T12:16:11","Actor":"wpqs","Number":"2074","RawContent":null,"Title":"Login doesn't show registered social logins after error","State":"closed","Body":"I'm using ASPNET Core 2.1 with Razor Pages UI Library and noticed that whilst registered social logins appear when I open the Login page, they disappear after an error like incorrect password.\r\n\r\nThere seems to be a bug in Identity\\Pages\\Account\\Login.cshtml.cs as \r\n````\r\n public IList<AuthenticationScheme> ExternalLogins { get; set; }\r\n\r\n````\r\nis only initialised in OnGetAsync(), but if an error happens OnPostAsync() then Page() is returned so OnGetAsyn() doesn't get called. Changing error handling in  OnPostAsync() so RedirectToPage() is returned seems to fix the problem.\r\n\r\nPlease confirm this is a bug and comment on my fix","Url":"https://github.com/aspnet/Identity/issues/2074","RelatedDescription":"Closed issue \"Login doesn't show registered social logins after error\" (#2074)"},{"Id":"381789469","IsPullRequest":true,"CreatedAt":"2018-11-17T00:27:58","Actor":"natemcmaster","Number":"2072","RawContent":null,"Title":"Upgrade projects to netcoreapp3.0","State":"closed","Body":"Changes:\r\n\r\n* Upgrade dependencies\r\n* Change TFM on Microsoft.AspNetCore.Identity to netcoreapp3.0\r\n* Remove .NET Framework tests\r\n\r\nPart of https://github.com/aspnet/AspNetCore/issues/3754","Url":"https://github.com/aspnet/Identity/pull/2072","RelatedDescription":"Closed or merged PR \"Upgrade projects to netcoreapp3.0\" (#2072)"},{"Id":"380931030","IsPullRequest":true,"CreatedAt":"2018-11-14T23:29:46","Actor":"pranavkm","Number":"2070","RawContent":null,"Title":"Use 3.0 configuration in RCLs","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2070","RelatedDescription":"Closed or merged PR \"Use 3.0 configuration in RCLs\" (#2070)"},{"Id":"378005714","IsPullRequest":false,"CreatedAt":"2018-11-14T21:00:55","Actor":"papyr","Number":"2057","RawContent":null,"Title":"AD directory user-groups; can IdentityRole be subclassed to implement Role-Groups or User-Groups","State":"closed","Body":"There is a disconnect with Active Directory, since we don't have support for User Groups in Identity, how can we implement or mirror this functionality inside ASP identity","Url":"https://github.com/aspnet/Identity/issues/2057","RelatedDescription":"Closed issue \"AD directory user-groups; can IdentityRole be subclassed to implement Role-Groups or User-Groups\" (#2057)"},{"Id":"380198930","IsPullRequest":false,"CreatedAt":"2018-11-14T17:33:59","Actor":"blankenbush","Number":"2065","RawContent":null,"Title":"Spelling error DeletePersonalData.cshtml.cs ","State":"closed","Body":"The word \"deleteing\" is wrong.  It should be \"deleting\" on line: 111; DeletePersonalData.cshtml.cs.\r\n\r\nAlso found in comment on line 183; SqlStoreTestBase.cs\r\n\r\n![capture](https://user-images.githubusercontent.com/187785/48412982-33401500-e714-11e8-903b-6e2fcc8e0a6a.PNG)\r\n","Url":"https://github.com/aspnet/Identity/issues/2065","RelatedDescription":"Closed issue \"Spelling error DeletePersonalData.cshtml.cs \" (#2065)"},{"Id":"380389829","IsPullRequest":true,"CreatedAt":"2018-11-14T17:33:01","Actor":"blankenbush","Number":"2066","RawContent":null,"Title":"Fix typo","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2066","RelatedDescription":"Closed or merged PR \"Fix typo\" (#2066)"},{"Id":"377364575","IsPullRequest":false,"CreatedAt":"2018-11-09T11:16:05","Actor":"yetanotherchris","Number":"2056","RawContent":null,"Title":"Should IdentityUser be in the EntityFramework namespace?","State":"closed","Body":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.entityframeworkcore.identityuser?view=aspnetcore-1.1\r\n\r\nI'm looking through various implementations from the [readme](https://github.com/aspnet/Identity/blob/master/README.md) and I've noticed they all use `IdentityUser ` for their concrete type to pass to `UserManager`, or have had to craft a custom type to be able to have a contract between the database and the .NET AspNetIdentity implentation they've written (see the DynamoDB library).\r\n\r\nI've had to do this too for the [Marten implementation I've written](https://github.com/yetanotherchris/Marten.AspNetIdentity), and the reason is, a `TUser` that your `UserStore` takes, should really be an interface - it will always have an email, most likely an Id of some sort, firstname, lastname and then a bag of properties.\r\n\r\nThings become even more abstract when dealing with claims.\r\n\r\nIf everyone is using `IdentityUser` or their own custom `TUser` doesn't this defeat the purpose of AspnetIdentity - which is to be able to switch and change implementations easily? That isn't possible if your consumer is tightly coupled with a `TUser` implementation of the library.\r\n\r\n### Example `TUser` implementations\r\n\r\n- [MongoIdentityUser](https://github.com/tugberkugurlu/AspNetCore.Identity.MongoDB/blob/master/src/AspNetCore.Identity.MongoDB/MongoIdentityUser.cs)\r\n- [DynamoIdentityUser](https://github.com/miltador/AspNetCore.Identity.DynamoDB/blob/master/src/AspNetCore.Identity.DynamoDB/DynamoIdentityUser.cs)\r\n- [Redis uses `IdentityUser<string>`](https://github.com/aguacongas/Identity.Redis/blob/develop/src/Aguacongas.Identity.Redis/UserStore.cs)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2056","RelatedDescription":"Closed issue \"Should IdentityUser be in the EntityFramework namespace?\" (#2056)"},{"Id":"376980171","IsPullRequest":true,"CreatedAt":"2018-11-02T21:57:29","Actor":"dotnet-maestro-bot","Number":"2055","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\ngit checkout master\r\ngit merge --no-ff merge/release/2.2-to-master\r\ngit push origin master\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.2-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2055","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2055)"},{"Id":"376978591","IsPullRequest":true,"CreatedAt":"2018-11-02T21:57:26","Actor":"javiercn","Number":"2054","RawContent":null,"Title":"Fixes integrity validation in Identity UI V3","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2054","RelatedDescription":"Closed or merged PR \"Fixes integrity validation in Identity UI V3\" (#2054)"},{"Id":"376977750","IsPullRequest":false,"CreatedAt":"2018-11-02T21:48:32","Actor":"javiercn","Number":"2053","RawContent":null,"Title":"Fix integrity tags on Identity UI V3","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/issues/2053","RelatedDescription":"Closed issue \"Fix integrity tags on Identity UI V3\" (#2053)"},{"Id":"376973581","IsPullRequest":true,"CreatedAt":"2018-11-02T21:48:08","Actor":"javiercn","Number":"2052","RawContent":null,"Title":"Fixes integrity validation hashes for Identity UI V3","State":"closed","Body":"Fixes https://github.com/aspnet/Identity/issues/2053","Url":"https://github.com/aspnet/Identity/pull/2052","RelatedDescription":"Closed or merged PR \"Fixes integrity validation hashes for Identity UI V3\" (#2052)"},{"Id":"376607709","IsPullRequest":false,"CreatedAt":"2018-11-01T23:29:51","Actor":"ycrumeyrolle","Number":"2051","RawContent":null,"Title":"[Question] Passwords should not be of type String ?","State":"closed","Body":"My security team escalated to me that the `PasswordHasher` is vulnerable to heap inspection, as the password is of type `String`. \r\nIt should be instead a byte array / span of bytes cleared at the end of the process, as it is done by any cryptographic operation in corefx. CC @bartonjs.\r\nSame problem with any password related types (`IPasswordValidator`, and maybe also the `IUserPasswordStore`)","Url":"https://github.com/aspnet/Identity/issues/2051","RelatedDescription":"Closed issue \"[Question] Passwords should not be of type String ?\" (#2051)"}],"ResultType":"GitHubIssue"},"Tooling-Issues":{"Issues":[{"Id":"597492854","IsPullRequest":true,"CreatedAt":"2020-04-09T19:44:41","Actor":"terrajobst","Number":"1097","RawContent":null,"Title":"Link Code of Conduct","State":"closed","Body":"See [this policy rule](https://github.com/dotnet/org-policy/blob/master/doc/PR15.md) for more details.","Url":"https://github.com/aspnet/Tooling/pull/1097","RelatedDescription":"Closed or merged PR \"Link Code of Conduct\" (#1097)"},{"Id":"585801568","IsPullRequest":false,"CreatedAt":"2020-03-22T20:10:12","Actor":"GaryFurash","Number":"1096","RawContent":null,"Title":"Creating Edit View with Non EFModel","State":"open","Body":"Using latest ASP.NET Core with latest Nuget on Visual Studio 2019 windows 10 pro.\r\n\r\nIf I try to create an Edit view based on a view model that isn't configured in the DB context (e.g., it's a model that doesn't map to a DB table in EF), even after adding the [Key] annotation I get the error:\r\n\r\n'The entity type 'RoleEdit' requires a primary key to be defined. If you intended to use a keyless entity type call 'HasNoKey()'.'\r\n\r\nI can't use HasNoKey since the model entity isn't in the context since it isn't a real table.\r\n","Url":"https://github.com/aspnet/Tooling/issues/1096","RelatedDescription":"Open issue \"Creating Edit View with Non EFModel\" (#1096)"},{"Id":"576654849","IsPullRequest":true,"CreatedAt":"2020-03-06T02:27:01","Actor":"mairaw","Number":"1095","RawContent":null,"Title":"Update link to a more proper target","State":"open","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1095","RelatedDescription":"Open PR \"Update link to a more proper target\" (#1095)"},{"Id":"499940912","IsPullRequest":false,"CreatedAt":"2019-09-28T16:33:15","Actor":"genifycom","Number":"1094","RawContent":null,"Title":"Add Razor Page using Entity Framework (CRUD)","State":"open","Body":"<!-- Describe what isn't working as expected -->\r\nWhen I right click on Pages and Add Razor page. I select Razor Pages using Entity Framework (CRUD). I select my Model class and my Data Context class and press Add.\r\n\r\nI expect to give the Razor page a name. But a Dialog pops up and says\r\n\r\nAdd Razor Page(s)\r\n\r\nThe following file(s) already exist:\r\n\r\nIndex\r\nIndex.cshtml.cs\r\n\r\nDo you want to replace them?\r\n---------------------------\r\nYes   No   \r\n---------------------------\r\n\r\nI do not expect that adding a Razor page will replace Index. I expect to create a NEW razor page with a new name. Saying No here does not allow one to continue.\r\n\r\n### Steps to reproduce\r\nAs above\r\n\r\nWe ❤ code! Include a complete code listing or attach a simplified project\r\n\r\nCreate a new ASP.NET Core Web Application. Use ASP.NET Core 3.0 and \"Web Application\".\r\nCreate a model class (Customer with int ID and string Name).\r\nAdd Razor Page using EF and CRUD.\r\nSelect Model class and add context class.\r\nClick Add\r\n\r\n### Further technical details\r\n\r\nEF Core version: 3.0\r\nDatabase provider: (e.g. Microsoft.EntityFrameworkCore.SqlServer)\r\nTarget framework: (e.g. .NET Core 3.0)\r\nOperating system: Windows 10\r\nIDE: (e.g. Visual Studio 2019 16.3) Visual Studio 2019 16.3.1\r\n","Url":"https://github.com/aspnet/Tooling/issues/1094","RelatedDescription":"Open issue \"Add Razor Page using Entity Framework (CRUD)\" (#1094)"},{"Id":"480473543","IsPullRequest":false,"CreatedAt":"2019-08-14T04:21:20","Actor":"AlseinX","Number":"1093","RawContent":null,"Title":"`dotnet new -i` does not work any more in preview8","State":"open","Body":"`dotnet new -i Microsoft.AspNetCore.Blazor.Templates::3.0.0-preview8.19405.7`\r\n\r\nResults:\r\n\r\n```\r\n用法: new [选项]\r\n\r\n选项:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --dry-run           Displays a summary of what would happen if the given command line were run if it would result in a template creation.\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n  --update-check      Check the currently installed template packs for updates.\r\n  --update-apply      Check the currently installed template packs for update, and install the updates.\r\n\r\n\r\nTemplates                                         Short Name               Language          Tags\r\n----------------------------------------------------------------------------------------------------------------------------------\r\nConsole Application                               console                  [C#], F#, VB      Common/Console\r\nClass library                                     classlib                 [C#], F#, VB      Common/Library\r\nWPF Application                                   wpf                      [C#], VB          Common/WPF\r\nWPF Class library                                 wpflib                   [C#], VB          Common/WPF\r\nWPF Custom Control Library                        wpfcustomcontrollib      [C#], VB          Common/WPF\r\nWPF User Control Library                          wpfusercontrollib        [C#], VB          Common/WPF\r\nWindows Forms (WinForms) Application              winforms                 [C#], VB          Common/WinForms\r\nWindows Forms (WinForms) Class library            winformslib              [C#], VB          Common/WinForms\r\nWorker Service                                    worker                   [C#]              Common/Worker/Web\r\nUnit Test Project                                 mstest                   [C#], F#, VB      Test/MSTest\r\nNUnit 3 Test Project                              nunit                    [C#], F#, VB      Test/NUnit\r\nNUnit 3 Test Item                                 nunit-test               [C#], F#, VB      Test/NUnit\r\nxUnit Test Project                                xunit                    [C#], F#, VB      Test/xUnit\r\nRazor Component                                   razorcomponent           [C#]              Web/ASP.NET\r\nRazor Page                                        page                     [C#]              Web/ASP.NET\r\nMVC ViewImports                                   viewimports              [C#]              Web/ASP.NET\r\nMVC ViewStart                                     viewstart                [C#]              Web/ASP.NET\r\nBlazor Server App                                 blazorserver             [C#]              Web/Blazor\r\nASP.NET Core Empty                                web                      [C#], F#          Web/Empty\r\nASP.NET Core Web App (Model-View-Controller)      mvc                      [C#], F#          Web/MVC\r\nASP.NET Core Web App                              webapp                   [C#]              Web/MVC/Razor Pages\r\nASP.NET Core with Angular                         angular                  [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js                        react                    [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js and Redux              reactredux               [C#]              Web/MVC/SPA\r\nRazor Class Library                               razorclasslib            [C#]              Web/Razor/Library/Razor Class Library\r\nASP.NET Core Web API                              webapi                   [C#], F#          Web/WebAPI\r\nASP.NET Core gRPC Service                         grpc                     [C#]              Web/gRPC\r\ndotnet gitignore file                             gitignore                                  Config\r\nglobal.json file                                  globaljson                                 Config\r\nNuGet Config                                      nugetconfig                                Config\r\nDotnet local tool manifest file                   tool-manifest                              Config\r\nWeb Config                                        webconfig                                  Config\r\nSolution File                                     sln                                        Solution\r\nProtocol Buffer File                              proto                                      Web/gRPC\r\n\r\nExamples:\r\n    dotnet new mvc --auth Individual\r\n    dotnet new wpfcustomcontrollib\r\n    dotnet new --help\r\n\r\n```\r\n\r\nRunning `dotnet new -i aaa::bbb` results the same.","Url":"https://github.com/aspnet/Tooling/issues/1093","RelatedDescription":"Open issue \"`dotnet new -i` does not work any more in preview8\" (#1093)"},{"Id":"477192366","IsPullRequest":true,"CreatedAt":"2019-08-06T06:25:26","Actor":"SuperChenSSS","Number":"1092","RawContent":null,"Title":"Point \"Set up DNS name for the VM\" link to the right direction","State":"open","Body":"The \"Set up DNS name for the VM\" link is incorrect and can't see the content. Change it to the right direction.","Url":"https://github.com/aspnet/Tooling/pull/1092","RelatedDescription":"Open PR \"Point \"Set up DNS name for the VM\" link to the right direction\" (#1092)"},{"Id":"477188104","IsPullRequest":true,"CreatedAt":"2019-08-06T06:24:35","Actor":"SuperChenSSS","Number":"1091","RawContent":null,"Title":"Point \"Set up DNS name for the VM\" link to the right direction","State":"closed","Body":"The \"Set up DNS name for the VM\" link is incorrect and can't see the content. Change it to the right direction.","Url":"https://github.com/aspnet/Tooling/pull/1091","RelatedDescription":"Closed or merged PR \"Point \"Set up DNS name for the VM\" link to the right direction\" (#1091)"},{"Id":"476745373","IsPullRequest":false,"CreatedAt":"2019-08-05T09:15:18","Actor":"juniormayhe","Number":"1090","RawContent":null,"Title":"Cannot start a webapi on specific SSL port managed by IISExpress","State":"open","Body":"A brand new netcore webapi 2.2 is created. \r\n\r\nCurrent launch settings:\r\n```\r\n{\r\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:62813\",\r\n      \"sslPort\": 44396\r\n    }\r\n  },\r\n```\r\n\r\nAfter setting the SSL port to anything such as 11000, application won't get started on IIS Express, but the same app runs correctly on port 11000 after being published to local IIS (https://localhost:11000).\r\n\r\nThe only way to start it on IIS Express is to keep 443 prefix (i.e. 44300, 44301, etc). \r\n\r\nIs this restriction by design as stated [here](https://developercommunity.visualstudio.com/content/problem/39430/changing-port-number-in-a-web-project-does-not-imm.html?childToView=43139#comment-43139)?\r\n\r\n\"You can change that value to whatever you want.\" definitely is not working as stated here: https://github.com/aspnet/Tooling/issues/286\r\n\r\n```\r\n- Visual Studio 2019 16.1.6\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-012264\r\n Commit:    be3f0c1a03\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27804-01\r\n  Commit:  fdf81c6faf\r\n\r\n.NET Core SDKs installed:\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800-preview-009696 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010219 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012264 [C:\\Program Files\\dotnet\\sdk]\r\n```","Url":"https://github.com/aspnet/Tooling/issues/1090","RelatedDescription":"Open issue \"Cannot start a webapi on specific SSL port managed by IISExpress\" (#1090)"},{"Id":"465641918","IsPullRequest":false,"CreatedAt":"2019-07-09T08:26:34","Actor":"plachor","Number":"1089","RawContent":null,"Title":"LaunchSettings are not respected by Test Runner","State":"open","Body":"In latest Visual Studio 2019, Test Runner ignores `environmentVariables` configuration which would allow for instance configuration of `ASPNETCORE_ENVIRONMENT`.\r\n\r\nThis would be beneficial for integration tests that in local environment use different appsettings (non-production).\r\n\r\nFor instance I would like to define following launchSettings.json:\r\n```json\r\n{\r\n  \"profiles\": {\r\n    \"SomeFancyNamespace.ProjectName.Integration.Tests\": {\r\n      \"commandName\": \"Project\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThere was an related issue that was closed: https://github.com/aspnet/Tooling/issues/456 ","Url":"https://github.com/aspnet/Tooling/issues/1089","RelatedDescription":"Open issue \"LaunchSettings are not respected by Test Runner\" (#1089)"},{"Id":"447378907","IsPullRequest":true,"CreatedAt":"2019-05-22T23:02:06","Actor":"Rick-Anderson","Number":"1088","RawContent":null,"Title":"Update dotnet-core-3.0-preview1.md","State":"open","Body":"MS Style guide violations and other clean up. Less is more.","Url":"https://github.com/aspnet/Tooling/pull/1088","RelatedDescription":"Open PR \"Update dotnet-core-3.0-preview1.md\" (#1088)"},{"Id":"433911513","IsPullRequest":true,"CreatedAt":"2019-04-16T17:57:10","Actor":"Rick-Anderson","Number":"1087","RawContent":null,"Title":"Update known-issues-vs2017.md","State":"open","Body":"Use Visual Studio Installer to install the missing Visual Studio component \".NET Core 1.0 - 1.1 developer tools for Web\" from the **Individual components** tab.","Url":"https://github.com/aspnet/Tooling/pull/1087","RelatedDescription":"Open PR \"Update known-issues-vs2017.md\" (#1087)"},{"Id":"430834286","IsPullRequest":false,"CreatedAt":"2019-04-09T17:36:29","Actor":"Ashishks1987","Number":"1086","RawContent":null,"Title":"System.Collections.Immutable dll being replace by Microsoft.Net.Compilers","State":"closed","Body":"I have referenced `system.collections.immutable.dll` from the nuget package and I also have the nuget package installed for `Microsoft.Net.Compilers`. Everything works fine in my local but when I push my code to bamboo, in the runtime I get `Could not load file or assembly 'System.Collections.Immutable, Version=1.2.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)`\r\n\r\nWhen I checked logs on bamboo when it generates the artifacts, I can see that initially it copied the correct dll here:\r\n\r\n`build    04-Apr-2019 03:20:33      Copying file from \"E:\\agt01\\ENS-EB580-JOB1\\Bin\\Packages\\System.Collections.Immutable.1.5.0\\lib\\netstandard1.0\\System.Collections.Immutable.dll\" to \"E:\\agt01\\ENS-EB580-JOB1\\Binaries\\Release\\\\temp\\Web\\_PublishedWebsites\\MyService\\bin\\System.Collections.Immutable.dll\"`.\r\n\r\nbut then at some point, it replaced this dll with this: `build    04-Apr-2019 03:20:33      Copying file from \"E:\\agt01\\ENS-EB580-JOB1\\Bin\\Packages\\Microsoft.Net.Compilers.1.0.0\\tools\\System.Collections.Immutable.dll\" to \"E:\\agt01\\ENS-EB580-JOB1\\Binaries\\Release\\\\temp\\Web\\_PublishedWebsites\\MyService\\bin\\System.Collections.Immutable.dll\".`\r\n\r\nHow can I make sure that bamboo does not replace this dll and just uses it from the nuget package installed?","Url":"https://github.com/aspnet/Tooling/issues/1086","RelatedDescription":"Closed issue \"System.Collections.Immutable dll being replace by Microsoft.Net.Compilers\" (#1086)"},{"Id":"422330835","IsPullRequest":false,"CreatedAt":"2019-03-18T17:00:12","Actor":"vikasNew","Number":"1085","RawContent":null,"Title":"web deploy on windows 10","State":"open","Body":"Hello,\r\n\r\ncan i publish my code by using web deploy to windows 10 machine.\r\n\r\ni have setup my testing windows 10 machine for deployment, which is in local area network.\r\n\r\nSo i want to publish my code to that remote machine by using web deploy. can i do that ?\r\n\r\ni have installed web deploy and also enabled web development remote service on windows 10 but i am not able to connect to remote machine using we deploy.\r\n\r\nThis returns me the following error every-time.\r\n\"ERROR_DESTINATION_NOT_REACHABLE\"\r\n\r\ninteresting thing is i also have windows 10 on my machine & i am able to use web deploy on my local machine but it's not working with remote windows 10 machine.\r\n\r\nis web deploy only meant for Windows servers not for other normal windows?\r\n\r\nThanks \r\n","Url":"https://github.com/aspnet/Tooling/issues/1085","RelatedDescription":"Open issue \"web deploy on windows 10\" (#1085)"},{"Id":"398036850","IsPullRequest":false,"CreatedAt":"2019-01-15T05:32:59","Actor":"chrgraefe","Number":"1084","RawContent":null,"Title":"Can't add area on ASP.NET Core MVC project","State":"closed","Body":"### Describe the bug\r\nA clear and concise description of what the bug is.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using this version of ASP.NET Core '3.0.100-preview-009812'\r\n2. New ASP.NET Core MVC project in VS2019 Preview\r\n3. Can't add area\r\n\r\n### Expected behavior\r\nA dialog to type area name\r\n","Url":"https://github.com/aspnet/Tooling/issues/1084","RelatedDescription":"Closed issue \"Can't add area on ASP.NET Core MVC project\" (#1084)"},{"Id":"391209971","IsPullRequest":false,"CreatedAt":"2018-12-14T18:00:59","Actor":"sai-manoj-kumar","Number":"1080","RawContent":null,"Title":"The template to create an ASP .NET VM is not working","State":"open","Body":"[The template given here](https://github.com/aspnet/Tooling/blob/AspNetVMs/docs/create-asp-net-vm-with-webdeploy.md#PowerShellScript) doesn't work. It gives the error SkuNotAvailable. Can someone please fix it?","Url":"https://github.com/aspnet/Tooling/issues/1080","RelatedDescription":"Open issue \"The template to create an ASP .NET VM is not working\" (#1080)"},{"Id":"385928083","IsPullRequest":false,"CreatedAt":"2018-12-07T20:30:45","Actor":"sinand","Number":"1079","RawContent":null,"Title":"auto build on browser request not working","State":"closed","Body":"I am using community edition 15.9.3 since  the previous update this feature is not working, everytime I have to build project.","Url":"https://github.com/aspnet/Tooling/issues/1079","RelatedDescription":"Closed issue \"auto build on browser request not working\" (#1079)"},{"Id":"383440110","IsPullRequest":false,"CreatedAt":"2018-11-26T19:03:29","Actor":"eriawan","Number":"1078","RawContent":null,"Title":"Feedback: ensure that .NET Core 1.0/1.1 tooling only supported in VS 2017 and won't be supported in VS 2019","State":"closed","Body":"Apologize if my feedback may sound controversial or may spark a debate.\r\n\r\nI need to be sure that the problem mentioned on this [page](https://github.com/aspnet/Tooling/blob/master/known-issues-vs2017.md#to-create-aspnet-core-10--11-projects-install-visual-studios-net-core-10---11-developer-tools-for-web-component) about .NET Core 1.0/1.1 tooling is installed when creating new ASP.NET Core 1.0/1.1 project should not happen or should not be supported in VS 2019.\r\n\r\nThese are my main concerns:\r\n\r\n1. VS 2019 is about to be released in around early 2019\r\n2. ASP.NET Core 1.0/1.1 is not going to be supported anymore, based on [this page](https://github.com/dotnet/core/blob/master/microsoft-support.md).\r\n3. Creating new ASP.NET Core 1.0/1.1 will always install the .NET Core 1.0/1.1 web tooling, and this is not necessary when previous reason has reached the unsupported period and it's quite near or might be the same time of VS 2019 release.\r\n4. Based on the problem mentioned above, VS 2017 has no \"built in\" tooling when creating new ASP.NET Core 1.0/1.1 project, but the external tooling may help. Therefore for those that still need to maintain ASP.NET Core 1.0/1.1 projects, we could use VS 2017 as long as the VS 2017 is still in support lifecycle or in mainstream support lifecycle.\r\n\r\nI welcome feedback 🙂 \r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1078","RelatedDescription":"Closed issue \"Feedback: ensure that .NET Core 1.0/1.1 tooling only supported in VS 2017 and won't be supported in VS 2019\" (#1078)"},{"Id":"349649932","IsPullRequest":true,"CreatedAt":"2018-08-10T20:38:21","Actor":"AndrewBrianHall","Number":"1077","RawContent":null,"Title":"Adding a .net core -> vs mapping table","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1077","RelatedDescription":"Closed or merged PR \"Adding a .net core -> vs mapping table\" (#1077)"},{"Id":"333613195","IsPullRequest":false,"CreatedAt":"2018-06-27T12:59:29","Actor":"Liero","Number":"1076","RawContent":null,"Title":"Unable to publish when using Microsoft.NET.Sdk.Razor","State":"closed","Body":"After I upgraded my solution from asp.net core 2.0 to 2.1, I'm not able to publish my web app from Visual Studio, although it can build.\r\n\r\nDuring the upgrade I've changed SDK in one of my class libraries to **Microsoft.NET.Sdk.Razor**, but now I'm getting a lot of errors and if project references were not recognized in this library when publishing.\r\n\r\n```\r\nConnecting to C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\publish\\...\r\nMyProject.Web -> C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\MyProject.Web.dll\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;RELEASE;NETCOREAPP;NETCOREAPP2_1 /errorendlocation /preferreduilang:en-US /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization.policy\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.Policy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.internal\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cryptography.Internal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.server.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.html.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Html.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.jsonpatch\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.JsonPatch.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.apiexplorer\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.dataannotations\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.json\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.viewfeatures\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.language\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Language.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.runtime\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.webutilities\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.WebUtilities.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.CodeAnalysis.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.dotnet.platformabstractions\\2.1.0\\lib\\netstandard1.3\\Microsoft.DotNet.PlatformAbstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Relational.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.SqlServer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Binder.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netcoreapp2.0\\Microsoft.Extensions.DependencyInjection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencymodel\\2.1.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.composite\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Composite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.filesystemglobbing\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileSystemGlobbing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.objectpool\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.ObjectPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Options.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.webencoders\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.WebEncoders.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.net.http.headers\\2.1.0\\lib\\netstandard2.0\\Microsoft.Net.Http.Headers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.VisualBasic.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.Win32.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.win32.registry\\4.5.0\\ref\\netstandard2.0\\Microsoft.Win32.Registry.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\mscorlib.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\netstandard.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json.bson\\1.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.Bson.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json\\11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\remotion.linq\\2.2.0\\lib\\netstandard1.0\\Remotion.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.AppContext.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Buffers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Concurrent.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Immutable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.NonGeneric.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Specialized.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Annotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.EventBasedAsync.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.TypeConverter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Console.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.Common.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.data.sqlclient\\4.5.0\\ref\\netcoreapp2.1\\System.Data.SqlClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Contracts.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Debug.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.DiagnosticSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.FileVersionInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Process.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.StackTrace.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TextWriterTraceListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tools.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TraceSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tracing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Dynamic.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Calendars.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.Brotli.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.ZipFile.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.DriveInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Watcher.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.IsolatedStorage.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.MemoryMappedFiles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Pipes.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.UnmanagedMemoryStream.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Expressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Queryable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.HttpListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Mail.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NameResolution.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NetworkInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Ping.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Requests.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.ServicePoint.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Sockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebHeaderCollection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.Client.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.Vectors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ObjectModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.DispatchProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.ILGeneration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.Lightweight.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.TypeExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Reader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.ResourceManager.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Writer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.CompilerServices.VisualC.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Handles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.RuntimeInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.WindowsRuntime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Loader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Formatters.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\ref\\netstandard2.0\\System.Security.AccessControl.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Claims.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Algorithms.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Csp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.X509Certificates.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.cryptography.xml\\4.5.0\\ref\\netstandard2.0\\System.Security.Cryptography.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.permissions\\4.5.0\\ref\\netstandard2.0\\System.Security.Permissions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Principal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.5.0\\ref\\netstandard2.0\\System.Security.Principal.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.SecureString.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceModel.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceProcess.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encodings.web\\4.5.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.RegularExpressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Overlapped.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Dataflow.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Thread.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.ThreadPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Timer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.Local.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ValueTuple.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.HttpUtility.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.ReaderWriter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlSerializer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\WindowsBase.dll\" /debug- /debug:portable /filealign:512 /optimize+ /out:obj\\Release\\netcoreapp2.1\\MyProject.Mail.dll /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:library /warnaserror- /utf8output /deterministic+ /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.CSharp.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.analyzers\\2.1.0\\analyzers\\dotnet\\cs\\Microsoft.EntityFrameworkCore.Analyzers.dll\" EmailDefaults.cs EmailOptions.cs MailSender.cs NotificationService.cs RazorViewToStringRenderer.cs \"C:\\Users\\daniel.turan\\AppData\\Local\\Temp\\.NETCoreApp,Version=v2.1.AssemblyAttributes.cs\" obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\\Release\\netcoreapp2.1\\\\Tem\tporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.RazorAssemblyInfo.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.AssemblyInfo.cs /warnaserror+:NU1605\r\nNotificationService.cs(15,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\nNotificationService.cs(16,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\n...\r\n```\r\n\r\nAlso, see https://stackoverflow.com/questions/50926116/publish-failed-when-using-microsoft-net-sdk-razor-if-reference-was-not-recognize for more details","Url":"https://github.com/aspnet/Tooling/issues/1076","RelatedDescription":"Closed issue \"Unable to publish when using Microsoft.NET.Sdk.Razor\" (#1076)"},{"Id":"329605262","IsPullRequest":false,"CreatedAt":"2018-06-05T20:05:23","Actor":"AngelosP","Number":"1075","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of dotnet-aspnet-codegenerator","State":"open","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","Url":"https://github.com/aspnet/Tooling/issues/1075","RelatedDescription":"Open issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of dotnet-aspnet-codegenerator\" (#1075)"},{"Id":"328747170","IsPullRequest":false,"CreatedAt":"2018-06-02T14:10:13","Actor":"AceHack","Number":"1074","RawContent":null,"Title":"Docker in launchSettings.json","State":"open","Body":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image.","Url":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Open issue \"Docker in launchSettings.json\" (#1074)"},{"Id":"328082529","IsPullRequest":true,"CreatedAt":"2018-06-01T17:41:04","Actor":"federicorinaldi","Number":"1073","RawContent":null,"Title":"Update dotnet-core-2.1.md","State":"closed","Body":"Visual Studio 2017 15.7 has been released now so this document is outdated","Url":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Closed or merged PR \"Update dotnet-core-2.1.md\" (#1073)"},{"Id":"323850872","IsPullRequest":false,"CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Number":"1072","RawContent":null,"Title":"can not upload file FTPS. ","State":"closed","Body":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072)"},{"Id":"317494886","IsPullRequest":false,"CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Number":"1071","RawContent":null,"Title":" Unable to start debugging","State":"open","Body":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Open issue \" Unable to start debugging\" (#1071)"},{"Id":"316585462","IsPullRequest":false,"CreatedAt":"2018-04-24T05:17:55","Actor":"rberger247","Number":"1070","RawContent":null,"Title":"Visual studio freezes when I run add-migration ","State":"closed","Body":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger.","Url":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070)"},{"Id":"308764422","IsPullRequest":false,"CreatedAt":"2018-03-27T05:23:09","Actor":"dvdobrovolskiy","Number":"1069","RawContent":null,"Title":"EntityFramework migrations not available to be applied during publish","State":"closed","Body":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc","Url":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069)"},{"Id":"304770827","IsPullRequest":false,"CreatedAt":"2018-03-14T05:33:19","Actor":"ghost","Number":"1068","RawContent":null,"Title":"Switch between Razor Page View and Code Behind","State":"closed","Body":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n","Url":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068)"},{"Id":"304312342","IsPullRequest":false,"CreatedAt":"2018-03-13T05:33:42","Actor":"RehanSaeed","Number":"1067","RawContent":null,"Title":"Support dotnet watch in launchSettings.json","State":"closed","Body":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine.","Url":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067)"},{"Id":"300865938","IsPullRequest":false,"CreatedAt":"2018-02-28T06:01:18","Actor":"rjamesnw","Number":"1066","RawContent":null,"Title":"Nesting bug","State":"closed","Body":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file.","Url":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066)"},{"Id":"290854647","IsPullRequest":false,"CreatedAt":"2018-01-24T01:14:53","Actor":"NeerajaRagesh","Number":"1065","RawContent":null,"Title":"Issue with Sales discount App - Odoo 9","State":"closed","Body":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n","Url":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"1575203037","IsPullRequest":true,"CreatedAt":"2023-02-08T00:08:59","Actor":"brunolins16","Number":"500","RawContent":null,"Title":"Fixing announcement template","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/500","RelatedDescription":"Closed or merged PR \"Fixing announcement template\" (#500)"},{"Id":"1375214843","IsPullRequest":false,"CreatedAt":"2023-02-03T03:50:56","Actor":"halter73","Number":"493","RawContent":null,"Title":"[Breaking change]: ApiExplorer and OpenAPI metadata is generated for RequestDelegate endpoints in RC1 *only*","State":"closed","Body":"### Description\r\n\r\nIn .NET 6, ASP.NET Core added support for `Delegate` [route handlers](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0#route-handlers) in addition to conventional `RequestDelegate` endpoints which have existed since ASP.NET Core 3.0.\r\n\r\nIn .NET 7 RC 1, we started automatically generating more API metadata for the older `RequestDelegate` endpoints to align the behavior of these two kinds of endpoints. **In .NET 7 RC 2, we plan to revert this breaking change** which will cause no API metadata to inferred for `RequestDelegate` endpoints again.\r\n\r\n### Version\r\n\r\n.NET 7 RC1\r\n\r\n### Previous behavior\r\n\r\nBefore .NET 7 RC1, conventional `RequestDelegate` endpoints did not get added to the [ApiExplorer](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.apiexplorer?view=aspnetcore-6.0) model or the `OpenApiOperation` generated by [WithOpenApi()](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.openapiendpointconventionbuilderextensions.withopenapi?view=aspnetcore-7.0).\r\n\r\n### New behavior\r\n\r\nIn .NET RC 1 and RC 1 only **(this is being reverted in RC 2)**, the `RequestDelegate`'s `MethodInfo` is added to the [EndpointMetadataCollection](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.endpointmetadatacollection?view=aspnetcore-6.0) just like with `Delegate` route handlers causing ApiExplorer and WithOpenApi() to generate endpoint metadata for endpoints that previously were not part of the model.\r\n\r\nThis can impact third party libraries like [Swashbuckle](https://github.com/domaindrivendev/Swashbuckle.AspNetCore) and [NSwag](https://github.com/RicoSuter/NSwag).\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/44005 for more context. \r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nWe were [hoping ](https://github.com/dotnet/aspnetcore/pull/42827/files/cbff9e89b459111ea104ec71c2d3bf9cee6c9e5f#r925142793) that aligning the behavior of `RequestDelegate` and `Delegate` backed endpoints would reduce confusion. We've decided to walk this back though.\r\n\r\n### Recommended action\r\n\r\nYou can add a custom convention that removes the `MethodInfo` from the endpoint metadata or wait for RC 2 to revert this behavior. You can use a group to make it apply to multiple endpoints.\r\n\r\n```csharp\r\nvar noMetadataGroup = app.MapGroup(\"\");\r\nIEndpointConventionBuilder groupConventionBuilder = noMetadataGroup;\r\n\r\ngroupConventionBuilder.Add(endpointBuilder =>\r\n{\r\n    if (endpointBuilder.Metadata.FirstOrDefault(m => m is MethodInfo) is MethodInfo method)\r\n    {\r\n        endpointBuilder.Metadata.Remove(method);\r\n    }\r\n});\r\n\r\nnoMetadataGroup.MapGet(\"/\", (context) => context.Response.WriteAsync(\"RequestDelegate endpoint.\"));\r\n```\r\n\r\n### Affected APIs\r\n\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(IEndpointRouteBuilder, RoutePattern, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapGet(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPost(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapDelete(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPut(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapMethods(IEndpointRouteBuilder, String, IEnumerable<String>, RequestDelegate)`","Url":"https://github.com/aspnet/Announcements/issues/493","RelatedDescription":"Closed issue \"[Breaking change]: ApiExplorer and OpenAPI metadata is generated for RequestDelegate endpoints in RC1 *only*\" (#493)"},{"Id":"1497212375","IsPullRequest":true,"CreatedAt":"2022-12-14T19:04:06","Actor":"gewarren","Number":"499","RawContent":null,"Title":"Update incompatibility types in BC template","State":"closed","Body":"I updated the breaking change template to match dotnet/docs. Feel free to close if you don't like these definitions, however.","Url":"https://github.com/aspnet/Announcements/pull/499","RelatedDescription":"Closed or merged PR \"Update incompatibility types in BC template\" (#499)"},{"Id":"1455922247","IsPullRequest":false,"CreatedAt":"2022-11-18T22:38:34","Actor":"halter73","Number":"498","RawContent":null,"Title":"[Breaking change]: `WebApplicationBuilder` gives `ASPNET_`-prefixed environment variables lower precedence","State":"open","Body":"### Description\n\nStarting in .NET 7 preview 3, when using `WebApplicationBuilder` but not any other host (e.g. `ConfigureWebHostDefaults` or `WebHost.CreateDefaultBuilder`), command-line arguments and `DOTNET_`-prefixed environment variables override `ASPNET_`-prefixed environment variables when reading from [default host configuration sources](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#default-host-configuration-sources) which are used to read [host variables](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#host-variables) like the content root path and environment name when the `WebApplicationBuilder` is constructed and serves as a base for [application configuration](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#application-configuration-providers).\r\n\r\n`ASPNET_`-prefixed environment variables now has the lowest precedence of all of `WebApplicationBuilder`'s [default host configuration sources](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#default-host-configuration-sources).\r\n\r\nSee https://github.com/dotnet/AspNetCore.Docs/issues/25626#issuecomment-1098616664 for more context.\n\n### Version\n\n.NET 7 Preview 3\n\n### Previous behavior\n\n`ASPNET_`-prefixed environment variables overrode command-line arguments and `DOTNET_`-prefixed environment variables.\n\n### New behavior\n\nCommand-line arguments and `DOTNET_`-prefixed environment variables override `ASPNET_`-prefixed environment variables\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nTo prevent environment variables from overriding explicit command-line arguments when reading host variables which is more consistent with application configuration which has always given command-line arguments the highest precedence.\n\n### Recommended action\n\nIf you were using `ASPNETCORE_`-prefixed environment variables to override command-line arguments or `DOTNET_-`prefixed environment variables, use something with a higher priority. This could mean using custom [WebApplicationOptions](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationoptions?view=aspnetcore-7.0) which overrides all default hosting configuration sources.\n\n### Affected APIs\n\n`Microsoft.AspNetCore.Builder.WebApplicationBuilder`","Url":"https://github.com/aspnet/Announcements/issues/498","RelatedDescription":"Open issue \"[Breaking change]: `WebApplicationBuilder` gives `ASPNET_`-prefixed environment variables lower precedence\" (#498)"},{"Id":"1414759756","IsPullRequest":false,"CreatedAt":"2022-10-19T11:01:00","Actor":"javiercn","Number":"497","RawContent":null,"Title":"[Breaking change]: Updates to Authentication in webassembly applications","State":"open","Body":"### Description\n\nWe updated our support for authentication in Blazor Webassembly applications to rely on the history state instead of query strings in the URL. As a result of that, existing applications passing the return URL through the query string will fail to redirect back to the original page after a successful login.\r\n\r\nExisting applications should use the new `NavigateToLogin` extension method as it is able to flow the data to the login page corectly.\n\n### Version\n\n.NET 7 RC 1\n\n### Previous behavior\n\nThe return URL would be specified in the query string as `?returnUrl=<<return-url>>`.\n\n### New behavior\n\nThe return URL along other parameters passed to the `authentication/login` page are passed via the `history.state` entry of the page.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nWe decided to switch to using `history.state` instead of the query string as it simplifies the implementation and removes the surface attack area associated with passing data through the query string.\n\n### Recommended action\n\nMost apps have a RedirectToLogin.razor file in them that can be updated as follows:\r\n\r\n```razor\r\n@inject NavigationManager Navigation\r\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\r\n@using Microsoft.Extensions.Options\r\n\r\n@inject IOptionsSnapshot<RemoteAuthenticationOptions<ApiAuthorizationProviderOptions>> Options\r\n@code {\r\n\r\n    protected override void OnInitialized()\r\n    {\r\n        Navigation.NavigateToLogin(Options.Get(Microsoft.Extensions.Options.Options.DefaultName).AuthenticationPaths.LogInPath);\r\n    }\r\n}\r\n```\n\n### Affected APIs\n\nAs part of this change `SignOutSessionStateManager` has been obsoleted in favor of `NavigationManager.NavigateToLogout`","Url":"https://github.com/aspnet/Announcements/issues/497","RelatedDescription":"Open issue \"[Breaking change]: Updates to Authentication in webassembly applications\" (#497)"},{"Id":"1400322849","IsPullRequest":false,"CreatedAt":"2022-10-06T21:30:20","Actor":"halter73","Number":"496","RawContent":null,"Title":"[Breaking change]: IEndpointMetadataProvider and IEndpointParameterMetadataProvider interface changes in 7.0 RC2","State":"open","Body":"### Description\n\nIn ASP.NET Core 7 RC2, the `IEndpointMetadataProvider` and `IEndpointParameterMetadataProvider` interfaces [introduced in  preview 4](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-4/#self-describing-minimal-apis-with-iendpointmetadataprovider-and-iendpointparametermetadataprovider) have been updated to take an [EndpointBuilder](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.endpointbuilder?view=aspnetcore-7.0) rather than a `EndpointMetadataContext` or `EndpointParameterMetadataContext`.\r\n\r\n\n\n### Version\n\n.NET 7 RC 2\n\n### Previous behavior\n\nThe `PopulateMetadata` methods on both interfaces took their respective context arguments as a single parameter. Both contexts included services (`IServiceProvider`) and endpoint metadata (`IList<object>`).\r\n\r\n`EndpointMetadataContext` included the `MethodInfo` for the minimal route handler MVC action that took the implementing type as a parameter or returned it. `EndpointParameterMetadataContext` provided `ParameterInfo` and could only be used on parameter types.\n\n### New behavior\n\nNow in RC2, both interfaces' `PopulateMetadata` method take an `EndpointBuilder` as their second parameter. The `EndpointBuilder` provides access to the application services (`IServiceProvider`) and endpoint metadata (`IList<object>`) previously provided by `EndpointMetadataContext` and `EndpointParameterMetadataContext`.\r\n\r\nNow, `IEndpointMetadataProvider` takes a `MethodInfo` and `IEndpointParameterMetadataProvider` takes a `ParameterInfo` as their first parameter.\r\n\r\nBoth `EndpointMetadataContext` and `EndpointParameterMetadataContext` have been removed.\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/43125#issuecomment-1218534849 for an API diff.\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [ ] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThe metadata providers now get access to more metadata like the `RoutePattern` (with a downcast) and `DisplayName` via the `EndpointBuilder`, and this allowed us to delete unnecessary context types.\n\n### Recommended action\n\nUpdate implementations of `IEndpointMetadataProvider` and `IEndpointParameterMetadataProvider` to access the information necessary from the new parameters. There should be nothing that was available via the contexts previously that are unavailable via `PopulateMetadata`'s new parameters.\n\n### Affected APIs\n\n- Parameters changed: `Microsoft.AspNetCore.Http.Metadata.IEndpointMetadataProvider.PopulateMetadata`\r\n- Parameters changed: `Microsoft.AspNetCore.Http.Metadata.IEndpointParameterMetadataProvider.PopulateMetadata`\r\n- Removed: `Microsoft.AspNetCore.Http.Metadata.EndpointMetadataContext`\r\n- Removed: `Microsoft.AspNetCore.Http.Metadata.EndpointParameterMetadataContext`","Url":"https://github.com/aspnet/Announcements/issues/496","RelatedDescription":"Open issue \"[Breaking change]: IEndpointMetadataProvider and IEndpointParameterMetadataProvider interface changes in 7.0 RC2\" (#496)"},{"Id":"1396674543","IsPullRequest":false,"CreatedAt":"2022-10-04T18:23:29","Actor":"MackinnonBuck","Number":"495","RawContent":null,"Title":"[Breaking change]: Endpoints configured with 'MapFallbackToFile()' now only match 'HEAD' and 'GET' requests","State":"open","Body":"### Description\n\nThe `ConsumesAttribute` attribute allows controller actions to specify their supported content types. Starting in .NET 6, if a fallback file endpoint was configured, it could match routes that were discarded due to the request having a different content type than what was specified in an action's `ConsumesAttribute`. This was an undesirable change in behavior from .NET 5 that we are partially addressing in .NET 7 by making fallback file endpoints only match `GET` and `HEAD` requests.\n\n### Version\n\n.NET 7 RC2\n\n### Previous behavior\n\nEndpoints configured with `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()` may match requests made with any request method.\n\n### New behavior\n\nEndpoints configured with `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()` will only match `HEAD` and `GET` requests.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis partially reverts larger breaking change accidentally introduced in .NET 6. Since it's highly unusual to expect a fallback file response when making a request with a method other than `HEAD` or `GET`, we anticipate the impact of this breaking change to be minimal.\n\n### Recommended action\n\nIf you want fallback file endpoints to match requests with methods other than `HEAD` or `GET`, you can specify additional HTTP request methods using `WithMetadata()`. For example:\r\n\r\n```csharp\r\nendpoints.MapFallbackToFile(\"index.html\")\r\n    .WithMetadata(new HttpMethodMetadata(new[] { /* List supported methods here */ }));\r\n```\n\n### Affected APIs\n\nAll overloads of `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()`.","Url":"https://github.com/aspnet/Announcements/issues/495","RelatedDescription":"Open issue \"[Breaking change]: Endpoints configured with 'MapFallbackToFile()' now only match 'HEAD' and 'GET' requests\" (#495)"},{"Id":"1376539134","IsPullRequest":false,"CreatedAt":"2022-09-16T22:09:33","Actor":"brunolins16","Number":"494","RawContent":null,"Title":"[Breaking change]:  Using the System.Text.Json source generator with ASP. NET Core throws NotSupportedException in RC1 *only*","State":"open","Body":"### Description\r\n\r\nIn _**.NET 7 RC1**_, we started requiring that the type `object` to be explicitly specified with a `[JsonSerializable]` attribute applied to your Json Serializer context class in Minimal APIs applications using `System.Text.Json` source generation. _**This was an unexpected behavioral change that we will be fixed in RC2**_.\r\n\r\n### Version\r\n\r\n.NET 7 RC1\r\n\r\n### Previous behavior\r\n\r\nBefore **.NET 7 RC1**, if you are using `System.Text.Json` source generation with `ASP.NET Core Minimal APIs` your endpoint's response will be serialized (`JSON` format) correctly when you have your custom types declared in the `JsonSerializerContext`.\r\n\r\nThe following code shows an example using `System.Text.Json` source generation with `ASP.NET Core Minimal APIs` :\r\n\r\n``` c#\r\nusing System.Text.Json.Serialization;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.ConfigureHttpJsonOptions(o => o.SerializerOptions.AddContext<JsonContext>());\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\"/\", () =>\r\n{\r\n    var l = new List<MyClass> { new(), new() };\r\n    return Results.Ok(l);\r\n});\r\n\r\napp.Run();\r\n\r\n[JsonSerializable(typeof(List<MyClass>))]\r\npublic partial class JsonContext : JsonSerializerContext\r\n{}\r\n\r\npublic class MyClass\r\n{\r\n    public int MyProp { get; set; }\r\n}\r\n```\r\n\r\n### New behavior\r\n\r\nIn .NET RC 1 and **RC 1 only** (**_this is being fixed in RC 2_**) the same sample application will throw a `NotSupportedException`.\r\n\r\n```\r\nNotSupportedException: Metadata for type 'System.Object' was not provided by TypeInfoResolver of type 'JsonContext'. \r\nIf using source generation, ensure that all root types passed to the serializer have been indicated with 'JsonSerializableAttribute',\r\nalong with any types that might be serialized polymorphically.\r\n\r\nSystem.Text.Json.ThrowHelper.ThrowNotSupportedException_NoMetadataForType(Type type, IJsonTypeInfoResolver resolver)\r\n```\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/43894 for more context.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis is an unexpected side effect cause by a combination of multiple changes, listed below, detected only after **.NET 7 RC1** release. \r\n\r\n**.NET Runtime**\r\n1. https://github.com/dotnet/docs/issues/30758\r\n2. https://github.com/dotnet/docs/issues/30755\r\n\r\n**ASP.NET CORE**\r\n1. https://github.com/dotnet/aspnetcore/issues/39856\r\n2. https://github.com/dotnet/aspnetcore/issues/41724#issuecomment-1142735823\r\n\r\nThe root cause was already identified, and a fix will be available in **.NET 7 RC2**.\r\n\r\n### Recommended action\r\n\r\nYou can add the `[JsonSerializable(typeof(object))]` to your [JsonSerializerContext](https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-source-generation?pivots=dotnet-7-0) or wait for RC 2 when this unexpected behavior will be fixed.\r\n\r\n``` c#\r\n[JsonSerializable(typeof(List<MyClass>))]\r\n[JsonSerializable(typeof(object))]\r\npublic partial class JsonContext : JsonSerializerContext\r\n{}\r\n```\r\n\r\n\r\n### Affected APIs\r\n\r\n- Minimal APIs\r\n- Controllers (using [Microsoft.AspNetCore.Http.HttpResults](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.httpresults?view=aspnetcore-7.0))","Url":"https://github.com/aspnet/Announcements/issues/494","RelatedDescription":"Open issue \"[Breaking change]:  Using the System.Text.Json source generator with ASP. NET Core throws NotSupportedException in RC1 *only*\" (#494)"},{"Id":"1371807646","IsPullRequest":false,"CreatedAt":"2022-09-13T17:51:25","Actor":"sebastienros","Number":"492","RawContent":null,"Title":"[Breaking change]: Output Caching renames in 7.0 RC2","State":"open","Body":"### Description\n\nFrom 7.0 RC1 to 7.0 RC2 some APIs have changed to better represent their intent.\r\n\r\nhttps://github.com/dotnet/aspnetcore/pull/43892\r\n\n\n### Version\n\n.NET 7 RC2\n\n### Previous behavior\n\n- `OutputCachePolicyBuilder.VaryByQuery()` was additive: every call would add more query string keys to vary by.\n\n### New behavior\n\n- `OutputCachePolicyBuilder.SetVaryByQuery()` is replacing existing query string keys.\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [ ] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis change was made to improve the consistency of method names and to remove ambiguity in their behavior.\n\n### Recommended action\n\nIt is recommended you recompile any projects built with an earlier SDK. If any of these method names were referenced directly, the source should be updated to reflect the new names.\n\n### Affected APIs\n\n- Removed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.OutputCachePolicyBuilder()` \r\n- Removed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.Clear()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.AllowLocking()` to `SetLocking()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByRouteValue()` to `SetVaryByRouteValue()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByQuery()` to `SetVaryByQuery()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByHeader()` to `SetVaryByHeader()` \r\n- Added: `Microsoft.AspNetCore.OutputCaching.CacheVaryByRules.VaryByHost`\r\n- Added: `Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddPolicy(string name, Action<OutputCachePolicyBuilder> build, bool excludeDefaultPolicy)`\r\n- Added: `Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddBasePolicy(Action<OutputCachePolicyBuilder> build, bool excludeDefaultPolicy)`\r\n- Added: `Microsoft.Extensions.DependencyInjection.OutputCacheConventionBuilderExtensions.CacheOutput<TBuilder>(this TBuilder builder, Action<OutputCachePolicyBuilder> policy, bool excludeDefaultPolicy)`\r\n","Url":"https://github.com/aspnet/Announcements/issues/492","RelatedDescription":"Open issue \"[Breaking change]: Output Caching renames in 7.0 RC2\" (#492)"},{"Id":"1342406148","IsPullRequest":false,"CreatedAt":"2022-08-18T00:16:25","Actor":"Tratcher","Number":"491","RawContent":null,"Title":"[Breaking change]: AuthenticateAsync for remote authentication providers no longer fails if anonymous","State":"open","Body":"### Description\n\nRE: https://github.com/dotnet/aspnetcore/issues/43042, https://github.com/dotnet/aspnetcore/pull/43212\r\n\r\nRemote authentication providers like OpenIdConnect, WsFederation, and OAuth have been updated to avoid unnecessary errors when there is no user information available on the request.\n\n### Version\n\n.NET 7 RC1\n\n### Previous behavior\n\nWhen AuthenticateAsync was called on a remote authentication provider and there was no current user, this call would fail with a message like `OpenIdConnect was not authenticated. Failure message: Not authenticated`. \n\n### New behavior\n\nAuthenticateAsync will now return `AuthenticateResult.NoResult()`, an anonymous identity. \n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\n- This was inconsistent with Cookie and Negotiate authentication which will return `AuthenticateResult.NoResult()`.\r\n- It causes excess failure logs, especially if the remote authentication handler is set as the default handler and invoked per request.\n\n### Recommended action\n\nCode that directly invokes AuthenticateAsync should be checked to ensure it properly handles `AuthenticateResult.NoResult()` and anonymous/empty ClaimsIdentity's.\n\n### Affected APIs\n\nHttpContext.[AuthenticateAsync](https://github.com/dotnet/aspnetcore/blob/a450cb69b5e4549f5515cdb057a68771f56cefd7/src/Http/Authentication.Abstractions/src/AuthenticationHttpContextExtensions.cs#L22)","Url":"https://github.com/aspnet/Announcements/issues/491","RelatedDescription":"Open issue \"[Breaking change]: AuthenticateAsync for remote authentication providers no longer fails if anonymous\" (#491)"},{"Id":"1288995849","IsPullRequest":true,"CreatedAt":"2022-08-01T20:01:05","Actor":"msftbot[bot]","Number":"489","RawContent":null,"Title":"Migrate FabricBot Tasks to Config-as-Code","State":"closed","Body":"**TL;DR;** Requesting to add [FabricBot](https://eng.ms/docs/products/1es-data-insights/merlinbot/extensions/fabricbot_overview) configuration associated with your repository to `.github/fabricbot.json`.\r\n\r\n**Context**\r\n\r\nFabricBot is now a [config-as-code-only](https://eng.ms/docs/products/1es-data-insights/merlinbot/extensions/bot-config-as-code) platform. As a result, while you can still use the [FabricBot Configuration Portal](https://portal.fabricbot.ms/bot/?repo=aspnet/Announcements) to modify your FabricBot configuration, you can no longer save the changes. The only way to save changes to your configuration at the moment is to _export configuration_ from the portal and upload the exported configuration to `.github/fabricbot.json` in your repository. In this pull request, we are adding your FabricBot configuration to your repository at `.github/fabricbot.json` so that you can make changes to it going forward.\r\n\r\nWhile the [FabricBot Configuration Portal](https://portal.fabricbot.ms/bot/?repo=aspnet/Announcements) is the *only way* to modify your FabricBot configuration at the moment, we have a feature on our backlog to publish the JSON schema defining the structure of the FabricBot configuration file. With the JSON schema, you can (1) use a plaintext editor of your choice to modify the FabricBot configuration file and use the schema to validate the file after editing or (2) [configure](https://code.visualstudio.com/Docs/languages/json#_json-schemas-and-settings) VS Code to use the schema when editing FabricBot configuration file to take advantage of convenience features such as automatic code completion and field description on mouseover.\r\n\r\n[*Pull Request Create*](https://eng.ms/docs/products/1es-data-insights/merlinbot/extensions/prcreate), a [MerlinBot](https://https://eng.ms/docs/products/1es-data-insights/merlinbot) Extension, was used to automatically create this pull request. If you have any questions or concerns with this pull request, please contact [MerlinBot Expert DRI](mailto:merlinbotdri@microsoft.com).\r\n","Url":"https://github.com/aspnet/Announcements/pull/489","RelatedDescription":"Closed or merged PR \"Migrate FabricBot Tasks to Config-as-Code\" (#489)"},{"Id":"1311264480","IsPullRequest":false,"CreatedAt":"2022-07-20T14:46:50","Actor":"captainsafia","Number":"490","RawContent":null,"Title":"[Breaking change]: Changes in default authentication scheme handling for ASP.NET Core","State":"open","Body":"### Description\r\n\r\n\r\nStarting in .NET 7 Preview 7, we introduced new behavior in the authentication area in ASP.NET Core.\r\n\r\nPreviously, users were always required to set the default authentication scheme that would be used by authentication and authorization handlers, like so:\r\n```\r\nbuilder.Services.AddAuthentication(\"MyDefaultScheme\");\r\n```\r\nMoving forward, when (and only when) a single authentication scheme is registered, that scheme will be treated as the default scheme. For example, \"foobar\" will be treated as the default scheme in the code below.\r\n```\r\nbuilder.Services.AddAuthentication().AddOAuth(\"foobar\");\r\n```\r\nThis change might expose unintended behavior changes in applications, such as authentication options being validated earlier than expected.\r\n\r\n### Version\r\n\r\n.NET 7 Preview 7\r\n\r\n### Previous behavior\r\n\r\nPreviously, when users did not provide a default scheme in the `AddAuthentication` call, no default scheme was set.\r\n\r\n```csharp\r\nbuilder.Services.AddAuthentication().AddCookie();\r\n```\r\n\r\nThis impacted the behavior of authentication handlers in the application layer.\r\n\r\n### New behavior\r\n\r\nMoving forward, if (and only if) a _single_ scheme is registered in an application, that scheme will be treated as the default. In the code below, the `CookieDefaults.AuthenticationScheme` will be treated as the default scheme.\r\n\r\n```csharp\r\nbuilder.Services.AddAuthentication().AddCookie();\r\n```\r\n\r\nHowever, in the code snippet below, no default will be set because multiple schemes are registered.\r\n\r\n```csharp\r\nbuilder.Services.AddAuthentication().AddCookie().AddJwtBearer();\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nTo reduce boilerplate when configuring authentication and set up sensible defaults.\r\n\r\n### Recommended action\r\n\r\nThe change only impacts applications with a single scheme registered. For those scenarios, it's recommended to ensure that your application is prepared to handle the assumption that a single scheme is the default. For example, the options associated with that scheme should be configured correctly.\r\n\r\nAlternatively, this behavior can be disabled by setting the `Microsoft.AspNetCore.Authentication.SuppressAutoDefaultScheme` app context flag.\r\n\r\n### Affected APIs\r\n\r\nAuthentication APIs.","Url":"https://github.com/aspnet/Announcements/issues/490","RelatedDescription":"Open issue \"[Breaking change]: Changes in default authentication scheme handling for ASP.NET Core\" (#490)"},{"Id":"1287742787","IsPullRequest":false,"CreatedAt":"2022-06-28T18:44:22","Actor":"DamianEdwards","Number":"488","RawContent":null,"Title":"[Breaking change]: Static files, default document, and directory browsing middleware no longer no-op when an endpoint with a null RequestDelegate is active","State":"open","Body":"### Description\n\nAs detailed in dotnet/aspnetcore#42413, the file-serving middleware (`DefaultFilesMiddleware`, `DirectoryBrowserMiddleware`, and `StaticFileMiddleware`) have been updated to no longer no-op (i.e. defer to the next middleware in the pipeline) in the case that there is an active endpoint with a `null` request delegate.\r\n\r\nPR that makes the change: dotnet/aspnetcore#42458\n\n### Version\n\n.NET 7 Preview 7\n\n### Previous behavior\n\nPreviously, if the current request had an active endpoint, i.e. `HttpContext.GetEndpoint() != null`, the file-serving middleware would perform no action and simply delegate to the next middleware in the request pipeline.\n\n### New behavior\n\nThe file-serving middleware will now only perform no action if there is an active endpoint and its `RequestDelegate` property value is not `null`, i.e. `HttpContext.GetEndpoint()?.RequestDelegate is not null`.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis change will enable endpoints to be active in the request for the purposes of setting and sharing metadata with middleware that are endpoint-aware so that they can perform their intended function, while allowing other middleware (like the file-serving middleware) that would usually defer their behavior when an endpoint is active to also function.\r\n\r\nFor example, an endpoint with a `null` request delegate containing authorization metadata can be set as the active endpoint for a request, causing the `AuthorizationMiddleware` to enforce authorization requirements, which if satisfied would allow the `StaticFileMiddleware` to serve the requested files.\n\n### Recommended action\n\nIf you are relying on setting an active endpoint on the request to suppress the behavior of the file-serving middleware, ensure that the endpoint has a non-null value set for its `RequestDelegate` property.\n\n### Affected APIs\n\n- `IApplicationBuilder.UseStaticFiles()`\r\n- `IApplicationBuilder.UseDefaultFiles()`\r\n- `IApplicationBuilder.UseDirectoryBrowser()`","Url":"https://github.com/aspnet/Announcements/issues/488","RelatedDescription":"Open issue \"[Breaking change]: Static files, default document, and directory browsing middleware no longer no-op when an endpoint with a null RequestDelegate is active\" (#488)"},{"Id":"1278667050","IsPullRequest":false,"CreatedAt":"2022-06-21T16:03:03","Actor":"BrennanConroy","Number":"487","RawContent":null,"Title":"[Breaking change]: Unit testing SignalR Hubs may need updating","State":"open","Body":"### Description\n\n`IHubClients` and `IHubCallerClients` now hide interface members `IClientProxy Client(string connectionId);` and `IClientProxy Caller { get; }` with `ISingleClientProxy Client(string connectionId);` and `ISingleClientProxy Caller { get; }` in order to add support for [client results](https://docs.microsoft.com/aspnet/core/signalr/hubs?view=aspnetcore-7.0#client-results).\r\n\r\nThis is not a breaking change to production code, unless you use reflection to call the above `Client` or `Caller` methods.\n\n### Version\n\n.NET 7\n\n### Previous behavior\n\nWhen using a testing library like Moq to unit test a SignalR Hub, you may write some code like follows:\r\n```csharp\r\nvar hub = new MyHub();\r\nvar mockCaller = new Mock<IHubCallerClients>();\r\nvar mockClientProxy = new Mock<IClientProxy>();\r\nmockCaller.Setup(x => x.Caller).Returns(mockClientProxy.Object);\r\nhub.Clients = mockCaller.Object;\r\n\r\nclass MyHub : Hub { }\r\n```\n\n### New behavior\n\n```csharp\r\nvar hub = new MyHub();\r\nvar mockCaller = new Mock<IHubCallerClients>();\r\nvar mockClientProxy = new Mock<ISingleClientProxy>(); // <-- updated code\r\nmockCaller.Setup(x => x.Caller).Returns(mockClientProxy.Object);\r\nhub.Clients = mockCaller.Object;\r\n\r\nclass MyHub : Hub { }\r\n```\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [ ] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThe change was made to add new functionality to SignalR and is non-breaking in normal use cases. The main area we see the change breaking is in test code which is easily updated.\n\n### Recommended action\n\nUpdate test code to use the `ISingleClientProxy` interface when using reflection/reflection-based test code.\n\n### Affected APIs\n\n[`IHubClients`](https://docs.microsoft.com/dotnet/api/microsoft.aspnetcore.signalr.ihubclients?view=aspnetcore-6.0) and [`IHubCallerClients`](https://docs.microsoft.com/dotnet/api/microsoft.aspnetcore.signalr.ihubcallerclients?view=aspnetcore-6.0)","Url":"https://github.com/aspnet/Announcements/issues/487","RelatedDescription":"Open issue \"[Breaking change]: Unit testing SignalR Hubs may need updating\" (#487)"},{"Id":"1263972971","IsPullRequest":false,"CreatedAt":"2022-06-07T22:53:47","Actor":"Daniel-Genkin-MS-2","Number":"486","RawContent":null,"Title":"[Breaking change]: Removed default HTTPS binding on Kestrel","State":"open","Body":"### Description\n\nThe default HTTPS address and port have been removed from Kestrel in .NET 7 preview 6. This is step one in https://github.com/dotnet/aspnetcore/issues/42016 which will improve overall developer experience when dealing with HTTPS.\r\n\r\nPR that makes the change: https://github.com/dotnet/aspnetcore/pull/42021\r\n\r\n## Version\r\n.NET 7 preview 6\r\n\n\n### Version\n\nOther (please put exact version in description textbox)\n\n### Previous behavior\n\nPreviously, if no values for the address and port were specified explicitly but a local development certificate was available, Kestrel would default to binding to both http://localhost:5000 and https://localhost:5001.\n\n### New behavior\n\nUsers must now manually bind to HTTPS and specify the address and port explicitly, either via the `launchSettings.json` file, the `ASPNETCORE_URLS` environment variable, `--urls` command line argument, `urls` host configuration key, or via the [`UseUrls`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.hostingabstractionswebhostbuilderextensions.useurls?view=aspnetcore-6.0) extension method.\r\n\r\nHTTP binding is unchanged.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis current eager binding behavior occurs without regard to the configured environment and can lead to experience issues on developer machines when the certificate has not yet been trusted (i.e. trusted as root cert authority because it's self-signed). Clients often produce poor UX when hitting an HTTPS endpoint with an untrusted certificate, e.g. silent failure, scary error/warning screen, etc.\n\n### Recommended action\n\nIf you were not using the default https://localhost:5001 binding, no changes are required. However, if you were using this binding, please make sure to review [this guide](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel/endpoints) on how you can update your server to enable HTTPS.\n\n### Affected APIs\n\nN/A","Url":"https://github.com/aspnet/Announcements/issues/486","RelatedDescription":"Open issue \"[Breaking change]: Removed default HTTPS binding on Kestrel\" (#486)"},{"Id":"1240740970","IsPullRequest":false,"CreatedAt":"2022-05-18T23:44:43","Actor":"brunolins16","Number":"485","RawContent":null,"Title":"[Breaking change]: ActionResult<T> set StatusCode to 200","State":"open","Body":"### Description\r\n\r\nWhen returning a `T` in a MVC/API Controller Action that declares the return type as `ActionResult<T>` will now always set the `ObjectResult.StatusCode` to `200`, unless when the `T` is a `ProblemDetails`.\r\n\r\nSince before this change the `ObjectResult.StatusCode` was `null`, in some scenarios where the status code is set manually, this change could cause unexpected behaviors. Also, an Action Filter could be affected by this change if it expects the `null` instead of `200`.\r\n\r\n### Version\r\n\r\n.NET 6\r\n\r\n### Previous behavior\r\n\r\nBefore if you have a Controller's Action that returns `T` and sets the `Response.StatusCode` manually, similar to the example:\r\n\r\n``` C#\r\n\r\n// Generates a 202 Accepted response\r\npublic ActionResult<Model> Get()\r\n{\r\n    Response.StatusCode = StatusCodes.Status202Accepted;\r\n    return new Model();\r\n}\r\n```\r\nIt will generate the expected `202 Accepted` response status code.\r\n\r\n### New behavior\r\n\r\nAfter the changes the same Controller's Action that returns `T` that sets the `Response.StatusCode` manually, will always generate a `200 OK` response.\r\n\r\n``` C#\r\n\r\n// Generates a 200 OK response\r\npublic ActionResult<Model> Get()\r\n{\r\n    Response.StatusCode = StatusCodes.Status202Accepted;\r\n    return new Model();\r\n}\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis behavior is documented since ASP.NET Core 3.1 (https://docs.microsoft.com/en-us/aspnet/core/web-api/action-return-types?view=aspnetcore-3.1#actionresultt-type), however, it keeps the `StatusCode` as `null` that will eventually generate a `200 OK` response as default. Since the default internal behavior could easily change, was decided to avoid relying on the internal default implementation and setting the `StatusCode` to the expected `200 OK`.\r\n\r\n### Recommended action\r\n\r\nIf you are broken by this change, as the example mentioned before:\r\n\r\n``` C#\r\npublic ActionResult<Model> Get()\r\n{\r\n    Response.StatusCode = StatusCodes.Status202Accepted;\r\n    return new Model();\r\n}\r\n```\r\n\r\nYou will need to change your Controller Action. These are some possible options that will keep the desired behavior:\r\n\r\n``` c#\r\npublic ActionResult<Model> Get()\r\n{\r\n   return Accepted(new Model());\r\n}\r\n\r\n//or\r\n\r\npublic ActionResult<Model> Get()\r\n{\r\n   return StatusCode(StatusCodes.Status202Accepted, new Model());\r\n}\r\n\r\n//or\r\n\r\npublic Model Get()\r\n{\r\n   Response.StatusCode = StatusCodes.Status202Accepted;\r\n   return new Model();\r\n}\r\n```\r\n\r\n### Affected APIs\r\n\r\nMVC/API Controller actions.","Url":"https://github.com/aspnet/Announcements/issues/485","RelatedDescription":"Open issue \"[Breaking change]: ActionResult<T> set StatusCode to 200\" (#485)"},{"Id":"1149914360","IsPullRequest":false,"CreatedAt":"2022-04-20T20:33:05","Actor":"pranavkm","Number":"482","RawContent":null,"Title":"[Breaking change]: Blazor components are type activated by default","State":"closed","Body":"### Description\n\nStarting in .NET 7, Blazor components use [`ActivatorUtilities`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.activatorutilities) to instantiate components. This allows components to resolve parameters from a DI container using constructor injection. Constructor injection is supported in addition to property injection that is already supported via the `InjectAttribute`.\r\n\r\nFor most existing applications, this change is not discernable. However, this may be a breaking change for libraries or applications that provided non-empty constructors for components where parameters are not meant to be resolved from the DI container.\r\n\r\nFor questions or further discussion, please use https://github.com/dotnet/aspnetcore/issues/40405\n\n### Version\n\n.NET 7\n\n### Previous behavior\n\nIn the ordinary case, components do not specify a constructor or have a parameter-less constructor and this is a non-breaking change. However, consider the following case:\r\n\r\n```C#\r\npublic class MyMultipleConstructorComponent : ComponentBase\r\n{\r\n   public MyMultipleConstructorComponent () { }\r\n\r\n   public MyMultipleConstructorComponent (int someValue) {}\r\n}\r\n```\r\n\r\nIn .NET 6 and earlier, the parameter-less constructor would be used to instantiate the component.\n\n### New behavior\n\nIn .NET 7, parameters in a component are resolved from the DI container. Consider this component:\r\n\r\n```C#\r\npublic class MyComponent : ComponentBase\r\n{\r\n   public MyComponent(IMyService myService) { ... }\r\n}\r\n```\r\n\r\nStarting in .NET 7, `IMyService` is resolved from the container while instantiating the component. Using `[InjectAttribute]` to property inject services remains unchanged.\r\n\r\nGoing back to `MyMultipleConstructorComponent` from the earlier section - in .NET 7, `ActivatorUtilities` defaults to using the constructor with the most parameters to instantiate an object. In this case, the constructor with the single `int` parameter will be attempted to be resolved from the DI container and a runtime exception will be thrown if parameters are not resolvable.   \n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n\n### Reason for change\n\nConstructor injection was a popular request from Blazor users.\n\n### Recommended action\n\nIf this change severely impacts your ability to migrate your apps to .NET 7, please let us know in the associated discussion thread and we would be happy to reconsider this change. Optionally, there are changes to your application that you may consider to work around this change if it impacts your application:\r\n\r\n* [`ActivatorUtilitiesConstructorAttribute`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.activatorutilitiesconstructorattribute) can be applied to constructor to specify an exact constructor to use.\r\n* Application developers may register an implementation of `IComponentActivator` in the DI container that reverts to the .NET 6 behavior.\r\n\r\n\n\n### Affected APIs\n\nComponent constructors","Url":"https://github.com/aspnet/Announcements/issues/482","RelatedDescription":"Closed issue \"[Breaking change]: Blazor components are type activated by default\" (#482)"},{"Id":"1190169916","IsPullRequest":false,"CreatedAt":"2022-04-01T19:03:58","Actor":"brunolins16","Number":"484","RawContent":null,"Title":"[Breaking change]: Updated empty body detection in MVC Model Binding","State":"open","Body":"### Description\r\n\r\nThe mechanism to detect an empty request `body` during the MVC Model Binding now uses the [`IHttpRequestBodyDetectionFeature.CanHaveBody`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.features.ihttprequestbodydetectionfeature.canhavebody?view=aspnetcore-6.0#microsoft-aspnetcore-http-features-ihttprequestbodydetectionfeature-canhavebody), that is currently implemented by the following behavior:\r\n\r\n- `true` when:\r\n  - It's an `HTTP/1.x` request with a non-zero `Content-Length` or a `Transfer-Encoding: chunked` header.\r\n  - It's an `HTTP/2` request that did not set the `END_STREAM` flag on the initial headers frame.\r\n\r\n- `false` when:\r\n  - It's an `HTTP/1.x` request with no `Content-Length` or `Transfer-Encoding: chunked` header, or the `Content-Length` is `0`.\r\n  - It's an `HTTP/1.x` request with `Connection: Upgrade` (e.g. WebSockets). There is no HTTP request body for these requests and no data should be received until after the upgrade.\r\n  - It's an `HTTP/2` request that set `END_STREAM` on the initial headers frame.\r\n\r\nSince the previous behavior was a simple validation of the `Content-Length == 0`, in some scenarios when requests are not sending all needed HTTP information, could now be detected as empty request and report a failure to the client.\r\n\r\n\r\n### Version\r\n\r\n7.0.0-preview3\r\n\r\n### Previous behavior\r\n\r\n Before if you have a Controller's action that bind a parameter from body:\r\n\r\n``` csharp\r\n [HttpPost()]\r\n        public IActionResult Required([FromBody] TestClass value) => Ok(value);\r\n```\r\n\r\nAnd the client request does not include a `Content-Length` header, eg.:\r\n\r\n``` curl\r\ncurl --request POST -k -i \"[action]\" -H \"Content-Type: application/json\"\r\n```\r\n\r\nThis request will cause an internal exception during the body deserialization:\r\n\r\nEg.: When using the `System.Text.Json` input formatter\r\n``` log\r\nSystem.Text.Json.JsonException: 'The input does not contain any JSON tokens. \r\nExpected the input to start with a valid JSON token, when isFinalBlock is true. \r\nPath: $ | LineNumber: 0 | BytePositionInLine: 0.'\r\n```\r\n\r\nAlso, a response payload similar to this will be receive by the client:\r\n\r\n``` json\r\n{\r\n  \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\r\n  \"title\": \"One or more validation errors occurred.\",\r\n  \"status\": 400,\r\n  \"traceId\": \"00-34e98b5841b88bfb5476965efd9d9c8c-5bb16bc50dfbabb7-00\",\r\n  \"errors\": {\r\n    \"$\": [\r\n+      \"The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true. Path: $ | LineNumber: 0 | BytePositionInLine: 0.\"\r\n    ],\r\n    \"value\": [\r\n      \"The value field is required.\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### New behavior\r\n\r\nWith the updated detection mechanism, the deserialization will not be trigger since an empty request body will be detected and only a `validation` message will be reported back to the client. Eg.:\r\n\r\n``` json\r\n{\r\n  \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\r\n  \"title\": \"One or more validation errors occurred.\",\r\n  \"status\": 400,\r\n  \"traceId\": \"00-0f87920dc675fdfdf8d7638d3be66577-bd6bdbf32d21b714-00\",\r\n  \"errors\": {\r\n    \"\": [\r\n+      \"A non-empty request body is required.\"\r\n    ],\r\n    \"value\": [\r\n      \"The value field is required.\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis change is an alignment with other parts of the framework that were already using the [`IHttpRequestBodyDetectionFeature.CanHaveBody`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.features.ihttprequestbodydetectionfeature.canhavebody?view=aspnetcore-6.0#microsoft-aspnetcore-http-features-ihttprequestbodydetectionfeature-canhavebody) and also a fix to a reported issue dotnet/aspnetcore/issues/29570\r\n\r\n### Recommended action\r\n\r\nNo change is required, however, if you getting an unexpected behavior is recommended to review if your client's requests are sending the appropriated headers/information.\r\n\r\n### Affected APIs\r\n\r\nMVC Action Controllers","Url":"https://github.com/aspnet/Announcements/issues/484","RelatedDescription":"Open issue \"[Breaking change]: Updated empty body detection in MVC Model Binding\" (#484)"},{"Id":"1154726545","IsPullRequest":false,"CreatedAt":"2022-03-01T01:08:45","Actor":"pranavkm","Number":"483","RawContent":null,"Title":"[Breaking change]: Event IDs for some Microsoft.AspNetCore.Mvc.Core log messages changed","State":"open","Body":"### Description\n\nAs part of updating the Microsoft.AspNetcore.Mvc.Core assembly to use `LoggerMessageAttribute`, we discovered logger event Ids being reused within a single log category. Log IDs and names should be unique so different message types can be identified. Consequently, these have been updated to ensure that the event Ids are unique for a logger category. \n\n### Version\n\n.NET 7\n\n### Previous behavior\n\nSome logger event IDs in Microsoft.AspNetCore.Mvc.Core were re-used within a single category.\n\n### New behavior\n\nDuplicated event ids within a single category within the Microsoft.AspNetCore.Mvc.Core assembly were updated.\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n\n### Reason for change\n\nLog IDs and names should be unique so different message types can be identified.\n\n### Recommended action\n\nIf you have code or configuration that references the old IDs, update those references to use the new IDs.\n\n### Affected APIs\n\nNot detectable via API analysis","Url":"https://github.com/aspnet/Announcements/issues/483","RelatedDescription":"Open issue \"[Breaking change]: Event IDs for some Microsoft.AspNetCore.Mvc.Core log messages changed\" (#483)"},{"Id":"1140446824","IsPullRequest":false,"CreatedAt":"2022-02-16T19:09:40","Actor":"wtgodbe","Number":"481","RawContent":null,"Title":"Microsoft.Data.SqlClient updated to 4.0.1","State":"open","Body":"### Description\r\n\r\nWe have updated the `Microsoft.Data.SqlClient` package to 4.0.1.\r\n\r\n### Version\r\n\r\n7.0-preview2\r\n\r\n### Previous behavior\r\n\r\nThe old version was `1.0.19249.1`\r\n\r\n### New behavior\r\n\r\nWe now use `4.0.1`. You can see breaking changes in the 4.0 band here: https://github.com/dotnet/SqlClient/blob/main/release-notes/4.0/4.0.0.md#breaking-changes. Note that `Encrypt` now equals `true` by default: https://github.com/dotnet/SqlClient/blob/main/release-notes/4.0/4.0.0.md#encrypt-default-value-set-to-true\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nUpdating to most recent versions for improvements in the underlying libraries.\r\n\r\n### Recommended action\r\n\r\nWe didn't have to react to any no public API changes from this change, but its possible there are breaking changes in the packages themselves.\r\n\r\n### Affected APIs\r\n\r\nMicrosoft.Extensions.Caching.SqlServer","Url":"https://github.com/aspnet/Announcements/issues/481","RelatedDescription":"Open issue \"Microsoft.Data.SqlClient updated to 4.0.1\" (#481)"},{"Id":"1127552680","IsPullRequest":false,"CreatedAt":"2022-02-08T17:31:43","Actor":"brunolins16","Number":"480","RawContent":null,"Title":"[Breaking change]: API Controllers Actions try to infer parameters from DI","State":"open","Body":"### Description\r\n\r\nThe mechanism to infer binding source of **API Controller action's parameters** now mark parameters to be bound from the Dependency Injection container when the type is registered in the container.\r\n\r\nIn rare cases this can break applications that have a type in DI that is also accepted in API Controller actions methods.\r\n\r\n### Version\r\n\r\n7.0.0-preview2\r\n\r\n### Previous behavior\r\n\r\nBefore if you want to bind a type registered in your Dependency Injection container, it **must** be explicitly decorated using an attribute that implements `IFromServiceMetadata` (eg.: `FromServicesAttribute`)\r\n\r\n``` csharp\r\nServices.AddScoped<SomeCustomType>();\r\n\r\n[Route(\"[controller]\")]\r\n[ApiController]\r\npublic class MyController : ControllerBase\r\n{\r\n    public ActionResult Get([FromServices]SomeCustomType service) => Ok();\r\n}\r\n```\r\n\r\nIf the attribute is not specified, the parameter is resolved from the request Body sent by the client.\r\n\r\n``` csharp\r\nServices.AddScoped<SomeCustomType>();\r\n\r\n[Route(\"[controller]\")]\r\n[ApiController]\r\npublic class MyController : ControllerBase\r\n{\r\n    // Bind from the request body\r\n    [HttpPost]\r\n    public ActionResult Post(SomeCustomType service) => Ok();\r\n}\r\n```\r\n\r\n### New behavior\r\n\r\nNow types in DI will be checked at app startup using `IServiceProviderIsService` to determine if an argument in an API controller action will come from DI or from the other sources. \r\n\r\nIn the below example `SomeCustomType` (assuming you're using the default DI container) will come from the DI container. \r\n\r\n``` csharp\r\nServices.AddScoped<SomeCustomType>();\r\n\r\n[Route(\"[controller]\")]\r\n[ApiController]\r\npublic class MyController : ControllerBase\r\n{\r\n    // Binding from the services\r\n    [HttpPost]\r\n    public ActionResult Post(SomeCustomType service) => Ok();\r\n}\r\n```\r\n\r\nThe new mechanism to infer binding source of **API Controller action's parameters** will follow the rule bellow:\r\n\r\n1. A previously specified `BindingInfo.BindingSource` is never overwritten.\r\n2. A complex type parameter, registered in the DI container, is assigned `BindingSource.Services`.\r\n3. A complex type parameter, not registered in the DI container, is assigned `BindingSource.Body`.\r\n4. Parameter with a name that appears as a route value in ANY route template is assigned `BindingSource.Path`.\r\n5. All other parameters are `BindingSource.Query`.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nWe believe the likelihood of breaking apps to be very low as it's not a common scenario to have a type in DI and as an argument in your API controller action at the same time. Also, this same behavior is currently supported by Minimal Actions.\r\n\r\n### Recommended action\r\n\r\nIf you are broken by this change you can disable the feature by setting `DisableImplicitFromServicesParameters` to true.\r\n\r\n```csharp\r\nservices.Configure<ApiBehaviorOptions>(options =>\r\n{\r\n     options.DisableImplicitFromServicesParameters = true;\r\n});\r\n```\r\nAlso, you could continue to have your action's parameters, with the new feature enabled or not, binding from your DI container using an attribute that implements `IFromServiceMetadata` (eg.: `FromServicesAttribute`).\r\n\r\n``` csharp\r\nServices.AddScoped<SomeCustomType>();\r\n\r\n[Route(\"[controller]\")]\r\n[ApiController]\r\npublic class MyController : ControllerBase\r\n{\r\n    // Binding from the DI container\r\n    [HttpPost]\r\n    public ActionResult Post([FromServices]SomeCustomType service) => Ok();\r\n}\r\n```\r\n\r\n### Affected APIs\r\n\r\nAPI Controller actions.","Url":"https://github.com/aspnet/Announcements/issues/480","RelatedDescription":"Open issue \"[Breaking change]: API Controllers Actions try to infer parameters from DI\" (#480)"},{"Id":"1115597949","IsPullRequest":false,"CreatedAt":"2022-01-26T23:19:59","Actor":"BrennanConroy","Number":"479","RawContent":null,"Title":"[Breaking change]: SignalR Hub methods try to resolve parameters from DI","State":"open","Body":"### Description\r\n\r\nHub methods now support injecting services from your Dependency Injection container.\r\nIn rare cases this can break applications that have a type in DI that is also accepted in Hub methods from SignalR client messages.\r\n\r\n### Version\r\n\r\n7.0.0-preview2\r\n\r\n### Previous behavior\r\n\r\nBefore if you accepted a type in your Hub method that was also in your Dependency Injection container the type would always be resolved from a message sent by the client.\r\n```csharp\r\nServices.AddScoped<SomeCustomType>();\r\n\r\nclass MyHub : Hub\r\n{\r\n    // type always comes from the client, never comes from DI\r\n    public Task Method(string text, SomeCustomType type) => Task.CompletedTask;\r\n}\r\n```\r\n\r\n### New behavior\r\n\r\nNow types in DI will be checked at app startup using `IServiceProviderIsService` to determine if an argument in a Hub method will come from DI or from the client.\r\n\r\nIn the below example `SomeCustomType` (assuming you're using the default DI container) will come from the DI container instead of from the client. And if the client tried to send `SomeCustomType` it will get an error.\r\n```csharp\r\nServices.AddScoped<SomeCustomType>();\r\n\r\nclass MyHub : Hub\r\n{\r\n    // comes from DI by default\r\n    public Task Method(string text, SomeCustomType type) => Task.CompletedTask;\r\n}\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nWe believe the likelihood of breaking apps to be very low as it's not a common scenario to have a type in DI and as an argument in your Hub method at the same time.\r\n\r\n### Recommended action\r\n\r\nIf you are broken by this change you can disable the feature by setting `DisableImplicitFromServicesParameters` to true.\r\n```csharp\r\nservices.AddSignalR(options =>\r\n{\r\n    options.DisableImplicitFromServicesParameters = true;\r\n});\r\n```\r\n\r\nIf you are broken by the change but want to use the feature without breaking clients, you can disable the feature as shown above, and use an attribute that implements `IFromServiceMetadata` on new arguments/Hub methods.\r\n```csharp\r\nServices.AddScoped<SomeCustomType>();\r\nServices.AddScoped<SomeCustomType2>();\r\n\r\nclass MyHub : Hub\r\n{\r\n    // old method with new feature (non-breaking), only SomeCustomType2 will be resolved from DI\r\n    public Task MethodA(string arguments, SomeCustomType type, [FromServices] SomeCustomType2 type2);\r\n\r\n    // new method\r\n    public Task MethodB(string arguments, [FromServices] SomeCustomType type);\r\n}\r\n```\r\n\r\n### Affected APIs\r\n\r\nHub methods","Url":"https://github.com/aspnet/Announcements/issues/479","RelatedDescription":"Open issue \"[Breaking change]: SignalR Hub methods try to resolve parameters from DI\" (#479)"},{"Id":"1107147192","IsPullRequest":false,"CreatedAt":"2022-01-18T17:00:32","Actor":"italukder","Number":"478","RawContent":null,"Title":"M2A ","State":"closed","Body":"!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/AspNetCore/issues and create a new issue.\r\n","Url":"https://github.com/aspnet/Announcements/issues/478","RelatedDescription":"Closed issue \"M2A \" (#478)"},{"Id":"1083913001","IsPullRequest":false,"CreatedAt":"2021-12-18T18:35:01","Actor":"yecril71pl","Number":"477","RawContent":null,"Title":"[Breaking change]: CommandLineUtils retired","State":"open","Body":"### Description\n\nThe package [CommandLineUtils](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.commandlineutils) was removed from ASP.NET 2.0.\r\n\r\nThe discussion issue was https://github.com/dotnet/extensions/issues/257.\r\n\r\nThis change was overlooked because we failed to follow breaking changes in extensions.  It is important to document it here because it is not mentioned at [1.x to 2.0](https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x) either.\n\n### Version\n\nOther (please put exact version in description textbox)\n\n### Previous behavior\n\n```C#\r\nusing Microsoft.Extensions.CommandLineUtils;\r\n```\n\n### New behavior\n\n```C#\r\nusing McMaster.Extensions.CommandLineUtils;\r\n```\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n\n### Reason for change\n\nThe library has outgrown the scope of the ASP.NET project where it had been developed.\n\n### Recommended action\n\nMigration steps include the following alternatives:\r\n* adapt your code to use system [Command-line configuration provider](https://docs.microsoft.com/en-us/dotnet/core/extensions/configuration-providers#command-line-configuration-provider)\r\n* adapt your code to use community [CommandLine](https://github.com/dotnet/command-line-api)\r\n* keep your code and switch to use 3rd-party [CommandLineUtils](https://natemcmaster.github.io/CommandLineUtils/) fork\r\n\n\n### Affected APIs\n\nThe whole package [CommandLineUtils](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.commandlineutils) is unsupported.","Url":"https://github.com/aspnet/Announcements/issues/477","RelatedDescription":"Open issue \"[Breaking change]: CommandLineUtils retired\" (#477)"},{"Id":"1042509650","IsPullRequest":false,"CreatedAt":"2021-11-02T15:29:52","Actor":"Tratcher","Number":"476","RawContent":null,"Title":"[Breaking change]: Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv and Libuv.dll removed","State":"open","Body":"### Description\n\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv and Libuv.dll have been removed from ASP.NET Core 7.0.0-preview1. See https://github.com/dotnet/aspnetcore/issues/38022 for discussion.\n\n### Version\n\nOther (please put exact version in description textbox)\n\n### Previous behavior\n\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv was [obsoleted](#424) in 5.0 since its functionality was replaced by the Sockets transport.\n\n### New behavior\n\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv and its libuv.dll dependency have been removed from ASP.NET Core.\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n\n### Reason for change\n\nTo eliminate ongoing maintenance costs associated with this obsolete component.\n\n### Recommended action\n\nRemove project references to Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv. Remove code from Program.cs that calls `UseLibuv`, the Sockets transport will be used by default.\n\n### Affected APIs\n\n[UseLibuv](https://docs.microsoft.com/dotnet/api/microsoft.aspnetcore.hosting.webhostbuilderlibuvextensions.uselibuv)\r\n[LibuvTransportOptions](https://docs.microsoft.com/dotnet/api/microsoft.aspnetcore.server.kestrel.transport.libuv.libuvtransportoptions)","Url":"https://github.com/aspnet/Announcements/issues/476","RelatedDescription":"Open issue \"[Breaking change]: Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv and Libuv.dll removed\" (#476)"},{"Id":"1029808382","IsPullRequest":false,"CreatedAt":"2021-10-19T03:09:22","Actor":"halter73","Number":"475","RawContent":null,"Title":"[Breaking change]: Minimal API renames in RC2","State":"open","Body":"### Description\r\n\r\nIn RC2, the following APIs were renamed or merged.\r\n\r\n- The `Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder` class was renamed to `Microsoft.AspNetCore.Builder.RouteHandlerBuilder`.\r\n- The `Microsoft.AspNetCore.Http.OpenApiDelegateEndpointConventionBuilderExtensions` class was renamed to `Microsoft.AspNetCore.Http.OpenApiRouteHandlerBuilderExtensions`.\r\n- The `Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions` class was removed and all of its methods were merged into the existing `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions` class.\r\n\r\nThese changes were made in https://github.com/dotnet/aspnetcore/pull/36578.\r\n\r\n### Version\r\n\r\n.NET 6 RC2\r\n\r\n### Previous behavior\r\n\r\nThere is no behavioral change. These are just renames.\r\n\r\n### New behavior\r\n\r\nThere is no behavioral change. These are just renames.\r\n\r\n### Type of breaking change\r\n\r\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis change was made to improve the consistency of type names replacing `DelegateEndpoint` with `RouteHandler` now that there is a new `RouteHandlerOptions` class.\r\n\r\n### Recommended action\r\n\r\nIt is recommended you recompile any projects built with an earlier SDK. For most projects, this should be all that is necessary.\r\n\r\nIf any of these type names were referenced directly by name, the source should be updated to reflect the new names.\r\n\r\n### Affected APIs\r\n\r\n- `Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder`\r\n- `Microsoft.AspNetCore.Http.OpenApiDelegateEndpointConventionBuilderExtensions`\r\n- `Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions`\r\n\r\nDiscussion issue: https://github.com/dotnet/aspnetcore/issues/37671","Url":"https://github.com/aspnet/Announcements/issues/475","RelatedDescription":"Open issue \"[Breaking change]: Minimal API renames in RC2\" (#475)"},{"Id":"1029797310","IsPullRequest":false,"CreatedAt":"2021-10-19T02:51:23","Actor":"halter73","Number":"474","RawContent":null,"Title":"[Breaking change]: Minimal API renames in RC1","State":"open","Body":"### Description\r\n\r\nIn RC1, the following APIs were renamed.\r\n\r\n- The `Microsoft.AspNetCore.Builder.MinimalActionEndpointConventionBuilder` class was renamed to `Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder`.\r\n  - **Note:** This was renamed again in RC2 to `Microsoft.AspNetCore.Builder.RouteHandlerBuilder`. See https://github.com/aspnet/Announcements/issues/475.\r\n- The `Microsoft.AspNetCore.Builder.MinimalActionEndpointRouteBuilderExtensions` class was renamed to `Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions`.\r\n  - **Note:** This was merged with `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions` in RC2. See https://github.com/aspnet/Announcements/issues/475.\r\n- The `Delegate` parameter to `Map`, `MapGet`, `MapPost`, `MapPut`, `MapDelete`, `MapMethod`, `MapFallback` and `RequestDelegateFactory.Create` was renamed from `action` to `handler`.\r\n\r\nThese changes were made in https://github.com/dotnet/aspnetcore/pull/35570.\r\n\r\n### Version\r\n\r\n.NET 6 RC1\r\n\r\n### Previous behavior\r\n\r\nThere is no behavioral change. These are just renames.\r\n\r\n### New behavior\r\n\r\nThere is no behavioral change. These are just renames.\r\n\r\n### Type of breaking change\r\n\r\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis change was made to improve the consistency of type names and remove \"minimal\" and \"action\" from the APIs.\r\n\r\n### Recommended action\r\n\r\nIt is recommended you recompile any projects built with an earlier SDK. For most projects, this should be all that is necessary.\r\n\r\nIf any of these type names or parameter names were referenced directly by name, the source should be updated to reflect the new names.\r\n\r\n### Affected APIs\r\n\r\n- `Microsoft.AspNetCore.Builder.MinimalActionEndpointConventionBuilder`\r\n- `Microsoft.AspNetCore.Builder.MinimalActionEndpointRouteBuilderExtensions`\r\n\t- This includes all the methods on this class having their `Delegate` parameter renamed from `action` to `handler`.\r\n- `Microsoft.AspNetCore.Http.RequestDelegateFactory.Create(Delegate action, RequestDelegateFactoryOptions? options = null)`\r\n\r\nDiscussion issue: https://github.com/dotnet/aspnetcore/issues/37671","Url":"https://github.com/aspnet/Announcements/issues/474","RelatedDescription":"Open issue \"[Breaking change]: Minimal API renames in RC1\" (#474)"},{"Id":"1029683595","IsPullRequest":false,"CreatedAt":"2021-10-18T23:08:43","Actor":"captainsafia","Number":"473","RawContent":null,"Title":"[Breaking change]: EndpointName metadata no longer automatically set for minimal endpoints","State":"open","Body":"### Description\r\n\r\nStarting in .NET 6 RC2, behavior that was introduced in .NET 6 RC1 to automatically set the `IEndpointNameMetadata` for endpoints has been reverted to avoid issues the logic generating duplicate endpoint names.\r\n\r\n### Version\r\n\r\n.NET 6 RC 2\r\n\r\n### Previous behavior\r\n\r\nIn .NET 6 RC1 and above, the `IEndpointNameMetadata` was automatically set for endpoints that referenced a method group. For example, the following code:\r\n\r\n```csharp\r\napp.MapGet(\"/foo\", GetFoo);\r\n```\r\n\r\nWould produce an endpoint for `/foo` with a `EndpointName` set to \"GetFoo\".\r\n\r\n### New behavior\r\n\r\nIn .NET 6 RC 2 and onward, the `IEndpointNameMetadata` is no longer set. For example, the following code:\r\n\r\n```csharp\r\napp.MapGet(\"/foo\", GetFoo);\r\n```\r\n\r\nwould not generated any `IEndpointNameMetadat`.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThe behavior of automatically setting endpoint name metadata was not robust and resulted in issues where the same name was set for different endpoints. See https://github.com/dotnet/aspnetcore/issues/36487 for more info.\r\n\r\n### Recommended action\r\n\r\nWe recommend that developers manually set the `IEndpointNameMetadata` using the `WithName` extension method as follows to set the metadata.\r\n\r\n```csharp\r\napp.MapGet(\"/foo\", GetFoo).WithName(\"GetFoo\");\r\n```\r\n\r\n### Feature area\r\n\r\nASP.NET Core\r\n\r\n### Affected APIs\r\n\r\n_No response_","Url":"https://github.com/aspnet/Announcements/issues/473","RelatedDescription":"Open issue \"[Breaking change]: EndpointName metadata no longer automatically set for minimal endpoints\" (#473)"},{"Id":"1002953060","IsPullRequest":false,"CreatedAt":"2021-09-21T17:48:14","Actor":"BrennanConroy","Number":"472","RawContent":null,"Title":"[Breaking change]: TryParse and BindAsync discovery on Map* parameters will throw for invalid methods","State":"open","Body":"### Description\r\n\r\nStarting in RC2, when we look for `TryParse` or `BindAsync` methods on your parameter types if we don't find a valid one we will also look for invalid ones and throw at startup to let you know that you might have written your method signature incorrectly to avoid unexpected behavior.\r\n\r\n### Version\r\n\r\n.NET 6 RC2\r\n\r\n### Previous behavior\r\n\r\n```csharp\r\n// Todo.TryParse is not in a valid format, will try to bind from body as json instead\r\napp.MapPost(\"/endpoint\", (Todo todo) => todo.Item);\r\n\r\npublic class Todo\r\n{\r\n    public string Item { get; set; }\r\n\r\n    public static bool TryParse(string value) => true;\r\n}\r\n```\r\n\r\n### New behavior\r\n\r\nWe have now changed it so that if we see a public `TryParse` or `BindAsync` that doesn't match the expected syntax we will throw on startup. The above example would throw an error similar to:\r\n```\r\nTryParse method found on Todo with incorrect format. Must be a static method with format\r\nbool TryParse(string, IFormatProvider, out Todo)\r\nbool TryParse(string, out Todo)\r\nbut found\r\nBoolean TryParse(System.String)\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [x] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis change was made so that developers would be aware when they wrote a `BindAsync` or `TryParse` method that it wasn't in a valid format. Otherwise the framework would fallback to assuming the parameter is json from the body and could result in unexpected behavior.\r\n\r\n### Recommended action\r\n\r\nIt is possible your types have a `BindAsync` or `TryParse` with different syntax for other reasons besides parameter binding and will now throw at startup. There are multiple options to avoid this behavior:\r\n* Make your `BindAsync` or `TryParse` method internal or private\r\n* Add a new `BindAsync` or `TryParse` method that is in the syntax we are looking for (we ignore invalid methods if we find a valid one)\r\n* Mark your parameter as `[FromBody]`\r\n\r\n### Affected APIs\r\n\r\nAll `IEndpointRouteBuilder.Map*(...)` methods are affected by this change, e.g. `app.MapGet(...)` and `app.MapPost(...)`.\r\nAnd `RequestDelegateFactory.Create(...)`\r\n\r\nDiscussion issue: https://github.com/dotnet/aspnetcore/issues/36810","Url":"https://github.com/aspnet/Announcements/issues/472","RelatedDescription":"Open issue \"[Breaking change]: TryParse and BindAsync discovery on Map* parameters will throw for invalid methods\" (#472)"},{"Id":"973152582","IsPullRequest":false,"CreatedAt":"2021-08-18T00:07:55","Actor":"pranavkm","Number":"471","RawContent":null,"Title":"[Breaking change]: Razor Pages logging ID change","State":"open","Body":"### Description\n\nRazor Pages log messages have associated IDs and names. These are used to uniquely identify different kinds of log messages. Some of those IDs and names were incorrectly duplicated. This is being fixed in .NET 6.\n\n### Version\n\n.NET 6 RC1\n\n### Previous behavior\n\nEvent Name: ExecutedHandlerMethod\r\nEvent Id: 102\r\n\r\nEvent Name: ExecutingImplicitHandlerMethod\r\nEvent Id: 103\r\n\r\nEvent Name: ExecutedImplicitHandlerMethod\r\nEvent Id: 104\r\n\r\nEvent Name: NotMostEffectiveFilter\r\nEvent Id: 1\r\n\n\n### New behavior\n\nEvent Name: ExecutedHandlerMethod (unchanged)\r\nEvent Id: 108\r\n\r\nEvent Name: ExecutingImplicitHandlerMethod  (unchanged)\r\nEvent Id: 107\r\n\r\nEvent Name: ExecutedImplicitHandlerMethod  (unchanged)\r\nEvent Id: 109\r\n\r\nEvent Name: NotMostEffectiveFilter  (unchanged)\r\nEvent Id: 4\r\n\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n\n### Reason for change\n\nLog IDs and names should be unique so different message types can be identified.\n\n### Recommended action\n\nIf you have code or configuration that references the old IDs and names, update those references use the new IDs and names.\n\n### Affected APIs\n\nNot detectable via API analysis","Url":"https://github.com/aspnet/Announcements/issues/471","RelatedDescription":"Open issue \"[Breaking change]: Razor Pages logging ID change\" (#471)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1623019181368315904","CreatedAt":"2023-02-07T18:01:41+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgrKZI8 Community Standup - Razor Editor Updates https://t.co/ypcFAqRfZx","Source":"<a href=\"https://periscope.tv\" rel=\"nofollow\">Periscope</a>","RetweetCount":8,"FavoriteCount":2,"RawContent":null},{"Id":"1622676463152689152","CreatedAt":"2023-02-06T19:19:51+00:00","UserScreenname":"aspnet","Text":"On this week's #ASPNET Community Standup:\n🪒Razor Editor Updates\n⭐ Allison Chou, Daniel Roth, Phil Allen\n\n🗓 Tuesday… https://t.co/Aq35ZJYFqd","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":22,"FavoriteCount":8,"RawContent":null},{"Id":"1620482926206156800","CreatedAt":"2023-01-31T18:03:31+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgrKZI8 Community Standup - Porting your https://t.co/eFOzgrKZI8 Web Forms application to .NET 7 in… https://t.co/b0tucQVDO8","Source":"<a href=\"https://periscope.tv\" rel=\"nofollow\">Periscope</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null},{"Id":"1620482540493762560","CreatedAt":"2023-01-31T18:01:59+00:00","UserScreenname":"aspnet","Text":"Starting now! Come join us!\n\nhttps://t.co/TiAECihZOt https://t.co/yh39laGGZK","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":0,"RawContent":null},{"Id":"1620196897343545345","CreatedAt":"2023-01-30T23:06:56+00:00","UserScreenname":"aspnet","Text":"On this week's #ASPNET Community Standup:\n🏗️ Porting your https://t.co/eFOzgrKZI8 Web Forms app to .NET 7 in 7 minu… https://t.co/mt2eMRzh0h","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":30,"FavoriteCount":8,"RawContent":null},{"Id":"1617991841265352705","CreatedAt":"2023-01-24T21:04:50+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgrKZI8 Community Standup - Taking a look at the TodoApi Sample App https://t.co/WCtw7YqvA7","Source":"<a href=\"https://periscope.tv\" rel=\"nofollow\">Periscope</a>","RetweetCount":16,"FavoriteCount":6,"RawContent":null},{"Id":"1617933549436538880","CreatedAt":"2023-01-24T17:13:12+00:00","UserScreenname":"aspnet","Text":"On this week's #ASPNET Community Standup:\n☑️ The TodoApi Sample App\n⭐ With David Fowler, Jon Galloway\n\n🗓 Tuesday |… https://t.co/fUN2pxC1lX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"1612937254057709569","CreatedAt":"2023-01-10T22:19:42+00:00","UserScreenname":"aspnet","Text":"What’s new in the Microsoft Fluent UI library for Blazor version 2.0\n\nhttps://t.co/vumCnSpoff","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":55,"FavoriteCount":21,"RawContent":null},{"Id":"1612871928770961409","CreatedAt":"2023-01-10T18:00:08+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgrKrSA Community Standup - Exploring new and experimental features in Blazor https://t.co/NkCugsQEeI","Source":"<a href=\"https://periscope.tv\" rel=\"nofollow\">Periscope</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1612871295594790913","CreatedAt":"2023-01-10T17:57:37+00:00","UserScreenname":"aspnet","Text":"Starting now! Come join us:\n\nhttps://t.co/YDrs9iOxzg https://t.co/5GVQGjN5C3","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"1612583294822141958","CreatedAt":"2023-01-09T22:53:12+00:00","UserScreenname":"aspnet","Text":"On this week's #Blazor Community Standup:\n🚀 Exploring new and experimental features in Blazor\n⭐ Daniel Roth, Jon Ga… https://t.co/WNwGlXFgkc","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":35,"FavoriteCount":17,"RawContent":null},{"Id":"1602724780645441537","CreatedAt":"2022-12-13T17:58:59+00:00","UserScreenname":"aspnet","Text":"Starting now! Come join us!\n\nhttps://t.co/XeTYvkQxvr https://t.co/lbv6FM5iQ7","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":11,"FavoriteCount":5,"RawContent":null},{"Id":"1602724749444288512","CreatedAt":"2022-12-13T17:58:52+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgrKZI8 Community Standup - Blazor .NET 8 Planning https://t.co/cYOy2eQBp8","Source":"<a href=\"https://periscope.tv\" rel=\"nofollow\">Periscope</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1602719785107668993","CreatedAt":"2022-12-13T17:39:08+00:00","UserScreenname":"aspnet","Text":"On today's #Blazor Community Standup:\n🔥 Blazor .NET 8 Planning\n⭐ Daniel Roth, Tanay Parikh, Mackinnon Buck, Jon Gal… https://t.co/sLRmHElAFU","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":25,"FavoriteCount":11,"RawContent":null},{"Id":"1602435642922770433","CreatedAt":"2022-12-12T22:50:03+00:00","UserScreenname":"aspnet","Text":"Migrating from https://t.co/eFOzgrKrSA to https://t.co/eFOzgrKrSA Core with Project Migrations Part 5\n\nhttps://t.co/ckudaeEMqd","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":17,"FavoriteCount":6,"RawContent":null},{"Id":"1599846830682312704","CreatedAt":"2022-12-05T19:23:02+00:00","UserScreenname":"aspnet","Text":"🔥Microsoft Fluent UI library for Blazor version 2.0 is out!\n\n➡️Re-implemented the DataGrid (leveraging QuickGrid)… https://t.co/mlrkjh6TbU","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":92,"FavoriteCount":28,"RawContent":null},{"Id":"1590023953283702785","CreatedAt":"2022-11-08T16:50:26+00:00","UserScreenname":"aspnet","Text":"It’s here – and it’s blazing fast… Announcing .NET 7, the fastest .NET yet with new enhancements for .NET MAUI,… https://t.co/XabHOH3N2d","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":92,"FavoriteCount":32,"RawContent":null},{"Id":"1590008752048046081","CreatedAt":"2022-11-08T15:50:02+00:00","UserScreenname":"aspnet","Text":"The #dotNETConf 2022 event kicks off now ‼️ \n\nJoin @GauravSeth, @CoolCSH, @captainsafia, Julia Kasper, @DavidFowl t… https://t.co/y0obTmfQ8V","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":23,"FavoriteCount":13,"RawContent":null},{"Id":"1589588429159137283","CreatedAt":"2022-11-07T11:59:49+00:00","UserScreenname":"aspnet","Text":".NET Conf 2022 - Student Zone https://t.co/Y7L0FrSBRk","Source":"<a href=\"https://periscope.tv\" rel=\"nofollow\">Periscope</a>","RetweetCount":6,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2023-02-12T03:30:07.838871Z","RunDurationInMilliseconds":3509}