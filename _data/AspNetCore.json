{"Data":{"Blog":{"FeedItems":[{"Title":"MCP C# SDK Gets Major Update: Support for Protocol Version 2025-06-18","PublishedOn":"2025-07-22T17:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The MCP C# SDK has been updated to support the latest Model Context Protocol specification (2025-06-18), bringing structured tool output, elicitation support, enhanced security, and more to .NET...","Href":"https://devblogs.microsoft.com/dotnet/mcp-csharp-sdk-2025-06-18-update/","RawContent":null},{"Title":"Ask Mode vs Agent Mode – Choosing the Right Copilot Experience for .NET","PublishedOn":"2025-07-21T17:05:00+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"GitHub Copilot Chat offers two powerful modes, Ask Mode and Agent Mode, that can dramatically accelerate your development. Learn when to use each mode to get the most out of this tool.\nThe post Ask...","Href":"https://devblogs.microsoft.com/dotnet/ask-mode-vs-agent-mode/","RawContent":null},{"Title":"Building Your First MCP Server with .NET and Publishing to NuGet","PublishedOn":"2025-07-15T20:00:00+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Learn how to create a Model Context Protocol (MCP) server using .NET 10 and publish it to NuGet — making AI capabilities discoverable and reusable across the ecosystem.\nThe post Building Your First...","Href":"https://devblogs.microsoft.com/dotnet/mcp-server-dotnet-nuget-quickstart/","RawContent":null},{"Title":".NET 10 Preview 6 is now available!","PublishedOn":"2025-07-15T17:22:00+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Find out about the new features in .NET 10 Preview 6 across the .NET runtime, SDK, libraries, ASP.NET Core, Blazor, C#, .NET MAUI, and more!\nThe post .NET 10 Preview 6 is now available! appeared first...","Href":"https://devblogs.microsoft.com/dotnet/dotnet-10-preview-6/","RawContent":null},{"Title":"Customize AI responses from GitHub Copilot","PublishedOn":"2025-07-10T17:15:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Learn how custom instructions can tailor GitHub Copilot's AI responses to your team's exact needs.\nThe post Customize AI responses from GitHub Copilot appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/customize-ai-responses-from-github-copilot/","RawContent":null},{"Title":"How the .NET MAUI Team uses GitHub Copilot for Productivity","PublishedOn":"2025-07-09T17:15:00+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"How the .NET MAUI Team uses GitHub Copilot for Productivity\nThe post How the .NET MAUI Team uses GitHub Copilot for Productivity appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/maui-team-copilot-tips/","RawContent":null},{"Title":".NET and .NET Framework July 2025 servicing releases updates","PublishedOn":"2025-07-08T19:00:00+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"A recap of the latest servicing updates for .NET and .NET Framework for July 2025.\nThe post .NET and .NET Framework July 2025 servicing releases updates appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/dotnet-and-dotnet-framework-july-2025-servicing-updates/","RawContent":null},{"Title":"Local AI + .NET = AltText Magic in One C# Script","PublishedOn":"2025-07-02T20:00:00+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Learn how to generate image AltText using .NET 10 and local AI models — all in a single C# file with dotnet run app.cs. A fun and accessible example of what AI can do beyond chat.\nThe post Local AI +...","Href":"https://devblogs.microsoft.com/dotnet/alttext-generator-csharp-local-models/","RawContent":null},{"Title":"Simpler XAML in .NET MAUI 10","PublishedOn":"2025-06-26T19:15:00+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Make your .NET MAUI XAML more consistent and easier to read with global and implicit XML namespaces.\nThe post Simpler XAML in .NET MAUI 10 appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/simpler-xaml-in-dotnet-maui-10/","RawContent":null},{"Title":"Multimodal Vision Intelligence with .NET MAUI","PublishedOn":"2025-06-17T19:30:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Enhance your .NET MAUI app with photo-based AI by capturing images and extracting structured information using Microsoft.Extensions.AI.\nThe post Multimodal Vision Intelligence with .NET MAUI appeared...","Href":"https://devblogs.microsoft.com/dotnet/multimodal-vision-intelligence-with-dotnet-maui/","RawContent":null}],"ResultType":"Feed"},"AspNetCore-Issues":{"Issues":[{"Id":"3266452045","IsPullRequest":true,"CreatedAt":"2025-07-27T02:02:06","Actor":"dotnet-maestro[bot]","Number":"62949","RawContent":null,"Title":"[main] Source code updates from dotnet/dotnet","State":"open","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:227fbda2-94d8-406e-91e6-26cb20b6628c)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [227fbda2-94d8-406e-91e6-26cb20b6628c](https://maestro.dot.net/subscriptions?search=227fbda2-94d8-406e-91e6-26cb20b6628c)\n- **Build**: [20250725.19](https://dev.azure.com/dnceng/internal/_build/results?buildId=2758480)\n- **Date Produced**: July 26, 2025 11:11:57 AM UTC\n- **Commit**: [03fb78540de4e5b3c8874da30e60b58321956993](https://github.com/dotnet/dotnet/commit/03fb78540de4e5b3c8874da30e60b58321956993)\n- **Commit Diff**: [2dfd0aa...03fb785](https://github.com/dotnet/dotnet/compare/2dfd0aa278fc5a46c7f5e881584d0895aaac68fc...03fb78540de4e5b3c8874da30e60b58321956993)\n- **Branch**: main\n\n**Updated Dependencies**\n- From [10.0.0-preview.7.25375.106 to 10.0.0-preview.7.25375.119][1]\n  - Microsoft.Bcl.AsyncInterfaces\n  - Microsoft.Bcl.TimeProvider\n  - Microsoft.Extensions.Caching.Abstractions\n  - Microsoft.Extensions.Caching.Memory\n  - Microsoft.Extensions.Configuration\n  - Microsoft.Extensions.Configuration.Abstractions\n  - Microsoft.Extensions.Configuration.Binder\n  - Microsoft.Extensions.Configuration.CommandLine\n  - Microsoft.Extensions.Configuration.EnvironmentVariables\n  - Microsoft.Extensions.Configuration.FileExtensions\n  - Microsoft.Extensions.Configuration.Ini\n  - Microsoft.Extensions.Configuration.Json\n  - Microsoft.Extensions.Configuration.UserSecrets\n  - Microsoft.Extensions.Configuration.Xml\n  - Microsoft.Extensions.DependencyInjection\n  - Microsoft.Extensions.DependencyInjection.Abstractions\n  - Microsoft.Extensions.DependencyModel\n  - Microsoft.Extensions.Diagnostics\n  - Microsoft.Extensions.Diagnostics.Abstractions\n  - Microsoft.Extensions.FileProviders.Abstractions\n  - Microsoft.Extensions.FileProviders.Composite\n  - Microsoft.Extensions.FileProviders.Physical\n  - Microsoft.Extensions.FileSystemGlobbing\n  - Microsoft.Extensions.HostFactoryResolver.Sources\n  - Microsoft.Extensions.Hosting\n  - Microsoft.Extensions.Hosting.Abstractions\n  - Microsoft.Extensions.Http\n  - Microsoft.Extensions.Logging\n  - Microsoft.Extensions.Logging.Abstractions\n  - Microsoft.Extensions.Logging.Configuration\n  - Microsoft.Extensions.Logging.Console\n  - Microsoft.Extensions.Logging.Debug\n  - Microsoft.Extensions.Logging.EventLog\n  - Microsoft.Extensions.Logging.EventSource\n  - Microsoft.Extensions.Logging.TraceSource\n  - Microsoft.Extensions.Options\n  - Microsoft.Extensions.Options.ConfigurationExtensions\n  - Microsoft.Extensions.Options.DataAnnotations\n  - Microsoft.Extensions.Primitives\n  - Microsoft.Internal.Runtime.AspNetCore.Transport\n  - Microsoft.NET.Runtime.MonoAOTCompiler.Task\n  - Microsoft.NET.Runtime.WebAssembly.Sdk\n  - Microsoft.NETCore.App.Ref\n  - Microsoft.NETCore.BrowserDebugHost.Transport\n  - Microsoft.NETCore.Platforms\n  - System.Collections.Immutable\n  - System.Composition\n  - System.Configuration.ConfigurationManager\n  - System.Diagnostics.DiagnosticSource\n  - System.Diagnostics.EventLog\n  - System.Diagnostics.PerformanceCounter\n  - System.DirectoryServices.Protocols\n  - System.Formats.Asn1\n  - System.Formats.Cbor\n  - System.IO.Hashing\n  - System.IO.Pipelines\n  - System.Memory.Data\n  - System.Net.Http.Json\n  - System.Net.Http.WinHttpHandler\n  - System.Net.ServerSentEvents\n  - System.Numerics.Tensors\n  - System.Reflection.Metadata\n  - System.Resources.Extensions\n  - System.Runtime.Caching\n  - System.Security.Cryptography.Pkcs\n  - System.Security.Cryptography.Xml\n  - System.Security.Permissions\n  - System.ServiceProcess.ServiceController\n  - System.Text.Encodings.Web\n  - System.Text.Json\n  - System.Threading.AccessControl\n  - System.Threading.Channels\n  - System.Threading.RateLimiting\n- From [10.0.0-rc.1.25375.106 to 10.0.0-rc.1.25375.119][1]\n  - dotnet-ef\n  - Microsoft.EntityFrameworkCore\n  - Microsoft.EntityFrameworkCore.Design\n  - Microsoft.EntityFrameworkCore.InMemory\n  - Microsoft.EntityFrameworkCore.Relational\n  - Microsoft.EntityFrameworkCore.Sqlite\n  - Microsoft.EntityFrameworkCore.SqlServer\n  - Microsoft.EntityFrameworkCore.Tools\n- From [10.0.0-beta.25375.106 to 10.0.0-beta.25375.119][1]\n  - Microsoft.DotNet.Arcade.Sdk\n  - Microsoft.DotNet.Build.Tasks.Archives\n  - Microsoft.DotNet.Build.Tasks.Installers\n  - Microsoft.DotNet.Build.Tasks.Templating\n  - Microsoft.DotNet.Helix.Sdk\n  - Microsoft.DotNet.RemoteExecutor\n  - Microsoft.DotNet.SharedFramework.Sdk\n- From [3.2.0-preview.25375.106 to 3.2.0-preview.25375.119][1]\n  - Microsoft.Web.Xdt\n\n[marker]: <> (End:227fbda2-94d8-406e-91e6-26cb20b6628c)\n\n[1]: https://github.com/dotnet/dotnet/compare/2dfd0aa278...03fb78540d\n","Url":"https://github.com/dotnet/aspnetcore/pull/62949","RelatedDescription":"Open PR \"[main] Source code updates from dotnet/dotnet\" (#62949)"},{"Id":"3266120828","IsPullRequest":true,"CreatedAt":"2025-07-26T21:07:09","Actor":"stevendarby","Number":"62946","RawContent":null,"Title":"Omit key services with derived attribute from OpenAPI definitions","State":"closed","Body":"# Omit key services with derived attribute from OpenAPI definitions\r\n\r\nInstead of checking the attribute type is exactly `FromKeyedServicesAttribute`, it now checks if it's assignable to it, so that it also covers derived attributes.\r\n\r\nNote, I find the relatively newer `IsAssignableTo` easier to follow than `IsAssignableFrom` so opted for that, and in a slightly opinionated way I changed the existing code on that line to use that too, for some local consistency. I hope that's ok.\r\n\r\nFixes #58739\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/62946","RelatedDescription":"Closed or merged PR \"Omit key services with derived attribute from OpenAPI definitions\" (#62946)"},{"Id":"3266040783","IsPullRequest":false,"CreatedAt":"2025-07-26T19:28:23","Actor":"pr-benchmarks[bot]","Number":"62945","RawContent":null,"Title":"Perf regression: ApiCrudListProducts","State":"open","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| ApiCrudListProducts  | API return collection data 5- MVC Gold Win | 07/25/2025 12:37:32 | 645,933 | 586,989 | -9.13 % (-58,944)  :thumbsdown:  | -3.19 σ | 18,476.27 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25372.103` -> `10.0.0-rc.1.25374.102`</td>            <td>https://github.com/dotnet/aspnetcore/compare/96ac952a7886b565e83acc4c9cef656954ed0686...87e4c823cc62a13a3e8afbddc78bf718971f376c</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25372.103` -> `10.0.0-preview.7.25374.102`</td>            <td>https://github.com/dotnet/runtime/compare/96ac952a7886b565e83acc4c9cef656954ed0686...87e4c823cc62a13a3e8afbddc78bf718971f376c</td></tr><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-rc.1.25374.102` (__New__ )</td>            <td>n/a</td></tr><tr>            <td>Microsoft.CSharp.dll</td>            <td>`10.0.0-preview.7.25374.102` (__New__ )</td>            <td>n/a</td></tr><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25372.103` (__Removed__)</td>            <td>n/a</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/62945","RelatedDescription":"Open issue \"Perf regression: ApiCrudListProducts\" (#62945)"},{"Id":"3266040776","IsPullRequest":false,"CreatedAt":"2025-07-26T19:28:23","Actor":"pr-benchmarks[bot]","Number":"62944","RawContent":null,"Title":"Perf improvement: ApiCrudListProducts","State":"open","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| ApiCrudListProducts  | API return collection data 7- MVC Intel Lin | 07/24/2025 14:01:44 | 338,719 | 342,695 | 1.17 % (3,976)  :thumbsup:  | 2.20 σ | 1,807.01 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25368.105` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/dotnet/compare/1c92f346e02a8363def6f7bdbcc526d3c579dd74...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25368.105` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/aspnetcore/compare/1c92f346e02a8363def6f7bdbcc526d3c579dd74...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25368.105` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/runtime/compare/1c92f346e02a8363def6f7bdbcc526d3c579dd74...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/62944","RelatedDescription":"Open issue \"Perf improvement: ApiCrudListProducts\" (#62944)"},{"Id":"3266040725","IsPullRequest":false,"CreatedAt":"2025-07-26T19:28:16","Actor":"pr-benchmarks[bot]","Number":"62943","RawContent":null,"Title":"Perf regression: fortunes","State":"open","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| fortunes  | Fortunes Platform 8- Trends Database Gold Lin | 07/25/2025 10:26:25 | 636,457 | 596,665 | -6.25 % (-39,791)  :thumbsdown:  | -5.46 σ | 7,289.96 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25372.103` -> `10.0.0-rc.1.25374.102`</td>            <td>https://github.com/dotnet/aspnetcore/compare/96ac952a7886b565e83acc4c9cef656954ed0686...87e4c823cc62a13a3e8afbddc78bf718971f376c</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25372.103` -> `10.0.0-preview.7.25374.102`</td>            <td>https://github.com/dotnet/runtime/compare/96ac952a7886b565e83acc4c9cef656954ed0686...87e4c823cc62a13a3e8afbddc78bf718971f376c</td></tr><tr>            <td>Microsoft.CSharp.dll</td>            <td>`10.0.0-preview.7.25374.102` (__New__ )</td>            <td>n/a</td></tr><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-rc.1.25374.102` (__New__ )</td>            <td>n/a</td></tr><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25372.103` (__Removed__)</td>            <td>n/a</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK]lNdizKXNTlHNrAvGAAAApPNhkYmuUHJldmlvdXNSZXN1bHSHoklkzgANt4SoRXhjbHVkZWTCq0RhdGVUaW1lVXRjktf/kLhXAGiBPUEAp1Nlc3Npb26qMjAyNTA3MjMuMahTY2VuYXJpb6hmb3J0dW5lc6tEZXNjcmlwdGlvbtktRhYA8B8gUGxhdGZvcm0gOC0gVHJlbmRzIERhdGFiYXNlIEdvbGQgTGluqERvY3VtZW50xgAAGbvwANpNrHsiam9icyI6eyJkYgYAYXJlc3VsdBEA+A9iZW5jaG1hcmtzL2J1aWxkLXRpbWUiOjEyMDQuMCwfAPwGcHVibGlzaGVkLXNpemUiOjQyODE1JQBUc3RhcnREADs2NTFEAPwAd29ya2luZy1zZXQiOjU2HwB7Y3B1IjozNTUA8h1jcHUvcmF3IjoxOTYwLjB9LCJtZXRhZGF0YSI6W10sImRlcGVuZGVuY2llcxIAoG1lYXN1cmVtZW7lAAAkAHBlbnZpcm9uEgAAAQGhaHciOiJHT0xEIhsA8CAiOiJVbnNwZWNpZmllZCIsIm9zIjoiTGludXgiLCJhcmNoIjoiWDY0IiwicHJvY7sA8BEsInZlcnNpb24iOiIwLjIuMC1kZXYifSwidmFyaWFibIsAgXsiaGVhZGVyaQFwbm9uZSI6IkMA0mxhaW50ZXh0IjoiLS0jALAgXCJBY2NlcHQ6IBoAES8kABEsCwDwCWh0bWw7cT0wLjksYXBwbGljYXRpb24veBgALyt4HAADAxYAUTgsKi8qPABHN1wiIGwAYENvbm5lY0gA0Doga2VlcC1hbGl2ZVyeAABXAA+ZAAgAHwAPiAADChYAA4IAFTmCAB84ggAWIWpzVgEHrwAEGwEIAAEAJgAPIQFiFWM8AUBjbG9z1AEHqgAIWQEBHwAgXCIVAnRwcmVzZXRIDgICDQLALCJzZXJ2ZXJTY2hldANVImh0dHAWADBQb3IkA4AwMDAsInVybJECACAAYDovLzEwLgIAMTEyMR8ABTIApkFkZHJlc3MiOiIiAAGwADJyZXOzAp9zZWNvbmRhcnkrAABAMyIsIlQDUWJhc2VTmAAISQAQNR4An293bnN0cmVhbT8AABA15wAGLgQAdgM3fSwisQEADwMHeAR1bmV0U2RrVkQDAbMA8AcxMDAtcHJldmlldy43LjI1MzcyLjEwmgCrYXNwTmV0Q29yZTMADzEAAvICKzk2YWM5NTJhNzg4NiIsIm47AD9BcHA+ACEG1gAKIwVLMDczMqsEDCQFazExMDkwMyUAc3N5bWJvbHNHBSw1OR8AB0MFPDkxMWMAAA4FkWdsb2JhbCI6OH8FMHJ1brUF/hYtY291bnRlci9jcHUtdXNhZ2UiOjgxLjc0MDE4MjQzNzMyMDg4LgAJkwWuMjM1LjQ3NDk0NCkAIGdjrAQTcLcAnzEwMC45MTMxNikAAHJlbi0wLWdjkQBAIjozNuIADKYAV2dlbi0xJgAB6AAPJQABFzIlAB8xSgAFAXAAQGJ1ZGdZBh83FwECsnRocmVhZHBvb2wtCwAEoAARN6EBDHsA8ARtb25pdG9yLWxvY2stY29udGVuMAUFNQAfNNcAAwJbAAFmAP8BcXVldWUtbGVuZ3RoIjo3N7wAAQcvAPQAY29tcGxldGVkLWl0ZW1zaQBfMTY1MDijAAP/B2FsbG9jLXJhdGUiOjIwNTI4Njc4MDhnAAFwYWN0aXZlLScCFHJZAC81MCoAAbFnYy1mcmFnbWVudGgG/gUiOjI4LjMzNzkyMzc1NzcxNDQxNy0BAe0B/wNtbWl0dGVkIjoxMzAuMzU5MjkdAgAgZXjmBgdJAT85NTKIAAEAqwCfLWluLWdjIjoxOwECAEECFDCOAk8xODg1DgMDACcAFDEnAG8zODQyNDGQAgYTMigAEDLbAz8wMjSZAAEzbG9oJgBfMTk0MTdMAAIVcCQAbzQxOTgwOJQBA3Rzc2VtYmx5kAEROAkEDIcCo2lsLWJ5dGVzLWpdAV82MzEzNysAAmRtZXRob2QqAARXACI3NxgBB8YECvMDIDI15wAHHwDgcHJpdmF0ZS1tZW1vcnnFBBE25gAHIwABqQkROLkBChYAAqkJIjQ1zQAHHAAHdAB/L3N0ZWFkeXsAAQDdBAQeAAAeCg/sCQ3wBHsiaWQiOiJkbiszVHBWMVpSQT3vBSBhbfIG1VsiTWljcm9zb2Z0LkFABv8DLkFudGlmb3JnZXJ5LmRsbCIsJwAEMHV0aPMDEWMHA2AuQWJzdHJHAz9vbnM3ABi/QmVhcmVyVG9rZW42ABhvQ29va2llaAAZT0NvcmVhABgP+AAXX09BdXRoWgANQm9yaXonAQ9ZAAwGKQBfUG9saWOBAQqhQ29tcG9uZW50c4wBBjsAD2QACAc0AA8mABNgRW5kcG9pZAAPMAATT0Zvcm0sABUCRgkPPAEJB68AP1dlYioACwSxCx9ziwIWAkYCD2kBER9y0wAL0HJ5cHRvZ3JhcGh5LkljCD9uYWytAAoIMQBRS2V5RGVSBA+8AQyCRGF0YVByb3TnAA/mABYLNwAPxwEICyoAYUV4dGVuc1IBDzUACZ9pYWdub3N0aWN5ARcINAAPWwAUz0hlYWx0aENoZWNrc1sBCQ9PAAjfSG9zdEZpbHRlcmluZ0QACQApAAAjAA9IAhUEMAAPfAAMAFMAA/MCD1oAFj90bWzpARZPSHR0cC0AGwg1A09Db21tgAILAWAACDMAD/AACQCMAA8gAA0PYQITAXcAb0ZlYXR1cvIFCwEpABJSuhEP3wEKcHR0cExvZ2eQAQ+jAAx/T3ZlcnJpZHgADx9zRgQPIElkLgcfdNMFCl9Mb2NhbCsGEAkoAE9Sb3V0zAAMQE1ldGG8Dg8XAQk/TXZjPgIWASwAj3BpRXhwbG9ywwULACsAD30HDQMkAA9SAgoAJAAAoQRCQW5ub3oLDy8ADg/dAQgATgAAqwafYXR0ZXJzLkpz+wILCy8AL1ht3wUKAC4ACaIBD4kADF9SYXpvcpsBDQElAD9QYWeMAgsAewBwVGFnSGVscNgAD3kADE9WaWV3WgMRr091dHB1dENhY2hoAgyPUmF0ZUxpbWmQAg0BzQAP8gAJAiEAElK5Dw8pAAqAZXF1ZXN0RGUeDjByZXOwBg8wAAtkc3BvbnNlzQAPigUVDDgAD1oBCAUrAA+SABVPd3JpdLoGCgTiAw+tABYPEgQPA4kGADQFL1N5KQIKAyoAP0lJU1gBCQYmAAABCS9ncs4IDgMxAH9LZXN0cmVsIwQOCy8AD38BCAsqAP8DVHJhbnNwb3J0Lk5hbWVkUGlwQgMLDz8ABj9RdWlTBAoPOQAGX1NvY2tlkwYLH1O5Ag9/U2lnbmFsUqgHEAYqAA/zDAsEKAAPTAEJA3UAAHcKT29jb2wqBQ8QU5wFT2NBc3PyAA0BKAA/RmlsjgELP1dlYj8BEJ9XZWJVdGlsaXQUDgFeQ1NoYXKNCAd9CA8MBBIPMAAAEU0AEA0WAwgqAGNvbmZpZ3UOAw+/AwoPNgAGT0JpbmRjBwAPMAAGACECbmFuZExpblQEDzUABgwEAg8pAAYWRSgaFFbJGQ8CARcA8AEHWwAPdgAWP0luaWUAFw/NBwIHdgAKlQFgS2V5UGVymQAPYgAXj1VzZXJTZWNy5AIBD2kABj9YbWxiAAkURKUbQnlJbmp7Gg+PCQsHaQAPPAABD1wBCAh/DQ+UAhUINAAPWwAUCbMND2gAIQlBAA91AAgPwwgGByMBAOEBUFByb3ZpbxwPWQEWCjYAb0NvbXBvc6wHAQ9pAAaPRW1iZWRkZWT6AQkKZQBvUGh5c2ljQBAAC2QAv1N5c3RlbUdsb2JikAgBBy4ABJ8OD4MBFQQwAA9yAQgP3w0CB3MABewMD4QGAg8pAAE/U3Rv3w0BBysACVILD8wAFQk1AA/RAAgEEA4PWAAXAkAOCkwED2EAEF9Db25zb2wECwRcAE9EZWJ1hgEKBCkAD3cAEH9FdmVudExvLAAXX1NvdXJjQQYKBH4AX1RyYWNlLwAPIE9i1gQ/UG9vBgUKIk9wQRYJWAEHBQIP6wAIBDsADyUODQdOAAQzAA9WAAghUHLPDB925gYLX1ZhbGlk8woDB28Aj1dlYkVuY29kmg0BEUo4Cy5yb6kIMU5ldLMQEy4eHw1LBK9WaXN1YWxCYXNpag8ECCEADOsAX1dpbjMy5gAJAiEAZVJlZ2lzdO0IdG1zY29ybGmSFaRuZXRzdGFuZGFy6QQCngSzLkFwcENvbnRleHS2AAMYAEZCdWZmBgEDFQBCQ29sbPkGAQACa2N1cnJlbjkACCQAAssADz0AAFBJbW11dGMiCnUACDwAhU5vbkdlbmVy0wsPRwAAEFPwIgCPEQW/BQUlAAN5F25Nb2RlbC6SEA8oAAMPmQIDDywAAwvcAAlwAAHMA5RCYXNlZEFzeW7TAQ9IAAMN2QEPJwADtVR5cGVDb252ZXJ0awoFKgAIwwoLmAAIzAQFMAAFdgwDEgAA+AAKtwwIGQAAHgA3U2V0JwMJZAAAHwAKxwEIiggAXQIAdRoMNQAHYBYIRgUEeAAIHwAFDAAJwwQPKgAAAXcBBkMFDyIAAADJBwNAIU9JbmZvtwAHf1Byb2Nlc3MhAAdRU3RhY2tZBQ8kAAdQVGV4dFc6EBFyKQBATGlzdNICDzEACD9vb2x0AAgBRgAPBQENACUABm8IAwQBCrEBPXJhdyIABBUADU4FA0IAe0R5bmFtaWPxEQMdAAKoE2pzLkFzbjHeAAQaACVDYk4SCzQAJFRhWRMDGQAAMQkA1AMCrQVAQ2FsZbcECxcBCiUACd8AChsAD7YCBSBJT/ECBZASVEJyb3RswgwDiQALIwAJZQALHAAAWAIDNgAPJwAJMFppcCoACiMBLUlPEAAAJQADTwAAOCYhc3NGAwWYBwMbAAopAAx4AAdEAF5Ecml2ZfACCkAAD/kBBQomAFxXYXRjaMMCsElPLklzb2xhdGVkJQokYWeWCAapAAKJD2BNYXBwZWSaAB1z9AAA9xE1bGluxgcGPAAAGgAfcwkBDAIkAAIMHwY6AJJVbm1hbmFnZWR/ABFT+iUKegBRTGlucS6mBW5FbnVtZXKVBgEiAAlaAAESACRFeD0CC3gAAR4AbFBhcmFsbCcGARsAXlF1ZXJ5ZwACowAKnQAAWQgJegAAEQAH2gsD6gAFFgAHJRcLGwAPfAQDADkAO01haaYAABYAAIoTYFJlc29sde4JDpYAcE5ldHdvcmtVAgD7AwYYHQd4AB1QZQQAWgAPaAIFABwAB8ETB0gAA0EWC2cBADAAVlNlY3VysRkHNAAC6xNBU2VudBUGDzwAAmBydmljZVA7Hw7gAArTEgdZAG1XZWJDbGn2CACOADJXZWIBCgbHCA5ZAHRXZWJQcm94ZBoKWgAEdgAPYgAIBCMAChcCIHVtKQkPFgAFVVZlY3RvlwoDcwAC7gsCIAkJTQARUOoeAHwfNXJlTEEKAzYABB0AAPUHAZUEdmFjdFNlcmmxBQ9MAAIrVXJcBQRIAAZzEQthAAAZAAEvAwlQADNSZWaBClAuRGlzcI0ED04BAAcmAA8+AAU7RW1pWwMHNQABHQAhSUx/Cg/cAgAMKgBwTGlnaHR3ZQYACvABCCkADKofA+8AByMACwIcDiEAD5sHBQdEAAAmCg/yBgUAzwMAMg4xcy5SpwwMrAAGHgACCgARTTsFC50HBB0AInMu2QgLRQADDhoADwsgaWyAAwFkA3tzLlVuc2FmFgYESggNLQACDQ0fQ1sAAwrRAQNwAA/zAAYDIABNSGFuZHQGBIAAA9YNBawAD2IAAgwlAJxKYXZhU2NyaXBGAgNyAAwwAANtAA8wBQYDIACNLkludHJpbnPMAwQgADZMb2FrFgQjAgN0AA8GBAMEOgAPpgMIDyMAAwLVCR10BQ4PLgADDnsGDygAAw/FAgYDxQAKpwAABgQJkAEF8gUPDwgIBSQARUNsYWnrJAMtAQYdAAgTJI9BbGdvcml0aC4AExxDXwsPVQADJENzKxAPfAAKD+AAAwmfAAGUEA1OBw92AANvT3BlblNzNwEFCVcAO1BrY+8CD1MAAw+0AQUPLgADoFg1MDlDZXJ0aWboMQzQCQ80AAQfbbEABQ8eAQN1UHJpbmNpcIQVDGEBBiAAb1dpbmRvd+cABQGOACBlU3QDHGdrAAEfCAIgBwbaJgVpAAEeAA8mDgIQVEwRBbIBSENvZGUUIANBAAolAAl6AAobAA/bBAUJJgABuRIKwAABIAAOlQMBFwB/UmVndWxhcsIKBhFUZy4AEwEPZgMIBiUAe0NoYW5uZWxkAQYgAAreAAVcAAC6IxFsEQwLugAFIgAPrCAABD8BBSQAQlRhc2tSFE9mbG93SgAFAiYAD4kABAIdAA9pAQYLawAP2gsDBu4AAgoAD4kABgFOAAdkFQ7RACxpbVcHASEfE2F4EwrFAAgaAAFKFwp5AJtWYWx1ZVR1cGw5Bw3RAgARAABZDAKlHQt3Aw9EAwINmwUAEQAOsgkAFgACcAgPMQgBAB4ACvIFCd8AAB8AUFhEb2N1zC8K2gABGwAvbWwdAAoEWgAMUAEBPAAlUGEVLAOEAQYXAAx0AAMBATJCYXNIAVFdLCJyZWkaY29yeVVybNk08wZzOi8vZ2l0aHViLmNvbS9kb3RuZXQHABgibjcBKjQPKDQF2GNvbW1pdEhhc2giOiIGNPMQYjU2NWU4M2FjYzRjOWNlZjY1Njk1NGVkMDY4NiJ9LEkuv3k1NUx2akZLREdjSS4EsEVudGl0eUZyYW1lxA0BeC0PVhkLDzEAAAJrDwaeLg9VAAFAUmVsYT8OA5YCDzYBGiBlZvU1CTYBXDkuMC4xIQH2GTQ4MDQ4MGI1N2NkNmU0M2ZlNWNhYjFiNTUyYWMwZWY5MTdiZjNmZTghAapWSllhUnZ6VVlXIQEQRIwEAu8KD6oAEwIxADNMaWIKAAmtAGwyLjEuNjauAKZiZDRmNzViNTEykACqd2ZvSjhyZk94Ofovb05wZ3NxbH0BAqFQb3N0Z3JlU1FMFQMPrwATEW5QAANZATkucGevAFw5LjAuNK4A9hlmZDIzODA5NTdiZWU1Y2Q4NmYzMzY0NjZhZjM2YjA4YzAxNjNmMWE1zACqUkJ0ZWNtVkp1aMwAQFBsYXQqEBVCqzsPuQAYdmFzcG5ldC88AAm6ABAxSjgMugD2GTRmODk5ZGE4ZjQ1NDg3NzMwODA1Y2NiZmQ2Y2EwNGZjZmI5YzhkNjm6AJtYcGROYnFDL1e6AHFSYXpvclNsxgwA9AIPbAET50RhbWlhbkVkd2FyZHMvRAAJuwBcMC44LjG7APcYNjVmZGU1ODdhYzIzNjNkOGFmNDVjYTU1MWViODQ1ZDE0MWFiYTdkQQK5U0V0dE0rb0hlWUnyAwKWAk8uQU9UbQEYAjUABtUCSUFPVC+1AABwASw0OLYAlzRmOGNkNTA2M1MBuTQzbDFidUlheTM0mAAD2QIPTgEXA7oCAgcACY0AALcCAFw5CjQF9xc3ZGMxNzM5YzZjZjU4OTBhY2Y0NTBmMjBmMDRlNjRjMTRjN2ZmZLcCuXAxODVFTlZpdVhrqgAG3wQIfTMvcHAGAhQDAQYCwAINzwQQMQI7DwUGRL9scVNVS3BxUjVTVdEABDJORVT5BQ/OAB0D3jUJhwEPywBBDwQ/////fEtsb2Fk/T4VYsoHCTFDGzA0OQjrPSAyOB0AACkLQC9maXJVLAEZLkwiOjE1hzkAmApQaW5nLXMMPSA0MzgAB3EADN45LDM2IgAB3TkrMTk4AACNAAHdOTExMDZyAMB3cmsvcnBzL21lYW6XOnI2NDU2Ljc5GQDzAnRocm91Z2hwdXQiOjgzNS4xGACwbGF0ZW5jeS9tYXhZOjIuNzMwAAPPAJFzIjo5NjEwMjXyOwBiALNlcnJvcnMvYmFkctsuE3MpAQceAGJzb2NrZXQrAAceAARtACA1MBUAMjc0NTUABBcAIzc1UT4ASgAEFQAgOTAVABMzlwAFFgB6OSI6Mi41NywAAvoAYzAuODI4N5wBBDEADxsAAA8sAQIB0QEPLQEBARkABU4ABy4BARkADy8BAgkaAA8yAQEKIQAJLwEBGwAEbwAHMAEJGAAFMQEJFgAGMgEKFwADMwEQfYsGAp8zD69F//+oMGh0bSg+D69FNRZjzTuDIjo1MTIsImRELwDPBXAsInRpbWVvOgXDbnVsbCwid2FybXVwGwABAxODcyI6MzIsInD2H/QAIjoxLCJzY3JpcHQiOiIiDAAxQXJn/BETcxUADyVGCeFwYXRoIjoiL2ZvcnR1bmsNYmN1c3RvbZUdAAUREF25ABByEBEA/kgPS0ZccH0sInByb3AaFwCCAON7InNjZW5hcmlvIjoiRrQABCgPAGNJA9ExAbwB9Ad0cCIsImJ1aWxkSWQiOiIyNzU2MzgyFABgTnVtYmVyGAB1MDI1MDcyM1YOQmFuZC1fAaEiY3JhbmsgLS1jXC8QIFQAALASQnJhdy60EoB1c2VyY29udNweAL8SDXcPZC9tYWluL7YAEHPhSQHVDxYumwdPLnltbGQAMAHqAO8vYXp1cmUucHJvZmlsZVoANAa+AAKkQU9zdGF0ZAA9Ar4AK2NpuwAEewAUIKECMyAtLd0AQSBnb2ypAU0tYXBwFwAib2EFAAwZAHBkYi1kYiAtNAAEU0skLmbWE0AgbmV0lw0LIAATb74rEmPKKdtDb3VudGVycyB0cnVlKwADIwAF9jAlaWUnAEVsb2FkSwBgcmV1c2VCnAIBRgBSIn19rUMZKgLqO/Ieh6JJZM4ADb62qEV4Y2x1ZGVkwqtEYXRlVGltZVV0Y5LX/54STwBog1vRAKdTHzgTqskCUzQuMqhTJgMjqGYkAzKrRGUpBGNpb27ZLUYWABQgOwPDIDgtIFRyZW5kcyBEDErwAyBHb2xkIExpbqhEb2N1bWVudMYAAClo8ADaTkt7ImpvYnMiOnsiZGIGAGFyZXN1bHQRAPgPYmVuY2htYXJrcy9idWlsZC10aW1lIjoxMTg4LjAsHwD7B3B1Ymxpc2hlZC1zaXplIjo0MjgxNTQlAFRzdGFydEQAOzU4Nh8A/AB3b3JraW5nLXNldCI6NTZjAGxjcHUiOjNUALBjcHUvcmF3IjoxOJUA8g59LCJtZXRhZGF0YSI6W10sImRlcGVuZGVuY2llcxIAoG1lYXN1cmVtZW7lAAAkAHBlbnZpcm9uEgAAAQGhaHciOiJHT0xEIhsA8CAiOiJVbnNwZWNpZmllZCIsIm9zIjoiTGludXgiLCJhcmNoIjoiWDY0IiwicHJvY7sA8BEsInZlcnNpb24iOiIwLjIuMC1kZXYifSwidmFyaWFibIsAgXsiaGVhZGVyaQFwbm9uZSI6IkMA0mxhaW50ZXh0IjoiLS0jALAgXCJBY2NlcHQ6IBoAES8kABEsCwDwCWh0bWw7cT0wLjksYXBwbGljYXRpb24veBgALyt4HAADAxYAUTgsKi8qPABHN1wiIGwAYENvbm5lY0gA0Doga2VlcC1hbGl2ZVyeAABXAA+ZAAgAHwAPiAADChYAA4IAFTmCAB84ggAWIWpzVgEHrwAEGwEIAAEAJgAPIQFiFWM8AUBjbG9z1AEHqgAIWQEBHwAgXCIVAnRwcmVzZXRIDgICDQLALCJzZXJ2ZXJTY2hldANVImh0dHAWADBQb3IkA4AwMDAsInVybJECACAAYDovLzEwLgIAMTEyMR8ABTIApkFkZHJlc3MiOiIiAAGwADJyZXOzAp9zZWNvbmRhcnkrAABAMyIsIlQDUWJhc2VTmAAISQAQNR4An293bnN0cmVhbT8AABA15wAGLgQAdgM3fSwisQEADwMHeAR1bmV0U2RrVkQDAbMA8AgxMDAtcHJldmlldy43LjI1Mzc0LjEwMoQDm3NwTmV0Q29yZTMAZjAtcmMuMSwAwCs4N2U0YzgyM2NjNjkAEm42AD1BcHA5AA9qAAAMPgAG0QAKHgVLMDY3OdsEDB8FazExMDkwMSUAc3N5bWJvbHNCBSw1OB8ABz4FSzkwMDIfAAAJBZxnbG9iYWwiOjgmBQlbBTsyMTU8AOBwcml2YXRlLW1lbW9yeZ8AHDIjAAF+BSs4MzkAAHUAAX4FIjQ2sAAwcnVuJAb+Fi1jb3VudGVyL2NwdS11c2FnZSI6ODEuNDA5MDgyMDYxMDMxNDMuAAqnAJ4yNC42MTIzNTIpACBnYxsFE3ArAZ85NC4xODIwOTYpAAByZW4tMC1nY5EAMSI6M1YBDKYAV2dlbi0xJgABXAEPJQABFzIlAAG/AQ8lAAEBcACfYnVkZ2V0Ijo3TAACsnRocmVhZHBvb2wtCwAEoAARN2IBDFYA8ARtb25pdG9yLWxvY2stY29udGVunwUENQAxODYyTAcMNwACWwABZgDxAXF1ZXVlLWxlbmd0aCI6MTAhAg8wAAj0AGNvbXBsZXRlZC1pdGVtc2oAbzE1NzUxM20AAv8GYWxsb2MtcmF0ZSI6MTkzMjYxOTA1KgADYGN0aXZlLSgCFHJZAB81TgEDYGMtZnJhZ5kHAdgG/gQiOjMyLjQxOTc2OTI1NDc3NDU1xgAB7QH/A21taXR0ZWQiOjEyMy4xMTM0N0YCACBleFUHB0kBMDk1MOECDRgB32ltZS1pbi1nYyI6MTciAAEAQQITMI4CUjEyMTk5vggMSQAAJwAUMScAbzE4ODE0OSIBAgAoABMyKABgMjA1MDc03AgOUAAzbG9oJgBfMTk0MTdMAAIVcCQAXzQyNTU3mQADhGFzc2VtYmx5jwEROMEEDL8Ao2lsLWJ5dGVzLWpdAV82Mzk0MksCAmRtZXRob2QqAARXAEA3ODQyyAAHWAoH8wNwL3N0ZWFkeaEEDCYAAGgEBB4AAFUCEH3HCQ/nCQjwCnsiaWQiOiJNai9KSFNJWnIvdz0iLCJuYW3tBvcJWyJNaWNyb3NvZnQuQ1NoYXJwLmRsbCIsFwDxCkV4dGVuc2lvbnMuQ2FjaGluZy5BYnN0cmEXCR9zMAAREU1MBQ8qAApxb25maWd1ctsCD2AAFwk2AG9CaW5kZXJmABe/Q29tbWFuZExpbmU1ABcPHgEJCY4AFkVJCxRW6goPZwAXR0ZpbGV5AQ92ABY/SW5pZQAXL0pz0QAZr1VzZXJTZWNyZXSQABg/WG1skAAJFESSDEJ5SW5qaAsP/QEWDzwAAQ8oAQi/RGlhZ25vc3RpY3NjABcHNAAPWwAIAK0BUFByb3ZpwwwPXQAWCjYAj0NvbXBvc2l0iwIKCjMAf1BoeXNpY2FhAQoAMgDvU3lzdGVtR2xvYmJpbmePAQkQSCABD+ADGAQwAA8cAQg/SHR0UwQKQExvZ2eWAA9TBBUEMAAKbQMPgQAIBzEAP3NvbF8BCgQrAE9EZWJ11QAKBCkAD3cAEH9FdmVudExvLAAXX1NvdXJjpwASX1RyYWNlLwAPIE9wIAkLnwQPXAQTBDsAkURhdGFBbm5vdJ8FDwwDCgQzAA8bAQhQUHJpbWn3CA4mAP4AVmlzdWFsQmFzaWMuQ29yBwEIIQAMYwBfV2luMzJeAAkCIQBlUmVnaXN0jwaDbXNjb3JsaWIYA7NuZXRzdGFuZGFyZBIAAj8DYS5BcHBDb44QChgAZEJ1ZmZlcssAAy0AU0NvbGxlIAebQ29uY3VycmVuOQAIJAACywAPPQAAUEltbXV0JhEPPAAHhU5vbkdlbmVyEgEPRwAAEFOzEVthbGl6ZdYAAXcErm5lbnRNb2RlbC7lAQVNAAkoAA8RAgMPLAADC9wACUgAAR4DnUJhc2VkQXN5bsEACSwADdkBD28AA7VUeXBlQ29udmVydA0IBSoACGUIC5gACB4EBTAABYICAxIAAPgAVS5Db21tOQcIGQAAHgA9U2V0XAMIJAAJdgAIlAYAXQIAVAkLDQIIIwAImAQEVAAHogYGKwAJFQQPKgAAAXcBBpUEDyIAAAA4BgMIEEpJbmZvfgIGaQCfcy5Qcm9jZXNzIQAHUVN0YWNrqwQPJAAHoVRleHRXcml0ZXIpAEBMaXN00gIPMQAIP29vbHQACAFGAA8FAQ0AJQAGEAcDBAEKnwE9cmF3IgAEFQANxgQDQgCSRHluYW1pYy5S/g8KxADPRm9ybWF0cy5Bc24xGgADNENib8MKA1EABDQAK1RhGQAA0gcA1AMBlQVQLkNhbGW3BAsXAQolAAnfAAobAA+2AgUgSU/xAgCYEwAEDGQuQnJvdGxkCgOiAAsjAAllAAscAABYAgM2AA8nAAkwWmlwKgAKIwEtSU8QAAAlAANPAAD7FCFzc0YDG291BAopAAx4AAdEAF5Ecml2ZfACCkAAD/kBBQomAFxXYXRjaMMC9AJJTy5Jc29sYXRlZFN0b3JhZ+EGA8QAI0lPKw1gTWFwcGVkmgAdc/QAdVBpcGVsaW5ODAY8AAAaAB9zCQEMAiQAAuQNBjoAklVubWFuYWdlZH8AW1N0cmVhKgFRTGlucS6mBW5FbnVtZXKVBgEiAAlaAAESACRFeD0CC3gAAR4Ae1BhcmFsbGWyAQEbAF5RdWVyeWcAAqMAChcBK05lXQcAEQAHewoD6gAFFgAH+gwLGwAPfAQDADkAO01haaYAABYAoE5hbWVSZXNvbHVmCQ6WAHBOZXR3b3JrVQIA+wMPJAACHVBlBABaAA9oAgUAHAAsUXXuBwAWAGVSZXF1ZXOfDQfaAI5TZWN1cml0eaAAAsIWQVNlbnQVBgujAQBWAAAiAGxpY2VQb2nCCAEeADZvY2sSDgdzAG1XZWJDbGn2CAA0AJZXZWJIZWFkZXIDCQ6ZAH9XZWJQcm94swAANFdlYnYAD2IACAQjAAmRAjBOdW0pCQ8WAAVcVmVjdG/MCSBPYpoOAiAJCU0AElAqFgEnCBVMQQoDAwEEHQAAFAgBlQR2YWN0U2VyabEFD0wAAitVclwFBEgABkkPC2EAABkAAS8DCVAAM1JlZoEKUC5EaXNwjQQPTgEAByYADz4ABTtFbWlbAwc1AAEdACFJTH8KD9wCAAwqAHBMaWdodHdlBgAK8AEIKQAGbhIPkwAFE03uEg9EAAYPmwcFB2cAACYKD/IGBQDPAwCEDTFzLlKmAgxoAAYeAAIKABFNOwULnQcEHQAicy7ZCAtFAAMdCGBDb21waWyAAwFkA3tzLlVuc2FmFgYESggNLQACDQ0fQ1sAAwo+AQNwAA/zAAYDIABNSGFuZHQGBIAAEEnGGCVvcKwAD2IAAgwlAJxKYXZhU2NyaXBGAgNyAAwwAANtAA8wBQYDIACNLkludHJpbnPMAwQgACBMb2EED6QAAw8GBAMEOgAPpgMIDyMAAwLVCR10BQ4PLgADDnsGDygAAw/FAgYDOQEKpwAABgQJ7AAF8gUPDwgIBSQAW0NsYWlt0QEGHQD/BXJ5cHRvZ3JhcGh5LkFsZ29yaXRoLgATHENfCw9VAAMkQ3MjEgPcBA8nAAMP4AADCZ8AXUVuY29kTgcPTwADb09wZW5TczcBBQlXAD9Qa2MeARIPtAEFD4EAA+xYNTA5Q2VydGlmaWNhdNAJDzQABB9tsQAFDx4BA3VQcmluY2lwJRQMYQEGIABvV2luZG935wAFAY4AIGVTdAMaZ1UDAw8EAiAHJFdlSBEFaQACPQgPJg4BRlRleHSyAXxDb2RlUGFnBwEKJQAJ5QAKGwAP2wQFCSYAHnOiAAEgAA6VAwEXAH9SZWd1bGFywgoGEVS7HAATAQ9mAwgGJQB7Q2hhbm5lbGQBBiAACt4ABVwAUU92ZXJsEQwKegEGOQBRUmF0ZUxVEwxxAwYkAEJUYXNryhNPZmxvd0oABQImAA+JAAQCHQAPaQEGBbEAAigAD9oLAweRAAEwAA+JAAYBHgA7UG9v8AIHQAAsaW3hBWNUcmFuc2F4EwrFAAgaADxMb2MRA5tWYWx1ZVR1cGw5Bw0vAgARAABZDE1VdGlsUQsPRAMCDZsFABEADrIJABYAAnAIDzEIAQAeAAryBQnfAAAfAFBYRG9jdR8eClMBARsAL21sHQAKBFoADFABATwAT1BhdGhTAAABFwAMdAADAQEyQmFzSAFRXSwicmXYGGNvcnlVcmycI/MGczovL2dpdGh1Yi5jb20vZG90bmV0BwAYIjEmAe0iD4EiAvgBIiwiY29tbWl0SGFzaCI6Is4i8xBhMTNhM2U4YWZiZGRjNzhiZjcxODk3MWYzNzZjIn0sER2/UWRCR1FqTFBtWjQRHQQVQUwjpS5BbnRpZm9yZ2V6DgY4HQgnAGB1dGhlbnTQBQ/LGg4PNwAHs0JlYXJlclRva2VueQEPbQARVUNvb2tpPwUPMgATBeAUDy8AEQI1EA8qABE1T0F1NAIPMAAGQm9yaXonAQ9ZAAwGKQBUUG9saWPrBg9ZAAIAJAtAb25lbmQTCTsAD2QACAc0AA8mABNARW5kcA4PDzAAFTVGb3IwCQ+2AA0AMQcFhwMPLQANAI0ED7MACiRuboYYD2AbCgeLAgJGAg9pAREFKA8PpgADCJcJAeULJG5hywUPMQAPUUtleURlXw8ARwMP4wAIgkRhdGFQcm905wAP5gAWCzcAD2EAFw39Bg/MAAIIlhcPkwAWBzQAD5AACQcnAM9IZWFsdGhDaGVja3MpBAkPTwAIoEhvc3RGaWx0ZXLGCA8pAAwAIwAPzwAVAFkAADAAD1MAEAPzAg9aABY/dG1s6QEWAKsHDy0AGwg1AwnqGQ/qAQIBYAAIMwAP8AAJBpAUD0wABw9hAhMBdwBvRmVhdHVy8gULASkAVVJlc3VsFxQPfAAGD9YeBQceBABPAACPCj9yaWR4AA8fc0YEDyBJZC4HH3TTBQoBrgkPKwYQCSgAN1JvdQ0LD/MAAgtHEg8kAAMvdmM+AhYBLACPcGlFeHBsb3LDBQsAKwAPfQcNAyQAD1ICCgAkAADLBA63HQ/OAAYPoAIIAE4AAKsGA8wQByQXD04ABgcvAC9Ybd8FCgBdAAmiAQ+JAAw1UmF6CRsPfwAGASUACDUODyoABnZUYWdIZWxwpBEPKgAGT1ZpZXdaAxFkT3V0cHV0EicPzgAID50NAA99AAIBzQAPxwUJAiEABC4SD3IACQIIGCBEZboqBLkbDzAACmRzcG9uc2XNAA+KBRUMOAAPYwARB0scDy8ACk93cml05QALA+IDD60AFgMwAA92AAgDiQYA5QQvU3l5AwoDKgA/SUlTsQEJBiYAAAEJL2dyzggOAzEAf0tlc3RyZWwjBA4LLwAP2gAPBFkAAQ4PMnBvcr8aGGQUHA+bAgILaQAGPwAHiBoPOQAbCp4ZDzwABAJyHg/XAAlgaWduYWxSoR4GkiEPTQADBSoAD/MMCwQoAA91ABAAdwogb2OIIA8qBQ2WU3RhdGljQXNzKRsPpQADASgACPYdDycAAgcAGw+nAAgyV2VipBAPFA4BB2YICkknYEtleVBlcoMADdkCBzQACOAKCYUKD40DCg9BABEM0QAHNAAPlQUGCCQAIGlsbBQDiillRW1iZWRkNxMGTQEHMgAFgggPGgICDykAAQC6Hw/9CAAHKwAJ6AYPEwEVCTUADwcBCAKPHAcZEw/XAAJfVmFsaWRwBAMHqQAxV2ViMhcPFwcBEUq1BCRyb5sXBmcABVwfAsUdArUBD+oRNElyYy4x0DQP5REsv3k1NUx2akZLREdj9i4EEUWBClBGcmFtZakfAXYoD7QBCw8xAAANsAEPJAAAQFJlbGEkIAMHDw8xARppZWZjb3JlGxNcOS4wLjEhAfYZNDgwNDgwYjU3Y2Q2ZTQzZmU1Y2FiMWI1NTJhYzBlZjkxN2JmM2ZlOAYTqlZKWWFSdnpVWVchARBEcRYC1BwPqgATAjEAM0xpYgoACa0AbDIuMS42Nq4ApmJkNGY3NWI1MTKQALl3Zm9KOHJmT3g5QbEBb05wZ3NxbFkBAqFQb3N0Z3JlU1FMtAQPrwATEW5QAANZATkucGevAFw5LjAuNK4A9hlmZDIzODA5NTdiZWU1Y2Q4NmYzMzY0NjZhZjM2YjA4YzAxNjNmMWE1zACqUkJ0ZWNtVkp1aMwAQFBsYXQPIhVC+zEPuQAYdmFzcG5ldC88AAm6ABAx8jgMugD2GTRmODk5ZGE4ZjQ1NDg3NzMwODA1Y2NiZmQ2Y2EwNGZjZmI5YzhkNjm6AJtYcGROYnFDL1e6AAGDCiFTbKseAPQCD2wBE+dEYW1pYW5FZHdhcmRzL0QACbsAXDAuOC4xuwD3GDY1ZmRlNTg3YWMyMzYzZDhhZjQ1Y2E1NTFlYjg0NWQxNDFhYmE3ZEECuVNFdHRNK29IZVlJQQIClgJPLkFPVG0BGAI1AAbVAklBT1QvtQAAcAEsNDi2AJc0ZjhjZDUwNjNTAao0M2wxYnVJYXkzbxYD2QIPTgEXA7oCAgcACY0AALcCAJ46CTQF9xg5N2RjMTczOWM2Y2Y1ODkwYWNmNDUwZjIwZjA0ZTY0YzE0YzdmZmS3ArlwMTg1RU5WaXVYa0IBBgIGCBkXL3BwBgIUA+YXAsACDc8EEDGqOw8ABj+/bHFTVUtwcVI1U1XMAAQyTkVU9AUPyQAdAxI2CYIBA8YAD5s7AwmXAQ+wGBcPpz////98S2xvYWSgPxVixQcK1EML3DkIkz4CNTwApUBAL2ZpcuwPAbARWyI6MTY1NwAAkwoFCEQRNF86B3EAEXAjGTFlLW1gOQBZABszQAABqz4ClzoHOAAAjQABqz4xMTMzMgDyCHdyay9ycHMvbWVhbiI6NTk2NjY1LjQ1GQCQdGhyb3VnaHB1wz1SODIuOTgYAPICbGF0ZW5jeS9tYXgiOjkuNDMXAAPOAKBzIjo5MDA5NDk4kwAAYQCzZXJyb3JzL2JhZHJxEktzIjowHgBic29ja2V0KwAHHgAEbAAgNTAVADI3ODdTAAQXACE3NYQ+CxYAIDkwFgAqNDQsAHs5OSI6Mi42LAAC+gBDMC44OJoBBFsADRkADygBAgHNAQ8pAQEBGQAFTAAGKgEBGAAPKwECCRoADy4BAQohAAkrAQEbAARuAAcsAQkYAAYtAQkXAAYuAQoXAAMvARB9hwYCeSkAtEIPTkb//6QwaHRt3D4PTkY1UmNvbm5lbiShIjo1MTIsImR1cuQPsCI6MTUsInRpbWVvNgXDbnVsbCwid2FybXVwGwDTaHJlYWRzIjozMiwicNIx9AAiOjEsInNjcmlwdCI6IiIMADFBcmfYIxNzFQAPxEYJ4XBhdGgiOiIvZm9ydHVuYg1jY3VzdG9trBECuwMAfgsSc51JD+pGXNB9LCJwcm9wZXJ0aWVzSgfDc2NlbmFyaW8iOiJGtAAEHw8AAkoDZBUBvAHwBnRwIiwiYnVpbGRJZCI6IjI3NTc2OTIOARQAYE51bWJlchgAgDAyNTA3MjQu1kYAdAtCYW5kLV8BoSJjcmFuayAtLWP1FBAgVAAAjCRCcmF3LpAksXVzZXJjb250ZW50myQNbg9kL21haW4vtgAQc4BKAcwPFi5fB08ueW1sZAAwAdYA7y9henVyZS5wcm9maWxlWgA0Br4AAkhCT3N0YXRkAD0CvgArY2m7AAR7ABQgoQIzIC0t3QBBIGdvbKkBTS1hcHAXACJvYQUADBkAcGRiLWRiIC00AATySyQuZs0TQCBuZXSTDQsgACBvcKQDUHMuY29sJTHbQ291bnRlcnMgdHJ1ZSsAAyMAF0Q6TQQnAAAMCgVLAGByZXVzZUKcAgEfAPAIIn19pkNoYW5nZcvA423q4UeuILFTdGFpA2BkRGV2aWGBANDLQLx59OkmEsunQXZlDTbyBMtBI5LAImCMb69SZWNvdmVyZWS7H/IJwKZMYWJlbHOSpFBlcmavcGVyZi1yZWdyIhnyB6ZPd25lcnORrHNlYmFzdGllbnJvc6d/AIdzlYmjSm9iqx8BSKJJZKzjD4alTmFtZXORuAlECt8PKK1Swick2SQ1AwIxAwEmAw3bDyCvUAIPM291c0Q6ELqGAQ0ZD3IyLjEwM65DHT0DKgATtSoACgkWFLJQABVD9CfzHNkoOTZhYzk1MmE3ODg2YjU2NWU4M2FjYzRjOWNlZjY1Njk1NGVkMDY4NrFiAAg8AAj9Sg8vKAkSqkcBX1R5cGUASgECCGEQA0oBFrVKAQddEAtHAR8hRwEHA1kQD0QBJw9uAQMPSQGMCKBGAkkBRtwA1LRLAQaeRibZLRYAYUV4dGVuc84DD74eBS/ZJy8AChFNPA1vLmRsbNkzKQADASwGA9kHDftGD40ABQk1AEJCaW5kTRcv2TJkABAAqQIHmUYv2SY0ABAAwAAfOygAEA+XRgUv2TU9ABAOlkYv2So3ABADlUYv2SssABAjSnPNAA8pARGDVXNlclNlY3JYHQ+NABIxWG1s7QEfOY0AAgXpBQ+RRggv2Sw7ABYAlgEfMS4AAwfIJw1UAh8kMwAOAFkAD68CAwCkAVFQcm92aZsbDVsAHzBbAAIKNQAxQ29ttC0B2Bov2S8yABAIi0YP5wEEAGMAAhUyCIpGDz8DBAQ+KA2/AB8gjQACBC8AT2RsbL0hAAMhdHTIHA9vAAQPhUYFL9kuTgACBC8ACjsfAJMBHygwAA0Eg0YP1AMEBFoABYJGD/EABAQoAAB0AB8pdAAKCIBGD7kCBARNAAErAAY2QQ8uAAwAP0EXZS4AHziHAAITT2sJCSsBB7UFAMEAD5MCAwQ6AA/gJgAPFQEEBDIAAFQAHyOOAAIKekYWviQAAko5CnhGH7kfAAMKOQBbV2luMzJYABa8OQACHwAIckaQrG1zY29ybGlihQRTr25ldHMXCgAQAB+1bEYCE7IWAAdqRiPZIRQAQ0NvbGyDDgB0BgdpRh+2IgAAABoBHyAYAAAJZkYPXAACgk5vbkdlbmVyAQEv2SJFAABQU3BlY2mqKRFlzAAl2SUkAA9jRgkv2SknAAMP9wEAH7kqAAMA1QAPRQAEAdICCl9GL9kkRgADCsMBL9knJgADAAgKCV1GFbgoAAtbRgS1AQf0AxWvLAARcloFBKIBAOsAB8MkBYABARgAAAUADVRGBEoAAB0AAWwBBNUBCFYGCVFGE7x8AAghAAZlBATuAAkeAAVLAAblAx+/RgAAAWQBIkxvjAQfJiEAAAD5BQPdCwRLRh++JwAAByM4BgIBBYQADEhGL9kuQwAAD0dGCA8AAQFCVG9vbBQDBM8CCAABC+AED7MAAQAjACFpbvoAE6qPAAf6AQQpRgCVBgMeAAQTAAptAhS6HgAOOkYTtxsAAmgrBjhGDBgABDZGBFMCBDAAMVRhciACBOEAAHsHAKMDAYAOCjNGBMoCCiMAAF0DEyOFAAoaAAvFBQSCAiBJT8sCE3CbDgcvRgS+AwshAABhAASTAwsbAAA5AgN7AAAmAATzBAsmADBaaXApAADnABOtLgACKUYFjQIKmUUNqjkE+QAKJwAAcgAENgEKGgAJJUYFHQEKJAAK4QEIHQEArAADpwAHI0YTvRMADyFGAwR3Aw8fRgUEDgID30UA7BIC2AIHMwEC5CkN/QAWs3kAAiIAAPgAB9QADxlGBgSUAA8XRgUEowQBIABDZGxsu2kAARAACxNGBIIBARwACDc6BDQCARkACQ9GE7FPAAa+DROuEgAAniYH2QAADwAE/gkEaAAFFAAEbQwEnQAEGQAIgUoEIgEAHAAEA0YErwEAFABATmFtZe1BBgFGBb8EAR8ADwBGAghVABNQQwQE7QAANgAKQAIILgAEcisE9AEALgAI+EUIGAAI9kUEsAEAMAACzytBU2VudL0FAfUBCAMBACAAcWljZVBvaW5MAQRWBAE8AAGgGwEzAAhPAQnuRQUfCAAxADJXZWJ8FgarCACsAwioAAjrRQUsAwM8AAQpLAbqRQgoAQchAAj0ASB1baoIARQABdgABBQAB+RFBNgAAlMpBU4IBJAFElBeHQGwBxJMsQkj2SxmAgQcAACCBwRpBw3fRQRgAAQtAAPdRQwXAAOSDgSqAAQuAAAXAAH5AgiTAzNSZWbwCQ7YRQQ+CgckAAfOAAcWAATURQXmCAwcACFJTO0JAiYGAH8ABEsFDCkAC9JFBb0BCCgABqIRADsLA0ABByEACIgzD0EAAQq1CwUtBgdCAACWCQqPBgRMAQCZAwzLRQdCAAYdAAIKABFN7AQBMwcOQgBDV3JpdMURFCrGAALiXQHyBiBpbFMDATkDCMdFL9krLAANAnwMEEMVAwQ1CgRYAAdrBAQTAAroAAXdAQMxAAfARQWFAwQ6ABBJ5RYlb3CkAADYARstnQAMJAAKvkUv2TUvAAwDawAA5wklcm0+Ah69NgAHu0UEzwMDPAAHuUUbuzgABcMDALoABFMHBDcADX0DDXkBCiIAEUaiACJ0ZcY6Ba0MD08AAwQoBg9UAAwPqgIFAyYCCoEAAN8DAMkABKQHBa0FDaQHBOUBBSIAQkNsYWlRPAWRAAYcAA+uRQcF+QIPLQADA61FDyYADRJzSREEgAEPTAADANkAEym/AQ8iAAMBeC4D+gYv2SgrAAoHqUUFqAEPVQADBKhFDxcBDAuoAR8xfgAKD6ZFAQ8kAQwD2wEEtwcFrAAHzwMFFAAJoUUO3wAGHwBqV2luZG93/QIFRgABCQBDZVN0clIBBDsDD51FAQRxAwMcAAh4DRMiCgEASQ0GogEJmkUE9QcKIwAA8AEfIz0AAgqwBAQLBAk+AAGIMAD/BBi0QgAFdAMJlQB7UmVndWxhckEKBiQAQWhyZWEBSA1GAwV7AAUjAADbGQSPRQV7AAUeAAc0CQYVAAqLRQXpCQYhAAztNwUgDAYjAA6JRQThAwwkAABWARQlFAEFhAACQAAKWAEPZwAGCE4LBBUCB2cAAVUAAHsBBB8KDBwABGgyD6MAACJpbQ4HBMoJARY2E2GMEgfrAgkYADJMb2MAMQStCAp5RQTFCyFXZSATBHYAAA8AAMULB3VFBCsHBxcDBD0AC38DAA8ABEgJBAMBABQADG1FBCMQABwACqsFB/cCAB0AYFhEb2N1bSIgB18JARkACmdFCFEANFhtbFQAAjYBBHECATgAAUxFB2UQBhUACWwAE6/tADFCYXMcCAtTHB8gUxwHAqEdDFIcG6B8HRO6fB0PvywAD4EdAB+gWB00HwGiHgIInkUQpWQNSHPcAGUZGQilHgqdRSbZNIEVCCYAD5xFCwj+Gw82AAcLm0UIHRkPNQAHQ0Nvb2uGNwg8Gg8xAAkCIhQv2SfKABEAJwQHEx0PVwAHMk9BdWgCCH4YCy8ARW9yaXq6CQ9XAAgGKABRUG9saWPdBi/ZMa8AAgFPGlFuZW50c4QBBjoAALkAB6kXB4oABzMAACUAD4cAAwclAEBFbmRwrg4CLwAfKYcADQWRRQi/HA9/AAMAJgcCsgMPjQEEB4YAAKcEAK8ADwcBBSRubqsXDdgaHyWzAAQAOQIGYQEH3RoJrgADxQofLkUAAwgSCgHhCxJugwUP8gIECTAADYlFD10DBAAIDwAROwLhAA7gAA/JAgMLNgAAPAEH9x0H4wALKQAL/QYPcAEDUERpYWdu0WIfY3ABAA9JBAMIMwAAjQAPWQAPCf46ACgGD4MBAgBMAAfFHwfZAA2ARQ9zAwQAKAAA3AkNWQEHIBwLVwAALwAAeQAPDgUDBFEAA+ACDVgADxkDA05IdG1s3QEPLAAFD3tFAC/ZMCEBAgEsAAghAwcPGQ/OAwMNMgAPHwMGASoAAAkBB50dCCsBAB0UC1ECD6wBBAAqAAh1RQ+2AwQBcQACuSUBlwAPtgYEACcABHsdAJ8AD3UABwB2CgVyRQ9OAAgWcyoEL9khaAECBe48AHEAD74AAwGiCQ8EBg8JJwAHbkUPeQAECeURD9IBAwFARQxeIw+0AQMBKwAKa0UPeAAFJnZjTgcPFAEDAE0ABUMFHyw3AQIAIwAAgwQLaEUH6R0HUQIALQAAXwEPSwAHAH8GA3wQIkpzDxUIHCMLTAAHLgAAGAoAWwAPQQEHCZcBACsAHyLRAAYFcEQP2QYEAMgAASQABWFFDykACApgRQ+hAAhJVmlld0QDD/cCAw1eRQ9sAwQMcA0fvu8AAgHHAADnDA/5CAQCIAAE/BEANwEPcggDA2kXDVlFCD0lB74BE1LnMkBDYWNojgUNZQUP3gIDDDcAAJAAD00CAwUqAAdyGwAuAA8VBgNvUmV3cml04AAKAyRFDakAD1EABAMvAABzAB8neQECA14GAOsEIlN5DQUP8QkDAykAMUlJU6cBHy5OAAkwSUlTxwgSZ2svATAADx8BAwNVAAxPRQ/HAgQLLgAA1QAfPIcACQRXAA9NRQUv2TY+ABsE2hkImiYHTQILnwAGdgAEIhkAsQAPqAEDElMoLAEqAQ+oAQRgaWduYWxSyRYEhiAPHgYDBikAA6IMD3IABAMnAACUAA8jDQMESQAANQoKRkUP6gMEDEVFDwgHBAInAABmHQISAQ9vAgMKOBoPcgAEDEJFCN8MBzEICuspCkFFJtk+BAIHMwAIaAoJQgoNeQMfMUAAGwBwAQfmBgdzAAl0BQeTAQgjAAk6KAg9RQg3BQcxAAVOCAUOAgfRBA8oAAFSU3RvcmWmAAfoCwcqAAl9CA0NAQeTAg80AAUAAQEH8wEHJwAKOEUPJQAECjdFCGMCB0oACzZFFrejARFKmQQDNEUHiwYFhR4CCh0BAgEPvRE9E7W9EQpCRQ+4EV60ZG4rM1RwVjFaUkG4ESgBOUkBB9MED7gR//////////////////9iD0U8/+kPPxMDD7ITCg+ZEgMKMwAPeDzrD9QUgw8OPXgJOxUPbBURDz89lgetGwcRFQ8IFoQHxBsHrQBPTG9nZ40bAgd0Gg8vAAAKAQQAZxYP7BYDBF8AB/g5Dz4XBAQqAAaHOQdMGQ+CAAAAdAAHWB0PIgAACYs5BxMbDysABQbZOQiXJg8uAAAA6TgXZS4ADz0XAwtiFw8RPp8PFRhvBzQYAhcyD5M+///////////////////////////xE7rGLAqDPg8pXAEfoNssAA8UXCnQoKpDaGFuZ2VUeXBlAg==[/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/62943","RelatedDescription":"Open issue \"Perf regression: fortunes\" (#62943)"},{"Id":"3266040721","IsPullRequest":false,"CreatedAt":"2025-07-26T19:28:16","Actor":"pr-benchmarks[bot]","Number":"62942","RawContent":null,"Title":"Perf improvement: antiforgery-noop, mvc","State":"open","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| antiforgery-noop  | Antiforgery No Operation 8- Trends Cobalt Cloud Linux AL3 | 07/25/2025 12:44:41 | 546,805 | 591,868 | 8.24 % (45,063)  :thumbsup:  | 2.60 σ | 17,337.78 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25373.104` -> `10.0.0-rc.1.25374.102`</td>            <td>https://github.com/dotnet/aspnetcore/compare/c0e325f90fb79db0da6be5128dc292f2aabb264f...87e4c823cc62a13a3e8afbddc78bf718971f376c</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25373.104` -> `10.0.0-preview.7.25374.102`</td>            <td>https://github.com/dotnet/runtime/compare/c0e325f90fb79db0da6be5128dc292f2aabb264f...87e4c823cc62a13a3e8afbddc78bf718971f376c</td></tr><tr>            <td>Microsoft.CSharp.dll</td>            <td>`10.0.0-preview.7.25374.102` (__New__ )</td>            <td>n/a</td></tr><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-rc.1.25374.102` (__New__ )</td>            <td>n/a</td></tr><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25373.104` (__Removed__)</td>            <td>n/a</td></tr></table></details> |\n| mvc  | Json Mvc 8- Trends Cobalt Cloud Linux AL3 | 07/25/2025 12:40:01 | 359,292 | 397,090 | 10.52 % (37,798)  :thumbsup:  | 3.29 σ | 11,483.92 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25373.104` -> `10.0.0-rc.1.25374.102`</td>            <td>https://github.com/dotnet/aspnetcore/compare/c0e325f90fb79db0da6be5128dc292f2aabb264f...87e4c823cc62a13a3e8afbddc78bf718971f376c</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25373.104` -> `10.0.0-preview.7.25374.102`</td>            <td>https://github.com/dotnet/runtime/compare/c0e325f90fb79db0da6be5128dc292f2aabb264f...87e4c823cc62a13a3e8afbddc78bf718971f376c</td></tr><tr>            <td>Microsoft.CSharp.dll</td>            <td>`10.0.0-preview.7.25374.102` (__New__ )</td>            <td>n/a</td></tr><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-rc.1.25374.102` (__New__ )</td>            <td>n/a</td></tr><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25373.104` (__Removed__)</td>            <td>n/a</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/62942","RelatedDescription":"Open issue \"Perf improvement: antiforgery-noop, mvc\" (#62942)"},{"Id":"3264192658","IsPullRequest":false,"CreatedAt":"2025-07-26T19:28:15","Actor":"pr-benchmarks[bot]","Number":"62933","RawContent":null,"Title":"Perf improvement: fortunes_ef, json_middleware","State":"closed","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| fortunes_ef [Fixed] | Fortunes Platform EF 8- Trends Database Gold Lin | 07/24/2025 19:58:11 | 589,944 | 603,664 | 2.33 % (13,720)  :thumbsup:  | 2.12 σ | 6,461.83 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25372.103` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/dotnet/compare/96ac952a7886b565e83acc4c9cef656954ed0686...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25372.103` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/aspnetcore/compare/96ac952a7886b565e83acc4c9cef656954ed0686...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25372.103` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/runtime/compare/96ac952a7886b565e83acc4c9cef656954ed0686...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr></table></details> |\n| json_middleware [Fixed] | Json 400k 8- Trends Cobalt Cloud Linux AL3 | 07/24/2025 12:20:21 | 4,382 | 4,386 | 0.11 % (5)  :thumbsup:  | 2.68 σ | 1.84 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25368.105` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/dotnet/compare/1c92f346e02a8363def6f7bdbcc526d3c579dd74...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25368.105` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/aspnetcore/compare/1c92f346e02a8363def6f7bdbcc526d3c579dd74...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25368.105` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/runtime/compare/1c92f346e02a8363def6f7bdbcc526d3c579dd74...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK]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ZGE2YmU1MTI4ZGMyOTJmMmFhYmIyNjRmIn0sSS6/eTU1THZqRktER2NJLgSwRW50aXR5RnJhbWXEDQF4LQ9WGQsPMQAAAmsPBp4uD1UAAUBSZWxhPw4DlgIPNgEaaWVmY29yZTYBXDkuMC4xIQH2GTQ4MDQ4MGI1N2NkNmU0M2ZlNWNhYjFiNTUyYWMwZWY5MTdiZjNmZTghAapWSllhUnZ6VVlXIQEQRIwEAu8KD6oAEwIxADNMaWIKAAmtAGwyLjEuNjauAKZiZDRmNzViNTEykACqd2ZvSjhyZk94Ofovb05wZ3NxbH0BAqFQb3N0Z3JlU1FM7wMPrwATEW5QAANZATkucGevAFw5LjAuNK4A9hlmZDIzODA5NTdiZWU1Y2Q4NmYzMzY0NjZhZjM2YjA4YzAxNjNmMWE1zACqUkJ0ZWNtVkp1aMwAQFBsYXQqEINCZW5jaG1hciIsD7kAE3Zhc3BuZXQvPAAJugAQMUw4DLoA9hk0Zjg5OWRhOGY0NTQ4NzczMDgwNWNjYmZkNmNhMDRmY2ZiOWM4ZDY5ugCbWHBkTmJxQy9XugBxUmF6b3JTbMYMAPQCD7MAE+dEYW1pYW5FZHdhcmRzL0QACbsAXDAuOC4xuwD3GDY1ZmRlNTg3YWMyMzYzZDhhZjQ1Y2E1NTFlYjg0NWQxNDFhYmE3ZEECuVNFdHRNK29IZVlJ8gMClgJPLkFPVCYCGAI1AAbVAklBT1QvtQAAcAEsNDi2AJc0ZjhjZDUwNjNTAbk0M2wxYnVJYXkzNJgAA9kCD04BFwO6AgIHAAmNAAC3AgD4OQk0BfcYOTdkYzE3MzljNmNmNTg5MGFjZjQ1MGYyMGYwNGU2NGMxNGM3ZmZktwK5cDE4NUVOVml1WGuqAAbfBBVBvzkAMhsPBgIUAwEGAsACDc8EEDEEOw8FBkS/bHFTVUtwcVI1U1XRAAQyTkVU+QUPzgAdA+A1CYcBD8sAQQ8GP////3xLbG9hZP8+FWLKBwozQw8OOQARZ9EbSyI6MzUdAAB+CgVNQxw0STkMxDk7MzYzQAABwzkuMjIWAALDOSIxMhwAgGh0dHAvZmlyxywBiy4AzDwgODA3APIId3JrL3Jwcy9tZWFuIjo2MDM2NjQuMTYZAPUAdGhyb3VnaHB1dCI6NzkyGADyAmxhdGVuY3kvbWF4Ijo4LjQ4LwADXQCV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[/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/62933","RelatedDescription":"Closed issue \"Perf improvement: fortunes_ef, json_middleware\" (#62933)"},{"Id":"3265270006","IsPullRequest":false,"CreatedAt":"2025-07-26T19:28:14","Actor":"pr-benchmarks[bot]","Number":"62939","RawContent":null,"Title":"Perf regression: multiple_queries","State":"closed","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| multiple_queries [Fixed] | Multiple Queries Minimal APIs 8- Trends Database Gold Win | 07/25/2025 06:35:25 | 39,738 | 36,415 | -8.36 % (-3,323)  :thumbsdown:  | -2.97 σ | 1,120.49 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25372.103` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/dotnet/compare/96ac952a7886b565e83acc4c9cef656954ed0686...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25372.103` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/aspnetcore/compare/96ac952a7886b565e83acc4c9cef656954ed0686...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25372.103` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/runtime/compare/96ac952a7886b565e83acc4c9cef656954ed0686...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/62939","RelatedDescription":"Closed issue \"Perf regression: multiple_queries\" (#62939)"},{"Id":"3266272447","IsPullRequest":false,"CreatedAt":"2025-07-26T17:44:24","Actor":"imprathamesh","Number":"62948","RawContent":null,"Title":"HttpContext in Blazor Web App .net 8 Render Interactive Auto Stay null in production","State":"open","Body":"Hello, \nI have created project in Blazor Web App .Net 8 Render Interactive Auto. \nI am authorizing the app via idp\n\nso sequence of process goes like this: \n1. visit client app\n2. Redirect to idp provider \n3. Successfully login created access token and claims\n4. Redirect to client app with access token\n5. DelegatingHandler as AuthorizationHandler in Server Side. It used to add Access token into data Header to access the secured api controllers. So I use httpContextAccessor (HttpContext) \n6. here it throwing the errro HttpContext is null. \n7. in browser console showing WebSocket has issue. \n\nand this issue I only facing in production. In development it works fine. \n\nI refer the authorization from \n\nhttps://github.com/mohaaron/CustomAuthorizationHandler\nBlazorWebApp/Services/ServerTokenHandler.cs this is the path . I named AuthorizationHandler.\n\nHere is my code, please check- \n\n`public class AuthorizationHandler(IHttpContextAccessor httpContextAccessor) : DelegatingHandler\n\n{\n\nprivate readonly IHttpContextAccessor _httpContextAccessor = httpContextAccessor ?? throw new ArgumentNullException(nameof(httpContextAccessor));\n\nprotected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n\n{\n\n    var httpContext = _httpContextAccessor.HttpContext ??\n\n        throw new InvalidOperationException(\"No HttpContext available from the IHttpContextAccessor!\");\n\n    if (httpContext != null && httpContext.Request.Cookies.TryGetValue(\"access_token\", out var token))\n\n    {\n\n        request.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n    }\n\n    return await base.SendAsync(request, cancellationToken);\n\n} }\n```program.cs\n\nservices.AddTransient<AuthorizationHandler>();\n\n var httpClientBuilder = services.AddHttpClient(\"ApiClient\", client =>\n\n { client.BaseAddress = new Uri(\"https://localhost:7067/\"); }).AddHttpMessageHandler<AuthorizationHandler>();   \n\n`\nPlease help me upon this, this is really exhausting when it working in development and not in production.","Url":"https://github.com/dotnet/aspnetcore/issues/62948","RelatedDescription":"Open issue \"HttpContext in Blazor Web App .net 8 Render Interactive Auto Stay null in production\" (#62948)"},{"Id":"3265738971","IsPullRequest":false,"CreatedAt":"2025-07-26T14:24:14","Actor":"luoxing66","Number":"62941","RawContent":null,"Title":"[XmlCommentGenerator] AddOpenApi cannot recognize the entry assembly","State":"open","Body":"### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen using xml document generation, you must call 'AddOpenApi()' in the entry project to load all projects correctly. If you call it in other projects, the entry project xml cannot be loaded.\n\n### Expected Behavior\n\nI hope to automatically load all project xml of the solution\n\n### Steps To Reproduce\n\nhttps://github.com/luoxing66/AddOpenApiFeat\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n10.0.100-preview.5.25277.114\n\n### Anything else?\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/62941","RelatedDescription":"Open issue \"[XmlCommentGenerator] AddOpenApi cannot recognize the entry assembly\" (#62941)"},{"Id":"3262643349","IsPullRequest":false,"CreatedAt":"2025-07-26T13:12:32","Actor":"marcominerva","Number":"62922","RawContent":null,"Title":"Incorrect OpenAPI schema for the Range attribute when using a culture different from en-US","State":"closed","Body":"### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nI'm working on a PC that uses Italian Culture (it-IT). The following code:\n\n```\nbuilder.Services.AddValidation();\n\n// ...\n\napp.MapPost(\"/api/range\", (Input input, [Range(42.1, 89.8)] double value) =>\n{\n    return TypedResults.Ok();\n});\n\napp.Run();\n\npublic record Input \n{\n    [Required]\n    [Range(1234.56, 7891.1)]\n    public double Value { get; set; }    \n}\n```\n\nProduces incorrect OpenAPI schemas because it does not take regional settings into account (e.g., minimum and maximum values):\n\n```json\n\"parameters\": [\n    {\n      \"name\": \"value\",\n      \"in\": \"query\",\n      \"required\": true,\n      \"schema\": {\n        \"maximum\": 898,\n        \"minimum\": 421,\n        \"pattern\": \"^-?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?$\",\n        \"type\": [\n          \"number\",\n          \"string\"\n        ],\n        \"format\": \"double\"\n      }\n    }\n```\n\n```json\n\"schemas\": {\n    \"Input\": {\n      \"required\": [\n        \"value\"\n      ],\n      \"type\": \"object\",\n      \"properties\": {\n        \"value\": {\n          \"maximum\": 78911,\n          \"minimum\": 123456,\n          \"pattern\": \"^-?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?$\",\n          \"type\": [\n            \"number\",\n            \"string\"\n          ],\n          \"format\": \"double\"\n        }\n      }\n    }\n}\n```\n\nIn fact, the test [GetOpenApiParameters_HandlesRouteParameterWithValidationAttributes](https://github.com/dotnet/aspnetcore/blob/b83721c533d796c9b445d1406b9f1aeccf9531be/src/OpenApi/test/Microsoft.AspNetCore.OpenApi.Tests/Services/OpenApiSchemaService/OpenApiSchemaService.ParameterSchemas.cs#L352) fails on my Italian machine, in particular on this assert:\n\nhttps://github.com/dotnet/aspnetcore/blob/b83721c533d796c9b445d1406b9f1aeccf9531be/src/OpenApi/test/Microsoft.AspNetCore.OpenApi.Tests/Services/OpenApiSchemaService/OpenApiSchemaService.ParameterSchemas.cs#L340\n\n### Expected Behavior\n\nMinimum and maximum values should be correctly set in the OpenAPI schema even when the culture used is different from en-US.\n\n### Steps To Reproduce\n\nMinimal repro at https://github.com/marcominerva/RangeAttributeIssue\n\n### .NET Version\n\n10.0.100-preview.6.25358.103","Url":"https://github.com/dotnet/aspnetcore/issues/62922","RelatedDescription":"Closed issue \"Incorrect OpenAPI schema for the Range attribute when using a culture different from en-US\" (#62922)"},{"Id":"3265325578","IsPullRequest":true,"CreatedAt":"2025-07-26T08:15:05","Actor":"WeihanLi","Number":"62940","RawContent":null,"Title":"fix SignalR http2 SkipNegotiation error","State":"open","Body":"# fix SignalR http2 SkipNegotiation error\r\n\r\n<!-- Thank you for submitting a pull request to our repo. -->\r\n\r\n<!-- If this is your first PR in the ASP.NET Core repo, please run through the checklist\r\nbelow to ensure a smooth review and merge process for your PR. -->\r\n\r\n- [ ] You've read the [Contributor Guide](https://github.com/dotnet/aspnetcore/blob/main/CONTRIBUTING.md) and [Code of Conduct](https://github.com/dotnet/aspnetcore/blob/main/CODE-OF-CONDUCT.md).\r\n- [ ] You've included unit or integration tests for your change, where applicable.\r\n- [ ] You've included inline docs for your change, where applicable.\r\n- [ ] There's an open issue for the PR that you are making. If you'd like to propose a new feature or change, please open an issue to discuss the change or find an existing issue.\r\n\r\n## Description\r\n\r\nCreating `HttpClient` for WebSocket `SkipNegotiation` mode also\r\n\r\nFixes #59303\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/62940","RelatedDescription":"Open PR \"fix SignalR http2 SkipNegotiation error\" (#62940)"},{"Id":"3265269999","IsPullRequest":false,"CreatedAt":"2025-07-26T07:13:19","Actor":"pr-benchmarks[bot]","Number":"62938","RawContent":null,"Title":"Perf improvement: json","State":"open","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| json  | Json HttpSys 6- Trends Intel Win | 07/25/2025 02:37:04 | 477,473 | 495,729 | 3.82 % (18,256)  :thumbsup:  | 2.82 σ | 6,471.15 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25372.103` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/dotnet/compare/96ac952a7886b565e83acc4c9cef656954ed0686...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25372.103` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/aspnetcore/compare/96ac952a7886b565e83acc4c9cef656954ed0686...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25372.103` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/runtime/compare/96ac952a7886b565e83acc4c9cef656954ed0686...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/62938","RelatedDescription":"Open issue \"Perf improvement: json\" (#62938)"},{"Id":"3264873436","IsPullRequest":true,"CreatedAt":"2025-07-26T03:31:07","Actor":"dotnet-maestro[bot]","Number":"62937","RawContent":null,"Title":"[main] Source code updates from dotnet/dotnet","State":"closed","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:227fbda2-94d8-406e-91e6-26cb20b6628c)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [227fbda2-94d8-406e-91e6-26cb20b6628c](https://maestro.dot.net/subscriptions?search=227fbda2-94d8-406e-91e6-26cb20b6628c)\n- **Build**: [20250725.6](https://dev.azure.com/dnceng/internal/_build/results?buildId=2758127)\n- **Date Produced**: July 25, 2025 10:03:00 PM UTC\n- **Commit**: [2dfd0aa278fc5a46c7f5e881584d0895aaac68fc](https://github.com/dotnet/dotnet/commit/2dfd0aa278fc5a46c7f5e881584d0895aaac68fc)\n- **Commit Diff**: [87e4c82...2dfd0aa](https://github.com/dotnet/dotnet/compare/87e4c823cc62a13a3e8afbddc78bf718971f376c...2dfd0aa278fc5a46c7f5e881584d0895aaac68fc)\n- **Branch**: main\n\n**Updated Dependencies**\n- From [10.0.0-preview.7.25374.102 to 10.0.0-preview.7.25375.106][1]\n  - Microsoft.Bcl.AsyncInterfaces\n  - Microsoft.Bcl.TimeProvider\n  - Microsoft.Extensions.Caching.Abstractions\n  - Microsoft.Extensions.Caching.Memory\n  - Microsoft.Extensions.Configuration\n  - Microsoft.Extensions.Configuration.Abstractions\n  - Microsoft.Extensions.Configuration.Binder\n  - Microsoft.Extensions.Configuration.CommandLine\n  - Microsoft.Extensions.Configuration.EnvironmentVariables\n  - Microsoft.Extensions.Configuration.FileExtensions\n  - Microsoft.Extensions.Configuration.Ini\n  - Microsoft.Extensions.Configuration.Json\n  - Microsoft.Extensions.Configuration.UserSecrets\n  - Microsoft.Extensions.Configuration.Xml\n  - Microsoft.Extensions.DependencyInjection\n  - Microsoft.Extensions.DependencyInjection.Abstractions\n  - Microsoft.Extensions.DependencyModel\n  - Microsoft.Extensions.Diagnostics\n  - Microsoft.Extensions.Diagnostics.Abstractions\n  - Microsoft.Extensions.FileProviders.Abstractions\n  - Microsoft.Extensions.FileProviders.Composite\n  - Microsoft.Extensions.FileProviders.Physical\n  - Microsoft.Extensions.FileSystemGlobbing\n  - Microsoft.Extensions.HostFactoryResolver.Sources\n  - Microsoft.Extensions.Hosting\n  - Microsoft.Extensions.Hosting.Abstractions\n  - Microsoft.Extensions.Http\n  - Microsoft.Extensions.Logging\n  - Microsoft.Extensions.Logging.Abstractions\n  - Microsoft.Extensions.Logging.Configuration\n  - Microsoft.Extensions.Logging.Console\n  - Microsoft.Extensions.Logging.Debug\n  - Microsoft.Extensions.Logging.EventLog\n  - Microsoft.Extensions.Logging.EventSource\n  - Microsoft.Extensions.Logging.TraceSource\n  - Microsoft.Extensions.Options\n  - Microsoft.Extensions.Options.ConfigurationExtensions\n  - Microsoft.Extensions.Options.DataAnnotations\n  - Microsoft.Extensions.Primitives\n  - Microsoft.Internal.Runtime.AspNetCore.Transport\n  - Microsoft.NET.Runtime.MonoAOTCompiler.Task\n  - Microsoft.NET.Runtime.WebAssembly.Sdk\n  - Microsoft.NETCore.App.Ref\n  - Microsoft.NETCore.BrowserDebugHost.Transport\n  - Microsoft.NETCore.Platforms\n  - System.Collections.Immutable\n  - System.Composition\n  - System.Configuration.ConfigurationManager\n  - System.Diagnostics.DiagnosticSource\n  - System.Diagnostics.EventLog\n  - System.Diagnostics.PerformanceCounter\n  - System.DirectoryServices.Protocols\n  - System.Formats.Asn1\n  - System.Formats.Cbor\n  - System.IO.Hashing\n  - System.IO.Pipelines\n  - System.Memory.Data\n  - System.Net.Http.Json\n  - System.Net.Http.WinHttpHandler\n  - System.Net.ServerSentEvents\n  - System.Numerics.Tensors\n  - System.Reflection.Metadata\n  - System.Resources.Extensions\n  - System.Runtime.Caching\n  - System.Security.Cryptography.Pkcs\n  - System.Security.Cryptography.Xml\n  - System.Security.Permissions\n  - System.ServiceProcess.ServiceController\n  - System.Text.Encodings.Web\n  - System.Text.Json\n  - System.Threading.AccessControl\n  - System.Threading.Channels\n  - System.Threading.RateLimiting\n- From [10.0.0-preview.7.25374.102 to 10.0.0-rc.1.25375.106][1]\n  - dotnet-ef\n  - Microsoft.EntityFrameworkCore\n  - Microsoft.EntityFrameworkCore.Design\n  - Microsoft.EntityFrameworkCore.InMemory\n  - Microsoft.EntityFrameworkCore.Relational\n  - Microsoft.EntityFrameworkCore.Sqlite\n  - Microsoft.EntityFrameworkCore.SqlServer\n  - Microsoft.EntityFrameworkCore.Tools\n- From [10.0.0-beta.25374.102 to 10.0.0-beta.25375.106][1]\n  - Microsoft.DotNet.Arcade.Sdk\n  - Microsoft.DotNet.Build.Tasks.Archives\n  - Microsoft.DotNet.Build.Tasks.Installers\n  - Microsoft.DotNet.Build.Tasks.Templating\n  - Microsoft.DotNet.Helix.Sdk\n  - Microsoft.DotNet.RemoteExecutor\n  - Microsoft.DotNet.SharedFramework.Sdk\n- From [3.2.0-preview.25374.102 to 3.2.0-preview.25375.106][1]\n  - Microsoft.Web.Xdt\n\n[marker]: <> (End:227fbda2-94d8-406e-91e6-26cb20b6628c)\n\n[1]: https://github.com/dotnet/dotnet/compare/87e4c823cc...2dfd0aa278\n[marker]: <> (Start:Footer:CodeFlow PR)\n\n## Associated changes in source repos\n- https://github.com/dotnet/arcade/compare/2586309f3f8553152e2d1d54612e9199975f9cd4...0fbc9e8711fa91e68c2bf3db376fb83b46f4ac35\n- https://github.com/dotnet/command-line-api/compare/dbc3781d3398b69cd9ffe24f60a7b77110bdadbf...3a3e014313d2c1bddc01b4333886783a7492c652\n- https://github.com/dotnet/diagnostics/compare/790647464027d129ad72b901d25ecaba8474e9c6...d7d850097b755b343851f9c5b93325aacb8323aa\n- https://github.com/dotnet/efcore/compare/4ff0eb02aba1c4e9e1fd59c62441168a5a8fc5e0...cb3e343b2ca25dbf34f9b6d9f2544cdae73f7481\n- https://github.com/dotnet/fsharp/compare/a69caee31bd0c35ebd11ba4ccfa4c6297a42cd69...7dd51e626b3787b69d3933a33cf2ce23fc36c576\n- https://github.com/dotnet/msbuild/compare/41f5988ea12bf1eb2dfbbeafc410410737b18e3c...1f60126fb517e342dd563e50bb3cb52f8109f837\n- https://github.com/dotnet/sdk/compare/2f666ecda03b5b6c669b9728e9f35315af6edf96...049672a7df90f87cfead427665edc37c37c22ed1\n- https://github.com/microsoft/vstest/compare/f97214fe5fd493b90959165c6db77f878bcb60bd...dbcd471883202088496ab81d3ec2d3f3be0981b5\n- https://github.com/dotnet/winforms/compare/37effbf08c5f46603cd0aefb26538de521338a9c...91ebb7421e6248f425c79169c448246150bd4c39\n- https://github.com/dotnet/xdt/compare/d1231b22ac3ba77f8a7e506b10d922f6f7ace210...3ae5c14d94509e8ffed62d10685ca4a4159754df\n\n[marker]: <> (End:Footer:CodeFlow PR)","Url":"https://github.com/dotnet/aspnetcore/pull/62937","RelatedDescription":"Closed or merged PR \"[main] Source code updates from dotnet/dotnet\" (#62937)"},{"Id":"3264535122","IsPullRequest":true,"CreatedAt":"2025-07-25T22:26:23","Actor":"sebastienros","Number":"62936","RawContent":null,"Title":"Update SignalR Redis tests to use internal Docker Hub mirror","State":"open","Body":"Docker Hub is prone to rate limiting. To prevent this in dotnet builds we should use our internal container registry.\r\n\r\nc.f. https://dev.azure.com/dnceng/internal/_wiki/wikis/DNCEng%20Services%20Wiki/1354/ACR-for-Docker-Hub-mirroring\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/62936","RelatedDescription":"Open PR \"Update SignalR Redis tests to use internal Docker Hub mirror\" (#62936)"},{"Id":"3264508174","IsPullRequest":true,"CreatedAt":"2025-07-25T22:10:06","Actor":"codingwithstephen","Number":"62935","RawContent":null,"Title":"Incorrect nullability on IApiRequestFormatMetadataProvider.GetSupport…","State":"open","Body":"Incorrect nullability on IApiRequestFormatMetadataProvider.GetSupportedContentTypes #62405\r\n\r\nFix incorrect nullability in GetSupportedContentTypes\r\n\r\nSummary of the changes:\r\nCorrected the nullability annotations for the GetSupportedContentTypes method in the IApiRequestFormatMetadataProvider interface to match the expected behavior.\r\n\r\nDescription\r\n\r\nThis PR fixes the nullability specification on the GetSupportedContentTypes method to ensure correct usage and compatibility with nullable reference types.\r\n\r\nDue to the requirement of a specific .NET SDK version (10.0.100-preview.7.25322.101) pinned in global.json, I have not been able to build the solution or run existing tests. Additionally, after searching the codebase, I could not find any existing unit tests covering this particular feature or method.\r\n\r\n<img width=\"2032\" height=\"577\" alt=\"Screenshot 2025-07-26 at 00 19 04\" src=\"https://github.com/user-attachments/assets/aea0fc4c-90ff-49c5-9a3f-4eed878f337d\" />\r\n\r\n\r\n\r\nFixes #62405","Url":"https://github.com/dotnet/aspnetcore/pull/62935","RelatedDescription":"Open PR \"Incorrect nullability on IApiRequestFormatMetadataProvider.GetSupport…\" (#62935)"},{"Id":"3264452425","IsPullRequest":false,"CreatedAt":"2025-07-25T21:39:20","Actor":"etriebe","Number":"62934","RawContent":null,"Title":"Request to OpenApi schema fails when /manage/2fa is changed names","State":"open","Body":"### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nI'm attempting to change the API path for the following.\n\n```cs\n        var accountGroup = routeGroup.MapGroup(\"/manage\").RequireAuthorization();\n\n        accountGroup.MapPost(\"/2fa\", async Task<Results<Ok<TwoFactorResponse>, ValidationProblem, NotFound>>\n            (ClaimsPrincipal claimsPrincipal, [FromBody] TwoFactorRequest tfaRequest, [FromServices] IServiceProvider sp) =>\n        {\n            var signInManager = sp.GetRequiredService<BetterSignInManager>();\n            var userManager = signInManager.UserManager;\n            if (await userManager.GetUserAsync(claimsPrincipal) is not { } user)\n            {\n                return TypedResults.NotFound();\n            }\n\n            if (tfaRequest.Enable == true)\n            {\n                if (tfaRequest.ResetSharedKey)\n                {\n                    return CreateValidationProblem(\"CannotResetSharedKeyAndEnable\",\n                        \"Resetting the 2fa shared key must disable 2fa until a 2fa token based on the new shared key is validated.\");\n                }\n                else if (string.IsNullOrEmpty(tfaRequest.TwoFactorCode))\n                {\n                    return CreateValidationProblem(\"RequiresTwoFactor\",\n                        \"No 2fa token was provided by the request. A valid 2fa token is required to enable 2fa.\");\n                }\n                else if (!await userManager.VerifyTwoFactorTokenAsync(user, userManager.Options.Tokens.AuthenticatorTokenProvider, tfaRequest.TwoFactorCode))\n                {\n                    return CreateValidationProblem(\"InvalidTwoFactorCode\",\n                        \"The 2fa token provided by the request was invalid. A valid 2fa token is required to enable 2fa.\");\n                }\n\n                await userManager.SetTwoFactorEnabledAsync(user, true);\n            }\n            else if (tfaRequest.Enable == false || tfaRequest.ResetSharedKey)\n            {\n                await userManager.SetTwoFactorEnabledAsync(user, false);\n            }\n\n            if (tfaRequest.ResetSharedKey)\n            {\n                await userManager.ResetAuthenticatorKeyAsync(user);\n            }\n\n            string[]? recoveryCodes = null;\n            if (tfaRequest.ResetRecoveryCodes || (tfaRequest.Enable == true && await userManager.CountRecoveryCodesAsync(user) == 0))\n            {\n                var recoveryCodesEnumerable = await userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\n                recoveryCodes = recoveryCodesEnumerable?.ToArray();\n            }\n\n            if (tfaRequest.ForgetMachine)\n            {\n                await signInManager.ForgetTwoFactorClientAsync();\n            }\n\n            var key = await userManager.GetAuthenticatorKeyAsync(user);\n            if (string.IsNullOrEmpty(key))\n            {\n                await userManager.ResetAuthenticatorKeyAsync(user);\n                key = await userManager.GetAuthenticatorKeyAsync(user);\n\n                if (string.IsNullOrEmpty(key))\n                {\n                    throw new NotSupportedException(\"The user manager must produce an authenticator key after reset.\");\n                }\n            }\n\n            return TypedResults.Ok(new TwoFactorResponse\n            {\n                SharedKey = key,\n                RecoveryCodes = recoveryCodes,\n                RecoveryCodesLeft = recoveryCodes?.Length ?? await userManager.CountRecoveryCodesAsync(user),\n                IsTwoFactorEnabled = await userManager.GetTwoFactorEnabledAsync(user),\n                IsMachineRemembered = await signInManager.IsTwoFactorClientRememberedAsync(user),\n            });\n        });\n```\n\nThe reason I am doing so is because I'm auto-generating my typescript client using Nwag\n\n```cs\n// See https://aka.ms/new-console-template for more information\nusing NSwag;\nusing NSwag.CodeGeneration.TypeScript;\n\nConsole.WriteLine(\"Hello, World!\");\nvar document = await OpenApiDocument.FromUrlAsync(\"https://foo.azurewebsites.net/openapi/v1.json\");\n\nvar settings = new TypeScriptClientGeneratorSettings\n{\n    ClassName = \"{controller}Client\",\n};\n\nvar generator = new TypeScriptClientGenerator(document, settings);\nvar code = generator.GenerateFile();\nFile.WriteAllText(\"MyApiClient.ts\", code);\nConsole.WriteLine(\"TypeScript client code generated and saved to PickemApiClient.ts\");\n```\n\nIf the api starts with a number like 2fa does, Typescript will complain. But if you change the name of the API to something like this\n\n```cs\naccountGroup.MapPost(\"/twofactorauth\", \n```\n\nThe call to /openapi/v1 schema will fail with the following.\n\n```\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware: Error: An unhandled exception has occurred while executing the request.\n\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\n   at System.Collections.Generic.OrderedDictionary`2.Enumerator.MoveNext()\n   at System.Text.Json.Nodes.JsonObject.WriteTo(Utf8JsonWriter writer, JsonSerializerOptions options)\n   at System.Text.Json.JsonSerializer.ReadFromNode[TValue](JsonNode node, JsonTypeInfo`1 jsonTypeInfo)\n   at Microsoft.AspNetCore.OpenApi.OpenApiSchemaService.GetOrCreateSchemaAsync(Type type, IServiceProvider scopedServiceProvider, IOpenApiSchemaTransformer[] schemaTransformers, ApiParameterDescription parameterDescription, Boolean captureSchemaByRef, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetParametersAsync(ApiDescription description, IServiceProvider scopedServiceProvider, IOpenApiSchemaTransformer[] schemaTransformers, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOperationAsync(ApiDescription description, HashSet`1 capturedTags, IServiceProvider scopedServiceProvider, IOpenApiSchemaTransformer[] schemaTransformers, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOperationsAsync(IGrouping`2 descriptions, HashSet`1 capturedTags, IServiceProvider scopedServiceProvider, IOpenApiOperationTransformer[] operationTransformers, IOpenApiSchemaTransformer[] schemaTransformers, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiPathsAsync(HashSet`1 capturedTags, IServiceProvider scopedServiceProvider, IOpenApiOperationTransformer[] operationTransformers, IOpenApiSchemaTransformer[] schemaTransformers, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiDocumentAsync(IServiceProvider scopedServiceProvider, HttpRequest httpRequest, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Builder.OpenApiEndpointRouteBuilderExtensions.<>c__DisplayClass0_0.<<MapOpenApi>b__0>d.MoveNext()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Http.Generated.<GeneratedRouteBuilderExtensions_g>F56B68D2B55B5B7B373BA2E4796D897848BC0F04A969B1AF6260183E8B9E0BAF2__GeneratedRouteBuilderExtensionsCore.<>c__DisplayClass2_0.<<MapGet0>g__RequestHandler|5>d.MoveNext()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\n```\n\n### Expected Behavior\n\nNo exception. \n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n```\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware: Error: An unhandled exception has occurred while executing the request.\n\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\n   at System.Collections.Generic.OrderedDictionary`2.Enumerator.MoveNext()\n   at System.Text.Json.Nodes.JsonObject.WriteTo(Utf8JsonWriter writer, JsonSerializerOptions options)\n   at System.Text.Json.JsonSerializer.ReadFromNode[TValue](JsonNode node, JsonTypeInfo`1 jsonTypeInfo)\n   at Microsoft.AspNetCore.OpenApi.OpenApiSchemaService.GetOrCreateSchemaAsync(Type type, IServiceProvider scopedServiceProvider, IOpenApiSchemaTransformer[] schemaTransformers, ApiParameterDescription parameterDescription, Boolean captureSchemaByRef, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetParametersAsync(ApiDescription description, IServiceProvider scopedServiceProvider, IOpenApiSchemaTransformer[] schemaTransformers, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOperationAsync(ApiDescription description, HashSet`1 capturedTags, IServiceProvider scopedServiceProvider, IOpenApiSchemaTransformer[] schemaTransformers, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOperationsAsync(IGrouping`2 descriptions, HashSet`1 capturedTags, IServiceProvider scopedServiceProvider, IOpenApiOperationTransformer[] operationTransformers, IOpenApiSchemaTransformer[] schemaTransformers, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiPathsAsync(HashSet`1 capturedTags, IServiceProvider scopedServiceProvider, IOpenApiOperationTransformer[] operationTransformers, IOpenApiSchemaTransformer[] schemaTransformers, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiDocumentAsync(IServiceProvider scopedServiceProvider, HttpRequest httpRequest, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Builder.OpenApiEndpointRouteBuilderExtensions.<>c__DisplayClass0_0.<<MapOpenApi>b__0>d.MoveNext()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Http.Generated.<GeneratedRouteBuilderExtensions_g>F56B68D2B55B5B7B373BA2E4796D897848BC0F04A969B1AF6260183E8B9E0BAF2__GeneratedRouteBuilderExtensionsCore.<>c__DisplayClass2_0.<<MapGet0>g__RequestHandler|5>d.MoveNext()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\n```\n\n### .NET Version\n\n9.0.302\n\n### Anything else?\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/62934","RelatedDescription":"Open issue \"Request to OpenApi schema fails when /manage/2fa is changed names\" (#62934)"},{"Id":"3263872587","IsPullRequest":true,"CreatedAt":"2025-07-25T20:40:18","Actor":"wtgodbe","Number":"62931","RawContent":null,"Title":"Skip RequestPathBase_WithDoubleSlashes_Split for now","State":"closed","Body":"This test started failing after the machine rollback yesterday - this is due to us losing some IIS features that were added in the rollout last week. It should only fail until the next rollout next week, at which time I'll revert this change.","Url":"https://github.com/dotnet/aspnetcore/pull/62931","RelatedDescription":"Closed or merged PR \"Skip RequestPathBase_WithDoubleSlashes_Split for now\" (#62931)"},{"Id":"3262265719","IsPullRequest":false,"CreatedAt":"2025-07-25T19:32:55","Actor":"pr-benchmarks[bot]","Number":"62920","RawContent":null,"Title":"Perf improvement: ApiCrudUpdateProduct","State":"closed","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| ApiCrudUpdateProduct [Fixed] | API update existing element 6- Mvc Cobalt Cloud Linux | 07/23/2025 23:35:07 | 347,051 | 371,660 | 7.09 % (24,609)  :thumbsup:  | 4.17 σ | 5,906.55 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25368.105` -> `10.0.0-preview.7.25372.103`</td>            <td>https://github.com/dotnet/dotnet/compare/1c92f346e02a8363def6f7bdbcc526d3c579dd74...96ac952a7886b565e83acc4c9cef656954ed0686</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25368.105` -> `10.0.0-preview.7.25372.103`</td>            <td>https://github.com/dotnet/aspnetcore/compare/1c92f346e02a8363def6f7bdbcc526d3c579dd74...96ac952a7886b565e83acc4c9cef656954ed0686</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25368.105` -> `10.0.0-preview.7.25372.103`</td>            <td>https://github.com/dotnet/runtime/compare/1c92f346e02a8363def6f7bdbcc526d3c579dd74...96ac952a7886b565e83acc4c9cef656954ed0686</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/62920","RelatedDescription":"Closed issue \"Perf improvement: ApiCrudUpdateProduct\" (#62920)"},{"Id":"3262261875","IsPullRequest":false,"CreatedAt":"2025-07-25T19:31:16","Actor":"pr-benchmarks[bot]","Number":"62919","RawContent":null,"Title":"Perf regression: antiforgery-noop","State":"closed","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| antiforgery-noop [Fixed] | Antiforgery No Operation 8- Trends Cobalt Cloud Linux AL3 | 07/24/2025 00:35:30 | 600,473 | 546,805 | -8.94 % (-53,668)  :thumbsdown:  | -10.40 σ | 5,161.53 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.AspNetCore.Antiforgery.dll</td>            <td>`10.0.0-preview.7.25368.105` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/dotnet/compare/1c92f346e02a8363def6f7bdbcc526d3c579dd74...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`10.0.0-preview.7.25368.105` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/aspnetcore/compare/1c92f346e02a8363def6f7bdbcc526d3c579dd74...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`10.0.0-preview.7.25368.105` -> `10.0.0-preview.7.25373.104`</td>            <td>https://github.com/dotnet/runtime/compare/1c92f346e02a8363def6f7bdbcc526d3c579dd74...c0e325f90fb79db0da6be5128dc292f2aabb264f</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK]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[/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/62919","RelatedDescription":"Closed issue \"Perf regression: antiforgery-noop\" (#62919)"},{"Id":"3263949216","IsPullRequest":false,"CreatedAt":"2025-07-25T17:46:12","Actor":"dougclutter","Number":"62932","RawContent":null,"Title":"MapStaticAssets/MapRazorComponents not mapping expected URL when used with UsePathBase","State":"open","Body":"### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWe have an existing .NET 8 application which has the following projects types:\n- **Microsoft.NET.Sdk.BlazorWebAssembly**: *Form 1 UI*\n- **Microsoft.NET.Sdk.Web**: *API* which also hosts the *Form 1 UI* project\n- **Microsoft.NET.Sdk.Razor**: Razor Component Library (RCL) used by the *Form 1 UI*\n- **Microsoft.NET.Sdk**: *Services* used by *API* project\n- **Microsoft.NET.Sdk**: *Class Library* shared by *Services*, *API*, and the *Form 1 UI* projects\n\nIt has the following URLs:\n- **/forms/api/myService** - provides APIs used by the UI\n- **/forms/form1/** - serves the *Form 1 UI*\n\nWe will soon be adding the following URLs:\n- **/forms/form2/** - serves *Form 2 UI*\n- **/forms/form3/** - serves *Form 3 UI*\n\nThese new projects will use the existing *RCL* and *Class Library* projects.\n\nWe have been unable to follow the guidance provide in the\n[Migration Docs](https://learn.microsoft.com/en-us/aspnet/core/migration/80-90?view=aspnetcore-9.0&tabs=visual-studio#replace-usestaticfiles-with-mapstaticassets)\nto update `UseStaticFiles` to `MapStaticAssets`.\n\nIn this solution, we have provided a minimal reproduction of the problems we are having. \nThis solution contains the following projects which were created using the current .NET 9 templates:\n- **MyApp**: equivalent to our *API* project\n- **MyApp.Client**: equivalent to our *Form 1 UI* project\n\nWe have updated these projects as follows:\n- MyApp -> Program.cs: added `app.UsePathBase(\"/forms\")`\n- MyApp -> Program.cs: added `options.PathPrefix = \"/form1\"` to `AddInteractiveWebAssemblyRenderMode` per [Prefix Docs](https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/static-files?view=aspnetcore-9.0#prefix-for-blazor-webassembly-assets)\n- MyApp -> App.razor: added `<base href=\"/form1/\" />`\n- MyApp.Client.csproj: tried adding `<StaticWebAssetBasePath>form1</StaticWebAssetBasePath>` but it didn't help\n\n\n\n### Expected Behavior\n\nURLs are not returning expected values:\n\n| URL | Expected | Actual |\n|---- |--------- |------- |\n| /forms/form1 | Form 1 UI | HTTP 404 |\n| /forms       | HTTP 404   | static HTML of `App.razor` |\n| /       | HTTP 404   | static HTML of `App.razor` |\n\n\n### Steps To Reproduce\n\nRepo available at https://github.com/dougclutter/MapStaticAssetsIssues\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.303\n\n### Anything else?\n\nASP.NET Core v9.0.7\nVS Enterprise v17.14.9\n\n**dotnet --info**\n.NET SDK:\n Version:           9.0.303\n Commit:            5d97611193\n Workload version:  9.0.300-manifests.183aaee6\n MSBuild version:   17.14.13+65391c53b\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.22631\n OS Platform: Windows\n RID:         win-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\9.0.303\\\n\n.NET workloads installed:\n [android]\n   Installation Source: SDK 9.0.300, VS 17.14.36310.24\n   Manifest Version:    35.0.78/9.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.sdk.android\\35.0.78\\WorkloadManifest.json\n   Install Type:              Msi\n\n [aspire]\n   Installation Source: SDK 9.0.300, VS 17.14.36310.24\n   Manifest Version:    8.2.2/8.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.2.2\\WorkloadManifest.json\n   Install Type:              Msi\n\n [ios]\n   Installation Source: SDK 9.0.300, VS 17.14.36310.24\n   Manifest Version:    18.5.9207/9.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.sdk.ios\\18.5.9207\\WorkloadManifest.json\n   Install Type:              Msi\n\n [maccatalyst]\n   Installation Source: SDK 9.0.300, VS 17.14.36310.24\n   Manifest Version:    18.5.9207/9.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.sdk.maccatalyst\\18.5.9207\\WorkloadManifest.json\n   Install Type:              Msi\n\n [maui-windows]\n   Installation Source: SDK 9.0.300, VS 17.14.36310.24\n   Manifest Version:    9.0.51/9.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.sdk.maui\\9.0.51\\WorkloadManifest.json\n   Install Type:              Msi\n\n [wasm-tools]\n   Installation Source: SDK 9.0.300, VS 17.14.36310.24\n   Manifest Version:    9.0.7/9.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.workload.mono.toolchain.current\\9.0.7\\WorkloadManifest.json\n   Install Type:              Msi\n\nConfigured to use loose manifests when installing new manifests.\n\nHost:\n  Version:      9.0.7\n  Architecture: x64\n  Commit:       3c298d9f00\n\n.NET SDKs installed:\n  6.0.428 [C:\\Program Files\\dotnet\\sdk]\n  7.0.410 [C:\\Program Files\\dotnet\\sdk]\n  8.0.412 [C:\\Program Files\\dotnet\\sdk]\n  9.0.302 [C:\\Program Files\\dotnet\\sdk]\n  9.0.303 [C:\\Program Files\\dotnet\\sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 6.0.36 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 8.0.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 9.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 6.0.36 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 8.0.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 9.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.WindowsDesktop.App 6.0.36 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 8.0.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 9.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n\nOther architectures found:\n  x86   [C:\\Program Files (x86)\\dotnet]\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\n\nEnvironment variables:\n  Not set\n\nglobal.json file:\n  Not found\n","Url":"https://github.com/dotnet/aspnetcore/issues/62932","RelatedDescription":"Open issue \"MapStaticAssets/MapRazorComponents not mapping expected URL when used with UsePathBase\" (#62932)"},{"Id":"3263687215","IsPullRequest":false,"CreatedAt":"2025-07-25T15:57:01","Actor":"plano-fwinkler","Number":"62930","RawContent":null,"Title":"OpenIdConnectHandler ClaimActions not working","State":"open","Body":"### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nIn the OpenIdConnectHandler Class Line 912 the ClaimActions does nothing because it is using an empty Payload Document.\n\n   using (var payload = JsonDocument.Parse(\"{}\"))\n                {\n                    var identity = (ClaimsIdentity)user!.Identity!;\n                    foreach (var action in Options.ClaimActions)\n                    {\n                        action.Run(payload.RootElement, identity, ClaimsIssuer);\n                    }\n                }\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0\n\n### Anything else?\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/62930","RelatedDescription":"Open issue \"OpenIdConnectHandler ClaimActions not working\" (#62930)"},{"Id":"3263133097","IsPullRequest":true,"CreatedAt":"2025-07-25T13:57:10","Actor":"dependabot[bot]","Number":"62928","RawContent":null,"Title":"[main] (deps): Bump src/submodules/googletest from `309dab8` to `32f9f4c`","State":"closed","Body":"Bumps [src/submodules/googletest](https://github.com/google/googletest) from `309dab8` to `32f9f4c`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/google/googletest/commit/32f9f4c82afa4249af66b55278df15c16b3031ea\"><code>32f9f4c</code></a> Skip the predicate on SIGSEGV in death-test on Android builds with API level ...</li>\n<li><a href=\"https://github.com/google/googletest/commit/7e17b15f1547bb8dd9c2fed91043b7af3437387f\"><code>7e17b15</code></a> Fix the sample usage of <code>ConvertGenerator</code> by removing the type-id name.</li>\n<li>See full diff in <a href=\"https://github.com/google/googletest/compare/309dab8d4bbfcef0ef428762c6fec7172749de0f...32f9f4c82afa4249af66b55278df15c16b3031ea\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>","Url":"https://github.com/dotnet/aspnetcore/pull/62928","RelatedDescription":"Closed or merged PR \"[main] (deps): Bump src/submodules/googletest from `309dab8` to `32f9f4c`\" (#62928)"},{"Id":"3263273833","IsPullRequest":true,"CreatedAt":"2025-07-25T13:39:58","Actor":"ilonatommy","Number":"62929","RawContent":null,"Title":"Investigate public API changes in templates","State":"open","Body":"Investigating https://github.com/dotnet/aspnetcore/issues/62851","Url":"https://github.com/dotnet/aspnetcore/pull/62929","RelatedDescription":"Open PR \"Investigate public API changes in templates\" (#62929)"},{"Id":"3263111418","IsPullRequest":true,"CreatedAt":"2025-07-25T12:46:59","Actor":"dependabot[bot]","Number":"62927","RawContent":null,"Title":"[main] (deps): Bump dotnet/arcade from d777c20040bdc2e52b372fa98dcb84141ed692d3 to e2fed65f9c524d12c64876194ae4ce177b935bb3","State":"closed","Body":"Bumps [dotnet/arcade](https://github.com/dotnet/arcade) from d777c20040bdc2e52b372fa98dcb84141ed692d3 to e2fed65f9c524d12c64876194ae4ce177b935bb3.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/dotnet/arcade/commit/e2fed65f9c524d12c64876194ae4ce177b935bb3\"><code>e2fed65</code></a> Follow up on Wix 5 signing changes (<a href=\"https://redirect.github.com/dotnet/arcade/issues/15995\">#15995</a>)</li>\n<li><a href=\"https://github.com/dotnet/arcade/commit/0fbc9e8711fa91e68c2bf3db376fb83b46f4ac35\"><code>0fbc9e8</code></a> Revert &quot;Revert &quot;Remove &quot;Source Build Complete&quot; job&quot;&quot; (<a href=\"https://redirect.github.com/dotnet/arcade/issues/15998\">#15998</a>)</li>\n<li><a href=\"https://github.com/dotnet/arcade/commit/0c4027923c24fb5cd00ac8ccbb2e42b0f3fcff40\"><code>0c40279</code></a> Retry on github rate limiting (<a href=\"https://redirect.github.com/dotnet/arcade/issues/15990\">#15990</a>)</li>\n<li><a href=\"https://github.com/dotnet/arcade/commit/e109adc7869da8c617d6d096564bb3b77fb7743a\"><code>e109adc</code></a> Fix typo in MTP.targets (<a href=\"https://redirect.github.com/dotnet/arcade/issues/15996\">#15996</a>)</li>\n<li><a href=\"https://github.com/dotnet/arcade/commit/2586309f3f8553152e2d1d54612e9199975f9cd4\"><code>2586309</code></a> Replace the _SignType conditional with a parameter for ESRP service connectio...</li>\n<li><a href=\"https://github.com/dotnet/arcade/commit/b417c781006458ea6d1ca37fd9c4376580b7c521\"><code>b417c78</code></a> Add Version.Details.props (<a href=\"https://redirect.github.com/dotnet/arcade/issues/15991\">#15991</a>)</li>\n<li><a href=\"https://github.com/dotnet/arcade/commit/3a3efb298ce2f6f86f7bad9931bf57b97cc86794\"><code>3a3efb2</code></a> Fixup stream ownership and position after copy (<a href=\"https://redirect.github.com/dotnet/arcade/issues/15989\">#15989</a>)</li>\n<li><a href=\"https://github.com/dotnet/arcade/commit/f31407ab05e2f8783af4e417932ff8cfa14c3789\"><code>f31407a</code></a> Do not use a service connection for test signing (<a href=\"https://redirect.github.com/dotnet/arcade/issues/15981\">#15981</a>)</li>\n<li><a href=\"https://github.com/dotnet/arcade/commit/3447264106c65e37b63cf686632ced6c7e8fccaf\"><code>3447264</code></a> [main] Update dependencies from dotnet/arcade, dotnet/arcade-services (<a href=\"https://redirect.github.com/dotnet/arcade/issues/15977\">#15977</a>)</li>\n<li><a href=\"https://github.com/dotnet/arcade/commit/1e550b4a5c320a257ae48c82c883d55fa061bd1c\"><code>1e550b4</code></a> [main] Update dependencies from dotnet/xharness (<a href=\"https://redirect.github.com/dotnet/arcade/issues/15978\">#15978</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/dotnet/arcade/compare/d777c20040bdc2e52b372fa98dcb84141ed692d3...e2fed65f9c524d12c64876194ae4ce177b935bb3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>","Url":"https://github.com/dotnet/aspnetcore/pull/62927","RelatedDescription":"Closed or merged PR \"[main] (deps): Bump dotnet/arcade from d777c20040bdc2e52b372fa98dcb84141ed692d3 to e2fed65f9c524d12c64876194ae4ce177b935bb3\" (#62927)"},{"Id":"3263014190","IsPullRequest":true,"CreatedAt":"2025-07-25T12:13:01","Actor":"martincostello","Number":"62926","RawContent":null,"Title":"[OpenApi] Support derived FromKeyedServices types to ignore parameters","State":"open","Body":"# Support derived FromKeyedServices\r\n\r\nIgnore endpoint parameters using derived `[FromKeyedServices]` attributes.\r\n\r\n## Description\r\n\r\n- Support for ignoring OpenAPI parameters decorated with attributes derived from `FromKeyedServicesAttribute`.\r\n- Add test for existing support for ignoring parameters decorated with attributes derived from `FromServicesAttribute`.\r\n\r\nFixes #58739\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/62926","RelatedDescription":"Open PR \"[OpenApi] Support derived FromKeyedServices types to ignore parameters\" (#62926)"},{"Id":"3262958568","IsPullRequest":false,"CreatedAt":"2025-07-25T11:50:30","Actor":"dp-sgr","Number":"62925","RawContent":null,"Title":"Experimental Microsoft.AspNetCore.ClientAssets doesn't work with .NET 9 SDK","State":"open","Body":"### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nUsing Microsoft.AspNetCore.ClientAssets on a RCL doesn't work with the .NET 9 SDK even if i target net8.0 on pack.\n\nWhile ClientAssets are outputting files (correctly in my opinion) im getting the following error:\n\n1. Create net8.0 RCL without wwwroot\n2. Add Microsoft.AspNetCore.ClientAssets\n3. Pack fails now\n\n```\nRestore complete (0,2s)\n  MyProject failed with 1 error(s) (4,2s) → bin\\Release\\net8.0\\MyProject.dll\n    C:\\Program Files\\dotnet\\sdk\\9.0.303\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(221,5): error NU5019: File not found: 'D:\\MyProject\\obj\\Release\\net8.0\\staticwebassets\\msbuild.MyProject.Microsoft.AspNetCore.StaticWebAssetEndpoints.props'.\n```\n\nYou can workaround this issue in net8.0 target framework projects by adding one single file (ive just added an empty file underscore without content \"_\"). Because net8 is not yet using the new StaticAssets pipeline this would work\n\n---------\n\nBy doing the same as above while targeting net9.0 this will not work anymore (and fails on build instead of later in pack)\n\n```\n  StaticAssetsClientAssets failed with 1 error(s) and 1 warning(s) (5,8s)\n    C:\\Program Files\\dotnet\\sdk\\9.0.303\\Sdks\\Microsoft.NET.Sdk.StaticWebAssets\\targets\\Microsoft.NET.Sdk.StaticWebAssets.Compression.targets(248,5): warning : Endpoints not found for related asset: D:\\MyProject\\obj\\Debug\\net9.0\\clientassets\\hello.js\n    C:\\Program Files\\dotnet\\sdk\\9.0.303\\Sdks\\Microsoft.NET.Sdk.StaticWebAssets\\targets\\Microsoft.NET.Sdk.StaticWebAssets.Compression.targets(248,5): error MSB4018:\n      The \"ApplyCompressionNegotiation\" task failed unexpectedly.\n      System.InvalidOperationException: Endpoints not found for related asset: D:\\MyProject\\obj\\Debug\\net9.0\\clientassets\\hello.js\n         at Microsoft.AspNetCore.StaticWebAssets.Tasks.ApplyCompressionNegotiation.Execute()\n         at Microsoft.Build.BackEnd.TaskExecutionHost.Execute()\n         at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(TaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask)\n```\n\n\n---------\n\nThis happened because we upgraded our .NET SDK on the build machine to the newest release (both 8 & 9) i cannot exactly say which version switch caused the issue. \n\nThis could also be an issue with the .NET SDK but because Microsoft.AspNetCore.ClientAssets is experimental im placing this issue here.\n\nWe could switch to an alternative. But as far as i know we are still waiting for #38445\n\n\n### Expected Behavior\n\nWe need a way to still use webpack to build our assets and include them in the RCL. (Without building them manually and copying to wwwroot)\n\n### Steps To Reproduce\n\nYou can find a sample here:\n\nhttps://github.com/dp-sgr/StaticAssetsClientAssetsIssue\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.303\n\n### Anything else?\n\nInstalled SDK's:\n8.0.412\n9.0.303\n","Url":"https://github.com/dotnet/aspnetcore/issues/62925","RelatedDescription":"Open issue \"Experimental Microsoft.AspNetCore.ClientAssets doesn't work with .NET 9 SDK\" (#62925)"},{"Id":"3262935632","IsPullRequest":false,"CreatedAt":"2025-07-25T11:40:06","Actor":"ilonatommy","Number":"62924","RawContent":null,"Title":"[Known Build Error] `RequestPathBase_WithDoubleSlashes_Split` fails - IIS is not installed in the expected path","State":"open","Body":"Previously reported in regular issue that is not allowing for escaping `Build Analysis`: https://github.com/dotnet/aspnetcore/issues/51679. First hit was observed on https://github.com/dotnet/aspnetcore/pull/62885: [log](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105240&view=ms.vss-test-web.build-test-results-tab&runId=30284906&resultId=114435). Since then, it failed on all the runs, see the history log screenshot in the original issue.\n\n## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1105662\nBuild error leg or test failing: Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_Split\nPull request: https://github.com/dotnet/aspnetcore/pull/62905\n<!-- Error message template  -->\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n<!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->\n\n```json\n{\n  \"ErrorPattern\": \"Microsoft\\\\.AspNetCore\\\\.Server\\\\.IIS\\\\.IISExpress\\\\.FunctionalTests\\\\.RequestPathBaseTests\\\\.RequestPathBase_WithDoubleSlashes_Split\\\\(url: \\\"\\\\/Sub\\\\/App\\\\/PathANDPathBase\\\\/PATH\\\", expectedPathBase: \\\"\\\\/Sub\\\\/App\\\\/PathANDPathBase\\\", expectedPath: \\\"\\\\/PATH\\\"\\\\) \\\\[FAIL\\\\]\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\nThe pattern is broader than the error because we cannot use multi-line patterns.\nexample:\n```\nMicrosoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split(url: \"/Sub/App/PathANDPathBase/PATH\", expectedPathBase: \"/Sub/App/PathANDPathBase\", expectedPath: \"/PATH\") [FAIL]\n2025-07-25T10:04:47.5390862Z [xUnit.net 00:11:17.75]       Assert.Equal() Failure: Values differ\n2025-07-25T10:04:47.5422015Z [xUnit.net 00:11:17.75]       Expected: 200\n2025-07-25T10:04:47.5456092Z [xUnit.net 00:11:17.75]       Actual:   500\n2025-07-25T10:04:47.5491134Z [xUnit.net 00:11:17.75]       Stack Trace:\n2025-07-25T10:04:47.5526471Z [xUnit.net 00:11:17.75]         /_/src/Servers/IIS/IIS/test/Common.FunctionalTests/RequestPathBaseTests.cs(78,0): at Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split(String url, String expectedPathBase, String expectedPath)\n2025-07-25T10:04:47.5559365Z [xUnit.net 00:11:17.75]         --- End of stack trace from previous location ---\n2025-07-25T10:04:47.5589295Z [xUnit.net 00:11:17.75]       Output:\n2025-07-25T10:04:47.5623272Z [xUnit.net 00:11:17.75]         | [0.001s] TestLifetime Information: Starting test RequestPathBase_WithDoubleSlashes_Split-_Sub_App_PathANDPathBase_PATH-_Sub_App_PathANDPathBase-_PATH at 2025-07-25T10:04:47\n2025-07-25T10:04:47.5658380Z [xUnit.net 00:11:17.75]         | [0.002s] FIXTURE:Microsoft.AspNetCore.Server.IntegrationTesting.IIS.IISExpressDeployer Information: iisexpress stdout: IncrementMessages called\n2025-07-25T10:04:47.5696582Z [xUnit.net 00:11:17.75]         | [0.002s] FIXTURE:Microsoft.AspNetCore.Server.IntegrationTesting.IIS.IISExpressDeployer Information: iisexpress stdout: Response sent: http://localhost:51884/Sub/App/PathANDPathBase/PATH with HTTP status 500.19\n2025-07-25T10:04:47.5727603Z [xUnit.net 00:11:17.75]         | [0.005s] Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests Error: Test threw an exception.\n2025-07-25T10:04:47.5762940Z [xUnit.net 00:11:17.75]         | Xunit.Sdk.EqualException: Assert.Equal() Failure: Values differ\n2025-07-25T10:04:47.5823479Z [xUnit.net 00:11:17.75]         | Expected: 200\n2025-07-25T10:04:47.5837227Z [xUnit.net 00:11:17.75]         | Actual:   500\n2025-07-25T10:04:47.5865303Z [xUnit.net 00:11:17.75]         |    at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 154\n2025-07-25T10:04:47.5899986Z [xUnit.net 00:11:17.75]         |    at Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split(String url, String expectedPathBase, String expectedPath) in /_/src/Servers/IIS/IIS/test/Common.FunctionalTests/RequestPathBaseTests.cs:line 78\n2025-07-25T10:04:47.5933712Z [xUnit.net 00:11:17.75]         |    at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass47_0.<<InvokeTestMethodAsync>b__1>d.MoveNext() in /_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs:line 259\n2025-07-25T10:04:47.5965590Z [xUnit.net 00:11:17.75]         | --- End of stack trace from previous location ---\n2025-07-25T10:04:47.6004641Z [xUnit.net 00:11:17.75]         |    at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in /_/src/xunit.execution/Sdk/Frameworks/ExecutionTimer.cs:line 48\n2025-07-25T10:04:47.6033273Z [xUnit.net 00:11:17.75]         |    at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in /_/src/xunit.core/Sdk/ExceptionAggregator.cs:line 90\n2025-07-25T10:04:47.6069142Z [xUnit.net 00:11:17.75]         | [0.005s] TestLifetime Information: Finished test RequestPathBase_WithDoubleSlashes_Split-_Sub_App_PathANDPathBase_PATH-_Sub_App_PathANDPathBase-_PATH in 0.0047899s\n2025-07-25T10:04:47.6093182Z [xUnit.net 00:11:17.75]     Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split(url: \"/%2F\\\\/Sub/App/PathAndPathBase/Path\", expectedPathBase: \"/%2F\\\\/Sub/App/PathAndPathBase\", expectedPath: \"/Path\") \n```\n\n\r\n<!-- Known issue validation start -->\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105240\r\n**Error message validated:** `[Microsoft\\.AspNetCore\\.Server\\.IIS\\.IISExpress\\.FunctionalTests\\.RequestPathBaseTests\\.RequestPathBase_WithDoubleSlashes_Split\\(url: \"\\/Sub\\/App\\/PathANDPathBase\\/PATH\", expectedPathBase: \"\\/Sub\\/App\\/PathANDPathBase\", expectedPath: \"\\/PATH\"\\) \\[FAIL\\]`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/25/2025 11:58:58 AM UTC\r\n<!-- Known issue validation end -->\r\n<!--Known issue error report start -->\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1106157](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1106157)|dotnet/aspnetcore|[Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1106157&view=ms.vss-test-web.build-test-results-tab&runId=30314168&resultId=114435)|dotnet/aspnetcore#62885|\r\n|[1106142](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1106142)|dotnet/aspnetcore|[Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1106142&view=ms.vss-test-web.build-test-results-tab&runId=30313888&resultId=114435)||\r\n|[1106064](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1106064)|dotnet/aspnetcore|[Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1106064&view=ms.vss-test-web.build-test-results-tab&runId=30313544&resultId=114435)|dotnet/aspnetcore#62929|\r\n|[1106032](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1106032)|dotnet/aspnetcore|[Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1106032&view=ms.vss-test-web.build-test-results-tab&runId=30312362&resultId=114435)||\r\n|[1106048](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1106048)|dotnet/aspnetcore|[Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1106048&view=ms.vss-test-web.build-test-results-tab&runId=30310938&resultId=114435)|dotnet/aspnetcore#62885|\r\n|[1105433](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105433)|dotnet/aspnetcore|[Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105433&view=ms.vss-test-web.build-test-results-tab&runId=30310254&resultId=114435)|dotnet/aspnetcore#62913|\r\n|[1105911](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105911)|dotnet/aspnetcore|[Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105911&view=ms.vss-test-web.build-test-results-tab&runId=30308638&resultId=114435)|dotnet/aspnetcore#62929|\r\n|[1105930](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105930)|dotnet/aspnetcore|[Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105930&view=ms.vss-test-web.build-test-results-tab&runId=30306932&resultId=114435)||\r\n|[1105860](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105860)|dotnet/aspnetcore|[Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105860&view=ms.vss-test-web.build-test-results-tab&runId=30305182&resultId=114435)|dotnet/aspnetcore#62928|\r\n|[1105848](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105848)|dotnet/aspnetcore|[Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105848&view=ms.vss-test-web.build-test-results-tab&runId=30305140&resultId=114435)||\r\n|[1105827](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105827)|dotnet/aspnetcore|[Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105827&view=ms.vss-test-web.build-test-results-tab&runId=30304488&resultId=114466)|dotnet/aspnetcore#62926|\r\n|[1105240](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105240)|dotnet/aspnetcore|[Microsoft.AspNetCore.Server.IIS.IISExpress.FunctionalTests.RequestPathBaseTests.RequestPathBase_WithDoubleSlashes_Split](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1105240&view=ms.vss-test-web.build-test-results-tab&runId=30284906&resultId=114435)|dotnet/aspnetcore#62885|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|12|12|\r\n<!--Known issue error report end -->","Url":"https://github.com/dotnet/aspnetcore/issues/62924","RelatedDescription":"Open issue \"[Known Build Error] `RequestPathBase_WithDoubleSlashes_Split` fails - IIS is not installed in the expected path\" (#62924)"},{"Id":"3262693483","IsPullRequest":false,"CreatedAt":"2025-07-25T10:05:28","Actor":"DjeeBay","Number":"62923","RawContent":null,"Title":"[Blazor WASM] AddAuthenticationStateSerialization with SerializeAllClaims does not add RoleClaims","State":"open","Body":"### Describe the bug\n\nSince .Net 9 we can serialize the \"Authentication State\" with this :\n`builder.Services.AddRazorComponents()\n .AddInteractiveWebAssemblyComponents()\n .AddAuthenticationStateSerialization(\n        options => options.SerializeAllClaims = true);`\n\nBut it looks like the RoleClaims are not added. They are correctly handled on server side but on client side there is no RoleClaims. Only UserRoles and UserClaims are serialized.\n\n### Expected Behavior\n\nClient side the User should have all its claims (UserClaims and RoleClaims included).\n","Url":"https://github.com/dotnet/aspnetcore/issues/62923","RelatedDescription":"Open issue \"[Blazor WASM] AddAuthenticationStateSerialization with SerializeAllClaims does not add RoleClaims\" (#62923)"},{"Id":"3262485558","IsPullRequest":true,"CreatedAt":"2025-07-25T08:50:48","Actor":"github-actions[bot]","Number":"62921","RawContent":null,"Title":"[release/10.0-preview7] [Blazor] Clear caches on HotReload","State":"open","Body":"Backport of #62880 to release/10.0-preview7\r\n\r\n/cc @maraf\r\n\r\n# [Blazor] Clear caches on HotReload\r\n\r\nClear more caches when HotReload deltas are applied.\r\n\r\n## Description\r\n\r\nClear following Blazor specific caches\r\n- ComponentProperties (affected by https://github.com/dotnet/runtime/issues/75154)\r\n- DefaultComponentActivator (cleared from renderer, but not sufficient for RazorComponentResult)\r\n- ComponentFactory (cleared from renderer, but not sufficient for RazorComponentResult)\r\n- BindConverter.FormatterDelegateCache\r\n- BindConverter.ParserDelegateCache\r\n- AttributeAuthorizeDataCache\r\n- PersistentStateValueProvider\r\n- EventArgsTypeCache\r\n- RouteTable\r\n- EndpointComponentState\r\n\r\nFound internally\r\nFixes #43780\r\n\r\n## Customer Impact\r\n\r\nMakes the application behave more correctly after HotReload deltas are applied.\r\n\r\n## Regression?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n[If yes, specify the version the behavior has regressed from]\r\n\r\n## Risk\r\n\r\n- [ ] High\r\n- [ ] Medium\r\n- [x] Low\r\n\r\nAffects only scenarios when HotReload is attached.\r\n\r\n## Verification\r\n\r\n- [x] Manual (required)\r\n- [ ] Automated\r\n\r\n## Packaging changes reviewed?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n- [x] N/A","Url":"https://github.com/dotnet/aspnetcore/pull/62921","RelatedDescription":"Open PR \"[release/10.0-preview7] [Blazor] Clear caches on HotReload\" (#62921)"}],"ResultType":"GitHubIssue"},"Identity-Issues":{"Issues":[{"Id":"385990535","IsPullRequest":true,"CreatedAt":"2018-12-19T00:12:57","Actor":"grahamehorner","Number":"2087","RawContent":null,"Title":"WIP: IUserTwoFactorTokenProvider token length POC","State":"closed","Body":"This is a WIP idea to support configuration of token length for UserTwoFactorTokenProviders","Url":"https://github.com/aspnet/Identity/pull/2087","RelatedDescription":"Closed or merged PR \"WIP: IUserTwoFactorTokenProvider token length POC\" (#2087)"},{"Id":"385943112","IsPullRequest":true,"CreatedAt":"2018-12-19T00:06:47","Actor":"grahamehorner","Number":"2086","RawContent":null,"Title":"Update Rfc6238AuthenticationService.cs","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2086","RelatedDescription":"Closed or merged PR \"Update Rfc6238AuthenticationService.cs\" (#2086)"},{"Id":"385172059","IsPullRequest":false,"CreatedAt":"2018-12-06T18:36:01","Actor":"ben-foster-rightio","Number":"2084","RawContent":null,"Title":"Random Authentication Sign Outs in ASP.NET Core 2.1","State":"closed","Body":"I'm receiving user complaints saying they are being directed to the login screen randomly when it has only been a minute or so since they clicked a button that would have sent a message to the server side.\r\n\r\nHere is a log of one of the errors.\r\n`[INF] Executed action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" in 1473.4897ms (afa2e885)\r\n[INF] Request finished in 1474.816ms 200 application/json; charset=utf-8 (791a596a)\r\n[INF] Request starting HTTP/1.1 GET http://MyAppmanager.MyApp.co.uk/api/AgreementAPI/GetAgreements?searchTerm=1543309403289   (ca22a1cb)\r\n[INF] Entity Framework Core \"2.1.3-rtm-32065\" initialized '\"IdentityDbContext\"' using provider '\"Microsoft.EntityFrameworkCore.SqlServer\"' with options: \"None\" (9958f5bb)\r\n[INF] Executed DbCommand (\"1\"ms) [Parameters=[\"@__get_Item_0='?' (DbType = Int32)\"], CommandType='Text', CommandTimeout='30']\"\r\n\"\"SELECT TOP(1) [e].[UserId], [e].[AcquisitionTeamId], [e].[AreaNumber], [e].[AuthorisationPassword], [e].[AutoBooking], [e].[AutoUpdateSoftware], [e].[AvayaFullName], [e].[AvayaName], [e].[AvaysExt], [e].[CanSellAgreement], [e].[ChangePassword], [e].[CompanyId], [e].[DateEnded], [e].[DateStarted], [e].[DebugLogs], [e].[DefaultQuotes], [e].[DepartmentId], [e].[EmailAddress], [e].[Forename], [e].[HomeServeEmployee], [e].[Initials], [e].[IsPurchaseOrderReviewer], [e].[JobTitle], [e].[LogonName], [e].[MaxLogins], [e].[Message], [e].[Name], [e].[Notes], [e].[PartTime], [e].[Password], [e].[ReportDDI], [e].[RoleId], [e].[Shift], [e].[ShowEngineerAlert], [e].[Surname], [e].[TerminationId], [e].[TrackFastVersion], [e].[UnreadMessage], [e].[VisibleOnChronicle]\r\nFROM [Users] AS [e]\r\nWHERE [e].[UserId] = @__get_Item_0\" (0723d8ff)\r\n[INF] AuthenticationScheme: \"Identity.Application\" signed out. (d3f50c8d)\r\n[INF] AuthenticationScheme: \"Identity.External\" signed out. (d3f50c8d)\r\n[INF] AuthenticationScheme: \"Identity.TwoFactorUserId\" signed out. (d3f50c8d)\r\n**[INF] \"Identity.Application\" was not authenticated. Failure message: \"No principal.\" (48071232)**\r\n[INF] Route matched with \"{action = \\\"GetAgreements\\\", controller = \\\"AgreementAPI\\\", page = \\\"\\\", area = \\\"\\\"}\". Executing action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" (a44c0341)\r\n[INF] Authorization failed. (b15dd539)\r\n[INF] Authorization failed for the request at filter '\"Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter\"'. (8b6446cb)\r\n[INF] Executing ChallengeResult with authentication schemes ([]). (f3dca807)\r\n[INF] AuthenticationScheme: \"Identity.Application\" was challenged. (d45f1f38)\r\n[INF] Executed action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" in 0.3846ms (afa2e885)\r\n[INF] Request finished in 9.3835ms 401  (791a596a)\r\n[INF] Request starting HTTP/1.1 POST http://MyAppmanager.MyApp.co.uk/API/CustomerAPI/WriteToLog/ application/x-www-form-urlencoded; charset=UTF-8 61 (ca22a1cb)\r\n[INF] Route matched with \"{action = \\\"WriteToLog\\\", controller = \\\"CustomerAPI\\\", page = \\\"\\\", area = \\\"\\\"}\". Executing action \"MyAppManager.Controllers.API.CustomerAPIController.WriteToLog (MyAppManager)\" (a44c0341)\r\n[INF] Executing action method \"MyAppManager.Controllers.API.CustomerAPIController.WriteToLog (MyAppManager)\" with arguments ([\"ERROR: WebAPI call is not authenticated\", \"error\"]) - Validation state: Valid (4e3479ed)\r\n[ERR] Client log: ERROR: WebAPI call is not authenticated (d4244074)\r\n`\r\n\r\n**Startup File**\r\n`public void ConfigureServices(IServiceCollection services)\r\n{\r\n\tservices.AddScoped<IRFDbRepository, RFDbRepository>();\r\n\tvar connection = _configuration.GetConnectionString(\"RFDbConnection\");\r\n\tservices.Configure<ConnectionStrings>(_configuration.GetSection(\"ConnectionStrings\"));\r\n\tservices.AddDbContext<RFDbContext>(options => options.UseSqlServer(connection));\r\n\tservices.AddDbContext<IdentityDbContext>(options => options.UseSqlServer(connection));\r\n\tservices.AddAutoMapper();\r\n\tservices.AddIdentity<User, UserRole>().AddDefaultTokenProviders();\r\n\tservices.AddTransient<IUserStore<User>, UserStore>();\r\n\tservices.AddTransient<IRoleStore<UserRole>, RoleStore>();\r\n\tservices.ConfigureApplicationCookie(options =>\r\n\t{\r\n\t\toptions.LoginPath = \"/Identity/Account/Login\";\r\n\t\toptions.LogoutPath = \"/Identity/Account/Logout\";\r\n\t\toptions.ExpireTimeSpan = TimeSpan.FromMinutes(60);\r\n\t\toptions.SlidingExpiration = true;                \r\n\t});\r\n\tservices.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1).AddRazorPagesOptions(options =>\r\n\t{\r\n\t\toptions.AllowAreas = true;\r\n\t\toptions.Conventions.AuthorizeAreaPage(\"Identity\", \"/Account/Logout\");\r\n\t});\r\n}`\r\n\r\n`public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, IRFDbRepository rFDbRepository)\r\n{\r\n\tloggerFactory.AddFile(_configuration.GetValue<string>(\"Logging:LogFile\"));\r\n\tapp.UseStaticFiles();\r\n\tapp.UseAuthentication();\r\n\tapp.UseMvc(routes =>\r\n\t{\r\n\t\troutes.MapRoute(\r\n\t\t\tname: \"default\",\r\n\t\t\ttemplate: \"{controller=Home}/{action=Index}/{id?}\");\r\n\t\troutes.MapRoute(\r\n\t\t\tname: \"ActionApi\",\r\n\t\t\ttemplate: \"api/{controller}/{action}/{id?}\");\r\n\t});\r\n\trFDbRepository.TestConnection();\r\n}`\r\n\r\nAlso I've setup the app pool as below:\r\n![image](https://user-images.githubusercontent.com/43367982/49141893-8fe42800-f2ef-11e8-8ea3-c79e45ca65a3.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2084","RelatedDescription":"Closed issue \"Random Authentication Sign Outs in ASP.NET Core 2.1\" (#2084)"},{"Id":"387530281","IsPullRequest":true,"CreatedAt":"2018-12-04T23:53:47","Actor":"natemcmaster","Number":"2092","RawContent":null,"Title":"This repo will be archived, project moved to aspnet/AspNetCore","State":"closed","Body":"As a part of https://github.com/aspnet/AspNetCore/issues/3598, this repo will be made read-only soon. The source code and issues will move to https://github.com/aspnet/AspNetCore.","Url":"https://github.com/aspnet/Identity/pull/2092","RelatedDescription":"Closed or merged PR \"This repo will be archived, project moved to aspnet/AspNetCore\" (#2092)"},{"Id":"382432623","IsPullRequest":true,"CreatedAt":"2018-12-04T23:49:57","Actor":"HaoK","Number":"2075","RawContent":null,"Title":"Port retry handler test improvement to 2.1","State":"closed","Body":"Port of similar fix for 2.2 https://github.com/aspnet/Identity/pull/2052","Url":"https://github.com/aspnet/Identity/pull/2075","RelatedDescription":"Closed or merged PR \"Port retry handler test improvement to 2.1\" (#2075)"},{"Id":"387479804","IsPullRequest":false,"CreatedAt":"2018-12-04T21:12:03","Actor":"LosManos","Number":"2091","RawContent":null,"Title":"The non-scaffolded razor page \"Register\" does not recognise Password.RequiredLength.","State":"closed","Body":"### Describe the bug\r\nSetting password length through \r\n```\r\npublic void ConfigureServices(IServiceCollection services){\r\n  ...\r\n  services.Configure<IdentityOptions>(options =>\r\n  {\r\n    options.Password.RequiredLength = 1;\r\n  });\r\n  ...\r\n```\r\ndoes not change the non-scaffolded razor page as it always says \"The Password must be at least 6 and at max 100 characters long.\" if inputed password is < 6 characters.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Create a new ASP.NET Core Web 2.1 application\r\n2. Select \"Web application (Model-View Controller)\" \r\n3. Select \"Change authentication\"\r\n3.1. Select \"Individual User Account\"\r\n4. Select Ok to have the project scaffolded.\r\n5. Open file Startup.cs\r\n6. Add \r\n```\r\nservices.Configure<IdentityOptions>(options =>\r\n{\r\n  options.Password.RequiredLength = 1;\r\n});\r\n```\r\nto method `ConfigureServices`.\r\n7. Press F5 (or select your favourite start-debug method).\r\n8. In the web browser that pops up\r\n8.1. Select Register\r\n8.2. Type \"a@example.com\" as user name (or select your favourite fast-to-type email addresss).\r\n8.3. Type \"a\" as password (or any password shorter than 6 characters).\r\n8.4. Select Register\r\n\r\n### Expected behavior\r\nThe web page should have been updated with information about successful creation of user.\r\n\r\n### Actual behaviour\r\nThe web page says \"The Password must be at least 6 and at max 100 characters long.\"\r\n\r\n### Additional context\r\nI have a question at stack overflow https://stackoverflow.com/questions/53620708/how-do-i-set-password-options-in-aspnet-core-2-1 that explains the same issue if this is not clear enough.\r\n\r\nThis issue might be duplicate of #774.","Url":"https://github.com/aspnet/Identity/issues/2091","RelatedDescription":"Closed issue \"The non-scaffolded razor page \"Register\" does not recognise Password.RequiredLength.\" (#2091)"},{"Id":"386513703","IsPullRequest":false,"CreatedAt":"2018-12-02T00:47:54","Actor":"NinoFloris","Number":"2089","RawContent":null,"Title":"No way to Add a password after creating user, except through Reset","State":"closed","Body":"So we do have RemovePasswordAsync but where's AddPasswordAsync? \r\nWe currently hack around it by using a Reset token we generated before it, but we do really need it for upgrading OAuth/Connect accounts to full accounts.","Url":"https://github.com/aspnet/Identity/issues/2089","RelatedDescription":"Closed issue \"No way to Add a password after creating user, except through Reset\" (#2089)"},{"Id":"385940834","IsPullRequest":false,"CreatedAt":"2018-12-01T01:11:14","Actor":"grahamehorner","Number":"2085","RawContent":null,"Title":"Q: moving of source","State":"closed","Body":"Is the identity repo under the aspnet/aspnetcore like other repos have ? ","Url":"https://github.com/aspnet/Identity/issues/2085","RelatedDescription":"Closed issue \"Q: moving of source\" (#2085)"},{"Id":"386331000","IsPullRequest":true,"CreatedAt":"2018-11-30T20:17:17","Actor":"dougbu","Number":"2088","RawContent":null,"Title":"Remove `SetCompatibiltyVersion(...)` call in sample","State":"closed","Body":"- aspnet/Mvc#7156 2 of ?","Url":"https://github.com/aspnet/Identity/pull/2088","RelatedDescription":"Closed or merged PR \"Remove `SetCompatibiltyVersion(...)` call in sample\" (#2088)"},{"Id":"378822046","IsPullRequest":true,"CreatedAt":"2018-11-29T21:55:44","Actor":"grahamehorner","Number":"2060","RawContent":null,"Title":"Update Rfc6238AuthenticationService.cs","State":"closed","Body":"20bytes is 160bits","Url":"https://github.com/aspnet/Identity/pull/2060","RelatedDescription":"Closed or merged PR \"Update Rfc6238AuthenticationService.cs\" (#2060)"},{"Id":"380746507","IsPullRequest":false,"CreatedAt":"2018-11-29T20:17:46","Actor":"wijnsema","Number":"2067","RawContent":null,"Title":"BypassTowFactor in SignInManager:ExternalLoginSignInAsync should default to False","State":"closed","Body":"As requested by @brockallen in #850 it is now possible to bypass 2FA in case of an external login. \r\n\r\nI'm sure there are good reasons to bypass 2FA, however the current implementation is far to general: \r\n\r\n- All providers all treated equal (some providers might not even support 2FA at all)\r\n- All users all treated equal (users can have 2FA enabled or not)\r\n\r\nThis bypass of 2FA really needs more refinement.\r\n\r\n**What makes this really a problem is the fact that it is enabled in the UI templates!** \r\nAs a developer using the template and enabling 2FA you expect 2FA to work for both local and external login!\r\n\r\nFurthermore, the redirect to the 2FA page is missing, so changing to call to `bypassTwoFactor = false` results in a confusing error that the user already exists.\r\n\r\nIn my opinion the following fragment from ExternalLogin.cshtml.cs\r\n```C#\r\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \r\n      info.ProviderKey, isPersistent: false, bypassTwoFactor: true);\r\nif (result.Succeeded)\r\n{\r\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \r\n      info.Principal.Identity.Name, info.LoginProvider);\r\n   return LocalRedirect(returnUrl);\r\n}\r\n```\r\nshould be replaced with\r\n```C#\r\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \r\n   info.ProviderKey, isPersistent: false, bypassTwoFactor: false);\r\nif (result.Succeeded)\r\n{\r\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \r\n      info.Principal.Identity.Name, info.LoginProvider);\r\n   return LocalRedirect(returnUrl);\r\n}\r\nif (result.RequiresTwoFactor)\r\n{\r\n   return RedirectToPage(\"./LoginWith2fa\", new { ReturnUrl = returnUrl });\r\n}\r\n```\r\nIf you enabled bypassTwoFactor it will still work.\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2067","RelatedDescription":"Closed issue \"BypassTowFactor in SignInManager:ExternalLoginSignInAsync should default to False\" (#2067)"},{"Id":"378006056","IsPullRequest":false,"CreatedAt":"2018-11-29T20:04:09","Actor":"blowdart","Number":"2058","RawContent":null,"Title":"Survey: Your experience using Identity UI and customization","State":"closed","Body":"We're taking a survey about how your experiences using ASP.NET Core Identity, and specifically Identity UI as a package.\r\n\r\nPlease give us your feedback, and, if you're willing, you might get a phone call to talk about your experiences in detail.\r\n\r\nhttps://microsoft.qualtrics.com/jfe/form/SV_3mTmFYDZAQutZMF ","Url":"https://github.com/aspnet/Identity/issues/2058","RelatedDescription":"Closed issue \"Survey: Your experience using Identity UI and customization\" (#2058)"},{"Id":"384918165","IsPullRequest":false,"CreatedAt":"2018-11-29T04:38:32","Actor":"OphiCA","Number":"2082","RawContent":null,"Title":"No sign-out authentication handler is registered for the scheme 'Identity.External'","State":"closed","Body":"Hello,\r\n\r\nFor several months now I've been trying to solve an issue with Identity, where 30-min on the dot after signing in, I am greeted by an `Invalid Operation Exception`:\r\n\r\n> InvalidOperationException: No sign-out authentication handler is registered for the scheme 'Identity.External'. The registered sign-out schemes are: Identity.Application. Did you forget to call AddAuthentication().AddCookies(\"Identity.External\",...)?\r\n\r\nSince it was on my blog site, I didn't put too much effort into it, even though it was an annoyance. Now, I'm looking into possibly some real world client work where I'd like to use ASP.NET Core with Identity, but I can't be having this same issue.\r\n\r\nCould someone please tell me why this exception throws? I don't want to use external schemes, so why is it trying to sign out of one? When did it sign into one?\r\n\r\nHere's the relevant code from my app, hopefully someone can point me in the right direction because I sure as heck can't.\r\n\r\n**Startup.cs**\r\n\r\n\tpublic sealed class Startup {\r\n\t\tpublic void ConfigureServices(\r\n\t\t\tIServiceCollection services) {\r\n\t\t\t//...\r\n\t\t\tservices.AddApplicationIdentity();\r\n\t\t\t//...\r\n\t\t\tservices.ConfigureApplicationCookie(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Cookie.SameSite = SameSiteMode.Strict;\r\n\t\t\t\t\to.Cookie.SecurePolicy = CookieSecurePolicy.Always;\r\n\r\n\t\t\t\t\to.AccessDeniedPath = new PathString(\"/admin\");\r\n\t\t\t\t\to.ExpireTimeSpan = TimeSpan.FromHours(4);\r\n\t\t\t\t\to.LoginPath = new PathString(\"/admin\");\r\n\t\t\t\t\to.LogoutPath = new PathString(\"/admin/sign-out\");\r\n\t\t\t\t});\r\n\t\t\tservices.Configure<IdentityOptions>(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Password.RequiredLength = 8;\r\n\r\n\t\t\t\t\to.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);\r\n\t\t\t\t\to.Lockout.MaxFailedAccessAttempts = 5;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic void Configure(\r\n\t\t\tIApplicationBuilder app) {\r\n\t\t\t//...\r\n\t\t\tapp.UseAuthentication();\r\n\t\t\t//...\r\n\t\t}\r\n\t}\r\n\r\n**ServiceCollectionExtensions**\r\n\r\n\tpublic static class ServiceCollectionExtensions {\r\n\t\tpublic static IdentityBuilder AddApplicationIdentity(\r\n\t\t\tthis IServiceCollection services) {\r\n\t\t\tservices.AddAuthentication(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.DefaultAuthenticateScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t\to.DefaultChallengeScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t\to.DefaultSignInScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t}).AddCookie(IdentityConstants.ApplicationScheme,\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Events = new CookieAuthenticationEvents {\r\n\t\t\t\t\t\tOnValidatePrincipal = SecurityStampValidator.ValidatePrincipalAsync\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\tservices.TryAddScoped<IdentityErrorDescriber>();\r\n\t\t\tservices.TryAddScoped<ILookupNormalizer, UpperInvariantLookupNormalizer>();\r\n\t\t\tservices.TryAddScoped<IPasswordHasher<User>, PasswordHasher<User>>();\r\n\t\t\tservices.TryAddScoped<IPasswordValidator<User>, PasswordValidator<User>>();\r\n\t\t\tservices.TryAddScoped<IUserClaimsPrincipalFactory<User>, UserClaimsPrincipalFactory<User>>();\r\n\t\t\tservices.TryAddScoped<UserManager<User>>();\r\n\t\t\tservices.TryAddScoped<IUserStore<User>, ApplicationUserStore>();\r\n\t\t\tservices.TryAddScoped<IUserValidator<User>, UserValidator<User>>();\r\n\t\t\tservices.TryAddScoped<ISecurityStampValidator, SecurityStampValidator<User>>();\r\n\t\t\tservices.TryAddScoped<SignInManager<User>>();\r\n\r\n\t\t\treturn new IdentityBuilder(typeof(User), services);\r\n\t\t}\r\n\t}\r\n\r\nI'm not going to include the `ApplicationUserStore` because I highly doubt it has anything to do with the exception. I'd appreciate any help because I am just struggling at this point. Thanks!","Url":"https://github.com/aspnet/Identity/issues/2082","RelatedDescription":"Closed issue \"No sign-out authentication handler is registered for the scheme 'Identity.External'\" (#2082)"},{"Id":"383003537","IsPullRequest":false,"CreatedAt":"2018-11-22T13:29:00","Actor":"LindaLawton","Number":"2079","RawContent":null,"Title":"Remember me isPersistent understanding","State":"closed","Body":"This is more of a question but its not enough of a question that i could post it up on stack overflow without risking it just getting closed as primary opinion based or to broad.   So i am going to put it here in hopes of getting an answer.\r\n\r\nThe issue is the understanding of how remember me is supposed to work.    My problem is that its not doing what we would expect it to do.   \r\n\r\nManagement expects when a user logs in and clicks remember me that they will then not be required to type their login and password again for a month.  Whether or not they will still have to type in the 2fa code is up for debate.\r\n\r\nWhat is actually happening is that i can close the browser reboot and come back for about an hour and 15 minutes and then i will be forced to type my password again.    This still happens even with a valid `.AspNetCore.Identity.Application` cookie set that is not due to expire for another month.\r\n\r\nAfter digging around in the code i found that Remember me is actually isPersistent and it is defined as.\r\n\r\n>Flag indicating whether the sign-in cookie should persist after the browser is closed.\r\n\r\nWhich brings you to:\r\n\r\nThere are two different types of Cookies:\r\n\r\n- session cookies, held in memory, and which expire once the browser exits\r\n- persistent cookies, which have a time-to-live, are persisted on disk, and are sent by the browser until their time-to-live has elapsed.\r\n\r\nAll this being said remember machine 2fa works as expected i am not prompted again for the 2fa and i have a cookie on my machine `Identity.TwoFactorRememberMe`.\r\n\r\nSo I guess my question is why are we not getting a `Identity.FactorRememberMe` or why isn't sign in respecting a long life time of the `AspNetCore.Identity.Application` cookie?\r\n\r\nHow is this supposed to work exactly?   I am following the code here even though we have normal MVC and not razor pages like you have in the example.  I am still just calling \r\n\r\n>var signInUserResult = await _signInManager.PasswordSignInAsync(userName, password, rememberMe, true);\r\n\r\nNote: I am using Asp .net Identity in Identity server 4 application.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2079","RelatedDescription":"Closed issue \"Remember me isPersistent understanding\" (#2079)"},{"Id":"383297898","IsPullRequest":false,"CreatedAt":"2018-11-21T22:08:40","Actor":"mmillican","Number":"2080","RawContent":null,"Title":"Replace a Role Validator","State":"closed","Body":"I am trying to create a custom role validator to support pseudo-multi-tenancy (which I know is not _officially_ supported in Identity) and am running into some issues.\r\n\r\nI've verified that my validator does work and is being called. However, the default validator appears to be called also. \r\n\r\nHere's my Identity service registration\r\n```\r\nservices.AddIdentity<User, Role>(setup =>\r\n    {\r\n        // Redacted settings\r\n    })\r\n    .AddRoleValidator<CustomRoleValidator<Role>>()\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders();\r\n```\r\n\r\nHow can I _remove_ the default RoleValidator?","Url":"https://github.com/aspnet/Identity/issues/2080","RelatedDescription":"Closed issue \"Replace a Role Validator\" (#2080)"},{"Id":"382890054","IsPullRequest":true,"CreatedAt":"2018-11-20T23:38:12","Actor":"dotnet-maestro-bot","Number":"2078","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\ngit checkout master\r\ngit merge --no-ff merge/release/2.2-to-master\r\ngit push origin master\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.2-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2078","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2078)"},{"Id":"382876972","IsPullRequest":true,"CreatedAt":"2018-11-20T23:38:12","Actor":"javiercn","Number":"2076","RawContent":null,"Title":"Update to IdentityServer 2.3.0","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2076","RelatedDescription":"Closed or merged PR \"Update to IdentityServer 2.3.0\" (#2076)"},{"Id":"382885320","IsPullRequest":true,"CreatedAt":"2018-11-20T23:19:15","Actor":"javiercn","Number":"2077","RawContent":null,"Title":"Update Identity Server dependencies to 2.3.0","State":"closed","Body":"This updates things on non-shipping product code, so it's ok to update (I asked).","Url":"https://github.com/aspnet/Identity/pull/2077","RelatedDescription":"Closed or merged PR \"Update Identity Server dependencies to 2.3.0\" (#2077)"},{"Id":"382068763","IsPullRequest":false,"CreatedAt":"2018-11-19T12:16:11","Actor":"wpqs","Number":"2074","RawContent":null,"Title":"Login doesn't show registered social logins after error","State":"closed","Body":"I'm using ASPNET Core 2.1 with Razor Pages UI Library and noticed that whilst registered social logins appear when I open the Login page, they disappear after an error like incorrect password.\r\n\r\nThere seems to be a bug in Identity\\Pages\\Account\\Login.cshtml.cs as \r\n````\r\n public IList<AuthenticationScheme> ExternalLogins { get; set; }\r\n\r\n````\r\nis only initialised in OnGetAsync(), but if an error happens OnPostAsync() then Page() is returned so OnGetAsyn() doesn't get called. Changing error handling in  OnPostAsync() so RedirectToPage() is returned seems to fix the problem.\r\n\r\nPlease confirm this is a bug and comment on my fix","Url":"https://github.com/aspnet/Identity/issues/2074","RelatedDescription":"Closed issue \"Login doesn't show registered social logins after error\" (#2074)"},{"Id":"381789469","IsPullRequest":true,"CreatedAt":"2018-11-17T00:27:58","Actor":"natemcmaster","Number":"2072","RawContent":null,"Title":"Upgrade projects to netcoreapp3.0","State":"closed","Body":"Changes:\r\n\r\n* Upgrade dependencies\r\n* Change TFM on Microsoft.AspNetCore.Identity to netcoreapp3.0\r\n* Remove .NET Framework tests\r\n\r\nPart of https://github.com/aspnet/AspNetCore/issues/3754","Url":"https://github.com/aspnet/Identity/pull/2072","RelatedDescription":"Closed or merged PR \"Upgrade projects to netcoreapp3.0\" (#2072)"},{"Id":"380931030","IsPullRequest":true,"CreatedAt":"2018-11-14T23:29:46","Actor":"pranavkm","Number":"2070","RawContent":null,"Title":"Use 3.0 configuration in RCLs","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2070","RelatedDescription":"Closed or merged PR \"Use 3.0 configuration in RCLs\" (#2070)"},{"Id":"378005714","IsPullRequest":false,"CreatedAt":"2018-11-14T21:00:55","Actor":"papyr","Number":"2057","RawContent":null,"Title":"AD directory user-groups; can IdentityRole be subclassed to implement Role-Groups or User-Groups","State":"closed","Body":"There is a disconnect with Active Directory, since we don't have support for User Groups in Identity, how can we implement or mirror this functionality inside ASP identity","Url":"https://github.com/aspnet/Identity/issues/2057","RelatedDescription":"Closed issue \"AD directory user-groups; can IdentityRole be subclassed to implement Role-Groups or User-Groups\" (#2057)"},{"Id":"380198930","IsPullRequest":false,"CreatedAt":"2018-11-14T17:33:59","Actor":"blankenbush","Number":"2065","RawContent":null,"Title":"Spelling error DeletePersonalData.cshtml.cs ","State":"closed","Body":"The word \"deleteing\" is wrong.  It should be \"deleting\" on line: 111; DeletePersonalData.cshtml.cs.\r\n\r\nAlso found in comment on line 183; SqlStoreTestBase.cs\r\n\r\n![capture](https://user-images.githubusercontent.com/187785/48412982-33401500-e714-11e8-903b-6e2fcc8e0a6a.PNG)\r\n","Url":"https://github.com/aspnet/Identity/issues/2065","RelatedDescription":"Closed issue \"Spelling error DeletePersonalData.cshtml.cs \" (#2065)"},{"Id":"380389829","IsPullRequest":true,"CreatedAt":"2018-11-14T17:33:01","Actor":"blankenbush","Number":"2066","RawContent":null,"Title":"Fix typo","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2066","RelatedDescription":"Closed or merged PR \"Fix typo\" (#2066)"},{"Id":"377364575","IsPullRequest":false,"CreatedAt":"2018-11-09T11:16:05","Actor":"yetanotherchris","Number":"2056","RawContent":null,"Title":"Should IdentityUser be in the EntityFramework namespace?","State":"closed","Body":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.entityframeworkcore.identityuser?view=aspnetcore-1.1\r\n\r\nI'm looking through various implementations from the [readme](https://github.com/aspnet/Identity/blob/master/README.md) and I've noticed they all use `IdentityUser ` for their concrete type to pass to `UserManager`, or have had to craft a custom type to be able to have a contract between the database and the .NET AspNetIdentity implentation they've written (see the DynamoDB library).\r\n\r\nI've had to do this too for the [Marten implementation I've written](https://github.com/yetanotherchris/Marten.AspNetIdentity), and the reason is, a `TUser` that your `UserStore` takes, should really be an interface - it will always have an email, most likely an Id of some sort, firstname, lastname and then a bag of properties.\r\n\r\nThings become even more abstract when dealing with claims.\r\n\r\nIf everyone is using `IdentityUser` or their own custom `TUser` doesn't this defeat the purpose of AspnetIdentity - which is to be able to switch and change implementations easily? That isn't possible if your consumer is tightly coupled with a `TUser` implementation of the library.\r\n\r\n### Example `TUser` implementations\r\n\r\n- [MongoIdentityUser](https://github.com/tugberkugurlu/AspNetCore.Identity.MongoDB/blob/master/src/AspNetCore.Identity.MongoDB/MongoIdentityUser.cs)\r\n- [DynamoIdentityUser](https://github.com/miltador/AspNetCore.Identity.DynamoDB/blob/master/src/AspNetCore.Identity.DynamoDB/DynamoIdentityUser.cs)\r\n- [Redis uses `IdentityUser<string>`](https://github.com/aguacongas/Identity.Redis/blob/develop/src/Aguacongas.Identity.Redis/UserStore.cs)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2056","RelatedDescription":"Closed issue \"Should IdentityUser be in the EntityFramework namespace?\" (#2056)"},{"Id":"376980171","IsPullRequest":true,"CreatedAt":"2018-11-02T21:57:29","Actor":"dotnet-maestro-bot","Number":"2055","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\ngit checkout master\r\ngit merge --no-ff merge/release/2.2-to-master\r\ngit push origin master\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.2-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2055","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2055)"},{"Id":"376978591","IsPullRequest":true,"CreatedAt":"2018-11-02T21:57:26","Actor":"javiercn","Number":"2054","RawContent":null,"Title":"Fixes integrity validation in Identity UI V3","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2054","RelatedDescription":"Closed or merged PR \"Fixes integrity validation in Identity UI V3\" (#2054)"},{"Id":"376977750","IsPullRequest":false,"CreatedAt":"2018-11-02T21:48:32","Actor":"javiercn","Number":"2053","RawContent":null,"Title":"Fix integrity tags on Identity UI V3","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/issues/2053","RelatedDescription":"Closed issue \"Fix integrity tags on Identity UI V3\" (#2053)"},{"Id":"376973581","IsPullRequest":true,"CreatedAt":"2018-11-02T21:48:08","Actor":"javiercn","Number":"2052","RawContent":null,"Title":"Fixes integrity validation hashes for Identity UI V3","State":"closed","Body":"Fixes https://github.com/aspnet/Identity/issues/2053","Url":"https://github.com/aspnet/Identity/pull/2052","RelatedDescription":"Closed or merged PR \"Fixes integrity validation hashes for Identity UI V3\" (#2052)"},{"Id":"376607709","IsPullRequest":false,"CreatedAt":"2018-11-01T23:29:51","Actor":"ycrumeyrolle","Number":"2051","RawContent":null,"Title":"[Question] Passwords should not be of type String ?","State":"closed","Body":"My security team escalated to me that the `PasswordHasher` is vulnerable to heap inspection, as the password is of type `String`. \r\nIt should be instead a byte array / span of bytes cleared at the end of the process, as it is done by any cryptographic operation in corefx. CC @bartonjs.\r\nSame problem with any password related types (`IPasswordValidator`, and maybe also the `IUserPasswordStore`)","Url":"https://github.com/aspnet/Identity/issues/2051","RelatedDescription":"Closed issue \"[Question] Passwords should not be of type String ?\" (#2051)"}],"ResultType":"GitHubIssue"},"Tooling-Issues":{"Issues":[{"Id":"597492854","IsPullRequest":true,"CreatedAt":"2020-04-09T19:44:41","Actor":"terrajobst","Number":"1097","RawContent":null,"Title":"Link Code of Conduct","State":"closed","Body":"See [this policy rule](https://github.com/dotnet/org-policy/blob/master/doc/PR15.md) for more details.","Url":"https://github.com/aspnet/Tooling/pull/1097","RelatedDescription":"Closed or merged PR \"Link Code of Conduct\" (#1097)"},{"Id":"585801568","IsPullRequest":false,"CreatedAt":"2020-03-22T20:10:12","Actor":"GaryFurash","Number":"1096","RawContent":null,"Title":"Creating Edit View with Non EFModel","State":"open","Body":"Using latest ASP.NET Core with latest Nuget on Visual Studio 2019 windows 10 pro.\r\n\r\nIf I try to create an Edit view based on a view model that isn't configured in the DB context (e.g., it's a model that doesn't map to a DB table in EF), even after adding the [Key] annotation I get the error:\r\n\r\n'The entity type 'RoleEdit' requires a primary key to be defined. If you intended to use a keyless entity type call 'HasNoKey()'.'\r\n\r\nI can't use HasNoKey since the model entity isn't in the context since it isn't a real table.\r\n","Url":"https://github.com/aspnet/Tooling/issues/1096","RelatedDescription":"Open issue \"Creating Edit View with Non EFModel\" (#1096)"},{"Id":"576654849","IsPullRequest":true,"CreatedAt":"2020-03-06T02:27:01","Actor":"mairaw","Number":"1095","RawContent":null,"Title":"Update link to a more proper target","State":"open","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1095","RelatedDescription":"Open PR \"Update link to a more proper target\" (#1095)"},{"Id":"499940912","IsPullRequest":false,"CreatedAt":"2019-09-28T16:33:15","Actor":"genifycom","Number":"1094","RawContent":null,"Title":"Add Razor Page using Entity Framework (CRUD)","State":"open","Body":"<!-- Describe what isn't working as expected -->\r\nWhen I right click on Pages and Add Razor page. I select Razor Pages using Entity Framework (CRUD). I select my Model class and my Data Context class and press Add.\r\n\r\nI expect to give the Razor page a name. But a Dialog pops up and says\r\n\r\nAdd Razor Page(s)\r\n\r\nThe following file(s) already exist:\r\n\r\nIndex\r\nIndex.cshtml.cs\r\n\r\nDo you want to replace them?\r\n---------------------------\r\nYes   No   \r\n---------------------------\r\n\r\nI do not expect that adding a Razor page will replace Index. I expect to create a NEW razor page with a new name. Saying No here does not allow one to continue.\r\n\r\n### Steps to reproduce\r\nAs above\r\n\r\nWe ❤ code! Include a complete code listing or attach a simplified project\r\n\r\nCreate a new ASP.NET Core Web Application. Use ASP.NET Core 3.0 and \"Web Application\".\r\nCreate a model class (Customer with int ID and string Name).\r\nAdd Razor Page using EF and CRUD.\r\nSelect Model class and add context class.\r\nClick Add\r\n\r\n### Further technical details\r\n\r\nEF Core version: 3.0\r\nDatabase provider: (e.g. Microsoft.EntityFrameworkCore.SqlServer)\r\nTarget framework: (e.g. .NET Core 3.0)\r\nOperating system: Windows 10\r\nIDE: (e.g. Visual Studio 2019 16.3) Visual Studio 2019 16.3.1\r\n","Url":"https://github.com/aspnet/Tooling/issues/1094","RelatedDescription":"Open issue \"Add Razor Page using Entity Framework (CRUD)\" (#1094)"},{"Id":"480473543","IsPullRequest":false,"CreatedAt":"2019-08-14T04:21:20","Actor":"AlseinX","Number":"1093","RawContent":null,"Title":"`dotnet new -i` does not work any more in preview8","State":"open","Body":"`dotnet new -i Microsoft.AspNetCore.Blazor.Templates::3.0.0-preview8.19405.7`\r\n\r\nResults:\r\n\r\n```\r\n用法: new [选项]\r\n\r\n选项:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --dry-run           Displays a summary of what would happen if the given command line were run if it would result in a template creation.\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n  --update-check      Check the currently installed template packs for updates.\r\n  --update-apply      Check the currently installed template packs for update, and install the updates.\r\n\r\n\r\nTemplates                                         Short Name               Language          Tags\r\n----------------------------------------------------------------------------------------------------------------------------------\r\nConsole Application                               console                  [C#], F#, VB      Common/Console\r\nClass library                                     classlib                 [C#], F#, VB      Common/Library\r\nWPF Application                                   wpf                      [C#], VB          Common/WPF\r\nWPF Class library                                 wpflib                   [C#], VB          Common/WPF\r\nWPF Custom Control Library                        wpfcustomcontrollib      [C#], VB          Common/WPF\r\nWPF User Control Library                          wpfusercontrollib        [C#], VB          Common/WPF\r\nWindows Forms (WinForms) Application              winforms                 [C#], VB          Common/WinForms\r\nWindows Forms (WinForms) Class library            winformslib              [C#], VB          Common/WinForms\r\nWorker Service                                    worker                   [C#]              Common/Worker/Web\r\nUnit Test Project                                 mstest                   [C#], F#, VB      Test/MSTest\r\nNUnit 3 Test Project                              nunit                    [C#], F#, VB      Test/NUnit\r\nNUnit 3 Test Item                                 nunit-test               [C#], F#, VB      Test/NUnit\r\nxUnit Test Project                                xunit                    [C#], F#, VB      Test/xUnit\r\nRazor Component                                   razorcomponent           [C#]              Web/ASP.NET\r\nRazor Page                                        page                     [C#]              Web/ASP.NET\r\nMVC ViewImports                                   viewimports              [C#]              Web/ASP.NET\r\nMVC ViewStart                                     viewstart                [C#]              Web/ASP.NET\r\nBlazor Server App                                 blazorserver             [C#]              Web/Blazor\r\nASP.NET Core Empty                                web                      [C#], F#          Web/Empty\r\nASP.NET Core Web App (Model-View-Controller)      mvc                      [C#], F#          Web/MVC\r\nASP.NET Core Web App                              webapp                   [C#]              Web/MVC/Razor Pages\r\nASP.NET Core with Angular                         angular                  [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js                        react                    [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js and Redux              reactredux               [C#]              Web/MVC/SPA\r\nRazor Class Library                               razorclasslib            [C#]              Web/Razor/Library/Razor Class Library\r\nASP.NET Core Web API                              webapi                   [C#], F#          Web/WebAPI\r\nASP.NET Core gRPC Service                         grpc                     [C#]              Web/gRPC\r\ndotnet gitignore file                             gitignore                                  Config\r\nglobal.json file                                  globaljson                                 Config\r\nNuGet Config                                      nugetconfig                                Config\r\nDotnet local tool manifest file                   tool-manifest                              Config\r\nWeb Config                                        webconfig                                  Config\r\nSolution File                                     sln                                        Solution\r\nProtocol Buffer File                              proto                                      Web/gRPC\r\n\r\nExamples:\r\n    dotnet new mvc --auth Individual\r\n    dotnet new wpfcustomcontrollib\r\n    dotnet new --help\r\n\r\n```\r\n\r\nRunning `dotnet new -i aaa::bbb` results the same.","Url":"https://github.com/aspnet/Tooling/issues/1093","RelatedDescription":"Open issue \"`dotnet new -i` does not work any more in preview8\" (#1093)"},{"Id":"477192366","IsPullRequest":true,"CreatedAt":"2019-08-06T06:25:26","Actor":"SuperChenSSS","Number":"1092","RawContent":null,"Title":"Point \"Set up DNS name for the VM\" link to the right direction","State":"open","Body":"The \"Set up DNS name for the VM\" link is incorrect and can't see the content. Change it to the right direction.","Url":"https://github.com/aspnet/Tooling/pull/1092","RelatedDescription":"Open PR \"Point \"Set up DNS name for the VM\" link to the right direction\" (#1092)"},{"Id":"477188104","IsPullRequest":true,"CreatedAt":"2019-08-06T06:24:35","Actor":"SuperChenSSS","Number":"1091","RawContent":null,"Title":"Point \"Set up DNS name for the VM\" link to the right direction","State":"closed","Body":"The \"Set up DNS name for the VM\" link is incorrect and can't see the content. Change it to the right direction.","Url":"https://github.com/aspnet/Tooling/pull/1091","RelatedDescription":"Closed or merged PR \"Point \"Set up DNS name for the VM\" link to the right direction\" (#1091)"},{"Id":"476745373","IsPullRequest":false,"CreatedAt":"2019-08-05T09:15:18","Actor":"juniormayhe","Number":"1090","RawContent":null,"Title":"Cannot start a webapi on specific SSL port managed by IISExpress","State":"open","Body":"A brand new netcore webapi 2.2 is created. \r\n\r\nCurrent launch settings:\r\n```\r\n{\r\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:62813\",\r\n      \"sslPort\": 44396\r\n    }\r\n  },\r\n```\r\n\r\nAfter setting the SSL port to anything such as 11000, application won't get started on IIS Express, but the same app runs correctly on port 11000 after being published to local IIS (https://localhost:11000).\r\n\r\nThe only way to start it on IIS Express is to keep 443 prefix (i.e. 44300, 44301, etc). \r\n\r\nIs this restriction by design as stated [here](https://developercommunity.visualstudio.com/content/problem/39430/changing-port-number-in-a-web-project-does-not-imm.html?childToView=43139#comment-43139)?\r\n\r\n\"You can change that value to whatever you want.\" definitely is not working as stated here: https://github.com/aspnet/Tooling/issues/286\r\n\r\n```\r\n- Visual Studio 2019 16.1.6\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-012264\r\n Commit:    be3f0c1a03\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27804-01\r\n  Commit:  fdf81c6faf\r\n\r\n.NET Core SDKs installed:\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800-preview-009696 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010219 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012264 [C:\\Program Files\\dotnet\\sdk]\r\n```","Url":"https://github.com/aspnet/Tooling/issues/1090","RelatedDescription":"Open issue \"Cannot start a webapi on specific SSL port managed by IISExpress\" (#1090)"},{"Id":"465641918","IsPullRequest":false,"CreatedAt":"2019-07-09T08:26:34","Actor":"plachor","Number":"1089","RawContent":null,"Title":"LaunchSettings are not respected by Test Runner","State":"open","Body":"In latest Visual Studio 2019, Test Runner ignores `environmentVariables` configuration which would allow for instance configuration of `ASPNETCORE_ENVIRONMENT`.\r\n\r\nThis would be beneficial for integration tests that in local environment use different appsettings (non-production).\r\n\r\nFor instance I would like to define following launchSettings.json:\r\n```json\r\n{\r\n  \"profiles\": {\r\n    \"SomeFancyNamespace.ProjectName.Integration.Tests\": {\r\n      \"commandName\": \"Project\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThere was an related issue that was closed: https://github.com/aspnet/Tooling/issues/456 ","Url":"https://github.com/aspnet/Tooling/issues/1089","RelatedDescription":"Open issue \"LaunchSettings are not respected by Test Runner\" (#1089)"},{"Id":"447378907","IsPullRequest":true,"CreatedAt":"2019-05-22T23:02:06","Actor":"Rick-Anderson","Number":"1088","RawContent":null,"Title":"Update dotnet-core-3.0-preview1.md","State":"open","Body":"MS Style guide violations and other clean up. Less is more.","Url":"https://github.com/aspnet/Tooling/pull/1088","RelatedDescription":"Open PR \"Update dotnet-core-3.0-preview1.md\" (#1088)"},{"Id":"433911513","IsPullRequest":true,"CreatedAt":"2019-04-16T17:57:10","Actor":"Rick-Anderson","Number":"1087","RawContent":null,"Title":"Update known-issues-vs2017.md","State":"open","Body":"Use Visual Studio Installer to install the missing Visual Studio component \".NET Core 1.0 - 1.1 developer tools for Web\" from the **Individual components** tab.","Url":"https://github.com/aspnet/Tooling/pull/1087","RelatedDescription":"Open PR \"Update known-issues-vs2017.md\" (#1087)"},{"Id":"430834286","IsPullRequest":false,"CreatedAt":"2019-04-09T17:36:29","Actor":"Ashishks1987","Number":"1086","RawContent":null,"Title":"System.Collections.Immutable dll being replace by Microsoft.Net.Compilers","State":"closed","Body":"I have referenced `system.collections.immutable.dll` from the nuget package and I also have the nuget package installed for `Microsoft.Net.Compilers`. Everything works fine in my local but when I push my code to bamboo, in the runtime I get `Could not load file or assembly 'System.Collections.Immutable, Version=1.2.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)`\r\n\r\nWhen I checked logs on bamboo when it generates the artifacts, I can see that initially it copied the correct dll here:\r\n\r\n`build    04-Apr-2019 03:20:33      Copying file from \"E:\\agt01\\ENS-EB580-JOB1\\Bin\\Packages\\System.Collections.Immutable.1.5.0\\lib\\netstandard1.0\\System.Collections.Immutable.dll\" to \"E:\\agt01\\ENS-EB580-JOB1\\Binaries\\Release\\\\temp\\Web\\_PublishedWebsites\\MyService\\bin\\System.Collections.Immutable.dll\"`.\r\n\r\nbut then at some point, it replaced this dll with this: `build    04-Apr-2019 03:20:33      Copying file from \"E:\\agt01\\ENS-EB580-JOB1\\Bin\\Packages\\Microsoft.Net.Compilers.1.0.0\\tools\\System.Collections.Immutable.dll\" to \"E:\\agt01\\ENS-EB580-JOB1\\Binaries\\Release\\\\temp\\Web\\_PublishedWebsites\\MyService\\bin\\System.Collections.Immutable.dll\".`\r\n\r\nHow can I make sure that bamboo does not replace this dll and just uses it from the nuget package installed?","Url":"https://github.com/aspnet/Tooling/issues/1086","RelatedDescription":"Closed issue \"System.Collections.Immutable dll being replace by Microsoft.Net.Compilers\" (#1086)"},{"Id":"422330835","IsPullRequest":false,"CreatedAt":"2019-03-18T17:00:12","Actor":"vikasNew","Number":"1085","RawContent":null,"Title":"web deploy on windows 10","State":"open","Body":"Hello,\r\n\r\ncan i publish my code by using web deploy to windows 10 machine.\r\n\r\ni have setup my testing windows 10 machine for deployment, which is in local area network.\r\n\r\nSo i want to publish my code to that remote machine by using web deploy. can i do that ?\r\n\r\ni have installed web deploy and also enabled web development remote service on windows 10 but i am not able to connect to remote machine using we deploy.\r\n\r\nThis returns me the following error every-time.\r\n\"ERROR_DESTINATION_NOT_REACHABLE\"\r\n\r\ninteresting thing is i also have windows 10 on my machine & i am able to use web deploy on my local machine but it's not working with remote windows 10 machine.\r\n\r\nis web deploy only meant for Windows servers not for other normal windows?\r\n\r\nThanks \r\n","Url":"https://github.com/aspnet/Tooling/issues/1085","RelatedDescription":"Open issue \"web deploy on windows 10\" (#1085)"},{"Id":"398036850","IsPullRequest":false,"CreatedAt":"2019-01-15T05:32:59","Actor":"chrgraefe","Number":"1084","RawContent":null,"Title":"Can't add area on ASP.NET Core MVC project","State":"closed","Body":"### Describe the bug\r\nA clear and concise description of what the bug is.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using this version of ASP.NET Core '3.0.100-preview-009812'\r\n2. New ASP.NET Core MVC project in VS2019 Preview\r\n3. Can't add area\r\n\r\n### Expected behavior\r\nA dialog to type area name\r\n","Url":"https://github.com/aspnet/Tooling/issues/1084","RelatedDescription":"Closed issue \"Can't add area on ASP.NET Core MVC project\" (#1084)"},{"Id":"391209971","IsPullRequest":false,"CreatedAt":"2018-12-14T18:00:59","Actor":"sai-manoj-kumar","Number":"1080","RawContent":null,"Title":"The template to create an ASP .NET VM is not working","State":"open","Body":"[The template given here](https://github.com/aspnet/Tooling/blob/AspNetVMs/docs/create-asp-net-vm-with-webdeploy.md#PowerShellScript) doesn't work. It gives the error SkuNotAvailable. Can someone please fix it?","Url":"https://github.com/aspnet/Tooling/issues/1080","RelatedDescription":"Open issue \"The template to create an ASP .NET VM is not working\" (#1080)"},{"Id":"385928083","IsPullRequest":false,"CreatedAt":"2018-12-07T20:30:45","Actor":"sinand","Number":"1079","RawContent":null,"Title":"auto build on browser request not working","State":"closed","Body":"I am using community edition 15.9.3 since  the previous update this feature is not working, everytime I have to build project.","Url":"https://github.com/aspnet/Tooling/issues/1079","RelatedDescription":"Closed issue \"auto build on browser request not working\" (#1079)"},{"Id":"383440110","IsPullRequest":false,"CreatedAt":"2018-11-26T19:03:29","Actor":"eriawan","Number":"1078","RawContent":null,"Title":"Feedback: ensure that .NET Core 1.0/1.1 tooling only supported in VS 2017 and won't be supported in VS 2019","State":"closed","Body":"Apologize if my feedback may sound controversial or may spark a debate.\r\n\r\nI need to be sure that the problem mentioned on this [page](https://github.com/aspnet/Tooling/blob/master/known-issues-vs2017.md#to-create-aspnet-core-10--11-projects-install-visual-studios-net-core-10---11-developer-tools-for-web-component) about .NET Core 1.0/1.1 tooling is installed when creating new ASP.NET Core 1.0/1.1 project should not happen or should not be supported in VS 2019.\r\n\r\nThese are my main concerns:\r\n\r\n1. VS 2019 is about to be released in around early 2019\r\n2. ASP.NET Core 1.0/1.1 is not going to be supported anymore, based on [this page](https://github.com/dotnet/core/blob/master/microsoft-support.md).\r\n3. Creating new ASP.NET Core 1.0/1.1 will always install the .NET Core 1.0/1.1 web tooling, and this is not necessary when previous reason has reached the unsupported period and it's quite near or might be the same time of VS 2019 release.\r\n4. Based on the problem mentioned above, VS 2017 has no \"built in\" tooling when creating new ASP.NET Core 1.0/1.1 project, but the external tooling may help. Therefore for those that still need to maintain ASP.NET Core 1.0/1.1 projects, we could use VS 2017 as long as the VS 2017 is still in support lifecycle or in mainstream support lifecycle.\r\n\r\nI welcome feedback 🙂 \r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1078","RelatedDescription":"Closed issue \"Feedback: ensure that .NET Core 1.0/1.1 tooling only supported in VS 2017 and won't be supported in VS 2019\" (#1078)"},{"Id":"349649932","IsPullRequest":true,"CreatedAt":"2018-08-10T20:38:21","Actor":"AndrewBrianHall","Number":"1077","RawContent":null,"Title":"Adding a .net core -> vs mapping table","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1077","RelatedDescription":"Closed or merged PR \"Adding a .net core -> vs mapping table\" (#1077)"},{"Id":"333613195","IsPullRequest":false,"CreatedAt":"2018-06-27T12:59:29","Actor":"Liero","Number":"1076","RawContent":null,"Title":"Unable to publish when using Microsoft.NET.Sdk.Razor","State":"closed","Body":"After I upgraded my solution from asp.net core 2.0 to 2.1, I'm not able to publish my web app from Visual Studio, although it can build.\r\n\r\nDuring the upgrade I've changed SDK in one of my class libraries to **Microsoft.NET.Sdk.Razor**, but now I'm getting a lot of errors and if project references were not recognized in this library when publishing.\r\n\r\n```\r\nConnecting to C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\publish\\...\r\nMyProject.Web -> C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\MyProject.Web.dll\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;RELEASE;NETCOREAPP;NETCOREAPP2_1 /errorendlocation /preferreduilang:en-US /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization.policy\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.Policy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.internal\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cryptography.Internal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.server.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.html.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Html.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.jsonpatch\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.JsonPatch.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.apiexplorer\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.dataannotations\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.json\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.viewfeatures\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.language\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Language.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.runtime\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.webutilities\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.WebUtilities.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.CodeAnalysis.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.dotnet.platformabstractions\\2.1.0\\lib\\netstandard1.3\\Microsoft.DotNet.PlatformAbstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Relational.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.SqlServer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Binder.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netcoreapp2.0\\Microsoft.Extensions.DependencyInjection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencymodel\\2.1.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.composite\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Composite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.filesystemglobbing\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileSystemGlobbing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.objectpool\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.ObjectPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Options.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.webencoders\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.WebEncoders.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.net.http.headers\\2.1.0\\lib\\netstandard2.0\\Microsoft.Net.Http.Headers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.VisualBasic.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.Win32.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.win32.registry\\4.5.0\\ref\\netstandard2.0\\Microsoft.Win32.Registry.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\mscorlib.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\netstandard.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json.bson\\1.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.Bson.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json\\11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\remotion.linq\\2.2.0\\lib\\netstandard1.0\\Remotion.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.AppContext.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Buffers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Concurrent.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Immutable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.NonGeneric.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Specialized.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Annotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.EventBasedAsync.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.TypeConverter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Console.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.Common.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.data.sqlclient\\4.5.0\\ref\\netcoreapp2.1\\System.Data.SqlClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Contracts.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Debug.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.DiagnosticSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.FileVersionInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Process.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.StackTrace.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TextWriterTraceListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tools.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TraceSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tracing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Dynamic.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Calendars.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.Brotli.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.ZipFile.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.DriveInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Watcher.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.IsolatedStorage.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.MemoryMappedFiles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Pipes.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.UnmanagedMemoryStream.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Expressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Queryable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.HttpListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Mail.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NameResolution.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NetworkInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Ping.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Requests.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.ServicePoint.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Sockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebHeaderCollection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.Client.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.Vectors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ObjectModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.DispatchProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.ILGeneration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.Lightweight.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.TypeExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Reader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.ResourceManager.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Writer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.CompilerServices.VisualC.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Handles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.RuntimeInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.WindowsRuntime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Loader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Formatters.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\ref\\netstandard2.0\\System.Security.AccessControl.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Claims.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Algorithms.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Csp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.X509Certificates.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.cryptography.xml\\4.5.0\\ref\\netstandard2.0\\System.Security.Cryptography.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.permissions\\4.5.0\\ref\\netstandard2.0\\System.Security.Permissions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Principal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.5.0\\ref\\netstandard2.0\\System.Security.Principal.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.SecureString.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceModel.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceProcess.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encodings.web\\4.5.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.RegularExpressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Overlapped.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Dataflow.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Thread.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.ThreadPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Timer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.Local.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ValueTuple.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.HttpUtility.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.ReaderWriter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlSerializer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\WindowsBase.dll\" /debug- /debug:portable /filealign:512 /optimize+ /out:obj\\Release\\netcoreapp2.1\\MyProject.Mail.dll /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:library /warnaserror- /utf8output /deterministic+ /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.CSharp.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.analyzers\\2.1.0\\analyzers\\dotnet\\cs\\Microsoft.EntityFrameworkCore.Analyzers.dll\" EmailDefaults.cs EmailOptions.cs MailSender.cs NotificationService.cs RazorViewToStringRenderer.cs \"C:\\Users\\daniel.turan\\AppData\\Local\\Temp\\.NETCoreApp,Version=v2.1.AssemblyAttributes.cs\" obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\\Release\\netcoreapp2.1\\\\Tem\tporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.RazorAssemblyInfo.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.AssemblyInfo.cs /warnaserror+:NU1605\r\nNotificationService.cs(15,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\nNotificationService.cs(16,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\n...\r\n```\r\n\r\nAlso, see https://stackoverflow.com/questions/50926116/publish-failed-when-using-microsoft-net-sdk-razor-if-reference-was-not-recognize for more details","Url":"https://github.com/aspnet/Tooling/issues/1076","RelatedDescription":"Closed issue \"Unable to publish when using Microsoft.NET.Sdk.Razor\" (#1076)"},{"Id":"329605262","IsPullRequest":false,"CreatedAt":"2018-06-05T20:05:23","Actor":"AngelosP","Number":"1075","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of dotnet-aspnet-codegenerator","State":"open","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","Url":"https://github.com/aspnet/Tooling/issues/1075","RelatedDescription":"Open issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of dotnet-aspnet-codegenerator\" (#1075)"},{"Id":"328747170","IsPullRequest":false,"CreatedAt":"2018-06-02T14:10:13","Actor":"AceHack","Number":"1074","RawContent":null,"Title":"Docker in launchSettings.json","State":"open","Body":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image.","Url":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Open issue \"Docker in launchSettings.json\" (#1074)"},{"Id":"328082529","IsPullRequest":true,"CreatedAt":"2018-06-01T17:41:04","Actor":"federicorinaldi","Number":"1073","RawContent":null,"Title":"Update dotnet-core-2.1.md","State":"closed","Body":"Visual Studio 2017 15.7 has been released now so this document is outdated","Url":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Closed or merged PR \"Update dotnet-core-2.1.md\" (#1073)"},{"Id":"323850872","IsPullRequest":false,"CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Number":"1072","RawContent":null,"Title":"can not upload file FTPS. ","State":"closed","Body":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072)"},{"Id":"317494886","IsPullRequest":false,"CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Number":"1071","RawContent":null,"Title":" Unable to start debugging","State":"open","Body":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Open issue \" Unable to start debugging\" (#1071)"},{"Id":"316585462","IsPullRequest":false,"CreatedAt":"2018-04-24T05:17:55","Actor":"rberger247","Number":"1070","RawContent":null,"Title":"Visual studio freezes when I run add-migration ","State":"closed","Body":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger.","Url":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070)"},{"Id":"308764422","IsPullRequest":false,"CreatedAt":"2018-03-27T05:23:09","Actor":"dvdobrovolskiy","Number":"1069","RawContent":null,"Title":"EntityFramework migrations not available to be applied during publish","State":"closed","Body":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc","Url":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069)"},{"Id":"304770827","IsPullRequest":false,"CreatedAt":"2018-03-14T05:33:19","Actor":"ghost","Number":"1068","RawContent":null,"Title":"Switch between Razor Page View and Code Behind","State":"closed","Body":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n","Url":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068)"},{"Id":"304312342","IsPullRequest":false,"CreatedAt":"2018-03-13T05:33:42","Actor":"RehanSaeed","Number":"1067","RawContent":null,"Title":"Support dotnet watch in launchSettings.json","State":"closed","Body":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine.","Url":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067)"},{"Id":"300865938","IsPullRequest":false,"CreatedAt":"2018-02-28T06:01:18","Actor":"rjamesnw","Number":"1066","RawContent":null,"Title":"Nesting bug","State":"closed","Body":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file.","Url":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066)"},{"Id":"290854647","IsPullRequest":false,"CreatedAt":"2018-01-24T01:14:53","Actor":"NeerajaRagesh","Number":"1065","RawContent":null,"Title":"Issue with Sales discount App - Odoo 9","State":"closed","Body":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n","Url":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"3261192807","IsPullRequest":false,"CreatedAt":"2025-07-24T20:43:37","Actor":"BrennanConroy","Number":"523","RawContent":null,"Title":"[Breaking change]: Obsolete IPNetwork and ForwardedHeadersOptions.KnownNetworks","State":"open","Body":"### Description\n\nReplacing `IPNetwork` with `System.Net.IPNetwork`.\n\n### Version\n\n.NET 10 Preview 7\n\n### Previous behavior\n\n```csharp\napp.UseForwardedHeaders(new ForwardedHeadersOptions\n{\n    KnownNetworks.Add(new(IPAddress.Loopback, 8))\n});\n```\n\n### New behavior\n\nUsing the APIs listed below will produce a compiler warning with diagnostic ID ASPDEPR005:\n> warning ASPDEPR005: Please use KnownIPNetworks instead. For more information, visit https://aka.ms/aspnet/deprecate/005.\n\nUse the `System.Net.IPNetwork` type and `ForwardedHeadersOptions.KnownIPNetworks` property instead.\n\n```csharp\napp.UseForwardedHeaders(new ForwardedHeadersOptions\n{\n    KnownIPNetworks.Add(new(IPAddress.Loopback, 8))\n});\n```\n\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [x] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\n`System.Net.IPNetwork` has replaced the `IPNetwork` type that was implemented for `ForwardedHeadersMiddleware`.\n\n### Recommended action\n\nChange to using `System.Net.IPNetwork` and `KnownIPNetworks`.\n\n### Affected APIs\n\n`Microsoft.AspNetCore.HttpOverrides.IPNetwork`\n`Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.KnownNetworks`","Url":"https://github.com/aspnet/Announcements/issues/523","RelatedDescription":"Open issue \"[Breaking change]: Obsolete IPNetwork and ForwardedHeadersOptions.KnownNetworks\" (#523)"},{"Id":"3261155907","IsPullRequest":false,"CreatedAt":"2025-07-24T20:29:01","Actor":"BrennanConroy","Number":"522","RawContent":null,"Title":"[Breaking change]: Razor runtime compilation is obsolete","State":"open","Body":"### Description\n\nRazor runtime compilation is obsolete and is not recommended for production scenarios. For production scenarios, use the default build time compilation. For development scenarios, use Hot Reload instead.\n\n### Version\n\n.NET 10 Preview 7\n\n### Previous behavior\n\nDevelopers could use [Razor runtime compilation](https://learn.microsoft.com/aspnet/core/mvc/views/view-compilation) to recompile `.cshtml` files while the application is running. This is useful for development time so you don't need to restart the application for changes to take affect.\n\nWe're now obsoleting this and recommending developers make use of [Hot Reload](https://learn.microsoft.com/aspnet/core/test/hot-reload) which has the same effect for development time.\n\n### New behavior\n\nUsing the APIs listed below will produce a compiler warning with diagnostic ID `ASPDEPR003`:\n> warning ASPDEPR003: Razor runtime compilation is obsolete and is not recommended for production scenarios. For production scenarios, use the default build time compilation. For development scenarios, use Hot Reload instead. For more information, visit https://aka.ms/aspnet/deprecate/003.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [x] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nRazor Runtime compilation has been replaced by Hot Reload which has been the recommended approach for a few years now. We're making it clearer that Razor Runtime compilation is not getting support for new features and should no longer be used.\n\n### Recommended action\n\nRemove calls to `.AddRazorRuntimeCompilation()` and use Hot Reload.\n\n### Affected APIs\n\n`Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPartExtensions`\n`Microsoft.Extensions.DependencyInjection.RazorRuntimeCompilationMvcBuilderExtensions.AddRazorRuntimeCompilation`\n`Microsoft.Extensions.DependencyInjection.RazorRuntimeCompilationMvcCoreBuilderExtensions.AddRazorRuntimeCompilation`\n`Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.FileProviderRazorProjectItem`\n`Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.MvcRazorRuntimeCompilationOptions`\n","Url":"https://github.com/aspnet/Announcements/issues/522","RelatedDescription":"Open issue \"[Breaking change]: Razor runtime compilation is obsolete\" (#522)"},{"Id":"3257036718","IsPullRequest":false,"CreatedAt":"2025-07-23T16:40:04","Actor":"captainsafia","Number":"521","RawContent":null,"Title":"[Breaking change]: IncludeOpenAPIAnalyzers property and MVC API analyzers are deprecated","State":"open","Body":"## Description\n\nThe `IncludeOpenAPIAnalyzers` MSBuild property and its associated MVC API analyzers are deprecated and will be removed in a future release. When `IncludeOpenAPIAnalyzers` is set to `true`, the build will now emit warning `ASPDEPR007`.\n\n## Version\n\n.NET 10 Preview 7\n\n## Previous behavior\n\nPreviously, developers could set `<IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers>` in their Web SDK projects to enable MVC API analyzers without any warnings or deprecation notices.\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers>\n  </PropertyGroup>\n</Project>\n```\n\nThe project would build successfully without any deprecation warnings.\n\n## New behavior\n\nStarting in .NET 10 Preview 7, when `IncludeOpenAPIAnalyzers` is set to `true`, the build will emit warning `ASPDEPR007`:\n\n```\nwarning ASPDEPR007: The IncludeOpenAPIAnalyzers property and its associated MVC API analyzers are deprecated and will be removed in a future release.\n```\n\nThe analyzers will continue to function, but developers will receive this deprecation warning during compilation.\n\n## Type of breaking change\n\n- [x] **Behavioral change**: Existing binaries may behave differently at run time.\n\n## Reason for change\n\n## Reason for change\n\nThe MVC API analyzers were originally introduced to help keep return types and attributes in sync for API controllers, ensuring consistency between method signatures and their corresponding OpenAPI documentation. These analyzers provided compile-time validation to catch mismatches between declared return types and the actual types returned by controller actions.\n\nHowever, with the introduction of Minimal APIs and the `TypedResults` pattern, the .NET ecosystem has evolved toward a more type-safe approach for API development. `TypedResults` provides compile-time guarantees about response types without requiring additional analyzers, making the MVC API analyzers redundant for modern .NET applications. In .NET 10, `TypedResults` are supported in controller-based APIs.\n\n**Previous approach with MVC API analyzers:**\n```csharp\n[HttpGet]\n[ProducesResponseType<Product>(200)]\n[ProducesResponseType(404)]\npublic async Task<ActionResult> GetProduct(int id)\n{\n    var product = await _productService.GetByIdAsync(id);\n    if (product == null)\n        return NotFound(); // Analyzer ensures this matches ProducesResponseType(404)\n    \n    return Ok(product); // Analyzer ensures this matches ProducesResponseType<Product>(200)\n}\n```\n\n**Or with controller actions using TypedResults:**\n```csharp\n[HttpGet(\"{id}\")]\npublic async Task<Results<Ok<Product>, NotFound>> GetProduct(int id)\n{\n    var product = await _productService.GetByIdAsync(id);\n    return product == null \n        ? TypedResults.NotFound() \n        : TypedResults.Ok(product);\n}\n```\n\nThe `TypedResults` pattern eliminates the need for separate analyzers because the return type itself (`Results<Ok<Product>, NotFound>`) explicitly declares all possible response types at compile time. This approach is more maintainable, provides better IntelliSense support, and automatically generates accurate OpenAPI documentation without additional tooling.\n\nAs the .NET ecosystem continues to embrace `TypedResults` as the recommended pattern for API development, the MVC API analyzers have become obsolete and are being deprecated to streamline the development experience.\n\n## Recommended action\n\nDevelopers should:\n\n1. **Remove the deprecated property**: Remove `<IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers>` from your project files to eliminate the warning.\n\n2. **Suppress the warning temporarily**: If you need to continue using the deprecated analyzers temporarily, you can suppress the warning:\n\n```xml\n<PropertyGroup>\n  <NoWarn>$(NoWarn);ASPDEPR007</NoWarn>\n</PropertyGroup>\n```\n\n3. **Migrate to TypedResults**: Migrate to the `TypedResults` pattern documented above to ensure better consistency between application behavior and OpenAPI documentation.\n\n## Affected APIs\n\n- MSBuild property: `IncludeOpenAPIAnalyzers`\n- Associated MVC API analyzers included when `IncludeOpenAPIAnalyzers` is `true`","Url":"https://github.com/aspnet/Announcements/issues/521","RelatedDescription":"Open issue \"[Breaking change]: IncludeOpenAPIAnalyzers property and MVC API analyzers are deprecated\" (#521)"},{"Id":"3244334287","IsPullRequest":false,"CreatedAt":"2025-07-18T20:43:18","Actor":"captainsafia","Number":"520","RawContent":null,"Title":"[Breaking change]: Deprecation of IActionContextAccessor","State":"open","Body":"# Description\n\n`IActionContextAccessor` and `ActionContextAccessor` have been marked as obsolete in ASP.NET Core with diagnostic ID `ASPDEPR006`. With the introduction of endpoint routing, `IActionContextAccessor` is no longer necessary as developers can access action descriptor and metadata information directly through `HttpContext.GetEndpoint()`.\n\n# Version\n\n.NET 10 Preview 7\n\n# Previous behavior\n\nDevelopers could use `IActionContextAccessor` to access the current `ActionContext`:\n\n```csharp\npublic class MyService\n{\n   private readonly IActionContextAccessor _actionContextAccessor;\n   \n   public MyService(IActionContextAccessor actionContextAccessor)\n   {\n       _actionContextAccessor = actionContextAccessor;\n   }\n   \n   public void DoSomething()\n   {\n       var actionContext = _actionContextAccessor.ActionContext;\n       var actionDescriptor = actionContext?.ActionDescriptor;\n       // Use action descriptor metadata\n   }\n}\n```\n\n# New behavior\n\nUsing `IActionContextAccessor` and `ActionContextAccessor` will produce a compiler warning with diagnostic ID `ASPDEPR006`:\n\n```\nwarning ASPDEPR006: ActionContextAccessor is obsolete and will be removed in a future version. For more information, visit https://aka.ms/aspnet/deprecate/006.\n```\n\n# Type of breaking change\n\n- **Source incompatible**: When recompiled using the new SDK, existing source code will receive obsolete warnings and may require source changes for future compatibility.\n- **Behavioral change**: The functionality still works but is marked for future removal.\n\n# Reason for change\n\nWith the introduction of endpoint routing in ASP.NET Core, `IActionContextAccessor` is no longer necessary. The endpoint routing infrastructure provides a cleaner, more direct way to access endpoint metadata through `HttpContext.GetEndpoint()`, aligning with ASP.NET Core's architectural evolution toward endpoint routing.\n\n# Recommended action\n\nMigrate from `IActionContextAccessor` to `IHttpContextAccessor` and use `HttpContext.GetEndpoint()`:\n\n**Before:**\n```csharp\npublic class MyService\n{\n   private readonly IActionContextAccessor _actionContextAccessor;\n   \n   public MyService(IActionContextAccessor actionContextAccessor)\n   {\n       _actionContextAccessor = actionContextAccessor;\n   }\n   \n   public void DoSomething()\n   {\n       var actionContext = _actionContextAccessor.ActionContext;\n       var actionDescriptor = actionContext?.ActionDescriptor;\n       // Use action descriptor metadata\n   }\n}\n```\n\n**After:**\n```csharp\npublic class MyService\n{\n   private readonly IHttpContextAccessor _httpContextAccessor;\n   \n   public MyService(IHttpContextAccessor httpContextAccessor)\n   {\n       _httpContextAccessor = httpContextAccessor;\n   }\n   \n   public void DoSomething()\n   {\n       var httpContext = _httpContextAccessor.HttpContext;\n       var endpoint = httpContext?.GetEndpoint();\n       var actionDescriptor = endpoint?.Metadata.GetMetadata<ActionDescriptor>();\n       // Use action descriptor metadata\n   }\n}\n```\n\n# Affected APIs\n\n- `Microsoft.AspNetCore.Mvc.Infrastructure.IActionContextAccessor`\n- `Microsoft.AspNetCore.Mvc.Infrastructure.ActionContextAccessor`","Url":"https://github.com/aspnet/Announcements/issues/520","RelatedDescription":"Open issue \"[Breaking change]: Deprecation of IActionContextAccessor\" (#520)"},{"Id":"3240228074","IsPullRequest":false,"CreatedAt":"2025-07-17T16:43:05","Actor":"captainsafia","Number":"519","RawContent":null,"Title":"[Breaking change]: Deprecation of `WithOpenApi` extension method","State":"open","Body":"### Description\n\nThe `WithOpenApi` extension methods in **`Microsoft.AspNetCore.OpenApi.OpenApiEndpointConventionBuilderExtensions`** have been **deprecated**. Invoking these methods now produces the compile-time diagnostic **ASPDEPR002** and a standard `[Obsolete]` warning stating that *“WithOpenApi is deprecated and will be removed in a future release. For more information, visit https://aka.ms/aspnet/deprecate/002.”*\n\n### Version  \n.NET 10 Preview 7\n\n### Previous behavior\n\n```csharp\napp.MapGet(\"/weather\", () => ...)\n   .WithOpenApi();   // no warnings\n```\n\n### New behavior\n\n```csharp\napp.MapGet(\"/weather\", () => ..)\n   .WithOpenApi();   // warning ASPDEPR002: WithOpenApi is deprecated …\n```\n\nThe call still compiles and executes, but the build now emits the new deprecation warning.\n\n### Type of breaking change\n\n- [ ] Binary incompatible  \n- [ ] Source incompatible  \n- [x] Behavioral change (new compiler warning)\n\n### Reason for change\n\n`WithOpenApi` duplicated functionality now provided by the built-in OpenAPI document generation pipeline. Deprecating it simplifies the API surface and prepares for its eventual removal.\n\n### Recommended action\n\nRemove `.WithOpenApi()` calls in the code.\n\n- If using `Microsoft.AspNetCore.OpenApi` for document generation, use with `AddOpenApiOperationTransformer` extension method.\n\n**Before**\n\n```csharp\nusing Microsoft.AspNetCore.OpenApi;\n\nvar builder = WebApplication.CreateBuilder();\nvar app = builder.Build();\n\napp.MapGet(\"/weather\", () => ..)\n   .WithOpenApi(operation =>\n   {\n       // Per-endpoint tweaks\n       operation.Summary     = \"Gets the current weather report.\";\n       operation.Description = \"Returns a short description and emoji.\";\n       return operation;\n   });\n\napp.Run();\n```\n\n**After**\n\n```csharp\nusing Microsoft.AspNetCore.OpenApi;\n\nvar builder = WebApplication.CreateBuilder();\nvar app = builder.Build();\n\napp.MapGet(\"/weather\", () => ..)\n   .AddOpenApiOperationTransformer((opperation, context, ct) =>\n   {\n       // Per-endpoint tweaks\n       operation.Summary     = \"Gets the current weather report.\";\n       operation.Description = \"Returns a short description and emoji.\";\n       return Task.CompleteTask;\n   });\n\napp.Run();\n```\n\n- If using `Swashbuckle` for document generation, use the `IOperationFilter` API.\n- If using `NSwag` for document generation, use the `IOperationProcessor` API.\n\n### Affected APIs\n\n- `TBuilder OpenApiEndpointConventionBuilderExtensions.WithOpenApi<TBuilder>(this TBuilder builder)`  \n- `TBuilder OpenApiEndpointConventionBuilderExtensions.WithOpenApi<TBuilder>(this TBuilder builder, Func<OpenApiOperation, OpenApiOperation> configureOperation)`  \n  (all overloads)","Url":"https://github.com/aspnet/Announcements/issues/519","RelatedDescription":"Open issue \"[Breaking change]: Deprecation of `WithOpenApi` extension method\" (#519)"},{"Id":"3217437297","IsPullRequest":false,"CreatedAt":"2025-07-09T23:46:12","Actor":"captainsafia","Number":"518","RawContent":null,"Title":"[Breaking change]: Deprecation of Microsoft.Extensions.ApiDescription.Client package","State":"open","Body":"### Description\n\nThe **Microsoft.Extensions.ApiDescription.Client** NuGet package has been **deprecated** starting in **.NET 10 Preview 7**.  The package supplied MSBuild targets and CLI support (e.g., `dotnet openapi`, the `OpenApiReference` item group, and `OpenApiProjectReference` property) that generated OpenAPI-based client code during the build. Projects that reference the package will now receive a warning during build.\n\n### Version\n\n.NET 10 Preview 7\n\n### Previous behavior\n\nProjects could add `<PackageReference Include=\"Microsoft.Extensions.ApiDescription.Client\" … />` and  `<OpenApiReference>` (or run `dotnet openapi`) to generate strongly-typed clients at build time.\n\n### New behavior\n\n 1. **Remove** any `<PackageReference Include=\"Microsoft.Extensions.ApiDescription.Client\" … />` from your project.  \n        2. Replace `<OpenApiReference>` items or `dotnet openapi` commands with generator-specific tooling:  \n           * **NSwag** – use `npx nswag` or `dotnet tool run nswag` with an `.nswag` config file.  \n           * **Kiota** – install with `dotnet tool install -g Microsoft.OpenApi.Kiota` and run `kiota generate`.  \n           * **OpenAPI Generator** – invoke `openapi-generator-cli` via JAR or Docker.  \n        3. Commit the generated client code or run generation in a custom pre-build step that does not rely on the removed package.\n    validations:\n      required: true\n\n  - type: textarea\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [x] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\n * The package has seen minimal updates and maintenance since its introduction.  \n* Its abstractions were tightly coupled to certain generators and did not scale well to others.\n* Each generator now ships its own CLI/configuration experience, making the MSBuild middle-layer redundant.  \n* Removing the package reduces maintenance burden and clarifies the recommended workflow for client generation.\n\n### Recommended action\n\n 1. **Remove** any `<PackageReference Include=\"Microsoft.Extensions.ApiDescription.Client\" … />` from your project.  \n2. Replace `<OpenApiReference>` items or `dotnet openapi` commands with generator-specific tooling:  \n * **NSwag** – use `npx nswag` or `dotnet tool run nswag` with an `.nswag` config file.  \n * **Kiota** – install with `dotnet tool install -g Microsoft.OpenApi.Kiota` and run `kiota generate`.  \n  * **OpenAPI Generator** – invoke `openapi-generator-cli` via JAR or Docker. \n\n### Affected APIs\n\n* NuGet package **Microsoft.Extensions.ApiDescription.Client**  \n* MSBuild item **`OpenApiReference`** (all instances)  \n* MSBuild property **`OpenApiProjectReference`**  \n* CLI command **`dotnet openapi`**","Url":"https://github.com/aspnet/Announcements/issues/518","RelatedDescription":"Open issue \"[Breaking change]: Deprecation of Microsoft.Extensions.ApiDescription.Client package\" (#518)"},{"Id":"3196976210","IsPullRequest":false,"CreatedAt":"2025-07-02T19:32:34","Actor":"BrennanConroy","Number":"517","RawContent":null,"Title":"[Breaking change]: Forwarded Headers Middleware Now Ignores X-Forwarded-* Headers from Unknown Proxies","State":"open","Body":"### Description\n\nStarting in ASP.NET Core 8.0.17 and 9.0.6, the Forwarded Headers Middleware will ignore all `X-Forwarded-*` headers from proxies that are not explicitly configured as trusted.\n\n### Version\n\n.NET 8\n\n### Previous behavior\n\nPreviously, the middleware, when not configured to use `X-Forwarded-For`, would process `X-Forwarded-Prefix`, `X-Forwarded-Proto`, and `X-Forwarded-Host` headers from any source, potentially allowing malicious or misconfigured proxies/clients to spoof these headers and affect your application's understanding of client information.\n\n### New behavior\n\nWith this change, only headers sent by known, trusted proxies (as configured via `ForwardedHeadersOptions.KnownProxies` and `ForwardedHeadersOptions.KnownNetworks`) will be processed. Headers from unknown sources will be ignored.\n\n**This is a breaking change**: If your deployment relied on forwarded headers from proxies not configured in your application's trusted proxy list, those headers will no longer be honored.\n\nThis can cause behavior like infinite redirects if you're using the Https redirection middleware and using TLS termination in your proxy. Or authentication to fail if using TLS termination and expecting an https request.\n\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [x] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThe change was made for security hardening, as the proxy and IP lists weren't being applied in all cases.\n\n### Recommended action\n\n- **Review your deployment topology:**  \n  Ensure that all legitimate proxy servers in front of your app are properly added to `KnownProxies` or `KnownNetworks` in your `ForwardedHeadersOptions` configuration.\n  ```csharp\n  app.UseForwardedHeaders(new ForwardedHeadersOptions\n  {\n      KnownProxies = { IPAddress.Parse(\"YOUR_PROXY_IP\") }\n  });\n  ```\n  Or, for a network:\n  ```csharp\n  app.UseForwardedHeaders(new ForwardedHeadersOptions\n  {\n      KnownNetworks = { new IPNetwork(IPAddress.Parse(\"YOUR_NETWORK_IP\"), PREFIX_LENGTH) }\n  });\n  ```\n\n- **If you wish to enable previous behavior:**  \n  You may need to relax your configuration, but this is **not recommended** due to security risks. You can do this by clearing the `KnownNetworks` and `KnownProxies` lists in `ForwardedHeadersOptions` to allow any proxy or network to forward these headers.\n\nYou can also set the `ASPNETCORE_FORWARDEDHEADERS_ENABLED` environment variable to true, which clears the lists and enables `ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto`.\n\nNote: In cloud environments, the proxy IP(s) can change over the lifetime of the app and `ASPNETCORE_FORWARDEDHEADERS_ENABLED` is sometimes used to make forwarded headers work.\n\n### References\n\n- [Forwarded Headers Middleware documentation](https://learn.microsoft.com/aspnet/core/host-and-deploy/proxy-load-balancer)\n\n### Affected APIs\n\n`UseForwardedHeaders();`","Url":"https://github.com/aspnet/Announcements/issues/517","RelatedDescription":"Open issue \"[Breaking change]: Forwarded Headers Middleware Now Ignores X-Forwarded-* Headers from Unknown Proxies\" (#517)"},{"Id":"2662868601","IsPullRequest":false,"CreatedAt":"2024-11-15T18:59:39","Actor":"maraf","Number":"516","RawContent":null,"Title":"[Breaking change]: Legacy Mono and Emscripten JavaScript APIs are not exported to global namespace in Blazor WebAssembly applications","State":"open","Body":"### Description\n\nIn previous versions of Blazor WebAssembly, legacy Mono and Emscripten APIs were exported to global namespace. \r\nFrom 9.0 those APIs are accessible throught Blazor.runtime object.\n\n### Version\n\n.NET 9 GA\n\n### Previous behavior\n\nLegacy Mono (MONO, BINDING) and Emscripten Module object was exported to global window object.\r\nFor example `window.Module.FS` returned emscripten virtual filesystem.\n\n### New behavior\n\nEmscripten Module object is now exported to `Blazor.runtime` object.\r\nFor example `Blazor.runtime.Module.FS` returns emscripten virtual filesystem.\r\nLegacy Mono API for interop was removed completely (MONO and BINDING) and replaced with JSImport/JSExport.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThe general goal is not to polute global namespace and keep all the APIs accessible from single Blazor object.\n\n### Recommended action\n\nReplace accessing Emscripten APIs from window object to Blazor.runtime object.\n\n### Affected APIs\n\nwindow.MONO.*\r\nwindow.BINDING.*\r\nwindow.Module.*","Url":"https://github.com/aspnet/Announcements/issues/516","RelatedDescription":"Open issue \"[Breaking change]: Legacy Mono and Emscripten JavaScript APIs are not exported to global namespace in Blazor WebAssembly applications\" (#516)"},{"Id":"2606573022","IsPullRequest":false,"CreatedAt":"2024-10-22T21:39:01","Actor":"amcasey","Number":"515","RawContent":null,"Title":"[Breaking change]: dev cert export no longer creates folder","State":"open","Body":"### Description\n\nWhen you export the ASP.NET Core development certificate (used to enable https in local development), it will no longer create the directory into which the certificate is being exported, if that directory doesn’t already exist.\r\n\r\nThis change first appears in 8.0.10 and 9.0 RC1.\n\n### Version\n\n.NET 8 GA\n\n### Previous behavior\n\n```\r\ndotnet dev-certs https -ep C:\\NonExistent\\cert.pfx\r\n```\r\n\r\nIf `C:\\NonExistent\\` did not exist when the command was run, it would be created (with permissions inherited from the containing directory).\n\n### New behavior\n\nThe target directory must exist or the export will fail with a message like `There was an error exporting the HTTPS developer certificate to a file.`\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThe development certificate is exported with its private key, so unauthorized access can be very problematic.  It may, nevertheless, be necessary to make it readable to multiple accounts - e.g. if the consuming process will not be run as the current user.  Rather than attempting to determine (and securely establish) permissions for the target directory, `dotnet dev-certs` require that it already exist.\n\n### Recommended action\n\nCreate the target directory (with appropriate permissions) before invoking `dotnet dev-certs`.\n\n### Affected APIs\n\nThis functionality is not presently exposed via an API - it is invoked from the command line.","Url":"https://github.com/aspnet/Announcements/issues/515","RelatedDescription":"Open issue \"[Breaking change]: dev cert export no longer creates folder\" (#515)"},{"Id":"2603358974","IsPullRequest":false,"CreatedAt":"2024-10-21T18:34:48","Actor":"amcasey","Number":"514","RawContent":null,"Title":"[Breaking change]: Handling of middleware types with multiple constructors","State":"open","Body":"### Description\n\nFormerly, when a middleware type with multiple satisfiable constructors was instantiated from the dependency injection container, the one with the most parameters would be used.  Now that only happens if the dependency injection container implements [`IServiceProviderIsService`](https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.iserviceproviderisservice).\n\n### Version\n\n.NET 9 RC 1\n\n### Previous behavior\n\nFormerly, the first constructor was preferred (when both were satisfied) because it has more parameters.\r\n\r\n```csharp\r\npublic class CookiePolicyMiddleware\r\n{\r\n    public CookiePolicyMiddleware(RequestDelegate next, IOptions<CookiePolicyOptions> options, ILoggerFactory factory)\r\n    {\r\n        // Omitted for brevity\r\n    }\r\n\r\n    public CookiePolicyMiddleware(RequestDelegate next, IOptions<CookiePolicyOptions> options)\r\n    {\r\n        // Omitted for brevity\r\n    }\r\n}\r\n```\n\n### New behavior\n\nNow, neither constructor is preferred and construction fails with an error like \r\n```\r\nSystem.InvalidOperationException: 'Multiple constructors accepting all given argument types have been found in type 'Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware'. There should only be one applicable constructor.'\r\n```\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThe activation mechanism was [changed](https://github.com/dotnet/aspnetcore/pull/55722) to help support keyed dependency injection.\n\n### Recommended action\n\nIf this happens and you can't upgrade to a dependency injection container that implements `IServiceProviderIsService`, you can add `ActivatorUtilitiesConstructorAttribute` to the preferred constructor of the affected middleware type.\n\n### Affected APIs\n\nThis is [known](https://github.com/dotnet/aspnetcore/issues/57231) to cause errors when instantiating `Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware` with [Autofac.Extensions.DependencyInjection](https://www.nuget.org/packages/Autofac.Extensions.DependencyInjection) 7.x.","Url":"https://github.com/aspnet/Announcements/issues/514","RelatedDescription":"Open issue \"[Breaking change]: Handling of middleware types with multiple constructors\" (#514)"},{"Id":"2518176374","IsPullRequest":true,"CreatedAt":"2024-09-12T23:00:13","Actor":"terrajobst","Number":"513","RawContent":null,"Title":"Add SECURITY.md","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/513","RelatedDescription":"Closed or merged PR \"Add SECURITY.md\" (#513)"},{"Id":"2180295666","IsPullRequest":false,"CreatedAt":"2024-03-11T21:34:47","Actor":"amcasey","Number":"512","RawContent":null,"Title":"[Breaking change]: DefaultKeyResolution.ShouldGenerateNewKey has a slightly altered meaning","State":"open","Body":"### Description\r\n\r\n`DefaultKeyResolution.ShouldGenerateNewKey` no longer reflects whether the default key is close to its expiration time.\r\n\r\n### Version\r\n\r\n.NET 9 Preview 3\r\n\r\n### Previous behavior\r\n\r\nIt was an undocumented, but consistent, feature of the API that `ShouldGenerateNewKey` would be true if the default key was within two days (an over-simplification) of its expiration time.  The amount of lead time was based on the polling interval of `ICacheableKeyRingProvider`, which was not something `IDefaultKeyResolver.ResolveDefaultKeyPolicy` should have depended upon (since, for example, alternative implementations would probably not be aware of these details).\r\n\r\n### New behavior\r\n\r\nIf `ShouldGenerateNewKey` is true, it now indicates that either there is no default key or that for some other policy reason (i.e. in a specialized implementation of `IDefaultKeyResolver`, a new key should be generated.  The `ICacheableKeyRingProvider` will make its own decision about whether the expiration time is close enough to warrant generating a new key.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nFirst, we wanted to change the logic around key generation near expiration time and, second, this makes it more straightforward to implement a custom `IDefaultKeyResolver`.\r\n\r\nNote that the documentation for this type already states that \"This API supports infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases.\"\r\n\r\n### Recommended action\r\n\r\nIf you have an `IDefaultKeyResolver` implementation that tries to replicate the expiry logic, that logic can be removed (however, leaving it is fine as well).\r\n\r\nIf you were consuming `IDefaultKeyResolver` directly, for the express purpose of determining whether expiration was pending and that continues to be important, you can the default key's `ExpirationDate` property directly.\r\n\r\n### Affected APIs\r\n\r\nMicrosoft.AspNetCore.DataProtection.KeyManagement.Internal.DefaultKeyResolution.ShouldGenerateNewKey","Url":"https://github.com/aspnet/Announcements/issues/512","RelatedDescription":"Open issue \"[Breaking change]: DefaultKeyResolution.ShouldGenerateNewKey has a slightly altered meaning\" (#512)"},{"Id":"2162366750","IsPullRequest":true,"CreatedAt":"2024-03-01T17:37:10","Actor":"amcasey","Number":"511","RawContent":null,"Title":"Update repo URL","State":"closed","Body":"We have appropriate redirects, but it seems preferable to have current URLs in the guidance.","Url":"https://github.com/aspnet/Announcements/pull/511","RelatedDescription":"Closed or merged PR \"Update repo URL\" (#511)"},{"Id":"2115619834","IsPullRequest":true,"CreatedAt":"2024-02-06T22:14:36","Actor":"dotnet-policy-service[bot]","Number":"510","RawContent":null,"Title":"FabricBot: Onboarding to GitOps.ResourceManagement because of FabricBot decommissioning","State":"closed","Body":"Add prIssueManagement.yml to onboard repo to GitOps.ResourceManagement as FabricBot replacement\n\n Details on the replacement service and the syntax of the new yaml configuration file is available publicly at: https://microsoft.github.io/GitOps/policies/resource-management.html\n\nPlease review and merge this PR to complete the process of onboarding to the new service.","Url":"https://github.com/aspnet/Announcements/pull/510","RelatedDescription":"Closed or merged PR \"FabricBot: Onboarding to GitOps.ResourceManagement because of FabricBot decommissioning\" (#510)"},{"Id":"2013176077","IsPullRequest":false,"CreatedAt":"2023-11-27T21:55:39","Actor":"captainsafia","Number":"509","RawContent":null,"Title":"[Breaking change]: Minimal APIs consuming IFormFile or IFormFileCollection parameters require anti-forgery checks","State":"open","Body":"### Description\n\nMinimal API endpoints that consume an `IFormFile` or `IFormFileCollection` will now be opted-in to requiring anti-forgery token validation using the new anti-forgery middleware.\n\n### Version\n\n.NET 8 RC 1\n\n### Previous behavior\n\nMinimal API endpoints that bound a parameter from the form via `IFormFile` or `IFormFileCollection` did not require anti-forgery validation.\n\n### New behavior\n\nMinimal API endpoints that bound a parameter from the form via `IFormFile` or `IFormFileCollection` did require anti-forgery validation. An exception will be thrown at startup if the anti-forgery middleware is not registered for an API that defines these input types.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nAnti-forgery token validation is a recommended security precaution for APIs that consume data from a form.\n\n### Recommended action\n\nUsers can opt out of anti-forgery validation for specific endpoints by using the `DisableAntiforgery` method like so:\r\n\r\n```csharp\r\nvar app = WebApplication.Create();\r\n\r\napp.MapPost(\"/\", (IFormFile formFile) => ...)\r\n  .DisableAntiforgery();\r\n\r\napp.Run();\r\n```\n\n### Affected APIs\n\nNone.","Url":"https://github.com/aspnet/Announcements/issues/509","RelatedDescription":"Open issue \"[Breaking change]: Minimal APIs consuming IFormFile or IFormFileCollection parameters require anti-forgery checks\" (#509)"},{"Id":"1811082947","IsPullRequest":false,"CreatedAt":"2023-07-19T03:36:42","Actor":"jmprieur","Number":"508","RawContent":null,"Title":"[Breaking change]: JwtBearer, WsFederation, and OpenIdConnect events context properties of type SecurityToken now return a JSonWebToken by default","State":"open","Body":"## Description\r\nThe `JwtBearerEvents`, `WsFederationEvents` and `OpenIdConnectEvents` are authentication events fired respectively by the `JwtBearer`, `WsFederation` and `OpenIdConnect` authentication handlers. For example the [OnTokenValidated](https://github.com/dotnet/aspnetcore/blob/bf303a1092f83d789031fdafac60f3fc454cfc49/src/Security/Authentication/JwtBearer/src/JwtBearerEvents.cs#L29) event is fired when a security token is validated. These events are fired with a context (for instance [TokenValidatedContext](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.jwtbearer.tokenvalidatedcontext?view=aspnetcore-7.0)) that exposes a `SecurityToken` property of abstract type [SecurityToken](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.securitytoken?view=msal-web-dotnet-latest). The default real implementation of SecurityToken changed from [JwtSecurityToken](https://learn.microsoft.com/dotnet/api/system.identitymodel.tokens.jwt.jwtsecuritytoken?view=msal-web-dotnet-latest) to [JsonWebToken](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.jsonwebtokens.jsonwebtoken?view=msal-web-dotnet-latest).\r\nIf you really need to keep using `JwtSecurityToken`, you can re-enable it by setting `UseSecurityTokenValidators` on the `JwtBearerOptions`, `WsFederationOptions`, `OpenIdConnectOptions`.\r\n\r\nFor details [#aspnetcore/49469](https://github.com/dotnet/aspnetcore/issues/49469#issue) API Review.\r\n\r\n### Version\r\n.NET 8 Preview 7\r\n\r\n### Previous behavior\r\nUntil ASP.NET Core 8-preview 7, these SecurityToken properties were implemented by a sub-class of SecurityToken named JwtSecurityToken, which is the previous generation of implementation of JWT. These JwtSecurityToken were produced by [SecurityTokenValidators](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.isecuritytokenvalidator?view=msal-web-dotnet-latest).\r\n\r\n### New behavior\r\nFrom ASP.NET Core 8-preview 7, by default the class derived from SecurityToken implenting these properties is JSonWebToken which are produced by more optimized [TokenHandlers](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.tokenhandler?view=msal-web-dotnet-latest).\r\n\r\n## Type of breaking change\r\n- [ ] Binary incompatible: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] Source incompatible: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [x] Behavioral change: Existing binaries may behave differently at run time.\r\n\r\n## Reason for change\r\nThis change was made because JSonWebToken (and its associated JSonWebTokenHandler) are bringing:\r\n- 30% performance improvement.\r\n- Improved reliability by the usage of a Last Known Good metadata (such as the OpenIdConnectMetadata)\r\n- async processing\r\n\r\n### Recommended action\r\nFor most of you, this shouldn't be a problem as the type of the properties (SecurityToken) has not changed, and you were not supposed to look at the real type.\r\n\r\nHowever, if you were downcasting one of these SecurityToken properties to JwtSecurityToken (for example to get the claims), you will now need to:\r\n- either down-cast them to JSonWebToken\r\n\r\n  ```CSharp\r\n  service.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme,  options => {\r\n      options.Events.TokenValidated = (context) => {\r\n          // Replace your cast to JwtSecurityToken.\r\n          JSonWebToken token = context.SecurityToken as JSonWebToken;\r\n          // Do something ...\r\n      };\r\n  });\r\n  ```\r\n\r\n- or set one of the UseSecurityTokenValidators boolean properties on the corresponding options (JtwBearerOptions, WsFederationOptions, OpenIdConnectOptions) to true, in which case the authentication handlers will keep using the JwtTokenValidators and will keep producing JwtSecurityTokens.\r\n\r\n  ```CSharp\r\n  service.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme,  options => {\r\n      options.UseSecurityTokenValidators = true;\r\n      options.Events.TokenValidated = (context) => {\r\n          // As you were doing before\r\n          JwtSecurityToken token = context.SecurityToken as JwtSecurityToken;\r\n          // Do something ...\r\n      };\r\n  });\r\n  ```\r\n\r\n\r\n\r\n## Affected APIs\r\nThe properties that are concerned are the following:\r\n\r\n### In WsFederationEvents\r\n\r\n- [SecurityTokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/WsFederation/src/SecurityTokenValidatedContext.cs#L31)\r\n\r\n### In JwtBearerEvents\r\n\r\n- [TokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/JwtBearer/src/TokenValidatedContext.cs#L27)\r\n\r\n### In OpenIdConnectEvents\r\n\r\n- [TokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/OpenIdConnect/src/Events/TokenValidatedContext.cs#L32)\r\n- [AuthorizationCodeReceivedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/OpenIdConnect/src/Events/AuthorizationCodeReceivedContext.cs#L34)","Url":"https://github.com/aspnet/Announcements/issues/508","RelatedDescription":"Open issue \"[Breaking change]: JwtBearer, WsFederation, and OpenIdConnect events context properties of type SecurityToken now return a JSonWebToken by default\" (#508)"},{"Id":"1805550224","IsPullRequest":false,"CreatedAt":"2023-07-14T20:44:25","Actor":"captainsafia","Number":"507","RawContent":null,"Title":"[Breaking change]: TrimMode defaults to `full` for WebSDK projects","State":"open","Body":"### Description\n\nTrimming now trims all assemblies in applications targeting the Web SDK, by default. This change only affects apps that are published with PublishTrimmed=true, and it only breaks apps that had existing trim warnings. \n\n### Version\n\n.NET 8 Preview 7\n\n### Previous behavior\n\nPreviously, `TrimMode=partial` was set by default for all projects that targeted the WebSDK. \n\n### New behavior\n\nStarting in .NET 8 Preview 7, trimming trims all the assemblies in the app by default. Apps that may have previously worked with `PublishTrimmed=true` and `TrimMode=partial` may not work in .NET 8 Preview 7. However, only apps with trim warnings will be affected. If your app has no trim warnings, the change in behavior should not cause any adverse effect.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThis change helps to decrease app size without users having to explicitly opt in and aligns with user expectations that the entire app is trimmed unless noted otherwise.\n\n### Recommended action\n\nThe best resolution is to resolve all the trim warnings in your application. For information about resolving the warnings in your own libraries, see [Introduction to trim warnings](https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/fixing-warnings).\r\n\r\nTo revert to the previous behavior, set the TrimMode property to partial.\r\n\r\n```xml\r\n<TrimMode>partial</TrimMode>\r\n```\n\n### Affected APIs\n\nNone.","Url":"https://github.com/aspnet/Announcements/issues/507","RelatedDescription":"Open issue \"[Breaking change]: TrimMode defaults to `full` for WebSDK projects\" (#507)"},{"Id":"1693295179","IsPullRequest":false,"CreatedAt":"2023-05-03T01:44:40","Actor":"JamesNK","Number":"506","RawContent":null,"Title":"[Breaking change]: ASP.NET Core rate limiting middleware now requires AddRateLimiter","State":"open","Body":"### Description\r\n\r\n[ASP.NET Core rate limiting middleware](https://learn.microsoft.com/aspnet/core/performance/rate-limit) is being updated in .NET 8 with extra functionality. The middleware now requires services registered with `AddRateLimiter`.\r\n\r\n### Version\r\n\r\n.NET 8 Preview 5\r\n\r\n### Previous behavior\r\n\r\nPreviously, rate limiting could be used without `AddRateLimiter`. For example, the middleware could be configured by calling `Configure<RateLimiterOptions>(o => { })`:\r\n\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.Configure<RateLimiterOptions>(o => o\r\n    .AddFixedWindowLimiter(policyName: \"fixed\", options =>\r\n    {\r\n        // configuration\r\n    }));\r\n\r\nvar app = builder.Build();\r\napp.UseRateLimiter();\r\napp.MapGet(\"/\", () => Results.Ok($\"Hello world\")).RequireRateLimiting(\"fixed\");\r\napp.Run();\r\n```\r\n\r\n### New behavior\r\n\r\nIf `AddRateLimiter` is not called on app startup, then ASP.NET Core will throw an informative error:\r\n\r\n> Unable to find the required services. Please add all the required services by calling 'IServiceCollection.AddRateLimiter' in the application startup code.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nRate limiting middleware requires services that are only registered by calling `AddRateLimiter`.\r\n\r\n### Recommended action\r\n\r\nEnsure `AddRateLimiter()` is called at application startup.\r\n\r\nFor example, update `Configure<RateLimiterOptions>(o => { })` to use `AddRateLimiter()`:\r\n\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddRateLimiter(o => o\r\n    .AddFixedWindowLimiter(policyName: \"fixed\", options =>\r\n    {\r\n        // configuration\r\n    }));\r\n\r\nvar app = builder.Build();\r\napp.UseRateLimiter();\r\napp.MapGet(\"/\", () => Results.Ok($\"Hello world\")).RequireRateLimiting(\"fixed\");\r\napp.Run();\r\n```\r\n\r\n### Affected APIs\r\n\r\n[UseRateLimiter()](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.builder.ratelimiterapplicationbuilderextensions.useratelimiter)","Url":"https://github.com/aspnet/Announcements/issues/506","RelatedDescription":"Open issue \"[Breaking change]: ASP.NET Core rate limiting middleware now requires AddRateLimiter\" (#506)"},{"Id":"1685250868","IsPullRequest":false,"CreatedAt":"2023-04-26T15:26:43","Actor":"Tratcher","Number":"505","RawContent":null,"Title":"[Breaking change]: ISystemClock obsolete and replaced by TimeProvider","State":"open","Body":"### Description\n\n`Microsoft.AspNetCore.Authentication.ISystemClock` has been used by the authentication and identity components since AspNetCore 1.0 to enable unit testing of time related functionality like expiration checking. .NET 8 now includes a suitable abstraction `System.TimeProvider` that provides the same functionality and much more. We're taking this opportunity to obsolete `ISystemClock` and replace it with `TimeProvider` throughout AspNetCore.\r\n\r\nSee https://github.com/dotnet/aspnetcore/pull/47717 for additional details.\n\n### Version\n\n.NET 8 Preview 5\n\n### Previous behavior\n\nISystemClock was injected into the constructors by Dependency Injection and could be overridden for testing.\r\n\r\nNote the default `SystemClock` implementation would truncate to the nearest second for easier formatting. \n\n### New behavior\n\nISystemClock remains in the Dependency Injection container but is no longer used. It may be removed from the container in a future version.\r\n\r\nTimeProvider is now a settable property on the Options classes for these types. It can be set directly or by registering a provider in the Dependency Injection container.\r\n\r\n`TimeProvider` does not truncate to the nearest second, consumers are expected to correctly format the time as needed.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nUnifying the time abstraction across the stack for easier testing.\n\n### Recommended action\n\nComponents that derive from `Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>` or `Microsoft.AspNetCore.Identity.SecurityStampValidator<TUser>` should remove their `ISystemClock` constructor parameter and call the new base constructor accordingly. Similarly, derived implementations that reference the `Clock` property on these types should reference the new `TimeProvider` property instead. `TimeProvider` is now settable for testing on the options or via DI.\r\n\r\n```diff\r\n-    public BasicAuthenticationHandler(IOptionsMonitor<AuthenticationSchemeOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock)\r\n-        : base(options, logger, encoder, clock)\r\n+    public BasicAuthenticationHandler(IOptionsMonitor<AuthenticationSchemeOptions> options, ILoggerFactory logger, UrlEncoder encoder)\r\n+        : base(options, logger, encoder)\r\n```\r\n\r\n```diff\r\n-       var currentUtc = Clock.UtcNow;\r\n+       var currentUtc = TimeProvider.GetUtcNow();\r\n```\n\n### Affected APIs\n\n- [`ISystemClock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.isystemclock)\r\n- [`SystemClock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.systemclock)\r\n- [`AuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.authenticationhandler-1)\r\n- [`AuthenticationHandler<TOptions>.Clock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.authenticationhandler-1.clock)\r\n- [`CookieAuthenticationHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.cookies.cookieauthenticationhandler)\r\n- [`FacebookHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.facebook.facebookhandler)\r\n- [`GoogleHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.google.googlehandler)\r\n- [`JwtBearerHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.jwtbearer.jwtbearerhandler)\r\n- [`MicrosoftAccountHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.microsoftaccount.microsoftaccounthandler)\r\n- [`NegotiateHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.negotiate.negotiatehandler)\r\n- [`OAuthHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.oauth.oauthhandler-1)\r\n- [`OpenIdConnectHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.openidconnect.openidconnecthandler)\r\n- [`PolicySchemeHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.policyschemehandler)\r\n- [`RemoteAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.remoteauthenticationhandler-1)\r\n- [`SignInAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.signinauthenticationhandler-1)\r\n- [`SignOutAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.signoutauthenticationhandler-1)\r\n- [`TwitterHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.twitter.twitterhandler)\r\n- [`WsFederationHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.wsfederation.wsfederationhandler)\r\n- [`SecurityStampValidator<TUser>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.identity.securitystampvalidator-1)\r\n- [`TwoFactorSecurityStampValidator<TUser>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.identity.twofactorsecuritystampvalidator-1)","Url":"https://github.com/aspnet/Announcements/issues/505","RelatedDescription":"Open issue \"[Breaking change]: ISystemClock obsolete and replaced by TimeProvider\" (#505)"},{"Id":"1661290568","IsPullRequest":false,"CreatedAt":"2023-04-10T20:06:20","Actor":"captainsafia","Number":"504","RawContent":null,"Title":"[Breaking change]: `ValidationProblemDetails` and `ProblemDetails` no longer use custom converters","State":"open","Body":"### Description\n\nPrior to .NET 8 Preview 2, `ValidationProblemDetails` and `ProblemDetails` type used custom converters to support JSON serialization due to a lack of support for the `IgnoreNullValues` option. Now that this option is supported by the S.T.J APIs, we've removed the custom converters in the framework in favor of the serialization provided by the framework.\r\n\r\nAs a result of this, the properties in the `ValidationProblemDetails` and `ProblemDetails` types no longer indiscriminately assume lowercase type names. Developers must specific a `JsonNamingPolicy` to get the correct behavior.\n\n### Version\n\n.NET 8 Preview 2\n\n### Previous behavior\n\n```csharp\r\nstring content = \"{\\\"status\\\":400,\\\"detail\\\":\\\"HTTP egress is not enabled.\\\"}\";\r\nusing MemoryStream stream = new();\r\nusing StreamWriter writer = new(stream);\r\nwriter.Write(content);\r\nwriter.Flush();\r\nstream.Position = 0;\r\n\r\nJsonSerializerOptions options = new();\r\noptions.Converters.Add(new JsonStringEnumConverter());\r\n\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\nConsole.WriteLine(details.Status); // 400\r\n```\n\n### New behavior\n\n```csharp\r\nstring content = \"{\\\"status\\\":400,\\\"detail\\\":\\\"HTTP egress is not enabled.\\\"}\";\r\nusing MemoryStream stream = new();\r\nusing StreamWriter writer = new(stream);\r\nwriter.Write(content);\r\nwriter.Flush();\r\nstream.Position = 0;\r\n\r\nJsonSerializerOptions options = new();\r\noptions.Converters.Add(new JsonStringEnumConverter());\r\n\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\nConsole.WriteLine(details.Status); // null\r\n```\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nNow that `IgnoreNullValues` is supported by the S.T.J APIs, we've removed the custom converters in the framework in favor of the serialization provided by the framework.\n\n### Recommended action\n\nProvide a JSON serializer options with the correct details.\r\n\r\n```csharp\r\nJsonSerializerOptions options = new()\r\n{\r\n   PropertyNameCaseInsensitive = true\r\n};\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\n```\n\n### Affected APIs\n\n- [`ValidationProblemDetails`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.validationproblemdetails)\r\n- [`ProblemDetails`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.problemdetails)","Url":"https://github.com/aspnet/Announcements/issues/504","RelatedDescription":"Open issue \"[Breaking change]: `ValidationProblemDetails` and `ProblemDetails` no longer use custom converters\" (#504)"},{"Id":"1657753067","IsPullRequest":true,"CreatedAt":"2023-04-06T22:49:51","Actor":"gewarren","Number":"503","RawContent":null,"Title":"Add more version choices to BC template","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/503","RelatedDescription":"Closed or merged PR \"Add more version choices to BC template\" (#503)"},{"Id":"1656483670","IsPullRequest":false,"CreatedAt":"2023-04-06T00:15:27","Actor":"mitchdenny","Number":"502","RawContent":null,"Title":"[Breaking change]: Obsolete ConcurrencyLimiterMiddleware","State":"open","Body":"### Description\r\n\r\nIn .NET 8.0 the ASP.NET Core team is deprecating the ConcurrencyLimiterMiddleware and associated methods and types (e.g. UseConcurrencyLimiter(...)). This package will be removed in .NET 9.0.\r\n\r\nDevelopers requiring rate limiting capabilties should switch to the newer and more capable rate limiting middleware that was introduced in .NET 7.0 (e.g. UseRateLimiter(...)). The .NET 7.0 rate limiting API includes a concurrency limiter along with several other rate limiting algorithms that you can apply to your application.\r\n\r\nFor more information on rate limiting in ASP.NET Core see:\r\nhttps://learn.microsoft.com/aspnet/core/performance/rate-limit\r\n\r\n### Version\r\n\r\n.NET 8 Preview 4\r\n\r\n### Previous behavior\r\n\r\nDevelopers using the `ConcurrencyLimiterMiddleware` could control concurrency by adding a policy to DI and enabling the middleware:\r\n\r\n```csharp\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddStackPolicy<options => {\r\n    options.MaxConcurrentRequests = 2;\r\n    options.RequestQueueLimit = 25;\r\n    });\r\n\r\nvar app = builder.Build();\r\napp.UseConcurrencyLimiter();\r\n// Map endpoints.\r\napp.Run();\r\n```\r\n\r\n### New behavior\r\n\r\nHere is some example usage using the new API:\r\n\r\n```csharp\r\nusing Microsoft.AspNetCore.RateLimiting;\r\nusing System.Threading.RateLimiting;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\n\r\napp.UseRateLimiter(new RateLimiterOptions()\r\n    .AddConcurrencyLimiter(\"only-one-at-a-time-stacked\", (options) =>\r\n    {\r\n        options.PermitLimit = 2;\r\n        options.QueueLimit = 25;\r\n        options.QueueProcessingOrder = QueueProcessingOrder.NewestFirst;\r\n    }));\r\n\r\napp.MapGet(\"/\", async () =>\r\n{\r\n    await Task.Delay(10000);\r\n    return \"Hello World\";\r\n}).RequireRateLimiting(\"only-one-at-a-time-stacked\");\r\n\r\napp.Run();\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nThe older `ConcurrencyLimiterMiddleware` is infrequently used and undocumented. The newer rate limiting API has more extensive functionality.\r\n\r\n### Recommended action\r\n\r\nIf you are using the older `ConcurrencyLimiterMiddleware` we recommend moving to the newer rate limiting middleware.\r\n\r\n### Affected APIs\r\n\r\nThe following APIs are impacted:\r\n\r\n* `ConcurrencyLimiterExtensions.UseConcurrencyLimiter(...)`\r\n* `ConcurrencyLimiterMiddleware`\r\n* `ConcurrencyLimiterOptions`","Url":"https://github.com/aspnet/Announcements/issues/502","RelatedDescription":"Open issue \"[Breaking change]: Obsolete ConcurrencyLimiterMiddleware\" (#502)"},{"Id":"1602073485","IsPullRequest":false,"CreatedAt":"2023-03-07T16:47:58","Actor":"dnfadmin","Number":"501","RawContent":null,"Title":"Moving to the new .NET Foundation CLA service","State":"closed","Body":"\r\nHello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team\r\n\r\n","Url":"https://github.com/aspnet/Announcements/issues/501","RelatedDescription":"Closed issue \"Moving to the new .NET Foundation CLA service\" (#501)"},{"Id":"1575203037","IsPullRequest":true,"CreatedAt":"2023-02-08T00:08:59","Actor":"brunolins16","Number":"500","RawContent":null,"Title":"Fixing announcement template","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/500","RelatedDescription":"Closed or merged PR \"Fixing announcement template\" (#500)"},{"Id":"1497212375","IsPullRequest":true,"CreatedAt":"2022-12-14T19:04:06","Actor":"gewarren","Number":"499","RawContent":null,"Title":"Update incompatibility types in BC template","State":"closed","Body":"I updated the breaking change template to match dotnet/docs. Feel free to close if you don't like these definitions, however.","Url":"https://github.com/aspnet/Announcements/pull/499","RelatedDescription":"Closed or merged PR \"Update incompatibility types in BC template\" (#499)"},{"Id":"1455922247","IsPullRequest":false,"CreatedAt":"2022-11-18T22:38:34","Actor":"halter73","Number":"498","RawContent":null,"Title":"[Breaking change]: `WebApplicationBuilder` gives `ASPNET_`-prefixed environment variables lower precedence","State":"open","Body":"### Description\n\nStarting in .NET 7 preview 3, when using `WebApplicationBuilder` but not any other host (e.g. `ConfigureWebHostDefaults` or `WebHost.CreateDefaultBuilder`), command-line arguments and `DOTNET_`-prefixed environment variables override `ASPNET_`-prefixed environment variables when reading from [default host configuration sources](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#default-host-configuration-sources) which are used to read [host variables](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#host-variables) like the content root path and environment name when the `WebApplicationBuilder` is constructed and serves as a base for [application configuration](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#application-configuration-providers).\r\n\r\n`ASPNET_`-prefixed environment variables now has the lowest precedence of all of `WebApplicationBuilder`'s [default host configuration sources](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#default-host-configuration-sources).\r\n\r\nSee https://github.com/dotnet/AspNetCore.Docs/issues/25626#issuecomment-1098616664 for more context.\n\n### Version\n\n.NET 7 Preview 3\n\n### Previous behavior\n\n`ASPNET_`-prefixed environment variables overrode command-line arguments and `DOTNET_`-prefixed environment variables.\n\n### New behavior\n\nCommand-line arguments and `DOTNET_`-prefixed environment variables override `ASPNET_`-prefixed environment variables\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nTo prevent environment variables from overriding explicit command-line arguments when reading host variables which is more consistent with application configuration which has always given command-line arguments the highest precedence.\n\n### Recommended action\n\nIf you were using `ASPNETCORE_`-prefixed environment variables to override command-line arguments or `DOTNET_-`prefixed environment variables, use something with a higher priority. This could mean using custom [WebApplicationOptions](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationoptions?view=aspnetcore-7.0) which overrides all default hosting configuration sources.\n\n### Affected APIs\n\n`Microsoft.AspNetCore.Builder.WebApplicationBuilder`","Url":"https://github.com/aspnet/Announcements/issues/498","RelatedDescription":"Open issue \"[Breaking change]: `WebApplicationBuilder` gives `ASPNET_`-prefixed environment variables lower precedence\" (#498)"},{"Id":"1414759756","IsPullRequest":false,"CreatedAt":"2022-10-19T11:01:00","Actor":"javiercn","Number":"497","RawContent":null,"Title":"[Breaking change]: Updates to Authentication in webassembly applications","State":"open","Body":"### Description\n\nWe updated our support for authentication in Blazor Webassembly applications to rely on the history state instead of query strings in the URL. As a result of that, existing applications passing the return URL through the query string will fail to redirect back to the original page after a successful login.\r\n\r\nExisting applications should use the new `NavigateToLogin` extension method as it is able to flow the data to the login page corectly.\n\n### Version\n\n.NET 7 RC 1\n\n### Previous behavior\n\nThe return URL would be specified in the query string as `?returnUrl=<<return-url>>`.\n\n### New behavior\n\nThe return URL along other parameters passed to the `authentication/login` page are passed via the `history.state` entry of the page.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nWe decided to switch to using `history.state` instead of the query string as it simplifies the implementation and removes the surface attack area associated with passing data through the query string.\n\n### Recommended action\n\nMost apps have a RedirectToLogin.razor file in them that can be updated as follows:\r\n\r\n```razor\r\n@inject NavigationManager Navigation\r\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\r\n@using Microsoft.Extensions.Options\r\n\r\n@inject IOptionsSnapshot<RemoteAuthenticationOptions<ApiAuthorizationProviderOptions>> Options\r\n@code {\r\n\r\n    protected override void OnInitialized()\r\n    {\r\n        Navigation.NavigateToLogin(Options.Get(Microsoft.Extensions.Options.Options.DefaultName).AuthenticationPaths.LogInPath);\r\n    }\r\n}\r\n```\n\n### Affected APIs\n\nAs part of this change `SignOutSessionStateManager` has been obsoleted in favor of `NavigationManager.NavigateToLogout`","Url":"https://github.com/aspnet/Announcements/issues/497","RelatedDescription":"Open issue \"[Breaking change]: Updates to Authentication in webassembly applications\" (#497)"},{"Id":"1400322849","IsPullRequest":false,"CreatedAt":"2022-10-06T21:30:20","Actor":"halter73","Number":"496","RawContent":null,"Title":"[Breaking change]: IEndpointMetadataProvider and IEndpointParameterMetadataProvider interface changes in 7.0 RC2","State":"open","Body":"### Description\n\nIn ASP.NET Core 7 RC2, the `IEndpointMetadataProvider` and `IEndpointParameterMetadataProvider` interfaces [introduced in  preview 4](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-4/#self-describing-minimal-apis-with-iendpointmetadataprovider-and-iendpointparametermetadataprovider) have been updated to take an [EndpointBuilder](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.endpointbuilder?view=aspnetcore-7.0) rather than a `EndpointMetadataContext` or `EndpointParameterMetadataContext`.\r\n\r\n\n\n### Version\n\n.NET 7 RC 2\n\n### Previous behavior\n\nThe `PopulateMetadata` methods on both interfaces took their respective context arguments as a single parameter. Both contexts included services (`IServiceProvider`) and endpoint metadata (`IList<object>`).\r\n\r\n`EndpointMetadataContext` included the `MethodInfo` for the minimal route handler MVC action that took the implementing type as a parameter or returned it. `EndpointParameterMetadataContext` provided `ParameterInfo` and could only be used on parameter types.\n\n### New behavior\n\nNow in RC2, both interfaces' `PopulateMetadata` method take an `EndpointBuilder` as their second parameter. The `EndpointBuilder` provides access to the application services (`IServiceProvider`) and endpoint metadata (`IList<object>`) previously provided by `EndpointMetadataContext` and `EndpointParameterMetadataContext`.\r\n\r\nNow, `IEndpointMetadataProvider` takes a `MethodInfo` and `IEndpointParameterMetadataProvider` takes a `ParameterInfo` as their first parameter.\r\n\r\nBoth `EndpointMetadataContext` and `EndpointParameterMetadataContext` have been removed.\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/43125#issuecomment-1218534849 for an API diff.\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [ ] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThe metadata providers now get access to more metadata like the `RoutePattern` (with a downcast) and `DisplayName` via the `EndpointBuilder`, and this allowed us to delete unnecessary context types.\n\n### Recommended action\n\nUpdate implementations of `IEndpointMetadataProvider` and `IEndpointParameterMetadataProvider` to access the information necessary from the new parameters. There should be nothing that was available via the contexts previously that are unavailable via `PopulateMetadata`'s new parameters.\n\n### Affected APIs\n\n- Parameters changed: `Microsoft.AspNetCore.Http.Metadata.IEndpointMetadataProvider.PopulateMetadata`\r\n- Parameters changed: `Microsoft.AspNetCore.Http.Metadata.IEndpointParameterMetadataProvider.PopulateMetadata`\r\n- Removed: `Microsoft.AspNetCore.Http.Metadata.EndpointMetadataContext`\r\n- Removed: `Microsoft.AspNetCore.Http.Metadata.EndpointParameterMetadataContext`","Url":"https://github.com/aspnet/Announcements/issues/496","RelatedDescription":"Open issue \"[Breaking change]: IEndpointMetadataProvider and IEndpointParameterMetadataProvider interface changes in 7.0 RC2\" (#496)"},{"Id":"1396674543","IsPullRequest":false,"CreatedAt":"2022-10-04T18:23:29","Actor":"MackinnonBuck","Number":"495","RawContent":null,"Title":"[Breaking change]: Endpoints configured with 'MapFallbackToFile()' now only match 'HEAD' and 'GET' requests","State":"open","Body":"### Description\n\nThe `ConsumesAttribute` attribute allows controller actions to specify their supported content types. Starting in .NET 6, if a fallback file endpoint was configured, it could match routes that were discarded due to the request having a different content type than what was specified in an action's `ConsumesAttribute`. This was an undesirable change in behavior from .NET 5 that we are partially addressing in .NET 7 by making fallback file endpoints only match `GET` and `HEAD` requests.\n\n### Version\n\n.NET 7 RC2\n\n### Previous behavior\n\nEndpoints configured with `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()` may match requests made with any request method.\n\n### New behavior\n\nEndpoints configured with `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()` will only match `HEAD` and `GET` requests.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis partially reverts larger breaking change accidentally introduced in .NET 6. Since it's highly unusual to expect a fallback file response when making a request with a method other than `HEAD` or `GET`, we anticipate the impact of this breaking change to be minimal.\n\n### Recommended action\n\nIf you want fallback file endpoints to match requests with methods other than `HEAD` or `GET`, you can specify additional HTTP request methods using `WithMetadata()`. For example:\r\n\r\n```csharp\r\nendpoints.MapFallbackToFile(\"index.html\")\r\n    .WithMetadata(new HttpMethodMetadata(new[] { /* List supported methods here */ }));\r\n```\n\n### Affected APIs\n\nAll overloads of `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()`.","Url":"https://github.com/aspnet/Announcements/issues/495","RelatedDescription":"Open issue \"[Breaking change]: Endpoints configured with 'MapFallbackToFile()' now only match 'HEAD' and 'GET' requests\" (#495)"},{"Id":"1376539134","IsPullRequest":false,"CreatedAt":"2022-09-16T22:09:33","Actor":"brunolins16","Number":"494","RawContent":null,"Title":"[Breaking change]:  Using the System.Text.Json source generator with ASP. NET Core throws NotSupportedException in RC1 *only*","State":"open","Body":"### Description\r\n\r\nIn _**.NET 7 RC1**_, we started requiring that the type `object` to be explicitly specified with a `[JsonSerializable]` attribute applied to your Json Serializer context class in Minimal APIs applications using `System.Text.Json` source generation. _**This was an unexpected behavioral change that we will be fixed in RC2**_.\r\n\r\n### Version\r\n\r\n.NET 7 RC1\r\n\r\n### Previous behavior\r\n\r\nBefore **.NET 7 RC1**, if you are using `System.Text.Json` source generation with `ASP.NET Core Minimal APIs` your endpoint's response will be serialized (`JSON` format) correctly when you have your custom types declared in the `JsonSerializerContext`.\r\n\r\nThe following code shows an example using `System.Text.Json` source generation with `ASP.NET Core Minimal APIs` :\r\n\r\n``` c#\r\nusing System.Text.Json.Serialization;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.ConfigureHttpJsonOptions(o => o.SerializerOptions.AddContext<JsonContext>());\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\"/\", () =>\r\n{\r\n    var l = new List<MyClass> { new(), new() };\r\n    return Results.Ok(l);\r\n});\r\n\r\napp.Run();\r\n\r\n[JsonSerializable(typeof(List<MyClass>))]\r\npublic partial class JsonContext : JsonSerializerContext\r\n{}\r\n\r\npublic class MyClass\r\n{\r\n    public int MyProp { get; set; }\r\n}\r\n```\r\n\r\n### New behavior\r\n\r\nIn .NET RC 1 and **RC 1 only** (**_this is being fixed in RC 2_**) the same sample application will throw a `NotSupportedException`.\r\n\r\n```\r\nNotSupportedException: Metadata for type 'System.Object' was not provided by TypeInfoResolver of type 'JsonContext'. \r\nIf using source generation, ensure that all root types passed to the serializer have been indicated with 'JsonSerializableAttribute',\r\nalong with any types that might be serialized polymorphically.\r\n\r\nSystem.Text.Json.ThrowHelper.ThrowNotSupportedException_NoMetadataForType(Type type, IJsonTypeInfoResolver resolver)\r\n```\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/43894 for more context.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis is an unexpected side effect cause by a combination of multiple changes, listed below, detected only after **.NET 7 RC1** release. \r\n\r\n**.NET Runtime**\r\n1. https://github.com/dotnet/docs/issues/30758\r\n2. https://github.com/dotnet/docs/issues/30755\r\n\r\n**ASP.NET CORE**\r\n1. https://github.com/dotnet/aspnetcore/issues/39856\r\n2. https://github.com/dotnet/aspnetcore/issues/41724#issuecomment-1142735823\r\n\r\nThe root cause was already identified, and a fix will be available in **.NET 7 RC2**.\r\n\r\n### Recommended action\r\n\r\nYou can add the `[JsonSerializable(typeof(object))]` to your [JsonSerializerContext](https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-source-generation?pivots=dotnet-7-0) or wait for RC 2 when this unexpected behavior will be fixed.\r\n\r\n``` c#\r\n[JsonSerializable(typeof(List<MyClass>))]\r\n[JsonSerializable(typeof(object))]\r\npublic partial class JsonContext : JsonSerializerContext\r\n{}\r\n```\r\n\r\n\r\n### Affected APIs\r\n\r\n- Minimal APIs\r\n- Controllers (using [Microsoft.AspNetCore.Http.HttpResults](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.httpresults?view=aspnetcore-7.0))","Url":"https://github.com/aspnet/Announcements/issues/494","RelatedDescription":"Open issue \"[Breaking change]:  Using the System.Text.Json source generator with ASP. NET Core throws NotSupportedException in RC1 *only*\" (#494)"}],"ResultType":"GitHubIssue"}},"RunOn":"2025-07-27T03:30:07.9749949Z","RunDurationInMilliseconds":2908}