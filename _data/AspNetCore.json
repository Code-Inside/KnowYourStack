{"Data":{"Blog":{"FeedItems":[{"Title":"How to deploy .NET Aspire apps to Azure Container Apps","PublishedOn":"2024-01-29T18:05:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Let's take a look at how you can easily deploy .NET Aspire Apps to Azure Container Apps with just a few commands with the Azure Developer CLI!\nThe post How to deploy .NET Aspire apps to Azure...","Href":"https://devblogs.microsoft.com/dotnet/how-to-deploy-dotnet-aspire-apps-to-azure-container-apps/","RawContent":null},{"Title":"Microsoft Office’s RTC (Real-Time Channel) migration to modern .NET","PublishedOn":"2024-01-25T16:05:00+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Real-Time Channel is Microsoft Office Online's service that powers real time collaboration and coauthoring. This blog post describes the journey to migrate the service from .NET Framework to modern...","Href":"https://devblogs.microsoft.com/dotnet/office-rtc-dotnet-migration/","RawContent":null},{"Title":"Introducing the MSTest Runner – CLI, Visual Studio, & More","PublishedOn":"2024-01-24T18:00:00+00:00","CommentsCount":20,"FacebookCount":0,"Summary":"MSTest runner is a new, light-weight and portable runner for MSTest tests available in the .NET CLI, Visual Studio, and more!\nThe post Introducing the MSTest Runner &#8211; CLI, Visual Studio, &amp;...","Href":"https://devblogs.microsoft.com/dotnet/introducing-ms-test-runner/","RawContent":null},{"Title":".NET Framework January 2024 Cumulative Update Preview","PublishedOn":"2024-01-23T22:41:45+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"January 2024 Cumulative Update Preview Updates for .NET Framework.\nThe post .NET Framework January 2024 Cumulative Update Preview appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-cumulative-update-preview/","RawContent":null},{"Title":"Sortable Lists for Blazor using a SortableJS Component","PublishedOn":"2024-01-12T18:05:00+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Blazor Sortable is a new a open source community Blazor component for creating sortable lists of items using SortableJS.\nThe post Sortable Lists for Blazor using a SortableJS Component appeared first...","Href":"https://devblogs.microsoft.com/dotnet/introducing-blazor-sortable/","RawContent":null},{"Title":".NET Framework January 2024 Security and Quality Rollup","PublishedOn":"2024-01-09T22:14:26+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"January 2024 Security and Quality Rollup Updates for .NET Framework\nThe post .NET Framework January 2024 Security and Quality Rollup appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-security-and-quality-rollup/","RawContent":null},{"Title":".NET January 2024 Updates – .NET 8.0.1, 7.0.15, .NET 6.0.26","PublishedOn":"2024-01-09T18:00:00+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Check out latest Janaury 2024 updates for .NET 7.0 and .NET 6.0\nThe post .NET January 2024 Updates – .NET 8.0.1, 7.0.15, .NET 6.0.26 appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/january-2024-updates/","RawContent":null},{"Title":"Announcing the Azure Migrate application and code assessment tool for .NET","PublishedOn":"2024-01-03T22:30:00+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"The new tool to help you move your .NET applications from on-premises to Azure is available in Visual Studio Marketplace and as a .NET CLI tool!\nThe post Announcing the Azure Migrate application and...","Href":"https://devblogs.microsoft.com/dotnet/azure-migrate-app-and-code-assessment-tool-release/","RawContent":null},{"Title":"Safer recursion in F#","PublishedOn":"2023-12-28T18:05:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Tail recursion is a new F# compiler feature which helps to avoid stack overflows.\nThe post Safer recursion in F# appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/safer-recursion-in-fsharp/","RawContent":null},{"Title":"What’s New in Our Code Coverage Tooling?","PublishedOn":"2023-12-21T18:05:00+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Discover enhanced code coverage tools with better platform support, new report formats and improved performance.\nThe post What&#8217;s New in Our Code Coverage Tooling? appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/whats-new-in-our-code-coverage-tooling/","RawContent":null}],"ResultType":"Feed"},"AspNetCore-Issues":{"Issues":[{"Id":"2109205896","IsPullRequest":true,"CreatedAt":"2024-01-31T03:22:31","Actor":"dotnet-maestro[bot]","Number":"53720","RawContent":null,"Title":"[release/9.0-preview1] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b808d30a-8d65-46ba-b00b-08dc17557c65)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: b808d30a-8d65-46ba-b00b-08dc17557c65\r\n- **Build**: 20240130.6\r\n- **Date Produced**: January 31, 2024 2:54:21 AM UTC\r\n- **Commit**: 4d8029314e75924cfa7be07439bca08f0c9f3403\r\n- **Branch**: refs/heads/release/9.0-preview1\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Bcl.AsyncInterfaces**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Bcl.TimeProvider**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Caching.Abstractions**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Caching.Memory**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Configuration**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Configuration.Abstractions**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Configuration.Binder**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Configuration.CommandLine**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Configuration.EnvironmentVariables**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Configuration.FileExtensions**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Configuration.Ini**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Configuration.Json**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Configuration.UserSecrets**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Configuration.Xml**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.DependencyInjection**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.DependencyInjection.Abstractions**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.DependencyModel**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Diagnostics**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Diagnostics.Abstractions**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.FileProviders.Abstractions**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.FileProviders.Composite**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.FileProviders.Physical**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.FileSystemGlobbing**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.HostFactoryResolver.Sources**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Hosting**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Hosting.Abstractions**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Http**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Logging**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Logging.Abstractions**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Logging.Configuration**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Logging.Console**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Logging.Debug**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Logging.EventLog**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Logging.EventSource**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Logging.TraceSource**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Options**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Options.ConfigurationExtensions**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Options.DataAnnotations**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Extensions.Primitives**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.Internal.Runtime.AspNetCore.Transport**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.NET.Runtime.MonoAOTCompiler.Task**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.NET.Runtime.WebAssembly.Sdk**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.browser-wasm**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.NETCore.BrowserDebugHost.Transport**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Collections.Immutable**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Composition**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Diagnostics.DiagnosticSource**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Diagnostics.EventLog**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.DirectoryServices.Protocols**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.IO.Hashing**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.IO.Pipelines**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Net.Http.Json**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Net.Http.WinHttpHandler**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Reflection.Metadata**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Resources.Extensions**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Runtime.Caching**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Security.Cryptography.Xml**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Security.Permissions**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Text.Encodings.Web**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Text.Json**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Threading.AccessControl**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Threading.Channels**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **System.Threading.RateLimiting**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n  - **Microsoft.SourceBuild.Intermediate.runtime.linux-x64**: [from 9.0.0-preview.1.24074.8 to 9.0.0-preview.1.24080.6][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/b4aa81d9da...4d8029314e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b808d30a-8d65-46ba-b00b-08dc17557c65)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/53720","RelatedDescription":"Open PR \"[release/9.0-preview1] Update dependencies from dotnet/runtime\" (#53720)"},{"Id":"2108924592","IsPullRequest":true,"CreatedAt":"2024-01-31T00:26:33","Actor":"github-actions[bot]","Number":"53718","RawContent":null,"Title":"[release/9.0-preview1] Package debs with xz compression","State":"closed","Body":"Backport of #53717 to release/9.0-preview1\r\n\r\n/cc @wtgodbe\r\n\r\n# Package debs with xz compression\r\n\r\n## Description\r\n\r\nzstd compression is the new default, but it doesn't work downlevel where we still support .NET. Use xz compression so we can build one deb for all debian-based targets.\r\n\r\nFixes https://github.com/dotnet/installer/issues/18314\r\n\r\n## Customer Impact\r\n\r\n.deb installers currently don't work on Debian11\r\n\r\n## Regression?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n[If yes, specify the version the behavior has regressed from]\r\n\r\n## Risk\r\n\r\n- [ ] High\r\n- [ ] Medium\r\n- [ ] Low\r\n\r\n[Justify the selection above]\r\n\r\n## Verification\r\n\r\n- [ ] Manual (required)\r\n- [ ] Automated\r\n\r\n## Packaging changes reviewed?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n- [ ] N/A\r\n\r\n----\r\n\r\n## When servicing release/2.1\r\n\r\n- [ ] Make necessary changes in eng/PatchConfig.props\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/53718","RelatedDescription":"Closed or merged PR \"[release/9.0-preview1] Package debs with xz compression\" (#53718)"},{"Id":"2108923496","IsPullRequest":true,"CreatedAt":"2024-01-31T00:26:18","Actor":"wtgodbe","Number":"53717","RawContent":null,"Title":"Package debs with xz compression","State":"closed","Body":"Port of https://github.com/dotnet/arcade/pull/13871","Url":"https://github.com/dotnet/aspnetcore/pull/53717","RelatedDescription":"Closed or merged PR \"Package debs with xz compression\" (#53717)"},{"Id":"2109025261","IsPullRequest":false,"CreatedAt":"2024-01-31T00:05:35","Actor":"chris-briddock","Number":"53719","RawContent":null,"Title":"IdentityCookieAuthenticationBuilderExtensions causing 404 Not Found","State":"open","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nIdentityCookieAuthenticationBuilderExtensions - Specifically where we have this hardcoded value. /Account/Login\r\n\r\nIs causing a 404 Not Found if this is just a web api. I imagine this will cause an issue in Blazor too.\n\n### Expected Behavior\n\nDoes not cause 404.\n\n### Steps To Reproduce\n\nAdd Identity API endpoints to a Web API project. \r\nHit an endpoint with an invalid bearer token. Should attempt to redirect to /Account/Login.\n\n### Exceptions (if any)\n\nN/A\n\n### .NET Version\n\n8.0.1\n\n### Anything else?\n\nN/A","Url":"https://github.com/dotnet/aspnetcore/issues/53719","RelatedDescription":"Open issue \"IdentityCookieAuthenticationBuilderExtensions causing 404 Not Found\" (#53719)"},{"Id":"2108815974","IsPullRequest":true,"CreatedAt":"2024-01-30T21:29:04","Actor":"github-actions[bot]","Number":"53716","RawContent":null,"Title":"[release/8.0] [Component governance] Bump the Azure.Identity dependency","State":"open","Body":"Backport of #51498 to release/8.0\n\n/cc @wtgodbe @javiercn\n\n# [Component governance] Bump the Azure.Identity dependency\n\nSummary of the changes (Less than 80 chars)\n\n## Description\n\n{Detail}\n\nFixes #{bug number} (in this specific format)\n\n## Customer Impact\n\n{Justification}\n\n## Regression?\n\n- [ ] Yes\n- [ ] No\n\n[If yes, specify the version the behavior has regressed from]\n\n## Risk\n\n- [ ] High\n- [ ] Medium\n- [ ] Low\n\n[Justify the selection above]\n\n## Verification\n\n- [ ] Manual (required)\n- [ ] Automated\n\n## Packaging changes reviewed?\n\n- [ ] Yes\n- [ ] No\n- [ ] N/A\n\n----\n\n## When servicing release/2.1\n\n- [ ] Make necessary changes in eng/PatchConfig.props\n","Url":"https://github.com/dotnet/aspnetcore/pull/53716","RelatedDescription":"Open PR \"[release/8.0] [Component governance] Bump the Azure.Identity dependency\" (#53716)"},{"Id":"2108640342","IsPullRequest":false,"CreatedAt":"2024-01-30T19:50:16","Actor":"ReubenBond","Number":"53715","RawContent":null,"Title":"API Proposal: Microsoft.Extensions.ServiceDiscovery","State":"open","Body":"## Background and Motivation\r\n\r\nWe added Service Discovery APIs for Aspire to improve the dev inner loop experience for multi-service apps. The core idea behind these APIs is to give developers a way to identify services using logical names (eg, `\"https://catalog\"`) in both development and production environments, with the Service Discovery library performing the work of translating those logical names into something which a network connection can be established with. The core duties of the Service Discovery APIs are:\r\n\r\n- **Name Resolution**: Resolve service names to collections of endpoints for those services. React to changes in the set of resolved endpoints by notifying callers.\r\n- **Client-side load balancing**: Resolve a service name to a single endpoint, balancing load locally across the set of known endpoints.\r\n\r\nThe API should be extensible enough to support the most common service discovery mechanisms:\r\n\r\n- **Configuration** for environments where service endpoints are defined in configuration. This is used in the dev inner-loop scenario for Aspire.\r\n- **DNS A/AAAA records** for environments where addresses are exposed via DNS queries and ports are the default for whatever protocol is being resolved (eg, 80 for HTTP, 433 for HTTPS)\r\n- **DNS SRV records** for Kubernetes, Consul, and other environments which expose service discovery via the common SRV record format. In Kubernetes, headless `Service` resources can be used to expose the addresses **and ports** of services via DNS SRV records. This allows for multiple, named ports on service. For example, this allows a developer can query for \"the _dashboard_ port of the _catalog_ service\".\r\n- **Pass-through** for environments which offer their own service discovery mechanism, such as Azure Container Apps, which exposes endpoints through a service mesh running next to every container. This relies on ACA app names to line up with the logical name specified by the developer (eg, if the logical name of a service is `catalog`, the corresponding ACA app named `catalog` will be resolved).\r\n\r\nThe API also aims to support:\r\n\r\n- Resolution through `HttpClient` instances which have been configured with Service Discovery.\r\n- Integration with YARP via YARP's `IDestinationResolver` API.\r\n- Integration with other libraries both as consumers/watchers of service resolution and providers of service endpoints.\r\n\r\n\r\nThe primary touch points for developers are:\r\n\r\n* Configuring and enabling Service Discovery during application startup\r\n* Transparent service resolution through `HttpClient`.\r\n\r\n### High level design\r\n\r\nThe library is designed around a provider model. Integration with `HttpClient` is implemented using a middleware, `ResolvingHttpClientMiddleware`. Here's the approximate flow for resolving a, reading depth-first from top to bottom, then left to right.\r\n\r\n```mermaid\r\nflowchart TD\r\n   H[HttpClient]\r\n   RHCH[ResolvingHttpClientHandler]\r\n   HSEPR[HttpServicEndPointResolver]\r\n   SEPW[ServiceEndPointWatcher]\r\n   ISEPS[IServiceEndPointSelector impl]\r\n   ISEPP[Multiple IServiceEndPointProvider impls]\r\n   HCH[HttpClientHandler]\r\n   H--SendAsync-->RHCH\r\n   RHCH--GetEndPointAsync-->HSEPR\r\n   HSEPR--endpoint-->RHCH\r\n   HSEPR--GetEndPointsAsync-->SEPW\r\n   SEPW--endpoints-->HSEPR\r\n   HSEPR--SetEndpointCollection-->ISEPS\r\n   HSEPR--GetEndPoint-->ISEPS\r\n   ISEPS--endpoint-->HSEPR\r\n   SEPW--ResolveAsync-->ISEPP\r\n   RHCH--base.SendAsync-->HCH\r\n```\r\n\r\n#### Key design notes\r\n\r\n* The underlying endpoint is described using an `System.Net.EndPoint`. It is presented to consumers via a new type, `ServiceEndPoint` which contains two properties: the `EndPoint` and an `IFeatureCollection` property which can be used to attach metadata and functionality to exposed endpoints.\r\n  * The intention is to support things such as:\r\n    * Attaching the original hostname via `IHostNameFeature` to the endpoint.\r\n      * This host name is propagated to the `HttpClient` via the `HttpRequestMessage.Headers.Host` property.\r\n    * Attaching the `IServiceEndPointProvider` which resolved the endpoint to the endpoint for diagnostics\r\n    * Per-endpoint health reporting (exceptions & latency) via `IEndPointHealthFeature` - not implemented.\r\n    * Querying per-endpoint load querying via `IEndPointLoadFeature` (eg, for Power-of-two-choices load balancing by `IServiceEndPointSelector`) - not implemented, no resolvers currently expose load metrics.\r\n* Endpoints are returned in a collection of type `ServiceEndPointCollection` which implements `IReadOnlyList<ServiceEndPoint>` and adds:\r\n  * An `IChangeToken` property, which is used to signal when a collection should be refreshed. Providers invalidate the change token in several ways:\r\n    * DNS SRV uses the minimum of the DNS TTL and the configured refresh time.\r\n    * DNS A/AAAA uses configured refresh time (no TTL available from System.Net.Dns).\r\n    * Configuration invalidates the token when the relevant `IConfigurationSection`'s `IChangeToken` is invalidated\r\n    * Pass-thru never invalidates the token.\r\n  * An `IFeatureCollection` property to add per-collection features.\r\n  * The service name (a `string`)\r\n* Resolution is naturally asynchronous, since these service discovery mechanisms largely involve I/O to some remote service. Therefore, there are no synchronous APIs for resolving a service.\r\n\r\n## Proposed API\r\n\r\nThe API consists of 4 libraries, structured as follows:\r\n\r\n```mermaid\r\ngraph BT;\r\n    Abstractions[\"Microsoft.Extensions.ServiceDiscovery.Abstractions\"]\r\n    Core[\"Microsoft.Extensions.ServiceDiscovery\"]\r\n    Dns[\"Microsoft.Extensions.ServiceDiscovery.Dns\"]\r\n    Yarp[\"Microsoft.Extensions.ServiceDiscovery.Yarp\"]\r\n    Core --> Abstractions\r\n    Dns --> Abstractions\r\n    Yarp --> Abstractions\r\n    Dns -- AddServiceDiscoveryCore --> Core\r\n    Yarp -- AddServiceDiscoveryCore\\nServiceEndPointResolver --> Core \r\n```\r\n\r\nThe DNS & YARP libraries reference the core Service Discovery library for access to a hosting configuration method, `AddServiceDiscoveryCore()`, and in the case of YARP, for `ServiceEndPointResolver`, which is the central point for resolving endpoints from libraries.\r\n\r\n## APIs in Microsoft.Extensions.ServiceDiscovery.Abstractions.dll\r\n\r\n### Microsoft.Extensions.ServiceDiscovery.Abstractions\r\n\r\n``` diff\r\n namespace Microsoft.Extensions.ServiceDiscovery.Abstractions {\r\n     public interface IEndPointHealthFeature {\r\n         void ReportHealth(TimeSpan responseTime, Exception exception);\r\n     }\r\n     public interface IEndPointLoadFeature {\r\n         double CurrentLoad { get; }\r\n     }\r\n     public interface IHostNameFeature {\r\n         string HostName { get; }\r\n     }\r\n     public interface IServiceEndPointProvider : IAsyncDisposable {\r\n         ValueTask<ResolutionStatus> ResolveAsync(ServiceEndPointCollectionSource endPoints, CancellationToken cancellationToken);\r\n     }\r\n     public interface IServiceEndPointResolverProvider {\r\n         bool TryCreateResolver(string serviceName, out IServiceEndPointProvider? resolver);\r\n     }\r\n     public interface IServiceEndPointSelector {\r\n         ServiceEndPoint GetEndPoint(object? context);\r\n         void SetEndPoints(ServiceEndPointCollection endPoints);\r\n     }\r\n     public interface IServiceEndPointSelectorProvider {\r\n         IServiceEndPointSelector CreateSelector();\r\n     }\r\n     public readonly struct ResolutionStatus : IEquatable<ResolutionStatus> {\r\n         public static readonly ResolutionStatus Cancelled;\r\n         public static readonly ResolutionStatus None;\r\n         public static readonly ResolutionStatus Pending;\r\n         public static readonly ResolutionStatus Success;\r\n         public ResolutionStatus(ResolutionStatusCode statusCode, Exception? exception, string message);\r\n         public Exception? Exception { get; }\r\n         public string Message { get; }\r\n         public ResolutionStatusCode StatusCode { get; }\r\n         public static ResolutionStatus CreateNotFound(string message);\r\n         public bool Equals(ResolutionStatus other);\r\n         public override bool Equals(object? obj);\r\n         public static ResolutionStatus FromException(Exception exception);\r\n         public static ResolutionStatus FromPending(Exception? exception = null);\r\n         public override int GetHashCode();\r\n         public static bool operator ==(ResolutionStatus left, ResolutionStatus right);\r\n         public static bool operator !=(ResolutionStatus left, ResolutionStatus right);\r\n         public override string ToString();\r\n     }\r\n     public enum ResolutionStatusCode {\r\n         Cancelled = 4,\r\n         Error = 5,\r\n         None = 0,\r\n         NotFound = 2,\r\n         Pending = 1,\r\n         Success = 3,\r\n     }\r\n     public abstract class ServiceEndPoint {\r\n         protected ServiceEndPoint();\r\n         public abstract EndPoint EndPoint { get; }\r\n         public abstract IFeatureCollection Features { get; }\r\n         public static ServiceEndPoint Create(EndPoint endPoint, IFeatureCollection? features = null);\r\n         public virtual string GetEndPointString();\r\n     }\r\n     public class ServiceEndPointCollection : IEnumerable, IEnumerable<ServiceEndPoint>, IReadOnlyCollection<ServiceEndPoint>, IReadOnlyList<ServiceEndPoint> {\r\n         public ServiceEndPointCollection(string serviceName, List<ServiceEndPoint>? endpoints, IChangeToken changeToken, IFeatureCollection features);\r\n         public IChangeToken ChangeToken { get; }\r\n         public int Count { get; }\r\n         public IFeatureCollection Features { get; }\r\n         public string ServiceName { get; }\r\n         public ServiceEndPoint this[int index] { get; }\r\n         public IEnumerator<ServiceEndPoint> GetEnumerator();\r\n         IEnumerator IEnumerable.GetEnumerator();\r\n         public override string ToString();\r\n     }\r\n     public class ServiceEndPointCollectionSource {\r\n         public ServiceEndPointCollectionSource(string serviceName, IFeatureCollection features);\r\n         public IList<ServiceEndPoint> EndPoints { get; }\r\n         public IFeatureCollection Features { get; }\r\n         public string ServiceName { get; }\r\n         public void AddChangeToken(IChangeToken changeToken);\r\n         public static ServiceEndPointCollection CreateServiceEndPointCollection(ServiceEndPointCollectionSource source);\r\n         public IChangeToken GetChangeToken();\r\n     }\r\n     public sealed class ServiceEndPointResolverResult {\r\n         public ServiceEndPointResolverResult(ServiceEndPointCollection endPoints, ResolutionStatus status);\r\n         public ServiceEndPointCollection EndPoints { get; }\r\n         public bool ResolvedSuccessfully { get; }\r\n         public ResolutionStatus Status { get; }\r\n     }\r\n }\r\n```\r\n\r\n## APIs in Microsoft.Extensions.ServiceDiscovery.dll\r\n\r\n### Microsoft.Extensions.DependencyInjection\r\n\r\n``` diff\r\n namespace Microsoft.Extensions.DependencyInjection {\r\n     public static class HttpClientBuilderExtensions {\r\n         public static IHttpClientBuilder UseServiceDiscovery(this IHttpClientBuilder httpClientBuilder);\r\n         public static IHttpClientBuilder UseServiceDiscovery(this IHttpClientBuilder httpClientBuilder, IServiceEndPointSelectorProvider selectorProvider);\r\n     }\r\n }\r\n```\r\n\r\nThe rationale for putting these extension methods in this namespace is that this is where the `IHttpClientBuilder.AddStandardResilienceHandler()` extension lives. In Aspire apps, at least, these two often appear together in the _ServiceDefaults_ project. Example:\r\n\r\n```csharp\r\nbuilder.Services.ConfigureHttpClientDefaults(http =>\r\n{\r\n    // Turn on resilience by default\r\n    http.AddStandardResilienceHandler();\r\n\r\n    // Turn on service discovery by default\r\n    http.UseServiceDiscovery();\r\n});\r\n```\r\n\r\n### Microsoft.Extensions.Hosting\r\n\r\n``` diff\r\n namespace Microsoft.Extensions.Hosting {\r\n     public static class HostingExtensions {\r\n         public static IServiceCollection AddConfigurationServiceEndPointResolver(this IServiceCollection services);\r\n         public static IServiceCollection AddConfigurationServiceEndPointResolver(this IServiceCollection services, Action<ConfigurationServiceEndPointResolverOptions>? configureOptions = null);\r\n         public static IServiceCollection AddPassThroughServiceEndPointResolver(this IServiceCollection services);\r\n         public static IServiceCollection AddServiceDiscovery(this IServiceCollection services);\r\n         public static IServiceCollection AddServiceDiscoveryCore(this IServiceCollection services);\r\n     }\r\n }\r\n```\r\n\r\n### Microsoft.Extensions.ServiceDiscovery\r\n\r\n``` diff\r\n namespace Microsoft.Extensions.ServiceDiscovery {\r\n     public sealed class ServiceEndPointResolver : IAsyncDisposable {\r\n         public ValueTask DisposeAsync();\r\n         public ValueTask<ServiceEndPointCollection> GetEndPointsAsync(string serviceName, CancellationToken cancellationToken);\r\n     }\r\n     public class ServiceEndPointResolverFactory {\r\n         public ServiceEndPointResolverFactory(IEnumerable<IServiceEndPointResolverProvider> resolvers, ILogger<ServiceEndPointWatcher> resolverLogger, IOptions<ServiceEndPointResolverOptions> options, TimeProvider timeProvider);\r\n         public ServiceEndPointWatcher CreateResolver(string serviceName);\r\n     }\r\n     public sealed class ServiceEndPointWatcher : IAsyncDisposable {\r\n         public ServiceEndPointWatcher(IServiceEndPointProvider[] resolvers, ILogger logger, string serviceName, TimeProvider timeProvider, IOptions<ServiceEndPointResolverOptions> options);\r\n         public Action<ServiceEndPointResolverResult>? OnEndPointsUpdated { get; set; }\r\n         public string ServiceName { get; }\r\n         public ValueTask DisposeAsync();\r\n         public ValueTask<ServiceEndPointCollection> GetEndPointsAsync(CancellationToken cancellationToken = default(CancellationToken));\r\n         public void Start();\r\n     }\r\n }\r\n```\r\n\r\n### Microsoft.Extensions.ServiceDiscovery.Abstractions\r\n\r\n``` diff\r\n namespace Microsoft.Extensions.ServiceDiscovery.Abstractions {\r\n     public class ConfigurationServiceEndPointResolverOptions {\r\n         public ConfigurationServiceEndPointResolverOptions();\r\n         public Func<ServiceEndPoint, bool> ApplyHostNameMetadata { get; set; }\r\n         public string? SectionName { get; set; }\r\n     }\r\n     public class ConfigurationServiceEndPointResolverProvider : IServiceEndPointResolverProvider {\r\n         public ConfigurationServiceEndPointResolverProvider(IConfiguration configuration, IOptions<ConfigurationServiceEndPointResolverOptions> options, ILoggerFactory loggerFactory);\r\n         public bool TryCreateResolver(string serviceName, out IServiceEndPointProvider? resolver);\r\n     }\r\n     public class PickFirstServiceEndPointSelector : IServiceEndPointSelector {\r\n         public PickFirstServiceEndPointSelector();\r\n         public ServiceEndPoint GetEndPoint(object? context);\r\n         public void SetEndPoints(ServiceEndPointCollection endPoints);\r\n     }\r\n     public class PickFirstServiceEndPointSelectorProvider : IServiceEndPointSelectorProvider {\r\n         public PickFirstServiceEndPointSelectorProvider();\r\n         public static PickFirstServiceEndPointSelectorProvider Instance { get; }\r\n         public IServiceEndPointSelector CreateSelector();\r\n     }\r\n     public class PowerOfTwoChoicesServiceEndPointSelector : IServiceEndPointSelector {\r\n         public PowerOfTwoChoicesServiceEndPointSelector();\r\n         public ServiceEndPoint GetEndPoint(object? context);\r\n         public void SetEndPoints(ServiceEndPointCollection endPoints);\r\n     }\r\n     public class PowerOfTwoChoicesServiceEndPointSelectorProvider : IServiceEndPointSelectorProvider {\r\n         public PowerOfTwoChoicesServiceEndPointSelectorProvider();\r\n         public static PowerOfTwoChoicesServiceEndPointSelectorProvider Instance { get; }\r\n         public IServiceEndPointSelector CreateSelector();\r\n     }\r\n     public class RandomServiceEndPointSelector : IServiceEndPointSelector {\r\n         public RandomServiceEndPointSelector();\r\n         public ServiceEndPoint GetEndPoint(object? context);\r\n         public void SetEndPoints(ServiceEndPointCollection endPoints);\r\n     }\r\n     public class RandomServiceEndPointSelectorProvider : IServiceEndPointSelectorProvider {\r\n         public RandomServiceEndPointSelectorProvider();\r\n         public static RandomServiceEndPointSelectorProvider Instance { get; }\r\n         public IServiceEndPointSelector CreateSelector();\r\n     }\r\n     public class RoundRobinServiceEndPointSelector : IServiceEndPointSelector {\r\n         public RoundRobinServiceEndPointSelector();\r\n         public ServiceEndPoint GetEndPoint(object? context);\r\n         public void SetEndPoints(ServiceEndPointCollection endPoints);\r\n     }\r\n     public class RoundRobinServiceEndPointSelectorProvider : IServiceEndPointSelectorProvider {\r\n         public RoundRobinServiceEndPointSelectorProvider();\r\n         public static RoundRobinServiceEndPointSelectorProvider Instance { get; }\r\n         public IServiceEndPointSelector CreateSelector();\r\n     }\r\n     public sealed class ServiceEndPointResolverOptions {\r\n         public ServiceEndPointResolverOptions();\r\n         public TimeSpan PendingStatusRefreshPeriod { get; set; }\r\n         public TimeSpan RefreshPeriod { get; set; }\r\n     }\r\n }\r\n```\r\n\r\n### Microsoft.Extensions.ServiceDiscovery.Http\r\n\r\n``` diff\r\n namespace Microsoft.Extensions.ServiceDiscovery.Http {\r\n     public class HttpServiceEndPointResolver : IAsyncDisposable {\r\n         public HttpServiceEndPointResolver(ServiceEndPointResolverFactory resolverFactory, IServiceEndPointSelectorProvider selectorProvider, TimeProvider timeProvider);\r\n         public ValueTask DisposeAsync();\r\n         public ValueTask<ServiceEndPoint> GetEndpointAsync(HttpRequestMessage request, CancellationToken cancellationToken);\r\n     }\r\n     public class ResolvingHttpClientHandler : HttpClientHandler {\r\n         public ResolvingHttpClientHandler(HttpServiceEndPointResolver resolver);\r\n         protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);\r\n     }\r\n     public class ResolvingHttpDelegatingHandler : DelegatingHandler {\r\n         public ResolvingHttpDelegatingHandler(HttpServiceEndPointResolver resolver);\r\n         public ResolvingHttpDelegatingHandler(HttpServiceEndPointResolver resolver, HttpMessageHandler innerHandler);\r\n         protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);\r\n     }\r\n }\r\n```\r\n\r\n## Usage Examples\r\n\r\n### Using Service Discovery with HttpClient\r\n\r\nThe primary scenario for service discovery is for `HttpClient`, where \r\nA common approach is to add Service Discovery to the default `HttpClient` factory as follows. This example comes from the [Aspire ServiceDefaults project](https://github.com/dotnet/aspire/blob/eb0cdc6460c12f34ce2e995aaa398a4cec90ba18/playground/eShopLite/ServiceDefaults/Extensions.cs#L20-L29) which we generate on behalf of users: \r\n\r\n```csharp\r\nbuilder.Services.AddServiceDiscovery();\r\n\r\nbuilder.Services.ConfigureHttpClientDefaults(http =>\r\n{\r\n    // Turn on resilience by default\r\n    http.AddStandardResilienceHandler();\r\n\r\n    // Turn on service discovery by default\r\n    http.UseServiceDiscovery();\r\n});\r\n```\r\n\r\nOnce service discovery is configured on the application host, individual typed `HttpClient`s are configured by setting the `BaseAddress` to include the logical service name. In the following example, there are two logical service names:\r\n\r\n```csharp\r\nbuilder.Services.AddHttpClient<CatalogServiceClient>(c => c.BaseAddress = new(\"http://catalogservice\"));\r\n\r\nbuilder.Services.AddSingleton<BasketServiceClient>()\r\n                .AddGrpcClient<Basket.BasketClient>(o => o.Address = new(\"http://basketservice\"));\r\n```\r\n\r\nThe corresponding configuration sections in JSON might like this:\r\n\r\n```json\r\n{\r\n  \"services\":\r\n  {\r\n    \"basketservice\": \"127.0.0.1:8080\", // A single IP endpoint\r\n    \"catalogservice\": [ // An IP and a DNS endpoint\r\n      \"localhost:8888\",\r\n      \"10.0.0.1:5032\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### Named endpoints\r\n\r\nSimilarly, named endpoints can be used to specify a particular endpoint exposed by service, for example:\r\n* The \"https\" endpoint on catalog service (versus the \"http\" endpoint, for example)\r\n* The \"dashboard\" endpoint on the basket service\r\n\r\nIn _configuration_, there are currently two syntaxes for specifying an endpoint name:\r\n\r\n1. Using a URI scheme. Eg, `grpc://remotehost:2222` has the endpoint name `grpc`.\r\n2. Using a prefix. Eg, `_grpc.remotehost:2222` is also named `grpc`. The `_` prefix tells the configuration provider that the following segment is an endpoint name. This has clear limitations, for example, it would not work with an IP endpoint, since `_grpc.127.0.0.1` cannot be parsed as a `System.Uri`.\r\n\r\nFor _consumption_, both of those mechanisms are also valid.\r\n* For named endpoints, the `_endpointName.serviceName` syntax is preferable, since it does not interfere with the URI passed to `HttpClient`\r\n\r\n### Ad-hoc service resolution\r\n\r\nService endpoints can also be resolved outside of `HttpClient`'s integration. The most straight-forward approach to this is to use `ServiceEndPointResolver.GetEndPointsAsync(string serviceName, CancellationToken cancellationToken)` like so:\r\n\r\n```csharp\r\nvar app = builder.Build();\r\nawait app.StartAsync();\r\nServiceEndPointResolver resolver = app.Services.GetRequiredService<ServiceEndPointResolver>();\r\n\r\n// Resolve the service and enumerate the endpoints\r\nServiceEndPointCollection endpoints\r\n  = await resolver.GetEndPointsAsync(\"catalogservice\", CancellationToken.None);\r\nforeach (ServiceEndPoint endpoint in endpoints)\r\n{\r\n    Console.WriteLine(endpoint);\r\n}\r\n```\r\n\r\n## Alternative Designs\r\n\r\n**Config-only**: Scrap most of the library and only support host name replacement via `IConfiguration`. One benefit to that approach is that we could adopt a simpler, synchronous API. For the two main cases which we target with Aspire, that would be sufficient: we already use `IConfiguration` in the inner-loop. When deployed to Azure Container Apps, we use the pass-thru provider since ACA has its own service discovery via a service mesh.\r\nDownsides to this approach include that it is not flexible or extensible outside of the `IConfiguration` extensibility model. Eg, it could not be extended to support purpose-built service discovery mechanisms like Consul and DNS or anything which requires I/O. It also would not support client-side load balancing.\r\n\r\n## Risks & deficiencies\r\n\r\n* The current usage of the API does not offer zero-downtime upgrades without relying on retries in Kubernetes or other environments where DNS is used because pods can be taken down without clients first removing them from the rotation. Systems such as [Meta's Shard Manager](https://engineering.fb.com/2020/08/24/production-engineering/scaling-services-with-shard-manager/) integrate with the cluster manager so that clients can gracefully drain load before the target service is terminated. There are some mitigating factors to this risk:\r\n  * The `IFeatureCollection` allows for extensibility if we ever wanted to support this (and had a means to).\r\n  * Defunct endpoints could be removed from the rotation after exceptions are observed by implementing `IEndPointHealthFeature` and integrating it with `IServiceEndPointSelector`.\r\n  * Services can always crash, that is not new here: resilient apps must deal with crashes by using retries, etc, already.\r\n* The API _currently_ provides no clear way to change the _scheme_ of an `HttpClient` request. Eg, we cannot _currently_ change the scheme from \"http://\" to \"https://\" using service discovery. We could offer this functionality using a feature on the returned `ServiceEndPoint` or by returning a `UriEndPoint`, which we do not currently have.\r\n* Due to the asynchronous nature of the API, there are many places where it does not integrate cleanly. For example, during application startup, while configuring `IOptions<T>` or other DI services, in constructors, etc.\r\n\r\n## Designer notes:\r\n\r\n* We should change `IEndPointLoadFeature.CurrentLoad` to a `float` (from `double`), since it has plenty of precision for the purposes of load balancing.","Url":"https://github.com/dotnet/aspnetcore/issues/53715","RelatedDescription":"Open issue \"API Proposal: Microsoft.Extensions.ServiceDiscovery\" (#53715)"},{"Id":"2108610366","IsPullRequest":false,"CreatedAt":"2024-01-30T19:33:38","Actor":"mayur-ekbote","Number":"53714","RawContent":null,"Title":"Blazor Server folder publish fails for specific configurations","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI am using Antler for my Blazor Server app. I have published the app several times on Azure App Service and VPS without any issue till .net 7.\r\nAfter I upgraded to .net 8, publish started failing (both on Azure App service and folder) with the following errors:\r\n\r\n```\r\nError NU1605: Warning As Error: Detected package downgrade: System.Text.Encoding.Extensions from 4.3.0 to 4.0.11. Reference the package directly from the project to select a different version. \r\n Teardrop -> Antlr4.Runtime 4.6.6 -> NETStandard.Library 1.6.0 -> System.Console 4.0.0 -> runtime.win.System.Console 4.3.0 -> System.Text.Encoding.Extensions (>= 4.3.0) \r\n Teardrop -> Antlr4.Runtime 4.6.6 -> NETStandard.Library 1.6.0 -> System.Text.Encoding.Extensions (>= 4.0.11)\r\n```\r\n\r\nI made the changes as per the guidance provided for the error [NU1605](https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1605) to the csproj:\r\n\r\n```\r\n    <PackageReference Include=\"Antlr4\" Version=\"4.6.6\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n    </PackageReference>\r\n    <PackageReference Include=\"Antlr4.CodeGenerator\" Version=\"4.6.6\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n    </PackageReference>\r\n\r\n  <PackageReference Include=\"Antlr4.Runtime\" Version=\"4.6.6\" PrivateAssets=\"all\">\r\n  </PackageReference>\r\n```\r\n\r\nThis fixed the publish issue *only* for publish configuration framework dependent + portable. It fails for all other options i.e. self-contained/platform dependent. \r\n\r\nNote that\r\n1. This did not happen till .net 7 (I have been using the same version of ANTLR since .net core 3.1)\r\n2. Because of this, it is not possible to deploy the app on a linux app service on Azure directly through VS.\r\n\r\n### Expected Behavior\r\n\r\n_No response_\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.101\r\n\r\n### Anything else?\r\n\r\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/53714","RelatedDescription":"Open issue \"Blazor Server folder publish fails for specific configurations\" (#53714)"},{"Id":"2108192803","IsPullRequest":false,"CreatedAt":"2024-01-30T19:11:41","Actor":"JeepNL","Number":"53708","RawContent":null,"Title":"[Blazor SSR] Issue with NavigationManager.NavigateTo and Already Percent-Encoded URLs","State":"closed","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\n**Note:** maybe this issue is already fixed with https://github.com/dotnet/aspnetcore/issues/53138, https://github.com/dotnet/aspnetcore/pull/53470 but I can't tell. If it is fixed, you can of course close this issue directly. \r\n\r\nIn Blazor applications, specifically when using Server Side Rendering (SSR) with .NET 8, I've encountered an issue where `NavigationManager.NavigateTo` does not correctly handle navigation when provided with already percent-encoded URLs.\n\n### Expected Behavior\n\n`NavigationManager.NavigateTo` should correctly handle already percent-encoded URLs, allowing for successful navigation without errors.\n\n### Steps To Reproduce\n\nCreate a Blazor Server Side Rendering application using .NET 8.\r\nAttempt to use NavigationManager.NavigateTo to navigate to a URL that contains percent-encoded characters (e.g., `https://www.nvj.nl/nieuws/offici%C3%ABle-waarschuwing-zonder-wederhoor-mag`).\r\nObserve that the navigation does not work as expected, and an error is thrown.\n\n### Exceptions (if any)\n\n```\r\ninfo: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]\r\n      Executed endpoint '/ext/{text} (/ext/{text})'\r\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[1]\r\n      An unhandled exception has occurred while executing the request.\r\n      System.InvalidOperationException: Invalid non-ASCII or control character in header: 0x00EB\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpHeaders.ThrowInvalidHeaderCharacter(Char ch)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpHeaders.ValidateHeaderValueCharacters(String headerCharacters, Boolean requireAscii)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpHeaders.ValidateHeaderValueCharacters(String headerName, StringValues headerValues, Func`2 encodingSelector)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseHeaders.Microsoft.AspNetCore.Http.IHeaderDictionary.set_Location(StringValues value)\r\n         at Microsoft.AspNetCore.Components.Endpoints.EndpointHtmlRenderer.HandleNavigationException(HttpContext httpContext, NavigationException navigationException)\r\n         at Microsoft.AspNetCore.Components.Endpoints.EndpointHtmlRenderer.RenderEndpointComponent(HttpContext httpContext, Type rootComponentType, ParameterView parameters, Boolean waitForQuiescence)\r\n         at Microsoft.AspNetCore.Components.Endpoints.RazorComponentEndpointInvoker.RenderComponentCore(HttpContext context)\r\n         at Microsoft.AspNetCore.Components.Endpoints.RazorComponentEndpointInvoker.RenderComponentCore(HttpContext context)\r\n         at Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext.<>c.<<InvokeAsync>b__10_0>d.MoveNext()\r\n      --- End of stack trace from previous location ---\r\n         at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n         at Microsoft.AspNetCore.HttpLogging.W3CLoggingMiddleware.Invoke(HttpContext context)\r\n         at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n         at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n         at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware.<Invoke>g__AwaitMatcher|10_0(EndpointRoutingMiddleware middleware, HttpContext httpContext, Task`1 matcherTask)\r\n         at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\r\n```\n\n### .NET Version\n\n8.0.200-preview.23624.5\n\n### Anything else?\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/53708","RelatedDescription":"Closed issue \"[Blazor SSR] Issue with NavigationManager.NavigateTo and Already Percent-Encoded URLs\" (#53708)"},{"Id":"2108567943","IsPullRequest":false,"CreatedAt":"2024-01-30T19:06:46","Actor":"pr-benchmarks[bot]","Number":"53713","RawContent":null,"Title":"Perf improvement: plaintext","State":"open","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| plaintext  | Plaintext Minimal APIs 2- Trends Intel Linux | 01/29/2024 09:33:41 | 4,034,690 | 4,086,120 | 1.27 % (51,430)  :thumbsup:  | 2.01 σ | 25,645.28 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.Extensions.Caching.Abstractions.dll</td>            <td>`9.0.0-preview.2.24075.11` -> `9.0.0-preview.2.24077.6`</td>            <td>https://github.com/dotnet/runtime/compare/0d81a5ac76948b49840c3a6f44703bfd6489109b...4fc943c3cb3feb72d1e33d8356a51e8d0bbf3ac7</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`9.0.0-preview.2.24076.3` -> `9.0.0-preview.2.24078.3`</td>            <td>https://github.com/dotnet/aspnetcore/compare/bd016947b6928159814950c06a6e2278be7a256f...1ab9e3bf251276b792d217afc8f669aad3564d56</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`9.0.0-preview.2.24077.2` -> `9.0.0-preview.2.24078.2`</td>            <td>https://github.com/dotnet/runtime/compare/e1f70470c964b4404913e3d475a4e48398f33034...e5d59bd65f6cc9c0f00cc863542cfda91d6f8355</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK]k8cFYsylzUrNxgAAAKfwlpGJrlByZXZpb3VzUmVzdWx0h6JJZM4ABrGlqEV4Y2x1ZGVkwqtEYXRlVGltZVV0Y5LX/7LQXgBltXZQAKdTZXNzaW9uqjIwMjQwMTI3LjKoU2NlbmFyaW+pcGxhaW50ZXh0q0Rlc2NyaXB0aW9u2SxQbGFpbnRleHQgTWluaW1hbCBBUElzIDItIFRyZW5kcyBJbnRlbCBMaW51eKhEb2N1bWVudMYAABNK8AnaH2F7ImpvYnMiOnsiYXBwbGljYXRpb24PAGFyZXN1bHQaAKFuZXRTZGtWZXJzHAD6GCI5LjAuMTAwLXByZXZpZXcuMi4yNDA3Ny4xIiwiYXNwTmV0Q29yZTAADC4A8gU2LjMrYmQwMTY5NDdiNjkyIiwibjgAP0FwcDsAC/khNy4yK2UxZjcwNDcwYzk2NCIsImJlbmNobWFya3MvYnVpbGQtdGltZSI6NDc1NC4wHwD+A3B1Ymxpc2hlZC1zaXplIjo5NiQAc3N5bWJvbHMiACsyOEMAU3N0YXJ0YgA7MjE2HgD7AXdvcmtpbmctc2V0IjoxMDEfAPsEcHJpdmF0ZS1tZW1vcnkiOjYxNSIAfmNwdSI6OTkWAKAvcmF3IjoyNzgzHAAwcnVu5QDwAi1jb3VudGVyL2NwdS11c2Fn1AD+ATkuMjkwMTkyOTQ0OTA3NjcuAAumAI41LjEzMjAzMikAc2djLWhlYXAMAZ8xMi4wODg5ODQpAAByZW4tMC1nY5EAPyI6MKUAAV9nZW4tMSUAER8yJQARAW8Ar2J1ZGdldCI6MzUXAQKydGhyZWFkcG9vbC0LAASgABE01wEMRgHwBG1vbml0b3ItbG9jay1jb250ZW4RAwY1AAHQAQw2AAJaAAFlAP8BcXVldWUtbGVuZ3RoIjoxOZUADfQAY29tcGxldGVkLWl0ZW1zaQBvMjg1NTMyQwEB8QNhbGxvYy1yYXRlIjo2MzM5NzeCAgyTAGFhY3RpdmWmAhRyVQAPvAACs2djLWZyYWdtZW50/AMPugEDANkBf21taXR0ZWQjAARZZXhjZXAuAR82ZAECAbcCX2luLWdjSQAEACYCEzByAg+NAAMBRwICwQMPIQAGHzJCAAk/bG9oHwAJH3AfAAuFYXNzZW1ibHlZAR8whAECo2lsLWJ5dGVzLWo3AV8zMzk4N9YBAmRtZXRob2QqAARYADwzNjAIBAe5A38vc3RlYWR5ZgQBNWNwdR4A8To5Ny4wfSwibWV0YWRhdGEiOltdLCJkZXBlbmRlbmNpZXMiOlt7ImlkIjoiTW14Q1BzS1hhM3JXQ1N6dUZiTWNWdz09IiwibmFtKgDwFCJNaWNyb3NvZnQuRXh0ZW5zaW9ucy5DYWNoaW5nLkFic3RyewIAFQBfZGxsIiwwAAsRTQYFDyoACnFvbmZpZ3VynAIPYAAXCTYAb0JpbmRlcmYAF79Db21tYW5kTGluZTUAFw/EABZwRW52aXJvbnEDj1ZhcmlhYmxlLAELCcwAR0ZpbGV5AQ92ABY/SW5pzAAXL0pz0QAZr1VzZXJTZWNyZXSQABg/WG1skAAJFESgAlF5SW5qZVECD/0BFg88AAEPKAEIv0RpYWdub3N0aWNzYwAXBzQAD1sACACtAY9Qcm92aWRlcl0AFwo2AI9Db21wb3NpdIsCCgozAH9QaHlzaWNhYQEKADIA71N5c3RlbUdsb2JiaW5njwEJEEggAQ/gAxgEMAAPHAEIT0h0dHBzAAlATG9nZ5YAD1MEFQQwAAovAw+BAAgHMQA/c29sXwEKBCsAT0RlYnXVAAoEKQAPdwAQf0V2ZW50TG8sABdfU291cmOnABJfVHJhY2UvAA8RT60HC2EED1wEEwQ7AIJEYXRhQW5ubzsIDwwDCgQzAA8bAQhQUHJpbWm3CAQmAAKhAgmiAws3AQMiAKVJTy5QaXBlbGluTAUDGgD7ClNlY3VyaXR5LkNyeXB0b2dyYXBoeS5Qa2NkAA8oAAMGpgQDTwARVE8KAJgCUVJhdGVMsAADOwNRXSwicmWrA/MUb3J5VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL2RvdG5ldC++C0kiLCJ2Vw0MJw0wNS4xVg0CewnzI0hhc2giOiIwZDgxYTVhYzc2OTQ4YjQ5ODQwYzNhNmY0NDcwM2JmZDY0ODkxMDliIn0s2Af7BlIwQWdqdmtJdG8wWkt0elB0OFBjedgHk1Jhem9yU2xpY0IBD88AE+dEYW1pYW5FZHdhcmRzL0QACdoAXDAuNy4wxwD2GTZmYTU5NTRlNWU2MDU3ZDY5MzZiYjA5YmFjODZlNWJlYzFjNWM4ZWTHAPoHR0xKN1lFdGlzbDJ1Zzlua2ROMkVaQccAUk5wZ3Nx+gQPwgATEW4xAAMHAAm2ABA45w4MtgD3GGMzNmIxYmM3ZTVjNmQ3OWJiNTI2ZTVhODlhMGE2OGYxNTBiMjgzY30B+wZld3NMKzJ2NFFmMzhzcDZIdXFvNUO2AENEYXBwoggPtgATAjEAM0xpYgoACbkAbTIuMS4yNLoAljQ2YzY5YTE3NFIB+wZaYlBaR3VPRllrOEUza1RMNTB1RW0ZAlNNaW5pbU0GD50AEwPkAhVClQ8JngA+MS4wDQLwCTExZWVhZWRjZGFmOTMyMDhmYmE1ZGUxYQkCxjdmMDJiZTc4YzBmN7sA/QYra0wzSVBhcXZkVkhJVlI4bVVCdnK7AASsChVBlxBPLkFwcMgAG6lhc3BuZXRjb3JlyAAABhEMrwM8Ni4zdwEI5RD2DTgxNTk4MTQ5NTBjMDZhNmUyMjc4YmU3YTI1NmbaAP8GVlFncjlDeE5IRHdhVUdBZjlmZjBU2gAGP05FVNcAIw+DBBUgNy6dEQmCBAh+EfAcYjQ0MDQ5MTNlM2Q0NzVhNGU0ODM5OGYzMzAzNCJ9XSwibWVhc3VyZW1lbk4SVltdLCJlAgsAahLhaHciOiJQSFlTSUNBTCIfAPEXIjoiVW5zcGVjaWZpZWQiLCJvcyI6IkxpbnV4IiwiYXJjaCI6Ilj7EYhwcm9jIjoyOEoF5DAuMi4wLWRldiJ9LCJ2ZQsBbABRZWFkZXILAPAIbm9uZSI6IiIsInBsYWludGV4dCI6Ii3vEIBkZXIgXCJBY9AOIDogGgARLyQAESwLALdodG1sO3E9MC45LDQTIC94GAAvK3gcAAMDFgBROCwqLyo8AEc3XCIgbABCQ29ubucK0Doga2VlcC1hbGl2ZVyeAABXAA+ZAAgAHwAPiAADChYAA4IAFTmCAB84ggAWIGpzExQPGwEBCAABACYADyEBYhVjPAFAY2xvc9QBD1kBBAEfACBcIhUCcXByZXNldEjrAQBbAgENAvQDLCJzZXJ2ZXJQb3J0Ijo1MDAwEgBAU2NoZVEUAdIHFCIWANBBZGRyZXNzIjoiMTAuAgAiMTArAzJyZXOTAp9zZWNvbmRhcnkrAAAQMYgAFmIkBaA6W119LCJsb2FkngIHfxUGJAAJexQB+RAAYgjAL2ZpcnN0cmVxdWVzdBQROGIQBzYACZMUETSrEAceAAySFDszNTgiAAGSFC40MxYAApIUQDEyMDEcAPIJd3JrL3Jwcy9tZWFuIjo0MDM0NjkwLjMxGgCgdGhyb3VnaHB1dLgSQjQuODgyAPIDbGF0ZW5jeS9tYXgiOjQ4Ljg2GAAD0AChcyI6NjA5MjQwOZYAADIAkGVycm9ycy9iYX4BQHBvbnNuAQEOAQceAGJzb2NrZXQrAAceAARuACA1MBUAMjU5NDUABBcAIDc1FwAEgwAEFgAgOTA8ExsxsQAgOTksABowQQAC/ABzMC42NTU4NZ8BBEcADxwAAQ8wAQMB1gEPMQEBARkABVAABzIBARkADzMBAwkbAA82AQEKIQAJMwEBGwAEcAAHNAEJGAAGNQEJFwAGNgEKFwACNwEQfRkGD5ISCBBdIAAPOQb//5IBGAgAFwgFFgYIPgYGmwYAEQZTNTYsImTLFGAiOjE1LCILFxBvEgXDbnVsbCwid2FybXVwGwABag4wcyI6lhkTcN0OwiI6MTYsInNjcmlwdLwIAgwAQ0FyZ3VhCQAzCALHBg+1BhogcGGwGBIi6AgD0ABlY3VzdG9tJQcAuwkP3AYoAXYHYG9wZXJ0abEFoHsic2NlbmFyaW/+CQSCCQNtDEBBcGlzmQlkcm90b2NvSw/0BSIsImJ1aWxkSWQiOiIyMzYzOTE4FABgTnVtYmVyGABmMDI0MDEytgpCYW5kLTwBgCJjcmFuayAt2RlAZmlnIJgEC58PAuwLJS9ClwfnL2Jsb2IvbWFpbi9zcmMZAPMCQXBwcy9UZWNoRW1wb3dlci+7ACMvbTANBmMH3i55bWw/cmF3PXRydWV/AEJyYXcuIhBDdXNlcnUaAS0QDo4AAYkAAQUB4C9henVyZS5wcm9maWxlYwAPWgAwBJMBAOUcj2VhZHlzdGF0ZAA9Ar4AK2NpuwAEewAVIFIDMyAtLd4AYCBpbnRlbMYBTi1hcHAYAEFvYWQyBgAgIC0hAASTC2AuZnJhbWX+CHsgbmV0OS4wHwCHY29sbGVjdEQMGRMgowEH2QojLm8oEwMvAHVDb3VudGVyKwBFbG9hZCQAYHJldXNlQqUCAR8AwSJ9fa1DdXJyZW50UlAf8yWHoklkzgAGtOKoRXhjbHVkZWTCq0RhdGVUaW1lVXRjktf/d+yvAGW3cPUAp1Nlc3Npb26q0gJTOS4xqFMzAxWpJQEyq0RlAwRVaW9u2SxIAxMgjgLwAiBBUElzIDItIFRyZW5kcyBJSQERIEkNQahEb2M1BD/aH2IGIDcfOAYgGvAAOC4zKzFhYjllM2JmMjUxPgsPBiAVEDgGILA1ZDU5YmQ2NWY2YwkEBU0LIC9igwEQLV8FQiI6MzigCgaRAw8GIAIM4AoPBiAZIDI3YQADUg8iLWMiAguTH+k0MzI4NjY4MDgxNjUxMo8AAKMCBzQgDMALDKILLDYxxAsBogsgOTmFAAfmAAWiCzEyNzhUAAyhAAt4AI42Ljk0MjQ2NCkAc2djLWhlYXAzHZ8xMS45NjAwOTYpAAAPBiDREjiWHQxOAQKyBwFrIAoGICEyMCgMDzAACA8GIAVBOTUwMfgMDDwACwYgPzc5MmMAAiBhY08XAQgDEnKXAgDKDA9QAAAPBiBJHzWbAAIAnAMPBiDlPzg1NYYBAg8GIAQSNfwOB9oDB7kDBegfDjgEAAAEAsgHICI6QwAQfVQNDwYg/////////6g8Ny42gxv/GTRmYzk0M2MzY2IzZmViNzJkMWUzM2Q4MzU2YTUxZThkMGJiZjNhYzcFIP///2MeOAUgCOQQ9g03NmI3OTJkMjE3YWZjOGY2NjlhYWQzNTY0ZDU2rgMPBSB8IDgunBEJggQIfRHwEGM5YzBmMDBjYzg2MzU0MmNmZGE5MWQ2ZjgzNTUifV14DA/MGf//kg8FILobNA0UBzMQPCI6NEEUDGMUDwUgIQEEFQCDHwjVHoI4NjEyMC4zMxoACdQeUjQyLjk4GAAEYx4CBSAkMC6YHwPVIBFz9BQyOTg0aBUAZAAPBSA4GzeFAAMFIBM0tAAEnAADBiALMiAPBiALUTYxMDQsNSIG6CABHiEKHAAPMQEDAJ8aDzIBAgEZAAVQAAEGIAIzAQEZAA80AQMJGwAPBiAwADUBAVQABIgABzYBCRgABjcBChcADwcg/////zswNDUwdBwB8xsMByAROY8cALgKDwcg//9u8AWmQ2hhbmdly0DpHMCj1wpAsVN0YRoqYGREZXZpYeA28hXLQNkLUh7g0tKnQXZlcmFnZctBTwRZgIxvLa9SZWNvdmVyZWRFIPIJwKZMYWJlbHOTpFBlcmavcGVyZi1yZWdyMCBgqWFyZWEtFQDyB6ZPd25lcnORrHNlYmFzdGllbnJvc6eJAIdzk4mjSm9iqy8hT6JJZLgCOgW2pU5hbWVz3AAo2S1VLw8BOhAv2ScvAAoGADov2TMpAAMBqiMDNCUNXzoPjQAFCTUABv45L9kyZAAQC/05L9kmNAAQX2RsbNk7KAAQD/s5BS/ZNT0AEA76OS/ZKjcAEAP5OS/ZKywAEAT4OQ8pARIL9zkPjQASIVhtmzMv2TmNAAIFiSMP9TkIL9ksOwAWAJYBHzEuAAMHvzkNVAIfJDMADgBZAA+vAgMApAEP8TkHL9kwWwACCjUACfA5L9kvMgAQCO85D+cBBABjAALCNgjuOQ8/AwQP7TkFL9kgjQACBC8AT2RsbL0hAAMD6jkPbwAEBDQ5DYkBHy5OAAIELwAN6Dkv2SgwAA0E5zkP1AMEBFoABeY5D/EABAQoAAAHAh8pdAAKCOQ5D7kCBARNAAErAAbjOQ8uAAwL4jkv2TiHAAIEczkJKwEHtQUAwQAPkwIDBDoAD+A5AA8VAQQEMgAAVAAfI44AAiFQci45A945Er99PAmLAwEEASFMb1oBE7cgAAzaOSPZJRkAD9k5Cy/ZJCcACgSIBBMhJgARVLsjD9c5ASitUtQ5INkhxQ4LNCoK0zkgr1AWRzNvdXPFRh+4KDYBUzUuMTGuGSgDKAAftygAAUQ3LjayUAAAmQYCBDov2SgDOhUTsWQACDwADzoaFRKqKQhfVHlwZQAsCAIPgjcFAiwIJpG4BgIKfjcLUwEfJFMBBwIAKwB0LAxWAQ8uAQI/Ni4zVQERPzguM1UBAg+qNxUPVQEBD+EXFQ9VAQ4P+BcFA1UBFrVVAQf5NwtSAQ+lAh8PTwECPzcuMk8BEx8yTwECCKNJDyU4CQ9PAQEPXBgVA08BUFR5cGUA[/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/53713","RelatedDescription":"Open issue \"Perf improvement: plaintext\" (#53713)"},{"Id":"2108382078","IsPullRequest":false,"CreatedAt":"2024-01-30T19:00:47","Actor":"janusqa","Number":"53709","RawContent":null,"Title":"JwtBearer custom handler (HandleAuthenticateAsync)","State":"closed","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen using a custom handler I have to manually reconstruct claims in order for User to be properly authorized.\r\n\r\n```\r\nvar validationResult = await jwtTokenHandler.ValidateTokenAsync(\r\n    clientJwtToken,\r\n    new TokenValidationParameters\r\n    {\r\n        IssuerSigningKey = new SymmetricSecurityKey(key),\r\n        ValidateIssuerSigningKey = true,\r\n        ValidateLifetime = true,\r\n        ValidateIssuer = false,\r\n        ValidateAudience = false\r\n    });\r\n    \r\n    // why can't I do this (1)\r\n    var claimsPrincipal = new ClaimsPrincipal(validationResult.ClaimsIdentity);\r\n    // or this (2)\r\n    claimsPrincipal = new ClaimsPrincipal(new ClaimsIdentity(validationResult.ClaimsIdentity.Claims, Scheme.Name));\r\n    // but instead am forced to recreate claims manually like this (3)\r\n    var claims = new List<Claim>\r\n        {\r\n            new Claim(ClaimTypes.Name, userNameClaim),\r\n            new Claim(ClaimTypes.Role, roleClaim),\r\n        };\r\nclaimsPrincipal = new ClaimsPrincipal(new ClaimsIdentity(claims, Scheme.Name));\r\n                                                       \r\n```        \r\n1 & 2 breaks down somewhere in the auth/authz, as when I look at the user in the controller the claims look off\r\nfor 3 the claims look more as they should be and the User is properly initialized in the controller.\r\n\r\n### Expected Behavior\r\n\r\nExpected these two to produce the same behaviour\r\n```\r\n                        var validationResult = await jwtTokenHandler.ValidateTokenAsync(\r\n                            clientJwtToken,\r\n                            new TokenValidationParameters\r\n                            {\r\n                                IssuerSigningKey = new SymmetricSecurityKey(key),\r\n                                ValidateIssuerSigningKey = true,\r\n                                ValidateLifetime = true,\r\n                                ValidateIssuer = false,\r\n                                ValidateAudience = false\r\n                            });\r\n\r\n```\r\n```\r\nvar claimsPrincipal = new ClaimsPrincipal(validationResult.ClaimsIdentity);\r\n```\r\n\r\n```\r\n var claims = new List<Claim>\r\n        {\r\n            new Claim(ClaimTypes.Name, userNameClaim),\r\n            new Claim(ClaimTypes.Role, roleClaim),\r\n        };\r\nvar claimsPrincipal = new ClaimsPrincipal(new ClaimsIdentity(claims, Scheme.Name));\r\n```\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.101\r\n\r\n### Anything else?\r\n\r\n```\r\n.NET SDK:\r\n Version:           8.0.101\r\n Commit:            6eceda187b\r\n Workload version:  8.0.100-manifests.69afb982\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  22.04\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/8.0.101/\r\n\r\n.NET workloads installed:\r\n Workload version: 8.0.100-manifests.69afb982\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.1\r\n  Architecture: x64\r\n  Commit:       bf5e279d92\r\n\r\n.NET SDKs installed:\r\n  8.0.101 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 8.0.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 8.0.1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n ```","Url":"https://github.com/dotnet/aspnetcore/issues/53709","RelatedDescription":"Closed issue \"JwtBearer custom handler (HandleAuthenticateAsync)\" (#53709)"},{"Id":"2108533207","IsPullRequest":false,"CreatedAt":"2024-01-30T18:46:59","Actor":"amiru3f","Number":"53712","RawContent":null,"Title":"Combining IdToken and AccessToken Claims To Build Principal In Authorization Code Flow","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nHey there,\r\n\r\n## Context\r\n\r\nWhile using `OpenIdConnectHandler` to leverage OIDC for handling authentication via external Identity Providers (like Duende, Google, Linkedin, AzureAD etc), after successful login and callback, the handler **verifies** the `IdToken` and injects claims into the current request `Principal` which means if the IDP puts claims into the `IdToken`, the application can access it via request.Principal.Claims\r\n\r\nNamely:\r\n\r\n``` c#\r\nauthenticationBuilder.AddOpenIdConnect(Schemes.AuthenticationSchemeInternal, \"Sample\", options =>\r\n{\r\n    options.Authority = //sth\r\n    options.ClientId = //sth\r\n    options.ClientSecret = //sth\r\n    options.ResponseType = OpenIdConnectResponseType.Code;\r\n    options.GetClaimsFromUserInfoEndpoint = //Will explain this later\r\n});\r\n```\r\n\r\nThe OpenIdConnectHandler checks if the callback contains `authorization code` which means the authentication was initiated in `AuthorizationCode` flow, fetches the `IdToken` and `AccessToken` and then extracts the `IdToken` claims. Then if `GetClaimsFromUserInfoEndpoint` is enabled uses the `AccessToken` to fetch the additional claims from the external IDP\r\n\r\n## Problem\r\nIDPs like `Duende` and `AzureAD` do not put the claims inside the IdToken but AccessToken in case you use the `authorization_code` flow. Unlike if you use `implicit`, they put the claims into the `IdToken` and the abovementioned works without any additional costs or issues.\r\n\r\nSo if you use `authorization_code`,  since the application does not read/care the`AccessToken`, it needs another call to `UserInfoEndpoint` to fetch the claims (Which might not be a good/performant case for all scenarios)\r\n\r\n### Describe the solution you'd like\r\n\r\nMy question/suggestion is why `OpenIdConnectHandler` does not combine the claims from `IdToken` **and** `AccessToken` together to build the `Principal`? Is this out of Standards/Protocols? Namely we can have a flag like options.AlsoCheckAccessTokenForClaims (default: false for avoiding breaking behaviours) so when you set the following flags it will get the claims from both and then no need to initiate another call to `UserInfoEndpoint`:\r\n\r\n``` C#\r\noptions.GetClaimsFromUserInfoEndpoint = false;\r\noptions.ResponseType = OpenIdConnectResponseType.Code;\r\noptions.AlsoCheckAccessTokenForClaims = true;\r\n```\r\n\r\nCan you please help me to know if I'm thinking mistakenly against of the Protocol or Standards or any other downsides?\r\n\r\n### Additional context\r\n\r\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/53712","RelatedDescription":"Open issue \"Combining IdToken and AccessToken Claims To Build Principal In Authorization Code Flow\" (#53712)"},{"Id":"2108481831","IsPullRequest":false,"CreatedAt":"2024-01-30T18:17:58","Actor":"dehghani-mehdi","Number":"53711","RawContent":null,"Title":"UseStaticFiles, ability to log not found file's path.","State":"open","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI want to log the URL of the requested file if the file doesn't exist, but I could not find any way to tell `UseStaticFiles` to do that.\n\n### Describe the solution you'd like\n\nA solution to tell `UseStaticFiles` log/report not found file's path.\n\n### Additional context\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/53711","RelatedDescription":"Open issue \"UseStaticFiles, ability to log not found file's path.\" (#53711)"},{"Id":"2108428424","IsPullRequest":false,"CreatedAt":"2024-01-30T17:49:15","Actor":"wtgodbe","Number":"53710","RawContent":null,"Title":"Handle 3rd party NPM dependencies in source-build","State":"open","Body":"We recently attempted to turn on the build of the NPM components in source-build. This led to issues as the NPM/node components have a couple 3rd party dependencies, which can't be restored in offline source-build. We have a couple options for how to tackle this:\r\n\r\n1. Check in a node package cache (matching our package.lock.json file) to a separate repo, which is a submodule of aspnetcore. Any time a dev changes a node dependency, they should re-generate the cache, push it to the new repo, and update the submodule in their PR. We'll need  to exclude that repo from automated submodule updates in that case (dependabot). Node has a validation mode that we can run during the build to ensure the package cache matches what's in package.lock.json.\r\n\r\n2. Add a pre-step for source build that does an online restore before we start offline source-build. There are already online pre-steps for source-build, so this wouldn't be against the \"spirit\" of source-build.\r\n\r\nWe should choose whichever approach most closely matches what our source-build partners do.\r\n\r\nCC @dotnet/distro-maintainers @javiercn @mthalman @MichaelSimons ","Url":"https://github.com/dotnet/aspnetcore/issues/53710","RelatedDescription":"Open issue \"Handle 3rd party NPM dependencies in source-build\" (#53710)"},{"Id":"2105758081","IsPullRequest":false,"CreatedAt":"2024-01-30T15:24:46","Actor":"rogulikAFC","Number":"53691","RawContent":null,"Title":"POST request returns error 400 (Bad Request) caused by CORS while fetching in JavaScript","State":"closed","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nAPI returns error 400 (Response {type: 'cors', url: 'https://localhost:7045/api/Users', redirected: false, status: 400, ok: false, …}) on POST request from React app\r\n\r\nThank you for help!\n\n### Expected Behavior\n\nAPI has to return 201 \n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\nError 400 (Bad Request)\n\n### .NET Version\n\n7.0\n\n### Anything else?\n\nThis is the ASP.NET core project: https://github.com/rogulikAFC/School-social-media/tree/main/SchoolSocialMediaServer\r\n\r\nThe error is returned from method CreateUser in this file: https://github.com/rogulikAFC/School-social-media/blob/main/SchoolSocialMediaServer/SchoolSocialMediaServer/Controllers/UsersController.cs\r\n\r\nThis is the source code of the project: https://github.com/rogulikAFC/School-social-media\r\n\r\nIn this file method signUp cause error: https://github.com/rogulikAFC/School-social-media/blob/main/frontend/src/contexts/UserContext.tsx","Url":"https://github.com/dotnet/aspnetcore/issues/53691","RelatedDescription":"Closed issue \"POST request returns error 400 (Bad Request) caused by CORS while fetching in JavaScript\" (#53691)"},{"Id":"2107940866","IsPullRequest":false,"CreatedAt":"2024-01-30T14:02:09","Actor":"aco-mreble","Number":"53707","RawContent":null,"Title":"Blazor Localization does not work with InteractiveServer","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen using `<Routes @rendermode=\"InteractiveServer\"/>` in pre-rendering the correct locale from the browser is shown but after pre-rendering succceded the Fallback Locale is set again. If you disable pre-rendering the fallback locale will be set all the times\r\n\r\n### Expected Behavior\r\n\r\nBlazor should set the correct locale for users\r\n\r\n### Steps To Reproduce\r\n\r\nCreate new Blazor Web App:\r\n```\r\ndotnet new blazor -o Test\r\n```\r\nin Program.cs add\r\n```\r\nbuilder.Services.AddLocalization();\r\n```\r\nand \r\n```\r\napp.UseRequestLocalization([\"en-US\", \"de-DE\"]);\r\n```\r\nIn `Components/App.razor` change `<Routes />` to\r\n```\r\n<Routes @rendermode=\"InteractiveServer\"/>\r\n```\r\nfor testing with prerender or \r\n```\r\n<Routes @rendermode=\"new InteractiveServerRenderMode(prerender:false)\"/>\r\n```\r\nfor testing without prerender.\r\n\r\nIn `Components/Pages/Home.razor` add this line below the page title\r\n```\r\n@(CultureInfo.CurrentCulture)\r\n```\r\n\r\nThen go to the website e.g. with Edge and go to Developer Tools -> Sensors -> Location and set it to \"Berlin\". In prerender: true some milliseconds you see the correct one, on prerender: false its allways the wrong one (en-US)\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.101\r\n\r\n### Anything else?\r\n\r\nUsing Edge Version 121.0.2277.83 (Official build) (64-bit)\r\n\r\nI believe I've pinpointed the issue: During the debugging of the [RequestLocalizationMiddleware.Invoke](https://source.dot.net/#Microsoft.AspNetCore.Localization/RequestLocalizationMiddleware.cs,47) method, I observed that each HttpRequest is sent with the appropriate Accept-Language header. However, the final call to this method targets `http://localhost:XXXX/_blazor`, where the header is unexpectedly set to `en-US,en;q=0.9,de;q=0.8`. I'm unsure of the cause, but since this is the last invocation of the method during a user's page request, the CultureInfo.CurrentCulture ends up being reset to en-US.","Url":"https://github.com/dotnet/aspnetcore/issues/53707","RelatedDescription":"Open issue \"Blazor Localization does not work with InteractiveServer\" (#53707)"},{"Id":"2107930691","IsPullRequest":true,"CreatedAt":"2024-01-30T13:57:34","Actor":"dotnet-maestro[bot]","Number":"53706","RawContent":null,"Title":"[main] Update dependencies from dotnet/xdt","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:528824d6-6b35-4682-f426-08dbf65e5bea)\r\n## From https://github.com/dotnet/xdt\r\n- **Subscription**: 528824d6-6b35-4682-f426-08dbf65e5bea\r\n- **Build**: 20240129.2\r\n- **Date Produced**: January 29, 2024 2:50:04 PM UTC\r\n- **Commit**: 23e11f8312f853a3f694c6680c0e3762bdf1d9fd\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Web.Xdt**: [from 9.0.0-preview.24067.1 to 9.0.0-preview.24079.2][1]\r\n\r\n[1]: https://github.com/dotnet/xdt/compare/d71290db98...23e11f8312\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:528824d6-6b35-4682-f426-08dbf65e5bea)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/53706","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/xdt\" (#53706)"},{"Id":"2107913398","IsPullRequest":true,"CreatedAt":"2024-01-30T13:49:16","Actor":"dotnet-maestro[bot]","Number":"53705","RawContent":null,"Title":"[main] Update dependencies from dotnet/source-build-reference-packages","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:34ebb389-daeb-4237-045c-08db4c01eb9e)\r\n## From https://github.com/dotnet/source-build-reference-packages\r\n- **Subscription**: 34ebb389-daeb-4237-045c-08db4c01eb9e\r\n- **Build**: 20240129.1\r\n- **Date Produced**: January 29, 2024 2:55:39 PM UTC\r\n- **Commit**: bafaf783afbd8152b66ba429746ea5861fb84c75\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.SourceBuild.Intermediate.source-build-reference-packages**: [from 9.0.0-alpha.1.24075.1 to 9.0.0-alpha.1.24079.1][1]\r\n\r\n[1]: https://github.com/dotnet/source-build-reference-packages/compare/e659f328bf...bafaf783af\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:34ebb389-daeb-4237-045c-08db4c01eb9e)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/53705","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/source-build-reference-packages\" (#53705)"},{"Id":"2107850619","IsPullRequest":false,"CreatedAt":"2024-01-30T13:19:50","Actor":"DhivyaRajendran","Number":"53704","RawContent":null,"Title":"Performance Issues with multiple Components rendering in Blazor Web Assembly","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWe've identified performance issues within the Blazor WebAssembly application, particularly during the rendering of multiple components.\r\n\r\nThis was a default example of the weather sample. When rendering a single table, the scripting time is approximately ~84ms. However, when rendering multiple tables, the scripting time increases to around ~145ms.\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/24690158/b03ea131-13a9-4131-8dd2-b053aa40374c)\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/24690158/0303a837-fb79-4778-b619-a22a1c80e53d)\r\n\r\n\r\n### Expected Behavior\r\n\r\nWhat led to an increase in scripting when rendering the same table for both single and multiple times?\r\n\r\n### Steps To Reproduce\r\n\r\n[BlazorApp8web.zip](https://github.com/dotnet/aspnetcore/files/14098248/BlazorApp8web.zip)\r\n\r\n\r\n1. Execute the sample.\r\n2. There are two components: single (/singlegrid) and multiple (/multiplegrid).\r\n3. Open the Performance tab.\r\n4. Go to the singlegrid page.\r\n5. Click the Refresh button to initiate profiling. Afterward, commence profiling by clicking the Toggle grid button. Stop profiling once the table is rendered.\r\n6. Repeat the same process for multiplegrid and observe the scripting performance difference between the single and multiple tables.\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.100\r\n\r\n### Anything else?\r\n\r\n**IDE: Visual Studio 2022**\r\n\r\n.NET SDK:\r\n Version:           8.0.100\r\n Commit:            57efcf1350\r\n Workload version:  8.0.100-manifests.1eabc556\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.100\\\r\n\r\n.NET workloads installed:\r\n Workload version: 8.0.100-manifests.1eabc556\r\n [wasm-tools-net7]\r\n   Installation Source: VS 17.8.34330.188\r\n   Manifest Version:    8.0.0/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.workload.mono.toolchain.net7\\8.0.0\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [android]\r\n   Installation Source: VS 17.8.34330.188\r\n   Manifest Version:    34.0.43/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.android\\34.0.43\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [ios]\r\n   Installation Source: VS 17.8.34330.188\r\n   Manifest Version:    17.0.8478/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.ios\\17.0.8478\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [maui-windows]\r\n   Installation Source: VS 17.8.34330.188\r\n   Manifest Version:    8.0.3/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maui\\8.0.3\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [maccatalyst]\r\n   Installation Source: VS 17.8.34330.188\r\n   Manifest Version:    17.0.8478/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maccatalyst\\17.0.8478\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n\r\nHost:\r\n  Version:      8.0.0\r\n  Architecture: x64\r\n  Commit:       5535e31a71\r\n\r\n.NET SDKs installed:\r\n  7.0.203 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.100-rc.2.23502.2 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0-rc.2.23480.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0-rc.2.23479.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0-rc.2.23479.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download","Url":"https://github.com/dotnet/aspnetcore/issues/53704","RelatedDescription":"Open issue \"Performance Issues with multiple Components rendering in Blazor Web Assembly\" (#53704)"},{"Id":"2107811559","IsPullRequest":true,"CreatedAt":"2024-01-30T13:00:47","Actor":"dotnet-maestro[bot]","Number":"53703","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:32db3699-5666-45da-a1b7-08d8b804cd75)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 32db3699-5666-45da-a1b7-08d8b804cd75\r\n- **Build**: 20240129.10\r\n- **Date Produced**: January 30, 2024 9:56:48 AM UTC\r\n- **Commit**: fe51bd72fbe3948bbb895ca8788aea5fc9a6463a\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Bcl.AsyncInterfaces**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Bcl.TimeProvider**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Caching.Abstractions**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Caching.Memory**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Configuration**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Configuration.Abstractions**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Configuration.Binder**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Configuration.CommandLine**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Configuration.EnvironmentVariables**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Configuration.FileExtensions**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Configuration.Ini**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Configuration.Json**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Configuration.UserSecrets**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Configuration.Xml**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.DependencyInjection**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.DependencyInjection.Abstractions**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.DependencyModel**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Diagnostics**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Diagnostics.Abstractions**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.FileProviders.Abstractions**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.FileProviders.Composite**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.FileProviders.Physical**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.FileSystemGlobbing**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.HostFactoryResolver.Sources**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Hosting**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Hosting.Abstractions**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Http**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Logging**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Logging.Abstractions**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Logging.Configuration**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Logging.Console**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Logging.Debug**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Logging.EventLog**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Logging.EventSource**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Logging.TraceSource**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Options**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Options.ConfigurationExtensions**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Options.DataAnnotations**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Extensions.Primitives**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.Internal.Runtime.AspNetCore.Transport**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.NET.Runtime.MonoAOTCompiler.Task**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.NET.Runtime.WebAssembly.Sdk**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.NETCore.App.Runtime.AOT.win-x64.Cross.browser-wasm**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.NETCore.BrowserDebugHost.Transport**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Collections.Immutable**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Composition**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Diagnostics.DiagnosticSource**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Diagnostics.EventLog**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.DirectoryServices.Protocols**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.IO.Hashing**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.IO.Pipelines**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Net.Http.Json**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Net.Http.WinHttpHandler**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Reflection.Metadata**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Resources.Extensions**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Runtime.Caching**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Security.Cryptography.Xml**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Security.Permissions**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Text.Encodings.Web**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Text.Json**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Threading.AccessControl**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Threading.Channels**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **System.Threading.RateLimiting**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n  - **Microsoft.SourceBuild.Intermediate.runtime.linux-x64**: [from 9.0.0-preview.2.24078.2 to 9.0.0-preview.2.24079.10][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/e5d59bd65f...fe51bd72fb\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:32db3699-5666-45da-a1b7-08d8b804cd75)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/53703","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/runtime\" (#53703)"},{"Id":"2107756650","IsPullRequest":false,"CreatedAt":"2024-01-30T12:32:04","Actor":"mburumaxwell","Number":"53702","RawContent":null,"Title":"SystemTextJsonValidationMetadataProvider does not work with FromQueryAttribute","State":"open","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nAnytime I use `SystemTextJsonValidationMetadataProvider` with a class that contains properties decorated with `FromQueryAttribute`, the response is BadRequest (400) with a body is empty for `errors`. \r\n\r\nAdding support for `FromQueryAttribute` and `FromHeaderAttribute` alongside `JsonPropertyNameAttribute` in `SystemTextJsonValidationMetadataProvider` solves the problem.\r\n\r\n```diff\r\n/// <summary>\r\n/// An implementation of <see cref=\"IDisplayMetadataProvider\"/> and <see cref=\"IValidationMetadataProvider\"/> for\r\n/// the System.Text.Json.Serialization attribute classes.\r\n/// </summary>\r\ninternal class SystemTextJsonValidationMetadataProvider : IDisplayMetadataProvider, IValidationMetadataProvider\r\n{\r\n    private readonly JsonNamingPolicy _jsonNamingPolicy;\r\n\r\n    /// <summary>\r\n    /// Creates a new <see cref=\"ModelBinding.Metadata.SystemTextJsonValidationMetadataProvider\"/> with the default <see cref=\"JsonNamingPolicy.CamelCase\"/>\r\n    /// </summary>\r\n    public SystemTextJsonValidationMetadataProvider() : this(JsonNamingPolicy.CamelCase) { }\r\n\r\n    /// <summary>\r\n    /// Creates a new <see cref=\"ModelBinding.Metadata.SystemTextJsonValidationMetadataProvider\"/> with an optional <see cref=\"JsonNamingPolicy\"/>\r\n    /// </summary>\r\n    /// <param name=\"namingPolicy\">The <see cref=\"JsonNamingPolicy\"/> to be used to configure the metadata provider.</param>\r\n    public SystemTextJsonValidationMetadataProvider(JsonNamingPolicy namingPolicy)\r\n    {\r\n        ArgumentNullException.ThrowIfNull(namingPolicy);\r\n\r\n        _jsonNamingPolicy = namingPolicy;\r\n    }\r\n\r\n    /// <inheritdoc />\r\n    public void CreateDisplayMetadata(DisplayMetadataProviderContext context)\r\n    {\r\n        ArgumentNullException.ThrowIfNull(context);\r\n\r\n        var propertyName = ReadPropertyNameFrom(context.Attributes);\r\n\r\n        if (!string.IsNullOrEmpty(propertyName))\r\n        {\r\n            context.DisplayMetadata.DisplayName = () => propertyName;\r\n        }\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public void CreateValidationMetadata(ValidationMetadataProviderContext context)\r\n    {\r\n        var propertyName = ReadPropertyNameFrom(context.Attributes);\r\n\r\n        if (string.IsNullOrEmpty(propertyName))\r\n        {\r\n            propertyName = context.Key.Name is string contextKeyName\r\n                ? _jsonNamingPolicy.ConvertName(contextKeyName)\r\n                : null;\r\n        }\r\n\r\n        context.ValidationMetadata.ValidationModelName = propertyName;\r\n    }\r\n\r\n    private static string? ReadPropertyNameFrom(IReadOnlyList<object> attributes)\r\n-        => attributes?.OfType<JsonPropertyNameAttribute>().FirstOrDefault()?.Name\r\n+        => attributes?.OfType<FromHeaderAttribute>().FirstOrDefault()?.Name\r\n+           ?? attributes?.OfType<FromQueryAttribute>().FirstOrDefault()?.Name\r\n+           ?? attributes?.OfType<JsonPropertyNameAttribute>().FirstOrDefault()?.Name;\r\n}\r\n```\n\n### Expected Behavior\n\nIt should pass validation when there are query attributes.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.1\n\n### Anything else?\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/53702","RelatedDescription":"Open issue \"SystemTextJsonValidationMetadataProvider does not work with FromQueryAttribute\" (#53702)"},{"Id":"2107515389","IsPullRequest":false,"CreatedAt":"2024-01-30T10:44:45","Actor":"jirisykora83","Number":"53701","RawContent":null,"Title":"Api endpoint does not properly unescape strange string","State":"open","Body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nApi endpoint does not properly unescape strange string even if  `System.Uri.EscapeDataString` and `System.Uri.UnescapeDataString` works for same string. \n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\nCreate a simple asp mvc app.\r\n\r\nAdd endpoint:\r\n```\r\napp.MapGet(\"/api/{test}\",\r\n\t(string test) =>\r\n\t{\r\n\t\treturn test;\r\n\t});\r\n```\r\n\r\nsend `https://localhost:7290/api/4e7b7591-f80f-4de6-8459-471f8812fce3%26set%20%2FA%20901629923%2B880816964`\r\n\r\nwhich is `System.Uri.EscapeDataString(\"4e7b7591-f80f-4de6-8459-471f8812fce3&set /A 901629923+880816964\");`\r\n\r\nand server then return `4e7b7591-f80f-4de6-8459-471f8812fce3&set %2FA 901629923+880816964`\r\n\r\nwhich isn't same and I would expect it to be parse to same value as if I call `System.Uri.UnescapeDataString(result);`\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.100\n\n### Anything else?\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/53701","RelatedDescription":"Open issue \"Api endpoint does not properly unescape strange string\" (#53701)"},{"Id":"2107372327","IsPullRequest":false,"CreatedAt":"2024-01-30T09:39:59","Actor":"ruylopez751","Number":"53700","RawContent":null,"Title":"Can't run Authentication Samples","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nHi everyone!\r\n\r\nSo I just downloaded the latest release and tried to run Authentication samples as mentioned in the documentation \r\n(this page: https://learn.microsoft.com/en-us/aspnet/core/security/authentication/samples?view=aspnetcore-8.0)\r\n\r\nBut unfortunately I run into this error:\r\n\r\n\r\nF:\\aspnetcore-8.0.1\\Directory.Build.props(236,3): error MSB4019: The imported project \"F:\\aspnetcore-8.0.1\\artifacts\\bi\r\nn\\GenerateFiles\\Directory.Build.props\" was not found. Confirm that the expression in the Import declaration \"artifacts\\\r\nbin\\GenerateFiles\\Directory.Build.props\" is correct, and that the file exists on disk. [F:\\aspnetcore-8.0.1\\src\\Securit\r\ny\\samples\\ClaimsTransformation\\ClaimsTransformation.csproj]\r\n\r\n\r\nIt might look dumb (I'm very new to .net ecosystem)  but I even tried making the artifacts\\bin\\GenerateFiles directory and then copying the Directory.Build.props file into it but still get the same error (like nothing is changed)\r\nI spent the whole night and day on it but couldn't fix it, sounds like really no one has ever ran into this issue before me. So I thought it might be a bug or something? \r\nAny help is so much appreciated here. Thanks!\r\n\r\n### Expected Behavior\r\n\r\n_No response_\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.1\r\n\r\n### Anything else?\r\n\r\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/53700","RelatedDescription":"Open issue \"Can't run Authentication Samples\" (#53700)"},{"Id":"2106222611","IsPullRequest":false,"CreatedAt":"2024-01-30T07:04:07","Actor":"pr-benchmarks[bot]","Number":"53696","RawContent":null,"Title":"Perf improvement: fortunes","State":"closed","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| fortunes [Fixed] | Fortunes Platform 2- Trends Database Intel Windows | 01/28/2024 09:27:14 | 429,856 | 451,868 | 5.12 % (22,012)  :thumbsup:  | 5.69 σ | 3,871.79 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th><tr>            <td>Microsoft.Extensions.Caching.Abstractions.dll</td>            <td>`9.0.0-preview.2.24075.11` -> `9.0.0-preview.2.24077.1`</td>            <td>https://github.com/dotnet/runtime/compare/0d81a5ac76948b49840c3a6f44703bfd6489109b...08d98197668e5d62e4338730a427ab6b69d49b7c</td></tr><tr>            <td>Microsoft.AspNetCore.App</td>            <td>`9.0.0-preview.2.24076.3` -> `9.0.0-preview.2.24077.1`</td>            <td>https://github.com/dotnet/aspnetcore/compare/bd016947b6928159814950c06a6e2278be7a256f...6689823e26d368dd3b6e451680d94cfb57e27888</td></tr><tr>            <td>Microsoft.NETCore.App</td>            <td>`9.0.0-preview.2.24076.4` -> `9.0.0-preview.2.24077.6`</td>            <td>https://github.com/dotnet/runtime/compare/bcc1d3d6f00fbcea3f454b2e35bceeaa51e604b1...4fc943c3cb3feb72d1e33d8356a51e8d0bbf3ac7</td></tr></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/53696","RelatedDescription":"Closed issue \"Perf improvement: fortunes\" (#53696)"},{"Id":"2106630784","IsPullRequest":true,"CreatedAt":"2024-01-30T04:46:38","Actor":"eerhardt","Number":"53698","RawContent":null,"Title":"Update source index package version","State":"closed","Body":"The current official builds are failing with\r\n\r\n\"Unsupported log file format. Latest supported version is 17, the log file has version 18.\"\r\n\r\nUpdating to the latest version.\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/53698","RelatedDescription":"Closed or merged PR \"Update source index package version\" (#53698)"},{"Id":"2106707588","IsPullRequest":false,"CreatedAt":"2024-01-30T00:19:44","Actor":"Eilon","Number":"53699","RawContent":null,"Title":"[.NET 9] BlazorWebView fails to load on older Android devices `Uncaught SyntaxError: Unexpected token .`","State":"open","Body":"The JS file generated for `blazor.webview.js` contains JS code that is not valid on older Android systems unless they update their WebView.\r\n\r\nThis error occurs immediately when loading a BlazorWebView's contents: `Uncaught SyntaxError: Unexpected token .`\r\n\r\nAnd occurs on this JS line in the file:\r\n\r\n```js\r\n    function l(e) {\r\n        const t = a.get(e);\r\n        return t?.browserEventName || e   // <------------\r\n    }\r\n```\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/202643/c7bb984e-5de8-45a9-b8a4-e762ce228b56)\r\n\r\nIt seems to be [this code](https://github.com/dotnet/aspnetcore/blob/main/src/Components/Web.JS/src/Rendering/Events/EventTypes.ts#L53-L56), which oddly doesn't seem to have changed in very, _very_ long time.\r\n\r\nI'm not sure what _did_ change that this would start happening only recently. Maybe TypeScript changed to generate different code?\r\n\r\nThis happens by default on Android Emulators with API 30 and older (we know that API 33 works, not sure about 31 and 32).\r\n\r\nOn these older Android emulator images you can update the System WebView to get newer versions, and that seems to fix the problem.\r\n\r\nSome options to consider:\r\n\r\n1. Do nothing. Users and/or app developers have to make sure the system is up-to-date. Well, minimally we'd want to _document_ this, but no code change.\r\n2. Have BlazorWebView [detect older WebView on Android](https://developer.android.com/develop/ui/views/layout/webapps/managing-webview#version) and fail more gracefully. Or perhaps log something?\r\n3. Have Blazor use JS code that is compatible with older Android WebView versions. Perhaps there is a TypeScript flag to tell it to generate 'old' JS that is more compatible?\r\n\r\nNote: This scenarios is somewhat reminiscent of the fact that on Windows you have to have Edge WebView2 installed and that things won't work if you don't. You'll probably get some weird errors, but the BlazorWebView control doesn't do a lot to help you (for better or for worse).","Url":"https://github.com/dotnet/aspnetcore/issues/53699","RelatedDescription":"Open issue \"[.NET 9] BlazorWebView fails to load on older Android devices `Uncaught SyntaxError: Unexpected token .`\" (#53699)"},{"Id":"2106128282","IsPullRequest":true,"CreatedAt":"2024-01-29T23:37:18","Actor":"eerhardt","Number":"53695","RawContent":null,"Title":"Fix lint warnings in README","State":"closed","Body":"We are getting warnings like this in our latest PRs:\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/8291187/fc28dc06-1a37-4b97-92aa-d76cc32c4752)\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/53695","RelatedDescription":"Closed or merged PR \"Fix lint warnings in README\" (#53695)"},{"Id":"2106544804","IsPullRequest":true,"CreatedAt":"2024-01-29T22:24:12","Actor":"MackinnonBuck","Number":"53697","RawContent":null,"Title":"Fix `CanLaunchPhotinoWebViewAndClickButton`","State":"open","Body":"Work in progress","Url":"https://github.com/dotnet/aspnetcore/pull/53697","RelatedDescription":"Open PR \"Fix `CanLaunchPhotinoWebViewAndClickButton`\" (#53697)"},{"Id":"2105848466","IsPullRequest":true,"CreatedAt":"2024-01-29T21:27:33","Actor":"dotnet-maestro[bot]","Number":"53694","RawContent":null,"Title":"[main] Update dependencies from dotnet/efcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8ce5251e-8269-419d-3b2a-08d8b8050dda)\r\n## From https://github.com/dotnet/efcore\r\n- **Subscription**: 8ce5251e-8269-419d-3b2a-08d8b8050dda\r\n- **Build**: 20240129.6\r\n- **Date Produced**: January 29, 2024 4:00:33 PM UTC\r\n- **Commit**: c825b05a94e32609cb2bb21e25ad383b248b2080\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **dotnet-ef**: [from 9.0.0-preview.2.24079.5 to 9.0.0-preview.2.24079.6][1]\r\n  - **Microsoft.EntityFrameworkCore**: [from 9.0.0-preview.2.24079.5 to 9.0.0-preview.2.24079.6][1]\r\n  - **Microsoft.EntityFrameworkCore.Design**: [from 9.0.0-preview.2.24079.5 to 9.0.0-preview.2.24079.6][1]\r\n  - **Microsoft.EntityFrameworkCore.InMemory**: [from 9.0.0-preview.2.24079.5 to 9.0.0-preview.2.24079.6][1]\r\n  - **Microsoft.EntityFrameworkCore.Relational**: [from 9.0.0-preview.2.24079.5 to 9.0.0-preview.2.24079.6][1]\r\n  - **Microsoft.EntityFrameworkCore.Sqlite**: [from 9.0.0-preview.2.24079.5 to 9.0.0-preview.2.24079.6][1]\r\n  - **Microsoft.EntityFrameworkCore.SqlServer**: [from 9.0.0-preview.2.24079.5 to 9.0.0-preview.2.24079.6][1]\r\n  - **Microsoft.EntityFrameworkCore.Tools**: [from 9.0.0-preview.2.24079.5 to 9.0.0-preview.2.24079.6][1]\r\n\r\n[1]: https://github.com/dotnet/efcore/compare/dc80beb68a...c825b05a94\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:8ce5251e-8269-419d-3b2a-08d8b8050dda)\r\n\r\n","Url":"https://github.com/dotnet/aspnetcore/pull/53694","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/efcore\" (#53694)"},{"Id":"2105786931","IsPullRequest":false,"CreatedAt":"2024-01-29T15:42:19","Actor":"Dean-NC","Number":"53693","RawContent":null,"Title":"Consider making `IdentityResult.Failed(List<IdentityError>? errors)` public","State":"open","Body":"### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI wasn't sure if this should be labeled as API Change or Design Proposal. `ItentityResult.Failed(params IdentityError[] errors)` is public, but if you have built a `List<IdentityError>`, then using that method means converting your list to array. There is `IdentityResult.Failed(List<IdentityError>? errors)`, but for some reason it's marked internal, and looking at the source code, I don't see a reason it couldn't be public.\n\n### Describe the solution you'd like\n\nChange `IdentityResult.Failed(List<IdentityError>? errors)` from `internal` to `public`.\n\n### Additional context\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/53693","RelatedDescription":"Open issue \"Consider making `IdentityResult.Failed(List<IdentityError>? errors)` public\" (#53693)"},{"Id":"2105758320","IsPullRequest":false,"CreatedAt":"2024-01-29T15:29:09","Actor":"ShineSmile","Number":"53692","RawContent":null,"Title":"Invalid Issuer should response 500 instead of 401 in dotnet 8 Microsoft.AspNetCore.Authentication.JwtBearer ","State":"open","Body":"### Is there an existing issue for this?\r\n\r\n- [x] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nMicrosoft.AspNetCore.Authentication.JwtBearer version 8.0.1\r\n\r\n\r\nInvalid Issuer should response 500 instead of 401 as before. Invalid Issuer is server-side issue. Response 401 and add comments in header may confuse client-side user who request with valid token.\r\n\r\n<img width=\"720\" alt=\"image\" src=\"https://github.com/dotnet/aspnetcore/assets/8800442/db93e7a9-1d01-4f11-81c9-80b3deec744c\">\r\n\r\n<img width=\"720\" alt=\"image\" src=\"https://github.com/dotnet/aspnetcore/assets/8800442/75f30954-3af3-495e-b141-6217c6e7b41b\">\r\n\r\n<img width=\"720\" alt=\"image\" src=\"https://github.com/dotnet/aspnetcore/assets/8800442/6f3af57a-5a79-43ae-97f4-bf01f1e29ffa\">\r\n\r\n<img width=\"720\" alt=\"image\" src=\"https://github.com/dotnet/aspnetcore/assets/8800442/7b910275-5689-475d-acf2-716a53a3cdde\">\r\n\r\n\r\n### Expected Behavior\r\n\r\nInvalid Issuer is service side issue so response 500 is expected. The server lost token validate function does not mean user credential is incorrect.\r\n\r\n### Steps To Reproduce\r\n\r\n```\r\nbuilder.Services.AddAuthentication(\"Bearer\")\r\n                .AddJwtBearer(\"Bearer\", config =>\r\n                {\r\n                    config.Authority = \"https://authority.host\";\r\n                    config.Audience = \"audience-here\";\r\n\r\n                    config.SaveToken = true;\r\n                });\r\n```\r\nset up Web API project and request with valid token. **Disconnect all network connection to Authority.** \r\nI have test 3.1, 6, 7, 8 and only response code 401 received in dotnet 8.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.101\r\n\r\n### Anything else?\r\n\r\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/53692","RelatedDescription":"Open issue \"Invalid Issuer should response 500 instead of 401 in dotnet 8 Microsoft.AspNetCore.Authentication.JwtBearer \" (#53692)"}],"ResultType":"GitHubIssue"},"Identity-Issues":{"Issues":[{"Id":"385990535","IsPullRequest":true,"CreatedAt":"2018-12-19T00:12:57","Actor":"grahamehorner","Number":"2087","RawContent":null,"Title":"WIP: IUserTwoFactorTokenProvider token length POC","State":"closed","Body":"This is a WIP idea to support configuration of token length for UserTwoFactorTokenProviders","Url":"https://github.com/aspnet/Identity/pull/2087","RelatedDescription":"Closed or merged PR \"WIP: IUserTwoFactorTokenProvider token length POC\" (#2087)"},{"Id":"385943112","IsPullRequest":true,"CreatedAt":"2018-12-19T00:06:47","Actor":"grahamehorner","Number":"2086","RawContent":null,"Title":"Update Rfc6238AuthenticationService.cs","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2086","RelatedDescription":"Closed or merged PR \"Update Rfc6238AuthenticationService.cs\" (#2086)"},{"Id":"385172059","IsPullRequest":false,"CreatedAt":"2018-12-06T18:36:01","Actor":"ben-foster-rightio","Number":"2084","RawContent":null,"Title":"Random Authentication Sign Outs in ASP.NET Core 2.1","State":"closed","Body":"I'm receiving user complaints saying they are being directed to the login screen randomly when it has only been a minute or so since they clicked a button that would have sent a message to the server side.\r\n\r\nHere is a log of one of the errors.\r\n`[INF] Executed action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" in 1473.4897ms (afa2e885)\r\n[INF] Request finished in 1474.816ms 200 application/json; charset=utf-8 (791a596a)\r\n[INF] Request starting HTTP/1.1 GET http://MyAppmanager.MyApp.co.uk/api/AgreementAPI/GetAgreements?searchTerm=1543309403289   (ca22a1cb)\r\n[INF] Entity Framework Core \"2.1.3-rtm-32065\" initialized '\"IdentityDbContext\"' using provider '\"Microsoft.EntityFrameworkCore.SqlServer\"' with options: \"None\" (9958f5bb)\r\n[INF] Executed DbCommand (\"1\"ms) [Parameters=[\"@__get_Item_0='?' (DbType = Int32)\"], CommandType='Text', CommandTimeout='30']\"\r\n\"\"SELECT TOP(1) [e].[UserId], [e].[AcquisitionTeamId], [e].[AreaNumber], [e].[AuthorisationPassword], [e].[AutoBooking], [e].[AutoUpdateSoftware], [e].[AvayaFullName], [e].[AvayaName], [e].[AvaysExt], [e].[CanSellAgreement], [e].[ChangePassword], [e].[CompanyId], [e].[DateEnded], [e].[DateStarted], [e].[DebugLogs], [e].[DefaultQuotes], [e].[DepartmentId], [e].[EmailAddress], [e].[Forename], [e].[HomeServeEmployee], [e].[Initials], [e].[IsPurchaseOrderReviewer], [e].[JobTitle], [e].[LogonName], [e].[MaxLogins], [e].[Message], [e].[Name], [e].[Notes], [e].[PartTime], [e].[Password], [e].[ReportDDI], [e].[RoleId], [e].[Shift], [e].[ShowEngineerAlert], [e].[Surname], [e].[TerminationId], [e].[TrackFastVersion], [e].[UnreadMessage], [e].[VisibleOnChronicle]\r\nFROM [Users] AS [e]\r\nWHERE [e].[UserId] = @__get_Item_0\" (0723d8ff)\r\n[INF] AuthenticationScheme: \"Identity.Application\" signed out. (d3f50c8d)\r\n[INF] AuthenticationScheme: \"Identity.External\" signed out. (d3f50c8d)\r\n[INF] AuthenticationScheme: \"Identity.TwoFactorUserId\" signed out. (d3f50c8d)\r\n**[INF] \"Identity.Application\" was not authenticated. Failure message: \"No principal.\" (48071232)**\r\n[INF] Route matched with \"{action = \\\"GetAgreements\\\", controller = \\\"AgreementAPI\\\", page = \\\"\\\", area = \\\"\\\"}\". Executing action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" (a44c0341)\r\n[INF] Authorization failed. (b15dd539)\r\n[INF] Authorization failed for the request at filter '\"Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter\"'. (8b6446cb)\r\n[INF] Executing ChallengeResult with authentication schemes ([]). (f3dca807)\r\n[INF] AuthenticationScheme: \"Identity.Application\" was challenged. (d45f1f38)\r\n[INF] Executed action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" in 0.3846ms (afa2e885)\r\n[INF] Request finished in 9.3835ms 401  (791a596a)\r\n[INF] Request starting HTTP/1.1 POST http://MyAppmanager.MyApp.co.uk/API/CustomerAPI/WriteToLog/ application/x-www-form-urlencoded; charset=UTF-8 61 (ca22a1cb)\r\n[INF] Route matched with \"{action = \\\"WriteToLog\\\", controller = \\\"CustomerAPI\\\", page = \\\"\\\", area = \\\"\\\"}\". Executing action \"MyAppManager.Controllers.API.CustomerAPIController.WriteToLog (MyAppManager)\" (a44c0341)\r\n[INF] Executing action method \"MyAppManager.Controllers.API.CustomerAPIController.WriteToLog (MyAppManager)\" with arguments ([\"ERROR: WebAPI call is not authenticated\", \"error\"]) - Validation state: Valid (4e3479ed)\r\n[ERR] Client log: ERROR: WebAPI call is not authenticated (d4244074)\r\n`\r\n\r\n**Startup File**\r\n`public void ConfigureServices(IServiceCollection services)\r\n{\r\n\tservices.AddScoped<IRFDbRepository, RFDbRepository>();\r\n\tvar connection = _configuration.GetConnectionString(\"RFDbConnection\");\r\n\tservices.Configure<ConnectionStrings>(_configuration.GetSection(\"ConnectionStrings\"));\r\n\tservices.AddDbContext<RFDbContext>(options => options.UseSqlServer(connection));\r\n\tservices.AddDbContext<IdentityDbContext>(options => options.UseSqlServer(connection));\r\n\tservices.AddAutoMapper();\r\n\tservices.AddIdentity<User, UserRole>().AddDefaultTokenProviders();\r\n\tservices.AddTransient<IUserStore<User>, UserStore>();\r\n\tservices.AddTransient<IRoleStore<UserRole>, RoleStore>();\r\n\tservices.ConfigureApplicationCookie(options =>\r\n\t{\r\n\t\toptions.LoginPath = \"/Identity/Account/Login\";\r\n\t\toptions.LogoutPath = \"/Identity/Account/Logout\";\r\n\t\toptions.ExpireTimeSpan = TimeSpan.FromMinutes(60);\r\n\t\toptions.SlidingExpiration = true;                \r\n\t});\r\n\tservices.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1).AddRazorPagesOptions(options =>\r\n\t{\r\n\t\toptions.AllowAreas = true;\r\n\t\toptions.Conventions.AuthorizeAreaPage(\"Identity\", \"/Account/Logout\");\r\n\t});\r\n}`\r\n\r\n`public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, IRFDbRepository rFDbRepository)\r\n{\r\n\tloggerFactory.AddFile(_configuration.GetValue<string>(\"Logging:LogFile\"));\r\n\tapp.UseStaticFiles();\r\n\tapp.UseAuthentication();\r\n\tapp.UseMvc(routes =>\r\n\t{\r\n\t\troutes.MapRoute(\r\n\t\t\tname: \"default\",\r\n\t\t\ttemplate: \"{controller=Home}/{action=Index}/{id?}\");\r\n\t\troutes.MapRoute(\r\n\t\t\tname: \"ActionApi\",\r\n\t\t\ttemplate: \"api/{controller}/{action}/{id?}\");\r\n\t});\r\n\trFDbRepository.TestConnection();\r\n}`\r\n\r\nAlso I've setup the app pool as below:\r\n![image](https://user-images.githubusercontent.com/43367982/49141893-8fe42800-f2ef-11e8-8ea3-c79e45ca65a3.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2084","RelatedDescription":"Closed issue \"Random Authentication Sign Outs in ASP.NET Core 2.1\" (#2084)"},{"Id":"387530281","IsPullRequest":true,"CreatedAt":"2018-12-04T23:53:47","Actor":"natemcmaster","Number":"2092","RawContent":null,"Title":"This repo will be archived, project moved to aspnet/AspNetCore","State":"closed","Body":"As a part of https://github.com/aspnet/AspNetCore/issues/3598, this repo will be made read-only soon. The source code and issues will move to https://github.com/aspnet/AspNetCore.","Url":"https://github.com/aspnet/Identity/pull/2092","RelatedDescription":"Closed or merged PR \"This repo will be archived, project moved to aspnet/AspNetCore\" (#2092)"},{"Id":"382432623","IsPullRequest":true,"CreatedAt":"2018-12-04T23:49:57","Actor":"HaoK","Number":"2075","RawContent":null,"Title":"Port retry handler test improvement to 2.1","State":"closed","Body":"Port of similar fix for 2.2 https://github.com/aspnet/Identity/pull/2052","Url":"https://github.com/aspnet/Identity/pull/2075","RelatedDescription":"Closed or merged PR \"Port retry handler test improvement to 2.1\" (#2075)"},{"Id":"387479804","IsPullRequest":false,"CreatedAt":"2018-12-04T21:12:03","Actor":"LosManos","Number":"2091","RawContent":null,"Title":"The non-scaffolded razor page \"Register\" does not recognise Password.RequiredLength.","State":"closed","Body":"### Describe the bug\r\nSetting password length through \r\n```\r\npublic void ConfigureServices(IServiceCollection services){\r\n  ...\r\n  services.Configure<IdentityOptions>(options =>\r\n  {\r\n    options.Password.RequiredLength = 1;\r\n  });\r\n  ...\r\n```\r\ndoes not change the non-scaffolded razor page as it always says \"The Password must be at least 6 and at max 100 characters long.\" if inputed password is < 6 characters.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Create a new ASP.NET Core Web 2.1 application\r\n2. Select \"Web application (Model-View Controller)\" \r\n3. Select \"Change authentication\"\r\n3.1. Select \"Individual User Account\"\r\n4. Select Ok to have the project scaffolded.\r\n5. Open file Startup.cs\r\n6. Add \r\n```\r\nservices.Configure<IdentityOptions>(options =>\r\n{\r\n  options.Password.RequiredLength = 1;\r\n});\r\n```\r\nto method `ConfigureServices`.\r\n7. Press F5 (or select your favourite start-debug method).\r\n8. In the web browser that pops up\r\n8.1. Select Register\r\n8.2. Type \"a@example.com\" as user name (or select your favourite fast-to-type email addresss).\r\n8.3. Type \"a\" as password (or any password shorter than 6 characters).\r\n8.4. Select Register\r\n\r\n### Expected behavior\r\nThe web page should have been updated with information about successful creation of user.\r\n\r\n### Actual behaviour\r\nThe web page says \"The Password must be at least 6 and at max 100 characters long.\"\r\n\r\n### Additional context\r\nI have a question at stack overflow https://stackoverflow.com/questions/53620708/how-do-i-set-password-options-in-aspnet-core-2-1 that explains the same issue if this is not clear enough.\r\n\r\nThis issue might be duplicate of #774.","Url":"https://github.com/aspnet/Identity/issues/2091","RelatedDescription":"Closed issue \"The non-scaffolded razor page \"Register\" does not recognise Password.RequiredLength.\" (#2091)"},{"Id":"386513703","IsPullRequest":false,"CreatedAt":"2018-12-02T00:47:54","Actor":"NinoFloris","Number":"2089","RawContent":null,"Title":"No way to Add a password after creating user, except through Reset","State":"closed","Body":"So we do have RemovePasswordAsync but where's AddPasswordAsync? \r\nWe currently hack around it by using a Reset token we generated before it, but we do really need it for upgrading OAuth/Connect accounts to full accounts.","Url":"https://github.com/aspnet/Identity/issues/2089","RelatedDescription":"Closed issue \"No way to Add a password after creating user, except through Reset\" (#2089)"},{"Id":"385940834","IsPullRequest":false,"CreatedAt":"2018-12-01T01:11:14","Actor":"grahamehorner","Number":"2085","RawContent":null,"Title":"Q: moving of source","State":"closed","Body":"Is the identity repo under the aspnet/aspnetcore like other repos have ? ","Url":"https://github.com/aspnet/Identity/issues/2085","RelatedDescription":"Closed issue \"Q: moving of source\" (#2085)"},{"Id":"386331000","IsPullRequest":true,"CreatedAt":"2018-11-30T20:17:17","Actor":"dougbu","Number":"2088","RawContent":null,"Title":"Remove `SetCompatibiltyVersion(...)` call in sample","State":"closed","Body":"- aspnet/Mvc#7156 2 of ?","Url":"https://github.com/aspnet/Identity/pull/2088","RelatedDescription":"Closed or merged PR \"Remove `SetCompatibiltyVersion(...)` call in sample\" (#2088)"},{"Id":"378822046","IsPullRequest":true,"CreatedAt":"2018-11-29T21:55:44","Actor":"grahamehorner","Number":"2060","RawContent":null,"Title":"Update Rfc6238AuthenticationService.cs","State":"closed","Body":"20bytes is 160bits","Url":"https://github.com/aspnet/Identity/pull/2060","RelatedDescription":"Closed or merged PR \"Update Rfc6238AuthenticationService.cs\" (#2060)"},{"Id":"380746507","IsPullRequest":false,"CreatedAt":"2018-11-29T20:17:46","Actor":"wijnsema","Number":"2067","RawContent":null,"Title":"BypassTowFactor in SignInManager:ExternalLoginSignInAsync should default to False","State":"closed","Body":"As requested by @brockallen in #850 it is now possible to bypass 2FA in case of an external login. \r\n\r\nI'm sure there are good reasons to bypass 2FA, however the current implementation is far to general: \r\n\r\n- All providers all treated equal (some providers might not even support 2FA at all)\r\n- All users all treated equal (users can have 2FA enabled or not)\r\n\r\nThis bypass of 2FA really needs more refinement.\r\n\r\n**What makes this really a problem is the fact that it is enabled in the UI templates!** \r\nAs a developer using the template and enabling 2FA you expect 2FA to work for both local and external login!\r\n\r\nFurthermore, the redirect to the 2FA page is missing, so changing to call to `bypassTwoFactor = false` results in a confusing error that the user already exists.\r\n\r\nIn my opinion the following fragment from ExternalLogin.cshtml.cs\r\n```C#\r\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \r\n      info.ProviderKey, isPersistent: false, bypassTwoFactor: true);\r\nif (result.Succeeded)\r\n{\r\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \r\n      info.Principal.Identity.Name, info.LoginProvider);\r\n   return LocalRedirect(returnUrl);\r\n}\r\n```\r\nshould be replaced with\r\n```C#\r\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \r\n   info.ProviderKey, isPersistent: false, bypassTwoFactor: false);\r\nif (result.Succeeded)\r\n{\r\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \r\n      info.Principal.Identity.Name, info.LoginProvider);\r\n   return LocalRedirect(returnUrl);\r\n}\r\nif (result.RequiresTwoFactor)\r\n{\r\n   return RedirectToPage(\"./LoginWith2fa\", new { ReturnUrl = returnUrl });\r\n}\r\n```\r\nIf you enabled bypassTwoFactor it will still work.\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2067","RelatedDescription":"Closed issue \"BypassTowFactor in SignInManager:ExternalLoginSignInAsync should default to False\" (#2067)"},{"Id":"378006056","IsPullRequest":false,"CreatedAt":"2018-11-29T20:04:09","Actor":"blowdart","Number":"2058","RawContent":null,"Title":"Survey: Your experience using Identity UI and customization","State":"closed","Body":"We're taking a survey about how your experiences using ASP.NET Core Identity, and specifically Identity UI as a package.\r\n\r\nPlease give us your feedback, and, if you're willing, you might get a phone call to talk about your experiences in detail.\r\n\r\nhttps://microsoft.qualtrics.com/jfe/form/SV_3mTmFYDZAQutZMF ","Url":"https://github.com/aspnet/Identity/issues/2058","RelatedDescription":"Closed issue \"Survey: Your experience using Identity UI and customization\" (#2058)"},{"Id":"384918165","IsPullRequest":false,"CreatedAt":"2018-11-29T04:38:32","Actor":"OphiCA","Number":"2082","RawContent":null,"Title":"No sign-out authentication handler is registered for the scheme 'Identity.External'","State":"closed","Body":"Hello,\r\n\r\nFor several months now I've been trying to solve an issue with Identity, where 30-min on the dot after signing in, I am greeted by an `Invalid Operation Exception`:\r\n\r\n> InvalidOperationException: No sign-out authentication handler is registered for the scheme 'Identity.External'. The registered sign-out schemes are: Identity.Application. Did you forget to call AddAuthentication().AddCookies(\"Identity.External\",...)?\r\n\r\nSince it was on my blog site, I didn't put too much effort into it, even though it was an annoyance. Now, I'm looking into possibly some real world client work where I'd like to use ASP.NET Core with Identity, but I can't be having this same issue.\r\n\r\nCould someone please tell me why this exception throws? I don't want to use external schemes, so why is it trying to sign out of one? When did it sign into one?\r\n\r\nHere's the relevant code from my app, hopefully someone can point me in the right direction because I sure as heck can't.\r\n\r\n**Startup.cs**\r\n\r\n\tpublic sealed class Startup {\r\n\t\tpublic void ConfigureServices(\r\n\t\t\tIServiceCollection services) {\r\n\t\t\t//...\r\n\t\t\tservices.AddApplicationIdentity();\r\n\t\t\t//...\r\n\t\t\tservices.ConfigureApplicationCookie(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Cookie.SameSite = SameSiteMode.Strict;\r\n\t\t\t\t\to.Cookie.SecurePolicy = CookieSecurePolicy.Always;\r\n\r\n\t\t\t\t\to.AccessDeniedPath = new PathString(\"/admin\");\r\n\t\t\t\t\to.ExpireTimeSpan = TimeSpan.FromHours(4);\r\n\t\t\t\t\to.LoginPath = new PathString(\"/admin\");\r\n\t\t\t\t\to.LogoutPath = new PathString(\"/admin/sign-out\");\r\n\t\t\t\t});\r\n\t\t\tservices.Configure<IdentityOptions>(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Password.RequiredLength = 8;\r\n\r\n\t\t\t\t\to.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);\r\n\t\t\t\t\to.Lockout.MaxFailedAccessAttempts = 5;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic void Configure(\r\n\t\t\tIApplicationBuilder app) {\r\n\t\t\t//...\r\n\t\t\tapp.UseAuthentication();\r\n\t\t\t//...\r\n\t\t}\r\n\t}\r\n\r\n**ServiceCollectionExtensions**\r\n\r\n\tpublic static class ServiceCollectionExtensions {\r\n\t\tpublic static IdentityBuilder AddApplicationIdentity(\r\n\t\t\tthis IServiceCollection services) {\r\n\t\t\tservices.AddAuthentication(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.DefaultAuthenticateScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t\to.DefaultChallengeScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t\to.DefaultSignInScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t}).AddCookie(IdentityConstants.ApplicationScheme,\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Events = new CookieAuthenticationEvents {\r\n\t\t\t\t\t\tOnValidatePrincipal = SecurityStampValidator.ValidatePrincipalAsync\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\tservices.TryAddScoped<IdentityErrorDescriber>();\r\n\t\t\tservices.TryAddScoped<ILookupNormalizer, UpperInvariantLookupNormalizer>();\r\n\t\t\tservices.TryAddScoped<IPasswordHasher<User>, PasswordHasher<User>>();\r\n\t\t\tservices.TryAddScoped<IPasswordValidator<User>, PasswordValidator<User>>();\r\n\t\t\tservices.TryAddScoped<IUserClaimsPrincipalFactory<User>, UserClaimsPrincipalFactory<User>>();\r\n\t\t\tservices.TryAddScoped<UserManager<User>>();\r\n\t\t\tservices.TryAddScoped<IUserStore<User>, ApplicationUserStore>();\r\n\t\t\tservices.TryAddScoped<IUserValidator<User>, UserValidator<User>>();\r\n\t\t\tservices.TryAddScoped<ISecurityStampValidator, SecurityStampValidator<User>>();\r\n\t\t\tservices.TryAddScoped<SignInManager<User>>();\r\n\r\n\t\t\treturn new IdentityBuilder(typeof(User), services);\r\n\t\t}\r\n\t}\r\n\r\nI'm not going to include the `ApplicationUserStore` because I highly doubt it has anything to do with the exception. I'd appreciate any help because I am just struggling at this point. Thanks!","Url":"https://github.com/aspnet/Identity/issues/2082","RelatedDescription":"Closed issue \"No sign-out authentication handler is registered for the scheme 'Identity.External'\" (#2082)"},{"Id":"383003537","IsPullRequest":false,"CreatedAt":"2018-11-22T13:29:00","Actor":"LindaLawton","Number":"2079","RawContent":null,"Title":"Remember me isPersistent understanding","State":"closed","Body":"This is more of a question but its not enough of a question that i could post it up on stack overflow without risking it just getting closed as primary opinion based or to broad.   So i am going to put it here in hopes of getting an answer.\r\n\r\nThe issue is the understanding of how remember me is supposed to work.    My problem is that its not doing what we would expect it to do.   \r\n\r\nManagement expects when a user logs in and clicks remember me that they will then not be required to type their login and password again for a month.  Whether or not they will still have to type in the 2fa code is up for debate.\r\n\r\nWhat is actually happening is that i can close the browser reboot and come back for about an hour and 15 minutes and then i will be forced to type my password again.    This still happens even with a valid `.AspNetCore.Identity.Application` cookie set that is not due to expire for another month.\r\n\r\nAfter digging around in the code i found that Remember me is actually isPersistent and it is defined as.\r\n\r\n>Flag indicating whether the sign-in cookie should persist after the browser is closed.\r\n\r\nWhich brings you to:\r\n\r\nThere are two different types of Cookies:\r\n\r\n- session cookies, held in memory, and which expire once the browser exits\r\n- persistent cookies, which have a time-to-live, are persisted on disk, and are sent by the browser until their time-to-live has elapsed.\r\n\r\nAll this being said remember machine 2fa works as expected i am not prompted again for the 2fa and i have a cookie on my machine `Identity.TwoFactorRememberMe`.\r\n\r\nSo I guess my question is why are we not getting a `Identity.FactorRememberMe` or why isn't sign in respecting a long life time of the `AspNetCore.Identity.Application` cookie?\r\n\r\nHow is this supposed to work exactly?   I am following the code here even though we have normal MVC and not razor pages like you have in the example.  I am still just calling \r\n\r\n>var signInUserResult = await _signInManager.PasswordSignInAsync(userName, password, rememberMe, true);\r\n\r\nNote: I am using Asp .net Identity in Identity server 4 application.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2079","RelatedDescription":"Closed issue \"Remember me isPersistent understanding\" (#2079)"},{"Id":"383297898","IsPullRequest":false,"CreatedAt":"2018-11-21T22:08:40","Actor":"mmillican","Number":"2080","RawContent":null,"Title":"Replace a Role Validator","State":"closed","Body":"I am trying to create a custom role validator to support pseudo-multi-tenancy (which I know is not _officially_ supported in Identity) and am running into some issues.\r\n\r\nI've verified that my validator does work and is being called. However, the default validator appears to be called also. \r\n\r\nHere's my Identity service registration\r\n```\r\nservices.AddIdentity<User, Role>(setup =>\r\n    {\r\n        // Redacted settings\r\n    })\r\n    .AddRoleValidator<CustomRoleValidator<Role>>()\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders();\r\n```\r\n\r\nHow can I _remove_ the default RoleValidator?","Url":"https://github.com/aspnet/Identity/issues/2080","RelatedDescription":"Closed issue \"Replace a Role Validator\" (#2080)"},{"Id":"382890054","IsPullRequest":true,"CreatedAt":"2018-11-20T23:38:12","Actor":"dotnet-maestro-bot","Number":"2078","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\ngit checkout master\r\ngit merge --no-ff merge/release/2.2-to-master\r\ngit push origin master\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.2-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2078","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2078)"},{"Id":"382876972","IsPullRequest":true,"CreatedAt":"2018-11-20T23:38:12","Actor":"javiercn","Number":"2076","RawContent":null,"Title":"Update to IdentityServer 2.3.0","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2076","RelatedDescription":"Closed or merged PR \"Update to IdentityServer 2.3.0\" (#2076)"},{"Id":"382885320","IsPullRequest":true,"CreatedAt":"2018-11-20T23:19:15","Actor":"javiercn","Number":"2077","RawContent":null,"Title":"Update Identity Server dependencies to 2.3.0","State":"closed","Body":"This updates things on non-shipping product code, so it's ok to update (I asked).","Url":"https://github.com/aspnet/Identity/pull/2077","RelatedDescription":"Closed or merged PR \"Update Identity Server dependencies to 2.3.0\" (#2077)"},{"Id":"382068763","IsPullRequest":false,"CreatedAt":"2018-11-19T12:16:11","Actor":"wpqs","Number":"2074","RawContent":null,"Title":"Login doesn't show registered social logins after error","State":"closed","Body":"I'm using ASPNET Core 2.1 with Razor Pages UI Library and noticed that whilst registered social logins appear when I open the Login page, they disappear after an error like incorrect password.\r\n\r\nThere seems to be a bug in Identity\\Pages\\Account\\Login.cshtml.cs as \r\n````\r\n public IList<AuthenticationScheme> ExternalLogins { get; set; }\r\n\r\n````\r\nis only initialised in OnGetAsync(), but if an error happens OnPostAsync() then Page() is returned so OnGetAsyn() doesn't get called. Changing error handling in  OnPostAsync() so RedirectToPage() is returned seems to fix the problem.\r\n\r\nPlease confirm this is a bug and comment on my fix","Url":"https://github.com/aspnet/Identity/issues/2074","RelatedDescription":"Closed issue \"Login doesn't show registered social logins after error\" (#2074)"},{"Id":"381789469","IsPullRequest":true,"CreatedAt":"2018-11-17T00:27:58","Actor":"natemcmaster","Number":"2072","RawContent":null,"Title":"Upgrade projects to netcoreapp3.0","State":"closed","Body":"Changes:\r\n\r\n* Upgrade dependencies\r\n* Change TFM on Microsoft.AspNetCore.Identity to netcoreapp3.0\r\n* Remove .NET Framework tests\r\n\r\nPart of https://github.com/aspnet/AspNetCore/issues/3754","Url":"https://github.com/aspnet/Identity/pull/2072","RelatedDescription":"Closed or merged PR \"Upgrade projects to netcoreapp3.0\" (#2072)"},{"Id":"380931030","IsPullRequest":true,"CreatedAt":"2018-11-14T23:29:46","Actor":"pranavkm","Number":"2070","RawContent":null,"Title":"Use 3.0 configuration in RCLs","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2070","RelatedDescription":"Closed or merged PR \"Use 3.0 configuration in RCLs\" (#2070)"},{"Id":"378005714","IsPullRequest":false,"CreatedAt":"2018-11-14T21:00:55","Actor":"papyr","Number":"2057","RawContent":null,"Title":"AD directory user-groups; can IdentityRole be subclassed to implement Role-Groups or User-Groups","State":"closed","Body":"There is a disconnect with Active Directory, since we don't have support for User Groups in Identity, how can we implement or mirror this functionality inside ASP identity","Url":"https://github.com/aspnet/Identity/issues/2057","RelatedDescription":"Closed issue \"AD directory user-groups; can IdentityRole be subclassed to implement Role-Groups or User-Groups\" (#2057)"},{"Id":"380198930","IsPullRequest":false,"CreatedAt":"2018-11-14T17:33:59","Actor":"blankenbush","Number":"2065","RawContent":null,"Title":"Spelling error DeletePersonalData.cshtml.cs ","State":"closed","Body":"The word \"deleteing\" is wrong.  It should be \"deleting\" on line: 111; DeletePersonalData.cshtml.cs.\r\n\r\nAlso found in comment on line 183; SqlStoreTestBase.cs\r\n\r\n![capture](https://user-images.githubusercontent.com/187785/48412982-33401500-e714-11e8-903b-6e2fcc8e0a6a.PNG)\r\n","Url":"https://github.com/aspnet/Identity/issues/2065","RelatedDescription":"Closed issue \"Spelling error DeletePersonalData.cshtml.cs \" (#2065)"},{"Id":"380389829","IsPullRequest":true,"CreatedAt":"2018-11-14T17:33:01","Actor":"blankenbush","Number":"2066","RawContent":null,"Title":"Fix typo","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2066","RelatedDescription":"Closed or merged PR \"Fix typo\" (#2066)"},{"Id":"377364575","IsPullRequest":false,"CreatedAt":"2018-11-09T11:16:05","Actor":"yetanotherchris","Number":"2056","RawContent":null,"Title":"Should IdentityUser be in the EntityFramework namespace?","State":"closed","Body":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.entityframeworkcore.identityuser?view=aspnetcore-1.1\r\n\r\nI'm looking through various implementations from the [readme](https://github.com/aspnet/Identity/blob/master/README.md) and I've noticed they all use `IdentityUser ` for their concrete type to pass to `UserManager`, or have had to craft a custom type to be able to have a contract between the database and the .NET AspNetIdentity implentation they've written (see the DynamoDB library).\r\n\r\nI've had to do this too for the [Marten implementation I've written](https://github.com/yetanotherchris/Marten.AspNetIdentity), and the reason is, a `TUser` that your `UserStore` takes, should really be an interface - it will always have an email, most likely an Id of some sort, firstname, lastname and then a bag of properties.\r\n\r\nThings become even more abstract when dealing with claims.\r\n\r\nIf everyone is using `IdentityUser` or their own custom `TUser` doesn't this defeat the purpose of AspnetIdentity - which is to be able to switch and change implementations easily? That isn't possible if your consumer is tightly coupled with a `TUser` implementation of the library.\r\n\r\n### Example `TUser` implementations\r\n\r\n- [MongoIdentityUser](https://github.com/tugberkugurlu/AspNetCore.Identity.MongoDB/blob/master/src/AspNetCore.Identity.MongoDB/MongoIdentityUser.cs)\r\n- [DynamoIdentityUser](https://github.com/miltador/AspNetCore.Identity.DynamoDB/blob/master/src/AspNetCore.Identity.DynamoDB/DynamoIdentityUser.cs)\r\n- [Redis uses `IdentityUser<string>`](https://github.com/aguacongas/Identity.Redis/blob/develop/src/Aguacongas.Identity.Redis/UserStore.cs)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2056","RelatedDescription":"Closed issue \"Should IdentityUser be in the EntityFramework namespace?\" (#2056)"},{"Id":"376980171","IsPullRequest":true,"CreatedAt":"2018-11-02T21:57:29","Actor":"dotnet-maestro-bot","Number":"2055","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\ngit checkout master\r\ngit merge --no-ff merge/release/2.2-to-master\r\ngit push origin master\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.2-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2055","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2055)"},{"Id":"376978591","IsPullRequest":true,"CreatedAt":"2018-11-02T21:57:26","Actor":"javiercn","Number":"2054","RawContent":null,"Title":"Fixes integrity validation in Identity UI V3","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2054","RelatedDescription":"Closed or merged PR \"Fixes integrity validation in Identity UI V3\" (#2054)"},{"Id":"376977750","IsPullRequest":false,"CreatedAt":"2018-11-02T21:48:32","Actor":"javiercn","Number":"2053","RawContent":null,"Title":"Fix integrity tags on Identity UI V3","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/issues/2053","RelatedDescription":"Closed issue \"Fix integrity tags on Identity UI V3\" (#2053)"},{"Id":"376973581","IsPullRequest":true,"CreatedAt":"2018-11-02T21:48:08","Actor":"javiercn","Number":"2052","RawContent":null,"Title":"Fixes integrity validation hashes for Identity UI V3","State":"closed","Body":"Fixes https://github.com/aspnet/Identity/issues/2053","Url":"https://github.com/aspnet/Identity/pull/2052","RelatedDescription":"Closed or merged PR \"Fixes integrity validation hashes for Identity UI V3\" (#2052)"},{"Id":"376607709","IsPullRequest":false,"CreatedAt":"2018-11-01T23:29:51","Actor":"ycrumeyrolle","Number":"2051","RawContent":null,"Title":"[Question] Passwords should not be of type String ?","State":"closed","Body":"My security team escalated to me that the `PasswordHasher` is vulnerable to heap inspection, as the password is of type `String`. \r\nIt should be instead a byte array / span of bytes cleared at the end of the process, as it is done by any cryptographic operation in corefx. CC @bartonjs.\r\nSame problem with any password related types (`IPasswordValidator`, and maybe also the `IUserPasswordStore`)","Url":"https://github.com/aspnet/Identity/issues/2051","RelatedDescription":"Closed issue \"[Question] Passwords should not be of type String ?\" (#2051)"}],"ResultType":"GitHubIssue"},"Tooling-Issues":{"Issues":[{"Id":"597492854","IsPullRequest":true,"CreatedAt":"2020-04-09T19:44:41","Actor":"terrajobst","Number":"1097","RawContent":null,"Title":"Link Code of Conduct","State":"closed","Body":"See [this policy rule](https://github.com/dotnet/org-policy/blob/master/doc/PR15.md) for more details.","Url":"https://github.com/aspnet/Tooling/pull/1097","RelatedDescription":"Closed or merged PR \"Link Code of Conduct\" (#1097)"},{"Id":"585801568","IsPullRequest":false,"CreatedAt":"2020-03-22T20:10:12","Actor":"GaryFurash","Number":"1096","RawContent":null,"Title":"Creating Edit View with Non EFModel","State":"open","Body":"Using latest ASP.NET Core with latest Nuget on Visual Studio 2019 windows 10 pro.\r\n\r\nIf I try to create an Edit view based on a view model that isn't configured in the DB context (e.g., it's a model that doesn't map to a DB table in EF), even after adding the [Key] annotation I get the error:\r\n\r\n'The entity type 'RoleEdit' requires a primary key to be defined. If you intended to use a keyless entity type call 'HasNoKey()'.'\r\n\r\nI can't use HasNoKey since the model entity isn't in the context since it isn't a real table.\r\n","Url":"https://github.com/aspnet/Tooling/issues/1096","RelatedDescription":"Open issue \"Creating Edit View with Non EFModel\" (#1096)"},{"Id":"576654849","IsPullRequest":true,"CreatedAt":"2020-03-06T02:27:01","Actor":"mairaw","Number":"1095","RawContent":null,"Title":"Update link to a more proper target","State":"open","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1095","RelatedDescription":"Open PR \"Update link to a more proper target\" (#1095)"},{"Id":"499940912","IsPullRequest":false,"CreatedAt":"2019-09-28T16:33:15","Actor":"genifycom","Number":"1094","RawContent":null,"Title":"Add Razor Page using Entity Framework (CRUD)","State":"open","Body":"<!-- Describe what isn't working as expected -->\r\nWhen I right click on Pages and Add Razor page. I select Razor Pages using Entity Framework (CRUD). I select my Model class and my Data Context class and press Add.\r\n\r\nI expect to give the Razor page a name. But a Dialog pops up and says\r\n\r\nAdd Razor Page(s)\r\n\r\nThe following file(s) already exist:\r\n\r\nIndex\r\nIndex.cshtml.cs\r\n\r\nDo you want to replace them?\r\n---------------------------\r\nYes   No   \r\n---------------------------\r\n\r\nI do not expect that adding a Razor page will replace Index. I expect to create a NEW razor page with a new name. Saying No here does not allow one to continue.\r\n\r\n### Steps to reproduce\r\nAs above\r\n\r\nWe ❤ code! Include a complete code listing or attach a simplified project\r\n\r\nCreate a new ASP.NET Core Web Application. Use ASP.NET Core 3.0 and \"Web Application\".\r\nCreate a model class (Customer with int ID and string Name).\r\nAdd Razor Page using EF and CRUD.\r\nSelect Model class and add context class.\r\nClick Add\r\n\r\n### Further technical details\r\n\r\nEF Core version: 3.0\r\nDatabase provider: (e.g. Microsoft.EntityFrameworkCore.SqlServer)\r\nTarget framework: (e.g. .NET Core 3.0)\r\nOperating system: Windows 10\r\nIDE: (e.g. Visual Studio 2019 16.3) Visual Studio 2019 16.3.1\r\n","Url":"https://github.com/aspnet/Tooling/issues/1094","RelatedDescription":"Open issue \"Add Razor Page using Entity Framework (CRUD)\" (#1094)"},{"Id":"480473543","IsPullRequest":false,"CreatedAt":"2019-08-14T04:21:20","Actor":"AlseinX","Number":"1093","RawContent":null,"Title":"`dotnet new -i` does not work any more in preview8","State":"open","Body":"`dotnet new -i Microsoft.AspNetCore.Blazor.Templates::3.0.0-preview8.19405.7`\r\n\r\nResults:\r\n\r\n```\r\n用法: new [选项]\r\n\r\n选项:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --dry-run           Displays a summary of what would happen if the given command line were run if it would result in a template creation.\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n  --update-check      Check the currently installed template packs for updates.\r\n  --update-apply      Check the currently installed template packs for update, and install the updates.\r\n\r\n\r\nTemplates                                         Short Name               Language          Tags\r\n----------------------------------------------------------------------------------------------------------------------------------\r\nConsole Application                               console                  [C#], F#, VB      Common/Console\r\nClass library                                     classlib                 [C#], F#, VB      Common/Library\r\nWPF Application                                   wpf                      [C#], VB          Common/WPF\r\nWPF Class library                                 wpflib                   [C#], VB          Common/WPF\r\nWPF Custom Control Library                        wpfcustomcontrollib      [C#], VB          Common/WPF\r\nWPF User Control Library                          wpfusercontrollib        [C#], VB          Common/WPF\r\nWindows Forms (WinForms) Application              winforms                 [C#], VB          Common/WinForms\r\nWindows Forms (WinForms) Class library            winformslib              [C#], VB          Common/WinForms\r\nWorker Service                                    worker                   [C#]              Common/Worker/Web\r\nUnit Test Project                                 mstest                   [C#], F#, VB      Test/MSTest\r\nNUnit 3 Test Project                              nunit                    [C#], F#, VB      Test/NUnit\r\nNUnit 3 Test Item                                 nunit-test               [C#], F#, VB      Test/NUnit\r\nxUnit Test Project                                xunit                    [C#], F#, VB      Test/xUnit\r\nRazor Component                                   razorcomponent           [C#]              Web/ASP.NET\r\nRazor Page                                        page                     [C#]              Web/ASP.NET\r\nMVC ViewImports                                   viewimports              [C#]              Web/ASP.NET\r\nMVC ViewStart                                     viewstart                [C#]              Web/ASP.NET\r\nBlazor Server App                                 blazorserver             [C#]              Web/Blazor\r\nASP.NET Core Empty                                web                      [C#], F#          Web/Empty\r\nASP.NET Core Web App (Model-View-Controller)      mvc                      [C#], F#          Web/MVC\r\nASP.NET Core Web App                              webapp                   [C#]              Web/MVC/Razor Pages\r\nASP.NET Core with Angular                         angular                  [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js                        react                    [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js and Redux              reactredux               [C#]              Web/MVC/SPA\r\nRazor Class Library                               razorclasslib            [C#]              Web/Razor/Library/Razor Class Library\r\nASP.NET Core Web API                              webapi                   [C#], F#          Web/WebAPI\r\nASP.NET Core gRPC Service                         grpc                     [C#]              Web/gRPC\r\ndotnet gitignore file                             gitignore                                  Config\r\nglobal.json file                                  globaljson                                 Config\r\nNuGet Config                                      nugetconfig                                Config\r\nDotnet local tool manifest file                   tool-manifest                              Config\r\nWeb Config                                        webconfig                                  Config\r\nSolution File                                     sln                                        Solution\r\nProtocol Buffer File                              proto                                      Web/gRPC\r\n\r\nExamples:\r\n    dotnet new mvc --auth Individual\r\n    dotnet new wpfcustomcontrollib\r\n    dotnet new --help\r\n\r\n```\r\n\r\nRunning `dotnet new -i aaa::bbb` results the same.","Url":"https://github.com/aspnet/Tooling/issues/1093","RelatedDescription":"Open issue \"`dotnet new -i` does not work any more in preview8\" (#1093)"},{"Id":"477192366","IsPullRequest":true,"CreatedAt":"2019-08-06T06:25:26","Actor":"SuperChenSSS","Number":"1092","RawContent":null,"Title":"Point \"Set up DNS name for the VM\" link to the right direction","State":"open","Body":"The \"Set up DNS name for the VM\" link is incorrect and can't see the content. Change it to the right direction.","Url":"https://github.com/aspnet/Tooling/pull/1092","RelatedDescription":"Open PR \"Point \"Set up DNS name for the VM\" link to the right direction\" (#1092)"},{"Id":"477188104","IsPullRequest":true,"CreatedAt":"2019-08-06T06:24:35","Actor":"SuperChenSSS","Number":"1091","RawContent":null,"Title":"Point \"Set up DNS name for the VM\" link to the right direction","State":"closed","Body":"The \"Set up DNS name for the VM\" link is incorrect and can't see the content. Change it to the right direction.","Url":"https://github.com/aspnet/Tooling/pull/1091","RelatedDescription":"Closed or merged PR \"Point \"Set up DNS name for the VM\" link to the right direction\" (#1091)"},{"Id":"476745373","IsPullRequest":false,"CreatedAt":"2019-08-05T09:15:18","Actor":"juniormayhe","Number":"1090","RawContent":null,"Title":"Cannot start a webapi on specific SSL port managed by IISExpress","State":"open","Body":"A brand new netcore webapi 2.2 is created. \r\n\r\nCurrent launch settings:\r\n```\r\n{\r\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:62813\",\r\n      \"sslPort\": 44396\r\n    }\r\n  },\r\n```\r\n\r\nAfter setting the SSL port to anything such as 11000, application won't get started on IIS Express, but the same app runs correctly on port 11000 after being published to local IIS (https://localhost:11000).\r\n\r\nThe only way to start it on IIS Express is to keep 443 prefix (i.e. 44300, 44301, etc). \r\n\r\nIs this restriction by design as stated [here](https://developercommunity.visualstudio.com/content/problem/39430/changing-port-number-in-a-web-project-does-not-imm.html?childToView=43139#comment-43139)?\r\n\r\n\"You can change that value to whatever you want.\" definitely is not working as stated here: https://github.com/aspnet/Tooling/issues/286\r\n\r\n```\r\n- Visual Studio 2019 16.1.6\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-012264\r\n Commit:    be3f0c1a03\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27804-01\r\n  Commit:  fdf81c6faf\r\n\r\n.NET Core SDKs installed:\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800-preview-009696 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010219 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012264 [C:\\Program Files\\dotnet\\sdk]\r\n```","Url":"https://github.com/aspnet/Tooling/issues/1090","RelatedDescription":"Open issue \"Cannot start a webapi on specific SSL port managed by IISExpress\" (#1090)"},{"Id":"465641918","IsPullRequest":false,"CreatedAt":"2019-07-09T08:26:34","Actor":"plachor","Number":"1089","RawContent":null,"Title":"LaunchSettings are not respected by Test Runner","State":"open","Body":"In latest Visual Studio 2019, Test Runner ignores `environmentVariables` configuration which would allow for instance configuration of `ASPNETCORE_ENVIRONMENT`.\r\n\r\nThis would be beneficial for integration tests that in local environment use different appsettings (non-production).\r\n\r\nFor instance I would like to define following launchSettings.json:\r\n```json\r\n{\r\n  \"profiles\": {\r\n    \"SomeFancyNamespace.ProjectName.Integration.Tests\": {\r\n      \"commandName\": \"Project\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThere was an related issue that was closed: https://github.com/aspnet/Tooling/issues/456 ","Url":"https://github.com/aspnet/Tooling/issues/1089","RelatedDescription":"Open issue \"LaunchSettings are not respected by Test Runner\" (#1089)"},{"Id":"447378907","IsPullRequest":true,"CreatedAt":"2019-05-22T23:02:06","Actor":"Rick-Anderson","Number":"1088","RawContent":null,"Title":"Update dotnet-core-3.0-preview1.md","State":"open","Body":"MS Style guide violations and other clean up. Less is more.","Url":"https://github.com/aspnet/Tooling/pull/1088","RelatedDescription":"Open PR \"Update dotnet-core-3.0-preview1.md\" (#1088)"},{"Id":"433911513","IsPullRequest":true,"CreatedAt":"2019-04-16T17:57:10","Actor":"Rick-Anderson","Number":"1087","RawContent":null,"Title":"Update known-issues-vs2017.md","State":"open","Body":"Use Visual Studio Installer to install the missing Visual Studio component \".NET Core 1.0 - 1.1 developer tools for Web\" from the **Individual components** tab.","Url":"https://github.com/aspnet/Tooling/pull/1087","RelatedDescription":"Open PR \"Update known-issues-vs2017.md\" (#1087)"},{"Id":"430834286","IsPullRequest":false,"CreatedAt":"2019-04-09T17:36:29","Actor":"Ashishks1987","Number":"1086","RawContent":null,"Title":"System.Collections.Immutable dll being replace by Microsoft.Net.Compilers","State":"closed","Body":"I have referenced `system.collections.immutable.dll` from the nuget package and I also have the nuget package installed for `Microsoft.Net.Compilers`. Everything works fine in my local but when I push my code to bamboo, in the runtime I get `Could not load file or assembly 'System.Collections.Immutable, Version=1.2.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)`\r\n\r\nWhen I checked logs on bamboo when it generates the artifacts, I can see that initially it copied the correct dll here:\r\n\r\n`build    04-Apr-2019 03:20:33      Copying file from \"E:\\agt01\\ENS-EB580-JOB1\\Bin\\Packages\\System.Collections.Immutable.1.5.0\\lib\\netstandard1.0\\System.Collections.Immutable.dll\" to \"E:\\agt01\\ENS-EB580-JOB1\\Binaries\\Release\\\\temp\\Web\\_PublishedWebsites\\MyService\\bin\\System.Collections.Immutable.dll\"`.\r\n\r\nbut then at some point, it replaced this dll with this: `build    04-Apr-2019 03:20:33      Copying file from \"E:\\agt01\\ENS-EB580-JOB1\\Bin\\Packages\\Microsoft.Net.Compilers.1.0.0\\tools\\System.Collections.Immutable.dll\" to \"E:\\agt01\\ENS-EB580-JOB1\\Binaries\\Release\\\\temp\\Web\\_PublishedWebsites\\MyService\\bin\\System.Collections.Immutable.dll\".`\r\n\r\nHow can I make sure that bamboo does not replace this dll and just uses it from the nuget package installed?","Url":"https://github.com/aspnet/Tooling/issues/1086","RelatedDescription":"Closed issue \"System.Collections.Immutable dll being replace by Microsoft.Net.Compilers\" (#1086)"},{"Id":"422330835","IsPullRequest":false,"CreatedAt":"2019-03-18T17:00:12","Actor":"vikasNew","Number":"1085","RawContent":null,"Title":"web deploy on windows 10","State":"open","Body":"Hello,\r\n\r\ncan i publish my code by using web deploy to windows 10 machine.\r\n\r\ni have setup my testing windows 10 machine for deployment, which is in local area network.\r\n\r\nSo i want to publish my code to that remote machine by using web deploy. can i do that ?\r\n\r\ni have installed web deploy and also enabled web development remote service on windows 10 but i am not able to connect to remote machine using we deploy.\r\n\r\nThis returns me the following error every-time.\r\n\"ERROR_DESTINATION_NOT_REACHABLE\"\r\n\r\ninteresting thing is i also have windows 10 on my machine & i am able to use web deploy on my local machine but it's not working with remote windows 10 machine.\r\n\r\nis web deploy only meant for Windows servers not for other normal windows?\r\n\r\nThanks \r\n","Url":"https://github.com/aspnet/Tooling/issues/1085","RelatedDescription":"Open issue \"web deploy on windows 10\" (#1085)"},{"Id":"398036850","IsPullRequest":false,"CreatedAt":"2019-01-15T05:32:59","Actor":"chrgraefe","Number":"1084","RawContent":null,"Title":"Can't add area on ASP.NET Core MVC project","State":"closed","Body":"### Describe the bug\r\nA clear and concise description of what the bug is.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using this version of ASP.NET Core '3.0.100-preview-009812'\r\n2. New ASP.NET Core MVC project in VS2019 Preview\r\n3. Can't add area\r\n\r\n### Expected behavior\r\nA dialog to type area name\r\n","Url":"https://github.com/aspnet/Tooling/issues/1084","RelatedDescription":"Closed issue \"Can't add area on ASP.NET Core MVC project\" (#1084)"},{"Id":"391209971","IsPullRequest":false,"CreatedAt":"2018-12-14T18:00:59","Actor":"sai-manoj-kumar","Number":"1080","RawContent":null,"Title":"The template to create an ASP .NET VM is not working","State":"open","Body":"[The template given here](https://github.com/aspnet/Tooling/blob/AspNetVMs/docs/create-asp-net-vm-with-webdeploy.md#PowerShellScript) doesn't work. It gives the error SkuNotAvailable. Can someone please fix it?","Url":"https://github.com/aspnet/Tooling/issues/1080","RelatedDescription":"Open issue \"The template to create an ASP .NET VM is not working\" (#1080)"},{"Id":"385928083","IsPullRequest":false,"CreatedAt":"2018-12-07T20:30:45","Actor":"sinand","Number":"1079","RawContent":null,"Title":"auto build on browser request not working","State":"closed","Body":"I am using community edition 15.9.3 since  the previous update this feature is not working, everytime I have to build project.","Url":"https://github.com/aspnet/Tooling/issues/1079","RelatedDescription":"Closed issue \"auto build on browser request not working\" (#1079)"},{"Id":"383440110","IsPullRequest":false,"CreatedAt":"2018-11-26T19:03:29","Actor":"eriawan","Number":"1078","RawContent":null,"Title":"Feedback: ensure that .NET Core 1.0/1.1 tooling only supported in VS 2017 and won't be supported in VS 2019","State":"closed","Body":"Apologize if my feedback may sound controversial or may spark a debate.\r\n\r\nI need to be sure that the problem mentioned on this [page](https://github.com/aspnet/Tooling/blob/master/known-issues-vs2017.md#to-create-aspnet-core-10--11-projects-install-visual-studios-net-core-10---11-developer-tools-for-web-component) about .NET Core 1.0/1.1 tooling is installed when creating new ASP.NET Core 1.0/1.1 project should not happen or should not be supported in VS 2019.\r\n\r\nThese are my main concerns:\r\n\r\n1. VS 2019 is about to be released in around early 2019\r\n2. ASP.NET Core 1.0/1.1 is not going to be supported anymore, based on [this page](https://github.com/dotnet/core/blob/master/microsoft-support.md).\r\n3. Creating new ASP.NET Core 1.0/1.1 will always install the .NET Core 1.0/1.1 web tooling, and this is not necessary when previous reason has reached the unsupported period and it's quite near or might be the same time of VS 2019 release.\r\n4. Based on the problem mentioned above, VS 2017 has no \"built in\" tooling when creating new ASP.NET Core 1.0/1.1 project, but the external tooling may help. Therefore for those that still need to maintain ASP.NET Core 1.0/1.1 projects, we could use VS 2017 as long as the VS 2017 is still in support lifecycle or in mainstream support lifecycle.\r\n\r\nI welcome feedback 🙂 \r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1078","RelatedDescription":"Closed issue \"Feedback: ensure that .NET Core 1.0/1.1 tooling only supported in VS 2017 and won't be supported in VS 2019\" (#1078)"},{"Id":"349649932","IsPullRequest":true,"CreatedAt":"2018-08-10T20:38:21","Actor":"AndrewBrianHall","Number":"1077","RawContent":null,"Title":"Adding a .net core -> vs mapping table","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1077","RelatedDescription":"Closed or merged PR \"Adding a .net core -> vs mapping table\" (#1077)"},{"Id":"333613195","IsPullRequest":false,"CreatedAt":"2018-06-27T12:59:29","Actor":"Liero","Number":"1076","RawContent":null,"Title":"Unable to publish when using Microsoft.NET.Sdk.Razor","State":"closed","Body":"After I upgraded my solution from asp.net core 2.0 to 2.1, I'm not able to publish my web app from Visual Studio, although it can build.\r\n\r\nDuring the upgrade I've changed SDK in one of my class libraries to **Microsoft.NET.Sdk.Razor**, but now I'm getting a lot of errors and if project references were not recognized in this library when publishing.\r\n\r\n```\r\nConnecting to C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\publish\\...\r\nMyProject.Web -> C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\MyProject.Web.dll\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;RELEASE;NETCOREAPP;NETCOREAPP2_1 /errorendlocation /preferreduilang:en-US /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization.policy\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.Policy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.internal\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cryptography.Internal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.server.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.html.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Html.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.jsonpatch\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.JsonPatch.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.apiexplorer\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.dataannotations\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.json\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.viewfeatures\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.language\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Language.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.runtime\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.webutilities\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.WebUtilities.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.CodeAnalysis.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.dotnet.platformabstractions\\2.1.0\\lib\\netstandard1.3\\Microsoft.DotNet.PlatformAbstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Relational.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.SqlServer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Binder.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netcoreapp2.0\\Microsoft.Extensions.DependencyInjection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencymodel\\2.1.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.composite\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Composite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.filesystemglobbing\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileSystemGlobbing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.objectpool\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.ObjectPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Options.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.webencoders\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.WebEncoders.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.net.http.headers\\2.1.0\\lib\\netstandard2.0\\Microsoft.Net.Http.Headers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.VisualBasic.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.Win32.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.win32.registry\\4.5.0\\ref\\netstandard2.0\\Microsoft.Win32.Registry.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\mscorlib.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\netstandard.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json.bson\\1.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.Bson.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json\\11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\remotion.linq\\2.2.0\\lib\\netstandard1.0\\Remotion.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.AppContext.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Buffers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Concurrent.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Immutable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.NonGeneric.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Specialized.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Annotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.EventBasedAsync.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.TypeConverter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Console.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.Common.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.data.sqlclient\\4.5.0\\ref\\netcoreapp2.1\\System.Data.SqlClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Contracts.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Debug.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.DiagnosticSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.FileVersionInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Process.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.StackTrace.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TextWriterTraceListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tools.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TraceSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tracing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Dynamic.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Calendars.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.Brotli.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.ZipFile.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.DriveInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Watcher.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.IsolatedStorage.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.MemoryMappedFiles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Pipes.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.UnmanagedMemoryStream.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Expressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Queryable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.HttpListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Mail.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NameResolution.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NetworkInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Ping.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Requests.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.ServicePoint.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Sockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebHeaderCollection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.Client.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.Vectors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ObjectModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.DispatchProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.ILGeneration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.Lightweight.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.TypeExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Reader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.ResourceManager.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Writer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.CompilerServices.VisualC.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Handles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.RuntimeInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.WindowsRuntime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Loader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Formatters.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\ref\\netstandard2.0\\System.Security.AccessControl.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Claims.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Algorithms.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Csp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.X509Certificates.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.cryptography.xml\\4.5.0\\ref\\netstandard2.0\\System.Security.Cryptography.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.permissions\\4.5.0\\ref\\netstandard2.0\\System.Security.Permissions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Principal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.5.0\\ref\\netstandard2.0\\System.Security.Principal.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.SecureString.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceModel.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceProcess.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encodings.web\\4.5.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.RegularExpressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Overlapped.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Dataflow.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Thread.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.ThreadPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Timer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.Local.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ValueTuple.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.HttpUtility.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.ReaderWriter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlSerializer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\WindowsBase.dll\" /debug- /debug:portable /filealign:512 /optimize+ /out:obj\\Release\\netcoreapp2.1\\MyProject.Mail.dll /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:library /warnaserror- /utf8output /deterministic+ /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.CSharp.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.analyzers\\2.1.0\\analyzers\\dotnet\\cs\\Microsoft.EntityFrameworkCore.Analyzers.dll\" EmailDefaults.cs EmailOptions.cs MailSender.cs NotificationService.cs RazorViewToStringRenderer.cs \"C:\\Users\\daniel.turan\\AppData\\Local\\Temp\\.NETCoreApp,Version=v2.1.AssemblyAttributes.cs\" obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\\Release\\netcoreapp2.1\\\\Tem\tporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.RazorAssemblyInfo.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.AssemblyInfo.cs /warnaserror+:NU1605\r\nNotificationService.cs(15,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\nNotificationService.cs(16,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\n...\r\n```\r\n\r\nAlso, see https://stackoverflow.com/questions/50926116/publish-failed-when-using-microsoft-net-sdk-razor-if-reference-was-not-recognize for more details","Url":"https://github.com/aspnet/Tooling/issues/1076","RelatedDescription":"Closed issue \"Unable to publish when using Microsoft.NET.Sdk.Razor\" (#1076)"},{"Id":"329605262","IsPullRequest":false,"CreatedAt":"2018-06-05T20:05:23","Actor":"AngelosP","Number":"1075","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of dotnet-aspnet-codegenerator","State":"open","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","Url":"https://github.com/aspnet/Tooling/issues/1075","RelatedDescription":"Open issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of dotnet-aspnet-codegenerator\" (#1075)"},{"Id":"328747170","IsPullRequest":false,"CreatedAt":"2018-06-02T14:10:13","Actor":"AceHack","Number":"1074","RawContent":null,"Title":"Docker in launchSettings.json","State":"open","Body":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image.","Url":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Open issue \"Docker in launchSettings.json\" (#1074)"},{"Id":"328082529","IsPullRequest":true,"CreatedAt":"2018-06-01T17:41:04","Actor":"federicorinaldi","Number":"1073","RawContent":null,"Title":"Update dotnet-core-2.1.md","State":"closed","Body":"Visual Studio 2017 15.7 has been released now so this document is outdated","Url":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Closed or merged PR \"Update dotnet-core-2.1.md\" (#1073)"},{"Id":"323850872","IsPullRequest":false,"CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Number":"1072","RawContent":null,"Title":"can not upload file FTPS. ","State":"closed","Body":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072)"},{"Id":"317494886","IsPullRequest":false,"CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Number":"1071","RawContent":null,"Title":" Unable to start debugging","State":"open","Body":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Open issue \" Unable to start debugging\" (#1071)"},{"Id":"316585462","IsPullRequest":false,"CreatedAt":"2018-04-24T05:17:55","Actor":"rberger247","Number":"1070","RawContent":null,"Title":"Visual studio freezes when I run add-migration ","State":"closed","Body":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger.","Url":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070)"},{"Id":"308764422","IsPullRequest":false,"CreatedAt":"2018-03-27T05:23:09","Actor":"dvdobrovolskiy","Number":"1069","RawContent":null,"Title":"EntityFramework migrations not available to be applied during publish","State":"closed","Body":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc","Url":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069)"},{"Id":"304770827","IsPullRequest":false,"CreatedAt":"2018-03-14T05:33:19","Actor":"ghost","Number":"1068","RawContent":null,"Title":"Switch between Razor Page View and Code Behind","State":"closed","Body":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n","Url":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068)"},{"Id":"304312342","IsPullRequest":false,"CreatedAt":"2018-03-13T05:33:42","Actor":"RehanSaeed","Number":"1067","RawContent":null,"Title":"Support dotnet watch in launchSettings.json","State":"closed","Body":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine.","Url":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067)"},{"Id":"300865938","IsPullRequest":false,"CreatedAt":"2018-02-28T06:01:18","Actor":"rjamesnw","Number":"1066","RawContent":null,"Title":"Nesting bug","State":"closed","Body":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file.","Url":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066)"},{"Id":"290854647","IsPullRequest":false,"CreatedAt":"2018-01-24T01:14:53","Actor":"NeerajaRagesh","Number":"1065","RawContent":null,"Title":"Issue with Sales discount App - Odoo 9","State":"closed","Body":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n","Url":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"2013176077","IsPullRequest":false,"CreatedAt":"2023-11-27T21:55:39","Actor":"captainsafia","Number":"509","RawContent":null,"Title":"[Breaking change]: Minimal APIs consuming IFormFile or IFormFileCollection parameters require anti-forgery checks","State":"open","Body":"### Description\n\nMinimal API endpoints that consume an `IFormFile` or `IFormFileCollection` will now be opted-in to requiring anti-forgery token validation using the new anti-forgery middleware.\n\n### Version\n\n.NET 8 RC 1\n\n### Previous behavior\n\nMinimal API endpoints that bound a parameter from the form via `IFormFile` or `IFormFileCollection` did not require anti-forgery validation.\n\n### New behavior\n\nMinimal API endpoints that bound a parameter from the form via `IFormFile` or `IFormFileCollection` did require anti-forgery validation. An exception will be thrown at startup if the anti-forgery middleware is not registered for an API that defines these input types.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nAnti-forgery token validation is a recommended security precaution for APIs that consume data from a form.\n\n### Recommended action\n\nUsers can opt out of anti-forgery validation for specific endpoints by using the `DisableAntiforgery` method like so:\r\n\r\n```csharp\r\nvar app = WebApplication.Create();\r\n\r\napp.MapPost(\"/\", (IFormFile formFile) => ...)\r\n  .DisableAntiforgery();\r\n\r\napp.Run();\r\n```\n\n### Affected APIs\n\nNone.","Url":"https://github.com/aspnet/Announcements/issues/509","RelatedDescription":"Open issue \"[Breaking change]: Minimal APIs consuming IFormFile or IFormFileCollection parameters require anti-forgery checks\" (#509)"},{"Id":"1811082947","IsPullRequest":false,"CreatedAt":"2023-07-19T03:36:42","Actor":"jmprieur","Number":"508","RawContent":null,"Title":"[Breaking change]: JwtBearer, WsFederation, and OpenIdConnect events context properties of type SecurityToken now return a JSonWebToken by default","State":"open","Body":"## Description\r\nThe `JwtBearerEvents`, `WsFederationEvents` and `OpenIdConnectEvents` are authentication events fired respectively by the `JwtBearer`, `WsFederation` and `OpenIdConnect` authentication handlers. For example the [OnTokenValidated](https://github.com/dotnet/aspnetcore/blob/bf303a1092f83d789031fdafac60f3fc454cfc49/src/Security/Authentication/JwtBearer/src/JwtBearerEvents.cs#L29) event is fired when a security token is validated. These events are fired with a context (for instance [TokenValidatedContext](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.jwtbearer.tokenvalidatedcontext?view=aspnetcore-7.0)) that exposes a `SecurityToken` property of abstract type [SecurityToken](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.securitytoken?view=msal-web-dotnet-latest). The default real implementation of SecurityToken changed from [JwtSecurityToken](https://learn.microsoft.com/dotnet/api/system.identitymodel.tokens.jwt.jwtsecuritytoken?view=msal-web-dotnet-latest) to [JsonWebToken](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.jsonwebtokens.jsonwebtoken?view=msal-web-dotnet-latest).\r\nIf you really need to keep using `JwtSecurityToken`, you can re-enable it by setting `UseSecurityTokenValidators` on the `JwtBearerOptions`, `WsFederationOptions`, `OpenIdConnectOptions`.\r\n\r\nFor details [#aspnetcore/49469](https://github.com/dotnet/aspnetcore/issues/49469#issue) API Review.\r\n\r\n### Version\r\n.NET 8 Preview 7\r\n\r\n### Previous behavior\r\nUntil ASP.NET Core 8-preview 7, these SecurityToken properties were implemented by a sub-class of SecurityToken named JwtSecurityToken, which is the previous generation of implementation of JWT. These JwtSecurityToken were produced by [SecurityTokenValidators](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.isecuritytokenvalidator?view=msal-web-dotnet-latest).\r\n\r\n### New behavior\r\nFrom ASP.NET Core 8-preview 7, by default the class derived from SecurityToken implenting these properties is JSonWebToken which are produced by more optimized [TokenHandlers](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.tokenhandler?view=msal-web-dotnet-latest).\r\n\r\n## Type of breaking change\r\n- [ ] Binary incompatible: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] Source incompatible: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [x] Behavioral change: Existing binaries may behave differently at run time.\r\n\r\n## Reason for change\r\nThis change was made because JSonWebToken (and its associated JSonWebTokenHandler) are bringing:\r\n- 30% performance improvement.\r\n- Improved reliability by the usage of a Last Known Good metadata (such as the OpenIdConnectMetadata)\r\n- async processing\r\n\r\n### Recommended action\r\nFor most of you, this shouldn't be a problem as the type of the properties (SecurityToken) has not changed, and you were not supposed to look at the real type.\r\n\r\nHowever, if you were downcasting one of these SecurityToken properties to JwtSecurityToken (for example to get the claims), you will now need to:\r\n- either down-cast them to JSonWebToken\r\n\r\n  ```CSharp\r\n  service.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme,  options => {\r\n      options.Events.TokenValidated = (context) => {\r\n          // Replace your cast to JwtSecurityToken.\r\n          JSonWebToken token = context.SecurityToken as JSonWebToken;\r\n          // Do something ...\r\n      };\r\n  });\r\n  ```\r\n\r\n- or set one of the UseSecurityTokenValidators boolean properties on the corresponding options (JtwBearerOptions, WsFederationOptions, OpenIdConnectOptions) to true, in which case the authentication handlers will keep using the JwtTokenValidators and will keep producing JwtSecurityTokens.\r\n\r\n  ```CSharp\r\n  service.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme,  options => {\r\n      options.UseSecurityTokenValidators = true;\r\n      options.Events.TokenValidated = (context) => {\r\n          // As you were doing before\r\n          JwtSecurityToken token = context.SecurityToken as JwtSecurityToken;\r\n          // Do something ...\r\n      };\r\n  });\r\n  ```\r\n\r\n\r\n\r\n## Affected APIs\r\nThe properties that are concerned are the following:\r\n\r\n### In WsFederationEvents\r\n\r\n- [SecurityTokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/WsFederation/src/SecurityTokenValidatedContext.cs#L31)\r\n\r\n### In JwtBearerEvents\r\n\r\n- [TokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/JwtBearer/src/TokenValidatedContext.cs#L27)\r\n\r\n### In OpenIdConnectEvents\r\n\r\n- [TokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/OpenIdConnect/src/Events/TokenValidatedContext.cs#L32)\r\n- [AuthorizationCodeReceivedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/OpenIdConnect/src/Events/AuthorizationCodeReceivedContext.cs#L34)","Url":"https://github.com/aspnet/Announcements/issues/508","RelatedDescription":"Open issue \"[Breaking change]: JwtBearer, WsFederation, and OpenIdConnect events context properties of type SecurityToken now return a JSonWebToken by default\" (#508)"},{"Id":"1805550224","IsPullRequest":false,"CreatedAt":"2023-07-14T20:44:25","Actor":"captainsafia","Number":"507","RawContent":null,"Title":"[Breaking change]: TrimMode defaults to `full` for WebSDK projects","State":"open","Body":"### Description\n\nTrimming now trims all assemblies in applications targeting the Web SDK, by default. This change only affects apps that are published with PublishTrimmed=true, and it only breaks apps that had existing trim warnings. \n\n### Version\n\n.NET 8 Preview 7\n\n### Previous behavior\n\nPreviously, `TrimMode=partial` was set by default for all projects that targeted the WebSDK. \n\n### New behavior\n\nStarting in .NET 8 Preview 7, trimming trims all the assemblies in the app by default. Apps that may have previously worked with `PublishTrimmed=true` and `TrimMode=partial` may not work in .NET 8 Preview 7. However, only apps with trim warnings will be affected. If your app has no trim warnings, the change in behavior should not cause any adverse effect.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThis change helps to decrease app size without users having to explicitly opt in and aligns with user expectations that the entire app is trimmed unless noted otherwise.\n\n### Recommended action\n\nThe best resolution is to resolve all the trim warnings in your application. For information about resolving the warnings in your own libraries, see [Introduction to trim warnings](https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/fixing-warnings).\r\n\r\nTo revert to the previous behavior, set the TrimMode property to partial.\r\n\r\n```xml\r\n<TrimMode>partial</TrimMode>\r\n```\n\n### Affected APIs\n\nNone.","Url":"https://github.com/aspnet/Announcements/issues/507","RelatedDescription":"Open issue \"[Breaking change]: TrimMode defaults to `full` for WebSDK projects\" (#507)"},{"Id":"1693295179","IsPullRequest":false,"CreatedAt":"2023-05-03T01:44:40","Actor":"JamesNK","Number":"506","RawContent":null,"Title":"[Breaking change]: ASP.NET Core rate limiting middleware now requires AddRateLimiter","State":"open","Body":"### Description\r\n\r\n[ASP.NET Core rate limiting middleware](https://learn.microsoft.com/aspnet/core/performance/rate-limit) is being updated in .NET 8 with extra functionality. The middleware now requires services registered with `AddRateLimiter`.\r\n\r\n### Version\r\n\r\n.NET 8 Preview 5\r\n\r\n### Previous behavior\r\n\r\nPreviously, rate limiting could be used without `AddRateLimiter`. For example, the middleware could be configured by calling `Configure<RateLimiterOptions>(o => { })`:\r\n\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.Configure<RateLimiterOptions>(o => o\r\n    .AddFixedWindowLimiter(policyName: \"fixed\", options =>\r\n    {\r\n        // configuration\r\n    }));\r\n\r\nvar app = builder.Build();\r\napp.UseRateLimiter();\r\napp.MapGet(\"/\", () => Results.Ok($\"Hello world\")).RequireRateLimiting(\"fixed\");\r\napp.Run();\r\n```\r\n\r\n### New behavior\r\n\r\nIf `AddRateLimiter` is not called on app startup, then ASP.NET Core will throw an informative error:\r\n\r\n> Unable to find the required services. Please add all the required services by calling 'IServiceCollection.AddRateLimiter' in the application startup code.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nRate limiting middleware requires services that are only registered by calling `AddRateLimiter`.\r\n\r\n### Recommended action\r\n\r\nEnsure `AddRateLimiter()` is called at application startup.\r\n\r\nFor example, update `Configure<RateLimiterOptions>(o => { })` to use `AddRateLimiter()`:\r\n\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddRateLimiter(o => o\r\n    .AddFixedWindowLimiter(policyName: \"fixed\", options =>\r\n    {\r\n        // configuration\r\n    }));\r\n\r\nvar app = builder.Build();\r\napp.UseRateLimiter();\r\napp.MapGet(\"/\", () => Results.Ok($\"Hello world\")).RequireRateLimiting(\"fixed\");\r\napp.Run();\r\n```\r\n\r\n### Affected APIs\r\n\r\n[UseRateLimiter()](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.builder.ratelimiterapplicationbuilderextensions.useratelimiter)","Url":"https://github.com/aspnet/Announcements/issues/506","RelatedDescription":"Open issue \"[Breaking change]: ASP.NET Core rate limiting middleware now requires AddRateLimiter\" (#506)"},{"Id":"1685250868","IsPullRequest":false,"CreatedAt":"2023-04-26T15:26:43","Actor":"Tratcher","Number":"505","RawContent":null,"Title":"[Breaking change]: ISystemClock obsolete and replaced by TimeProvider","State":"open","Body":"### Description\n\n`Microsoft.AspNetCore.Authentication.ISystemClock` has been used by the authentication and identity components since AspNetCore 1.0 to enable unit testing of time related functionality like expiration checking. .NET 8 now includes a suitable abstraction `System.TimeProvider` that provides the same functionality and much more. We're taking this opportunity to obsolete `ISystemClock` and replace it with `TimeProvider` throughout AspNetCore.\r\n\r\nSee https://github.com/dotnet/aspnetcore/pull/47717 for additional details.\n\n### Version\n\n.NET 8 Preview 5\n\n### Previous behavior\n\nISystemClock was injected into the constructors by Dependency Injection and could be overridden for testing.\r\n\r\nNote the default `SystemClock` implementation would truncate to the nearest second for easier formatting. \n\n### New behavior\n\nISystemClock remains in the Dependency Injection container but is no longer used. It may be removed from the container in a future version.\r\n\r\nTimeProvider is now a settable property on the Options classes for these types. It can be set directly or by registering a provider in the Dependency Injection container.\r\n\r\n`TimeProvider` does not truncate to the nearest second, consumers are expected to correctly format the time as needed.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nUnifying the time abstraction across the stack for easier testing.\n\n### Recommended action\n\nComponents that derive from `Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>` or `Microsoft.AspNetCore.Identity.SecurityStampValidator<TUser>` should remove their `ISystemClock` constructor parameter and call the new base constructor accordingly. Similarly, derived implementations that reference the `Clock` property on these types should reference the new `TimeProvider` property instead. `TimeProvider` is now settable for testing on the options or via DI.\r\n\r\n```diff\r\n-    public BasicAuthenticationHandler(IOptionsMonitor<AuthenticationSchemeOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock)\r\n-        : base(options, logger, encoder, clock)\r\n+    public BasicAuthenticationHandler(IOptionsMonitor<AuthenticationSchemeOptions> options, ILoggerFactory logger, UrlEncoder encoder)\r\n+        : base(options, logger, encoder)\r\n```\r\n\r\n```diff\r\n-       var currentUtc = Clock.UtcNow;\r\n+       var currentUtc = TimeProvider.GetUtcNow();\r\n```\n\n### Affected APIs\n\n- [`ISystemClock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.isystemclock)\r\n- [`SystemClock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.systemclock)\r\n- [`AuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.authenticationhandler-1)\r\n- [`AuthenticationHandler<TOptions>.Clock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.authenticationhandler-1.clock)\r\n- [`CookieAuthenticationHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.cookies.cookieauthenticationhandler)\r\n- [`FacebookHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.facebook.facebookhandler)\r\n- [`GoogleHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.google.googlehandler)\r\n- [`JwtBearerHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.jwtbearer.jwtbearerhandler)\r\n- [`MicrosoftAccountHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.microsoftaccount.microsoftaccounthandler)\r\n- [`NegotiateHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.negotiate.negotiatehandler)\r\n- [`OAuthHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.oauth.oauthhandler-1)\r\n- [`OpenIdConnectHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.openidconnect.openidconnecthandler)\r\n- [`PolicySchemeHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.policyschemehandler)\r\n- [`RemoteAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.remoteauthenticationhandler-1)\r\n- [`SignInAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.signinauthenticationhandler-1)\r\n- [`SignOutAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.signoutauthenticationhandler-1)\r\n- [`TwitterHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.twitter.twitterhandler)\r\n- [`WsFederationHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.wsfederation.wsfederationhandler)\r\n- [`SecurityStampValidator<TUser>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.identity.securitystampvalidator-1)\r\n- [`TwoFactorSecurityStampValidator<TUser>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.identity.twofactorsecuritystampvalidator-1)","Url":"https://github.com/aspnet/Announcements/issues/505","RelatedDescription":"Open issue \"[Breaking change]: ISystemClock obsolete and replaced by TimeProvider\" (#505)"},{"Id":"1661290568","IsPullRequest":false,"CreatedAt":"2023-04-10T20:06:20","Actor":"captainsafia","Number":"504","RawContent":null,"Title":"[Breaking change]: `ValidationProblemDetails` and `ProblemDetails` no longer use custom converters","State":"open","Body":"### Description\n\nPrior to .NET 8 Preview 2, `ValidationProblemDetails` and `ProblemDetails` type used custom converters to support JSON serialization due to a lack of support for the `IgnoreNullValues` option. Now that this option is supported by the S.T.J APIs, we've removed the custom converters in the framework in favor of the serialization provided by the framework.\r\n\r\nAs a result of this, the properties in the `ValidationProblemDetails` and `ProblemDetails` types no longer indiscriminately assume lowercase type names. Developers must specific a `JsonNamingPolicy` to get the correct behavior.\n\n### Version\n\n.NET 8 Preview 2\n\n### Previous behavior\n\n```csharp\r\nstring content = \"{\\\"status\\\":400,\\\"detail\\\":\\\"HTTP egress is not enabled.\\\"}\";\r\nusing MemoryStream stream = new();\r\nusing StreamWriter writer = new(stream);\r\nwriter.Write(content);\r\nwriter.Flush();\r\nstream.Position = 0;\r\n\r\nJsonSerializerOptions options = new();\r\noptions.Converters.Add(new JsonStringEnumConverter());\r\n\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\nConsole.WriteLine(details.Status); // 400\r\n```\n\n### New behavior\n\n```csharp\r\nstring content = \"{\\\"status\\\":400,\\\"detail\\\":\\\"HTTP egress is not enabled.\\\"}\";\r\nusing MemoryStream stream = new();\r\nusing StreamWriter writer = new(stream);\r\nwriter.Write(content);\r\nwriter.Flush();\r\nstream.Position = 0;\r\n\r\nJsonSerializerOptions options = new();\r\noptions.Converters.Add(new JsonStringEnumConverter());\r\n\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\nConsole.WriteLine(details.Status); // null\r\n```\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nNow that `IgnoreNullValues` is supported by the S.T.J APIs, we've removed the custom converters in the framework in favor of the serialization provided by the framework.\n\n### Recommended action\n\nProvide a JSON serializer options with the correct details.\r\n\r\n```csharp\r\nJsonSerializerOptions options = new()\r\n{\r\n   PropertyNameCaseInsensitive = true\r\n};\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\n```\n\n### Affected APIs\n\n- [`ValidationProblemDetails`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.validationproblemdetails)\r\n- [`ProblemDetails`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.problemdetails)","Url":"https://github.com/aspnet/Announcements/issues/504","RelatedDescription":"Open issue \"[Breaking change]: `ValidationProblemDetails` and `ProblemDetails` no longer use custom converters\" (#504)"},{"Id":"1657753067","IsPullRequest":true,"CreatedAt":"2023-04-06T22:49:51","Actor":"gewarren","Number":"503","RawContent":null,"Title":"Add more version choices to BC template","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/503","RelatedDescription":"Closed or merged PR \"Add more version choices to BC template\" (#503)"},{"Id":"1656483670","IsPullRequest":false,"CreatedAt":"2023-04-06T00:15:27","Actor":"mitchdenny","Number":"502","RawContent":null,"Title":"[Breaking change]: Obsolete ConcurrencyLimiterMiddleware","State":"open","Body":"### Description\r\n\r\nIn .NET 8.0 the ASP.NET Core team is deprecating the ConcurrencyLimiterMiddleware and associated methods and types (e.g. UseConcurrencyLimiter(...)). This package will be removed in .NET 9.0.\r\n\r\nDevelopers requiring rate limiting capabilties should switch to the newer and more capable rate limiting middleware that was introduced in .NET 7.0 (e.g. UseRateLimiter(...)). The .NET 7.0 rate limiting API includes a concurrency limiter along with several other rate limiting algorithms that you can apply to your application.\r\n\r\nFor more information on rate limiting in ASP.NET Core see:\r\nhttps://learn.microsoft.com/aspnet/core/performance/rate-limit\r\n\r\n### Version\r\n\r\n.NET 8 Preview 4\r\n\r\n### Previous behavior\r\n\r\nDevelopers using the `ConcurrencyLimiterMiddleware` could control concurrency by adding a policy to DI and enabling the middleware:\r\n\r\n```csharp\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddStackPolicy<options => {\r\n    options.MaxConcurrentRequests = 2;\r\n    options.RequestQueueLimit = 25;\r\n    });\r\n\r\nvar app = builder.Build();\r\napp.UseConcurrencyLimiter();\r\n// Map endpoints.\r\napp.Run();\r\n```\r\n\r\n### New behavior\r\n\r\nHere is some example usage using the new API:\r\n\r\n```csharp\r\nusing Microsoft.AspNetCore.RateLimiting;\r\nusing System.Threading.RateLimiting;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\n\r\napp.UseRateLimiter(new RateLimiterOptions()\r\n    .AddConcurrencyLimiter(\"only-one-at-a-time-stacked\", (options) =>\r\n    {\r\n        options.PermitLimit = 2;\r\n        options.QueueLimit = 25;\r\n        options.QueueProcessingOrder = QueueProcessingOrder.NewestFirst;\r\n    }));\r\n\r\napp.MapGet(\"/\", async () =>\r\n{\r\n    await Task.Delay(10000);\r\n    return \"Hello World\";\r\n}).RequireRateLimiting(\"only-one-at-a-time-stacked\");\r\n\r\napp.Run();\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nThe older `ConcurrencyLimiterMiddleware` is infrequently used and undocumented. The newer rate limiting API has more extensive functionality.\r\n\r\n### Recommended action\r\n\r\nIf you are using the older `ConcurrencyLimiterMiddleware` we recommend moving to the newer rate limiting middleware.\r\n\r\n### Affected APIs\r\n\r\nThe following APIs are impacted:\r\n\r\n* `ConcurrencyLimiterExtensions.UseConcurrencyLimiter(...)`\r\n* `ConcurrencyLimiterMiddleware`\r\n* `ConcurrencyLimiterOptions`","Url":"https://github.com/aspnet/Announcements/issues/502","RelatedDescription":"Open issue \"[Breaking change]: Obsolete ConcurrencyLimiterMiddleware\" (#502)"},{"Id":"1602073485","IsPullRequest":false,"CreatedAt":"2023-03-07T16:47:58","Actor":"dnfadmin","Number":"501","RawContent":null,"Title":"Moving to the new .NET Foundation CLA service","State":"closed","Body":"\r\nHello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team\r\n\r\n","Url":"https://github.com/aspnet/Announcements/issues/501","RelatedDescription":"Closed issue \"Moving to the new .NET Foundation CLA service\" (#501)"},{"Id":"1575203037","IsPullRequest":true,"CreatedAt":"2023-02-08T00:08:59","Actor":"brunolins16","Number":"500","RawContent":null,"Title":"Fixing announcement template","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/500","RelatedDescription":"Closed or merged PR \"Fixing announcement template\" (#500)"},{"Id":"1375214843","IsPullRequest":false,"CreatedAt":"2023-02-03T03:50:56","Actor":"halter73","Number":"493","RawContent":null,"Title":"[Breaking change]: ApiExplorer and OpenAPI metadata is generated for RequestDelegate endpoints in RC1 *only*","State":"closed","Body":"### Description\r\n\r\nIn .NET 6, ASP.NET Core added support for `Delegate` [route handlers](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0#route-handlers) in addition to conventional `RequestDelegate` endpoints which have existed since ASP.NET Core 3.0.\r\n\r\nIn .NET 7 RC 1, we started automatically generating more API metadata for the older `RequestDelegate` endpoints to align the behavior of these two kinds of endpoints. **In .NET 7 RC 2, we plan to revert this breaking change** which will cause no API metadata to inferred for `RequestDelegate` endpoints again.\r\n\r\n### Version\r\n\r\n.NET 7 RC1\r\n\r\n### Previous behavior\r\n\r\nBefore .NET 7 RC1, conventional `RequestDelegate` endpoints did not get added to the [ApiExplorer](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.apiexplorer?view=aspnetcore-6.0) model or the `OpenApiOperation` generated by [WithOpenApi()](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.openapiendpointconventionbuilderextensions.withopenapi?view=aspnetcore-7.0).\r\n\r\n### New behavior\r\n\r\nIn .NET RC 1 and RC 1 only **(this is being reverted in RC 2)**, the `RequestDelegate`'s `MethodInfo` is added to the [EndpointMetadataCollection](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.endpointmetadatacollection?view=aspnetcore-6.0) just like with `Delegate` route handlers causing ApiExplorer and WithOpenApi() to generate endpoint metadata for endpoints that previously were not part of the model.\r\n\r\nThis can impact third party libraries like [Swashbuckle](https://github.com/domaindrivendev/Swashbuckle.AspNetCore) and [NSwag](https://github.com/RicoSuter/NSwag).\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/44005 for more context. \r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nWe were [hoping ](https://github.com/dotnet/aspnetcore/pull/42827/files/cbff9e89b459111ea104ec71c2d3bf9cee6c9e5f#r925142793) that aligning the behavior of `RequestDelegate` and `Delegate` backed endpoints would reduce confusion. We've decided to walk this back though.\r\n\r\n### Recommended action\r\n\r\nYou can add a custom convention that removes the `MethodInfo` from the endpoint metadata or wait for RC 2 to revert this behavior. You can use a group to make it apply to multiple endpoints.\r\n\r\n```csharp\r\nvar noMetadataGroup = app.MapGroup(\"\");\r\nIEndpointConventionBuilder groupConventionBuilder = noMetadataGroup;\r\n\r\ngroupConventionBuilder.Add(endpointBuilder =>\r\n{\r\n    if (endpointBuilder.Metadata.FirstOrDefault(m => m is MethodInfo) is MethodInfo method)\r\n    {\r\n        endpointBuilder.Metadata.Remove(method);\r\n    }\r\n});\r\n\r\nnoMetadataGroup.MapGet(\"/\", (context) => context.Response.WriteAsync(\"RequestDelegate endpoint.\"));\r\n```\r\n\r\n### Affected APIs\r\n\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(IEndpointRouteBuilder, RoutePattern, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapGet(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPost(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapDelete(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPut(IEndpointRouteBuilder, String, RequestDelegate)`\r\n- `Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapMethods(IEndpointRouteBuilder, String, IEnumerable<String>, RequestDelegate)`","Url":"https://github.com/aspnet/Announcements/issues/493","RelatedDescription":"Closed issue \"[Breaking change]: ApiExplorer and OpenAPI metadata is generated for RequestDelegate endpoints in RC1 *only*\" (#493)"},{"Id":"1497212375","IsPullRequest":true,"CreatedAt":"2022-12-14T19:04:06","Actor":"gewarren","Number":"499","RawContent":null,"Title":"Update incompatibility types in BC template","State":"closed","Body":"I updated the breaking change template to match dotnet/docs. Feel free to close if you don't like these definitions, however.","Url":"https://github.com/aspnet/Announcements/pull/499","RelatedDescription":"Closed or merged PR \"Update incompatibility types in BC template\" (#499)"},{"Id":"1455922247","IsPullRequest":false,"CreatedAt":"2022-11-18T22:38:34","Actor":"halter73","Number":"498","RawContent":null,"Title":"[Breaking change]: `WebApplicationBuilder` gives `ASPNET_`-prefixed environment variables lower precedence","State":"open","Body":"### Description\n\nStarting in .NET 7 preview 3, when using `WebApplicationBuilder` but not any other host (e.g. `ConfigureWebHostDefaults` or `WebHost.CreateDefaultBuilder`), command-line arguments and `DOTNET_`-prefixed environment variables override `ASPNET_`-prefixed environment variables when reading from [default host configuration sources](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#default-host-configuration-sources) which are used to read [host variables](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#host-variables) like the content root path and environment name when the `WebApplicationBuilder` is constructed and serves as a base for [application configuration](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#application-configuration-providers).\r\n\r\n`ASPNET_`-prefixed environment variables now has the lowest precedence of all of `WebApplicationBuilder`'s [default host configuration sources](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#default-host-configuration-sources).\r\n\r\nSee https://github.com/dotnet/AspNetCore.Docs/issues/25626#issuecomment-1098616664 for more context.\n\n### Version\n\n.NET 7 Preview 3\n\n### Previous behavior\n\n`ASPNET_`-prefixed environment variables overrode command-line arguments and `DOTNET_`-prefixed environment variables.\n\n### New behavior\n\nCommand-line arguments and `DOTNET_`-prefixed environment variables override `ASPNET_`-prefixed environment variables\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nTo prevent environment variables from overriding explicit command-line arguments when reading host variables which is more consistent with application configuration which has always given command-line arguments the highest precedence.\n\n### Recommended action\n\nIf you were using `ASPNETCORE_`-prefixed environment variables to override command-line arguments or `DOTNET_-`prefixed environment variables, use something with a higher priority. This could mean using custom [WebApplicationOptions](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationoptions?view=aspnetcore-7.0) which overrides all default hosting configuration sources.\n\n### Affected APIs\n\n`Microsoft.AspNetCore.Builder.WebApplicationBuilder`","Url":"https://github.com/aspnet/Announcements/issues/498","RelatedDescription":"Open issue \"[Breaking change]: `WebApplicationBuilder` gives `ASPNET_`-prefixed environment variables lower precedence\" (#498)"},{"Id":"1414759756","IsPullRequest":false,"CreatedAt":"2022-10-19T11:01:00","Actor":"javiercn","Number":"497","RawContent":null,"Title":"[Breaking change]: Updates to Authentication in webassembly applications","State":"open","Body":"### Description\n\nWe updated our support for authentication in Blazor Webassembly applications to rely on the history state instead of query strings in the URL. As a result of that, existing applications passing the return URL through the query string will fail to redirect back to the original page after a successful login.\r\n\r\nExisting applications should use the new `NavigateToLogin` extension method as it is able to flow the data to the login page corectly.\n\n### Version\n\n.NET 7 RC 1\n\n### Previous behavior\n\nThe return URL would be specified in the query string as `?returnUrl=<<return-url>>`.\n\n### New behavior\n\nThe return URL along other parameters passed to the `authentication/login` page are passed via the `history.state` entry of the page.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nWe decided to switch to using `history.state` instead of the query string as it simplifies the implementation and removes the surface attack area associated with passing data through the query string.\n\n### Recommended action\n\nMost apps have a RedirectToLogin.razor file in them that can be updated as follows:\r\n\r\n```razor\r\n@inject NavigationManager Navigation\r\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\r\n@using Microsoft.Extensions.Options\r\n\r\n@inject IOptionsSnapshot<RemoteAuthenticationOptions<ApiAuthorizationProviderOptions>> Options\r\n@code {\r\n\r\n    protected override void OnInitialized()\r\n    {\r\n        Navigation.NavigateToLogin(Options.Get(Microsoft.Extensions.Options.Options.DefaultName).AuthenticationPaths.LogInPath);\r\n    }\r\n}\r\n```\n\n### Affected APIs\n\nAs part of this change `SignOutSessionStateManager` has been obsoleted in favor of `NavigationManager.NavigateToLogout`","Url":"https://github.com/aspnet/Announcements/issues/497","RelatedDescription":"Open issue \"[Breaking change]: Updates to Authentication in webassembly applications\" (#497)"},{"Id":"1400322849","IsPullRequest":false,"CreatedAt":"2022-10-06T21:30:20","Actor":"halter73","Number":"496","RawContent":null,"Title":"[Breaking change]: IEndpointMetadataProvider and IEndpointParameterMetadataProvider interface changes in 7.0 RC2","State":"open","Body":"### Description\n\nIn ASP.NET Core 7 RC2, the `IEndpointMetadataProvider` and `IEndpointParameterMetadataProvider` interfaces [introduced in  preview 4](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-4/#self-describing-minimal-apis-with-iendpointmetadataprovider-and-iendpointparametermetadataprovider) have been updated to take an [EndpointBuilder](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.endpointbuilder?view=aspnetcore-7.0) rather than a `EndpointMetadataContext` or `EndpointParameterMetadataContext`.\r\n\r\n\n\n### Version\n\n.NET 7 RC 2\n\n### Previous behavior\n\nThe `PopulateMetadata` methods on both interfaces took their respective context arguments as a single parameter. Both contexts included services (`IServiceProvider`) and endpoint metadata (`IList<object>`).\r\n\r\n`EndpointMetadataContext` included the `MethodInfo` for the minimal route handler MVC action that took the implementing type as a parameter or returned it. `EndpointParameterMetadataContext` provided `ParameterInfo` and could only be used on parameter types.\n\n### New behavior\n\nNow in RC2, both interfaces' `PopulateMetadata` method take an `EndpointBuilder` as their second parameter. The `EndpointBuilder` provides access to the application services (`IServiceProvider`) and endpoint metadata (`IList<object>`) previously provided by `EndpointMetadataContext` and `EndpointParameterMetadataContext`.\r\n\r\nNow, `IEndpointMetadataProvider` takes a `MethodInfo` and `IEndpointParameterMetadataProvider` takes a `ParameterInfo` as their first parameter.\r\n\r\nBoth `EndpointMetadataContext` and `EndpointParameterMetadataContext` have been removed.\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/43125#issuecomment-1218534849 for an API diff.\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [ ] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThe metadata providers now get access to more metadata like the `RoutePattern` (with a downcast) and `DisplayName` via the `EndpointBuilder`, and this allowed us to delete unnecessary context types.\n\n### Recommended action\n\nUpdate implementations of `IEndpointMetadataProvider` and `IEndpointParameterMetadataProvider` to access the information necessary from the new parameters. There should be nothing that was available via the contexts previously that are unavailable via `PopulateMetadata`'s new parameters.\n\n### Affected APIs\n\n- Parameters changed: `Microsoft.AspNetCore.Http.Metadata.IEndpointMetadataProvider.PopulateMetadata`\r\n- Parameters changed: `Microsoft.AspNetCore.Http.Metadata.IEndpointParameterMetadataProvider.PopulateMetadata`\r\n- Removed: `Microsoft.AspNetCore.Http.Metadata.EndpointMetadataContext`\r\n- Removed: `Microsoft.AspNetCore.Http.Metadata.EndpointParameterMetadataContext`","Url":"https://github.com/aspnet/Announcements/issues/496","RelatedDescription":"Open issue \"[Breaking change]: IEndpointMetadataProvider and IEndpointParameterMetadataProvider interface changes in 7.0 RC2\" (#496)"},{"Id":"1396674543","IsPullRequest":false,"CreatedAt":"2022-10-04T18:23:29","Actor":"MackinnonBuck","Number":"495","RawContent":null,"Title":"[Breaking change]: Endpoints configured with 'MapFallbackToFile()' now only match 'HEAD' and 'GET' requests","State":"open","Body":"### Description\n\nThe `ConsumesAttribute` attribute allows controller actions to specify their supported content types. Starting in .NET 6, if a fallback file endpoint was configured, it could match routes that were discarded due to the request having a different content type than what was specified in an action's `ConsumesAttribute`. This was an undesirable change in behavior from .NET 5 that we are partially addressing in .NET 7 by making fallback file endpoints only match `GET` and `HEAD` requests.\n\n### Version\n\n.NET 7 RC2\n\n### Previous behavior\n\nEndpoints configured with `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()` may match requests made with any request method.\n\n### New behavior\n\nEndpoints configured with `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()` will only match `HEAD` and `GET` requests.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis partially reverts larger breaking change accidentally introduced in .NET 6. Since it's highly unusual to expect a fallback file response when making a request with a method other than `HEAD` or `GET`, we anticipate the impact of this breaking change to be minimal.\n\n### Recommended action\n\nIf you want fallback file endpoints to match requests with methods other than `HEAD` or `GET`, you can specify additional HTTP request methods using `WithMetadata()`. For example:\r\n\r\n```csharp\r\nendpoints.MapFallbackToFile(\"index.html\")\r\n    .WithMetadata(new HttpMethodMetadata(new[] { /* List supported methods here */ }));\r\n```\n\n### Affected APIs\n\nAll overloads of `StaticFilesEndpointRouteBuilderExtensions.MapFallbackToFile()`.","Url":"https://github.com/aspnet/Announcements/issues/495","RelatedDescription":"Open issue \"[Breaking change]: Endpoints configured with 'MapFallbackToFile()' now only match 'HEAD' and 'GET' requests\" (#495)"},{"Id":"1376539134","IsPullRequest":false,"CreatedAt":"2022-09-16T22:09:33","Actor":"brunolins16","Number":"494","RawContent":null,"Title":"[Breaking change]:  Using the System.Text.Json source generator with ASP. NET Core throws NotSupportedException in RC1 *only*","State":"open","Body":"### Description\r\n\r\nIn _**.NET 7 RC1**_, we started requiring that the type `object` to be explicitly specified with a `[JsonSerializable]` attribute applied to your Json Serializer context class in Minimal APIs applications using `System.Text.Json` source generation. _**This was an unexpected behavioral change that we will be fixed in RC2**_.\r\n\r\n### Version\r\n\r\n.NET 7 RC1\r\n\r\n### Previous behavior\r\n\r\nBefore **.NET 7 RC1**, if you are using `System.Text.Json` source generation with `ASP.NET Core Minimal APIs` your endpoint's response will be serialized (`JSON` format) correctly when you have your custom types declared in the `JsonSerializerContext`.\r\n\r\nThe following code shows an example using `System.Text.Json` source generation with `ASP.NET Core Minimal APIs` :\r\n\r\n``` c#\r\nusing System.Text.Json.Serialization;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.ConfigureHttpJsonOptions(o => o.SerializerOptions.AddContext<JsonContext>());\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\"/\", () =>\r\n{\r\n    var l = new List<MyClass> { new(), new() };\r\n    return Results.Ok(l);\r\n});\r\n\r\napp.Run();\r\n\r\n[JsonSerializable(typeof(List<MyClass>))]\r\npublic partial class JsonContext : JsonSerializerContext\r\n{}\r\n\r\npublic class MyClass\r\n{\r\n    public int MyProp { get; set; }\r\n}\r\n```\r\n\r\n### New behavior\r\n\r\nIn .NET RC 1 and **RC 1 only** (**_this is being fixed in RC 2_**) the same sample application will throw a `NotSupportedException`.\r\n\r\n```\r\nNotSupportedException: Metadata for type 'System.Object' was not provided by TypeInfoResolver of type 'JsonContext'. \r\nIf using source generation, ensure that all root types passed to the serializer have been indicated with 'JsonSerializableAttribute',\r\nalong with any types that might be serialized polymorphically.\r\n\r\nSystem.Text.Json.ThrowHelper.ThrowNotSupportedException_NoMetadataForType(Type type, IJsonTypeInfoResolver resolver)\r\n```\r\n\r\nSee https://github.com/dotnet/aspnetcore/issues/43894 for more context.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis is an unexpected side effect cause by a combination of multiple changes, listed below, detected only after **.NET 7 RC1** release. \r\n\r\n**.NET Runtime**\r\n1. https://github.com/dotnet/docs/issues/30758\r\n2. https://github.com/dotnet/docs/issues/30755\r\n\r\n**ASP.NET CORE**\r\n1. https://github.com/dotnet/aspnetcore/issues/39856\r\n2. https://github.com/dotnet/aspnetcore/issues/41724#issuecomment-1142735823\r\n\r\nThe root cause was already identified, and a fix will be available in **.NET 7 RC2**.\r\n\r\n### Recommended action\r\n\r\nYou can add the `[JsonSerializable(typeof(object))]` to your [JsonSerializerContext](https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-source-generation?pivots=dotnet-7-0) or wait for RC 2 when this unexpected behavior will be fixed.\r\n\r\n``` c#\r\n[JsonSerializable(typeof(List<MyClass>))]\r\n[JsonSerializable(typeof(object))]\r\npublic partial class JsonContext : JsonSerializerContext\r\n{}\r\n```\r\n\r\n\r\n### Affected APIs\r\n\r\n- Minimal APIs\r\n- Controllers (using [Microsoft.AspNetCore.Http.HttpResults](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.httpresults?view=aspnetcore-7.0))","Url":"https://github.com/aspnet/Announcements/issues/494","RelatedDescription":"Open issue \"[Breaking change]:  Using the System.Text.Json source generator with ASP. NET Core throws NotSupportedException in RC1 *only*\" (#494)"},{"Id":"1371807646","IsPullRequest":false,"CreatedAt":"2022-09-13T17:51:25","Actor":"sebastienros","Number":"492","RawContent":null,"Title":"[Breaking change]: Output Caching renames in 7.0 RC2","State":"open","Body":"### Description\n\nFrom 7.0 RC1 to 7.0 RC2 some APIs have changed to better represent their intent.\r\n\r\nhttps://github.com/dotnet/aspnetcore/pull/43892\r\n\n\n### Version\n\n.NET 7 RC2\n\n### Previous behavior\n\n- `OutputCachePolicyBuilder.VaryByQuery()` was additive: every call would add more query string keys to vary by.\n\n### New behavior\n\n- `OutputCachePolicyBuilder.SetVaryByQuery()` is replacing existing query string keys.\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [ ] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis change was made to improve the consistency of method names and to remove ambiguity in their behavior.\n\n### Recommended action\n\nIt is recommended you recompile any projects built with an earlier SDK. If any of these method names were referenced directly, the source should be updated to reflect the new names.\n\n### Affected APIs\n\n- Removed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.OutputCachePolicyBuilder()` \r\n- Removed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.Clear()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.AllowLocking()` to `SetLocking()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByRouteValue()` to `SetVaryByRouteValue()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByQuery()` to `SetVaryByQuery()` \r\n- Renamed: `Microsoft.AspNetCore.OutputCaching.OutputCachePolicyBuilder.VaryByHeader()` to `SetVaryByHeader()` \r\n- Added: `Microsoft.AspNetCore.OutputCaching.CacheVaryByRules.VaryByHost`\r\n- Added: `Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddPolicy(string name, Action<OutputCachePolicyBuilder> build, bool excludeDefaultPolicy)`\r\n- Added: `Microsoft.AspNetCore.OutputCaching.OutputCacheOptions.AddBasePolicy(Action<OutputCachePolicyBuilder> build, bool excludeDefaultPolicy)`\r\n- Added: `Microsoft.Extensions.DependencyInjection.OutputCacheConventionBuilderExtensions.CacheOutput<TBuilder>(this TBuilder builder, Action<OutputCachePolicyBuilder> policy, bool excludeDefaultPolicy)`\r\n","Url":"https://github.com/aspnet/Announcements/issues/492","RelatedDescription":"Open issue \"[Breaking change]: Output Caching renames in 7.0 RC2\" (#492)"},{"Id":"1342406148","IsPullRequest":false,"CreatedAt":"2022-08-18T00:16:25","Actor":"Tratcher","Number":"491","RawContent":null,"Title":"[Breaking change]: AuthenticateAsync for remote authentication providers no longer fails if anonymous","State":"open","Body":"### Description\n\nRE: https://github.com/dotnet/aspnetcore/issues/43042, https://github.com/dotnet/aspnetcore/pull/43212\r\n\r\nRemote authentication providers like OpenIdConnect, WsFederation, and OAuth have been updated to avoid unnecessary errors when there is no user information available on the request.\n\n### Version\n\n.NET 7 RC1\n\n### Previous behavior\n\nWhen AuthenticateAsync was called on a remote authentication provider and there was no current user, this call would fail with a message like `OpenIdConnect was not authenticated. Failure message: Not authenticated`. \n\n### New behavior\n\nAuthenticateAsync will now return `AuthenticateResult.NoResult()`, an anonymous identity. \n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\n- This was inconsistent with Cookie and Negotiate authentication which will return `AuthenticateResult.NoResult()`.\r\n- It causes excess failure logs, especially if the remote authentication handler is set as the default handler and invoked per request.\n\n### Recommended action\n\nCode that directly invokes AuthenticateAsync should be checked to ensure it properly handles `AuthenticateResult.NoResult()` and anonymous/empty ClaimsIdentity's.\n\n### Affected APIs\n\nHttpContext.[AuthenticateAsync](https://github.com/dotnet/aspnetcore/blob/a450cb69b5e4549f5515cdb057a68771f56cefd7/src/Http/Authentication.Abstractions/src/AuthenticationHttpContextExtensions.cs#L22)","Url":"https://github.com/aspnet/Announcements/issues/491","RelatedDescription":"Open issue \"[Breaking change]: AuthenticateAsync for remote authentication providers no longer fails if anonymous\" (#491)"},{"Id":"1288995849","IsPullRequest":true,"CreatedAt":"2022-08-01T20:01:05","Actor":"msftbot[bot]","Number":"489","RawContent":null,"Title":"Migrate FabricBot Tasks to Config-as-Code","State":"closed","Body":"**TL;DR;** Requesting to add [FabricBot](https://eng.ms/docs/products/1es-data-insights/merlinbot/extensions/fabricbot_overview) configuration associated with your repository to `.github/fabricbot.json`.\r\n\r\n**Context**\r\n\r\nFabricBot is now a [config-as-code-only](https://eng.ms/docs/products/1es-data-insights/merlinbot/extensions/bot-config-as-code) platform. As a result, while you can still use the [FabricBot Configuration Portal](https://portal.fabricbot.ms/bot/?repo=aspnet/Announcements) to modify your FabricBot configuration, you can no longer save the changes. The only way to save changes to your configuration at the moment is to _export configuration_ from the portal and upload the exported configuration to `.github/fabricbot.json` in your repository. In this pull request, we are adding your FabricBot configuration to your repository at `.github/fabricbot.json` so that you can make changes to it going forward.\r\n\r\nWhile the [FabricBot Configuration Portal](https://portal.fabricbot.ms/bot/?repo=aspnet/Announcements) is the *only way* to modify your FabricBot configuration at the moment, we have a feature on our backlog to publish the JSON schema defining the structure of the FabricBot configuration file. With the JSON schema, you can (1) use a plaintext editor of your choice to modify the FabricBot configuration file and use the schema to validate the file after editing or (2) [configure](https://code.visualstudio.com/Docs/languages/json#_json-schemas-and-settings) VS Code to use the schema when editing FabricBot configuration file to take advantage of convenience features such as automatic code completion and field description on mouseover.\r\n\r\n[*Pull Request Create*](https://eng.ms/docs/products/1es-data-insights/merlinbot/extensions/prcreate), a [MerlinBot](https://https://eng.ms/docs/products/1es-data-insights/merlinbot) Extension, was used to automatically create this pull request. If you have any questions or concerns with this pull request, please contact [MerlinBot Expert DRI](mailto:merlinbotdri@microsoft.com).\r\n","Url":"https://github.com/aspnet/Announcements/pull/489","RelatedDescription":"Closed or merged PR \"Migrate FabricBot Tasks to Config-as-Code\" (#489)"},{"Id":"1311264480","IsPullRequest":false,"CreatedAt":"2022-07-20T14:46:50","Actor":"captainsafia","Number":"490","RawContent":null,"Title":"[Breaking change]: Changes in default authentication scheme handling for ASP.NET Core","State":"open","Body":"### Description\r\n\r\n\r\nStarting in .NET 7 Preview 7, we introduced new behavior in the authentication area in ASP.NET Core.\r\n\r\nPreviously, users were always required to set the default authentication scheme that would be used by authentication and authorization handlers, like so:\r\n```\r\nbuilder.Services.AddAuthentication(\"MyDefaultScheme\");\r\n```\r\nMoving forward, when (and only when) a single authentication scheme is registered, that scheme will be treated as the default scheme. For example, \"foobar\" will be treated as the default scheme in the code below.\r\n```\r\nbuilder.Services.AddAuthentication().AddOAuth(\"foobar\");\r\n```\r\nThis change might expose unintended behavior changes in applications, such as authentication options being validated earlier than expected.\r\n\r\n### Version\r\n\r\n.NET 7 Preview 7\r\n\r\n### Previous behavior\r\n\r\nPreviously, when users did not provide a default scheme in the `AddAuthentication` call, no default scheme was set.\r\n\r\n```csharp\r\nbuilder.Services.AddAuthentication().AddCookie();\r\n```\r\n\r\nThis impacted the behavior of authentication handlers in the application layer.\r\n\r\n### New behavior\r\n\r\nMoving forward, if (and only if) a _single_ scheme is registered in an application, that scheme will be treated as the default. In the code below, the `CookieDefaults.AuthenticationScheme` will be treated as the default scheme.\r\n\r\n```csharp\r\nbuilder.Services.AddAuthentication().AddCookie();\r\n```\r\n\r\nHowever, in the code snippet below, no default will be set because multiple schemes are registered.\r\n\r\n```csharp\r\nbuilder.Services.AddAuthentication().AddCookie().AddJwtBearer();\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nTo reduce boilerplate when configuring authentication and set up sensible defaults.\r\n\r\n### Recommended action\r\n\r\nThe change only impacts applications with a single scheme registered. For those scenarios, it's recommended to ensure that your application is prepared to handle the assumption that a single scheme is the default. For example, the options associated with that scheme should be configured correctly.\r\n\r\nAlternatively, this behavior can be disabled by setting the `Microsoft.AspNetCore.Authentication.SuppressAutoDefaultScheme` app context flag.\r\n\r\n### Affected APIs\r\n\r\nAuthentication APIs.","Url":"https://github.com/aspnet/Announcements/issues/490","RelatedDescription":"Open issue \"[Breaking change]: Changes in default authentication scheme handling for ASP.NET Core\" (#490)"},{"Id":"1287742787","IsPullRequest":false,"CreatedAt":"2022-06-28T18:44:22","Actor":"DamianEdwards","Number":"488","RawContent":null,"Title":"[Breaking change]: Static files, default document, and directory browsing middleware no longer no-op when an endpoint with a null RequestDelegate is active","State":"open","Body":"### Description\n\nAs detailed in dotnet/aspnetcore#42413, the file-serving middleware (`DefaultFilesMiddleware`, `DirectoryBrowserMiddleware`, and `StaticFileMiddleware`) have been updated to no longer no-op (i.e. defer to the next middleware in the pipeline) in the case that there is an active endpoint with a `null` request delegate.\r\n\r\nPR that makes the change: dotnet/aspnetcore#42458\n\n### Version\n\n.NET 7 Preview 7\n\n### Previous behavior\n\nPreviously, if the current request had an active endpoint, i.e. `HttpContext.GetEndpoint() != null`, the file-serving middleware would perform no action and simply delegate to the next middleware in the request pipeline.\n\n### New behavior\n\nThe file-serving middleware will now only perform no action if there is an active endpoint and its `RequestDelegate` property value is not `null`, i.e. `HttpContext.GetEndpoint()?.RequestDelegate is not null`.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis change will enable endpoints to be active in the request for the purposes of setting and sharing metadata with middleware that are endpoint-aware so that they can perform their intended function, while allowing other middleware (like the file-serving middleware) that would usually defer their behavior when an endpoint is active to also function.\r\n\r\nFor example, an endpoint with a `null` request delegate containing authorization metadata can be set as the active endpoint for a request, causing the `AuthorizationMiddleware` to enforce authorization requirements, which if satisfied would allow the `StaticFileMiddleware` to serve the requested files.\n\n### Recommended action\n\nIf you are relying on setting an active endpoint on the request to suppress the behavior of the file-serving middleware, ensure that the endpoint has a non-null value set for its `RequestDelegate` property.\n\n### Affected APIs\n\n- `IApplicationBuilder.UseStaticFiles()`\r\n- `IApplicationBuilder.UseDefaultFiles()`\r\n- `IApplicationBuilder.UseDirectoryBrowser()`","Url":"https://github.com/aspnet/Announcements/issues/488","RelatedDescription":"Open issue \"[Breaking change]: Static files, default document, and directory browsing middleware no longer no-op when an endpoint with a null RequestDelegate is active\" (#488)"},{"Id":"1278667050","IsPullRequest":false,"CreatedAt":"2022-06-21T16:03:03","Actor":"BrennanConroy","Number":"487","RawContent":null,"Title":"[Breaking change]: Unit testing SignalR Hubs may need updating","State":"open","Body":"### Description\n\n`IHubClients` and `IHubCallerClients` now hide interface members `IClientProxy Client(string connectionId);` and `IClientProxy Caller { get; }` with `ISingleClientProxy Client(string connectionId);` and `ISingleClientProxy Caller { get; }` in order to add support for [client results](https://docs.microsoft.com/aspnet/core/signalr/hubs?view=aspnetcore-7.0#client-results).\r\n\r\nThis is not a breaking change to production code, unless you use reflection to call the above `Client` or `Caller` methods.\n\n### Version\n\n.NET 7\n\n### Previous behavior\n\nWhen using a testing library like Moq to unit test a SignalR Hub, you may write some code like follows:\r\n```csharp\r\nvar hub = new MyHub();\r\nvar mockCaller = new Mock<IHubCallerClients>();\r\nvar mockClientProxy = new Mock<IClientProxy>();\r\nmockCaller.Setup(x => x.Caller).Returns(mockClientProxy.Object);\r\nhub.Clients = mockCaller.Object;\r\n\r\nclass MyHub : Hub { }\r\n```\n\n### New behavior\n\n```csharp\r\nvar hub = new MyHub();\r\nvar mockCaller = new Mock<IHubCallerClients>();\r\nvar mockClientProxy = new Mock<ISingleClientProxy>(); // <-- updated code\r\nmockCaller.Setup(x => x.Caller).Returns(mockClientProxy.Object);\r\nhub.Clients = mockCaller.Object;\r\n\r\nclass MyHub : Hub { }\r\n```\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [ ] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThe change was made to add new functionality to SignalR and is non-breaking in normal use cases. The main area we see the change breaking is in test code which is easily updated.\n\n### Recommended action\n\nUpdate test code to use the `ISingleClientProxy` interface when using reflection/reflection-based test code.\n\n### Affected APIs\n\n[`IHubClients`](https://docs.microsoft.com/dotnet/api/microsoft.aspnetcore.signalr.ihubclients?view=aspnetcore-6.0) and [`IHubCallerClients`](https://docs.microsoft.com/dotnet/api/microsoft.aspnetcore.signalr.ihubcallerclients?view=aspnetcore-6.0)","Url":"https://github.com/aspnet/Announcements/issues/487","RelatedDescription":"Open issue \"[Breaking change]: Unit testing SignalR Hubs may need updating\" (#487)"},{"Id":"1263972971","IsPullRequest":false,"CreatedAt":"2022-06-07T22:53:47","Actor":"Daniel-Genkin-MS-2","Number":"486","RawContent":null,"Title":"[Breaking change]: Removed default HTTPS binding on Kestrel","State":"open","Body":"### Description\n\nThe default HTTPS address and port have been removed from Kestrel in .NET 7 preview 6. This is step one in https://github.com/dotnet/aspnetcore/issues/42016 which will improve overall developer experience when dealing with HTTPS.\r\n\r\nPR that makes the change: https://github.com/dotnet/aspnetcore/pull/42021\r\n\r\n## Version\r\n.NET 7 preview 6\r\n\n\n### Version\n\nOther (please put exact version in description textbox)\n\n### Previous behavior\n\nPreviously, if no values for the address and port were specified explicitly but a local development certificate was available, Kestrel would default to binding to both http://localhost:5000 and https://localhost:5001.\n\n### New behavior\n\nUsers must now manually bind to HTTPS and specify the address and port explicitly, either via the `launchSettings.json` file, the `ASPNETCORE_URLS` environment variable, `--urls` command line argument, `urls` host configuration key, or via the [`UseUrls`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.hostingabstractionswebhostbuilderextensions.useurls?view=aspnetcore-6.0) extension method.\r\n\r\nHTTP binding is unchanged.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nThis current eager binding behavior occurs without regard to the configured environment and can lead to experience issues on developer machines when the certificate has not yet been trusted (i.e. trusted as root cert authority because it's self-signed). Clients often produce poor UX when hitting an HTTPS endpoint with an untrusted certificate, e.g. silent failure, scary error/warning screen, etc.\n\n### Recommended action\n\nIf you were not using the default https://localhost:5001 binding, no changes are required. However, if you were using this binding, please make sure to review [this guide](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel/endpoints) on how you can update your server to enable HTTPS.\n\n### Affected APIs\n\nN/A","Url":"https://github.com/aspnet/Announcements/issues/486","RelatedDescription":"Open issue \"[Breaking change]: Removed default HTTPS binding on Kestrel\" (#486)"},{"Id":"1240740970","IsPullRequest":false,"CreatedAt":"2022-05-18T23:44:43","Actor":"brunolins16","Number":"485","RawContent":null,"Title":"[Breaking change]: ActionResult<T> set StatusCode to 200","State":"open","Body":"### Description\r\n\r\nWhen returning a `T` in a MVC/API Controller Action that declares the return type as `ActionResult<T>` will now always set the `ObjectResult.StatusCode` to `200`, unless when the `T` is a `ProblemDetails`.\r\n\r\nSince before this change the `ObjectResult.StatusCode` was `null`, in some scenarios where the status code is set manually, this change could cause unexpected behaviors. Also, an Action Filter could be affected by this change if it expects the `null` instead of `200`.\r\n\r\n### Version\r\n\r\n.NET 6\r\n\r\n### Previous behavior\r\n\r\nBefore if you have a Controller's Action that returns `T` and sets the `Response.StatusCode` manually, similar to the example:\r\n\r\n``` C#\r\n\r\n// Generates a 202 Accepted response\r\npublic ActionResult<Model> Get()\r\n{\r\n    Response.StatusCode = StatusCodes.Status202Accepted;\r\n    return new Model();\r\n}\r\n```\r\nIt will generate the expected `202 Accepted` response status code.\r\n\r\n### New behavior\r\n\r\nAfter the changes the same Controller's Action that returns `T` that sets the `Response.StatusCode` manually, will always generate a `200 OK` response.\r\n\r\n``` C#\r\n\r\n// Generates a 200 OK response\r\npublic ActionResult<Model> Get()\r\n{\r\n    Response.StatusCode = StatusCodes.Status202Accepted;\r\n    return new Model();\r\n}\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis behavior is documented since ASP.NET Core 3.1 (https://docs.microsoft.com/en-us/aspnet/core/web-api/action-return-types?view=aspnetcore-3.1#actionresultt-type), however, it keeps the `StatusCode` as `null` that will eventually generate a `200 OK` response as default. Since the default internal behavior could easily change, was decided to avoid relying on the internal default implementation and setting the `StatusCode` to the expected `200 OK`.\r\n\r\n### Recommended action\r\n\r\nIf you are broken by this change, as the example mentioned before:\r\n\r\n``` C#\r\npublic ActionResult<Model> Get()\r\n{\r\n    Response.StatusCode = StatusCodes.Status202Accepted;\r\n    return new Model();\r\n}\r\n```\r\n\r\nYou will need to change your Controller Action. These are some possible options that will keep the desired behavior:\r\n\r\n``` c#\r\npublic ActionResult<Model> Get()\r\n{\r\n   return Accepted(new Model());\r\n}\r\n\r\n//or\r\n\r\npublic ActionResult<Model> Get()\r\n{\r\n   return StatusCode(StatusCodes.Status202Accepted, new Model());\r\n}\r\n\r\n//or\r\n\r\npublic Model Get()\r\n{\r\n   Response.StatusCode = StatusCodes.Status202Accepted;\r\n   return new Model();\r\n}\r\n```\r\n\r\n### Affected APIs\r\n\r\nMVC/API Controller actions.","Url":"https://github.com/aspnet/Announcements/issues/485","RelatedDescription":"Open issue \"[Breaking change]: ActionResult<T> set StatusCode to 200\" (#485)"},{"Id":"1149914360","IsPullRequest":false,"CreatedAt":"2022-04-20T20:33:05","Actor":"pranavkm","Number":"482","RawContent":null,"Title":"[Breaking change]: Blazor components are type activated by default","State":"closed","Body":"### Description\n\nStarting in .NET 7, Blazor components use [`ActivatorUtilities`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.activatorutilities) to instantiate components. This allows components to resolve parameters from a DI container using constructor injection. Constructor injection is supported in addition to property injection that is already supported via the `InjectAttribute`.\r\n\r\nFor most existing applications, this change is not discernable. However, this may be a breaking change for libraries or applications that provided non-empty constructors for components where parameters are not meant to be resolved from the DI container.\r\n\r\nFor questions or further discussion, please use https://github.com/dotnet/aspnetcore/issues/40405\n\n### Version\n\n.NET 7\n\n### Previous behavior\n\nIn the ordinary case, components do not specify a constructor or have a parameter-less constructor and this is a non-breaking change. However, consider the following case:\r\n\r\n```C#\r\npublic class MyMultipleConstructorComponent : ComponentBase\r\n{\r\n   public MyMultipleConstructorComponent () { }\r\n\r\n   public MyMultipleConstructorComponent (int someValue) {}\r\n}\r\n```\r\n\r\nIn .NET 6 and earlier, the parameter-less constructor would be used to instantiate the component.\n\n### New behavior\n\nIn .NET 7, parameters in a component are resolved from the DI container. Consider this component:\r\n\r\n```C#\r\npublic class MyComponent : ComponentBase\r\n{\r\n   public MyComponent(IMyService myService) { ... }\r\n}\r\n```\r\n\r\nStarting in .NET 7, `IMyService` is resolved from the container while instantiating the component. Using `[InjectAttribute]` to property inject services remains unchanged.\r\n\r\nGoing back to `MyMultipleConstructorComponent` from the earlier section - in .NET 7, `ActivatorUtilities` defaults to using the constructor with the most parameters to instantiate an object. In this case, the constructor with the single `int` parameter will be attempted to be resolved from the DI container and a runtime exception will be thrown if parameters are not resolvable.   \n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n\n### Reason for change\n\nConstructor injection was a popular request from Blazor users.\n\n### Recommended action\n\nIf this change severely impacts your ability to migrate your apps to .NET 7, please let us know in the associated discussion thread and we would be happy to reconsider this change. Optionally, there are changes to your application that you may consider to work around this change if it impacts your application:\r\n\r\n* [`ActivatorUtilitiesConstructorAttribute`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.activatorutilitiesconstructorattribute) can be applied to constructor to specify an exact constructor to use.\r\n* Application developers may register an implementation of `IComponentActivator` in the DI container that reverts to the .NET 6 behavior.\r\n\r\n\n\n### Affected APIs\n\nComponent constructors","Url":"https://github.com/aspnet/Announcements/issues/482","RelatedDescription":"Closed issue \"[Breaking change]: Blazor components are type activated by default\" (#482)"},{"Id":"1190169916","IsPullRequest":false,"CreatedAt":"2022-04-01T19:03:58","Actor":"brunolins16","Number":"484","RawContent":null,"Title":"[Breaking change]: Updated empty body detection in MVC Model Binding","State":"open","Body":"### Description\r\n\r\nThe mechanism to detect an empty request `body` during the MVC Model Binding now uses the [`IHttpRequestBodyDetectionFeature.CanHaveBody`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.features.ihttprequestbodydetectionfeature.canhavebody?view=aspnetcore-6.0#microsoft-aspnetcore-http-features-ihttprequestbodydetectionfeature-canhavebody), that is currently implemented by the following behavior:\r\n\r\n- `true` when:\r\n  - It's an `HTTP/1.x` request with a non-zero `Content-Length` or a `Transfer-Encoding: chunked` header.\r\n  - It's an `HTTP/2` request that did not set the `END_STREAM` flag on the initial headers frame.\r\n\r\n- `false` when:\r\n  - It's an `HTTP/1.x` request with no `Content-Length` or `Transfer-Encoding: chunked` header, or the `Content-Length` is `0`.\r\n  - It's an `HTTP/1.x` request with `Connection: Upgrade` (e.g. WebSockets). There is no HTTP request body for these requests and no data should be received until after the upgrade.\r\n  - It's an `HTTP/2` request that set `END_STREAM` on the initial headers frame.\r\n\r\nSince the previous behavior was a simple validation of the `Content-Length == 0`, in some scenarios when requests are not sending all needed HTTP information, could now be detected as empty request and report a failure to the client.\r\n\r\n\r\n### Version\r\n\r\n7.0.0-preview3\r\n\r\n### Previous behavior\r\n\r\n Before if you have a Controller's action that bind a parameter from body:\r\n\r\n``` csharp\r\n [HttpPost()]\r\n        public IActionResult Required([FromBody] TestClass value) => Ok(value);\r\n```\r\n\r\nAnd the client request does not include a `Content-Length` header, eg.:\r\n\r\n``` curl\r\ncurl --request POST -k -i \"[action]\" -H \"Content-Type: application/json\"\r\n```\r\n\r\nThis request will cause an internal exception during the body deserialization:\r\n\r\nEg.: When using the `System.Text.Json` input formatter\r\n``` log\r\nSystem.Text.Json.JsonException: 'The input does not contain any JSON tokens. \r\nExpected the input to start with a valid JSON token, when isFinalBlock is true. \r\nPath: $ | LineNumber: 0 | BytePositionInLine: 0.'\r\n```\r\n\r\nAlso, a response payload similar to this will be receive by the client:\r\n\r\n``` json\r\n{\r\n  \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\r\n  \"title\": \"One or more validation errors occurred.\",\r\n  \"status\": 400,\r\n  \"traceId\": \"00-34e98b5841b88bfb5476965efd9d9c8c-5bb16bc50dfbabb7-00\",\r\n  \"errors\": {\r\n    \"$\": [\r\n+      \"The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true. Path: $ | LineNumber: 0 | BytePositionInLine: 0.\"\r\n    ],\r\n    \"value\": [\r\n      \"The value field is required.\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### New behavior\r\n\r\nWith the updated detection mechanism, the deserialization will not be trigger since an empty request body will be detected and only a `validation` message will be reported back to the client. Eg.:\r\n\r\n``` json\r\n{\r\n  \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\r\n  \"title\": \"One or more validation errors occurred.\",\r\n  \"status\": 400,\r\n  \"traceId\": \"00-0f87920dc675fdfdf8d7638d3be66577-bd6bdbf32d21b714-00\",\r\n  \"errors\": {\r\n    \"\": [\r\n+      \"A non-empty request body is required.\"\r\n    ],\r\n    \"value\": [\r\n      \"The value field is required.\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nThis change is an alignment with other parts of the framework that were already using the [`IHttpRequestBodyDetectionFeature.CanHaveBody`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.features.ihttprequestbodydetectionfeature.canhavebody?view=aspnetcore-6.0#microsoft-aspnetcore-http-features-ihttprequestbodydetectionfeature-canhavebody) and also a fix to a reported issue dotnet/aspnetcore/issues/29570\r\n\r\n### Recommended action\r\n\r\nNo change is required, however, if you getting an unexpected behavior is recommended to review if your client's requests are sending the appropriated headers/information.\r\n\r\n### Affected APIs\r\n\r\nMVC Action Controllers","Url":"https://github.com/aspnet/Announcements/issues/484","RelatedDescription":"Open issue \"[Breaking change]: Updated empty body detection in MVC Model Binding\" (#484)"},{"Id":"1154726545","IsPullRequest":false,"CreatedAt":"2022-03-01T01:08:45","Actor":"pranavkm","Number":"483","RawContent":null,"Title":"[Breaking change]: Event IDs for some Microsoft.AspNetCore.Mvc.Core log messages changed","State":"open","Body":"### Description\n\nAs part of updating the Microsoft.AspNetcore.Mvc.Core assembly to use `LoggerMessageAttribute`, we discovered logger event Ids being reused within a single log category. Log IDs and names should be unique so different message types can be identified. Consequently, these have been updated to ensure that the event Ids are unique for a logger category. \n\n### Version\n\n.NET 7\n\n### Previous behavior\n\nSome logger event IDs in Microsoft.AspNetCore.Mvc.Core were re-used within a single category.\n\n### New behavior\n\nDuplicated event ids within a single category within the Microsoft.AspNetCore.Mvc.Core assembly were updated.\n\n### Type of breaking change\n\n- [X] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n\n### Reason for change\n\nLog IDs and names should be unique so different message types can be identified.\n\n### Recommended action\n\nIf you have code or configuration that references the old IDs, update those references to use the new IDs.\n\n### Affected APIs\n\nNot detectable via API analysis","Url":"https://github.com/aspnet/Announcements/issues/483","RelatedDescription":"Open issue \"[Breaking change]: Event IDs for some Microsoft.AspNetCore.Mvc.Core log messages changed\" (#483)"},{"Id":"1140446824","IsPullRequest":false,"CreatedAt":"2022-02-16T19:09:40","Actor":"wtgodbe","Number":"481","RawContent":null,"Title":"Microsoft.Data.SqlClient updated to 4.0.1","State":"open","Body":"### Description\r\n\r\nWe have updated the `Microsoft.Data.SqlClient` package to 4.0.1.\r\n\r\n### Version\r\n\r\n7.0-preview2\r\n\r\n### Previous behavior\r\n\r\nThe old version was `1.0.19249.1`\r\n\r\n### New behavior\r\n\r\nWe now use `4.0.1`. You can see breaking changes in the 4.0 band here: https://github.com/dotnet/SqlClient/blob/main/release-notes/4.0/4.0.0.md#breaking-changes. Note that `Encrypt` now equals `true` by default: https://github.com/dotnet/SqlClient/blob/main/release-notes/4.0/4.0.0.md#encrypt-default-value-set-to-true\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nUpdating to most recent versions for improvements in the underlying libraries.\r\n\r\n### Recommended action\r\n\r\nWe didn't have to react to any no public API changes from this change, but its possible there are breaking changes in the packages themselves.\r\n\r\n### Affected APIs\r\n\r\nMicrosoft.Extensions.Caching.SqlServer","Url":"https://github.com/aspnet/Announcements/issues/481","RelatedDescription":"Open issue \"Microsoft.Data.SqlClient updated to 4.0.1\" (#481)"},{"Id":"1127552680","IsPullRequest":false,"CreatedAt":"2022-02-08T17:31:43","Actor":"brunolins16","Number":"480","RawContent":null,"Title":"[Breaking change]: API Controllers Actions try to infer parameters from DI","State":"open","Body":"### Description\r\n\r\nThe mechanism to infer binding source of **API Controller action's parameters** now mark parameters to be bound from the Dependency Injection container when the type is registered in the container.\r\n\r\nIn rare cases this can break applications that have a type in DI that is also accepted in API Controller actions methods.\r\n\r\n### Version\r\n\r\n7.0.0-preview2\r\n\r\n### Previous behavior\r\n\r\nBefore if you want to bind a type registered in your Dependency Injection container, it **must** be explicitly decorated using an attribute that implements `IFromServiceMetadata` (eg.: `FromServicesAttribute`)\r\n\r\n``` csharp\r\nServices.AddScoped<SomeCustomType>();\r\n\r\n[Route(\"[controller]\")]\r\n[ApiController]\r\npublic class MyController : ControllerBase\r\n{\r\n    public ActionResult Get([FromServices]SomeCustomType service) => Ok();\r\n}\r\n```\r\n\r\nIf the attribute is not specified, the parameter is resolved from the request Body sent by the client.\r\n\r\n``` csharp\r\nServices.AddScoped<SomeCustomType>();\r\n\r\n[Route(\"[controller]\")]\r\n[ApiController]\r\npublic class MyController : ControllerBase\r\n{\r\n    // Bind from the request body\r\n    [HttpPost]\r\n    public ActionResult Post(SomeCustomType service) => Ok();\r\n}\r\n```\r\n\r\n### New behavior\r\n\r\nNow types in DI will be checked at app startup using `IServiceProviderIsService` to determine if an argument in an API controller action will come from DI or from the other sources. \r\n\r\nIn the below example `SomeCustomType` (assuming you're using the default DI container) will come from the DI container. \r\n\r\n``` csharp\r\nServices.AddScoped<SomeCustomType>();\r\n\r\n[Route(\"[controller]\")]\r\n[ApiController]\r\npublic class MyController : ControllerBase\r\n{\r\n    // Binding from the services\r\n    [HttpPost]\r\n    public ActionResult Post(SomeCustomType service) => Ok();\r\n}\r\n```\r\n\r\nThe new mechanism to infer binding source of **API Controller action's parameters** will follow the rule bellow:\r\n\r\n1. A previously specified `BindingInfo.BindingSource` is never overwritten.\r\n2. A complex type parameter, registered in the DI container, is assigned `BindingSource.Services`.\r\n3. A complex type parameter, not registered in the DI container, is assigned `BindingSource.Body`.\r\n4. Parameter with a name that appears as a route value in ANY route template is assigned `BindingSource.Path`.\r\n5. All other parameters are `BindingSource.Query`.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\r\n- [X] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\r\n\r\n### Reason for change\r\n\r\nWe believe the likelihood of breaking apps to be very low as it's not a common scenario to have a type in DI and as an argument in your API controller action at the same time. Also, this same behavior is currently supported by Minimal Actions.\r\n\r\n### Recommended action\r\n\r\nIf you are broken by this change you can disable the feature by setting `DisableImplicitFromServicesParameters` to true.\r\n\r\n```csharp\r\nservices.Configure<ApiBehaviorOptions>(options =>\r\n{\r\n     options.DisableImplicitFromServicesParameters = true;\r\n});\r\n```\r\nAlso, you could continue to have your action's parameters, with the new feature enabled or not, binding from your DI container using an attribute that implements `IFromServiceMetadata` (eg.: `FromServicesAttribute`).\r\n\r\n``` csharp\r\nServices.AddScoped<SomeCustomType>();\r\n\r\n[Route(\"[controller]\")]\r\n[ApiController]\r\npublic class MyController : ControllerBase\r\n{\r\n    // Binding from the DI container\r\n    [HttpPost]\r\n    public ActionResult Post([FromServices]SomeCustomType service) => Ok();\r\n}\r\n```\r\n\r\n### Affected APIs\r\n\r\nAPI Controller actions.","Url":"https://github.com/aspnet/Announcements/issues/480","RelatedDescription":"Open issue \"[Breaking change]: API Controllers Actions try to infer parameters from DI\" (#480)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-01-31T03:30:05.9784571Z","RunDurationInMilliseconds":2575}