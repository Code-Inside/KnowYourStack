{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Aspire 9.5","PublishedOn":"2025-09-25T17:25:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Aspire 9.5 adds the preview 'aspire update' command, single-file AppHost, richer CLI and dashboard UX, and new integrations for AI, DevTunnels, and more.\nThe post Announcing Aspire 9.5 appeared first...","Href":"https://devblogs.microsoft.com/dotnet/announcing-dotnet-aspire-95/","RawContent":null},{"Title":"Exploring Text-to-Image capabilities in .NET","PublishedOn":"2025-09-24T23:30:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Learn how to generate images from natural language prompts using the universal abstractions in Microsoft's extensions for .NET AI.\nThe post Exploring Text-to-Image capabilities in .NET appeared first...","Href":"https://devblogs.microsoft.com/dotnet/explore-text-to-image-dotnet/","RawContent":null},{"Title":"New Trusted Publishing enhances security on NuGet.org","PublishedOn":"2025-09-22T15:40:00+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Announcing Trusted Publishing on NuGet.org - a safer way to publish packages using short-lived tokens instead of long-lived API keys\nThe post New Trusted Publishing enhances security on NuGet.org...","Href":"https://devblogs.microsoft.com/dotnet/enhanced-security-is-here-with-the-new-trust-publishing-on-nuget-org/","RawContent":null},{"Title":"Prompt Files and Instructions Files Explained","PublishedOn":"2025-09-17T17:05:00+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Unlocking the Power of GitHub Copilot for .NET Developers with Instruction Files and Prompt Files\nThe post Prompt Files and Instructions Files Explained appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/prompt-files-and-instructions-files-explained/","RawContent":null},{"Title":".NET STS releases supported for 24 months","PublishedOn":"2025-09-16T17:00:00+00:00","CommentsCount":16,"FacebookCount":0,"Summary":".NET STS releases will be supported for 24 months\nThe post .NET STS releases supported for 24 months appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/dotnet-sts-releases-supported-for-24-months/","RawContent":null},{"Title":"Application Insights Code Optimizations for .NET Apps","PublishedOn":"2025-09-15T17:05:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Learn how Application Insights Code Optimizations helps .NET developers identify performance bottlenecks and get AI-powered recommendations through GitHub Copilot integration.\nThe post Application...","Href":"https://devblogs.microsoft.com/dotnet/application-insights-code-optimizations/","RawContent":null},{"Title":"Performance Improvements in .NET 10","PublishedOn":"2025-09-10T13:00:00+00:00","CommentsCount":84,"FacebookCount":0,"Summary":"Take a tour through hundreds of performance improvements in .NET 10.\nThe post Performance Improvements in .NET 10 appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-10/","RawContent":null},{"Title":"Announcing .NET 10 Release Candidate 1","PublishedOn":"2025-09-09T18:45:00+00:00","CommentsCount":5,"FacebookCount":0,"Summary":".NET 10 Release Candidate 1 is available with improvements across the runtime, SDK, libraries, ASP.NET Core, Blazor, .NET MAUI, and more!\nThe post Announcing .NET 10 Release Candidate 1 appeared first...","Href":"https://devblogs.microsoft.com/dotnet/dotnet-10-rc-1/","RawContent":null},{"Title":".NET and .NET Framework September 2025 servicing releases updates","PublishedOn":"2025-09-09T17:45:00+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"A recap of the latest servicing updates for .NET and .NET Framework for September 2025.\nThe post .NET and .NET Framework September 2025 servicing releases updates appeared first on .NET Blog.","Href":"https://devblogs.microsoft.com/dotnet/dotnet-and-dotnet-framework-september-2025-servicing-updates/","RawContent":null},{"Title":"Let Copilot Coding Agent handle the busy work","PublishedOn":"2025-09-03T17:05:00+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"See how GitHub Copilot Coding Agent automates unit tests and ships features from a PRD in a real .NET sample, so you can focus on design and review.\nThe post Let Copilot Coding Agent handle the busy...","Href":"https://devblogs.microsoft.com/dotnet/copilot-coding-agent-dotnet/","RawContent":null}],"ResultType":"Feed"},"AspNetCore-Issues":{"Issues":[{"Id":"3455621027","IsPullRequest":false,"CreatedAt":"2025-09-26T03:03:19","Actor":"EmilyFeng97","Number":"63838","RawContent":null,"Title":"The options in the .NET 10.0 RC 2 Hosting bundle setup help window are not divided into paragraphs","State":"open","Body":"**REGRESSION INFO:** Works well on . NET 10.0 RC 1 Hosting bundle\n\n**INSTALL STEPS:**\n1. Clean Win Server 2025 machine.\n1. Install the .NET 10.0 RC 2 Hosting bundle from corherent build\n\n\n**Platform**\n- [x] Windows\n- [ ] macOS\n- [ ] Linux\n\n**Repro Steps**\n1. Open a normal Command Prompt\n2. Run the installer.exe in a command line with \"/help\" to see the options\n `C:\\Users\\v-xxx\\Desktop\\dotnet-hosting-10.0.0-rc.2.xxxxxx-win.exe /help`\n\n**Actual Result**\nOptions are not displayed in paragraphs.\n<img width=\"650\" height=\"483\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/dc9f5209-64d0-4c9d-aea1-9044773e4bf8\" />\n\n**Expect Result**\nMultiple options can be displayed in paragraphs, like 10.0RC1 Hosting bundle.\n<img width=\"469\" height=\"340\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/17f41977-3483-418c-a9e1-144ff79564a0\" />\n\n**Error Log**\n<!--- When possible, copy and paste the entire error that appears. --->\n","Url":"https://github.com/dotnet/aspnetcore/issues/63838","RelatedDescription":"Open issue \"The options in the .NET 10.0 RC 2 Hosting bundle setup help window are not divided into paragraphs\" (#63838)"},{"Id":"3455539254","IsPullRequest":true,"CreatedAt":"2025-09-26T02:12:20","Actor":"dotnet-maestro[bot]","Number":"63837","RawContent":null,"Title":"[release/10.0] Source code updates from dotnet/dotnet","State":"open","Body":"\r\n> [!NOTE]\r\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\r\n\r\nThis pull request brings the following source code changes\r\n\r\n[marker]: <> (Begin:8348293c-6613-4077-9cb7-c977fb9a8e78)\r\n\r\n## From https://github.com/dotnet/dotnet\r\n- **Subscription**: [8348293c-6613-4077-9cb7-c977fb9a8e78](https://maestro.dot.net/subscriptions?search=8348293c-6613-4077-9cb7-c977fb9a8e78)\r\n- **Build**: [20250925.6](https://dev.azure.com/dnceng/internal/_build/results?buildId=2801826) ([284752](https://maestro.dot.net/channel/5173/github:dotnet:dotnet/build/284752))\r\n- **Date Produced**: September 25, 2025 11:42:36 PM UTC\r\n- **Commit**: [c9f0e3e586ba580f1ae64ef3990c6cd01374bf13](https://github.com/dotnet/dotnet/commit/c9f0e3e586ba580f1ae64ef3990c6cd01374bf13)\r\n- **Commit Diff**: [537ecf8...c9f0e3e](https://github.com/dotnet/dotnet/compare/537ecf871e65b50bbe5c8d70c284caa87b69b3cd...c9f0e3e586ba580f1ae64ef3990c6cd01374bf13)\r\n- **Branch**: [release/10.0.1xx](https://github.com/dotnet/dotnet/tree/release/10.0.1xx)\r\n\n**Updated Dependencies**\n- From [10.0.0-rc.2.25473.111 to 10.0.0-rtm.25475.106][1]\n  - dotnet-ef\n  - Microsoft.Bcl.AsyncInterfaces\n  - Microsoft.Bcl.TimeProvider\n  - Microsoft.EntityFrameworkCore\n  - Microsoft.EntityFrameworkCore.Design\n  - Microsoft.EntityFrameworkCore.InMemory\n  - Microsoft.EntityFrameworkCore.Relational\n  - Microsoft.EntityFrameworkCore.Sqlite\n  - Microsoft.EntityFrameworkCore.SqlServer\n  - Microsoft.EntityFrameworkCore.Tools\n  - Microsoft.Extensions.Caching.Abstractions\n  - Microsoft.Extensions.Caching.Memory\n  - Microsoft.Extensions.Configuration\n  - Microsoft.Extensions.Configuration.Abstractions\n  - Microsoft.Extensions.Configuration.Binder\n  - Microsoft.Extensions.Configuration.CommandLine\n  - Microsoft.Extensions.Configuration.EnvironmentVariables\n  - Microsoft.Extensions.Configuration.FileExtensions\n  - Microsoft.Extensions.Configuration.Ini\n  - Microsoft.Extensions.Configuration.Json\n  - Microsoft.Extensions.Configuration.UserSecrets\n  - Microsoft.Extensions.Configuration.Xml\n  - Microsoft.Extensions.DependencyInjection\n  - Microsoft.Extensions.DependencyInjection.Abstractions\n  - Microsoft.Extensions.DependencyModel\n  - Microsoft.Extensions.Diagnostics\n  - Microsoft.Extensions.Diagnostics.Abstractions\n  - Microsoft.Extensions.FileProviders.Abstractions\n  - Microsoft.Extensions.FileProviders.Composite\n  - Microsoft.Extensions.FileProviders.Physical\n  - Microsoft.Extensions.FileSystemGlobbing\n  - Microsoft.Extensions.HostFactoryResolver.Sources\n  - Microsoft.Extensions.Hosting\n  - Microsoft.Extensions.Hosting.Abstractions\n  - Microsoft.Extensions.Http\n  - Microsoft.Extensions.Logging\n  - Microsoft.Extensions.Logging.Abstractions\n  - Microsoft.Extensions.Logging.Configuration\n  - Microsoft.Extensions.Logging.Console\n  - Microsoft.Extensions.Logging.Debug\n  - Microsoft.Extensions.Logging.EventLog\n  - Microsoft.Extensions.Logging.EventSource\n  - Microsoft.Extensions.Logging.TraceSource\n  - Microsoft.Extensions.Options\n  - Microsoft.Extensions.Options.ConfigurationExtensions\n  - Microsoft.Extensions.Options.DataAnnotations\n  - Microsoft.Extensions.Primitives\n  - Microsoft.Internal.Runtime.AspNetCore.Transport\n  - Microsoft.NET.Runtime.MonoAOTCompiler.Task\n  - Microsoft.NET.Runtime.WebAssembly.Sdk\n  - Microsoft.NETCore.App.Ref\n  - Microsoft.NETCore.BrowserDebugHost.Transport\n  - Microsoft.NETCore.Platforms\n  - System.Collections.Immutable\n  - System.Composition\n  - System.Configuration.ConfigurationManager\n  - System.Diagnostics.DiagnosticSource\n  - System.Diagnostics.EventLog\n  - System.Diagnostics.PerformanceCounter\n  - System.DirectoryServices.Protocols\n  - System.Formats.Asn1\n  - System.Formats.Cbor\n  - System.IO.Hashing\n  - System.IO.Pipelines\n  - System.Memory.Data\n  - System.Net.Http.Json\n  - System.Net.Http.WinHttpHandler\n  - System.Net.ServerSentEvents\n  - System.Numerics.Tensors\n  - System.Reflection.Metadata\n  - System.Resources.Extensions\n  - System.Runtime.Caching\n  - System.Security.Cryptography.Pkcs\n  - System.Security.Cryptography.Xml\n  - System.Security.Permissions\n  - System.ServiceProcess.ServiceController\n  - System.Text.Encodings.Web\n  - System.Text.Json\n  - System.Threading.AccessControl\n  - System.Threading.Channels\n  - System.Threading.RateLimiting\n- From [10.0.0-beta.25473.111 to 10.0.0-beta.25475.106][1]\n  - Microsoft.DotNet.Arcade.Sdk\n  - Microsoft.DotNet.Build.Tasks.Archives\n  - Microsoft.DotNet.Build.Tasks.Installers\n  - Microsoft.DotNet.Build.Tasks.Templating\n  - Microsoft.DotNet.Helix.Sdk\n  - Microsoft.DotNet.RemoteExecutor\n  - Microsoft.DotNet.SharedFramework.Sdk\n- From [3.2.0-preview.25473.111 to 3.2.0-preview.25475.106][1]\n  - Microsoft.Web.Xdt\n- From [7.0.0-preview.2.47411 to 7.0.0-rc.47606][1]\n  - NuGet.Frameworks\n  - NuGet.Packaging\n  - NuGet.Versioning\n\r\n[marker]: <> (End:8348293c-6613-4077-9cb7-c977fb9a8e78)\r\n\n[1]: https://github.com/dotnet/dotnet/compare/537ecf871e...c9f0e3e586\n[marker]: <> (Start:Footer:CodeFlow PR)\r\n\r\n## Associated changes in source repos\r\n- https://github.com/dotnet/deployment-tools/compare/c3b8848af005deb9cab2a64b47a39f507f095835...c0c52874069a4dc0fe1e880014e6a5f316e9d3b8\n- https://github.com/dotnet/msbuild/compare/bf373edc7ed1110a03d28fde1e2cd258fce88a74...5480b47bbc592c6feedca7c57c9863ba01e0c52c\n- https://github.com/nuget/nuget.client/compare/c69588acc9bb46f38370c2b8cdedf57aea5ec904...28eeb0947095a716b98b5c34454625708cb3ac76\n- https://github.com/dotnet/roslyn/compare/b48cd5e89e69ed8e9a8170d14e5f8acc2231a199...ff0a209cf1a97eea64c2b32c7e1f7e11b209d789\n- https://github.com/dotnet/runtime/compare/0abfd8727b71f279d5718e753a70c4353afea774...d8e71a438d384cde979ec3503f89735db8b6991f\n- https://github.com/dotnet/wpf/compare/f74ad8648cada953c13403d3801203c30ea33bac...a94c8eb81ba1e5ea9f6e282a717cd52270548589\n\r\n[marker]: <> (End:Footer:CodeFlow PR)","Url":"https://github.com/dotnet/aspnetcore/pull/63837","RelatedDescription":"Open PR \"[release/10.0] Source code updates from dotnet/dotnet\" (#63837)"},{"Id":"3455474656","IsPullRequest":true,"CreatedAt":"2025-09-26T01:25:10","Actor":"dotnet-maestro[bot]","Number":"63836","RawContent":null,"Title":"[release/10.0-rc2] Source code updates from dotnet/dotnet","State":"open","Body":"\r\n> [!NOTE]\r\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\r\n\r\nThis pull request brings the following source code changes\r\n\r\n[marker]: <> (Begin:eb51cb75-96a8-4295-8ac8-323384295648)\r\n\r\n## From https://github.com/dotnet/dotnet\r\n- **Subscription**: [eb51cb75-96a8-4295-8ac8-323384295648](https://maestro.dot.net/subscriptions?search=eb51cb75-96a8-4295-8ac8-323384295648)\r\n- **Build**: [20250925.8](https://dev.azure.com/dnceng/internal/_build/results?buildId=2801862) ([284763](https://maestro.dot.net/channel/6577/github:dotnet:dotnet/build/284763))\r\n- **Date Produced**: September 26, 2025 12:48:21 AM UTC\r\n- **Commit**: [dcfd7e5d2118697d89716c1d5c2127da44e7fe3b](https://github.com/dotnet/dotnet/commit/dcfd7e5d2118697d89716c1d5c2127da44e7fe3b)\r\n- **Commit Diff**: [04104ba...dcfd7e5](https://github.com/dotnet/dotnet/compare/04104ba742ae9a61dd6cf01b2697fd21348132df...dcfd7e5d2118697d89716c1d5c2127da44e7fe3b)\r\n- **Branch**: [release/10.0.1xx-rc2](https://github.com/dotnet/dotnet/tree/release/10.0.1xx-rc2)\r\n\n**Updated Dependencies**\n- From [10.0.0-rc.2.25474.118 to 10.0.0-rc.2.25475.108][1]\n  - dotnet-ef\n  - Microsoft.Bcl.AsyncInterfaces\n  - Microsoft.Bcl.TimeProvider\n  - Microsoft.EntityFrameworkCore\n  - Microsoft.EntityFrameworkCore.Design\n  - Microsoft.EntityFrameworkCore.InMemory\n  - Microsoft.EntityFrameworkCore.Relational\n  - Microsoft.EntityFrameworkCore.Sqlite\n  - Microsoft.EntityFrameworkCore.SqlServer\n  - Microsoft.EntityFrameworkCore.Tools\n  - Microsoft.Extensions.Caching.Abstractions\n  - Microsoft.Extensions.Caching.Memory\n  - Microsoft.Extensions.Configuration\n  - Microsoft.Extensions.Configuration.Abstractions\n  - Microsoft.Extensions.Configuration.Binder\n  - Microsoft.Extensions.Configuration.CommandLine\n  - Microsoft.Extensions.Configuration.EnvironmentVariables\n  - Microsoft.Extensions.Configuration.FileExtensions\n  - Microsoft.Extensions.Configuration.Ini\n  - Microsoft.Extensions.Configuration.Json\n  - Microsoft.Extensions.Configuration.UserSecrets\n  - Microsoft.Extensions.Configuration.Xml\n  - Microsoft.Extensions.DependencyInjection\n  - Microsoft.Extensions.DependencyInjection.Abstractions\n  - Microsoft.Extensions.DependencyModel\n  - Microsoft.Extensions.Diagnostics\n  - Microsoft.Extensions.Diagnostics.Abstractions\n  - Microsoft.Extensions.FileProviders.Abstractions\n  - Microsoft.Extensions.FileProviders.Composite\n  - Microsoft.Extensions.FileProviders.Physical\n  - Microsoft.Extensions.FileSystemGlobbing\n  - Microsoft.Extensions.HostFactoryResolver.Sources\n  - Microsoft.Extensions.Hosting\n  - Microsoft.Extensions.Hosting.Abstractions\n  - Microsoft.Extensions.Http\n  - Microsoft.Extensions.Logging\n  - Microsoft.Extensions.Logging.Abstractions\n  - Microsoft.Extensions.Logging.Configuration\n  - Microsoft.Extensions.Logging.Console\n  - Microsoft.Extensions.Logging.Debug\n  - Microsoft.Extensions.Logging.EventLog\n  - Microsoft.Extensions.Logging.EventSource\n  - Microsoft.Extensions.Logging.TraceSource\n  - Microsoft.Extensions.Options\n  - Microsoft.Extensions.Options.ConfigurationExtensions\n  - Microsoft.Extensions.Options.DataAnnotations\n  - Microsoft.Extensions.Primitives\n  - Microsoft.Internal.Runtime.AspNetCore.Transport\n  - Microsoft.NET.Runtime.MonoAOTCompiler.Task\n  - Microsoft.NET.Runtime.WebAssembly.Sdk\n  - Microsoft.NETCore.App.Ref\n  - Microsoft.NETCore.BrowserDebugHost.Transport\n  - Microsoft.NETCore.Platforms\n  - System.Collections.Immutable\n  - System.Composition\n  - System.Configuration.ConfigurationManager\n  - System.Diagnostics.DiagnosticSource\n  - System.Diagnostics.EventLog\n  - System.Diagnostics.PerformanceCounter\n  - System.DirectoryServices.Protocols\n  - System.Formats.Asn1\n  - System.Formats.Cbor\n  - System.IO.Hashing\n  - System.IO.Pipelines\n  - System.Memory.Data\n  - System.Net.Http.Json\n  - System.Net.Http.WinHttpHandler\n  - System.Net.ServerSentEvents\n  - System.Numerics.Tensors\n  - System.Reflection.Metadata\n  - System.Resources.Extensions\n  - System.Runtime.Caching\n  - System.Security.Cryptography.Pkcs\n  - System.Security.Cryptography.Xml\n  - System.Security.Permissions\n  - System.ServiceProcess.ServiceController\n  - System.Text.Encodings.Web\n  - System.Text.Json\n  - System.Threading.AccessControl\n  - System.Threading.Channels\n  - System.Threading.RateLimiting\n- From [10.0.0-beta.25474.118 to 10.0.0-beta.25475.108][1]\n  - Microsoft.DotNet.Arcade.Sdk\n  - Microsoft.DotNet.Build.Tasks.Archives\n  - Microsoft.DotNet.Build.Tasks.Installers\n  - Microsoft.DotNet.Build.Tasks.Templating\n  - Microsoft.DotNet.Helix.Sdk\n  - Microsoft.DotNet.RemoteExecutor\n  - Microsoft.DotNet.SharedFramework.Sdk\n- From [3.2.0-preview.25474.118 to 3.2.0-preview.25475.108][1]\n  - Microsoft.Web.Xdt\n- From [7.0.0-rc.47518 to 7.0.0-rc.47608][1]\n  - NuGet.Frameworks\n  - NuGet.Packaging\n  - NuGet.Versioning\n\r\n[marker]: <> (End:eb51cb75-96a8-4295-8ac8-323384295648)\r\n\n[1]: https://github.com/dotnet/dotnet/compare/04104ba742...dcfd7e5d21\n[marker]: <> (Start:Footer:CodeFlow PR)\r\n\r\n## Associated changes in source repos\r\n- https://github.com/dotnet/roslyn/compare/a01d4a05fe85952de3db03a745fab6f33e1ba12b...ff0a209cf1a97eea64c2b32c7e1f7e11b209d789\n- https://github.com/dotnet/runtime/compare/0abfd8727b71f279d5718e753a70c4353afea774...70801b24234f7839295eb6959e41d9d7b64e6a9e\n\r\n[marker]: <> (End:Footer:CodeFlow PR)","Url":"https://github.com/dotnet/aspnetcore/pull/63836","RelatedDescription":"Open PR \"[release/10.0-rc2] Source code updates from dotnet/dotnet\" (#63836)"},{"Id":"3455164675","IsPullRequest":false,"CreatedAt":"2025-09-25T21:45:00","Actor":"silverlight-enjoyer","Number":"63835","RawContent":null,"Title":"Blazor WASM Standalone .webmanifest 404 error","State":"open","Body":"### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nHello. I have a .net9 blazor wasm PWA app. I had some issues w/ caching and saw that there was a [FIX](https://github.com/dotnet/aspnetcore/pull/59231) in .net10 for re-including the webmanfiest. So I went ahead and added that. However, upon deployment I'm getting a 404 error when deploying to IIS.\n\nUpon inspection, I can see that the default web.config is lacking a `<remove fileExtension=\".webmanifest\" /><mimeMap fileExtension=\".webmanifest\" mimeType=\"application/json\" />`\n\nAdding this manually fixes the console error. But, wouldn't this mean that new .net10 wasm pwa blazor apps will face this same issue? It doesn't seem like there's a easy fix for this for .net9 besides adding a custom web.config. However, I'm not sure what I would be missing from the \"default\" web.config template since it's autogenerated.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/63835","RelatedDescription":"Open issue \"Blazor WASM Standalone .webmanifest 404 error\" (#63835)"},{"Id":"3454795735","IsPullRequest":false,"CreatedAt":"2025-09-25T19:13:16","Actor":"suryatejaKONDLA","Number":"63834","RawContent":null,"Title":"Blazor Server app on IIS fails when accessed with uppercase path (URL case-sensitivity problem)","State":"open","Body":"### Is there an existing issue for this?\n\n- [ ] I have searched the existing issues\n\n### Describe the bug\n\nI am hosting a **Blazor Server app** in IIS under a subdirectory with `<base href=\"/test/\" />`.\nWhen I browse to **domainname.com/test/** (exact lowercase with trailing slash), the app works fine.\nBut if I browse to **domainname.com/test**, **domainname.com/TEST**, or **domainname.com/TeSt**, the app fails with errors in the browser console:\n\n```\nError: The circuit failed to initialize.\nError: Circuit host not initialized.\nError: Invocation canceled due to the underlying connection being closed.\n```\n\nEven though IIS still serves the request (and I can see a **301 redirect** in DevTools when using rewrite rules), the same problem occurs: the **Blazor `_blazor` SignalR circuit negotiation does not complete** after the casing/format mismatch, and the app disconnects immediately. The error happens whether or not rewrite rules are applied.\n\n<img width=\"1919\" height=\"494\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/608315c6-1eb6-4c41-ab19-8c9a19129705\" />\n\n### Expected Behavior\n\nIf a user navigates to the app with different casing in the path (e.g., `/TEST`, `/TesT`, etc.), the **Blazor Server app should still initialize and run normally**. The SignalR `_blazor` circuit negotiation should not fail just because the virtual path casing does not exactly match the `<base href>`.\n\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n10.0.100-rc.1.25451.107\n\n### Anything else?\n\n9.0.305\n10.0.100-rc.1.25451.107\nIIS 10\nWindows Server 2019","Url":"https://github.com/dotnet/aspnetcore/issues/63834","RelatedDescription":"Open issue \"Blazor Server app on IIS fails when accessed with uppercase path (URL case-sensitivity problem)\" (#63834)"},{"Id":"3454787231","IsPullRequest":false,"CreatedAt":"2025-09-25T19:09:51","Actor":"pr-benchmarks[bot]","Number":"63833","RawContent":null,"Title":"Perf improvement: fortunes_ef, fortunes_ef","State":"open","Body":"| Scenario | Environment | Date | Old RPS | New RPS | Change | Deviation | StDev | Dependencies |\n| -------- | ----------- | ---- | ------- | ------- | ------ | --------- | ----- | ------------ |\n| fortunes_ef  | Fortunes EF 9- Trends Database Amd Lin2 | 09/24/2025 10:14:45 | 258,736 | 264,926 | 2.39 % (6,190)  :thumbsup:  | 2.83 σ | 2,189.02 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th></table></details> |\n| fortunes_ef  | Fortunes Platform EF 10- Trends Database Gold Win | 09/24/2025 14:08:29 | 552,304 | 582,092 | 5.39 % (29,787)  :thumbsup:  | 2.44 σ | 12,231.29 | <details>    <summary>Changes</summary>     <table><th>Name</th><th>Version</th><th>Diff</th></table></details> |\n\n[PowerBI Dashboard](https://aka.ms/aspnet/benchmarks)\n\n\n@sebastienros\n<!-- [MSGPACK][/MSGPACK] -->","Url":"https://github.com/dotnet/aspnetcore/issues/63833","RelatedDescription":"Open issue \"Perf improvement: fortunes_ef, fortunes_ef\" (#63833)"},{"Id":"3454644089","IsPullRequest":false,"CreatedAt":"2025-09-25T18:17:35","Actor":"danroth27","Number":"63831","RawContent":null,"Title":"Hot Reloading changes to NotFound.razor seems to break hot reload","State":"open","Body":"Repro steps:\n\n- Create a default Blazor Web App with .NET 10 RC1\n- Run the app using `dotnet watch`\n- Browse to /foo to see the rendered Not Found page\n- Edit NotFound.razor and save the change to trigger a Hot Reload\n\nExpected result: The Hot Reloaded changes show up in the browser\nActual result: Browser doesn't update.\n\nIf I refresh the Not Found page in the browser the change shows up. But, if I then browse to the Home page and make a change to Home.razor, I also don't see updates on the Home page. If I refresh the Home page in the browser, then the change shows up and Hot Reload then starts work for other pages.","Url":"https://github.com/dotnet/aspnetcore/issues/63831","RelatedDescription":"Open issue \"Hot Reloading changes to NotFound.razor seems to break hot reload\" (#63831)"},{"Id":"3454614246","IsPullRequest":true,"CreatedAt":"2025-09-25T18:08:11","Actor":"Copilot","Number":"63830","RawContent":null,"Title":"Update Composite ML-DSA OIDs to Draft 8 specification","State":"open","Body":"Updates the hardcoded Composite ML-DSA algorithm OIDs in ASP.NET Core to match Draft 8 of the IETF Composite ML-DSA specification.\n\n## Background\n\nDraft 8 of the [IETF Composite ML-DSA specification](https://datatracker.ietf.org/doc/html/draft-ietf-lamps-pq-composite-sigs-08) was recently released with updated algorithm OIDs. The .NET runtime has already been updated in [dotnet/runtime#120077](https://github.com/dotnet/runtime/pull/120077) to support these new OIDs, and ASP.NET Core needs to be synchronized.\n\n## Changes\n\nUpdated all 18 Composite ML-DSA algorithm OIDs in `CertificateConfigLoader.cs`:\n\n- **Old pattern**: `2.16.840.1.114027.80.9.1.{0-17}`\n- **New pattern**: `2.16.840.1.114027.80.9.1.{20-37}`\n\nEach OID identifier was incremented by 20 to match the Draft 8 specification. For example:\n- `MLDsa44WithRSA2048PssPreHashSha256Oid`: `2.16.840.1.114027.80.9.1.0` → `2.16.840.1.114027.80.9.1.20`\n- `MLDsa87WithECDsaP521PreHashSha512Oid`: `2.16.840.1.114027.80.9.1.17` → `2.16.840.1.114027.80.9.1.37`\n\n## Notes\n\n- These changes ensure ASP.NET Core certificate loading remains compatible with the latest Composite ML-DSA implementations\n- The OIDs are still interim - IANA will assign final OIDs when the specification is standardized\n- No functional changes to certificate loading logic, only OID constant updates\n- Changes are synchronized with the .NET runtime implementation\n\nFixes #60423\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>Composite ML-DSA OIDs have been updated</issue_title>\n> <issue_description>Draft 8 of the Composite ML-DSA spec has updated the composite algorithm OIDs. The new OIDs are [here](https://datatracker.ietf.org/doc/html/draft-ietf-lamps-pq-composite-sigs-08#section-7).\n> \n> The runtime PR with these changes is here: https://github.com/dotnet/runtime/pull/120077\n> \n> ASP\\.NET Core would need to update the hardcoded OIDs here:\n> https://github.com/dotnet/aspnetcore/blob/6c99deea2314accdd79af07c937f8b00ca318263/src/Servers/Kestrel/Core/src/Internal/Certificates/CertificateConfigLoader.cs#L117-L134\n> \n> Note that these are not the final OIDs either. IANA will be assigning those at some point in the future.\n> \n> /cc @MackinnonBuck @BrennanConroy </issue_description>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#63804\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n✨ Let Copilot coding agent [set things up for you](https://github.com/dotnet/aspnetcore/issues/new?title=✨+Set+up+Copilot+instructions&body=Configure%20instructions%20for%20this%20repository%20as%20documented%20in%20%5BBest%20practices%20for%20Copilot%20coding%20agent%20in%20your%20repository%5D%28https://gh.io/copilot-coding-agent-tips%29%2E%0A%0A%3COnboard%20this%20repo%3E&assignees=copilot) — coding agent works faster and does higher quality work when set up for your repo.\n","Url":"https://github.com/dotnet/aspnetcore/pull/63830","RelatedDescription":"Open PR \"Update Composite ML-DSA OIDs to Draft 8 specification\" (#63830)"},{"Id":"3451765485","IsPullRequest":true,"CreatedAt":"2025-09-25T16:16:07","Actor":"dotnet-maestro[bot]","Number":"63808","RawContent":null,"Title":"[release/10.0-rc2] Source code updates from dotnet/dotnet","State":"closed","Body":"\r\n> [!NOTE]\r\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\r\n\r\nThis pull request brings the following source code changes\r\n\r\n\r\n[marker]: <> (Begin:eb51cb75-96a8-4295-8ac8-323384295648)\r\n\r\n## From https://github.com/dotnet/dotnet\r\n- **Subscription**: [eb51cb75-96a8-4295-8ac8-323384295648](https://maestro.dot.net/subscriptions?search=eb51cb75-96a8-4295-8ac8-323384295648)\r\n- **Build**: [20250924.18](https://dev.azure.com/dnceng/internal/_build/results?buildId=2801422) ([284661](https://maestro.dot.net/channel/6577/github:dotnet:dotnet/build/284661))\r\n- **Date Produced**: September 25, 2025 9:55:43 AM UTC\r\n- **Commit**: [04104ba742ae9a61dd6cf01b2697fd21348132df](https://github.com/dotnet/dotnet/commit/04104ba742ae9a61dd6cf01b2697fd21348132df)\r\n- **Commit Diff**: [2dea164...04104ba](https://github.com/dotnet/dotnet/compare/2dea164f01d307c409cfe0d0ee5cb8a0691e3c94...04104ba742ae9a61dd6cf01b2697fd21348132df)\r\n- **Branch**: [release/10.0.1xx-rc2](https://github.com/dotnet/dotnet/tree/release/10.0.1xx-rc2)\r\n\n**Updated Dependencies**\n- From [10.0.0-rc.2.25468.104 to 10.0.0-rc.2.25474.118][2]\n  - dotnet-ef\n  - Microsoft.Bcl.AsyncInterfaces\n  - Microsoft.Bcl.TimeProvider\n  - Microsoft.EntityFrameworkCore\n  - Microsoft.EntityFrameworkCore.Design\n  - Microsoft.EntityFrameworkCore.InMemory\n  - Microsoft.EntityFrameworkCore.Relational\n  - Microsoft.EntityFrameworkCore.Sqlite\n  - Microsoft.EntityFrameworkCore.SqlServer\n  - Microsoft.EntityFrameworkCore.Tools\n  - Microsoft.Extensions.Caching.Abstractions\n  - Microsoft.Extensions.Caching.Memory\n  - Microsoft.Extensions.Configuration\n  - Microsoft.Extensions.Configuration.Abstractions\n  - Microsoft.Extensions.Configuration.Binder\n  - Microsoft.Extensions.Configuration.CommandLine\n  - Microsoft.Extensions.Configuration.EnvironmentVariables\n  - Microsoft.Extensions.Configuration.FileExtensions\n  - Microsoft.Extensions.Configuration.Ini\n  - Microsoft.Extensions.Configuration.Json\n  - Microsoft.Extensions.Configuration.UserSecrets\n  - Microsoft.Extensions.Configuration.Xml\n  - Microsoft.Extensions.DependencyInjection\n  - Microsoft.Extensions.DependencyInjection.Abstractions\n  - Microsoft.Extensions.DependencyModel\n  - Microsoft.Extensions.Diagnostics\n  - Microsoft.Extensions.Diagnostics.Abstractions\n  - Microsoft.Extensions.FileProviders.Abstractions\n  - Microsoft.Extensions.FileProviders.Composite\n  - Microsoft.Extensions.FileProviders.Physical\n  - Microsoft.Extensions.FileSystemGlobbing\n  - Microsoft.Extensions.HostFactoryResolver.Sources\n  - Microsoft.Extensions.Hosting\n  - Microsoft.Extensions.Hosting.Abstractions\n  - Microsoft.Extensions.Http\n  - Microsoft.Extensions.Logging\n  - Microsoft.Extensions.Logging.Abstractions\n  - Microsoft.Extensions.Logging.Configuration\n  - Microsoft.Extensions.Logging.Console\n  - Microsoft.Extensions.Logging.Debug\n  - Microsoft.Extensions.Logging.EventLog\n  - Microsoft.Extensions.Logging.EventSource\n  - Microsoft.Extensions.Logging.TraceSource\n  - Microsoft.Extensions.Options\n  - Microsoft.Extensions.Options.ConfigurationExtensions\n  - Microsoft.Extensions.Options.DataAnnotations\n  - Microsoft.Extensions.Primitives\n  - Microsoft.Internal.Runtime.AspNetCore.Transport\n  - Microsoft.NET.Runtime.MonoAOTCompiler.Task\n  - Microsoft.NET.Runtime.WebAssembly.Sdk\n  - Microsoft.NETCore.App.Ref\n  - Microsoft.NETCore.BrowserDebugHost.Transport\n  - Microsoft.NETCore.Platforms\n  - System.Collections.Immutable\n  - System.Composition\n  - System.Configuration.ConfigurationManager\n  - System.Diagnostics.DiagnosticSource\n  - System.Diagnostics.EventLog\n  - System.Diagnostics.PerformanceCounter\n  - System.DirectoryServices.Protocols\n  - System.Formats.Asn1\n  - System.Formats.Cbor\n  - System.IO.Hashing\n  - System.IO.Pipelines\n  - System.Memory.Data\n  - System.Net.Http.Json\n  - System.Net.Http.WinHttpHandler\n  - System.Net.ServerSentEvents\n  - System.Numerics.Tensors\n  - System.Reflection.Metadata\n  - System.Resources.Extensions\n  - System.Runtime.Caching\n  - System.Security.Cryptography.Pkcs\n  - System.Security.Cryptography.Xml\n  - System.Security.Permissions\n  - System.ServiceProcess.ServiceController\n  - System.Text.Encodings.Web\n  - System.Text.Json\n  - System.Threading.AccessControl\n  - System.Threading.Channels\n  - System.Threading.RateLimiting\n- From [10.0.0-beta.25468.104 to 10.0.0-beta.25474.118][2]\n  - Microsoft.DotNet.Arcade.Sdk\n  - Microsoft.DotNet.Build.Tasks.Archives\n  - Microsoft.DotNet.Build.Tasks.Installers\n  - Microsoft.DotNet.Build.Tasks.Templating\n  - Microsoft.DotNet.Helix.Sdk\n  - Microsoft.DotNet.RemoteExecutor\n  - Microsoft.DotNet.SharedFramework.Sdk\n- From [3.2.0-preview.25468.104 to 3.2.0-preview.25474.118][2]\n  - Microsoft.Web.Xdt\n- From [7.0.0-preview.2.46904 to 7.0.0-rc.47518][2]\n  - NuGet.Frameworks\n  - NuGet.Packaging\n  - NuGet.Versioning\n\r\n[marker]: <> (End:eb51cb75-96a8-4295-8ac8-323384295648)\r\n\r\n\n[1]: https://github.com/dotnet/dotnet/compare/2dea164f01...54303ce0f4\n\n[2]: https://github.com/dotnet/dotnet/compare/2dea164f01...04104ba742\n[marker]: <> (Start:Footer:CodeFlow PR)\r\n\r\n## Associated changes in source repos\r\n- https://github.com/dotnet/arcade/compare/2ee9fba87ff1d669ed2ca45e240577f509e72e6e...6275af47ebda0d394d4a5a401b77bc6f2304204a\n- https://github.com/dotnet/diagnostics/compare/23d4e5f6eadc48f12ce8cda6174e3a8b85e3c638...29b752ed624a2796726cbe9891c8627dd580002d\n- https://github.com/dotnet/efcore/compare/8a9e809d66e46e1a33cb801c3cbfa3334311fe00...a4f37c552c9cb3485a043783cfd52afd90c24bdf\n- https://github.com/dotnet/fsharp/compare/24b393cf84588a5f494c6f0ac8ab93b5e29a317b...984837bababb542c616bc05ac56b33eeec933818\n- https://github.com/dotnet/msbuild/compare/36b870ef0e3bc607c96e23f1f2d20125947be598...5480b47bbc592c6feedca7c57c9863ba01e0c52c\n- https://github.com/nuget/nuget.client/compare/28aa7988271232f1feec583cd7e0144ac8f42ee4...28eeb0947095a716b98b5c34454625708cb3ac76\n- https://github.com/dotnet/razor/compare/531047be237870e722971a39ec90a2b083ee106e...295eeb41b97a2920eed34684b2a687f05f302c3b\n- https://github.com/dotnet/roslyn/compare/990c727ee9c68e0cde642bef7c611e7ee8bf63f6...a01d4a05fe85952de3db03a745fab6f33e1ba12b\n- https://github.com/dotnet/runtime/compare/ebaebee8effb234f1ed276a7753c619df29dbb8d...0abfd8727b71f279d5718e753a70c4353afea774\n- https://github.com/dotnet/sdk/compare/a0aaff7f52071578bd6095e1887a564c19d97caf...b7b9812866f245761b3af8d526bede699e170efc\n- https://github.com/microsoft/vstest/compare/f7325aaca89a8391520519f97cd749a8be281544...f9fca5ca92f8ee36bd9f0274df79c1c1f40ae37a\n- https://github.com/dotnet/wpf/compare/27b82f60a76f1b3692d628838d42a786fe40b70f...f74ad8648cada953c13403d3801203c30ea33bac\n\r\n[marker]: <> (End:Footer:CodeFlow PR)","Url":"https://github.com/dotnet/aspnetcore/pull/63808","RelatedDescription":"Closed or merged PR \"[release/10.0-rc2] Source code updates from dotnet/dotnet\" (#63808)"},{"Id":"3454158495","IsPullRequest":true,"CreatedAt":"2025-09-25T15:34:07","Actor":"Copilot","Number":"63829","RawContent":null,"Title":"Fix erroneous `////` in default URL for blazorwasm --aad-b2c-instance parameter","State":"open","Body":"## Summary\n\nFixes the erroneous `https:////aadB2CInstance.b2clogin.com/` default value displayed in the help output for the `--aad-b2c-instance` parameter in the blazorwasm template.\n\n## Problem\n\nWhen running `dotnet new blazorwasm -h`, the `--aad-b2c-instance` parameter shows an invalid default URL with extra forward slashes:\n\n```\n--aad-b2c-instance <aad-b2c-instance>    The Azure Active Directory B2C instance to connect to (use with \n                                         IndividualB2C auth).\n                                         Type: string\n                                         Default: https:////aadB2CInstance.b2clogin.com/\n```\n\nThe `////` in the URL is clearly erroneous and confusing to users.\n\n## Root Cause\n\nThe `AAdB2CInstance` parameter in the template configuration only had a `\"replaces\"` property but no `\"defaultValue\"` property. This caused the template system to display the replacement value (which contains the erroneous `////`) as the default in help text.\n\n## Solution\n\nAdded a `\"defaultValue\": \"https://aadB2CInstance.b2clogin.com/\"` property with the correct URL format to the `AAdB2CInstance` parameter configuration. This follows the same pattern used by the existing `AADInstance` parameter, which also has a similar issue with `////` in its `replaces` value but shows the correct default because it has a proper `defaultValue`.\n\n## Result\n\nThe help output now correctly displays:\n\n```\n--aad-b2c-instance <aad-b2c-instance>    The Azure Active Directory B2C instance to connect to (use with \n                                         IndividualB2C auth).\n                                         Type: string\n                                         Default: https://aadB2CInstance.b2clogin.com/\n```\n\nTemplate creation and URL substitution continue to work correctly with both explicit parameter values and the default behavior.\n\nFixes #44669\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>Erroneous `////` in default URL for a blazorwasm template parameter</issue_title>\n> <issue_description>### Is there an existing issue for this?\n> \n> - [X] I have searched the existing issues\n> \n> ### Describe the bug\n> \n> This came up previously with an `appsettings.json` file, but I noticed it while exploring the parameters for the `blazorwasm` template, and I don't think that's been addressed yet.\r\n> \r\n> ![image](https://user-images.githubusercontent.com/5761601/200120409-a6188111-819a-4b24-91c3-451d3cdaaf5a.png)\r\n> \r\n> It appears to me that this was unintentional. I have a fork and branch at the ready for a PR to fix this issue [available here](https://github.com/dotnet/aspnetcore/compare/main...jdmallen:jdmallen/fix-broken-default-url).\n> \n> ### Expected Behavior\n> \n> I expected a correct and valid URL format to be supplied as a default value that clearly requires one.\n> \n> ### Steps To Reproduce\n> \n> Repro:\r\n> 1. Install latest .NET SDK (Host: 6.0.10, SDK: 6.0.402 as of this issue)\r\n> 1. Execute `dotnet new blazorwasm -h`\r\n> 1. Scroll down to parameter `--aad-b2c-instance`\r\n> 1. Note the \"Default\" value of `https:////aadB2CInstance.b2clogin.com/` verbatim and compare it to other default values on the screen.\n> \n> ### Exceptions (if any)\n> \n> _No response_\n> \n> ### .NET Version\n> \n> 6.0.402\n> \n> ### Anything else?\n> \n> It's also worth noting that there's a similar issue with the \"replaces\" value at [this line](https://github.com/jdmallen/aspnetcore/blob/6d041a013c48f3fa3bd8adeef39f91d730e01830/src/ProjectTemplates/Web.ProjectTemplates/content/ComponentsWebAssembly-CSharp/.template.config/template.json#L389), but since it has a \"defaultValue\" also configured, the URL with the `////` is not rendered to screen. I can fix that one, too, if you like, but figured I'd keep the commit focused.</issue_description>\n> \n> <agent_instructions>The fix is to add a default value https://aadB2CInstance.b2clogin.com/ in https://github.com/dotnet/aspnetcore/blob/main/src/ProjectTemplates/Web.ProjectTemplates/content/ComponentsWebAssembly-CSharp/.template.config/template.json#L193-L198 so the UI doesn't show the value it replaces.</agent_instructions>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> <comment_new><author>@</author><body>\n> Thanks for contacting us.\n> We're moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. Because it's not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \n> If we later determine, that the issue has no community involvement, or it's very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\n> To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> <comment_new><author>@</author><body>\n> Thanks for contacting us.\n> \n> We're moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \n> If we later determine, that the issue has no community involvement, or it's very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\n> To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> <comment_new><author>@</author><body>\n> We've moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> <comment_new><author>@danmoseley</author><body>\n> is this the kind of thing we should mark help wanted? or it needs design.</body></comment_new>\n> <comment_new><author>@javiercn</author><body>\n> The relevant file is https://github.com/dotnet/aspnetcore/blob/main/src/ProjectTemplates/Web.ProjectTemplates/content/ComponentsWebAssembly-CSharp/wwwroot/appsettings.json</body></comment_new>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#44894\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💡 You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs.","Url":"https://github.com/dotnet/aspnetcore/pull/63829","RelatedDescription":"Open PR \"Fix erroneous `////` in default URL for blazorwasm --aad-b2c-instance parameter\" (#63829)"},{"Id":"3453905085","IsPullRequest":true,"CreatedAt":"2025-09-25T14:29:09","Actor":"Copilot","Number":"63828","RawContent":null,"Title":"Remove inline JS event handler from NavMenu component in Blazor Web App template","State":"open","Body":"Fixes #XXXXX\n\nThis PR removes the inline JavaScript event handler from the NavMenu component in the Blazor Web App project template and replaces it with a proper ES6 module approach to improve Content Security Policy (CSP) compliance.\n\n## Problem\n\nThe current NavMenu component contains an inline `onclick` attribute:\n\n```html\n<div class=\"nav-scrollable\" onclick=\"document.querySelector('.navbar-toggler').click()\">\n```\n\nThis inline event handler requires CSP configurations to include `'unsafe-hashes'` with a specific SHA-256 hash, which goes against web security best practices. The HTML specification discourages this approach as it can lead to security vulnerabilities.\n\n## Solution\n\n- **Created `NavMenu.razor.js`**: Added an ES6 module that properly attaches a click event listener to the navigation scrollable area\n- **Updated `NavMenu.razor`**: \n  - Added script module reference: `<script type=\"module\" src=\"@Assets[\"Components/Layout/NavMenu.razor.js\"]\"></script>`\n  - Added ID to target element: `<div id=\"nav-scrollable\" class=\"nav-scrollable\">`\n  - Removed problematic inline onclick attribute\n\nThe JavaScript module code:\n```javascript\n// Handle navigation menu toggle\nconst navScrollable = document.getElementById(\"nav-scrollable\");\nconst navToggler = document.querySelector(\".navbar-toggler\");\n\nif (navScrollable && navToggler) {\n    navScrollable.addEventListener(\"click\", function() {\n        navToggler.click();\n    });\n}\n```\n\n## Benefits\n\n- **Enhanced Security**: Eliminates the need for `'unsafe-hashes'` in CSP configurations\n- **Best Practices**: Follows modern web development standards by separating JavaScript from HTML\n- **Consistency**: Matches the pattern already used by other components like `ReconnectModal.razor.js` and `PasskeySubmit.razor.js`\n- **Maintainability**: JavaScript logic is now in a dedicated module file\n\n## Testing\n\nVerified that the navigation toggle functionality works correctly in both desktop and mobile responsive views. The hamburger menu opens and closes the navigation as expected, maintaining full backward compatibility.\n\n<screenshot>\nDesktop view showing full navigation:\n![Desktop Navigation](https://github.com/user-attachments/assets/77ccf4b0-7d49-4dca-88fd-c65ece2c7feb)\n\nMobile view with hamburger menu:\n![Mobile Closed](https://github.com/user-attachments/assets/c9d94227-14d5-449e-9b45-fb84f2a00a80)\n\nMobile view with navigation expanded:\n![Mobile Open](https://github.com/user-attachments/assets/0ce6cc98-1100-430c-91ec-eff15134d873)\n</screenshot>\n\n## Impact\n\nThis change will help developers implement proper Content Security Policies without needing to accommodate inline event handlers, improving the overall security posture of Blazor Web applications created from the template.\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>Remove the inline JS event handler in the `NavMenu` component?</issue_title>\n> <issue_description>### Is there an existing issue for this?\n> \n> - [x] I have searched the existing issues\n> \n> ### Is your feature request related to a problem? Please describe the problem.\n> \n> cc: @danroth27 ... IIRC, we chatted about this a few months back. I'm working on CSP guidance updates, and I'm going to add some guidance on it because it 💥 for a CSP that doesn't address it with the most recent templates.\n> \n> The `NavMenu` has ...\n> \n> ```razor\n> <div ... onclick=\"document.querySelector('.navbar-toggler').click()\">\n> ```\n> \n> Cross-ref: https://github.com/dotnet/aspnetcore/blob/main/src/ProjectTemplates/Web.ProjectTemplates/content/BlazorWeb-CSharp/BlazorWeb-CSharp/Components/Layout/NavMenu.razor#L15\n> \n> ... and it's only in the BWA project template, not the Blazor WebAssembly template.\n> \n> This will require me to include CSP guidance with ...\n> \n> ```html\n> 'unsafe-hashes' 'sha256-qnHnQs7NjQNHHNYv/I9cW+I62HzDJjbnyS/OFzqlix0='\n> ```\n> \n> The [HTML spec remarks](https://www.w3.org/TR/CSP3/#unsafe-hashes-usage) seem to be saying, '*Don't do it!*' 😄 Not so much for the exact example that they give (`<a onclick=\"transferAllMyMoney()\">Transfer</a>` ... `<script>transferAllMyMoney()</script>`), but just because it implies that it might be ok to take the approach generally.\n> \n> I don't see an open issue to consider removing it.\n> \n> ### Describe the solution you'd like\n> \n> Get rid of the inline event handler, which would mirror spec guidance and allow us to drop our CSP guidance on it.\n> \n> ### Additional context\n> \n> _No response_</issue_description>\n> \n> <agent_instructions>https://github.com/dotnet/aspnetcore/blob/main/src/ProjectTemplates/Web.ProjectTemplates/content/BlazorWeb-CSharp/BlazorWebCSharp.1/Components/Layout/NavMenu.razor#L15\n> \n> Add a NavMenu.razor.js (it will be an ES6 module).\n> \n> Add the script in `NavMenu.razor` and have it find the element and attach a click event handler. You can give the element an ID if necessary to make it easy to find</agent_instructions>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#61075\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💡 You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs.","Url":"https://github.com/dotnet/aspnetcore/pull/63828","RelatedDescription":"Open PR \"Remove inline JS event handler from NavMenu component in Blazor Web App template\" (#63828)"},{"Id":"3453328187","IsPullRequest":true,"CreatedAt":"2025-09-25T14:20:31","Actor":"Copilot","Number":"63827","RawContent":null,"Title":"Add test to prevent regression of obsolete auth methods in Blazor WASM templates","State":"closed","Body":"Addresses issue #10518252 where the .NET 8 Blazor WASM template was reported to contain obsolete `SignOutSessionStateManager` methods.\n\n## Investigation Results\n\nUpon investigation, I found that **the issue has already been resolved** in the current templates. All Blazor WASM authentication templates now correctly use the modern `NavigateToLogout` approach:\n\n```csharp\npublic void BeginLogOut()\n{\n    Navigation.NavigateToLogout(\"authentication/logout\");\n}\n```\n\nInstead of the obsolete pattern that was reported:\n\n```csharp\nprivate async Task BeginLogout(MouseEventArgs args)\n{\n    await SignOutManager.SetSignOutState();\n    Navigation.NavigateTo(\"authentication/logout\");\n}\n```\n\n## Changes Made\n\nWhile the templates are already fixed, I've added a comprehensive test `BlazorWasmAuthTemplates_UseModernNavigateToLogoutMethod` to prevent regression. This test:\n\n- **Validates all authentication modes**: Individual, IndividualB2C, and SingleOrg\n- **Ensures modern implementation**: Verifies templates use `NavigateToLogout` method\n- **Prevents obsolete code**: Asserts no `SignOutManager`, `SetSignOutState`, or async logout patterns exist\n- **Covers method signatures**: Confirms the modern synchronous `BeginLogOut()` signature\n\n## Verification\n\nTested all template variations and confirmed they generate the correct modern authentication code:\n- ✅ Individual authentication (basic and program-main variants)\n- ✅ IndividualB2C authentication (basic and program-main variants)  \n- ✅ SingleOrg authentication (basic and program-main variants)\n\nThe test ensures that future template updates won't accidentally reintroduce the obsolete `SignOutSessionStateManager` patterns that were problematic in earlier versions.\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>.Net 8 Blasor Wasm template contains obsolete methods (SignOutStateManager)</issue_title>\n> <issue_description>_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Net-8-Blasor-Wasm-template-contains-obs/10518252)._\n> \n> ---\n> The Blazor Wasm template in visual studio 17.8 for .Net 8 contains SignOutSessionStateManager which has been listed as obsolete since .Net 6.  This method:\n> \n>     private async Task BeginLogout(MouseEventArgs args)\n>     {\n>         await SignOutManager.SetSignOutState();\n>         Navigation.NavigateTo(\"authentication/logout\");\n>     }\n> \n> Should be:\n> \n>     private void BeginLogout(MouseEventArgs args)\n>     {\n>         Navigation.NavigateToLogout(\"authentication/logout\");\n>     }\n> \n> Also, it makes zero sense that the template contains identical LoginDisplay.razor pages in both the Shared and Layout folders, and is overall a step backwards from the .Net 7 templates. \n> \n> It makes no sense that template regressions passed through QA like this.\n> \n> ---\n> ### Original Comments\n> \n> #### Feedback Bot on 11/16/2023, 06:43 PM: \n> \n> (private comment, text removed)\n> #### Stephen Halter [MSFT] on 11/17/2023, 10:45 AM: \n> \n> (private comment, text removed)\n> #### pfisher [MSFT] on 11/17/2023, 10:57 AM: \n> \n> (private comment, text removed)\n> \n> ---\n> ### Original Solutions\n> (no solutions)</issue_description>\n> \n> <agent_instructions>Update the template to use NavigateToLogout\n> \n> https://github.com/dotnet/aspnetcore/blob/063ba34bff5a3b6ee2f54cafe83b04bd3d4a5c06/src/Components/WebAssembly/WebAssembly.Authentication/src/NavigationManagerExtensions.cs#L22</agent_instructions>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> <comment_new><author>@</author><body>\n> We've moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#52781\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n✨ Let Copilot coding agent [set things up for you](https://github.com/dotnet/aspnetcore/issues/new?title=✨+Set+up+Copilot+instructions&body=Configure%20instructions%20for%20this%20repository%20as%20documented%20in%20%5BBest%20practices%20for%20Copilot%20coding%20agent%20in%20your%20repository%5D%28https://gh.io/copilot-coding-agent-tips%29%2E%0A%0A%3COnboard%20this%20repo%3E&assignees=copilot) — coding agent works faster and does higher quality work when set up for your repo.\n","Url":"https://github.com/dotnet/aspnetcore/pull/63827","RelatedDescription":"Closed or merged PR \"Add test to prevent regression of obsolete auth methods in Blazor WASM templates\" (#63827)"},{"Id":"3453299286","IsPullRequest":true,"CreatedAt":"2025-09-25T12:00:04","Actor":"Copilot","Number":"63826","RawContent":null,"Title":"Add analyzer to prevent local functions accessing RenderTreeBuilder from parent scope","State":"open","Body":"Fixes #53269\n\n## Problem\n\nLocal functions defined within `@{ ... }` blocks in Razor components can capture `RenderTreeBuilder` instances from their parent scope, leading to incorrect rendering behavior. This pattern appears to work but actually corrupts the rendering output instead of properly writing to child component render fragments.\n\n```razor\n@{\n    void RenderTree(int depth, int maxDepth)\n    {\n        if (depth >= maxDepth) return;\n        \n        <FluentTreeItem Text=\"item\">\n            @{ RenderTree(depth + 1, maxDepth); }  // ❌ Uses wrong builder\n        </FluentTreeItem>\n    }\n}\n```\n\nThe issue occurs because C# scoping rules cause the local function to capture the `RenderTreeBuilder` from the parent context rather than using the builder that should be passed to the `RenderFragment`.\n\n## Solution\n\nThis PR adds a new analyzer diagnostic **ASP0029** that detects local functions which access `RenderTreeBuilder` methods from captured variables in their parent scope.\n\n### New Diagnostic: ASP0029\n\n- **Severity**: Error\n- **Category**: Usage  \n- **Message**: \"Local function '{functionName}' accesses RenderTreeBuilder from parent scope, which can cause incorrect rendering behavior. Consider making it a static method or regular instance method that takes RenderTreeBuilder as a parameter.\"\n\n### Detection Logic\n\nThe analyzer intelligently identifies problematic patterns while allowing safe alternatives:\n\n✅ **Allowed (Safe Patterns)**:\n- Static local functions (cannot capture from parent scope)\n- Local functions that take `RenderTreeBuilder` as a parameter\n- Local functions that don't use `RenderTreeBuilder` at all\n\n❌ **Detected (Problematic Patterns)**:\n- Local functions accessing `RenderTreeBuilder` from captured variables\n- Nested local functions with the same issue\n\n### Example\n\n**Before (causes runtime issues):**\n```csharp\nvar builder = new RenderTreeBuilder();\n\nvoid LocalFunction()  // ❌ ASP0029: Captures builder from parent scope\n{\n    builder.OpenElement(0, \"div\");\n    builder.CloseElement();\n}\n```\n\n**After (recommended approaches):**\n```csharp\n// Option 1: Static local function with parameter\nstatic void LocalFunction(RenderTreeBuilder builder)  // ✅ Safe\n{\n    builder.OpenElement(0, \"div\");\n    builder.CloseElement();\n}\n\n// Option 2: Regular method\npublic RenderFragment CreateFragment() => builder =>  // ✅ Safe\n{\n    builder.OpenElement(0, \"div\");\n    builder.CloseElement();\n};\n```\n\n## Testing\n\nAdded comprehensive test coverage with 7 test cases covering:\n- Local functions with captured RenderTreeBuilder (detected)\n- Static local functions (allowed)\n- Local functions with RenderTreeBuilder parameters (allowed)\n- Nested local function scenarios\n- Local functions without RenderTreeBuilder usage (allowed)\n\nAll existing RenderTreeBuilder analyzer tests continue to pass.\n\n## Impact\n\nThis change helps developers avoid a subtle but problematic pattern that can cause rendering corruption in Blazor applications. The analyzer provides clear, actionable feedback at compile time rather than allowing runtime failures.\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n\n----\n\n*This section details on the original issue you should resolve*\n\n<issue_title>Prevent use of local functions inside markup</issue_title>\n<issue_description>**[Edit by @SteveSandersonMS] This issue was originally reported by @verdie-g as follows below the line. On investigation the problem is that C# has added a new syntax that doesn't work in Razor.**\r\n\r\nThe Razor compiler allows arbitrary C# code within `@{ ... }` blocks. Unfortunately this means it allows the use of local functions in a way that confuses the parsing logic, causing it to use the wrong `__builder` instance. Example:\r\n\r\n```razor\r\n<FluentTreeView>\r\n@{\r\n    RenderTree(0, 3);\r\n\r\n    void RenderTree(int depth, int maxDepth)\r\n    {\r\n        if (depth >= maxDepth)\r\n        {\r\n            return;\r\n        }\r\n\r\n        <FluentTreeItem Text=\"item\">\r\n            @{ RenderTree(depth + 1, maxDepth); }\r\n        </FluentTreeItem>\r\n    }\r\n}\r\n</FluentTreeView>\r\n```\r\n\r\nHere, the child content of `FluentTreeItem` should be compiled as a `RenderFragment` that acts on whatever `RenderTreeBuilder` is passed in. But because of C# scoping rules, the `RenderFragment` actually acts on the `__builder` captured from its parent context, so it is simply corrupting the output instead of doing something useful.\r\n\r\nPossible solutions:\r\n\r\n1. We could ask for the Razor compiler block the use of local functions inside `@{ ... }` specifically. However that's probably impractical because Razor doesn't parse the contents of `@{ ... }`.\r\n   * Perhaps it is achievable as an analyzer that acts on the code *after* the Razor compiler has generated it.\r\n2. We could do something in the runtime to detect more generally any cases where the wrong `RenderTreeBuilder` is invoked. For example if the runtime set an \"rendering in progress\" flag on it before it starts rendering and synchronously unsets that flag at the end of rendering, then it would have caught this case because child components are rendered afterwards (not recursively), so when the child is rendered it would see it's trying to write to a builder that does not have the \"rendering in progress\" flag set.\r\n   * Drawback: how do we even check if this flag is set? We would **not** check it as part of each rendering instruction. There's plenty of evidence that rendering perf is sensitive to that kind of thing (and we can't just check it in development either).\r\n   * Possible solution: instead of just setting a flag, actually null out the referencing to the underlying buffer (storing it in some other field to be swapped back later). Then if anyone tries to write to the builder while it's not marked as rendering-in-progress, they will get a `NullReferenceException` instead of corrupt output. Obviously that's not super easy to understand but avoids any perf cost.\r\n\r\n---------\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI'm rendering a blazor wasm component using a recursive C# method and while it's working fine using C# only (`OpenComponent`, `AddAttribute`, etc.), it fails when returning HTML from that recursive method.\r\n\r\n### Expected Behavior\r\n\r\nI'm expecting a tree structure to be built and clicking on a line should expand its children but it seems like the children are not rendered and an error is thrown on click.\r\n\r\n### Steps To Reproduce\r\n\r\nI was not able to reproduce the issue without the library [fluentui-blazor](https://github.com/microsoft/fluentui-blazor).\r\n\r\n```bash\r\ndotnet new install Microsoft.FluentUI.AspNetCore.Templates\r\ndotnet new fluentblazorwasm --name aspnetcore-issue-53269\r\ncd aspnetcore-issue-53269\r\n```\r\nThen replace `Home.razor` with\r\n```cs\r\n@page \"/\"\r\n\r\n<PageTitle>Home</PageTitle>\r\n\r\n<FluentTreeView>\r\n@{\r\n    RenderTree(0, 3);\r\n\r\n    void RenderTree(int depth, int maxDepth)\r\n    {\r\n        if (depth >= maxDepth)\r\n        {\r\n            return;\r\n        }\r\n\r\n        <FluentTreeItem Text=\"item\">\r\n            @{ RenderTree(depth + 1, maxDepth); }\r\n        </FluentTreeItem>\r\n    }\r\n}\r\n</FluentTreeView>\r\n```\r\nClick on the item generated and check the error in the console.\r\n\r\nIt could be an error with the library (initially reported here https://github.com/microsoft/fluentui-blazor/issues/1289) but this code works fine:\r\n```cs\r\n@page \"/\"\r\n\r\n<PageTitle>Home</PageTitle>\r\n\r\n<FluentTreeView>\r\n    @RenderTree(0, 3)\r\n</FluentTreeView>\r\n\r\n@code {\r\n    public static RenderFragment RenderTree(int depth, int maxDepth)\r\n    {\r\n        return builder =>\r\n        {\r\n            if (depth >= maxDepth)\r\n            {\r\n                return;\r\n            }\r\n\r\n            builder.OpenComponent<FluentTreeItem>(0);\r\n            builder.AddAttribute(1, \"Text\", \"item\");\r\n            builder.AddAttribute(2, \"ChildContent\", RenderTree(depth + 1, maxDepth));\r\n            builder.CloseComponent();\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n### Exceptions (if any)\r\n\r\n```\r\nblazor.webassembly.js:1 crit: Microsoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRendere...\n\n</details>\nFixes dotnet/aspnetcore#53269\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n✨ Let Copilot coding agent [set things up for you](https://github.com/dotnet/aspnetcore/issues/new?title=✨+Set+up+Copilot+instructions&body=Configure%20instructions%20for%20this%20repository%20as%20documented%20in%20%5BBest%20practices%20for%20Copilot%20coding%20agent%20in%20your%20repository%5D%28https://gh.io/copilot-coding-agent-tips%29%2E%0A%0A%3COnboard%20this%20repo%3E&assignees=copilot) — coding agent works faster and does higher quality work when set up for your repo.\n","Url":"https://github.com/dotnet/aspnetcore/pull/63826","RelatedDescription":"Open PR \"Add analyzer to prevent local functions accessing RenderTreeBuilder from parent scope\" (#63826)"},{"Id":"3453293621","IsPullRequest":true,"CreatedAt":"2025-09-25T11:58:07","Actor":"Copilot","Number":"63825","RawContent":null,"Title":"[Blazor] Provide access to HttpConnectionDispatcherOptions in AddInteractiveServerRenderMode","State":"open","Body":"This PR addresses the limitation where users of `AddInteractiveServerRenderMode` had no clean way to configure the underlying SignalR `HttpConnectionDispatcherOptions`. Previously, users had to resort to workarounds using metadata inspection to access properties like `CloseOnAuthenticationExpiration`.\n\n## Problem\n\nBefore this change, configuring SignalR connection options required this workaround:\n\n```csharp\nendpoints.MapRazorComponents<App>()\n    .AddInteractiveServerRenderMode()\n    .Add(e =>\n    {\n        var metadata = e.Metadata;\n        var dispatcherOptions = metadata.OfType<HttpConnectionDispatcherOptions>().FirstOrDefault();\n        if (dispatcherOptions != null)\n        {\n            dispatcherOptions.CloseOnAuthenticationExpiration = true;\n        }\n    });\n```\n\nThis approach was:\n- Not type-safe\n- Hard to discover\n- Fragile and reliant on implementation details\n- Inconsistent with the API provided by `MapBlazorHub`\n\n## Solution\n\nAdded a new `ConfigureConnection` property to `ServerComponentsEndpointOptions` that accepts an `Action<HttpConnectionDispatcherOptions>`, enabling direct configuration of the SignalR connection dispatcher options.\n\nNow users can configure connection options cleanly:\n\n```csharp\nendpoints.MapRazorComponents<App>()\n    .AddInteractiveServerRenderMode(options =>\n    {\n        options.ConfigureConnection = dispatcherOptions =>\n        {\n            dispatcherOptions.CloseOnAuthenticationExpiration = true;\n            dispatcherOptions.AllowStatefulReconnects = true;\n            dispatcherOptions.ApplicationMaxBufferSize = 1024 * 1024;\n            // Configure any other connection options as needed\n        };\n    });\n```\n\n## Implementation Details\n\n- **ServerComponentsEndpointOptions**: Added `ConfigureConnection` property with comprehensive XML documentation\n- **CircuitEndpointProvider**: Modified to conditionally use the configuration action when mapping the Blazor hub via `MapBlazorHub`\n- **Backward compatibility**: Existing code continues to work unchanged - when `ConfigureConnection` is null, the original behavior is preserved\n- **API consistency**: Matches the pattern already established by `MapBlazorHub` overloads that accept dispatcher options configuration\n- **Zero overhead**: No performance impact when the feature is not used\n\n## Testing\n\nAdded unit tests to verify that the `ConfigureConnection` property can be set and correctly configures the dispatcher options, including the primary use case of setting `CloseOnAuthenticationExpiration`.\n\nFixes the issue where users needed to access `HttpConnectionDispatcherOptions` in `AddInteractiveServerRenderMode` but had no clean API to do so.\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>[Blazor] Provide access to the underlying SignalR HttpConnectionDispatcherOptions in AddInteractiveServerRenderMode</issue_title>\n> <issue_description>This was possible with MapBlazorHub, but it doesn't seem possible with AddInteractiveServerRenderMode.\n> \n> Calling MapBlazorHub won't work since that will try to register another endpoint.\n> \n> Right now, this is the best way to do it:\n> ```\n>     .Add(e =>\n>     {\n>         var metadata = e.Metadata;\n>         var dispatcherOptions = metadata.OfType<HttpConnectionDispatcherOptions>().FirstOrDefault();\n>         if (dispatcherOptions != null)\n>         {\n>             dispatcherOptions.CloseOnAuthenticationExpiration = true;\n>         }\n>     });\n> ```</issue_description>\n> \n> <agent_instructions>This should be part of\n> https://github.com/dotnet/aspnetcore/blob/063ba34bff5a3b6ee2f54cafe83b04bd3d4a5c06/src/Components/Server/src/Builder/ServerRazorComponentsEndpointConventionBuilderExtensions.cs#L33-L35\n> \n> https://github.com/dotnet/aspnetcore/blob/063ba34bff5a3b6ee2f54cafe83b04bd3d4a5c06/src/Components/Server/src/Builder/ServerComponentsEndpointOptions.cs#L11\n> \n> Can be expanded with an ` Action<HttpConnectionDispatcherOptions>` property to configure the dispatcher options that we then pass to MapBlazorHub.\n> \n> When we map the hub https://github.com/dotnet/aspnetcore/blob/063ba34bff5a3b6ee2f54cafe83b04bd3d4a5c06/src/Components/Server/src/DependencyInjection/ServerRazorComponentsBuilderExtensions.cs#L71-L72\n> \n> We pass the options to configure them.</agent_instructions>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#63520\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💡 You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs.","Url":"https://github.com/dotnet/aspnetcore/pull/63825","RelatedDescription":"Open PR \"[Blazor] Provide access to HttpConnectionDispatcherOptions in AddInteractiveServerRenderMode\" (#63825)"},{"Id":"3453278024","IsPullRequest":true,"CreatedAt":"2025-09-25T11:53:03","Actor":"Copilot","Number":"63824","RawContent":null,"Title":"Add Blazor analyzer to detect layout components that reference themselves","State":"open","Body":"## Summary\n\nAdds a new Blazor analyzer (`LayoutCycleAnalyzer`) to detect when layout components create infinite rendering loops by referencing themselves through the `[Layout]` attribute.\n\n## Problem\n\nWhen a layout component references itself via the `[Layout]` attribute, it creates an infinite rendering loop at runtime. This commonly occurs when:\n\n1. An `_Imports.razor` file contains `@layout MyLayout`\n2. `MyLayout.razor` is defined in a subfolder and extends `LayoutComponentBase`\n\nThis results in generated code like:\n\n```csharp\n[Layout(typeof(MyLayout))]\npublic class MyLayout : LayoutComponentBase\n{\n}\n```\n\nThe `LayoutView.Render()` method follows the layout chain indefinitely, causing a stack overflow at runtime.\n\n## Solution\n\nThis PR introduces compile-time detection via a new analyzer:\n\n- **Diagnostic ID**: `BL0010` (Error severity)\n- **Detection**: Identifies types extending `LayoutComponentBase` that have `LayoutAttribute` pointing to themselves\n- **Message**: \"Layout component '{0}' has a [Layout] attribute that references itself, which will cause an infinite rendering loop.\"\n\n## Example\n\n**Before** (runtime failure):\n```csharp\n[Layout(typeof(MyLayout))]\npublic class MyLayout : LayoutComponentBase\n{\n    // This compiles but crashes at runtime\n}\n```\n\n**After** (compile-time error):\n```\nerror BL0010: Layout component 'MyLayout' has a [Layout] attribute that references itself, which will cause an infinite rendering loop.\n```\n\n## Changes\n\n- Added `LayoutCycleAnalyzer` with comprehensive cycle detection logic\n- Extended `ComponentSymbols` and `ComponentsApi` to support layout-related types\n- Added `BL0010` diagnostic descriptor with localized resources\n- Added test coverage for all scenarios (self-reference, valid references, non-layout components)\n\n## Testing\n\nAll existing tests pass (64/64) with no regressions. Added 4 new tests covering:\n- ✅ Self-referencing layout component (reports diagnostic)\n- ✅ Layout component without attribute (no diagnostic)  \n- ✅ Layout component referencing different layout (no diagnostic)\n- ✅ Non-layout component with layout attribute (no diagnostic)\n\nFixes the infinite rendering loop issue by moving detection from runtime to compile-time, providing early feedback to developers.\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>[Blazor] Analyzer for detecting basic cycles in Layout components</issue_title>\n> <issue_description>If you put a `@Layout MyLayout` directive inside an `_Imports.razor` and `MyLayout.razor` is defined in a subfolder of that folder, you end up with something like this:\n> \n> ```\n> [Layout(MyLayout)]\n> public class MyLayout : LayoutBase\n> {\n> }\n> ```\n> \n> Creating an infinite rendering loop. We don't want to anything at runtime, but we can do something at compile time to detect this scenario.</issue_description>\n> \n> <agent_instructions>The analyzer will simply check that no type extending `LayoutBase` has a Layout attribute applied that points to itself.</agent_instructions>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#63519\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n✨ Let Copilot coding agent [set things up for you](https://github.com/dotnet/aspnetcore/issues/new?title=✨+Set+up+Copilot+instructions&body=Configure%20instructions%20for%20this%20repository%20as%20documented%20in%20%5BBest%20practices%20for%20Copilot%20coding%20agent%20in%20your%20repository%5D%28https://gh.io/copilot-coding-agent-tips%29%2E%0A%0A%3COnboard%20this%20repo%3E&assignees=copilot) — coding agent works faster and does higher quality work when set up for your repo.\n","Url":"https://github.com/dotnet/aspnetcore/pull/63824","RelatedDescription":"Open PR \"Add Blazor analyzer to detect layout components that reference themselves\" (#63824)"},{"Id":"3453273280","IsPullRequest":true,"CreatedAt":"2025-09-25T11:51:40","Actor":"Copilot","Number":"63823","RawContent":null,"Title":"Fix Blazor Web App template: Remove Layout namespace prefix from Routes.razor","State":"open","Body":"Fixes #[issue_number]\n\nThe Blazor Web App template was inconsistent with other Blazor templates by requiring the \"Layout.\" namespace prefix when referencing `MainLayout` in Routes.razor, even though the Layout namespace was already imported in `_Imports.razor`.\n\n## Problem\n\nBefore this fix, the Blazor Web App template generated Routes.razor with:\n\n```razor\n<RouteView RouteData=\"routeData\" DefaultLayout=\"typeof(Layout.MainLayout)\" />\n<AuthorizeRouteView RouteData=\"routeData\" DefaultLayout=\"typeof(Layout.MainLayout)\">\n```\n\nThis was inconsistent with the Blazor WebAssembly template, which correctly uses:\n\n```razor\n<RouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\"/>\n```\n\nThe inconsistency was causing documentation issues and creating a poor developer experience.\n\n## Solution\n\nThis change removes the unnecessary \"Layout.\" prefix from both `RouteView` and `AuthorizeRouteView` components in Routes.razor:\n\n```diff\n- <AuthorizeRouteView RouteData=\"routeData\" DefaultLayout=\"typeof(Layout.MainLayout)\">\n+ <AuthorizeRouteView RouteData=\"routeData\" DefaultLayout=\"typeof(MainLayout)\">\n\n- <RouteView RouteData=\"routeData\" DefaultLayout=\"typeof(Layout.MainLayout)\" />\n+ <RouteView RouteData=\"routeData\" DefaultLayout=\"typeof(MainLayout)\" />\n```\n\nThe Layout namespace is already properly imported in `_Imports.razor` through conditional compilation directives that handle all template scenarios:\n- Server-only: `@using ProjectName.Components.Layout`\n- WebAssembly with per-page interactivity: `@using ProjectName.Components.Layout`  \n- WebAssembly with global interactivity: `@using ProjectName.Client.Layout`\n\n## Testing\n\nVerified that all major template configurations work correctly:\n- ✅ Server-only (`dotnet new blazor`)\n- ✅ WebAssembly per-page (`dotnet new blazor -int WebAssembly`)\n- ✅ WebAssembly global (`dotnet new blazor -int WebAssembly -ai`)\n- ✅ Authentication (`dotnet new blazor -au Individual`)\n\nAll generated projects compile successfully and behave consistently with other Blazor templates.\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>Blazor Web App template: The `Layout` folder (namespace) isn't present in the `_Imports` file</issue_title>\n> <issue_description>### Is there an existing issue for this?\r\n> \r\n> - [X] I have searched the existing issues\r\n> \r\n> ### Is your feature request related to a problem? Please describe the problem.\r\n> \r\n> In prior releases (Blazor Server), the `Shared` folder namespace was placed in the `_Imports` file. This release for BWAs, only the `Components` folder is present. This results in the incongruous situation where \"`Layout.`\" has to be supplied on `DefaultLayout` ...\r\n> \r\n> ```razor\r\n> <RouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(Layout.MainLayout)\" />\r\n> ```\r\n> \r\n> ... which wasn't required before and still isn't required for Blazor WebAssembly apps. It's [breaking the docs](https://github.com/dotnet/AspNetCore.Docs/issues/31170) and requiring further versioned content.\r\n> \r\n> ### Describe the solution you'd like\r\n> \r\n> Consider adding it to the `_Imports` file ...\r\n> \r\n> ```razor\r\n> @using BlazorWeb_CSharp.Components.Layout\r\n> ```\r\n> \r\n> Remove \"`Layout.`\" from the two `DefaultLayout` params in `Routes.razor`.\r\n> \r\n> ### Additional context\r\n> \r\n> ***BTW*** .... It seems like if the components folder is plural (`Components`) and the routable components folder is plural (`Pages`) that the layout folder name should also be plural (`Layouts`).</issue_description>\n> \n> <agent_instructions>Add @using BlazorWeb_CSharp.Components.Layout to `_Imports.razor`\n> \n> Remove \"Layout.\" from the two DefaultLayout params in Routes.razor.</agent_instructions>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> <comment_new><author>@</author><body>\n> Thanks for contacting us.\n> \n> We're moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \n> If we later determine, that the issue has no community involvement, or it's very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\n> To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> <comment_new><author>@</author><body>\n> Thanks for contacting us.\n> \n> We're moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \n> If we later determine, that the issue has no community involvement, or it's very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\n> To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#52478\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💡 You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs.","Url":"https://github.com/dotnet/aspnetcore/pull/63823","RelatedDescription":"Open PR \"Fix Blazor Web App template: Remove Layout namespace prefix from Routes.razor\" (#63823)"},{"Id":"3453257973","IsPullRequest":true,"CreatedAt":"2025-09-25T11:47:33","Actor":"Copilot","Number":"63822","RawContent":null,"Title":"Add analyzer to warn when using `required` or `init` on Blazor component parameters","State":"open","Body":"Adds a new analyzer (BL0010) that warns developers when using `required` or `init` modifiers on Blazor component parameter properties, addressing issues reported in #47824 and #44974.\n\n## Problem\n\nCustomers have been attempting to use the `required` modifier on Blazor component parameters to ensure parameters have values, but this doesn't work as expected because:\n\n1. **Blazor parameters are set via reflection** - Component parameters don't get assigned during instantiation but through `ParameterView.SetParameterProperties()`, which bypasses `required` restrictions\n2. **Misleading behavior** - The `required` modifier makes nullability warnings disappear but provides no actual guarantees\n3. **Future breaking changes** - When #29550 is implemented (moving away from reflection), `required`/`init` could cause compilation errors\n\n## Solution\n\nThe new analyzer detects both `required` and `init` modifiers on `[Parameter]` properties and suggests using the `[EditorRequired]` attribute instead:\n\n```csharp\npublic class MyComponent : ComponentBase\n{\n    // ❌ Warns: BL0010 - Component parameter should not use 'required' modifier\n    [Parameter] public required string Name { get; set; }\n    \n    // ❌ Warns: BL0010 - Component parameter should not use 'init' modifier  \n    [Parameter] public string Value { get; init; }\n    \n    // ✅ Recommended approach\n    [Parameter, EditorRequired] public string Title { get; set; }\n    \n    // ✅ Non-parameter properties are ignored\n    public required string InternalProperty { get; set; }\n}\n```\n\n## Implementation Details\n\n- **Diagnostic ID**: BL0010\n- **Severity**: Warning  \n- **Category**: Usage\n- **Detection**: Analyzes property syntax trees to identify `required`/`init` modifiers on `[Parameter]` properties\n- **Scope**: Only targets component parameters, ignores regular properties\n- **Message**: Suggests using `[EditorRequired]` attribute as the proper alternative\n\nThe analyzer integrates seamlessly with the existing ASP.NET Core analyzer infrastructure and follows established patterns for diagnostic reporting and localization.\n\nFixes #48051\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>[Blazor] Analyzer to warn when using `required` or `init` on Blazor component properties</issue_title>\n> <issue_description>## Background\r\n> \r\n> We've seen a few issue reports (e.g., dotnet/aspnetcore#47824, dotnet/aspnetcore#44974) where customers attempt to use the `required` modifier on Blazor component parameter properties to ensure that the parameter will definitely have a value assigned to it.\r\n> \r\n> ## Why this is a problem\r\n> \r\n> This is not a supported pattern (and it likely never will be) because Blazor component parameters do not get assigned upon component instantiation. Instead, a `ParameterView` object gets passed to the component's `SetParametersAsync` method, which updates parameter property values accordingly. The `required` modifier has no bearing on whether the parameter will have an entry in the `ParameterView`. Furthermore, even for parameters that _do_ have `ParameterView` entries, their properties won't get values assigned until long after what the `required` modifier is supposed to guarantee.\r\n> \r\n> Currently, using the `required` modifier in a Blazor component doesn't break anything, because any component extending `ComponentBase` (or otherwise manually invoking `ParameterView.SetParameterProperties()`) gets its properties set via refelction. But the `required` modifier can mislead component authors into thinking that it will make the property \"required\", especially considering it makes nullability warnings go away.\r\n> \r\n> Likewise, `init` has no effect in any component whose parameters are set using `ParameterView.SetParameterProperties()`, because reflection bypasses the \"init-only\" restriction.\r\n> \r\n> If we implement dotnet/aspnetcore#29550, then using `required` or `init` could cause compilation errors, since we won't be using reflection to bypass the restrictions that `required` or `init` impose. Therefore, for future-proofing reasons, it's in our best interest to ensure that customers avoid using these keywords on Blazor component properties.\r\n> \r\n> ## Proposed solution\r\n> \r\n> For all these reasons, we should consider implementing an analyzer that emits a warning whenever component properties use `required` or `init`. The analyzer message can suggest using the `[EditorRequired]` attribute instead.</issue_description>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> <comment_new><author>@</author><body>\n> Thanks for contacting us.\n> \n> We're moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \n> If we later determine, that the issue has no community involvement, or it's very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\n> To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> <comment_new><author>@</author><body>\n> Thanks for contacting us.\n> \n> We're moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \n> If we later determine, that the issue has no community involvement, or it's very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\n> To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> <comment_new><author>@</author><body>\n> Thanks for contacting us.\n> \n> We're moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \n> If we later determine, that the issue has no community involvement, or it's very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\n> To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#47864\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💡 You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs.","Url":"https://github.com/dotnet/aspnetcore/pull/63822","RelatedDescription":"Open PR \"Add analyzer to warn when using `required` or `init` on Blazor component parameters\" (#63822)"},{"Id":"3453256663","IsPullRequest":true,"CreatedAt":"2025-09-25T11:47:11","Actor":"Copilot","Number":"63821","RawContent":null,"Title":"Add ComponentFrameworkEndpointMetadata to identify Blazor infrastructure endpoints","State":"open","Body":"## Problem\n\nWhen configuring Blazor applications, calling `RequireAuthorization()` on the component builder affects all endpoints, including internal infrastructure endpoints like `_framework/opaque-redirect`, `_blazor/disconnect`, and `_blazor/initializers`. This creates a painful developer experience where users need to manually find and reconfigure these framework endpoints to exclude them from authorization requirements.\n\n```csharp\n// This affects ALL endpoints, including internal ones\nvar components = app.MapRazorComponents<App>()\n    .RequireAuthorization();\n\n// Users currently have to do painful manual endpoint discovery\ncomponents.Finally(builder => \n{\n    if (builder.DisplayName == \"Blazor disconnect\" || \n        builder.DisplayName == \"Blazor initializers\" ||\n        builder.RoutePattern?.RawText?.Contains(\"opaque-redirect\") == true)\n    {\n        builder.Metadata.Add(new AllowAnonymousAttribute());\n    }\n});\n```\n\n## Solution\n\nThis PR introduces `ComponentFrameworkEndpointMetadata`, a public sealed marker class that identifies Blazor's infrastructure endpoints. The metadata is automatically added to all framework endpoints during registration, providing a clean API for developers to target these endpoints specifically.\n\n**New API:**\n\n```csharp\nnamespace Microsoft.AspNetCore.Components.Endpoints;\n\n/// <summary>\n/// Metadata that identifies infrastructure endpoints for Blazor framework functionality.\n/// This marker is used to distinguish framework endpoints (like opaque redirection, \n/// disconnect, and JavaScript initializers) from regular component endpoints.\n/// </summary>\npublic sealed class ComponentFrameworkEndpointMetadata\n{\n}\n```\n\n**Enhanced Developer Experience:**\n\n```csharp\nvar components = app.MapRazorComponents<App>()\n    .RequireAuthorization();\n\n// Now developers can easily configure framework endpoints\ncomponents.Finally(builder => \n{\n    if (builder.Metadata.GetMetadata<ComponentFrameworkEndpointMetadata>() is not null)\n    {\n        builder.Metadata.Add(new AllowAnonymousAttribute());\n    }\n});\n```\n\n## Infrastructure Endpoints Enhanced\n\nThe following Blazor framework endpoints now include `ComponentFrameworkEndpointMetadata`:\n\n- **Opaque Redirection** (`_framework/opaque-redirect`) - Used for enhanced navigation redirects\n- **Blazor Server Disconnect** (`_blazor/disconnect`) - Used for circuit cleanup  \n- **Blazor Server Initializers** (`_blazor/initializers`) - Used for JavaScript initialization\n- **WebAssembly Framework Files** (`_framework/*`) - Used for serving WebAssembly static assets\n\n## Implementation Details\n\n- **Minimal Changes**: Added metadata only where endpoints are registered, no breaking changes\n- **Consistent Pattern**: All framework endpoints use the same identification mechanism  \n- **Future-Proof**: New framework endpoints can easily adopt this pattern\n- **Well-Tested**: Comprehensive unit tests verify metadata is correctly applied\n\nThis change provides the \"first class support\" requested in the issue for targeting framework endpoints without requiring users to understand implementation details or hardcode endpoint patterns.\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>[Blazor] Better way to configure some of the \"internal\" blazor endpoints</issue_title>\n> <issue_description>When you do things like call `RequireAuthorization` on the Blazor builder, all the endpoints start requiring auth, including endpoints like `_framework/opaque-redirect` or `_blazor/initializers`.\r\n> \r\n> Reconfiguring these endpoints is \"kind of painful\" (see code below) because you need to \"find the endpoint\" and then apply the attribute.\r\n> \r\n> ```csharp\r\n> var components = app.MapRazorComponents<App>()\r\n>     .AddInteractiveServerRenderMode()\r\n>     .RequireAuthorization();\r\n> \r\n> components.Add(e => {\r\n>     if(e is RouteEndpointBuilder rb)\r\n>     {\r\n>         if(rb.RoutePattern!.RawText!.Contains(\"_blazor\")){\r\n>             rb.Metadata.Add(new AllowAnonymousAttribute());\r\n>         }\r\n>     }\r\n> });\r\n> ```\r\n> \r\n> Ideally, we want to have some level of \"first class support\" for targeting these endpoints to add conventions to them without the user having to dig the details. Something like `ConfigureFrameworkEndpointsMetadata` that receives a callback to add metadata to those endpoints (we wouldn't expose stuff that allowed changing routes, etc. Since that's hardcoded in a bunch of places.\r\n> </issue_description>\n> \n> <agent_instructions>Make a list of all the \"infrastructure\" endpoints registered for a Blazor application, like the `disconnect` for Blazor Server, the Opaque redirect for enhanced nav and so on.\n> Create a type in `Components.Endpoints` we can use while building the set of endpoints to annotate those endpoints. The name can be `ComponentFrameworkEndpointMetadata`. It should be public and sealed, and contain no parameters or properties. It is only \"a marker\" to identify these special endpoints. Locate the places in code where we are defining these endpoints and make sure you add the attribute to them.</agent_instructions>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#57193\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💡 You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs.","Url":"https://github.com/dotnet/aspnetcore/pull/63821","RelatedDescription":"Open PR \"Add ComponentFrameworkEndpointMetadata to identify Blazor infrastructure endpoints\" (#63821)"},{"Id":"3453228362","IsPullRequest":true,"CreatedAt":"2025-09-25T11:38:09","Actor":"Copilot","Number":"63820","RawContent":null,"Title":"[Blazor] Add WithStaticAssets extension for IEndpointConventionBuilder","State":"open","Body":"Adds a new `WithStaticAssets` extension method that works with any `IEndpointConventionBuilder`, enabling endpoints that return `RazorComponentResult` and other custom endpoints to attach ResourceCollection metadata.\n\n## Problem\n\nPreviously, the `WithStaticAssets` method was only available on `RazorComponentsEndpointConventionBuilder`, limiting its use to Blazor component endpoints. This created a gap for scenarios where developers wanted to use `RazorComponentResult` in regular endpoints (like `MapGet`, `MapPost`, etc.) but still needed the same static asset metadata that Blazor component endpoints receive automatically.\n\n## Solution\n\nThis PR introduces `EndpointConventionBuilderResourceCollectionExtensions.WithStaticAssets<TBuilder>()` that:\n\n- Extends any `IEndpointConventionBuilder` to attach ResourceCollection metadata\n- Takes an `IEndpointRouteBuilder` parameter to resolve static assets from\n- Supports optional manifest path parameter for custom manifests\n- Automatically prevents duplicate metadata by checking for existing `ResourceAssetCollection`\n- Uses the same underlying infrastructure (`ResourceCollectionResolver`) as the existing Blazor-specific implementation\n\n## Usage\n\n```csharp\nvar app = WebApplication.CreateBuilder().Build();\napp.MapStaticAssets();\n\n// Now any endpoint can have static asset metadata\napp.MapGet(\"/page/{name}\", (string name) => \n   new RazorComponentResult<MyComponent>(new { Name = name }))\n   .WithStaticAssets(app);\n\napp.MapPost(\"/api/render\", (RenderRequest request) => \n   new RazorComponentResult<DynamicComponent>(request.Parameters))\n   .WithStaticAssets(app, \"custom-manifest.json\");\n```\n\n## Implementation Details\n\nThe new extension method:\n1. Creates a `ResourceCollectionResolver` from the provided `IEndpointRouteBuilder`\n2. Adds a convention that checks for existing metadata to avoid duplicates\n3. Resolves and attaches the same metadata types as the Blazor version: `ResourceAssetCollection`, `ResourcePreloadCollection`, and `ImportMapDefinition`\n4. Only applies metadata when static assets are actually registered for the specified manifest\n\nThis maintains full compatibility with existing code while extending the functionality to work with any endpoint convention builder.\n\nFixes #58937\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>[Blazor] Provide a helper to attach ResourceCollection metadata to other endpoints</issue_title>\n> <issue_description>This will be useful in the context of RazorComponentResult\n> \n> https://github.com/dotnet/aspnetcore/issues/58937#issuecomment-2796190411</issue_description>\n> \n> <agent_instructions>We want to provide a helper like that doesn't use `RazorComponentsEndpointConventionBuilder` but instead just extends `IEndpointRouteBuilder`\n> \n> https://github.com/dotnet/aspnetcore/blob/063ba34bff5a3b6ee2f54cafe83b04bd3d4a5c06/src/Components/Endpoints/src/Builder/RazorComponentsEndpointConventionBuilderExtensions.cs#L50-L64\n> \n> It can be simplified to only do the following. If not done, it should check there isn't a resource collection already on the metadata.\n> ```\n>             var convention = new ResourceCollectionConvention(new ResourceCollectionResolver(builder.EndpointRouteBuilder));\n>             builder.Add(convention.ApplyConvention);\n> ```</agent_instructions>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#63398\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💡 You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs.","Url":"https://github.com/dotnet/aspnetcore/pull/63820","RelatedDescription":"Open PR \"[Blazor] Add WithStaticAssets extension for IEndpointConventionBuilder\" (#63820)"},{"Id":"3453133253","IsPullRequest":true,"CreatedAt":"2025-09-25T11:08:17","Actor":"Alex-Sob","Number":"63819","RawContent":null,"Title":"Provide code analysis rule to detect if constraint is invalid for parameter type","State":"open","Body":"This PR should address #45218\r\n\r\nThis PR is adding a new code analysis rule `ASP0029: Invalid constraint for parameter type` for Minimal APIs. The diagnostic should be reported if route constraint cannot be used with the type of the corresponding parameter declared in the route handler, for example:\r\n\r\n```cs\r\napp.MapGet(\"/{id:datetime}\", (int id) => ...);\r\napp.MapGet(\"/{id:alpha}\", (int id) => ...);\r\napp.MapGet(\"/{id:bool}\", (int id) => ...);\r\n```\r\n\r\n**Rule**\r\n\r\n  | Rule id | Title | Description |\r\n  |---|---|---|\r\n  | ASP0029 | Invalid constraint for parameter type | The constraint '{0}' on parameter '{1}' can't be used with type '{2}' |\r\n\r\nThe following table lists constraints and types they can be used with:\r\n\r\n| Constraint | Types|\r\n|---|---|\r\n| alpha | `string` |\r\n| bool | `bool` |\r\n| datetime | `System.DateTime` |\r\n| decimal | `decimal` |\r\n| double | `double` |\r\n| guid | `System.Guid` |\r\n| long | `long`, `ulong` |\r\n| int | `byte`, `sbyte`, `short`, `ushort`, `int`, `uint`, `long`, `ulong` |\r\n| min(10) | `byte`, `sbyte`, `short`, `ushort`, `int`, `uint`, `long`, `ulong` |\r\n| max(10) | `byte`, `sbyte`, `short`, `ushort`, `int`, `uint`, `long`, `ulong` |\r\n| range(1,10) | `byte`, `sbyte`, `short`, `ushort`, `int`, `uint`, `long`, `ulong` |\r\n| length(10) | `string` |\r\n| minlength(10) | `string` |\r\n| maxlength(10) | `string` |\r\n| regex(\\w+) | `string` |\r\n| file | `string` |\r\n| nonfile | `string` |\r\n\r\n\r\n**Changes**\r\n\r\n- Added a new rule to `DiagnosticDescriptors.cs`:\r\n\r\n  > I used a helper method with `[CallerMemberName] string name = null` parameter that makes creating localizable resource strings unnecessary and simplifies creating diagnostic descriptors. Can I simplify all other descriptors this way?\r\n\r\n- Augmented `RouteHandlerAnalyzer` with route constraints analysis to check if a constraint specified for route parameter is invalid for the type of the corresponding parameter declared in the route handler.\r\n\r\n- Added unit tests.\r\n\r\n  > I used the same approach for unit tests here that I suggested separately in #63684","Url":"https://github.com/dotnet/aspnetcore/pull/63819","RelatedDescription":"Open PR \"Provide code analysis rule to detect if constraint is invalid for parameter type\" (#63819)"},{"Id":"3453041274","IsPullRequest":false,"CreatedAt":"2025-09-25T10:40:11","Actor":"jinzhao1127","Number":"63818","RawContent":null,"Title":"After installing RC2 Sdk and then install the main build Hosting bundle, the dotnet tool will be removed automatically from C:\\Program Files\\dotnet folder","State":"open","Body":"**REGRESSION INFO:**  Works well on  (.NET 10 RC 2 Sdk + .NET 10 RC 2 Hosting bundle) & (main Sdk + main Hosting bundle) \n\n**INSTALL STEPS:**\n1. Clean Win arm64 machine.\n1.  Install  .NET 10.0 RC 2 build SDK from .NET Release Tracker\n2. `dotnet --info`, it works well.\n3. Install the main build Hosting bundle from VMR pipeline\n    \n**Platform**\n- [x] Windows\n- [ ] macOS\n- [ ] Linux\n\n**Repro Steps**\n1. `dotnet --info` after installing the main Hosting bundle\n\n**Actual Result**\n<!--- Describe the failure that occurred and at one point in the reproduction steps it happened. --->\ndotnet is not recognized as an internal or external command.  After installing the Hosting bundle, the` dotnet tool  `will be removed automatically from `C:\\Program Files\\dotnet `folder\n<img width=\"1090\" height=\"285\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5f42f43b-ed24-44c0-8733-e2b89537a774\" />\n\n\n\n**Error Log**\n<!--- When possible, copy and paste the entire error that appears. --->\n\n**Expected Result:**\nAfter installing the hosting bundle, the `dotnet --info` should be displayed.","Url":"https://github.com/dotnet/aspnetcore/issues/63818","RelatedDescription":"Open issue \"After installing RC2 Sdk and then install the main build Hosting bundle, the dotnet tool will be removed automatically from C:\\Program Files\\dotnet folder\" (#63818)"},{"Id":"3452989143","IsPullRequest":true,"CreatedAt":"2025-09-25T10:25:18","Actor":"Copilot","Number":"63817","RawContent":null,"Title":"Fix DynamicComponent serialization with interactive render modes by adding TypeJsonConverter","State":"open","Body":"## Analysis of DynamicComponent Serialization Issue\n\nUnderstanding the problem: When `DynamicComponent` is used with interactive render modes in .NET 8, the `Type` parameter needs to be serialized to JSON, but `System.Type` instances cannot be serialized by System.Text.Json by default.\n\n## Plan\n\n- [x] Analyze the issue and understand the problem  \n- [x] Explore codebase structure and existing JsonSerializerOptions configuration  \n- [x] Create a custom JsonConverter for Type serialization/deserialization  \n- [x] Add the converter to JSRuntime's JsonSerializerOptions  \n- [x] Implement proper caching mechanism similar to DotNetDispatcher  \n- [x] Add cache clearing to hot reload mechanism\n- [x] Write tests to validate the fix  \n- [x] Ensure the converter handles edge cases (null, missing assemblies, etc.)  \n- [x] Test with actual DynamicComponent usage scenarios  \n- [x] Fix failing test case\n\n## Implementation Complete ✅\n\n### **Created TypeJsonConverter** \nA custom JsonConverter that:\n- Serializes Type instances as `{ \"assembly\": \"AssemblyName\", \"type\": \"FullTypeName\" }`\n- Deserializes by looking up the type from loaded assemblies, with fallback to Assembly.Load\n- Includes caching mechanism using `ConcurrentDictionary<TypeKey, Type?>` to avoid repeated lookups\n- Handles null types correctly\n- Includes proper error handling for missing assemblies/types with clear error messages\n- Uses `UnconditionalSuppressMessage` for trimming warnings\n\n### **Integrated with JSRuntime**\n- Added TypeJsonConverter to JSRuntime's JsonSerializerOptions so it's automatically available\n- This means when DynamicComponent.Type parameters need to be serialized for interactive render modes, the custom converter handles it seamlessly\n\n### **Hot Reload Support** \n- Added cache clearing to DotNetDispatcher's MetadataUpdateHandler\n- Ensures type cache is cleared when assemblies are updated during hot reload\n\n### **Test Fix**\n- ✅ Fixed failing test `Read_ThrowsJsonException_IfJsonIsNotStartObject`\n- The test was using raw string literal `\"\"\"\"invalid\"\"\"\"` which produces `invalid` (not valid JSON)\n- Changed to proper JSON string `\"invalid\"` so the converter receives a valid JSON string token and can throw the expected error message\n\n### **Validation**\n- ✅ Code builds successfully \n- ✅ Existing DynamicComponent tests continue to pass (no breaking changes)\n- ✅ Created comprehensive test suite for TypeJsonConverter with edge cases\n- ✅ Follows the exact pattern suggested in the issue, similar to the DotNetDispatcher implementation\n\n## How This Fixes the Issue\n\nBefore: `DynamicComponent` with `@rendermode` would fail with:\n```\nNotSupportedException: Serialization and deserialization of 'System.RuntimeType' instances is not supported.\n```\n\nAfter: The TypeJsonConverter automatically handles Type serialization/deserialization when JSRuntime needs to serialize component parameters, allowing DynamicComponent to work seamlessly with interactive render modes.\n\nThe solution is transparent to users - no code changes needed in their applications.\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n\n----\n\n*This section details on the original issue you should resolve*\n\n<issue_title>DynamicComponent Throws Run-Time Error on .NET 8</issue_title>\n<issue_description>### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen using the standard DynamicComponent (introduced in .NET 6) and specifying an instance-based @rendermode attribute ie.\r\n\r\n```\r\n<DynamicComponent Type=\"@_type\" @rendermode=\"RenderMode.InteractiveServer\">\r\n```\r\n\r\nThe component throws a run-time error related to serialization:\r\n\r\n```\r\nAn unhandled exception occurred while processing the request.\r\nNotSupportedException: Serialization and deserialization of 'System.RuntimeType' instances is not supported.\r\nSystem.Text.Json.Serialization.Converters.UnsupportedTypeConverter<T>.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\r\nI tried including only one DynamicComponent at a time and they still threw an exception. So specifying the rendermode on the instance does NOT work for dynamic components.\r\n```\r\n\r\nDynamicComponent expects a Type parameter which is of type System.RuntimeType - however in .NET 8 parameters must be serializable.\r\n\r\n\r\n### Expected Behavior\r\n\r\nDynamicComponent is widely used in Blazor applications to construct razor components dynamically based on type information. I would expect DynamicComponent to render a component in exactly the same manner as it does in .NET 6 and .NET 7.\r\n\r\n### Steps To Reproduce\r\n\r\nPlease see repo: https://github.com/oqtane/OqtaneSSR which is based on the standard Blazor Web template in .NET 8 RC2. Set the appsettings.json Modules property to:\r\n\r\n```\r\n \"Modules\": [\r\n   {\r\n     \"PagePath\": \"/\",\r\n     \"PageName\": \"Home\",\r\n     \"ThemeType\": \"OqtaneSSR.Components.Themes.MainLayout, OqtaneSSR\",\r\n     \"PaneName\": \"Default\",\r\n     \"ContainerType\": \"OqtaneSSR.Components.Containers.Container2, OqtaneSSR\",\r\n     \"ModuleType\": \"OqtaneSSR.Client.Components.Home, OqtaneSSR.Client\",\r\n     \"RenderMode\": \"InteractiveServer\"\r\n   },\r\n   {\r\n     \"PagePath\": \"/counter\",\r\n     \"PageName\": \"Counter\",\r\n     \"ThemeType\": \"OqtaneSSR.Components.Themes.MainLayout, OqtaneSSR\",\r\n     \"PaneName\": \"Default\",\r\n     \"ContainerType\": \"OqtaneSSR.Components.Containers.Container2, OqtaneSSR\",\r\n     \"ModuleType\": \"OqtaneSSR.Client.Components.Counter, OqtaneSSR.Client\",\r\n     \"RenderMode\": \"InteractiveServer\"\r\n   },\r\n   {\r\n     \"PagePath\": \"/weather\",\r\n     \"PageName\": \"Weather\",\r\n     \"ThemeType\": \"OqtaneSSR.Components.Themes.MainLayout, OqtaneSSR\",\r\n     \"PaneName\": \"Default\",\r\n     \"ContainerType\": \"OqtaneSSR.Components.Containers.Container2, OqtaneSSR\",\r\n     \"ModuleType\": \"OqtaneSSR.Client.Components.Weather, OqtaneSSR.Client\",\r\n     \"RenderMode\": \"InteractiveServer\"\r\n   }\r\n ]\r\n```\r\n\r\nWhen you run the application, it will immediately throw a run-time error. This is caused by the line:\r\n\r\n<DynamicComponent Type=\"@_type\" @rendermode=\"RenderMode.InteractiveServer\"></DynamicComponent>\r\n\r\nin OqtaneSSR\\Components\\Router\\ModuleInstance2.razor\r\n\r\n\r\n\r\n### Exceptions (if any)\r\n\r\nAn unhandled exception occurred while processing the request.\r\nNotSupportedException: Serialization and deserialization of 'System.RuntimeType' instances is not supported.\r\nSystem.Text.Json.Serialization.Converters.UnsupportedTypeConverter<T>.Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)\r\n\r\n### .NET Version\r\n\r\n8.0.0-rc.2.23480.2\r\n\r\n### Anything else?\r\n\r\nA workaround to this problem is to create a custom component which accepts a TypeName (rather than a Type) and use RenderFragment to render it:\r\n\r\n```\r\n@DynamicComponent\r\n\r\n@code {\r\n    [Parameter]\r\n    public string TypeName { get; set; }\r\n\r\n    RenderFragment DynamicComponent { get; set; }\r\n\r\n    protected override void OnParametersSet()\r\n    {\r\n        DynamicComponent = builder =>\r\n        {\r\n            builder.OpenComponent(0, Type.GetType(TypeName));\r\n            builder.CloseComponent();\r\n        };\r\n    }\r\n}\r\n```\r\n\r\nNote that this workaround does not support Parameters - which is another problem with DynamicComponent as it uses a Dictionary for parameters.</issue_description>\n\n<agent_instructions>For this case, we should have a custom JsonConverter in JSInterop that uses `Assembly.GetType`, probably https://github.com/dotnet/aspnetcore/blob/main/src/JSInterop/Microsoft.JSInterop/src/JSRuntime.cs#L38-L45 doing something like https://github.com/dotnet/aspnetcore/blob/063ba34bff5a3b6ee2f54cafe83b04bd3d4a5c06/src/JSInterop/Microsoft.JSInterop/src/Infrastructure/DotNetDispatcher.cs#L487-L509\n\nWe want to keep a cache of types on the converter to avoid multiple lookups (both for assemblies and types). Follow the pattern In DotNetDispatcher</agent_instructions>\n\n## Comments on the Issue (you are @copilot in this section)\n\n<comments>\n<comment_new><author>@</author><body>\nThanks for contacting us.\n\nWe're moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this...\n\n</details>\nFixes dotnet/aspnetcore#51901\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💡 You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs.","Url":"https://github.com/dotnet/aspnetcore/pull/63817","RelatedDescription":"Open PR \"Fix DynamicComponent serialization with interactive render modes by adding TypeJsonConverter\" (#63817)"},{"Id":"3452951161","IsPullRequest":true,"CreatedAt":"2025-09-25T10:14:15","Actor":"Copilot","Number":"63816","RawContent":null,"Title":"Add analyzer to detect @ref and @rendermode used together (BL0010)","State":"open","Body":"## Summary\n\nAdds a new Roslyn analyzer rule `BL0010` that detects when both `@ref` and `@rendermode` are used on the same Blazor component call site, preventing a confusing runtime `InvalidCastException`.\n\n## Problem\n\nWhen developers use both `@ref` and `@rendermode` on the same component, they encounter an unhelpful runtime error:\n\n```csharp\n// This code compiles but fails at runtime\n<Counter @ref=\"counterRef\" @rendermode=\"InteractiveServer\" />\n```\n\nRuntime exception:\n```\nSystem.InvalidCastException: Unable to cast object of type 'Microsoft.AspNetCore.Components.Endpoints.SSRRenderModeBoundary' to type 'MyApp.Counter'.\n```\n\nThis happens because when `@rendermode` is specified, ASP.NET Core wraps the component in an `SSRRenderModeBoundary`, so the `@ref` points to the boundary instead of the actual component.\n\n## Solution\n\nThe new `ComponentRefAndRenderModeAnalyzer` detects this pattern at compile time by analyzing `BuildRenderTree` methods for simultaneous calls to:\n- `AddComponentReferenceCapture` (generated by `@ref`)  \n- `AddComponentRenderMode` (generated by `@rendermode`)\n\nWhen both are used on the same component, it reports diagnostic `BL0010` with clear guidance:\n\n**Error Message:**\n> Component cannot use both @ref and @rendermode on the same element. The @ref will point to an SSRRenderModeBoundary instead of the component.\n\n**Description:**\n> Using both @ref and @rendermode on the same component will cause the reference to point to an SSRRenderModeBoundary instead of the component itself. Remove @rendermode or use a separate component without @rendermode for the reference.\n\n## Implementation Details\n\n- **Diagnostic ID:** `BL0010`\n- **Severity:** Error (prevents compilation)\n- **Scope:** Only analyzes component `BuildRenderTree` methods for performance\n- **Detection:** Groups render tree calls by component blocks and checks for conflicting usage patterns\n\n## Testing\n\nAdded comprehensive test coverage with 5 test cases:\n- ✅ Component with both @ref and @rendermode → Reports diagnostic\n- ✅ Component with only @ref → No diagnostic  \n- ✅ Component with only @rendermode → No diagnostic\n- ✅ Multiple components with mixed usage → Reports only problematic ones\n- ✅ Non-component methods → No analysis\n\nAll existing analyzer tests continue to pass, ensuring no regressions.\n\nFixes issue where using `@ref` and `@rendermode` together produces an unhelpful error message.\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>Using @ref and @rendermode on the same call site produces an unhelpful error message</issue_title>\n> <issue_description>### Is there an existing issue for this?\n> \n> - [X] I have searched the existing issues\n> \n> ### Describe the bug\n> \n> Just done a simple test to get how the things are working\r\n> \r\n> new template\r\n> \r\n> ```\r\n> [Parameter]\r\n>  public int MyProperty { get; set; }\r\n> \r\n>  private void IncrementCount()\r\n>  {\r\n>      currentCount++;\r\n>      MyProperty = currentCount;\r\n> ```\r\n> \r\n> and \r\n> \r\n> ```\r\n> <BlazorApp8.Client.Pages.Counter @ref=\"Counter1\" />\r\n> @Counter1?.MyProperty\r\n> \r\n> @code{\r\n>     BlazorApp8.Client.Pages.Counter Counter1;\r\n> }\r\n> ```\r\n> \r\n> \r\n> \r\n> \n> \n> ### Expected Behavior\n> \n> see the counter value\r\n> \r\n> my intention was to use server side and embed a WASM part and how to communicate between the components\n> \n> ### Steps To Reproduce\n> \n> _No response_\n> \n> ### Exceptions (if any)\n> \n> System.InvalidCastException: Unable to cast object of type 'Microsoft.AspNetCore.Components.Endpoints.SSRRenderModeBoundary' to type 'BlazorApp8.Client.Pages.Counter'.\n> \n> ### .NET Version\n> \n> 8.0.100-rc.1.23455.8\n> \n> ### Anything else?\n> \n> _No response_</issue_description>\n> \n> <agent_instructions>We should add a new analyzer rule that inspects the usages of `https://github.com/dotnet/aspnetcore/blob/063ba34bff5a3b6ee2f54cafe83b04bd3d4a5c06/src/Components/Components/src/Rendering/RenderTreeBuilder.cs#L630C17-L630C39` and detects when it is used alongside https://github.com/dotnet/aspnetcore/blob/063ba34bff5a3b6ee2f54cafe83b04bd3d4a5c06/src/Components/Components/src/Rendering/RenderTreeBuilder.cs#L608 on the same component tree</agent_instructions>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> <comment_new><author>@</author><body>\n> Thanks for contacting us.\n> \n> We're moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \n> If we later determine, that the issue has no community involvement, or it's very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\n> To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> <comment_new><author>@</author><body>\n> Thanks for contacting us.\n> \n> We're moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \n> If we later determine, that the issue has no community involvement, or it's very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\n> To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> <comment_new><author>@danroth27</author><body>\n> @mkArtakMSFT Does this issue need to move to dotnet/razor?</body></comment_new>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#51151\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💬 Share your feedback on Copilot coding agent for the chance to win a $200 gift card! Click [here](https://survey3.medallia.com/?EAHeSx-AP01bZqG0Ld9QLQ) to start the survey.","Url":"https://github.com/dotnet/aspnetcore/pull/63816","RelatedDescription":"Open PR \"Add analyzer to detect @ref and @rendermode used together (BL0010)\" (#63816)"},{"Id":"3452913356","IsPullRequest":true,"CreatedAt":"2025-09-25T10:03:15","Actor":"Copilot","Number":"63815","RawContent":null,"Title":"Add Docker support to Blazor Web App template","State":"open","Body":"This PR adds Docker support to the Blazor Web App template by enabling the \"Enable Docker\" option when creating new projects in Visual Studio and other IDEs.\n\n## Problem\n\nThe Blazor Web App template was missing Docker support while other ASP.NET Core templates (MVC, Web API, etc.) already had this feature enabled. Users reported that when creating a new Blazor Web App, there was no option to enable Docker support during project creation, unlike other project templates.\n\n## Solution\n\nAdded the `\"supportsDocker\": true` configuration to the Blazor Web App template's IDE host configuration file. This follows the exact same pattern used by all other web project templates in ASP.NET Core.\n\n**Files Changed:**\n- `src/ProjectTemplates/Web.ProjectTemplates/content/BlazorWeb-CSharp/.template.config/ide.host.json`\n\nThe change is minimal and surgical - adding just one line to enable Docker support in the template configuration without modifying any generated project code or functionality.\n\n## Verification\n\n- Template builds successfully without errors\n- Project creation works correctly with `dotnet new blazor`\n- JSON configuration is syntactically valid\n- Change is consistent with all other web templates that support Docker\n- No impact on existing functionality - only enables the Docker option in IDEs\n\nThis brings the Blazor Web App template in line with other ASP.NET Core project templates and addresses the feature gap reported in the issue.\n\nFixes #issue_number\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>Add Docker support to Blazor Web App template</issue_title>\n> <issue_description>We should have the \"Enable Docker\" option on the Blazor Web App template.</issue_description>\n> \n> <agent_instructions>Follow the same pattern in https://github.com/dotnet/aspnetcore/tree/main/src/ProjectTemplates/Web.ProjectTemplates/content/StarterWeb-CSharp to add docker support to the BlazorWeb template</agent_instructions>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> <comment_new><author>@danroth27</author><body>\n> > @danroth27 would this also affect adding docker support to a template after creation? I created a Blazor Web App, right clicked on the project, clicked add docker support. App won't run, indicates the ` Client\\....\\wwwroot` wasn't found. I assume this is related, but if not, perhaps it's another issue.\r\n> \r\n> @codymullins This might be an issue with the Docker tooling Visual Studio. Could you please open a Visual Studio feedback ticket for this?\r\n> </body></comment_new>\n> <comment_new><author>@danroth27</author><body>\n> > Will do. Do you happen to have a sample of a working .NET 8 Blazor Web App with Docker so I can share that and compare to what is auto-generated?\r\n> \r\n> I don't have a .NET 8 version, but you could try comparing with a Docker enabled ASP.NET Core hosted Blazor WebAssembly app using .NET 7. Using VS 17.7 create a new Blazor WebAssembly App with the ASP.NET Core hosted and Docker options enabled. That should work.</body></comment_new>\n> <comment_new><author>@</author><body>\n> Thanks for contacting us.\n> \n> We're moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \n> If we later determine, that the issue has no community involvement, or it's very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\n> To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> <comment_new><author>@danroth27</author><body>\n> > @mkArtakMSFT Would like to know if we plan to support this for .NET 9? Otherwise, we will look for it when we get to .NET 10.\r\n> \r\n> @v-elenafeng We don't plan to add this template option for .NET 9, but you should be able to Add Docker a Blazor Web App after the project is created using the Visual Studio tooling: Right click on project > Add > Docker Support.</body></comment_new>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#49889\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💡 You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs.","Url":"https://github.com/dotnet/aspnetcore/pull/63815","RelatedDescription":"Open PR \"Add Docker support to Blazor Web App template\" (#63815)"},{"Id":"3452879103","IsPullRequest":true,"CreatedAt":"2025-09-25T09:53:54","Actor":"Copilot","Number":"63814","RawContent":null,"Title":"Support hosted services in WebAssemblyHost","State":"open","Body":"Fixes #33537\n\nThis PR adds support for hosted services (`IHostedService`) in `WebAssemblyHost`, enabling automatic startup and shutdown of background services in Blazor WebAssembly applications.\n\n## Problem\n\nApplications using `WebAssemblyHost` (e.g. Blazor WebAssembly clients) did not support hosted services out of the box. Services registered with `AddHostedService` were ignored when using `WebAssemblyHostBuilder`, unlike in applications built with `WebApplicationBuilder` or `HostApplicationBuilder`. This prevented libraries like OpenTelemetry from working properly in Blazor WebAssembly apps, as they rely on hosted services for initialization.\n\n## Solution\n\nThe implementation adds hosted service lifecycle management to `WebAssemblyHost`:\n\n- **Service Discovery**: Automatically discovers `IHostedService` implementations from the DI container\n- **Startup Integration**: Starts hosted services during `RunAsyncCore()` after component state restoration\n- **Cleanup Integration**: Stops hosted services during `DisposeAsync()` with proper error handling\n- **Minimal Footprint**: Only ~40 lines of new code with no breaking changes\n\n## Usage\n\nDevelopers can now register hosted services in Blazor WebAssembly apps:\n\n```csharp\nvar builder = WebAssemblyHostBuilder.CreateDefault(args);\n\n// Register hosted services - they'll start automatically\nbuilder.Services.AddSingleton<IHostedService, MyBackgroundService>();\n\nvar host = builder.Build();\nawait host.RunAsync(); // Hosted services start here\n```\n\n## Implementation Details\n\n- Added `Microsoft.Extensions.Hosting.Abstractions` reference to enable `IHostedService` support\n- Hosted services start after component state restoration (matching the timing suggested in the original issue)\n- Error handling ensures host disposal doesn't fail if hosted services throw exceptions during shutdown\n- Performance optimized - only processes hosted services if any are registered\n\n## Testing\n\nAdded comprehensive test coverage:\n- Service startup during host run\n- Service shutdown during host disposal  \n- Error handling for faulty services\n- Integration with service registration patterns\n\nAll existing WebAssemblyHost functionality remains unchanged and all tests pass.\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>Support hosted services in WebAssemblyHost</issue_title>\n> <issue_description>### Is there an existing issue for this?\n> \n> - [x] I have searched the existing issues\n> \n> ### Is your feature request related to a problem? Please describe the problem.\n> \n> Applications using `WebAssemblyHost` (e.g. Blazor WebAssembly clients) do not support hosted services out of the box. Services registered with `AddHostedService` are ignored when using `WebAssemblyHostBuilder`, unlike in applications built with `WebApplicationBuilder` or `HostApplicationBuilder`.\n> \n> ### Describe the solution you'd like\n> \n> `WebAssemblyHost` should support automatically running hosted services registered with `AddHostedService`. \n> \n> ### Additional context\n> \n> This feature request has already been rejected in https://github.com/dotnet/aspnetcore/issues/33537. However, we might want to reconsider the decision. For example, support for hosted services might be beneficial for [Open Telemetry integration](https://github.com/open-telemetry/opentelemetry-dotnet/issues/2816#issuecomment-3275736009) in Blazor Wasm apps.</issue_description>\n> \n> <agent_instructions>Look at https://github.com/dotnet/aspnetcore/blob/063ba34bff5a3b6ee2f54cafe83b04bd3d4a5c06/src/Hosting/Hosting/src/Internal/HostedServiceExecutor.cs#L10 and\n> https://github.com/dotnet/aspnetcore/blob/063ba34bff5a3b6ee2f54cafe83b04bd3d4a5c06/src/Hosting/Hosting/src/Internal/WebHost.cs#L30\n> \n> We want WebAssemblyHost to start the services here https://github.com/dotnet/aspnetcore/blob/main/src/Components/WebAssembly/WebAssembly/src/Hosting/WebAssemblyHost.cs#L139</agent_instructions>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> <comment_new><author>@pavelsavara</author><body>\n> We should measure the size/perf impact of adding it by default for WASM</body></comment_new>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#63637\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💬 Share your feedback on Copilot coding agent for the chance to win a $200 gift card! Click [here](https://survey3.medallia.com/?EAHeSx-AP01bZqG0Ld9QLQ) to start the survey.","Url":"https://github.com/dotnet/aspnetcore/pull/63814","RelatedDescription":"Open PR \"Support hosted services in WebAssemblyHost\" (#63814)"},{"Id":"3454693195","IsPullRequest":false,"CreatedAt":"2025-09-25T09:48:37","Actor":"vdanche","Number":"63832","RawContent":null,"Title":"[NETSDKE2E][Loc]strings display incorrectly and some strings are unlocalized on NET 10 RC2 aspnetcore-runtime installer UI.","State":"open","Body":"REPRO STEPS\nClean machine: Windows 11-x64 (24H2),e.g chinese OS\n\n1.doble-click aspnetcore-runtime-10.0.0-rc.2.25474.116-win-x64(exe)\n2.check installer UI displaying\n\n\n**Expected Result**\nstep2: UI displays well\n\n**Actual Result**\nstrings display incorrectly and some strings are Unlocalized\n\nChinese:\n<img width=\"632\" height=\"492\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/6f69f838-5b04-40f6-8858-5b3580cd4718\" />\n\nEN：\n<img width=\"485\" height=\"368\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/af7700da-33a2-4d5b-9344-994faa278c81\" />","Url":"https://github.com/dotnet/aspnetcore/issues/63832","RelatedDescription":"Open issue \"[NETSDKE2E][Loc]strings display incorrectly and some strings are unlocalized on NET 10 RC2 aspnetcore-runtime installer UI.\" (#63832)"},{"Id":"3452859491","IsPullRequest":true,"CreatedAt":"2025-09-25T09:48:15","Actor":"Copilot","Number":"63813","RawContent":null,"Title":"Add RazorComponent with Code-Behind item template","State":"open","Body":"This PR addresses a customer request from VS Feedback to provide an option for creating Razor Component item templates that automatically generate a code-behind (.cs) file alongside the .razor file.\n\n## Changes Made\n\n### New Item Template: `razorcomponent-cb`\n- **Template Name**: \"Razor Component with Code-Behind\"\n- **Short Name**: `razorcomponent-cb` \n- **Files Generated**: Both `Component1.razor` and `Component1.razor.cs`\n- **Usage**: `dotnet new razorcomponent-cb --name MyComponent --namespace MyApp.Components`\n\n### Template Structure\nThe new template follows the established code-behind pattern used by Razor Pages:\n\n**Component1.razor**:\n```razor\n<h3>Component1</h3>\n\n@code {\n\n}\n```\n\n**Component1.razor.cs**:\n```csharp\nusing Microsoft.AspNetCore.Components;\n\nnamespace MyApp.Namespace\n{\n    public partial class Component1 : ComponentBase\n    {\n\n    }\n}\n```\n\n### Key Features\n- **Proper namespace substitution**: The `--namespace` parameter correctly sets the namespace in the code-behind file\n- **Component name substitution**: Both files are properly renamed based on the `--name` parameter\n- **Clean separation**: Markup stays in .razor, logic goes in .razor.cs\n- **ComponentBase inheritance**: Code-behind uses partial class inheriting from ComponentBase\n- **Full localization support**: Includes localization files for all supported languages\n\n### Testing\n- Added `BlazorServerItemTemplateCodeBehind` test to validate the new template functionality\n- Verified both original `razorcomponent` and new `razorcomponent-cb` templates work independently\n- Confirmed generated components compile successfully without errors\n\n## Customer Impact\nThis change provides developers who prefer the code-behind model with an automatic way to generate both files when creating new Razor components, matching the existing functionality available for Razor Pages. This addresses the specific customer feedback requesting this feature and provides consistency across ASP.NET Core item templates.\n\nThe original `razorcomponent` template remains unchanged, ensuring no breaking changes for existing workflows.\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>Have an option for a new Razor Component item template to automatically create a code-behind (.cs) file</issue_title>\n> <issue_description>This is a customer report through VS Feedback, where the customer uses code-behind model almost exclusively and wanted to have an option for creating the .cs file automatically when they add a new .razor file using an item template.</issue_description>\n> \n> <agent_instructions>Look at https://github.com/dotnet/aspnetcore/tree/main/src/ProjectTemplates/Web.ItemTemplates/content/RazorComponent and create an additional RazorComponentCodeBehind item template</agent_instructions>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> <comment_new><author>@</author><body>\n> We've moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> <comment_new><author>@danroth27</author><body>\n> We should consider having the same option on our project templates as well.</body></comment_new>\n> <comment_new><author>@</author><body>\n> Thanks for contacting us.\n> \n> We're moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \n> If we later determine, that the issue has no community involvement, or it's very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\n> To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> </comments>\n> \n\n\n</details>\nFixes dotnet/aspnetcore#47030\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💬 Share your feedback on Copilot coding agent for the chance to win a $200 gift card! Click [here](https://survey3.medallia.com/?EAHeSx-AP01bZqG0Ld9QLQ) to start the survey.","Url":"https://github.com/dotnet/aspnetcore/pull/63813","RelatedDescription":"Open PR \"Add RazorComponent with Code-Behind item template\" (#63813)"},{"Id":"3452854926","IsPullRequest":true,"CreatedAt":"2025-09-25T09:46:48","Actor":"Copilot","Number":"63812","RawContent":null,"Title":"Update BL0007 diagnostic to provide clearer guidance on component parameter patterns","State":"open","Body":"Fixes #45793\n\nThe BL0007 diagnostic (\"Component parameters should be auto properties\") previously provided minimal context about why this rule exists and what developers should do instead. This led to confusion since the warning appears even when properties have custom logic, which typically wouldn't trigger auto-property suggestions in other contexts.\n\n## Changes Made\n\n**Enhanced diagnostic message**: Updated from the generic \"Component parameter '{0}' should be auto property\" to \"Component parameter '{0}' should be auto property. Manipulating component parameters can result in infinite loops and unintended side effects.\"\n\n**Added comprehensive description**: The diagnostic now includes a detailed description explaining:\n- Why component parameters should be auto properties\n- The specific risks of manipulating component parameters (infinite loops and unintended side effects)  \n- Alternative approaches developers should use: `@bind:after` or `@bind:set` for parameter manipulation\n\n**Example of the improved diagnostic experience**:\n\nBefore:\n```\nwarning BL0007: Component parameter 'MyComponent.Value' should be auto property\n```\n\nAfter:\n```\nwarning BL0007: Component parameter 'MyComponent.Value' should be auto property. Manipulating component parameters can result in infinite loops and unintended side effects.\n\nDescription: Component parameters should be auto properties. Manipulating component parameters can result in infinite loops and unintended side effects. Use @bind:after or @bind:set instead to adjust values or trigger additional callbacks.\n```\n\nThis addresses the core issue where developers had to search online to understand why this diagnostic appeared and what the recommended patterns are. The enhanced message provides immediate context and actionable guidance.\n\n## Testing\n\n- All existing analyzer tests continue to pass\n- Updated test expectations to match the new improved diagnostic messages\n- Verified the diagnostic description is properly displayed through the analyzer infrastructure\n\n<!-- START COPILOT CODING AGENT SUFFIX -->\n\n\n\n<details>\n\n<summary>Original prompt</summary>\n\n> \n> ----\n> \n> *This section details on the original issue you should resolve*\n> \n> <issue_title>Update BL0007 warning to explain why a parameter should be an auto-property and what to do</issue_title>\n> <issue_description>### Is there an existing issue for this?\n> \n> - [X] I have searched the existing issues\n> \n> ### Describe the bug\n> \n> Also raised:\n> * https://github.com/dotnet/aspnetcore/issues/45793\n> * https://github.com/dotnet/razor/issues/7261\n> \n> I got this warning here:\n> ![image](https://github.com/dotnet/aspnetcore/assets/303201/fdc4d34c-0e5f-4e15-85b6-8c8afaa39cca)\n> \n> I was confused because the hint that something can be made an auto property usually only happens if there is no logic in the get/set. That isn't the case here, and it turns out that is by design.\n> \n> [The comment here](https://github.com/dotnet/aspnetcore/issues/26230#issue-707576320) by @SteveSandersonMS  explains why this rule exists and what the right pattern is for apps that want logic to run on parameter change. However, the message given to the developer doesn't have any of this useful information. The code analysis text needs to be more descriptive and have a link to documentation that shows the right pattern.\n> \n> The code analysis warning shouldn't require googling to figure out why it happened and how to fix it.\n> \n> There are lots of comments and upvotes of developers running into this warning [here](https://github.com/dotnet/razor/issues/7261).\n> \n> ### Expected Behavior\n> \n> More detail. A link to documentation with the right pattern.\n> \n> ### Steps To Reproduce\n> \n> ```cs\n> [Parameter, EditorRequired]\n> public required List<DimensionScope> MatchedDimensions\n> {\n>     get => _matchedDimensions;\n>     set\n>     {\n>         if (_matchedDimensions != value)\n>         {\n>             _matchedDimensions = value;\n>             _dimensionsOrDurationChanged = true;\n>         }\n>     }\n> }\n> ```\n> \n> ### Exceptions (if any)\n> \n> _No response_\n> \n> ### .NET Version\n> \n> .NET 8\n> \n> ### Anything else?\n> \n> _No response_</issue_description>\n> \n> <agent_instructions>We need to update the error message to include the following information \"Manipulating component parameters can result in infinite loops and unintended side effects. Use `@bind:after` or `@bind:set` instead to adjust values or trigger additional callbacks instead.\"</agent_instructions>\n> \n> ## Comments on the Issue (you are @copilot in this section)\n> \n> <comments>\n> <comment_new><author>@</author><body>\n> We've moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> <comment_new><author>@</author><body>\n> Thanks for contacting us.\n> \n> We're moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \n> If we later determine, that the issue has no community involvement, or it's very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\n> To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).</body></comment_new>\n> </comments>\n> \n\n\n</details>\n----\n**Additional instructions:**\n\n> We need to update the error message to include the following information \"Manipulating component parameters can result in infinite loops and unintended side effects. Use `@bind:after` or `@bind:set` instead to adjust values or trigger additional callbacks instead.\"\n\nFixes dotnet/aspnetcore#51372\n\n<!-- START COPILOT CODING AGENT TIPS -->\n---\n\n💡 You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs.","Url":"https://github.com/dotnet/aspnetcore/pull/63812","RelatedDescription":"Open PR \"Update BL0007 diagnostic to provide clearer guidance on component parameter patterns\" (#63812)"},{"Id":"3451800157","IsPullRequest":false,"CreatedAt":"2025-09-25T09:17:13","Actor":"VigneshwaranGovindharajan","Number":"63809","RawContent":null,"Title":"Clipboard API access fails in Blazor Server (client-side interop) on macOS Safari","State":"closed","Body":"### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\n**Environment**\n\nFramework: Blazor Server (.NET 8)\nBrowser: Safari (macOS)\nPlatform: macOS Ventura / Sonoma\nTest Setup: Minimal Blazor Server app without any third-party components\n\n**Summary**\n\nClipboard copy functionality using client-side JavaScript interop (navigator.clipboard.writeText) fails to work in Safari on macOS when triggered from Blazor Server. However, native HTML onclick copy actions (e.g., using <button onclick=\"copyText()\">) work correctly in the same environment.\n\nThis suggests the issue is not specific to any third-party component, but rather a limitation or behavior difference in how clipboard access is handled via Blazor interop in Safari.\n\n### Expected Behavior\n\nClipboard copy via Blazor JS interop should behave consistently across browsers, including Safari on macOS.\n\n### Steps To Reproduce\n\n**Home.razor**\n\n`\n@using Microsoft.JSInterop\n@inject IJSRuntime JSRuntime\n\n<div class=\"card mb-3\">\n    <div class=\"card-header\">Prompt Content</div>\n    <div class=\"card-body\">\n        <p id=\"prompt-text\">This is sample prompt text to copy.</p>\n        <button class=\"btn btn-primary me-2\" @onclick=\"CopyPromptViaInterop\">Copy via Blazor Interop</button>\n        <button class=\"btn btn-secondary me-2\" onclick=\"navigator.clipboard.writeText(document.getElementById('prompt-text').textContent)\">Copy via Native onclick</button>\n        <span class=\"badge @(copySuccessPrompt ? \"bg-success\" : \"bg-secondary\")\">@copyStatusPrompt</span>\n    </div>\n</div>\n\n@code {\n    private bool copySuccessPrompt = false;\n    private string copyStatusPrompt = \"Ready\";\n\n    private async Task CopyPromptViaInterop()\n    {\n        try\n        {\n            // Get the text from the DOM element and pass it to JS\n            await JSRuntime.InvokeVoidAsync(\"copyToClipboard\", \"prompt-text\");\n            copySuccessPrompt = true;\n            copyStatusPrompt = \"Copied!\";\n            StateHasChanged();\n            await Task.Delay(2000);\n            copySuccessPrompt = false;\n            copyStatusPrompt = \"Ready\";\n            StateHasChanged();\n        }\n        catch (JSException ex)\n        {\n            copyStatusPrompt = \"Failed: Check console\";\n            Console.WriteLine($\"Clipboard error (Prompt): {ex.Message}\");\n            StateHasChanged();\n        }\n    }\n}\n`\n\n**clipboard.js**\n\n`\nwindow.copyToClipboard = async function (elementId) {\n    try {\n        const text = document.getElementById(elementId).textContent;\n        await navigator.clipboard.writeText(text);\n        console.log(`Successfully copied text from ${elementId}`);\n    } catch (err) {\n        console.error(`Failed to copy text from ${elementId}: ${err}`);\n        throw err; // Let Blazor catch the error\n    }\n};\n`\n\n1. Run the above sample in Safari on macOS.\n2. Click both copy buttons (via native and interop) and observe that server-side (native onclick) copy actions work correctly on macOS while client-side (Blazor Interop) copy actions fail to work on macOS Safari.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n.Net9\n\n### Anything else?\n\n_No response_","Url":"https://github.com/dotnet/aspnetcore/issues/63809","RelatedDescription":"Closed issue \"Clipboard API access fails in Blazor Server (client-side interop) on macOS Safari\" (#63809)"},{"Id":"3452072792","IsPullRequest":false,"CreatedAt":"2025-09-25T06:15:07","Actor":"danroth27","Number":"63810","RawContent":null,"Title":"Blazor active circuit metric lost track of an active circuit","State":"open","Body":"I somehow got into a state where Blazor's runtime metric says I have no active circuits, even though I still have a working Counter page:\n\n<img width=\"1448\" height=\"872\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f31e7580-5258-46e2-a996-2045ece01342\" />\n\nHere's my Counter.razor:\n\n```razor\n@page \"/counter\"\n@rendermode InteractiveServer\n\n<PageTitle>Counter</PageTitle>\n\n<h1>Counter</h1>\n\n<p role=\"status\">Current count: @CurrentCount</p>\n\n<button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button>\n\n@code {\n    [PersistentState]\n    public int CurrentCount { get; set; }\n\n    private void IncrementCount()\n    {\n        CurrentCount++;\n    }\n}\n```\n\nI added a simple script in App.razor to pause and resume circuits based on visibility:\n\n```razor\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <base href=\"/\" />\n    <ResourcePreloader />\n    <link rel=\"stylesheet\" href=\"@Assets[\"lib/bootstrap/dist/css/bootstrap.min.css\"]\" />\n    <link rel=\"stylesheet\" href=\"@Assets[\"app.css\"]\" />\n    <link rel=\"stylesheet\" href=\"@Assets[\"BlazorIdentityTest3.styles.css\"]\" />\n    <ImportMap />\n    <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\" />\n    <HeadOutlet />\n</head>\n\n<body>\n    <Routes />\n    <ReconnectModal />\n    <script src=\"@Assets[\"_framework/blazor.web.js\"]\"></script>\n    <script src=\"@Assets[\"Components/Account/Shared/PasskeySubmit.razor.js\"]\" type=\"module\"></script>\n    <script>\n        document.addEventListener('visibilitychange', () => {\n          if (document.hidden) {\n            Blazor.pauseCircuit();\n          } else {\n            Blazor.resumeCircuit();\n          }\n        });\n    </script>\n</body>\n\n</html>\n```\n\n.NET 10 SDK: 10.0.100-rc.1.25451.107","Url":"https://github.com/dotnet/aspnetcore/issues/63810","RelatedDescription":"Open issue \"Blazor active circuit metric lost track of an active circuit\" (#63810)"}],"ResultType":"GitHubIssue"},"Identity-Issues":{"Issues":[{"Id":"385990535","IsPullRequest":true,"CreatedAt":"2018-12-19T00:12:57","Actor":"grahamehorner","Number":"2087","RawContent":null,"Title":"WIP: IUserTwoFactorTokenProvider token length POC","State":"closed","Body":"This is a WIP idea to support configuration of token length for UserTwoFactorTokenProviders","Url":"https://github.com/aspnet/Identity/pull/2087","RelatedDescription":"Closed or merged PR \"WIP: IUserTwoFactorTokenProvider token length POC\" (#2087)"},{"Id":"385943112","IsPullRequest":true,"CreatedAt":"2018-12-19T00:06:47","Actor":"grahamehorner","Number":"2086","RawContent":null,"Title":"Update Rfc6238AuthenticationService.cs","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2086","RelatedDescription":"Closed or merged PR \"Update Rfc6238AuthenticationService.cs\" (#2086)"},{"Id":"385172059","IsPullRequest":false,"CreatedAt":"2018-12-06T18:36:01","Actor":"ben-foster-rightio","Number":"2084","RawContent":null,"Title":"Random Authentication Sign Outs in ASP.NET Core 2.1","State":"closed","Body":"I'm receiving user complaints saying they are being directed to the login screen randomly when it has only been a minute or so since they clicked a button that would have sent a message to the server side.\r\n\r\nHere is a log of one of the errors.\r\n`[INF] Executed action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" in 1473.4897ms (afa2e885)\r\n[INF] Request finished in 1474.816ms 200 application/json; charset=utf-8 (791a596a)\r\n[INF] Request starting HTTP/1.1 GET http://MyAppmanager.MyApp.co.uk/api/AgreementAPI/GetAgreements?searchTerm=1543309403289   (ca22a1cb)\r\n[INF] Entity Framework Core \"2.1.3-rtm-32065\" initialized '\"IdentityDbContext\"' using provider '\"Microsoft.EntityFrameworkCore.SqlServer\"' with options: \"None\" (9958f5bb)\r\n[INF] Executed DbCommand (\"1\"ms) [Parameters=[\"@__get_Item_0='?' (DbType = Int32)\"], CommandType='Text', CommandTimeout='30']\"\r\n\"\"SELECT TOP(1) [e].[UserId], [e].[AcquisitionTeamId], [e].[AreaNumber], [e].[AuthorisationPassword], [e].[AutoBooking], [e].[AutoUpdateSoftware], [e].[AvayaFullName], [e].[AvayaName], [e].[AvaysExt], [e].[CanSellAgreement], [e].[ChangePassword], [e].[CompanyId], [e].[DateEnded], [e].[DateStarted], [e].[DebugLogs], [e].[DefaultQuotes], [e].[DepartmentId], [e].[EmailAddress], [e].[Forename], [e].[HomeServeEmployee], [e].[Initials], [e].[IsPurchaseOrderReviewer], [e].[JobTitle], [e].[LogonName], [e].[MaxLogins], [e].[Message], [e].[Name], [e].[Notes], [e].[PartTime], [e].[Password], [e].[ReportDDI], [e].[RoleId], [e].[Shift], [e].[ShowEngineerAlert], [e].[Surname], [e].[TerminationId], [e].[TrackFastVersion], [e].[UnreadMessage], [e].[VisibleOnChronicle]\r\nFROM [Users] AS [e]\r\nWHERE [e].[UserId] = @__get_Item_0\" (0723d8ff)\r\n[INF] AuthenticationScheme: \"Identity.Application\" signed out. (d3f50c8d)\r\n[INF] AuthenticationScheme: \"Identity.External\" signed out. (d3f50c8d)\r\n[INF] AuthenticationScheme: \"Identity.TwoFactorUserId\" signed out. (d3f50c8d)\r\n**[INF] \"Identity.Application\" was not authenticated. Failure message: \"No principal.\" (48071232)**\r\n[INF] Route matched with \"{action = \\\"GetAgreements\\\", controller = \\\"AgreementAPI\\\", page = \\\"\\\", area = \\\"\\\"}\". Executing action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" (a44c0341)\r\n[INF] Authorization failed. (b15dd539)\r\n[INF] Authorization failed for the request at filter '\"Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter\"'. (8b6446cb)\r\n[INF] Executing ChallengeResult with authentication schemes ([]). (f3dca807)\r\n[INF] AuthenticationScheme: \"Identity.Application\" was challenged. (d45f1f38)\r\n[INF] Executed action \"MyAppManager.Controllers.API.AgreementAPIController.GetAgreements (MyAppManager)\" in 0.3846ms (afa2e885)\r\n[INF] Request finished in 9.3835ms 401  (791a596a)\r\n[INF] Request starting HTTP/1.1 POST http://MyAppmanager.MyApp.co.uk/API/CustomerAPI/WriteToLog/ application/x-www-form-urlencoded; charset=UTF-8 61 (ca22a1cb)\r\n[INF] Route matched with \"{action = \\\"WriteToLog\\\", controller = \\\"CustomerAPI\\\", page = \\\"\\\", area = \\\"\\\"}\". Executing action \"MyAppManager.Controllers.API.CustomerAPIController.WriteToLog (MyAppManager)\" (a44c0341)\r\n[INF] Executing action method \"MyAppManager.Controllers.API.CustomerAPIController.WriteToLog (MyAppManager)\" with arguments ([\"ERROR: WebAPI call is not authenticated\", \"error\"]) - Validation state: Valid (4e3479ed)\r\n[ERR] Client log: ERROR: WebAPI call is not authenticated (d4244074)\r\n`\r\n\r\n**Startup File**\r\n`public void ConfigureServices(IServiceCollection services)\r\n{\r\n\tservices.AddScoped<IRFDbRepository, RFDbRepository>();\r\n\tvar connection = _configuration.GetConnectionString(\"RFDbConnection\");\r\n\tservices.Configure<ConnectionStrings>(_configuration.GetSection(\"ConnectionStrings\"));\r\n\tservices.AddDbContext<RFDbContext>(options => options.UseSqlServer(connection));\r\n\tservices.AddDbContext<IdentityDbContext>(options => options.UseSqlServer(connection));\r\n\tservices.AddAutoMapper();\r\n\tservices.AddIdentity<User, UserRole>().AddDefaultTokenProviders();\r\n\tservices.AddTransient<IUserStore<User>, UserStore>();\r\n\tservices.AddTransient<IRoleStore<UserRole>, RoleStore>();\r\n\tservices.ConfigureApplicationCookie(options =>\r\n\t{\r\n\t\toptions.LoginPath = \"/Identity/Account/Login\";\r\n\t\toptions.LogoutPath = \"/Identity/Account/Logout\";\r\n\t\toptions.ExpireTimeSpan = TimeSpan.FromMinutes(60);\r\n\t\toptions.SlidingExpiration = true;                \r\n\t});\r\n\tservices.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1).AddRazorPagesOptions(options =>\r\n\t{\r\n\t\toptions.AllowAreas = true;\r\n\t\toptions.Conventions.AuthorizeAreaPage(\"Identity\", \"/Account/Logout\");\r\n\t});\r\n}`\r\n\r\n`public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, IRFDbRepository rFDbRepository)\r\n{\r\n\tloggerFactory.AddFile(_configuration.GetValue<string>(\"Logging:LogFile\"));\r\n\tapp.UseStaticFiles();\r\n\tapp.UseAuthentication();\r\n\tapp.UseMvc(routes =>\r\n\t{\r\n\t\troutes.MapRoute(\r\n\t\t\tname: \"default\",\r\n\t\t\ttemplate: \"{controller=Home}/{action=Index}/{id?}\");\r\n\t\troutes.MapRoute(\r\n\t\t\tname: \"ActionApi\",\r\n\t\t\ttemplate: \"api/{controller}/{action}/{id?}\");\r\n\t});\r\n\trFDbRepository.TestConnection();\r\n}`\r\n\r\nAlso I've setup the app pool as below:\r\n![image](https://user-images.githubusercontent.com/43367982/49141893-8fe42800-f2ef-11e8-8ea3-c79e45ca65a3.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2084","RelatedDescription":"Closed issue \"Random Authentication Sign Outs in ASP.NET Core 2.1\" (#2084)"},{"Id":"387530281","IsPullRequest":true,"CreatedAt":"2018-12-04T23:53:47","Actor":"natemcmaster","Number":"2092","RawContent":null,"Title":"This repo will be archived, project moved to aspnet/AspNetCore","State":"closed","Body":"As a part of https://github.com/aspnet/AspNetCore/issues/3598, this repo will be made read-only soon. The source code and issues will move to https://github.com/aspnet/AspNetCore.","Url":"https://github.com/aspnet/Identity/pull/2092","RelatedDescription":"Closed or merged PR \"This repo will be archived, project moved to aspnet/AspNetCore\" (#2092)"},{"Id":"382432623","IsPullRequest":true,"CreatedAt":"2018-12-04T23:49:57","Actor":"HaoK","Number":"2075","RawContent":null,"Title":"Port retry handler test improvement to 2.1","State":"closed","Body":"Port of similar fix for 2.2 https://github.com/aspnet/Identity/pull/2052","Url":"https://github.com/aspnet/Identity/pull/2075","RelatedDescription":"Closed or merged PR \"Port retry handler test improvement to 2.1\" (#2075)"},{"Id":"387479804","IsPullRequest":false,"CreatedAt":"2018-12-04T21:12:03","Actor":"LosManos","Number":"2091","RawContent":null,"Title":"The non-scaffolded razor page \"Register\" does not recognise Password.RequiredLength.","State":"closed","Body":"### Describe the bug\r\nSetting password length through \r\n```\r\npublic void ConfigureServices(IServiceCollection services){\r\n  ...\r\n  services.Configure<IdentityOptions>(options =>\r\n  {\r\n    options.Password.RequiredLength = 1;\r\n  });\r\n  ...\r\n```\r\ndoes not change the non-scaffolded razor page as it always says \"The Password must be at least 6 and at max 100 characters long.\" if inputed password is < 6 characters.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Create a new ASP.NET Core Web 2.1 application\r\n2. Select \"Web application (Model-View Controller)\" \r\n3. Select \"Change authentication\"\r\n3.1. Select \"Individual User Account\"\r\n4. Select Ok to have the project scaffolded.\r\n5. Open file Startup.cs\r\n6. Add \r\n```\r\nservices.Configure<IdentityOptions>(options =>\r\n{\r\n  options.Password.RequiredLength = 1;\r\n});\r\n```\r\nto method `ConfigureServices`.\r\n7. Press F5 (or select your favourite start-debug method).\r\n8. In the web browser that pops up\r\n8.1. Select Register\r\n8.2. Type \"a@example.com\" as user name (or select your favourite fast-to-type email addresss).\r\n8.3. Type \"a\" as password (or any password shorter than 6 characters).\r\n8.4. Select Register\r\n\r\n### Expected behavior\r\nThe web page should have been updated with information about successful creation of user.\r\n\r\n### Actual behaviour\r\nThe web page says \"The Password must be at least 6 and at max 100 characters long.\"\r\n\r\n### Additional context\r\nI have a question at stack overflow https://stackoverflow.com/questions/53620708/how-do-i-set-password-options-in-aspnet-core-2-1 that explains the same issue if this is not clear enough.\r\n\r\nThis issue might be duplicate of #774.","Url":"https://github.com/aspnet/Identity/issues/2091","RelatedDescription":"Closed issue \"The non-scaffolded razor page \"Register\" does not recognise Password.RequiredLength.\" (#2091)"},{"Id":"386513703","IsPullRequest":false,"CreatedAt":"2018-12-02T00:47:54","Actor":"NinoFloris","Number":"2089","RawContent":null,"Title":"No way to Add a password after creating user, except through Reset","State":"closed","Body":"So we do have RemovePasswordAsync but where's AddPasswordAsync? \r\nWe currently hack around it by using a Reset token we generated before it, but we do really need it for upgrading OAuth/Connect accounts to full accounts.","Url":"https://github.com/aspnet/Identity/issues/2089","RelatedDescription":"Closed issue \"No way to Add a password after creating user, except through Reset\" (#2089)"},{"Id":"385940834","IsPullRequest":false,"CreatedAt":"2018-12-01T01:11:14","Actor":"grahamehorner","Number":"2085","RawContent":null,"Title":"Q: moving of source","State":"closed","Body":"Is the identity repo under the aspnet/aspnetcore like other repos have ? ","Url":"https://github.com/aspnet/Identity/issues/2085","RelatedDescription":"Closed issue \"Q: moving of source\" (#2085)"},{"Id":"386331000","IsPullRequest":true,"CreatedAt":"2018-11-30T20:17:17","Actor":"dougbu","Number":"2088","RawContent":null,"Title":"Remove `SetCompatibiltyVersion(...)` call in sample","State":"closed","Body":"- aspnet/Mvc#7156 2 of ?","Url":"https://github.com/aspnet/Identity/pull/2088","RelatedDescription":"Closed or merged PR \"Remove `SetCompatibiltyVersion(...)` call in sample\" (#2088)"},{"Id":"378822046","IsPullRequest":true,"CreatedAt":"2018-11-29T21:55:44","Actor":"grahamehorner","Number":"2060","RawContent":null,"Title":"Update Rfc6238AuthenticationService.cs","State":"closed","Body":"20bytes is 160bits","Url":"https://github.com/aspnet/Identity/pull/2060","RelatedDescription":"Closed or merged PR \"Update Rfc6238AuthenticationService.cs\" (#2060)"},{"Id":"380746507","IsPullRequest":false,"CreatedAt":"2018-11-29T20:17:46","Actor":"wijnsema","Number":"2067","RawContent":null,"Title":"BypassTowFactor in SignInManager:ExternalLoginSignInAsync should default to False","State":"closed","Body":"As requested by @brockallen in #850 it is now possible to bypass 2FA in case of an external login. \r\n\r\nI'm sure there are good reasons to bypass 2FA, however the current implementation is far to general: \r\n\r\n- All providers all treated equal (some providers might not even support 2FA at all)\r\n- All users all treated equal (users can have 2FA enabled or not)\r\n\r\nThis bypass of 2FA really needs more refinement.\r\n\r\n**What makes this really a problem is the fact that it is enabled in the UI templates!** \r\nAs a developer using the template and enabling 2FA you expect 2FA to work for both local and external login!\r\n\r\nFurthermore, the redirect to the 2FA page is missing, so changing to call to `bypassTwoFactor = false` results in a confusing error that the user already exists.\r\n\r\nIn my opinion the following fragment from ExternalLogin.cshtml.cs\r\n```C#\r\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \r\n      info.ProviderKey, isPersistent: false, bypassTwoFactor: true);\r\nif (result.Succeeded)\r\n{\r\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \r\n      info.Principal.Identity.Name, info.LoginProvider);\r\n   return LocalRedirect(returnUrl);\r\n}\r\n```\r\nshould be replaced with\r\n```C#\r\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \r\n   info.ProviderKey, isPersistent: false, bypassTwoFactor: false);\r\nif (result.Succeeded)\r\n{\r\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \r\n      info.Principal.Identity.Name, info.LoginProvider);\r\n   return LocalRedirect(returnUrl);\r\n}\r\nif (result.RequiresTwoFactor)\r\n{\r\n   return RedirectToPage(\"./LoginWith2fa\", new { ReturnUrl = returnUrl });\r\n}\r\n```\r\nIf you enabled bypassTwoFactor it will still work.\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2067","RelatedDescription":"Closed issue \"BypassTowFactor in SignInManager:ExternalLoginSignInAsync should default to False\" (#2067)"},{"Id":"378006056","IsPullRequest":false,"CreatedAt":"2018-11-29T20:04:09","Actor":"blowdart","Number":"2058","RawContent":null,"Title":"Survey: Your experience using Identity UI and customization","State":"closed","Body":"We're taking a survey about how your experiences using ASP.NET Core Identity, and specifically Identity UI as a package.\r\n\r\nPlease give us your feedback, and, if you're willing, you might get a phone call to talk about your experiences in detail.\r\n\r\nhttps://microsoft.qualtrics.com/jfe/form/SV_3mTmFYDZAQutZMF ","Url":"https://github.com/aspnet/Identity/issues/2058","RelatedDescription":"Closed issue \"Survey: Your experience using Identity UI and customization\" (#2058)"},{"Id":"384918165","IsPullRequest":false,"CreatedAt":"2018-11-29T04:38:32","Actor":"OphiCA","Number":"2082","RawContent":null,"Title":"No sign-out authentication handler is registered for the scheme 'Identity.External'","State":"closed","Body":"Hello,\r\n\r\nFor several months now I've been trying to solve an issue with Identity, where 30-min on the dot after signing in, I am greeted by an `Invalid Operation Exception`:\r\n\r\n> InvalidOperationException: No sign-out authentication handler is registered for the scheme 'Identity.External'. The registered sign-out schemes are: Identity.Application. Did you forget to call AddAuthentication().AddCookies(\"Identity.External\",...)?\r\n\r\nSince it was on my blog site, I didn't put too much effort into it, even though it was an annoyance. Now, I'm looking into possibly some real world client work where I'd like to use ASP.NET Core with Identity, but I can't be having this same issue.\r\n\r\nCould someone please tell me why this exception throws? I don't want to use external schemes, so why is it trying to sign out of one? When did it sign into one?\r\n\r\nHere's the relevant code from my app, hopefully someone can point me in the right direction because I sure as heck can't.\r\n\r\n**Startup.cs**\r\n\r\n\tpublic sealed class Startup {\r\n\t\tpublic void ConfigureServices(\r\n\t\t\tIServiceCollection services) {\r\n\t\t\t//...\r\n\t\t\tservices.AddApplicationIdentity();\r\n\t\t\t//...\r\n\t\t\tservices.ConfigureApplicationCookie(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Cookie.SameSite = SameSiteMode.Strict;\r\n\t\t\t\t\to.Cookie.SecurePolicy = CookieSecurePolicy.Always;\r\n\r\n\t\t\t\t\to.AccessDeniedPath = new PathString(\"/admin\");\r\n\t\t\t\t\to.ExpireTimeSpan = TimeSpan.FromHours(4);\r\n\t\t\t\t\to.LoginPath = new PathString(\"/admin\");\r\n\t\t\t\t\to.LogoutPath = new PathString(\"/admin/sign-out\");\r\n\t\t\t\t});\r\n\t\t\tservices.Configure<IdentityOptions>(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Password.RequiredLength = 8;\r\n\r\n\t\t\t\t\to.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);\r\n\t\t\t\t\to.Lockout.MaxFailedAccessAttempts = 5;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic void Configure(\r\n\t\t\tIApplicationBuilder app) {\r\n\t\t\t//...\r\n\t\t\tapp.UseAuthentication();\r\n\t\t\t//...\r\n\t\t}\r\n\t}\r\n\r\n**ServiceCollectionExtensions**\r\n\r\n\tpublic static class ServiceCollectionExtensions {\r\n\t\tpublic static IdentityBuilder AddApplicationIdentity(\r\n\t\t\tthis IServiceCollection services) {\r\n\t\t\tservices.AddAuthentication(\r\n\t\t\t\to => {\r\n\t\t\t\t\to.DefaultAuthenticateScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t\to.DefaultChallengeScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t\to.DefaultSignInScheme = IdentityConstants.ApplicationScheme;\r\n\t\t\t\t}).AddCookie(IdentityConstants.ApplicationScheme,\r\n\t\t\t\to => {\r\n\t\t\t\t\to.Events = new CookieAuthenticationEvents {\r\n\t\t\t\t\t\tOnValidatePrincipal = SecurityStampValidator.ValidatePrincipalAsync\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\tservices.TryAddScoped<IdentityErrorDescriber>();\r\n\t\t\tservices.TryAddScoped<ILookupNormalizer, UpperInvariantLookupNormalizer>();\r\n\t\t\tservices.TryAddScoped<IPasswordHasher<User>, PasswordHasher<User>>();\r\n\t\t\tservices.TryAddScoped<IPasswordValidator<User>, PasswordValidator<User>>();\r\n\t\t\tservices.TryAddScoped<IUserClaimsPrincipalFactory<User>, UserClaimsPrincipalFactory<User>>();\r\n\t\t\tservices.TryAddScoped<UserManager<User>>();\r\n\t\t\tservices.TryAddScoped<IUserStore<User>, ApplicationUserStore>();\r\n\t\t\tservices.TryAddScoped<IUserValidator<User>, UserValidator<User>>();\r\n\t\t\tservices.TryAddScoped<ISecurityStampValidator, SecurityStampValidator<User>>();\r\n\t\t\tservices.TryAddScoped<SignInManager<User>>();\r\n\r\n\t\t\treturn new IdentityBuilder(typeof(User), services);\r\n\t\t}\r\n\t}\r\n\r\nI'm not going to include the `ApplicationUserStore` because I highly doubt it has anything to do with the exception. I'd appreciate any help because I am just struggling at this point. Thanks!","Url":"https://github.com/aspnet/Identity/issues/2082","RelatedDescription":"Closed issue \"No sign-out authentication handler is registered for the scheme 'Identity.External'\" (#2082)"},{"Id":"383003537","IsPullRequest":false,"CreatedAt":"2018-11-22T13:29:00","Actor":"LindaLawton","Number":"2079","RawContent":null,"Title":"Remember me isPersistent understanding","State":"closed","Body":"This is more of a question but its not enough of a question that i could post it up on stack overflow without risking it just getting closed as primary opinion based or to broad.   So i am going to put it here in hopes of getting an answer.\r\n\r\nThe issue is the understanding of how remember me is supposed to work.    My problem is that its not doing what we would expect it to do.   \r\n\r\nManagement expects when a user logs in and clicks remember me that they will then not be required to type their login and password again for a month.  Whether or not they will still have to type in the 2fa code is up for debate.\r\n\r\nWhat is actually happening is that i can close the browser reboot and come back for about an hour and 15 minutes and then i will be forced to type my password again.    This still happens even with a valid `.AspNetCore.Identity.Application` cookie set that is not due to expire for another month.\r\n\r\nAfter digging around in the code i found that Remember me is actually isPersistent and it is defined as.\r\n\r\n>Flag indicating whether the sign-in cookie should persist after the browser is closed.\r\n\r\nWhich brings you to:\r\n\r\nThere are two different types of Cookies:\r\n\r\n- session cookies, held in memory, and which expire once the browser exits\r\n- persistent cookies, which have a time-to-live, are persisted on disk, and are sent by the browser until their time-to-live has elapsed.\r\n\r\nAll this being said remember machine 2fa works as expected i am not prompted again for the 2fa and i have a cookie on my machine `Identity.TwoFactorRememberMe`.\r\n\r\nSo I guess my question is why are we not getting a `Identity.FactorRememberMe` or why isn't sign in respecting a long life time of the `AspNetCore.Identity.Application` cookie?\r\n\r\nHow is this supposed to work exactly?   I am following the code here even though we have normal MVC and not razor pages like you have in the example.  I am still just calling \r\n\r\n>var signInUserResult = await _signInManager.PasswordSignInAsync(userName, password, rememberMe, true);\r\n\r\nNote: I am using Asp .net Identity in Identity server 4 application.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2079","RelatedDescription":"Closed issue \"Remember me isPersistent understanding\" (#2079)"},{"Id":"383297898","IsPullRequest":false,"CreatedAt":"2018-11-21T22:08:40","Actor":"mmillican","Number":"2080","RawContent":null,"Title":"Replace a Role Validator","State":"closed","Body":"I am trying to create a custom role validator to support pseudo-multi-tenancy (which I know is not _officially_ supported in Identity) and am running into some issues.\r\n\r\nI've verified that my validator does work and is being called. However, the default validator appears to be called also. \r\n\r\nHere's my Identity service registration\r\n```\r\nservices.AddIdentity<User, Role>(setup =>\r\n    {\r\n        // Redacted settings\r\n    })\r\n    .AddRoleValidator<CustomRoleValidator<Role>>()\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders();\r\n```\r\n\r\nHow can I _remove_ the default RoleValidator?","Url":"https://github.com/aspnet/Identity/issues/2080","RelatedDescription":"Closed issue \"Replace a Role Validator\" (#2080)"},{"Id":"382890054","IsPullRequest":true,"CreatedAt":"2018-11-20T23:38:12","Actor":"dotnet-maestro-bot","Number":"2078","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\ngit checkout master\r\ngit merge --no-ff merge/release/2.2-to-master\r\ngit push origin master\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.2-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2078","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2078)"},{"Id":"382876972","IsPullRequest":true,"CreatedAt":"2018-11-20T23:38:12","Actor":"javiercn","Number":"2076","RawContent":null,"Title":"Update to IdentityServer 2.3.0","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2076","RelatedDescription":"Closed or merged PR \"Update to IdentityServer 2.3.0\" (#2076)"},{"Id":"382885320","IsPullRequest":true,"CreatedAt":"2018-11-20T23:19:15","Actor":"javiercn","Number":"2077","RawContent":null,"Title":"Update Identity Server dependencies to 2.3.0","State":"closed","Body":"This updates things on non-shipping product code, so it's ok to update (I asked).","Url":"https://github.com/aspnet/Identity/pull/2077","RelatedDescription":"Closed or merged PR \"Update Identity Server dependencies to 2.3.0\" (#2077)"},{"Id":"382068763","IsPullRequest":false,"CreatedAt":"2018-11-19T12:16:11","Actor":"wpqs","Number":"2074","RawContent":null,"Title":"Login doesn't show registered social logins after error","State":"closed","Body":"I'm using ASPNET Core 2.1 with Razor Pages UI Library and noticed that whilst registered social logins appear when I open the Login page, they disappear after an error like incorrect password.\r\n\r\nThere seems to be a bug in Identity\\Pages\\Account\\Login.cshtml.cs as \r\n````\r\n public IList<AuthenticationScheme> ExternalLogins { get; set; }\r\n\r\n````\r\nis only initialised in OnGetAsync(), but if an error happens OnPostAsync() then Page() is returned so OnGetAsyn() doesn't get called. Changing error handling in  OnPostAsync() so RedirectToPage() is returned seems to fix the problem.\r\n\r\nPlease confirm this is a bug and comment on my fix","Url":"https://github.com/aspnet/Identity/issues/2074","RelatedDescription":"Closed issue \"Login doesn't show registered social logins after error\" (#2074)"},{"Id":"381789469","IsPullRequest":true,"CreatedAt":"2018-11-17T00:27:58","Actor":"natemcmaster","Number":"2072","RawContent":null,"Title":"Upgrade projects to netcoreapp3.0","State":"closed","Body":"Changes:\r\n\r\n* Upgrade dependencies\r\n* Change TFM on Microsoft.AspNetCore.Identity to netcoreapp3.0\r\n* Remove .NET Framework tests\r\n\r\nPart of https://github.com/aspnet/AspNetCore/issues/3754","Url":"https://github.com/aspnet/Identity/pull/2072","RelatedDescription":"Closed or merged PR \"Upgrade projects to netcoreapp3.0\" (#2072)"},{"Id":"380931030","IsPullRequest":true,"CreatedAt":"2018-11-14T23:29:46","Actor":"pranavkm","Number":"2070","RawContent":null,"Title":"Use 3.0 configuration in RCLs","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2070","RelatedDescription":"Closed or merged PR \"Use 3.0 configuration in RCLs\" (#2070)"},{"Id":"378005714","IsPullRequest":false,"CreatedAt":"2018-11-14T21:00:55","Actor":"papyr","Number":"2057","RawContent":null,"Title":"AD directory user-groups; can IdentityRole be subclassed to implement Role-Groups or User-Groups","State":"closed","Body":"There is a disconnect with Active Directory, since we don't have support for User Groups in Identity, how can we implement or mirror this functionality inside ASP identity","Url":"https://github.com/aspnet/Identity/issues/2057","RelatedDescription":"Closed issue \"AD directory user-groups; can IdentityRole be subclassed to implement Role-Groups or User-Groups\" (#2057)"},{"Id":"380198930","IsPullRequest":false,"CreatedAt":"2018-11-14T17:33:59","Actor":"blankenbush","Number":"2065","RawContent":null,"Title":"Spelling error DeletePersonalData.cshtml.cs ","State":"closed","Body":"The word \"deleteing\" is wrong.  It should be \"deleting\" on line: 111; DeletePersonalData.cshtml.cs.\r\n\r\nAlso found in comment on line 183; SqlStoreTestBase.cs\r\n\r\n![capture](https://user-images.githubusercontent.com/187785/48412982-33401500-e714-11e8-903b-6e2fcc8e0a6a.PNG)\r\n","Url":"https://github.com/aspnet/Identity/issues/2065","RelatedDescription":"Closed issue \"Spelling error DeletePersonalData.cshtml.cs \" (#2065)"},{"Id":"380389829","IsPullRequest":true,"CreatedAt":"2018-11-14T17:33:01","Actor":"blankenbush","Number":"2066","RawContent":null,"Title":"Fix typo","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2066","RelatedDescription":"Closed or merged PR \"Fix typo\" (#2066)"},{"Id":"377364575","IsPullRequest":false,"CreatedAt":"2018-11-09T11:16:05","Actor":"yetanotherchris","Number":"2056","RawContent":null,"Title":"Should IdentityUser be in the EntityFramework namespace?","State":"closed","Body":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.entityframeworkcore.identityuser?view=aspnetcore-1.1\r\n\r\nI'm looking through various implementations from the [readme](https://github.com/aspnet/Identity/blob/master/README.md) and I've noticed they all use `IdentityUser ` for their concrete type to pass to `UserManager`, or have had to craft a custom type to be able to have a contract between the database and the .NET AspNetIdentity implentation they've written (see the DynamoDB library).\r\n\r\nI've had to do this too for the [Marten implementation I've written](https://github.com/yetanotherchris/Marten.AspNetIdentity), and the reason is, a `TUser` that your `UserStore` takes, should really be an interface - it will always have an email, most likely an Id of some sort, firstname, lastname and then a bag of properties.\r\n\r\nThings become even more abstract when dealing with claims.\r\n\r\nIf everyone is using `IdentityUser` or their own custom `TUser` doesn't this defeat the purpose of AspnetIdentity - which is to be able to switch and change implementations easily? That isn't possible if your consumer is tightly coupled with a `TUser` implementation of the library.\r\n\r\n### Example `TUser` implementations\r\n\r\n- [MongoIdentityUser](https://github.com/tugberkugurlu/AspNetCore.Identity.MongoDB/blob/master/src/AspNetCore.Identity.MongoDB/MongoIdentityUser.cs)\r\n- [DynamoIdentityUser](https://github.com/miltador/AspNetCore.Identity.DynamoDB/blob/master/src/AspNetCore.Identity.DynamoDB/DynamoIdentityUser.cs)\r\n- [Redis uses `IdentityUser<string>`](https://github.com/aguacongas/Identity.Redis/blob/develop/src/Aguacongas.Identity.Redis/UserStore.cs)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2056","RelatedDescription":"Closed issue \"Should IdentityUser be in the EntityFramework namespace?\" (#2056)"},{"Id":"376980171","IsPullRequest":true,"CreatedAt":"2018-11-02T21:57:29","Actor":"dotnet-maestro-bot","Number":"2055","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\ngit checkout master\r\ngit merge --no-ff merge/release/2.2-to-master\r\ngit push origin master\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.2-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.2-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2055","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2055)"},{"Id":"376978591","IsPullRequest":true,"CreatedAt":"2018-11-02T21:57:26","Actor":"javiercn","Number":"2054","RawContent":null,"Title":"Fixes integrity validation in Identity UI V3","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2054","RelatedDescription":"Closed or merged PR \"Fixes integrity validation in Identity UI V3\" (#2054)"},{"Id":"376977750","IsPullRequest":false,"CreatedAt":"2018-11-02T21:48:32","Actor":"javiercn","Number":"2053","RawContent":null,"Title":"Fix integrity tags on Identity UI V3","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/issues/2053","RelatedDescription":"Closed issue \"Fix integrity tags on Identity UI V3\" (#2053)"},{"Id":"376973581","IsPullRequest":true,"CreatedAt":"2018-11-02T21:48:08","Actor":"javiercn","Number":"2052","RawContent":null,"Title":"Fixes integrity validation hashes for Identity UI V3","State":"closed","Body":"Fixes https://github.com/aspnet/Identity/issues/2053","Url":"https://github.com/aspnet/Identity/pull/2052","RelatedDescription":"Closed or merged PR \"Fixes integrity validation hashes for Identity UI V3\" (#2052)"},{"Id":"376607709","IsPullRequest":false,"CreatedAt":"2018-11-01T23:29:51","Actor":"ycrumeyrolle","Number":"2051","RawContent":null,"Title":"[Question] Passwords should not be of type String ?","State":"closed","Body":"My security team escalated to me that the `PasswordHasher` is vulnerable to heap inspection, as the password is of type `String`. \r\nIt should be instead a byte array / span of bytes cleared at the end of the process, as it is done by any cryptographic operation in corefx. CC @bartonjs.\r\nSame problem with any password related types (`IPasswordValidator`, and maybe also the `IUserPasswordStore`)","Url":"https://github.com/aspnet/Identity/issues/2051","RelatedDescription":"Closed issue \"[Question] Passwords should not be of type String ?\" (#2051)"}],"ResultType":"GitHubIssue"},"Tooling-Issues":{"Issues":[{"Id":"597492854","IsPullRequest":true,"CreatedAt":"2020-04-09T19:44:41","Actor":"terrajobst","Number":"1097","RawContent":null,"Title":"Link Code of Conduct","State":"closed","Body":"See [this policy rule](https://github.com/dotnet/org-policy/blob/master/doc/PR15.md) for more details.","Url":"https://github.com/aspnet/Tooling/pull/1097","RelatedDescription":"Closed or merged PR \"Link Code of Conduct\" (#1097)"},{"Id":"585801568","IsPullRequest":false,"CreatedAt":"2020-03-22T20:10:12","Actor":"GaryFurash","Number":"1096","RawContent":null,"Title":"Creating Edit View with Non EFModel","State":"open","Body":"Using latest ASP.NET Core with latest Nuget on Visual Studio 2019 windows 10 pro.\r\n\r\nIf I try to create an Edit view based on a view model that isn't configured in the DB context (e.g., it's a model that doesn't map to a DB table in EF), even after adding the [Key] annotation I get the error:\r\n\r\n'The entity type 'RoleEdit' requires a primary key to be defined. If you intended to use a keyless entity type call 'HasNoKey()'.'\r\n\r\nI can't use HasNoKey since the model entity isn't in the context since it isn't a real table.\r\n","Url":"https://github.com/aspnet/Tooling/issues/1096","RelatedDescription":"Open issue \"Creating Edit View with Non EFModel\" (#1096)"},{"Id":"576654849","IsPullRequest":true,"CreatedAt":"2020-03-06T02:27:01","Actor":"mairaw","Number":"1095","RawContent":null,"Title":"Update link to a more proper target","State":"open","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1095","RelatedDescription":"Open PR \"Update link to a more proper target\" (#1095)"},{"Id":"499940912","IsPullRequest":false,"CreatedAt":"2019-09-28T16:33:15","Actor":"genifycom","Number":"1094","RawContent":null,"Title":"Add Razor Page using Entity Framework (CRUD)","State":"open","Body":"<!-- Describe what isn't working as expected -->\r\nWhen I right click on Pages and Add Razor page. I select Razor Pages using Entity Framework (CRUD). I select my Model class and my Data Context class and press Add.\r\n\r\nI expect to give the Razor page a name. But a Dialog pops up and says\r\n\r\nAdd Razor Page(s)\r\n\r\nThe following file(s) already exist:\r\n\r\nIndex\r\nIndex.cshtml.cs\r\n\r\nDo you want to replace them?\r\n---------------------------\r\nYes   No   \r\n---------------------------\r\n\r\nI do not expect that adding a Razor page will replace Index. I expect to create a NEW razor page with a new name. Saying No here does not allow one to continue.\r\n\r\n### Steps to reproduce\r\nAs above\r\n\r\nWe ❤ code! Include a complete code listing or attach a simplified project\r\n\r\nCreate a new ASP.NET Core Web Application. Use ASP.NET Core 3.0 and \"Web Application\".\r\nCreate a model class (Customer with int ID and string Name).\r\nAdd Razor Page using EF and CRUD.\r\nSelect Model class and add context class.\r\nClick Add\r\n\r\n### Further technical details\r\n\r\nEF Core version: 3.0\r\nDatabase provider: (e.g. Microsoft.EntityFrameworkCore.SqlServer)\r\nTarget framework: (e.g. .NET Core 3.0)\r\nOperating system: Windows 10\r\nIDE: (e.g. Visual Studio 2019 16.3) Visual Studio 2019 16.3.1\r\n","Url":"https://github.com/aspnet/Tooling/issues/1094","RelatedDescription":"Open issue \"Add Razor Page using Entity Framework (CRUD)\" (#1094)"},{"Id":"480473543","IsPullRequest":false,"CreatedAt":"2019-08-14T04:21:20","Actor":"AlseinX","Number":"1093","RawContent":null,"Title":"`dotnet new -i` does not work any more in preview8","State":"open","Body":"`dotnet new -i Microsoft.AspNetCore.Blazor.Templates::3.0.0-preview8.19405.7`\r\n\r\nResults:\r\n\r\n```\r\n用法: new [选项]\r\n\r\n选项:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --dry-run           Displays a summary of what would happen if the given command line were run if it would result in a template creation.\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n  --update-check      Check the currently installed template packs for updates.\r\n  --update-apply      Check the currently installed template packs for update, and install the updates.\r\n\r\n\r\nTemplates                                         Short Name               Language          Tags\r\n----------------------------------------------------------------------------------------------------------------------------------\r\nConsole Application                               console                  [C#], F#, VB      Common/Console\r\nClass library                                     classlib                 [C#], F#, VB      Common/Library\r\nWPF Application                                   wpf                      [C#], VB          Common/WPF\r\nWPF Class library                                 wpflib                   [C#], VB          Common/WPF\r\nWPF Custom Control Library                        wpfcustomcontrollib      [C#], VB          Common/WPF\r\nWPF User Control Library                          wpfusercontrollib        [C#], VB          Common/WPF\r\nWindows Forms (WinForms) Application              winforms                 [C#], VB          Common/WinForms\r\nWindows Forms (WinForms) Class library            winformslib              [C#], VB          Common/WinForms\r\nWorker Service                                    worker                   [C#]              Common/Worker/Web\r\nUnit Test Project                                 mstest                   [C#], F#, VB      Test/MSTest\r\nNUnit 3 Test Project                              nunit                    [C#], F#, VB      Test/NUnit\r\nNUnit 3 Test Item                                 nunit-test               [C#], F#, VB      Test/NUnit\r\nxUnit Test Project                                xunit                    [C#], F#, VB      Test/xUnit\r\nRazor Component                                   razorcomponent           [C#]              Web/ASP.NET\r\nRazor Page                                        page                     [C#]              Web/ASP.NET\r\nMVC ViewImports                                   viewimports              [C#]              Web/ASP.NET\r\nMVC ViewStart                                     viewstart                [C#]              Web/ASP.NET\r\nBlazor Server App                                 blazorserver             [C#]              Web/Blazor\r\nASP.NET Core Empty                                web                      [C#], F#          Web/Empty\r\nASP.NET Core Web App (Model-View-Controller)      mvc                      [C#], F#          Web/MVC\r\nASP.NET Core Web App                              webapp                   [C#]              Web/MVC/Razor Pages\r\nASP.NET Core with Angular                         angular                  [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js                        react                    [C#]              Web/MVC/SPA\r\nASP.NET Core with React.js and Redux              reactredux               [C#]              Web/MVC/SPA\r\nRazor Class Library                               razorclasslib            [C#]              Web/Razor/Library/Razor Class Library\r\nASP.NET Core Web API                              webapi                   [C#], F#          Web/WebAPI\r\nASP.NET Core gRPC Service                         grpc                     [C#]              Web/gRPC\r\ndotnet gitignore file                             gitignore                                  Config\r\nglobal.json file                                  globaljson                                 Config\r\nNuGet Config                                      nugetconfig                                Config\r\nDotnet local tool manifest file                   tool-manifest                              Config\r\nWeb Config                                        webconfig                                  Config\r\nSolution File                                     sln                                        Solution\r\nProtocol Buffer File                              proto                                      Web/gRPC\r\n\r\nExamples:\r\n    dotnet new mvc --auth Individual\r\n    dotnet new wpfcustomcontrollib\r\n    dotnet new --help\r\n\r\n```\r\n\r\nRunning `dotnet new -i aaa::bbb` results the same.","Url":"https://github.com/aspnet/Tooling/issues/1093","RelatedDescription":"Open issue \"`dotnet new -i` does not work any more in preview8\" (#1093)"},{"Id":"477192366","IsPullRequest":true,"CreatedAt":"2019-08-06T06:25:26","Actor":"SuperChenSSS","Number":"1092","RawContent":null,"Title":"Point \"Set up DNS name for the VM\" link to the right direction","State":"open","Body":"The \"Set up DNS name for the VM\" link is incorrect and can't see the content. Change it to the right direction.","Url":"https://github.com/aspnet/Tooling/pull/1092","RelatedDescription":"Open PR \"Point \"Set up DNS name for the VM\" link to the right direction\" (#1092)"},{"Id":"477188104","IsPullRequest":true,"CreatedAt":"2019-08-06T06:24:35","Actor":"SuperChenSSS","Number":"1091","RawContent":null,"Title":"Point \"Set up DNS name for the VM\" link to the right direction","State":"closed","Body":"The \"Set up DNS name for the VM\" link is incorrect and can't see the content. Change it to the right direction.","Url":"https://github.com/aspnet/Tooling/pull/1091","RelatedDescription":"Closed or merged PR \"Point \"Set up DNS name for the VM\" link to the right direction\" (#1091)"},{"Id":"476745373","IsPullRequest":false,"CreatedAt":"2019-08-05T09:15:18","Actor":"juniormayhe","Number":"1090","RawContent":null,"Title":"Cannot start a webapi on specific SSL port managed by IISExpress","State":"open","Body":"A brand new netcore webapi 2.2 is created. \r\n\r\nCurrent launch settings:\r\n```\r\n{\r\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:62813\",\r\n      \"sslPort\": 44396\r\n    }\r\n  },\r\n```\r\n\r\nAfter setting the SSL port to anything such as 11000, application won't get started on IIS Express, but the same app runs correctly on port 11000 after being published to local IIS (https://localhost:11000).\r\n\r\nThe only way to start it on IIS Express is to keep 443 prefix (i.e. 44300, 44301, etc). \r\n\r\nIs this restriction by design as stated [here](https://developercommunity.visualstudio.com/content/problem/39430/changing-port-number-in-a-web-project-does-not-imm.html?childToView=43139#comment-43139)?\r\n\r\n\"You can change that value to whatever you want.\" definitely is not working as stated here: https://github.com/aspnet/Tooling/issues/286\r\n\r\n```\r\n- Visual Studio 2019 16.1.6\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-012264\r\n Commit:    be3f0c1a03\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27804-01\r\n  Commit:  fdf81c6faf\r\n\r\n.NET Core SDKs installed:\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800-preview-009696 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010219 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012264 [C:\\Program Files\\dotnet\\sdk]\r\n```","Url":"https://github.com/aspnet/Tooling/issues/1090","RelatedDescription":"Open issue \"Cannot start a webapi on specific SSL port managed by IISExpress\" (#1090)"},{"Id":"465641918","IsPullRequest":false,"CreatedAt":"2019-07-09T08:26:34","Actor":"plachor","Number":"1089","RawContent":null,"Title":"LaunchSettings are not respected by Test Runner","State":"open","Body":"In latest Visual Studio 2019, Test Runner ignores `environmentVariables` configuration which would allow for instance configuration of `ASPNETCORE_ENVIRONMENT`.\r\n\r\nThis would be beneficial for integration tests that in local environment use different appsettings (non-production).\r\n\r\nFor instance I would like to define following launchSettings.json:\r\n```json\r\n{\r\n  \"profiles\": {\r\n    \"SomeFancyNamespace.ProjectName.Integration.Tests\": {\r\n      \"commandName\": \"Project\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThere was an related issue that was closed: https://github.com/aspnet/Tooling/issues/456 ","Url":"https://github.com/aspnet/Tooling/issues/1089","RelatedDescription":"Open issue \"LaunchSettings are not respected by Test Runner\" (#1089)"},{"Id":"447378907","IsPullRequest":true,"CreatedAt":"2019-05-22T23:02:06","Actor":"Rick-Anderson","Number":"1088","RawContent":null,"Title":"Update dotnet-core-3.0-preview1.md","State":"open","Body":"MS Style guide violations and other clean up. Less is more.","Url":"https://github.com/aspnet/Tooling/pull/1088","RelatedDescription":"Open PR \"Update dotnet-core-3.0-preview1.md\" (#1088)"},{"Id":"433911513","IsPullRequest":true,"CreatedAt":"2019-04-16T17:57:10","Actor":"Rick-Anderson","Number":"1087","RawContent":null,"Title":"Update known-issues-vs2017.md","State":"open","Body":"Use Visual Studio Installer to install the missing Visual Studio component \".NET Core 1.0 - 1.1 developer tools for Web\" from the **Individual components** tab.","Url":"https://github.com/aspnet/Tooling/pull/1087","RelatedDescription":"Open PR \"Update known-issues-vs2017.md\" (#1087)"},{"Id":"430834286","IsPullRequest":false,"CreatedAt":"2019-04-09T17:36:29","Actor":"Ashishks1987","Number":"1086","RawContent":null,"Title":"System.Collections.Immutable dll being replace by Microsoft.Net.Compilers","State":"closed","Body":"I have referenced `system.collections.immutable.dll` from the nuget package and I also have the nuget package installed for `Microsoft.Net.Compilers`. Everything works fine in my local but when I push my code to bamboo, in the runtime I get `Could not load file or assembly 'System.Collections.Immutable, Version=1.2.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)`\r\n\r\nWhen I checked logs on bamboo when it generates the artifacts, I can see that initially it copied the correct dll here:\r\n\r\n`build    04-Apr-2019 03:20:33      Copying file from \"E:\\agt01\\ENS-EB580-JOB1\\Bin\\Packages\\System.Collections.Immutable.1.5.0\\lib\\netstandard1.0\\System.Collections.Immutable.dll\" to \"E:\\agt01\\ENS-EB580-JOB1\\Binaries\\Release\\\\temp\\Web\\_PublishedWebsites\\MyService\\bin\\System.Collections.Immutable.dll\"`.\r\n\r\nbut then at some point, it replaced this dll with this: `build    04-Apr-2019 03:20:33      Copying file from \"E:\\agt01\\ENS-EB580-JOB1\\Bin\\Packages\\Microsoft.Net.Compilers.1.0.0\\tools\\System.Collections.Immutable.dll\" to \"E:\\agt01\\ENS-EB580-JOB1\\Binaries\\Release\\\\temp\\Web\\_PublishedWebsites\\MyService\\bin\\System.Collections.Immutable.dll\".`\r\n\r\nHow can I make sure that bamboo does not replace this dll and just uses it from the nuget package installed?","Url":"https://github.com/aspnet/Tooling/issues/1086","RelatedDescription":"Closed issue \"System.Collections.Immutable dll being replace by Microsoft.Net.Compilers\" (#1086)"},{"Id":"422330835","IsPullRequest":false,"CreatedAt":"2019-03-18T17:00:12","Actor":"vikasNew","Number":"1085","RawContent":null,"Title":"web deploy on windows 10","State":"open","Body":"Hello,\r\n\r\ncan i publish my code by using web deploy to windows 10 machine.\r\n\r\ni have setup my testing windows 10 machine for deployment, which is in local area network.\r\n\r\nSo i want to publish my code to that remote machine by using web deploy. can i do that ?\r\n\r\ni have installed web deploy and also enabled web development remote service on windows 10 but i am not able to connect to remote machine using we deploy.\r\n\r\nThis returns me the following error every-time.\r\n\"ERROR_DESTINATION_NOT_REACHABLE\"\r\n\r\ninteresting thing is i also have windows 10 on my machine & i am able to use web deploy on my local machine but it's not working with remote windows 10 machine.\r\n\r\nis web deploy only meant for Windows servers not for other normal windows?\r\n\r\nThanks \r\n","Url":"https://github.com/aspnet/Tooling/issues/1085","RelatedDescription":"Open issue \"web deploy on windows 10\" (#1085)"},{"Id":"398036850","IsPullRequest":false,"CreatedAt":"2019-01-15T05:32:59","Actor":"chrgraefe","Number":"1084","RawContent":null,"Title":"Can't add area on ASP.NET Core MVC project","State":"closed","Body":"### Describe the bug\r\nA clear and concise description of what the bug is.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using this version of ASP.NET Core '3.0.100-preview-009812'\r\n2. New ASP.NET Core MVC project in VS2019 Preview\r\n3. Can't add area\r\n\r\n### Expected behavior\r\nA dialog to type area name\r\n","Url":"https://github.com/aspnet/Tooling/issues/1084","RelatedDescription":"Closed issue \"Can't add area on ASP.NET Core MVC project\" (#1084)"},{"Id":"391209971","IsPullRequest":false,"CreatedAt":"2018-12-14T18:00:59","Actor":"sai-manoj-kumar","Number":"1080","RawContent":null,"Title":"The template to create an ASP .NET VM is not working","State":"open","Body":"[The template given here](https://github.com/aspnet/Tooling/blob/AspNetVMs/docs/create-asp-net-vm-with-webdeploy.md#PowerShellScript) doesn't work. It gives the error SkuNotAvailable. Can someone please fix it?","Url":"https://github.com/aspnet/Tooling/issues/1080","RelatedDescription":"Open issue \"The template to create an ASP .NET VM is not working\" (#1080)"},{"Id":"385928083","IsPullRequest":false,"CreatedAt":"2018-12-07T20:30:45","Actor":"sinand","Number":"1079","RawContent":null,"Title":"auto build on browser request not working","State":"closed","Body":"I am using community edition 15.9.3 since  the previous update this feature is not working, everytime I have to build project.","Url":"https://github.com/aspnet/Tooling/issues/1079","RelatedDescription":"Closed issue \"auto build on browser request not working\" (#1079)"},{"Id":"383440110","IsPullRequest":false,"CreatedAt":"2018-11-26T19:03:29","Actor":"eriawan","Number":"1078","RawContent":null,"Title":"Feedback: ensure that .NET Core 1.0/1.1 tooling only supported in VS 2017 and won't be supported in VS 2019","State":"closed","Body":"Apologize if my feedback may sound controversial or may spark a debate.\r\n\r\nI need to be sure that the problem mentioned on this [page](https://github.com/aspnet/Tooling/blob/master/known-issues-vs2017.md#to-create-aspnet-core-10--11-projects-install-visual-studios-net-core-10---11-developer-tools-for-web-component) about .NET Core 1.0/1.1 tooling is installed when creating new ASP.NET Core 1.0/1.1 project should not happen or should not be supported in VS 2019.\r\n\r\nThese are my main concerns:\r\n\r\n1. VS 2019 is about to be released in around early 2019\r\n2. ASP.NET Core 1.0/1.1 is not going to be supported anymore, based on [this page](https://github.com/dotnet/core/blob/master/microsoft-support.md).\r\n3. Creating new ASP.NET Core 1.0/1.1 will always install the .NET Core 1.0/1.1 web tooling, and this is not necessary when previous reason has reached the unsupported period and it's quite near or might be the same time of VS 2019 release.\r\n4. Based on the problem mentioned above, VS 2017 has no \"built in\" tooling when creating new ASP.NET Core 1.0/1.1 project, but the external tooling may help. Therefore for those that still need to maintain ASP.NET Core 1.0/1.1 projects, we could use VS 2017 as long as the VS 2017 is still in support lifecycle or in mainstream support lifecycle.\r\n\r\nI welcome feedback 🙂 \r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1078","RelatedDescription":"Closed issue \"Feedback: ensure that .NET Core 1.0/1.1 tooling only supported in VS 2017 and won't be supported in VS 2019\" (#1078)"},{"Id":"349649932","IsPullRequest":true,"CreatedAt":"2018-08-10T20:38:21","Actor":"AndrewBrianHall","Number":"1077","RawContent":null,"Title":"Adding a .net core -> vs mapping table","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1077","RelatedDescription":"Closed or merged PR \"Adding a .net core -> vs mapping table\" (#1077)"},{"Id":"333613195","IsPullRequest":false,"CreatedAt":"2018-06-27T12:59:29","Actor":"Liero","Number":"1076","RawContent":null,"Title":"Unable to publish when using Microsoft.NET.Sdk.Razor","State":"closed","Body":"After I upgraded my solution from asp.net core 2.0 to 2.1, I'm not able to publish my web app from Visual Studio, although it can build.\r\n\r\nDuring the upgrade I've changed SDK in one of my class libraries to **Microsoft.NET.Sdk.Razor**, but now I'm getting a lot of errors and if project references were not recognized in this library when publishing.\r\n\r\n```\r\nConnecting to C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\publish\\...\r\nMyProject.Web -> C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\MyProject.Web.dll\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;RELEASE;NETCOREAPP;NETCOREAPP2_1 /errorendlocation /preferreduilang:en-US /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization.policy\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.Policy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.internal\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cryptography.Internal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.server.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.html.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Html.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.jsonpatch\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.JsonPatch.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.apiexplorer\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.dataannotations\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.json\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.viewfeatures\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.language\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Language.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.runtime\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.webutilities\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.WebUtilities.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.CodeAnalysis.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.dotnet.platformabstractions\\2.1.0\\lib\\netstandard1.3\\Microsoft.DotNet.PlatformAbstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Relational.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.SqlServer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Binder.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netcoreapp2.0\\Microsoft.Extensions.DependencyInjection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencymodel\\2.1.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.composite\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Composite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.filesystemglobbing\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileSystemGlobbing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.objectpool\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.ObjectPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Options.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.webencoders\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.WebEncoders.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.net.http.headers\\2.1.0\\lib\\netstandard2.0\\Microsoft.Net.Http.Headers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.VisualBasic.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.Win32.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.win32.registry\\4.5.0\\ref\\netstandard2.0\\Microsoft.Win32.Registry.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\mscorlib.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\netstandard.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json.bson\\1.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.Bson.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json\\11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\remotion.linq\\2.2.0\\lib\\netstandard1.0\\Remotion.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.AppContext.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Buffers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Concurrent.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Immutable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.NonGeneric.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Specialized.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Annotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.EventBasedAsync.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.TypeConverter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Console.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.Common.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.data.sqlclient\\4.5.0\\ref\\netcoreapp2.1\\System.Data.SqlClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Contracts.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Debug.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.DiagnosticSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.FileVersionInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Process.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.StackTrace.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TextWriterTraceListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tools.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TraceSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tracing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Dynamic.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Calendars.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.Brotli.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.ZipFile.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.DriveInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Watcher.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.IsolatedStorage.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.MemoryMappedFiles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Pipes.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.UnmanagedMemoryStream.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Expressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Queryable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.HttpListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Mail.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NameResolution.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NetworkInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Ping.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Requests.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.ServicePoint.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Sockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebHeaderCollection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.Client.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.Vectors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ObjectModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.DispatchProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.ILGeneration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.Lightweight.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.TypeExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Reader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.ResourceManager.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Writer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.CompilerServices.VisualC.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Handles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.RuntimeInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.WindowsRuntime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Loader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Formatters.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\ref\\netstandard2.0\\System.Security.AccessControl.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Claims.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Algorithms.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Csp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.X509Certificates.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.cryptography.xml\\4.5.0\\ref\\netstandard2.0\\System.Security.Cryptography.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.permissions\\4.5.0\\ref\\netstandard2.0\\System.Security.Permissions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Principal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.5.0\\ref\\netstandard2.0\\System.Security.Principal.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.SecureString.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceModel.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceProcess.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encodings.web\\4.5.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.RegularExpressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Overlapped.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Dataflow.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Thread.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.ThreadPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Timer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.Local.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ValueTuple.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.HttpUtility.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.ReaderWriter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlSerializer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\WindowsBase.dll\" /debug- /debug:portable /filealign:512 /optimize+ /out:obj\\Release\\netcoreapp2.1\\MyProject.Mail.dll /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:library /warnaserror- /utf8output /deterministic+ /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.CSharp.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.analyzers\\2.1.0\\analyzers\\dotnet\\cs\\Microsoft.EntityFrameworkCore.Analyzers.dll\" EmailDefaults.cs EmailOptions.cs MailSender.cs NotificationService.cs RazorViewToStringRenderer.cs \"C:\\Users\\daniel.turan\\AppData\\Local\\Temp\\.NETCoreApp,Version=v2.1.AssemblyAttributes.cs\" obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\\Release\\netcoreapp2.1\\\\Tem\tporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.RazorAssemblyInfo.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.AssemblyInfo.cs /warnaserror+:NU1605\r\nNotificationService.cs(15,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\nNotificationService.cs(16,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\n...\r\n```\r\n\r\nAlso, see https://stackoverflow.com/questions/50926116/publish-failed-when-using-microsoft-net-sdk-razor-if-reference-was-not-recognize for more details","Url":"https://github.com/aspnet/Tooling/issues/1076","RelatedDescription":"Closed issue \"Unable to publish when using Microsoft.NET.Sdk.Razor\" (#1076)"},{"Id":"329605262","IsPullRequest":false,"CreatedAt":"2018-06-05T20:05:23","Actor":"AngelosP","Number":"1075","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of dotnet-aspnet-codegenerator","State":"open","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","Url":"https://github.com/aspnet/Tooling/issues/1075","RelatedDescription":"Open issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of dotnet-aspnet-codegenerator\" (#1075)"},{"Id":"328747170","IsPullRequest":false,"CreatedAt":"2018-06-02T14:10:13","Actor":"AceHack","Number":"1074","RawContent":null,"Title":"Docker in launchSettings.json","State":"open","Body":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image.","Url":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Open issue \"Docker in launchSettings.json\" (#1074)"},{"Id":"328082529","IsPullRequest":true,"CreatedAt":"2018-06-01T17:41:04","Actor":"federicorinaldi","Number":"1073","RawContent":null,"Title":"Update dotnet-core-2.1.md","State":"closed","Body":"Visual Studio 2017 15.7 has been released now so this document is outdated","Url":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Closed or merged PR \"Update dotnet-core-2.1.md\" (#1073)"},{"Id":"323850872","IsPullRequest":false,"CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Number":"1072","RawContent":null,"Title":"can not upload file FTPS. ","State":"closed","Body":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072)"},{"Id":"317494886","IsPullRequest":false,"CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Number":"1071","RawContent":null,"Title":" Unable to start debugging","State":"open","Body":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Open issue \" Unable to start debugging\" (#1071)"},{"Id":"316585462","IsPullRequest":false,"CreatedAt":"2018-04-24T05:17:55","Actor":"rberger247","Number":"1070","RawContent":null,"Title":"Visual studio freezes when I run add-migration ","State":"closed","Body":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger.","Url":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070)"},{"Id":"308764422","IsPullRequest":false,"CreatedAt":"2018-03-27T05:23:09","Actor":"dvdobrovolskiy","Number":"1069","RawContent":null,"Title":"EntityFramework migrations not available to be applied during publish","State":"closed","Body":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc","Url":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069)"},{"Id":"304770827","IsPullRequest":false,"CreatedAt":"2018-03-14T05:33:19","Actor":"ghost","Number":"1068","RawContent":null,"Title":"Switch between Razor Page View and Code Behind","State":"closed","Body":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n","Url":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068)"},{"Id":"304312342","IsPullRequest":false,"CreatedAt":"2018-03-13T05:33:42","Actor":"RehanSaeed","Number":"1067","RawContent":null,"Title":"Support dotnet watch in launchSettings.json","State":"closed","Body":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine.","Url":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067)"},{"Id":"300865938","IsPullRequest":false,"CreatedAt":"2018-02-28T06:01:18","Actor":"rjamesnw","Number":"1066","RawContent":null,"Title":"Nesting bug","State":"closed","Body":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file.","Url":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066)"},{"Id":"290854647","IsPullRequest":false,"CreatedAt":"2018-01-24T01:14:53","Actor":"NeerajaRagesh","Number":"1065","RawContent":null,"Title":"Issue with Sales discount App - Odoo 9","State":"closed","Body":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n","Url":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"3368365312","IsPullRequest":false,"CreatedAt":"2025-08-29T22:32:38","Actor":"BrennanConroy","Number":"526","RawContent":null,"Title":"[Breaking change]: Deprecating WebHostBuilder,  IWebHost, and WebHost","State":"open","Body":"### Description\n\n`WebHostBuilder` was replaced by `HostBuilder` ([generic host](https://learn.microsoft.com/aspnet/core/migration/22-to-30#hostbuilder-replaces-webhostbuilder)) in 3.0 and we also added [`WebApplicationBuilder`](https://learn.microsoft.com/aspnet/core/migration/50-to-60#new-hosting-model) in 6.0.\n\nWe are now marking `WebHostBuilder` as obsolete to encourage users to move on to the alternatives which is where future investments will occur, and we're also marking `IWebHost` and `WebHost` as deprecated to clean up other parts of the now obsolete web host story.\n\n### Version\n\n.NET 10 RC 1\n\n### Previous behavior\n\n```csharp\nvar hostBuilder = new WebHostBuilder()\n    .UseContentRoot(Directory.GetCurrentDirectory())\n    .UseStartup()\n    .UseKestrel();\n// Test code might use TestServer:\nvar testServer = new TestServer(hostBuilder);\n```\n\n### New behavior\n\nUsing `WebHostBuilder` will produce a compiler warning with diagnostic ID **ASPDEPR004**:\n> warning ASPDEPR004: WebHostBuilder is deprecated in favor of HostBuilder and WebApplicationBuilder. For more information, visit https://aka.ms/aspnet/deprecate/004.\n\nUsing `IWebHost` or `WebHost` will produce a compiler warning with diagnostic ID **ASPDEPR008**:\n> warning ASPDEPR008: WebHost is obsolete. Use HostBuilder or WebApplicationBuilder instead. For more information, visit https://aka.ms/aspnet/deprecate/008.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [x] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nWe recommend the use of `HostBuilder` and `WebApplication` going forward over `WebHostBuilder` because they have all the features of `WebHostBuilder` and will be the focus of future investment.\n\n### Recommended action\n\nSee https://learn.microsoft.com/aspnet/core/fundamentals/host/generic-host or https://learn.microsoft.com/aspnet/core/fundamentals/minimal-apis/webapplication for more details on the different hosting models. As well as [HostBuilder replaces WebHostBuilder](https://learn.microsoft.com/aspnet/core/migration/22-to-30#hostbuilder-replaces-webhostbuilder) and [Introducing WebApplication](https://learn.microsoft.com/aspnet/core/migration/50-to-60#new-hosting-model) for migration guides.\n\nBelow is an example of converting `WebHostBuilder` to `HostBuilder`:\n\n**Before**\n```csharp\nvar hostBuilder = new WebHostBuilder()\n    .UseContentRoot(Directory.GetCurrentDirectory())\n    .UseStartup()\n    .UseKestrel();\n// Test code might use TestServer:\nvar testServer = new TestServer(hostBuilder);\n```\n\n**After**\n```csharp\nusing var host = new HostBuilder()\n    .ConfigureWebHost(webHostBuilder =>\n    {\n        webHostBuilder\n            .UseTestServer() // If using TestServer\n            .UseContentRoot(Directory.GetCurrentDirectory())\n            .UseStartup()\n            .UseKestrel();\n    })\n    .Build();\nawait host.StartAsync();\n\nvar testServer = host.GetTestServer();\n```\n\nBoth Copilot and ChatGpt have given good results so far when asked to convert a WebHostBuilder example to use HostBuilder. Below is an example prompt:\n<details>\n<summary>Example AI Prompt</summary>\n\n> Can you convert\n>\n> var hostBuilder = new WebHostBuilder()\n>     .UseContentRoot(Directory.GetCurrentDirectory())\n>     .UseStartup()\n>     .UseKestrel();\n> // Test code might use TestServer:\n> var testServer = new TestServer(hostBuilder);\n>\n> to use HostBuilder.\n\n</details>\n\n### Affected APIs\n\n`public class Microsoft.AspNetCore.Hosting.WebHostBuilder`\n`public interface Microsoft.AspNetCore.Hosting.IWebHost`\n`public static class Microsoft.AspNetCore.WebHost`\n\n### Discussion\n\nhttps://github.com/dotnet/aspnetcore/discussions/63480","Url":"https://github.com/aspnet/Announcements/issues/526","RelatedDescription":"Open issue \"[Breaking change]: Deprecating WebHostBuilder,  IWebHost, and WebHost\" (#526)"},{"Id":"3285338739","IsPullRequest":false,"CreatedAt":"2025-08-01T23:15:08","Actor":"halter73","Number":"525","RawContent":null,"Title":"[Breaking change]: Cookie login redirects are disabled for known API endpoints","State":"open","Body":"### Description\n\nBy default, unauthenticated and unauthorized requests made to known API endpoints protected by cookie authentication now result in 401 and 403 responses rather than redirecting to a login or access denied URI.\n\nKnown API [Endpoints](https://learn.microsoft.com/aspnet/core/fundamentals/routing) are identified using the new `IDisableCookieRedirectMetadata` interface (previously `IApiEndpointMetadata`), and metadata implementing this interface is added automatically to the following:\n\n- `[ApiController]` endpoints\n- Minimal API endpoints that read JSON request bodies or write JSON responses\n- Endpoints using `TypedResults` return types\n- SignalR endpoints\n\n#### Update: Additional Workarounds and Metadata\n\nAfter feedback on the initial change, we've added more flexible ways to work around issues caused by this breaking change:\n\n- **New metadata interface:** `IDisableCookieRedirectMetadata` replaces `IApiEndpointMetadata`.\n- **Opt-in attribute & metadata:** You can now use the `[AllowCookieRedirect]` attribute or implement the `IAllowCookieRedirectMetadata` interface on your endpoints to explicitly allow cookie authentication redirects, even on endpoints that would otherwise suppress them.\n- **Global opt-out AppContext Switch:** You can set the AppContext switch `Microsoft.AspNetCore.Authentication.Cookies.IgnoreRedirectMetadata` to `true` to revert to the old behavior globally and ignore the new metadata-based suppression. This is particularly useful for large apps or frameworks (like UmbracoCMS) that need a quick mitigation.\n\n### Version\n\n.NET 10 Preview 7\n\n### Previous behavior\n\nThe cookie authentication handler would redirect unauthenticated and unauthorized requests to a login or access denied URI by default for all requests other than [XMLHttpRequests (XHRs)](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest).\n\n### New behavior\n\nUnauthenticated and unauthorized requests made to known API endpoints will result in 401 and 403 responses rather than redirecting to a login or access denied URI. XHRs continue to result in 401 and 403 responses regardless of the target endpoint.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [x] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nhttps://github.com/dotnet/aspnetcore/issues/9039 was highly requested, and redirecting unauthenticated requests to a login page doesn't usually make sense for API endpoints which typically rely on 401 and 403 status codes rather than HTML redirects to communicate auth failures.\n\n### Recommended action\n\n#### To always redirect (fully disable new behavior):\n\n**Recommended for frameworks/applications needing an immediate opt-out or full legacy compatibility:**\n\nSet the following AppContext switch (e.g., in your app's runtimeconfig.json or programmatically at startup):\n\n```json\n{\n  \"runtimeOptions\": {\n    \"configProperties\": {\n      \"Microsoft.AspNetCore.Authentication.Cookies.IgnoreRedirectMetadata\": true\n    }\n  }\n}\n```\nOr, set programmatically before building the host:\n```csharp\nAppContext.SetSwitch(\"Microsoft.AspNetCore.Authentication.Cookies.IgnoreRedirectMetadata\", true);\n```\n\n#### To allow redirects on specific endpoints:\n\nApply the `[AllowCookieRedirect]` attribute to controllers or endpoints that should preserve cookie-based redirects, or implement the `IAllowCookieRedirectMetadata` interface.\n\n```csharp\n[AllowCookieRedirect]\npublic class MyLegacyApiController : Controller { ... }\n```\n\n#### To revert to the exact previous handler logic (redirect except for XHRs):\n\nYou can override the events with the following logic:\n\n```csharp\nbuilder.Services.AddAuthentication()\n    .AddCookie(options =>\n    {\n        bool IsXhr(HttpRequest request)\n        {\n            return string.Equals(request.Query[HeaderNames.XRequestedWith], \"XMLHttpRequest\", StringComparison.Ordinal) ||\n                string.Equals(request.Headers.XRequestedWith, \"XMLHttpRequest\", StringComparison.Ordinal);\n        }\n\n        options.Events.OnRedirectToLogin = context =>\n        {\n            if (IsXhr(context.Request))\n            {\n                context.Response.Headers.Location = context.RedirectUri;\n                context.Response.StatusCode = 401;\n            }\n            else\n            {\n                context.Response.Redirect(context.RedirectUri);\n            }\n\n            return Task.CompletedTask;\n        };\n\n        options.Events.OnRedirectToAccessDenied = context =>\n        {\n            if (IsXhr(context.Request))\n            {\n                context.Response.Headers.Location = context.RedirectUri;\n                context.Response.StatusCode = 403;\n            }\n            else\n            {\n                context.Response.Redirect(context.RedirectUri);\n            }\n\n            return Task.CompletedTask;\n        };\n    });\n```\n\n#### To always redirect regardless of endpoint type or XHR:\n\nOverride the events to always redirect:\n\n```csharp\nbuilder.Services.AddAuthentication()\n    .AddCookie(options =>\n    {\n        options.Events.OnRedirectToLogin = context =>\n        {\n            context.Response.Redirect(context.RedirectUri);\n            return Task.CompletedTask;\n        };\n\n        options.Events.OnRedirectToAccessDenied = context =>\n        {\n            context.Response.Redirect(context.RedirectUri);\n            return Task.CompletedTask;\n        };\n    });\n```\n\n### References\n\n- Issue: https://github.com/dotnet/aspnetcore/issues/9039\n- PR (original breaking change): https://github.com/dotnet/aspnetcore/pull/62816\n- PR (additional opt-outs & metadata): https://github.com/dotnet/aspnetcore/pull/63283\n\n### Affected APIs\n\n- `Microsoft.AspNetCore.Http.Metadata.IDisableCookieRedirectMetadata`\n- `Microsoft.AspNetCore.Http.Metadata.IAllowCookieRedirectMetadata`\n- `[AllowCookieRedirect]` attribute\n- [CookieAuthenticationEvents.RedirectToLogin](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.cookies.cookieauthenticationevents.redirecttologin?view=aspnetcore-9.0)\n- [CookieAuthenticationEvents.RedirectToAccessDenied](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.cookies.cookieauthenticationevents.redirecttoaccessdenied?view=aspnetcore-9.0)","Url":"https://github.com/aspnet/Announcements/issues/525","RelatedDescription":"Open issue \"[Breaking change]: Cookie login redirects are disabled for known API endpoints\" (#525)"},{"Id":"3268897827","IsPullRequest":false,"CreatedAt":"2025-07-28T09:05:45","Actor":"JamesNK","Number":"524","RawContent":null,"Title":"[Breaking change]: Exception diagnostics are suppressed when `IExceptionHandler.TryHandleAsync` returns true","State":"open","Body":"### Description\n\nThe [ASP.NET Core exception handler middleware](https://learn.microsoft.com/aspnet/core/fundamentals/error-handling#exception-handler-page), `UseExceptionHandler()`, is responsible for catching and processing unhandled exceptions from ASP.NET Core requests.\n\nIn .NET 8, we introduced [`IExceptionHandler`](https://learn.microsoft.com/aspnet/core/fundamentals/error-handling#iexceptionhandler). Implementations of `IExceptionHandler` are registered with dependency injection and invoked by the middleware. An implementation can return `true` from `IExceptionHandler.TryHandleAsync` to indicate that the exception has been handled. The middleware stops processing the exception once it has been handled.\n\nIn .NET 10, we're changing the default behavior so that the middleware no longer records diagnostics for exceptions handled by `IExceptionHandler`.\n\n### Version\n\n.NET 10 Preview 7\n\n### Previous behavior\n\nThe exception handler middleware recorded diagnostics about exceptions handled by `IExceptionHandler`.\n\nThe exception diagnostics are:\n\n- Logging `UnhandledException` to `ILogger`.\n- Writing the `Microsoft.AspNetCore.Diagnostics.HandledException` event to `EventSource`.\n- Adding the `error.type` tag to the `http.server.request.duration` metric.\n\n### New behavior\n\nIf `IExceptionHandler.TryHandleAsync` returns `true`, then exception diagnostics are no longer recorded by default.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [x] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nASP.NET Core users have given feedback that the previous behavior was undesirable. Their `IExceptionHandler` implementation reported that the exception was handled, but the error handling middleware still recorded the error in the app's telemetry.\n\nWe are changing ASP.NET Core to follow the behavior expected by users by suppressing diagnostics when `IExceptionHandler` handles the exception. We're also adding configuration options to customize exception diagnostics behavior if needed.\n\n### Recommended action\n\nIf you want handled exceptions to continue recording telemetry, you can use the new `ExceptionHandlerOptions.SuppressDiagnosticsCallback` option:\n\n```cs\napp.UseExceptionHandler(new ExceptionHandlerOptions\n{\n    SuppressDiagnosticsCallback = context => false;\n});\n```\n\nThe context passed to the callback includes information about the exception, the request, and whether the exception was handled. Returning `false` from the callback indicates that diagnostics shouldn't be suppressed. This restores the previous behavior.\n\n### References\n\n- Issue: https://github.com/dotnet/aspnetcore/issues/54554\n- PR: https://github.com/dotnet/aspnetcore/pull/59074\n\n### Affected APIs\n\n- `UseExceptionHandler()`\n- `IExceptionHandler`","Url":"https://github.com/aspnet/Announcements/issues/524","RelatedDescription":"Open issue \"[Breaking change]: Exception diagnostics are suppressed when `IExceptionHandler.TryHandleAsync` returns true\" (#524)"},{"Id":"3261192807","IsPullRequest":false,"CreatedAt":"2025-07-24T20:43:37","Actor":"BrennanConroy","Number":"523","RawContent":null,"Title":"[Breaking change]: Obsolete IPNetwork and ForwardedHeadersOptions.KnownNetworks","State":"open","Body":"### Description\n\nReplacing `IPNetwork` with `System.Net.IPNetwork`.\n\n### Version\n\n.NET 10 Preview 7\n\n### Previous behavior\n\n```csharp\napp.UseForwardedHeaders(new ForwardedHeadersOptions\n{\n    KnownNetworks.Add(new(IPAddress.Loopback, 8))\n});\n```\n\n### New behavior\n\nUsing the APIs listed below will produce a compiler warning with diagnostic ID ASPDEPR005:\n> warning ASPDEPR005: Please use KnownIPNetworks instead. For more information, visit https://aka.ms/aspnet/deprecate/005.\n\nUse the `System.Net.IPNetwork` type and `ForwardedHeadersOptions.KnownIPNetworks` property instead.\n\n```csharp\napp.UseForwardedHeaders(new ForwardedHeadersOptions\n{\n    KnownIPNetworks.Add(new(IPAddress.Loopback, 8))\n});\n```\n\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [x] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\n`System.Net.IPNetwork` has replaced the `IPNetwork` type that was implemented for `ForwardedHeadersMiddleware`.\n\n### Recommended action\n\nChange to using `System.Net.IPNetwork` and `KnownIPNetworks`.\n\n### Affected APIs\n\n`Microsoft.AspNetCore.HttpOverrides.IPNetwork`\n`Microsoft.AspNetCore.Builder.ForwardedHeadersOptions.KnownNetworks`","Url":"https://github.com/aspnet/Announcements/issues/523","RelatedDescription":"Open issue \"[Breaking change]: Obsolete IPNetwork and ForwardedHeadersOptions.KnownNetworks\" (#523)"},{"Id":"3261155907","IsPullRequest":false,"CreatedAt":"2025-07-24T20:29:01","Actor":"BrennanConroy","Number":"522","RawContent":null,"Title":"[Breaking change]: Razor runtime compilation is obsolete","State":"open","Body":"### Description\n\nRazor runtime compilation is obsolete and is not recommended for production scenarios. For production scenarios, use the default build time compilation. For development scenarios, use Hot Reload instead.\n\n### Version\n\n.NET 10 Preview 7\n\n### Previous behavior\n\nDevelopers could use [Razor runtime compilation](https://learn.microsoft.com/aspnet/core/mvc/views/view-compilation) to recompile `.cshtml` files while the application is running. This is useful for development time so you don't need to restart the application for changes to take affect.\n\nWe're now obsoleting this and recommending developers make use of [Hot Reload](https://learn.microsoft.com/aspnet/core/test/hot-reload) which has the same effect for development time.\n\n### New behavior\n\nUsing the APIs listed below will produce a compiler warning with diagnostic ID `ASPDEPR003`:\n> warning ASPDEPR003: Razor runtime compilation is obsolete and is not recommended for production scenarios. For production scenarios, use the default build time compilation. For development scenarios, use Hot Reload instead. For more information, visit https://aka.ms/aspnet/deprecate/003.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [x] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nRazor Runtime compilation has been replaced by Hot Reload which has been the recommended approach for a few years now. We're making it clearer that Razor Runtime compilation is not getting support for new features and should no longer be used.\n\n### Recommended action\n\nRemove calls to `.AddRazorRuntimeCompilation()` and use Hot Reload.\n\n### Affected APIs\n\n`Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPartExtensions`\n`Microsoft.Extensions.DependencyInjection.RazorRuntimeCompilationMvcBuilderExtensions.AddRazorRuntimeCompilation`\n`Microsoft.Extensions.DependencyInjection.RazorRuntimeCompilationMvcCoreBuilderExtensions.AddRazorRuntimeCompilation`\n`Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.FileProviderRazorProjectItem`\n`Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.MvcRazorRuntimeCompilationOptions`\n","Url":"https://github.com/aspnet/Announcements/issues/522","RelatedDescription":"Open issue \"[Breaking change]: Razor runtime compilation is obsolete\" (#522)"},{"Id":"3257036718","IsPullRequest":false,"CreatedAt":"2025-07-23T16:40:04","Actor":"captainsafia","Number":"521","RawContent":null,"Title":"[Breaking change]: IncludeOpenAPIAnalyzers property and MVC API analyzers are deprecated","State":"open","Body":"## Description\n\nThe `IncludeOpenAPIAnalyzers` MSBuild property and its associated MVC API analyzers are deprecated and will be removed in a future release. When `IncludeOpenAPIAnalyzers` is set to `true`, the build will now emit warning `ASPDEPR007`.\n\n## Version\n\n.NET 10 Preview 7\n\n## Previous behavior\n\nPreviously, developers could set `<IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers>` in their Web SDK projects to enable MVC API analyzers without any warnings or deprecation notices.\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers>\n  </PropertyGroup>\n</Project>\n```\n\nThe project would build successfully without any deprecation warnings.\n\n## New behavior\n\nStarting in .NET 10 Preview 7, when `IncludeOpenAPIAnalyzers` is set to `true`, the build will emit warning `ASPDEPR007`:\n\n```\nwarning ASPDEPR007: The IncludeOpenAPIAnalyzers property and its associated MVC API analyzers are deprecated and will be removed in a future release.\n```\n\nThe analyzers will continue to function, but developers will receive this deprecation warning during compilation.\n\n## Type of breaking change\n\n- [x] **Behavioral change**: Existing binaries may behave differently at run time.\n\n## Reason for change\n\n## Reason for change\n\nThe MVC API analyzers were originally introduced to help keep return types and attributes in sync for API controllers, ensuring consistency between method signatures and their corresponding OpenAPI documentation. These analyzers provided compile-time validation to catch mismatches between declared return types and the actual types returned by controller actions.\n\nHowever, with the introduction of Minimal APIs and the `TypedResults` pattern, the .NET ecosystem has evolved toward a more type-safe approach for API development. `TypedResults` provides compile-time guarantees about response types without requiring additional analyzers, making the MVC API analyzers redundant for modern .NET applications. In .NET 10, `TypedResults` are supported in controller-based APIs.\n\n**Previous approach with MVC API analyzers:**\n```csharp\n[HttpGet]\n[ProducesResponseType<Product>(200)]\n[ProducesResponseType(404)]\npublic async Task<ActionResult> GetProduct(int id)\n{\n    var product = await _productService.GetByIdAsync(id);\n    if (product == null)\n        return NotFound(); // Analyzer ensures this matches ProducesResponseType(404)\n    \n    return Ok(product); // Analyzer ensures this matches ProducesResponseType<Product>(200)\n}\n```\n\n**Or with controller actions using TypedResults:**\n```csharp\n[HttpGet(\"{id}\")]\npublic async Task<Results<Ok<Product>, NotFound>> GetProduct(int id)\n{\n    var product = await _productService.GetByIdAsync(id);\n    return product == null \n        ? TypedResults.NotFound() \n        : TypedResults.Ok(product);\n}\n```\n\nThe `TypedResults` pattern eliminates the need for separate analyzers because the return type itself (`Results<Ok<Product>, NotFound>`) explicitly declares all possible response types at compile time. This approach is more maintainable, provides better IntelliSense support, and automatically generates accurate OpenAPI documentation without additional tooling.\n\nAs the .NET ecosystem continues to embrace `TypedResults` as the recommended pattern for API development, the MVC API analyzers have become obsolete and are being deprecated to streamline the development experience.\n\n## Recommended action\n\nDevelopers should:\n\n1. **Remove the deprecated property**: Remove `<IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers>` from your project files to eliminate the warning.\n\n2. **Suppress the warning temporarily**: If you need to continue using the deprecated analyzers temporarily, you can suppress the warning:\n\n```xml\n<PropertyGroup>\n  <NoWarn>$(NoWarn);ASPDEPR007</NoWarn>\n</PropertyGroup>\n```\n\n3. **Migrate to TypedResults**: Migrate to the `TypedResults` pattern documented above to ensure better consistency between application behavior and OpenAPI documentation.\n\n## Affected APIs\n\n- MSBuild property: `IncludeOpenAPIAnalyzers`\n- Associated MVC API analyzers included when `IncludeOpenAPIAnalyzers` is `true`","Url":"https://github.com/aspnet/Announcements/issues/521","RelatedDescription":"Open issue \"[Breaking change]: IncludeOpenAPIAnalyzers property and MVC API analyzers are deprecated\" (#521)"},{"Id":"3244334287","IsPullRequest":false,"CreatedAt":"2025-07-18T20:43:18","Actor":"captainsafia","Number":"520","RawContent":null,"Title":"[Breaking change]: Deprecation of IActionContextAccessor","State":"open","Body":"# Description\n\n`IActionContextAccessor` and `ActionContextAccessor` have been marked as obsolete in ASP.NET Core with diagnostic ID `ASPDEPR006`. With the introduction of endpoint routing, `IActionContextAccessor` is no longer necessary as developers can access action descriptor and metadata information directly through `HttpContext.GetEndpoint()`.\n\n# Version\n\n.NET 10 Preview 7\n\n# Previous behavior\n\nDevelopers could use `IActionContextAccessor` to access the current `ActionContext`:\n\n```csharp\npublic class MyService\n{\n   private readonly IActionContextAccessor _actionContextAccessor;\n   \n   public MyService(IActionContextAccessor actionContextAccessor)\n   {\n       _actionContextAccessor = actionContextAccessor;\n   }\n   \n   public void DoSomething()\n   {\n       var actionContext = _actionContextAccessor.ActionContext;\n       var actionDescriptor = actionContext?.ActionDescriptor;\n       // Use action descriptor metadata\n   }\n}\n```\n\n# New behavior\n\nUsing `IActionContextAccessor` and `ActionContextAccessor` will produce a compiler warning with diagnostic ID `ASPDEPR006`:\n\n```\nwarning ASPDEPR006: ActionContextAccessor is obsolete and will be removed in a future version. For more information, visit https://aka.ms/aspnet/deprecate/006.\n```\n\n# Type of breaking change\n\n- **Source incompatible**: When recompiled using the new SDK, existing source code will receive obsolete warnings and may require source changes for future compatibility.\n- **Behavioral change**: The functionality still works but is marked for future removal.\n\n# Reason for change\n\nWith the introduction of endpoint routing in ASP.NET Core, `IActionContextAccessor` is no longer necessary. The endpoint routing infrastructure provides a cleaner, more direct way to access endpoint metadata through `HttpContext.GetEndpoint()`, aligning with ASP.NET Core's architectural evolution toward endpoint routing.\n\n# Recommended action\n\nMigrate from `IActionContextAccessor` to `IHttpContextAccessor` and use `HttpContext.GetEndpoint()`:\n\n**Before:**\n```csharp\npublic class MyService\n{\n   private readonly IActionContextAccessor _actionContextAccessor;\n   \n   public MyService(IActionContextAccessor actionContextAccessor)\n   {\n       _actionContextAccessor = actionContextAccessor;\n   }\n   \n   public void DoSomething()\n   {\n       var actionContext = _actionContextAccessor.ActionContext;\n       var actionDescriptor = actionContext?.ActionDescriptor;\n       // Use action descriptor metadata\n   }\n}\n```\n\n**After:**\n```csharp\npublic class MyService\n{\n   private readonly IHttpContextAccessor _httpContextAccessor;\n   \n   public MyService(IHttpContextAccessor httpContextAccessor)\n   {\n       _httpContextAccessor = httpContextAccessor;\n   }\n   \n   public void DoSomething()\n   {\n       var httpContext = _httpContextAccessor.HttpContext;\n       var endpoint = httpContext?.GetEndpoint();\n       var actionDescriptor = endpoint?.Metadata.GetMetadata<ActionDescriptor>();\n       // Use action descriptor metadata\n   }\n}\n```\n\n# Affected APIs\n\n- `Microsoft.AspNetCore.Mvc.Infrastructure.IActionContextAccessor`\n- `Microsoft.AspNetCore.Mvc.Infrastructure.ActionContextAccessor`","Url":"https://github.com/aspnet/Announcements/issues/520","RelatedDescription":"Open issue \"[Breaking change]: Deprecation of IActionContextAccessor\" (#520)"},{"Id":"3240228074","IsPullRequest":false,"CreatedAt":"2025-07-17T16:43:05","Actor":"captainsafia","Number":"519","RawContent":null,"Title":"[Breaking change]: Deprecation of `WithOpenApi` extension method","State":"open","Body":"### Description\n\nThe `WithOpenApi` extension methods in **`Microsoft.AspNetCore.OpenApi.OpenApiEndpointConventionBuilderExtensions`** have been **deprecated**. Invoking these methods now produces the compile-time diagnostic **ASPDEPR002** and a standard `[Obsolete]` warning stating that *“WithOpenApi is deprecated and will be removed in a future release. For more information, visit https://aka.ms/aspnet/deprecate/002.”*\n\n### Version  \n.NET 10 Preview 7\n\n### Previous behavior\n\n```csharp\napp.MapGet(\"/weather\", () => ...)\n   .WithOpenApi();   // no warnings\n```\n\n### New behavior\n\n```csharp\napp.MapGet(\"/weather\", () => ..)\n   .WithOpenApi();   // warning ASPDEPR002: WithOpenApi is deprecated …\n```\n\nThe call still compiles and executes, but the build now emits the new deprecation warning.\n\n### Type of breaking change\n\n- [ ] Binary incompatible  \n- [ ] Source incompatible  \n- [x] Behavioral change (new compiler warning)\n\n### Reason for change\n\n`WithOpenApi` duplicated functionality now provided by the built-in OpenAPI document generation pipeline. Deprecating it simplifies the API surface and prepares for its eventual removal.\n\n### Recommended action\n\nRemove `.WithOpenApi()` calls in the code.\n\n- If using `Microsoft.AspNetCore.OpenApi` for document generation, use with `AddOpenApiOperationTransformer` extension method.\n\n**Before**\n\n```csharp\nusing Microsoft.AspNetCore.OpenApi;\n\nvar builder = WebApplication.CreateBuilder();\nvar app = builder.Build();\n\napp.MapGet(\"/weather\", () => ..)\n   .WithOpenApi(operation =>\n   {\n       // Per-endpoint tweaks\n       operation.Summary     = \"Gets the current weather report.\";\n       operation.Description = \"Returns a short description and emoji.\";\n       return operation;\n   });\n\napp.Run();\n```\n\n**After**\n\n```csharp\nusing Microsoft.AspNetCore.OpenApi;\n\nvar builder = WebApplication.CreateBuilder();\nvar app = builder.Build();\n\napp.MapGet(\"/weather\", () => ..)\n   .AddOpenApiOperationTransformer((opperation, context, ct) =>\n   {\n       // Per-endpoint tweaks\n       operation.Summary     = \"Gets the current weather report.\";\n       operation.Description = \"Returns a short description and emoji.\";\n       return Task.CompleteTask;\n   });\n\napp.Run();\n```\n\n- If using `Swashbuckle` for document generation, use the `IOperationFilter` API.\n- If using `NSwag` for document generation, use the `IOperationProcessor` API.\n\n### Affected APIs\n\n- `TBuilder OpenApiEndpointConventionBuilderExtensions.WithOpenApi<TBuilder>(this TBuilder builder)`  \n- `TBuilder OpenApiEndpointConventionBuilderExtensions.WithOpenApi<TBuilder>(this TBuilder builder, Func<OpenApiOperation, OpenApiOperation> configureOperation)`  \n  (all overloads)","Url":"https://github.com/aspnet/Announcements/issues/519","RelatedDescription":"Open issue \"[Breaking change]: Deprecation of `WithOpenApi` extension method\" (#519)"},{"Id":"3217437297","IsPullRequest":false,"CreatedAt":"2025-07-09T23:46:12","Actor":"captainsafia","Number":"518","RawContent":null,"Title":"[Breaking change]: Deprecation of Microsoft.Extensions.ApiDescription.Client package","State":"open","Body":"### Description\n\nThe **Microsoft.Extensions.ApiDescription.Client** NuGet package has been **deprecated** starting in **.NET 10 Preview 7**.  The package supplied MSBuild targets and CLI support (e.g., `dotnet openapi`, the `OpenApiReference` item group, and `OpenApiProjectReference` property) that generated OpenAPI-based client code during the build. Projects that reference the package will now receive a warning during build.\n\n### Version\n\n.NET 10 Preview 7\n\n### Previous behavior\n\nProjects could add `<PackageReference Include=\"Microsoft.Extensions.ApiDescription.Client\" … />` and  `<OpenApiReference>` (or run `dotnet openapi`) to generate strongly-typed clients at build time.\n\n### New behavior\n\n 1. **Remove** any `<PackageReference Include=\"Microsoft.Extensions.ApiDescription.Client\" … />` from your project.  \n        2. Replace `<OpenApiReference>` items or `dotnet openapi` commands with generator-specific tooling:  \n           * **NSwag** – use `npx nswag` or `dotnet tool run nswag` with an `.nswag` config file.  \n           * **Kiota** – install with `dotnet tool install -g Microsoft.OpenApi.Kiota` and run `kiota generate`.  \n           * **OpenAPI Generator** – invoke `openapi-generator-cli` via JAR or Docker.  \n        3. Commit the generated client code or run generation in a custom pre-build step that does not rely on the removed package.\n    validations:\n      required: true\n\n  - type: textarea\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [x] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\n * The package has seen minimal updates and maintenance since its introduction.  \n* Its abstractions were tightly coupled to certain generators and did not scale well to others.\n* Each generator now ships its own CLI/configuration experience, making the MSBuild middle-layer redundant.  \n* Removing the package reduces maintenance burden and clarifies the recommended workflow for client generation.\n\n### Recommended action\n\n 1. **Remove** any `<PackageReference Include=\"Microsoft.Extensions.ApiDescription.Client\" … />` from your project.  \n2. Replace `<OpenApiReference>` items or `dotnet openapi` commands with generator-specific tooling:  \n * **NSwag** – use `npx nswag` or `dotnet tool run nswag` with an `.nswag` config file.  \n * **Kiota** – install with `dotnet tool install -g Microsoft.OpenApi.Kiota` and run `kiota generate`.  \n  * **OpenAPI Generator** – invoke `openapi-generator-cli` via JAR or Docker. \n\n### Affected APIs\n\n* NuGet package **Microsoft.Extensions.ApiDescription.Client**  \n* MSBuild item **`OpenApiReference`** (all instances)  \n* MSBuild property **`OpenApiProjectReference`**  \n* CLI command **`dotnet openapi`**","Url":"https://github.com/aspnet/Announcements/issues/518","RelatedDescription":"Open issue \"[Breaking change]: Deprecation of Microsoft.Extensions.ApiDescription.Client package\" (#518)"},{"Id":"3196976210","IsPullRequest":false,"CreatedAt":"2025-07-02T19:32:34","Actor":"BrennanConroy","Number":"517","RawContent":null,"Title":"[Breaking change]: Forwarded Headers Middleware Now Ignores X-Forwarded-* Headers from Unknown Proxies","State":"open","Body":"### Description\n\nStarting in ASP.NET Core 8.0.17 and 9.0.6, the Forwarded Headers Middleware will ignore all `X-Forwarded-*` headers from proxies that are not explicitly configured as trusted.\n\n### Version\n\n.NET 8\n\n### Previous behavior\n\nPreviously, the middleware, when not configured to use `X-Forwarded-For`, would process `X-Forwarded-Prefix`, `X-Forwarded-Proto`, and `X-Forwarded-Host` headers from any source, potentially allowing malicious or misconfigured proxies/clients to spoof these headers and affect your application's understanding of client information.\n\n### New behavior\n\nWith this change, only headers sent by known, trusted proxies (as configured via `ForwardedHeadersOptions.KnownProxies` and `ForwardedHeadersOptions.KnownNetworks`) will be processed. Headers from unknown sources will be ignored.\n\n**This is a breaking change**: If your deployment relied on forwarded headers from proxies not configured in your application's trusted proxy list, those headers will no longer be honored.\n\nThis can cause behavior like infinite redirects if you're using the Https redirection middleware and using TLS termination in your proxy. Or authentication to fail if using TLS termination and expecting an https request.\n\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [x] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThe change was made for security hardening, as the proxy and IP lists weren't being applied in all cases.\n\n### Recommended action\n\n- **Review your deployment topology:**  \n  Ensure that all legitimate proxy servers in front of your app are properly added to `KnownProxies` or `KnownNetworks` in your `ForwardedHeadersOptions` configuration.\n  ```csharp\n  app.UseForwardedHeaders(new ForwardedHeadersOptions\n  {\n      KnownProxies = { IPAddress.Parse(\"YOUR_PROXY_IP\") }\n  });\n  ```\n  Or, for a network:\n  ```csharp\n  app.UseForwardedHeaders(new ForwardedHeadersOptions\n  {\n      KnownNetworks = { new IPNetwork(IPAddress.Parse(\"YOUR_NETWORK_IP\"), PREFIX_LENGTH) }\n  });\n  ```\n\n- **If you wish to enable previous behavior:**  \n  You may need to relax your configuration, but this is **not recommended** due to security risks. You can do this by clearing the `KnownNetworks` and `KnownProxies` lists in `ForwardedHeadersOptions` to allow any proxy or network to forward these headers.\n\nYou can also set the `ASPNETCORE_FORWARDEDHEADERS_ENABLED` environment variable to true, which clears the lists and enables `ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto`.\n\nFor applications targeting .NET 9.0 or less, you can set the `Microsoft.AspNetCore.HttpOverrides.IgnoreUnknownProxiesWithoutFor` [AppContext](https://learn.microsoft.com/dotnet/fundamentals/runtime-libraries/system-appcontext) switch to `\"true\"` or `1` to get back to the previous behavior. Alternatively, set the `MICROSOFT_ASPNETCORE_HTTPOVERRIDES_IGNORE_UNKNOWN_PROXIES_WITHOUT_FOR` environment variable.\n\n> [!Note]\n> In cloud environments, the proxy IP(s) can change over the lifetime of the app and `ASPNETCORE_FORWARDEDHEADERS_ENABLED` is sometimes used to make forwarded headers work.\n\n### References\n\n- [Forwarded Headers Middleware documentation](https://learn.microsoft.com/aspnet/core/host-and-deploy/proxy-load-balancer)\n\n### Affected APIs\n\n`UseForwardedHeaders();`","Url":"https://github.com/aspnet/Announcements/issues/517","RelatedDescription":"Open issue \"[Breaking change]: Forwarded Headers Middleware Now Ignores X-Forwarded-* Headers from Unknown Proxies\" (#517)"},{"Id":"2662868601","IsPullRequest":false,"CreatedAt":"2024-11-15T18:59:39","Actor":"maraf","Number":"516","RawContent":null,"Title":"[Breaking change]: Legacy Mono and Emscripten JavaScript APIs are not exported to global namespace in Blazor WebAssembly applications","State":"open","Body":"### Description\n\nIn previous versions of Blazor WebAssembly, legacy Mono and Emscripten APIs were exported to global namespace. \r\nFrom 9.0 those APIs are accessible throught Blazor.runtime object.\n\n### Version\n\n.NET 9 GA\n\n### Previous behavior\n\nLegacy Mono (MONO, BINDING) and Emscripten Module object was exported to global window object.\r\nFor example `window.Module.FS` returned emscripten virtual filesystem.\n\n### New behavior\n\nEmscripten Module object is now exported to `Blazor.runtime` object.\r\nFor example `Blazor.runtime.Module.FS` returns emscripten virtual filesystem.\r\nLegacy Mono API for interop was removed completely (MONO and BINDING) and replaced with JSImport/JSExport.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThe general goal is not to polute global namespace and keep all the APIs accessible from single Blazor object.\n\n### Recommended action\n\nReplace accessing Emscripten APIs from window object to Blazor.runtime object.\n\n### Affected APIs\n\nwindow.MONO.*\r\nwindow.BINDING.*\r\nwindow.Module.*","Url":"https://github.com/aspnet/Announcements/issues/516","RelatedDescription":"Open issue \"[Breaking change]: Legacy Mono and Emscripten JavaScript APIs are not exported to global namespace in Blazor WebAssembly applications\" (#516)"},{"Id":"2606573022","IsPullRequest":false,"CreatedAt":"2024-10-22T21:39:01","Actor":"amcasey","Number":"515","RawContent":null,"Title":"[Breaking change]: dev cert export no longer creates folder","State":"open","Body":"### Description\n\nWhen you export the ASP.NET Core development certificate (used to enable https in local development), it will no longer create the directory into which the certificate is being exported, if that directory doesn’t already exist.\r\n\r\nThis change first appears in 8.0.10 and 9.0 RC1.\n\n### Version\n\n.NET 8 GA\n\n### Previous behavior\n\n```\r\ndotnet dev-certs https -ep C:\\NonExistent\\cert.pfx\r\n```\r\n\r\nIf `C:\\NonExistent\\` did not exist when the command was run, it would be created (with permissions inherited from the containing directory).\n\n### New behavior\n\nThe target directory must exist or the export will fail with a message like `There was an error exporting the HTTPS developer certificate to a file.`\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThe development certificate is exported with its private key, so unauthorized access can be very problematic.  It may, nevertheless, be necessary to make it readable to multiple accounts - e.g. if the consuming process will not be run as the current user.  Rather than attempting to determine (and securely establish) permissions for the target directory, `dotnet dev-certs` require that it already exist.\n\n### Recommended action\n\nCreate the target directory (with appropriate permissions) before invoking `dotnet dev-certs`.\n\n### Affected APIs\n\nThis functionality is not presently exposed via an API - it is invoked from the command line.","Url":"https://github.com/aspnet/Announcements/issues/515","RelatedDescription":"Open issue \"[Breaking change]: dev cert export no longer creates folder\" (#515)"},{"Id":"2603358974","IsPullRequest":false,"CreatedAt":"2024-10-21T18:34:48","Actor":"amcasey","Number":"514","RawContent":null,"Title":"[Breaking change]: Handling of middleware types with multiple constructors","State":"open","Body":"### Description\n\nFormerly, when a middleware type with multiple satisfiable constructors was instantiated from the dependency injection container, the one with the most parameters would be used.  Now that only happens if the dependency injection container implements [`IServiceProviderIsService`](https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.iserviceproviderisservice).\n\n### Version\n\n.NET 9 RC 1\n\n### Previous behavior\n\nFormerly, the first constructor was preferred (when both were satisfied) because it has more parameters.\r\n\r\n```csharp\r\npublic class CookiePolicyMiddleware\r\n{\r\n    public CookiePolicyMiddleware(RequestDelegate next, IOptions<CookiePolicyOptions> options, ILoggerFactory factory)\r\n    {\r\n        // Omitted for brevity\r\n    }\r\n\r\n    public CookiePolicyMiddleware(RequestDelegate next, IOptions<CookiePolicyOptions> options)\r\n    {\r\n        // Omitted for brevity\r\n    }\r\n}\r\n```\n\n### New behavior\n\nNow, neither constructor is preferred and construction fails with an error like \r\n```\r\nSystem.InvalidOperationException: 'Multiple constructors accepting all given argument types have been found in type 'Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware'. There should only be one applicable constructor.'\r\n```\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThe activation mechanism was [changed](https://github.com/dotnet/aspnetcore/pull/55722) to help support keyed dependency injection.\n\n### Recommended action\n\nIf this happens and you can't upgrade to a dependency injection container that implements `IServiceProviderIsService`, you can add `ActivatorUtilitiesConstructorAttribute` to the preferred constructor of the affected middleware type.\n\n### Affected APIs\n\nThis is [known](https://github.com/dotnet/aspnetcore/issues/57231) to cause errors when instantiating `Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware` with [Autofac.Extensions.DependencyInjection](https://www.nuget.org/packages/Autofac.Extensions.DependencyInjection) 7.x.","Url":"https://github.com/aspnet/Announcements/issues/514","RelatedDescription":"Open issue \"[Breaking change]: Handling of middleware types with multiple constructors\" (#514)"},{"Id":"2518176374","IsPullRequest":true,"CreatedAt":"2024-09-12T23:00:13","Actor":"terrajobst","Number":"513","RawContent":null,"Title":"Add SECURITY.md","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/513","RelatedDescription":"Closed or merged PR \"Add SECURITY.md\" (#513)"},{"Id":"2180295666","IsPullRequest":false,"CreatedAt":"2024-03-11T21:34:47","Actor":"amcasey","Number":"512","RawContent":null,"Title":"[Breaking change]: DefaultKeyResolution.ShouldGenerateNewKey has a slightly altered meaning","State":"open","Body":"### Description\r\n\r\n`DefaultKeyResolution.ShouldGenerateNewKey` no longer reflects whether the default key is close to its expiration time.\r\n\r\n### Version\r\n\r\n.NET 9 Preview 3\r\n\r\n### Previous behavior\r\n\r\nIt was an undocumented, but consistent, feature of the API that `ShouldGenerateNewKey` would be true if the default key was within two days (an over-simplification) of its expiration time.  The amount of lead time was based on the polling interval of `ICacheableKeyRingProvider`, which was not something `IDefaultKeyResolver.ResolveDefaultKeyPolicy` should have depended upon (since, for example, alternative implementations would probably not be aware of these details).\r\n\r\n### New behavior\r\n\r\nIf `ShouldGenerateNewKey` is true, it now indicates that either there is no default key or that for some other policy reason (i.e. in a specialized implementation of `IDefaultKeyResolver`, a new key should be generated.  The `ICacheableKeyRingProvider` will make its own decision about whether the expiration time is close enough to warrant generating a new key.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nFirst, we wanted to change the logic around key generation near expiration time and, second, this makes it more straightforward to implement a custom `IDefaultKeyResolver`.\r\n\r\nNote that the documentation for this type already states that \"This API supports infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases.\"\r\n\r\n### Recommended action\r\n\r\nIf you have an `IDefaultKeyResolver` implementation that tries to replicate the expiry logic, that logic can be removed (however, leaving it is fine as well).\r\n\r\nIf you were consuming `IDefaultKeyResolver` directly, for the express purpose of determining whether expiration was pending and that continues to be important, you can the default key's `ExpirationDate` property directly.\r\n\r\n### Affected APIs\r\n\r\nMicrosoft.AspNetCore.DataProtection.KeyManagement.Internal.DefaultKeyResolution.ShouldGenerateNewKey","Url":"https://github.com/aspnet/Announcements/issues/512","RelatedDescription":"Open issue \"[Breaking change]: DefaultKeyResolution.ShouldGenerateNewKey has a slightly altered meaning\" (#512)"},{"Id":"2162366750","IsPullRequest":true,"CreatedAt":"2024-03-01T17:37:10","Actor":"amcasey","Number":"511","RawContent":null,"Title":"Update repo URL","State":"closed","Body":"We have appropriate redirects, but it seems preferable to have current URLs in the guidance.","Url":"https://github.com/aspnet/Announcements/pull/511","RelatedDescription":"Closed or merged PR \"Update repo URL\" (#511)"},{"Id":"2115619834","IsPullRequest":true,"CreatedAt":"2024-02-06T22:14:36","Actor":"dotnet-policy-service[bot]","Number":"510","RawContent":null,"Title":"FabricBot: Onboarding to GitOps.ResourceManagement because of FabricBot decommissioning","State":"closed","Body":"Add prIssueManagement.yml to onboard repo to GitOps.ResourceManagement as FabricBot replacement\n\n Details on the replacement service and the syntax of the new yaml configuration file is available publicly at: https://microsoft.github.io/GitOps/policies/resource-management.html\n\nPlease review and merge this PR to complete the process of onboarding to the new service.","Url":"https://github.com/aspnet/Announcements/pull/510","RelatedDescription":"Closed or merged PR \"FabricBot: Onboarding to GitOps.ResourceManagement because of FabricBot decommissioning\" (#510)"},{"Id":"2013176077","IsPullRequest":false,"CreatedAt":"2023-11-27T21:55:39","Actor":"captainsafia","Number":"509","RawContent":null,"Title":"[Breaking change]: Minimal APIs consuming IFormFile or IFormFileCollection parameters require anti-forgery checks","State":"open","Body":"### Description\n\nMinimal API endpoints that consume an `IFormFile` or `IFormFileCollection` will now be opted-in to requiring anti-forgery token validation using the new anti-forgery middleware.\n\n### Version\n\n.NET 8 RC 1\n\n### Previous behavior\n\nMinimal API endpoints that bound a parameter from the form via `IFormFile` or `IFormFileCollection` did not require anti-forgery validation.\n\n### New behavior\n\nMinimal API endpoints that bound a parameter from the form via `IFormFile` or `IFormFileCollection` did require anti-forgery validation. An exception will be thrown at startup if the anti-forgery middleware is not registered for an API that defines these input types.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nAnti-forgery token validation is a recommended security precaution for APIs that consume data from a form.\n\n### Recommended action\n\nUsers can opt out of anti-forgery validation for specific endpoints by using the `DisableAntiforgery` method like so:\r\n\r\n```csharp\r\nvar app = WebApplication.Create();\r\n\r\napp.MapPost(\"/\", (IFormFile formFile) => ...)\r\n  .DisableAntiforgery();\r\n\r\napp.Run();\r\n```\n\n### Affected APIs\n\nNone.","Url":"https://github.com/aspnet/Announcements/issues/509","RelatedDescription":"Open issue \"[Breaking change]: Minimal APIs consuming IFormFile or IFormFileCollection parameters require anti-forgery checks\" (#509)"},{"Id":"1811082947","IsPullRequest":false,"CreatedAt":"2023-07-19T03:36:42","Actor":"jmprieur","Number":"508","RawContent":null,"Title":"[Breaking change]: JwtBearer, WsFederation, and OpenIdConnect events context properties of type SecurityToken now return a JSonWebToken by default","State":"open","Body":"## Description\r\nThe `JwtBearerEvents`, `WsFederationEvents` and `OpenIdConnectEvents` are authentication events fired respectively by the `JwtBearer`, `WsFederation` and `OpenIdConnect` authentication handlers. For example the [OnTokenValidated](https://github.com/dotnet/aspnetcore/blob/bf303a1092f83d789031fdafac60f3fc454cfc49/src/Security/Authentication/JwtBearer/src/JwtBearerEvents.cs#L29) event is fired when a security token is validated. These events are fired with a context (for instance [TokenValidatedContext](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.jwtbearer.tokenvalidatedcontext?view=aspnetcore-7.0)) that exposes a `SecurityToken` property of abstract type [SecurityToken](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.securitytoken?view=msal-web-dotnet-latest). The default real implementation of SecurityToken changed from [JwtSecurityToken](https://learn.microsoft.com/dotnet/api/system.identitymodel.tokens.jwt.jwtsecuritytoken?view=msal-web-dotnet-latest) to [JsonWebToken](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.jsonwebtokens.jsonwebtoken?view=msal-web-dotnet-latest).\r\nIf you really need to keep using `JwtSecurityToken`, you can re-enable it by setting `UseSecurityTokenValidators` on the `JwtBearerOptions`, `WsFederationOptions`, `OpenIdConnectOptions`.\r\n\r\nFor details [#aspnetcore/49469](https://github.com/dotnet/aspnetcore/issues/49469#issue) API Review.\r\n\r\n### Version\r\n.NET 8 Preview 7\r\n\r\n### Previous behavior\r\nUntil ASP.NET Core 8-preview 7, these SecurityToken properties were implemented by a sub-class of SecurityToken named JwtSecurityToken, which is the previous generation of implementation of JWT. These JwtSecurityToken were produced by [SecurityTokenValidators](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.isecuritytokenvalidator?view=msal-web-dotnet-latest).\r\n\r\n### New behavior\r\nFrom ASP.NET Core 8-preview 7, by default the class derived from SecurityToken implenting these properties is JSonWebToken which are produced by more optimized [TokenHandlers](https://learn.microsoft.com/dotnet/api/microsoft.identitymodel.tokens.tokenhandler?view=msal-web-dotnet-latest).\r\n\r\n## Type of breaking change\r\n- [ ] Binary incompatible: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] Source incompatible: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [x] Behavioral change: Existing binaries may behave differently at run time.\r\n\r\n## Reason for change\r\nThis change was made because JSonWebToken (and its associated JSonWebTokenHandler) are bringing:\r\n- 30% performance improvement.\r\n- Improved reliability by the usage of a Last Known Good metadata (such as the OpenIdConnectMetadata)\r\n- async processing\r\n\r\n### Recommended action\r\nFor most of you, this shouldn't be a problem as the type of the properties (SecurityToken) has not changed, and you were not supposed to look at the real type.\r\n\r\nHowever, if you were downcasting one of these SecurityToken properties to JwtSecurityToken (for example to get the claims), you will now need to:\r\n- either down-cast them to JSonWebToken\r\n\r\n  ```CSharp\r\n  service.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme,  options => {\r\n      options.Events.TokenValidated = (context) => {\r\n          // Replace your cast to JwtSecurityToken.\r\n          JSonWebToken token = context.SecurityToken as JSonWebToken;\r\n          // Do something ...\r\n      };\r\n  });\r\n  ```\r\n\r\n- or set one of the UseSecurityTokenValidators boolean properties on the corresponding options (JtwBearerOptions, WsFederationOptions, OpenIdConnectOptions) to true, in which case the authentication handlers will keep using the JwtTokenValidators and will keep producing JwtSecurityTokens.\r\n\r\n  ```CSharp\r\n  service.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme,  options => {\r\n      options.UseSecurityTokenValidators = true;\r\n      options.Events.TokenValidated = (context) => {\r\n          // As you were doing before\r\n          JwtSecurityToken token = context.SecurityToken as JwtSecurityToken;\r\n          // Do something ...\r\n      };\r\n  });\r\n  ```\r\n\r\n\r\n\r\n## Affected APIs\r\nThe properties that are concerned are the following:\r\n\r\n### In WsFederationEvents\r\n\r\n- [SecurityTokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/WsFederation/src/SecurityTokenValidatedContext.cs#L31)\r\n\r\n### In JwtBearerEvents\r\n\r\n- [TokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/JwtBearer/src/TokenValidatedContext.cs#L27)\r\n\r\n### In OpenIdConnectEvents\r\n\r\n- [TokenValidatedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/OpenIdConnect/src/Events/TokenValidatedContext.cs#L32)\r\n- [AuthorizationCodeReceivedContext.SecurityToken](https://github.com/dotnet/aspnetcore/blob/ef07bcb02ae3d7218dbd3dd0358974b2b7e9ddd2/src/Security/Authentication/OpenIdConnect/src/Events/AuthorizationCodeReceivedContext.cs#L34)","Url":"https://github.com/aspnet/Announcements/issues/508","RelatedDescription":"Open issue \"[Breaking change]: JwtBearer, WsFederation, and OpenIdConnect events context properties of type SecurityToken now return a JSonWebToken by default\" (#508)"},{"Id":"1805550224","IsPullRequest":false,"CreatedAt":"2023-07-14T20:44:25","Actor":"captainsafia","Number":"507","RawContent":null,"Title":"[Breaking change]: TrimMode defaults to `full` for WebSDK projects","State":"open","Body":"### Description\n\nTrimming now trims all assemblies in applications targeting the Web SDK, by default. This change only affects apps that are published with PublishTrimmed=true, and it only breaks apps that had existing trim warnings. \n\n### Version\n\n.NET 8 Preview 7\n\n### Previous behavior\n\nPreviously, `TrimMode=partial` was set by default for all projects that targeted the WebSDK. \n\n### New behavior\n\nStarting in .NET 8 Preview 7, trimming trims all the assemblies in the app by default. Apps that may have previously worked with `PublishTrimmed=true` and `TrimMode=partial` may not work in .NET 8 Preview 7. However, only apps with trim warnings will be affected. If your app has no trim warnings, the change in behavior should not cause any adverse effect.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nThis change helps to decrease app size without users having to explicitly opt in and aligns with user expectations that the entire app is trimmed unless noted otherwise.\n\n### Recommended action\n\nThe best resolution is to resolve all the trim warnings in your application. For information about resolving the warnings in your own libraries, see [Introduction to trim warnings](https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/fixing-warnings).\r\n\r\nTo revert to the previous behavior, set the TrimMode property to partial.\r\n\r\n```xml\r\n<TrimMode>partial</TrimMode>\r\n```\n\n### Affected APIs\n\nNone.","Url":"https://github.com/aspnet/Announcements/issues/507","RelatedDescription":"Open issue \"[Breaking change]: TrimMode defaults to `full` for WebSDK projects\" (#507)"},{"Id":"1693295179","IsPullRequest":false,"CreatedAt":"2023-05-03T01:44:40","Actor":"JamesNK","Number":"506","RawContent":null,"Title":"[Breaking change]: ASP.NET Core rate limiting middleware now requires AddRateLimiter","State":"open","Body":"### Description\r\n\r\n[ASP.NET Core rate limiting middleware](https://learn.microsoft.com/aspnet/core/performance/rate-limit) is being updated in .NET 8 with extra functionality. The middleware now requires services registered with `AddRateLimiter`.\r\n\r\n### Version\r\n\r\n.NET 8 Preview 5\r\n\r\n### Previous behavior\r\n\r\nPreviously, rate limiting could be used without `AddRateLimiter`. For example, the middleware could be configured by calling `Configure<RateLimiterOptions>(o => { })`:\r\n\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.Configure<RateLimiterOptions>(o => o\r\n    .AddFixedWindowLimiter(policyName: \"fixed\", options =>\r\n    {\r\n        // configuration\r\n    }));\r\n\r\nvar app = builder.Build();\r\napp.UseRateLimiter();\r\napp.MapGet(\"/\", () => Results.Ok($\"Hello world\")).RequireRateLimiting(\"fixed\");\r\napp.Run();\r\n```\r\n\r\n### New behavior\r\n\r\nIf `AddRateLimiter` is not called on app startup, then ASP.NET Core will throw an informative error:\r\n\r\n> Unable to find the required services. Please add all the required services by calling 'IServiceCollection.AddRateLimiter' in the application startup code.\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nRate limiting middleware requires services that are only registered by calling `AddRateLimiter`.\r\n\r\n### Recommended action\r\n\r\nEnsure `AddRateLimiter()` is called at application startup.\r\n\r\nFor example, update `Configure<RateLimiterOptions>(o => { })` to use `AddRateLimiter()`:\r\n\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddRateLimiter(o => o\r\n    .AddFixedWindowLimiter(policyName: \"fixed\", options =>\r\n    {\r\n        // configuration\r\n    }));\r\n\r\nvar app = builder.Build();\r\napp.UseRateLimiter();\r\napp.MapGet(\"/\", () => Results.Ok($\"Hello world\")).RequireRateLimiting(\"fixed\");\r\napp.Run();\r\n```\r\n\r\n### Affected APIs\r\n\r\n[UseRateLimiter()](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.builder.ratelimiterapplicationbuilderextensions.useratelimiter)","Url":"https://github.com/aspnet/Announcements/issues/506","RelatedDescription":"Open issue \"[Breaking change]: ASP.NET Core rate limiting middleware now requires AddRateLimiter\" (#506)"},{"Id":"1685250868","IsPullRequest":false,"CreatedAt":"2023-04-26T15:26:43","Actor":"Tratcher","Number":"505","RawContent":null,"Title":"[Breaking change]: ISystemClock obsolete and replaced by TimeProvider","State":"open","Body":"### Description\n\n`Microsoft.AspNetCore.Authentication.ISystemClock` has been used by the authentication and identity components since AspNetCore 1.0 to enable unit testing of time related functionality like expiration checking. .NET 8 now includes a suitable abstraction `System.TimeProvider` that provides the same functionality and much more. We're taking this opportunity to obsolete `ISystemClock` and replace it with `TimeProvider` throughout AspNetCore.\r\n\r\nSee https://github.com/dotnet/aspnetcore/pull/47717 for additional details.\n\n### Version\n\n.NET 8 Preview 5\n\n### Previous behavior\n\nISystemClock was injected into the constructors by Dependency Injection and could be overridden for testing.\r\n\r\nNote the default `SystemClock` implementation would truncate to the nearest second for easier formatting. \n\n### New behavior\n\nISystemClock remains in the Dependency Injection container but is no longer used. It may be removed from the container in a future version.\r\n\r\nTimeProvider is now a settable property on the Options classes for these types. It can be set directly or by registering a provider in the Dependency Injection container.\r\n\r\n`TimeProvider` does not truncate to the nearest second, consumers are expected to correctly format the time as needed.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nUnifying the time abstraction across the stack for easier testing.\n\n### Recommended action\n\nComponents that derive from `Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>` or `Microsoft.AspNetCore.Identity.SecurityStampValidator<TUser>` should remove their `ISystemClock` constructor parameter and call the new base constructor accordingly. Similarly, derived implementations that reference the `Clock` property on these types should reference the new `TimeProvider` property instead. `TimeProvider` is now settable for testing on the options or via DI.\r\n\r\n```diff\r\n-    public BasicAuthenticationHandler(IOptionsMonitor<AuthenticationSchemeOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock)\r\n-        : base(options, logger, encoder, clock)\r\n+    public BasicAuthenticationHandler(IOptionsMonitor<AuthenticationSchemeOptions> options, ILoggerFactory logger, UrlEncoder encoder)\r\n+        : base(options, logger, encoder)\r\n```\r\n\r\n```diff\r\n-       var currentUtc = Clock.UtcNow;\r\n+       var currentUtc = TimeProvider.GetUtcNow();\r\n```\n\n### Affected APIs\n\n- [`ISystemClock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.isystemclock)\r\n- [`SystemClock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.systemclock)\r\n- [`AuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.authenticationhandler-1)\r\n- [`AuthenticationHandler<TOptions>.Clock`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.authenticationhandler-1.clock)\r\n- [`CookieAuthenticationHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.cookies.cookieauthenticationhandler)\r\n- [`FacebookHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.facebook.facebookhandler)\r\n- [`GoogleHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.google.googlehandler)\r\n- [`JwtBearerHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.jwtbearer.jwtbearerhandler)\r\n- [`MicrosoftAccountHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.microsoftaccount.microsoftaccounthandler)\r\n- [`NegotiateHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.negotiate.negotiatehandler)\r\n- [`OAuthHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.oauth.oauthhandler-1)\r\n- [`OpenIdConnectHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.openidconnect.openidconnecthandler)\r\n- [`PolicySchemeHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.policyschemehandler)\r\n- [`RemoteAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.remoteauthenticationhandler-1)\r\n- [`SignInAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.signinauthenticationhandler-1)\r\n- [`SignOutAuthenticationHandler<TOptions>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.signoutauthenticationhandler-1)\r\n- [`TwitterHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.twitter.twitterhandler)\r\n- [`WsFederationHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.wsfederation.wsfederationhandler)\r\n- [`SecurityStampValidator<TUser>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.identity.securitystampvalidator-1)\r\n- [`TwoFactorSecurityStampValidator<TUser>`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.identity.twofactorsecuritystampvalidator-1)","Url":"https://github.com/aspnet/Announcements/issues/505","RelatedDescription":"Open issue \"[Breaking change]: ISystemClock obsolete and replaced by TimeProvider\" (#505)"},{"Id":"1661290568","IsPullRequest":false,"CreatedAt":"2023-04-10T20:06:20","Actor":"captainsafia","Number":"504","RawContent":null,"Title":"[Breaking change]: `ValidationProblemDetails` and `ProblemDetails` no longer use custom converters","State":"open","Body":"### Description\n\nPrior to .NET 8 Preview 2, `ValidationProblemDetails` and `ProblemDetails` type used custom converters to support JSON serialization due to a lack of support for the `IgnoreNullValues` option. Now that this option is supported by the S.T.J APIs, we've removed the custom converters in the framework in favor of the serialization provided by the framework.\r\n\r\nAs a result of this, the properties in the `ValidationProblemDetails` and `ProblemDetails` types no longer indiscriminately assume lowercase type names. Developers must specific a `JsonNamingPolicy` to get the correct behavior.\n\n### Version\n\n.NET 8 Preview 2\n\n### Previous behavior\n\n```csharp\r\nstring content = \"{\\\"status\\\":400,\\\"detail\\\":\\\"HTTP egress is not enabled.\\\"}\";\r\nusing MemoryStream stream = new();\r\nusing StreamWriter writer = new(stream);\r\nwriter.Write(content);\r\nwriter.Flush();\r\nstream.Position = 0;\r\n\r\nJsonSerializerOptions options = new();\r\noptions.Converters.Add(new JsonStringEnumConverter());\r\n\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\nConsole.WriteLine(details.Status); // 400\r\n```\n\n### New behavior\n\n```csharp\r\nstring content = \"{\\\"status\\\":400,\\\"detail\\\":\\\"HTTP egress is not enabled.\\\"}\";\r\nusing MemoryStream stream = new();\r\nusing StreamWriter writer = new(stream);\r\nwriter.Write(content);\r\nwriter.Flush();\r\nstream.Position = 0;\r\n\r\nJsonSerializerOptions options = new();\r\noptions.Converters.Add(new JsonStringEnumConverter());\r\n\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\nConsole.WriteLine(details.Status); // null\r\n```\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\n- [ ] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\n- [X] **Behavioral change**: Existing binaries may behave differently at run time.\n\n### Reason for change\n\nNow that `IgnoreNullValues` is supported by the S.T.J APIs, we've removed the custom converters in the framework in favor of the serialization provided by the framework.\n\n### Recommended action\n\nProvide a JSON serializer options with the correct details.\r\n\r\n```csharp\r\nJsonSerializerOptions options = new()\r\n{\r\n   PropertyNameCaseInsensitive = true\r\n};\r\nValidationProblemDetails? details = await JsonSerializer.DeserializeAsync<ValidationProblemDetails>(stream, options);\r\n```\n\n### Affected APIs\n\n- [`ValidationProblemDetails`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.validationproblemdetails)\r\n- [`ProblemDetails`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.problemdetails)","Url":"https://github.com/aspnet/Announcements/issues/504","RelatedDescription":"Open issue \"[Breaking change]: `ValidationProblemDetails` and `ProblemDetails` no longer use custom converters\" (#504)"},{"Id":"1657753067","IsPullRequest":true,"CreatedAt":"2023-04-06T22:49:51","Actor":"gewarren","Number":"503","RawContent":null,"Title":"Add more version choices to BC template","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/503","RelatedDescription":"Closed or merged PR \"Add more version choices to BC template\" (#503)"},{"Id":"1656483670","IsPullRequest":false,"CreatedAt":"2023-04-06T00:15:27","Actor":"mitchdenny","Number":"502","RawContent":null,"Title":"[Breaking change]: Obsolete ConcurrencyLimiterMiddleware","State":"open","Body":"### Description\r\n\r\nIn .NET 8.0 the ASP.NET Core team is deprecating the ConcurrencyLimiterMiddleware and associated methods and types (e.g. UseConcurrencyLimiter(...)). This package will be removed in .NET 9.0.\r\n\r\nDevelopers requiring rate limiting capabilties should switch to the newer and more capable rate limiting middleware that was introduced in .NET 7.0 (e.g. UseRateLimiter(...)). The .NET 7.0 rate limiting API includes a concurrency limiter along with several other rate limiting algorithms that you can apply to your application.\r\n\r\nFor more information on rate limiting in ASP.NET Core see:\r\nhttps://learn.microsoft.com/aspnet/core/performance/rate-limit\r\n\r\n### Version\r\n\r\n.NET 8 Preview 4\r\n\r\n### Previous behavior\r\n\r\nDevelopers using the `ConcurrencyLimiterMiddleware` could control concurrency by adding a policy to DI and enabling the middleware:\r\n\r\n```csharp\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddStackPolicy<options => {\r\n    options.MaxConcurrentRequests = 2;\r\n    options.RequestQueueLimit = 25;\r\n    });\r\n\r\nvar app = builder.Build();\r\napp.UseConcurrencyLimiter();\r\n// Map endpoints.\r\napp.Run();\r\n```\r\n\r\n### New behavior\r\n\r\nHere is some example usage using the new API:\r\n\r\n```csharp\r\nusing Microsoft.AspNetCore.RateLimiting;\r\nusing System.Threading.RateLimiting;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\n\r\napp.UseRateLimiter(new RateLimiterOptions()\r\n    .AddConcurrencyLimiter(\"only-one-at-a-time-stacked\", (options) =>\r\n    {\r\n        options.PermitLimit = 2;\r\n        options.QueueLimit = 25;\r\n        options.QueueProcessingOrder = QueueProcessingOrder.NewestFirst;\r\n    }));\r\n\r\napp.MapGet(\"/\", async () =>\r\n{\r\n    await Task.Delay(10000);\r\n    return \"Hello World\";\r\n}).RequireRateLimiting(\"only-one-at-a-time-stacked\");\r\n\r\napp.Run();\r\n```\r\n\r\n### Type of breaking change\r\n\r\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load or execute, and if so, require recompilation.\r\n- [X] **Source incompatible**: When recompiled using the new SDK or component or to target the new runtime, existing source code may require source changes to compile successfully.\r\n- [ ] **Behavioral change**: Existing binaries may behave differently at run time.\r\n\r\n### Reason for change\r\n\r\nThe older `ConcurrencyLimiterMiddleware` is infrequently used and undocumented. The newer rate limiting API has more extensive functionality.\r\n\r\n### Recommended action\r\n\r\nIf you are using the older `ConcurrencyLimiterMiddleware` we recommend moving to the newer rate limiting middleware.\r\n\r\n### Affected APIs\r\n\r\nThe following APIs are impacted:\r\n\r\n* `ConcurrencyLimiterExtensions.UseConcurrencyLimiter(...)`\r\n* `ConcurrencyLimiterMiddleware`\r\n* `ConcurrencyLimiterOptions`","Url":"https://github.com/aspnet/Announcements/issues/502","RelatedDescription":"Open issue \"[Breaking change]: Obsolete ConcurrencyLimiterMiddleware\" (#502)"},{"Id":"1602073485","IsPullRequest":false,"CreatedAt":"2023-03-07T16:47:58","Actor":"dnfadmin","Number":"501","RawContent":null,"Title":"Moving to the new .NET Foundation CLA service","State":"closed","Body":"\r\nHello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team\r\n\r\n","Url":"https://github.com/aspnet/Announcements/issues/501","RelatedDescription":"Closed issue \"Moving to the new .NET Foundation CLA service\" (#501)"},{"Id":"1575203037","IsPullRequest":true,"CreatedAt":"2023-02-08T00:08:59","Actor":"brunolins16","Number":"500","RawContent":null,"Title":"Fixing announcement template","State":"closed","Body":"","Url":"https://github.com/aspnet/Announcements/pull/500","RelatedDescription":"Closed or merged PR \"Fixing announcement template\" (#500)"},{"Id":"1497212375","IsPullRequest":true,"CreatedAt":"2022-12-14T19:04:06","Actor":"gewarren","Number":"499","RawContent":null,"Title":"Update incompatibility types in BC template","State":"closed","Body":"I updated the breaking change template to match dotnet/docs. Feel free to close if you don't like these definitions, however.","Url":"https://github.com/aspnet/Announcements/pull/499","RelatedDescription":"Closed or merged PR \"Update incompatibility types in BC template\" (#499)"},{"Id":"1455922247","IsPullRequest":false,"CreatedAt":"2022-11-18T22:38:34","Actor":"halter73","Number":"498","RawContent":null,"Title":"[Breaking change]: `WebApplicationBuilder` gives `ASPNET_`-prefixed environment variables lower precedence","State":"open","Body":"### Description\n\nStarting in .NET 7 preview 3, when using `WebApplicationBuilder` but not any other host (e.g. `ConfigureWebHostDefaults` or `WebHost.CreateDefaultBuilder`), command-line arguments and `DOTNET_`-prefixed environment variables override `ASPNET_`-prefixed environment variables when reading from [default host configuration sources](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#default-host-configuration-sources) which are used to read [host variables](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#host-variables) like the content root path and environment name when the `WebApplicationBuilder` is constructed and serves as a base for [application configuration](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#application-configuration-providers).\r\n\r\n`ASPNET_`-prefixed environment variables now has the lowest precedence of all of `WebApplicationBuilder`'s [default host configuration sources](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#default-host-configuration-sources).\r\n\r\nSee https://github.com/dotnet/AspNetCore.Docs/issues/25626#issuecomment-1098616664 for more context.\n\n### Version\n\n.NET 7 Preview 3\n\n### Previous behavior\n\n`ASPNET_`-prefixed environment variables overrode command-line arguments and `DOTNET_`-prefixed environment variables.\n\n### New behavior\n\nCommand-line arguments and `DOTNET_`-prefixed environment variables override `ASPNET_`-prefixed environment variables\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nTo prevent environment variables from overriding explicit command-line arguments when reading host variables which is more consistent with application configuration which has always given command-line arguments the highest precedence.\n\n### Recommended action\n\nIf you were using `ASPNETCORE_`-prefixed environment variables to override command-line arguments or `DOTNET_-`prefixed environment variables, use something with a higher priority. This could mean using custom [WebApplicationOptions](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationoptions?view=aspnetcore-7.0) which overrides all default hosting configuration sources.\n\n### Affected APIs\n\n`Microsoft.AspNetCore.Builder.WebApplicationBuilder`","Url":"https://github.com/aspnet/Announcements/issues/498","RelatedDescription":"Open issue \"[Breaking change]: `WebApplicationBuilder` gives `ASPNET_`-prefixed environment variables lower precedence\" (#498)"},{"Id":"1414759756","IsPullRequest":false,"CreatedAt":"2022-10-19T11:01:00","Actor":"javiercn","Number":"497","RawContent":null,"Title":"[Breaking change]: Updates to Authentication in webassembly applications","State":"open","Body":"### Description\n\nWe updated our support for authentication in Blazor Webassembly applications to rely on the history state instead of query strings in the URL. As a result of that, existing applications passing the return URL through the query string will fail to redirect back to the original page after a successful login.\r\n\r\nExisting applications should use the new `NavigateToLogin` extension method as it is able to flow the data to the login page corectly.\n\n### Version\n\n.NET 7 RC 1\n\n### Previous behavior\n\nThe return URL would be specified in the query string as `?returnUrl=<<return-url>>`.\n\n### New behavior\n\nThe return URL along other parameters passed to the `authentication/login` page are passed via the `history.state` entry of the page.\n\n### Type of breaking change\n\n- [ ] **Binary incompatible**: Existing binaries may encounter a breaking change in behavior, such as failure to load/execute or different run-time behavior.\n- [ ] **Source incompatible**: Source code may encounter a breaking change in behavior when targeting the new runtime/component/SDK, such as compile errors or different run-time behavior.\n- [X] **Behavioral change**: Existing code and binaries may experience different run-time behavior.\n\n### Reason for change\n\nWe decided to switch to using `history.state` instead of the query string as it simplifies the implementation and removes the surface attack area associated with passing data through the query string.\n\n### Recommended action\n\nMost apps have a RedirectToLogin.razor file in them that can be updated as follows:\r\n\r\n```razor\r\n@inject NavigationManager Navigation\r\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\r\n@using Microsoft.Extensions.Options\r\n\r\n@inject IOptionsSnapshot<RemoteAuthenticationOptions<ApiAuthorizationProviderOptions>> Options\r\n@code {\r\n\r\n    protected override void OnInitialized()\r\n    {\r\n        Navigation.NavigateToLogin(Options.Get(Microsoft.Extensions.Options.Options.DefaultName).AuthenticationPaths.LogInPath);\r\n    }\r\n}\r\n```\n\n### Affected APIs\n\nAs part of this change `SignOutSessionStateManager` has been obsoleted in favor of `NavigationManager.NavigateToLogout`","Url":"https://github.com/aspnet/Announcements/issues/497","RelatedDescription":"Open issue \"[Breaking change]: Updates to Authentication in webassembly applications\" (#497)"}],"ResultType":"GitHubIssue"}},"RunOn":"2025-09-26T03:30:07.7133128Z","RunDurationInMilliseconds":2923}