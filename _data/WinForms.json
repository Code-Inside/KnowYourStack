{"Data":{"GitHub":{"Issues":[{"Id":"1446487153","IsPullRequest":true,"CreatedAt":"2022-11-12T15:08:29","Actor":"gpetrou","Number":"8176","RawContent":null,"Title":"Enable nullability in BindingMemberInfo","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in BindingMemberInfo.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8176)","Url":"https://github.com/dotnet/winforms/pull/8176","RelatedDescription":"Open PR \"Enable nullability in BindingMemberInfo\" (#8176)"},{"Id":"1446306188","IsPullRequest":true,"CreatedAt":"2022-11-12T07:26:24","Actor":"gpetrou","Number":"8175","RawContent":null,"Title":"Enable nullability in ToolStripPanelCellToControlEnumerator","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in ToolStripPanelCellToControlEnumerator.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8175)","Url":"https://github.com/dotnet/winforms/pull/8175","RelatedDescription":"Open PR \"Enable nullability in ToolStripPanelCellToControlEnumerator\" (#8175)"},{"Id":"1446294952","IsPullRequest":true,"CreatedAt":"2022-11-12T06:49:18","Actor":"gpetrou","Number":"8174","RawContent":null,"Title":"Enable nullability in some ToolStripItem members","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in some ToolStripItem members.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8174)","Url":"https://github.com/dotnet/winforms/pull/8174","RelatedDescription":"Open PR \"Enable nullability in some ToolStripItem members\" (#8174)"},{"Id":"1446250753","IsPullRequest":true,"CreatedAt":"2022-11-12T05:02:11","Actor":"JeremyKuhne","Number":"8173","RawContent":null,"Title":"Remove ANSI methods from the message loop","State":"open","Body":"While fiddling with hosting VB6 controls I hit asserts regarding the message window changing unicode/ansi state. Investigating it was a result of the HWND changing as we make various peek/get calls for messages. I could track this and use the various APIs, but this flipping back and forth is most likely an artifact of Win9x (guessing hat is on here). Windows does the translation automatically:\r\n\r\nhttps://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-iswindowunicode#remarks\r\n\r\nThe VB6 control (which has an ANSI window) works just fine with these changes. It simplifies the logic and will speed up the message loop at least a little.\r\n\r\nRemoves the old GetMessage/PeekMessage defines in favor of CsWin32.\r\n\r\nAlso remove redundant </inheritdoc> labels- docs are automatically inherited from the interface when explicitly implementing.\r\n\r\ncc: @lonitra \n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8173)","Url":"https://github.com/dotnet/winforms/pull/8173","RelatedDescription":"Open PR \"Remove ANSI methods from the message loop\" (#8173)"},{"Id":"1444944303","IsPullRequest":true,"CreatedAt":"2022-11-12T00:51:21","Actor":"elachlan","Number":"8167","RawContent":null,"Title":"Refactor `Com2TypeInfoProcessor` to use `Dictionary` instead of `Hashtable`","State":"closed","Body":"Related: #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8167)","Url":"https://github.com/dotnet/winforms/pull/8167","RelatedDescription":"Closed or merged PR \"Refactor `Com2TypeInfoProcessor` to use `Dictionary` instead of `Hashtable`\" (#8167)"},{"Id":"1446105681","IsPullRequest":true,"CreatedAt":"2022-11-11T23:48:10","Actor":"dotnet-maestro[bot]","Number":"8172","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:84f431dc-3375-4a46-af87-08d961c59698)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 84f431dc-3375-4a46-af87-08d961c59698\r\n- **Build**: 20221108.7\r\n- **Date Produced**: November 9, 2022 12:33:13 AM UTC\r\n- **Commit**: a7773a9828c67a9b1fba3d2daee061ec90db3505\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.22558.2 to 6.0.0-beta.22558.7][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 6.0.0-beta.22558.2 to 6.0.0-beta.22558.7][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.22558.2 to 6.0.0-beta.22558.7][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.22558.2 to 6.0.0-beta.22558.7][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.22558.2 to 6.0.0-beta.22558.7][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.22558.2 to 6.0.0-beta.22558.7][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/841e1fe...a7773a9\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:84f431dc-3375-4a46-af87-08d961c59698)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8172)","Url":"https://github.com/dotnet/winforms/pull/8172","RelatedDescription":"Open PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#8172)"},{"Id":"1442756007","IsPullRequest":true,"CreatedAt":"2022-11-11T22:37:11","Actor":"dreddy-work","Number":"8149","RawContent":null,"Title":"Scrollbar scaling according to Dpi is controllable via public property in Framework","State":"closed","Body":"When original fix to scale scrollbars was introduced, we hide change under a switch and introduced public property to help developers control the scaling. In .NET, we removed all switches and accidentally removed developer control via public property `ScaleScrollBarForDpiChange`.\r\n\r\nBringing parity with Framework here.\r\n\r\nFixes #2742\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8149)","Url":"https://github.com/dotnet/winforms/pull/8149","RelatedDescription":"Closed or merged PR \"Scrollbar scaling according to Dpi is controllable via public property in Framework\" (#8149)"},{"Id":"1445878773","IsPullRequest":true,"CreatedAt":"2022-11-11T20:02:32","Actor":"dreddy-work","Number":"8171","RawContent":null,"Title":"GridError dialog missing AutoScaleDimensions property","State":"closed","Body":"GridError dialog is missing `AutoScaleDimension` property resulting in default scale factor `1`. Thus, not scaled according to the DPI of the primary monitor. This property is auto generated if dialog was designed in the designer.\r\n\r\nFixes #5111 .\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8171)","Url":"https://github.com/dotnet/winforms/pull/8171","RelatedDescription":"Closed or merged PR \"GridError dialog missing AutoScaleDimensions property\" (#8171)"},{"Id":"1445814102","IsPullRequest":false,"CreatedAt":"2022-11-11T17:49:48","Actor":"lonitra","Number":"8170","RawContent":null,"Title":"[Tracking] UI Test Dialogs Reliably","State":"open","Body":"When UI testing for dialogs such as `FolderBrowserDialog`,`OpenFileDialog`,`SaveFileDialog`, etc. we should test reliably/quickly by:\r\n\r\n1. Avoiding hunting for HWNDs\r\n2. Interacting with the dialog programmatically rather than via mouse or keyboard input if possible\r\n\r\nAn example of this would be the following:\r\n```c#\r\n[WinFormsFact]\r\npublic void OpenFileDialog_ShowDialog_Success()\r\n{\r\n    using DialogHostForm dialogOwnerForm = new();\r\n    using OpenFileDialog dialog = new();\r\n    Assert.Equal(DialogResult.Cancel, dialog.ShowDialog(dialogOwnerForm));\r\n}\r\n\r\ninternal class DialogHostForm : Form\r\n{\r\n    protected override void WndProc(ref Message m)\r\n    {\r\n        if (m.MsgInternal == WM.ENTERIDLE && m.WParamInternal == (uint)MSGF.DIALOGBOX)\r\n        {\r\n            HWND dialogHandle = (HWND)m.LParamInternal;\r\n            PInvoke.PostMessage(dialogHandle, WM.CLOSE);\r\n        }\r\n\r\n        base.WndProc(ref m);\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/8170","RelatedDescription":"Open issue \"[Tracking] UI Test Dialogs Reliably\" (#8170)"},{"Id":"1442768794","IsPullRequest":true,"CreatedAt":"2022-11-11T17:21:20","Actor":"lonitra","Number":"8150","RawContent":null,"Title":"Update FolderBrowserDialogTest","State":"closed","Body":"Addresses https://github.com/dotnet/winforms/pull/8115#pullrequestreview-1171260833\r\n- Update FolderBrowserDialogTest to match OpenFileDialogTest\r\n- Move form that is hosting dialogs in the tests to TestUtilities\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8150)","Url":"https://github.com/dotnet/winforms/pull/8150","RelatedDescription":"Closed or merged PR \"Update FolderBrowserDialogTest\" (#8150)"},{"Id":"1445039038","IsPullRequest":true,"CreatedAt":"2022-11-11T10:12:50","Actor":"KindDragon","Number":"8169","RawContent":null,"Title":"Small refactoring in AxHost.AxPropertyDescriptor.cs","State":"closed","Body":"Follow-up for #8152\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8169)","Url":"https://github.com/dotnet/winforms/pull/8169","RelatedDescription":"Closed or merged PR \"Small refactoring in AxHost.AxPropertyDescriptor.cs\" (#8169)"},{"Id":"1444952958","IsPullRequest":true,"CreatedAt":"2022-11-11T05:26:51","Actor":"elachlan","Number":"8168","RawContent":null,"Title":"Refactor `ListView` to use `Dictionary` instead of `Hashtable`","State":"open","Body":"Related: #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8168)","Url":"https://github.com/dotnet/winforms/pull/8168","RelatedDescription":"Open PR \"Refactor `ListView` to use `Dictionary` instead of `Hashtable`\" (#8168)"},{"Id":"1444939629","IsPullRequest":true,"CreatedAt":"2022-11-11T05:09:10","Actor":"elachlan","Number":"8166","RawContent":null,"Title":"Refactor `VisualStyleRenderer` to use `Dictionary` instead of `Hashtable`","State":"open","Body":"Related: #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8166)","Url":"https://github.com/dotnet/winforms/pull/8166","RelatedDescription":"Open PR \"Refactor `VisualStyleRenderer` to use `Dictionary` instead of `Hashtable`\" (#8166)"},{"Id":"1444857333","IsPullRequest":false,"CreatedAt":"2022-11-11T03:09:16","Actor":"Philip-Wang01","Number":"8165","RawContent":null,"Title":"A DirectX control is drawn in an incorrect position when the form is resized and the RightToLeft mode is used","State":"open","Body":"### .NET version\n\n8.0.100-alpha.1.22559.22\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, it's not a regression issue. This issue also repro's on .NET 3.1 and .NET 5.0.\n\n### Issue description\n\n**Actual Result:**\r\nA DirectX control is drawn in an incorrect position when the form is resized and the RightToLeft mode is used.\r\n![ReproSteps](https://user-images.githubusercontent.com/86937911/201251676-803b5680-ee6d-4230-8122-cc0de9630f37.gif)\r\n\r\n**Expected Result:**\r\nDirectX control should draw in the correct position.\r\n\r\n**More Info:**\r\n1. The initial feedback ticket is: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1568826.\r\n2. The original issue is: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1578649.\r\n3. If RightToLeft mode is enabled, the control area that is drawn with the DirectX technique is not displayed correctly. At the same time, the GDI painter uses correct bounds.\r\n4. This issue is only reproduced if the DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL effect is used. However, customer is not able to use another effect, because this effect is recommended for implementing the DirectX rendering.\n\n### Steps to reproduce\n\n1. Open the attached the application.\r\n[DirectX.zip](https://github.com/dotnet/winforms/files/9986088/DirectX.zip)\r\n2. Build & run the application.\r\n3. Resize the form in RightToLeft mode and observe the results.\r\n","Url":"https://github.com/dotnet/winforms/issues/8165","RelatedDescription":"Open issue \"A DirectX control is drawn in an incorrect position when the form is resized and the RightToLeft mode is used\" (#8165)"},{"Id":"1443028935","IsPullRequest":true,"CreatedAt":"2022-11-11T02:18:08","Actor":"JeremyKuhne","Number":"8155","RawContent":null,"Title":"Add support for the COM global interface table","State":"closed","Body":"When we're holding onto COM pointers that need to be released in a finalizer we need to ensure that we're hitting an agile reference to get any needed apartment marshalling. The Global Interface Table provides a mechanism for this down to our lowest supported platforms.\r\n\r\nThis creates a static wrapper for the GIT and a disposable wrapper class `AgileComPointer` for managing access to the GIT.\r\n\r\nThis moves AxHost.State to utilize the new `AgileComPointer`.\r\n\r\nAlso add a global using for XUnit for the interop unit tests.\r\n\r\ncc: @lonitra, @AaronRobinsonMSFT\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8155)","Url":"https://github.com/dotnet/winforms/pull/8155","RelatedDescription":"Closed or merged PR \"Add support for the COM global interface table\" (#8155)"},{"Id":"1444811473","IsPullRequest":true,"CreatedAt":"2022-11-11T01:59:46","Actor":"elachlan","Number":"8164","RawContent":null,"Title":"Refactor `HelpProvider` to use `Dictionary` instead of `Hashtable`","State":"open","Body":"Refactor `HelpProvider` to use `Dictionary` instead of `Hashtable`\r\n\r\nRelated: #8143\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8164)","Url":"https://github.com/dotnet/winforms/pull/8164","RelatedDescription":"Open PR \"Refactor `HelpProvider` to use `Dictionary` instead of `Hashtable`\" (#8164)"},{"Id":"1444690166","IsPullRequest":true,"CreatedAt":"2022-11-11T01:28:08","Actor":"elachlan","Number":"8161","RawContent":null,"Title":"Refactor `ThreadContext` to use `Dictionary<uint, ThreadContext>` instead of `Hashtable`","State":"closed","Body":"Related: #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8161)","Url":"https://github.com/dotnet/winforms/pull/8161","RelatedDescription":"Closed or merged PR \"Refactor `ThreadContext` to use `Dictionary<uint, ThreadContext>` instead of `Hashtable`\" (#8161)"},{"Id":"1444700296","IsPullRequest":true,"CreatedAt":"2022-11-10T23:24:53","Actor":"elachlan","Number":"8163","RawContent":null,"Title":"Refactor `AxHost` to use `Dictionary<VSSDK.PROPCAT, CategoryAttribute>` instead of `Hastable`","State":"open","Body":"Related: #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8163)","Url":"https://github.com/dotnet/winforms/pull/8163","RelatedDescription":"Open PR \"Refactor `AxHost` to use `Dictionary<VSSDK.PROPCAT, CategoryAttribute>` instead of `Hastable`\" (#8163)"},{"Id":"1444694399","IsPullRequest":false,"CreatedAt":"2022-11-10T23:18:21","Actor":"conorgee","Number":"8162","RawContent":null,"Title":"Slow Trackbar when large number for maximum","State":"open","Body":"### .NET version\r\n\r\n.NET 7\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo\r\n\r\n### Issue description\r\n\r\nSetting the MaxValue on the Trackbar control to a very high number results in slow loading speed and a laggy trackbar.\r\n\r\nThis appears to be because on initialization of the underlying windows control, when the maximum is set to a large number it loads that many ticks because the tick mark frequency is 1, resulting in it initializing excessive amounts of tickmarks.  This causes the issue of a slow loading time and laggy trackbar. I found this issue after expermenting with #329 .\r\n\r\nhttps://github.com/dotnet/winforms/blob/094bbe94904f2cf2bf87c7af0b5bff2076cdeec9/src/System.Windows.Forms/src/System/Windows/Forms/TrackBar.cs#L811-L812\r\n\r\n### Steps to reproduce\r\n\r\nWithin a form\r\n\r\n```\r\nTrackBar tb = new TrackBar();\r\ntb.Maximum = 1000000000;\r\nthis.Controls.Add(tb);\r\n```\r\n","Url":"https://github.com/dotnet/winforms/issues/8162","RelatedDescription":"Open issue \"Slow Trackbar when large number for maximum\" (#8162)"},{"Id":"1444686510","IsPullRequest":true,"CreatedAt":"2022-11-10T23:07:28","Actor":"elachlan","Number":"8160","RawContent":null,"Title":"Refactor `ResXResourceWriter` to use `Dictionary<string, string>` instead of `Hashtable`","State":"open","Body":"Refactor `ResXResourceWriter` to use `Dictionary<string, string>` instead of `Hashtable`.\r\n\r\nRelated: #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8160)","Url":"https://github.com/dotnet/winforms/pull/8160","RelatedDescription":"Open PR \"Refactor `ResXResourceWriter` to use `Dictionary<string, string>` instead of `Hashtable`\" (#8160)"},{"Id":"1443871432","IsPullRequest":true,"CreatedAt":"2022-11-10T17:11:16","Actor":"dotnet-maestro[bot]","Number":"8158","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221109.2\r\n- **Date Produced**: November 9, 2022 4:20:43 PM UTC\r\n- **Commit**: dd7fdb723d91c2c6cb7efc3d95f9d95ee86d48c8\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/1366574...dd7fdb7\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8158)","Url":"https://github.com/dotnet/winforms/pull/8158","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8158)"},{"Id":"1444050848","IsPullRequest":false,"CreatedAt":"2022-11-10T14:54:05","Actor":"ericcdub","Number":"8159","RawContent":null,"Title":"Cannot write or load binary serialized resources to/from satellite assemblies using .NET7","State":"open","Body":"### .NET version\r\n\r\n7.0\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\n6.0 and previous\r\n\r\n### Issue description\r\n\r\nI'm migrating a class library from .NET 6 to 7. The library extracts localisable resources from our customers' .NET assemblies including but not limited to strings, the sizes/positions of forms and controls, and images. The library also writes the localised resources into satellite assemblies. However, after migrating to .NET 7, I am unable to run .NET6 or .NET7  applications with localised satellite assemblies, as the runtime throws an exception stating: \"'Cannot read resources that depend on serialization.'\"  The types causing this error are the non-primitive UI types in assemblies such as System.Drawing.Size, which we write to satellite assemblies using BinaryFormatter to serialize the instances to byte arrays and passing those to ResourceWriter.AddResourceData.\r\n\r\nI'm aware BinaryFormatter is obsolete, and will be removed altogether from .NET9, but I can't find information anywhere on alternative methods to store these resources in satellite assemblies. I've read some people using NewtonSoft.JSON or similar to serialize instances in non-localization contexts, but this doesn't work in ours because any localised app will need to be modified to also deserialize using JSON.\r\n\r\n### Steps to reproduce\r\n\r\nCreate a sample .NET 7 WinForms project \"A\" with a form and a button and/or textbox on it.\r\nSet the culture and UI of of the app's main thread to \"de\" in Main() in Program.cs:\r\n\r\n`CultureInfo ci = new CultureInfo(\"de\");\r\nThread.CurrentThread.CurrentCulture = ci;\r\nThread.CurrentThread.CurrentUICulture = ci;`\r\n\r\n\r\nSet the form's localisable property to true, and compile the project.\r\n\r\nCreate another NET 7 project \"B\", and in it write code to use ResourceReader to enumerate the resources in the assembly you just compiled from project \"A\", and using ResourceWriter, write those resources out to a single .resources file. We don't need to actually translate the resources to create the assemblies, and the code above will  cause  project \"A\" to use search for German satellite assemblies at runtime, we just need to create assemblies that adhere to the satellite assembly naming and location conventions.\r\n\r\nAs project \"A\" just contains a form with child UI controls, we will write out a single .resources file for that form to a subfolder of the output folder where \"A\"'s compiled assembly was written. That subfolder should be named after a language such as \"de\" and the .resources file should have a name similar to \"A.Form1.de.resources\"\r\n\r\nUse al.exe to build a satellite assembly DLL from the .resources file you've created:\r\n\r\nal.exe /nologo /t:lib /embed:\"outputfolder\\de\\A.Form1.de.resources\" /culture:de /out:\"outputfolder\\de\\A.resources.dll\" /comp:\"A\" /title:\"A\" /fileversion:\"1.0.0.0\" /prod:\"A\" /productv:\"1.0.0\" /v:\"1.0.0.0\"\r\n\r\nFinally, run \"A\"'s executable - It will throw an exception while trying to load the localised resources\r\n","Url":"https://github.com/dotnet/winforms/issues/8159","RelatedDescription":"Open issue \"Cannot write or load binary serialized resources to/from satellite assemblies using .NET7\" (#8159)"},{"Id":"1443562157","IsPullRequest":false,"CreatedAt":"2022-11-10T09:36:18","Actor":"Philip-Wang01","Number":"8157","RawContent":null,"Title":"[Multi-Monitor] Controls (with Anchor=Right) scaling incorrectly inside splitContainer","State":"open","Body":"### .NET version\r\n\r\n8.0.100-alpha.1.22559.18\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo. The fix scaling in SplitContainer controls for HDPI has only been introduced since .Net 8.0. The original issue: https://github.com/dotnet/winforms/issues/3168\r\n\r\n### Issue description\r\n\r\n**Current Behavior: Controls (with Anchor=Right) scaling incorrectly inside splitContainer on HDPI**\r\n\r\n100% DPI primary screen to 300% DPI secondary screen:\r\n![image](https://user-images.githubusercontent.com/86937911/201048665-b0f8d3a5-52e8-4caa-bed9-407e45d41518.png)\r\n\r\nhttps://user-images.githubusercontent.com/86937911/201048384-56d866ab-2645-4d57-9e73-5d77254aabff.mp4\r\n\r\n300% DPI primary screen to 100% DPI secondary screen:\r\n![image](https://user-images.githubusercontent.com/86937911/201047956-74b8c751-4c34-4b15-88f3-215c47513b7a.png)\r\n\r\n**Expected Behavior: Controls scaling correctly inside splitContainer on HDPI**\r\n![image](https://user-images.githubusercontent.com/86937911/201046955-e07ca0ce-bcfd-45b6-9847-1bd6488b6eae.png)\r\n\r\n\r\n### Steps to reproduce\r\n\r\n1. Set the primary screen as 100% DPI, and secondary screen 300% DPI.\r\n2. Open the attached the application.\r\n[testapp.zip](https://github.com/dotnet/winforms/files/9979341/testapp.zip)\r\n3. Build & run the application.\r\n4. Moving the form from 100% primary screen to 300% secondary screen.","Url":"https://github.com/dotnet/winforms/issues/8157","RelatedDescription":"Open issue \"[Multi-Monitor] Controls (with Anchor=Right) scaling incorrectly inside splitContainer\" (#8157)"},{"Id":"1442885946","IsPullRequest":true,"CreatedAt":"2022-11-10T05:35:49","Actor":"elachlan","Number":"8153","RawContent":null,"Title":"Refactor DataGridViewColumnCollection to replace ArrayList","State":"closed","Body":"Refactored `DataGridViewColumnCollection` to replace `ArrayList` with `List<T>`\r\n\r\nRelated: #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8153)","Url":"https://github.com/dotnet/winforms/pull/8153","RelatedDescription":"Closed or merged PR \"Refactor DataGridViewColumnCollection to replace ArrayList\" (#8153)"},{"Id":"1442813988","IsPullRequest":true,"CreatedAt":"2022-11-10T03:08:54","Actor":"elachlan","Number":"8151","RawContent":null,"Title":"Refactor TableLayout to replace ArrayList","State":"closed","Body":"Refactored TableLayout to replace `ArrayList` with `List<T>`, then removed unnecessary casts via code analyzer.\r\n\r\nRelated: #8140","Url":"https://github.com/dotnet/winforms/pull/8151","RelatedDescription":"Closed or merged PR \"Refactor TableLayout to replace ArrayList\" (#8151)"},{"Id":"1443153527","IsPullRequest":false,"CreatedAt":"2022-11-10T02:57:33","Actor":"JeremyKuhne","Number":"8156","RawContent":null,"Title":"ListView_OnSelectedIndexChanged_Invoke is failing intermittently","State":"open","Body":"### Test\n\nSystem.Windows.Forms.Tests.ListViewTests.ListView_OnSelectedIndexChanged_Invoke(view: LargeIcon, showGroups: True, focused: True, selected: True, expectedCallCount: 2)\n\n### Issue description\n\nFailing multiple times over the past few weeks on the CI\r\n\r\n```\r\nError message\r\nAssert.Equal() Failure\\r\\nExpected: 2\\r\\nActual:   1\r\n\r\n\r\nStack trace\r\n   at System.Windows.Forms.Tests.ListViewTests.ListView_OnSelectedIndexChanged_Invoke(View view, Boolean showGroups, Boolean focused, Boolean selected, Int32 expectedCallCount) in /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/ListViewTests.cs:line 4346\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n```","Url":"https://github.com/dotnet/winforms/issues/8156","RelatedDescription":"Open issue \"ListView_OnSelectedIndexChanged_Invoke is failing intermittently\" (#8156)"},{"Id":"1442842137","IsPullRequest":true,"CreatedAt":"2022-11-10T02:16:47","Actor":"elachlan","Number":"8152","RawContent":null,"Title":"Refactor `AxPropertyDescriptor` to replace `ArrayList`","State":"closed","Body":"Refactored `AxPropertyDescriptor` to replace `ArrayList` with `List<T>`\r\n\r\nRelated: #8140\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8152)","Url":"https://github.com/dotnet/winforms/pull/8152","RelatedDescription":"Closed or merged PR \"Refactor `AxPropertyDescriptor` to replace `ArrayList`\" (#8152)"},{"Id":"1442950041","IsPullRequest":false,"CreatedAt":"2022-11-09T23:46:03","Actor":"OJacot-Descombes","Number":"8154","RawContent":null,"Title":"\"(DataBindings)\" for ToolsStripItems appears under Misc section instead of Data section","State":"open","Body":"### Environment\n\nVisual Studio 2022 Community Version 17.4.0\n\n### .NET version\n\nnet7.0-windows\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nNew preview feature in .NET 7.0: DataBinding for ToolStripItems\n\n### Issue description\n\nNow `ToolStripItem` derives from `BindableComponent` instead of `Component` to allow data binding.\r\n\r\nAs for `Control` the DataBindings property should appear in the **Data** section of the properties window, but it appears in the **Misc** section.\r\n![image](https://user-images.githubusercontent.com/12754787/200965457-89d49a5a-97d3-4575-ad0b-0a6baea9c058.png)\r\n\n\n### Steps to reproduce\n\n1. Add a new Form to the project.\r\n2. Add a ToolStrip to the form (in the designer).\r\n3. Add a ToolStripButton to the ToolStrip by using the design time drop-down on the ToolStrip.\r\n4. Select this button and look at the properties window.\n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8154","RelatedDescription":"Open issue \"\"(DataBindings)\" for ToolsStripItems appears under Misc section instead of Data section\" (#8154)"},{"Id":"1442503249","IsPullRequest":true,"CreatedAt":"2022-11-09T22:22:25","Actor":"lonitra","Number":"8148","RawContent":null,"Title":"Prevent Over Releasing of IStream","State":"closed","Body":"Addresses https://github.com/dotnet/winforms/pull/8105#discussion_r1017451431\r\n~~Update `Dispose(bool disposing)` methods for `AxHost.State` and `DataStreamFromComStream` to avoid releasing COM references on finalizer thread.~~\r\n\r\nEnsure `_comStream` in `DataStreamFromComStream` does not get over released\r\n- ~~Add field indicating whether `DataStreamFromComStream` takes ownership of the stream passed into constructor~~\r\n- ~~Check if `DataStreamFromComStream` owns the stream before releasing~~\r\n- Do not take ownership of `_comStream` in `DataStreamFromComStream` and remove its finalizer\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8148)","Url":"https://github.com/dotnet/winforms/pull/8148","RelatedDescription":"Closed or merged PR \"Prevent Over Releasing of IStream\" (#8148)"},{"Id":"1442362780","IsPullRequest":true,"CreatedAt":"2022-11-09T16:38:19","Actor":"dotnet-maestro[bot]","Number":"8147","RawContent":null,"Title":"[release/7.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1bb79c46-2599-4c95-8164-08da7ef6284d)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 1bb79c46-2599-4c95-8164-08da7ef6284d\r\n- **Build**: 20221108.4\r\n- **Date Produced**: November 8, 2022 7:03:36 PM UTC\r\n- **Commit**: 3f3c360819c5c092d0e4505a67dfe59a33fba557\r\n- **Branch**: refs/heads/release/7.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22513.4 to 7.0.0-beta.22558.4][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22513.4 to 7.0.0-beta.22558.4][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22513.4 to 7.0.0-beta.22558.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22513.4 to 7.0.0-beta.22558.4][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22513.4 to 7.0.0-beta.22558.4][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22513.4 to 7.0.0-beta.22558.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/02e2831...3f3c360\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates sdk.version to 7.0.100\r\n  - Updates tools.dotnet to 7.0.100\r\n\r\n[marker]: <> (End:1bb79c46-2599-4c95-8164-08da7ef6284d)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8147)","Url":"https://github.com/dotnet/winforms/pull/8147","RelatedDescription":"Closed or merged PR \"[release/7.0] Update dependencies from dotnet/arcade\" (#8147)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-11-13T03:30:35.3095053Z","RunDurationInMilliseconds":531}