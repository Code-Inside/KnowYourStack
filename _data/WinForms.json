{"Data":{"GitHub":{"Issues":[{"Id":"2604105755","IsPullRequest":true,"CreatedAt":"2024-10-22T03:09:58","Actor":"Liv-Goh","Number":"12364","RawContent":null,"Title":"Add unit test for UpDownBaseDesigner","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/10773\r\n\r\n## Proposed changes\r\n1. Add unit test UpDownBaseDesignerTests.cs for public properties and method of the UpDownBaseDesigner.\r\n2. Enable nullability in UpDownBaseDesignerTests.cs.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12364)","Url":"https://github.com/dotnet/winforms/pull/12364","RelatedDescription":"Open PR \"Add unit test for UpDownBaseDesigner\" (#12364)"},{"Id":"2604036826","IsPullRequest":true,"CreatedAt":"2024-10-22T02:09:03","Actor":"Epica3055","Number":"12363","RawContent":null,"Title":"fix #12358 [HDPI] The \"document\" text in the “Generating Previews” dialog is truncated at >200% DPI","State":"open","Body":"\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12358 \r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- Make the indicator's width wider. \r\n- \r\n\r\n<!--\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n  -->\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![Image](https://github.com/user-attachments/assets/8e7db4a6-990e-4129-bb1b-eb982bd1c389)\r\n\r\n### After\r\n\r\n![image](https://github.com/user-attachments/assets/98bf306d-40a4-4f0e-a5bc-42518cb3b3ea)\r\n![image](https://github.com/user-attachments/assets/d646b4d5-20ce-4086-972a-97711ba6cb6b)\r\n![image](https://github.com/user-attachments/assets/8feda7fe-1b61-4943-8103-23b8687cf8d2)\r\n\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- manual \r\n- \r\n<!--\r\n## Accessibility testing\r\n\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  \r\n\r\n\r\n \r\n\r\n## Test environment(s)\r\n\r\n-->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12363)","Url":"https://github.com/dotnet/winforms/pull/12363","RelatedDescription":"Open PR \"fix #12358 [HDPI] The \"document\" text in the “Generating Previews” dialog is truncated at >200% DPI\" (#12363)"},{"Id":"2603953247","IsPullRequest":false,"CreatedAt":"2024-10-22T00:41:35","Actor":"Tanya-Solyanik","Number":"12362","RawContent":null,"Title":"[API Proposal] New Clipboard and DataObject APIs","State":"open","Body":"### Background and motivation\n\nOLE clipboard supports [standard exchange formats](https://learn.microsoft.com/windows/win32/dataxchg/standard-clipboard-formats) and also allows users to register custom formats for data exchange. Although standard exchange formats do not use binary format as they are defined by Windows, custom format serialization of objects in .NET has used the BinaryFormatter (in both WinForms and WPF).\nWinForms Clipboard falls back to the BinaryFormatter when consuming custom types stored as custom clipboard formats. We propose a safer set of Clipboard and DataObject APIs that restrict unbounded BinaryFormatter deserialization to types known at the compile time and provide an alternative serialization method, JSON, for user types.\n\n### API Proposal\n\n```diff\nnamespace System.Windows.Forms;\n\npublic static partial class Clipboard\n{\n+   // Saves the data onto the clipboard in the specified format using System.Text.Json. Will throw InvalidOperationException if DataObject is passed as it is ambiguous what user is intending given DataObject cannot be meaningfully JSON serialized.\n+   public static void SetDataAsJson<T>(string format, T data) { }\n\n+   [Obsolete(\"`Clipboard.GetData(string)` method is obsolete. Use `Clipboard.TryGetData<T>` instead.\", false, DiagnosticId = \"WFDEV005\", UrlFormat = \"https://aka.ms/winforms-warnings/{0}\")\n+   [EditorBrowsable(EditorBrowsableState.Never)]\n    public static object? GetData(string format) { }\n    \n+   // Verifies that payload contains type T and then attempts to read or deserialize it. \n+   public static bool TryGetData<T>(string format, out T data) { }\n+   // Uses user-provided resolve to match the requested type to the payload content and to rehydrate the payload.\n+   public static bool TryGetData<T>(\n       string format, Func<Reflection.Metadata.TypeName, Type> resolver, out T data) { }\n}\n\nnamespace System.Windows.Forms;\n\n// Managed implementation of OLE’s IDataObject definition and is being used in all OLE operations for WinForms/WPF.\npublic partial class DataObject : IDataObject, Runtime.InteropServices.ComTypes.IDataObject\n{\n+   // Stores the specified data and its associated format in this instance using System.Text.Json. Will throw InvalidOperationException if DataObject is passed as it is ambiguous what user is intending given DataObject cannot be meaningfully JSON serialized.\n+   public void SetDataAsJson<T>(T data) { }\n+   public void SetDataAsJson<T>(string format, T data) { }\n+   public void SetDataAsJson<T>(string format, bool autoConvert, T data) { }\n\n+   [Obsolete(\"`DataObject.GetData` methods are obsolete. Use the corresponding `DataObject.TryGetData<T>` instead.\", false, DiagnosticId = \"WFDEV005\", UrlFormat = \"https://aka.ms/winforms-warnings/{0}\")]\n+   [EditorBrowsable(EditorBrowsableState.Never)]\n    public virtual object? GetData(string format, bool autoConvert) { }\n\n+   [Obsolete(\"`DataObject.GetData` methods are obsolete. Use the corresponding `DataObject.TryGetData<T>` instead.\", false, DiagnosticId = \"WFDEV005\", UrlFormat = \"https://aka.ms/winforms-warnings/{0}\")]\n+   [EditorBrowsable(EditorBrowsableState.Never)]\n    public virtual object? GetData(string format) { }\n\n+   [Obsolete(\"`DataObject.GetData` methods are obsolete. Use the corresponding `DataObject.TryGetData<T>` instead.\", false, DiagnosticId = \"WFDEV005\", UrlFormat = \"https://aka.ms/winforms-warnings/{0}\")]\n+   [EditorBrowsable(EditorBrowsableState.Never)]\n    public virtual object? GetData(Type format) { }\n\n+   public virtual bool TryGetData<T>(out T data) { }\n+   public virtual bool TryGetData<T>(string format, out T data) { }\n+   public virtual bool TryGetData<T>(string format, bool autoConvert, out T data) { }\n+   public virtual bool TryGetData<T>(string format, Func<Reflection.Metadata.TypeName, Type> resolver, bool autoConvert, out T data) { }\n}\n\nnamespace System.Windows.Forms;\n\npublic partial interface IDataObject\n{\n    object? GetData(string format, bool autoConvert);\n    object? GetData(string format);\n    object? GetData(Type format);\n\n+   // Default implementations of these interface methods are using the existing GetData methods.\n+   bool TryGetData<T>(out T data);\n+   bool TryGetData<T>(string format, out T data);\n+   bool TryGetData<T>(string format, bool autoConvert, out T data);\n+   bool TryGetData<T>(string format, Func<Reflection.Metadata.TypeName, Type> resolver, bool autoConvert, out T data);\n}\n\n\nnamespace System.Windows.Forms;\n\npublic class partial class Control\n{\n+   // Begins drag operation, storing the drag data using System.Text.Json. Will throw InvalidOperationException if DataObject is passed as it is ambiguous what user is intending given DataObject cannot be meaningfully JSON serialized.\n+   public DragDropEffects DoDragDropAsJson<T>(T data, DragDropEffects allowedEffects, Bitmap? dragImage, Point cursorOffset, bool useDefaultDragImage)\n+   public DragDropEffects DoDragDropAsJson<T>(T data, DragDropEffects allowedEffects)\n}\n\n\nnamespace Microsoft.VisualBasic.MyServices\n\npublic partial class ClipboardProxy\n{\n+   public void SetDataAsJson<T>(T data) { }\n+   public void SetDataAsJson<T>(string format, T data) { }\n\n+   [Obsolete(\"`ClipboardProxy.GetData(As String)` method is obsolete. Use `ClipboardProxy.TryGetData(Of T)` instead.\", false, DiagnosticId = \"WFDEV005\", UrlFormat = \"https://aka.ms/winforms-warnings/{0}\")\n+   [EditorBrowsable(EditorBrowsableState.Never)]\n    public object GetData(string format) { } \n\n+   public bool TryGetData<T>(string format, out T data) { }\n+   public bool TryGetData<T>(string format, System.Func<System.Reflection.Metadata.TypeName, System.Type> resolver, out T data) { }\n}\n\n```\n\nNew configuration switch:\n`ClipboardDragDrop.EnableUnsafeBinaryFormatterSerialization` - controls whether BinaryFormatter is enabled as a fallback for Clipboard and Drag/drop scenarios. By default, it is false.\n\n### API Usage\n\n```diff\n\n// Clipboard example\nclass WeatherForecast \n{ \n    public DateTimeOffset Date { get; set; } \n    public int TemperatureCelsius { get; set; } \n    public string? Summary { get; set; }\n    public Font Font { get; set; }  \n}\n\nvoid SetClipboardData() \n{\n    WeatherForecast weatherForecast = new() \n    { \n        Date = DateTime.Parse(\"2019-08-01\"), \n        TemperatureCelsius = 25, \n        Summary = \"Hot\",\n        Font = new(\"Consolas\", emSize: 10) \n    };\n\n-   // Old API would require the app to opt into the BinaryFormatter processing.\n-   // Users could manually JSON serialize their data with old API, but new API provides more convenience.\n-   byte[] serialized = JsonSerializer.SerializeToUtf8Bytes(weatherForecast);\n-   Clipboard.SetData(\"myCustomFormat\", serialized);\n\n+    Clipboard.SetDataAsJson(\"myCustomFormat\", weatherForecast);\n}\n\nvoid GetClipboardData()\n{\n-   // Old API, requires opt into BinaryFormatter\n-   if (Clipboard.GetData(“myCustomFormat”) is WeatherForecast deserialized)\n\n-   // Old API, with manual JSON serialization\n-   if (Clipboard.GetData(\"myCustomFormat\") is byte[] byteData\n-       && JsonSerializer.Deserialize(byteData, typeof(WeatherForecast) is {} deserialized)\n\n+   if (Clipboard.TryGetData(\"myCustomFormat\", FontResolver, out WeatherForecast? deserialized))\n    {\n        // do things with deserialized data.\n    }\n}\n\nstatic Type FontResolver(TypeName typeName)\n{\n    (string name, Type type)[] allowedTypes =\n     [\n         (typeof(FontStyle).FullName!, typeof(FontStyle)),\n         (typeof(FontFamily).FullName!, typeof(FontFamily)),\n         (typeof(GraphicsUnit).FullName!, typeof(GraphicsUnit)),\n     ];\n\n     string fullName = typeName.FullName;\n     foreach (var (name, type) in allowedTypes)\n     {\n          // Namespace-qualified type name.\n          if (name == fullName)\n          {\n              return type;\n          }\n      }\n\n      throw new NotSupportedException($\"Can't resolve {fullName}\");\n }\n```\n\n```diff\n// Drag/Drop example.\nprivate Form _form1 = new();\nprivate Control _beingDrag = new();\n_beingDrag.MouseDown += beingDrag_MouseDown;\n_form1.DragDrop += Form1_DragDrop;\n\nvoid beingDrag_MouseDown(object sender, MouseEventArgs e)\n{\n    WeatherForecast weatherForecast = new WeatherForecast\n    {\n        Date = DateTimeOffset.Now,\n        TemperatureCelsius = 25,\n        Summary = \"Hot\"\n        Font = new(\"Consolas\", emSize: 10)\n    };\n\n    // Old API requires the app to opt into BinaryFormatter processing.\n-   _beginDrag.DoDragDrop(weatherForecast, DragDropEffects.Copy)\n\n    // Users could manually JSON serialize their data with old API, but new API provides more convenience.\n-   byte[] serialized = JsonSerializer.SerializeToUtf8Bytes(weatherForecast);\n-   DataObject dataObject = new();\n-   dataObject.SetData(\"myCustomFormat\", serialized);\n-   _beingDrag.DoDragDrop(serialized, DragDropEffects.Copy);\n\n+   _beingDrag.DoDragDropAsJson(weatherForecast, DragDropEffects.Copy);    \n}\n \nvoid Form1_DragDrop(object sender, DragEventArgs e)\n{\n    DataObject dataObject = e.Data;\n-   // Old API, requires opt into BinaryFormatter\n-   if (dataObject.GetData(typeof(WeatherForecast) is WeatherForecast deserialized)\n\n-   // Old API, with manual JSON serialization\n-   if (dataObject.GetData(\"myCustomFormat\") is byte[] byteData\n-       && JsonSerialize.Deserialize(byteData, typeof(WeatherForecast)) is {} deserialized)\n\n+   if (dataObject.TryGetData(typeof(WeatherForecast), FontResolver, out WeatherForecast? deserialized))\n    {\n        // do things with deserialized data.\n    }\n}\n\n```\n\n### Alternative Designs\n\n1. Replace a `Func<TypeName, Type>` with a resolver interface that can be reused in ResX and ActiveX scenarios and potentially in other Runtime scenarios, move the IResolver interface into `System.Runtime.Serialization` namespace. That would be a replacement for the resolver `Func<TypeName, Type>`.\n\n```csharp\nbool TryGetData<T>(string format, IResolver resolver, bool autoConvert, out T data);\n\nnamespace System.Windows.Forms;\npublic interface IResolver\n{\n    Type TypeFromTypeName(TypeName typeName);\n}\n```\n\n2. Should we make the `GetData` methods in the managed `IDataObject` interface obsolete?\nThese methods are implemented by the user, we don’t know if they are vulnerable or not. But they propagate a bad pattern by returning an unconstrained type (System.Object). There might be too many false positives if we obsolete them. The recommended way is for users to derive from the managed DataObject, not to implement the interface from scratch, and that scenario is covered.\n\n3. Should we make the `SetData` overloads obsolete?\nNo, this scenario is not vulnerable, it propagates a bad pattern only when serializing more complex types. We will address this with an analyzer.\n\n4. Why take T for `SetDataAsJson` / `DoDragDropAsJson` APIs instead of object?\nWe need to save the original type of the data that is being passed in so that we can rehydrate the type when the user asks for it, meaning that we will need to rely on Object.GetType to get the type of the passed in data in SetDataAsJson  / DoDragDropAsJson APIs. This is not trim friendly because it might use reflection.\n\n5. Should an optional parameter to SetData and DoDragDrop APIs to indicate serializing with Json is desired instead of introducing a new API signature?\nThis is an option, but it is again not trim friendly as we would need to rely on Object.GetType.\n\n6. Should we make the managed IDataObject interface obsolete?\nThe shape of the managed interface matches that of the OLE interface, and the whole ecosystem depends on it, so any replacement would be very similar. We assume that most use cases override our DataObject instead of implementing the IDataObject from scratch.\n\n7. Should the consumption side APIs be `T GetData<T>(..)` or `bool TryGetData<T>(… out T data)`. \nNo strong preference, an API that returns a Boolean seems to be more convenient for the common use patterns observed in GitHUB.\n\n8. Naming for the configuration switch should indicate that it’s applicable to WPF as well when we share code with WPF.\nAfter the code is merged in the WPF repo,  System.Windows.Forms.Clipboard and System.Windows.Clipboard\nwill share the implementation. We want the configuration switch name to indicate that it’s applicable to both. We could use the common namespace name portion \n`System.Windows.ClipboardDragDrop.EnableUnsafeBinaryFormatterSerialization`\nOr\n`System.ClipboardDragDrop.EnableUnsafeBinaryFormatterSerialization`\nOr no namespace name\n`ClipboardDragDrop.EnableUnsafeBinaryFormatterSerialization`\n\n### Risks\n\n• We rely on `NrbfDecoder` and type name matching API to be safe ([threat model](https://github.com/dotnet/designs-microsoft/pull/78)). But users would have to implement the assembly loader and type resolver that loads unsafe types, they can call Type.GetType() and lose control over assembly loading. New replacement APIs that do not accept the type resolver parameter, don’t have this issue.\nSample user-provided resolver code:\n\n```csharp\ninternal static Type MyResolver(TypeName typeName)\n{\n     Type[] allowedTypes =\n     [\n         typeof(MyClass),\n         typeof(MyClass1)\n     ];\n\n     foreach (Type type in allowedTypes)\n     {\n         // Namespace-qualified type name.\n         if (typeName.FullName == type.FullName!)\n         {\n             return type;\n         }\n     }\n\n     // Do not call Type.GetType(typeName.AssemblyQualifiedName), throw for the unexpected types instead.\n     throw new NotSupportedException();\n}\n```\n\n• When deserializing objects that have been JSON serialized, this carries the same risks as any JSON data going through System.Text.Json, so it is possible to misuse SetDataAsJson to do bad things during clipboard and drag/drop operation (System.Text.Json [threat model](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.Json/docs/ThreatModel.md)). As with any data, users need to trust the JSON data they are trying to grab.\n\n### Risk mitigation\n\nWe are adding a new configuration switch that would block the fallback into `BinaryFormatter` use in Clipboard and DragDrop scenarios, the proposed APIs allow users to use JSON format instead.\n\n### Will this feature affect UI controls?\n\nNo","Url":"https://github.com/dotnet/winforms/issues/12362","RelatedDescription":"Open issue \"[API Proposal] New Clipboard and DataObject APIs\" (#12362)"},{"Id":"2603496366","IsPullRequest":false,"CreatedAt":"2024-10-21T19:40:13","Actor":"MaceySoftware","Number":"12361","RawContent":null,"Title":"Custom Binding Sources not seen as a binding source?","State":"open","Body":"### Environment\n\nVersion: 17.10.2\n\n### .NET version\n\n.Net 8 in this example, our actual application is running 4.8.\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nIt worked in visual studio 2019 as it wasn't using the out of process designer\n\n### Issue description\n\nOut of process designer doesn't correctly identify custom binding sources and therefore inject extra binding sources when attempting to set them up.\n\n### Steps to reproduce\n\n1. Setup project so it uses the out of process designer\n2. Add a new class called \"MyCustomBindingSource\"\n3. Inherit System.Windows.Forms.BindingSource\n4. Build project\n5. Add MyCustomBindingSource to form\n6. Set the datasource property as you normally would\n  Issue 1, the datasource property doesn't get set via the window however this is already logged here: https://github.com/dotnet/winforms/issues/8908\n\n![Image](https://github.com/user-attachments/assets/79a1241d-7336-4026-bd9e-f0afa5ba4b26)\n\n7. Use work around to set the datasource property via the other datasource section\n  Issue 2, A extra binding source has been added to the form which has been setup correctly and the MyCustomBindingSource datasource property has been set to that bindingsource.\n![Image](https://github.com/user-attachments/assets/ce409023-3094-46e4-b7dc-151614826870)\n\nProject can be downloaded here if you want to be able to skip to step 4\n\n[DataBindingIssue.zip](https://github.com/user-attachments/files/17466217/DataBindingIssue.zip)\n\nRegards\n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/12361","RelatedDescription":"Open issue \"Custom Binding Sources not seen as a binding source?\" (#12361)"},{"Id":"2601987249","IsPullRequest":true,"CreatedAt":"2024-10-21T19:17:46","Actor":"Nora-Zhou01","Number":"12359","RawContent":null,"Title":"Add unit tests for SplitterDesigner","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nRelated https://github.com/dotnet/winforms/issues/10773\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add unit test SplitterDesignerTests.cs for public properties and method of the SplitterDesigner.cs\r\n- Enable nullability in SplitterDesignerTests.cs\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12359)","Url":"https://github.com/dotnet/winforms/pull/12359","RelatedDescription":"Closed or merged PR \"Add unit tests for SplitterDesigner\" (#12359)"},{"Id":"2602527759","IsPullRequest":false,"CreatedAt":"2024-10-21T13:15:13","Actor":"andregiacomini","Number":"12360","RawContent":null,"Title":"\"Windows Forms Trace Listener\" message box windows appear every time a form containing a UserControl with a \"Trace.WriteLine\" in its Load event is opened.","State":"open","Body":"### Environment\n\nVS Version 17.11.5\n\n### .NET version\n\nTested both in .NET 6 and .NET 8\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\n_No response_\n\n### Issue description\n\nWhen a UserControl has a Trace.WriteLine in the Load event, and this UserControl is added to a form, the following message is shown every time the form is opened.\n\n### Steps to reproduce\n\n- Create a new WinForms project\n- Add a UserControl\n- Write Trace.WriteLine(\"Hello from User Control\"); in the Load event of this UserControl\n- Add a Form\n- Add the previously created UserControl to the Form\n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/12360","RelatedDescription":"Open issue \"\"Windows Forms Trace Listener\" message box windows appear every time a form containing a UserControl with a \"Trace.WriteLine\" in its Load event is opened.\" (#12360)"},{"Id":"2601777905","IsPullRequest":false,"CreatedAt":"2024-10-21T08:33:07","Actor":"Philip-Wang01","Number":"12358","RawContent":null,"Title":"[HDPI] The \"document\" text in the “Generating Previews” dialog is truncated at >200% DPI","State":"open","Body":"### .NET version\n\n.NET SDK 10.0.100-alpha.1.24510.13\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nThis is a regression issue. It reproduces on .NET 9.0.200-preview.0.24520.3 and does not reproduce on .NET 8.0.\n\n### Issue description\n\nThe \"document\" text in the “Generating Previews” dialog is truncated at >200% DPI.\n\n![Image](https://github.com/user-attachments/assets/8e7db4a6-990e-4129-bb1b-eb982bd1c389)\n\n\n### Steps to reproduce\n\n1. Launch VS instance on the greater than 200% primary screen.\n2. Open the [Accessibility_Core_App.zip](https://github.com/user-attachments/files/17455998/Accessibility_Core_App.zip). (Or create an application that has a \"Generating Previews\" dialog) \n3.  TAB to \"Printing_Controls: Testing the controls under Printing Tab\" and hit ENTER key.\n4. \"Generating Previews\" popup will appear.\n5. Observe the \"document\" text in the “Generating Previews” dialog.","Url":"https://github.com/dotnet/winforms/issues/12358","RelatedDescription":"Open issue \"[HDPI] The \"document\" text in the “Generating Previews” dialog is truncated at >200% DPI\" (#12358)"},{"Id":"2601745596","IsPullRequest":true,"CreatedAt":"2024-10-21T08:19:12","Actor":"Olina-Zhang","Number":"12357","RawContent":null,"Title":"Add unit tests for DataGridViewComponentPropertyGridSite","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/10773\r\n\r\n## Proposed changes\r\n\r\n- Add unit test DataGridViewComponentPropertyGridSiteTests.cs for public methods of the DataGridViewComponentPropertyGridSite.\r\n- Enable nullability in DataGridViewComponentPropertyGridSiteTests.cs.\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12357)","Url":"https://github.com/dotnet/winforms/pull/12357","RelatedDescription":"Open PR \"Add unit tests for DataGridViewComponentPropertyGridSite\" (#12357)"},{"Id":"2601502630","IsPullRequest":true,"CreatedAt":"2024-10-21T06:39:23","Actor":"LeafShi1","Number":"12356","RawContent":null,"Title":"Removing the [RefreshProperties(RefreshProperties.All)] for AutoSize property","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12031\r\n\r\n\r\n## Proposed changes\r\n\r\n- Removing label `[RefreshProperties(RefreshProperties.All)]` on following properties\r\n   - `AutoSize`\r\n   - `Multiline`\r\n   - `Alignment`\r\n   - `Checked`\r\n   - `RowHeadersWidthSizeMode` of the DataGridView\r\n   - `ColumnHeadersHeightSizeMode` of the DataGridView\r\n   - `Frozen` of the DataGridViewColumn\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n-  The property \"Auto size\" drop-down menu option now works properly by toggling it using the up/down arrow keys\r\n\r\n## Regression? \r\n\r\n-  No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\nWhen we navigate to \"Auto Size\" dropdown using the up/down arrow keys, it is getting auto selected without hitting ENTER key\r\n\r\n![CoreResults](https://github.com/user-attachments/assets/b6cebc6a-d4b1-46d6-9b47-1c86e435d3ad)\r\n\r\n### After\r\nWhen we navigate to the \"Auto-Size\" drop-down menu using the up/down arrow keys, the selected menu item toggles normally\r\n![AfterChanges](https://github.com/user-attachments/assets/373258d7-95a2-4848-92ff-a4d7f336eb8c)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n-  Manually\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .net 10.0.0-alpha.1.24519.3\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12356)","Url":"https://github.com/dotnet/winforms/pull/12356","RelatedDescription":"Open PR \"Removing the [RefreshProperties(RefreshProperties.All)] for AutoSize property\" (#12356)"},{"Id":"2601478618","IsPullRequest":true,"CreatedAt":"2024-10-21T06:26:18","Actor":"Olina-Zhang","Number":"12355","RawContent":null,"Title":"Add unit tests for DataGridViewColumnDesigner","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/10773\r\n\r\n## Proposed changes\r\n\r\n- Add unit test DataGridViewColumnDesignerTests.cs for public methods of the DataGridViewColumnDesigner.\r\n- Enable nullability in DataGridViewColumnDesignerTests.cs.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12355)","Url":"https://github.com/dotnet/winforms/pull/12355","RelatedDescription":"Open PR \"Add unit tests for DataGridViewColumnDesigner\" (#12355)"},{"Id":"2600393244","IsPullRequest":true,"CreatedAt":"2024-10-20T12:36:02","Actor":"dotnet-maestro[bot]","Number":"12354","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20241019.3\r\n- **Date Produced**: October 19, 2024 9:56:50 PM UTC\r\n- **Commit**: dfc2b85a00f3baf5ac52d7615bf857e6217011c8\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.CodeDom**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.ComponentModel.Composition**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Data.Odbc**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Data.OleDb**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Diagnostics.EventLog**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.DirectoryServices**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Formats.Nrbf**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.IO.Hashing**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.IO.Packaging**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.IO.Ports**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Management**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Reflection.Context**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Resources.Extensions**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Runtime.Caching**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Security.Permissions**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.ServiceModel.Syndication**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Speech**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Text.Encodings.Web**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Text.Json**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Threading.AccessControl**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **System.Windows.Extensions**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-alpha.1.24517.1 to 10.0.0-alpha.1.24519.3][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/2830cf5d4b...dfc2b85a00\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12354)","Url":"https://github.com/dotnet/winforms/pull/12354","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#12354)"},{"Id":"2597555818","IsPullRequest":false,"CreatedAt":"2024-10-18T13:41:39","Actor":"kirsan31","Number":"12353","RawContent":null,"Title":"DetachContextMenuStrip pattern can lead to memory leaks","State":"open","Body":"### .NET version\n\nAll up to .Net9.\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo.\n\n### Issue description\n\nThis null out `ContextMenuStrip` pattern:\n```cs\nprivate void DetachContextMenuStrip(object? sender, EventArgs e) => ContextMenuStrip = null;\n\n// And ContextMenuStrip.Set` property:\nEventHandler disposedHandler = new(DetachContextMenuStrip);\n\nif (oldValue is not null)\n{\n    oldValue.Disposed -= disposedHandler;\n}\n\nif (value is not null)\n{\n    value.Disposed += disposedHandler;\n}\n```\n\nCan lead to memory leaks.\nUsing in 3 places:\n1. `Control` https://github.com/dotnet/winforms/blob/d1986025b2dafdcc3aeda0505da37e580bb3d82e/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs#L1232 More or less justified, since control in most cases lives either as long as the menu, or longer. But I didn't find a `ContextMenuStrip.Disposed -= disposedHandler;` code in `Control.Dispose`. So if `ContextMenuStrip` will outlive control (and user not null out `ContextMenuStrip` property) - we will have memory leak (control will remain in memory) at any case. \n2. `DataGridViewBand` and `DataGridViewCell` https://github.com/dotnet/winforms/blob/1f2d238fe75b40408de8d3cd6ca363df3615132f/src/System.Windows.Forms/src/System/Windows/Forms/Controls/DataGridView/DataGridViewBand.cs#L59 https://github.com/dotnet/winforms/blob/1f2d238fe75b40408de8d3cd6ca363df3615132f/src/System.Windows.Forms/src/System/Windows/Forms/Controls/DataGridView/DataGridViewCell.cs#L117 Here it probably does more harm than good, since DataGridView elements in most cases [live less than the menu and they never disposed](https://github.com/dotnet/winforms/issues/6859#issuecomment-1072103983).\n\nMy thots are:\n- At the very least we should add `ContextMenuStrip.Disposed -= disposedHandler;` code in `Control.Dispose`.\n- Ideally, to avoid making breaking changes we should use some implementation of weak events here. 🤔\n\n### Steps to reproduce\n[DetachContextMenuStripLeaks.zip](https://github.com/user-attachments/files/17444579/DetachContextMenuStripLeaks.zip)\n\n- Use context menu on the DataGridView from the repro app, compare snapshots before and after:\n- \"Refresh data\" will leak `DataGridView` elements.\n- Every \"Add Control\" + \"Remove Control\" will leak one `Control` class.","Url":"https://github.com/dotnet/winforms/issues/12353","RelatedDescription":"Open issue \"DetachContextMenuStrip pattern can lead to memory leaks\" (#12353)"},{"Id":"2597421603","IsPullRequest":true,"CreatedAt":"2024-10-18T12:41:17","Actor":"paul1956","Number":"12352","RawContent":null,"Title":"Improve test coverage for FileLogTestListner","State":"open","Body":"Improved code coverage for VB\r\n\r\n\r\n## Proposed changes\r\n- Add additional Code Coverage for FileLogTestListner\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n- Better testing\r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- None, Tests only\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12352)","Url":"https://github.com/dotnet/winforms/pull/12352","RelatedDescription":"Open PR \"Improve test coverage for FileLogTestListner\" (#12352)"},{"Id":"2597340560","IsPullRequest":true,"CreatedAt":"2024-10-18T12:41:16","Actor":"dotnet-maestro[bot]","Number":"12351","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20241017.1\r\n- **Date Produced**: October 17, 2024 11:58:22 AM UTC\r\n- **Commit**: 2830cf5d4b6c7853c6f187b8646ee7cfda7a9ae7\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.CodeDom**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.ComponentModel.Composition**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Data.Odbc**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Data.OleDb**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.DirectoryServices**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Formats.Nrbf**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.IO.Hashing**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.IO.Packaging**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.IO.Ports**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Management**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Reflection.Context**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Resources.Extensions**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Runtime.Caching**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Security.Permissions**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.ServiceModel.Syndication**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Speech**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Text.Encodings.Web**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Text.Json**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Threading.AccessControl**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **System.Windows.Extensions**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-alpha.1.24516.13 to 10.0.0-alpha.1.24517.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/ffc5e169be...2830cf5d4b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12351)","Url":"https://github.com/dotnet/winforms/pull/12351","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#12351)"},{"Id":"2597229011","IsPullRequest":false,"CreatedAt":"2024-10-18T11:08:38","Actor":"kirsan31","Number":"12350","RawContent":null,"Title":"[Multi-Monitor] PerMonitorV2 wrong scale controls with different Font properties","State":"open","Body":"For now (.NET9) WinForms on PerMonitorV2 scaling will scale only `Font` property of the control. And if control have other Font properties (and they set to non default font) - the control will be scaled wrong.\n\nAn _approximate_ list of such controls obtained by a quick search:\n\n- [ ] `DataGridView`\n- [ ] `ListView`\n- [ ] `TreeView`\n- [ ] `DateTimePicker`\n- [ ] `RichTextBox` also see https://github.com/dotnet/winforms/issues/5205","Url":"https://github.com/dotnet/winforms/issues/12350","RelatedDescription":"Open issue \"[Multi-Monitor] PerMonitorV2 wrong scale controls with different Font properties\" (#12350)"},{"Id":"2596206003","IsPullRequest":false,"CreatedAt":"2024-10-18T02:15:50","Actor":"Zheng-Li01","Number":"12349","RawContent":null,"Title":"There have different behaviors for cell border line between RightToLeft=Yes and RightToLeft=No modes for DataGridView control","State":"open","Body":"### .NET version\n\n.NET SDK 10.0.100-alpha.1.24510.13\n\n### Did it work in .NET Framework?\n\nNo, also can reproduce the issue\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, the issue can reproduce form .NET Core 3.1 to 10.0\n\n### Issue description\n\nThere have different behaviors for cell border line between RightToLeft=Yes and RightToLeft=No modes for DataGridView control\n![Image](https://github.com/user-attachments/assets/84491aec-e666-4ad5-ad4c-91babe29dd8e)\n\n\n### Steps to reproduce\n\n1. Create a .NET Winforms project with a DataGridView control.\n2. Add some columns for the dataGridView1 control.\n3. Set the RightToLeft property as Yes.\n4. Run the project, then observe the behavior for the cell border line by using Accessibility Insights tools","Url":"https://github.com/dotnet/winforms/issues/12349","RelatedDescription":"Open issue \"There have different behaviors for cell border line between RightToLeft=Yes and RightToLeft=No modes for DataGridView control\" (#12349)"},{"Id":"2592783922","IsPullRequest":true,"CreatedAt":"2024-10-17T22:47:25","Actor":"lonitra","Number":"12342","RawContent":null,"Title":"[release/8.0] Fix ConnectionPointCookie usages","State":"closed","Body":"Backport of #12333 to release/8.0\r\n\r\n## Customer Impact\r\nWhen creating a WebBrowser an InvalidCastException always occurs. Due to this, users will experience usability issues as WebBrowser will be broken and not receive any events. This regressed upon doing improvements to our interop code and was missed because this fails silently due to a try/catch. When constructing a WebBrowser, one of the objects that is created is a ConnectionPointCookie, which checks that an argument of the constructor is an instance of type IPropertyNotifySink. With the move to leveraging cswin32, this should've been updated to IPropertyNotifySink.Interface, but was missed. \r\n\r\n## Testing\r\nAdded regression tests to ensure WebBrowser is created successfully and events are received.\r\n\r\n## Risk\r\nLow. The change involves updating to check against the correct interface, IPropertyNotifySink.Interface. The change also alters the try/catch to surface the exception instead of silently failing during debug.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12342)","Url":"https://github.com/dotnet/winforms/pull/12342","RelatedDescription":"Closed or merged PR \"[release/8.0] Fix ConnectionPointCookie usages\" (#12342)"},{"Id":"2590438057","IsPullRequest":false,"CreatedAt":"2024-10-17T21:03:09","Actor":"dotnet-maestro-bot","Number":"12335","RawContent":null,"Title":"[dnceng-bot] Branch `winforms/release/9.0` can't be merged to Azdo internal branch","State":"closed","Body":"Branch [release/9.0](https://github.com/dotnet/winforms/commits/release/9.0/) in `dotnet/winforms` repo can't be mirrored from GitHub to Azure [internal/release/9.0](https://dev.azure.com/dnceng/internal/_git/dotnet-winforms?version=GBinternal%2Frelease%2F9.0&_a=history) via internal merge. \n\nThere are conflicting commits in the target branch.\nThe branch is configured to be mirrored via automated merge. \nThe situation is rare but normal. The target branch is expected to receive manual commits in the Azure DevOps clone, which could cause conflict.\n\nConflicts need to be **resolved to unblock the code flow**.\n\n- you can resolve the issue by resolving the conflict in the **target branch only**. \n    - Please make sure that the changes sensitive from security perspective are not published ahead of time to GitHub!\n- reverting the extra commits in the Azdo target branch.\n- checking the logs of the mirroring process in the [mirroring pipeline](https://dev.azure.com/dnceng/internal/_build?definitionId=1387).\n- you can disable the mirroring of the branch in the [configuration file](https://dev.azure.com/dnceng/internal/_git/dotnet-mirroring?path=/dnceng-subscriptions.jsonc).\n- you can ask @dotnet/dnceng for help or read the [documentation](https://dev.azure.com/dnceng/internal/_git/dotnet-mirroring?path=/README.md).\n\nPlease close this issue once the conflict is resolved.","Url":"https://github.com/dotnet/winforms/issues/12335","RelatedDescription":"Closed issue \"[dnceng-bot] Branch `winforms/release/9.0` can't be merged to Azdo internal branch\" (#12335)"},{"Id":"2592561153","IsPullRequest":true,"CreatedAt":"2024-10-17T20:59:01","Actor":"github-actions[bot]","Number":"12341","RawContent":null,"Title":"[release/9.0] Fix ConnectionPointCookie usages","State":"closed","Body":"Backport of #12333 to release/9.0\r\n\r\n/cc @lonitra @JeremyKuhne\r\n\r\n## Customer Impact\r\nWhen creating a WebBrowser an InvalidCastException always occurs. Due to this, users will experience usability issues as WebBrowser will be broken and not receive any events. This regressed upon doing improvements to our interop code and was missed because this fails silently due to a try/catch. When constructing a WebBrowser, one of the objects that is created is a ConnectionPointCookie, which checks that an argument of the constructor is an instance of type IPropertyNotifySink. With the move to leveraging cswin32, this should've been updated to IPropertyNotifySink.Interface, but was missed. \r\n\r\n## Testing\r\nAdded regression tests to ensure WebBrowser is created successfully and events are received.\r\n\r\n## Risk\r\nLow. The change involves updating to check against the correct interface, IPropertyNotifySink.Interface. The change also alters the try/catch to surface the exception instead of silently failing during debug.\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12341)","Url":"https://github.com/dotnet/winforms/pull/12341","RelatedDescription":"Closed or merged PR \"[release/9.0] Fix ConnectionPointCookie usages\" (#12341)"},{"Id":"2593113414","IsPullRequest":true,"CreatedAt":"2024-10-17T16:37:15","Actor":"dotnet-maestro[bot]","Number":"12345","RawContent":null,"Title":"[release/9.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:92989bf7-cdf9-483d-64c5-08dcbc356d11)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 92989bf7-cdf9-483d-64c5-08dcbc356d11\r\n- **Build**: 20241016.2\r\n- **Date Produced**: October 16, 2024 4:50:11 PM UTC\r\n- **Commit**: 3c393bbd85ae16ddddba20d0b75035b0c6f1a52d\r\n- **Branch**: refs/heads/release/9.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 9.0.0-beta.24509.3 to 9.0.0-beta.24516.2][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 9.0.0-beta.24509.3 to 9.0.0-beta.24516.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 9.0.0-beta.24509.3 to 9.0.0-beta.24516.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 9.0.0-beta.24509.3 to 9.0.0-beta.24516.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 9.0.0-beta.24509.3 to 9.0.0-beta.24516.2][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 9.0.0-beta.24509.3 to 9.0.0-beta.24516.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/05c72bb3c9...3c393bbd85\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:92989bf7-cdf9-483d-64c5-08dcbc356d11)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12345)","Url":"https://github.com/dotnet/winforms/pull/12345","RelatedDescription":"Closed or merged PR \"[release/9.0] Update dependencies from dotnet/arcade\" (#12345)"},{"Id":"2594517671","IsPullRequest":true,"CreatedAt":"2024-10-17T12:36:11","Actor":"dotnet-maestro[bot]","Number":"12348","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20241016.13\r\n- **Date Produced**: October 17, 2024 7:39:54 AM UTC\r\n- **Commit**: ffc5e169be0cd481ea623b11e4d1378fd8526d09\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.CodeDom**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.ComponentModel.Composition**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Data.Odbc**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Data.OleDb**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Diagnostics.EventLog**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.DirectoryServices**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Formats.Nrbf**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.IO.Hashing**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.IO.Packaging**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.IO.Ports**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Management**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Reflection.Context**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Resources.Extensions**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Runtime.Caching**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Security.Permissions**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.ServiceModel.Syndication**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Speech**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Text.Encodings.Web**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Text.Json**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Threading.AccessControl**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **System.Windows.Extensions**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-alpha.1.24515.17 to 10.0.0-alpha.1.24516.13][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/f72179a0f6...ffc5e169be\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12348)","Url":"https://github.com/dotnet/winforms/pull/12348","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#12348)"},{"Id":"2593711599","IsPullRequest":true,"CreatedAt":"2024-10-17T06:02:17","Actor":"Zheng-Li01","Number":"12347","RawContent":null,"Title":"Add code coverage for ToolStripComboBox","State":"open","Body":"related https://github.com/dotnet/winforms/issues/10453\r\n\r\nProposed changes\r\nAdd unit tests for ToolStripComboBox.cs to test its properties & methods & events\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12347)","Url":"https://github.com/dotnet/winforms/pull/12347","RelatedDescription":"Open PR \"Add code coverage for ToolStripComboBox\" (#12347)"},{"Id":"2593583178","IsPullRequest":true,"CreatedAt":"2024-10-17T05:17:22","Actor":"dotnet-maestro[bot]","Number":"12346","RawContent":null,"Title":"[release/9.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:417b4c89-9f23-476a-5003-08dcbc3022d8)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 417b4c89-9f23-476a-5003-08dcbc3022d8\r\n- **Build**: 20241016.10\r\n- **Date Produced**: October 17, 2024 4:05:58 AM UTC\r\n- **Commit**: d3981726bc8b0e179db50301daf9f22d42393096\r\n- **Branch**: refs/heads/release/9.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 9.0.0-rtm.24516.5 to 9.0.0-rtm.24516.10][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 9.0.0-rtm.24516.5 to 9.0.0-rtm.24516.10][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.CodeDom**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.ComponentModel.Composition**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Data.Odbc**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Data.OleDb**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Diagnostics.EventLog**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.DirectoryServices**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.DirectoryServices.Protocols**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Formats.Nrbf**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.IO.Hashing**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.IO.Packaging**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.IO.Ports**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Management**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Reflection.Context**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Resources.Extensions**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Runtime.Caching**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Runtime.Serialization.Formatters**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Security.Cryptography.Xml**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Security.Permissions**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.ServiceModel.Syndication**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Speech**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Text.Encoding.CodePages**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Text.Encodings.Web**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Text.Json**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Threading.AccessControl**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **System.Windows.Extensions**: [from 9.0.0-rtm.24516.5 to 9.0.0][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.9.0**: [from 9.0.0-rtm.24516.5 to 9.0.0-rtm.24516.10][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/9305d7f71d...d3981726bc\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:417b4c89-9f23-476a-5003-08dcbc3022d8)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12346)","Url":"https://github.com/dotnet/winforms/pull/12346","RelatedDescription":"Closed or merged PR \"[release/9.0] Update dependencies from dotnet/runtime\" (#12346)"},{"Id":"2593102676","IsPullRequest":true,"CreatedAt":"2024-10-16T21:52:27","Actor":"dotnet-maestro[bot]","Number":"12344","RawContent":null,"Title":"[release/8.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bcf5aa31-6777-442e-8e36-08db9e435944)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: bcf5aa31-6777-442e-8e36-08db9e435944\r\n- **Build**: 20241016.1\r\n- **Date Produced**: October 16, 2024 4:52:26 PM UTC\r\n- **Commit**: f7fb1fec01b91be69e4dcc5290a0bff3f28e214f\r\n- **Branch**: refs/heads/release/8.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.24508.1 to 8.0.0-beta.24516.1][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.24508.1 to 8.0.0-beta.24516.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.24508.1 to 8.0.0-beta.24516.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.24508.1 to 8.0.0-beta.24516.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.24508.1 to 8.0.0-beta.24516.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.24508.1 to 8.0.0-beta.24516.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/e5b13e0543...f7fb1fec01\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:bcf5aa31-6777-442e-8e36-08db9e435944)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12344)","Url":"https://github.com/dotnet/winforms/pull/12344","RelatedDescription":"Closed or merged PR \"[release/8.0] Update dependencies from dotnet/arcade\" (#12344)"},{"Id":"2593009092","IsPullRequest":true,"CreatedAt":"2024-10-16T21:19:35","Actor":"dotnet-maestro[bot]","Number":"12343","RawContent":null,"Title":"[release/9.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:417b4c89-9f23-476a-5003-08dcbc3022d8)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 417b4c89-9f23-476a-5003-08dcbc3022d8\r\n- **Build**: 20241016.5\r\n- **Date Produced**: October 16, 2024 8:14:16 PM UTC\r\n- **Commit**: 9305d7f71d73c1d1edeb2a06478c998e40deda8d\r\n- **Branch**: refs/heads/release/9.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.CodeDom**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.ComponentModel.Composition**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Data.Odbc**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Data.OleDb**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Diagnostics.EventLog**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.DirectoryServices**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.DirectoryServices.Protocols**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Formats.Nrbf**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.IO.Hashing**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.IO.Packaging**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.IO.Ports**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Management**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Reflection.Context**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Resources.Extensions**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Runtime.Caching**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Runtime.Serialization.Formatters**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Security.Cryptography.Xml**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Security.Permissions**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.ServiceModel.Syndication**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Speech**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Text.Encoding.CodePages**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Text.Encodings.Web**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Text.Json**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Threading.AccessControl**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **System.Windows.Extensions**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.9.0**: [from 9.0.0-rtm.24515.15 to 9.0.0-rtm.24516.5][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/b8f5d2538d...9305d7f71d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:417b4c89-9f23-476a-5003-08dcbc3022d8)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12343)","Url":"https://github.com/dotnet/winforms/pull/12343","RelatedDescription":"Closed or merged PR \"[release/9.0] Update dependencies from dotnet/runtime\" (#12343)"},{"Id":"2590910946","IsPullRequest":true,"CreatedAt":"2024-10-16T17:13:41","Actor":"dotnet-maestro[bot]","Number":"12336","RawContent":null,"Title":"[release/9.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:417b4c89-9f23-476a-5003-08dcbc3022d8)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 417b4c89-9f23-476a-5003-08dcbc3022d8\r\n- **Build**: 20241015.15\r\n- **Date Produced**: October 16, 2024 7:00:35 AM UTC\r\n- **Commit**: b8f5d2538d402d4714b4567af4b05b98aac94d2d\r\n- **Branch**: refs/heads/release/9.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.CodeDom**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.ComponentModel.Composition**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Data.Odbc**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Data.OleDb**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Diagnostics.EventLog**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.DirectoryServices**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.DirectoryServices.Protocols**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Formats.Nrbf**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.IO.Hashing**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.IO.Packaging**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.IO.Ports**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Management**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Reflection.Context**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Resources.Extensions**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Runtime.Caching**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Runtime.Serialization.Formatters**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Security.Cryptography.Xml**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Security.Permissions**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.ServiceModel.Syndication**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Speech**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Text.Encoding.CodePages**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Text.Encodings.Web**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Text.Json**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Threading.AccessControl**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **System.Windows.Extensions**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.9.0**: [from 9.0.0-rtm.24515.9 to 9.0.0-rtm.24515.15][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/cf1c582931...b8f5d2538d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:417b4c89-9f23-476a-5003-08dcbc3022d8)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12336)","Url":"https://github.com/dotnet/winforms/pull/12336","RelatedDescription":"Closed or merged PR \"[release/9.0] Update dependencies from dotnet/runtime\" (#12336)"},{"Id":"2591672104","IsPullRequest":true,"CreatedAt":"2024-10-16T12:37:29","Actor":"dotnet-maestro[bot]","Number":"12340","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20241015.17\r\n- **Date Produced**: October 16, 2024 7:16:31 AM UTC\r\n- **Commit**: f72179a0f60c2fc81dee944b8f081a020cd5f8ea\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.CodeDom**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.ComponentModel.Composition**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Data.Odbc**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Data.OleDb**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Diagnostics.EventLog**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.DirectoryServices**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Formats.Nrbf**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.IO.Hashing**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.IO.Packaging**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.IO.Ports**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Management**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Reflection.Context**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Resources.Extensions**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Runtime.Caching**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Security.Permissions**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.ServiceModel.Syndication**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Speech**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Text.Encodings.Web**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Text.Json**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Threading.AccessControl**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **System.Windows.Extensions**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-alpha.1.24514.25 to 10.0.0-alpha.1.24515.17][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/e1a14a8f28...f72179a0f6\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12340)","Url":"https://github.com/dotnet/winforms/pull/12340","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#12340)"},{"Id":"2591465873","IsPullRequest":false,"CreatedAt":"2024-10-16T10:47:38","Actor":"ollira","Number":"12339","RawContent":null,"Title":"Saving JPEG as PNG using System.Drawing.Bitmap does not work on Windows 11 24H2","State":"open","Body":"### .NET version\n\n.NET 8.0\n\n### Did it work in .NET Framework?\n\nNot tested/verified\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nApplications that read JPEG data and save as PNG using System.Drawing.Bitmap methods output incorrect PNG images on Windows 11 24H2.  Output images contain only the top-left quarters of the respective source image content, enlarged 2x. No errors are reported.\n\n### Steps to reproduce\n\nSample app code is attached as a Visual Studio 2022 solution: [WinFormsAppNet8.zip](https://github.com/user-attachments/files/17394030/WinFormsAppNet8.zip)\n\nusing System.Drawing;\nusing System.Drawing.Imaging;\n\n                var bitmap1 = new Bitmap(jpgPath);\n                var stream2 = new MemoryStream();\n                bitmap1.Save(stream2, ImageFormat.Png);\n                var bitmap2 = new Bitmap(stream2);\n\nResult on Windows 11 24H2: bitmap2 contains only the top-left quarter of bitmap1 content, enlarged 2x. \n","Url":"https://github.com/dotnet/winforms/issues/12339","RelatedDescription":"Open issue \"Saving JPEG as PNG using System.Drawing.Bitmap does not work on Windows 11 24H2\" (#12339)"},{"Id":"2590964969","IsPullRequest":false,"CreatedAt":"2024-10-16T07:45:01","Actor":"Syareel-Sukeri","Number":"12338","RawContent":null,"Title":"EXIF data misreading in WinForms VB application on Windows 11 24H2","State":"open","Body":"### .NET version\n\n.Net 9.0 SDK: 9.0.100-RC.2.24474.11\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, repro in .NET 8.0\n\n### Issue description\n\nIn .NET Core and Framework application, reading EXIF data from images on Windows 11 24H2 returns incorrect EXIF values. Specifically, when retrieving the orientation flag, the system returns the value 5091 instead of the expected 112. Additionally, when running the provided code, the message box with \"works\" appears as expected on Windows 11 23H2, indicating the correct EXIF orientation flag is found. However, on Windows 11 24H2, the message box does not appear, suggesting the EXIF orientation flag is not being correctly identified. The issue occurs despite using the same project and the same image file. This problem does not appear on earlier versions of Windows, such as Windows 11 23H2 or Windows 10, where the correct value of 112 is consistently returned. If this issue does not belong to the WinForms team, I kindly request your guidance on the appropriate team or area to which it should be forwarded for further investigation. Attached below are the screenshots displaying the results of the debug inspection in the provided code and video of the running process.\n\n**Windows 11 Enterprise 23H2**\n![Image](https://github.com/user-attachments/assets/2c1a4ed8-05d6-4572-b6a3-dc315e6092f1)\n\nhttps://github.com/user-attachments/assets/56e263e6-51f7-437b-bc7d-490000185e39\n\n\n\n**Windows 11 Enterprise 24H2**\n![Image](https://github.com/user-attachments/assets/2e320241-9336-42ed-afdb-2e662a937402)\n\nhttps://github.com/user-attachments/assets/6e4b3042-2b05-4e32-af4f-312b871449d0\n\n\n### Steps to reproduce\n\n1. Create a Winforms VB .NET application\n2. Add a PictureBox control to the form.\n3. Use the following code in the Form1_Load event:\n ```\n        Me.PictureBox1.Image = Bitmap.FromFile(\"C:\\Path\\To\\Your\\Image.jpg\")\n        For Each EXIF As System.Drawing.Imaging.PropertyItem In Me.PictureBox1.Image.PropertyItems\n          ' Value 112 is the orientation flag from the EXIF data\n          If EXIF.Id.ToString(\"X\") = \"112\" Then\n                MsgBox(\"works\")\n           End If\n         Next\n```\n4. Replace (\"C:\\Path\\To\\Your\\Image.jpg\") with the path to an image that contains EXIF data.\n5. Run the project on both Windows 11 23H2 and 24H2.\n\n### More Info\n\n1. The issue is from customer feedback ticket: [FeedbackTicket 2275675 Reading EXIF data from images fails since Windows 11 24H2 (visualstudio.com)](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2275675/?view=edit)","Url":"https://github.com/dotnet/winforms/issues/12338","RelatedDescription":"Open issue \"EXIF data misreading in WinForms VB application on Windows 11 24H2\" (#12338)"},{"Id":"2590920691","IsPullRequest":true,"CreatedAt":"2024-10-16T07:29:58","Actor":"MelonWang1","Number":"12337","RawContent":null,"Title":"Add unit tests for DesignerExtenders","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/10773\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add unit test DesignerExtendersTests.cs for public properties and method of the DesignerExtenders.\r\n- Enable nullability in DesignerExtenders.\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12337)","Url":"https://github.com/dotnet/winforms/pull/12337","RelatedDescription":"Open PR \"Add unit tests for DesignerExtenders\" (#12337)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-10-22T03:30:32.6548467Z","RunDurationInMilliseconds":523}