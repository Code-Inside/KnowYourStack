{"Data":{"GitHub":{"Issues":[{"Id":"1096702864","IsPullRequest":true,"CreatedAt":"2022-01-07T22:04:56","Actor":"dreddy-work","Number":"6482","RawContent":null,"Title":"[servicing6.0*] Fixing incorrect state set for State.Created flag on the Control ","State":"open","Body":"this fix is already in main here: https://github.com/dotnet/winforms/pull/6477\r\n\r\nThis PR is the result of regressions caused by #6114 and #2262.\r\n\r\n`State.Created` must be set only when `Handle` and the `Control `associated with it is created. Otherwise, recreating `Control `scenarios would be out of sync.  Changes in this PR is basically bringing the source code back to 6.0 GA state with respect to setting flag on `State.Created`.\r\n\r\nSetting `State.Created` when the `Handle `is created but the associated `Control `is not, have repercussions mentioned in #6464. We cache this state and check before creating the control. Incorrect state would skip this. ex: https://github.com/dotnet/winforms/blob/0d4484331f57113d3303275c6aa5717fcd4b6c25/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs#L5044\r\n\r\nfixes #6464 \r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6482)","Url":"https://github.com/dotnet/winforms/pull/6482","RelatedDescription":"Open PR \"[servicing6.0*] Fixing incorrect state set for State.Created flag on the Control \" (#6482)"},{"Id":"1095816836","IsPullRequest":true,"CreatedAt":"2022-01-07T21:49:36","Actor":"dreddy-work","Number":"6477","RawContent":null,"Title":"Fixing incorrect state set for State.Created flag on the Control","State":"closed","Body":"This PR is the result of regressions caused by #6114 and #2262.\r\n\r\n`State.Created` must be set only when `Handle` and the `Control `associated with it is created. Otherwise, recreating `Control `scenarios would be out of sync.  Changes in this PR is basically bringing the source code back to 6.0 GA state with respect to setting flag on `State.Created`.\r\n\r\nSetting `State.Created` when the `Handle `is created but the associated `Control `is not, have repercussions mentioned in #6464. We cache this state and check before creating the control. Incorrect state would skip this. ex: https://github.com/dotnet/winforms/blob/0d4484331f57113d3303275c6aa5717fcd4b6c25/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs#L5044\r\n\r\nfixes #6464 \r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6477)","Url":"https://github.com/dotnet/winforms/pull/6477","RelatedDescription":"Closed or merged PR \"Fixing incorrect state set for State.Created flag on the Control\" (#6477)"},{"Id":"1093639636","IsPullRequest":false,"CreatedAt":"2022-01-07T21:49:35","Actor":"rickbrew","Number":"6464","RawContent":null,"Title":"Catastrophic regression introduced in .NET 6.0.1 WinForms, completely broke Paint.NET v4.3.6","State":"closed","Body":"* .NET Core Version: 6.0.1\r\n\r\n**Problem description:**\r\nYesterday I rolled out a new update for Paint.NET, version 4.3.5. After quickly pushing out a hotfix (v4.3.6) for something that _I_ broke in the code, I then received numerous reports of another catastrophic breaking issue that rendered the app completely broken. \r\n\r\nAfter many hours it was finally determined that the culprit was having a certain app setting disabled (the default is enabled): \"Translucent windows\".\r\n![image](https://user-images.githubusercontent.com/10873410/148103394-a6757fac-930a-4ee5-ab33-24f3b6f0c2ca.png)\r\n\r\nI'm pretty sure this was caused by a bug (or bug \"fix\" ?) introduced in .NET 6.0.1, as it doesn't happen in the previous version of my app (v4.3.4) on .NET 6.0, I had very few changes in the new version, and the workaround I found suggests a change in behavior surrounding `Handle`, `IsHandleCreated`, `OnHandleCreated()`, `OnHandleDestroyed()`. I've since published a new update with that workaround fix applied and everything works fine.\r\n\r\nThere's a big discussion on my forum that details the issue, the pleas for help and rollbacks, the troubleshooting, the discovery of a workaround in the app, and subsequently a test build that saved the day: https://forums.getpaint.net/topic/119185-many-problems-with-436/\r\n\r\nHere are some highlights:\r\n\r\n- Dialogs always opening at the top-left of the screen, instead of centered or literally anywhere they're supposed to be\r\n\r\n- Truncated window size. This dialog should be 3-4x taller \r\n<img width=\"265\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10873410/148103524-15fb1d64-429e-4b6d-b7aa-58600e48b0b2.png\">\r\n\r\n- Progress dialogs that never complete and can't be closed, resulting in a soft hang that requires Task Manager -> End Process\r\n<img width=\"233\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10873410/148103556-a7fe4467-f990-4ebf-b6f6-42d95b392259.png\">\r\n\r\n- Completely scrambled dialog layout for things like File->New, Image->Resize, etc.\r\n<img width=\"207\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10873410/148103785-f9903aa8-118a-42b7-85ad-1b48c1f93d7d.png\"> \r\n\r\n**Here is the change in 6.0.1 that is _highly_ suspicious:** https://github.com/dotnet/winforms/pull/6114 cc @RussKie \r\n\r\nIn my code, I'm setting the window's opacity myself via `SetWindowLongPtrW()` and `SetLayeredWindowAttributes()`. This is because, way back with .NET 1.1 in 2004, there was some bug with `Form.Opacity` that I don't remember the details of. (I may be able to remove this code now, but like ... it ain't broke so don't fix it? maybe?) When \"Translucent windows\" is _disabled_, this ends up causing the window handle to be created in my `Form`s constructor (in a common base class that all other forms derive from), after `SuspendLayout()` and `InitializeComponent()`, and right before `ResumeLayout(false)`. I do consider this to be a bug in my code, but it should only be a performance bug, and it's been working fine for literally 18 years (Paint.NET 1.0 was originally released in May 2004 on .NET 1.1).\r\n\r\nMy fix, which is in the frantically released 4.3.7 update, is to first check `this.IsHandleCreated` before grabbing `this.Handle` to manually set the form's opacity (via `SetWindowLongPtrW()` and `SetLayeredWindowAttributes()`).\r\n\r\nThe behavior of the bug(s) seems to indicate some kind of disconnect between what WinForms thinks the handle is, and what handle Win32 is using, or maybe a disconnect between various parts of WinForms itself. Dialogs aren't closing properly, layout is all broken, every new dialog is at the top-left corner of the screen instead of centered, etc. The app will soft hang because modal progress dialogs don't close when they're supposed to. It's just a total disaster.\r\n\r\n**Expected behavior:**\r\nEverything works great. In reality, not even close :(\r\n\r\n**Minimal repro:**\r\nHere's a ZIP of the \"cursed\" Paint.NET v4.3.6 build, in portable (self-contained deployment) form: https://www.dotpdn.com/files/zip/test/paint.net.4.3.6.portable.x64.zip\r\n\r\nLaunch the app by double-clicking `paintdotnet.exe`. You should be able to launch things like File->New, Image->Resize, Layers->Rotate/Zoom, and run effects and adjustments and everything works fine.\r\n\r\nNext, go into Settings (gear icon at top right of main window), then uncheck the box \"Translucent windows\". This is supposed to only affect the floating tool forms, since they're the only forms that use `Opacity`. Anyway, close the window and then try all the things listed above (File->New, etc.). _Everything will be completely, catastrophically broken._\r\n\r\nI'm able to provide access to my solution/code for MSFT employees thanks to an NDA/license that @richlander and I set up a few years back. I can then easily show you which lines of code to change to make things broken/fixed.","Url":"https://github.com/dotnet/winforms/issues/6464","RelatedDescription":"Closed issue \"Catastrophic regression introduced in .NET 6.0.1 WinForms, completely broke Paint.NET v4.3.6\" (#6464)"},{"Id":"1096070224","IsPullRequest":true,"CreatedAt":"2022-01-07T18:19:22","Actor":"gpetrou","Number":"6479","RawContent":null,"Title":"Enable nullability in MouseHook and MouseHookObject","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in MouseHook and MouseHookObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6479)","Url":"https://github.com/dotnet/winforms/pull/6479","RelatedDescription":"Closed or merged PR \"Enable nullability in MouseHook and MouseHookObject\" (#6479)"},{"Id":"1096302685","IsPullRequest":true,"CreatedAt":"2022-01-07T18:14:53","Actor":"dotnet-maestro[bot]","Number":"6480","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220106.6\r\n- **Date Produced**: January 6, 2022 9:12:49 PM UTC\r\n- **Commit**: 34bc5b1611e13bd0ee6a9f38ab8524d2ee489be5\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22054.5 to 7.0.0-beta.22056.6][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22054.5 to 7.0.0-beta.22056.6][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22054.5 to 7.0.0-beta.22056.6][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22054.5 to 7.0.0-beta.22056.6][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22054.5 to 7.0.0-beta.22056.6][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22054.5 to 7.0.0-beta.22056.6][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/85188b0...34bc5b1\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6480)","Url":"https://github.com/dotnet/winforms/pull/6480","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6480)"},{"Id":"1096303333","IsPullRequest":true,"CreatedAt":"2022-01-07T13:44:37","Actor":"dotnet-maestro[bot]","Number":"6481","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220106.10\r\n- **Date Produced**: January 7, 2022 6:32:58 AM UTC\r\n- **Commit**: ef49cd03929b950d80d111621781728bef9cebf9\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.22055.11 to 7.0.0-alpha.1.22056.10][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/abb7df5...ef49cd0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6481)","Url":"https://github.com/dotnet/winforms/pull/6481","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6481)"},{"Id":"1095883206","IsPullRequest":false,"CreatedAt":"2022-01-07T01:13:13","Actor":"SoftCircuits","Number":"6478","RawContent":null,"Title":"What's new with async support for WinForms event handlers?","State":"open","Body":"I'm sure I'm not the first to ask this but is there anything new with regards to WinForms event handlers implementing `async`?\r\n\r\nBasically, since everything is basically done in event handlers with WinForms, the question is can I use `async/await` at all?\r\n\r\nLooks like the old workaround is to return `void` instead of `Task`. But I know this can cause problems.\r\n\r\nI know the WinForms engine was recently built for .NET 5.0/6.0. Was any thought given to this?\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6478","RelatedDescription":"Open issue \"What's new with async support for WinForms event handlers?\" (#6478)"},{"Id":"1095304576","IsPullRequest":true,"CreatedAt":"2022-01-06T17:55:20","Actor":"dotnet-maestro[bot]","Number":"6474","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220105.11\r\n- **Date Produced**: January 6, 2022 10:12:15 AM UTC\r\n- **Commit**: abb7df59eb4f8c813c07ddd6f46f94e59604577d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.22054.12 to 7.0.0-alpha.1.22055.11][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/8b9e708...abb7df5\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6474)","Url":"https://github.com/dotnet/winforms/pull/6474","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6474)"},{"Id":"1095506458","IsPullRequest":true,"CreatedAt":"2022-01-06T16:59:01","Actor":"gpetrou","Number":"6476","RawContent":null,"Title":"Enable nullability in classes that inherit from ToolStripDropDownItemAccessibleObject","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in classes that inherit from ToolStripDropDownItemAccessibleObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6476)","Url":"https://github.com/dotnet/winforms/pull/6476","RelatedDescription":"Open PR \"Enable nullability in classes that inherit from ToolStripDropDownItemAccessibleObject\" (#6476)"},{"Id":"1095191848","IsPullRequest":true,"CreatedAt":"2022-01-06T10:44:22","Actor":"gpetrou","Number":"6473","RawContent":null,"Title":"Enable nullability in ContainerInfo","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in ContainerInfo.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6473)","Url":"https://github.com/dotnet/winforms/pull/6473","RelatedDescription":"Open PR \"Enable nullability in ContainerInfo\" (#6473)"},{"Id":"1095176905","IsPullRequest":true,"CreatedAt":"2022-01-06T10:26:39","Actor":"gpetrou","Number":"6472","RawContent":null,"Title":"Enable nullability in Button and IButtonControl","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in Button and IButtonControl.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6472)","Url":"https://github.com/dotnet/winforms/pull/6472","RelatedDescription":"Open PR \"Enable nullability in Button and IButtonControl\" (#6472)"},{"Id":"1095123452","IsPullRequest":false,"CreatedAt":"2022-01-06T09:22:34","Actor":"Olina-Zhang","Number":"6471","RawContent":null,"Title":"[Accessibility] Screen reader announces incorrect columns of DataGridView table when some columns are hidden","State":"open","Body":"* .NET Core Version: \r\n7.0.100-alpha.1.21568.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes. Related AzDo bug: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1451446 \r\n\r\n**Minimal repro:**\r\n1. Open attached application:( a DataGridView with 6 columns, and **the last 2 columns' Visible property are false**)\r\n[WinFormsApp46.zip](https://github.com/dotnet/winforms/files/7820686/WinFormsApp46.zip)\r\n2. Build and run application\r\n3. Use narrator to read any of cell \r\n\r\n**Actual behavior:**\r\nNarrator announces counts for all columns regardless of their visibility status\r\n![image](https://user-images.githubusercontent.com/26474449/148359121-5f693728-7366-4259-90a2-30192e7c1878.png)\r\n\r\n**Expected behavior:**\r\nNarrator should announce the counts of visibility columns\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6471","RelatedDescription":"Open issue \"[Accessibility] Screen reader announces incorrect columns of DataGridView table when some columns are hidden\" (#6471)"},{"Id":"1095050114","IsPullRequest":true,"CreatedAt":"2022-01-06T07:37:40","Actor":"gpetrou","Number":"6470","RawContent":null,"Title":"Check if s_events is null in SendInput method of SendKeys","State":"open","Body":"## Proposed changes\r\n\r\n- Addresses post-merge feedback in https://github.com/dotnet/winforms/pull/6428.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6470)","Url":"https://github.com/dotnet/winforms/pull/6470","RelatedDescription":"Open PR \"Check if s_events is null in SendInput method of SendKeys\" (#6470)"},{"Id":"1095047505","IsPullRequest":true,"CreatedAt":"2022-01-06T07:33:02","Actor":"gpetrou","Number":"6469","RawContent":null,"Title":"Enable nullability in OSFeature","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in OSFeature.\r\n- Addresses post-merge feedback in https://github.com/dotnet/winforms/pull/6465.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6469)","Url":"https://github.com/dotnet/winforms/pull/6469","RelatedDescription":"Open PR \"Enable nullability in OSFeature\" (#6469)"},{"Id":"1095487029","IsPullRequest":false,"CreatedAt":"2022-01-06T06:34:32","Actor":"Junjun-zhao","Number":"6475","RawContent":null,"Title":"[dotnet-sdk-7.0.100-alpha.1.21568.2] WinForms Samples app launch failed with error System.ComponentModel.Win32Exception (1400): Error creating window handle","State":"open","Body":"### Description\n\nWhen testing WinForms Samples app against runtime dotnet-sdk-7.0.100-alpha.1.21568.2, it failed to launch with error  System.ComponentModel.Win32Exception\n\n### Reproduction Steps\n\n**App Source, App checking at**: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1458251 \r\n**Repro Steps for the Problematic App**:\r\nCopy Apps\\Winforms Samples from server to local machine.\r\nLaunch MatchingGame.exe from Winforms Samples\\matching-game\r\n\r\n**Minimal Repro steps:**\r\n1.Create a .NET 5.0 WinForm project.\r\n2.Install MetroFramework nuget package from nuget.org. \r\n3.Update the Form1.cs to inherit from MetroForm: \r\n```\r\npublic partial class Form1 : MetroForm\r\n    {\r\n        public Form1()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n    }\r\n```\r\n4.Build the project to generate WinFormApp1.exe\r\n5.Launch the exe on a machine that only dotnet-sdk-7.0.100-alpha.1.21568.2 installed\n\n### Expected behavior\n\nApp launch successful.\n\n### Actual behavior\n\nLaunch failed with error \n\n### Regression?\n\n**Verify Scenarios**:\r\n1). Windows10 RS5 x64+dotnet-sdk-7.0.100-alpha.1.21568.2:Fail\r\n2). Windows10 RS5 x64+dotnet-sdk-6.0.200-preview.21603.2: Pass\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n**Application Name**: WinForms Samples\r\n**OS**: Windows 10 RS5\r\n**CPU**: X64\r\n**.NET Build Number**: dotnet-sdk-7.0.100-alpha.1.21568.2\n\n### Other information\n\n1) Launch failed with MatchingGame.exe: \r\nIf we launch the dll with dotnet command from command prompt window, we will get below error message:\r\n```\r\nUnhandled exception. System.ComponentModel.Win32Exception (1400): Error creating window handle.\r\n   at System.Windows.Forms.NativeWindow.CreateHandle(CreateParams cp)\r\n   at System.Windows.Forms.Control.CreateHandle()\r\n   at System.Windows.Forms.Form.CreateHandle()\r\n   at System.Windows.Forms.Control.get_Handle()\r\n   at System.Windows.Forms.Control.SetVisibleCore(Boolean value)\r\n   at System.Windows.Forms.Form.SetVisibleCore(Boolean value)\r\n   at MetroFramework.Forms.MetroForm.SetVisibleCore(Boolean value)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(msoloop reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(msoloop reason, ApplicationContext context)\r\n   at MatchingGame.Program.Main() in C:\\.NETCoreUpgradeApps\\AppSources\\samples\\windowsforms\\matching-game\\net5-windows\\cs\\MatchingGame\\Program.cs:line 13\r\n```\r\nAnd we found this issue is caused by MetroFramework nuget package used in the project. But this package only one version.\r\nNuGet Gallery | MetroFramework 1.2.0.3\r\n\r\n2)Launch failed with error with minimal demo WinFormsApp1.exe: \r\n```\r\nApplication: WinFormsApp1.exe\r\nCoreCLR Version: 7.0.21.56701\r\n.NET Version: 7.0.0-alpha.1.21567.1\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.ComponentModel.Win32Exception (1400): Error creating window handle.\r\n   at System.Windows.Forms.NativeWindow.CreateHandle(CreateParams cp)\r\n   at System.Windows.Forms.Control.CreateHandle()\r\n   at System.Windows.Forms.Form.CreateHandle()\r\n   at System.Windows.Forms.Control.get_Handle()\r\n   at System.Windows.Forms.Control.SetVisibleCore(Boolean value)\r\n   at System.Windows.Forms.Form.SetVisibleCore(Boolean value)\r\n   at MetroFramework.Forms.MetroForm.SetVisibleCore(Boolean value)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(msoloop reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(msoloop reason, ApplicationContext context)\r\n   at WinFormsApp1.Program.Main() in E:\\App Source\\WinFormsApp1\\WinFormsApp1\\Program.cs:line 20\r\n```\r\nWhen using Windbg to launch the minimal demo WinFormsApp1.exe, we will get these:\r\n```\r\n(4f10.ba4): CLR exception - code e0434352 (first chance)\r\n(4f10.ba4): CLR exception - code e0434352 (!!! second chance !!!)\r\nCLR exception type: System.ComponentModel.Win32Exception\r\n    \"Error creating window handle.\"\r\n*** WARNING: Unable to verify checksum for C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.0-alpha.1.21567.1\\coreclr.dll\r\n*** WARNING: Unable to verify checksum for C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App\\7.0.0-alpha.1.21566.3\\System.Windows.Forms.dll\r\nKERNELBASE!RaiseException+0x69:\r\n00007fff`91c24f69 0f1f440000      nop     dword ptr [rax+rax]\r\n0:000> k\r\n*** WARNING: Unable to verify checksum for C:\\Appcompat\\applications\\net5.0-windows\\WinFormsApp1.dll\r\n*** WARNING: Unable to verify checksum for C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.0-alpha.1.21567.1\\hostpolicy.dll\r\n*** WARNING: Unable to verify checksum for C:\\Program Files\\dotnet\\host\\fxr\\7.0.0-alpha.1.21567.1\\hostfxr.dll\r\n*** WARNING: Unable to verify checksum for apphost.exe\r\n # Child-SP          RetAddr               Call Site\r\n00 000000c8`5a37dfe0 00007fff`34ceeeb5     KERNELBASE!RaiseException+0x69\r\n01 000000c8`5a37e0c0 00007fff`34dde3df     coreclr+0x4eeb5\r\n02 000000c8`5a37e1b0 00007fff`0cb26c39     coreclr!coreclr_initialize+0x653ff\r\n03 000000c8`5a37e310 00007fff`0c9c2637     System_Windows_Forms!\r\n04 000000c8`5a37e3f0 00007fff`0cac7c1b     System_Windows_Forms!\r\n05 000000c8`5a37e4b0 00007fff`0c9bd030     System_Windows_Forms!\r\n06 000000c8`5a37e520 00007fff`0c9cf6c6     System_Windows_Forms!\r\n07 000000c8`5a37e560 00007fff`0cac5d23     System_Windows_Forms!\r\n08 000000c8`5a37e650 00007ffe`d5264456     System_Windows_Forms!\r\n09 000000c8`5a37e6b0 00007fff`0cc78f99     MetroFramework!\r\n0a 000000c8`5a37e6f0 00007fff`0cc78e58     System_Windows_Forms!\r\n0b 000000c8`5a37e790 00007ffe`d524a093     System_Windows_Forms!\r\n0c 000000c8`5a37e7f0 00007fff`34e04cf3     WinFormsApp1!\r\n0d 000000c8`5a37e830 00007fff`34cb07b8     coreclr!MetaDataGetDispenser+0x12053\r\n0e 000000c8`5a37e870 00007fff`34d7c97b     coreclr+0x107b8\r\n0f 000000c8`5a37e9b0 00007fff`34d7c7fa     coreclr!coreclr_initialize+0x399b\r\n10 000000c8`5a37eae0 00007fff`34d7c4ad     coreclr!coreclr_initialize+0x381a\r\n11 000000c8`5a37eb90 00007fff`34d7bf76     coreclr!coreclr_initialize+0x34cd\r\n12 000000c8`5a37ef20 00007fff`34d78c92     coreclr!coreclr_initialize+0x2f96\r\n13 000000c8`5a37f090 00007fff`4fb5926b     coreclr!coreclr_execute_assembly+0xe2\r\n14 000000c8`5a37f130 00007fff`4fb5959c     hostpolicy+0x1926b\r\n15 000000c8`5a37f2d0 00007fff`4fb59f37     hostpolicy+0x1959c\r\n16 000000c8`5a37f310 00007fff`4fbbb539     hostpolicy!corehost_main+0x107\r\n17 000000c8`5a37f4c0 00007fff`4fbbe506     hostfxr!hostfxr_close+0xfb9\r\n18 000000c8`5a37f5c0 00007fff`4fbc0821     hostfxr!hostfxr_close+0x3f86\r\n19 000000c8`5a37f6c0 00007fff`4fbbeb62     hostfxr!hostfxr_close+0x62a1\r\n1a 000000c8`5a37f770 00007fff`4fbb82ab     hostfxr!hostfxr_close+0x45e2\r\n1b 000000c8`5a37f8b0 00007ff6`0acadc1c     hostfxr!hostfxr_main_startupinfo+0xab\r\n1c 000000c8`5a37f9b0 00007ff6`0acadf81     apphost+0xdc1c\r\n1d 000000c8`5a37fba0 00007ff6`0acaf4f8     apphost+0xdf81\r\n1e 000000c8`5a37fd10 00007fff`92447034     apphost+0xf4f8\r\n1f 000000c8`5a37fd50 00007fff`93f62651     KERNEL32!BaseThreadInitThunk+0x14\r\n20 00000000`00000000 00000000`00000000     0x0\r\n```\r\n\r\n@dotnet-actwx-bot @dotnet/compat","Url":"https://github.com/dotnet/winforms/issues/6475","RelatedDescription":"Open issue \"[dotnet-sdk-7.0.100-alpha.1.21568.2] WinForms Samples app launch failed with error System.ComponentModel.Win32Exception (1400): Error creating window handle\" (#6475)"},{"Id":"1094991245","IsPullRequest":false,"CreatedAt":"2022-01-06T05:49:06","Actor":"VinoWang01","Number":"6468","RawContent":null,"Title":"ListView will fire the GroupCollapsedStateChanged when focus is on the ListViewItem and user expands/collapses a ListViewGroup using the keyboard","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n.NET Core Version: \r\n\r\n-  .NET Core SDK: 7.0.0-alpha.1.21568.0\r\n\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\nHave you experienced this same bug with .NET Framework?: \r\n\r\n- No. `ListViewGroup.CollapsedState` was implemented in .NET Core 5.0 (#3155) and from (#5960)\r\n\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nWhen the user uses the right or left key to expand/collapse the `ListViewGroup`, the focus will be on the `ListViewItem` in the group. At this time, continue to use the left/right key to collapse/expand the `ListViewGroup`, and the `GroupCollapsedStateChanged` event will be triggered, but the state doesn't change correspondingly.\r\n![ExpandCollapsed](https://user-images.githubusercontent.com/90816462/148334551-8c9b1546-3ce3-4a87-852d-48c1619bcb44.gif)\r\n\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n**Expected behavior:**\r\nThe expected result should be one of the following:\r\n1. Continue to use the left/right key to collapse/expand the `ListViewGroup`, and the `GroupCollapsedStateChanged` event will be triggered and the state changed correspondingly.\r\n2. Continue to use the left/right key to collapse/expand the `ListViewGroup`, and the `GroupCollapsedStateChanged` event will not be triggered and the state doesn't change correspondingly.\r\n\r\n<!--\r\n    Provide details on expected behavior with screenshots/GIF, where ever possible.\r\n -->\r\n\r\n**Minimal repro:**\r\n1. Create a `Form` with a `ListView`.\r\n2. Add` ListViewGroups` to the `ListView` (`ListViewGroups` should have `CollapsedState = ListViewGroupCollapsedState.Expanded` or `CollapsedState = ListViewGroupCollapsedState.Collapsed`).\r\n3. Add `EventHandler` for `GroupCollapsedStateChanged`.\r\n4. Run the application.\r\n5. Expand/collapse a `ListViewGroup` using the keyboard.\r\n[ListViewGroupState.zip](https://github.com/dotnet/winforms/files/7819708/ListViewGroupState.zip)\r\n\r\n<!--\r\n    Provide step by step guide to repro this issue.  Incase repro steps are complex, It would be helpful if \r\n    you attach a GIF with repro actions. Attaching a sample app to repro the issue will help speed up the \r\n    resolution. \r\n -->\r\n\r\n**More Info:**\r\nThis issue can't reproduce when using mouse to expand/collapse `ListViewGroup`.","Url":"https://github.com/dotnet/winforms/issues/6468","RelatedDescription":"Open issue \"ListView will fire the GroupCollapsedStateChanged when focus is on the ListViewItem and user expands/collapses a ListViewGroup using the keyboard\" (#6468)"},{"Id":"1093722259","IsPullRequest":true,"CreatedAt":"2022-01-06T00:23:55","Actor":"gpetrou","Number":"6465","RawContent":null,"Title":"Enable nullability in FeatureSupport and IFeatureSupport","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in FeatureSupport and IFeatureSupport.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6465)","Url":"https://github.com/dotnet/winforms/pull/6465","RelatedDescription":"Closed or merged PR \"Enable nullability in FeatureSupport and IFeatureSupport\" (#6465)"},{"Id":"1093575003","IsPullRequest":true,"CreatedAt":"2022-01-06T00:22:49","Actor":"gpetrou","Number":"6463","RawContent":null,"Title":"Enable nullability in classes that inherit from ToolStripItemAccessibleObject","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in classes that inherit from ToolStripItemAccessibleObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6463)","Url":"https://github.com/dotnet/winforms/pull/6463","RelatedDescription":"Closed or merged PR \"Enable nullability in classes that inherit from ToolStripItemAccessibleObject\" (#6463)"},{"Id":"1092048989","IsPullRequest":true,"CreatedAt":"2022-01-06T00:22:25","Actor":"gpetrou","Number":"6455","RawContent":null,"Title":"Use generic list in ImageList","State":"closed","Body":"## Proposed changes\r\n\r\n- Use generic list in ImageList.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6455)","Url":"https://github.com/dotnet/winforms/pull/6455","RelatedDescription":"Closed or merged PR \"Use generic list in ImageList\" (#6455)"},{"Id":"1092054595","IsPullRequest":true,"CreatedAt":"2022-01-06T00:19:49","Actor":"gpetrou","Number":"6458","RawContent":null,"Title":"Enable nullability in UITypeEditor","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in UITypeEditor.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6458)","Url":"https://github.com/dotnet/winforms/pull/6458","RelatedDescription":"Closed or merged PR \"Enable nullability in UITypeEditor\" (#6458)"},{"Id":"1092047283","IsPullRequest":true,"CreatedAt":"2022-01-06T00:19:32","Actor":"gpetrou","Number":"6454","RawContent":null,"Title":"Use generic queue in Control","State":"closed","Body":"## Proposed changes\r\n\r\n- Use generic queue in Control.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6454)","Url":"https://github.com/dotnet/winforms/pull/6454","RelatedDescription":"Closed or merged PR \"Use generic queue in Control\" (#6454)"},{"Id":"1094334644","IsPullRequest":true,"CreatedAt":"2022-01-05T13:45:25","Actor":"dotnet-maestro[bot]","Number":"6467","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220104.12\r\n- **Date Produced**: January 5, 2022 8:36:57 AM UTC\r\n- **Commit**: 8b9e708b9a12e58af13a2bec4003a2210bbeb437\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.22053.15 to 7.0.0-alpha.1.22054.12][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/7172c68...8b9e708\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6467)","Url":"https://github.com/dotnet/winforms/pull/6467","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6467)"},{"Id":"1094334068","IsPullRequest":true,"CreatedAt":"2022-01-05T13:44:33","Actor":"dotnet-maestro[bot]","Number":"6466","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220104.5\r\n- **Date Produced**: January 4, 2022 6:27:59 PM UTC\r\n- **Commit**: 85188b0c348f3f7f8206f441ec2ee2da6dbb06fe\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22053.2 to 7.0.0-beta.22054.5][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22053.2 to 7.0.0-beta.22054.5][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22053.2 to 7.0.0-beta.22054.5][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22053.2 to 7.0.0-beta.22054.5][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22053.2 to 7.0.0-beta.22054.5][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22053.2 to 7.0.0-beta.22054.5][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/a0f6d24...85188b0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6466)","Url":"https://github.com/dotnet/winforms/pull/6466","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6466)"},{"Id":"1092053237","IsPullRequest":true,"CreatedAt":"2022-01-04T17:59:26","Actor":"gpetrou","Number":"6457","RawContent":null,"Title":"Enable nullability in ListViewItemStateImageIndexConverter","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in ListViewItemStateImageIndexConverter.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6457)","Url":"https://github.com/dotnet/winforms/pull/6457","RelatedDescription":"Closed or merged PR \"Enable nullability in ListViewItemStateImageIndexConverter\" (#6457)"},{"Id":"1092051884","IsPullRequest":true,"CreatedAt":"2022-01-04T17:59:10","Actor":"gpetrou","Number":"6456","RawContent":null,"Title":"Enable nullability in LinkConverter","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in LinkConverter.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6456)","Url":"https://github.com/dotnet/winforms/pull/6456","RelatedDescription":"Closed or merged PR \"Enable nullability in LinkConverter\" (#6456)"},{"Id":"1093340208","IsPullRequest":true,"CreatedAt":"2022-01-04T13:50:48","Actor":"dotnet-maestro[bot]","Number":"6462","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220103.15\r\n- **Date Produced**: January 4, 2022 8:21:04 AM UTC\r\n- **Commit**: 7172c68fc2afe91625deadac9c6d9427f19d84a8\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.22052.8 to 7.0.0-alpha.1.22053.15][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/c8f3b36...7172c68\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6462)","Url":"https://github.com/dotnet/winforms/pull/6462","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6462)"},{"Id":"1093339508","IsPullRequest":true,"CreatedAt":"2022-01-04T13:49:51","Actor":"dotnet-maestro[bot]","Number":"6461","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220103.2\r\n- **Date Produced**: January 3, 2022 2:36:19 PM UTC\r\n- **Commit**: a0f6d2432ce3d1bb30ee747bb534f477c75fd667\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.21630.1 to 7.0.0-beta.22053.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.21630.1 to 7.0.0-beta.22053.2][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.21630.1 to 7.0.0-beta.22053.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.21630.1 to 7.0.0-beta.22053.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.21630.1 to 7.0.0-beta.22053.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.21630.1 to 7.0.0-beta.22053.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/12ba11c...a0f6d24\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6461)","Url":"https://github.com/dotnet/winforms/pull/6461","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6461)"},{"Id":"1092017175","IsPullRequest":true,"CreatedAt":"2022-01-03T21:51:56","Actor":"dotnet-maestro[bot]","Number":"6452","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220102.8\r\n- **Date Produced**: January 3, 2022 8:36:12 AM UTC\r\n- **Commit**: c8f3b36d6d5da74333c6755ccd5687127bcd9905\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21631.1 to 7.0.0-alpha.1.22052.8][2]\r\n\r\n[2]: https://github.com/dotnet/runtime/compare/58663f7...c8f3b36\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6452)\r\n","Url":"https://github.com/dotnet/winforms/pull/6452","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6452)"},{"Id":"1092038578","IsPullRequest":false,"CreatedAt":"2022-01-03T13:52:43","Actor":"RuoYear","Number":"6453","RawContent":null,"Title":"Why does the UI designer need to scan the output directory? Cause it to keep looping \"loading designer you can continue working\"","State":"closed","Body":"* .NET Core Version: .NET 6.0.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: NO\r\n\r\nHello, I am using visual studio 2022, and I upgraded my previous .NET Framework project to .NET 6, but when I use the designer, it just keeps prompting \"The designer is loading, you can use the designer in the background Continue to work while loading\".\r\nBut when I rebuild a similar project step by step, it can work normally for a while, but most of the time it still stays at \"Loading\", and only \"Creating VSCodeDomDesignerLoader\" is displayed in the output log.\r\n\r\nWhen I found the location where the log can be output in the options, I discovered why it scans the output file directory?\r\nI placed the output directory in a separate partition due to other requirements. As a result, it scanned \"System Volume Information\" and was denied access. Why did the designer do this when opening it?\r\nWhen I found this question and changed the output directory to a subfolder again, the designer worked. How to adjust the designer so that it will not affect the operation of the target folder in the root directory of the partition?\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6453","RelatedDescription":"Closed issue \"Why does the UI designer need to scan the output directory? Cause it to keep looping \"loading designer you can continue working\"\" (#6453)"},{"Id":"1092086744","IsPullRequest":false,"CreatedAt":"2022-01-02T19:39:36","Actor":"KlausLoeffelmann","Number":"6459","RawContent":null,"Title":"Let's consider adding a faster, modern rendering engine for custom 2D and Text rendering like Skia or Direct2D/DirectWrite","State":"open","Body":"Since this topic is one of my personal favorite topics, which I deal with as a hobby in my spare time, I have been experimenting with GDI+, DirectWrite/Direct2D and SkiaSharp a bit lately. While we've made significant improvements around GDI/GDI+ memory consumptions and efficiency, we hear more and more feedback that the WinForms community finds GDI+ too slow in its (rendering) core for modernizing older Framework Apps and moving them to .NET. And it makes sense: Customer's use more and more 4K monitors (often more than 1), and GDIPlus takes much longer time to render bigger area.\r\n\r\nSo, here are a couple of thoughts as a guideline for questions and discussions, which I think would help to form a better picture around this topic.\r\n\r\n* Do we need to consider this at all or does GDI/GDI+ suffice after all for the custom drawing things we want to do in WinForms?\r\n* **DirectX/Direct2D** is native to Window. Is that good or bad, is this a pro or a con argument?\r\n* Same question for **Skia(Sharp)** which is NOT native to Windows. But since it's the render engine for Google's chrome, it's been used by Edge browser indirectly. \r\n* Skia has an extremely easy way to render into PDF, which is an extreme plus for the typical WinForms (LOB Apps) audience. I am not aware that DirectX/Direct2D allows this equally easy.\r\n* DirectX/Direct2D is the base for rendering WinUI. Should we see XAML-Islands for WinUi 3 in the future (and I am not at all implying that we won't, just to be clear!), there might be easier migration options for content rendering going forward.\r\n* Skia would introduce external dependencies, which we might not want or like. Or do we? For this, the next issue might be relevant:\r\n* Is this (no matter what technology we would go for) something which we want to have as an add-on or deeper integrated into WinForms? Would we like to - for example - have a control like the DataGridView, which is completely rendered by GDI/GDI+ and not a wrapper around some Win32 control, refactored so it would be rendered by that modern rendering engine?\r\n* Are there any additional rendering engine options we should include in the discussion?\r\n \r\nHere is a good document to get the essentials of Skia in the context of GDI/GDI+:\r\nhttps://www.chromium.org/developers/design-documents/graphics-and-skia\r\n\r\nHere are the (visual) results of a .NET 6 app I wrote and experimented with. \r\n\r\nDISCLAIMER: Please note, that I did not use the existing SkiaSharp WinForms controls, since they pull in .NET Framework dependencies and the OpenGL version of the Skia WinForms control is based on a rather old (Framework) version of the OpenTK's GLControl. While reimplementing the SkiaSharp controls based on the latest version of OpenTK (5.n) works for most of the things I tried reasonably well, I had TONS of problems when rendering circles, ellipses (which are internally seem to be converted into arc-based paths, which I think is the problem) and the alike and could only make those work on one of my several test machines, and also only with a BIG memory leak.\r\n\r\nThis demo just animates a few hundred Circles in different (transparent) colors and bounces them off the boundaries:\r\n\r\nThis is GDI+:\r\n![SkiaDemoGdiPlus_Small](https://user-images.githubusercontent.com/9663150/147887398-3e47e807-106b-4ddb-856b-40ec0c8214aa.gif)\r\n\r\nThis is Skia:\r\nhttps://user-images.githubusercontent.com/9663150/147891114-bf532588-a87b-4436-a7e3-fc861272191c.mp4\r\n\r\nThis is Skia based on OpenGL:\r\nhttps://user-images.githubusercontent.com/9663150/147890994-74c26c8a-4a33-496c-a125-85f8c2c9f2fc.mp4\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6459","RelatedDescription":"Open issue \"Let's consider adding a faster, modern rendering engine for custom 2D and Text rendering like Skia or Direct2D/DirectWrite\" (#6459)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-01-08T05:30:33.0946468Z","RunDurationInMilliseconds":559}