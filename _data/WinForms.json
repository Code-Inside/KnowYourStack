{"Data":{"GitHub":{"Issues":[{"Id":"1162170305","IsPullRequest":false,"CreatedAt":"2022-03-08T03:19:06","Actor":"roland5572","Number":"6807","RawContent":null,"Title":"TabPage.Text causes control to flicker when called frequently","State":"open","Body":"TabPage.Text causes control to flicker when called frequently\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.tabpage.text\r\n\r\nTest Code: C# / .net 6.0 / Visual Studio 2022\r\nThe problem also occurs in .net framework 4.8.\r\n\r\n```\r\nnamespace TabPageFlickerTest\r\n{\r\n    internal static class Program\r\n    {\r\n        [STAThread]\r\n        static void Main()\r\n        {\r\n            ApplicationConfiguration.Initialize();\r\n\r\n            Application.Run(CreateForm());\r\n        }\r\n\r\n        private static long _loadCount = 0;\r\n\r\n        private static TabPage _tabPage;\r\n        private static Button _button;\r\n\r\n        private static Form CreateForm()\r\n        {\r\n            var frm = new Form()\r\n            {\r\n                Size = new Size(800, 600),\r\n                StartPosition = FormStartPosition.CenterScreen,\r\n\r\n                Padding = new Padding(10),\r\n            };\r\n\r\n            var button = _button = new Button()\r\n            {\r\n                Size = new Size(200, 60),\r\n                Location = new Point(20, 20),\r\n\r\n                Text = GetTabPageText(),\r\n            };\r\n\r\n            var tab = new TabControl()\r\n            {\r\n                Dock = DockStyle.Fill,\r\n            };\r\n\r\n            var page = _tabPage = new TabPage()\r\n            {\r\n                Text = GetTabPageText(),\r\n            };\r\n\r\n            page.Controls.Add(button);\r\n\r\n            tab.TabPages.Add(page);\r\n            frm.Controls.Add(tab);\r\n\r\n            frm.ActiveControl = button;\r\n\r\n            frm.Load += (object sender, EventArgs e) => frm.BeginInvoke(() =>\r\n            {\r\n                new Thread(LoadFiles).Start();\r\n            });\r\n\r\n            return frm;\r\n        }\r\n\r\n        private static void LoadFiles()\r\n        {\r\n            for (int n = 0; n < 1000000; n++)\r\n            {\r\n                //Use the Sleep statement instead of the time it takes to load files.\r\n                Thread.Sleep(100);\r\n\r\n                _loadCount++;\r\n\r\n                _tabPage.Invoke(() =>\r\n                {\r\n                    _tabPage.Text = GetTabPageText();\r\n                    _button.Text = GetTabPageText();\r\n                });\r\n            }\r\n        }\r\n\r\n        private static string GetTabPageText()\r\n        {\r\n            return \"Number of loaded files: \" + _loadCount;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nTest Result:\r\n\r\n![001](https://user-images.githubusercontent.com/88176616/157159506-d9d5433f-db6a-4ac2-bf58-e02b7dce92d4.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6807","RelatedDescription":"Open issue \"TabPage.Text causes control to flicker when called frequently\" (#6807)"},{"Id":"1158767936","IsPullRequest":false,"CreatedAt":"2022-03-07T19:18:17","Actor":"GrabYourPitchforks","Number":"6786","RawContent":null,"Title":"SDL signoff requirements - please enable additional C/C++ compiler warnings","State":"closed","Body":"> __Please prioritize this work.__ Depending on the size of the code base, there could be hundreds or thousands of warnings which require addressing.\r\n> \r\n> __This work must be completed before RC1 snap.__\r\n\r\nRecent SDL changes require that we enable additional compiler warnings across our C/C++ projects. The requirements are:\r\n\r\n* Compile with warning level 3 or higher. These warnings do not have to be fixed, but they must at least be triaged.\r\n* Enable the following additional warnings, which __must__ be fixed if they occur:\r\n  * __C4018__ - 'expression' : signed/unsigned mismatch\r\n  * __C4055__ - 'conversion' : from data pointer 'type1' to function pointer 'type2'\r\n  * __C4146__ - unary minus operator applied to unsigned type, result still unsigned\r\n  * __C4242__ - 'identifier' : conversion from 'type1' to 'type2', possible loss of data\r\n  * __C4244__ - 'conversion' conversion from 'type1' to 'type2', possible loss of data\r\n  * __C4267__ - 'var' : conversion from 'size_t' to 'type', possible loss of data\r\n  * __C4302__ - 'conversion' : truncation from 'type 1' to 'type 2'\r\n  * __C4308__ - negative integral constant converted to unsigned type\r\n  * __C4509__ - nonstandard extension used: 'function' uses SEH and 'object' has destructor\r\n  * __C4510__ - 'class' : default constructor could not be generated\r\n  * __C4532__ - 'continue' : jump out of __finally/finally block has undefined behavior during termination handling\r\n  * __C4533__ - initialization of 'variable' is skipped by 'instruction'\r\n  * __C4610__ - object 'class' can never be instantiated - user-defined constructor required\r\n  * __C4611__ - interaction between 'function' and C++ object destruction is non-portable\r\n  * __C4700__ - uninitialized local variable 'name' used\r\n  * __C4701__ - Potentially uninitialized local variable 'name' used\r\n  * __C4703__ - Potentially uninitialized local pointer variable 'name' used\r\n  * __C4789__ - destination of memory copy is too small\r\n  * __C4995__ - 'function': name was marked as #pragma deprecated\r\n  * __C4996__ - 'function': was declared deprecated also 'std::': Function call with parameters that are potentially unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'\r\n\r\nSee [the SDL guidelines](https://liquid.microsoft.com/Web/Object/Read/ms.security/Requirements/Microsoft.Security.SystemsADM.10086) (MSFT internal only) for further information.\r\n\r\nTo make auditing code easier prior to signoff and release, **please include the string _Microsoft.Security.SystemsADM.10086_** somewhere in the vcxproj / cmake / whatever file which is responsible for C/C++ compilation where all of these flags are defined. That gives the code auditors a target string to search against and validate that the proper warnings are enabled. See below an example of how to do this in a cmake file.\r\n\r\n```cmake\r\n# [[! Microsoft.Security.SystemsADM.10086 !]] - SQL required warnings\r\nadd_compile_options($<$<COMPILE_LANGUAGE:C,CXX>:/W3>) # warning level 3\r\nadd_compile_options($<$<COMPILE_LANGUAGE:C,CXX>:/WX>) # treat warnings as errors\r\nadd_compile_options($<$<COMPILE_LANGUAGE:C,CXX>:/we4018>) # 'expression' : signed/unsigned mismatch\r\nadd_compile_options($<$<COMPILE_LANGUAGE:C,CXX>:/we4055>) # 'conversion' : from data pointer 'type1' to function pointer 'type2'\r\n# ... and so on ...\r\n```\r\n\r\nOnce the work is finished, or if there is no work to perform, please feel free to close this issue.\r\n\r\nThanks for your assistance!\r\n\r\n## Quick FAQ\r\n\r\n__What code is bound to this requirement?__\r\n\r\nThis affects only _production_ code. Production code is generally defined as code which ships as part of the product and which runs on customer machines or which manages infrastructure, such as our build labs. Unit and functional test projects are not considered production code.\r\n\r\n__Does this need to be backported?__\r\n\r\nNo backporting plans at this time. If actual bugs are found during this process, individual product teams have discretion to selectively backport into the next downlevel servicing vehicle.\r\n\r\n__What about forked third-party code?__\r\n\r\nThis requirement applies to all code that MSFT builds from source, regardless of its provenance. Ideally any changes that we make to local forked copies can be submitted upstream as a PR so that the wider ecosystem can enjoy their benefits.\r\n\r\nIf this is impractical, exceptions to this requirement can be sought on an as-needed basis. However, exceptions are: (a) not guaranteed to be granted; and (b) time-constrained. The exception process is not intended to provide a permanent deferral of this work. Please contact the _fxsecurity_ alias if an exception is needed.\r\n\r\n__What about C# and other languages?__\r\n\r\nThis requirement only affects C/C++ code. Requirements for other languages will be filed as separate issues.","Url":"https://github.com/dotnet/winforms/issues/6786","RelatedDescription":"Closed issue \"SDL signoff requirements - please enable additional C/C++ compiler warnings\" (#6786)"},{"Id":"1161695034","IsPullRequest":true,"CreatedAt":"2022-03-07T17:13:34","Actor":"gpetrou","Number":"6806","RawContent":null,"Title":"Remove Image null check before calling ImageAnimator.UpdateFrames","State":"open","Body":"## Proposed changes\r\n\r\n- Remove Image null check before calling ImageAnimator.UpdateFrames\r\n- Reflects the changes from https://github.com/dotnet/runtime/pull/65949.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6806)","Url":"https://github.com/dotnet/winforms/pull/6806","RelatedDescription":"Open PR \"Remove Image null check before calling ImageAnimator.UpdateFrames\" (#6806)"},{"Id":"1161400475","IsPullRequest":true,"CreatedAt":"2022-03-07T13:47:08","Actor":"dotnet-maestro[bot]","Number":"6805","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220307.1\r\n- **Date Produced**: March 7, 2022 11:43:33 AM UTC\r\n- **Commit**: 7698a9a80c5f6270aa1122d79ce419c7b03f2498\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22155.4 to 7.0.0-preview.3.22157.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/b463b16...7698a9a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6805)","Url":"https://github.com/dotnet/winforms/pull/6805","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6805)"},{"Id":"1161399323","IsPullRequest":true,"CreatedAt":"2022-03-07T13:45:58","Actor":"dotnet-maestro[bot]","Number":"6804","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220304.3\r\n- **Date Produced**: March 4, 2022 11:44:49 PM UTC\r\n- **Commit**: 8ed47fcae6a5d2d40483ed81858f4ede8eab7ae2\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22153.1 to 7.0.0-beta.22154.3][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22153.1 to 7.0.0-beta.22154.3][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22153.1 to 7.0.0-beta.22154.3][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22153.1 to 7.0.0-beta.22154.3][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22153.1 to 7.0.0-beta.22154.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22153.1 to 7.0.0-beta.22154.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/a19c29a...8ed47fc\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6804)","Url":"https://github.com/dotnet/winforms/pull/6804","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6804)"},{"Id":"1161040518","IsPullRequest":true,"CreatedAt":"2022-03-07T08:07:43","Actor":"gpetrou","Number":"6803","RawContent":null,"Title":"Enable nullability in PrintControllerWithStatusDialog","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in PrintControllerWithStatusDialog.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6803)","Url":"https://github.com/dotnet/winforms/pull/6803","RelatedDescription":"Open PR \"Enable nullability in PrintControllerWithStatusDialog\" (#6803)"},{"Id":"1159327152","IsPullRequest":true,"CreatedAt":"2022-03-07T04:49:18","Actor":"gpetrou","Number":"6791","RawContent":null,"Title":"Enable nullability in PrintPreviewControl","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in PrintPreviewControl.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6791)","Url":"https://github.com/dotnet/winforms/pull/6791","RelatedDescription":"Closed or merged PR \"Enable nullability in PrintPreviewControl\" (#6791)"},{"Id":"1160547662","IsPullRequest":true,"CreatedAt":"2022-03-07T03:15:19","Actor":"gpetrou","Number":"6799","RawContent":null,"Title":"Enable nullability in Form.ControlCollection","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in Form.ControlCollection.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6799)","Url":"https://github.com/dotnet/winforms/pull/6799","RelatedDescription":"Closed or merged PR \"Enable nullability in Form.ControlCollection\" (#6799)"},{"Id":"1159314151","IsPullRequest":true,"CreatedAt":"2022-03-07T03:13:22","Actor":"gpetrou","Number":"6790","RawContent":null,"Title":"Enable nullability in PropertyGridAccessibleObject","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in PropertyGridAccessibleObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6790)","Url":"https://github.com/dotnet/winforms/pull/6790","RelatedDescription":"Closed or merged PR \"Enable nullability in PropertyGridAccessibleObject\" (#6790)"},{"Id":"1159338582","IsPullRequest":true,"CreatedAt":"2022-03-07T03:12:40","Actor":"gpetrou","Number":"6792","RawContent":null,"Title":"Enable nullability in AutoCompleteDropDownFinder","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in AutoCompleteDropDownFinder\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6792)","Url":"https://github.com/dotnet/winforms/pull/6792","RelatedDescription":"Closed or merged PR \"Enable nullability in AutoCompleteDropDownFinder\" (#6792)"},{"Id":"1159616597","IsPullRequest":false,"CreatedAt":"2022-03-07T03:09:31","Actor":"AngeloCresta","Number":"6795","RawContent":null,"Title":"Split Container - Object name: 'Disposed 'Cursor' can no longer be used.'.","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\nC:\\Users\\Angelo>dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.200\r\n Commit:    4c30de7899\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22567\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.200\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.2\r\n  Commit:  839cdfb0ec\r\n\r\n.NET SDKs installed:\r\n  3.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.200 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n* Visual Studio Version: \r\nMicrosoft Visual Studio Community 2022 (64-bit) - Current\r\nVersion 17.1.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo \r\n\r\n**Problem description:**\r\nAt design time, when overing with the mouse the split container I receive:\r\nSystem.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'Disposed 'Cursor' can no longer be used.'.\r\n   at System.Windows.Forms.Cursor.get_Handle()\r\n   at Interop.User32.SetCursor(IHandle hCursor)\r\n   at System.Windows.Forms.Control.WmSetCursor(Message& m)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at Microsoft.DotNet.DesignTools.Designers.Behaviors.BehaviorService.AdornerWindow.WndProc(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)\r\n\r\n![image](https://user-images.githubusercontent.com/12256319/156766559-1e74f5ff-abad-46f0-8932-88f8f3529c56.png)\r\n\r\nat runtime:\r\n\r\n![image](https://user-images.githubusercontent.com/12256319/156766629-986374f0-b0ab-450b-ad16-3f15fc735fc7.png)\r\n\r\n\r\n**Expected behavior:**\r\nNo error\r\n\r\n**Minimal repro:**\r\n\r\n[WinFormsApp1.zip](https://github.com/dotnet/winforms/files/8185974/WinFormsApp1.zip)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6795","RelatedDescription":"Closed issue \"Split Container - Object name: 'Disposed 'Cursor' can no longer be used.'.\" (#6795)"},{"Id":"1160567619","IsPullRequest":true,"CreatedAt":"2022-03-07T03:06:12","Actor":"gpetrou","Number":"6800","RawContent":null,"Title":"Enable nullability in UpDownButtons","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in UpDownButtons.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6800)","Url":"https://github.com/dotnet/winforms/pull/6800","RelatedDescription":"Closed or merged PR \"Enable nullability in UpDownButtons\" (#6800)"},{"Id":"1160834383","IsPullRequest":true,"CreatedAt":"2022-03-07T02:51:24","Actor":"RussKie","Number":"6802","RawContent":null,"Title":"Enable additional C/C++ compiler warnings","State":"open","Body":"Resolves #6786\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6802)","Url":"https://github.com/dotnet/winforms/pull/6802","RelatedDescription":"Open PR \"Enable additional C/C++ compiler warnings\" (#6802)"},{"Id":"1160573713","IsPullRequest":true,"CreatedAt":"2022-03-07T02:22:45","Actor":"gpetrou","Number":"6801","RawContent":null,"Title":"Enable nullability in TrackBar","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in TrackBar.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6801)","Url":"https://github.com/dotnet/winforms/pull/6801","RelatedDescription":"Closed or merged PR \"Enable nullability in TrackBar\" (#6801)"},{"Id":"1159872266","IsPullRequest":false,"CreatedAt":"2022-03-04T17:18:16","Actor":"rickbrew","Number":"6798","RawContent":null,"Title":"Cursor(Stream) constructor has \"short read\", doesn't check return value from Stream.Read()","State":"open","Body":"This is in .NET 6.0.2 but I don't believe it's new, it may be a very old issue.\r\n\r\nPaint.NET 4.3.8 (latest public release) started crashing on the new Windows 11 Insider \"Dev\" build, 10.0.22567.0. It seems to be because of some `Cursor`s that aren't initializing correctly. My cursor files haven't changed in quite some time, nor has the code for handling them. Now, I do believe this is a new bug in Win11, but there also seems to be a bug in WinForms.\r\n\r\nFilip Navara @filipnavara on Twitter pointed out ( https://twitter.com/filipnavara/status/1499792311965913093?s=20&t=TUXrCwLBMiomnfPGQecZEw ) a \"short read\" in the `Cursor(Stream)` constructor: https://github.com/dotnet/winforms/blob/04938f30a978874cebc88a399efbd0e89e1b4cb8/src/System.Windows.Forms/src/System/Windows/Forms/Cursor.cs#L87\r\n\r\nSo the data buffer is incompletely read into (because `Stream.Read()` only promises to read more than 0 but less than or equal to `length` bytes), initializing the handle fails, but the code keeps marching on\r\n\r\nHere's the exception and callstack that's filling up my inbox, all from Win11 Insider Dev build 10.0.22567.0: \r\n```\r\nException details:\r\nSystem.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'Disposed 'Cursor' can no longer be used.'.\r\n   at System.Windows.Forms.Cursor.get_Handle()\r\n   at Interop.User32.SetCursor(IHandle hCursor)\r\n   at System.Windows.Forms.Control.WmSetCursor(Message& m)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.ScrollableControl.WndProc(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)\r\n```\r\n\r\ncc @bitcrazed @filipnavara @RussKie ","Url":"https://github.com/dotnet/winforms/issues/6798","RelatedDescription":"Open issue \"Cursor(Stream) constructor has \"short read\", doesn't check return value from Stream.Read()\" (#6798)"},{"Id":"1159630762","IsPullRequest":true,"CreatedAt":"2022-03-04T13:45:22","Actor":"dotnet-maestro[bot]","Number":"6796","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220303.1\r\n- **Date Produced**: March 3, 2022 1:52:32 PM UTC\r\n- **Commit**: a19c29a391b292519a08217314bc53de6fb2d12c\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22152.1 to 7.0.0-beta.22153.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22152.1 to 7.0.0-beta.22153.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22152.1 to 7.0.0-beta.22153.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22152.1 to 7.0.0-beta.22153.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22152.1 to 7.0.0-beta.22153.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22152.1 to 7.0.0-beta.22153.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/566e5fb...a19c29a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6796)","Url":"https://github.com/dotnet/winforms/pull/6796","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6796)"},{"Id":"1159640260","IsPullRequest":false,"CreatedAt":"2022-03-04T13:20:34","Actor":"bodrick","Number":"6797","RawContent":null,"Title":"Setting InvariantGlobalization to true causes exception","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\nHost (useful for support):\r\n  Version: 6.0.2\r\n  Commit:  839cdfb0ec\r\n\r\n**Problem description:**\r\nSetting InvariantGlobalization to true causes exception.\r\n\r\n[07:58:38.1898548] Processed 'System.Windows.Forms' in 00:00:00.0003725\r\n[07:58:38.2018540] Added 'System.Windows.Forms'\r\n[07:58:38.2028554] Loaded System in 00:00:00.0000114 [thread 53]\r\n[07:58:38.2028554] Processed 'System' in 00:00:00.0004680\r\n[07:58:38.2158547] Added 'System'\r\n[07:58:38.2168556] Loaded System.Drawing in 00:00:00.0000145 [thread 13]\r\n[07:58:38.2168556] Processed 'System.Drawing' in 00:00:00.0000513\r\n[07:58:38.2178543] Added 'System.Drawing'\r\n[07:58:38.2178543] Loaded System.Design in 00:00:00.0000086 [thread 13]\r\n[07:58:38.2188550] Processed 'System.Design' in 00:00:00.0002857\r\n[07:58:38.2248513] Creating VSCodeDomDesignerLoader\r\n[07:58:38.2278490] Added 'System.Design'\r\n[07:58:38.2278490] Loaded System.Drawing.Design in 00:00:00.0000144 [thread 51]\r\n[07:58:38.2278490] Processed 'System.Drawing.Design' in 00:00:00.0000176\r\n[07:58:38.2288517] Added 'System.Drawing.Design'\r\n[07:58:38.5528534] [Thread 1] Creating design-time ITypeResolutionService.\r\n[07:58:38.6098556] Start processing enqueued assemblies\r\n[07:58:38.6098556] Loaded Microsoft.WinForms.DesignTools.Protocol in 00:00:00.0000129 [thread 49]\r\n[07:58:38.6108563] Processed 'Microsoft.WinForms.DesignTools.Protocol' in 00:00:00.0015006\r\n[07:58:38.6138555] Added 'Microsoft.WinForms.DesignTools.Protocol'\r\n[07:58:38.6138555] Loaded Microsoft.WinForms.DesignTools.Client in 00:00:00.0000134 [thread 49]\r\n[07:58:38.6388530] Processed 'Microsoft.WinForms.DesignTools.Client' in 00:00:00.0253481\r\n[07:58:38.6398528] Added 'Microsoft.WinForms.DesignTools.Client'\r\n[07:58:38.7588511] [Thread 55] Launching server...\r\n[07:58:39.6368576] [WinFormsApp1]: Preparing shadow cache folder\r\n[07:58:39.6398587] [WinFormsApp1]: Copying design tools server common files from: 'c:\\program files\\microsoft visual studio\\2022\\enterprise\\common7\\ide\\commonextensions\\microsoft\\windows.forms\\DesignToolsServer\\Common'\r\n[07:58:39.7878600] [WinFormsApp1]: Copying design tool server platform-specific files from: 'c:\\program files\\microsoft visual studio\\2022\\enterprise\\common7\\ide\\commonextensions\\microsoft\\windows.forms\\DesignToolsServer\\x64'\r\n[07:58:39.7938572] [WinFormsApp1]: Copying 'C:\\Development\\Personal\\WinFormsApp1\\obj\\Debug\\net6.0-windows\\WinFormsApp1.designer.deps.json' to 'DesignToolsServer.deps.json'\r\n[07:58:39.7988570] [WinFormsApp1]: Copying 'C:\\Development\\Personal\\WinFormsApp1\\obj\\Debug\\net6.0-windows\\WinFormsApp1.designer.runtimeconfig.json' to 'DesignToolsServer.runtimeconfig.json'\r\n[07:58:39.8448622] [WinFormsApp1]: Launching design tools server process...\r\n[07:58:40.0698592] [WinFormsApp1]: info: Design Tools Server[0]\r\n[07:58:40.0698592] [WinFormsApp1]:       Failed to launch design tools server process process\r\n[07:58:40.0778643] [WinFormsApp1]: fail: Design Tools Server[0]\r\n[07:58:40.0778643] [WinFormsApp1]:       System.Globalization.CultureNotFoundException: Only the invariant culture is supported in globalization-invariant mode. See https://aka.ms/GlobalizationInvariantMode for more information. (Parameter 'culture')\r\n[07:58:40.0778643] [WinFormsApp1]:       1033 (0x0409) is an invalid culture identifier.\r\n[07:58:40.0778643] [WinFormsApp1]:          at System.Globalization.CultureData.GetCultureData(Int32 culture, Boolean bUseUserOverride)\r\n[07:58:40.0778643] [WinFormsApp1]:          at System.Globalization.CultureInfo..ctor(Int32 culture, Boolean useUserOverride)\r\n[07:58:40.0778643] [WinFormsApp1]:          at System.Globalization.CultureInfo..ctor(Int32 culture)\r\n[07:58:40.0778643] [WinFormsApp1]:          at Microsoft.DotNet.DesignTools.Server.Program.<>c__DisplayClass2_0.<<Main>b__1>d.MoveNext()\r\n\r\nWinFormsCache with flag set to true: https://github.com/bodrick/WinFormsApp1/blob/main/FlagTrue.7z\r\nWinFormsCache without flag : https://github.com/bodrick/WinFormsApp1/blob/main/NotSet.7z\r\n\r\n**Expected behavior:**\r\nWinForm renders correctly\r\n\r\n**Minimal repro:**\r\n(https://github.com/bodrick/WinFormsApp1)\r\n","Url":"https://github.com/dotnet/winforms/issues/6797","RelatedDescription":"Open issue \"Setting InvariantGlobalization to true causes exception\" (#6797)"},{"Id":"1159394039","IsPullRequest":false,"CreatedAt":"2022-03-04T08:46:34","Actor":"Lydia-Shi","Number":"6794","RawContent":null,"Title":"Form is not responding after clicking on Button then close Form","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET 7.0.100-preview.3.22153.22\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nForm is not responding after clicking on button then close Form.\r\n![Button_NotRespond](https://user-images.githubusercontent.com/54019172/156727801-926a838f-772b-4845-96c4-089936e84618.gif)\r\n\r\n**Expected behavior:**\r\nForm and VS all work well.\r\n\r\n**Minimal repro:**\r\n1.\tCreate a Winforms .NET Core application\r\n2.\tDrag and drop a Button control into Form designer\r\n3.\tBuild and run \r\n4.\tClick on button, then try to close Form\r\n\r\n**More info:**\r\n1.\tThis is a regression issue, and cannot repro in 7.0.100-preview.3.22152.16\r\n2.\tThis issue affects many controls: TextBox, Button, Label, PropertyGrid, DataGridView, and …\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6794","RelatedDescription":"Open issue \"Form is not responding after clicking on Button then close Form\" (#6794)"},{"Id":"1159363091","IsPullRequest":true,"CreatedAt":"2022-03-04T08:09:30","Actor":"gpetrou","Number":"6793","RawContent":null,"Title":"Enable nullability in ToolStripControlHost","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in ToolStripControlHost.\r\n\r\nWe seem to have many tests where we call `Dispose` and therefore `_control = null!;`. Since this is the only place where we set _control to null, what should we do? Update/remove the tests or make `_control` nullable? For example, in https://github.com/dotnet/winforms/pull/6404 we decided to use `_comStream = null!;` in Dispose.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6793)","Url":"https://github.com/dotnet/winforms/pull/6793","RelatedDescription":"Open PR \"Enable nullability in ToolStripControlHost\" (#6793)"},{"Id":"1159283849","IsPullRequest":false,"CreatedAt":"2022-03-04T06:09:29","Actor":"Lydia-Shi","Number":"6789","RawContent":null,"Title":"[PerMonitorV2] Height of ListView in tabPage gets smaller and smaller when setting HighDpiMode to PermonitorV2 and moving multiple times through 100&300","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET Core 7.0.100-preview.3.22152.16\r\n\r\n\r\n**Problem description:**\r\nHeight of ListView in tabPage gets smaller and smaller.\r\n![Issue2](https://user-images.githubusercontent.com/54019172/156707762-9a4ecc6b-9eee-44b1-9c2b-63c99c1c19e4.gif)\r\n\r\n**Expected behavior:**\r\nThe height should not change.\r\n\r\n**Minimal repro:**\r\n1.\tExtract attachment [PerMonitorHDPICore.-.NET.7.0.zip](https://github.com/dotnet/winforms/files/8183405/PerMonitorHDPICore.-.NET.7.0.zip), then build and run\r\n2.\tClick “MdiParent-Simple Layout” button to open MdiParent1 Form\r\n3.\tMove MdiParent Form multiple times between 100 and 300, and observe the ListView in TabControl\r\n\r\n**More info**\r\n1.\tThis issue occurs when using private dlls based on PR #6752 .\r\n2.\tThis issue cannot repro on 100%&150%.\r\n3.\tThis issue also repro without private dlls.\r\n","Url":"https://github.com/dotnet/winforms/issues/6789","RelatedDescription":"Open issue \"[PerMonitorV2] Height of ListView in tabPage gets smaller and smaller when setting HighDpiMode to PermonitorV2 and moving multiple times through 100&300\" (#6789)"},{"Id":"1158894704","IsPullRequest":true,"CreatedAt":"2022-03-04T05:35:20","Actor":"gpetrou","Number":"6788","RawContent":null,"Title":"Enable nullability in PropertyDescriptorGridEntryAccessibleObject","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in PropertyDescriptorGridEntryAccessibleObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6788)","Url":"https://github.com/dotnet/winforms/pull/6788","RelatedDescription":"Closed or merged PR \"Enable nullability in PropertyDescriptorGridEntryAccessibleObject\" (#6788)"},{"Id":"1158888012","IsPullRequest":true,"CreatedAt":"2022-03-04T05:09:58","Actor":"gpetrou","Number":"6787","RawContent":null,"Title":"Enable nullability in NumericUpDownAccessibleObject","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in NumericUpDownAccessibleObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6787)","Url":"https://github.com/dotnet/winforms/pull/6787","RelatedDescription":"Closed or merged PR \"Enable nullability in NumericUpDownAccessibleObject\" (#6787)"},{"Id":"1158635116","IsPullRequest":true,"CreatedAt":"2022-03-03T18:35:09","Actor":"dotnet-maestro[bot]","Number":"6785","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:84f431dc-3375-4a46-af87-08d961c59698)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 84f431dc-3375-4a46-af87-08d961c59698\r\n- **Build**: 20220222.7\r\n- **Date Produced**: February 22, 2022 10:41:19 PM UTC\r\n- **Commit**: 7215d8265a7fbcd022eb72ff7a6e2048444c985f\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 6.0.0-beta.22107.2 to 6.0.0-beta.22122.7][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.22107.2 to 6.0.0-beta.22122.7][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.22107.2 to 6.0.0-beta.22122.7][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.22107.2 to 6.0.0-beta.22122.7][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.22107.2 to 6.0.0-beta.22122.7][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.22107.2 to 6.0.0-beta.22122.7][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/fe5cc18...7215d82\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:84f431dc-3375-4a46-af87-08d961c59698)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6785)","Url":"https://github.com/dotnet/winforms/pull/6785","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#6785)"},{"Id":"1158391327","IsPullRequest":true,"CreatedAt":"2022-03-03T13:45:38","Actor":"dotnet-maestro[bot]","Number":"6784","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220302.1\r\n- **Date Produced**: March 2, 2022 11:51:45 AM UTC\r\n- **Commit**: 566e5fb87e4f84eeb898500fd3b3d2fd96662d13\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22151.1 to 7.0.0-beta.22152.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22151.1 to 7.0.0-beta.22152.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22151.1 to 7.0.0-beta.22152.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22151.1 to 7.0.0-beta.22152.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22151.1 to 7.0.0-beta.22152.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22151.1 to 7.0.0-beta.22152.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/801ca3a...566e5fb\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6784)","Url":"https://github.com/dotnet/winforms/pull/6784","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6784)"},{"Id":"1158218533","IsPullRequest":false,"CreatedAt":"2022-03-03T10:13:51","Actor":"Ashley-Li","Number":"6783","RawContent":null,"Title":"The button/Label control in the tabControl's tabPage2 move up after the app built ","State":"open","Body":"* VS Version: \r\nThe latest main VS build\r\n\r\n* .NET Core Version: \r\nVS comes with .NET SDK 6.0.22.10605\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Minimal repro:**\r\n1. Create a .NET Core winforms app.\r\n2. Add a TabControl to the form designer.\r\n3. Add a button into the tabPage2 of the tabControl1.\r\n4. Change the Anchor' property value of the button to 'None' or 'Buttom&Right'.\r\n5. Set the form's font property value to 'Segoe UI, 12pt' and Font style is Regular.\r\n6. Observe the Button's location value and build the app.\r\n7. Observe the Button's location value.\r\n\r\nOr\r\n\r\n1. Extract \"[TestApp.zip](https://github.com/dotnet/winforms-designer/files/8020188/TestApp.zip)\" and open it in VS.\r\n2. Observe the Button's location value and then build the app.\r\n3. Observe the Button's location value.\r\n\r\n**Actual behavior:**\r\nThe Button's location before build app is (220,180), after build app, the location of the button becomes (220,174).\r\nThe value of the Button's location property changes and the position moves up.\r\n![button_move_up_issue](https://user-images.githubusercontent.com/56664234/152906267-9f9ff176-a14b-4e4b-b188-46be33f94271.gif)\r\n\r\n**Expected behavior:**\r\nThe Button's location before build app is (220,180), after build app, the location of the button remains (220,180).\r\nThe value of the Button's location property should not change and the position remains unchanged.\r\n![Dev16_result](https://user-images.githubusercontent.com/56664234/152908361-4b1dd1cb-99b2-4826-a104-9133d46e30bf.gif)\r\n\r\n**More info**\r\n1. The button/Label control in the tabControl's tabPage1, the issue cannot repro, it occurs from tabPage2 and onwards in tabs.\r\n2. Workaround:  If you don’t change the Anchor property of the Button so that it defaults to (Top, Left), then the font of the Form is changed to “Segoe UI”, 12F, System.Drawing.FontStyle.Regular\". After build project, the button will not move up.\r\n2. The initial feedback ticket: https://devdiv.visualstudio.com/DevDiv/_queries/edit/1457510/?triage=true\r\n3. Original issue: [4029](https://github.com/dotnet/winforms-designer/issues/4092)","Url":"https://github.com/dotnet/winforms/issues/6783","RelatedDescription":"Open issue \"The button/Label control in the tabControl's tabPage2 move up after the app built \" (#6783)"},{"Id":"1157719544","IsPullRequest":true,"CreatedAt":"2022-03-03T01:27:30","Actor":"Tanya-Solyanik","Number":"6782","RawContent":null,"Title":"Removed old constraint related to CAS.","State":"closed","Body":"This should had been removed when we removed CAS-related code. ControlAccessibleObject was demanding unmanaged code permissions and that is why we did not allow controls to override it. In .NET CAS is deprecated, and this type check is not relevant any more.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6782)","Url":"https://github.com/dotnet/winforms/pull/6782","RelatedDescription":"Closed or merged PR \"Removed old constraint related to CAS.\" (#6782)"},{"Id":"1157588674","IsPullRequest":true,"CreatedAt":"2022-03-02T19:50:23","Actor":"dotnet-maestro[bot]","Number":"6781","RawContent":null,"Title":"[release/7.0-preview2] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4060a9ae-51b9-48e3-fc71-08d9f4e8def7)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 4060a9ae-51b9-48e3-fc71-08d9f4e8def7\r\n- **Build**: 20220302.2\r\n- **Date Produced**: March 2, 2022 6:10:56 PM UTC\r\n- **Commit**: e24f66dff0770eee344038da8c12476d8c450c41\r\n- **Branch**: refs/heads/release/7.0-preview2\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/190a47e...e24f66d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4060a9ae-51b9-48e3-fc71-08d9f4e8def7)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6781)","Url":"https://github.com/dotnet/winforms/pull/6781","RelatedDescription":"Closed or merged PR \"[release/7.0-preview2] Update dependencies from dotnet/runtime\" (#6781)"},{"Id":"1157174674","IsPullRequest":true,"CreatedAt":"2022-03-02T13:44:23","Actor":"dotnet-maestro[bot]","Number":"6780","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220301.1\r\n- **Date Produced**: March 1, 2022 12:31:30 PM UTC\r\n- **Commit**: 801ca3a61b946c160070168bf4ba35f5ecaceba6\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22151.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22151.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22151.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22151.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22151.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22151.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/f713662...801ca3a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6780)","Url":"https://github.com/dotnet/winforms/pull/6780","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6780)"},{"Id":"1157152822","IsPullRequest":false,"CreatedAt":"2022-03-02T12:49:51","Actor":"KalleOlaviNiemitalo","Number":"6779","RawContent":null,"Title":"System.Windows.Forms.Timer got stuck after being disabled and enabled reentrantly","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\nNot yet reproduced on .NET Core, but the implementation is similar.\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes, on .NET Framework 4.7.2.\r\n\r\n**Problem description:**\r\nSystem.Windows.Forms.Timer.TimerNativeWindow got into an invalid state in which NativeWindow.Handle == IntPtr.Zero but TimerNativeWindow._timerID != 0. After this, no more Timer.Tick events were raised, and assigning Timer.Enabled = false or Timer.Enabled = true had no effect.\r\n\r\nBefore the problem occurred, the application had enabled the timer. The application was then assigning Timer.Enabled = false. This caused TimerNativeWindow.StopTimer to call SafeNativeMethods.KillTimer and NativeWindow.DestroyHandle, which in turn called UnsafeNativeMethods.DestroyWindow. Normally, DestroyWindow would cause the window messages 0x90 (WM_UAHDESTROYWINDOW), 0x2 (WM_DESTROY), and 0x82 (WM_NCDESTROY) to be sent to the window. For unknown reasons in a RemoteApp environment, the 0x90 (WM_UAHDESTROYWINDOW) message was instead followed by WM_ACTIVATE to some other window. This indirectly caused Windows Forms to raise the Control.GotFocus event:\r\n\r\n```\r\n   at System.Windows.Forms.Control.OnGotFocus(EventArgs e)\r\n   at System.Windows.Forms.TextBox.OnGotFocus(EventArgs e)\r\n   at System.Windows.Forms.Control.WmSetFocus(Message& m)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.TextBox.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.UnsafeNativeMethods.SetFocus(HandleRef hWnd)\r\n   at System.Windows.Forms.UnsafeNativeMethods.SetFocus(HandleRef hWnd)\r\n   at System.Windows.Forms.ContainerControl.FocusActiveControlInternal()\r\n   at System.Windows.Forms.Form.set_Active(Boolean value)\r\n   at System.Windows.Forms.Form.WmActivate(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.UnsafeNativeMethods.IntDestroyWindow(HandleRef hWnd)\r\n   at System.Windows.Forms.UnsafeNativeMethods.IntDestroyWindow(HandleRef hWnd)\r\n   at System.Windows.Forms.UnsafeNativeMethods.DestroyWindow(HandleRef hWnd)\r\n   at System.Windows.Forms.NativeWindow.DestroyHandle()\r\n   at System.Windows.Forms.Timer.TimerNativeWindow.StopTimer(Boolean destroyHwnd, IntPtr hWnd)\r\n   at System.Windows.Forms.Timer.set_Enabled(Boolean value)\r\n   … redacted application-specific methods …\r\n   at System.Windows.Forms.ToolStripItem.RaiseEvent(Object key, EventArgs e)\r\n   at System.Windows.Forms.ToolStripMenuItem.OnClick(EventArgs e)\r\n   at System.Windows.Forms.ToolStripItem.HandleClick(EventArgs e)\r\n   at System.Windows.Forms.ToolStripItem.HandleMouseUp(MouseEventArgs e)\r\n   at System.Windows.Forms.ToolStrip.OnMouseUp(MouseEventArgs mea)\r\n   at System.Windows.Forms.ToolStripDropDown.OnMouseUp(MouseEventArgs mea)\r\n   at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.ToolStrip.WndProc(Message& m)\r\n   at System.Windows.Forms.ToolStripDropDown.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)\r\n   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)\r\n   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(IntPtr dwComponentID, Int32 reason, Int32 pvLoopData)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)\r\n   … redacted application-specific methods …\r\n```\r\n\r\nAt this point, TimerNativeWindow._timerID was zero because KillTimer had finished, and NativeWindow.Handle was nonzero because DestroyWindow had not yet finished.\r\n\r\nWhen the application handled the Control.GotFocus event, it wanted to restart the timer from the previously configured interval. It assigned Timer.Enabled = false and then Timer.Enabled = true. After these assignments, both TimerNativeWindow._timerID and NativeWindow.Handle were nonzero. The Control.GotFocus event handler then returned, and NativeWindow.Callback finished handling the WM_ACTIVATE message.\r\n\r\nNativeWindow.Callback then received the 0x2 (WM_DESTROY) and 0x82 (WM_NCDESTROY) messages. WM_NCDESTROY caused it to call ReleaseHandle(false), which zeroed NativeWindow.Handle but did not change TimerNativeWindow._timerID. The TimerNativeWindow was now in an invalid state as NativeWindow.Handle was zero but TimerNativeWindow._timerID was nonzero. Finally, Timer.set_Enabled returned and the TimerNativeWindow was left in the invalid state.\r\n\r\nLater, the application attempted to restart the timer again, by setting Timer.Enabled = false and then Timer.Enabled = true. This however had no effect:\r\n\r\n- Assigning Timer.Enabled = false had no effect because TimerNativeWindow.StopTimer detected that Handle was zero.\r\n- Assigning Timer.Enabled = true had no effect because TimerNativeWindow.StartTimer detected that _timerID was not zero.\r\n\r\nThe timer was thus irreversibly stuck.\r\n\r\n**Expected behavior:**\r\nEither prevent the timer from getting stuck if it is reentrantly disabled and enabled, or at least make the timer work again if the application assigns Timer.Enabled = true after the reentrancy has finished.\r\n\r\n**Minimal repro:**\r\nCurrently no repro, because I don't know how to cause NativeWindow.Callback to receive a WM_ACTIVATE message while DestroyWindow is destroying the message-only window of the timer.","Url":"https://github.com/dotnet/winforms/issues/6779","RelatedDescription":"Open issue \"System.Windows.Forms.Timer got stuck after being disabled and enabled reentrantly\" (#6779)"},{"Id":"1156062570","IsPullRequest":true,"CreatedAt":"2022-03-02T00:44:01","Actor":"dreddy-work","Number":"6778","RawContent":null,"Title":"Fixing Anchor Info calculations.","State":"open","Body":"Fixes #5774\r\nUpdating `AnchoriInfo `is only needed when control is ready for layout. `InitLayoutCore()` does call `UpdateAnchorInfo()`.\r\nAt the least, we are checking if control is parented before updating `AnchorInfo`. This helps avoid calculating\r\n`AnchorInfo `with default initial values of the Control. They are always overridden when layout happens.\r\n\r\nWe have one other issue in the `AnchorInfo `calculations that is being investigated but this change will indirectly fix the #5774.\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6778)","Url":"https://github.com/dotnet/winforms/pull/6778","RelatedDescription":"Open PR \"Fixing Anchor Info calculations.\" (#6778)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-03-08T03:30:30.7337988Z","RunDurationInMilliseconds":521}