{"Data":{"GitHub":{"Issues":[{"Id":"1467259128","IsPullRequest":false,"CreatedAt":"2022-11-29T00:11:38","Actor":"JeremyKuhne","Number":"8297","RawContent":null,"Title":"Investigate adding additional TypeConverter metadata to Resx","State":"open","Body":"Resx uses `TypeConverters` when available to convert data to/from `string` and `byte[]`. The specific type converter used isn't recorded, it's only the active one for `typeof(T)` that is considered. For unwrapping it would be good to know the specific type converter used and attempt to use the exact one if possible and give diagnostic information of some sort.\r\n\r\nIn order for this sort of change to have meaning, all copies of the Resx code need to be considered (MSBuild has their own, for example.)\r\n\r\n\r\ncc @GrabYourPitchforks ","Url":"https://github.com/dotnet/winforms/issues/8297","RelatedDescription":"Open issue \"Investigate adding additional TypeConverter metadata to Resx\" (#8297)"},{"Id":"1467249777","IsPullRequest":false,"CreatedAt":"2022-11-28T23:58:03","Actor":"JeremyKuhne","Number":"8296","RawContent":null,"Title":"Document how to add a custom TypeConverter for AxHost.State serialization","State":"open","Body":"In order to avoid `BinaryFormatter` you need a custom `TypeConverter` for `AxHost.State` to serialize without it. We have an existing converter `AxHost.StateConverter` that does this, but it isn't actually registered for `AxHost.State`. We may decide to register it eventually, but even if we do, to support cross compilation with .NET Framework it's necessary to know how to inject a `TypeConverter` at runtime versus the normal way of applying an attribute.\r\n\r\n`TypeConverter` docs should be updated with this how-to that we then refer to in our docs. Afaik it isn't described anywhere.","Url":"https://github.com/dotnet/winforms/issues/8296","RelatedDescription":"Open issue \"Document how to add a custom TypeConverter for AxHost.State serialization\" (#8296)"},{"Id":"1467240161","IsPullRequest":false,"CreatedAt":"2022-11-28T23:41:14","Actor":"JeremyKuhne","Number":"8295","RawContent":null,"Title":"Add test coverage for ResX classes","State":"open","Body":"We recently ported `StronglyTypedResourceBuilder` and that has some end-to-end tests, but we don't have good coverage for `ResxResourceReader` and `ResxResourceWriter` on their own.\r\n\r\n`BinaryFormatter` depreciation makes filling in test coverage here much more important.","Url":"https://github.com/dotnet/winforms/issues/8295","RelatedDescription":"Open issue \"Add test coverage for ResX classes\" (#8295)"},{"Id":"1467237573","IsPullRequest":false,"CreatedAt":"2022-11-28T23:37:20","Actor":"JeremyKuhne","Number":"8294","RawContent":null,"Title":"Add test coverage for AxHost related classes","State":"open","Body":"We have some tests, but there are significant gaps. Any additional coverage here will help keep this code in good shape for the next few decades. :)\r\n\r\nHelp here is appreciated. Live on the bleeding edge of the mid-nineties. :)\r\n\r\nSupporting this scenario is important for Windows Forms customers with legacy dependencies. This code is how Visual Basic 6 (VB6) controls are supported, and we plan to add specific tests for that scenario as well. See #8253.","Url":"https://github.com/dotnet/winforms/issues/8294","RelatedDescription":"Open issue \"Add test coverage for AxHost related classes\" (#8294)"},{"Id":"1467228729","IsPullRequest":false,"CreatedAt":"2022-11-28T23:23:53","Actor":"JeremyKuhne","Number":"8293","RawContent":null,"Title":"Add test coverage for COM type converter classes","State":"open","Body":"The code under the `COM2Interop` folder provides COM type descriptor functionality for .NET. We've started adding unit tests, but more needs to be done.\r\n\r\nThis is a great place for external contributors to get some deeper understanding of .NET's Component Model and help fill in the gaps here.","Url":"https://github.com/dotnet/winforms/issues/8293","RelatedDescription":"Open issue \"Add test coverage for COM type converter classes\" (#8293)"},{"Id":"1467222612","IsPullRequest":false,"CreatedAt":"2022-11-28T23:17:55","Actor":"JeremyKuhne","Number":"8292","RawContent":null,"Title":"Clean up and document existing behavior in COM classes","State":"open","Body":"Our ActiveX control hosting (`AxHost` and related classes) and COM type descriptor code (`Com2*`) needs cleaned up and documented to allow us to update for `BinaryFormatter` changes.\r\n\r\nAs we're actively working on this, this issue isn't a good one for community contribution at the moment.","Url":"https://github.com/dotnet/winforms/issues/8292","RelatedDescription":"Open issue \"Clean up and document existing behavior in COM classes\" (#8292)"},{"Id":"1467215188","IsPullRequest":false,"CreatedAt":"2022-11-28T23:11:29","Actor":"JeremyKuhne","Number":"8291","RawContent":null,"Title":"ComWrapper needs to return vtable based on types, not interfaces","State":"open","Body":"``` C#\r\nprotected override unsafe ComInterfaceEntry* ComputeVtables(object obj, CreateComInterfaceFlags flags, out int count)\r\n```\r\n\r\nThe implementation here needs to go off of specific class types, not interfaces. Not all classes that implement an interface will only implement a single interface (many won't).\r\n\r\nThe best place to start is by hard tying specific class types to entries. We can iterate with additional flexibility as warranted.\r\n\r\nI plan to tackle this imminently.","Url":"https://github.com/dotnet/winforms/issues/8291","RelatedDescription":"Open issue \"ComWrapper needs to return vtable based on types, not interfaces\" (#8291)"},{"Id":"1462567311","IsPullRequest":true,"CreatedAt":"2022-11-28T22:22:09","Actor":"elachlan","Number":"8275","RawContent":null,"Title":"Refactor `BindingSource` to remove `ArrayList`","State":"closed","Body":"Related #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8275)","Url":"https://github.com/dotnet/winforms/pull/8275","RelatedDescription":"Closed or merged PR \"Refactor `BindingSource` to remove `ArrayList`\" (#8275)"},{"Id":"1467173208","IsPullRequest":false,"CreatedAt":"2022-11-28T22:21:34","Actor":"JeremyKuhne","Number":"8290","RawContent":null,"Title":"Add AppContext switch for enabling `BinaryFormatter` usages","State":"open","Body":"All `BinaryFormatter` blocks should be behind an AppContext switch. For now this will be an opt-out, when and if the `BinaryFormatter` gets disabled by the runtime this can be driven by whatever is driving the behavior in the runtime.","Url":"https://github.com/dotnet/winforms/issues/8290","RelatedDescription":"Open issue \"Add AppContext switch for enabling `BinaryFormatter` usages\" (#8290)"},{"Id":"1462505754","IsPullRequest":true,"CreatedAt":"2022-11-28T21:12:31","Actor":"elachlan","Number":"8274","RawContent":null,"Title":"Refactor `AxHost` to remove `ArrayList`","State":"closed","Body":"This change refactors AxHost to remove arraylist and simplifies some Dictionary<Control, Control> to Hashset<Control>.\r\n\r\nRelated #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8274)","Url":"https://github.com/dotnet/winforms/pull/8274","RelatedDescription":"Closed or merged PR \"Refactor `AxHost` to remove `ArrayList`\" (#8274)"},{"Id":"1466752622","IsPullRequest":true,"CreatedAt":"2022-11-28T16:54:30","Actor":"dmitrii-drobotov","Number":"8289","RawContent":null,"Title":"[release/7.0] Fix setting Form.Owner in Form.Show/ShowDialog(IWin32Window owner) if owner is a Control ","State":"open","Body":"Backport of https://github.com/dotnet/winforms/pull/8283 to release/7.0\r\nFixes #8280\r\n\r\nForm.Show/ShowDialog(IWin32Window owner) method should set form's Owner property, however this logic had been inadvertently inverted for not TOPLEVEL windows during refactoring (#5791) and form owner property would be `null`. This fix restores the previous logic.\r\n\r\n## Servicing reasons\r\n\r\n- `null` owner property might lead to window shown on an incorrect desktop or in the wrong place.\r\n- This regression may cause serious UI issues described in https://github.com/dotnet/winforms/issues/8280, to the point of being a ship blocker.\r\n\r\n## Proposed changes\r\n\r\n- Check if owner doesn't have a `TOPMOST` style to correctly initialize it with a top-level Control in this case\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Owner property will be correctly set for a form if it was shown with a Control as owner\r\n\r\n## Regression? \r\n\r\n- Yes in 7.0 Preview1\r\n\r\n## Risk\r\n\r\n- Minimal - restores previous behavior and customer confirmed it resolves their issue\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit test\r\n- Manual\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET 7.0\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8289)","Url":"https://github.com/dotnet/winforms/pull/8289","RelatedDescription":"Open PR \"[release/7.0] Fix setting Form.Owner in Form.Show/ShowDialog(IWin32Window owner) if owner is a Control \" (#8289)"},{"Id":"1466387801","IsPullRequest":true,"CreatedAt":"2022-11-28T13:33:21","Actor":"dotnet-maestro[bot]","Number":"8288","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221128.1\r\n- **Date Produced**: November 28, 2022 12:06:58 PM UTC\r\n- **Commit**: 1771d63827387b49dcd8c33b95f1512f4f11e368\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/0c46b34...1771d63\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8288)","Url":"https://github.com/dotnet/winforms/pull/8288","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8288)"},{"Id":"1465316704","IsPullRequest":false,"CreatedAt":"2022-11-27T03:12:32","Actor":"memoarfaa","Number":"8287","RawContent":null,"Title":"Inherited forms don't work in the designer with Reference dll","State":"open","Body":"### Environment\r\n\r\nMicrosoft Visual Studio Enterprise 2022 (64-bit) - Current\r\nVersion 17.4.0\r\n\r\n\r\n### .NET version\r\n\r\nnet7.0 ,net6.0 , net3.1\r\n\r\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\r\n\r\n_No response_\r\n\r\n### Issue description\r\n\r\nInherited forms don't work in the designer with Reference dll\r\n\r\n[WinFormsApp1.zip](https://github.com/dotnet/winforms/files/10097441/WinFormsApp1.zip)\r\n\r\n![2022-11-27_05-17-27](https://user-images.githubusercontent.com/12494184/204117659-3b6f8180-b286-4df0-b430-76c484c46303.png)\r\n\r\n### Steps to reproduce\r\n\r\n1- create new WinForms Forms class library  project create Form inherit form other .\r\n2- create new WinForms Forms  project Add  previous class library dll as Reference or edit project.\r\n<ItemGroup>\r\n\r\n    <Reference Include=\"SkinFramWorkCore\">\r\n      <HintPath>SkinFramWorkCore.dll</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n3- open Form\r\n\r\n### Diagnostics\r\n\r\n```text\r\n[05:04:53.583297] fail: Request failures: Sessions/FindDesignableClass.\r\n                        Microsoft.DotNet.DesignTools.Client.DesignToolsServerException: The designer could not be shown for this file because none of the classes within it can be designed.  The designer inspected the following classes in the file: \\r\\n\r\n                        \tForm1 --- The base class 'SkinFramWorkCore.SkinForm' could not be loaded.  Ensure the assembly has been referenced and that all projects have been built.\r\n\r\n                        For information on how to troubleshoot the designer refer to the guide at https://aka.ms/winforms/designer/troubleshooting.\r\n[05:04:53.680295] fail: Request failures: Sessions/FindDesignableClass.\r\n                        Microsoft.DotNet.DesignTools.Client.DesignToolsServerException: The designer could not be shown for this file because none of the classes within it can be designed.  The designer inspected the following classes in the file: \\r\\n\r\n                        \tForm1 --- The base class 'SkinFramWorkCore.SkinForm' could not be loaded.  Ensure the assembly has been referenced and that all projects have been built.\r\n\r\n                        For information on how to troubleshoot the designer refer to the guide at https://aka.ms/winforms/designer/troubleshooting.\r\n```\r\n","Url":"https://github.com/dotnet/winforms/issues/8287","RelatedDescription":"Open issue \"Inherited forms don't work in the designer with Reference dll\" (#8287)"},{"Id":"1465149683","IsPullRequest":true,"CreatedAt":"2022-11-26T13:29:47","Actor":"dotnet-maestro[bot]","Number":"8286","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221125.4\r\n- **Date Produced**: November 25, 2022 11:17:32 PM UTC\r\n- **Commit**: 0c46b34ed70ad23d8323d32d1c8eeb9f4819ae68\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/4b6380d...0c46b34\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8286)","Url":"https://github.com/dotnet/winforms/pull/8286","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8286)"},{"Id":"1465149482","IsPullRequest":true,"CreatedAt":"2022-11-26T13:28:55","Actor":"dotnet-maestro[bot]","Number":"8285","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20221125.1\r\n- **Date Produced**: November 25, 2022 2:49:34 PM UTC\r\n- **Commit**: b61fcdfe86b30fe91898bfb296f4f4396fe5d87a\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.22574.1 to 8.0.0-beta.22575.1][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.22574.1 to 8.0.0-beta.22575.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.22574.1 to 8.0.0-beta.22575.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.22574.1 to 8.0.0-beta.22575.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.22574.1 to 8.0.0-beta.22575.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.22574.1 to 8.0.0-beta.22575.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/7cd5e97...b61fcdf\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8285)","Url":"https://github.com/dotnet/winforms/pull/8285","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#8285)"},{"Id":"1465080859","IsPullRequest":false,"CreatedAt":"2022-11-26T07:52:51","Actor":"elachlan","Number":"8284","RawContent":null,"Title":"Enable CA1815 Override equals and operator equals on value types","State":"open","Body":"### Is your feature request related to a problem? Please describe\r\n\r\nhttps://learn.microsoft.com/en-au/dotnet/fundamentals/code-analysis/quality-rules/ca1815\r\n> For [non-blittable](https://learn.microsoft.com/en-au/dotnet/framework/interop/blittable-and-non-blittable-types) value types, the inherited implementation of [Equals](https://learn.microsoft.com/en-us/dotnet/api/system.object.equals) uses the [System.Reflection](https://learn.microsoft.com/en-us/dotnet/api/system.reflection) library to compare the contents of all fields. Reflection is computationally expensive, and comparing every field for equality might be unnecessary. If you expect users to compare or sort instances, or use them as hash table keys, your value type should implement [Equals](https://learn.microsoft.com/en-us/dotnet/api/system.object.equals).\r\n\r\n`ImeModeConversion`\r\nhttps://github.com/dotnet/winforms/blob/5a28fa9c294581314d5675188316fbf09882c114/src/System.Windows.Forms/src/System/Windows/Forms/Control.Ime.cs#L1316\r\n\r\n`ThemedScrollbarWindow`\r\nhttps://github.com/dotnet/winforms/blob/5a28fa9c294581314d5675188316fbf09882c114/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/ThemedScrollbarWindow.cs#L1-L12\r\n\r\n### Describe the solution you'd like and alternatives you've considered\r\n\r\nAdd Equals/GetHashCode to the structs.\r\n\r\nThis involves an API change to the public types.\r\n\r\n### Will this feature affect UI controls?\r\n\r\nUnknown","Url":"https://github.com/dotnet/winforms/issues/8284","RelatedDescription":"Open issue \"Enable CA1815 Override equals and operator equals on value types\" (#8284)"},{"Id":"1464852237","IsPullRequest":true,"CreatedAt":"2022-11-25T19:03:14","Actor":"dmitrii-drobotov","Number":"8283","RawContent":null,"Title":"Fix setting Form.Owner in Form.Show/ShowDialog(IWin32Window owner) if owner is a Control","State":"open","Body":"This restores a behavior until #5791, where this condition was inverted as a part of refactoring.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFix #8280 on .NET 8\r\n\r\n\r\n## Proposed changes\r\n\r\n- Check if owner doesn't have a `TOPMOST` style to correctly initialize it with a top-level Control in this case\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Owner property is correctly set for a form if it was shown with a Control as owner\r\n\r\n## Regression? \r\n\r\n- Yes \r\n\r\n## Risk\r\n\r\n- Minimal - restores previous behavior\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit test\r\n- Manual test with sample app from https://github.com/dotnet/winforms/issues/8280#issuecomment-1326776047\r\n- CTI\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET 8.0.100-alpha.1.22565.7\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8283)","Url":"https://github.com/dotnet/winforms/pull/8283","RelatedDescription":"Open PR \"Fix setting Form.Owner in Form.Show/ShowDialog(IWin32Window owner) if owner is a Control\" (#8283)"},{"Id":"1464522282","IsPullRequest":true,"CreatedAt":"2022-11-25T13:35:08","Actor":"dotnet-maestro[bot]","Number":"8282","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221124.5\r\n- **Date Produced**: November 25, 2022 4:22:01 AM UTC\r\n- **Commit**: 4b6380d194a7899d17c5b991fc290feae9252f12\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22573.9 to 8.0.0-alpha.1.22574.5][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/78b3f9d...4b6380d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8282)","Url":"https://github.com/dotnet/winforms/pull/8282","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8282)"},{"Id":"1464521349","IsPullRequest":true,"CreatedAt":"2022-11-25T13:34:11","Actor":"dotnet-maestro[bot]","Number":"8281","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20221124.1\r\n- **Date Produced**: November 24, 2022 2:48:52 PM UTC\r\n- **Commit**: 7cd5e97416ad782621a2cce154d659253c06223a\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.22572.5 to 8.0.0-beta.22574.1][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.22572.5 to 8.0.0-beta.22574.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.22572.5 to 8.0.0-beta.22574.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.22572.5 to 8.0.0-beta.22574.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.22572.5 to 8.0.0-beta.22574.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.22572.5 to 8.0.0-beta.22574.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/3709573...7cd5e97\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8281)","Url":"https://github.com/dotnet/winforms/pull/8281","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#8281)"},{"Id":"1463657349","IsPullRequest":false,"CreatedAt":"2022-11-24T17:37:14","Actor":"rickbrew","Number":"8280","RawContent":null,"Title":"Major regression in Form.ShowDialog(IWin32Window) in .NET 7 -- ship blocker for Paint.NET 5.0","State":"open","Body":"### .NET version\n\n7.0.0\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, it worked fine in .NET 5 and .NET 6\n\n### Issue description\n\nWhen `Form.ShowDialog(IWin32Window)` is called with a `Control` instead of a `Form`, the dialog's parenting/ownership is not set correctly, causing the dialog to not \"track\" with the parent form correctly.\r\n\r\nThe most visible symptom of this is that if you switch between virtual desktops, the parent form is correctly hidden but the dialog is not. And, it is possible to interact with the main window in certain ways. In my app (Paint.NET), it is possible to switch between images by using the taskbar (kind of like how IE/Edge used to let you switch between tabs). This is normally prevented when a modal dialog is active, but right now it's not. This can result in actions affecting the wrong image, which then corrupts the state of the image's change history and causes data loss.\r\n\r\nAnother symptom is that the `Owner` for the dialog is `null`, even though it should probably be `control.FindForm()`\r\n\r\n**This is currently a ship-blocker for Paint.NET 5.0 on .NET 7**. I cannot release the new version with this bug.\r\n\r\nKnown workaround: use `dialog.ShowDialog(control.FindForm()` instead of `dialog.ShowDialog(control)`. However, this requires changes to _many_ places in the code, and is not a fix I can apply to libraries or plugins.\r\n\r\nI believe this regressed due to https://github.com/dotnet/winforms/pull/3394 cc @dreddy-work which changed whether `Owner` was set _or_ `SetWindowLong(..., GWL.HWNDPARENT, ...)` was called. Previously, `SetWindowLong` was always called.\n\n### Steps to reproduce\n\nCreate a Form and do `Application.Run(form)`. Make sure the Form has at least 1 child control, like a `button`.\r\nIn some code within the form, like in the `button`'s click handler, create another Form and call `dialog.ShowDialog(button)`\r\nWhile the dialog is open, switch between virtual desktops using WinKey+Shift+Left/Right\r\n","Url":"https://github.com/dotnet/winforms/issues/8280","RelatedDescription":"Open issue \"Major regression in Form.ShowDialog(IWin32Window) in .NET 7 -- ship blocker for Paint.NET 5.0\" (#8280)"},{"Id":"1463317115","IsPullRequest":true,"CreatedAt":"2022-11-24T13:35:17","Actor":"dotnet-maestro[bot]","Number":"8279","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221123.9\r\n- **Date Produced**: November 24, 2022 7:49:54 AM UTC\r\n- **Commit**: 78b3f9ddfab76eb99cd02c2744d3c2d055ed7270\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/ce06592...78b3f9d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8279)","Url":"https://github.com/dotnet/winforms/pull/8279","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8279)"},{"Id":"1463315606","IsPullRequest":true,"CreatedAt":"2022-11-24T13:29:02","Actor":"dotnet-maestro[bot]","Number":"8278","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20221122.5\r\n- **Date Produced**: November 22, 2022 10:18:30 PM UTC\r\n- **Commit**: 37095730a5eebb50fed86a0d3013d90408a05609\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.22554.2 to 8.0.0-beta.22572.5][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.22554.2 to 8.0.0-beta.22572.5][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.22554.2 to 8.0.0-beta.22572.5][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.22554.2 to 8.0.0-beta.22572.5][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.22554.2 to 8.0.0-beta.22572.5][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.22554.2 to 8.0.0-beta.22572.5][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/80b6be4...3709573\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8278)","Url":"https://github.com/dotnet/winforms/pull/8278","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#8278)"},{"Id":"1462907680","IsPullRequest":false,"CreatedAt":"2022-11-24T07:50:38","Actor":"Nora-Zhou01","Number":"8277","RawContent":null,"Title":"[Multi-Monitor][PerMonitorV2]ToolStripTextBox and ToolStripComBoBox in the toolbar do not scale well when bringing items down from 100% to 300%","State":"open","Body":"### .NET version\r\n\r\n8.0.100-alpha.1.22567.28\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo, it also repro on .NET 6.0 & 7.0.\r\n\r\n### Issue description\r\n\r\nThe ToolStripTextBox and ToolStripComBoBox in Toolstrip  are not scaled well when moving from 100% primary monitor to 300% secondary monitor.\r\n![1111](https://user-images.githubusercontent.com/104609169/203720027-3a47fbf9-ef42-4e39-a037-626077137cca.png)\r\n\r\n\r\n### Steps to reproduce\r\n\r\n1. Launch VS instance on 100% primary screen.\r\n2. Create a WinForms .NET core project.\r\n3. Add  <ApplicationHighDpiMode>PerMonitorV2</ApplicationHighDpiMode>  in csproj file.\r\n4. Drag and drop a MenuStrip control. \r\n5. Add child controls MenuItem, TextBox, ComboBox respectively \r\n6. Build and run the project.\r\n7. Move to 300% secondary monitor and observe.\r\n\r\n\r\n\r\n**Actual result:**\r\nHScrollBar control is not scaled well when move from 100% primary to 300% secondary monitor.\r\n300% primary monitor:\r\n![1111](https://user-images.githubusercontent.com/104609169/203721681-c5107ab1-f166-4c54-a393-ace943b419eb.png)\r\n\r\n**Expected result:**\r\nThe ToolStripTextBox and ToolStripComBoBox in Toolstrip  should be scaled well when move from 100% primary screen to 300% secondary monitor.\r\n![2222222](https://user-images.githubusercontent.com/104609169/203722342-1c3dac52-7151-4a50-9a4e-b3a31174c187.png)\r\n\r\n\r\n**More Info:**\r\n\r\n1. This issue also repro on .NET7.0, .NET6.0.\r\n2. This issue doesn't repro on .NET Framework.\r\n3. ToolStripTextBox and ToolStripComBoBox in the toolbar do not scale well when bringing items down from 300% to 100%,but the result changes.\r\n![image](https://user-images.githubusercontent.com/104609169/203726717-5d232248-6d44-47af-9fea-6ada1fc24e02.png)","Url":"https://github.com/dotnet/winforms/issues/8277","RelatedDescription":"Open issue \"[Multi-Monitor][PerMonitorV2]ToolStripTextBox and ToolStripComBoBox in the toolbar do not scale well when bringing items down from 100% to 300%\" (#8277)"},{"Id":"1462601878","IsPullRequest":true,"CreatedAt":"2022-11-24T00:41:23","Actor":"elachlan","Number":"8276","RawContent":null,"Title":"Refactor GetStandardValues implementations to remove ArrayList","State":"open","Body":"Related #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8276)","Url":"https://github.com/dotnet/winforms/pull/8276","RelatedDescription":"Open PR \"Refactor GetStandardValues implementations to remove ArrayList\" (#8276)"},{"Id":"1462311807","IsPullRequest":true,"CreatedAt":"2022-11-23T20:05:40","Actor":"dreddy-work","Number":"8273","RawContent":null,"Title":"Update MicrosoftCodeAnalysisPackagesVersion for compliance","State":"closed","Body":"Internal build is failing with compliance on one of the dependencies.  This version is not updated by arcade.\r\n\r\nrefer: https://dev.azure.com/dnceng/internal/_componentGovernance/dotnet-winforms/alert/7454535?typeId=6663759&pipelinesTrackingFilter=0\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8273)","Url":"https://github.com/dotnet/winforms/pull/8273","RelatedDescription":"Closed or merged PR \"Update MicrosoftCodeAnalysisPackagesVersion for compliance\" (#8273)"},{"Id":"1461723661","IsPullRequest":true,"CreatedAt":"2022-11-23T18:19:41","Actor":"dotnet-maestro[bot]","Number":"8271","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221122.6\r\n- **Date Produced**: November 23, 2022 11:45:31 AM UTC\r\n- **Commit**: ce06592c8277d78299e60a634b4431f68c5834b6\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/dd0ec94...ce06592\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8271)","Url":"https://github.com/dotnet/winforms/pull/8271","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8271)"},{"Id":"1462087897","IsPullRequest":true,"CreatedAt":"2022-11-23T16:49:30","Actor":"Jericho","Number":"8272","RawContent":null,"Title":"Refactor DesignerHost to use Dictionary<IComponent, IDesigner> instead of Hashtable","State":"open","Body":"Related: #8143 \n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8272)","Url":"https://github.com/dotnet/winforms/pull/8272","RelatedDescription":"Open PR \"Refactor DesignerHost to use Dictionary<IComponent, IDesigner> instead of Hashtable\" (#8272)"},{"Id":"1461486228","IsPullRequest":false,"CreatedAt":"2022-11-23T10:34:25","Actor":"MandiMan","Number":"8270","RawContent":null,"Title":"[Multi-Monitor][PerMonitorV2]HScrollBar is not scaled well on secondary screen","State":"open","Body":"### .NET version\r\n\r\n8.0.100-alpha.1.22567.28\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo, it also repro on .NET 6.0 & 7.0.\r\n\r\n### Issue description\r\n\r\nHScrollBar control is not scaled well in secondary screen under PermonitorV2 mode.\r\n\r\n### Steps to reproduce\r\n\r\n1. Launch VS instance on 300% primary monitor. \r\n2. Create a winforms .net core project. \r\n3. Add` <ApplicationHighDpiMode>PerMonitorV2</ApplicationHighDpiMode>` in csproj file.\r\n4. Drag and drop a HScrollBar control. \r\n5. Build and run. \r\n6. Move to 100% secondary monitor. \r\n\r\nOr:\r\n\r\n1. Extract and open [HScrollBar.zip](https://github.com/dotnet/winforms/files/10074564/HScrollBar.zip)on 300% primary screen.\r\n2. Build and run it\r\n3. Move to 100% secondary monitor.\r\n\r\n**Actual result:**\r\nHScrollBar control is not scaled well when move from 300% primary to 100% secondary monitor.\r\n300% primary monitor:\r\n![image](https://user-images.githubusercontent.com/108860782/203524161-e4c353b1-7aff-4f1f-a60d-62e6dbb690ef.png)\r\nMove to 100% secondary monitor:\r\n![image](https://user-images.githubusercontent.com/108860782/203523940-eed32049-e3b0-4148-aa05-1aa622137898.png)\r\n\r\n**Expected result:**\r\nHScrollBar control should be scaled well when move from 300% primary screen to 100% secondary monitor.\r\n![image](https://user-images.githubusercontent.com/108860782/203524466-c4b75e47-c552-457e-b1a7-7414cf2a79e0.png)\r\n\r\n**More Info:**\r\n\r\n1. This issue also repro on .NET7.0, .NET6.0.\r\n2. This issue doesn't repro on .NET Framework.\r\n3. This issue doesn't repro on SystemAware and DpiUnware mode.\r\n4. This issue also repro on moved VS from 100% primary to 300% secondary. When move to 300% secondary screen, HScrollBar is also not scaled well, It may get bigger or disappear. Gif as follows：\r\n\r\nhttps://user-images.githubusercontent.com/108860782/203524982-b893635d-d875-4fcf-8d52-ce5eed0767b6.mp4\r\n","Url":"https://github.com/dotnet/winforms/issues/8270","RelatedDescription":"Open issue \"[Multi-Monitor][PerMonitorV2]HScrollBar is not scaled well on secondary screen\" (#8270)"},{"Id":"1461321288","IsPullRequest":false,"CreatedAt":"2022-11-23T09:02:22","Actor":"MandiMan","Number":"8269","RawContent":null,"Title":"[Multi-Monitor][PerMonitorV2] ListBox with multiple items are not scaled well on 300% secondary monitor","State":"open","Body":"### .NET version\r\n\r\n8.0.100-alpha.1.22567.28\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo, it also repro on .NET 6.0 & 7.0.\r\n\r\n### Issue description\r\n\r\n ListBox with multiple items are not scaled well when move from 100% primary to 300% secondary monitor (AutoScaleMode = Dpi) under PermonitorV2 mode .\r\n\r\n### Steps to reproduce\r\n\r\n1. Launch VS instance on 100% primary monitor. \r\n2. Create a winforms .net core project.\r\n3. Add `<ApplicationHighDpiMode>PerMonitorV2</ApplicationHighDpiMode>` in csproj file.\r\n4. Change AutoScaleMode = Dpi.\r\n5. Drag and drop a ListBox control and add multiple items. \r\n6. Build and run. \r\n7. Move to 300% secondary monitor. \r\n\r\nOr:\r\n\r\n1. Extract and open [ListBox.zip](https://github.com/dotnet/winforms/files/10074229/ListBox.zip)on 100% primary screen.\r\n2. Build and run it\r\n3. Move to 300% secondary monitor.\r\n\r\n**Actual result:**\r\nListBox control with multiple items displaying one less line when move from 100% primary to 300% secondary monitor.\r\n100% primary monitor:\r\n![image](https://user-images.githubusercontent.com/108860782/203503307-ef71a455-dabc-4415-a8c7-d8a32f1d0c1f.png)\r\n\r\nMove to 300% secondary monitor:\r\n![image](https://user-images.githubusercontent.com/108860782/203503989-ba2833fb-8ce2-40a7-a1e7-39312b0c142d.png)\r\n\r\n**Expected result:**\r\nListBox control should scaled well.\r\n100% primary monitor:\r\n![image](https://user-images.githubusercontent.com/108860782/203503307-ef71a455-dabc-4415-a8c7-d8a32f1d0c1f.png)\r\n\r\nMove to 300% secondary monitor:\r\n![image](https://user-images.githubusercontent.com/108860782/203503307-ef71a455-dabc-4415-a8c7-d8a32f1d0c1f.png)\r\n\r\n**More Info:**\r\n\r\n1. This issue also repro on .NET7.0, .NET6.0.\r\n2. This issue doesn't repro on .NET Framework. \r\n3. This issue doesn't repro when AutoScaleMode = Font. \r\n4. This issue doesn't repro on SystemAware and DpiUnware mode.\r\n","Url":"https://github.com/dotnet/winforms/issues/8269","RelatedDescription":"Open issue \"[Multi-Monitor][PerMonitorV2] ListBox with multiple items are not scaled well on 300% secondary monitor\" (#8269)"},{"Id":"1461304827","IsPullRequest":false,"CreatedAt":"2022-11-23T08:53:47","Actor":"Ashley-Li","Number":"8268","RawContent":null,"Title":"[Multi-Monitor][PerMonitorV2] The icons of PropertyGrid control are not scaled well on 100% secondary monitor ","State":"open","Body":"### .NET version\n\n.NET 8.0.100-alpha.1.22572.7\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, it also repro on .NET 6.0 & 7.0.\n\n### Issue description\n\n[PerMonitorV2] [Multi-Monitor] The icons of PropertyGrid control are not scaled well when moving from 300% primary monitor to 100% secondary monitor.\r\n![image](https://user-images.githubusercontent.com/56664234/203504214-4a6c00bd-91e7-496a-99e7-0834dd7db364.png)\n\n### Steps to reproduce\n\n1. Launch VS instance on 300% primary screen.\r\n2. Create a WinForms .NET core project.\r\n3. Add` <ApplicationHighDpiMode>PerMonitorV2</ApplicationHighDpiMode>` in csproj file.\r\n4. Drag and drop a PropertyGrid control to form designer and set its SelectedObject property is Form1.\r\n5. Build and run the project.\r\n6. Move to 100% secondary monitor and observe.\r\n\r\nOr\r\n\r\n1. Extract and open  [TestApp.zip](https://github.com/dotnet/winforms/files/10073776/TestApp.zip)   on 300% primary monitor.\r\n2. Build and run the project.\r\n3. Move to 100% secondary monitor and observe.\r\n\r\n**Actual result:**\r\nThe icons of PropertyGrid control are not scaled well on 100% secondary monitor. \r\n![image](https://user-images.githubusercontent.com/56664234/203504285-74098b0e-108d-4456-bb5d-eaaa5997cd9d.png)\r\n\r\n**Expected result:**\r\nThe icons of PropertyGrid control should be scaled well on 100% secondary monitor.\r\n![image](https://user-images.githubusercontent.com/56664234/203505071-cd5515d2-0579-4dbb-b4e7-15004451d3ed.png)\r\n\r\n\r\n**More Info:**\r\n1. This issue is not repro on  move 100% primary to 300% secondary.\r\n2. This issue also repro on .NET 6.0 & 7.0.\r\n3. This issue not repro on framework project.\r\n4. This issue doesn't repro on SystemAware and DpiUnware mode.","Url":"https://github.com/dotnet/winforms/issues/8268","RelatedDescription":"Open issue \"[Multi-Monitor][PerMonitorV2] The icons of PropertyGrid control are not scaled well on 100% secondary monitor \" (#8268)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-11-29T03:30:34.5287467Z","RunDurationInMilliseconds":553}