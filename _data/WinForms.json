{"Data":{"GitHub":{"Issues":[{"Id":"670720895","IsPullRequest":false,"CreatedAt":"2020-08-01T09:58:52","Actor":"ryancheung","Number":"3687","RawContent":null,"Title":"No TSF support?","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nI want to make a game with SharpDX(DirectX 11), which depends on WinForms. The game is going to target CJK users, which users must use a IME software to do text inputs, e.g. type Chinese characters with Microsoft PinYin.\r\n\r\nThen as for IME, Windows has two frameworks, IMM32 for WinXP and before, and then TSF for Window versions after WinXP.\r\n\r\nNow here comes the problem: \r\nDotnet winforms does not support TSF(unless you do it manually in native cpp, just like Chromim, Firefox or Microsoft Terminal). This cause a situation that if you want to render composition string and/or candidate list manually in fullscreen game, you only have IMM32 managed API. If you use IMM32 API to fetch composition string/candidate list, there will be bugs with TSF-based Input Method, such as Microsoft PinYin, you can't get candidate list most of the time. But, there's no bug for purely IMM32-based Input Methods, like Sougou PinYin. To fix that issue, you have to utilize the TSF API in native cpp, but TSF is too complicate. It's not an easy work for dotnet developers.\r\n\r\nSo I just hope dotnet winforms could provide support for TSF. Just like the work be done in WPF core:\r\n- [UnsafeNativeMethodsTextServices.cs](https://github.com/dotnet/wpf/blob/ac9d1b7a6b0ee7c44fd2875a1174b820b3940619/src/Microsoft.DotNet.Wpf/src/Shared/MS/Win32/UnsafeNativeMethodsTextServices.cs)\r\n- [DefaultTextStore.cs](https://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/Input/DefaultTextStore.cs)\r\n\r\nWPF core has everything for TSF.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n<!--\r\n    A clear and concise description of what you want to happen. This includes:\r\n    - Description of what API need to be added or changed.\r\n    - Code that shows the surface area of the API.\r\n    - Code that shows real world scenarios, and how they would otherwise be handled.\r\n    - Details showing the usage/consumption of the proposed new API, and alternatives (e.g. not having this API).\r\n    - Any other context or screenshots about the feature request here.\r\n\r\n    :exclamation: Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md for more details\r\n\r\n  -->\r\n\r\n- Add TSF API just like WPF core.\r\n- Provide an unified API to support both TSF and IMM32 to support all kind of Input Methods.\r\n\r\n**Will this feature affect UI controls?**\r\n<!--\r\n    Yes / No\r\n\r\n    If yes, describe the following:\r\n\r\n        - Will VS Designer need to support the feature? If yes, describe how you expect it to funсtion.\r\n        - What impact will it have on accessibility?\r\n        - Will this feature need to be localized or be localizable?\r\n  -->\r\n\r\nNo","Url":"https://github.com/dotnet/winforms/issues/3687","RelatedDescription":"Open issue \"No TSF support?\" (#3687)"},{"Id":"670188079","IsPullRequest":false,"CreatedAt":"2020-07-31T20:19:52","Actor":"cbrit","Number":"3686","RawContent":null,"Title":"TabPageCollection.Insert(int index, TabPage page) does not work properly, bug has been around for 15 years","State":"open","Body":"* .NET Core Version: \r\n.NET 5 Preview 7 and all past .NET versions since 2.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n\r\n`TabPageCollection.Insert()` is supposed to insert a `TabPage` at the provided index in a `TabControl`. However, for a _very_ long time, there has been a bug that prevents it from working unless you force the creation of the `TabControl.Handle` before attempting, like so:\r\n\r\n`IntPtr h = tabControl1.Handle;`\r\n\r\nThis was pointed out as the undocumented answer to this same bug being [posted about on msdn in 2005](https://social.msdn.microsoft.com/Forums/windows/en-US/5d10fd0c-1aa6-4092-922e-1fd7af979663/tabpagesinsert-bug?forum=winforms) and continues to behave this way in .NET 5.\r\n\r\nI believe the underlying issue is that the `TabControl` handle is not properly created in some situations but I don't know how that works under the hood.\r\n\r\nNOTE: I have been able to use `Insert()` inside of an event handler of a `TabControl`, presumably at the point the handle already exists.\r\n\r\n**Expected behavior:**\r\n\r\n`TabPage`s should be able to be inserted into `TabControl`s without forcing handle creation.\r\n\r\n**Minimal repro:**\r\n\r\n```\r\n    public partial class Form1 : Form\r\n    {\r\n        private TabControl TabControl { get; set; }\r\n\r\n        public Form1()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        public void InitializeComponent()\r\n        {\r\n            TabControl = new TabControl();\r\n            \r\n            var page1 = new TabPage();\r\n            var page2 = new TabPage();\r\n            var page3 = new TabPage();\r\n\r\n            page1.Text = \"First works\";\r\n            TabControl.TabPages.Add(page1);\r\n\r\n            page2.Text = \"Second fails\";\r\n            TabControl.TabPages.Insert(1, page2);\r\n\r\n            IntPtr h = TabControl.Handle;\r\n            page3.Text = \"Third works\";\r\n            TabControl.TabPages.Insert(1, page3);\r\n\r\n            Controls.Add(TabControl);\r\n        }\r\n    }\r\n```\r\n\r\nResulting window:\r\n![image](https://user-images.githubusercontent.com/23322838/89073962-0f39c280-d341-11ea-9e83-7c153b60649d.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/3686","RelatedDescription":"Open issue \"TabPageCollection.Insert(int index, TabPage page) does not work properly, bug has been around for 15 years\" (#3686)"},{"Id":"669747928","IsPullRequest":true,"CreatedAt":"2020-07-31T12:06:28","Actor":"dotnet-maestro[bot]","Number":"3685","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200801.1\r\n- **Date Produced**: 8/1/2020 10:40 AM\r\n- **Commit**: 6822ba3308b2ceb3eb8a88c8e02f460e171bc04a\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.CodeDom**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Diagnostics.PerformanceCounter**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.DirectoryServices**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **Microsoft.NETCore.Targets**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **Microsoft.Win32.Registry.AccessControl**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **Microsoft.NETCore.App.Ref**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Drawing.Common**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Text.Encodings.Web**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Text.Json**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Threading.AccessControl**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Windows.Extensions**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Security.Principal.Windows**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.IO.FileSystem.AccessControl**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.IO.Packaging**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.IO.Pipes.AccessControl**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Resources.Extensions**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Security.AccessControl**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Security.Cryptography.Pkcs**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Security.Cryptography.ProtectedData**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n  - **System.Security.Permissions**: from 5.0.0-rc.1.20380.1 to 5.0.0-rc.1.20401.1\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3685)\r\n","Url":"https://github.com/dotnet/winforms/pull/3685","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/runtime\" (#3685)"},{"Id":"669622009","IsPullRequest":false,"CreatedAt":"2020-07-31T09:37:23","Actor":"John-Qiao","Number":"3684","RawContent":null,"Title":"Cannot build project successfully","State":"open","Body":"* .NET Core Version: \r\n5.0.100-rc.1.20380.12\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**More info:**\r\nThis issue does not occur in 5.0.100-rc.1.20378.11, it's a regression issue. \r\n\r\n**Problem description:**\r\nCannot build project successfully, and received the below error:\r\n![Actual](https://user-images.githubusercontent.com/45864985/89022271-52e9f780-d354-11ea-979c-1054017c2ca0.png)\r\n\r\n**Expected behavior:**\r\nCan build project successfully.\r\n\r\n**Minimal repro:**\r\n\r\n1. Create a new .NET Core Winforms project and target to .NET 5.0.\r\n2. Build this project. \r\n[WindowsFormsApp1.zip](https://github.com/dotnet/winforms/files/5006262/WindowsFormsApp1.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3684","RelatedDescription":"Open issue \"Cannot build project successfully\" (#3684)"},{"Id":"669439382","IsPullRequest":false,"CreatedAt":"2020-07-31T05:51:26","Actor":"Olina-Zhang","Number":"3683","RawContent":null,"Title":"[Accessibility] An element of the given ControlType must support the Text pattern for PropertyGrid: Text tree items","State":"open","Body":"* .NET Core Version: \r\n5.0.100-rc.1.20379.16\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\nAn element of the given ControlType must support the Text pattern for PropertyGrid: Text tree items\r\n\r\n**Minimal repro:**\r\n1. Extract following attached app and open it in VS.\r\n[WindowsFormsApp50.zip](https://github.com/dotnet/winforms/files/5005553/WindowsFormsApp50.zip)\r\n\r\n2. Build and run the project.\r\n3. Open Accessibility Insights For Windows tool, select and focus on PropertyGrid control\r\n\r\n**Actual behavior:**\r\nAn error is about PropertyGrid Text tree items: An element of the given ControlType must support the Text pattern.\r\n![image](https://user-images.githubusercontent.com/26474449/89008199-d5ff5380-d33c-11ea-9a75-d19cefa15b71.png)\r\n\r\n\r\n**Expected behavior:**\r\nNo error\r\n","Url":"https://github.com/dotnet/winforms/issues/3683","RelatedDescription":"Open issue \"[Accessibility] An element of the given ControlType must support the Text pattern for PropertyGrid: Text tree items\" (#3683)"},{"Id":"669286342","IsPullRequest":true,"CreatedAt":"2020-07-31T05:20:52","Actor":"Tanya-Solyanik","Number":"3677","RawContent":null,"Title":"Fixes #3660","State":"closed","Body":"Don't allow keyboard focus move to the PrintPreviewControl because it's not editable.\r\n\r\nFixes #3660\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3677)","Url":"https://github.com/dotnet/winforms/pull/3677","RelatedDescription":"Closed or merged PR \"Fixes #3660\" (#3677)"},{"Id":"667624537","IsPullRequest":false,"CreatedAt":"2020-07-31T05:20:51","Actor":"Zheng-Li01","Number":"3660","RawContent":null,"Title":"The PrintPreviewControl control have no dotted rectangle when using Keyboard focus on it","State":"closed","Body":"* .NET Core Version:\r\n.Net SDK 5.0.100-rc.1.20378.13\r\n\r\n* Have you experienced this same bug with .NET Framework?:\r\nYes\r\n\r\n**Minimal repro:**\r\n1. Extract “[Keyboard_PreviewControl.zip](https://github.com/dotnet/winforms/files/4993308/Keyboard_PreviewControl.zip)” and open it in VS.\r\n2. Build and run the project.\r\n3. Navigating the controls on PrintingTesting Form through tab key.\r\n\r\n**Expected behavior:**\r\nKeyboard focus focus on PrintPreviewControl control, and the dot line can be seen after Preview Control button.\r\n\r\n**Actual behavior:**\r\nWhile navigating through tab key, Keyboard focus is not visible after Preview Control button.\r\n![KeyBoard](https://user-images.githubusercontent.com/38325459/88771495-ea631500-d1b1-11ea-9ed5-6d8dcd187a86.gif)","Url":"https://github.com/dotnet/winforms/issues/3660","RelatedDescription":"Closed issue \"The PrintPreviewControl control have no dotted rectangle when using Keyboard focus on it\" (#3660)"},{"Id":"669392857","IsPullRequest":false,"CreatedAt":"2020-07-31T04:15:43","Actor":"Jessie-Zhang01","Number":"3682","RawContent":null,"Title":"[Accessibility] Keyboard shortcut key is unavailable to access the buttons(One Page, Two Page...)","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 5.0.100-rc.1.20377.7\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**More Info:**\r\n\r\n1. This issue can also repro on Framework project.\r\n2. There is a similar bugs: [1156785 ](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1156785?src=WorkItemMention&src-action=artifact_link)in VSO.\r\n3. We can just use ‘Enter’ key enter to buttons(One Page, Two Page...).\r\n\r\n**Minimal repro:**\r\n1. Extract “[WindowsFormsApp3.zip](https://github.com/dotnet/winforms/files/5005021/WindowsFormsApp3.zip)” and open it in VS.\r\n2. Build and run the project.\r\n3. Using Tab key to navigate to Preview button, then press Enter key to show Print preview dialog.\r\n4. Check whether any shortcut key is provided to buttons(One Page, Two Page...) to access.\r\n\r\n**Expected behavior:**\r\nKeyboard shortcut key should be available to access the buttons(One Page, Two Page...).\r\n\r\n**Actual behavior:**\r\nKeyboard shortcut key is unavailable to access the buttons(One Page, Two Page...).\r\n","Url":"https://github.com/dotnet/winforms/issues/3682","RelatedDescription":"Open issue \"[Accessibility] Keyboard shortcut key is unavailable to access the buttons(One Page, Two Page...)\" (#3682)"},{"Id":"668658481","IsPullRequest":true,"CreatedAt":"2020-07-31T03:46:26","Actor":"dotnet-maestro[bot]","Number":"3674","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200730.1\r\n- **Date Produced**: 7/30/2020 11:17 AM\r\n- **Commit**: c205ed0d0d170ced4e12fb60e0c2c2dc6f8df095\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.CodeDom**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Diagnostics.PerformanceCounter**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.DirectoryServices**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Drawing.Common**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **Microsoft.NETCore.Targets**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **Microsoft.Win32.Registry.AccessControl**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **Microsoft.NETCore.App.Ref**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.IO.FileSystem.AccessControl**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Text.Json**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Threading.AccessControl**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Windows.Extensions**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Text.Encodings.Web**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.IO.Packaging**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.IO.Pipes.AccessControl**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Resources.Extensions**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Security.AccessControl**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Security.Cryptography.Pkcs**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Security.Cryptography.ProtectedData**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Security.Permissions**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n  - **System.Security.Principal.Windows**: from 5.0.0-rc.1.20371.13 to 5.0.0-rc.1.20380.1\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3674)","Url":"https://github.com/dotnet/winforms/pull/3674","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3674)"},{"Id":"669363616","IsPullRequest":true,"CreatedAt":"2020-07-31T03:05:34","Actor":"Tanya-Solyanik","Number":"3681","RawContent":null,"Title":"Fixed PR comment: accessible name should not refer to control type","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3663\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3681)","Url":"https://github.com/dotnet/winforms/pull/3681","RelatedDescription":"Open PR \"Fixed PR comment: accessible name should not refer to control type\" (#3681)"},{"Id":"669343231","IsPullRequest":false,"CreatedAt":"2020-07-31T02:19:12","Actor":"Olina-Zhang","Number":"3680","RawContent":null,"Title":"[Accessibility] The Name property must not include the element's control type for toolStripProgressBar","State":"open","Body":"* .NET Core Version: \r\n5.0.100-rc.1.20379.16\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n Yes\r\n* Problem description:\r\nName property must not include the element's control type for toolStripProgressBar in ToolStrip and StatusStrip controls\r\n\r\n**Minimal repro:**\r\n1. Extract following attached app and open it in VS.\r\n[WindowsFormsApp48.zip](https://github.com/dotnet/winforms/files/5004631/WindowsFormsApp48.zip)\r\n2. Build and run the project.\r\n3. Open Accessibility Insights For Windows tool, select focus on form and view result.\r\n\r\n**Actual behavior:**\r\nGet 2 errors for toolStripProgressBar in ToolStrip and StatusStrip controls\r\n![image](https://user-images.githubusercontent.com/26474449/88992833-ebfa1d80-d316-11ea-9be8-20f52d517b25.png)\r\n![image](https://user-images.githubusercontent.com/26474449/88992949-311e4f80-d317-11ea-907f-36e5586bdf70.png)\r\n\r\n**Expected behavior:**\r\nNo error","Url":"https://github.com/dotnet/winforms/issues/3680","RelatedDescription":"Open issue \"[Accessibility] The Name property must not include the element's control type for toolStripProgressBar\" (#3680)"},{"Id":"669329966","IsPullRequest":true,"CreatedAt":"2020-07-31T02:10:19","Actor":"Tanya-Solyanik","Number":"3679","RawContent":null,"Title":"Fixes #3663","State":"closed","Body":"Added accessible name property to ToolStrip combo box in the test app\r\n\r\nFixes #3663\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3679)","Url":"https://github.com/dotnet/winforms/pull/3679","RelatedDescription":"Closed or merged PR \"Fixes #3663\" (#3679)"},{"Id":"667723892","IsPullRequest":false,"CreatedAt":"2020-07-31T02:10:19","Actor":"Ashley-Li","Number":"3663","RawContent":null,"Title":"[Accessibility] ToolStripComboBox/ToolStripTextBox items' name property cannot be null","State":"closed","Body":"* .NET Core Version: .Net SDK 5.0.100-rc.1.20378.13\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n* More info\r\nThis issue can reproduce on contextMenuStrip/MenuStrip.\r\n**Minimal repro::**\r\n1. Extract “[testApp.zip](https://github.com/dotnet/winforms/files/4994154/testApp.zip)” and open it in VS.\r\n2. Build and run the project.\r\n3. Open Accessibility Insights For Windows tool, select focus on form and view result.\r\n\r\n**Actual behavior::**\r\n Use the tool to test out the following error,toolStripComboBox/ToolStripTextBox items' name property cannot be null.\r\n![ComboBox](https://user-images.githubusercontent.com/56664234/88787008-cdd0d800-d1c5-11ea-9802-132379af3292.PNG)\r\n\r\n**Expected behavior:**\r\nToolStripComboBox/ToolStripTextBox items' name property cannot be null.\r\n","Url":"https://github.com/dotnet/winforms/issues/3663","RelatedDescription":"Closed issue \"[Accessibility] ToolStripComboBox/ToolStripTextBox items' name property cannot be null\" (#3663)"},{"Id":"669323211","IsPullRequest":false,"CreatedAt":"2020-07-31T01:29:57","Actor":"Tanya-Solyanik","Number":"3678","RawContent":null,"Title":"The PrintPreviewControl control have no dotted rectangle when using Keyboard focus on it","State":"open","Body":"Repro:\r\n1. create a core winforms application\r\n2. add a text box and a print preview control to a form\r\n3. run the application and TAB through the form\r\nresult: TAB key moves focus from the text box to the print preview control even though this control is not editable.\r\n\r\nLet's consider a comprehensive fix in Core 6.0 - \r\n1. set default value for TabStop property to false:\r\n```\r\n        [Browsable(false)]\r\n        [DefaultValue(false)]   << add this line\r\n        [EditorBrowsable(EditorBrowsableState.Never)]\r\n        new public bool TabStop\r\n        {\r\n            get => base.TabStop;\r\n            set => base.TabStop = value;\r\n        }\r\n```\r\n2. if the developer sets TabStop to true, we should draw the focus rectangle\r\n\r\n_Originally posted by @Tanya-Solyanik in https://github.com/dotnet/winforms/issues/3660#issuecomment-666847840_","Url":"https://github.com/dotnet/winforms/issues/3678","RelatedDescription":"Open issue \"The PrintPreviewControl control have no dotted rectangle when using Keyboard focus on it\" (#3678)"},{"Id":"668837920","IsPullRequest":true,"CreatedAt":"2020-07-30T15:04:16","Actor":"SergeySmirnov-Akvelon","Number":"3676","RawContent":null,"Title":"Several fixes to Control.AccessibleName property","State":"open","Body":"Fixes #3673\r\n\r\n\r\n## Proposed changes\r\n- Added supporting of custom AccessibleName for Form control\r\n- Removed unneeded using \"LegacyIAccessible\" pattern from controls.\r\n- Fixed default names for several controls\r\n\r\n## Customer Impact\r\nCustomers have ability to set custom accessible name for Form control.\r\nNow, users don't see default name for several controls:\r\n- DomainUpDown;\r\n- NumericUpdown;\r\n- ProgressBar;\r\n- DataGridView;\r\n- DataGridViewTextBoxEditingControl;\r\n- PropertyGrid;\r\n- PrintPreviewDialog;\r\n- MonthCalendar.\r\n\r\n## Regression? \r\n\r\n- Yes, from .Net Framework 4.8\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit tests\r\n- Manual testing\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- Microsoft Windows [Version 10.0.18363.900]\r\n- .NET Core 5.0: 5.0.100-rc.1.20379.24\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3676)","Url":"https://github.com/dotnet/winforms/pull/3676","RelatedDescription":"Open PR \"Several fixes to Control.AccessibleName property\" (#3676)"},{"Id":"668687130","IsPullRequest":true,"CreatedAt":"2020-07-30T12:46:38","Actor":"mavnorthwind","Number":"3675","RawContent":null,"Title":"Fixed RichTextBox not returning hidden text","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\nRichTextBox now correctly returns text that has been hidden using RTF\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3675)","Url":"https://github.com/dotnet/winforms/pull/3675","RelatedDescription":"Open PR \"Fixed RichTextBox not returning hidden text\" (#3675)"},{"Id":"668584051","IsPullRequest":false,"CreatedAt":"2020-07-30T10:23:36","Actor":"SergeySmirnov-Akvelon","Number":"3673","RawContent":null,"Title":"Accessibility: no way to set Form control accessible name ","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: 5.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\nIf AccessibleName is set to a custom value for the Form control, this does not affect the AccessibleName  in Accessibility tools. And default values are shown.\r\n\r\n**Expected behavior:**\r\nThere should be an ability to set/change AccessibleName for Form control\r\n\r\n**Minimal repro:**\r\nCreate the appl. Specify custom AccessibleName for Form. Run the app and observe that the default AccessibleName is shown in Inspect or Accessibility Insights.","Url":"https://github.com/dotnet/winforms/issues/3673","RelatedDescription":"Open issue \"Accessibility: no way to set Form control accessible name \" (#3673)"},{"Id":"668453902","IsPullRequest":false,"CreatedAt":"2020-07-30T07:44:24","Actor":"Amy-Li03","Number":"3672","RawContent":null,"Title":"[Accessibility] There is no ExpandCollapse pattern support for such properties which drop-down control is RichEdit control","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 5.0.100-rc.1.20378.11\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\nNarrator doesn't announce the collapsed and expanded state when pressing F4 to open and close the RichEdit control of Text property.\r\n![Core](https://user-images.githubusercontent.com/62929087/88895436-5d848e00-d27b-11ea-931c-e6f142ad6f1c.png)\r\n\r\n**Expected behavior:**\r\nNarrator should announce the collapsed and expanded state.\r\n\r\n**Minimal repro:**\r\n1. Create a winforms core app with PropertyGrid and Button control.\r\n2. Associate the Button with PropertyGrid as a selected object.\r\n3. Build and run the core project.\r\n4. Start Narrator tool.\r\n5. Press F4 to open and close the RichEdit control of Text property.","Url":"https://github.com/dotnet/winforms/issues/3672","RelatedDescription":"Open issue \"[Accessibility] There is no ExpandCollapse pattern support for such properties which drop-down control is RichEdit control\" (#3672)"},{"Id":"668410263","IsPullRequest":false,"CreatedAt":"2020-07-30T06:23:43","Actor":"Marie-Shi","Number":"3671","RawContent":null,"Title":"[Accessibility]Keyboard focus is invisible after pressing ‘Enter’ key of ToolStrip/StatusStrip with button item","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 5.0.100-rc.1.20379.18\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**More Info:**\r\nThis issue can also repro on Framework project.\r\n\r\n**Minimal repro:**\r\n1.\tExtract “ToolStrip_StatusStrip_keyboard_focus.zip” and open it in VS.\r\n[ToolStrip_StatusStrip_keyboard_focus.zip](https://github.com/dotnet/winforms/files/4999180/ToolStrip_StatusStrip_keyboard_focus.zip)\r\n2.\tBuild and run the project.\r\n3.\tUsing Tab key to navigate to toolStripButton1 item of ToolStrip, then press Enter key to trigger click event.\r\n4.\tContinue to press Enter key and observe the focus of toolStripButton1.\r\n\r\n**Expected behavior:**\r\nKeyboard focus should be visible after pressing ‘Enter’ key of ToolStrip/StatusStrip with button item, the behavior should be like button control.\r\n\r\n**Actual behavior:**\r\nKeyboard focus is invisible after pressing ‘Enter’ key of ToolStrip with button item.\r\n![ToolStrip_miss_focus](https://user-images.githubusercontent.com/45864017/88887822-be0dce00-d26f-11ea-8508-d55ce7c09163.gif)","Url":"https://github.com/dotnet/winforms/issues/3671","RelatedDescription":"Open issue \"[Accessibility]Keyboard focus is invisible after pressing ‘Enter’ key of ToolStrip/StatusStrip with button item\" (#3671)"},{"Id":"668358005","IsPullRequest":true,"CreatedAt":"2020-07-30T05:52:55","Actor":"RussKie","Number":"3670","RawContent":null,"Title":"Use is null","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nCloses #3469 as obsolete\r\n\r\n\r\n## Proposed changes\r\n\r\n- Replace all instances of `== null` with `is null`.\r\n\r\nAll changes are automated in VS, replaced on per project basis.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3670)","Url":"https://github.com/dotnet/winforms/pull/3670","RelatedDescription":"Closed or merged PR \"Use is null\" (#3670)"},{"Id":"668342282","IsPullRequest":true,"CreatedAt":"2020-07-30T03:44:29","Actor":"Tanya-Solyanik","Number":"3669","RawContent":null,"Title":"[Port to 3.1 servicing] Fix regression in accessible name for data-bound combo box items","State":"open","Body":"This is a regression from .NET Framework version 4.7.2. AccessibleObject.Name property for data-driven ComboBox items was broken because it was invoking ToString method instead of reading content of property that is named in DisplayMember databinding property.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3584\r\n\r\n\r\n## Proposed changes\r\n\r\nuse method that accesses DisplayMember property\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n* User of accessible technologies does not have access to values of combo box items, when these items are data-bound.\r\n* Automation tests that rely on UIA accessible name would not work\r\n\r\n## Regression? \r\n\r\n- Yes, from  .NET Framework 4.7.2\r\n\r\n## Risk\r\n\r\nLow - we now use an existing method that is used to populate combobox drop down UI \r\nPR in Core 5.0: https://github.com/dotnet/winforms/issues/3549\r\nFix is a port from the .NET Framework and is cherry-picked from Core 5.0:\r\ngit cherry-pick f981c1216f6471534e01222b8fa192f805a3014e\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/88878116-08de0600-d1dc-11ea-9e4a-2af8d8ba6400.png)\r\n\r\n\r\n### After\r\nInspect should display the same text as is contained in the drop down:\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/88878131-14313180-d1dc-11ea-8b69-f74ce3e34547.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\nmanual test using the inspect tool, unit tests\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3669)","Url":"https://github.com/dotnet/winforms/pull/3669","RelatedDescription":"Open PR \"[Port to 3.1 servicing] Fix regression in accessible name for data-bound combo box items\" (#3669)"},{"Id":"668079903","IsPullRequest":true,"CreatedAt":"2020-07-30T01:13:16","Actor":"weltkante","Number":"3665","RawContent":null,"Title":"Fix porting regression in ToolStripDropDown","State":"closed","Body":"Fixes #2058\r\n\r\n## Proposed changes\r\n\r\n- Fix porting regression. Context menus for NotifyIcon are allowed to cover the taskbar, the corresponding property stored the setting but did not read it out.\r\n\r\n## Customer Impact\r\n\r\n- Allow context menus for taskbar icons to cover the taskbar (instead of getting shifted off the taskbar)\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Minimal. The property was internal and only set by `NotifyIcon` caller.\r\n\r\n## Screenshots\r\n\r\n### Before\r\n\r\n- context menu for NotifyIcon is moved off the taskbar and does not appear where the user clicked\r\n\r\n![grafik](https://user-images.githubusercontent.com/5845814/88842292-8d7e5380-d1df-11ea-8f8a-808449251843.png)\r\n\r\n### After\r\n\r\n- context menu for NotifyIcon is allowed to cover the taskbar, depending where the user clicked (same as Desktop Framework)\r\n\r\n![grafik](https://user-images.githubusercontent.com/5845814/88842445-c1f20f80-d1df-11ea-8fcf-2df9359c03a1.png)\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- added unit test to verify the property returns the value stored in it (test fails without fix)\r\n- manual testing to verify the reported behavior was fixed (cannot automate this test as it requires nontrivial user interaction to ensure the icon is actually shown in a location where the behaviore can be reproduced reliably)\r\n\r\nFor the manual test the following code was added to a new projects form. In addition the taskbar must be manually reconfigured to allow the icon to appear in the taskbar (by default it appears in the popup so the click position may already be off the taskbar)\r\n```csharp\r\ncomponents ??= new System.ComponentModel.Container();\r\nvar ni = new NotifyIcon(components);\r\nni.ContextMenuStrip = new ContextMenuStrip\r\n{\r\n    Items =\r\n    {\r\n        new ToolStripButton(\"Hello\"),\r\n        new ToolStripButton(\"World\"),\r\n    }\r\n};\r\nni.Icon = SystemIcons.Application;\r\nni.Visible = true;\r\n```\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3665)","Url":"https://github.com/dotnet/winforms/pull/3665","RelatedDescription":"Closed or merged PR \"Fix porting regression in ToolStripDropDown\" (#3665)"},{"Id":"668255790","IsPullRequest":true,"CreatedAt":"2020-07-30T01:04:51","Actor":"JeremyKuhne","Number":"3668","RawContent":null,"Title":"Throw if we're given a null HDC in a message.","State":"closed","Body":"If we try to create a `Graphics` object from it we'll get an `OutOfMemoryException` which is not actually what is happening- GDI+ just reports that whenever you don't pass a valid HDC. Throwing when we see this so we don't chase down the wrong rabbit hole.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3668)","Url":"https://github.com/dotnet/winforms/pull/3668","RelatedDescription":"Closed or merged PR \"Throw if we're given a null HDC in a message.\" (#3668)"},{"Id":"668248365","IsPullRequest":true,"CreatedAt":"2020-07-30T00:08:38","Actor":"JeremyKuhne","Number":"3667","RawContent":null,"Title":"Add validation system for EMFs","State":"open","Body":"Creates the foundations for explicit, focused validation of drawing to EMF.  Use `.Validate` on `EmfScope`, passing in start state and an arbitrarily long list of `Validate.` methods.\r\n\r\nI'll continue to flesh this out as I write additional regression tests / new functionality tests.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3667)","Url":"https://github.com/dotnet/winforms/pull/3667","RelatedDescription":"Open PR \"Add validation system for EMFs\" (#3667)"},{"Id":"667960509","IsPullRequest":true,"CreatedAt":"2020-07-29T23:59:34","Actor":"dotnet-maestro[bot]","Number":"3664","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200724.1\r\n- **Date Produced**: 7/24/2020 3:41 PM\r\n- **Commit**: f6192d1e284a08ac05041d05fa6e60dec74b24f5\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: from 5.0.0-beta.20364.3 to 5.0.0-beta.20374.1\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20364.3 to 5.0.0-beta.20374.1\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20364.3 to 5.0.0-beta.20374.1\r\n  - **Microsoft.DotNet.RemoteExecutor**: from 5.0.0-beta.20364.3 to 5.0.0-beta.20374.1\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20364.3 to 5.0.0-beta.20374.1\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3664)","Url":"https://github.com/dotnet/winforms/pull/3664","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3664)"},{"Id":"668101511","IsPullRequest":true,"CreatedAt":"2020-07-29T23:34:12","Actor":"Tanya-Solyanik","Number":"3666","RawContent":null,"Title":"removed a duplicate property from the project file","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3666)","Url":"https://github.com/dotnet/winforms/pull/3666","RelatedDescription":"Closed or merged PR \"removed a duplicate property from the project file\" (#3666)"},{"Id":"667662088","IsPullRequest":false,"CreatedAt":"2020-07-29T08:41:42","Actor":"Zheng-Li01","Number":"3662","RawContent":null,"Title":"An exception dialog pops up after resized the PropertyGrid Control more one times","State":"open","Body":"* .NET Core Version: \r\n.Net SDK 5.0.100-rc.1.20378.13\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**More info:**\r\n1. The issue is a **regression** issue, can't repro on 5.0.100-rc.1.20377.3 build.\r\n\r\n**Minimal repro:**\r\n1. Create a .NET Core winforms application with a PropertyGrid control.\r\n2. Resize the propertyGrid1 control more one times.\r\n\r\n**Expected behavior:**\r\nThe propertyGrid1 can be resized successfully.\r\n \r\n**Actual behavior:**\r\nAn exception dialog pops up after resized the PropertyGrid Control more one times.\r\n![Exception](https://user-images.githubusercontent.com/38325459/88777819-403bbb00-d1ba-11ea-86db-b606b9e09900.gif)\r\n![Exception](https://user-images.githubusercontent.com/38325459/88777832-4467d880-d1ba-11ea-9357-881cbd00fe15.PNG)\r\n","Url":"https://github.com/dotnet/winforms/issues/3662","RelatedDescription":"Open issue \"An exception dialog pops up after resized the PropertyGrid Control more one times\" (#3662)"},{"Id":"667651913","IsPullRequest":false,"CreatedAt":"2020-07-29T08:26:23","Actor":"Jenna-Zheng","Number":"3661","RawContent":null,"Title":"[Accessibility] Keyboard focus is getting trapped while pressing right/left arrow to leave the ComboBox/TextBox items","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 5.0.100-rc.1.20378.13\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\nMore Info\r\nThe BindingNavigator/MenuStrip/ToolStrip also reproduce this issue.\r\n\r\n**Problem description:**\r\nStep 4: Keyboard focus cannot use right/left arrow to leave **ComboBox**/**TextBox** items.\r\nStep 5: Keyboard focus cannot use alt+right arrow to leave **ComboBox**/**TextBox** clockwise, only can use alt+left arrow to leave **ComboBox**/**TextBox** anticlockwise.\r\n![TestResult_arrow](https://user-images.githubusercontent.com/64949616/88774863-8e4ebf80-d1b6-11ea-85b3-0a0285764bcb.gif)\r\n\r\n**Expected behavior:**\r\nWhile navigating through right/left arrow or alt+arrow, Keyboard focus should  leave **ComboBox**/**TextBox** items.\r\n\r\n**Minimal repro:**\r\n1. Extract \"[WindowsFormsApp1.zip](https://github.com/dotnet/winforms/files/4993536/WindowsFormsApp1.zip)\" and open it in VS\r\n2. Build and run the project.\r\n3. Switch focus to **TextBox** item in **ToolStrip**.\r\n4. Using right/left arrow navigate to leave the **ComboBox**/**TextBox** items and observe.\r\n5. Using alt+arrow navigate to leave the **ComboBox**/**TextBox** items and observe.","Url":"https://github.com/dotnet/winforms/issues/3661","RelatedDescription":"Open issue \"[Accessibility] Keyboard focus is getting trapped while pressing right/left arrow to leave the ComboBox/TextBox items\" (#3661)"},{"Id":"667611990","IsPullRequest":false,"CreatedAt":"2020-07-29T07:18:17","Actor":"Zheng-Li01","Number":"3659","RawContent":null,"Title":"[Accessibility] Keyboard focus is not clearly visible on \"Categorized\", \"Alphabetical\" and \" Property Pages\" for PropertyGrid control","State":"open","Body":"* .NET Core Version: \r\n.Net SDK 5.0.100-rc.1.20378.13\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n **More info**\r\n1. The issue also can reduce when focus with mouse.\r\n\r\n**Minimal repro:**\r\n1. Extract “[PropertyGrid.zip](https://github.com/dotnet/winforms/files/4993278/PropertyGrid.zip)” and open it in VS.\r\n2. Build and run the project.\r\n3. Press \"Right/Left\" arrow to focus on  \"Categorized\", \"Alphabetical\" and \" Property Pages\".\r\n\r\n**Expected behavior:**\r\nKeyboard focus should clearly visible on \"Categorized\", \"Alphabetical\" and \" Property Pages\".\r\n\r\n**Actual behavior:**\r\nWhile navigating through Keyboard that focus is not clearly visible on \"Categorized\", \"Alphabetical\" and \" Property Pages\".\r\n![RunTime](https://user-images.githubusercontent.com/38325459/88770358-45940800-d1b0-11ea-9bc8-8db96af74300.gif)","Url":"https://github.com/dotnet/winforms/issues/3659","RelatedDescription":"Open issue \"[Accessibility] Keyboard focus is not clearly visible on \"Categorized\", \"Alphabetical\" and \" Property Pages\" for PropertyGrid control\" (#3659)"},{"Id":"667598919","IsPullRequest":false,"CreatedAt":"2020-07-29T06:52:37","Actor":"Jessie-Zhang01","Number":"3658","RawContent":null,"Title":"[Accessibility] Narrator does not read the image description of the existed image in the DataGridViewImageColumn","State":"open","Body":"* .NET Core Version: \r\n.Net SDK 5.0.100-rc.1.20378.13\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Minimal repro:**\r\n\r\n1. Extract “[DataGridViewImage.zip](https://github.com/dotnet/winforms/files/4993008/DataGridViewImage.zip)” and open it in VS.\r\n2. Build and run the project.\r\n3. Open Narrator tool, navigate to the first row, Column2, check whether the narrator reads the image description of the image present.\r\n\r\n\r\n\r\n**Expected behavior:**\r\nNarrator should read the image description of the existed image in the DataGridViewImageColumn.\r\n\r\n**Actual behavior:**\r\nNarrator does not read the image description of the existed image in the DataGridViewImageColumn.\r\n![image](https://user-images.githubusercontent.com/45864649/88764820-31e4a380-d1a8-11ea-8281-aa98999cce0e.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/3658","RelatedDescription":"Open issue \"[Accessibility] Narrator does not read the image description of the existed image in the DataGridViewImageColumn\" (#3658)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-08-02T05:30:53.6061143Z","RunDurationInMilliseconds":1095}