{"Data":{"GitHub":{"Issues":[{"Id":"638384349","IsPullRequest":true,"CreatedAt":"2020-06-15T00:16:30","Actor":"gpetrou","Number":"3449","RawContent":null,"Title":"Add ENM enum in Interop RichEdit","State":"closed","Body":"## Proposed changes\r\n\r\n- Add ENM enum in Interop RichEdit.\r\n- Remove ENM constants from RichTextBoxConstants.cs.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3449)","Url":"https://github.com/dotnet/winforms/pull/3449","RelatedDescription":"Closed or merged PR \"Add ENM enum in Interop RichEdit\" (#3449)"},{"Id":"638381953","IsPullRequest":true,"CreatedAt":"2020-06-14T16:11:38","Actor":"gpetrou","Number":"3448","RawContent":null,"Title":"Add missing Flags attribute in WM enum","State":"open","Body":"## Proposed changes\r\n\r\n- Add missing Flags attribute in WM enum.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3448)","Url":"https://github.com/dotnet/winforms/pull/3448","RelatedDescription":"Open PR \"Add missing Flags attribute in WM enum\" (#3448)"},{"Id":"638379685","IsPullRequest":true,"CreatedAt":"2020-06-14T15:59:32","Actor":"gpetrou","Number":"3447","RawContent":null,"Title":"Add CLIENTCREATESTRUCT in Interop User32 and remove unused COMRECT","State":"open","Body":"## Proposed changes\r\n\r\n- Add CLIENTCREATESTRUCT in Interop User32 and remove the corresponding class from NativeMethods.cs.\r\n- Remove unused COMRECT.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3447)","Url":"https://github.com/dotnet/winforms/pull/3447","RelatedDescription":"Open PR \"Add CLIENTCREATESTRUCT in Interop User32 and remove unused COMRECT\" (#3447)"},{"Id":"638234958","IsPullRequest":false,"CreatedAt":"2020-06-13T21:16:00","Actor":"weltkante","Number":"3446","RawContent":null,"Title":"Remove references to ControlBindingsConverter","State":"open","Body":"Follow-up to #2412 and #3444\r\n\r\n**.NET Core Version:**\r\ngithub master\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nno\r\n\r\n**Problem description:**\r\n`ControlBindingsConverter` is currently defined in the VS designer and no longer present in the WinForms runtime, yet still [referenced](https://github.com/dotnet/winforms/search?q=ControlBindingsConverter&unscoped_q=ControlBindingsConverter). The previous approach was to port these by a on-demand basis so this is currently not needed in the WinForms runtime and should be removed to avoid confusion.\r\n\r\n**Expected behavior:**\r\nMetadata attributes should not refer to nonexistant classes.\r\n\r\n**Minimal repro:**\r\nPR #2230 test failure when removing skip entry","Url":"https://github.com/dotnet/winforms/issues/3446","RelatedDescription":"Open issue \"Remove references to ControlBindingsConverter\" (#3446)"},{"Id":"638056399","IsPullRequest":false,"CreatedAt":"2020-06-13T20:52:25","Actor":"KlausLoeffelmann","Number":"3445","RawContent":null,"Title":"Port missing DesignBinding Class","State":"closed","Body":"The `DesignBinding` class, which is used in the Design-Time Environment to support Data Binding, has not been ported yet from NetFx.","Url":"https://github.com/dotnet/winforms/issues/3445","RelatedDescription":"Closed issue \"Port missing DesignBinding Class\" (#3445)"},{"Id":"638054096","IsPullRequest":false,"CreatedAt":"2020-06-13T20:52:00","Actor":"KlausLoeffelmann","Number":"3443","RawContent":null,"Title":"Port missing DesignBindingConverter","State":"closed","Body":"The `DesignBindingConverter`, which converts data bindings for use in the Design-Time environment, has not been ported yet from NetFx and is missing.","Url":"https://github.com/dotnet/winforms/issues/3443","RelatedDescription":"Closed issue \"Port missing DesignBindingConverter\" (#3443)"},{"Id":"638055362","IsPullRequest":false,"CreatedAt":"2020-06-13T20:50:15","Actor":"KlausLoeffelmann","Number":"3444","RawContent":null,"Title":"Port missing ControlBindingsConverter","State":"closed","Body":"The `ControlBindingsConverter`, which provides the `DesignBindings` and the `AdvancedBinding` for the `ControlBindingsCollection` in a Design-Time environment, has not been ported yet from NetFx and is missing.","Url":"https://github.com/dotnet/winforms/issues/3444","RelatedDescription":"Closed issue \"Port missing ControlBindingsConverter\" (#3444)"},{"Id":"637203059","IsPullRequest":true,"CreatedAt":"2020-06-12T23:44:38","Actor":"cston","Number":"3433","RawContent":null,"Title":"Test WindowsFormsApplicationBase.GetApplicationInstanceID","State":"closed","Body":"## Proposed changes\r\n\r\n- Test for `WindowsFormsApplicationBase.GetApplicationInstanceID()`.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- None. Added test only. \r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Low risk. Added test only.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit test.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3433)","Url":"https://github.com/dotnet/winforms/pull/3433","RelatedDescription":"Closed or merged PR \"Test WindowsFormsApplicationBase.GetApplicationInstanceID\" (#3433)"},{"Id":"638050921","IsPullRequest":true,"CreatedAt":"2020-06-12T23:38:30","Actor":"JeremyKuhne","Number":"3442","RawContent":null,"Title":"Add scoping structs for Win32 objects","State":"open","Body":"This builds on what I did for ScreenDC some time ago. It creates wrapper ref structs for deterministic undoing of resource creation and selection. The goal is to help prevent misordering and leaked objects while also reducing nesting complexity.\r\n\r\nNote that discards for the new style usings is a coming enhancement in C# that will make this even cleaner. If we move towards typing native handles this pattern will work well with that.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3442)","Url":"https://github.com/dotnet/winforms/pull/3442","RelatedDescription":"Open PR \"Add scoping structs for Win32 objects\" (#3442)"},{"Id":"637705956","IsPullRequest":true,"CreatedAt":"2020-06-12T12:11:01","Actor":"dotnet-maestro[bot]","Number":"3441","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200613.3\r\n- **Date Produced**: 6/13/2020 6:57 PM\r\n- **Commit**: 67d74fca70d4670ad503e23dba9d6bc8a1b5909e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20313.3\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3441)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/3441","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/runtime\" (#3441)"},{"Id":"637615139","IsPullRequest":true,"CreatedAt":"2020-06-12T09:24:35","Actor":"RussKie","Number":"3440","RawContent":null,"Title":"Correct SelectedImageKey/SelectedImageIndex/StateImageKey/StateImageIndex properties","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nResolves #3425\r\nRelates to #3364\r\n\r\n\r\n## Proposed changes\r\n\r\n- Setters for `ImageKey` and `ImageIndex` properties were made idempotent in #3126, however the change didn't account for the fact that the default `ImageKey == \"\"` and not `null`.\r\n  This caused failures to reset `SelectedImageIndex` or `StateImageIndex`, when `SelectedImageKey` or `StateImageKey` were set respectively to `\"\"`; and in reverse - failure to reset keys when indices were set to `-1`.\r\n  Tweak the setters to continue execution for default values.\r\n- More clean up to use const instead of magic number.\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- unit tests\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3440)","Url":"https://github.com/dotnet/winforms/pull/3440","RelatedDescription":"Open PR \"Correct SelectedImageKey/SelectedImageIndex/StateImageKey/StateImageIndex properties\" (#3440)"},{"Id":"637585608","IsPullRequest":false,"CreatedAt":"2020-06-12T08:35:49","Actor":"Vino-Wang","Number":"3439","RawContent":null,"Title":"Cannot successfully assign a ListViewItem to a specified group in PropertyGrid","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0.100-preview.7.20311.17\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nThe setting is not successfully, the Group property was return to ‘(none)’ after clicking OK button.\r\n![Group](https://user-images.githubusercontent.com/18568603/84482566-91572480-acca-11ea-9f9e-83f1a107d5be.gif)\r\n\r\n**More Info:**\r\n1.\tThis issue is not a regression, can reproduce from .NET3.5 ~.NET4.8 in classic project and from .NET core 3.0 ~.NET 5.0 in Core project.\r\n2.\tThis issue is not reproducing when setting the Group property in designer properties window.\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n**Expected behavior:**\r\nThe Group property should be set successfully.\r\n\r\n**Minimal repro:**\r\n1.\tCreate a Winforms core project.\r\n2.\tDrag and drop a PropertyGrid and a ListView control to Form.\r\n3.\tAdd following code in InitializeComponent() part.\r\npublic Form1()\r\n{\r\n    InitializeComponent();\r\n        **propertyGrid1.SelectedObject = listView1;**\r\n}\r\n4.\tBuild and run.\r\n5.\tAdd one ListViewGroup that Header is ‘Group1’ by clicking the browser button next to the **Groups** property of ListView.\r\n6.\tAdd one ListViewItem that Text is ‘Item1’ by clicking the browser button next to the **Items** property of ListView.\r\n7.\tFind the **Group** property of the Item1, and set to ‘Group1’.\r\n8.\tClick OK button in ListViewItem Collection Editor.\r\n\r\nOr \r\n1.\tRun the attached project. [SetGroupProperty.zip](https://github.com/dotnet/winforms/files/4769633/SetGroupProperty.zip)\r\n2.\tRepeat the above step5~8.\r\n","Url":"https://github.com/dotnet/winforms/issues/3439","RelatedDescription":"Open issue \"Cannot successfully assign a ListViewItem to a specified group in PropertyGrid\" (#3439)"},{"Id":"636990674","IsPullRequest":true,"CreatedAt":"2020-06-12T06:13:03","Actor":"weltkante","Number":"3429","RawContent":null,"Title":"WebBrowser doesn't like multiple UI threads","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nWorkaround for #3358\r\n\r\n(Extended version of PR #3423)\r\n\r\nLike mentioned on the other PR this is only a workaround and not a final solution, further investigation to the memory corruption issues are desired. There is also the possibility of another memory corruption source we did not pinpoint yet.\r\n\r\n## Proposed changes\r\n\r\nPrevent running WebBrowser control tests on multiple UI threads in parallel as that seems to cause memory corruption (unknown whether root cause is in WinForms or native control)\r\n\r\n## Customer Impact\r\n\r\nno random crashes due to memory corruption in unit tests, should improve CI sucess rates\r\n\r\n## Regression? \r\n\r\nno\r\n\r\n## Risk\r\n\r\nmay slow down tests a bit\r\n\r\n### Before\r\n\r\nrandom CI crashes or test failures that made no sense due to memory corruption\r\n\r\n### After\r\n\r\nprevent memory corruption, allowing CI runs to perform normally\r\n\r\n\r\n## Test methodology\r\n\r\nisolated repro scenario into a separate application, it doesn't seem to cause memory corruption when only one UI thread is running the WebBrowser control\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3429)","Url":"https://github.com/dotnet/winforms/pull/3429","RelatedDescription":"Closed or merged PR \"WebBrowser doesn't like multiple UI threads\" (#3429)"},{"Id":"637299923","IsPullRequest":true,"CreatedAt":"2020-06-12T05:45:06","Actor":"lonitra","Number":"3435","RawContent":null,"Title":"Throw Exception setting invalid value for 'ListViewGroupCollapsedState'","State":"closed","Body":"Fixes #3424 \r\n\r\n\r\n## Proposed changes\r\n\r\n- throw `InvalidEnumArgumentException` when the `CollapsedState` of a `ListViewGroup `\r\nis set to a value outside the range of the `ListViewGroupCollapsedState` enum\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Prevents user from having invalid enum for `ListViewGroup.CollapsedState`\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n- Unit testing\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3435)","Url":"https://github.com/dotnet/winforms/pull/3435","RelatedDescription":"Closed or merged PR \"Throw Exception setting invalid value for 'ListViewGroupCollapsedState'\" (#3435)"},{"Id":"636749012","IsPullRequest":false,"CreatedAt":"2020-06-12T05:45:06","Actor":"Vino-Wang","Number":"3424","RawContent":null,"Title":"No exception setting an invalid value for `ListViewGroupCollapsedState`","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET SDK 5.0.100-preview.6.20309.18\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n<!-- Yes / No -->\r\n\r\n**More Info:**\r\nThis is a new supported property(new API: CollapsedState) in .NET 5.0 Preview 6, here is the pull: https://github.com/dotnet/winforms/pull/3155\r\n\r\n**Problem description:**\r\nNo exception is thrown when setting an invalid value(e.g. -1, 3, 100) for Enum type ‘ListViewGroupCollapsedState’.\r\n![Actual](https://user-images.githubusercontent.com/18568603/84351612-5089dd80-abee-11ea-9032-9661e355ebcb.PNG)\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n**Expected behavior:**\r\nThere should be an exception occurring: System.ComponentModel.InvalidEnumArgumentException: ‘The value of argument ‘value’ (-1) is invalid for Enum type ‘ListViewGroupCollapsedState’. (Parameter ‘value’)’\r\n![Expected_FooterAlignment](https://user-images.githubusercontent.com/18568603/84351513-1c162180-abee-11ea-9dab-b86a7d04cb79.PNG)\r\n**Minimal repro:**\r\n1.\tCreate a winforms core project.\r\n2.\tDrag and drop a ListView control to Form designer.\r\n3.\tAdd a ListViewGroup to it by clicking Edit Groups…\r\n4.\tAdd following code to Form_Load event.\r\nlistView1.Groups[0].CollapsedState = (ListViewGroupCollapsedState)(-1);\r\ntextBox1.Text = listView1.Groups[0].CollapsedState.ToString();\r\n5.\tBuild and run.\r\n\r\nOr \r\n1.\tDownload the attached project. [ListViewGroup_CollapsedStateIssue.zip](https://github.com/dotnet/winforms/files/4762927/ListViewGroup_CollapsedStateIssue.zip)\r\n2.\tExtract it and run it.\r\n","Url":"https://github.com/dotnet/winforms/issues/3424","RelatedDescription":"Closed issue \"No exception setting an invalid value for `ListViewGroupCollapsedState`\" (#3424)"},{"Id":"637174893","IsPullRequest":true,"CreatedAt":"2020-06-12T05:44:03","Actor":"sharwell","Number":"3431","RawContent":null,"Title":"Define a CompileDesignTime target for Accessibility.ilproj","State":"closed","Body":"Fixes failures to resolve `IAccessible` in **System.Windows.Forms.Primitives** inside the IDE.\r\n","Url":"https://github.com/dotnet/winforms/pull/3431","RelatedDescription":"Closed or merged PR \"Define a CompileDesignTime target for Accessibility.ilproj\" (#3431)"},{"Id":"637244787","IsPullRequest":true,"CreatedAt":"2020-06-12T03:56:57","Actor":"JeremyKuhne","Number":"3434","RawContent":null,"Title":"System.Resources cleanup","State":"closed","Body":"Some non-functional cleanup of the System.Resources code. The first commit just breaks the classes out. The second changes (most of) the field names to be per standard. The third just does some simple spacing fixes and catches on classes fields I missed in the second.\r\n\r\ncc: @KlausLoeffelmann \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3434)","Url":"https://github.com/dotnet/winforms/pull/3434","RelatedDescription":"Closed or merged PR \"System.Resources cleanup\" (#3434)"},{"Id":"636192670","IsPullRequest":true,"CreatedAt":"2020-06-12T03:52:47","Actor":"dotnet-maestro[bot]","Number":"3420","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200611.2\r\n- **Date Produced**: 6/11/2020 10:59 AM\r\n- **Commit**: ddea36269ee4522213a6a9db8680f9da03935f7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3420)\r\n","Url":"https://github.com/dotnet/winforms/pull/3420","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3420)"},{"Id":"637445144","IsPullRequest":false,"CreatedAt":"2020-06-12T02:48:15","Actor":"vsfeedback","Number":"3438","RawContent":null,"Title":"Error en reposicionamiento de un control Label con Autosize=TRUE y Anchor=Bottom,Left","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/1070453/error-en-reposicionamiento-de-un-control-label-con.html)._\n\n---\nHe detectado el siguiente funcionamiento anómalo:\nTengo una pantalla con varios controles, entre ellos un TabControl y un DataGridview. Enmedio de los dos hay dos Labels.\nAl cargar la pantalla, esos dos Labels que tienen sus propiedades Autosize=TRUE y Anchor=Bottom,Left, se colocan en una posición no correcta, que debería ser entre el DataGridView y el TabControl.\nHe visto que si cambio la propiedad Autosize a FALSE, ese mal comportamiento se arregla.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 6/10/2020, 00:02 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### John Qiao [MSFT] on 6/10/2020, 02:27 PM: \n\n<p>Hi Maria,</p>\n<p>Thanks for your feedback.</p>\n<p>If you can reproduce this issue in a new simple project, please share your sample project here, we will test and check this scenario using your sample project on our side, that can help us provide the better response to you.</p>\n\n#### maria.garbero on 6/10/2020, 03:38 PM: \n\n(private comment, text removed)\n#### John Qiao [MSFT] on 6/10/2020, 05:28 PM: \n\n(private comment, text removed)\n#### maria.garbero on 6/10/2020, 05:36 PM: \n\n<p>Sorry, but I need to change cbAño.SelectedIndex on Form_Load because I need that when I show form, DataGrid already has rows.</p><p>If I use Form Shown events, user can be how datagrid is filled.</p><p>I don't understand why it fails when autosize is True... Because height is the same, only width changes on text fills.</p><p>I think that is a bug of Visual Studio WinForms.</p>\n\n#### John Qiao [MSFT] on 6/11/2020, 02:15 PM: \n\n(private comment, text removed)\n#### maria.garbero on 6/11/2020, 02:23 PM: \n\n<p>Sorry but I can't remove RellenaFicha from RecuperaPagos because I use it on another part of code (I only sent you a part of code of a complex form).</p><p>If you disable Autosize property of labels, the problem has resolved.</p><p>I think that is a bug of Visual Studio. Could you report to support developer team? Thanks.</p>\n\n#### John Qiao [MSFT] on 6/11/2020, 04:12 PM: \n\n<p>Hi Maria,</p><p>Thanks for your reply. </p><p>So, could you use below codes to showing the fPago form? That will resolve the label display issue. </p><pre>    Private Sub fMDI_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n        Dim fPago As New fPagos\n        'fPago = New fPagos With {\n        '    .MdiParent = Me,\n        '    .Dock = DockStyle.Fill\n        '}\n        fPago.TopLevel = False\n        fPago.Parent = Me\n        fPago.Dock = DockStyle.Fill\n        fPago.Show()\n        fPago.Select()\n    End Sub\n<br></pre>\n\n#### maria.garbero on 6/11/2020, 04:51 PM: \n\n<p>Sorry, but your code is not valid because parent is a MDIForm.</p>\n\n#### John Qiao [MSFT] on 6/11/2020, 05:08 PM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n\n#### maria.garbero solved on 6/11/2020, 05:15 PM, 0 votes: \n\n<p>Sorry, but I have problems with upper panel that I have in the original app.</p><p>I attach new project edited.</p><p><a target='_blank' href=\"https://developercommunity.visualstudio.com/storage/attachments/141051-errorlabelautosize.zip\">errorlabelautosize.zip</a></p>\n","Url":"https://github.com/dotnet/winforms/issues/3438","RelatedDescription":"Open issue \"Error en reposicionamiento de un control Label con Autosize=TRUE y Anchor=Bottom,Left\" (#3438)"},{"Id":"637326672","IsPullRequest":true,"CreatedAt":"2020-06-12T02:23:56","Actor":"JeremyKuhne","Number":"3436","RawContent":null,"Title":"Update start-vs.cmd to use current VS","State":"closed","Body":"Use the developer command prompt VS if available, fall back on devenv\r\nin the path, then finally to file association for .sln.\r\n\r\nNormalize casing of the commands.\r\n\r\ncc: @lonitra \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3436)","Url":"https://github.com/dotnet/winforms/pull/3436","RelatedDescription":"Closed or merged PR \"Update start-vs.cmd to use current VS\" (#3436)"},{"Id":"637390557","IsPullRequest":false,"CreatedAt":"2020-06-11T23:50:16","Actor":"KlausLoeffelmann","Number":"3437","RawContent":null,"Title":"Setting a TreeNode to a certain position in a TreeNodeCollection is inserting it rather than replacing the existing one.","State":"open","Body":"**.NET Core Version:**\r\nAll Versions from NetFx2.0 to CoreFx5.0\r\n\r\n**Have you experienced this same bug with .NET Framework?**\r\nYes\r\n\r\n**Problem description:**\r\nAssigning a TreeNode object to the TreeNodeCollection Index property inserts it to the underlying Windows TreeView control rather than updating the existing, and causes the .NET Nodes collection no longer to be in sync with the Windows TreeView control.\r\n\r\n\r\n**Expected behavior:**\r\nNode should be updated.\r\n\r\n**Minimal repro:**\r\n* Create a new WinForms App\r\n* Insert a TreeView on the Form.\r\n* Insert the folloing code in the Form_Load event handler.\r\n\r\n```\r\n       private void Form1_Load(object sender, EventArgs e)\r\n        {\r\n            treeView1.Nodes.Clear();\r\n\r\n            treeView1.Nodes.Add(new TreeNode(\"Item1\"));\r\n            treeView1.Nodes.Add(new TreeNode(\"Item2_node\"));\r\n            treeView1.Nodes.Add(new TreeNode(\"Item3\"));\r\n  \r\n            var node = treeView1.Nodes[1];\r\n            treeView1.Nodes[1] = node;\r\n        }\r\n```  \r\nAfter running this code, the TreeView shows:\r\n\r\n![image](https://user-images.githubusercontent.com/9663150/84449995-cc425500-ac03-11ea-95fc-32a22e0517c5.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/3437","RelatedDescription":"Open issue \"Setting a TreeNode to a certain position in a TreeNodeCollection is inserting it rather than replacing the existing one.\" (#3437)"},{"Id":"637181628","IsPullRequest":true,"CreatedAt":"2020-06-11T17:02:38","Actor":"vladimir-krestov","Number":"3432","RawContent":null,"Title":"Fixing control Handle force creating when creating ControlAccessibleObject","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3062\r\nBased on [this comment](https://github.com/dotnet/winforms/issues/3062#issuecomment-642313370)\r\n\r\n\r\n## Proposed changes\r\n\r\n- Check IsHandleCreated property before setting Handle value in ControlAccessibleObject constructor\r\n- Fix affected unit tests \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Has no distinct user impact but may resolve latent bugs. (like this #2797)\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Breaks 150+ unit tests (will be fixed here)\r\n- May break customer workarounds\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- unit tests\r\n- CTI\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- Microsoft Windows [Version 10.0.18363.900]\r\n- .NET SDK (5.0.100-preview.7.20305.3)\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3432)","Url":"https://github.com/dotnet/winforms/pull/3432","RelatedDescription":"Open PR \"Fixing control Handle force creating when creating ControlAccessibleObject\" (#3432)"},{"Id":"637089123","IsPullRequest":false,"CreatedAt":"2020-06-11T15:02:02","Actor":"snhg","Number":"3430","RawContent":null,"Title":"System.Windows.Forms.ListView.HideSelection issue with net48 migration","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Version: \r\n.NET 4.8\r\n\r\n**Problem description:**\r\n\r\nMigrated winforms project from net472 to net48 and found that one of the control using System.Windows.Forms.ListView was not looking good. found that the HideSelection was set to False even though anywhere in my code its not set and left default to \"true\".\r\n\r\n**Expected behavior:**\r\nwhen the property not set in Designer it should be by default \"true\" not \"false\" as its happening in net48.\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/3430","RelatedDescription":"Open issue \"System.Windows.Forms.ListView.HideSelection issue with net48 migration\" (#3430)"},{"Id":"636975467","IsPullRequest":false,"CreatedAt":"2020-06-11T12:32:47","Actor":"PasaOpasen","Number":"3428","RawContent":null,"Title":"numericUpDown goes to default parameters in the time of building","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET Core 3.1\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\nnumericUpDown parameters (Value exactly) go to default in the time of building. I choose current params, but after building there are default params and after closing of application there are same params in constuctor\r\n\r\nTo reproduce \r\n1. clone [this repository](https://github.com/PasaOpasen/Wave-animation-from-svd), \r\n\r\n2. open the [solution](https://github.com/PasaOpasen/Wave-animation-from-svd/tree/master/Svd_to_animation), \r\n\r\n3. comment 22-74 lines in [this file](https://github.com/PasaOpasen/Wave-animation-from-svd/blob/master/Svd_to_animation/Svd_to_animation/ScrollForm.cs)\r\n\r\n4. uncomment 30 line in [this file](https://github.com/PasaOpasen/Wave-animation-from-svd/blob/master/Svd_to_animation/Svd_to_animation/Form1.cs)\r\n\r\n5. set not default parameters for numericUpDown1 (by construcor!!!) into ScrollForm and build. \r\n\r\nU can set Value as 30, but after build it will be 0 (default)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3428","RelatedDescription":"Open issue \"numericUpDown goes to default parameters in the time of building\" (#3428)"},{"Id":"636957478","IsPullRequest":true,"CreatedAt":"2020-06-11T12:27:06","Actor":"dotnet-maestro[bot]","Number":"3427","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200609.1\r\n- **Date Produced**: 6/9/2020 8:21 PM\r\n- **Commit**: 54d096ee50a9bcf7ac6efd16a07d51af651d20a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: from 5.0.0-beta.20280.1 to 5.0.0-beta.20309.1\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20280.1 to 5.0.0-beta.20309.1\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20280.1 to 5.0.0-beta.20309.1\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20280.1 to 5.0.0-beta.20309.1\r\n  - **Microsoft.DotNet.RemoteExecutor**: from 5.0.0-beta.20280.1 to 5.0.0-beta.20309.1\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3427)","Url":"https://github.com/dotnet/winforms/pull/3427","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3427)"},{"Id":"636848650","IsPullRequest":true,"CreatedAt":"2020-06-11T09:03:24","Actor":"SergeySmirnov-Akvelon","Number":"3426","RawContent":null,"Title":"Adding check for \"IsHandleCreated\" flag to RaiseAutomation methods","State":"open","Body":"Fixes #3419\r\n\r\n\r\n## Proposed changes\r\nAdded check for \"IsHandleCreated\" flag to \"RaiseAutomationEvent\" and \"RaiseAutomationPropertyChangedEvent\" methods. Added wrapper of RaiseAutomation methods to ControlAccessibleObject\r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- Unit testing\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.18363.836]\r\n- .Net Version: 5.0.100-preview.7.20308.6\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3426)","Url":"https://github.com/dotnet/winforms/pull/3426","RelatedDescription":"Open PR \"Adding check for \"IsHandleCreated\" flag to RaiseAutomation methods\" (#3426)"},{"Id":"636768068","IsPullRequest":false,"CreatedAt":"2020-06-11T06:56:02","Actor":"Ashley-Li","Number":"3425","RawContent":null,"Title":"The SelectedImageIndex value is not automatically set to -1 after set the SelectedImageKey property to an empty string","State":"open","Body":"*  .NET Core Version: \r\n.NET 5.0.100-preview.6.20309.18 from master branch\r\n\r\n* .More info\r\nThis is a regression issue, this issue cannot reproduce in .NET 5.0.100-preview.5.20272.9 build.\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\nThe SelectedImageKey and SelectedImageIndex properties are mutually exclusive; if one is set, the other is ignored. But now if set the SelectedImageKey property to an empty string, the SelectedImageIndex property is not automatically set to -1.\r\n\r\n**Current behavior:**\r\nThe SelectedImageIndex value is not automatically set to -1 after set the SelectedImageKey  property to an empty string.\r\n\r\n**Expected behavior:**\r\nThe SelectedImageIndex value should be automatically set to -1 after set the SelectedImageKey  property to an empty string.\r\n\r\n**Minimal repro:**\r\n1. Run the attached project.\r\n[TestApp.zip](https://github.com/dotnet/winforms/files/4763082/TestApp.zip)\r\n2. Click the button1, then observe the value displayed in the message Box.","Url":"https://github.com/dotnet/winforms/issues/3425","RelatedDescription":"Open issue \"The SelectedImageIndex value is not automatically set to -1 after set the SelectedImageKey property to an empty string\" (#3425)"},{"Id":"636471680","IsPullRequest":true,"CreatedAt":"2020-06-11T04:10:24","Actor":"weltkante","Number":"3423","RawContent":null,"Title":"WebBrowser doesn't like multiple UI threads","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nWorkaround for #3358\r\n\r\n## Proposed changes\r\n\r\nPrevent running WebBrowser control tests on multiple UI threads in parallel as that seems to cause memory corruption (unknown whether root cause is in WinForms or native control)\r\n\r\n## Customer Impact\r\n\r\nno random crashes due to memory corruption in unit tests, should improve CI sucess rates\r\n\r\n## Regression? \r\n\r\nno\r\n\r\n## Risk\r\n\r\nmay slow down tests a bit\r\n\r\n### Before\r\n\r\nrandom CI crashes or test failures that made no sense due to memory corruption\r\n\r\n### After\r\n\r\nprevent memory corruption, allowing CI runs to perform normally\r\n\r\n\r\n## Test methodology\r\n\r\nisolated repro scenario into a separate application, it doesn't seem to cause memory corruption when only one UI thread is running the WebBrowser control\r\n","Url":"https://github.com/dotnet/winforms/pull/3423","RelatedDescription":"Closed or merged PR \"WebBrowser doesn't like multiple UI threads\" (#3423)"},{"Id":"636423251","IsPullRequest":true,"CreatedAt":"2020-06-10T17:26:12","Actor":"hughbe","Number":"3422","RawContent":null,"Title":"Remove PropertyGrid remoting code","State":"open","Body":"This is not supported in .NET Core\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3422)","Url":"https://github.com/dotnet/winforms/pull/3422","RelatedDescription":"Open PR \"Remove PropertyGrid remoting code\" (#3422)"},{"Id":"636367943","IsPullRequest":false,"CreatedAt":"2020-06-10T15:59:15","Actor":"vladimir-krestov","Number":"3421","RawContent":null,"Title":"[Accessibility] Needs to implement UIA provider for all controls","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* Base issue: #2146\r\n* Base PR: #3037 \r\n\r\n* .NET Core Version: 5.0\r\n\r\n**Problem description:**\r\n- Many .Net Core WinForms controls support `MSAA` proxy, which is unmanaged for us. These controls don't support `UIA` provider. This doesn't allow us to change some Accessibility properties or methods to fix some Accessibility bugs. We can't manage our AccessibleObjects fully.\r\n\r\n**Expected behavior:**\r\n- All .Net 5.0 controls support UIA provider\r\n\r\n**Minimal repro:**\r\n- Create a .Net 5.0 Winforms app\r\n- Add any control to the MainForm\r\n- Check `ProviderDescription` Accessibility property of this control using Inspect\r\n\r\n## Controls\r\n**In progress:**\r\n- [ ]  Splitter (#3246)\r\n- [ ]  RadioButton (#3244)\r\n- [ ]  PictureBox (#3233)\r\n- [ ]  CheckBox (#3228)\r\n- [ ]  ListView (#3224)\r\n- [ ]  Button (#3215)\r\n\r\n**In the future:**\r\n- [ ]  GridErrorDlg\r\n- [ ]  GridToolTip\r\n- [ ]  MdiControlStrip\r\n- [ ]  MdiWindowListStrip\r\n- [ ]  ToolStripScrollButton\r\n- [ ]  UpDownBase - abstract\r\n- [ ]  MarshalingControl - sealed\r\n- [ ]  MdiWindowDialog - sealed\r\n- [ ]  ComponentEditorForm\r\n- [ ]  ParkingWindow - sealed\r\n- [ ]  ToolStripPanel\r\n- [ ]  SendKeys\r\n- [ ]  PrintControllerWithStatusDialog\r\n- [ ]  ComponentEditorPage\r\n- [ ]  ListControl - abstract\r\n- [ ]  ScrollBar\r\n- [ ]  TextBoxBase\r\n- [ ]  AxHost\r\n- [ ]  BindingNavigator\r\n- [ ]  ContainerControl\r\n- [ ]  ContextMenuStrip\r\n- [ ]  DateTimePicker\r\n- [ ]  FlowLayoutPanel\r\n- [ ]  HScrollBar\r\n- [ ]  MaskedTextBox\r\n- [ ]  MenuStrip\r\n- [ ]  NumericUpDown","Url":"https://github.com/dotnet/winforms/issues/3421","RelatedDescription":"Open issue \"[Accessibility] Needs to implement UIA provider for all controls\" (#3421)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-06-15T05:30:53.2415712Z","RunDurationInMilliseconds":725}