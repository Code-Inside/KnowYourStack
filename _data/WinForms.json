{"Data":{"GitHub":{"Issues":[{"Id":"1051446532","IsPullRequest":true,"CreatedAt":"2021-11-12T02:27:40","Actor":"RussKie","Number":"6171","RawContent":null,"Title":"(Servicing) Emit font in app bootstrap locale agnostic","State":"closed","Body":"Fixes #6144.\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\n- Ensure that the application bootstrap code is generated in locale independent manner.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customer with locales where decimal separator is not `.` will now have a correct code emitted by the source generated `ApplicationConfiguration` API.\r\n\r\n## Regression? \r\n\r\n- No, new feature introduced in .NET 6 RC2\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual\r\n- added unit tests\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6171)","Url":"https://github.com/dotnet/winforms/pull/6171","RelatedDescription":"Closed or merged PR \"(Servicing) Emit font in app bootstrap locale agnostic\" (#6171)"},{"Id":"1050663216","IsPullRequest":true,"CreatedAt":"2021-11-11T23:41:26","Actor":"RussKie","Number":"6164","RawContent":null,"Title":"Emit font in app bootstrap locale agnostic","State":"closed","Body":"\r\nFixes #6144.\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\n- Ensure that the application bootstrap code is generated in locale independent manner.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customer with locales where decimal separator is not `.` will now have a correct code emitted by the source generated `ApplicationConfiguration` API.\r\n\r\n## Regression? \r\n\r\n- No, new feature introduced in .NET 6 RC2\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual\r\n- added unit tests\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6164)","Url":"https://github.com/dotnet/winforms/pull/6164","RelatedDescription":"Closed or merged PR \"Emit font in app bootstrap locale agnostic\" (#6164)"},{"Id":"1048835876","IsPullRequest":false,"CreatedAt":"2021-11-11T23:41:26","Actor":"deng0","Number":"6144","RawContent":null,"Title":"ApplicationConfiguration Code Generation bug","State":"closed","Body":"* .NET Core Version: \r\n6.0.0\r\n\r\n**Problem description:**\r\nWhen windows system language is set to a language which uses comma as decimal separator the code generator which creates the ApplicationConfiguration class messes up the decimal separator in emSize for the font\r\n\r\nFor instance when `<ApplicationDefaultFont>Microsoft Sans Serif, 8.25pt</ApplicationDefaultFont>` is set int the csproj file, the following is generated, which obviously does not compile:\r\n`Application.SetDefaultFont(new Font(new FontFamily(\"Microsoft Sans Serif\"), 8,25f, (FontStyle)0, (GraphicsUnit)3));`\r\n\r\n\r\nThe bug is probably here:\r\nhttps://github.com/dotnet/winforms/blob/c87540e90d424d126306a7f1909f75672ca6004f/src/System.Windows.Forms.Analyzers/src/System/Windows/Forms/ApplicationConfig.FontDescriptor.cs#L35\r\n\r\nIt obviously should use invariant culture to create that string.","Url":"https://github.com/dotnet/winforms/issues/6144","RelatedDescription":"Closed issue \"ApplicationConfiguration Code Generation bug\" (#6144)"},{"Id":"1050973983","IsPullRequest":false,"CreatedAt":"2021-11-11T22:59:18","Actor":"ghost","Number":"6168","RawContent":null,"Title":"question: chart in winforms .net 6.0","State":"closed","Body":"Hi\r\n\r\nIn .NET 4.8 I used the chart UI widget in winforms UI designer to make different kind of charts (pie chart, bar chart, ...).\r\nNow I try to port my .net 4.8 code to .net 6.0 but I can't find the chart widget anymore. It's just not in the list...\r\n\r\nI use visual studio community 17.0\r\n\r\nThanks","Url":"https://github.com/dotnet/winforms/issues/6168","RelatedDescription":"Closed issue \"question: chart in winforms .net 6.0\" (#6168)"},{"Id":"1051349560","IsPullRequest":false,"CreatedAt":"2021-11-11T20:49:00","Actor":"ghost","Number":"6169","RawContent":null,"Title":"toolstripstatuslabel question","State":"open","Body":"Hi\r\n\r\nYou just close this issue here https://github.com/dotnet/winforms/issues/6160\r\nwithout any explanation.\r\n\r\nWhat's the logic behind using \"&&\" in order to get \"&\" displayed on a toolstripstatuslabel ?\r\nWhy is this changed compared to .net 4.8?\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6169","RelatedDescription":"Open issue \"toolstripstatuslabel question\" (#6169)"},{"Id":"1050287020","IsPullRequest":true,"CreatedAt":"2021-11-11T19:19:59","Actor":"dreddy-work","Number":"6158","RawContent":null,"Title":"[6.0][Servicing] Fix nested container controls scaling that have AutoscaleMode as Inherit","State":"closed","Body":"* Fix nested ContainerControls that have `AutoscaleMode `as `Inherit`.\r\n\r\nA change in supporting scaling for `MDI `child windows in PermonV2 mode applications regressed this. Issue impact Winforms applications that are running in `PerMonV2 `mode. While winforms not yet fully support  PerMonV2 mode, customers are creating and using this mode for their applications, since .NET Framework 4.7.3, and get it working for less complex winforms applications with some work arounds. \r\n\r\nFixes #6152.\r\n\r\n\r\n## Regression? \r\n\r\n- Yes, from .NET 5.0. \r\n\r\n## Risk\r\n- Low. Fix is already in 7.0 and tested for `PermonV2 `mode.\r\n- \r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual  CTI validation.\r\n- Running customer provided applications and making sure change fixing them.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6158)","Url":"https://github.com/dotnet/winforms/pull/6158","RelatedDescription":"Closed or merged PR \"[6.0][Servicing] Fix nested container controls scaling that have AutoscaleMode as Inherit\" (#6158)"},{"Id":"1050962173","IsPullRequest":true,"CreatedAt":"2021-11-11T13:43:22","Actor":"dotnet-maestro[bot]","Number":"6167","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211111.1\r\n- **Date Produced**: November 11, 2021 11:38:03 AM UTC\r\n- **Commit**: 6f5de0b2b979a70e6fe36904d0d4f087c32f9c7e\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/dfb8c90...6f5de0b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6167)","Url":"https://github.com/dotnet/winforms/pull/6167","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6167)"},{"Id":"1050847981","IsPullRequest":true,"CreatedAt":"2021-11-11T10:52:56","Actor":"SergeySmirnov-Akvelon","Number":"6166","RawContent":null,"Title":"Fixing NotSupportedException from \"AccessibleObject.RuntimeId\" property","State":"open","Body":"Fixes #6165\r\n\r\n## Proposed changes\r\n- The issue is reproduced because we throw an `NotSupportedException` when user tries to get the `RuntimeId` properties for the base `AccessibleObject`.\r\n- Added return of `Array.Empty` for base class\r\n- Remove `AccessibleObjectRuntimeIdNotSupported` from string resources\r\n\r\n## Customer Impact\r\n**Before fix:** \r\n![Issue-6165](https://user-images.githubusercontent.com/23376742/141281075-9d567d01-06e6-470f-8987-a80368ad7b85.gif)\r\n\r\n**After fix:**\r\n![Issue-6165-fixed](https://user-images.githubusercontent.com/23376742/141285880-6fab234d-3e33-48cb-a2d0-0d9bfec85e98.gif)\r\n\r\n## Regression? \r\n- Yes (from #5638)\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- Manual testing \r\n\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Inspect\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- .NET Core SDK: 7.0.0-alpha.1.21558.10\r\n- Microsoft Windows [Version 10.0.19041.804]\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6166)","Url":"https://github.com/dotnet/winforms/pull/6166","RelatedDescription":"Open PR \"Fixing NotSupportedException from \"AccessibleObject.RuntimeId\" property\" (#6166)"},{"Id":"1050803781","IsPullRequest":false,"CreatedAt":"2021-11-11T10:03:01","Actor":"SergeySmirnov-Akvelon","Number":"6165","RawContent":null,"Title":"The application crashes when trying to get data about the DropDownList in the PropertyGrid through the Inspect","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n.NET Core Version: \r\n- 7.0.0-alpha.1.21558.10\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\n- No (regression from #5638)\r\n\r\n**Repro steps:**\r\n\r\n1. Create an app with a `PropertyGrid` and button.\r\n2. Set `Button` as `SelectedObject` property of `PropertyGrid`.\r\n3. Run the app.\r\n4. Run the Inspect.\r\n5. Set focus to `Accessible Role` dropdown list.\r\n\r\n**Actual behavior:**\r\nThe Application crashes:\r\n![Issue-6165](https://user-images.githubusercontent.com/23376742/141281075-9d567d01-06e6-470f-8987-a80368ad7b85.gif)\r\n\r\n**Expected behavior:**\r\nThe application should not crash.","Url":"https://github.com/dotnet/winforms/issues/6165","RelatedDescription":"Open issue \"The application crashes when trying to get data about the DropDownList in the PropertyGrid through the Inspect\" (#6165)"},{"Id":"1050500999","IsPullRequest":true,"CreatedAt":"2021-11-11T05:08:43","Actor":"gewarren","Number":"6161","RawContent":null,"Title":"Fix some comments","State":"closed","Body":"Fixes two code comments.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nNone. \r\n\r\n## Regression? \r\n\r\nNo\r\n\r\n## Risk\r\n\r\nLow\r\n\r\n<!-- end TELL-MODE -->\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6161)","Url":"https://github.com/dotnet/winforms/pull/6161","RelatedDescription":"Closed or merged PR \"Fix some comments\" (#6161)"},{"Id":"1050559863","IsPullRequest":false,"CreatedAt":"2021-11-11T04:32:18","Actor":"ghost","Number":"6162","RawContent":null,"Title":"question: chart in winforms .net 6.0","State":"closed","Body":"Hi\r\n\r\nIn .NET 4.8 I used the chart UI widget in winforms UI designer to make different kind of charts (pie chart, bar chart, ...).\r\nNow I try to port my .net 4.8 code to .net 6.0 but I can't find the chart widget anymore. It's just not in the list...\r\n\r\nI use visual studio community 17.0\r\n\r\nThanks","Url":"https://github.com/dotnet/winforms/issues/6162","RelatedDescription":"Closed issue \"question: chart in winforms .net 6.0\" (#6162)"},{"Id":"1050487957","IsPullRequest":false,"CreatedAt":"2021-11-11T04:29:42","Actor":"ghost","Number":"6160","RawContent":null,"Title":"bug: toolstripstatuslabel text","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET 6.0 (Visual Studio 2022)\r\n\r\n* Have you experienced this same bug with .NET Framework?\r\nNo\r\n\r\n**Problem description:**\r\n\r\nWhen you create a toolstrip on a winform and add a toolstripstatuslabel with any Text property containing a '&' character in the string, the '&' character is not displayed. All rest of the string however is displayed but not the '&'.\r\n\r\n**Expected behavior:**\r\n\r\nThe '&' character should be displayed as in .NET 4.8\r\n\r\n**Minimal repro:**\r\n\r\n1. Create a new winform \r\n2. Add a toolstrip to the winform\r\n3. Add a toolstripstatuslabel to'the toolstrip\r\n4. Assign any string with one or more '&' characters to the Text property of the toolstripstatuslabel\r\n5. Compile and run\r\n6. The '&' characters are not displayed, but all other characters of the string are displayed correctly","Url":"https://github.com/dotnet/winforms/issues/6160","RelatedDescription":"Closed issue \"bug: toolstripstatuslabel text\" (#6160)"},{"Id":"1050342363","IsPullRequest":true,"CreatedAt":"2021-11-10T22:27:29","Actor":"dotnet-maestro[bot]","Number":"6159","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:84f431dc-3375-4a46-af87-08d961c59698)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 84f431dc-3375-4a46-af87-08d961c59698\r\n- **Build**: 20211110.2\r\n- **Date Produced**: November 10, 2021 5:15:38 PM UTC\r\n- **Commit**: ee9b7f19853685805c612103282c8d9486c7db86\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21558.5 to 6.0.0-beta.21560.2][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 6.0.0-beta.21558.5 to 6.0.0-beta.21560.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21558.5 to 6.0.0-beta.21560.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.21558.5 to 6.0.0-beta.21560.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.21558.5 to 6.0.0-beta.21560.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21558.5 to 6.0.0-beta.21560.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/8ebefe2...ee9b7f1\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates sdk.version to 6.0.100\r\n  - Updates tools.dotnet to 6.0.100\r\n\r\n[marker]: <> (End:84f431dc-3375-4a46-af87-08d961c59698)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6159)","Url":"https://github.com/dotnet/winforms/pull/6159","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#6159)"},{"Id":"1049680784","IsPullRequest":false,"CreatedAt":"2021-11-10T18:17:33","Actor":"filipnavara","Number":"6152","RawContent":null,"Title":"PerMonitorV2 DPI scaling not firing ScaleControl method for deeply nested layouts","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: 6.0 RTM\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\n\r\nDeeply nested controls don't get `ScaleControl` called when moving to secondary monitor (150% DPI -> 100% DPI) in PerMonitorV2 mode.\r\n\r\n**Expected behavior:**\r\n\r\n`ScaleControl` is always called for deeply nested controls when DPI changes.\r\n\r\n**Minimal repro:**\r\n\r\nTo be done.\r\n\r\nIt looks like the following code may be to blame:\r\nhttps://github.com/dotnet/winforms/blob/83b3228c2fa5bbde44cb1e8e1b36eb6f328f1289/src/System.Windows.Forms/src/System/Windows/Forms/ContainerControl.cs#L688-L697\r\n\r\nWhen reaching one of the deeply nested container controls it looks up the parent and gets the scale factor from it. However, the parent itself at this point has `AutoScaleMode.Inherit` and hence the values are not set and the reported scaling is `(1.0F, 1.0F)`.  That leads to the following code skipping the scaling:\r\n\r\nhttps://github.com/dotnet/winforms/blob/83b3228c2fa5bbde44cb1e8e1b36eb6f328f1289/src/System.Windows.Forms/src/System/Windows/Forms/ContainerControl.cs#L990-L1000\r\n\r\nValues in debugger:\r\n\r\n![image](https://user-images.githubusercontent.com/1764393/141101092-468dba86-394c-4420-99ea-c5d205977ad1.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/6152","RelatedDescription":"Closed issue \"PerMonitorV2 DPI scaling not firing ScaleControl method for deeply nested layouts\" (#6152)"},{"Id":"1050003012","IsPullRequest":true,"CreatedAt":"2021-11-10T17:49:11","Actor":"dotnet-maestro[bot]","Number":"6156","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:84f431dc-3375-4a46-af87-08d961c59698)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 84f431dc-3375-4a46-af87-08d961c59698\r\n- **Build**: 20211108.5\r\n- **Date Produced**: November 8, 2021 9:31:54 PM UTC\r\n- **Commit**: 8ebefe290f57089d60100465111e78f223ee91db\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21519.3 to 6.0.0-beta.21558.5][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 6.0.0-beta.21519.3 to 6.0.0-beta.21558.5][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21519.3 to 6.0.0-beta.21558.5][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.21519.3 to 6.0.0-beta.21558.5][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.21519.3 to 6.0.0-beta.21558.5][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21519.3 to 6.0.0-beta.21558.5][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/85f3aa1...8ebefe2\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:84f431dc-3375-4a46-af87-08d961c59698)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6156)","Url":"https://github.com/dotnet/winforms/pull/6156","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#6156)"},{"Id":"1050044628","IsPullRequest":false,"CreatedAt":"2021-11-10T16:26:21","Actor":"filipnavara","Number":"6157","RawContent":null,"Title":"Forms created on non-primary monitors with different DPI have incorrect font size","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: 6.0 RTM\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\n\r\nForms that are launches on secondary screen with different DPI (eg. primary = 150% or 144, secondary = 100% or 96) have incorrectly scaled fonts.\r\n\r\n**Expected behavior:**\r\n\r\nCorrectly scaled fonts.\r\n\r\n**Minimal repro:**\r\n\r\n[WinFormsApp2.zip](https://github.com/dotnet/winforms/files/7514304/WinFormsApp2.zip)\r\n\r\nRun the app, it will likely start on primary monitor. Clicking on the form with create a new form above the parent one. On primary screen it looks like this:\r\n\r\n![image](https://user-images.githubusercontent.com/1764393/141152171-6c9fe252-4508-4128-a05d-fcfdfc01b609.png)\r\n\r\nMove one of the windows on secondary screen a click on it. The new windows on the secondary screen look like this (upper left one on the screenshot is original form dragged from primary screen):\r\n\r\n![image](https://user-images.githubusercontent.com/1764393/141152295-ee0ce2f2-bb0f-4284-b046-369537d4630e.png)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6157","RelatedDescription":"Open issue \"Forms created on non-primary monitors with different DPI have incorrect font size\" (#6157)"},{"Id":"1049870544","IsPullRequest":false,"CreatedAt":"2021-11-10T14:02:42","Actor":"SergeySmirnov-Akvelon","Number":"6155","RawContent":null,"Title":"Comboboxes with \"Flat\" and \"Popup\" flat styles are not displayed in High Contrast mode","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n.NET Core Version: \r\n- 7.0.0-alpha.1.21556.5\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\n- Yes\r\n\r\n**Problem description:**\r\n1. Create a `Form` with a `Combobox`\r\n2. Set `Popup` or `Flat` flat style\r\n3. Turn on High Contrast mode\r\n4. Run the application\r\n\r\n**Actual behavior:**\r\nComboboxes should be displayed are not displayed in High Contrast mode:\r\n![image](https://user-images.githubusercontent.com/23376742/141124465-cbfe182c-2edc-42a4-a679-0bfcb2041c8b.png)\r\n\r\n**Expected behavior:**\r\nComboboxes should be displayed in High Contrast mode.","Url":"https://github.com/dotnet/winforms/issues/6155","RelatedDescription":"Open issue \"Comboboxes with \"Flat\" and \"Popup\" flat styles are not displayed in High Contrast mode\" (#6155)"},{"Id":"1049808542","IsPullRequest":true,"CreatedAt":"2021-11-10T13:50:01","Actor":"dotnet-maestro[bot]","Number":"6154","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20211109.3\r\n- **Date Produced**: November 9, 2021 7:25:36 PM UTC\r\n- **Commit**: fecf65bedcee9036b8ba9d8d7feef5413f294914\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.21555.2 to 7.0.0-beta.21559.3][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.21555.2 to 7.0.0-beta.21559.3][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.21555.2 to 7.0.0-beta.21559.3][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.21555.2 to 7.0.0-beta.21559.3][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.21555.2 to 7.0.0-beta.21559.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.21555.2 to 7.0.0-beta.21559.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/a7c57ab...fecf65b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6154)","Url":"https://github.com/dotnet/winforms/pull/6154","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6154)"},{"Id":"1049726298","IsPullRequest":false,"CreatedAt":"2021-11-10T11:48:46","Actor":"lhak","Number":"6153","RawContent":null,"Title":"Windows 11 snap layout does not work correctly when initiated from a maximized window","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\nWhen the Windows 11 snap layout functionality is invoked, the window is not resized correctly when it is started from a maximized state.\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n.net core 3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n**Expected behavior:**\r\n<!--\r\n    Provide details on expected behavior with screenshots/GIF, where ever possible.\r\n -->\r\n\r\nThe window should be sized correctly.\r\n\r\n**Minimal repro:**\r\n<!--\r\n    Provide step by step guide to repro this issue.  Incase repro steps are complex, It would be helpful if \r\n    you attach a GIF with repro actions. Attaching a sample app to repro the issue will help speed up the \r\n    resolution. \r\n -->\r\n\r\n\r\n- Create a new winforms project\r\n- Maximize the window\r\n- Hover over the maximize button and select one of the snap modes\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6153","RelatedDescription":"Open issue \"Windows 11 snap layout does not work correctly when initiated from a maximized window\" (#6153)"},{"Id":"1049319889","IsPullRequest":false,"CreatedAt":"2021-11-10T02:03:53","Actor":"dhrdlicka","Number":"6151","RawContent":null,"Title":"Setting a font form disables autoscaling","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n6.0.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nForms with an explicitly set font do not automatically scale on font/DPI size changes. The `AutoScaleDimensions` property is reset from whatever value the app was built with, to the current host settings when `Font` gets set. This leads to the form never getting adjusted when the design time font/DPI size does not match the runtime one.\r\n\r\nThis does not happen in .NET 5.0.\r\n\r\n\r\n**Expected behavior:**\r\n\r\nForms should show at proper scale when a custom font is set.\r\n\r\n**Minimal repro:**\r\n\r\n* Create a form, change the font and set `AutoScaleMode` to Font or DPI.\r\n* Change the system DPI.\r\n* The form and control sizes stay the same no matter the system settings.\r\n![AutoScaleDimensionsRepro_ZWf4kWAEL3](https://user-images.githubusercontent.com/13226155/141035686-cc067956-dc47-47e6-91d5-c622030d7cb1.png)\r\n![AutoScaleDimensionsRepro_MBSFXFgrqN](https://user-images.githubusercontent.com/13226155/141035708-295c3018-cef4-4cfa-aa39-7aa1d3a1a21a.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6151","RelatedDescription":"Open issue \"Setting a font form disables autoscaling\" (#6151)"},{"Id":"1049140263","IsPullRequest":true,"CreatedAt":"2021-11-09T21:50:50","Actor":"dotnet-bot","Number":"6148","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1461582","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6148)","Url":"https://github.com/dotnet/winforms/pull/6148","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1461582\" (#6148)"},{"Id":"1049145878","IsPullRequest":true,"CreatedAt":"2021-11-09T21:39:34","Actor":"dotnet-bot","Number":"6150","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1461587","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6150)","Url":"https://github.com/dotnet/winforms/pull/6150","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1461587\" (#6150)"},{"Id":"1049141928","IsPullRequest":true,"CreatedAt":"2021-11-09T21:34:15","Actor":"dotnet-bot","Number":"6149","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1461583","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6149)","Url":"https://github.com/dotnet/winforms/pull/6149","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1461583\" (#6149)"},{"Id":"1049139740","IsPullRequest":true,"CreatedAt":"2021-11-09T21:31:48","Actor":"dotnet-bot","Number":"6147","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1461586","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6147)","Url":"https://github.com/dotnet/winforms/pull/6147","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1461586\" (#6147)"},{"Id":"1047880565","IsPullRequest":true,"CreatedAt":"2021-11-09T20:54:46","Actor":"dotnet-bot","Number":"6142","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1459577","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\r\n\r\nFixes #6099 \r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6142)","Url":"https://github.com/dotnet/winforms/pull/6142","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1459577\" (#6142)"},{"Id":"1047750419","IsPullRequest":true,"CreatedAt":"2021-11-09T20:54:29","Actor":"dreddy-work","Number":"6140","RawContent":null,"Title":"[6.0][Servicing]Fix anchored controls mis-alignment when DPI of the display is higher than 100%","State":"closed","Body":"* Fixes anchored controls mis-alignment when DPI of the display is higher than 100%. In .NET framework 4.7 timeframe, we made a change to improve the anchoring on higher DPI settings that introduced this bug. As explained in the linked bug below, Applications that anchor controls are currently broken in default SystemAware mode with >100% DPI settings ( which is also a default for most)\r\n\r\nFixes #5774 \r\n\r\n## Regression? \r\n\r\n- Yes, from .NET framework 4.6\r\n\r\n## Risk\r\n- I would say minimum and associated with only controls that are anchored.  Currently they are broken even in `SystemAware `mode.\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual  CTI validation.\r\n- Running customer provided applications and making sure change fixing them.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6140)","Url":"https://github.com/dotnet/winforms/pull/6140","RelatedDescription":"Closed or merged PR \"[6.0][Servicing]Fix anchored controls mis-alignment when DPI of the display is higher than 100%\" (#6140)"},{"Id":"1048882559","IsPullRequest":true,"CreatedAt":"2021-11-09T20:54:12","Actor":"vseanreesermsft","Number":"6145","RawContent":null,"Title":"Merging internal commits for release/5.0","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6145)","Url":"https://github.com/dotnet/winforms/pull/6145","RelatedDescription":"Closed or merged PR \"Merging internal commits for release/5.0\" (#6145)"},{"Id":"1048903923","IsPullRequest":true,"CreatedAt":"2021-11-09T17:54:13","Actor":"dreddy-work","Number":"6146","RawContent":null,"Title":"[5.0][Servicing]Fix anchored controls mis-alignment when DPI of the display is higher than 100%","State":"open","Body":"* Fixes anchored controls mis-alignment when DPI of the display is higher than 100%. In .NET framework 4.7 timeframe, we made a change to improve the anchoring on higher DPI settings that introduced this bug. As explained in the linked bug below, Applications that anchor controls are currently broken in default SystemAware mode with >100% DPI settings ( which is also a default for most)\r\n\r\nFixes #5774 \r\n\r\n## Regression? \r\n\r\n- Yes, from .NET framework 4.6\r\n\r\n## Risk\r\n- I would say minimum and associated with only controls that are anchored.  Currently they are broken even in `SystemAware `mode.\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual  CTI validation.\r\n- Running customer provided applications and making sure change fixing them.\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6140)\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6141)\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6146)","Url":"https://github.com/dotnet/winforms/pull/6146","RelatedDescription":"Open PR \"[5.0][Servicing]Fix anchored controls mis-alignment when DPI of the display is higher than 100%\" (#6146)"},{"Id":"1048586695","IsPullRequest":true,"CreatedAt":"2021-11-09T13:48:38","Actor":"dotnet-maestro[bot]","Number":"6143","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211108.10\r\n- **Date Produced**: November 9, 2021 7:31:32 AM UTC\r\n- **Commit**: dfb8c90b86ec67ffc1192a1561ce11e281ee9619\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21556.5 to 7.0.0-alpha.1.21558.10][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/d40f560...dfb8c90\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6143)","Url":"https://github.com/dotnet/winforms/pull/6143","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6143)"},{"Id":"1047754574","IsPullRequest":true,"CreatedAt":"2021-11-08T18:08:17","Actor":"dreddy-work","Number":"6141","RawContent":null,"Title":"[3.1][Servicing]Fix anchored controls mis-alignment when DPI of the display is higher than 100%…","State":"open","Body":"* Fixes anchored controls mis-alignment when DPI of the display is higher than 100%. In .NET framework 4.7 timeframe, we made a change to improve the anchoring on higher DPI settings that introduced this bug. As explained in the linked bug below, Applications that anchor controls are currently broken in default SystemAware mode with >100% DPI settings ( which is also a default for most)\r\n\r\nFixes #5774 \r\n\r\n## Regression? \r\n\r\n- Yes, from .NET framework 4.6\r\n\r\n## Risk\r\n- I would say minimum and associated with only controls that are anchored.  Currently they are broken even in `SystemAware `mode.\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual  CTI validation.\r\n- Running customer provided applications and making sure change fixing them.\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6140)\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6141)","Url":"https://github.com/dotnet/winforms/pull/6141","RelatedDescription":"Open PR \"[3.1][Servicing]Fix anchored controls mis-alignment when DPI of the display is higher than 100%…\" (#6141)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-11-12T05:30:39.934781Z","RunDurationInMilliseconds":501}