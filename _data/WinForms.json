{"Data":{"GitHub":{"Issues":[{"Id":"1064005236","IsPullRequest":true,"CreatedAt":"2021-11-26T00:54:50","Actor":"eriawan","Number":"6234","RawContent":null,"Title":"Implement new readonly (getter only) property of `ErrorProvider.HasErrors`","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #5912 \r\n\r\n\r\n## Proposed changes\r\n\r\n- No change, it is a new readonly property to check controls in an ErrorProvider are having errors set (true) or not\r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Should be none, because it is not a breaking change\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6234)","Url":"https://github.com/dotnet/winforms/pull/6234","RelatedDescription":"Open PR \"Implement new readonly (getter only) property of `ErrorProvider.HasErrors`\" (#6234)"},{"Id":"1063568554","IsPullRequest":true,"CreatedAt":"2021-11-25T13:48:22","Actor":"dotnet-maestro[bot]","Number":"6232","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20211124.3\r\n- **Date Produced**: November 24, 2021 5:55:39 PM UTC\r\n- **Commit**: 11fb2931671a47924e29b92e5fe06043fb3c6bbb\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.21573.3 to 7.0.0-beta.21574.3][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.21573.3 to 7.0.0-beta.21574.3][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.21573.3 to 7.0.0-beta.21574.3][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.21573.3 to 7.0.0-beta.21574.3][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.21573.3 to 7.0.0-beta.21574.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.21573.3 to 7.0.0-beta.21574.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/927f8d4...11fb293\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6232)","Url":"https://github.com/dotnet/winforms/pull/6232","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6232)"},{"Id":"1063569198","IsPullRequest":true,"CreatedAt":"2021-11-25T13:08:44","Actor":"dotnet-maestro[bot]","Number":"6233","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211124.6\r\n- **Date Produced**: November 25, 2021 2:54:39 AM UTC\r\n- **Commit**: 7414af2a5f6d8d99efc27d3f5ef7a394e0b23c42\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21574.1 to 7.0.0-alpha.1.21574.6][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/bf1797a...7414af2\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6233)","Url":"https://github.com/dotnet/winforms/pull/6233","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/runtime\" (#6233)"},{"Id":"1063504524","IsPullRequest":false,"CreatedAt":"2021-11-25T12:02:58","Actor":"ArtemTatarinov","Number":"6231","RawContent":null,"Title":"Menu bar for maximized hosted MDI window not being exposed through UIA as expected","State":"open","Body":"* .NET Core Version: 3.0, 3.1, 5.0, 6.0, 7.0\r\n* Have you experienced this same bug with .NET Framework?: The issue is reproduced at 4.8; 4.7.2 has all the buttons, but their order is reversed.\r\n\r\n**Problem description:**\r\nWhen the child MDI window is maximized, the Accessibility Insights tool (or the Inspect) doesn't show all the `ControlBox` buttons from the menu strip.\r\n![image](https://user-images.githubusercontent.com/87859299/143433185-0b58c322-ec0e-4254-b201-685d51ac2382.png) (no `Restore` and `Close` buttons)\r\n![image](https://user-images.githubusercontent.com/87859299/143436323-edb1e85c-685a-4a4b-8939-53b7aab9581b.png) (no `Restore` and `Close` buttons)\r\n![image](https://user-images.githubusercontent.com/87859299/143436195-0fd7f503-e8b9-46a6-9602-8049ba430a84.png) (no `Minimize` and `Restore` buttons if the MenuStrip has no items)\r\n\r\n**Expected behavior:**\r\nTo have all the `ControlBox` buttons at UIA tools in the same order they are at the menu bar: `Minimize`, `Restore`, `Close`.\r\n\r\n**Minimal repro:**\r\n1. Run the attached test app.\r\n2. Point the Accessibility Insights or the Inspect tool at the app, and examine the `My Test` menu bar of the child MDI window.\r\n\r\n[WinFormsApp1_Core.zip](https://github.com/dotnet/winforms/files/7602737/WinFormsApp1_Core.zip)","Url":"https://github.com/dotnet/winforms/issues/6231","RelatedDescription":"Open issue \"Menu bar for maximized hosted MDI window not being exposed through UIA as expected\" (#6231)"},{"Id":"1063383158","IsPullRequest":false,"CreatedAt":"2021-11-25T10:07:50","Actor":"2mik","Number":"6230","RawContent":null,"Title":"ListView.Items.RemoveAt causes NullReferenceException","State":"open","Body":"* .NET Core Version: \r\n6.0.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nClassic .NET - No\r\n.NET 5 - No\r\n.NET 6 - Yes\r\n\r\n**Problem description:**\r\nDeleting a selected item from ListView causes NullReferenceException on calling ListView.Items.RemoveAt(index).\r\nThe bug reproduces stable in my app in the following conditions:\r\n1. The item being deleted must be selected. If it's not selected, no error.\r\n2. To workaround the error, we can call ListView.Focus() before delete.\r\n3. ListView is a Details view.\r\n\r\nThe code that fails:\r\n`\r\n\r\n    // listView1.Focus(); // helps to avoid error\r\n\r\n    listView1.Items.RemoveAt(0); // error is here if item 0 is selected\r\n\r\n    MessageBox.Show(\"a\"); // shows after error\r\n`\r\n\r\nDespite the error, the item is deleted.\r\n\r\nError stack:\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Windows.Forms.ListViewItem.get_AccessibilityObject()\r\n   at System.Windows.Forms.ListView.ListViewAccessibleObject.GetFocus()\r\n   at System.Windows.Forms.ListView.OnGotFocus(EventArgs e)\r\n   at System.Windows.Forms.Control.WmSetFocus(Message& m)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.ListView.WndProc(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)\r\n\r\n\r\n**Expected behavior:**\r\nNo error in the above case. Because it worked well before .NET 6.\r\n\r\n**Minimal repro:**\r\nI couldn't create a small app to reproduce the error, because there is no error in a simple app. However, I hope that a developer who works daily on WinForms, can find the possible mistake in ListViewItem.get_AccessibilityObject()\r\nEdit: the test app is attached below.","Url":"https://github.com/dotnet/winforms/issues/6230","RelatedDescription":"Open issue \"ListView.Items.RemoveAt causes NullReferenceException\" (#6230)"},{"Id":"1063317512","IsPullRequest":false,"CreatedAt":"2021-11-25T09:00:23","Actor":"Maspapa","Number":"6229","RawContent":null,"Title":"The TextRenderer.MeasureText has different return between .Net FrameWork and .Net 6","State":"open","Body":"* .NET Core Version:  \r\n.Net6\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNO\r\n\r\n**Problem description:**\r\nThe TextRenderer.MeasureText has different return between .Net FrameWork and .Net 6\r\n`The Code below return different between .Net6 and .NetFrameWork\r\n\r\n            Font font2 = new Font(\"Segoe UI\", 9);\r\n            Font font = new Font(\"Arial\", 20F, FontStyle.Italic | FontStyle.Bold, GraphicsUnit.Point, ((byte)(128)));\r\n            Size size = TextRenderer.MeasureText(\"Item77777\", font, new Size(int.MaxValue, int.MaxValue), TextFormatFlags.NoPadding | TextFormatFlags.NoPrefix | TextFormatFlags.SingleLine);\r\n\r\n            MessageBox.Show(size.Width.ToString());\r\n`\r\n\r\n\r\n**Expected behavior:**\r\nIn FrameWork it return 141\r\nIn Net6 it return 129\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6229","RelatedDescription":"Open issue \"The TextRenderer.MeasureText has different return between .Net FrameWork and .Net 6\" (#6229)"},{"Id":"1060155136","IsPullRequest":false,"CreatedAt":"2021-11-25T07:40:37","Actor":"DmitryGorokhov","Number":"6210","RawContent":null,"Title":"ComboBox control has incorrect highlighting of opened drop-down list in Inspect ","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n**.NET Core Version:** \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n- 6.0.100\r\n\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\n<!-- Yes / No -->\r\n- Yes\r\n\r\n**Minimal repro:**\r\n<!--\r\n    Provide step by step guide to repro this issue.  Incase repro steps are complex, It would be helpful if \r\n    you attach a GIF with repro actions. Attaching a sample app to repro the issue will help speed up the \r\n    resolution. \r\n -->\r\n1. Create an app with a ComboBox control.\r\n2. Build the app and run it.\r\n3. Run the Inspect.\r\n4. Investigate drop-down list opening using Inspect.\r\n\r\n**Actual behavior:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nInspector highlights entire list when drop-down list is opened. So ComboBox control has incorrect highlighting of opened drop-down list in Inspect. Narrator has the correct behavior. Please see the behavior gif below.\r\n\r\n![ComboBoxInspect](https://user-images.githubusercontent.com/58004471/142868495-a0158c06-e320-4145-9adb-108ff3a92285.gif)\r\n\r\n\r\n**Expected behavior:**\r\n<!--\r\n    Provide details on expected behavior with screenshots/GIF, where ever possible.\r\n -->\r\n Inspector must highlight selected item in drop-down list. If the control has no selected item yet the Inspect must highlight top field of ComboBox. So the Inspect must have the same behavior as the Narrator has. Please see current behavior in Narrator gif below.\r\n\r\n![ComboBoxNarrator](https://user-images.githubusercontent.com/58004471/142868529-3bd33770-9d64-447a-b78e-a3081e5e63ff.gif)\r\n","Url":"https://github.com/dotnet/winforms/issues/6210","RelatedDescription":"Closed issue \"ComboBox control has incorrect highlighting of opened drop-down list in Inspect \" (#6210)"},{"Id":"1063236950","IsPullRequest":false,"CreatedAt":"2021-11-25T07:22:57","Actor":"John-Qiao","Number":"6228","RawContent":null,"Title":"[DpiUnaware] The sub item CheckBox cannot be scaled well in GroupBox control on 300% system DPI","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET SDK 7.0.100-alpha.1.21568.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nThe sub item CheckBox cannot be scaled well in GroupBox control on 300% system DPI.\r\n![Actual](https://user-images.githubusercontent.com/45864985/143397205-4f552229-5680-45f5-bd28-186b2e40a72d.png)\r\n\r\n**Expected behavior:**\r\n\r\nThe sub item CheckBox should be scaled well in GroupBox control on 300% system DPI.\r\n![Expected](https://user-images.githubusercontent.com/45864985/143397221-2e0a7dfe-33e8-4607-b9c8-826e5de0eeeb.png)\r\n\r\n**Minimal repro:**\r\n\r\n1. Open the [TestApp.zip](https://github.com/dotnet/winforms/files/7600959/TestApp.zip) on 300% DPI.\r\n2. Change the ApplicationHighDpiMode to DpiUnAware in .csproj file and set AutoScaleMode = Dpi for Form1 designer.\r\n3. Run it.\r\n![ReproSteps](https://user-images.githubusercontent.com/45864985/143397183-78706cfe-3d61-4f43-af7b-50b2fbba9f0a.gif)\r\n\r\n**More info:**\r\n\r\n1. This issue cannot repro under DpiUnAware & AutoScaleMode = Font or None.\r\n2. This issue doesn't reproduce under PerMonitorV2 and SystemAware modes.\r\n3. This issue doesn't reproduce in other container controls.","Url":"https://github.com/dotnet/winforms/issues/6228","RelatedDescription":"Open issue \"[DpiUnaware] The sub item CheckBox cannot be scaled well in GroupBox control on 300% system DPI\" (#6228)"},{"Id":"1063227709","IsPullRequest":false,"CreatedAt":"2021-11-25T07:09:21","Actor":"John-Qiao","Number":"6227","RawContent":null,"Title":"[DpiUnaware] The ListBox and CheckedListBox controls are not scaled well on 300% system DPI","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET SDK 7.0.100-alpha.1.21568.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nThe ListBox and CheckedListBox controls are not scaled well on 300% system DPI. \r\n![Actual](https://user-images.githubusercontent.com/45864985/143395433-9ab982d8-d324-4776-b007-ad5995c9b444.png)\r\n\r\n**Expected behavior:**\r\n\r\nThe ListBox and CheckedListBox controls should be scaled well on 300% system DPI. \r\n![Expected](https://user-images.githubusercontent.com/45864985/143395439-fc216925-7a61-4e6f-b3c8-5708b3914cd8.png)\r\n\r\n**Minimal repro:**\r\n\r\n1. Open the [TestApp.zip](https://github.com/dotnet/winforms/files/7600905/TestApp.zip) on 300% DPI.\r\n2. Change the ApplicationHighDpiMode to DpiUnAware in .csproj file, set AutoScaleMode = Font  and font size from 9 to 10 for Form1 designer.\r\n3. Run it.\r\n\r\n![ReproSteps](https://user-images.githubusercontent.com/45864985/143395469-a3509271-d6c3-4654-afc1-127c9114e5cb.gif)\r\n\r\n**More info:**\r\n\r\n1. This issue cannot repro under DpiUnAware & AutoScaleMode = dpi or none\r\n2. This issue doesn't reproduce under PerMonitorV2 and SystemAware modes.\r\n","Url":"https://github.com/dotnet/winforms/issues/6227","RelatedDescription":"Open issue \"[DpiUnaware] The ListBox and CheckedListBox controls are not scaled well on 300% system DPI\" (#6227)"},{"Id":"1063212496","IsPullRequest":false,"CreatedAt":"2021-11-25T06:44:00","Actor":"John-Qiao","Number":"6226","RawContent":null,"Title":"[Multi-Monitor] The controls' size and location are not scale well when move form from 300% main screen to 100% secondary screen system DPI.","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET SDK 7.0.100-alpha.1.21568.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nThe controls' size and location are not scale well when move form from 300% main screen to 100% secondary screen system DPI.\r\n\r\nLaunch on 300% main screen.\r\n![300](https://user-images.githubusercontent.com/45864985/143391476-e2a489b2-8bcf-4b9f-be05-b1e0f10d312f.png)\r\n\r\nMove to 100% secondary screen.\r\n![100](https://user-images.githubusercontent.com/45864985/143391492-7015078c-b58b-47b3-b6c1-b5ee0b975de6.png)\r\n\r\n**Expected behavior:**\r\n\r\nThe controls' size and location should be scaled well. \r\n\r\n**Minimal repro:**\r\n\r\n1. Set the main screen as 300% DPI, and second screenshot as 100% DPI.\r\n2. Open the [CoreHDPITesting2.zip](https://github.com/dotnet/winforms/files/7600724/CoreHDPITesting2.zip) app on 300% main screen.\r\n3. Change the ApplicationHighDpiMode to PerMonitorV2 in .csproj file and set AutoScaleMode = None for Form1 designer.\r\n4. Run it on 300% main screen, then move Form1 to 100% secondary screen.\r\n\r\n**More Info:**\r\n\r\n1. This issue doesn't reproduce under SystemAware and DpiUnAware modes.\r\n2. The scale issue occurs when move from 100% main screen to 300% secondary screen too.\r\n     Launch on 100% main screen.\r\n![100-2](https://user-images.githubusercontent.com/45864985/143391420-b3edb425-454a-482f-80cf-3206708c8449.png)\r\n\r\n      Move to 300% secondary screen\r\n![300-2](https://user-images.githubusercontent.com/45864985/143391444-7dfbc97d-a96a-4d5a-a02e-ba26430a3948.png)\r\n.\r\n","Url":"https://github.com/dotnet/winforms/issues/6226","RelatedDescription":"Open issue \"[Multi-Monitor] The controls' size and location are not scale well when move form from 300% main screen to 100% secondary screen system DPI.\" (#6226)"},{"Id":"1063106664","IsPullRequest":false,"CreatedAt":"2021-11-25T02:58:23","Actor":"VinoWang01","Number":"6225","RawContent":null,"Title":"[PerMonitorV2] The more/less button icon of tabControl doesn't scale well on 300% system DPI. ","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET SDK 7.0.100-alpha.1.21568.2\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nUnder High Dpi mode, the icon on the more/less button of TabControl is so small to see.\r\n![TabPageIcon](https://user-images.githubusercontent.com/90816462/143372106-6d9699d9-469f-4562-a2a8-db62159bb086.png)\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\nThe icon should be scaled.\r\n<!--\r\n    Provide details on expected behavior with screenshots/GIF, where ever possible.\r\n -->\r\n\r\n**Minimal repro:**\r\n1.\tOpen the test app on 300% DPI. [TabControl.zip](https://github.com/dotnet/winforms/files/7599870/TabControl.zip)\r\n2.\tChange the ApplicationHighDpiMode to PerMonitorV2.\r\n3.\tRun it.\r\n\r\n<!--\r\n    Provide step by step guide to repro this issue.  Incase repro steps are complex, It would be helpful if \r\n    you attach a GIF with repro actions. Attaching a sample app to repro the issue will help speed up the \r\n    resolution. \r\n -->\r\n","Url":"https://github.com/dotnet/winforms/issues/6225","RelatedDescription":"Open issue \"[PerMonitorV2] The more/less button icon of tabControl doesn't scale well on 300% system DPI. \" (#6225)"},{"Id":"1063100869","IsPullRequest":false,"CreatedAt":"2021-11-25T02:43:18","Actor":"VinoWang01","Number":"6224","RawContent":null,"Title":"[DpiUnaware] The icons of MenuStrip/ToolStrip/StatusStrip aren't scaling well on 300% system DPI","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET SDK 7.0.100-alpha.1.21568.2\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nAll icons are very large than the text on High Dpi under DpiUnaware mode.\r\n![Icon_Actual](https://user-images.githubusercontent.com/90816462/143370535-71477ac0-fbdc-4736-b41c-1ed591d6fbbd.png)\r\n![Icon_NetFX](https://user-images.githubusercontent.com/90816462/143370670-44646bbc-1279-4118-9a73-71d415c49345.png)\r\n\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n**Expected behavior:**\r\nIcons should scale well.\r\n![Icon](https://user-images.githubusercontent.com/90816462/143370615-62ea17af-cc2e-4879-bbb3-e9f68811d927.png)\r\n\r\n<!--\r\n    Provide details on expected behavior with screenshots/GIF, where ever possible.\r\n -->\r\n\r\n**Minimal repro:**\r\n1.\tSet system DPI to 300%. \r\n2.\tCreate a .NET Core WinForms project. \r\n3.\tAdd MenuStrip/ToolStrip/StatusStrip controls to Form.\r\n4.\tThen insert standard items for MenuStrip/ToolStrip via clicking ‘Insert Standard Items’ in controls’ Tasks panel.\r\n5.\tAdd toolStripDropDownButton/toolStripSplitButton to StatusStrip control. Then change DisplayStyle property to ImageAndText.\r\n6.\tChange the ApplicationHighDpiMode to DpiUnaware. \r\n7.\tRun it. \r\n\r\n**More info:**\r\n1.\tThis issue doesn't reproduce under PermonitorV2/SystemAware mode.\r\n2.\tThis issue doesn’t reproduce with following scenarios:\r\na.\tCreate the sample project under 100% system DPI and close all opening designer, then zip it. – Non-HDPI environment. \r\n[IconUnaware.zip](https://github.com/dotnet/winforms/files/7599875/IconUnaware.zip)\r\nb.\tSet up another HDPI machine(300% DPI).\r\nc.\tExtract the sample project created in step a.\r\nd.\tThen run the project directly(F5 or start debugging).\r\n\r\n<!--\r\n    Provide step by step guide to repro this issue.  Incase repro steps are complex, It would be helpful if \r\n    you attach a GIF with repro actions. Attaching a sample app to repro the issue will help speed up the \r\n    resolution. \r\n -->\r\n","Url":"https://github.com/dotnet/winforms/issues/6224","RelatedDescription":"Open issue \"[DpiUnaware] The icons of MenuStrip/ToolStrip/StatusStrip aren't scaling well on 300% system DPI\" (#6224)"},{"Id":"1062874357","IsPullRequest":true,"CreatedAt":"2021-11-24T20:38:02","Actor":"dreddy-work","Number":"6223","RawContent":null,"Title":"Fixing DPiAwarenessContext cache value for the controls in mixed Dpi mode applications.","State":"open","Body":"\r\nCurrently, we are evaluating the `DpiAwarenessContext `on the fly thus could result in incorrect\r\nevaluation if the application is running in a mixed Dpi mode and we call this property from a wrong thread.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #6215 \r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6223)","Url":"https://github.com/dotnet/winforms/pull/6223","RelatedDescription":"Open PR \"Fixing DPiAwarenessContext cache value for the controls in mixed Dpi mode applications.\" (#6223)"},{"Id":"1060618774","IsPullRequest":true,"CreatedAt":"2021-11-24T19:56:21","Actor":"dreddy-work","Number":"6211","RawContent":null,"Title":"Cache Fonts for Dpi in PermonitorV2 mode applications.","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #6201 \r\nFixes #5047\r\n\r\n\r\n## Proposed changes\r\nIn PermonV2 mode, Winforms applications are disposing the Fonts that were supplied by the user/application but were replaced by a new scaled Fonts. Our intention was to scale the existing Font according to the DPI of the monitor and replace existing Font with this scaled Font. We shouldn't dispose the Fonts that we do not own.\r\n\r\nIn this change, we are tracking the Fonts we create for each Dpi value that the PermonitorV2 mode application renders on, and dispose them when required. User supplied Fonts are untouched.\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Low.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Tested user supplied applications.\r\n- Manual validation of known HDPI and non-HDPI scenarios with complex winforms test applications.\r\n- Winforms runtime automation.\r\n\r\nrelated #6207\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6207)\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6211)","Url":"https://github.com/dotnet/winforms/pull/6211","RelatedDescription":"Closed or merged PR \"Cache Fonts for Dpi in PermonitorV2 mode applications.\" (#6211)"},{"Id":"1062409090","IsPullRequest":true,"CreatedAt":"2021-11-24T17:52:04","Actor":"dotnet-maestro[bot]","Number":"6218","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20211123.3\r\n- **Date Produced**: November 23, 2021 7:08:55 PM UTC\r\n- **Commit**: 927f8d4d5036f68a5fc6d042f336bc9458027208\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.21569.2 to 7.0.0-beta.21573.3][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.21569.2 to 7.0.0-beta.21573.3][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.21569.2 to 7.0.0-beta.21573.3][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.21569.2 to 7.0.0-beta.21573.3][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.21569.2 to 7.0.0-beta.21573.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.21569.2 to 7.0.0-beta.21573.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/9746377...927f8d4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates sdk.version to 6.0.100\r\n  - Updates tools.dotnet to 6.0.100\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6218)","Url":"https://github.com/dotnet/winforms/pull/6218","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6218)"},{"Id":"1062545829","IsPullRequest":false,"CreatedAt":"2021-11-24T15:12:58","Actor":"SergeySmirnov-Akvelon","Number":"6221","RawContent":null,"Title":"Disabled buttons have low contrast for text and borders","State":"open","Body":".NET Core Version: \r\n- .NET Core SDK: 7.0.0-alpha.1.21567.1\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\n- Yes\r\n\r\n**Repro steps:**\r\n1. Create a form with a button\r\n2. Make button disabled\r\n3. Run the application\r\n\r\n**Notes:**\r\nThe issue is reproduced for high contrast mode.\r\n\r\n**Actual behavior:**\r\nFlat button text:\r\n![image](https://user-images.githubusercontent.com/23376742/143261747-1a07d49a-d62c-4d98-b0d2-e9705c07fb8b.png)\r\n\r\nPopup button text:\r\n![image](https://user-images.githubusercontent.com/23376742/143262223-6fe99c91-70eb-446c-a3ad-d42b01b63a7b.png)\r\n\r\nPopup button border:\r\n![image](https://user-images.githubusercontent.com/23376742/143262557-6cadcb01-1a57-448c-ad4e-a16ca891fc0f.png)\r\n\r\nStandard button text:\r\n![image](https://user-images.githubusercontent.com/23376742/143263180-4c89942d-9379-4ec1-96f0-811dcaaf10ac.png)\r\n\r\nStandard button border:\r\n![image](https://user-images.githubusercontent.com/23376742/143262844-3881b2c8-d924-459f-8ed6-091e6e32d46c.png)\r\n\r\nSystem button text:\r\n![image](https://user-images.githubusercontent.com/23376742/143263358-48512cf7-8587-4893-aa46-23b0c96e1a3a.png)\r\n\r\nSystem button border:\r\n![image](https://user-images.githubusercontent.com/23376742/143263749-e8e7571b-17d6-45c4-82a3-dadeb6b0b50a.png)\r\n\r\n**Expected behavior:**\r\nDisabled buttons should have correct contrast for text and borders","Url":"https://github.com/dotnet/winforms/issues/6221","RelatedDescription":"Open issue \"Disabled buttons have low contrast for text and borders\" (#6221)"},{"Id":"1062505237","IsPullRequest":false,"CreatedAt":"2021-11-24T14:36:52","Actor":"SergeySmirnov-Akvelon","Number":"6220","RawContent":null,"Title":"The ToolStripButton borders have low color contrast ratio in high contrast mode","State":"open","Body":"NET Core Version: \r\n- .NET Core SDK: 7.0.0-alpha.1.21567.1\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\n- Yes for `ToolStripRenderMode.System` (from #5502)\r\n- No for other rendered modes\r\n\r\n**Problem description:**\r\n1. Create a `Form` with a `ToolStrip`\r\n2. Add a `ToolstripButton` to `ToolStrip`\r\n3. Set `System`  rendered mode\r\n4. Enable high contrast mode\r\n5. Run the application\r\n\r\n**Actual behavior:**\r\nHigh Contrast Black:\r\n![image](https://user-images.githubusercontent.com/23376742/143254853-8a9d01e2-55a2-49c8-bd9c-fc4834e8e82c.png)\r\n\r\nHigh Contrast White:\r\n![image](https://user-images.githubusercontent.com/23376742/143257200-a37d04f6-88de-43cd-a050-9879f5651824.png)\r\n\r\n**Expected behavior:**\r\nHigh Contrast Black:\r\n![image](https://user-images.githubusercontent.com/23376742/143255044-f25d0067-0c8e-4ba3-a1df-80089599fb8f.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6220","RelatedDescription":"Open issue \"The ToolStripButton borders have low color contrast ratio in high contrast mode\" (#6220)"},{"Id":"1062409808","IsPullRequest":true,"CreatedAt":"2021-11-24T13:43:59","Actor":"dotnet-maestro[bot]","Number":"6219","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211124.1\r\n- **Date Produced**: November 24, 2021 12:19:40 PM UTC\r\n- **Commit**: bf1797ad3e2f73e640d5648044f9f053c17b05fe\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21572.8 to 7.0.0-alpha.1.21574.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/141dae4...bf1797a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6219)","Url":"https://github.com/dotnet/winforms/pull/6219","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6219)"},{"Id":"1062222373","IsPullRequest":false,"CreatedAt":"2021-11-24T10:00:59","Actor":"kant2002","Number":"6217","RawContent":null,"Title":"Consider GeneratedDllImport for PInvoke generation","State":"open","Body":"The [DllImportGenerator](https://github.com/dotnet/runtime/issues/43060) experiment lands .NET 7 and provide slightly better preformance with high compatibility bar.\r\n\r\n.NET Team itself embrace it in core .NET - See https://github.com/dotnet/runtime/issues?q=is%3Aissue+is%3Aopen+GeneratedDllImport\r\n\r\nUnfortunately COM marshalling does not supported, but given that ComWrappers should be done here, it's probably would not be a problem.","Url":"https://github.com/dotnet/winforms/issues/6217","RelatedDescription":"Open issue \"Consider GeneratedDllImport for PInvoke generation\" (#6217)"},{"Id":"1062176096","IsPullRequest":false,"CreatedAt":"2021-11-24T09:13:04","Actor":"IrakliLomidze","Number":"6216","RawContent":null,"Title":"Make WinForm project more modular by separating resources and settings for each form","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\n\r\n The problem is difficult to copy form from one project to another. \r\n1) Potentially problems in resources (same name image files) and issues of merging settings files.\r\n\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n\r\nSuggestion,\r\nMake WinForm project more modular. \r\nBy Allowing separate resources and settings for each form. \r\nBenefit: More easily transfer functionality from one project to another.\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6216","RelatedDescription":"Open issue \"Make WinForm project more modular by separating resources and settings for each form\" (#6216)"},{"Id":"1061267638","IsPullRequest":true,"CreatedAt":"2021-11-24T04:27:47","Actor":"dotnet-maestro[bot]","Number":"6213","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211122.8\r\n- **Date Produced**: November 23, 2021 8:54:41 AM UTC\r\n- **Commit**: 141dae43d9ea97f2216c7619f690c5d3dfc7344f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21569.8 to 7.0.0-alpha.1.21572.8][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/7099f4b...141dae4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6213)","Url":"https://github.com/dotnet/winforms/pull/6213","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6213)"},{"Id":"1061892806","IsPullRequest":false,"CreatedAt":"2021-11-24T01:36:51","Actor":"dreddy-work","Number":"6215","RawContent":null,"Title":"DpiAwarenessContext on Control do not consider mixed HDPI mode applications.","State":"open","Body":"This is a tracking bug for the issue encountered while working on #6211.\r\n\r\nDpiAwarenessContext for control is not cached instead it was determined from the thread every time it is being accessed. This should be fine if entire application is running on one DpiAwarness mode. We do support mixed high Dpi modes, where a child window might be created in SystemAware mode while the parent/application is running PermonitorV2 mode.  In such cases, dynamic calculation DpiAwarenessContext value may result in wrong DpiAwarness for the control.\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6215","RelatedDescription":"Open issue \"DpiAwarenessContext on Control do not consider mixed HDPI mode applications.\" (#6215)"},{"Id":"1060701794","IsPullRequest":true,"CreatedAt":"2021-11-23T01:03:27","Actor":"dreddy-work","Number":"6212","RawContent":null,"Title":"Removing Windows 8.1 Permonitor mode support.","State":"closed","Body":"Permonitor mode was introduced in Windows 8.1 and was upgraded to PermonitorV2 mode in Windows 10. WinForms in .NET never fully supported this mode and given that Windows 8.1 is out of support, its time to remove this reference and\r\nkeep it clean with PermonitorV2 mode for Windows 10 and latest OSes.\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6212)","Url":"https://github.com/dotnet/winforms/pull/6212","RelatedDescription":"Closed or merged PR \"Removing Windows 8.1 Permonitor mode support.\" (#6212)"},{"Id":"1058892824","IsPullRequest":true,"CreatedAt":"2021-11-22T19:16:39","Actor":"dreddy-work","Number":"6207","RawContent":null,"Title":"Cache Fonts for each DPI in PermonV2 mode applications.","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #6201 \r\nFixes #5047\r\n\r\n\r\n## Proposed changes\r\nIn PermonV2 mode, Winforms applications are disposing the Fonts that were supplied by the user/application but were replaced by a new scaled Fonts. Our intention was to scale the existing Font according to the DPI of the monitor and replace existing Font with this scaled Font. We shouldn't dispose the Fonts that we do not own.\r\n\r\nIn this change, we are tracking the Fonts we create for each Dpi value that the PermonitorV2 mode application renders on, and dispose them when required. User supplied Fonts are untouched.\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Low.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Tested user supplied applications.\r\n- Manual validation of known HDPI and non-HDPI scenarios with complex winforms test applications.\r\n- Winforms runtime automation.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6207)","Url":"https://github.com/dotnet/winforms/pull/6207","RelatedDescription":"Closed or merged PR \"Cache Fonts for each DPI in PermonV2 mode applications.\" (#6207)"},{"Id":"1059141552","IsPullRequest":true,"CreatedAt":"2021-11-20T13:48:06","Actor":"dotnet-maestro[bot]","Number":"6208","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20211119.2\r\n- **Date Produced**: November 19, 2021 7:31:44 PM UTC\r\n- **Commit**: 97463777ee9a8445d4a4c5911ede0f0cd71fa8aa\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.21568.2 to 7.0.0-beta.21569.2][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.21568.2 to 7.0.0-beta.21569.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.21568.2 to 7.0.0-beta.21569.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.21568.2 to 7.0.0-beta.21569.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.21568.2 to 7.0.0-beta.21569.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.21568.2 to 7.0.0-beta.21569.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/7097001...9746377\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6208)","Url":"https://github.com/dotnet/winforms/pull/6208","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6208)"},{"Id":"1059141640","IsPullRequest":true,"CreatedAt":"2021-11-20T13:43:42","Actor":"dotnet-maestro[bot]","Number":"6209","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211119.8\r\n- **Date Produced**: November 20, 2021 7:50:28 AM UTC\r\n- **Commit**: 7099f4b12a9335690eae6b9b6170bc7431e88621\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21568.3 to 7.0.0-alpha.1.21569.8][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/2b23bfa...7099f4b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6209)","Url":"https://github.com/dotnet/winforms/pull/6209","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6209)"},{"Id":"1058511178","IsPullRequest":true,"CreatedAt":"2021-11-19T19:46:27","Actor":"dotnet-maestro[bot]","Number":"6205","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211118.3\r\n- **Date Produced**: November 18, 2021 6:37:43 PM UTC\r\n- **Commit**: 2b23bfa5d60b185641a513a38a05d63f68e82503\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21568.1 to 7.0.0-alpha.1.21568.3][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/d9afc1e...2b23bfa\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6205)","Url":"https://github.com/dotnet/winforms/pull/6205","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6205)"},{"Id":"1058510607","IsPullRequest":true,"CreatedAt":"2021-11-19T19:46:17","Actor":"dotnet-maestro[bot]","Number":"6204","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20211118.2\r\n- **Date Produced**: November 18, 2021 5:06:27 PM UTC\r\n- **Commit**: 7097001cd87357ebc6fb82f3c7a801efeed70e3f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.21566.10 to 7.0.0-beta.21568.2][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.21566.10 to 7.0.0-beta.21568.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.21566.10 to 7.0.0-beta.21568.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.21566.10 to 7.0.0-beta.21568.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.21566.10 to 7.0.0-beta.21568.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.21566.10 to 7.0.0-beta.21568.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/53cc1bc...7097001\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6204)","Url":"https://github.com/dotnet/winforms/pull/6204","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6204)"},{"Id":"1058861134","IsPullRequest":true,"CreatedAt":"2021-11-19T19:45:00","Actor":"dreddy-work","Number":"6206","RawContent":null,"Title":".NET 7.0 template changes.","State":"open","Body":"Template changes for 7.0 TFM. These were supposed to be done along with branding.\r\n\r\n@KlausLoeffelmann, can you see VB versions here. They seem out dated from the source perspective.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6206)","Url":"https://github.com/dotnet/winforms/pull/6206","RelatedDescription":"Open PR \".NET 7.0 template changes.\" (#6206)"},{"Id":"1058032020","IsPullRequest":true,"CreatedAt":"2021-11-19T01:27:48","Actor":"RussKie","Number":"6203","RawContent":null,"Title":"[6.0.2](Servicing) Set the font after we set the DPI scaling, as it affects how we scale the font","State":"open","Body":"\r\nResolves #6191\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n## Proposed changes\r\n\r\n-  Set the font after we set the DPI scaling, as it affects how we scale the font.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customer using DPI scaling can use the new [application bootstrap functionality](https://aka.ms/applicationconfiguration) introduced in .NET 6.0.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6203)","Url":"https://github.com/dotnet/winforms/pull/6203","RelatedDescription":"Open PR \"[6.0.2](Servicing) Set the font after we set the DPI scaling, as it affects how we scale the font\" (#6203)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-11-26T05:30:37.6463427Z","RunDurationInMilliseconds":530}