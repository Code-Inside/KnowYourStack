{"Data":{"GitHub":{"Issues":[{"Id":"1116816531","IsPullRequest":false,"CreatedAt":"2022-01-28T01:37:27","Actor":"rallets","Number":"6566","RawContent":null,"Title":"[Question] WebBrowser and Excel integration in Windows Forms","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET 6.0 - Visual Studio 2022\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nNo\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nHi, I hope I'm not too much Off Topic.\r\nIn a .net 4.7.2 Windows Forms project a `WebBrowser` control was available. It's not available anymore in a .Net 6.0 project (but I saw some issues here in github mentioning it, so I'm a bit confused, too).\r\nMy goal is to use a WebBrowser control to embed a Microsoft Excel stylesheet (so that Excel results inside the Windows Forms application, to avoid context-switching for the end user). \r\nI know this was possible in the past, but I was not able to find more info about the new .net core version. Do you have any plans in supporting this kind of scenario, or do you know an alternative? I can't reproduce this scenario with my pc because I have installed a newer version of Office (365, excel 16) that I was not able to make it work. It should be possible with previous version of Excel/Office (that is exactly my case).\r\nRelated to this I could think to re-use a UserControl built in .net 4.7.2 using the latest version and Visual Studio 2022.\r\nAnother option could be to open a generic exe-application inside a UserControl. \r\nCould this be something supported from .net 6 & VS 2022?\r\n\r\n**Expected behavior:**\r\n<!--\r\n    Provide details on expected behavior with screenshots/GIF, where ever possible.\r\n -->\r\nI can use a WebBrowser and then embed Excel.\r\n\r\n**Minimal repro:**\r\n<!--\r\n    Provide step by step guide to repro this issue.  Incase repro steps are complex, It would be helpful if \r\n    you attach a GIF with repro actions. Attaching a sample app to repro the issue will help speed up the \r\n    resolution. \r\n -->\r\n(https://www.codeproject.com/Articles/15760/How-to-Integrate-Excel-in-a-Windows-Form-Applicati)\r\nrequires to tweak some registry configs, based on:\r\n(https://social.technet.microsoft.com/Forums/ie/en-US/1fcabd6b-a2e1-4eee-8422-cd77da93ede3/office-2016-open-excel-files-in-ie-11?forum=excel)","Url":"https://github.com/dotnet/winforms/issues/6566","RelatedDescription":"Closed issue \"[Question] WebBrowser and Excel integration in Windows Forms\" (#6566)"},{"Id":"1116776039","IsPullRequest":false,"CreatedAt":"2022-01-27T21:55:14","Actor":"TobiasKnauss","Number":"6565","RawContent":null,"Title":"C# Winforms .Net 5: Load() of base UC is called before Ctor of derived UC is finished","State":"open","Body":".NET 5.0.13\r\nVS 2019: v.16.11.9\r\nboth x86 and x64\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\nNO\r\n\r\nI first seeked for advice on my problem on stackoverflow (https://stackoverflow.com/questions/70882286/, contains some kind of history and other details), but I think it also belongs here, because this is where the relevant developers are active.\r\n\r\nWe have migrated our projects from .Net Framework 4.8 to .Net 5.\r\nNow we see a very strange issue: If the display language of our application is set to something different than English, we get an Exception during the application start.\r\nThe exception is raised in a UserControl with 3 levels of inheritance:\r\n- base, lets call it UCImageObject\r\n- first derived UCImageObjectStandard : UCImageObject\r\n- second derived UCImgObjStd_Circle : UCImageObjectStandard\r\n\r\nUCImageObjectStandard contains another UC (\"UCTolerance\") with `AutoScaleMode=DPI` and some Labels with `AutoSize=true`.\r\nIf the language remains English, the label's text is not changed, because the english-coded texts on the labels are identical with the english texts from our language database. Therefore, the label's size also stays the same. And then there is no need to scale them:\r\n(I stepped through the .Net 5.0.13 source code to find out)\r\n`System.Windows.Forms.Control.ScaleControl(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)`\r\nline 10131: `if (includedSpecified != BoundsSpecified.None)` is false, if the label's text and size are not changed.\r\n\r\nIF the language is set to anything but english, the label's text and size are changed, and the `ScaleControl()` (line 10133) is executed. The problem is, that finally a handle of `UCImageObject` is created and its `Load` event is raised (see stack frame 82 in the following stacktrace), although the constructors of `UCImageObjectStandard` has not been finished (stack frame 41).\r\nThe `Load()` event method of `UCImageObject` then calls a virtual `Init()` method, which is overridden in `UCImageObjectStandard`. The `UCImageObjectStandard.Init()` is then executed before the `UCImageObjectStandard..ctor` has finished, which of course is wrong, and in our case this causes the exception.\r\n\r\nThe strange thing is, that this has worked well for years in .Net Framework 4.8. But it seems that changes have been made in .Net Core or .Net 5.\r\nI think I have recently read a probably related issue about the early creation (or late? or in wrong order?) of a Winforms UC handle, but I cannot find it anymore.\r\n\r\n**Can anybody tell me what has changed?**\r\n**It's wrong to call an overridden method in the ctor of classes that use inheritance. But should we also avoid calling an overridden method in the Load event?**\r\n\r\nStacktrace (frame numbers added by me):\r\n82   at SMCore.UIWF.UCImageObject.UCImageObject_Load(Object i_sender, EventArgs i_eventArgs)\r\n81   at System.Windows.Forms.UserControl.OnLoad(EventArgs e)\r\n80   at System.Windows.Forms.UserControl.OnCreateControl()\r\n79   at System.Windows.Forms.Control.CreateControl(Boolean fIgnoreVisible)\r\n78   at System.Windows.Forms.Control.CreateControl()\r\n77   at System.Windows.Forms.Control.WmShowWindow(Message& m)\r\n76   at System.Windows.Forms.Control.WndProc(Message& m)\r\n75   at System.Windows.Forms.ScrollableControl.WndProc(Message& m)\r\n74   at System.Windows.Forms.ContainerControl.WndProc(Message& m)\r\n73   at System.Windows.Forms.UserControl.WndProc(Message& m)\r\n72   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)\r\n71   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n70   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)\r\n69   at Interop.User32.CreateWindowExW(WS_EX dwExStyle, Char* lpClassName, String lpWindowName, WS dwStyle, Int32 X, Int32 Y, Int32 nWidth, Int32 nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInst, Object lpParam)\r\n68   at System.Windows.Forms.NativeWindow.CreateHandle(CreateParams cp)\r\n67   at System.Windows.Forms.Control.CreateHandle()\r\n66   at System.Windows.Forms.Control.get_Handle()\r\n65   at System.Windows.Forms.Control.get_ShowKeyboardCues()\r\n64   at System.Windows.Forms.ControlPaint.CreateTextFormatFlags(Control control, ContentAlignment textAlign, Boolean showEllipsis, Boolean useMnemonic)\r\n63   at System.Windows.Forms.Label.CreateTextFormatFlags(Size constrainingSize)\r\n62   at System.Windows.Forms.Label.GetPreferredSizeCore(Size proposedConstraints)\r\n61   at System.Windows.Forms.Control.GetPreferredSize(Size proposedSize)\r\n60   at System.Windows.Forms.Label.GetPreferredSize(Size proposedSize)\r\n59   at System.Windows.Forms.Control.get_PreferredSize()\r\n58   at System.Windows.Forms.Label.SetBoundsCore(Int32 x, Int32 y, Int32 width, Int32 height, BoundsSpecified specified)\r\n57   at System.Windows.Forms.Control.ScaleControl(SizeF factor, BoundsSpecified specified)\r\n56   at System.Windows.Forms.Control.ScaleControl(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)\r\n55   at System.Windows.Forms.Control.Scale(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)\r\n54   at System.Windows.Forms.Control.ScaleChildControls(SizeF includedFactor, SizeF excludedFactor, Control requestingControl, Boolean updateWindowFontIfNeeded)\r\n53   at System.Windows.Forms.ContainerControl.Scale(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)\r\n52   at System.Windows.Forms.Control.ScaleChildControls(SizeF includedFactor, SizeF excludedFactor, Control requestingControl, Boolean updateWindowFontIfNeeded)\r\n51   at System.Windows.Forms.Control.Scale(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)\r\n50   at System.Windows.Forms.Control.ScaleChildControls(SizeF includedFactor, SizeF excludedFactor, Control requestingControl, Boolean updateWindowFontIfNeeded)\r\n49   at System.Windows.Forms.Control.Scale(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)\r\n48   at System.Windows.Forms.Control.ScaleChildControls(SizeF includedFactor, SizeF excludedFactor, Control requestingControl, Boolean updateWindowFontIfNeeded)\r\n47   at System.Windows.Forms.ContainerControl.Scale(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)\r\n46   at System.Windows.Forms.ContainerControl.PerformAutoScale(Boolean includedBounds, Boolean excludedBounds)\r\n45   at System.Windows.Forms.ContainerControl.PerformNeededAutoScaleOnLayout()\r\n44   at System.Windows.Forms.ContainerControl.OnLayoutResuming(Boolean performLayout)\r\n43   at System.Windows.Forms.Control.ResumeLayout(Boolean performLayout)\r\n42   at SMCore.UIWF.UCImageObjectStandard.InitializeComponent()\r\n41   at SMCore.UIWF.UCImageObjectStandard..ctor()\r\n40   at SMCore.UIWF.UCImgObjStd_Circle..ctor()\r\n29   at SMCore.UIWF.UCImageObject.Create(EnumType i_type, UCImageObject& io_ucImageObject)\r\n28   at SMCore.UIWF.UCImageObject.ShowData(UCImageObject& io_ucImageObject, CImageObject i_imageObject)\r\n27   at DI.UIWF.UCJobCreatorSettings.ucImageObjectList_SelectionChanged(Object i_oSender, EventArgs i_oEventArgs)\r\n26   at SMCore.UIWF.UCImageObjectList.OnSelectionChanged(Int32 i_imageObjectID)\r\n25   at SMCore.UIWF.UCImageObjectList.dgvImageObjects_SelectionChanged(Object i_sender, EventArgs i_eventArgs)\r\n24   at SMCore.UIWF.UCImageObjectList.ShowData(CImageObjectList i_imageObjectList)\r\n23   at DI.UIWF.UCJobCreatorSettings.Init(CImageObjectList i_oImageObjectList, IList`1 i_listoImageAcquisitionDeviceInfo)\r\n22   at DI_JobEditor.UIWF.frmMain.Init_UI_Settings()\r\n21   at DI_JobEditor.UIWF.frmMain.frmMain_Load(Object i_oSender, EventArgs i_oEventArgs)\r\n20   at System.Windows.Forms.Form.OnLoad(EventArgs e)\r\n19   at System.Windows.Forms.Form.OnCreateControl()\r\n18   at System.Windows.Forms.Control.CreateControl(Boolean fIgnoreVisible)\r\n17   at System.Windows.Forms.Control.CreateControl()\r\n16   at System.Windows.Forms.Control.WmShowWindow(Message& m)\r\n15   at System.Windows.Forms.Control.WndProc(Message& m)\r\n14   at System.Windows.Forms.ScrollableControl.WndProc(Message& m)\r\n13   at System.Windows.Forms.ContainerControl.WndProc(Message& m)\r\n12   at System.Windows.Forms.Form.WmShowWindow(Message& m)\r\n11   at System.Windows.Forms.Form.WndProc(Message& m)\r\n10   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)\r\n09   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n08   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)\r\n07   at Interop.User32.ShowWindow(IntPtr hWnd, SW nCmdShow)\r\n06   at System.Windows.Forms.Control.SetVisibleCore(Boolean value)\r\n05   at System.Windows.Forms.Form.SetVisibleCore(Boolean value)\r\n04   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(msoloop reason, ApplicationContext context)\r\n03   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(msoloop reason, ApplicationContext context)\r\n02   at System.Windows.Forms.Application.Run(Form mainForm)\r\n01   at DI_JobEditor.UIWF.Program.Main(String[] args)\r\n\r\n**Minimal repro:**\r\nnot ready yet.","Url":"https://github.com/dotnet/winforms/issues/6565","RelatedDescription":"Open issue \"C# Winforms .Net 5: Load() of base UC is called before Ctor of derived UC is finished\" (#6565)"},{"Id":"1116723221","IsPullRequest":true,"CreatedAt":"2022-01-27T20:48:50","Actor":"kirsan31","Number":"6564","RawContent":null,"Title":"Speedup BeginInvoke a little.","State":"open","Body":"## Proposed changes\r\n\r\nWhile watching how `BeginInvoke` is implemented, I noticed that `MarshaledInvoke` in the case of an asynchronous call (`BeginInvoke`) always makes two extra Win32 calls. Why call extra code if it's not needed?\r\nSorry if this doesn't meet your [contribution bar](https://github.com/dotnet/winforms/blob/main/CONTRIBUTING.md#contribution-bar) :blush:\r\n\r\n## Customer Impact\r\n\r\n`BeginInvoke` will be _slightly_ faster.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal, if any.\r\n\r\n\r\n## Test methodology\r\n\r\nExisting tests.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6564)","Url":"https://github.com/dotnet/winforms/pull/6564","RelatedDescription":"Open PR \"Speedup BeginInvoke a little.\" (#6564)"},{"Id":"1116197591","IsPullRequest":true,"CreatedAt":"2022-01-27T19:13:30","Actor":"dotnet-maestro[bot]","Number":"6561","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220126.16\r\n- **Date Produced**: January 27, 2022 9:17:05 AM UTC\r\n- **Commit**: ac0a35b063c7767618468636b782b19a632393b2\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/cfd725f...ac0a35b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6561)","Url":"https://github.com/dotnet/winforms/pull/6561","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6561)"},{"Id":"1116397458","IsPullRequest":true,"CreatedAt":"2022-01-27T15:33:31","Actor":"jbhensley","Number":"6563","RawContent":null,"Title":"Fix ListViewGroupAccessibleObject.GetNativeGroupId returning incorrect value","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #6306\r\n\r\n\r\n## Proposed changes\r\n\r\n`ListViewGroupAccessibleObject.GetNativeGroupId` attempted to retrieve information about a group from the native control based on its positional index. However, the position in `ListView.Groups` does not always correspond to the position in the native control (see more information here: https://github.com/dotnet/winforms/issues/6306#issuecomment-1020301155). Specifically, there is a difference when:\r\n\r\n- The user adds a `ListView` to a `Form` and groups to the `ListView` using the visual designer, in which case the `ListView` handle will be created after groups have been added\r\n- The user adds a `ListView` to a `Form` and then creates groups programmatically after the form has been displayed. In this case, the `ListView` handle will be created before groups are added\r\n\r\nIn the former case, the native control will not contain the default group, while in the latter case it will. This changes the positional index of groups in the native control. \r\n\r\nWe can bypass all of the concern regarding position by simply using `ListViewGroup.ID`, which is an incrementing unique identifier passed to Win32 as `LVGROUP.iGroupId` upon creation.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- The accessibility rectangle for `ListViewGroups` should show correctly in cases where groups are added after handle creation\r\n\r\n## Risk\r\n\r\n- Should be minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nHere we can see pre-fix that highlighting group 1 with Accessibility Insights returns information for group 2\r\n\r\n![image](https://user-images.githubusercontent.com/13544395/151389950-5dea1f8f-9088-45f8-9d98-3cd41cdb9b2b.png)\r\n\r\n\r\n### After\r\n\r\nHere we can see post-fix that highlighting group 1 with Accessibility Insights returns the correct information\r\n\r\n![image](https://user-images.githubusercontent.com/13544395/151390140-130d1261-7e2f-4253-9aa8-cd5f5e81cb17.png)\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit tests\r\n- Accessibility Insights for Windows tool\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6563)","Url":"https://github.com/dotnet/winforms/pull/6563","RelatedDescription":"Open PR \"Fix ListViewGroupAccessibleObject.GetNativeGroupId returning incorrect value\" (#6563)"},{"Id":"1116203127","IsPullRequest":true,"CreatedAt":"2022-01-27T13:17:06","Actor":"SergeySmirnov-Akvelon","Number":"6562","RawContent":null,"Title":"Fixing border color of pressed Popup CheckBox/RadioButton","State":"open","Body":"Fixes #6560\r\n\r\n## Proposed changes\r\n- The problem is reproduced because the original color has low contrast.\r\n- Added logic for color darkening.\r\n\r\n## Customer Impact\r\n**Before fix:**\r\n![image](https://user-images.githubusercontent.com/23376742/151365982-ba48f261-8dc6-4e90-b0a7-ff80a9b5f6c8.png)\r\n\r\n**After fix:**\r\n![image](https://user-images.githubusercontent.com/23376742/151365936-4e22fef0-d7c0-4bae-94dc-8607a6037e8e.png)\r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- CTI team\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Accessibility Insights\r\n \r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19044.1469]\r\n- .NET Core SDK: 7.0.0-preview.2.22075.9\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6562)","Url":"https://github.com/dotnet/winforms/pull/6562","RelatedDescription":"Open PR \"Fixing border color of pressed Popup CheckBox/RadioButton\" (#6562)"},{"Id":"1116156518","IsPullRequest":false,"CreatedAt":"2022-01-27T12:32:35","Actor":"SergeySmirnov-Akvelon","Number":"6560","RawContent":null,"Title":"The border color of the pressed  popup CheckBox/RadioButton has low contrast","State":"open","Body":".NET Core Version: \r\n- 7.0.0-preview.2.22075.9\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\n- Yes\r\n\r\n**Repro steps:**\r\n1. Create a `Form` with a `Checkbox` or `RadioButton`\r\n2. Set the following setting (`Appearance = Appearance.Button`)\r\n3. Run the app\r\n4. Pressed button\r\n\r\n**Actual behavior:**\r\nThe color contrast of the button border is less than 3:1:\r\n![image](https://user-images.githubusercontent.com/23376742/151359434-56561c80-9c40-4b9a-a629-5b3b2510f49d.png)\r\n\r\n**Expected behavior:**\r\nLuminosity contrast ratio of the button border is greater than 3:1.","Url":"https://github.com/dotnet/winforms/issues/6560","RelatedDescription":"Open issue \"The border color of the pressed  popup CheckBox/RadioButton has low contrast\" (#6560)"},{"Id":"1116084106","IsPullRequest":false,"CreatedAt":"2022-01-27T11:15:37","Actor":"DmitryGorokhov","Number":"6559","RawContent":null,"Title":"TreeView control has no highlighting of selected node first time if the control has first TabIndex on the form","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n7.0.0-alpha.1.21528.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n* More info:\r\nThis problem was found in #6432\r\nYou can find more details there.\r\n\r\n**Problem description:**\r\nIf a TreeView control has first TabIndex on the form, selected node has no highlighting first time.\r\n\r\n![BrokenFocusOnTreeView](https://user-images.githubusercontent.com/58004471/147512386-b429de63-9bda-4498-bc64-5bd25076beaa.gif)\r\n\r\n**Expected behavior:**\r\nSelected node should have focus all times whatever TabIndex of control.\r\n\r\n![FocusOnTreeView](https://user-images.githubusercontent.com/58004471/147512415-1f71ba67-4201-43e7-b7db-1c6381e94b05.gif)\r\n\r\n**Minimal repro:**\r\n1. Create a WinForms core project\r\n1. Create TreeView with nodes.\r\n1. Then create Button.\r\n1. Make sure tree has TabIndex equals 0 and button has TabIndex equals 1. If no change it.\r\n1. Launch Inspect or Narrator.\r\n1. Build and run the app.\r\n1. Make sure when the form finishes loading the selected node is not highlighted.","Url":"https://github.com/dotnet/winforms/issues/6559","RelatedDescription":"Open issue \"TreeView control has no highlighting of selected node first time if the control has first TabIndex on the form\" (#6559)"},{"Id":"1116062631","IsPullRequest":false,"CreatedAt":"2022-01-27T10:54:31","Actor":"DmitryGorokhov","Number":"6558","RawContent":null,"Title":"Inspect has incorrect focus when selecting specific tree node of a TreeView control","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n7.0.0-alpha.1.21528.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n* More info: \r\nThis is regression after #6432\r\nIt doesn't reproduce if \"Watch cursor\" Inspect option is turned off.\r\n\r\n**Problem description:**\r\n\r\nWhen select specific tree node or leaf tree node, the yellow focus rectangle moves and stays on entire TreeView, not TreeNode.\r\nIt doesn't reproduce if \"Watch cursor\" Inspect option is turned off.\r\n\r\n![Issue1_withPrivates](https://user-images.githubusercontent.com/58004471/151345065-a6bd58ac-5c2f-4ff8-acdf-cf5282245249.gif)\r\n\r\n\r\n**Expected behavior:**\r\n\r\nWhen select specific tree node or leaf tree node, the yellow focus rectangle stays on the selected node.\r\n\r\n![Issue1_withoutPrivates](https://user-images.githubusercontent.com/58004471/151345095-e6da1137-a261-4ca8-b5b1-260a514ed1da.gif)\r\n\r\n\r\n\r\n**Minimal repro:**\r\n1. Create a WinForms core project with TreeView control with nodes.\r\n2. Build and start the app.\r\n3. Launch the Inspect.\r\n4. Turn on \"Watch cursor\" option if it's turned off.\r\n5. Select node using a mouse.\r\n6. Observe the yellow rectangle of Inspect.\r\n","Url":"https://github.com/dotnet/winforms/issues/6558","RelatedDescription":"Open issue \"Inspect has incorrect focus when selecting specific tree node of a TreeView control\" (#6558)"},{"Id":"1116033104","IsPullRequest":true,"CreatedAt":"2022-01-27T10:25:32","Actor":"SergeySmirnov-Akvelon","Number":"6557","RawContent":null,"Title":"Fixing Popup button border color ","State":"open","Body":"Fixes #6556\r\n\r\n\r\n## Proposed changes\r\n- The problem is reproduced because in the case described in the repro steps, an additional border is drawn by the `DrawDefaultBorder` method. Since they use a different color, the `Button` comes with a two-color border.\r\n- Changed the logic for drawing borders so that the same color is used for both methods as it was before. \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n**Before fix:**\r\n![image](https://user-images.githubusercontent.com/23376742/151339038-86d26bc8-7da7-417b-9c51-79e71fb7a62f.png)\r\n\r\n**After fix:**\r\n![image](https://user-images.githubusercontent.com/23376742/151339966-a4b5898e-19be-4f5b-808a-47f2306dbc95.png)\r\n\r\n## Regression? \r\n\r\n- Yes (from #6021)\r\n\r\n## Risk\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- CTI team \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Accessibility Insights\r\n \r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19044.1469]\r\n- .NET Core SDK: 7.0.0-preview.2.22075.9\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6557)","Url":"https://github.com/dotnet/winforms/pull/6557","RelatedDescription":"Open PR \"Fixing Popup button border color \" (#6557)"},{"Id":"1115970571","IsPullRequest":false,"CreatedAt":"2022-01-27T09:25:13","Actor":"SergeySmirnov-Akvelon","Number":"6556","RawContent":null,"Title":"Popup button border has two colors when user moves focus to another app","State":"open","Body":".NET Core Version: \r\n- 7.0.0-alpha.1.22069.9\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\n- No (regression from #6021)\r\n\r\n**Repro steps:**\r\n1. Create a `Form` with a `Button`\r\n2. Set the following button setting (`FlatStyle = FlatStyle.Popup`)\r\n3. Run the app\r\n4. Move focus to another app\r\n\r\n**Actual behavior:**\r\nButton border has 2 colors:\r\n![image](https://user-images.githubusercontent.com/23376742/151329572-96979f24-6167-4db2-a3a1-725785e3251d.png)\r\n\r\n**Expected color:**\r\nButton border should be a single color.","Url":"https://github.com/dotnet/winforms/issues/6556","RelatedDescription":"Open issue \"Popup button border has two colors when user moves focus to another app\" (#6556)"},{"Id":"1115683221","IsPullRequest":false,"CreatedAt":"2022-01-27T01:58:57","Actor":"rickbrew","Number":"6555","RawContent":null,"Title":"Make Application.[Begin,End]ModalMessageLoop() public instead of internal","State":"open","Body":"I must admit that I've been using these two methods, via reflection, for ... a very, very, very long time (15 years?). Paint.NET relies on them in order to create something called a _modal frame_, which is where the UI is doing some kind of processing, e.g. loading (an) image(s) and showing a progress bar in the status bar, and needs the UI to stay not-un-responsive (not ghosted, i.o.w.), but also to be disabled but not _visibly_ disabled (i.o.w., no input allowed, but don't change appearance). There's also some other weird (yet also very important!) places I use it, but that suffices for now.\r\n\r\nAs far as I can tell, this isn't achievable without resorting to reflection to call these two methods. At this point, even if someone has a better way of doing this, I'm not sure the risk is worth it because it could fundamentally break the app if even one tiny part didn't work in exactly the same way (the modal frame also involves some weird, esoteric message pumping stuff). \r\n\r\nSo I have 2 requests, mutually exclusive. Either 1) don't ever change these methods, as it'll fundamentally break Paint.NET, or 2) just make them public. Happy to craft up a PR for the second :)","Url":"https://github.com/dotnet/winforms/issues/6555","RelatedDescription":"Open issue \"Make Application.[Begin,End]ModalMessageLoop() public instead of internal\" (#6555)"},{"Id":"1115635777","IsPullRequest":true,"CreatedAt":"2022-01-27T01:24:16","Actor":"dotnet-maestro[bot]","Number":"6554","RawContent":null,"Title":"[release/7.0-preview1] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:872a0891-78a4-400f-c141-08d9d60066b9)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 872a0891-78a4-400f-c141-08d9d60066b9\r\n- **Build**: 20220126.8\r\n- **Date Produced**: January 26, 2022 11:32:11 PM UTC\r\n- **Commit**: 405337939cf8d793661f6c6c0007c3f519b26f0d\r\n- **Branch**: refs/heads/release/7.0-preview1\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/aa73132...4053379\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:872a0891-78a4-400f-c141-08d9d60066b9)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6554)","Url":"https://github.com/dotnet/winforms/pull/6554","RelatedDescription":"Closed or merged PR \"[release/7.0-preview1] Update dependencies from dotnet/runtime\" (#6554)"},{"Id":"1114455865","IsPullRequest":true,"CreatedAt":"2022-01-27T01:24:02","Actor":"JeremyKuhne","Number":"6548","RawContent":null,"Title":"Clean up AccessibleObject","State":"closed","Body":"- Use standard field naming\r\n- Use interpolated strings\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6548)","Url":"https://github.com/dotnet/winforms/pull/6548","RelatedDescription":"Closed or merged PR \"Clean up AccessibleObject\" (#6548)"},{"Id":"1114691385","IsPullRequest":true,"CreatedAt":"2022-01-26T23:46:32","Actor":"gpetrou","Number":"6551","RawContent":null,"Title":"Enable nullability in LayoutEngine","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in LayoutEngine.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6551)","Url":"https://github.com/dotnet/winforms/pull/6551","RelatedDescription":"Closed or merged PR \"Enable nullability in LayoutEngine\" (#6551)"},{"Id":"1114458330","IsPullRequest":true,"CreatedAt":"2022-01-26T17:24:14","Actor":"dotnet-maestro[bot]","Number":"6549","RawContent":null,"Title":"[release/7.0-preview1] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:872a0891-78a4-400f-c141-08d9d60066b9)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 872a0891-78a4-400f-c141-08d9d60066b9\r\n- **Build**: 20220125.6\r\n- **Date Produced**: January 25, 2022 10:21:01 PM UTC\r\n- **Commit**: aa731324884707771991eb403eaf249f1eadfdf5\r\n- **Branch**: refs/heads/release/7.0-preview1\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.1.22071.6 to 7.0.0-preview.1.22075.6][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/0a462a7...aa73132\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:872a0891-78a4-400f-c141-08d9d60066b9)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6549)","Url":"https://github.com/dotnet/winforms/pull/6549","RelatedDescription":"Closed or merged PR \"[release/7.0-preview1] Update dependencies from dotnet/runtime\" (#6549)"},{"Id":"1115002101","IsPullRequest":true,"CreatedAt":"2022-01-26T17:23:58","Actor":"dotnet-maestro[bot]","Number":"6552","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220125.9\r\n- **Date Produced**: January 26, 2022 6:59:10 AM UTC\r\n- **Commit**: cfd725fcd1d446950efd8a7751a78b83f3b3e2c1\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/341c394...cfd725f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6552)","Url":"https://github.com/dotnet/winforms/pull/6552","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6552)"},{"Id":"1115122001","IsPullRequest":false,"CreatedAt":"2022-01-26T15:03:25","Actor":"cadilhac","Number":"6553","RawContent":null,"Title":"Impossible to make the Visual Studio PropertyGrid use my custom FileNameEditor derived class","State":"open","Body":"* .NET Core Version: \r\n.Net 6\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo, it works perfectly with the .Net Framework\r\n\r\n**Problem description:**\r\nI want to use a custom FileNameEditor for a custom control property. I derived from FileNameEditor like so:\r\n\r\n```\r\npublic class MyFileNameEditor : System.Windows.Forms.Design.FileNameEditor\r\n{\r\n    protected override void InitializeDialog(OpenFileDialog openFileDialog)\r\n    {\r\n        base.InitializeDialog(openFileDialog);\r\n\r\n        openFileDialog.Filter = \"My files (*.custom)|*.custom\";\r\n    }\r\n}\r\n```\r\n\r\nI applied it like so:\r\n\r\n```\r\n[Editor(typeof(MyFileNameEditor ), typeof(System.Drawing.Design.UITypeEditor))]\r\npublic string MyFileName\r\n{\r\n    set [...]\r\n    get [...]\r\n}\r\n```\r\n\r\nIn the VS designer, when selecting the custom control, inside the PropertyGrid, the property will have no editor.\r\nNote that if I use the stock FileNameEditor instead, it just works.\r\n","Url":"https://github.com/dotnet/winforms/issues/6553","RelatedDescription":"Open issue \"Impossible to make the Visual Studio PropertyGrid use my custom FileNameEditor derived class\" (#6553)"},{"Id":"1114579084","IsPullRequest":false,"CreatedAt":"2022-01-26T03:06:38","Actor":"Olina-Zhang","Number":"6550","RawContent":null,"Title":"Need to be able to remove empty events in Windows Form","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nEvents can be left empty in the code during visual design. A visual design session may cause many empty unwanted event handler code to be created while experimenting with controls, etc. The code will end-up containing empty event handlers. A programmer can’t just delete such code from the code without getting horrible error message because the event handler coded is in 2 files. The only safe way is to go to the visual designer and remove them one by one manually. This process is so tedious and DANGEROUSE.\r\n\r\nThis behavior is as old as VS. It happens in Windows Forms at least.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\nNote that this is a C#-only issue. In VB, the Handles clause makes it easy to delete event handlers without causing an error with the InitializeComponent method.\r\n\r\nA Roslyn Analyzer is a good suggestion to improve the experience here. I should mention that it's not necessarily a cheap analyzer to run, since it would have to be careful to only suggest removing an empty event handler if the only reference to is in InitializeComponent, but such an analyzer wouldn't be hard to write.\r\n","Url":"https://github.com/dotnet/winforms/issues/6550","RelatedDescription":"Open issue \"Need to be able to remove empty events in Windows Form\" (#6550)"},{"Id":"1113312642","IsPullRequest":true,"CreatedAt":"2022-01-25T19:58:36","Actor":"JeremyKuhne","Number":"6544","RawContent":null,"Title":"Clean up code in AxHost/DataObject/ContainerControl","State":"closed","Body":"Specifically targeting a few things:\r\n\r\n- Use interpolated strings\r\n- Clean up field naming style\r\n- General reduction of blue info messages\r\n\r\nI tweaked some interop definitions to allow using readonly Guids when requesting interfaces.\r\n\r\nNote that AxHost.State custom serializes- I went through it carefully to make sure updating the fields wouldn't impact serialization.\r\n\r\nMost of the strings are in Debug tracing. Moving to interpolated strings will avoid a lot of needless string formatting when debugging. I'm skeptical of the value of maintaining these at all actually, but for now I'm not going to push leaving them in. (They make reading the code significantly more difficult.)\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6544)","Url":"https://github.com/dotnet/winforms/pull/6544","RelatedDescription":"Closed or merged PR \"Clean up code in AxHost/DataObject/ContainerControl\" (#6544)"},{"Id":"1113871230","IsPullRequest":true,"CreatedAt":"2022-01-25T13:46:18","Actor":"dotnet-maestro[bot]","Number":"6547","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220124.8\r\n- **Date Produced**: January 25, 2022 9:38:23 AM UTC\r\n- **Commit**: 341c3941ad4065686f7a9f627b773b8e4e3c0999\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.22073.5 to 7.0.0-preview.2.22074.8][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/09ff1ac...341c394\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6547)","Url":"https://github.com/dotnet/winforms/pull/6547","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6547)"},{"Id":"1113870317","IsPullRequest":true,"CreatedAt":"2022-01-25T13:10:02","Actor":"dotnet-maestro[bot]","Number":"6546","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220126.9\r\n- **Date Produced**: January 27, 2022 1:40:48 AM UTC\r\n- **Commit**: 93656ab81d1b7f4507edc971465ef2e640694e64\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22071.6 to 7.0.0-beta.22076.9][3]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22071.6 to 7.0.0-beta.22076.9][3]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22071.6 to 7.0.0-beta.22076.9][3]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22071.6 to 7.0.0-beta.22076.9][3]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22071.6 to 7.0.0-beta.22076.9][3]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22071.6 to 7.0.0-beta.22076.9][3]\r\n\r\n[3]: https://github.com/dotnet/arcade/compare/e1ea887...93656ab\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6546)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/6546","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/arcade\" (#6546)"},{"Id":"1113469890","IsPullRequest":true,"CreatedAt":"2022-01-25T06:13:49","Actor":"gpetrou","Number":"6545","RawContent":null,"Title":"Enable nullability in ButtonBase","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in ButtonBase.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6545)","Url":"https://github.com/dotnet/winforms/pull/6545","RelatedDescription":"Open PR \"Enable nullability in ButtonBase\" (#6545)"},{"Id":"1113301125","IsPullRequest":true,"CreatedAt":"2022-01-25T02:12:58","Actor":"RussKie","Number":"6543","RawContent":null,"Title":"Add new msftbot rules","State":"closed","Body":"1. Respond to comments on closed issues.\r\n2. Respond to comments on closed PRs.\r\n3. Lock closed issues and PRs after 30 days of inactivity.\r\n\r\nThese rules are already applied in dotnet/runtime and dotnet/aspnetcore repos, e.g., https://github.com/dotnet/aspnetcore/pull/39568#issuecomment-1016822325.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6543)","Url":"https://github.com/dotnet/winforms/pull/6543","RelatedDescription":"Closed or merged PR \"Add new msftbot rules\" (#6543)"},{"Id":"1112052431","IsPullRequest":true,"CreatedAt":"2022-01-24T21:29:22","Actor":"RussKie","Number":"6538","RawContent":null,"Title":"Move FabricBot rules to Configuration-As-Code","State":"closed","Body":"Migrates FabricBot automation for the dotnet-api-docs to [Config-as-Code](https://microsoft.sharepoint.com/teams/FabricBot/SitePages/Config-as-code.aspx). The file is a dump of the automation rules that are currently active and doesn't contain any additional changes.\r\n\r\n\r\nSimilar to https://github.com/dotnet/runtime/pull/62297 and https://github.com/dotnet/dotnet-api-docs/pull/7442.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6538)","Url":"https://github.com/dotnet/winforms/pull/6538","RelatedDescription":"Closed or merged PR \"Move FabricBot rules to Configuration-As-Code\" (#6538)"},{"Id":"1111548341","IsPullRequest":true,"CreatedAt":"2022-01-24T17:43:28","Actor":"dotnet-maestro[bot]","Number":"6537","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220123.5\r\n- **Date Produced**: January 24, 2022 9:09:13 AM UTC\r\n- **Commit**: 09ff1acdad2e7789908b5db9bb89896144c13042\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.22070.17 to 7.0.0-alpha.1.22073.5][3]\r\n\r\n[3]: https://github.com/dotnet/runtime/compare/f3e4e76...09ff1ac\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6537)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/6537","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6537)"},{"Id":"1112248399","IsPullRequest":true,"CreatedAt":"2022-01-24T17:43:11","Actor":"Danil-Andrianov","Number":"6539","RawContent":null,"Title":"Marked problematic PrintPreviewDialog tests with \"Skip\" attribute","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFroze #6501\r\n\r\n\r\n## Proposed changes\r\n\r\n- Problematic test  in _main_ `System.Windows.Forms.UITests.PrintPreviewDialogTests`\r\nis ignored for now.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6539)","Url":"https://github.com/dotnet/winforms/pull/6539","RelatedDescription":"Closed or merged PR \"Marked problematic PrintPreviewDialog tests with \"Skip\" attribute\" (#6539)"},{"Id":"1112681871","IsPullRequest":true,"CreatedAt":"2022-01-24T15:04:41","Actor":"bekir-ozturk","Number":"6542","RawContent":null,"Title":"Test dotnet-install.sh fix","State":"closed","Body":"PR to test the latest install scripts change on CI. Not to be merged.\r\nTests on other repos: \r\n- https://github.com/dotnet/aspnetcore/pull/39724\r\n- https://github.com/dotnet/arcade/pull/8380\r\n- https://github.com/dotnet/sdk/pull/23559\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6542)","Url":"https://github.com/dotnet/winforms/pull/6542","RelatedDescription":"Closed or merged PR \"Test dotnet-install.sh fix\" (#6542)"},{"Id":"1112596900","IsPullRequest":false,"CreatedAt":"2022-01-24T12:41:56","Actor":"qwertybba","Number":"6541","RawContent":null,"Title":".NET 6 Cannot read resources that depend on serialization","State":"open","Body":"* .NET Core Version:  6.0.101\r\n\r\n* Have you experienced this same bug with .NET Framework?:  No \r\n\r\n**Problem description:**\r\nWhen I run the WinForm application from VS2022 and try to open one of the forms I get this error:\r\n\r\n> System.NotSupportedException\r\n  HResult=0x80131515\r\n  Message=Cannot read resources that depend on serialization.\r\n  Source=System.Resources.Extensions\r\n  StackTrace:\r\n   at System.Resources.Extensions.DeserializingResourceReader.UseReflectionToGetType(Int32 typeIndex)\r\n   at System.Resources.Extensions.DeserializingResourceReader.DeserializeObject(Int32 typeIndex)\r\n   at System.Resources.Extensions.DeserializingResourceReader.LoadObjectV2(Int32 pos, ResourceTypeCode& typeCode)\r\n   at System.Resources.Extensions.DeserializingResourceReader.ResourceEnumerator.get_Entry()\r\n   at System.Resources.Extensions.DeserializingResourceReader.ResourceEnumerator.get_Current()\r\n   at System.ComponentModel.ComponentResourceManager.FillResources(CultureInfo culture, ResourceSet& resourceSet)\r\n   at System.ComponentModel.ComponentResourceManager.FillResources(CultureInfo culture, ResourceSet& resourceSet)\r\n   at System.ComponentModel.ComponentResourceManager.FillResources(CultureInfo culture, ResourceSet& resourceSet)\r\n   at System.ComponentModel.ComponentResourceManager.ApplyResources(Object value, String objectName, CultureInfo culture)\r\n   at SmartWinForm.PL.FrmWeldingProduction.InitializeComponent() in C:\\Users\\MBoua\\source\\repos\\SmartWinForm\\SmartWinForm\\PL\\FrmWeldingProduction.Designer.cs:line 295\r\n   at SmartWinForm.PL.FrmWeldingProduction..ctor() in C:\\Users\\MBoua\\source\\repos\\SmartWinForm\\SmartWinForm\\PL\\FrmWeldingProduction.cs:line 23\r\n   at SmartWinForm.PL.XtraMain.bbtnWeldingProduction_ItemClick(Object sender, ItemClickEventArgs e) in C:\\Users\\MBoua\\source\\repos\\SmartWinForm\\SmartWinForm\\PL\\XtraMain.cs:line 973\r\n   at DevExpress.XtraBars.BarItem.OnClick(BarItemLink link)\r\n   at DevExpress.XtraBars.BarBaseButtonItem.OnClick(BarItemLink link)\r\n   at DevExpress.XtraBars.BarButtonItem.OnClick(BarItemLink link)\r\n   at DevExpress.XtraBars.BarItemLink.OnLinkClick()\r\n   at DevExpress.XtraBars.BarButtonItemLink.OnLinkClick()\r\n   at DevExpress.XtraBars.BarButtonItemLink.OnLinkAction(BarLinkAction action, Object actionArgs)\r\n   at DevExpress.XtraBars.ViewInfo.BarSelectionInfo.ClickLink(BarItemLink link)\r\n   at DevExpress.XtraBars.ViewInfo.BarSelectionInfo.UnPressLink(BarItemLink link)\r\n   at DevExpress.XtraBars.Ribbon.Handler.BaseRibbonHandler.OnUnPressItem(DXMouseEventArgs e, RibbonHitInfo hitInfo)\r\n   at DevExpress.XtraBars.Ribbon.Handler.BaseRibbonHandler.OnUnPress(DXMouseEventArgs e, RibbonHitInfo hitInfo)\r\n   at DevExpress.XtraBars.Ribbon.Handler.RibbonHandler.OnUnPress(DXMouseEventArgs e, RibbonHitInfo hitInfo)\r\n   at DevExpress.XtraBars.Ribbon.Handler.BaseRibbonHandler.OnMouseUp(DXMouseEventArgs e)\r\n   at DevExpress.XtraBars.Ribbon.Handler.RibbonHandler.OnMouseUp(DXMouseEventArgs e)\r\n   at DevExpress.XtraBars.Ribbon.RibbonControl.OnMouseUp(MouseEventArgs e)\r\n   at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at DevExpress.Utils.Controls.ControlBase.BaseWndProc(Message& m)\r\n   at DevExpress.XtraBars.Ribbon.RibbonControl.WndProc(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)\r\n\r\nI use:\r\nWindows 11 Pro x64bit\r\nVS2022 Version 17.0.5\r\n","Url":"https://github.com/dotnet/winforms/issues/6541","RelatedDescription":"Open issue \".NET 6 Cannot read resources that depend on serialization\" (#6541)"},{"Id":"1112404006","IsPullRequest":true,"CreatedAt":"2022-01-24T09:47:40","Actor":"Danil-Andrianov","Number":"6540","RawContent":null,"Title":"Fixed PrintPreviewDialog tests","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nPartially implements #6501\r\n\r\n\r\n## Proposed changes\r\n\r\n- Problematic test  in _main_ `System.Windows.Forms.UITests.PrintPreviewDialogTests`\r\nare fixed.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6540)","Url":"https://github.com/dotnet/winforms/pull/6540","RelatedDescription":"Open PR \"Fixed PrintPreviewDialog tests\" (#6540)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-01-28T03:30:43.3852186Z","RunDurationInMilliseconds":529}