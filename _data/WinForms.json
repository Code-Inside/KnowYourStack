{"Data":{"GitHub":{"Issues":[{"Id":"2719047329","IsPullRequest":false,"CreatedAt":"2024-12-05T00:21:05","Actor":"elachlan","Number":"12588","RawContent":null,"Title":"API Proposal: Calculate Contrast Color for Improved Accessibility","State":"open","Body":"### Background and motivation\n\nWhen designing user interfaces, it is essential to ensure text or elements displayed over a background color have sufficient contrast for readability. This is particularly relevant for accessibility compliance (e.g., WCAG). Calculating a contrasting color, such as black or white, based on the background color's luminance, is a common requirement.\n\nCurrently, .NET's `Color` struct does not provide an in-built way to compute a contrast color. This proposal adds a `ContrastColor` method directly to the Color struct, allowing developers to easily determine the optimal contrasting color (black or white) for any given color.\n\nI currently use a version of this in my applications to help get contrasting text color for different labels/controls where a user can configure its background color (such as the status bar).\n\nReference: https://stackoverflow.com/questions/1855884/determine-font-color-based-on-background-color\n\n### API Proposal\n\n```csharp\nusing System.Drawing;\n\npublic static class ColorExtensions\n{\n    /// <summary>\n    /// Calculates a contrasting color (black or white) based on the luminance of the current color.\n    /// </summary>\n    /// <param name=\"color\">The base color.</param>\n    /// <returns>Black for bright colors, white for dark colors.</returns>\n    public static Color ContrastColor(this Color color)\n    {\n        // Calculate the perceptive luminance (luma) using standard coefficients\n        double luma = ((0.299 * color.R) + (0.587 * color.G) + (0.114 * color.B)) / 255;\n\n        // Return black for bright colors, white for dark colors\n        return color.A == 0 || luma > 0.5 ? Color.Black : Color.White;\n    }\n}\n\n```\n\n\n### API Usage\n\n```csharp\nusing System.Drawing;\n\nColor backgroundColor = Color.FromArgb(255, 200, 200); // Light red\nColor contrastingColor = backgroundColor.ContrastColor();\n// Result: Color.Black\n```\n\n\n### Alternative Designs\n\n**Standalone Helper Function**\nInstead of an extension method, a static utility function could be added in a helper class. However, attaching the method directly to Color improves discoverability and API integration.\n\n**Configurable Threshold**\nAn additional overload could allow developers to specify a custom luminance threshold, but this would add complexity without significant value for most use cases.\n\n### Risks\n\n**Perceived Simplicity**\nWhile the luminance formula used is standard, it assumes consistent behavior across platforms. Deviations in rendering systems or gamma settings might lead to slight visual discrepancies.\n\n**Edge Cases**\nFully transparent colors (Color.A = 0) are handled by returning Color.Black as a fallback, which may not align with all design requirements.\n\n### Will this feature affect UI controls?\n\nN/A","Url":"https://github.com/dotnet/winforms/issues/12588","RelatedDescription":"Open issue \"API Proposal: Calculate Contrast Color for Improved Accessibility\" (#12588)"},{"Id":"2716447681","IsPullRequest":true,"CreatedAt":"2024-12-04T22:33:32","Actor":"JeremyKuhne","Number":"12581","RawContent":null,"Title":"Add WPF test visibility to System.Private.Windows.Core","State":"closed","Body":"Add an entry for every test assembly. Not all of these projects exist yet, but they will soon. I'll be forcing all of the WPF test projects to the Open key.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12581)","Url":"https://github.com/dotnet/winforms/pull/12581","RelatedDescription":"Closed or merged PR \"Add WPF test visibility to System.Private.Windows.Core\" (#12581)"},{"Id":"2715616454","IsPullRequest":true,"CreatedAt":"2024-12-04T21:20:40","Actor":"lonitra","Number":"12578","RawContent":null,"Title":"Add File Classification for runtime pack","State":"closed","Body":"Related: https://github.com/dotnet/windowsdesktop/issues/4796\r\n\r\nThis change includes file classification that is needed for the runtime pack in windowsdesktop in our FileClassification.props to avoid maintaining this list in the windowsdesktop repo. These dlls come from winforms so they should be maintained here and simply pulled into windowsdesktop [like how we are already doing for the ref pack](https://github.com/dotnet/windowsdesktop/blob/main/src/windowsdesktop/src/sfx/Microsoft.WindowsDesktop.App.Ref.sfxproj#L25). The list is currently being maintained https://github.com/dotnet/windowsdesktop/blob/main/src/windowsdesktop/src/sfx/Microsoft.WindowsDesktop.App.Runtime.sfxproj#L22-L39\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12578)","Url":"https://github.com/dotnet/winforms/pull/12578","RelatedDescription":"Closed or merged PR \"Add File Classification for runtime pack\" (#12578)"},{"Id":"2718808332","IsPullRequest":false,"CreatedAt":"2024-12-04T21:19:21","Actor":"lonitra","Number":"12587","RawContent":null,"Title":"Survey: Repo Contribution Experience 2024","State":"open","Body":"Similar to last year, we are doing a survey to gain feedback on how the repo contribution experience is.\nWhether you've been involved for years or you're relatively new please tell us about your experience participating and contributing to the project.  Your feedback is important to us, we'd love to hear how it's going and how we can improve.\n\nSurvey link: https://www.surveymonkey.com/r/5SJ7DVG","Url":"https://github.com/dotnet/winforms/issues/12587","RelatedDescription":"Open issue \"Survey: Repo Contribution Experience 2024\" (#12587)"},{"Id":"2718577879","IsPullRequest":false,"CreatedAt":"2024-12-04T19:05:53","Actor":"paulthegreat","Number":"12586","RawContent":null,"Title":"Correct System.Windows.Forms.ControlPaint.HSLColor.Darker function","State":"open","Body":"### Background and motivation\n\nAt least since .NET Framework 4, the `System.WIndows.Forms.ControlPaint.HSLColor.Darker` function (which is called by `System.Windows.Forms.ControlPaint.Dark()`) has been wrong for non-system colors.\n\nThe `Lighter` function logically interpolates, based on the passed percentage value, from the current luminosity towards a luminosity value 50% higher. The `Darker` function illogically interpolates, based on the passed percentage value, from a luminosity value 33% lower than the current luminosity towards zero.\n\nA call to `Lighter(0)` reasonably returns the same color. A call to `Darker(0)` unreasonably returns a color 33% darker. `Lighter(0.5)` returns a color 25% lighter; `Darker(0.5)` returns a color 67% darker. `Lighter(1)` returns a color 50% lighter; `Darker(1)` returns black.\n\n### API Proposal\n\n```csharp\nnamespace System.Windows.Forms;\n\npublic static partial class ControlPaint\n{\n    private readonly struct HLSColor : IEquatable<HLSColor>\n    {\n        public Color Darker(float percDarker)\n        {\n            if (!_isSystemColors_Control)\n            {\n                // *** this block is the only changed code ***\n                // match the Lighter function and use current luminosity as a baseline instead of zero\n                int zeroLum = luminosity;\n                int oneLum = NewLuma(ShadowAdjustment, true);\n                return ColorFromHLS(_hue, zeroLum + (int)((oneLum - zeroLum) * percDarker), _saturation);\n            }\n            else\n            {\n                // With the usual color scheme, ControlDark/DarkDark is not exactly\n                // what we would otherwise calculate\n                if (percDarker == 0.0f)\n                {\n                    return SystemColors.ControlDark;\n                }\n                else if (percDarker == 1.0f)\n                {\n                    return SystemColors.ControlDarkDark;\n                }\n                else\n                {\n                    ARGB dark = SystemColors.ControlDark;\n                    ARGB darkDark = SystemColors.ControlDarkDark;\n\n                    return Color.FromArgb(\n                        (byte)(dark.R - (byte)((dark.R - darkDark.R) * percDarker)),\n                        (byte)(dark.G - (byte)((dark.G - darkDark.G) * percDarker)),\n                        (byte)(dark.B - (byte)((dark.B - darkDark.B) * percDarker)));\n                }\n            }\n        }\n    }\n}\n```\n\n\n### API Usage\n\n```csharp\nusing System.Drawing.Color;\n\nColor c = Color.FromArgb(128, 128, 128);\nColor sameColor = System.Windows.Forms.ControlPaint.Dark(c, 0.0);\nColor darkColor = System.Windows.Forms.ControlPaint.Dark(c, 0.5);\nColor darkerColor = System.Windows.Forms.ControlPaint.Dark(c, 1.0);\n\nColor approxSameColor = System.Windows.Forms.ControlPaint.Light(System.Windows.Forms.ControlPaint.Dark(c));\nColor approxSameColor2 = System.Windows.Forms.ControlPaint.Dark(System.Windows.Forms.ControlPaint.Light(c));\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n### Will this feature affect UI controls?\n\nYes.\n- no\n- none\n- no","Url":"https://github.com/dotnet/winforms/issues/12586","RelatedDescription":"Open issue \"Correct System.Windows.Forms.ControlPaint.HSLColor.Darker function\" (#12586)"},{"Id":"2718382309","IsPullRequest":true,"CreatedAt":"2024-12-04T18:53:28","Actor":"Tanya-Solyanik","Number":"12585","RawContent":null,"Title":"removed unnecessary casts that I had missed before","State":"closed","Body":"and added a baseline test for the future changes\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12585)","Url":"https://github.com/dotnet/winforms/pull/12585","RelatedDescription":"Closed or merged PR \"removed unnecessary casts that I had missed before\" (#12585)"},{"Id":"2710830427","IsPullRequest":true,"CreatedAt":"2024-12-04T17:57:55","Actor":"Olina-Zhang","Number":"12572","RawContent":null,"Title":"Add unit tests for LinkLabel","State":"closed","Body":"related https://github.com/dotnet/winforms/issues/10453\r\n\r\n## Proposed changes\r\n\r\n- Add unit tests for LinkLabel to test its FlatStyle, LinkArea, LinkBehavior, TabStop, Padding, VisitedLinkColor, UseCompatibleTextRendering properties and TabStopChanged, LinkClicked events\r\n\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12572)","Url":"https://github.com/dotnet/winforms/pull/12572","RelatedDescription":"Closed or merged PR \"Add unit tests for LinkLabel\" (#12572)"},{"Id":"2717674724","IsPullRequest":true,"CreatedAt":"2024-12-04T13:41:36","Actor":"dotnet-maestro[bot]","Number":"12583","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20241203.18\r\n- **Date Produced**: December 4, 2024 6:37:11 AM UTC\r\n- **Commit**: 7dbe407ee8f709e7d37e81e185605d328208bc72\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.CodeDom**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.ComponentModel.Composition**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Data.Odbc**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Data.OleDb**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Diagnostics.EventLog**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.DirectoryServices**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Formats.Nrbf**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.IO.Hashing**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.IO.Packaging**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.IO.Ports**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Management**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Reflection.Context**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Resources.Extensions**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Runtime.Caching**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Security.Permissions**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.ServiceModel.Syndication**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Speech**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Text.Encodings.Web**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Text.Json**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Threading.AccessControl**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **System.Windows.Extensions**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-alpha.1.24603.1 to 10.0.0-alpha.1.24603.18][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/12afdedd80...7dbe407ee8\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12583)","Url":"https://github.com/dotnet/winforms/pull/12583","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#12583)"},{"Id":"2717718628","IsPullRequest":false,"CreatedAt":"2024-12-04T13:19:50","Actor":"boennhoff","Number":"12584","RawContent":null,"Title":"System.Drawing.Common-8.0.8 upgrade to 9.0.0 crashes my application","State":"open","Body":"### .NET version\n\ntarget: net8.0-windows\ninstalled dotnet sdk: 9.0.100, 8.0.404 & 8.0.206 (for whatever reason I have multiple)\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nnot tested\n\n### Issue description\n\nRecently I had warnings about vulnerable package references, so I upgraded all possible Microsoft packages and tested my application thoroughly, when I stumbled over a very strange bug:\n\nRunning in a debug session, my application opens one of our forms and as soon as I load data the complete Debug session kills itself without any notice. No break on any exception, no log output, the process is just gone, and VS sits there as if no debug session was started.\n\n### Steps to reproduce\n\nAfter a `git bisect` I determined the root cause: when changing a `csproj` file from\n```xml\n<ItemGroup>\n  [..]\n  <PackageReference Include=\"System.Drawing.Common\" Version=\"8.0.8\" />\n  [..]\n</ItemGroup>\n```\nto \n```xml\n<ItemGroup>\n  [..]\n  <PackageReference Include=\"System.Drawing.Common\" Version=\"9.0.0\" />\n  [..]\n</ItemGroup>\n```\nthe bug appears. In the same commit I also upgraded many other packages from 8.0.* to 9.0.0, like `System.Configuration.ConfigurationManager` and `System.Management`, but only with `System.Drawing.Common-9.0.0` this bug happens.\n\nWe are using `System.Drawing.Common` mainly for `Image` manipulation (Resize, etc.) and `Bitmap` creation, the UI itself is 3rd-party (managed through COM interops) not `Windows.Forms`.\n\nI am a bit stuck in finding more information on this, or better describing this issue, I am posting here because the NuGet-package links here. Does anyone have an idea on how to find out more?\n\nMy workaround is of course, to not upgrade this package, but this can't be the solution in the long-run...","Url":"https://github.com/dotnet/winforms/issues/12584","RelatedDescription":"Open issue \"System.Drawing.Common-8.0.8 upgrade to 9.0.0 crashes my application\" (#12584)"},{"Id":"2717201067","IsPullRequest":false,"CreatedAt":"2024-12-04T10:08:32","Actor":"MelonWang1","Number":"12582","RawContent":null,"Title":"[DarkMode]The Form1 title bar change to white color when set the RightToLeft to Yes in PropertyGrid control","State":"open","Body":"### .NET version\n\n.NET 10.0.100-alpha.1.24573.1\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, also repro in .NET 9.0 which it started to be supported.\n\n### Issue description\n\nThe Form1 title bar change to white color when set the RightToLeft to Yes in PropertyGrid control.\n![Image](https://github.com/user-attachments/assets/2820d14b-e549-4c7e-be61-721c4cea9941)\n\n\n\n### Steps to reproduce\n\n**Repro steps:**\n\n1. Create a WinForms .NET application with PropertyGrid control\n2. Set PropertyGrid's selectedObject property to Form1\n3. Enable DarkMode by Application.SetColorMode(SystemColorMode.Dark) in Program.cs file\n4. Run the application\n5. In PropertyGrid control, set the RightToLeft property to Yes\n\n**More Info:**\n1. If repro the issue, then set RightToLeft property to No, the Form1 title bar also be white color.","Url":"https://github.com/dotnet/winforms/issues/12582","RelatedDescription":"Open issue \"[DarkMode]The Form1 title bar change to white color when set the RightToLeft to Yes in PropertyGrid control\" (#12582)"},{"Id":"2716428850","IsPullRequest":true,"CreatedAt":"2024-12-04T02:49:22","Actor":"Zheng-Li01","Number":"12580","RawContent":null,"Title":"Add code coverage for DataGridViewComboBoxCell.ObjectCollection","State":"open","Body":"related #10453\r\n\r\n## Proposed changes\r\nAdd unit tests for  DataGridViewComboBoxCell.ObjectCollection.cs to test its properties & methods\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12580)","Url":"https://github.com/dotnet/winforms/pull/12580","RelatedDescription":"Open PR \"Add code coverage for DataGridViewComboBoxCell.ObjectCollection\" (#12580)"},{"Id":"2716091143","IsPullRequest":true,"CreatedAt":"2024-12-03T23:06:48","Actor":"JeremyKuhne","Number":"12579","RawContent":null,"Title":"Define WIC HRESULTs","State":"closed","Body":"Needed for WPF scenarios currently and likely for our own usages as well eventually.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12579)","Url":"https://github.com/dotnet/winforms/pull/12579","RelatedDescription":"Closed or merged PR \"Define WIC HRESULTs\" (#12579)"},{"Id":"2715608604","IsPullRequest":true,"CreatedAt":"2024-12-03T19:23:51","Actor":"ViktorHofer","Number":"12577","RawContent":null,"Title":"Annotate test utility projects so that they don't get built inside the VMR","State":"closed","Body":"I noticed that these get built in the normal product build that shouldn't build tests.","Url":"https://github.com/dotnet/winforms/pull/12577","RelatedDescription":"Closed or merged PR \"Annotate test utility projects so that they don't get built inside the VMR\" (#12577)"},{"Id":"2714974182","IsPullRequest":true,"CreatedAt":"2024-12-03T13:41:14","Actor":"dotnet-maestro[bot]","Number":"12576","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20241203.1\r\n- **Date Produced**: December 3, 2024 10:30:47 AM UTC\r\n- **Commit**: 12afdedd8050847aa90473e254fa782f54360990\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.CodeDom**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.ComponentModel.Composition**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Data.Odbc**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Data.OleDb**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.DirectoryServices**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Formats.Nrbf**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.IO.Hashing**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.IO.Packaging**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.IO.Ports**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Management**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Reflection.Context**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Resources.Extensions**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Runtime.Caching**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Security.Permissions**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.ServiceModel.Syndication**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Speech**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Text.Encodings.Web**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Text.Json**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Threading.AccessControl**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **System.Windows.Extensions**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-alpha.1.24601.1 to 10.0.0-alpha.1.24603.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/5b9b8d3ae6...12afdedd80\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12576)","Url":"https://github.com/dotnet/winforms/pull/12576","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#12576)"},{"Id":"2714318552","IsPullRequest":true,"CreatedAt":"2024-12-03T08:25:17","Actor":"Liv-Goh","Number":"12575","RawContent":null,"Title":"Add unit test for MaskDesignerDialog","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/10773\r\n\r\n## Proposed changes\r\n1. Add unit test MaskDesignerDialogTests.cs for public properties and method of the MaskDesignerDialog.\r\n2. Enable nullability in MaskDesignerDialogTests..cs.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12575)","Url":"https://github.com/dotnet/winforms/pull/12575","RelatedDescription":"Open PR \"Add unit test for MaskDesignerDialog\" (#12575)"},{"Id":"2710275894","IsPullRequest":false,"CreatedAt":"2024-12-03T00:34:35","Actor":"Zheng-Li01","Number":"12569","RawContent":null,"Title":"When setting DockStyle.Fill for the axWindowsMediaPlayer control, the test program reports an error System.Runtime.InteropServices.COMException: “Catastrophic failure (0x8000FFFF (E_ UNEXPECTED))”","State":"closed","Body":"### .NET version\n\n.NET SDK 10.0.100-alpha.1.24573.1\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nThe issue cannot reproduce on .NET 6.0 & 7.0, can reproduce from 8.0 to latest  ,NET 10.0\n\n### Issue description\n\nWhen setting DockStyle.Fill for the axWindowsMediaPlayer control, the test program reports an error System.Runtime.InteropServices.COMException: “Catastrophic failure (0x8000FFFF (E_ UNEXPECTED))”\n\n**6.0 & 7.0 Results:**\n![Image](https://github.com/user-attachments/assets/3f60d613-53aa-418a-b6b3-49cb2c30fbec)\n\n**8.0 & 9.0 & 10.0 Results:**\n![Image](https://github.com/user-attachments/assets/7910e5bd-76e6-49a0-8ef2-af9717bf3ac9)\n\n**8.0 & 9.0 & 10.0 uncomment_ this.axWindowsMediaPlayer1.Dock = DockStyle.Fill_codeline_Form1.cs_Results:**\n![Image](https://github.com/user-attachments/assets/e121bf31-e8b2-4a2a-92dc-8587cdb8843c)\n\n**8.0 & 9.0 & 10.0 uncomment_ form.MdiParent = this;_Form2.cs_Results Results:**\n![Image](https://github.com/user-attachments/assets/6bd46241-8149-4252-b152-88af9232bf30)\n\n\n### Steps to reproduce\n\n1. Open the attached application [RepoApplication.zip](https://github.com/user-attachments/files/17971955/RepoApplication.zip)\n2. Run the application\n3. Observe the results:\n\n**Call Stack:**\n![Image](https://github.com/user-attachments/assets/d867080b-1b67-4d3b-8b96-280b15defdc3)\n[CallStack.txt](https://github.com/user-attachments/files/17971993/CallStack.txt)\n\n**More info:**\nThe original feedback link:  https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2308642","Url":"https://github.com/dotnet/winforms/issues/12569","RelatedDescription":"Closed issue \"When setting DockStyle.Fill for the axWindowsMediaPlayer control, the test program reports an error System.Runtime.InteropServices.COMException: “Catastrophic failure (0x8000FFFF (E_ UNEXPECTED))”\" (#12569)"},{"Id":"2702085588","IsPullRequest":true,"CreatedAt":"2024-12-02T23:40:36","Actor":"dotnet-maestro[bot]","Number":"12562","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20241201.1\r\n- **Date Produced**: December 2, 2024 2:25:25 AM UTC\r\n- **Commit**: 5b9b8d3ae6aaf2a0eb23ff9e2b32ddd64556d442\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.CodeDom**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.ComponentModel.Composition**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Data.Odbc**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Data.OleDb**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Diagnostics.EventLog**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.DirectoryServices**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Formats.Nrbf**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.IO.Hashing**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.IO.Packaging**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.IO.Ports**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Management**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Reflection.Context**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Resources.Extensions**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Runtime.Caching**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Security.Permissions**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.ServiceModel.Syndication**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Speech**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Text.Encodings.Web**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Text.Json**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Threading.AccessControl**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **System.Windows.Extensions**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-alpha.1.24577.1 to 10.0.0-alpha.1.24601.1][5]\r\n\r\n[5]: https://github.com/dotnet/runtime/compare/fe3d5b5f70...5b9b8d3ae6\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\r\n\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12562)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/12562","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#12562)"},{"Id":"2703426823","IsPullRequest":true,"CreatedAt":"2024-12-02T21:34:36","Actor":"Sachin-NI","Number":"12564","RawContent":null,"Title":"Resolved issue in sending WM_DESTROY msg to ActiveX controls","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12551\r\n\r\n\r\n## Proposed changes\r\n\r\n-  The `DetachWindow` method always sets `IsHandleCreated` to false. This causes the if condition to always be false, preventing the WM_DESTROY message from being sent to ActiveX controls. To fix this, we now store the value of `IsHandleCreated` in a boolean variable before calling the `DetachWindow` method. This was the previous behavior but got disrupted due to [this change](https://github.com/dotnet/winforms/commit/834d0a0d364c82bf70803706886ff9a40bd3e090#diff-dc17cf8f6ef4b80a13b2386597a72cd7ae36cab7375583a0a1e76a62f7f9238fL3556).\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12564)","Url":"https://github.com/dotnet/winforms/pull/12564","RelatedDescription":"Closed or merged PR \"Resolved issue in sending WM_DESTROY msg to ActiveX controls\" (#12564)"},{"Id":"2704345065","IsPullRequest":true,"CreatedAt":"2024-12-02T21:30:57","Actor":"MelonWang1","Number":"12566","RawContent":null,"Title":"Add unit tests for DesignerVerbToolStripMenuItem","State":"closed","Body":"Related https://github.com/dotnet/winforms/issues/10773\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add unit test DesignerVerbToolStripMenuItemTests.cs for public properties and method of the DesignerVerbToolStripMenuItem.\r\n- Enable nullability in DesignerVerbToolStripMenuItem.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12566)","Url":"https://github.com/dotnet/winforms/pull/12566","RelatedDescription":"Closed or merged PR \"Add unit tests for DesignerVerbToolStripMenuItem\" (#12566)"},{"Id":"2713428426","IsPullRequest":false,"CreatedAt":"2024-12-02T21:28:31","Actor":"lonitra","Number":"12574","RawContent":null,"Title":"Expect Delayed Responses for Holiday Season","State":"open","Body":"Hi all, with the holidays coming up please expect delayed responses on issues and PRs until early January. Thank you!","Url":"https://github.com/dotnet/winforms/issues/12574","RelatedDescription":"Open issue \"Expect Delayed Responses for Holiday Season\" (#12574)"},{"Id":"2700591188","IsPullRequest":true,"CreatedAt":"2024-12-02T21:25:48","Actor":"Olina-Zhang","Number":"12559","RawContent":null,"Title":"[release/8.0] Fix issue 12495: Infinite loop in ToolStripItemCollection.AddRange","State":"closed","Body":"BackPort of https://github.com/dotnet/winforms/pull/12513 to release/8.0\r\nBugs: https://github.com/dotnet/winforms/issues/12495, https://github.com/dotnet/winforms/issues/4454.\r\n/cc @Tanya-Solyanik @Olina-Zhang\r\n\r\n## Regression? \r\n\r\n- Yes, from .NET 6.0\r\n\r\n\r\n## Customer Impact\r\n\r\n- There is an infinite loop to call ToolStripItemCollection.AddRange(ToolStripItemCollection toolStripItems) with items when they have same owner.\r\n- Changes now: converts the ToolStripItemCollection into a temporary array (using ToArray()) to avoid modifying the original collection during iteration. This ensures that items can be safely added to the new collection without causing exceptions or unintended behavior, especially when items are removed from the original collection if they have a different owner control.\r\n\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n## Testing\r\n- Manual scenario testing and unit test\r\n- Regression tests\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12559)","Url":"https://github.com/dotnet/winforms/pull/12559","RelatedDescription":"Closed or merged PR \"[release/8.0] Fix issue 12495: Infinite loop in ToolStripItemCollection.AddRange\" (#12559)"},{"Id":"2712979835","IsPullRequest":false,"CreatedAt":"2024-12-02T18:48:33","Actor":"JeremyKuhne","Number":"12573","RawContent":null,"Title":"Move test related code under a common test folder","State":"open","Body":"WPF has all of their tests under a single test folder. This is advantageous for a number of reasons.\n\n- Test code can rely on normal build folder hierarchy mechanisms (`Directory.build.*`, `.editorconfig`, etc.)\n- Test projects are easier to find\n- Easier to pattern match\n\nTo better align our repos this is the pattern we should follow as well.","Url":"https://github.com/dotnet/winforms/issues/12573","RelatedDescription":"Open issue \"Move test related code under a common test folder\" (#12573)"},{"Id":"2705052596","IsPullRequest":true,"CreatedAt":"2024-12-02T18:14:49","Actor":"dotnet-maestro[bot]","Number":"12567","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20241128.2\r\n- **Date Produced**: November 28, 2024 6:27:21 PM UTC\r\n- **Commit**: e8de3415124309210e4cbd0105e4a9da8dc01696\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24577.1 to 10.0.0-beta.24578.2][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.24577.1 to 10.0.0-beta.24578.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.24577.1 to 10.0.0-beta.24578.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24577.1 to 10.0.0-beta.24578.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.24577.1 to 10.0.0-beta.24578.2][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24577.1 to 10.0.0-beta.24578.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/d0f89c635d...e8de341512\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12567)","Url":"https://github.com/dotnet/winforms/pull/12567","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#12567)"},{"Id":"2710681544","IsPullRequest":false,"CreatedAt":"2024-12-02T06:28:43","Actor":"Zheng-Li01","Number":"12571","RawContent":null,"Title":"There no \"Open\" button for the \"DisplayMember\" property and cannot not expand the dropdown list in the PropertyGrid control","State":"open","Body":"### .NET version\n\n.NET SDK 10.0.100-alpha.1.24573.1\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nCan reproduce from .NET Core 3.1 to latest 10.0\n\n### Issue description\n\nThere no \"Open\" button for the \"DiaplayMember\" property and cannot not expand the dropdown list in the PropertyGrid control\n\n**Actual Results:**\n![Image](https://github.com/user-attachments/assets/37f2a1b7-602e-4c0a-b8fe-6421ebe08f23)\n\n**Expected Results:**\n![Image](https://github.com/user-attachments/assets/5ed1a09e-7e0c-49b6-8660-c421b9ad128f)\n\n### Steps to reproduce\n\n1. Create a .NET WinForms project\n2. Add a PropertyGrid & ComboBox control on the Form1.cs[Design]\n3. Select the comboBox1 as Object for propertyGrid1\n4. Build & run the project\n5. Observe the \"Open\" button for **DiaplayMember** property value\n6. Press the **\"Alt + Down\"** keyboard to expand the dropdown list.\n","Url":"https://github.com/dotnet/winforms/issues/12571","RelatedDescription":"Open issue \"There no \"Open\" button for the \"DisplayMember\" property and cannot not expand the dropdown list in the PropertyGrid control\" (#12571)"},{"Id":"2710647272","IsPullRequest":false,"CreatedAt":"2024-12-02T06:08:39","Actor":"Zheng-Li01","Number":"12570","RawContent":null,"Title":"No \"(none)\" text display for the DataSource property in PropertyGrid control","State":"open","Body":"### .NET version\n\n.NET SDK 10.0.100-alpha.1.24573.1\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nThe DataSource property was enabled since .NET 9.0\n\n### Issue description\n\nNo \"(none)\" text display for the DataSource property in PropertyGrid control\n\n**.NET :**\n![Image](https://github.com/user-attachments/assets/3c23ce36-53c0-45b1-a67f-1ac0c11beee0)\n\n**.NET Farmework:**\n![Image](https://github.com/user-attachments/assets/c42ca4cb-c1cf-4b03-8d63-834fa7b19fd1)\n\n\n### Steps to reproduce\n\n1. Create a .NET WinForms project\n2. Add a PropertyGrid & ComboBox control on the Form1.cs[Design]\n3. Select the comboBox1 as Object for propertyGrid1\n4. Build & run the project\n5. Observe the DataSource property value","Url":"https://github.com/dotnet/winforms/issues/12570","RelatedDescription":"Open issue \"No \"(none)\" text display for the DataSource property in PropertyGrid control\" (#12570)"},{"Id":"2708760611","IsPullRequest":false,"CreatedAt":"2024-12-01T08:20:51","Actor":"stilldesign","Number":"12568","RawContent":null,"Title":"WFO1000 Security analyzer misreports if using own IComponent interface","State":"open","Body":"### .NET version\n\ndotnet 9.0\n\n### Did it work in .NET Framework?\n\nN/A\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nThe analyzer is new to dotnet 9\n\n### Issue description\n\ndotnet 9 looks to of introduced a new WinForms security analyzer to help with serialization leaks: `WFO1000`\nHowever this analyzer is triggering on classes which inherit from any interface named `IComponent`\n\nThis is an issue for me as I have an interface named `IComponent` as part of my implementation of the [Composite pattern](https://en.wikipedia.org/wiki/Composite_pattern)\n\n### Steps to reproduce\n\n```cs\nnamespace WinFormsApp1;\n\npublic class TestCase : WinFormsApp1.IComponent\n{\n  public string? Test { get; set; }\n}\n\npublic interface IComponent\n{\n}\n```\n\nWill result in the analyzer triggering:\n\n![Image](https://github.com/user-attachments/assets/17b53d99-f8db-4567-ae16-6abbc23b4af6)\n","Url":"https://github.com/dotnet/winforms/issues/12568","RelatedDescription":"Open issue \"WFO1000 Security analyzer misreports if using own IComponent interface\" (#12568)"},{"Id":"2703640200","IsPullRequest":false,"CreatedAt":"2024-11-29T02:14:03","Actor":"MelonWang1","Number":"12565","RawContent":null,"Title":"[Accessibility] NVDA tool does not show focus blue rectangle in property edit","State":"open","Body":"### .NET version\n\n.NET 10.0.100-alpha.1.24573.1\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, also can repro in .NET8.0/9.0, cannot repro in .NET 6.0/7.0.\n\n### Issue description\n\n## Current Behavior\n\nNVDA does not show focus blue rectangle.\n![Image](https://github.com/user-attachments/assets/90c83755-bc2b-4d32-9318-c94bb037fb2a)\n\nhttps://github.com/user-attachments/assets/a147db27-d749-4819-840f-d11e26e5aa45\n\n\n## Expected Behavior\n\nNVDA should show focus blue rectangle.\nIn .NET7.0/6.0:\n![Image](https://github.com/user-attachments/assets/89c97c0a-3093-4f5a-b4a9-976c337f3b72)\n\nhttps://github.com/user-attachments/assets/f56a1fbe-6a29-4320-b404-cc39df126aa1\n\nIn .NET Framework:\n\n![Image](https://github.com/user-attachments/assets/1dd6a110-90ef-4777-9475-96d88b31f23d)\n\n\n### Steps to reproduce\n\n1. Create a .NET Core Winforms project.\n2. Add a Button and PropertyGrid controls in form designer.\n3. Set the SelectedObject property to Button1 in propertyGrid1 control.\n4. Build and run project.\n5. Open NVDA tool and select FlatStyle property in propertyGrid control.\n6. Press Tab (should focus on edit part)","Url":"https://github.com/dotnet/winforms/issues/12565","RelatedDescription":"Open issue \"[Accessibility] NVDA tool does not show focus blue rectangle in property edit\" (#12565)"},{"Id":"2703312993","IsPullRequest":false,"CreatedAt":"2024-11-28T21:33:19","Actor":"elachlan","Number":"12563","RawContent":null,"Title":"New Control API for locking/unlocking drawing","State":"open","Body":"### Background and motivation\n\nIn WinForms development, there are scenarios where extensive updates to a control's state can cause flickering or performance degradation. For example, adding a large number of items to a list or making bulk changes to a grid may lead to unnecessary redraws. Developers often handle this by temporarily disabling the control's redrawing, applying changes, and re-enabling drawing afterward.\n\nCurrently, there is no built-in, intuitive mechanism in .NET WinForms to lock and unlock drawing for controls. This API proposal introduces methods to facilitate this, reducing flicker, improving performance, and providing a clean, structured way to manage drawing locks using a disposable pattern in C#.\n\n### API Proposal\n\n```csharp\npublic static void LockDrawing(this Control target);\npublic static void UnlockDrawing(this Control target);\npublic static DrawingLock UseDrawingLock(this Control target);\n\npublic ref struct DrawingLock : IDisposable\n{\n    public DrawingLock(Control target);\n    public void Dispose();\n}\n```\n\n\n### API Usage\n\n```csharp\nvar control = someControl;\ncontrol.LockDrawing();\n// Perform bulk updates\ncontrol.UnlockDrawing();\n\nvar control = someControl;\nusing (control.UseDrawingLock())\n{\n    // Perform bulk updates\n}\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n1. Error Handling - If UnlockDrawing is not called (e.g., due to an exception), the control may remain in a non-repainting state.\n2. Thread Safety - Accessing the Control.Handle from a thread other than the UI thread may cause runtime errors.\n3. Invalid Handles - Calling these methods on controls without a valid handle (e.g., before the control is created or after it is disposed) may fail.\n\n### Will this feature affect UI controls?\n\nn/a","Url":"https://github.com/dotnet/winforms/issues/12563","RelatedDescription":"Open issue \"New Control API for locking/unlocking drawing\" (#12563)"},{"Id":"2702084813","IsPullRequest":true,"CreatedAt":"2024-11-28T13:37:02","Actor":"dotnet-maestro[bot]","Number":"12561","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20241127.1\r\n- **Date Produced**: November 28, 2024 7:58:53 AM UTC\r\n- **Commit**: d0f89c635d780e183a97ad86af4f3c8d7e95977f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24576.1 to 10.0.0-beta.24577.1][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.24576.1 to 10.0.0-beta.24577.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.24576.1 to 10.0.0-beta.24577.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24576.1 to 10.0.0-beta.24577.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.24576.1 to 10.0.0-beta.24577.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24576.1 to 10.0.0-beta.24577.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/9ad0880a9f...d0f89c635d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12561)","Url":"https://github.com/dotnet/winforms/pull/12561","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#12561)"},{"Id":"2701537744","IsPullRequest":false,"CreatedAt":"2024-11-28T09:43:56","Actor":"ravipoddar10mca","Number":"12560","RawContent":null,"Title":"In .NET 8 WinForms, the DataSource property of the ComboBox appears disabled in the PropertyGrid control.","State":"open","Body":"\nIn .NET 8 WinForms, the DataSource property of the ComboBox appears disabled in the PropertyGrid control.\n\n![Image](https://github.com/user-attachments/assets/a633e648-7bb8-439d-b1f1-6a8147f62a24)\n","Url":"https://github.com/dotnet/winforms/issues/12560","RelatedDescription":"Open issue \"In .NET 8 WinForms, the DataSource property of the ComboBox appears disabled in the PropertyGrid control.\" (#12560)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-12-05T03:30:31.0111247Z","RunDurationInMilliseconds":445}