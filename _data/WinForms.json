{"Data":{"GitHub":{"Issues":[{"Id":"626457037","IsPullRequest":true,"CreatedAt":"2020-05-29T04:51:27","Actor":"dotnet-maestro[bot]","Number":"3360","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200527.12\r\n- **Date Produced**: 5/28/2020 7:36 AM\r\n- **Commit**: 35aa7989884dda8347899dcea162daf0c9318051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3360)","Url":"https://github.com/dotnet/winforms/pull/3360","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3360)"},{"Id":"626911160","IsPullRequest":true,"CreatedAt":"2020-05-29T00:12:41","Actor":"RussKie","Number":"3363","RawContent":null,"Title":"Test x86","State":"open","Body":"Relates to #3359\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3363)","Url":"https://github.com/dotnet/winforms/pull/3363","RelatedDescription":"Open PR \"Test x86\" (#3363)"},{"Id":"626293329","IsPullRequest":true,"CreatedAt":"2020-05-29T00:09:41","Actor":"RussKie","Number":"3357","RawContent":null,"Title":"Don't measure invalid ComboBox items","State":"closed","Body":"Fixes #3354\r\n\r\nFix the condition that incorrectly handled the overflow.\r\nRegression introduced in #1837\r\n\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual tests\r\n- MAUI tests\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3357)","Url":"https://github.com/dotnet/winforms/pull/3357","RelatedDescription":"Closed or merged PR \"Don't measure invalid ComboBox items\" (#3357)"},{"Id":"625608072","IsPullRequest":false,"CreatedAt":"2020-05-29T00:09:41","Actor":"gc-deniszmitrichenko","Number":"3354","RawContent":null,"Title":"Control derived from ComboBox causes application crash with System.ArgumentOutOfRangeException when override OnMeasureItem method","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET SDK 5.0.100-preview.4.20258.7\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nNo\r\nIt is also not reproducible with .Net Core 3.1.\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nIn derived from ComboBox class when sets ComboBox.DrawMode = DrawMode.OwnerDrawVariable and override OnMeasureItem method there is a call of OnMeasureItem method with MeasureItemEventArgs which Index property equals to -1.\r\nTrying to access the ComboBox item by this index leads to System.ArgumentOutOfRangeException.\r\n\r\n``` c#\r\n    public class DerivedComboBox : ComboBox\r\n    {\r\n        public DerivedComboBox()\r\n        {\r\n            DrawMode = DrawMode.OwnerDrawVariable;\r\n        }\r\n\r\n        protected override void OnMeasureItem(MeasureItemEventArgs e)\r\n        {\r\n            var itemText = Items[e.Index].ToString(); // System.ArgumentOutOfRangeException\r\n            var measuredSize = TextRenderer.MeasureText(e.Graphics, itemText, Font);\r\n            e.ItemWidth = measuredSize.Width;\r\n            e.ItemHeight = measuredSize.Height;\r\n\r\n            base.OnMeasureItem(e);\r\n        }\r\n    }\r\n```\r\n\r\n![ComboBoxOnMeasureItemExceptionNet5](https://user-images.githubusercontent.com/61823719/83012574-4085d180-a024-11ea-8119-28af9177ae81.png)\r\n\r\n\r\n**Expected behavior:**\r\nNot to call OnMeasureItem with MeasureItemEventArgs.Index == -1.\r\n\r\n**Minimal repro:**\r\n\r\n1. Run attached app:\r\n[DerivedComboBoxTestApp.zip](https://github.com/dotnet/winforms/files/4688368/DerivedComboBoxTestApp.zip)\r\n2. Observe thrown System.ArgumentOutOfRangeException.","Url":"https://github.com/dotnet/winforms/issues/3354","RelatedDescription":"Closed issue \"Control derived from ComboBox causes application crash with System.ArgumentOutOfRangeException when override OnMeasureItem method\" (#3354)"},{"Id":"626778710","IsPullRequest":true,"CreatedAt":"2020-05-28T20:29:27","Actor":"dotnet-maestro[bot]","Number":"3362","RawContent":null,"Title":"[release/5.0-preview5] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:67c9bc50-cce6-417c-985c-08d7f21e18b5)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 67c9bc50-cce6-417c-985c-08d7f21e18b5\r\n- **Build**: 20200528.1\r\n- **Date Produced**: 5/28/2020 7:27 PM\r\n- **Commit**: 4ae4e2fe08164168a77f0a3b06091db5959fb506\r\n- **Branch**: refs/heads/release/5.0-preview5\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.CodeDom**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.Security.Permissions**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.Drawing.Common**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n\r\n[marker]: <> (End:67c9bc50-cce6-417c-985c-08d7f21e18b5)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3362)","Url":"https://github.com/dotnet/winforms/pull/3362","RelatedDescription":"Closed or merged PR \"[release/5.0-preview5] Update dependencies from dotnet/runtime\" (#3362)"},{"Id":"626503803","IsPullRequest":false,"CreatedAt":"2020-05-28T13:21:08","Actor":"weltkante","Number":"3361","RawContent":null,"Title":"Missing Control.Dispose calls in unit tests","State":"open","Body":"**.NET Core Version:**\r\ngithub master\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nn/a\r\n\r\n**Problem description:**\r\nDisposing controls in unit tests is required because the usage of multiple UI threads. If the control has not been GC'ed by the time the UI thread terminates this can lead to hangs.\r\n\r\nRelated to #3348 but this is short-term bugfixing while the other issue is long-term reliability to detect regressions in unit test quality.\r\n\r\nFollowing call sites do not dispose their controls:\r\n* [ ] AxHostTests.AxHost_EndInit_InvokeWithParent_CreatesControl\r\n* [x] ComboBoxTests.CtrlBackspaceDeletesSelection\r\n* [x] ComboBoxTests.CtrlBackspaceRepeatedTextChanged\r\n* [x] ComboBoxTests.CtrlBackspaceTextChanged\r\n* [x] ComboBoxTests.CtrlBackspaceTextRemainsEmpty\r\n* [ ] ControlControlAccessibleObject.Handle_Set_TestData\r\n* [ ] ControlControlCollectionTests.ControlCollection_Add _DifferentThreadValueControl_ThrowsArgumentException\r\n* [ ] ControlControlCollectionTests.ControlCollection_Add _DifferentThreadValueOwner_ThrowsArgumentException\r\n* [ ] ControlTests.AccessibilityObject_CustomCreateAccessibilityInstance_TestData\r\n* [ ] ControlTests.Control_Dispose_InvokeNotDisposingWithHandle_Success\r\n* [x] ListViewTests.ListView_BackColor_SetWithHandle_GetReturnsExpected\r\n* [x] ListViewTests.ListView_DoubleBuffered_SetWithHandle_GetReturnsExpected\r\n* [x] ListViewTests.ListView_FocusedItem_SetChildWithHandle_GetReturnsExpected\r\n* [x] ListViewTests.ListView_FocusedItem_SetWithHandle_GetReturnsExpected\r\n* [x] ListViewTests.ListView_ForeColor_SetWithHandle_GetReturnsExpected\r\n* [x] PictureBoxTests.PictureBox_Enabled_SetWithHandle_GetReturnsExpected\r\n* [x] PropertyGridInternal.Tests.GridViewListBoxAccessibleObjectTests\r\n.GridViewListBoxAccessibleObject_DoesNotThrowException_OnFocus\r\n* [ ] ScreenTests.FromHandle_TestData\r\n* [ ] ToolStripRenderEventArgsTests.ConnectedArea_Empty_TestData\r\n* [x] ToolTipTests.ToolTip_Show_InvokeStringIWin32WindowControlWindow_Nop\r\n* [x] ToolTipTests.ToolTip_Show_InvokeStringIWin32WindowIntControlWindow_Nop\r\n* [ ] WebBrowserTests.WebBrowserDispose_InvokeNotDisposing_Success\r\n\r\nChecked entries look like they are straightforward to fix, unchecked ones require refactoring of the tests or deeper investigation.\r\n\r\n**Expected behavior:**\r\nAll unit tests dispose their controls.\r\n\r\n**Minimal repro:**\r\nSet a conditional breakpoint in `NativeWindow.ForceExitMessageLoop` which checks for `handle != IntPtr.Zero && ownedHandle`","Url":"https://github.com/dotnet/winforms/issues/3361","RelatedDescription":"Open issue \"Missing Control.Dispose calls in unit tests\" (#3361)"},{"Id":"626434896","IsPullRequest":false,"CreatedAt":"2020-05-28T11:29:24","Actor":"weltkante","Number":"3359","RawContent":null,"Title":"Test failure ListView_Handle_GetTextBackColor_Success in 32 bit","State":"open","Body":"**.NET Core Version:**\r\ngithub master\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nn/a\r\n\r\n**Problem description:**\r\n`ListView_Handle_GetTextBackColor_Success` fails in VS when running the 32 bit test runner, don't know why it doesn't fail in CI, I thought it used both 32 bit and 64 bit test runner?\r\n\r\n```\r\nSystem.OverflowException: 'Arithmetic operation resulted in an overflow.'\r\nThis exception was originally thrown at this call stack:\r\n    System.IntPtr.explicit operator System.IntPtr(long)\r\n    System.Windows.Forms.Tests.ListViewTests.ListView_Handle_GetTextBackColor_Success() in ListViewTests.cs\r\n```\r\nI think `(IntPtr)0xFFFFFFFF` is invalid in 32 bit\r\n\r\n**Expected behavior:**\r\n* CI should recognize the test failure without the fix\r\n* Test gets fixed\r\n\r\n**Minimal repro:**\r\nExecute the test in VS with 32 bit test runner checked","Url":"https://github.com/dotnet/winforms/issues/3359","RelatedDescription":"Open issue \"Test failure ListView_Handle_GetTextBackColor_Success in 32 bit\" (#3359)"},{"Id":"626301312","IsPullRequest":false,"CreatedAt":"2020-05-28T07:59:01","Actor":"RussKie","Number":"3358","RawContent":null,"Title":"Flaky tests: `ImageList` randomly crashes tests and result in AccessViolationException","State":"open","Body":"For the past few days I'm observing tests randomly fail in Release builds, with some builds providing **no logs** of failures.\r\nFew other logs I found are below:\r\n\r\n```\r\n    System.Windows.Forms.Tests.ImageCollectionTests.ImageCollection_IListItem_Set_GetReturnsExpected(transparentColor: Color [Empty], value: Bitmap { Flags = 2, FrameDimensionsList = [7462dc86-6180-4c7e-8e3f-ee7333a7a483], Height = 256, HorizontalResolution = 96, Palette = ColorPalette { Entries = [...], Flags = 7929940 }, ... }) [FAIL]\r\n      System.InvalidOperationException : Image cannot be added to the ImageList.\r\n      Stack Trace:\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ImageList.cs(414,0): at System.Windows.Forms.ImageList.AddToHandle(Bitmap bitmap)\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ImageList.cs(485,0): at System.Windows.Forms.ImageList.CreateHandle()\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ImageList.cs(142,0): at System.Windows.Forms.ImageList.get_Handle()\r\n        /_/src/System.Windows.Forms.Primitives/src/Interop/ComCtl32/Interop.ImageList.Replace.cs(20,0): at Interop.ComCtl32.ImageList.Replace(IHandle himl, Int32 i, IntPtr hbmImage, IntPtr hbmMask)\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ImageList.ImageCollection.cs(166,0): at System.Windows.Forms.ImageList.ImageCollection.set_Item(Int32 index, Image value)\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ImageList.ImageCollection.cs(199,0): at System.Windows.Forms.ImageList.ImageCollection.System.Collections.IList.set_Item(Int32 index, Object value)\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/ImageList.ImageCollectionTests.cs(1626,0): at System.Windows.Forms.Tests.ImageCollectionTests.ImageCollection_IListItem_Set_GetReturnsExpected(Color transparentColor, Image value)\r\n```\r\n\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\nRepeat 2 times:\r\n--------------------------------\r\n   at Interop+User32.CallWindowProcW(IntPtr, IntPtr, WM, IntPtr, IntPtr)\r\n--------------------------------\r\n   at System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.ListView.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.OnMessage(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr, WM, IntPtr, IntPtr)\r\n   at Interop+User32.SendMessageW(IntPtr, WM, IntPtr, IntPtr)\r\n   at Interop+User32.SendMessageW(IntPtr, WM, IntPtr, IntPtr)\r\n   at Interop+User32.SendMessageW(IHandle, WM, IntPtr, IntPtr)\r\n   at System.Windows.Forms.ListView.UpdateExtendedStyles()\r\n   at System.Windows.Forms.ListView.OnHandleCreated(System.EventArgs)\r\n   at System.Windows.Forms.Control.WmCreate(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.ListView.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.OnMessage(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr, WM, IntPtr, IntPtr)\r\n   at Interop+User32.CreateWindowExW(WS_EX, Char*, System.String, WS, Int32, Int32, Int32, Int32, IntPtr, IntPtr, IntPtr, System.Object)\r\n   at Interop+User32.CreateWindowExW(WS_EX, Char*, System.String, WS, Int32, Int32, Int32, Int32, IntPtr, IntPtr, IntPtr, System.Object)\r\n   at Interop+User32.CreateWindowExW(WS_EX, System.String, System.String, WS, Int32, Int32, Int32, Int32, IntPtr, IntPtr, IntPtr, System.Object)\r\n   at System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)\r\n   at System.Windows.Forms.Control.CreateHandle()\r\n   at System.Windows.Forms.ListView.CreateHandle()\r\n   at System.Windows.Forms.Control.get_Handle()\r\n   at System.Windows.Forms.Tests.ListViewTests.ListView_StateImageList_SetWithHandle_GetReturnsExpected(Boolean, Boolean, Boolean, Boolean, System.Windows.Forms.View, System.Windows.Forms.ImageList, Int32, Int32)\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at System.Reflection.MethodBase.Invoke(System.Object, System.Object[])\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CallTestMethod(System.Object)\r\n   at Xunit.Sdk.UITestInvoker+<>c__DisplayClass2_0+<<RunAsync>b__2>d.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.UITestInvoker+<>c__DisplayClass2_0+<<RunAsync>b__2>d, Xunit.StaFact, Version=1.0.0.0, Culture=neutral, PublicKeyToken=593f35978b459a4b]].ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.UITestInvoker+<>c__DisplayClass2_0+<<RunAsync>b__2>d, Xunit.StaFact, Version=1.0.0.0, Culture=neutral, PublicKeyToken=593f35978b459a4b]].MoveNext(System.Threading.Thread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.UITestInvoker+<>c__DisplayClass2_0+<<RunAsync>b__2>d, Xunit.StaFact, Version=1.0.0.0, Culture=neutral, PublicKeyToken=593f35978b459a4b]].MoveNext()\r\n   at Xunit.Sdk.Utilities+SyncContextAwaiter+<>c.<OnCompleted>b__5_0(System.Object)\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at System.Delegate.DynamicInvokeImpl(System.Object[])\r\n   at System.Delegate.DynamicInvoke(System.Object[])\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackDo(ThreadMethodEntry)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackHelper(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallback(ThreadMethodEntry)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbacks()\r\n   at System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.OnMessage(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr, WM, IntPtr, IntPtr)\r\n   at Interop+User32.DispatchMessageW(MSG ByRef)\r\n   at Interop+User32.DispatchMessageW(MSG ByRef)\r\n   at System.Windows.Forms.Application+ComponentManager.Interop.Mso.IMsoComponentManager.FPushMessageLoop(UIntPtr, msoloop, Void*)\r\n   at System.Windows.Forms.Application+ThreadContext.RunMessageLoopInner(msoloop, System.Windows.Forms.ApplicationContext)\r\n   at System.Windows.Forms.Application+ThreadContext.RunMessageLoop(msoloop, System.Windows.Forms.ApplicationContext)\r\n   at Xunit.Sdk.WinFormsSynchronizationContextAdapter.PumpTill(System.Threading.SynchronizationContext, System.Threading.Tasks.Task)\r\n   at Xunit.Sdk.ThreadRental+<>c__DisplayClass11_0.<CreateAsync>b__0()\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```","Url":"https://github.com/dotnet/winforms/issues/3358","RelatedDescription":"Open issue \"Flaky tests: `ImageList` randomly crashes tests and result in AccessViolationException\" (#3358)"},{"Id":"623922935","IsPullRequest":true,"CreatedAt":"2020-05-28T06:46:06","Actor":"wjk","Number":"3341","RawContent":null,"Title":"Add FontProperty.TextFont","State":"closed","Body":"Fixes #3340\r\n\r\n## Proposed changes\r\n\r\n- Add `FontProperty.TextFont`, which maps to `TMT_FONT` on the native side.\r\n\r\n## Customer Impact\r\n\r\n- I can now get the font used by \"instruction text\" in Windows using class name `TEXTSTYLE`, part 1, state 0, and `FontProperty.TextFont`.\r\n\r\n## Regression? \r\n\r\n- No, this was never before possible.\r\n\r\n## Risk\r\n\r\n- This is a new feature, it should not break anything.\r\n\r\n## Test methodology\r\n\r\n- No unit tests yet. Guidance here would be appreciated.\r\n\r\n## Test environment(s)\r\n\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.100-preview.5.20264.10\r\n Commit:    b0f362349a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19631\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-preview.5.20264.10\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-preview.6.20264.1\r\n  Commit:  bdd7235c43\r\n\r\n.NET SDKs installed:\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.300-preview-015135 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-preview.5.20264.10 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.5.20255.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.6.20264.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0-preview.6.20263.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nTry using the above element using different themes, both the normal theme and with High Contrast enabled. (The fonts returned aren't guaranteed to be different, but this is how you would manually test this.) This feature builds on top of existing High-DPI support in Windows Forms.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3341)","Url":"https://github.com/dotnet/winforms/pull/3341","RelatedDescription":"Closed or merged PR \"Add FontProperty.TextFont\" (#3341)"},{"Id":"623922200","IsPullRequest":false,"CreatedAt":"2020-05-28T06:46:06","Actor":"wjk","Number":"3340","RawContent":null,"Title":"Add support for TMT_FONT","State":"closed","Body":"To make my app look more like native Windows components, while still supporting High Contrast themes, I use VisualStyleRenderer to draw \"instruction text\" (like the TaskDialog uses). In the default theme, this is 12-point Segoe UI, foreground color `#003399`. To do this, I use the class `TEXTSTYLE`, part 1, and state 0 (these values come from `vsstyle.h` in the Windows SDK).\r\n\r\nHowever, when I attempt this, `VisualStyleRenderer.GetFont(FontProperty.GlyphFont)` returns null. Investigation using a tool that dumps aero.msstyles reveals that the above class/part/state combination defines `TMT_FONT`, but not `TMT_GLYPHFONT`, which is the only valid FontProperty in Windows Forms. Therefore, I must manually P/Invoke into uxtheme.dll every time I want to accomplish this task. I wish to avoid having to do this.\r\n\r\nProposed API is as follows:\r\n\r\n```diff\r\n enum FontProperty {\r\n+    TextFont = (int)Interop.TMT.FONT,\r\n     GlyphFont = (int)Interop.TMT.GLYPHFONT\r\n }\r\n```\r\n\r\nI would also need to update the VisualStyleRenderer class to accept this FontProperty value. This feature does not need VS designer support, should not impact accessibility, and does not need to be localized. Thanks!","Url":"https://github.com/dotnet/winforms/issues/3340","RelatedDescription":"Closed issue \"Add support for TMT_FONT\" (#3340)"},{"Id":"626223665","IsPullRequest":false,"CreatedAt":"2020-05-28T05:21:00","Actor":"DualBrain","Number":"3356","RawContent":null,"Title":"Button component not available in Toolbox","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1 release in VS 16.6\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nThe Button component is missing from the VS Toolbox... Label (and many others are there), but no Button.\r\n\r\n**Expected behavior:**\r\n\r\nThe Button component would be available (visible) in the Toolbox.\r\n\r\n**Minimal repro:**\r\n\r\nOther than it is happening \"on my machine\", I'm not sure how to repro - I'm also not aware of any way to *reset* the Toolbox.\r\n\r\n(NOTE: I am working with WinForms in Visual Basic... so not sure if this might be related.)","Url":"https://github.com/dotnet/winforms/issues/3356","RelatedDescription":"Open issue \"Button component not available in Toolbox\" (#3356)"},{"Id":"626163334","IsPullRequest":true,"CreatedAt":"2020-05-28T04:03:04","Actor":"RussKie","Number":"3355","RawContent":null,"Title":"Relax CA1825 for tests","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3355)","Url":"https://github.com/dotnet/winforms/pull/3355","RelatedDescription":"Closed or merged PR \"Relax CA1825 for tests\" (#3355)"},{"Id":"625567102","IsPullRequest":false,"CreatedAt":"2020-05-27T10:17:22","Actor":"Amy-Li03","Number":"3353","RawContent":null,"Title":"The ImageIndex value is not automatically set to -1 after set the ImageKey property to an empty string.","State":"open","Body":"* .NET Core Version: \r\n.NET 5.0.100-preview.6.20276.4 from master branch\r\n\r\n* More info: \r\nThis is a regression issue, this issue cannot reproduce in .NET 5.0.100-preview.5.20272.9 build.\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\nThe ImageKey and ImageIndex properties are mutually exclusive, meaning if one is set, the other is ignored. But now if set the ImageKey property to an empty string, the ImageIndex property is **not** automatically set to -1.\r\n\r\n**Current behavior:**\r\nThe ImageIndex value is not automatically set to -1 after set the ImageKey property to an empty string.\r\n\r\n**Expected behavior:**\r\nThe ImageIndex value should be automatically set to -1 after set the ImageKey property to an empty string.\r\n\r\n**Minimal repro:**\r\n1. Run the attached project. \r\n[TestApp.zip](https://github.com/dotnet/winforms/files/4688068/TestApp.zip)\r\n2. Click the button1, then observe the value displayed in the message Box.","Url":"https://github.com/dotnet/winforms/issues/3353","RelatedDescription":"Open issue \"The ImageIndex value is not automatically set to -1 after set the ImageKey property to an empty string.\" (#3353)"},{"Id":"623828168","IsPullRequest":true,"CreatedAt":"2020-05-27T01:01:04","Actor":"filipnavara","Number":"3337","RawContent":null,"Title":"Avoid unnecessarily creating ToolStripDropDownMenu due to keyboard tooltip hook","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3248\r\n\r\n## Proposed changes\r\n\r\n- Avoid accessing the `DropDown` property of menu items when there is no drop-down present. The property would always create one which is unintended.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Less memory used\r\n\r\n## Regression? \r\n\r\n- Not sure. I couldn't track down when the code for keyboard hooks was first added, the rest of the code tries to avoid unintentionally creating the drop-down objects.\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Tested on production application running under SciTech Memory Profiler\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET 5 (master, winforms@d851dac649d74c3a1d2b416713dd22de14b93fe1)\r\n- .NET Core 3.1.200 with backported fix\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3337)","Url":"https://github.com/dotnet/winforms/pull/3337","RelatedDescription":"Closed or merged PR \"Avoid unnecessarily creating ToolStripDropDownMenu due to keyboard tooltip hook\" (#3337)"},{"Id":"625118742","IsPullRequest":true,"CreatedAt":"2020-05-27T00:21:53","Actor":"gpetrou","Number":"3351","RawContent":null,"Title":"Add EN enum in Interop RichEdit","State":"closed","Body":"## Proposed changes\r\n\r\n- Add EN enum in Interop RichEdit.\r\n- Remove EN constants and replace their usages with the above enum values.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3351)","Url":"https://github.com/dotnet/winforms/pull/3351","RelatedDescription":"Closed or merged PR \"Add EN enum in Interop RichEdit\" (#3351)"},{"Id":"625280344","IsPullRequest":true,"CreatedAt":"2020-05-27T00:17:04","Actor":"KlausLoeffelmann","Number":"3352","RawContent":null,"Title":"Implement minimal Visual Basic Application Framework WinForms app.","State":"open","Body":"This PR adds a minimal Visual Basic WinForms app project, which uses the Visual Basic Application Framework, to the test folder.\r\n\r\n**Note:** This app is to have a central lookup spot how to activate the application framework for Visual Basic WinForms net 5.0 apps as long as there isn't a UI to setup the Application Framework parameters.\r\n\r\n**Issues:**\r\n* HighDpiMode is setup in the StartUp Application Event.\r\n* SingleInstance cannot be set, since this is currently not supported.\r\n* Changes of the Application Framework Settings can only be made directly by patching the _My project\\Application.Designer.vb_ file. Changes to _Application.myapp_ don't have any effect.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3352)","Url":"https://github.com/dotnet/winforms/pull/3352","RelatedDescription":"Open PR \"Implement minimal Visual Basic Application Framework WinForms app.\" (#3352)"},{"Id":"625037646","IsPullRequest":true,"CreatedAt":"2020-05-26T17:21:56","Actor":"ViktorHofer","Number":"3350","RawContent":null,"Title":"Update templates to net5.0 (#3344)","State":"closed","Body":"Cherry-pick of https://github.com/dotnet/winforms/commit/f881902a3860bc6d0c348aacdbea51ea63bbd9b8\r\n\r\ncc @RussKie @mmitche \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3350)","Url":"https://github.com/dotnet/winforms/pull/3350","RelatedDescription":"Closed or merged PR \"Update templates to net5.0 (#3344)\" (#3350)"},{"Id":"624688965","IsPullRequest":true,"CreatedAt":"2020-05-26T08:15:54","Actor":"hughbe","Number":"3349","RawContent":null,"Title":"Add tests for HtmlElement/HtmlDocument","State":"open","Body":"Extracted from https://github.com/dotnet/winforms/pull/3326\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3349)","Url":"https://github.com/dotnet/winforms/pull/3349","RelatedDescription":"Open PR \"Add tests for HtmlElement/HtmlDocument\" (#3349)"},{"Id":"624587371","IsPullRequest":false,"CreatedAt":"2020-05-26T04:07:21","Actor":"RussKie","Number":"3348","RawContent":null,"Title":"Track finalization","State":"open","Body":"\r\n\r\n**Problem description:**\r\n\r\nhttps://github.com/dotnet/winforms/pull/3169 cleaned out a number of `FINALIZATION_WATCH`. \r\nConsider how we want to track finalization so that we can shake out issues in disposal as we're clearly having problems in our test runs.\r\n","Url":"https://github.com/dotnet/winforms/issues/3348","RelatedDescription":"Open issue \"Track finalization\" (#3348)"},{"Id":"624550469","IsPullRequest":false,"CreatedAt":"2020-05-26T01:52:52","Actor":"199621616","Number":"3347","RawContent":null,"Title":"Net5.0Preview4 Title blur when window is maximized","State":"closed","Body":".NET Core Version: \r\n\r\n.NET SDKs installed:\r\n  3.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-preview.4.20258.7 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.4.20257.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.4.20251.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0-preview.4.20251.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n\r\nProblem description:\r\n Title blur when window is maximized\r\nNot is maximized,Display normal\r\nUsing components\r\nDevComponents.DotNetBar2\r\n\r\n![0](https://user-images.githubusercontent.com/25498672/82852754-5ae18180-9f36-11ea-9cf6-ac48f7fbe1cd.jpg)\r\n![1](https://user-images.githubusercontent.com/25498672/82852771-68970700-9f36-11ea-89c3-e7d811faafbf.PNG)\r\n\r\n\r\nExpected behavior:\r\nmaximized,Display normal\r\n\r\nMinimal repro\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3347","RelatedDescription":"Closed issue \"Net5.0Preview4 Title blur when window is maximized\" (#3347)"},{"Id":"624544213","IsPullRequest":false,"CreatedAt":"2020-05-26T01:25:14","Actor":"docfresh","Number":"3346","RawContent":null,"Title":"Creating/Saving a Settings file throws error","State":"open","Body":"* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nI used try-convert to convert a near-empty .NET 4.72 Framework project to .NET Core.\r\n\r\nWhen trying to add a settings file, I get the error \"An error occurred while reading the app. config file. The file might be corrupted or contain invalid XML\" when creating a new Settings file and saving it.  I also get the error \"The Method or operation is not implemented\" when clicking the \"View Code\" button. The settings do seem to work though.\r\n\r\nEven if I delete and recreate the settings file, I still get the error.\r\n\r\n![image](https://user-images.githubusercontent.com/8064022/82851160-89bf0f80-9ec4-11ea-9c1e-85d9e2b379dc.png)\r\n\r\n\r\n**Expected behavior:**\r\nDon't get an error.\r\n\r\n**Minimal repro:**\r\n1. Create new WinForms .NET Core project.\r\n2. Solution Explorer -> Right Click -> Add\r\n3. Search for \"Settings File\" \r\n4. Create Settings File and add one boolean setting with a default value of False\r\n5. Get the error message\r\n","Url":"https://github.com/dotnet/winforms/issues/3346","RelatedDescription":"Open issue \"Creating/Saving a Settings file throws error\" (#3346)"},{"Id":"624532149","IsPullRequest":false,"CreatedAt":"2020-05-26T00:29:14","Actor":"docfresh","Number":"3345","RawContent":null,"Title":"Remember Property Grid display style choice in Menu Items Collection Editor","State":"open","Body":"A MenuStrip's Items Collection Editor shows the MenuItems, and the properties for them in a property grid.\r\n\r\nThe property grid can be displayed 1 of 2 ways: Categorized, or Alphabetized. \r\n\r\nUnfortunately, it does not remember my preference.  I always prefer to see the grid alphabetized, but every time I go back into the Items Collection Editor, the property grid is displayed \"Categorized\"\r\n\r\n![image](https://user-images.githubusercontent.com/8064022/82849403-6c3a7780-9ebd-11ea-97f6-f62a47dccb2a.png)\r\n\r\nTested in 16.7 Preview 1\r\n\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n\r\nRemember whether the User last selected Categorized or Alphabetized.\r\n\r\nOr remember the setting based on the type of Items being edited in the Collection Editor. For example, maybe I want to see properties of ListView Columns in a categorized view, but I want to see ListView Items in an Alphabetized view.\r\n\r\n\r\n\r\n**Will this feature affect UI controls?**\r\nNo\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3345","RelatedDescription":"Open issue \"Remember Property Grid display style choice in Menu Items Collection Editor\" (#3345)"},{"Id":"624188281","IsPullRequest":false,"CreatedAt":"2020-05-25T23:19:07","Actor":"John-Qiao","Number":"3343","RawContent":null,"Title":"The version of System.Windows.Forms.dll is incorrect","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET Core 3.1.300\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**More info:** \r\n\r\n1. This issue occurs in other Winforms .NET Core 3.1 dlls too.  \r\n2. This issue occurs in the latest .NET Core 3.1 dlls too.\r\n3. This issue does not occur in .NET Core 5.0\r\n![Core5 0](https://user-images.githubusercontent.com/45864985/82801858-8e79c880-9eb0-11ea-9a09-9e747da7d1ce.png)\r\n\r\n**Problem description:**\r\nThe version of .NET Core 3.1 System.Windows.Forms.dll is incorrect.\r\n![Core3 1](https://user-images.githubusercontent.com/45864985/82801878-96396d00-9eb0-11ea-8b92-a3a15487018f.png)\r\n\r\n**Expected behavior:**\r\nThe version of System.Windows.Forms.dll should be consistent with .NET Core version. \r\n\r\n**Minimal repro:**\r\n\r\n1. Download and install VS 2019 from here: https://visualstudio.microsoft.com/downloads/\r\n2. Open the C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App\\3.1.4 folder and check the version of System.Windows.Forms.dll in it.\r\n","Url":"https://github.com/dotnet/winforms/issues/3343","RelatedDescription":"Closed issue \"The version of System.Windows.Forms.dll is incorrect\" (#3343)"},{"Id":"623910366","IsPullRequest":false,"CreatedAt":"2020-05-25T23:05:51","Actor":"ekolis","Number":"3339","RawContent":null,"Title":"User control designer does not work for .NET Core","State":"closed","Body":"* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\n1. Create a WinForms project.\r\n2. Add a user control to the project.\r\n3. Open the designer for the user control.\r\n\r\nI get this error:\r\n\r\n> Expected a proxy type,  Microsoft.VisualStudio.WinForms.RemoteClient.Proxies.ComponentProxy.\r\n\r\n**Expected behavior:**\r\n The control designer opens.\r\n\r\n**Minimal repro:**\r\nsee attached\r\n[BrokenUserControlDesigner.zip](https://github.com/dotnet/winforms/files/4674080/BrokenUserControlDesigner.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3339","RelatedDescription":"Closed issue \"User control designer does not work for .NET Core\" (#3339)"},{"Id":"624324350","IsPullRequest":true,"CreatedAt":"2020-05-25T15:19:31","Actor":"ViktorHofer","Number":"3344","RawContent":null,"Title":"Update templates to net5.0","State":"closed","Body":"SDK related issue dotnet/sdk#11706\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3344)","Url":"https://github.com/dotnet/winforms/pull/3344","RelatedDescription":"Closed or merged PR \"Update templates to net5.0\" (#3344)"},{"Id":"624052867","IsPullRequest":false,"CreatedAt":"2020-05-25T05:23:28","Actor":"docfresh","Number":"3342","RawContent":null,"Title":"Cannot rename ToolStripMenuItem in Items Collection Editor","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nI cannot rename toolStripMenuItems in the Items Collection Editor.\r\n\r\n**Expected behavior:**\r\nThe item should be renamed.\r\n\r\n**Minimal repro:**\r\n\r\n1. Create a MenuStrip in a .NET Core Winforms app\r\n2. Add a few items in the Items Collection Editor\r\n3. Try to rename an item in the property grid under (Name)\r\n4. Item does not rename, reverts to the default name\r\n\r\n![image](https://user-images.githubusercontent.com/8064022/82780814-f03d2280-9e1d-11ea-950f-99b16162ebac.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/3342","RelatedDescription":"Open issue \"Cannot rename ToolStripMenuItem in Items Collection Editor\" (#3342)"},{"Id":"623909297","IsPullRequest":false,"CreatedAt":"2020-05-24T17:34:43","Actor":"ekolis","Number":"3338","RawContent":null,"Title":"Inherited forms don't work in the designer for .NET Core","State":"open","Body":"* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\n1. Create a .NET Core WinForms app.\r\n2. Create a form.\r\n3. Create a second form.\r\n4. Edit the second form's code behind to make it inherit from the first form.\r\n5. Open the visual designer for the second form.\r\n\r\nThe designer will then crash with this error: \r\n\r\n> The designer could not be shown for this file because none of the classes within  it can be designed. The designer inspected the following classes in the file:  The designer could not be shown for this file because none of the classes within  it can be designed. The designer inspected the following classes in the file:  \\r\\n Form2 --- The base class 'BrokenFormsInheritance.Form1' could not be  loaded. Ensure the assembly has been referenced and that all projects have been  built. | The designer could not be shown for this file because none of the classes within  it can be designed. The designer inspected the following classes in the file:  The designer could not be shown for this file because none of the classes within  it can be designed. The designer inspected the following classes in the file:  \\r\\n Form2 --- The base class 'BrokenFormsInheritance.Form1' could not be  loaded. Ensure the assembly has been referenced and that all projects have been  built.\r\n-- | --\r\nThe designer could not be shown for this file because none of the classes within  it can be designed. The designer inspected the following classes in the file:  The designer could not be shown for this file because none of the classes within  it can be designed. The designer inspected the following classes in the file:  \\r\\n Form2 --- The base class 'BrokenFormsInheritance.Form1' could not be  loaded. Ensure the assembly has been referenced and that all projects have been  built.\r\n\r\n\r\n6. Build the project as the error indicates.\r\n\r\nThe error will remain regardless of if I build the project.\r\n\r\n**Expected behavior:**\r\n\r\nThe designer opens.\r\n\r\n**Minimal repro:**\r\n\r\nsee attached\r\n\r\n[BrokenFormsInheritance.zip](https://github.com/dotnet/winforms/files/4674071/BrokenFormsInheritance.zip)","Url":"https://github.com/dotnet/winforms/issues/3338","RelatedDescription":"Open issue \"Inherited forms don't work in the designer for .NET Core\" (#3338)"},{"Id":"623726700","IsPullRequest":false,"CreatedAt":"2020-05-23T19:30:07","Actor":"weltkante","Number":"3336","RawContent":null,"Title":"DragDrop unit tests hang, should be integration tests","State":"open","Body":"**.NET Core Version:**\r\nmaster\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nnot applicable\r\n\r\n**Problem description:**\r\nDoDragDrop tests in ToolStripItemTests and ControlTests are hanging CI.\r\n\r\nNot sure if its worth to root-cause the hang, I think they should be integration tests instead as proper drag'n'drop tests need mouse interaction, otherwise OLE probably exits out very early. These tests basically just cover a failure case which in practice nobody is interested in (and can easily be covered by the integration test as well). Sure, its useful to ensure that a noop failure case stays a noop failure case, but it may give a false sense of test coverage if there is actually no test of the code paths used for successful drag'n'drop.\r\n\r\n**Expected behavior:**\r\n* DoDragDrop tests should not hang CI\r\n* DoDragDrop tests should cover non-failure-cases (requires integration test)\r\n\r\n**Minimal repro:**\r\n* run the tests with xunit.stafact updated to 1.0.33 or unskip them from PR #3276\r\n","Url":"https://github.com/dotnet/winforms/issues/3336","RelatedDescription":"Open issue \"DragDrop unit tests hang, should be integration tests\" (#3336)"},{"Id":"623623027","IsPullRequest":true,"CreatedAt":"2020-05-23T09:52:25","Actor":"hughbe","Number":"3335","RawContent":null,"Title":"Avoid initializing native tools twice","State":"open","Body":"## Proposed Changes\r\nExample log from running `build.ps1`\r\n```\r\nPS C:\\Users\\hughbe\\Documents\\GitHub\\winforms> .\\build-local.ps1\r\nBuilding the solution...\r\nProcessing C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\eng\\..\\global.json\r\nFile 'C:\\Users\\hughbe\\.netcoreeng\\native\\temp\\cmake-3.14.2-win64-x64.zip' already exists, skipping download\r\nFile 'C:\\Users\\hughbe\\.netcoreeng\\native\\temp\\WinShimmer.zip' already exists, skipping download\r\nVERBOSE: Extracting 'C:\\Users\\hughbe\\.netcoreeng\\native\\temp\\WinShimmer.zip' to\r\n'C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\eng\\..\\.tools\\native\\bin\\WinShimmer'\r\nFile 'C:\\Users\\hughbe\\.netcoreeng\\native\\temp\\dotnet-api-docs_netcoreapp3.0-0.0.0.1-win64-x64.zip' already exists, skipping download\r\ndotnet-api-docs_netcoreapp3.0 was not found in .\r\nNative tools bootstrap failed\r\nThe property 'path' cannot be found on this object. Verify that the property exists.\r\nexit /b 1\r\nProcessing C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\global.json\r\ncmake.exe already exists; replacing...\r\ndotnet-api-docs_netcoreapp3.0 was not found in .\r\nNative tools bootstrap failed\r\nGET https://dot.net/v1/dotnet-install.ps1\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/5.0.100-preview.5.20251.2/dotnet-sdk-5.0.100-preview.5.20251.2-win-x64.zip\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/5.0.100-preview.5.20251.2/dotnet-sdk-5.0.100-preview.5.20251.2-win-x64.zip\r\ndotnet-install: Adding to current process PATH: \"C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\\". Note: This change will not be visible if PowerShell was run as a child process.\r\ndotnet-install: Installation finished\r\nC:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\sdk\\5.0.100-preview.5.20251.2\\MSBuild.dll /nologo -distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\sdk\\5.0.100-preview.5.20251.2\\dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\sdk\\5.0.100-preview.5.20251.2\\dotnet.dll -maxcpucount /m -verbosity:m /v:minimal /bl:C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\artifacts\\log\\Debug\\ToolsetRestore.binlog /clp:Summary /clp:ErrorsOnly;NoSummary /nr:True /p:ContinuousIntegrationBuild=False /p:TreatWarningsAsErrors=true /p:__ToolsetLocationOutputFile=C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\artifacts\\toolset\\5.0.0-beta.20261.9.txt /t:__WriteToolsetLocation /warnaserror C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\artifacts\\toolset\\restore.proj\r\nC:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\sdk\\5.0.100-preview.5.20251.2\\MSBuild.dll /nologo -distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\sdk\\5.0.100-preview.5.20251.2\\dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\sdk\\5.0.100-preview.5.20251.2\\dotnet.dll -maxcpucount /m -verbosity:m /v:minimal /bl:C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\artifacts\\log\\Debug\\Build.binlog /clp:Summary /nr:True /p:ContinuousIntegrationBuild=False /p:TreatWarningsAsErrors=true /p:Configuration=Debug /p:RepoRoot=C:\\Users\\hughbe\\Documents\\GitHub\\winforms /p:Restore=True /p:DeployDeps=False /p:Build=True /p:Rebuild=False /p:Deploy=False /p:Test=False /p:Pack=False /p:IntegrationTest=False /p:PerformanceTest=False /p:Sign=False /p:Publish=False /warnaserror C:\\Users\\hughbe\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\5.0.0-beta.20261.9\\tools\\Build.proj\r\n  Determining projects to restore...\r\n  Restored C:\\Users\\hughbe\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\5.0.0-beta.20261.9\\tools\\Tools.proj (in 566 ms).\r\nProcessing C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\eng\\..\\global.json\r\ncmake.exe already exists; replacing...\r\ndotnet-api-docs_netcoreapp3.0 was not found in .\r\nNative tools bootstrap failed\r\nThe property 'path' cannot be found on this object. Verify that the property exists.\r\nexit /b 1\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Runtime/5.0.0-preview.6.20271.10/dotnet-runtime-5.0.0-preview.6.20271.10-win-x64.zip\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Runtime/5.0.0-preview.6.20271.10/dotnet-runtime-5.0.0-preview.6.20271.10-win-x64.zip\r\ndotnet-install: Installation finished\r\n  Determining projects to restore...\r\n  Determining projects to restore...\r\n...\r\n```\r\n\r\nNote that we have two entries for `Processing C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\eng\\..\\global.json`\r\n\r\nThis is because we actually shouldn't be calling `init-tools-native` from `configure-toolset.ps1`. `init-tools-native` is called in `build.ps1`: https://github.com/dotnet/arcade/blob/8078d8f3f77b7e8b7f6e289cf82cfdfa9c7a9355/eng/common/build.ps1#L146\r\n\r\nTherefore we end up calling this twice\r\n\r\nAlso make the variables `script:` prefixed to match dotnet/runtime https://github.com/dotnet/runtime/blob/master/eng/configure-toolset.ps1\r\n\r\nWould be nice to get this script documented in arcade: https://github.com/dotnet/arcade/issues/1456\r\n\r\n@RussKie could you copy in an arcade folk to make sure this is the right thing if you think","Url":"https://github.com/dotnet/winforms/pull/3335","RelatedDescription":"Open PR \"Avoid initializing native tools twice\" (#3335)"},{"Id":"623564107","IsPullRequest":false,"CreatedAt":"2020-05-23T02:39:32","Actor":"jscholes","Number":"3334","RawContent":null,"Title":"Accessibility: problematic screen reader UX for ContextMenuStrip (NVDA)","State":"open","Body":"* .NET Core Version: 3.1\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n#### Problem description:\r\n\r\nWhen using the standard `ContextMenu` removed in https://github.com/dotnet/winforms/pull/2157, NVDA announces \"Context Menu\" when the menu opens.  With `ContextMenuStrip`, NVDA doesn't announce anything on pop-up (not even the presence of a menu without an accessible name), meaning that a user has no idea that a menu has been invoked.\r\n\r\n#### Expected behavior:\r\n\r\nNVDA will announce \"Context Menu\" on pop-up.\r\n\r\n#### Minimal repro:\r\n\r\n```\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nnamespace Test {\r\n\tpublic class MainWindow : Form {\r\n\t\tpublic MainWindow() {\r\n\t\t\tthis.ClientSize = new Size(800, 450);\r\n\t\t\tthis.Text = \"Context Menu Accessibility\";\r\n\t\t\tthis.AutoScaleDimensions = new SizeF(6F, 13F);\r\n\t\t\tthis.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\r\n\t\t\tthis.SuspendLayout();\r\n\t\t\tthis.InitializeControls();\r\n\t\t\tthis.ResumeLayout(false);\r\n\t\t\tthis.PerformLayout();\r\n\t\t}\r\n\r\n\t\tprivate void InitializeControls() {\r\n\t\t\tButton aButton = new Button{\r\n\t\t\t\tText=\"Button with a ContextMenuStrip\"\r\n\t\t\t};\r\n\t\t\tContextMenuStrip ctxMenu = new ContextMenuStrip();\r\n\t\t\tctxMenu.Items.Add(\"Item &1\");\r\n\t\t\tctxMenu.Items.Add(\"Item &2\");\r\n\t\t\tctxMenu.Items.Add(\"Item &3\");\r\n\t\t\taButton.ContextMenuStrip = ctxMenu;\r\n\t\t\tthis.Controls.Add(aButton);\r\n\t\t}\r\n\r\n\t\tprotected override void Dispose(bool disposing) {\r\n\t\t\tbase.Dispose(disposing);\r\n\t\t}\r\n\t}\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/3334","RelatedDescription":"Open issue \"Accessibility: problematic screen reader UX for ContextMenuStrip (NVDA)\" (#3334)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-05-29T05:30:51.2962922Z","RunDurationInMilliseconds":816}