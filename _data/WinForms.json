{"Data":{"GitHub":{"Issues":[{"Id":"1125140575","IsPullRequest":true,"CreatedAt":"2022-02-07T00:19:34","Actor":"gpetrou","Number":"6630","RawContent":null,"Title":"Enable nullability in Screen","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in Screen.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6630)","Url":"https://github.com/dotnet/winforms/pull/6630","RelatedDescription":"Closed or merged PR \"Enable nullability in Screen\" (#6630)"},{"Id":"1125171305","IsPullRequest":true,"CreatedAt":"2022-02-07T00:15:51","Actor":"gpetrou","Number":"6631","RawContent":null,"Title":"Enable nullability in ProgressBar","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in ProgressBar.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6631)","Url":"https://github.com/dotnet/winforms/pull/6631","RelatedDescription":"Closed or merged PR \"Enable nullability in ProgressBar\" (#6631)"},{"Id":"1125251893","IsPullRequest":true,"CreatedAt":"2022-02-06T16:40:49","Actor":"gpetrou","Number":"6633","RawContent":null,"Title":"Enable nullability in SnappableControl and CommandsPane","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in SnappableControl and CommandsPane.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6633)","Url":"https://github.com/dotnet/winforms/pull/6633","RelatedDescription":"Open PR \"Enable nullability in SnappableControl and CommandsPane\" (#6633)"},{"Id":"1125244435","IsPullRequest":true,"CreatedAt":"2022-02-06T16:10:15","Actor":"gpetrou","Number":"6632","RawContent":null,"Title":"Enable nullability in SelectedIndexCollection and SelectedObjectCollection","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in SelectedIndexCollection and SelectedObjectCollection.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6632)","Url":"https://github.com/dotnet/winforms/pull/6632","RelatedDescription":"Open PR \"Enable nullability in SelectedIndexCollection and SelectedObjectCollection\" (#6632)"},{"Id":"1125130522","IsPullRequest":true,"CreatedAt":"2022-02-06T07:37:05","Actor":"gpetrou","Number":"6629","RawContent":null,"Title":"Enable nullability in ImageKeyConverter","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in ImageKeyConverter.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6629)","Url":"https://github.com/dotnet/winforms/pull/6629","RelatedDescription":"Open PR \"Enable nullability in ImageKeyConverter\" (#6629)"},{"Id":"1125130480","IsPullRequest":true,"CreatedAt":"2022-02-06T07:36:46","Actor":"gpetrou","Number":"6628","RawContent":null,"Title":"Enable nullability on ScrollableControl","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability on ScrollableControl.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6628)","Url":"https://github.com/dotnet/winforms/pull/6628","RelatedDescription":"Open PR \"Enable nullability on ScrollableControl\" (#6628)"},{"Id":"1124867802","IsPullRequest":false,"CreatedAt":"2022-02-05T11:49:13","Actor":"Janiel13","Number":"6625","RawContent":null,"Title":"Janiel13","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\n\n**Is your feature request related to a problem? Please describe.**\n<!--\n    A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n  -->\n\n**Describe the solution you'd like and alternatives you've considered**\n<!--\n    A clear and concise description of what you want to happen. This includes:\n    - Description of what API need to be added or changed.\n    - Code that shows the surface area of the API.\n    - Code that shows real world scenarios, and how they would otherwise be handled.\n    - Details showing the usage/consumption of the proposed new API, and alternatives (e.g. not having this API).\n    - Any other context or screenshots about the feature request here.\n\n    :exclamation: Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md for more details\n\n  -->\n\n\n**Will this feature affect UI controls?**\n<!--\n    Yes / No\n\n    If yes, describe the following:\n\n        - Will VS Designer need to support the feature? If yes, describe how you expect it to funсtion.\n        - What impact will it have on accessibility?\n        - Will this feature need to be localized or be localizable?\n  -->\n","Url":"https://github.com/dotnet/winforms/issues/6625","RelatedDescription":"Closed issue \"Janiel13\" (#6625)"},{"Id":"1124893065","IsPullRequest":true,"CreatedAt":"2022-02-05T10:27:15","Actor":"gpetrou","Number":"6627","RawContent":null,"Title":"Enable nullability in ListView","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in ListView.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6627)","Url":"https://github.com/dotnet/winforms/pull/6627","RelatedDescription":"Open PR \"Enable nullability in ListView\" (#6627)"},{"Id":"1124869951","IsPullRequest":true,"CreatedAt":"2022-02-05T08:24:41","Actor":"gpetrou","Number":"6626","RawContent":null,"Title":"Enable nullability in classes that inherit from NativeWindow","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in classes that inherit from NativeWindow.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6626)","Url":"https://github.com/dotnet/winforms/pull/6626","RelatedDescription":"Open PR \"Enable nullability in classes that inherit from NativeWindow\" (#6626)"},{"Id":"1123908705","IsPullRequest":true,"CreatedAt":"2022-02-05T01:46:50","Actor":"SergeySmirnov-Akvelon","Number":"6619","RawContent":null,"Title":"Fixing issue with getting ListViewItem.AccessibilityObject when ListView does not exist (port to 6.0)","State":"closed","Body":"Fixes #6230 \r\n\r\n## Proposed changes\r\n- The issue is reproduced because we have cached the `ListViewItem.AccessibilityObject`. After the changes in #4910, we added logic that, with each call to the `AccessibilityObject` property, checked that the `ListView` exists and, if absent, threw an exception. Now we return null as a `ListViewItem.AccessibilityObject` instead of returning an exception.\r\n\r\n- Also, after the focused `ListViewItem` is removed, it remains cached in the `FocusedItem` property. It also forces the Accessibility tool to try to retrieve the data of the `ListViewItem` that is not displayed. As a fix, a logic was added to reset the Focused flag from the `ListViewItem`.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n**Before fix:**\r\n![Issue-6230](https://user-images.githubusercontent.com/23376742/144040481-714f76ab-e33b-46dc-bdcc-d98e00346f1d.gif)\r\n\r\n**After fix:**\r\n![Issue-6230-SecondFix](https://user-images.githubusercontent.com/23376742/146338936-c1449c40-5a78-4c2b-8d4a-2f00036f44be.gif)\r\n\r\n## Regression? \r\n- Yes (from #4910)\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test methodology\r\n- Manual testing\r\n- CTI team\r\n- Unit tests\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Inspect \r\n- Narrator\r\n- Accessibility Insights\r\n\r\n## Test environment(s)\r\n- Microsoft Windows [Version 10.0.19041.1348]\r\n- .NET Core SDK: 6.0.1\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6619)","Url":"https://github.com/dotnet/winforms/pull/6619","RelatedDescription":"Closed or merged PR \"Fixing issue with getting ListViewItem.AccessibilityObject when ListView does not exist (port to 6.0)\" (#6619)"},{"Id":"1123716129","IsPullRequest":true,"CreatedAt":"2022-02-04T22:40:28","Actor":"merriemcgaw","Number":"6618","RawContent":null,"Title":"Update winforms-designer.md","State":"closed","Body":"## Proposed changes\r\nUpdate current Designer doc to remove references to the old VSIX\r\nAdd new Accessibility workaround doc for the current accessibility issues in the designer.","Url":"https://github.com/dotnet/winforms/pull/6618","RelatedDescription":"Closed or merged PR \"Update winforms-designer.md\" (#6618)"},{"Id":"1124189970","IsPullRequest":true,"CreatedAt":"2022-02-04T18:17:01","Actor":"dotnet-maestro[bot]","Number":"6624","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220203.2\r\n- **Date Produced**: February 3, 2022 5:10:31 PM UTC\r\n- **Commit**: 0ae04e5b33afac1c14a6127df1037f83d39a6ec3\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22102.17 to 7.0.0-preview.2.22103.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/7550df8...0ae04e5\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6624)","Url":"https://github.com/dotnet/winforms/pull/6624","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6624)"},{"Id":"1124189226","IsPullRequest":true,"CreatedAt":"2022-02-04T18:16:51","Actor":"dotnet-maestro[bot]","Number":"6623","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220203.1\r\n- **Date Produced**: February 3, 2022 10:28:45 AM UTC\r\n- **Commit**: 70831f0d126fe88b81d7dc8de11358e17a5ce364\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22103.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22103.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22103.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22103.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22103.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22103.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/4d6406f...70831f0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6623)","Url":"https://github.com/dotnet/winforms/pull/6623","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6623)"},{"Id":"1124151020","IsPullRequest":true,"CreatedAt":"2022-02-04T14:38:18","Actor":"vlada-shubina","Number":"6622","RawContent":null,"Title":"update arcade version and re-enable template localization","State":"closed","Body":"PR reenables template localization disabled in https://github.com/dotnet/winforms/pull/6441\r\nIssue was fixed in https://github.com/dotnet/templating/pull/4267 and available in latest version of arcade https://github.com/dotnet/arcade/pull/8395.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6622)","Url":"https://github.com/dotnet/winforms/pull/6622","RelatedDescription":"Closed or merged PR \"update arcade version and re-enable template localization\" (#6622)"},{"Id":"1124077903","IsPullRequest":false,"CreatedAt":"2022-02-04T11:06:18","Actor":"SergeySmirnov-Akvelon","Number":"6621","RawContent":null,"Title":"Combobox text field is not cleared when last item is removed","State":"open","Body":".NET Core Version: \r\n- 7.0.0-preview.2.22102.17\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\n- Yes\r\n\r\n**Problem description:**\r\n\r\n1. Create a `Form` with a `ComboBox` and a `Button`.\r\n2. Add two `Items` to the `ComboBox`.\r\n3. Add an event to remove the selected `Item` when the `Button` is clicked.\r\n4. Run the application.\r\n5. Choose any `Item`.\r\n6. Click on the `Button` (`Combobox` text field will be cleared).\r\n7. Choose another `Item`.\r\n8. Click on the `Button`.\r\n\r\n**Actual behavior:**\r\nThe text field contains the name of the `Item`.\r\n\r\n**Expected behavior:**\r\nThe text field should be cleared.","Url":"https://github.com/dotnet/winforms/issues/6621","RelatedDescription":"Open issue \"Combobox text field is not cleared when last item is removed\" (#6621)"},{"Id":"1124064026","IsPullRequest":true,"CreatedAt":"2022-02-04T10:50:43","Actor":"DmitryGorokhov","Number":"6620","RawContent":null,"Title":"Implementing uia provider support for DTP control","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nImplements part of #3421\r\n\r\n## Proposed changes\r\n\r\n- Switched on `SupportsUiaProviders` property of `DateTimePicker` class.\r\n- Added needed automation events to fix behavior in Narrator.\r\n- Added workaround to check `AccessKey` for dtp in `ControlAccessibleObjectTests`.  \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Improving development experience for `DateTimePicker` control accessibility.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\nChanges in accessibility tools.\r\n\r\n### Accessibility Insights\r\n\r\nThere are no errors here.\r\n\r\n![AI](https://user-images.githubusercontent.com/58004471/152515656-fdce67f3-7b69-4646-aa66-cac202e6333e.png)\r\n\r\n### Narrator & Buddy\r\n\r\nThe behavior in Narrator was restored after the fix. Seems was resolved problem described in issue #5487.\r\n\r\n![NB](https://user-images.githubusercontent.com/58004471/152515851-458e9fab-1844-49fe-a775-859b93902a07.png)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually\r\n- Unit testing\r\n- CTI\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n- Inspect\r\n- Accessibility Insights\r\n- Narrator\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .Net version: 7.0.100-preview.1.22078.7\r\n- OS version: 10.0.19044\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6620)","Url":"https://github.com/dotnet/winforms/pull/6620","RelatedDescription":"Open PR \"Implementing uia provider support for DTP control\" (#6620)"},{"Id":"1123365720","IsPullRequest":true,"CreatedAt":"2022-02-03T22:25:15","Actor":"dotnet-maestro[bot]","Number":"6616","RawContent":null,"Title":"[release/5.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:7ad8a074-d804-46e2-eafe-08d86aff023e)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 7ad8a074-d804-46e2-eafe-08d86aff023e\r\n- **Build**: 20220105.3\r\n- **Date Produced**: January 5, 2022 7:05:59 PM UTC\r\n- **Commit**: e5953f277abe1f5bd45003fb5834f5b1674be1eb\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.GenFacades**: [from 5.0.0-beta.21565.1 to 5.0.0-beta.22055.3][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 5.0.0-beta.21565.1 to 5.0.0-beta.22055.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 5.0.0-beta.21565.1 to 5.0.0-beta.22055.3][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 5.0.0-beta.21565.1 to 5.0.0-beta.22055.3][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 5.0.0-beta.21565.1 to 5.0.0-beta.22055.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/2f5d6d5...e5953f2\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:7ad8a074-d804-46e2-eafe-08d86aff023e)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6616)","Url":"https://github.com/dotnet/winforms/pull/6616","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dotnet/arcade\" (#6616)"},{"Id":"1123246867","IsPullRequest":false,"CreatedAt":"2022-02-03T20:38:15","Actor":"daniel-lerch","Number":"6614","RawContent":null,"Title":"ApplicationConfiguration source generator does not support decimal font size","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version:  \r\n6.0.101\r\n\r\n* Have you experienced this same bug with .NET Framework?:  \r\nNo\r\n\r\n**Problem description:**\r\nThe source generator for `ApplicationConfiguration.Initialize()` does not handle decimal font sizes correctly. When I tried to use the old default font settings from .NET Framework in .NET 6.0 via project file, I got a build error.\r\n\r\nThe source generator uses a decimal comma instead of a decimal point:\r\n```csharp\r\n//                                                                           ↓\r\nApplication.SetDefaultFont(new Font(new FontFamily(\"Microsoft Sans Serif\"), 8,25f, (FontStyle)0, (GraphicsUnit)3));\r\n//                                                                           ↑\r\n```\r\n\r\nOS: Windows 10.0.19044.1466\r\nOS locale: **de-DE**\r\n\r\n**Expected behavior:**\r\nThe source generator must use a decimal point for all OS locales like already written in the .csproj file:\r\n```csharp\r\n//                                                                           ↓\r\nApplication.SetDefaultFont(new Font(new FontFamily(\"Microsoft Sans Serif\"), 8.25f, (FontStyle)0, (GraphicsUnit)3));\r\n//                                                                           ↑\r\n```\r\n\r\n**Minimal repro:**\r\n1. Create a new Windows Forms project `dotnet new winforms`\r\n2. Add the following line to your `.csproj` file ([this is officially recommended](https://docs.microsoft.com/de-de/dotnet/desktop/winforms/whats-new/net60?view=netdesktop-6.0#change-the-default-font))\r\n```xml\r\n<ApplicationDefaultFont>Microsoft Sans Serif, 8.25pt</ApplicationDefaultFont>\r\n```\r\n3. Try to build your application and watch compiler errors","Url":"https://github.com/dotnet/winforms/issues/6614","RelatedDescription":"Closed issue \"ApplicationConfiguration source generator does not support decimal font size\" (#6614)"},{"Id":"1123365980","IsPullRequest":true,"CreatedAt":"2022-02-03T17:55:01","Actor":"dotnet-maestro[bot]","Number":"6617","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:a2a5ea62-d9bf-419c-0c86-08d7315b512a)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: a2a5ea62-d9bf-419c-0c86-08d7315b512a\r\n- **Build**: 20220127.9\r\n- **Date Produced**: January 27, 2022 10:18:07 PM UTC\r\n- **Commit**: 31e3d884010345c19f6335571e34b2b5c7ce13bc\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 2.4.1-beta.21561.2 to 2.4.1-beta.22077.9][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.21561.2 to 1.0.0-beta.22077.9][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 2.0.0-beta.21561.2 to 2.0.0-beta.22077.9][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 1.0.0-beta.21561.2 to 1.0.0-beta.22077.9][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/3df4410...31e3d88\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:a2a5ea62-d9bf-419c-0c86-08d7315b512a)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6617)","Url":"https://github.com/dotnet/winforms/pull/6617","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#6617)"},{"Id":"1123256801","IsPullRequest":true,"CreatedAt":"2022-02-03T16:41:35","Actor":"dotnet-maestro[bot]","Number":"6615","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:84f431dc-3375-4a46-af87-08d961c59698)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 84f431dc-3375-4a46-af87-08d961c59698\r\n- **Build**: 20220202.3\r\n- **Date Produced**: February 2, 2022 5:37:11 PM UTC\r\n- **Commit**: 93e08e378eb00a4267ffeca24b6bebb4f6c011ef\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 6.0.0-beta.21609.4 to 6.0.0-beta.22102.3][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21609.4 to 6.0.0-beta.22102.3][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21609.4 to 6.0.0-beta.22102.3][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.21609.4 to 6.0.0-beta.22102.3][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.21609.4 to 6.0.0-beta.22102.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21609.4 to 6.0.0-beta.22102.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/7421b55...93e08e3\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates sdk.version to 6.0.101\r\n  - Updates tools.dotnet to 6.0.101\r\n\r\n[marker]: <> (End:84f431dc-3375-4a46-af87-08d961c59698)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6615)","Url":"https://github.com/dotnet/winforms/pull/6615","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#6615)"},{"Id":"1123221680","IsPullRequest":false,"CreatedAt":"2022-02-03T15:26:00","Actor":"daniel-lerch","Number":"6613","RawContent":null,"Title":"ScaleControl is not called anymore at 100% scaling","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version:  \r\n6.0.101\r\n\r\n* Have you experienced this same bug with .NET Framework?:  \r\nNo\r\n\r\n**Problem description:**\r\n\r\nSome Windows Forms controls require manual scaling by overriding the `Control.ScaleControl(SizeF, BoundsSpecified)` method.\r\n\r\nIn .NET Framework applications (tested with dpi awareness enabled in manifest, high dpi auto resizing and PerMonitorV2 support enabled in app.config the `ScaleControl` method is called by the runtime when `InitializeComponent` calls `ResumeLayout` regardless of the users screen scaling.\r\n\r\nIn .NET 6.0 (tested with `HighDpiMode.SystemAware` and `HighDpiMode.PerMonitorV2`) the `ScaleControl` method is not called anymore when the users screen is scaled at 100% (default). My code from .NET Framework relies on `ScaleControl` being called for all screen scaling in order to initialize graphics in the right resolution.\r\n\r\n**Expected behavior:**\r\n\r\nWindows Forms calls `ScaleControl` at initialization for every control and even 100% scaling like .NET Framework did in order to maintain compatibility.\r\n\r\nIf this no-op on machines with regular DPI displays is a performance concern, you should mention this breaking change in the migration guides and ideally create a workaround.\r\n\r\n**Minimal repro:**\r\n\r\n1. Create a new Windows Forms project `dotnet new winforms`\r\n2. Add the following code to `Form1.cs`:\r\n```csharp\r\n    protected override void ScaleControl(SizeF factor, BoundsSpecified specified)\r\n    {\r\n        BackColor = Color.Aquamarine;\r\n\r\n        base.ScaleControl(factor, specified);\r\n    }\r\n```\r\n3. Run the application on a device with 100% scaling (96 DPI)\r\n4. On .NET Framework you would see a blue window, on .NET 6.0 the window stays gray","Url":"https://github.com/dotnet/winforms/issues/6613","RelatedDescription":"Open issue \"ScaleControl is not called anymore at 100% scaling\" (#6613)"},{"Id":"1123065143","IsPullRequest":true,"CreatedAt":"2022-02-03T13:42:22","Actor":"dotnet-maestro[bot]","Number":"6611","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220202.17\r\n- **Date Produced**: February 3, 2022 9:27:01 AM UTC\r\n- **Commit**: 7550df8b58452abf4f45518335914070f4f4f54f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22102.1 to 7.0.0-preview.2.22102.17][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/6527b7f...7550df8\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6611)","Url":"https://github.com/dotnet/winforms/pull/6611","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6611)"},{"Id":"1123078589","IsPullRequest":false,"CreatedAt":"2022-02-03T13:20:10","Actor":"SergeySmirnov-Akvelon","Number":"6612","RawContent":null,"Title":"ListViewItem does not reset its \"Selected\" flag after removing from ListView","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n.NET Core Version: \r\n- 7.0.0-preview.2.22102.1\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\n- Yes\r\n\r\n**Problem description:**\r\n\r\n1. Create a `Form` with a `ListView`\r\n2. Add several `ListViewItems`\r\n3. Add an event to remove an `ListViewItem` when the key is pressed\r\n4. Add a `MessageBox` with the status of the `ListViewItem` after deletion to the event above\r\n5. Run the application\r\n6. Set focus to an `ListViewItem`\r\n7. Delete an `ListViewItem` by pressing the key\r\n\r\n**Actual behavior:**\r\nThe `ListViewItem.Selected` have the value `True`\r\n![image](https://user-images.githubusercontent.com/23376742/152348958-49a8c0b5-b7c7-4e91-a77f-8dfebc41ac36.png)\r\n\r\n**Expected behavior:**\r\nThe `ListViewItem.Selected` should have the value `False` (according to `TreeView` behavior)","Url":"https://github.com/dotnet/winforms/issues/6612","RelatedDescription":"Open issue \"ListViewItem does not reset its \"Selected\" flag after removing from ListView\" (#6612)"},{"Id":"1123064560","IsPullRequest":false,"CreatedAt":"2022-02-03T13:06:19","Actor":"vladimir-krestov","Number":"6610","RawContent":null,"Title":"ToolStrip_WndProc_InvokeMouseActivateWithHandle_Success test is flaky in arm64 CI build","State":"open","Body":"* .NET Core Version: 7.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\n`ToolStrip_WndProc_InvokeMouseActivateWithHandle_Success` unit test fails sometime in arm64 CI build for successful PRs, that blocking deployment of fixes into sdk.\r\n\r\n**Stack trace** ([System.Windows.Forms.Tests_net7.0_arm64.log](https://dev.azure.com/dnceng/public/_build/results?buildId=1584807&view=artifacts&pathAsName=false&type=publishedArtifacts)):\r\n```\r\nSystem.Windows.Forms.Tests.ToolStripTests.ToolStrip_WndProc_InvokeMouseActivateWithHandle_Success [FAIL]\r\nAssert.Equal() Failure\r\n      Expected: 0\r\n      Actual:   2\r\n      Stack Trace:\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/ToolStripTests.cs(7139,0): at System.Windows.Forms.Tests.ToolStripTests.ToolStrip_WndProc_InvokeMouseActivateWithHandle_Success()\r\n```\r\n**Expected behavior:**\r\nAll correct tests pass every time.\r\n\r\n**Minimal repro:**\r\n- Run unit tests on arm64 environment (or create a PR with changes, CI build will do it)\r\n","Url":"https://github.com/dotnet/winforms/issues/6610","RelatedDescription":"Open issue \"ToolStrip_WndProc_InvokeMouseActivateWithHandle_Success test is flaky in arm64 CI build\" (#6610)"},{"Id":"1123057921","IsPullRequest":false,"CreatedAt":"2022-02-03T13:00:09","Actor":"vladimir-krestov","Number":"6609","RawContent":null,"Title":"RichTextBox_Text_GetWithHandle_ReturnsExpected test is flaky in x86 Debug CI build","State":"open","Body":"* .NET Core Version: 7.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\n`RichTextBox_Text_GetWithHandle_ReturnsExpected` unit test fails sometime in x86 Debug CI build for successful PRs, that blocking deployment of fixes into sdk.\r\n\r\n**Stack trace** ([System.Windows.Forms.Tests_net7.0_x86.log](https://dev.azure.com/dnceng/public/_build/results?buildId=1586808&view=artifacts&pathAsName=false&type=publishedArtifacts)):\r\n```\r\nSystem.Windows.Forms.Tests.RichTextBoxTests.RichTextBox_Text_GetWithHandle_ReturnsExpected [FAIL]\r\n      Assert.Equal() Failure\r\n                (pos 0)\r\n      Expected: a?b\r\n      Actual:   ?b\r\n                (pos 0)\r\n      Stack Trace:\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/RichTextBoxTests.cs(6920,0): at System.Windows.Forms.Tests.RichTextBoxTests.RichTextBox_Text_GetWithHandle_ReturnsExpected()\r\n```\r\n\r\n**Expected behavior:**\r\nAll correct tests pass every time.\r\n\r\n**Minimal repro:**\r\n- Run unit tests on x86 environment (or create a PR with changes, CI build will do it)\r\n","Url":"https://github.com/dotnet/winforms/issues/6609","RelatedDescription":"Open issue \"RichTextBox_Text_GetWithHandle_ReturnsExpected test is flaky in x86 Debug CI build\" (#6609)"},{"Id":"1122981641","IsPullRequest":true,"CreatedAt":"2022-02-03T11:39:37","Actor":"kant2002","Number":"6608","RawContent":null,"Title":"Use ComWrappers for IFileSaveDialog","State":"open","Body":"I extract from FileOpenDialogWrapper base class FileDialogWrapper to handle just IFileDialog and derive FileSaveDialogWrapper form it.\r\nAdd missing methods for IFileSaveDialog\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6608)","Url":"https://github.com/dotnet/winforms/pull/6608","RelatedDescription":"Open PR \"Use ComWrappers for IFileSaveDialog\" (#6608)"},{"Id":"1121906006","IsPullRequest":true,"CreatedAt":"2022-02-02T17:20:23","Actor":"dotnet-maestro[bot]","Number":"6606","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220202.1\r\n- **Date Produced**: February 2, 2022 11:20:23 AM UTC\r\n- **Commit**: 6527b7fe83b95a195615c1081f345b6d34d716e7\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22081.6 to 7.0.0-preview.2.22102.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/349f83a...6527b7f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6606)","Url":"https://github.com/dotnet/winforms/pull/6606","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6606)"},{"Id":"1121696647","IsPullRequest":false,"CreatedAt":"2022-02-02T09:34:41","Actor":"ArtemTatarinov","Number":"6603","RawContent":null,"Title":"Refactoring `AutomationId` at the `GetPropertyValue` method","State":"open","Body":"We should consider refactoring the `AutomationId` property at `AccessibleObject` class and its descendants. Now 7 descendants of the `ControlAccessibleObject` class return the `Owner.Name` value for the `AutomationId` property at the `GetPropertyValue` method, and 4 descendants of the `AccessibleObject` class return `AutomationId` (which is not virtual now as each class implements it on its own).\r\n \r\nWe could refactor this property like that: \r\n- move the AutomationId property to the AccessibleObject class (it will be returned at the GetPropertyValue method here)\r\n- make it virtual with the default implementation returning a `null` value\r\n- keep the current implementations in the 4 classes derived from AO,  but mark them as overrides \r\n- move returning of the `Owner.Name` to the `ControlAccessibleObjectObject` class itself to make it universal for all its descendants.\r\n\r\nThis could be risky since some customers could have automation tests that rely on `AutomationId` and have custom controls derived from our control class that don't implement custom `AutomationIdProperty`, but maybe code simplification outweighs the risk and at the worst-case scenario we could just revert the future PR with the single `AutomationId` refactoring.\r\n\r\nOriginal post: https://github.com/dotnet/winforms/pull/6429#issuecomment-1009023639","Url":"https://github.com/dotnet/winforms/issues/6603","RelatedDescription":"Open issue \"Refactoring `AutomationId` at the `GetPropertyValue` method\" (#6603)"},{"Id":"1121565762","IsPullRequest":true,"CreatedAt":"2022-02-02T06:38:00","Actor":"Danil-Andrianov","Number":"6600","RawContent":null,"Title":"Adding UIA support for PrintPreviewControl","State":"open","Body":"Partially implements #3421\r\n\r\n\r\n## Proposed changes\r\n\r\n- Updated \"SupportsUiaProviders\" flag.\r\n- Added and implemented printPreviewControlaccessible object\r\n- Added unit tests\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- **Before update:**\r\n![image](https://user-images.githubusercontent.com/74228865/152150519-13efc6d7-64cf-4eda-af41-e0eedcc01ef3.png)\r\n![image](https://user-images.githubusercontent.com/74228865/152150647-6b491eea-3881-4758-9bb1-600f2b50982e.png)\r\n\r\n- **After update:**\r\nProvider was changed.\r\n![image](https://user-images.githubusercontent.com/74228865/152152387-0cf5de1d-3947-472b-990c-e88ccf546713.png)\r\n![image](https://user-images.githubusercontent.com/74228865/152152458-3d6e2ee1-e19c-4176-aa3f-c07a7320e091.png)\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit tests\r\n- CTI team\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n- Narrator\r\n- Inspect\r\n- Accessibility Insights\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- Microsoft Windows [Version 10.0.22000.318]\r\n- .NET Core SDK: 7.0.0-alpha.1.21562.1\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6600)","Url":"https://github.com/dotnet/winforms/pull/6600","RelatedDescription":"Open PR \"Adding UIA support for PrintPreviewControl\" (#6600)"},{"Id":"1121564495","IsPullRequest":true,"CreatedAt":"2022-02-02T06:35:42","Actor":"vladimir-krestov","Number":"6599","RawContent":null,"Title":"Added \"Skip\" attribute for fail unit tests in arm64 and x86","State":"open","Body":"Related Issues:\r\n- #6597\r\n- #6609 \r\n- #6610\r\n\r\n## Proposed changes\r\n- Skipped unit tests that fail sometimes in arm64 and x86 environments, that blocks fixes deployment.\r\n\r\n## Customer Impact\r\n- No\r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- CI build\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6599)","Url":"https://github.com/dotnet/winforms/pull/6599","RelatedDescription":"Open PR \"Added \"Skip\" attribute for fail unit tests in arm64 and x86\" (#6599)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-02-07T03:30:32.5609744Z","RunDurationInMilliseconds":488}