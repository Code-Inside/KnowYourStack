{"Data":{"GitHub":{"Issues":[{"Id":"1158894704","IsPullRequest":true,"CreatedAt":"2022-03-03T21:01:59","Actor":"gpetrou","Number":"6788","RawContent":null,"Title":"Enable nullability in PropertyDescriptorGridEntryAccessibleObject","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in PropertyDescriptorGridEntryAccessibleObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6788)","Url":"https://github.com/dotnet/winforms/pull/6788","RelatedDescription":"Open PR \"Enable nullability in PropertyDescriptorGridEntryAccessibleObject\" (#6788)"},{"Id":"1158888012","IsPullRequest":true,"CreatedAt":"2022-03-03T20:53:16","Actor":"gpetrou","Number":"6787","RawContent":null,"Title":"Enable nullability in NumericUpDownAccessibleObject","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in NumericUpDownAccessibleObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6787)","Url":"https://github.com/dotnet/winforms/pull/6787","RelatedDescription":"Open PR \"Enable nullability in NumericUpDownAccessibleObject\" (#6787)"},{"Id":"1158767936","IsPullRequest":false,"CreatedAt":"2022-03-03T18:36:54","Actor":"GrabYourPitchforks","Number":"6786","RawContent":null,"Title":"SDL signoff requirements - please enable additional C/C++ compiler warnings","State":"open","Body":"> __Please prioritize this work.__ Depending on the size of the code base, there could be hundreds or thousands of warnings which require addressing.\r\n> \r\n> __This work must be completed before RC1 snap.__\r\n\r\nRecent SDL changes require that we enable additional compiler warnings across our C/C++ projects. The requirements are:\r\n\r\n* Compile with warning level 3 or higher. These warnings do not have to be fixed, but they must at least be triaged.\r\n* Enable the following additional warnings, which __must__ be fixed if they occur:\r\n  * __C4018__ - 'expression' : signed/unsigned mismatch\r\n  * __C4055__ - 'conversion' : from data pointer 'type1' to function pointer 'type2'\r\n  * __C4146__ - unary minus operator applied to unsigned type, result still unsigned\r\n  * __C4242__ - 'identifier' : conversion from 'type1' to 'type2', possible loss of data\r\n  * __C4244__ - 'conversion' conversion from 'type1' to 'type2', possible loss of data\r\n  * __C4267__ - 'var' : conversion from 'size_t' to 'type', possible loss of data\r\n  * __C4302__ - 'conversion' : truncation from 'type 1' to 'type 2'\r\n  * __C4308__ - negative integral constant converted to unsigned type\r\n  * __C4509__ - nonstandard extension used: 'function' uses SEH and 'object' has destructor\r\n  * __C4510__ - 'class' : default constructor could not be generated\r\n  * __C4532__ - 'continue' : jump out of __finally/finally block has undefined behavior during termination handling\r\n  * __C4533__ - initialization of 'variable' is skipped by 'instruction'\r\n  * __C4610__ - object 'class' can never be instantiated - user-defined constructor required\r\n  * __C4611__ - interaction between 'function' and C++ object destruction is non-portable\r\n  * __C4700__ - uninitialized local variable 'name' used\r\n  * __C4701__ - Potentially uninitialized local variable 'name' used\r\n  * __C4703__ - Potentially uninitialized local pointer variable 'name' used\r\n  * __C4789__ - destination of memory copy is too small\r\n  * __C4995__ - 'function': name was marked as #pragma deprecated\r\n  * __C4996__ - 'function': was declared deprecated also 'std::': Function call with parameters that are potentially unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'\r\n\r\nSee [the SDL guidelines](https://liquid.microsoft.com/Web/Object/Read/ms.security/Requirements/Microsoft.Security.SystemsADM.10086) (MSFT internal only) for further information.\r\n\r\nTo make auditing code easier prior to signoff and release, **please include the string _Microsoft.Security.SystemsADM.10086_** somewhere in the vcxproj / cmake / whatever file which is responsible for C/C++ compilation where all of these flags are defined. That gives the code auditors a target string to search against and validate that the proper warnings are enabled. See below an example of how to do this in a cmake file.\r\n\r\n```cmake\r\n# [[! Microsoft.Security.SystemsADM.10086 !]] - SQL required warnings\r\nadd_compile_options($<$<COMPILE_LANGUAGE:C,CXX>:/W3>) # warning level 3\r\nadd_compile_options($<$<COMPILE_LANGUAGE:C,CXX>:/WX>) # treat warnings as errors\r\nadd_compile_options($<$<COMPILE_LANGUAGE:C,CXX>:/we4018>) # 'expression' : signed/unsigned mismatch\r\nadd_compile_options($<$<COMPILE_LANGUAGE:C,CXX>:/we4055>) # 'conversion' : from data pointer 'type1' to function pointer 'type2'\r\n# ... and so on ...\r\n```\r\n\r\nOnce the work is finished, or if there is no work to perform, please feel free to close this issue.\r\n\r\nThanks for your assistance!\r\n\r\n## Quick FAQ\r\n\r\n__What code is bound to this requirement?__\r\n\r\nThis affects only _production_ code. Production code is generally defined as code which ships as part of the product and which runs on customer machines or which manages infrastructure, such as our build labs. Unit and functional test projects are not considered production code.\r\n\r\n__Does this need to be backported?__\r\n\r\nNo backporting plans at this time. If actual bugs are found during this process, individual product teams have discretion to selectively backport into the next downlevel servicing vehicle.\r\n\r\n__What about forked third-party code?__\r\n\r\nThis requirement applies to all code that MSFT builds from source, regardless of its provenance. Ideally any changes that we make to local forked copies can be submitted upstream as a PR so that the wider ecosystem can enjoy their benefits.\r\n\r\nIf this is impractical, exceptions to this requirement can be sought on an as-needed basis. However, exceptions are: (a) not guaranteed to be granted; and (b) time-constrained. The exception process is not intended to provide a permanent deferral of this work. Please contact the _fxsecurity_ alias if an exception is needed.\r\n\r\n__What about C# and other languages?__\r\n\r\nThis requirement only affects C/C++ code. Requirements for other languages will be filed as separate issues.","Url":"https://github.com/dotnet/winforms/issues/6786","RelatedDescription":"Open issue \"SDL signoff requirements - please enable additional C/C++ compiler warnings\" (#6786)"},{"Id":"1158635116","IsPullRequest":true,"CreatedAt":"2022-03-03T18:35:09","Actor":"dotnet-maestro[bot]","Number":"6785","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:84f431dc-3375-4a46-af87-08d961c59698)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 84f431dc-3375-4a46-af87-08d961c59698\r\n- **Build**: 20220222.7\r\n- **Date Produced**: February 22, 2022 10:41:19 PM UTC\r\n- **Commit**: 7215d8265a7fbcd022eb72ff7a6e2048444c985f\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 6.0.0-beta.22107.2 to 6.0.0-beta.22122.7][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.22107.2 to 6.0.0-beta.22122.7][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.22107.2 to 6.0.0-beta.22122.7][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.22107.2 to 6.0.0-beta.22122.7][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.22107.2 to 6.0.0-beta.22122.7][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.22107.2 to 6.0.0-beta.22122.7][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/fe5cc18...7215d82\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:84f431dc-3375-4a46-af87-08d961c59698)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6785)","Url":"https://github.com/dotnet/winforms/pull/6785","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#6785)"},{"Id":"1158391327","IsPullRequest":true,"CreatedAt":"2022-03-03T13:45:38","Actor":"dotnet-maestro[bot]","Number":"6784","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220302.1\r\n- **Date Produced**: March 2, 2022 11:51:45 AM UTC\r\n- **Commit**: 566e5fb87e4f84eeb898500fd3b3d2fd96662d13\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22151.1 to 7.0.0-beta.22152.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22151.1 to 7.0.0-beta.22152.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22151.1 to 7.0.0-beta.22152.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22151.1 to 7.0.0-beta.22152.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22151.1 to 7.0.0-beta.22152.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22151.1 to 7.0.0-beta.22152.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/801ca3a...566e5fb\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6784)","Url":"https://github.com/dotnet/winforms/pull/6784","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6784)"},{"Id":"1158218533","IsPullRequest":false,"CreatedAt":"2022-03-03T10:13:51","Actor":"Ashley-Li","Number":"6783","RawContent":null,"Title":"The button/Label control in the tabControl's tabPage2 move up after the app built ","State":"open","Body":"* VS Version: \r\nThe latest main VS build\r\n\r\n* .NET Core Version: \r\nVS comes with .NET SDK 6.0.22.10605\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Minimal repro:**\r\n1. Create a .NET Core winforms app.\r\n2. Add a TabControl to the form designer.\r\n3. Add a button into the tabPage2 of the tabControl1.\r\n4. Change the Anchor' property value of the button to 'None' or 'Buttom&Right'.\r\n5. Set the form's font property value to 'Segoe UI, 12pt' and Font style is Regular.\r\n6. Observe the Button's location value and build the app.\r\n7. Observe the Button's location value.\r\n\r\nOr\r\n\r\n1. Extract \"[TestApp.zip](https://github.com/dotnet/winforms-designer/files/8020188/TestApp.zip)\" and open it in VS.\r\n2. Observe the Button's location value and then build the app.\r\n3. Observe the Button's location value.\r\n\r\n**Actual behavior:**\r\nThe Button's location before build app is (220,180), after build app, the location of the button becomes (220,174).\r\nThe value of the Button's location property changes and the position moves up.\r\n![button_move_up_issue](https://user-images.githubusercontent.com/56664234/152906267-9f9ff176-a14b-4e4b-b188-46be33f94271.gif)\r\n\r\n**Expected behavior:**\r\nThe Button's location before build app is (220,180), after build app, the location of the button remains (220,180).\r\nThe value of the Button's location property should not change and the position remains unchanged.\r\n![Dev16_result](https://user-images.githubusercontent.com/56664234/152908361-4b1dd1cb-99b2-4826-a104-9133d46e30bf.gif)\r\n\r\n**More info**\r\n1. The button/Label control in the tabControl's tabPage1, the issue cannot repro, it occurs from tabPage2 and onwards in tabs.\r\n2. Workaround:  If you don’t change the Anchor property of the Button so that it defaults to (Top, Left), then the font of the Form is changed to “Segoe UI”, 12F, System.Drawing.FontStyle.Regular\". After build project, the button will not move up.\r\n2. The initial feedback ticket: https://devdiv.visualstudio.com/DevDiv/_queries/edit/1457510/?triage=true\r\n3. Original issue: [4029](https://github.com/dotnet/winforms-designer/issues/4092)","Url":"https://github.com/dotnet/winforms/issues/6783","RelatedDescription":"Open issue \"The button/Label control in the tabControl's tabPage2 move up after the app built \" (#6783)"},{"Id":"1157719544","IsPullRequest":true,"CreatedAt":"2022-03-03T01:27:30","Actor":"Tanya-Solyanik","Number":"6782","RawContent":null,"Title":"Removed old constraint related to CAS.","State":"closed","Body":"This should had been removed when we removed CAS-related code. ControlAccessibleObject was demanding unmanaged code permissions and that is why we did not allow controls to override it. In .NET CAS is deprecated, and this type check is not relevant any more.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6782)","Url":"https://github.com/dotnet/winforms/pull/6782","RelatedDescription":"Closed or merged PR \"Removed old constraint related to CAS.\" (#6782)"},{"Id":"1157588674","IsPullRequest":true,"CreatedAt":"2022-03-02T19:50:23","Actor":"dotnet-maestro[bot]","Number":"6781","RawContent":null,"Title":"[release/7.0-preview2] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4060a9ae-51b9-48e3-fc71-08d9f4e8def7)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 4060a9ae-51b9-48e3-fc71-08d9f4e8def7\r\n- **Build**: 20220302.2\r\n- **Date Produced**: March 2, 2022 6:10:56 PM UTC\r\n- **Commit**: e24f66dff0770eee344038da8c12476d8c450c41\r\n- **Branch**: refs/heads/release/7.0-preview2\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22128.3 to 7.0.0-preview.2.22152.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/190a47e...e24f66d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4060a9ae-51b9-48e3-fc71-08d9f4e8def7)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6781)","Url":"https://github.com/dotnet/winforms/pull/6781","RelatedDescription":"Closed or merged PR \"[release/7.0-preview2] Update dependencies from dotnet/runtime\" (#6781)"},{"Id":"1157174674","IsPullRequest":true,"CreatedAt":"2022-03-02T13:44:23","Actor":"dotnet-maestro[bot]","Number":"6780","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220301.1\r\n- **Date Produced**: March 1, 2022 12:31:30 PM UTC\r\n- **Commit**: 801ca3a61b946c160070168bf4ba35f5ecaceba6\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22151.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22151.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22151.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22151.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22151.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22151.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/f713662...801ca3a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6780)","Url":"https://github.com/dotnet/winforms/pull/6780","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6780)"},{"Id":"1157152822","IsPullRequest":false,"CreatedAt":"2022-03-02T12:49:51","Actor":"KalleOlaviNiemitalo","Number":"6779","RawContent":null,"Title":"System.Windows.Forms.Timer got stuck after being disabled and enabled reentrantly","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\nNot yet reproduced on .NET Core, but the implementation is similar.\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes, on .NET Framework 4.7.2.\r\n\r\n**Problem description:**\r\nSystem.Windows.Forms.Timer.TimerNativeWindow got into an invalid state in which NativeWindow.Handle == IntPtr.Zero but TimerNativeWindow._timerID != 0. After this, no more Timer.Tick events were raised, and assigning Timer.Enabled = false or Timer.Enabled = true had no effect.\r\n\r\nBefore the problem occurred, the application had enabled the timer. The application was then assigning Timer.Enabled = false. This caused TimerNativeWindow.StopTimer to call SafeNativeMethods.KillTimer and NativeWindow.DestroyHandle, which in turn called UnsafeNativeMethods.DestroyWindow. Normally, DestroyWindow would cause the window messages 0x90 (WM_UAHDESTROYWINDOW), 0x2 (WM_DESTROY), and 0x82 (WM_NCDESTROY) to be sent to the window. For unknown reasons in a RemoteApp environment, the 0x90 (WM_UAHDESTROYWINDOW) message was instead followed by WM_ACTIVATE to some other window. This indirectly caused Windows Forms to raise the Control.GotFocus event:\r\n\r\n```\r\n   at System.Windows.Forms.Control.OnGotFocus(EventArgs e)\r\n   at System.Windows.Forms.TextBox.OnGotFocus(EventArgs e)\r\n   at System.Windows.Forms.Control.WmSetFocus(Message& m)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.TextBox.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.UnsafeNativeMethods.SetFocus(HandleRef hWnd)\r\n   at System.Windows.Forms.UnsafeNativeMethods.SetFocus(HandleRef hWnd)\r\n   at System.Windows.Forms.ContainerControl.FocusActiveControlInternal()\r\n   at System.Windows.Forms.Form.set_Active(Boolean value)\r\n   at System.Windows.Forms.Form.WmActivate(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.UnsafeNativeMethods.IntDestroyWindow(HandleRef hWnd)\r\n   at System.Windows.Forms.UnsafeNativeMethods.IntDestroyWindow(HandleRef hWnd)\r\n   at System.Windows.Forms.UnsafeNativeMethods.DestroyWindow(HandleRef hWnd)\r\n   at System.Windows.Forms.NativeWindow.DestroyHandle()\r\n   at System.Windows.Forms.Timer.TimerNativeWindow.StopTimer(Boolean destroyHwnd, IntPtr hWnd)\r\n   at System.Windows.Forms.Timer.set_Enabled(Boolean value)\r\n   … redacted application-specific methods …\r\n   at System.Windows.Forms.ToolStripItem.RaiseEvent(Object key, EventArgs e)\r\n   at System.Windows.Forms.ToolStripMenuItem.OnClick(EventArgs e)\r\n   at System.Windows.Forms.ToolStripItem.HandleClick(EventArgs e)\r\n   at System.Windows.Forms.ToolStripItem.HandleMouseUp(MouseEventArgs e)\r\n   at System.Windows.Forms.ToolStrip.OnMouseUp(MouseEventArgs mea)\r\n   at System.Windows.Forms.ToolStripDropDown.OnMouseUp(MouseEventArgs mea)\r\n   at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.ToolStrip.WndProc(Message& m)\r\n   at System.Windows.Forms.ToolStripDropDown.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)\r\n   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)\r\n   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(IntPtr dwComponentID, Int32 reason, Int32 pvLoopData)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)\r\n   … redacted application-specific methods …\r\n```\r\n\r\nAt this point, TimerNativeWindow._timerID was zero because KillTimer had finished, and NativeWindow.Handle was nonzero because DestroyWindow had not yet finished.\r\n\r\nWhen the application handled the Control.GotFocus event, it wanted to restart the timer from the previously configured interval. It assigned Timer.Enabled = false and then Timer.Enabled = true. After these assignments, both TimerNativeWindow._timerID and NativeWindow.Handle were nonzero. The Control.GotFocus event handler then returned, and NativeWindow.Callback finished handling the WM_ACTIVATE message.\r\n\r\nNativeWindow.Callback then received the 0x2 (WM_DESTROY) and 0x82 (WM_NCDESTROY) messages. WM_NCDESTROY caused it to call ReleaseHandle(false), which zeroed NativeWindow.Handle but did not change TimerNativeWindow._timerID. The TimerNativeWindow was now in an invalid state as NativeWindow.Handle was zero but TimerNativeWindow._timerID was nonzero. Finally, Timer.set_Enabled returned and the TimerNativeWindow was left in the invalid state.\r\n\r\nLater, the application attempted to restart the timer again, by setting Timer.Enabled = false and then Timer.Enabled = true. This however had no effect:\r\n\r\n- Assigning Timer.Enabled = false had no effect because TimerNativeWindow.StopTimer detected that Handle was zero.\r\n- Assigning Timer.Enabled = true had no effect because TimerNativeWindow.StartTimer detected that _timerID was not zero.\r\n\r\nThe timer was thus irreversibly stuck.\r\n\r\n**Expected behavior:**\r\nEither prevent the timer from getting stuck if it is reentrantly disabled and enabled, or at least make the timer work again if the application assigns Timer.Enabled = true after the reentrancy has finished.\r\n\r\n**Minimal repro:**\r\nCurrently no repro, because I don't know how to cause NativeWindow.Callback to receive a WM_ACTIVATE message while DestroyWindow is destroying the message-only window of the timer.","Url":"https://github.com/dotnet/winforms/issues/6779","RelatedDescription":"Open issue \"System.Windows.Forms.Timer got stuck after being disabled and enabled reentrantly\" (#6779)"},{"Id":"1156062570","IsPullRequest":true,"CreatedAt":"2022-03-02T00:44:01","Actor":"dreddy-work","Number":"6778","RawContent":null,"Title":"Fixing Anchor Info calculations.","State":"open","Body":"Fixes #5774\r\nUpdating `AnchoriInfo `is only needed when control is ready for layout. `InitLayoutCore()` does call `UpdateAnchorInfo()`.\r\nAt the least, we are checking if control is parented before updating `AnchorInfo`. This helps avoid calculating\r\n`AnchorInfo `with default initial values of the Control. They are always overridden when layout happens.\r\n\r\nWe have one other issue in the `AnchorInfo `calculations that is being investigated but this change will indirectly fix the #5774.\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6778)","Url":"https://github.com/dotnet/winforms/pull/6778","RelatedDescription":"Open PR \"Fixing Anchor Info calculations.\" (#6778)"},{"Id":"1155730258","IsPullRequest":true,"CreatedAt":"2022-03-01T22:57:09","Actor":"vseanreesermsft","Number":"6776","RawContent":null,"Title":"Update branding to 5.0.16","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6776)","Url":"https://github.com/dotnet/winforms/pull/6776","RelatedDescription":"Closed or merged PR \"Update branding to 5.0.16\" (#6776)"},{"Id":"1155740005","IsPullRequest":true,"CreatedAt":"2022-03-01T22:56:38","Actor":"vseanreesermsft","Number":"6777","RawContent":null,"Title":"Update branding to 6.0.4","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6777)","Url":"https://github.com/dotnet/winforms/pull/6777","RelatedDescription":"Closed or merged PR \"Update branding to 6.0.4\" (#6777)"},{"Id":"1150188113","IsPullRequest":true,"CreatedAt":"2022-03-01T18:23:31","Actor":"SergeySmirnov-Akvelon","Number":"6762","RawContent":null,"Title":"Fixing a JAWS exception in a PropertyGrid (port to 6.0)","State":"closed","Body":"Fixes #6704\r\n\r\n## Proposed changes\r\n- The issue is reproduced because for `FragmentRoot` we return `PropertyGridView.AccessibilityObject` and not `PropertyGrid.AccessibilityObject`.\r\n- Now `FragmentRoot` returns `PropertyGrid.AccessibilityObject`. This matches the behavior of other accessibility objects in the `PropertyGrid`.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n**Before fix:**\r\n![154419615-f42458cc-c068-4610-94a3-61cfb5235bf8](https://user-images.githubusercontent.com/23376742/155302428-02940f8d-e32a-4116-9d88-efb009150fa1.gif)\r\n\r\n**After fix:**\r\n![Issue-6704](https://user-images.githubusercontent.com/23376742/155302458-89a0b890-d702-404e-ad7c-52feee355cb6.gif)\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- CTI team\r\n- Unit-tests\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- JAWS\r\n- NVDA\r\n- Narrator\r\n- Accessibility Insights\r\n- Inspect \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19044.1466]\r\n- .NET Core SDK: 6.0.2\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6747)\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6762)","Url":"https://github.com/dotnet/winforms/pull/6762","RelatedDescription":"Closed or merged PR \"Fixing a JAWS exception in a PropertyGrid (port to 6.0)\" (#6762)"},{"Id":"1153380074","IsPullRequest":false,"CreatedAt":"2022-03-01T16:48:31","Actor":"oyundev","Number":"6771","RawContent":null,"Title":"VS 2022 Windows Forms Designer gives 'Access is denied' error when using .Net 6.0 template","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version:  **.NET SDKs installed: 6.0.200**\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?:  **No**\r\n<!-- Yes / No -->\r\n**Problem description:**\r\n```\r\nVS2022 Windows Forms designer giving 'Access is denied' error when \r\nI try to open form designer in a fresh project created by .Net 6.0 LTS Forms template. \r\nInterestingly, if I run VS with administrative rights, this error does not occur. \r\nThis problem does not occur when using projects created by \r\n.Net Framework 4.8 template or WPF template.\r\n```\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\n<!--\r\n    Provide details on expected behavior with screenshots/GIF, where ever possible.\r\n -->\r\n```\r\nI assume this is not the expected behaviour.\r\n```\r\n**Minimal repro:**\r\n<!--\r\n    Provide step by step guide to repro this issue.  Incase repro steps are complex, It would be helpful if \r\n    you attach a GIF with repro actions. Attaching a sample app to repro the issue will help speed up the \r\n    resolution. \r\n -->\r\n![vserr](https://user-images.githubusercontent.com/44315345/155897994-c757bd4c-ea79-4ed4-a683-e3923c8cdc4b.png)\r\n![vstmplt](https://user-images.githubusercontent.com/44315345/155897995-e58c98a5-f890-4d0b-a0fd-902ff2ef2b91.png)\r\n\r\n## Stack trace\r\n```\r\nAccess is denied    \r\nInstances of this error (1)  \r\n \r\n1.   Hide Call Stack \r\n \r\nat System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)\r\nat Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.LaunchServerProcess(UInt32 lcid, Boolean hideMainWindow, Boolean enableCoreHostTrace, Boolean autoAttachDebugger, String pipeName)\r\nat Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.d__25.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.DotNet.DesignTools.Client.Host.ServerHostFactory.d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.d__28.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.d__28.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.<>c__DisplayClass24_1.<<-ctor>b__1>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.d__26.MoveNext()  \r\n```\r\n \r\n\r\n## Version \r\n```\r\nMicrosoft Visual Studio Community 2022 (64-bit) \r\nVersion 17.1.0, Windows 11 Pro (22000.527)\r\n```\r\n\r\n## .csproj\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>WinExe</OutputType>\r\n    <TargetFramework>net6.0-windows</TargetFramework>\r\n    <Nullable>enable</Nullable>\r\n    <UseWindowsForms>true</UseWindowsForms>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n##dotnet --info\r\n```\r\nC:\\>dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.200\r\n Commit:    4c30de7899\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22000\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.200\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.2\r\n  Commit:  839cdfb0ec\r\n\r\n.NET SDKs installed:\r\n  6.0.200 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n","Url":"https://github.com/dotnet/winforms/issues/6771","RelatedDescription":"Closed issue \"VS 2022 Windows Forms Designer gives 'Access is denied' error when using .Net 6.0 template\" (#6771)"},{"Id":"1154877806","IsPullRequest":true,"CreatedAt":"2022-03-01T15:35:40","Actor":"dotnet-maestro[bot]","Number":"6773","RawContent":null,"Title":"[release/7.0-preview2] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4060a9ae-51b9-48e3-fc71-08d9f4e8def7)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 4060a9ae-51b9-48e3-fc71-08d9f4e8def7\r\n- **Build**: 20220228.3\r\n- **Date Produced**: March 1, 2022 4:19:35 AM UTC\r\n- **Commit**: 190a47ee2f34056a6127700142c57d7a967d6bfd\r\n- **Branch**: refs/heads/release/7.0-preview2\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22122.4 to 7.0.0-preview.2.22128.3][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/1615de6...190a47e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4060a9ae-51b9-48e3-fc71-08d9f4e8def7)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6773)","Url":"https://github.com/dotnet/winforms/pull/6773","RelatedDescription":"Closed or merged PR \"[release/7.0-preview2] Update dependencies from dotnet/runtime\" (#6773)"},{"Id":"1155366906","IsPullRequest":true,"CreatedAt":"2022-03-01T13:53:31","Actor":"SergeySmirnov-Akvelon","Number":"6775","RawContent":null,"Title":"Fixed visibility of selected ToolStripButtons in High Contrast mode","State":"open","Body":"Fixes #5676\r\n\r\n## Proposed changes\r\n- Added logic for drawing dotted borders for selected `ToolStripButton` in contrast mode.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n**Before:**\r\nSystem render mode:\r\n![image](https://user-images.githubusercontent.com/23376742/156178360-9c1033ea-10b5-40a4-9bc9-68d6340ce128.png)\r\n\r\nProfessional render mode:\r\n![image](https://user-images.githubusercontent.com/23376742/156178376-2107e9e1-029d-4628-bf4c-83a301f6a5b3.png)\r\n\r\n**After:**\r\nSystem render mode:\r\n![image](https://user-images.githubusercontent.com/23376742/156180869-7febda18-7ae1-4e76-b7b1-53e5d534383e.png)\r\n\r\nProfessional render mode:\r\n![image](https://user-images.githubusercontent.com/23376742/156180609-bc15f60b-0cd8-4fce-9a56-c7af28156d3f.png)\r\n\r\n## Regression\r\n\r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- Manual\r\n- CTI team\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19044.1466]\r\n- . NET Core SDK: 7.0.0-preview.3.22123.2\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6775)","Url":"https://github.com/dotnet/winforms/pull/6775","RelatedDescription":"Open PR \"Fixed visibility of selected ToolStripButtons in High Contrast mode\" (#6775)"},{"Id":"1154954855","IsPullRequest":true,"CreatedAt":"2022-03-01T07:07:04","Actor":"gpetrou","Number":"6774","RawContent":null,"Title":"Enable nullability in ImageList","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in ImageList.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6774)","Url":"https://github.com/dotnet/winforms/pull/6774","RelatedDescription":"Open PR \"Enable nullability in ImageList\" (#6774)"},{"Id":"1154662983","IsPullRequest":true,"CreatedAt":"2022-02-28T23:55:54","Actor":"dotnet-bot","Number":"6772","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1636672","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6772)","Url":"https://github.com/dotnet/winforms/pull/6772","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1636672\" (#6772)"},{"Id":"1150532910","IsPullRequest":true,"CreatedAt":"2022-02-28T18:44:17","Actor":"dotnet-bot","Number":"6765","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1634986","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6765)","Url":"https://github.com/dotnet/winforms/pull/6765","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1634986\" (#6765)"},{"Id":"1153076278","IsPullRequest":true,"CreatedAt":"2022-02-28T18:36:44","Actor":"gpetrou","Number":"6768","RawContent":null,"Title":"Enable nullability in FlatButtonAppearance","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in FlatButtonAppearance.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6768)","Url":"https://github.com/dotnet/winforms/pull/6768","RelatedDescription":"Closed or merged PR \"Enable nullability in FlatButtonAppearance\" (#6768)"},{"Id":"1153087378","IsPullRequest":true,"CreatedAt":"2022-02-28T18:35:45","Actor":"gpetrou","Number":"6769","RawContent":null,"Title":"Enable nullability in FormCollection","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in FormCollection.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6769)","Url":"https://github.com/dotnet/winforms/pull/6769","RelatedDescription":"Closed or merged PR \"Enable nullability in FormCollection\" (#6769)"},{"Id":"1149979087","IsPullRequest":true,"CreatedAt":"2022-02-28T01:42:05","Actor":"RussKie","Number":"6759","RawContent":null,"Title":"Generate SBOM manifest","State":"closed","Body":"Relates to https://github.com/dotnet/arcade/issues/8477\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6759)","Url":"https://github.com/dotnet/winforms/pull/6759","RelatedDescription":"Closed or merged PR \"Generate SBOM manifest\" (#6759)"},{"Id":"1153245091","IsPullRequest":true,"CreatedAt":"2022-02-27T13:44:15","Actor":"dotnet-maestro[bot]","Number":"6770","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220224.4\r\n- **Date Produced**: February 24, 2022 11:36:45 PM UTC\r\n- **Commit**: f7136626d0109856df867481219eb7366951985d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22124.1 to 7.0.0-beta.22124.4][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22124.1 to 7.0.0-beta.22124.4][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22124.1 to 7.0.0-beta.22124.4][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22124.1 to 7.0.0-beta.22124.4][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22124.1 to 7.0.0-beta.22124.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22124.1 to 7.0.0-beta.22124.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/eac1a3f...f713662\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6770)","Url":"https://github.com/dotnet/winforms/pull/6770","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6770)"},{"Id":"1151791838","IsPullRequest":true,"CreatedAt":"2022-02-26T13:08:08","Actor":"dotnet-maestro[bot]","Number":"6767","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220302.5\r\n- **Date Produced**: March 3, 2022 5:20:49 AM UTC\r\n- **Commit**: 73471b51fb55198bc089f342cd75e077cc4762a8\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Text.Json**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22123.2 to 7.0.0-preview.3.22152.5][6]\r\n\r\n[6]: https://github.com/dotnet/runtime/compare/05920e1...73471b5\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6767)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/6767","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/runtime\" (#6767)"},{"Id":"1150917546","IsPullRequest":false,"CreatedAt":"2022-02-25T22:01:46","Actor":"heng-liu","Number":"6766","RawContent":null,"Title":"dotnet new --langVersion option is not respected","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nWhen running `dotnet new winforms -n Winforms --langVersion 7.3`, both the `<Nullable>enable</Nullable>` and `<LangVersion>7.3</LangVersion>` are added into the project file. Then the project will fail the build as the two conflict. \r\n\r\n**Expected behavior:**\r\n<!--\r\n    Provide details on expected behavior with screenshots/GIF, where ever possible.\r\n -->\r\nBuild is successful after running `dotnet new winforms -n Winforms --langVersion 7.3`.\r\n**Minimal repro:**\r\n<!--\r\n    Provide step by step guide to repro this issue.  Incase repro steps are complex, It would be helpful if \r\n    you attach a GIF with repro actions. Attaching a sample app to repro the issue will help speed up the \r\n    resolution. \r\n -->\r\n1. Install .NET SDK 6\r\n2. Run `dotnet new winforms -n Winforms --langVersion 7.3`\r\n3. Run `dotnet build` to build the new project Winforms.","Url":"https://github.com/dotnet/winforms/issues/6766","RelatedDescription":"Open issue \"dotnet new --langVersion option is not respected\" (#6766)"},{"Id":"1150425908","IsPullRequest":true,"CreatedAt":"2022-02-25T13:44:50","Actor":"dotnet-maestro[bot]","Number":"6764","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220224.1\r\n- **Date Produced**: February 24, 2022 5:22:02 PM UTC\r\n- **Commit**: eac1a3f1eb7404c0438664381b58d7238600aafc\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22123.1 to 7.0.0-beta.22124.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22123.1 to 7.0.0-beta.22124.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22123.1 to 7.0.0-beta.22124.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22123.1 to 7.0.0-beta.22124.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22123.1 to 7.0.0-beta.22124.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22123.1 to 7.0.0-beta.22124.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/3bb832d...eac1a3f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6764)","Url":"https://github.com/dotnet/winforms/pull/6764","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6764)"},{"Id":"1150293182","IsPullRequest":false,"CreatedAt":"2022-02-25T10:35:15","Actor":"SergeySmirnov-Akvelon","Number":"6763","RawContent":null,"Title":"The ToolStripDropDownMenu is displayed incorrectly in the UIA tree","State":"open","Body":".NET Core Version: \r\n- 7.0.0-preview.3.22123.2\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\n- Yes\r\n\r\n**Repro steps:**\r\n1. Create a `Form` with a `ToolStrip`.\r\n2. Add `ToolStripDropDownButton` to `ToolStrip`.\r\n3. Add multiple `ToolStripItems` to `ToolStripDropDownMenu`.\r\n4. Run the application.\r\n5. Run Inspect.\r\n6. Open the `ToolStripDropDownMenu` and hover over the `ToolStripItem`\r\n\r\n**Actual behavior:**\r\nThe `ToolStripDropDownMenu` returns `Form` as `Parent`\r\n![image](https://user-images.githubusercontent.com/23376742/155700408-6fb5818f-73e5-4444-bff7-90c6256e59a1.png)\r\n\r\n**Expected behavior:**\r\nThe `ToolStripDropDownMenu` should return `ToolStripDropDownButton` as `Parent`.","Url":"https://github.com/dotnet/winforms/issues/6763","RelatedDescription":"Open issue \"The ToolStripDropDownMenu is displayed incorrectly in the UIA tree\" (#6763)"},{"Id":"1150103840","IsPullRequest":true,"CreatedAt":"2022-02-25T06:48:11","Actor":"ArtemTatarinov","Number":"6761","RawContent":null,"Title":"Removing empty AccessKey properties which appeared after refactoring","State":"open","Body":"Fixes #6760\r\n\r\n## Proposed changes\r\n- `AccessibleObject` returns just `KeyboartShortcut` without additional conditions, so if it's `null`, the `null` value will be returned, not the `string.Empty` value like in the previous PR\r\n- Behavior for accessible objects which return `string.Empty` is restored, so there will be no changes for them\r\n\r\n## Customer Impact\r\n- Accessibility tools will have the same behavior as before refactoring\r\n\r\n## Regression? \r\n- Yes, from PR #6640\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- Manual (viewed properties with the Inspect tool)\r\n- Unit test\r\n- CTI testing\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19043.1526]\r\n- .NET 7.0.0-preview-3.22123.2\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6761)","Url":"https://github.com/dotnet/winforms/pull/6761","RelatedDescription":"Open PR \"Removing empty AccessKey properties which appeared after refactoring\" (#6761)"},{"Id":"1150066761","IsPullRequest":false,"CreatedAt":"2022-02-25T05:42:59","Actor":"ArtemTatarinov","Number":"6760","RawContent":null,"Title":"Empty AccessKey values appeared after refactoring","State":"open","Body":"* .NET Core Version: 7.0\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\nAfter PR #6640 was merged some accessible objects have received the empty `AccessKey` values at the accessibility tools (like `Inspect`). We discussed it with the team and considered it as a regression. Their behavior should be restored as it were before this PR.","Url":"https://github.com/dotnet/winforms/issues/6760","RelatedDescription":"Open issue \"Empty AccessKey values appeared after refactoring\" (#6760)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-03-04T03:30:30.8163404Z","RunDurationInMilliseconds":518}