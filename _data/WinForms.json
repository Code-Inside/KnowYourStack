{"Data":{"GitHub":{"Issues":[{"Id":"1121343571","IsPullRequest":true,"CreatedAt":"2022-02-02T02:48:15","Actor":"RussKie","Number":"6595","RawContent":null,"Title":"Fix NRE in ToolStripItem.InvalidateItemLayout","State":"closed","Body":"Fixes #6535\r\n\r\n## Proposed changes\r\n\r\nPR #4650 introduced a refresh of the `MdiControlStrip` icon when a maximized MDI child form's icon changes. That surfaced a bug ultimately resulting in a `NullReferenceException`. The fix is trivial, with most work spent understanding the root cause and proving the fix to be correct.\r\n\r\nThe NRE was triggered when a maximized MDI child form's icon changed if the new icon's size caused the `MdiControlStip`'s size to change. The Rube Goldberg-like chain of events went like this:\r\n\r\n- The `ToolStripItem` containing the icon would invalidate its layout\r\n- This would trigger a call to `LayoutTransaction.DoLayout` on the item's owner (the `MdiControlStrip`)\r\n- The `MdiControlStrip` would resize\r\n- The area available to the maximized MDI child form would change due to `MdiControlStrip` taking up more/less space\r\n- The MDI child would receive a `WM_SIZE` message\r\n- The MDI child would call `MdiParentInternal.UpdateMdiControlStrip` in `Form.WmSize`\r\n- The MDI parent would dispose the current `MdiControlStip` and create a new one (it does this unconditionally)\r\n- The disposed `MdiControlStrip` would dispose all of its associated `Items` and clear its `Items` property\r\n- Clearing `Items` would set each `ToolStripItem.Owner` to `null`\r\n- The stack would unwind and the `ToolStripItem` would attempt to call `Owner.Invalidate` with `Owner` being a `null` reference\r\n\r\nBecause the `ToolStripItem` and its former parent `ToolStrip` are both disposed at this point, we can just use a null conditional on `Owner.Invalidate`.\r\n\r\nI had considered checking `ToolStripItem.IsDisposed` as a possible alternative fix, but that just indirectly verifies the condition we are concerned about. `ToolStripItem.IsDisposed` will be `true` and `Owner` will be `null`. Might as well check `Owner` directly since that's the thing that will trigger the NRE.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nCustomer should not experience an NRE when changing the icon of a maximized MDI child when doing so results in a size change of the `MdiControlStrip` containing it\r\n\r\n## Regression?\r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit test added. Fails pre-fix and passes post-fix\r\n\r\n(cherry picked from commit 5cb9c3ba04d834c7f6fa6f386d1c45ce1b25c100)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6595)","Url":"https://github.com/dotnet/winforms/pull/6595","RelatedDescription":"Closed or merged PR \"Fix NRE in ToolStripItem.InvalidateItemLayout\" (#6595)"},{"Id":"1121378533","IsPullRequest":false,"CreatedAt":"2022-02-02T01:00:55","Actor":"RussKie","Number":"6596","RawContent":null,"Title":"❓ Survey: Repo contribution experience 2022","State":"open","Body":"A couple years ago we surveyed you the members of the community in this repo to learn how we were doing as maintainers.\r\n\r\nIt's time to repeat the same survey. Whether you've been involved for years or you're relatively new please tell us about your experience participating and contributing to the project. It should only take a few minutes, and you can answer for up to 3 repos:\r\nhttps://www.surveymonkey.com/r/8QTQTGJ?Source=winforms\r\n","Url":"https://github.com/dotnet/winforms/issues/6596","RelatedDescription":"Open issue \"❓ Survey: Repo contribution experience 2022\" (#6596)"},{"Id":"1121056566","IsPullRequest":true,"CreatedAt":"2022-02-02T00:51:00","Actor":"gpetrou","Number":"6591","RawContent":null,"Title":"Enable nullability in PrintDialog","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in PrintDialog.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6591)","Url":"https://github.com/dotnet/winforms/pull/6591","RelatedDescription":"Closed or merged PR \"Enable nullability in PrintDialog\" (#6591)"},{"Id":"1121094833","IsPullRequest":true,"CreatedAt":"2022-02-02T00:41:16","Actor":"gpetrou","Number":"6592","RawContent":null,"Title":"Enable nullability in DetailsButton","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in DetailsButton.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6592)","Url":"https://github.com/dotnet/winforms/pull/6592","RelatedDescription":"Closed or merged PR \"Enable nullability in DetailsButton\" (#6592)"},{"Id":"1119868892","IsPullRequest":true,"CreatedAt":"2022-02-02T00:12:18","Actor":"jbhensley","Number":"6588","RawContent":null,"Title":"Fix NRE in ToolStripItem.InvalidateItemLayout","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #6535\r\n\r\n\r\n## Proposed changes\r\n\r\nPR #4650 introduced a refresh of the `MdiControlStrip` icon when a maximized MDI child form's icon changes. That surfaced a bug ultimately resulting in a `NullReferenceException`. The fix is trivial, with most work spent understanding the root cause and proving the fix to be correct.\r\n\r\nThe NRE was triggered when a maximized MDI child form's icon changed if the new icon's size caused the `MdiControlStip`'s size to change. The Rube Goldberg-like chain of events went like this:\r\n\r\n- The `ToolStripItem` containing the icon would invalidate its layout\r\n- This would trigger a call to `LayoutTransaction.DoLayout` on the item's owner (the `MdiControlStrip`)\r\n- The `MdiControlStrip` would resize\r\n- The area available to the maximized MDI child form would change due to `MdiControlStrip` taking up more/less space\r\n- The MDI child would receive a `WM_SIZE` message\r\n- The MDI child would call `MdiParentInternal.UpdateMdiControlStrip` in `Form.WmSize`\r\n- The MDI parent would dispose the current `MdiControlStip` and create a new one (it does this unconditionally)\r\n- The disposed `MdiControlStrip` would dispose all of its associated `Items` and clear its `Items` property\r\n- Clearing `Items` would set each `ToolStripItem.Owner` to `null`\r\n- The stack would unwind and the `ToolStripItem` would attempt to call `Owner.Invalidate` with `Owner` being a `null` reference\r\n\r\nBecause the `ToolStripItem` and its former parent `ToolStrip` are both disposed at this point, we can just use a null conditional on `Owner.Invalidate`. \r\n\r\nI had considered checking `ToolStripItem.IsDisposed` as a possible alternative fix, but that just indirectly verifies the condition we are concerned about. `ToolStripItem.IsDisposed` will be `true` and `Owner` will be `null`. Might as well check `Owner` directly since that's the thing that will trigger the NRE.\r\n\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nCustomer should not experience an NRE when changing the icon of a maximized MDI child when doing so results in a size change of the `MdiControlStrip` containing it\r\n\r\n## Regression? \r\n\r\n- Yes \r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit test added. Fails pre-fix and passes post-fix\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6588)","Url":"https://github.com/dotnet/winforms/pull/6588","RelatedDescription":"Closed or merged PR \"Fix NRE in ToolStripItem.InvalidateItemLayout\" (#6588)"},{"Id":"1121167487","IsPullRequest":true,"CreatedAt":"2022-02-01T23:24:32","Actor":"vseanreesermsft","Number":"6593","RawContent":null,"Title":"Update branding to 5.0.15","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6593)","Url":"https://github.com/dotnet/winforms/pull/6593","RelatedDescription":"Closed or merged PR \"Update branding to 5.0.15\" (#6593)"},{"Id":"1121167644","IsPullRequest":true,"CreatedAt":"2022-02-01T21:29:52","Actor":"vseanreesermsft","Number":"6594","RawContent":null,"Title":"Update branding to 6.0.3","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6594)","Url":"https://github.com/dotnet/winforms/pull/6594","RelatedDescription":"Closed or merged PR \"Update branding to 6.0.3\" (#6594)"},{"Id":"1119409348","IsPullRequest":true,"CreatedAt":"2022-02-01T18:38:07","Actor":"dotnet-maestro[bot]","Number":"6584","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220131.6\r\n- **Date Produced**: February 1, 2022 8:20:39 AM UTC\r\n- **Commit**: 349f83a5fb100a1bfc4fdedcdc596b4dea271777\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22079.4 to 7.0.0-preview.2.22081.6][2]\r\n\r\n[2]: https://github.com/dotnet/runtime/compare/ce15dc7...349f83a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6584)\r\n","Url":"https://github.com/dotnet/winforms/pull/6584","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6584)"},{"Id":"1117670667","IsPullRequest":true,"CreatedAt":"2022-02-01T11:27:57","Actor":"DmitryGorokhov","Number":"6571","RawContent":null,"Title":"Remove using empty base AO ctor","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nResolve comment from pr #6432 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Remove call empty ctor of Accessible Object class in inherited classes.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- No\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- No\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6571)","Url":"https://github.com/dotnet/winforms/pull/6571","RelatedDescription":"Closed or merged PR \"Remove using empty base AO ctor\" (#6571)"},{"Id":"1119790219","IsPullRequest":true,"CreatedAt":"2022-02-01T10:57:37","Actor":"gpetrou","Number":"6587","RawContent":null,"Title":"Enable nullability in ErrorProvider accessible objects","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in ErrorProvider accessible objects.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6587)","Url":"https://github.com/dotnet/winforms/pull/6587","RelatedDescription":"Closed or merged PR \"Enable nullability in ErrorProvider accessible objects\" (#6587)"},{"Id":"1120333881","IsPullRequest":false,"CreatedAt":"2022-02-01T07:48:55","Actor":"ArtemTatarinov","Number":"6590","RawContent":null,"Title":"Code of the DateTimePicker.Text doesn't match its description in documentation","State":"open","Body":"* .NET Core Version: From 3.0 to 7.0\r\n* Have you experienced this same bug with .NET Framework?: Yes, from 2.0 to 4.8\r\n\r\n**Problem description:**\r\n`Text` property of the `DateTimePicker` class returns the value of the `Text` property of the base class (i.e. `Control`):\r\n![image](https://user-images.githubusercontent.com/87859299/151927126-aa0f5ddf-a996-47f0-b2e2-1a56836ab998.png)\r\n\r\nYet the documentation says that `Text` is an equivalent of the formatted `Value` property (https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.datetimepicker.text):\r\n![image](https://user-images.githubusercontent.com/87859299/151927841-6770fea0-3355-4ec2-8764-5e34ca5af292.png)\r\n\r\n\r\nThis behavior is the same for all .Net versions: from .Net Framework 2.0 to .Net Core 7.0, and also documentation says the opposite thing for all of these versions. The `Text` property isn't visible at the Visual Studio designer, yet it's visible at the IntelliSense, because it has `public` modifier.\r\n\r\nThis is how it looks while debugging:\r\n![image](https://user-images.githubusercontent.com/87859299/151927903-3a631906-01f7-4bc0-85ab-c040473482f6.png)\r\n\r\nLooks like either the code or the documentation should be changed to be consistent.\r\n","Url":"https://github.com/dotnet/winforms/issues/6590","RelatedDescription":"Open issue \"Code of the DateTimePicker.Text doesn't match its description in documentation\" (#6590)"},{"Id":"1120279159","IsPullRequest":true,"CreatedAt":"2022-02-01T06:19:09","Actor":"gpetrou","Number":"6589","RawContent":null,"Title":"Replace foreground with foregroundWindow in SendAsync","State":"open","Body":"## Proposed changes\r\n\r\n- Looking at SendAsync code, it looks like `foreground` is never used and `foregroundWindow` is always `IntPtr.Zero`. I assume this was not meant to be like that. Alternatively, we could completely remove the relevant code if we don't want `SetForegroundWindow` to be called in `finally`.\r\n- Unfortunately, https://github.com/dotnet/runtime/issues/64568 is preventing me from taking a deeper look right now, so I am setting this to draft for the time being.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6589)","Url":"https://github.com/dotnet/winforms/pull/6589","RelatedDescription":"Open PR \"Replace foreground with foregroundWindow in SendAsync\" (#6589)"},{"Id":"1118445321","IsPullRequest":true,"CreatedAt":"2022-01-31T22:54:55","Actor":"gpetrou","Number":"6577","RawContent":null,"Title":"Enable nullability in ListControl","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in ListControl.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6577)","Url":"https://github.com/dotnet/winforms/pull/6577","RelatedDescription":"Closed or merged PR \"Enable nullability in ListControl\" (#6577)"},{"Id":"1119600663","IsPullRequest":true,"CreatedAt":"2022-01-31T15:46:17","Actor":"gpetrou","Number":"6585","RawContent":null,"Title":"Enable nullability in various ToolStrip accessible objects","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in various ToolStrip accessible objects.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6585)","Url":"https://github.com/dotnet/winforms/pull/6585","RelatedDescription":"Open PR \"Enable nullability in various ToolStrip accessible objects\" (#6585)"},{"Id":"1119408325","IsPullRequest":true,"CreatedAt":"2022-01-31T13:09:27","Actor":"dotnet-maestro[bot]","Number":"6583","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220130.1\r\n- **Date Produced**: January 30, 2022 2:37:04 PM UTC\r\n- **Commit**: 4d6406fa2e84c8516a338694be3a4097e6e1f104\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22078.2 to 7.0.0-beta.22080.1][2]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22078.2 to 7.0.0-beta.22080.1][2]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22078.2 to 7.0.0-beta.22080.1][2]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22078.2 to 7.0.0-beta.22080.1][2]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22078.2 to 7.0.0-beta.22080.1][2]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22078.2 to 7.0.0-beta.22080.1][2]\r\n\r\n[2]: https://github.com/dotnet/arcade/compare/9b22f49...4d6406f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6583)\r\n","Url":"https://github.com/dotnet/winforms/pull/6583","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/arcade\" (#6583)"},{"Id":"1119359613","IsPullRequest":false,"CreatedAt":"2022-01-31T12:21:07","Actor":"ArtemTatarinov","Number":"6582","RawContent":null,"Title":"Move more properties from the `GetPropertyValue` method to the base class","State":"open","Body":"Refactor properties `IsPasswordPropertyId`, `FrameworkIdPropertyId`, `HelpTextPropertyId` and `AccessKeyPropertyId` the same way as in PRs: #5745, #6429.\r\n\r\nOriginal issue:\r\n- #5494\r\n\r\nRelated issues:\r\n- #6103\r\n- #6236\r\n- #6324","Url":"https://github.com/dotnet/winforms/issues/6582","RelatedDescription":"Open issue \"Move more properties from the `GetPropertyValue` method to the base class\" (#6582)"},{"Id":"1118307488","IsPullRequest":true,"CreatedAt":"2022-01-31T04:52:19","Actor":"kant2002","Number":"6575","RawContent":null,"Title":"Prevent accidental changing of IID.IAccessible","State":"closed","Body":"I cannot make `IID.IAccessible` as auto-property, since I have to pass that value by reference. I prefer to mark function as `in` instead of `ref`\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6575)","Url":"https://github.com/dotnet/winforms/pull/6575","RelatedDescription":"Closed or merged PR \"Prevent accidental changing of IID.IAccessible\" (#6575)"},{"Id":"1116723221","IsPullRequest":true,"CreatedAt":"2022-01-31T04:04:34","Actor":"kirsan31","Number":"6564","RawContent":null,"Title":"Speedup BeginInvoke a little.","State":"closed","Body":"## Proposed changes\r\n\r\nWhile watching how `BeginInvoke` is implemented, I noticed that `MarshaledInvoke` in the case of an asynchronous call (`BeginInvoke`) always makes two extra Win32 calls. Why call extra code if it's not needed?\r\nSorry if this doesn't meet your [contribution bar](https://github.com/dotnet/winforms/blob/main/CONTRIBUTING.md#contribution-bar) :blush:\r\n\r\n## Customer Impact\r\n\r\n`BeginInvoke` will be _slightly_ faster.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal, if any.\r\n\r\n\r\n## Test methodology\r\n\r\nExisting tests.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6564)","Url":"https://github.com/dotnet/winforms/pull/6564","RelatedDescription":"Closed or merged PR \"Speedup BeginInvoke a little.\" (#6564)"},{"Id":"1118455192","IsPullRequest":true,"CreatedAt":"2022-01-31T02:06:47","Actor":"gpetrou","Number":"6578","RawContent":null,"Title":"Enable nullability in UpDownButtonsAccessibleObject","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in UpDownButtonsAccessibleObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6578)","Url":"https://github.com/dotnet/winforms/pull/6578","RelatedDescription":"Closed or merged PR \"Enable nullability in UpDownButtonsAccessibleObject\" (#6578)"},{"Id":"1118529524","IsPullRequest":true,"CreatedAt":"2022-01-30T23:25:48","Actor":"dotnet-maestro[bot]","Number":"6579","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220129.4\r\n- **Date Produced**: January 30, 2022 6:54:30 AM UTC\r\n- **Commit**: ce15dc7d1416ce8ebc4cffe7ea8c51b071f2fd3c\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22078.9 to 7.0.0-preview.2.22079.4][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/874d6a3...ce15dc7\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6579)","Url":"https://github.com/dotnet/winforms/pull/6579","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6579)"},{"Id":"1118698168","IsPullRequest":true,"CreatedAt":"2022-01-30T20:37:56","Actor":"kirsan31","Number":"6580","RawContent":null,"Title":"Auto scale explicitly specified font as per the Settings display text scale.","State":"open","Body":"This is a draft implementation of auto scaling explicitly specified control font as per the Settings display text scale. As already done with app default font.\r\n\r\nFixes #3263 implicitly.\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add public enumeration `FontAutoScale`:\r\n```cs\r\n/// <summary>\r\n///  Specifies the font auto scaling mode used by a control.\r\n/// </summary>\r\npublic enum FontAutoScale\r\n{\r\n    /// <summary>\r\n    ///  Scale only if control using system font.\r\n    /// </summary>\r\n    SystemOnly,\r\n\r\n    /// <summary>\r\n    ///  Scale if control using system or explicitly specified font.\r\n    /// </summary>\r\n    SystemAndExplicit,\r\n\r\n    /// <summary>\r\n    ///  Font scale according to their parent's scaling mode.\r\n    ///  If there is no parent, this behaves as if <see cref=\"FontAutoScale.SystemOnly\"/> were set.\r\n    /// </summary>\r\n    Inherit\r\n}\r\n```\r\n- Add public property `FontAutoScale` to `Control` class:\r\n```cs\r\n/// <summary>\r\n///  Determines the font auto scaling mode of this control.\r\n/// </summary>\r\npublic FontAutoScale FontAutoScale { get; set; }\r\n```\r\n- Add public property `FontAutoScale` to `Control` class. Not required, but probably desirable:\r\n```cs\r\n/// <summary>\r\n/// Gets the Font that was explicitly set on control by the application. null if the font was not explicitly set.\r\n/// </summary>\r\npublic Font ExplicitFont { get; }\r\n```\r\n\r\n## Customer Impact\r\n\r\nCustomers will be able to use custom fonts without losing the ability to scale using the system font:\r\n![image](https://user-images.githubusercontent.com/17767561/151715293-4bf1358d-aeed-4a18-86b4-f463a249664c.png)\r\n\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Risk of regression is low because we leave the old default behavior (only those controls whose font is not explicitly set are scaled).\r\n- Risk of bugs in new functionality - probably above average.\r\n\r\n\r\n## Screenshots\r\n\r\n### Before (150% text size)\r\n\r\n![old_150](https://user-images.githubusercontent.com/17767561/151715511-a3a3b1a5-5403-4c9b-b569-09af3c957126.png)\r\n\r\n\r\n### After (150% text size)\r\n\r\n![new_150_2](https://user-images.githubusercontent.com/17767561/151716686-a7445103-e3ef-4a6f-8790-5a5c8ad0b302.png)\r\n\r\n\r\n## Test methodology\r\nManual. Testing app (with binary's for simplicity): [FontScale.zip](https://github.com/dotnet/winforms/files/7966815/FontScale.zip)\r\n\r\nTo do.\r\n\r\n## Accessibility testing\r\n\r\nNot necessary - correct me if I'm wrong.\r\n\r\n## To do\r\n- General assessment - is such functionality needed?\r\n- Evaluation of whether I correctly understood everything about HDPI in WinForms.\r\n- Discuss what to do with complex (which may have several different fonts) controls such as `DataGridView`, `ListView`... Without additional implementation in each of them, scaling will work only if one font is specified for the entire control.\r\n- Properties, enums, methods naming and descriptions.\r\n- Testing.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6580)","Url":"https://github.com/dotnet/winforms/pull/6580","RelatedDescription":"Open PR \"Auto scale explicitly specified font as per the Settings display text scale.\" (#6580)"},{"Id":"1118321071","IsPullRequest":true,"CreatedAt":"2022-01-29T20:33:11","Actor":"willibrandon","Number":"6576","RawContent":null,"Title":"Add support for DropTarget drag images and drop descriptions","State":"open","Body":"Allow drop targets to display the drag image while the cursor is over the target and add support for setting drop descriptions.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nA possible implementation approach for #5884.\r\n\r\n\r\n## Proposed changes\r\n\r\n- Keep the scope to just drop targets for now, with support for displaying drag-images and setting drop descriptions.\r\n\r\n- Maintain the current default `DropTarget` behavior. By default, do not display the drag-image and drop description.\r\n\r\n- Add 3 new public DragEventArgs properties; `DropIcon`, `Message`, and `Insert`.\r\n\r\n```csharp\r\nnamespace System.Windows.Forms\r\n{\r\n  public class DragEventArgs : EventArgs\r\n  {\r\n      /// <summary>\r\n      /// Gets or sets the drop description icon type.\r\n      /// </summary>\r\n      public DropIconType DropIcon { get; set; }\r\n  \r\n      /// <summary>\r\n      /// Gets or sets the drop description text such as \"Move to %1\".\r\n      /// </summary>\r\n      /// <remarks>\r\n      /// <para>UI coloring is applied to the text in Insert if used by specifying %1 in Message.</para>\r\n      /// </remarks>\r\n      public string Message { get; set; }\r\n  \r\n      /// <summary>\r\n      /// Gets or sets the drop description text such as \"Documents\" when %1 is specified in Message.\r\n      /// </summary>\r\n      /// <remarks>\r\n      /// <para>UI coloring is applied to the text in Insert if used by specifying %1 in Message.</para>\r\n      /// </remarks>\r\n      public string Insert { get; set; }\r\n  }\r\n}\r\n```\r\n\r\n- Add a new public enumeration; `DropIconType`.\r\n\r\n```csharp\r\nnamespace System.Windows.Forms\r\n{\r\n    /// <summary>\r\n    ///  Specifies the drop description icon type.\r\n    /// </summary>\r\n    public enum DropIconType\r\n    {\r\n        /// <summary>\r\n        /// No drop icon preference; use the default icon.\r\n        /// </summary>\r\n        Invalid = -1,\r\n\r\n        /// <summary>\r\n        /// A red bisected circle such as that found on a \"no smoking\" sign.\r\n        /// </summary>\r\n        None = 0,\r\n\r\n        /// <summary>\r\n        /// A plus sign (+) that indicates a copy operation.\r\n        /// </summary>\r\n        Copy = DragDropEffects.Copy,\r\n\r\n        /// <summary>\r\n        /// An arrow that indicates a move operation.\r\n        /// </summary>\r\n        Move = DragDropEffects.Move,\r\n\r\n        /// <summary>\r\n        /// An arrow that indicates a link.\r\n        /// </summary>\r\n        Link = DragDropEffects.Link,\r\n\r\n        /// <summary>\r\n        /// A tag icon that indicates that the metadata will be changed.\r\n        /// </summary>\r\n        Label = 6,\r\n\r\n        /// <summary>\r\n        /// A yellow exclamation mark that indicates that a problem has been encountered in the operation.\r\n        /// </summary>\r\n        Warning = 7,\r\n\r\n        /// <summary>\r\n        /// Windows 7 and later. Use no drop image.\r\n        /// </summary>\r\n        NoImage = 8\r\n    }\r\n}\r\n```\r\n\r\n- During the DragEnter event, if the application specifies a `DropIconType`, display the drag image and drop description.\r\n\r\n- Add an internal `DragDropHelper` class to help manage the retrieval of the `IDropTargetHelper` interface pointer and expose the methods necessary to display the drag image, and provide methods to get and set the drop description.\r\n\r\n- Add a drag-and-drop functional test form to the _WinformsControlsTest_ project with files for testing drag-and-drop operations.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- An improved drag-and-drop experience.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- I haven't had to work with pointers or allocate/de-allocate memory in the last 13 years so the risk is quite high. Please do not assume that I know what I'm doing. I've studied the documentation as closely as possible and I believe I've done things correctly but there are a lot of topics covered here and I could be making some incorrect assumptions in certain cases. A real Windows programmer should take a look at this to make sure there isn't anything glaringly wrong.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Video <!-- Remove this section if PR does not change UI -->\r\n\r\nhttps://user-images.githubusercontent.com/5017479/151678631-85698ddc-6ac9-418f-be3e-70cc907f3711.mp4\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually test using _WinformsControlsTest_ as startup project -> _Drag and Drop_. Click the _Open Cats_ button and drag the cat bitmaps and rich text format file to the picture boxes on the form (see video).\r\n- Ran unit and integration tests.\r\n- TODO: [Add UIIntegration tests](https://github.com/dotnet/winforms/issues/5884#issuecomment-998387359) as suggested by @RussKie .\r\n- TODO: Add unit tests.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\nTODO\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` --> .NET 6.0.1\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6576)","Url":"https://github.com/dotnet/winforms/pull/6576","RelatedDescription":"Open PR \"Add support for DropTarget drag images and drop descriptions\" (#6576)"},{"Id":"1118306218","IsPullRequest":true,"CreatedAt":"2022-01-29T19:27:14","Actor":"kant2002","Number":"6574","RawContent":null,"Title":"Operate open file dialog using ComWrappers","State":"open","Body":"That's piggyback on the previous work. I have to provide CCW for `IFileDialogEvents`. The multiselect did not use `ComWrappers`, since it requires me to provide RCW for `IShellItemArray`, but selection works using build-in COM.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6574)","Url":"https://github.com/dotnet/winforms/pull/6574","RelatedDescription":"Open PR \"Operate open file dialog using ComWrappers\" (#6574)"},{"Id":"1118211159","IsPullRequest":true,"CreatedAt":"2022-01-29T18:49:30","Actor":"dotnet-maestro[bot]","Number":"6573","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220128.9\r\n- **Date Produced**: January 29, 2022 8:30:26 AM UTC\r\n- **Commit**: 874d6a3e33c1b9370ac1cb2a6b0f796bdb4b0242\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22078.1 to 7.0.0-preview.2.22078.9][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/953fd35...874d6a3\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6573)","Url":"https://github.com/dotnet/winforms/pull/6573","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6573)"},{"Id":"1118119949","IsPullRequest":true,"CreatedAt":"2022-01-29T18:49:16","Actor":"kant2002","Number":"6572","RawContent":null,"Title":"Update dev instruction to .NET 7","State":"closed","Body":"Repository target `net7.0` now, so I change paths, so for newcomers would be easier to just copy-paste\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6572)","Url":"https://github.com/dotnet/winforms/pull/6572","RelatedDescription":"Closed or merged PR \"Update dev instruction to .NET 7\" (#6572)"},{"Id":"1117387608","IsPullRequest":true,"CreatedAt":"2022-01-28T18:38:17","Actor":"dotnet-maestro[bot]","Number":"6569","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220128.1\r\n- **Date Produced**: January 28, 2022 11:50:02 AM UTC\r\n- **Commit**: 953fd351ae1c5c8c11ba865b3613b63f8f774624\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/ac0a35b...953fd35\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6569)","Url":"https://github.com/dotnet/winforms/pull/6569","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6569)"},{"Id":"1117400214","IsPullRequest":false,"CreatedAt":"2022-01-28T13:22:29","Actor":"SergeySmirnov-Akvelon","Number":"6570","RawContent":null,"Title":"The Inspect draws a border around a DataGridViewRow when the user hovers over a DataGridViewRowHeaderCell","State":"open","Body":".NET Core Version: \r\n- 7.0.0-preview.2.22076.16\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\n- Yes for `.NET Framework 4.8` (not reproduced in `.NET Framework 4.7.2`)\r\n\r\n**Repro steps:**\r\n\r\n1. Add a `Form` with a `DataGridView`\r\n2. Add multiple `Columns` and `Rows`\r\n3. Run the application\r\n4. Hover over the `Header` of any `Row`\r\n\r\n**Actual behavior:**\r\nThe Inspect draws a border around a `DataGridViewRow`\r\n![image](https://user-images.githubusercontent.com/23376742/151553802-f9fc7a3a-9ff6-41a3-94a2-1878731dcc21.png)\r\n\r\n**Expected behavior:**\r\nThe Inspect should draw a border around a `DataGridViewRowHeaderCell`\r\n![image](https://user-images.githubusercontent.com/23376742/151553981-5613e0c7-9d7d-4119-99b6-bd71ce2f6275.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/6570","RelatedDescription":"Open issue \"The Inspect draws a border around a DataGridViewRow when the user hovers over a DataGridViewRowHeaderCell\" (#6570)"},{"Id":"1117214621","IsPullRequest":true,"CreatedAt":"2022-01-28T10:04:00","Actor":"Danil-Andrianov","Number":"6568","RawContent":null,"Title":"Adding UIA support for toolStripContainer","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nPartially implements #3421 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Updated \"SupportsUiaProviders\" flag.\r\n- Added and implemented toolStripContainer accessible object\r\n- Added unit tests\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n**Before update:**\r\n![InspectWithout](https://user-images.githubusercontent.com/74228865/151526171-43f46953-7f69-499f-8bc3-0a6046ae8b29.png)\r\n![ToolStripContainer1](https://user-images.githubusercontent.com/74228865/151526265-cf6e27d1-52cc-4552-88fb-b0e1ae2945bc.png)\r\n\r\n**After update:**\r\n![InspectWith](https://user-images.githubusercontent.com/74228865/151526307-09cb16dd-e2d2-4fb6-bad8-2d01ccfad786.png)\r\n![ToolStripContainer1](https://user-images.githubusercontent.com/74228865/151526367-a7a31a17-8472-4163-8fd6-a82b3f46c964.png)\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit tests\r\n- CTI team\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Narrator\r\n- Inspect\r\n- Accessibility Insights\r\n\r\n## Test environment(s) \r\n- Microsoft Windows [Version 10.0.22000.318]\r\n- .NET Core SDK: 7.0.0-alpha.1.21562.1\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6568)","Url":"https://github.com/dotnet/winforms/pull/6568","RelatedDescription":"Open PR \"Adding UIA support for toolStripContainer\" (#6568)"},{"Id":"1116816531","IsPullRequest":false,"CreatedAt":"2022-01-28T01:37:27","Actor":"rallets","Number":"6566","RawContent":null,"Title":"[Question] WebBrowser and Excel integration in Windows Forms","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET 6.0 - Visual Studio 2022\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nNo\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nHi, I hope I'm not too much Off Topic.\r\nIn a .net 4.7.2 Windows Forms project a `WebBrowser` control was available. It's not available anymore in a .Net 6.0 project (but I saw some issues here in github mentioning it, so I'm a bit confused, too).\r\nMy goal is to use a WebBrowser control to embed a Microsoft Excel stylesheet (so that Excel results inside the Windows Forms application, to avoid context-switching for the end user). \r\nI know this was possible in the past, but I was not able to find more info about the new .net core version. Do you have any plans in supporting this kind of scenario, or do you know an alternative? I can't reproduce this scenario with my pc because I have installed a newer version of Office (365, excel 16) that I was not able to make it work. It should be possible with previous version of Excel/Office (that is exactly my case).\r\nRelated to this I could think to re-use a UserControl built in .net 4.7.2 using the latest version and Visual Studio 2022.\r\nAnother option could be to open a generic exe-application inside a UserControl. \r\nCould this be something supported from .net 6 & VS 2022?\r\n\r\n**Expected behavior:**\r\n<!--\r\n    Provide details on expected behavior with screenshots/GIF, where ever possible.\r\n -->\r\nI can use a WebBrowser and then embed Excel.\r\n\r\n**Minimal repro:**\r\n<!--\r\n    Provide step by step guide to repro this issue.  Incase repro steps are complex, It would be helpful if \r\n    you attach a GIF with repro actions. Attaching a sample app to repro the issue will help speed up the \r\n    resolution. \r\n -->\r\n(https://www.codeproject.com/Articles/15760/How-to-Integrate-Excel-in-a-Windows-Form-Applicati)\r\nrequires to tweak some registry configs, based on:\r\n(https://social.technet.microsoft.com/Forums/ie/en-US/1fcabd6b-a2e1-4eee-8422-cd77da93ede3/office-2016-open-excel-files-in-ie-11?forum=excel)","Url":"https://github.com/dotnet/winforms/issues/6566","RelatedDescription":"Closed issue \"[Question] WebBrowser and Excel integration in Windows Forms\" (#6566)"},{"Id":"1116776039","IsPullRequest":false,"CreatedAt":"2022-01-27T21:55:14","Actor":"TobiasKnauss","Number":"6565","RawContent":null,"Title":"C# Winforms .Net 5: Load() of base UC is called before Ctor of derived UC is finished","State":"open","Body":".NET 5.0.13\r\nVS 2019: v.16.11.9\r\nboth x86 and x64\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\nNO\r\n\r\nI first seeked for advice on my problem on stackoverflow (https://stackoverflow.com/questions/70882286/, contains some kind of history and other details), but I think it also belongs here, because this is where the relevant developers are active.\r\n\r\nWe have migrated our projects from .Net Framework 4.8 to .Net 5.\r\nNow we see a very strange issue: If the display language of our application is set to something different than English, we get an Exception during the application start.\r\nThe exception is raised in a UserControl with 3 levels of inheritance:\r\n- base, lets call it UCImageObject\r\n- first derived UCImageObjectStandard : UCImageObject\r\n- second derived UCImgObjStd_Circle : UCImageObjectStandard\r\n\r\nUCImageObjectStandard contains another UC (\"UCTolerance\") with `AutoScaleMode=DPI` and some Labels with `AutoSize=true`.\r\nIf the language remains English, the label's text is not changed, because the english-coded texts on the labels are identical with the english texts from our language database. Therefore, the label's size also stays the same. And then there is no need to scale them:\r\n(I stepped through the .Net 5.0.13 source code to find out)\r\n`System.Windows.Forms.Control.ScaleControl(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)`\r\nline 10131: `if (includedSpecified != BoundsSpecified.None)` is false, if the label's text and size are not changed.\r\n\r\nIF the language is set to anything but english, the label's text and size are changed, and the `ScaleControl()` (line 10133) is executed. The problem is, that finally a handle of `UCImageObject` is created and its `Load` event is raised (see stack frame 82 in the following stacktrace), although the constructors of `UCImageObjectStandard` has not been finished (stack frame 41).\r\nThe `Load()` event method of `UCImageObject` then calls a virtual `Init()` method, which is overridden in `UCImageObjectStandard`. The `UCImageObjectStandard.Init()` is then executed before the `UCImageObjectStandard..ctor` has finished, which of course is wrong, and in our case this causes the exception.\r\n\r\nThe strange thing is, that this has worked well for years in .Net Framework 4.8. But it seems that changes have been made in .Net Core or .Net 5.\r\nI think I have recently read a probably related issue about the early creation (or late? or in wrong order?) of a Winforms UC handle, but I cannot find it anymore.\r\n\r\n**Can anybody tell me what has changed?**\r\n**It's wrong to call an overridden method in the ctor of classes that use inheritance. But should we also avoid calling an overridden method in the Load event?**\r\n\r\nStacktrace (frame numbers added by me):\r\n82   at SMCore.UIWF.UCImageObject.UCImageObject_Load(Object i_sender, EventArgs i_eventArgs)\r\n81   at System.Windows.Forms.UserControl.OnLoad(EventArgs e)\r\n80   at System.Windows.Forms.UserControl.OnCreateControl()\r\n79   at System.Windows.Forms.Control.CreateControl(Boolean fIgnoreVisible)\r\n78   at System.Windows.Forms.Control.CreateControl()\r\n77   at System.Windows.Forms.Control.WmShowWindow(Message& m)\r\n76   at System.Windows.Forms.Control.WndProc(Message& m)\r\n75   at System.Windows.Forms.ScrollableControl.WndProc(Message& m)\r\n74   at System.Windows.Forms.ContainerControl.WndProc(Message& m)\r\n73   at System.Windows.Forms.UserControl.WndProc(Message& m)\r\n72   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)\r\n71   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n70   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)\r\n69   at Interop.User32.CreateWindowExW(WS_EX dwExStyle, Char* lpClassName, String lpWindowName, WS dwStyle, Int32 X, Int32 Y, Int32 nWidth, Int32 nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInst, Object lpParam)\r\n68   at System.Windows.Forms.NativeWindow.CreateHandle(CreateParams cp)\r\n67   at System.Windows.Forms.Control.CreateHandle()\r\n66   at System.Windows.Forms.Control.get_Handle()\r\n65   at System.Windows.Forms.Control.get_ShowKeyboardCues()\r\n64   at System.Windows.Forms.ControlPaint.CreateTextFormatFlags(Control control, ContentAlignment textAlign, Boolean showEllipsis, Boolean useMnemonic)\r\n63   at System.Windows.Forms.Label.CreateTextFormatFlags(Size constrainingSize)\r\n62   at System.Windows.Forms.Label.GetPreferredSizeCore(Size proposedConstraints)\r\n61   at System.Windows.Forms.Control.GetPreferredSize(Size proposedSize)\r\n60   at System.Windows.Forms.Label.GetPreferredSize(Size proposedSize)\r\n59   at System.Windows.Forms.Control.get_PreferredSize()\r\n58   at System.Windows.Forms.Label.SetBoundsCore(Int32 x, Int32 y, Int32 width, Int32 height, BoundsSpecified specified)\r\n57   at System.Windows.Forms.Control.ScaleControl(SizeF factor, BoundsSpecified specified)\r\n56   at System.Windows.Forms.Control.ScaleControl(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)\r\n55   at System.Windows.Forms.Control.Scale(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)\r\n54   at System.Windows.Forms.Control.ScaleChildControls(SizeF includedFactor, SizeF excludedFactor, Control requestingControl, Boolean updateWindowFontIfNeeded)\r\n53   at System.Windows.Forms.ContainerControl.Scale(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)\r\n52   at System.Windows.Forms.Control.ScaleChildControls(SizeF includedFactor, SizeF excludedFactor, Control requestingControl, Boolean updateWindowFontIfNeeded)\r\n51   at System.Windows.Forms.Control.Scale(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)\r\n50   at System.Windows.Forms.Control.ScaleChildControls(SizeF includedFactor, SizeF excludedFactor, Control requestingControl, Boolean updateWindowFontIfNeeded)\r\n49   at System.Windows.Forms.Control.Scale(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)\r\n48   at System.Windows.Forms.Control.ScaleChildControls(SizeF includedFactor, SizeF excludedFactor, Control requestingControl, Boolean updateWindowFontIfNeeded)\r\n47   at System.Windows.Forms.ContainerControl.Scale(SizeF includedFactor, SizeF excludedFactor, Control requestingControl)\r\n46   at System.Windows.Forms.ContainerControl.PerformAutoScale(Boolean includedBounds, Boolean excludedBounds)\r\n45   at System.Windows.Forms.ContainerControl.PerformNeededAutoScaleOnLayout()\r\n44   at System.Windows.Forms.ContainerControl.OnLayoutResuming(Boolean performLayout)\r\n43   at System.Windows.Forms.Control.ResumeLayout(Boolean performLayout)\r\n42   at SMCore.UIWF.UCImageObjectStandard.InitializeComponent()\r\n41   at SMCore.UIWF.UCImageObjectStandard..ctor()\r\n40   at SMCore.UIWF.UCImgObjStd_Circle..ctor()\r\n29   at SMCore.UIWF.UCImageObject.Create(EnumType i_type, UCImageObject& io_ucImageObject)\r\n28   at SMCore.UIWF.UCImageObject.ShowData(UCImageObject& io_ucImageObject, CImageObject i_imageObject)\r\n27   at DI.UIWF.UCJobCreatorSettings.ucImageObjectList_SelectionChanged(Object i_oSender, EventArgs i_oEventArgs)\r\n26   at SMCore.UIWF.UCImageObjectList.OnSelectionChanged(Int32 i_imageObjectID)\r\n25   at SMCore.UIWF.UCImageObjectList.dgvImageObjects_SelectionChanged(Object i_sender, EventArgs i_eventArgs)\r\n24   at SMCore.UIWF.UCImageObjectList.ShowData(CImageObjectList i_imageObjectList)\r\n23   at DI.UIWF.UCJobCreatorSettings.Init(CImageObjectList i_oImageObjectList, IList`1 i_listoImageAcquisitionDeviceInfo)\r\n22   at DI_JobEditor.UIWF.frmMain.Init_UI_Settings()\r\n21   at DI_JobEditor.UIWF.frmMain.frmMain_Load(Object i_oSender, EventArgs i_oEventArgs)\r\n20   at System.Windows.Forms.Form.OnLoad(EventArgs e)\r\n19   at System.Windows.Forms.Form.OnCreateControl()\r\n18   at System.Windows.Forms.Control.CreateControl(Boolean fIgnoreVisible)\r\n17   at System.Windows.Forms.Control.CreateControl()\r\n16   at System.Windows.Forms.Control.WmShowWindow(Message& m)\r\n15   at System.Windows.Forms.Control.WndProc(Message& m)\r\n14   at System.Windows.Forms.ScrollableControl.WndProc(Message& m)\r\n13   at System.Windows.Forms.ContainerControl.WndProc(Message& m)\r\n12   at System.Windows.Forms.Form.WmShowWindow(Message& m)\r\n11   at System.Windows.Forms.Form.WndProc(Message& m)\r\n10   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)\r\n09   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n08   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)\r\n07   at Interop.User32.ShowWindow(IntPtr hWnd, SW nCmdShow)\r\n06   at System.Windows.Forms.Control.SetVisibleCore(Boolean value)\r\n05   at System.Windows.Forms.Form.SetVisibleCore(Boolean value)\r\n04   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(msoloop reason, ApplicationContext context)\r\n03   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(msoloop reason, ApplicationContext context)\r\n02   at System.Windows.Forms.Application.Run(Form mainForm)\r\n01   at DI_JobEditor.UIWF.Program.Main(String[] args)\r\n\r\n**Minimal repro:**\r\nnot ready yet.","Url":"https://github.com/dotnet/winforms/issues/6565","RelatedDescription":"Open issue \"C# Winforms .Net 5: Load() of base UC is called before Ctor of derived UC is finished\" (#6565)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-02-02T03:30:33.7559913Z","RunDurationInMilliseconds":541}