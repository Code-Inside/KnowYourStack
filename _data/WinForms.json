{"Data":{"GitHub":{"Issues":[{"Id":"628867894","IsPullRequest":true,"CreatedAt":"2020-06-02T03:17:06","Actor":"paul1956","Number":"3380","RawContent":null,"Title":"Replace GetApplicationInstanceID with one that is compatible with Fra…","State":"open","Body":"…mework when GUID Attribute available\r\n\r\nFixes #3296 \r\n\r\n## Proposed changes\r\nReplace GetApplicationInstanceID with one that supports a Framework compatible unique Id for single instance if there is an available GUID attribute and a major and minor version number set. If no GUID is available it will fall back to what it currently does and each compile will produce a different GUID so that Debug and Release for example are 2 different apps. If GUID is available but no version then all versions of an application are considered the same.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n- VB Single instance will work the same in Core as it did in framework\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- There are no tests for this as the code for setting the GUID is not in Visual Studio yet, existing Framework Apps ported throw TryConvert will have one and if they is no GUID the current behavior and tests apply\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- There are tests for getting the GUID attribute custom attribute in Core, the logic comes from Framework and I have tested on multiple ported applications.\r\n- More test can be added when #3352 is merged\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3380)","Url":"https://github.com/dotnet/winforms/pull/3380","RelatedDescription":"Open PR \"Replace GetApplicationInstanceID with one that is compatible with Fra…\" (#3380)"},{"Id":"628743122","IsPullRequest":false,"CreatedAt":"2020-06-01T21:36:37","Actor":"Jean-Enrick","Number":"3379","RawContent":null,"Title":"Not updating Minimum or Maximum property of NumericUpDown","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nWhen changing the value of the Minimum or the Maximum property for a NumericUpDown control from the Properties menu, the designer file is not updated. When building the project, the properties will keep their default values of 0 and 100.\r\n\r\n**Expected behavior:**\r\nIf the value Minimum or Maximum property is changed from the default value, a new line is added to the designer file, setting the value to the one entered in the Properties menu.\r\n\r\n\r\n**Minimal repro:**\r\nCreate a Windows Forms .NET Core app. In the design view for the default form, add a NumericUpDown control, change the value of the Minimum or Maximum property and build the project.\r\n","Url":"https://github.com/dotnet/winforms/issues/3379","RelatedDescription":"Open issue \"Not updating Minimum or Maximum property of NumericUpDown\" (#3379)"},{"Id":"628686569","IsPullRequest":false,"CreatedAt":"2020-06-01T19:55:38","Actor":"hughbe","Number":"3378","RawContent":null,"Title":"DataGridView.TopLeftHeaderCell throws ArgumentOutOfRangeException on Handle creation","State":"open","Body":"* .NET Core Version: \r\nMaster\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\nConsider the following code:\r\n```cs\r\n\r\npublic static IEnumerable<object[]> GetInheritedState_TopLeftHeaderCellWithHandle_TestData()\r\n{\r\n    foreach (DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode in Enum.GetValues(typeof(DataGridViewRowHeadersWidthSizeMode)))\r\n    {\r\n        foreach (DataGridViewColumnHeadersHeightSizeMode columnHeadersHeightSizeMode in Enum.GetValues(typeof(DataGridViewColumnHeadersHeightSizeMode)))\r\n        {\r\n            DataGridViewElementStates expected = rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || columnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing ? DataGridViewElementStates.Resizable : (DataGridViewElementStates)0;\r\n            yield return new object[] { rowHeadersWidthSizeMode, true, columnHeadersHeightSizeMode, true, DataGridViewElementStates.Visible | DataGridViewElementStates.Displayed | expected };\r\n            yield return new object[] { rowHeadersWidthSizeMode, true, columnHeadersHeightSizeMode, false, expected };\r\n            yield return new object[] { rowHeadersWidthSizeMode, false, columnHeadersHeightSizeMode, false, expected };\r\n            yield return new object[] { rowHeadersWidthSizeMode, false, columnHeadersHeightSizeMode, false, expected };\r\n        }\r\n    }\r\n}\r\n\r\n[WinFormsTheory]\r\n[MemberData(nameof(GetInheritedState_TopLeftHeaderCellWithHandle_TestData))]\r\npublic void DataGridViewHeaderCell_GetInheritedState_InvokeTopLeftHeaderCellWithHandle_ReturnsExpected(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool rowHeadersVisible, DataGridViewColumnHeadersHeightSizeMode columnHeadersHeightSizeMode, bool columnHeadersVisible, DataGridViewElementStates expected)\r\n{\r\n    using var cell = new DataGridViewHeaderCell();\r\n    using var control = new DataGridView\r\n    {\r\n        RowHeadersWidthSizeMode = rowHeadersWidthSizeMode,\r\n        RowHeadersVisible = rowHeadersVisible,\r\n        ColumnHeadersHeightSizeMode = columnHeadersHeightSizeMode,\r\n        ColumnHeadersVisible = columnHeadersVisible\r\n    };\r\n    control.TopLeftHeaderCell = cell;\r\n    Assert.NotEqual(IntPtr.Zero, control.Handle);\r\n    int invalidatedCallCount = 0;\r\n    control.Invalidated += (sender, e) => invalidatedCallCount++;\r\n    int styleChangedCallCount = 0;\r\n    control.StyleChanged += (sender, e) => styleChangedCallCount++;\r\n    int createdCallCount = 0;\r\n    control.HandleCreated += (sender, e) => createdCallCount++;\r\n\r\n    Assert.Equal(DataGridViewElementStates.Frozen | DataGridViewElementStates.ReadOnly | DataGridViewElementStates.ResizableSet | expected, cell.GetInheritedState(-1));\r\n    Assert.True(control.IsHandleCreated);\r\n    Assert.Equal(0, invalidatedCallCount);\r\n    Assert.Equal(0, styleChangedCallCount);\r\n    Assert.Equal(0, createdCallCount);\r\n}\r\n```\r\nGet the error\r\n```\r\nA total of 1 test files matched the specified pattern.\r\nThe active test run was aborted. Reason: Test host process crashed : Unhandled Exception: System.Exception: Specified argument was out of the range of valid values.\r\nParameter name: rowIndex\r\n   at System.Windows.Forms.DataGridViewCell.GetInheritedStyle(DataGridViewCellStyle inheritedCellStyle, Int32 rowIndex, Boolean includeColors)\r\n   at System.Windows.Forms.DataGridViewCell.GetPreferredHeight(Int32 rowIndex, Int32 width)\r\n   at System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight(Boolean fixedRowHeadersWidth, Boolean fixedColumnsWidth)\r\n   at System.Windows.Forms.DataGridView.OnGlobalAutoSize()\r\n   at System.Windows.Forms.DataGridView.OnHandleCreated(EventArgs e)\r\n   at System.Windows.Forms.Control.WmCreate(Message& m)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.Tests.ControlTests.<>c.<.ctor>b__3_0(Object sender, ThreadExceptionEventArgs e) in C:\\Users\\hughbe\\source\\repos\\ConsoleApp\\Support\\ControlTests.Data.cs:line 19\r\n   at System.Windows.Forms.Application.ThreadContext.OnThreadException(Exception t)\r\n   at System.Windows.Forms.Control.WndProcException(Exception e)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n```\r\n\r\n**Expected behavior:**\r\nShouldn't throw\r\n\r\n**Minimal repro:**\r\nSee above","Url":"https://github.com/dotnet/winforms/issues/3378","RelatedDescription":"Open issue \"DataGridView.TopLeftHeaderCell throws ArgumentOutOfRangeException on Handle creation\" (#3378)"},{"Id":"628372513","IsPullRequest":false,"CreatedAt":"2020-06-01T13:07:05","Actor":"15092368540","Number":"3376","RawContent":null,"Title":"DataGridView memory usage","State":"closed","Body":".NET Core 3.1.4\r\n\r\nDataGridView memory usage so much and the first search takes too long time.\r\n\r\n![DGTest](https://user-images.githubusercontent.com/49462433/83405636-8507d780-a43f-11ea-8d17-256fe38d7658.GIF)\r\n\r\nExample:\r\n\r\n[DGTest.ZIP](https://github.com/dotnet/winforms/files/4711037/DGTest.ZIP)\r\n","Url":"https://github.com/dotnet/winforms/issues/3376","RelatedDescription":"Closed issue \"DataGridView memory usage\" (#3376)"},{"Id":"628389907","IsPullRequest":true,"CreatedAt":"2020-06-01T12:40:45","Actor":"dotnet-maestro[bot]","Number":"3377","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200531.6\r\n- **Date Produced**: 6/1/2020 7:05 AM\r\n- **Commit**: bdf6a5a0e86101d438316c83d420eb03624b5fc4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3377)","Url":"https://github.com/dotnet/winforms/pull/3377","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3377)"},{"Id":"627419731","IsPullRequest":true,"CreatedAt":"2020-05-31T22:39:14","Actor":"hughbe","Number":"3367","RawContent":null,"Title":"Add RadioButton tests","State":"closed","Body":"## Proposed Changes\r\n- Add RadioButton tests\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3367)","Url":"https://github.com/dotnet/winforms/pull/3367","RelatedDescription":"Closed or merged PR \"Add RadioButton tests\" (#3367)"},{"Id":"628048200","IsPullRequest":true,"CreatedAt":"2020-05-31T21:32:14","Actor":"hughbe","Number":"3375","RawContent":null,"Title":"Add DataGridViewHeaderCell tests","State":"open","Body":"## Proposed Changes\r\n- Add DataGridViewHeaderCell tests\r\n- Add parameter names to ArgumentExceptions\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3375)","Url":"https://github.com/dotnet/winforms/pull/3375","RelatedDescription":"Open PR \"Add DataGridViewHeaderCell tests\" (#3375)"},{"Id":"627950294","IsPullRequest":true,"CreatedAt":"2020-05-31T12:34:08","Actor":"dotnet-maestro[bot]","Number":"3374","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200530.5\r\n- **Date Produced**: 5/31/2020 1:56 AM\r\n- **Commit**: c22d94f239f355dade0a71fc9a6e019e037d6747\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3374)","Url":"https://github.com/dotnet/winforms/pull/3374","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3374)"},{"Id":"627769955","IsPullRequest":true,"CreatedAt":"2020-05-30T16:36:51","Actor":"hughbe","Number":"3373","RawContent":null,"Title":"Fix DataGridView.OnRowHeadersWidthSizeModeChanged event invocation","State":"open","Body":"## Proposed Changes\r\n- Fix DataGridView.OnRowHeadersWidthSizeModeChanged event invocation\r\n- Fix DataGridView.OnColumnHeaderHeightChanged forcing handle creation\r\n\r\nFixes #3371\r\nFixes #3372\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3373)","Url":"https://github.com/dotnet/winforms/pull/3373","RelatedDescription":"Open PR \"Fix DataGridView.OnRowHeadersWidthSizeModeChanged event invocation\" (#3373)"},{"Id":"627765021","IsPullRequest":false,"CreatedAt":"2020-05-30T16:12:46","Actor":"hughbe","Number":"3372","RawContent":null,"Title":"DataGridView.OnColumnHeadersHeightChanged forces creation of the handle","State":"open","Body":"* .NET Core Version: \r\nMaster\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n\r\nCompare `OnColumnHeadersHeightChanged` with \r\n```cs\r\nprotected virtual void OnColumnHeadersHeightChanged(EventArgs e)\r\n{\r\n    if (editingControl != null)\r\n    {\r\n        PositionEditingControl(true, false, false);\r\n    }\r\n\r\n    UpdateMouseEnteredCell(null /*HitTestInfo*/, null /*MouseEventArgs*/);\r\n\r\n    OnColumnHeadersGlobalAutoSize();\r\n\r\n    if (Events[EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED] is EventHandler eh && !dataGridViewOper[DATAGRIDVIEWOPER_inDispose] && !IsDisposed)\r\n    {\r\n        eh(this, e);\r\n    }\r\n}\r\n```\r\n\r\nwith `OnRowHeadersWidthChanged`\r\n```cs\r\nprotected virtual void OnRowHeadersWidthChanged(EventArgs e)\r\n{\r\n    if (RowHeadersVisible)\r\n    {\r\n        if (editingControl != null)\r\n        {\r\n            PositionEditingControl(true, false, false);\r\n        }\r\n\r\n        if (IsHandleCreated)\r\n        {\r\n            UpdateMouseEnteredCell(null /*HitTestInfo*/, null /*MouseEventArgs*/);\r\n        }\r\n\r\n        OnRowHeadersGlobalAutoSize(false /*expandingRows*/);\r\n    }\r\n\r\n    if (Events[EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED] is EventHandler eh && !dataGridViewOper[DATAGRIDVIEWOPER_inDispose] && !IsDisposed)\r\n    {\r\n        eh(this, e);\r\n    }\r\n}\r\n```\r\n\r\nNotice that `OnRowHeadersWidthChanged` doesn't force the handle creation, as it guards `UpdateMouseEnteredCell` with `IsHandleCreated`.\r\n\r\nHowever, `OnColumnHeadersHeightChanged` doesn't.\r\n\r\nNot only does this force handle creation when `ColumnHeadersHeight` is set to something custom, but also causes `NREs` and `ObjectDisposedException`, for example\r\n```\r\n  X System.Windows.Forms.Tests.DataGridViewTests.DataGridView_ColumnHeadersHeight_SetWithHandlerInColumnDisposing_DoesNotCallColumnHeadersHeightChanged(columnHeadersWidthSizeMode: DisableResizing) [1ms]\r\n  Error Message:\r\n   System.ObjectDisposedException : Cannot access a disposed object.\r\nObject name: 'DataGridView'.\r\n  Stack Trace:\r\n     at System.Windows.Forms.Control.CreateHandle()\r\n   at System.Windows.Forms.Control.get_Handle()\r\n   at System.Windows.Forms.Control.PointToClientInternal(Point p)\r\n   at System.Windows.Forms.DataGridView.UpdateMouseEnteredCell(HitTestInfo hti, MouseEventArgs e)\r\n   at System.Windows.Forms.DataGridView.OnColumnHeadersHeightChanged(EventArgs e)\r\n   at System.Windows.Forms.DataGridView.SetColumnHeadersHeightInternal(Int32 columnHeadersHeight, Boolean invalidInAdjustFillingColumns)\r\n   at System.Windows.Forms.DataGridView.set_ColumnHeadersHeight(Int32 value)\r\n   at System.Windows.Forms.Tests.DataGridViewTests.<>c__DisplayClass12_0.<DataGridView_ColumnHeadersHeight_SetWithHandlerInColumnDisposing_DoesNotCallColumnHeadersHeightChanged>b__0(Object sender, EventArgs e) in C:\\Users\\hughbe\\source\\repos\\ConsoleApp\\DataGridViewTests.cs:line 447\r\n   at System.Windows.Forms.DataGridViewColumn.Dispose(Boolean disposing)\r\n   at System.Windows.Forms.DataGridViewBand.Dispose()\r\n   at System.Windows.Forms.Tests.DataGridViewTests.DataGridView_ColumnHeadersHeight_SetWithHandlerInColumnDisposing_DoesNotCallColumnHeadersHeightChanged(DataGridViewColumnHeadersHeightSizeMode columnHeadersWidthSizeMode) in C:\\Users\\hughbe\\source\\repos\\ConsoleApp\\DataGridViewTests.cs:line 461\r\n   \r\n     at System.Windows.Forms.Tests.DataGridViewTests.DataGridView_ColumnHeadersHeight_SetWithHandlerDisposed_DoesNotCallColumnHeadersHeightChanged(DataGridViewColumnHeadersHeightSizeMode columnHeadersWidthSizeMode) in C:\\Users\\hughbe\\source\\repos\\ConsoleApp\\DataGridViewTests.cs:line 342\r\nThe active test run was aborted. Reason: Test host process crashed : Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Windows.Forms.DataGridView.LayoutScrollBars()\r\n   at System.Windows.Forms.DataGridView.ComputeLayout()\r\n   at System.Windows.Forms.DataGridView.PerformLayoutPrivate(Boolean useRowShortcut, Boolean computeVisibleRows, Boolean invalidInAdjustFillingColumns, Boolean repositionEditingControl)\r\n   at System.Windows.Forms.DataGridView.OnHandleCreated(EventArgs e)\r\n   at System.Windows.Forms.Control.WmCreate(Message& m)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.ThreadExceptionFixture.OnThreadException(Object sender, ThreadExceptionEventArgs e) in C:\\Users\\hughbe\\source\\repos\\ConsoleApp\\Support\\ThreadExceptionFixture.cs:line 25\r\n```\r\n\r\n**Expected behavior:**\r\nWe should guard this with call `IsHandleCreated`\r\n\r\n**Minimal repro:**\r\nNotice we need `expectedIsHandleCreated` in the following test to make it pass\r\n```cs\r\npublic static IEnumerable<object[]> ColumnHeadersHeight_Set_TestData()\r\n{\r\n    foreach (bool columnHeadersVisible in new bool[] { true, false })\r\n    {\r\n        foreach (bool autoSize in new bool[] { true, false })\r\n        {\r\n            yield return new object[] { DataGridViewColumnHeadersHeightSizeMode.AutoSize, columnHeadersVisible, autoSize, 4, DefaultColumnHeadersHeight, false };\r\n            yield return new object[] { DataGridViewColumnHeadersHeightSizeMode.AutoSize, columnHeadersVisible, autoSize, DefaultColumnHeadersHeight, DefaultColumnHeadersHeight, false };\r\n            yield return new object[] { DataGridViewColumnHeadersHeightSizeMode.AutoSize, columnHeadersVisible, autoSize, 32768, DefaultColumnHeadersHeight, false };\r\n\r\n            foreach (DataGridViewColumnHeadersHeightSizeMode columnHeadersWidthSizeMode in new DataGridViewColumnHeadersHeightSizeMode[] { DataGridViewColumnHeadersHeightSizeMode.EnableResizing, DataGridViewColumnHeadersHeightSizeMode.DisableResizing })\r\n            {\r\n                yield return new object[] { columnHeadersWidthSizeMode, columnHeadersVisible, autoSize, 4, 4, true };\r\n                yield return new object[] { columnHeadersWidthSizeMode, columnHeadersVisible, autoSize, DefaultColumnHeadersHeight, DefaultColumnHeadersHeight, false };\r\n                yield return new object[] { columnHeadersWidthSizeMode, columnHeadersVisible, autoSize, 32768, 32768, true };\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n[WinFormsTheory]\r\n[MemberData(nameof(ColumnHeadersHeight_Set_TestData))]\r\npublic void DataGridView_ColumnHeadersHeight_Set_GetReturnsExpected(DataGridViewColumnHeadersHeightSizeMode columnHeadersWidthSizeMode, bool columnHeadersVisible, bool autoSize, int value, int expectedValue, bool expectedIsHandleCreated)\r\n{\r\n    using var control = new DataGridView\r\n    {\r\n        ColumnHeadersHeightSizeMode = columnHeadersWidthSizeMode,\r\n        ColumnHeadersVisible = columnHeadersVisible,\r\n        AutoSize = autoSize\r\n    };\r\n    int layoutCallCount = 0;\r\n    control.Layout += (sender, e) => layoutCallCount++;\r\n\r\n    control.ColumnHeadersHeight = value;\r\n    Assert.Equal(expectedValue, control.ColumnHeadersHeight);\r\n    Assert.Equal(0, layoutCallCount);\r\n    Assert.Equal(expectedIsHandleCreated, control.IsHandleCreated);\r\n\r\n    // Set same.\r\n    control.ColumnHeadersHeight = value;\r\n    Assert.Equal(expectedValue, control.ColumnHeadersHeight);\r\n    Assert.Equal(0, layoutCallCount);\r\n    Assert.Equal(expectedIsHandleCreated, control.IsHandleCreated);\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/3372","RelatedDescription":"Open issue \"DataGridView.OnColumnHeadersHeightChanged forces creation of the handle\" (#3372)"},{"Id":"627730674","IsPullRequest":false,"CreatedAt":"2020-05-30T13:20:08","Actor":"hughbe","Number":"3371","RawContent":null,"Title":"DataGridView.OnRowHeadersWidthSizeModeChanged has bad check for RowHeadersWidthSizeModeChanged event","State":"open","Body":"* .NET Core Version: \r\nmaster\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n\r\nIn `OnRowHeadersWidthSizeModeChanged` we have the following check\r\n\r\n```cs\r\nprotected virtual void OnRowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventArgs e)\r\n{\r\n    ...\r\n\r\n    if (Events[EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED] is EventHandler eh && !dataGridViewOper[DATAGRIDVIEWOPER_inDispose] && !IsDisposed)\r\n    {\r\n        eh(this, e);\r\n    }\r\n}\r\n```\r\n\r\nNote that we write `Events[EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED] is EventHandler eh`\r\n\r\nhowever, `RowHeadersWidthSizeModeChanged` is not an `EventHandler`, but `DataGridViewAutoSizeModeEventHandler`\r\n```cs\r\n[SRCategory(nameof(SR.CatPropertyChanged))]\r\n[SRDescription(nameof(SR.DataGridView_RowHeadersWidthSizeModeChangedDescr))]\r\npublic event DataGridViewAutoSizeModeEventHandler RowHeadersWidthSizeModeChanged\r\n{\r\n    add => Events.AddHandler(EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED, value);\r\n    remove => Events.RemoveHandler(EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED, value);\r\n}\r\n```\r\n\r\n**Expected behavior:**\r\nThe `RowHeadersWidthSizeModeChanged` is called. But it is not\r\n\r\n**Minimal repro:**\r\n```cs\r\n[WinFormsTheory]\r\n[InlineData(DataGridViewRowHeadersWidthSizeMode.DisableResizing, false)]\r\n[InlineData(DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders, true)]\r\n[InlineData(DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders, true)]\r\n[InlineData(DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader, true)]\r\npublic void DataGridView_RowHeadersWidthSizeMode_SetWithHandler_CallsRowHeadersWidthSizeModeChanged(DataGridViewRowHeadersWidthSizeMode value, object expectedPreviousModeAutoSized)\r\n{\r\n    using var control = new DataGridView();\r\n    int callCount = 0;\r\n    DataGridViewAutoSizeModeEventHandler handler = (sender, e) =>\r\n    {\r\n        Assert.Same(control, sender);\r\n        Assert.Equal(expectedPreviousModeAutoSized, e.PreviousModeAutoSized);\r\n        callCount++;\r\n    };\r\n    control.RowHeadersWidthSizeModeChanged += handler;\r\n\r\n    // Set different.\r\n    control.RowHeadersWidthSizeMode = value;\r\n    Assert.Equal(value, control.RowHeadersWidthSizeMode);\r\n    Assert.Equal(1, callCount);\r\n\r\n    // Set same.\r\n    control.RowHeadersWidthSizeMode = value;\r\n    Assert.Equal(value, control.RowHeadersWidthSizeMode);\r\n    Assert.Equal(1, callCount);\r\n\r\n    // Set different.\r\n    expectedPreviousModeAutoSized = false;\r\n    control.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.EnableResizing;\r\n    Assert.Equal(DataGridViewRowHeadersWidthSizeMode.EnableResizing, control.RowHeadersWidthSizeMode);\r\n    Assert.Equal(2, callCount);\r\n\r\n    // Remove handler.\r\n    control.RowHeadersWidthSizeModeChanged -= handler;\r\n    control.RowHeadersWidthSizeMode = value;\r\n    Assert.Equal(value, control.RowHeadersWidthSizeMode);\r\n    Assert.Equal(2, callCount);\r\n}\r\n```\r\n\r\nWe fail with `callCount` of `0`, instead of `1`","Url":"https://github.com/dotnet/winforms/issues/3371","RelatedDescription":"Open issue \"DataGridView.OnRowHeadersWidthSizeModeChanged has bad check for RowHeadersWidthSizeModeChanged event\" (#3371)"},{"Id":"627719198","IsPullRequest":true,"CreatedAt":"2020-05-30T12:39:33","Actor":"dotnet-maestro[bot]","Number":"3370","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200529.7\r\n- **Date Produced**: 5/30/2020 3:00 AM\r\n- **Commit**: 27dcce57c7fc4cfa6634f3f064edaa92f2f6eb83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3370)","Url":"https://github.com/dotnet/winforms/pull/3370","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3370)"},{"Id":"627717006","IsPullRequest":true,"CreatedAt":"2020-05-30T12:01:53","Actor":"dotnet-maestro[bot]","Number":"3369","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200528.4\r\n- **Date Produced**: 5/28/2020 4:10 PM\r\n- **Commit**: 96c65ad967d2abbbd8e770ba752a6b64255ec669\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20278.4\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20278.4\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20278.4\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20278.4\r\n  - **Microsoft.DotNet.RemoteExecutor**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20278.4\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3369)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/3369","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3369)"},{"Id":"627422389","IsPullRequest":true,"CreatedAt":"2020-05-29T17:26:11","Actor":"hughbe","Number":"3368","RawContent":null,"Title":"Add ListBox SelectedItems tests","State":"open","Body":"## Proposed Changes\r\n- Add ListBox SelectedItems tests\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3368)","Url":"https://github.com/dotnet/winforms/pull/3368","RelatedDescription":"Open PR \"Add ListBox SelectedItems tests\" (#3368)"},{"Id":"627418120","IsPullRequest":true,"CreatedAt":"2020-05-29T17:17:41","Actor":"hughbe","Number":"3366","RawContent":null,"Title":"Test AxHost ICustomTypeDescriptor implementation","State":"open","Body":"## Proposed Changes\r\n- Test AxHost ICustomTypeDescriptor implementation\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3366)","Url":"https://github.com/dotnet/winforms/pull/3366","RelatedDescription":"Open PR \"Test AxHost ICustomTypeDescriptor implementation\" (#3366)"},{"Id":"627223122","IsPullRequest":true,"CreatedAt":"2020-05-29T12:40:25","Actor":"dotnet-maestro[bot]","Number":"3365","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200528.9\r\n- **Date Produced**: 5/29/2020 4:01 AM\r\n- **Commit**: 567a7a2bb62e180ddb224ba820297e48b1879df1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20277.12 to 5.0.0-preview.6.20278.9\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3365)","Url":"https://github.com/dotnet/winforms/pull/3365","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3365)"},{"Id":"627031679","IsPullRequest":true,"CreatedAt":"2020-05-29T06:28:59","Actor":"RussKie","Number":"3364","RawContent":null,"Title":"Correct ImageKey/ImageIndex properties","State":"open","Body":"\r\n\r\n\r\n\r\nResolves #3353\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\n- Setters for `ImageKey` and `ImageIndex` properties were made idempotent in #3126, however the change didn't account for the fact that the default `ImageKey == \"\"` and not `null`.\r\n  This caused failures to reset `ImageIndex`, when `ImageKey` was set to `\"\"`; and in reverse - failure to reset `ImageKey` when `ImageIndex` was set to `-1`.\r\n  Tweak the setters to continue execution for default values.\r\n\r\n- In addition apply NRE annotations to ` ImageList.Indexer` type, and expose the defaults in a reusable manner.\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- unit tests\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3364)","Url":"https://github.com/dotnet/winforms/pull/3364","RelatedDescription":"Open PR \"Correct ImageKey/ImageIndex properties\" (#3364)"},{"Id":"626457037","IsPullRequest":true,"CreatedAt":"2020-05-29T04:51:27","Actor":"dotnet-maestro[bot]","Number":"3360","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200527.12\r\n- **Date Produced**: 5/28/2020 7:36 AM\r\n- **Commit**: 35aa7989884dda8347899dcea162daf0c9318051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20271.10 to 5.0.0-preview.6.20277.12\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3360)","Url":"https://github.com/dotnet/winforms/pull/3360","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3360)"},{"Id":"626911160","IsPullRequest":true,"CreatedAt":"2020-05-29T00:12:41","Actor":"RussKie","Number":"3363","RawContent":null,"Title":"Test x86","State":"open","Body":"Relates to #3359\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3363)","Url":"https://github.com/dotnet/winforms/pull/3363","RelatedDescription":"Open PR \"Test x86\" (#3363)"},{"Id":"626293329","IsPullRequest":true,"CreatedAt":"2020-05-29T00:09:41","Actor":"RussKie","Number":"3357","RawContent":null,"Title":"Don't measure invalid ComboBox items","State":"closed","Body":"Fixes #3354\r\n\r\nFix the condition that incorrectly handled the overflow.\r\nRegression introduced in #1837\r\n\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual tests\r\n- MAUI tests\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3357)","Url":"https://github.com/dotnet/winforms/pull/3357","RelatedDescription":"Closed or merged PR \"Don't measure invalid ComboBox items\" (#3357)"},{"Id":"625608072","IsPullRequest":false,"CreatedAt":"2020-05-29T00:09:41","Actor":"gc-deniszmitrichenko","Number":"3354","RawContent":null,"Title":"Control derived from ComboBox causes application crash with System.ArgumentOutOfRangeException when override OnMeasureItem method","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET SDK 5.0.100-preview.4.20258.7\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nNo\r\nIt is also not reproducible with .Net Core 3.1.\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nIn derived from ComboBox class when sets ComboBox.DrawMode = DrawMode.OwnerDrawVariable and override OnMeasureItem method there is a call of OnMeasureItem method with MeasureItemEventArgs which Index property equals to -1.\r\nTrying to access the ComboBox item by this index leads to System.ArgumentOutOfRangeException.\r\n\r\n``` c#\r\n    public class DerivedComboBox : ComboBox\r\n    {\r\n        public DerivedComboBox()\r\n        {\r\n            DrawMode = DrawMode.OwnerDrawVariable;\r\n        }\r\n\r\n        protected override void OnMeasureItem(MeasureItemEventArgs e)\r\n        {\r\n            var itemText = Items[e.Index].ToString(); // System.ArgumentOutOfRangeException\r\n            var measuredSize = TextRenderer.MeasureText(e.Graphics, itemText, Font);\r\n            e.ItemWidth = measuredSize.Width;\r\n            e.ItemHeight = measuredSize.Height;\r\n\r\n            base.OnMeasureItem(e);\r\n        }\r\n    }\r\n```\r\n\r\n![ComboBoxOnMeasureItemExceptionNet5](https://user-images.githubusercontent.com/61823719/83012574-4085d180-a024-11ea-8119-28af9177ae81.png)\r\n\r\n\r\n**Expected behavior:**\r\nNot to call OnMeasureItem with MeasureItemEventArgs.Index == -1.\r\n\r\n**Minimal repro:**\r\n\r\n1. Run attached app:\r\n[DerivedComboBoxTestApp.zip](https://github.com/dotnet/winforms/files/4688368/DerivedComboBoxTestApp.zip)\r\n2. Observe thrown System.ArgumentOutOfRangeException.","Url":"https://github.com/dotnet/winforms/issues/3354","RelatedDescription":"Closed issue \"Control derived from ComboBox causes application crash with System.ArgumentOutOfRangeException when override OnMeasureItem method\" (#3354)"},{"Id":"626778710","IsPullRequest":true,"CreatedAt":"2020-05-28T20:29:27","Actor":"dotnet-maestro[bot]","Number":"3362","RawContent":null,"Title":"[release/5.0-preview5] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:67c9bc50-cce6-417c-985c-08d7f21e18b5)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 67c9bc50-cce6-417c-985c-08d7f21e18b5\r\n- **Build**: 20200528.1\r\n- **Date Produced**: 5/28/2020 7:27 PM\r\n- **Commit**: 4ae4e2fe08164168a77f0a3b06091db5959fb506\r\n- **Branch**: refs/heads/release/5.0-preview5\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.CodeDom**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.Security.Permissions**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.Drawing.Common**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.5.20268.11 to 5.0.0-preview.5.20278.1\r\n\r\n[marker]: <> (End:67c9bc50-cce6-417c-985c-08d7f21e18b5)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3362)","Url":"https://github.com/dotnet/winforms/pull/3362","RelatedDescription":"Closed or merged PR \"[release/5.0-preview5] Update dependencies from dotnet/runtime\" (#3362)"},{"Id":"626503803","IsPullRequest":false,"CreatedAt":"2020-05-28T13:21:08","Actor":"weltkante","Number":"3361","RawContent":null,"Title":"Missing Control.Dispose calls in unit tests","State":"open","Body":"**.NET Core Version:**\r\ngithub master\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nn/a\r\n\r\n**Problem description:**\r\nDisposing controls in unit tests is required because the usage of multiple UI threads. If the control has not been GC'ed by the time the UI thread terminates this can lead to hangs.\r\n\r\nRelated to #3348 but this is short-term bugfixing while the other issue is long-term reliability to detect regressions in unit test quality.\r\n\r\nFollowing call sites do not dispose their controls:\r\n* [ ] AxHostTests.AxHost_EndInit_InvokeWithParent_CreatesControl\r\n* [x] ComboBoxTests.CtrlBackspaceDeletesSelection\r\n* [x] ComboBoxTests.CtrlBackspaceRepeatedTextChanged\r\n* [x] ComboBoxTests.CtrlBackspaceTextChanged\r\n* [x] ComboBoxTests.CtrlBackspaceTextRemainsEmpty\r\n* [ ] ControlControlAccessibleObject.Handle_Set_TestData\r\n* [ ] ControlControlCollectionTests.ControlCollection_Add _DifferentThreadValueControl_ThrowsArgumentException\r\n* [ ] ControlControlCollectionTests.ControlCollection_Add _DifferentThreadValueOwner_ThrowsArgumentException\r\n* [ ] ControlTests.AccessibilityObject_CustomCreateAccessibilityInstance_TestData\r\n* [ ] ControlTests.Control_Dispose_InvokeNotDisposingWithHandle_Success\r\n* [x] ListViewTests.ListView_BackColor_SetWithHandle_GetReturnsExpected\r\n* [x] ListViewTests.ListView_DoubleBuffered_SetWithHandle_GetReturnsExpected\r\n* [x] ListViewTests.ListView_FocusedItem_SetChildWithHandle_GetReturnsExpected\r\n* [x] ListViewTests.ListView_FocusedItem_SetWithHandle_GetReturnsExpected\r\n* [x] ListViewTests.ListView_ForeColor_SetWithHandle_GetReturnsExpected\r\n* [x] PictureBoxTests.PictureBox_Enabled_SetWithHandle_GetReturnsExpected\r\n* [x] PropertyGridInternal.Tests.GridViewListBoxAccessibleObjectTests\r\n.GridViewListBoxAccessibleObject_DoesNotThrowException_OnFocus\r\n* [ ] ScreenTests.FromHandle_TestData\r\n* [ ] ToolStripRenderEventArgsTests.ConnectedArea_Empty_TestData\r\n* [x] ToolTipTests.ToolTip_Show_InvokeStringIWin32WindowControlWindow_Nop\r\n* [x] ToolTipTests.ToolTip_Show_InvokeStringIWin32WindowIntControlWindow_Nop\r\n* [ ] WebBrowserTests.WebBrowserDispose_InvokeNotDisposing_Success\r\n\r\nChecked entries look like they are straightforward to fix, unchecked ones require refactoring of the tests or deeper investigation.\r\n\r\n**Expected behavior:**\r\nAll unit tests dispose their controls.\r\n\r\n**Minimal repro:**\r\nIn the absence of #3348 you can set a conditional breakpoint (or write logging code) in `NativeWindow.ForceExitMessageLoop` and check for `handle != IntPtr.Zero && ownedHandle` to detect problematic cases. To identify who created the control capture a stack trace in the NativeWindow constructor (call `new StackTrace()` and store it as a member).","Url":"https://github.com/dotnet/winforms/issues/3361","RelatedDescription":"Open issue \"Missing Control.Dispose calls in unit tests\" (#3361)"},{"Id":"626434896","IsPullRequest":false,"CreatedAt":"2020-05-28T11:29:24","Actor":"weltkante","Number":"3359","RawContent":null,"Title":"Test failure ListView_Handle_GetTextBackColor_Success in 32 bit","State":"open","Body":"**.NET Core Version:**\r\ngithub master\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nn/a\r\n\r\n**Problem description:**\r\n`ListView_Handle_GetTextBackColor_Success` fails in VS when running the 32 bit test runner, don't know why it doesn't fail in CI, I thought it used both 32 bit and 64 bit test runner?\r\n\r\n```\r\nSystem.OverflowException: 'Arithmetic operation resulted in an overflow.'\r\nThis exception was originally thrown at this call stack:\r\n    System.IntPtr.explicit operator System.IntPtr(long)\r\n    System.Windows.Forms.Tests.ListViewTests.ListView_Handle_GetTextBackColor_Success() in ListViewTests.cs\r\n```\r\nI think `(IntPtr)0xFFFFFFFF` is invalid in 32 bit\r\n\r\n**Expected behavior:**\r\n* CI should recognize the test failure without the fix\r\n* Test gets fixed\r\n\r\n**Minimal repro:**\r\nExecute the test in VS with 32 bit test runner checked","Url":"https://github.com/dotnet/winforms/issues/3359","RelatedDescription":"Open issue \"Test failure ListView_Handle_GetTextBackColor_Success in 32 bit\" (#3359)"},{"Id":"626301312","IsPullRequest":false,"CreatedAt":"2020-05-28T07:59:01","Actor":"RussKie","Number":"3358","RawContent":null,"Title":"Flaky tests: `ImageList` randomly crashes tests and result in AccessViolationException","State":"open","Body":"For the past few days I'm observing tests randomly fail in Release builds, with some builds providing **no logs** of failures.\r\nFew other logs I found are below:\r\n\r\n```\r\n    System.Windows.Forms.Tests.ImageCollectionTests.ImageCollection_IListItem_Set_GetReturnsExpected(transparentColor: Color [Empty], value: Bitmap { Flags = 2, FrameDimensionsList = [7462dc86-6180-4c7e-8e3f-ee7333a7a483], Height = 256, HorizontalResolution = 96, Palette = ColorPalette { Entries = [...], Flags = 7929940 }, ... }) [FAIL]\r\n      System.InvalidOperationException : Image cannot be added to the ImageList.\r\n      Stack Trace:\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ImageList.cs(414,0): at System.Windows.Forms.ImageList.AddToHandle(Bitmap bitmap)\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ImageList.cs(485,0): at System.Windows.Forms.ImageList.CreateHandle()\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ImageList.cs(142,0): at System.Windows.Forms.ImageList.get_Handle()\r\n        /_/src/System.Windows.Forms.Primitives/src/Interop/ComCtl32/Interop.ImageList.Replace.cs(20,0): at Interop.ComCtl32.ImageList.Replace(IHandle himl, Int32 i, IntPtr hbmImage, IntPtr hbmMask)\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ImageList.ImageCollection.cs(166,0): at System.Windows.Forms.ImageList.ImageCollection.set_Item(Int32 index, Image value)\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ImageList.ImageCollection.cs(199,0): at System.Windows.Forms.ImageList.ImageCollection.System.Collections.IList.set_Item(Int32 index, Object value)\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/ImageList.ImageCollectionTests.cs(1626,0): at System.Windows.Forms.Tests.ImageCollectionTests.ImageCollection_IListItem_Set_GetReturnsExpected(Color transparentColor, Image value)\r\n```\r\n\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\nRepeat 2 times:\r\n--------------------------------\r\n   at Interop+User32.CallWindowProcW(IntPtr, IntPtr, WM, IntPtr, IntPtr)\r\n--------------------------------\r\n   at System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.ListView.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.OnMessage(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr, WM, IntPtr, IntPtr)\r\n   at Interop+User32.SendMessageW(IntPtr, WM, IntPtr, IntPtr)\r\n   at Interop+User32.SendMessageW(IntPtr, WM, IntPtr, IntPtr)\r\n   at Interop+User32.SendMessageW(IHandle, WM, IntPtr, IntPtr)\r\n   at System.Windows.Forms.ListView.UpdateExtendedStyles()\r\n   at System.Windows.Forms.ListView.OnHandleCreated(System.EventArgs)\r\n   at System.Windows.Forms.Control.WmCreate(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.ListView.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.OnMessage(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr, WM, IntPtr, IntPtr)\r\n   at Interop+User32.CreateWindowExW(WS_EX, Char*, System.String, WS, Int32, Int32, Int32, Int32, IntPtr, IntPtr, IntPtr, System.Object)\r\n   at Interop+User32.CreateWindowExW(WS_EX, Char*, System.String, WS, Int32, Int32, Int32, Int32, IntPtr, IntPtr, IntPtr, System.Object)\r\n   at Interop+User32.CreateWindowExW(WS_EX, System.String, System.String, WS, Int32, Int32, Int32, Int32, IntPtr, IntPtr, IntPtr, System.Object)\r\n   at System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)\r\n   at System.Windows.Forms.Control.CreateHandle()\r\n   at System.Windows.Forms.ListView.CreateHandle()\r\n   at System.Windows.Forms.Control.get_Handle()\r\n   at System.Windows.Forms.Tests.ListViewTests.ListView_StateImageList_SetWithHandle_GetReturnsExpected(Boolean, Boolean, Boolean, Boolean, System.Windows.Forms.View, System.Windows.Forms.ImageList, Int32, Int32)\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at System.Reflection.MethodBase.Invoke(System.Object, System.Object[])\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CallTestMethod(System.Object)\r\n   at Xunit.Sdk.UITestInvoker+<>c__DisplayClass2_0+<<RunAsync>b__2>d.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.UITestInvoker+<>c__DisplayClass2_0+<<RunAsync>b__2>d, Xunit.StaFact, Version=1.0.0.0, Culture=neutral, PublicKeyToken=593f35978b459a4b]].ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.UITestInvoker+<>c__DisplayClass2_0+<<RunAsync>b__2>d, Xunit.StaFact, Version=1.0.0.0, Culture=neutral, PublicKeyToken=593f35978b459a4b]].MoveNext(System.Threading.Thread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Xunit.Sdk.UITestInvoker+<>c__DisplayClass2_0+<<RunAsync>b__2>d, Xunit.StaFact, Version=1.0.0.0, Culture=neutral, PublicKeyToken=593f35978b459a4b]].MoveNext()\r\n   at Xunit.Sdk.Utilities+SyncContextAwaiter+<>c.<OnCompleted>b__5_0(System.Object)\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at System.Delegate.DynamicInvokeImpl(System.Object[])\r\n   at System.Delegate.DynamicInvoke(System.Object[])\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackDo(ThreadMethodEntry)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackHelper(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallback(ThreadMethodEntry)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbacks()\r\n   at System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.OnMessage(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr, WM, IntPtr, IntPtr)\r\n   at Interop+User32.DispatchMessageW(MSG ByRef)\r\n   at Interop+User32.DispatchMessageW(MSG ByRef)\r\n   at System.Windows.Forms.Application+ComponentManager.Interop.Mso.IMsoComponentManager.FPushMessageLoop(UIntPtr, msoloop, Void*)\r\n   at System.Windows.Forms.Application+ThreadContext.RunMessageLoopInner(msoloop, System.Windows.Forms.ApplicationContext)\r\n   at System.Windows.Forms.Application+ThreadContext.RunMessageLoop(msoloop, System.Windows.Forms.ApplicationContext)\r\n   at Xunit.Sdk.WinFormsSynchronizationContextAdapter.PumpTill(System.Threading.SynchronizationContext, System.Threading.Tasks.Task)\r\n   at Xunit.Sdk.ThreadRental+<>c__DisplayClass11_0.<CreateAsync>b__0()\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```","Url":"https://github.com/dotnet/winforms/issues/3358","RelatedDescription":"Open issue \"Flaky tests: `ImageList` randomly crashes tests and result in AccessViolationException\" (#3358)"},{"Id":"626223665","IsPullRequest":false,"CreatedAt":"2020-05-28T05:21:00","Actor":"DualBrain","Number":"3356","RawContent":null,"Title":"Button component not available in Toolbox","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1 release in VS 16.6\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nThe Button component is missing from the VS Toolbox... Label (and many others are there), but no Button.\r\n\r\n**Expected behavior:**\r\n\r\nThe Button component would be available (visible) in the Toolbox.\r\n\r\n**Minimal repro:**\r\n\r\nOther than it is happening \"on my machine\", I'm not sure how to repro - I'm also not aware of any way to *reset* the Toolbox.\r\n\r\n(NOTE: I am working with WinForms in Visual Basic... so not sure if this might be related.)","Url":"https://github.com/dotnet/winforms/issues/3356","RelatedDescription":"Open issue \"Button component not available in Toolbox\" (#3356)"},{"Id":"626163334","IsPullRequest":true,"CreatedAt":"2020-05-28T04:03:04","Actor":"RussKie","Number":"3355","RawContent":null,"Title":"Relax CA1825 for tests","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3355)","Url":"https://github.com/dotnet/winforms/pull/3355","RelatedDescription":"Closed or merged PR \"Relax CA1825 for tests\" (#3355)"},{"Id":"625567102","IsPullRequest":false,"CreatedAt":"2020-05-27T10:17:22","Actor":"Amy-Li03","Number":"3353","RawContent":null,"Title":"The ImageIndex value is not automatically set to -1 after set the ImageKey property to an empty string.","State":"open","Body":"* .NET Core Version: \r\n.NET 5.0.100-preview.6.20276.4 from master branch\r\n\r\n* More info: \r\nThis is a regression issue, this issue cannot reproduce in .NET 5.0.100-preview.5.20272.9 build.\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\nThe ImageKey and ImageIndex properties are mutually exclusive, meaning if one is set, the other is ignored. But now if set the ImageKey property to an empty string, the ImageIndex property is **not** automatically set to -1.\r\n\r\n**Current behavior:**\r\nThe ImageIndex value is not automatically set to -1 after set the ImageKey property to an empty string.\r\n\r\n**Expected behavior:**\r\nThe ImageIndex value should be automatically set to -1 after set the ImageKey property to an empty string.\r\n\r\n**Minimal repro:**\r\n1. Run the attached project. \r\n[TestApp.zip](https://github.com/dotnet/winforms/files/4688068/TestApp.zip)\r\n2. Click the button1, then observe the value displayed in the message Box.","Url":"https://github.com/dotnet/winforms/issues/3353","RelatedDescription":"Open issue \"The ImageIndex value is not automatically set to -1 after set the ImageKey property to an empty string.\" (#3353)"},{"Id":"625118742","IsPullRequest":true,"CreatedAt":"2020-05-27T00:21:53","Actor":"gpetrou","Number":"3351","RawContent":null,"Title":"Add EN enum in Interop RichEdit","State":"closed","Body":"## Proposed changes\r\n\r\n- Add EN enum in Interop RichEdit.\r\n- Remove EN constants and replace their usages with the above enum values.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3351)","Url":"https://github.com/dotnet/winforms/pull/3351","RelatedDescription":"Closed or merged PR \"Add EN enum in Interop RichEdit\" (#3351)"},{"Id":"625280344","IsPullRequest":true,"CreatedAt":"2020-05-27T00:17:04","Actor":"KlausLoeffelmann","Number":"3352","RawContent":null,"Title":"Implement minimal Visual Basic Application Framework WinForms app.","State":"open","Body":"This PR adds a minimal Visual Basic WinForms app project, which uses the Visual Basic Application Framework, to the test folder.\r\n\r\n**Note:** This app is to have a central lookup spot how to activate the application framework for Visual Basic WinForms net 5.0 apps as long as there isn't a UI to setup the Application Framework parameters.\r\n\r\n**Issues:**\r\n* HighDpiMode is setup in the StartUp Application Event.\r\n* SingleInstance cannot be set, since this is currently not supported.\r\n* Changes of the Application Framework Settings can only be made directly by patching the _My project\\Application.Designer.vb_ file. Changes to _Application.myapp_ don't have any effect.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3352)","Url":"https://github.com/dotnet/winforms/pull/3352","RelatedDescription":"Open PR \"Implement minimal Visual Basic Application Framework WinForms app.\" (#3352)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-06-02T05:30:50.3104612Z","RunDurationInMilliseconds":669}