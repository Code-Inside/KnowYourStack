{"Data":{"GitHub":{"Issues":[{"Id":"2739489046","IsPullRequest":true,"CreatedAt":"2024-12-14T03:26:18","Actor":"Tanya-Solyanik","Number":"12643","RawContent":null,"Title":"preparation to validate known types","State":"closed","Body":"and removed unwrapping nullable structs the second time.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12643)","Url":"https://github.com/dotnet/winforms/pull/12643","RelatedDescription":"Closed or merged PR \"preparation to validate known types\" (#12643)"},{"Id":"2739295207","IsPullRequest":true,"CreatedAt":"2024-12-13T23:33:17","Actor":"Tanya-Solyanik","Number":"12642","RawContent":null,"Title":"Minor refactoring in DataObject-related code","State":"closed","Body":"Factored out code that reads formats that allow only restricted deserialization to run, such as OLE formats.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12642)","Url":"https://github.com/dotnet/winforms/pull/12642","RelatedDescription":"Closed or merged PR \"Minor refactoring in DataObject-related code\" (#12642)"},{"Id":"2739012029","IsPullRequest":false,"CreatedAt":"2024-12-13T19:01:05","Actor":"rickbrew","Number":"12641","RawContent":null,"Title":"Please make `Control.DesiredVisibility` public","State":"open","Body":"### Background and motivation\n\nSame as #4989 but that was closed. cc @trivalik \n\nI also think that having `DesiredVisibility` public would make many layout calculations a lot easier.\n\nThe setter for `Visible` specifies the desired visibility, but the getter provides you with the effective visibility. This isn't symmetric and is bad API design (not to shame the original devs, we've all learned a lot in the last 25 years!). There's currently no easy way, short of reflection or `[UnsafeAccessor]`, to get this information unless you keep track of it yourself on the side. Subsequent MSFT UI frameworks such as WPF did the right thing with [`Visibility`](https://learn.microsoft.com/en-us/dotnet/api/system.windows.uielement.visibility?view=windowsdesktop-9.0) vs. [`IsVisible`](https://learn.microsoft.com/en-us/dotnet/api/system.windows.uielement.isvisible?view=windowsdesktop-9.0).\n\nI have had some nasty, difficult to figure out bugs in the past where `Control.Visible` was incorrectly being assumed to mean \"desired visibility\" instead of \"effective visibility.\" The code worked fine for years until some other capabilities were added -- in this case, adding the ability to put things into nested tabs ([here are some examples](https://forums.getpaint.net/topic/121343-boltbaits-gpu-accelerated-plugin-pack-for-paintnet-v50-updated-2024-04-29/#:~:text=Screenshots%20of%20Various%20Effects) of that new functionality, cc @BoltBait). A `Control` within a tab is not `Visible` unless the tab container is `Visible` _and_ the containing tab is _selected_, and the layout calculations for the containing `Form` need to calculate the maximum layout height for all tabs so that the height of the tab container and the `Form` can be correctly determined. This needs to happen before the `Form` is shown so that it can be sized and positioned (centered) correctly. This was all very buggy, such as tabs being truncated or having scrollbars when they really shouldn't, until I realized that `Visible` was telling me the _effective_ visibility, and my layout calculations were actually only taking the first tab into account.\n\nThese layout bugs obviously do not happen when a `Control` and its containers, including the `Form`, are visible, and this makes it very difficult to figure out why layout does not work correctly before showing the dialog or adding the containing `Control`. It's also difficult to reach the conclusion that these layout bugs are because of desired vs. effective visibility. Keeping track of this on the side adds a lot of complexity and a lot more potential for bugs that are tricky to debug, especially when adding new functionality (vs. the initial development of some UI). It's a major bug hazard for developers who do not (yet) know that `Visible` is not symmetric with respect to its getter and setter.\n\nHere's another more recent example. I have a custom dialog for when an error or unhandled exception (crash) happens. It starts off in a non-expanded state, and the user can click \"Show Details\" to pop open the Details `RichTextBox` which has the exception and diagnostics information they can copy to the clipboard and post on the forum for help, or e-mail it to me, etc.\n\n![Image](https://github.com/user-attachments/assets/d47cf7e3-2b43-4000-9e95-68ad415a203c)\n\n![Image](https://github.com/user-attachments/assets/d7a5746f-187a-4d67-bc83-f6bbed84cb34)\n\nIn my latest update, v5.1, there have been a lot of changes to how my app (Paint.NET) uses Direct2D/3D/DXGI/etc and this has resulted in hangs and crashes for some folks. It is almost always some other app that was injecting DLLs and hooking DirectX or causing other crashes or hangs for any number of other reasons (ever hear of [Sentinel One](https://x.com/rickbrewPDN/status/1856814013923168282), or [Nahimic/A-Volute](https://x.com/rickbrewPDN/status/1857583048147206613)? ðŸ˜¬). In these cases there was no crash at all (because it was a hang), or no crash at a time when the error dialog (with diagnostics info) could be shown, so we had to advise people to use the portable release of the previous version of the app in order to go to Settings -> Diagnostics -> Copy to Clipboard and get this information. The diagnostics information includes the list of managed assemblies and native modules (DLLs) loaded in the process, and the presence of various DLLs is a very visible smoking gun towards what the user needs to do to fix the problem.\n\nI'm now adding a `/diagnostics` command-line parameter so that this information can be retrieved without needing to boot up the app, which means hangs at startup shouldn't complicate troubleshooting as much. I want this error dialog w/ diagnostics info to open up pre-expanded, but the layout calculations use `Control.Visible`, so it ends up being centered incorrectly:\n\n![Image](https://github.com/user-attachments/assets/88a9220d-83af-4c24-b64a-302afeaed023)\n\nThis happens because I need to asynchronously simulate a click on the Show Details button in an event handler for `Form.Shown`. If I just set my `IsDetailsTextVisible` property to `true` then the resulting layout code does all sorts of wrong things because it uses `Control.Visible` for various purposes.\n\nFixing this is easy if I access the `DesiredVisibility` property via `[UnsafeAccessor]` and switch away from using `Visible` in this layout code. I can then do all the layout before the `Form` is visible which then results in it being centered correctly when it is shown. I initially tried to keep track of this info on the side but quickly realized I would have to spend a few hours debugging to get it to work, and to then re-test and debug all the scenarios that this dialog is used for. So for now I'm just using `[UnsafeAccessor]` because I do not want this functionality to soak up a full day or three of my time. I would much rather use a public property that doesn't have the risk of breaking because it got renamed, refactored, or removed.\n\n### API Proposal\n\n```csharp\nnamespace System.Windows.Forms;\n\npublic class Control\n{\n    public bool DesiredVisibility { get; } // (I don't actually care what the property is named)\n}\n```\n\n\n### API Usage\n\nThis will permit layout code to work before the `Control` and its containers and `Form` are visible, e.g.\n\n```cs\npublic bool IsDetailsBoxVisible\n{\n    get => this.detailsTextBox.DesiredVisibility;\n\n    set => this.detailsTextBox.Visible = true; // might also need a `PerformLayout()` call\n}\n\nprotected override void OnLayout(LayoutEventArgs levent)\n{\n    if (this.detailsTextBox.DesiredVisibility)\n    {\n        ... set size, text, and visibility of related controls, including the size of the Form itself ...\n    }\n    \n    base.OnLayout(levent);\n}\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nThis functionality already exists, this proposal is just changing `internal` to `public`, so I'm not sure there's much risk. This property is already used internally by WinForms so I expect that it is working as expected.\n\n### Will this feature affect UI controls?\n\nI expect this will mostly need some extra details in the documentation for `Visible` saying that you need to use `DesiredVisibility` to retrieve the same value you passed to `set_Visible`. Since it's a read only property I'm not sure the designer will be affected.","Url":"https://github.com/dotnet/winforms/issues/12641","RelatedDescription":"Open issue \"Please make `Control.DesiredVisibility` public\" (#12641)"},{"Id":"2738349458","IsPullRequest":true,"CreatedAt":"2024-12-13T13:42:08","Actor":"dotnet-maestro[bot]","Number":"12640","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20241212.4\r\n- **Date Produced**: December 13, 2024 12:06:27 AM UTC\r\n- **Commit**: 1e161ed635ca19f61b1ddddee61b0bfc995fd716\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24611.4 to 10.0.0-beta.24612.4][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.24611.4 to 10.0.0-beta.24612.4][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.24611.4 to 10.0.0-beta.24612.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24611.4 to 10.0.0-beta.24612.4][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.24611.4 to 10.0.0-beta.24612.4][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24611.4 to 10.0.0-beta.24612.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/b9e1dd7c1e...1e161ed635\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12640)","Url":"https://github.com/dotnet/winforms/pull/12640","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#12640)"},{"Id":"2738035261","IsPullRequest":false,"CreatedAt":"2024-12-13T10:17:17","Actor":"MelonWang1","Number":"12639","RawContent":null,"Title":"[AccessibilityInsight] Sometimes, the focus rectangle focus on property's edit part when using up/down to switch property items in PropertyGrid","State":"open","Body":"### .NET version\n\n.NET 10.0.100-alpha.1.24611.5\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, cannot repro in .NET 8.0. Also repro in .NET 9.0 + binaries built from release/9.0 branch of winforms repro. And caused by PR[12479](https://github.com/dotnet/winforms/pull/12479).\n\n### Issue description\n\nSometimes, the focus rectangle focus on property's edit part when using up/down to switch property items in PropertyGrid .\n\n\n**Actual result:** \n\nThe focus rectangle sometimes focus to edit part. \n![Image](https://github.com/user-attachments/assets/2708df5e-e23a-4dd0-abbc-ee473a59d14f)\n\nhttps://github.com/user-attachments/assets/2e4960a8-bcf5-4307-8fdd-529d3b38aeef\n\n**Expected result:** \n\nThe focus rectangle always focus to property item. \n\nhttps://github.com/user-attachments/assets/e581045c-aeb9-4bc8-9c4a-275293f88037\n\n**More info:** \n\n1. This issue cannot repro in Inspect/Narrtor/NVDA tool. \n\n2. This issue also repro in go through the drop down list item using up/down keyboard. \n ![Image](https://github.com/user-attachments/assets/f6e97ad6-5f98-4cd2-b411-f492a53aa890)\n\n\n### Steps to reproduce\n\n\n1. Create a .NET Core Winforms project. \n2. Add a TextBox and PropertyGrid controls in form designer. \n3. Set the SelectedObject property to TextBox1 in propertyGrid1 control. \n4. Build and run project. \n5. Open Accessible Insight tool and select anyone property in propertyGrid control. \n6. Press up/down keyboard.","Url":"https://github.com/dotnet/winforms/issues/12639","RelatedDescription":"Open issue \"[AccessibilityInsight] Sometimes, the focus rectangle focus on property's edit part when using up/down to switch property items in PropertyGrid\" (#12639)"},{"Id":"2737846759","IsPullRequest":true,"CreatedAt":"2024-12-13T08:49:51","Actor":"LeafShi1","Number":"12638","RawContent":null,"Title":"Update the drawing position of the Treeview control text","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12601\r\n\r\n\r\n## Proposed changes\r\n\r\n- Update the drawing position of the Treeview control text\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- The check box of the TreeView control can be fully displayed\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nCreate a form, add a TreevView with CheckBoxes=true and DrawMode=OwnerDrawText\r\nIn OnDrawNode event only set DrawDefault=true\r\nShow the form: checkboxes are shown corrupted on the right border\r\n![Image](https://github.com/user-attachments/assets/7d040abd-344c-4403-b7a3-b7659d247935)\r\n\r\n### After\r\nThe checkbox of the Treeview control can be fully displayed\r\n![image](https://github.com/user-attachments/assets/2a02ec83-81ab-48be-bd37-62faf8f6e7c4)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .net 10.0.0-alpha.1.24611.1\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12638)","Url":"https://github.com/dotnet/winforms/pull/12638","RelatedDescription":"Open PR \"Update the drawing position of the Treeview control text\" (#12638)"},{"Id":"2737723122","IsPullRequest":false,"CreatedAt":"2024-12-13T08:02:09","Actor":"Liv-Goh","Number":"12637","RawContent":null,"Title":"ListBox.IndexFromPoint should be Int32 but currently is Int16","State":"open","Body":"### .NET version\n\n.NET 10\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, this issue can repro on .NET 6.0\n\n### Issue description\n\nAccording to documentation, List Box [IndexFromPoint](https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.listbox.indexfrompoint?view=windowsdesktop-9.0) should be Int32 but in tested result is Int16 because the max value is 65535.\n\n**Current behavior** \n- The IndexFromPoint is currently Int16, the max value is 65535\n- If hold and drag the scroll bar exceeding item 65535, the top index will switch to the previous set of IndexFromPoint position\n\nhttps://github.com/user-attachments/assets/5aebad94-e9b3-4e01-9d06-f8a19ffb7a44\n\n**Expected behavior**\n- The IndexFromPoint should be Int32 based on the documentation, the max value should be 4,294,967,295\n- If hold and drag the scroll bar exceeding item 65535, the top index should not be affected\n\n### Steps to reproduce\n\n1. Extract and run [IndexFromPointIssue.zip](https://github.com/user-attachments/files/18123050/IndexFromPointIssue.zip)\n2. Try to click on the item to check the index\n3. Click 65535 button to go to 65535th item\n4. Click the 65536 item and observe its index \n5. Hold and drag the cursor to bottom and observe the listbox behavior\n\n### More Info\nThis issue is from feedback ticket [FeedbackTicket 2318021 Visual Studio 2022 Visual Basic Listbox bug](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2318021)","Url":"https://github.com/dotnet/winforms/issues/12637","RelatedDescription":"Open issue \"ListBox.IndexFromPoint should be Int32 but currently is Int16\" (#12637)"},{"Id":"2737230207","IsPullRequest":true,"CreatedAt":"2024-12-13T02:19:08","Actor":"LeafShi1","Number":"12636","RawContent":null,"Title":"Correct the assignment of the constant TreeNodeCollectionAddRangeRespectsSortOrder in WinFormsAppContextSwitchNames.cs","State":"open","Body":"Correct the assignment of the constant TreeNodeCollectionAddRangeRespectsSortOrder in WinFormsAppContextSwitchNames.cs\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12636)","Url":"https://github.com/dotnet/winforms/pull/12636","RelatedDescription":"Open PR \"Correct the assignment of the constant TreeNodeCollectionAddRangeRespectsSortOrder in WinFormsAppContextSwitchNames.cs\" (#12636)"},{"Id":"2737201676","IsPullRequest":true,"CreatedAt":"2024-12-13T01:48:44","Actor":"Tanya-Solyanik","Number":"12635","RawContent":null,"Title":"replaced end of sentence dot followed by 2 spaces with a dot with a single space","State":"open","Body":"I ran this regex on winforms and design projects, on .cs and .resx files\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12635)","Url":"https://github.com/dotnet/winforms/pull/12635","RelatedDescription":"Open PR \"replaced end of sentence dot followed by 2 spaces with a dot with a single space\" (#12635)"},{"Id":"2736871495","IsPullRequest":true,"CreatedAt":"2024-12-13T01:31:58","Actor":"JeremyKuhne","Number":"12633","RawContent":null,"Title":"Move all GDI+ specific interop to System.Private.Windows.GdiPlus","State":"closed","Body":"This removes the risk of not properly initializing GDI+ before calling native methods. It also removes the risk of inadvertently loading GDI+ in WPF. Lastly, it reduces the footprint for WPF.\r\n\r\nThe new project is not under a second `src` folder as we're going to move all tests to the root under `tests`. This allows for better build file structure (Directory.*, etc.) and helps some with MAX_PATH constraints.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12633)","Url":"https://github.com/dotnet/winforms/pull/12633","RelatedDescription":"Closed or merged PR \"Move all GDI+ specific interop to System.Private.Windows.GdiPlus\" (#12633)"},{"Id":"2734410422","IsPullRequest":true,"CreatedAt":"2024-12-13T01:01:29","Actor":"Tanya-Solyanik","Number":"12629","RawContent":null,"Title":"Added resource to SR file for the clipboard APIs","State":"closed","Body":"\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12629)","Url":"https://github.com/dotnet/winforms/pull/12629","RelatedDescription":"Closed or merged PR \"Added resource to SR file for the clipboard APIs\" (#12629)"},{"Id":"2736956947","IsPullRequest":false,"CreatedAt":"2024-12-12T21:57:13","Actor":"Tanya-Solyanik","Number":"12634","RawContent":null,"Title":"Upgrade PublishCodeCoverageResults@1 to PublishCodeCoverageResults@2","State":"open","Body":"Update the [build.yml ](https://github.com/dotnet/winforms/blob/main/eng/pipelines/build.yml#L145-#L153)file  to use PublishCodeCoverageResults@2 task.\n\nCurrently we are getting warnings in CI in Initialize job:\n```\nDownloading task: PublishCodeCoverageResults (1.248.1)\n##[warning]Task 'Publish code coverage' version 1 (PublishCodeCoverageResults@1) is deprecated.\n##[warning]The PublishCodeCoverageResults@1 is deprecated. Users are recommended to switch to task version 2. For more details, see https://devblogs.microsoft.com/devops/new-pccr-task\nDownloading task: PublishBuildArtifacts (1.247.1)\nDownloading task: PublishTestResults (2.247.1)\n```\nDetails https://devblogs.microsoft.com/devops/new-pccr-task/","Url":"https://github.com/dotnet/winforms/issues/12634","RelatedDescription":"Open issue \"Upgrade PublishCodeCoverageResults@1 to PublishCodeCoverageResults@2\" (#12634)"},{"Id":"2736585029","IsPullRequest":true,"CreatedAt":"2024-12-12T19:06:44","Actor":"Tanya-Solyanik","Number":"12632","RawContent":null,"Title":"Fixed the autoConvert default values in DataObject.TryGetData","State":"closed","Body":"Fixed the autoConvert default values in DataObject.TryGetData  to match default values from DataObject.GetData\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12632)","Url":"https://github.com/dotnet/winforms/pull/12632","RelatedDescription":"Closed or merged PR \"Fixed the autoConvert default values in DataObject.TryGetData\" (#12632)"},{"Id":"2735839889","IsPullRequest":true,"CreatedAt":"2024-12-12T13:42:08","Actor":"dotnet-maestro[bot]","Number":"12630","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20241211.4\r\n- **Date Produced**: December 12, 2024 6:20:52 AM UTC\r\n- **Commit**: b9e1dd7c1e1d05679831467cd3c051b9f8f84460\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24610.2 to 10.0.0-beta.24611.4][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.24610.2 to 10.0.0-beta.24611.4][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.24610.2 to 10.0.0-beta.24611.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24610.2 to 10.0.0-beta.24611.4][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.24610.2 to 10.0.0-beta.24611.4][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24610.2 to 10.0.0-beta.24611.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/d5c8bb8726...b9e1dd7c1e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12630)","Url":"https://github.com/dotnet/winforms/pull/12630","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#12630)"},{"Id":"2735840604","IsPullRequest":true,"CreatedAt":"2024-12-12T13:02:07","Actor":"dotnet-maestro[bot]","Number":"12631","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20241213.1\r\n- **Date Produced**: December 13, 2024 11:04:11 AM UTC\r\n- **Commit**: 1622f514684d94a521bfb41c88a27079ad943ee7\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.CodeDom**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.ComponentModel.Composition**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Data.Odbc**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Data.OleDb**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Diagnostics.EventLog**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.DirectoryServices**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Formats.Nrbf**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.IO.Hashing**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.IO.Packaging**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.IO.Ports**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Management**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Reflection.Context**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Resources.Extensions**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Runtime.Caching**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Security.Permissions**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.ServiceModel.Syndication**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Speech**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Text.Encodings.Web**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Text.Json**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Threading.AccessControl**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **System.Windows.Extensions**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24613.1][2]\r\n\r\n[2]: https://github.com/dotnet/runtime/compare/aa9cd3b323...1622f51468\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12631)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/12631","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/runtime\" (#12631)"},{"Id":"2734262263","IsPullRequest":true,"CreatedAt":"2024-12-12T00:28:23","Actor":"JeremyKuhne","Number":"12628","RawContent":null,"Title":"Tweak Scratch projects and add WPF visibility for SPWC","State":"closed","Body":"Couple of minor tweaks to the scratch projects for ease of use.\r\n\r\nAlso add System.Printing for visibility of System.Private.Windows.Core.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12628)","Url":"https://github.com/dotnet/winforms/pull/12628","RelatedDescription":"Closed or merged PR \"Tweak Scratch projects and add WPF visibility for SPWC\" (#12628)"},{"Id":"2731882285","IsPullRequest":false,"CreatedAt":"2024-12-12T00:27:06","Actor":"carlreinke","Number":"12623","RawContent":null,"Title":"`Graphics.DrawRectangle` throws `OutOfMemoryException`","State":"closed","Body":"### .NET version\n\n`net9.0-windows`\n\n### Did it work in .NET Framework?\n\nNot tested/verified\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nWhen using a certain pen, `Graphics.DrawRectangle` throws `OutOfMemoryException` when drawing a 1x1 rectangle.\n\n### Steps to reproduce\n\n1. Create a new WinFormsApp project.\n2. In the form code, add the following:\n    ```C#\n    protected override void OnPaint(PaintEventArgs e)\n    {\n        base.OnPaint(e);\n\n        using (var pen = new Pen(Color.Black))\n        {\n            pen.DashPattern = [4, 4];\n            pen.DashOffset = 4;\n\n            e.Graphics.DrawRectangle(pen, 0, 0, 1, 1);\n        }\n    }\n    ```\n3. Run the project.","Url":"https://github.com/dotnet/winforms/issues/12623","RelatedDescription":"Closed issue \"`Graphics.DrawRectangle` throws `OutOfMemoryException`\" (#12623)"},{"Id":"2734242105","IsPullRequest":false,"CreatedAt":"2024-12-11T23:29:43","Actor":"JeremyKuhne","Number":"12627","RawContent":null,"Title":"Stop throwing OutOfMemoryException for GDI+ errors in System.Drawing","State":"open","Body":"GDI+ returns [`Status.OutOfMemory`](https://learn.microsoft.com/windows/win32/api/gdiplustypes/ne-gdiplustypes-status) for many general purpose errors. This is deeply confusing for users and almost never happens due to an actual lack of memory.\n\nI'm inclined to change this behavior to always throw `InvalidOperationException` with a message along the lines of:\n\n> GDI+ returned Status.OutOfMemory. This is usually a general error and not a lack of memory.\n\nI can't know for sure that there isn't a low memory situation, but if it is other things are likely to fail imminently for lack of memory anyway.\n\nI'd offer an `AppContext` opt-out switch that would throw with the old behavior.","Url":"https://github.com/dotnet/winforms/issues/12627","RelatedDescription":"Open issue \"Stop throwing OutOfMemoryException for GDI+ errors in System.Drawing\" (#12627)"},{"Id":"2732924480","IsPullRequest":true,"CreatedAt":"2024-12-11T17:05:54","Actor":"dotnet-maestro[bot]","Number":"12626","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20241211.1\r\n- **Date Produced**: December 11, 2024 11:48:45 AM UTC\r\n- **Commit**: aa9cd3b3234ef5bfe7d6037016bd7e6b8f991a5e\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.CodeDom**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.ComponentModel.Composition**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Data.Odbc**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Data.OleDb**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.DirectoryServices**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Formats.Nrbf**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.IO.Hashing**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.IO.Packaging**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.IO.Ports**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Management**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Reflection.Context**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Resources.Extensions**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Runtime.Caching**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Security.Permissions**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.ServiceModel.Syndication**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Speech**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Text.Encodings.Web**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Text.Json**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Threading.AccessControl**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **System.Windows.Extensions**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-alpha.1.24610.2 to 10.0.0-alpha.1.24611.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/920a17ac91...aa9cd3b323\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12626)","Url":"https://github.com/dotnet/winforms/pull/12626","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#12626)"},{"Id":"2732923770","IsPullRequest":true,"CreatedAt":"2024-12-11T13:37:29","Actor":"dotnet-maestro[bot]","Number":"12625","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20241210.2\r\n- **Date Produced**: December 10, 2024 11:22:08 AM UTC\r\n- **Commit**: d5c8bb8726b46b5867961f5d8f56f1b13e72dcb9\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24609.8 to 10.0.0-beta.24610.2][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.24609.8 to 10.0.0-beta.24610.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.24609.8 to 10.0.0-beta.24610.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24609.8 to 10.0.0-beta.24610.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.24609.8 to 10.0.0-beta.24610.2][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24609.8 to 10.0.0-beta.24610.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/1fba3c5407...d5c8bb8726\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12625)","Url":"https://github.com/dotnet/winforms/pull/12625","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#12625)"},{"Id":"2732168756","IsPullRequest":true,"CreatedAt":"2024-12-11T08:06:03","Actor":"LeafShi1","Number":"12624","RawContent":null,"Title":"Add AppContext switch 'UseSystemRenderingModeAsDefault' for StatusStrip","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12616\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add an opt-out AppContext switch 'UseSystemRenderingModeAsDefault' for StatusStrip control to restore the default value that was used in the past (.NET Framework to .NET8). The problem with that default value was that it wasn't accessible. Our goal is to have default versions of our control as accessible as possible without the knowledge of business logic. \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customer can use the switch `UseSystemRenderingModeAsDefault `decide whether to use the `ToolStripRenderMode.System` as the default painting style for the StatusStrip control\r\n\r\n## Regression? \r\n\r\n- Yes \r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\nA white line in the dialog when using StatusStrip\r\n<img width=\"251\" alt=\"image\" src=\"https://github.com/user-attachments/assets/ed22666a-f70f-46eb-87ef-fc7c7e7f10b9\">\r\n\r\n\r\n### After\r\nNo extra white line the dialog\r\n<img width=\"233\" alt=\"image\" src=\"https://github.com/user-attachments/assets/cf28ca25-c665-4154-a0d3-eb3210e52de7\">\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit test and manually\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n-  .net 10.0.0-alpha.1.24606.5\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12624)","Url":"https://github.com/dotnet/winforms/pull/12624","RelatedDescription":"Open PR \"Add AppContext switch 'UseSystemRenderingModeAsDefault' for StatusStrip\" (#12624)"},{"Id":"2731676971","IsPullRequest":true,"CreatedAt":"2024-12-11T02:43:19","Actor":"Zheng-Li01","Number":"12622","RawContent":null,"Title":"Add code coverage for DataGridViewCellConverter","State":"open","Body":"related https://github.com/dotnet/winforms/issues/10453\r\n\r\n# Proposed changes\r\nAdd unit tests for DataGridViewCellConverter.cs to test its methods\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12622)","Url":"https://github.com/dotnet/winforms/pull/12622","RelatedDescription":"Open PR \"Add code coverage for DataGridViewCellConverter\" (#12622)"},{"Id":"2730944749","IsPullRequest":true,"CreatedAt":"2024-12-11T00:20:55","Actor":"Tanya-Solyanik","Number":"12620","RawContent":null,"Title":"Removed BitmapBinder because it was made redundant by us reading/writing primitive and known types manually","State":"closed","Body":"The purpose of BitmapBinder was to restrict binary formatter deserialization for known formats that should not accept managed types other than primitives or bitmaps. All types that are allowed by the BitmapBinder are supported as \"common, known\" types and are serialized by writing the serialization record manually, not by calling the BinaryFormatter. We read some other types, such as collections as the common ones, but these have been read in NET9 as well, and are not a security issue. Currently this binder is used only in the failure cases to raise a special exception that indicates that we should not read the data again (used to set doNotContinue). The read difference is that we don't enter the serialization and deserialization code now.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12620)","Url":"https://github.com/dotnet/winforms/pull/12620","RelatedDescription":"Closed or merged PR \"Removed BitmapBinder because it was made redundant by us reading/writing primitive and known types manually\" (#12620)"},{"Id":"2731432333","IsPullRequest":true,"CreatedAt":"2024-12-10T23:54:16","Actor":"JeremyKuhne","Number":"12621","RawContent":null,"Title":"Move NoAssertContext to Core test utilities","State":"closed","Body":"This will allow it to be used in WPF as well.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12621)","Url":"https://github.com/dotnet/winforms/pull/12621","RelatedDescription":"Closed or merged PR \"Move NoAssertContext to Core test utilities\" (#12621)"},{"Id":"2730722833","IsPullRequest":true,"CreatedAt":"2024-12-10T22:46:33","Actor":"Tanya-Solyanik","Number":"12619","RawContent":null,"Title":"Ensure memory is freed on a serialization failure in the cipboard","State":"closed","Body":"1. Ensure that HGLOBAL is freed when a serialization exception is thrown when flushing data to the clipboard. Before the change we were always allocating it but freeing only when an HR failure was returned.\r\n2. Ensure that we don't attempt deserialization if we couldn't serialize data from the inproc scenario\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12619)","Url":"https://github.com/dotnet/winforms/pull/12619","RelatedDescription":"Closed or merged PR \"Ensure memory is freed on a serialization failure in the cipboard\" (#12619)"},{"Id":"2730065581","IsPullRequest":true,"CreatedAt":"2024-12-10T13:42:39","Actor":"dotnet-maestro[bot]","Number":"12618","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20241210.2\r\n- **Date Produced**: December 10, 2024 12:33:42 PM UTC\r\n- **Commit**: 920a17ac91440abb5b34109104e72da77ec58b59\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.CodeDom**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.ComponentModel.Composition**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Data.Odbc**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Data.OleDb**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.DirectoryServices**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Formats.Nrbf**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.IO.Hashing**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.IO.Packaging**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.IO.Ports**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Management**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Reflection.Context**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Resources.Extensions**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Runtime.Caching**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Security.Permissions**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.ServiceModel.Syndication**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Speech**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Text.Encodings.Web**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Text.Json**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Threading.AccessControl**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **System.Windows.Extensions**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-alpha.1.24609.1 to 10.0.0-alpha.1.24610.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/b085dadd16...920a17ac91\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12618)","Url":"https://github.com/dotnet/winforms/pull/12618","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#12618)"},{"Id":"2730064806","IsPullRequest":true,"CreatedAt":"2024-12-10T13:42:09","Actor":"dotnet-maestro[bot]","Number":"12617","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20241209.8\r\n- **Date Produced**: December 10, 2024 1:30:06 AM UTC\r\n- **Commit**: 1fba3c5407537249f8c55332cd3d1ac81c39fdb2\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24606.6 to 10.0.0-beta.24609.8][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.24606.6 to 10.0.0-beta.24609.8][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.24606.6 to 10.0.0-beta.24609.8][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24606.6 to 10.0.0-beta.24609.8][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.24606.6 to 10.0.0-beta.24609.8][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24606.6 to 10.0.0-beta.24609.8][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/61b8f74642...1fba3c5407\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12617)","Url":"https://github.com/dotnet/winforms/pull/12617","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#12617)"},{"Id":"2729347551","IsPullRequest":false,"CreatedAt":"2024-12-10T07:44:46","Actor":"hmisaki","Number":"12616","RawContent":null,"Title":"A unexpected white line in StatusStrip compoent in dotnet 9","State":"open","Body":"### Description\n\nIf a dialog with a dark background and used StatusStrip. Then move the code from dotnet 8 to dotnet 9. There are many unexpected white lines in our dialog.\n![Image](https://github.com/user-attachments/assets/985a6e50-ae45-4409-8844-ed1778066f2e)\nbut if we build our project with dotnet 8. there will be good:\n![Image](https://github.com/user-attachments/assets/d140b1a4-fdb6-4794-b6a0-8823a5a0f6d8)\n\n\n### Reproduction Steps\n\n1. create a Winform app with dotnet 9.\n2. add componts `StatusStrip `and `ToolStripStatusLabel`\n3. set the dialog and StatusStrip back color to a grey color, for example:\n```\nthis.BackColor = Color.FromArgb(255,59,68,83);\nstatusStrip1.BackColor = BackColor;\n```\n4. build the project and run the test app.\n\n\n### Expected behavior\n\nGet a grey dialog and a grey StatusStrip\nfor example:\n![Image](https://github.com/user-attachments/assets/df5df03d-08a4-4380-9054-865388f433f5)\n\n\n### Actual behavior\n\na white line in the dialog\n![Image](https://github.com/user-attachments/assets/e4178f52-5fb1-405a-9029-ea46a756dcde)\n\n\n\n### Regression?\n\nIt's fine in dotnet 8.\n\n### Known Workarounds\n\nno\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/12616","RelatedDescription":"Open issue \"A unexpected white line in StatusStrip compoent in dotnet 9\" (#12616)"},{"Id":"2728613581","IsPullRequest":true,"CreatedAt":"2024-12-10T01:13:42","Actor":"JeremyKuhne","Number":"12614","RawContent":null,"Title":"Add additional error defines","State":"closed","Body":"Add a number of additional defines that are coming up in WPF.\r\n\r\nAlso add a few more NTSTATUS related helpers to HRESULT.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12614)","Url":"https://github.com/dotnet/winforms/pull/12614","RelatedDescription":"Closed or merged PR \"Add additional error defines\" (#12614)"},{"Id":"2728658230","IsPullRequest":true,"CreatedAt":"2024-12-10T01:00:35","Actor":"paul1956","Number":"12615","RawContent":null,"Title":"Use Generic Overloads in VB Code","State":"open","Body":"## Proposed changes\r\nCleanup new suggestions in VB caused by latest merge\r\n \r\n## Customer Impact\r\n-Developer Only, removes noise in Error Window\r\n\r\n## Regression? \r\n- Yes\r\n\r\n## Risk\r\n- None 100% Coverage\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12615)","Url":"https://github.com/dotnet/winforms/pull/12615","RelatedDescription":"Open PR \"Use Generic Overloads in VB Code\" (#12615)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-12-14T03:30:30.3752864Z","RunDurationInMilliseconds":433}