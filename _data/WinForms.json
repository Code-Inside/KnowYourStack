{"Data":{"GitHub":{"Issues":[{"Id":"1555850868","IsPullRequest":true,"CreatedAt":"2023-01-25T00:05:58","Actor":"elachlan","Number":"8522","RawContent":null,"Title":"Fix control select and exception when moving controls","State":"open","Body":"Related: #8515\r\n\r\nI have fixed the exceptions in `DropSourceBehavior` and `SelectionUIService`. But the resize via the editor still doesn't work.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8522)","Url":"https://github.com/dotnet/winforms/pull/8522","RelatedDescription":"Open PR \"Fix control select and exception when moving controls\" (#8522)"},{"Id":"1555772033","IsPullRequest":false,"CreatedAt":"2023-01-24T22:37:19","Actor":"runfoapp[bot]","Number":"8521","RawContent":null,"Title":"Flaky test: Com2Interop.COM2FontConverterTests.COM2FontConverter_ConvertManagedToNative","State":"open","Body":"<!-- runfo report start -->\r\nRunfo Tracking Issue: [Flaky test: Com2Interop.COM2FontConverterTests.COM2FontConverter_ConvertManagedToNative](https://runfo.azurewebsites.net/tracking/issue/449)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n|[147093](https://dev.azure.com/dnceng-public/public/_build/results?buildId=147093)|[dotnet-winforms CI](https://dnceng-public.visualstudio.com/public/_build?definitionId=76)|[PR 8519](https://github.com/dotnet/winforms/pull/8519)|Windows_x86-xunit|\r\n|[146884](https://dev.azure.com/dnceng-public/public/_build/results?buildId=146884)|[dotnet-winforms CI](https://dnceng-public.visualstudio.com/public/_build?definitionId=76)|[PR 8518](https://github.com/dotnet/winforms/pull/8518)|Windows_x86-xunit|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|2|2|2|\r\n\r\n<!-- runfo report end -->\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/8521","RelatedDescription":"Open issue \"Flaky test: Com2Interop.COM2FontConverterTests.COM2FontConverter_ConvertManagedToNative\" (#8521)"},{"Id":"1555637037","IsPullRequest":false,"CreatedAt":"2023-01-24T20:41:14","Actor":"runfoapp[bot]","Number":"8520","RawContent":null,"Title":"Flaky Test: System.Windows.Forms.Tests.CursorTests.Cursor_ToString_CursorFromFile_ReturnsExpected","State":"open","Body":"<!-- runfo report start -->\r\nRunfo Tracking Issue: [Flaky Test: System.Windows.Forms.Tests.CursorTests.Cursor_ToString_CursorFromFile_ReturnsExpected](https://runfo.azurewebsites.net/tracking/issue/448)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n|[147093](https://dev.azure.com/dnceng-public/public/_build/results?buildId=147093)|[dotnet-winforms CI](https://dnceng-public.visualstudio.com/public/_build?definitionId=76)|[PR 8519](https://github.com/dotnet/winforms/pull/8519)|Windows_x86-xunit|\r\n|[145261](https://dev.azure.com/dnceng-public/public/_build/results?buildId=145261)|[dotnet-winforms CI](https://dnceng-public.visualstudio.com/public/_build?definitionId=76)|[PR 8474](https://github.com/dotnet/winforms/pull/8474)|Windows_x64-xunit|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|1|2|2|\r\n\r\n<!-- runfo report end -->\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/8520","RelatedDescription":"Open issue \"Flaky Test: System.Windows.Forms.Tests.CursorTests.Cursor_ToString_CursorFromFile_ReturnsExpected\" (#8520)"},{"Id":"1555557275","IsPullRequest":true,"CreatedAt":"2023-01-24T19:37:25","Actor":"dreddy-work","Number":"8519","RawContent":null,"Title":"Enable Thread's DPI hostign behavior for mixed mode DPI applications.","State":"open","Body":"fixes #8144 \r\n\r\nWinForms now supports mixed mode DPI scenarios for applications hosted in Visual Studio. This requires the explicit alteration of default [hosting behavior](https://learn.microsoft.com/en-us/windows/win32/api/windef/ne-windef-dpi_hosting_behavior) on the threads creating the main UI, which Visual Studio has done to allow for mixed mode DPI child elements while in PermonitorV2 DPI mode.\r\n\r\n However, when investigating issue #8144, it was found that WinForms control parenting was failing in the designer within Visual Studio due to threads creating WinForms controls not enabling mixed mode hosting, resulting in a failure to build the parenting hierarchy when the DpiAwarenessContext differs, and not yet parented to Visual Studio. \r\n\r\nTo support mixed mode DPI outside of Visual Studio hosting or WinForms standalone applications, mixed mode DPI hosting needs to be enabled on the threads that creating windows in WinForms.\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8519)","Url":"https://github.com/dotnet/winforms/pull/8519","RelatedDescription":"Open PR \"Enable Thread's DPI hostign behavior for mixed mode DPI applications.\" (#8519)"},{"Id":"1531273772","IsPullRequest":true,"CreatedAt":"2023-01-24T18:43:43","Actor":"dotnet-bot","Number":"8499","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2090416","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8499)","Url":"https://github.com/dotnet/winforms/pull/8499","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2090416\" (#8499)"},{"Id":"1554950474","IsPullRequest":true,"CreatedAt":"2023-01-24T18:10:26","Actor":"dotnet-maestro[bot]","Number":"8517","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230123.10\r\n- **Date Produced**: January 24, 2023 11:09:02 AM UTC\r\n- **Commit**: ae70a1c51a334a5e13fa22d500f8a8390052eef5\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/a272954...ae70a1c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8517)","Url":"https://github.com/dotnet/winforms/pull/8517","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8517)"},{"Id":"1555413202","IsPullRequest":true,"CreatedAt":"2023-01-24T17:53:09","Actor":"dkazennov","Number":"8518","RawContent":null,"Title":"Removed extra code for the ListBox.ItemHeight property","State":"open","Body":"Fixes #4463\r\n\r\n## Proposed changes\r\n\r\n- Introduces a new private property `DefaultHeight` with **the intended value** equals Winforms Control.DefaultFont.Height (for example in Windows.Forms it is **Segoe UI, Size 9, Height 16** by default).\r\n- Removes the DefaultValue attribute from the `ListBox.ItemHeight` property;\r\n- Implements `ResetItemHeight` and `ShouldSerializeItemHeight` methods ([see more](https://learn.microsoft.com/en-us/dotnet/desktop/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods?view=netframeworkdesktop-4.8)).\r\n- The ListBox.DefaultItemHeight constant marked as obsolete. The `ListBox.ItemHeight` is now depended on actual `DefaultFont.Height` value.\r\n- The `ListBox.ItemHeight` property still returns the value of the  `_itemHeight` property as usual.\r\n- Existing unit tests weren't changed.\r\n- New unit test `ListBox_Height_IsEqualDefaultHeight_IfDefaultFontIsChanged` is added.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Fixes the Issue which impacts user experience,  breaks DPI and Font scaling. For the _newly created_ control at 100% scaling, designer should generate the same value as is defined by the Default. There is no extra code.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/104525385-e63a8080-55b4-11eb-8018-1cd886b658a0.png)\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/104525352-d1f68380-55b4-11eb-9bf4-fafbf11c85f4.png)\r\n\r\n\r\n## Test methodology\r\n\r\n- Manual (Issue can be tested via substitution of dlls, complete restart of the VS recommended)\r\n- Unit test\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- dotnet 8.0.100-alpha.1.22607.6\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8518)","Url":"https://github.com/dotnet/winforms/pull/8518","RelatedDescription":"Open PR \"Removed extra code for the ListBox.ItemHeight property\" (#8518)"},{"Id":"1553975222","IsPullRequest":true,"CreatedAt":"2023-01-24T00:55:27","Actor":"elachlan","Number":"8516","RawContent":null,"Title":"Enable IDE0059 Unnecessary assignment of a value","State":"closed","Body":"Analyzer was used to apply fix to whole solution.\r\n\r\nRelated: #7887\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8516)","Url":"https://github.com/dotnet/winforms/pull/8516","RelatedDescription":"Closed or merged PR \"Enable IDE0059 Unnecessary assignment of a value\" (#8516)"},{"Id":"1534831204","IsPullRequest":true,"CreatedAt":"2023-01-23T20:31:40","Actor":"NikitaSemenovAkvelon","Number":"8507","RawContent":null,"Title":"Making `DataGridView` icons more clear","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #7722\r\n\r\n\r\n## Proposed changes\r\n\r\n- Added a `ControlPaint.CreateBitmapWithInvertedForeColor` method for inverting colors of the bitmap if the image's primary color has low contrast with a background.\r\n- Used the `ControlPaint.CreateBitmapWithInvertedForeColor` method for `DataGridViewRowHeaderCell` images if HC mode is on.\r\n- Covered the `ControlPaint.CreateBitmapWithInvertedForeColor` method with unit tests.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Images in `DataGridViewRowHeaderCell` become more clear.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/109065597/212674774-a1f4ee82-5118-463e-9528-1985eaab81cd.png)\r\n![image](https://user-images.githubusercontent.com/109065597/212674780-98c61d1b-571a-446d-9e07-0fcd4aa76e79.png)\r\n![image](https://user-images.githubusercontent.com/109065597/212674792-56a0b77c-ddeb-4b71-97eb-b1292c695794.png)\r\n![image](https://user-images.githubusercontent.com/109065597/212674803-41ce6773-3d3f-4d8e-99ee-a3883dfe22ea.png)\r\n\r\n### After\r\n\r\n![Screenshot 2023-01-16 112352](https://user-images.githubusercontent.com/109065597/212674945-3e969508-5500-4aad-b0e0-ed39a9f3b3e5.png)\r\n![Screenshot 2023-01-16 112342](https://user-images.githubusercontent.com/109065597/212674954-3923408a-2dfd-41f1-a62c-e9c1afaf1135.png)\r\n![Screenshot 2023-01-16 112256](https://user-images.githubusercontent.com/109065597/212674960-32d3ef02-e7c2-4181-ab94-4df99a33f90e.png)\r\n![Screenshot 2023-01-16 112245](https://user-images.githubusercontent.com/109065597/212674966-7c6a390b-b58d-4192-94af-986d0723f036.png)\r\n![Screenshot 2023-01-16 103801](https://user-images.githubusercontent.com/109065597/212674863-4d5af6bc-a7f7-4181-a3d0-b193fe4769b1.png)\r\n![Screenshot 2023-01-16 103750](https://user-images.githubusercontent.com/109065597/212674874-78f63ba1-4b5d-444d-802f-41437d321af2.png)\r\n![Screenshot 2023-01-16 112136](https://user-images.githubusercontent.com/109065597/212674982-cddea073-9e53-4380-a069-676e46f06e18.png)\r\n![Screenshot 2023-01-16 112122](https://user-images.githubusercontent.com/109065597/212674996-77c8bfa1-08de-44b4-a7c5-ad0b830e26b5.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually\r\n- AI\r\n- Unit testing\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n- AI\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET SDK:\r\n Version:   8.0.100-alpha.1.22512.5\r\n Commit:    1b80461e45\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22621\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8507)","Url":"https://github.com/dotnet/winforms/pull/8507","RelatedDescription":"Closed or merged PR \"Making `DataGridView` icons more clear\" (#8507)"},{"Id":"1533246035","IsPullRequest":true,"CreatedAt":"2023-01-23T19:13:56","Actor":"dotnet-maestro[bot]","Number":"8504","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230122.5\r\n- **Date Produced**: January 23, 2023 9:27:05 AM UTC\r\n- **Commit**: a272954f5c88544467112d944f662ef81b3d7487\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.23062.24 to 8.0.0-alpha.1.23072.5][10]\r\n\r\n[10]: https://github.com/dotnet/runtime/compare/6774329...a272954\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8504)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/8504","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8504)"},{"Id":"1551645000","IsPullRequest":false,"CreatedAt":"2023-01-21T01:31:28","Actor":"Olina-Zhang","Number":"8515","RawContent":null,"Title":"Cannot resize controls in runtime and has an exception when moving controls","State":"open","Body":"### .NET version\n\n8.0.100-alpha.1.23068.16\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nwork in .Net 6.0, and reproduced from .Net 7.0\n\n### Issue description\n\nIn Winforms repo, there has a [DemoConsole](https://github.com/dotnet/winforms/tree/main/src/System.Windows.Forms/tests/IntegrationTests/DesignSurface/DemoConsole) test app, cannot resize controls in .Net 7.0 & 8.0 and has an exception when moving controls in .Net 8.0.\r\n![8 0Issue](https://user-images.githubusercontent.com/26474449/213832129-deedfb87-c995-49a4-8ae3-a9c281581b56.gif)\r\n\n\n### Steps to reproduce\n\nTest sample: [DemoConsole](https://github.com/dotnet/winforms/tree/main/src/System.Windows.Forms/tests/IntegrationTests/DesignSurface/DemoConsole) in Winforms repo","Url":"https://github.com/dotnet/winforms/issues/8515","RelatedDescription":"Open issue \"Cannot resize controls in runtime and has an exception when moving controls\" (#8515)"},{"Id":"1550763660","IsPullRequest":false,"CreatedAt":"2023-01-20T12:20:25","Actor":"ismlsmile","Number":"8514","RawContent":null,"Title":"RichTextBox could not be used in VS designer","State":"open","Body":"### Environment\r\n\r\n17.4.4\r\n\r\n### .NET version\r\n\r\n7.0.102\r\n\r\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\r\n\r\n_No response_\r\n\r\n### Issue description\r\nwhen drag a RichTextBox to a Form, VS Designer will show this error:\r\nBuilt-in COM has been disabled via a feature switch. See https://aka.ms/dotnet-illink/com for more\r\n\r\n![image](https://user-images.githubusercontent.com/1876179/213693437-a7444221-4877-457d-a087-415f1a4e3970.png)\r\n\r\n\r\n### Steps to reproduce\r\n\r\njust drag a RichTextBox to a Form\r\n\r\n### Diagnostics\r\n\r\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8514","RelatedDescription":"Open issue \"RichTextBox could not be used in VS designer\" (#8514)"},{"Id":"1550512157","IsPullRequest":false,"CreatedAt":"2023-01-20T09:02:12","Actor":"Olina-Zhang","Number":"8513","RawContent":null,"Title":"Automation case about ErrorProvider failed with \"Cannot access a disposed object\"","State":"open","Body":"### .NET version\n\n8.0.100-alpha.1.23068.16\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, cannot repro in previous versions\n\n### Issue description\n\n![image](https://user-images.githubusercontent.com/26474449/213655624-c6592448-98f2-413e-8f63-c82f811b9c79.png), related causing PR: https://github.com/dotnet/winforms/pull/8486\r\n_System.ObjectDisposedException\r\n  HResult=0x80131622\r\n  Message=Cannot access a disposed object.\r\n  Source=System.Drawing.Common\r\n  StackTrace:\r\n   at System.Drawing.Icon.get_Handle()\r\n   at System.Drawing.Icon.get_Size()\r\n   at System.Windows.Forms.ErrorProvider.IconRegion.get_Size()\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.Update(Boolean timerCaused)\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.Add(ControlItem item)\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.AddToWindow()\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.set_Error(String value)\r\n   at System.Windows.Forms.ErrorProvider.SetError(Control control, String value)\r\n   at XErrorProvider.set_RightToLeft(TParams p, Boolean rtl) in C:\\Users\\xxx\\Desktop\\XErrorProvider_P1\\XErrorProvider_P1\\XErrorProvider.cs:line 455\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)_\r\n\n\n### Steps to reproduce\n\nIt reproduces steadily in our automation case about errorProvider, but we cannot repro manually in TextBox and ErrorProvider, then errorProvider.setError","Url":"https://github.com/dotnet/winforms/issues/8513","RelatedDescription":"Open issue \"Automation case about ErrorProvider failed with \"Cannot access a disposed object\"\" (#8513)"},{"Id":"1531649309","IsPullRequest":false,"CreatedAt":"2023-01-18T18:53:55","Actor":"Leon99","Number":"8501","RawContent":null,"Title":"System.Windows.Forms.Design.DateTimePickerDesigner is missing","State":"closed","Body":"### Environment\r\n\r\nN/A\r\n\r\n### .NET version\r\n\r\n.NET 6\r\n\r\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\r\n\r\nWorked in .NET Framework.\r\n\r\n### Issue description\r\n\r\nWe need to have DateTimePicker controls available in a WF designer that we host in our app, which is being ported from .NET Framework to .NET 6. As per https://github.com/dotnet/winforms/issues/4908, DateTimePickerDesigner hasn't been ported from .NET Framework.\r\n\r\nLooking at the decompiled sources of `DateTimePickerDesigner`, it's not much code and the reason it wasn't ported is unclear. In fact, if we add a DateTimePicker to the designer programmatically, it appears there but is not clickable, and a clickable component is added to the component tray.\r\n\r\nWe'd really appreciate any suggestions on solving this.\r\n\r\n### Steps to reproduce\r\n\r\nN/A\r\n\r\n### Diagnostics\r\n\r\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8501","RelatedDescription":"Closed issue \"System.Windows.Forms.Design.DateTimePickerDesigner is missing\" (#8501)"},{"Id":"1536450590","IsPullRequest":false,"CreatedAt":"2023-01-18T18:36:54","Actor":"MohanramAnbukkarasu","Number":"8510","RawContent":null,"Title":"Custom border corners are not rendered properly when having rounded corners in a Form","State":"closed","Body":"### .NET version\n\nIssue occurs both in .NET framework 4.6 and NET 6 \n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo\n\n### Issue description\n\nI have created a custom form with rounded corners implemented as shown in the below given code snippet. \r\n\r\n```\r\npublic partial class Form1 : Form\r\n{\r\n    public Form1()\r\n    {\r\n        InitializeComponent();\r\n    }\r\n    protected override void OnShown(EventArgs e)\r\n    {\r\n        base.OnShown(e);\r\n        ApplyRoundedCorners();\r\n    }\r\n    private long ApplyRoundedCorners()\r\n    {\r\n        NativeMethods.DWM_WINDOW_CORNER_PREFERENCE dWM_WINDOW_CORNER_PREFERENCE;\r\n        dWM_WINDOW_CORNER_PREFERENCE = NativeMethods.DWM_WINDOW_CORNER_PREFERENCE.DWMWCP_ROUND;\r\n        NativeMethods.DWMWINDOWATTRIBUTE attribute = NativeMethods.DWMWINDOWATTRIBUTE.DWMWA_WINDOW_CORNER_PREFERENCE;\r\n        return NativeMethods.DwmSetWindowAttribute(base.Handle, attribute, ref dWM_WINDOW_CORNER_PREFERENCE, 4u);\r\n    }\r\n    protected override void WndProc(ref Message m)\r\n    {\r\n        if (m.Msg == NativeMethods.WM_NCPAINT)\r\n        {\r\n            NativeMethods.RECT rc = new NativeMethods.RECT();\r\n            NativeMethods.GetWindowRect((int)this.Handle, ref rc);\r\n            IntPtr hdc = NativeMethods.GetWindowDC(this.Handle);\r\n            IntPtr bufferDC = NativeMethods.CreateCompatibleDC(hdc);\r\n            using (Graphics bufferedGraphics = Graphics.FromHdc(bufferDC))\r\n            {\r\n                DrawFrameBorders(bufferedGraphics, new Rectangle(0, 0, rc.Width, rc.Height));\r\n            }\r\n        }\r\n        else\r\n            base.WndProc(ref m);\r\n    }\r\n    private void DrawFrameBorders(Graphics g, Rectangle rc)\r\n    {\r\n        SmoothingMode smoothingMode = g.SmoothingMode;\r\n        g.SmoothingMode = SmoothingMode.AntiAlias;\r\n        Color borderColor = Color.Red;\r\n        if (this.WindowState != FormWindowState.Maximized)\r\n        {\r\n            Pen pen = new Pen(borderColor, 5);\r\n            Rectangle rect = new Rectangle(rc.X, rc.Y, rc.Width - 1, rc.Height - 1);\r\n            g.DrawRectangle(pen, rect);\r\n            pen.Dispose();\r\n        }\r\n        g.SmoothingMode = smoothingMode;\r\n    }\r\n}\r\n```\r\n\r\nI have override the `WndProc` to customize the appearance of the non client area. In the above given code I have provided only the code used for rounded corners and custom borders. \r\n\r\nThe problem I'm facing on this is the rounded corners are not rendered completely when the custom borders are drawn. \r\n\r\n![image](https://user-images.githubusercontent.com/44049406/212918781-20d52870-622d-4136-afaf-3d6768e071a0.png)\r\n\r\n\r\n\n\n### Steps to reproduce\n\nI'm unable to provide a sample app as my custom form include more line of code. So I have provided only the code which I have used to have rounded corners and custom border.  ","Url":"https://github.com/dotnet/winforms/issues/8510","RelatedDescription":"Closed issue \"Custom border corners are not rendered properly when having rounded corners in a Form\" (#8510)"},{"Id":"1538027060","IsPullRequest":false,"CreatedAt":"2023-01-18T18:31:26","Actor":"roland5572","Number":"8512","RawContent":null,"Title":"ListView OwnerDraw has compatibility problem if the user double-clicks the column header divider","State":"closed","Body":"### .NET version\r\n\r\n.Net 7.0\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Issue description\r\n\r\nUsers can use **ListView.OwnerDraw** property to implement custom drawing function for ListViewItem.\r\n\r\nAbout OwnerDraw:\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.listview.ownerdraw\r\n\r\nBut when using this feature, and when user double click on **column header divider**, ListView can't show correct column width.\r\n\r\nPicture 1:\r\nAfter running the test code, the ListView control shows two columns. When you click on the area on the picture, ListView will automatically adjust the width of the corresponding column.\r\n\r\n![1](https://user-images.githubusercontent.com/88176616/213186437-d048cea8-bd87-4e7e-979e-df459025796b.png)\r\n\r\nPicture 2:\r\nSince there is no corresponding **width property** for OwnerDraw, ListView cannot automatically calculate the width of ListViewSubItem, and the wrong column width is displayed.\r\n\r\n![2](https://user-images.githubusercontent.com/88176616/213186474-73c9fd06-4a24-412c-ae1e-b790596fdb28.png)\r\n\r\n![3](https://user-images.githubusercontent.com/88176616/213186492-419837c9-c551-4b3b-ba8d-acb2b1c74cbc.png)\r\n\r\nOther supplements:\r\n\r\n1. The **DataGridView** control has a **ColumnDividerDoubleClick** event, but the ListView control does not have this event, so it cannot be processed in the event.\r\n\r\nAbout ColumnDividerDoubleClick Event\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridview.columndividerdoubleclick\r\n\r\nPossible improvements\r\n\r\nProvide specific event so that when the user double-clicks the column divider, the program can calculate the correct Column Width.\r\n\r\n### Steps to reproduce\r\n\r\nC# Test Code with .Net 7.0 and Visual Studio 2022\r\n\r\n```\r\nusing System;\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nnamespace ListViewOwnerDrawTest\r\n{\r\n    internal static class Program\r\n    {\r\n        [STAThread]\r\n        static void Main()\r\n        {\r\n            ApplicationConfiguration.Initialize();\r\n            Application.Run(CreateForm());\r\n        }\r\n\r\n        private class ItemData\r\n        {\r\n            public string Name { get; set; }\r\n            public Color Color { get; set; }\r\n            public Brush Brush { get; }\r\n\r\n            public ItemData(Color color)\r\n            {\r\n                Name = color.Name;\r\n                Color = color;\r\n\r\n                Brush = new SolidBrush(Color);\r\n            }\r\n        }\r\n\r\n        private static Form CreateForm()\r\n        {\r\n            var form = new Form()\r\n            {\r\n                Width = 600,\r\n                Height = 480,\r\n\r\n                StartPosition = FormStartPosition.CenterScreen,\r\n            };\r\n\r\n            var control = CreateListView();\r\n            form.Controls.Add(control);\r\n\r\n            return form;\r\n        }\r\n\r\n        private static ListView CreateListView()\r\n        {\r\n            var control = new ListView()\r\n            {\r\n                Dock = DockStyle.Fill,\r\n                View = View.Details,\r\n\r\n                OwnerDraw = true,\r\n                FullRowSelect = true,\r\n            };\r\n\r\n            control.Columns.Add(\"Number\", 100);\r\n            control.Columns.Add(\"Color Name\", 200);\r\n\r\n            var index = 1;\r\n\r\n            AddItemData(control, index++, new ItemData(Color.Orange));\r\n            AddItemData(control, index++, new ItemData(Color.Yellow));\r\n            AddItemData(control, index++, new ItemData(Color.Red));\r\n            AddItemData(control, index++, new ItemData(Color.Blue));\r\n            AddItemData(control, index++, new ItemData(Color.Green));\r\n            AddItemData(control, index++, new ItemData(Color.LightSkyBlue));\r\n\r\n            control.DrawColumnHeader += Control_DrawColumnHeader;\r\n            control.DrawSubItem += Control_DrawSubItem;\r\n\r\n            return control;\r\n        }\r\n\r\n        private static void AddItemData(ListView list, int number, ItemData data)\r\n        {\r\n            var item = list.Items.Add(number.ToString());\r\n\r\n            item.SubItems.Add(\"\"); //No text is needed, graphics need to be drawn, among other things.\r\n\r\n            item.Tag = data;\r\n        }\r\n\r\n        private static void Control_DrawColumnHeader(object sender, DrawListViewColumnHeaderEventArgs e)\r\n        {\r\n            e.DrawDefault = true;\r\n        }\r\n\r\n        private static void Control_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)\r\n        {\r\n            if (e.ColumnIndex != 1)\r\n            {\r\n                e.DrawDefault = true;\r\n                return;\r\n            }\r\n\r\n            var item = e.Item;\r\n            var subItem = e.SubItem;\r\n            var bounds = subItem.Bounds;\r\n\r\n            var data = item.Tag as ItemData;\r\n            var text = data.Name;\r\n\r\n            var g = e.Graphics;\r\n            g.Clip = new Region(bounds);\r\n\r\n            var picWidth = 20;\r\n            var picHeight = bounds.Height - 4;\r\n\r\n            var rect = new Rectangle(bounds.X, bounds.Y, picWidth, picHeight);\r\n\r\n            g.FillRectangle(data.Brush, rect);\r\n\r\n            rect = bounds;\r\n            rect.Offset(picWidth, 0);\r\n\r\n            g.DrawString(text, item.Font, Brushes.Black, rect);\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/8512","RelatedDescription":"Closed issue \"ListView OwnerDraw has compatibility problem if the user double-clicks the column header divider\" (#8512)"},{"Id":"1537176648","IsPullRequest":true,"CreatedAt":"2023-01-17T23:29:21","Actor":"elachlan","Number":"8511","RawContent":null,"Title":"Improve form memory leak test code","State":"open","Body":"Follow up to #8478\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8511)","Url":"https://github.com/dotnet/winforms/pull/8511","RelatedDescription":"Open PR \"Improve form memory leak test code\" (#8511)"},{"Id":"1535605728","IsPullRequest":true,"CreatedAt":"2023-01-16T23:42:02","Actor":"elachlan","Number":"8509","RawContent":null,"Title":"Refactor `ToolStripControlHost.Control` property to throw `ObjectDisposedException` if null","State":"open","Body":"Refactored `ToolStripControlHost.Control` property to throw `ObjectDisposedException` if null.\r\nAlso some minor refactoring using expression bodies\r\n\r\nFixes #2466\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8509)","Url":"https://github.com/dotnet/winforms/pull/8509","RelatedDescription":"Open PR \"Refactor `ToolStripControlHost.Control` property to throw `ObjectDisposedException` if null\" (#8509)"},{"Id":"1535543038","IsPullRequest":false,"CreatedAt":"2023-01-16T22:10:48","Actor":"dmanter","Number":"8508","RawContent":null,"Title":"Winforms Customer Designer - (DataGridView and DateTimePicker)","State":"open","Body":"### .NET version\n\n7.0\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNot tried - Worked in 4.7.2\n\n### Issue description\n\nHi Klaus,\r\nI can’t find anywhere or anybody to help me with this problem. I had a programmer who wrote us a custom Form Designer using some old VS Designer Project from many years ago. Basically we allow user to design a form and then save it and the controls to xml. At runtime we read the xml make a dynamic user form with those controls. When they hit OK, it runs a stored procedure with SQL and the controls text entries are passed to the stored procedure as parameters. This allow things like a user can make a pricing update form with a simple textbox for price increase amount. The stored proc runs thru the price table and adds that. We have been using for many years. Just updating now off .Net 4 to .Net 7 to modernize our app. This Form Designer almost worked. The DateTimePicker and DataGridView get a no designer error. I’ve spent days tracking the code that fail and only get to this in the TypeDescriptor.\r\nThe line :type = Type.GetType(designerAttribute.DesignerTypeName); returns null for DTP and DGV but a designer for Labels, TextBox, RadioBUttons, CHeckBOx, etc.\r\nOnly null on DTP and DGV.\r\nI can’t seem to get debug to step into the Type.GetType() so at a dead end.\r\nI am stuck for days and at a loss what to do. DTP and DGV work in VS 2022 designer so there must be some way this can get at a designer for each.\r\nThanks Doug Manter, CTO Creative Information Systems, Inc.\r\n[dmanter@creativeinfo.net](mailto:dmanter@creativeinfo.net)\r\nPlease help or advise. I wanted to leave under WinForms page but said comments closed.\r\n\r\n    public static IDesigner? CreateDesigner(IComponent component, Type designerBaseType)\r\n    {\r\n        Type? type = null;\r\n        IDesigner? result = null;\r\n        AttributeCollection attributes = GetAttributes(component);\r\n        for (int i = 0; i < attributes.Count; i++)\r\n        {\r\n            if (attributes[i] is DesignerAttribute designerAttribute)\r\n            {\r\n                Type? type2 = Type.GetType(designerAttribute.DesignerBaseTypeName);\r\n                if (type2 != null && type2 == designerBaseType)\r\n                {\r\n                    ISite? site = component.Site;\r\n                    bool flag = false;\r\n                    ITypeResolutionService? typeResolutionService = (ITypeResolutionService?)site?.GetService(typeof(ITypeResolutionService));\r\n                    if (typeResolutionService != null)\r\n                    {\r\n                        flag = true;\r\n                        type = typeResolutionService.GetType(designerAttribute.DesignerTypeName);\r\n                    }\r\n                    if (!flag)\r\n                    {\r\n                        type = Type.GetType(designerAttribute.DesignerTypeName); <- RETURNS NULL for DateTimePicker and DataGridview.\r\n                    }\r\n                    if (type != null)\r\n                    {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (type != null)\r\n        {\r\n            result = (IDesigner?)Activator.CreateInstance(type);\r\n        }\r\n        return result;\r\n    }\r\n![CustomFormDesignerIssue](https://user-images.githubusercontent.com/3495842/212772762-218692b8-3d62-4aca-90ed-3e5e2c4696c2.png)\r\n\n\n### Steps to reproduce\n\nI could upload the whole project but unsure how.","Url":"https://github.com/dotnet/winforms/issues/8508","RelatedDescription":"Open issue \"Winforms Customer Designer - (DataGridView and DateTimePicker)\" (#8508)"},{"Id":"1533380210","IsPullRequest":false,"CreatedAt":"2023-01-14T17:25:16","Actor":"kirsan31","Number":"8505","RawContent":null,"Title":"Setting GenerateMember to false is not removing class member","State":"open","Body":"### Environment\n\nMicrosoft Visual Studio Community 2022\r\nVersion 17.4.4\r\nVisualStudio.17.Release/17.4.4+33213.308\r\nMicrosoft .NET Framework\r\nVersion 4.8.09032\n\n### .NET version\n\n.Net7, .Net6. Others not tested.\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nYes in old .NET framework designer.\n\n### Issue description\n\n`GenerateMember = false` must remove corresponding class member from `*.Designer.cs`. Actual behavior:\r\n\r\n![image](https://user-images.githubusercontent.com/17767561/212486575-cff39aa2-d3e7-4726-a71d-5f24000f856e.png)\r\n\n\n### Steps to reproduce\n\nAny winforms project. Open designer, select any existing control on the form, set `GenerateMember` to `false`.\r\nProject to quick test:\r\n[GenerateMemberTest.zip](https://github.com/dotnet/winforms/files/10418373/GenerateMemberTest.zip)\n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8505","RelatedDescription":"Open issue \"Setting GenerateMember to false is not removing class member\" (#8505)"},{"Id":"1533007693","IsPullRequest":true,"CreatedAt":"2023-01-13T22:48:37","Actor":"Tanya-Solyanik","Number":"8503","RawContent":null,"Title":"Description of modernization in winforms code-behind generation in the VS 2022 17.5 Preview3","State":"open","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8503)","Url":"https://github.com/dotnet/winforms/pull/8503","RelatedDescription":"Open PR \"Description of modernization in winforms code-behind generation in the VS 2022 17.5 Preview3\" (#8503)"},{"Id":"1531576469","IsPullRequest":true,"CreatedAt":"2023-01-13T18:44:00","Actor":"JeremyKuhne","Number":"8500","RawContent":null,"Title":"Fix multiselect in OpenFileDialog","State":"closed","Body":"Query for the right interface before getting results and guard correctly.\r\n\r\nAdds regression test and fixes a mistake in ComScope.\r\n\r\nAdds a little cleanup for easier debugging and I left in a few defines that are difficult to find and we'll want to use soon. (I tried a variety of approaches to automating, including sending key messages and using accessibility. Sending WM_COMMAND is far simpler.)\r\n\r\nfixes: #8414\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8500)","Url":"https://github.com/dotnet/winforms/pull/8500","RelatedDescription":"Closed or merged PR \"Fix multiselect in OpenFileDialog\" (#8500)"},{"Id":"1531215065","IsPullRequest":true,"CreatedAt":"2023-01-13T18:43:40","Actor":"JeremyKuhne","Number":"8498","RawContent":null,"Title":"Move GetIUnknownForObject calls to ComHelpers","State":"closed","Body":"We want to keep our Marshal calls in ComHelpers so we can do the right logic regarding ComWrappers vs. Marshal.\r\n\r\nRemove AdviseHelper and use the new functionality to set up the notifications (much simpler).\r\n\r\nMove IRichEditOleCallback to CsWin32. Add new static helper to DataObject to create from a native IDataObject.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8498)","Url":"https://github.com/dotnet/winforms/pull/8498","RelatedDescription":"Closed or merged PR \"Move GetIUnknownForObject calls to ComHelpers\" (#8498)"},{"Id":"1532274583","IsPullRequest":true,"CreatedAt":"2023-01-13T13:35:24","Actor":"dotnet-maestro[bot]","Number":"8502","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230112.24\r\n- **Date Produced**: January 13, 2023 11:56:38 AM UTC\r\n- **Commit**: 67743295d05777ce3701135afbbdb473d4fb4436\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.23061.15 to 8.0.0-alpha.1.23062.24][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/da2c147...6774329\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8502)","Url":"https://github.com/dotnet/winforms/pull/8502","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8502)"},{"Id":"1530681954","IsPullRequest":true,"CreatedAt":"2023-01-12T18:56:12","Actor":"dotnet-maestro[bot]","Number":"8496","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230111.15\r\n- **Date Produced**: January 12, 2023 8:30:36 AM UTC\r\n- **Commit**: da2c147a9c129b00ef09b88a7309754cb09e193d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.23059.14 to 8.0.0-alpha.1.23061.15][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/78f5a98...da2c147\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8496)","Url":"https://github.com/dotnet/winforms/pull/8496","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8496)"},{"Id":"1530463519","IsPullRequest":false,"CreatedAt":"2023-01-12T10:23:28","Actor":"Junjun-zhao","Number":"8495","RawContent":null,"Title":"[ 8.0.100-alpha.1.23060.3] mRemoteNg app Error creating window handle error while creating Combobox","State":"open","Body":"### .NET version\r\n\r\n```\r\n.NET SDK:\r\n Version:   8.0.100-alpha.1.23060.3\r\n Commit:    c5ebd18478\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.100-alpha.1.23060.3\\\r\n\r\nHost:\r\n  Version:      8.0.0-alpha.1.23058.2\r\n  Architecture: x64\r\n  Commit:       5da4a9e919\r\n\r\n.NET SDKs installed:\r\n  8.0.100-alpha.1.23060.3 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 8.0.0-alpha.1.23058.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 8.0.0-alpha.1.23058.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0-alpha.1.23057.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\n### Did it work in .NET Framework?\r\n\r\nN/A\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\n**Verify Scenarios:**\r\n\r\n1) Windows 10 21H2 AMD64 + 8.0.100-alpha.1.23061.8: Fail\r\n2). Windows 10 21H2 AMD64 + dotnet-sdk-8.0.100-alpha.1.23060.31: Fail\r\n3) Windows 10 21H2 AMD64 + dotnet-sdk-7.0.102-win-x64: Pass\r\n4). Windows 10 21H2 AMD64 + dotnet-sdk-6.0.405-win-x64: Pass\r\n\r\n### Issue description\r\n\r\nWhen test 3rd party mRemoteNg app with .NET 8 runtime, exception \"error creating window handle error\" shows while creating Combobox.\r\n\r\n**Application Name**:  mRemoteNg(1.77.3)\r\n**OS**: Windows 10 21H2\r\n**CPU**: X64\r\n**.NET Build Number:** dotnet-sdk-8.0.100-alpha.1.23060.3\r\nApp or App Source checking at: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1717274\r\n**Github Link**: https://github.com/mRemoteNG/mRemoteNG\r\n\r\n### Steps to reproduce\r\n\r\n**The machine only has 8.0 installed. And DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX=2 is set.**\r\n\r\n1.Copy app from AppSource\\SourceShare\\mRemoteNG  to machine\r\n2.Launch the app from mRemoteNG.exe\r\n3.If you see update window, click ask me later\r\n4.Click Tools=>Port Scan\r\n\r\n**Expected Result:** \r\nPort Scan Tab should open without error\r\n\r\n**Actual Result:**\r\n![image](https://user-images.githubusercontent.com/83067197/212040757-a0389789-ff38-4cbb-8aeb-868cb001bb3d.png)\r\n\r\n\r\n**Exception:**\r\nException Message\r\n\"Error creating window handle.\"\r\n```\r\nStack trace\r\n   at System.Windows.Forms.NativeWindow.CreateHandle(CreateParams cp)\r\n   at System.Windows.Forms.Control.CreateHandle()\r\n   at System.Windows.Forms.ComboBox.CreateHandle()\r\n   at System.Windows.Forms.Control.CreateControl(Boolean ignoreVisible)\r\n   at System.Windows.Forms.Control.CreateControl(Boolean ignoreVisible)\r\n   at System.Windows.Forms.Control.CreateControl()\r\n   at System.Windows.Forms.Control.WmShowWindow(Message& m)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(HWND hWnd, WM msg, WPARAM wparam, LPARAM lparam)\r\n\r\nEnvironment\r\nOS: Microsoft Windows NT 10.0.19045.0\r\nmRemoteNG Version: 1.77.3\r\nEdition: MSI\r\nCmd line args:\r\n\r\n```\r\n**Findings:**\r\nWe think this error happens when creating combobox control, app is overriding OnCreateControl, when we remove DrawMode = DrawMode.OwnerDrawFixed, issue does not repro.\r\nIn this file: mRemoteNG-1.77.3-dev\\mRemoteNG\\UI\\Controls\\mrngComboBox.cs\r\n```\r\n protected override void OnCreateControl()\r\n  {\r\n            base.OnCreateControl();\r\n            _themeManager = ThemeManager.getInstance();\r\n            if (!_themeManager.ActiveAndExtended) return;\r\n            BackColor = _themeManager.ActiveTheme.ExtendedPalette.getColor(\"ComboBox_Background\");\r\n            ForeColor = _themeManager.ActiveTheme.ExtendedPalette.getColor(\"ComboBox_Foreground\");\r\n             DrawMode = DrawMode.OwnerDrawFixed;  //if we remove, issue does not repro\r\n            SetStyle(ControlStyles.OptimizedDoubleBuffer |\r\n                     ControlStyles.UserPaint, true);\r\n}\r\n```\r\n@dotnet-actwx-bot @dotnet/compat","Url":"https://github.com/dotnet/winforms/issues/8495","RelatedDescription":"Open issue \"[ 8.0.100-alpha.1.23060.3] mRemoteNg app Error creating window handle error while creating Combobox\" (#8495)"},{"Id":"1530416164","IsPullRequest":false,"CreatedAt":"2023-01-12T09:51:27","Actor":"John-Qiao","Number":"8494","RawContent":null,"Title":" [Test case] X and Y for some controls' Bounds are not correct after set_Bounds method","State":"open","Body":"### .NET version\r\n\r\n8.0.100-alpha.1.23061.8 + latest winforms dlls\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nYes, it works in .NET Core 3.1 and .NET 5.0/6.0/7.0/8.0(without latest winforms dlls)\r\n\r\n### Issue description\r\n\r\nThe X and Y values in **newRect** should be the same as values in **c.Bounds**.\r\n![GetImage](https://user-images.githubusercontent.com/45864985/212028009-b281fc59-46a7-47f5-bbb9-68dae6ee278e.png)\r\n\r\n\r\n### Steps to reproduce\r\n\r\n1. Download the test case project from here: https://microsoft-my.sharepoint.com/:u:/g/personal/v-peqiao_microsoft_com1/ERuveT35qepKkfb15DOVQl0BoIsTvsTQfUc1XyNSeqyYyg?e=FUvmnA\r\n2. Open the **XPropertyGrid** project in VS.\r\n3. Open the **XControl.cs** in **WFCTestLib** project>>**ReflectTools**>>**AutoPME** node.\r\n4. Set the debug point at 3791 line.\r\n5. Star to debug the **XPropertyGrid** project.\r\n6. Check the X and Y values in **newRect** and **c.Bounds** when debug stopped at 3791 line in XControl.cs file.\r\n\r\n![Setbounds](https://user-images.githubusercontent.com/45864985/212031866-a1b03e66-646f-420e-9e7f-9f858a0eed36.gif)\r\n","Url":"https://github.com/dotnet/winforms/issues/8494","RelatedDescription":"Open issue \" [Test case] X and Y for some controls' Bounds are not correct after set_Bounds method\" (#8494)"},{"Id":"1529706718","IsPullRequest":true,"CreatedAt":"2023-01-11T22:41:26","Actor":"dotnet-bot","Number":"8493","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2085899","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8493)","Url":"https://github.com/dotnet/winforms/pull/8493","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2085899\" (#8493)"},{"Id":"1529575138","IsPullRequest":true,"CreatedAt":"2023-01-11T22:37:45","Actor":"dotnet-maestro[bot]","Number":"8492","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:84f431dc-3375-4a46-af87-08d961c59698)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 84f431dc-3375-4a46-af87-08d961c59698\r\n- **Build**: 20230110.6\r\n- **Date Produced**: January 10, 2023 8:51:11 PM UTC\r\n- **Commit**: 74b7648c106865057c78ca1e4b2ffcb5e9bce071\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.22561.1 to 6.0.0-beta.23060.6][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 6.0.0-beta.22561.1 to 6.0.0-beta.23060.6][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.22561.1 to 6.0.0-beta.23060.6][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.22561.1 to 6.0.0-beta.23060.6][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.22561.1 to 6.0.0-beta.23060.6][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.22561.1 to 6.0.0-beta.23060.6][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/0967701...74b7648\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates sdk.version to 6.0.113\r\n  - Updates tools.dotnet to 6.0.113\r\n\r\n[marker]: <> (End:84f431dc-3375-4a46-af87-08d961c59698)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8492)","Url":"https://github.com/dotnet/winforms/pull/8492","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#8492)"},{"Id":"1529573411","IsPullRequest":true,"CreatedAt":"2023-01-11T19:59:20","Actor":"dotnet-maestro[bot]","Number":"8491","RawContent":null,"Title":"[release/7.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1bb79c46-2599-4c95-8164-08da7ef6284d)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 1bb79c46-2599-4c95-8164-08da7ef6284d\r\n- **Build**: 20230110.4\r\n- **Date Produced**: January 10, 2023 8:33:44 PM UTC\r\n- **Commit**: ac5977ebf05451c1adcf24a15d16263e4d25fd0c\r\n- **Branch**: refs/heads/release/7.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22561.2 to 7.0.0-beta.23060.4][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22561.2 to 7.0.0-beta.23060.4][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22561.2 to 7.0.0-beta.23060.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22561.2 to 7.0.0-beta.23060.4][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22561.2 to 7.0.0-beta.23060.4][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22561.2 to 7.0.0-beta.23060.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/f36ea23...ac5977e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates sdk.version to 7.0.102\r\n  - Updates tools.dotnet to 7.0.102\r\n\r\n[marker]: <> (End:1bb79c46-2599-4c95-8164-08da7ef6284d)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8491)","Url":"https://github.com/dotnet/winforms/pull/8491","RelatedDescription":"Closed or merged PR \"[release/7.0] Update dependencies from dotnet/arcade\" (#8491)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-01-25T03:30:33.6030728Z","RunDurationInMilliseconds":544}