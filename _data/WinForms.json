{"Data":{"GitHub":{"Issues":[{"Id":"1470551323","IsPullRequest":true,"CreatedAt":"2022-12-02T01:59:50","Actor":"elachlan","Number":"8308","RawContent":null,"Title":"Refactoring to replace usages of HashTable","State":"closed","Body":"Related: #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8308)","Url":"https://github.com/dotnet/winforms/pull/8308","RelatedDescription":"Closed or merged PR \"Refactoring to replace usages of HashTable\" (#8308)"},{"Id":"1472066572","IsPullRequest":true,"CreatedAt":"2022-12-02T01:04:08","Actor":"lonitra","Number":"8311","RawContent":null,"Title":"Introduce IManagedWrapper/IVTable For WinFormsComWrapper Logic","State":"closed","Body":"Related: #8291 \r\n\r\nCurrently, `WinFormsComWrappers.ComputeVtables()` goes through and returns the first VTable for the COM interface the object implements but this only captures a single COM interface the object implements when many implement multiple. As a result, calling `QueryInterface()` on the CCW will not have all the interfaces the object actually implements. This PR introduces a new pattern as a starting point to be able to account for objects that implement multiple interfaces. \r\n\r\n- New APIs:\r\n    - `IVTable` - Replaces `IPopulateVTable` and is used to get the populated vtable.\r\n    - `IVTable<TComInterface, TVTable>` - Allocates space for the vtable and populates the `IUnknown` methods. CCWs implement this and populate the rest of the vtable with its own specific methods.\r\n    - `ComInterfaceTable` - Struct that ties together the number of COM interfaces an object implements and its `ComInterfaceEntry*`.\r\n    - `IManagedWrapper` - This is used to get a populated `ComInterfaceTable` for `WinFormsComWrappers` to use.\r\n    - `IManagedWrapper<TComInterface, ...>` - To be implemented by managed objects. No actual implementation needs to be done as the interface does all the work of setting up the `ComInterfaceTable`.\r\n- Additionally I have also moved `InitializeXEntry()` logic for our COM Interfaces that have not yet been converted to the new pattern to their respective implementing classes and implemented the non generic `IManagedWrapper`. As a follow up I will convert these interfaces over to the new pattern.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8311)","Url":"https://github.com/dotnet/winforms/pull/8311","RelatedDescription":"Closed or merged PR \"Introduce IManagedWrapper/IVTable For WinFormsComWrapper Logic\" (#8311)"},{"Id":"1472158071","IsPullRequest":true,"CreatedAt":"2022-12-02T00:55:50","Actor":"elachlan","Number":"8313","RawContent":null,"Title":"Refactoring to replace usages of HashTable Part Deux","State":"open","Body":"Related: #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8313)","Url":"https://github.com/dotnet/winforms/pull/8313","RelatedDescription":"Open PR \"Refactoring to replace usages of HashTable Part Deux\" (#8313)"},{"Id":"1472079243","IsPullRequest":true,"CreatedAt":"2022-12-01T23:08:34","Actor":"dreddy-work","Number":"8312","RawContent":null,"Title":"Fix double scaling for scrollbars","State":"open","Body":"Fixes #8270\r\n\r\nin .NET 6, we streamlined scaling of child controls to use `AutScaleFactor` in PMv2 mode applications. This is a change from .NET framework, where we were scaling child controls with DPI factor even when `AutoScaleMode` was `Font`. As a result, scaling is centralized under `OnParentFontChanged` event and any controls that were doing explicit scaling in `RescaleConstants` method become redundant in .NET.\r\n\r\nWhen it comes to `ScrollBars`, we added public property in .NET Framework 4.8 to let developer's opt-in/out of DPI scaling for scroll bars. \n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8312)","Url":"https://github.com/dotnet/winforms/pull/8312","RelatedDescription":"Open PR \"Fix double scaling for scrollbars\" (#8312)"},{"Id":"1471279862","IsPullRequest":true,"CreatedAt":"2022-12-01T13:33:23","Actor":"dotnet-maestro[bot]","Number":"8310","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221130.16\r\n- **Date Produced**: December 1, 2022 11:12:57 AM UTC\r\n- **Commit**: 39b6e5e5eb552af4e9c509a4b55362776771c89d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22579.12 to 8.0.0-alpha.1.22580.16][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/0be32a0...39b6e5e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8310)","Url":"https://github.com/dotnet/winforms/pull/8310","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8310)"},{"Id":"1471219196","IsPullRequest":true,"CreatedAt":"2022-12-01T12:19:01","Actor":"elachlan","Number":"8309","RawContent":null,"Title":"Convert StubSite to use Dictionary instead of HashTable and Enable Nullability","State":"open","Body":"Related: #8143, #6793\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8309)","Url":"https://github.com/dotnet/winforms/pull/8309","RelatedDescription":"Open PR \"Convert StubSite to use Dictionary instead of HashTable and Enable Nullability\" (#8309)"},{"Id":"1469801737","IsPullRequest":false,"CreatedAt":"2022-11-30T15:13:46","Actor":"dmitrii-drobotov","Number":"8307","RawContent":null,"Title":"Screen readers cannot announce checked state of checkable ToolStrip/MenuStrip menu items ","State":"open","Body":"### .NET version\r\n\r\n.NET 8\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo, but it was working in [MainMenu](https://learn.microsoft.com/dotnet/api/system.windows.forms.mainmenu) control\r\n\r\n### Issue description\r\n\r\nInitially reported in https://github.com/dotnet/winforms/issues/7770. Screen readers cannot announce checked state of checkable ToolStrip/MenuStrip menu items due to lack of [Toggle pattern](https://learn.microsoft.com/en-us/dotnet/framework/ui-automation/implementing-the-ui-automation-toggle-control-pattern) implementation.\r\n\r\nFor example, for following menu items:\r\n![Screenshot of a MenuStrip item containing 4 items in submenu: Item 1, Item 2, Item 3, Item 4. Items 2 and 4 are checked](https://user-images.githubusercontent.com/102954094/204847823-a394e7de-2be3-44ea-8492-baf7af60a780.png)\r\n\r\nNarrator reads only items content, without their checked state:\r\n\r\n> Item 1, menu item, \r\n> Item 2, menu item, \r\n> Item 3, menu item, \r\n> Item 4, menu item,\r\n\r\n\r\n### Steps to reproduce\r\n\r\n1. Add MenuStrip to form, initialize it with menu items (for example via \"Insert standard items\" button)\r\n2. Make items checkable: set `CheckOnClick` property to true or `CheckState` property to `Checked`\r\n3. Start Narrator and run the app\r\n5. Focus on MenuStrip, select checked menu item — Narrator will not announce that item is checked\r\n\r\nSample app:\r\n[MenuStripCheckedSample.zip](https://github.com/dotnet/winforms/files/10125020/MenuStripCheckedSample.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/8307","RelatedDescription":"Open issue \"Screen readers cannot announce checked state of checkable ToolStrip/MenuStrip menu items \" (#8307)"},{"Id":"1469608447","IsPullRequest":true,"CreatedAt":"2022-11-30T13:35:56","Actor":"dotnet-maestro[bot]","Number":"8306","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221129.12\r\n- **Date Produced**: November 30, 2022 5:32:33 AM UTC\r\n- **Commit**: 0be32a0d12a38133b9d0096d5e1c5fabe130549a\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22578.7 to 8.0.0-alpha.1.22579.12][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/0eaf12b...0be32a0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8306)","Url":"https://github.com/dotnet/winforms/pull/8306","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8306)"},{"Id":"1469607055","IsPullRequest":true,"CreatedAt":"2022-11-30T13:29:55","Actor":"dotnet-maestro[bot]","Number":"8305","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20221129.2\r\n- **Date Produced**: November 29, 2022 7:23:52 PM UTC\r\n- **Commit**: 6b3bad6673f3ebe89ebe12ea7c4eff1705b893e6\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.22578.1 to 8.0.0-beta.22579.2][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.22578.1 to 8.0.0-beta.22579.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.22578.1 to 8.0.0-beta.22579.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.22578.1 to 8.0.0-beta.22579.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.22578.1 to 8.0.0-beta.22579.2][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.22578.1 to 8.0.0-beta.22579.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/3817f2b...6b3bad6\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8305)","Url":"https://github.com/dotnet/winforms/pull/8305","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#8305)"},{"Id":"1468531385","IsPullRequest":true,"CreatedAt":"2022-11-29T20:16:24","Actor":"vseanreesermsft","Number":"8303","RawContent":null,"Title":"Update branding to 6.0.13","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8303)","Url":"https://github.com/dotnet/winforms/pull/8303","RelatedDescription":"Closed or merged PR \"Update branding to 6.0.13\" (#8303)"},{"Id":"1468531539","IsPullRequest":true,"CreatedAt":"2022-11-29T19:03:45","Actor":"vseanreesermsft","Number":"8304","RawContent":null,"Title":"Update branding to 7.0.2","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8304)","Url":"https://github.com/dotnet/winforms/pull/8304","RelatedDescription":"Closed or merged PR \"Update branding to 7.0.2\" (#8304)"},{"Id":"1468033316","IsPullRequest":true,"CreatedAt":"2022-11-29T18:25:52","Actor":"dotnet-maestro[bot]","Number":"8300","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221128.7\r\n- **Date Produced**: November 29, 2022 10:35:15 AM UTC\r\n- **Commit**: 0eaf12b95e6508f6b09593e7bb553961127b4d59\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22578.1 to 8.0.0-alpha.1.22578.7][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/1771d63...0eaf12b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8300)","Url":"https://github.com/dotnet/winforms/pull/8300","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8300)"},{"Id":"1468512171","IsPullRequest":false,"CreatedAt":"2022-11-29T18:24:02","Actor":"lonitra","Number":"8302","RawContent":null,"Title":"Add Test Coverage For MFC ActiveX Controls","State":"open","Body":"Related: #8294 \r\n\r\nThis is another area we are lacking as we do not have any [MFC ActiveX](https://learn.microsoft.com/en-us/cpp/mfc/mfc-activex-controls?view=msvc-170) test coverage. Any help here is appreciated!\r\n\r\nAs a first step an MFC ActiveX control will need to be created, registered, and follow a pattern similar to #8253 to get it into the winforms solution. The gaps for test coverage can then be expanded from there :)","Url":"https://github.com/dotnet/winforms/issues/8302","RelatedDescription":"Open issue \"Add Test Coverage For MFC ActiveX Controls\" (#8302)"},{"Id":"1466752622","IsPullRequest":true,"CreatedAt":"2022-11-29T18:08:08","Actor":"dmitrii-drobotov","Number":"8289","RawContent":null,"Title":"[release/7.0] Fix setting Form.Owner in Form.Show/ShowDialog(IWin32Window owner) if owner is a Control ","State":"closed","Body":"Backport of https://github.com/dotnet/winforms/pull/8283 to release/7.0\r\nFixes #8280\r\n\r\nForm.Show/ShowDialog(IWin32Window owner) method should set form's Owner property, however this logic had been inadvertently inverted for not TOPLEVEL windows during refactoring (#5791) and form owner property would be `null`. This fix restores the previous logic.\r\n\r\n## Servicing reasons\r\n\r\n- `null` owner property might lead to window shown on an incorrect desktop or in the wrong place.\r\n- This regression may cause serious UI issues described in https://github.com/dotnet/winforms/issues/8280, to the point of being a ship blocker.\r\n\r\n## Proposed changes\r\n\r\n- Check if owner doesn't have a `TOPMOST` style to correctly initialize it with a top-level Control in this case\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Owner property will be correctly set for a form if it was shown with a Control as owner\r\n\r\n## Regression? \r\n\r\n- Yes in 7.0 Preview1\r\n\r\n## Risk\r\n\r\n- Minimal - restores previous behavior and customer confirmed it resolves their issue\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit test\r\n- Manual\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET 7.0\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8289)","Url":"https://github.com/dotnet/winforms/pull/8289","RelatedDescription":"Closed or merged PR \"[release/7.0] Fix setting Form.Owner in Form.Show/ShowDialog(IWin32Window owner) if owner is a Control \" (#8289)"},{"Id":"1468468373","IsPullRequest":false,"CreatedAt":"2022-11-29T17:46:14","Actor":"lonitra","Number":"8301","RawContent":null,"Title":"Add Test Coverage for Clipboard","State":"open","Body":"We have some unit tests for `Clipboard`, but could incorporate more tests illustrating different usage scenarios.\r\n\r\nAny help filling in the gaps here is greatly appreciated and especially helpful with BinaryFormatter deprecation. :)","Url":"https://github.com/dotnet/winforms/issues/8301","RelatedDescription":"Open issue \"Add Test Coverage for Clipboard\" (#8301)"},{"Id":"1468032109","IsPullRequest":true,"CreatedAt":"2022-11-29T13:29:07","Actor":"dotnet-maestro[bot]","Number":"8299","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20221128.1\r\n- **Date Produced**: November 28, 2022 10:22:58 AM UTC\r\n- **Commit**: 3817f2b38a05c37c950715f84c95d452bcacfe52\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.22575.1 to 8.0.0-beta.22578.1][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.22575.1 to 8.0.0-beta.22578.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.22575.1 to 8.0.0-beta.22578.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.22575.1 to 8.0.0-beta.22578.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.22575.1 to 8.0.0-beta.22578.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.22575.1 to 8.0.0-beta.22578.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/b61fcdf...3817f2b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8299)","Url":"https://github.com/dotnet/winforms/pull/8299","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#8299)"},{"Id":"1467497450","IsPullRequest":false,"CreatedAt":"2022-11-29T05:55:34","Actor":"roland5572","Number":"8298","RawContent":null,"Title":"API Proposal: Support Multiselect property in FolderBrowserDialog class","State":"open","Body":"### Is your feature request related to a problem? Please describe\r\n\r\nIf the user needs to select multiple files, this function can be easily realized by using **OpenFileDialog.Multiselect**.\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.openfiledialog.multiselect\r\n\r\nBut currently there is no **Multiselect** property in the **FolderBrowserDialog** class, so when the user needs to select multiple folders at the same time, he has to perform multiple repeated operations.\r\n\r\nFolderBrowserDialog class:\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.folderbrowserdialog\r\n\r\n\r\n### Describe the solution you'd like and alternatives you've considered\r\n\r\nAPI Proposal:\r\n\r\nAdd properties:\r\n\r\nGets or sets a value indicating whether the dialog box allows multiple folders to be selected.\r\n`public bool Multiselect { get; set; }`\r\n\r\nGets the paths selected by the user.\r\n`public string[] SelectedPaths { get; }`\r\n\r\n### Will this feature affect UI controls?\r\n\r\nYes, it will affect UI controls.","Url":"https://github.com/dotnet/winforms/issues/8298","RelatedDescription":"Open issue \"API Proposal: Support Multiselect property in FolderBrowserDialog class\" (#8298)"},{"Id":"1467259128","IsPullRequest":false,"CreatedAt":"2022-11-29T00:11:38","Actor":"JeremyKuhne","Number":"8297","RawContent":null,"Title":"Investigate adding additional TypeConverter metadata to Resx","State":"open","Body":"Resx uses `TypeConverters` when available to convert data to/from `string` and `byte[]`. The specific type converter used isn't recorded, it's only the active one for `typeof(T)` that is considered. For unwrapping it would be good to know the specific type converter used and attempt to use the exact one if possible and give diagnostic information of some sort.\r\n\r\nIn order for this sort of change to have meaning, all copies of the Resx code need to be considered (MSBuild has their own, for example.)\r\n\r\n\r\ncc @GrabYourPitchforks ","Url":"https://github.com/dotnet/winforms/issues/8297","RelatedDescription":"Open issue \"Investigate adding additional TypeConverter metadata to Resx\" (#8297)"},{"Id":"1467249777","IsPullRequest":false,"CreatedAt":"2022-11-28T23:58:03","Actor":"JeremyKuhne","Number":"8296","RawContent":null,"Title":"Document how to add a custom TypeConverter for AxHost.State serialization","State":"open","Body":"In order to avoid `BinaryFormatter` you need a custom `TypeConverter` for `AxHost.State` to serialize without it. We have an existing converter `AxHost.StateConverter` that does this, but it isn't actually registered for `AxHost.State`. We may decide to register it eventually, but even if we do, to support cross compilation with .NET Framework it's necessary to know how to inject a `TypeConverter` at runtime versus the normal way of applying an attribute.\r\n\r\n`TypeConverter` docs should be updated with this how-to that we then refer to in our docs. Afaik it isn't described anywhere.","Url":"https://github.com/dotnet/winforms/issues/8296","RelatedDescription":"Open issue \"Document how to add a custom TypeConverter for AxHost.State serialization\" (#8296)"},{"Id":"1467240161","IsPullRequest":false,"CreatedAt":"2022-11-28T23:41:14","Actor":"JeremyKuhne","Number":"8295","RawContent":null,"Title":"Add test coverage for ResX classes","State":"open","Body":"We recently ported `StronglyTypedResourceBuilder` and that has some end-to-end tests, but we don't have good coverage for `ResxResourceReader` and `ResxResourceWriter` on their own.\r\n\r\n`BinaryFormatter` depreciation makes filling in test coverage here much more important.","Url":"https://github.com/dotnet/winforms/issues/8295","RelatedDescription":"Open issue \"Add test coverage for ResX classes\" (#8295)"},{"Id":"1467237573","IsPullRequest":false,"CreatedAt":"2022-11-28T23:37:20","Actor":"JeremyKuhne","Number":"8294","RawContent":null,"Title":"Add test coverage for AxHost related classes","State":"open","Body":"We have some tests, but there are significant gaps. Any additional coverage here will help keep this code in good shape for the next few decades. :)\r\n\r\nHelp here is appreciated. Live on the bleeding edge of the mid-nineties. :)\r\n\r\nSupporting this scenario is important for Windows Forms customers with legacy dependencies. This code is how Visual Basic 6 (VB6) controls are supported, and we plan to add specific tests for that scenario as well. See #8253.","Url":"https://github.com/dotnet/winforms/issues/8294","RelatedDescription":"Open issue \"Add test coverage for AxHost related classes\" (#8294)"},{"Id":"1467228729","IsPullRequest":false,"CreatedAt":"2022-11-28T23:23:53","Actor":"JeremyKuhne","Number":"8293","RawContent":null,"Title":"Add test coverage for COM type converter classes","State":"open","Body":"The code under the `COM2Interop` folder provides COM type descriptor functionality for .NET. We've started adding unit tests, but more needs to be done.\r\n\r\nThis is a great place for external contributors to get some deeper understanding of .NET's Component Model and help fill in the gaps here.","Url":"https://github.com/dotnet/winforms/issues/8293","RelatedDescription":"Open issue \"Add test coverage for COM type converter classes\" (#8293)"},{"Id":"1467222612","IsPullRequest":false,"CreatedAt":"2022-11-28T23:17:55","Actor":"JeremyKuhne","Number":"8292","RawContent":null,"Title":"Clean up and document existing behavior in COM classes","State":"open","Body":"Our ActiveX control hosting (`AxHost` and related classes) and COM type descriptor code (`Com2*`) needs cleaned up and documented to allow us to update for `BinaryFormatter` changes.\r\n\r\nAs we're actively working on this, this issue isn't a good one for community contribution at the moment.","Url":"https://github.com/dotnet/winforms/issues/8292","RelatedDescription":"Open issue \"Clean up and document existing behavior in COM classes\" (#8292)"},{"Id":"1467215188","IsPullRequest":false,"CreatedAt":"2022-11-28T23:11:29","Actor":"JeremyKuhne","Number":"8291","RawContent":null,"Title":"ComWrapper needs to return vtable based on types, not interfaces","State":"open","Body":"``` C#\r\nprotected override unsafe ComInterfaceEntry* ComputeVtables(object obj, CreateComInterfaceFlags flags, out int count)\r\n```\r\n\r\nThe implementation here needs to go off of specific class types, not interfaces. Not all classes that implement an interface will only implement a single interface (many won't).\r\n\r\nThe best place to start is by hard tying specific class types to entries. We can iterate with additional flexibility as warranted.\r\n\r\nI plan to tackle this imminently.","Url":"https://github.com/dotnet/winforms/issues/8291","RelatedDescription":"Open issue \"ComWrapper needs to return vtable based on types, not interfaces\" (#8291)"},{"Id":"1467173208","IsPullRequest":false,"CreatedAt":"2022-11-28T22:21:34","Actor":"JeremyKuhne","Number":"8290","RawContent":null,"Title":"Add AppContext switch for enabling `BinaryFormatter` usages","State":"open","Body":"All `BinaryFormatter` blocks should be behind an AppContext switch. For now this will be an opt-out, when and if the `BinaryFormatter` gets disabled by the runtime this can be driven by whatever is driving the behavior in the runtime.","Url":"https://github.com/dotnet/winforms/issues/8290","RelatedDescription":"Open issue \"Add AppContext switch for enabling `BinaryFormatter` usages\" (#8290)"},{"Id":"1466387801","IsPullRequest":true,"CreatedAt":"2022-11-28T13:33:21","Actor":"dotnet-maestro[bot]","Number":"8288","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221128.1\r\n- **Date Produced**: November 28, 2022 12:06:58 PM UTC\r\n- **Commit**: 1771d63827387b49dcd8c33b95f1512f4f11e368\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22575.4 to 8.0.0-alpha.1.22578.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/0c46b34...1771d63\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8288)","Url":"https://github.com/dotnet/winforms/pull/8288","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8288)"},{"Id":"1465316704","IsPullRequest":false,"CreatedAt":"2022-11-27T03:12:32","Actor":"memoarfaa","Number":"8287","RawContent":null,"Title":"Inherited forms don't work in the designer with Reference dll","State":"open","Body":"### Environment\r\n\r\nMicrosoft Visual Studio Enterprise 2022 (64-bit) - Current\r\nVersion 17.4.0\r\n\r\n\r\n### .NET version\r\n\r\nnet7.0 ,net6.0 , net3.1\r\n\r\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\r\n\r\n_No response_\r\n\r\n### Issue description\r\n\r\nInherited forms don't work in the designer with Reference dll\r\n\r\n[WinFormsApp1.zip](https://github.com/dotnet/winforms/files/10097441/WinFormsApp1.zip)\r\n\r\n![2022-11-27_05-17-27](https://user-images.githubusercontent.com/12494184/204117659-3b6f8180-b286-4df0-b430-76c484c46303.png)\r\n\r\n### Steps to reproduce\r\n\r\n1- create new WinForms Forms class library  project create Form inherit form other .\r\n2- create new WinForms Forms  project Add  previous class library dll as Reference or edit project.\r\n<ItemGroup>\r\n\r\n    <Reference Include=\"SkinFramWorkCore\">\r\n      <HintPath>SkinFramWorkCore.dll</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n3- open Form\r\n\r\n### Diagnostics\r\n\r\n```text\r\n[05:04:53.583297] fail: Request failures: Sessions/FindDesignableClass.\r\n                        Microsoft.DotNet.DesignTools.Client.DesignToolsServerException: The designer could not be shown for this file because none of the classes within it can be designed.  The designer inspected the following classes in the file: \\r\\n\r\n                        \tForm1 --- The base class 'SkinFramWorkCore.SkinForm' could not be loaded.  Ensure the assembly has been referenced and that all projects have been built.\r\n\r\n                        For information on how to troubleshoot the designer refer to the guide at https://aka.ms/winforms/designer/troubleshooting.\r\n[05:04:53.680295] fail: Request failures: Sessions/FindDesignableClass.\r\n                        Microsoft.DotNet.DesignTools.Client.DesignToolsServerException: The designer could not be shown for this file because none of the classes within it can be designed.  The designer inspected the following classes in the file: \\r\\n\r\n                        \tForm1 --- The base class 'SkinFramWorkCore.SkinForm' could not be loaded.  Ensure the assembly has been referenced and that all projects have been built.\r\n\r\n                        For information on how to troubleshoot the designer refer to the guide at https://aka.ms/winforms/designer/troubleshooting.\r\n```\r\n","Url":"https://github.com/dotnet/winforms/issues/8287","RelatedDescription":"Open issue \"Inherited forms don't work in the designer with Reference dll\" (#8287)"},{"Id":"1465149683","IsPullRequest":true,"CreatedAt":"2022-11-26T13:29:47","Actor":"dotnet-maestro[bot]","Number":"8286","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221125.4\r\n- **Date Produced**: November 25, 2022 11:17:32 PM UTC\r\n- **Commit**: 0c46b34ed70ad23d8323d32d1c8eeb9f4819ae68\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22574.5 to 8.0.0-alpha.1.22575.4][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/4b6380d...0c46b34\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8286)","Url":"https://github.com/dotnet/winforms/pull/8286","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8286)"},{"Id":"1465149482","IsPullRequest":true,"CreatedAt":"2022-11-26T13:28:55","Actor":"dotnet-maestro[bot]","Number":"8285","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20221125.1\r\n- **Date Produced**: November 25, 2022 2:49:34 PM UTC\r\n- **Commit**: b61fcdfe86b30fe91898bfb296f4f4396fe5d87a\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.22574.1 to 8.0.0-beta.22575.1][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.22574.1 to 8.0.0-beta.22575.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.22574.1 to 8.0.0-beta.22575.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.22574.1 to 8.0.0-beta.22575.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.22574.1 to 8.0.0-beta.22575.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.22574.1 to 8.0.0-beta.22575.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/7cd5e97...b61fcdf\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8285)","Url":"https://github.com/dotnet/winforms/pull/8285","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#8285)"},{"Id":"1465080859","IsPullRequest":false,"CreatedAt":"2022-11-26T07:52:51","Actor":"elachlan","Number":"8284","RawContent":null,"Title":"Enable CA1815 Override equals and operator equals on value types","State":"open","Body":"### Is your feature request related to a problem? Please describe\r\n\r\nhttps://learn.microsoft.com/en-au/dotnet/fundamentals/code-analysis/quality-rules/ca1815\r\n> For [non-blittable](https://learn.microsoft.com/en-au/dotnet/framework/interop/blittable-and-non-blittable-types) value types, the inherited implementation of [Equals](https://learn.microsoft.com/en-us/dotnet/api/system.object.equals) uses the [System.Reflection](https://learn.microsoft.com/en-us/dotnet/api/system.reflection) library to compare the contents of all fields. Reflection is computationally expensive, and comparing every field for equality might be unnecessary. If you expect users to compare or sort instances, or use them as hash table keys, your value type should implement [Equals](https://learn.microsoft.com/en-us/dotnet/api/system.object.equals).\r\n\r\n`ImeModeConversion`\r\nhttps://github.com/dotnet/winforms/blob/5a28fa9c294581314d5675188316fbf09882c114/src/System.Windows.Forms/src/System/Windows/Forms/Control.Ime.cs#L1316\r\n\r\n`ThemedScrollbarWindow`\r\nhttps://github.com/dotnet/winforms/blob/5a28fa9c294581314d5675188316fbf09882c114/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/ThemedScrollbarWindow.cs#L1-L12\r\n\r\n### Describe the solution you'd like and alternatives you've considered\r\n\r\nAdd Equals/GetHashCode to the structs.\r\n\r\nThis involves an API change to the public types.\r\n\r\n### Will this feature affect UI controls?\r\n\r\nUnknown","Url":"https://github.com/dotnet/winforms/issues/8284","RelatedDescription":"Open issue \"Enable CA1815 Override equals and operator equals on value types\" (#8284)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-12-02T03:31:09.3300052Z","RunDurationInMilliseconds":532}