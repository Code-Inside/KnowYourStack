{"Data":{"GitHub":{"Issues":[{"Id":"646466033","IsPullRequest":true,"CreatedAt":"2020-06-26T19:25:59","Actor":"janbaltus","Number":"3519","RawContent":null,"Title":"localization HB","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3519)","Url":"https://github.com/dotnet/winforms/pull/3519","RelatedDescription":"Open PR \"localization HB\" (#3519)"},{"Id":"646355648","IsPullRequest":true,"CreatedAt":"2020-06-26T16:28:20","Actor":"dotnet-maestro[bot]","Number":"3518","RawContent":null,"Title":"[release/5.0-preview7] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 10d330dc-4f8f-4c44-8c66-08d812f956ec\r\n- **Build**: 20200626.1\r\n- **Date Produced**: 6/26/2020 10:19 AM\r\n- **Commit**: b0f97149538e3dabde2267efa326c76a628a30ff\r\n- **Branch**: refs/heads/release/5.0-preview7\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n\r\n[marker]: <> (End:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3518)","Url":"https://github.com/dotnet/winforms/pull/3518","RelatedDescription":"Closed or merged PR \"[release/5.0-preview7] Update dependencies from dotnet/runtime\" (#3518)"},{"Id":"646348028","IsPullRequest":true,"CreatedAt":"2020-06-26T15:40:00","Actor":"mmitche","Number":"3517","RawContent":null,"Title":"Re-categorize runtime dependencies as Product","State":"open","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3517)","Url":"https://github.com/dotnet/winforms/pull/3517","RelatedDescription":"Open PR \"Re-categorize runtime dependencies as Product\" (#3517)"},{"Id":"646284230","IsPullRequest":false,"CreatedAt":"2020-06-26T14:00:56","Actor":"PasaOpasen","Number":"3516","RawContent":null,"Title":"Cannot change color of button if button flatstyle is standard","State":"open","Body":"Cannot change color of button by desiner if button flatstyle is standard","Url":"https://github.com/dotnet/winforms/issues/3516","RelatedDescription":"Open issue \"Cannot change color of button if button flatstyle is standard\" (#3516)"},{"Id":"646274583","IsPullRequest":false,"CreatedAt":"2020-06-26T13:45:39","Actor":"PasaOpasen","Number":"3515","RawContent":null,"Title":"CopyPaste of button copies events too (desiner)","State":"open","Body":"\r\n1. create botton\r\n\r\n2. double click to create event\r\n\r\n3. copy and paste this button\r\n\r\n4. double click -- u will see old event","Url":"https://github.com/dotnet/winforms/issues/3515","RelatedDescription":"Open issue \"CopyPaste of button copies events too (desiner)\" (#3515)"},{"Id":"646217586","IsPullRequest":true,"CreatedAt":"2020-06-26T12:07:33","Actor":"dotnet-maestro[bot]","Number":"3514","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200626.2\r\n- **Date Produced**: 6/26/2020 10:47 AM\r\n- **Commit**: c84811a7c87b1c58e63d572778124742d5c853bb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.CodeDom**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.DirectoryServices**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.Drawing.Common**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.Security.Permissions**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.IO.Packaging**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20326.2\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3514)","Url":"https://github.com/dotnet/winforms/pull/3514","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/runtime\" (#3514)"},{"Id":"646183389","IsPullRequest":false,"CreatedAt":"2020-06-26T10:59:40","Actor":"weltkante","Number":"3513","RawContent":null,"Title":"FileDialog.InitialDirectory does not work","State":"open","Body":"**.NET Core Version:**\r\nmaster\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nyes\r\n\r\n**Problem description:**\r\n`FileDialog.InitialDirectory` doesn't seem to work? It works for the classic dialog, but modern dialogs seem to ignore it, even though there is source code handling it. Debugging the source seems to throw `FileNotFoundException` when calling `GetShellItemForPath`. Might be an interop mistake?\r\n\r\n**Expected behavior:**\r\n`FileDialog.InitialDirectory` should actually set the directory.\r\n\r\n**Minimal repro:**\r\nCreate and show an `OpenFileDialog` with a non-empty `InitialDirectory` (make sure you get the modern version of the dialog)","Url":"https://github.com/dotnet/winforms/issues/3513","RelatedDescription":"Open issue \"FileDialog.InitialDirectory does not work\" (#3513)"},{"Id":"646180487","IsPullRequest":false,"CreatedAt":"2020-06-26T10:54:06","Actor":"weltkante","Number":"3512","RawContent":null,"Title":"Support InitialDirectory and ClientGuid on FolderBrowserDialog","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nThe modernized `FolderBrowserDialog` does not expose relevant native API, it just got retrofitted into the API for the old dialog. This leads to problems like described in #3464 \r\n\r\n- It does not support setting the initially displayed folder. This was not relevant for the old dialog because it only had a single tree view with a single selection, so you could set the initial folder by setting the initial selection. The new dialog has a separate textbox to enter a full path and this is used for the initial selection. In some cases the native dialog will derive the initial folder from the selection but not in all cases, in particular drive roots will just fill the textbox and not set the initial folder. This leads to poor end user experience.\r\n\r\n- It does not support setting a `ClientGuid` like file open and save dialogs. This is because the old dialog had no such concept, but upgrading to the modern dialog this is necessary. This guid is used to specify context under which Windows should remember the last used folder. For example a \"select folder for build output\" would use a different guid than \"select folder for logfiles\" and allow to remember two distinct \"recently used folders\" depending on the context the dialog is used.\r\n\r\nActually those features are already available on the `FileDialog` base class, but for historic reasons `FolderBrowserDialog` just inherits `CommonDialog`. This can't be changed without breaking binary compatibility for running .NET Core 3.1 applications on a .NET Core 5.0 runtime, so the next best solution is duplicating the relevant `FileDialog` properties to `FolderBrowserDialog`.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n\r\nExpose the relvant native API, taking `FileDialog` as precedence:\r\n\r\n```csharp\r\nclass FolderBrowserDialog \r\n{\r\n    [DefaultValue(\"\")]\r\n    [SRCategoryAttribute(\"CatData\")]\r\n    [SRDescriptionAttribute(\"FDinitialDirDescr\")]\r\n    public string InitialDirectory { get; set; }\r\n\r\n    [Browsable(false)]\r\n    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]\r\n    [Localizable(false)]\r\n    public Guid? ClientGuid { get; set; }\r\n}\r\n```\r\n\r\n**Will this feature affect UI controls?**\r\n\r\nYes, this exposes a new property at design time, it needs to follow the usual process of annotating the properties with attributes, if the same localization as FileDialog is reused (as in the API suggestion above) then no new localization is required though. In either case everything is covered by type descriptor infrastructure and the designer itself does not need to do any special handling.","Url":"https://github.com/dotnet/winforms/issues/3512","RelatedDescription":"Open issue \"Support InitialDirectory and ClientGuid on FolderBrowserDialog\" (#3512)"},{"Id":"643387641","IsPullRequest":true,"CreatedAt":"2020-06-26T10:39:51","Actor":"lonitra","Number":"3490","RawContent":null,"Title":"Implement TitleImageIndex/Key to ListViewGroup","State":"closed","Body":"Fixes #3301 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Add `TitleImageIndex` and `TitleImageKey` API to `ListViewGroup`\r\n- Add `GroupImageList` to `ListView`\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customers will be able to set icons next to `ListViewGroup` header\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/30007367/85338352-f7943200-b496-11ea-816c-94eddb85beec.png)\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/30007367/85338430-23afb300-b497-11ea-98a4-fd123ff0442c.png)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n- Unit testing\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3490)","Url":"https://github.com/dotnet/winforms/pull/3490","RelatedDescription":"Closed or merged PR \"Implement TitleImageIndex/Key to ListViewGroup\" (#3490)"},{"Id":"646041542","IsPullRequest":true,"CreatedAt":"2020-06-26T06:30:54","Actor":"gpetrou","Number":"3511","RawContent":null,"Title":"Use generic lists in Control","State":"open","Body":"## Proposed changes\r\n\r\n- Use generic lists in Control.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3511)","Url":"https://github.com/dotnet/winforms/pull/3511","RelatedDescription":"Open PR \"Use generic lists in Control\" (#3511)"},{"Id":"645938094","IsPullRequest":false,"CreatedAt":"2020-06-26T01:04:19","Actor":"davkean","Number":"3510","RawContent":null,"Title":"Windows Forms templates should carry proj.user with SubType already set","State":"open","Body":"**Problem description:**\r\n\r\nTo detect that a Forms is openable by the designer (and gets the icon), Roslyn asynchronously reads the attributes of a type's base types and pushes a \"SubType\" if the right attribute is present to the project system. Which in turn, causes the designer paths to light up.\r\n\r\nThis is a slow and asynchronous process and cannot be blocked on, and causes additional evaluations and design-time builds to kicked off after Roslyn sets the subtype.\r\n\r\n To side step this whole process, and improve the speed for opening the designer and to reduce the number of design-builds that are needed for File -> New, the templates should carry this information and have the project system automatically recognize that this project contains a designable file.\r\n\r\nTo do that, carry a UTF8-with BOM file alongside the project called \"[Project].csproj.user\"\r\n\r\n``` XML\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"Current\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <Compile Update=\"Form1.cs\">\r\n      <SubType>Form</SubType>\r\n    </Compile>\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/dotnet/winforms/issues/3510","RelatedDescription":"Open issue \"Windows Forms templates should carry proj.user with SubType already set\" (#3510)"},{"Id":"645508428","IsPullRequest":true,"CreatedAt":"2020-06-25T12:48:54","Actor":"dotnet-maestro[bot]","Number":"3508","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200625.1\r\n- **Date Produced**: 6/25/2020 11:28 AM\r\n- **Commit**: 4a21529178750aab4b194d54918d0676e0e5833a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.CodeDom**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.DirectoryServices**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Drawing.Common**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Security.Permissions**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.IO.Packaging**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3508)","Url":"https://github.com/dotnet/winforms/pull/3508","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3508)"},{"Id":"645531445","IsPullRequest":false,"CreatedAt":"2020-06-25T12:42:31","Actor":"Dave-Lowndes","Number":"3509","RawContent":null,"Title":"Tab Order dialog/overlay missing in Core Designer","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n    The method of setting control keyboard (tab) ordering for WinForms is poor in comparison to the Windows resource dialog editor. The dialog editor allows you to Ctrl+click a control to start tab re-ordering at that point. I'm not aware of a similar facility for WinForms, consequently it's always an irritation when you need to re-do tab ordering.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n    If you can do it like the dialog editor (or better) that'd be great.\r\n\r\n\r\n**Will this feature affect UI controls?**\r\n    No\r\n","Url":"https://github.com/dotnet/winforms/issues/3509","RelatedDescription":"Open issue \"Tab Order dialog/overlay missing in Core Designer\" (#3509)"},{"Id":"644375392","IsPullRequest":true,"CreatedAt":"2020-06-25T04:39:54","Actor":"RussKie","Number":"3502","RawContent":null,"Title":"Fix ImageList memory leaks","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n## Proposed changes\r\n\r\nDisposing a listview control that has shared instances of `ImageList` wired to any of its properties will cause memory leaks due to incorrect unwiring of associated `ImageList` events.\r\n\r\nRework wire/unwire routines to match `TreeView` implementation.\r\n\r\nResolves #3494\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- No memory leaks disposing `ListView` controls.\r\n- \r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual using the provided sample at https://blog.ramondeklein.nl/2009/05/18/listview-may-leak-with-imagelists/\r\n- unit test (courtesy of @weltkante)\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3502)","Url":"https://github.com/dotnet/winforms/pull/3502","RelatedDescription":"Closed or merged PR \"Fix ImageList memory leaks\" (#3502)"},{"Id":"643689880","IsPullRequest":false,"CreatedAt":"2020-06-25T04:39:54","Actor":"weltkante","Number":"3494","RawContent":null,"Title":"ListView attaches lifetime to ImageList","State":"closed","Body":"**.NET Core Version:**\r\n3.1 and master\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nyes\r\n\r\n**Problem description:**\r\n\r\nWhen a ListView is assigned an ImageList it subscribes on events. This attaches the lifetime of the ListView to the ImageList, i.e. the ListView cannot be collected before the ImageList. If the ImageList outlives the ListView then the ListView (and everything attached to it) is leaked.\r\n\r\nOther controls like TreeView solve this by unsubscribing during disposal.\r\n\r\noriginal article here: https://blog.ramondeklein.nl/2009/05/18/listview-may-leak-with-imagelists/\r\n\r\n**Expected behavior:**\r\nListView lifetime should be independent of ImageList lifetime. Implementation should be similar to TreeView which apparently already solves this problem.\r\n\r\n**Minimal repro:**\r\n* create a ListView\r\n* assign it an ImageList\r\n* clear reference to ListView but keep reference to ImageList\r\n* observe ListView not getting collected\r\n\r\n(for details see linked article)","Url":"https://github.com/dotnet/winforms/issues/3494","RelatedDescription":"Closed issue \"ListView attaches lifetime to ImageList\" (#3494)"},{"Id":"643775981","IsPullRequest":true,"CreatedAt":"2020-06-25T00:01:22","Actor":"gpetrou","Number":"3495","RawContent":null,"Title":"Add EM enum in Interop Richedit","State":"closed","Body":"## Proposed changes\r\n\r\n- Add EM enum in Interop Richedit.\r\n- Remove Interop.RichEditMessages.cs and replace usages with the above enum values.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3495)","Url":"https://github.com/dotnet/winforms/pull/3495","RelatedDescription":"Closed or merged PR \"Add EM enum in Interop Richedit\" (#3495)"},{"Id":"643805406","IsPullRequest":true,"CreatedAt":"2020-06-24T23:55:31","Actor":"gpetrou","Number":"3497","RawContent":null,"Title":"Add tests for TreeNodeCollection Find method","State":"closed","Body":"## Proposed changes\r\n\r\n- Add tests for TreeNodeCollection Find method.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3497)","Url":"https://github.com/dotnet/winforms/pull/3497","RelatedDescription":"Closed or merged PR \"Add tests for TreeNodeCollection Find method\" (#3497)"},{"Id":"644959151","IsPullRequest":true,"CreatedAt":"2020-06-24T23:08:27","Actor":"JeremyKuhne","Number":"3507","RawContent":null,"Title":"Fix HDC in BeginPaintScope","State":"closed","Body":"Getting the DC again was a copy/paste mistake\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3507)","Url":"https://github.com/dotnet/winforms/pull/3507","RelatedDescription":"Closed or merged PR \"Fix HDC in BeginPaintScope\" (#3507)"},{"Id":"644811936","IsPullRequest":false,"CreatedAt":"2020-06-24T18:08:20","Actor":"raffaeler","Number":"3506","RawContent":null,"Title":"Make the designer experience of the ToolStrip controls identical to the classic controls","State":"open","Body":"This is  a suggestion to consider making the designer experience identical regardless the control being used on the form.\r\n\r\nThe latest generation controls (Toolstrip related) have a different designer-experience in comparison to all the others.\r\nWhile using the designer you often have to use dialogs to configure the properties of the toolstrip buttons, combos, etc.\r\n\r\nOf course this suggestion is not meant to change any runtime experience or behavior, neither the designer generated code. It is just a matter of the designer experience.\r\n","Url":"https://github.com/dotnet/winforms/issues/3506","RelatedDescription":"Open issue \"Make the designer experience of the ToolStrip controls identical to the classic controls\" (#3506)"},{"Id":"644761098","IsPullRequest":false,"CreatedAt":"2020-06-24T16:48:16","Actor":"mmitche","Number":"3505","RawContent":null,"Title":"Move validation steps to post-build","State":"open","Body":"Winforms should opt-in to post-build validation for SDL, NuGet validation, etc.,\r\n\r\nTo enable the nightly validation runs, you add repo entries here: https://dev.azure.com/dnceng/internal/_git/dotnet-release?path=%2Feng%2Fpipeline%2Ftools%2Frepos-to-validate.txt and this file a version of https://github.com/dotnet/aspnetcore/blob/master/eng/sdl-tsa-vars.config into your repo under the eng folder. Then the validation steps can be disabled in your azure pipeline as they have been in runtime’s build https://github.com/dotnet/runtime/blob/master/eng/pipelines/official/stages/publish.yml#L30-L49","Url":"https://github.com/dotnet/winforms/issues/3505","RelatedDescription":"Open issue \"Move validation steps to post-build\" (#3505)"},{"Id":"644647381","IsPullRequest":false,"CreatedAt":"2020-06-24T14:11:00","Actor":"vladimir-krestov","Number":"3504","RawContent":null,"Title":"[Servicing] Accessibility: no way to set Label control accessible role and accessible name","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: 3.1\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\nLink to DevDiv issue: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1108206\r\n\r\n**Problem description:**\r\nIf AccessibleName, AccessibleRole, AccessibleDescription is set to a custom value for the Label/GroupBox control, this does not affect the AccessibleName, AccessibleRole, AccessibleDescription in runtime. And default values are shown.\r\n\r\n**Expected behavior:**\r\nThere should be an ability to set/change AccessibleName, AccessibleRole, AccessibleDescription for the Label/GroupBox control.\r\n\r\n**Minimal repro:**\r\nCreate the app with the Label/GroupBox control. Specify custom AccessibleName, AccessibleRole, AccessibleDescription for the label/groupBox. Run the app and observe that the default AccessibleRole or default AccessibleName or default AccessibleDescription are shown in Inspect or Accessibility Insights.","Url":"https://github.com/dotnet/winforms/issues/3504","RelatedDescription":"Open issue \"[Servicing] Accessibility: no way to set Label control accessible role and accessible name\" (#3504)"},{"Id":"644563165","IsPullRequest":true,"CreatedAt":"2020-06-24T12:33:00","Actor":"dotnet-maestro[bot]","Number":"3503","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200623.9\r\n- **Date Produced**: 6/24/2020 9:17 AM\r\n- **Commit**: d908270add914db0e9fb3ce72e93c410e8f0f95a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.DirectoryServices**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.IO.Packaging**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3503)","Url":"https://github.com/dotnet/winforms/pull/3503","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3503)"},{"Id":"643784798","IsPullRequest":true,"CreatedAt":"2020-06-24T07:55:50","Actor":"dotnet-maestro[bot]","Number":"3496","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200622.7\r\n- **Date Produced**: 6/23/2020 8:43 AM\r\n- **Commit**: d6b8109177d0ba0eeafc8f7570c63cbc0b2f2562\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.DirectoryServices**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.IO.Packaging**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3496)","Url":"https://github.com/dotnet/winforms/pull/3496","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3496)"},{"Id":"644191381","IsPullRequest":true,"CreatedAt":"2020-06-23T23:25:28","Actor":"dotnet-maestro[bot]","Number":"3501","RawContent":null,"Title":"[release/5.0-preview7] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 10d330dc-4f8f-4c44-8c66-08d812f956ec\r\n- **Build**: 20200623.4\r\n- **Date Produced**: 6/23/2020 10:06 PM\r\n- **Commit**: 17df0b885273d0f4d22794fd830361d28bf3b663\r\n- **Branch**: refs/heads/release/5.0-preview7\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n\r\n[marker]: <> (End:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3501)","Url":"https://github.com/dotnet/winforms/pull/3501","RelatedDescription":"Closed or merged PR \"[release/5.0-preview7] Update dependencies from dotnet/runtime\" (#3501)"},{"Id":"644058126","IsPullRequest":true,"CreatedAt":"2020-06-23T22:10:55","Actor":"JeremyKuhne","Number":"3499","RawContent":null,"Title":"Another incremental improvement","State":"closed","Body":"Don't want to lock the current command prompt.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3499)","Url":"https://github.com/dotnet/winforms/pull/3499","RelatedDescription":"Closed or merged PR \"Another incremental improvement\" (#3499)"},{"Id":"644082171","IsPullRequest":false,"CreatedAt":"2020-06-23T19:14:58","Actor":"jlchavez","Number":"3500","RawContent":null,"Title":"Printing from ASP.NET Core Razor Pages through Windows Forms Library","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI'm using Syncfusion.PdfViewer.Windows for printing a Pdf through the .NET Core 3.1 App with the WindowsForms SDK without starting the Form, the test worked fine. Syncfusion's library works perfect for printing the Pdf.\r\n\r\nYes I can make it a .NET Framework 4.8 Windows Service, but I would have to create a complete set of tools to manage thist printing service, will I could just add pages to the Hosted Service and run integrated, without having to make APIs, authentication, using tooling that is old as Microsoft has no out-of-the-box solutions as we used to have with Remoting or WCF or ASP.NET WebServices, so we have to reinvent the wheel with gRPC or SignalR or WebSockets. Yes this would be done to interact in another stage,\r\n\r\nCalling the \"Console App\" wouldn't be a problem with Process.Start, but It's just a workaround.\r\n\r\nI tried referencing the System.Windows.Forms, library, but it's a Reference Assembly, I added it from the SDK, and a couple more assemblies, but it required a native dll. So the binding are the one that are missing so that it can be used the references assembly. \r\n\r\nSome printing is done manually through PrintDocument so this would be easier for any one to print.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\nI Would like to print it through a Hosted Service App running as a Windows Service in .NET Core 3.1. I know it's not a expected thing to be integrated into a ASP.NET WebForms App, you could separate the Printing API, if you wish. \r\n\r\nA SDK or something that let's us reference this from the Microsoft.NET.Sdk.Web SDK, or a way to add it would be great.\r\n\r\n**Will this feature affect UI controls?**\r\nNO","Url":"https://github.com/dotnet/winforms/issues/3500","RelatedDescription":"Open issue \"Printing from ASP.NET Core Razor Pages through Windows Forms Library\" (#3500)"},{"Id":"644024529","IsPullRequest":true,"CreatedAt":"2020-06-23T17:57:27","Actor":"dotnet-maestro[bot]","Number":"3498","RawContent":null,"Title":"[release/5.0-preview7] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 10d330dc-4f8f-4c44-8c66-08d812f956ec\r\n- **Build**: 20200622.6\r\n- **Date Produced**: 6/23/2020 4:06 AM\r\n- **Commit**: 80a7935c3accde1a9a97299de456d6f3d75cd57c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n\r\n[marker]: <> (End:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3498)","Url":"https://github.com/dotnet/winforms/pull/3498","RelatedDescription":"Closed or merged PR \"[release/5.0-preview7] Update dependencies from dotnet/runtime\" (#3498)"},{"Id":"643564115","IsPullRequest":false,"CreatedAt":"2020-06-23T06:17:38","Actor":"weltkante","Number":"3493","RawContent":null,"Title":"Support Span where appropriate","State":"open","Body":"**.NET Core Version:**\r\nmaster\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nyes\r\n\r\n**Problem description:**\r\n.NET Core supports `Span` as a new feature that was not present when WinForms was designed. Need to identify appropriate places where e.g. `Span<byte>` can be used as argument instead of byte arrays or streams. Workarounds are converting the span to an array or wrapping it in a stream.\r\n\r\nFollowing places have been identified so far:\r\n* `Cursor(Span<byte>)` constructor should be added\r\n\r\n**Expected behavior:**\r\nSupport `Span` where appropriate\r\n\r\n**Minimal repro:**\r\nSpan API not present, must be converted to array or wrapped in stream.","Url":"https://github.com/dotnet/winforms/issues/3493","RelatedDescription":"Open issue \"Support Span where appropriate\" (#3493)"},{"Id":"643561196","IsPullRequest":false,"CreatedAt":"2020-06-23T06:10:53","Actor":"weltkante","Number":"3492","RawContent":null,"Title":"Cursor(Stream) bugs","State":"open","Body":"**.NET Core Version:**\r\nmaster\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nprobably\r\n\r\n**Problem description:**\r\nAs noted [here in a PR](https://github.com/dotnet/winforms/pull/3476#discussion_r443216116) the constrcutor of `Cursor` taking a `Stream` is broken\r\n\r\n```cs\r\npublic Cursor(Stream stream)\r\n{\r\n    if (stream == null)\r\n    {\r\n        throw new ArgumentNullException(nameof(stream));\r\n    }\r\n\r\n    int length = checked((int)stream.Length);\r\n    _cursorData = new byte[length];\r\n    stream.Read(_cursorData, 0, length);\r\n    LoadPicture(\r\n        new Ole32.GPStream(new MemoryStream(_cursorData)),\r\n        nameof(stream));\r\n}\r\n```\r\n\r\n- if the stream position isn't at zero the buffer would be allocated too large (suboptimal)\r\n- if the stream doesn't know its length this would throw even though it doesn't have to (bug)\r\n- `Read` is allowed to read less then `length` bytes so cursor data may be incomplete (bug)\r\n\r\nUsers can work around those bugs by wrapping their stream, but really the code should do a `stream.CopyTo(MemoryStream)` to let it do the heavy lifting and be more compatible to passing in arbitrary streams.\r\n\r\nNote the current code doesn't throw, it just over-allocates and then reads less bytes than requested, which is fine if the cursor data is still represented completely at the current position.\r\n\r\n**Expected behavior:**\r\n- streams which don't expose their length can still be read\r\n- streams which provide data in chunks still can be loaded\r\n\r\n**Minimal repro:**\r\nprovide a custom stream","Url":"https://github.com/dotnet/winforms/issues/3492","RelatedDescription":"Open issue \"Cursor(Stream) bugs\" (#3492)"},{"Id":"643458615","IsPullRequest":false,"CreatedAt":"2020-06-23T01:22:11","Actor":"alanhoman","Number":"3491","RawContent":null,"Title":"ChildMdi has multiple rendering issues when using PerMonitorV2 or PerMonitor","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n* .NET Core Version: \r\n3.1.400 and v5.0.0-preview.5\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nPerMonitor  using app.manifest works on .NET Framework 4.8.  PerMonitorV2 and PerMonitor do not work in .NET Core 3.1/5.0\r\n\r\n**Problem description:**\r\nThe following issues are occurring with .NET Core 3.1/5.0 HighDpiMode.PerMonitorV2.  The sample project was based on https://github.com/microsoft/dotnet-samples/tree/master/WinForms-HDPI/PerMonitorAware.  These issues prevent us from being able to move to .NET Core.  One of our largest projects has over 1,000 forms and many have multiple Tabs and ListViews that do not render properly on .NET Core due to PerMonitor and PerMonitorV2 issues.  Currently we run with .NET Framework 4.8 in PerMonitor mode and programmatically adjust the fonts on all child forms when the scaling changes.  This PerMonitor workaround does not work in .NET Core. In all the examples, the 144 Dpi monitor is on the left and the 96 Dpi monitor is on the right. Here are [short video clips of issues 1-6](https://github.com/dotnet/winforms/files/4814338/mp4Files.zip).\r\n\r\n**Issue 1**: When moving an MdiParent to a higher DPI monitor the Maximized ChildMdi does not render properly\r\n- Run the project and click MdiParent - Simple Layout\r\n- Maximize SimpleLayout, then drag the MdiParent from a 96 DPI monitor to a 144 DPI monitor (150%).\r\n- The tabControl1 control appears to be anchored beyond the top of the form and overlays all other controls.  The tabContol1 is on the bottom half of the screen and is anchored Top, Bottom, Left, Right.  It should remain on the lower half of the form.\r\n- If the tabControl1 anchoring is changed to Top, Left, this issue does not occur.  On our large project we have dozens of forms that use Top, Bottom, Left, Right anchoring so that it will display as much information as possible to the user depending on their form and screen size.\r\n![Issue 1](https://user-images.githubusercontent.com/2184698/85347187-beff5300-b4ac-11ea-8b62-b873c30ed84f.gif)\r\n\r\n**Issue 2**: When moving an MdiParent to a higher DPI monitor the ChildMdi (not maximized) has extra space on the right and bottom, although it does not have the rendering issues when maximized as in Issue 1.\r\n- Run the project and click MdiParent - Simple Layout\r\n- Drag the MdiParent from a 96 DPI monitor to a 144 DPI monitor (150%).\r\n- There is considerable extra space introduced on the right and bottom of SimpleLayout.\r\n![Issue 2](https://user-images.githubusercontent.com/2184698/85347620-f28ead00-b4ad-11ea-87a9-89b3ac18fc70.gif)\r\n\r\n**Issue 3**: When moving MdiParent to a higher DPI monitor, opening SimpleLayout, and moving it to a lower DPI monitor, the font size increases.  Moving it back increases it more.\r\n- Run the project and click MdiParent - Simple Layout.\r\n- Move the form to a 144 DPI monitor, close the SimpleLayout and go to Tools -> Open New SimpleLayout.\r\n- Move the MdiParent to the 96 DPI monitor.  The form does not render properly, and the font also increases in size.  \r\n- Move the MdiParent back to the 144 DPI monitor.  The font size increases further.  You will notice that the groupBox1 font size is much larger than when the form was first opened on the 144 Dpi monitor.\r\n![Issue 3](https://user-images.githubusercontent.com/2184698/85347734-4b5e4580-b4ae-11ea-876b-0be9aad3f7f5.gif)\r\n\r\n**Issue 4**: When moving SimpleForm to a higher DPI monitor it does not render properly\r\n- Run the project and click Simple Layout\r\n- Drag SimpleLayout from a 96 DPI monitor to a 144 DPI monitor (150%).\r\n- On .NET Core, the ListBox label, TextBox label, and textbox2 are cutoff.  The numericUpDown1, comboBox1, listview1 header, and multiline textbox1 controls are all in a small font (not scaled).  \r\n- On .NET Framework 4.8, the numericUpDown1, comboBox1, listview1 header, and multiline textbox1 controls are all in a small font (not scaled).  The labels are not cutoff as they are in .NET Core.\r\n![Issue 4](https://user-images.githubusercontent.com/2184698/85348934-d7be3780-b4b1-11ea-9884-cf30e213fa10.gif)\r\n\r\n**Issue 5**: When increasing then decreasing the font size, the form does not render properly\r\n- Run the project and click MdiParent - Simple Layout.\r\n- Select Tools - > Increase Font Size, then Tools -> Decrease Font Size.\r\n- SimpleLayout does not render properly.  Its rendering issue is like Issue 1.\r\n- If HighDpiMode.PerMonitorV2 is disabled in Program.cs, the issue does not occur.  With HighDpiMode.PerMonitor, the issue still occurs.\r\n- With .NET Framework 4.8 and With PerMonitor set in app.manifest (app.config setting commented out), this issue does not occur. This is how our current app runs.\r\n![Issue 5](https://user-images.githubusercontent.com/2184698/85347833-a7c16500-b4ae-11ea-9397-08b341e6289b.gif)\r\n\r\n**Issue 6**: Similar issues occur with HighDpiMode.PerMonitor when moving the MdiParent between monitors with different DPI’s.  After 3-4 moves, the form does not render properly.  For .NET Framework 4.8, this issue does not occur.\r\n![Issue 6](https://user-images.githubusercontent.com/2184698/85350040-e22e0080-b4b4-11ea-9de1-abb2de33fa46.gif)\r\n\r\n**Issue 7**: When switching the project from .NET Core 3.1 to NET Core 5.0, the Minimize/Maximize/Close buttons no longer appear on the menu strip when SimpleLayout is maximized.\r\n\r\n**Expected behavior:**\r\nThe SimpleLayout Form should render properly using PerMonitorV2 on monitors with varying DPI's.\r\n\r\n**Minimal repro:**\r\n[.NET Core Sample Project](https://github.com/dotnet/winforms/files/4816186/PerMonitorHDPICore.zip)\r\n[.NET Framework Sample Project](https://github.com/dotnet/winforms/files/4816187/PerMonitorHDPIFramework.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3491","RelatedDescription":"Open issue \"ChildMdi has multiple rendering issues when using PerMonitorV2 or PerMonitor\" (#3491)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-06-27T05:30:51.9223635Z","RunDurationInMilliseconds":815}