{"Data":{"GitHub":{"Issues":[{"Id":"631269369","IsPullRequest":false,"CreatedAt":"2020-06-05T02:43:06","Actor":"Amy-Li03","Number":"3395","RawContent":null,"Title":"The MDI Child form does not render correctly at High DPI","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET 5.0.100-preview.6.20302.5\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\nWhen  keeping the app running and changing the DPI from 100% to 175% or higher, the header of this maximized Mdi child windows shoule not be visible and label control in MDI child window should not be cropped.\r\nBut if we running the app on 100% DPI, then stop the running app and change the DPI from 100% to 175%, run this project again, this issue cannot reproduce.\r\n\r\n![175%](https://user-images.githubusercontent.com/62929087/83830614-26c94600-a718-11ea-821b-06392aed3615.PNG)\r\n\r\n**Expected behavior:**\r\nThe MDI child form should show correctly at high DPI as it was at 100%.\r\n\r\n![100%](https://user-images.githubusercontent.com/62929087/83830568-11541c00-a718-11ea-92ab-66947226c7a9.PNG)\r\n\r\n**Minimal repro:**\r\n1. Run the test app with display at 100%. \r\n[MdiHighDpiTest-master.zip](https://github.com/dotnet/winforms/files/4733616/MdiHighDpiTest-master.zip)\r\n2. Keep the app running and change the display to 175% or higher. (there is no sign out)","Url":"https://github.com/dotnet/winforms/issues/3395","RelatedDescription":"Open issue \"The MDI Child form does not render correctly at High DPI\" (#3395)"},{"Id":"631168852","IsPullRequest":true,"CreatedAt":"2020-06-04T21:47:02","Actor":"dreddy-work","Number":"3394","RawContent":null,"Title":"Fixing DPI changed events by changing the order in setting child Form owner","State":"open","Body":"In a multi DPI environment, DPI changed events triggered only when there is a DPI change happened for the Handle directly or via its parent. So, it is necessary to **not** set the\r\nowner before creating the Form handle. Otherwise, the window may never receive DPI changed\r\nevent even if its parent Form has different DPI. Users at runtime, has to move the Form window\r\nbetween the screens to get the DPI changed events triggered.\r\n\r\nPlease see associated issue for more details and screen shots the behavior at runtime.\r\n\r\nFixes #3390 \r\n\r\n## Proposed changes\r\n\r\nChanging the order when setting the owner of a child form.\r\n\r\n## Regression? \r\n\r\n-No\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3394)","Url":"https://github.com/dotnet/winforms/pull/3394","RelatedDescription":"Open PR \"Fixing DPI changed events by changing the order in setting child Form owner\" (#3394)"},{"Id":"630873376","IsPullRequest":false,"CreatedAt":"2020-06-04T14:26:28","Actor":"M-Lipin","Number":"3393","RawContent":null,"Title":"Need to cover the UiaDisconnectProvider call with test scenario","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n5.0 after merging https://github.com/dotnet/winforms/pull/3308\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nNo\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\nUiaDisconnectProvider call was added to Control.ReleaseUiaProvider method. This introduces releasing accessibility objects but this functionality is not covered be test. Need to add this.\r\n\r\n**Expected behavior:**\r\nUiaDisconnectProvider call should be covered by test.\r\n\r\n**Minimal repro:**\r\nReview the Control.ReleaseUiaProvider and UiaDisconnectProvider call within it and observe that this is not covered by tests.\r\n\r\nSample standalone test:\r\n[ConsoleUiaTester.zip](https://github.com/dotnet/winforms/files/4730647/ConsoleUiaTester.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3393","RelatedDescription":"Open issue \"Need to cover the UiaDisconnectProvider call with test scenario\" (#3393)"},{"Id":"630766914","IsPullRequest":true,"CreatedAt":"2020-06-04T12:34:09","Actor":"dotnet-maestro[bot]","Number":"3392","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200603.11\r\n- **Date Produced**: 6/4/2020 7:59 AM\r\n- **Commit**: 4a4e347b964a2c8d2216ec382e4fb481965bb2fc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20303.1 to 5.0.0-preview.7.20303.11\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3392)","Url":"https://github.com/dotnet/winforms/pull/3392","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3392)"},{"Id":"630605638","IsPullRequest":false,"CreatedAt":"2020-06-04T08:09:22","Actor":"hughbe","Number":"3391","RawContent":null,"Title":"ErrorProviderAccessibleObjectTests.Ctor tests flakey","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\nMaster\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nN/A\r\n\r\n**Problem description:**\r\nIn https://github.com/dotnet/winforms/pull/3366\r\n```\r\nProcess terminated. Assertion Failed\r\nAccessing a disposed DC, forcing recreation of HDC - this will generate a Handle leak!\r\n   at System.NoAssertContext.NoAssertListener.Fail(String message, String detailMessage) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms.Primitives\\tests\\TestUtilities\\NoAssertContext.cs:line 105\r\n   at System.Diagnostics.TraceInternal.Fail(String message, String detailMessage)\r\n   at System.Diagnostics.TraceInternal.TraceProvider.Fail(String message, String detailMessage)\r\n   at System.Diagnostics.Debug.Assert(Boolean condition, String message)\r\n   at System.Windows.Forms.Internal.DeviceContext.get_Hdc() in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\misc\\GDI\\DeviceContext.cs:line 102\r\n   at System.Windows.Forms.Internal.DeviceContext.Equals(Object obj) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\misc\\GDI\\DeviceContext.cs:line 450\r\n   at System.Windows.Forms.WeakRefCollection.WeakRefObject.Equals(Object obj) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms.Primitives\\src\\System\\Windows\\Forms\\Internals\\WeakRefCollection.cs:line 253\r\n   at System.Collections.ArrayList.Contains(Object item)\r\n   at System.Windows.Forms.WeakRefCollection.Contains(Object value) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms.Primitives\\src\\System\\Windows\\Forms\\Internals\\WeakRefCollection.cs:line 181\r\n   at System.Windows.Forms.Internal.DeviceContexts.AddDeviceContext(DeviceContext dc) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\misc\\GDI\\DeviceContexts.cs:line 28\r\n   at System.Windows.Forms.Internal.DeviceContext..ctor(IntPtr hWnd) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\misc\\GDI\\DeviceContext.cs:line 174\r\n   at System.Windows.Forms.Internal.DeviceContext.FromHwnd(IntPtr hwnd) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\misc\\GDI\\DeviceContext.cs:line 218\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.Update(Boolean timerCaused) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\ErrorProvider.cs:line 1244\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.StartBlinking() in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\ErrorProvider.cs:line 1151\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.StartBlinking() in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\ErrorProvider.cs:line 1622\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.AddToWindow() in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\ErrorProvider.cs:line 1642\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.set_Error(String value) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\ErrorProvider.cs:line 1491\r\n   at System.Windows.Forms.ErrorProvider.SetError(Control control, String value) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\ErrorProvider.cs:line 791\r\n   at System.Windows.Forms.Tests.AccessibleObjects.ErrorProviderAccessibleObjectTests..ctor() in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\tests\\UnitTests\\AccessibleObjects\\ErrorProviderAccessibleObjectTests.cs:line 44\r\n   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache, Boolean wrapExceptions)\r\n   at System.Activator.CreateInstance(Type type, Boolean nonPublic, Boolean wrapExceptions)\r\n   at System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture)\r\n   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)\r\n   at System.Activator.CreateInstance(Type type, Object[] args)\r\n   at ReflectionAbstractionExtensions.<>c__DisplayClass0_0.<CreateTestClass>b__0() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Extensions\\ReflectionAbstractionExtensions.cs:line 42\r\n   at Xunit.Sdk.ExecutionTimer.Aggregate(Action action) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 31\r\n   at ReflectionAbstractionExtensions.CreateTestClass(ITest test, Type testClassType, Object[] constructorArguments, IMessageBus messageBus, ExecutionTimer timer, CancellationTokenSource cancellationTokenSource) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Extensions\\ReflectionAbstractionExtensions.cs:line 42\r\n   at Xunit.Sdk.TestInvoker`1.CreateTestClass() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 124\r\n   at Xunit.Sdk.UITestInvoker.<RunAsync>b__2_0()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext()\r\n   at Xunit.Sdk.Utilities.SyncContextAwaiter.<>c.<OnCompleted>b__5_0(Object s)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Delegate.DynamicInvokeImpl(Object[] args)\r\n   at System.Delegate.DynamicInvoke(Object[] args)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackDo(ThreadMethodEntry tme) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Control.cs:line 6512\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackHelper(Object obj) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Control.cs:line 6469\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallback(ThreadMethodEntry tme) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Control.cs:line 6446\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbacks() in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Control.cs:line 6550\r\n   at System.Windows.Forms.Control.WndProc(Message& m) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Control.cs:line 13185\r\n   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Control.ControlNativeWindow.cs:line 67\r\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Control.ControlNativeWindow.cs:line 119\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\NativeWindow.cs:line 372\r\n   at Interop.User32.DispatchMessageW(MSG& msg)\r\n   at Interop.User32.DispatchMessageW(MSG& msg)\r\n   at System.Windows.Forms.Application.ComponentManager.Interop.Mso.IMsoComponentManager.FPushMessageLoop(UIntPtr dwComponentID, msoloop uReason, Void* pvLoopData) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Application.ComponentManager.cs:line 345\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(msoloop reason, ApplicationContext context) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Application.ThreadContext.cs:line 1130\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(msoloop reason, ApplicationContext context) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Application.ThreadContext.cs:line 992\r\n   at System.Windows.Forms.Application.DoEvents() in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Application.cs:line 811\r\n   at Xunit.Sdk.WinFormsSynchronizationContextAdapter.PumpTill(SynchronizationContext synchronizationContext, Task task)\r\n   at Xunit.Sdk.ThreadRental.<>c__DisplayClass11_0.<CreateAsync>b__0()\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```","Url":"https://github.com/dotnet/winforms/issues/3391","RelatedDescription":"Open issue \"ErrorProviderAccessibleObjectTests.Ctor tests flakey\" (#3391)"},{"Id":"630423285","IsPullRequest":true,"CreatedAt":"2020-06-04T03:51:06","Actor":"RussKie","Number":"3389","RawContent":null,"Title":"Add local dev convenience scripts","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3389)","Url":"https://github.com/dotnet/winforms/pull/3389","RelatedDescription":"Closed or merged PR \"Add local dev convenience scripts\" (#3389)"},{"Id":"630426609","IsPullRequest":false,"CreatedAt":"2020-06-04T00:50:49","Actor":"dreddy-work","Number":"3390","RawContent":null,"Title":"Winforms child window is not scaled according to the DPI of the moitor.","State":"open","Body":"* Have you experienced this same bug with .NET Framework?: \r\n\r\nYes\r\n\r\n**Problem description:**\r\n\r\nWinfrom application is unable to render the child window appropriately according to the current monitor DPI when it's DpiAwareness is set to PermonitorV2. Also, when the application is dragged from one monitor to another with different DPI setting and then a new child window is opened, the child window is not rendered according to the monitor's DPI.\r\n\r\nSame behavior is experienced if  the scaling of the monitor is changed and  then a new child window is opened, the child window is not rendered according to current monitor's DPI. Below is a screenshot clicked after dragging the application from one monitor to another and the front window was opened after dragging the application to second \r\n\r\n![image](https://user-images.githubusercontent.com/36968667/83702640-1bfc9d00-a5c2-11ea-8846-a457b15621a9.png)\r\n\r\n**Expected behavior:**\r\n\r\nScaling of the parent and child forms should be consistent and according to the monitor DPI that they are rendered.\r\n\r\n**Minimal repro:**\r\n\r\n[WindowsFormsApplication (2).zip](https://github.com/dotnet/winforms/files/4726860/WindowsFormsApplication.2.zip)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3390","RelatedDescription":"Open issue \"Winforms child window is not scaled according to the DPI of the moitor.\" (#3390)"},{"Id":"630289502","IsPullRequest":true,"CreatedAt":"2020-06-03T20:05:37","Actor":"weltkante","Number":"3388","RawContent":null,"Title":"Update inappropriate ComVisible attributes","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #1878\r\n\r\n## Proposed changes\r\n\r\nThe changeset is broken down into separate commits with a rationale for each category:\r\n- Remove `ComVisible(true)` from enums, they were used for TLB generation/lookup. Since there is no WinForms TLB provided by .NET Core there is no value in keeping this attribute.\r\n- Remove `ComVisible(true)` from `AccessibleObject` classes. They are not CoCreateable (no parameterless constructor) and exposing an already existing instance to COM does not require that attribute.\r\n- Remove `ComVisible(true)` from `Control`/`Component` classes. This was used to allow hosting of WinForms controls via OLE/ActiveX, for example in VB6 or MFC. However this requires a TLB for WinForms which is no longer provided, as well as registry-based activation which also would not work out of the box. Generally there was no maintenance of COM based hosting of WinForms controls so its likely to be broken, therefore removing support for COM based hosting of WinForms controls instead of leaving it in an unsupported state.\r\n  - This commit also removes `ClassInterface` attributes from controls. If hosting via OLE/ActiveX is not supported these attributes are not needed anymore. They are kept in other places where objects are still exposed to COM and the attribute may be relevant.\r\n- Remove `ComVisible(true)` from EventArgs. They were most likely used with OLE/ActiveX hosting, which is no longer supported. They are not CoCreateable either so the attribute has no purpose. Exposing existing instances without providing a TLB makes no sense either.\r\n- Remove `ComVisible(true)` from delegates. Purpose is unknown but since ActiveX hosting of WinForms Controls is no longer supported its unlikely to have any purpose any more.\r\n- Remove `ComVisible(true)` from some non-public code. The only potential consumer would be the new VS designer, but without a GUID specified its unlikely that its still needed. Can provide a GUID if required.\r\n- Remove `ComVisible(true)` from some arbitrary public designer classes. The old VS designer may have been using COM interop to talk to them, but the old designer doesn't support .NET Core so there is most likely no one who needs these ComVisible.\r\n- `IWin32Window` had a conflict with Desktop Framework which has dangerous consequences, see discussion in issue. Resolution can be either removing `ComVisible(true)` if not required ore generating a new GUID not conflicting with Desktop Framework.\r\n- The WinForms managed `IDataObject` was made ComVisible. This is not required, there is a separate ComImport interface declaration for IDataObject COM interop. Having the managed IDataObject being ComVisible is actually counterproductive since no TLB is provided and marshaling will always fail. Also the GUID was not specified and differed from Desktop Framework so its unlikely that removing an undocumented IID will affect customers negatively.\r\n- Remove `ComVisible(false)` - those are placed in seemingly arbitrary places and are redundant when the default is to not expose classes to COM interop (if the default is to expose, then current set of annotations would also be wrong because way too few classes have this annotation)\r\n\r\n## Customer Impact\r\nMay break customers which were doing unsupported COM interop against WinForms. It is unexpected that any exist, if they do it is desireable to gather feedback of what people are doing and then evaluate whether these scenarios are to be supported.\r\n\r\n## Regression? \r\n\r\n**partial**\r\n\r\nThere was one interface which was sharing a GUID with Desktop Framework, `IWin32Window`, this is a conflict that could cause damage. (The regression part is that trying to register an application this way could damage the Desktop Framework installation, see discussion in linked issue.)\r\n\r\n## Risk\r\n\r\nassumed low, may be breaking unknown usage patterns\r\n\r\n### Before\r\n\r\n- redundant `ComVisible` attributes\r\n- `ComVisible(true)` attributes without GUID, causing no harm but COM interop not being actively supported either\r\n- conflicts in GUID with Desktop Framework\r\n\r\n### After\r\n\r\n- redundant `ComVisible` removed\r\n- unsupported `ComVisible(true)` removed, may be reconsidered in the future together with what is considered a supported scenario\r\n- resolve all GUID conflicts by generating a separate GUID für .NET Core\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- seaching for `ComVisible` in the codebase\r\n- manual evaluation of scenarios (see above)\r\n- **no** automated testing since most of the scenarios were not actively supported\r\n\r\n## Accessibility testing\r\n\r\nNot performed. If removal of `ComVisible` on `AccessibleObject` requires testing to confirm general functionality is maintained this testing has yet to be performed.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3388)","Url":"https://github.com/dotnet/winforms/pull/3388","RelatedDescription":"Open PR \"Update inappropriate ComVisible attributes\" (#3388)"},{"Id":"629942591","IsPullRequest":true,"CreatedAt":"2020-06-03T12:44:58","Actor":"dotnet-maestro[bot]","Number":"3387","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200603.1\r\n- **Date Produced**: 6/3/2020 10:40 AM\r\n- **Commit**: e25517ea27311297c1e3946acb3b4382d5fa7fef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20302.1 to 5.0.0-preview.7.20303.1\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3387)","Url":"https://github.com/dotnet/winforms/pull/3387","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3387)"},{"Id":"629722706","IsPullRequest":false,"CreatedAt":"2020-06-03T07:20:32","Actor":"Wonderdch","Number":"3386","RawContent":null,"Title":"Dead link","State":"closed","Body":"**Problem description:**\r\n\r\nPage: [Designing Forms](https://github.com/dotnet/winforms/blob/master/Documentation/getting-started.md#designing-forms)\r\nLink: [Windows Forms Designer Documentation.](https://github.com/dotnet/winforms/blob/master/Documentation/Documentation/winforms-designer.md)","Url":"https://github.com/dotnet/winforms/issues/3386","RelatedDescription":"Closed issue \"Dead link\" (#3386)"},{"Id":"629290729","IsPullRequest":false,"CreatedAt":"2020-06-03T06:11:18","Actor":"maikebing","Number":"3383","RawContent":null,"Title":"Whether  can reconsider supporting cross-platforms? ","State":"closed","Body":"Whether  can reconsider supporting cross-platforms, whether  can consider implementing mono/winforms under Linux and macos ?\r\nOr  rename mono/winform to Microsoft.NET.Sdk.LinuxDesktop  and   packe in to  .net core sdk !\r\n\r\n   ","Url":"https://github.com/dotnet/winforms/issues/3383","RelatedDescription":"Closed issue \"Whether  can reconsider supporting cross-platforms? \" (#3383)"},{"Id":"629492388","IsPullRequest":true,"CreatedAt":"2020-06-02T21:19:20","Actor":"dotnet-maestro[bot]","Number":"3385","RawContent":null,"Title":"[release/5.0-preview6] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f9536b6f-5667-4c67-faef-08d7f76e4602)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: f9536b6f-5667-4c67-faef-08d7f76e4602\r\n- **Build**: 20200602.5\r\n- **Date Produced**: 6/2/2020 7:55 PM\r\n- **Commit**: f332f8c82d7b981b98d2089fdaa37cdb8b3688a9\r\n- **Branch**: refs/heads/release/5.0-preview6\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20302.4 to 5.0.0-preview.6.20302.5\r\n\r\n[marker]: <> (End:f9536b6f-5667-4c67-faef-08d7f76e4602)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3385)","Url":"https://github.com/dotnet/winforms/pull/3385","RelatedDescription":"Closed or merged PR \"[release/5.0-preview6] Update dependencies from dotnet/runtime\" (#3385)"},{"Id":"629453296","IsPullRequest":true,"CreatedAt":"2020-06-02T20:07:11","Actor":"dotnet-maestro[bot]","Number":"3384","RawContent":null,"Title":"[release/5.0-preview6] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f9536b6f-5667-4c67-faef-08d7f76e4602)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: f9536b6f-5667-4c67-faef-08d7f76e4602\r\n- **Build**: 20200602.4\r\n- **Date Produced**: 6/2/2020 6:27 PM\r\n- **Commit**: b463ce262ae303c6528d2876f36896af9fe3cb0e\r\n- **Branch**: refs/heads/release/5.0-preview6\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.6.20302.4\r\n\r\n[marker]: <> (End:f9536b6f-5667-4c67-faef-08d7f76e4602)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3384)","Url":"https://github.com/dotnet/winforms/pull/3384","RelatedDescription":"Closed or merged PR \"[release/5.0-preview6] Update dependencies from dotnet/runtime\" (#3384)"},{"Id":"629273928","IsPullRequest":true,"CreatedAt":"2020-06-02T15:19:16","Actor":"dotnet-maestro[bot]","Number":"3382","RawContent":null,"Title":"[release/5.0-preview6] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d55bd98b-84aa-440f-348f-08d7f76f116e)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: d55bd98b-84aa-440f-348f-08d7f76f116e\r\n- **Build**: 20200530.1\r\n- **Date Produced**: 5/30/2020 1:48 PM\r\n- **Commit**: fef373440d604c428950236fbc2b99ce0df368a9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20280.1\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20280.1\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20280.1\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20280.1\r\n  - **Microsoft.DotNet.RemoteExecutor**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20280.1\r\n- **Updates to .NET SDKs:**\r\n  - Updates sdk.version to 5.0.100-preview.6.20266.3\r\n  - Updates tools.dotnet to 5.0.100-preview.6.20266.3\r\n\r\n[marker]: <> (End:d55bd98b-84aa-440f-348f-08d7f76f116e)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3382)","Url":"https://github.com/dotnet/winforms/pull/3382","RelatedDescription":"Closed or merged PR \"[release/5.0-preview6] Update dependencies from dotnet/arcade\" (#3382)"},{"Id":"627717006","IsPullRequest":true,"CreatedAt":"2020-06-02T14:34:36","Actor":"dotnet-maestro[bot]","Number":"3369","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200530.1\r\n- **Date Produced**: 5/30/2020 1:48 PM\r\n- **Commit**: fef373440d604c428950236fbc2b99ce0df368a9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20280.1\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20280.1\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20280.1\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20280.1\r\n  - **Microsoft.DotNet.RemoteExecutor**: from 5.0.0-beta.20261.9 to 5.0.0-beta.20280.1\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3369)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/3369","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3369)"},{"Id":"628743122","IsPullRequest":false,"CreatedAt":"2020-06-02T13:53:45","Actor":"Jean-Enrick","Number":"3379","RawContent":null,"Title":"Not updating Minimum or Maximum property of NumericUpDown","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nWhen changing the value of the Minimum or the Maximum property for a NumericUpDown control from the Properties menu, the designer file is not updated. When building the project, the properties will keep their default values of 0 and 100.\r\n\r\n**Expected behavior:**\r\nIf the value Minimum or Maximum property is changed from the default value, a new line is added to the designer file, setting the value to the one entered in the Properties menu.\r\n\r\n\r\n**Minimal repro:**\r\nCreate a Windows Forms .NET Core app. In the design view for the default form, add a NumericUpDown control, change the value of the Minimum or Maximum property and build the project.\r\n","Url":"https://github.com/dotnet/winforms/issues/3379","RelatedDescription":"Closed issue \"Not updating Minimum or Maximum property of NumericUpDown\" (#3379)"},{"Id":"629155134","IsPullRequest":true,"CreatedAt":"2020-06-02T12:35:34","Actor":"dotnet-maestro[bot]","Number":"3381","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200602.1\r\n- **Date Produced**: 6/2/2020 9:55 AM\r\n- **Commit**: 3f776fb77c58df952636eed3722f67cbbf627070\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20281.6 to 5.0.0-preview.7.20302.1\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3381)","Url":"https://github.com/dotnet/winforms/pull/3381","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3381)"},{"Id":"628048200","IsPullRequest":true,"CreatedAt":"2020-06-02T11:54:25","Actor":"hughbe","Number":"3375","RawContent":null,"Title":"Add DataGridViewHeaderCell tests","State":"closed","Body":"## Proposed Changes\r\n- Add DataGridViewHeaderCell tests\r\n- Add parameter names to ArgumentExceptions\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3375)","Url":"https://github.com/dotnet/winforms/pull/3375","RelatedDescription":"Closed or merged PR \"Add DataGridViewHeaderCell tests\" (#3375)"},{"Id":"627422389","IsPullRequest":true,"CreatedAt":"2020-06-02T11:45:47","Actor":"hughbe","Number":"3368","RawContent":null,"Title":"Add ListBox SelectedItems tests","State":"closed","Body":"## Proposed Changes\r\n- Add ListBox SelectedItems tests\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3368)","Url":"https://github.com/dotnet/winforms/pull/3368","RelatedDescription":"Closed or merged PR \"Add ListBox SelectedItems tests\" (#3368)"},{"Id":"628867894","IsPullRequest":true,"CreatedAt":"2020-06-02T03:17:06","Actor":"paul1956","Number":"3380","RawContent":null,"Title":"Replace GetApplicationInstanceID with one that is compatible with Fra…","State":"open","Body":"…mework when GUID Attribute available\r\n\r\nFixes #3296 \r\n\r\n## Proposed changes\r\nReplace GetApplicationInstanceID with one that supports a Framework compatible unique Id for single instance if there is an available GUID attribute and a major and minor version number set. If no GUID is available it will fall back to what it currently does and each compile will produce a different GUID so that Debug and Release for example are 2 different apps. If GUID is available but no version then all versions of an application are considered the same.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n- VB Single instance will work the same in Core as it did in framework\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- There are no tests for this as the code for setting the GUID is not in Visual Studio yet, existing Framework Apps ported using TryConvert will have one and if they is no GUID the current behavior and tests apply\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- There are tests for getting the GUID attribute custom attribute in Core, the logic comes from Framework and I have tested on multiple ported applications.\r\n- More test can be added when #3352 is merged\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3380)","Url":"https://github.com/dotnet/winforms/pull/3380","RelatedDescription":"Open PR \"Replace GetApplicationInstanceID with one that is compatible with Fra…\" (#3380)"},{"Id":"628686569","IsPullRequest":false,"CreatedAt":"2020-06-01T19:55:38","Actor":"hughbe","Number":"3378","RawContent":null,"Title":"DataGridView.TopLeftHeaderCell throws ArgumentOutOfRangeException on Handle creation","State":"open","Body":"* .NET Core Version: \r\nMaster\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\nConsider the following code:\r\n```cs\r\n\r\npublic static IEnumerable<object[]> GetInheritedState_TopLeftHeaderCellWithHandle_TestData()\r\n{\r\n    foreach (DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode in Enum.GetValues(typeof(DataGridViewRowHeadersWidthSizeMode)))\r\n    {\r\n        foreach (DataGridViewColumnHeadersHeightSizeMode columnHeadersHeightSizeMode in Enum.GetValues(typeof(DataGridViewColumnHeadersHeightSizeMode)))\r\n        {\r\n            DataGridViewElementStates expected = rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || columnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing ? DataGridViewElementStates.Resizable : (DataGridViewElementStates)0;\r\n            yield return new object[] { rowHeadersWidthSizeMode, true, columnHeadersHeightSizeMode, true, DataGridViewElementStates.Visible | DataGridViewElementStates.Displayed | expected };\r\n            yield return new object[] { rowHeadersWidthSizeMode, true, columnHeadersHeightSizeMode, false, expected };\r\n            yield return new object[] { rowHeadersWidthSizeMode, false, columnHeadersHeightSizeMode, false, expected };\r\n            yield return new object[] { rowHeadersWidthSizeMode, false, columnHeadersHeightSizeMode, false, expected };\r\n        }\r\n    }\r\n}\r\n\r\n[WinFormsTheory]\r\n[MemberData(nameof(GetInheritedState_TopLeftHeaderCellWithHandle_TestData))]\r\npublic void DataGridViewHeaderCell_GetInheritedState_InvokeTopLeftHeaderCellWithHandle_ReturnsExpected(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool rowHeadersVisible, DataGridViewColumnHeadersHeightSizeMode columnHeadersHeightSizeMode, bool columnHeadersVisible, DataGridViewElementStates expected)\r\n{\r\n    using var cell = new DataGridViewHeaderCell();\r\n    using var control = new DataGridView\r\n    {\r\n        RowHeadersWidthSizeMode = rowHeadersWidthSizeMode,\r\n        RowHeadersVisible = rowHeadersVisible,\r\n        ColumnHeadersHeightSizeMode = columnHeadersHeightSizeMode,\r\n        ColumnHeadersVisible = columnHeadersVisible\r\n    };\r\n    control.TopLeftHeaderCell = cell;\r\n    Assert.NotEqual(IntPtr.Zero, control.Handle);\r\n    int invalidatedCallCount = 0;\r\n    control.Invalidated += (sender, e) => invalidatedCallCount++;\r\n    int styleChangedCallCount = 0;\r\n    control.StyleChanged += (sender, e) => styleChangedCallCount++;\r\n    int createdCallCount = 0;\r\n    control.HandleCreated += (sender, e) => createdCallCount++;\r\n\r\n    Assert.Equal(DataGridViewElementStates.Frozen | DataGridViewElementStates.ReadOnly | DataGridViewElementStates.ResizableSet | expected, cell.GetInheritedState(-1));\r\n    Assert.True(control.IsHandleCreated);\r\n    Assert.Equal(0, invalidatedCallCount);\r\n    Assert.Equal(0, styleChangedCallCount);\r\n    Assert.Equal(0, createdCallCount);\r\n}\r\n```\r\nGet the error\r\n```\r\nA total of 1 test files matched the specified pattern.\r\nThe active test run was aborted. Reason: Test host process crashed : Unhandled Exception: System.Exception: Specified argument was out of the range of valid values.\r\nParameter name: rowIndex\r\n   at System.Windows.Forms.DataGridViewCell.GetInheritedStyle(DataGridViewCellStyle inheritedCellStyle, Int32 rowIndex, Boolean includeColors)\r\n   at System.Windows.Forms.DataGridViewCell.GetPreferredHeight(Int32 rowIndex, Int32 width)\r\n   at System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight(Boolean fixedRowHeadersWidth, Boolean fixedColumnsWidth)\r\n   at System.Windows.Forms.DataGridView.OnGlobalAutoSize()\r\n   at System.Windows.Forms.DataGridView.OnHandleCreated(EventArgs e)\r\n   at System.Windows.Forms.Control.WmCreate(Message& m)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.Tests.ControlTests.<>c.<.ctor>b__3_0(Object sender, ThreadExceptionEventArgs e) in C:\\Users\\hughbe\\source\\repos\\ConsoleApp\\Support\\ControlTests.Data.cs:line 19\r\n   at System.Windows.Forms.Application.ThreadContext.OnThreadException(Exception t)\r\n   at System.Windows.Forms.Control.WndProcException(Exception e)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n```\r\n\r\n**Expected behavior:**\r\nShouldn't throw\r\n\r\n**Minimal repro:**\r\nSee above","Url":"https://github.com/dotnet/winforms/issues/3378","RelatedDescription":"Open issue \"DataGridView.TopLeftHeaderCell throws ArgumentOutOfRangeException on Handle creation\" (#3378)"},{"Id":"628372513","IsPullRequest":false,"CreatedAt":"2020-06-01T13:07:05","Actor":"15092368540","Number":"3376","RawContent":null,"Title":"DataGridView memory usage","State":"closed","Body":".NET Core 3.1.4\r\n\r\nDataGridView memory usage so much and the first search takes too long time.\r\n\r\n![DGTest](https://user-images.githubusercontent.com/49462433/83405636-8507d780-a43f-11ea-8d17-256fe38d7658.GIF)\r\n\r\nExample:\r\n\r\n[DGTest.ZIP](https://github.com/dotnet/winforms/files/4711037/DGTest.ZIP)\r\n","Url":"https://github.com/dotnet/winforms/issues/3376","RelatedDescription":"Closed issue \"DataGridView memory usage\" (#3376)"},{"Id":"628389907","IsPullRequest":true,"CreatedAt":"2020-06-01T12:40:45","Actor":"dotnet-maestro[bot]","Number":"3377","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200531.6\r\n- **Date Produced**: 6/1/2020 7:05 AM\r\n- **Commit**: bdf6a5a0e86101d438316c83d420eb03624b5fc4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20280.5 to 5.0.0-preview.6.20281.6\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3377)","Url":"https://github.com/dotnet/winforms/pull/3377","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3377)"},{"Id":"627419731","IsPullRequest":true,"CreatedAt":"2020-05-31T22:39:14","Actor":"hughbe","Number":"3367","RawContent":null,"Title":"Add RadioButton tests","State":"closed","Body":"## Proposed Changes\r\n- Add RadioButton tests\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3367)","Url":"https://github.com/dotnet/winforms/pull/3367","RelatedDescription":"Closed or merged PR \"Add RadioButton tests\" (#3367)"},{"Id":"627950294","IsPullRequest":true,"CreatedAt":"2020-05-31T12:34:08","Actor":"dotnet-maestro[bot]","Number":"3374","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200530.5\r\n- **Date Produced**: 5/31/2020 1:56 AM\r\n- **Commit**: c22d94f239f355dade0a71fc9a6e019e037d6747\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20279.7 to 5.0.0-preview.6.20280.5\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3374)","Url":"https://github.com/dotnet/winforms/pull/3374","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3374)"},{"Id":"627769955","IsPullRequest":true,"CreatedAt":"2020-05-30T16:36:51","Actor":"hughbe","Number":"3373","RawContent":null,"Title":"Fix DataGridView.OnRowHeadersWidthSizeModeChanged event invocation","State":"open","Body":"## Proposed Changes\r\n- Fix DataGridView.OnRowHeadersWidthSizeModeChanged event invocation\r\n- Fix DataGridView.OnColumnHeaderHeightChanged forcing handle creation\r\n\r\nFixes #3371\r\nFixes #3372\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3373)","Url":"https://github.com/dotnet/winforms/pull/3373","RelatedDescription":"Open PR \"Fix DataGridView.OnRowHeadersWidthSizeModeChanged event invocation\" (#3373)"},{"Id":"627765021","IsPullRequest":false,"CreatedAt":"2020-05-30T16:12:46","Actor":"hughbe","Number":"3372","RawContent":null,"Title":"DataGridView.OnColumnHeadersHeightChanged forces creation of the handle","State":"open","Body":"* .NET Core Version: \r\nMaster\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n\r\nCompare `OnColumnHeadersHeightChanged` with \r\n```cs\r\nprotected virtual void OnColumnHeadersHeightChanged(EventArgs e)\r\n{\r\n    if (editingControl != null)\r\n    {\r\n        PositionEditingControl(true, false, false);\r\n    }\r\n\r\n    UpdateMouseEnteredCell(null /*HitTestInfo*/, null /*MouseEventArgs*/);\r\n\r\n    OnColumnHeadersGlobalAutoSize();\r\n\r\n    if (Events[EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED] is EventHandler eh && !dataGridViewOper[DATAGRIDVIEWOPER_inDispose] && !IsDisposed)\r\n    {\r\n        eh(this, e);\r\n    }\r\n}\r\n```\r\n\r\nwith `OnRowHeadersWidthChanged`\r\n```cs\r\nprotected virtual void OnRowHeadersWidthChanged(EventArgs e)\r\n{\r\n    if (RowHeadersVisible)\r\n    {\r\n        if (editingControl != null)\r\n        {\r\n            PositionEditingControl(true, false, false);\r\n        }\r\n\r\n        if (IsHandleCreated)\r\n        {\r\n            UpdateMouseEnteredCell(null /*HitTestInfo*/, null /*MouseEventArgs*/);\r\n        }\r\n\r\n        OnRowHeadersGlobalAutoSize(false /*expandingRows*/);\r\n    }\r\n\r\n    if (Events[EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED] is EventHandler eh && !dataGridViewOper[DATAGRIDVIEWOPER_inDispose] && !IsDisposed)\r\n    {\r\n        eh(this, e);\r\n    }\r\n}\r\n```\r\n\r\nNotice that `OnRowHeadersWidthChanged` doesn't force the handle creation, as it guards `UpdateMouseEnteredCell` with `IsHandleCreated`.\r\n\r\nHowever, `OnColumnHeadersHeightChanged` doesn't.\r\n\r\nNot only does this force handle creation when `ColumnHeadersHeight` is set to something custom, but also causes `NREs` and `ObjectDisposedException`, for example\r\n```\r\n  X System.Windows.Forms.Tests.DataGridViewTests.DataGridView_ColumnHeadersHeight_SetWithHandlerInColumnDisposing_DoesNotCallColumnHeadersHeightChanged(columnHeadersWidthSizeMode: DisableResizing) [1ms]\r\n  Error Message:\r\n   System.ObjectDisposedException : Cannot access a disposed object.\r\nObject name: 'DataGridView'.\r\n  Stack Trace:\r\n     at System.Windows.Forms.Control.CreateHandle()\r\n   at System.Windows.Forms.Control.get_Handle()\r\n   at System.Windows.Forms.Control.PointToClientInternal(Point p)\r\n   at System.Windows.Forms.DataGridView.UpdateMouseEnteredCell(HitTestInfo hti, MouseEventArgs e)\r\n   at System.Windows.Forms.DataGridView.OnColumnHeadersHeightChanged(EventArgs e)\r\n   at System.Windows.Forms.DataGridView.SetColumnHeadersHeightInternal(Int32 columnHeadersHeight, Boolean invalidInAdjustFillingColumns)\r\n   at System.Windows.Forms.DataGridView.set_ColumnHeadersHeight(Int32 value)\r\n   at System.Windows.Forms.Tests.DataGridViewTests.<>c__DisplayClass12_0.<DataGridView_ColumnHeadersHeight_SetWithHandlerInColumnDisposing_DoesNotCallColumnHeadersHeightChanged>b__0(Object sender, EventArgs e) in C:\\Users\\hughbe\\source\\repos\\ConsoleApp\\DataGridViewTests.cs:line 447\r\n   at System.Windows.Forms.DataGridViewColumn.Dispose(Boolean disposing)\r\n   at System.Windows.Forms.DataGridViewBand.Dispose()\r\n   at System.Windows.Forms.Tests.DataGridViewTests.DataGridView_ColumnHeadersHeight_SetWithHandlerInColumnDisposing_DoesNotCallColumnHeadersHeightChanged(DataGridViewColumnHeadersHeightSizeMode columnHeadersWidthSizeMode) in C:\\Users\\hughbe\\source\\repos\\ConsoleApp\\DataGridViewTests.cs:line 461\r\n   \r\n     at System.Windows.Forms.Tests.DataGridViewTests.DataGridView_ColumnHeadersHeight_SetWithHandlerDisposed_DoesNotCallColumnHeadersHeightChanged(DataGridViewColumnHeadersHeightSizeMode columnHeadersWidthSizeMode) in C:\\Users\\hughbe\\source\\repos\\ConsoleApp\\DataGridViewTests.cs:line 342\r\nThe active test run was aborted. Reason: Test host process crashed : Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Windows.Forms.DataGridView.LayoutScrollBars()\r\n   at System.Windows.Forms.DataGridView.ComputeLayout()\r\n   at System.Windows.Forms.DataGridView.PerformLayoutPrivate(Boolean useRowShortcut, Boolean computeVisibleRows, Boolean invalidInAdjustFillingColumns, Boolean repositionEditingControl)\r\n   at System.Windows.Forms.DataGridView.OnHandleCreated(EventArgs e)\r\n   at System.Windows.Forms.Control.WmCreate(Message& m)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.ThreadExceptionFixture.OnThreadException(Object sender, ThreadExceptionEventArgs e) in C:\\Users\\hughbe\\source\\repos\\ConsoleApp\\Support\\ThreadExceptionFixture.cs:line 25\r\n```\r\n\r\n**Expected behavior:**\r\nWe should guard this with call `IsHandleCreated`\r\n\r\n**Minimal repro:**\r\nNotice we need `expectedIsHandleCreated` in the following test to make it pass\r\n```cs\r\npublic static IEnumerable<object[]> ColumnHeadersHeight_Set_TestData()\r\n{\r\n    foreach (bool columnHeadersVisible in new bool[] { true, false })\r\n    {\r\n        foreach (bool autoSize in new bool[] { true, false })\r\n        {\r\n            yield return new object[] { DataGridViewColumnHeadersHeightSizeMode.AutoSize, columnHeadersVisible, autoSize, 4, DefaultColumnHeadersHeight, false };\r\n            yield return new object[] { DataGridViewColumnHeadersHeightSizeMode.AutoSize, columnHeadersVisible, autoSize, DefaultColumnHeadersHeight, DefaultColumnHeadersHeight, false };\r\n            yield return new object[] { DataGridViewColumnHeadersHeightSizeMode.AutoSize, columnHeadersVisible, autoSize, 32768, DefaultColumnHeadersHeight, false };\r\n\r\n            foreach (DataGridViewColumnHeadersHeightSizeMode columnHeadersWidthSizeMode in new DataGridViewColumnHeadersHeightSizeMode[] { DataGridViewColumnHeadersHeightSizeMode.EnableResizing, DataGridViewColumnHeadersHeightSizeMode.DisableResizing })\r\n            {\r\n                yield return new object[] { columnHeadersWidthSizeMode, columnHeadersVisible, autoSize, 4, 4, true };\r\n                yield return new object[] { columnHeadersWidthSizeMode, columnHeadersVisible, autoSize, DefaultColumnHeadersHeight, DefaultColumnHeadersHeight, false };\r\n                yield return new object[] { columnHeadersWidthSizeMode, columnHeadersVisible, autoSize, 32768, 32768, true };\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n[WinFormsTheory]\r\n[MemberData(nameof(ColumnHeadersHeight_Set_TestData))]\r\npublic void DataGridView_ColumnHeadersHeight_Set_GetReturnsExpected(DataGridViewColumnHeadersHeightSizeMode columnHeadersWidthSizeMode, bool columnHeadersVisible, bool autoSize, int value, int expectedValue, bool expectedIsHandleCreated)\r\n{\r\n    using var control = new DataGridView\r\n    {\r\n        ColumnHeadersHeightSizeMode = columnHeadersWidthSizeMode,\r\n        ColumnHeadersVisible = columnHeadersVisible,\r\n        AutoSize = autoSize\r\n    };\r\n    int layoutCallCount = 0;\r\n    control.Layout += (sender, e) => layoutCallCount++;\r\n\r\n    control.ColumnHeadersHeight = value;\r\n    Assert.Equal(expectedValue, control.ColumnHeadersHeight);\r\n    Assert.Equal(0, layoutCallCount);\r\n    Assert.Equal(expectedIsHandleCreated, control.IsHandleCreated);\r\n\r\n    // Set same.\r\n    control.ColumnHeadersHeight = value;\r\n    Assert.Equal(expectedValue, control.ColumnHeadersHeight);\r\n    Assert.Equal(0, layoutCallCount);\r\n    Assert.Equal(expectedIsHandleCreated, control.IsHandleCreated);\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/3372","RelatedDescription":"Open issue \"DataGridView.OnColumnHeadersHeightChanged forces creation of the handle\" (#3372)"},{"Id":"627730674","IsPullRequest":false,"CreatedAt":"2020-05-30T13:20:08","Actor":"hughbe","Number":"3371","RawContent":null,"Title":"DataGridView.OnRowHeadersWidthSizeModeChanged has bad check for RowHeadersWidthSizeModeChanged event","State":"open","Body":"* .NET Core Version: \r\nmaster\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n\r\nIn `OnRowHeadersWidthSizeModeChanged` we have the following check\r\n\r\n```cs\r\nprotected virtual void OnRowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventArgs e)\r\n{\r\n    ...\r\n\r\n    if (Events[EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED] is EventHandler eh && !dataGridViewOper[DATAGRIDVIEWOPER_inDispose] && !IsDisposed)\r\n    {\r\n        eh(this, e);\r\n    }\r\n}\r\n```\r\n\r\nNote that we write `Events[EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED] is EventHandler eh`\r\n\r\nhowever, `RowHeadersWidthSizeModeChanged` is not an `EventHandler`, but `DataGridViewAutoSizeModeEventHandler`\r\n```cs\r\n[SRCategory(nameof(SR.CatPropertyChanged))]\r\n[SRDescription(nameof(SR.DataGridView_RowHeadersWidthSizeModeChangedDescr))]\r\npublic event DataGridViewAutoSizeModeEventHandler RowHeadersWidthSizeModeChanged\r\n{\r\n    add => Events.AddHandler(EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED, value);\r\n    remove => Events.RemoveHandler(EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED, value);\r\n}\r\n```\r\n\r\n**Expected behavior:**\r\nThe `RowHeadersWidthSizeModeChanged` is called. But it is not\r\n\r\n**Minimal repro:**\r\n```cs\r\n[WinFormsTheory]\r\n[InlineData(DataGridViewRowHeadersWidthSizeMode.DisableResizing, false)]\r\n[InlineData(DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders, true)]\r\n[InlineData(DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders, true)]\r\n[InlineData(DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader, true)]\r\npublic void DataGridView_RowHeadersWidthSizeMode_SetWithHandler_CallsRowHeadersWidthSizeModeChanged(DataGridViewRowHeadersWidthSizeMode value, object expectedPreviousModeAutoSized)\r\n{\r\n    using var control = new DataGridView();\r\n    int callCount = 0;\r\n    DataGridViewAutoSizeModeEventHandler handler = (sender, e) =>\r\n    {\r\n        Assert.Same(control, sender);\r\n        Assert.Equal(expectedPreviousModeAutoSized, e.PreviousModeAutoSized);\r\n        callCount++;\r\n    };\r\n    control.RowHeadersWidthSizeModeChanged += handler;\r\n\r\n    // Set different.\r\n    control.RowHeadersWidthSizeMode = value;\r\n    Assert.Equal(value, control.RowHeadersWidthSizeMode);\r\n    Assert.Equal(1, callCount);\r\n\r\n    // Set same.\r\n    control.RowHeadersWidthSizeMode = value;\r\n    Assert.Equal(value, control.RowHeadersWidthSizeMode);\r\n    Assert.Equal(1, callCount);\r\n\r\n    // Set different.\r\n    expectedPreviousModeAutoSized = false;\r\n    control.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.EnableResizing;\r\n    Assert.Equal(DataGridViewRowHeadersWidthSizeMode.EnableResizing, control.RowHeadersWidthSizeMode);\r\n    Assert.Equal(2, callCount);\r\n\r\n    // Remove handler.\r\n    control.RowHeadersWidthSizeModeChanged -= handler;\r\n    control.RowHeadersWidthSizeMode = value;\r\n    Assert.Equal(value, control.RowHeadersWidthSizeMode);\r\n    Assert.Equal(2, callCount);\r\n}\r\n```\r\n\r\nWe fail with `callCount` of `0`, instead of `1`","Url":"https://github.com/dotnet/winforms/issues/3371","RelatedDescription":"Open issue \"DataGridView.OnRowHeadersWidthSizeModeChanged has bad check for RowHeadersWidthSizeModeChanged event\" (#3371)"},{"Id":"627719198","IsPullRequest":true,"CreatedAt":"2020-05-30T12:39:33","Actor":"dotnet-maestro[bot]","Number":"3370","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200529.7\r\n- **Date Produced**: 5/30/2020 3:00 AM\r\n- **Commit**: 27dcce57c7fc4cfa6634f3f064edaa92f2f6eb83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20278.9 to 5.0.0-preview.6.20279.7\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3370)","Url":"https://github.com/dotnet/winforms/pull/3370","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3370)"},{"Id":"627418120","IsPullRequest":true,"CreatedAt":"2020-05-29T17:17:41","Actor":"hughbe","Number":"3366","RawContent":null,"Title":"Test AxHost ICustomTypeDescriptor implementation","State":"open","Body":"## Proposed Changes\r\n- Test AxHost ICustomTypeDescriptor implementation\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3366)","Url":"https://github.com/dotnet/winforms/pull/3366","RelatedDescription":"Open PR \"Test AxHost ICustomTypeDescriptor implementation\" (#3366)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-06-05T05:30:50.1852305Z","RunDurationInMilliseconds":653}