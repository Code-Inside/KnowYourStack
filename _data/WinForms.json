{"Data":{"GitHub":{"Issues":[{"Id":"2518355427","IsPullRequest":false,"CreatedAt":"2024-09-11T03:10:47","Actor":"willibrandon","Number":"12114","RawContent":null,"Title":"Debugging document is missing information","State":"open","Body":"### .NET version\n\n```\r\n.NET SDK:\r\n Version:           9.0.100-rc.1.24452.12\r\n Commit:            81a714c6d3\r\n Workload version:  9.0.100-manifests.67cd1eb6\r\n MSBuild version:   17.12.0-preview-24422-09+d17ec720d\r\n```\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nThe [Debugging](https://github.com/dotnet/winforms/blob/main/docs/debugging.md) document is missing some information necessary to debug Windows Forms binaries. Specifically, for technique <span>#</span>2 to work, the following references must also be added.\r\n\r\n```\r\n<Reference Include=\"[Drive]:[Path-to-repo]\\winforms\\artifacts\\bin\\System.Windows.Forms\\Debug\\net9.0\\System.Drawing.Common.dll\" />\r\n<Reference Include=\"[Drive]:[Path-to-repo]\\winforms\\artifacts\\bin\\System.Windows.Forms\\Debug\\net9.0\\System.Private.Windows.Core.dll\" />\r\n```\n\n### Steps to reproduce\n\nFollow the steps for debugging Windows Forms binaries using technique <span>#</span>2 in the [Debugging](https://github.com/dotnet/winforms/blob/main/docs/debugging.md) document, build the solution, which results in error CS1705.\r\n`Assembly 'System.Windows.Forms' with identity 'System.Windows.Forms, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' uses 'System.Private.Windows.Core, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' which has a higher version than referenced assembly 'System.Private.Windows.Core' with identity 'System.Private.Windows.Core, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'`","Url":"https://github.com/dotnet/winforms/issues/12114","RelatedDescription":"Open issue \"Debugging document is missing information\" (#12114)"},{"Id":"2518295619","IsPullRequest":true,"CreatedAt":"2024-09-11T02:08:54","Actor":"Nora-Zhou01","Number":"12113","RawContent":null,"Title":"Add unit tests for PanelDesigner","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/10773\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add unit test PanelDesignerTests.cs for public properties and method of the PanelDesigner.cs\r\n- Enable nullability in PanelDesignerTests.cs\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12113)","Url":"https://github.com/dotnet/winforms/pull/12113","RelatedDescription":"Open PR \"Add unit tests for PanelDesigner\" (#12113)"},{"Id":"2518282148","IsPullRequest":false,"CreatedAt":"2024-09-11T01:53:52","Actor":"EVA-SS","Number":"12112","RawContent":null,"Title":"ControlDesigner GetHitTest is not supported under net6.0","State":"open","Body":"### Environment\n\n17.11.3\n\n### .NET version\n\nnet6.0 - net8.0\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nframework **all** is normal\n\n### Issue description\n\nmy custom controls cannot capture mouse clicks, but `System.Windows.Forms.TabControl` can\n\n### Steps to reproduce\n\nHere is a demo, the **framework 4.8** can capture the mouse in the designer, but I hope the designer can also capture the mouse normally under **net6.0**\r\n\r\n[TestDesignGetHitTest.zip](https://github.com/user-attachments/files/16956778/TestDesignGetHitTest.zip)\n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/12112","RelatedDescription":"Open issue \"ControlDesigner GetHitTest is not supported under net6.0\" (#12112)"},{"Id":"2518281627","IsPullRequest":true,"CreatedAt":"2024-09-11T01:53:18","Actor":"Zheng-Li01","Number":"12111","RawContent":null,"Title":"Add code coverage for ToolStripPanel_ToolStripPanelRowCollection","State":"open","Body":"related https://github.com/dotnet/winforms/issues/10453\r\n\r\nProposed changes\r\nAdd unit tests for ToolStripPanel_ToolStripPanelRowCollection to test its properties & methods & events\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12111)","Url":"https://github.com/dotnet/winforms/pull/12111","RelatedDescription":"Open PR \"Add code coverage for ToolStripPanel_ToolStripPanelRowCollection\" (#12111)"},{"Id":"2518105662","IsPullRequest":true,"CreatedAt":"2024-09-10T23:20:09","Actor":"lonitra","Number":"12110","RawContent":null,"Title":"[release/9.0] Change IPointer interface method to return nint (#12103)","State":"closed","Body":"backport of #12103\r\n\r\n**Customer Impact:**\r\nCurrently, users are unable to compile some of our controls in CLI/CLR C++ mixed code project because C++/CLI cannot compile when it encounters generic pointers even if it is internal code. The PR is a workaround that makes changes to avoid returning generic pointers in our internal interface. \r\n\r\n**Risk:**\r\nMinimal. This is a change in our internal code to ensure C++/CLI is able to compile successfully by changing the return type of affected interface method. Anywhere we were using the interface method we have updated to use an extension method to achieve the same behavior as before. This has been tested and confirmed C++/CLI is able to compile successfully with change.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12110)","Url":"https://github.com/dotnet/winforms/pull/12110","RelatedDescription":"Closed or merged PR \"[release/9.0] Change IPointer interface method to return nint (#12103)\" (#12110)"},{"Id":"2518050717","IsPullRequest":true,"CreatedAt":"2024-09-10T23:00:21","Actor":"github-actions[bot]","Number":"12108","RawContent":null,"Title":"[release/9.0] Don't set DWMWA_USE_IMMERSIVE_DARK_MODE unnecessarily","State":"closed","Body":"Backport of #12104 to release/9.0\r\n\r\n/cc @lonitra @JeremyKuhne\r\n\r\n## Customer Impact\r\nCurrently code unconditionally sets DWMA_USE_IMMERSIVE_DARK_MODE , which affects users implementing their own dark mode. The PR adds a condition to avoid setting DWMA_USE_IMMERSIVE_DARK_MODE if users haven't explicitly set a color mode.\r\n\r\n## Risk\r\nMinimal, change only adds a conditional check.\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12108)","Url":"https://github.com/dotnet/winforms/pull/12108","RelatedDescription":"Closed or merged PR \"[release/9.0] Don't set DWMWA_USE_IMMERSIVE_DARK_MODE unnecessarily\" (#12108)"},{"Id":"2516983097","IsPullRequest":true,"CreatedAt":"2024-09-10T22:30:47","Actor":"lonitra","Number":"12103","RawContent":null,"Title":"Change IPointer interface method to return nint","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes https://github.com/dotnet/winforms/issues/11983\r\n\r\nThis issue occurs because System.Private.Windows.Core is included in the ref as C# needs the types to be there when it compiles interface casts (https://github.com/dotnet/winforms/pull/10673), but this also causes issues for us in CLI/CLR C++ mixed mode as shown in issue. \r\n\r\nThis is a workaround that updates our `IPointer<T>` interface to avoid returning a generic as it present compile issues in CLI/CLR C++ mixed mode. This looks to be a limitation that is in mix mode as this error occurs with non WindowsForms related classes that have similar implementation. This workaround mitigates this issue while coordination is happening to determine a fix.\r\n\r\nTested by building dlls from change and replacing System.Drawing.Common.dll and System.Private.Windows.Core.dll in C:\\Program Files\\dotnet\\packs\\Microsoft.WindowsDesktop.App.Ref\\9.0.0-rc.2.24428.1\\ref\\net9.0\r\n### Before\r\n\r\n![image](https://github.com/user-attachments/assets/6f84e825-f16b-4fcb-8e60-6a9b1910b8e6)\r\n\r\n\r\n### After\r\n\r\n![image](https://github.com/user-attachments/assets/27eba8f0-7b53-4311-8bbd-995dfe19c9ad)\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12103)","Url":"https://github.com/dotnet/winforms/pull/12103","RelatedDescription":"Closed or merged PR \"Change IPointer interface method to return nint\" (#12103)"},{"Id":"2518069726","IsPullRequest":false,"CreatedAt":"2024-09-10T22:29:35","Actor":"spiriapbergeron","Number":"12109","RawContent":null,"Title":"Fix & Improve ListView's broken ItemClick, ItemClicked behavior, without causing breaking change.","State":"open","Body":"### Background and motivation\r\n\r\nNote: This issue is an \"API Change Request\" version of issue: [12013](https://github.com/dotnet/winforms/issues/12013). \r\n\r\nMuch of the contents of this description mirrors the contents of that issue, please the for more/other details. Reading the other ticket will expose you to even more of my incessant verbiage.\r\n\r\n**THE PROBLEM NEEDING TO BE FIXED**\r\n\r\nThe problem is that the ItemCheck and ItemChecked event handlers are broken when you click on the checkbox of a ListViewItem if you have more than 2 images in your StateImageList.  \r\n\r\nIn fact, ListView behaves very oddly when clicking on the checkbox if you have more than 2 images in the StateImageList: \r\n\r\nObviously, things work fine for the typical case of 2 states (checked, unchecked) with 2 images in StateImageList.\r\n\r\nUnchecked (Image0) -> Checked (Image1) :   Image changes, ItemCheck & ItemChecked fired.\r\nUnchecked (Image1) -> Checked (Image0) :   Image changes, ItemCheck & ItemChecked fired.\r\n\r\nBut things break if there are more than 2 images in StateImageList. The image changes as expected, but events are not fired.\r\n\r\nUnchecked (Image0) -> Checked (Image1) :   Image changes, ItemCheck & ItemChecked fired.\r\nChecked (image1) -> Checked (Image2) : Image changes,  but **events not fired because both states are Checked**\r\nChecked (image2) -> Checked (Image3) : Image changes, but **events not fired because both states are Checked**\r\nChecked (image3) -> Checked (Image4) : Image changes, but **events not fired because both states are Checked**\r\nChecked (Image4) -> Unchecked(Image0) :   Image changes, ItemCheck & ItemChecked fired.\r\n\r\n**Why would a developer have more than 2 State images anyway?**\r\n\r\nWell, we certainly all know about TriState checkboxes. Also, TreeViews often have a TriState state: \r\n- \"Checked\" usually means all children are also checked\r\n- \"Unchecked\" usually means all children are also unchecked.\r\n- \"Square\" (as in, Indeterminate), usually means some children checked, some unchecked.\r\n\r\nListView would support this just fine, too, but right now it would be missing an event. To fix this, a developer would need to subclass ListView, and repair the broken WmReflectNotify, not an easy task since that method calls private stuff.\r\n\r\nAnyway, the fact that that there is an \"Indeterminate\" state in the CheckedState implies there should at least be some level of support for it. Also, the  actual Win32 control has no such problem of supporting multi states, and happily handles many states. In fact, the state ID is simply the ImageIndex in the StateImageList.\r\n\r\nThis is a super useful feature. For example, it would certainly be used by a Potato app, to represent and cycle through the [200 different kinds of potatoes](https://www.liveeatlearn.com/types-of-potatoes/).  \r\n\r\nObviously, when we have such a 200-option multi-state, it's more appropriate to talk about a \"User-Defined\" state, not a \"True-False\" state.  Multi states are much better represented by an **int** rather than an **enum** with just 3 possible values (Unchecked, Checked, Indeterminate).\r\n\r\nTherefore, I believe it's required to fix this problem in the general form (support the multi-state case) rather than the sad \"lets-not-support-anything-other-than-true-or-false\",  or even the \"let's-support-true-false-and-one-indererminate\"\r\n\r\nIt would have been easy to initially support the general case and fire an even every time the image changes/cycles, and to have the current/new values be defined as \"int\" rather than the CheckedState enum in the **ItemCheckEventArgs**, and **ItemCheckedEventArgs**.  Sadly, the enum is what these handlers receive, and we must avoid breaking changes, so we must keep them.... sort-of.\r\n\r\n\r\n**OPTIONS TO \"FIX\" THE BUGGY BEHAVIOR OF EVENTS NOT FIRING BUT IMAGE STILL CHANGING.**\r\n\r\n**LET'S START WITH BAD OPTIONS FIRST:**\r\n\r\n**Option 1:** Force checkbox values to go from checked<-->unchecked, and force image to only cycle through checked/unchecked.\r\n\r\nAfter all, it might have been the original developer's intent to forcefully limit the checked states to checked/unchecked. This idea is reinforced by the comment in the code (WmReflectNotify) \r\n\r\n_// Because the state image mask is 1-based, a value of 1 means unchecked, anything else means checked. We convert this to the more standard 0 or 1_\r\n\r\nUnfortunately, this developer didn't test his code. If he did, he would have seen that he could cycle through many images but that his events didn't get fired when getting to the Indeterminate state. \r\n\r\nThe rationale for fixing it like this is simply that the handlers only receive a Unchecked or Checked value anway, never even an  Indeterminate state. All you'd have to do to fix this is to also force the **ImageIndex** to cycle through 0-1 only, and to not change to anything beyond that, even if there are multiple images in the StateImageList.\r\n\r\nI do not recommend this solution, because while \"forcing the handlers into a 0/1 world\" might have been the developer's initial intent, the fact is that what's in the wild since at last 2007 is that the images will cycle when clicking on the checkbox area. Thus, it would certainly be seen as a breaking change, including the Potato app: its users could no longer cycle through each of the possible 200 kinds of potatoes, and instead be limited to Russets and Yams, a situation that is unlikely to please Ratte and RedGold potato farmers (probably all 198 others, in fact).\r\n\r\n**Option 2:** Same as Option1, but at least add correct behavior for the \"Indeterminate\" CheckedState enum.\r\n\r\nWhat I mean by this option 2 is to add support for Image number 2, aka the indeterminate state. \r\n\r\nThat is also not recommended, because while this time you would also get the Yellow Potato farmers on your side, it still does nothing for the 197 other potato farmers who are still getting the shaft. Doing this is likely to cause anger, because come-on. \r\n\r\nThe most dangerous situation here is that Microsoft could easily be accused of playing favorites among potato farmers, because although Bill Gates is clearly a Yellow Potato kinda guy and nobody could be blamed for at least adding support for Yellow potatoes, the fact is that it's still a slam dunk of a case for artificially limiting potato consumer choice.  We all realize Microsoft is like the Monsanto of operating system makers, but please please Microsoft, please don't also be the Monsanto of potatoes. You're not even in that space... Yet... And I don't want a Microsoft logo on my potatoes. (god I hope I didn't give them any ideas)\r\n\r\n\r\n**NOW LET'S LOOK AT BETTER OPTIONS:** \r\n\r\n**SOMEWHAT BETTER**\r\n\r\n**Option 3:** Always fire events, even when the state goes from one Indeterminate state to another Indeterminate state.\r\n\r\nThis would not require an API change, but rather, simply requires the removal of the \"if\" statement that verifies if the before-and-after states are equal, and if so, don't fire the event. \r\n\r\nThe \"solution\" would be to just fire the event, always, and if they are greater than \"Checked\", at least make the value \"Indeterminate\".   Currently, events aren't fired because they go from \"Checked(1)\" to \"Checked(2)\", and they remain \"Checked\" for anything >= Checked.\r\n\r\n\r\nRemoving the \"if statement\" and support sending \"Indeterminate\" values would be a good solution (the developer just needs to look at the ImageIndex to know which state he's actually at), if it wasn't for the fact that in the ItemCheck handler, the developer can override the NewValue to prevent a change.\r\n\r\nFor example: \r\n\r\nvoid listView_ItemCheck(object? sender, ItemCheckEventArgs e)\r\n{\r\n    e.NewValue = CheckedState.Unchecked;\r\n}\r\n\r\nNow, what happens if the developer wants to override the state?  He can't simply write to e.Item.ImageIndex = 30; because that would trigger another ItemCheck event.\r\n\r\nSo if we want to support overriding the new value to some custom state specified by an index, we need to improve on this solution. \r\n\r\n\r\n**AH, BETTER**\r\n\r\n**Option 4** Augment **ItemCheckEventArgs**, and **ItemCheckedEventArgs** with int properties.\r\n\r\nclass ItemCheckEventArgs\r\n{\r\n     CheckedState CurrentValue, NewValue; // existing\r\n     int CurrentIntValue, NewIntValue; // added, correspond to the ImageIndex in StateImageList.\r\n}\r\n\r\nclass ItemCheckedEventArgs\r\n{\r\n     CheckedState Value; // existing\r\n     int IntValue; // added, corresponds to the ImageIndex in StateImageList.\r\n}\r\n\r\nWith the above in place, the ListView would now property call the ItemCheck handlers like so: \r\n\r\nUnchecked(0) -> Checked(1):   Image changes like before, event fired like before.\r\nChecked(1) -> **Indeterminate**(2): Image changes, event fired **(unlike before)**\r\n**Indeterminate**(2) -> **Indeterminate**(3): Image changes, event fired **(unlike before)**\r\n**Indeterminate**(3) -> **Indeterminate**(4): Image changes, event fired **(unlike before)**\r\n**Indeterminate**(4) -> **Indeterminate**(5): Image changes, event fired **(unlike before)**\r\n**Indeterminate**(5) -> Unchecked(0): Image changes, event fired like before\r\n\r\nIn the previous option, I alluded to the developer wanting to override the new value in the ItemCheck handler.\r\n\r\n.void listView_ItemCheck(object? sender, ItemCheckEventArgs e)\r\n{\r\n    e.NewValue = CheckedState.Unchecked;\r\n}\r\n\r\nnow he could do: \r\n\r\nvoid listView_ItemCheck(object? sender, ItemCheckEventArgs e)\r\n{\r\n      if (e.NewValue == CheckedState.Checked)\r\n           e.NewIntValue = 5; // force image state to be 5, always.\r\n}\r\n\r\nBut with your keen eyes, you've noticed the inconsistency in the above code.\r\n\r\nFor starters, you have a e.NewIntValue which is 5, and e.NewValue which is Checked.\r\n\r\nUpon return from the handler, what shall the caller do? Use e.NewValue?  or e.NewIntValue?\r\n\r\nWell, we could remove the ambiguity by instructing the caller to use either e.NewValue, or e.NewIntValue, by setting e.NewValue to CheckedState.Indeterminate if we want to use e.NewIntValue.\r\n\r\nvoid listView_ItemCheck(object? sender, ItemCheckEventArgs e)\r\n{\r\n      if (e.NewValue == CheckedState.Checked)\r\n      {\r\n           e.NewValue = CheckedState.Indeterminate; // enforce this to tell caller to use e.NewIntValue\r\n           e.NewIntValue = 5; // force image state to be 5, always.\r\n      }\r\n\r\n     // overriding this way would also work, because even though IntValue == 0 means \"unchecked\"\r\n     // the caller would use e.NewIntValue as the field to use upon returning from the event handler call.\r\n     e.NewValue = CheckedState.Indeterminate; // enforce this to tell caller to use e.NewIntValue\r\n     e.NewIntValue = 0; // force image state to be 5, always.\r\n}\r\n\r\nThis would not affect old code. After all, old code could simply override by setting to Checked or Unchecked.\r\n\r\nvoid listView_ItemCheck(object? sender, ItemCheckEventArgs e)\r\n{\r\n     e.NewValue = CheckedState.Unchecked; // this is fine. Caller uses imageIndex == 0\r\n     e.NewValue == CheckedState.Checked; // this is fine. Caller uses ImageIndex == 1\r\n}\r\n\r\nThere is a risk, albeit a small one, that the developer did this: \r\nvoid listView_ItemCheck(object? sender, ItemCheckEventArgs e)\r\n{\r\n     e.NewValue = CheckedState.Indeterminate; // Developer wrote this, yuk.\r\n}\r\n\r\nWith the old implementation, this simply means ImageIndex = 2\r\n\r\nWith the new implementation, this changes.  It means ImageIndex = whatever_is_in_NewIntValue\r\n\r\nNow that we'd fire all events, there is a potential bug IF there StateImageList contains more than 3 images:\r\n\r\nvoid listView_ItemCheck(object? sender, ItemCheckEventArgs e)\r\n{\r\n     // Potential bug. Upon return, caller no longer uses e.NewValue \r\n     // to set the image index. Rather, the caller now uses e.NewIntValue, \r\n     // which is not changed in this function.\r\n     e.NewValue = CheckedState.Indeterminate; // Developer wrote this, yuk.\r\n\r\n      // with the new implementation, to keep backwards compatibility, the developer needs to add this line:\r\n      e.NewIntValue = 2;\r\n}\r\n\r\nBut, still, this is an edge case. \r\n\r\nThe next solution addresses this issue, but at the cost of fixing the actual bug propertly and providing a needless workaround.\r\n\r\n\r\n**Option 5**: Keep the old behavior intact (boooooh) but add a new proprety that explicitely supports the new behavior.\r\n\r\nIf the risk in solution 4 is too risky despite the  edge case I discuss, this solution 5 should put your mind to rest, at the cost of it being a bit of a sad workaround.\r\n\r\nAdd a property ListView.MultiStateCheckboxes (false by default)\r\n\r\nIf ListView.Checkboxes is true, OR\r\nIf ListView.MultiStateCheckboxes is true, THEN\r\n     --- the ListView will show the checkboxes.\r\n\r\nMultiStateCheckboxes is a new property, off by default, thereby keeping the old behavior intact unless turned on.\r\n\r\nThis property cannot be used in conjunction with ListView.Checkboxes = true.  It's one, or the other, not both.\r\n\r\nIf both MultiStateCheckboxes == true and Checkboxes == true, an exception is thrown wherever is appropriate to throw it.\r\n\r\nif MultiStateCheckboxes == true, and there is no StateImageList specified, an exception is thrown.  If you want checkboxes and no image list, use Checkboxes = true as before. \r\n\r\nif MultiStateCheckboxes == true, then ItemMultiStateCheck ItemMultiStateChecked events are sent, with appropriate EventArgs as per below:\r\n\r\nclass ItemMultiStateCheckEventArgs \r\n{\r\n    int CurrentValue;\r\n    int NewValue;\r\n}\r\n\r\nand\r\n\r\nclass ItemMultiStateCheckedEventArgs \r\n{\r\n    int Value;\r\n}\r\n\r\n\r\nI believe using Option 5 is the safest, but also a bit sad, option. It has the benefit of at least offering a clear implementation path for developers, without ambiguity for what needs to be done in the event handlers.\r\n\r\nWith option 5, it remains unclear what should be done to address the bug with the ItemCheck an ItemChecked event handlers not being fired.\r\n\r\nDo you want to keep the old behavior?  Do you want to clean it up by at least supporting the Indeterminate state?\r\nDo you want to \"fix\" the bug by restricting which image gets shown to the first 2 images in the image list? \r\n\r\nDo you want to keep it as-is, in order to have whatever workaround code written by developers continue to work?\r\n\r\nDo you want to document this bug in the listview documentation, and recommend the new handlers instead for anything other than a true/false case? Maybe this would be best.\r\n\r\n\r\nCONCLUSION\r\n\r\nI believe that it's of some importance to correctly support StateImageLists, even those that contain more than 2 images.  It would also certainly be of some relief to those who constantly complain that ListView is a necessary evil but sooooo limited in what you can do with them.\r\n\r\nIn the end, I think I would prefer Option 5, because it's the safest and  has the least chance to have any kind of side effect.\r\n\r\nAs it is, the bug will feel \"unpredictable\" and who knows what convoluted code the Potato App developer has written to work around it. Maybe there's even a timer in there somewhere. Or a private variable. Or a Mouse click event that is intercepted before the click ever makes it to the checkbox. Who knows, who knows. \r\n\r\n\r\n### API Proposal\r\n\r\nIn the above I keep talking about Option 4 and Option 5.  \r\n\r\nthis here describes Option5 as IMO the best option, but will describe Option4 in the Alternative section.\r\n\r\n```csharp\r\n\r\n// in a Form declaration:\r\n\r\n**Option 5:**\r\n\r\n// new eventargs class\r\nclass ItemMultiStateCheckEventArgs\r\n{\r\n     int CurrentValue;\r\n     int NewValue;\r\n}\r\n\r\n// new eventargs class\r\nclass ItemMultiStateCheckedEventArgs\r\n{\r\n     int Value;\r\n}\r\n\r\n// new property\r\nbool ListView.MultiStateCheckboxes { get; set;}\r\n\r\n// new event .\r\nEvent ItemMultiStateCheck += listView_ItemMultiStateCheck(object? sender, ItemMultiCheckEventArgs e)\r\n\r\n\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n**Option 4:**\r\n\r\n```csharp\r\n\r\n\r\n```\r\n\r\n**Option 5:** \r\n\r\n```csharp\r\n\r\n\r\nListview listView = new ListView();\r\n\r\nlistView.Checkboxes = true;\r\nlistView.MultiStateCheckboxes = true; // exception because of previous line\r\n\r\nlistView.MultiStateCheckboxes = true; \r\nlistView.Checkboxes = true; // exception because of previous line\r\n\r\nlistView.ItemMultiStateCheck += listView_ItemMultiStateCheck;\r\nlistView.ItemMultiStateChecked += listView_ItemMultiStateChecked;\r\n\r\n... and then later:\r\n\r\nvoid listView_ItemMultiStateCheck(object? sender, ItemMultiStateCheckEventArgs e)\r\n{\r\n     if (e.CurrentValue == 9)\r\n        e.NewValue = 15;  // override the value.\r\n}\r\n\r\nvoid listView_ItemMultiStateChecked(object? sender, ItemMultiStateCheckedEventArgs e)\r\n{\r\n     PerformSomeActionBasedOnUserState(e.CurrentValue);\r\n}\r\n\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n**Option 4:**\r\n\r\nclass **ItemCheckEventArgs** is changed to add 2 new properties\r\n{\r\n      CheckedState CurrentValue;\r\n      CheckedState NewValue;\r\n      int CurrentIntValue; // added\r\n      int NewIntValue; // added\r\n}\r\n\r\nclass **ItemCheckedArgs** is changed to add 1 new property\r\n{\r\n      CheckedState Value;\r\n      int IntValue; // added\r\n}\r\n\r\nThe rest of the change is in the internal code of ListView.cs, to always fire events, and to correctly process NewIntValue if it's changed by the ItemCheck event handler upon return.\r\n\r\nListView.ItemCheck += listView_ItemCheck(object? sender, ItemCheckEventArgs e)\r\n\r\nvoid listView_ItemCheck(object? sender, ItemCheckEventArgs e)\r\n{\r\n    e.NewValue = CheckedState.Indeterminate; //  cause the caller to use NewIntValue property.\r\n    e.NewIntValue = 0; // Valid values are from 0 to StateImageList.Count-1\r\n}\r\n\r\n\r\n\r\n\r\n### Risks\r\n\r\nLow, especially with option 5, which is a new code path entirely, but requires the proper syupport in the WmNotifyReflect in ListBox.cs\r\n\r\n### Will this feature affect UI controls?\r\n\r\nWith option 4, nothing to do.\r\n\r\nWith option 5, add a Bool property which needs to be supported by the visual studio property inspector.","Url":"https://github.com/dotnet/winforms/issues/12109","RelatedDescription":"Open issue \"Fix & Improve ListView's broken ItemClick, ItemClicked behavior, without causing breaking change.\" (#12109)"},{"Id":"2517821635","IsPullRequest":true,"CreatedAt":"2024-09-10T22:23:07","Actor":"JeremyKuhne","Number":"12104","RawContent":null,"Title":"Don't set DWMWA_USE_IMMERSIVE_DARK_MODE unnecessarily","State":"closed","Body":"Don't set DWMWA_USE_IMMERSIVE_DARK_MODE if users haven't explicitly made a choice.\r\n\r\nThis creates havoc for existing dark mode implementors.\r\n\r\nFixes #12014\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12104)","Url":"https://github.com/dotnet/winforms/pull/12104","RelatedDescription":"Closed or merged PR \"Don't set DWMWA_USE_IMMERSIVE_DARK_MODE unnecessarily\" (#12104)"},{"Id":"2517922286","IsPullRequest":true,"CreatedAt":"2024-09-10T21:41:04","Actor":"JeremyKuhne","Number":"12107","RawContent":null,"Title":"Add some error state checking to GetWindowText","State":"open","Body":"Fixes #11917\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12107)","Url":"https://github.com/dotnet/winforms/pull/12107","RelatedDescription":"Open PR \"Add some error state checking to GetWindowText\" (#12107)"},{"Id":"2517904527","IsPullRequest":true,"CreatedAt":"2024-09-10T21:34:18","Actor":"paul1956","Number":"12106","RawContent":null,"Title":"Shorten long lines last","State":"open","Body":"Fixes last batches of long lines\r\n\r\n\r\n## Proposed changes\r\n- shorten long lines\r\n\r\n## Customer Impact\r\n- none\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n- none no code changes\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12106)","Url":"https://github.com/dotnet/winforms/pull/12106","RelatedDescription":"Open PR \"Shorten long lines last\" (#12106)"},{"Id":"2517901579","IsPullRequest":true,"CreatedAt":"2024-09-10T21:33:09","Actor":"paul1956","Number":"12105","RawContent":null,"Title":"Fix http spelling issues","State":"open","Body":"Fixes spelling issues in see href \r\n\r\n## Proposed changes\r\n\r\n- Change see href to avoid spelling errors\r\n\r\n## Customer Impact\r\n- None\r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- None no code changes\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12105)","Url":"https://github.com/dotnet/winforms/pull/12105","RelatedDescription":"Open PR \"Fix http spelling issues\" (#12105)"},{"Id":"2513567396","IsPullRequest":true,"CreatedAt":"2024-09-10T20:09:27","Actor":"LeafShi1","Number":"12088","RawContent":null,"Title":"Add test for CollectionEditVerbManager","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nRelated #10773\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add test for CollectionEditVerbManager.cs\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- No\r\n\r\n## Regression? \r\n\r\n-  No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit tests\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12088)","Url":"https://github.com/dotnet/winforms/pull/12088","RelatedDescription":"Closed or merged PR \"Add test for CollectionEditVerbManager\" (#12088)"},{"Id":"2515586451","IsPullRequest":true,"CreatedAt":"2024-09-10T19:01:38","Actor":"CuteLeon","Number":"12094","RawContent":null,"Title":"More efficient access Control.Handle #12084","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12084\r\n\r\n\r\n## Proposed changes\r\n\r\n## Customer Impact\r\n\r\n## Regression? \r\n\r\n## Risk\r\n\r\n### Before\r\n\r\n### After\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->","Url":"https://github.com/dotnet/winforms/pull/12094","RelatedDescription":"Closed or merged PR \"More efficient access Control.Handle #12084\" (#12094)"},{"Id":"2516505132","IsPullRequest":true,"CreatedAt":"2024-09-10T16:54:39","Actor":"dotnet-maestro[bot]","Number":"12102","RawContent":null,"Title":"[release/9.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:92989bf7-cdf9-483d-64c5-08dcbc356d11)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 92989bf7-cdf9-483d-64c5-08dcbc356d11\r\n- **Build**: 20240909.6\r\n- **Date Produced**: September 9, 2024 6:29:27 PM UTC\r\n- **Commit**: 65260b148c869ada772a5843863c54737cd2361e\r\n- **Branch**: refs/heads/release/9.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 9.0.0-beta.24453.1 to 9.0.0-beta.24459.6][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 9.0.0-beta.24453.1 to 9.0.0-beta.24459.6][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 9.0.0-beta.24453.1 to 9.0.0-beta.24459.6][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 9.0.0-beta.24453.1 to 9.0.0-beta.24459.6][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 9.0.0-beta.24453.1 to 9.0.0-beta.24459.6][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 9.0.0-beta.24453.1 to 9.0.0-beta.24459.6][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/dd332f2d4e...65260b148c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:92989bf7-cdf9-483d-64c5-08dcbc356d11)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12102)","Url":"https://github.com/dotnet/winforms/pull/12102","RelatedDescription":"Closed or merged PR \"[release/9.0] Update dependencies from dotnet/arcade\" (#12102)"},{"Id":"2516474041","IsPullRequest":true,"CreatedAt":"2024-09-10T14:04:16","Actor":"dotnet-maestro[bot]","Number":"12101","RawContent":null,"Title":"[release/9.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:417b4c89-9f23-476a-5003-08dcbc3022d8)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 417b4c89-9f23-476a-5003-08dcbc3022d8\r\n- **Build**: 20240909.11\r\n- **Date Produced**: September 10, 2024 5:56:46 AM UTC\r\n- **Commit**: d32b46121993f762367238e1fad834205dc9123c\r\n- **Branch**: refs/heads/release/9.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.CodeDom**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.ComponentModel.Composition**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Data.Odbc**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Data.OleDb**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Diagnostics.EventLog**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.DirectoryServices**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.DirectoryServices.Protocols**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Formats.Nrbf**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.IO.Hashing**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.IO.Packaging**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.IO.Ports**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Management**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Reflection.Context**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Resources.Extensions**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Runtime.Caching**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Runtime.Serialization.Formatters**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Security.Cryptography.Xml**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Security.Permissions**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.ServiceModel.Syndication**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Speech**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Text.Encoding.CodePages**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Text.Encodings.Web**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Text.Json**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Threading.AccessControl**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **System.Windows.Extensions**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.9.0**: [from 9.0.0-rc.2.24456.9 to 9.0.0-rc.2.24459.11][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/dec716d1c4...d32b461219\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:417b4c89-9f23-476a-5003-08dcbc3022d8)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12101)","Url":"https://github.com/dotnet/winforms/pull/12101","RelatedDescription":"Closed or merged PR \"[release/9.0] Update dependencies from dotnet/runtime\" (#12101)"},{"Id":"2516246100","IsPullRequest":true,"CreatedAt":"2024-09-10T12:42:30","Actor":"dotnet-maestro[bot]","Number":"12100","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20240909.21\r\n- **Date Produced**: September 10, 2024 11:00:38 AM UTC\r\n- **Commit**: 4ee97899b23c4c7f64568563ab871c60bdba6f13\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.CodeDom**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.ComponentModel.Composition**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Data.Odbc**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Data.OleDb**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Diagnostics.EventLog**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.DirectoryServices**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Formats.Nrbf**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.IO.Hashing**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.IO.Packaging**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.IO.Ports**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Management**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Reflection.Context**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Resources.Extensions**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Runtime.Caching**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Security.Permissions**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.ServiceModel.Syndication**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Speech**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Text.Encodings.Web**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Text.Json**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Threading.AccessControl**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **System.Windows.Extensions**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-alpha.1.24458.4 to 10.0.0-alpha.1.24459.21][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/39c84a3a1b...4ee97899b2\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12100)","Url":"https://github.com/dotnet/winforms/pull/12100","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#12100)"},{"Id":"2516245472","IsPullRequest":true,"CreatedAt":"2024-09-10T12:37:00","Actor":"dotnet-maestro[bot]","Number":"12099","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20240909.12\r\n- **Date Produced**: September 10, 2024 7:31:48 AM UTC\r\n- **Commit**: 101a54b7026412e601141f9e551794833a4171b1\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24459.1 to 10.0.0-beta.24459.12][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.24459.1 to 10.0.0-beta.24459.12][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.24459.1 to 10.0.0-beta.24459.12][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24459.1 to 10.0.0-beta.24459.12][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.24459.1 to 10.0.0-beta.24459.12][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24459.1 to 10.0.0-beta.24459.12][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/8260f289b9...101a54b702\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12099)","Url":"https://github.com/dotnet/winforms/pull/12099","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#12099)"},{"Id":"2516078184","IsPullRequest":true,"CreatedAt":"2024-09-10T10:42:07","Actor":"John-Qiao","Number":"12098","RawContent":null,"Title":"Add Unit test coverage for the PropertyGrid class","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nRelated https://github.com/dotnet/winforms/issues/12055\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add unit test for PropertyGrid 49 properties and methods in PropertyGridTests.cs file.\r\n- Enable nullability in PropertyGridTests.\r\n\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12098)","Url":"https://github.com/dotnet/winforms/pull/12098","RelatedDescription":"Open PR \"Add Unit test coverage for the PropertyGrid class\" (#12098)"},{"Id":"2516011045","IsPullRequest":true,"CreatedAt":"2024-09-10T10:11:36","Actor":"Olina-Zhang","Number":"12097","RawContent":null,"Title":"Add unit test for TabPageDesigner.cs file","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/10773\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add unit test file: TabPageDesignerTests.cs for public properties of the TabPageDesigner.cs.\r\n- Enable nullability in TabPageDesignerTests.cs.\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12097)","Url":"https://github.com/dotnet/winforms/pull/12097","RelatedDescription":"Open PR \"Add unit test for TabPageDesigner.cs file\" (#12097)"},{"Id":"2515867260","IsPullRequest":false,"CreatedAt":"2024-09-10T09:10:43","Actor":"shashidhar-ks","Number":"12096","RawContent":null,"Title":"Memory leaks when using System.Windows.Forms","State":"open","Body":"### .NET version\n\n.NET 8 (8.0.8)\n\n### Did it work in .NET Framework?\n\nNot tested/verified\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nPrivate bytes of the .NET 8 Windows Form application keeps increasing, when we open and close a Form.\r\n\r\nThe steps to reproduce section has details on how to reproduce it faster in a simpler way.\r\n\r\nI used memprofiler to confirm that there are no leaks in the source code I have used. Memprofiler mentioned that there are increase in the types of object as mentioned in the below image.\r\n\r\n![image](https://github.com/user-attachments/assets/8e4bdfe2-1dd0-481e-bb5b-8b18f1ea72c7)\r\n\r\nNote: We are calling `GC.Collect()` and `GC.WaitForPendingFinalizer()` at regular interval and still the private bytes of the application keeps increasing.\n\n### Steps to reproduce\n\n[WinFormsApp1.zip](https://github.com/user-attachments/files/16942215/WinFormsApp1.zip)\r\n\r\n- Build the csproj in the above attachment.\r\n- Execute the output exe and click on the button.\r\n- Using Task Manager, monitor Private Bytes of the application every 3 mins for around 30 mins.\r\n- There will be a steady increase in the Private Bytes of the application\r\n\r\nThe application is doing the following:\r\n- We have `Form2` that has checkbox, combobox and textbox controls (all from System.Windows.Forms namespace).\r\n- `Form2` has hooked onto Load event in which it creates a Timer which is configured to call a function in one sec.\r\n- Function which Timer calls first stops the Time, Disposes it and closes the Form.\r\n- We have `Form1` that has a button.\r\n- Clicking on the button does the following in an infinite loop\r\n  - Creates instance of `Form2`, calls ShowDialog and disposes the instance when it is done.\r\n  - Calls GC.Collect and GC.WaitForPendingFinalizer\r\n\r\nSo, clicking on the button will continuously creates and closes new Window Form.\r\nBy monitoring Private Bytes of the application, we can see that memory of the application keeps increasing.","Url":"https://github.com/dotnet/winforms/issues/12096","RelatedDescription":"Open issue \"Memory leaks when using System.Windows.Forms\" (#12096)"},{"Id":"2515670207","IsPullRequest":true,"CreatedAt":"2024-09-10T07:46:32","Actor":"Philip-Wang01","Number":"12095","RawContent":null,"Title":"Add unit tests for TextBoxDesigner","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\nRelated https://github.com/dotnet/winforms/issues/10773\r\n## Proposed changes\r\n- Add unit test TextBoxDesignerTests.cs for public properties and method of the TextBoxDesigner.cs\r\n- Enable nullability in TextBoxDesignerTests.cs\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12095)","Url":"https://github.com/dotnet/winforms/pull/12095","RelatedDescription":"Open PR \"Add unit tests for TextBoxDesigner\" (#12095)"},{"Id":"2515582825","IsPullRequest":true,"CreatedAt":"2024-09-10T07:02:44","Actor":"Nora-Zhou01","Number":"12093","RawContent":null,"Title":"Add core coverage for ListAdapter","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/10773\r\n\r\n## Proposed changes\r\n\r\n- Add unit test ListAdapterTests.cs for public properties and method of the ListAdapter.\r\n- Enable nullability in ListAdapter.\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12093)","Url":"https://github.com/dotnet/winforms/pull/12093","RelatedDescription":"Open PR \"Add core coverage for ListAdapter\" (#12093)"},{"Id":"2515258341","IsPullRequest":true,"CreatedAt":"2024-09-10T02:23:03","Actor":"Epica3055","Number":"12092","RawContent":null,"Title":"fix: Border of SplitButton of ToolStrip is not contrasting enough …","State":"open","Body":"\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12083\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- Change `Pen` to a more contrasting `Pen`\r\n- \r\n\r\n<!-- \r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n\r\n -->\r\n\r\n## Screenshots\r\n\r\n### Before\r\n\r\n\r\n![image](https://github.com/user-attachments/assets/65947dea-4bf2-44c9-b3d7-f5bf024db08d)\r\n\r\n![image](https://github.com/user-attachments/assets/2b0da2ef-324c-4242-b39f-95ea55e2035f)\r\n\r\n\r\n![image](https://github.com/user-attachments/assets/92766ef4-790c-43e4-8d56-60f75828f403)\r\n![image](https://github.com/user-attachments/assets/25c85585-5679-437a-a57a-d3de8b9bdf3e)\r\n\r\n### After\r\n\r\n![image](https://github.com/user-attachments/assets/a6d6b436-528f-4d30-9ac0-fdf2f0d722d1)\r\n![image](https://github.com/user-attachments/assets/b182af4b-9d2f-4020-8d66-5f49c01ad0e5)\r\n\r\n![image](https://github.com/user-attachments/assets/0220e49f-f439-4069-9a2e-e7439d6cf7f0)\r\n\r\n![image](https://github.com/user-attachments/assets/549135be-e80c-4b0f-bfdf-863ecd7f53a3)\r\n\r\n## Test methodology \r\n\r\n- \r\n- Manually \r\n- \r\n<!-- \r\n## Accessibility testing  \r\n\r\n\r\n\r\n \r\n\r\n## Test environment(s) \r\n -->\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12092)","Url":"https://github.com/dotnet/winforms/pull/12092","RelatedDescription":"Open PR \"fix: Border of SplitButton of ToolStrip is not contrasting enough …\" (#12092)"},{"Id":"2515004676","IsPullRequest":false,"CreatedAt":"2024-09-09T22:03:07","Actor":"RandyPJ","Number":"12091","RawContent":null,"Title":"MenuStrip \"broken\"","State":"open","Body":"### Environment\n\nMicrosoft Visual Studio Community 2022 (64-bit) - Current\r\nVersion 17.11.2\r\n\n\n### .NET version\n\n.NET 8\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nYes.\n\n### Issue description\n\nMenuStrip broken in designer when i click on a ToolStripMenuItem.\r\n![image](https://github.com/user-attachments/assets/6baa5555-ceba-4dde-ae72-5a93df1226a5)\r\n\n\n### Steps to reproduce\n\nThe steps:\r\n 1 - Create a .net 8 Winforms app. \r\n 2 - Add MenuStrip to a Window.\r\n 3 - Add some ToolStripMenuItems and try to add childrens and siblings.\r\n\n\n### Diagnostics\n\n```text\nSee the end of this message for details on invoking \r\njust-in-time (JIT) debugging instead of this dialog box.\r\n\r\n************** Exception Text **************\r\nMicrosoft.DotNet.DesignTools.Client.DesignToolsServerException: Failed to set Win32 parent window of the Control.\r\n   at Microsoft.DotNet.DesignTools.Client.DesignToolsClient.<SendRequestAsync>d__49`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\n   at Microsoft.VisualStudio.Threading.JoinableTask`1.CompleteOnCurrentThread()\r\n   at Microsoft.DotNet.DesignTools.Protocol.Endpoints.Input.InputMessageEndpoint.Sender.SendRequest(SessionId sessionId, UInt32 messageType, UIntPtr wParam, IntPtr lParam, Point location, Keys modifierKeys, IntPtr controlHandle, Nullable`1 toolboxItemSelected)\r\n   at Microsoft.DotNet.DesignTools.Protocol.Endpoints.DesignToolsEndpoints.InputImpl.InputMessage(SessionId sessionId, UInt32 messageType, UIntPtr wParam, IntPtr lParam, Point location, Keys modifierKeys, IntPtr controlHandle, Nullable`1 toolboxItemSelected)\r\n   at Microsoft.DotNet.DesignTools.Client.Designers.InputShield.ProcessMessage(WindowMessage message, Point screenLocation, UIntPtr wParam, IntPtr lParam, Boolean isHookMessage)\r\n   at Microsoft.DotNet.DesignTools.Client.Designers.InputShield.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\n```\n","Url":"https://github.com/dotnet/winforms/issues/12091","RelatedDescription":"Open issue \"MenuStrip \"broken\"\" (#12091)"},{"Id":"2514582130","IsPullRequest":true,"CreatedAt":"2024-09-09T20:29:56","Actor":"github-actions[bot]","Number":"12090","RawContent":null,"Title":"[release/9.0] Add missing documentation for public methods in System.Drawing and Updating Effect.Dispose","State":"closed","Body":"Backport of #12069 to release/9.0\r\n\r\n/cc @lonitra\r\n\r\n## Customer Impact\r\nThis PR adds missing System.Drawing API documentation to .NET 9. It also updates new `Effect.Dispose` method to be `protected` [per API review](https://github.com/dotnet/winforms/issues/8835#issuecomment-1954987873). \r\n\r\n## Risk\r\nIn terms of adding documentation this is low. In terms of the change from `public` -> `protected` for `Effect.Dispose`, This was introduced in .NET 9 Preview 2 and guidance is for customers not call this override and to call the dispose method that has no parameters, but if customer has called this override they will need to update to call the method with no parameters per guidance.","Url":"https://github.com/dotnet/winforms/pull/12090","RelatedDescription":"Closed or merged PR \"[release/9.0] Add missing documentation for public methods in System.Drawing and Updating Effect.Dispose\" (#12090)"},{"Id":"2513142949","IsPullRequest":true,"CreatedAt":"2024-09-09T16:32:59","Actor":"Philip-Wang01","Number":"12086","RawContent":null,"Title":"Add unit tests for DesignerToolStripControlHost","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\nRelated https://github.com/dotnet/winforms/issues/10773\r\n## Proposed changes\r\n- Add unit test DesignerToolStripControlHostTests.cs for public properties and method of the DesignerToolStripControlHost.\r\n- Enable nullability in DesignerToolStripControlHost.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12086)","Url":"https://github.com/dotnet/winforms/pull/12086","RelatedDescription":"Closed or merged PR \"Add unit tests for DesignerToolStripControlHost\" (#12086)"},{"Id":"2513768670","IsPullRequest":true,"CreatedAt":"2024-09-09T12:37:05","Actor":"dotnet-maestro[bot]","Number":"12089","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20240909.1\r\n- **Date Produced**: September 9, 2024 8:08:00 AM UTC\r\n- **Commit**: 8260f289b9d748432a34680a1afeac677cda6049\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24456.3 to 10.0.0-beta.24459.1][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.24456.3 to 10.0.0-beta.24459.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.24456.3 to 10.0.0-beta.24459.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24456.3 to 10.0.0-beta.24459.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.24456.3 to 10.0.0-beta.24459.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24456.3 to 10.0.0-beta.24459.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/7cd1cae2ed...8260f289b9\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12089)","Url":"https://github.com/dotnet/winforms/pull/12089","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#12089)"},{"Id":"2513240845","IsPullRequest":true,"CreatedAt":"2024-09-09T08:12:43","Actor":"LeafShi1","Number":"12087","RawContent":null,"Title":"Add Thread.Sleep before executing control.Paste","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12002\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add Thread.Sleep before executing control.Paste\r\n- Add  control.Focus() before control.Copy()\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Regression? \r\n\r\n-  No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nRunning all tests in TextBoxBaseTests.ClipboardTests, there will always be 3-6 cases failing in 10 iterations\r\n\r\n### After\r\nRun all tests in TextBoxBaseTests.ClipboardTests for 100 iterations without failure\r\n\r\n<img width=\"362\" alt=\"image\" src=\"https://github.com/user-attachments/assets/b855eb64-6ad2-492e-a355-bd8eb6808bfc\">\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12087)","Url":"https://github.com/dotnet/winforms/pull/12087","RelatedDescription":"Open PR \"Add Thread.Sleep before executing control.Paste\" (#12087)"},{"Id":"2512990414","IsPullRequest":true,"CreatedAt":"2024-09-09T06:03:51","Actor":"MelonWang1","Number":"12085","RawContent":null,"Title":"Add unit tests for ControlDesigner.DesignerControlCollection","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nRelated https://github.com/dotnet/winforms/issues/10773\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add unit test ControlDesigner.DesignerControlCollectionTests.cs for public properties and method of the ControlDesigner.DesignerControlCollection.\r\n- Enable nullability in ControlDesigner.DesignerControlCollection.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12085)","Url":"https://github.com/dotnet/winforms/pull/12085","RelatedDescription":"Open PR \"Add unit tests for ControlDesigner.DesignerControlCollection\" (#12085)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-09-11T03:30:35.4889568Z","RunDurationInMilliseconds":553}