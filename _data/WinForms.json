{"Data":{"GitHub":{"Issues":[{"Id":"1055069552","IsPullRequest":true,"CreatedAt":"2021-11-16T16:18:46","Actor":"WPMGPRoSToTeMa","Number":"6192","RawContent":null,"Title":"Fixing `RuntimeId` for system accessible wrapper in AccessibleObject","State":"open","Body":"Fixes #6165.\r\n\r\n\r\n## Proposed changes\r\n\r\n- Added a branch for `systemWrapper` in `AccessibleObject.RuntimeId` with an empty array return value\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- There is no impact as release builds don't have assertions compiled\r\n\r\n## Regression? \r\n\r\n- Yes (from .NET 6)\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n- Unit-tests\r\n- CTI (planned)\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n-  Microsoft Windows [Version 10.0.19043.1288]\r\n- .NET 7.0.0-alpha.1.21551.1\r\n\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6192)","Url":"https://github.com/dotnet/winforms/pull/6192","RelatedDescription":"Open PR \"Fixing `RuntimeId` for system accessible wrapper in AccessibleObject\" (#6192)"},{"Id":"1055054396","IsPullRequest":false,"CreatedAt":"2021-11-16T16:04:53","Actor":"deng0","Number":"6191","RawContent":null,"Title":"ApplicationConfiguration: bug with DPI scaling when ApplicationDefaultFont is set","State":"open","Body":"* .NET Core Version: \r\n6.0.0\r\n\r\n**Problem description:**\r\nWhen ApplicationDefaultFont is set in the csproj, there is a problem with the autogenerated ApplicationConfiguration, namely that Application.SetDefaultFont is called before Application.SetHighDpiMode, which breaks DPI scaling.\r\nWhen ApplicationConfiguration.Initialize() is not used and the commands are called in the correct order instead, DPI scaling is working correctly.\r\n\r\n**Expected behavior:**\r\nNormally I would expect that the order of the commands would be irrelevant, but it's probably easier to fix the order of the commands generated in the ApplicationConfiguration.\r\n\r\n**Minimal repro:**\r\nI've attached simple repro project. \r\n[DefaultFontDpiScalingBug.zip](https://github.com/dotnet/winforms/files/7548000/DefaultFontDpiScalingBug.zip)\r\nWhen useApplicationConfiguration is set to true, DPI scaling is broken.\r\nSimply set your Windows Scaling to 150% and start this project.\r\nOnly when useApplicationConfiguration is set to false, the form and the textbox are correctly scaled up.","Url":"https://github.com/dotnet/winforms/issues/6191","RelatedDescription":"Open issue \"ApplicationConfiguration: bug with DPI scaling when ApplicationDefaultFont is set\" (#6191)"},{"Id":"1054948204","IsPullRequest":false,"CreatedAt":"2021-11-16T14:30:06","Actor":"fivage","Number":"6190","RawContent":null,"Title":"form.ShowDialog(owner) with owner that is Topmost stays hidden behind the owner","State":"open","Body":"* .NET Core Version: 5\r\n\r\n* Have you experienced this same bug with .NET Framework?: No, works correctly in 4.7.2\r\n\r\n**Problem description:**\r\n\r\nform.ShowDialog(owner) with owner that is Topmost stays hidden behind the owner.\r\n\r\n**Expected behavior:**\r\n\r\nIt should be put in front of the owner\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6190","RelatedDescription":"Open issue \"form.ShowDialog(owner) with owner that is Topmost stays hidden behind the owner\" (#6190)"},{"Id":"1054491543","IsPullRequest":false,"CreatedAt":"2021-11-16T06:19:15","Actor":"ahdung","Number":"6189","RawContent":null,"Title":"Application wide private fonts","State":"open","Body":"Consider this API:\r\n```c#\r\nApplication.Fonts.Add(fontFileNameOrByteArrayOrStream);\r\n```\r\nlike `PrivateFontCollection.AddFontFile`, but more useful, `PrivateFontCollection` not friendly for third-party components, no source code, it maybe load font from configuration file, use `FontConverter` convert from `string`, the finally is `new Font(string)`, but this way is not respect private fonts.\r\n\r\nSo we need a way to set applicationOrProcess-wide private fonts, and let all font contructors to respect it.","Url":"https://github.com/dotnet/winforms/issues/6189","RelatedDescription":"Open issue \"Application wide private fonts\" (#6189)"},{"Id":"1054404629","IsPullRequest":true,"CreatedAt":"2021-11-16T03:36:57","Actor":"WPMGPRoSToTeMa","Number":"6188","RawContent":null,"Title":"Adding prevention of label editing when clicking on subitems of ListView","State":"open","Body":"Fixes #4816.\r\n\r\n\r\n## Proposed changes\r\n\r\n- Prevention of label editing when clicking on subitems of a row in ListView\r\n\r\n## Customer Impact\r\n\r\n- Clicking on ListView subitems will no longer start label editing (Windows Explorer behavior)\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![](http://g.recordit.co/zakqSfaw76.gif)\r\n\r\n### After\r\n\r\n![](http://g.recordit.co/SCi6WVqVzz.gif)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n- Unit-tests\r\n- CTI (planned)\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- Microsoft Windows [Version 10.0.19043.1288]\r\n- .NET 7.0.0-alpha.1.21551.1\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6188)","Url":"https://github.com/dotnet/winforms/pull/6188","RelatedDescription":"Open PR \"Adding prevention of label editing when clicking on subitems of ListView\" (#6188)"},{"Id":"1054360320","IsPullRequest":false,"CreatedAt":"2021-11-16T02:19:51","Actor":"RussKie","Number":"6187","RawContent":null,"Title":"Incorrect rendering of button borders","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Version: 7.0 Preview1\r\n\r\n**Problem description:**\r\n\r\nhttps://github.com/dotnet/winforms/pull/6059 updated the colour of the `Button`'s borders, however it regressed the rendering on W11\r\n\r\nHere's .NET 7.0 vs .NET 6.0\r\n![image](https://user-images.githubusercontent.com/4403806/141871191-4bedd74e-88f9-4ff7-b693-8dac5afdb48e.png)\r\n...magnified:\r\n![image](https://user-images.githubusercontent.com/4403806/141883762-b6651b7f-369b-4857-bbcf-98ea7f974661.png)\r\n\r\n\r\n**Expected behavior:**\r\n\r\nThe borders are rendered correctly\r\n","Url":"https://github.com/dotnet/winforms/issues/6187","RelatedDescription":"Open issue \"Incorrect rendering of button borders\" (#6187)"},{"Id":"1054359715","IsPullRequest":false,"CreatedAt":"2021-11-16T02:18:38","Actor":"TempeBrennan","Number":"6186","RawContent":null,"Title":"IDesigner interface deosn't take effect in .net core","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n* 6.0.100-rc.2.21505.57\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nI can see \"IDesigner\" interface is available in official document\r\n[MS document](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.idesigner?view=net-5.0)\r\n![image](https://user-images.githubusercontent.com/51563666/141883724-10f651da-5dff-4490-b28e-d6412208d1b0.png)\r\n\r\n![image](https://user-images.githubusercontent.com/51563666/141883467-9b29053d-b018-4a04-83a8-87dccabf817b.png)\r\n\r\nI copy example code to a .net framework project and a .net6 project.\r\n```\r\n[DesignerAttribute(typeof(ExampleIDesigner))]\r\n    public class TestControl : System.Windows.Forms.UserControl\r\n    {\t\t\t\t\r\n        public TestControl()\r\n        {\t\r\n        }\r\n    }\r\n\r\n public class ExampleIDesigner : System.ComponentModel.Design.IDesigner\r\n    {\r\n         // ...\r\n    }\r\n```\r\nWhen I test in Visual Studio 2022, I found .net6 designer doesn't work. Is this a bug?\r\nOr is Visual Studio 2022 bug? Could you please help me confirm it? Thanks a lot!\r\n\r\n**Expected behavior:**\r\n<!--\r\n    Provide details on expected behavior with screenshots/GIF, where ever possible.\r\n -->\r\nWhen right click testControl1, there is a menu item \"Display Component Name\" shows like .NET Framework\r\n\r\n**Minimal repro:**\r\n<!--\r\n    Provide step by step guide to repro this issue.  Incase repro steps are complex, It would be helpful if \r\n    you attach a GIF with repro actions. Attaching a sample app to repro the issue will help speed up the \r\n    resolution. \r\n -->\r\n\r\n![bug3](https://user-images.githubusercontent.com/51563666/141883672-cd299a05-fce2-4f2e-ba59-e2522323fe4a.gif)\r\n[TestDesignerFeature.zip](https://github.com/dotnet/winforms/files/7542823/TestDesignerFeature.zip)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6186","RelatedDescription":"Open issue \"IDesigner interface deosn't take effect in .net core\" (#6186)"},{"Id":"1054015964","IsPullRequest":false,"CreatedAt":"2021-11-16T00:01:39","Actor":"dakusan","Number":"6181","RawContent":null,"Title":"WinForms TextBox Caret does not blink","State":"closed","Body":"I'm using .NET Core 3.1, but another user on StackOverflow reported the same problem in .NET 5. And one user reported “Mine blinks 5-6 times then stops blinking.”.\r\n\r\nI have a System.Windows.Forms.TextBox that I added to the form through the designer in Visual Studio 2019 C# to a “Windows Forms App (.NET Core)” project. The caret just stays solid and does not blink. The Win32 APIs don't seem to help and I can't find anything on the System.Windows.Forms.TextBox or its parent classes that may help.\r\n\r\nTo reproduce doesn't require anything more than adding a TextBox onto a Form.\r\n\r\n### Further technical details\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.401\r\n Commit:    5b6f5e5005\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.7\r\n  Commit:  fcfdef8d6b\r\n\r\n.NET Core SDKs installed:\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]","Url":"https://github.com/dotnet/winforms/issues/6181","RelatedDescription":"Closed issue \"WinForms TextBox Caret does not blink\" (#6181)"},{"Id":"1054034583","IsPullRequest":true,"CreatedAt":"2021-11-15T19:42:52","Actor":"dreddy-work","Number":"6182","RawContent":null,"Title":"Fixing scaling issue on explicitly set Font containers but still Inherit AustoScaleMode.","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #6173\r\n\r\n\r\n## Proposed changes\r\n\r\nContainer controls whose Font is explicitly set are not scaled well if they inherit `AutoScaleMode `from parent. Inherited `AutoScaleMode `containers use `AutoScaleFactor `from parents to scale themselves. However, in a `PerMonitorV2 `mode applications, parent receive the `DpiChangedEvent `after all their children receive it and scale themselves. `ContainerControls `that inherit scaling, will end up using `AutoScaleFactor `from parent that was not yet updated to the new Dpi as Parent yet to receive the DPI event. To fix this, we are tracking such containers with `IsDpiChangeScalingRequired `flag and scale them once the Parent `AutoScaleFactor ` is updated.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nCustomers with PerMonitorV2 mode applications migrating from .NET 5.0 to .NET 60 would experience regression in scaling the Winforms applications on higher DPI settings.\r\n\r\n## Regression? \r\n\r\n- Yes from .NET 5.0. Though we do not fully support PerMonitorV2 mode apps in WinForms yet, customers have been developing them and using work arounds where ever needed. \r\n\r\n## Risk\r\n\r\nLow. Majority of the changes made are in `Permonv2 `mode code path.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Customer applications validation.\r\n- Manual validation by CTI for HDPI scenarios.\r\n- Running existing automation with the private binaries shared\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6182)","Url":"https://github.com/dotnet/winforms/pull/6182","RelatedDescription":"Open PR \"Fixing scaling issue on explicitly set Font containers but still Inherit AustoScaleMode.\" (#6182)"},{"Id":"1053743440","IsPullRequest":true,"CreatedAt":"2021-11-15T14:41:50","Actor":"Danil-Andrianov","Number":"6180","RawContent":null,"Title":"Rewrite maui tests","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3617\r\n\r\n\r\n## Proposed changes\r\n\r\n- MAUI tests was removed\r\n- Integration tests were added instead of them\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual\r\n- CTI\r\n\r\n\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- OS version: 10.0.19042.1348\r\n- .NET 6.0.100-rc.2.21505.57\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6180)","Url":"https://github.com/dotnet/winforms/pull/6180","RelatedDescription":"Open PR \"Rewrite maui tests\" (#6180)"},{"Id":"1053485372","IsPullRequest":true,"CreatedAt":"2021-11-15T10:27:35","Actor":"DmitryGorokhov","Number":"6179","RawContent":null,"Title":"Fixing highlighting of property grid item dropdown in the Inspect","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3796 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Refactored `DropDownControl` method: set sending a focus and change expand-collapse state events before focusing on dropdown control.  \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Has a correct highlighting of opened and focused dropdown in the Inspect.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- No\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nNo highlighting on the focused dropdown of property grid item in the Inspect.\r\n\r\n![gifBefore](https://user-images.githubusercontent.com/62929087/91526420-28c92c80-e936-11ea-8c84-e8d889d0efb8.gif)\r\n\r\n### After\r\n\r\nHas highlighting on the focused dropdown of property grid item in the Inspect.\r\n\r\n![HighlightDropdown](https://user-images.githubusercontent.com/58004471/141765369-e0015d1a-9f1c-44f5-8dfb-6ac56f542df8.gif)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual\r\n- Unit\r\n- CTI\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n- Inspect\r\n- Accessibility Insights\r\n- Narrator\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- dotnet version: 6.0.100\r\n- OS version: 10.0.19043\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6179)","Url":"https://github.com/dotnet/winforms/pull/6179","RelatedDescription":"Open PR \"Fixing highlighting of property grid item dropdown in the Inspect\" (#6179)"},{"Id":"1052983203","IsPullRequest":false,"CreatedAt":"2021-11-15T03:39:46","Actor":"mottykohn","Number":"6176","RawContent":null,"Title":"For control Name use nameof instead of hardcoding","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n<!--\r\n    A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n  -->\r\nThe generates code-behind for any given control looks like this\r\n```\r\n            // \r\n            // SelectAll\r\n            // \r\n            this.SelectAll.Dock = System.Windows.Forms.DockStyle.Left;\r\n            this.SelectAll.Location = new System.Drawing.Point(0, 0);\r\n            this.SelectAll.Name = \"SelectAll\";\r\n            this.SelectAll.Size = new System.Drawing.Size(147, 32);\r\n            this.SelectAll.TabIndex = 1;\r\n            this.SelectAll.Text = \"Select All\";\r\n            this.SelectAll.UseVisualStyleBackColor = true;\r\n\r\n```\r\nThe name is hard-coded. When renaming a control using f2 or ctrl-r-r you need to update the hard coded name.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\nWas wondering if it would be possible the generate code the looks like this\r\n```\r\n            this.SelectAll.Name = nameof(this.SelectAll);\r\n```\r\nI realize that this may not be that simple as I'm not sure how the designer works so maybe it won't pick up changes to such a construct. I'm also aware that editing the code behind is not directly supported, but the rename functionality exist in the part that we are allowed to edit.\r\n<!--\r\n    A clear and concise description of what you want to happen. This includes:\r\n    - Description of what API need to be added or changed.\r\n    - Code that shows the surface area of the API.\r\n    - Code that shows real world scenarios, and how they would otherwise be handled.\r\n    - Details showing the usage/consumption of the proposed new API, and alternatives (e.g. not having this API).\r\n    - Any other context or screenshots about the feature request here.\r\n\r\n    :exclamation: Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md for more details\r\n\r\n  -->\r\n\r\n\r\n**Will this feature affect UI controls?**\r\n    Yes\r\n    - VS Designer need to support the feature as mentioned above to accommodate picking up any changes\r\n    - Will not impact accessibility\r\n    - Will not need to be localized.\r\n","Url":"https://github.com/dotnet/winforms/issues/6176","RelatedDescription":"Closed issue \"For control Name use nameof instead of hardcoding\" (#6176)"},{"Id":"1053130030","IsPullRequest":false,"CreatedAt":"2021-11-15T03:36:09","Actor":"docfresh","Number":"6177","RawContent":null,"Title":"Outdated Settings Documentation / Portable settings documentation","State":"closed","Body":"The Application Settings help file [here ](https://docs.microsoft.com/en-us/dotnet/desktop/winforms/advanced/application-settings-for-windows-forms?view=netframeworkdesktop-4.8&WT.mc_id=DT-MVP-5003235)is outdated. It refers to .NET 4 but not 5 or 6.  I can't find an updated version.  Some of the relevant info is [here](https://stackoverflow.com/questions/65518159/where-are-the-settings-saved-in-a-net-5-winforms-app).\r\n\r\n\r\nAlso, it would be great if an updated doc could give recommended methods for making a settings file portable; for example, read/write from the root directory of a USB drive, instead of in the Windows user's appdata folder. \r\n\r\nHacks for this could probably be figured out, but enough people may be interested in portable applications that is is worth including in the docs.\r\n\r\nThanks","Url":"https://github.com/dotnet/winforms/issues/6177","RelatedDescription":"Closed issue \"Outdated Settings Documentation / Portable settings documentation\" (#6177)"},{"Id":"1052678053","IsPullRequest":true,"CreatedAt":"2021-11-13T13:43:09","Actor":"dotnet-maestro[bot]","Number":"6175","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211112.1\r\n- **Date Produced**: November 12, 2021 5:43:31 PM UTC\r\n- **Commit**: 35704e44e5d1b158f21512b1c1081a0e025bde3f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/5fa6dd3...35704e4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6175)","Url":"https://github.com/dotnet/winforms/pull/6175","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6175)"},{"Id":"1051950678","IsPullRequest":true,"CreatedAt":"2021-11-12T13:43:22","Actor":"dotnet-maestro[bot]","Number":"6174","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211111.18\r\n- **Date Produced**: November 12, 2021 9:27:43 AM UTC\r\n- **Commit**: 5fa6dd364982be4ffd83358adbf130d88049c72a\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/6f5de0b...5fa6dd3\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6174)","Url":"https://github.com/dotnet/winforms/pull/6174","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6174)"},{"Id":"1051915203","IsPullRequest":false,"CreatedAt":"2021-11-12T12:22:33","Actor":"filipnavara","Number":"6173","RawContent":null,"Title":"PerMonitorV2: DPI scaling not firing ScaleControl when custom Font is used","State":"open","Body":"* .NET Core Version: 6.0, 7.0/main\r\n\r\n* Have you experienced this same bug with .NET Framework?: No (also works in .NET 5)\r\n\r\n**Problem description:**\r\n\r\nThis is variation of problem reported in #6152 with the twist of setting `Font` on one of the controls. It is a regression from .NET 5.\r\n\r\n**Expected behavior:**\r\n\r\n`ScaleControl` is called consistently when moving window to display with different DPI.\r\n\r\n**Minimal repro:**\r\n\r\n[WinFormsApp3.zip](https://github.com/dotnet/winforms/files/7527473/WinFormsApp3.zip)\r\n\r\nSame repro steps as #6152. The difference is that a custom font is set on one of the `UserControl`s.\r\n","Url":"https://github.com/dotnet/winforms/issues/6173","RelatedDescription":"Open issue \"PerMonitorV2: DPI scaling not firing ScaleControl when custom Font is used\" (#6173)"},{"Id":"1051446532","IsPullRequest":true,"CreatedAt":"2021-11-12T02:27:40","Actor":"RussKie","Number":"6171","RawContent":null,"Title":"(Servicing) Emit font in app bootstrap locale agnostic","State":"closed","Body":"Fixes #6144.\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\n- Ensure that the application bootstrap code is generated in locale independent manner.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customer with locales where decimal separator is not `.` will now have a correct code emitted by the source generated `ApplicationConfiguration` API.\r\n\r\n## Regression? \r\n\r\n- No, new feature introduced in .NET 6 RC2\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual\r\n- added unit tests\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6171)","Url":"https://github.com/dotnet/winforms/pull/6171","RelatedDescription":"Closed or merged PR \"(Servicing) Emit font in app bootstrap locale agnostic\" (#6171)"},{"Id":"1050663216","IsPullRequest":true,"CreatedAt":"2021-11-11T23:41:26","Actor":"RussKie","Number":"6164","RawContent":null,"Title":"Emit font in app bootstrap locale agnostic","State":"closed","Body":"\r\nFixes #6144.\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\n- Ensure that the application bootstrap code is generated in locale independent manner.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customer with locales where decimal separator is not `.` will now have a correct code emitted by the source generated `ApplicationConfiguration` API.\r\n\r\n## Regression? \r\n\r\n- No, new feature introduced in .NET 6 RC2\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual\r\n- added unit tests\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6164)","Url":"https://github.com/dotnet/winforms/pull/6164","RelatedDescription":"Closed or merged PR \"Emit font in app bootstrap locale agnostic\" (#6164)"},{"Id":"1050973983","IsPullRequest":false,"CreatedAt":"2021-11-11T22:59:18","Actor":"ghost","Number":"6168","RawContent":null,"Title":"question: chart in winforms .net 6.0","State":"closed","Body":"Hi\r\n\r\nIn .NET 4.8 I used the chart UI widget in winforms UI designer to make different kind of charts (pie chart, bar chart, ...).\r\nNow I try to port my .net 4.8 code to .net 6.0 but I can't find the chart widget anymore. It's just not in the list...\r\n\r\nI use visual studio community 17.0\r\n\r\nThanks","Url":"https://github.com/dotnet/winforms/issues/6168","RelatedDescription":"Closed issue \"question: chart in winforms .net 6.0\" (#6168)"},{"Id":"1051349560","IsPullRequest":false,"CreatedAt":"2021-11-11T20:49:00","Actor":"ghost","Number":"6169","RawContent":null,"Title":"toolstripstatuslabel question","State":"open","Body":"Hi\r\n\r\nYou just close this issue here https://github.com/dotnet/winforms/issues/6160\r\nwithout any explanation.\r\n\r\nWhat's the logic behind using \"&&\" in order to get \"&\" displayed on a toolstripstatuslabel ?\r\nWhy is this changed compared to .net 4.8?\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6169","RelatedDescription":"Open issue \"toolstripstatuslabel question\" (#6169)"},{"Id":"1050287020","IsPullRequest":true,"CreatedAt":"2021-11-11T19:19:59","Actor":"dreddy-work","Number":"6158","RawContent":null,"Title":"[6.0][Servicing] Fix nested container controls scaling that have AutoscaleMode as Inherit","State":"closed","Body":"* Fix nested ContainerControls that have `AutoscaleMode `as `Inherit`.\r\n\r\nA change in supporting scaling for `MDI `child windows in PermonV2 mode applications regressed this. Issue impact Winforms applications that are running in `PerMonV2 `mode. While winforms not yet fully support  PerMonV2 mode, customers are creating and using this mode for their applications, since .NET Framework 4.7.3, and get it working for less complex winforms applications with some work arounds. \r\n\r\nFixes #6152.\r\n\r\n\r\n## Regression? \r\n\r\n- Yes, from .NET 5.0. \r\n\r\n## Risk\r\n- Low. Fix is already in 7.0 and tested for `PermonV2 `mode.\r\n- \r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual  CTI validation.\r\n- Running customer provided applications and making sure change fixing them.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6158)","Url":"https://github.com/dotnet/winforms/pull/6158","RelatedDescription":"Closed or merged PR \"[6.0][Servicing] Fix nested container controls scaling that have AutoscaleMode as Inherit\" (#6158)"},{"Id":"1050962173","IsPullRequest":true,"CreatedAt":"2021-11-11T13:43:22","Actor":"dotnet-maestro[bot]","Number":"6167","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211111.1\r\n- **Date Produced**: November 11, 2021 11:38:03 AM UTC\r\n- **Commit**: 6f5de0b2b979a70e6fe36904d0d4f087c32f9c7e\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/dfb8c90...6f5de0b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6167)","Url":"https://github.com/dotnet/winforms/pull/6167","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6167)"},{"Id":"1050847981","IsPullRequest":true,"CreatedAt":"2021-11-11T10:52:56","Actor":"SergeySmirnov-Akvelon","Number":"6166","RawContent":null,"Title":"Fixing NotSupportedException from \"AccessibleObject.RuntimeId\" property","State":"open","Body":"Fixes #6165\r\n\r\n## Proposed changes\r\n- The issue is reproduced because we throw an `NotSupportedException` when user tries to get the `RuntimeId` properties for the base `AccessibleObject`.\r\n- Added return of `Array.Empty` for base class\r\n- Remove `AccessibleObjectRuntimeIdNotSupported` from string resources\r\n\r\n## Customer Impact\r\n**Before fix:** \r\n![Issue-6165](https://user-images.githubusercontent.com/23376742/141281075-9d567d01-06e6-470f-8987-a80368ad7b85.gif)\r\n\r\n**After fix:**\r\n![Issue-6165-fixed](https://user-images.githubusercontent.com/23376742/141285880-6fab234d-3e33-48cb-a2d0-0d9bfec85e98.gif)\r\n\r\n## Regression? \r\n- Yes (from #5638)\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- Manual testing \r\n\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Inspect\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- .NET Core SDK: 7.0.0-alpha.1.21558.10\r\n- Microsoft Windows [Version 10.0.19041.804]\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6166)","Url":"https://github.com/dotnet/winforms/pull/6166","RelatedDescription":"Open PR \"Fixing NotSupportedException from \"AccessibleObject.RuntimeId\" property\" (#6166)"},{"Id":"1050803781","IsPullRequest":false,"CreatedAt":"2021-11-11T10:03:01","Actor":"SergeySmirnov-Akvelon","Number":"6165","RawContent":null,"Title":"The application crashes when trying to get data about the DropDownList in the PropertyGrid through the Inspect","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n.NET Core Version: \r\n- 7.0.0-alpha.1.21558.10\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\n- No (regression from #5638)\r\n\r\n**Repro steps:**\r\n\r\n1. Create an app with a `PropertyGrid` and button.\r\n2. Set `Button` as `SelectedObject` property of `PropertyGrid`.\r\n3. Run the app.\r\n4. Run the Inspect.\r\n5. Set focus to `Accessible Role` dropdown list.\r\n\r\n**Actual behavior:**\r\nThe Application crashes:\r\n![Issue-6165](https://user-images.githubusercontent.com/23376742/141281075-9d567d01-06e6-470f-8987-a80368ad7b85.gif)\r\n\r\n**Expected behavior:**\r\nThe application should not crash.","Url":"https://github.com/dotnet/winforms/issues/6165","RelatedDescription":"Open issue \"The application crashes when trying to get data about the DropDownList in the PropertyGrid through the Inspect\" (#6165)"},{"Id":"1050500999","IsPullRequest":true,"CreatedAt":"2021-11-11T05:08:43","Actor":"gewarren","Number":"6161","RawContent":null,"Title":"Fix some comments","State":"closed","Body":"Fixes two code comments.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nNone. \r\n\r\n## Regression? \r\n\r\nNo\r\n\r\n## Risk\r\n\r\nLow\r\n\r\n<!-- end TELL-MODE -->\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6161)","Url":"https://github.com/dotnet/winforms/pull/6161","RelatedDescription":"Closed or merged PR \"Fix some comments\" (#6161)"},{"Id":"1050559863","IsPullRequest":false,"CreatedAt":"2021-11-11T04:32:18","Actor":"ghost","Number":"6162","RawContent":null,"Title":"question: chart in winforms .net 6.0","State":"closed","Body":"Hi\r\n\r\nIn .NET 4.8 I used the chart UI widget in winforms UI designer to make different kind of charts (pie chart, bar chart, ...).\r\nNow I try to port my .net 4.8 code to .net 6.0 but I can't find the chart widget anymore. It's just not in the list...\r\n\r\nI use visual studio community 17.0\r\n\r\nThanks","Url":"https://github.com/dotnet/winforms/issues/6162","RelatedDescription":"Closed issue \"question: chart in winforms .net 6.0\" (#6162)"},{"Id":"1050487957","IsPullRequest":false,"CreatedAt":"2021-11-11T04:29:42","Actor":"ghost","Number":"6160","RawContent":null,"Title":"bug: toolstripstatuslabel text","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET 6.0 (Visual Studio 2022)\r\n\r\n* Have you experienced this same bug with .NET Framework?\r\nNo\r\n\r\n**Problem description:**\r\n\r\nWhen you create a toolstrip on a winform and add a toolstripstatuslabel with any Text property containing a '&' character in the string, the '&' character is not displayed. All rest of the string however is displayed but not the '&'.\r\n\r\n**Expected behavior:**\r\n\r\nThe '&' character should be displayed as in .NET 4.8\r\n\r\n**Minimal repro:**\r\n\r\n1. Create a new winform \r\n2. Add a toolstrip to the winform\r\n3. Add a toolstripstatuslabel to'the toolstrip\r\n4. Assign any string with one or more '&' characters to the Text property of the toolstripstatuslabel\r\n5. Compile and run\r\n6. The '&' characters are not displayed, but all other characters of the string are displayed correctly","Url":"https://github.com/dotnet/winforms/issues/6160","RelatedDescription":"Closed issue \"bug: toolstripstatuslabel text\" (#6160)"},{"Id":"1050342363","IsPullRequest":true,"CreatedAt":"2021-11-10T22:27:29","Actor":"dotnet-maestro[bot]","Number":"6159","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:84f431dc-3375-4a46-af87-08d961c59698)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 84f431dc-3375-4a46-af87-08d961c59698\r\n- **Build**: 20211110.2\r\n- **Date Produced**: November 10, 2021 5:15:38 PM UTC\r\n- **Commit**: ee9b7f19853685805c612103282c8d9486c7db86\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21558.5 to 6.0.0-beta.21560.2][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 6.0.0-beta.21558.5 to 6.0.0-beta.21560.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21558.5 to 6.0.0-beta.21560.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.21558.5 to 6.0.0-beta.21560.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.21558.5 to 6.0.0-beta.21560.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21558.5 to 6.0.0-beta.21560.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/8ebefe2...ee9b7f1\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates sdk.version to 6.0.100\r\n  - Updates tools.dotnet to 6.0.100\r\n\r\n[marker]: <> (End:84f431dc-3375-4a46-af87-08d961c59698)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6159)","Url":"https://github.com/dotnet/winforms/pull/6159","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#6159)"},{"Id":"1050003012","IsPullRequest":true,"CreatedAt":"2021-11-10T17:49:11","Actor":"dotnet-maestro[bot]","Number":"6156","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:84f431dc-3375-4a46-af87-08d961c59698)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 84f431dc-3375-4a46-af87-08d961c59698\r\n- **Build**: 20211108.5\r\n- **Date Produced**: November 8, 2021 9:31:54 PM UTC\r\n- **Commit**: 8ebefe290f57089d60100465111e78f223ee91db\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21519.3 to 6.0.0-beta.21558.5][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 6.0.0-beta.21519.3 to 6.0.0-beta.21558.5][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21519.3 to 6.0.0-beta.21558.5][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.21519.3 to 6.0.0-beta.21558.5][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.21519.3 to 6.0.0-beta.21558.5][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21519.3 to 6.0.0-beta.21558.5][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/85f3aa1...8ebefe2\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:84f431dc-3375-4a46-af87-08d961c59698)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6156)","Url":"https://github.com/dotnet/winforms/pull/6156","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#6156)"},{"Id":"1050044628","IsPullRequest":false,"CreatedAt":"2021-11-10T16:26:21","Actor":"filipnavara","Number":"6157","RawContent":null,"Title":"Forms created on non-primary monitors with different DPI have incorrect font size","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: 6.0 RTM\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\n\r\nForms that are launches on secondary screen with different DPI (eg. primary = 150% or 144, secondary = 100% or 96) have incorrectly scaled fonts.\r\n\r\n**Expected behavior:**\r\n\r\nCorrectly scaled fonts.\r\n\r\n**Minimal repro:**\r\n\r\n[WinFormsApp2.zip](https://github.com/dotnet/winforms/files/7514304/WinFormsApp2.zip)\r\n\r\nRun the app, it will likely start on primary monitor. Clicking on the form with create a new form above the parent one. On primary screen it looks like this:\r\n\r\n![image](https://user-images.githubusercontent.com/1764393/141152171-6c9fe252-4508-4128-a05d-fcfdfc01b609.png)\r\n\r\nMove one of the windows on secondary screen a click on it. The new windows on the secondary screen look like this (upper left one on the screenshot is original form dragged from primary screen):\r\n\r\n![image](https://user-images.githubusercontent.com/1764393/141152295-ee0ce2f2-bb0f-4284-b046-369537d4630e.png)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6157","RelatedDescription":"Open issue \"Forms created on non-primary monitors with different DPI have incorrect font size\" (#6157)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-11-17T05:30:39.3273959Z","RunDurationInMilliseconds":560}