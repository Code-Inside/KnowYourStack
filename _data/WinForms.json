{"Data":{"GitHub":{"Issues":[{"Id":"1138093918","IsPullRequest":true,"CreatedAt":"2022-02-15T02:28:07","Actor":"kant2002","Number":"6692","RawContent":null,"Title":"Explicitly use ComWrappers for file dialogs","State":"open","Body":"Do not use COM interfaces for file dialogs at all except IFileDialogEvents\r\nRight now each CoClass created using CoCreateInstance represented as unique RCW\r\nThat RCW still uses interfaces, but all important methods are implicitly declares\r\nNo explicit interface method of IFileDialog, IOpenFileDialog and ISaveFileDialog\r\nare used.\r\nIShellItem and IShellItemArray still used, but that usage comes from IXXXFileDialog\r\ninterfaces. If I remove them, I can be explicit about wrappers.\r\n\r\nAfter this point, there two options\r\n- Leave interfaces as is, wasteful RCW, good for documentation\r\n- Remove interfaces, simplify RCW even more. Keeping track of method table would be problematic.\r\n\r\nRelated to #5163\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6692)","Url":"https://github.com/dotnet/winforms/pull/6692","RelatedDescription":"Open PR \"Explicitly use ComWrappers for file dialogs\" (#6692)"},{"Id":"1130599068","IsPullRequest":true,"CreatedAt":"2022-02-14T17:11:03","Actor":"gpetrou","Number":"6674","RawContent":null,"Title":"Enable nullability in FormAccessibleObject","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in FormAccessibleObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6674)","Url":"https://github.com/dotnet/winforms/pull/6674","RelatedDescription":"Closed or merged PR \"Enable nullability in FormAccessibleObject\" (#6674)"},{"Id":"1137279251","IsPullRequest":true,"CreatedAt":"2022-02-14T13:43:54","Actor":"dotnet-maestro[bot]","Number":"6691","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220213.2\r\n- **Date Produced**: February 13, 2022 7:28:25 PM UTC\r\n- **Commit**: 6e05d78deba320a54ef10a265c6025bbb686efe6\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22112.5 to 7.0.0-preview.2.22113.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/78c6505...6e05d78\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6691)","Url":"https://github.com/dotnet/winforms/pull/6691","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6691)"},{"Id":"1137121804","IsPullRequest":false,"CreatedAt":"2022-02-14T10:53:43","Actor":"vladimir-krestov","Number":"6690","RawContent":null,"Title":"Some flaky tests fail CI build and block fixes deployment","State":"open","Body":"This is a global issue for tracking flaky tests for different controls, that need to be skipped.\r\n\r\n* .NET Core Version: 7.0\r\n\r\n**Problem description:**\r\nSome tests fail sometimes and block successful fixes deployment:\r\n- [ ] #6597\r\n- [ ] #6609\r\n- [ ] #6610\r\n- [ ] #6635\r\n- [ ] #6654\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\n- All successful PRs pass CI build correctly\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6690","RelatedDescription":"Open issue \"Some flaky tests fail CI build and block fixes deployment\" (#6690)"},{"Id":"1135982157","IsPullRequest":true,"CreatedAt":"2022-02-14T01:23:45","Actor":"gpetrou","Number":"6687","RawContent":null,"Title":"Enable nullability in GroupBox","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in GroupBox.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6687)","Url":"https://github.com/dotnet/winforms/pull/6687","RelatedDescription":"Closed or merged PR \"Enable nullability in GroupBox\" (#6687)"},{"Id":"1136011471","IsPullRequest":true,"CreatedAt":"2022-02-14T01:23:15","Actor":"gpetrou","Number":"6688","RawContent":null,"Title":"Enable nullability in Label","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in Label.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6688)","Url":"https://github.com/dotnet/winforms/pull/6688","RelatedDescription":"Closed or merged PR \"Enable nullability in Label\" (#6688)"},{"Id":"1136331377","IsPullRequest":false,"CreatedAt":"2022-02-13T19:27:38","Actor":"jbhensley","Number":"6689","RawContent":null,"Title":"ComboBox internal state not consistent when inserting at SelectedIndex and IsHandleCreated == false","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: 6.0.101\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\n\r\nAdd items to the `ComboBox` and select one:\r\n\r\n``` C#\r\ncomboBox1.Items.Add(\"Item 1\");\r\ncomboBox1.Items.Add(\"Item 2\");\r\ncomboBox1.Items.Add(\"Item 3\");\r\n\r\ncomboBox1.SelectedIndex = 1;\r\n```\r\n\r\nNow insert at the selected index: `comboBox1.Items.Insert(1, \"Test\");`\r\n\r\nIf the handle has been created:\r\n\r\n- Item will be inserted into collection\r\n- `SelectedIndex` will increment\r\n- `SelectedItem` and `Text` remain consistent\r\n\r\nIf the handle has not been created:\r\n\r\n- Item will be inserted into collection\r\n- `SelectedIndex` will remain the same\r\n- `SelectedItem` will be the newly inserted item\r\n- `Text` will match the old `SelectedItem`\r\n\r\nIssue discovered while adding events to `Items` collection (#6673)\r\n\r\n**Expected behavior:**\r\n\r\n- Internal state of control should remain consistent\r\n- Behavior when handle has not yet been created should match that of when it has been\r\n\r\n**Minimal repro:**\r\n\r\n- Create new WinForms project\r\n- Add the following to `Main` just after `ApplicationConfiguration.Initialize();`\r\n\r\n``` C#\r\nvar comboBox = new ComboBox();\r\n\r\ncomboBox.Items.Add(\"Item 1\");\r\ncomboBox.Items.Add(\"Item 2\");\r\ncomboBox.Items.Add(\"Item 3\");\r\ncomboBox.SelectedIndex = 1;\r\n\r\ncomboBox.Items.Insert(1, \"Test\");\r\n```\r\n\r\n- Set a breakpoint on `comboBox.Items.Insert(1, \"Test\");`\r\n- Observe the values of `SelectedIndex`, `SelectedItem` and `Text` before and after that line executes","Url":"https://github.com/dotnet/winforms/issues/6689","RelatedDescription":"Open issue \"ComboBox internal state not consistent when inserting at SelectedIndex and IsHandleCreated == false\" (#6689)"},{"Id":"1132577053","IsPullRequest":true,"CreatedAt":"2022-02-13T16:42:12","Actor":"dotnet-maestro[bot]","Number":"6683","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220212.5\r\n- **Date Produced**: February 13, 2022 2:40:20 AM UTC\r\n- **Commit**: 78c6505cffe2558b036fbe44cd27038affbb6cce\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22109.10 to 7.0.0-preview.2.22112.5][3]\r\n\r\n[3]: https://github.com/dotnet/runtime/compare/2b862d4...78c6505\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6683)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/6683","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6683)"},{"Id":"1134035291","IsPullRequest":true,"CreatedAt":"2022-02-12T13:38:59","Actor":"dotnet-maestro[bot]","Number":"6686","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220211.10\r\n- **Date Produced**: February 12, 2022 2:40:37 AM UTC\r\n- **Commit**: ff6cc4e9c3eef575f62a33a642ca80e79d27c9bb\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22110.7 to 7.0.0-beta.22111.10][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22110.7 to 7.0.0-beta.22111.10][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22110.7 to 7.0.0-beta.22111.10][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22110.7 to 7.0.0-beta.22111.10][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22110.7 to 7.0.0-beta.22111.10][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22110.7 to 7.0.0-beta.22111.10][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/78eaf78...ff6cc4e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6686)","Url":"https://github.com/dotnet/winforms/pull/6686","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6686)"},{"Id":"1133650671","IsPullRequest":true,"CreatedAt":"2022-02-12T06:45:57","Actor":"kant2002","Number":"6685","RawContent":null,"Title":"Autocomplete using ComWrappers","State":"open","Body":"Provide RCW for\r\n- [x] IAutoComplete2\r\n\r\nProvides CCW\r\n- [x] IEnumString\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6685)","Url":"https://github.com/dotnet/winforms/pull/6685","RelatedDescription":"Open PR \"Autocomplete using ComWrappers\" (#6685)"},{"Id":"1133649759","IsPullRequest":true,"CreatedAt":"2022-02-12T06:44:04","Actor":"kant2002","Number":"6684","RawContent":null,"Title":"Option to not use WebRequest for PictureBox","State":"open","Body":"Indirectly related to #1756 because if that would work, I would be able to fix #1756 using the same approach.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6684)","Url":"https://github.com/dotnet/winforms/pull/6684","RelatedDescription":"Open PR \"Option to not use WebRequest for PictureBox\" (#6684)"},{"Id":"1132576182","IsPullRequest":true,"CreatedAt":"2022-02-11T13:39:18","Actor":"dotnet-maestro[bot]","Number":"6682","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220210.7\r\n- **Date Produced**: February 11, 2022 12:51:41 AM UTC\r\n- **Commit**: 78eaf78761027d225030be2b28aaf4e8bf392929\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22109.1 to 7.0.0-beta.22110.7][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22109.1 to 7.0.0-beta.22110.7][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22109.1 to 7.0.0-beta.22110.7][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22109.1 to 7.0.0-beta.22110.7][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22109.1 to 7.0.0-beta.22110.7][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22109.1 to 7.0.0-beta.22110.7][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/00b6cce...78eaf78\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6682)","Url":"https://github.com/dotnet/winforms/pull/6682","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6682)"},{"Id":"1132564549","IsPullRequest":false,"CreatedAt":"2022-02-11T12:57:41","Actor":"AmalRajUmapathySelvam","Number":"6681","RawContent":null,"Title":"Size of the control placed in toolstripcontainer is wrong in extended monitor when changing padding of toolstrip","State":"open","Body":"* .NET Core Version: \r\nNot tested.\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes. 4.6.1\r\n\r\n**Problem description:**\r\n\r\nWe have created an application with add-in express and extends the application to the external monitor with below mentioned screen resolution specifications. \r\n\r\nPrimary Monitor:\r\nDPI - 150\r\nScreen resolution - 1920*1080\r\n\r\nSecondary Monitor: (4K)\r\nDPI - 100\r\nScreen resolution - 1920*1080\r\n\r\nWe have changed the padding of the toolstrip with add-in and the issue occurs in external monitor. This issue not reproduced with primary monitor and with other screen resolutions. \r\n\r\nIn the below attached example, we have placed the MS DataGridView as content for ToolStripContainer.ContentControl and we believe the issue can be reproduced with any other controls. And seems sizing the child controls as per padding is improper with toolstrip and toolstripcontainer.\r\n\r\n**Expected behavior:**\r\nControl size should be proper as per the size of the ToolStripContainer.ContentControl.\r\n\r\n**Sample:**   -  [ToolstripPaddingIssue.zip](https://github.com/dotnet/winforms/files/8048723/ToolstripPaddingIssue.zip)\r\n\r\n**Minimal repro:**\r\n1) Use Microsoft Excel Add-in express.\r\n2) Run the application. (Launched in excel)\r\n3) Move to menu section and click \"Click here to change padding\" menu.\r\n4) And click on the ribbon button shown.\r\n5) Change the padding repeatedly through the dropdown available in form shown.\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6681","RelatedDescription":"Open issue \"Size of the control placed in toolstripcontainer is wrong in extended monitor when changing padding of toolstrip\" (#6681)"},{"Id":"1132096746","IsPullRequest":false,"CreatedAt":"2022-02-11T08:44:56","Actor":"giduac","Number":"6680","RawContent":null,"Title":"DataGridView: FirstDisplayedScrollingRowIndex property does not bring the last row into view with larger font sizes","State":"open","Body":"**.NET Core Version:** \r\nN/A\r\n\r\n**Have you experienced this same bug with .NET Framework?:** \r\n Yes: Reproduced on 4.8 & 5.0 \r\nPlatform: Win: 7SP1 / 8.1 / 10 / 11\r\n\r\n**Problem description:**\r\n`DataGridView.FirstDisplayedScrollingRowIndex = DataGridView.Rows.Count - 1`\r\nWhen the grid font size is made larger (usually starts around 13 points) the above call will not advance the grid fully to the end.\r\n\r\n**Expected behavior:**\r\nThe call should bring the last record fully into view.\r\n\r\n**Minimal repro:**\r\nSample program attached can be used to reproduce.\r\nFollowing these steps.\r\n1. Start the program\r\n2. Set the font size (initial size = 9, which works)\r\n3. If rows were created before click \"Clear\"\r\n4. Click \"Add Rows\"\r\n5. Click \"GO\" (should bring the last record into view)\r\n\r\nIt starts to go wrong with font-sizes from  13 and larger.\r\nIf the end is not reached \"GO\" can be clicked, multiple times. \r\nThe larger the font size the more often the need to click. But eventually the last row comes into view.\r\n\r\n[KDataGridViewScrollProblemStdOnlyNet50.zip](https://github.com/dotnet/winforms/files/8047146/KDataGridViewScrollProblemStdOnlyNet50.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6680","RelatedDescription":"Open issue \"DataGridView: FirstDisplayedScrollingRowIndex property does not bring the last row into view with larger font sizes\" (#6680)"},{"Id":"1131292998","IsPullRequest":true,"CreatedAt":"2022-02-11T00:12:57","Actor":"dreddy-work","Number":"6679","RawContent":null,"Title":"Fix index script","State":"closed","Body":"Fixing script in the github actions PR.\r\n\r\nrelated #6678 \r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6679)","Url":"https://github.com/dotnet/winforms/pull/6679","RelatedDescription":"Closed or merged PR \"Fix index script\" (#6679)"},{"Id":"1131105966","IsPullRequest":true,"CreatedAt":"2022-02-10T23:50:01","Actor":"dreddy-work","Number":"6678","RawContent":null,"Title":"Adding github action to backport PRs from main -> Release or release -> main","State":"closed","Body":"Enabling a github action on this repo to make it easy to port PR between main and release branches.  Once PR is up on any branch , following comment on the PR will create a backporting PR in the right branch.\r\n\r\nEx: \r\nPR on main branhc created and need to be ported back to release, need to tell bot with following command \r\n\r\n`/backport to <branch>`\r\n\r\n  i.e.  /backport to release/6.0 \r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6678)","Url":"https://github.com/dotnet/winforms/pull/6678","RelatedDescription":"Closed or merged PR \"Adding github action to backport PRs from main -> Release or release -> main\" (#6678)"},{"Id":"1130940508","IsPullRequest":true,"CreatedAt":"2022-02-10T21:52:07","Actor":"Tanya-Solyanik","Number":"6677","RawContent":null,"Title":"Removed redundant condition","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6677)","Url":"https://github.com/dotnet/winforms/pull/6677","RelatedDescription":"Closed or merged PR \"Removed redundant condition\" (#6677)"},{"Id":"1130638898","IsPullRequest":true,"CreatedAt":"2022-02-10T19:31:06","Actor":"gpetrou","Number":"6676","RawContent":null,"Title":"Enable nullability in ColorDialog","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in ColorDialog.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6676)","Url":"https://github.com/dotnet/winforms/pull/6676","RelatedDescription":"Closed or merged PR \"Enable nullability in ColorDialog\" (#6676)"},{"Id":"1130614643","IsPullRequest":true,"CreatedAt":"2022-02-10T18:19:52","Actor":"gpetrou","Number":"6675","RawContent":null,"Title":"Enable nullability in StatusStripAccessibleObject","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in StatusStripAccessibleObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6675)","Url":"https://github.com/dotnet/winforms/pull/6675","RelatedDescription":"Open PR \"Enable nullability in StatusStripAccessibleObject\" (#6675)"},{"Id":"1128860059","IsPullRequest":true,"CreatedAt":"2022-02-10T17:18:40","Actor":"gpetrou","Number":"6664","RawContent":null,"Title":"Enable nullability in Panel","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in Panel.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6664)","Url":"https://github.com/dotnet/winforms/pull/6664","RelatedDescription":"Closed or merged PR \"Enable nullability in Panel\" (#6664)"},{"Id":"1130325280","IsPullRequest":true,"CreatedAt":"2022-02-10T15:38:15","Actor":"jbhensley","Number":"6673","RawContent":null,"Title":"Fix ComboBox text not clearing on last Item removal","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #6621\r\n\r\n\r\n## Proposed changes\r\n\r\n`ComboBox.Text` does not clear when the last item is removed. This was tested on Win32 and confirmed to be native behavior. PR addresses by checking for last item removal and updating `Text` accordingly.\r\n\r\nIt should be noted that this likely goes back to the beginning of .NET, so this is a change to longstanding behavior. It does, however, seem to be correct when measured by the principle of least astonishment.\r\n\r\n~~Separate issue: existing behavior does not raise `TextChanged` or `SelectedIndexChanged` when `SelectedItem` is removed. Consideration should be given as to whether this should be changed.~~\r\n\r\nModified to raise events. Unit tests ensure that events are raised in the correct order and only raised once. \r\n\r\nThere is an edge which is also covered. `TextChanged` does not fire if changing between items with the same text. This includes adding an item with `string.Emtpy` as its value, selecting it, and then setting `SelectedIndex` to -1. To match that behavior, we ensure that `TextChanged` does not fire when `SelectedItem` is removed if `SelectedItem` is `string.Emtpy`.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nText will clear on last item removal, consistent with what it does when a non-last item is removed.\r\n\r\n## Regression? \r\n\r\n-  No\r\n\r\n## Risk\r\n\r\n- It is likely that apps have been designed to compensate for this already by clearing `Text` on last item removal in an event handler. That should not create a conflict\r\n- It is possible that apps exist which were designed to depend on this behavior, in which case it could be a breaking change. Admittedly, this would be a very odd dependency\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit tests added\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6673)","Url":"https://github.com/dotnet/winforms/pull/6673","RelatedDescription":"Open PR \"Fix ComboBox text not clearing on last Item removal\" (#6673)"},{"Id":"1130059971","IsPullRequest":true,"CreatedAt":"2022-02-10T13:54:11","Actor":"dotnet-maestro[bot]","Number":"6672","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220209.10\r\n- **Date Produced**: February 10, 2022 10:33:03 AM UTC\r\n- **Commit**: 2b862d43469a79368fa20413d44e3943524daa0b\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/c4c1c3a...2b862d4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6672)","Url":"https://github.com/dotnet/winforms/pull/6672","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6672)"},{"Id":"1130058460","IsPullRequest":true,"CreatedAt":"2022-02-10T13:53:15","Actor":"dotnet-maestro[bot]","Number":"6671","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220209.1\r\n- **Date Produced**: February 9, 2022 4:34:03 PM UTC\r\n- **Commit**: 00b6cce8983065a9cf9fb108a724f28ec44eaf75\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22108.1 to 7.0.0-beta.22109.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22108.1 to 7.0.0-beta.22109.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22108.1 to 7.0.0-beta.22109.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22108.1 to 7.0.0-beta.22109.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22108.1 to 7.0.0-beta.22109.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22108.1 to 7.0.0-beta.22109.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/dda61e4...00b6cce\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6671)","Url":"https://github.com/dotnet/winforms/pull/6671","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6671)"},{"Id":"1130038147","IsPullRequest":false,"CreatedAt":"2022-02-10T13:02:01","Actor":"hassaanmasood","Number":"6670","RawContent":null,"Title":"Winforms Controls total Redesign","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nWinforms controls look and feel does not align with Windows 11 and they look really really bad than ever before.\r\n \r\n**Describe the solution you'd like and alternatives you've considered**\r\n\r\nSince the introduction of WPF then UWP and now WinUI, we understand that WinForms is not on the priority list and thus is not updated regularly. But by now Microsoft should realize that many third-party app companies/devs are not willing to make a shift and a lot of apps still using WinForms Style Controls. Windows itself still has many screens and dialogs which is using old UI. \r\n\r\nI believe now is the time Microsoft and Dev Team at WinForms should start investing in a complete overhaul of Winforms Controls and align them with WinUI/Windows 11 look and feel as much as possible and also implement Dark and Light Theme for all controls. Resolving this has a lot of potential and a lot of apps will automatically start aligning to Windows 11 look and feel and it will be much much easier for Devs too.\r\n\r\nSorry but Microsoft Windows has long reigned and only taken advantage of the availability of much more apps on their platform compared to Mac and Linux. But it is very clear that MacOS and Linux provide much more consistent experiences in terms of UI and user experience. \r\n\r\nI understand that Microsoft and .Net Team has put a lot of effort and resources into WPF and UWP also but a better future plan would be:\r\n\r\n> Winforms Controls Overhaul for now and provide support till 2027 only.\r\n> Merge the Best of WinForms, WPF and UWP into WinUI. Use WinUI as long term UI framework and only add new features and improvements to it rather than introducing something new every few years.\r\n> Discard WPF and UWP in favour of WinUI. \r\n\r\nPlease consider something similar like this. There should be proper guidelines for UX/UI design and Apps not following them should be restricted Windows has become like Andriod where everyone is implementing their own UI completely forgetting about a good user experience. \r\n\r\nThe goal for Microsoft should be to make UX/UI consistent across Windows and Apps so Microsoft can retain and only increase its customer base in the long term.\r\n\r\n**Will this feature affect UI controls?**\r\nYes","Url":"https://github.com/dotnet/winforms/issues/6670","RelatedDescription":"Open issue \"Winforms Controls total Redesign\" (#6670)"},{"Id":"1130037195","IsPullRequest":true,"CreatedAt":"2022-02-10T13:01:37","Actor":"vladimir-krestov","Number":"6669","RawContent":null,"Title":"Fixing text pattern of a multiline text box","State":"open","Body":"Fixes #6661\r\n\r\n\r\n## Proposed changes\r\n\r\n- Rework `GetMultilineBoundingRectangles` method to:\r\n     + calculate correct rectangles\r\n     + make it simpler\r\n\r\n## Customer Impact\r\n\r\n- Now a user can see more correct text ranges in a muliline TextBox\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n- TextPattern doesn't show empty lines;\r\n- In RTL mode some text ranges are not shown:\r\n![image](https://user-images.githubusercontent.com/49272759/153413157-266b5196-af25-44bd-bbd9-23b4b28b5675.png)\r\n\r\n\r\n### After\r\n\r\n- UIA shows all text ranges correctly:\r\n![image](https://user-images.githubusercontent.com/49272759/153413179-123b82b2-4d74-493c-9be6-bda8aa8c86a1.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n- CTI\r\n- Unit tests\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n- Using Narrator and Isnpect\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- Windows 10\r\n- .NET 7.0.0-preview.2.22108.17\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6669)","Url":"https://github.com/dotnet/winforms/pull/6669","RelatedDescription":"Open PR \"Fixing text pattern of a multiline text box\" (#6669)"},{"Id":"1129314945","IsPullRequest":true,"CreatedAt":"2022-02-10T01:47:24","Actor":"RussKie","Number":"6668","RawContent":null,"Title":"Pin assembly versions to prevent revving those in servicing releases","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nRelates to #6663\r\n\r\n\r\n## Proposed changes\r\n\r\nPing assembly versions similar to https://github.com/dotnet/runtime/blob/bbc766a7c65716305919bc691d696b1e46fa6f62/eng/Versions.props#L14 and https://github.com/dotnet/aspnetcore/blob/c0575788ecadd6e5cfeb4eab635c13b5fd433d37/Directory.Build.targets#L88 to avoid revving assembly versions in servicing releases.\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6668)","Url":"https://github.com/dotnet/winforms/pull/6668","RelatedDescription":"Open PR \"Pin assembly versions to prevent revving those in servicing releases\" (#6668)"},{"Id":"1129300275","IsPullRequest":true,"CreatedAt":"2022-02-10T01:31:01","Actor":"RussKie","Number":"6667","RawContent":null,"Title":"Pin assembly versions to prevent revving those in servicing releases","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nResolves #6663\r\n\r\n\r\n## Proposed changes\r\n\r\n* Lock runtime and targeting pack assemblies at 6.0.2.0 so that any applications, libraries or NuGets built against 6.0.2 or later can work. \r\nThis assembly versions pinning is similar to https://github.com/dotnet/runtime/blob/bbc766a7c65716305919bc691d696b1e46fa6f62/eng/Versions.props#L14 and https://github.com/dotnet/aspnetcore/blob/c0575788ecadd6e5cfeb4eab635c13b5fd433d37/Directory.Build.targets#L88.\r\n* Add a validation step when we run packaging to verify that the assemblies we package into the transport package are correctly versioned, i.e., analyzers/generators are revved for every release for sxs, and those part of the ref pack are pinned to X.Y.2.0.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nCurrently Windows Forms applications built against 6.0.2 won't run on 6.0 GA or 6.0.1\r\nWith the fix applications, libraries or NuGets built against 6.0.2 or later can work. Any applications built on 6.0.2 or later that need to target 6.0.0 or 6.0.1 will need to use the workaround provided in https://github.com/dotnet/core/issues/7176. It is not ideal, but is believed to have a lesser impact than going back to 6.0.0.0 versions, and have 6.0.2 broken.\r\n\r\n## Regression? \r\n\r\n- Yes \r\n\r\n## Risk\r\n\r\n- Medium. With this fix we'll stop supporting the folks that compiled against 6.0.2 or later and target 6.0.0 or 6.0.1 without the workaround.\r\nIn general, since 6.0.1 and 6.0.2 are security releases, customers are encouraged to update to the latest version.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n6.0.1\r\n![image](https://user-images.githubusercontent.com/4403806/153317658-411d1444-8469-4907-9c7b-087e4cde7426.png)\r\n![image](https://user-images.githubusercontent.com/4403806/153317581-5c7b0409-4d39-4725-af5d-394173591f29.png)\r\n\r\n6.0.2\r\n![image](https://user-images.githubusercontent.com/4403806/153317450-b39ca98c-5a13-4db7-9dd0-f864dded6254.png)\r\n![image](https://user-images.githubusercontent.com/4403806/153317487-9ab16baf-708c-4caa-b8ef-16c527da7e55.png)\r\n\r\n### After\r\n\r\nA private built for this fix:\r\n![image](https://user-images.githubusercontent.com/4403806/153530590-bb37f0a6-e696-4a4f-9a3f-1f3a5a98a51e.png)\r\n![image](https://user-images.githubusercontent.com/4403806/153530627-22354c1a-32f2-4cc1-90f4-132ba1cef1c0.png)\r\n![image](https://user-images.githubusercontent.com/4403806/153530664-ecfaf89e-fcb9-457a-b74e-f496a11b975a.png)\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6667)","Url":"https://github.com/dotnet/winforms/pull/6667","RelatedDescription":"Open PR \"Pin assembly versions to prevent revving those in servicing releases\" (#6667)"},{"Id":"1129279773","IsPullRequest":false,"CreatedAt":"2022-02-10T01:06:50","Actor":"ak98","Number":"6666","RawContent":null,"Title":"SendKeys Grouping fails","State":"open","Body":"\r\n\r\n* .NET Core Version: \r\n6.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNO\r\n\r\n**Problem description:**\r\n\r\nSendKeys.Send(\"^(a)^(c)\") triggers exception.\r\n\r\nArgumentException\r\nException:SendKeys string '^(a)^(c)' is not valid.\r\n\r\n**Expected behavior:**\r\n Sends Ctrl-A then Ctrl-C\r\n\r\n**Minimal repro:**\r\nSendKeys.Send(\"^(a)^(c)\") \r\n","Url":"https://github.com/dotnet/winforms/issues/6666","RelatedDescription":"Open issue \"SendKeys Grouping fails\" (#6666)"},{"Id":"1129037293","IsPullRequest":true,"CreatedAt":"2022-02-09T21:28:08","Actor":"vseanreesermsft","Number":"6665","RawContent":null,"Title":"Internal merge 6.0 2022 02 08 1607","State":"closed","Body":"Merging internal commits to public repo and reverting previous squash commit.s\r\n\r\n**DO NOT SQUASH MERGE**\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6665)","Url":"https://github.com/dotnet/winforms/pull/6665","RelatedDescription":"Closed or merged PR \"Internal merge 6.0 2022 02 08 1607\" (#6665)"},{"Id":"1128792538","IsPullRequest":false,"CreatedAt":"2022-02-09T16:55:06","Actor":"EatonZ","Number":"6663","RawContent":null,"Title":"6.0.2 SDK update has broken WinForms apps","State":"open","Body":"ℹ️  **UPDATE:** [Workaround here for those who need it.](https://github.com/dotnet/core/issues/7176)\r\n\r\n. . .\r\n\r\nThere appears to be a critical problem with the new 6.0.2 update which makes apps compiled with it fail to start on machines running 6.0.1.\r\n\r\nTo reproduce, do the following:\r\n1. Visit Windows Update to update the runtime on your **dev machine**, and also update Visual Studio 2022 using Visual Studio Installer.\r\n2. On a **client/test machine**, install the 6.0.1 desktop runtime. [Direct Link](https://dotnetcli.azureedge.net/dotnet/WindowsDesktop/6.0.1/windowsdesktop-runtime-6.0.1-win-x64.exe)\r\n3. On your dev machine, create a new WinForms project, build it and copy the executable files to the client/test machine.\r\n4. Run it and it will not start. Event logs show the following:\r\n```\r\nApplication: WinFormsApp1.exe\r\nCoreCLR Version: 6.0.121.56705\r\n.NET Version: 6.0.1\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.IO.FileLoadException: Could not load file or assembly 'System.Windows.Forms, Version=6.0.2.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The located assembly's manifest definition does not match the assembly reference. (0x80131040)\r\nFile name: 'System.Windows.Forms, Version=6.0.2.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'\r\n   at WinFormsApp1.Program.Main()\r\n```\r\n\r\nThis problem did not happen on .NET 5. I was under the impression patch versions are generally compatible with each other, and I use `<RollForward>LatestPatch</RollForward>` in my real app, but even with that setting it still crashes.\r\n\r\nThis is a blocking issue for me because if I distribute an update for my app built on 6.0.2 and the client is still running 6.0.1, that will be bad if the app suddenly stops working.","Url":"https://github.com/dotnet/winforms/issues/6663","RelatedDescription":"Open issue \"6.0.2 SDK update has broken WinForms apps\" (#6663)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-02-15T03:30:30.9227381Z","RunDurationInMilliseconds":501}