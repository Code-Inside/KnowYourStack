{"Data":{"GitHub":{"Issues":[{"Id":"1460925425","IsPullRequest":false,"CreatedAt":"2022-11-23T03:23:56","Actor":"Olina-Zhang","Number":"8259","RawContent":null,"Title":"[HDPI] From the second row, DataGridView rows are not scaled well on 300% primary screen","State":"open","Body":"### .NET version\n\n.NET 8.0.100-alpha.1.22565.7\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, it also repro on .NET 6.0 & 7.0.\n\n### Issue description\n\nFrom the second row, DataGridView rows are not scaled well on High Dpi system setting when application is in SystemAware or PerMonitorV2 mode\r\n\r\nOn 300% primary screen:\r\n![image](https://user-images.githubusercontent.com/26474449/203461444-31c64093-398e-4b25-b521-8d2917110189.png)\r\n\r\nOn 175% primary screen:\r\n![image](https://user-images.githubusercontent.com/26474449/203461587-1c6c9b79-3260-44c0-b8b4-5e9390d158a5.png)\r\n\r\nOn 100% DPI:\r\n![image](https://user-images.githubusercontent.com/26474449/203463356-2af25584-8f41-4a11-8dfb-c8b0b736b237.png)\r\n\n\n### Steps to reproduce\n\nUse this sample application to run on High DPI system setting:\r\n[DataGridViewSample.zip](https://github.com/dotnet/winforms/files/10072643/DataGridViewSample.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/8259","RelatedDescription":"Open issue \"[HDPI] From the second row, DataGridView rows are not scaled well on 300% primary screen\" (#8259)"},{"Id":"1460910591","IsPullRequest":true,"CreatedAt":"2022-11-23T03:13:13","Actor":"elachlan","Number":"8258","RawContent":null,"Title":"Refactor `ToolboxItem` to remove `ArrayList`","State":"open","Body":"Related #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8258)","Url":"https://github.com/dotnet/winforms/pull/8258","RelatedDescription":"Open PR \"Refactor `ToolboxItem` to remove `ArrayList`\" (#8258)"},{"Id":"1460893662","IsPullRequest":false,"CreatedAt":"2022-11-23T03:00:46","Actor":"MelonWang1","Number":"8257","RawContent":null,"Title":"[Multi-Monitor][SystemAware] Resizing form1 appears shadow","State":"open","Body":"### .NET version\n\n8.0.100-alpha.1.22567.28\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, it also repro on .NET 6.0 & 7.0.\n\n### Issue description\n\nIn SystemAware mode, Form1 appears shadow When move VS from 300 primary screen to 100 secondary screen and resize form1.\r\n![11111111](https://user-images.githubusercontent.com/94418985/203458708-fda4a767-cd7a-4a6c-9c2a-d69058ff9700.gif)\r\n\n\n### Steps to reproduce\n\n1. Launch VS instance on 300% primary monitor.\r\n2. Create a winforms .net core project.\r\n3. Build and run.\r\n4. Move to 100% secondary monitor.\r\n5. Resize form1.\r\n\r\n**Actual result:**\r\nThe shadow appears.\r\n![Untitled](https://user-images.githubusercontent.com/94418985/203458664-ca5300a7-3905-41a1-8518-153548c7e989.png)\r\n\r\n**Expected result:**\r\nThe shadow should not appear.\r\n\r\n**More Info:**\r\n1. This issue also repro on .NET7.0, .NET6.0.\r\n2. This issue does not repro on framework project.\r\n3. This issue does not repro on moved VS from 100% primary to 300% secondary.","Url":"https://github.com/dotnet/winforms/issues/8257","RelatedDescription":"Open issue \"[Multi-Monitor][SystemAware] Resizing form1 appears shadow\" (#8257)"},{"Id":"1460889121","IsPullRequest":true,"CreatedAt":"2022-11-23T02:57:36","Actor":"elachlan","Number":"8256","RawContent":null,"Title":"Refactor `UndoEngine` to remove `ArrayList`/`HashTable`","State":"open","Body":"Related #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8256)","Url":"https://github.com/dotnet/winforms/pull/8256","RelatedDescription":"Open PR \"Refactor `UndoEngine` to remove `ArrayList`/`HashTable`\" (#8256)"},{"Id":"1460855736","IsPullRequest":true,"CreatedAt":"2022-11-23T02:34:06","Actor":"elachlan","Number":"8255","RawContent":null,"Title":"Refactor `KeysConverter` to remove `ArrayList`","State":"open","Body":"Related #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8255)","Url":"https://github.com/dotnet/winforms/pull/8255","RelatedDescription":"Open PR \"Refactor `KeysConverter` to remove `ArrayList`\" (#8255)"},{"Id":"1460834506","IsPullRequest":false,"CreatedAt":"2022-11-23T02:17:27","Actor":"Olina-Zhang","Number":"8254","RawContent":null,"Title":"[HDPI] The default Image Icon of DataGridView Image column is not scaled well on 300% primary screen","State":"open","Body":"### .NET version\n\n.NET 8.0.100-alpha.1.22565.7\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, it also repro on .NET 6.0 & 7.0.\n\n### Issue description\n\nThe default Image Icon of DataGridView Image columns is not scaled well on High Dpi system setting when application is in SystemAware or PerMonitorV2 mode\r\n\r\nOn 300% primary screen:\r\n![image](https://user-images.githubusercontent.com/26474449/203456895-79382b00-d577-495e-b183-626001ddca34.png)\r\n\r\nOn 175% primary screen:\r\n![image](https://user-images.githubusercontent.com/26474449/203456981-550f78d2-2d0a-496a-8b1c-72693352984f.png)\r\n\r\nOn 100% DPI:\r\n![image](https://user-images.githubusercontent.com/26474449/203457210-4411f771-6315-4f09-9660-895f2e612600.png)\r\n\n\n### Steps to reproduce\n\nUse this sample application to run on High DPI system setting:\r\n[DataGridViewSample.zip](https://github.com/dotnet/winforms/files/10072419/DataGridViewSample.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/8254","RelatedDescription":"Open issue \"[HDPI] The default Image Icon of DataGridView Image column is not scaled well on 300% primary screen\" (#8254)"},{"Id":"1460762079","IsPullRequest":true,"CreatedAt":"2022-11-23T00:39:57","Actor":"JeremyKuhne","Number":"8253","RawContent":null,"Title":"Add initial VB6 tests","State":"open","Body":"Adds a really simple VB6 control to write tests against.\r\n\r\nAdds utility code for handling COM classes straight from their host assembly.\r\n\r\nAdd a simple DynamicAxHost class to utilize these ComClass wrappers.\r\n\r\nAlso skip needless throwing and catching exceptions from the connection cookie setup in AxHost.\r\n\r\nNote that I've renamed the control from .ocx to .vb6 to avoid having it accidentally picked up by anything.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8253)","Url":"https://github.com/dotnet/winforms/pull/8253","RelatedDescription":"Open PR \"Add initial VB6 tests\" (#8253)"},{"Id":"1460743913","IsPullRequest":false,"CreatedAt":"2022-11-23T00:15:11","Actor":"dreddy-work","Number":"8252","RawContent":null,"Title":"[Tracking] Optimize code around parking windows in the WinForms runtime","State":"open","Body":"While enabling nullability in [this](https://github.com/dotnet/winforms/pull/6386), we noticed opportunity to optimize `ParkingWindow' and try avoiding inserting/caching null values. \r\nThis tracking issue created to capture that work and prioritize.","Url":"https://github.com/dotnet/winforms/issues/8252","RelatedDescription":"Open issue \"[Tracking] Optimize code around parking windows in the WinForms runtime\" (#8252)"},{"Id":"1459048133","IsPullRequest":true,"CreatedAt":"2022-11-22T19:16:55","Actor":"JeremyKuhne","Number":"8246","RawContent":null,"Title":"Fix COM TypeDescriptor SetValue","State":"closed","Body":"The main purpose of the change was to start adding type descriptor tests for our COM descriptor (which is used by System.ComponentModel). Discovered that SetValue was broken, so the title is such.\r\n\r\nThis adds a starting set of tests, refactors IPicture/Disp helpers into a shared location, and references the outputs from AxHosts.\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8246)","Url":"https://github.com/dotnet/winforms/pull/8246","RelatedDescription":"Closed or merged PR \"Fix COM TypeDescriptor SetValue\" (#8246)"},{"Id":"1460425233","IsPullRequest":true,"CreatedAt":"2022-11-22T19:15:06","Actor":"lonitra","Number":"8251","RawContent":null,"Title":"Add Serialization Tests for AxHost","State":"open","Body":"- Minor clean ups for `State` and `StateConverter`\r\n- Add serialization test for `AxHost` using `BinaryFormatter`\r\n- Add test for serializing `AxHost` using `StronglyTypedResourceBuilder`\r\n    - `StateConverter` was never hooked up properly so manually register `StateConverter` as the `TypeConverter` for `State`\r\n    - Fix `State` constructor utilized by `StateConverter` to not save the passed in stream since extra information to build the State is contained in it.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8251)","Url":"https://github.com/dotnet/winforms/pull/8251","RelatedDescription":"Open PR \"Add Serialization Tests for AxHost\" (#8251)"},{"Id":"1458773967","IsPullRequest":true,"CreatedAt":"2022-11-22T17:59:15","Actor":"elachlan","Number":"8243","RawContent":null,"Title":"refactor all remaining `== null` to `is null`","State":"closed","Body":"Refactors all remaining code to use `is null` instead of `== null` using [CSharpIsNull](https://github.com/AArnott/CSharpIsNull) analyzer code fix.\r\n\r\nRelated: https://github.com/dotnet/winforms/issues/3459\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8243)","Url":"https://github.com/dotnet/winforms/pull/8243","RelatedDescription":"Closed or merged PR \"refactor all remaining `== null` to `is null`\" (#8243)"},{"Id":"1459833398","IsPullRequest":true,"CreatedAt":"2022-11-22T17:51:13","Actor":"dotnet-maestro[bot]","Number":"8250","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221121.7\r\n- **Date Produced**: November 22, 2022 10:59:17 AM UTC\r\n- **Commit**: dd0ec9471dde6b6740ae6d9b504b64dec190b438\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22570.4 to 8.0.0-alpha.1.22571.7][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/9129083...dd0ec94\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8250)","Url":"https://github.com/dotnet/winforms/pull/8250","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8250)"},{"Id":"1457073609","IsPullRequest":true,"CreatedAt":"2022-11-22T17:25:05","Actor":"elachlan","Number":"8236","RawContent":null,"Title":"Refactor DataGridView to replace HashTable","State":"closed","Body":"Related: #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8236)","Url":"https://github.com/dotnet/winforms/pull/8236","RelatedDescription":"Closed or merged PR \"Refactor DataGridView to replace HashTable\" (#8236)"},{"Id":"1459709733","IsPullRequest":true,"CreatedAt":"2022-11-22T11:46:30","Actor":"v-elnovikova","Number":"8249","RawContent":null,"Title":"Added unit tests for \"AccessibleObject.FragmentNavigate\" method in ToolStrip-related classes","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #6094\r\n\r\n\r\n## Proposed changes\r\n\r\nAdded missing unit tests to check the method behavior in these classes:\r\n- ToolStripAccessibleObject\r\n- MenuStripAccessibleObject\r\n- StatusStripAccessibleObject\r\n- ToolStripItemAccessibleObject\r\n- ToolStripDropDownButtonAccessibleObject\r\n- ToolStripOverflowAccessibleObject\r\n- ToolStripOverflowButtonAccessibleObject\r\n\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET 7.0.0\r\n- Windows 11\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8249)","Url":"https://github.com/dotnet/winforms/pull/8249","RelatedDescription":"Open PR \"Added unit tests for \"AccessibleObject.FragmentNavigate\" method in ToolStrip-related classes\" (#8249)"},{"Id":"1459705306","IsPullRequest":true,"CreatedAt":"2022-11-22T11:43:17","Actor":"v-elnovikova","Number":"8248","RawContent":null,"Title":"Fixed FragmentNavigate issue in ToolStripAccessibleObject","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #8033\r\n\r\n\r\n## Proposed changes\r\n\r\n- Removed duplicate items reordering in GetChildFragment and GetChildFragmentIndex methods\r\n- Modified FragmentNavigate to return null if ToolStrip's handle is not created\r\n- Modified unit tests to properly follow handle creation\r\n\r\n\r\n## Screenshots\r\n\r\nBefore\r\n![before](https://user-images.githubusercontent.com/113603457/203341899-db7bd315-163b-4f3c-83fa-4b06be0682c7.png)\r\n\r\nAfter\r\n![after](https://user-images.githubusercontent.com/113603457/203341910-7ca6c5f7-0df9-4c35-aca4-80904dbc8f2c.png)\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8248)","Url":"https://github.com/dotnet/winforms/pull/8248","RelatedDescription":"Open PR \"Fixed FragmentNavigate issue in ToolStripAccessibleObject\" (#8248)"},{"Id":"1459475474","IsPullRequest":false,"CreatedAt":"2022-11-22T09:27:30","Actor":"Amy-Li03","Number":"8247","RawContent":null,"Title":"[PermonitorV2] [SystemAware] The default ImageIcon in ToolStrip is not scaled well on 300% primary screen with app created on 100% DPI","State":"open","Body":"### .NET version\r\n\r\n.NET 8.0.100-alpha.1.22565.7\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo, it also repro on .NET 6.0 & 7.0.\r\n\r\n### Issue description\r\n\r\nThe default ImageIcon in ToolStrip is smaller than Text on 300% primary screen with app created on 100% DPI under PermonitorV2/SystemAware modes.\r\n![image](https://user-images.githubusercontent.com/62929087/203281759-dc141213-5bef-4802-a7e3-27975323b15a.png)\r\n\r\nThe default ImageIcon in ToolStrip is larger than Text on 100% primary screen with app created on 300% DPI under DpiUnware/PermonitorV2/SystemAware modes.\r\n![image](https://user-images.githubusercontent.com/62929087/203277588-a3dc4298-e4d1-4f94-b359-8fe910488995.png)\r\n\r\n### Steps to reproduce\r\n\r\n1. Launch VS instance on 100% primary screen.\r\n2. Create a WinForms .NET core project.\r\n3. Add `<ApplicationHighDpiMode>PerMonitorV2</ApplicationHighDpiMode>` in csproj file.\r\n4. Drag and drop a ToolStrip to form designer.\r\n5. Then insert standard items for MenuStrip/ToolStrip via clicking ‘Insert Standard Items’ in controls’ Tasks panel.\r\n6. Close this project.\r\n7. Launch VS instance on 300% primary screen.\r\n8. Build and run.\r\n\r\nOr:\r\n1. Extract and open [TestApp.zip](https://github.com/dotnet/winforms/files/10066010/TestApp.zip) on 300% primary screen.\r\n2. Build and run it.\r\n\r\n**Actual result:**\r\nThe default ImageIcon in ToolStrip is smaller than Text on 300% primary screen.\r\n![image](https://user-images.githubusercontent.com/62929087/203281645-4d6623f1-0fb3-4d97-ae2b-4b21e4fc6e9c.png)\r\n\r\n**Expected result:**\r\nThe default ImageIcon in ToolStrip should be scaled well on 300% primary screen.\r\n![image](https://user-images.githubusercontent.com/62929087/203279604-0c37e71e-0711-4f49-adc3-4fadebd3aacd.png)\r\n\r\n**More info:**\r\n1. This issue repro on PermonitorV2/SystemAware modes when app created on 100% DPI and run app on 300% DPI and it doesn't repro on DpiUnware mode.\r\n2. This issue repro on DpiUnware/PermonitorV2/SystemAware modes when app created on 300% DPI and run app on 100% DPI.","Url":"https://github.com/dotnet/winforms/issues/8247","RelatedDescription":"Open issue \"[PermonitorV2] [SystemAware] The default ImageIcon in ToolStrip is not scaled well on 300% primary screen with app created on 100% DPI\" (#8247)"},{"Id":"1458770980","IsPullRequest":true,"CreatedAt":"2022-11-22T01:56:32","Actor":"elachlan","Number":"8242","RawContent":null,"Title":"refactor all remaining `!= null` to `is not null`","State":"closed","Body":"Refactors all remaining code to use `is not null` instead of `!= null` using [CSharpIsNull](https://github.com/AArnott/CSharpIsNull) analyzer code fix.\r\n\r\nRelated: #3459\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8242)","Url":"https://github.com/dotnet/winforms/pull/8242","RelatedDescription":"Closed or merged PR \"refactor all remaining `!= null` to `is not null`\" (#8242)"},{"Id":"1458822529","IsPullRequest":false,"CreatedAt":"2022-11-22T00:57:40","Actor":"dreddy-work","Number":"8245","RawContent":null,"Title":"Expect delayed/slow response during the holiday season (Nov and Dec)","State":"open","Body":"Some of the WinForms team members taking time off during the holiday season. Expect delayed/slow response on Issues and PRs during Thanksgiving and Christman holiday season.","Url":"https://github.com/dotnet/winforms/issues/8245","RelatedDescription":"Open issue \"Expect delayed/slow response during the holiday season (Nov and Dec)\" (#8245)"},{"Id":"1458818235","IsPullRequest":true,"CreatedAt":"2022-11-22T00:52:33","Actor":"elachlan","Number":"8244","RawContent":null,"Title":"Change CSIsNull to a warning","State":"open","Body":"Fixes #3459\r\n\r\nShould be checked after #8242 and #8243 have been merged.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8244)","Url":"https://github.com/dotnet/winforms/pull/8244","RelatedDescription":"Open PR \"Change CSIsNull to a warning\" (#8244)"},{"Id":"1457090759","IsPullRequest":true,"CreatedAt":"2022-11-21T23:13:46","Actor":"elachlan","Number":"8239","RawContent":null,"Title":"`System.Windows.Forms.Design` - Refactor `!= null` to `is not null`","State":"closed","Body":"Refactors `System.Windows.Forms.Design` to use `is not null` instead of `!= null` using [CSharpIsNull](https://github.com/AArnott/CSharpIsNull) analyzer code fix.\r\n\r\nRelated: #3459\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8239)","Url":"https://github.com/dotnet/winforms/pull/8239","RelatedDescription":"Closed or merged PR \"`System.Windows.Forms.Design` - Refactor `!= null` to `is not null`\" (#8239)"},{"Id":"1457084682","IsPullRequest":true,"CreatedAt":"2022-11-21T22:27:03","Actor":"elachlan","Number":"8237","RawContent":null,"Title":"Refactor MergedAttributeCollection to replace HashTable","State":"closed","Body":"Refactor MergedAttributeCollection to replace HashTable and enable nullability.\r\n\r\nRelated: #8143\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8237)","Url":"https://github.com/dotnet/winforms/pull/8237","RelatedDescription":"Closed or merged PR \"Refactor MergedAttributeCollection to replace HashTable\" (#8237)"},{"Id":"1456206717","IsPullRequest":true,"CreatedAt":"2022-11-21T20:54:23","Actor":"JeremyKuhne","Number":"8232","RawContent":null,"Title":"Clean up and null annotate Resx code","State":"closed","Body":"There are two commits here. The first cleans up the code, with particular attention to reducing the nesting by inverting if statements and returning out early.\r\n\r\nThe second null annotates all of types that weren't already annotated.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8232)","Url":"https://github.com/dotnet/winforms/pull/8232","RelatedDescription":"Closed or merged PR \"Clean up and null annotate Resx code\" (#8232)"},{"Id":"1455454552","IsPullRequest":true,"CreatedAt":"2022-11-21T18:40:18","Actor":"gpetrou","Number":"8230","RawContent":null,"Title":"Enable nullability in remaining ToolStripItem members","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in remaining ToolStripItem members.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8230)","Url":"https://github.com/dotnet/winforms/pull/8230","RelatedDescription":"Closed or merged PR \"Enable nullability in remaining ToolStripItem members\" (#8230)"},{"Id":"1457091719","IsPullRequest":true,"CreatedAt":"2022-11-21T18:33:48","Actor":"elachlan","Number":"8240","RawContent":null,"Title":"`System.Windows.Forms.Design` Refactor `== null` to `is null`","State":"closed","Body":"Refactors `System.Windows.Forms.Design` to use `is null` instead of `== null` using [CSharpIsNull](https://github.com/AArnott/CSharpIsNull) analyzer code fix.\r\n\r\nRelated: https://github.com/dotnet/winforms/issues/3459\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8240)","Url":"https://github.com/dotnet/winforms/pull/8240","RelatedDescription":"Closed or merged PR \"`System.Windows.Forms.Design` Refactor `== null` to `is null`\" (#8240)"},{"Id":"1457089161","IsPullRequest":true,"CreatedAt":"2022-11-21T18:25:11","Actor":"elachlan","Number":"8238","RawContent":null,"Title":"`System.Windows.Forms` Refactor `!= null` to `is not null`","State":"closed","Body":"Refactors `System.Windows.Forms` to use `is not null` instead of `!= null` using [CSharpIsNull](https://github.com/AArnott/CSharpIsNull) analyzer code fix.\r\n\r\nRelated: #3459\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8238)","Url":"https://github.com/dotnet/winforms/pull/8238","RelatedDescription":"Closed or merged PR \"`System.Windows.Forms` Refactor `!= null` to `is not null`\" (#8238)"},{"Id":"1456244107","IsPullRequest":true,"CreatedAt":"2022-11-21T17:06:35","Actor":"gpetrou","Number":"8233","RawContent":null,"Title":"Make currentComponent nullable in ImageListUtils.GetImageListProperty","State":"closed","Body":"## Proposed changes\r\n\r\n- Make currentComponent nullable in ImageListUtils.GetImageListProperty.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8233)","Url":"https://github.com/dotnet/winforms/pull/8233","RelatedDescription":"Closed or merged PR \"Make currentComponent nullable in ImageListUtils.GetImageListProperty\" (#8233)"},{"Id":"1456246679","IsPullRequest":true,"CreatedAt":"2022-11-21T17:06:19","Actor":"gpetrou","Number":"8234","RawContent":null,"Title":"Make component nullable in AboutBoxUITypeEditor","State":"closed","Body":"## Proposed changes\r\n\r\n- Make component nullable in AboutBoxUITypeEditor.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8234)","Url":"https://github.com/dotnet/winforms/pull/8234","RelatedDescription":"Closed or merged PR \"Make component nullable in AboutBoxUITypeEditor\" (#8234)"},{"Id":"1457903885","IsPullRequest":false,"CreatedAt":"2022-11-21T12:56:03","Actor":"alizorlu","Number":"8241","RawContent":null,"Title":"While defining the class in the form class, the form object becomes a class object","State":"open","Body":"### Environment\n\nVS Version v17.2.5\n\n### .NET version\n\n.Net 6.0\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nNo\n\n### Issue description\n\nHi Everyone\r\nWhen a new class object is created within the form object that can be used as needed, the form designer completely transforms into a simple class object.\r\n\r\n![1](https://user-images.githubusercontent.com/24724027/203059838-212479d8-4137-410c-923a-f1518bf0c9eb.PNG)\r\n![2](https://user-images.githubusercontent.com/24724027/203059844-bb524a76-53d3-40cc-9b9e-3c772ddc9f13.PNG)\r\n,\r\n\r\n\n\n### Steps to reproduce\n\n\r\nA simple example as below is blocking the form designer\r\n\r\n```\r\nnamespace FormDesignBlock\r\n{\r\n\r\n internal class OptionConfig\r\n    {\r\n        public long ScanRestartTime { get; set; }\r\n        public long RequestMaxTimeout { get; set; }\r\n\r\n        public long ConcurrencyMaxRequest { get; set; }\r\n        public long SiteMinuteRange { get; set; }\r\n        public long PerSiteMaxItem { get; set; }\r\n\r\n        public OptionConfig GetConfig()\r\n        {\r\n\r\n            long.TryParse(ConfigurationManager.AppSettings.Get(\"ScanRestartTime\").ToString(), out long _ScanRestartTime);\r\n            long.TryParse(ConfigurationManager.AppSettings.Get(\"RequestMaxTimeout\").ToString(), out long _RequestMaxTimeout);\r\n            long.TryParse(ConfigurationManager.AppSettings.Get(\"ConcurrencyMaxRequest\").ToString(), out long _ConcurrencyMaxRequest);\r\n            long.TryParse(ConfigurationManager.AppSettings.Get(\"SiteMinuteRange\").ToString(), out long _SiteMinuteRange);\r\n\r\n            return new OptionConfig()\r\n            {\r\n                ConcurrencyMaxRequest = _ConcurrencyMaxRequest,\r\n                RequestMaxTimeout = _RequestMaxTimeout,\r\n                ScanRestartTime = _ScanRestartTime,\r\n                SiteMinuteRange = _SiteMinuteRange\r\n            };\r\n        }\r\n    }\r\n    public partial class frmOption : Form\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nIn the last case, the problem does not occur when you edit it like this\r\n\r\n\r\n```\r\nnamespace NotAProblem\r\n{\r\n   \r\n    public partial class frmOption : Form\r\n    {\r\n        internal class OptionConfig\r\n        {\r\n            public long ScanRestartTime { get; set; }\r\n            public long RequestMaxTimeout { get; set; }\r\n\r\n            public long ConcurrencyMaxRequest { get; set; }\r\n            public long SiteMinuteRange { get; set; }\r\n            public long PerSiteMaxItem { get; set; }\r\n\r\n            public OptionConfig GetConfig()\r\n            {\r\n\r\n                long.TryParse(ConfigurationManager.AppSettings.Get(\"ScanRestartTime\").ToString(), out long _ScanRestartTime);\r\n                long.TryParse(ConfigurationManager.AppSettings.Get(\"RequestMaxTimeout\").ToString(), out long _RequestMaxTimeout);\r\n                long.TryParse(ConfigurationManager.AppSettings.Get(\"ConcurrencyMaxRequest\").ToString(), out long _ConcurrencyMaxRequest);\r\n                long.TryParse(ConfigurationManager.AppSettings.Get(\"SiteMinuteRange\").ToString(), out long _SiteMinuteRange);\r\n\r\n                return new OptionConfig()\r\n                {\r\n                    ConcurrencyMaxRequest = _ConcurrencyMaxRequest,\r\n                    RequestMaxTimeout = _RequestMaxTimeout,\r\n                    ScanRestartTime = _ScanRestartTime,\r\n                    SiteMinuteRange = _SiteMinuteRange\r\n                };\r\n            }\r\n        }\r\n}\r\n}\r\n```\n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8241","RelatedDescription":"Open issue \"While defining the class in the form class, the form object becomes a class object\" (#8241)"},{"Id":"1456558453","IsPullRequest":true,"CreatedAt":"2022-11-19T16:08:11","Actor":"Jericho","Number":"8235","RawContent":null,"Title":"Refactor BindingContext to use Dictionary<TKey, TValue> instead of Hashtable and List<T> instead of ArrayList","State":"open","Body":"Related: #8143 and #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8235)","Url":"https://github.com/dotnet/winforms/pull/8235","RelatedDescription":"Open PR \"Refactor BindingContext to use Dictionary<TKey, TValue> instead of Hashtable and List<T> instead of ArrayList\" (#8235)"},{"Id":"1455560146","IsPullRequest":false,"CreatedAt":"2022-11-18T17:58:26","Actor":"Jericho","Number":"8231","RawContent":null,"Title":"Cache is never populated in ComponentDesigner.ShadowPropertyCollection.cs","State":"open","Body":"### .NET version\n\n8.0.0-alpha.1.22559.2\r\n\r\nHowever, the situation I am reporting is not tied to a specific .NET version.\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nno\n\n### Issue description\n\nThe ShadowPropertyCollection class contains a private field called `_descriptors` which, if I understand the original intent correctly, is supposed to be used as a cache of `PropertyDescriptor`. The flow is supposed to be like this:\r\n- the first-time a given property descriptor is requested, the value is calculated in the `private PropertyDescriptor GetShadowedPropertyDescriptor(string propertyName)` private method\r\n- this value is added to the cache\r\n- if the same property descriptor is subsequently requested the cached value is returned\r\n\r\nHowever, what I observe when reading the code of this private method is that the calculated value is NOT added to the cache and therefore it is re-calculated each time the same descriptor is requested.\r\n\r\n@elachlan, @dreddy-work and myself had a [discussion](https://github.com/dotnet/winforms/pull/8222#pullrequestreview-1185033949) about this and we concluded that it made more sense to raise a separate issue about this rather than simply fix it as part of #8222.\r\n\r\nIf the conclusion is that we want to fix the flawed logic, I will be happy to volunteer a PR.\n\n### Steps to reproduce\n\nTo be clear, the current logic works without problem and returns the expected result. It's just that we pay a performance penalty if the same descriptor is requested multiple times.","Url":"https://github.com/dotnet/winforms/issues/8231","RelatedDescription":"Open issue \"Cache is never populated in ComponentDesigner.ShadowPropertyCollection.cs\" (#8231)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-11-23T03:30:36.3994905Z","RunDurationInMilliseconds":529}