{"Data":{"GitHub":{"Issues":[{"Id":"1457091719","IsPullRequest":true,"CreatedAt":"2022-11-20T23:38:33","Actor":"elachlan","Number":"8240","RawContent":null,"Title":"`System.Windows.Forms.Design` Refactor `== null` to `is null`","State":"open","Body":"Refactors `System.Windows.Forms.Design` to use `is null` instead of `== null` using [CSharpIsNull](https://github.com/AArnott/CSharpIsNull) analyzer code fix.\r\n\r\nRelated: https://github.com/dotnet/winforms/issues/3459\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8240)","Url":"https://github.com/dotnet/winforms/pull/8240","RelatedDescription":"Open PR \"`System.Windows.Forms.Design` Refactor `== null` to `is null`\" (#8240)"},{"Id":"1457090759","IsPullRequest":true,"CreatedAt":"2022-11-20T23:35:15","Actor":"elachlan","Number":"8239","RawContent":null,"Title":"`System.Windows.Forms.Design` - Refactor `!= null` to `is not null`","State":"open","Body":"Refactors `System.Windows.Forms.Design` to use `is not null` instead of `!= null` using [CSharpIsNull](https://github.com/AArnott/CSharpIsNull) analyzer code fix.\r\n\r\nRelated: #3459\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8239)","Url":"https://github.com/dotnet/winforms/pull/8239","RelatedDescription":"Open PR \"`System.Windows.Forms.Design` - Refactor `!= null` to `is not null`\" (#8239)"},{"Id":"1457089161","IsPullRequest":true,"CreatedAt":"2022-11-20T23:29:54","Actor":"elachlan","Number":"8238","RawContent":null,"Title":"`System.Windows.Forms` Refactor `!= null` to `is not null`","State":"open","Body":"Refactors `System.Windows.Forms` to use `is not null` instead of `!= null` using [CSharpIsNull](https://github.com/AArnott/CSharpIsNull) analyzer code fix.\r\n\r\nRelated: #3459\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8238)","Url":"https://github.com/dotnet/winforms/pull/8238","RelatedDescription":"Open PR \"`System.Windows.Forms` Refactor `!= null` to `is not null`\" (#8238)"},{"Id":"1457084682","IsPullRequest":true,"CreatedAt":"2022-11-20T23:16:38","Actor":"elachlan","Number":"8237","RawContent":null,"Title":"Refactor MergedAttributeCollection to replace HashTable","State":"open","Body":"Refactor MergedAttributeCollection to replace HashTable and enable nullability.\r\n\r\nRelated: #8143\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8237)","Url":"https://github.com/dotnet/winforms/pull/8237","RelatedDescription":"Open PR \"Refactor MergedAttributeCollection to replace HashTable\" (#8237)"},{"Id":"1457073609","IsPullRequest":true,"CreatedAt":"2022-11-20T22:38:46","Actor":"elachlan","Number":"8236","RawContent":null,"Title":"Refactor DataGridView to replace HashTable","State":"open","Body":"Related: #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8236)","Url":"https://github.com/dotnet/winforms/pull/8236","RelatedDescription":"Open PR \"Refactor DataGridView to replace HashTable\" (#8236)"},{"Id":"1456558453","IsPullRequest":true,"CreatedAt":"2022-11-19T16:08:11","Actor":"Jericho","Number":"8235","RawContent":null,"Title":"Refactor BindingContext to use Dictionary<TKey, TValue> instead of Hashtable and List<T> instead of ArrayList","State":"open","Body":"Related: #8143 and #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8235)","Url":"https://github.com/dotnet/winforms/pull/8235","RelatedDescription":"Open PR \"Refactor BindingContext to use Dictionary<TKey, TValue> instead of Hashtable and List<T> instead of ArrayList\" (#8235)"},{"Id":"1456246679","IsPullRequest":true,"CreatedAt":"2022-11-19T06:00:05","Actor":"gpetrou","Number":"8234","RawContent":null,"Title":"Make component nullable in AboutBoxUITypeEditor","State":"open","Body":"## Proposed changes\r\n\r\n- Make component nullable in AboutBoxUITypeEditor.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8234)","Url":"https://github.com/dotnet/winforms/pull/8234","RelatedDescription":"Open PR \"Make component nullable in AboutBoxUITypeEditor\" (#8234)"},{"Id":"1456244107","IsPullRequest":true,"CreatedAt":"2022-11-19T05:54:57","Actor":"gpetrou","Number":"8233","RawContent":null,"Title":"Make currentComponent nullable in ImageListUtils.GetImageListProperty","State":"open","Body":"## Proposed changes\r\n\r\n- Make currentComponent nullable in ImageListUtils.GetImageListProperty.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8233)","Url":"https://github.com/dotnet/winforms/pull/8233","RelatedDescription":"Open PR \"Make currentComponent nullable in ImageListUtils.GetImageListProperty\" (#8233)"},{"Id":"1456206717","IsPullRequest":true,"CreatedAt":"2022-11-19T04:39:14","Actor":"JeremyKuhne","Number":"8232","RawContent":null,"Title":"Clean up and null annotate Resx code","State":"open","Body":"There are two commits here. The first cleans up the code, with particular attention to reducing the nesting by inverting if statements and returning out early.\r\n\r\nThe second null annotates all of types that weren't already annotated.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8232)","Url":"https://github.com/dotnet/winforms/pull/8232","RelatedDescription":"Open PR \"Clean up and null annotate Resx code\" (#8232)"},{"Id":"1452446367","IsPullRequest":true,"CreatedAt":"2022-11-19T00:52:17","Actor":"elachlan","Number":"8211","RawContent":null,"Title":"Convert more `ObjectDisposedExceptions` to use `ThrowIf`","State":"closed","Body":"Fixes #8184\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8211)","Url":"https://github.com/dotnet/winforms/pull/8211","RelatedDescription":"Closed or merged PR \"Convert more `ObjectDisposedExceptions` to use `ThrowIf`\" (#8211)"},{"Id":"1452538145","IsPullRequest":true,"CreatedAt":"2022-11-18T21:48:10","Actor":"lonitra","Number":"8216","RawContent":null,"Title":"Update MediaPlayer Test","State":"closed","Body":"Remove manually added dlls and add core project that targets Framework to reference MediaPlayer dlls. This added project will be used to add in and write tests other ActiveX controls.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8216)","Url":"https://github.com/dotnet/winforms/pull/8216","RelatedDescription":"Closed or merged PR \"Update MediaPlayer Test\" (#8216)"},{"Id":"1455560146","IsPullRequest":false,"CreatedAt":"2022-11-18T17:58:26","Actor":"Jericho","Number":"8231","RawContent":null,"Title":"Cache is never populated in ComponentDesigner.ShadowPropertyCollection.cs","State":"open","Body":"### .NET version\n\n8.0.0-alpha.1.22559.2\r\n\r\nHowever, the situation I am reporting is not tied to a specific .NET version.\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nno\n\n### Issue description\n\nThe ShadowPropertyCollection class contains a private field called `_descriptors` which, if I understand the original intent correctly, is supposed to be used as a cache of `PropertyDescriptor`. The flow is supposed to be like this:\r\n- the first-time a given property descriptor is requested, the value is calculated in the `private PropertyDescriptor GetShadowedPropertyDescriptor(string propertyName)` private method\r\n- this value is added to the cache\r\n- if the same property descriptor is subsequently requested the cached value is returned\r\n\r\nHowever, what I observe when reading the code of this private method is that the calculated value is NOT added to the cache and therefore it is re-calculated each time the same descriptor is requested.\r\n\r\n@elachlan, @dreddy-work and myself had a [discussion](https://github.com/dotnet/winforms/pull/8222#pullrequestreview-1185033949) about this and we concluded that it made more sense to raise a separate issue about this rather than simply fix it as part of #8222.\r\n\r\nIf the conclusion is that we want to fix the flawed logic, I will be happy to volunteer a PR.\n\n### Steps to reproduce\n\nTo be clear, the current logic works without problem and returns the expected result. It's just that we pay a performance penalty if the same descriptor is requested multiple times.","Url":"https://github.com/dotnet/winforms/issues/8231","RelatedDescription":"Open issue \"Cache is never populated in ComponentDesigner.ShadowPropertyCollection.cs\" (#8231)"},{"Id":"1452491809","IsPullRequest":true,"CreatedAt":"2022-11-18T17:56:58","Actor":"elachlan","Number":"8213","RawContent":null,"Title":"Refactor AssemblyNamesTypeResolutionService to replace HashTable","State":"closed","Body":"Replaced the Hashtables, enabled nullability, removed `AssemblyName.CodeBase` call.\r\n\r\nRelated: #8143, #7308\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8213)","Url":"https://github.com/dotnet/winforms/pull/8213","RelatedDescription":"Closed or merged PR \"Refactor AssemblyNamesTypeResolutionService to replace HashTable\" (#8213)"},{"Id":"1452532317","IsPullRequest":true,"CreatedAt":"2022-11-18T17:35:19","Actor":"Jericho","Number":"8215","RawContent":null,"Title":"Refactor UndoEngine to use List<T> instead of ArrayList","State":"closed","Body":"Related: #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8215)","Url":"https://github.com/dotnet/winforms/pull/8215","RelatedDescription":"Closed or merged PR \"Refactor UndoEngine to use List<T> instead of ArrayList\" (#8215)"},{"Id":"1454134312","IsPullRequest":true,"CreatedAt":"2022-11-18T17:35:06","Actor":"elachlan","Number":"8227","RawContent":null,"Title":"Refactor ToolTip to replace HashTable","State":"closed","Body":"Related: #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8227)","Url":"https://github.com/dotnet/winforms/pull/8227","RelatedDescription":"Closed or merged PR \"Refactor ToolTip to replace HashTable\" (#8227)"},{"Id":"1454119650","IsPullRequest":true,"CreatedAt":"2022-11-18T17:34:54","Actor":"elachlan","Number":"8226","RawContent":null,"Title":"Refactor WebBrowserContainer to replace HashTable and Enable Nullability","State":"closed","Body":"Refactored WebBrowserContainer to replace HashTable and Enable Nullability.\r\n\r\nRelated to #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8226)","Url":"https://github.com/dotnet/winforms/pull/8226","RelatedDescription":"Closed or merged PR \"Refactor WebBrowserContainer to replace HashTable and Enable Nullability\" (#8226)"},{"Id":"1452511393","IsPullRequest":true,"CreatedAt":"2022-11-18T17:34:37","Actor":"Jericho","Number":"8214","RawContent":null,"Title":"Refactor CodeDomComponentSerializationService to use List<T> instead of ArrayList","State":"closed","Body":"Related: #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8214)","Url":"https://github.com/dotnet/winforms/pull/8214","RelatedDescription":"Closed or merged PR \"Refactor CodeDomComponentSerializationService to use List<T> instead of ArrayList\" (#8214)"},{"Id":"1455454552","IsPullRequest":true,"CreatedAt":"2022-11-18T16:46:52","Actor":"gpetrou","Number":"8230","RawContent":null,"Title":"Enable nullability in remaining ToolStripItem members","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in remaining ToolStripItem members.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8230)","Url":"https://github.com/dotnet/winforms/pull/8230","RelatedDescription":"Open PR \"Enable nullability in remaining ToolStripItem members\" (#8230)"},{"Id":"1455083585","IsPullRequest":true,"CreatedAt":"2022-11-18T13:02:28","Actor":"dotnet-maestro[bot]","Number":"8229","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221119.4\r\n- **Date Produced**: November 20, 2022 6:38:52 AM UTC\r\n- **Commit**: 5c420f1aa78455c803f6d6b17eb4543ad728461c\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22559.2 to 8.0.0-alpha.1.22569.4][3]\r\n\r\n[3]: https://github.com/dotnet/runtime/compare/dd7fdb7...5c420f1\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8229)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/8229","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/runtime\" (#8229)"},{"Id":"1454020929","IsPullRequest":true,"CreatedAt":"2022-11-18T05:56:44","Actor":"JeremyKuhne","Number":"8225","RawContent":null,"Title":"Take the latest drop of CsWin32","State":"closed","Body":"Take the latest drop of CsWin32.\r\n\r\n- OLE_HANDLE is now defined\r\n- VARIANT_BOOL is now defined\r\n- COM structs now implement a stable Guid and interface\r\n- Some COM getters and setters have turned into properties\r\n\r\nCleaned up a few suggestion messages in affected files.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8225)","Url":"https://github.com/dotnet/winforms/pull/8225","RelatedDescription":"Closed or merged PR \"Take the latest drop of CsWin32\" (#8225)"},{"Id":"1454344216","IsPullRequest":false,"CreatedAt":"2022-11-18T02:45:07","Actor":"John-Qiao","Number":"8228","RawContent":null,"Title":"[HDPI] Anchors of user control don't work in form designer when scaling on high DPI ","State":"open","Body":"### .NET version\n\n17.5.0 Preview 2.0 [33115.401.main]\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo\n\n### Issue description\n\n**Actual result:**\r\nAnchors of user control don't work in form designer on 300% HDPI monitor.\r\n![Actual](https://user-images.githubusercontent.com/45864985/202604771-e644619c-6974-46a9-8924-54c5a0f27cdc.png)\r\n\r\n**Expected result:**\r\nAnchors of user control should work in form designer on 300% HDPI monitor, like that work on 100% monitor.\r\n![Expected](https://user-images.githubusercontent.com/45864985/202604798-f85ea35b-eb1a-454c-96f8-9becdc1ad683.png)\r\n\n\n### Steps to reproduce\n\n1. Launch the [ControlScalingBug.zip](https://github.com/dotnet/winforms/files/10037240/ControlScalingBug.zip) sample app on 300% primary monitor.\r\n2. Clean and rebuild project.\r\n3. In Solution Explorer, double click FrmBad.cs to open form designer.\r\n4. Observe the usercontrol in it.","Url":"https://github.com/dotnet/winforms/issues/8228","RelatedDescription":"Open issue \"[HDPI] Anchors of user control don't work in form designer when scaling on high DPI \" (#8228)"},{"Id":"1453834387","IsPullRequest":true,"CreatedAt":"2022-11-18T00:25:19","Actor":"Jericho","Number":"8221","RawContent":null,"Title":"Refactor ComponentDesigner to use Dictionary<TKey, TValue> instead of Hashtable","State":"closed","Body":"Related: #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8221)","Url":"https://github.com/dotnet/winforms/pull/8221","RelatedDescription":"Closed or merged PR \"Refactor ComponentDesigner to use Dictionary<TKey, TValue> instead of Hashtable\" (#8221)"},{"Id":"1453547052","IsPullRequest":false,"CreatedAt":"2022-11-17T20:27:04","Actor":"dmitrii-drobotov","Number":"8218","RawContent":null,"Title":"NVDA doesn't switch focus back to ComboBox after its dropdown is closed","State":"closed","Body":"### .NET version\n\n.NET 7\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nAfter expanding the ComboBox and selecting value in dropdown, NVDA still keeps focus on the dropdown and doesn't switch back to the ComboBox edit field. As a result, when changing ComboBox value by arrows, NVDA doesn't announce it.\r\n\r\nIt was originally found in https://github.com/dotnet/winforms/issues/7763 comments, and there is more information with NVDA logs and recordings.\n\n### Steps to reproduce\n\n1. Launch NVDA screen reader\r\n2. Expand a combo box with keyboard (alt + down shortcut)\r\n3. Select an element from dropdown list, press Enter or Esc to close the dropdown — NVDA highlight rectangle still stays on the dropdown item\r\n4. Use up/down arrows to change selected element — NVDA is not announcing the change","Url":"https://github.com/dotnet/winforms/issues/8218","RelatedDescription":"Closed issue \"NVDA doesn't switch focus back to ComboBox after its dropdown is closed\" (#8218)"},{"Id":"1453804062","IsPullRequest":true,"CreatedAt":"2022-11-17T20:27:03","Actor":"dmitrii-drobotov","Number":"8220","RawContent":null,"Title":"Add MSAA focus event on ComboBox dropdown close","State":"closed","Body":"Fixes #8218\r\n\r\n## Proposed changes\r\n\r\n- Add MSAA focus event on ComboBox dropdown close. This event lets NVDA correctly switch focus from dropdown to ComboBox edit field when the dropdown is closed. NVDA recognizes ComboBox as IAccessible object, therefore it ignores existing UIA focus events.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- NVDA will announce value change by arrows after the dropdown was closed\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\nTest using NVDA screen reader. Scenario: a form with a ComboBox having items \"1\", \"2\" and \"3\", focus is set to ComboBox.\r\n\r\nSteps:\r\n1. Press Alt + Down: expand ComboBox\r\n2. Press Down: select item \"1\"\r\n3. Press Enter: close dropdown\r\n4. Press Down: change selection to item \"2\"\r\n5. Press Down: change selection to item \"3\"\r\n\r\n### Before\r\n\r\nNVDA speech output:\r\n\r\n> combo box  collapsed\r\n> expanded\r\n> 1\r\n> list\r\n> 1\r\n\r\nNo announcement of value change by arrows.\r\n\r\nNVDA event log: [nvda-log-before.log](https://github.com/dotnet/winforms/files/10034358/nvda-log-before.log), main point — NVDA `loseFocus` event for list item and `gainFocus` event for ComboBox are **not** present after closing dropdown.\r\n\r\nNVDA focus highlight behavior:\r\n\r\n![A gif showing that NVDA highlight rectangle stays on the dropdown list item even after it was closed](https://user-images.githubusercontent.com/102954094/202523917-cfd5a8a6-84d5-450b-9055-6dfeb7d4a788.gif)\r\n\r\n### After\r\n\r\nNVDA speech output:\r\n\r\n> combo box  collapsed\r\n> expanded\r\n> 1\r\n> list\r\n> 1\r\n> combo box  1  collapsed\r\n> 2\r\n> 3\r\n\r\nThere is additional announcement of ComboBox content on close, including \"collapsed\" state, and when value is changed by arrows it is also announced.\r\n\r\nNVDA event log: [nvda-log-after.log](https://github.com/dotnet/winforms/files/10034395/nvda-log-after.log), main point — NVDA `loseFocus` event for list item and `gainFocus` event for ComboBox are present after closing dropdown.\r\n\r\nNVDA focus highlight behavior:\r\n\r\n![A gif showing that NVDA highlight rectangle is correctly switched back to ComboBox after dropdown was closed](https://user-images.githubusercontent.com/102954094/202526245-fbf93211-1063-4755-a15a-99303f53340b.gif)\r\n\r\nAlso tested with Narrator — everything works as expected before and after the changes.\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET 8.0.100-alpha.1.22565.7\r\n- Windows 11\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8220)","Url":"https://github.com/dotnet/winforms/pull/8220","RelatedDescription":"Closed or merged PR \"Add MSAA focus event on ComboBox dropdown close\" (#8220)"},{"Id":"1453919573","IsPullRequest":false,"CreatedAt":"2022-11-17T20:10:11","Actor":"runfoapp[bot]","Number":"8224","RawContent":null,"Title":"Flaky test: cursorconvertertests.cursorconverter_getstandardvalues_invoke_returnsexpected","State":"closed","Body":"<!-- runfo report start -->\r\nRunfo Tracking Issue: [Flaky test: cursorconvertertests.cursorconverter_getstandardvalues_invoke_returnsexpected](https://runfo.azurewebsites.net/tracking/issue/442)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n|[85587](https://dev.azure.com/dnceng-public/public/_build/results?buildId=85587)|[dotnet-winforms CI](https://dnceng-public.visualstudio.com/public/_build?definitionId=76)|[PR 8206](https://github.com/dotnet/winforms/pull/8206)|Windows_x86-xunit|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|0|1|1|\r\n\r\n<!-- runfo report end -->\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/8224","RelatedDescription":"Closed issue \"Flaky test: cursorconvertertests.cursorconverter_getstandardvalues_invoke_returnsexpected\" (#8224)"},{"Id":"1453919539","IsPullRequest":false,"CreatedAt":"2022-11-17T20:08:50","Actor":"runfoapp[bot]","Number":"8223","RawContent":null,"Title":"Flaky test: cursorconvertertests.cursorconverter_getstandardvalues_invoke_returnsexpected","State":"open","Body":"<!-- runfo report start -->\r\nRunfo Tracking Issue: [Flaky test: cursorconvertertests.cursorconverter_getstandardvalues_invoke_returnsexpected](https://runfo.azurewebsites.net/tracking/issue/441)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n|[85587](https://dev.azure.com/dnceng-public/public/_build/results?buildId=85587)|[dotnet-winforms CI](https://dnceng-public.visualstudio.com/public/_build?definitionId=76)|[PR 8206](https://github.com/dotnet/winforms/pull/8206)|Windows_x86-xunit|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|0|1|1|\r\n\r\n<!-- runfo report end -->\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/8223","RelatedDescription":"Open issue \"Flaky test: cursorconvertertests.cursorconverter_getstandardvalues_invoke_returnsexpected\" (#8223)"},{"Id":"1453910168","IsPullRequest":true,"CreatedAt":"2022-11-17T20:01:55","Actor":"Jericho","Number":"8222","RawContent":null,"Title":"Refactor ComponentDesigner.ShadowPropertyCollection to use Dictionary<TKey, TValue> instead of Hashtable","State":"open","Body":"Related: #8143\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8222)","Url":"https://github.com/dotnet/winforms/pull/8222","RelatedDescription":"Open PR \"Refactor ComponentDesigner.ShadowPropertyCollection to use Dictionary<TKey, TValue> instead of Hashtable\" (#8222)"},{"Id":"1453661179","IsPullRequest":false,"CreatedAt":"2022-11-17T16:47:22","Actor":"paul1956","Number":"8219","RawContent":null,"Title":"Need for complete (OOP) custom control template (VB)","State":"open","Body":"### Environment\n\n.Net 7\n\n### .NET version\n\nEverything Core\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nFramework\n\n### Issue description\n\nWhen I create a new custom control (in VB and I assume C#) the code created is identical to Framework and nothing is created for the OOP parts. The template should include everything necessary to the OOP designer.\n\n### Steps to reproduce\n\nN/A\n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8219","RelatedDescription":"Open issue \"Need for complete (OOP) custom control template (VB)\" (#8219)"},{"Id":"1452758958","IsPullRequest":false,"CreatedAt":"2022-11-17T05:56:36","Actor":"NikitaSemenovAkvelon","Number":"8217","RawContent":null,"Title":"Unifying an argument in the `ReleaseUiaProvider` method to `IHandle<HWND>`.","State":"open","Body":"Replace the type of the `handle` parameter from `IntPtr` to `IHandle<HWND>` in the Control.ReleaseUiaProvider method and its overrides. \r\n\r\n        Suggestion - consider unifying argument in this method to `nint` in the next PR.\r\n\r\n_Originally posted by @Tanya-Solyanik in https://github.com/dotnet/winforms/pull/7349#discussion_r1023472589_\r\n 📓 - modified bug title and body per @elachlan suggestion     ","Url":"https://github.com/dotnet/winforms/issues/8217","RelatedDescription":"Open issue \"Unifying an argument in the `ReleaseUiaProvider` method to `IHandle<HWND>`.\" (#8217)"},{"Id":"1452453206","IsPullRequest":true,"CreatedAt":"2022-11-16T23:42:12","Actor":"Jericho","Number":"8212","RawContent":null,"Title":"Refactor TableLayoutStyleCollection to use List<TableLayoutStyle> instead of ArrayList","State":"open","Body":"Related: #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8212)","Url":"https://github.com/dotnet/winforms/pull/8212","RelatedDescription":"Open PR \"Refactor TableLayoutStyleCollection to use List<TableLayoutStyle> instead of ArrayList\" (#8212)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-11-21T03:30:32.3896095Z","RunDurationInMilliseconds":553}