{"Data":{"GitHub":{"Issues":[{"Id":"1175783564","IsPullRequest":false,"CreatedAt":"2022-03-21T18:32:16","Actor":"janseris","Number":"6882","RawContent":null,"Title":"Allow using ApplicationConfiguration when the project is not runnable","State":"open","Body":"### Is your feature request related to a problem? Please describe\r\n\r\nHello,\r\n\r\ntoday I came across the new feature of WinForms in .NET 6 - ApplicationConfiguration  which is great. It allows configuring the UI of the application directly in project settings.\r\n\r\nI have a Windows Forms Application which uses backend with EF Core 6 etc. \r\nThere are multiple layers. \r\nDue to this, the application should consume IServiceProvider which provides the services, yet, not depend on Data Access Layer.\r\nDependency from Windows Forms application to Data Access Layer is created when singleton services are configured in the Wndows Forms application.\r\n\r\nBecause of this, I created a \"Launcher\" project which initializes the IServiceProvider and then passes it to the Windows Forms application Main method as an argument.\r\nThere is an issue when the Windows Forms application is not runnable, the new .NET 6 ApplicationConfiguration object disappears.\r\n![image](https://user-images.githubusercontent.com/64279914/159339936-e505993f-3d92-4ea4-af8c-08b86ec0ac8d.png)\r\n\r\n\r\nI need to run the WindowsFormsApplication as a class library from the launcher but at the same time, preserve ApplicationConfiguration which allows configuring Windows Forms properties in project settings.\r\n\r\n![image](https://user-images.githubusercontent.com/64279914/159340409-ae20cb4e-9050-4695-b5e8-f90353c52a15.png)\r\n\r\n\r\nIs that possible and if not what would be a workaround?\r\n\r\nNote: ApplicationContext is a custom class which needs to be used in UserControls because they don't allow constructor injection when they are wired into a Forms or other UserControls using the designer.\r\n![image](https://user-images.githubusercontent.com/64279914/159340833-b14628d9-825e-4654-870f-8d7ba2d67bef.png)\r\n![image](https://user-images.githubusercontent.com/64279914/159341079-544639bf-fb70-4008-bfd8-9f726dff98e0.png)\r\n\r\n\r\n\r\nThis is the proposed architecture and in this architecture, the Windows Forms GUI project is not directly executable because it depends on a IServiceProvider provided by the Launcher.\r\n\r\nDiagram with dependencies below:\r\nNote: the API layer contains interfaces for services and the Service layer implement these interfaces.\r\nleft: old architecture\r\nright: new architecture which cannot be used \r\n\r\n![winforms launcher](https://user-images.githubusercontent.com/64279914/159340512-d73d0240-d934-46ec-adc1-4f2dedc94025.png)\r\n\r\n\r\nThank you\r\n\r\n### Describe the solution you'd like and alternatives you've considered\r\n\r\nApplicationConfiguration  can be used in a WinForms project which is not runnable.\r\n\r\n### Will this feature affect UI controls?\r\n\r\nNo","Url":"https://github.com/dotnet/winforms/issues/6882","RelatedDescription":"Open issue \"Allow using ApplicationConfiguration when the project is not runnable\" (#6882)"},{"Id":"1175725883","IsPullRequest":false,"CreatedAt":"2022-03-21T17:39:48","Actor":"StuAG","Number":"6881","RawContent":null,"Title":"Closing an old WinForm affects ToolStrip ImageLists in a new Winform ","State":"open","Body":"### .NET version\n\n.Net Core 6.0.200\r\n\r\n\r\n\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nFor our WinForms Application, we have a number of global classes which are used between various forms. One of which is for ToolStrips where we store a global ImageList class, which is then loaded to each ToolStrip that is created on a form. This is to ensure only one ImageList needs to be created and icons are kept common between the ToolStrips we use throughout the application.\r\n\r\nHowever, we have found that when changing forms (by calling .Show() on the new form and .Close() straight after on the old form), it appeared to set the ImageList properties to empty in the ToolStrips on the new form, meaning none of the images would show on the ToolStrip. After debugging and stepping through every part of the code that may have cause the property to set to null, I found that the .Close() call on the old form was setting the ImageList on the ToolStrips to empty.\r\n\r\nThe forms and the code behind them were not changed at all when converting the project from .Net Framework to .Net Core. This only seems to affect the .Net Core project.\r\n\r\nI've created an example project with 2 identical forms, both having a tool strip with a single item and a button to open another form. The button image shows on Form1, and on Form2 when you open that, however the next time you click the button to switch forms, the image is no longer there.\r\n\r\n[ImageListExample.zip](https://github.com/dotnet/winforms/files/8317886/ImageListExample.zip)\r\n\r\nNot sure why this works on Framework and not Core. I have been able to get around the issue by loading the global ImageList each time rather than setting it at program start, but it's an extra processing step which could potentially lead to (albeit minor) slowdowns.\n\n### Steps to reproduce\n\n- Run the attached project\r\n- Click button1 on Form1, notice the toolstrip at the top of Form1 and Form2 have an image (just a black square)\r\n- Click button1 on Form2, notice the toolstrip no longer has an image displaying","Url":"https://github.com/dotnet/winforms/issues/6881","RelatedDescription":"Open issue \"Closing an old WinForm affects ToolStrip ImageLists in a new Winform \" (#6881)"},{"Id":"1175672006","IsPullRequest":true,"CreatedAt":"2022-03-21T17:00:14","Actor":"gpetrou","Number":"6880","RawContent":null,"Title":"Enable nullability in DataGridViewComboBoxEditingControlAccessibleObject","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in DataGridViewComboBoxEditingControlAccessibleObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6880)","Url":"https://github.com/dotnet/winforms/pull/6880","RelatedDescription":"Open PR \"Enable nullability in DataGridViewComboBoxEditingControlAccessibleObject\" (#6880)"},{"Id":"1174913959","IsPullRequest":true,"CreatedAt":"2022-03-21T06:40:30","Actor":"gpetrou","Number":"6879","RawContent":null,"Title":"Enable nullability in ConnectionPointCookie","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in ConnectionPointCookie.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6879)","Url":"https://github.com/dotnet/winforms/pull/6879","RelatedDescription":"Closed or merged PR \"Enable nullability in ConnectionPointCookie\" (#6879)"},{"Id":"1174219366","IsPullRequest":true,"CreatedAt":"2022-03-20T21:09:30","Actor":"gpetrou","Number":"6875","RawContent":null,"Title":"Enable nullability in PropertiesTab","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in PropertiesTab.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6875)","Url":"https://github.com/dotnet/winforms/pull/6875","RelatedDescription":"Closed or merged PR \"Enable nullability in PropertiesTab\" (#6875)"},{"Id":"1174193867","IsPullRequest":true,"CreatedAt":"2022-03-20T04:15:07","Actor":"gpetrou","Number":"6871","RawContent":null,"Title":"Use ThrowIfFailed extension method where possible","State":"closed","Body":"## Proposed changes\r\n\r\n- Use ThrowIfFailed extension method where possible.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6871)","Url":"https://github.com/dotnet/winforms/pull/6871","RelatedDescription":"Closed or merged PR \"Use ThrowIfFailed extension method where possible\" (#6871)"},{"Id":"1174292214","IsPullRequest":true,"CreatedAt":"2022-03-19T15:39:58","Actor":"kirsan31","Number":"6878","RawContent":null,"Title":"Empty finalizers removed.","State":"open","Body":"Fixes #6858\r\n\r\n\r\n## Proposed changes\r\nRemove unnecessary empty finalizers.\r\n\r\n- [ResXResourceReader](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Resources/ResXResourceReader.cs#L194)\r\n- [ResXResourceWriter](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Resources/ResXResourceWriter.cs#L549)\r\n- [ApplicationContext](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Windows/Forms/ApplicationContext.cs#L91)\r\n- [DataGridViewBand](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Windows/Forms/DataGridViewBand.cs#L817)\r\n- [DataGridViewCell](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Windows/Forms/DataGridViewCell.cs#L1313)\r\n- [HtmlShim](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Windows/Forms/HtmlShim.cs#L107)\r\n- [HtmlShimManager](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Windows/Forms/HtmlShimManager.cs#L229)\r\n- [FeedbackRectangle](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Windows/Forms/ToolStripPanel.FeedbackRectangle.cs#L55)\r\n\r\n## Customer Impact\r\nGC will be more faster - overall improve performance (most impact on `DataGridView`).\r\nSimple `DataGridView` app, updating (replacing) `DataSource` every 1 sec with 10k unshared rows.\r\n\r\n![image](https://user-images.githubusercontent.com/17767561/159126815-c4fee2d4-c41c-4fbe-870e-24f1d730d874.png)\r\n~20sec measure time.\r\n\r\nLeft before, right -  after:\r\n![image](https://user-images.githubusercontent.com/17767561/159127155-948b23ee-424e-401b-8f84-9027eb4d834c.png)\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/17767561/159127229-97a488ca-e0f2-48fd-a2fb-db0ed7adafcd.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/17767561/159127211-77b10655-14e6-40c1-b740-691fed26615e.png)\r\n\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n  We have a _problem_ here: some of this finalizers are **public** api:\r\n  - `~ResXResourceReader()`\r\n  - `~ResXResourceWriter()`\r\n  - `~ApplicationContext()`\r\n  - `~DataGridViewCell()`\r\n  - `~DataGridViewBand()` (absent in PublicAPI.Shipped.txt)\r\n\r\nTheoretically if some one had subclass this classes with real unmanaged resources, they may not implement their own finalizer but relay on fact that finalizer of base class will call `Dispose(false)`. And in this case it will be a breaking change 😔\r\nSo, in the end we can safety remove finalizers only in `HtmlShimManager`, `FeedbackRectangle`. `HtmlShim` is a question here - all his 3 child have `Marshal.FinalReleaseComObject` in Dispose, but only `HtmlElementShim` do it unconditionally in all cases:\r\n https://github.com/dotnet/winforms/blob/2e9abddc2bab0c22430ae62d4a348ed6ffef329b/src/System.Windows.Forms/src/System/Windows/Forms/HtmlElement.HtmlElementShim.cs#L134-L143\r\nhttps://github.com/dotnet/winforms/blob/2e9abddc2bab0c22430ae62d4a348ed6ffef329b/src/System.Windows.Forms/src/System/Windows/Forms/HtmlDocument.HtmlDocumentShim.cs#L112-L124\r\nhttps://github.com/dotnet/winforms/blob/2e9abddc2bab0c22430ae62d4a348ed6ffef329b/src/System.Windows.Forms/src/System/Windows/Forms/HtmlWindow.HtmlWindowShim.cs#L103-L115\r\n<br/>\r\n\r\nDuring investigation I found 2 [runtime](https://github.com/dotnet/runtime) types (**heavily** used in WinForms), that have same problem (in fact, there are many more):\r\n- `System.ComponentModel.Component` (public api)\r\n- `System.ComponentModel.Container`  (public api)\r\n\r\nThe most important question is what to do with the public api? As you can see, in case of `DataGridView`, **the benefit is very significant**. And if do such a braking change is not an option than we will need to rise https://github.com/dotnet/winforms/issues/6859 priority...<br/><br/><br/>\r\n\r\nP.S. Spent a few hours to run the application on the main branch - without effect 😥 Latest `dotnet-sdk-7.0.100-preview.3.22167.1-win-x64.exe` sdk is broken - it's need `7.0.0-preview.3.22158.1` to launch (no framework installed 😁) and with second available `dotnet-sdk-7.0.100-preview.2.22156.6-win-x64.exe`: \r\n![image](https://user-images.githubusercontent.com/17767561/159127784-f2a01cfa-818d-4214-8831-fc3bbf5763a7.png)\r\nSo, had to test on 6.0 branch...\r\nI think that [debug](https://github.com/dotnet/winforms/blob/main/docs/debugging.md) doc mast be updated with clarification on this (debug apps with changes in main branch):\r\n- you need to install preview sdk (**exact** (must update dynamically?) version and where to get it)\r\n- set preview sdk in VS settings\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6878)","Url":"https://github.com/dotnet/winforms/pull/6878","RelatedDescription":"Open PR \"Empty finalizers removed.\" (#6878)"},{"Id":"1174251242","IsPullRequest":true,"CreatedAt":"2022-03-19T12:44:48","Actor":"dotnet-maestro[bot]","Number":"6876","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220318.2\r\n- **Date Produced**: March 18, 2022 11:42:47 PM UTC\r\n- **Commit**: bafd55901b50d6fc3507c8ed96a7777fcca1796f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/251034e...bafd559\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6876)","Url":"https://github.com/dotnet/winforms/pull/6876","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6876)"},{"Id":"1174251404","IsPullRequest":true,"CreatedAt":"2022-03-19T12:10:29","Actor":"dotnet-maestro[bot]","Number":"6877","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220321.1\r\n- **Date Produced**: March 21, 2022 10:42:09 AM UTC\r\n- **Commit**: eb51b02b158c3ff71a1ec7eac8a211d1d464c1a5\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Text.Json**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22167.8 to 7.0.0-preview.3.22171.1][3]\r\n\r\n[3]: https://github.com/dotnet/runtime/compare/5371203...eb51b02\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6877)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/6877","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/runtime\" (#6877)"},{"Id":"1174216943","IsPullRequest":true,"CreatedAt":"2022-03-19T09:09:42","Actor":"gpetrou","Number":"6874","RawContent":null,"Title":"Enable nullability in MdiWindowDialog","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in MdiWindowDialog.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6874)","Url":"https://github.com/dotnet/winforms/pull/6874","RelatedDescription":"Open PR \"Enable nullability in MdiWindowDialog\" (#6874)"},{"Id":"1174204761","IsPullRequest":true,"CreatedAt":"2022-03-19T07:59:14","Actor":"gpetrou","Number":"6873","RawContent":null,"Title":"Enable nullability in CheckedListBox","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in CheckedListBox.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6873)","Url":"https://github.com/dotnet/winforms/pull/6873","RelatedDescription":"Open PR \"Enable nullability in CheckedListBox\" (#6873)"},{"Id":"1174198078","IsPullRequest":true,"CreatedAt":"2022-03-19T07:17:56","Actor":"gpetrou","Number":"6872","RawContent":null,"Title":"Enable nullability in TextBox","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in TextBox.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6872)","Url":"https://github.com/dotnet/winforms/pull/6872","RelatedDescription":"Open PR \"Enable nullability in TextBox\" (#6872)"},{"Id":"1173822153","IsPullRequest":true,"CreatedAt":"2022-03-18T21:44:24","Actor":"gpetrou","Number":"6868","RawContent":null,"Title":"Enable nullability in CheckBox","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in CheckBox.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6868)","Url":"https://github.com/dotnet/winforms/pull/6868","RelatedDescription":"Closed or merged PR \"Enable nullability in CheckBox\" (#6868)"},{"Id":"1173585533","IsPullRequest":true,"CreatedAt":"2022-03-18T21:37:39","Actor":"kant2002","Number":"6867","RawContent":null,"Title":"Remove publishing TRX files from public CI","State":"closed","Body":"There no TRX files produced during tests runs anywhere.\r\nPractically this is does not affects anything (<1sec), buy whole idea \"to have step which do nothing\" seems to be off.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6867)","Url":"https://github.com/dotnet/winforms/pull/6867","RelatedDescription":"Closed or merged PR \"Remove publishing TRX files from public CI\" (#6867)"},{"Id":"1173963692","IsPullRequest":true,"CreatedAt":"2022-03-18T19:42:22","Actor":"gpetrou","Number":"6870","RawContent":null,"Title":"Enable nullability in FontDialog","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in FontDialog.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6870)","Url":"https://github.com/dotnet/winforms/pull/6870","RelatedDescription":"Open PR \"Enable nullability in FontDialog\" (#6870)"},{"Id":"1173932557","IsPullRequest":false,"CreatedAt":"2022-03-18T19:05:38","Actor":"janseris","Number":"6869","RawContent":null,"Title":"Cannot search in properties","State":"open","Body":"### Environment\r\n\r\nVS 2022 (17.1.1)\r\n\r\n### .NET version\r\n\r\n.NET 6\r\n\r\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\r\n\r\n.NET Framework 4.8\r\n\r\n### Issue description\r\n\r\nsearch bar in control properties is not present\r\n\r\n### Steps to reproduce\r\n\r\nopen Windows Forms designer, click F4 to show properties, select any designable control, search bar will be visible which allows to quickly find properties by substring\r\n- this is especially needed when using advanced controls with a lot of properties\r\n\r\n### Diagnostics\r\n\r\n_No response_","Url":"https://github.com/dotnet/winforms/issues/6869","RelatedDescription":"Open issue \"Cannot search in properties\" (#6869)"},{"Id":"1173519809","IsPullRequest":true,"CreatedAt":"2022-03-18T17:48:00","Actor":"dotnet-maestro[bot]","Number":"6864","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220317.4\r\n- **Date Produced**: March 17, 2022 10:58:04 PM UTC\r\n- **Commit**: 251034e7687335886c3774a0138a8584a782b0eb\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/c90e2d9...251034e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6864)","Url":"https://github.com/dotnet/winforms/pull/6864","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6864)"},{"Id":"1173521316","IsPullRequest":true,"CreatedAt":"2022-03-18T17:24:35","Actor":"dotnet-maestro[bot]","Number":"6865","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220317.8\r\n- **Date Produced**: March 18, 2022 8:32:30 AM UTC\r\n- **Commit**: 5371203d5820a21922357e954e8c43eb4b76fd1d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22167.1 to 7.0.0-preview.3.22167.8][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/05cb7f5...5371203\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6865)","Url":"https://github.com/dotnet/winforms/pull/6865","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6865)"},{"Id":"1173544943","IsPullRequest":true,"CreatedAt":"2022-03-18T12:35:13","Actor":"kant2002","Number":"6866","RawContent":null,"Title":"Remove not used interfaces","State":"open","Body":"- IOmNavigator and IHTMLScreen do not used\r\n- IMallocSpy belongs to test project and as such moved there\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6866)","Url":"https://github.com/dotnet/winforms/pull/6866","RelatedDescription":"Open PR \"Remove not used interfaces\" (#6866)"},{"Id":"1173370337","IsPullRequest":true,"CreatedAt":"2022-03-18T10:21:05","Actor":"kant2002","Number":"6862","RawContent":null,"Title":"Pedantically construct paths for XML files","State":"closed","Body":"Without these changes in binlog I see paths with `\\\\/` which is distraction and Explorer and a lot of other apps do not like paths like this.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6862)","Url":"https://github.com/dotnet/winforms/pull/6862","RelatedDescription":"Closed or merged PR \"Pedantically construct paths for XML files\" (#6862)"},{"Id":"1173416844","IsPullRequest":true,"CreatedAt":"2022-03-18T10:12:36","Actor":"SergeySmirnov-Akvelon","Number":"6863","RawContent":null,"Title":"Fixing  UIA tree for ToolStripDropDownMenu ","State":"open","Body":"Fixes #6763\r\n\r\n\r\n## Proposed changes\r\n- The issue is reproduced because we don't actually have interaction between the `ToolStripButtons` (`ToolStripSplitButton`, `ToolStripDropDownButton`, `ToolStripMenuItem`, `ToolStripOverflowButton`) and the `ToolStripDropDownMenu`  of those `ToolStripButtons`.\r\n\r\n- Added logic for interacting `ToolStripButtons`with their `ToolStripDropDownMenus` and `ToolStripButtons`with parent `ToolStripDropDownMenu`.\r\n\r\n- Added unit tests\r\n\r\n## Customer Impact\r\n**Before fix:**\r\n![image](https://user-images.githubusercontent.com/23376742/158980700-a0f62800-3d05-4f59-882b-6f4e08fb42bf.png)\r\n\r\n**After fix:**\r\n![image](https://user-images.githubusercontent.com/23376742/158980617-e403db2b-5873-4654-86e3-299d4a6eb86f.png)\r\n\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- CTI team\r\n- Unit tests\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Inspect\r\n- Accessibility Insights\r\n- Narrator\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19044.1466]\r\n- .NET Core SKD: 7.0.0-preview.3.22167.1\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6863)","Url":"https://github.com/dotnet/winforms/pull/6863","RelatedDescription":"Open PR \"Fixing  UIA tree for ToolStripDropDownMenu \" (#6863)"},{"Id":"1173078197","IsPullRequest":true,"CreatedAt":"2022-03-18T02:13:49","Actor":"RussKie","Number":"6861","RawContent":null,"Title":"Update intellisense","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6861)","Url":"https://github.com/dotnet/winforms/pull/6861","RelatedDescription":"Closed or merged PR \"Update intellisense\" (#6861)"},{"Id":"1173002144","IsPullRequest":false,"CreatedAt":"2022-03-17T23:00:29","Actor":"Tragen","Number":"6860","RawContent":null,"Title":"User and GDI objects memory leak","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version:\r\n5.0.406 and 6.0.201\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\nUser and GDI objects are leaked in certain scenarios.\r\n\r\n**Expected behavior:**\r\nThe memory should be cleaned up correctly even without Dispose, latest when the GC was running once.\r\n\r\n**Minimal repro:**\r\nCreate a new project with Windows Forms.\r\nCreate a second form and add MenuStrip or ToolStrips. No problems with simple buttons.\r\nIf you show the second form from the first form with a button click with\r\n```\r\nForm2 f;\r\nf = new Form2();\r\nf.ShowDialog();\r\n``` \r\nand you close it, you can see in the Task Manager the User and GDI objects go up every time you show the second window but it doesn't go back to the original value. The more often you load the form and close it, the more objects leak.\r\nGC.Collect(); doesn't work to clean up the memory.\r\nThis doesn't happen if you call Dispose explicitly\r\n```\r\nForm2 f;\r\nf = new Form2();\r\nf.ShowDialog();\r\nf.Dispose();\r\n```\r\nor by using using\r\n```\r\nusing ( Form2 f2 = new Form2() )\r\n{\r\n    f2.ShowDialog();\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/6860","RelatedDescription":"Closed issue \"User and GDI objects memory leak\" (#6860)"},{"Id":"1172570566","IsPullRequest":false,"CreatedAt":"2022-03-17T16:40:52","Actor":"kirsan31","Number":"6859","RawContent":null,"Title":"DataGridView not dispose old data on DataSource change","State":"open","Body":"* .NET Core Version: all up to 7.0 p2\r\n\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n\r\n**Problem description:**\r\nAs I mentioned in https://github.com/dotnet/winforms/issues/6858 `DataGridView` not dispose old data on `DataSource` change. This is lead to 2 problems:\r\n1. All this stuff are going to finalization query because we have unnecessary finalizer here #6858.\r\n2. If we have a `ContextMenuStrip` bound to Cell/Column/Row we will have a memory leak. `DataGridView` with 3 columns and `ContextMenuStrip` bound to 1000 rows, result of DS refresh:\r\n![image](https://user-images.githubusercontent.com/17767561/158846287-aebb7710-09c2-45f5-8428-6f4ebe9812cd.png)\r\n\r\n\r\n\r\n**Expected behavior:**\r\nOld data must be property disposed. Probably in `DataGridView.RefreshColumnsAndRows()` (in `DataGridView.Methods.cs`)\r\n\r\n**Minimal repro:**\r\n[DataGridViewLeak.zip](https://github.com/dotnet/winforms/files/8288127/DataGridViewLeak.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/6859","RelatedDescription":"Open issue \"DataGridView not dispose old data on DataSource change\" (#6859)"},{"Id":"1172426987","IsPullRequest":false,"CreatedAt":"2022-03-17T14:11:07","Actor":"kirsan31","Number":"6858","RawContent":null,"Title":"Empty finalizers","State":"open","Body":"* .NET Core Version: _7.0 now_\r\n\r\n* Have you experienced this same bug with .NET Framework?: _probably yes_\r\n\r\n**Problem description:**\r\n\r\nList of empty finalizers through `Dispose(false)` that doing nothing:\r\n- [ResXResourceReader](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Resources/ResXResourceReader.cs#L194)\r\n- [ResXResourceWriter](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Resources/ResXResourceWriter.cs#L549)\r\n- [ApplicationContext](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Windows/Forms/ApplicationContext.cs#L91)\r\n- [DataGridViewBand](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Windows/Forms/DataGridViewBand.cs#L817)\r\n- [DataGridViewCell](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Windows/Forms/DataGridViewCell.cs#L1313)\r\n- [HtmlShim](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Windows/Forms/HtmlShim.cs#L107)\r\n- [HtmlShimManager](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Windows/Forms/HtmlShimManager.cs#L229)\r\n- [FeedbackRectangle](https://github.com/dotnet/winforms/blob/55e1755b579395e7e22fecf340905c79ccfa9b1a/src/System.Windows.Forms/src/System/Windows/Forms/ToolStripPanel.FeedbackRectangle.cs#L55)\r\n\r\n**Expected behavior:**\r\nEmpty finalizers must be removed.\r\n\r\nStumbled upon this by setting `DataGridView.DataSource` - old rows/columns/cells are not properly disposed (this is another issue  and I have a strong feeling that with `ContextMenuStrip` we will have a memory leak) and ending up in finalization query...","Url":"https://github.com/dotnet/winforms/issues/6858","RelatedDescription":"Open issue \"Empty finalizers\" (#6858)"},{"Id":"1172298067","IsPullRequest":true,"CreatedAt":"2022-03-17T12:50:13","Actor":"dotnet-maestro[bot]","Number":"6856","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220316.1\r\n- **Date Produced**: March 16, 2022 4:58:30 PM UTC\r\n- **Commit**: c90e2d9f3d3e2b471a078f949f2a2fea6af2627d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/81001b4...c90e2d9\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6856)","Url":"https://github.com/dotnet/winforms/pull/6856","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6856)"},{"Id":"1172299038","IsPullRequest":true,"CreatedAt":"2022-03-17T12:46:15","Actor":"dotnet-maestro[bot]","Number":"6857","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220317.1\r\n- **Date Produced**: March 17, 2022 10:19:51 AM UTC\r\n- **Commit**: 05cb7f5a6eefbcd0fbab3bb5924c07b188d12501\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/a5f3f96...05cb7f5\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6857)","Url":"https://github.com/dotnet/winforms/pull/6857","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6857)"},{"Id":"1171141160","IsPullRequest":false,"CreatedAt":"2022-03-16T14:58:22","Actor":"lukos","Number":"6854","RawContent":null,"Title":"Cannot run dotnet core WinForms app on .Net 6.0","State":"open","Body":"* .NET Core Version: \r\n6.0.3\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo but not directly comparable.\r\n\r\n**Problem description:**\r\nCreated a new .Net 6.0 winforms app. Built the published content with:\r\n\r\n`dotnet publish EmailTracker.sln --configuration Release --runtime win10-x64 --no-build --self-contained false`\r\n\r\nDeployed via CD server onto server and attempted to run the exe. Error message:\r\n\r\n![image](https://user-images.githubusercontent.com/581018/158617899-0cc84b0d-c555-4e94-8b1a-80b153e00a25.png)\r\n\r\nClick through and download the 6.0.3 desktop runtime. If I run the app again, same error. I tried installing the base .net core runtime too but still the same error. \r\n\r\nError in event log:\r\n\r\n`Message: A fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Program Files\\dotnet\\'.`\r\n\r\nThat file does *not* exist in that folder but it does exist further down under dotnet/shared/Microsoft.NETCore.App/6.0.3 (and other versioned folders)\r\n\r\nThen it says `Failed to run as a self-contained app`, which is fine because it is not supposed to be self-contained.\r\n\r\n**Expected behavior:**\r\nI would expect that it would just work when I run the program with the correct runtime installed. Otherwise a much more specific error message if I've done something too stupid because this is show-stopping stuff for a new framework that worked perfectly until I tried to deploy it. Understand all the publish options, the SDK for building and the various project settings is very confusing so I might have got something wrong there.\r\n\r\n**Minimal repro:**\r\nThis is just an app with a single form and nothing special to deploy but I expect it won't be easy to recreate otherwise you would see it lots of other places.\r\n\r\nDeployment server(s):\r\nWindows Server 2016 Datacenter 64 bit.","Url":"https://github.com/dotnet/winforms/issues/6854","RelatedDescription":"Open issue \"Cannot run dotnet core WinForms app on .Net 6.0\" (#6854)"},{"Id":"1171068317","IsPullRequest":true,"CreatedAt":"2022-03-16T14:02:11","Actor":"ArtemTatarinov","Number":"6853","RawContent":null,"Title":"Fixing MonthCalendar accessible object leaks","State":"open","Body":"Fixes #6852\r\n\r\n## Proposed changes\r\n- Use the `UiaDisconnectProvider` method cascade through the hierarchy of the classes to free objects held by accessibility tool\r\n- Only static comparers are left at memory and their amount aren't increasing after several recurrences of the repro steps described in issue\r\n\r\n## Customer Impact\r\n- MonthCalendar memory will stop leaking\r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Screenshots\r\n\r\n### Before\r\n![image](https://user-images.githubusercontent.com/87859299/158603580-db28afad-cfaf-479b-b013-0b8932d72e72.png)\r\n\r\n### After\r\n![image](https://user-images.githubusercontent.com/87859299/158603619-b75a85fd-ebc3-4a02-96cf-54a639b8ab9c.png)\r\n\r\n## Test methodology\r\n- Manual testing (_using WinDbg, see the screenshots above_)\r\n- CTI team\r\n\r\n## Test environment(s)\r\n- Microsoft Windows [Version 10.0.19043.1586]\r\n- .NET 7.0.0-preview.3.22159.12\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6853)","Url":"https://github.com/dotnet/winforms/pull/6853","RelatedDescription":"Open PR \"Fixing MonthCalendar accessible object leaks\" (#6853)"},{"Id":"1171027880","IsPullRequest":false,"CreatedAt":"2022-03-16T13:30:25","Actor":"ArtemTatarinov","Number":"6852","RawContent":null,"Title":"MonthCalendar accessible objects are leaking in memory","State":"open","Body":"* .NET Core Version: 7.0\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n\r\n**Problem description:**\r\nMonthCalendar accessible objects are left in memory after the MonthCalendar control instance was inspected with accessibility tool (like Accessibility Insights or Inspect) and the form with MonthCalendar is closed, garbage is collected, but accessibility tool is still opened.\r\n\r\nReport from WinDbg:\r\n![image](https://user-images.githubusercontent.com/87859299/158599569-4ab1085a-c2b6-4208-ac6f-34b9754b65e8.png)\r\n \r\n**Expected behavior:**\r\nAmount of the leaked objects should be minimized to the uncleanable static objects only.\r\n\r\n**Minimal repro:**\r\n1. Create a parent form with two buttons: one will be opening a child form with the MonthCalendar control and the other will collect the garbage.\r\n2. Press the second button to open the child form with MonthCalendar.\r\n3. Start the Accessibility Insights tools.\r\n4. Run automated checks for the MonthCalendar control using AI.\r\n5. Close the child form.\r\n6. Clear memory with the first button of the parent form.\r\n7. DON'T close the AI tool.\r\n8. Look for MonthCalendar accessible objects left in memory (using WinDbg, or dotMemory, or another suitable tool).","Url":"https://github.com/dotnet/winforms/issues/6852","RelatedDescription":"Open issue \"MonthCalendar accessible objects are leaking in memory\" (#6852)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-03-22T03:30:31.2590229Z","RunDurationInMilliseconds":559}