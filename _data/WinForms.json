{"Data":{"GitHub":{"Issues":[{"Id":"2148091612","IsPullRequest":false,"CreatedAt":"2024-02-22T03:08:42","Actor":"LeafShi1","Number":"10930","RawContent":null,"Title":"Remove use of MD5 in tests and switch them to SHA256","State":"open","Body":"There are 2 test files using MD5 that need to switch to use SHA256:\r\n\r\n1. System.Drawing.Tests.DrawingTest\r\n2. MonoTests.System.Drawing.BitmapTests","Url":"https://github.com/dotnet/winforms/issues/10930","RelatedDescription":"Open issue \"Remove use of MD5 in tests and switch them to SHA256\" (#10930)"},{"Id":"2147963796","IsPullRequest":true,"CreatedAt":"2024-02-22T00:51:52","Actor":"JeremyKuhne","Number":"10929","RawContent":null,"Title":"Add span overloads to Graphics","State":"open","Body":"This adds new span APIs to Graphics and adds params where applicable.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10929)","Url":"https://github.com/dotnet/winforms/pull/10929","RelatedDescription":"Open PR \"Add span overloads to Graphics\" (#10929)"},{"Id":"2146286549","IsPullRequest":true,"CreatedAt":"2024-02-22T00:30:01","Actor":"MilenaHristova","Number":"10923","RawContent":null,"Title":"Set ProducesDotNetReleaseShippingAssets property in Publishing.props","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n## Proposed changes\r\n\r\nAdd a boolean property named `ProducesDotNetReleaseShippingAssets` in Publishing.props for repos that produce .NET shipping packages (packages that we ship with the release infra)\r\nBased on this property we will select which packages to ship as part of .NET on release day.\r\n\r\n**This is a infrastructure only change.** It will add extra metadata to the MergedManifest.xml produced during CI build.\r\n\r\nIssue: https://github.com/dotnet/release/issues/822\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nNo\r\n\r\n## Regression? \r\n\r\nNo\r\n\r\n## Risk\r\n\r\nNo\r\n\r\n<!-- end TELL-MODE -->\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10923)","Url":"https://github.com/dotnet/winforms/pull/10923","RelatedDescription":"Closed or merged PR \"Set ProducesDotNetReleaseShippingAssets property in Publishing.props\" (#10923)"},{"Id":"2145889401","IsPullRequest":false,"CreatedAt":"2024-02-22T00:04:00","Actor":"Olina-Zhang","Number":"10920","RawContent":null,"Title":"The DialogResult of PrintDialog is not correct when setting its UseEXDialog is false and clicking Cancel for dialog","State":"closed","Body":"### .NET version\n\n.NET 9.0 SDK build: 9.0.100-preview.2.24116.21\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, cannot repro previous version: .NET 8.0 SDK build\n\n### Issue description\n\nWhen setting PrintDialog's UseEXDialog is false and clicking Cancel button for this dialog, the value of DialogResult is OK, not Cancel.\r\n\r\n.NET 9.0 Result:\r\n\r\nhttps://github.com/dotnet/winforms/assets/26474449/106af37e-b263-4c70-9970-e216ed183977\r\n\r\n\r\n.Net 8.0 Result:\r\n\r\nhttps://github.com/dotnet/winforms/assets/26474449/6d69aa7f-b0f1-439b-ae0c-95fbaf136720\r\n\r\n\n\n### Steps to reproduce\n\n1. Create a Winforms application with a button, textBox and a PrintDialog\r\n2. Double-click button and add following code:\r\n ```\r\nprivate void button1_Click(object sender, EventArgs e)\r\n {\r\n     DialogResult result;\r\n\r\n     printDialog1.UseEXDialog = false;\r\n     result = printDialog1.ShowDialog();\r\n     \r\n     textBox1.Text = result.ToString();  \r\n }\r\n```\r\nor use this sample application: \r\n[PrintDialogSample.zip](https://github.com/dotnet/winforms/files/14354573/PrintDialogSample.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/10920","RelatedDescription":"Closed issue \"The DialogResult of PrintDialog is not correct when setting its UseEXDialog is false and clicking Cancel for dialog\" (#10920)"},{"Id":"2147863612","IsPullRequest":true,"CreatedAt":"2024-02-22T00:03:59","Actor":"elachlan","Number":"10928","RawContent":null,"Title":"Fix `PrintDialog` to return `DialogResult.Cancel` when cancelled or closed","State":"closed","Body":"Fixes #10920\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10928)","Url":"https://github.com/dotnet/winforms/pull/10928","RelatedDescription":"Closed or merged PR \"Fix `PrintDialog` to return `DialogResult.Cancel` when cancelled or closed\" (#10928)"},{"Id":"2147531565","IsPullRequest":true,"CreatedAt":"2024-02-21T22:36:30","Actor":"JeremyKuhne","Number":"10926","RawContent":null,"Title":"Update APIs for API review","State":"closed","Body":"Update RoundedRectangle APIs, ColorMap APIs and PrinterSettings.StringCollection per API review.\r\n\r\n#10763 (partial)\r\nFixes #10795\r\nFixes #9001\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10926)","Url":"https://github.com/dotnet/winforms/pull/10926","RelatedDescription":"Closed or merged PR \"Update APIs for API review\" (#10926)"},{"Id":"2147562072","IsPullRequest":true,"CreatedAt":"2024-02-21T19:52:14","Actor":"weltkante","Number":"10927","RawContent":null,"Title":"Make AxHost work without classic COM interop.","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #10583\r\n\r\n## Proposed changes\r\n\r\n- Adjust COM interop in WinForms to have AxHost usable together with classic COM interop disabled (`<BuiltInComInteropSupport>false</BuiltInComInteropSupport>`), which is a requirement for AOT.\r\n\r\n## Customer Impact\r\n\r\n- Allows using ActiveX controls in AOT builds.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- I may have gotten some of the interop wrong, the PR requires review\r\n- I have no unit test coverage. Test coverage can be added but requires #10754 to have a simple control. Since it has to be handwritten and cannot be generated yet it can't be one of the more complex Windows-provided ActiveX controls.\r\n\r\n### Before\r\n\r\n- Application fails with exceptions if an ActiveX control is used while having configured  `<BuiltInComInteropSupport>false</BuiltInComInteropSupport>` in the project file.\r\n\r\n### After\r\n\r\n- Application can support a simple ActiveX while having configured  `<BuiltInComInteropSupport>false</BuiltInComInteropSupport>` in the project file.\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- so far only manual testing in the scratch project, not part of the PR since it depends on the ActiveX control of #10754 which is part of a separate PR\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- 9.0.0-preview.2.24116.2\r\n- `<BuiltInComInteropSupport>false</BuiltInComInteropSupport>` in the project file\r\n- I've also used `[assembly: DisableRuntimeMarshalling]` in my test, in case its relevant\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10927)","Url":"https://github.com/dotnet/winforms/pull/10927","RelatedDescription":"Open PR \"Make AxHost work without classic COM interop.\" (#10927)"},{"Id":"2146705383","IsPullRequest":true,"CreatedAt":"2024-02-21T19:50:38","Actor":"dotnet-maestro[bot]","Number":"10925","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20240220.11\r\n- **Date Produced**: February 21, 2024 1:04:10 AM UTC\r\n- **Commit**: 1b1d26ac74e374309fb101382026ba0480d3821d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.CodeDom**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.ComponentModel.Composition**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Data.Odbc**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Data.OleDb**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Diagnostics.EventLog**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.DirectoryServices**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.DirectoryServices.Protocols**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.IO.Hashing**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.IO.Packaging**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.IO.Ports**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Management**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Reflection.Context**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Resources.Extensions**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Runtime.Caching**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Security.Cryptography.Xml**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Security.Permissions**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.ServiceModel.Syndication**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Speech**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Text.Encoding.CodePages**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Text.Encodings.Web**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Text.Json**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Threading.AccessControl**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Windows.Extensions**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.9.0**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/9dc6ea62a4...1b1d26ac74\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10925)","Url":"https://github.com/dotnet/winforms/pull/10925","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#10925)"},{"Id":"2145639337","IsPullRequest":true,"CreatedAt":"2024-02-21T19:24:05","Actor":"JeremyKuhne","Number":"10919","RawContent":null,"Title":"Update Effects per API review","State":"closed","Body":"This updates Effects to match the approved API and removes [RequiresPreviewFeatures].\r\n\r\nFixes #8835\r\n\r\nhttps://github.com/dotnet/winforms/issues/8835#issuecomment-1954987873\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10919)","Url":"https://github.com/dotnet/winforms/pull/10919","RelatedDescription":"Closed or merged PR \"Update Effects per API review\" (#10919)"},{"Id":"2146597022","IsPullRequest":false,"CreatedAt":"2024-02-21T12:09:01","Actor":"AraHaan","Number":"10924","RawContent":null,"Title":"Add version of ListViewItemCollection.AddRange() which accepts IList.","State":"open","Body":"### Background and motivation\n\nCurrently when I call ``ToArray()`` on an ``List<ListViewItem>`` to then add the items in bulk in this way:\r\n\r\n```cs\r\nvar sourceEntries = new List<ListViewItem>();\r\nArray.ForEach(\r\n    SettingsFile.SettingsJson.Sources,\r\n    (x) => sourceEntries.Add(\r\n        new ListViewItem(\r\n            new string[]\r\n            {\r\n                x,\r\n            },\r\n            -1)));\r\nthis.ListView2.Items.AddRange(sourceEntries.ToArray());\r\n```\r\nThis then generates a warning for the usage of ``ToArray()`` saying the inititialization can be simplified to:\r\n\r\n```cs\r\nthis.ListView2.Items.AddRange([.. sourceEntries]);\r\n```\r\nWhich compiles in the IDE, however when doing command line compiles via ``dotnet build -c Release`` this results in:\r\n```\r\nerror CS0121: The call is ambiguous between the following methods or properties: 'ListView.ListViewItemCollection.AddRange(ListViewItem[])' and 'ListView.ListViewItemCollection.AddRange(ListView.ListViewItemCollection)'\r\n```\r\n\r\nAs such a better option would be to add a version of ``AddRange`` that accepts ``List<ListViewItem>`` would be a great addition to the API and help fix this problem as well.\n\n### API Proposal\n\n```csharp\r\nusing System.Collections.Generic;\r\n\r\nnamespace System.Windows.Forms;\r\n\r\npublic partial class ListView\r\n{\r\n    /// <summary>\r\n    ///  Represents the collection of items in a ListView or ListViewGroup\r\n    /// </summary>\r\n    [ListBindable(false)]\r\n    public partial class ListViewItemCollection : IList\r\n    {\r\n        public void AddRange(List<ListViewItem> items);\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar sourceEntries = new List<ListViewItem>();\r\nArray.ForEach(\r\n    SettingsFile.SettingsJson.Sources,\r\n    (x) => sourceEntries.Add(\r\n        new ListViewItem(\r\n            new string[]\r\n            {\r\n                x,\r\n            },\r\n            -1)));\r\nthis.ListView2.Items.AddRange(sourceEntries);\r\n```\r\n\n\n### Alternative Designs\n\nChange the existing ``ListViewItemCollection`` overload of ``AddRange`` to also include all types that inherit from ``IList`` like ``List<T>`` for example.\n\n### Risks\n\nMinimal, since it deals with adding ListViewItems from a ``List<ListViewItem>`` type of collection.\n\n### Will this feature affect UI controls?\n\nI think this would minimally affect them.","Url":"https://github.com/dotnet/winforms/issues/10924","RelatedDescription":"Open issue \"Add version of ListViewItemCollection.AddRange() which accepts IList.\" (#10924)"},{"Id":"2145944115","IsPullRequest":true,"CreatedAt":"2024-02-21T06:35:42","Actor":"LeafShi1","Number":"10922","RawContent":null,"Title":"Suppress codeQL warnings in tests \"BitmapTests\" and \"ImageListTests\"","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nRelated #10871\r\n\r\nSuppress codeQL warnings in BitmapTests and ImageListTests \r\n\r\n## Related bug:\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/1666874/?view=edit\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/1775936/?view=edit\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10922)","Url":"https://github.com/dotnet/winforms/pull/10922","RelatedDescription":"Open PR \"Suppress codeQL warnings in tests \"BitmapTests\" and \"ImageListTests\"\" (#10922)"},{"Id":"2145913106","IsPullRequest":true,"CreatedAt":"2024-02-21T06:09:56","Actor":"Zheng-Li01","Number":"10921","RawContent":null,"Title":"Add code coverage for RichTextBox","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\nrelated https://github.com/dotnet/winforms/issues/10453\r\n\r\n## Proposed changes\r\n\r\n- Add unit tests for RichTextBox to test its GetCharIndexFromPosition() method\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- None\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit tests\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10921)","Url":"https://github.com/dotnet/winforms/pull/10921","RelatedDescription":"Open PR \"Add code coverage for RichTextBox\" (#10921)"},{"Id":"2145406566","IsPullRequest":true,"CreatedAt":"2024-02-21T01:11:35","Actor":"JeremyKuhne","Number":"10917","RawContent":null,"Title":"Clean up code around the painting loop","State":"closed","Body":"Various cleanup with painting.\r\n\r\n- Add a SuspendLayoutScope to simplify scoping and validation\r\n- Don't update layout for the parent if you don't change size (SetBoundsCore)\r\n- Fix remaining info messages in Control\r\n- Don't paint transparent background twice in PaintBackground\r\n- Cache checking image transparency in PaintBackground\r\n- Suppress all relevant warnings in NotSupported.cs to avoid the 10000 warnings that pop when you accidentally open it\r\n\r\nStops caching high contrast setting. By caching and starting the SystemEvents window this was causing a nested paint on the main form during startup if you you had a background image. The call is not so expensive to need creating a window look for changes.\r\n\r\nThis also moves a few bitmap related APIs to Core to allow for Direct2D related scenarios.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10917)","Url":"https://github.com/dotnet/winforms/pull/10917","RelatedDescription":"Closed or merged PR \"Clean up code around the painting loop\" (#10917)"},{"Id":"2145479355","IsPullRequest":true,"CreatedAt":"2024-02-20T23:47:29","Actor":"lonitra","Number":"10918","RawContent":null,"Title":"Refactor DataObject","State":"open","Body":"DataObject has been difficult to read/maintain as it deals with all 3 IDataObject interface variations (`System.Runtime.InteropServices.ComTypes`, `System.Windows.Forms.IDataObject`, and `Windows.Win32.System.Com.IDataObject.Interface`) without clear separation. \r\nThis PR refactors `DataObject` to be more readable by adding 5 new classes to separate the logic.\r\n- `ComposedDataObject`: Encapsulates all the logic to move between the 3 interface by using the next 4 classes under the hood.\r\n- `WinFormsDataObjectToNativeAdapter`: Maps `System.Windows.Forms.IDataObject` to `Windows.Win32.System.Com.IDataObject.Interface` calls (This is equivalent to what we had implemented in `DataObject` that was removed)\r\n- `RuntimeDataObjectToNativeAdapter`: Maps `System.Runtime.InteropServices.ComTypes.IDataObject` to `Windows.Win32.System.Com.IDataObject.Interface` calls\r\n- `NativeDataObjectToWinFormsAdapter`: Maps the native IDataObject pointer to `System.Windows.Forms.IDataObject` calls (This is equivalent to our old `ComDataObjectAdapter` that is removed in this PR)\r\n- `NativeDataObjectToRuntimeAdapter`: Maps the native IDataObject pointer to `System.Runtime.InteropServices.ComTypes` calls \r\n\r\nAfter changes, DataObject now forwards all calls to the inner `ComposedDataObject` which knows how to move between the 3 IDataObject interfaces no matter what we started out with (`System.Runtime.InteropServices.ComTypes.IDataObject`, `System.Windows.Forms.IDataObject`, or `Windows.Win32.System.Com.IDataObject`).\r\n\r\nOther changes:\r\n- Flip `System.Runtime.InteropServices.ComTypes.IDataObject` and `Windows.Win32.System.Com.IDataObject.Interface` on `DataObject` so that we get the cswin32 definition as the \"normal\" case.\r\n- Always wrap drag/drop data if it does not implement only `System.Runtime.InteropServices.ComTypes.IDataObject` so that it gets registered in our ComWrappers and we can pull the original data to pass out on the 'drop' side. This is most notably needed for custom data objects that implement both `System.Runtime.InteropServices.ComTypes.IDataObject` and `System.Windows.Forms.IDataObject` so that we can get the original object back from the IDataObject* on the 'drop' side\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10918)","Url":"https://github.com/dotnet/winforms/pull/10918","RelatedDescription":"Open PR \"Refactor DataObject\" (#10918)"},{"Id":"2143538924","IsPullRequest":false,"CreatedAt":"2024-02-20T19:56:21","Actor":"AraHaan","Number":"10911","RawContent":null,"Title":"Consider replacing the use of BinaryFormatter at all in WinForms.","State":"closed","Body":"### .NET version\r\n\r\nI will investigate a way to be able to parse the types from Resx without the security issues from BinaryFormatter inside of the winforms codebase in the next few weeks. Because .NET 9 will entirely remove them by default and that I FEEL LIKE being REQUIRED to reference an external nuget package because I set \"Localizable\" to true on a form should not justify a possible security hole in people's applications. That is not acceptable.\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nYes, but BinaryFormatter was deprecated. Now in .NET 9 it will throw an exception on all of it's APIs, and will have the real code in a nuget package. Although best option here is to look into other means of doing the same thing from within the Windows Forms repository. But first I will write code separate from it to test and then copy paste it all into the Windows Forms codebase to be used internally as an implementation detail.\r\n\r\n### Issue description\r\n\r\nBinaryFormatter should be avoided entirely, I know there are other ways of the same thing, perhaps serialize the types as json instead and store said json strings inside of the resx and deserialize that instead at runtime? Would still need code in the designer for that however to migrate the format of those strings in the resx files to json form but it can be done like that as well. Also System.Text.Json is part of the main shared framework and so it should be no problems depending on it.\r\n\r\n### Steps to reproduce\r\n\r\n- Create a new winforms project in .NET 8 or 9 Preview SDK (dotnet new winforms)\r\n- open the project in Visual Studio 2022\r\n- set the main form to be \"Localizable\".\r\n- Build and get warnings from each item added to the resx file from the designer itself.","Url":"https://github.com/dotnet/winforms/issues/10911","RelatedDescription":"Closed issue \"Consider replacing the use of BinaryFormatter at all in WinForms.\" (#10911)"},{"Id":"2143631446","IsPullRequest":false,"CreatedAt":"2024-02-20T19:52:58","Actor":"GCAronChen","Number":"10912","RawContent":null,"Title":"ActiveControl property change To null when control placed in ContainerControl","State":"closed","Body":"### .NET version\r\n\r\n8.0\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo\r\n\r\n### Issue description\r\n\r\nWhen placed a control in ActiveMdiChild form, click other control out of current mdi form.\r\n`this.ActiveMdiChild.ActiveControl` will be kept and not change to null.\r\n![image](https://github.com/dotnet/winforms/assets/96418485/5ea20a9a-6f5c-44f9-9594-2c58d5fa3111)\r\n![image](https://github.com/dotnet/winforms/assets/96418485/c4c08c39-931d-4a26-9335-9d74f2c54798)\r\n![image](https://github.com/dotnet/winforms/assets/96418485/6a742303-a815-46a8-b809-ce17d9ceeddb)\r\n\r\n\r\nBut when this control is added in container control, click other control out of current mdi form.\r\n`this.ActiveMdiChild.ActiveControl` will be changed to null.\r\n![image](https://github.com/dotnet/winforms/assets/96418485/2caee897-e949-4ea6-a91b-49bd127f68fe)\r\n![image](https://github.com/dotnet/winforms/assets/96418485/02bc5ff2-bffe-43b7-94a9-872420122162)\r\n![image](https://github.com/dotnet/winforms/assets/96418485/96e4989d-6f5b-4517-adf3-0512e53dda33)\r\n\r\nIs this a bug?\r\n\r\n### Steps to reproduce\r\n\r\nUnzip attachment, open \"TestActiveControl.sln\"\r\n\r\n1. Run project \"TestActiveControl.csproj\"\r\n2. Click the first TextBox, then click button\r\n3. Check TextBox output which represents mid child active control, it's kept\r\n4. Click the second TextBox, then click button\r\n5. Check TextBox output which represents mid child active control, it's changed to null. Only difference is the second TextBox placed in container control\r\n\r\nattachment: [TestActiveControl.zip](https://github.com/dotnet/winforms/files/14340302/TestActiveControl.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/10912","RelatedDescription":"Closed issue \"ActiveControl property change To null when control placed in ContainerControl\" (#10912)"},{"Id":"2145032327","IsPullRequest":true,"CreatedAt":"2024-02-20T18:33:47","Actor":"sharwell","Number":"10916","RawContent":null,"Title":"Log windows messages in tests","State":"open","Body":"Related to #10902\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10916)","Url":"https://github.com/dotnet/winforms/pull/10916","RelatedDescription":"Open PR \"Log windows messages in tests\" (#10916)"},{"Id":"2144331135","IsPullRequest":true,"CreatedAt":"2024-02-20T13:36:22","Actor":"dotnet-maestro[bot]","Number":"10915","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20240220.1\r\n- **Date Produced**: February 20, 2024 11:14:35 AM UTC\r\n- **Commit**: 9dc6ea62a4d195ae4559f4609a56933c61889756\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.CodeDom**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.ComponentModel.Composition**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Data.Odbc**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Data.OleDb**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.DirectoryServices**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.DirectoryServices.Protocols**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.IO.Hashing**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.IO.Packaging**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.IO.Ports**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Management**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Reflection.Context**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Resources.Extensions**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Runtime.Caching**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Security.Permissions**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.ServiceModel.Syndication**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Speech**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Text.Encoding.CodePages**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Text.Encodings.Web**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Text.Json**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Threading.AccessControl**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **System.Windows.Extensions**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.9.0**: [from 9.0.0-preview.2.24116.2 to 9.0.0-preview.2.24120.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/d972a19c07...9dc6ea62a4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10915)","Url":"https://github.com/dotnet/winforms/pull/10915","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#10915)"},{"Id":"2143870621","IsPullRequest":true,"CreatedAt":"2024-02-20T09:00:44","Actor":"LeafShi1","Number":"10914","RawContent":null,"Title":"Add ToolStripMenuItem test UI in WinformsControlTests","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nRelated #10834 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Add ToolStripMenuItem test in WinformsControlTests\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- ToolStripMenuItem can be tested in project WinformsControlTests\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://github.com/dotnet/winforms/assets/132890443/f68a7403-082f-4a11-baee-c76bd6c5fd69)\r\n\r\n\r\n### After\r\n![image](https://github.com/dotnet/winforms/assets/132890443/ccbc72ed-7982-44c7-98d7-c18d17a9d7cc)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .net 9.0.0-preview.2.24116.2\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10914)","Url":"https://github.com/dotnet/winforms/pull/10914","RelatedDescription":"Open PR \"Add ToolStripMenuItem test UI in WinformsControlTests\" (#10914)"},{"Id":"2143641174","IsPullRequest":true,"CreatedAt":"2024-02-20T06:35:22","Actor":"SimonZhao888","Number":"10913","RawContent":null,"Title":"Add unimplemented types for deprecated UI controls","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10913)","Url":"https://github.com/dotnet/winforms/pull/10913","RelatedDescription":"Open PR \"Add unimplemented types for deprecated UI controls\" (#10913)"},{"Id":"2143266381","IsPullRequest":true,"CreatedAt":"2024-02-19T23:06:36","Actor":"Tanya-Solyanik","Number":"10910","RawContent":null,"Title":"[release/8.0] WinForms TreeView null reference exception 'owningTreeView'","State":"open","Body":"Fixes #10876\r\nPort of https://github.com/dotnet/winforms/pull/10880\r\n(PR was created by cherry-picking commits one-by-one)\r\n\r\n## Proposed changes\r\nTreeNodeAccessibleObject can't be created when the parent TreeView is not found. This could happen when a node is being added or deleted from the Nodes collection. If AccessibleObject is not created on this attempt, it will be created on the next access. If TreeView is not available, we skip object creation. This fix was implemented based on the exception call stack from the customer.\r\n\r\n## Customer Impact\r\nCustomer observes random crashes in their application when dragging TreeView items and clicking on TreeView subtrees with the mouse.\r\nNo workaround is available, \r\n\r\n## Regression? \r\n- Yes from NET7, introduced while enabling accessibility events to TreeNode operations.\r\n\r\n## Risk\r\n - Low, we are exiting if accessible object can't be created. AccessibleObject will be created after the node is parented properly.\r\n\r\n## Test \r\n- added unit tests\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10910)","Url":"https://github.com/dotnet/winforms/pull/10910","RelatedDescription":"Open PR \"[release/8.0] WinForms TreeView null reference exception 'owningTreeView'\" (#10910)"},{"Id":"2143236827","IsPullRequest":false,"CreatedAt":"2024-02-19T22:31:40","Actor":"VaporiZed","Number":"10909","RawContent":null,"Title":"no unicode characters with Application.SetCompatibleTextRenderingDefault(True)","State":"open","Body":"### .NET version\n\n7.0\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nThe usage of `Application.SetCompatibleTextRenderingDefault(True)` leads to a wrong presentation of unicode characters.\n\n### Steps to reproduce\n\n- put a button on the form and add a unicode character like a magnifying glass 🔍 to the text of the button\r\n- deactivate the application framework in the project properties\r\n- create a module with an own Sub Main\r\n- set the start object to the module or the Sub Main\r\n- use the following code in the Sub Main:\r\n```\r\nApplication.SetCompatibleTextRenderingDefault(True)\r\nApplication.EnableVisualStyles()\r\nApplication.Run(New YourMainForm)\r\n```\r\n- run the app\r\n\r\nexpectation: the magnifying glass will be shown as it is intended\r\nfact: a placeholder/rectangle is shown instead\r\n\r\n![Result](https://github.com/dotnet/winforms/assets/49878115/adc57ffe-55d0-4e04-8bed-5d7cb9258e50)\r\n\r\n[WinFormsNetVB.zip](https://github.com/dotnet/winforms/files/14337379/WinFormsNetVB.zip)","Url":"https://github.com/dotnet/winforms/issues/10909","RelatedDescription":"Open issue \"no unicode characters with Application.SetCompatibleTextRenderingDefault(True)\" (#10909)"},{"Id":"2142454369","IsPullRequest":false,"CreatedAt":"2024-02-19T14:06:19","Actor":"AndersBillLinden","Number":"10908","RawContent":null,"Title":"Input of thousand separators are accepted in NumericUpdown components even if ThousandsSeparator is false","State":"open","Body":"### .NET version\r\n\r\n8.0\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nno\r\n\r\n### Issue description\r\n\r\nWe got a bug report about a user entering a comma in a NumericUpDownExt like: \r\n\r\n2,54651\r\n\r\nand believed the comma was a decimal separator.\r\n\r\nWhat he/she did not anticipate is that the current locale treats comma (,) as thousand separators.\r\nWhat he/she should really input would be a period (.).\r\n\r\n\r\nWhen the component was blurred, it correctly changed its text to\r\n\r\n254651.000\r\n\r\nBut upon investigation, it turned out that ThousandsSeparator was false for the control.\r\n\r\nWould it be possible to not accept the input of the thousand separator if those are turned off anyway?\r\n\r\nThat would cease the confusion (which led to the bug report).\r\n\r\n### Steps to reproduce\r\n\r\nAdd a NumericUpdown in your form.\r\nSet NumericUpDown.Maximum to a value larger than a thousand\r\nBe sure ThousandsSeparator is false.\r\nYou will still be able to enter the thousand separator character.","Url":"https://github.com/dotnet/winforms/issues/10908","RelatedDescription":"Open issue \"Input of thousand separators are accepted in NumericUpdown components even if ThousandsSeparator is false\" (#10908)"},{"Id":"2141758768","IsPullRequest":true,"CreatedAt":"2024-02-19T08:06:04","Actor":"Epica3055","Number":"10907","RawContent":null,"Title":"fix Issue \"ColumnType is disabled for Columns in EditColumns dialog\"","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #10364 \r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- Add DataGridViewColumnTypeEditor\r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n<!-- \r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n -->\r\n## Risk\r\n\r\n- low\r\n\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://github.com/dotnet/winforms/assets/26474449/3c335ca9-ccec-4595-b93a-dfa2c25f2da3)\r\n\r\n\r\n\r\n\r\n### After\r\n\r\n![image](https://github.com/dotnet/winforms/assets/26474449/55875bfa-0655-43d7-9c6d-efcb5571572e)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- manually\r\n- \r\n<!--\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI \r\n\r\n\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n9.0.0-preview.2.24116.2\r\n\r\n\r\n\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10907)","Url":"https://github.com/dotnet/winforms/pull/10907","RelatedDescription":"Open PR \"fix Issue \"ColumnType is disabled for Columns in EditColumns dialog\"\" (#10907)"},{"Id":"2141722993","IsPullRequest":true,"CreatedAt":"2024-02-19T07:44:05","Actor":"LeafShi1","Number":"10906","RawContent":null,"Title":"Add AppContext switch \"System.Windows.Forms.ApplyApplicationFontToMenus\"","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #10774 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Add a new AppContext switch \"System.Windows.Forms.ApplyApplicationFontToMenus\"\r\n- Add a condition in ToolStrip.cs to return the font of the form when LocalAppContextSwitches.ApplyApplicationFontToMenus is true.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- The ToolStrip control font can be consistent with the Form by setting the property \"`System.Windows.Forms.ApplyApplicationFontToMenus: true`\" in the configuration file\r\n\r\n![image](https://github.com/dotnet/winforms/assets/132890443/46b7d36c-17dd-4e19-a221-574606168f93)\r\n\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nIn 200 dpi mode, using `Application.SetDefaultFont(new Font(new FontFamily(\"Microsoft Sans Serif\"), 8.25F, FontStyle.Regular, GraphicsUnit.Point, 0))`, the font of toolstrip and datagridview is different in Korean.\r\n\r\n![image](https://github.com/dotnet/winforms/assets/132890443/bbecf0e9-4bd8-4c33-8310-9b07ae26e353)\r\n\r\n\r\n### After\r\nIn 200 dpi mode, the fonts of toolstrip and datagridview are the same regardless of the font used by the Form.\r\n\r\n![image](https://github.com/dotnet/winforms/assets/132890443/9a8744cd-0464-4932-803d-fe12addca1f0)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .net 9.0.0-preview.2.24105.1\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10906)","Url":"https://github.com/dotnet/winforms/pull/10906","RelatedDescription":"Open PR \"Add AppContext switch \"System.Windows.Forms.ApplyApplicationFontToMenus\"\" (#10906)"},{"Id":"2141255022","IsPullRequest":true,"CreatedAt":"2024-02-19T00:13:32","Actor":"elachlan","Number":"10905","RawContent":null,"Title":"Fix `null` values in `AutoCompleteCustomSource` ","State":"open","Body":"- Refactoring to add `ArgumentNullException`/`InvalidOperationException` to `AutoCompleteCustomSource`\r\n- add tests to verify\r\n- Cleanup/Refactor of `StringSource`\r\n\r\nI think this is an API change, so it might need to be documented. Since the APIs now throw exceptions.\r\n\r\n#Fixes #10904\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10905)","Url":"https://github.com/dotnet/winforms/pull/10905","RelatedDescription":"Open PR \"Fix `null` values in `AutoCompleteCustomSource` \" (#10905)"},{"Id":"2140703571","IsPullRequest":false,"CreatedAt":"2024-02-18T02:30:39","Actor":"Zheng-Li01","Number":"10904","RawContent":null,"Title":"Adding Nothing to TextBox.AutoCompleteCustomSource stops app without any info","State":"open","Body":"### .NET version\r\n\r\n.NET 9.0.0-preview.2.24079.1\r\n\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo, `The program '[23732] FrameworkApp.exe' has exited with code 3221225477 (0xc0000005) 'Access violation'.`\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nYes, this is not a regression issue, can reproduce from 3.1 ~ 9.0.\r\n\r\n### Issue description\r\n\r\nThe app doesn’t respond for some seconds and will end after input the text for the textBox1. However there is no error message, exception or such a thing. And the user expect an exception message, like says: Adding null/Nothing to the AutoCompleteCustomSource is invalid.\r\n\r\n### Steps to reproduce\r\n\r\n1. Open attached the reproduce application, then build and run\r\n[FeedBack1949667.zip](https://github.com/dotnet/winforms/files/14320889/FeedBack1949667.zip)\r\n2. Click the button1\r\n3. Entering the textbox and typing any letter\r\n\r\n**Actual Results:**\r\n The app doesn’t respond for some seconds and will end after input the text for the textBox1. However there is no error message, exception or such a thing for user.\r\n![FeedBack1949667](https://github.com/dotnet/winforms/assets/38325459/89c848cc-1b02-48f8-aa83-5df61df07f1a)\r\n\r\n**Expected Results:**\r\nExpect an exception message, that says: Adding null/Nothing to the AutoCompleteCustomSource is invalid.","Url":"https://github.com/dotnet/winforms/issues/10904","RelatedDescription":"Open issue \"Adding Nothing to TextBox.AutoCompleteCustomSource stops app without any info\" (#10904)"},{"Id":"2140065031","IsPullRequest":true,"CreatedAt":"2024-02-17T13:36:23","Actor":"dotnet-maestro[bot]","Number":"10903","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20240216.2\r\n- **Date Produced**: February 16, 2024 1:55:43 PM UTC\r\n- **Commit**: d972a19c077e899d0b3fff97d955968e50906396\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.CodeDom**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.ComponentModel.Composition**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Data.Odbc**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Data.OleDb**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.DirectoryServices**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.DirectoryServices.Protocols**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.IO.Hashing**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.IO.Packaging**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.IO.Ports**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Management**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Reflection.Context**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Resources.Extensions**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Runtime.Caching**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Security.Permissions**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.ServiceModel.Syndication**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Speech**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Text.Encoding.CodePages**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Text.Encodings.Web**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Text.Json**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Threading.AccessControl**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **System.Windows.Extensions**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.9.0**: [from 9.0.0-preview.2.24116.1 to 9.0.0-preview.2.24116.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/a3f74163d6...d972a19c07\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10903)","Url":"https://github.com/dotnet/winforms/pull/10903","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#10903)"},{"Id":"2139567665","IsPullRequest":false,"CreatedAt":"2024-02-16T22:21:15","Actor":"Tanya-Solyanik","Number":"10902","RawContent":null,"Title":"Improve data collection for unit tests","State":"open","Body":"@sharwell had added screenshots recording for failed integration tests - https://github.com/dotnet/winforms/pull/10552 Add Window messages data to the test failure information.\r\nHowever for some tests we could use additional information to identify causes of Assertion failures. We could start by logging windows messages:\r\n \r\n - [ ] Register a custom logger that would log all messages sent to the main test window and all its children with timestamps. Use DataCollectionService.RegisterCustomLogger to register the new logger. [winforms/src/System.Windows.Forms/tests/IntegrationTests/UIIntegrationTests/Infra/DataCollectionService.cs at f8e6d3b434f6e58bdc5ec1900586071d17650cc8 · dotnet/winforms (github.com)](https://github.com/dotnet/winforms/blob/f8e6d3b434f6e58bdc5ec1900586071d17650cc8/src/System.Windows.Forms/tests/IntegrationTests/UIIntegrationTests/Infra/DataCollectionService.cs#L13)\r\nThe custom log will be saved to the same screenshots folder. Our tests are very quick, we can start by logging all windows messages, logs will not be too big. We can monitor messages using a hook - [SetWindowsHookExA function (winuser.h) - Win32 apps | Microsoft Learn](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa)\r\nRoslyn repo implements custom loggers, can be used as a reference.\r\n\r\n- [ ] once we start recording messages, we could log controls state (visible, enabled, etc) for the visual tree.\r\n- [ ] Sam's suggestion: record state of the keyboard (to validate a theory that some tests are not restoring keyboard state properly)\r\n- [ ] Sam's suggestion: _It might be good to have a CI variable that basically saves the APNG data for every test, including passing ones. This variable is always false by default, but at any time someone could queue up a run to effectively gather baseline data that can be used to cross-reference failures against what is seen on success._","Url":"https://github.com/dotnet/winforms/issues/10902","RelatedDescription":"Open issue \"Improve data collection for unit tests\" (#10902)"},{"Id":"2139139871","IsPullRequest":true,"CreatedAt":"2024-02-16T18:58:49","Actor":"lonitra","Number":"10901","RawContent":null,"Title":"Bump Nugetpackaging version","State":"closed","Body":"\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10901)","Url":"https://github.com/dotnet/winforms/pull/10901","RelatedDescription":"Closed or merged PR \"Bump Nugetpackaging version\" (#10901)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-02-22T03:30:24.6972202Z","RunDurationInMilliseconds":416}