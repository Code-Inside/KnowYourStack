{"Data":{"GitHub":{"Issues":[{"Id":"894625066","IsPullRequest":true,"CreatedAt":"2021-05-19T04:19:16","Actor":"dreddy-work","Number":"4934","RawContent":null,"Title":"Publishing remaining APIS that going into P5","State":"closed","Body":"Remaining APIs to be published for Preview 5 and correcting an error in earlier published APIs\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4934)","Url":"https://github.com/dotnet/winforms/pull/4934","RelatedDescription":"Closed or merged PR \"Publishing remaining APIS that going into P5\" (#4934)"},{"Id":"894629354","IsPullRequest":true,"CreatedAt":"2021-05-19T02:45:58","Actor":"dreddy-work","Number":"4935","RawContent":null,"Title":"Merge - Publishing remaining APIS that going into P5","State":"closed","Body":"Merging commit from main on publishing remaining APIs.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4935)","Url":"https://github.com/dotnet/winforms/pull/4935","RelatedDescription":"Closed or merged PR \"Merge - Publishing remaining APIS that going into P5\" (#4935)"},{"Id":"894605702","IsPullRequest":true,"CreatedAt":"2021-05-18T23:15:53","Actor":"dreddy-work","Number":"4933","RawContent":null,"Title":"Merge pull request #4758 from vladimir-krestov/Issue_4224_FixingMonth…","State":"closed","Body":"Merging late-coming PR into Preview 5.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4933)","Url":"https://github.com/dotnet/winforms/pull/4933","RelatedDescription":"Closed or merged PR \"Merge pull request #4758 from vladimir-krestov/Issue_4224_FixingMonth…\" (#4933)"},{"Id":"891681410","IsPullRequest":true,"CreatedAt":"2021-05-18T23:06:46","Actor":"RussKie","Number":"4911","RawContent":null,"Title":"Allow set application-wide default font","State":"closed","Body":"Resolves #3001\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\nThe default font has been updated in .NET Core 3.0 (#656) and documented. However for some users who built their apps in pixel-perfect manner this change has proved to be a significant hurdle in migrating their apps to .NET.\r\n\r\nAllow setting application-wide default font in a similar manner we set high dpi or visual styles:\r\n\r\n```diff\r\nclass Program\r\n{\r\n    [STAThread]\r\n    static void Main()\r\n    {\r\n        Application.SetHighDpiMode(HighDpiMode.SystemAware);\r\n        Application.EnableVisualStyles();\r\n        Application.SetCompatibleTextRenderingDefault(false);\r\n\r\n+       Application.SetDefaultFont(new Font(new FontFamily(\"Microsoft Sans Serif\"), 8f));\r\n\r\n        Application.Run(new Form1());\r\n    }\r\n}\r\n```\r\n\r\n* The application-wide default font can only be set before the first window is created by an application.\r\n* The font will be scaled by the system text scale factor, whenever it is getting changed.\r\n\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n* Microsoft Sans Serif, 8pt\r\n![image](https://user-images.githubusercontent.com/4403806/118235486-29abe980-b4d8-11eb-9a57-b7e559201a83.png)\r\n\r\n* Chiller, 12pt\r\n![image](https://user-images.githubusercontent.com/4403806/118235457-2153ae80-b4d8-11eb-9183-2a1cc5aa82a1.png)\r\n\r\n* Calibri, 11pt\r\n![image](https://user-images.githubusercontent.com/4403806/118235357-ff5a2c00-b4d7-11eb-83b0-15aa572731d9.png)\r\n\r\n* System text scale factor changes\r\n![default-font1](https://user-images.githubusercontent.com/4403806/118394599-01172180-b689-11eb-8591-a9eb2acc10a4.gif)\r\n\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- several new unit tests\r\n- manual - see below\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4911)","Url":"https://github.com/dotnet/winforms/pull/4911","RelatedDescription":"Closed or merged PR \"Allow set application-wide default font\" (#4911)"},{"Id":"893764678","IsPullRequest":true,"CreatedAt":"2021-05-18T16:56:20","Actor":"dreddy-work","Number":"4926","RawContent":null,"Title":"Branding to P6","State":"closed","Body":"Branding to next milestone in main branch\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4926)","Url":"https://github.com/dotnet/winforms/pull/4926","RelatedDescription":"Closed or merged PR \"Branding to P6\" (#4926)"},{"Id":"894561475","IsPullRequest":true,"CreatedAt":"2021-05-18T16:22:20","Actor":"gpetrou","Number":"4932","RawContent":null,"Title":"Enable nullability in TableLayoutCellPaintEventArgs","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in TableLayoutCellPaintEventArgs.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4932)","Url":"https://github.com/dotnet/winforms/pull/4932","RelatedDescription":"Open PR \"Enable nullability in TableLayoutCellPaintEventArgs\" (#4932)"},{"Id":"894485237","IsPullRequest":true,"CreatedAt":"2021-05-18T15:06:17","Actor":"gpetrou","Number":"4931","RawContent":null,"Title":"Enable nullability in some ToolStrip EventArgs","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in some ToolStrip EventArgs.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4931)","Url":"https://github.com/dotnet/winforms/pull/4931","RelatedDescription":"Open PR \"Enable nullability in some ToolStrip EventArgs\" (#4931)"},{"Id":"894307910","IsPullRequest":true,"CreatedAt":"2021-05-18T14:54:43","Actor":"dotnet-maestro[bot]","Number":"4930","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210518.1\r\n- **Date Produced**: 5/18/2021 9:46 AM\r\n- **Commit**: 4e4b8bf2d95280e4e87881b79038d1b89f347944\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21267.1 to 6.0.0-preview.5.21268.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/f64f12a...4e4b8bf\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4930)","Url":"https://github.com/dotnet/winforms/pull/4930","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4930)"},{"Id":"894281432","IsPullRequest":false,"CreatedAt":"2021-05-18T11:35:10","Actor":"Balkoth","Number":"4929","RawContent":null,"Title":"WinForms HighDPI PerMonitorV2 TextBox scales wrong","State":"open","Body":"**.NET Core Version:**\r\n\r\nSDK: 5.0.203 (383637d63f)\r\nRuntime: 5.0.6 (478b2f8c0e)\r\n\r\n**Problem description:**\r\n\r\nIf the main application window is not launched on the main monitor it scales the textbox and the used font wrong.\r\n\r\nThis is a screenshot from launching the application on the main display and dragging it onto the second screen:\r\n![image](https://user-images.githubusercontent.com/80055480/118643526-f66da100-b7dc-11eb-832a-403474b181e3.png)\r\n\r\nIf i start the application on the second screen it looks like this:\r\n![image](https://user-images.githubusercontent.com/80055480/118643579-07b6ad80-b7dd-11eb-8d8c-039740070985.png)\r\n\r\nThe font on the second screenshot is way to big.\r\n\r\n**Minimal repro:**\r\n- Create new .NET-Core 5.0 WinForms app\r\n- Set Application.SetHighDpiMode(HighDpiMode.PerMonitorV2)\r\n- Open the forms designer for Form1\r\n- Set AutoScaleMode = Dpi\r\n- Drag TextBox onto Form1\r\n- Set textBox1 to Multiline and DockStyle.Fill\r\n- Change font to Consolas 11 pt\r\n\r\nI have prepared a sample app that also loads text from an embedded resource into the TextBox to directly show the problem here:\r\n[DpiTextBoxTest.zip](https://github.com/dotnet/winforms/files/6500948/DpiTextBoxTest.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/4929","RelatedDescription":"Open issue \"WinForms HighDPI PerMonitorV2 TextBox scales wrong\" (#4929)"},{"Id":"894107338","IsPullRequest":false,"CreatedAt":"2021-05-18T08:14:36","Actor":"vsfeedback","Number":"4928","RawContent":null,"Title":"NET5 ImageList GDI object leak","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/NET5-ImageList-GDI-object-leak/1424122)._\r\n\r\n---\r\nIn NET5 any Windows Form that contains a System.Windows.Forms.ImageList that is populated from a `((System.Windows.Forms.ImageListStreamer)(resources. GetObject(\"imageList1.ImageStream\")));` Leak GDI objects that are never released by the Garbage Collector, NOT an issue in NET Core 3.1, I have tested in NET6 Preview 3 and it is sill an issue.\r\n\r\nSteps to reproduce\r\n\r\n1. Create a WinForms application this will default with a form called Form1.\r\n2. Add a second form to the Application called Form2\r\n3. In the Forms Designer add an ImageList to Form2 and Add any Bitmap to the ImageList\r\n4. Add Two buttons to Form1, one to Open Form2 and Open to Garbage Collect\r\n    ```cs\r\n        private void button1_Click(object sender, EventArgs e)\r\n\t\t{\r\n\t\t\tGC. Collect();\r\n\t\t}\r\n\r\n        private void button2_Click(object sender, EventArgs e)\r\n\t\t{\r\n\t\t\tForm2 oForm = new Form2();\r\n            oForm.Show();\r\n\t\t}\r\n    ```\r\n5. Open Task manger select the details tab and add GDI objects column if not already visible.\r\n6. Run the application and Click Button 2 to open Form2 then close Form2 click Button 1 to garbage collect and you will see GDI object have increased. repeat this and you will see the GDI object increaing with every open and close of Form2\r\n\r\nAttached is a sample Solution with the Project reproduced in it.\r\n\r\n---\r\n### Original Comments\r\n\r\n#### Feedback Bot on 5/17/2021, 10:23 AM: \r\n\r\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n\r\n#### S Myczko on 5/17/2021, 05:30 PM: \r\n\r\n<p>Looking at this in more detail it appears the the Dispose is never called on the this.imageList1.ImageStream, if I keep a reference to that object and call Dispose()  my self it leak goes away, but this does required a change to the Forms Designer code.</p>\r\n<pre><code>protected override void Dispose(bool disposing)\r\n\t{\r\n\t\tif (disposing &amp;&amp; (components != null))\r\n\t\t{\r\n\t\t\tcomponents.Dispose();\r\n\t\t\tthis.oImageStream.Dispose();\r\n\t\t}\r\n\t\tbase.Dispose(disposing);\r\n\t}\r\n</code></pre>\r\n\r\n\r\n---\r\n### Original Solutions\r\n(no solutions)","Url":"https://github.com/dotnet/winforms/issues/4928","RelatedDescription":"Open issue \"NET5 ImageList GDI object leak\" (#4928)"},{"Id":"893831297","IsPullRequest":false,"CreatedAt":"2021-05-18T01:59:34","Actor":"paxtonxuhongzhi","Number":"4927","RawContent":null,"Title":"ControlDesigner can not be used in .NetCore winform,but it works in .Net Framework,how to use it in .Net Core winform","State":"closed","Body":"ControlDesigner can not be used in .NetCore winform,but it works in .Net Framework,how to use it in .Net Core winform\r\n92764-image.png\r\n\r\n92764-image\r\n\r\nSuch as this(Framework),the panel in framework work well,it visable in designer and controable,but in .Net Core,it just exist but can not use.\r\n92677-image\r\n92677-image.png\r\nsuch as this（.Net Core）\r\n\r\nmy code as follow,\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Drawing;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows.Forms;\r\nusing System.Windows.Forms.Design;\r\n\r\nnamespace WindowsFormsAppNetCore\r\n{\r\n[Designer(typeof(LDesigner))]\r\n[DesignTimeVisible(true)]\r\npublic class MenuControlEx : SetterControl\r\n{\r\npublic MenuControlEx()\r\n{\r\nInitializeComponent();\r\n}\r\n/// <summary>\r\n/// Panel\r\n/// </summary>\r\n[Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]\r\npublic Panel MenuPanel\r\n{ get { return setterPanel; } }\r\n\r\n     private void InitializeComponent()\r\n     {\r\n         this.setterPanel = new System.Windows.Forms.Panel();\r\n         this.SuspendLayout();\r\n         // \r\n         // setterPanel\r\n         // \r\n         this.setterPanel.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \r\n         | System.Windows.Forms.AnchorStyles.Left) \r\n         | System.Windows.Forms.AnchorStyles.Right)));\r\n         this.setterPanel.AutoScroll = true;\r\n         this.setterPanel.Location = new System.Drawing.Point(104, 66);\r\n         this.setterPanel.Name = \"setterPanel\";\r\n         this.setterPanel.Size = new System.Drawing.Size(355, 413);\r\n         this.setterPanel.TabIndex = 0;\r\n         // \r\n         // MenuControlEx\r\n         // \r\n         this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 12F);\r\n         this.Controls.Add(this.setterPanel);\r\n         this.ItemContainer = this.setterPanel;\r\n         this.Name = \"MenuControlEx\";\r\n         this.Size = new System.Drawing.Size(482, 508);\r\n         this.ResumeLayout(false);\r\n     }\r\n     private System.Windows.Forms.Panel setterPanel;\r\n }\r\n //system.Desgin\r\n public class LDesigner : ParentControlDesigner\r\n {\r\n     private MenuControlEx _control;\r\n     public override void Initialize(IComponent component)\r\n     {\r\n         base.Initialize(component);\r\n         _control = (MenuControlEx)component;\r\n         bool succ = this.EnableDesignMode(_control.MenuPanel, \"setterPanel\");\r\n         if (!succ)\r\n             throw new Exception(\"\");\r\n     }\r\n }\r\n}","Url":"https://github.com/dotnet/winforms/issues/4927","RelatedDescription":"Closed issue \"ControlDesigner can not be used in .NetCore winform,but it works in .Net Framework,how to use it in .Net Core winform\" (#4927)"},{"Id":"893745623","IsPullRequest":true,"CreatedAt":"2021-05-17T22:14:56","Actor":"dreddy-work","Number":"4925","RawContent":null,"Title":"publishing APIs","State":"closed","Body":"publishing APIs for Preview5.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4925)","Url":"https://github.com/dotnet/winforms/pull/4925","RelatedDescription":"Closed or merged PR \"publishing APIs\" (#4925)"},{"Id":"892875418","IsPullRequest":true,"CreatedAt":"2021-05-17T21:41:06","Actor":"RussKie","Number":"4923","RawContent":null,"Title":"Rename private source generators project","State":"closed","Body":"https://github.com/dotnet/winforms/issues/4909 will be introducing public facing source gnerators and analyzers, e.g. those that will be used in customer applications.\r\nSystem.Windows.Forms.PrivateSourceGenerators  contains source generators that are used during the build of the Windows Forms SDK, e.g. to emit code that validates enum arguments.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4923)","Url":"https://github.com/dotnet/winforms/pull/4923","RelatedDescription":"Closed or merged PR \"Rename private source generators project\" (#4923)"},{"Id":"893264490","IsPullRequest":true,"CreatedAt":"2021-05-17T12:33:08","Actor":"dotnet-maestro[bot]","Number":"4924","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210517.1\r\n- **Date Produced**: 5/17/2021 10:12 AM\r\n- **Commit**: f64f12aa83d9f2253eab10551b716d2ba09371d2\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21265.5 to 6.0.0-preview.5.21267.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/6430375...f64f12a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4924)","Url":"https://github.com/dotnet/winforms/pull/4924","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4924)"},{"Id":"891778400","IsPullRequest":true,"CreatedAt":"2021-05-17T07:17:39","Actor":"lukas-lansky","Number":"4912","RawContent":null,"Title":"[Do not merge] Scouting test","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4912)","Url":"https://github.com/dotnet/winforms/pull/4912","RelatedDescription":"Closed or merged PR \"[Do not merge] Scouting test\" (#4912)"},{"Id":"892657576","IsPullRequest":true,"CreatedAt":"2021-05-16T23:45:49","Actor":"dotnet-maestro[bot]","Number":"4921","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210515.5\r\n- **Date Produced**: 5/16/2021 1:26 AM\r\n- **Commit**: 64303750a9198a49f596bcc3aa13de804e421579\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21265.2 to 6.0.0-preview.5.21265.5][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/8194ffb...6430375\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4921)","Url":"https://github.com/dotnet/winforms/pull/4921","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4921)"},{"Id":"892781539","IsPullRequest":true,"CreatedAt":"2021-05-16T23:17:04","Actor":"jmarolf","Number":"4922","RawContent":null,"Title":"enable nullable for new projects","State":"open","Body":"resolves https://github.com/dotnet/templates/issues/485\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4922)","Url":"https://github.com/dotnet/winforms/pull/4922","RelatedDescription":"Open PR \"enable nullable for new projects\" (#4922)"},{"Id":"891841659","IsPullRequest":true,"CreatedAt":"2021-05-16T12:53:13","Actor":"RussKie","Number":"4915","RawContent":null,"Title":"Validate input in Application.SetHighDpiMode() method","State":"closed","Body":"As pointed in https://github.com/dotnet/winforms/pull/4911#discussion_r632371636\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4915)","Url":"https://github.com/dotnet/winforms/pull/4915","RelatedDescription":"Closed or merged PR \"Validate input in Application.SetHighDpiMode() method\" (#4915)"},{"Id":"892428098","IsPullRequest":true,"CreatedAt":"2021-05-15T12:45:39","Actor":"dotnet-maestro[bot]","Number":"4920","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210515.2\r\n- **Date Produced**: 5/15/2021 10:58 AM\r\n- **Commit**: 8194ffb2c0973cb1ec549a3c9f0633d0e3d6acad\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21263.11 to 6.0.0-preview.5.21265.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/65bdceb...8194ffb\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4920)","Url":"https://github.com/dotnet/winforms/pull/4920","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4920)"},{"Id":"892427999","IsPullRequest":true,"CreatedAt":"2021-05-15T12:35:07","Actor":"dotnet-maestro[bot]","Number":"4919","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20210514.2\r\n- **Date Produced**: 5/14/2021 6:19 PM\r\n- **Commit**: 42de78a825b575a1ddeb73020a01fb8cd9311d09\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21263.5 to 6.0.0-beta.21264.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21263.5 to 6.0.0-beta.21264.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.21263.5 to 6.0.0-beta.21264.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.21263.5 to 6.0.0-beta.21264.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21263.5 to 6.0.0-beta.21264.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/e8d0df4...42de78a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4919)","Url":"https://github.com/dotnet/winforms/pull/4919","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#4919)"},{"Id":"892234547","IsPullRequest":true,"CreatedAt":"2021-05-14T20:49:25","Actor":"dreddy-work","Number":"4918","RawContent":null,"Title":"Update issue templates","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4918)","Url":"https://github.com/dotnet/winforms/pull/4918","RelatedDescription":"Closed or merged PR \"Update issue templates\" (#4918)"},{"Id":"891869800","IsPullRequest":true,"CreatedAt":"2021-05-14T20:39:06","Actor":"dotnet-maestro[bot]","Number":"4916","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20210513.5\r\n- **Date Produced**: 5/13/2021 7:36 PM\r\n- **Commit**: e8d0df4f35cfa23174fe7204ef958cf5d1b8e797\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21263.1 to 6.0.0-beta.21263.5][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21263.1 to 6.0.0-beta.21263.5][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.21263.1 to 6.0.0-beta.21263.5][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.21263.1 to 6.0.0-beta.21263.5][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21263.1 to 6.0.0-beta.21263.5][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/6b97586...e8d0df4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4916)","Url":"https://github.com/dotnet/winforms/pull/4916","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#4916)"},{"Id":"891870477","IsPullRequest":true,"CreatedAt":"2021-05-14T12:45:44","Actor":"dotnet-maestro[bot]","Number":"4917","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210513.11\r\n- **Date Produced**: 5/14/2021 6:21 AM\r\n- **Commit**: 65bdceb4d47075964bb9d3878c994d020d594068\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21263.1 to 6.0.0-preview.5.21263.11][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/1b09a38...65bdceb\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4917)","Url":"https://github.com/dotnet/winforms/pull/4917","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4917)"},{"Id":"891831983","IsPullRequest":false,"CreatedAt":"2021-05-14T11:06:27","Actor":"SergeySmirnov-Akvelon","Number":"4914","RawContent":null,"Title":"TrackBar control does not support UIA accessibility","State":"open","Body":"**Environment**\r\n- Microsoft Windows [Version 10.0.19041.388]\r\n- .NET Core SDK 6.0.100-preview.3.21202.5\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\n- Yes\r\n\r\n**Problem description**\r\n![image](https://user-images.githubusercontent.com/23376742/118262205-3bcc5e80-b4bd-11eb-9c61-28f98a0ee708.png)\r\n\r\nAccessibility providers:\r\n[pid:9884,providerId:0x280FE0 Main:Nested [pid:28360,providerId:0x280FE0 Main(parent link):Microsoft: MSAA Proxy (unmanaged:UIAutomationCore.dll)]; Nonclient:Microsoft: Non-Client Proxy (unmanaged:uiautomationcore.dll); Hwnd(parent link):Microsoft: HWND Proxy (unmanaged:uiautomationcore.dll)]\r\n\r\n**Expected behavior:**\r\nThere should be UIA accessibility provider from WinForms.\r\n\r\n**Minimal repro:**\r\nCreate WinForms app with TrackBar control and analyze it using Inspect.","Url":"https://github.com/dotnet/winforms/issues/4914","RelatedDescription":"Open issue \"TrackBar control does not support UIA accessibility\" (#4914)"},{"Id":"891781529","IsPullRequest":false,"CreatedAt":"2021-05-14T09:47:56","Actor":"kirsan31","Number":"4913","RawContent":null,"Title":"[regression] PropertyGrid GDI leak ","State":"open","Body":"* .NET Core Version: 5.0.3 - 5.0.6 tested.\r\n\r\n* Have you experienced this same bug with .NET Framework?:  **NO**. Also this bug is **not present** in .net core 3.1\r\n\r\n**Problem description:**\r\nFor several months I am was investigating **huge** (up to critical 10000) GDI leak in our app (beginning after switching from .net core 3.1 to .Net 5). And finally found it out (I am happy :roll_eyes:). Facts:\r\n\r\n- Leaking are DC and Bitmap in approximately the same proportions.\r\n- This is not managed leaks - managed heap have not any increasing elements.  So GC not helping here and if `PropertyGrid` inside childe window, closing it will not help too.\r\n- Leaks are not reproduce on local machine. Only when you **connect** to rdp session. So if your rdp session is open - all is fine, to leak you need close rdp window and connect again. Tested on Win10 1909/20H2 hosts.\r\n- ~~I think amount of leaks are some how related to displaying property's, because some window leak more than others.~~\r\n\r\nhttps://user-images.githubusercontent.com/17767561/118251665-8b585d80-b4b0-11eb-995f-ee2df025bf8c.mp4\r\n\r\nOur scenario was: we have an mdi app with many child windows that's have `PropertyGrid`, for one rdp connect we losing about 100 GDI objects. So, after ~80 connects, our app was crushing. For now we monitor GDI objects count and restarting app when needed.\r\n\r\n**Expected behavior:**\r\nNo GDI leak.\r\n\r\n**Minimal repro:**\r\n[GDI_test.zip](https://github.com/dotnet/winforms/files/6477978/GDI_test.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/4913","RelatedDescription":"Open issue \"[regression] PropertyGrid GDI leak \" (#4913)"},{"Id":"891672233","IsPullRequest":true,"CreatedAt":"2021-05-14T07:01:50","Actor":"SergeySmirnov-Akvelon","Number":"4910","RawContent":null,"Title":"Separating ListViewItemAccessibleObject","State":"open","Body":"Fixes #4748 \r\n\r\n## Proposed changes\r\nDuring the separating of `ListViewAccessibilityObject`, two ways of separating were considered: `View` and `ListViewGroup` presence. \r\nUnfortunately, it makes no sense to separate `ListViewAccessibilityObject` by `View`, since the class contains almost no code specific to any `View`.\r\nA `ListViewAccessibilityObject`  has code specific to the presence or absence of `ListViewGroups`, but the display of a `ListViewGroup` depends on many factors:\r\n`ShowGroups` property;\r\n`VirtualMode` property;\r\n`View` property;\r\n`Groups` property;\r\n`Visual styles`.\r\nKeeping track of all of these factors will lead to the need to add changes that will be much more difficult to support than the current code. Therefore, it was decided to leave the current code for the `ListViewAccessibilityObject`.\r\n\r\nWhen separating the `ListViewItemAccessibleObject`, we took into account how the `ListViewItemAccessibleObject` works with `ListViewGroups` and `ListViewItems` depending on the view.\r\n\r\n**ListViewItemBaseAccessibleObject**\r\nThe `ListViewItemBaseAccessibleObject` class has been added. It contains the implementation for most of the properties and methods of the `ListViewItemAccessibleObject` class. In addition, its implementation fully corresponds to the behavior of elements when the tree is in `LargeIcon` or `SmallIcon` view.\r\n\r\n**ListViewItemListAccessibleObject**\r\nFor the `List` view, an `ListViewItemListAccessibleObject` class has been added. It contains an overridden implementation for the `Bounds` and `RuntimeId` properties and the `FragmentNavigate` method. Since this view does not support `ListViewGroup`, it allows us to remove some unnecessary checks.\r\n\r\n**ListViewItemTileAccessibleObject**\r\nFor the `Tile` mode, an `ListViewItemTileAccessibleObject` class has been added. It contains implementations for methods such as `FragmentNavigate`, `GetChild`, `GetChildInternal`, `GetChildCount`, `GetChildIndex` and `GetSubItemBounds` methods. This is necessary because this mode supports `ListViewSubItems` and has complex logic to work with them. In addition, we have a special method `GetChildInternal`, which is necessary because inside the classes we operate with real indexes of `ListViewSubItems` , and not visible to the user.\r\n\r\n**ListViewItemDetailsAccessibleObject**\r\nFor `Details` mode, the `ListViewItemDetailsAccessibleObject` class has been added. It does not have such overloaded logic for working with `ListViewSubItems` as the `ListViewItemTileAccessibleObject` class, but it has special functionality for working with fake accessibility objects. This is necessary because the user sees the cell and can interact with it, whether there is a `ListViewSubItem` for it or not.\r\n\r\nSince `ListViewSubItems` do not support descendants, and all the logic for interacting with each other is taken from the `ListViewItemAccessibleObjects`, there is no point in separating the `ListViewSubItemAccessibleObject` of the class.\r\n\r\n## Customer Impact\r\n- No\r\n\r\n## Regression? \r\n-  No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- Unit tests\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Inspect \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19041.388]\r\n- .NET Core SDK 6.0.100-preview.3.21202.5\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4910)","Url":"https://github.com/dotnet/winforms/pull/4910","RelatedDescription":"Open PR \"Separating ListViewItemAccessibleObject\" (#4910)"},{"Id":"891593978","IsPullRequest":false,"CreatedAt":"2021-05-14T04:49:52","Actor":"RussKie","Number":"4909","RawContent":null,"Title":"[Proposal] Streamline application configuration and bootstrap","State":"open","Body":"# Overview\r\n\r\nHistorically Windows Forms designer was rendering its design surface based on hardcoded assumptions, such as control default font and dpi settings. However over the past 10-15 years not only multi-monitor configurations became a norm, monitor tech has made significant process making 4K, 5K, 8K, etc. monitors widely used by our consumers. The Windows itself has been innovating and tinkering with UI configurations, such default font metrics, which over the years deviated from \"Microsoft Sans Serif, 8pt\" and now is set to \"Segoe UI, 9pt\".\r\n\r\nThe Windows Forms runtime has been (more or less) keeping up with the changes, e.g.  providing a new API to [set high dpi mode](https://github.com/dotnet/winforms/pull/396), or by updating the [default font](https://github.com/dotnet/winforms/pull/656). The default font change has unearthed numerous issues in the runtime (e.g. different font-based scaling), which we considered addressing by providing (yet another) API to set an [application-wide default font](https://github.com/dotnet/winforms/issues/3001). \r\n\r\nHowever during numerous discussions the team has identified probably the biggest flaw in the current separation of the runtime and the designer, and the overall move from .NET Framework assumptions - the lack of a mechanism to share Windows Forms project-level configuration settings between the runtime and the designer. That is, if the app is configured to run with disabled visual styles, in PerMonitorV2, and have an application-wide default font set to \"Arial, 14pt\" there is no way to show the designer surface with the same settings to truly provide the WYSIWYG experience.\r\n\r\n\r\nFunnily enough Visual Basic apps are in a good position for the designer integration with their Application Framework functionality, i.e. \"*.myapp\" file. The C# project lack this mechanism, and traditionally have been a configuration-code-first approach.\r\n\r\n# Proposal\r\n\r\nThe purpose of this proposal is to \r\n1 **streamline a Windows Forms application configuration and bootstrap**, \r\n2. with the view that this will facilitate the **sharing of the information between the runtime and the designer during the development phase**. That is, whenever the designers surface process is started configuration information is read from a known location, and necessary configurations are applied (e.g. run the design surface in PerMonitorV2 mode, or set a form/usercontrol default font to \"Arial, 14pt\"). ⚠️  **out of scope**, tracked under https://github.com/dotnet/winforms-designer/issues/3192.\r\n\r\n**NOTE:** The new functionality is opt-in, i.e. unless a developer makes a conscience decision to use the new configuration and the bootstrap mechanism existing applications will continue to work as-is, and the current developer experience will remain the same.\r\n\r\n### 1. Visual Basic \r\nFor VB projects this known location is \"myapp\" file.\r\n![image](https://user-images.githubusercontent.com/4403806/114354200-3d9abd80-9bb1-11eb-9d48-a43f299f82e1.png)\r\n\r\nThe designer surface process should have no issues reading configuration values from a myapp file. \r\n\r\n\r\nThere are a number of avenues we can take to facilitate an integrated devex such as:\r\n1. Enhance the VB Application Framework project system component to accommodate `HighDpiMode` and \"default font\" configurations. This requires changes on the VS side (⚠️  **out of scope**, @KlausLoeffelmann is tracking the work separately). \r\n2. In the long run we may consider moving the settings away from the myapp file into vbproj (⚠️  **out of scope**).\r\n3. In mean time myapp file can be updated with a warning stating that values must not be changed outside VS, or having associated manual changes to Application.Designer.vb file. Update/provide better docs. (⚠️  **out of scope**).\r\n\r\n\r\n### Other points for further consideration:\r\n- How to read app.manifest/app.config for dpi values. See \"How to resolve dpi settings?\" below.\r\n\r\nThe final decision is TBD. /cc: @KlausLoeffelmann @KathleenDollard \r\n\r\n### 2. C#\r\n\r\n```diff\r\n    static class Program\r\n    {\r\n        [STAThread]\r\n        static void Main()\r\n        {\r\n+           ProjectConfiguration.Initialize();\r\n\r\n-           Application.EnableVisualStyles();\r\n-           Application.SetDefaultFont(new Font(....));\r\n-           Application.SetHighDpiMode(HighDpiMode.PerMonitorV2);\r\n\r\n            Application.SetCompatibleTextRenderingDefault(false);\r\n            Application.Run(new MainForm());\r\n       }\r\n    }\r\n```\r\n\r\nNew MSBuild properties:\r\n\r\n```diff\r\n// proj\r\n\r\n  <PropertyGroup>\r\n+    <ApplicationVisualStyles>[true|false, default=true]</ApplicationVisualStyles>\r\n+    <ApplicationFontName>[Font family name, string, default='', i.e. Control.DefaultFont]</ApplicationFontName>\r\n+    <ApplicationFontSize>[Font size, float, default=9]</ApplicationFontSize>\r\n+    <ApplicationHighDpiMode>[dpi mode, string/HighDpiMode enum value, default=PerMonitorV2]</ApplicationHighDpiMode>\r\n  </PropertyGroup>\r\n\r\n```\r\n\r\nExisting properties of interest:\r\n\r\n```xml\r\n// proj\r\n\r\n  <PropertyGroup>\r\n    <OutputType>WinExe</OutputType>\r\n    <ApplicationManifest>[manifest file, optional, default='']</ApplicationManifest>\r\n    <StartupObject>[startup type, optional, default='']</StartupObject>\r\n  </PropertyGroup>\r\n\r\n```\r\n\r\nFor C# projects the issue is little more involved. There are several candidates for storing settings, such as a csproj file, an app.config or a new configuration file.\r\nAfter deliberations and discussions we propose the settings to be stored in the csproj file for the following reasons:\r\n- The designer surface process should have no issues reading configuration values from a myapp file.\r\n- Unlike schema enforced app.config, a csproj can contain an arbitrary set of settings, easily manageable and available to MSBuild process.\r\n- app.configs don't appear to be very popular in .NET apps.\r\n- Whilst developers who build their apps on .NET Framework 4.7+ maybe familiar with [app.config ApplicationConfigurationSection](https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/winforms/windows-forms-add-configuration-element) and/or [app.config AppContextSwitchOverrides](https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element), we have removed all dependencies on app.config and these quirks which those two provided in .NET Core 3.0 timeframe.\r\n  > 💭  It is also worth noting that quirks were necessary in .NET Framework, which was installed in-place, and didn't provided any kind of side-by-side deployment. In a rare and unfortunate event where we may accidentally break end users experiences in a given release users will be able to install a previous working .NET release and run their application against it until a fix becomes available.\r\n- whilst there maybe an argument that app.config can be changed by users, thus altering behaviours of applications, and changes to csproj will require a recompilation, it is also worth noting that our SDK is built with developers in mind, and not the ability of users to alter the application behaviours at will. If an app developer feels it is important to allow the app users to change the default font or dpi settings via an app.config it is the developers responsibility to facilitate that mechanism to the users.\r\n\r\n\r\n\r\nThe runtime portion will leverage source generators to read configurations from the csproj, and emit code for the necessary API, e.g. call `Application.SetHighDpiMode(HighDpiMode.PerMonitorV2)` and `Application.SetDefaultFont(\"Arial, 14pt\")`.\r\n![image](https://user-images.githubusercontent.com/4403806/114354384-8488b300-9bb1-11eb-855a-b58e80953793.png)\r\n\r\nWith that we will be able to leverage the power of Roslyn analyzers to warn developers about duplicate/redundant API invocations performed outside the generated code.\r\n\r\n### 3. Visual Studio (out of scope)\r\nTo complete the user experience we can consider leveraging (e.g. copying) VBAF property pages and provide the same experience to C# developers.\r\n\r\n# How to resolve dpi settings?\r\n\r\nAt this point an astute Windows Forms developer will say that there are currently 3 different ways to configure dpi settings (which may or may not be mutually exclusive or complimentary):\r\n* [app.manifest](https://docs.microsoft.com/windows/win32/sbscs/application-manifests) - Common Control related configuration, dealing with it was always a pain. Very likely that a significant part of Windows Forms developers have never heard of it.\r\n* [app.config ApplicationConfigurationSection](https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/winforms/windows-forms-add-configuration-element) and [app.config AppContextSwitchOverrides](https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element).\r\n* [`Application.SetHighDpiMode(HighDpiMode)`](https://docs.microsoft.com/dotnet/api/system.windows.forms.application.sethighdpimode).\r\n\r\nThis proposal introduces a 4th way of configuring dpi, and to make it successful it has to (paraphrasing JRR Tolkien):\r\n\r\n> _One API to rule them all, One API to find them,_\r\n> _One API to bring them all and in the ProjectConfiguration bind them..._\r\n\r\nThe benefit the new approach provides is by facilitating the sharing of the information between the runtime and the designer during the development phase, as well as unifying how dpi settings are configured. This benefit is believed to outweigh the need to remove several lines of code from `Main()` method and adding several properties into a `cspoj` file (on the VB side all the information is captured in myapp).\r\n\r\n\r\nHere's how we plan to resolve a project's dpi settings:\r\n\r\n1. ~If a custom app.manifest is specified, read it. It takes the precedence as it is used when the process is created, before Windows Forms runtime gets involved.~ \r\n If a custom app.manifest is specified, parse it, and if dpi-related settings are found - warn the user, and direct to supply the dpi mode via the MSBuild property defined above.\r\n2. ~Since the runtime no longer reads any settings from the app.config we will ignore it. It is possible to use Roslyn analyzers to warn a developer that app.config switches are no longer supported.~ \r\nConsider checking for app.config and dpi-related configurations, if found - warn the user, and direct to supply the dpi mode via the MSBuild property defined above.\r\n3. ~Also check for `Application.SetHighDpiMode(HighDpiMode)` in the application's entry method - either the default `static void Main()` or as specified by `StartupObject` property.~ \r\nCheck the application's entry method (- )either the default `static void Main()` or as specified by `StartupObject` property) for presence of the methods `ProjectConfiguration` is automating. If found - warn the user, and direct to remove.\r\n4. ~If there are multiple values are detected warn the developer.~\r\n5. If no values are detected - use a default value we agree upon (e.g. `PerMonitorV2`).\r\n\r\n# Other considerations\r\n\r\n* The new source generator project will form a new Windows Forms artifact, and will be part of Windows Desktop bundle. It will also need to be references by a Windows Forms C# project by default.\r\n* The default C# template will need to be updated to replace the current project configurations with the new source generated method.\r\n* Plan the Roslyn analyzers taxonomy for warnings/errors, and other related considerations.","Url":"https://github.com/dotnet/winforms/issues/4909","RelatedDescription":"Open issue \"[Proposal] Streamline application configuration and bootstrap\" (#4909)"},{"Id":"891532885","IsPullRequest":false,"CreatedAt":"2021-05-14T02:07:08","Actor":"RussKie","Number":"4908","RawContent":null,"Title":"Support designer capabilities at runtime","State":"open","Body":"# Context\r\n\r\nThe Windows Forms SDK consist of two distinct parts – the **runtime** (the code that executes, open sourced in this repo) and the **designer** (consists of the \"_general purpose_\" and \"_Visual Studio-specific_\"  components, close sourced). In .NET Framework these two parts lived together, and that allowed customers to invoke and use VS-specific functionality. Skip forward to .NET Core/.NET and these two components are now split and evolve (for the most part) independently of each other.\r\n \r\nThe more and more customers are starting to migrate their apps to .NET the more we see the demand to the missing designer capabilities to be ported over to .NET (e.g. #1395, #2573, #4456, #4886, #4887, [AB#1314797](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1314797)).\r\n\r\n\r\n# In scope:\r\n\r\nHowever we need to port the general purpose designer infrastructure – i.e. API that enable building \"_a designer that the user can embed in their application_\". For example, a user might have a business application that contains a report designer feature, which can use our \"general designer\" framework.\r\n\r\n* The following designers are currently available (though may have restricted or incomplete functionality):\r\n  - [x] System.ComponentModel.Design.ComponentDesigner\r\n  - [x] System.Windows.Forms.Design.DocumentDesigner (#122)\r\n  - [x] System.Windows.Forms.Design.FormDocumentDesigner (#681)\r\n  - [x] System.Windows.Forms.Design.MaskedTextBoxDesigner\r\n  - [x] System.Windows.Forms.Design.ParentControlDesigner (#122)\r\n  - [x] System.Windows.Forms.Design.ScrollableControlDesigner (#122)\r\n  - [x] System.Windows.Forms.Design.TextBoxBaseDesigner\r\n  - [x] System.Windows.Forms.Design.ToolStripDesigner\r\n  - [x] System.Windows.Forms.Design.ToolStripDropDownDesigner\r\n  - [x] System.Windows.Forms.Design.ToolStripItemDesigner\r\n  - [x] System.Windows.Forms.Design.ToolStripMenuItemDesigner\r\n \r\n* The following designers are missing and will be ported in scope of #4860:\r\n  - [x] System.Windows.Forms.Design.ButtonBaseDesigner\r\n  - [x] System.Windows.Forms.Design.ControlDesigner\r\n  - [x] System.Windows.Forms.Design.DocumentDesigner - functionality restored\r\n  - [x] System.Windows.Forms.Design.LabelDesigner\r\n  - [x] System.Windows.Forms.Design.ParentControlDesigner - functionality restored\r\n  - [x] System.Windows.Forms.Design.ScrollableControlDesigner - functionality restored\r\n  - [x] System.Windows.Forms.Design.TextBoxDesigner\r\n  - [x] System.Windows.Forms.Design.ComboBoxDesigner\r\n  - [x] System.Windows.Forms.Design.GroupBoxDesigner\r\n  - [x] System.Windows.Forms.Design.ListBoxDesigner\r\n  - [x] System.Windows.Forms.Design.ListViewDesigner\r\n  - [x] System.Windows.Forms.Design.PanelDesigner\r\n  - [x] System.Windows.Forms.Design.PictureBoxDesigner\r\n  - [x] System.Windows.Forms.Design.RadioButtonDesigner\r\n  - [x] System.Windows.Forms.Design.RichTextBoxDesigner\r\n  - [x] System.Windows.Forms.Design.TreeViewDesigner\r\n  - [x] System.Windows.Forms.Design.UpDownBaseDesigner\r\n  - [x] System.Windows.Forms.Design.UserControlDocumentDesigner\r\n\r\n\r\n\r\n# Open for consideration\r\n\r\nThe following API may be considered for porting upon significant demand and real use cases.\r\n\r\n* The following designers:\r\n  - [ ] System.Windows.Forms.Design.DateTimePickerDesigner\r\n  - [ ] System.Windows.Forms.Design.FlowLayoutPanelDesigner\r\n  - [ ] System.Windows.Forms.Design.MonthCalendarDesigner\r\n  - [ ] System.Windows.Forms.Design.PrintDialogDesigner\r\n  - [ ] System.Windows.Forms.Design.TableLayoutPanelDesigner\r\n  - [ ] System.Windows.Forms.Design.TabControlDesigner\r\n  - [ ] System.Windows.Forms.Design.TabPageDesigner\r\n* Missing editors for the ported designers, see the list in #2411\r\n\r\n# Out of scope\r\n\r\n* Back-porting of the missing types in .NET Core 3.1 or .NET 5.0, because both of these are going out of support shortly after .NET 6.0 is released.\r\n* The VS-specific designer functionality will not be made available, because it makes no sense outside the VS. \r\n* Databinding\r\n* Advanced databinding designers and editors\r\n* The following designers:\r\n  - [ ] System.Windows.Forms.Design.AxDesigner\r\n  - [ ] System.Windows.Forms.Design.AxHostDesigner\r\n  - [ ] System.Windows.Forms.Design.BindingNavigatorDesigner\r\n  - [ ] System.Windows.Forms.Design.BindingSourceDesigner\r\n  - [ ] System.Windows.Forms.Design.DataGridViewColumnDesigner\r\n  - [ ] System.Windows.Forms.Design.DataGridViewComboBoxColumnDesigner\r\n  - [ ] System.Windows.Forms.Design.DataGridViewDesigner\r\n  - [ ] System.Windows.Forms.Design.FolderBrowserDialogDesigner\r\n  - [ ] System.Windows.Forms.Design.ImageListDesigner\r\n  - [ ] System.Windows.Forms.Design.NotifyIconDesigner\r\n  - [ ] System.Windows.Forms.Design.PropertyGridDesigner\r\n  - [ ] System.Windows.Forms.Design.SplitContainerDesigner\r\n  - [ ] System.Windows.Forms.Design.SplitterDesigner\r\n  - [ ] System.Windows.Forms.Design.SplitterPanelDesigner\r\n  - [ ] System.Windows.Forms.Design.ToolStripContainerDesigner\r\n  - [ ] System.Windows.Forms.Design.ToolStripContentPanelDesigner\r\n  - [ ] System.Windows.Forms.Design.ToolStripPanelDesigner\r\n  - [ ] System.Windows.Forms.Design.TrackBarDesigner\r\n  - [ ] System.Windows.Forms.Design.WebBrowserDesigner ","Url":"https://github.com/dotnet/winforms/issues/4908","RelatedDescription":"Open issue \"Support designer capabilities at runtime\" (#4908)"},{"Id":"891465277","IsPullRequest":true,"CreatedAt":"2021-05-14T00:05:53","Actor":"RussKie","Number":"4907","RawContent":null,"Title":"Disabled flaky tests to enable release build","State":"closed","Body":"A follow up on #4904\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4907)","Url":"https://github.com/dotnet/winforms/pull/4907","RelatedDescription":"Closed or merged PR \"Disabled flaky tests to enable release build\" (#4907)"},{"Id":"891404757","IsPullRequest":false,"CreatedAt":"2021-05-13T21:41:02","Actor":"Tanya-Solyanik","Number":"4906","RawContent":null,"Title":"Investigate HtmlDocument tests that set focus to the document","State":"open","Body":"`HtmlDocument_Focused_GetFocused_ReturnsExpected` and `HtmlDocument_Focus_Invoke_Success` tests are failing with inconsistent errors. Sometimes IHtmlDocument4.Focus succeeds and sometimes it does not.\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=1137942&view=ms.vss-test-web.build-test-results-tab&runId=34524282&resultId=103045&paneView=debug\r\n```\r\nAssert.True() Failure\\r\\nExpected: True\\r\\nActual:   False\r\n\r\n\r\nStack trace\r\n   at System.Windows.Forms.Tests.HtmlDocumentTests.HtmlDocument_Focused_GetFocused_ReturnsExpected() in D:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\HtmlDocumentTests.cs:line 648\r\n--- End of stack trace from previous location ---\r\n```\r\nand sometimes\r\nhttps://dev.azure.com/dnceng/internal/_build/results?buildId=1137596&view=ms.vss-test-web.build-test-results-tab&runId=34521092&resultId=107894&paneView=debug\r\n```\r\nAssert.False() Failure\\r\\nExpected: False\\r\\nActual:   True\r\n\r\n\r\nStack trace\r\nat System.Windows.Forms.Tests.HtmlDocumentTests.HtmlDocument_Focused_GetFocused_ReturnsExpected() in /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/HtmlDocumentTests.cs:line 644\r\n--- End of stack trace from previous location ---\r\n```\r\n","Url":"https://github.com/dotnet/winforms/issues/4906","RelatedDescription":"Open issue \"Investigate HtmlDocument tests that set focus to the document\" (#4906)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-05-19T05:30:39.6524199Z","RunDurationInMilliseconds":585}