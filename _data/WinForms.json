{"Data":{"GitHub":{"Issues":[{"Id":"1463657349","IsPullRequest":false,"CreatedAt":"2022-11-24T17:37:14","Actor":"rickbrew","Number":"8280","RawContent":null,"Title":"Major regression in Form.ShowDialog(IWin32Window) in .NET 7 -- ship blocker for Paint.NET 5.0","State":"open","Body":"### .NET version\n\n7.0.0\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, it worked fine in .NET 5 and .NET 6\n\n### Issue description\n\nWhen `Form.ShowDialog(IWin32Window)` is called with a `Control` instead of a `Form`, the dialog's parenting/ownership is not set correctly, causing the dialog to not \"track\" with the parent form correctly.\r\n\r\nThe most visible symptom of this is that if you switch between virtual desktops, the parent form is correctly hidden but the dialog is not. And, it is possible to interact with the main window in certain ways. In my app (Paint.NET), it is possible to switch between images by using the taskbar (kind of like how IE/Edge used to let you switch between tabs). This is normally prevented when a modal dialog is active, but right now it's not. This can result in actions affecting the wrong image, which then corrupts the state of the image's change history and causes data loss.\r\n\r\nAnother symptom is that the `Owner` for the dialog is `null`, even though it should probably be `control.FindForm()`\r\n\r\n**This is currently a ship-blocker for Paint.NET 5.0 on .NET 7**. I cannot release the new version with this bug.\r\n\r\nKnown workaround: use `dialog.ShowDialog(control.FindForm()` instead of `dialog.ShowDialog(control)`. However, this requires changes to _many_ places in the code, and is not a fix I can apply to libraries or plugins.\r\n\r\nI believe this regressed due to https://github.com/dotnet/winforms/pull/3394 cc @dreddy-work which changed whether `Owner` was set _or_ `SetWindowLong(..., GWL.HWNDPARENT, ...)` was called. Previously, `SetWindowLong` was always called.\n\n### Steps to reproduce\n\nCreate a Form and do `Application.Run(form)`. Make sure the Form has at least 1 child control, like a `button`.\r\nIn some code within the form, like in the `button`'s click handler, create another Form and call `dialog.ShowDialog(button)`\r\nWhile the dialog is open, switch between virtual desktops using WinKey+Shift+Left/Right\r\n","Url":"https://github.com/dotnet/winforms/issues/8280","RelatedDescription":"Open issue \"Major regression in Form.ShowDialog(IWin32Window) in .NET 7 -- ship blocker for Paint.NET 5.0\" (#8280)"},{"Id":"1463317115","IsPullRequest":true,"CreatedAt":"2022-11-24T13:35:17","Actor":"dotnet-maestro[bot]","Number":"8279","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221123.9\r\n- **Date Produced**: November 24, 2022 7:49:54 AM UTC\r\n- **Commit**: 78b3f9ddfab76eb99cd02c2744d3c2d055ed7270\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22572.6 to 8.0.0-alpha.1.22573.9][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/ce06592...78b3f9d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8279)","Url":"https://github.com/dotnet/winforms/pull/8279","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8279)"},{"Id":"1463315606","IsPullRequest":true,"CreatedAt":"2022-11-24T13:29:02","Actor":"dotnet-maestro[bot]","Number":"8278","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20221122.5\r\n- **Date Produced**: November 22, 2022 10:18:30 PM UTC\r\n- **Commit**: 37095730a5eebb50fed86a0d3013d90408a05609\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.22554.2 to 8.0.0-beta.22572.5][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.22554.2 to 8.0.0-beta.22572.5][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.22554.2 to 8.0.0-beta.22572.5][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.22554.2 to 8.0.0-beta.22572.5][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.22554.2 to 8.0.0-beta.22572.5][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.22554.2 to 8.0.0-beta.22572.5][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/80b6be4...3709573\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8278)","Url":"https://github.com/dotnet/winforms/pull/8278","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#8278)"},{"Id":"1462907680","IsPullRequest":false,"CreatedAt":"2022-11-24T07:50:38","Actor":"Nora-Zhou01","Number":"8277","RawContent":null,"Title":"[Multi-Monitor][PerMonitorV2]ToolStripTextBox and ToolStripComBoBox in the toolbar do not scale well when bringing items down from 100% to 300%","State":"open","Body":"### .NET version\r\n\r\n8.0.100-alpha.1.22567.28\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo, it also repro on .NET 6.0 & 7.0.\r\n\r\n### Issue description\r\n\r\nThe ToolStripTextBox and ToolStripComBoBox in Toolstrip  are not scaled well when moving from 100% primary monitor to 300% secondary monitor.\r\n![1111](https://user-images.githubusercontent.com/104609169/203720027-3a47fbf9-ef42-4e39-a037-626077137cca.png)\r\n\r\n\r\n### Steps to reproduce\r\n\r\n1. Launch VS instance on 100% primary screen.\r\n2. Create a WinForms .NET core project.\r\n3. Add  <ApplicationHighDpiMode>PerMonitorV2</ApplicationHighDpiMode>  in csproj file.\r\n4. Drag and drop a MenuStrip control. \r\n5. Add child controls MenuItem, TextBox, ComboBox respectively \r\n6. Build and run the project.\r\n7. Move to 300% secondary monitor and observe.\r\n\r\n\r\n\r\n**Actual result:**\r\nHScrollBar control is not scaled well when move from 100% primary to 300% secondary monitor.\r\n300% primary monitor:\r\n![1111](https://user-images.githubusercontent.com/104609169/203721681-c5107ab1-f166-4c54-a393-ace943b419eb.png)\r\n\r\n**Expected result:**\r\nThe ToolStripTextBox and ToolStripComBoBox in Toolstrip  should be scaled well when move from 100% primary screen to 300% secondary monitor.\r\n![2222222](https://user-images.githubusercontent.com/104609169/203722342-1c3dac52-7151-4a50-9a4e-b3a31174c187.png)\r\n\r\n\r\n**More Info:**\r\n\r\n1. This issue also repro on .NET7.0, .NET6.0.\r\n2. This issue doesn't repro on .NET Framework.\r\n3. ToolStripTextBox and ToolStripComBoBox in the toolbar do not scale well when bringing items down from 300% to 100%,but the result changes.\r\n![image](https://user-images.githubusercontent.com/104609169/203726717-5d232248-6d44-47af-9fea-6ada1fc24e02.png)","Url":"https://github.com/dotnet/winforms/issues/8277","RelatedDescription":"Open issue \"[Multi-Monitor][PerMonitorV2]ToolStripTextBox and ToolStripComBoBox in the toolbar do not scale well when bringing items down from 100% to 300%\" (#8277)"},{"Id":"1462601878","IsPullRequest":true,"CreatedAt":"2022-11-24T00:41:23","Actor":"elachlan","Number":"8276","RawContent":null,"Title":"Refactor GetStandardValues implementations to remove ArrayList","State":"open","Body":"Related #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8276)","Url":"https://github.com/dotnet/winforms/pull/8276","RelatedDescription":"Open PR \"Refactor GetStandardValues implementations to remove ArrayList\" (#8276)"},{"Id":"1462567311","IsPullRequest":true,"CreatedAt":"2022-11-23T23:52:15","Actor":"elachlan","Number":"8275","RawContent":null,"Title":"Refactor `BindingSource` to remove `ArrayList`","State":"open","Body":"Related #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8275)","Url":"https://github.com/dotnet/winforms/pull/8275","RelatedDescription":"Open PR \"Refactor `BindingSource` to remove `ArrayList`\" (#8275)"},{"Id":"1462505754","IsPullRequest":true,"CreatedAt":"2022-11-23T22:51:13","Actor":"elachlan","Number":"8274","RawContent":null,"Title":"Refactor `AxHost` to remove `ArrayList`","State":"open","Body":"This change refactors AxHost to remove arraylist and simplifies some Dictionary<Control, Control> to Hashset<Control>.\r\n\r\nRelated #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8274)","Url":"https://github.com/dotnet/winforms/pull/8274","RelatedDescription":"Open PR \"Refactor `AxHost` to remove `ArrayList`\" (#8274)"},{"Id":"1460910591","IsPullRequest":true,"CreatedAt":"2022-11-23T22:09:59","Actor":"elachlan","Number":"8258","RawContent":null,"Title":"Refactor `ToolboxItem` to remove `ArrayList`","State":"closed","Body":"Related #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8258)","Url":"https://github.com/dotnet/winforms/pull/8258","RelatedDescription":"Closed or merged PR \"Refactor `ToolboxItem` to remove `ArrayList`\" (#8258)"},{"Id":"1462311807","IsPullRequest":true,"CreatedAt":"2022-11-23T20:05:40","Actor":"dreddy-work","Number":"8273","RawContent":null,"Title":"Update MicrosoftCodeAnalysisPackagesVersion for compliance","State":"closed","Body":"Internal build is failing with compliance on one of the dependencies.  This version is not updated by arcade.\r\n\r\nrefer: https://dev.azure.com/dnceng/internal/_componentGovernance/dotnet-winforms/alert/7454535?typeId=6663759&pipelinesTrackingFilter=0\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8273)","Url":"https://github.com/dotnet/winforms/pull/8273","RelatedDescription":"Closed or merged PR \"Update MicrosoftCodeAnalysisPackagesVersion for compliance\" (#8273)"},{"Id":"1461723661","IsPullRequest":true,"CreatedAt":"2022-11-23T18:19:41","Actor":"dotnet-maestro[bot]","Number":"8271","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20221122.6\r\n- **Date Produced**: November 23, 2022 11:45:31 AM UTC\r\n- **Commit**: ce06592c8277d78299e60a634b4431f68c5834b6\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22571.7 to 8.0.0-alpha.1.22572.6][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/dd0ec94...ce06592\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8271)","Url":"https://github.com/dotnet/winforms/pull/8271","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8271)"},{"Id":"1460949967","IsPullRequest":true,"CreatedAt":"2022-11-23T17:55:58","Actor":"elachlan","Number":"8261","RawContent":null,"Title":"Refactor `ControlCodeDomSerializer` to remove `ArrayList`","State":"closed","Body":"Related #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8261)","Url":"https://github.com/dotnet/winforms/pull/8261","RelatedDescription":"Closed or merged PR \"Refactor `ControlCodeDomSerializer` to remove `ArrayList`\" (#8261)"},{"Id":"1462087897","IsPullRequest":true,"CreatedAt":"2022-11-23T16:49:30","Actor":"Jericho","Number":"8272","RawContent":null,"Title":"Refactor DesignerHost to use Dictionary<IComponent, IDesigner> instead of Hashtable","State":"open","Body":"Related: #8143 \n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8272)","Url":"https://github.com/dotnet/winforms/pull/8272","RelatedDescription":"Open PR \"Refactor DesignerHost to use Dictionary<IComponent, IDesigner> instead of Hashtable\" (#8272)"},{"Id":"1461486228","IsPullRequest":false,"CreatedAt":"2022-11-23T10:34:25","Actor":"MandiMan","Number":"8270","RawContent":null,"Title":"[Multi-Monitor][PerMonitorV2]HScrollBar is not scaled well on secondary screen","State":"open","Body":"### .NET version\r\n\r\n8.0.100-alpha.1.22567.28\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo, it also repro on .NET 6.0 & 7.0.\r\n\r\n### Issue description\r\n\r\nHScrollBar control is not scaled well in secondary screen under PermonitorV2 mode.\r\n\r\n### Steps to reproduce\r\n\r\n1. Launch VS instance on 300% primary monitor. \r\n2. Create a winforms .net core project. \r\n3. Add` <ApplicationHighDpiMode>PerMonitorV2</ApplicationHighDpiMode>` in csproj file.\r\n4. Drag and drop a HScrollBar control. \r\n5. Build and run. \r\n6. Move to 100% secondary monitor. \r\n\r\nOr:\r\n\r\n1. Extract and open [HScrollBar.zip](https://github.com/dotnet/winforms/files/10074564/HScrollBar.zip)on 300% primary screen.\r\n2. Build and run it\r\n3. Move to 100% secondary monitor.\r\n\r\n**Actual result:**\r\nHScrollBar control is not scaled well when move from 300% primary to 100% secondary monitor.\r\n300% primary monitor:\r\n![image](https://user-images.githubusercontent.com/108860782/203524161-e4c353b1-7aff-4f1f-a60d-62e6dbb690ef.png)\r\nMove to 100% secondary monitor:\r\n![image](https://user-images.githubusercontent.com/108860782/203523940-eed32049-e3b0-4148-aa05-1aa622137898.png)\r\n\r\n**Expected result:**\r\nHScrollBar control should be scaled well when move from 300% primary screen to 100% secondary monitor.\r\n![image](https://user-images.githubusercontent.com/108860782/203524466-c4b75e47-c552-457e-b1a7-7414cf2a79e0.png)\r\n\r\n**More Info:**\r\n\r\n1. This issue also repro on .NET7.0, .NET6.0.\r\n2. This issue doesn't repro on .NET Framework.\r\n3. This issue doesn't repro on SystemAware and DpiUnware mode.\r\n4. This issue also repro on moved VS from 100% primary to 300% secondary. When move to 300% secondary screen, HScrollBar is also not scaled well, It may get bigger or disappear. Gif as follows：\r\n\r\nhttps://user-images.githubusercontent.com/108860782/203524982-b893635d-d875-4fcf-8d52-ce5eed0767b6.mp4\r\n","Url":"https://github.com/dotnet/winforms/issues/8270","RelatedDescription":"Open issue \"[Multi-Monitor][PerMonitorV2]HScrollBar is not scaled well on secondary screen\" (#8270)"},{"Id":"1461321288","IsPullRequest":false,"CreatedAt":"2022-11-23T09:02:22","Actor":"MandiMan","Number":"8269","RawContent":null,"Title":"[Multi-Monitor][PerMonitorV2] ListBox with multiple items are not scaled well on 300% secondary monitor","State":"open","Body":"### .NET version\r\n\r\n8.0.100-alpha.1.22567.28\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo, it also repro on .NET 6.0 & 7.0.\r\n\r\n### Issue description\r\n\r\n ListBox with multiple items are not scaled well when move from 100% primary to 300% secondary monitor (AutoScaleMode = Dpi) under PermonitorV2 mode .\r\n\r\n### Steps to reproduce\r\n\r\n1. Launch VS instance on 100% primary monitor. \r\n2. Create a winforms .net core project.\r\n3. Add `<ApplicationHighDpiMode>PerMonitorV2</ApplicationHighDpiMode>` in csproj file.\r\n4. Change AutoScaleMode = Dpi.\r\n5. Drag and drop a ListBox control and add multiple items. \r\n6. Build and run. \r\n7. Move to 300% secondary monitor. \r\n\r\nOr:\r\n\r\n1. Extract and open [ListBox.zip](https://github.com/dotnet/winforms/files/10074229/ListBox.zip)on 100% primary screen.\r\n2. Build and run it\r\n3. Move to 300% secondary monitor.\r\n\r\n**Actual result:**\r\nListBox control with multiple items displaying one less line when move from 100% primary to 300% secondary monitor.\r\n100% primary monitor:\r\n![image](https://user-images.githubusercontent.com/108860782/203503307-ef71a455-dabc-4415-a8c7-d8a32f1d0c1f.png)\r\n\r\nMove to 300% secondary monitor:\r\n![image](https://user-images.githubusercontent.com/108860782/203503989-ba2833fb-8ce2-40a7-a1e7-39312b0c142d.png)\r\n\r\n**Expected result:**\r\nListBox control should scaled well.\r\n100% primary monitor:\r\n![image](https://user-images.githubusercontent.com/108860782/203503307-ef71a455-dabc-4415-a8c7-d8a32f1d0c1f.png)\r\n\r\nMove to 300% secondary monitor:\r\n![image](https://user-images.githubusercontent.com/108860782/203503307-ef71a455-dabc-4415-a8c7-d8a32f1d0c1f.png)\r\n\r\n**More Info:**\r\n\r\n1. This issue also repro on .NET7.0, .NET6.0.\r\n2. This issue doesn't repro on .NET Framework. \r\n3. This issue doesn't repro when AutoScaleMode = Font. \r\n4. This issue doesn't repro on SystemAware and DpiUnware mode.\r\n","Url":"https://github.com/dotnet/winforms/issues/8269","RelatedDescription":"Open issue \"[Multi-Monitor][PerMonitorV2] ListBox with multiple items are not scaled well on 300% secondary monitor\" (#8269)"},{"Id":"1461304827","IsPullRequest":false,"CreatedAt":"2022-11-23T08:53:47","Actor":"Ashley-Li","Number":"8268","RawContent":null,"Title":"[Multi-Monitor][PerMonitorV2] The icons of PropertyGrid control are not scaled well on 100% secondary monitor ","State":"open","Body":"### .NET version\n\n.NET 8.0.100-alpha.1.22572.7\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, it also repro on .NET 6.0 & 7.0.\n\n### Issue description\n\n[PerMonitorV2] [Multi-Monitor] The icons of PropertyGrid control are not scaled well when moving from 300% primary monitor to 100% secondary monitor.\r\n![image](https://user-images.githubusercontent.com/56664234/203504214-4a6c00bd-91e7-496a-99e7-0834dd7db364.png)\n\n### Steps to reproduce\n\n1. Launch VS instance on 300% primary screen.\r\n2. Create a WinForms .NET core project.\r\n3. Add` <ApplicationHighDpiMode>PerMonitorV2</ApplicationHighDpiMode>` in csproj file.\r\n4. Drag and drop a PropertyGrid control to form designer and set its SelectedObject property is Form1.\r\n5. Build and run the project.\r\n6. Move to 100% secondary monitor and observe.\r\n\r\nOr\r\n\r\n1. Extract and open  [TestApp.zip](https://github.com/dotnet/winforms/files/10073776/TestApp.zip)   on 300% primary monitor.\r\n2. Build and run the project.\r\n3. Move to 100% secondary monitor and observe.\r\n\r\n**Actual result:**\r\nThe icons of PropertyGrid control are not scaled well on 100% secondary monitor. \r\n![image](https://user-images.githubusercontent.com/56664234/203504285-74098b0e-108d-4456-bb5d-eaaa5997cd9d.png)\r\n\r\n**Expected result:**\r\nThe icons of PropertyGrid control should be scaled well on 100% secondary monitor.\r\n![image](https://user-images.githubusercontent.com/56664234/203505071-cd5515d2-0579-4dbb-b4e7-15004451d3ed.png)\r\n\r\n\r\n**More Info:**\r\n1. This issue is not repro on  move 100% primary to 300% secondary.\r\n2. This issue also repro on .NET 6.0 & 7.0.\r\n3. This issue not repro on framework project.\r\n4. This issue doesn't repro on SystemAware and DpiUnware mode.","Url":"https://github.com/dotnet/winforms/issues/8268","RelatedDescription":"Open issue \"[Multi-Monitor][PerMonitorV2] The icons of PropertyGrid control are not scaled well on 100% secondary monitor \" (#8268)"},{"Id":"1461259527","IsPullRequest":false,"CreatedAt":"2022-11-23T08:17:51","Actor":"Philip-Wang01","Number":"8267","RawContent":null,"Title":"[Multi-Monitor][PermonitorV2] CheckedListBox is not display scrollbar on secondary screen ","State":"open","Body":"### .NET version\r\n\r\n.NET 8.0.100-alpha.1.225727.7\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo, it also repro on .NET 6.0 & 7.0.\r\n\r\n### Issue description\r\n\r\nCheckedListBox is not display scrollbar when move from 100% primary to 300% secondary monitor.\r\n![image](https://user-images.githubusercontent.com/86937911/203498208-71d91ccd-555f-4876-9146-618b50fc7430.png)\r\n\r\n\r\n### Steps to reproduce\r\n\r\n1. Launch VS instance on 100% primary screen.\r\n2. Create a WinForms .NET Core project.\r\n3. Add PerMonitorV2 in csproj file.\r\n4. Drag and drop a checkedlistbox control to form designer and add multiple items make sure control has scrollbar.\r\n5. Build and run it, move to 300% secondary monitor.\r\n\r\nOr:\r\n\r\n1. Extract and open [Testcheckedlistbox.zip](https://github.com/dotnet/winforms/files/10073672/Testcheckedlistbox.zip) on 100% primary screen.\r\n2. Build and run it, move to 300% secondary monitor.\r\n\r\n**Actual result:**\r\nCheckedListBox is not display scrollbar when move from 100% primary to 300% secondary monitor.\r\n![image](https://user-images.githubusercontent.com/86937911/203498208-71d91ccd-555f-4876-9146-618b50fc7430.png)\r\n\r\n**Expected result:**\r\nCheckedListBox should display scrollbar when move from 100% primary to 300% secondary monitor.\r\n![image](https://user-images.githubusercontent.com/86937911/203498924-78fc3b60-1870-48fb-bfe9-150f5cb8219f.png)\r\n\r\n**More info:**\r\n1. This issue doesn't repro on SystemAware and DpiUnware mode.\r\n2. This issue does not repro on move from 300% primary screen to 100% secondary monitor.\r\n3. **The scrollbar is redisplayed when the mouse is dragged over the CheckedListBox on the secondary monitor.**\r\n\r\nhttps://user-images.githubusercontent.com/86937911/203501522-06bed95c-2385-4a2b-a62c-8364180be2b5.mp4\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/8267","RelatedDescription":"Open issue \"[Multi-Monitor][PermonitorV2] CheckedListBox is not display scrollbar on secondary screen \" (#8267)"},{"Id":"1461173027","IsPullRequest":false,"CreatedAt":"2022-11-23T07:11:02","Actor":"Philip-Wang01","Number":"8266","RawContent":null,"Title":"[Multi-Monitor][PermonitorV2] Buttons are not not scaled well (with Anchor=Top,Bottom) when move from 300% primary screen to 100% secondary monitor","State":"open","Body":"### .NET version\r\n\r\n.NET 8.0.100-alpha.1.225727.7 + private dlls build from Winforms repo, regression from PR: https://github.com/dotnet/winforms/pull/7956\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nYes, it'a regression issue, not repro on .NET 6.0 & 7.0, only repro on .NET 8.0.100-alpha.1.225727.7 + private dlls build from Winforms repo, regression from PR: https://github.com/dotnet/winforms/pull/7956\r\n\r\n### Issue description\r\n\r\nButtons are not not scaled well (with Anchor=Top,Bottom) when move from 300% primary screen to 100% secondary monitor\r\n![image](https://user-images.githubusercontent.com/86937911/203485453-844e455b-1f45-4966-8806-94b5443fe5f4.png)\r\n\r\n\r\n### Steps to reproduce\r\n\r\n1. Launch VS instance on 300% primary screen.\r\n2. Create a WinForms .NET Core project.\r\n3. Add PerMonitorV2 in csproj file.\r\n4. Add some buttons with different anchor properties to form designer.\r\n5. Build and run it, move to 100% secondary monitor.\r\n\r\nOr:\r\n1. Extract and open [Testbuttonanchor.zip](https://github.com/dotnet/winforms/files/10073263/Testbuttonanchor.zip) on 300% primary screen.\r\n2. Build and run it, move to 100% secondary monitor.\r\n\r\n**Actual result:**\r\nButtons are not not scaled well (with Anchor=Top,Bottom) when move from 300% primary screen to 100% secondary monitor.\r\n![image](https://user-images.githubusercontent.com/86937911/203485453-844e455b-1f45-4966-8806-94b5443fe5f4.png)\r\n\r\n**Expected result:**\r\nButtons should be scaled well (with Anchor=Top,Bottom) when move from 300% primary screen to 100% secondary monitor.\r\n![image](https://user-images.githubusercontent.com/86937911/203488293-9fece9d6-1328-4909-a028-2e69ad035d1a.png)\r\n\r\n**More info:**\r\n1. This issue doesn't repro on SystemAware and DpiUnware mode.\r\n2. This issue does not occur when move from 100% primary to 300% secondary monitor.\r\n3. This issue only repro on Anchor = Top,Bottom, Anchor = Top,Bottom,Left, Anchor = Top,Bottom,Right and Anchor = Top,Bottom,Left,Right.\r\n4. This is a reduce behavior on private testing, regression from PR: https://github.com/dotnet/winforms/pull/7956","Url":"https://github.com/dotnet/winforms/issues/8266","RelatedDescription":"Open issue \"[Multi-Monitor][PermonitorV2] Buttons are not not scaled well (with Anchor=Top,Bottom) when move from 300% primary screen to 100% secondary monitor\" (#8266)"},{"Id":"1461131459","IsPullRequest":false,"CreatedAt":"2022-11-23T06:37:54","Actor":"MelonWang1","Number":"8265","RawContent":null,"Title":"[Multi-Monitor][PerMonitorV2] Font Dialog control is not scaled well on secondary screen","State":"open","Body":"### .NET version\n\n8.0.100-alpha.1.22567.28\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, it also repro on .NET 6.0 & 7.0.\n\n### Issue description\n\nFont dialog control is not scaled well in secondary screen under PermonitorV2 mode.\n\n### Steps to reproduce\n\n1. Launch VS instance on 300% primary monitor.\r\n2. Create a winforms .net core project.\r\n3. Drag and drop a button, Font Dialog control.\r\n4. Double click button control and add below code:\r\n\tfontDialog1.ShowDialog();\r\n5. Build and run, click button control.\r\n6. Move to 100% secondary monitor.\r\n\r\nOr:\r\n1. Extract and open [fontdialog.zip](https://github.com/dotnet/winforms/files/10073219/fontdialog.zip) on 300% primary screen.\r\n2. Build and run it, click button control.\r\n3. Move to 100% secondary monitor.\r\n\r\n**Actual result:**\r\nFontDialog control is not scaled well.\r\nMove form 300 primary screen to 100 secondary screen:\r\n![100ci](https://user-images.githubusercontent.com/94418985/203485374-ddb29298-9831-49d4-9601-47ca1c7f7fdf.png)\r\nMove form 100 primary screen to 300 secondary screen:\r\n![font-300ci](https://user-images.githubusercontent.com/94418985/203485393-de0ad6b6-1e69-4270-8fdb-24d3719c3767.png)\r\n**Expected result:**\r\nFontDialog control should scaled well.\r\nMove form 300 primary screen to 100 secondary screen:\r\n![100ci-fontdialog-normal](https://user-images.githubusercontent.com/94418985/203485424-b29fa687-6b9a-47b1-b80a-c9bd8c379f79.png)\r\nMove form 100 primary screen to 300 secondary screen:\r\n![300ci-fontdialog-normal](https://user-images.githubusercontent.com/94418985/203485445-fc408bba-a0db-487e-bc23-9bdf162ffa34.png)\r\n\r\n**More Info:**\r\n1. This issue also repro on moved VS from 100% primary to 300% secondary.\r\n2. This issue also repro on .NET7.0, .NET6.0. \r\n3. This issue not repro on framework project.\r\n4. This issue doesn't repro on SystemAware and DpiUnware mode.","Url":"https://github.com/dotnet/winforms/issues/8265","RelatedDescription":"Open issue \"[Multi-Monitor][PerMonitorV2] Font Dialog control is not scaled well on secondary screen\" (#8265)"},{"Id":"1461120779","IsPullRequest":false,"CreatedAt":"2022-11-23T06:28:20","Actor":"MelonWang1","Number":"8264","RawContent":null,"Title":"[Multi-Monitor][PerMonitorV2] ErrorProvider control is not scaled well on secondary screen","State":"open","Body":"### .NET version\n\n8.0.100-alpha.1.22567.28\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, it also repro on .NET 6.0 & 7.0.\n\n### Issue description\n\nErrorProvider control is not scaled well in secondary screen under PermonitorV2 mode.\n\n### Steps to reproduce\n\n1. Launch VS instance on 300% primary monitor.\r\n2. Create a winforms .net core project.\r\n3. Drag and drop textbox, ErrorProvider control.\r\n4. Double click textbox control and add below code:\r\n\ttry     \r\n\t {        \r\n\t\t int x = Int32.Parse(textBox1.Text);         \r\n\t\terrorProvider1.SetError(textBox1, \"\");   \r\n\t  }      \r\n\tcatch (Exception ex)     \r\n\t {        \r\n\t errorProvider1.SetError(textBox1, \"Not an integer value.\");     \r\n\t }\r\n5. Build and run, input \"d\" to textbox control.\r\n6. Move to 100% secondary monitor.\r\n\t\r\nOr:\r\n1. Extract and open [errorprovider.zip](https://github.com/dotnet/winforms/files/10073158/errorprovider.zip) on 300% primary screen.\r\n2. Build and run it, input \"d\" to textbox control.\r\n3. Move to 100% secondary monitor.\r\n\r\n**Actual result:**\r\nErrorProvider control is not scaled well.\r\nMove form 300 primary screen to 100 secondary screen:\r\n![Untitled](https://user-images.githubusercontent.com/94418985/203483930-8a364dc2-7d1d-4b01-80e0-7a1dee9c8e11.png)\r\nMove form 100 primary screen to 300 secondary screen:\r\n![Untitled1](https://user-images.githubusercontent.com/94418985/203484072-94377cf4-9913-4b4c-9404-40849dbf8566.png)\r\n\r\n**Expected result:**\r\nErrorProvider control should scaled well.\r\nMove form 300 primary screen to 100 secondary screen:\r\n![100ci-normal](https://user-images.githubusercontent.com/94418985/203484181-d854f1b8-3f52-44c0-b89b-7ddefb8c8a7e.png)\r\nMove form 100 primary screen to 300 secondary screen:\r\n![300ci-normal](https://user-images.githubusercontent.com/94418985/203484195-169c6c88-4c79-4fcf-9f64-f1031cb1449b.png)\r\n\r\n**More Info:**\r\n1. This issue also repro on moved VS from 100% primary to 300% secondary.\r\n2. This issue also repro on .NET7.0, .NET6.0.\r\n3. This issue not repro on framework project.\r\n4. This issue doesn't repro on SystemAware and DpiUnware mode.","Url":"https://github.com/dotnet/winforms/issues/8264","RelatedDescription":"Open issue \"[Multi-Monitor][PerMonitorV2] ErrorProvider control is not scaled well on secondary screen\" (#8264)"},{"Id":"1461107278","IsPullRequest":false,"CreatedAt":"2022-11-23T06:16:38","Actor":"Philip-Wang01","Number":"8263","RawContent":null,"Title":"[Multi-Monitor][PermonitorV2] ColorDialog is not scaled well on secondary screen","State":"open","Body":"### .NET version\r\n\r\n.NET 8.0.100-alpha.1.225727.7\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo, it also repro on .NET 6.0 & 7.0.\r\n\r\n### Issue description\r\n\r\n**ColorDialog is not scaled well when move from 100% primary to 300% secondary monitor**\r\n![image](https://user-images.githubusercontent.com/86937911/203455603-5595c3e8-8d81-4ddd-8fec-bee423c6d92a.png)\r\n\r\n**ColorDialog is not scaled well when move from 300% primary to 100% secondary monitor**\r\n![image](https://user-images.githubusercontent.com/86937911/203458904-11e1fb11-cb3c-4b34-8a92-ee9771aa7eff.png)\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\n1. Launch VS instance on 100% primary screen.\r\n2. Create a WinForms .NET Core project.\r\n3. Add <ApplicationHighDpiMode>PerMonitorV2</ApplicationHighDpiMode> in csproj file.\r\n4. Drag and drop a button and colordialog control to form designer.\r\n5. Double click the Button control to generate a click event and add below code: `colorDialog1.ShowDialog();`\r\n6. Build and run it, click button control.\r\n7. Move to 300% secondary monitor.\r\n\r\nOr:\r\n1. Extract and open [Testcolordialog.zip](https://github.com/dotnet/winforms/files/10073083/Testcolordialog.zip) on 100% primary screen.\r\n2. Build and run it, click button control.\r\n3. Move to 300% secondary monitor.\r\n\r\n**Actual result:**\r\nColorDialog is not scaled well when move from 100% primary screen to 300% secondary monitor.\r\n\r\n**Expected result:**\r\nColorDialog should be scaled well when move from 100% primary screen to 300% secondary monitor.\r\n\r\n**More info:**\r\n1. This issue doesn't repro on SystemAware and DpiUnware mode.\r\n2. This issue also repro on move from 300% primary screen to 100% secondary monitor.","Url":"https://github.com/dotnet/winforms/issues/8263","RelatedDescription":"Open issue \"[Multi-Monitor][PermonitorV2] ColorDialog is not scaled well on secondary screen\" (#8263)"},{"Id":"1461077321","IsPullRequest":false,"CreatedAt":"2022-11-23T05:57:06","Actor":"Cassie-Li01","Number":"8262","RawContent":null,"Title":"[PerMonitorV2] [Multi-Monitor] Status strip progress item, DropDownButton icon, SplitButton icon are not scaled well when drop from 100% to 300%","State":"open","Body":"### .NET version\n\n.NET 8.0.100-alpha.1.22565.7\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, it also repro on .NET 6.0 & 7.0.\n\n### Issue description\n\n[PerMonitorV2] [Multi-Monitor] Status strip progress item, DropDownButton icon, SplitButton icon are not scaled well when drop from 100% to 300%\n\n### Steps to reproduce\n\nRepro steps:\r\n\r\n1. Launch VS instance on 100% primary monitor.\r\n2. Create a winforms .net core project. Add `<ApplicationHighDpiMode>PerMonitorV2</ApplicationHighDpiMode>` in csproj file.\r\n3. Drag and drop a Status strip control.\r\n4. Add child controls Status Label, ProgressBar, DropDownButton, SplitButton \r\n5. Build and run.\r\n6. Move to 300% secondary monitor.\r\nOr build and run, move to 300%\r\n[WinFormsApp6.zip](https://github.com/dotnet/winforms/files/10073054/WinFormsApp6.zip)\r\n\r\n**Current Behavior:**\r\n Status strip progress item, DropDownButton icon, SplitButton icon are not scaled well\r\n\r\nFrom 100% to 300%\r\n![image](https://user-images.githubusercontent.com/96758262/203480528-876adde4-0a64-4407-843f-4c0630e7d152.png)\r\n\r\nFrom 300% to 100%\r\n![image](https://user-images.githubusercontent.com/96758262/203480680-b23a9671-0cf3-4eda-9c8c-ee1fbbdd72b6.png)\r\n\r\n**Expected Result:**\r\n Status strip progress item, DropDownButton icon, SplitButton icon are scaled well\r\n![image](https://user-images.githubusercontent.com/96758262/203480761-774cc0c5-eb1f-4de6-ac06-ee2905484d63.png)\r\n\r\n**More Info:**\r\n\r\n1.This issue also repro on .NET7.0, .NET6.0  \r\n2.This issue doesn't repro on .NET Framework\r\n3.This issue also repro when drop from 300% to 100%\r\n4.If created by 100% and run on 300%, this issue also repro\r\n5.If created by 300% and run on 100%, this issue also repro","Url":"https://github.com/dotnet/winforms/issues/8262","RelatedDescription":"Open issue \"[PerMonitorV2] [Multi-Monitor] Status strip progress item, DropDownButton icon, SplitButton icon are not scaled well when drop from 100% to 300%\" (#8262)"},{"Id":"1460941734","IsPullRequest":true,"CreatedAt":"2022-11-23T03:42:25","Actor":"elachlan","Number":"8260","RawContent":null,"Title":"Refactor `ControlCommandSet` to remove `ArrayList`/`HashTable`","State":"open","Body":"Related #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8260)","Url":"https://github.com/dotnet/winforms/pull/8260","RelatedDescription":"Open PR \"Refactor `ControlCommandSet` to remove `ArrayList`/`HashTable`\" (#8260)"},{"Id":"1460925425","IsPullRequest":false,"CreatedAt":"2022-11-23T03:23:56","Actor":"Olina-Zhang","Number":"8259","RawContent":null,"Title":"[HDPI] From the second row, DataGridView rows are not scaled well on 300% primary screen","State":"open","Body":"### .NET version\n\n.NET 8.0.100-alpha.1.22565.7\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, it also repro on .NET 6.0 & 7.0.\n\n### Issue description\n\nFrom the second row, DataGridView rows are not scaled well on High Dpi system setting when application is in SystemAware or PerMonitorV2 mode\r\n\r\nOn 300% primary screen:\r\n![image](https://user-images.githubusercontent.com/26474449/203461444-31c64093-398e-4b25-b521-8d2917110189.png)\r\n\r\nOn 175% primary screen:\r\n![image](https://user-images.githubusercontent.com/26474449/203461587-1c6c9b79-3260-44c0-b8b4-5e9390d158a5.png)\r\n\r\nOn 100% DPI:\r\n![image](https://user-images.githubusercontent.com/26474449/203463356-2af25584-8f41-4a11-8dfb-c8b0b736b237.png)\r\n\n\n### Steps to reproduce\n\nUse this sample application to run on High DPI system setting:\r\n[DataGridViewSample.zip](https://github.com/dotnet/winforms/files/10072643/DataGridViewSample.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/8259","RelatedDescription":"Open issue \"[HDPI] From the second row, DataGridView rows are not scaled well on 300% primary screen\" (#8259)"},{"Id":"1460893662","IsPullRequest":false,"CreatedAt":"2022-11-23T03:00:46","Actor":"MelonWang1","Number":"8257","RawContent":null,"Title":"[Multi-Monitor][SystemAware] Resizing form1 appears shadow","State":"open","Body":"### .NET version\r\n\r\n8.0.100-alpha.1.22567.28\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo, it also repro on .NET 6.0 & 7.0.\r\n\r\n### Issue description\r\n\r\nIn SystemAware mode, Form1 appears shadow When move VS from 300 primary screen to 100 secondary screen and resize form1.\r\n![11111111](https://user-images.githubusercontent.com/94418985/203458708-fda4a767-cd7a-4a6c-9c2a-d69058ff9700.gif)\r\n\r\n\r\n### Steps to reproduce\r\n\r\n1. Launch VS instance on 300% primary monitor.\r\n2. Create a winforms .net core project.\r\n3. Build and run.\r\n4. Move to 100% secondary monitor.\r\n5. Resize form1.\r\n\r\n**Actual result:**\r\nThe shadow appears.\r\n![Untitled](https://user-images.githubusercontent.com/94418985/203458664-ca5300a7-3905-41a1-8518-153548c7e989.png)\r\n\r\n**Expected result:**\r\nThe shadow should not appear.\r\n\r\n**More Info:**\r\n1. This issue also repro on .NET7.0, .NET6.0.\r\n2. This issue does not repro on framework project.\r\n3. This issue does not repro on moved VS from 100% primary to 300% secondary.\r\n4. This issue does not repro PerMonitorV2 mode.","Url":"https://github.com/dotnet/winforms/issues/8257","RelatedDescription":"Open issue \"[Multi-Monitor][SystemAware] Resizing form1 appears shadow\" (#8257)"},{"Id":"1460889121","IsPullRequest":true,"CreatedAt":"2022-11-23T02:57:36","Actor":"elachlan","Number":"8256","RawContent":null,"Title":"Refactor `UndoEngine` to remove `ArrayList`/`HashTable`","State":"open","Body":"Related #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8256)","Url":"https://github.com/dotnet/winforms/pull/8256","RelatedDescription":"Open PR \"Refactor `UndoEngine` to remove `ArrayList`/`HashTable`\" (#8256)"},{"Id":"1460855736","IsPullRequest":true,"CreatedAt":"2022-11-23T02:34:06","Actor":"elachlan","Number":"8255","RawContent":null,"Title":"Refactor `KeysConverter` to remove `ArrayList`","State":"open","Body":"Related #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8255)","Url":"https://github.com/dotnet/winforms/pull/8255","RelatedDescription":"Open PR \"Refactor `KeysConverter` to remove `ArrayList`\" (#8255)"},{"Id":"1460834506","IsPullRequest":false,"CreatedAt":"2022-11-23T02:17:27","Actor":"Olina-Zhang","Number":"8254","RawContent":null,"Title":"[HDPI] The default Image Icon of DataGridView Image column is not scaled well on 300% primary screen","State":"open","Body":"### .NET version\n\n.NET 8.0.100-alpha.1.22565.7\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, it also repro on .NET 6.0 & 7.0.\n\n### Issue description\n\nThe default Image Icon of DataGridView Image columns is not scaled well on High Dpi system setting when application is in SystemAware or PerMonitorV2 mode\r\n\r\nOn 300% primary screen:\r\n![image](https://user-images.githubusercontent.com/26474449/203456895-79382b00-d577-495e-b183-626001ddca34.png)\r\n\r\nOn 175% primary screen:\r\n![image](https://user-images.githubusercontent.com/26474449/203456981-550f78d2-2d0a-496a-8b1c-72693352984f.png)\r\n\r\nOn 100% DPI:\r\n![image](https://user-images.githubusercontent.com/26474449/203457210-4411f771-6315-4f09-9660-895f2e612600.png)\r\n\n\n### Steps to reproduce\n\nUse this sample application to run on High DPI system setting:\r\n[DataGridViewSample.zip](https://github.com/dotnet/winforms/files/10072419/DataGridViewSample.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/8254","RelatedDescription":"Open issue \"[HDPI] The default Image Icon of DataGridView Image column is not scaled well on 300% primary screen\" (#8254)"},{"Id":"1460762079","IsPullRequest":true,"CreatedAt":"2022-11-23T00:39:57","Actor":"JeremyKuhne","Number":"8253","RawContent":null,"Title":"Add initial VB6 tests","State":"open","Body":"Adds a really simple VB6 control to write tests against.\r\n\r\nAdds utility code for handling COM classes straight from their host assembly.\r\n\r\nAdd a simple DynamicAxHost class to utilize these ComClass wrappers.\r\n\r\nAlso skip needless throwing and catching exceptions from the connection cookie setup in AxHost.\r\n\r\nNote that I've renamed the control from .ocx to .vb6 to avoid having it accidentally picked up by anything.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8253)","Url":"https://github.com/dotnet/winforms/pull/8253","RelatedDescription":"Open PR \"Add initial VB6 tests\" (#8253)"},{"Id":"1460743913","IsPullRequest":false,"CreatedAt":"2022-11-23T00:15:11","Actor":"dreddy-work","Number":"8252","RawContent":null,"Title":"[Tracking] Optimize code around parking windows in the WinForms runtime","State":"open","Body":"While enabling nullability in [this](https://github.com/dotnet/winforms/pull/6386), we noticed opportunity to optimize `ParkingWindow' and try avoiding inserting/caching null values. \r\nThis tracking issue created to capture that work and prioritize.","Url":"https://github.com/dotnet/winforms/issues/8252","RelatedDescription":"Open issue \"[Tracking] Optimize code around parking windows in the WinForms runtime\" (#8252)"},{"Id":"1460425233","IsPullRequest":true,"CreatedAt":"2022-11-22T19:15:06","Actor":"lonitra","Number":"8251","RawContent":null,"Title":"Add Serialization Tests for AxHost","State":"open","Body":"- Minor clean ups for `State` and `StateConverter`\r\n- Add serialization test for `AxHost` using `BinaryFormatter`\r\n- Add test for serializing `AxHost` using `StronglyTypedResourceBuilder`\r\n    - `StateConverter` was never hooked up properly so manually register `StateConverter` as the `TypeConverter` for `State` using `CustomConverter` class\r\n    - Fix `State` constructor utilized by `StateConverter` to not save the passed in stream since extra information to build the State is contained in it.\r\n- Add test for `ResXResourceReader` verifying AxHosts can be deserialized from resx file\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8251)","Url":"https://github.com/dotnet/winforms/pull/8251","RelatedDescription":"Open PR \"Add Serialization Tests for AxHost\" (#8251)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-11-25T03:30:32.8781348Z","RunDurationInMilliseconds":546}