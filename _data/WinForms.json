{"Data":{"GitHub":{"Issues":[{"Id":"649629636","IsPullRequest":true,"CreatedAt":"2020-07-02T04:41:10","Actor":"JeremyKuhne","Number":"3532","RawContent":null,"Title":"Remove most usages of WIndowsGraphicsWrapper","State":"open","Body":"- Refactor DpiHelper a bit, adding new API to avoid DC creation (using new GetDpiForSystem())\r\n- Add PaintEvent HDC wrapper to favor getting the natvie HDC if the Graphics wrapper hasn't been created\r\n- Extend DeviceContextHdcScope to support WindowsGraphicsWrapper migration\r\n- Change HDC property on PaintEventArgs\r\n- Add DrawLine to HDC extensions (from WindowsGraphics)\r\n- Graphics.DpiX is no different than normal device DPI, removed from CheckableControlBaseAdapter.cs\r\n- Remove Graphics from CheckBoxPopupAdapter.PaintPopupLayout\r\n- Add SetBkMode scope\r\n\r\nRemove WindowsGraphics/Wrapper from a number of  methods.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3532)","Url":"https://github.com/dotnet/winforms/pull/3532","RelatedDescription":"Open PR \"Remove most usages of WIndowsGraphicsWrapper\" (#3532)"},{"Id":"648075227","IsPullRequest":true,"CreatedAt":"2020-07-02T04:06:05","Actor":"RussKie","Number":"3526","RawContent":null,"Title":"Solve image list woes","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n## Proposed changes\r\n\r\n- Centralise lifetime management of native ImageList\r\n   Move calls to Create, Duplicate and Destroy into NativeImageList to reduce a chance of interleaved calls to Win32 API.\r\n- Track disposal of NativeImageList\r\n- Dispose  and do not reuse `ImageList` instances in tests. \r\n    Quite likely the observe AVE were a result of use reusing a shared instance of an `ImageList` across theory runs. Quite likely xUnit would dispose the instance while another test was run, leading to a corrupt heap. Resolves #3358\r\n- Prevent ImageList allocation disposing PropertyGrid. Resolves #3485\r\n- Refactor `ToolStripItem.Animate` and `ToolStripItem.set_Image` methods to reduce nesting\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3526)","Url":"https://github.com/dotnet/winforms/pull/3526","RelatedDescription":"Closed or merged PR \"Solve image list woes\" (#3526)"},{"Id":"648642872","IsPullRequest":true,"CreatedAt":"2020-07-02T01:16:43","Actor":"RussKie","Number":"3529","RawContent":null,"Title":"Fix 3485 `PropertyGrid` allocates `ImageList` handles while disposing","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nResolves #3485\r\n\r\n\r\n## Proposed changes\r\n\r\n- Refactor `ToolStripItem.Animate(bool)` method to reduce nesting\r\n- Prevent `ImageList` allocation while disposing `PropertyGrid` by asserting `ImageList` has a valid handle.\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually as described in #3485\r\n\r\n/cc: @weltkante \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3529)","Url":"https://github.com/dotnet/winforms/pull/3529","RelatedDescription":"Closed or merged PR \"Fix 3485 `PropertyGrid` allocates `ImageList` handles while disposing\" (#3529)"},{"Id":"649343432","IsPullRequest":false,"CreatedAt":"2020-07-01T21:48:41","Actor":"RussKie","Number":"3531","RawContent":null,"Title":"Setting `ListView.CheckBoxes` after `ListView.StateImageList` destroys imagelist","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n\r\n**Problem description:**\r\n\r\nAn outcome of investigations in https://github.com/dotnet/winforms/issues/3358, in the following scenarios `CheckBoxes` is toggled _whilst_ a user-supplied imagelist is bound to `StateImageList` property - the native listview control will tarnish the user-supplied one. \r\n\r\n\r\nThe issue is reproducible in net4x and netcore3.1.\r\n\r\n\r\n<details>\r\n<summary>ListView.CheckBoxes=false</summary>\r\n![listview-cb-off](https://user-images.githubusercontent.com/4403806/86293539-21d3b580-bc36-11ea-8cba-a7dfc13e1340.gif)\r\n</details>\r\n\r\n<details>\r\n<summary>ListView.CheckBoxes=true</summary>\r\n![listview-cb-on](https://user-images.githubusercontent.com/4403806/86294550-184b4d00-bc38-11ea-8f12-cbf7b1236161.gif)\r\n\r\n</details>\r\n\r\nAdditionally, it appears changes in one instance of listview *may* affect another, if state imagelist were _similar_ (e.g. contain the same set of images), as the native layer *may* be caching.\r\n<details>\r\n<summary>Changes to the 2nd listview after tarnishing the first</summary>\r\n![listview-cb-cache](https://user-images.githubusercontent.com/4403806/86294407-d3bfb180-bc37-11ea-853d-b4e4398bf1a3.gif)\r\n\r\n</details>\r\n\r\n\r\n**Expected behavior:**\r\n\r\nChanges `CheckBoxes` property does no affect a user-supplied imagelist.\r\n\r\n\r\n**Minimal repro:**\r\n\r\nhttps://github.com/RussKie/ListViewCheckboxesStateImageList\r\n\r\nAlso the issue is easily reproducible in .NET Framework designer by setting up the `StateImageList` property on a `ListView` control, (save), and _then_ setting `CheckBoxes=true`.","Url":"https://github.com/dotnet/winforms/issues/3531","RelatedDescription":"Open issue \"Setting `ListView.CheckBoxes` after `ListView.StateImageList` destroys imagelist\" (#3531)"},{"Id":"648929655","IsPullRequest":true,"CreatedAt":"2020-07-01T12:07:25","Actor":"dotnet-maestro[bot]","Number":"3530","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200630.14\r\n- **Date Produced**: 7/1/2020 10:18 AM\r\n- **Commit**: 2d0249e7ae75647c313623b7322cd71a72870deb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.CodeDom**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.DirectoryServices**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.Drawing.Common**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.Security.Permissions**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.IO.Packaging**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20330.14\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3530)","Url":"https://github.com/dotnet/winforms/pull/3530","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/runtime\" (#3530)"},{"Id":"648411468","IsPullRequest":true,"CreatedAt":"2020-07-01T00:07:21","Actor":"JeremyKuhne","Number":"3528","RawContent":null,"Title":"Add more HGDIOBJ handles and scopes","State":"closed","Body":"This cuts a number of uneccesary allocations and sets up to remove much more. The goal is to remove WindowsGraphics and DeviceContext (and other related classes) which are extremely slow and allocate a lot. Getting rid of these classes will also improve code clarity.\r\n\r\n- Introduce more scopes and handle extensions to move away from DeviceContext, WindowsGraphics, etc.\r\n- Introduce HDC, HFONT, HBRUSH, HPEN and other HGDIOBJ objects\r\n- Add IHandle to DeviceContext, WindowsGraphics for the HDC\r\n- Add IHandle to WindowsBrush for the HBRUSH\r\n- Add a referemce to this to the end of message processing to root Control\r\n- Remove MarshalByRefObject from internal classes\r\n- Improve perf of background drawing\r\n- Move ApplyGraphicProperties to Primitives\r\n- Cut dead code\r\n- Note: Did not change COM interface defintions\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3528)","Url":"https://github.com/dotnet/winforms/pull/3528","RelatedDescription":"Closed or merged PR \"Add more HGDIOBJ handles and scopes\" (#3528)"},{"Id":"648238357","IsPullRequest":true,"CreatedAt":"2020-06-30T14:46:16","Actor":"Shyam-Gupta","Number":"3527","RawContent":null,"Title":"Adding Form subtype in templates","State":"open","Body":"1. Added *.user files to add Form subtype.\r\n2. Added sources in template.json to remove *.user from \"exclude\"\r\n3. Fixed a typo in readme.md\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3527)","Url":"https://github.com/dotnet/winforms/pull/3527","RelatedDescription":"Open PR \"Adding Form subtype in templates\" (#3527)"},{"Id":"647600052","IsPullRequest":true,"CreatedAt":"2020-06-30T00:34:01","Actor":"JeremyKuhne","Number":"3525","RawContent":null,"Title":"Fix getting existing region in RegionScope","State":"closed","Body":"- Need a temporary region to get a region\r\n- Add tests\r\n- Remove unused code from DCMapping and use RegionScope\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3525)","Url":"https://github.com/dotnet/winforms/pull/3525","RelatedDescription":"Closed or merged PR \"Fix getting existing region in RegionScope\" (#3525)"},{"Id":"647580997","IsPullRequest":false,"CreatedAt":"2020-06-29T23:45:16","Actor":"qwertybba","Number":"3523","RawContent":null,"Title":"Expected a proxy type, Microsoft.VisualStudio.WinForms.RemoteClient.Proxies.ComponentProxy","State":"closed","Body":"\r\n* .NET Core Version: \r\n3.1,5.0\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo \r\n\r\n**Problem description:**\r\n\r\nI recently port my application from net472 to core3.1(5.0) after get every thing done ,so I build the application and test it everything's works well.\r\nbut when I try to open DevExpress XtraReport in designer I get the error:\r\n```\r\nExpected a proxy type, Microsoft.VisualStudio.WinForms.RemoteClient.Proxies.ComponentProxy\r\nat Microsoft.VisualStudio.WinForms.RemoteClient.Proxies.Extensions.ToComponentProxy(Object obj)\r\nat Microsoft.VisualStudio.WinForms.RemoteClient.DesignerSession.InitializeRootComponent(CodeTypeDeclaration typeDeclaration, ResourceContentData[] resourceDocDataContent)\r\nat Microsoft.VisualStudio.WinForms.RemoteClient.Loader.RemoteCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager manager)\r\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager)\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager)\r\nat System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad(IDesignerLoaderHost host) \r\n```\r\n\r\n**Expected behavior:**\r\nopen the report in designer \r\n\r\n**Minimal repro:**\r\nI use Windows 10 x64 version 2004\r\nVS 2019 Version 16.7.0 Preview 3.1\r\nDevExpres 20.1.4\r\n[Sdk style project  Core3.1,5.0.txt](https://github.com/dotnet/winforms/files/4847371/Sdk.style.project.Core3.1.5.0.txt)\r\n","Url":"https://github.com/dotnet/winforms/issues/3523","RelatedDescription":"Closed issue \"Expected a proxy type, Microsoft.VisualStudio.WinForms.RemoteClient.Proxies.ComponentProxy\" (#3523)"},{"Id":"647019457","IsPullRequest":true,"CreatedAt":"2020-06-29T23:41:42","Actor":"RussKie","Number":"3521","RawContent":null,"Title":"fix: Improve file type discovery in VS","State":"closed","Body":"\r\n\r\nResolves #3510\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3521)","Url":"https://github.com/dotnet/winforms/pull/3521","RelatedDescription":"Closed or merged PR \"fix: Improve file type discovery in VS\" (#3521)"},{"Id":"647588505","IsPullRequest":true,"CreatedAt":"2020-06-29T18:47:14","Actor":"vladimir-krestov","Number":"3524","RawContent":null,"Title":"[Accessibility] Fixing ComboBoxAccessibleObject issue when Narrator and Inspect don't response","State":"open","Body":"Fixes #3452\r\n\r\n## Proposed changes\r\n\r\n- Just remove `[ComImport]` attribute\r\n\r\n## Customer Impact\r\n\r\n- ComboBox doesn't break Narrator and Inspect\r\n\r\n## Regression? \r\n\r\n- Yes, from 423b2bc5726b4109741f189e34e5f37f90140d01\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n- Inspect doesn't response after selecting ComboBox editing control\r\n![bug](https://user-images.githubusercontent.com/49272759/86043778-d6f94880-ba51-11ea-9e97-b52b5fa11fa3.gif)\r\n\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n- ComboBox AccessibleObject works well\r\n![Fixed](https://user-images.githubusercontent.com/49272759/86043790-d9f43900-ba51-11ea-9edf-191e9d1f270d.gif)\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing \r\n- CTI\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Using Narrator and Inspect\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.18363.900]\r\n- .Net Version: 5.0.0-preview.8.20326.9\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3524)","Url":"https://github.com/dotnet/winforms/pull/3524","RelatedDescription":"Open PR \"[Accessibility] Fixing ComboBoxAccessibleObject issue when Narrator and Inspect don't response\" (#3524)"},{"Id":"647316400","IsPullRequest":true,"CreatedAt":"2020-06-29T12:31:47","Actor":"dotnet-maestro[bot]","Number":"3522","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200628.6\r\n- **Date Produced**: 6/29/2020 7:28 AM\r\n- **Commit**: 98b6284e020845c04bc7b1cefdcd01ffe7a4a8c0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.CodeDom**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.DirectoryServices**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.Drawing.Common**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.Security.Permissions**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.IO.Packaging**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.8.20328.1 to 5.0.0-preview.8.20328.6\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3522)","Url":"https://github.com/dotnet/winforms/pull/3522","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3522)"},{"Id":"646284230","IsPullRequest":false,"CreatedAt":"2020-06-29T06:41:10","Actor":"PasaOpasen","Number":"3516","RawContent":null,"Title":"Cannot change color of button if button flatstyle is standard","State":"closed","Body":"Cannot change color of button by desiner if button flatstyle is standard","Url":"https://github.com/dotnet/winforms/issues/3516","RelatedDescription":"Closed issue \"Cannot change color of button if button flatstyle is standard\" (#3516)"},{"Id":"646466033","IsPullRequest":true,"CreatedAt":"2020-06-29T06:27:10","Actor":"janbaltus","Number":"3519","RawContent":null,"Title":"localization HB","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3519)","Url":"https://github.com/dotnet/winforms/pull/3519","RelatedDescription":"Closed or merged PR \"localization HB\" (#3519)"},{"Id":"646217586","IsPullRequest":true,"CreatedAt":"2020-06-28T22:10:02","Actor":"dotnet-maestro[bot]","Number":"3514","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200628.1\r\n- **Date Produced**: 6/28/2020 10:11 AM\r\n- **Commit**: 0f7b3532e573b72f9d3eb9161513d8405be24d6f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.CodeDom**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.DirectoryServices**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.Drawing.Common**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.Security.Permissions**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.IO.Packaging**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.8.20325.1 to 5.0.0-preview.8.20328.1\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3514)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/3514","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3514)"},{"Id":"646927587","IsPullRequest":false,"CreatedAt":"2020-06-28T14:00:24","Actor":"harborsiem","Number":"3520","RawContent":null,"Title":"Application.SetHighDpiMode(HighDpiMode.SystemAware) or DpiAware and TableLayoutPanel ","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   3.1.301\r\n Commit:    7feb845744\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.19041\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.301\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.5\r\n  Commit:  65cd789777\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes, but a bit different\r\n\r\n**Problem description:**\r\nThe Position, Margin or Size of a NumericUpDown control inside a TableLayoutPanel is not correct when HighDpiMode.SystemAware or DpiAware is set and the Scaling is set to more than 100% (e.g. 150%).\r\n\r\nThis picture shows 100% scaling (everything looks good):\r\n![DpiAware100](https://user-images.githubusercontent.com/28147549/85949194-aaf89d00-b955-11ea-8ad5-e82f6fe39213.png)\r\n\r\n\r\n[TestDpiAware.zip](https://github.com/dotnet/winforms/files/4842346/TestDpiAware.zip)\r\nThis picture shows 150% scaling:\r\n![DpiAware150](https://user-images.githubusercontent.com/28147549/85949217-d5e2f100-b955-11ea-89c8-31bd88bc96ad.png)\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\n\r\nThe size and margin of the controls inside a TableLayoutPanel should be the same as the controls without a TableLayoutPanel.\r\n\r\n**Minimal repro:**\r\n\r\nRun the TestDpiAware.exe from the zipped project and change the scaling in Windows. Move the mouse to the controls and you can see Location, Size and Margin from some controls.\r\n[TestDpiAware.zip](https://github.com/dotnet/winforms/files/4842373/TestDpiAware.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3520","RelatedDescription":"Open issue \"Application.SetHighDpiMode(HighDpiMode.SystemAware) or DpiAware and TableLayoutPanel \" (#3520)"},{"Id":"646355648","IsPullRequest":true,"CreatedAt":"2020-06-26T16:28:20","Actor":"dotnet-maestro[bot]","Number":"3518","RawContent":null,"Title":"[release/5.0-preview7] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 10d330dc-4f8f-4c44-8c66-08d812f956ec\r\n- **Build**: 20200626.1\r\n- **Date Produced**: 6/26/2020 10:19 AM\r\n- **Commit**: b0f97149538e3dabde2267efa326c76a628a30ff\r\n- **Branch**: refs/heads/release/5.0-preview7\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20323.4 to 5.0.0-preview.7.20326.1\r\n\r\n[marker]: <> (End:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3518)","Url":"https://github.com/dotnet/winforms/pull/3518","RelatedDescription":"Closed or merged PR \"[release/5.0-preview7] Update dependencies from dotnet/runtime\" (#3518)"},{"Id":"646348028","IsPullRequest":true,"CreatedAt":"2020-06-26T15:40:00","Actor":"mmitche","Number":"3517","RawContent":null,"Title":"Re-categorize runtime dependencies as Product","State":"open","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3517)","Url":"https://github.com/dotnet/winforms/pull/3517","RelatedDescription":"Open PR \"Re-categorize runtime dependencies as Product\" (#3517)"},{"Id":"646274583","IsPullRequest":false,"CreatedAt":"2020-06-26T13:45:39","Actor":"PasaOpasen","Number":"3515","RawContent":null,"Title":"CopyPaste of button copies events too (desiner)","State":"open","Body":"\r\n1. create botton\r\n\r\n2. double click to create event\r\n\r\n3. copy and paste this button\r\n\r\n4. double click -- u will see old event","Url":"https://github.com/dotnet/winforms/issues/3515","RelatedDescription":"Open issue \"CopyPaste of button copies events too (desiner)\" (#3515)"},{"Id":"646183389","IsPullRequest":false,"CreatedAt":"2020-06-26T10:59:40","Actor":"weltkante","Number":"3513","RawContent":null,"Title":"FileDialog.InitialDirectory does not work","State":"open","Body":"**.NET Core Version:**\r\nmaster\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nyes\r\n\r\n**Problem description:**\r\n`FileDialog.InitialDirectory` doesn't seem to work? It works for the classic dialog, but modern dialogs seem to ignore it, even though there is source code handling it. Debugging the source seems to throw `FileNotFoundException` when calling `GetShellItemForPath`. Might be an interop mistake?\r\n\r\n**Expected behavior:**\r\n`FileDialog.InitialDirectory` should actually set the directory.\r\n\r\n**Minimal repro:**\r\nCreate and show an `OpenFileDialog` with a non-empty `InitialDirectory` (make sure you get the modern version of the dialog)","Url":"https://github.com/dotnet/winforms/issues/3513","RelatedDescription":"Open issue \"FileDialog.InitialDirectory does not work\" (#3513)"},{"Id":"646180487","IsPullRequest":false,"CreatedAt":"2020-06-26T10:54:06","Actor":"weltkante","Number":"3512","RawContent":null,"Title":"Support InitialDirectory and ClientGuid on FolderBrowserDialog","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nThe modernized `FolderBrowserDialog` does not expose relevant native API, it just got retrofitted into the API for the old dialog. This leads to problems like described in #3464 \r\n\r\n- It does not support setting the initially displayed folder. This was not relevant for the old dialog because it only had a single tree view with a single selection, so you could set the initial folder by setting the initial selection. The new dialog has a separate textbox to enter a full path and this is used for the initial selection. In some cases the native dialog will derive the initial folder from the selection but not in all cases, in particular drive roots will just fill the textbox and not set the initial folder. This leads to poor end user experience.\r\n\r\n- It does not support setting a `ClientGuid` like file open and save dialogs. This is because the old dialog had no such concept, but upgrading to the modern dialog this is necessary. This guid is used to specify context under which Windows should remember the last used folder. For example a \"select folder for build output\" would use a different guid than \"select folder for logfiles\" and allow to remember two distinct \"recently used folders\" depending on the context the dialog is used.\r\n\r\nActually those features are already available on the `FileDialog` base class, but for historic reasons `FolderBrowserDialog` just inherits `CommonDialog`. This can't be changed without breaking binary compatibility for running .NET Core 3.1 applications on a .NET Core 5.0 runtime, so the next best solution is duplicating the relevant `FileDialog` properties to `FolderBrowserDialog`.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n\r\nExpose the relvant native API, taking `FileDialog` as precedence:\r\n\r\n```csharp\r\nclass FolderBrowserDialog \r\n{\r\n    [DefaultValue(\"\")]\r\n    [SRCategoryAttribute(\"CatData\")]\r\n    [SRDescriptionAttribute(\"FDinitialDirDescr\")]\r\n    public string InitialDirectory { get; set; }\r\n\r\n    [Browsable(false)]\r\n    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]\r\n    [Localizable(false)]\r\n    public Guid? ClientGuid { get; set; }\r\n}\r\n```\r\n\r\n**Will this feature affect UI controls?**\r\n\r\nYes, this exposes a new property at design time, it needs to follow the usual process of annotating the properties with attributes, if the same localization as FileDialog is reused (as in the API suggestion above) then no new localization is required though. In either case everything is covered by type descriptor infrastructure and the designer itself does not need to do any special handling.","Url":"https://github.com/dotnet/winforms/issues/3512","RelatedDescription":"Open issue \"Support InitialDirectory and ClientGuid on FolderBrowserDialog\" (#3512)"},{"Id":"646041542","IsPullRequest":true,"CreatedAt":"2020-06-26T06:30:54","Actor":"gpetrou","Number":"3511","RawContent":null,"Title":"Use generic lists in Control","State":"open","Body":"## Proposed changes\r\n\r\n- Use generic lists in Control.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3511)","Url":"https://github.com/dotnet/winforms/pull/3511","RelatedDescription":"Open PR \"Use generic lists in Control\" (#3511)"},{"Id":"645938094","IsPullRequest":false,"CreatedAt":"2020-06-26T01:04:19","Actor":"davkean","Number":"3510","RawContent":null,"Title":"Windows Forms templates should carry proj.user with SubType already set","State":"open","Body":"**Problem description:**\r\n\r\nTo detect that a Forms is openable by the designer (and gets the icon), Roslyn asynchronously reads the attributes of a type's base types and pushes a \"SubType\" if the right attribute is present to the project system. Which in turn, causes the designer paths to light up.\r\n\r\nThis is a slow and asynchronous process and cannot be blocked on, and causes additional evaluations and design-time builds to kicked off after Roslyn sets the subtype.\r\n\r\n To side step this whole process, and improve the speed for opening the designer and to reduce the number of design-builds that are needed for File -> New, the templates should carry this information and have the project system automatically recognize that this project contains a designable file.\r\n\r\nTo do that, carry a UTF8-with BOM file alongside the project called \"[Project].csproj.user\"\r\n\r\n``` XML\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"Current\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <Compile Update=\"Form1.cs\">\r\n      <SubType>Form</SubType>\r\n    </Compile>\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/dotnet/winforms/issues/3510","RelatedDescription":"Open issue \"Windows Forms templates should carry proj.user with SubType already set\" (#3510)"},{"Id":"645508428","IsPullRequest":true,"CreatedAt":"2020-06-25T12:48:54","Actor":"dotnet-maestro[bot]","Number":"3508","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200625.1\r\n- **Date Produced**: 6/25/2020 11:28 AM\r\n- **Commit**: 4a21529178750aab4b194d54918d0676e0e5833a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.CodeDom**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.DirectoryServices**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Drawing.Common**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Security.Permissions**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.IO.Packaging**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.8.20323.9 to 5.0.0-preview.8.20325.1\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3508)","Url":"https://github.com/dotnet/winforms/pull/3508","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3508)"},{"Id":"645531445","IsPullRequest":false,"CreatedAt":"2020-06-25T12:42:31","Actor":"Dave-Lowndes","Number":"3509","RawContent":null,"Title":"Tab Order dialog/overlay missing in Core Designer","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n    The method of setting control keyboard (tab) ordering for WinForms is poor in comparison to the Windows resource dialog editor. The dialog editor allows you to Ctrl+click a control to start tab re-ordering at that point. I'm not aware of a similar facility for WinForms, consequently it's always an irritation when you need to re-do tab ordering.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n    If you can do it like the dialog editor (or better) that'd be great.\r\n\r\n\r\n**Will this feature affect UI controls?**\r\n    No\r\n","Url":"https://github.com/dotnet/winforms/issues/3509","RelatedDescription":"Open issue \"Tab Order dialog/overlay missing in Core Designer\" (#3509)"},{"Id":"644959151","IsPullRequest":true,"CreatedAt":"2020-06-24T23:08:27","Actor":"JeremyKuhne","Number":"3507","RawContent":null,"Title":"Fix HDC in BeginPaintScope","State":"closed","Body":"Getting the DC again was a copy/paste mistake\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3507)","Url":"https://github.com/dotnet/winforms/pull/3507","RelatedDescription":"Closed or merged PR \"Fix HDC in BeginPaintScope\" (#3507)"},{"Id":"644811936","IsPullRequest":false,"CreatedAt":"2020-06-24T18:08:20","Actor":"raffaeler","Number":"3506","RawContent":null,"Title":"Make the designer experience of the ToolStrip controls identical to the classic controls","State":"open","Body":"This is  a suggestion to consider making the designer experience identical regardless the control being used on the form.\r\n\r\nThe latest generation controls (Toolstrip related) have a different designer-experience in comparison to all the others.\r\nWhile using the designer you often have to use dialogs to configure the properties of the toolstrip buttons, combos, etc.\r\n\r\nOf course this suggestion is not meant to change any runtime experience or behavior, neither the designer generated code. It is just a matter of the designer experience.\r\n","Url":"https://github.com/dotnet/winforms/issues/3506","RelatedDescription":"Open issue \"Make the designer experience of the ToolStrip controls identical to the classic controls\" (#3506)"},{"Id":"644761098","IsPullRequest":false,"CreatedAt":"2020-06-24T16:48:16","Actor":"mmitche","Number":"3505","RawContent":null,"Title":"Move validation steps to post-build","State":"open","Body":"Winforms should opt-in to post-build validation for SDL, NuGet validation, etc.,\r\n\r\nTo enable the nightly validation runs, you add repo entries here: https://dev.azure.com/dnceng/internal/_git/dotnet-release?path=%2Feng%2Fpipeline%2Ftools%2Frepos-to-validate.txt and this file a version of https://github.com/dotnet/aspnetcore/blob/master/eng/sdl-tsa-vars.config into your repo under the eng folder. Then the validation steps can be disabled in your azure pipeline as they have been in runtime’s build https://github.com/dotnet/runtime/blob/master/eng/pipelines/official/stages/publish.yml#L30-L49","Url":"https://github.com/dotnet/winforms/issues/3505","RelatedDescription":"Open issue \"Move validation steps to post-build\" (#3505)"},{"Id":"644647381","IsPullRequest":false,"CreatedAt":"2020-06-24T14:11:00","Actor":"vladimir-krestov","Number":"3504","RawContent":null,"Title":"[Servicing] Accessibility: no way to set Label control accessible role and accessible name","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: 3.1\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\nLink to DevDiv issue: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1108206\r\n\r\n**Problem description:**\r\nIf AccessibleName, AccessibleRole, AccessibleDescription is set to a custom value for the Label/GroupBox control, this does not affect the AccessibleName, AccessibleRole, AccessibleDescription in runtime. And default values are shown.\r\n\r\n**Expected behavior:**\r\nThere should be an ability to set/change AccessibleName, AccessibleRole, AccessibleDescription for the Label/GroupBox control.\r\n\r\n**Minimal repro:**\r\nCreate the app with the Label/GroupBox control. Specify custom AccessibleName, AccessibleRole, AccessibleDescription for the label/groupBox. Run the app and observe that the default AccessibleRole or default AccessibleName or default AccessibleDescription are shown in Inspect or Accessibility Insights.","Url":"https://github.com/dotnet/winforms/issues/3504","RelatedDescription":"Open issue \"[Servicing] Accessibility: no way to set Label control accessible role and accessible name\" (#3504)"},{"Id":"644563165","IsPullRequest":true,"CreatedAt":"2020-06-24T12:33:00","Actor":"dotnet-maestro[bot]","Number":"3503","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200623.9\r\n- **Date Produced**: 6/24/2020 9:17 AM\r\n- **Commit**: d908270add914db0e9fb3ce72e93c410e8f0f95a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.DirectoryServices**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.IO.Packaging**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3503)","Url":"https://github.com/dotnet/winforms/pull/3503","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3503)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-07-02T05:30:55.0087402Z","RunDurationInMilliseconds":784}