{"Data":{"GitHub":{"Issues":[{"Id":"640096866","IsPullRequest":false,"CreatedAt":"2020-06-17T02:43:34","Actor":"Vino-Wang","Number":"3460","RawContent":null,"Title":"The icon is the same for both ListBox & CheckedListBox controls in Toolbox window","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0 Preview 7 5.0.100-preview.7.20316.3\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nThe icon is the same for ListBox & CheckedListBox controls.\r\n![Same](https://user-images.githubusercontent.com/18568603/84849160-4b61de00-b087-11ea-98a8-75df217ad0c7.png)\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\nThe icon should not be the same.\r\n![NotSame](https://user-images.githubusercontent.com/18568603/84849163-4dc43800-b087-11ea-8750-c8d46bd7c09f.png)\r\n\r\n**Minimal repro:**\r\n1. Create a winforms core project.\r\n2. Type 'listBox' words in Toolbox's search box.\r\n3. Observe the controls' icon.","Url":"https://github.com/dotnet/winforms/issues/3460","RelatedDescription":"Open issue \"The icon is the same for both ListBox & CheckedListBox controls in Toolbox window\" (#3460)"},{"Id":"639975363","IsPullRequest":true,"CreatedAt":"2020-06-17T01:17:33","Actor":"JeremyKuhne","Number":"3458","RawContent":null,"Title":"Fix start-vs.cmd","State":"closed","Body":"After repaving I discovered my previous changes weren't correct. You can't check exists on partial paths. Quoting was wonky, etc.\r\n\r\nI've tested this one thoroughly for all three handled states and it appears to work fine.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3458)","Url":"https://github.com/dotnet/winforms/pull/3458","RelatedDescription":"Closed or merged PR \"Fix start-vs.cmd\" (#3458)"},{"Id":"640066342","IsPullRequest":false,"CreatedAt":"2020-06-17T01:06:57","Actor":"RussKie","Number":"3459","RawContent":null,"Title":"Replace `== null` and `!= null` with `is null` and `is not null`","State":"open","Body":"\r\n\r\n\r\n**Expected behavior:**\r\n\r\nScrub the codebase to replace all instances:\r\n1. `== null` with `is null`, and\r\n1. `!= null` with `is not null` (when VS 16.7 is generally available)","Url":"https://github.com/dotnet/winforms/issues/3459","RelatedDescription":"Open issue \"Replace `== null` and `!= null` with `is null` and `is not null`\" (#3459)"},{"Id":"639612300","IsPullRequest":true,"CreatedAt":"2020-06-16T12:07:47","Actor":"dotnet-maestro[bot]","Number":"3457","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200615.3\r\n- **Date Produced**: 6/15/2020 2:03 PM\r\n- **Commit**: 279940471dacb387d78e00fd2c2dff724eafa251\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20314.1 to 5.0.0-preview.7.20315.3\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3457)","Url":"https://github.com/dotnet/winforms/pull/3457","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/runtime\" (#3457)"},{"Id":"639601410","IsPullRequest":false,"CreatedAt":"2020-06-16T11:49:38","Actor":"weltkante","Number":"3456","RawContent":null,"Title":"Flaky Clipboard Unit Tests","State":"open","Body":"* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n[Noticed](https://github.com/dotnet/winforms/pull/1932#issuecomment-644700150) as a flaky test:\r\n\r\n> System.Windows.Forms.Tests.TextBoxBaseTests.TextBoxBase_Paste_InvokeNotEmpty_Success [FAIL]\r\n      Assert.Equal() Failure\r\n                  (pos 1)\r\n      Expected: abc\r\n      Actual:   a\r\n                  (pos 1)\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\tests\\UnitTests\\TextBoxBaseTests.cs(5957,0): at System.Windows.Forms.Tests.TextBoxBaseTests.TextBoxBase_Paste_InvokeNotEmpty_Success()\r\n\r\nTest seems to assume clipboard is empty/nonfunctional (there is at least one more test along these, should review for more clipboard-dependent tests)\r\n\r\nAlso any clipboard tests need to be `[Collection(\"Sequential\")]` to avoid overlapping with other clipboard tests. Is it worth making the whole test class sequential just due to that single test? should the test be moved?\r\n\r\n**Expected behavior:**\r\nClipboard based tests initialize clipboard to be in known state and are marked for sequential execution\r\n\r\n**Minimal repro:**\r\nnone, flaky test","Url":"https://github.com/dotnet/winforms/issues/3456","RelatedDescription":"Open issue \"Flaky Clipboard Unit Tests\" (#3456)"},{"Id":"639554237","IsPullRequest":false,"CreatedAt":"2020-06-16T10:29:28","Actor":"Jessie-Zhang01","Number":"3455","RawContent":null,"Title":"[Accessibility] Narrator cannot announce the content in RichTextBox.","State":"open","Body":"* .NET Core Version: \r\n.Net 5.0.100-preview.7.20314.1 from 5.0 master branch\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Minimal repro:**\r\n\r\n1. Extract “Private_1588_LTR_without_ComboBox.zip” and open in in VS, then build and run this application. \r\n2. Enter \"rich\" content into RichTextBox, then start Narrator and focus on RichTextBox and observe Narrator behavior.\r\n\r\n**Expected behavior:**\r\nNarrator should announce the content \"rich' in RichTextBox.\r\n![image](https://user-images.githubusercontent.com/45864649/84763618-1316bd00-afff-11ea-9b1f-bdae36ec591f.png)\r\n\r\n**Actual behavior:**\r\nNarrator cannot announce the content \"rich' in RichTextBox.\r\n![image](https://user-images.githubusercontent.com/45864649/84763561-fc706600-affe-11ea-86be-7a9feeda0926.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3455","RelatedDescription":"Open issue \"[Accessibility] Narrator cannot announce the content in RichTextBox.\" (#3455)"},{"Id":"639552714","IsPullRequest":false,"CreatedAt":"2020-06-16T10:26:54","Actor":"Marie-Shi","Number":"3454","RawContent":null,"Title":"[Accessibility]The narrator announces twice and announces additional \"1\" when value more than \"10\" using Keyboard \"UP/Down\" arrows to change NumericUpDown value","State":"open","Body":"* .NET Core Version: \r\n.Net 5.0.100-preview.7.20314.1 from master branch + latest master VS2019 with latest core designer\r\n\r\n**Steps to reproduce:**\r\n**Scenario a:**\r\n1.\tExtract “Release dlls.zip” and replace them to .Net 5.0.\r\n[Release dlls.zip](https://github.com/dotnet/winforms/files/4786001/Release.dlls.zip)\r\n\r\n2.\tExtract “Private_1588_LTR_without_ComboBox.zip” and open in in VS, then build and run this application.\r\n[Private_1588_LTR_without_ComboBox.zip](https://github.com/dotnet/winforms/files/4786002/Private_1588_LTR_without_ComboBox.zip)\r\n\r\n3.\tStart Narrator and focus on NumericUpDown, using Keyboard \"UP/Down\" arrows to change NumericUpDown value and observe Narrator behavior.\r\n\r\n**More info:** \r\n1.\tThis issue cannot repro without private.\r\n2.\tThis issue can repro in RTL and LTR environment.\r\n3.\tThis issue can repro in 1809 OS, cannot repro in 1909 OS.\r\n\r\n**Actual behavior:**\r\nUsing Keyboard \"UP/Down\" arrows to change NumericUpDown value, the narrator announces twice.\r\n![a](https://user-images.githubusercontent.com/45864017/84762851-ed3ce880-affd-11ea-8c27-9020b82b8c42.png)\r\n\r\n**Expected behavior:**\r\nUsing Keyboard \"UP/Down\" arrows to change NumericUpDown value, the narrator only announces once time. \r\n![a1](https://user-images.githubusercontent.com/45864017/84762861-ef9f4280-affd-11ea-8882-1e7b6edfd5ed.png)\r\n\r\n**Scenario b:**\r\n1.\tRepeat Step1, Step2 from **Scenario a**.\r\n2.\tStart Narrator and focus on NumericUpDown, using Keyboard \"UP/Down\" arrows to change NumericUpDown value until more than \"10\"and observe Narrator behavior.\r\n\r\nMore info:\r\n1.\tThis issue cannot repro when using Mouse to increase Numericupdown value.\r\n2.\tThis issue cannot repro without private.\r\n3.\tThis issue can repro in 1809 OS and 1909 OS.\r\n4.\tThis issue can repro in RTL and LTR environment.\r\na.\tIn the RTL environment, narrator focuses on the single digit when NumericUpDown increases to two digits.\r\nb.\tIn the LTR environment, the narrator focuses on the tenth place when NumericUpDown increases to two digits.\r\n\r\n**Actual behavior:**\r\nNarrator announces additional \"1\" when value more than \"10\" using Keyboard \"UP/Down\" arrows to change NumericUpDown value.\r\n![b](https://user-images.githubusercontent.com/45864017/84762872-f4fc8d00-affd-11ea-8e06-707d4eba31ad.png)\r\n![ComboBox_issue](https://user-images.githubusercontent.com/45864017/84763126-4f95e900-affe-11ea-840b-b582aeadd3e6.gif)\r\n\r\n**Expected behavior:**\r\nNarrator cannot announce additional \"1\" when value more than \"10\" using Keyboard \"UP/Down\" arrows to change NumericUpDown value.","Url":"https://github.com/dotnet/winforms/issues/3454","RelatedDescription":"Open issue \"[Accessibility]The narrator announces twice and announces additional \"1\" when value more than \"10\" using Keyboard \"UP/Down\" arrows to change NumericUpDown value\" (#3454)"},{"Id":"639551418","IsPullRequest":false,"CreatedAt":"2020-06-16T10:24:51","Actor":"Jessie-Zhang01","Number":"3453","RawContent":null,"Title":"[Accessibility] The narrator announces content is confusion when using mouse to increase NumericUpDown value","State":"open","Body":"* .NET Core Version: \r\n.Net 5.0.100-preview.7.20314.1 from 5.0 master branch\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Minimal repro:**\r\n\r\n1. Extract the private dlls file-“Release dlls.zip” and replace them under location \"C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App\\5.0.0-preview.7.20311.4\".\r\n2. Extract “Private_1588_LTR_without_ComboBox.zip” and open in in VS, then build and run this application.\r\n3. Start Narrator and focus on NumericUpDown, using mouse to increase NumericUpDown value and observe Narrator behavior.\r\n[Release dlls.zip](https://github.com/dotnet/winforms/files/4785901/Release.dlls.zip)\r\n[Private_1588_LTR_without_ComboBox.zip](https://github.com/dotnet/winforms/files/4785903/Private_1588_LTR_without_ComboBox.zip)\r\n\r\n**Expected behavior:**\r\nThe narrator should announces the correct content when using mouse to increase NumericUpDown value.\r\n\r\n**Actual behavior:**\r\nThe narrator announces content is confusion when using mouse to increase NumericUpDown value.\r\n![image](https://user-images.githubusercontent.com/45864649/84763354-a13e7380-affe-11ea-8f6c-0f2af0a7902e.png)\r\n![Numeric_increase_by_mouse](https://user-images.githubusercontent.com/45864649/84762934-05146c80-affe-11ea-920b-7bff9f198e62.gif)\r\n","Url":"https://github.com/dotnet/winforms/issues/3453","RelatedDescription":"Open issue \"[Accessibility] The narrator announces content is confusion when using mouse to increase NumericUpDown value\" (#3453)"},{"Id":"639535128","IsPullRequest":false,"CreatedAt":"2020-06-16T09:59:22","Actor":"Jessie-Zhang01","Number":"3452","RawContent":null,"Title":"[Accessibility] ComboBox control causes Narrator and Inspect not respond","State":"open","Body":"* .NET Core Version: \r\n.Net 5.0.100-preview.7.20314.1 from 5.0 master branch\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**More Info:**\r\n\r\n1. This issue can also reproduce on without Private.\r\n2. This issue can reproduce in RTL and LTR environment.\r\n\r\n**Minimal repro:**\r\n\r\n1. Open the attached ‘WindowsFormsApp3’ application in VS, then build and run it.\r\n2. Open Narrator or Inspect, then focus it's cursor to the ComboBox control.\r\n[WindowsFormsApp4.zip](https://github.com/dotnet/winforms/files/4785850/WindowsFormsApp4.zip)\r\n\r\n**Expected behavior:**\r\nNarrator or Inspect's cursor focuses on the ComboBox control and works fine.\r\n\r\n**Actual behavior:**\r\nComboBox control causes Narrator and Inspect not respond.\r\n![1909-NewIssue2](https://user-images.githubusercontent.com/45864649/84760214-47d44580-affa-11ea-85eb-7d3b20e0829d.gif)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3452","RelatedDescription":"Open issue \"[Accessibility] ComboBox control causes Narrator and Inspect not respond\" (#3452)"},{"Id":"637705956","IsPullRequest":true,"CreatedAt":"2020-06-16T05:51:19","Actor":"dotnet-maestro[bot]","Number":"3441","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200614.1\r\n- **Date Produced**: 6/15/2020 12:57 AM\r\n- **Commit**: 533e9b7dbb5ab9f63e74f95d8cae78171dafc31f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20314.1\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3441)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/3441","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3441)"},{"Id":"639353214","IsPullRequest":true,"CreatedAt":"2020-06-16T04:05:46","Actor":"RussKie","Number":"3451","RawContent":null,"Title":"Enable nullable reference types for System.Windows.Forms.Primitives","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nBased on work started by @sharwell in #2676, renders it obsolete.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3451)","Url":"https://github.com/dotnet/winforms/pull/3451","RelatedDescription":"Open PR \"Enable nullable reference types for System.Windows.Forms.Primitives\" (#3451)"},{"Id":"638379685","IsPullRequest":true,"CreatedAt":"2020-06-16T02:05:26","Actor":"gpetrou","Number":"3447","RawContent":null,"Title":"Add CLIENTCREATESTRUCT in Interop User32 and remove unused COMRECT","State":"closed","Body":"## Proposed changes\r\n\r\n- Add CLIENTCREATESTRUCT in Interop User32 and remove the corresponding class from NativeMethods.cs.\r\n- Remove unused COMRECT.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3447)","Url":"https://github.com/dotnet/winforms/pull/3447","RelatedDescription":"Closed or merged PR \"Add CLIENTCREATESTRUCT in Interop User32 and remove unused COMRECT\" (#3447)"},{"Id":"639205913","IsPullRequest":false,"CreatedAt":"2020-06-15T21:58:55","Actor":"weltkante","Number":"3450","RawContent":null,"Title":"Leaking DeviceContext instances in unit tests","State":"open","Body":"**.NET Core Version:**\r\ngithub master\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nunknown (cannot debug Desktop Framework source to determine if ErrorProvider leaks there as well)\r\n\r\n**Problem description:**\r\nWhile investigating control handle leaks in the unit tests I also noticed significant `DeviceContext` leaks. They are not permanent leaks, the GC does clean them up, but they are nondeterministic and released on a different thread than they were created on - don't know if thats any issue, probably not since tests seem to be running fine generally. I also don't know if there is any relation to previously observed GDI resource bottlenecks on the CI machine.\r\n\r\n* `WindowsGraphicsCacheManager` caches a `DeviceContext` for each UI thread but never releases it, so it will leak and be GC'ed. Since unit testing creates a lot of test threads this also cycles a lot of `DeviceContext` instances through the GC.\r\n\r\n<details><summary>Stack Trace Example</summary>\r\n\r\n### Test:\r\nSystem.Windows.Forms.Tests.AccessibleObjects.MonthCalendarAccessibleObjectTests.MonthCalendarAccessibleObject_GetCalendarCell_DoesntThrowException_If_ParentAccessibleObject_IsNull\r\n\r\n### Stacktrace:\r\n```\r\n   at System.Windows.Forms.Internal.DeviceContext..ctor(IntPtr hDC, DeviceContextType dcType)\r\n   at System.Windows.Forms.Internal.DeviceContext.FromCompatibleDC(IntPtr hdc)\r\n   at System.Windows.Forms.Internal.WindowsGraphics.CreateMeasurementWindowsGraphics()\r\n   at System.Windows.Forms.Internal.WindowsGraphicsCacheManager.get_MeasurementGraphics()\r\n   at System.Windows.Forms.Internal.WindowsFont.FromFont(Font font, QUALITY fontQuality)\r\n   at System.Windows.Forms.MonthCalendar.GetMinReqRect(Int32 newDimensionLength, Boolean updateRows, Boolean updateCols)\r\n   at System.Windows.Forms.MonthCalendar.GetMinReqRect()\r\n   at System.Windows.Forms.MonthCalendar.get_DefaultSize()\r\n   at System.Windows.Forms.Control..ctor(Boolean autoInstallSyncContext)\r\n   at System.Windows.Forms.Control..ctor()\r\n   at System.Windows.Forms.MonthCalendar..ctor()\r\n   at System.Windows.Forms.Tests.AccessibleObjects.MonthCalendarAccessibleObjectTests.MonthCalendarAccessibleObject_GetCalendarCell_DoesntThrowException_If_ParentAccessibleObject_IsNull()\r\n```\r\n\r\n</details>\r\n\r\n* The `ErrorProvider` creates a private nested class `ErrorWindow` which leaks _multiple_ `DeviceContext` instances from `CreateMirrorDC` which are never disposed correctly even though the `ErrorProvider` and its controls seem to be disposed properly.\r\n\r\n  This happens in the `ErrorProviderAccessibleObjectTests` which now does have `Dispose` method and is verified to be called, but also on other `ErrorProvider` tests (see example C) which don't use instance-level fields. I may have overlooked something but it is not clear to me what additional `Dispose` calls are needed to clean up an `ErrorProvider` correctly, so its currently unknown if its tests not disposing properly or the implementation not disposing properly.\r\n\r\n<details><summary>Stack Trace Example A</summary>\r\n\r\n### Test:\r\nSystem.Windows.Forms.Tests.AccessibleObjects.ErrorProviderAccessibleObjectTests.ErrorProvider_NameDoesntEqualControlTypeOrChildName\r\n\r\n### Stacktrace:\r\n```\r\n   at System.Windows.Forms.Internal.DeviceContext..ctor(IntPtr hDC, DeviceContextType dcType)\r\n   at System.Windows.Forms.Internal.DeviceContext.FromHdc(IntPtr hdc)\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.CreateMirrorDC(IntPtr hdc, Int32 originOffset)\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.Update(Boolean timerCaused)\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.Add(ControlItem item)\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.AddToWindow()\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.set_Error(String value)\r\n   at System.Windows.Forms.ErrorProvider.SetError(Control control, String value)\r\n   at System.Windows.Forms.Tests.AccessibleObjects.ErrorProviderAccessibleObjectTests..ctor()\r\n```\r\n\r\n</details>\r\n\r\n<details><summary>Stack Trace Example B</summary>\r\n\r\n### Test:\r\nSystem.Windows.Forms.Tests.AccessibleObjects.ErrorProviderAccessibleObjectTests.ErrorProvider_CorrectErrorValue\r\n\r\n### Stacktrace:\r\n```\r\n   at System.Windows.Forms.Internal.DeviceContext..ctor(IntPtr hDC, DeviceContextType dcType)\r\n   at System.Windows.Forms.Internal.DeviceContext.FromHdc(IntPtr hdc)\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.CreateMirrorDC(IntPtr hdc, Int32 originOffset)\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.Update(Boolean timerCaused)\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.StartBlinking()\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.StartBlinking()\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.AddToWindow()\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.set_Error(String value)\r\n   at System.Windows.Forms.ErrorProvider.SetError(Control control, String value)\r\n   at System.Windows.Forms.Tests.AccessibleObjects.ErrorProviderAccessibleObjectTests..ctor()\r\n```\r\n\r\n   </details>\r\n\r\n<details><summary>Stack Trace Example C</summary>\r\n\r\n### Test:\r\nSystem.Windows.Forms.Tests.ErrorProviderTests.ErrorProvider_Items_CallEvents_Success\r\n\r\n### Stacktrace:\r\n```\r\n   at System.Windows.Forms.Internal.DeviceContext..ctor(IntPtr hDC, DeviceContextType dcType)\r\n   at System.Windows.Forms.Internal.DeviceContext.FromHdc(IntPtr hdc)\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.CreateMirrorDC(IntPtr hdc, Int32 originOffset)\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.Update(Boolean timerCaused)\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.StartBlinking()\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.StartBlinking()\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.AddToWindow()\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.OnParentVisibleChanged(Object sender, EventArgs e)\r\n   at System.Windows.Forms.Control.OnVisibleChanged(EventArgs e)\r\n   at System.Windows.Forms.Control.SetVisibleCore(Boolean value)\r\n   at System.Windows.Forms.Control.set_Visible(Boolean value)\r\n   at System.Windows.Forms.Tests.ErrorProviderTests.ErrorProvider_Items_CallEvents_Success(ErrorBlinkStyle blinkStyle, SubControl control, String error, String expected)\r\n```\r\n\r\n   </details>\r\n\r\n**Expected behavior:**\r\nIdeally deterministic cleanup of GDI resources (instead of letting the GC clean up lazily)\r\n\r\n**Minimal repro:**\r\nRun unit tests under a debugger and put a conditional breakpoint in `DeviceContext` finalizer. Condition it on `_disposed == false`.\r\n\r\n(Sometimes the finalizer is called on disposed objects, thats an issue with finalization order and cross-class internal calls from other finalized classes to `Dispose(bool)` not implementing the disposable pattern correctly. Doesn't cause any harm just a redundant call.)\r\n","Url":"https://github.com/dotnet/winforms/issues/3450","RelatedDescription":"Open issue \"Leaking DeviceContext instances in unit tests\" (#3450)"},{"Id":"638050921","IsPullRequest":true,"CreatedAt":"2020-06-15T08:01:59","Actor":"JeremyKuhne","Number":"3442","RawContent":null,"Title":"Add scoping structs for Win32 objects","State":"closed","Body":"This builds on what I did for ScreenDC some time ago. It creates wrapper ref structs for deterministic undoing of resource creation and selection. The goal is to help prevent misordering and leaked objects while also reducing nesting complexity.\r\n\r\nNote that discards for the new style usings is a coming enhancement in C# that will make this even cleaner. If we move towards typing native handles this pattern will work well with that.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3442)","Url":"https://github.com/dotnet/winforms/pull/3442","RelatedDescription":"Closed or merged PR \"Add scoping structs for Win32 objects\" (#3442)"},{"Id":"637615139","IsPullRequest":true,"CreatedAt":"2020-06-15T07:56:31","Actor":"RussKie","Number":"3440","RawContent":null,"Title":"Correct SelectedImageKey/SelectedImageIndex/StateImageKey/StateImageIndex properties","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nResolves #3425\r\nRelates to #3364\r\n\r\n\r\n## Proposed changes\r\n\r\n- Setters for `ImageKey` and `ImageIndex` properties were made idempotent in #3126, however the change didn't account for the fact that the default `ImageKey == \"\"` and not `null`.\r\n  This caused failures to reset `SelectedImageIndex` or `StateImageIndex`, when `SelectedImageKey` or `StateImageKey` were set respectively to `\"\"`; and in reverse - failure to reset keys when indices were set to `-1`.\r\n  Tweak the setters to continue execution for default values.\r\n- More clean up to use const instead of magic number.\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- unit tests\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3440)","Url":"https://github.com/dotnet/winforms/pull/3440","RelatedDescription":"Closed or merged PR \"Correct SelectedImageKey/SelectedImageIndex/StateImageKey/StateImageIndex properties\" (#3440)"},{"Id":"638384349","IsPullRequest":true,"CreatedAt":"2020-06-15T00:16:30","Actor":"gpetrou","Number":"3449","RawContent":null,"Title":"Add ENM enum in Interop RichEdit","State":"closed","Body":"## Proposed changes\r\n\r\n- Add ENM enum in Interop RichEdit.\r\n- Remove ENM constants from RichTextBoxConstants.cs.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3449)","Url":"https://github.com/dotnet/winforms/pull/3449","RelatedDescription":"Closed or merged PR \"Add ENM enum in Interop RichEdit\" (#3449)"},{"Id":"638381953","IsPullRequest":true,"CreatedAt":"2020-06-14T16:11:38","Actor":"gpetrou","Number":"3448","RawContent":null,"Title":"Add missing Flags attribute in WM enum","State":"open","Body":"## Proposed changes\r\n\r\n- Add missing Flags attribute in WM enum.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3448)","Url":"https://github.com/dotnet/winforms/pull/3448","RelatedDescription":"Open PR \"Add missing Flags attribute in WM enum\" (#3448)"},{"Id":"638234958","IsPullRequest":false,"CreatedAt":"2020-06-13T21:16:00","Actor":"weltkante","Number":"3446","RawContent":null,"Title":"Remove references to ControlBindingsConverter","State":"open","Body":"Follow-up to #2412 and #3444\r\n\r\n**.NET Core Version:**\r\ngithub master\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nno\r\n\r\n**Problem description:**\r\n`ControlBindingsConverter` is currently defined in the VS designer and no longer present in the WinForms runtime, yet still [referenced](https://github.com/dotnet/winforms/search?q=ControlBindingsConverter&unscoped_q=ControlBindingsConverter). The previous approach was to port these by a on-demand basis so this is currently not needed in the WinForms runtime and should be removed to avoid confusion.\r\n\r\n**Expected behavior:**\r\nMetadata attributes should not refer to nonexistant classes.\r\n\r\n**Minimal repro:**\r\nPR #2230 test failure when removing skip entry","Url":"https://github.com/dotnet/winforms/issues/3446","RelatedDescription":"Open issue \"Remove references to ControlBindingsConverter\" (#3446)"},{"Id":"638056399","IsPullRequest":false,"CreatedAt":"2020-06-13T20:52:25","Actor":"KlausLoeffelmann","Number":"3445","RawContent":null,"Title":"Port missing DesignBinding Class","State":"closed","Body":"The `DesignBinding` class, which is used in the Design-Time Environment to support Data Binding, has not been ported yet from NetFx.","Url":"https://github.com/dotnet/winforms/issues/3445","RelatedDescription":"Closed issue \"Port missing DesignBinding Class\" (#3445)"},{"Id":"638054096","IsPullRequest":false,"CreatedAt":"2020-06-13T20:52:00","Actor":"KlausLoeffelmann","Number":"3443","RawContent":null,"Title":"Port missing DesignBindingConverter","State":"closed","Body":"The `DesignBindingConverter`, which converts data bindings for use in the Design-Time environment, has not been ported yet from NetFx and is missing.","Url":"https://github.com/dotnet/winforms/issues/3443","RelatedDescription":"Closed issue \"Port missing DesignBindingConverter\" (#3443)"},{"Id":"638055362","IsPullRequest":false,"CreatedAt":"2020-06-13T20:50:15","Actor":"KlausLoeffelmann","Number":"3444","RawContent":null,"Title":"Port missing ControlBindingsConverter","State":"closed","Body":"The `ControlBindingsConverter`, which provides the `DesignBindings` and the `AdvancedBinding` for the `ControlBindingsCollection` in a Design-Time environment, has not been ported yet from NetFx and is missing.","Url":"https://github.com/dotnet/winforms/issues/3444","RelatedDescription":"Closed issue \"Port missing ControlBindingsConverter\" (#3444)"},{"Id":"637203059","IsPullRequest":true,"CreatedAt":"2020-06-12T23:44:38","Actor":"cston","Number":"3433","RawContent":null,"Title":"Test WindowsFormsApplicationBase.GetApplicationInstanceID","State":"closed","Body":"## Proposed changes\r\n\r\n- Test for `WindowsFormsApplicationBase.GetApplicationInstanceID()`.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- None. Added test only. \r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Low risk. Added test only.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit test.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3433)","Url":"https://github.com/dotnet/winforms/pull/3433","RelatedDescription":"Closed or merged PR \"Test WindowsFormsApplicationBase.GetApplicationInstanceID\" (#3433)"},{"Id":"637585608","IsPullRequest":false,"CreatedAt":"2020-06-12T08:35:49","Actor":"Vino-Wang","Number":"3439","RawContent":null,"Title":"Cannot successfully assign a ListViewItem to a specified group in PropertyGrid","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0.100-preview.7.20311.17\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nThe setting is not successfully, the Group property was return to ‘(none)’ after clicking OK button.\r\n![Group](https://user-images.githubusercontent.com/18568603/84482566-91572480-acca-11ea-9f9e-83f1a107d5be.gif)\r\n\r\n**More Info:**\r\n1.\tThis issue is not a regression, can reproduce from .NET3.5 ~.NET4.8 in classic project and from .NET core 3.0 ~.NET 5.0 in Core project.\r\n2.\tThis issue is not reproducing when setting the Group property in designer properties window.\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n**Expected behavior:**\r\nThe Group property should be set successfully.\r\n\r\n**Minimal repro:**\r\n1.\tCreate a Winforms core project.\r\n2.\tDrag and drop a PropertyGrid and a ListView control to Form.\r\n3.\tAdd following code in InitializeComponent() part.\r\npublic Form1()\r\n{\r\n    InitializeComponent();\r\n        **propertyGrid1.SelectedObject = listView1;**\r\n}\r\n4.\tBuild and run.\r\n5.\tAdd one ListViewGroup that Header is ‘Group1’ by clicking the browser button next to the **Groups** property of ListView.\r\n6.\tAdd one ListViewItem that Text is ‘Item1’ by clicking the browser button next to the **Items** property of ListView.\r\n7.\tFind the **Group** property of the Item1, and set to ‘Group1’.\r\n8.\tClick OK button in ListViewItem Collection Editor.\r\n\r\nOr \r\n1.\tRun the attached project. [SetGroupProperty.zip](https://github.com/dotnet/winforms/files/4769633/SetGroupProperty.zip)\r\n2.\tRepeat the above step5~8.\r\n","Url":"https://github.com/dotnet/winforms/issues/3439","RelatedDescription":"Open issue \"Cannot successfully assign a ListViewItem to a specified group in PropertyGrid\" (#3439)"},{"Id":"637299923","IsPullRequest":true,"CreatedAt":"2020-06-12T05:45:06","Actor":"lonitra","Number":"3435","RawContent":null,"Title":"Throw Exception setting invalid value for 'ListViewGroupCollapsedState'","State":"closed","Body":"Fixes #3424 \r\n\r\n\r\n## Proposed changes\r\n\r\n- throw `InvalidEnumArgumentException` when the `CollapsedState` of a `ListViewGroup `\r\nis set to a value outside the range of the `ListViewGroupCollapsedState` enum\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Prevents user from having invalid enum for `ListViewGroup.CollapsedState`\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n- Unit testing\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3435)","Url":"https://github.com/dotnet/winforms/pull/3435","RelatedDescription":"Closed or merged PR \"Throw Exception setting invalid value for 'ListViewGroupCollapsedState'\" (#3435)"},{"Id":"637174893","IsPullRequest":true,"CreatedAt":"2020-06-12T05:44:03","Actor":"sharwell","Number":"3431","RawContent":null,"Title":"Define a CompileDesignTime target for Accessibility.ilproj","State":"closed","Body":"Fixes failures to resolve `IAccessible` in **System.Windows.Forms.Primitives** inside the IDE.\r\n","Url":"https://github.com/dotnet/winforms/pull/3431","RelatedDescription":"Closed or merged PR \"Define a CompileDesignTime target for Accessibility.ilproj\" (#3431)"},{"Id":"637244787","IsPullRequest":true,"CreatedAt":"2020-06-12T03:56:57","Actor":"JeremyKuhne","Number":"3434","RawContent":null,"Title":"System.Resources cleanup","State":"closed","Body":"Some non-functional cleanup of the System.Resources code. The first commit just breaks the classes out. The second changes (most of) the field names to be per standard. The third just does some simple spacing fixes and catches on classes fields I missed in the second.\r\n\r\ncc: @KlausLoeffelmann \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3434)","Url":"https://github.com/dotnet/winforms/pull/3434","RelatedDescription":"Closed or merged PR \"System.Resources cleanup\" (#3434)"},{"Id":"637445144","IsPullRequest":false,"CreatedAt":"2020-06-12T02:48:15","Actor":"vsfeedback","Number":"3438","RawContent":null,"Title":"Error en reposicionamiento de un control Label con Autosize=TRUE y Anchor=Bottom,Left","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/1070453/error-en-reposicionamiento-de-un-control-label-con.html)._\n\n---\nHe detectado el siguiente funcionamiento anómalo:\nTengo una pantalla con varios controles, entre ellos un TabControl y un DataGridview. Enmedio de los dos hay dos Labels.\nAl cargar la pantalla, esos dos Labels que tienen sus propiedades Autosize=TRUE y Anchor=Bottom,Left, se colocan en una posición no correcta, que debería ser entre el DataGridView y el TabControl.\nHe visto que si cambio la propiedad Autosize a FALSE, ese mal comportamiento se arregla.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 6/10/2020, 00:02 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### John Qiao [MSFT] on 6/10/2020, 02:27 PM: \n\n<p>Hi Maria,</p>\n<p>Thanks for your feedback.</p>\n<p>If you can reproduce this issue in a new simple project, please share your sample project here, we will test and check this scenario using your sample project on our side, that can help us provide the better response to you.</p>\n\n#### maria.garbero on 6/10/2020, 03:38 PM: \n\n(private comment, text removed)\n#### John Qiao [MSFT] on 6/10/2020, 05:28 PM: \n\n(private comment, text removed)\n#### maria.garbero on 6/10/2020, 05:36 PM: \n\n<p>Sorry, but I need to change cbAño.SelectedIndex on Form_Load because I need that when I show form, DataGrid already has rows.</p><p>If I use Form Shown events, user can be how datagrid is filled.</p><p>I don't understand why it fails when autosize is True... Because height is the same, only width changes on text fills.</p><p>I think that is a bug of Visual Studio WinForms.</p>\n\n#### John Qiao [MSFT] on 6/11/2020, 02:15 PM: \n\n(private comment, text removed)\n#### maria.garbero on 6/11/2020, 02:23 PM: \n\n<p>Sorry but I can't remove RellenaFicha from RecuperaPagos because I use it on another part of code (I only sent you a part of code of a complex form).</p><p>If you disable Autosize property of labels, the problem has resolved.</p><p>I think that is a bug of Visual Studio. Could you report to support developer team? Thanks.</p>\n\n#### John Qiao [MSFT] on 6/11/2020, 04:12 PM: \n\n<p>Hi Maria,</p><p>Thanks for your reply. </p><p>So, could you use below codes to showing the fPago form? That will resolve the label display issue. </p><pre>    Private Sub fMDI_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n        Dim fPago As New fPagos\n        'fPago = New fPagos With {\n        '    .MdiParent = Me,\n        '    .Dock = DockStyle.Fill\n        '}\n        fPago.TopLevel = False\n        fPago.Parent = Me\n        fPago.Dock = DockStyle.Fill\n        fPago.Show()\n        fPago.Select()\n    End Sub\n<br></pre>\n\n#### maria.garbero on 6/11/2020, 04:51 PM: \n\n<p>Sorry, but your code is not valid because parent is a MDIForm.</p>\n\n#### John Qiao [MSFT] on 6/11/2020, 05:08 PM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n\n#### maria.garbero solved on 6/11/2020, 05:15 PM, 0 votes: \n\n<p>Sorry, but I have problems with upper panel that I have in the original app.</p><p>I attach new project edited.</p><p><a target='_blank' href=\"https://developercommunity.visualstudio.com/storage/attachments/141051-errorlabelautosize.zip\">errorlabelautosize.zip</a></p>\n","Url":"https://github.com/dotnet/winforms/issues/3438","RelatedDescription":"Open issue \"Error en reposicionamiento de un control Label con Autosize=TRUE y Anchor=Bottom,Left\" (#3438)"},{"Id":"637326672","IsPullRequest":true,"CreatedAt":"2020-06-12T02:23:56","Actor":"JeremyKuhne","Number":"3436","RawContent":null,"Title":"Update start-vs.cmd to use current VS","State":"closed","Body":"Use the developer command prompt VS if available, fall back on devenv\r\nin the path, then finally to file association for .sln.\r\n\r\nNormalize casing of the commands.\r\n\r\ncc: @lonitra \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3436)","Url":"https://github.com/dotnet/winforms/pull/3436","RelatedDescription":"Closed or merged PR \"Update start-vs.cmd to use current VS\" (#3436)"},{"Id":"637390557","IsPullRequest":false,"CreatedAt":"2020-06-11T23:50:16","Actor":"KlausLoeffelmann","Number":"3437","RawContent":null,"Title":"Setting a TreeNode to a certain position in a TreeNodeCollection is inserting it rather than replacing the existing one.","State":"open","Body":"**.NET Core Version:**\r\nAll Versions from NetFx2.0 to CoreFx5.0\r\n\r\n**Have you experienced this same bug with .NET Framework?**\r\nYes\r\n\r\n**Problem description:**\r\nAssigning a TreeNode object to the TreeNodeCollection Index property inserts it to the underlying Windows TreeView control rather than updating the existing, and causes the .NET Nodes collection no longer to be in sync with the Windows TreeView control.\r\n\r\n\r\n**Expected behavior:**\r\nNode should be updated.\r\n\r\n**Minimal repro:**\r\n* Create a new WinForms App\r\n* Insert a TreeView on the Form.\r\n* Insert the folloing code in the Form_Load event handler.\r\n\r\n```\r\n       private void Form1_Load(object sender, EventArgs e)\r\n        {\r\n            treeView1.Nodes.Clear();\r\n\r\n            treeView1.Nodes.Add(new TreeNode(\"Item1\"));\r\n            treeView1.Nodes.Add(new TreeNode(\"Item2_node\"));\r\n            treeView1.Nodes.Add(new TreeNode(\"Item3\"));\r\n  \r\n            var node = treeView1.Nodes[1];\r\n            treeView1.Nodes[1] = node;\r\n        }\r\n```  \r\nAfter running this code, the TreeView shows:\r\n\r\n![image](https://user-images.githubusercontent.com/9663150/84449995-cc425500-ac03-11ea-95fc-32a22e0517c5.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/3437","RelatedDescription":"Open issue \"Setting a TreeNode to a certain position in a TreeNodeCollection is inserting it rather than replacing the existing one.\" (#3437)"},{"Id":"637181628","IsPullRequest":true,"CreatedAt":"2020-06-11T17:02:38","Actor":"vladimir-krestov","Number":"3432","RawContent":null,"Title":"Fixing control Handle force creating when creating ControlAccessibleObject","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3062\r\nBased on [this comment](https://github.com/dotnet/winforms/issues/3062#issuecomment-642313370)\r\n\r\n\r\n## Proposed changes\r\n\r\n- Check IsHandleCreated property before setting Handle value in ControlAccessibleObject constructor\r\n- Fix affected unit tests \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Has no distinct user impact but may resolve latent bugs. (like this #2797)\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Breaks 150+ unit tests (will be fixed here)\r\n- May break customer workarounds\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- unit tests\r\n- CTI\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- Microsoft Windows [Version 10.0.18363.900]\r\n- .NET SDK (5.0.100-preview.7.20305.3)\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3432)","Url":"https://github.com/dotnet/winforms/pull/3432","RelatedDescription":"Open PR \"Fixing control Handle force creating when creating ControlAccessibleObject\" (#3432)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-06-17T05:30:51.6989943Z","RunDurationInMilliseconds":841}