{"Data":{"GitHub":{"Issues":[{"Id":"3085014840","IsPullRequest":true,"CreatedAt":"2025-05-23T03:13:30","Actor":"Philip-Wang01","Number":"13512","RawContent":null,"Title":"Add unit test for HtmlElementErrorEventArgs.cs file","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\nRelated https://github.com/dotnet/winforms/issues/13442\r\n\r\n## Proposed changes\r\n- Add unit test file: HtmlElementErrorEventArgsTests.cs for HtmlElementErrorEventArgs.cs file.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13512)","Url":"https://github.com/dotnet/winforms/pull/13512","RelatedDescription":"Open PR \"Add unit test for HtmlElementErrorEventArgs.cs file\" (#13512)"},{"Id":"3084945043","IsPullRequest":true,"CreatedAt":"2025-05-23T02:50:34","Actor":"dotnet-maestro[bot]","Number":"13510","RawContent":null,"Title":"[main] Source code updates from dotnet/dotnet","State":"closed","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/arcade/blob/main/Documentation/UnifiedBuild/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [81d064a4-929c-4152-b746-ee3acc24b4ed](https://maestro.dot.net/subscriptions?search=81d064a4-929c-4152-b746-ee3acc24b4ed)\n- **Build**: [20250522.9](https://dev.azure.com/dnceng/internal/_build/results?buildId=2715105)\n- **Date Produced**: May 22, 2025 10:07:24 PM UTC\n- **Commit Diff**: [a4d6fdc...445fb3a](https://github.com/dotnet/dotnet/compare/a4d6fdc935d5da12efb00a0b3b693ff1439e0b41...445fb3a55b402cbe3a43576105e6fdc6686c8e4c)\n- **Commit**: [445fb3a55b402cbe3a43576105e6fdc6686c8e4c](https://github.com/dotnet/dotnet/commit/445fb3a55b402cbe3a43576105e6fdc6686c8e4c)\n- **Branch**: main\n\n**Updated Dependencies**\n- **Microsoft.NETCore.Platforms**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **System.Resources.Extensions**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **System.Windows.Extensions**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **Microsoft.NET.Sdk.IL**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **System.Reflection.MetadataLoadContext**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **Microsoft.NETCore.ILDAsm**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **System.Text.Encodings.Web**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **System.Text.Json**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **Microsoft.NETCore.App.Ref**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **System.Runtime.Serialization.Formatters**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **Microsoft.Win32.SystemEvents**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **System.CodeDom**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **System.Configuration.ConfigurationManager**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **System.Formats.Nrbf**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **System.IO.Hashing**: [from 10.0.0-preview.5.25270.108 to 10.0.0-preview.6.25272.109][1]\n- **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.25270.108 to 10.0.0-beta.25272.109][1]\n- **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.25270.108 to 10.0.0-beta.25272.109][1]\n- **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.25270.108 to 10.0.0-beta.25272.109][1]\n- **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.25270.108 to 10.0.0-beta.25272.109][1]\n- **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.25270.108 to 10.0.0-beta.25272.109][1]\n- **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.25270.108 to 10.0.0-beta.25272.109][1]\n\n[marker]: <> (End:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n[1]: https://github.com/dotnet/dotnet/compare/a4d6fdc935...445fb3a55b\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13510)","Url":"https://github.com/dotnet/winforms/pull/13510","RelatedDescription":"Closed or merged PR \"[main] Source code updates from dotnet/dotnet\" (#13510)"},{"Id":"3084953960","IsPullRequest":true,"CreatedAt":"2025-05-23T02:17:32","Actor":"Zheng-Li01","Number":"13511","RawContent":null,"Title":"Add code coverage for ImageListConverter & RelatedImageListAttribute","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/13442\r\n\r\n**Proposed changes**\r\nAdd unit test file: ImageListConverterTests.cs  & RelatedImageListAttributeTests for public/Internal methods of the ImageListConverter.cs & RelatedImageListAttribute.cs\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13511)","Url":"https://github.com/dotnet/winforms/pull/13511","RelatedDescription":"Open PR \"Add code coverage for ImageListConverter & RelatedImageListAttribute\" (#13511)"},{"Id":"3084891163","IsPullRequest":false,"CreatedAt":"2025-05-23T01:21:06","Actor":"dotnet-maestro-bot","Number":"13509","RawContent":null,"Title":"[dnceng-bot] Branch `winforms/release/9.0` can't be merged to Azdo internal branch","State":"open","Body":"Branch [release/9.0](https://github.com/dotnet/winforms/commits/release/9.0/) in `dotnet/winforms` repo can't be mirrored from GitHub to Azure [internal/release/9.0](https://dev.azure.com/dnceng/internal/_git/dotnet-winforms?version=GBinternal%2Frelease%2F9.0&_a=history) via internal merge. \n\nThere are conflicting commits in the target branch.\nThe branch is configured to be mirrored via automated merge. \nThe situation is rare but normal. The target branch is expected to receive manual commits in the Azure DevOps clone, which could cause conflict.\n\nConflicts need to be **resolved to unblock the code flow**.\n\n- you can resolve the issue by resolving the conflict in the **target branch only**. \n    - Please make sure that the changes sensitive from security perspective are not published ahead of time to GitHub!\n- reverting the extra commits in the Azdo target branch.\n- checking the logs of the mirroring process in the [mirroring pipeline](https://dev.azure.com/dnceng/internal/_build?definitionId=1387).\n- you can disable the mirroring of the branch in the [configuration file](https://dev.azure.com/dnceng/internal/_git/dotnet-mirroring?path=/dnceng-subscriptions.jsonc).\n- you can ask @dotnet/dnceng for help or read the [documentation](https://dev.azure.com/dnceng/internal/_git/dotnet-mirroring?path=/README.md).\n\nPlease close this issue once the conflict is resolved.","Url":"https://github.com/dotnet/winforms/issues/13509","RelatedDescription":"Open issue \"[dnceng-bot] Branch `winforms/release/9.0` can't be merged to Azdo internal branch\" (#13509)"},{"Id":"3081818797","IsPullRequest":true,"CreatedAt":"2025-05-23T01:17:08","Actor":"dotnet-maestro[bot]","Number":"13505","RawContent":null,"Title":"[release/9.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:92989bf7-cdf9-483d-64c5-08dcbc356d11)\n## From https://github.com/dotnet/arcade\n- **Subscription**: [92989bf7-cdf9-483d-64c5-08dcbc356d11](https://maestro.dot.net/subscriptions?search=92989bf7-cdf9-483d-64c5-08dcbc356d11)\n- **Build**: [20250521.1](https://dev.azure.com/dnceng/internal/_build/results?buildId=2714414)\n- **Date Produced**: May 21, 2025 8:30:12 PM UTC\n- **Commit**: [086a1771875b63404b4a710d27250fe384dc2810](https://github.com/dotnet/arcade/commit/086a1771875b63404b4a710d27250fe384dc2810)\n- **Branch**: refs/heads/release/9.0\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 9.0.0-beta.25255.5 to 9.0.0-beta.25271.1][1]\n  - **Microsoft.DotNet.CMake.Sdk**: [from 9.0.0-beta.25255.5 to 9.0.0-beta.25271.1][1]\n  - **Microsoft.DotNet.GenFacades**: [from 9.0.0-beta.25255.5 to 9.0.0-beta.25271.1][1]\n  - **Microsoft.DotNet.Helix.Sdk**: [from 9.0.0-beta.25255.5 to 9.0.0-beta.25271.1][1]\n  - **Microsoft.DotNet.RemoteExecutor**: [from 9.0.0-beta.25255.5 to 9.0.0-beta.25271.1][1]\n  - **Microsoft.DotNet.XUnitExtensions**: [from 9.0.0-beta.25255.5 to 9.0.0-beta.25271.1][1]\n\n[1]: https://github.com/dotnet/arcade/compare/1cfa39f82d...086a177187\n\n[DependencyUpdate]: <> (End)\n\n- **Updates to .NET SDKs:**\n  - Updates sdk.version to 9.0.106\n  - Updates tools.dotnet to 9.0.106\n\n[marker]: <> (End:92989bf7-cdf9-483d-64c5-08dcbc356d11)\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13505)","Url":"https://github.com/dotnet/winforms/pull/13505","RelatedDescription":"Closed or merged PR \"[release/9.0] Update dependencies from dotnet/arcade\" (#13505)"},{"Id":"3082589145","IsPullRequest":false,"CreatedAt":"2025-05-22T08:53:18","Actor":"Liv-Goh","Number":"13508","RawContent":null,"Title":"Original text box is not empty after drag and drop the value to a new text box","State":"open","Body":"### .NET version\n\n.NET 10.0.100- preview.5.25270.108\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, this issue is regressed from PR: [Allow IDataObjectAsyncCapability by JeremyKuhne · Pull Request #13431 · dotnet/winforms](https://github.com/dotnet/winforms/pull/13431)\n\n### Issue description\n\nAfter drag and drop text from one control to another, the original one should be empty\n\n**Current behavior**\nThe original text box is not empty\n![Image](https://github.com/user-attachments/assets/63ddefe1-71aa-4210-97aa-f0b7de42d29b)\n\n**Expected behavior**\nThe original text box is empty\n![Image](https://github.com/user-attachments/assets/6ae62bc4-9d0c-46ad-96c4-d3f012a0a541)\n\n### Steps to reproduce\n\nPlease download, unzip and run this sample project to test the issue.\n[DragDropMoveSample.zip](https://github.com/user-attachments/files/20383637/DragDropMoveSample.zip)\n","Url":"https://github.com/dotnet/winforms/issues/13508","RelatedDescription":"Open issue \"Original text box is not empty after drag and drop the value to a new text box\" (#13508)"},{"Id":"3082259897","IsPullRequest":false,"CreatedAt":"2025-05-22T06:50:55","Actor":"NagarajManimaran","Number":"13507","RawContent":null,"Title":"WinForms Designer Error: Could Not Determine a Valid Designer Type for Custom ToolStrip in .NET Core","State":"open","Body":"### Environment\n\nVisual Studio professional 2022 - version 17.13.0\n\n### .NET version\n\n.NetCore 6,7,8\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nNo, it doesn't work on previous NetCore versions.\n\n### Issue description\n\nWe encountered the following error in the Output window when adding a CustomToolStrip component to a form in design view in .NET Core:\n\n\n```\nfail: Could not determine a valid designer type for 'customcontrol.CustomToolStripDesigner, customcontrol'.\n\nFor information on how to troubleshoot the designer refer to the guide at https://aka.ms/winforms/designer/troubleshooting\n```\n\nIn our implementation, the CustomToolStripDesigner uses reflection to load and invoke Microsoft’s internal ToolStripDesigner within its Initialize method. We assumed that this reflection approach might not be functioning correctly in .NET Core.\n\n![Image](https://github.com/user-attachments/assets/0dbab364-d135-4514-969a-f26553e37048)\n\nUpon further analysis, we found the following:\n\nThe Microsoft ToolStrip control is part of the System.Windows.Forms assembly, which is available in both .NET Framework and .NET Core/.NET, so it functions properly in both environments.\n\nHowever, the ToolStripDesigner class resides in the System.Design assembly, which is only available in .NET Framework and not supported in .NET Core/.NET.\nAs a result, referencing or reflecting this designer type in .NET Core fails, leading to the designer not being initialized and the error shown in the Output window.\n\nNote: While ToolStripDesigner is available in the System.Design assembly in .NET Framework, it is not available in .NET Core—even though the ToolStrip itself is supported in both environments.\n\nWe also compared the reflection behavior between .NET Framework and .NET Core and observed that: We have attached a screenshot below showing the differences in reflection behavior for clarity.\n\nFramework:\n\n![Image](https://github.com/user-attachments/assets/88478e85-2b11-497c-960f-be027452056c)\n\nCore:\n\n![Image](https://github.com/user-attachments/assets/4a408c5a-2f06-4477-9d4f-5b2821e7f6b3)\n\nI attached the netcore sample project also \n\n[customcontrol.zip](https://github.com/user-attachments/files/20381468/customcontrol.zip)\n\nHow to achieve this in .NetCore?\n\n### Steps to reproduce\n\nDrag and drop the CustomToolStrip onto a WinForms form in a .NET Core project.\n\nThen, check the Output window in Visual Studio by selecting 'Show output from: Windows Forms Designer' from the dropdown.\n\n### Diagnostics\n\n```text\n\n```","Url":"https://github.com/dotnet/winforms/issues/13507","RelatedDescription":"Open issue \"WinForms Designer Error: Could Not Determine a Valid Designer Type for Custom ToolStrip in .NET Core\" (#13507)"},{"Id":"3081828655","IsPullRequest":true,"CreatedAt":"2025-05-22T02:55:05","Actor":"dotnet-maestro[bot]","Number":"13506","RawContent":null,"Title":"[main] Source code updates from dotnet/dotnet","State":"closed","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/arcade/blob/main/Documentation/UnifiedBuild/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [81d064a4-929c-4152-b746-ee3acc24b4ed](https://maestro.dot.net/subscriptions?search=81d064a4-929c-4152-b746-ee3acc24b4ed)\n- **Build**: [20250520.8](https://dev.azure.com/dnceng/internal/_build/results?buildId=2713616)\n- **Date Produced**: May 21, 2025 5:20:58 AM UTC\n- **Commit Diff**: [d60c3fe...a4d6fdc](https://github.com/dotnet/dotnet/compare/d60c3fe894af16cd15dc86420af0fc9d02be4997...a4d6fdc935d5da12efb00a0b3b693ff1439e0b41)\n- **Commit**: [a4d6fdc935d5da12efb00a0b3b693ff1439e0b41](https://github.com/dotnet/dotnet/commit/a4d6fdc935d5da12efb00a0b3b693ff1439e0b41)\n- **Branch**: main\n\n**Updated Dependencies**\n- **Microsoft.NETCore.Platforms**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **System.Resources.Extensions**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **System.Windows.Extensions**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **Microsoft.NET.Sdk.IL**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **System.Reflection.MetadataLoadContext**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **Microsoft.NETCore.ILDAsm**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **System.Text.Encodings.Web**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **System.Text.Json**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **Microsoft.NETCore.App.Ref**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **System.Runtime.Serialization.Formatters**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **Microsoft.Win32.SystemEvents**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **System.CodeDom**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **System.Configuration.ConfigurationManager**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **System.Formats.Nrbf**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **System.IO.Hashing**: [from 10.0.0-preview.5.25269.109 to 10.0.0-preview.5.25270.108][1]\n- **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.25269.109 to 10.0.0-beta.25270.108][1]\n- **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.25269.109 to 10.0.0-beta.25270.108][1]\n- **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.25269.109 to 10.0.0-beta.25270.108][1]\n- **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.25269.109 to 10.0.0-beta.25270.108][1]\n- **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.25269.109 to 10.0.0-beta.25270.108][1]\n- **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.25269.109 to 10.0.0-beta.25270.108][1]\n\n[marker]: <> (End:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n[1]: https://github.com/dotnet/dotnet/compare/d60c3fe894...a4d6fdc935\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13506)","Url":"https://github.com/dotnet/winforms/pull/13506","RelatedDescription":"Closed or merged PR \"[main] Source code updates from dotnet/dotnet\" (#13506)"},{"Id":"3076087556","IsPullRequest":true,"CreatedAt":"2025-05-22T01:03:48","Actor":"LeafShi1","Number":"13483","RawContent":null,"Title":"Update resourceManagement.yml and Versions.props","State":"closed","Body":"Update Pre-Release Iteration and Resource Management Milestone to preview6\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13483)","Url":"https://github.com/dotnet/winforms/pull/13483","RelatedDescription":"Closed or merged PR \"Update resourceManagement.yml and Versions.props\" (#13483)"},{"Id":"3081422157","IsPullRequest":false,"CreatedAt":"2025-05-21T21:49:24","Actor":"RatiKalra","Number":"13501","RawContent":null,"Title":"Error with Form Designer view in Visual Studio - 2022","State":"closed","Body":"### Environment\n\nIssue : Almost everyone on the development team(team of 12 developers) is now facing problem with the form designer view. We are encountering the below error when trying to open the designer(both existing and when trying to create new windows form) window.\nWe have already tried some troubleshooting steps like repairing VS and disassociating the vulnerable NuGet packages, but the issue still persists.\n\nAlso, couldn’t find any helpful information on this error in the existing common design time error list - Check Windows Forms Design-Time error list\n\nNecessary Information –\n\nWindows 11 Enterprise\nMicrosoft Visual Studio Professional 2022 (64-bit) - Version 17.13.6\nTarget Framework – .NET Core 6.0\n\nThis project is under the banking domain, and due to security policy, it might be a risk to send the sample project.\nWe would like to propose a troubleshooting meeting on Microsoft Teams. Our usual business working hours are 8 AM to 6 PM EST.\n\nPlease advise your availability, and we will share the meeting details.\n\n\nError details - \n**Timed out while connecting to named pipe.** \nInstances of this error (1)  \n \n1.   Hide Call Stack \n \nat Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.d__39.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.d__29.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.Host.ServerHostFactory.d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.d__29.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.<>c__DisplayClass25_1.<<-ctor>b__1>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.d__27.MoveNext()  \n\n### .NET version\n\nTarget Framework – .NET Core 6.0\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nNo recent updates or framework upgrade was happened. And it was working fine till last month but then suddenly everyone started getting this error, as soon as we try to View in designer.\n\nCurrent Impact : VERY HIGH, as it is blocking our development and could cause delay in urgent deliveries if it is not resolved on time.\n\n\n\n### Issue description\n\nEveryone within the team(12 members) is facing **Timed out while connecting to named pipe.**  issue while trying to view designer, In existing project, we are not able to open any new or already present designer form. \n\nMore observations - \n1. VS re-install and repair did not resolve the issues.\n2. Able to open Form designer in newly created .NET Core 6 project, but not within the existing project.\n3. Attempted changing the target framework from .NET 6.0 to 8.0. While I was able to open the designer forms, i encountered several errors that are currently preventing the project from building successfully.\n\nCurrent Impact : VERY HIGH, as it is blocking our development and could cause delay in urgent deliveries if it is not resolved on time.\n\nThis project is under the banking domain, and due to security policy, it might be a risk to send the sample project.\nWe would like to propose a troubleshooting meeting on Microsoft Teams. Our usual business working hours are 8 AM to 6 PM EST.\n\nPlease advise your availability, and we will share the meeting details.\n\n\nError details - \n**Timed out while connecting to named pipe.** \nInstances of this error (1)  \n \n1.   Hide Call Stack \n \nat Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.d__39.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.d__29.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.Host.ServerHostFactory.d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.d__29.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.<>c__DisplayClass25_1.<<-ctor>b__1>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.d__27.MoveNext()  \n \n\n\n### Steps to reproduce\n\nCurrent Impact : VERY HIGH, as it is blocking our development and could cause delay in urgent deliveries if it is not resolved on time.\n\n\n### Diagnostics\n\n```text\nCouldn’t find any helpful information on this error in the existing common design time error list - Check Windows Forms Design-Time error list\n\n\nError details - \n**Timed out while connecting to named pipe.** \nInstances of this error (1)  \n \n1.   Hide Call Stack \n \nat Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.d__39.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.d__29.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.Host.ServerHostFactory.d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.d__29.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.<>c__DisplayClass25_1.<<-ctor>b__1>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.d__27.MoveNext()\n```","Url":"https://github.com/dotnet/winforms/issues/13501","RelatedDescription":"Closed issue \"Error with Form Designer view in Visual Studio - 2022\" (#13501)"},{"Id":"3081459717","IsPullRequest":true,"CreatedAt":"2025-05-21T21:31:10","Actor":"KlausLoeffelmann","Number":"13504","RawContent":null,"Title":"DarkMode (h) fix DatGridView issues","State":"open","Body":"Fixes dark mode issues around the DataGridView.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13504)","Url":"https://github.com/dotnet/winforms/pull/13504","RelatedDescription":"Open PR \"DarkMode (h) fix DatGridView issues\" (#13504)"},{"Id":"3081457259","IsPullRequest":false,"CreatedAt":"2025-05-21T21:29:30","Actor":"RatiKalra","Number":"13503","RawContent":null,"Title":"CRITICAL URGENT ISSUE - HIGH IMPACT - Error with Form Designer view in Visual Studio - 2022","State":"open","Body":"### Environment\n\nEnvironment\n\n\nMicrosoft Visual Studio Professional 2022 (64-bit) - Version 17.13.6\nTarget Framework – .NET Core 6.0\nWindows 11 Enterprise\n\n\n### .NET version\n\nTarget Framework – .NET Core 6.0\n\n\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nThere have been no recent updates or framework upgrades on our end. However, , starting recently, everyone on the team began encountering this error when attempting to view the designer \n\nCurrent Impact : VERY HIGH, as it is blocking our development and could cause delay in urgent deliveries if it is not resolved on time.\n\n### Issue description\n\nEveryone within the team(12 members) is facing Timed out while connecting to named pipe issue while trying to view designer, we are not able to open any new or already present designer form in existing project, \n\nWe have already tried some troubleshooting steps like repairing VS and disassociating the vulnerable NuGet packages, but the issue still persists.\n\nAlso, couldn’t find any helpful information on this error in the existing common design time error list - Check Windows Forms Design-Time error list\n\nMore observations -\n\n1. VS re-install and repair did not resolve the issues.\n2. Able to open Form designer in newly created .NET Core 6 project, but not within the existing project.\n3. Attempted changing the target framework from .NET 6.0 to 8.0. While I was able to open the designer forms, i encountered several errors that are currently preventing the project from building successfully.\n\nThis project is under the banking domain, and due to security policy, it might be a risk to send the sample project.\nWe would like to propose a troubleshooting meeting on Microsoft Teams. Our usual business working hours are 8 AM to 6 PM EST.\n\nPlease advise your availability, and we will share the meeting details.\n\nError details -\nTimed out while connecting to named pipe.\nInstances of this error (1)\n\nHide Call Stack\nat Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.d__39.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.d__29.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.Host.ServerHostFactory.d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.d__29.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.<>c__DisplayClass25_1.<<-ctor>b__1>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.d__27.MoveNext()\n\n### Steps to reproduce\n\nRight click -> Windows Form-> View Designer ->Error \"Timed out while connecting to named pipe\"\nAdd New Forms (Windows Form) - View Designer ->Error \"Timed out while connecting to named pipe\"\n\n### Diagnostics\n\n```text\nCouldn’t find any helpful information on this error in the existing common design time error list - Check Windows Forms Design-Time error list\n\n\nError details -\nTimed out while connecting to named pipe.\nInstances of this error (1)\n\nHide Call Stack\nat Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.d__39.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.d__29.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.Host.ServerHostFactory.d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.d__29.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.<>c__DisplayClass25_1.<<-ctor>b__1>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.d__27.MoveNext()\n```","Url":"https://github.com/dotnet/winforms/issues/13503","RelatedDescription":"Open issue \"CRITICAL URGENT ISSUE - HIGH IMPACT - Error with Form Designer view in Visual Studio - 2022\" (#13503)"},{"Id":"3081456658","IsPullRequest":true,"CreatedAt":"2025-05-21T21:29:06","Actor":"KlausLoeffelmann","Number":"13502","RawContent":null,"Title":"Dark mode g fix combo box renderer","State":"open","Body":"Fixes dark mode issues around the ComboBox.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13502)","Url":"https://github.com/dotnet/winforms/pull/13502","RelatedDescription":"Open PR \"Dark mode g fix combo box renderer\" (#13502)"},{"Id":"3080811530","IsPullRequest":true,"CreatedAt":"2025-05-21T16:27:06","Actor":"KlausLoeffelmann","Number":"13500","RawContent":null,"Title":"DarkMode (c) fix TitleBar issues","State":"open","Body":"Fixes #12991.\r\nFixes #12992.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13500)","Url":"https://github.com/dotnet/winforms/pull/13500","RelatedDescription":"Open PR \"DarkMode (c) fix TitleBar issues\" (#13500)"},{"Id":"3080057924","IsPullRequest":false,"CreatedAt":"2025-05-21T12:25:12","Actor":"CogDanny","Number":"13499","RawContent":null,"Title":"AxHost keeping parent alive","State":"open","Body":"### .NET version\n\n.NET 8\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nHaven't tried on earlier, but also broken on .NET 9\n\n### Issue description\n\nThe container of an AxHost never gets garbage collected. We originally discovered this while investigating a GDI Object leak, which is a manifestation of the container never getting collected.\n\n### Steps to reproduce\n\n\nThe attached projects demonstrate the issue by tracking when the container is constructed, disposed and finalized. The three projects are:\n_ActiveXControl_MFC_ - an MFC project that builds an ocx; the post-build step registers it (requires Visual Studio 2022 run as admin) and creates an interop assembly\n_AxHostContainer_ - a .NET 8 project that contains the AxHost\n_AxHostContainer_Framework48_ - a .NET Framework 4.8 project that contains the AxHost\nThe AxHostContainer projects are identical, except for the targeted .NET platform.\n\nRunning AxHostContainer apps: \nThe AxHostContainer apps effectively execute four cases, two on .NET 8 and the same two repeated on .NET Framework 4.8. Each of the four cases open and close a Form multiple times.\n```\n\tWithout AxHost\tWith AxHost\n.NET 8        +             x\n.NET FW       +             +\n```\nOnly the .NET 8 With AxHost case exhibits the bad behavior where the finalizers fail to execute.\n\n[AxHostLeak.zip](https://github.com/user-attachments/files/20367779/AxHostLeak.zip)\n","Url":"https://github.com/dotnet/winforms/issues/13499","RelatedDescription":"Open issue \"AxHost keeping parent alive\" (#13499)"},{"Id":"3079613850","IsPullRequest":true,"CreatedAt":"2025-05-21T09:44:32","Actor":"MelonWang1","Number":"13498","RawContent":null,"Title":"Add code coverage for UpDownBase.UpDownBaseAccessibleObject","State":"open","Body":"Related #13442\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add unit test file: UpDownBase.UpDownBaseAccessibleObjectTests.cs for public methods of the UpDownBase.UpDownBaseAccessibleObject.cs.cs\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13498)","Url":"https://github.com/dotnet/winforms/pull/13498","RelatedDescription":"Open PR \"Add code coverage for UpDownBase.UpDownBaseAccessibleObject\" (#13498)"},{"Id":"3079601875","IsPullRequest":true,"CreatedAt":"2025-05-21T09:40:20","Actor":"Philip-Wang01","Number":"13497","RawContent":null,"Title":"Add unit test for GridEntryRecreateChildrenEventArgs.cs file","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\nRelated https://github.com/dotnet/winforms/issues/13442\r\n## Proposed changes\r\n- Add unit test file: GridEntryRecreateChildrenEventArgsTests.cs for GridEntryRecreateChildrenEventArgs.cs file.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13497)","Url":"https://github.com/dotnet/winforms/pull/13497","RelatedDescription":"Open PR \"Add unit test for GridEntryRecreateChildrenEventArgs.cs file\" (#13497)"},{"Id":"3079366758","IsPullRequest":false,"CreatedAt":"2025-05-21T08:20:30","Actor":"Sekar47","Number":"13496","RawContent":null,"Title":"Transparent BackColor ignored when OnPaint is overridden in Button-derived controls","State":"open","Body":"### .NET version\n\n.NET Framework 4.8\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo\n\n### Issue description\n\nWhen creating a custom control that inherits from System.Windows.Forms.Button and overrides the OnPaint method, setting the BackColor property to Color.Transparent does not render a transparent background. Instead, the control renders a black background, even when placed on a colored or image-filled parent.\n\nWhen the overridden OnPaint is commented out, the transparent background works as expected. \n\n![Image](https://github.com/user-attachments/assets/a394a5b7-f2a7-4552-a0ce-3520adfadc87)\n![Image](https://github.com/user-attachments/assets/31d028e6-2914-41c1-9403-29238d384254)\n\n[WindowsFormsApp1.zip](https://github.com/user-attachments/files/20363063/WindowsFormsApp1.zip)\n\n### Steps to reproduce\n\n1.Open the provided sample solution \n2.Open the form (Form2) in the Designer.\n3.In the Properties window of CustomButton:\n- Set the BackColor property to Transparent.\n- Set the ForeColor property to any visible color (e.g., Blue).\n4.Save and run the application.\n5.The CustomButton renders with a black background, even though the BackColor was set to Transparent.\n6.If set the BackColor to a non-transparent color (Eg: Color.Red).\n7.The CustomButton now displays the correct red background as expected.","Url":"https://github.com/dotnet/winforms/issues/13496","RelatedDescription":"Open issue \"Transparent BackColor ignored when OnPaint is overridden in Button-derived controls\" (#13496)"},{"Id":"3079339680","IsPullRequest":true,"CreatedAt":"2025-05-21T08:10:56","Actor":"Philip-Wang01","Number":"13495","RawContent":null,"Title":"Add unit test for PropertyGridCommands.cs file","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\nRelated https://github.com/dotnet/winforms/issues/13442\r\n## Proposed changes\r\n- Add unit test file: PropertyGridCommandsTests.cs for PropertyGridCommands.cs file.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13495)","Url":"https://github.com/dotnet/winforms/pull/13495","RelatedDescription":"Open PR \"Add unit test for PropertyGridCommands.cs file\" (#13495)"},{"Id":"3078745996","IsPullRequest":false,"CreatedAt":"2025-05-21T03:00:16","Actor":"adslbarxatov","Number":"13494","RawContent":null,"Title":"Unexpected lowering of access rights when using System.Windows.Forms.Timer","State":"open","Body":"### .NET version\n\n.NET 9.0\n\n### Did it work in .NET Framework?\n\nNot tested/verified\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNot sure, haven't tested\n\n### Issue description\n\nHi!\n\nWe've occasionally met this issue today. It's quite hard to reproduce it. So, we'll try to present all corresponding info.\n\n---\n\n## Environment\n- Visual studio 17.14\n- .NET 9.0\n- WinForms C# project\n\nAlso (for all tested PC):\n- Windows 10 (latest update)\n- The UAC level doesn't matter\n- App is running under admin\n- The `Run as admin` compatibility flag is set\n- App is located in `C:\\Program files (x86)\\KassArray` directory\n\n---\n\n## Essence of problem\n\nWe have next code (*we think, it is important, where the needed file is located – the* ***OS-protected area*** *in this case*):\n\n```\nprivate void Timer_Tick (object sender, EventArgs e)\n  {\n  Button_Clicked (null, null);\n  }\n\nprivate void Button_Clicked (object sender, EventArgs e)\n  {\n  bool result = File.Exists (\"C:\\\\Program files (x86)\\\\KassArray\\\\PrinterSettings.fsr\");\n  if (result)\n    DoSomethingWithOtherFiles ();\n  }\n```\n\nIn this case `result` gets exactly the expected value when we click `Button` in the app interface. In our tests it was confirmed as `true` on all PCs.\n\nBut the **result becomes random** when the `Timer` ticks. And it doesn't make sence because it's happening **in the same app at the same time**. Under *random* we understand that it somehow depends on the machine where the app is running. Admin rights and UAC lowering don't help.\n\nAlso, `DoSomethingWithOtherFiles` method triggered by `Timer` is still able to access (read and write) files located in \"free\" area (f.e., Desktop or Documents). We've tested it by commenting the `if (result)` line.\n\n---\n\n### Thoughts\nWe know that the `File.Exists` method may return `false` when the file isn't available and when permissions of the app aren't enough to access the file. But we can't apply any of these reasons here.\n\nThe only difference we've found is that OS, where the `result` is `true`, trusts the certificate which has been used to sign the app. And OS, where the `result` is `false`, doesn't trust it. The button clicking gives `true` on both systems.\n\nCan the separated background thread of the timer explain this, may be? Does it have some restrictions?\n\n### Steps to reproduce\n\nQuite hard to reproduce it. We've tried to present all corresponding info above","Url":"https://github.com/dotnet/winforms/issues/13494","RelatedDescription":"Open issue \"Unexpected lowering of access rights when using System.Windows.Forms.Timer\" (#13494)"},{"Id":"3078665337","IsPullRequest":true,"CreatedAt":"2025-05-21T02:49:47","Actor":"dotnet-maestro[bot]","Number":"13493","RawContent":null,"Title":"[main] Source code updates from dotnet/dotnet","State":"closed","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/arcade/blob/main/Documentation/UnifiedBuild/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [81d064a4-929c-4152-b746-ee3acc24b4ed](https://maestro.dot.net/subscriptions?search=81d064a4-929c-4152-b746-ee3acc24b4ed)\n- **Build**: [20250519.9](https://dev.azure.com/dnceng/internal/_build/results?buildId=2713192)\n- **Date Produced**: May 20, 2025 9:46:44 AM UTC\n- **Commit Diff**: [170498a...d60c3fe](https://github.com/dotnet/dotnet/compare/170498a9429a5553fe7ac0ec2341d19bbb97cbe8...d60c3fe894af16cd15dc86420af0fc9d02be4997)\n- **Commit**: [d60c3fe894af16cd15dc86420af0fc9d02be4997](https://github.com/dotnet/dotnet/commit/d60c3fe894af16cd15dc86420af0fc9d02be4997)\n- **Branch**: main\n\n**Updated Dependencies**\n- **Microsoft.NETCore.Platforms**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **System.Resources.Extensions**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **System.Windows.Extensions**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **Microsoft.NET.Sdk.IL**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **System.Reflection.MetadataLoadContext**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **Microsoft.NETCore.ILDAsm**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **System.Text.Encodings.Web**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **System.Text.Json**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **Microsoft.NETCore.App.Ref**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **System.Runtime.Serialization.Formatters**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **Microsoft.Win32.SystemEvents**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **System.CodeDom**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **System.Configuration.ConfigurationManager**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **System.Formats.Nrbf**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **System.IO.Hashing**: [from 10.0.0-preview.5.25267.102 to 10.0.0-preview.5.25269.109][1]\n- **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.25267.102 to 10.0.0-beta.25269.109][1]\n- **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.25267.102 to 10.0.0-beta.25269.109][1]\n- **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.25267.102 to 10.0.0-beta.25269.109][1]\n- **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.25267.102 to 10.0.0-beta.25269.109][1]\n- **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.25267.102 to 10.0.0-beta.25269.109][1]\n- **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.25267.102 to 10.0.0-beta.25269.109][1]\n\n[marker]: <> (End:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n[1]: https://github.com/dotnet/dotnet/compare/170498a942...d60c3fe894\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13493)","Url":"https://github.com/dotnet/winforms/pull/13493","RelatedDescription":"Closed or merged PR \"[main] Source code updates from dotnet/dotnet\" (#13493)"},{"Id":"3078495097","IsPullRequest":true,"CreatedAt":"2025-05-21T00:06:17","Actor":"ricardobossan","Number":"13492","RawContent":null,"Title":"Adds code coverage to StandardMenuStripVerb","State":"open","Body":"Related #10773\r\n\r\n## Proposed changes\r\n\r\n- Adds code coverage to `StandardMenuStripVerb`\r\n\r\n## Customer Impact\r\n\r\n- None\r\n\r\n## Regression?\r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Test methodology\r\n\r\n- Unit tests\r\n\r\n## Test environment(s)\r\n\r\n- 10.0.100-preview.5.25265.106\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13492)","Url":"https://github.com/dotnet/winforms/pull/13492","RelatedDescription":"Open PR \"Adds code coverage to StandardMenuStripVerb\" (#13492)"},{"Id":"3078160044","IsPullRequest":true,"CreatedAt":"2025-05-20T22:06:06","Actor":"Copilot","Number":"13489","RawContent":null,"Title":"Fix thread safety in Application.ThreadContext.FromId","State":"closed","Body":"## Issue\nThe `Application.ThreadContext.FromId` method was reading from the `s_contextHash` dictionary without using a lock, which could cause errors if another thread writes to the dictionary at the same time.\n\nBefore this PR:\n- `s_contextHash` was being read without synchronization in the `FromId` method\n- All writers to the dictionary used proper locking with `s_lock`\n- This could lead to race conditions or exceptions when one thread is reading while another is writing\n\n## Fix\nAdded proper locking when accessing the `s_contextHash` dictionary in the `FromId` method to ensure thread safety.\n\n```diff\ninternal static ThreadContext? FromId(uint id)\n{\n+   lock (s_lock)\n+   {\n        if (!s_contextHash.TryGetValue(id, out ThreadContext? context) && id == PInvokeCore.GetCurrentThreadId())\n        {\n            context = Create();\n        }\n\n        return context;\n+   }\n}\n```\n\nThis change ensures thread safety by using the same locking pattern that's already used in other parts of the codebase that write to the `s_contextHash` dictionary.\n\nFixes #13246.\n\n> [!WARNING]\n>\n> <details>\n> <summary>Firewall rules blocked me from connecting to one or more addresses</summary>\n>\n> #### I tried to connect to the following addresses, but was blocked by firewall rules:\n>\n> - `dc.services.visualstudio.com`\n>   - Triggering command: `/home/REDACTED/work/winforms/winforms/.dotnet/dotnet msbuild /m /nologo /clp:Summary /v:minimal /nr:true /warnaserror /p:TreatWarningsAsErrors=true /p:ContinuousIntegrationBuild=false /home/REDACTED/work/winforms/winforms/artifacts/toolset/restore.proj /t:__WriteToolsetLocation /clp:ErrorsOnly;NoSummary /p:__ToolsetLocationOutputFile=/home/REDACTED/work/winforms/winforms/artifacts/toolset/10.0.0-beta.25267.102.txt ` (dns block)\n> - `pkgs.dev.azure.com`\n>   - Triggering command: `/home/REDACTED/work/winforms/winforms/.dotnet/dotnet msbuild /m /nologo /clp:Summary /v:minimal /nr:true /warnaserror /p:TreatWarningsAsErrors=true /p:ContinuousIntegrationBuild=false /home/REDACTED/work/winforms/winforms/artifacts/toolset/restore.proj /t:__WriteToolsetLocation /clp:ErrorsOnly;NoSummary /p:__ToolsetLocationOutputFile=/home/REDACTED/work/winforms/winforms/artifacts/toolset/10.0.0-beta.25267.102.txt ` (dns block)\n>\n> If you need me to access, download, or install something from one of these locations, you can either:\n>\n> - Configure [Actions setup steps](https://gh.io/copilot/actions-setup-steps) to set up my environment, which run before the firewall is enabled\n> - Add the appropriate URLs or hosts to my [firewall allow list](https://gh.io/copilot/firewall-config)\n>\n> </details>\n\n\n---\n\n💡 You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs.","Url":"https://github.com/dotnet/winforms/pull/13489","RelatedDescription":"Closed or merged PR \"Fix thread safety in Application.ThreadContext.FromId\" (#13489)"},{"Id":"3078166718","IsPullRequest":true,"CreatedAt":"2025-05-20T20:31:52","Actor":"Copilot","Number":"13491","RawContent":null,"Title":"Add tests for Clipboard JSON and raw data scenarios","State":"open","Body":"## Overview\n\nThis PR validates that Clipboard and DataObject support specialized data retrieval features, particularly for working with raw data and NRBF serialized content. It adds comprehensive tests to document existing behavior.\n\nKey scenarios validated:\n\n- **Raw Data Access**: Retrieving the raw `MemoryStream` data from the clipboard using `TryGetData<MemoryStream>()`\n- **NRBF Data Access**: Decoding clipboard data to `SerializationRecord` using `TryGetData<SerializationRecord>()`\n- **JSON Serialization**: Proper handling of JSON-serialized data in both in-process and out-of-process scenarios\n\n## Implementation Details\n\nThe existing implementation in `BinaryFormatUtilities.TryReadObjectFromStream<T>` already supports these scenarios:\n\n```csharp\n// Raw data access\nif (typeof(T) == typeof(MemoryStream))\n{\n    // Explicitly asked for a MemoryStream, return the stream as is.\n    @object = (T)(object)stream;\n    return true;\n}\n\n// NRBF serialized data access\nrecord = stream.DecodeNrbf();\nif (typeof(T) == typeof(SerializationRecord))\n{\n    // If SerializationRecord was explicitly requested, return the decoded stream.\n    @object = (T)(object)record;\n    return true;\n}\n```\n\nThe added tests ensure:\n\n1. `TryGetData<MemoryStream>` always returns the raw HGLOBAL data stream\n2. `TryGetData<SerializationRecord>` properly decodes NRBF-formatted data\n3. JSON serialized data works correctly in all API scenarios\n4. Tests cover both in-process and out-of-process (copy=true/false) cases\n\nFixes #12919.\n\n> [!WARNING]\n>\n> <details>\n> <summary>Firewall rules blocked me from connecting to one or more addresses</summary>\n>\n> #### I tried to connect to the following addresses, but was blocked by firewall rules:\n>\n> - `aka.ms`\n>   - Triggering command: `curl -I -sSL --retry 5 --retry-delay 2 --connect-timeout 15 REDACTED ` (dns block)\n> - `dot.net`\n>   - Triggering command: `wget REDACTED ` (dns block)\n> - `pkgs.dev.azure.com`\n>   - Triggering command: `dotnet build src/System.Windows.Forms/System.Windows.Forms.csproj ` (dns block)\n>   - Triggering command: `/home/REDACTED/work/_temp/ghcca-node/node/bin/node /home/REDACTED/work/_temp/copilot-developer-action-main/dist/index.js ` (dns block)\n>\n> If you need me to access, download, or install something from one of these locations, you can either:\n>\n> - Configure [Actions setup steps](https://gh.io/copilot/actions-setup-steps) to set up my environment, which run before the firewall is enabled\n> - Add the appropriate URLs or hosts to my [firewall allow list](https://gh.io/copilot/firewall-config)\n>\n> </details>\n\n\n---\n\n💡 You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs.","Url":"https://github.com/dotnet/winforms/pull/13491","RelatedDescription":"Open PR \"Add tests for Clipboard JSON and raw data scenarios\" (#13491)"},{"Id":"3078166226","IsPullRequest":true,"CreatedAt":"2025-05-20T20:31:46","Actor":"Copilot","Number":"13490","RawContent":null,"Title":"Add thorough tests for partially supported NRBF types","State":"open","Body":"This PR adds comprehensive tests for `Hashtable` serialization handling in `CoreNrbfSerializer` to ensure we're properly handling instances with unsupported content and not losing data over fields we don't currently handle (like the comparer).\n\nThe tests include:\n\n1. Verification that `CoreNrbfSerializer.IsFullySupportedType()` correctly returns `false` for `Hashtable` types\n2. Tests that standard `Hashtable` objects can be properly serialized and deserialized\n3. Tests that `Hashtable` objects with custom comparers:\n   - Can be serialized but not deserialized by `CoreNrbfSerializer`\n   - Retain all their data including the comparer when roundtripped through serialization\n4. Tests that `Hashtable` objects with custom hash code providers:\n   - Can be serialized but not deserialized by `CoreNrbfSerializer` \n   - Preserve their hash code provider information when roundtripped\n\nThese tests are important to ensure that while we may not fully handle all `Hashtable` configurations through `CoreNrbfSerializer`, we at least don't lose data when these objects pass through serialization, maintaining compatibility with existing functionality.\n\nFixes #12927.\n\n> [!WARNING]\n>\n> <details>\n> <summary>Firewall rules blocked me from connecting to one or more addresses</summary>\n>\n> #### I tried to connect to the following addresses, but was blocked by firewall rules:\n>\n> - `pkgs.dev.azure.com`\n>   - Triggering command: `dotnet restore src/System.Private.Windows.Core/tests/System.Private.Windows.Core.Tests/System.Private.Windows.Core.Tests.csproj ` (dns block)\n>\n> If you need me to access, download, or install something from one of these locations, you can either:\n>\n> - Configure [Actions setup steps](https://gh.io/copilot/actions-setup-steps) to set up my environment, which run before the firewall is enabled\n> - Add the appropriate URLs or hosts to my [firewall allow list](https://gh.io/copilot/firewall-config)\n>\n> </details>\n\n\n---\n\n💡 You can make Copilot smarter by setting up custom instructions, customizing its development environment and configuring Model Context Protocol (MCP) servers. Learn more [Copilot coding agent tips](https://gh.io/copilot-coding-agent-tips) in the docs.","Url":"https://github.com/dotnet/winforms/pull/13490","RelatedDescription":"Open PR \"Add thorough tests for partially supported NRBF types\" (#13490)"},{"Id":"3078009182","IsPullRequest":true,"CreatedAt":"2025-05-20T19:20:23","Actor":"HenKun","Number":"13488","RawContent":null,"Title":"Elide async lambda and use WrappedCallbackAsync directly","State":"open","Body":"Fixes #12697\n\n## Proposed changes\n\n- Elides the async lambda in two locations and uses the method group directly\n\n<!-- We are in TELL-MODE the following section must be completed -->\n\n## Customer Impact\n\n- Depending on the rate `InvokeAsync` is called to update the UI, it can result in a performance improvement\n- Due to avoiding creating a new delegate each time and creating a state machine, memory can be saved and the GC pressure be reduced\n\n## Regression? \n\n- No\n\n## Risk\n\n- Propagation of exceptions from within `callback`. But since `WrappedCallbackAsync` wraps `callback` in a try-catch block this should be save and not change the current behavior.\n\n<!-- end TELL-MODE -->\n\n## Test methodology <!-- How did you ensure quality? -->\n\n- Code review of related code\n- Existing tests should still pass\n\n\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13488)","Url":"https://github.com/dotnet/winforms/pull/13488","RelatedDescription":"Open PR \"Elide async lambda and use WrappedCallbackAsync directly\" (#13488)"},{"Id":"3077638933","IsPullRequest":false,"CreatedAt":"2025-05-20T16:42:47","Actor":"KlausLoeffelmann","Number":"13487","RawContent":null,"Title":"Reminder: Outstanding PRs with review comments by @KlausLoeffelmann","State":"open","Body":"There are outstanding pull requests that I (KlausLoeffelmann) published in this repository which have unresolved review comments. Please take a look and address any feedback or outstanding items:\n\n- [Fix DarkMode (a) StatusStrip background renderer A11Y Regression. (#13360)](https://github.com/dotnet/winforms/pull/13360)\n- [Address non dark-mode coloring of listitem and treenode controls while in edit mode (#12674)](https://github.com/dotnet/winforms/pull/12674)\n\nPlease review the latest comments in each PR and respond accordingly to keep them moving forward. Thank you!\n","Url":"https://github.com/dotnet/winforms/issues/13487","RelatedDescription":"Open issue \"Reminder: Outstanding PRs with review comments by @KlausLoeffelmann\" (#13487)"},{"Id":"3076487254","IsPullRequest":true,"CreatedAt":"2025-05-20T10:17:25","Actor":"Epica3055","Number":"13486","RawContent":null,"Title":"add workflow Block PRs with \"NO-MERGE\" label","State":"open","Body":"Sometime we don't want to merge a PR until a latter time. So we add a NO-MERGE label to indicate that. but we may accidentally click it. 🤣\r\n\r\nSo add a workflow to block PRs with \"NO-MERGE\" label.\r\n<!--\r\nI have done a similar task in my test repo. It didn't work perfectly as I expected.\r\n![pull_13486](https://github.com/user-attachments/assets/8820ca6b-1dc4-488f-8c99-bd2ddfdfe719)\r\n\r\nThe \"Merge pull request\" button turn from blue to white, but it still can be clicked. How can I make it disabled.\r\n\r\nCan someone have a look at this?\r\n-->\r\nTo make it work, I think we need to configure it after this is merged, which I think I don't have the privilege to do so.\r\n![image](https://github.com/user-attachments/assets/465aa79e-141d-4217-a468-92b5850a6471)\r\n","Url":"https://github.com/dotnet/winforms/pull/13486","RelatedDescription":"Open PR \"add workflow Block PRs with \"NO-MERGE\" label\" (#13486)"},{"Id":"3076357209","IsPullRequest":true,"CreatedAt":"2025-05-20T09:34:32","Actor":"MelonWang1","Number":"13485","RawContent":null,"Title":"Add code coverage for ListView.IconComparer","State":"open","Body":"Related #13442\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add unit test file:  ListView.IconComparerTests.cs for public methods of the ListView.IconComparer.cs.cs\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13485)","Url":"https://github.com/dotnet/winforms/pull/13485","RelatedDescription":"Open PR \"Add code coverage for ListView.IconComparer\" (#13485)"},{"Id":"3076179118","IsPullRequest":true,"CreatedAt":"2025-05-20T08:34:49","Actor":"Zheng-Li01","Number":"13484","RawContent":null,"Title":"Add code coverage for DomainItemAccessibleObjectTests","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/13442\r\n\r\nProposed changes\r\nAdd unit test file: DomainItemAccessibleObject.cs for public methods of the DomainItemAccessibleObject.cs\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13484)","Url":"https://github.com/dotnet/winforms/pull/13484","RelatedDescription":"Open PR \"Add code coverage for DomainItemAccessibleObjectTests\" (#13484)"}],"ResultType":"GitHubIssue"}},"RunOn":"2025-05-23T03:30:27.3785739Z","RunDurationInMilliseconds":401}