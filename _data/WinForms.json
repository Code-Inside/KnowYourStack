{"Data":{"GitHub":{"Issues":[{"Id":"1190933873","IsPullRequest":true,"CreatedAt":"2022-04-06T02:12:48","Actor":"kant2002","Number":"6958","RawContent":null,"Title":"Create unique instance for each AutoComplete object","State":"closed","Body":"That way we do not re-use released RCW\r\n\r\nFixes #6953\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6958)","Url":"https://github.com/dotnet/winforms/pull/6958","RelatedDescription":"Closed or merged PR \"Create unique instance for each AutoComplete object\" (#6958)"},{"Id":"1190597677","IsPullRequest":false,"CreatedAt":"2022-04-06T02:12:48","Actor":"Olina-Zhang","Number":"6953","RawContent":null,"Title":"Automation case about comboBox met an error \"Object reference not set to an instance of an object\"","State":"closed","Body":"### .NET version\n\n.Net 7.0.100-preview.4.22201.11\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, cannot repro in .Net SDK 7.0 Preview3 build\n\n### Issue description\n\nAutomation case about comboBox met an error \"Object reference not set to an instance of an object\":\r\n![image](https://user-images.githubusercontent.com/26474449/161380079-92c333db-b522-4732-9876-9d1dae1f09f8.png)\r\n\n\n### Steps to reproduce\n\nWe cannot get a manual repro, just met it when running our internal automation case about ComboBox, get following calll stack:\r\n\r\n_System.NullReferenceException\r\nHResult=0x80004003\r\nMessage=Object reference not set to an instance of an object.\r\nSource=System.Windows.Forms.Primitives\r\nStackTrace:\r\nat Interop.WinFormsComWrappers.AutoCompleteWrapper.SetOptions(AUTOCOMPLETEOPTIONS dwFlag)\r\nat System.Windows.Forms.StringSource.Bind(HandleRef edit, AUTOCOMPLETEOPTIONS options)\r\nat System.Windows.Forms.ComboBox.SetAutoComplete(Boolean reset, Boolean recreate)\r\nat MMFComboBox.CustomSource(TParams p) in C:\\Users\\v-olzhan\\Desktop\\Automation\\MMFComboBox_P1\\MMFComboBox_P1\\MMFComboBox\\MMFComboBox.cs:line 624_","Url":"https://github.com/dotnet/winforms/issues/6953","RelatedDescription":"Closed issue \"Automation case about comboBox met an error \"Object reference not set to an instance of an object\"\" (#6953)"},{"Id":"1193870861","IsPullRequest":true,"CreatedAt":"2022-04-06T00:37:06","Actor":"dreddy-work","Number":"6972","RawContent":null,"Title":"Deprecate Permonitor mode intended only for Windows 8.1","State":"open","Body":"WinForms never fully supported this mode. Windows 10 and above versions use 'PermonitorV2' mode.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6972)","Url":"https://github.com/dotnet/winforms/pull/6972","RelatedDescription":"Open PR \"Deprecate Permonitor mode intended only for Windows 8.1\" (#6972)"},{"Id":"1193863433","IsPullRequest":true,"CreatedAt":"2022-04-06T00:21:58","Actor":"dreddy-work","Number":"6971","RawContent":null,"Title":"Fix nested/User control scaling.","State":"open","Body":"Fixes #6381.\r\n\r\nNested controls are disabled for scaling once their parent layout is finished.\r\nHowever, Parent might be reparented and could go through a new layout based on\r\n its parent's scale dimensions.\r\n\r\nWe are maintaining multiple flags around scaling here and can be cleaned but require full testing. Making a scoped fix here to limit the risk.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6971)","Url":"https://github.com/dotnet/winforms/pull/6971","RelatedDescription":"Open PR \"Fix nested/User control scaling.\" (#6971)"},{"Id":"1193685544","IsPullRequest":true,"CreatedAt":"2022-04-05T21:29:42","Actor":"dotnet-maestro[bot]","Number":"6970","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:84f431dc-3375-4a46-af87-08d961c59698)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 84f431dc-3375-4a46-af87-08d961c59698\r\n- **Build**: 20220328.5\r\n- **Date Produced**: March 28, 2022 7:04:19 PM UTC\r\n- **Commit**: f8c0d51185208227e582f76ac3c5003db237b689\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 6.0.0-beta.22161.1 to 6.0.0-beta.22178.5][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.22161.1 to 6.0.0-beta.22178.5][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.22161.1 to 6.0.0-beta.22178.5][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.22161.1 to 6.0.0-beta.22178.5][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.22161.1 to 6.0.0-beta.22178.5][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.22161.1 to 6.0.0-beta.22178.5][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/879df78...f8c0d51\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:84f431dc-3375-4a46-af87-08d961c59698)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6970)","Url":"https://github.com/dotnet/winforms/pull/6970","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#6970)"},{"Id":"1193675716","IsPullRequest":true,"CreatedAt":"2022-04-05T21:03:12","Actor":"dotnet-maestro[bot]","Number":"6968","RawContent":null,"Title":"[release/5.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:7ad8a074-d804-46e2-eafe-08d86aff023e)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 7ad8a074-d804-46e2-eafe-08d86aff023e\r\n- **Build**: 20220309.5\r\n- **Date Produced**: March 9, 2022 9:39:48 PM UTC\r\n- **Commit**: ee744068a4fcccc5b8b56e0025f9c95aa19ff318\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.GenFacades**: [from 5.0.0-beta.22055.3 to 5.0.0-beta.22159.5][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 5.0.0-beta.22055.3 to 5.0.0-beta.22159.5][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 5.0.0-beta.22055.3 to 5.0.0-beta.22159.5][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 5.0.0-beta.22055.3 to 5.0.0-beta.22159.5][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 5.0.0-beta.22055.3 to 5.0.0-beta.22159.5][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/e5953f2...ee74406\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:7ad8a074-d804-46e2-eafe-08d86aff023e)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6968)","Url":"https://github.com/dotnet/winforms/pull/6968","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dotnet/arcade\" (#6968)"},{"Id":"1193658395","IsPullRequest":true,"CreatedAt":"2022-04-05T20:59:15","Actor":"vseanreesermsft","Number":"6966","RawContent":null,"Title":"Update branding to 5.0.17","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6966)","Url":"https://github.com/dotnet/winforms/pull/6966","RelatedDescription":"Closed or merged PR \"Update branding to 5.0.17\" (#6966)"},{"Id":"1193658492","IsPullRequest":true,"CreatedAt":"2022-04-05T20:58:42","Actor":"vseanreesermsft","Number":"6967","RawContent":null,"Title":"Update branding to 6.0.5","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6967)","Url":"https://github.com/dotnet/winforms/pull/6967","RelatedDescription":"Closed or merged PR \"Update branding to 6.0.5\" (#6967)"},{"Id":"1193676433","IsPullRequest":true,"CreatedAt":"2022-04-05T20:53:56","Actor":"dotnet-maestro[bot]","Number":"6969","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:a2a5ea62-d9bf-419c-0c86-08d7315b512a)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: a2a5ea62-d9bf-419c-0c86-08d7315b512a\r\n- **Build**: 20220309.6\r\n- **Date Produced**: March 9, 2022 9:51:37 PM UTC\r\n- **Commit**: aebcd10d76469b2e84cffd39d043574bc5357d22\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 2.4.1-beta.22077.9 to 2.4.1-beta.22159.6][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.22077.9 to 1.0.0-beta.22159.6][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 2.0.0-beta.22077.9 to 2.0.0-beta.22159.6][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 1.0.0-beta.22077.9 to 1.0.0-beta.22159.6][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/31e3d88...aebcd10\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:a2a5ea62-d9bf-419c-0c86-08d7315b512a)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6969)","Url":"https://github.com/dotnet/winforms/pull/6969","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#6969)"},{"Id":"1192765918","IsPullRequest":false,"CreatedAt":"2022-04-05T07:53:32","Actor":"gc-maximloverov","Number":"6965","RawContent":null,"Title":"Windows Automation RaiseAutomationPropertyChangedEvent throws System.NotSupportedException","State":"open","Body":"### .NET version\r\n\r\n6.0\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\n_No response_\r\n\r\n### Issue description\r\n\r\nWindows Automation RaiseAutomationPropertyChangedEvent method for BoundingRectangleProperty throws System.NotSupportedException 'Type 'System.Windows.Rect' cannot be marshalled to a Variant. Type library is not registered.'.\r\nNo exception is thrown if the AutomationPropertyChangedEvent values are null.\r\n\r\n### Steps to reproduce\r\n\r\n1. Run attached app:\r\n[UiaNotSupportedException6.zip](https://github.com/dotnet/winforms/files/8416069/UiaNotSupportedException6.zip)\r\n2. Press button \"button1\"\r\n3. Observe thrown System.NotSupportedException","Url":"https://github.com/dotnet/winforms/issues/6965","RelatedDescription":"Open issue \"Windows Automation RaiseAutomationPropertyChangedEvent throws System.NotSupportedException\" (#6965)"},{"Id":"1192480923","IsPullRequest":false,"CreatedAt":"2022-04-05T01:02:32","Actor":"RussKie","Number":"6964","RawContent":null,"Title":"Mark `WebBrowser` and all related (e.g., HTML* types) as obsolete","State":"open","Body":"### Is your feature request related to a problem? Please describe\n\n `WebBrowser` control is based on IE engine, which is almost universally unusable for general web browsing these days. [WebView2](https://docs.microsoft.com/microsoft-edge/webview2/) is a modern replacement for the web browser control.\r\n\n\n### Describe the solution you'd like and alternatives you've considered\n\nFor .NET 7 and .NET 8 decorate all web- and html-related types as obsolete (`error: false`) with a link to directing developers use  [WebView2](https://docs.microsoft.com/microsoft-edge/webview2/) control instead.\r\nIn .NET 9 update the decorations to `error: true`, remove all implementations and leave only the public API that throw NIE.\n\n### Will this feature affect UI controls?\n\nThe affected controls will need to be made hidden from the designer.","Url":"https://github.com/dotnet/winforms/issues/6964","RelatedDescription":"Open issue \"Mark `WebBrowser` and all related (e.g., HTML* types) as obsolete\" (#6964)"},{"Id":"1191394532","IsPullRequest":false,"CreatedAt":"2022-04-04T07:50:27","Actor":"kant2002","Number":"6963","RawContent":null,"Title":"Potential memory leak in HtmlElementShim","State":"open","Body":"### .NET version\n\n7.0 and earlier\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nLook at the code\r\nhttps://github.com/dotnet/winforms/blob/8bbc3f2f4f2270f62ddf1cca36a0870b36017fa8/src/System.Windows.Forms/src/System/Windows/Forms/HtmlElement.HtmlElementShim.cs#L101-L111\r\n\r\nFrom what I see some cookies abandoned after they are attached. Does this indicate memory leak? Shouldn't this class has list of cookies instead of just single ConnectionPointCookie?\n\n### Steps to reproduce\n\nStare at the code until question arise in your heart.","Url":"https://github.com/dotnet/winforms/issues/6963","RelatedDescription":"Open issue \"Potential memory leak in HtmlElementShim\" (#6963)"},{"Id":"1191331892","IsPullRequest":true,"CreatedAt":"2022-04-04T06:45:37","Actor":"kant2002","Number":"6962","RawContent":null,"Title":"Remove Message.GetLParam since it is linker unfriendly","State":"open","Body":"That remove one warning from linker.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6962)","Url":"https://github.com/dotnet/winforms/pull/6962","RelatedDescription":"Open PR \"Remove Message.GetLParam since it is linker unfriendly\" (#6962)"},{"Id":"1190950797","IsPullRequest":true,"CreatedAt":"2022-04-04T04:59:57","Actor":"kant2002","Number":"6961","RawContent":null,"Title":"Create CCW for IDropTarget","State":"closed","Body":"Inspired by https://github.com/dotnet/winforms/issues/6959\r\n\r\nThis is just kick can down the road, since I use `Marshal.GetObjectForIUnknown` instead of ComWrapper. Anyway, that's reduce amount of code which use built-in COM and drive towards #5163\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6961)","Url":"https://github.com/dotnet/winforms/pull/6961","RelatedDescription":"Closed or merged PR \"Create CCW for IDropTarget\" (#6961)"},{"Id":"1190613960","IsPullRequest":true,"CreatedAt":"2022-04-04T04:37:04","Actor":"dotnet-maestro[bot]","Number":"6954","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220401.3\r\n- **Date Produced**: April 1, 2022 6:43:57 PM UTC\r\n- **Commit**: c3e44952bb75d054517f2a24943502d3a14a47f5\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Text.Json**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **System.CodeDom**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.4.22201.1 to 7.0.0-preview.4.22201.3][2]\r\n\r\n[2]: https://github.com/dotnet/runtime/compare/c3843c5...c3e4495\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6954)\r\n","Url":"https://github.com/dotnet/winforms/pull/6954","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6954)"},{"Id":"1188304920","IsPullRequest":true,"CreatedAt":"2022-04-04T04:10:01","Actor":"gpetrou","Number":"6944","RawContent":null,"Title":"Enable nullability in CheckedIndexCollection","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in CheckedIndexCollection.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6944)","Url":"https://github.com/dotnet/winforms/pull/6944","RelatedDescription":"Closed or merged PR \"Enable nullability in CheckedIndexCollection\" (#6944)"},{"Id":"1190950570","IsPullRequest":true,"CreatedAt":"2022-04-04T04:04:52","Actor":"gpetrou","Number":"6960","RawContent":null,"Title":"Enable nullability in ThreadExceptionDialog","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in ThreadExceptionDialog.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6960)","Url":"https://github.com/dotnet/winforms/pull/6960","RelatedDescription":"Closed or merged PR \"Enable nullability in ThreadExceptionDialog\" (#6960)"},{"Id":"1190943484","IsPullRequest":false,"CreatedAt":"2022-04-03T14:14:18","Actor":"kant2002","Number":"6959","RawContent":null,"Title":"DragDrop registration did not succeed in Designer","State":"open","Body":"### Environment\n\nVersion 17.2.0 Preview 2.1\n\n### .NET version\n\n7.0 Preview 4\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nActually have no idea, I know that designer is flacky.\n\n### Issue description\n\nDesigner seems to be running with disabled COM interop and some love from Winforms needed.\r\n\r\nOn the opening form with project [WinFormsApp6953.zip](https://github.com/dotnet/winforms/files/8404533/WinFormsApp6953.zip)\r\n\r\nfollowing screen for designer displayed\r\n![image](https://user-images.githubusercontent.com/4257079/161432160-68a725ab-1bf5-434c-b229-d31cbcad941a.png)\n\n### Steps to reproduce\n\n1. Create new WinForms project \r\n2. Set `<TargetFramework>net7.0-windows</TargetFramework>`\r\n\r\n\n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/6959","RelatedDescription":"Open issue \"DragDrop registration did not succeed in Designer\" (#6959)"},{"Id":"1190930608","IsPullRequest":true,"CreatedAt":"2022-04-03T13:24:35","Actor":"kirsan31","Number":"6957","RawContent":null,"Title":"Fixed unsharing of last shared row in DataGridViewRowCollection.","State":"open","Body":"## Proposed changes\r\n\r\nWith current implementation if currently unsharing row is the last one instance (of this shared row) in DataGridViewRowCollection we will clone it and therefore current instance will be lost. The only exception is if it is the very last row in the collection. It's more correct in this situation to always just update the index and return the current row.\r\n\r\n## Customer Impact\r\n\r\n- In some situation old behavior can mislead ppl (see corrected tests) and theoretically lead to bugs... \r\n- We will not lost any rows and they will not end in Freachable queue + we will not create new row in this case. Performance improvement.\r\n- With new implementation we will gain some performance penalty when unsharing rows (see comments in code).\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Low in current implementation (see comments in code).\r\n\r\n## Test methodology \r\n\r\nExisting tests (with corrections) and manual testing.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6957)","Url":"https://github.com/dotnet/winforms/pull/6957","RelatedDescription":"Open PR \"Fixed unsharing of last shared row in DataGridViewRowCollection.\" (#6957)"},{"Id":"1190872636","IsPullRequest":true,"CreatedAt":"2022-04-03T09:15:53","Actor":"kirsan31","Number":"6956","RawContent":null,"Title":"System.Windows.Forms.DataGridView.RefreshColumns() improvements","State":"open","Body":"## Proposed changes\r\n- Not generate bound columns if `AutoGenerateColumns == false`.\r\n- Removed double memory allocation in `GetCollectionOfBoundDataGridViewColumns`.\r\n\r\n## Customer Impact\r\n\r\n- Performance improvements in `AutoGenerateColumns == false`  - no need to generate bound columns in this mode.\r\n- Performance improvements in `AutoGenerateColumns == true`  - no more double memory allocation and coping.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal.\r\n\r\n## Test methodology\r\n\r\nExisting tests and manual testing.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6956)","Url":"https://github.com/dotnet/winforms/pull/6956","RelatedDescription":"Open PR \"System.Windows.Forms.DataGridView.RefreshColumns() improvements\" (#6956)"},{"Id":"1190688421","IsPullRequest":false,"CreatedAt":"2022-04-02T17:14:28","Actor":"carlreinke","Number":"6955","RawContent":null,"Title":"NotifyIcon does not use the appropriate icon size","State":"open","Body":"### .NET version\r\n\r\n6.0\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\n_No response_\r\n\r\n### Issue description\r\n\r\nThere is a [long-known issue](https://www.hhhh.org/cloister/csharp/icons/) that `NotifyIcon` does not use the proper icon size.  Rather than using the small icon size, it takes whatever size the `System.Drawing.Icon` has been constructed for (usually the default icon size), which Windows then scales down to the small icon size.\r\n\r\nThere is a work-around:\r\n```\r\n_notifyIcon.Icon = new Icon(_notifyIcon.Icon, SystemInformation.SmallIconSize);\r\n```\r\n\r\n`NotifyIcon` should do this itself.\r\n\r\n### Steps to reproduce\r\n\r\n1. Create a new WinForms project, name it \"NotifyIconBug\".\r\n2. Add a resource file and name it `Resource1.resx`.\r\n3. Add an icon with sizes of 16x16 and 32x32 to the `Resource1.resx` and name it `application_icon`.  Use images for the two sizes of the icon that are distinguishable from one another.\r\n3. Add a `NotifyIcon` to `Form1` and name it `notifyIcon1`.\r\n4. Set the `Icon` property of the `NotifyIcon` to the icon: `notifyIcon1.Icon = Resource1.application_icon;`\r\n5. Run the project, having the notification area on a low-DPI display.  The 32x32 size of the icon is displayed scaled down to 16x16 rather than displaying the 16x16 size.\r\n\r\nI'd guess you could also recreate this on a high-DPI display as well if you scale up the above sizes accordingly.","Url":"https://github.com/dotnet/winforms/issues/6955","RelatedDescription":"Open issue \"NotifyIcon does not use the appropriate icon size\" (#6955)"},{"Id":"1190548678","IsPullRequest":false,"CreatedAt":"2022-04-02T08:00:24","Actor":"Olina-Zhang","Number":"6952","RawContent":null,"Title":"Winforms runtime has stopped working when calling control's dragdrop event","State":"open","Body":"### .NET version\n\n.Net 7.0.100-preview.4.22201.11\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, it works well with previous .Net 7.0 SDK build: 7.0.100-**preview.3**.22153.22, 7.0.100-**preview.4**.22173.7\n\n### Issue description\n\nWinforms runtime has stopped working when calling control's dragdrop event, see following gif:\r\n\r\n![7 0_Issue](https://user-images.githubusercontent.com/26474449/161372761-c5c7eb4a-0ba9-44eb-9942-9b8e97f03030.gif)\r\n\r\n\n\n### Steps to reproduce\n\n1. Use attached sample application:\r\n[WinFormsApp30.zip](https://github.com/dotnet/winforms/files/8402059/WinFormsApp30.zip)\r\n2. Build and run application\r\n3. Drag and drop item from the left listBox to the right listBox\r\n","Url":"https://github.com/dotnet/winforms/issues/6952","RelatedDescription":"Open issue \"Winforms runtime has stopped working when calling control's dragdrop event\" (#6952)"},{"Id":"1190478822","IsPullRequest":false,"CreatedAt":"2022-04-02T03:18:11","Actor":"DeerBear","Number":"6951","RawContent":null,"Title":"Newly installed VS2022 craashes on me while deleting TabStrip component at design time on the form","State":"open","Body":"### Environment\n\nMicrosoft Visual Studio Community 2022\r\nVersion 17.1.3\r\nVisualStudio.17.Release/17.1.3+32328.378\r\nMicrosoft .NET Framework\r\nVersion 4.8.04084\r\n\r\nInstalled Version: Community\r\n\r\n.NET Core Debugging with WSL   1.0\r\n.NET Core Debugging with WSL\r\n\r\nADL Tools Service Provider   1.0\r\nThis package contains services used by Data Lake tools\r\n\r\nASA Service Provider   1.0\r\n\r\nASP.NET and Web Tools 2019   17.1.358.51495\r\nASP.NET and Web Tools 2019\r\n\r\nASP.NET Web Frameworks and Tools 2019   17.1.358.51495\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   17.1.358.51495\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Tools for Visual Studio   2.6.5000.0\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Functions and Web Jobs Tools   17.1.358.51495\r\nAzure Functions and Web Jobs Tools\r\n\r\nAzure Stream Analytics Tools for Visual Studio   2.6.5000.0\r\nMicrosoft Azure Stream Analytics Tools for Visual Studio\r\n\r\nC# Tools   4.1.0-5.22165.10+e555772db77ca828b02b4bd547c318387f11d01f\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.2.6 (master@34d6af2)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nMicrosoft Azure Hive Query Language Service   2.6.5000.0\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   17.0\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.6.5000.0\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Tools for Visual Studio   2.9\r\nSupport for Azure Cloud Services projects\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   2.1.161+abc97ecc7d.RR\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.2\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMono Debugging for Visual Studio   17.1.10 (65f98f5)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   6.1.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/\r\n\r\nRazor (ASP.NET Core)   17.0.0.2206201+62a2c1d6162f828801565a7ca26d9d48b810a05b\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nSQL Server Data Tools   17.0.62203.25080\r\nMicrosoft SQL Server Data Tools\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   17.0.1229.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   4.1.0-5.22165.10+e555772db77ca828b02b4bd547c318387f11d01f\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools   17.1.0-beta.21610.4+07b5673e4f2fa7630e78abe37f16b372353a7242\r\nMicrosoft Visual F# Tools\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Container Tools Extensions   1.0\r\nView, manage, and diagnose containers within Visual Studio.\r\n\r\nVisual Studio IntelliCode   2.2\r\nAI-assisted development for Visual Studio.\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\nVisualStudio.DeviceLog   1.0\r\nInformation about my package\r\n\r\nVisualStudio.Foo   1.0\r\nInformation about my package\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   17.1.0.324 (d17-1@590ddb7)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   17.1.0.87 (remotes/origin/main@d50fb5635)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   17.1.8 (590388a)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   12.2.0.4 (d17-1/19b97b7)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: a5d1934\r\n    Java.Interop: xamarin/java.interop/d17-1@7ac33610\r\n    ProGuard: Guardsquare/proguard/v7.0.1@912d149\r\n    SQLite: xamarin/sqlite/3.37.1@0893b3b\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/d17-1@db125a7\r\n\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   15.8.0.2 (79ddd0840)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\n\n### .NET version\n\n.NET 6.0. This is the default that VS2022 proposed to me.\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\n_No response_\n\n### Issue description\n\nI created a new WinForms application and mistakenly added a TabStrip component. Then I tried to delete it. \n\n### Steps to reproduce\n\n1) Fresh install of VS2022 CE\r\n2) New WinForms solution. Use defaults.\r\n3) Add a TabStrip.\r\n4) Delete the TabStrip (or, better, try to!) \r\n\r\nVS2022 will crash and reopen automatically, but the project will be corrupted. No way to unload it, nothing.  The only way out is to create a new solution, which you have to do anyway because the project is now corrupted. \r\n\r\n[ArchiviaRapidoConfigurator.zip](https://github.com/dotnet/winforms/files/8401702/ArchiviaRapidoConfigurator.zip)\r\n\n\n### Diagnostics\n\n```text\nI didn't think of looking at that and I am not reopening this because I am trying to do something productive.\n```\n","Url":"https://github.com/dotnet/winforms/issues/6951","RelatedDescription":"Open issue \"Newly installed VS2022 craashes on me while deleting TabStrip component at design time on the form\" (#6951)"},{"Id":"1189705636","IsPullRequest":true,"CreatedAt":"2022-04-01T17:03:40","Actor":"dotnet-maestro[bot]","Number":"6950","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220401.1\r\n- **Date Produced**: April 1, 2022 10:23:45 AM UTC\r\n- **Commit**: c3843c592eb3dfdcb0a7849c6f4ba4e9fc2288a0\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.4.22180.7 to 7.0.0-preview.4.22201.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/c0db07b...c3843c5\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6950)","Url":"https://github.com/dotnet/winforms/pull/6950","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6950)"},{"Id":"1189704660","IsPullRequest":true,"CreatedAt":"2022-04-01T12:39:42","Actor":"dotnet-maestro[bot]","Number":"6949","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220331.2\r\n- **Date Produced**: March 31, 2022 3:37:49 PM UTC\r\n- **Commit**: e0b311bcd81fc9e27bcf7715dcda62fa38dfa49a\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22179.1 to 7.0.0-beta.22181.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22179.1 to 7.0.0-beta.22181.2][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22179.1 to 7.0.0-beta.22181.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22179.1 to 7.0.0-beta.22181.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22179.1 to 7.0.0-beta.22181.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22179.1 to 7.0.0-beta.22181.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/1527dc8...e0b311b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6949)","Url":"https://github.com/dotnet/winforms/pull/6949","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6949)"},{"Id":"1189350383","IsPullRequest":false,"CreatedAt":"2022-04-01T07:11:37","Actor":"kelicto","Number":"6948","RawContent":null,"Title":"An incurable bug: Failed to parse method 'InitializeComponent'. ","State":"open","Body":"### Environment\r\n\r\n![image](https://user-images.githubusercontent.com/23723575/161213470-68e17567-2184-4858-b01b-e48c4b11083d.png)\r\n\r\n\r\n### .NET version\r\n\r\nALL\r\n\r\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\r\n\r\n_No response_\r\n\r\n### Issue description\r\n\r\nAn incurable bug: Failed to parse method 'InitializeComponent'. The parser reported the following error 'Invalid symbol kind: NamedType'. Please look in the Task List for potential errors. \r\n\r\n### Steps to reproduce\r\nI don't know.\r\n\r\n### Diagnostics\r\n\r\n_No response_","Url":"https://github.com/dotnet/winforms/issues/6948","RelatedDescription":"Open issue \"An incurable bug: Failed to parse method 'InitializeComponent'. \" (#6948)"},{"Id":"1188485670","IsPullRequest":false,"CreatedAt":"2022-03-31T18:37:51","Actor":"Njoro007","Number":"6947","RawContent":null,"Title":"When UseWPF set True in a WinForms. Proj fails to recognize ApplicationConfiguration bootstrap code","State":"open","Body":"### .NET version\n\n6.0.3\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nWorked without any issues in NET 5 and Net Framework\n\n### Issue description\n\nIn a WinForms desktop application targeting .NET 6, the [UseWindowsForms] element in the .proj file is set to True, and a bootstrap ApplicationConfiguration.Initialize(); is generated and called from the startup file Program.\r\n\r\nNow I want to enable WPF by setting [EnableWPF] to True. When I do that and build I get the following error in the output log\r\n\r\n` Program.cs(13,13,13,37): error CS0103: The name 'ApplicationConfiguration' does not exist in the current context\r\n1>Done building project \"WinFormsApp1_s2dcxfug_wpftmp.csproj\" -- FAILED. `\r\n\r\n**My workaround for a net6 WinForm Project with WPF Enabled is editing the Program.CS to code below**\r\n`\r\n//ApplicationConfiguration.Initialize();\r\nApplication.SetHighDpiMode(HighDpiMode.SystemAware);\r\nApplication.EnableVisualStyles();\r\nApplication.SetCompatibleTextRenderingDefault(false);\r\nApplication.Run(new Form1());\r\n`\n\n### Steps to reproduce\n\n**To Reproduce**\r\n\r\n- Create a new Windows Forms project in VS 2022 targeting .NET 6.\r\n- Go to proj properties and check the Enable WPF for this project check box\r\n- Add a WPF window to the project\r\n- Build\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6947","RelatedDescription":"Open issue \"When UseWPF set True in a WinForms. Proj fails to recognize ApplicationConfiguration bootstrap code\" (#6947)"},{"Id":"1188392895","IsPullRequest":true,"CreatedAt":"2022-03-31T17:12:38","Actor":"ArtemTatarinov","Number":"6946","RawContent":null,"Title":"Fixing PropertyGrid memory leaks","State":"open","Body":"Fixes #6943\r\n\r\n## Proposed changes\r\n- Amount of leaked objects decreased from 595 to 39\r\n- Use the `UiaDisconnectProvider` method through the hierarchy of the classes to free objects held by accessibility tool\r\n- Only static comparers should be left at memory as amount of memory allocated for them isn't increasing after several recurrences of the repro steps described in issue\r\n\r\n**This PR requires further development:**\r\n- 39 objects are still left in memory, some of them are accessible objects. They should be tried to clean, except for the Comparers/Sorters which are most possibly are static system objects.\r\n- Quite possible that nullifying `_gridView` and other objects won't be necessary when all provider will be disconnected property\r\n- I've met a crash at the code line `Debug.Assert(result == 0)` for the result of disconnecting the third button of the `_viewSortButtons` collection if debugger is detached, and E_FAIL result if attached - it requires further investigation\r\n- There was a crash scenario at NetFx:  start AI, run internal test app, click \"Dialogs\" button, click \"Print dialog\" button, then \"Folder browser dialog\" - disconnecting `gridEntry.AccessibilityObject` at the `DisconnectChildren` method at the `PropertyGridView` class caused NRE. I couldn't reproduce this issue at the Core branch, but it's better to double check it.\r\n\r\n## Customer Impact\r\n- PropertyGrid memory will stop leaking\r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Screenshots\r\n\r\n### Before\r\n![image](https://user-images.githubusercontent.com/87859299/161106770-95acc204-9862-4e96-95b4-7477be4571a2.png)\r\n\r\n### After\r\n![image](https://user-images.githubusercontent.com/87859299/161106794-301eafc1-626d-407a-aa98-fd1e38ebeb3a.png)\r\n\r\n## Test methodology\r\n- Manual testing (_using WinDbg, see the screenshots above_)\r\n- CTI team\r\n\r\n## Test environment(s)\r\n- Microsoft Windows [Version 10.0.19043.1586]\r\n- .NET 7.0.0-preview.3.22159.12\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6946)","Url":"https://github.com/dotnet/winforms/pull/6946","RelatedDescription":"Open PR \"Fixing PropertyGrid memory leaks\" (#6946)"},{"Id":"1188313483","IsPullRequest":true,"CreatedAt":"2022-03-31T16:05:10","Actor":"gpetrou","Number":"6945","RawContent":null,"Title":"Enable nullability in ComboBox","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in ComboBox.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6945)","Url":"https://github.com/dotnet/winforms/pull/6945","RelatedDescription":"Open PR \"Enable nullability in ComboBox\" (#6945)"},{"Id":"1188279899","IsPullRequest":false,"CreatedAt":"2022-03-31T15:39:38","Actor":"ArtemTatarinov","Number":"6943","RawContent":null,"Title":"PropertyGrid accessible objects are leaking in memory","State":"open","Body":"### .NET version\r\n\r\n7.0\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo\r\n\r\n### Issue description\r\n\r\n`PropertyGrid` accessible objects are left in memory after the `PropertyGrid` control instance was inspected with accessibility tool (like `Accessibility Insights` or `Inspect`) and the form with `PropertyGrid` is closed, garbage is collected, but accessibility tool is still opened.\r\n\r\nReport from WinDbg:\r\n![image](https://user-images.githubusercontent.com/87859299/161093704-221951bf-737d-4f52-a4d6-afb03a9c95a1.png)\r\n\r\n**Expected behavior:**\r\nAmount of the leaked objects should be minimized to the uncleanable static objects only.\r\n\r\n### Steps to reproduce\r\n\r\n1. Create a parent form with two buttons: one will be opening a child form with the `PropertyGrid` (`SelectedObject` set to `this`) control and the other will collect the garbage.\r\n2. Press the second button to open the child form with `PropertyGrid`.\r\n3. Start the `Accessibility Insights` tools.\r\n4. Run automated checks for the `PropertyGrid` control using AI.\r\n5. Close the child form.\r\n6. Clear memory with the first button of the parent form.\r\n7. DON'T close the AI tool.\r\n8. Look for `PropertyGrid` accessible objects left in memory (using `WinDbg`, or `dotMemory`, or another suitable tool).","Url":"https://github.com/dotnet/winforms/issues/6943","RelatedDescription":"Open issue \"PropertyGrid accessible objects are leaking in memory\" (#6943)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-04-06T03:30:30.5779116Z","RunDurationInMilliseconds":538}