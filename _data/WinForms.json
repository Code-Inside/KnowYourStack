{"Data":{"GitHub":{"Issues":[{"Id":"2751755476","IsPullRequest":true,"CreatedAt":"2024-12-20T01:51:09","Actor":"Liv-Goh","Number":"12662","RawContent":null,"Title":"Write unit test for DataGridViewAddColumnDialog","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/10773\r\n\r\n## Proposed changes\r\n1. Add unit test DataGridViewAddColumnDialogTests.cs for public properties and method of the DataGridViewAddColumnDialog.\r\n2. Enable nullability in DataGridViewAddColumnDialogTests.cs.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12662)","Url":"https://github.com/dotnet/winforms/pull/12662","RelatedDescription":"Open PR \"Write unit test for DataGridViewAddColumnDialog\" (#12662)"},{"Id":"2750983129","IsPullRequest":false,"CreatedAt":"2024-12-19T17:13:28","Actor":"StuB-85","Number":"12661","RawContent":null,"Title":"Null Reference Exception: System.Windows.Forms.TabControl.<WmSelChange>","State":"open","Body":"### .NET version\n\n.NET 8.0\nSDK: 8.0.403\nRUNTIME: 8.0.10\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nTabControl crashes due to null reference exception. This can occur after all tabs are removed while TabControl.AccessibilityObject is not null.\n\n```\n \tSystem.Windows.Forms.dll!System.Windows.Forms.TabControl.WmSelChange.AnonymousMethod__214_0()\tUnknown\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.InvokeMarshaledCallbackHelper(object obj)\tUnknown\n \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\tUnknown\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.InvokeMarshaledCallbacks()\tUnknown\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.WndProc(ref System.Windows.Forms.Message m)\tUnknown\n \tSystem.Windows.Forms.dll!System.Windows.Forms.TabControl.WndProc(ref System.Windows.Forms.Message m)\tUnknown\n \tSystem.Windows.Forms.dll!System.Windows.Forms.NativeWindow.Callback(Windows.Win32.Foundation.HWND hWnd, Windows.Win32.MessageId msg, Windows.Win32.Foundation.WPARAM wparam, Windows.Win32.Foundation.LPARAM lparam)\tUnknown\n \t[Native to Managed Transition]\t\n \t[Managed to Native Transition]\t\n \tSystem.Windows.Forms.Primitives.dll!Windows.Win32.PInvoke.DispatchMessage(Windows.Win32.UI.WindowsAndMessaging.MSG* lpMsg)\tUnknown\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.ComponentManager.Microsoft.Office.IMsoComponentManager.FPushMessageLoop(nuint dwComponentID, Microsoft.Office.msoloop uReason, void* pvLoopData)\tUnknown\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Microsoft.Office.msoloop reason, System.Windows.Forms.ApplicationContext context)\tUnknown\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Microsoft.Office.msoloop reason, System.Windows.Forms.ApplicationContext context)\tUnknown\n>\tWmSelIssue.dll!WmSelIssue.Program.Main() Line 14\tC#\n```\n\n### Steps to reproduce\n\n1. Unzip solution and open in visual studio.\n2. Build and Run.\n3. Click either of the repro buttons.\n4. Observe the crash.\n\n[WmSelIssue.zip](https://github.com/user-attachments/files/18201121/WmSelIssue.zip)\n","Url":"https://github.com/dotnet/winforms/issues/12661","RelatedDescription":"Open issue \"Null Reference Exception: System.Windows.Forms.TabControl.<WmSelChange>\" (#12661)"},{"Id":"2750899716","IsPullRequest":false,"CreatedAt":"2024-12-19T16:41:50","Actor":"CortiWins","Number":"12660","RawContent":null,"Title":"Freeze of designer when changing the control size when control happens to have a readonly array of structs property","State":"open","Body":"### Environment\n\nMicrosoft Visual Studio Professional 2022\nVersion 17.12.3\nVisualStudio.17.Release/17.12.3+35527.113\nMicrosoft .NET Framework\nVersion 4.8.09037\n\nInstalled Version: Professional\n\nC# Tools   4.12.0-3.24572.7+dfa7fc6bdea31a858a402168384192b633c811fa\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\n\n### .NET version\n\nNet 8.0 Windows\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nDid not check.\n\n### Issue description\n\nI made a user control with a public readonly property of type array of structs.\n\nWhen i try to change the controls size, visual studio and the out of process designer freeze while both staying at roughly 5% CPU use according to task manager.\n\n[Browsable(false)] does not prevent it.\n\nI reproduced the issue in a minimal project. \n\nNo immediate help required because i can just not do that.  Have a good day everyone.\n\n\n\n\n### Steps to reproduce\n\n1. Create new Winforms 8.0 App\n2. Use this code\n3. Change the size in the designer\n\n```\npublic partial class MrFreeze : UserControl\n{\n    public MrFreeze()\n    {\n        InitializeComponent();\n    }\n\n    public TestStruct[] StructArray { get; } = new TestStruct[5000];\n}\n\npublic struct TestStruct\n{\n    public int a;\n    public string b;\n}\n```\n\n### Diagnostics\n\n```text\n\n```","Url":"https://github.com/dotnet/winforms/issues/12660","RelatedDescription":"Open issue \"Freeze of designer when changing the control size when control happens to have a readonly array of structs property\" (#12660)"},{"Id":"2749833956","IsPullRequest":true,"CreatedAt":"2024-12-19T10:12:55","Actor":"Epica3055","Number":"12659","RawContent":null,"Title":"Back port pr 12564 and12648 to 9.0","State":"open","Body":"# BackPort PR #12564 And #12648 To 9.0\r\n","Url":"https://github.com/dotnet/winforms/pull/12659","RelatedDescription":"Open PR \"Back port pr 12564 and12648 to 9.0\" (#12659)"},{"Id":"2749817780","IsPullRequest":true,"CreatedAt":"2024-12-19T10:05:39","Actor":"Epica3055","Number":"12658","RawContent":null,"Title":"BackPort PR 12564 And 12648 To 8.0","State":"open","Body":"# BackPort PR #12564 And #12648 To 8.0\r\n","Url":"https://github.com/dotnet/winforms/pull/12658","RelatedDescription":"Open PR \"BackPort PR 12564 And 12648 To 8.0\" (#12658)"},{"Id":"2749541057","IsPullRequest":true,"CreatedAt":"2024-12-19T08:02:09","Actor":"LeafShi1","Number":"12657","RawContent":null,"Title":"Move the Control.DragDrop tests under ControlTests.Methods.cs to Collection \"Sequential\"","State":"open","Body":"\r\n## Proposed changes\r\n\r\n- Move the Control.DragDrop tests under ControlTests.Methods.cs to Collection \"Sequential\"\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12657)","Url":"https://github.com/dotnet/winforms/pull/12657","RelatedDescription":"Open PR \"Move the Control.DragDrop tests under ControlTests.Methods.cs to Collection \"Sequential\"\" (#12657)"},{"Id":"2749129161","IsPullRequest":true,"CreatedAt":"2024-12-19T02:53:36","Actor":"Tanya-Solyanik","Number":"12656","RawContent":null,"Title":"Fix for a regression in how GetData APIs swallow all exceptions.","State":"open","Body":"restore behavior of\r\n1. app with BinaryFormatter enabled SetData(\"custom format\", new List<Point>(){})\r\n2. app with BInaryFormatter disabled GetData(\"custom format\")\r\n\r\nNET8 and NET9 were returning an empty memory stream, I regressed it to throw the NotSupportedException from the spot where we detect that BinaryFormatter is disabled. After this change I retain the NotSupportedException only in the Typed Get APIs\r\n","Url":"https://github.com/dotnet/winforms/pull/12656","RelatedDescription":"Open PR \"Fix for a regression in how GetData APIs swallow all exceptions.\" (#12656)"},{"Id":"2737723122","IsPullRequest":false,"CreatedAt":"2024-12-19T01:21:52","Actor":"Liv-Goh","Number":"12637","RawContent":null,"Title":"ListBox.IndexFromPoint should be Int32 but currently is Int16","State":"closed","Body":"### .NET version\n\n.NET 10\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, this issue can repro on .NET 6.0\n\n### Issue description\n\nAccording to documentation, List Box [IndexFromPoint](https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.listbox.indexfrompoint?view=windowsdesktop-9.0) should be Int32 but in tested result is Int16 because the max value is 65535.\n\n**Current behavior** \n- The IndexFromPoint is currently Int16, the max value is 65535\n- If hold and drag the scroll bar exceeding item 65535, the top index will switch to the previous set of IndexFromPoint position\n\nhttps://github.com/user-attachments/assets/5aebad94-e9b3-4e01-9d06-f8a19ffb7a44\n\n**Expected behavior**\n- The IndexFromPoint should be Int32 based on the documentation, the max value should be 4,294,967,295\n- If hold and drag the scroll bar exceeding item 65535, the top index should not be affected\n\n### Steps to reproduce\n\n1. Extract and run [IndexFromPointIssue.zip](https://github.com/user-attachments/files/18123050/IndexFromPointIssue.zip)\n2. Try to click on the item to check the index\n3. Click 65535 button to go to 65535th item\n4. Click the 65536 item and observe its index \n5. Hold and drag the cursor to bottom and observe the listbox behavior\n\n### More Info\nThis issue is from feedback ticket [FeedbackTicket 2318021 Visual Studio 2022 Visual Basic Listbox bug](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2318021)","Url":"https://github.com/dotnet/winforms/issues/12637","RelatedDescription":"Closed issue \"ListBox.IndexFromPoint should be Int32 but currently is Int16\" (#12637)"},{"Id":"2744529522","IsPullRequest":true,"CreatedAt":"2024-12-19T00:55:33","Actor":"LeafShi1","Number":"12651","RawContent":null,"Title":"Add MSAA event to method OnGotFocus of the Control.cs","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12565\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add MSAA event to method OnGotFocus of the Control.cs\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- NVDA tool can show focus blue rectangle in property edit textbox\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\nNVDA does not show focus blue rectangle.\r\n\r\nhttps://github.com/user-attachments/assets/a147db27-d749-4819-840f-d11e26e5aa45\r\n\r\n### After\r\nNVDA should show focus blue rectangle.\r\n![AfterChange](https://github.com/user-attachments/assets/4dfed4be-2788-40ad-b4f9-2a90d78ecc81)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .net 10.0.0-beta.24613.2\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12651)","Url":"https://github.com/dotnet/winforms/pull/12651","RelatedDescription":"Closed or merged PR \"Add MSAA event to method OnGotFocus of the Control.cs\" (#12651)"},{"Id":"2746335649","IsPullRequest":true,"CreatedAt":"2024-12-18T21:23:44","Actor":"lonitra","Number":"12653","RawContent":null,"Title":"Add ChecksumAlgorithm to System.Private.Windows.GdiPlus","State":"closed","Body":"\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12653)","Url":"https://github.com/dotnet/winforms/pull/12653","RelatedDescription":"Closed or merged PR \"Add ChecksumAlgorithm to System.Private.Windows.GdiPlus\" (#12653)"},{"Id":"2737230207","IsPullRequest":true,"CreatedAt":"2024-12-18T19:32:49","Actor":"LeafShi1","Number":"12636","RawContent":null,"Title":"Correct the assignment of the constant TreeNodeCollectionAddRangeRespectsSortOrder in WinFormsAppContextSwitchNames.cs","State":"closed","Body":"Correct the assignment of the constant TreeNodeCollectionAddRangeRespectsSortOrder in WinFormsAppContextSwitchNames.cs\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12636)","Url":"https://github.com/dotnet/winforms/pull/12636","RelatedDescription":"Closed or merged PR \"Correct the assignment of the constant TreeNodeCollectionAddRangeRespectsSortOrder in WinFormsAppContextSwitchNames.cs\" (#12636)"},{"Id":"2748095790","IsPullRequest":true,"CreatedAt":"2024-12-18T15:17:52","Actor":"dotnet-maestro[bot]","Number":"12655","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\n## From https://github.com/dotnet/runtime\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\n- **Build**: 20241219.5\n- **Date Produced**: December 19, 2024 9:58:14 PM UTC\n- **Commit**: 1019d315632c78b6bfc870e5893fa7ceb90b0e3c\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.CodeDom**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.ComponentModel.Composition**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Data.Odbc**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Data.OleDb**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Diagnostics.EventLog**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.DirectoryServices**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Formats.Nrbf**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.IO.Hashing**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.IO.Packaging**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.IO.Ports**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Management**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Reflection.Context**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Resources.Extensions**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Runtime.Caching**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Security.Permissions**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.ServiceModel.Syndication**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Speech**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Text.Encodings.Web**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Text.Json**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Threading.AccessControl**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **System.Windows.Extensions**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-alpha.1.24611.1 to 10.0.0-alpha.1.24619.5][2]\n\n[2]: https://github.com/dotnet/runtime/compare/aa9cd3b323...1019d31563\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\n\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12655)\n\n\n","Url":"https://github.com/dotnet/winforms/pull/12655","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/runtime\" (#12655)"},{"Id":"2747758766","IsPullRequest":true,"CreatedAt":"2024-12-18T13:41:51","Actor":"dotnet-maestro[bot]","Number":"12654","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20241217.2\r\n- **Date Produced**: December 17, 2024 2:16:03 PM UTC\r\n- **Commit**: 4f2968fce08735a7e22fca6bd4c99d003221d716\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24616.1 to 10.0.0-beta.24617.2][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.24616.1 to 10.0.0-beta.24617.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.24616.1 to 10.0.0-beta.24617.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24616.1 to 10.0.0-beta.24617.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.24616.1 to 10.0.0-beta.24617.2][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24616.1 to 10.0.0-beta.24617.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/e0abaf3431...4f2968fce0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12654)","Url":"https://github.com/dotnet/winforms/pull/12654","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#12654)"},{"Id":"2738035261","IsPullRequest":false,"CreatedAt":"2024-12-18T01:27:35","Actor":"MelonWang1","Number":"12639","RawContent":null,"Title":"[AccessibilityInsight] Sometimes, the focus rectangle focus on property's edit part when using up/down to switch property items in PropertyGrid","State":"closed","Body":"### .NET version\n\n.NET 10.0.100-alpha.1.24611.5\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, cannot repro in .NET 8.0. Also repro in .NET 9.0 + binaries built from release/9.0 branch of winforms repro. And caused by PR[12479](https://github.com/dotnet/winforms/pull/12479).\n\n### Issue description\n\nSometimes, the focus rectangle focus on property's edit part when using up/down to switch property items in PropertyGrid .\n\n\n**Actual result:** \n\nThe focus rectangle sometimes focus to edit part. \n![Image](https://github.com/user-attachments/assets/2708df5e-e23a-4dd0-abbc-ee473a59d14f)\n\nhttps://github.com/user-attachments/assets/2e4960a8-bcf5-4307-8fdd-529d3b38aeef\n\n**Expected result:** \n\nThe focus rectangle always focus to property item. \n\nhttps://github.com/user-attachments/assets/e581045c-aeb9-4bc8-9c4a-275293f88037\n\n**More info:** \n\n1. This issue cannot repro in Inspect/Narrtor/NVDA tool. \n\n2. This issue also repro in go through the drop down list item using up/down keyboard. \n ![Image](https://github.com/user-attachments/assets/f6e97ad6-5f98-4cd2-b411-f492a53aa890)\n\n\n### Steps to reproduce\n\n\n1. Create a .NET Core Winforms project. \n2. Add a TextBox and PropertyGrid controls in form designer. \n3. Set the SelectedObject property to TextBox1 in propertyGrid1 control. \n4. Build and run project. \n5. Open Accessible Insight tool and select anyone property in propertyGrid control. \n6. Press up/down keyboard.","Url":"https://github.com/dotnet/winforms/issues/12639","RelatedDescription":"Closed issue \"[AccessibilityInsight] Sometimes, the focus rectangle focus on property's edit part when using up/down to switch property items in PropertyGrid\" (#12639)"},{"Id":"2742212324","IsPullRequest":true,"CreatedAt":"2024-12-17T23:24:12","Actor":"Sachin-NI","Number":"12648","RawContent":null,"Title":"Fix WM_DESTROY message handling","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12551\r\n\r\n\r\n## Proposed changes\r\n\r\n- -  The `DetachWindow` method always sets `Handle` and `HWND` value to NULL. This make code inside if block go in recursive infinite loop. To fix this, we now store the value of `Handle` in a variable before calling the `DetachWindow` method. This was the previous behavior but got disrupted due to [this change](https://github.com/dotnet/winforms/commit/834d0a0d364c82bf70803706886ff9a40bd3e090#diff-dc17cf8f6ef4b80a13b2386597a72cd7ae36cab7375583a0a1e76a62f7f9238fL3556).\r\n\r\nI had already [completed a PR](https://github.com/dotnet/winforms/pull/12564) which stored `IsHandleCreated` before calling `DetachWindow` method but missed to store and use `Handle` value.\r\n\r\n## Testing\r\nGo through [this comment](https://github.com/dotnet/winforms/issues/12551#issuecomment-2545971442) to reproduce this issue. I've validated that this proposed change resolve the issue.\r\n@JeremyKuhne","Url":"https://github.com/dotnet/winforms/pull/12648","RelatedDescription":"Closed or merged PR \"Fix WM_DESTROY message handling\" (#12648)"},{"Id":"2743659050","IsPullRequest":true,"CreatedAt":"2024-12-17T19:03:18","Actor":"lonitra","Number":"12649","RawContent":null,"Title":"Start Localization for OLE Json APIs","State":"closed","Body":"Start localization process for strings of exceptions that surface when using OLE Json APIs.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12649)","Url":"https://github.com/dotnet/winforms/pull/12649","RelatedDescription":"Closed or merged PR \"Start Localization for OLE Json APIs\" (#12649)"},{"Id":"2744885781","IsPullRequest":true,"CreatedAt":"2024-12-17T13:36:48","Actor":"dotnet-maestro[bot]","Number":"12652","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20241216.1\r\n- **Date Produced**: December 17, 2024 8:34:48 AM UTC\r\n- **Commit**: e0abaf3431b0fe3c9f9902aa42f6008b1250e75e\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24616.1][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24616.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24616.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24616.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24616.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24616.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/255d5e0c89...e0abaf3431\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12652)","Url":"https://github.com/dotnet/winforms/pull/12652","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#12652)"},{"Id":"2743692794","IsPullRequest":true,"CreatedAt":"2024-12-17T01:51:26","Actor":"dotnet-bot","Number":"12650","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2602918","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/icxLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12650)","Url":"https://github.com/dotnet/winforms/pull/12650","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2602918\" (#12650)"},{"Id":"2737201676","IsPullRequest":true,"CreatedAt":"2024-12-16T23:46:38","Actor":"Tanya-Solyanik","Number":"12635","RawContent":null,"Title":"replaced end of sentence dot followed by 2 spaces with a dot with a single space","State":"closed","Body":"I ran this regex on all projects, and hanges only xml doc comments. Remaining double spaces are in .resx files and in build warning that will be eventually visible to the users.\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12635)","Url":"https://github.com/dotnet/winforms/pull/12635","RelatedDescription":"Closed or merged PR \"replaced end of sentence dot followed by 2 spaces with a dot with a single space\" (#12635)"},{"Id":"2741934471","IsPullRequest":true,"CreatedAt":"2024-12-16T10:14:21","Actor":"Olina-Zhang","Number":"12647","RawContent":null,"Title":"Add unit tests for LinkUtilities","State":"open","Body":"related https://github.com/dotnet/winforms/issues/10453\r\n\r\n## Proposed changes\r\n\r\n- Add unit tests for LinkUtilities to test its  GetIELinkBehavior and EnsureLinkFonts methods.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12647)","Url":"https://github.com/dotnet/winforms/pull/12647","RelatedDescription":"Open PR \"Add unit tests for LinkUtilities\" (#12647)"},{"Id":"2741618567","IsPullRequest":true,"CreatedAt":"2024-12-16T07:59:11","Actor":"LeafShi1","Number":"12646","RawContent":null,"Title":"Changing the renderMode to System when the StatusStrip was selected","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12616\r\n\r\n\r\n## Proposed changes\r\n\r\n- Revert the changes on PR #11502, and changing the renderMode to `ToolStripRenderMode.System` when the StatusStrip was selected \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- When upgrading a project with StatusStrip from .net8.0 to .net9.0, there will no longer be extra white lines in the Form\r\n\r\n## Regression? \r\n\r\n- Yes \r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\nA white line in the dialog when using StatusStrip\r\n<img width=\"251\" alt=\"image\" src=\"https://github.com/user-attachments/assets/ed22666a-f70f-46eb-87ef-fc7c7e7f10b9\">\r\n\r\n\r\n### After\r\nNo extra white line the dialog\r\n<img width=\"233\" alt=\"image\" src=\"https://github.com/user-attachments/assets/cf28ca25-c665-4154-a0d3-eb3210e52de7\">\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .net 10.0.0-alpha.1.24606.5\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12646)","Url":"https://github.com/dotnet/winforms/pull/12646","RelatedDescription":"Open PR \"Changing the renderMode to System when the StatusStrip was selected\" (#12646)"},{"Id":"2740781698","IsPullRequest":false,"CreatedAt":"2024-12-15T17:32:31","Actor":"SoftCircuits","Number":"12645","RawContent":null,"Title":"Is Microsoft Planning to fix ImageList?","State":"open","Body":"There is a lot of documentation about issue https://github.com/dotnet/winforms/issues/9701 and the security risks associated with `BinaryFormatter`.\n\nBut what if we're not using `BinaryFormatter` directly? Instead, we're using `ImageList`, which is currently implemented to use `BinaryFormatter`? Do we need to find a different image list control? Or is Microsoft planning to fix the existing one?\n","Url":"https://github.com/dotnet/winforms/issues/12645","RelatedDescription":"Open issue \"Is Microsoft Planning to fix ImageList?\" (#12645)"},{"Id":"2739862813","IsPullRequest":true,"CreatedAt":"2024-12-14T13:42:08","Actor":"dotnet-maestro[bot]","Number":"12644","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20241213.2\r\n- **Date Produced**: December 13, 2024 7:51:52 PM UTC\r\n- **Commit**: 255d5e0c89958af276883a988108c2d616438805\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24612.4 to 10.0.0-beta.24613.2][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.24612.4 to 10.0.0-beta.24613.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.24612.4 to 10.0.0-beta.24613.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24612.4 to 10.0.0-beta.24613.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.24612.4 to 10.0.0-beta.24613.2][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24612.4 to 10.0.0-beta.24613.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/1e161ed635...255d5e0c89\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12644)","Url":"https://github.com/dotnet/winforms/pull/12644","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#12644)"},{"Id":"2739489046","IsPullRequest":true,"CreatedAt":"2024-12-14T03:26:18","Actor":"Tanya-Solyanik","Number":"12643","RawContent":null,"Title":"preparation to validate known types","State":"closed","Body":"and removed unwrapping nullable structs the second time.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12643)","Url":"https://github.com/dotnet/winforms/pull/12643","RelatedDescription":"Closed or merged PR \"preparation to validate known types\" (#12643)"},{"Id":"2739295207","IsPullRequest":true,"CreatedAt":"2024-12-13T23:33:17","Actor":"Tanya-Solyanik","Number":"12642","RawContent":null,"Title":"Minor refactoring in DataObject-related code","State":"closed","Body":"Factored out code that reads formats that allow only restricted deserialization to run, such as OLE formats.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12642)","Url":"https://github.com/dotnet/winforms/pull/12642","RelatedDescription":"Closed or merged PR \"Minor refactoring in DataObject-related code\" (#12642)"},{"Id":"2739012029","IsPullRequest":false,"CreatedAt":"2024-12-13T19:01:05","Actor":"rickbrew","Number":"12641","RawContent":null,"Title":"Please make `Control.DesiredVisibility` public","State":"open","Body":"### Background and motivation\n\nSame as #4989 but that was closed. cc @trivalik \n\nI also think that having `DesiredVisibility` public would make many layout calculations a lot easier.\n\nThe setter for `Visible` specifies the desired visibility, but the getter provides you with the effective visibility. This isn't symmetric and is bad API design (not to shame the original devs, we've all learned a lot in the last 25 years!). There's currently no easy way, short of reflection or `[UnsafeAccessor]`, to get this information unless you keep track of it yourself on the side. Subsequent MSFT UI frameworks such as WPF did the right thing with [`Visibility`](https://learn.microsoft.com/en-us/dotnet/api/system.windows.uielement.visibility?view=windowsdesktop-9.0) vs. [`IsVisible`](https://learn.microsoft.com/en-us/dotnet/api/system.windows.uielement.isvisible?view=windowsdesktop-9.0).\n\nI have had some nasty, difficult to figure out bugs in the past where `Control.Visible` was incorrectly being assumed to mean \"desired visibility\" instead of \"effective visibility.\" The code worked fine for years until some other capabilities were added -- in this case, adding the ability to put things into nested tabs ([here are some examples](https://forums.getpaint.net/topic/121343-boltbaits-gpu-accelerated-plugin-pack-for-paintnet-v50-updated-2024-04-29/#:~:text=Screenshots%20of%20Various%20Effects) of that new functionality, cc @BoltBait). A `Control` within a tab is not `Visible` unless the tab container is `Visible` _and_ the containing tab is _selected_, and the layout calculations for the containing `Form` need to calculate the maximum layout height for all tabs so that the height of the tab container and the `Form` can be correctly determined. This needs to happen before the `Form` is shown so that it can be sized and positioned (centered) correctly. This was all very buggy, such as tabs being truncated or having scrollbars when they really shouldn't, until I realized that `Visible` was telling me the _effective_ visibility, and my layout calculations were actually only taking the first tab into account.\n\nThese layout bugs obviously do not happen when a `Control` and its containers, including the `Form`, are visible, and this makes it very difficult to figure out why layout does not work correctly before showing the dialog or adding the containing `Control`. It's also difficult to reach the conclusion that these layout bugs are because of desired vs. effective visibility. Keeping track of this on the side adds a lot of complexity and a lot more potential for bugs that are tricky to debug, especially when adding new functionality (vs. the initial development of some UI). It's a major bug hazard for developers who do not (yet) know that `Visible` is not symmetric with respect to its getter and setter.\n\nHere's another more recent example. I have a custom dialog for when an error or unhandled exception (crash) happens. It starts off in a non-expanded state, and the user can click \"Show Details\" to pop open the Details `RichTextBox` which has the exception and diagnostics information they can copy to the clipboard and post on the forum for help, or e-mail it to me, etc.\n\n![Image](https://github.com/user-attachments/assets/d47cf7e3-2b43-4000-9e95-68ad415a203c)\n\n![Image](https://github.com/user-attachments/assets/d7a5746f-187a-4d67-bc83-f6bbed84cb34)\n\nIn my latest update, v5.1, there have been a lot of changes to how my app (Paint.NET) uses Direct2D/3D/DXGI/etc and this has resulted in hangs and crashes for some folks. It is almost always some other app that was injecting DLLs and hooking DirectX or causing other crashes or hangs for any number of other reasons (ever hear of [Sentinel One](https://x.com/rickbrewPDN/status/1856814013923168282), or [Nahimic/A-Volute](https://x.com/rickbrewPDN/status/1857583048147206613)? 😬). In these cases there was no crash at all (because it was a hang), or no crash at a time when the error dialog (with diagnostics info) could be shown, so we had to advise people to use the portable release of the previous version of the app in order to go to Settings -> Diagnostics -> Copy to Clipboard and get this information. The diagnostics information includes the list of managed assemblies and native modules (DLLs) loaded in the process, and the presence of various DLLs is a very visible smoking gun towards what the user needs to do to fix the problem.\n\nI'm now adding a `/diagnostics` command-line parameter so that this information can be retrieved without needing to boot up the app, which means hangs at startup shouldn't complicate troubleshooting as much. I want this error dialog w/ diagnostics info to open up pre-expanded, but the layout calculations use `Control.Visible`, so it ends up being centered incorrectly:\n\n![Image](https://github.com/user-attachments/assets/88a9220d-83af-4c24-b64a-302afeaed023)\n\nThis happens because I need to asynchronously simulate a click on the Show Details button in an event handler for `Form.Shown`. If I just set my `IsDetailsTextVisible` property to `true` then the resulting layout code does all sorts of wrong things because it uses `Control.Visible` for various purposes.\n\nFixing this is easy if I access the `DesiredVisibility` property via `[UnsafeAccessor]` and switch away from using `Visible` in this layout code. I can then do all the layout before the `Form` is visible which then results in it being centered correctly when it is shown. I initially tried to keep track of this info on the side but quickly realized I would have to spend a few hours debugging to get it to work, and to then re-test and debug all the scenarios that this dialog is used for. So for now I'm just using `[UnsafeAccessor]` because I do not want this functionality to soak up a full day or three of my time. I would much rather use a public property that doesn't have the risk of breaking because it got renamed, refactored, or removed.\n\n### API Proposal\n\n```csharp\nnamespace System.Windows.Forms;\n\npublic class Control\n{\n    public bool DesiredVisibility { get; } // (I don't actually care what the property is named)\n}\n```\n\n\n### API Usage\n\nThis will permit layout code to work before the `Control` and its containers and `Form` are visible, e.g.\n\n```cs\npublic bool IsDetailsBoxVisible\n{\n    get => this.detailsTextBox.DesiredVisibility;\n\n    set => this.detailsTextBox.Visible = true; // might also need a `PerformLayout()` call\n}\n\nprotected override void OnLayout(LayoutEventArgs levent)\n{\n    if (this.detailsTextBox.DesiredVisibility)\n    {\n        ... set size, text, and visibility of related controls, including the size of the Form itself ...\n    }\n    \n    base.OnLayout(levent);\n}\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nThis functionality already exists, this proposal is just changing `internal` to `public`, so I'm not sure there's much risk. This property is already used internally by WinForms so I expect that it is working as expected.\n\n### Will this feature affect UI controls?\n\nI expect this will mostly need some extra details in the documentation for `Visible` saying that you need to use `DesiredVisibility` to retrieve the same value you passed to `set_Visible`. Since it's a read only property I'm not sure the designer will be affected.","Url":"https://github.com/dotnet/winforms/issues/12641","RelatedDescription":"Open issue \"Please make `Control.DesiredVisibility` public\" (#12641)"},{"Id":"2738349458","IsPullRequest":true,"CreatedAt":"2024-12-13T13:42:08","Actor":"dotnet-maestro[bot]","Number":"12640","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20241212.4\r\n- **Date Produced**: December 13, 2024 12:06:27 AM UTC\r\n- **Commit**: 1e161ed635ca19f61b1ddddee61b0bfc995fd716\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24611.4 to 10.0.0-beta.24612.4][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.24611.4 to 10.0.0-beta.24612.4][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.24611.4 to 10.0.0-beta.24612.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24611.4 to 10.0.0-beta.24612.4][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.24611.4 to 10.0.0-beta.24612.4][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24611.4 to 10.0.0-beta.24612.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/b9e1dd7c1e...1e161ed635\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12640)","Url":"https://github.com/dotnet/winforms/pull/12640","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#12640)"},{"Id":"2737846759","IsPullRequest":true,"CreatedAt":"2024-12-13T08:49:51","Actor":"LeafShi1","Number":"12638","RawContent":null,"Title":"Update the drawing position of the Treeview control text","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12601\r\n\r\n\r\n## Proposed changes\r\n\r\n- Update the drawing position of the Treeview control text\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- The check box of the TreeView control can be fully displayed\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nCreate a form, add a TreevView with CheckBoxes=true and DrawMode=OwnerDrawText\r\nIn OnDrawNode event only set DrawDefault=true\r\nShow the form: checkboxes are shown corrupted on the right border\r\n![Image](https://github.com/user-attachments/assets/7d040abd-344c-4403-b7a3-b7659d247935)\r\n\r\n### After\r\nThe checkbox of the Treeview control can be fully displayed\r\n![image](https://github.com/user-attachments/assets/2a02ec83-81ab-48be-bd37-62faf8f6e7c4)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .net 10.0.0-alpha.1.24611.1\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12638)","Url":"https://github.com/dotnet/winforms/pull/12638","RelatedDescription":"Open PR \"Update the drawing position of the Treeview control text\" (#12638)"},{"Id":"2736871495","IsPullRequest":true,"CreatedAt":"2024-12-13T01:31:58","Actor":"JeremyKuhne","Number":"12633","RawContent":null,"Title":"Move all GDI+ specific interop to System.Private.Windows.GdiPlus","State":"closed","Body":"This removes the risk of not properly initializing GDI+ before calling native methods. It also removes the risk of inadvertently loading GDI+ in WPF. Lastly, it reduces the footprint for WPF.\r\n\r\nThe new project is not under a second `src` folder as we're going to move all tests to the root under `tests`. This allows for better build file structure (Directory.*, etc.) and helps some with MAX_PATH constraints.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12633)","Url":"https://github.com/dotnet/winforms/pull/12633","RelatedDescription":"Closed or merged PR \"Move all GDI+ specific interop to System.Private.Windows.GdiPlus\" (#12633)"},{"Id":"2736956947","IsPullRequest":false,"CreatedAt":"2024-12-12T21:57:13","Actor":"Tanya-Solyanik","Number":"12634","RawContent":null,"Title":"Upgrade PublishCodeCoverageResults@1 to PublishCodeCoverageResults@2","State":"open","Body":"Update the [build.yml ](https://github.com/dotnet/winforms/blob/main/eng/pipelines/build.yml#L145-#L153)file  to use PublishCodeCoverageResults@2 task.\n\nCurrently we are getting warnings in CI in Initialize job:\n```\nDownloading task: PublishCodeCoverageResults (1.248.1)\n##[warning]Task 'Publish code coverage' version 1 (PublishCodeCoverageResults@1) is deprecated.\n##[warning]The PublishCodeCoverageResults@1 is deprecated. Users are recommended to switch to task version 2. For more details, see https://devblogs.microsoft.com/devops/new-pccr-task\nDownloading task: PublishBuildArtifacts (1.247.1)\nDownloading task: PublishTestResults (2.247.1)\n```\nDetails https://devblogs.microsoft.com/devops/new-pccr-task/","Url":"https://github.com/dotnet/winforms/issues/12634","RelatedDescription":"Open issue \"Upgrade PublishCodeCoverageResults@1 to PublishCodeCoverageResults@2\" (#12634)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-12-20T03:30:35.1658603Z","RunDurationInMilliseconds":542}