{"Data":{"GitHub":{"Issues":[{"Id":"1284568505","IsPullRequest":true,"CreatedAt":"2022-06-27T23:02:36","Actor":"dotnet-maestro[bot]","Number":"7348","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220627.1\r\n- **Date Produced**: June 27, 2022 8:28:47 AM UTC\r\n- **Commit**: 640c1cc2a140b322c4f30f6d6b85f35f0c4c7313\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22323.2 to 7.0.0-beta.22327.1][3]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22323.2 to 7.0.0-beta.22327.1][3]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22323.2 to 7.0.0-beta.22327.1][3]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22323.2 to 7.0.0-beta.22327.1][3]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22323.2 to 7.0.0-beta.22327.1][3]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22323.2 to 7.0.0-beta.22327.1][3]\r\n\r\n[3]: https://github.com/dotnet/arcade/compare/9dbd4ef...640c1cc\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/7348)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/7348","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#7348)"},{"Id":"1283276586","IsPullRequest":true,"CreatedAt":"2022-06-27T23:01:51","Actor":"dotnet-maestro[bot]","Number":"7342","RawContent":null,"Title":"[release/7.0-preview6] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fee5182a-43ed-4a1f-ad9b-08da44dc70b1)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: fee5182a-43ed-4a1f-ad9b-08da44dc70b1\r\n- **Build**: 20220623.6\r\n- **Date Produced**: June 24, 2022 4:29:44 AM UTC\r\n- **Commit**: e45c708c41a9fdec2545b2ae517739a122f7b66b\r\n- **Branch**: refs/heads/release/7.0-preview6\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.6.22323.3 to 7.0.0-preview.6.22323.6][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/57388eb...e45c708\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:fee5182a-43ed-4a1f-ad9b-08da44dc70b1)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/7342)","Url":"https://github.com/dotnet/winforms/pull/7342","RelatedDescription":"Closed or merged PR \"[release/7.0-preview6] Update dependencies from dotnet/runtime\" (#7342)"},{"Id":"1282303767","IsPullRequest":true,"CreatedAt":"2022-06-27T22:25:11","Actor":"dotnet-maestro[bot]","Number":"7339","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220626.1\r\n- **Date Produced**: June 26, 2022 9:51:12 PM UTC\r\n- **Commit**: c9f80fdde29c71ac87971383c77a1a5e665fadb9\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.CodeDom**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Text.Json**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22326.1][5]\r\n\r\n[5]: https://github.com/dotnet/runtime/compare/fdc3b51...c9f80fd\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/7339)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/7339","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#7339)"},{"Id":"1286307078","IsPullRequest":false,"CreatedAt":"2022-06-27T20:21:02","Actor":"vladimir-krestov","Number":"7357","RawContent":null,"Title":"Suggest to create and use separate method with asserting `HRESULT` of `UiaDisconnectProvider`","State":"open","Body":"### Is your feature request related to a problem? Please describe\n\nWe have to check `UiaDisconnectProvider` result every time and check its arguments for null.\r\nBased on [this comment](https://github.com/dotnet/winforms/pull/7319#discussion_r907681735).`UiaDisconnectProvider`\n\n### Describe the solution you'd like and alternatives you've considered\n\nWe may create a separate method for `UiaDisconnectProvider` with its result checking and rework it for all places of `UiaDisconnectProvider` calls. For example, rework `UiaDisconnectProvider` and put its result check inside.\r\nSomething like this:\r\n![image](https://user-images.githubusercontent.com/49272759/176028365-526f3692-ddfe-4fa1-973d-7c30c43e50a0.png)\r\n\n\n### Will this feature affect UI controls?\n\nNo, just refactoring.","Url":"https://github.com/dotnet/winforms/issues/7357","RelatedDescription":"Open issue \"Suggest to create and use separate method with asserting `HRESULT` of `UiaDisconnectProvider`\" (#7357)"},{"Id":"1285616033","IsPullRequest":false,"CreatedAt":"2022-06-27T10:48:33","Actor":"xiaoyuvax","Number":"7356","RawContent":null,"Title":"BinaryEditor doesn't work for PropertyGrid control in .net 6 preview.","State":"open","Body":"### .NET version\n\n Version:   6.0.400-preview.22301.10\r\n Commit:    25580ffe7a\r\n\r\nHost (useful for support):\r\n  Version: 6.0.6\r\n  Commit:  7cca709db2\r\n\r\n.NET SDKs installed:\r\n  6.0.301 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.400-preview.22301.10 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nnot sure\n\n### Issue description\n\nAfter an object is selected for PropertyGrid control to display and if user attempts to click and edit any of its Byte[] property, error message shown like below and supposed BinaryEditor not brought up:\r\n\r\nCould not find the resource\r\n'System.ComponentModel.Design.BinaryEditorresources\" among the resources \"System.Windows.Forms.Design.BorderSidesEditorresources\" System.ComponentMode.Design.CollectionEditor.resources\" System.Windows.Forms.Design.FormatControl.resources\" System.Windows.Forms.Desiqn.LinkAreaEditorresources\",\r\nSystem.Wingows.Forms.Desian.MaskDesignerDia og.resources\" System.Wingows.Forms.Desian.ShortcutKevsEditorresources\". System.SR.resources\"\r\nSystem.Wingows.Forms.DesignStringCo ectionEditorresources\".\r\nSystem.Windows.Forms.Design.Resources.System.ComponentMode.De sign.BinaryEditor.resources\"\r\n'System.Windows.Forms.Design.colordlg.data\"... embedded in the\r\nassembly \"System.Windows.Forms.Design nor among the resources in any satellite assemblies for the specified culture. Perhaps the resources were embedded with anincorrect name\n\n### Steps to reproduce\n\n1) Add a PropertyGrid control to ur WinForm.\r\n2) Set the PropertyGrid.SelectedObject to an object with Byte[] type properties.\r\n3) Run the Form, and click on the Byte[] type property in the PropertyGrid, u see the error message.\r\n","Url":"https://github.com/dotnet/winforms/issues/7356","RelatedDescription":"Open issue \"BinaryEditor doesn't work for PropertyGrid control in .net 6 preview.\" (#7356)"},{"Id":"1285364100","IsPullRequest":false,"CreatedAt":"2022-06-27T07:21:17","Actor":"Durgajyothi143","Number":"7355","RawContent":null,"Title":"A11y_WINFORMS_Remaining_Controls_Testing_Remaining-Controls_Zoom:At 200% zoom item and value section is not visible clearly","State":"open","Body":"### .NET version\r\n\r\n.NET Framework Version 4.8.04161\r\nOperating System: Windows 11 Enterprise 21H2\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\n_No response_\r\n\r\n### Issue description\r\n\r\n\r\nGitHubTags:#A11yMAS;#A11yTCS;#.NET Core[WINFORMS]-Win32-June2022;#.NET Core;#A11ySev2;#WCAG1.4.4;#DesktopApp;#Win11;#Benchmark;#Zoom\r\n\r\n**Actual:**\r\n\r\nAt 200% zoom item and value scetion is  not visible clearly\r\n\r\n**Expected:**\r\n\r\nAt 200% zoom item and value section should be visible clearly\r\n\r\n**User Impact:**\r\n\r\nUser with low vision will get difficulty to see the content\r\n\r\n### Steps to reproduce\r\n\r\n1. Open Core testing solution in VS 2019 Int Preview\r\n2. Right click on cs.proj file and click on Build.\r\n3.Then run the application. \r\n4.Main Form screen would appear.\r\n5.Navigate to Remaining_Controls_Testing Click on this.\r\n6.Remaining Controls screen would appear.\r\n\r\n**Attachment:**\r\n![A11y_WINFORMS_Remaining_Controls_Testing_Remaining-Controls_Zoom #7355](https://user-images.githubusercontent.com/108055767/175906735-474093a3-3a0e-4dc6-97a5-101503ad5904.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/7355","RelatedDescription":"Open issue \"A11y_WINFORMS_Remaining_Controls_Testing_Remaining-Controls_Zoom:At 200% zoom item and value section is not visible clearly\" (#7355)"},{"Id":"1285329042","IsPullRequest":false,"CreatedAt":"2022-06-27T06:47:01","Actor":"Durgajyothi143","Number":"7354","RawContent":null,"Title":"A11y_WINFORMS_Winforms-Containers_Winform-Containers_Keyboard:Keyboard focus is going in incorrect  direction ","State":"open","Body":"### .NET version\r\n\r\n.NET Framework Version 4.8.04161\r\nOperating System: Windows 11 Enterprise 21H2\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\n_No response_\r\n\r\n**Issue description**\r\n\r\nGitHubTags:#A11yMAS;#A11yTCS;#.NET Core[WINFORMS]-Win32-June2022;#.NET Core;#A11ySev2;#WCAG2.4.3;#DesktopApp;#Win11;#Benchmark;#Keyboard\r\n\r\n**Actual:**\r\n\r\nkeyboard focus is going in incorrect direction \r\n\r\n**Expected:**\r\n\r\nKeyboard focus should go in correct direction\r\n\r\n**User Impact:**\r\n\r\nKeyboard users will face difficulties while navigating winform containers tab\r\n\r\n\r\n**Steps to reproduce**\r\n\r\n1. Open Core testing solution in VS 2019 Int Preview\r\n2. Right click on cs.proj file and click on Build.\r\n3.Then run the application. \r\n4.Main Form screen would appear.\r\n5.Navigate to Containers_Controls:Testing the controls under the containers Tab.\r\n6.Winforms_Containers screen would appear.\r\n\r\n\r\n**Attachment:**\r\n[A11y_WINFORMS_Winforms-Containers_Winform-Containers_Keyboard #7354.zip](https://github.com/dotnet/winforms/files/8989395/A11y_WINFORMS_Winforms-Containers_Winform-Containers_Keyboard.7354.zip)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/7354","RelatedDescription":"Open issue \"A11y_WINFORMS_Winforms-Containers_Winform-Containers_Keyboard:Keyboard focus is going in incorrect  direction \" (#7354)"},{"Id":"1285328874","IsPullRequest":false,"CreatedAt":"2022-06-27T06:46:48","Actor":"Durgajyothi143","Number":"7353","RawContent":null,"Title":"A11y_WINFORMS_Winforms-Containers_GroupBox_Zoom:At 200% zoom the data under group box is not visible","State":"open","Body":"### .NET version\r\n\r\n.NET Framework Version 4.8.04161\r\nOperating System: Windows 11 Enterprise 21H2\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\n_No response_\r\n\r\n### Issue description\r\n\r\nGitHubTags:#A11yMAS;#A11yTCS;#.NET Core[WINFORMS]-Win32-June2022;#.NET Core;#A11ySev2;#WCAG1.4.4;#DesktopApp;#Win11;#Benchmark;#Zoom\r\n\r\n**Actual:**\r\n\r\nAt 200% zoom the data under group box is not visible\r\n\r\n**Expected:**\r\n\r\nAt 200% zoom the data under group box should be  visible\r\n\r\n**User Impact:**\r\n\r\nUser with low vision will get difficulty to see the content.\r\n\r\n### Steps to reproduce\r\n\r\n1. Open Core testing solution in VS 2019 Int Preview\r\n2. Right click on cs.proj file and click on Build.\r\n3.Then run the application. \r\n4.Main Form screen would appear.\r\n5.Navigate to Containers_Controls:Testing the controls under the containers Tab.\r\n6.Winforms_Containers screen would appear.\r\n7.Navigate to GroupBox section and verify all control.\r\n \r\n**![A11y_WINFORMS_Winforms-Containers_GroupBox_Zoom #7353](https://user-images.githubusercontent.com/108055767/175907233-22250e98-6d2d-43a6-b15e-997790a5c0ff.png)**\r\n","Url":"https://github.com/dotnet/winforms/issues/7353","RelatedDescription":"Open issue \"A11y_WINFORMS_Winforms-Containers_GroupBox_Zoom:At 200% zoom the data under group box is not visible\" (#7353)"},{"Id":"1285305850","IsPullRequest":false,"CreatedAt":"2022-06-27T06:21:23","Actor":"adbhosale","Number":"7352","RawContent":null,"Title":"A11y_WINFORMS_DialogControls_ColorDialog_Screenreader : The NVDA is not announcing about the color in color dialog.","State":"open","Body":"### .NET version\n\n.NET Framework Version 4.8.04161\r\nOperating System: Windows 11 Enterprise 21H2\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nGitHubTags:#A11yMAS;#A11yTCS;#.NET Core[WINFORMS]-Win32-June2022;#.NET Core;#A11ySev2;#WCAG1.3.1;#DesktopApp;#Win11;#Benchmark;#Screenreader#NVDA\r\n\r\nActual:\r\n The NVDA is not announcing about the color in color dialog.\r\n\r\nExpected:\r\n The NVDA should be announcing about the color in color dialog.\r\n\r\nUser Impact:\r\nThe low vision users and no vision users will get confused about the colors\n\n### Steps to reproduce\n\n1. Open Core testing solution in VS 2019 Int Preview\r\n2. Right click on cs.proj file and click on Build.\r\n3.Then run the application. \r\n4.Main Form screen would appear.\r\n5.Click on DialogControls:Testing the controls under the Dialog  Tab.\r\n6.Navigate to ColorDialog button and click on it.\r\n7.Start NVDA and check the colors' names are announced or not.\r\n[nvda_colors are not announced by NVDA.zip](https://github.com/dotnet/winforms/files/8989131/nvda_colors.are.not.announced.by.NVDA.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/7352","RelatedDescription":"Open issue \"A11y_WINFORMS_DialogControls_ColorDialog_Screenreader : The NVDA is not announcing about the color in color dialog.\" (#7352)"},{"Id":"1285290566","IsPullRequest":false,"CreatedAt":"2022-06-27T06:05:27","Actor":"adbhosale","Number":"7351","RawContent":null,"Title":"A11y_WINFORMS_PrintingTesting_Settings_Zoom : At 200 percent zoom the Content at the bottom of the tab like Ok and Cancel button is not visible.","State":"open","Body":"### .NET version\n\n.NET Framework Version 4.8.04161\r\nOperating System: Windows 11 Enterprise 21H2\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nGitHubTags:#A11yMAS;#A11yTCS;#.NET Core[WINFORMS]-Win32-June2022;#.NET Core;#A11ySev2;#WCAG1.4.4;#DesktopApp;#Win11;#Benchmark;#Zoom\r\n\r\nActual:\r\nAt 200 percent zoom the Content at the bottom of the tab like Ok and Cancel button is not visible.\r\n\r\n**This issue is observed for every dialog box. The bottom content is not visible.**\r\n\r\nExpected:\r\nAt 200 percent zoom the Content at the bottom of the tab like Ok and Cancel button should be visible.\r\n\r\nUser Impact:\r\nUser with low vision will get difficulty to see the content.\n\n### Steps to reproduce\n\n1. Open Core testing solution in VS 2019 Int Preview\r\n2. Right click on cs.proj file and click on Build.\r\n3.Then run the application. \r\n4.Main Form screen would appear.\r\n5.Click on Printing_Controls:Testing the controls under Printing Tab.\r\n6.Navigate to Setting button.\r\n7.Setting with controls Screen would appear.\r\n8.Use custom scaling at 200 percent and check if those buttons are visible or not.\r\n\r\n\r\n![A11y_WINFORMS_PrintingTesting_Settings_Zoom](https://user-images.githubusercontent.com/93637360/175870437-e95ce554-2cb5-43d3-8a48-9ffe8b60e000.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/7351","RelatedDescription":"Open issue \"A11y_WINFORMS_PrintingTesting_Settings_Zoom : At 200 percent zoom the Content at the bottom of the tab like Ok and Cancel button is not visible.\" (#7351)"},{"Id":"1285017489","IsPullRequest":true,"CreatedAt":"2022-06-26T20:02:02","Actor":"vladimir-krestov","Number":"7350","RawContent":null,"Title":"Fixed accessibility BoundingRectangle of nested Forms","State":"open","Body":"Fixes #7245\r\n\r\n## Proposed changes\r\n\r\n- Recalculate a nested Form BoundingRectangle location regarding its Parent position on screen.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Nested Forms have correct BoundingRectangle value\r\n\r\n## Regression? \r\n\r\n- Yes (since #2096)\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/49272759/175831780-55e3c79f-7978-4964-a2e5-d3d3c2906c5d.png)\r\n\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/49272759/175831733-d8bedca6-6f8b-41fa-b655-a5a6ecbd07f1.png)\r\n\r\n\r\n\r\n## Test methodology\r\n\r\n- Manual\r\n- CTI\r\n- Unit tests\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Using AI and Inspect. Tested cases when:\r\n     - The nested form is placed on the root form\r\n     - The nested form is places on a Panel inside the root form\r\n     - The nested form has different location coordinated inside the parent control\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- 7.0.100-preview.6.22281.2\r\n- Windows 11\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/7350)","Url":"https://github.com/dotnet/winforms/pull/7350","RelatedDescription":"Open PR \"Fixed accessibility BoundingRectangle of nested Forms\" (#7350)"},{"Id":"1284637080","IsPullRequest":true,"CreatedAt":"2022-06-25T15:28:40","Actor":"vladimir-krestov","Number":"7349","RawContent":null,"Title":"Fixing memory leaks of DataGridView elements accessible objects","State":"open","Body":"Fixes #7347\r\n⚠️Should be merged after #7319 because uses the ComboBox leaks fix.\r\n⚠️Doesn't fix memory leaks of TextPattern. It will be fixed as another fix for TextBox as well.\r\n\r\n## Proposed changes\r\n- Add a call of UiaDisconnectProvider for DataGridView elements (rows, cells, headers) for cases when:\r\nDataGridView is destroyed\r\nA row is removed from a DataGridView\r\nA column is removed from a DataGridView\r\nUsing TextPattern explorer of Inspect, Narrator\r\n\r\n\r\n## Customer Impact\r\n- Less memory leaks of DataGridView\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n- There are some kept object in the memory after disposing a DataGridView:\r\n![image](https://user-images.githubusercontent.com/49272759/175780243-02cfba68-4071-4463-aa5e-d7fe318ca603.png)\r\n\r\n\r\n### After\r\n- These are no DataGridView elements objects in the memory after disposing (without TextPattern):\r\n![image](https://user-images.githubusercontent.com/49272759/175780198-e55c20f2-47ae-47df-a576-92f28a680f85.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- CTI\r\n- Manually (via WinDbg)\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Using AI, Inspect, Narrator\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET 7.0 Preview 4\r\n- Windows 11\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/7349)","Url":"https://github.com/dotnet/winforms/pull/7349","RelatedDescription":"Open PR \"Fixing memory leaks of DataGridView elements accessible objects\" (#7349)"},{"Id":"1284118435","IsPullRequest":false,"CreatedAt":"2022-06-24T19:33:56","Actor":"vladimir-krestov","Number":"7347","RawContent":null,"Title":"DataGridView and its elements accessible objects are leaking in memory","State":"open","Body":"### .NET version\n\n.NET 7.0 Preview 4\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo\n\n### Issue description\n\nDataGridView and its elements accessible objects are left in memory after the DataGridView control instance with its rows was inspected with accessibility tool (like Accessibility Insights or Inspect) and the form with DataGridView is closed, garbage is collected, but accessibility tool is still opened. Same applies for case when DataGridView row or column is removed from the control's field.\r\n\r\nWinDbg snapshot after disposing:\r\n![image](https://user-images.githubusercontent.com/49272759/175655354-ae3adf5c-b128-458b-9e01-1b1a01a6d739.png)\r\n\n\n### Steps to reproduce\n\n- Create a parent form with two buttons: one will be opening a child form with the DataGridView control and the other will collect the garbage.\r\n- Press the second button to open the child form with DataGridView .\r\n- Start the Accessibility Insights tools or Inspect.\r\n- Run automated checks for the ComboBox control using AI/Inspect.\r\n- Close the child form.\r\n- Clear memory with the first button of the parent form.\r\n- DON'T close the AI/Inspect tool.\r\n- Update AI/Inspect cached tree to release accessible objects\r\n- Look for \"DataGrid\" objects left in memory (using WinDbg, or dotMemory, or another suitable tool).","Url":"https://github.com/dotnet/winforms/issues/7347","RelatedDescription":"Open issue \"DataGridView and its elements accessible objects are leaking in memory\" (#7347)"},{"Id":"1283967964","IsPullRequest":false,"CreatedAt":"2022-06-24T16:52:10","Actor":"MisinformedDNA","Number":"7346","RawContent":null,"Title":"Generated code should be fully qualified","State":"open","Body":"### .NET version\n\n6.0.202\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nIf a user's namespace includes `Application`, then the generated code for `ApplicationConfiguration` will result in compile time issues. Controls should be fully qualified to avoid these issues. This is how the [Logging generator](https://github.com/dotnet/runtime/blob/0488519e709811fd6f96aa0aed4c17a72c00898c/src/libraries/Microsoft.Extensions.Logging.Abstractions/tests/Microsoft.Extensions.Logging.Generators.Tests/Baselines/TestWithDefaultValues.generated.txt) works.\r\n\r\n**Current:**\r\n\r\n```csharp\r\ninternal static partial class ApplicationConfiguration\r\n{\r\n    public static void Initialize()\r\n    {\r\n        Application.EnableVisualStyles();\r\n        Application.SetCompatibleTextRenderingDefault(false);\r\n        Application.SetHighDpiMode(HighDpiMode.SystemAware);\r\n    }\r\n}\r\n```\r\n\r\n**Desired:**\r\n\r\n```csharp\r\ninternal static partial class ApplicationConfiguration\r\n{\r\n    public static void Initialize()\r\n    {\r\n        global::System.Windows.Forms.Application.EnableVisualStyles();\r\n        global::System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(false);\r\n        global::System.Windows.Forms.Application.SetHighDpiMode(global::System.Windows.Forms.HighDpiMode.SystemAware);\r\n    }\r\n}\r\n```\r\n\n\n### Steps to reproduce\n\n1. Create a new WinForms project `Something.Application`\r\n2. Try to build","Url":"https://github.com/dotnet/winforms/issues/7346","RelatedDescription":"Open issue \"Generated code should be fully qualified\" (#7346)"},{"Id":"1283734610","IsPullRequest":false,"CreatedAt":"2022-06-24T13:10:07","Actor":"deng0","Number":"7345","RawContent":null,"Title":"WinForms Designer ignores custom Form Font in specific case","State":"open","Body":"### Environment\r\n\r\nVisual Studio 2022 17.2.5\r\n\r\n### .NET version\r\n\r\n6.0\r\n\r\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\r\n\r\nWe think this problem might have been introduced with a recent VS update, but we're not sure.\r\n\r\n### Issue description\r\n\r\nWe have noticed that in a specific case the Visual Studio .NET Core Windows Forms designer ignores the custom font that is set for a Form.\r\nThe conditions under which the problem occurs seem to be the following:\r\n- ApplicationDefaultFont is defined in csproj file\r\n- The form is set to be localizable\r\n- The form contains a ToolTip component which has GenerateMember property set to true\r\n\r\nWhen a form has a custom font defined (a font different from the one defined as ApplicationDefaultFont), the Designer ignores the font and loads it with the ApplicationDefaultFont instead, which obviously can screw up your layout.\r\n\r\nThe problem only happens in the Designer, at program run-time everythings seems to work correctly.\r\n\r\n### Steps to reproduce\r\n\r\nI've created a simple repro project:\r\n[FormFontToolTipProblem.zip](https://github.com/dotnet/winforms/files/8976392/FormFontToolTipProblem.zip)\r\n\r\nThe project contains 4 Forms, with LocalizableFormWithToolTip being the one where the problem occurs.\r\n\r\nAll Forms should look the same:\r\n![image](https://user-images.githubusercontent.com/4224837/175542832-52fef00c-7342-4297-aad6-171862bded30.png)\r\n\r\nbut when LocalizableFormWithToolTip is loaded in the Designer it uses the ApplicationDefaultFont instead:\r\n![image](https://user-images.githubusercontent.com/4224837/175542941-ee06d298-06ec-4126-a568-60b6129b4451.png)\r\n\r\nWhen the ApplicationDefaultFont entry is removed from the csproj, the problem no longer occurs.\r\n\r\n\r\n### Diagnostics\r\n\r\n_No response_","Url":"https://github.com/dotnet/winforms/issues/7345","RelatedDescription":"Open issue \"WinForms Designer ignores custom Form Font in specific case\" (#7345)"},{"Id":"1283672712","IsPullRequest":true,"CreatedAt":"2022-06-24T12:46:12","Actor":"dotnet-maestro[bot]","Number":"7343","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220623.2\r\n- **Date Produced**: June 23, 2022 10:07:18 PM UTC\r\n- **Commit**: 9dbd4ef3347980e68875996239f3272efb85dd04\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22322.3 to 7.0.0-beta.22323.2][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22322.3 to 7.0.0-beta.22323.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22322.3 to 7.0.0-beta.22323.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22322.3 to 7.0.0-beta.22323.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22322.3 to 7.0.0-beta.22323.2][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22322.3 to 7.0.0-beta.22323.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/eaa4673...9dbd4ef\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/7343)","Url":"https://github.com/dotnet/winforms/pull/7343","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#7343)"},{"Id":"1283701794","IsPullRequest":false,"CreatedAt":"2022-06-24T12:38:13","Actor":"vladimir-krestov","Number":"7344","RawContent":null,"Title":"`DomainItemAccessibleObject` and `DomainUpDownAccessibleObject` should be marked as \"obsolete\"","State":"open","Body":"### Is your feature request related to a problem? Please describe\n\nRelated to fix #7330. Based on the [comment](https://github.com/dotnet/winforms/pull/7330#pullrequestreview-1017923802).\r\n- `DomainItemAccessibleObject` class is useless, we don't need it to build `DomainUpDown` accessibility tree, because we don't show \"Items\" list anymore (see #4207).\r\n- `DomainUpDownAccessibleObject` class is useless, we don't need it, because the base `UpDownBaseAccessibleObject` (from #7330) has all necessary implementation.\r\n\r\nWe might to remove them, but we can't because they are \"public\". \n\n### Describe the solution you'd like and alternatives you've considered\n\nFrom the [comment](https://github.com/dotnet/winforms/pull/7330#pullrequestreview-1017923802):\r\n> ...we should obsolete the two defunct types with `[ObsoleteAttribute(..., IsError = false)]`...\n\n### Will this feature affect UI controls?\n\nNo, we don't use these classes for building of `DomainUpDown` accessibility tree.","Url":"https://github.com/dotnet/winforms/issues/7344","RelatedDescription":"Open issue \"`DomainItemAccessibleObject` and `DomainUpDownAccessibleObject` should be marked as \"obsolete\"\" (#7344)"},{"Id":"1283207543","IsPullRequest":false,"CreatedAt":"2022-06-24T03:18:23","Actor":"vsfeedback","Number":"7341","RawContent":null,"Title":"LinkLabels truncate when programmically disabled","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/LinkLabels-truncate-when-programmically-/10078592)._\n\n---\n[severity:It bothers me. A fix would be nice]\r\nThe link label truncates when it's Enabled property is set to false. Does not happen in the designer, just the program. I have set the backgound colour to highlight that it is within the control - the control itself remains the same size when disabled/enabled. Note the words \"Artist\" and \"Album\" are not complete. The controls work fine when Enabled = true;\n\n![image.png](https://aka.ms/dc/image?name=B90d09ef412a74783913bc4576767e86c637915572989528865_20220623-143136-image.png&tid=90d09ef412a74783913bc4576767e86c637915572989528865)\n\n---\n### Original Comments\n\n#### Feedback Bot on 6/23/2022, 02:09 PM: \n\n(private comment, text removed)\n#### Melon Wang [MSFT] on 6/24/2022, 09:33 AM: \n\n(private comment, text removed)\n#### David Bailey on 6/24/2022, 09:55 AM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/winforms/issues/7341","RelatedDescription":"Open issue \"LinkLabels truncate when programmically disabled\" (#7341)"},{"Id":"1283034345","IsPullRequest":true,"CreatedAt":"2022-06-23T23:07:53","Actor":"dotnet-maestro[bot]","Number":"7340","RawContent":null,"Title":"[release/7.0-preview6] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fee5182a-43ed-4a1f-ad9b-08da44dc70b1)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: fee5182a-43ed-4a1f-ad9b-08da44dc70b1\r\n- **Build**: 20220623.3\r\n- **Date Produced**: June 23, 2022 9:31:53 PM UTC\r\n- **Commit**: 57388eb20e01a8f098469c65bf7b70f41a133215\r\n- **Branch**: refs/heads/release/7.0-preview6\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.6.22321.8 to 7.0.0-preview.6.22323.3][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/fdc3b51...57388eb\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:fee5182a-43ed-4a1f-ad9b-08da44dc70b1)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/7340)","Url":"https://github.com/dotnet/winforms/pull/7340","RelatedDescription":"Closed or merged PR \"[release/7.0-preview6] Update dependencies from dotnet/runtime\" (#7340)"},{"Id":"1282302354","IsPullRequest":true,"CreatedAt":"2022-06-23T12:51:19","Actor":"dotnet-maestro[bot]","Number":"7338","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220622.3\r\n- **Date Produced**: June 22, 2022 2:32:18 PM UTC\r\n- **Commit**: eaa4673f2a82355f7cd2f1c1243578be2e961d0f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22320.8 to 7.0.0-beta.22322.3][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22320.8 to 7.0.0-beta.22322.3][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22320.8 to 7.0.0-beta.22322.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22320.8 to 7.0.0-beta.22322.3][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22320.8 to 7.0.0-beta.22322.3][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22320.8 to 7.0.0-beta.22322.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/0429934...eaa4673\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/7338)","Url":"https://github.com/dotnet/winforms/pull/7338","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#7338)"},{"Id":"1281920208","IsPullRequest":false,"CreatedAt":"2022-06-23T07:07:23","Actor":"PoojaNamde","Number":"7337","RawContent":null,"Title":"A11y_WINFORMS_CommonControls2_MonthCalendar_Keyboard : Keyboard focus order is incorrect inside \"Common Control 2\" section","State":"open","Body":"“[Check out Accessibility Insights!](https://accessibilityinsights.io/) - Identify accessibility bugs before check-in and make bug fixing faster and easier.”\r\n\r\n### .NET version\r\n\r\n.NET Framework Version 4.8.04161\r\nOperating System: Windows 11 Enterprise 21H2\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Issue description\r\n\r\nGitHubTags:#A11yMAS;#A11yTCS;#.NET Core[WINFORMS]-Win32-June2022;#.NET Core;#A11ySev2;#WCAG2.4.3;#DesktopApp;#Win11;#Benchmark;#Keyboard\r\n\r\n### Actual:\r\nAs soon as the \"Common Control 2\" dialog gets open keyboard focus is first moving to \"Web Browser\" controls which is incorrect.\r\n\r\n### Expected:\r\nAs soon as the \"Common Control 2\" dialog gets open keyboard focus should first move to \"Month Calendar\" controls and then to others control like \"Numericc UpDown, Radio button\" like wise keyboard order should be there in the dialog.\r\n\r\n### User Impact:\r\nKeyboard users will face difficulties while navigating common control 2 dialog.\r\n\r\n### Steps to reproduce\r\n\r\n1. Open Core testing solution in VS Enterprise 2022 Int Preview.\r\n2. Right click on cs.proj file and click on Build.\r\n3. Press enter on the application.\r\n4. Main Form screen would appear.\r\n5. Click on \"Common_Controls2:Testing the controls under the Common_controls\" Tab.\r\n6. Tab to MonthCalendar Section.\r\n7. Navigate using Tab key and observe that Keyboard focus order is incorrect inside \"Common Control 2\" section\r\n\r\n### Attachment:\r\n[7337_A11y_WINFORMS_CommonControls2_MonthCalendar_Keyboard MP4.zip](https://github.com/dotnet/winforms/files/8974801/7337_A11y_WINFORMS_CommonControls2_MonthCalendar_Keyboard.MP4.zip)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/7337","RelatedDescription":"Open issue \"A11y_WINFORMS_CommonControls2_MonthCalendar_Keyboard : Keyboard focus order is incorrect inside \"Common Control 2\" section\" (#7337)"},{"Id":"1281882477","IsPullRequest":false,"CreatedAt":"2022-06-23T06:32:42","Actor":"PoojaNamde","Number":"7336","RawContent":null,"Title":"A11y_WINFORMS_CommonControls1_ButtonSection_Keyboard : Keyboard focus order is incorrect inside Button section.","State":"open","Body":"“[Check out Accessibility Insights!](https://accessibilityinsights.io/) - Identify accessibility bugs before check-in and make bug fixing faster and easier.”\r\n\r\n### .NET version\r\n.NET Framework Version 4.8.04161\r\nOperating System: Windows 11 Enterprise 21H2\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Issue description\r\n\r\nGitHubTags:#A11yMAS;#A11yTCS;#.NET Core[WINFORMS]-Win32-June2022;#.NET Core;#A11ySev2;#WCAG2.4.3;#DesktopApp;#Win11;#Benchmark;#Keyboard\r\n\r\n### **Actual:**\r\nFocus order is incorrect inside button section, as the keyboard focus is first moving to 'LargeIcon' instead of moving to 'List'.\r\n\r\n### **Expected:**\r\nFocus order should be correct inside button section, as the keyboard focus should first move to 'List' instead of moving to  'LargeIcon' and it should move in sequence.\r\n\r\n### User Impact:\r\n\r\nKeyboard users will face difficulties while navigating inside button section.\r\n\r\n### Steps to reproduce\r\n\r\n1. Open Core testing solution in VS Enterprise 2022 Int Preview.\r\n2. Right click on cs.proj file and click on Build-> Build Solution.\r\n3. Press enter on the application.\r\n4. Main Form screen gets open\r\n5. Click on \"Common_Controls1:Testing the controls under the Common_controls\" Tab.\r\n6. Tab to Button section and navigate using keyboard Tab key.\r\n7. Observe that Keyboard focus order is incorrect inside Button section.\r\n\r\n### Attachment:\r\n\r\nhttps://user-images.githubusercontent.com/90901519/175499271-23096fac-e9c0-42a7-8abf-1a01bbea9cfc.MP4\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/7336","RelatedDescription":"Open issue \"A11y_WINFORMS_CommonControls1_ButtonSection_Keyboard : Keyboard focus order is incorrect inside Button section.\" (#7336)"},{"Id":"1280046015","IsPullRequest":true,"CreatedAt":"2022-06-22T17:12:44","Actor":"dotnet-maestro[bot]","Number":"7334","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20220620.8\r\n- **Date Produced**: June 21, 2022 1:34:33 AM UTC\r\n- **Commit**: 0429934b0c13fc3e6a990b482a7892bac0b76708\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22316.2 to 7.0.0-beta.22320.8][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.22316.2 to 7.0.0-beta.22320.8][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.22316.2 to 7.0.0-beta.22320.8][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22316.2 to 7.0.0-beta.22320.8][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.22316.2 to 7.0.0-beta.22320.8][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22316.2 to 7.0.0-beta.22320.8][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/ccfe6da...0429934\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/7334)","Url":"https://github.com/dotnet/winforms/pull/7334","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#7334)"},{"Id":"1280047501","IsPullRequest":true,"CreatedAt":"2022-06-22T12:51:58","Actor":"dotnet-maestro[bot]","Number":"7335","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20220621.8\r\n- **Date Produced**: June 22, 2022 9:50:24 AM UTC\r\n- **Commit**: fdc3b51da075066a5da489be2c169be85dbc117f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Text.Json**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.6.22320.7 to 7.0.0-preview.6.22321.8][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/7ab7f83...fdc3b51\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/7335)","Url":"https://github.com/dotnet/winforms/pull/7335","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#7335)"},{"Id":"1279671928","IsPullRequest":false,"CreatedAt":"2022-06-22T07:14:35","Actor":"runfoapp[bot]","Number":"7333","RawContent":null,"Title":"Flaky System.Windows.Forms.Tests.ToolStripTests.ToolStrip_WndProc_InvokeMouseActivate_Success","State":"open","Body":"<!-- runfo report start -->\r\nRunfo Tracking Issue: [Flaky System.Windows.Forms.Tests.ToolStripTests.ToolStrip_WndProc_InvokeMouseActivate_Success](https://runfo.azurewebsites.net/tracking/issue/354)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n|[1844500](https://dev.azure.com/dnceng/public/_build/results?buildId=1844500)|[dotnet-winforms CI](https://dnceng.visualstudio.com/public/_build?definitionId=267)|[PR 7319](https://github.com/dotnet/winforms/pull/7319)|Windows_x64-xunit|\r\n|[1843739](https://dev.azure.com/dnceng/public/_build/results?buildId=1843739)|[dotnet-winforms CI](https://dnceng.visualstudio.com/public/_build?definitionId=267)|Rolling|Windows_x64-xunit|\r\n|[1843647](https://dev.azure.com/dnceng/public/_build/results?buildId=1843647)|[dotnet-winforms CI](https://dnceng.visualstudio.com/public/_build?definitionId=267)|[PR 7339](https://github.com/dotnet/winforms/pull/7339)|Windows_arm64-xunit|\r\n|[1838084](https://dev.azure.com/dnceng/public/_build/results?buildId=1838084)|[dotnet-winforms CI](https://dnceng.visualstudio.com/public/_build?definitionId=267)|[PR 7327](https://github.com/dotnet/winforms/pull/7327)|Windows_x64-xunit|\r\n|[1837879](https://dev.azure.com/dnceng/public/_build/results?buildId=1837879)|[dotnet-winforms CI](https://dnceng.visualstudio.com/public/_build?definitionId=267)|[PR 7221](https://github.com/dotnet/winforms/pull/7221)|Windows_x64-xunit|\r\n|[1833928](https://dev.azure.com/dnceng/public/_build/results?buildId=1833928)|[dotnet-winforms CI](https://dnceng.visualstudio.com/public/_build?definitionId=267)|[PR 7323](https://github.com/dotnet/winforms/pull/7323)|Windows_arm64-xunit|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|0|5|6|\r\n\r\n<!-- runfo report end -->\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/7333","RelatedDescription":"Open issue \"Flaky System.Windows.Forms.Tests.ToolStripTests.ToolStrip_WndProc_InvokeMouseActivate_Success\" (#7333)"},{"Id":"1279669450","IsPullRequest":false,"CreatedAt":"2022-06-22T07:12:37","Actor":"runfoapp[bot]","Number":"7332","RawContent":null,"Title":"Flaky System.Windows.Forms.Tests.Dpi.FormDpiTests.Form_DpiChanged_Bounds","State":"open","Body":"<!-- runfo report start -->\r\nRunfo Tracking Issue: [Flaky System.Windows.Forms.Tests.Dpi.FormDpiTests.Form_DpiChanged_Bounds](https://runfo.azurewebsites.net/tracking/issue/353)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n|[1838116](https://dev.azure.com/dnceng/public/_build/results?buildId=1838116)|[dotnet-winforms CI](https://dnceng.visualstudio.com/public/_build?definitionId=267)|Rolling|Windows_x64-xunit|\r\n|[1838116](https://dev.azure.com/dnceng/public/_build/results?buildId=1838116)|[dotnet-winforms CI](https://dnceng.visualstudio.com/public/_build?definitionId=267)|Rolling|Windows_x64-xunit|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|0|1|1|\r\n\r\n<!-- runfo report end -->\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/7332","RelatedDescription":"Open issue \"Flaky System.Windows.Forms.Tests.Dpi.FormDpiTests.Form_DpiChanged_Bounds\" (#7332)"},{"Id":"1279419837","IsPullRequest":true,"CreatedAt":"2022-06-22T04:32:42","Actor":"dotnet-bot","Number":"7331","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1838173","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/7331)","Url":"https://github.com/dotnet/winforms/pull/7331","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 1838173\" (#7331)"},{"Id":"1278673975","IsPullRequest":true,"CreatedAt":"2022-06-21T16:09:22","Actor":"vladimir-krestov","Number":"7330","RawContent":null,"Title":"Fixing memory leaks of Numeric/DomainUpDown elements accessible objects","State":"open","Body":"Fixes #7328\r\n⚠️Doesn't fix memory leaks of TextPattern. It will be fixed as another fix for TextBox as well.\r\n\r\n## Proposed changes\r\n\r\n- Rework and refactor accessible objects implementation of UpDown controls. Removed `ItemList` and Item accessible objects, because they are unnecessary. Moved the implementation to the base class. [This comment](https://github.com/dotnet/winforms/issues/4207#issuecomment-941950437) describes why we don't keep ItemsList anymore. \r\n- Add a call of `UiaDisconnectProvider` for `Numeric/DomainUpDown` elements (its textbox and buttons) when the control is disposing.\r\n\r\n## Customer Impact\r\n\r\n- Less memory leaks\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n- There are some left objects in memory due to `UpDownEdit` and `UpDownButtons`:\r\n![image](https://user-images.githubusercontent.com/49272759/174846510-c6be894d-d85d-43f0-b439-f52f93ca8991.png)\r\n\r\n### After\r\n- Memory is clear after disposing:\r\n![image](https://user-images.githubusercontent.com/49272759/174846839-57c3faa0-b76c-495f-8bd6-4a42d2d5bb38.png)\r\n\r\n\r\n\r\n## Test methodology\r\n- CTI\r\n- Manual\r\n- Unit tests\r\n\r\n## Accessibility testing \r\n- Using Narrator/Inspect and WinDbg\r\n\r\n## Test environment(s) \r\n- .NET 7.0 Preview 4\r\n- Windows 11\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/7330)","Url":"https://github.com/dotnet/winforms/pull/7330","RelatedDescription":"Open PR \"Fixing memory leaks of Numeric/DomainUpDown elements accessible objects\" (#7330)"},{"Id":"1278531781","IsPullRequest":false,"CreatedAt":"2022-06-21T14:24:39","Actor":"dkazennov","Number":"7329","RawContent":null,"Title":"Control classes leaking memory","State":"open","Body":"### .NET version\r\n\r\n.NET 7.0 Preview 4\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\n_No response_\r\n\r\n### Issue description\r\n\r\nInvestigating possible memory leaks with Windows Forms classes inherited to Control class AND in corresponding Accessible Objects.\r\nSome control items and some accessible objects are left in memory after the control instance with its items was inspected with accessibility tool (like Accessibility Insights or Inspect) and the form with the control is closed, garbage is collected, but accessibility tool is still opened.\r\n\r\nAbstract, private and internal control classes which can't be placed in a form Controls collection are not applicable.\r\nControl classes from the namespace System.Windows.Forms.Design are not not applicable.\r\n\r\n<html xmlns:v=\"urn:schemas-microsoft-com:vml\"\r\nxmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\nxmlns:x=\"urn:schemas-microsoft-com:office:excel\"\r\nxmlns=\"http://www.w3.org/TR/REC-html40\">\r\n\r\n<head>\r\n\r\n<meta name=ProgId content=Excel.Sheet>\r\n<meta name=Generator content=\"Microsoft Excel 15\">\r\n<link id=Main-File rel=Main-File\r\nhref=\"file:///C:/Users/V-DKAZ~1.EUR/AppData/Local/Temp/msohtmlclip1/01/clip.htm\">\r\n<link rel=File-List\r\nhref=\"file:///C:/Users/V-DKAZ~1.EUR/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml\">\r\n\r\n</head>\r\n\r\n<body link=\"#0563C1\" vlink=\"#954F72\">\r\n\r\n\r\n\r\nClass   name | Base control class name | Memory leaks | Issue assigned\r\n-- | -- | -- | --\r\nControl |   |  not applicable\r\nAdornerWindow | Control |  not applicable\r\nAnchorUI | Control |  not applicable\r\nAxHost | Control |  not applicable\r\nButtonBase | Control |  not applicable\r\nButton | ButtonBase |  **Is leaking**\r\nDetailsButton | Button |  not applicable\r\nDropDownButton | Button |  not applicable\r\nEditorButton | Button |  not applicable\r\nSplitButton | Button |  not applicable\r\nCheckBox | ButtonBase |  **Is leaking**\r\nDockEditorCheckBox | CheckBox |  not applicable\r\n⚠️ RadioButton | ButtonBase |  **Is not leaking**\r\nColorPalette | Control |  not applicable\r\nColorUI | Control |  not applicable\r\nContainerPlaceholder | Control |  not applicable\r\nContentUI | Control |  not applicable\r\nControlPlaceholder | Control |  not applicable\r\n⚠️ DataGridView | Control |  **Is leaking** | #7347 \r\n⚠️ DateTimePicker | Control |  Is not leaking\r\nDateTimeUI | Control |  not applicable\r\nDesignerFrame | Control |  not applicable\r\nDockUI | Control |  not applicable\r\nGridToolTip | Control |  not applicable\r\n⚠️ GroupBox | Control |  **Is not leaking**\r\nSelectionUIService | Control |  not applicable\r\nScrollableControl | Control |  not applicable\r\nComponentTray | ScrollableControl |  not applicable\r\nContainerControl | ScrollableControl |  not applicable\r\nDesignerActionPanel | ContainerControl |  not applicable\r\nForm | ContainerControl |  not applicable\r\nBinaryUI | Form |  not applicable  \r\nCollectionForm | Form |  not applicable  \r\nCollectionEditorCollectionForm | CollectionForm |  not applicable  \r\nStringCollectionForm | CollectionForm |  not applicable    \r\nComponentEditorForm | Form |  not applicable  \r\nDataGridViewCellStyleBuilder | Form |  not applicable  \r\nDropDownHolder | Form |  not applicable  \r\nFormatStringDialog | Form |  not applicable  \r\nFlyoutDialog | Form |  not applicable  \r\nDropDownHolder | FlyoutDialog |  not applicable  \r\nGridErrorDialog | Form |  not applicable  \r\nPrintPreviewDialog | Form |  not applicable  \r\nStatusDialog | Form |  not applicable  \r\nThreadExceptionDialog | Form |  **Is not leaking**\r\nLinkAreaUI | Form |  not applicable  \r\nMaskDesignerDialog | Form |  not applicable\r\nMdiWindowDialog | Form |  not applicable\r\nParkingWindow | ContainerControl |  not applicable  \r\nPropertyGrid | ContainerControl |  **Is leaking** | https://github.com/dotnet/winforms/issues/6943\r\nSplitContainer | ContainerControl |  **Is not leaking**  \r\nToolStripContainer | ContainerControl |  **Is not leaking**  \r\nToolStripPanel | ContainerControl |  **Is not leaking**  \r\nUpDownBase | ContainerControl |  **Is not leaking**  \r\nDomainUpDown | UpDownBase |  **Is leaking** | https://github.com/dotnet/winforms/issues/7328\r\nNumericUpDown | UpDownBase |  **Is not leaking**  \r\nToolStripNumericUpDownControl | NumericUpDown |  not applicable  \r\nUserControl | ContainerControl |  not applicable  \r\nBorderSidesEditorUI | UserControl |  not applicable    \r\nFormatControl | UserControl |  not applicable  \r\nShortcutKeysUI | UserControl |  not applicable   \r\nMaskedTextBoxTextEditorDropDown | UserControl |  not applicable  \r\nOverlayControl | ScrollableControl |  not applicable  \r\nPanel | ScrollableControl |  **Is leaking**  \r\nComponentEditorPage | Panel |  not applicable  \r\nDataGridViewEditingPanel | Panel |  not applicable  \r\nFlowLayoutPanel | Panel |  not applicable  \r\nSplitterPanel | Panel |  **Is not leaking**   \r\n⚠️ TabPage | Panel |  **Is not leaking**\r\nTableLayoutPanel | Panel |  **Is not leaking**  \r\nByteViewer | TableLayoutPanel |  not applicable  \r\nToolStripContentPanel | Panel |  **Is not leaking**   \r\nToolStripEditorControl | Panel |  not applicable  \r\n⚠️ ToolStrip | ScrollableControl |  **Is not leaking**\r\nBindingNavigator | ToolStrip |  \r\nPropertyGridToolStrip | ToolStrip |  not applicable  \r\n⚠️ MenuStrip | ToolStrip |  **Is not leaking**\r\nMdiControlStrip | MenuStrip |  not applicable  \r\nMdiWindowListStrip | MenuStrip |  not applicable  \r\n⚠️ StatusStrip | ToolStrip |  **Is not leaking**\r\nToolStripDropDown | ToolStrip |  \r\nDesignerActionToolStripDropDown | ToolStripDropDown |  not applicable   \r\nFeedbackDropDown | ToolStripDropDown |  not applicable  \r\nToolStripDropDownMenu | ToolStripDropDown |  \r\nContextMenuStrip | ToolStripDropDownMenu |  \r\nGroupedContextMenuStrip | ContextMenuStrip |  not applicable  \r\nBaseContextMenuStrip | GroupedContextMenuStrip |  not applicable  \r\nNewItemsContextMenuStrip | GroupedContextMenuStrip |  not applicable  \r\nToolStripOverflow | ToolStripDropDown |  \r\nTransparentToolStrip | ToolStrip |  not applicable  \r\n⚠️ ScrollBar | Control |  not applicable\r\n⚠️ HScrollBar | ScrollBar |  **Is not leaking**\r\n⚠️ VScrollBar | ScrollBar |  **Is not leaking**\r\nSKWindow | Control |  not applicable  \r\nSpringControl | Control |  not applicable  \r\nSplitter | Control |  \r\n⚠️ Label | Control |  **Is not leaking**\r\nEditorLabel | Label |  not applicable  \r\n⚠️ LinkLabel | Label |  **Is not leaking**\r\nMethodItemLinkLabel | LinkLabel |  not applicable  \r\nStickyLabel | Label |  not applicable  \r\nListControl | Control |  not applicable  \r\n❓  ListBox | ListControl |  **Is leaking** | https://github.com/dotnet/winforms/issues/7197\r\n❓  CheckedListBox | ListBox |  **Is leaking**\r\nColorEditorListBox | ListBox |  not applicable  \r\nCursorUI | ListBox |  not applicable  \r\nGridViewListBox | ListBox |  not applicable  \r\nFilterListBox | ListBox |  not applicable  \r\nComboBox | ListControl |  **Is leaking** | https://github.com/dotnet/winforms/issues/7318\r\nDataGridViewComboBoxEditingControl | ComboBox |  \r\nToolStripComboBoxControl | ComboBox |  not applicable    \r\n⚠️ ListView | Control |  **Is leaking**\r\nMarshalingControl | Control |  not applicable      \r\nMdiClient | Control |  not applicable  \r\n❓ MonthCalendar | Control |  **Is leaking**  | https://github.com/dotnet/winforms/issues/6852\r\nDateTimeMonthCalendar | MonthCalendar |  \r\nRightToLeftLayoutGrip | Control |  not applicable    \r\nPictureBox | Control |  \r\nPrintPreviewControl | Control |  \r\n⚠️ ProgressBar | Control |  **Is not leaking**\r\nToolStripProgressBarControl | ProgressBar |  not applicable  \r\nPropertyGridView | Control |  not applicable  \r\nSnappableControl | Control |  not applicable  \r\nCommandsPane | PropertyGrid.SnappableControl |  not applicable  \r\nHelpPane | PropertyGrid.SnappableControl |  not applicable    \r\n⚠️ TabControl | Control |  **Is not leaking**\r\nColorEditorTabControl | TabControl |  **Is not leaking**  \r\nTabOrder | Control |  not applicable  \r\nTextBoxBase | Control |  not applicable  \r\n⚠️ RichTextBox | TextBoxBase |  **Is leaking**\r\nMultilineStringEditorUI | RichTextBox |  not applicable  \r\nTextBox | TextBoxBase |  Is leaking | https://github.com/dotnet/winforms/issues/7248\r\nGridViewTextBox | TextBox |  not applicable  \r\nDataGridViewTextBoxEditingControl | TextBox |  \r\nTemplateTextBox | TextBox |  \r\nToolStripTextBoxControl | TextBox |  not applicable  \r\nUpDownEdit | TextBox |  not applicable  \r\n⚠️ MaskedTextBox | TextBoxBase |  **Is leaking**\r\nToolStripAdornerWindow | Control |  not applicable  \r\n⚠️ TrackBar | Control |  **Is not leaking**\r\nTrayControl | Control |  not applicable  \r\n❓ TreeView | Control |  **Is leaking**  |  https://github.com/dotnet/winforms/issues/7196\r\nPageSelector | TreeView |  not applicable  \r\nSelector | TreeView |  not applicable  \r\nUpDownButtons | Control |  not applicable  \r\nWebBrowserBase | Control |  not applicable  \r\nWebBrowser | WebBrowserBase |  \r\n\r\n\r\n\r\n</body>\r\n\r\n</html>\r\n\r\n\r\n### Steps to reproduce\r\n\r\n1) Include a MemoryLeaks_Form to WinformsControlsTest (impemented in https://github.com/dkazennov/winforms/tree/MemoryLeaks_Form).\r\n2) Test each form with WinDbg and Inspect.","Url":"https://github.com/dotnet/winforms/issues/7329","RelatedDescription":"Open issue \"Control classes leaking memory\" (#7329)"},{"Id":"1278105692","IsPullRequest":false,"CreatedAt":"2022-06-21T08:42:17","Actor":"vladimir-krestov","Number":"7328","RawContent":null,"Title":"DomainUpDown and its elements accessible objects are leaking in memory","State":"open","Body":"### .NET version\n\n.NET 7.0 Preview 4\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nDomainUpDown items accessible objects are left in memory after the DomainUpDown control instance with its items was inspected with accessibility tool (like Accessibility Insights or Inspect) and the form with DomainUpDown is closed, garbage is collected, but accessibility tool is still opened. \r\n\r\nWinDbg snapshot after disposing:\r\n![image](https://user-images.githubusercontent.com/49272759/174756564-763eb20a-df5f-4b25-a66c-efe643f41186.png)\r\n\n\n### Steps to reproduce\n\nCreate a parent form with two buttons: one will be opening a child form with the DomainUpDown control and the other will collect the garbage.\r\nPress the second button to open the child form with DomainUpDown .\r\nStart the Accessibility Insights tools or Inspect.\r\nRun automated checks for the DomainUpDown control using AI/Inspect.\r\nClose the child form.\r\nClear memory with the first button of the parent form.\r\nDON'T close the AI/Inspect tool.\r\nLook for \"UpDown\" objects left in memory (using WinDbg, or dotMemory, or another suitable tool).","Url":"https://github.com/dotnet/winforms/issues/7328","RelatedDescription":"Open issue \"DomainUpDown and its elements accessible objects are leaking in memory\" (#7328)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-06-28T03:30:54.0447951Z","RunDurationInMilliseconds":530}