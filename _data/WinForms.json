{"Data":{"GitHub":{"Issues":[{"Id":"3197744528","IsPullRequest":false,"CreatedAt":"2025-07-03T02:21:09","Actor":"AraHaan","Number":"13670","RawContent":null,"Title":"[API Request] Add Question to TaskDialogIcon.","State":"open","Body":"### Background and motivation\n\nI find it a problem that ``TaskDialogIcon`` is missing ``Question`` with no direct *out-of-box* migration path for MessageBox's which use ``MessageBoxIcon.Question``.\n\n**Why not just embed the icon myself?**\nI feel like having to do something like this to get a 1:1 migration path away from the MessageBox API's *could* be simplified further if ``Question`` was added as a property to ``TaskDialogIcon``:\n```cs\ninternal static class MessageBoxIconExtensions\n{\n    internal static TaskDialogIcon ToTaskDialogIcon(this MessageBoxIcon icon)\n        => icon switch\n        {\n            MessageBoxIcon.Question => new(SystemIcons.Question),\n            MessageBoxIcon.Information => TaskDialogIcon.Information,\n            MessageBoxIcon.Warning => TaskDialogIcon.Warning,\n            MessageBoxIcon.Error => TaskDialogIcon.Error,\n            MessageBoxIcon.None => TaskDialogIcon.None,\n            _ => throw new NotSupportedException(\"bug!!!\"),\n        };\n}\n```\n\n### API Proposal\n\n```csharp\nnamespace System.Windows.Forms;\n\npublic class TaskDialogIcon : IDisposable\n{\n    // snipped existing properties for the icons.\n\n    public static readonly TaskDialogIcon Question = new(SystemIcons.Question); // added\n\n    // snipped existing code.\n}\n```\n\n\n### API Usage\n\n```csharp\ninternal static class MessageBoxIconExtensions\n{\n    internal static TaskDialogIcon ToTaskDialogIcon(this MessageBoxIcon icon)\n        => icon switch\n        {\n            MessageBoxIcon.Question => TaskDialogIcon.Question, // <-- new API used here.\n            MessageBoxIcon.Information => TaskDialogIcon.Information,\n            MessageBoxIcon.Warning => TaskDialogIcon.Warning,\n            MessageBoxIcon.Error => TaskDialogIcon.Error,\n            MessageBoxIcon.None => TaskDialogIcon.None,\n            _ => throw new NotSupportedException(\"bug!!!\"),\n        };\n}\n```\nAnd yes I actually use code similar to this in one of my programs and would love to eventually be able to share this piece of code inside of more of them to migrate them to ``TaskDialog`` as a free and cheap upgrade path.\n\n### Alternative Designs\n\nI have not thought of any other alternative API's as I feel that this member to TaskDialogIcon would be the best idea as having a 1:1 migration path for 100% of all use cases for ``MessageBox`` -> ``TaskDialog`` *should* be worth investing in.\n\n### Risks\n\nMinimal as this would help people migrate 100% away from ``MessageBox`` and into ``TaskDialog`` which can be customized much better than ``MessageBox``. Also existing code that uses ``new TaskDialogIcon(SystemIcons.Question)`` can also be detected by the Windows Forms analyzer when used outside of the Windows Forms codebase to then suggest the change to use ``TaskDialogIcon.Question`` instead. Also with this it *could* become possible to then add ``[Obsolete]`` to the ``MessageBox`` class and possibly also remove it from winforms in a future version of .NET in favor of ``TaskDialog`` (on the reference assembly side with the runtime implementation being stubs to ``TaskDialog`` instead to not break existing applications).\n\n### Will this feature affect UI controls?\n\nI do not think this feature would affect any of the UI controls, would need to be localized, or even impact accessibility.","Url":"https://github.com/dotnet/winforms/issues/13670","RelatedDescription":"Open issue \"[API Request] Add Question to TaskDialogIcon.\" (#13670)"},{"Id":"3197723236","IsPullRequest":true,"CreatedAt":"2025-07-03T02:07:27","Actor":"dotnet-maestro[bot]","Number":"13669","RawContent":null,"Title":"[main] Source code updates from dotnet/dotnet","State":"open","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [81d064a4-929c-4152-b746-ee3acc24b4ed](https://maestro.dot.net/subscriptions?search=81d064a4-929c-4152-b746-ee3acc24b4ed)\n- **Build**: [20250701.6](https://dev.azure.com/dnceng/internal/_build/results?buildId=2741398)\n- **Date Produced**: July 2, 2025 9:28:11 AM UTC\n- **Commit**: [eaa19c281d34580a8168cff9ce1e7337da8bfe4f](https://github.com/dotnet/dotnet/commit/eaa19c281d34580a8168cff9ce1e7337da8bfe4f)\n- **Commit Diff**: [df4663b...eaa19c2](https://github.com/dotnet/dotnet/compare/df4663b92c2f2d25b66e44524478d9016c812949...eaa19c281d34580a8168cff9ce1e7337da8bfe4f)\n- **Branch**: main\n\n**Updated Dependencies**\n- From [10.0.0-preview.7.25351.105 to 10.0.0-preview.7.25351.106][1]\n  - Microsoft.NET.Sdk.IL\n  - Microsoft.NETCore.App.Ref\n  - Microsoft.NETCore.ILAsm\n  - Microsoft.NETCore.ILDAsm\n  - Microsoft.NETCore.Platforms\n  - Microsoft.Win32.SystemEvents\n  - runtime.win-x64.Microsoft.NETCore.ILAsm\n  - runtime.win-x86.Microsoft.NETCore.ILAsm\n  - System.CodeDom\n  - System.Configuration.ConfigurationManager\n  - System.Formats.Nrbf\n  - System.IO.Hashing\n  - System.Reflection.MetadataLoadContext\n  - System.Resources.Extensions\n  - System.Runtime.Serialization.Formatters\n  - System.Text.Encodings.Web\n  - System.Text.Json\n  - System.Windows.Extensions\n- From [10.0.0-beta.25351.105 to 10.0.0-beta.25351.106][1]\n  - Microsoft.DotNet.Arcade.Sdk\n  - Microsoft.DotNet.CMake.Sdk\n  - Microsoft.DotNet.GenFacades\n  - Microsoft.DotNet.Helix.Sdk\n  - Microsoft.DotNet.RemoteExecutor\n  - Microsoft.DotNet.XUnitV3Extensions\n\n[marker]: <> (End:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n[1]: https://github.com/dotnet/dotnet/compare/df4663b92c...eaa19c281d\n[marker]: <> (Start:Footer:CodeFlow PR)\n\n## Associated changes in source repos\n- https://github.com/dotnet/sdk/compare/0e9898bbc2834154ba0afdfb8372acd02d39ef01...4177291d4d3dabd5341239d01b3e844125659304\n\n[marker]: <> (End:Footer:CodeFlow PR)\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13669)","Url":"https://github.com/dotnet/winforms/pull/13669","RelatedDescription":"Open PR \"[main] Source code updates from dotnet/dotnet\" (#13669)"},{"Id":"3197555117","IsPullRequest":false,"CreatedAt":"2025-07-03T00:36:07","Actor":"dotnet-maestro-bot","Number":"13668","RawContent":null,"Title":"[dnceng-bot] Branch `winforms/release/9.0` can't be merged to Azdo internal branch","State":"open","Body":"Branch [release/9.0](https://github.com/dotnet/winforms/commits/release/9.0/) in `dotnet/winforms` repo can't be mirrored from GitHub to Azure [internal/release/9.0](https://dev.azure.com/dnceng/internal/_git/dotnet-winforms?version=GBinternal%2Frelease%2F9.0&_a=history) via internal merge. \n\nThere are conflicting commits in the target branch.\nThe branch is configured to be mirrored via automated merge. \nThe situation is rare but normal. The target branch is expected to receive manual commits in the Azure DevOps clone, which could cause conflict.\n\nConflicts need to be **resolved to unblock the code flow**.\n\n- you can resolve the issue by resolving the conflict in the **target branch only**. \n    - Please make sure that the changes sensitive from security perspective are not published ahead of time to GitHub!\n- reverting the extra commits in the Azdo target branch.\n- checking the logs of the mirroring process in the [mirroring pipeline](https://dev.azure.com/dnceng/internal/_build?definitionId=1387).\n- you can disable the mirroring of the branch in the [configuration file](https://dev.azure.com/dnceng/internal/_git/dotnet-mirroring?path=/dnceng-subscriptions.jsonc).\n- you can ask @dotnet/dnceng for help or read the [documentation](https://dev.azure.com/dnceng/internal/_git/dotnet-mirroring?path=/README.md).\n\nPlease close this issue once the conflict is resolved.","Url":"https://github.com/dotnet/winforms/issues/13668","RelatedDescription":"Open issue \"[dnceng-bot] Branch `winforms/release/9.0` can't be merged to Azdo internal branch\" (#13668)"},{"Id":"3169970816","IsPullRequest":true,"CreatedAt":"2025-07-03T00:34:39","Actor":"dotnet-maestro[bot]","Number":"13643","RawContent":null,"Title":"[release/9.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:92989bf7-cdf9-483d-64c5-08dcbc356d11)\n## From https://github.com/dotnet/arcade\n- **Subscription**: [92989bf7-cdf9-483d-64c5-08dcbc356d11](https://maestro.dot.net/subscriptions?search=92989bf7-cdf9-483d-64c5-08dcbc356d11)\n- **Build**: [20250625.4](https://dev.azure.com/dnceng/internal/_build/results?buildId=2737323)\n- **Date Produced**: June 25, 2025 4:32:11 PM UTC\n- **Commit**: [13b20849f8294593bf150a801cab639397e6c29d](https://github.com/dotnet/arcade/commit/13b20849f8294593bf150a801cab639397e6c29d)\n- **Branch**: refs/heads/release/9.0\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 9.0.0-beta.25302.2 to 9.0.0-beta.25325.4][2]\n  - **Microsoft.DotNet.CMake.Sdk**: [from 9.0.0-beta.25302.2 to 9.0.0-beta.25325.4][2]\n  - **Microsoft.DotNet.GenFacades**: [from 9.0.0-beta.25302.2 to 9.0.0-beta.25325.4][2]\n  - **Microsoft.DotNet.Helix.Sdk**: [from 9.0.0-beta.25302.2 to 9.0.0-beta.25325.4][2]\n  - **Microsoft.DotNet.RemoteExecutor**: [from 9.0.0-beta.25302.2 to 9.0.0-beta.25325.4][2]\n  - **Microsoft.DotNet.XUnitExtensions**: [from 9.0.0-beta.25302.2 to 9.0.0-beta.25325.4][2]\n\n[2]: https://github.com/dotnet/arcade/compare/0d52a8b262...13b20849f8\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:92989bf7-cdf9-483d-64c5-08dcbc356d11)\n\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13643)\n\n\n","Url":"https://github.com/dotnet/winforms/pull/13643","RelatedDescription":"Closed or merged PR \"[release/9.0] Update dependencies from dotnet/arcade\" (#13643)"},{"Id":"3186954028","IsPullRequest":false,"CreatedAt":"2025-07-02T20:58:03","Actor":"JohnyL","Number":"13664","RawContent":null,"Title":".NET 10 Preview 5: DoDragDrop method returns incorrect value","State":"closed","Body":"### Description\n\nI have a simple Windows Forms application which allows to drag text from label and drop to textbox. The text does appear in the textbox after dragging and dropping. However, the value of `effect` for some reason was `None`, and I got `Drop failed` message. I decided to check .NET 9 - everything works. Only in .NET 10 it fails to get correct value.\n\n### Reproduction Steps\n\n1. Run code below.\n2. Drag text from label to textbox.\n3. The text \"LABEL TEXT\" must appear in the textbox.\n4. Message `Data has been copied!` must appear.\n\nFull form code with all necessary elements:\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Windows.Forms;\n\nnamespace DragAndDrop\n{\n\n  public partial class Form1 : Form\n  {\n\n    /// <summary>\n    /// The main entry point for the application.\n    /// </summary>\n    [STAThread]\n    static void Main()\n    {\n      Application.EnableVisualStyles();\n      Application.SetCompatibleTextRenderingDefault(false);\n      Application.Run(new Form1());\n    }\n\n    /// <summary>\n    /// Required designer variable.\n    /// </summary>\n    private System.ComponentModel.IContainer components = null;\n\n    /// <summary>\n    /// Clean up any resources being used.\n    /// </summary>\n    /// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>\n    protected override void Dispose(bool disposing)\n    {\n      if (disposing && (components != null))\n      {\n        components.Dispose();\n      }\n      base.Dispose(disposing);\n    }\n\n    #region Windows Form Designer generated code\n\n    /// <summary>\n    /// Required method for Designer support - do not modify\n    /// the contents of this method with the code editor.\n    /// </summary>\n    private void InitializeComponent()\n    {\n      this.label1 = new System.Windows.Forms.Label();\n      this.textBox1 = new System.Windows.Forms.TextBox();\n      this.SuspendLayout();\n      // \n      // label1\n      // \n      this.label1.AutoSize = true;\n      this.label1.Location = new System.Drawing.Point(142, 43);\n      this.label1.Name = \"label1\";\n      this.label1.Size = new System.Drawing.Size(71, 13);\n      this.label1.TabIndex = 0;\n      this.label1.Text = \"LABEL TEXT\";\n      this.label1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.OnLabelMouseDown);\n      // \n      // textBox1\n      // \n      this.textBox1.AllowDrop = true;\n      this.textBox1.Location = new System.Drawing.Point(12, 36);\n      this.textBox1.Name = \"textBox1\";\n      this.textBox1.Size = new System.Drawing.Size(100, 20);\n      this.textBox1.TabIndex = 1;\n      this.textBox1.DragDrop += new System.Windows.Forms.DragEventHandler(this.OnTextBoxDragDrop);\n      this.textBox1.DragOver += new System.Windows.Forms.DragEventHandler(this.OnTextBoxDragOver);\n      // \n      // Form1\n      // \n      this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n      this.ClientSize = new System.Drawing.Size(358, 190);\n      this.Controls.Add(this.textBox1);\n      this.Controls.Add(this.label1);\n      this.Name = \"Form1\";\n      this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;\n      this.Text = \"Drag and Drop Test\";\n      this.ResumeLayout(false);\n      this.PerformLayout();\n\n    }\n\n    #endregion\n\n    private System.Windows.Forms.Label label1;\n    private System.Windows.Forms.TextBox textBox1;\n\n\n    public Form1()\n    {\n      InitializeComponent();\n    }\n\n    private void OnLabelMouseDown(object sender, MouseEventArgs e)\n    {\n      DragDropEffects effect = label1.DoDragDrop(label1.Text, DragDropEffects.Copy);\n      if (effect == DragDropEffects.Copy)\n      {\n        MessageBox.Show(\"Data has been copied!\");\n      }\n      else\n      {\n        MessageBox.Show(\"Drop failed\");\n      }\n    }\n\n    private void OnTextBoxDragOver(object sender, DragEventArgs e)\n    {\n      e.Effect = DragDropEffects.Copy;\n    }\n\n    private void OnTextBoxDragDrop(object sender, DragEventArgs e)\n    {\n      textBox1.Text = e.Data.GetData(\"Text\").ToString();\n      e.Effect = DragDropEffects.Copy;\n    }\n\n  }\n}\n```\n\n### Expected behavior\n\n`DoDragDrop` must return  `DragDropEffects.Copy` value.\n\n### Actual behavior\n\n`DoDragDrop` returns  `DragDropEffects.None` value.\n\n### Regression?\n\nIt works in .NET 9.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n• Which version of .NET is the code running on? **.NET 10.0.100-preview.5.25277.114**\n• What OS and version, and what distro if applicable? **Windows 10 Home**\n• What is the architecture (x64, x86, ARM, ARM64)? **x64**\n• Do you know whether it is specific to that configuration? **No specific configuration**\n• If you're using Blazor, which web browser(s) do you see this issue in? **No Blazor**\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/13664","RelatedDescription":"Closed issue \".NET 10 Preview 5: DoDragDrop method returns incorrect value\" (#13664)"},{"Id":"3194283551","IsPullRequest":true,"CreatedAt":"2025-07-02T09:45:49","Actor":"dotnet-maestro[bot]","Number":"13666","RawContent":null,"Title":"[main] Source code updates from dotnet/dotnet","State":"closed","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [81d064a4-929c-4152-b746-ee3acc24b4ed](https://maestro.dot.net/subscriptions?search=81d064a4-929c-4152-b746-ee3acc24b4ed)\n- **Build**: [20250701.5](https://dev.azure.com/dnceng/internal/_build/results?buildId=2741231)\n- **Date Produced**: July 2, 2025 1:07:44 AM UTC\n- **Commit**: [df4663b92c2f2d25b66e44524478d9016c812949](https://github.com/dotnet/dotnet/commit/df4663b92c2f2d25b66e44524478d9016c812949)\n- **Commit Diff**: [2fd058a...df4663b](https://github.com/dotnet/dotnet/compare/2fd058a2011cf1842cb3a42531e34987e948602e...df4663b92c2f2d25b66e44524478d9016c812949)\n- **Branch**: main\n\n**Updated Dependencies**\n- From [10.0.0-preview.7.25330.103 to 10.0.0-preview.7.25351.105][1]\n  - Microsoft.NET.Sdk.IL\n  - Microsoft.NETCore.App.Ref\n  - Microsoft.NETCore.ILAsm\n  - Microsoft.NETCore.ILDAsm\n  - Microsoft.NETCore.Platforms\n  - Microsoft.Win32.SystemEvents\n  - runtime.win-x64.Microsoft.NETCore.ILAsm\n  - runtime.win-x86.Microsoft.NETCore.ILAsm\n  - System.CodeDom\n  - System.Configuration.ConfigurationManager\n  - System.Formats.Nrbf\n  - System.IO.Hashing\n  - System.Reflection.MetadataLoadContext\n  - System.Resources.Extensions\n  - System.Runtime.Serialization.Formatters\n  - System.Text.Encodings.Web\n  - System.Text.Json\n  - System.Windows.Extensions\n- From [10.0.0-beta.25330.103 to 10.0.0-beta.25351.105][1]\n  - Microsoft.DotNet.Arcade.Sdk\n  - Microsoft.DotNet.CMake.Sdk\n  - Microsoft.DotNet.GenFacades\n  - Microsoft.DotNet.Helix.Sdk\n  - Microsoft.DotNet.RemoteExecutor\n  - Microsoft.DotNet.XUnitV3Extensions\n\n[marker]: <> (End:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n[1]: https://github.com/dotnet/dotnet/compare/2fd058a201...df4663b92c\n[marker]: <> (Start:Footer:CodeFlow PR)\n\n## Associated changes in source repos\n- https://github.com/dotnet/efcore/compare/6b700794951d639726dbe4ccdd420723a1b4ce0a...14b439c0bcf7cb81899457e4cbd14640cc365578\n- https://github.com/dotnet/fsharp/compare/44a24dcd6677639f3b62e361d99f6495175dc49f...7346d84a24dd15155d74f8179788a423cbdd962a\n- https://github.com/dotnet/msbuild/compare/faa2ec8d4839e837b99f2527b30353d3e89f98ca...0e2431add8a483acfd985c6fdd352ebfcade6755\n- https://github.com/dotnet/razor/compare/1b931e8879948986442ab29949ca57edcea58ac9...58de0c1a5c1fadf56a848dd45d91440ae041e22c\n- https://github.com/dotnet/runtime/compare/b97f98b7bdd339ee3424e81ec0cfe4b40590268e...61f2ad644f82a7208eb925bedc3bae49754e4440\n- https://github.com/dotnet/sourcelink/compare/634059dd61cb2de8a5fbed786093790a78ce0de7...3e1ad8d7d7799cfa18eca11b0c071eec3395b0c1\n- https://github.com/dotnet/templating/compare/0e87747d1d3cf64745bc64ec821144054a9b7800...bbbcb1d9bb33264e618581165807fd59c2ffa3f4\n- https://github.com/dotnet/windowsdesktop/compare/c4c3cd1ffcc1983e176d0c00b12d0f2c0a9b5ad2...3406b151b95d3c15cb98e038a05583fc865c575b\n\n[marker]: <> (End:Footer:CodeFlow PR)\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13666)","Url":"https://github.com/dotnet/winforms/pull/13666","RelatedDescription":"Closed or merged PR \"[main] Source code updates from dotnet/dotnet\" (#13666)"},{"Id":"3195024608","IsPullRequest":true,"CreatedAt":"2025-07-02T08:16:17","Actor":"Zheng-Li01","Number":"13667","RawContent":null,"Title":"Add code coverage for DataGridViewButtonCell","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/13442\r\n\r\n## Proposed changes\r\nAdd unit test file:DataGridViewButtonCellTest.cs for public/protected methods of the DataGridViewButtonCellcs\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13667)","Url":"https://github.com/dotnet/winforms/pull/13667","RelatedDescription":"Open PR \"Add code coverage for DataGridViewButtonCell\" (#13667)"},{"Id":"3184450740","IsPullRequest":true,"CreatedAt":"2025-07-01T23:41:34","Actor":"dotnet-maestro[bot]","Number":"13663","RawContent":null,"Title":"[main] Source code updates from dotnet/dotnet","State":"closed","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n\n[marker]: <> (Begin:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [81d064a4-929c-4152-b746-ee3acc24b4ed](https://maestro.dot.net/subscriptions?search=81d064a4-929c-4152-b746-ee3acc24b4ed)\n- **Build**: [20250630.3](https://dev.azure.com/dnceng/internal/_build/results?buildId=2740513)\n- **Date Produced**: July 1, 2025 1:07:04 AM UTC\n- **Commit**: [2fd058a2011cf1842cb3a42531e34987e948602e](https://github.com/dotnet/dotnet/commit/2fd058a2011cf1842cb3a42531e34987e948602e)\n- **Commit Diff**: [1bc437c...2fd058a](https://github.com/dotnet/dotnet/compare/1bc437cd77614e60dc6068da6cffeaae1804c72e...2fd058a2011cf1842cb3a42531e34987e948602e)\n- **Branch**: main\n\n**Updated Dependencies**\n- From [10.0.0-preview.7.25326.109 to 10.0.0-preview.7.25330.103][2]\n  - Microsoft.NET.Sdk.IL\n  - Microsoft.NETCore.App.Ref\n  - Microsoft.NETCore.ILAsm\n  - Microsoft.NETCore.ILDAsm\n  - Microsoft.NETCore.Platforms\n  - Microsoft.Win32.SystemEvents\n  - runtime.win-x64.Microsoft.NETCore.ILAsm\n  - runtime.win-x86.Microsoft.NETCore.ILAsm\n  - System.CodeDom\n  - System.Configuration.ConfigurationManager\n  - System.Formats.Nrbf\n  - System.IO.Hashing\n  - System.Reflection.MetadataLoadContext\n  - System.Resources.Extensions\n  - System.Runtime.Serialization.Formatters\n  - System.Text.Encodings.Web\n  - System.Text.Json\n  - System.Windows.Extensions\n- From [10.0.0-beta.25326.109 to 10.0.0-beta.25330.103][2]\n  - Microsoft.DotNet.Arcade.Sdk\n  - Microsoft.DotNet.CMake.Sdk\n  - Microsoft.DotNet.GenFacades\n  - Microsoft.DotNet.Helix.Sdk\n  - Microsoft.DotNet.RemoteExecutor\n  - Microsoft.DotNet.XUnitV3Extensions\n\n[marker]: <> (End:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n\n[1]: https://github.com/dotnet/dotnet/compare/1bc437cd77...72e8593d62\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13663)\n[2]: https://github.com/dotnet/dotnet/compare/1bc437cd77...2fd058a201\n[marker]: <> (Start:Footer:CodeFlow PR)\n\n## Associated changes in source repos\n- https://github.com/dotnet/arcade/compare/f70d32d77df8544117bd659512a9087619c1de6e...0e335649fe2d2f98ea51e55cc1a0899af3617eba\n- https://github.com/dotnet/aspnetcore/compare/f2353d2504c8c575bc0df9a5c8490aa5e2526e62...9e69f19a5c7efa19577627a62c029ff387810d50\n- https://github.com/dotnet/diagnostics/compare/c80de30e0d582df0c6fb9b24e8b10c3a78c97161...e32a259690378945a52bc8ac5cc5e302d9beb193\n- https://github.com/dotnet/efcore/compare/c5313b0e8dc19d6d43897c6b8a37129563e13353...6b700794951d639726dbe4ccdd420723a1b4ce0a\n- https://github.com/dotnet/msbuild/compare/1269b69cb11a3169aa0e44d68698fe157cf26869...faa2ec8d4839e837b99f2527b30353d3e89f98ca\n- https://github.com/dotnet/razor/compare/c60ff6979c94e41675d9f092e2e9161ef2e41493...1b931e8879948986442ab29949ca57edcea58ac9\n- https://github.com/dotnet/roslyn-analyzers/compare/aabbaa2c6459fd586ad4258c8bd6059dac8ba4e6...62b0e094420a1f93d32ecb338aff8ad498ec9cd5\n- https://github.com/dotnet/runtime/compare/c158ff4424d3d7e330ccc98fffc55225238e7d32...b97f98b7bdd339ee3424e81ec0cfe4b40590268e\n- https://github.com/dotnet/templating/compare/47d652fd0d57f213226c192f551be66bd5955915...0e87747d1d3cf64745bc64ec821144054a9b7800\n- https://github.com/dotnet/windowsdesktop/compare/37ba7be40a4af897f1d390d44fc416000c31ed24...c4c3cd1ffcc1983e176d0c00b12d0f2c0a9b5ad2\n- https://github.com/dotnet/wpf/compare/52e2951b4519ef469bb18045bcd2b47a9a804c05...28843aafcedc8299336ae470c868f842a4ca52b4\n- https://github.com/dotnet/xdt/compare/0522205e7ee27c529c3253b51cae0b0b96a32f9a...0d66c1314c16a831f1289b1e4b1adbe0d8b94404\n\n[marker]: <> (End:Footer:CodeFlow PR)","Url":"https://github.com/dotnet/winforms/pull/13663","RelatedDescription":"Closed or merged PR \"[main] Source code updates from dotnet/dotnet\" (#13663)"},{"Id":"3169833855","IsPullRequest":true,"CreatedAt":"2025-07-01T07:11:44","Actor":"KlausLoeffelmann","Number":"13642","RawContent":null,"Title":"Extend DarkMode opt-out option for multiple descendant scenarios.","State":"closed","Body":"When a control wants to automatically participate in DarkMode handling, it does so by setting the `ControlStyles.ApplyThemingImplicitly` flag first thing in the overridden property `CreateParams`.\r\n\r\nFor custom control controls, which derive von other controls than controls, and which in addition have already opted in (like `ButtonBase`) in to auto-DarkMode handling, this PR makes it possible for a control to opt out in the same way.\r\n\r\nTo this end, the derived custom control _also_ needs to overwrite the `CreateParams` property, and then needs to clear the `ApplyThemingImplicitly` flag the first thing before calling the base implementation:\r\n\r\n```csharp\r\n// In CreateParams, do this first to opt an inherited control out of dark mode handling:\r\nSetFlags(ControlStyles.ApplyThemingImplicitly, false);\r\n```\r\n\r\nNote: It may seem redundant, but it's important to clear that flag, even if it can be assumed at this point that the flag has never been set before!\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13642)","Url":"https://github.com/dotnet/winforms/pull/13642","RelatedDescription":"Closed or merged PR \"Extend DarkMode opt-out option for multiple descendant scenarios.\" (#13642)"},{"Id":"3187933024","IsPullRequest":true,"CreatedAt":"2025-06-30T10:16:18","Actor":"LeafShi1","Number":"13665","RawContent":null,"Title":"Override the name property of the MonthCalendarAccessibleObject","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #13657\r\n\r\n## Root Cause\r\n\r\n1. The date in the calendar is not an independent control. NVDA cannot focus on the specific date cell, \r\n2. Although MSAA notifications are sent, but NVDA can only announce the `Name` of the `MonthCalendarAccessibleObject`, it cannot announce the `Value` of the `MonthCalendarAccessibleObject`\r\n\r\n## Proposed changes\r\n\r\n- Override the name property of `MonthCalendarAccessibleObject`, and output the `Value` content in `Name` to ensure that NVDA can read it normally\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- When switching calendar dates using the keyboard, the screen reader can correctly read the date information in the calendar table\r\n\r\n\r\n## Regression? \r\n\r\n-  No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\nScreen Reader user will not be able understand the correct data information while navigating on calendar. \r\n\r\nhttps://github.com/user-attachments/assets/e189d65a-3a1e-4c98-8370-bda95e7d26e0\r\n\r\n### After\r\n\r\n![AfterChange](https://github.com/user-attachments/assets/838c5356-0eb7-413f-b595-bdc4dbf5c9d6)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- 10.0.0-preview.7.25320.118\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13665)","Url":"https://github.com/dotnet/winforms/pull/13665","RelatedDescription":"Open PR \"Override the name property of the MonthCalendarAccessibleObject\" (#13665)"},{"Id":"3182085305","IsPullRequest":true,"CreatedAt":"2025-06-27T09:24:18","Actor":"Epica3055","Number":"13662","RawContent":null,"Title":"fix #13599 A warning dialog pops up when trying to switch the values for the FormScreenCaptureMode property","State":"open","Body":"\r\n\r\nFixes #13599 \r\n\r\n## Root Cause\r\nAt design time TopLevel is false\r\n``` c#\r\n    public ScreenCaptureMode FormScreenCaptureMode\r\n    {\r\n        get => Properties.GetValueOrDefault(s_propFormScreenCaptureMode, ScreenCaptureMode.Allow);\r\n        set\r\n        {\r\n            if (FormScreenCaptureMode == value)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (!TopLevel)\r\n            {\r\n                throw new InvalidOperationException(SR.FormScreenCaptureModeRequiresTopLevel);\r\n            }\r\n\r\n            SourceGenerated.EnumValidator.Validate(value);\r\n            Properties.AddOrRemoveValue(s_propFormScreenCaptureMode, value);\r\n\r\n            if (IsHandleCreated)\r\n            {\r\n                SetScreenCaptureModeInternal(value);\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- Add another condition to check if the control is in design mode\r\n- \r\n\r\n<!-- \r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n\r\n\r\n## Screenshots \r\n### Before\r\n\r\n\r\n### After\r\n\r\n\r\n## Test methodology \r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  \r\n\r\n\r\n## Test environment(s)\r\n\r\n -->\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13662)","Url":"https://github.com/dotnet/winforms/pull/13662","RelatedDescription":"Open PR \"fix #13599 A warning dialog pops up when trying to switch the values for the FormScreenCaptureMode property\" (#13662)"},{"Id":"3181081537","IsPullRequest":true,"CreatedAt":"2025-06-27T02:55:37","Actor":"dotnet-maestro[bot]","Number":"13661","RawContent":null,"Title":"[main] Source code updates from dotnet/dotnet","State":"closed","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [81d064a4-929c-4152-b746-ee3acc24b4ed](https://maestro.dot.net/subscriptions?search=81d064a4-929c-4152-b746-ee3acc24b4ed)\n- **Build**: [20250626.9](https://dev.azure.com/dnceng/internal/_build/results?buildId=2738103)\n- **Date Produced**: June 26, 2025 10:08:00 PM UTC\n- **Commit**: [1bc437cd77614e60dc6068da6cffeaae1804c72e](https://github.com/dotnet/dotnet/commit/1bc437cd77614e60dc6068da6cffeaae1804c72e)\n- **Commit Diff**: [7cd445e...1bc437c](https://github.com/dotnet/dotnet/compare/7cd445ec6160e1edbe0c96caa5aa395822403d7f...1bc437cd77614e60dc6068da6cffeaae1804c72e)\n- **Branch**: main\n\n**Updated Dependencies**\n- From [10.0.0-preview.7.25325.106 to 10.0.0-preview.7.25326.109][1]\n  - Microsoft.NET.Sdk.IL\n  - Microsoft.NETCore.App.Ref\n  - Microsoft.NETCore.ILAsm\n  - Microsoft.NETCore.ILDAsm\n  - Microsoft.NETCore.Platforms\n  - Microsoft.Win32.SystemEvents\n  - runtime.win-x64.Microsoft.NETCore.ILAsm\n  - runtime.win-x86.Microsoft.NETCore.ILAsm\n  - System.CodeDom\n  - System.Configuration.ConfigurationManager\n  - System.Formats.Nrbf\n  - System.IO.Hashing\n  - System.Reflection.MetadataLoadContext\n  - System.Resources.Extensions\n  - System.Runtime.Serialization.Formatters\n  - System.Text.Encodings.Web\n  - System.Text.Json\n  - System.Windows.Extensions\n- From [10.0.0-beta.25325.106 to 10.0.0-beta.25326.109][1]\n  - Microsoft.DotNet.Arcade.Sdk\n  - Microsoft.DotNet.CMake.Sdk\n  - Microsoft.DotNet.GenFacades\n  - Microsoft.DotNet.Helix.Sdk\n  - Microsoft.DotNet.RemoteExecutor\n  - Microsoft.DotNet.XUnitV3Extensions\n\n[marker]: <> (End:81d064a4-929c-4152-b746-ee3acc24b4ed)\n\n[1]: https://github.com/dotnet/dotnet/compare/7cd445ec61...1bc437cd77\n[marker]: <> (Start:Footer:CodeFlow PR)\n\n## Associated changes in source repos\n- https://github.com/dotnet/arcade/compare/5fe468883c4a203f57a1b163167e61a24748625a...f70d32d77df8544117bd659512a9087619c1de6e\n- https://github.com/dotnet/deployment-tools/compare/ea2bdda50b4e66d7e7d877b37eeea5974693c6a1...1478b7e6938013629e182b0656bfbde04d367cc5\n- https://github.com/dotnet/efcore/compare/d2e60e7fdb8676964c56115e53449564a256632b...c5313b0e8dc19d6d43897c6b8a37129563e13353\n- https://github.com/dotnet/msbuild/compare/21e814e9460cc3323848c1132eca4e72cf051a5f...1269b69cb11a3169aa0e44d68698fe157cf26869\n- https://github.com/dotnet/runtime/compare/53924485e03b81f0ae87651e19b89d2a71c136fe...c158ff4424d3d7e330ccc98fffc55225238e7d32\n\n[marker]: <> (End:Footer:CodeFlow PR)\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13661)","Url":"https://github.com/dotnet/winforms/pull/13661","RelatedDescription":"Closed or merged PR \"[main] Source code updates from dotnet/dotnet\" (#13661)"},{"Id":"3180979344","IsPullRequest":true,"CreatedAt":"2025-06-27T02:13:09","Actor":"dotnet-maestro[bot]","Number":"13660","RawContent":null,"Title":"[release/10.0-preview6] Source code updates from dotnet/dotnet","State":"closed","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:bbf25048-a2e8-41c6-92da-d9b3c980e1cc)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [bbf25048-a2e8-41c6-92da-d9b3c980e1cc](https://maestro.dot.net/subscriptions?search=bbf25048-a2e8-41c6-92da-d9b3c980e1cc)\n- **Build**: [20250626.7](https://dev.azure.com/dnceng/internal/_build/results?buildId=2738050)\n- **Date Produced**: June 26, 2025 11:04:41 PM UTC\n- **Commit**: [6b71c64e75168c7704e2e789c7920a3b681af364](https://github.com/dotnet/dotnet/commit/6b71c64e75168c7704e2e789c7920a3b681af364)\n- **Commit Diff**: [64d9c42...6b71c64](https://github.com/dotnet/dotnet/compare/64d9c42b575a172d2ea77297ce80b149557094ec...6b71c64e75168c7704e2e789c7920a3b681af364)\n- **Branch**: release/10.0.1xx-preview6\n\n**Updated Dependencies**\n- From [10.0.0-preview.6.25324.105 to 10.0.0-preview.6.25326.107][1]\n  - Microsoft.NET.Sdk.IL\n  - Microsoft.NETCore.App.Ref\n  - Microsoft.NETCore.ILAsm\n  - Microsoft.NETCore.ILDAsm\n  - Microsoft.NETCore.Platforms\n  - Microsoft.Win32.SystemEvents\n  - runtime.win-x64.Microsoft.NETCore.ILAsm\n  - runtime.win-x86.Microsoft.NETCore.ILAsm\n  - System.CodeDom\n  - System.Configuration.ConfigurationManager\n  - System.Formats.Nrbf\n  - System.IO.Hashing\n  - System.Reflection.MetadataLoadContext\n  - System.Resources.Extensions\n  - System.Runtime.Serialization.Formatters\n  - System.Text.Encodings.Web\n  - System.Text.Json\n  - System.Windows.Extensions\n- From [10.0.0-beta.25324.105 to 10.0.0-beta.25326.107][1]\n  - Microsoft.DotNet.Arcade.Sdk\n  - Microsoft.DotNet.CMake.Sdk\n  - Microsoft.DotNet.GenFacades\n  - Microsoft.DotNet.Helix.Sdk\n  - Microsoft.DotNet.RemoteExecutor\n  - Microsoft.DotNet.XUnitV3Extensions\n\n[marker]: <> (End:bbf25048-a2e8-41c6-92da-d9b3c980e1cc)\n\n[1]: https://github.com/dotnet/dotnet/compare/64d9c42b57...6b71c64e75\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13660)","Url":"https://github.com/dotnet/winforms/pull/13660","RelatedDescription":"Closed or merged PR \"[release/10.0-preview6] Source code updates from dotnet/dotnet\" (#13660)"},{"Id":"3179670709","IsPullRequest":false,"CreatedAt":"2025-06-26T16:33:05","Actor":"cogkandrade","Number":"13658","RawContent":null,"Title":"AxHost keeping parent alive","State":"closed","Body":"### .NET version\n\n.Net 8\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nThe container of an AxHost never gets garbage collected. We originally discovered this while investigating a GDI Object leak, which is a manifestation of the container never getting collected.\n\nThis is the same issue as https://github.com/dotnet/winforms/issues/13499 and the \"solution\" to that one did not work.\n\n\n### Steps to reproduce\n\nThe attached projects demonstrate the issue by tracking when the container is constructed, disposed and finalized. The three projects are:\nActiveXControl_MFC - an MFC project that builds an ocx; the post-build step registers it (requires Visual Studio 2022 run as admin) and creates an interop assembly\nAxHostContainer - a .NET 8 project that contains the AxHost\nAxHostContainer_Framework48 - a .NET Framework 4.8 project that contains the AxHost\nThe AxHostContainer projects are identical, except for the targeted .NET platform.\n\nRunning AxHostContainer apps:\nThe AxHostContainer apps effectively execute four cases, two on .NET 8 and the same two repeated on .NET Framework 4.8. Each of the four cases open and close a Form multiple times.\n\n```\n\tWithout AxHost\tWith AxHost\n.NET 8        +             x\n.NET FW       +             +\n```\n\nOnly the .NET 8 With AxHost case exhibits the bad behavior where the finalizers fail to execute.\n\n[AxHostLeak.zip](https://github.com/user-attachments/files/20367779/AxHostLeak.zip)","Url":"https://github.com/dotnet/winforms/issues/13658","RelatedDescription":"Closed issue \"AxHost keeping parent alive\" (#13658)"},{"Id":"3179674878","IsPullRequest":false,"CreatedAt":"2025-06-26T16:31:48","Actor":"cogkandrade","Number":"13659","RawContent":null,"Title":"Reopen issue 13499: AxHost keeping parent alive","State":"open","Body":"### .NET version\n\n.NET 8\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nHaven't tried on earlier, but also broken on .NET 9\n\n### Issue description\n\nThe container of an AxHost never gets garbage collected. We originally discovered this while investigating a GDI Object leak, which is a manifestation of the container never getting collected.\n\nThe \"solution\" in Issue 13499 did not work.\n\n### Steps to reproduce\n\nThe attached projects demonstrate the issue by tracking when the container is constructed, disposed and finalized. The three projects are:\nActiveXControl_MFC - an MFC project that builds an ocx; the post-build step registers it (requires Visual Studio 2022 run as admin) and creates an interop assembly\nAxHostContainer - a .NET 8 project that contains the AxHost\nAxHostContainer_Framework48 - a .NET Framework 4.8 project that contains the AxHost\nThe AxHostContainer projects are identical, except for the targeted .NET platform.\n\nRunning AxHostContainer apps:\nThe AxHostContainer apps effectively execute four cases, two on .NET 8 and the same two repeated on .NET Framework 4.8. Each of the four cases open and close a Form multiple times.\n```\n\n\tWithout AxHost\tWith AxHost\n.NET 8        +             x\n.NET FW       +             +\n```\n\nOnly the .NET 8 With AxHost case exhibits the bad behavior where the finalizers fail to execute.\n\n[AxHostLeak.zip](https://github.com/user-attachments/files/20367779/AxHostLeak.zip)","Url":"https://github.com/dotnet/winforms/issues/13659","RelatedDescription":"Open issue \"Reopen issue 13499: AxHost keeping parent alive\" (#13659)"},{"Id":"3178578320","IsPullRequest":false,"CreatedAt":"2025-06-26T10:06:42","Actor":"shindepra","Number":"13657","RawContent":null,"Title":"Screen Reader is announcing the incorrect information for the calendar date on which keyboard focus is shifting: A11y_WinForms.NETRuntime_CommonControl2_InfoAndRelationships.","State":"open","Body":"\"Please do not close this bug. This bug should only be closed by TCS, C+AI Accessibility or the Divisional Driver.\"\n\n### GitHub Tags\n#A11ySev2; #A11yTCS; #WCAG1.3.1; #Win32; #DesktopApp; #Win11; #WinForms .NET Runtime; #BM_WinForms.NETRuntime_Win32_June2025; #Info and Relationships; #NVDA; #Screen Reader; #Element:Calendar; #A11yMAS\n\n### Actual Result\nScreen Reader is announcing the incorrect information for the calendar date on which keyboard focus is shifting. It is only announcing Month calendar for every date.\n\n### Expected Result\nScreen Reader should announce the correct information for the calendar date on which keyboard focus is shifting.\n\n### Environment Details\nApplication Name: WinForms Runtime\nMicrosoft Windows 11 Enterprise (24H2) Build on 26100.4061\nScreen Reader used: NVDA\nNVDA Version: NVDA version: 2025.3(2025.3.0.33433)\n\n### Repro Steps\n\n1. Launch the \"Accessibility core app\".\n2. Main Form screen would appear.\n3. TAB to \"Common Control2\" button and hit ENTER key.\n4. TAB till \"Month Calendar\" section.\n5. Observe that Screen Reader is announcing the incorrect information for the calendar date on which keyboard focus is shifting.\n\n### User Impact\nScreen Reader user will not be able understand the correct data information while navigating on calendar. \n\n### Attachment\n\nhttps://github.com/user-attachments/assets/e189d65a-3a1e-4c98-8370-bda95e7d26e0","Url":"https://github.com/dotnet/winforms/issues/13657","RelatedDescription":"Open issue \"Screen Reader is announcing the incorrect information for the calendar date on which keyboard focus is shifting: A11y_WinForms.NETRuntime_CommonControl2_InfoAndRelationships.\" (#13657)"},{"Id":"3174375454","IsPullRequest":false,"CreatedAt":"2025-06-26T09:51:47","Actor":"aknaser123","Number":"13649","RawContent":null,"Title":"WinForms Designer in .NET 9.0 silently removes controls like Panel without warning during editing","State":"closed","Body":"### Environment\n\n### Describe the bug\n\nIn a WinForms project targeting .NET 9.0 (migrated from .NET Framework), sometimes controls such as `Panel`, `TableLayoutPanel`, or custom user controls (e.g., `AKNPanel`) are **silently deleted from the Designer** when editing forms — especially inside nested containers.\n\nThe Visual Studio Designer removes the control and all its children, but:\n- There is **no warning**\n- The project **compiles without errors**\n- The user might not notice until runtime\n\nThis leads to **data loss and UI breakage**, especially in large migrated solutions.\n\n---\n\n### To Reproduce\n\n1. Create a WinForms project in .NET 9.0\n2. Add a `Panel` (or custom control like `AKNPanel`) inside a `TableLayoutPanel` or other container\n3. Add some child controls (TextBox, Label, etc.) into the panel\n4. Save and close the form, or drag the container accidentally\n5. Reopen the form — the `Panel` may vanish entirely, and all its controls are lost in the `.Designer.cs` file\n\n---\n\n### Expected behavior\n\nThe Designer should:\n- Show a **warning** before silently removing controls\n- Prevent unintended container deletions\n- Or support an **undo/rollback** if a container and its children are removed\n\n---\n\n\n\n### Environment\n\n- **Visual Studio**: 2022 v17.10.x\n- **.NET SDK**: .NET 9.0 Preview\n- **Project type**: WinForms Desktop App (.NET Core)\n- **Designer Version**: WinForms Core Designer\n\n---\n\n### Additional context\n\nThis issue seems to occur more often:\n- After migrating from .NET Framework to .NET Core\n- When using nested controls or layout containers\n- When editing `.Designer.cs` and `.cs` manually or via copy-paste\n- Without Git or source control, it becomes hard to detect data loss\n\nPlease improve Designer reliability and add safety checks to avoid silent deletion.\n\n\n\n### .NET version\n\nNot net core 9.0\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\n_No response_\n\n### Issue description\n\nn a WinForms project targeting .NET 9.0 (migrated from .NET Framework), sometimes controls such as `Panel`, `TableLayoutPanel`, or custom user controls (e.g., `AKNPanel`) are **silently deleted from the Designer** when editing forms — especially inside nested containers.\n\nThe Visual Studio Designer removes the control and all its children, but:\n- There is **no warning**\n- The project **compiles without errors**\n- The user might not notice until runtime\n\nThis leads to **data loss and UI breakage**, especially in large migrated solutions.\n\n### Steps to reproduce\n\nn a WinForms project targeting .NET 9.0 (migrated from .NET Framework), sometimes controls such as `Panel`, `TableLayoutPanel`, or custom user controls (e.g., `AKNPanel`) are **silently deleted from the Designer** when editing forms — especially inside nested containers.\n\nThe Visual Studio Designer removes the control and all its children, but:\n- There is **no warning**\n- The project **compiles without errors**\n- The user might not notice until runtime\n\nThis leads to **data loss and UI breakage**, especially in large migrated solutions.\n\n### Diagnostics\n\n```text\nn a WinForms project targeting .NET 9.0 (migrated from .NET Framework), sometimes controls such as `Panel`, `TableLayoutPanel`, or custom user controls (e.g., `AKNPanel`) are **silently deleted from the Designer** when editing forms — especially inside nested containers.\n\nThe Visual Studio Designer removes the control and all its children, but:\n- There is **no warning**\n- The project **compiles without errors**\n- The user might not notice until runtime\n\nThis leads to **data loss and UI breakage**, especially in large migrated solutions.\n```","Url":"https://github.com/dotnet/winforms/issues/13649","RelatedDescription":"Closed issue \"WinForms Designer in .NET 9.0 silently removes controls like Panel without warning during editing\" (#13649)"},{"Id":"3178493223","IsPullRequest":false,"CreatedAt":"2025-06-26T09:37:29","Actor":"shindepra","Number":"13656","RawContent":null,"Title":"Screen Reader is not announcing any information for \"Progress Bar\" present on Common Control 2 page: A11y_WinForms.NETRuntime_CommonControl2_InfoAndRelationships.","State":"open","Body":"\"Please do not close this bug. This bug should only be closed by TCS, C+AI Accessibility or the Divisional Driver.\"\n\n### GitHub Tags\n#A11ySev2; #A11yTCS; #WCAG1.3.1; #Win32; #DesktopApp; #Win11; #WinForms .NET Runtime; #BM_WinForms.NETRuntime_Win32_June2025; #Info and Relationships; #NVDA; #Screen Reader; #Element:ProgressBar; #A11yMAS\n\n### Actual Result\nScreen Reader is not announcing any information for \"Progress Bar\" present on Common Control 2 page.\n\n**Note**: Similar issue is observed for WinForm-> Data Controls-> Progress Bar.\n\n### Expected Result\nScreen Reader should announce the information for \"Progress Bar\" present on Common Control 2 page.\n\n### Environment Details\nApplication Name: WinForms Runtime\nMicrosoft Windows 11 Enterprise (24H2) Build on 26100.4061\nScreen Reader used: NVDA\nNVDA Version: NVDA version: 2025.3(2025.3.0.33433)\n\n### Repro Steps\n\n1. Launch the \"Accessibility core app\".\n2. Main Form screen would appear.\n3. TAB to \"Common Control1\" button and hit ENTER key.\n4. TAB till \"Progress Bar\".\n5. Observe that Screen Reader is not announcing any information for \"Progress Bar\" present on Common Control 2 page.\n\n### User Impact\nScreen Reader user will not be able understand the information about \"Progress Bar\" if screen reader is not announcing any information for \"Progress Bar\" present on Common Control 2 page.\n\n### Attachment\n\nhttps://github.com/user-attachments/assets/88daa8bc-6e53-4952-9863-8f4fe299e0f1\n\n**Similar Issue**\n\nhttps://github.com/user-attachments/assets/0f5da8c2-717f-4882-ad43-5aa9df78992c","Url":"https://github.com/dotnet/winforms/issues/13656","RelatedDescription":"Open issue \"Screen Reader is not announcing any information for \"Progress Bar\" present on Common Control 2 page: A11y_WinForms.NETRuntime_CommonControl2_InfoAndRelationships.\" (#13656)"},{"Id":"3178455423","IsPullRequest":false,"CreatedAt":"2025-06-26T09:24:32","Actor":"shindepra","Number":"13655","RawContent":null,"Title":"After pressing TAB Keyboard focus is landing on \"Web Browser\" section but focus is not visible on it: A11y_WinForms.NETRuntime_CommonControl2_FocusVisible.","State":"open","Body":"\"Please do not close this bug. This bug should only be closed by TCS, C+AI Accessibility or the Divisional Driver.\"\n\n### GitHub Tags\n#A11ySev2; #A11yTCS; #WCAG2.4.7; #Win32; #DesktopApp; #Win11; #WinForms .NET Runtime; #BM_WinForms.NETRuntime_Win32_June2025; #Focus Visible; #A11yMAS\n\n### Environment Details\nApplication Name: WinForms Runtime\nMicrosoft Windows 11 Enterprise (24H2) Build on 26100.4061\n\n### Repro Steps\n\n1. Launch the \"Accessibility core app\".\n2. Main Form screen would appear.\n3. TAB to \"Common Control 2\" button and hit ENTER key.\n4. TAB till \"Web Browser\" section.\n5. Observe that After pressing TAB Keyboard focus is landing on \"Web Browser\" section but focus is not visible on it.\n\n### Actual Result\nAfter pressing TAB Keyboard focus is landing on \"Web Browser\" section but focus is not visible on it.\n\n### Expected Result\nAfter pressing TAB Keyboard focus should be visible on Web Browser's interactive element which is Scroll bar of that section.\n\n### User Impact\nKeyboard user will not be able to see where keyboard focus is shifting after pressing TAB and cannot be able to access the data.\n\n### Attachment\n\nhttps://github.com/user-attachments/assets/5f1c50e9-e68e-4d3b-ad6e-2b86bba460d9","Url":"https://github.com/dotnet/winforms/issues/13655","RelatedDescription":"Open issue \"After pressing TAB Keyboard focus is landing on \"Web Browser\" section but focus is not visible on it: A11y_WinForms.NETRuntime_CommonControl2_FocusVisible.\" (#13655)"},{"Id":"3178299490","IsPullRequest":true,"CreatedAt":"2025-06-26T08:32:50","Actor":"Zheng-Li01","Number":"13654","RawContent":null,"Title":"Add code coverage for DataGridViewComboBoxCell","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/13442\r\n\r\n## Proposed changes\r\nAdd unit test file:DataGridViewComboBoxCellTest.cs for public/protected methods of the DataGridViewComboBoxCell.cs\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13654)","Url":"https://github.com/dotnet/winforms/pull/13654","RelatedDescription":"Open PR \"Add code coverage for DataGridViewComboBoxCell\" (#13654)"},{"Id":"3178214389","IsPullRequest":false,"CreatedAt":"2025-06-26T08:01:31","Actor":"shindepra","Number":"13653","RawContent":null,"Title":"Target size of \"Alphabetical\" and \"Categorized\" buttons is 20*20 which is less than 24*24: A11y_WinForms.NETRuntime_RemainingControls_TargetSize.","State":"open","Body":"### GitHub Tags\n#A11ySev3; #A11yTCS; #WCAG2.5.8; #Win32; #DesktopApp; #Win11; #WinForms .NET Runtime; #BM_WinForms.NETRuntime_Win32_June2025; #TargetSize; #A11yWCAG2.2;\n\n### Environment Details\nApplication Name: WinForms Runtime\nMicrosoft Windows 11 Enterprise (24H2) Build on 26100.4061\n\n### Repro Steps\n\n1. Launch the \"Accessibility core app\".\n2. Main Form screen would appear.\n3. TAB to \"Remaining Controls\" button and hit ENTER key.\n4. Observe that Target size of \"Alphabetical\" and \"Categorized\" buttons is 20x20 which is less than 24x24.\n\n### Actual Result\nTarget size of \"Alphabetical\" and \"Categorized\" buttons is 20x20 which is less than 24x24.\n\nNote: Similar issue is observed for WinForm-> Data Controls-> Menu Bar Controls\n\n### Expected Result\nTarget size of \"Alphabetical\" and \"Categorized\" buttons should be more than or equal to 24x24. If the controls have spaced in-between, then those spaces should not intersect each other and target size with spacing should be 24x24 pixel for each one.\n\n### User Impact\nUsers with dexterity limitations and those who have difficulty with fine motor movement find it difficult to accurately activate small targets when there are other targets that are too close. Providing sufficient size, or sufficient spacing between targets, will reduce the likelihood of accidentally activating the wrong control.\n\n### Attachment\n1. Alphabetical\n![Image](https://github.com/user-attachments/assets/8d54bc6a-f424-4c34-a36b-1f676a05fcd9)\n\n2. Categorized\n![Image](https://github.com/user-attachments/assets/c36943c4-2249-4ec3-9bb5-4bd04a04ce6f)\n\n**Similar Issue**\nSimilar issue is repro'ing for \"Move Next\", \" Move last\", \"Add New\", \"Remove\" buttons where the target size is 20x20 which is less than 24x24.\n![Image](https://github.com/user-attachments/assets/92c3b059-7aa2-43d3-b4aa-d467a72a039e)","Url":"https://github.com/dotnet/winforms/issues/13653","RelatedDescription":"Open issue \"Target size of \"Alphabetical\" and \"Categorized\" buttons is 20*20 which is less than 24*24: A11y_WinForms.NETRuntime_RemainingControls_TargetSize.\" (#13653)"},{"Id":"3178167509","IsPullRequest":false,"CreatedAt":"2025-06-26T07:45:25","Actor":"shindepra","Number":"13652","RawContent":null,"Title":"User is not able to scroll the \"View your page\" section of \"Printing Testing\" with any keyboard key: A11y_WinForms.NETRuntime_PrintingTesting_Keyboard.","State":"open","Body":"\"Please do not close this bug. This bug should only be closed by TCS, C+AI Accessibility or the Divisional Driver.\"\n\n### GitHub Tags\n#A11ySev2; #A11yTCS; #WCAG2.1.1; #Win32; #DesktopApp; #Win11; #WinForms .NET Runtime; #BM_WinForms.NETRuntime_Win32_June2025; #keyboard; #A11yMAS\n\n### Environment Details\nApplication Name: WinForms Runtime\nMicrosoft Windows 11 Enterprise (24H2) Build on 26100.4061\n\n### Repro Steps\n\n1. Launch the \"Accessibility core app\".\n2. Main Form screen would appear.\n3. TAB to \"PrintingTesting:Testing button and hit ENTER key.\n4. TAB till \"View your page\" section.\n5. Observe that User is not able to scroll the \"View your page\" section of \"Printing Testing\" with any keyboard key.\n\n### Actual Result\nUser is not able to scroll the \"View your page\" section of \"Printing Testing\" with any keyboard key.\n\n### Expected Result\n\"View your page\" section of \"Printing Testing\" should be and user should be able to scroll the section using arrow keys \n\n### User Impact\nKeyboard user will not be able to scroll the \"View your page\" section of \"Printing Testing\" with any keyboard key and can not be able to get the data which is available in the View you page section.\n\n### Attachment\n\nhttps://github.com/user-attachments/assets/7d141b7c-1cde-4e50-881f-11f69b255fb6","Url":"https://github.com/dotnet/winforms/issues/13652","RelatedDescription":"Open issue \"User is not able to scroll the \"View your page\" section of \"Printing Testing\" with any keyboard key: A11y_WinForms.NETRuntime_PrintingTesting_Keyboard.\" (#13652)"},{"Id":"3175771912","IsPullRequest":false,"CreatedAt":"2025-06-25T21:09:06","Actor":"Rabina4363sf","Number":"13651","RawContent":null,"Title":"Inconsistent Private Field Names and Types in BufferedGraphics and BufferedGraphicsContext Between .NET Framework and .NET 9.0","State":"closed","Body":"### .NET version\n\n.NET 9.0\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nThe issue also occurs in .NET 8.0\n\n### Issue description\n\nWe attempted to access the private fields \"context\" from BufferedGraphics and \"dib\" from BufferedGraphicsContext using reflection. We observed that:\n\nIn .NET Framework, the fields are named as \"context\" and \"dib\", and we are able to retrieve them successfully.\nIn .NET 9.0, the same code returns null for both fields.\n\nUpon further analysis, we discovered that:\n\nThe fields are namesd as  **_context** and **_dib** in .NET 9.0  \".\nAdditionally, the type of \"_dib\" in .NET 9.0 is **HBITMAP**, whereas in .NET Framework, the type of \"dib\" is **IntPtr**.\n\n**Refer to the below images for reference:** \n\n![Image](https://github.com/user-attachments/assets/5f64dda4-bfa3-43ab-9ed5-92bee35c0955)\n\n![Image](https://github.com/user-attachments/assets/341aa834-5daf-4216-a452-d56072b6c59c)\n\n![Image](https://github.com/user-attachments/assets/141b62a7-3c58-46aa-9d8b-e75c5c706ba1)\n\n![Image](https://github.com/user-attachments/assets/522018a3-6830-425c-8e95-e70db2a1fc7f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Steps to reproduce\n\n1. Run the sample\n\n[BufferGraphics.zip](https://github.com/user-attachments/files/20904848/BufferGraphics.zip)\n\n**Observed behavior :** Null value shows for the context and dib fields.\n\n![Image](https://github.com/user-attachments/assets/55097f40-6566-443a-b0f5-f1e7b180c879)\n\n**Expected behavior :** The proper value should be return \n\n![Image](https://github.com/user-attachments/assets/6accaa9b-9389-4c92-a578-59e92e6802c0)","Url":"https://github.com/dotnet/winforms/issues/13651","RelatedDescription":"Closed issue \"Inconsistent Private Field Names and Types in BufferedGraphics and BufferedGraphicsContext Between .NET Framework and .NET 9.0\" (#13651)"},{"Id":"3174418553","IsPullRequest":true,"CreatedAt":"2025-06-25T06:45:29","Actor":"Epica3055","Number":"13650","RawContent":null,"Title":"fix issue #13648  DemoConsole app: The extra number displayed on Name & Text Propeties for the ToolStrip control","State":"open","Body":"\r\nFixes #13648  \r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- We need to match the exact type name shouldn't just use StartsWith since we removed type check in [pr13573](https://github.com/dotnet/winforms/pull/13573)\r\n- \r\n\r\n```diff\r\n        while (i < cc.Count)\r\n        {\r\n-            if (cc[i] is Component comp && comp.GetType() == type)\r\n+            if (cc[i] is Component comp)\r\n             {\r\n                string name = comp.Site.Name;\r\n                if (name.StartsWith(type.Name, StringComparison.Ordinal))\r\n\r\n\r\n```\r\n\r\n<!-- \r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n\r\n -->\r\n## Screenshots \r\n\r\n### Before\r\n\r\n![image](https://github.com/user-attachments/assets/fe2eefbf-12d1-47cc-a2fc-fdd191b61312)\r\n\r\n### After\r\n\r\n![image](https://github.com/user-attachments/assets/0a131f9b-5042-4e13-b0b6-4d51d2d2235f)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- manual \r\n- \r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13650)","Url":"https://github.com/dotnet/winforms/pull/13650","RelatedDescription":"Open PR \"fix issue #13648  DemoConsole app: The extra number displayed on Name & Text Propeties for the ToolStrip control\" (#13650)"},{"Id":"3174308115","IsPullRequest":false,"CreatedAt":"2025-06-25T05:57:33","Actor":"Zheng-Li01","Number":"13648","RawContent":null,"Title":"DemoConsole app: The extra number displayed on Name & Text Propeties for the ToolStrip control","State":"open","Body":"### .NET version\n\nThe latest main branch of Winforms repo\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nThis is a regression issue, can reproduce on release/10.0-preview6 branch, cannot reproduce on release/10.0-preview5 branch\n\n### Issue description\n\nThe extra number displayed on Name & Text Propeties for the ToolStrip control\n\n**main branch:**\n![Image](https://github.com/user-attachments/assets/5cf4bf65-9b98-4508-b9d1-5dea28c74bcc)\n\n**release/10.0-preview5** \n![Image](https://github.com/user-attachments/assets/656aab5a-e77a-4c76-86ce-0d74aef150b9)\n\n**net481**\n\n![Image](https://github.com/user-attachments/assets/68bc18e8-5fc4-446b-8515-287210da75f9)\n\n### Steps to reproduce\n\nTest sample: [DemoConsole](https://github.com/dotnet/winforms/tree/main/src/System.Windows.Forms/tests/IntegrationTests/DesignSurface/DemoConsole) bases on main branch in Winforms repo.","Url":"https://github.com/dotnet/winforms/issues/13648","RelatedDescription":"Open issue \"DemoConsole app: The extra number displayed on Name & Text Propeties for the ToolStrip control\" (#13648)"},{"Id":"3173794232","IsPullRequest":true,"CreatedAt":"2025-06-25T02:41:02","Actor":"dotnet-maestro[bot]","Number":"13647","RawContent":null,"Title":"[release/10.0-preview6] Source code updates from dotnet/dotnet","State":"closed","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:bbf25048-a2e8-41c6-92da-d9b3c980e1cc)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [bbf25048-a2e8-41c6-92da-d9b3c980e1cc](https://maestro.dot.net/subscriptions?search=bbf25048-a2e8-41c6-92da-d9b3c980e1cc)\n- **Build**: [20250624.5](https://dev.azure.com/dnceng/internal/_build/results?buildId=2736710)\n- **Date Produced**: June 25, 2025 1:19:52 AM UTC\n- **Commit**: [64d9c42b575a172d2ea77297ce80b149557094ec](https://github.com/dotnet/dotnet/commit/64d9c42b575a172d2ea77297ce80b149557094ec)\n- **Commit Diff**: [a1aae27...64d9c42](https://github.com/dotnet/dotnet/compare/a1aae2707dc2c912392dfa64215e938367f943ec...64d9c42b575a172d2ea77297ce80b149557094ec)\n- **Branch**: release/10.0.1xx-preview6\n\n**Updated Dependencies**\n- **Microsoft.NETCore.Platforms**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **System.Resources.Extensions**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **System.Windows.Extensions**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **Microsoft.NET.Sdk.IL**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **System.Reflection.MetadataLoadContext**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **Microsoft.NETCore.ILDAsm**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **System.Text.Encodings.Web**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **System.Text.Json**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **Microsoft.NETCore.App.Ref**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **System.Runtime.Serialization.Formatters**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **Microsoft.Win32.SystemEvents**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **System.CodeDom**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **System.Configuration.ConfigurationManager**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **System.Formats.Nrbf**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **System.IO.Hashing**: [from 10.0.0-preview.6.25324.102 to 10.0.0-preview.6.25324.105][1]\n- **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.25324.102 to 10.0.0-beta.25324.105][1]\n- **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.25324.102 to 10.0.0-beta.25324.105][1]\n- **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.25324.102 to 10.0.0-beta.25324.105][1]\n- **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.25324.102 to 10.0.0-beta.25324.105][1]\n- **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.25324.102 to 10.0.0-beta.25324.105][1]\n- **Microsoft.DotNet.XUnitV3Extensions**: [from 10.0.0-beta.25324.102 to 10.0.0-beta.25324.105][1]\n\n[marker]: <> (End:bbf25048-a2e8-41c6-92da-d9b3c980e1cc)\n\n[1]: https://github.com/dotnet/dotnet/compare/a1aae2707d...64d9c42b57\n[marker]: <> (Start:Footer:CodeFlow PR)\n\n## Associated changes in source repos\n- https://github.com/dotnet/razor/compare/0d68401b703c7b50a827ae6eb69d8cea4997a598...aa1041bb2a00ec15ab099b82656cc12d57da5a95\n- https://github.com/dotnet/wpf/compare/b4d57bf294c0999b614355afbd68932859321917...9899ca290a69927192b5c9373e4d6cbeab19b147\n\n[marker]: <> (End:Footer:CodeFlow PR)\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13647)","Url":"https://github.com/dotnet/winforms/pull/13647","RelatedDescription":"Closed or merged PR \"[release/10.0-preview6] Source code updates from dotnet/dotnet\" (#13647)"},{"Id":"3172961857","IsPullRequest":true,"CreatedAt":"2025-06-24T19:32:01","Actor":"dotnet-maestro[bot]","Number":"13646","RawContent":null,"Title":"[release/10.0-preview6] Source code updates from dotnet/dotnet","State":"closed","Body":"\n> [!NOTE]\n> This is a codeflow update. It may contain both source code changes from [the VMR](https://github.com/dotnet/dotnet) as well as dependency updates. Learn more [here](https://github.com/dotnet/dotnet/tree/main/docs/Codeflow-PRs.md).\n\nThis pull request brings the following source code changes\n\n[marker]: <> (Begin:bbf25048-a2e8-41c6-92da-d9b3c980e1cc)\n\n## From https://github.com/dotnet/dotnet\n- **Subscription**: [bbf25048-a2e8-41c6-92da-d9b3c980e1cc](https://maestro.dot.net/subscriptions?search=bbf25048-a2e8-41c6-92da-d9b3c980e1cc)\n- **Build**: [20250624.2](https://dev.azure.com/dnceng/internal/_build/results?buildId=2736440)\n- **Date Produced**: June 24, 2025 6:12:26 PM UTC\n- **Commit**: [a1aae2707dc2c912392dfa64215e938367f943ec](https://github.com/dotnet/dotnet/commit/a1aae2707dc2c912392dfa64215e938367f943ec)\n- **Commit Diff**: [efe6a50...a1aae27](https://github.com/dotnet/dotnet/compare/efe6a50657d7d6004e019f0fd8e1fa2744f06db6...a1aae2707dc2c912392dfa64215e938367f943ec)\n- **Branch**: release/10.0.1xx-preview6\n\n**Updated Dependencies**\n- **Microsoft.NETCore.Platforms**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **System.Resources.Extensions**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **System.Windows.Extensions**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **Microsoft.NET.Sdk.IL**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **System.Reflection.MetadataLoadContext**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **Microsoft.NETCore.ILDAsm**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **System.Text.Encodings.Web**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **System.Text.Json**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **Microsoft.NETCore.App.Ref**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **System.Runtime.Serialization.Formatters**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **Microsoft.Win32.SystemEvents**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **System.CodeDom**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **System.Configuration.ConfigurationManager**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **System.Formats.Nrbf**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **System.IO.Hashing**: [from 10.0.0-preview.6.25321.102 to 10.0.0-preview.6.25324.102][1]\n- **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.25321.102 to 10.0.0-beta.25324.102][1]\n- **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.25321.102 to 10.0.0-beta.25324.102][1]\n- **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.25321.102 to 10.0.0-beta.25324.102][1]\n- **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.25321.102 to 10.0.0-beta.25324.102][1]\n- **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.25321.102 to 10.0.0-beta.25324.102][1]\n- **Microsoft.DotNet.XUnitV3Extensions**: [from 10.0.0-beta.25321.102 to 10.0.0-beta.25324.102][1]\n\n[marker]: <> (End:bbf25048-a2e8-41c6-92da-d9b3c980e1cc)\n\n[1]: https://github.com/dotnet/dotnet/compare/efe6a50657...a1aae2707d\n[marker]: <> (Start:Footer:CodeFlow PR)\n\n## Associated changes in source repos\n- https://github.com/dotnet/aspnetcore/compare/d5954c2608f9fd443fa4f93d6e06d80306b537eb...a1b8651524b3c7005f5a5bbc8d0646a3266eb608\n\n[marker]: <> (End:Footer:CodeFlow PR)\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13646)","Url":"https://github.com/dotnet/winforms/pull/13646","RelatedDescription":"Closed or merged PR \"[release/10.0-preview6] Source code updates from dotnet/dotnet\" (#13646)"},{"Id":"3171318346","IsPullRequest":true,"CreatedAt":"2025-06-24T10:06:32","Actor":"LeafShi1","Number":"13645","RawContent":null,"Title":"Adding Data, DataObject, FileDrop and Text tests to ClipboardCoreTests","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nRelated #13331\r\n\r\n\r\n## Proposed changes\r\n\r\n-  Adding Data, DataObject, FileDrop and Text tests to ClipboardCoreTests\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13645)","Url":"https://github.com/dotnet/winforms/pull/13645","RelatedDescription":"Open PR \"Adding Data, DataObject, FileDrop and Text tests to ClipboardCoreTests\" (#13645)"},{"Id":"3170746103","IsPullRequest":true,"CreatedAt":"2025-06-24T07:32:52","Actor":"Epica3055","Number":"13644","RawContent":null,"Title":"Add shortCut copy paste In DemoConsole","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #10466\r\n\r\n## Root cause\r\nCopy and paste now works in DemoConsole in netframework481 but not in net10. that's because the serializer here does not work in net10, it was deprecated long time ago.\r\n\r\nhttps://github.com/dotnet/winforms/blob/b0b0e101cb69db4b70f7e3559e30406b210b1f1d/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/CommandSet.cs#L1409C1-L1415C74\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n-  We don't  serialize CodeDomSerializationStore anymore. Copy the `selectionComponents` when CopyCommand is triggered.\r\n- \r\n\r\n\r\n<!-- \r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n -->\r\n\r\n\r\n## Screenshots \r\n\r\n### Before\r\n\r\nN/A\r\n\r\n### After\r\n\r\n![PR_13644_01](https://github.com/user-attachments/assets/03c8198e-ffad-4ccf-b764-fd28ef848920)\r\n\r\n<!--\r\n## Test methodology \r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  \r\n\r\n\r\n\r\n -->\r\n\r\n\r\n \r\n\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13644)","Url":"https://github.com/dotnet/winforms/pull/13644","RelatedDescription":"Open PR \"Add shortCut copy paste In DemoConsole\" (#13644)"},{"Id":"3169716244","IsPullRequest":true,"CreatedAt":"2025-06-23T23:22:34","Actor":"KlausLoeffelmann","Number":"13641","RawContent":null,"Title":"Address Graphics state reset issue in DarkMode Button renderers","State":"open","Body":"This PR makes sure, that the Graphics state is reset to the original state after rendering the DarkMode Button but implementing the render logic based on `ButtonDarkModeRendererBase`.\r\n\r\nFollows up respective issues pointed out by the DarkMode feature reviews.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/13641)","Url":"https://github.com/dotnet/winforms/pull/13641","RelatedDescription":"Open PR \"Address Graphics state reset issue in DarkMode Button renderers\" (#13641)"}],"ResultType":"GitHubIssue"}},"RunOn":"2025-07-03T03:30:28.9064079Z","RunDurationInMilliseconds":603}