{"Data":{"GitHub":{"Issues":[{"Id":"742019325","IsPullRequest":true,"CreatedAt":"2020-11-13T04:52:16","Actor":"GrabYourPitchforks","Number":"4225","RawContent":null,"Title":"Change source comment links from http to https","State":"closed","Body":"This changes some links in our markdown files, source comments, and user-visible obsoletion messages from _http_ to _https_. I validated that all links I changed were still correct, and where the contents had moved (thanks MSDN!) I updated the link to point to the new location. In cases where the page was removed with no replacement, I removed the link entirely.\r\n\r\nThis PR __does not__ change URLs in license files (whose contents we can't change) or unit test code.\r\n\r\nI didn't inspect existing https links for validity.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4225)","Url":"https://github.com/dotnet/winforms/pull/4225","RelatedDescription":"Closed or merged PR \"Change source comment links from http to https\" (#4225)"},{"Id":"741777022","IsPullRequest":false,"CreatedAt":"2020-11-12T17:13:32","Actor":"vladimir-krestov","Number":"4224","RawContent":null,"Title":"Incorrect MonthCalendar Accessibility tree at an increased size","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\nBased on #3019\r\n\r\n* .NET Core Version: 6.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: Yes (works even worse)\r\n\r\n**Problem description:**\r\n- If a MonthCalendar has a big size, it has several months (years, centuries, depending on a mode) but Inspect see only a first part of the MonthCalendar (e.g. a first month). The tool doesn't see other parts of the MonthCalendar. Narrator can't navigate and announce these parts too.\r\n![image](https://user-images.githubusercontent.com/49272759/98961629-d354f280-2516-11eb-90e9-3a185d8afb02.png)\r\n\r\n\r\n**Expected behavior:**\r\n- .NET MonthCalendar should have a correct accessibility tree, it should work like a native MonthCalendar: Accessibility tools (Narrator, NVDA, Inspect) can see and announce MonthCalendar items (buttons, days, months, years, etc.) when it is at an increased size.\r\n![image](https://user-images.githubusercontent.com/49272759/98967169-3d709600-251d-11eb-9ff6-48e5d26d15ad.png)\r\n\r\n\r\n**Minimal repro:**\r\n- Create a .NET 6.0 app\r\n- Add a MonthCalendar in the app\r\n- Set a big size for the MonthCalendar (e.g. Size(400,400))\r\n- Run the app and check its accessibility tree using Inspect\r\n","Url":"https://github.com/dotnet/winforms/issues/4224","RelatedDescription":"Open issue \"Incorrect MonthCalendar Accessibility tree at an increased size\" (#4224)"},{"Id":"741584759","IsPullRequest":true,"CreatedAt":"2020-11-12T13:36:02","Actor":"dotnet-maestro[bot]","Number":"4223","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20201111.11\r\n- **Date Produced**: 11/12/2020 1:31 AM\r\n- **Commit**: f56a56f90ff9124c85e4d889faeeca0824d2d437\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **Microsoft.NETCore.App.Internal**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20561.11][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/6cfef20...f56a56f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4223)","Url":"https://github.com/dotnet/winforms/pull/4223","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4223)"},{"Id":"741126201","IsPullRequest":false,"CreatedAt":"2020-11-12T08:19:15","Actor":"tarekgh","Number":"4218","RawContent":null,"Title":"ResXFileCodeGenerator for NetCore.App generates ResourceManager.GetObject() which doesn't compile.","State":"closed","Body":"This issue is reported on VS community portal and parked there for awhile. moving it here to decide what to do with it. \r\n\r\nhttps://developercommunity2.visualstudio.com/t/ResXFileCodeGenerator-for-NetCoreApp-ge/20529\r\n\r\n```\r\nResXFileCodeGenerator for NetCore.App generates ResourceManager.GetObject() which doesn't compile.\r\nJeff Lill avatar\r\nJeff Lill\r\n-\r\nReported Feb 18, 2017\r\nView internal ticket\r\nî¢§\r\nVisual Studio RC4 Steps: 1. Create a new NetCore.App conosole project 2. Add two small text files named test1.txt and test2.sh 3. Add a new Resources File 4. Add the two text files to the new resources file 5. Rebuild ResXFileCodeGenerator generated the designer with a ResourceManager.GetString() call for test1.txt and a GetObject() call for test2.sh. The GetObject() call doesn't compile. There are two problems with this: #1: The generated designer should always a compile. #2: The missing GetObject() implies that .NET Core apps won't be able to embed binary resources and use the designer. I'll attach my solution.\r\n```\r\n\r\n[EDIT]\r\n\r\nSample app: [Solution.zip](https://github.com/dotnet/winforms/files/5527772/Solution.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/4218","RelatedDescription":"Closed issue \"ResXFileCodeGenerator for NetCore.App generates ResourceManager.GetObject() which doesn't compile.\" (#4218)"},{"Id":"740411911","IsPullRequest":true,"CreatedAt":"2020-11-12T06:49:23","Actor":"RussKie","Number":"4210","RawContent":null,"Title":"`RepeatValidator` must flag success once the counter has reached zero.","State":"closed","Body":"Button rendering with visual styles off is a set of the following operations:\r\n```\r\n    [ENHMETAHEADER] Bounds: {0, -1, 74, 22 (LTRB)} Device Size: {Width=3840, Height=2160} Header Size: 108\r\n    [EMRCREATEBRUSHINDIRECT] Index: 1 Style: SOLID Color: [R=240, G=240, B=240] (COLOR_MENU, COLOR_BTNFACE, COLOR_MENUBAR)\r\n    [EMRSELECTOBJECT] Index: 1\r\n    [EMRBITBLT] Bounds: {2, 2, 72, 20 (LTRB)} Destination: {2, 2, 73, 21 (LTRB)} Rop: PATCOPY Source DC Color: [R=0, G=0, B=0] (COLOR_BACKGROUND, COLOR_MENUTEXT, COLOR_WINDOWTEXT, COLOR_CAPTIONTEXT, COLOR_BTNTEXT, COLOR_INACTIVECAPTIONTEXT, COLOR_INFOTEXT)\r\n    [EMRSELECTOBJECT] StockObject: WHITE_BRUSH\r\n    [EMRDELETEOBJECT] Index: 1\r\n    [EMRSETROP2] Mode: R2_COPYPEN\r\n    [EMRSETBKMODE] Mode: BKMODE_TRANSPARENT\r\n    [EMRCREATEPEN] Index: 1 Style: ENDCAP_ROUND Width: {X=1,Y=0} Color: [R=255, G=255, B=255] (COLOR_WINDOW, COLOR_HIGHLIGHTTEXT, COLOR_BTNHIGHLIGHT)\r\n    [EMRSELECTOBJECT] Index: 1\r\n    [EMRMOVETOEX] Point: {X=74,Y=0}\r\n    [EMRLINETO] Point: {X=0,Y=0}\r\n    [EMRMOVETOEX] Point: {X=0,Y=0}\r\n    [EMRSELECTOBJECT] StockObject: BLACK_PEN\r\n    [EMRSETBKMODE] Mode: BKMODE_OPAQUE\r\n    [EMRSETROP2] Mode: R2_COPYPEN\r\n    [EMRSETBKMODE] Mode: BKMODE_TRANSPARENT\r\n    [EMRSELECTOBJECT] Index: 1\r\n    [EMRMOVETOEX] Point: {X=0,Y=0}\r\n    [EMRLINETO] Point: {X=0,Y=22}\r\n    [EMRMOVETOEX] Point: {X=0,Y=0}\r\n    [EMRSELECTOBJECT] StockObject: BLACK_PEN\r\n    [EMRSETBKMODE] Mode: BKMODE_OPAQUE\r\n    [EMRSETROP2] Mode: R2_COPYPEN\r\n    [EMRSETBKMODE] Mode: BKMODE_TRANSPARENT\r\n    [EMRCREATEPEN] Index: 2 Style: ENDCAP_ROUND Width: {X=1,Y=0} Color: [R=105, G=105, B=105] (COLOR_3DDKSHADOW)\r\n    [EMRSELECTOBJECT] Index: 2\r\n    [EMRMOVETOEX] Point: {X=0,Y=22}\r\n    [EMRLINETO] Point: {X=74,Y=22}\r\n    [EMRMOVETOEX] Point: {X=0,Y=0}\r\n    [EMRSELECTOBJECT] StockObject: BLACK_PEN\r\n    [EMRSETBKMODE] Mode: BKMODE_OPAQUE\r\n    [EMRSETROP2] Mode: R2_COPYPEN\r\n    [EMRSETBKMODE] Mode: BKMODE_TRANSPARENT\r\n    [EMRSELECTOBJECT] Index: 2\r\n    [EMRMOVETOEX] Point: {X=74,Y=22}\r\n    [EMRLINETO] Point: {X=74,Y=-1}\r\n    [EMRMOVETOEX] Point: {X=0,Y=0}\r\n    [EMRSELECTOBJECT] StockObject: BLACK_PEN\r\n    [EMRSETBKMODE] Mode: BKMODE_OPAQUE\r\n    [EMRSETROP2] Mode: R2_COPYPEN\r\n    [EMRSETBKMODE] Mode: BKMODE_TRANSPARENT\r\n    [EMRCREATEPEN] Index: 3 Style: ENDCAP_ROUND Width: {X=1,Y=0} Color: [R=240, G=240, B=240] (COLOR_MENU, COLOR_BTNFACE, COLOR_MENUBAR)\r\n    [EMRSELECTOBJECT] Index: 3\r\n    [EMRMOVETOEX] Point: {X=73,Y=1}\r\n    [EMRLINETO] Point: {X=1,Y=1}\r\n    [EMRMOVETOEX] Point: {X=0,Y=0}\r\n    [EMRSELECTOBJECT] StockObject: BLACK_PEN\r\n    [EMRSETBKMODE] Mode: BKMODE_OPAQUE\r\n    [EMRSETROP2] Mode: R2_COPYPEN\r\n    [EMRSETBKMODE] Mode: BKMODE_TRANSPARENT\r\n    [EMRSELECTOBJECT] Index: 3\r\n    [EMRMOVETOEX] Point: {X=1,Y=1}\r\n    [EMRLINETO] Point: {X=1,Y=21}\r\n    [EMRMOVETOEX] Point: {X=0,Y=0}\r\n    [EMRSELECTOBJECT] StockObject: BLACK_PEN\r\n    [EMRSETBKMODE] Mode: BKMODE_OPAQUE\r\n    [EMRSETROP2] Mode: R2_COPYPEN\r\n    [EMRSETBKMODE] Mode: BKMODE_TRANSPARENT\r\n    [EMRCREATEPEN] Index: 4 Style: ENDCAP_ROUND Width: {X=1,Y=0} Color: [R=160, G=160, B=160] (COLOR_BTNSHADOW)\r\n    [EMRMOVETOEX] Point: {X=1,Y=21}\r\n    [EMRSELECTOBJECT] Index: 4\r\n    [EMRLINETO] Point: {X=73,Y=21}\r\n    [EMRMOVETOEX] Point: {X=0,Y=0}\r\n    [EMRSELECTOBJECT] StockObject: BLACK_PEN\r\n    [EMRSETBKMODE] Mode: BKMODE_OPAQUE\r\n    [EMRSETROP2] Mode: R2_COPYPEN\r\n    [EMRSETBKMODE] Mode: BKMODE_TRANSPARENT\r\n    [EMRSELECTOBJECT] Index: 4\r\n    [EMRMOVETOEX] Point: {X=73,Y=21}\r\n    [EMRLINETO] Point: {X=73,Y=0}\r\n    [EMRMOVETOEX] Point: {X=0,Y=0}\r\n    [EMRSELECTOBJECT] StockObject: BLACK_PEN\r\n    [EMRSETBKMODE] Mode: BKMODE_OPAQUE\r\n    [EMRDELETEOBJECT] Index: 4\r\n    [EMRDELETEOBJECT] Index: 3\r\n    [EMRDELETEOBJECT] Index: 2\r\n    [EMRDELETEOBJECT] Index: 1\r\n    [EMREOF]\r\n```\r\n\r\nThere's only a single `EMRBITBLT` however the test has expected to 2 due to incorrect `complete` flag in the validator.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4210)","Url":"https://github.com/dotnet/winforms/pull/4210","RelatedDescription":"Closed or merged PR \"`RepeatValidator` must flag success once the counter has reached zero.\" (#4210)"},{"Id":"741329913","IsPullRequest":true,"CreatedAt":"2020-11-12T06:47:47","Actor":"RussKie","Number":"4222","RawContent":null,"Title":"Fix `ListView` no longer displays images (servicing)","State":"open","Body":"(cherry picked from commit d0608e72a356ad991f9c9d12518e29b43a1fb4f0)\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #4169\r\n\r\n\r\n## Proposed changes\r\n\r\nChanges in `ImageList` ownership model in #3601 means that very are now two  instances of imagelists - one instance is tracked by Windows Forms (i.e. managed) side, and another one tracked by the underlying Win32 (unmanaged) side. This was done due to an observed ownership disconnect between the managed and unmanaged code, that led to situations where the unmanaged code would effectively destroy and instance of an imagelist, which the managed code was oblivious to.\r\n\r\nHowever with the above change changes to images in an imagelist on the managed side, i.e. a user adding or replacing an image in the imagelist, would not be reflected in the imagelist on the unmanaged side, and thus would not be reflected in the UI (which is drawn by the Win32).\r\n\r\nThe fix reuses the established infrastructure that notifies the managed imagelist implementation of changes to the images collection, and once a notification of a chance is received, the unmanaged imagelist is re-created, thus ensuring the UI has all the correct images to display.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- A control that references an `ImageList` that gets its images dynamically modified will render the images correctly.\r\n\r\n## Regression? \r\n\r\n- Yes \r\n\r\n## Risk\r\n\r\n- Minor\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4222)","Url":"https://github.com/dotnet/winforms/pull/4222","RelatedDescription":"Open PR \"Fix `ListView` no longer displays images (servicing)\" (#4222)"},{"Id":"741302081","IsPullRequest":true,"CreatedAt":"2020-11-12T06:42:04","Actor":"RussKie","Number":"4221","RawContent":null,"Title":"Enable visual styles (#4197)","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4221)","Url":"https://github.com/dotnet/winforms/pull/4221","RelatedDescription":"Closed or merged PR \"Enable visual styles (#4197)\" (#4221)"},{"Id":"741265343","IsPullRequest":true,"CreatedAt":"2020-11-12T04:20:16","Actor":"RussKie","Number":"4220","RawContent":null,"Title":"Narrator and Inspect become unresponsive inspecting `Combobox` control (servicing)","State":"open","Body":"\r\n(cherry picked from commit 2195c2c5687f695b1cdbf51db57af11eabe292d0)\r\n\r\n\r\nFixes #3452\r\n\r\n\r\n## Proposed changes\r\nIssue is reproduced due to incorrect implementation of the `ComboBoxAccessibleObject.IRawElementProviderHwndOverride` method. The presence of [`ComImport` attribute](https://github.com/dotnet/winforms/commit/423b2bc5726b4109741f189e34e5f37f90140d01) leads to the use of `ComboBoxAccessibleObject.IRawElementProviderHwndOverride`, which causes the issue. As fix for it, [we removed `ComImport`](https://github.com/dotnet/winforms/pull/3524) and stopped to using it.\r\n\r\n\r\nHowever the issue is not with `ComImport` but the override of `ComboBoxAccessibleObject.IRawElementProviderHwndOverride` method.\r\n\r\n\r\n## Customer Impact\r\n- Customers will be able to use accessibility tools for forms that contain `ComboBox` controls.\r\n\r\n## Regression? \r\n- Yes\r\n\r\n## Risk\r\n- Minimal \r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- CTI \r\n- Manually\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Inspect\r\n- Narrator\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19041.388]\r\n- .Net SDK 5.0.100-rc.2.20479.15\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4220)","Url":"https://github.com/dotnet/winforms/pull/4220","RelatedDescription":"Open PR \"Narrator and Inspect become unresponsive inspecting `Combobox` control (servicing)\" (#4220)"},{"Id":"740751732","IsPullRequest":true,"CreatedAt":"2020-11-12T01:42:45","Actor":"dotnet-maestro[bot]","Number":"4215","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20201110.10\r\n- **Date Produced**: 11/11/2020 4:53 AM\r\n- **Commit**: 72b7d236ad634c2280c73499ebfc2b594995ec06\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **Microsoft.NETCore.App**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **Microsoft.NETCore.App.Internal**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.20557.2 to 6.0.0-alpha.1.20560.10][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/6cfef20...72b7d23\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4215)","Url":"https://github.com/dotnet/winforms/pull/4215","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4215)"},{"Id":"741181798","IsPullRequest":false,"CreatedAt":"2020-11-12T00:54:48","Actor":"Wildcatii","Number":"4219","RawContent":null,"Title":"Two Bug of NET5 WinForm Designer","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: 5.0\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\n.NET Framework is normal.\r\n**Problem description:**\r\n1.Set image of button or label with designer cause NullException.\r\n2.Can't access MenuStrip's (or ContextMenuStrip's)  item from designer directly.\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\n\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/4219","RelatedDescription":"Closed issue \"Two Bug of NET5 WinForm Designer\" (#4219)"},{"Id":"737527743","IsPullRequest":true,"CreatedAt":"2020-11-11T23:07:33","Actor":"RussKie","Number":"4197","RawContent":null,"Title":"Enable visual styles","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\n- Enable visual styles when running tests to ensure we test the main user scenarios\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4197)","Url":"https://github.com/dotnet/winforms/pull/4197","RelatedDescription":"Closed or merged PR \"Enable visual styles\" (#4197)"},{"Id":"740995894","IsPullRequest":true,"CreatedAt":"2020-11-11T19:53:01","Actor":"jkoritzinsky","Number":"4217","RawContent":null,"Title":"Remove reference to the legacy Microsoft.NETCore.App package and use a different non-shipping package instead.","State":"closed","Body":"The Microsoft.NETCore.App package is being removed in https://github.com/dotnet/runtime/pull/38457/. The usage in WinForms can be replaced with the .NET Core Shared Framework VS insertion package, which has a nonshipping version number that matches a runtime.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4217)","Url":"https://github.com/dotnet/winforms/pull/4217","RelatedDescription":"Closed or merged PR \"Remove reference to the legacy Microsoft.NETCore.App package and use a different non-shipping package instead.\" (#4217)"},{"Id":"740753333","IsPullRequest":false,"CreatedAt":"2020-11-11T13:08:16","Actor":"coderb","Number":"4216","RawContent":null,"Title":"DataGridView filter caused IndexOutOfRangeException","State":"open","Body":"* .NET Core Version:  .NET 5.0.100\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nI have a `DataGridView` with a `DataView` data source that I use the set a `RowFilter`.  It mostly works, but I just got the following stack (with a Dialog popup).  I've never seen this prior to .net 5.0.\r\n\r\n```\r\nPopup: DataGridView Default Error Dialog\r\nThe following exception occurred in the DataGridView:\r\nSystem.IndexOutOfRangeException: Index 1 does not have a value.\r\nat System.Windows.Forms.CurrencyManager.get_Item(Int32 index)\r\nat System.Windows.Forms.DataGridView.DataGridViewConnection.GetError(Int32 rowIndex)\r\n```\r\n\r\n```\r\n \t[Managed to Native Transition]\t\r\n \tSystem.Windows.Forms.Primitives.dll!Interop.User32.MessageBoxW(System.Runtime.InteropServices.HandleRef hWnd, string lpText, string lpCaption, Interop.User32.MB uType)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.MessageBox.ShowCore(System.Windows.Forms.IWin32Window owner, string text, string caption, System.Windows.Forms.MessageBoxButtons buttons, System.Windows.Forms.MessageBoxIcon icon, System.Windows.Forms.MessageBoxDefaultButton defaultButton, System.Windows.Forms.MessageBoxOptions options, bool showHelp) Line 413\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridView.OnDataError(bool displayErrorDialogIfNoHandler, System.Windows.Forms.DataGridViewDataErrorEventArgs e) Line 14636\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridView.OnDataErrorInternal(System.Windows.Forms.DataGridViewDataErrorEventArgs e) Line 14650\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridView.DataGridViewDataConnection.GetError(int rowIndex) Line 1193\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridViewRow.GetErrorText(int rowIndex) Line 1221\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridViewRow.Paint(System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle rowBounds, int rowIndex, System.Windows.Forms.DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow) Line 1402\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridView.PaintRows(System.Drawing.Graphics g, System.Drawing.Rectangle boundingRect, System.Drawing.Rectangle clipRect, bool singleHorizontalBorderAdded) Line 19610\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridView.PaintGrid(System.Drawing.Graphics g, System.Drawing.Rectangle gridBounds, System.Drawing.Rectangle clipRect, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded) Line 19482\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridView.OnPaint(System.Windows.Forms.PaintEventArgs e) Line 16607\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.PaintWithErrorHandling(System.Windows.Forms.PaintEventArgs e, short layer) Line 8621\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.WmPaint(ref System.Windows.Forms.Message m) Line 12345\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.WndProc(ref System.Windows.Forms.Message m) Line 12741\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridView.WndProc(ref System.Windows.Forms.Message m) Line 29102\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.ControlNativeWindow.WndProc(ref System.Windows.Forms.Message m) Line 115\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.NativeWindow.Callback(System.IntPtr hWnd, Interop.User32.WM msg, System.IntPtr wparam, System.IntPtr lparam) Line 372\tC#\r\n \t[Native to Managed Transition]\t\r\n \t[Managed to Native Transition]\t\r\n \tSystem.Windows.Forms.Primitives.dll!Interop.UiaCore.UiaHostProviderFromHwnd(System.Runtime.InteropServices.HandleRef hwnd, out Interop.UiaCore.IRawElementProviderSimple ppProvider)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.ControlAccessibleObject.HostRawElementProvider.get() Line 537\tC#\r\n \t[Native to Managed Transition]\t\r\n \t[Managed to Native Transition]\t\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.AccessibleObject.RaiseAutomationEvent(Interop.UiaCore.UIA eventId) Line 1949\tC#\r\n>\tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridViewCell.DataGridViewCellAccessibleObject.SetFocus() Line 594\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridView.AccessibilityNotifyCurrentCellChanged(System.Drawing.Point cellAddress) Line 54\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridView.SetCurrentCellAddressCore(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick) Line 26233\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridView.SetAndSelectCurrentCellAddress(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick, bool clearSelection, bool forceCurrentCellSelection) Line 26596\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridView.DataGridViewDataConnection.MatchCurrencyManagerPosition(bool scrollIntoView, bool clearSelection) Line 1336\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridView.DataGridViewDataConnection.currencyManager_PositionChanged(object sender, System.EventArgs e) Line 803\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.CurrencyManager.OnPositionChanged(System.EventArgs e) Line 971\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.CurrencyManager.List_ListChanged(object sender, System.ComponentModel.ListChangedEventArgs e) Line 742\tC#\r\n \tSystem.Data.Common.dll!System.Data.DataView.OnListChanged(System.ComponentModel.ListChangedEventArgs e) Line 1434\tC#\r\n \tSystem.Data.Common.dll!System.Data.DataView.UpdateIndex(bool force, bool fireEvent) Line 1634\tC#\r\n \tSystem.Data.Common.dll!System.Data.DataView.SetIndex2(string newSort, System.Data.DataViewRowState newRowStates, System.Data.IFilter newRowFilter, bool fireEvent) Line 1559\tC#\r\n \tSystem.Data.Common.dll!System.Data.DataView.SetIndex(string newSort, System.Data.DataViewRowState newRowStates, System.Data.IFilter newRowFilter) Line 1538\tC#\r\n \tSystem.Data.Common.dll!System.Data.DataView.RowFilter.set(string value) Line 337\tC#\r\n \tmyapp.dll!myapp.MyDataView.SetRowFilter(string value) Line 64\tC#\r\n \tmyapp.dll!myapp.MyDataGridViewContextMenu.miFilterFieldAdd_Click(object sender, System.EventArgs e) Line 293\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ToolStripMenuItem.OnClick(System.EventArgs e) Line 898\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ToolStripItem.HandleClick(System.EventArgs e) Line 2397\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ToolStripItem.HandleMouseUp(System.Windows.Forms.MouseEventArgs e) Line 2579\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ToolStrip.OnMouseUp(System.Windows.Forms.MouseEventArgs mea) Line 3667\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ToolStripDropDown.OnMouseUp(System.Windows.Forms.MouseEventArgs mea) Line 1357\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.WmMouseUp(ref System.Windows.Forms.Message m, System.Windows.Forms.MouseButtons button, int clicks) Line 12106\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.WndProc(ref System.Windows.Forms.Message m) Line 12885\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ScrollableControl.WndProc(ref System.Windows.Forms.Message m) Line 1457\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ToolStrip.WndProc(ref System.Windows.Forms.Message m) Line 4848\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ToolStripDropDown.WndProc(ref System.Windows.Forms.Message m) Line 2098\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.ControlNativeWindow.WndProc(ref System.Windows.Forms.Message m) Line 115\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.NativeWindow.Callback(System.IntPtr hWnd, Interop.User32.WM msg, System.IntPtr wparam, System.IntPtr lparam) Line 372\tC#\r\n \t[Native to Managed Transition]\t\r\n\r\n```","Url":"https://github.com/dotnet/winforms/issues/4216","RelatedDescription":"Open issue \"DataGridView filter caused IndexOutOfRangeException\" (#4216)"},{"Id":"740656508","IsPullRequest":false,"CreatedAt":"2020-11-11T10:32:18","Actor":"DmitryGaravsky","Number":"4214","RawContent":null,"Title":"The ControlPaint.DrawCheckBox results in an incorrect image at 150% scaling when ButtonState.Flat is used","State":"open","Body":"As you can see in the attached screenshot the check-glyph is positioned incorrectly at 150% scaling:\r\n![image](https://user-images.githubusercontent.com/8652582/98800143-0ddc6380-2421-11eb-9997-ea8f1e02f726.png)\r\n\r\n\r\n* .NET Core Version: \r\nSDK Version: 5.0.100\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes, it reproducible both in .Net Framework and .Net 5/.Net Core 3.1\r\n\r\n**Minimal repro:**\r\n```cs\r\nusing System.Drawing;\r\n[CheckBoxScalngIssue.zip](https://github.com/dotnet/winforms/files/5523442/CheckBoxScalngIssue.zip)\r\n\r\nusing System.Windows.Forms;\r\n\r\nnamespace WindowsFormsApp1 {\r\n    public partial class Form1 : Form {\r\n        public Form1() {\r\n            InitializeComponent();\r\n            // checkBox1.FlatStyle = FlatStyle.Flat; // use optionally to try the real control\r\n        }\r\n        void Form1_Paint(object sender, PaintEventArgs e) {\r\n            int h = checkBox1.Height;\r\n            var bounds = new Rectangle(checkBox1.Left, checkBox1.Top + h * 2, h, h);\r\n            var state = checkBox1.Checked ? ButtonState.Checked : ButtonState.Normal;\r\n            ControlPaint.DrawCheckBox(e.Graphics, bounds, state | ButtonState.Flat);\r\n        }\r\n        void checkBox1_CheckedChanged(object sender, System.EventArgs e) {\r\n            Invalidate();\r\n        }\r\n    }\r\n```\r\nAttached is a sample project: [CheckBoxScalngIssue.zip](https://github.com/dotnet/winforms/files/5523444/CheckBoxScalngIssue.zip).\r\n\r\n**Expected behavior:**\r\nThe check-glyph should be centered within the check-box bounds\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/4214","RelatedDescription":"Open issue \"The ControlPaint.DrawCheckBox results in an incorrect image at 150% scaling when ButtonState.Flat is used\" (#4214)"},{"Id":"740475866","IsPullRequest":false,"CreatedAt":"2020-11-11T05:31:55","Actor":"RussKie","Number":"4213","RawContent":null,"Title":"Flaky test: `GroupBox_FlatStyle_VisualStyles_on_SetWithCustomOldValue_GetReturnsExpected` with visual styles on","State":"open","Body":"The test executed from VS returns all green, run from a cli however the test fails:\r\n```\r\n    System.Windows.Forms.Tests.GroupBoxTests.GroupBox_FlatStyle_VisualStyles_on_SetWithCustomOldValue_GetReturnsExpected(oldValue: Popup, value: System, containerControl: True, ownerDraw: False, userMouse: False, expectedInvalidatedCallCount: 1, expectedCreatedCallCount: 1) [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: 1\r\n      Actual:   0\r\n      Stack Trace:\r\n        C:\\Development\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\GroupBoxTests.cs(879,0): at System.Windows.Forms.Tests.GroupBoxTests.GroupBox_FlatStyle_VisualStyles_on_SetWithCustomOldValue_GetReturnsExpected(FlatStyle oldValue, FlatStyle value, Boolean containerControl, Boolean ownerDraw, Boolean userMouse, Int32 expectedInvalidatedCallCount, Int32 expectedCreatedCallCount)\r\n    System.Windows.Forms.Tests.GroupBoxTests.GroupBox_FlatStyle_VisualStyles_on_SetWithCustomOldValue_GetReturnsExpected(oldValue: Standard, value: System, containerControl: True, ownerDraw: False, userMouse: False, expectedInvalidatedCallCount: 1, expectedCreatedCallCount: 1) [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: 1\r\n      Actual:   0\r\n      Stack Trace:\r\n        C:\\Development\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\GroupBoxTests.cs(879,0): at System.Windows.Forms.Tests.GroupBoxTests.GroupBox_FlatStyle_VisualStyles_on_SetWithCustomOldValue_GetReturnsExpected(FlatStyle oldValue, FlatStyle value, Boolean containerControl, Boolean ownerDraw, Boolean userMouse, Int32 expectedInvalidatedCallCount, Int32 expectedCreatedCallCount)\r\n```\r\n\r\nRelates to https://github.com/dotnet/winforms/pull/4197","Url":"https://github.com/dotnet/winforms/issues/4213","RelatedDescription":"Open issue \"Flaky test: `GroupBox_FlatStyle_VisualStyles_on_SetWithCustomOldValue_GetReturnsExpected` with visual styles on\" (#4213)"},{"Id":"740439464","IsPullRequest":false,"CreatedAt":"2020-11-11T04:01:27","Actor":"RussKie","Number":"4212","RawContent":null,"Title":"Add control rendering tests with enabled visual styles","State":"open","Body":"We have a number of rendering tests, however all of them have been developed for disabled visual styles.\r\nNew tests need to be added to:\r\n* [ ] NumericUpDownTests (https://github.com/dotnet/winforms/blob/master/src/System.Windows.Forms/tests/UnitTests/NumericUpDownTests.cs)\r\n* [ ] ButtonRenderingTests (https://github.com/dotnet/winforms/blob/master/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/ButtonRenderingTests.cs)\r\n\r\n\r\nRelates to https://github.com/dotnet/winforms/pull/4197","Url":"https://github.com/dotnet/winforms/issues/4212","RelatedDescription":"Open issue \"Add control rendering tests with enabled visual styles\" (#4212)"},{"Id":"740434148","IsPullRequest":false,"CreatedAt":"2020-11-11T03:45:36","Actor":"RussKie","Number":"4211","RawContent":null,"Title":"`NumericUpDownTests` tests need to split into granular test","State":"open","Body":"`NumericUpDown_BasicRendering` test currently asserts multiple states of the `NumericUpDown` controls such as rendering when the control is enabled and when it is disabled.\r\nhttps://github.com/dotnet/winforms/blob/57b305f1548d8338170971fe1f5184b7145c8adb/src/System.Windows.Forms/tests/UnitTests/NumericUpDownTests.cs#L24-L82\r\n\r\nThe test must be split into smaller tests that assert a single case, e.g. `NumericUpDown_BasicRendering_enabled` and ``NumericUpDown_BasicRendering_disabled`.","Url":"https://github.com/dotnet/winforms/issues/4211","RelatedDescription":"Open issue \"`NumericUpDownTests` tests need to split into granular test\" (#4211)"},{"Id":"740370799","IsPullRequest":true,"CreatedAt":"2020-11-11T01:15:52","Actor":"RussKie","Number":"4209","RawContent":null,"Title":"Correct `EnumVariantObject` definition (servicing)","State":"open","Body":"(cherry picked from commit 5af42bfbe9047fc744ff08db120129e87808481d)\r\n\r\nFixes #4120 (`LinkLabel` accessiblity tree)\r\nFixes #4121 (`CheckedListBox` accessiblity tree)\r\nFixes #4130 (MSAA `UpDown` controls)\r\nFixes #4172 (MSAA `CheckedListBox`)\r\n\r\nRegression from 0c4d3cb9198d9246e85af732c8fa81c3f3e0d88c\r\n\r\n## Proposed changes\r\n\r\n- Cast `currentChild` from `uint` to `int` before using in Marshal.GetNativeVariantForObject\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- A user can see a correct accessibility tree for controls that don't support the UIA provider using Inspect tool\r\n\r\n## Regression? \r\n\r\n- Yes (from 0c4d3cb9198d9246e85af732c8fa81c3f3e0d88c)\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n- `CheckedListBox` doesn't have internal items AccessibleObjects in the accessibility tree\r\n![image](https://user-images.githubusercontent.com/49272759/97482828-b7265280-1967-11eb-920e-e90a0d778ec1.png)\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n- `CheckedListBox` has the correct accessibility tree with the internal items\r\n![image](https://user-images.githubusercontent.com/49272759/97482428-35cec000-1967-11eb-9951-ad90abb0195d.png)\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n- CTI\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Using Inspect tool\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .Net Version: 6.0.0-alpha.1.20513.9\r\n- Microsoft Windows [Version 10.0.19042.572]\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4168)\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4209)","Url":"https://github.com/dotnet/winforms/pull/4209","RelatedDescription":"Open PR \"Correct `EnumVariantObject` definition (servicing)\" (#4209)"},{"Id":"739492169","IsPullRequest":true,"CreatedAt":"2020-11-10T21:43:56","Actor":"davidwengier","Number":"4203","RawContent":null,"Title":"Cache semantic models per syntax tree","State":"closed","Body":"Hopefully this is a mitigation for [AB#1241130](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1241130) before the real work is done in the compiler.\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4203)","Url":"https://github.com/dotnet/winforms/pull/4203","RelatedDescription":"Closed or merged PR \"Cache semantic models per syntax tree\" (#4203)"},{"Id":"740137200","IsPullRequest":true,"CreatedAt":"2020-11-10T18:49:11","Actor":"dotnet-maestro[bot]","Number":"4208","RawContent":null,"Title":"[release/5.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:7ad8a074-d804-46e2-eafe-08d86aff023e)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 7ad8a074-d804-46e2-eafe-08d86aff023e\r\n- **Build**: 20201110.3\r\n- **Date Produced**: 11/10/2020 4:51 PM\r\n- **Commit**: 6f54e001de0c52e52578e5252cb279f5bc9a2eb6\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.GenFacades**: [from 5.0.0-beta.20510.1 to 5.0.0-beta.20560.3][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 5.0.0-beta.20510.1 to 5.0.0-beta.20560.3][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 5.0.0-beta.20510.1 to 5.0.0-beta.20560.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 5.0.0-beta.20510.1 to 5.0.0-beta.20560.3][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 5.0.0-beta.20510.1 to 5.0.0-beta.20560.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/6813f5a...6f54e00\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates sdk.version to 5.0.100\r\n  - Updates tools.dotnet to 5.0.100\r\n\r\n[marker]: <> (End:7ad8a074-d804-46e2-eafe-08d86aff023e)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4208)","Url":"https://github.com/dotnet/winforms/pull/4208","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dotnet/arcade\" (#4208)"},{"Id":"739780132","IsPullRequest":false,"CreatedAt":"2020-11-10T10:21:55","Actor":"Jessie-Zhang01","Number":"4207","RawContent":null,"Title":"[Accessibility] Missing the \"Items\" list level for DomainUpDown control in the inspect tool","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 6.0.100-alpha.1.20559.3\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**More info**\r\n\r\n1. The issue also can reproduce on .NET 5.0 RC2.\r\n2. The issue can't reproduce on .NET SDK 3.1 and .NET 4.8.\r\n\r\n**Problem description:**\r\nMissing the \"Items\" list level for DomainUpDown control in the inspect tool with UI Automation mode.\r\n\r\n**Minimal repro:**\r\n\r\n1. Create a .NET Core project with a DomainUpDown control.\r\n2. Build and run the core project.\r\n3. Observe the DomainUpDown control in the Inspect tool on UI Automation mode.\r\n\r\nOr\r\n\r\n1. Open the attached project.\r\n2. Build and run the core project.\r\n3. Observe the domainUpDown1 control in the Inspect tool on UI Automation mode.\r\n[WindowsFormsApp6.zip](https://github.com/dotnet/winforms/files/5516503/WindowsFormsApp6.zip)\r\n\r\n\r\n**Expected behavior:**\r\nIt displays the correct levels for domainUpDown1 control in the Inspect tool.\r\n![image](https://user-images.githubusercontent.com/45864649/98657047-673e8700-237c-11eb-87e1-a87e70597443.png)\r\n\r\n**Actual Behavior:**\r\nMissing the \"linkLabel1 link\" level for domainUpDown1 control in the inspect tool.\r\n![image](https://user-images.githubusercontent.com/45864649/98657393-ca301e00-237c-11eb-9d5f-bb7e24049802.png)","Url":"https://github.com/dotnet/winforms/issues/4207","RelatedDescription":"Open issue \"[Accessibility] Missing the \"Items\" list level for DomainUpDown control in the inspect tool\" (#4207)"},{"Id":"739779910","IsPullRequest":false,"CreatedAt":"2020-11-10T10:21:37","Actor":"Jessie-Zhang01","Number":"4206","RawContent":null,"Title":"[Accessibility] Increase the \"group\" list level of the ListView control in the inspection tool","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 6.0.100-alpha.1.20559.3\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**More info**\r\n\r\n1. The issue also can reproduce on .NET 5.0 RC2.\r\n2. The issue can't reproduce on .NET SDK 3.1 and .NET 4.8.\r\n\r\n**Problem description:**\r\nIncrease the \"group\" list level of the ListView control in the inspection tool with UI Automation mode.\r\n\r\n**Minimal repro:**\r\n\r\n1. Open the attached project.\r\n2. Build and run the core project.\r\n3. Observe the listView1 control in the Inspect tool on UI Automation mode.\r\n[WindowsFormsApp7.zip](https://github.com/dotnet/winforms/files/5516506/WindowsFormsApp7.zip)\r\n\r\n\r\n**Expected behavior:**\r\nThere is the additional \"group\" list level of the ListView control in the inspection tool.\r\n![image](https://user-images.githubusercontent.com/45864649/98660329-26e10800-2380-11eb-9cce-f5424b0409e3.png)\r\n\r\n**Actual Behavior:**\r\nIncrease the \"group\" list level of the ListView control in the inspection tool\r\n![image](https://user-images.githubusercontent.com/45864649/98660433-437d4000-2380-11eb-9e29-605f7f7b1689.png)","Url":"https://github.com/dotnet/winforms/issues/4206","RelatedDescription":"Open issue \"[Accessibility] Increase the \"group\" list level of the ListView control in the inspection tool\" (#4206)"},{"Id":"739680813","IsPullRequest":false,"CreatedAt":"2020-11-10T08:00:06","Actor":"SergeySmirnov-Akvelon","Number":"4205","RawContent":null,"Title":"ListView groups displayed in Inspect when visual styles are disabled","State":"open","Body":"* .NET Core Version: \r\n5.0.100-rc.2.20479.15\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Additional data**\r\nIssue is not reproduced on .NET Core 3.1\r\n\r\n**Minimal repro**\r\n1. Create application with ListView.\r\n2. Add Group to ListView.\r\n3. Add two items with group and two items without group.\r\n4. Disable visual styles (remove \"Application.EnableVisualStyles();\" string from Program.cs)\r\n5. Or import attached application ([Issue-4205.zip](https://github.com/dotnet/winforms/files/5515750/Issue-4205.zip))\r\n6. Run application\r\n7. Open Inspect\r\n8. Try to get data about ListView items\r\n\r\n**Actual behavior:**\r\nGroups are displayed in Inspect. Second item from group is not displayed in Inspect.\r\n![4205-issue](https://user-images.githubusercontent.com/23376742/98647044-50c90900-2345-11eb-8b94-553045c59d2f.png)\r\n\r\n**Expected behavior:**\r\nGroups should not be displayed in Inspect. All items should be available in Inspect.\r\n![4205-correct](https://user-images.githubusercontent.com/23376742/98647056-54f52680-2345-11eb-8b5a-268e778e7919.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/4205","RelatedDescription":"Open issue \"ListView groups displayed in Inspect when visual styles are disabled\" (#4205)"},{"Id":"737743316","IsPullRequest":true,"CreatedAt":"2020-11-10T00:44:41","Actor":"dotnet-maestro[bot]","Number":"4199","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20201107.2\r\n- **Date Produced**: 11/7/2020 4:59 PM\r\n- **Commit**: 6cfef20c1524b8d4c1495a652dfe9e898c5a486b\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **Microsoft.NETCore.App**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **Microsoft.NETCore.App.Internal**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.20554.9 to 6.0.0-alpha.1.20557.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/2cf2f57...6cfef20\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4199)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/4199","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4199)"},{"Id":"739455624","IsPullRequest":true,"CreatedAt":"2020-11-10T00:29:35","Actor":"RussKie","Number":"4202","RawContent":null,"Title":"Update branding to 5.0.1","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4202)","Url":"https://github.com/dotnet/winforms/pull/4202","RelatedDescription":"Closed or merged PR \"Update branding to 5.0.1\" (#4202)"},{"Id":"738654765","IsPullRequest":false,"CreatedAt":"2020-11-09T03:58:07","Actor":"RussKie","Number":"4200","RawContent":null,"Title":"Enable visual styles in test","State":"open","Body":"**Problem description:**\r\n\r\nCurrently our tests are run with visual styles off, and a number of selected tests (that require visual styles) are run via `RemoteExecutor`, or run as integration tests via MAUI test project.\r\n\r\nThis configuration has the following issues:\r\n- The majority of our users run their apps with visual styles on, so we are not testing the main scenario.\r\n- By not running tests with visual styles, the tests are run against comctl32 v5, not v6. They have different implementations, and observed test issues are likely totally unrepresentative of situations the majority of our users may encounter.\r\n- `RemoteExecutor` has proven to be very unstable and problematic, and a number of tests the rely on it has been disabled (https://github.com/dotnet/winforms/pull/3633)\r\n\r\n**Expected:**\r\n\r\n1. Enable visual styles in tests, and fix failing tests\r\n2. Remove reliance on `RemoteExecutor`\r\n3. Consider running the test suite with and without visual styles (skipping those tests that do not work in one configuration or the other).\r\n\r\n\r\n/cc: @AdamYoblick for visibility","Url":"https://github.com/dotnet/winforms/issues/4200","RelatedDescription":"Open issue \"Enable visual styles in test\" (#4200)"},{"Id":"737639996","IsPullRequest":false,"CreatedAt":"2020-11-06T10:16:19","Actor":"Olina-Zhang","Number":"4198","RawContent":null,"Title":"AccessibilityInsight: The edit listview item must support the Text pattern when ListView's LabelEdit is true","State":"open","Body":"* .NET Core Version: \r\n.Net SDK 6.0.100-alpha.1.20555.6\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Minimal repro:**\r\n1. Open the attached WindowsFormsApp7.zip application in VS, then build and run it.\r\n[WindowsFormsApp7.zip](https://github.com/dotnet/winforms/files/5500560/WindowsFormsApp7.zip)\r\n2. Launch AccessibilityInsight  tool to focus on ListView control\r\n\r\n**Actual behavior:**\r\nWhen ListView's LabelEdit property is true, the edit ListView items doesn't support the Text Pattern, and AccessibilityInsight detects this error.\r\n![image](https://user-images.githubusercontent.com/26474449/98354714-10733d80-205c-11eb-8872-da1f3a408db7.png)\r\n\r\n**Expected behavior:**\r\nWhen ListView's LabelEdit property is true, the edit ListView items support the Text Pattern.\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/4198","RelatedDescription":"Open issue \"AccessibilityInsight: The edit listview item must support the Text pattern when ListView's LabelEdit is true\" (#4198)"},{"Id":"736917719","IsPullRequest":true,"CreatedAt":"2020-11-06T06:03:44","Actor":"dotnet-maestro[bot]","Number":"4195","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20201104.9\r\n- **Date Produced**: 11/5/2020 7:54 AM\r\n- **Commit**: 2cf2f5789f612364fedd36b24f55be617a244a55\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **Microsoft.NETCore.App**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **Microsoft.NETCore.App.Internal**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.20553.9 to 6.0.0-alpha.1.20554.9][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/4730697...2cf2f57\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4195)","Url":"https://github.com/dotnet/winforms/pull/4195","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4195)"},{"Id":"737323668","IsPullRequest":true,"CreatedAt":"2020-11-06T05:32:55","Actor":"RussKie","Number":"4196","RawContent":null,"Title":"Fix locale dependent tests","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4196)","Url":"https://github.com/dotnet/winforms/pull/4196","RelatedDescription":"Closed or merged PR \"Fix locale dependent tests\" (#4196)"},{"Id":"736459808","IsPullRequest":false,"CreatedAt":"2020-11-04T22:17:08","Actor":"AdamYoblick","Number":"4194","RawContent":null,"Title":"Fix XML triple slash docs per docs team suggestions","State":"open","Body":"See feedback in https://github.com/dotnet/dotnet-api-docs/pull/5078 for suggestions.\r\n\r\n1. Make the fixes in winforms source\r\n2. Get those changes merged into master\r\n3. Regenerate the XML docs and PR them into the dotnet-api-docs repo\r\n   * See https://github.com/dotnet/winforms/issues/4163#issuecomment-718165661 for instructions on how to do that","Url":"https://github.com/dotnet/winforms/issues/4194","RelatedDescription":"Open issue \"Fix XML triple slash docs per docs team suggestions\" (#4194)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-11-13T05:30:50.459836Z","RunDurationInMilliseconds":682}