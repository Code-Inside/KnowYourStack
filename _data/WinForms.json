{"Data":{"GitHub":{"Issues":[{"Id":"623828168","IsPullRequest":true,"CreatedAt":"2020-05-27T01:01:04","Actor":"filipnavara","Number":"3337","RawContent":null,"Title":"Avoid unnecessarily creating ToolStripDropDownMenu due to keyboard tooltip hook","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3248\r\n\r\n## Proposed changes\r\n\r\n- Avoid accessing the `DropDown` property of menu items when there is no drop-down present. The property would always create one which is unintended.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Less memory used\r\n\r\n## Regression? \r\n\r\n- Not sure. I couldn't track down when the code for keyboard hooks was first added, the rest of the code tries to avoid unintentionally creating the drop-down objects.\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Tested on production application running under SciTech Memory Profiler\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET 5 (master, winforms@d851dac649d74c3a1d2b416713dd22de14b93fe1)\r\n- .NET Core 3.1.200 with backported fix\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3337)","Url":"https://github.com/dotnet/winforms/pull/3337","RelatedDescription":"Closed or merged PR \"Avoid unnecessarily creating ToolStripDropDownMenu due to keyboard tooltip hook\" (#3337)"},{"Id":"625118742","IsPullRequest":true,"CreatedAt":"2020-05-27T00:21:53","Actor":"gpetrou","Number":"3351","RawContent":null,"Title":"Add EN enum in Interop RichEdit","State":"closed","Body":"## Proposed changes\r\n\r\n- Add EN enum in Interop RichEdit.\r\n- Remove EN constants and replace their usages with the above enum values.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3351)","Url":"https://github.com/dotnet/winforms/pull/3351","RelatedDescription":"Closed or merged PR \"Add EN enum in Interop RichEdit\" (#3351)"},{"Id":"625280344","IsPullRequest":true,"CreatedAt":"2020-05-27T00:17:04","Actor":"KlausLoeffelmann","Number":"3352","RawContent":null,"Title":"Implement minimal Visual Basic Application Framework WinForms app.","State":"open","Body":"This PR adds a minimal Visual Basic WinForms app project, which uses the Visual Basic Application Framework, to the test folder.\r\n\r\n**Note:** This app is to have a central lookup spot how to activate the application framework for Visual Basic WinForms net 5.0 apps as long as there isn't a UI to setup the Application Framework parameters.\r\n\r\n**Issues:**\r\n* HighDpiMode is setup in the StartUp Application Event.\r\n* SingleInstance cannot be set, since this is currently not supported.\r\n* Changes of the Application Framework Settings can only be made directly by patching the _My project\\Application.Designer.vb_ file. Changes to _Application.myapp_ don't have any effect.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3352)","Url":"https://github.com/dotnet/winforms/pull/3352","RelatedDescription":"Open PR \"Implement minimal Visual Basic Application Framework WinForms app.\" (#3352)"},{"Id":"625037646","IsPullRequest":true,"CreatedAt":"2020-05-26T17:21:56","Actor":"ViktorHofer","Number":"3350","RawContent":null,"Title":"Update templates to net5.0 (#3344)","State":"closed","Body":"Cherry-pick of https://github.com/dotnet/winforms/commit/f881902a3860bc6d0c348aacdbea51ea63bbd9b8\r\n\r\ncc @RussKie @mmitche \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3350)","Url":"https://github.com/dotnet/winforms/pull/3350","RelatedDescription":"Closed or merged PR \"Update templates to net5.0 (#3344)\" (#3350)"},{"Id":"624688965","IsPullRequest":true,"CreatedAt":"2020-05-26T08:15:54","Actor":"hughbe","Number":"3349","RawContent":null,"Title":"Add tests for HtmlElement/HtmlDocument","State":"open","Body":"Extracted from https://github.com/dotnet/winforms/pull/3326\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3349)","Url":"https://github.com/dotnet/winforms/pull/3349","RelatedDescription":"Open PR \"Add tests for HtmlElement/HtmlDocument\" (#3349)"},{"Id":"624587371","IsPullRequest":false,"CreatedAt":"2020-05-26T04:07:21","Actor":"RussKie","Number":"3348","RawContent":null,"Title":"Track finalization","State":"open","Body":"\r\n\r\n**Problem description:**\r\n\r\nhttps://github.com/dotnet/winforms/pull/3169 cleaned out a number of `FINALIZATION_WATCH`. \r\nConsider how we want to track finalization so that we can shake out issues in disposal as we're clearly having problems in our test runs.\r\n","Url":"https://github.com/dotnet/winforms/issues/3348","RelatedDescription":"Open issue \"Track finalization\" (#3348)"},{"Id":"624550469","IsPullRequest":false,"CreatedAt":"2020-05-26T01:52:52","Actor":"199621616","Number":"3347","RawContent":null,"Title":"Net5.0Preview4 Title blur when window is maximized","State":"closed","Body":".NET Core Version: \r\n\r\n.NET SDKs installed:\r\n  3.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-preview.4.20258.7 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.4.20257.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.4.20251.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0-preview.4.20251.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\nHave you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n\r\nProblem description:\r\n Title blur when window is maximized\r\nNot is maximized,Display normal\r\nUsing components\r\nDevComponents.DotNetBar2\r\n\r\n![0](https://user-images.githubusercontent.com/25498672/82852754-5ae18180-9f36-11ea-9cf6-ac48f7fbe1cd.jpg)\r\n![1](https://user-images.githubusercontent.com/25498672/82852771-68970700-9f36-11ea-89c3-e7d811faafbf.PNG)\r\n\r\n\r\nExpected behavior:\r\nmaximized,Display normal\r\n\r\nMinimal repro\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3347","RelatedDescription":"Closed issue \"Net5.0Preview4 Title blur when window is maximized\" (#3347)"},{"Id":"624544213","IsPullRequest":false,"CreatedAt":"2020-05-26T01:25:14","Actor":"docfresh","Number":"3346","RawContent":null,"Title":"Creating/Saving a Settings file throws error","State":"open","Body":"* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nI used try-convert to convert a near-empty .NET 4.72 Framework project to .NET Core.\r\n\r\nWhen trying to add a settings file, I get the error \"An error occurred while reading the app. config file. The file might be corrupted or contain invalid XML\" when creating a new Settings file and saving it.  I also get the error \"The Method or operation is not implemented\" when clicking the \"View Code\" button. The settings do seem to work though.\r\n\r\nEven if I delete and recreate the settings file, I still get the error.\r\n\r\n![image](https://user-images.githubusercontent.com/8064022/82851160-89bf0f80-9ec4-11ea-9c1e-85d9e2b379dc.png)\r\n\r\n\r\n**Expected behavior:**\r\nDon't get an error.\r\n\r\n**Minimal repro:**\r\n1. Create new WinForms .NET Core project.\r\n2. Solution Explorer -> Right Click -> Add\r\n3. Search for \"Settings File\" \r\n4. Create Settings File and add one boolean setting with a default value of False\r\n5. Get the error message\r\n","Url":"https://github.com/dotnet/winforms/issues/3346","RelatedDescription":"Open issue \"Creating/Saving a Settings file throws error\" (#3346)"},{"Id":"624532149","IsPullRequest":false,"CreatedAt":"2020-05-26T00:29:14","Actor":"docfresh","Number":"3345","RawContent":null,"Title":"Remember Property Grid display style choice in Menu Items Collection Editor","State":"open","Body":"A MenuStrip's Items Collection Editor shows the MenuItems, and the properties for them in a property grid.\r\n\r\nThe property grid can be displayed 1 of 2 ways: Categorized, or Alphabetized. \r\n\r\nUnfortunately, it does not remember my preference.  I always prefer to see the grid alphabetized, but every time I go back into the Items Collection Editor, the property grid is displayed \"Categorized\"\r\n\r\n![image](https://user-images.githubusercontent.com/8064022/82849403-6c3a7780-9ebd-11ea-97f6-f62a47dccb2a.png)\r\n\r\nTested in 16.7 Preview 1\r\n\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n\r\nRemember whether the User last selected Categorized or Alphabetized.\r\n\r\nOr remember the setting based on the type of Items being edited in the Collection Editor. For example, maybe I want to see properties of ListView Columns in a categorized view, but I want to see ListView Items in an Alphabetized view.\r\n\r\n\r\n\r\n**Will this feature affect UI controls?**\r\nNo\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3345","RelatedDescription":"Open issue \"Remember Property Grid display style choice in Menu Items Collection Editor\" (#3345)"},{"Id":"624188281","IsPullRequest":false,"CreatedAt":"2020-05-25T23:19:07","Actor":"John-Qiao","Number":"3343","RawContent":null,"Title":"The version of System.Windows.Forms.dll is incorrect","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET Core 3.1.300\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**More info:** \r\n\r\n1. This issue occurs in other Winforms .NET Core 3.1 dlls too.  \r\n2. This issue occurs in the latest .NET Core 3.1 dlls too.\r\n3. This issue does not occur in .NET Core 5.0\r\n![Core5 0](https://user-images.githubusercontent.com/45864985/82801858-8e79c880-9eb0-11ea-9a09-9e747da7d1ce.png)\r\n\r\n**Problem description:**\r\nThe version of .NET Core 3.1 System.Windows.Forms.dll is incorrect.\r\n![Core3 1](https://user-images.githubusercontent.com/45864985/82801878-96396d00-9eb0-11ea-8b92-a3a15487018f.png)\r\n\r\n**Expected behavior:**\r\nThe version of System.Windows.Forms.dll should be consistent with .NET Core version. \r\n\r\n**Minimal repro:**\r\n\r\n1. Download and install VS 2019 from here: https://visualstudio.microsoft.com/downloads/\r\n2. Open the C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App\\3.1.4 folder and check the version of System.Windows.Forms.dll in it.\r\n","Url":"https://github.com/dotnet/winforms/issues/3343","RelatedDescription":"Closed issue \"The version of System.Windows.Forms.dll is incorrect\" (#3343)"},{"Id":"623910366","IsPullRequest":false,"CreatedAt":"2020-05-25T23:05:51","Actor":"ekolis","Number":"3339","RawContent":null,"Title":"User control designer does not work for .NET Core","State":"closed","Body":"* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\n1. Create a WinForms project.\r\n2. Add a user control to the project.\r\n3. Open the designer for the user control.\r\n\r\nI get this error:\r\n\r\n> Expected a proxy type,  Microsoft.VisualStudio.WinForms.RemoteClient.Proxies.ComponentProxy.\r\n\r\n**Expected behavior:**\r\n The control designer opens.\r\n\r\n**Minimal repro:**\r\nsee attached\r\n[BrokenUserControlDesigner.zip](https://github.com/dotnet/winforms/files/4674080/BrokenUserControlDesigner.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3339","RelatedDescription":"Closed issue \"User control designer does not work for .NET Core\" (#3339)"},{"Id":"624324350","IsPullRequest":true,"CreatedAt":"2020-05-25T15:19:31","Actor":"ViktorHofer","Number":"3344","RawContent":null,"Title":"Update templates to net5.0","State":"closed","Body":"SDK related issue dotnet/sdk#11706\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3344)","Url":"https://github.com/dotnet/winforms/pull/3344","RelatedDescription":"Closed or merged PR \"Update templates to net5.0\" (#3344)"},{"Id":"624052867","IsPullRequest":false,"CreatedAt":"2020-05-25T05:23:28","Actor":"docfresh","Number":"3342","RawContent":null,"Title":"Cannot rename ToolStripMenuItem in Items Collection Editor","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nI cannot rename toolStripMenuItems in the Items Collection Editor.\r\n\r\n**Expected behavior:**\r\nThe item should be renamed.\r\n\r\n**Minimal repro:**\r\n\r\n1. Create a MenuStrip in a .NET Core Winforms app\r\n2. Add a few items in the Items Collection Editor\r\n3. Try to rename an item in the property grid under (Name)\r\n4. Item does not rename, reverts to the default name\r\n\r\n![image](https://user-images.githubusercontent.com/8064022/82780814-f03d2280-9e1d-11ea-950f-99b16162ebac.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/3342","RelatedDescription":"Open issue \"Cannot rename ToolStripMenuItem in Items Collection Editor\" (#3342)"},{"Id":"623922935","IsPullRequest":true,"CreatedAt":"2020-05-24T18:52:18","Actor":"wjk","Number":"3341","RawContent":null,"Title":"Add FontProperty.TextFont","State":"open","Body":"Fixes #3340\r\n\r\n## Proposed changes\r\n\r\n- Add `FontProperty.TextFont`, which maps to `TMT_FONT` on the native side.\r\n\r\n## Customer Impact\r\n\r\n- I can now get the font used by \"instruction text\" in Windows using class name `TEXTSTYLE`, part 1, state 0, and `FontProperty.TextFont`.\r\n\r\n## Regression? \r\n\r\n- No, this was never before possible.\r\n\r\n## Risk\r\n\r\n- This is a new feature, it should not break anything.\r\n\r\n## Test methodology\r\n\r\n- No unit tests yet. Guidance here would be appreciated.\r\n\r\n## Test environment(s)\r\n\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.100-preview.5.20264.10\r\n Commit:    b0f362349a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19631\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-preview.5.20264.10\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-preview.6.20264.1\r\n  Commit:  bdd7235c43\r\n\r\n.NET SDKs installed:\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.300-preview-015135 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-preview.5.20264.10 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.5.20255.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.6.20264.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0-preview.6.20263.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nTry using the above element using different themes, both the normal theme and with High Contrast enabled. (The fonts returned aren't guaranteed to be different, but this is how you would manually test this.) This feature builds on top of existing High-DPI support in Windows Forms.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3341)","Url":"https://github.com/dotnet/winforms/pull/3341","RelatedDescription":"Open PR \"Add FontProperty.TextFont\" (#3341)"},{"Id":"623922200","IsPullRequest":false,"CreatedAt":"2020-05-24T18:48:03","Actor":"wjk","Number":"3340","RawContent":null,"Title":"Add support for TMT_FONT","State":"open","Body":"To make my app look more like native Windows components, while still supporting High Contrast themes, I use VisualStyleRenderer to draw \"instruction text\" (like the TaskDialog uses). In the default theme, this is 12-point Segoe UI, foreground color `#003399`. To do this, I use the class `TEXTSTYLE`, part 1, and state 0 (these values come from `vsstyle.h` in the Windows SDK).\r\n\r\nHowever, when I attempt this, `VisualStyleRenderer.GetFont(FontProperty.GlyphFont)` returns null. Investigation using a tool that dumps aero.msstyles reveals that the above class/part/state combination defines `TMT_FONT`, but not `TMT_GLYPHFONT`, which is the only valid FontProperty in Windows Forms. Therefore, I must manually P/Invoke into uxtheme.dll every time I want to accomplish this task. I wish to avoid having to do this.\r\n\r\nProposed API is as follows:\r\n\r\n```diff\r\n enum FontProperty {\r\n+    TextFont = (int)Interop.TMT.FONT,\r\n     GlyphFont = (int)Interop.TMT.GLYPHFONT\r\n }\r\n```\r\n\r\nI would also need to update the VisualStyleRenderer class to accept this FontProperty value. This feature does not need VS designer support, should not impact accessibility, and does not need to be localized. Thanks!","Url":"https://github.com/dotnet/winforms/issues/3340","RelatedDescription":"Open issue \"Add support for TMT_FONT\" (#3340)"},{"Id":"623909297","IsPullRequest":false,"CreatedAt":"2020-05-24T17:34:43","Actor":"ekolis","Number":"3338","RawContent":null,"Title":"Inherited forms don't work in the designer for .NET Core","State":"open","Body":"* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\n1. Create a .NET Core WinForms app.\r\n2. Create a form.\r\n3. Create a second form.\r\n4. Edit the second form's code behind to make it inherit from the first form.\r\n5. Open the visual designer for the second form.\r\n\r\nThe designer will then crash with this error: \r\n\r\n> The designer could not be shown for this file because none of the classes within  it can be designed. The designer inspected the following classes in the file:  The designer could not be shown for this file because none of the classes within  it can be designed. The designer inspected the following classes in the file:  \\r\\n Form2 --- The base class 'BrokenFormsInheritance.Form1' could not be  loaded. Ensure the assembly has been referenced and that all projects have been  built. | The designer could not be shown for this file because none of the classes within  it can be designed. The designer inspected the following classes in the file:  The designer could not be shown for this file because none of the classes within  it can be designed. The designer inspected the following classes in the file:  \\r\\n Form2 --- The base class 'BrokenFormsInheritance.Form1' could not be  loaded. Ensure the assembly has been referenced and that all projects have been  built.\r\n-- | --\r\nThe designer could not be shown for this file because none of the classes within  it can be designed. The designer inspected the following classes in the file:  The designer could not be shown for this file because none of the classes within  it can be designed. The designer inspected the following classes in the file:  \\r\\n Form2 --- The base class 'BrokenFormsInheritance.Form1' could not be  loaded. Ensure the assembly has been referenced and that all projects have been  built.\r\n\r\n\r\n6. Build the project as the error indicates.\r\n\r\nThe error will remain regardless of if I build the project.\r\n\r\n**Expected behavior:**\r\n\r\nThe designer opens.\r\n\r\n**Minimal repro:**\r\n\r\nsee attached\r\n\r\n[BrokenFormsInheritance.zip](https://github.com/dotnet/winforms/files/4674071/BrokenFormsInheritance.zip)","Url":"https://github.com/dotnet/winforms/issues/3338","RelatedDescription":"Open issue \"Inherited forms don't work in the designer for .NET Core\" (#3338)"},{"Id":"623726700","IsPullRequest":false,"CreatedAt":"2020-05-23T19:30:07","Actor":"weltkante","Number":"3336","RawContent":null,"Title":"DragDrop unit tests hang, should be integration tests","State":"open","Body":"**.NET Core Version:**\r\nmaster\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nnot applicable\r\n\r\n**Problem description:**\r\nDoDragDrop tests in ToolStripItemTests and ControlTests are hanging CI.\r\n\r\nNot sure if its worth to root-cause the hang, I think they should be integration tests instead as proper drag'n'drop tests need mouse interaction, otherwise OLE probably exits out very early. These tests basically just cover a failure case which in practice nobody is interested in (and can easily be covered by the integration test as well). Sure, its useful to ensure that a noop failure case stays a noop failure case, but it may give a false sense of test coverage if there is actually no test of the code paths used for successful drag'n'drop.\r\n\r\n**Expected behavior:**\r\n* DoDragDrop tests should not hang CI\r\n* DoDragDrop tests should cover non-failure-cases (requires integration test)\r\n\r\n**Minimal repro:**\r\n* run the tests with xunit.stafact updated to 1.0.33 or unskip them from PR #3276\r\n","Url":"https://github.com/dotnet/winforms/issues/3336","RelatedDescription":"Open issue \"DragDrop unit tests hang, should be integration tests\" (#3336)"},{"Id":"623623027","IsPullRequest":true,"CreatedAt":"2020-05-23T09:52:25","Actor":"hughbe","Number":"3335","RawContent":null,"Title":"Avoid initializing native tools twice","State":"open","Body":"## Proposed Changes\r\nExample log from running `build.ps1`\r\n```\r\nPS C:\\Users\\hughbe\\Documents\\GitHub\\winforms> .\\build-local.ps1\r\nBuilding the solution...\r\nProcessing C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\eng\\..\\global.json\r\nFile 'C:\\Users\\hughbe\\.netcoreeng\\native\\temp\\cmake-3.14.2-win64-x64.zip' already exists, skipping download\r\nFile 'C:\\Users\\hughbe\\.netcoreeng\\native\\temp\\WinShimmer.zip' already exists, skipping download\r\nVERBOSE: Extracting 'C:\\Users\\hughbe\\.netcoreeng\\native\\temp\\WinShimmer.zip' to\r\n'C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\eng\\..\\.tools\\native\\bin\\WinShimmer'\r\nFile 'C:\\Users\\hughbe\\.netcoreeng\\native\\temp\\dotnet-api-docs_netcoreapp3.0-0.0.0.1-win64-x64.zip' already exists, skipping download\r\ndotnet-api-docs_netcoreapp3.0 was not found in .\r\nNative tools bootstrap failed\r\nThe property 'path' cannot be found on this object. Verify that the property exists.\r\nexit /b 1\r\nProcessing C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\global.json\r\ncmake.exe already exists; replacing...\r\ndotnet-api-docs_netcoreapp3.0 was not found in .\r\nNative tools bootstrap failed\r\nGET https://dot.net/v1/dotnet-install.ps1\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/5.0.100-preview.5.20251.2/dotnet-sdk-5.0.100-preview.5.20251.2-win-x64.zip\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/5.0.100-preview.5.20251.2/dotnet-sdk-5.0.100-preview.5.20251.2-win-x64.zip\r\ndotnet-install: Adding to current process PATH: \"C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\\". Note: This change will not be visible if PowerShell was run as a child process.\r\ndotnet-install: Installation finished\r\nC:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\sdk\\5.0.100-preview.5.20251.2\\MSBuild.dll /nologo -distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\sdk\\5.0.100-preview.5.20251.2\\dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\sdk\\5.0.100-preview.5.20251.2\\dotnet.dll -maxcpucount /m -verbosity:m /v:minimal /bl:C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\artifacts\\log\\Debug\\ToolsetRestore.binlog /clp:Summary /clp:ErrorsOnly;NoSummary /nr:True /p:ContinuousIntegrationBuild=False /p:TreatWarningsAsErrors=true /p:__ToolsetLocationOutputFile=C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\artifacts\\toolset\\5.0.0-beta.20261.9.txt /t:__WriteToolsetLocation /warnaserror C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\artifacts\\toolset\\restore.proj\r\nC:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\sdk\\5.0.100-preview.5.20251.2\\MSBuild.dll /nologo -distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\sdk\\5.0.100-preview.5.20251.2\\dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\.dotnet\\sdk\\5.0.100-preview.5.20251.2\\dotnet.dll -maxcpucount /m -verbosity:m /v:minimal /bl:C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\artifacts\\log\\Debug\\Build.binlog /clp:Summary /nr:True /p:ContinuousIntegrationBuild=False /p:TreatWarningsAsErrors=true /p:Configuration=Debug /p:RepoRoot=C:\\Users\\hughbe\\Documents\\GitHub\\winforms /p:Restore=True /p:DeployDeps=False /p:Build=True /p:Rebuild=False /p:Deploy=False /p:Test=False /p:Pack=False /p:IntegrationTest=False /p:PerformanceTest=False /p:Sign=False /p:Publish=False /warnaserror C:\\Users\\hughbe\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\5.0.0-beta.20261.9\\tools\\Build.proj\r\n  Determining projects to restore...\r\n  Restored C:\\Users\\hughbe\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\5.0.0-beta.20261.9\\tools\\Tools.proj (in 566 ms).\r\nProcessing C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\eng\\..\\global.json\r\ncmake.exe already exists; replacing...\r\ndotnet-api-docs_netcoreapp3.0 was not found in .\r\nNative tools bootstrap failed\r\nThe property 'path' cannot be found on this object. Verify that the property exists.\r\nexit /b 1\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Runtime/5.0.0-preview.6.20271.10/dotnet-runtime-5.0.0-preview.6.20271.10-win-x64.zip\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Runtime/5.0.0-preview.6.20271.10/dotnet-runtime-5.0.0-preview.6.20271.10-win-x64.zip\r\ndotnet-install: Installation finished\r\n  Determining projects to restore...\r\n  Determining projects to restore...\r\n...\r\n```\r\n\r\nNote that we have two entries for `Processing C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\eng\\..\\global.json`\r\n\r\nThis is because we actually shouldn't be calling `init-tools-native` from `configure-toolset.ps1`. `init-tools-native` is called in `build.ps1`: https://github.com/dotnet/arcade/blob/8078d8f3f77b7e8b7f6e289cf82cfdfa9c7a9355/eng/common/build.ps1#L146\r\n\r\nTherefore we end up calling this twice\r\n\r\nAlso make the variables `script:` prefixed to match dotnet/runtime https://github.com/dotnet/runtime/blob/master/eng/configure-toolset.ps1\r\n\r\nWould be nice to get this script documented in arcade: https://github.com/dotnet/arcade/issues/1456\r\n\r\n@RussKie could you copy in an arcade folk to make sure this is the right thing if you think","Url":"https://github.com/dotnet/winforms/pull/3335","RelatedDescription":"Open PR \"Avoid initializing native tools twice\" (#3335)"},{"Id":"623564107","IsPullRequest":false,"CreatedAt":"2020-05-23T02:39:32","Actor":"jscholes","Number":"3334","RawContent":null,"Title":"Accessibility: problematic screen reader UX for ContextMenuStrip (NVDA)","State":"open","Body":"* .NET Core Version: 3.1\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n#### Problem description:\r\n\r\nWhen using the standard `ContextMenu` removed in https://github.com/dotnet/winforms/pull/2157, NVDA announces \"Context Menu\" when the menu opens.  With `ContextMenuStrip`, NVDA doesn't announce anything on pop-up (not even the presence of a menu without an accessible name), meaning that a user has no idea that a menu has been invoked.\r\n\r\n#### Expected behavior:\r\n\r\nNVDA will announce \"Context Menu\" on pop-up.\r\n\r\n#### Minimal repro:\r\n\r\n```\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nnamespace Test {\r\n\tpublic class MainWindow : Form {\r\n\t\tpublic MainWindow() {\r\n\t\t\tthis.ClientSize = new Size(800, 450);\r\n\t\t\tthis.Text = \"Context Menu Accessibility\";\r\n\t\t\tthis.AutoScaleDimensions = new SizeF(6F, 13F);\r\n\t\t\tthis.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\r\n\t\t\tthis.SuspendLayout();\r\n\t\t\tthis.InitializeControls();\r\n\t\t\tthis.ResumeLayout(false);\r\n\t\t\tthis.PerformLayout();\r\n\t\t}\r\n\r\n\t\tprivate void InitializeControls() {\r\n\t\t\tButton aButton = new Button{\r\n\t\t\t\tText=\"Button with a ContextMenuStrip\"\r\n\t\t\t};\r\n\t\t\tContextMenuStrip ctxMenu = new ContextMenuStrip();\r\n\t\t\tctxMenu.Items.Add(\"Item &1\");\r\n\t\t\tctxMenu.Items.Add(\"Item &2\");\r\n\t\t\tctxMenu.Items.Add(\"Item &3\");\r\n\t\t\taButton.ContextMenuStrip = ctxMenu;\r\n\t\t\tthis.Controls.Add(aButton);\r\n\t\t}\r\n\r\n\t\tprotected override void Dispose(bool disposing) {\r\n\t\t\tbase.Dispose(disposing);\r\n\t\t}\r\n\t}\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/3334","RelatedDescription":"Open issue \"Accessibility: problematic screen reader UX for ContextMenuStrip (NVDA)\" (#3334)"},{"Id":"623390966","IsPullRequest":false,"CreatedAt":"2020-05-22T18:01:55","Actor":"yashimwong","Number":"3333","RawContent":null,"Title":"Missing items during adding to MenuToolStrip in designer mode","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version:  3.1.300\r\n\r\n* Have you experienced this same bug with .NET Framework?:  No\r\n\r\n**Problem description:**\r\n- When adding items to MenuToolStrip in the designer mode, when switching to code and switching back, items added is suddenly missing in the designer but retains in WinForm auto-generated code.\r\n\r\n**Expected behavior:**\r\n- Items should not be missing after adding\r\n","Url":"https://github.com/dotnet/winforms/issues/3333","RelatedDescription":"Open issue \"Missing items during adding to MenuToolStrip in designer mode\" (#3333)"},{"Id":"623303950","IsPullRequest":false,"CreatedAt":"2020-05-22T15:49:44","Actor":"DualBrain","Number":"3332","RawContent":null,"Title":"Initializing and immediately adding an image as a resource fails until you close and reopen.","State":"open","Body":"* .NET Core Version: \r\n\r\n3.1 in VS 16.6 (release version)\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n\r\nNo\r\n\r\n**Problem description:**\r\n\r\nWhen initialize the resource file, switch to the image tab (without first closing), add an item (without first closing) and it is added to the resources folder but disappears from the actual resource list.  Have to reopen and re-add the item - after this takes place things are working as expected.\r\n\r\nNOTE: I don't know if this is a VB only behavior; I haven't tried this in C#.\r\n\r\n**Expected behavior:**\r\n\r\nInitialize the resource, switch to the image tab, add an item and it actually work.\r\n\r\n**Minimal repro:**\r\n\r\n1. Create a Console application (VB).  Change the project so that it is as follows:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n  <PropertyGroup>\r\n    <OutputType>WinExe</OutputType>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n    <UseWindowsForms>true</UseWindowsForms>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n2. Modify Program.vb...\r\n```vb\r\nImports System.Windows.Forms\r\n\r\nModule Program\r\n  <STAThread>\r\n  Sub Main()\r\n    Application.SetHighDpiMode(HighDpiMode.SystemAware)\r\n    Application.EnableVisualStyles()\r\n    Application.SetCompatibleTextRenderingDefault(False)\r\n    Application.Run(New Form1())\r\n  End Sub\r\nEnd Module\r\n```\r\n\r\n3. Unload project, reload project.\r\n\r\n4. Open project properties, click on Resources.  Click on the \"link\" to create resources... switch to images, drag an image to the list and close.\r\n\r\nThe image is placed in the Resources folder; however, it disappears from the actual resources list.  I've tried this several different ways and it does seem to be only associated with the initial creation of the resources and immediately adding an image (resource).  If you create the resources, close (save) and then reopen before adding the initial image... things appear to work.","Url":"https://github.com/dotnet/winforms/issues/3332","RelatedDescription":"Open issue \"Initializing and immediately adding an image as a resource fails until you close and reopen.\" (#3332)"},{"Id":"623186793","IsPullRequest":true,"CreatedAt":"2020-05-22T12:55:20","Actor":"gpetrou","Number":"3331","RawContent":null,"Title":"Enable and fix CA1825 warnings","State":"open","Body":"## Proposed changes\r\n\r\n- Enable and fix CA1825 warnings\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3331)","Url":"https://github.com/dotnet/winforms/pull/3331","RelatedDescription":"Open PR \"Enable and fix CA1825 warnings\" (#3331)"},{"Id":"623163835","IsPullRequest":true,"CreatedAt":"2020-05-22T12:39:38","Actor":"dotnet-maestro[bot]","Number":"3330","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200521.10\r\n- **Date Produced**: 5/22/2020 7:29 AM\r\n- **Commit**: c44dc40b763b7c74012622a0a6120cd8ffa35ce4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3330)","Url":"https://github.com/dotnet/winforms/pull/3330","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3330)"},{"Id":"623068333","IsPullRequest":false,"CreatedAt":"2020-05-22T09:08:45","Actor":"nawfalhasan","Number":"3329","RawContent":null,"Title":"Support abstract base class in designer ","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nProblem: Unable to open up a form that inherits from an abstract form class.\r\n\r\n**Description:**\r\nWhen a form inherits from a abstract class, the designer of the more derived type cant be opened.\r\n\r\n**Example:**\r\n\r\n    public abstract class FormBase : Form\r\n    {\r\n        protected FormBase()\r\n        {\r\n        }\r\n    }\r\n\r\n    public class FormDerived : FormBase\r\n    {\r\n        public FormDerived()\r\n        {\r\n        }\r\n    }\r\n \r\nNow `FormDerived` in the designer wouldn't open up. \r\n\r\n**Error when I try today:**\r\nFrom the designer: \r\n> The designer must create an instance of type 'Xxx.Common.Presentation.Mvvm.FormBase' but it cannot because the type is declared as abstract. \r\n\r\nCall stack:\r\n\r\n>at System.ComponentModel.Design.Serialization.CodeDomSerializerBase.Error(IDesignerSerializationManager manager, String exceptionText, String helpLink)\r\nat System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(IDesignerSerializationManager manager, CodeTypeDeclaration declaration)\r\nat System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager manager)\r\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager)\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager)\r\nat System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad(IDesignerLoaderHost host) \r\n\r\n**Solution I would like**: \r\nOpening up the form designer should work any time from VS. Just like it opens up if base class is a regular class. The designer should design the first base class which can be instantiated (walking up the inheritance chain). In the above example it would be `Form`.\r\n\r\n**What I tried:**\r\nThis is the most commonly seen hack on internet:\r\n\r\n    [TypeDescriptionProvider(typeof(GenericControlDescriptionProvider))]\r\n    public abstract class FormBase : Form\r\n    {\r\n        protected FormBase()\r\n        {\r\n        }\r\n    }\r\n\r\n    class GenericControlDescriptionProvider : TypeDescriptionProvider\r\n    {\r\n        public GenericControlDescriptionProvider()\r\n            : base(TypeDescriptor.GetProvider(typeof(ContainerControl)))\r\n        {\r\n        }\r\n\r\n        public override Type GetReflectionType(Type objectType, object instance)\r\n        {\r\n            Type designerType = GetTypeForDesigner(objectType);\r\n            if (designerType != null)\r\n            {\r\n                return designerType;\r\n            }\r\n\r\n            return base.GetReflectionType(objectType, instance);\r\n        }\r\n\r\n        public override object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, object[] args)\r\n        {\r\n            Type designerType = GetTypeForDesigner(objectType);\r\n            if (designerType != null)\r\n            {\r\n                objectType = designerType;\r\n            }\r\n\r\n            return base.CreateInstance(provider, objectType, argTypes, args);\r\n        }\r\n\r\n        static Type GetTypeForDesigner(Type actualTypeVsIsTryingToDesign)\r\n        {\r\n            if (actualTypeVsIsTryingToDesign.IsSubclassOf(typeof(UserControl)))\r\n            {\r\n                return typeof(UserControl);\r\n            }\r\n\r\n            if (actualTypeVsIsTryingToDesign.IsSubclassOf(typeof(Form)))\r\n            {\r\n                return typeof(Form);\r\n            }\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\nBut then again it doesn't work flawlessly. Project has to be rebuilt sometimes, sometimes VS has to be restarted etc. Doesn't work always","Url":"https://github.com/dotnet/winforms/issues/3329","RelatedDescription":"Open issue \"Support abstract base class in designer \" (#3329)"},{"Id":"623058559","IsPullRequest":false,"CreatedAt":"2020-05-22T08:51:19","Actor":"nawfalhasan","Number":"3328","RawContent":null,"Title":"Support generic base class in designer","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nProblem: Unable to open up a form that inherits from a generic form class without building project.\r\n\r\n**Description:**\r\nWhen a form inherits from a common base class like `FormBase<T>`, the designer of the more derived type cant be opened without building the project in VS.\r\n\r\n**Example:**\r\n\r\n    public class FormBase<T> : Form\r\n    {\r\n        protected FormBase()\r\n        {\r\n        }\r\n    }\r\n\r\n    public class FormDerived : FormBase<DerivedViewModel>\r\n    {\r\n        public FormDerived()\r\n        {\r\n        }\r\n    }\r\n \r\nNow `FormDerived` in the designer wouldn't open up easily. Sometimes building VS is required to open up the designer, sometimes restarting VS and building is required. \r\n\r\n**Error when I try today:**\r\nFrom the designer: \r\n> The designer could not be shown for this file because none of the classes within it can be designed. The designer inspected the following classes in the file: FormDerived --- The base class 'Xxx.Common.Presentation.Mvvm.FormBase`1' could not be loaded. Ensure the assembly has been referenced and that all projects have been built. \r\n\r\nCall stack:\r\n\r\n> at System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.EnsureDocument(IDesignerSerializationManager manager)\r\nat System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager manager)\r\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager)\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager)\r\nat System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad(IDesignerLoaderHost host) \r\n\r\n**Solution I would like**: \r\nOpening up the form designer should work any time from VS. Just like it opens up if base class is a regular class.\r\n\r\n**Related info:**\r\n1. Here MS staff confirms this feature is on the roadmap. I am here trying to create a github issue for tracking. https://devblogs.microsoft.com/dotnet/windows-forms-designer-for-net-core-released/#comment-5898\r\n\r\n2. Similar thread before https://github.com/dotnet/roslyn/issues/4987","Url":"https://github.com/dotnet/winforms/issues/3328","RelatedDescription":"Open issue \"Support generic base class in designer\" (#3328)"},{"Id":"622765846","IsPullRequest":true,"CreatedAt":"2020-05-21T20:43:11","Actor":"dotnet-maestro[bot]","Number":"3327","RawContent":null,"Title":"[release/5.0-preview5] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:67c9bc50-cce6-417c-985c-08d7f21e18b5)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 67c9bc50-cce6-417c-985c-08d7f21e18b5\r\n- **Build**: 20200518.11\r\n- **Date Produced**: 5/21/2020 7:26 PM\r\n- **Commit**: 201841eea7a9a62374666edbf02e9421a0fd6675\r\n- **Branch**: refs/heads/release/5.0-preview5\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.CodeDom**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.Security.Permissions**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.Drawing.Common**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n\r\n[marker]: <> (End:67c9bc50-cce6-417c-985c-08d7f21e18b5)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3327)","Url":"https://github.com/dotnet/winforms/pull/3327","RelatedDescription":"Closed or merged PR \"[release/5.0-preview5] Update dependencies from dotnet/runtime\" (#3327)"},{"Id":"622749577","IsPullRequest":true,"CreatedAt":"2020-05-21T20:06:13","Actor":"hughbe","Number":"3326","RawContent":null,"Title":"Structify VARIANT and use in more places","State":"open","Body":"Extracted from #3197 \r\n\r\nThis PR is limited to making `VARIANT` blittable, using it in more places (and fixing some memory bugs in x64!) and fixing a bug made in porting `~VARENUM.TYPEMASK` instead of `VARENUM.TYPEMASK`\r\n\r\nThe idea is that this should be semi-trivial to merge and will make the above PR easier to review as functionality in that PR should be limited to making `ToObject` actually work in the way it should\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3326)","Url":"https://github.com/dotnet/winforms/pull/3326","RelatedDescription":"Open PR \"Structify VARIANT and use in more places\" (#3326)"},{"Id":"622457024","IsPullRequest":true,"CreatedAt":"2020-05-21T12:40:28","Actor":"dotnet-maestro[bot]","Number":"3325","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200520.12\r\n- **Date Produced**: 5/21/2020 6:04 AM\r\n- **Commit**: 5b7d6319ec8ff44c7eda6f8358e29cfdd53d81b5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3325)","Url":"https://github.com/dotnet/winforms/pull/3325","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3325)"},{"Id":"622402477","IsPullRequest":true,"CreatedAt":"2020-05-21T10:23:09","Actor":"hughbe","Number":"3324","RawContent":null,"Title":"Cleanup CopyMemory/WideCharToMultiByte","State":"open","Body":"## Proposed Changes\r\n- Cleanup CopyMemory/WideCharToMultiByte\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3324)","Url":"https://github.com/dotnet/winforms/pull/3324","RelatedDescription":"Open PR \"Cleanup CopyMemory/WideCharToMultiByte\" (#3324)"},{"Id":"622392573","IsPullRequest":true,"CreatedAt":"2020-05-21T10:04:57","Actor":"hughbe","Number":"3323","RawContent":null,"Title":"Move FileDialogNative code to modern interop model","State":"open","Body":"## Proposed Changes\r\n- Move FileDialogNative code to modern interop model\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3323)","Url":"https://github.com/dotnet/winforms/pull/3323","RelatedDescription":"Open PR \"Move FileDialogNative code to modern interop model\" (#3323)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-05-27T05:30:51.251277Z","RunDurationInMilliseconds":599}