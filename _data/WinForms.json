{"Data":{"GitHub":{"Issues":[{"Id":"621374229","IsPullRequest":false,"CreatedAt":"2020-05-20T00:35:14","Actor":"KlausLoeffelmann","Number":"3306","RawContent":null,"Title":"Should we move System.Windows.Forms.Padding back to the System.Windows.Forms assembly","State":"open","Body":"While investigating a bug in the WinForms Core Designer, namely in the context of serialization of Resource files, I noticed that from 3.1 to 5.0 the `Padding` struct has moved from the `System.Windows.Forms` assembly to `System.Windows.Forms.Primitives`. This is the reason, at least from the perspective of deserializing resource files in the Core Designer, we can not retarget a WinForms 5.0 Core App back to 3.1. The type resolution service in the ResXDataNode processor, which is already version tolerant, cannot handle the new type name (at least not without introducing some black magic).\r\n\r\nSo, while this resources issues might be principally resolvable, my concern is that the `Padding` struct of all WinForms structs gets serialized and deserialized in typical Customer in mixed version scenarios (where e.g. 100 clients write some custom serialized files back to a server still running 3.1, and others already 5.0), which could cause real problems.\r\n\r\nSo, for that reason, I would propose to move the `Padding` struct back to the `System.Windows.Forms` namespace, or at least discuss the seriousness of my concern.","Url":"https://github.com/dotnet/winforms/issues/3306","RelatedDescription":"Open issue \"Should we move System.Windows.Forms.Padding back to the System.Windows.Forms assembly\" (#3306)"},{"Id":"621330302","IsPullRequest":false,"CreatedAt":"2020-05-19T22:42:54","Actor":"weltkante","Number":"3305","RawContent":null,"Title":"Broken IDispatch.GetTypeInfo interop tests","State":"open","Body":"**.NET Core Version:**\r\nMaster with PR #3276 applied\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nunknown\r\n\r\n**Problem description:**\r\nThe [tests](https://github.com/dotnet/winforms/blob/e32620ed185e3c15fa67bdb7fe93757a735d6edb/src/System.Windows.Forms.Primitives/tests/Interop/Oleaut32/ITypeInfoTests.cs) were flaky before, sometimes throwing `ComException(E_FAIL)`. The update of xunit.stafact now is properly hosting everything in an WinForms STA thread and they suddenly seem to fail \"reliably\" with this error here.\r\n```\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_AddressOfMember_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_AddressOfMember_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 23\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_CreateInstance_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_CreateInstance_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 39\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetDllEntry_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetDllEntry_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 81\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetFuncDesc_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetFuncDesc_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 123\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetIDsOfNames_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetIDsOfNames_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 159\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetMops_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetMops_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 196\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetRefTypeInfo_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetRefTypeInfo_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 236\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_Invoke_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_Invoke_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 368\r\n\r\n```\r\n\r\n**Expected behavior:**\r\nTests pass or there is a reasonable explanation for the error\r\n\r\n**Minimal repro:**\r\nRun tests with PR #3276 applied","Url":"https://github.com/dotnet/winforms/issues/3305","RelatedDescription":"Open issue \"Broken IDispatch.GetTypeInfo interop tests\" (#3305)"},{"Id":"621179778","IsPullRequest":true,"CreatedAt":"2020-05-19T22:14:11","Actor":"OliaG","Number":"3304","RawContent":null,"Title":"Updated roadmap.md","State":"closed","Body":"Addressed comments from https://github.com/dotnet/winforms/pull/3054\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3304)","Url":"https://github.com/dotnet/winforms/pull/3304","RelatedDescription":"Closed or merged PR \"Updated roadmap.md\" (#3304)"},{"Id":"620754719","IsPullRequest":false,"CreatedAt":"2020-05-19T07:45:07","Actor":"therawk","Number":"3303","RawContent":null,"Title":"Unable to select controls inside the TabControl","State":"open","Body":"* .NET Core Version: \r\n3.1.300-preview-015135\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nI added a TabControl and added other components like TextBox and Label and now want to drag the TextBox around. It doesn't work since the Designer seems to ignore my selection of a specific element. \r\n\r\n**Expected behavior:**\r\nIt is possible to add UI Controls to the TabControl and can select and drag around the controls inside the TabControl\r\n\r\n**Minimal repro:**\r\n1. Add a TabControl\r\n2. Resize it so it covers the whole Form\r\n3. Add a TextBox to the TabControl\r\n4. Click outside the Form\r\n5. Try to click on the TextBox","Url":"https://github.com/dotnet/winforms/issues/3303","RelatedDescription":"Open issue \"Unable to select controls inside the TabControl\" (#3303)"},{"Id":"620693741","IsPullRequest":true,"CreatedAt":"2020-05-19T06:00:49","Actor":"dotnet-maestro[bot]","Number":"3302","RawContent":null,"Title":"[release/5.0-preview5] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:67c9bc50-cce6-417c-985c-08d7f21e18b5)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 67c9bc50-cce6-417c-985c-08d7f21e18b5\r\n- **Build**: 20200518.9\r\n- **Date Produced**: 5/19/2020 5:08 AM\r\n- **Commit**: f3c276fe203c613a1f618ae528df8ea95c09e35a\r\n- **Branch**: refs/heads/release/5.0-preview5\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **System.CodeDom**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **System.Security.Permissions**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **System.Drawing.Common**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.5.20263.12 to 5.0.0-preview.5.20268.9\r\n\r\n[marker]: <> (End:67c9bc50-cce6-417c-985c-08d7f21e18b5)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3302)","Url":"https://github.com/dotnet/winforms/pull/3302","RelatedDescription":"Closed or merged PR \"[release/5.0-preview5] Update dependencies from dotnet/runtime\" (#3302)"},{"Id":"620601234","IsPullRequest":false,"CreatedAt":"2020-05-19T01:11:40","Actor":"lonitra","Number":"3301","RawContent":null,"Title":"Add Support for Title Image to ListViewGroup","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n<!--\r\n    A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n  -->\r\nOur ListViewGroup does not have support for Title Images (or icons next to the group header) while LVGROUP does (https://docs.microsoft.com/en-us/windows/win32/api/commctrl/ns-commctrl-lvgroup)\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n<!--\r\n    A clear and concise description of what you want to happen. This includes:\r\n    - Description of what API need to be added or changed.\r\n    - Code that shows the surface area of the API.\r\n    - Code that shows real world scenarios, and how they would otherwise be handled.\r\n    - Details showing the usage/consumption of the proposed new API, and alternatives (e.g. not having this API).\r\n    - Any other context or screenshots about the feature request here.\r\n\r\n    :exclamation: Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md for more details\r\n\r\n  -->\r\nAdd support for adding images to ListViewGroup headers.\r\n\r\nI am basing the API off of how it works to add images to `ListViewItem`:\r\n```cs\r\npublic class ListViewGroup \r\n{\r\n    // Returns the ListViewGroup's currently set title image index\r\n    public int TitleImage { get; set; }\r\n}\r\n\r\npublic class ListView\r\n{\r\n    public ImageList GroupImageList { get; set; }\r\n}\r\n```\r\n\r\nExample:\r\n```cs\r\nImageList ImageList = new ImageList();\r\nimageList.Images.Add(<SOME_IMAGE>);\r\nListView listView = new ListView\r\n{\r\n    GroupImageList = imageList;\r\n};\r\n\r\nListViewGroup lvgroup = new ListViewGroup();\r\nlistView.Groups.Add(lvgroup);\r\nlvgroup.TitleImage = 0;\r\n```\r\n\r\n**Will this feature affect UI controls?**\r\nYes it will end up looking like this: \r\n![image](https://user-images.githubusercontent.com/30007367/82271130-ccfd0980-992b-11ea-9e87-91f3c40f0d27.png)\r\n\r\n- Will VS Designer need to support the feature?\r\nYes. I am expecting it to look similar to \r\n![image](https://user-images.githubusercontent.com/30007367/82273010-23207b80-9931-11ea-8b38-784c93067e0b.png)\r\n\r\n- What impact will it have on accessibility?\r\nBased off of looking at some ListViewItems that have an icon next to them, doesn't seem like this will affect accessibility, but I could be wrong here.\r\n\r\n- Will this feature need to be localized or be localizable?\r\nIt looks like `ListViewItem.ImageIndex` is localizable so I'm assuming yes.","Url":"https://github.com/dotnet/winforms/issues/3301","RelatedDescription":"Open issue \"Add Support for Title Image to ListViewGroup\" (#3301)"},{"Id":"620495064","IsPullRequest":false,"CreatedAt":"2020-05-18T20:45:01","Actor":"oggy22","Number":"3300","RawContent":null,"Title":"Design Mode check","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\nHi Winforms team,\r\n\r\nI’d like to raise an issue with Winforms about the way to check if the current code is run by designer or not. It’s rather confusing and I think there is room for improvement. The ways and suggestions I found from multiple sources (Stackoverflow and few of your team mates) are:\r\n•\tDesignMode property is flag, but it doesn’t seem to be reliable. Some suggest its value is correct only in ctr after InitializeComponents. Others suggest walking the parents up and checking the property.\r\n•\tLicenseManager.UsageMode == LicenseUsageMode.Designtime; This is also not reliable enough, at least from my experience, it Is sometimes false whereas it should be true.\r\n•\tSystem.Diagnostics.Process.GetCurrentProcess().ProcessName == \"devenv\" This seems clunky but seems to work for me (PR). However, if Visual Studio changes its process name it’ll stop working.\r\n•\tVarious sources suggest the combinations of the previous 3.\r\n\r\nI am not blaming anyone (I guess that’s clear?), I am just pointing to something which would be beneficial to improve on. Ideally:\r\n-\tWe won’t have both DesignMode and LicenceManager.UsageMode, but only one of these two. Having both is confusing already.\r\n-\tIt will be always reliable, not only from constructor.\r\n-\tIt will be in in the next .NET platform (core net 5?)\r\n-\tIf for any reason this won’t/can’t be done, please have the comments on these two properties (DesignMode and LicenceManager.UsageMode) explain all the caviats and details.\r\n\r\nThanks, Ogi!\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\nIdeally I would have a Property on the System.ComponentModel.Component which would be completley reliable regardless of if it's used from constructor or not\r\n\r\n**Minimal repro:**\r\n1. Create a simple WinForms control and a WinForms app using it\r\n2. Try all 3 forementioned ways of checking if in the design mode\r\n3. Observe that none of them is 100% reliable\r\n","Url":"https://github.com/dotnet/winforms/issues/3300","RelatedDescription":"Open issue \"Design Mode check\" (#3300)"},{"Id":"619975051","IsPullRequest":false,"CreatedAt":"2020-05-18T07:29:29","Actor":"John-Qiao","Number":"3299","RawContent":null,"Title":"Accessibility: NVDA is announcing an unnecessary content contain as 'row 0 row 1 columntext column 1' when NVDA focus is on first column row 0","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0.100-preview.6.20266.3\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**More info:**\r\n\r\n1. This issue can still reproduce in .NET Core 3.1.\r\n2. This issue does not occur in Narrator.\r\n![Narrator](https://user-images.githubusercontent.com/45864985/82185640-1e050180-991c-11ea-8c70-e6f7c877f513.png)\r\n\r\n**Problem description:**\r\nNVDA is announcing an unnecessary content contain as 'row 0 row 1 _columntext_ column 1'.\r\n![NVDA](https://user-images.githubusercontent.com/45864985/82185594-09286e00-991c-11ea-893d-39f912c22237.png)\r\n\r\n**Expected behavior:**\r\nNVDA should not announce the 'row 0 row 1 _columntext_ column 1' message. \r\n\r\n**Minimal repro:**\r\n\r\n1. Launch the attached project in VS and run it.\r\n2. Start NVDA Speech Viewer.\r\n3. Select the cell in DGV and observe the announce in NVDA Speech Viewer.\r\n[TestApp.zip](https://github.com/dotnet/winforms/files/4642640/TestApp.zip)","Url":"https://github.com/dotnet/winforms/issues/3299","RelatedDescription":"Open issue \"Accessibility: NVDA is announcing an unnecessary content contain as 'row 0 row 1 columntext column 1' when NVDA focus is on first column row 0\" (#3299)"},{"Id":"619662705","IsPullRequest":false,"CreatedAt":"2020-05-17T10:12:48","Actor":"weltkante","Number":"3298","RawContent":null,"Title":"Extract stack traces of hanging CI test runs","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nHangs in CI build are hard to diagnose, especially if they are not reproducable locally or do not happen deterministically.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n[`dotnet-dump`](https://docs.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-dump) allows collecting dumps of a process and analyze them\r\n\r\nPR #3056 started taking screenshots of hanging CI test runs, I think it would be even better if we used `dotnet-dump` to take dumps\r\n\r\n**Will this feature affect UI controls?**\r\nNo, test infrastructure only\r\n","Url":"https://github.com/dotnet/winforms/issues/3298","RelatedDescription":"Open issue \"Extract stack traces of hanging CI test runs\" (#3298)"},{"Id":"619580539","IsPullRequest":false,"CreatedAt":"2020-05-17T00:17:06","Actor":"weltkante","Number":"3297","RawContent":null,"Title":"Disabled tests: WindowsFormsSynchronizationContext","State":"open","Body":"**.NET Core Version:**\r\nmaster branch\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nno\r\n\r\n**Problem description:**\r\n\r\nFollowing three tests are blocking the update of xunit.stafact (#3122) and will be commented out unless they get fixed before the package update PR gets merged.\r\n* WindowsFormsSynchronizationContext_Dispose_MultipleTimes_Success\r\n* WindowsFormsSynchronizationContext_Send_InvokeDisposed_Nop\r\n* WindowsFormsSynchronizationContext_Post_InvokeDisposed_Nop\r\n\r\nThey are a WinFormsFact/Theory and dispose the SynchronizationContext early. This leads to either crashing the whole process in debug builds due to a failed assert, or failing tests in release builds. Reason is that WinFormsFact/Theory after the package update will pump messages via DoEvents, calling this after the SC gets disposed will lead to an exception (or crash in debug build).\r\n\r\n(There may also be the question if this being an assert is the correct choice, maybe its worth checking explicitly for the current thread being a disposed thread, to give a useful exception instead. Or maybe its time to get rid of the public Dispose on WindowsFormsSynchronizationContext, it feels inappropriate since the SC is not the owner of the thread.)\r\n\r\nThe error gets blamed onto stafact infrastructure, but the tests are causing it by disposing early. Failed CI build can be found here: https://github.com/dotnet/winforms/runs/681811749\r\n\r\nDebug build:\r\n```\r\nUnhandled exception. System.InvalidOperationException: Invoke or BeginInvoke cannot be called on a control until the window handle has been created.\r\n   at System.Windows.Forms.Control.MarshaledInvoke(Control caller, Delegate method, Object[] args, Boolean synchronous) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Control.cs:line 6896\r\n   at System.Windows.Forms.Control.BeginInvoke(Delegate method, Object[] args) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Control.cs:line 4707\r\n   at System.Windows.Forms.WindowsFormsSynchronizationContext.Post(SendOrPostCallback d, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\WindowsFormsSynchronizationContext.cs:line 90\r\n   at Xunit.Sdk.Utilities.SyncContextAwaiter.OnCompleted(Action continuation)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted[TAwaiter](TAwaiter& awaiter, IAsyncStateMachineBox box)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Task.<>c.<ThrowAsync>b__139_1(Object state)\r\n   at System.Threading.QueueUserWorkItemCallbackDefaultContext.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n    System.Windows.Forms.Tests.ApplicationTests.Application_EnableVisualStyles_InvokeAfterGettingRenderWithVisualStyles_Success [SKIP]\r\n      Crash with AbandonedMutexException. See: https://github.com/dotnet/arcade/issues/5325\r\nProcess terminated. Assertion Failed\r\nMarshaling control should have created its handle in its ctor.\r\n   at System.Windows.Forms.WindowsFormsSynchronizationContext..ctor() in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\WindowsFormsSynchronizationContext.cs:line 35\r\n   at System.Windows.Forms.WindowsFormsSynchronizationContext.InstallIfNeeded() in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\WindowsFormsSynchronizationContext.cs:line 143\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(msoloop reason, ApplicationContext context) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Application.ThreadContext.cs:line 1119\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(msoloop reason, ApplicationContext context) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Application.ThreadContext.cs:line 992\r\n   at System.Windows.Forms.Application.DoEvents() in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\src\\System\\Windows\\Forms\\Application.cs:line 811\r\n   at Xunit.Sdk.WinFormsSynchronizationContextAdapter.PumpTill(SynchronizationContext synchronizationContext, Task task)\r\n   at Xunit.Sdk.ThreadRental.<>c__DisplayClass11_0.<CreateAsync>b__0()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```\r\n\r\nRelease build:\r\n```\r\nUnhandled exception. System.InvalidOperationException: Invoke or BeginInvoke cannot be called on a control until the window handle has been created.\r\n   at System.Windows.Forms.Control.MarshaledInvoke(Control caller, Delegate method, Object[] args, Boolean synchronous) in /_/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs:line 6896\r\n   at System.Windows.Forms.Control.BeginInvoke(Delegate method, Object[] args) in /_/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs:line 4706\r\n   at System.Windows.Forms.WindowsFormsSynchronizationContext.Post(SendOrPostCallback d, Object state) in /_/src/System.Windows.Forms/src/System/Windows/Forms/WindowsFormsSynchronizationContext.cs:line 91\r\n   at Xunit.Sdk.Utilities.SyncContextAwaiter.OnCompleted(Action continuation)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted[TAwaiter](TAwaiter& awaiter, IAsyncStateMachineBox box)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.Task.<>c.<ThrowAsync>b__139_1(Object state)\r\n   at System.Threading.QueueUserWorkItemCallbackDefaultContext.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```\r\n\r\n**Expected behavior:**\r\nTests using WinFormsFact/Theory should not dispose the infrastructure they are running on\r\n\r\n**Minimal repro:**\r\nExecute one of those tests after updating xunit.stafact to `1.0.33-beta` or newer\r\n\r\n/cc: @hughbe @RussKie ","Url":"https://github.com/dotnet/winforms/issues/3297","RelatedDescription":"Open issue \"Disabled tests: WindowsFormsSynchronizationContext\" (#3297)"},{"Id":"619574440","IsPullRequest":false,"CreatedAt":"2020-05-16T23:27:35","Actor":"cston","Number":"3296","RawContent":null,"Title":"Use same application id for WindowsFormsApplicationBase.IsSingleInstance for same major.minor version number","State":"open","Body":"In .NET Framework, `WindowsFormsApplicationBase.IsSingleInstance` behavior uses an application id that is consistent for the same { major, minor } version numbers.\r\n\r\nIn dotnet/winforms, the `ModuleVersionID` is used for the application id which is distinct for each build. Consider matching .NET Framework by using an id that is consistent for { major, minor } version.\r\n\r\nSee [reference source](https://github.com/microsoft/referencesource/blob/master/Microsoft.VisualBasic/runtime/msvbalib/ApplicationServices/WindowsFormsApplicationBase.vb#L1502).\r\n","Url":"https://github.com/dotnet/winforms/issues/3296","RelatedDescription":"Open issue \"Use same application id for WindowsFormsApplicationBase.IsSingleInstance for same major.minor version number\" (#3296)"},{"Id":"619472294","IsPullRequest":true,"CreatedAt":"2020-05-16T13:16:35","Actor":"M-Lipin","Number":"3295","RawContent":null,"Title":"Fixing Issue 3294 to allow specify custom AccessibleName and AccessibleRole for Label control","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3294\r\n\r\n\r\n## Proposed changes\r\n\r\n- Adding LegacyIAccessiblePattern provider to LabelAccessibleObject.\r\n- Adding LegacyIAccessiblePattern provider to GroupBoxAccessibleObject.\r\n- By adding LegacyIAccessiblePattern properties values from AccessibleName and AccessibleRole is provided to Inspect's LegacyIAccessible.Name and LegacyIAccessible.Role fields and corresponding MSAA fields if UIA support for control is enabled.\r\n- Adding tests to verify the fix.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Developers will be able to specify custom AccessibleName and AccessibleRole for the Label control.\r\n\r\n## Regression? \r\n\r\n- Yes (introduced in .NET Framework 4.8)\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nSetting custom AccessibleName and AccessibleRole has no effect on the values of AccessibleName and AccessibleRole fields shown in Inspect or Accessibility Insights.\r\n\r\n### After\r\n\r\nCustom AccessibleName and AccessibleRole are represented as values of AccessibleName and AccessibleRole fields shown in Inspect or Accessibility Insights.\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual tests.\r\n- Unit tests.\r\n- Automation tests.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n- Inspect;\r\n- Accessibility Insights.\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.100-preview.5.20260.4\r\n Commit:    0950d416f9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-preview.5.20260.4\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-preview.5.20260.5\r\n  Commit:  09ee4814cb\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3295)","Url":"https://github.com/dotnet/winforms/pull/3295","RelatedDescription":"Open PR \"Fixing Issue 3294 to allow specify custom AccessibleName and AccessibleRole for Label control\" (#3295)"},{"Id":"619454222","IsPullRequest":false,"CreatedAt":"2020-05-16T11:50:04","Actor":"M-Lipin","Number":"3294","RawContent":null,"Title":"Accessibility: no way to set Label control accessible role and accessible name","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\nReproduces in 3.1 as well as in 5.0.\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nYes\r\nLink to DevDiv issue: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1108206\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nIf AccessibleName or/and AccessibleRole is set to a custom value for the Label control, this does not affect the AccessibleName and AccessibleRole in runtime. And default values are shown.\r\n\r\n**Expected behavior:**\r\nThere should be an ability to set/change AccessibleName and AccessibleRole for the Label control.\r\n\r\n**Minimal repro:**\r\nCreate the app with the Label control . Specify custom AccessibleName and AccessibleRole for the label. Run the app and observe that the Default AccessibleRole and default AccessibleName is show in Inspect or Accessibility Insights.\r\n","Url":"https://github.com/dotnet/winforms/issues/3294","RelatedDescription":"Open issue \"Accessibility: no way to set Label control accessible role and accessible name\" (#3294)"},{"Id":"619223544","IsPullRequest":true,"CreatedAt":"2020-05-15T20:21:36","Actor":"lonitra","Number":"3293","RawContent":null,"Title":"Implement Task Property for ListViewGroup","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2656\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add Task API to `ListViewGroup`\r\n- Add GroupLinkClick event handler/args in `ListView`\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customers will be able to add tasks to their ListViewGroups\r\n- Customers will receive callback to do as they please once group task clicked\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n![image](https://user-images.githubusercontent.com/30007367/82090899-43d79f80-96ab-11ea-86c2-df1ef5c73e1d.png)\r\n### After\r\n![grouptaskex1](https://user-images.githubusercontent.com/30007367/82092331-ebee6800-96ad-11ea-81cc-de7984da8abe.gif)\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n- Unit testing\r\n\r\n## TODOs:\r\n- [ ] Both narrator and inspect do not pick up on Task property, we'll need to do accessibility improvements here.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3293)","Url":"https://github.com/dotnet/winforms/pull/3293","RelatedDescription":"Open PR \"Implement Task Property for ListViewGroup\" (#3293)"},{"Id":"618920645","IsPullRequest":true,"CreatedAt":"2020-05-15T12:29:18","Actor":"dotnet-maestro[bot]","Number":"3292","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200514.1\r\n- **Date Produced**: 5/14/2020 12:45 PM\r\n- **Commit**: bdd7235c43d762cea051cfc2071e14de48175f0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20263.7 to 5.0.0-preview.6.20264.1\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3292)","Url":"https://github.com/dotnet/winforms/pull/3292","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3292)"},{"Id":"618727938","IsPullRequest":false,"CreatedAt":"2020-05-15T06:20:09","Actor":"Zheng-Li01","Number":"3291","RawContent":null,"Title":"The value of the FileName attribute is not fully displayed when the character length is greater than 16","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 5.0.100-preview5.20262.6\r\n\r\n* More info:\r\n1. The issue also can reproduce .NET SDK 3.1.\r\n2. The issue can't reproduce on SaveFileDialog control.\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n Yes, this is not a regression issue, which can repro from .NET 3.5 to .NET 4.8. \r\n\r\n**Minimal repro:**\r\n1. Create a core project with a openFileDialog control.\r\n2. Inserting the code section \"openFileDialog1.ShowDialog();\" in the button1_click() method to show the OpenFileDialog.\r\n3. Setting the value of 'FileName' property as \"openFileDialog12\".\r\n4. Build & Run the project, click the button1 to show OpenFiledialog.\r\n5. Change the value of 'FileName' property from \"openFileDialog12 to \"openFileDialog123\".\r\n6. Build & Run the project, click the button1 to show OpenFiledialog.\r\n7. Click any where, such as TaskBar of windows, then back to click the OpenFiledialog again.\r\n\r\n**Expected behavior:**\r\nAfter steps7, the value  \"openFileDialog123\" is fully displayed.\r\n\r\n**Actual behavior:**\r\nAfter step4, the value  \"openFileDialog12\" is fully displayed.\r\nAfter step7, the value  \"openFileDialog123\" is not fully  displayed, which displaying as \"enFileDialog123\"\r\nAfter step8, the value  \"openFileDialog123\" is full displayed.\r\n![CoreIssue](https://user-images.githubusercontent.com/38325459/82017814-8d79b780-96b6-11ea-9646-931058ed3066.gif)\r\n![CoreIssue](https://user-images.githubusercontent.com/38325459/82017855-a6826880-96b6-11ea-922c-a249288508c7.PNG)\r\n\r\nRepro project:\r\n[Reproduce.zip](https://github.com/dotnet/winforms/files/4632575/Reproduce.zip)","Url":"https://github.com/dotnet/winforms/issues/3291","RelatedDescription":"Open issue \"The value of the FileName attribute is not fully displayed when the character length is greater than 16\" (#3291)"},{"Id":"618722846","IsPullRequest":false,"CreatedAt":"2020-05-15T06:07:39","Actor":"Olina-Zhang","Number":"3290","RawContent":null,"Title":"RootFolder property doesn't work for modernize ForderBrowserDialog","State":"open","Body":"* .NET Core Version: \r\n.Net Core 5.0 from master branch: 5.0.100-preview.5.20262.7\r\n\r\n* Have you experienced this same bug with .NET Framework?: No \r\n\r\n**Minimal repro:**\r\n1.\tCreate a Winforms .Net Core Application\r\n2.\tAdd following code to show modernize folderBrowserDialog and set its RootFolder property to specific Folder\r\npublic Form1()\r\n        {\r\n            InitializeComponent();\r\n            FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();\r\n            **folderBrowserDialog.RootFolder = Environment.SpecialFolder.CommonStartMenu;**\r\n            folderBrowserDialog.ShowDialog();\r\n        }\r\n3.\tBuild and run application\r\n\r\n**Actual behavior:**\r\nRootFolder property setting doesn't work, please see following screenshot:\r\n![image](https://user-images.githubusercontent.com/26474449/82017250-48a15100-96b5-11ea-92b4-cc51b74e5380.png)\r\n\r\n\r\n**Expected behavior:**\r\nRootFolder should be changed in modernize folderBrowserDialog, see below screenshot in old folderBrowserDialog(.Net Framework behavior)\r\n![image](https://user-images.githubusercontent.com/26474449/82017062-e0526f80-96b4-11ea-83ba-86b68a330820.png)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3290","RelatedDescription":"Open issue \"RootFolder property doesn't work for modernize ForderBrowserDialog\" (#3290)"},{"Id":"617381107","IsPullRequest":true,"CreatedAt":"2020-05-15T03:11:05","Actor":"hughbe","Number":"3277","RawContent":null,"Title":"Extract DataGridView nested classes","State":"closed","Body":"## Proposed Changes\r\n- Extract DataGridView nested classes without any cleanup\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3277)","Url":"https://github.com/dotnet/winforms/pull/3277","RelatedDescription":"Closed or merged PR \"Extract DataGridView nested classes\" (#3277)"},{"Id":"617983287","IsPullRequest":true,"CreatedAt":"2020-05-14T23:18:56","Actor":"RussKie","Number":"3281","RawContent":null,"Title":"Correct exception","State":"closed","Body":"Fixes #3252\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\n- Pass the missing parameter\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3281)","Url":"https://github.com/dotnet/winforms/pull/3281","RelatedDescription":"Closed or merged PR \"Correct exception\" (#3281)"},{"Id":"618574325","IsPullRequest":true,"CreatedAt":"2020-05-14T22:59:20","Actor":"RussKie","Number":"3289","RawContent":null,"Title":"Fixing DataGridViewComboBoxCell: ComboBox causes application crash on handle recreating related to accessibility hierarchy tree restructuring","State":"closed","Body":"\r\nFixes #3251\r\n(cherry picked from commit 7a5e6e589d97cb585db29233e1f6c5709c52dc22)\r\n\r\n## Proposed changes\r\n\r\n- Porting .NET Framework fix for DataGridViewComboBox cell issue related to the control handle recreating when restructuring accessibility hierarchy tree.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Costumers will not experience application error when working with the DataGridView containing ComboBox cell. \r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3289)","Url":"https://github.com/dotnet/winforms/pull/3289","RelatedDescription":"Closed or merged PR \"Fixing DataGridViewComboBoxCell: ComboBox causes application crash on handle recreating related to accessibility hierarchy tree restructuring\" (#3289)"},{"Id":"618497118","IsPullRequest":true,"CreatedAt":"2020-05-14T22:34:34","Actor":"danmosemsft","Number":"3286","RawContent":null,"Title":"Add links in \"new issue\" flow to other related repos","State":"closed","Body":"This .yml adds quick links to other repos below the existing issue template buttons in your new issue flow.\r\n\r\nFor an example of what this looks like, see https://github.com/danmosemsft/runtime/issues/new/choose (the white buttons below your existing green buttons)\r\n\r\nWe are adding this in dotnet/runtime (https://github.com/dotnet/runtime/pull/36431). Reasoning: it's sometimes confusing which is the correct repo to open an issue in. The goal here is to make it easier to open an issue in the correct repo first time so we need to move fewer issues and they more quickly get attention from the right people.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3286)","Url":"https://github.com/dotnet/winforms/pull/3286","RelatedDescription":"Closed or merged PR \"Add links in \"new issue\" flow to other related repos\" (#3286)"},{"Id":"618556746","IsPullRequest":true,"CreatedAt":"2020-05-14T22:28:45","Actor":"dotnet-maestro[bot]","Number":"3288","RawContent":null,"Title":"[release/5.0-preview5] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:67c9bc50-cce6-417c-985c-08d7f21e18b5)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 67c9bc50-cce6-417c-985c-08d7f21e18b5\r\n- **Build**: 20200513.12\r\n- **Date Produced**: 5/14/2020 8:43 PM\r\n- **Commit**: c39954c06937b5b40e3dab0621b1de950207bdf0\r\n- **Branch**: refs/heads/release/5.0-preview5\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **System.CodeDom**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **System.Security.Permissions**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **System.Drawing.Common**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.5.20262.7 to 5.0.0-preview.5.20263.12\r\n\r\n[marker]: <> (End:67c9bc50-cce6-417c-985c-08d7f21e18b5)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3288)","Url":"https://github.com/dotnet/winforms/pull/3288","RelatedDescription":"Closed or merged PR \"[release/5.0-preview5] Update dependencies from dotnet/runtime\" (#3288)"},{"Id":"618498776","IsPullRequest":false,"CreatedAt":"2020-05-14T19:58:51","Actor":"M-Lipin","Number":"3287","RawContent":null,"Title":"Accessibility: review and make accessibility implementation consistent","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET SDK (reflecting any global.json):\r\nVersion: 5.0.100-preview.5.20260.4\r\nCommit: 0950d416f9\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-preview.5.20260.4\\\r\n\r\nHost (useful for support):\r\nVersion: 5.0.0-preview.5.20260.5\r\nCommit: 09ee4814cb\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n```\r\nobject IAccessible.accHitTest(int xLeft, int yTop)\r\n{\r\n    // Some code is here...\r\n\r\n    AccessibleObject obj = HitTest(xLeft, yTop);\r\n    if (obj != null) // This is not consistent with below implementation.\r\n    {\r\n        return AsVariant(obj);\r\n    }\r\n\r\n    // Other statements here...\r\n    // Execution goes here if obj is null. Do we need it?\r\n}\r\n```\r\n\r\n```\r\nobject IAccessible.accNavigate(int navDir, object childID)\r\n{\r\n    // Some code is here...\r\n\r\n    return AsVariant(child.Navigate((AccessibleNavigation)navDir));\r\n}\r\n```\r\n\r\n**Expected behavior:**\r\nUsing `AsVariant` should be consistent across AccessibleObject implementation, if code flow is not consistent we should have a comment in the code clarifying the intent of different implementation.\r\n\r\n**Minimal repro:**\r\nCreate the app with some control, use Inspect to force some accessibility calls. Observe different code flows for different methods.","Url":"https://github.com/dotnet/winforms/issues/3287","RelatedDescription":"Open issue \"Accessibility: review and make accessibility implementation consistent\" (#3287)"},{"Id":"618491716","IsPullRequest":false,"CreatedAt":"2020-05-14T19:46:12","Actor":"M-Lipin","Number":"3285","RawContent":null,"Title":"Accessibility: implement unit and UI tests for accessible navigation","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.100-preview.5.20260.4\r\n Commit:    0950d416f9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-preview.5.20260.4\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-preview.5.20260.5\r\n  Commit:  09ee4814cb\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nThere is no covering by unit tests for accessibility navigation including `IAccessible.accNavigate` and \r\n`IRawElementProviderFragment.Navigate` method implementations.\r\n\r\n**Expected behavior:**\r\nThere should be test covering for accessible navigation so if navigation is broken by some changes CI will notify about it.\r\n- Need to have basic unit tests for unit functionality.\r\n- Need to have per-control scenarios for controls' accessible navigation.\r\n\r\n**Minimal repro:**\r\n- Change the implementation of accessible navigation for some control, for instance add return null for some control's accessible object `FragmentNavigate` and notify that Inspect shows empty accessible tree for the this control in inspect. Please note that there is no tests for this.","Url":"https://github.com/dotnet/winforms/issues/3285","RelatedDescription":"Open issue \"Accessibility: implement unit and UI tests for accessible navigation\" (#3285)"},{"Id":"618179927","IsPullRequest":true,"CreatedAt":"2020-05-14T12:43:42","Actor":"dotnet-maestro[bot]","Number":"3284","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200513.7\r\n- **Date Produced**: 5/14/2020 2:33 AM\r\n- **Commit**: 5859dadf20a9dae44624e0a79e48f1b3f1f26a0a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20262.14 to 5.0.0-preview.6.20263.7\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3284)","Url":"https://github.com/dotnet/winforms/pull/3284","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3284)"},{"Id":"618172713","IsPullRequest":true,"CreatedAt":"2020-05-14T12:42:03","Actor":"dotnet-maestro[bot]","Number":"3283","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200511.9\r\n- **Date Produced**: 5/11/2020 11:09 PM\r\n- **Commit**: 898e51ed5fdcc4871087ac5754ca9056e58e575d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: from 5.0.0-beta.20258.8 to 5.0.0-beta.20261.9\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20258.8 to 5.0.0-beta.20261.9\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20258.8 to 5.0.0-beta.20261.9\r\n  - **Microsoft.DotNet.RemoteExecutor**: from 5.0.0-beta.20258.8 to 5.0.0-beta.20261.9\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20258.8 to 5.0.0-beta.20261.9\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3283)","Url":"https://github.com/dotnet/winforms/pull/3283","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3283)"},{"Id":"618091315","IsPullRequest":true,"CreatedAt":"2020-05-14T09:52:41","Actor":"hughbe","Number":"3282","RawContent":null,"Title":"Fix trailing null in NativeGetItemText","State":"open","Body":"See https://github.com/dotnet/winforms/pull/3174#discussion_r422615154\r\n\r\nIt now returns \"ABC\\0\", which is unintended.\r\n\r\nSo I wrote some more tests in #3107 that exercise this code path and the tests passed on .NET Framework and .NET Core. It seems like we also already had tests testing this code path as well.\r\n\r\nI was a little confused why the tests passed until I realised that the only place where this method was called was in code like\r\n\r\n```cs\r\nif (string.Compare(owner.GetItemText(value), owner.NativeGetItemText(index), true, CultureInfo.CurrentCulture) != 0)\r\n```\r\n\r\nSo I tested in my sandbox and found that \r\n```cs\r\nConsole.WriteLine(string.Compare(\"abc\", \"abc\\0\", true, CultureInfo.CurrentCulture));\r\n```\r\n\r\nprints out\r\n```cs\r\n0\r\n```\r\n\r\nEssentially meaning that whilst this changed behaviour, it didn't break anything as string.Compare already handles trailing `\\0`\r\n\r\nThis just fixes things for correctness\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3282)","Url":"https://github.com/dotnet/winforms/pull/3282","RelatedDescription":"Open PR \"Fix trailing null in NativeGetItemText\" (#3282)"},{"Id":"617891501","IsPullRequest":true,"CreatedAt":"2020-05-14T03:15:06","Actor":"RussKie","Number":"3279","RawContent":null,"Title":"fix: ContextMenuStrip leads to crash on W10 1607","State":"open","Body":"\r\nResolves #2969.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\nW10 1607 is not fully compatible with PerMonv2, and this leads to crashes interacting with `ContextMenuStrip`.\r\n\r\n`CommonUnsafeNativeMethods.SetThreadDpiAwarenessContext` may return `DPI_AWARENESS_CONTEXT_UNSPECIFIED` result that is never checked, however we set `dpiAwarenessScopeIsSet` flag assuming the scope was set.\r\n\r\nWhen disposing the scope we pass the obtained context to `TrySetThreadDpiAwarenessContext` that tries to restore the scope back to the original. However in event the original was `DPI_AWARENESS_CONTEXT_UNSPECIFIED` it leads to ANE, that was observed in #2969.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customers on W10 1607 will now be able to use `ContextMenuStrip` in `HighDpiMode.PerMonitorV2`\r\n- \r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3279)","Url":"https://github.com/dotnet/winforms/pull/3279","RelatedDescription":"Open PR \"fix: ContextMenuStrip leads to crash on W10 1607\" (#3279)"},{"Id":"617395759","IsPullRequest":true,"CreatedAt":"2020-05-13T12:57:26","Actor":"dotnet-maestro[bot]","Number":"3278","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200512.14\r\n- **Date Produced**: 5/13/2020 3:06 AM\r\n- **Commit**: bc3bec788cd8d1f9d882b359ca8368248bf051a4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **System.CodeDom**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **System.Security.Permissions**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **System.Drawing.Common**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.5.20261.9 to 5.0.0-preview.6.20262.14\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3278)","Url":"https://github.com/dotnet/winforms/pull/3278","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3278)"},{"Id":"617303387","IsPullRequest":true,"CreatedAt":"2020-05-13T09:42:58","Actor":"weltkante","Number":"3276","RawContent":null,"Title":"update Xunit.StaFact to include bugfixes","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3122\r\n\r\n\r\n## Proposed changes\r\n\r\nUpdate Xunit.StaFact package to consume bugfixes made upstream\r\n\r\n## Customer Impact\r\n\r\nNone, test infrastructure only\r\n\r\n## Regression? \r\n\r\nNo\r\n\r\n## Risk\r\n\r\nUnknown issues may be introdcued by updating 3rd party packages, but getting fixes for already known issues should outweight that risk.\r\n\r\n### Before\r\n\r\nUnable to run WinFormsTheory with complex MemberData inside VS\r\n\r\n### After\r\n\r\nAble to run WinFormsTheory with complex MemberData inside VS\r\n\r\n(+ various other fixes I don't know exactly how to test for, like calling OleRequired to initialize OLE on the STA thread)\r\n\r\n## Test methodology\r\n\r\nMaking sure one of the known issues is actually fixed. I didn't explicitly test for other fixes that have been merged.\r\n\r\n## Test environment\r\n\r\nlocal\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3276)","Url":"https://github.com/dotnet/winforms/pull/3276","RelatedDescription":"Open PR \"update Xunit.StaFact to include bugfixes\" (#3276)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-05-20T05:30:50.7344684Z","RunDurationInMilliseconds":640}