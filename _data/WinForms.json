{"Data":{"GitHub":{"Issues":[{"Id":"636471680","IsPullRequest":true,"CreatedAt":"2020-06-11T04:10:24","Actor":"weltkante","Number":"3423","RawContent":null,"Title":"WebBrowser doesn't like multiple UI threads","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nWorkaround for #3358\r\n\r\n## Proposed changes\r\n\r\nPrevent running WebBrowser control tests on multiple UI threads in parallel as that seems to cause memory corruption (unknown whether root cause is in WinForms or native control)\r\n\r\n## Customer Impact\r\n\r\nno random crashes due to memory corruption in unit tests, should improve CI sucess rates\r\n\r\n## Regression? \r\n\r\nno\r\n\r\n## Risk\r\n\r\nmay slow down tests a bit\r\n\r\n### Before\r\n\r\nrandom CI crashes or test failures that made no sense due to memory corruption\r\n\r\n### After\r\n\r\nprevent memory corruption, allowing CI runs to perform normally\r\n\r\n\r\n## Test methodology\r\n\r\nisolated repro scenario into a separate application, it doesn't seem to cause memory corruption when only one UI thread is running the WebBrowser control\r\n","Url":"https://github.com/dotnet/winforms/pull/3423","RelatedDescription":"Closed or merged PR \"WebBrowser doesn't like multiple UI threads\" (#3423)"},{"Id":"636423251","IsPullRequest":true,"CreatedAt":"2020-06-10T17:26:12","Actor":"hughbe","Number":"3422","RawContent":null,"Title":"Remove PropertyGrid remoting code","State":"open","Body":"This is not supported in .NET Core\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3422)","Url":"https://github.com/dotnet/winforms/pull/3422","RelatedDescription":"Open PR \"Remove PropertyGrid remoting code\" (#3422)"},{"Id":"636367943","IsPullRequest":false,"CreatedAt":"2020-06-10T15:59:15","Actor":"vladimir-krestov","Number":"3421","RawContent":null,"Title":"[Accessibility] Needs to implement UIA provider for all controls","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* Base issue: #2146\r\n* Base PR: #3037 \r\n\r\n* .NET Core Version: 5.0\r\n\r\n**Problem description:**\r\n- Many .Net Core WinForms controls support `MSAA` proxy, which is unmanaged for us. These controls don't support `UIA` provider. This doesn't allow us to change some Accessibility properties or methods to fix some Accessibility bugs. We can't manage our AccessibleObjects fully.\r\n\r\n**Expected behavior:**\r\n- All .Net 5.0 controls support UIA provider\r\n\r\n**Minimal repro:**\r\n- Create a .Net 5.0 Winforms app\r\n- Add any control to the MainForm\r\n- Check `ProviderDescription` Accessibility property of this control using Inspect\r\n\r\n## Controls\r\n**In progress:**\r\n- [ ]  Splitter (#3246)\r\n- [ ]  RadioButton (#3244)\r\n- [ ]  PictureBox (#3233)\r\n- [ ]  CheckBox (#3228)\r\n- [ ]  ListView (#3224)\r\n- [ ]  Button (#3215)\r\n\r\n**In the future:**\r\n- [ ]  GridErrorDlg\r\n- [ ]  GridToolTip\r\n- [ ]  MdiControlStrip\r\n- [ ]  MdiWindowListStrip\r\n- [ ]  ToolStripScrollButton\r\n- [ ]  UpDownBase - abstract\r\n- [ ]  MarshalingControl - sealed\r\n- [ ]  MdiWindowDialog - sealed\r\n- [ ]  ComponentEditorForm\r\n- [ ]  ParkingWindow - sealed\r\n- [ ]  ToolStripPanel\r\n- [ ]  SendKeys\r\n- [ ]  PrintControllerWithStatusDialog\r\n- [ ]  ComponentEditorPage\r\n- [ ]  ListControl - abstract\r\n- [ ]  ScrollBar\r\n- [ ]  TextBoxBase\r\n- [ ]  AxHost\r\n- [ ]  BindingNavigator\r\n- [ ]  ContainerControl\r\n- [ ]  ContextMenuStrip\r\n- [ ]  DateTimePicker\r\n- [ ]  FlowLayoutPanel\r\n- [ ]  HScrollBar\r\n- [ ]  MaskedTextBox\r\n- [ ]  MenuStrip\r\n- [ ]  NumericUpDown","Url":"https://github.com/dotnet/winforms/issues/3421","RelatedDescription":"Open issue \"[Accessibility] Needs to implement UIA provider for all controls\" (#3421)"},{"Id":"636192670","IsPullRequest":true,"CreatedAt":"2020-06-10T12:08:12","Actor":"dotnet-maestro[bot]","Number":"3420","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200609.9\r\n- **Date Produced**: 6/10/2020 6:30 AM\r\n- **Commit**: e2ed3631b9a2a97de10991e4b548f63086cdc67a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20309.9\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3420)","Url":"https://github.com/dotnet/winforms/pull/3420","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/runtime\" (#3420)"},{"Id":"636024211","IsPullRequest":false,"CreatedAt":"2020-06-10T07:59:55","Actor":"SergeySmirnov-Akvelon","Number":"3419","RawContent":null,"Title":"The \"RaiseAutomationEvent\" method doesn't check \"IsHandleCreated\" flag.","State":"open","Body":"- .NET Core Version:\r\n  .NET 5 P4 \r\n\r\n**Problem description:**\r\n\r\nhttps://github.com/dotnet/winforms/pull/3228#discussion_r437081185\r\n\r\n\r\nUse of `RaiseAutomationEvent`, `RaiseAutomationPropertyChangedEvent`, etc. requires guards again a non-existing handle here, else we'll force a creation. However it is easy to overlook this fact, so the guard `if (IsHandleCreated)` must be implemented in those events rather than expect the caller to apply the guard.\r\n\r\nE.g. `AccessibilityNotifyClients` have the guard:\r\nhttps://github.com/dotnet/winforms/blob/d4cfc2d9d6cb20984761fc0cf5eb8efd70c2d810/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs#L4505-L4511\r\n\r\n`RaiseAutomation*Event` must perform the same checks, but since they are defined on `AccessibleObject` and have no notion of `owner` object, perhaps these should be moved to the level of `ControlAccessibleObject`, or `ControlAccessibleObject` should provide an override.\r\n\r\n\r\n\r\n**Expected behavior:**\r\n\r\n`RaiseAutomation*Event` method should check `IsHandleCreated` flag.\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3419","RelatedDescription":"Open issue \"The \"RaiseAutomationEvent\" method doesn't check \"IsHandleCreated\" flag.\" (#3419)"},{"Id":"635349440","IsPullRequest":true,"CreatedAt":"2020-06-10T06:49:38","Actor":"hughbe","Number":"3415","RawContent":null,"Title":"Make HtmlElement tests machine agnostic","State":"closed","Body":"## Proposed Changes\r\n- Make HtmlElement tests machine agnostic - make sure its not empty and doesn't contain garbage like trailing null chars\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3415)","Url":"https://github.com/dotnet/winforms/pull/3415","RelatedDescription":"Closed or merged PR \"Make HtmlElement tests machine agnostic\" (#3415)"},{"Id":"635785848","IsPullRequest":false,"CreatedAt":"2020-06-09T21:59:33","Actor":"weltkante","Number":"3418","RawContent":null,"Title":"Reduce UI test congestion","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nLooking at dumps of test runs (e.g. during #3358) or breaking test runs in a debugger it appears there are dozens of test threads stuck starting up or winding down.\r\n\r\nGenerally there seems to be a lot of congestion on the WinForms side.\r\n\r\nI don't know if reducing congestion makes test runs complete faster, but it certainly will make inspecting hangs and crashes easier if there are less threads to look at.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n- consider limiting the amount of WinFormsFact/Theory threads active at a time\r\n- consider investigating and reducing congestion when running multiple UI threads\r\n\r\n**Will this feature affect UI controls?**\r\n\r\nno, this affects infrastructure running multiple UI threads, primary use-case being unit tests\r\n\r\n/cc @AArnott @hughbe @RussKie - note this is not of high priority, just want to ping you if you weren't aware that there are often several dozens of threads waiting on a global lock for startup/shutdown","Url":"https://github.com/dotnet/winforms/issues/3418","RelatedDescription":"Open issue \"Reduce UI test congestion\" (#3418)"},{"Id":"635648945","IsPullRequest":true,"CreatedAt":"2020-06-09T18:01:00","Actor":"kpreisser","Number":"3417","RawContent":null,"Title":"Check for illegal cross-thread calls in the TaskDialog","State":"open","Body":"\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nContributes to dotnet/winforms#3222\r\n\r\n\r\n## Proposed changes\r\n\r\n- The `TaskDialog.Handle` getter will now throw an `InvalidOperationException` when `Control.CheckForIllegalCrossThreadCalls` is `true`, the task dialog is currently being shown, and the current thread is not the one which created the handle.\r\nThis is a \"best-effort\" mechanism to make developers aware of incorrect thread usage, as the task dialog implementation is not thread-safe. (However, because the code is not thread-safe, you cannot rely on the exception being thrown.)\r\n- Because the `TaskDialog.Handle` property is also used internally by code that updates the dialog while it is shown, such code may also throw the `InvalidOperationException` in such cases, for example:\r\n  - `TaskDialogPage.Text.set`\r\n  - `TaskDialogButton.PerformClick()`\r\n  - `TaskDialogRadioButton.Checked.set` etc.\r\n\r\n**TODO:** Add Tests\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customers will be able to detect incorrect threading usage when using the task dialog. The `InvalidOperationException` may only be thrown when `Control.CheckForIllegalCrossThreadCalls` is `true`, which is the default value when a debugger is attached.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing by showing a task dialog and then starting a new thread in the `TaskDialogPage.Created` event that tries to update the dialog while a debugger is attached.\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.100-preview.7.20308.4\r\n Commit:    090d8ec3ef\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-preview.7.20308.4\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-preview.7.20307.4\r\n  Commit:  b143003882\r\n\r\n.NET SDKs installed:\r\n  3.1.400-preview-015151 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-preview.7.20308.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3417)","Url":"https://github.com/dotnet/winforms/pull/3417","RelatedDescription":"Open PR \"Check for illegal cross-thread calls in the TaskDialog\" (#3417)"},{"Id":"635372293","IsPullRequest":true,"CreatedAt":"2020-06-09T12:29:20","Actor":"dotnet-maestro[bot]","Number":"3416","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200608.8\r\n- **Date Produced**: 6/8/2020 10:58 PM\r\n- **Commit**: 80553e8d49479b775409dd70803b541c81cc39d9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3416)","Url":"https://github.com/dotnet/winforms/pull/3416","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3416)"},{"Id":"635261364","IsPullRequest":true,"CreatedAt":"2020-06-09T11:02:26","Actor":"hughbe","Number":"3414","RawContent":null,"Title":"Fix build after CHARFORMAT2W merge","State":"closed","Body":"The merge of `System.Windows.Primitives.Tests` cleanup and `CHARFORMAT2W` cleanup meant that the `CHARFORMATWTests.cs` file was duplicated. Since `CHARFORMATW` doesn't exist anymore, we need to delete it\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3414)","Url":"https://github.com/dotnet/winforms/pull/3414","RelatedDescription":"Closed or merged PR \"Fix build after CHARFORMAT2W merge\" (#3414)"},{"Id":"633258436","IsPullRequest":true,"CreatedAt":"2020-06-09T05:53:08","Actor":"hughbe","Number":"3408","RawContent":null,"Title":"Fix local WebBrowser tests","State":"closed","Body":"```\r\n[xUnit.net 00:04:07.67]     System.Windows.Forms.Tests.WebBrowserTests.WebBrowser_DocumentText_SetValidHtml_GetReturnsExpected [FAIL]\r\n  X System.Windows.Forms.Tests.WebBrowserTests.WebBrowser_DocumentText_SetValidHtml_GetReturnsExpected [700ms]\r\n  Error Message:\r\n   Assert.Equal() Failure\r\nExpected: 6\r\nActual:   7\r\n  Stack Trace:\r\n     at System.Windows.Forms.Tests.WebBrowserTests.WebBrowser_DocumentText_SetValidHtml_GetReturnsExpected() in C:\\Users\\hughbe\\Documents\\GitHub\\winforms\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\WebBrowserTests.cs:line 806\r\n--- End of stack trace from previous location ---\r\n```\r\n\r\nThe number of times the document title changed handler is called depends on the version of windows etc.\r\n\r\nJust verify that it was called at least once\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3408)","Url":"https://github.com/dotnet/winforms/pull/3408","RelatedDescription":"Closed or merged PR \"Fix local WebBrowser tests\" (#3408)"},{"Id":"631823458","IsPullRequest":true,"CreatedAt":"2020-06-09T05:38:05","Actor":"weltkante","Number":"3403","RawContent":null,"Title":"Dispose controls in unit tests","State":"closed","Body":"Contributes to #3361\r\n\r\n## Proposed changes\r\n\r\nDispose controls instead of letting GC collect them\r\n- Add missing using statements\r\n- Make `ErrorProviderAccessibleObjectTests` disposable\r\n\r\nNot doing so may hang CI if their UI thread terminates before GC collects them\r\n\r\n## Customer Impact\r\n\r\n- lower risk of hanging CI test runs\r\n\r\n## Risk\r\n\r\n- minimal, unlikely to break any test\r\n\r\n### Before\r\n\r\n- tests were leaving controls for GC to collect\r\n\r\n### After\r\n\r\n- controls are disposed before UI thread terminates\r\n\r\n## Test methodology\r\n\r\n- making sure tests still succeed\r\n- logging finalizer calls like described in #3361\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3403)","Url":"https://github.com/dotnet/winforms/pull/3403","RelatedDescription":"Closed or merged PR \"Dispose controls in unit tests\" (#3403)"},{"Id":"631913411","IsPullRequest":true,"CreatedAt":"2020-06-09T05:36:43","Actor":"weltkante","Number":"3404","RawContent":null,"Title":"do not dispose stream owned by image","State":"closed","Body":"Fixes #3309\r\n\r\n## Proposed changes\r\n\r\nLoading an image from a stream passes ownership, do not dispose the stream\r\n* Fix regression in ImageEditor\r\n* Fix regression in ImageListImageEditor\r\n* Add test to ensure BitmapEditor doesn't regress\r\n\r\n## Customer Impact\r\n\r\nUsing ImageEditor or ImageListImageEditor through a property grid or designer was producing partially defunct images whose underlying stream was disposed, depending on the operation performed on the image this could load to errors.\r\n\r\n## Regression? \r\n\r\nYes\r\n\r\n## Risk\r\n\r\nunlikely to have any risk, this restores behavior from before the regression\r\n\r\n### Before\r\n\r\nImage loaded from ImageEditor or ImageListImageEditor could throw exceptions on various operations\r\n\r\n### After\r\n\r\nImage loaded from ImageEditor or ImageListImageEditor should operate normally\r\n\r\n## Test methodology\r\n\r\nEnsure unit tests perform an operation accessing the underlying stream.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3404)","Url":"https://github.com/dotnet/winforms/pull/3404","RelatedDescription":"Closed or merged PR \"do not dispose stream owned by image\" (#3404)"},{"Id":"631168852","IsPullRequest":true,"CreatedAt":"2020-06-09T03:17:47","Actor":"dreddy-work","Number":"3394","RawContent":null,"Title":"Fixing DPI changed events by changing the order in setting child Form owner","State":"closed","Body":"In a multi DPI environment, DPI changed events triggered only when there is a DPI change happened for the Handle directly or via its parent. So, it is necessary to **not** set the\r\nowner before creating the Form handle. Otherwise, the window may never receive DPI changed\r\nevent even if its parent Form has different DPI. Users at runtime, has to move the Form window\r\nbetween the screens to get the DPI changed events triggered.\r\n\r\nPlease see associated issue for more details and screen shots the behavior at runtime.\r\n\r\nFixes #3390 \r\n\r\n## Proposed changes\r\n\r\nChanging the order when setting the owner of a child form.\r\n\r\n## Regression? \r\n\r\n-No\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3394)","Url":"https://github.com/dotnet/winforms/pull/3394","RelatedDescription":"Closed or merged PR \"Fixing DPI changed events by changing the order in setting child Form owner\" (#3394)"},{"Id":"633256812","IsPullRequest":true,"CreatedAt":"2020-06-09T02:50:29","Actor":"hughbe","Number":"3407","RawContent":null,"Title":"Cleanup CA code","State":"closed","Body":"Extracted from #3197\r\n\r\n- Move to Ole32\r\n- Rename to `CA`\r\n- Make void pointer \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3407)","Url":"https://github.com/dotnet/winforms/pull/3407","RelatedDescription":"Closed or merged PR \"Cleanup CA code\" (#3407)"},{"Id":"634551605","IsPullRequest":true,"CreatedAt":"2020-06-09T01:54:45","Actor":"dotnet-maestro[bot]","Number":"3413","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200607.4\r\n- **Date Produced**: 6/8/2020 8:12 AM\r\n- **Commit**: b143003882d7fd3e93927363c3f4ac33b340bf65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20306.3 to 5.0.0-preview.7.20307.4\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3413)","Url":"https://github.com/dotnet/winforms/pull/3413","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3413)"},{"Id":"631380318","IsPullRequest":true,"CreatedAt":"2020-06-08T21:15:53","Actor":"RussKie","Number":"3398","RawContent":null,"Title":"Call UiaDisconnectProvider from Control.ReleaseUiaProvider","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nPort to 3.1 from https://github.com/dotnet/winforms/pull/3308\r\nResolves #3182\r\n\r\n## Proposed changes\r\n\r\n- Call `UiaDisconnectProvider` to explicitly detach UIA providers when a control or form is being disposed. This ensures that clients that leak UIA objects cannot leak them in the target application indefinitely. It follows the pattern from the [Windows SDK sample](https://github.com/microsoft/Windows-classic-samples/tree/master/Samples/UIAutomationCleanShutdown).\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- UIA objects for disposed controls won't cause memory leak\r\n- UIA clients accessing UIA providers for disposed controls will get `UIA_E_ELEMENTNOTAVAILABLE` error\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- There should be no risk when the application is accessed by properly implemented UIA clients. These clients should be prepared to handle `UIA_E_ELEMENTNOTAVAILABLE` error and also release the UIA objects in timely manner. For misbehaving UIA clients it could cause a problem in the UIA client instead of a leak in the WinForms application.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Tested with VisualUIAVerifyNative and Accessibility Insight to ensure that the UIA clients react correctly to the change (longer description of effect available in #3182).\r\n- Tested with SciTech Memory Profiler to ensure that controls/forms with UIA providers are released when a form is closed and hence don't keep additional reference that would make these objects have prolonged lifetime.\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3398)","Url":"https://github.com/dotnet/winforms/pull/3398","RelatedDescription":"Closed or merged PR \"Call UiaDisconnectProvider from Control.ReleaseUiaProvider\" (#3398)"},{"Id":"634422366","IsPullRequest":true,"CreatedAt":"2020-06-08T09:17:25","Actor":"vladimir-krestov","Number":"3412","RawContent":null,"Title":"Implementing LegacyIAccessiblePattern supporting for ControlAccessibleObject","State":"open","Body":" Fixes #3410\r\n\r\n## Proposed changes\r\n\r\n- Set `IsPatternSupported` for `LegacyIAccessiblePatternId` as true in `ControlAccessibleObject`. It will cause all control accessible objects to implement LegacyIAccessible.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- A customer can see correct some accessible properties for accessible objects, which didn't implement LegacyIAccessiblePattern.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual testing\r\n- unit testing\r\n- CTI\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n- using Inspect tool\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- Microsoft Windows [Version 10.0.18363.836]\r\n- .Net Version:   5.0.100-preview.7.20305.3\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3412)","Url":"https://github.com/dotnet/winforms/pull/3412","RelatedDescription":"Open PR \"Implementing LegacyIAccessiblePattern supporting for ControlAccessibleObject\" (#3412)"},{"Id":"634387124","IsPullRequest":false,"CreatedAt":"2020-06-08T08:50:44","Actor":"Zheng-Li01","Number":"3411","RawContent":null,"Title":"Winforms child window is not scaled according to the DPI of the monitor on signal monitor","State":"open","Body":"* Have you experienced this same bug with .NET Framework?:\r\nYes\r\n\r\n* .NET Core Version: \r\nLatest .net core sdk 5.0 preview7 20307.3\r\n\r\n**More info:**\r\nThe issue also can reproduce when changing the Display Scale and Layout settings from 300% to 100% of the monitor in which the application is running.\r\n\r\n**Problem description:**\r\nWinform application is unable to render the child window appropriately according to the current monitor DPI when it's DpiAwareness is set to PermonitorV2.\r\n\r\n**Expected behavior:**\r\nScaling of the parent and child forms should be consistent and according to the monitor DPI that they are rendered.\r\n\r\n**Minimal repro:**\r\n1. Open the solution in Visual Studio 2019 and run the application on 100% monitor.(\r\n[CoreProject.zip](https://github.com/dotnet/winforms/files/4744799/CoreProject.zip))\r\n2. Change the Display Scale and Layout settings from 100% to 300% of the monitor in which the application is running.\r\n\t**Note: Do not stop the running application**\r\n3. Open child window by clicking on the \"Open\" button in the Main Form\r\n![Coew_300_to_100](https://user-images.githubusercontent.com/38325459/84010824-c8b29200-a9a7-11ea-8efc-e476a243e0af.PNG)","Url":"https://github.com/dotnet/winforms/issues/3411","RelatedDescription":"Open issue \"Winforms child window is not scaled according to the DPI of the monitor on signal monitor\" (#3411)"},{"Id":"634311518","IsPullRequest":false,"CreatedAt":"2020-06-08T07:47:21","Actor":"vladimir-krestov","Number":"3410","RawContent":null,"Title":"Needs to implement UIA_LegacyIAccessiblePattern for all control accessible objects","State":"open","Body":"* .NET Core Version: 5.0\r\n\r\n* Have you experienced this same bug with .NET Framework?:  Yes\r\n\r\n**Problem description:**\r\n- If to set SupportsUiaProviders as true for any control it will lose LegacyIAccessiblePattern implementation. In this case, you can't set accessible Role, Name, and other properties for this control.\r\n\r\n**Expected behavior:**\r\n- All control accessible objects support LegacyIAccessiblePattern\r\n\r\n**Minimal repro:**\r\n- Create a .Net 5.0 Winforms app\r\n- Add a control, which supports uia provider \r\n- Try to set AccessibleName or AccessibleRole\r\n- Run Inspect and look at LegacyIAccessible properties","Url":"https://github.com/dotnet/winforms/issues/3410","RelatedDescription":"Open issue \"Needs to implement UIA_LegacyIAccessiblePattern for all control accessible objects\" (#3410)"},{"Id":"633354776","IsPullRequest":true,"CreatedAt":"2020-06-07T12:38:35","Actor":"dotnet-maestro[bot]","Number":"3409","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200606.3\r\n- **Date Produced**: 6/7/2020 1:37 AM\r\n- **Commit**: 4b339d8ba42a03cd8624adc0c3cbe73817a76b77\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20305.1 to 5.0.0-preview.7.20306.3\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3409)","Url":"https://github.com/dotnet/winforms/pull/3409","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3409)"},{"Id":"633235743","IsPullRequest":false,"CreatedAt":"2020-06-07T09:28:27","Actor":"hughbe","Number":"3406","RawContent":null,"Title":"ComboBoxAccessibleObject_ExpandCollapse_Set_CollapsedState failing","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\nMaster\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nN/A\r\n\r\n**Problem description:**\r\n```\r\nAssert.Equal() Failure\\r\\nExpected: Expanded\\r\\nActual: None\r\n   at System.Windows.Forms.Tests.AccessibleObjects.ComboBoxAccessibleObjectTests.ComboBoxAccessibleObject_ExpandCollapse_Set_CollapsedState(ComboBoxStyle comboBoxStyle) in F:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\tests\\UnitTests\\AccessibleObjects\\ComboBoxAccessibleObjectTests.cs:line 35\r\n```\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=674902&view=ms.vss-test-web.build-test-results-tab&runId=20913492&resultId=101913&paneView=debug","Url":"https://github.com/dotnet/winforms/issues/3406","RelatedDescription":"Open issue \"ComboBoxAccessibleObject_ExpandCollapse_Set_CollapsedState failing\" (#3406)"},{"Id":"632336288","IsPullRequest":true,"CreatedAt":"2020-06-06T10:11:40","Actor":"dotnet-maestro[bot]","Number":"3405","RawContent":null,"Title":"[release/5.0-preview6] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f9536b6f-5667-4c67-faef-08d7f76e4602)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: f9536b6f-5667-4c67-faef-08d7f76e4602\r\n- **Build**: 20200605.6\r\n- **Date Produced**: 6/6/2020 9:14 AM\r\n- **Commit**: 4ba9ecaabd4d5c87c776a030eafdac0bae0512cf\r\n- **Branch**: refs/heads/release/5.0-preview6\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20304.6 to 5.0.0-preview.6.20305.6\r\n\r\n[marker]: <> (End:f9536b6f-5667-4c67-faef-08d7f76e4602)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3405)","Url":"https://github.com/dotnet/winforms/pull/3405","RelatedDescription":"Closed or merged PR \"[release/5.0-preview6] Update dependencies from dotnet/runtime\" (#3405)"},{"Id":"631615710","IsPullRequest":false,"CreatedAt":"2020-06-05T13:59:49","Actor":"mlsomers","Number":"3402","RawContent":null,"Title":"Child items of System.Windows.Forms.StatusStrip are not added to the strip (designer issue)","State":"open","Body":"ToolStripStatusLabel's (and maybe other items, not tested) are not visible, nither in the designer nor in runtime. It turns out they are never assigned to the strip's Items collection. A workaround (that only works in runtime) is to add them manually after `InitializeComponent`:\r\n```\r\npublic Form1()\r\n{\r\n    InitializeComponent();\r\n    this.statusStrip1.Items.AddRange(new []{ toolStripStatusLabel1, toolStripStatusLabel2, toolStripStatusLabel3, toolStripStatusLabel4 });\r\n}\r\n```\r\n\r\nRelated artifacts:\r\n- Items need to be added using the Items property via the PropertyGrid (not a big issue).\r\n- Come back to the designer later and all previously added items have disappeared! (PANIC!) but hit Cancel and they are still in the code-behind (Whew!)\r\n- The Items designer does not allow renaming items, after changing the name and leaving the field the name jumps back to \"toolStripStatusLabelx\". Workaround is to refactor that in form.Designer.cs.\r\n","Url":"https://github.com/dotnet/winforms/issues/3402","RelatedDescription":"Open issue \"Child items of System.Windows.Forms.StatusStrip are not added to the strip (designer issue)\" (#3402)"},{"Id":"631542095","IsPullRequest":true,"CreatedAt":"2020-06-05T12:28:35","Actor":"dotnet-maestro[bot]","Number":"3401","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200605.1\r\n- **Date Produced**: 6/5/2020 11:08 AM\r\n- **Commit**: d0889f1159b6ea044b5e491921b7a37a688ce465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20303.11 to 5.0.0-preview.7.20305.1\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3401)","Url":"https://github.com/dotnet/winforms/pull/3401","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3401)"},{"Id":"631337698","IsPullRequest":true,"CreatedAt":"2020-06-05T10:24:36","Actor":"hoyosjs","Number":"3396","RawContent":null,"Title":"Add x86 runtime for testing","State":"closed","Body":"Contributes to dotnet/arcade#5583\r\n\r\n## Proposed changes\r\n\r\n- Install x86 runtime for testing.\r\n\r\n## Customer Impact\r\n\r\n- Ensures proper testing in a 32 bit process.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- None, other than increased download at first build and potential test failures from the increased coverage.\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/19413848/83842642-44ff5980-a6b8-11ea-8e9e-d78dfc64f68f.png)\r\n\r\n## Test methodology \r\n\r\n- This adds no functionality so no added tests.\r\n\r\n## Test environment(s) \r\n\r\n- Using default runtimes and SDK already used for testing.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3396)","Url":"https://github.com/dotnet/winforms/pull/3396","RelatedDescription":"Closed or merged PR \"Add x86 runtime for testing\" (#3396)"},{"Id":"631465623","IsPullRequest":true,"CreatedAt":"2020-06-05T10:14:06","Actor":"dotnet-maestro[bot]","Number":"3400","RawContent":null,"Title":"[release/5.0-preview6] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f9536b6f-5667-4c67-faef-08d7f76e4602)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: f9536b6f-5667-4c67-faef-08d7f76e4602\r\n- **Build**: 20200604.6\r\n- **Date Produced**: 6/5/2020 9:20 AM\r\n- **Commit**: d224df18b9f1a482f841998831742148a59244c3\r\n- **Branch**: refs/heads/release/5.0-preview6\r\n- **Updates**:\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20302.5 to 5.0.0-preview.6.20304.6\r\n\r\n[marker]: <> (End:f9536b6f-5667-4c67-faef-08d7f76e4602)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3400)","Url":"https://github.com/dotnet/winforms/pull/3400","RelatedDescription":"Closed or merged PR \"[release/5.0-preview6] Update dependencies from dotnet/runtime\" (#3400)"},{"Id":"631458144","IsPullRequest":false,"CreatedAt":"2020-06-05T09:41:20","Actor":"Amy-Li03","Number":"3399","RawContent":null,"Title":"RichTextBox doesn't work right when hidden text is used","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET SDK 5.0.100-preview.7.20304.9\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n  1. This issue can reproduce from .NET 4.7 to .NET 4.8 latest build.\r\n  2. This issue cannot reproduce in versions prior to .NET 4.7.\r\n\r\n\r\n**Problem description:**\r\nWhen insert hidden text (e.g. \"{\\rtf1\\ansi{Sample for {\\v HIDDEN }text}}\") to the RTF fragment, the RichTextBox's Text property doesn't return this hidden text anymore.\r\n\r\n**Expected behavior:**\r\nThe hidden text is hidden in RTF view but can be accessed using the Text property and found using Find() method.\r\n\r\n**Minimal repro:**\r\n1. Create a .NET core project with a RichTextBox control. [TestApp.zip](https://github.com/dotnet/winforms/files/4735196/TestApp.zip)\r\n2. Add these 3 lines after the call to InitializeComponent():\r\n_richTextBox1.Rtf = @\"{\\rtf1\\ansi{Sample for {\\v HIDDEN }text}}\";\r\nSystem.Diagnostics.Trace.Assert(richTextBox1.Text == \"Sample for HIDDEN text\");\r\nSystem.Diagnostics.Trace.Assert(richTextBox1.Find(\"HIDDEN\") >= 0);_\r\n3. Build and run the project.","Url":"https://github.com/dotnet/winforms/issues/3399","RelatedDescription":"Open issue \"RichTextBox doesn't work right when hidden text is used\" (#3399)"},{"Id":"631375380","IsPullRequest":true,"CreatedAt":"2020-06-05T09:31:29","Actor":"v-chmart","Number":"3397","RawContent":null,"Title":"LOC CHECKIN | dotnet/winforms master | 20200605","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\nLocalization update only\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3397)","Url":"https://github.com/dotnet/winforms/pull/3397","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/winforms master | 20200605\" (#3397)"},{"Id":"631269369","IsPullRequest":false,"CreatedAt":"2020-06-05T02:43:06","Actor":"Amy-Li03","Number":"3395","RawContent":null,"Title":"The MDI Child form does not render correctly at High DPI","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET 5.0.100-preview.6.20302.5\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\nWhen  keeping the app running and changing the DPI from 100% to 175% or higher, the header of this maximized Mdi child windows shoule not be visible and label control in MDI child window should not be cropped.\r\nBut if we running the app on 100% DPI, then stop the running app and change the DPI from 100% to 175%, run this project again, this issue cannot reproduce.\r\n\r\n![175%](https://user-images.githubusercontent.com/62929087/83830614-26c94600-a718-11ea-821b-06392aed3615.PNG)\r\n\r\n**Expected behavior:**\r\nThe MDI child form should show correctly at high DPI as it was at 100%.\r\n\r\n![100%](https://user-images.githubusercontent.com/62929087/83830568-11541c00-a718-11ea-92ab-66947226c7a9.PNG)\r\n\r\n**Minimal repro:**\r\n1. Run the test app with display at 100%. \r\n[MdiHighDpiTest-master.zip](https://github.com/dotnet/winforms/files/4733616/MdiHighDpiTest-master.zip)\r\n2. Keep the app running and change the display to 175% or higher. (there is no sign out)","Url":"https://github.com/dotnet/winforms/issues/3395","RelatedDescription":"Open issue \"The MDI Child form does not render correctly at High DPI\" (#3395)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-06-11T05:30:50.9547117Z","RunDurationInMilliseconds":690}