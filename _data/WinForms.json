{"Data":{"GitHub":{"Issues":[{"Id":"1654868878","IsPullRequest":false,"CreatedAt":"2023-04-05T03:24:17","Actor":"elachlan","Number":"8942","RawContent":null,"Title":"New overload on DataGridView.Sort to specify sort direction for column sort glyph icon","State":"open","Body":"### Background and motivation\r\n\r\nUsers who implement their own sort logic on a column with `SortMode=DataGridViewColumnSortMode.Programmatic` find it unintuitive/difficult to set a sort glyph icon.\r\n\r\nSee issue: #1063\r\n\r\nThis would allow a user to specify the sort glyph icon direction\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Window.Forms;\r\n\r\npublic class DataGridView\r\n{\r\n    public virtual void Sort (System.Windows.Forms.DataGridViewColumn dataGridViewColumn,\r\nSystem.ComponentModel.ListSortDirection direction,\r\nSystem.Windows.Forms.SortOrder sortGlyphDirection\r\n);\r\n\r\n    public virtual void Sort (System.Collections.IComparer comparer, \r\nSystem.Windows.Forms.SortOrder sortGlyphDirection\r\n);\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\n// Sort the gridview\r\ndataGridView1.Sort(dataGridView1.Columns[0], ListSortDirection.Ascending, SortOrder.Descending);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nInstead of an overload, add the `sortGlyphDirection` as an optional parameter with a default value of `SortOrder.None`.\r\n\r\n### Risks\r\n\r\nCould break existing application logic if optional `sortGlyphDirection` is used. But usually the glyph is set after you have sorted the gridview.\r\n\r\n### Will this feature affect UI controls?\r\n\r\nYes, `DataGridView` will be affected.","Url":"https://github.com/dotnet/winforms/issues/8942","RelatedDescription":"Open issue \"New overload on DataGridView.Sort to specify sort direction for column sort glyph icon\" (#8942)"},{"Id":"1654531676","IsPullRequest":true,"CreatedAt":"2023-04-04T20:25:50","Actor":"halgab","Number":"8941","RawContent":null,"Title":"Use interpolated strings in System.Drawing.Common","State":"open","Body":"I'm not sure the newly added System.Drawing.Common project is in scope for #8203. If it is, I've addressed it here.\r\nNote that I also touched some code inside `#if FINALIZATION_WATCH`, fixing some of it in the process\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8941)","Url":"https://github.com/dotnet/winforms/pull/8941","RelatedDescription":"Open PR \"Use interpolated strings in System.Drawing.Common\" (#8941)"},{"Id":"1653057467","IsPullRequest":true,"CreatedAt":"2023-04-04T19:30:46","Actor":"JeremyKuhne","Number":"8937","RawContent":null,"Title":"Remove non-Windows test code from System.Drawing","State":"closed","Body":"We don't run our tests on anything that isn't Windows or doesn't have GDI+. This removes a fair amount of that condition code.\r\n\r\nAlso skip AnimateAndCaptureFrames as it gets picked up by the Test Explorer.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8937)","Url":"https://github.com/dotnet/winforms/pull/8937","RelatedDescription":"Closed or merged PR \"Remove non-Windows test code from System.Drawing\" (#8937)"},{"Id":"1653001570","IsPullRequest":true,"CreatedAt":"2023-04-04T18:49:34","Actor":"dreddy-work","Number":"8936","RawContent":null,"Title":"Disable ServerManager and minimize all open windows on test machines.","State":"closed","Body":"Infra changes to improve UI tests reliability.\r\n\r\n- Stop ServerManager.exe process.\r\n- Minimize all windows on the test machine before launching Integration tests.\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8936)","Url":"https://github.com/dotnet/winforms/pull/8936","RelatedDescription":"Closed or merged PR \"Disable ServerManager and minimize all open windows on test machines.\" (#8936)"},{"Id":"1654285169","IsPullRequest":true,"CreatedAt":"2023-04-04T18:23:02","Actor":"vseanreesermsft","Number":"8939","RawContent":null,"Title":"Update branding to 6.0.17","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8939)","Url":"https://github.com/dotnet/winforms/pull/8939","RelatedDescription":"Closed or merged PR \"Update branding to 6.0.17\" (#8939)"},{"Id":"1654285341","IsPullRequest":true,"CreatedAt":"2023-04-04T18:19:59","Actor":"vseanreesermsft","Number":"8940","RawContent":null,"Title":"Update branding to 7.0.6","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8940)","Url":"https://github.com/dotnet/winforms/pull/8940","RelatedDescription":"Closed or merged PR \"Update branding to 7.0.6\" (#8940)"},{"Id":"1654155460","IsPullRequest":false,"CreatedAt":"2023-04-04T15:55:36","Actor":"ALiwoto","Number":"8938","RawContent":null,"Title":"[API Proposal]: Allow ControlCollection.AddRange to use params keyword.","State":"open","Body":"### Background and motivation\r\n\r\nCurrently [Control.ControlCollection.AddRange](https://github.com/dotnet/winforms/blob/a37c1817d3f965d9a8bdd3d89fd0b98609715e84/src/System.Windows.Forms/src/System/Windows/Forms/Control.ControlCollection.cs#L153) method is accepting an array of `Control`, this means each time that we want to add multiple controls at once, we have to make a new array. By using `params` keyword using this method will become easier.\r\n\r\n### API Proposal\r\n\r\n- Add `params` keyword to all collection `AddRange` methods.\r\n\r\n```csharp\r\nnamespace System.Windows.Forms;\r\n\r\npublic class Control\r\n{\r\n    public class ControlCollection\r\n    {\r\n        public virtual void AddRange(params Control[] controls);\r\n    }\r\n}\r\n```\r\n\r\nLikewise we want to update our other collections that have an [`AddRange`](https://github.com/dotnet/winforms/pull/8928#issuecomment-1495242738):\r\n\r\n``` C#\r\nSystem.Windows.Forms.AutoCompleteStringCollection.AddRange(params string[] value) -> void\r\nSystem.Windows.Forms.ComboBox.ObjectCollection.AddRange(params object[] items) -> void\r\n\r\n// TODO: Need to list the rest, should also check System.Windows.Forms.Design\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\nthis.Controls.AddRange(this.BtnControl1, this.BtnControl2);\r\n```\r\n\r\n\r\n### Risks\r\n\r\nNo known risks.\r\n\r\n### Will this feature affect UI controls?\r\n\r\n- No, VS Designer doesn't need to support this feature.\r\n- The impact will be easier use of this method by users.\r\n- No, this feature doesn't need to be localized.","Url":"https://github.com/dotnet/winforms/issues/8938","RelatedDescription":"Open issue \"[API Proposal]: Allow ControlCollection.AddRange to use params keyword.\" (#8938)"},{"Id":"1650534153","IsPullRequest":true,"CreatedAt":"2023-04-04T02:25:00","Actor":"kirsan31","Number":"8930","RawContent":null,"Title":"Rework of empty finalizers fix in DataGridView","State":"closed","Body":"Rework of empty finalizers fix in DataGridView due to [this discussion](https://github.com/dotnet/winforms/pull/7431#issuecomment-1423140820).\r\n\r\nAlso added a benchmark for clarity.\r\n- `HashSetB` - previous variant where types were in `HashSet`.\r\n- `GetTypeB` - new variant with `if (GetType() == typeof(DataGridViewBand) || GetType() == typeof(DataGridViewColumn) ...`\r\n- `GetTypeVarB` - `var t = GetType(); if (t == typeof(D1) || t == typeof(D2) ...`\r\n- `HelperMB` - helper method `NeedSuppressFinalize(Type t)` with `return t == typeof(E1) || t == typeof(E2) ...`\r\n![bench](https://user-images.githubusercontent.com/17767561/229299467-711119e8-c0b8-455b-aa8d-cf5ef6bbf3db.png)\r\n[Bench.zip](https://github.com/dotnet/winforms/files/11129968/Bench.zip)\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8930)","Url":"https://github.com/dotnet/winforms/pull/8930","RelatedDescription":"Closed or merged PR \"Rework of empty finalizers fix in DataGridView\" (#8930)"},{"Id":"1649772857","IsPullRequest":true,"CreatedAt":"2023-04-04T02:02:15","Actor":"sharwell","Number":"8927","RawContent":null,"Title":"Do not reset cursor position during test discovery","State":"closed","Body":"ðŸ˜‘ ","Url":"https://github.com/dotnet/winforms/pull/8927","RelatedDescription":"Closed or merged PR \"Do not reset cursor position during test discovery\" (#8927)"},{"Id":"1652738287","IsPullRequest":true,"CreatedAt":"2023-04-04T01:48:41","Actor":"JeremyKuhne","Number":"8934","RawContent":null,"Title":"Disable BinaryFormatter for most test assemblies","State":"closed","Body":"We want to know when we have additional scenarios that are impacted by the BinaryFormatter, so disabling it by default in tests.\r\n\r\nAdds a few formatter scopes around tests that do use BinaryFormatter.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8934)","Url":"https://github.com/dotnet/winforms/pull/8934","RelatedDescription":"Closed or merged PR \"Disable BinaryFormatter for most test assemblies\" (#8934)"},{"Id":"1652911480","IsPullRequest":true,"CreatedAt":"2023-04-04T01:48:20","Actor":"JeremyKuhne","Number":"8935","RawContent":null,"Title":"Handle a few skipped test failures in System.Drawing","State":"closed","Body":"`[KnownIssue]` doesn't actually skip tests in the Test Explorer. This change fixes the tests that were \"skipped\" and actually failing.\r\n\r\n- GDI+ no longer accepts negative pen widths\r\n- Some tests were ported from Mono and skipped as they validated Mono's behavior, not GDI+\r\n- Graphics.CopyFromScreen would call ReleaseHDC even if GetHDC was not called.\r\n- CopyFromScreen assumed -1, -1 was an invalid screen coordinate. Not true for multimonitor.\r\n- SetNativeBrush tests should not be disposing the invalid handle- random badness will occur.\r\n- Prevent using a Graphics object with a null pointer in Font.GetHeight (to avoid AV).\r\n\r\nI've also disabled the BinaryFormatter by default for these tests.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8935)","Url":"https://github.com/dotnet/winforms/pull/8935","RelatedDescription":"Closed or merged PR \"Handle a few skipped test failures in System.Drawing\" (#8935)"},{"Id":"1648553261","IsPullRequest":true,"CreatedAt":"2023-04-03T16:37:35","Actor":"sharwell","Number":"8924","RawContent":null,"Title":"Use CodeAnalysis.test.globalconfig only for overrides","State":"closed","Body":"All duplicate items have been removed, leaving only the unique configuration for tests. The specific configuration behavior is not changed.","Url":"https://github.com/dotnet/winforms/pull/8924","RelatedDescription":"Closed or merged PR \"Use CodeAnalysis.test.globalconfig only for overrides\" (#8924)"},{"Id":"1652385611","IsPullRequest":false,"CreatedAt":"2023-04-03T16:21:29","Actor":"dmitrii-drobotov","Number":"8933","RawContent":null,"Title":"Align and Anchor editors in PropertyGrid do not fill whole width ","State":"open","Body":"### .NET version\n\n8.0.0-preview.4.23177.1\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nConfirmed that it works in .NET 6 and 7\n\n### Issue description\n\nAnchor and Align editors' UI in PropertyGrid is not filled to the whole width of container.\r\n\r\n#### Current Behavior\r\n.NET 8:\r\n![Screenshot 2023-04-03 174935](https://user-images.githubusercontent.com/102954094/229567686-d6521eb5-a8b2-4a0e-ae5b-8c349a9f8096.png)\r\n![Screenshot 2023-04-03 142235](https://user-images.githubusercontent.com/102954094/229567814-4540ce25-33eb-4306-b6b5-354bae5e1da1.png)\r\n\r\n\r\n#### Expected behavior\r\n.NET 7 and .NET Framework:\r\n\r\n![Screenshot 2023-04-03 175456](https://user-images.githubusercontent.com/102954094/229567851-215c8cb6-990c-4129-86db-3ee3b46c8b23.png)\r\n![Screenshot 2023-04-03 142322](https://user-images.githubusercontent.com/102954094/229567863-077d4e21-1023-4f9f-8e3d-ca4e1377e99c.png)\r\n\n\n### Steps to reproduce\n\nIssue is visible if PropertyGrid is wide enough (at least 400px) and doesn't seem to be affected by DPI settings. Sample app: \r\n[AlignAnchorEditorsTest.zip](https://github.com/dotnet/winforms/files/11140356/AlignAnchorEditorsTest.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/8933","RelatedDescription":"Open issue \"Align and Anchor editors in PropertyGrid do not fill whole width \" (#8933)"},{"Id":"1651819271","IsPullRequest":false,"CreatedAt":"2023-04-03T10:49:59","Actor":"carlosmanri","Number":"8932","RawContent":null,"Title":"When a Form is opened and StartPosition is CenterParent, it is opened always on the main monitor when the value of WindowState is Maximized regardless of parent's monitor","State":"open","Body":"### .NET version\r\n\r\nSDK DE .NET:\r\n Version:   7.0.202\r\n Commit:    6c74320bc3\r\n\r\nEntorno de tiempo de ejecuciÃ³n:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.202\\\r\n\r\nHost:\r\n  Version:      7.0.4\r\n  Architecture: x64\r\n  Commit:       0a396acafe\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\n_No response_\r\n\r\n### Issue description\r\n\r\nWhen a Form is opened and StartPosition is CenterParent, it is opened always on the main monitor when the value of WindowState is Maximized.\r\n\r\nIf a window is opened on the secondary monitor, instead of being displayed on that monitor it is displayed on the primary.\r\n\r\nBecause of this, we cannot open maximized forms by default on the same monitor as the parent window.\r\n\r\nHere is a test form that demonstrates the observed behavior:\r\n\r\n[Form1.vb](https://pastebin.com/v5beGHEh)\r\n[Form1.Designer.vb](https://pastebin.com/XSCBYR4V)\r\n\r\nAs a workaround, it is possible to set the WindowState in the overridden OnLoad method. (The \"Open form that overrides onLoad normal with center parent without parent\" and \"Open form that overrides onLoad normal with center parent with parent\" buttons in Form1). Although if the form contains many controls and takes time to load, you see a rectangle on the wrong monitor before moving to the correct one.\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\n**Environment**\r\n2 monitor setup (1920x1080 each)\r\nLeft monitor assigned as primary monitor\r\n\r\n**Reproduction Steps:**\r\n\r\n1. Run the test application\r\n2. Move application window to secondary monitor\r\n3. Click the \"Open form normal with center parent\" button\r\n4. Close the modal window\r\n5. Click the \"Open form maximized with center parent\" button\r\n\r\n**Expected result**\r\nBoth modal windows are displayed on the same monitor as their parent (the secondary monitor)\r\n\r\n**Actual result**\r\nIn the case of the form with the value FormWindowState.Normal, it is shown in the parent's monitor.\r\nHowever, in the form with value FormWindowState.Maximized it is always displayed on the main monitor.\r\n\r\n**Other observations**\r\nIt has also been verified that changing the main monitor in the operating system and executing\r\nthe steps according to the change (move the application to the secondary monitor before\r\nclicking on the buttons) the behavior is maintained.","Url":"https://github.com/dotnet/winforms/issues/8932","RelatedDescription":"Open issue \"When a Form is opened and StartPosition is CenterParent, it is opened always on the main monitor when the value of WindowState is Maximized regardless of parent's monitor\" (#8932)"},{"Id":"1650987240","IsPullRequest":false,"CreatedAt":"2023-04-02T19:18:09","Actor":"djinnet","Number":"8931","RawContent":null,"Title":"Still issue with layouts missing on toolbox and not rendering on designer.","State":"closed","Body":"### Environment\r\n\r\nMicrosoft Visual Studio Community 2022\r\nVersion 17.4.2\r\nVisualStudio.17.Release/17.4.2+33122.133\r\n\r\n### .NET version\r\n\r\n.Net 7\r\n\r\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\r\n\r\nIt still works in .Net Framework, but I would like to assumed that it have never worked in core and then .net 5+ version.\r\n\r\n### Issue description\r\n\r\nI managed to find this issue that was made for 3 years ago: https://github.com/dotnet/winforms/issues/2842\r\nand I do not think that tablelayoutpanel or flowlayoutpanel has been available for core or .net 5+ version, and I could not find any more information for why they haven't been available when it was expected that they should have been available for today's designer.\r\nThe fact that it still is same issue today after three years in newer version (especially in .net 5+) is concerning. So I hope it is acceptable that I am reporting that this is still an on-going issue and brought to the winform designer team's attention. \r\nSo at least that they are being aware of it, even if they have many things on their plate.\r\n\r\n### Steps to reproduce\r\n\r\nCreate empty winfroms project in .net 7 version. Do not choose the framework one.\r\nTry to find TableLayoutPanel or Flowtablelayout in toolbox window. \r\n\r\n### Diagnostics\r\n\r\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8931","RelatedDescription":"Closed issue \"Still issue with layouts missing on toolbox and not rendering on designer.\" (#8931)"},{"Id":"1650035591","IsPullRequest":false,"CreatedAt":"2023-03-31T21:06:16","Actor":"JeremyKuhne","Number":"8929","RawContent":null,"Title":"API Proposal: Add Extract methods to Icon","State":"open","Body":"### Background and motivation\r\n\r\n`System.Drawing.Icon` has methods for creating icons from managed resources and associated native icons. It doesn't, however, allow you to get all native resource icons, or always specify the size that you require.\r\n\r\nThe `Icon` constructors that take a path / stream only support `.ico` files. They do allow choosing a particular size, but also try to pick a color depth based on the current display settings. Color depth matching is of limited use and these constructors are costly as they manually load the entire file, parsing it to create the \"best-fit\" icon. The full stream is kept in memory (this is particularly painful if you're trying to load smaller icons).\r\n\r\n`System.Drawing.Icon.ExtractAssociatedIcon()` has some overlap with these new APIs. It will load the first icon from the file it's given or fall back on whatever executable the file is associated with. The API used for this doesn't allow specifying a size. (We could spin our own by calling [`FindExecutable`](https://learn.microsoft.com/windows/win32/api/shellapi/nf-shellapi-findexecutablew) if we find a need in the future.)\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Drawing;\r\n\r\npublic class Icon\r\n{\r\n    // The existing Extract method.\r\n    public static Icon ExtractAssociatedIcon(string! filePath);\r\n\r\n    // The following work with .ico files as well as PE files (.exe, .dll, etc.). The id is an index when positive or a resource id when negative.\r\n\r\n    // Retrieves the specified icon at the current system icon size setting (large by default).\r\n    public static Icon? ExtractIcon(string! filePath, int id, bool smallIcon = false);\r\n\r\n    // Allows retrieving the specified icon at a specific size (say 32x32). Icon sizes are always square.\r\n    public static Icon? ExtractIcon(string! filePath, int id, ushort size);\r\n\r\n    // Gets the icon count for the specified file.\r\n    public static int GetIconCount(string! filePath);\r\n}\r\n\r\npublic static class SystemIcons\r\n{\r\n    // Existing.\r\n    public static unsafe Icon GetStockIcon(StockIconId stockIcon, StockIconOptions options = StockIconOptions.Default);\r\n\r\n    // New. When asking for an explicit size (as opposed to just large/small) other options aren't available.\r\n    public static unsafe Icon GetStockIcon(StockIconId stockIcon, ushort size);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\n// Get the first icon in regedit.exe at 32x32 size.\r\nusing Icon icon = Icon.ExtractIcon(\"regedit.exe\", id: 0, size: 32);\r\n\r\n// Get the icon from devenv.exe with the 1200 resource id, at the default large size\r\nusing Icon icon = Icon.ExtractIcon(\"devenv.exe\", id: -1200);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nCould potentially add additional constructors to `Icon`, but behavior differences between string overloads would probably be confusing. For example, as the entire source file is not copied, resizing via `Copy` is scaled, instead of reparsed.\r\n\r\n### Risks\r\n\r\nNothing notable.\r\n\r\n### Notes\r\n\r\n- This API will scale to the requested size from available sizes. We'll use `SHGetStockIconInfo`- I believe it tries to scale down from larger sizes.\r\n- We will not track the original source or update the copy constructors. When the full data is kept in the other APIs the original data is parsed again to try and find a matching size when using the copy constructors. With `Icon`s loaded through these APIs you'll just get the current backing bitmap scaled if you change sizes with the copy constructors (as you would with `HICON` constructed `Icon`s and `ExtractAssociatedIcon`).","Url":"https://github.com/dotnet/winforms/issues/8929","RelatedDescription":"Open issue \"API Proposal: Add Extract methods to Icon\" (#8929)"},{"Id":"1648464989","IsPullRequest":true,"CreatedAt":"2023-03-31T18:44:50","Actor":"JeremyKuhne","Number":"8923","RawContent":null,"Title":"Bring API proposal template in line with .NET runtime","State":"closed","Body":"For easier interaction with the review process, copying most of the .NET Runtime issue template for new API.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8923)","Url":"https://github.com/dotnet/winforms/pull/8923","RelatedDescription":"Closed or merged PR \"Bring API proposal template in line with .NET runtime\" (#8923)"},{"Id":"1649805541","IsPullRequest":true,"CreatedAt":"2023-03-31T18:08:31","Actor":"ALiwoto","Number":"8928","RawContent":null,"Title":"Refactor `ControlCollection.AddRange` to use params keyword.","State":"open","Body":"Currently [Control.ControlCollection.AddRange](https://github.com/dotnet/winforms/blob/a37c1817d3f965d9a8bdd3d89fd0b98609715e84/src/System.Windows.Forms/src/System/Windows/Forms/Control.ControlCollection.cs#L153) method is accepting an array of `Control`, this means each time that we want to add multiple controls at once, we have to make a new array. By using `params` keyword using this method will become easier.\r\n\r\n## Proposed changes\r\n- Add `params` keyword to arguments of `ControlCollection.AddRange` method.\r\n\r\n\r\n## Regression? \r\n\r\n-  No\r\n\r\n## Risk\r\n\r\n- None\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8928)","Url":"https://github.com/dotnet/winforms/pull/8928","RelatedDescription":"Open PR \"Refactor `ControlCollection.AddRange` to use params keyword.\" (#8928)"},{"Id":"1649159569","IsPullRequest":true,"CreatedAt":"2023-03-31T17:12:15","Actor":"dkazennov","Number":"8926","RawContent":null,"Title":"Added additional new controls to test ListBox control in WinformsControlsTest.","State":"closed","Body":"Fixes #8904 (some additional control tests)\r\n\r\n\r\n## Proposed changes\r\n\r\n- Additional test controls for the new ListBox test form introduced in #8916\r\n\r\n## Customer Impact\r\n\r\n- This is an internal test. It has no impact on a customer experience.\r\n\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/102961955/229103882-5cd7ec62-b884-4fee-b122-d63bf3e74ce5.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- dotnet 8.0.100-preview.3.23165.5\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8755)\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8916)\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8926)","Url":"https://github.com/dotnet/winforms/pull/8926","RelatedDescription":"Closed or merged PR \"Added additional new controls to test ListBox control in WinformsControlsTest.\" (#8926)"},{"Id":"1647483598","IsPullRequest":true,"CreatedAt":"2023-03-31T17:08:47","Actor":"dotnet-maestro[bot]","Number":"8920","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230329.13\r\n- **Date Produced**: March 30, 2023 4:44:49 AM UTC\r\n- **Commit**: 2d90e251f9f6c4509de6641a6bc39ac7a35cc032\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.CodeDom**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.ComponentModel.Composition**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Data.Odbc**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Data.OleDb**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.DirectoryServices.Protocols**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.IO.Ports**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Management**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Reflection.Context**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Runtime.Caching**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.ServiceModel.Syndication**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Speech**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Text.Encoding.CodePages**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Text.Json**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/9111203d54...2d90e251f9\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8920)","Url":"https://github.com/dotnet/winforms/pull/8920","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8920)"},{"Id":"1648989275","IsPullRequest":true,"CreatedAt":"2023-03-31T16:44:36","Actor":"halgab","Number":"8925","RawContent":null,"Title":"Fix nullability of ArgumentValidation class","State":"closed","Body":"## Proposed changes\r\n\r\nThe null-checking extension methods defined in ArgumentValidation are lacking an annotation stating that the first argument is checked for null. This PR adds it back.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8925)","Url":"https://github.com/dotnet/winforms/pull/8925","RelatedDescription":"Closed or merged PR \"Fix nullability of ArgumentValidation class\" (#8925)"},{"Id":"1648149717","IsPullRequest":true,"CreatedAt":"2023-03-31T06:20:53","Actor":"DJm00n","Number":"8922","RawContent":null,"Title":"Remove use of deprecated LoadCursor/LoadIcon Win32 APIs","State":"closed","Body":"[LoadCursor](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadcursorw)/[LoadIcon](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadiconw) Win32 APIs are superseded by [LoadImage](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadimagew). So just use a new function instead of them inplace. \r\n\r\n## Proposed changes\r\n\r\n- Remove use of legacy LoadCursor/LoadIcon Win32 APIs and use LoadImage instead\r\n\r\n## Customer Impact\r\n\r\n- No impact\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Little\r\n\r\n## Test methodology\r\n\r\n- Run tests\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8922)","Url":"https://github.com/dotnet/winforms/pull/8922","RelatedDescription":"Closed or merged PR \"Remove use of deprecated LoadCursor/LoadIcon Win32 APIs\" (#8922)"},{"Id":"1647483095","IsPullRequest":true,"CreatedAt":"2023-03-30T18:17:53","Actor":"dotnet-maestro[bot]","Number":"8919","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20230327.4\r\n- **Date Produced**: March 28, 2023 12:19:48 AM UTC\r\n- **Commit**: 747f53d751983dd062f39f4654bff074536e0012\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/1177b37e60...747f53d751\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8919)","Url":"https://github.com/dotnet/winforms/pull/8919","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#8919)"},{"Id":"1645796976","IsPullRequest":true,"CreatedAt":"2023-03-30T17:58:34","Actor":"dkazennov","Number":"8916","RawContent":null,"Title":"Added a new test for ListBox Control to the WinformsControlsTest","State":"closed","Body":"Fixes #8904\r\n\r\n\r\n## Proposed changes\r\n\r\n- Added a new separate form for ListBox Control Test to the WinformsControlsTest application.\r\n\r\n## Customer Impact\r\n\r\n- This is an internal test. It has no impact on a customer experience.\r\n\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/102961955/228550011-7c1edebd-5471-49bb-93b9-f133f72908b1.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- dotnet 8.0.100-preview.3.23165.5\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8755)\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8916)","Url":"https://github.com/dotnet/winforms/pull/8916","RelatedDescription":"Closed or merged PR \"Added a new test for ListBox Control to the WinformsControlsTest\" (#8916)"},{"Id":"1647927925","IsPullRequest":true,"CreatedAt":"2023-03-30T16:17:41","Actor":"DJm00n","Number":"8921","RawContent":null,"Title":"InputLanguage: Use RegLoadMUIString instead of SHLoadIndirectString API","State":"open","Body":"I have extracted part of #8573 into separate PR until decision is made on some aspects of that PR.\r\n\r\n## Proposed changes\r\n\r\n- Use `RegLoadMUIString` instead of the `SHLoadIndirectString` API as recommended at https://learn.microsoft.com/windows/win32/intl/locating-redirected-strings#load-a-language-neutral-registry-value\r\n- Move InputLanguage `GetKeyboardLayoutNameForHKL` method implementation to the internal `LayoutId` property (to ease debugging)\r\n- Added proper testing of InputLanguage.LayoutName\r\n- Added InputLanguage_Culture_ThrowsArgumentException and InputLanguage_LayoutName_UnknownExpected tests\r\n- Use `PARAM.ToInt` instead of casts in `GetHashCode` implementation\r\n\r\n## Customer Impact\r\n\r\n- Shouldn't have any visible customer impact\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Little\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\nAuto test:\r\n- InputLanguage_InputLanguageLayoutId_Expected (updated)\r\n- InputLanguage_Culture_ThrowsArgumentException (new)\r\n- InputLanguage_LayoutName_UnknownExpected  (new)\r\n\r\nManually:\r\n- Install \"Canadian Multilingual Standard\"  keyboard layout in Windows.\r\n- Add breakpoint in `InputLanguage_InstalledInputLanguages_Get_ReturnsExpected` test and run it under debugger.\r\n- Check that its `LayoutId` is `00011009` under debugger.\r\n- Check that its `LayoutName` is \"Canadian Multilingual Standard\".\r\n\r\n![image](https://user-images.githubusercontent.com/1285934/228928513-2272ba30-e23d-4de4-a61d-d9d99194ea6d.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1285934/228929329-fd9ab7a4-90a9-4a51-abc7-5d56d14f0144.png)\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8921)","Url":"https://github.com/dotnet/winforms/pull/8921","RelatedDescription":"Open PR \"InputLanguage: Use RegLoadMUIString instead of SHLoadIndirectString API\" (#8921)"},{"Id":"1647412059","IsPullRequest":true,"CreatedAt":"2023-03-30T11:15:47","Actor":"elachlan","Number":"8918","RawContent":null,"Title":"Use the `ApplicationIcon` as the `Form.DefaultIcon`","State":"open","Body":"Test implementation based on discussion.\r\n\r\nRelated: #8905 \n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8918)","Url":"https://github.com/dotnet/winforms/pull/8918","RelatedDescription":"Open PR \"Use the `ApplicationIcon` as the `Form.DefaultIcon`\" (#8918)"},{"Id":"1646296069","IsPullRequest":true,"CreatedAt":"2023-03-29T22:37:20","Actor":"dreddy-work","Number":"8917","RawContent":null,"Title":"Fix caching of DpiAwarenessContext for Mixed mode DPI hosting scenarios.","State":"closed","Body":"The `DpiAwarenessContext `is utilized to establish the desired `DpiAwarenessContext ` for a control from the moment it is initialized and is then applied when creating the control's handle. However, the current implementation of the  `DpiAwarenessContext `property evaluates the DpiContext based on the thread's current DPI awareness context. This may not accurately reflect the DPI awareness context that was initially desired for the control, particularly in scenarios where the application is running with mixed-mode DPI hosting and threads DPI awareness context is altered programmatically throughout the application.\r\n\r\nAdded unit test.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8917)","Url":"https://github.com/dotnet/winforms/pull/8917","RelatedDescription":"Closed or merged PR \"Fix caching of DpiAwarenessContext for Mixed mode DPI hosting scenarios.\" (#8917)"},{"Id":"1645157294","IsPullRequest":true,"CreatedAt":"2023-03-29T17:22:23","Actor":"trivalik","Number":"8913","RawContent":null,"Title":"fix comment typo in RichTextBoxTests.cs","State":"closed","Body":"Fixes #\r\n\r\n## Proposed changes\r\n\r\nfix comment typo in RichTextBoxTests.cs\r\n\r\n## Customer Impact\r\nNone\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- merge conflict\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8913)","Url":"https://github.com/dotnet/winforms/pull/8913","RelatedDescription":"Closed or merged PR \"fix comment typo in RichTextBoxTests.cs\" (#8913)"},{"Id":"1645666264","IsPullRequest":true,"CreatedAt":"2023-03-29T12:34:29","Actor":"dotnet-maestro[bot]","Number":"8915","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230328.18\r\n- **Date Produced**: March 29, 2023 8:16:49 AM UTC\r\n- **Commit**: 9111203d54e91560d1f61720c71c34be76069d06\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.CodeDom**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.ComponentModel.Composition**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Data.Odbc**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Data.OleDb**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.DirectoryServices.Protocols**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.IO.Ports**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Management**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Reflection.Context**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Runtime.Caching**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.ServiceModel.Syndication**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Speech**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Text.Encoding.CodePages**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Text.Json**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/beb708f6fe...9111203d54\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8915)","Url":"https://github.com/dotnet/winforms/pull/8915","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8915)"},{"Id":"1645520404","IsPullRequest":false,"CreatedAt":"2023-03-29T10:38:38","Actor":"ptdev","Number":"8914","RawContent":null,"Title":"Since Windows 11 build 22621.1344 it's no longer possible to middle click on NotifyIcon","State":"open","Body":"### .NET version\n\n.NET7\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nEver since Microsoft released the so called \"Moment 2 Update\" for Windows 11, which is build 22621.1344 (but the issue is still present on the current build 22621.1413), it's no longer possible to distinguish between middle-click and left-click when clicking on a tray icon generated by System.Windows.Forms.NotifyIcon.\r\n\r\nBefore the update, middle clicking would correctly trigger a \"middle click\" event. After the update, middle clicking the tray icon instead triggers a left-click event.\r\n\r\nThis breaks any application that may be using middle click to perform any actions.\r\n\r\nThis is most likely an issue related with Windows and not Winforms as it's also present on other libraries that use tray icons on both WPF and WinUI.\r\n\r\nI was recommended by a Microsoft Twitter account to report this on the feedback hub, which I have done here: https://aka.ms/AAk0sn4\r\n\r\nUnfortunately, there has been no feedback from Microsoft regarding this issue, so I'm posting this here as it affects a native WinForms element (NotifyIcon), so perhaps the developers/maintainers of this project have better ways to reach Microsoft regarding this issue.\n\n### Steps to reproduce\n\n1. Create an empty WinForms app and drag a NotifyIcon to it. \r\n2. Go into the NotifyIcon properties and set a test icon \r\n3. Edit Form1.cs to contain the following code:\r\n\r\n```\r\npublic partial class Form1 : Form\r\n    {\r\n        public Form1()\r\n        {\r\n            InitializeComponent();\r\n            notifyIcon1.MouseClick += Icon_MouseClick;\r\n        }\r\n\r\n        private void Icon_MouseClick(object? sender, MouseEventArgs e)\r\n        {\r\n            Debug.WriteLine(e.Button.ToString());\r\n        }\r\n    }\r\n\r\n```\r\n\r\n4. Use your mouse to left-click, right-click and middle-click the tray icon and watch the Debug window.\r\n5. Note that left and right clicks work as intended. But the middle click triggers the left click instead.\r\n\r\nThis works as intended on windows 10 (tested on a VirtualBox VM) and on any Windows 11 version before the builds mentioned above.\r\n","Url":"https://github.com/dotnet/winforms/issues/8914","RelatedDescription":"Open issue \"Since Windows 11 build 22621.1344 it's no longer possible to middle click on NotifyIcon\" (#8914)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-04-05T03:30:32.6133827Z","RunDurationInMilliseconds":622}