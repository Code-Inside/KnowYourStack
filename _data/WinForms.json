{"Data":{"GitHub":{"Issues":[{"Id":"821580050","IsPullRequest":true,"CreatedAt":"2021-03-03T23:22:01","Actor":"gero3","Number":"4638","RawContent":null,"Title":"Fixes #4558","State":"open","Body":"Fixes #4558 \r\n\r\n## Proposed changes\r\n\r\n- Use the center of a ListViewItem to get the correct item back. The x & y coordinates get recalculated in `ListView.FindNearestItem(SearchDirectionHint, int, int)` anyways.\r\n\r\n## Customer Impact\r\n\r\nNone\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\nThe items returned by FindNearestItem could be wrong in a different way than it is now.\r\n\r\n## Test methodology \r\n\r\n- I've written a unit test.\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4638)","Url":"https://github.com/dotnet/winforms/pull/4638","RelatedDescription":"Open PR \"Fixes #4558\" (#4638)"},{"Id":"821574855","IsPullRequest":true,"CreatedAt":"2021-03-03T23:13:22","Actor":"RussKie","Number":"4637","RawContent":null,"Title":"DGV throws `IndexOutOfRangeException` whenever its datasource is disposed (servicing)","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #4216\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add Dispose event handlers to clear DataSource of DGV and BindingSource of BindingNavigator thereby update their data source actual state\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- A user won't catch the exception when closing a form or disposing a BindingSource\r\n\r\n## Regression? \r\n\r\n- Yes and no. .NET Framework 4.8 throws an exception when closing a form. v.4.7 doesn't throw the exception in this case. But anyway every version throws the exception if to Dispose a BindingSource component\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n- A DataGridView doesn't update its Rows and Columns collections after its DataSource is disposed. And the DGV throws the exception when trying to redraw because the DGV is trying to draw items from a DataSource that doesn't already exist (send some index, eg. 4, to the collection that has 0 items, and catch IndexOutOfRangeException)\r\n![vR6xyN1oe6](https://user-images.githubusercontent.com/49272759/107550604-49cec280-6be2-11eb-848d-d137900e1a07.gif)\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n- `DataGridView` and `BindingNavigator` subscribed on the `BindingSource.Disposed` event and release their `DataSource` and `BindingSource` to update internal collections\r\n![mtA3PmfUl4](https://user-images.githubusercontent.com/49272759/107550667-5d7a2900-6be2-11eb-8299-757cc49e73af.gif)\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit testing\r\n- Manual UI testing\r\n- CTI\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET 6.0.100-preview.1.21101.5\r\n- Microsoft Windows [Version 10.0.19042.804]\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4637)","Url":"https://github.com/dotnet/winforms/pull/4637","RelatedDescription":"Open PR \"DGV throws `IndexOutOfRangeException` whenever its datasource is disposed (servicing)\" (#4637)"},{"Id":"821109320","IsPullRequest":true,"CreatedAt":"2021-03-03T14:03:06","Actor":"dotnet-maestro[bot]","Number":"4634","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210302.4\r\n- **Date Produced**: 3/2/2021 6:44 PM\r\n- **Commit**: 8111534793c51921eaf5628ce250f932f6cbec2d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.3.21152.1 to 6.0.0-preview.3.21152.4][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/2215b42...8111534\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4634)","Url":"https://github.com/dotnet/winforms/pull/4634","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4634)"},{"Id":"821108732","IsPullRequest":true,"CreatedAt":"2021-03-03T13:57:16","Actor":"dotnet-maestro[bot]","Number":"4633","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20210302.1\r\n- **Date Produced**: 3/2/2021 5:04 PM\r\n- **Commit**: f95dc73e2028d630d67b782c9dcccbe464cf9677\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21125.5 to 6.0.0-beta.21152.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21125.5 to 6.0.0-beta.21152.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.21125.5 to 6.0.0-beta.21152.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.21125.5 to 6.0.0-beta.21152.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21125.5 to 6.0.0-beta.21152.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/15246f4...f95dc73\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates sdk.version to 6.0.100-preview.1.21103.13\r\n  - Updates tools.dotnet to 6.0.100-preview.1.21103.13\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4633)","Url":"https://github.com/dotnet/winforms/pull/4633","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#4633)"},{"Id":"820869629","IsPullRequest":true,"CreatedAt":"2021-03-03T08:19:03","Actor":"SergeySmirnov-Akvelon","Number":"4632","RawContent":null,"Title":"Enable NRT for FileDialog.Vista","State":"open","Body":"## Proposed changes\r\n- Enabled NRT for FileDialog.Vista\r\n## Customer Impact\r\n- No \r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19041.388]\r\n- .NET Core SDK 6.0.0-alpha.1.21073.5\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4632)","Url":"https://github.com/dotnet/winforms/pull/4632","RelatedDescription":"Open PR \"Enable NRT for FileDialog.Vista\" (#4632)"},{"Id":"820811749","IsPullRequest":false,"CreatedAt":"2021-03-03T06:58:05","Actor":"KlausLoeffelmann","Number":"4631","RawContent":null,"Title":"Introduce InvokeAsync on Control","State":"open","Body":"# Rationale\r\n\r\nWith the arrival of the WebView2 control, which introduces APIs for WinForms which can only be called asynchronously and therefore need to be awaited, and also with the option from .NET 5 on to project UWP/WinUI APIs - many of which can also only be called asynchronously - there is also a new requirement to await methods, which can only be executed from the UI Thread.\r\n\r\nThe [`EnsureCoreWebView2Async` method](https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.winforms.webview2.ensurecorewebview2async?view=webview2-dotnet-1.0.705.50) of the `WebView2` control has this requirement for example. It can only be called from the UI thread. When the current thread is not the UI thread, then there is no easy way to call this method, because async methods are not compatible with the current `Invoke` method's signature to delegate calls to the UI thread.\r\n\r\nOther scenarios are, when asynchronous methods like `NavigateTo` are signaling their completion by raising an event, and those methods - which also needs to be called of on the UI Thread - should be awaited e.g. via a `TaskCompletionSource`.\r\n\r\n# Proposed API\r\n\r\nAdd a method to Control with the following signatures:\r\n\r\n```cs\r\npublic Task InvokeAsync(\r\n    Func<Task> invokeDelegate,\r\n    TimeSpan timeOutSpan = default,\r\n    CancellationToken cancellationToken = default,\r\n    params object[] args) \r\n```\r\n\r\nto invoke awaiting a method on the UI thread which doesn't return any results (so its return type is - because it's awaitable - of type `Task`), and...\r\n\r\n```cs\r\npublic async Task<T> InvokeAsync<T>(\r\n    Func<Task<T>> invokeDelegate,\r\n    TimeSpan timeOutSpan = default,\r\n    CancellationToken cancellationToken = default,\r\n    params object[] args)\r\n```\r\n\r\nto return a result value.\r\n\r\n## Real World Sample\r\n\r\nConsider in a typical WinForms LOB App DataBinding-Scenario, we have a couple of Extender methods for a business logic to aggregate reports (Revenue numbers), which extends `BindingList`:\r\n\r\n```cs\r\n// Sync version:\r\nbindingList.AddCustomerReportItem(customerId)\r\n\r\n// Async version:\r\nbindingList.AddCustomerReportItemAsync(customerId)\r\n```\r\n\r\nBoth methods need to be called on the UI Thread, since both are updating the UI via Binding. However, aggregating the result to generate a Report Item does take a while, since a lot of data has to be taken into account.\r\n\r\nThe typical Code-behind WinForms solution would look like this:\r\n\r\n```cs\r\n            // Simulate getting the Data from a Report engine,\r\n            // and displaying them in the Grid via Binding.\r\n            var bindingList = new BindingList<CustomerReportItem>();\r\n            customerReportItemBindingSource.DataSource = bindingList;\r\n\r\n            // We use the ReportEngine...\r\n            var reportEngine = new ReportEngine();\r\n\r\n            // ...register to be called back, when it's finished, and \r\n            // update the UI inside it's EventHandler.\r\n            reportEngine.ReportCompilationCompleted += (sender, eventArgs) =>\r\n              {\r\n                  foreach (var customerId in eventArgs.CustomerIds)\r\n                  {\r\n                      bindingList.AddCustomerReportItem(customerId);\r\n                  }\r\n              };\r\n\r\n            // We're kicking of the Report compilation\r\n            // and waiting for the result event to arrive.\r\n            reportEngine.CompileReport();\r\n```\r\n\r\nThe problem here: The code crashes with a Cross-Thread exception, because we're trying to add to a BindingSource, which causes the UI to get updated, but we're doing this in the EventHandler of ReportCompilationCompleted, and that's not raised on the UI Thread.\r\n\r\n*Note:* This is not a stilted scenario. There are other events in real live scenarios, where this happens. `WebView2.NavigateTo`, `Timer Ticks`, `EndInvokes` in WinForm-Components which often raise events, Notification Events from UWP, etc.\r\n\r\nSo, what we can do in our case, is just marshal that call to the UI thread. But that does not help a lot, since the Task we're running on is utilizing the UI thread to full capacity. The App becomes unresponsive:\r\n\r\n![AsyncInvokeDemo1](https://user-images.githubusercontent.com/9663150/109870485-01be2100-7c1f-11eb-95ba-54c9ce4c23b7.gif)\r\n\r\nSo, instead we could now use the Async version of `AddCustomerReportItem` in the EventHandler, like this:\r\n\r\n```cs\r\n    // ...register to be called back, when it's finished, and \r\n    // update the UI inside it's EventHandler.\r\n    reportEngine.ReportCompilationCompleted += async (sender, eventArgs) =>\r\n    {\r\n        foreach (var customerId in eventArgs.CustomerIds)\r\n        {\r\n            // OK, so this time: Let's Invoke that to marshal it\r\n            // to the UI thread. But...\r\n            await bindingList.AddCustomerReportItemAsync(customerId);\r\n        }\r\n    };\r\n```\r\n\r\nBut again, if we do it, we're hitting the Cross-Thread Exception.\r\nAnd this is the Problem now:\r\n\r\nWe should be able to do the Invoke now just with the WinForms standard tools.\r\nThe call would look like this:\r\n\r\n```cs\r\n    // ...register to be called back, when it's finished, and \r\n    // update the UI inside it's EventHandler.\r\n    reportEngine.ReportCompilationCompleted += async (sender, eventArgs) =>\r\n    {\r\n        foreach (var customerId in eventArgs.CustomerIds)\r\n        {\r\n            // OK, so this time: Let's Invoke that to marshal it\r\n            // to the UI thread. But...\r\n            await asyncControl.InvokeAsync(() => bindingList.AddCustomerReportItemAsync(customerId));\r\n        }\r\n    };\r\n```\r\n\r\nAnd the result would look like this:\r\n![AsyncInvokeDemo2](https://user-images.githubusercontent.com/9663150/109872020-b6a50d80-7c20-11eb-8633-4b0d56213fb3.gif)\r\n","Url":"https://github.com/dotnet/winforms/issues/4631","RelatedDescription":"Open issue \"Introduce InvokeAsync on Control\" (#4631)"},{"Id":"816890726","IsPullRequest":true,"CreatedAt":"2021-03-02T23:37:43","Actor":"RussKie","Number":"4610","RawContent":null,"Title":"fix PropertyGrid value rendering","State":"closed","Body":"\r\nFixes #4593\r\n\r\n\r\n## Proposed changes\r\n\r\nThe fix introduced in #4525 has redirected the `PropertyGrid` value rendering through a different code path which only relies on flags passed into `DrawTextInternal` completely side-stepping any modifications applied to the `Graphics` object. However the `PropertyGrid` value rendering routines do modify the `Graphics` object (applying clipping and transformations) but do not pass the necessary flags to `DrawTextInternal`.\r\n\r\nFix by applying the necessary flags to preserve the `Graphics` modifications, and add debug-time asserts to check that necessary flags are applies, if the underlying `Graphics` object is modified.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- `PropertyGrid` control is currently completely unusable without any workarounds.\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Minimal, scoped to `PropertyGrid` control only\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/45864649/108816650-81316c00-75f1-11eb-8acf-606c391b87d7.png)\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/45864649/108818177-faca5980-75f3-11eb-86c2-e69ca43bd755.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- added unit tests\r\n- debug added asserts to catch situations where `Graphics` object is modified, but no relevant `TextFormatFlags` supplied.\r\n- manual testing\r\n\r\nI was unable to add a rendering test for `PropertyGrid` itself as our EMF parsing implementation is incomplete. \r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4610)","Url":"https://github.com/dotnet/winforms/pull/4610","RelatedDescription":"Closed or merged PR \"fix PropertyGrid value rendering\" (#4610)"},{"Id":"820009000","IsPullRequest":true,"CreatedAt":"2021-03-02T13:36:25","Actor":"dotnet-maestro[bot]","Number":"4630","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210302.1\r\n- **Date Produced**: 3/2/2021 11:38 AM\r\n- **Commit**: 2215b42f58d35ec8d06976037c58d21e5cf3e9d0\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.3.21151.2 to 6.0.0-preview.3.21152.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/3553284...2215b42\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4630)","Url":"https://github.com/dotnet/winforms/pull/4630","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4630)"},{"Id":"819827908","IsPullRequest":false,"CreatedAt":"2021-03-02T09:30:17","Actor":"Amy-Li03","Number":"4629","RawContent":null,"Title":"An exception was throwing when switching the dates of MonthCalendar control on .NET 6.0 windows arm64 SDK","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET SDK 6.0.100-preview.3.21123.4\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**More info:**\r\n1. This issue **cannot** reproduce on .NET 6.0 Windows x64 SDK build\r\n2. This issue can reproduce from .NET 6.0 Preview 1 to Preview 3 windows arm64 SDK latest build\r\n2. This issue cannot reproduce on DateTimePicker control\r\n\r\n**Minimal repro:**\r\n[TestApp.zip](https://github.com/dotnet/winforms/files/6067569/TestApp.zip)\r\n\r\n1. Install .NET 6.0 windows arm64 SDK latest build from: https://github.com/dotnet/installer on ARM 64-bit OS machine\r\n2. Create a Winforms Core application with a MonthCalendar control\r\n3. Build and run this project, then switch dates of MonthCalendar\r\n\r\n**Actual behavior:**\r\nAn exception was throwing when switching dates of MonthCalendar.\r\n![Core](https://user-images.githubusercontent.com/62929087/109626225-3e384100-7b7b-11eb-9d68-6e7dcf26a6f5.gif)\r\n\r\n**Expected behavior:**\r\nThe dates switched successfully.\r\n\r\n**Call Stack:**\r\n************** Exception Text **************\r\nSystem.ArgumentOutOfRangeException: Hour, Minute, and Second parameters describe an un-representable DateTime.\r\n   at System.Windows.Forms.DateTimePicker.SysTimeToDateTime(SYSTEMTIME s)\r\n   at System.Windows.Forms.MonthCalendar.GetMonthRange(GMR flag)\r\n   at System.Windows.Forms.MonthCalendar.BoldDates(DateBoldEventArgs e)\r\n   at System.Windows.Forms.MonthCalendar.WmDateBold(Message& m)\r\n   at System.Windows.Forms.MonthCalendar.WmReflectCommand(Message& m)\r\n   at System.Windows.Forms.MonthCalendar.WndProc(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)","Url":"https://github.com/dotnet/winforms/issues/4629","RelatedDescription":"Open issue \"An exception was throwing when switching the dates of MonthCalendar control on .NET 6.0 windows arm64 SDK\" (#4629)"},{"Id":"818754292","IsPullRequest":false,"CreatedAt":"2021-03-01T23:58:03","Actor":"shakir-timur","Number":"4624","RawContent":null,"Title":"Several ComboBox controls with one DataSource object affect each other on change","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: 3.1\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?:  Yes\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nBinding several ComboBoxes to one object causes somewhat unobvious side effects: when selecting value of one causes others to change theirs too and fire events like SelectedIndexChanged on every other ComboBoxes.\r\nThis can probably affect other elements too, not just ComboBoxes.\r\n\r\nSuch behavior doesn't seem to be documented and, imo, should be fixed.\r\n\r\nAlso some other people's encounters:\r\nhttps://stackoverflow.com/questions/4344366/multiple-combo-boxes-with-the-same-data-source-c/\r\nhttps://stackoverflow.com/questions/33108993/multiple-combobox-with-single-datasource/\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\nAll ComboBoxes act independently of each other.\r\n\r\n**Minimal repro:**\r\nPut two ComboBoxes and two Labels on a form. Change codebehind to something like this:\r\n\r\n        public Form1()\r\n        {\r\n            InitializeComponent();\r\n\r\n            var array = new List<string>() { \"one\", \"two\" };\r\n            comboBox1.DataSource = array;\r\n            comboBox2.DataSource = array;\r\n        }\r\n\r\n        int counter = 0;\r\n\r\n        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)\r\n        {\r\n            counter++;\r\n            label1.Text = counter.ToString();\r\n        }\r\n\r\n        private void comboBox2_SelectedIndexChanged(object sender, EventArgs e)\r\n        {\r\n            counter++;\r\n            label2.Text = counter.ToString();\r\n        }","Url":"https://github.com/dotnet/winforms/issues/4624","RelatedDescription":"Closed issue \"Several ComboBox controls with one DataSource object affect each other on change\" (#4624)"},{"Id":"816495515","IsPullRequest":true,"CreatedAt":"2021-03-01T23:55:25","Actor":"SergeySmirnov-Akvelon","Number":"4606","RawContent":null,"Title":"Moved sub-classes of \"FileDialog\", \"OpenFileDialog\" and \"SaveFileDialog\" classes to their own files","State":"closed","Body":"## Proposed changes\r\n- Moved sub-classes of \"FileDialog\", \"OpenFileDialog\" and \"SaveFileDialog\" classes to their own files \r\n## Customer Impact\r\n- No \r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19041.388]\r\n- .NET Core SDK 6.0.0-alpha.1.21073.5\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4606)","Url":"https://github.com/dotnet/winforms/pull/4606","RelatedDescription":"Closed or merged PR \"Moved sub-classes of \"FileDialog\", \"OpenFileDialog\" and \"SaveFileDialog\" classes to their own files\" (#4606)"},{"Id":"818856773","IsPullRequest":true,"CreatedAt":"2021-03-01T23:44:43","Actor":"dotnet-maestro[bot]","Number":"4625","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210301.2\r\n- **Date Produced**: 3/1/2021 10:48 AM\r\n- **Commit**: 3553284bea7b650874c8dcc3f78d6be085a047bb\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.3.21127.9 to 6.0.0-preview.3.21151.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/308ae6a...3553284\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4625)","Url":"https://github.com/dotnet/winforms/pull/4625","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4625)"},{"Id":"819228694","IsPullRequest":true,"CreatedAt":"2021-03-01T20:28:02","Actor":"1R053","Number":"4626","RawContent":null,"Title":"bugfix for #4370","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n#4370\r\n\r\n## Proposed changes\r\n\r\nThe issue fixes some code that was probably erroneously copied & pasted when porting from .NET framework here:\r\nhttps://referencesource.microsoft.com/#System.Windows.Forms/winforms/Managed/System/WinForms/Control.cs,17065\r\n\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- quite critical, as in certain situation .NET Core is totally unusable due to this. E.g. when using Core inside Office Add-Ins, it was not possible at all to use the task pane for building addins. This is a showstopper for our go-live.\r\n\r\n## Regression? \r\n\r\n- None introduced, hopefully\r\n\r\n## Risk\r\n\r\n- unknown\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- run build and test\r\n- sorry, this project is quite tangential for me, and it is an obvious fix, once you confirmed this successfully for the main branch, it would be awesome to backport to 5.x, let me know if I should create a PR as well for that.\r\n\r\n## Accessibility testing  \r\n\r\n## Test environment(s) \n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4626)","Url":"https://github.com/dotnet/winforms/pull/4626","RelatedDescription":"Open PR \"bugfix for #4370\" (#4626)"},{"Id":"818613714","IsPullRequest":false,"CreatedAt":"2021-03-01T08:28:30","Actor":"bairog","Number":"4623","RawContent":null,"Title":"DataGridView DataSource cannot be assigned to BindingSource, WinForms DataBinding Wizard is also not working","State":"open","Body":"* .NET Core Version: \r\n.NET 5.0.103 and .NET 6.0.100-preview.1.21103.13 (Visual Studio 2019 16.8.5 and Visual Studio 2019 16.9.0 preview 5.0)\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nI have a BindingSource where DataSource is set to “typeof(MyClassLibraryNamespace.MyClassName)” in MyForm.Designer.cs to allow me AutoCreation of DataGridView columns in design time.\r\n\r\nBUT, when I want to assign that BindingSource to DataGridView.DataSource, I can’t. The property doesn’t change.\r\n\r\nWinForms DataBinding Wizard is also not working on .NET 5 and .NET 6-preview1, so I have no way to link a list of custom objects to my DataGridView in design time.\r\n\r\nCreating DataGridView columns manually for each property of DataSource type is a not a solution when there are complex properties.\r\n\r\nSo, porting WinForms code from .NET Framework 4.8 to .NET 5 or .NET 6-preview1 is not practical at all when using DataBinding to a list of custom objects.\r\n\r\n\r\n**Expected behavior (.NET Framework 4.8):**\r\n\r\n![](https://i.imgur.com/S3Xf4vg.gif)\r\n\r\n**Current behavior (.NET 5 or .NET 6-preview1):**\r\n\r\n![](https://i.imgur.com/P9fz2eV.gif)\r\n\r\n**Minimal repo:**\r\nhttps://github.com/bairog/DataGridView.DataSource-.NET5","Url":"https://github.com/dotnet/winforms/issues/4623","RelatedDescription":"Open issue \"DataGridView DataSource cannot be assigned to BindingSource, WinForms DataBinding Wizard is also not working\" (#4623)"},{"Id":"816458941","IsPullRequest":true,"CreatedAt":"2021-03-01T02:07:26","Actor":"SergeySmirnov-Akvelon","Number":"4605","RawContent":null,"Title":"Move sub-classes of \"ColumnHeader\" and \"ErrorProvider\" classes to their own files","State":"closed","Body":"## Proposed changes\r\n- Moved sub-classes of \"ColumnHeader\" and \"ErrorProvider\"  classes to their own files\r\n## Customer Impact\r\n- No \r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19041.388]\r\n- .NET Core SDK 6.0.0-alpha.1.21073.5\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4605)","Url":"https://github.com/dotnet/winforms/pull/4605","RelatedDescription":"Closed or merged PR \"Move sub-classes of \"ColumnHeader\" and \"ErrorProvider\" classes to their own files\" (#4605)"},{"Id":"817133274","IsPullRequest":true,"CreatedAt":"2021-03-01T01:55:05","Actor":"SergeySmirnov-Akvelon","Number":"4612","RawContent":null,"Title":"Move sub-classes of \"NotifyIcon\", \"ToolStripDropDownItem\", \"ToolStripSplitButton\" and \"ToolStripStatusLabel\" classes to their own files","State":"closed","Body":"## Proposed changes\r\n- Moved sub-classes of \"NotifyIcon\", \"ToolStripDropDownItem\", \"ToolStripSplitButton\" and \"ToolStripStatusLabel\" classes to their own files\r\n## Customer Impact\r\n- No \r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19041.388]\r\n- .NET Core SDK 6.0.0-alpha.1.21073.5\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4612)","Url":"https://github.com/dotnet/winforms/pull/4612","RelatedDescription":"Closed or merged PR \"Move sub-classes of \"NotifyIcon\", \"ToolStripDropDownItem\", \"ToolStripSplitButton\" and \"ToolStripStatusLabel\" classes to their own files\" (#4612)"},{"Id":"817201853","IsPullRequest":true,"CreatedAt":"2021-03-01T01:47:01","Actor":"SergeySmirnov-Akvelon","Number":"4613","RawContent":null,"Title":"Move sub-classes of \"ToolStripDropDownButton\", \"ToolStripLabel\" and \"ToolStripPanelRow\" classes to their own files","State":"closed","Body":"## Proposed changes\r\n- Moved sub-classes of \"ToolStripDropDownButton\", \"ToolStripLabel\" and \"ToolStripPanelRow\" classes to their own files\r\n## Customer Impact\r\n- No \r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19041.388]\r\n- .NET Core SDK 6.0.0-alpha.1.21073.5\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4613)","Url":"https://github.com/dotnet/winforms/pull/4613","RelatedDescription":"Closed or merged PR \"Move sub-classes of \"ToolStripDropDownButton\", \"ToolStripLabel\" and \"ToolStripPanelRow\" classes to their own files\" (#4613)"},{"Id":"817247089","IsPullRequest":true,"CreatedAt":"2021-03-01T01:42:16","Actor":"SergeySmirnov-Akvelon","Number":"4614","RawContent":null,"Title":"Move sub-classes of \"ToolStripComboBox\" and \"ToolStripProgressBar\" classes to their own files","State":"closed","Body":"## Proposed changes\r\n- Moved sub-classes of \"ToolStripComboBox\" and \"ToolStripProgressBar\" classes to their own files\r\n## Customer Impact\r\n- No \r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19041.388]\r\n- .NET Core SDK 6.0.0-alpha.1.21073.5\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4614)","Url":"https://github.com/dotnet/winforms/pull/4614","RelatedDescription":"Closed or merged PR \"Move sub-classes of \"ToolStripComboBox\" and \"ToolStripProgressBar\" classes to their own files\" (#4614)"},{"Id":"817330360","IsPullRequest":true,"CreatedAt":"2021-03-01T01:41:24","Actor":"SergeySmirnov-Akvelon","Number":"4615","RawContent":null,"Title":"Move sub-classes of \"DataGridViewCellLinkedList\", \"DataGridViewColumnCollection\", \"DataGridViewIntLinkedList\" and \"ImageCollection\" classes to their own files","State":"closed","Body":"## Proposed changes\r\n- Moved sub-classes of \"DataGridViewCellLinkedList\", \"DataGridViewColumnCollection\", \"DataGridViewIntLinkedList\" and \"ImageCollection\" classes to their own files\r\n## Customer Impact\r\n- No \r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19041.388]\r\n- .NET Core SDK 6.0.0-alpha.1.21073.5\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4615)","Url":"https://github.com/dotnet/winforms/pull/4615","RelatedDescription":"Closed or merged PR \"Move sub-classes of \"DataGridViewCellLinkedList\", \"DataGridViewColumnCollection\", \"DataGridViewIntLinkedList\" and \"ImageCollection\" classes to their own files\" (#4615)"},{"Id":"817370641","IsPullRequest":true,"CreatedAt":"2021-03-01T01:39:59","Actor":"SergeySmirnov-Akvelon","Number":"4617","RawContent":null,"Title":"Move sub-classes of \"DataGridViewRowCollection\", \"ListBox.IntegerCollection\" and \"ListBox.SelectedIndexCollection\" classes to their own files","State":"closed","Body":"## Proposed changes\r\n- Moved sub-classes of \"DataGridViewRowCollection\", \"ListBox.IntegerCollection\" and \"ListBox.SelectedIndexCollection\" classes to their own files\r\n## Customer Impact\r\n- No \r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19041.388]\r\n- .NET Core SDK 6.0.0-alpha.1.21073.5\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4617)","Url":"https://github.com/dotnet/winforms/pull/4617","RelatedDescription":"Closed or merged PR \"Move sub-classes of \"DataGridViewRowCollection\", \"ListBox.IntegerCollection\" and \"ListBox.SelectedIndexCollection\" classes to their own files\" (#4617)"},{"Id":"817394155","IsPullRequest":true,"CreatedAt":"2021-03-01T01:39:24","Actor":"SergeySmirnov-Akvelon","Number":"4618","RawContent":null,"Title":"Move sub-classes of \"DataFormats\", \"DataGridViewComboBoxCell\", \"DataGridViewHeaderCell\" and \"CategoryGridEntry\" classes to their own files","State":"closed","Body":"## Proposed changes\r\n- Moved sub-classes of \"DataFormats\", \"DataGridViewComboBoxCell\", \"DataGridViewHeaderCell\" and \"CategoryGridEntry\" classes to their own files \r\n## Customer Impact\r\n- No \r\n\r\n## Regression? \r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19041.388]\r\n- .NET Core SDK 6.0.0-alpha.1.21073.5\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4618)","Url":"https://github.com/dotnet/winforms/pull/4618","RelatedDescription":"Closed or merged PR \"Move sub-classes of \"DataFormats\", \"DataGridViewComboBoxCell\", \"DataGridViewHeaderCell\" and \"CategoryGridEntry\" classes to their own files\" (#4618)"},{"Id":"816826731","IsPullRequest":false,"CreatedAt":"2021-03-01T01:33:26","Actor":"gcaughey","Number":"4609","RawContent":null,"Title":"Some file is missing from single-file self-contained publish beginning in .NET 5.0.3","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: 5.0.3\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n\r\nApplication fails to launch with this message: Launch exception: The system cannot find the file specified. (0x80070002)\r\nThis only happens with a a single-file self-contained app published to a folder on a PC that doesn't have .NET 5 runtime installed. \r\nIf the app is published self-contained but not single-file, the app runs as expected.\r\n\r\nThis appears to only happen in a winforms app. I have not seen this behavior in WPF apps.\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:** It should run when published single-file self-contained as it did with previous versions of .NET 5, which did not have this issue,\r\n\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/4609","RelatedDescription":"Closed issue \"Some file is missing from single-file self-contained publish beginning in .NET 5.0.3\" (#4609)"},{"Id":"818142088","IsPullRequest":true,"CreatedAt":"2021-03-01T01:31:33","Actor":"gpetrou","Number":"4620","RawContent":null,"Title":"Enable nullability in GridItem and GridItemCollection","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in GridItem and GridItemCollection.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4620)","Url":"https://github.com/dotnet/winforms/pull/4620","RelatedDescription":"Closed or merged PR \"Enable nullability in GridItem and GridItemCollection\" (#4620)"},{"Id":"818203948","IsPullRequest":true,"CreatedAt":"2021-02-28T13:30:39","Actor":"dotnet-maestro[bot]","Number":"4622","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210227.9\r\n- **Date Produced**: 2/28/2021 7:38 AM\r\n- **Commit**: 308ae6ad833089199b8afbf30a7b402f35190fc8\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.3.21126.16 to 6.0.0-preview.3.21127.9][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/e093fe0...308ae6a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4622)","Url":"https://github.com/dotnet/winforms/pull/4622","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4622)"},{"Id":"818158428","IsPullRequest":false,"CreatedAt":"2021-02-28T09:01:45","Actor":"kirsan31","Number":"4621","RawContent":null,"Title":"maximized MDI child not response to icon changes","State":"open","Body":"* .NET Core Version: **All**\r\n\r\n* Have you experienced this same bug with .NET Framework?: **Yes**\r\n\r\n**Problem description:**\r\nIcon on maximized child form not react on Hide/Show and Icon (picture) changing - see below:\r\n\r\nhttps://user-images.githubusercontent.com/17767561/109413054-97a64180-79bc-11eb-8a92-c2c0e81cea12.mp4\r\n\r\n**Expected behavior:**\r\nIcon on maximized child form properly react on Hide/Show and Icon changing.\r\n\r\n**Minimal repro:**\r\n[WinFormsCoreTest_MDI_Icon.zip](https://github.com/dotnet/winforms/files/6056464/WinFormsCoreTest_MDI_Icon.zip)","Url":"https://github.com/dotnet/winforms/issues/4621","RelatedDescription":"Open issue \"maximized MDI child not response to icon changes\" (#4621)"},{"Id":"817919659","IsPullRequest":true,"CreatedAt":"2021-02-27T13:41:20","Actor":"dotnet-maestro[bot]","Number":"4619","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210226.16\r\n- **Date Produced**: 2/27/2021 8:30 AM\r\n- **Commit**: e093fe0fa650d17ec34e944f2a4a9bd2f2700109\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.3.21125.3 to 6.0.0-preview.3.21126.16][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/12ec219...e093fe0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4619)","Url":"https://github.com/dotnet/winforms/pull/4619","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4619)"},{"Id":"817355997","IsPullRequest":true,"CreatedAt":"2021-02-26T13:52:08","Actor":"dotnet-maestro[bot]","Number":"4616","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20210225.5\r\n- **Date Produced**: 2/25/2021 6:16 PM\r\n- **Commit**: 15246f4af00a1cb2e580783d32ec2937b1878a64\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21105.12 to 6.0.0-beta.21125.5][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21105.12 to 6.0.0-beta.21125.5][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.21105.12 to 6.0.0-beta.21125.5][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.21105.12 to 6.0.0-beta.21125.5][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21105.12 to 6.0.0-beta.21125.5][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/938b3e8...15246f4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4616)","Url":"https://github.com/dotnet/winforms/pull/4616","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#4616)"},{"Id":"816893147","IsPullRequest":true,"CreatedAt":"2021-02-25T23:30:25","Actor":"RussKie","Number":"4611","RawContent":null,"Title":"fix PropertyGrid value rendering (servicing 5.0)","State":"open","Body":"Fixes #4593\r\n\r\n\r\n## Proposed changes\r\n\r\nThe fix introduced in #4525 has redirected the `PropertyGrid` value rendering through a different code path which only relies on flags passed into `DrawTextInternal` completely side-stepping any modifications applied to the `Graphics` object. However the `PropertyGrid` value rendering routines do modify the `Graphics` object (applying clipping and transformations) but do not pass the necessary flags to `DrawTextInternal`.\r\n\r\nFix by applying the necessary flags to preserve the `Graphics` modifications, and add debug-time asserts to check that necessary flags are applies, if the underlying `Graphics` object is modified.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- `PropertyGrid` control is currently completely unusable without any workarounds.\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Minimal, scoped to `PropertyGrid` control only\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/45864649/108816650-81316c00-75f1-11eb-8acf-606c391b87d7.png)\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/45864649/108818177-faca5980-75f3-11eb-86c2-e69ca43bd755.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- added unit tests\r\n- debug added asserts to catch situations where `Graphics` object is modified, but no relevant `TextFormatFlags` supplied.\r\n- manual testing\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4611)","Url":"https://github.com/dotnet/winforms/pull/4611","RelatedDescription":"Open PR \"fix PropertyGrid value rendering (servicing 5.0)\" (#4611)"},{"Id":"816825086","IsPullRequest":false,"CreatedAt":"2021-02-25T21:27:59","Actor":"RussKie","Number":"4608","RawContent":null,"Title":"Simplify `Invoke` and `BeginInvoke` signature and accept `Action`","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n## Proposed API:\r\n\r\nAdd an overload that takes `Action` as a parameter for both [`Invoke(Action method)`](https://docs.microsoft.com/dotnet/api/system.windows.forms.control.invoke) and [`BeginInvoke(Action method)`](https://docs.microsoft.com/dotnet/api/system.windows.forms.control.begininvoke). \r\nI don't think it is necessary to create overloads for methods that take `params object[] args` as it is possible to pass necessary parameters via a closure.\r\n\r\n```diff\r\n+        public IAsyncResult BeginInvoke(Action method)\r\n         public IAsyncResult BeginInvoke(Delegate method)\r\n         public IAsyncResult BeginInvoke(Delegate method, params object[] args)\r\n\r\n+        public T Invoke<T>(Func<T> method)\r\n+        public void Invoke(Action method)\r\n         public object Invoke(Delegate method)\r\n         public object Invoke(Delegate method, params object[] args)\r\n```\r\n\r\n## Background\r\n\r\nThere are two golden rules for Windows Forms:\r\n\r\n1. Always interact with UI controls on the same thread as they are created. Interacting with controls from another thread requires [`InvokeRequired`](https://docs.microsoft.com/dotnet/api/system.windows.forms.control.invokerequired), [`Invoke`](https://docs.microsoft.com/dotnet/api/system.windows.forms.control.invoke), [`BeginInvoke`](https://docs.microsoft.com/dotnet/api/system.windows.forms.control.begininvoke), etc.\r\n2. Never execute a long-running piece of code in the UI thread.\r\n\r\n[`Invoke`](https://docs.microsoft.com/dotnet/api/system.windows.forms.control.invoke) and [`BeginInvoke`](https://docs.microsoft.com/dotnet/api/system.windows.forms.control.begininvoke) take `Delegate` as their input parameters, which requires rather cumbersome boilerplate code, and frankly look dated by todays standard.\r\n\r\nE.g.\r\n```cs\r\nprivate void UpdateUI() \r\n{\r\n    if (myControl.InvokeRequired) \r\n    {\r\n        myControl.Invoke(new MethodInvoker(() => { UpdateUI(); })); // <-- this is very cumbersome\r\n    } \r\n    else\r\n    {\r\n        // we're on UI thread, update myControl\r\n    }\r\n}\r\n``` \r\n\r\n⚠️  **NB:** The discussion of [automatically switching to the UI thread](https://medium.com/criteo-engineering/switching-back-to-the-ui-thread-in-wpf-uwp-in-modern-c-5dc1cc8efa5e) is well outside the scope of this proposal. It will come separately.\r\n\r\nThe cumbersome bit is this:\r\n```cs\r\nmyControl.Invoke(new MethodInvoker(() => UpdateUI()));\r\nfloat area = 0;\r\nlistView1.Invoke(new Action(() => { area = CalculateArea(); }));\r\n```\r\nwhich can also be written as \r\n```cs\r\nmyControl.Invoke((MethodInvoker)(() => { UpdateUI(); }));\r\nmyControl.Invoke((Action)(() => { UpdateUI(); }));\r\n```\r\nHowever it can not be written as this:\r\n```cs\r\nmyControl.Invoke(() => UpdateUI());\r\n// or \r\nmyControl.Invoke(UpdateUI); // slightly inefficient - the delegate is not cached, https://github.com/dotnet/roslyn/issues/5835\r\n```\r\n~despite the fact [`Action`](https://docs.microsoft.com/dotnet/api/system.action) is of a delegate type, just like [`MethodInvoker`](https://docs.microsoft.com/dotnet/api/system.windows.forms.methodinvoker)~ Thank you @weltkante for pointing it out.\r\n\r\n\r\n```cs\r\nfloat area = (float)listView1.Invoke(new Func<float>(() => CalculateArea()));\r\n```\r\nBut now it will be possible to write something like this:\r\n```cs\r\nfloat area1 = listView1.Invoke(() => CalculateArea(width, length));\r\n//\r\nfloat area2 = listView1.Invoke(CalculateArea);\r\n```\r\n\r\n\r\n## Perf considerations\r\n\r\nThe added benefit of the new API is that we will be creating smaller code footprint:\r\n\r\n```cs\r\n        private void InvokeDelegateFunc(object sender, EventArgs e)\r\n        {\r\n            // current\r\n            float area = (float)listView1.Invoke(new Func<float>(() => CalculateArea()));\r\n        }\r\n\r\n        private void InvokeFunc(object sender, EventArgs e)\r\n        {\r\n            // proposed\r\n            float area2 = listView1.Invoke(CalculateArea);\r\n        }\r\n```\r\n\r\n<details>\r\n<summary>InvokeDelegateFunc</summary>\r\n\r\n\r\n\r\n```il\r\n.method private hidebysig \r\n\tinstance void InvokeDelegateFunc (\r\n\t\tobject sender,\r\n\t\tclass [System.Runtime]System.EventArgs e\r\n\t) cil managed \r\n{\r\n\t// Method begins at RVA 0x7104\r\n\t// Code size 31 (0x1f)\r\n\t.maxstack 3\r\n\t.locals init (\r\n\t\t[0] float32 area\r\n\t)\r\n\r\n\t// sequence point: (line 193, col 9) to (line 193, col 10) in C:\\Development\\winforms\\src\\System.Windows.Forms\\tests\\IntegrationTests\\WinformsControlsTest\\ListViewTest.cs\r\n\tIL_0000: nop\r\n\t// sequence point: (line 194, col 13) to (line 194, col 102) in C:\\Development\\winforms\\src\\System.Windows.Forms\\tests\\IntegrationTests\\WinformsControlsTest\\ListViewTest.cs\r\n\tIL_0001: ldarg.0\r\n\tIL_0002: ldfld class [System.Windows.Forms]System.Windows.Forms.ListView WinformsControlsTest.ListViewTest::listView1\r\n\tIL_0007: ldarg.0\r\n\tIL_0008: ldftn instance float32 WinformsControlsTest.ListViewTest::'<InvokeDelegateFunc>b__5_0'()\r\n\tIL_000e: newobj instance void class [System.Runtime]System.Func`1<float32>::.ctor(object, native int)\r\n\tIL_0013: callvirt instance object [System.Windows.Forms]System.Windows.Forms.Control::Invoke(class [System.Runtime]System.Delegate)\r\n\tIL_0018: unbox.any [System.Runtime]System.Single\r\n\tIL_001d: stloc.0\r\n\t// sequence point: (line 195, col 9) to (line 195, col 10) in C:\\Development\\winforms\\src\\System.Windows.Forms\\tests\\IntegrationTests\\WinformsControlsTest\\ListViewTest.cs\r\n\tIL_001e: ret\r\n} // end of method ListViewTest::InvokeDelegateFunc\r\n\r\n.method private hidebysig \r\n\tinstance float32 '<InvokeDelegateFunc>b__5_0' () cil managed \r\n{\r\n\t.custom instance void [System.Runtime]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (\r\n\t\t01 00 00 00\r\n\t)\r\n\t// Method begins at RVA 0x7a7c\r\n\t// Code size 7 (0x7)\r\n\t.maxstack 8\r\n\r\n\t// sequence point: (line 194, col 83) to (line 194, col 98) in C:\\Development\\winforms\\src\\System.Windows.Forms\\tests\\IntegrationTests\\WinformsControlsTest\\ListViewTest.cs\r\n\tIL_0000: ldarg.0\r\n\tIL_0001: call instance float32 WinformsControlsTest.ListViewTest::CalculateArea()\r\n\tIL_0006: ret\r\n} // end of method ListViewTest::'<InvokeDelegateFunc>b__5_0'\r\n\r\n```\r\n\r\n</details>\r\n\r\nvs \r\n\r\n<details>\r\n<summary>InvokeFunc</summary>\r\n\r\n```\r\n.method private hidebysig \r\n\tinstance void InvokeFunc (\r\n\t\tobject sender,\r\n\t\tclass [System.Runtime]System.EventArgs e\r\n\t) cil managed \r\n{\r\n\t// Method begins at RVA 0x7130\r\n\t// Code size 26 (0x1a)\r\n\t.maxstack 3\r\n\t.locals init (\r\n\t\t[0] float32 area2\r\n\t)\r\n\r\n\t// sequence point: (line 198, col 9) to (line 198, col 10) in C:\\Development\\winforms\\src\\System.Windows.Forms\\tests\\IntegrationTests\\WinformsControlsTest\\ListViewTest.cs\r\n\tIL_0000: nop\r\n\t// sequence point: (line 199, col 13) to (line 199, col 59) in C:\\Development\\winforms\\src\\System.Windows.Forms\\tests\\IntegrationTests\\WinformsControlsTest\\ListViewTest.cs\r\n\tIL_0001: ldarg.0\r\n\tIL_0002: ldfld class [System.Windows.Forms]System.Windows.Forms.ListView WinformsControlsTest.ListViewTest::listView1\r\n\tIL_0007: ldarg.0\r\n\tIL_0008: ldftn instance float32 WinformsControlsTest.ListViewTest::CalculateArea()\r\n\tIL_000e: newobj instance void class [System.Runtime]System.Func`1<float32>::.ctor(object, native int)\r\n\tIL_0013: callvirt instance !!0 [System.Windows.Forms]System.Windows.Forms.Control::Invoke<float32>(class [System.Runtime]System.Func`1<!!0>)\r\n\tIL_0018: stloc.0\r\n\t// sequence point: (line 200, col 9) to (line 200, col 10) in C:\\Development\\winforms\\src\\System.Windows.Forms\\tests\\IntegrationTests\\WinformsControlsTest\\ListViewTest.cs\r\n\tIL_0019: ret\r\n} // end of method ListViewTest::InvokeFunc\r\n\r\n```\r\n\r\n</details>\r\n\r\n## Other considerations\r\n\r\nI have checked emitted IL, and it appears to be of the same size, with the only difference use of `Action` instead of `MethodInvoker`.\r\n\r\n@KlausLoeffelmann has highlighted to me that the issue appears to be C# specific, as VB understand the following right now:\r\n```vb\r\n        Friend Sub Test()\r\n            Dim control As New Button()\r\n            control.BeginInvoke(Sub()\r\n                                    MessageBox.Show(\"Test!\")\r\n                                End Sub)\r\n        End Sub\r\n```\r\nI have verified the proposal does not appear to have any negative impacts on VB.\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/4608","RelatedDescription":"Open issue \"Simplify `Invoke` and `BeginInvoke` signature and accept `Action`\" (#4608)"},{"Id":"816576333","IsPullRequest":false,"CreatedAt":"2021-02-25T16:06:46","Actor":"techfan101","Number":"4607","RawContent":null,"Title":"Inconsistent behavior getting/setting scroll bar visibility for ScrollableControl / UserControl","State":"open","Body":"**Environment**\r\n\r\n.NET Core Version: 5.0\r\n\r\n**Problem description:**\r\n\r\nWhile I was implementing a custom [UserControl](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.usercontrol), I noticed some very strange behavior regarding the visibility of the scroll bars.  Upon further investigation, this behavior seems to point to a bug in its parent class:  [ScrollableControl](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol).\r\n\r\nIn a class derived from [ScrollableControl](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol), there appear to be three different documented means of getting or setting the visibility of the scroll bars:\r\n\r\n1. Via the [HorizontalScroll](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.horizontalscroll) or [VerticalScroll](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.verticalscroll) properties, using their [Visible](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollproperties.visible) field.\r\n2. Via the [HScroll](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.hscroll) or [VScroll](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.vscroll) properties.\r\n3. Via the [GetScrollState](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.getscrollstate)/[SetScrollState](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.setscrollstate) methods, using the [ScrollStateHScrollVisible](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.scrollstatehscrollvisible)/[ScrollStateVScrollVisible](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.scrollstatevscrollvisible) bits.\r\n\r\nSetting the visibility using method 1 ([HorizontalScroll](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.horizontalscroll)/[VerticalScroll](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.verticalscroll)) successfully changes the visibility of the scroll bars.  However, the results returned by methods 2 ([HScroll](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.hscroll)/[VScroll](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.vscroll)) and 3 ([GetScrollState](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.getscrollstate)) do not reflect the changed value.\r\n\r\nSetting the visibility using methods 2 ([HScroll](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.hscroll)/[VScroll](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.vscroll)) and 3 ([SetScrollState](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.setscrollstate))  does not normally (more on this later) affect the visibility of the scroll bars.  Also, the results returned by method 1 ([HorizontalScroll](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.horizontalscroll)/[VerticalScroll](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.verticalscroll)) do not reflect the changed value.\r\n\r\nI'll class the following under the truly weird category, to the point I highly doubted my own results.  Starting with both scroll bars already visible, setting either the horizontal **OR** vertical visibility to true (using methods 2 or 3), will cause **BOTH** scroll bars to vanish.  Even stranger, after they have vanished, the visibility returned by method 1 will indicate that they are both still visible.  This result was so unexpected, that I spent a lot of time confirming the behavior.\r\n\r\n**Expected behavior:**\r\n\r\nAssuming [AutoScroll](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.scrollablecontrol.autoscroll) is set to false, after changing the visibility using any of these three methods, one would reasonably expect two things to occur:\r\n\r\n1. The visibility of the control would actually change.\r\n2. Subsequently, getting that same visibility using any of the three methods would return the same result.\r\n\r\nRegrettably, as described earlier, neither of these two assertions is true.\r\n\r\n**Minimal repro:**\r\n\r\nHere, I've focused solely on the disconnect between the set values and the expected get values.  Below is a derived class, with three test methods:\r\n\r\n1. `HorizontalVerticalScrollTest` - This demonstrates failed assertions resulting from setting visibility via method 1.\r\n2. `HVScrollTest` - This demonstrates failed assertions resulting from setting visibility via method 2.\r\n3. `ScrollStateHVScrollVisibleTest` - This demonstrates failed assertions resulting from setting visibility via method 3.\r\n\r\nThe GUI aspects of visibility are not reproduced here, though this is easily accomplished by hosting this derived control in a form.\r\n\r\n```\r\nusing System;\r\nusing System.Windows.Forms;\r\n\r\nnamespace ScrollableControlBug\r\n{\r\n\tpublic class DerivedControl : ScrollableControl\r\n\t{\r\n\t\t// In this method, the following assertions fail (see AssertAfterState)\r\n\t\t//   After: HScroll\r\n\t\t//   After: VScroll\r\n\t\t//   After: ScrollStateHScrollVisible\r\n\t\t//   After: ScrollStateVScrollVisible\r\n\t\tpublic void HorizontalVerticalScrollTest()\r\n\t\t{\r\n\t\t\tAssertBeforeState();\r\n\r\n\t\t\tHorizontalScroll.Visible = true;\r\n\t\t\tVerticalScroll.Visible = true;\r\n\r\n\t\t\tAssertAfterState();\r\n\t\t}\r\n\r\n\t\t// In this method, the following assertions fail (see AssertAfterState)\r\n\t\t//   After: HorizontalScroll.Visible\r\n\t\t//   After: VerticalScroll.Visible\r\n\t\tpublic void HVScrollTest()\r\n\t\t{\r\n\t\t\tAssertBeforeState();\r\n\r\n\t\t\tHScroll = true;\r\n\t\t\tVScroll = true;\r\n\r\n\t\t\tAssertAfterState();\r\n\t\t}\r\n\r\n\t\t// In this method, the following assertions fail (see AssertAfterState)\r\n\t\t//   After: HorizontalScroll.Visible\r\n\t\t//   After: VerticalScroll.Visible\r\n\t\tpublic void ScrollStateHVScrollVisibleTest()\r\n\t\t{\r\n\t\t\tAssertBeforeState();\r\n\r\n\t\t\tSetScrollState(ScrollStateHScrollVisible, true);\r\n\t\t\tSetScrollState(ScrollStateVScrollVisible, true);\r\n\r\n\t\t\tAssertAfterState();\r\n\t\t}\r\n\r\n\t\tprivate void AssertBeforeState()\r\n\t\t{\r\n\t\t\tAssert.IsFalse(AutoScroll, \"Before: AutoScroll\");\r\n\t\t\tAssert.IsFalse(HorizontalScroll.Visible, \"Before: HorizontalScroll.Visible\");\r\n\t\t\tAssert.IsFalse(VerticalScroll.Visible, \"Before: VerticalScroll.Visible\");\r\n\t\t\tAssert.IsFalse(HScroll, \"Before: HScroll\");\r\n\t\t\tAssert.IsFalse(VScroll, \"Before: VScroll\");\r\n\t\t\tAssert.IsFalse(GetScrollState(ScrollStateHScrollVisible), \"Before: ScrollStateHScrollVisible\");\r\n\t\t\tAssert.IsFalse(GetScrollState(ScrollStateVScrollVisible), \"Before: ScrollStateVScrollVisible\");\r\n\t\t}\r\n\r\n\t\tprivate void AssertAfterState()\r\n\t\t{\r\n\t\t\tAssert.IsFalse(AutoScroll, \"After: AutoScroll\");\r\n\t\t\tAssert.IsTrue(HorizontalScroll.Visible, \"After: HorizontalScroll.Visible\");\r\n\t\t\tAssert.IsTrue(VerticalScroll.Visible, \"After: VerticalScroll.Visible\");\r\n\t\t\tAssert.IsTrue(HScroll, \"After: HScroll\");\r\n\t\t\tAssert.IsTrue(VScroll, \"After: VScroll\");\r\n\t\t\tAssert.IsTrue(GetScrollState(ScrollStateHScrollVisible), \"After: ScrollStateHScrollVisible\");\r\n\t\t\tAssert.IsTrue(GetScrollState(ScrollStateVScrollVisible), \"After: ScrollStateVScrollVisible\");\r\n\t\t}\r\n\r\n\t\tprivate static class Assert\r\n\t\t{\r\n\t\t\tpublic static void IsFalse(bool value, string message)\r\n\t\t\t{\r\n\t\t\t\tif (value)\r\n\t\t\t\t\tthrow new Exception(message);\r\n\t\t\t}\r\n\r\n\t\t\tpublic static void IsTrue(bool value, string message)\r\n\t\t\t{\r\n\t\t\t\tif (!value)\r\n\t\t\t\t\tthrow new Exception(message);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/4607","RelatedDescription":"Open issue \"Inconsistent behavior getting/setting scroll bar visibility for ScrollableControl / UserControl\" (#4607)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-03-04T05:30:37.7962784Z","RunDurationInMilliseconds":619}