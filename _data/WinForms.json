{"Data":{"GitHub":{"Issues":[{"Id":"1659092028","IsPullRequest":true,"CreatedAt":"2023-04-07T18:51:00","Actor":"sharwell","Number":"8958","RawContent":null,"Title":"Support Xunit.Combinatorial in test code","State":"open","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8958)","Url":"https://github.com/dotnet/winforms/pull/8958","RelatedDescription":"Open PR \"Support Xunit.Combinatorial in test code\" (#8958)"},{"Id":"1658868534","IsPullRequest":true,"CreatedAt":"2023-04-07T18:47:25","Actor":"sharwell","Number":"8953","RawContent":null,"Title":"Draw the cursor on screenshots","State":"closed","Body":"I was really surprised that all the resources on this topic online use `Graphics.CopyFromScreen`, but seem to complicate the cursor drawing.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8953)","Url":"https://github.com/dotnet/winforms/pull/8953","RelatedDescription":"Closed or merged PR \"Draw the cursor on screenshots\" (#8953)"},{"Id":"1657821627","IsPullRequest":true,"CreatedAt":"2023-04-07T18:43:43","Actor":"sharwell","Number":"8949","RawContent":null,"Title":"Verify key state at the start of each test","State":"closed","Body":"This is an attempt to assert that a previous test has not left a keyboard or mouse key in a pressed state going into the test.","Url":"https://github.com/dotnet/winforms/pull/8949","RelatedDescription":"Closed or merged PR \"Verify key state at the start of each test\" (#8949)"},{"Id":"1659073900","IsPullRequest":true,"CreatedAt":"2023-04-07T18:31:32","Actor":"JeremyKuhne","Number":"8957","RawContent":null,"Title":"Resolve more pending test issues in System.Drawing","State":"open","Body":"Removes suppressions that were for non-Windows platforms and adds tolerance support for ARM related floating point variance.\r\n\r\n- Update ValidateBitmapContent helper to hash the raw image byte data instead of the entire serialized image to allow for variance of non-essential image data.\r\n- Refactor comparison code into new `ComparisonHelpers` support class.\r\n- Introduce a `FloatingPointToleranceComparer` to allow comparing float arrays with tolerance (to allow for ARM floating point differences in tests).\r\n- Also add some float `AssertExtensions` for `RectangleF`.\r\n- Adds a check to validate that we successfully got the screen HDC in Graphics.CopyFromScreen.\r\n- Adds `ReadOnlyTheoryData` to ensure that common test data doesn't get modified and reworks test data attributes to be simpler and utilize a new raw `TestData` helper class.\r\n- Rename `NumberData` to `IntegerData`.\r\n- Add a GlobalUsings to TestUtilities test project.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8957)","Url":"https://github.com/dotnet/winforms/pull/8957","RelatedDescription":"Open PR \"Resolve more pending test issues in System.Drawing\" (#8957)"},{"Id":"1659019873","IsPullRequest":true,"CreatedAt":"2023-04-07T17:17:52","Actor":"sharwell","Number":"8956","RawContent":null,"Title":"Make sure to invoke GetCursorPos after moving mouse","State":"open","Body":"For some reason, I found out a long time ago that sometimes a call to `MoveMouseTo` wouldn't actually move the mouse until a call to `GetCursorPos` occurred. I don't remember the context for this realization anymore, but I included a link to the earliest known instance of this pattern.\r\n\r\nI _believe_ the observation occurred because tests were being flaky. After I added the call to `GetCursorPos` to assert that the cursor was moving to the correct location, the tests always passed. Removing the assertion caused them to be flaky again.\r\n\r\nThis pull request also rewrites `DragMouseBy` to invoke `DragMouseTo` instead. Based on the `SendInput` documentation, [relative mouse movements are affected by the OS settings for mouse speed and acceleration](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mouse_event#remarks), which is not desirable for tests.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8956)","Url":"https://github.com/dotnet/winforms/pull/8956","RelatedDescription":"Open PR \"Make sure to invoke GetCursorPos after moving mouse\" (#8956)"},{"Id":"1659018361","IsPullRequest":true,"CreatedAt":"2023-04-07T17:15:43","Actor":"ssflynn77","Number":"8955","RawContent":null,"Title":"Issue/8295 - Added additional unit tests to System.Resources.ResXResourceReader","State":"open","Body":"Fixes #8295 \r\n\r\n## Proposed changes\r\n- Added additional unit tests for System.Resources.ResXResourceReader \r\n  - Constructors\r\n  - GetEnumerator()\r\n  - GetMetaDataEnumerator\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n- None\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Low\r\n- PR only has unit tests\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8955)","Url":"https://github.com/dotnet/winforms/pull/8955","RelatedDescription":"Open PR \"Issue/8295 - Added additional unit tests to System.Resources.ResXResourceReader\" (#8955)"},{"Id":"1658718765","IsPullRequest":false,"CreatedAt":"2023-04-07T11:45:51","Actor":"AhmadKelany","Number":"8952","RawContent":null,"Title":"Saving after changing anything on some forms causes VS to hang.","State":"open","Body":"### Environment\n\nMicrosoft Visual Studio Community 2022\r\nVersion 17.5.3\r\nVisualStudio.17.Release/17.5.3+33516.290\r\nMicrosoft .NET Framework\r\nVersion 4.8.04161\r\n\r\nInstalled Version: Community\r\n\r\nVisual C++ 2022   00482-90000-00000-AA004\r\nMicrosoft Visual C++ 2022\r\n\r\nASP.NET and Web Tools   17.5.318.41597\r\nASP.NET and Web Tools\r\n\r\nAzure App Service Tools v3.0.0   17.5.318.41597\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Functions and Web Jobs Tools   17.5.318.41597\r\nAzure Functions and Web Jobs Tools\r\n\r\nC# Tools   4.5.0-6.23128.14+651d32d8017cfcc60fcbd67383601fa9a3deb145\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.4.3 (main@2a4517a)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMono Debugging for Visual Studio   17.5.9 (11975e6)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   6.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/\r\n\r\nRazor (ASP.NET Core)   17.5.2.2316603+9f1b6856460af1e592d387ebef416eadddac453f\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nSQL Server Data Tools   17.2.40119.0\r\nMicrosoft SQL Server Data Tools\r\n\r\nTest Adapter for Boost.Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Boost.Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTest Adapter for Google Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Google Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTypeScript Tools   17.0.20105.2003\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   4.5.0-6.23128.14+651d32d8017cfcc60fcbd67383601fa9a3deb145\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools   17.5.0-beta.23053.5+794b7c259d9646a7eb685dad865aa27da7940a21\r\nMicrosoft Visual F# Tools\r\n\r\nVisual Studio IntelliCode   2.2\r\nAI-assisted development for Visual Studio.\r\n\r\nVisualStudio.DeviceLog   1.0\r\nInformation about my package\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nVSPackage Extension   1.0\r\nVSPackage Visual Studio Extension Detailed Info\r\n\r\nXamarin   17.5.0.173 (d17-5@33e727c)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   17.5.3.46 (remotes/origin/d17-5@e4dd80b2bb)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   17.5.41 (ba80d05)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   13.2.0.0 (d17-5/797e2e1)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: 6dd9def\r\n    Java.Interop: xamarin/java.interop/main@149d70fe\r\n    SQLite: xamarin/sqlite/3.40.0@fdc1e34\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/main@9f02d77\r\n\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   16.2.0.5 (7738c90c9)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\n\n### .NET version\n\n<TargetFramework>net7.0-windows10.0.19041.0</TargetFramework>\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nYes, the last one I am sure it worked with is 17.4. with same .Net release.\n\n### Issue description\n\n![Animation](https://user-images.githubusercontent.com/12924528/230602332-9980e00c-c630-41f2-b8ef-670847105211.gif)\r\n\r\nIn **some** forms, changing anything either by designer or by the properties window, then trying to save causes Visual Studio to hang.\n\n### Steps to reproduce\n\nThe issue is not present in all forms, only some and I couldn't isolate the criteria based on which this is happening.\r\n\r\n---------------------------------------------------\r\n\r\nIn new project: the issue doesn't exist.\r\nMy project was originally a .Net framework project that I ported to .Net 5 several years ago, and moved to .Net 7 when it came.\r\nThe issue appears in some old forms, new forms created do not have this issue.\r\nHowever, copying some controls from a form that suffers from the issue to a new form even in a new project causes the problem to appear there also.\r\n\r\nHere is the .Designer.cs code from a form that has the issue:\r\n\r\n```\r\nnamespace UltimatePharmaForms;\r\n\r\npartial class frmAdjustTax\r\n{\r\n\r\n    /// <summary>\r\n    /// Clean up any resources being used.\r\n    /// </summary>\r\n    /// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>\r\n    protected override void Dispose(bool disposing)\r\n    {\r\n        try\r\n        {\r\n            if (disposing && components != null)\r\n            {\r\n                components.Dispose();\r\n            }\r\n        }\r\n        finally\r\n        {\r\n            base.Dispose(disposing);\r\n        }\r\n    }\r\n    private System.ComponentModel.IContainer components = null;\r\n\r\n\r\n    /// <summary>\r\n    /// Required method for Designer support - do not modify\r\n    /// the contents of this method with the code editor.\r\n    /// </summary>\r\n    private void InitializeComponent()\r\n    {\r\n        Label1 = new Label();\r\n        Label2 = new Label();\r\n        btnSave = new Button();\r\n        btnSave.Click += btnSave_Click;\r\n        txtFrom = new TextBox();\r\n        txtTo = new TextBox();\r\n        SuspendLayout();\r\n        // \r\n        // Label1\r\n        // \r\n        Label1.AutoSize = true;\r\n        Label1.Location = new Point(461, 16);\r\n        Label1.Margin = new Padding(4, 0, 4, 0);\r\n        Label1.Name = \"Label1\";\r\n        Label1.RightToLeft = RightToLeft.Yes;\r\n        Label1.Size = new Size(199, 34);\r\n        Label1.TabIndex = 0;\r\n        Label1.Text = \"تعديل ضريبة الأصناف من:\";\r\n        // \r\n        // Label2\r\n        // \r\n        Label2.AutoSize = true;\r\n        Label2.Location = new Point(115, 16);\r\n        Label2.Margin = new Padding(4, 0, 4, 0);\r\n        Label2.Name = \"Label2\";\r\n        Label2.RightToLeft = RightToLeft.Yes;\r\n        Label2.Size = new Size(42, 34);\r\n        Label2.TabIndex = 1;\r\n        Label2.Text = \"إلى:\";\r\n        // \r\n        // Button1\r\n        // \r\n        btnSave.Location = new Point(12, 63);\r\n        btnSave.Name = \"btnSave\";\r\n        btnSave.Size = new Size(608, 40);\r\n        btnSave.TabIndex = 2;\r\n        btnSave.Text = \"تعديل\";\r\n        btnSave.UseVisualStyleBackColor = true;\r\n        // \r\n        // txtFrom\r\n        // \r\n        txtFrom.Location = new Point(305, 12);\r\n        txtFrom.Name = \"txtFrom\";\r\n        txtFrom.Size = new Size(100, 42);\r\n        txtFrom.TabIndex = 3;\r\n        // \r\n        // txtTo\r\n        // \r\n        txtTo.Location = new Point(12, 12);\r\n        txtTo.Name = \"txtTo\";\r\n        txtTo.Size = new Size(100, 42);\r\n        txtTo.TabIndex = 4;\r\n        // \r\n        // frmAdjustTax\r\n        // \r\n        AutoScaleMode = AutoScaleMode.None;\r\n        ClientSize = new Size(630, 113);\r\n        Controls.Add(txtTo);\r\n        Controls.Add(txtFrom);\r\n        Controls.Add(btnSave);\r\n        Controls.Add(Label2);\r\n        Controls.Add(Label1);\r\n        Font = new Font(\"Noto Naskh Arabic\", 12F, FontStyle.Regular, GraphicsUnit.Point);\r\n        Name = \"frmAdjustTax\";\r\n        Text = \"تعديل الضريبة على الأصناف\";\r\n        Load += frmAdjustTax_Load;\r\n        ResumeLayout(false);\r\n        PerformLayout();\r\n    }\r\n\r\n    private Label Label1;\r\n    private Label Label2;\r\n    private Button btnSave;\r\n    private TextBox txtFrom;\r\n    private TextBox txtTo;\r\n}\r\n```\r\n\r\n\n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8952","RelatedDescription":"Open issue \"Saving after changing anything on some forms causes VS to hang.\" (#8952)"},{"Id":"1658699561","IsPullRequest":false,"CreatedAt":"2023-04-07T11:20:48","Actor":"AhmadKelany","Number":"8951","RawContent":null,"Title":"Selecting Data UI Customization option under the Windows Forms Designer option causes VS to stop responding.","State":"open","Body":"### Environment\n\nMicrosoft Visual Studio Community 2022\r\nVersion 17.5.3\r\nVisualStudio.17.Release/17.5.3+33516.290\r\nMicrosoft .NET Framework\r\nVersion 4.8.04161\r\n\r\nInstalled Version: Community\r\n\r\nVisual C++ 2022   00482-90000-00000-AA004\r\nMicrosoft Visual C++ 2022\r\n\r\nASP.NET and Web Tools   17.5.318.41597\r\nASP.NET and Web Tools\r\n\r\nAzure App Service Tools v3.0.0   17.5.318.41597\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Functions and Web Jobs Tools   17.5.318.41597\r\nAzure Functions and Web Jobs Tools\r\n\r\nC# Tools   4.5.0-6.23128.14+651d32d8017cfcc60fcbd67383601fa9a3deb145\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.4.3 (main@2a4517a)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMono Debugging for Visual Studio   17.5.9 (11975e6)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   6.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/\r\n\r\nRazor (ASP.NET Core)   17.5.2.2316603+9f1b6856460af1e592d387ebef416eadddac453f\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nSQL Server Data Tools   17.2.40119.0\r\nMicrosoft SQL Server Data Tools\r\n\r\nTest Adapter for Boost.Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Boost.Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTest Adapter for Google Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Google Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTypeScript Tools   17.0.20105.2003\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   4.5.0-6.23128.14+651d32d8017cfcc60fcbd67383601fa9a3deb145\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools   17.5.0-beta.23053.5+794b7c259d9646a7eb685dad865aa27da7940a21\r\nMicrosoft Visual F# Tools\r\n\r\nVisual Studio IntelliCode   2.2\r\nAI-assisted development for Visual Studio.\r\n\r\nVisualStudio.DeviceLog   1.0\r\nInformation about my package\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nVSPackage Extension   1.0\r\nVSPackage Visual Studio Extension Detailed Info\r\n\r\nXamarin   17.5.0.173 (d17-5@33e727c)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   17.5.3.46 (remotes/origin/d17-5@e4dd80b2bb)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   17.5.41 (ba80d05)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   13.2.0.0 (d17-5/797e2e1)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: 6dd9def\r\n    Java.Interop: xamarin/java.interop/main@149d70fe\r\n    SQLite: xamarin/sqlite/3.40.0@fdc1e34\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/main@9f02d77\r\n\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   16.2.0.5 (7738c90c9)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n\r\n\n\n### .NET version\n\n<TargetFramework>net7.0-windows10.0.19041.0</TargetFramework>\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nNot sure.\n\n### Issue description\n\nSelecteing Data UI Customization option causes Visual Studio to stop responding.\n\n### Steps to reproduce\n\nOpen Visual Studio Tools -> Options\r\nExpand Windows Forms Designer\r\n\r\n![image](https://user-images.githubusercontent.com/12924528/230600161-927c7ed7-2883-4b78-8f38-76755dc0fcda.png)\r\n\r\nAs soon as clicking on the Data UI Customization option, visual studio stops responding indefinitely, I have to use Task Manager to kill its process.\n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8951","RelatedDescription":"Open issue \"Selecting Data UI Customization option under the Windows Forms Designer option causes VS to stop responding.\" (#8951)"},{"Id":"1659012083","IsPullRequest":false,"CreatedAt":"2023-04-07T10:54:49","Actor":"wstaelens","Number":"8954","RawContent":null,"Title":"System.Drawing.Drawing2D.GraphicsPathIterator.CopyData spanify","State":"open","Body":"When converting graphicsPaths I'm iterating over a lot of subpaths.\r\n\r\n```\r\nfor (int i = ...\r\n{\r\n// ...\r\n                   var subPathPoints = new GDIP.PointF[cnt];\r\n                    var subPathTypes = new byte[cnt];\r\n                    pathIterator.CopyData(ref subPathPoints, ref subPathTypes, startIndexSubPath, endIndexSubPath);\r\n } \r\n``` \r\n\r\nI'd like rent the subPathPoints and subPathTypes from an ArrayPool. Because the arraypool would give me larger arrays, I should need to use Spans and slice them to the actual size.\r\n\r\nCan a `CopyData` overload using Spans be added?","Url":"https://github.com/dotnet/winforms/issues/8954","RelatedDescription":"Open issue \"System.Drawing.Drawing2D.GraphicsPathIterator.CopyData spanify\" (#8954)"},{"Id":"1657637754","IsPullRequest":true,"CreatedAt":"2023-04-06T23:06:58","Actor":"dotnet-maestro[bot]","Number":"8945","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230406.2\r\n- **Date Produced**: April 6, 2023 1:39:41 PM UTC\r\n- **Commit**: 2c8cb129ed084e374f06eaa29f21e9ab0b9e8066\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.CodeDom**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.ComponentModel.Composition**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Data.Odbc**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Data.OleDb**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.DirectoryServices.Protocols**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.IO.Ports**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Management**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Reflection.Context**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Runtime.Caching**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.ServiceModel.Syndication**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Speech**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Text.Encoding.CodePages**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Text.Json**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.4.23179.13 to 8.0.0-preview.4.23206.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/2d90e251f9...2c8cb129ed\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8945)","Url":"https://github.com/dotnet/winforms/pull/8945","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8945)"},{"Id":"1657515512","IsPullRequest":true,"CreatedAt":"2023-04-06T21:03:44","Actor":"dotnet-maestro[bot]","Number":"8944","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20230405.4\r\n- **Date Produced**: April 5, 2023 9:59:43 PM UTC\r\n- **Commit**: 290a3ecc0e3dabcdcafff632ccbf28d42db8061b\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.23177.4 to 8.0.0-beta.23205.4][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.23177.4 to 8.0.0-beta.23205.4][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.23177.4 to 8.0.0-beta.23205.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.23177.4 to 8.0.0-beta.23205.4][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.23177.4 to 8.0.0-beta.23205.4][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.23177.4 to 8.0.0-beta.23205.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/747f53d751...290a3ecc0e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8944)","Url":"https://github.com/dotnet/winforms/pull/8944","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#8944)"},{"Id":"1657894975","IsPullRequest":true,"CreatedAt":"2023-04-06T20:30:01","Actor":"sharwell","Number":"8950","RawContent":null,"Title":"Update tests to use DragMouseBy and DragMouseTo","State":"closed","Body":"* Wait for WM_MOUSEMOVE processing before sending more messages.\r\n* Match WM_LBUTTONDOWN with WM_LBUTTONUP\r\n\r\nCloses #6609\r\nCloses #6714\r\nCloses #7297\r\nCloses #7407\r\nCloses #8635\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8950)","Url":"https://github.com/dotnet/winforms/pull/8950","RelatedDescription":"Closed or merged PR \"Update tests to use DragMouseBy and DragMouseTo\" (#8950)"},{"Id":"1657780155","IsPullRequest":true,"CreatedAt":"2023-04-06T20:29:42","Actor":"sharwell","Number":"8948","RawContent":null,"Title":"Remove inclusion of non-existent folder","State":"closed","Body":"###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8948)","Url":"https://github.com/dotnet/winforms/pull/8948","RelatedDescription":"Closed or merged PR \"Remove inclusion of non-existent folder\" (#8948)"},{"Id":"1657779395","IsPullRequest":true,"CreatedAt":"2023-04-06T17:12:35","Actor":"sharwell","Number":"8947","RawContent":null,"Title":"Trick the build into enabling IDE1006 but still allowing per-rule severity configuration","State":"open","Body":"The configuration for this repository currently contains several naming rules. The severity is configured for each of these naming rules:\r\n\r\nhttps://github.com/dotnet/winforms/blob/ca8cc15b2bceea5f873ca330e9b2a87397919b4b/.editorconfig#L33\r\nhttps://github.com/dotnet/winforms/blob/ca8cc15b2bceea5f873ca330e9b2a87397919b4b/.editorconfig#L43\r\nhttps://github.com/dotnet/winforms/blob/ca8cc15b2bceea5f873ca330e9b2a87397919b4b/.editorconfig#L54\r\n\r\nIf the build contains a line that sets IDE1006 to warning, it will override _all_ of the above values, and it will not be possible to configure one or more rules as suggestions while others are enforced. Rather than set IDE1006 to warning for all files in the solution, this pull request sets IDE1006 to warning for _exactly one_ file in each project, which is an empty file that contains no violations of IDE1006. This line is sufficient for the compiler to know to enable IDE1006 (it won't run the analyzer at all unless it knows that it may produce a warning), after which point the per-rule configurations listed above control the actual diagnostics emitted in code.\r\n\r\nAfter this change, it will be possible to change any one of the above lines from `suggestion` to `warning` in order to start enforcing that rule. It would also be possible to add other naming rules if desired, and selectively enforce those rules on build.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8947)","Url":"https://github.com/dotnet/winforms/pull/8947","RelatedDescription":"Open PR \"Trick the build into enabling IDE1006 but still allowing per-rule severity configuration\" (#8947)"},{"Id":"1657653002","IsPullRequest":false,"CreatedAt":"2023-04-06T15:37:11","Actor":"TheLeftExit","Number":"8946","RawContent":null,"Title":"PerMonitorV2 - Opening a dialog whose owner is on a secondary screen results in broken scaling in .NET 7+","State":"open","Body":"### .NET version\n\n.NET 7.0\r\n.NET 8.0 Preview 2\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, it worked in .NET 6 and earlier.\n\n### Issue description\n\nIf a form is opened as a dialog, and the dialog's owner is located on a monitor whose DPI scaling factor doesn't match the primary monitor, the dialog will either be scaled incorrectly on initial scaling, or start scaling incorrectly after it has been moved to a different screen. The issue only occurs in .NET 7 and later. Changing [`ShowInTaskbar`](https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.form.showintaskbar)/[`StartPosition`](https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.form.startposition) of the dialog seems to produce different (but still incorrect) behavior.\r\n\r\nI attached a project that can be used to reproduce the issue, plus 4 videos that demonstrate various side effects. These different effects occur after following *the same replication steps* in different monitor/form configurations. The videos demonstrate correct behavior in .NET 6, and its deterioration as the project is upgraded to .NET 7 and .NET 8 Preview 2.\r\n\r\n[WinFormsApp19.zip](https://github.com/dotnet/winforms/files/11172134/WinFormsApp19.zip)\r\n<details>\r\n<summary>Main100_DefaultProperties</summary>\r\n\r\nhttps://user-images.githubusercontent.com/47351802/230427392-03372cc2-2cef-4585-a5ae-e3eef2cdb452.mp4\r\n</details>\r\n<details>\r\n<summary>Main200_DefaultProperties</summary>\r\n\r\nhttps://user-images.githubusercontent.com/47351802/230427985-42082230-3b55-4178-8db7-7b3198d711b2.mp4\r\n</details>\r\n<details>\r\n<summary>Main100_TaskbarAndPositionModified</summary>\r\n\r\nhttps://user-images.githubusercontent.com/47351802/230428166-95fbddfe-355c-47f5-9806-3e74ea5c31e7.mp4\r\n</details>\r\n\r\n<details>\r\n<summary>Main200_TaskbarAndPositionModified</summary>\r\n\r\nhttps://user-images.githubusercontent.com/47351802/230428274-631bcbaf-d306-43b3-a424-ed4053121f38.mp4\r\n</details>\n\n### Steps to reproduce\n\n - Prerequisite: ensure the system has two monitors with different scaling settings. Reboot the system.\r\n1. In Visual Studio 2022, create a new project with the Windows Forms App template. Select .NET 7.\r\n2. In the form designer, add a button to the form. Configure this button to launch another instance of the main form using the `ShowDialog` method: `button1.Click += (sender, e) => { using (var form = new Form1()) form.ShowDialog(); };`.\r\n3. Add `<ApplicationHighDpiMode>PerMonitorV2</ApplicationHighDpiMode>` to the project file.\r\n4. Run the project.\r\n5. Move the main form to the secondary monitor and click on the button.\r\n6. Move the newly opened dialog to the secondary monitor.\r\n7. **The button's bounds are not scaled.**","Url":"https://github.com/dotnet/winforms/issues/8946","RelatedDescription":"Open issue \"PerMonitorV2 - Opening a dialog whose owner is on a secondary screen results in broken scaling in .NET 7+\" (#8946)"},{"Id":"1654531676","IsPullRequest":true,"CreatedAt":"2023-04-05T18:53:05","Actor":"halgab","Number":"8941","RawContent":null,"Title":"Use interpolated strings in System.Drawing.Common","State":"closed","Body":"I'm not sure the newly added System.Drawing.Common project is in scope for #8203. If it is, I've addressed it here.\r\nNote that I also touched some code inside `#if FINALIZATION_WATCH`, fixing some of it in the process\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8941)","Url":"https://github.com/dotnet/winforms/pull/8941","RelatedDescription":"Closed or merged PR \"Use interpolated strings in System.Drawing.Common\" (#8941)"},{"Id":"1655214756","IsPullRequest":true,"CreatedAt":"2023-04-05T08:58:16","Actor":"halgab","Number":"8943","RawContent":null,"Title":"String interpolation leftovers","State":"open","Body":"This should be the final PR to address #8203.\r\n\r\nThe first commit should be enough to close the issue.\r\n\r\nThe second commit goes the extra mile in string creation optimisation, but I can move it to another PR or discard it altogether if the team is more confortable without it.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8943)","Url":"https://github.com/dotnet/winforms/pull/8943","RelatedDescription":"Open PR \"String interpolation leftovers\" (#8943)"},{"Id":"1654868878","IsPullRequest":false,"CreatedAt":"2023-04-05T03:24:17","Actor":"elachlan","Number":"8942","RawContent":null,"Title":"New overload on DataGridView.Sort to specify sort direction for column sort glyph icon","State":"open","Body":"### Background and motivation\r\n\r\nUsers who implement their own sort logic on a column with `SortMode=DataGridViewColumnSortMode.Programmatic` find it unintuitive/difficult to set a sort glyph icon.\r\n\r\nSee issue: #1063\r\n\r\nThis would allow a user to specify the sort glyph icon direction\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Window.Forms;\r\n\r\npublic class DataGridView\r\n{\r\n    // Existing API\r\n    public virtual void Sort(DataGridViewColumn dataGridViewColumn, ListSortDirection direction);\r\n\r\n    // New API\r\n    public void Sort (DataGridViewColumn dataGridViewColumn, ListSortDirection direction, SortOrder sortGlyphDirection);\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\n// Sort the gridview\r\ndataGridView1.Sort(dataGridView1.Columns[0], ListSortDirection.Ascending, SortOrder.Descending);\r\n```\r\n\r\nExisting method to achieve same outcome\r\n```csharp\r\nDataGridViewColumn sortColumn = dataGridView1.Columns[0];\r\ndataGridView1.Sort(sortColumn, ListSortDirection.Ascending);\r\nsortColumn.HeaderCell.SortGlyphDirection = SortOrder;\r\n```\r\n\r\n### Alternative Designs\r\n\r\nInstead of an overload, add the `sortGlyphDirection` as an optional parameter with a default value of `SortOrder.None`.\r\n\r\n### Risks\r\n\r\nCould break existing application logic if optional `sortGlyphDirection` is used. But usually the glyph is set after you have sorted the gridview.\r\n\r\n### Will this feature affect UI controls?\r\n\r\nYes, `DataGridView` will be affected.","Url":"https://github.com/dotnet/winforms/issues/8942","RelatedDescription":"Open issue \"New overload on DataGridView.Sort to specify sort direction for column sort glyph icon\" (#8942)"},{"Id":"1653057467","IsPullRequest":true,"CreatedAt":"2023-04-04T19:30:46","Actor":"JeremyKuhne","Number":"8937","RawContent":null,"Title":"Remove non-Windows test code from System.Drawing","State":"closed","Body":"We don't run our tests on anything that isn't Windows or doesn't have GDI+. This removes a fair amount of that condition code.\r\n\r\nAlso skip AnimateAndCaptureFrames as it gets picked up by the Test Explorer.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8937)","Url":"https://github.com/dotnet/winforms/pull/8937","RelatedDescription":"Closed or merged PR \"Remove non-Windows test code from System.Drawing\" (#8937)"},{"Id":"1653001570","IsPullRequest":true,"CreatedAt":"2023-04-04T18:49:34","Actor":"dreddy-work","Number":"8936","RawContent":null,"Title":"Disable ServerManager and minimize all open windows on test machines.","State":"closed","Body":"Infra changes to improve UI tests reliability.\r\n\r\n- Stop ServerManager.exe process.\r\n- Minimize all windows on the test machine before launching Integration tests.\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8936)","Url":"https://github.com/dotnet/winforms/pull/8936","RelatedDescription":"Closed or merged PR \"Disable ServerManager and minimize all open windows on test machines.\" (#8936)"},{"Id":"1654285169","IsPullRequest":true,"CreatedAt":"2023-04-04T18:23:02","Actor":"vseanreesermsft","Number":"8939","RawContent":null,"Title":"Update branding to 6.0.17","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8939)","Url":"https://github.com/dotnet/winforms/pull/8939","RelatedDescription":"Closed or merged PR \"Update branding to 6.0.17\" (#8939)"},{"Id":"1654285341","IsPullRequest":true,"CreatedAt":"2023-04-04T18:19:59","Actor":"vseanreesermsft","Number":"8940","RawContent":null,"Title":"Update branding to 7.0.6","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8940)","Url":"https://github.com/dotnet/winforms/pull/8940","RelatedDescription":"Closed or merged PR \"Update branding to 7.0.6\" (#8940)"},{"Id":"1654155460","IsPullRequest":false,"CreatedAt":"2023-04-04T15:55:36","Actor":"ALiwoto","Number":"8938","RawContent":null,"Title":"[API Proposal]: Allow ControlCollection.AddRange to use params keyword.","State":"open","Body":"### Background and motivation\r\n\r\nCurrently [Control.ControlCollection.AddRange](https://github.com/dotnet/winforms/blob/a37c1817d3f965d9a8bdd3d89fd0b98609715e84/src/System.Windows.Forms/src/System/Windows/Forms/Control.ControlCollection.cs#L153) method is accepting an array of `Control`, this means each time that we want to add multiple controls at once, we have to make a new array. By using `params` keyword using this method will become easier.\r\n\r\n### API Proposal\r\n\r\n- Add `params` keyword to all collection `AddRange` methods that don't already have it.\r\n\r\n```csharp\r\nnamespace System.Windows.Forms;\r\n\r\npublic class Control\r\n{\r\n    public class ControlCollection\r\n    {\r\n        public virtual void AddRange(params Control[] controls);\r\n    }\r\n}\r\n```\r\n\r\nLikewise we want to update our other collections that have an [`AddRange`](https://github.com/dotnet/winforms/pull/8928#issuecomment-1495242738):\r\n\r\n``` C#\r\n// Note that parameter names are left as they currently are.\r\n\r\nSystem.ComponentModel.Design.DesignerActionListCollection.AddRange(params DesignerActionList[] value)\r\nSystem.Windows.Forms.AutoCompleteStringCollection.AddRange(params string[] value)\r\nSystem.Windows.Forms.ComboBox.ObjectCollection.AddRange(params object[] items)\r\nSystem.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.AddRange(params Adorner[] value)\r\nSystem.Windows.Forms.Design.Behavior.GlyphCollection.AddRange(params Glyph[] value)\r\nSystem.Windows.Forms.ImageList.ImageCollection.AddRange(params Image[] images)\r\nSystem.Windows.Forms.ListBox.IntegerCollection.AddRange(params int[] items)\r\nSystem.Windows.Forms.ListBox.ObjectCollection.AddRange(params object[] items)\r\nSystem.Windows.Forms.ListView.ListViewItemCollection.AddRange(params ListViewItem[] items)\r\nSystem.Windows.Forms.ListView.ColumnHeaderCollection.AddRange(params ColumnHeader[] values)\r\nSystem.Windows.Forms.ListViewGroupCollection.AddRange(params ListViewGroup[] groups)\r\nSystem.Windows.Forms.ListViewItem.ListViewSubItemCollection.AddRange(params ListViewSubItem[] items)\r\nSystem.Windows.Forms.ListViewItem.ListViewSubItemCollection.AddRange(params string[] items)\r\nSystem.Windows.Forms.TabControl.TabPageCollection.AddRange(params TabPage[] pages)\r\nSystem.Windows.Forms.ToolStripItemCollection.AddRange(params ToolStripItem[] toolStripItems)\r\nSystem.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection.AddRange(params ToolStripPanelRow[] value)\r\nSystem.Windows.Forms.TreeNodeCollection.AddRange(params TreeNode[] nodes)\r\n\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\nthis.Controls.AddRange(this.BtnControl1, this.BtnControl2);\r\n```\r\n\r\n\r\n### Risks\r\n\r\nNo known risks.\r\n\r\n### Will this feature affect UI controls?\r\n\r\n- No, VS Designer doesn't need to support this feature.\r\n- The impact will be easier use of this method by users.\r\n- No, this feature doesn't need to be localized.","Url":"https://github.com/dotnet/winforms/issues/8938","RelatedDescription":"Open issue \"[API Proposal]: Allow ControlCollection.AddRange to use params keyword.\" (#8938)"},{"Id":"1650534153","IsPullRequest":true,"CreatedAt":"2023-04-04T02:25:00","Actor":"kirsan31","Number":"8930","RawContent":null,"Title":"Rework of empty finalizers fix in DataGridView","State":"closed","Body":"Rework of empty finalizers fix in DataGridView due to [this discussion](https://github.com/dotnet/winforms/pull/7431#issuecomment-1423140820).\r\n\r\nAlso added a benchmark for clarity.\r\n- `HashSetB` - previous variant where types were in `HashSet`.\r\n- `GetTypeB` - new variant with `if (GetType() == typeof(DataGridViewBand) || GetType() == typeof(DataGridViewColumn) ...`\r\n- `GetTypeVarB` - `var t = GetType(); if (t == typeof(D1) || t == typeof(D2) ...`\r\n- `HelperMB` - helper method `NeedSuppressFinalize(Type t)` with `return t == typeof(E1) || t == typeof(E2) ...`\r\n![bench](https://user-images.githubusercontent.com/17767561/229299467-711119e8-c0b8-455b-aa8d-cf5ef6bbf3db.png)\r\n[Bench.zip](https://github.com/dotnet/winforms/files/11129968/Bench.zip)\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8930)","Url":"https://github.com/dotnet/winforms/pull/8930","RelatedDescription":"Closed or merged PR \"Rework of empty finalizers fix in DataGridView\" (#8930)"},{"Id":"1652738287","IsPullRequest":true,"CreatedAt":"2023-04-04T01:48:41","Actor":"JeremyKuhne","Number":"8934","RawContent":null,"Title":"Disable BinaryFormatter for most test assemblies","State":"closed","Body":"We want to know when we have additional scenarios that are impacted by the BinaryFormatter, so disabling it by default in tests.\r\n\r\nAdds a few formatter scopes around tests that do use BinaryFormatter.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8934)","Url":"https://github.com/dotnet/winforms/pull/8934","RelatedDescription":"Closed or merged PR \"Disable BinaryFormatter for most test assemblies\" (#8934)"},{"Id":"1652911480","IsPullRequest":true,"CreatedAt":"2023-04-04T01:48:20","Actor":"JeremyKuhne","Number":"8935","RawContent":null,"Title":"Handle a few skipped test failures in System.Drawing","State":"closed","Body":"`[KnownIssue]` doesn't actually skip tests in the Test Explorer. This change fixes the tests that were \"skipped\" and actually failing.\r\n\r\n- GDI+ no longer accepts negative pen widths\r\n- Some tests were ported from Mono and skipped as they validated Mono's behavior, not GDI+\r\n- Graphics.CopyFromScreen would call ReleaseHDC even if GetHDC was not called.\r\n- CopyFromScreen assumed -1, -1 was an invalid screen coordinate. Not true for multimonitor.\r\n- SetNativeBrush tests should not be disposing the invalid handle- random badness will occur.\r\n- Prevent using a Graphics object with a null pointer in Font.GetHeight (to avoid AV).\r\n\r\nI've also disabled the BinaryFormatter by default for these tests.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8935)","Url":"https://github.com/dotnet/winforms/pull/8935","RelatedDescription":"Closed or merged PR \"Handle a few skipped test failures in System.Drawing\" (#8935)"},{"Id":"1652385611","IsPullRequest":false,"CreatedAt":"2023-04-03T16:21:29","Actor":"dmitrii-drobotov","Number":"8933","RawContent":null,"Title":"Align and Anchor editors in PropertyGrid do not fill whole width ","State":"open","Body":"### .NET version\n\n8.0.0-preview.4.23177.1\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nConfirmed that it works in .NET 6 and 7\n\n### Issue description\n\nAnchor and Align editors' UI in PropertyGrid is not filled to the whole width of container.\r\n\r\n#### Current Behavior\r\n.NET 8:\r\n![Screenshot 2023-04-03 174935](https://user-images.githubusercontent.com/102954094/229567686-d6521eb5-a8b2-4a0e-ae5b-8c349a9f8096.png)\r\n![Screenshot 2023-04-03 142235](https://user-images.githubusercontent.com/102954094/229567814-4540ce25-33eb-4306-b6b5-354bae5e1da1.png)\r\n\r\n\r\n#### Expected behavior\r\n.NET 7 and .NET Framework:\r\n\r\n![Screenshot 2023-04-03 175456](https://user-images.githubusercontent.com/102954094/229567851-215c8cb6-990c-4129-86db-3ee3b46c8b23.png)\r\n![Screenshot 2023-04-03 142322](https://user-images.githubusercontent.com/102954094/229567863-077d4e21-1023-4f9f-8e3d-ca4e1377e99c.png)\r\n\n\n### Steps to reproduce\n\nIssue is visible if PropertyGrid is wide enough (at least 400px) and doesn't seem to be affected by DPI settings. Sample app: \r\n[AlignAnchorEditorsTest.zip](https://github.com/dotnet/winforms/files/11140356/AlignAnchorEditorsTest.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/8933","RelatedDescription":"Open issue \"Align and Anchor editors in PropertyGrid do not fill whole width \" (#8933)"},{"Id":"1651819271","IsPullRequest":false,"CreatedAt":"2023-04-03T10:49:59","Actor":"carlosmanri","Number":"8932","RawContent":null,"Title":"When a Form is opened and StartPosition is CenterParent, it is opened always on the main monitor when the value of WindowState is Maximized regardless of parent's monitor","State":"open","Body":"### .NET version\r\n\r\nSDK DE .NET:\r\n Version:   7.0.202\r\n Commit:    6c74320bc3\r\n\r\nEntorno de tiempo de ejecución:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.202\\\r\n\r\nHost:\r\n  Version:      7.0.4\r\n  Architecture: x64\r\n  Commit:       0a396acafe\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\n_No response_\r\n\r\n### Issue description\r\n\r\nWhen a Form is opened and StartPosition is CenterParent, it is opened always on the main monitor when the value of WindowState is Maximized.\r\n\r\nIf a window is opened on the secondary monitor, instead of being displayed on that monitor it is displayed on the primary.\r\n\r\nBecause of this, we cannot open maximized forms by default on the same monitor as the parent window.\r\n\r\nHere is a test form that demonstrates the observed behavior:\r\n\r\n[Form1.vb](https://pastebin.com/v5beGHEh)\r\n[Form1.Designer.vb](https://pastebin.com/XSCBYR4V)\r\n\r\nAs a workaround, it is possible to set the WindowState in the overridden OnLoad method. (The \"Open form that overrides onLoad normal with center parent without parent\" and \"Open form that overrides onLoad normal with center parent with parent\" buttons in Form1). Although if the form contains many controls and takes time to load, you see a rectangle on the wrong monitor before moving to the correct one.\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\n**Environment**\r\n2 monitor setup (1920x1080 each)\r\nLeft monitor assigned as primary monitor\r\n\r\n**Reproduction Steps:**\r\n\r\n1. Run the test application\r\n2. Move application window to secondary monitor\r\n3. Click the \"Open form normal with center parent\" button\r\n4. Close the modal window\r\n5. Click the \"Open form maximized with center parent\" button\r\n\r\n**Expected result**\r\nBoth modal windows are displayed on the same monitor as their parent (the secondary monitor)\r\n\r\n**Actual result**\r\nIn the case of the form with the value FormWindowState.Normal, it is shown in the parent's monitor.\r\nHowever, in the form with value FormWindowState.Maximized it is always displayed on the main monitor.\r\n\r\n**Other observations**\r\nIt has also been verified that changing the main monitor in the operating system and executing\r\nthe steps according to the change (move the application to the secondary monitor before\r\nclicking on the buttons) the behavior is maintained.","Url":"https://github.com/dotnet/winforms/issues/8932","RelatedDescription":"Open issue \"When a Form is opened and StartPosition is CenterParent, it is opened always on the main monitor when the value of WindowState is Maximized regardless of parent's monitor\" (#8932)"},{"Id":"1650987240","IsPullRequest":false,"CreatedAt":"2023-04-02T19:18:09","Actor":"djinnet","Number":"8931","RawContent":null,"Title":"Still issue with layouts missing on toolbox and not rendering on designer.","State":"closed","Body":"### Environment\r\n\r\nMicrosoft Visual Studio Community 2022\r\nVersion 17.4.2\r\nVisualStudio.17.Release/17.4.2+33122.133\r\n\r\n### .NET version\r\n\r\n.Net 7\r\n\r\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\r\n\r\nIt still works in .Net Framework, but I would like to assumed that it have never worked in core and then .net 5+ version.\r\n\r\n### Issue description\r\n\r\nI managed to find this issue that was made for 3 years ago: https://github.com/dotnet/winforms/issues/2842\r\nand I do not think that tablelayoutpanel or flowlayoutpanel has been available for core or .net 5+ version, and I could not find any more information for why they haven't been available when it was expected that they should have been available for today's designer.\r\nThe fact that it still is same issue today after three years in newer version (especially in .net 5+) is concerning. So I hope it is acceptable that I am reporting that this is still an on-going issue and brought to the winform designer team's attention. \r\nSo at least that they are being aware of it, even if they have many things on their plate.\r\n\r\n### Steps to reproduce\r\n\r\nCreate empty winfroms project in .net 7 version. Do not choose the framework one.\r\nTry to find TableLayoutPanel or Flowtablelayout in toolbox window. \r\n\r\n### Diagnostics\r\n\r\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8931","RelatedDescription":"Closed issue \"Still issue with layouts missing on toolbox and not rendering on designer.\" (#8931)"},{"Id":"1650035591","IsPullRequest":false,"CreatedAt":"2023-03-31T21:06:16","Actor":"JeremyKuhne","Number":"8929","RawContent":null,"Title":"[API Proposal]: Add Extract methods to Icon","State":"open","Body":"### Background and motivation\r\n\r\n`System.Drawing.Icon` has methods for creating icons from managed resources and associated native icons. It doesn't, however, allow you to get all native resource icons, or always specify the size that you require.\r\n\r\nThe `Icon` constructors that take a path / stream only support `.ico` files. They do allow choosing a particular size, but also try to pick a color depth based on the current display settings. Color depth matching is of limited use and these constructors are costly as they manually load the entire file, parsing it to create the \"best-fit\" icon. The full stream is kept in memory (this is particularly painful if you're trying to load smaller icons).\r\n\r\n`System.Drawing.Icon.ExtractAssociatedIcon()` has some overlap with these new APIs. It will load the first icon from the file it's given or fall back on whatever executable the file is associated with. The API used for this doesn't allow specifying a size. (We could spin our own by calling [`FindExecutable`](https://learn.microsoft.com/windows/win32/api/shellapi/nf-shellapi-findexecutablew) if we find a need in the future.)\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Drawing;\r\n\r\npublic class Icon\r\n{\r\n    // The existing Extract method.\r\n    public static Icon ExtractAssociatedIcon(string! filePath);\r\n\r\n    // The following work with .ico files as well as PE files (.exe, .dll, etc.). The id is an index when positive or a resource id when negative.\r\n\r\n    // Retrieves the specified icon at the current system icon size setting (large by default).\r\n    public static Icon? ExtractIcon(string! filePath, int id, bool smallIcon = false);\r\n\r\n    // Allows retrieving the specified icon at a specific size (say 32x32). Icon sizes are always square.\r\n    public static Icon? ExtractIcon(string! filePath, int id, ushort size);\r\n\r\n    // Gets the icon count for the specified file.\r\n    public static int GetIconCount(string! filePath);\r\n}\r\n\r\npublic static class SystemIcons\r\n{\r\n    // Existing.\r\n    public static unsafe Icon GetStockIcon(StockIconId stockIcon, StockIconOptions options = StockIconOptions.Default);\r\n\r\n    // New. When asking for an explicit size (as opposed to just large/small) other options aren't available.\r\n    public static unsafe Icon GetStockIcon(StockIconId stockIcon, ushort size);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\n// Get the first icon in regedit.exe at 32x32 size.\r\nusing Icon icon = Icon.ExtractIcon(\"regedit.exe\", id: 0, size: 32);\r\n\r\n// Get the icon from devenv.exe with the 1200 resource id, at the default large size\r\nusing Icon icon = Icon.ExtractIcon(\"devenv.exe\", id: -1200);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nCould potentially add additional constructors to `Icon`, but behavior differences between string overloads would probably be confusing. For example, as the entire source file is not copied, resizing via `Copy` is scaled, instead of reparsed.\r\n\r\n### Risks\r\n\r\nNothing notable.\r\n\r\n### Notes\r\n\r\n- This API will scale to the requested size from available sizes. We'll use `SHGetStockIconInfo`- I believe it tries to scale down from larger sizes.\r\n- We will not track the original source or update the copy constructors. When the full data is kept in the other APIs the original data is parsed again to try and find a matching size when using the copy constructors. With `Icon`s loaded through these APIs you'll just get the current backing bitmap scaled if you change sizes with the copy constructors (as you would with `HICON` constructed `Icon`s and `ExtractAssociatedIcon`).","Url":"https://github.com/dotnet/winforms/issues/8929","RelatedDescription":"Open issue \"[API Proposal]: Add Extract methods to Icon\" (#8929)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-04-08T03:30:32.5891863Z","RunDurationInMilliseconds":572}