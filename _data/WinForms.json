{"Data":{"GitHub":{"Issues":[{"Id":"1577112110","IsPullRequest":false,"CreatedAt":"2023-02-09T02:13:08","Actor":"Tanya-Solyanik","Number":"8599","RawContent":null,"Title":"Define a pattern for default values that used to be proportional to the default system font.","State":"open","Body":"related bugs\r\n[ ] https://github.com/dotnet/winforms/issues/8593\r\n[ ] https://github.com/dotnet/winforms/issues/4463 \r\n[ ] https://github.com/dotnet/winforms/issues/4461\r\n\r\n### The background\r\n\r\nSome control properties are decorated with a [DefaultValueAttribute](https://learn.microsoft.com/dotnet/api/system.componentmodel.defaultvalueattribute?redirectedfrom=MSDN&view=net-7.0). When control is created in the designer, and the property had not been initialized yet, property browser reads attribute [value](https://learn.microsoft.com/dotnet/api/system.componentmodel.defaultvalueattribute.value?view=net-7.0) and shows it in the property browser. If the user changes such a value in the property browser, design time serialization writes the user-specified value into the `InitializeComponent` method in the code-behind file. If the user does not assign specific value to such a property in the property browser, this property will not be serialized into the code-behind file, as [controlled on line 1176](https://github.com/dotnet/runtime/blob/042d3ee8a7f8f5d4c86f1f7814e2a6a8e7bb18b5/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/ReflectPropertyDescriptor.cs#L1148) by the type description provider. Default value is also used to reset property value in the property browser.\r\n\r\nAt the runtime, properties that are not assigned to in the `InitializeComponent` method, are initialized to default runtime values.\r\n\r\nDesign time components assume that the runtime default value is the same as the design time one i.e., in the case when the attribute is used, the same as the attribute value. If this assumption is not held, the `reset` option in the property browser will not work, and `InitializeComponent` will explicitly serialize default values instead of letting the control to pick up the runtime default on the initialization.\r\n\r\nDefault runtime values could be the same constant as used in the `DefaultValueAttribute`, or an ambient value (for example, values that are defined on the parent). \r\nThis is only one of the mechanisms to define a default value.\r\nThe critical point is that a missing property initialization in `InitializeComponent` implies that the default value is used. \r\n\r\n### The issue\r\n\r\nIn some cases, the default runtime value is dependent on the application font. For example, Height or Width properties. Some of these values were calculated and hardcoded before we [had changed](https://github.com/dotnet/winforms/commit/524df06a6cf71ae765e14a75b2d40283502e4b9e) the default font. Currently some of the design time default values (as represented by the attribute) are out of sync with the runtime default values that are explicitly assigned in the constructor. \r\n\r\n<details> \r\n<summary>Example</summary>\r\n\r\nDesign time default value -\r\nhttps://github.com/dotnet/winforms/blob/62edc1ab7b601bee58199fdea2580a54cf5cd25b/src/System.Windows.Forms/src/System/Windows/Forms/DataGridViewRow.cs#L212-L218\r\n\r\nRuntime default -\r\nhttps://github.com/dotnet/winforms/blob/62edc1ab7b601bee58199fdea2580a54cf5cd25b/src/System.Windows.Forms/src/System/Windows/Forms/DataGridViewRow.cs#L37\r\n\r\nThe runtime value is dynamically calculated based on the default font while the designer assumes a constant value. \r\n</details>\r\n\r\n### What happens\r\n\r\n1. when designer is shown, control is instantiated, and the runtime default value is assigned to the property.\r\n2. when control is serialized, TypeDescriptor compares the actual property value (from the runtime default) against the value in the attribute, sees that they are different and adds a line that sets this value to the `InitalizeComponent`.\r\n_Problem_: User had not edited this value and expects that height is picked up from the font, user changes the control font on the startup and the height is not appropriate for the new font.\r\n\r\n### Suggestion\r\n\r\nUse a different pattern to supply the default value, like what ambient properties are already using. See [line 1170](https://github.com/dotnet/runtime/blob/042d3ee8a7f8f5d4c86f1f7814e2a6a8e7bb18b5/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/ReflectPropertyDescriptor.cs#L1148).\r\n\r\n1. remove the default value attribute from properties that have dynamic default values.\r\n2. add `Reset<Property>` and `ShouldSerialize<Property>` methods that compare actual value against the dynamic runtime default.\r\n\r\n### This is a breaking change\r\n\r\nPer https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/breaking-change-rules.md#attributes. But I consider this case a grey area because the functionality is preserved, and change is unobservable to the user unless they enumerate the attributes. If they enumerate the attributes, they'll have to look up the breaking changes docs.","Url":"https://github.com/dotnet/winforms/issues/8599","RelatedDescription":"Open issue \"Define a pattern for default values that used to be proportional to the default system font.\" (#8599)"},{"Id":"1577037524","IsPullRequest":false,"CreatedAt":"2023-02-09T01:01:24","Actor":"dreddy-work","Number":"8598","RawContent":null,"Title":"DragDrop tests are resulting in dotnet.exe process crash","State":"open","Body":"### Test\n\nPictureBox_SetData_DoDragDrop_RichTextBox_ReturnsExptected_Async and possibly others in this file.\n\n### Issue description\n\nAlthough these crashes are not frequent, they happen often enough to impede the CI build process. As these crashes occur in dotnet.exe, our tests are unable to collect dumps or provide detailed logs or call stacks.\r\n\r\nI manually setup lab machine and locally debugged to collect dumps. Below are the call stack: \r\n\r\n```CS\r\n \tSystem.Private.CoreLib.dll!System.ModuleHandle.ResolveMethodHandle(int methodToken, System.RuntimeTypeHandle[] typeInstantiationContext, System.RuntimeTypeHandle[] methodInstantiationContext)\tUnknown\r\n \tSystem.Private.CoreLib.dll!System.Reflection.CustomAttribute.FilterCustomAttributeRecord(System.Reflection.MetadataToken caCtorToken, System.Reflection.MetadataImport scope, System.Reflection.RuntimeModule decoratedModule, System.Reflection.MetadataToken decoratedToken, System.RuntimeType attributeFilterType, bool mustBeInheritable, ref System.RuntimeType.ListBuilder<object> derivedAttributes, out System.RuntimeType attributeType, out System.IRuntimeMethodInfo ctorWithParameters, out bool isVarArg)\tUnknown\r\n \tSystem.Private.CoreLib.dll!System.Reflection.CustomAttribute.AddCustomAttributes(ref System.RuntimeType.ListBuilder<object> attributes, System.Reflection.RuntimeModule decoratedModule, int decoratedMetadataToken, System.RuntimeType attributeFilterType, bool mustBeInheritable, System.RuntimeType.ListBuilder<object> derivedAttributes)\tUnknown\r\n \tSystem.Private.CoreLib.dll!System.Reflection.CustomAttribute.GetCustomAttributes(System.Reflection.RuntimeModule decoratedModule, int decoratedMetadataToken, int pcaCount, System.RuntimeType attributeFilterType)\tUnknown\r\n \tSystem.Private.CoreLib.dll!System.Reflection.CustomAttribute.GetCustomAttributes(System.Reflection.RuntimeMethodInfo method, System.RuntimeType caType, bool inherit)\tUnknown\r\n \tSystem.Private.CoreLib.dll!System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit)\tUnknown\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.StackTrace.TryResolveStateMachineMethod(ref System.Reflection.MethodBase method, out System.Type declaringType)\tUnknown\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.StackTrace.ToString(System.Diagnostics.StackTrace.TraceFormat traceFormat, System.Text.StringBuilder sb)\tUnknown\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.StackTrace.ToString()\tUnknown\r\n \tSystem.Windows.Forms.Primitives.dll!System.DisposalTracking.Tracker.Tracker()\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.GdiCache.ScreenGraphicsScope.ScreenGraphicsScope(ref System.Windows.Forms.ScreenDcCache.ScreenDcScope scope)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.GdiCache.GetScreenDCGraphics()\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ProfessionalColorTable.InitCommonColors(ref System.Collections.Generic.Dictionary<System.Windows.Forms.ProfessionalColorTable.KnownColors, System.Drawing.Color> rgbTable)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ProfessionalColorTable.InitSystemColors(ref System.Collections.Generic.Dictionary<System.Windows.Forms.ProfessionalColorTable.KnownColors, System.Drawing.Color> rgbTable)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ProfessionalColorTable.InitThemedColors(ref System.Collections.Generic.Dictionary<System.Windows.Forms.ProfessionalColorTable.KnownColors, System.Drawing.Color> rgbTable)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ProfessionalColorTable.ColorTable.get()\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ProfessionalColorTable.FromKnownColor(System.Windows.Forms.ProfessionalColorTable.KnownColors color)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ProfessionalColorTable.ToolStripBorder.get()\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ToolStripProfessionalRenderer.OnRenderToolStripBorder(System.Windows.Forms.ToolStripRenderEventArgs e)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ToolStripRenderer.DrawToolStripBorder(System.Windows.Forms.ToolStripRenderEventArgs e)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ToolStrip.OnPaint(System.Windows.Forms.PaintEventArgs e)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.PaintWithErrorHandling(System.Windows.Forms.PaintEventArgs e, short layer)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.WmPaint(ref System.Windows.Forms.Message m)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.WndProc(ref System.Windows.Forms.Message m)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ScrollableControl.WndProc(ref System.Windows.Forms.Message m)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ToolStrip.WndProc(ref System.Windows.Forms.Message m)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.ControlNativeWindow.OnMessage(ref System.Windows.Forms.Message m)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.ControlNativeWindow.WndProc(ref System.Windows.Forms.Message m)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.NativeWindow.Callback(Windows.Win32.Foundation.HWND hWnd, Interop.User32.WM msg, Windows.Win32.Foundation.WPARAM wparam, Windows.Win32.Foundation.LPARAM lparam)\tUnknown\r\n \t[Native to Managed Transition]\t\r\n \tuser32.dll!UserCallWinProcCheckWow()\tUnknown\r\n \tuser32.dll!DispatchClientMessage()\tUnknown\r\n \tuser32.dll!__fnDWORD()\tUnknown\r\n \tntdll.dll!KiUserCallbackDispatcherContinue()\tUnknown\r\n \twin32u.dll!NtUserDispatchMessage()\tUnknown\r\n \tuser32.dll!DispatchMessageWorker()\tUnknown\r\n \t[Managed to Native Transition]\t\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.ComponentManager.Interop.Mso.IMsoComponentManager.FPushMessageLoop(nuint dwComponentID, Interop.Mso.msoloop uReason, void* pvLoopData)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Interop.Mso.msoloop reason, System.Windows.Forms.ApplicationContext context)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Interop.Mso.msoloop reason, System.Windows.Forms.ApplicationContext context)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.RunDialog(System.Windows.Forms.Form form)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Form.ShowDialog(System.Windows.Forms.IWin32Window owner)\tUnknown\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Form.ShowDialog()\tUnknown\r\n \tSystem.Windows.Forms.UI.IntegrationTests.dll!System.Windows.Forms.UITests.ControlTestBase.RunFormWithoutControlAsync<System.Windows.Forms.UITests.DragDropTests.DragImageDropDescriptionForm>(System.Func<System.Windows.Forms.UITests.DragDropTests.DragImageDropDescriptionForm> createForm, System.Func<System.Windows.Forms.UITests.DragDropTests.DragImageDropDescriptionForm, System.Threading.Tasks.Task> testDriverAsync) Line 291\tC#\r\n>\tSystem.Windows.Forms.UI.IntegrationTests.dll!System.Windows.Forms.UITests.DragDropTests.PictureBox_SetData_DoDragDrop_RichTextBox_ReturnsExptected_Async() Line 486\tC#\r\n \t[Native to Managed Transition]\t\r\n \t[Managed to Native Transition]\t\r\n \txunit.execution.dotnet.dll!Xunit.Sdk.TestInvoker<System.__Canon>.CallTestMethod(object testClassInstance) Line 150\tC#\r\n```\r\n\r\nCollected dump for reference is copied:  [here](https://microsoft-my.sharepoint.com/:u:/p/dreddy/EfKugeWjwH9NrlmUnLyCg7oB_uTMWi24NaWAPR1VKYokHQ?e=iDy2fH)\r\nIInstructions to get a lab machine to investigate: [here](https://microsoft.sharepoint.com/teams/MerriesWinFormsandSetup/_layouts/15/Doc.aspx?sourcedoc={9c3495c9-2312-4fdc-9646-fe584e74c138}&action=edit&wd=target%28WinForms%20Intro.one%7C752c4588-c7c2-4f2f-9436-0b0283b7d454%2FDebug%20test%20failure%20on%20lab%20machines%7C53206cb5-864a-4884-ae42-cead5469ea9b%2F%29&wdorigin=703)","Url":"https://github.com/dotnet/winforms/issues/8598","RelatedDescription":"Open issue \"DragDrop tests are resulting in dotnet.exe process crash\" (#8598)"},{"Id":"1576791973","IsPullRequest":true,"CreatedAt":"2023-02-08T21:00:17","Actor":"JeremyKuhne","Number":"8597","RawContent":null,"Title":"Fix Control COM interface serialization","State":"open","Body":"`PropertyBagStream` wasn't converting it's values correctly to/from string/object.\r\n\r\nAlso reinstate `BinaryFormatter` property handling which I removed under the misunderstanding that `BinaryFormatter` would be completely removed.\r\n\r\nAdd tests.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8597)","Url":"https://github.com/dotnet/winforms/pull/8597","RelatedDescription":"Open PR \"Fix Control COM interface serialization\" (#8597)"},{"Id":"1576726433","IsPullRequest":false,"CreatedAt":"2023-02-08T20:00:36","Actor":"JeremyKuhne","Number":"8596","RawContent":null,"Title":"Need to fully implement object to VARIANT.","State":"open","Body":"I've added a `FromObject` method on `VARIANT` that only handles `null` and `string`. It needs to handle the flip side to `ToObject` in order to stop using `Marshal` for conversion. (Necessary for enabling trimming and AOT scenarios where runtime COM interop is disabled.)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/8596","RelatedDescription":"Open issue \"Need to fully implement object to VARIANT.\" (#8596)"},{"Id":"1576560984","IsPullRequest":true,"CreatedAt":"2023-02-08T17:56:16","Actor":"gpetrou","Number":"8595","RawContent":null,"Title":"Enable nullability in FeedbackRectangle","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in FeedbackRectangle\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8595)","Url":"https://github.com/dotnet/winforms/pull/8595","RelatedDescription":"Open PR \"Enable nullability in FeedbackRectangle\" (#8595)"},{"Id":"1576379668","IsPullRequest":true,"CreatedAt":"2023-02-08T17:42:15","Actor":"gpetrou","Number":"8594","RawContent":null,"Title":"Add ContainsObjectThatIsNotNull method in PropertyStore and use it where possible","State":"closed","Body":"## Proposed changes\r\n\r\n- Add ContainsObjectThatIsNotNull method in PropertyStore and use it where possible\r\n- Addresses https://github.com/dotnet/winforms/pull/8575#discussion_r1099644647\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8594)","Url":"https://github.com/dotnet/winforms/pull/8594","RelatedDescription":"Closed or merged PR \"Add ContainsObjectThatIsNotNull method in PropertyStore and use it where possible\" (#8594)"},{"Id":"1576085015","IsPullRequest":true,"CreatedAt":"2023-02-08T17:22:17","Actor":"dotnet-maestro[bot]","Number":"8589","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20230207.1\r\n- **Date Produced**: February 7, 2023 4:25:48 PM UTC\r\n- **Commit**: b31c4466a49800c2f019690e81182c7ffd584dda\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.23106.4 to 8.0.0-beta.23107.1][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.23106.4 to 8.0.0-beta.23107.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.23106.4 to 8.0.0-beta.23107.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.23106.4 to 8.0.0-beta.23107.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.23106.4 to 8.0.0-beta.23107.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.23106.4 to 8.0.0-beta.23107.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/02980a6...b31c446\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8589)","Url":"https://github.com/dotnet/winforms/pull/8589","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#8589)"},{"Id":"1576273912","IsPullRequest":false,"CreatedAt":"2023-02-08T14:59:53","Actor":"kirsan31","Number":"8593","RawContent":null,"Title":"DataGridView styles designer bugs","State":"open","Body":"### Environment\r\n\r\nAll\r\n\r\n### .NET version\r\n\r\nAll\r\n\r\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\r\n\r\nNo\r\n\r\n### Issue description\r\n\r\nReferenceses:\r\nhttps://developercommunity.visualstudio.com/t/WinForms-DataGridView-styles-designer/1143911\r\nhttps://github.com/microsoft/winforms-designer/issues/2225\r\n\r\nFor now DataGridView styles in designer can be split to 3 groups by designer behavior:\r\n![pic1](https://user-images.githubusercontent.com/62929087/89873781-8a2a9500-dbed-11ea-8bb5-0ee5afdaeff6.png)\r\n\r\n### Group 1.\r\nWork absolutely correct, but not displaying default values (because they are absent).\r\n\r\n### Groups 2 and 3.\r\nHave common bugs / incorrect behavior. When you change any parameter in this styles - the designer will wright to *.Designer.cs this parameter new value + ALL other parameters with default values.\r\n![gif1](https://user-images.githubusercontent.com/62929087/89873800-8f87df80-dbed-11ea-8c23-ad0a368a8960.gif)\r\n\r\nThis can lead to confusing errors. For example this will break system font scaling because of explicitly font set. Also when you open this styles settings it’s impossible to determinate what are default values and what you have changed (if any):\r\n![pic2](https://user-images.githubusercontent.com/62929087/89873786-8d258580-dbed-11ea-93de-281dacbd37e1.png) \r\n\r\n### Group 2.\r\nDidn't not remove all it's code from *.Designer.cs when all changes are removed in designer.\r\n\r\n### Group 3.\r\nYou can’t delete default values from *.Designer.cs - **this completely break system font scaling**.\r\n![gif2](https://user-images.githubusercontent.com/62929087/89873803-91ea3980-dbed-11ea-89c6-e64998ec155e.gif) \r\n**And if you delete def. values manually, they will be bring back after any designer manipulation.**\r\n\r\n------------------------------------------------\r\n\r\nIdeal solution will be that Groups 2 and 3 behave identical and:\r\n\r\n- Place in *.Designer.cs only those values, that you have changed and NO default values.\r\n- Display default values in styles with not bold text, like in every other place.\r\n\r\nThis will solve all problems above.","Url":"https://github.com/dotnet/winforms/issues/8593","RelatedDescription":"Open issue \"DataGridView styles designer bugs\" (#8593)"},{"Id":"1576263161","IsPullRequest":true,"CreatedAt":"2023-02-08T14:53:19","Actor":"v-elnovikova","Number":"8592","RawContent":null,"Title":"Fix menu item without sub menu leaking focus on arrow keys","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #8591\r\n\r\n\r\n## Proposed changes\r\n\r\n- Handle Up and Down keys in ToolStripDropDownItem class in case when item has no sub-items.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Screen readers do not announce other controls when a user tries to open menu item without sub menu.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nWhen empty menu item is focused, Down key switches focus to form button:\r\n\r\nhttps://user-images.githubusercontent.com/113603457/217564499-a7878c2e-ec87-4d39-ab1d-94eb4976b001.mp4\r\n\r\n### After\r\n\r\nWhen empty menu item is focused, Down key does nothing, menu is still focused:\r\n\r\nhttps://user-images.githubusercontent.com/113603457/217564561-48b9c782-3251-4aae-a9be-a7d976ac82c9.mp4\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET 8.0.0-alpha.1.23057.5\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8592)","Url":"https://github.com/dotnet/winforms/pull/8592","RelatedDescription":"Open PR \"Fix menu item without sub menu leaking focus on arrow keys\" (#8592)"},{"Id":"1576252945","IsPullRequest":false,"CreatedAt":"2023-02-08T14:46:32","Actor":"v-elnovikova","Number":"8591","RawContent":null,"Title":"Menu item without sub menu leaking focus on arrow keys","State":"open","Body":"### .NET version\n\n7.0.2\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo\n\n### Issue description\n\nWhen menu item without sub menu has focus, and a user presses Up or Down arrow keys, focus switches to form controls.\r\n\r\nhttps://user-images.githubusercontent.com/113603457/217561753-d8336f66-818d-4a50-b8a4-5d37fa05e9cd.mp4\r\n\r\nScreen reader announces exiting menu mode and switching to form buttons. But when Enter key is pressed, menu item is clicked, not the focused button.\r\n\r\nExpected behavior: Up and Down keys do nothing on empty menu items, since there is no drop-down sub menu to open.\n\n### Steps to reproduce\n\nSample app: [SampleApp.zip](https://github.com/dotnet/winforms/files/10686647/SampleApp.zip)\r\n\r\nBuild and run app.\r\nUsing Alt and Left/Right keys move focus to *Empty item*. \r\nPress Up or Down key.\r\nNotice that focus moves to buttons on the form.\r\n","Url":"https://github.com/dotnet/winforms/issues/8591","RelatedDescription":"Open issue \"Menu item without sub menu leaking focus on arrow keys\" (#8591)"},{"Id":"1576085732","IsPullRequest":true,"CreatedAt":"2023-02-08T13:34:55","Actor":"dotnet-maestro[bot]","Number":"8590","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230207.10\r\n- **Date Produced**: February 8, 2023 7:34:13 AM UTC\r\n- **Commit**: d913b94d041e192ab2f389ecae6b972da2094560\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.CodeDom**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Text.Json**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.2.23106.7 to 8.0.0-preview.2.23107.10][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/b39d6a6...d913b94\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8590)","Url":"https://github.com/dotnet/winforms/pull/8590","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8590)"},{"Id":"1576062307","IsPullRequest":true,"CreatedAt":"2023-02-08T12:50:49","Actor":"v-elnovikova","Number":"8588","RawContent":null,"Title":"Fix ToolStrip/MenuStrip/StatusStrip arrow keys navigation","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #8587\r\n\r\n\r\n## Proposed changes\r\n\r\n- Fix ToolsStrip.TabStop property value handling in calculating the next ToolStripItem to switch to.\r\n- Modify unit tests to ensure GetNextItem method handles TabStop true value correctly.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Arrow keys work correctly when navigation ToolStrip/MenuStrip/StatusStrip items from keyboard.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nFocus goes *right* on both Left and Right keys:\r\n\r\nhttps://user-images.githubusercontent.com/113603457/217533909-e7af42f1-b48c-40e8-b670-bce1797ccac1.mp4\r\n\r\n### After\r\n\r\nFocus goes *left* on Left key and *right* on the Right key:\r\n\r\nhttps://user-images.githubusercontent.com/113603457/217534004-530e0969-86f0-4470-a9d9-60dd8a06362a.mp4\r\n\r\nTab and Shift+Tab navigation is not affected:\r\n\r\nhttps://user-images.githubusercontent.com/113603457/217534084-6c900fa3-001e-4f39-8c21-6ba12f3df049.mp4\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET 8.0.0-alpha.1.23057.5\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8588)","Url":"https://github.com/dotnet/winforms/pull/8588","RelatedDescription":"Open PR \"Fix ToolStrip/MenuStrip/StatusStrip arrow keys navigation\" (#8588)"},{"Id":"1576047259","IsPullRequest":false,"CreatedAt":"2023-02-08T12:40:07","Actor":"v-elnovikova","Number":"8587","RawContent":null,"Title":"ToolStrip/MenuStrip/StatusStrip with TabStop=true arrow keys navigation goes in the wrong direction","State":"open","Body":"### .NET version\n\n7.0.2\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n.NET 6.0 - No\r\n.NET 5.0 - Yes\r\n.NET Core 3.1 - Yes\r\n\r\nMost likely, it's a regression after PR #5924\n\n### Issue description\n\nWhen navigating through ToolStrip via keyboard arrow keys, Left key switches focus to the right item, not to the left one as expected. \r\n\r\nhttps://user-images.githubusercontent.com/113603457/217529055-8cac1aec-8786-4197-955d-c4a5a1007b59.mp4\r\n\r\nNotice that when the **Left key** is pressed, the focus goes **right**.\r\n\r\nMenuStrip and StatusStrip have the same problem.\r\nThe issue is reproducing only controls with **TabStop** set to **true**.\n\n### Steps to reproduce\n\nSample app:  [SampleApp.zip](https://github.com/dotnet/winforms/files/10685452/SampleApp.zip)\r\n\r\nBuild and run app. \r\nInitially focus is on ToolStrip first item. \r\nPress Right arrow key several times. Notice that focus switches to the right.\r\nPress Left key. Focus switches to the right again.","Url":"https://github.com/dotnet/winforms/issues/8587","RelatedDescription":"Open issue \"ToolStrip/MenuStrip/StatusStrip with TabStop=true arrow keys navigation goes in the wrong direction\" (#8587)"},{"Id":"1574295238","IsPullRequest":true,"CreatedAt":"2023-02-08T04:48:58","Actor":"dotnet-maestro[bot]","Number":"8581","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230206.7\r\n- **Date Produced**: February 7, 2023 9:40:28 AM UTC\r\n- **Commit**: b39d6a6eb44860746e91e5ce4f585beff33d1f63\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.CodeDom**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Text.Json**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.2.23105.4 to 8.0.0-preview.2.23106.7][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/58719ec...b39d6a6\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8581)","Url":"https://github.com/dotnet/winforms/pull/8581","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8581)"},{"Id":"1572922738","IsPullRequest":true,"CreatedAt":"2023-02-08T04:23:15","Actor":"gpetrou","Number":"8575","RawContent":null,"Title":"Use TryGetObject instead of ContainsObject and GetObject","State":"closed","Body":"## Proposed changes\r\n\r\n- Use TryGetObject instead of ContainsObject and GetObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8575)","Url":"https://github.com/dotnet/winforms/pull/8575","RelatedDescription":"Closed or merged PR \"Use TryGetObject instead of ContainsObject and GetObject\" (#8575)"},{"Id":"1574915992","IsPullRequest":true,"CreatedAt":"2023-02-07T20:52:42","Actor":"vseanreesermsft","Number":"8585","RawContent":null,"Title":"Update branding to 6.0.15","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8585)","Url":"https://github.com/dotnet/winforms/pull/8585","RelatedDescription":"Closed or merged PR \"Update branding to 6.0.15\" (#8585)"},{"Id":"1574916111","IsPullRequest":true,"CreatedAt":"2023-02-07T20:49:48","Actor":"vseanreesermsft","Number":"8586","RawContent":null,"Title":"Update branding to 7.0.4","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8586)","Url":"https://github.com/dotnet/winforms/pull/8586","RelatedDescription":"Closed or merged PR \"Update branding to 7.0.4\" (#8586)"},{"Id":"1574533268","IsPullRequest":false,"CreatedAt":"2023-02-07T19:08:59","Actor":"TATKINSMSFT","Number":"8583","RawContent":null,"Title":" .NET 6 Winforms Cursors leak CPicture objects (User and GDI objects leak) due to ref count bug","State":"closed","Body":"### .NET version\n\n.NET 6\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nWorks in .NET Core 3.1 (also works in .NET 7)\n\n### Issue description\n\n*****[Mainly for tracking]  Customer running into this has been unblocked by moving to .NET 7******\r\n\r\n.NET 6 Windows Forms System.Windows.Forms.Cursor object creation leaks ole32!CPicture objects which leaks USER (Cursor) and GDI objects (Surf) due to a ref count bug.  If you do this long enough, you could experience an OutOfMemoryException (or other variation of exhausting resources) due to hitting the 10K per-process limit for GDI objects.  Example exceptions:\r\n\r\nException object: 000001b919ae0340\r\nException type:   System.OutOfMemoryException\r\nMessage:          Insufficient memory to continue the execution of the program.\r\nInnerException:   <none>\r\nStackTrace (generated):\r\n<none>\r\nStackTraceString: <none>\r\nHResult: 8007000e\r\n\r\nException object: 000001b919b68360\r\nException type:   System.ArgumentException\r\nMessage:          Parameter is not valid.\r\nInnerException:   <none>\r\nStackTrace (generated):\r\n<none>\r\nStackTraceString: <none>\r\nHResult: 80070057\r\n\r\nThe bug is in https://github.com/dotnet/winforms/blob/release/6.0/src/System.Windows.Forms.Primitives/src/Interop/WinFormsComWrappers.cs#L56\r\n\r\nThere should be a Marshal.Release (externalComObject) after the QueryInterface (QI does an AddRef, unbalancing the ref count and leading to the leak without the Release call) call.\r\n\r\nThis bug doesn't occur in .NET Core 3.1 or .NET 7 (has a Marshal.Release call).\n\n### Steps to reproduce\n\nCreate a new Windows Forms project targeting .NET 6\r\nAdd a Button to the newly created Form1 in the Designer\r\nAdd the following contrived code to Form1.cs\r\n\r\n        private Cursor[] cur;\r\n        private void button1_Click(object sender, EventArgs e)\r\n        {                                       \r\n                int i = 0;\r\n                cur = new Cursor[3350];\r\n                while (i < 3350)\r\n                    {       \r\n                        cur[i] = new Cursor(\"c:\\\\windows\\\\cursors\\\\aero_helpsel.cur\");\r\n                        cur[i].Dispose();\r\n                        cur[i] = null;\r\n                        i++;\r\n                    }\r\n                GC.Collect();\r\n                GC.WaitForPendingFinalizers();         \r\n        }\r\n\r\nF5/Run the application\r\nClick the button\r\n\r\nResult:  A System.OutOfMemoryException will occur due to hitting the 10K per-process limit for GDI objects\r\n\r\nExpected result:  No USER/GDI object leak or exception(s) \r\n","Url":"https://github.com/dotnet/winforms/issues/8583","RelatedDescription":"Closed issue \" .NET 6 Winforms Cursors leak CPicture objects (User and GDI objects leak) due to ref count bug\" (#8583)"},{"Id":"1573787216","IsPullRequest":true,"CreatedAt":"2023-02-07T15:50:04","Actor":"dotnet-maestro[bot]","Number":"8578","RawContent":null,"Title":"[release/8.0-preview1] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4df5b787-1726-4081-4cf7-08dafe3cf288)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 4df5b787-1726-4081-4cf7-08dafe3cf288\r\n- **Build**: 20230206.5\r\n- **Date Produced**: February 7, 2023 6:18:36 AM UTC\r\n- **Commit**: 9f654effb17265a137695bf38f0a782d274791cd\r\n- **Branch**: refs/heads/release/8.0-preview1\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.CodeDom**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Text.Json**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.1.23104.3 to 8.0.0-preview.1.23106.5][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/6507a44...9f654ef\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4df5b787-1726-4081-4cf7-08dafe3cf288)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8578)","Url":"https://github.com/dotnet/winforms/pull/8578","RelatedDescription":"Closed or merged PR \"[release/8.0-preview1] Update dependencies from dotnet/runtime\" (#8578)"},{"Id":"1574407439","IsPullRequest":false,"CreatedAt":"2023-02-07T13:41:17","Actor":"zeh-almeida","Number":"8582","RawContent":null,"Title":"[API Proposal]: Allow `Control.Invoke` on `Binding`","State":"open","Body":"### Background and motivation\n\n`Binding`s allow for Form `Control`s and models to be updated when their values are changed by the system in any way.\r\nThis would allow the form to be reactive, with processes running in the background performing all the necessary actions and having them reflected by the bindings automatically.\r\n\r\nThis already works with MAUI, specially if you use the `CommunityToolkit.Mvvm` and its generators.\r\nHowever, while Winforms support bindings as well, it does not support asynchronous updates, because doing so would raise a `InvalidOperationException`.\r\n\r\nThis happens because the `Binding` class updates the value of the property directly, without checking if the control is in the UI Thread or not.\r\n\r\nI then propose a new constructor to the `Binding` class in which you can set a flag to prefer using `Control.Invoke` when updating the bindings. `Control.Invoke` forces the `Action` to run at the UI Thread, solving the problem.\r\n\r\nI have already [opened an issue](https://github.com/dotnet/winforms/issues/8532) about [this as well as a PR](https://github.com/dotnet/winforms/pull/8547).\n\n### API Proposal\n\n```csharp\r\nnamespace System.Windows.Forms;\r\n\r\npublic class Binding\r\n{\r\n    public Binding(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo, bool invokeControl);\r\n}\r\n```\r\n\r\n```csharp\r\nnamespace System.Windows.Forms;\r\n\r\npublic class ControlBindingsCollection : BindingsCollection\r\n{\r\n    public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode updateMode, object nullValue, string formatString, IFormatProvider formatInfo, bool invokeControl);\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\n// Create a new form and a text box to bind values to\r\nForm form = new Form();\r\nTextBox textBox = new TextBox();\r\ntextBox.Parent = form;\r\n\r\n// Create a binding to handle the invoke method\r\nBinding binding = new Binding(\"Text\", mainObject, \"Text\", false, 0, null, string.Empty, null, true);\r\ntextBox.DataBindings.Add(binding);\r\n\r\nform.Show();\r\n\r\n// Perform the binding update in a separate thread to escape the UI Thread on purpose\r\nvar thread = new Thread(() =>\r\n{\r\n    textBox.Text = \"Updated test text\";\r\n\r\n    Assert.Equal(\"Updated test text\", textBox.Text);\r\n    Assert.Equal(\"Updated test text\", mainObject.Text);\r\n});\r\n\r\nthread.Start();\r\n```\r\n\n\n### Alternative Designs\n\nI have added a new constructor to the `System.Windows.Forms.Binding` class and a new public method to `System.Windows.Forms.ControlBindingsCollection` without changing previous APIs.\n\n### Risks\n\nIn my limited study of the APIs, I didn't see any breaking risk associated with this proposal.\r\nThere may be performance repercussions in the `Control.Invoke` mechanic on heavy load but I was unable to test it.\r\n\r\n[The PR I mentioned](https://github.com/dotnet/winforms/pull/8547) has some tests which could be useful in analyzing those scenarios.","Url":"https://github.com/dotnet/winforms/issues/8582","RelatedDescription":"Open issue \"[API Proposal]: Allow `Control.Invoke` on `Binding`\" (#8582)"},{"Id":"1573908283","IsPullRequest":false,"CreatedAt":"2023-02-07T08:38:20","Actor":"Philip-Wang01","Number":"8580","RawContent":null,"Title":"[Multi-Monitor][PerMonitorV2] ScrollBar is not scaled well on secondary screen","State":"open","Body":"### .NET version\r\n\r\n.NET 8.0.100-preview.2.23106.11\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo, it also repro on .NET 6.0 & 7.0.\r\n\r\n### Issue description\r\n\r\nScrollBar(HScrollBar&VScrollBar) control is not scaled well in secondary screen under PermonitorV2 mode. https://github.com/dotnet/winforms/pull/8312 solved the problem of rectangular shadows not being displayed. But move from 300% DPI to 100% DPI, scrollbars should display the same result as 100% scrollbars. Move from 100% DPI to 300% DPI, scrollbars should display the same result as 300% scrollbars.\r\n\r\n### Steps to reproduce\r\n\r\n1. Launch VS instance on 300% primary screen.\r\n2. Create a WinForms .NET Core project.\r\n3. Add `<ApplicationHighDpiMode>PerMonitorV2</ApplicationHighDpiMode>` in csproj file.\r\n4. Add a HScrollBar and VScrollBar to form designer.\r\n5. Build and run it, move to 100% secondary monitor.\r\n\r\nOr\r\n\r\n1. Extract and open [testscrollbar.zip](https://github.com/dotnet/winforms/files/10673549/testscrollbar.zip) on 300% primary screen.\r\n2. Build and run it.\r\n3. Move to 100% secondary monitor.\r\n\r\n**Actual result:**\r\nScrollBar is not scaled well when move from 300% primary screen to 100% secondary monitor.\r\n300% primary screen: \r\n![image](https://user-images.githubusercontent.com/86937911/217186259-18753688-b284-4563-9ee5-281a3ecd6c4d.png)\r\nmove to 100% secondary monitor\r\n![image](https://user-images.githubusercontent.com/86937911/217186659-ed6ba1b9-8e01-4c40-bdc1-0421c87af8f4.png)\r\n\r\n**Expected result:**\r\nScrollBar should be scaled well when move from 300% primary screen to 100% secondary monitor.\r\n\r\n**More info:**\r\n1. This issue doesn't repro on SystemAware and DpiUnware mode.\r\n2. The original issue: https://github.com/dotnet/winforms/issues/8270.\r\n3. https://github.com/dotnet/winforms/pull/8312 solved the problem of rectangular shadows not being displayed. But move from 300% DPI to 100% DPI, scrollbars should display the same result as 100% scrollbars. Move from 100% DPI to 300% DPI, scrollbars should display the same result as 300% scrollbars.\r\n4. This issue also occur when move from 100% primary to 300% secondary monitor.\r\n100% primary screen: \r\n![image](https://user-images.githubusercontent.com/86937911/217187226-e88c0dd9-05cc-4ddb-ad22-34639000f702.png)\r\nmove to 300% secondary monitor: \r\n![image](https://user-images.githubusercontent.com/86937911/217188159-abd8ecc0-49e0-45f6-b6d7-e935199c2198.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/8580","RelatedDescription":"Open issue \"[Multi-Monitor][PerMonitorV2] ScrollBar is not scaled well on secondary screen\" (#8580)"},{"Id":"1573852591","IsPullRequest":false,"CreatedAt":"2023-02-07T07:56:20","Actor":"Ashley-Li","Number":"8579","RawContent":null,"Title":"Form1.cs is unsaved status after reopening the form designer","State":"open","Body":"### .NET version\n\n.NET 8.0.100-preview.2.23106.11\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, it cannot repro on .NET 6.0 & 7.0.\n\n### Issue description\n\nWhen save all project, close the form designer, then reopen the form designer, the Form1.cs[Design] is unsaved state.\r\n![image](https://user-images.githubusercontent.com/56664234/217184220-c6a8d1ab-02c0-447a-99b8-4657d1b48bcd.png)\r\n\n\n### Steps to reproduce\n\n1.  Create a WinForms .NET 8.0 project.\r\n2.  Open the Smart Tag window of DataGridView, expand \"Data Source\" comboBox to click \"Add new Object Data Source…\"\r\n3.  In \"Add/Update Datasource Type\" dialog, choose a DataSource, e.g. CSharpCodeProvider to bind.\r\n4.  Save All(Ctrl+Shift+S), close the form designer, then reopen the form designer.\r\n5.  Repeat step4 twice to observe.\r\n\r\nOr\r\n\r\n1.  Extract \"[TestApp.zip](https://github.com/dotnet/winforms/files/10672691/TestApp.zip)“ and open it in VS.\r\n2.  Save All(Ctrl+Shift+S), close the form designer, then reopen the form designer.\r\n\r\n\r\n**Actual result:**\r\nThe Form1.cs[Design] is unsaved state, after step4, a dialog box pops up to save the Form1.cs file.\r\n![issue_8 0_actual](https://user-images.githubusercontent.com/56664234/217182045-ac5fbe23-f9da-4573-9f0f-28c58478377d.gif)\r\n\r\n**Expected result:**\r\nThe Form1.cs[Design] should be saved state, after step4, there's no dialog box pops up to save the Form1.cs file.\r\n![issue_7 0_expected](https://user-images.githubusercontent.com/56664234/217182013-ef1adb77-cce3-4be9-9d7d-b412e32fbd76.gif)\r\n","Url":"https://github.com/dotnet/winforms/issues/8579","RelatedDescription":"Open issue \"Form1.cs is unsaved status after reopening the form designer\" (#8579)"},{"Id":"1573438551","IsPullRequest":true,"CreatedAt":"2023-02-07T04:24:58","Actor":"MattGal","Number":"8577","RawContent":null,"Title":"Automatic Pool provider selection (Main branch)","State":"closed","Body":"Cherry pick of changes from https://github.com/dotnet/winforms/pull/8564 for main.  This will cause future release/ branches forked off from main to get this behavior.\r\n\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8577)","Url":"https://github.com/dotnet/winforms/pull/8577","RelatedDescription":"Closed or merged PR \"Automatic Pool provider selection (Main branch)\" (#8577)"},{"Id":"1573436068","IsPullRequest":false,"CreatedAt":"2023-02-06T23:14:05","Actor":"paul1956","Number":"8576","RawContent":null,"Title":"Editing with nested TableLayoutPanel adds additional Row and Column Styles whenever form is edited","State":"open","Body":"### Environment\n\nMicrosoft Visual Studio Community 2022 (64-bit) - Preview\r\nVersion 17.5.0 Preview 5.0\r\n\n\n### .NET version\n\n.New 7.0 but don't matter issue is designer.\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nBefore OOP Designer\n\n### Issue description\n\nBefore edit\r\n```\r\n        TableLayoutPanelTopEx1.ColumnStyles.Add(New ColumnStyle())\r\n        TableLayoutPanelTopEx1.ColumnStyles.Add(New ColumnStyle(SizeType.Percent, 100.0F))\r\n        TableLayoutPanelTopEx1.Dock = DockStyle.Fill\r\n        TableLayoutPanelTopEx1.LabelText = \"\"\r\n        TableLayoutPanelTopEx1.Location = New Point(3, 3)\r\n        TableLayoutPanelTopEx1.Name = \"TableLayoutPanelTopEx1\"\r\n        TableLayoutPanelTopEx1.RowCount = 1\r\n        TableLayoutPanelTopEx1.RowStyles.Add(New RowStyle(SizeType.Percent, 50.0F))\r\n```\r\nAfter any edit\r\n```\r\n        Me.TableLayoutPanelTopEx1.ColumnStyles.Add(New System.Windows.Forms.ColumnStyle())\r\n        Me.TableLayoutPanelTopEx1.ColumnStyles.Add(New System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100.0!))\r\n        Me.TableLayoutPanelTopEx1.ColumnStyles.Add(New System.Windows.Forms.ColumnStyle())\r\n        Me.TableLayoutPanelTopEx1.ColumnStyles.Add(New System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100.0!))\r\n        Me.TableLayoutPanelTopEx1.Dock = System.Windows.Forms.DockStyle.Fill\r\n        Me.TableLayoutPanelTopEx1.LabelText = \"\"\r\n        Me.TableLayoutPanelTopEx1.Location = New System.Drawing.Point(3, 3)\r\n        Me.TableLayoutPanelTopEx1.Name = \"TableLayoutPanelTopEx1\"\r\n        Me.TableLayoutPanelTopEx1.RowCount = 1\r\n        Me.TableLayoutPanelTopEx1.RowStyles.Add(New System.Windows.Forms.RowStyle())\r\n        Me.TableLayoutPanelTopEx1.RowStyles.Add(New System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50.0!))\r\n```\r\n\n\n### Steps to reproduce\n\nOpen Project, Open form1 change anything, Save and additional Row and Column Styles are added equal to the number of Rows and Columns. \r\n\r\nhttps://github.com/paul1956/WinFormsTableListViewIssue\r\n\r\n\n\n### Diagnostics\n\n```text\nNone\n```\n","Url":"https://github.com/dotnet/winforms/issues/8576","RelatedDescription":"Open issue \"Editing with nested TableLayoutPanel adds additional Row and Column Styles whenever form is edited\" (#8576)"},{"Id":"1572808667","IsPullRequest":true,"CreatedAt":"2023-02-06T15:41:16","Actor":"dkazennov","Number":"8574","RawContent":null,"Title":"Removed extra validation in flaky DataGridView unit tests.","State":"open","Body":"Fixes #7799 (the main Issue containing a complete list of flaky tests)\r\nFixes #6597\r\nFixes #6739\r\nFixes #6926 (along with #8535)\r\n\r\n## Proposed changes\r\n- This fix omits check for `invalidatedCallCount` in unstable unit tests with a commentary reference to this Issue to keep a track record (as [proposed](https://github.com/dotnet/winforms/issues/6926#issuecomment-1246567369) by @RussKie).\r\n- Theory data objects/inline data sets changed as well.\r\n\r\n**Tests changed:**\r\n\r\n- DataGridView_ColumnHeadersHeightSizeMode_SetNonResizeThenResize_RestoresOldValue\r\n- DataGridView_ColumnHeadersHeightSizeMode_SetWithHandle_GetReturnsExpected\r\n- DataGridView_ColumnHeadersHeight_SetWithHandle_GetReturnsExpected\r\n- DataGridView_ColumnHeadersHeight_SetWithParentWithHandle_GetReturnsExpected\r\n- DataGridView_OnColumnHeadersHeightChanged_InvokeWithHandle_CallsColumnHeadersHeightChanged\r\n- DataGridView_OnColumnHeadersHeightSizeModeChanged_InvokeWithHandle_CallsColumnHeadersHeightSizeModeChanged\r\n- DataGridView_OnRowHeadersWidthChanged_InvokeWithHandle_CallsRowHeadersWidthChanged\r\n- DataGridView_OnRowHeadersWidthSizeModeChanged_InvokeWithHandle_CallsRowHeadersWidthSizeModeChanged\r\n- DataGridView_Parent_SetWithHandle_GetReturnsExpected\r\n- DataGridView_RowHeadersWidthSizeMode_SetNonResizeThenResize_RestoresOldValue\r\n- DataGridView_RowHeadersWidthSizeMode_SetWithHandle_GetReturnsExpected\r\n- DataGridView_RowHeadersWidth_SetWithHandle_GetReturnsExpected\r\n- DataGridView_RowHeadersWidth_SetWithParentWithHandle_GetReturnsExpected\r\n- DataGridView_TopLeftHeaderCell_GetWithHandle_ReturnsExpected\r\n- DataGridView_TopLeftHeaderCell_SetWithHandle_GetReturnsExpected\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- No impact. This fix affects only unit tests.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit tests.\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- dotnet 8.0.100-alpha.1.22607.6\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8574)","Url":"https://github.com/dotnet/winforms/pull/8574","RelatedDescription":"Open PR \"Removed extra validation in flaky DataGridView unit tests.\" (#8574)"},{"Id":"1572799504","IsPullRequest":true,"CreatedAt":"2023-02-06T15:35:10","Actor":"DJm00n","Number":"8573","RawContent":null,"Title":"Fix System.Windows.Forms.InputLanguage.FromCulture() for languages without LANGID value","State":"open","Body":"Some Windows input languages do not have a unique pre-assigned LANGID to identify them and [instead use a value of `0x0c00` (LOCALE_CUSTOM_DEFAULT) or `0x1000` (LOCALE_CUSTOM_UNSPECIFIED)](https://learn.microsoft.com/globalization/locale/locale-names#the-deprecation-of-lcids).\r\n\r\nWindows tries to provide a [unique transient value in these cases](https://learn.microsoft.com/windows/win32/winmsg/wm-inputlangchange) in the HKL lowerword, but these values can't be used to identify the keyboard layout directly (we must convert it to locale name as soon as possible and use locale names where possible), and we can't get the InputLanguage correctly in the FromCulture method.\r\n\r\nSome [background info on CultureInfo.KeyboardLayoutId](http://archives.miloush.net/michkap/archive/2008/02/25/7893424.html). Long story short - it should be avoided. :)\r\n\r\n## Proposed changes\r\n\r\n- Compare locale names instead of [deprecated LANGID/LCIDs](https://learn.microsoft.com/globalization/locale/locale-names#the-deprecation-of-lcids) to fix these corner cases.\r\n\r\n## Customer Impact\r\n\r\n- InputLanguage.FromCulture() now should properly work for these locales:\r\n\r\n```\r\n[localeName] [lcId]=[langId]:[keyboardId]\r\njv 0x1000=0c00:00000409\r\njv-Java 0x1000=0c00:00110c00\r\njv-Java-ID 0x1000=0c00:00110c00\r\njv-Latn 0x1000=0c00:00000409\r\njv-Latn-ID 0x1000=0c00:00000409\r\nmg 0x1000=0c00:0000040c\r\nmg-MG 0x1000=0c00:0000040c\r\nnqo 0x1000=0c00:00090c00\r\nnqo-GN 0x1000=0c00:00090c00\r\nsn 0x1000=0c00:00000409\r\nsn-Latn 0x1000=0c00:00000409\r\nsn-Latn-ZW 0x1000=0c00:00000409\r\nzgh 0x1000=0c00:0000105f\r\nzgh-Tfng 0x1000=0c00:0000105f\r\nzgh-Tfng-Ma 0x1000=0c00:0000105f\r\n```\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/1285934/217013926-7c588360-cceb-4168-9e74-7e4a94c339ba.png)\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/1285934/217013572-f26ff769-9a73-44fa-a9f0-706296dde192.png)\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Install \"N’Ko\" input language (or any other from the list above) in Windows settings\r\n- Set it as default input language in Windows settings\r\n- Try to run `InputLanguage_FromCulture_Roundtrip_Success` test and see the results\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s)\r\n\r\n```\r\ndotnet --info\r\n.NET SDK:\r\n Version:   8.0.100-alpha.1.23061.8\r\n Commit:    c8d103ed3c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19044\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   G:\\project\\winforms\\.dotnet\\sdk\\8.0.100-alpha.1.23061.8\\\r\n\r\nHost:\r\n  Version:      8.0.0-alpha.1.23079.4\r\n  Architecture: x64\r\n  Commit:       a34291586e\r\n\r\n.NET SDKs installed:\r\n  8.0.100-alpha.1.22512.5 [G:\\project\\winforms\\.dotnet\\sdk]\r\n  8.0.100-alpha.1.22622.3 [G:\\project\\winforms\\.dotnet\\sdk]\r\n  8.0.100-alpha.1.23061.8 [G:\\project\\winforms\\.dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 8.0.0-alpha.1.22510.12 [G:\\project\\winforms\\.dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0-alpha.1.22615.1 [G:\\project\\winforms\\.dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0-alpha.1.23058.7 [G:\\project\\winforms\\.dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 8.0.0-alpha.1.22507.5 [G:\\project\\winforms\\.dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0-alpha.1.22605.1 [G:\\project\\winforms\\.dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0-alpha.1.22627.5 [G:\\project\\winforms\\.dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0-alpha.1.23057.5 [G:\\project\\winforms\\.dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0-alpha.1.23058.2 [G:\\project\\winforms\\.dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0-alpha.1.23079.4 [G:\\project\\winforms\\.dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0-alpha.1.22507.3 [G:\\project\\winforms\\.dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0-alpha.1.22614.1 [G:\\project\\winforms\\.dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0-alpha.1.23057.1 [G:\\project\\winforms\\.dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  DOTNET_ROOT       [G:\\project\\winforms\\.dotnet]\r\n\r\nglobal.json file:\r\n  G:\\project\\winforms\\global.json\r\n```\r\n\r\nRelated issue in Runtime: https://github.com/dotnet/runtime/issues/81633","Url":"https://github.com/dotnet/winforms/pull/8573","RelatedDescription":"Open PR \"Fix System.Windows.Forms.InputLanguage.FromCulture() for languages without LANGID value\" (#8573)"},{"Id":"1571661805","IsPullRequest":false,"CreatedAt":"2023-02-05T23:29:36","Actor":"RussKie","Number":"8572","RawContent":null,"Title":"[Tracking] WCAF* analyzer diagnostics needs to be documented","State":"open","Body":"The [analyzer dignostics](https://github.com/dotnet/winforms/blob/a8f51bd3d2690890a6ea2ae0d8d084aab0a1b926/docs/list-of-diagnostics.md#analyzer-warnings) need to be documented at [https://learn.microsoft.com](https://learn.microsoft.com/dotnet/desktop/winforms/wfdev-diagnostics/obsoletions-overview) and the links updated at aka.ms.\r\n","Url":"https://github.com/dotnet/winforms/issues/8572","RelatedDescription":"Open issue \"[Tracking] WCAF* analyzer diagnostics needs to be documented\" (#8572)"},{"Id":"1571180070","IsPullRequest":true,"CreatedAt":"2023-02-05T23:05:52","Actor":"dotnet-maestro[bot]","Number":"8569","RawContent":null,"Title":"[release/8.0-preview1] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4df5b787-1726-4081-4cf7-08dafe3cf288)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 4df5b787-1726-4081-4cf7-08dafe3cf288\r\n- **Build**: 20230204.3\r\n- **Date Produced**: February 4, 2023 11:42:40 PM UTC\r\n- **Commit**: 6507a44770f6648ca8da6ebbd7fe804ee5f91db4\r\n- **Branch**: refs/heads/release/8.0-preview1\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.CodeDom**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Text.Json**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.1.23081.6 to 8.0.0-preview.1.23104.3][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/1b2c4a9...6507a44\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4df5b787-1726-4081-4cf7-08dafe3cf288)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8569)","Url":"https://github.com/dotnet/winforms/pull/8569","RelatedDescription":"Closed or merged PR \"[release/8.0-preview1] Update dependencies from dotnet/runtime\" (#8569)"},{"Id":"1571309458","IsPullRequest":true,"CreatedAt":"2023-02-05T08:20:52","Actor":"gpetrou","Number":"8571","RawContent":null,"Title":"Use TabPage generic list instead of array in TabControl","State":"open","Body":"## Proposed changes\r\n\r\n- Use TabPage generic list instead of array in TabControl.\r\n- Addresses some of the feedback in https://github.com/dotnet/winforms/pull/7316.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8571)","Url":"https://github.com/dotnet/winforms/pull/8571","RelatedDescription":"Open PR \"Use TabPage generic list instead of array in TabControl\" (#8571)"},{"Id":"1571295349","IsPullRequest":true,"CreatedAt":"2023-02-05T07:13:20","Actor":"gpetrou","Number":"8570","RawContent":null,"Title":"Enable nullability in some ToolStrip members","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in some ToolStrip members.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8570)","Url":"https://github.com/dotnet/winforms/pull/8570","RelatedDescription":"Open PR \"Enable nullability in some ToolStrip members\" (#8570)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-02-09T03:30:33.9435221Z","RunDurationInMilliseconds":537}