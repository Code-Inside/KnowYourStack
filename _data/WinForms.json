{"Data":{"GitHub":{"Issues":[{"Id":"1058032020","IsPullRequest":true,"CreatedAt":"2021-11-19T01:27:48","Actor":"RussKie","Number":"6203","RawContent":null,"Title":"(Servicing) Set the font after we set the DPI scaling, as it affects how we scale the font","State":"open","Body":"\r\nResolves #6191\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n## Proposed changes\r\n\r\n-  Set the font after we set the DPI scaling, as it affects how we scale the font.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customer using DPI scaling can use the new [application bootstrap functionality](https://aka.ms/applicationconfiguration) introduced in .NET 6.0.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6203)","Url":"https://github.com/dotnet/winforms/pull/6203","RelatedDescription":"Open PR \"(Servicing) Set the font after we set the DPI scaling, as it affects how we scale the font\" (#6203)"},{"Id":"1058015062","IsPullRequest":true,"CreatedAt":"2021-11-19T00:56:40","Actor":"RussKie","Number":"6202","RawContent":null,"Title":"Set the font after we set the DPI scaling, as it affects how we scale the font","State":"open","Body":"\r\n\r\nResolves #6191\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n## Proposed changes\r\n\r\n-  Set the font after we set the DPI scaling, as it affects how we scale the font.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customer using DPI scaling can use the new [application bootstrap functionality](https://aka.ms/applicationconfiguration) introduced in .NET 6.0.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6202)","Url":"https://github.com/dotnet/winforms/pull/6202","RelatedDescription":"Open PR \"Set the font after we set the DPI scaling, as it affects how we scale the font\" (#6202)"},{"Id":"1051349560","IsPullRequest":false,"CreatedAt":"2021-11-18T23:31:34","Actor":"ghost","Number":"6169","RawContent":null,"Title":"toolstripstatuslabel question","State":"closed","Body":"Hi\r\n\r\nYou just close this issue here https://github.com/dotnet/winforms/issues/6160\r\nwithout any explanation.\r\n\r\nWhat's the logic behind using \"&&\" in order to get \"&\" displayed on a toolstripstatuslabel ?\r\nWhy is this changed compared to .net 4.8?\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6169","RelatedDescription":"Closed issue \"toolstripstatuslabel question\" (#6169)"},{"Id":"1054404629","IsPullRequest":true,"CreatedAt":"2021-11-18T20:57:13","Actor":"WPMGPRoSToTeMa","Number":"6188","RawContent":null,"Title":"Adding prevention of label editing when clicking on subitems of ListView","State":"closed","Body":"Fixes #4816. ListView allows editing the label by clicking on any subitem of a row. On the other hand, Windows Explorer allows label editing only by clicking on the first subitem (which is actually a label) of a row. Windows Explorer behavior should be more appropriate for a common user. The logic of the label editing is located in ComCtl32.dll which is provided by Windows and therefore can't be changed on our side. In order to change the behavior we can rely on the fact that this internal logic sets a timer before an actual editing begins.\r\n\r\nListView provides a standard way to cancel a pending label edit - `LVM_CANCELEDITLABEL` message. The problem is that this message is only implemented in 6.0 version of ComCtl32.dll. It also doesn't work as expected under 6.0, so it can't be actually used.\r\n\r\nAnother way is to cancel the timer using `KillTimer`. The problem with this approach is that the timer can be already elapsed at the moment of handling by our code (the message is already on the queue, so `KillTimer` won't help) because of the OS scheduler. Another problem with this approach is that it is not known what side effects may happen when the timer is cancelled by the third-party code.\r\n\r\nWe can also invoke the timer by pushing `WM_TIMER` message to the queue. This will start label editing immediately, but we need a way to block it. One way is to temporarily change the LabelEdit property - disable it before `WM_TIMER` is sent and enable it after the timer was handled. This works, but may cause redrawing. Another way is to handle `LVN_BEGINLABELEDITW` message which allows to cancel label editing. This is actually the approach which is implemented here, we cancel label editing only when we're sending `WM_TIMER` message. This way we don't have a potential redrawing issue.\r\n\r\n\r\n## Proposed changes\r\n\r\n- Prevention of label editing when clicking on subitems of a row in ListView\r\n\r\n## Customer Impact\r\n\r\n- Clicking on ListView subitems will no longer start label editing (Windows Explorer behavior)\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![](http://g.recordit.co/zakqSfaw76.gif)\r\n\r\n### After\r\n\r\n![](http://g.recordit.co/SCi6WVqVzz.gif)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n- Unit-tests\r\n- CTI\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- Microsoft Windows [Version 10.0.19043.1348]\r\n- .NET 7.0.0-alpha.1.21561.1\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6188)","Url":"https://github.com/dotnet/winforms/pull/6188","RelatedDescription":"Closed or merged PR \"Adding prevention of label editing when clicking on subitems of ListView\" (#6188)"},{"Id":"1057475153","IsPullRequest":false,"CreatedAt":"2021-11-18T15:16:21","Actor":"filipnavara","Number":"6201","RawContent":null,"Title":"Fix in #6198 causes assigned fonts to be inadvertently disposed ","State":"open","Body":"There's a new regression introduced in #6198 and described in comments [here](https://github.com/dotnet/winforms/issues/6173#issuecomment-972904545).\r\n\r\nWe assign a custom `Font` to a control that is propagated by the new code into `ScalableControlFont`:\r\nhttps://github.com/dotnet/winforms/blob/29e805d6d3e60144a31dad96d848cdcfe454e4eb/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs#L11421\r\n\r\nOnce the form with the a control moves to a different display (with different assigned DPI) it receives `WmDpiChangedBeforeParent` and disposes the font assigned by the application:\r\nhttps://github.com/dotnet/winforms/blob/29e805d6d3e60144a31dad96d848cdcfe454e4eb/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs#L12278-L12282\r\n\r\nThe application will crash at some later time when the font is accessed (eg. by setting it to another control, form).","Url":"https://github.com/dotnet/winforms/issues/6201","RelatedDescription":"Open issue \"Fix in #6198 causes assigned fonts to be inadvertently disposed \" (#6201)"},{"Id":"1057335949","IsPullRequest":true,"CreatedAt":"2021-11-18T13:42:17","Actor":"dotnet-maestro[bot]","Number":"6200","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211118.1\r\n- **Date Produced**: November 18, 2021 11:21:06 AM UTC\r\n- **Commit**: d9afc1ecd6f22d836e1d7665847917aa09f580e9\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21567.1 to 7.0.0-alpha.1.21568.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/10e107d...d9afc1e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6200)","Url":"https://github.com/dotnet/winforms/pull/6200","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6200)"},{"Id":"1054359715","IsPullRequest":false,"CreatedAt":"2021-11-18T00:23:20","Actor":"TempeBrennan","Number":"6186","RawContent":null,"Title":"IDesigner interface deosn't take effect in .net core","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n* 6.0.100-rc.2.21505.57\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nI can see \"IDesigner\" interface is available in official document\r\n[MS document](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.idesigner?view=net-5.0)\r\n![image](https://user-images.githubusercontent.com/51563666/141883724-10f651da-5dff-4490-b28e-d6412208d1b0.png)\r\n\r\n![image](https://user-images.githubusercontent.com/51563666/141883467-9b29053d-b018-4a04-83a8-87dccabf817b.png)\r\n\r\nI copy example code to a .net framework project and a .net6 project.\r\n```\r\n[DesignerAttribute(typeof(ExampleIDesigner))]\r\n    public class TestControl : System.Windows.Forms.UserControl\r\n    {\t\t\t\t\r\n        public TestControl()\r\n        {\t\r\n        }\r\n    }\r\n\r\n public class ExampleIDesigner : System.ComponentModel.Design.IDesigner\r\n    {\r\n         // ...\r\n    }\r\n```\r\nWhen I test in Visual Studio 2022, I found .net6 designer doesn't work. Is this a bug?\r\nOr is Visual Studio 2022 bug? Could you please help me confirm it? Thanks a lot!\r\n\r\n**Expected behavior:**\r\n<!--\r\n    Provide details on expected behavior with screenshots/GIF, where ever possible.\r\n -->\r\nWhen right click testControl1, there is a menu item \"Display Component Name\" shows like .NET Framework\r\n\r\n**Minimal repro:**\r\n<!--\r\n    Provide step by step guide to repro this issue.  Incase repro steps are complex, It would be helpful if \r\n    you attach a GIF with repro actions. Attaching a sample app to repro the issue will help speed up the \r\n    resolution. \r\n -->\r\n\r\n![bug3](https://user-images.githubusercontent.com/51563666/141883672-cd299a05-fce2-4f2e-ba59-e2522323fe4a.gif)\r\n[TestDesignerFeature.zip](https://github.com/dotnet/winforms/files/7542823/TestDesignerFeature.zip)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6186","RelatedDescription":"Closed issue \"IDesigner interface deosn't take effect in .net core\" (#6186)"},{"Id":"1056111624","IsPullRequest":true,"CreatedAt":"2021-11-17T22:43:59","Actor":"dotnet-maestro[bot]","Number":"6196","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211117.1\r\n- **Date Produced**: November 17, 2021 12:10:15 PM UTC\r\n- **Commit**: 10e107debae28de4bd1e710cfe448be3c293e841\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21562.1 to 7.0.0-alpha.1.21567.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/35704e4...10e107d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6196)","Url":"https://github.com/dotnet/winforms/pull/6196","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6196)"},{"Id":"1056554285","IsPullRequest":true,"CreatedAt":"2021-11-17T22:43:25","Actor":"dreddy-work","Number":"6198","RawContent":null,"Title":"Fixing scaling issue on explicitly set Font containers but Inherit AutoScaleMode","State":"closed","Body":"Fixes #6173\r\n\r\n\r\n## Proposed changes\r\n\r\nContainer controls whose Font is explicitly set are not scaled well if they inherit `AutoScaleMode `from parent. Inherited `AutoScaleMode `containers use `AutoScaleFactor `from parents to scale themselves. However, in a `PerMonitorV2 `mode applications, parent receive the `DpiChangedEvent `after all their children receive it and scale themselves. `ContainerControls `that inherit scaling, will end up using `AutoScaleFactor `from parent that was not yet updated to the new Dpi as Parent yet to receive the DPI event. To fix this, we are tracking such containers with `IsDpiChangeScalingRequired `flag and scale them once the Parent `AutoScaleFactor ` is updated.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6198)","Url":"https://github.com/dotnet/winforms/pull/6198","RelatedDescription":"Closed or merged PR \"Fixing scaling issue on explicitly set Font containers but Inherit AutoScaleMode\" (#6198)"},{"Id":"1051915203","IsPullRequest":false,"CreatedAt":"2021-11-17T22:43:24","Actor":"filipnavara","Number":"6173","RawContent":null,"Title":"PerMonitorV2: DPI scaling not firing ScaleControl when custom Font is used","State":"closed","Body":"* .NET Core Version: 6.0, 7.0/main\r\n\r\n* Have you experienced this same bug with .NET Framework?: No (also works in .NET 5)\r\n\r\n**Problem description:**\r\n\r\nThis is variation of problem reported in #6152 with the twist of setting `Font` on one of the controls. It is a regression from .NET 5.\r\n\r\n**Expected behavior:**\r\n\r\n`ScaleControl` is called consistently when moving window to display with different DPI.\r\n\r\n**Minimal repro:**\r\n\r\n[WinFormsApp3.zip](https://github.com/dotnet/winforms/files/7527473/WinFormsApp3.zip)\r\n\r\nSame repro steps as #6152. The difference is that a custom font is set on one of the `UserControl`s.\r\n","Url":"https://github.com/dotnet/winforms/issues/6173","RelatedDescription":"Closed issue \"PerMonitorV2: DPI scaling not firing ScaleControl when custom Font is used\" (#6173)"},{"Id":"1053485372","IsPullRequest":true,"CreatedAt":"2021-11-17T20:41:57","Actor":"DmitryGorokhov","Number":"6179","RawContent":null,"Title":"Fixing highlighting of property grid item dropdown in the Inspect","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3796 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Refactored `DropDownControl` method: set sending a focus and change expand-collapse state events before focusing on dropdown control.  \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Has a correct highlighting of opened and focused dropdown in the Inspect.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- No\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nNo highlighting on the focused dropdown of property grid item in the Inspect.\r\n\r\n![gifBefore](https://user-images.githubusercontent.com/62929087/91526420-28c92c80-e936-11ea-8c84-e8d889d0efb8.gif)\r\n\r\n### After\r\n\r\nHas highlighting on the focused dropdown of property grid item in the Inspect.\r\n\r\n![HighlightDropdown](https://user-images.githubusercontent.com/58004471/141765369-e0015d1a-9f1c-44f5-8dfb-6ac56f542df8.gif)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual\r\n- Unit\r\n- CTI\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n- Inspect\r\n- Accessibility Insights\r\n- Narrator\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- dotnet version: 6.0.100\r\n- OS version: 10.0.19043\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6179)","Url":"https://github.com/dotnet/winforms/pull/6179","RelatedDescription":"Closed or merged PR \"Fixing highlighting of property grid item dropdown in the Inspect\" (#6179)"},{"Id":"1056566651","IsPullRequest":false,"CreatedAt":"2021-11-17T19:51:51","Actor":"dreddy-work","Number":"6199","RawContent":null,"Title":"Cleanup flags and use bitfields wherever possible in ContainerControl class ","State":"open","Body":"This is a tracking bug for the comment on https://github.com/dotnet/winforms/pull/6198#pullrequestreview-809063648.\r\n\r\nGoal is to move some of the Boolean flags in the ContainerControl Class to a bitfields to improve performance.","Url":"https://github.com/dotnet/winforms/issues/6199","RelatedDescription":"Open issue \"Cleanup flags and use bitfields wherever possible in ContainerControl class \" (#6199)"},{"Id":"1056540420","IsPullRequest":false,"CreatedAt":"2021-11-17T19:31:18","Actor":"dreddy-work","Number":"6197","RawContent":null,"Title":"Remove or Update Obsolete property AssemblyName.ProcessorArchitecture use in Winforms","State":"open","Body":"This is a tracking bug to validate and remove use of obsolete property `AssemblyName.ProcessorArchitecture` in Winforms.\r\nCurrently (.NET 4. 0 and above versions), `AssemblyName.ProcessorArchitecture` is always set to None for reference assemblies. However, if we load an explicit assembly, we may get the architecture that the binary was targeting. Given this property is used in public API `GetResourceStream`, we need to validate full scenarios before replacing/removing its use.","Url":"https://github.com/dotnet/winforms/issues/6197","RelatedDescription":"Open issue \"Remove or Update Obsolete property AssemblyName.ProcessorArchitecture use in Winforms\" (#6197)"},{"Id":"1056110315","IsPullRequest":true,"CreatedAt":"2021-11-17T18:57:35","Actor":"dotnet-maestro[bot]","Number":"6195","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20211116.10\r\n- **Date Produced**: November 17, 2021 5:32:15 AM UTC\r\n- **Commit**: 53cc1bc2e555aa7aea95884575d22e21d63708cf\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.21559.3 to 7.0.0-beta.21566.10][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 7.0.0-beta.21559.3 to 7.0.0-beta.21566.10][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.21559.3 to 7.0.0-beta.21566.10][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 7.0.0-beta.21559.3 to 7.0.0-beta.21566.10][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 7.0.0-beta.21559.3 to 7.0.0-beta.21566.10][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.21559.3 to 7.0.0-beta.21566.10][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/fecf65b...53cc1bc\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6195)","Url":"https://github.com/dotnet/winforms/pull/6195","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6195)"},{"Id":"1056062241","IsPullRequest":true,"CreatedAt":"2021-11-17T12:16:52","Actor":"SergeySmirnov-Akvelon","Number":"6194","RawContent":null,"Title":"Fixing incorrect rendering of button borders for Windows 11","State":"open","Body":"Fixes #6187\r\n\r\n## Proposed changes\r\n- The issue is reproducible because in the original fix we were drawing a rectangle over the border of the button. Unfortunately, Windows 11 uses standard buttons with rounded edges, so the previous fix is not suitable.\r\n\r\n- As a fix, logic was added that changes the color of the border using \"CompatibleDC\". This saves us from having to draw different borders for Windows 10 and Windows 11. In addition, we do not have special methods for drawing a rectangle with rounded edges. \r\n\r\n## Customer Impact\r\n**Before fix:**\r\n![image](https://user-images.githubusercontent.com/23376742/142198977-e399adbc-bc2d-4087-a0e5-6a15761d6e93.png)\r\n\r\n**After fix:**\r\n![image](https://user-images.githubusercontent.com/23376742/142198937-ce14f3f9-83a1-41c7-86e3-11f014442075.png)\r\n\r\n\r\n## Regression? \r\n- Yes (from #6059)\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- Manual testing \r\n- CTI team\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.22000.318]\r\n- .NET Core SDK: 7.0.0-alpha.1.21562.1\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6194)","Url":"https://github.com/dotnet/winforms/pull/6194","RelatedDescription":"Open PR \"Fixing incorrect rendering of button borders for Windows 11\" (#6194)"},{"Id":"1056000935","IsPullRequest":false,"CreatedAt":"2021-11-17T11:11:02","Actor":"AmalRajUmapathySelvam","Number":"6193","RawContent":null,"Title":"Couldn't edit collection property in designer if collection editor is implemented to process with different class types","State":"open","Body":"* .NET Core Version: **.NET 5.0**\r\n\r\n* Have you experienced this same bug with .NET Framework?: **No**\r\n\r\n**Problem description:**\r\n\r\nCollection editor for a custom collection is not shown in NET 5.0, whereas it is shown and is working fine in NET Framework, if the custom collection class has different derived classes. \r\n\r\n**Expected behavior:**\r\nCollection editor in the CustomCollection property should be visible and should properly in NET 5.0 like in NET Framework.\r\n\r\n**Screenshot for Reference:**\r\n<img width=\"222\" alt=\"CustomCollectionEditor\" src=\"https://user-images.githubusercontent.com/44425449/142191041-c29e3d35-7800-4d7f-b3a6-72798c6ebd11.png\">\r\n\r\n**Minimal repro:**\r\n* Open the attached samples in VS.\r\n* Each has a CustomControl added in the form.\r\n* CustomControl has a property called CustomCollection which is of type implemented from ObservableCollection of BaseClass. And two more sub classes are derived from BaseClass called Derived1 and Derived2.\r\n* Move to CustomCollection property in designer and try to add a objects in type from both Derived1 and Derived2 types.\r\n* Collection editor icon itself not shown in NET 50 and working fine in NET Framework.\r\n\r\n**Samples:**\r\n[NETFramework_App.zip](https://github.com/dotnet/winforms/files/7554123/NETFramework_App.zip)\r\n[NETCORE_App.zip](https://github.com/dotnet/winforms/files/7554125/NETCORE_App.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/6193","RelatedDescription":"Open issue \"Couldn't edit collection property in designer if collection editor is implemented to process with different class types\" (#6193)"},{"Id":"1055069552","IsPullRequest":true,"CreatedAt":"2021-11-16T16:18:46","Actor":"WPMGPRoSToTeMa","Number":"6192","RawContent":null,"Title":"Fixing `RuntimeId` for system accessible wrapper in AccessibleObject","State":"open","Body":"Fixes #6165.\r\n\r\n\r\n## Proposed changes\r\n\r\n- Added a branch for `systemWrapper` in `AccessibleObject.RuntimeId` with an empty array return value\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- There is no impact as release builds don't have assertions compiled\r\n\r\n## Regression? \r\n\r\n- Yes (from .NET 6)\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n- Unit-tests\r\n- CTI (planned)\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n-  Microsoft Windows [Version 10.0.19043.1288]\r\n- .NET 7.0.0-alpha.1.21551.1\r\n\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6192)","Url":"https://github.com/dotnet/winforms/pull/6192","RelatedDescription":"Open PR \"Fixing `RuntimeId` for system accessible wrapper in AccessibleObject\" (#6192)"},{"Id":"1055054396","IsPullRequest":false,"CreatedAt":"2021-11-16T16:04:53","Actor":"deng0","Number":"6191","RawContent":null,"Title":"ApplicationConfiguration: bug with DPI scaling when ApplicationDefaultFont is set","State":"open","Body":"* .NET Core Version: \r\n6.0.0\r\n\r\n**Problem description:**\r\nWhen ApplicationDefaultFont is set in the csproj, there is a problem with the autogenerated ApplicationConfiguration, namely that Application.SetDefaultFont is called before Application.SetHighDpiMode, which breaks DPI scaling.\r\nWhen ApplicationConfiguration.Initialize() is not used and the commands are called in the correct order instead, DPI scaling is working correctly.\r\n\r\n**Expected behavior:**\r\nNormally I would expect that the order of the commands would be irrelevant, but it's probably easier to fix the order of the commands generated in the ApplicationConfiguration.\r\n\r\n**Minimal repro:**\r\nI've attached simple repro project. \r\n[DefaultFontDpiScalingBug.zip](https://github.com/dotnet/winforms/files/7548000/DefaultFontDpiScalingBug.zip)\r\nWhen useApplicationConfiguration is set to true, DPI scaling is broken.\r\nSimply set your Windows Scaling to 150% and start this project.\r\nOnly when useApplicationConfiguration is set to false, the form and the textbox are correctly scaled up.","Url":"https://github.com/dotnet/winforms/issues/6191","RelatedDescription":"Open issue \"ApplicationConfiguration: bug with DPI scaling when ApplicationDefaultFont is set\" (#6191)"},{"Id":"1054948204","IsPullRequest":false,"CreatedAt":"2021-11-16T14:30:06","Actor":"fivage","Number":"6190","RawContent":null,"Title":"form.ShowDialog(owner) with owner that is Topmost stays hidden behind the owner","State":"open","Body":"* .NET Core Version: 5\r\n\r\n* Have you experienced this same bug with .NET Framework?: No, works correctly in 4.7.2\r\n\r\n**Problem description:**\r\n\r\nform.ShowDialog(owner) with owner that is Topmost stays hidden behind the owner.\r\n\r\n**Expected behavior:**\r\n\r\nIt should be put in front of the owner\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/6190","RelatedDescription":"Open issue \"form.ShowDialog(owner) with owner that is Topmost stays hidden behind the owner\" (#6190)"},{"Id":"1054491543","IsPullRequest":false,"CreatedAt":"2021-11-16T06:19:15","Actor":"ahdung","Number":"6189","RawContent":null,"Title":"Application wide private fonts","State":"open","Body":"Consider this API:\r\n```c#\r\nApplication.Fonts.Add(fontFileNameOrByteArrayOrStream);\r\n```\r\nlike `PrivateFontCollection.AddFontFile`, but more useful, `PrivateFontCollection` not friendly for third-party components, no source code, it maybe load font from configuration file, use `FontConverter` convert from `string`, the finally is `new Font(string)`, but this way is not respect private fonts.\r\n\r\nSo we need a way to set applicationOrProcess-wide private fonts, and let all font contructors to respect it.","Url":"https://github.com/dotnet/winforms/issues/6189","RelatedDescription":"Open issue \"Application wide private fonts\" (#6189)"},{"Id":"1054360320","IsPullRequest":false,"CreatedAt":"2021-11-16T02:19:51","Actor":"RussKie","Number":"6187","RawContent":null,"Title":"Incorrect rendering of button borders","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Version: 7.0 Preview1\r\n\r\n**Problem description:**\r\n\r\nhttps://github.com/dotnet/winforms/pull/6059 updated the colour of the `Button`'s borders, however it regressed the rendering on W11\r\n\r\nHere's .NET 7.0 vs .NET 6.0\r\n![image](https://user-images.githubusercontent.com/4403806/141871191-4bedd74e-88f9-4ff7-b693-8dac5afdb48e.png)\r\n...magnified:\r\n![image](https://user-images.githubusercontent.com/4403806/141883762-b6651b7f-369b-4857-bbcf-98ea7f974661.png)\r\n\r\n\r\n**Expected behavior:**\r\n\r\nThe borders are rendered correctly\r\n","Url":"https://github.com/dotnet/winforms/issues/6187","RelatedDescription":"Open issue \"Incorrect rendering of button borders\" (#6187)"},{"Id":"1054015964","IsPullRequest":false,"CreatedAt":"2021-11-16T00:01:39","Actor":"dakusan","Number":"6181","RawContent":null,"Title":"WinForms TextBox Caret does not blink","State":"closed","Body":"I'm using .NET Core 3.1, but another user on StackOverflow reported the same problem in .NET 5. And one user reported “Mine blinks 5-6 times then stops blinking.”.\r\n\r\nI have a System.Windows.Forms.TextBox that I added to the form through the designer in Visual Studio 2019 C# to a “Windows Forms App (.NET Core)” project. The caret just stays solid and does not blink. The Win32 APIs don't seem to help and I can't find anything on the System.Windows.Forms.TextBox or its parent classes that may help.\r\n\r\nTo reproduce doesn't require anything more than adding a TextBox onto a Form.\r\n\r\n### Further technical details\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.401\r\n Commit:    5b6f5e5005\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.7\r\n  Commit:  fcfdef8d6b\r\n\r\n.NET Core SDKs installed:\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]","Url":"https://github.com/dotnet/winforms/issues/6181","RelatedDescription":"Closed issue \"WinForms TextBox Caret does not blink\" (#6181)"},{"Id":"1054034583","IsPullRequest":true,"CreatedAt":"2021-11-15T19:42:52","Actor":"dreddy-work","Number":"6182","RawContent":null,"Title":"Fixing scaling issue on explicitly set Font containers but still Inherit AustoScaleMode.","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #6173\r\n\r\n\r\n## Proposed changes\r\n\r\nContainer controls whose Font is explicitly set are not scaled well if they inherit `AutoScaleMode `from parent. Inherited `AutoScaleMode `containers use `AutoScaleFactor `from parents to scale themselves. However, in a `PerMonitorV2 `mode applications, parent receive the `DpiChangedEvent `after all their children receive it and scale themselves. `ContainerControls `that inherit scaling, will end up using `AutoScaleFactor `from parent that was not yet updated to the new Dpi as Parent yet to receive the DPI event. To fix this, we are tracking such containers with `IsDpiChangeScalingRequired `flag and scale them once the Parent `AutoScaleFactor ` is updated.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nCustomers with PerMonitorV2 mode applications migrating from .NET 5.0 to .NET 60 would experience regression in scaling the Winforms applications on higher DPI settings.\r\n\r\n## Regression? \r\n\r\n- Yes from .NET 5.0. Though we do not fully support PerMonitorV2 mode apps in WinForms yet, customers have been developing them and using work arounds where ever needed. \r\n\r\n## Risk\r\n\r\nLow. Majority of the changes made are in `Permonv2 `mode code path.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Customer applications validation.\r\n- Manual validation by CTI for HDPI scenarios.\r\n- Running existing automation with the private binaries shared\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6182)","Url":"https://github.com/dotnet/winforms/pull/6182","RelatedDescription":"Open PR \"Fixing scaling issue on explicitly set Font containers but still Inherit AustoScaleMode.\" (#6182)"},{"Id":"1053743440","IsPullRequest":true,"CreatedAt":"2021-11-15T14:41:50","Actor":"Danil-Andrianov","Number":"6180","RawContent":null,"Title":"Rewrite maui tests","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3617\r\n\r\n\r\n## Proposed changes\r\n\r\n- MAUI tests was removed\r\n- Integration tests were added instead of them\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual\r\n- CTI\r\n\r\n\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- OS version: 10.0.19042.1348\r\n- .NET 6.0.100-rc.2.21505.57\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6180)","Url":"https://github.com/dotnet/winforms/pull/6180","RelatedDescription":"Open PR \"Rewrite maui tests\" (#6180)"},{"Id":"1052983203","IsPullRequest":false,"CreatedAt":"2021-11-15T03:39:46","Actor":"mottykohn","Number":"6176","RawContent":null,"Title":"For control Name use nameof instead of hardcoding","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n<!--\r\n    A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n  -->\r\nThe generates code-behind for any given control looks like this\r\n```\r\n            // \r\n            // SelectAll\r\n            // \r\n            this.SelectAll.Dock = System.Windows.Forms.DockStyle.Left;\r\n            this.SelectAll.Location = new System.Drawing.Point(0, 0);\r\n            this.SelectAll.Name = \"SelectAll\";\r\n            this.SelectAll.Size = new System.Drawing.Size(147, 32);\r\n            this.SelectAll.TabIndex = 1;\r\n            this.SelectAll.Text = \"Select All\";\r\n            this.SelectAll.UseVisualStyleBackColor = true;\r\n\r\n```\r\nThe name is hard-coded. When renaming a control using f2 or ctrl-r-r you need to update the hard coded name.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\nWas wondering if it would be possible the generate code the looks like this\r\n```\r\n            this.SelectAll.Name = nameof(this.SelectAll);\r\n```\r\nI realize that this may not be that simple as I'm not sure how the designer works so maybe it won't pick up changes to such a construct. I'm also aware that editing the code behind is not directly supported, but the rename functionality exist in the part that we are allowed to edit.\r\n<!--\r\n    A clear and concise description of what you want to happen. This includes:\r\n    - Description of what API need to be added or changed.\r\n    - Code that shows the surface area of the API.\r\n    - Code that shows real world scenarios, and how they would otherwise be handled.\r\n    - Details showing the usage/consumption of the proposed new API, and alternatives (e.g. not having this API).\r\n    - Any other context or screenshots about the feature request here.\r\n\r\n    :exclamation: Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md for more details\r\n\r\n  -->\r\n\r\n\r\n**Will this feature affect UI controls?**\r\n    Yes\r\n    - VS Designer need to support the feature as mentioned above to accommodate picking up any changes\r\n    - Will not impact accessibility\r\n    - Will not need to be localized.\r\n","Url":"https://github.com/dotnet/winforms/issues/6176","RelatedDescription":"Closed issue \"For control Name use nameof instead of hardcoding\" (#6176)"},{"Id":"1053130030","IsPullRequest":false,"CreatedAt":"2021-11-15T03:36:09","Actor":"docfresh","Number":"6177","RawContent":null,"Title":"Outdated Settings Documentation / Portable settings documentation","State":"closed","Body":"The Application Settings help file [here ](https://docs.microsoft.com/en-us/dotnet/desktop/winforms/advanced/application-settings-for-windows-forms?view=netframeworkdesktop-4.8&WT.mc_id=DT-MVP-5003235)is outdated. It refers to .NET 4 but not 5 or 6.  I can't find an updated version.  Some of the relevant info is [here](https://stackoverflow.com/questions/65518159/where-are-the-settings-saved-in-a-net-5-winforms-app).\r\n\r\n\r\nAlso, it would be great if an updated doc could give recommended methods for making a settings file portable; for example, read/write from the root directory of a USB drive, instead of in the Windows user's appdata folder. \r\n\r\nHacks for this could probably be figured out, but enough people may be interested in portable applications that is is worth including in the docs.\r\n\r\nThanks","Url":"https://github.com/dotnet/winforms/issues/6177","RelatedDescription":"Closed issue \"Outdated Settings Documentation / Portable settings documentation\" (#6177)"},{"Id":"1052678053","IsPullRequest":true,"CreatedAt":"2021-11-13T13:43:09","Actor":"dotnet-maestro[bot]","Number":"6175","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211112.1\r\n- **Date Produced**: November 12, 2021 5:43:31 PM UTC\r\n- **Commit**: 35704e44e5d1b158f21512b1c1081a0e025bde3f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21561.18 to 7.0.0-alpha.1.21562.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/5fa6dd3...35704e4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6175)","Url":"https://github.com/dotnet/winforms/pull/6175","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6175)"},{"Id":"1051950678","IsPullRequest":true,"CreatedAt":"2021-11-12T13:43:22","Actor":"dotnet-maestro[bot]","Number":"6174","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211111.18\r\n- **Date Produced**: November 12, 2021 9:27:43 AM UTC\r\n- **Commit**: 5fa6dd364982be4ffd83358adbf130d88049c72a\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21561.1 to 7.0.0-alpha.1.21561.18][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/6f5de0b...5fa6dd3\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6174)","Url":"https://github.com/dotnet/winforms/pull/6174","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6174)"},{"Id":"1051446532","IsPullRequest":true,"CreatedAt":"2021-11-12T02:27:40","Actor":"RussKie","Number":"6171","RawContent":null,"Title":"(Servicing) Emit font in app bootstrap locale agnostic","State":"closed","Body":"Fixes #6144.\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\n- Ensure that the application bootstrap code is generated in locale independent manner.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customer with locales where decimal separator is not `.` will now have a correct code emitted by the source generated `ApplicationConfiguration` API.\r\n\r\n## Regression? \r\n\r\n- No, new feature introduced in .NET 6 RC2\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual\r\n- added unit tests\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6171)","Url":"https://github.com/dotnet/winforms/pull/6171","RelatedDescription":"Closed or merged PR \"(Servicing) Emit font in app bootstrap locale agnostic\" (#6171)"},{"Id":"1050962173","IsPullRequest":true,"CreatedAt":"2021-11-11T13:43:22","Actor":"dotnet-maestro[bot]","Number":"6167","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20211111.1\r\n- **Date Produced**: November 11, 2021 11:38:03 AM UTC\r\n- **Commit**: 6f5de0b2b979a70e6fe36904d0d4f087c32f9c7e\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Windows.Compatibility**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Drawing.Common**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.DirectoryServices**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.IO.Packaging**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Security.Permissions**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Resources.Extensions**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Text.Encodings.Web**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Windows.Extensions**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Threading.AccessControl**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n  - **System.Text.Json**: [from 7.0.0-alpha.1.21558.10 to 7.0.0-alpha.1.21561.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/dfb8c90...6f5de0b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/6167)","Url":"https://github.com/dotnet/winforms/pull/6167","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#6167)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-11-19T05:30:38.4882017Z","RunDurationInMilliseconds":556}