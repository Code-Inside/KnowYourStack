{"Data":{"GitHub":{"Issues":[{"Id":"668358005","IsPullRequest":true,"CreatedAt":"2020-07-30T04:25:29","Actor":"RussKie","Number":"3670","RawContent":null,"Title":"Use is null","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nCloses #3469 as obsolete\r\n\r\n\r\n## Proposed changes\r\n\r\n- Replace all instances of `== null` with `is null`.\r\n\r\nAll changes are automated in VS, replaced on per project basis.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3670)","Url":"https://github.com/dotnet/winforms/pull/3670","RelatedDescription":"Open PR \"Use is null\" (#3670)"},{"Id":"668342282","IsPullRequest":true,"CreatedAt":"2020-07-30T03:44:29","Actor":"Tanya-Solyanik","Number":"3669","RawContent":null,"Title":"Fix regression in accessible name for data-bound combo box items","State":"open","Body":"This is a regression from .NET Framework version 4.7.2. AccessibleObject.Name property for data-driven ComboBox items was broken because it was invoking ToString method instead of reading content of property that is contained in DisplayMember databinding property.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3584\r\n\r\n\r\n## Proposed changes\r\n\r\nuse method that accesses DisplayMember property\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n* User of accessible technologies does not have access to values of combo box items, when these items are data-bound.\r\n* Automation tests that rely on UIA accessible name would not work\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\nLow - we now use an existing method that is used to populate combobox drop down UI \r\nFix is a port from the .NET Framework and is cherry-picked from Core 5.0:\r\ngit cherry-pick f981c1216f6471534e01222b8fa192f805a3014e\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/88878116-08de0600-d1dc-11ea-9e4a-2af8d8ba6400.png)\r\n\r\n\r\n### After\r\nInspect should display the same text as is contained in the drop down:\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/88878131-14313180-d1dc-11ea-8b69-f74ce3e34547.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\nmanual test using the inspect tool, unit tests\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3669)","Url":"https://github.com/dotnet/winforms/pull/3669","RelatedDescription":"Open PR \"Fix regression in accessible name for data-bound combo box items\" (#3669)"},{"Id":"668079903","IsPullRequest":true,"CreatedAt":"2020-07-30T01:13:16","Actor":"weltkante","Number":"3665","RawContent":null,"Title":"Fix porting regression in ToolStripDropDown","State":"closed","Body":"Fixes #2058\r\n\r\n## Proposed changes\r\n\r\n- Fix porting regression. Context menus for NotifyIcon are allowed to cover the taskbar, the corresponding property stored the setting but did not read it out.\r\n\r\n## Customer Impact\r\n\r\n- Allow context menus for taskbar icons to cover the taskbar (instead of getting shifted off the taskbar)\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Minimal. The property was internal and only set by `NotifyIcon` caller.\r\n\r\n## Screenshots\r\n\r\n### Before\r\n\r\n- context menu for NotifyIcon is moved off the taskbar and does not appear where the user clicked\r\n\r\n![grafik](https://user-images.githubusercontent.com/5845814/88842292-8d7e5380-d1df-11ea-8f8a-808449251843.png)\r\n\r\n### After\r\n\r\n- context menu for NotifyIcon is allowed to cover the taskbar, depending where the user clicked (same as Desktop Framework)\r\n\r\n![grafik](https://user-images.githubusercontent.com/5845814/88842445-c1f20f80-d1df-11ea-8fcf-2df9359c03a1.png)\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- added unit test to verify the property returns the value stored in it (test fails without fix)\r\n- manual testing to verify the reported behavior was fixed (cannot automate this test as it requires nontrivial user interaction to ensure the icon is actually shown in a location where the behaviore can be reproduced reliably)\r\n\r\nFor the manual test the following code was added to a new projects form. In addition the taskbar must be manually reconfigured to allow the icon to appear in the taskbar (by default it appears in the popup so the click position may already be off the taskbar)\r\n```csharp\r\ncomponents ??= new System.ComponentModel.Container();\r\nvar ni = new NotifyIcon(components);\r\nni.ContextMenuStrip = new ContextMenuStrip\r\n{\r\n    Items =\r\n    {\r\n        new ToolStripButton(\"Hello\"),\r\n        new ToolStripButton(\"World\"),\r\n    }\r\n};\r\nni.Icon = SystemIcons.Application;\r\nni.Visible = true;\r\n```\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3665)","Url":"https://github.com/dotnet/winforms/pull/3665","RelatedDescription":"Closed or merged PR \"Fix porting regression in ToolStripDropDown\" (#3665)"},{"Id":"668255790","IsPullRequest":true,"CreatedAt":"2020-07-30T01:04:51","Actor":"JeremyKuhne","Number":"3668","RawContent":null,"Title":"Throw if we're given a null HDC in a message.","State":"closed","Body":"If we try to create a `Graphics` object from it we'll get an `OutOfMemoryException` which is not actually what is happening- GDI+ just reports that whenever you don't pass a valid HDC. Throwing when we see this so we don't chase down the wrong rabbit hole.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3668)","Url":"https://github.com/dotnet/winforms/pull/3668","RelatedDescription":"Closed or merged PR \"Throw if we're given a null HDC in a message.\" (#3668)"},{"Id":"668248365","IsPullRequest":true,"CreatedAt":"2020-07-30T00:08:38","Actor":"JeremyKuhne","Number":"3667","RawContent":null,"Title":"Add validation system for EMFs","State":"open","Body":"Creates the foundations for explicit, focused validation of drawing to EMF.  Use `.Validate` on `EmfScope`, passing in start state and an arbitrarily long list of `Validate.` methods.\r\n\r\nI'll continue to flesh this out as I write additional regression tests / new functionality tests.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3667)","Url":"https://github.com/dotnet/winforms/pull/3667","RelatedDescription":"Open PR \"Add validation system for EMFs\" (#3667)"},{"Id":"667960509","IsPullRequest":true,"CreatedAt":"2020-07-29T23:59:34","Actor":"dotnet-maestro[bot]","Number":"3664","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200724.1\r\n- **Date Produced**: 7/24/2020 3:41 PM\r\n- **Commit**: f6192d1e284a08ac05041d05fa6e60dec74b24f5\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: from 5.0.0-beta.20364.3 to 5.0.0-beta.20374.1\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20364.3 to 5.0.0-beta.20374.1\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20364.3 to 5.0.0-beta.20374.1\r\n  - **Microsoft.DotNet.RemoteExecutor**: from 5.0.0-beta.20364.3 to 5.0.0-beta.20374.1\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20364.3 to 5.0.0-beta.20374.1\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3664)","Url":"https://github.com/dotnet/winforms/pull/3664","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3664)"},{"Id":"665944862","IsPullRequest":false,"CreatedAt":"2020-07-29T23:49:17","Actor":"Vino-Wang","Number":"3646","RawContent":null,"Title":"[Accessibility] Screenreader does not read the GroupBox text with the radio button, label and edit fields(Orientation and Margins)","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n* Original [Bug 1159122](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1159122?src=WorkItemMention&src-action=artifact_link)\r\n\r\n* .NET Core Version: \r\n5.0.100-preview.8.20373.19\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n<!-- Yes / No -->\r\n\r\n**More info:**\r\nThis issue cannot reproduce with the standalone GroupBox with radio button, label and textbox controls added into it. \r\n[Standalone_NotRepro.zip](https://github.com/dotnet/winforms/files/4979752/Standalone_NotRepro.zip)\r\n\r\n**Problem description:**\r\nScreenreader user unable to get the radio button and edit field related to which group.\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n![PageSetup](https://user-images.githubusercontent.com/18568603/88499992-26537a00-cffa-11ea-8a40-072d0aa29955.png)\r\n\r\n**Expected behavior:**\r\nScreenreader should read the groupBox text with the Portrait, Landscape, Left, Right.\r\n![Standalone_Core](https://user-images.githubusercontent.com/18568603/88500008-30757880-cffa-11ea-9f58-fdd90c2dc063.png)\r\n\r\n**Minimal repro:**\r\n1.\tRun the attached project. [PageSetup.zip](https://github.com/dotnet/winforms/files/4979750/PageSetup.zip)\r\n2.\tClick the Setting button.\r\n3.\tLaunch the Screenreader/Narrator tool.\r\n4.\tNavigate to the Orientation and Margins groupbox.\r\n","Url":"https://github.com/dotnet/winforms/issues/3646","RelatedDescription":"Closed issue \"[Accessibility] Screenreader does not read the GroupBox text with the radio button, label and edit fields(Orientation and Margins)\" (#3646)"},{"Id":"668101511","IsPullRequest":true,"CreatedAt":"2020-07-29T23:34:12","Actor":"Tanya-Solyanik","Number":"3666","RawContent":null,"Title":"removed a duplicate property from the project file","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3666)","Url":"https://github.com/dotnet/winforms/pull/3666","RelatedDescription":"Closed or merged PR \"removed a duplicate property from the project file\" (#3666)"},{"Id":"667456302","IsPullRequest":true,"CreatedAt":"2020-07-29T17:11:44","Actor":"JeremyKuhne","Number":"3657","RawContent":null,"Title":"Fix rendering text with a transparent background","State":"closed","Body":"`(Color)default` is not the same as `Color.Empty`. `Color.Empty` is used to determine that we should not be writing opaque. Adds regression test.\r\n\r\nThis change starts introducing another layer on the metafile parsing to allow accumulating state. It also adds additional records.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3657)","Url":"https://github.com/dotnet/winforms/pull/3657","RelatedDescription":"Closed or merged PR \"Fix rendering text with a transparent background\" (#3657)"},{"Id":"667723892","IsPullRequest":false,"CreatedAt":"2020-07-29T10:14:50","Actor":"Ashley-Li","Number":"3663","RawContent":null,"Title":"[Accessibility] ToolStripComboBox/ToolStripTextBox items' name property cannot be null","State":"open","Body":"* .NET Core Version: .Net SDK 5.0.100-rc.1.20378.13\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n* More info\r\nThis issue can reproduce on contextMenuStrip/MenuStrip.\r\n**Minimal repro::**\r\n1. Extract “[testApp.zip](https://github.com/dotnet/winforms/files/4994154/testApp.zip)” and open it in VS.\r\n2. Build and run the project.\r\n3. Open Accessibility Insights For Windows tool, select focus on form and view result.\r\n\r\n**Actual behavior::**\r\n Use the tool to test out the following error,toolStripComboBox/ToolStripTextBox items' name property cannot be null.\r\n![ComboBox](https://user-images.githubusercontent.com/56664234/88787008-cdd0d800-d1c5-11ea-9802-132379af3292.PNG)\r\n\r\n**Expected behavior:**\r\nToolStripComboBox/ToolStripTextBox items' name property cannot be null.\r\n","Url":"https://github.com/dotnet/winforms/issues/3663","RelatedDescription":"Open issue \"[Accessibility] ToolStripComboBox/ToolStripTextBox items' name property cannot be null\" (#3663)"},{"Id":"667662088","IsPullRequest":false,"CreatedAt":"2020-07-29T08:41:42","Actor":"Zheng-Li01","Number":"3662","RawContent":null,"Title":"An exception dialog pops up after resized the PropertyGrid Control more one times","State":"open","Body":"* .NET Core Version: \r\n.Net SDK 5.0.100-rc.1.20378.13\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**More info:**\r\n1. The issue is a **regression** issue, can't repro on 5.0.100-rc.1.20377.3 build.\r\n\r\n**Minimal repro:**\r\n1. Create a .NET Core winforms application with a PropertyGrid control.\r\n2. Resize the propertyGrid1 control more one times.\r\n\r\n**Expected behavior:**\r\nThe propertyGrid1 can be resized successfully.\r\n \r\n**Actual behavior:**\r\nAn exception dialog pops up after resized the PropertyGrid Control more one times.\r\n![Exception](https://user-images.githubusercontent.com/38325459/88777819-403bbb00-d1ba-11ea-86db-b606b9e09900.gif)\r\n![Exception](https://user-images.githubusercontent.com/38325459/88777832-4467d880-d1ba-11ea-9357-881cbd00fe15.PNG)\r\n","Url":"https://github.com/dotnet/winforms/issues/3662","RelatedDescription":"Open issue \"An exception dialog pops up after resized the PropertyGrid Control more one times\" (#3662)"},{"Id":"667651913","IsPullRequest":false,"CreatedAt":"2020-07-29T08:26:23","Actor":"Jenna-Zheng","Number":"3661","RawContent":null,"Title":"[Accessibility] Keyboard focus is getting trapped while pressing right/left arrow to leave the ComboBox/TextBox items","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 5.0.100-rc.1.20378.13\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\nMore Info\r\nThe BindingNavigator/MenuStrip/ToolStrip also reproduce this issue.\r\n\r\n**Problem description:**\r\nStep 4: Keyboard focus cannot use right/left arrow to leave **ComboBox**/**TextBox** items.\r\nStep 5: Keyboard focus cannot use alt+right arrow to leave **ComboBox**/**TextBox** clockwise, only can use alt+left arrow to leave **ComboBox**/**TextBox** anticlockwise.\r\n![TestResult_arrow](https://user-images.githubusercontent.com/64949616/88774863-8e4ebf80-d1b6-11ea-85b3-0a0285764bcb.gif)\r\n\r\n**Expected behavior:**\r\nWhile navigating through right/left arrow or alt+arrow, Keyboard focus should  leave **ComboBox**/**TextBox** items.\r\n\r\n**Minimal repro:**\r\n1. Extract \"[WindowsFormsApp1.zip](https://github.com/dotnet/winforms/files/4993536/WindowsFormsApp1.zip)\" and open it in VS\r\n2. Build and run the project.\r\n3. Switch focus to **TextBox** item in **ToolStrip**.\r\n4. Using right/left arrow navigate to leave the **ComboBox**/**TextBox** items and observe.\r\n5. Using alt+arrow navigate to leave the **ComboBox**/**TextBox** items and observe.","Url":"https://github.com/dotnet/winforms/issues/3661","RelatedDescription":"Open issue \"[Accessibility] Keyboard focus is getting trapped while pressing right/left arrow to leave the ComboBox/TextBox items\" (#3661)"},{"Id":"667624537","IsPullRequest":false,"CreatedAt":"2020-07-29T07:41:35","Actor":"Zheng-Li01","Number":"3660","RawContent":null,"Title":"The PrintPreviewControl control have no dot line when using Keyboard focus on it","State":"open","Body":"* .NET Core Version:\r\n.Net SDK 5.0.100-rc.1.20378.13\r\n\r\n* Have you experienced this same bug with .NET Framework?:\r\nYes\r\n\r\n**Minimal repro:**\r\n1. Extract “[Keyboard_PreviewControl.zip](https://github.com/dotnet/winforms/files/4993308/Keyboard_PreviewControl.zip)” and open it in VS.\r\n2. Build and run the project.\r\n3. Navigating the controls on PrintingTesting Form through tab key.\r\n\r\n**Expected behavior:**\r\nKeyboard focus focus on PrintPreviewControl control, and the dot line can be seen after Preview Control button.\r\n\r\n**Actual behavior:**\r\nWhile navigating through tab key, Keyboard focus is not visible after Preview Control button.\r\n![KeyBoard](https://user-images.githubusercontent.com/38325459/88771495-ea631500-d1b1-11ea-9ed5-6d8dcd187a86.gif)","Url":"https://github.com/dotnet/winforms/issues/3660","RelatedDescription":"Open issue \"The PrintPreviewControl control have no dot line when using Keyboard focus on it\" (#3660)"},{"Id":"667611990","IsPullRequest":false,"CreatedAt":"2020-07-29T07:18:17","Actor":"Zheng-Li01","Number":"3659","RawContent":null,"Title":"[Accessibility] Keyboard focus is not clearly visible on \"Categorized\", \"Alphabetical\" and \" Property Pages\" for PropertyGrid control","State":"open","Body":"* .NET Core Version: \r\n.Net SDK 5.0.100-rc.1.20378.13\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n **More info**\r\n1. The issue also can reduce when focus with mouse.\r\n\r\n**Minimal repro:**\r\n1. Extract “[PropertyGrid.zip](https://github.com/dotnet/winforms/files/4993278/PropertyGrid.zip)” and open it in VS.\r\n2. Build and run the project.\r\n3. Press \"Right/Left\" arrow to focus on  \"Categorized\", \"Alphabetical\" and \" Property Pages\".\r\n\r\n**Expected behavior:**\r\nKeyboard focus should clearly visible on \"Categorized\", \"Alphabetical\" and \" Property Pages\".\r\n\r\n**Actual behavior:**\r\nWhile navigating through Keyboard that focus is not clearly visible on \"Categorized\", \"Alphabetical\" and \" Property Pages\".\r\n![RunTime](https://user-images.githubusercontent.com/38325459/88770358-45940800-d1b0-11ea-9bc8-8db96af74300.gif)","Url":"https://github.com/dotnet/winforms/issues/3659","RelatedDescription":"Open issue \"[Accessibility] Keyboard focus is not clearly visible on \"Categorized\", \"Alphabetical\" and \" Property Pages\" for PropertyGrid control\" (#3659)"},{"Id":"667598919","IsPullRequest":false,"CreatedAt":"2020-07-29T06:52:37","Actor":"Jessie-Zhang01","Number":"3658","RawContent":null,"Title":"[Accessibility] Narrator does not read the image description of the existed image in the DataGridViewImageColumn","State":"open","Body":"* .NET Core Version: \r\n.Net SDK 5.0.100-rc.1.20378.13\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Minimal repro:**\r\n\r\n1. Extract “[DataGridViewImage.zip](https://github.com/dotnet/winforms/files/4993008/DataGridViewImage.zip)” and open it in VS.\r\n2. Build and run the project.\r\n3. Open Narrator tool, navigate to the first row, Column2, check whether the narrator reads the image description of the image present.\r\n\r\n\r\n\r\n**Expected behavior:**\r\nNarrator should read the image description of the existed image in the DataGridViewImageColumn.\r\n\r\n**Actual behavior:**\r\nNarrator does not read the image description of the existed image in the DataGridViewImageColumn.\r\n![image](https://user-images.githubusercontent.com/45864649/88764820-31e4a380-d1a8-11ea-8281-aa98999cce0e.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/3658","RelatedDescription":"Open issue \"[Accessibility] Narrator does not read the image description of the existed image in the DataGridViewImageColumn\" (#3658)"},{"Id":"666947791","IsPullRequest":false,"CreatedAt":"2020-07-28T10:05:32","Actor":"John-Qiao","Number":"3656","RawContent":null,"Title":"Control text does not depend on the UI Language of the OS when changed form's Language property to the local language","State":"open","Body":"* .NET Core Version: \r\n5.0.100-rc.1.20377.13\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**More info:**\r\n\r\n1. This issue does not occur in .NET Framework.\r\n2. This issue occurs in both .NET Core 3.1 and .NET 5.0. \r\n3. It's a regression issue from .NET Core 3.1. \r\n\r\n**Problem description:**\r\n\r\nButton control shows the **Korean** text in the English language of the OS.\r\n![Actual](https://user-images.githubusercontent.com/45864985/88645578-d73f3f00-d0f6-11ea-8ac5-32339be80ef4.png)\r\n\r\n**Expected behavior:**\r\nButton control should shows the **English** text in the English language of the OS.\r\n![Expected](https://user-images.githubusercontent.com/45864985/88645582-da3a2f80-d0f6-11ea-8994-9cf2f946ab0c.png)\r\n\r\n**Minimal repro:**\r\n\r\n1. Launch the attached project in VS.\r\n2. Rebuild and run it.\r\n3. Observe the text in button control.\r\n[TestApp.zip](https://github.com/dotnet/winforms/files/4987221/TestApp.zip)\r\n![ReproSteps](https://user-images.githubusercontent.com/45864985/88652007-d90c0100-d0fc-11ea-82da-e074f669cc7a.gif)\r\n","Url":"https://github.com/dotnet/winforms/issues/3656","RelatedDescription":"Open issue \"Control text does not depend on the UI Language of the OS when changed form's Language property to the local language\" (#3656)"},{"Id":"665901586","IsPullRequest":true,"CreatedAt":"2020-07-28T07:58:48","Actor":"JeremyKuhne","Number":"3645","RawContent":null,"Title":"Add test code for parsing EMF","State":"closed","Body":"Adding infrastructure to allow dumping controls to emf and investigating the results. This will allow looking at how drawing actually occurs and potentially adding tests to validate that we draw the way we expect (right colors, lines, etc).\r\n\r\n- Add new relevant Interop defines.\r\n- Move existing dialog COLOR to Comdlg32.\r\n- Change a few enums to match normal pattern\r\n\r\nDelete POINT as it is equivalent to Point.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3645)","Url":"https://github.com/dotnet/winforms/pull/3645","RelatedDescription":"Closed or merged PR \"Add test code for parsing EMF\" (#3645)"},{"Id":"666134260","IsPullRequest":false,"CreatedAt":"2020-07-28T07:53:08","Actor":"Jessie-Zhang01","Number":"3649","RawContent":null,"Title":"The information in the warning dialog is different from the .Net Framework when the EnableRaisingEvents property of FileSystemWatcher is changed to true","State":"closed","Body":"* .NET Core Version: \r\n.Net 5.0.100-rc.1.20376.1 from 5.0 master branch\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Minimal repro:**\r\n\r\n1. Open the attached ‘[WindowsFormsApp5.zip](https://github.com/dotnet/winforms/files/4980950/WindowsFormsApp5.zip)’ application in VS, then build and run it.\r\n2. Change the EnableRaisingEvents property to true.\r\n3. A warning dialog will pop-up, then click the \"Details\" button.\r\n4. Observe the information in the details.\r\n5. Click the \"OK\" button and observe whether the EnableRaisingEvents property is changed to true.\r\n\r\n**Expected behavior:**\r\nIn step4, the information in the warning dialog should be the same as .Net Framework.\r\nIn step5, the EnableRaisingEvents property should be changed to true.\r\n\r\n**Actual behavior:**\r\nIn step4, the information in the warning dialog is different from the .Net Framework.\r\n![image](https://user-images.githubusercontent.com/45864649/88522240-abee1e80-d028-11ea-8641-a50e8824cb28.png)\r\nIn step5, the EnableRaisingEvents property has not been changed to true.\r\n![Issue1](https://user-images.githubusercontent.com/45864649/88523335-5c105700-d02a-11ea-872f-abcd379a77df.gif)\r\n\r\nFramework project: [WindowsFormsApp6.zip](https://github.com/dotnet/winforms/files/4980954/WindowsFormsApp6.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3649","RelatedDescription":"Closed issue \"The information in the warning dialog is different from the .Net Framework when the EnableRaisingEvents property of FileSystemWatcher is changed to true\" (#3649)"},{"Id":"665901460","IsPullRequest":true,"CreatedAt":"2020-07-28T04:35:21","Actor":"JeremyKuhne","Number":"3644","RawContent":null,"Title":"Add caching for Pen/SoldBrush","State":"closed","Body":"Adds base classes and caches for System.Drawing pens and brushes. Signficantly reduces allocations for Graphics drawing.\r\n\r\n- Remove other instances of Brush/Pen caching\r\n- Write helpers to retain the orginal Color when finding nearest color (allowing existing caches to be used)\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3644)","Url":"https://github.com/dotnet/winforms/pull/3644","RelatedDescription":"Closed or merged PR \"Add caching for Pen/SoldBrush\" (#3644)"},{"Id":"666726705","IsPullRequest":false,"CreatedAt":"2020-07-28T03:35:38","Actor":"Amy-Li03","Number":"3655","RawContent":null,"Title":"Accessibility: The BoundingRectangle is incorrect when clicking the list & list item in inspect tree","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET SDK 5.0.100-rc.1.20377.3\r\n\r\n* More Info: \r\nThis is not a regression issue, it also reproduce on .NET Core 3.1.\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\nThe BoundingRectangle is incorrect, the yellow rectangle has gone out the boundary of form when clicking the \"Standard\" list below \"FlatStyle\" tree item in inspect tree.\r\n![Core](https://user-images.githubusercontent.com/62929087/88616361-90d1ec00-d0c6-11ea-86fe-5be7fc2427e8.png)\r\n\r\n**Expected behavior:**\r\n The yellow rectangle should surround the FlatStyle property.\r\n\r\n**Minimal repro:**\r\n1. Launch Inspect tool.\r\n2. Create WinForms app with PropertyGrid and Button control.\r\n3. Associate the Button with PropertyGrid as a selected object.\r\n4. Run the app.\r\n5. Click the \"Flat\" list item of FlatStyle property in inspect tree, then observe the BoundingRectangle.","Url":"https://github.com/dotnet/winforms/issues/3655","RelatedDescription":"Open issue \"Accessibility: The BoundingRectangle is incorrect when clicking the list & list item in inspect tree\" (#3655)"},{"Id":"666716459","IsPullRequest":false,"CreatedAt":"2020-07-28T03:05:42","Actor":"Amy-Li03","Number":"3654","RawContent":null,"Title":"Accessibility: The list item of comboBox incorrectly displayed in inspect tree when setting its DropDownStyle as DropDown or DropDownList.","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET SDK 5.0.100-rc.1.20377.3\r\n\r\n* More Info:\r\nThis is not a regression issue, it also reproduce on .NET Core 3.1.\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nWhen setting ComboBox's DropDownStyle as DropDown or DropDownList, the list item of comboBox doesn't display below Form1 window node, it incorrectly displayed below Desktop1 panel node.\r\n![Core](https://user-images.githubusercontent.com/62929087/88614276-fe2f4e00-d0c1-11ea-8f62-07c6a7702dcf.png)\r\n\r\n**Expected behavior:**\r\nThe list items of comboBox's UIA hierarchy should display below Form1 window node.\r\n![Framework](https://user-images.githubusercontent.com/62929087/88614281-012a3e80-d0c2-11ea-917b-cfaceaa212be.png)\r\n\r\n**Minimal repro:**\r\n1. Launch Inspect tool.\r\n2. Create WinForms core project with a comboBox control.\r\n3. Set the DropDownStyle property of comboBox as DropDown or DropDownList.\r\n4. Run the project.\r\n5. Focus on the list items of comboBox, then observe the UIA hierarchy in inspect tree.","Url":"https://github.com/dotnet/winforms/issues/3654","RelatedDescription":"Open issue \"Accessibility: The list item of comboBox incorrectly displayed in inspect tree when setting its DropDownStyle as DropDown or DropDownList.\" (#3654)"},{"Id":"666673497","IsPullRequest":true,"CreatedAt":"2020-07-28T02:12:12","Actor":"JeremyKuhne","Number":"3653","RawContent":null,"Title":"Add scope tracking","State":"closed","Body":"In debug builds makes scopes classes instead of ref structs so we can track when we fail to close scopes.\r\n\r\nFound a few places we were leaking and fixed them. Finally got annoyed enough to make CreateHBitmap16Bit not use native memory (as I had to change the HDC usage).\r\n\r\nSimplified some usings (for easier review when finding all references). Fixed a few comments as I walked through the callers. Also added a few more screen dc cache validation steps.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3653)","Url":"https://github.com/dotnet/winforms/pull/3653","RelatedDescription":"Closed or merged PR \"Add scope tracking\" (#3653)"},{"Id":"666642995","IsPullRequest":false,"CreatedAt":"2020-07-27T23:18:59","Actor":"elachlan","Number":"3652","RawContent":null,"Title":"Lexicographical order designer code","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nHistorically winforms designer code has been a bit of a pain when merging code changes. The ordering often seems random, although there is basic ordering to make sure dependencies work.\r\n\r\nThe current fix to avoid merge conflicts is to make sure developers don't make changes to designer files unnecessarily, and to make sure no body is working on forms/controls at the same time. This is obviously really unproductive.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\nMy suggestion is to add more smarts to the designer to make sure the ordering is consistent, lexicographical order seems the most appropriate. Obviously this will need to take into account dependencies as it currently does, but hopefully the random changes are reduce. Especially when opening the designer to \"view\" the form and making no changes.\r\n\r\nOther changes to reduce variability in generated code would also be welcome.\r\n\r\n**Will this feature affect UI controls?**\r\nYes.\r\n","Url":"https://github.com/dotnet/winforms/issues/3652","RelatedDescription":"Open issue \"Lexicographical order designer code\" (#3652)"},{"Id":"666462879","IsPullRequest":false,"CreatedAt":"2020-07-27T17:31:23","Actor":"JeremyKuhne","Number":"3651","RawContent":null,"Title":"API Proposal: Add span overloads to `TextRenderer`","State":"open","Body":"## Proposal\r\n\r\nWe should add span overloads to `TextRenderer` to allow for efficient text rendering. Fortunately the Win32 APIs in play here take a length so we can use span data directly- we've already refactored internally to use `ReadOnlySpan<char>`.\r\n\r\n``` C#\r\nnamespace System.Windows.Forms\r\n{\r\n    public sealed class TextRenderer\r\n    {\r\n        // Existing:\r\n        public static void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor);\r\n        public static void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, Color backColor);\r\n        public static void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, Color backColor, TextFormatFlags flags);\r\n        public static void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, TextFormatFlags flags);\r\n        public static void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor);\r\n        public static void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, Color backColor);\r\n        public static void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, Color backColor, TextFormatFlags flags);\r\n        public static void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, TextFormatFlags flags);\r\n        public static Size MeasureText(IDeviceContext dc, string text, Font font);\r\n        public static Size MeasureText(IDeviceContext dc, string text, Font font, Size proposedSize);\r\n        public static Size MeasureText(IDeviceContext dc, string text, Font font, Size proposedSize, TextFormatFlags flags);\r\n        public static Size MeasureText(string text, Font font);\r\n        public static Size MeasureText(string text, Font font, Size proposedSize);\r\n        public static Size MeasureText(string text, Font font, Size proposedSize, TextFormatFlags flags);\r\n\r\n        // 1-1 Proposal\r\n        // Note that backColor and proposedSize can't be defaulted as they are Color.Empty and Size(int.MaxValue, intMaxValue).\r\n        public static void DrawText(IDeviceContext dc, ReadOnlySpan<char> text, Font font, Point pt, Color foreColor);\r\n        public static void DrawText(IDeviceContext dc, ReadOnlySpan<char> text, Font font, Point pt, Color foreColor, Color backColor);\r\n        public static void DrawText(IDeviceContext dc, ReadOnlySpan<char> text, Font font, Point pt, Color foreColor, Color backColor, TextFormatFlags flags);\r\n        public static void DrawText(IDeviceContext dc, ReadOnlySpan<char> text, Font font, Point pt, Color foreColor, TextFormatFlags flags);\r\n        public static void DrawText(IDeviceContext dc, ReadOnlySpan<char> text, Font font, Rectangle bounds, Color foreColor);\r\n        public static void DrawText(IDeviceContext dc, ReadOnlySpan<char> text, Font font, Rectangle bounds, Color foreColor, Color backColor);\r\n        public static void DrawText(IDeviceContext dc, ReadOnlySpan<char> text, Font font, Rectangle bounds, Color foreColor, Color backColor, TextFormatFlags flags);\r\n        public static void DrawText(IDeviceContext dc, ReadOnlySpan<char> text, Font font, Rectangle bounds, Color foreColor, TextFormatFlags flags);\r\n        public static Size MeasureText(IDeviceContext dc, ReadOnlySpan<char> text, Font font);\r\n        public static Size MeasureText(IDeviceContext dc, ReadOnlySpan<char> text, Font font, Size proposedSize);\r\n        public static Size MeasureText(IDeviceContext dc, ReadOnlySpan<char> text, Font font, Size proposedSize, TextFormatFlags flags);\r\n        public static Size MeasureText(ReadOnlySpan<char> text, Font font);\r\n        public static Size MeasureText(ReadOnlySpan<char> text, Font font, Size proposedSize);\r\n        public static Size MeasureText(ReadOnlySpan<char> text, Font font, Size proposedSize, TextFormatFlags flags);\r\n    }\r\n}\r\n```\r\n\r\n## Justification\r\n\r\nDrawing and measuring text is a pretty common activity. This will allow significantly more efficient text rendering when new string allocations can be avoided (slicing other input, building off of a stack based character array, etc.). In conjunction with `IDeviceContext` on `PaintEventArgs` and other internal performance improvements, painting a string on a blank form can be done with < 15% of the allocations it used to take.\r\n\r\n## Implementation Details\r\n\r\nWe'll match throwing behavior of the original APIs. The original APIs did not throw for null or empty strings, they just no-op.","Url":"https://github.com/dotnet/winforms/issues/3651","RelatedDescription":"Open issue \"API Proposal: Add span overloads to `TextRenderer`\" (#3651)"},{"Id":"666134309","IsPullRequest":false,"CreatedAt":"2020-07-27T09:29:06","Actor":"Jessie-Zhang01","Number":"3650","RawContent":null,"Title":"No warning dialog pops up when changing the value of the NotifyFilter property of FileSystemWatcher","State":"open","Body":"* .NET Core Version: \r\n.Net 5.0.100-rc.1.20376.1 from 5.0 master branch\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**More Info:**\r\nIn the framework project, change the value of the NotifyFilter property from the Property browser, no warning box pops up.\r\nFramework project: [WindowsFormsApp6.zip](https://github.com/dotnet/winforms/files/4981019/WindowsFormsApp6.zip)\r\n\r\n\r\n**Minimal repro:**\r\n\r\n1. Open the attached ‘[WindowsFormsApp5.zip](https://github.com/dotnet/winforms/files/4981020/WindowsFormsApp5.zip)’ application in VS, then build and run it.\r\n2. Change the NotifyFilter property to FileName.\r\n\r\n\r\n**Expected behavior:**\r\nA warning dialog should pop up when changing the value of the NotifyFilter property.\r\nThe following screenshot is from the .Net framework PropertyGrid:\r\n![image](https://user-images.githubusercontent.com/45864649/88524187-99291900-d02b-11ea-89bb-9e00cbcdc42c.png)\r\n\r\n**Actual behavior:**\r\nNo warning dialog pop up when changing the value of the NotifyFilter property.\r\n![Issue2](https://user-images.githubusercontent.com/45864649/88524093-80b8fe80-d02b-11ea-9482-ccd10967df57.gif)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3650","RelatedDescription":"Open issue \"No warning dialog pops up when changing the value of the NotifyFilter property of FileSystemWatcher\" (#3650)"},{"Id":"666067267","IsPullRequest":true,"CreatedAt":"2020-07-27T09:06:16","Actor":"RussKie","Number":"3648","RawContent":null,"Title":"Disable flaky tests","State":"closed","Body":"Relates to #3647\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3648)","Url":"https://github.com/dotnet/winforms/pull/3648","RelatedDescription":"Closed or merged PR \"Disable flaky tests\" (#3648)"},{"Id":"666057873","IsPullRequest":false,"CreatedAt":"2020-07-27T07:29:10","Actor":"RussKie","Number":"3647","RawContent":null,"Title":"Flaky tests: `TextRenderer`-related tests randomly fail","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\nThe current master @ 5.0RC1\r\n\r\n\r\n**Problem description:**\r\n\r\nMultiple observed intermittent (yet persistent) failures that appear to be related to `TextRenderer` and device context (?):\r\n\r\n```\r\n    System.Windows.Forms.Tests.ButtonTests.Button_Text_SetCachedPreferredSize_Invalidates [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: {Width=66, Height=24}\r\n      Actual:   {Width=79, Height=24}\r\n      Stack Trace:\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/ButtonTests.cs(954,0): at System.Windows.Forms.Tests.ButtonTests.Button_Text_SetCachedPreferredSize_Invalidates()\r\n```\r\n```\r\n    System.Windows.Forms.Tests.TextRendererTests.TextRenderer_MeasureText_InvokeStringFontSizeTextFormatFlags_ReturnsExpected(text: \"string\", font: [Font: Name=Segoe UI, Size=9, Units=3, GdiCharSet=1, GdiVerticalFont=False], proposedSize: {Width=100, Height=200}, flags: RightToLeft) [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: {Width=44, Height=16}\r\n      Actual:   {Width=37, Height=15}\r\n      Stack Trace:\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/TextRendererTests.cs(487,0): at System.Windows.Forms.Tests.TextRendererTests.TextRenderer_MeasureText_InvokeStringFontSizeTextFormatFlags_ReturnsExpected(String text, Font font, Size proposedSize, TextFormatFlags flags)\r\n```\r\n```\r\n    System.Windows.Forms.Tests.TextRendererTests.TextRenderer_MeasureText_InvokeIDeviceContextStringFontSize_ReturnsExpected(text: \"string\", font: null, proposedSize: {Width=100, Height=200}) [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: {Width=44, Height=16}\r\n      Actual:   {Width=37, Height=16}\r\n      Stack Trace:\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/TextRendererTests.cs(515,0): at System.Windows.Forms.Tests.TextRendererTests.TextRenderer_MeasureText_InvokeIDeviceContextStringFontSize_ReturnsExpected(String text, Font font, Size proposedSize)\r\n```\r\n```\r\n    System.Windows.Forms.Tests.ButtonTests.Button_GetPreferredSize_InvokeSystemGrowOnlyWithText_ReturnsExpected(proposedSize: {Width=1, Height=1}) [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: {Width=75, Height=30}\r\n      Actual:   {Width=75, Height=31}\r\n      Stack Trace:\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/ButtonTests.cs(1247,0): at System.Windows.Forms.Tests.ButtonTests.Button_GetPreferredSize_InvokeSystemGrowOnlyWithText_ReturnsExpected(Size proposedSize)\r\n```\r\n\r\n\r\nThe current hypothesis is that DC may somehow be dirtied that causes tests to fail.\r\nFor example, builds for https://github.com/dotnet/winforms/pull/3417 have [failed multiple times](https://dev.azure.com/dnceng/public/_build/results?buildId=746070&view=results) (all in Release), but once I have disabled `ScreenDcCache` in https://github.com/dotnet/winforms/commit/e1539274efdc8c16b90093e322ce81d2709acc02 builds succeeded.\r\n","Url":"https://github.com/dotnet/winforms/issues/3647","RelatedDescription":"Open issue \"Flaky tests: `TextRenderer`-related tests randomly fail\" (#3647)"},{"Id":"665540521","IsPullRequest":true,"CreatedAt":"2020-07-25T08:06:08","Actor":"gpetrou","Number":"3643","RawContent":null,"Title":"Use generic lists in DataObject","State":"open","Body":"## Proposed changes\r\n\r\n- Use generic lists in DataObject.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3643)","Url":"https://github.com/dotnet/winforms/pull/3643","RelatedDescription":"Open PR \"Use generic lists in DataObject\" (#3643)"},{"Id":"665483844","IsPullRequest":false,"CreatedAt":"2020-07-25T00:51:21","Actor":"DragoonAethis","Number":"3642","RawContent":null,"Title":"TextBox.PlaceholderText uses BackColor even when TextBox.Enabled = false","State":"open","Body":"* .NET Core Version: 3.1.6\r\n* Have you experienced this same bug with .NET Framework?: No (PlaceholderText not available)\r\n* Visual Studio version: 2019 16.7 Preview 5\r\n\r\n**Problem description:**\r\n\r\nWhen PlaceholderText is set and displayed, it's always drawn with the BackColor as the background, regardless of the Enabled value. This causes minor graphical issues as presented below.\r\n\r\n![image](https://user-images.githubusercontent.com/1546665/88445020-56472580-ce20-11ea-8c81-ef1983395eff.png)\r\n\r\nThe issue is most likely [here](https://github.com/dotnet/winforms/blob/b12ba3357e6f2246b5af3c506b8b6e05b8ce1cae/src/System.Windows.Forms/src/System/Windows/Forms/TextBox.cs#L900) - renderer for the Text itself [draws the appropriate background color first, then the text without any background](https://github.com/dotnet/winforms/blob/b12ba3357e6f2246b5af3c506b8b6e05b8ce1cae/src/System.Windows.Forms/src/System/Windows/Forms/TextBoxRenderer.cs#L91).\r\n\r\n**Expected behavior:**\r\n\r\nWhen PlaceholderText is set and TextBox is disabled, the background color is rendered properly across the entire control.\r\n\r\n**Minimal repro:**\r\n\r\n```csharp\r\nusing System;\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nnamespace BrokenPlaceholder {\r\n    class PlaceholderForm : Form {\r\n        private TextBox textBox1;\r\n        private TextBox textBox2;\r\n        private TextBox textBox3;\r\n\r\n        public PlaceholderForm() {\r\n            SuspendLayout();\r\n\r\n            textBox1 = new TextBox {\r\n                Name = \"textBox1\",\r\n                Size = new Size(226, 23),\r\n                Location = new Point(33, 25),\r\n                Text = \"Some perfectly fine Text\"\r\n            };\r\n\r\n            textBox2 = new TextBox {\r\n                Name = \"textBox2\",\r\n                Size = new Size(226, 23),\r\n                Location = new Point(33, 54),\r\n                PlaceholderText = \"PlaceholderText\"\r\n            };\r\n\r\n            textBox3 = new TextBox {\r\n                Name = \"textBox3\",\r\n                Size = new Size(226, 23),\r\n                Location = new Point(33, 83),\r\n                PlaceholderText = \"Disabled PlaceholderText\",\r\n                Enabled = false\r\n            };\r\n\r\n            ClientSize = new Size(293, 138);\r\n            Controls.Add(this.textBox1);\r\n            Controls.Add(this.textBox2);\r\n            Controls.Add(this.textBox3);\r\n            Name = \"PlaceholderForm\";\r\n            Text = \"PlaceholderForm\";\r\n            ResumeLayout(false);\r\n\r\n            PerformLayout();\r\n        }\r\n    }\r\n\r\n    static class Program {\r\n        [STAThread]\r\n        static void Main() {\r\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\r\n            Application.EnableVisualStyles();\r\n            Application.SetCompatibleTextRenderingDefault(false);\r\n            Application.Run(new PlaceholderForm());\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/3642","RelatedDescription":"Open issue \"TextBox.PlaceholderText uses BackColor even when TextBox.Enabled = false\" (#3642)"},{"Id":"665124881","IsPullRequest":true,"CreatedAt":"2020-07-24T12:37:36","Actor":"dotnet-maestro[bot]","Number":"3641","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200721.13\r\n- **Date Produced**: 7/22/2020 6:41 AM\r\n- **Commit**: d8cf13e0ba9b369a15a83472b6b97463c6d07fe2\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Diagnostics.PerformanceCounter**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.DirectoryServices**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Drawing.Common**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.IO.FileSystem.AccessControl**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.IO.Packaging**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.CodeDom**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.App**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.Targets**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.Win32.Registry.AccessControl**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.App.Ref**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.IO.Pipes.AccessControl**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Windows.Extensions**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Resources.Extensions**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.AccessControl**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.Cryptography.Pkcs**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.Cryptography.ProtectedData**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.Permissions**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.Principal.Windows**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Text.Encodings.Web**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Text.Json**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Threading.AccessControl**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3641)","Url":"https://github.com/dotnet/winforms/pull/3641","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3641)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-07-30T05:30:52.6535958Z","RunDurationInMilliseconds":593}