{"Data":{"GitHub":{"Issues":[{"Id":"782737976","IsPullRequest":false,"CreatedAt":"2021-01-10T04:07:00","Actor":"RussKie","Number":"4449","RawContent":null,"Title":"Incorrect toolbar location when restored via `ToolStripManager.LoadSettings`","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\nPresumably all versions:\r\n* .NET Framework: 4.6.1 (tested)\r\n* .NET Version: 5.0 (tested)\r\n\r\n\r\n**Problem description:**\r\n\r\nOriginally reported in https://github.com/gitextensions/gitextensions/issues/8680. \r\n\r\nIf an application has multiple toolbars, and those are placed at an arbitrary location and persisted via `ToolStripManager.SaveSettings`, not all toolbars will be correctly located once `ToolStripManager.LoadSettings` is called.\r\nE.g. on save:\r\n![image](https://user-images.githubusercontent.com/4403806/104114132-0409aa80-5355-11eb-81fb-54dc4c324249.png)\r\n\r\nOn load:\r\n![image](https://user-images.githubusercontent.com/4403806/104114140-213e7900-5355-11eb-9735-718cefab6bec.png)\r\n\r\n\r\n**Expected behavior:**\r\n\r\nThe location of the toolbars persisted in the config must be preserved.\r\n\r\n\r\n**Minimal repro:**\r\n\r\n1. clone https://github.com/RussKie/Test-ToolStripLoad\r\n1. Run the app, align both toolbars to the left one under another.\r\n2. Stop the app.\r\n3. Open the user.config file, located somethere at `C:\\Users\\<user>\\AppData\\Local\\ToolstripLoad\\ToolstripLoad_Url_<random string>\\1.0.0.0`, check that both toolbars' locations are like this:\r\n```xml\r\n        <System.Windows.Forms.ToolStripSettings.toolsettings.ToolStripFilters>\r\n            <setting name=\"Name\" serializeAs=\"String\">\r\n                <value>ToolStripFilters</value>\r\n            </setting>\r\n            <setting name=\"Location\" serializeAs=\"String\">\r\n                <value>7, 25</value>\r\n            </setting>\r\n        </System.Windows.Forms.ToolStripSettings.toolsettings.ToolStripFilters>\r\n        <System.Windows.Forms.ToolStripSettings.toolsettings.ToolStripMain>\r\n            <setting name=\"Name\" serializeAs=\"String\">\r\n                <value>ToolStripMain</value>\r\n            </setting>\r\n            <setting name=\"Location\" serializeAs=\"String\">\r\n                <value>7, 0</value>\r\n            </setting>\r\n        </System.Windows.Forms.ToolStripSettings.toolsettings.ToolStripMain>\r\n```\r\n4. Run the app again and observe the bottom toolbar shifted by few pixels to the right.\r\n5. Close the app and see that the location value for `ToolStripFilters` has changed.","Url":"https://github.com/dotnet/winforms/issues/4449","RelatedDescription":"Open issue \"Incorrect toolbar location when restored via `ToolStripManager.LoadSettings`\" (#4449)"},{"Id":"782603665","IsPullRequest":true,"CreatedAt":"2021-01-09T13:26:40","Actor":"dotnet-maestro[bot]","Number":"4447","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20210108.3\r\n- **Date Produced**: 1/8/2021 7:58 PM\r\n- **Commit**: 1571d6b095014ad63fdb48b10f5dea912f96872e\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.20630.2 to 6.0.0-beta.21058.3][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.20630.2 to 6.0.0-beta.21058.3][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.20630.2 to 6.0.0-beta.21058.3][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.20630.2 to 6.0.0-beta.21058.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.20630.2 to 6.0.0-beta.21058.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/4c8515c...1571d6b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4447)","Url":"https://github.com/dotnet/winforms/pull/4447","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4447)"},{"Id":"782580862","IsPullRequest":false,"CreatedAt":"2021-01-09T10:42:10","Actor":"RussKie","Number":"4446","RawContent":null,"Title":"Incorrect toolbar location at 125%+ scale factor","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\nPresumably all versions:\r\n* .NET Framework: 4.6.1 (tested)\r\n* .NET Version: 5.0 (tested)\r\n\r\n\r\n**Problem description:**\r\n\r\nOriginally reported in https://github.com/gitextensions/gitextensions/issues/8680. \r\n\r\nAn application with two toolbars placed on the same lane, one after another. When the app is run in scaled environments (i.e. 125%+) the toolbars will get re-odered if the first toolbar becomes longer than the location of the second toolbar.\r\n\r\nThe same problem isn't observed at 100% scale factor, or if the repro app doesn't use its app.manifest.\r\n\r\n* Designer:\r\n![image](https://user-images.githubusercontent.com/4403806/104089377-9ca31a80-52c2-11eb-8884-148fb2b63fc9.png)\r\n\r\n* Runtime 100%\r\n![image](https://user-images.githubusercontent.com/4403806/104089397-c4927e00-52c2-11eb-9b42-fede30dde77f.png)\r\n\r\n* Runtime 150%\r\n![image](https://user-images.githubusercontent.com/4403806/104089413-decc5c00-52c2-11eb-932f-79236d5306ad.png)\r\n\r\n\r\n**Expected behavior:**\r\n\r\nThe order of the toolbars set at the design time must be preserved.\r\n\r\nA workaround is to remove all toolbars after `InitializeComponent();` and add them back in the correct order, e.g.:\r\n```cs\r\n        public FormBrowse()\r\n        {\r\n            InitializeComponent();\r\n\r\n            this.toolPanel.TopToolStripPanel.Controls.Clear();\r\n            this.toolPanel.TopToolStripPanel.Controls.Add(this.ToolStripFilters);\r\n            this.toolPanel.TopToolStripPanel.Controls.Add(this.ToolStripMain);\r\n\r\n        }\r\n```\r\n\r\n**Minimal repro:**\r\n\r\n1. clone https://github.com/RussKie/Test-ToolStripOrder\r\n2. run the app at 100% - observe  `ToolStripMain` before `ToolStripFilters`\r\n3. run the app at 150%+ - observe the reverse order of toolbars","Url":"https://github.com/dotnet/winforms/issues/4446","RelatedDescription":"Open issue \"Incorrect toolbar location at 125%+ scale factor\" (#4446)"},{"Id":"782234566","IsPullRequest":false,"CreatedAt":"2021-01-08T21:49:01","Actor":"transis2","Number":"4445","RawContent":null,"Title":"Create #if to diferentiate Winform and WPF","State":"closed","Body":"I'm converting some projects from .Net Framework to .Net 5 and don't know how to separate the code from winform and wpf.\r\nEg.:\r\nWould be nice if we have:\r\n\r\n#IF WINFORM Then\r\nlabelStatus.Text = \"\"\r\n#Else\r\nlabelStatus.Content = \"\"\r\n#End If\r\n","Url":"https://github.com/dotnet/winforms/issues/4445","RelatedDescription":"Closed issue \"Create #if to diferentiate Winform and WPF\" (#4445)"},{"Id":"782109130","IsPullRequest":true,"CreatedAt":"2021-01-08T13:11:49","Actor":"dotnet-maestro[bot]","Number":"4444","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20210109.3\r\n- **Date Produced**: 1/9/2021 10:53 PM\r\n- **Commit**: 9c12a1f7a108ee0753faf486baf96f8fe685d829\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21059.3][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/81b9558...9c12a1f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4444)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/4444","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/runtime\" (#4444)"},{"Id":"778620124","IsPullRequest":true,"CreatedAt":"2021-01-08T02:24:53","Actor":"Amy-Li03","Number":"4432","RawContent":null,"Title":"Custom accessibleRole, accessibleName, accessibleDescription for controls in Accessibility test app","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\nIn this PR, we custom accessibleRole, accessibleName, accessibleDescription for all controls which supported these properties.\r\n\r\n## Proposed changes\r\n\r\n- Create a new form in Accessibility test solution, add all supported controls to form and custom their accessibleRole, accessibleName, accessibleDescription properties.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\nNo\r\n\r\n## Regression? \r\n\r\n No\r\n\r\n## Risk\r\nNo\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing using Inspect and Accessibility Insight\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .Net SDK 6.0.100-alpha.1.20623.10\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4432)","Url":"https://github.com/dotnet/winforms/pull/4432","RelatedDescription":"Closed or merged PR \"Custom accessibleRole, accessibleName, accessibleDescription for controls in Accessibility test app\" (#4432)"},{"Id":"781416825","IsPullRequest":false,"CreatedAt":"2021-01-07T15:56:35","Actor":"rummelsworth","Number":"4443","RawContent":null,"Title":"\"window.external\" evaluation in WebBrowser control gives error \"Unexpected call to method or property access.\"","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: .NET 5.0.101\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: No.\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\nAs of .NET 5.0, the “window.external” object reference that’s intended to provide access to the WebBrowser.ObjectForScripting property value does not work. It worked in .NET Core 3.1.\r\n\r\nI didn't find any information about this behavior in the .NET 5 documentation for Breaking Changes or Known Issues.\r\n\r\nEvaluating “window.external” in the control’s browser environment produces the following error message:\r\n\r\n“Unexpected call to method or property access.”\r\n\r\nHere’s a screenshot of the error:\r\n\r\n![webbrowser control error](https://user-images.githubusercontent.com/3069355/103913376-13c38d80-50ce-11eb-80ca-99e6def51ef9.png)\r\n\r\n**Expected behavior:**\r\n\r\nA \"normal\" message box should show (with the message \"called from script code\").\r\n\r\n**Minimal repro:**\r\n\r\nhttps://github.com/rummelsworth/WebBrowserControlTutorial\r\n\r\nThe above-linked repo is an implementation of the [WebBrowser control's \"2-way communication\" tutorial][web-browser-2-way-comms]. It has 3 branches:\r\n- One branch targets netcoreapp3.1 and does not reproduce the error.\r\n- The main branch targets net5.0 and reproduces the error.\r\n- Another branch also targets net5.0 but has been migrated to use WebView2 instead of WebBrowser.\r\n\r\n[web-browser-2-way-comms]: https://docs.microsoft.com/en-us/dotnet/desktop/winforms/controls/implement-two-way-com-between-dhtml-and-client?view=netframeworkdesktop-4.8","Url":"https://github.com/dotnet/winforms/issues/4443","RelatedDescription":"Open issue \"\"window.external\" evaluation in WebBrowser control gives error \"Unexpected call to method or property access.\"\" (#4443)"},{"Id":"781302543","IsPullRequest":true,"CreatedAt":"2021-01-07T13:31:31","Actor":"dotnet-maestro[bot]","Number":"4442","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20210107.2\r\n- **Date Produced**: 1/7/2021 9:25 AM\r\n- **Commit**: 81b9558199454adc6cc2a0e34cc64ebeb8f754c6\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/dd3da2b...81b9558\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4442)","Url":"https://github.com/dotnet/winforms/pull/4442","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4442)"},{"Id":"781173143","IsPullRequest":false,"CreatedAt":"2021-01-07T09:38:38","Actor":"LiorBanai","Number":"4441","RawContent":null,"Title":"[NET 5.0] NumericUPDown Exception","State":"open","Body":"Hi,\r\nI have switched from 3.1 to net 5 and have strange exception on winforms launch on newing NumericUpDowm:\r\n\r\n```Unable to find an entry point named 'UiaRaiseNotificationEvent' in DLL 'UIAutomationCore.dll'.```\r\n\r\nwhich is not clear what is the source.\r\nThe application still  runs ok and I can ignore this error.\r\n\r\n![image](https://user-images.githubusercontent.com/36262995/103876599-820f4c80-50dc-11eb-9029-506c2bc7deb1.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/4441","RelatedDescription":"Open issue \"[NET 5.0] NumericUPDown Exception\" (#4441)"},{"Id":"779996835","IsPullRequest":true,"CreatedAt":"2021-01-06T22:48:48","Actor":"RussKie","Number":"4438","RawContent":null,"Title":"Check font returned via `SystemParametersInfoW` interop","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4438)","Url":"https://github.com/dotnet/winforms/pull/4438","RelatedDescription":"Closed or merged PR \"Check font returned via `SystemParametersInfoW` interop\" (#4438)"},{"Id":"780543254","IsPullRequest":true,"CreatedAt":"2021-01-06T13:37:41","Actor":"dotnet-maestro[bot]","Number":"4440","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20210105.17\r\n- **Date Produced**: 1/6/2021 8:25 AM\r\n- **Commit**: dd3da2b5e8d4655414f8b6fbe3a97fbe0f8ee8af\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/fd5609d...dd3da2b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4440)","Url":"https://github.com/dotnet/winforms/pull/4440","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4440)"},{"Id":"780513862","IsPullRequest":false,"CreatedAt":"2021-01-06T12:21:32","Actor":"SergeySmirnov-Akvelon","Number":"4439","RawContent":null,"Title":"[Accessibility] Tree node has no keyboard tooltip","State":"open","Body":"- .NET Core Version: 5.0\r\n- Have you experienced this same bug with .NET Framework?: Yes\r\n\r\n**Problem description:**\r\n- TreeNode has no keyboard tooltip when pressing the up/down arrow or Tab button to navigate to a TreeNode which got the keyboard focus\r\n\r\n**Expected behavior:**\r\n- TreeNode has a keyboard tooltip\r\n\r\n**Minimal repro:**\r\n1. Create .Net Core 5.0 app\r\n2. Add a TreeView to the app\r\n3. Add nodes to the TreeView\r\n4. Set tooltips for TreeNodes\r\n5. Allow showing tooltips for nodes\r\n6. Run the app and try to get a node tooltip using a keyboard navigation","Url":"https://github.com/dotnet/winforms/issues/4439","RelatedDescription":"Open issue \"[Accessibility] Tree node has no keyboard tooltip\" (#4439)"},{"Id":"778862843","IsPullRequest":false,"CreatedAt":"2021-01-06T04:01:16","Actor":"PavelAgurov","Number":"4435","RawContent":null,"Title":"Default size of Button in design time","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: 3.1\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nWhen I added new button on the form I have 8x8 button. In .NET WinForms it was much better - default size was useful.\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\n\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/4435","RelatedDescription":"Closed issue \"Default size of Button in design time\" (#4435)"},{"Id":"779546037","IsPullRequest":false,"CreatedAt":"2021-01-05T20:41:55","Actor":"leecow","Number":"4437","RawContent":null,"Title":"Self-Contained Single-File Win Form app does not run","State":"open","Body":"---\r\n**Issue moved from microsoft/dotnet#1285**\r\n- Please respond to @jwu-dharmo.\r\n\r\n---\r\n\r\n_From @jwu-dharmo on Monday, January 4, 2021 5:32:39 PM_\r\n\r\nI am on VS 2019 16.8.3 with .Net 5.0.\r\n\r\nI have created a simple Win Form project without any NuGet or project dependency.  I have made sure it runs out of the IDE.\r\n\r\nWhen I published the project to a self-contained single file exe, it does not run.  The Task explorer briefly showed the exe and switch it to suspended before killing it.  The exe worked fine after I republished it either without the single-file or the self-contained option.  It seems like both options cannot co-exist.\r\n\r\nAny idea?","Url":"https://github.com/dotnet/winforms/issues/4437","RelatedDescription":"Open issue \"Self-Contained Single-File Win Form app does not run\" (#4437)"},{"Id":"779008013","IsPullRequest":true,"CreatedAt":"2021-01-05T13:31:47","Actor":"dotnet-maestro[bot]","Number":"4436","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20210104.6\r\n- **Date Produced**: 1/5/2021 12:16 AM\r\n- **Commit**: fd5609d44cfa904334864e113f253ed9c5e660b8\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/144cac3...fd5609d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4436)","Url":"https://github.com/dotnet/winforms/pull/4436","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4436)"},{"Id":"778859256","IsPullRequest":false,"CreatedAt":"2021-01-05T10:45:33","Actor":"PavelAgurov","Number":"4434","RawContent":null,"Title":"Performance issue of Core WinForms Designer","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: 3.1\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n\r\nPerformance of Core WinForms designer is VERY bad to compare with .NET WinForms.\r\nSometimes I should click on control and wait 10-30 sec to select this control and ability to edit it in Property Grid.\r\nWhen I save changes in designer it takes much more time then it was in .NET WinForms.\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\n\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/4434","RelatedDescription":"Closed issue \"Performance issue of Core WinForms Designer\" (#4434)"},{"Id":"778856870","IsPullRequest":false,"CreatedAt":"2021-01-05T10:40:57","Actor":"PavelAgurov","Number":"4433","RawContent":null,"Title":"Click method copied when I copied Button control on core winforms","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: 3.1\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nWhen I copy Button control on the form I got new button, but Click method is also copied.\r\nIt's not useful because usually I want to create new button with other handler.\r\nIn .NET WinForms it works correctly.\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\n\r\nExpected result - copy of Button without Click handler to have ability to create new one.\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/4433","RelatedDescription":"Open issue \"Click method copied when I copied Button control on core winforms\" (#4433)"},{"Id":"778165627","IsPullRequest":false,"CreatedAt":"2021-01-04T15:15:58","Actor":"weltkante","Number":"4431","RawContent":null,"Title":"Provide source span in LinkClicked handler of RichTextBox","State":"open","Body":"This supersedes #4419 and #4418\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\n(1) When using `RichTextBox` with hyperlinks and handling `LinkClicked` you get either passed the source text of the link or (in case of the official hyperlink markup) the hidden text containing the hyperlink. The [documentation](https://docs.microsoft.com/en-us/archive/blogs/murrays/richedit-friendly-name-hyperlinks) contains instructions of how to obtain the display text if you need it, but currently it is not possible to follow these instructions in WinForms because the span clicked is not known. You could search for the hyperlink text in the source text but if you have the same link multiple times with different display texts its not possible to know which you clicked.\r\n\r\n(2) In older versions of the `RichTextBox` control (before the .NET 4.7 series switched to a newer native control) it was possible to make hidden text part of the link, which would be included when invoking the `LinkClicked` event. This is no longer possible because the current version of the native control does not allow hidden text to be part of a link (it will remove the link attribute from hidden text and split the link into multiple parts, see #4418)\r\n\r\n(3) Besides these two scenarios there's also the general use-case of wanting to click a hyperlink and then modify the document around that link (e.g. by erasing a section or adding additional details to a section). For this it would be useful to know the source span as well.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n\r\nAll three scenarios are possible to work around so this is not a blocking problem, but having the source span available would be more convenient since you don't have to maintain a collection of unique identifiers.\r\n* workaround for (1) is to give hyperlinks unique identifiers and map those to the actual URLs in a dictionary. To access the display text (if you don't want to just put it in the dictionary as well) you can then search for the unique identifier in the source text and find the span clicked. From there you can get the display text according to the official documentation.\r\n* workaround for (2) is to not use hidden text to pass information to the `LinkClicked` handler (this simply doesn't work anymore). Instead use the official hyperlink markup and either pass the hidden information as hyperlink, or generate a unique identifier and lookup your information from that.\r\n* workaround for (3) is to generate unique identifiers and use hyperlink markup, then find them in the source text and perform your edits around them\r\n\r\nHowever, given that WinForms already has obtained the information about the source span from the native control it would be nice to just pass it on to managed code.\r\n\r\nSuggested API:\r\n```csharp\r\npublic class LinkClickedEventArgs : EventArgs\r\n{\r\n    public LinkClickedEventArgs(string linkText); // existing (keep for compatibility, perhaps mark obsolete)\r\n    public LinkClickedEventArgs(string linkText, int linkStart, int linkLength); // new\r\n    public string LinkText { get; } // existing\r\n    public string LinkStart { get; } // new, default to zero if not specified\r\n    public string LinkLength { get; } // new, default to zero if not specified\r\n}\r\n```\r\nThe naming of the new properties is chosen to match the existing `SelectionStart` and `SelectionLength` properties.\r\n\r\nI'd keep the existing constructor since it was publically accessible previously and people may have created instances of this event (unlikely but not unreasonable, e.g. if you want to reuse event handler code and call it outside of the event).\r\n\r\nThe existing constructor would use `LinkStart=0` and `LinkLength=0` to indicate that no link span is available, yet the span is always valid to index into `RichTextBox.Text` so callers don't need to explicitly check (they'd get back an empty string if they index the source text unconditionally).\r\n\r\nThe new constructor should verify `linkStart` and `linkLength` to not be negative, as well as not overflowing when added (its unreasonable to have every user of the event safeguard its logic against overlow, much better to do it just once in the constructor). It would not verify that the span lies within the `RichTextBox.Text` because it has no reference to it and can be constructed independently.\r\n\r\n(I'll add some examples later how to make use of the source span, but it is nothing surprising, just indexing into `RichTextBox.Text` or using interop to access the `ITextRange` if you need richer API. While it would be nice to have a managed API over the `ITextDocument` interop, having the source span in the event is really the most important missing information as you cannot easily obtain it via custom interop, unless you subclass the control and catch the native LinkClicked notification before WinForms does.)\r\n\r\n**Will this feature affect UI controls?**\r\n\r\nThis affects the coding against UI controls, but not their appearance or design time.\r\n","Url":"https://github.com/dotnet/winforms/issues/4431","RelatedDescription":"Open issue \"Provide source span in LinkClicked handler of RichTextBox\" (#4431)"},{"Id":"778084582","IsPullRequest":true,"CreatedAt":"2021-01-04T13:31:36","Actor":"dotnet-maestro[bot]","Number":"4430","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20210103.3\r\n- **Date Produced**: 1/4/2021 12:46 AM\r\n- **Commit**: 144cac3d0ce162444452a5dcc837b904fe149ef4\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-alpha.1.21052.6 to 6.0.0-alpha.1.21053.3][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/e87e32f...144cac3\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4430)","Url":"https://github.com/dotnet/winforms/pull/4430","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4430)"},{"Id":"777992555","IsPullRequest":false,"CreatedAt":"2021-01-04T10:28:15","Actor":"Amy-Li03","Number":"4429","RawContent":null,"Title":"[Accessibility] An element of the given ControlType must support the SelectionItem pattern for some controls which AccessibleRole property is PageTab ","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.Net SDK 6.0.100-alpha.1.20623.10\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n* More info: \r\n1. This is a regression issue, it doesn't repro on .NET Core 3.1 & .NET 5.0\r\n2. These controls reproduce this issue: Button, CheckBox, ComboBox, Label, MonthCalendar, NumericUpdown, ProgressBar, ListBox, ListView\r\n3. These controls doesn't reproduce this issue: CheckListBox, DateTimePicker, LinkLabel, TextBox, RichTextBox, RadioButton, TreeView\r\n\r\n**Minimal repro:**\r\n[TestApp.zip](https://github.com/dotnet/winforms/files/5764188/TestApp.zip)\r\n\r\n1. Create a winforms .NET core project with a Button control\r\n2. Set button's AccessibleRole property as **PageTab**\r\n3. Build and run the core project\r\n4. Observe Button using the Accessibility Insight\r\n\r\n**Actual behavior:**\r\nAccessibilityInsights detected an error: An element of the given ControlType must support the SelectionItem pattern\r\n![Core](https://user-images.githubusercontent.com/62929087/103524272-3f6d2a80-4eb8-11eb-879e-3c3b0da09f8f.png)\r\n\r\n**Expected behavior:**\r\nAccessibilityInsights should not detect this error.","Url":"https://github.com/dotnet/winforms/issues/4429","RelatedDescription":"Open issue \"[Accessibility] An element of the given ControlType must support the SelectionItem pattern for some controls which AccessibleRole property is PageTab \" (#4429)"},{"Id":"777971704","IsPullRequest":false,"CreatedAt":"2021-01-04T09:55:19","Actor":"Amy-Li03","Number":"4428","RawContent":null,"Title":"[Accessibility] An element of the given ControlType must support the Toggle pattern for PropertyGrid","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.Net SDK 6.0.100-alpha.1.20623.10\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n* More info:\r\n1. This issue doesn't repro on .Net core 3.1 & .Net 5.0\r\n2. In Inspect, the IsTogglePattermAvailable property is **false** both .Net framework and .Net core projet.\r\n\r\n**Minimal repro:**\r\n[DemoApp.zip](https://github.com/dotnet/winforms/files/5764054/DemoApp.zip)\r\n\r\n1. Create a winforms .NET core project with targeting 6.0\r\n2. Add a PropertyGrid control to the form designer\r\n3. Build and run the core project\r\n4. Observe PropertyGrid using the Accessibility Insight\r\n\r\n**Actual behavior:**\r\nAccessibilityInsights detected an error: An element of the given ControlType must support the Toggle pattern\r\n![Core](https://user-images.githubusercontent.com/62929087/103522352-37f85200-4eb5-11eb-8f29-93c641f5e90f.PNG)\r\n\r\n**Expected behavior:**\r\nAccessibilityInsights should not detect this error.","Url":"https://github.com/dotnet/winforms/issues/4428","RelatedDescription":"Open issue \"[Accessibility] An element of the given ControlType must support the Toggle pattern for PropertyGrid\" (#4428)"},{"Id":"777961117","IsPullRequest":false,"CreatedAt":"2021-01-04T09:37:45","Actor":"Amy-Li03","Number":"4427","RawContent":null,"Title":"[Accessibility] An element of the given controlType must support the ExpandCollapse pattern for some controls which AccessibleRole property is SplitButton","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.Net SDK 6.0.100-alpha.1.20623.10\r\n\r\n* More info:\r\n 1. For most controls, this is a regression issue, it doesn't repro on .Net framework & .Net core 3.1 & .Net 5.0\r\n 2. For some controls (MasketTextBox, TextBox, dateTimePicker, CheckListBox), this is a not regression issue, it still repro on  .Net framework & .Net core 3.1 & .Net 5.0\r\n\r\n**Minimal repro:**\r\n[TestApp.zip](https://github.com/dotnet/winforms/files/5764004/TestApp.zip)\r\n\r\n1. Create a winforms .NET core project with targeting 6.0\r\n2. Add a  TooStrip control to the form designer, then add items for toolStrip, and set Items' AccessibleRole property as **SplitButton**\r\n3. Build and run the core project.\r\n4. Observe item of toolStrip using the Accessibility Insight\r\n\r\n**Actual behavior:**\r\nAccessibilityInsights detected an error: An element of the given controlType must support the ExpandCollapse pattern.\r\n![Actual](https://user-images.githubusercontent.com/62929087/103521025-0d0cfe80-4eb3-11eb-8190-8bec3d8cb538.PNG)\r\n\r\n**Expected behavior:**\r\nAccessibilityInsights should not detect this error.\r\n","Url":"https://github.com/dotnet/winforms/issues/4427","RelatedDescription":"Open issue \"[Accessibility] An element of the given controlType must support the ExpandCollapse pattern for some controls which AccessibleRole property is SplitButton\" (#4427)"},{"Id":"777816450","IsPullRequest":true,"CreatedAt":"2021-01-04T05:40:33","Actor":"dotnet-maestro[bot]","Number":"4426","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20210102.6\r\n- **Date Produced**: 1/3/2021 1:26 AM\r\n- **Commit**: e87e32f50caa4122cf689eebb3810989dee6e125\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-alpha.1.21051.2 to 6.0.0-alpha.1.21052.6][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/c985bdc...e87e32f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4426)","Url":"https://github.com/dotnet/winforms/pull/4426","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4426)"},{"Id":"777488427","IsPullRequest":true,"CreatedAt":"2021-01-04T03:57:28","Actor":"gpetrou","Number":"4423","RawContent":null,"Title":"Enable nullability in DragEventArgs and ItemDragEventArgs","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in DragEventArgs and ItemDragEventArgs.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4423)","Url":"https://github.com/dotnet/winforms/pull/4423","RelatedDescription":"Closed or merged PR \"Enable nullability in DragEventArgs and ItemDragEventArgs\" (#4423)"},{"Id":"777592609","IsPullRequest":true,"CreatedAt":"2021-01-03T23:46:41","Actor":"gpetrou","Number":"4425","RawContent":null,"Title":"Use 'is not null' in some System.Windows.Forms files","State":"closed","Body":"Contributes to https://github.com/dotnet/winforms/issues/3459\r\n\r\n## Proposed changes\r\n\r\n- Use 'is not null' in some System.Windows.Forms files.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4425)","Url":"https://github.com/dotnet/winforms/pull/4425","RelatedDescription":"Closed or merged PR \"Use 'is not null' in some System.Windows.Forms files\" (#4425)"},{"Id":"777493587","IsPullRequest":true,"CreatedAt":"2021-01-02T17:13:19","Actor":"gpetrou","Number":"4424","RawContent":null,"Title":"Use generic lists in LinkLabel","State":"open","Body":"## Proposed changes\r\n\r\n- Use generic lists in LinkLabel.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4424)","Url":"https://github.com/dotnet/winforms/pull/4424","RelatedDescription":"Open PR \"Use generic lists in LinkLabel\" (#4424)"},{"Id":"777300086","IsPullRequest":false,"CreatedAt":"2021-01-01T15:08:45","Actor":"r-aghaei","Number":"4422","RawContent":null,"Title":"HelpProvider is unable to show Unicode characters","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n**.NET Core Version:** \r\n* .NET 5\r\n\r\n**Have you experienced this same bug with .NET Framework?**\r\n* Yes\r\n\r\n**Problem description:**\r\n\r\n[HelpProvider](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.helpprovider?view=net-5.0&WT.mc_id=DT-MVP-5003235) component is unable to show Unicode characters (e.g. Persian language):\r\n\r\n![image](https://user-images.githubusercontent.com/25272166/103447074-72010280-4cc1-11eb-8997-f8ab7373e648.png)\r\n\r\nI also have set the language for non-Unicode programs to \"Persian\" language (in regional settings):\r\n\r\n![image](https://user-images.githubusercontent.com/25272166/103447036-0dde3e80-4cc1-11eb-864a-1c3a6a942f2c.png)\r\n\r\n**Expected behavior:**\r\nLike all other controls and components, it should be able to show Unicode characters, regardless of the regional settings, or at least respect to regional settings.\r\n\r\n![image](https://user-images.githubusercontent.com/25272166/103447128-fd7a9380-4cc1-11eb-8295-98f70573c530.png)\r\n\r\n**Minimal repro:**\r\n\r\n    var f = new Form();\r\n    f.HelpButton = true;\r\n    f.MinimizeBox = f.MaximizeBox = false;\r\n    var button = new Button()\r\n    {\r\n        Text = \"Click on help button and then on me!\",\r\n        AutoSize = true\r\n    };\r\n    f.Controls.Add(button);\r\n    var helpProvider = new HelpProvider();\r\n    helpProvider.SetHelpString(button, \"متن آزمایشی\");\r\n    helpProvider.SetShowHelp(button, true);\r\n    f.Show();\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/4422","RelatedDescription":"Open issue \"HelpProvider is unable to show Unicode characters\" (#4422)"},{"Id":"777296976","IsPullRequest":true,"CreatedAt":"2021-01-01T14:46:13","Actor":"vladimir-krestov","Number":"4421","RawContent":null,"Title":"Adding the ability to get keyboard toolTips for TabPages of a TabControl","State":"open","Body":"Fixes #2717\r\nRelated Issue #4305\r\nBased on PR #2719. But the changes were significantly reworked so I have created this new PR\r\nMost of review points from #2719 were fixed here\r\n\r\n## Proposed changes\r\n\r\n- Notify `KeyboardToolTipStateMachine` about getting and losing a focus\r\n- Inverted incorrect dependencies inside `ToolTip` class\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- A user can see a TabPage toolTip when using a keyboard\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n- TODO\r\n<!-- TODO -->\r\n\r\n### After\r\n- TODO\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n- Unit tests\r\n- CTI\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- .NET Version: 6.0.0-alpha.1.20554.7\r\n- Microsoft Windows [Version 10.0.19042.685]\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4421)","Url":"https://github.com/dotnet/winforms/pull/4421","RelatedDescription":"Open PR \"Adding the ability to get keyboard toolTips for TabPages of a TabControl\" (#4421)"},{"Id":"776955832","IsPullRequest":true,"CreatedAt":"2020-12-31T13:31:46","Actor":"dotnet-maestro[bot]","Number":"4420","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20201230.2\r\n- **Date Produced**: 12/30/2020 3:54 PM\r\n- **Commit**: 4c8515c18ebe0071c32fed467ee3890fbd488898\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.20623.1 to 6.0.0-beta.20630.2][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.20623.1 to 6.0.0-beta.20630.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.20623.1 to 6.0.0-beta.20630.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.20623.1 to 6.0.0-beta.20630.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.20623.1 to 6.0.0-beta.20630.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/7e0f9bc...4c8515c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4420)","Url":"https://github.com/dotnet/winforms/pull/4420","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4420)"},{"Id":"776457240","IsPullRequest":false,"CreatedAt":"2020-12-31T09:25:02","Actor":"weltkante","Number":"4419","RawContent":null,"Title":"Provide access to RTF in LinkClicked event","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n#3399 changed how hidden text is reported in `RichTextBox.Text` but forgot to update `LinkedClickedEventArgs.LinkText`. This inconsistency is reported as #4418\r\n\r\nDuring the investigation of the issue it was noted that people were using .NET 4.6.1 hidden text behavior to pass URLs into `LinkClicked` events (for example see dotnet/winforms#3632, gitextensions/gitextensions#7162 and NLog/NLog.Windows.Forms#42) instead of using the [official hyperlink markup support](https://docs.microsoft.com/en-us/archive/blogs/murrays/richedit-friendly-name-hyperlinks) of the RTF control.\r\n\r\nHowever using this trick means the hyperlinks are not actually hyperlinks in the RTF markup, they are turned into fake hyperlinks at runtime by applying the `CFE_LINK` flag via interop, which requires writing complex code and does not support simply loading pregenerated RTF. When using proper hyperlink RTF markup there is no way to access the URL from the `LinkClicked` event handler.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n\r\nProvide access to the RTF markup instead of just providing access to the visible text\r\n\r\n```csharp\r\npublic class LinkClickedEventArgs : EventArgs\r\n{\r\n    public LinkClickedEventArgs(string linkText); // existing (keep for compatibility with existing callers)\r\n    public LinkClickedEventArgs(string linkText, string linkRtf); // new\r\n    public string LinkText { get; } // existing\r\n    public string LinkRtf { get; } // new\r\n}\r\n```\r\n\r\nIt remains to be discussed how the existing constructor should initialize `LinkRtf`. It could leave the new property empty or it could initialize it with a copy of the `LinkText`.\r\n\r\nArguably it would be nice if WinForms pre-parses the official hyperlink markup and stores the URL in an additional (third) property, but the complexity of this is much higher and I'd rather see this functionality added in this simple form first, it can later be extended to also include a `LinkUrl` property. Access to the RTF remains relevant even if you add the URL later as a separate property, for supporting hyperlinks generated via `CFE_LINK` interop.\r\n\r\n**Will this feature affect UI controls?**\r\nno, this is adding a new feature for code to access, existing code will simply not use the new properties","Url":"https://github.com/dotnet/winforms/issues/4419","RelatedDescription":"Closed issue \"Provide access to RTF in LinkClicked event\" (#4419)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-01-11T05:30:50.0723709Z","RunDurationInMilliseconds":622}