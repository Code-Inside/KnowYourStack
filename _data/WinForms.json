{"Data":{"GitHub":{"Issues":[{"Id":"1650035591","IsPullRequest":false,"CreatedAt":"2023-03-31T21:06:16","Actor":"JeremyKuhne","Number":"8929","RawContent":null,"Title":"API Proposal: Add Extract methods to Icon","State":"open","Body":"### Background and motivation\r\n\r\n`System.Drawing.Icon` has methods for creating icons from managed resources and associated native icons. It doesn't, however, allow you to get all native resource icons, or always specify the size that you require.\r\n\r\nThe `Icon` constructors that take a path / stream only support `.ico` files. They do allow choosing a particular size, but also try to pick a color depth based on the current display settings. Color depth matching is of limited use and these constructors are costly as they manually load the entire file, parsing it to create the \"best-fit\" icon. The full stream is kept in memory.\r\n\r\n`System.Drawing.Icon.ExtractAssociatedIcon()` has some overlap with these new APIs. It will load the first icon from the file it's given or fall back on whatever executable the file is associated with. The API used for this doesn't allow specifying a size. (We could spin our own by calling [`FindExecutable`](https://learn.microsoft.com/windows/win32/api/shellapi/nf-shellapi-findexecutablew) if we find a need in the future.)\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Drawing;\r\n\r\npublic class Icon\r\n{\r\n    // The existing Extract method.\r\n    public static Icon ExtractAssociatedIcon(string! filePath);\r\n\r\n    // The following work with .ico files as well as PE files (.exe, .dll, etc.). The id is an index when positive or a resource id when negative.\r\n\r\n    // Retrieves the specified icon at the current system icon size setting (large by default).\r\n    public static Icon? ExtractIcon(string! filePath, int id, bool smallIcon = false);\r\n\r\n    // Allows retrieving the specified icon at a specific size (say 32x32). Icon sizes are always square.\r\n    public static Icon? ExtractIcon(string! filePath, int id, ushort size);\r\n\r\n    // Gets the icon count for the specified file.\r\n    public static int GetIconCount(string! filePath);\r\n}\r\n\r\npublic static class SystemIcons\r\n{\r\n    // Existing.\r\n    public static unsafe Icon GetStockIcon(StockIconId stockIcon, StockIconOptions options = StockIconOptions.Default);\r\n\r\n    // New. When asking for an explicit size (as opposed to just large/small) other options aren't available.\r\n    public static unsafe Icon GetStockIcon(StockIconId stockIcon, ushort size);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\n// Get the first icon in regedit.exe at 32x32 size.\r\nusing Icon icon = Icon.ExtractIcon(\"regedit.exe\", id: 0, size: 32);\r\n\r\n// Get the icon from devenv.exe with the 1200 resource id, at the default large size\r\nusing Icon icon = Icon.ExtractIcon(\"devenv.exe\", id: -1200);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nCould potentially add additional constructors to `Icon`, but behavior differences between string overloads would probably be confusing. For example, as the entire source file is not copied, resizing via `Copy` is scaled, instead of reparsed.\r\n\r\n### Risks\r\n\r\n_No response_\r\n\r\n### Will this feature affect UI controls?\r\n\r\nNo.","Url":"https://github.com/dotnet/winforms/issues/8929","RelatedDescription":"Open issue \"API Proposal: Add Extract methods to Icon\" (#8929)"},{"Id":"1648464989","IsPullRequest":true,"CreatedAt":"2023-03-31T18:44:50","Actor":"JeremyKuhne","Number":"8923","RawContent":null,"Title":"Bring API proposal template in line with .NET runtime","State":"closed","Body":"For easier interaction with the review process, copying most of the .NET Runtime issue template for new API.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8923)","Url":"https://github.com/dotnet/winforms/pull/8923","RelatedDescription":"Closed or merged PR \"Bring API proposal template in line with .NET runtime\" (#8923)"},{"Id":"1649805541","IsPullRequest":true,"CreatedAt":"2023-03-31T18:08:31","Actor":"ALiwoto","Number":"8928","RawContent":null,"Title":"Refactor `ControlCollection.AddRange` to use params keyword.","State":"open","Body":"Currently [Control.ControlCollection.AddRange](https://github.com/dotnet/winforms/blob/a37c1817d3f965d9a8bdd3d89fd0b98609715e84/src/System.Windows.Forms/src/System/Windows/Forms/Control.ControlCollection.cs#L153) method is accepting an array of `Control`, this means each time that we want to add multiple controls at once, we have to make a new array. By using `params` keyword using this method will become easier.\r\n\r\n## Proposed changes\r\n- Add `params` keyword to arguments of `ControlCollection.AddRange` method.\r\n\r\n\r\n## Regression? \r\n\r\n-  No\r\n\r\n## Risk\r\n\r\n- None\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8928)","Url":"https://github.com/dotnet/winforms/pull/8928","RelatedDescription":"Open PR \"Refactor `ControlCollection.AddRange` to use params keyword.\" (#8928)"},{"Id":"1649772857","IsPullRequest":true,"CreatedAt":"2023-03-31T17:40:30","Actor":"sharwell","Number":"8927","RawContent":null,"Title":"Do not reset cursor position during test discovery","State":"open","Body":"ðŸ˜‘ ","Url":"https://github.com/dotnet/winforms/pull/8927","RelatedDescription":"Open PR \"Do not reset cursor position during test discovery\" (#8927)"},{"Id":"1649159569","IsPullRequest":true,"CreatedAt":"2023-03-31T17:12:15","Actor":"dkazennov","Number":"8926","RawContent":null,"Title":"Added additional new controls to test ListBox control in WinformsControlsTest.","State":"closed","Body":"Fixes #8904 (some additional control tests)\r\n\r\n\r\n## Proposed changes\r\n\r\n- Additional test controls for the new ListBox test form introduced in #8916\r\n\r\n## Customer Impact\r\n\r\n- This is an internal test. It has no impact on a customer experience.\r\n\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/102961955/229103882-5cd7ec62-b884-4fee-b122-d63bf3e74ce5.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- dotnet 8.0.100-preview.3.23165.5\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8755)\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8916)\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8926)","Url":"https://github.com/dotnet/winforms/pull/8926","RelatedDescription":"Closed or merged PR \"Added additional new controls to test ListBox control in WinformsControlsTest.\" (#8926)"},{"Id":"1647483598","IsPullRequest":true,"CreatedAt":"2023-03-31T17:08:47","Actor":"dotnet-maestro[bot]","Number":"8920","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230329.13\r\n- **Date Produced**: March 30, 2023 4:44:49 AM UTC\r\n- **Commit**: 2d90e251f9f6c4509de6641a6bc39ac7a35cc032\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.CodeDom**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.ComponentModel.Composition**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Data.Odbc**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Data.OleDb**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.DirectoryServices.Protocols**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.IO.Ports**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Management**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Reflection.Context**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Runtime.Caching**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.ServiceModel.Syndication**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Speech**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Text.Encoding.CodePages**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Text.Json**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.4.23178.18 to 8.0.0-preview.4.23179.13][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/9111203d54...2d90e251f9\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8920)","Url":"https://github.com/dotnet/winforms/pull/8920","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8920)"},{"Id":"1648989275","IsPullRequest":true,"CreatedAt":"2023-03-31T16:44:36","Actor":"halgab","Number":"8925","RawContent":null,"Title":"Fix nullability of ArgumentValidation class","State":"closed","Body":"## Proposed changes\r\n\r\nThe null-checking extension methods defined in ArgumentValidation are lacking an annotation stating that the first argument is checked for null. This PR adds it back.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8925)","Url":"https://github.com/dotnet/winforms/pull/8925","RelatedDescription":"Closed or merged PR \"Fix nullability of ArgumentValidation class\" (#8925)"},{"Id":"1648149717","IsPullRequest":true,"CreatedAt":"2023-03-31T06:20:53","Actor":"DJm00n","Number":"8922","RawContent":null,"Title":"Remove use of deprecated LoadCursor/LoadIcon Win32 APIs","State":"closed","Body":"[LoadCursor](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadcursorw)/[LoadIcon](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadiconw) Win32 APIs are superseded by [LoadImage](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadimagew). So just use a new function instead of them inplace. \r\n\r\n## Proposed changes\r\n\r\n- Remove use of legacy LoadCursor/LoadIcon Win32 APIs and use LoadImage instead\r\n\r\n## Customer Impact\r\n\r\n- No impact\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Little\r\n\r\n## Test methodology\r\n\r\n- Run tests\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8922)","Url":"https://github.com/dotnet/winforms/pull/8922","RelatedDescription":"Closed or merged PR \"Remove use of deprecated LoadCursor/LoadIcon Win32 APIs\" (#8922)"},{"Id":"1648553261","IsPullRequest":true,"CreatedAt":"2023-03-31T02:05:44","Actor":"sharwell","Number":"8924","RawContent":null,"Title":"Use CodeAnalysis.test.globalconfig only for overrides","State":"open","Body":"All duplicate items have been removed, leaving only the unique configuration for tests. The specific configuration behavior is not changed.","Url":"https://github.com/dotnet/winforms/pull/8924","RelatedDescription":"Open PR \"Use CodeAnalysis.test.globalconfig only for overrides\" (#8924)"},{"Id":"1647483095","IsPullRequest":true,"CreatedAt":"2023-03-30T18:17:53","Actor":"dotnet-maestro[bot]","Number":"8919","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20230327.4\r\n- **Date Produced**: March 28, 2023 12:19:48 AM UTC\r\n- **Commit**: 747f53d751983dd062f39f4654bff074536e0012\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/1177b37e60...747f53d751\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8919)","Url":"https://github.com/dotnet/winforms/pull/8919","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#8919)"},{"Id":"1642350238","IsPullRequest":false,"CreatedAt":"2023-03-30T17:58:36","Actor":"dkazennov","Number":"8904","RawContent":null,"Title":"Add ListBox Control Test to WinformsControlsTest","State":"closed","Body":"As @Tanya-Solyanik proposed we need a separate form for ListBox Control Test to WinformsControlsTest.\r\n\r\nThis new feature would be for internal purposes only and would not affect UI controls. ","Url":"https://github.com/dotnet/winforms/issues/8904","RelatedDescription":"Closed issue \"Add ListBox Control Test to WinformsControlsTest\" (#8904)"},{"Id":"1645796976","IsPullRequest":true,"CreatedAt":"2023-03-30T17:58:34","Actor":"dkazennov","Number":"8916","RawContent":null,"Title":"Added a new test for ListBox Control to the WinformsControlsTest","State":"closed","Body":"Fixes #8904\r\n\r\n\r\n## Proposed changes\r\n\r\n- Added a new separate form for ListBox Control Test to the WinformsControlsTest application.\r\n\r\n## Customer Impact\r\n\r\n- This is an internal test. It has no impact on a customer experience.\r\n\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/102961955/228550011-7c1edebd-5471-49bb-93b9-f133f72908b1.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual\r\n\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- dotnet 8.0.100-preview.3.23165.5\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8755)\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8916)","Url":"https://github.com/dotnet/winforms/pull/8916","RelatedDescription":"Closed or merged PR \"Added a new test for ListBox Control to the WinformsControlsTest\" (#8916)"},{"Id":"1647927925","IsPullRequest":true,"CreatedAt":"2023-03-30T16:17:41","Actor":"DJm00n","Number":"8921","RawContent":null,"Title":"InputLanguage: Use RegLoadMUIString instead of SHLoadIndirectString API","State":"open","Body":"I have extracted part of #8573 into separate PR until decision is made on some aspects of that PR.\r\n\r\n## Proposed changes\r\n\r\n- Use `RegLoadMUIString` instead of the `SHLoadIndirectString` API as recommended at https://learn.microsoft.com/windows/win32/intl/locating-redirected-strings#load-a-language-neutral-registry-value\r\n- Move InputLanguage `GetKeyboardLayoutNameForHKL` method implementation to the internal `LayoutId` property (to ease debugging)\r\n- Added proper testing of InputLanguage.LayoutName\r\n- Added InputLanguage_Culture_ThrowsArgumentException and InputLanguage_LayoutName_UnknownExpected tests\r\n- Use `PARAM.ToInt` instead of casts in `GetHashCode` implementation\r\n\r\n## Customer Impact\r\n\r\n- Shouldn't have any visible customer impact\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Little\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\nAuto test:\r\n- InputLanguage_InputLanguageLayoutId_Expected (updated)\r\n- InputLanguage_Culture_ThrowsArgumentException (new)\r\n- InputLanguage_LayoutName_UnknownExpected  (new)\r\n\r\nManually:\r\n- Install \"Canadian Multilingual Standard\"  keyboard layout in Windows.\r\n- Add breakpoint in `InputLanguage_InstalledInputLanguages_Get_ReturnsExpected` test and run it under debugger.\r\n- Check that its `LayoutId` is `00011009` under debugger.\r\n- Check that its `LayoutName` is \"Canadian Multilingual Standard\".\r\n\r\n![image](https://user-images.githubusercontent.com/1285934/228928513-2272ba30-e23d-4de4-a61d-d9d99194ea6d.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1285934/228929329-fd9ab7a4-90a9-4a51-abc7-5d56d14f0144.png)\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8921)","Url":"https://github.com/dotnet/winforms/pull/8921","RelatedDescription":"Open PR \"InputLanguage: Use RegLoadMUIString instead of SHLoadIndirectString API\" (#8921)"},{"Id":"1647412059","IsPullRequest":true,"CreatedAt":"2023-03-30T11:15:47","Actor":"elachlan","Number":"8918","RawContent":null,"Title":"Use the `ApplicationIcon` as the `Form.DefaultIcon`","State":"open","Body":"Test implementation based on discussion.\r\n\r\nRelated: #8905 \n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8918)","Url":"https://github.com/dotnet/winforms/pull/8918","RelatedDescription":"Open PR \"Use the `ApplicationIcon` as the `Form.DefaultIcon`\" (#8918)"},{"Id":"1646296069","IsPullRequest":true,"CreatedAt":"2023-03-29T22:37:20","Actor":"dreddy-work","Number":"8917","RawContent":null,"Title":"Fix caching of DpiAwarenessContext for Mixed mode DPI hosting scenarios.","State":"closed","Body":"The `DpiAwarenessContext `is utilized to establish the desired `DpiAwarenessContext ` for a control from the moment it is initialized and is then applied when creating the control's handle. However, the current implementation of the  `DpiAwarenessContext `property evaluates the DpiContext based on the thread's current DPI awareness context. This may not accurately reflect the DPI awareness context that was initially desired for the control, particularly in scenarios where the application is running with mixed-mode DPI hosting and threads DPI awareness context is altered programmatically throughout the application.\r\n\r\nAdded unit test.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8917)","Url":"https://github.com/dotnet/winforms/pull/8917","RelatedDescription":"Closed or merged PR \"Fix caching of DpiAwarenessContext for Mixed mode DPI hosting scenarios.\" (#8917)"},{"Id":"1645157294","IsPullRequest":true,"CreatedAt":"2023-03-29T17:22:23","Actor":"trivalik","Number":"8913","RawContent":null,"Title":"fix comment typo in RichTextBoxTests.cs","State":"closed","Body":"Fixes #\r\n\r\n## Proposed changes\r\n\r\nfix comment typo in RichTextBoxTests.cs\r\n\r\n## Customer Impact\r\nNone\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- merge conflict\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8913)","Url":"https://github.com/dotnet/winforms/pull/8913","RelatedDescription":"Closed or merged PR \"fix comment typo in RichTextBoxTests.cs\" (#8913)"},{"Id":"1645666264","IsPullRequest":true,"CreatedAt":"2023-03-29T12:34:29","Actor":"dotnet-maestro[bot]","Number":"8915","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230328.18\r\n- **Date Produced**: March 29, 2023 8:16:49 AM UTC\r\n- **Commit**: 9111203d54e91560d1f61720c71c34be76069d06\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.CodeDom**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.ComponentModel.Composition**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Data.Odbc**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Data.OleDb**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.DirectoryServices.Protocols**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.IO.Ports**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Management**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Reflection.Context**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Runtime.Caching**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.ServiceModel.Syndication**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Speech**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Text.Encoding.CodePages**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Text.Json**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/beb708f6fe...9111203d54\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8915)","Url":"https://github.com/dotnet/winforms/pull/8915","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8915)"},{"Id":"1645520404","IsPullRequest":false,"CreatedAt":"2023-03-29T10:38:38","Actor":"ptdev","Number":"8914","RawContent":null,"Title":"Since Windows 11 build 22621.1344 it's no longer possible to middle click on NotifyIcon","State":"open","Body":"### .NET version\n\n.NET7\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nEver since Microsoft released the so called \"Moment 2 Update\" for Windows 11, which is build 22621.1344 (but the issue is still present on the current build 22621.1413), it's no longer possible to distinguish between middle-click and left-click when clicking on a tray icon generated by System.Windows.Forms.NotifyIcon.\r\n\r\nBefore the update, middle clicking would correctly trigger a \"middle click\" event. After the update, middle clicking the tray icon instead triggers a left-click event.\r\n\r\nThis breaks any application that may be using middle click to perform any actions.\r\n\r\nThis is most likely an issue related with Windows and not Winforms as it's also present on other libraries that use tray icons on both WPF and WinUI.\r\n\r\nI was recommended by a Microsoft Twitter account to report this on the feedback hub, which I have done here: https://aka.ms/AAk0sn4\r\n\r\nUnfortunately, there has been no feedback from Microsoft regarding this issue, so I'm posting this here as it affects a native WinForms element (NotifyIcon), so perhaps the developers/maintainers of this project have better ways to reach Microsoft regarding this issue.\n\n### Steps to reproduce\n\n1. Create an empty WinForms app and drag a NotifyIcon to it. \r\n2. Go into the NotifyIcon properties and set a test icon \r\n3. Edit Form1.cs to contain the following code:\r\n\r\n```\r\npublic partial class Form1 : Form\r\n    {\r\n        public Form1()\r\n        {\r\n            InitializeComponent();\r\n            notifyIcon1.MouseClick += Icon_MouseClick;\r\n        }\r\n\r\n        private void Icon_MouseClick(object? sender, MouseEventArgs e)\r\n        {\r\n            Debug.WriteLine(e.Button.ToString());\r\n        }\r\n    }\r\n\r\n```\r\n\r\n4. Use your mouse to left-click, right-click and middle-click the tray icon and watch the Debug window.\r\n5. Note that left and right clicks work as intended. But the middle click triggers the left click instead.\r\n\r\nThis works as intended on windows 10 (tested on a VirtualBox VM) and on any Windows 11 version before the builds mentioned above.\r\n","Url":"https://github.com/dotnet/winforms/issues/8914","RelatedDescription":"Open issue \"Since Windows 11 build 22621.1344 it's no longer possible to middle click on NotifyIcon\" (#8914)"},{"Id":"1645116091","IsPullRequest":false,"CreatedAt":"2023-03-29T06:26:37","Actor":"tibitoth","Number":"8912","RawContent":null,"Title":"After Form rename cannot generate event handlers","State":"open","Body":"### Environment\n\nVisual Studio 2022 17.5.3\r\n\n\n### .NET version\n\n.NET 6\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\n_No response_\n\n### Issue description\n\nAfter a Form rename cannot generate any event handlers from properties view,\n\n### Steps to reproduce\n\n1. Create a .NET 6 Windows Forms project\r\n2. Rename `Form1` to `MainForm`\r\n3. Add a button to the form\r\n4. Double click the button or try to add a Click event handler from Properties view.\n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8912","RelatedDescription":"Open issue \"After Form rename cannot generate event handlers\" (#8912)"},{"Id":"1644629977","IsPullRequest":true,"CreatedAt":"2023-03-28T23:09:54","Actor":"JeremyKuhne","Number":"8911","RawContent":null,"Title":"Add a couple stock icon usages to controls test","State":"closed","Body":"Change the main form icon to a stock icon and add a button using a stock icon to get some manual usages of the new System.Drawing API.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8911)","Url":"https://github.com/dotnet/winforms/pull/8911","RelatedDescription":"Closed or merged PR \"Add a couple stock icon usages to controls test\" (#8911)"},{"Id":"1642902577","IsPullRequest":true,"CreatedAt":"2023-03-28T18:31:47","Actor":"JeremyKuhne","Number":"8907","RawContent":null,"Title":"Add AppContext switch scope functionality","State":"closed","Body":"Adds the `BinaryFormatterScope` ref struct for explicitly setting `BinaryFormatter` enabled state.\r\n\r\nRan through System.Windows.Forms.Tests with the `BinaryFormatter` explicitly disabled to identify tests that were dependent and add the context to said tests.\r\n\r\nThe intent is to follow this change with additional changes to do the same for the other test assemblies. I'll be using what I find here to open additional issues or add additional context to existing ones. For example, it wasn't clear that CSV text uses the `BinaryFormatter` for the clipboard until I ran through this set of tests.\r\n\r\nAfter all assemblies are scoped I'll be then looking to close test gaps.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8907)","Url":"https://github.com/dotnet/winforms/pull/8907","RelatedDescription":"Closed or merged PR \"Add AppContext switch scope functionality\" (#8907)"},{"Id":"1643581536","IsPullRequest":true,"CreatedAt":"2023-03-28T15:25:27","Actor":"ViktorHofer","Number":"8909","RawContent":null,"Title":"Add dependencies required by windowsdesktop","State":"closed","Body":"Contributes to https://github.com/dotnet/windowsdesktop/pull/3516\r\nUnblocks https://github.com/dotnet/wpf/pull/7681\r\n\r\nMicrosoft.Windows.Compatibility is being migrated from runtime to windowsdesktop and depends on packages from dotnet/runtime. As there's already a subscription from `runtime -> winforms`, a new one can't be added directly between `runtime -> windowsdesktop` as that would cause coherency issues. Instead, we need to flow the dependencies through winforms and wpf.\r\n\r\nThe `git diff` is confusing. I just added the new dependencies at the end of the product dependencies section and removed the ones that already existed from above so that all the ones that are required by windowsdesktop are grouped together.\r\n\r\nNote that I also removed the `Microsoft.Windows.Compatiblity` dependency as that package is now produced in a higher layer (not runtime but windowsdesktop) so winforms can't depend on a live version of it. The package is only required for a test library so it felt safe to remove the live dependency and downgrade to last stable version.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8909)","Url":"https://github.com/dotnet/winforms/pull/8909","RelatedDescription":"Closed or merged PR \"Add dependencies required by windowsdesktop\" (#8909)"},{"Id":"1643371581","IsPullRequest":false,"CreatedAt":"2023-03-28T07:32:40","Actor":"r-schaefer","Number":"8908","RawContent":null,"Title":"Bindingsource not assigned","State":"open","Body":"### Environment\n\nVisual Studio 2022 - 17.5.3\n\n### .NET version\n\n7.0\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nYes\n\n### Issue description\n\nAssigning a class as data source to a binding source doesn't seems to work within the designer. The data source class can be selected but isn't assigned as data source.\r\n\r\nsee attached sample project and screenshots\r\n![screen1](https://user-images.githubusercontent.com/17042351/228161370-51a561bb-d807-4708-a5e2-045f0ef36c91.png)\r\n![screen2](https://user-images.githubusercontent.com/17042351/228161395-e83c11df-0e27-4de2-aae8-230c7849f1fc.png)\r\n[WinFormsAppTestBindingSource.zip](https://github.com/dotnet/winforms/files/11086587/WinFormsAppTestBindingSource.zip)\r\n\n\n### Steps to reproduce\n\n- Create a new winform\r\n- drop / drop a bindingsource to the form\r\n- create a simple class with one property / member\r\n- open datasource of the bindingsource  property and assign the class with \"Add new object data source\"\r\n- select the simple class and press ok\r\n\r\n- expected: the class is assigned as data source\r\n- current behaviour: the class isn't assigned\n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8908","RelatedDescription":"Open issue \"Bindingsource not assigned\" (#8908)"},{"Id":"1639271019","IsPullRequest":true,"CreatedAt":"2023-03-28T01:42:23","Actor":"dotnet-maestro[bot]","Number":"8899","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230327.1\r\n- **Date Produced**: March 27, 2023 10:56:54 AM UTC\r\n- **Commit**: beb708f6fe999cbbe5542846c9985ce596569097\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.CodeDom**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.Text.Json**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23177.1][4]\r\n\r\n[4]: https://github.com/dotnet/runtime/compare/10abc299cc...beb708f6fe\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8899)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/8899","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8899)"},{"Id":"1642573430","IsPullRequest":true,"CreatedAt":"2023-03-28T00:00:39","Actor":"dotnet-bot","Number":"8906","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2143503","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8906)","Url":"https://github.com/dotnet/winforms/pull/8906","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2143503\" (#8906)"},{"Id":"1642537475","IsPullRequest":false,"CreatedAt":"2023-03-27T17:46:59","Actor":"stcpottdav","Number":"8905","RawContent":null,"Title":"Ability to set default icon to Application Object.","State":"open","Body":"### Is your feature request related to a problem? Please describe\n\nCurrently the only way to set the default icon is via reflection.  This is risky as it is looking a the internals of the object.  It would be best to expose an API to set it.\r\n\r\nExample of a way to set the icon currently:\r\n`    typeof(Form).GetField(\"defaultIcon\",\r\n            BindingFlags.NonPublic | BindingFlags.Static)\r\n        .SetValue(null, SystemIcons.Shield);`\n\n### Describe the solution you'd like and alternatives you've considered\n\nReflection could be used, but this relies on knowing the internal structure of the object.  This is subject to change.\r\n\r\nSuggested Method.\r\nApplication.SetDefaultIcon(System.Drawing.Icon)\n\n### Will this feature affect UI controls?\n\nDesigner should not have to change for this.\r\nIt should not impact accessibility.\r\nIt should not need to be localized.\r\n","Url":"https://github.com/dotnet/winforms/issues/8905","RelatedDescription":"Open issue \"Ability to set default icon to Application Object.\" (#8905)"},{"Id":"1640210721","IsPullRequest":true,"CreatedAt":"2023-03-27T11:44:00","Actor":"dotnet-maestro[bot]","Number":"8901","RawContent":null,"Title":"[release/8.0-preview3] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0f495840-e19c-492a-4c6e-08db29643001)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 0f495840-e19c-492a-4c6e-08db29643001\r\n- **Build**: 20230324.8\r\n- **Date Produced**: March 24, 2023 11:36:16 PM UTC\r\n- **Commit**: 47bad717bd69883ec8f590ffbbfad63c868cbe55\r\n- **Branch**: refs/heads/release/8.0-preview3\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.CodeDom**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.Text.Json**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/416b9e108a...47bad717bd\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:0f495840-e19c-492a-4c6e-08db29643001)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8901)","Url":"https://github.com/dotnet/winforms/pull/8901","RelatedDescription":"Closed or merged PR \"[release/8.0-preview3] Update dependencies from dotnet/runtime\" (#8901)"},{"Id":"1641142693","IsPullRequest":false,"CreatedAt":"2023-03-26T23:33:07","Actor":"willibrandon","Number":"8903","RawContent":null,"Title":"A drag image remnant remains when dragging between different application instances","State":"open","Body":"### .NET version\n\n.NET 7\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nThis feature is new as of .NET 7.\n\n### Issue description\n\nWhen dragging between different application instances, and when a drag image is specified, a remnant of the drag image is incorrectly left displayed due to what I believe is a possible oversight in the DropSource implementation. Note that this issue does not occur when dragging within the same application instance.\r\n\r\nA video demonstrating the drag image remnant when dragging between different application instances.\r\n\r\nhttps://user-images.githubusercontent.com/5017479/227811248-964e91b9-bff8-491d-a045-1b0940a2e35e.mp4\r\n\r\nA video demonstrating the drag image behavior when dragging within the same application instance.\r\n\r\nhttps://user-images.githubusercontent.com/5017479/227811261-fdb8457b-64a2-4e6d-8ad8-eb9acfa275c9.mp4\n\n### Steps to reproduce\n\nWinformsControlTest project -> DragDrop\r\n\r\nSee the video demonstrating the issue when dragging between different application instances.","Url":"https://github.com/dotnet/winforms/issues/8903","RelatedDescription":"Open issue \"A drag image remnant remains when dragging between different application instances\" (#8903)"},{"Id":"1640701053","IsPullRequest":false,"CreatedAt":"2023-03-25T23:39:55","Actor":"kwyntes","Number":"8902","RawContent":null,"Title":"RichTextbox font family not applied to new text","State":"open","Body":"### .NET version\r\n\r\nTested in 7.0, 6.0 and .NET framework 4.8.\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNot that I know of.\r\n\r\n### Issue description\r\n\r\nSetting the `Font` or `SelectionFont` property to some font, like `new Font(\"Arial Black\", 11.5f, FontStyle.Italic)`, programtically entered text, either through `AppendText(...)` or modifying the `Text` property directly, displays with the chosen font applied. When entering new text however, be it by simply appending at the end, selecting all or part of the text and then typing new text, or typing in between the text already present, will have the expected font size and style applied, but a default font family.\r\n\r\n\r\nI tried to figure out where new text input is processed in the `RichTextBox` and `TextBoxBase` classes, but I couldn't manage to find it. If anyone could point me to the source code for that, please do so!\r\n\r\n\r\nhttps://user-images.githubusercontent.com/78665317/227747410-359ce9aa-37c6-4ab6-a3b3-95263a959f81.mp4\r\n\r\n### Steps to reproduce\r\n\r\n```c#\r\nvar rtb = new RichTextBox\r\n{\r\n  Font /* or SelectionFont, same behaviour */ = new Font(\"Arial Black\", 11.5f, FontStyle.Italic), // could be any font\r\n};\r\n\r\nrtb.AppendText(\"Sample text\");\r\n```","Url":"https://github.com/dotnet/winforms/issues/8902","RelatedDescription":"Open issue \"RichTextbox font family not applied to new text\" (#8902)"},{"Id":"1639625277","IsPullRequest":false,"CreatedAt":"2023-03-24T15:42:12","Actor":"maiosoft","Number":"8900","RawContent":null,"Title":"DesignToolsServer and assemblies copied in temp folder","State":"open","Body":"Hi, is there a way to get DesignToolsServer (VS 17.5.3) to copy all assemblies found in the output directory, as in previous versions of Visual Studio (i.e. 17.0.x), or (even better) tell it which additional assemblies to copy?\r\nCould I attach a piece of code at some point in this startup process?\r\n\r\nMy problem is that we use a sort of dependency injection in GUI (also at design time), so not all needed assemblies are referenced by WinForm apps...","Url":"https://github.com/dotnet/winforms/issues/8900","RelatedDescription":"Open issue \"DesignToolsServer and assemblies copied in temp folder\" (#8900)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-04-01T03:30:42.4741032Z","RunDurationInMilliseconds":568}