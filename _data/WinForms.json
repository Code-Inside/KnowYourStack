{"Data":{"GitHub":{"Issues":[{"Id":"659635473","IsPullRequest":true,"CreatedAt":"2020-07-17T20:57:59","Actor":"weltkante","Number":"3601","RawContent":null,"Title":"Workaround for bad ImageList ownership management","State":"open","Body":"Fixes #3358\r\n\r\n## Proposed changes\r\n\r\nDisable sharing ImageList handles because they are implemented incorrectly and can double-free handles, which will crash if the handle was reused already (#3358). Instead of sharing ImageLists this PR creates an explicit duplicate when assigning an ImageList to the native control, and destroys the previous instance. This guarantees the handle used by the native control is always unique and can be safely destroyed. To avoid leaks all ImageLists are removed when the handle is destroyed.\r\n\r\n#3531 is tracking proper implementation of ImageList ownership\r\n\r\nFor TreeViews the StateImageList is never shareable and it had similar bugs, so the correct solution is also to create unique handles and destroy them. Part of the logic already was there, but it was too eager and destroyed ImageLists it didn't own. By creating unique handles this problem is avoided.\r\n\r\n## Customer Impact\r\n\r\n- ImageLists don't get destroyed prematurely (see #3531)\r\n- Usage of ImageLists on checkbox-enabled TreeView or ListView controls no longer risks double-free crashes\r\n- Higher memory usage due to duplicating ImageLists\r\n\r\n## Regression? \r\n\r\n- No, the memory corruption and ownership issues were also present in Desktop Framework\r\n\r\n## Risk\r\n\r\n- This changes semantics of how ImageLists are managed, users which send window messages directly to the native control may not be prepared to handle this.\r\n\r\n### Before\r\n\r\n- ImageLists were destroyed while still in use\r\n- ImageLists were destroyed twice (risk of crashing if numeric handle value was reused)\r\n\r\n### After\r\n\r\n- ImageList destruction result is checked in debug builds to verify no double-free happened\r\n\r\n## Test methodology\r\n\r\n- Running the test suite in a debugger and ensure the asserts detected no double-frees\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3601)","Url":"https://github.com/dotnet/winforms/pull/3601","RelatedDescription":"Open PR \"Workaround for bad ImageList ownership management\" (#3601)"},{"Id":"659274301","IsPullRequest":true,"CreatedAt":"2020-07-17T13:51:35","Actor":"SergeySmirnov-Akvelon","Number":"3600","RawContent":null,"Title":"Fixing regression in  Control.AccessibleName, Control.AccessibleRole, and Control.AccessibleDescription properties","State":"open","Body":"Fixes #3504\r\n\r\n## Proposed changes\r\nAdded supporting of \"LegacyIAccessible\" pattern. Added missing logic for Name property.\r\n\r\n## Customer Impact\r\n- No\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- Unit-tests \r\n- Manual testing\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- Microsoft Windows [Version 10.0.18363.900]\r\n- .NET Core 3.1.6\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3600)","Url":"https://github.com/dotnet/winforms/pull/3600","RelatedDescription":"Open PR \"Fixing regression in  Control.AccessibleName, Control.AccessibleRole, and Control.AccessibleDescription properties\" (#3600)"},{"Id":"659203447","IsPullRequest":true,"CreatedAt":"2020-07-17T12:07:25","Actor":"dotnet-maestro[bot]","Number":"3599","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200716.14\r\n- **Date Produced**: 7/17/2020 5:32 AM\r\n- **Commit**: fd45f7302018ff35405c9e14ca1cf6270efacfe3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Diagnostics.PerformanceCounter**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.DirectoryServices**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Drawing.Common**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.IO.FileSystem.AccessControl**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.IO.Packaging**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.CodeDom**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **Microsoft.NETCore.Targets**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **Microsoft.Win32.Registry.AccessControl**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **Microsoft.NETCore.App.Ref**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.IO.Pipes.AccessControl**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Security.Cryptography.Pkcs**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Security.Cryptography.ProtectedData**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Security.Permissions**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Text.Encodings.Web**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Text.Json**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n  - **System.Threading.AccessControl**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20366.14\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3599)","Url":"https://github.com/dotnet/winforms/pull/3599","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/runtime\" (#3599)"},{"Id":"659040576","IsPullRequest":false,"CreatedAt":"2020-07-17T08:57:53","Actor":"Jessie-Zhang01","Number":"3598","RawContent":null,"Title":"[Accessibility] Keyboard tab focus is invisible and Keyboard shortcut key is unavailable to access any items in the Print preview dialog after pressing 'Enter' on any button (One page, Two Page...)","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 5.0.100-rc.1.20366.7\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**More Info:**\r\n\r\n1. This issue can also repro on Framework project.\r\n2. There are 2 similar bugs: [1156779](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1156779), [1156785 ](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1156785)in VSO.\r\n\r\n**Minimal repro:**\r\n1. Extract “[WindowsFormsApp3.zip](https://github.com/dotnet/winforms/files/4936772/WindowsFormsApp3.zip)” and open it in VS.\r\n2. Build and run the project.\r\n3. Using Tab key to navigate to Preview button, then press Enter key to show Print preview dialog.\r\n4. Using Tab key to navigate page button(One Page, Two Page...), then press Enter key.            \r\n5. Try to use Tab key to navigate any items in the Print preview dialog.\r\n\r\n\r\n**Expected behavior:**\r\nKeyboard tab focus is visible and Keyboard shortcut key is available to access any items in the Print preview dialog.\r\n\r\n**Actual behavior:**\r\nKeyboard tab focus is invisible and Keyboard shortcut key is unavailable to access any items in the Print preview dialog.\r\n![steps](https://user-images.githubusercontent.com/45864649/87767155-cd8f1f00-c84c-11ea-967c-f17039f88e81.gif)\r\n","Url":"https://github.com/dotnet/winforms/issues/3598","RelatedDescription":"Open issue \"[Accessibility] Keyboard tab focus is invisible and Keyboard shortcut key is unavailable to access any items in the Print preview dialog after pressing 'Enter' on any button (One page, Two Page...)\" (#3598)"},{"Id":"659021568","IsPullRequest":false,"CreatedAt":"2020-07-17T08:37:38","Actor":"Lydia-Shi","Number":"3597","RawContent":null,"Title":"[Accessibility] Narrator does not read the state of the CheckBox as checked/unchecked after selection in DataGridViewCheckBoxColumn","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version:\r\n5.0.100-rc.1.20366.7\r\n\r\n* Have you experienced this same bug with .NET Framework?:\r\nYes\r\n\r\n**More info:**\r\nNVDA tool also can reproduce this issue.\r\n\r\n**Problem description:**\r\nNarrator does not read the state of the CheckBox as checked/unchecked after selection.\r\n![Read](https://user-images.githubusercontent.com/54019172/87765014-daf6da00-c849-11ea-9859-177d1fc1813c.gif)\r\n![ReadPic](https://user-images.githubusercontent.com/54019172/87765022-dc280700-c849-11ea-9f0a-69f68d156920.PNG)\r\n\r\n**Expected behavior:**\r\nNarrator should read the state of the checkbox as checked/unchecked after selection.\r\n\r\n**Minimal repro:**\r\n1.\tExtract following attached project, then build and run it\r\n[DataGridViewCheckBoxTest.zip](https://github.com/dotnet/winforms/files/4936568/DataGridViewCheckBoxTest.zip)\r\n2.\tOpen Narrator tool, navigate to the first row, Column5, check whether the narrator reads the state of the check box as checked /unchecked after selection\r\n","Url":"https://github.com/dotnet/winforms/issues/3597","RelatedDescription":"Open issue \"[Accessibility] Narrator does not read the state of the CheckBox as checked/unchecked after selection in DataGridViewCheckBoxColumn\" (#3597)"},{"Id":"658950212","IsPullRequest":false,"CreatedAt":"2020-07-17T07:13:27","Actor":"Amy-Li03","Number":"3596","RawContent":null,"Title":"[Accessibility] Narrator does not read the status message as row added after click on Add New button of BindingNavigator","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 5.0.100-preview.8.20363.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**More info:**\r\nNVDA tool also can reproduce this issue.\r\n\r\n**Minimal repro:**\r\n1. Extract the test app, then build and run it. \r\n[CoreApp.zip](https://github.com/dotnet/winforms/files/4936229/CoreApp.zip)\r\n2. Open Narrator tool, navigate to the **Add New** button of BindingNavigator.\r\n3. Click on **Add New** button (click by mouse or through keyboard), then a row will be added.\r\n![repro](https://user-images.githubusercontent.com/62929087/87757469-45ede400-c83d-11ea-9dfb-41ac2774c7a8.gif)\r\n\r\n**Actual behavior:**\r\n1. Narrator does not provide instruction that Add New button refers to  what control to be added.\r\n2. While clicking on Add New button through Caps + Enter key, Narrator will not focus on the new added row, so Narrator does not read the status message as row added.\r\n![Narrator1](https://user-images.githubusercontent.com/62929087/87757481-4a1a0180-c83d-11ea-8bf0-1e843b62ed79.png)\r\n\r\n3. While clicking on Add New button by mouse, Narrator will focus on the new added row, so Narrator will read the status message as row added.\r\n![Narrator2](https://user-images.githubusercontent.com/62929087/87757497-52723c80-c83d-11ea-84ee-c365f608e090.png)\r\n\r\n**Expected behavior:**\r\n1. Narrator should provide information that Add new button refers to what control should be added.\r\n2. While clicking on Add New button through Caps + Enter key, Narrator should read the status message as row added after click on \"Add New\" button.","Url":"https://github.com/dotnet/winforms/issues/3596","RelatedDescription":"Open issue \"[Accessibility] Narrator does not read the status message as row added after click on Add New button of BindingNavigator\" (#3596)"},{"Id":"658899304","IsPullRequest":false,"CreatedAt":"2020-07-17T05:58:58","Actor":"Marie-Shi","Number":"3595","RawContent":null,"Title":"Windows forms ComboBox.DropDownStyle change causes System.AccessViolationException randomly","State":"open","Body":"* .NET Core Version: \r\n.Net 5.0.100-rc.1.20366.7 from 5.0 master branch + VS2019 with latest core designer\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**More Info**\r\nThis issue can reproduce from .NET 3.5 to .NET 4.8 on Dev14/Dev15/Dev16. And this is a randomly issue, not happened each time.\r\n\r\n**Minimal repro:**\r\n1.\tExtract “Core.zip” and open it in VS.\r\n[Core.zip](https://github.com/dotnet/winforms/files/4935973/Core.zip)\r\n2.\tBuild and run the project.\r\n3.\tClick the dropdown button of ComboBox in form1, then form2 shown.\r\n4.\tClick “X” to close form2.\r\n\r\n **Actual behavior:**\r\nAfter step4, an error dialog pop up: \r\n[Call_stack.txt](https://github.com/dotnet/winforms/files/4935975/Call_stack.txt)\r\n![System_AccessViolationException](https://user-images.githubusercontent.com/45864017/87753381-1044fd00-c835-11ea-957b-45225cf06de7.png)\r\n\r\n**Expected behavior:**\r\nThere is no error dialog pop up. The project can run normally.","Url":"https://github.com/dotnet/winforms/issues/3595","RelatedDescription":"Open issue \"Windows forms ComboBox.DropDownStyle change causes System.AccessViolationException randomly\" (#3595)"},{"Id":"658513810","IsPullRequest":true,"CreatedAt":"2020-07-16T19:53:44","Actor":"Shyam-Gupta","Number":"3594","RawContent":null,"Title":"[Port to 3.1 servicing]: Adding Form subtype in WinForms C# template","State":"open","Body":"Porting fix for bug #3510 to 3.1 servicing release.\r\nMaster branch commit: #3527 \r\n\r\nChanges:\r\n\r\n1. Added *.user file so as to add Form subtype.\r\n2. By default template engine removes *.user files.\r\n    To override it, I have added sources in template.json to remove *.user from \"exclude\"\r\n\r\nVerified that:\r\n\r\n1. .user file gets dropped on creating new project from dotnet CLI\r\n2. It works when project gets created from VS. Now Form1.cs opens directly in designer\r\n3. .user file has BOM (0xEF, 0xBB, 0xBF) characters in the beginning and the files have UTF 8 encoding\r\n4. On adding a new Form to an existing project, the new Form opens directly in designer\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3594)","Url":"https://github.com/dotnet/winforms/pull/3594","RelatedDescription":"Open PR \"[Port to 3.1 servicing]: Adding Form subtype in WinForms C# template\" (#3594)"},{"Id":"658373326","IsPullRequest":true,"CreatedAt":"2020-07-16T16:51:15","Actor":"cristianosuzuki77","Number":"3593","RawContent":null,"Title":"LOC CHECKING 20200716","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3593)","Url":"https://github.com/dotnet/winforms/pull/3593","RelatedDescription":"Open PR \"LOC CHECKING 20200716\" (#3593)"},{"Id":"658301909","IsPullRequest":true,"CreatedAt":"2020-07-16T15:41:58","Actor":"mmitche","Number":"3592","RawContent":null,"Title":"[release/5.0-preview8] Enable builds of internal branches","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3592)","Url":"https://github.com/dotnet/winforms/pull/3592","RelatedDescription":"Closed or merged PR \"[release/5.0-preview8] Enable builds of internal branches\" (#3592)"},{"Id":"658301834","IsPullRequest":true,"CreatedAt":"2020-07-16T15:24:20","Actor":"mmitche","Number":"3591","RawContent":null,"Title":"[master] Enable builds of internal branches","State":"open","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3591)","Url":"https://github.com/dotnet/winforms/pull/3591","RelatedDescription":"Open PR \"[master] Enable builds of internal branches\" (#3591)"},{"Id":"657895082","IsPullRequest":false,"CreatedAt":"2020-07-16T06:43:26","Actor":"Jessie-Zhang01","Number":"3590","RawContent":null,"Title":"[Accessibility] Narrator/Inspect hang eventually when the \"ComboBox\" to be expanded contains the same item","State":"open","Body":"* .NET Core Version: \r\n.Net 5.0.100-rc.1.20365.11 from 5.0 master branch\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes, it has a VSO bug: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1157357\r\n\r\n**More Info:**\r\n\r\n1. This issue cannot reproduce when set DropDownStyle property of ComboBox as 'Simple'.\r\n2. This issue can reproduce when set DropDownStyle property of ComboBox as 'DropDown/DropDownList'.\r\n3. This issue also can reproduce on .Net 3.1.\r\n\r\n**Minimal repro:**\r\n\r\n1. Open the attached ‘WindowsFormsApp4’ application in VS, then build and run it.\r\n2. Open Narrator or Inspect, then focus its cursor to the ComboBox control.\r\n3. Expand the ComboBox drop-down list.\r\n[WindowsFormsApp4.zip](https://github.com/dotnet/winforms/files/4929733/WindowsFormsApp4.zip)\r\n\r\n**Expected behavior:**\r\nNarrator or Inspect's cursor can be focus on the ComboBox‘s items and works fine.\r\n\r\n**Actual behavior:**\r\nNarrator/Inspect will hang.\r\n![Issue-1](https://user-images.githubusercontent.com/45864649/87739556-bb908a80-c812-11ea-91a6-72b5b3ef13de.gif)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3590","RelatedDescription":"Open issue \"[Accessibility] Narrator/Inspect hang eventually when the \"ComboBox\" to be expanded contains the same item\" (#3590)"},{"Id":"657154928","IsPullRequest":false,"CreatedAt":"2020-07-16T06:22:33","Actor":"Olina-Zhang","Number":"3581","RawContent":null,"Title":"'File name' ComboBox in SaveFileDialog is truncated by default after clicking 'Hide Folders'","State":"closed","Body":"* .NET Core Version: \r\n5.0.100-preview.8.20363.2 from master branch\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n* More info: \r\nThis is not a regression issue, can repro in .Net Core previous version and .Net framework\r\n\r\n**Problem description:**\r\n'File name' ComboBox in SaveFileDialog is truncated by default after clicking 'Hide Folders'. After resizing this dialog, truncation will be resolved. See following screenshot:\r\n![image](https://user-images.githubusercontent.com/26474449/87520639-d4cff480-c6b5-11ea-8245-e2b9d41747b3.png)\r\n\r\n**Expected behavior:**\r\nNo truncation in SaveFileDialog\r\n\r\n**Minimal repro:**\r\n1.\tCreate a Winforms .Net Core app\r\n2.\tAdd a SaveFileDialog to the form designer\r\n3.\tWrite one line code to show SaveFileDialog when running app\r\n4.\tBuild and run this app\r\n5.\tIn SaveFileDialog, click 'Hide Folders', and then observe 'File name' comboBox\r\n \r\nOr \r\n1.\tExtract following attached project and open it\r\n[WindowsFormsApp20.zip](https://github.com/dotnet/winforms/files/4923791/WindowsFormsApp20.zip)\r\n2.\tBuild and run this app, in SaveFileDialog, click 'Hide Folders', and then observe 'File name' comboBox\r\n","Url":"https://github.com/dotnet/winforms/issues/3581","RelatedDescription":"Closed issue \"'File name' ComboBox in SaveFileDialog is truncated by default after clicking 'Hide Folders'\" (#3581)"},{"Id":"657796758","IsPullRequest":true,"CreatedAt":"2020-07-16T05:52:56","Actor":"dotnet-maestro[bot]","Number":"3589","RawContent":null,"Title":"[release/5.0-preview7] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 10d330dc-4f8f-4c44-8c66-08d812f956ec\r\n- **Build**: 20200714.11\r\n- **Date Produced**: 7/16/2020 2:09 AM\r\n- **Commit**: 53976d38b1bd6917b8fa4d1dd4f009728ece3adb\r\n- **Branch**: refs/heads/release/5.0-preview7\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n\r\n[marker]: <> (End:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3589)","Url":"https://github.com/dotnet/winforms/pull/3589","RelatedDescription":"Closed or merged PR \"[release/5.0-preview7] Update dependencies from dotnet/runtime\" (#3589)"},{"Id":"657705686","IsPullRequest":true,"CreatedAt":"2020-07-16T00:57:06","Actor":"dotnet-maestro[bot]","Number":"3588","RawContent":null,"Title":"[release/5.0-preview8] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2c98d757-7e74-42d9-3cc7-08d824643728)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 2c98d757-7e74-42d9-3cc7-08d824643728\r\n- **Build**: 20200714.3\r\n- **Date Produced**: 7/14/2020 9:08 PM\r\n- **Commit**: ff5d4b6c8dbdaeacb6e6159d3f8185118dffd915\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.RemoteExecutor**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n\r\n[marker]: <> (End:2c98d757-7e74-42d9-3cc7-08d824643728)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3588)","Url":"https://github.com/dotnet/winforms/pull/3588","RelatedDescription":"Closed or merged PR \"[release/5.0-preview8] Update dependencies from dotnet/arcade\" (#3588)"},{"Id":"656116832","IsPullRequest":true,"CreatedAt":"2020-07-16T00:23:48","Actor":"gpetrou","Number":"3571","RawContent":null,"Title":"Add tests for ListViewItemCollection Find method","State":"closed","Body":"## Proposed changes\r\n\r\n- Add tests for ListViewItemCollection Find method.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3571)","Url":"https://github.com/dotnet/winforms/pull/3571","RelatedDescription":"Closed or merged PR \"Add tests for ListViewItemCollection Find method\" (#3571)"},{"Id":"657696701","IsPullRequest":true,"CreatedAt":"2020-07-15T23:30:29","Actor":"dotnet-maestro[bot]","Number":"3587","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200714.3\r\n- **Date Produced**: 7/14/2020 9:08 PM\r\n- **Commit**: ff5d4b6c8dbdaeacb6e6159d3f8185118dffd915\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.RemoteExecutor**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3587)","Url":"https://github.com/dotnet/winforms/pull/3587","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3587)"},{"Id":"657548016","IsPullRequest":true,"CreatedAt":"2020-07-15T19:34:45","Actor":"dotnet-maestro[bot]","Number":"3586","RawContent":null,"Title":"[release/5.0-preview7] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 10d330dc-4f8f-4c44-8c66-08d812f956ec\r\n- **Build**: 20200714.6\r\n- **Date Produced**: 7/15/2020 5:19 PM\r\n- **Commit**: fe9e53e14694e281818945c28ea7468053248fb7\r\n- **Branch**: refs/heads/release/5.0-preview7\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n\r\n[marker]: <> (End:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3586)","Url":"https://github.com/dotnet/winforms/pull/3586","RelatedDescription":"Closed or merged PR \"[release/5.0-preview7] Update dependencies from dotnet/runtime\" (#3586)"},{"Id":"657494108","IsPullRequest":false,"CreatedAt":"2020-07-15T16:39:30","Actor":"PranavSah","Number":"3585","RawContent":null,"Title":"At times System.Windows.Forms.ToolStripDropDown.Show Method gives StackOverFlowException","State":"open","Body":" .NET Framework : 4.6.2\r\n\r\n**Problem description:**\r\nWhen switching from one window to another using context menus it has come to my notice that most of the times the application crashes due to StackOverFlowException. On debugging the stack is filled with calls of \"System.Windows.Forms.ToolStripDropDown.get_RightToLeft()\". My ToolStripMenuItem is added to the ContextStrip of the form.\r\n\r\n**Minimal repro:**\r\nWhen switching from one window to another using context menus (\"_The click event of the menuitems is linked to Reflection code that opens the other window._\")\r\n\r\n\r\n**Debugging and Analysis of Crash Dump**\r\nAttached crash dump analysis report. Analysis done using WinDbg tool.  To my understanding something goes for a toss in ToolStripDropDown.cs Show(Control control, Point position) method while either setting Location or when calling ShowCore() method.\r\nI have also tried setting Overflow  property of ToolStripMenuItem to  ToolStripItemOverflow.AsNeeded but of no use.\r\n\r\n[CrashDumpAnalysis1.txt](https://github.com/dotnet/winforms/files/4926511/CrashDumpAnalysis1.txt)\r\n[CrashDumpAnalysis2.txt](https://github.com/dotnet/winforms/files/4926512/CrashDumpAnalysis2.txt)\r\n","Url":"https://github.com/dotnet/winforms/issues/3585","RelatedDescription":"Open issue \"At times System.Windows.Forms.ToolStripDropDown.Show Method gives StackOverFlowException\" (#3585)"},{"Id":"657427695","IsPullRequest":false,"CreatedAt":"2020-07-15T15:08:39","Actor":"Tanya-Solyanik","Number":"3584","RawContent":null,"Title":"AccessibleName for data bound ComboBox Items is shown as the type name instead of the item text","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nno\r\nworks correctly in 4.7.2, does not work in 4.8, but will be services in 9C\r\n\r\n**Problem description:**\r\n\r\nAccessibility technology user does not know what items are available in the ComboBox drop down, because all of them have the same type and we display the type name. \r\n\r\n**Expected behavior:**\r\n\r\nAccessible Name matches display name of the drop down item\r\n\r\n**Minimal repro:**\r\n1. Create a new winforms application targeting Core\r\n\t2. Add a class with at least one string property (Name in this case)\r\n\r\n```\r\n\t    public class Person\r\n\t    {\r\n\t        public Person(int id, string name)\r\n\t        {\r\n\t            Id = id;\r\n\t            Name = name;\r\n\t        }\r\n\t\r\n\t        public int Id { get; set; }\r\n\t        public string Name { get; set; }\r\n\t    }\r\n```\r\n\t\r\n3. Add a combobox to the form\r\n4. Create a collection of \"Persons\"( type created in step 2) \r\n5. Set combobox's DataSource property to collection created in step3 and DisplayMember property to the name of the string property in the class from step 2 \r\n\r\n```\r\n\t        private void Form1_Load(object sender, EventArgs e)\r\n\t        {\r\n\t            List<Person> persons = new List<Person>();\r\n\t\r\n\t            persons.Add(new Person(1, \"Name 1\"));\r\n\t            persons.Add(new Person(2, \"Name 2\"));\r\n\t            persons.Add(new Person(3, \"Name 3\"));\r\n\t            persons.Add(new Person(4, \"Name 4\"));\r\n\t            persons.Add(new Person(5, \"Name 5\"));\r\n\t\r\n\t            comboBox1.DataSource = persons;\r\n\t            comboBox1.DisplayMember = \"Name\";\r\n\t       }\r\n```\r\n6. Run this application under the inspect tool\r\n**Result**: type name is used as accessible name for the combobox list items, because a object.ToString is called:\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/87098832-1582c600-c1fd-11ea-93e1-df9b5980ebcf.png)\r\n\r\n**Expected:**\r\nAccessible tree should show the same strings as the drop down shows\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/87098581-7d84dc80-c1fc-11ea-9c63-6a1652576143.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3584","RelatedDescription":"Open issue \"AccessibleName for data bound ComboBox Items is shown as the type name instead of the item text\" (#3584)"},{"Id":"657294934","IsPullRequest":false,"CreatedAt":"2020-07-15T12:00:19","Actor":"kirsan31","Number":"3583","RawContent":null,"Title":"System font scaling not working on the fly","State":"open","Body":"* .NET Core Version:  **3.0+**\r\n\r\n* Have you experienced this same bug with .NET Framework?: **Yes**, but strictly not applicable because .NET Framework dose'nt respect system font.\r\n\r\n**Problem description:**\r\nWith `AutoScaleMode.Font` WinForms app must respect system font changes on the fly. But this doesn't happens - some controls will increase their font, some will not, but all of them not will increase their sizes. Correct look will be only after restart the app.\r\n![WinFormsFontScaling](https://user-images.githubusercontent.com/17767561/87540921-18703180-c6a9-11ea-9019-a6dcc10afbd6.gif)\r\nI think this is well known problem, but have created this for tracking...\r\n\r\n\r\n**Expected behavior:**\r\nApp must correctly scale after system font changed, without relaunch.\r\n\r\n**Minimal repro:**\r\nAny WinForms app with `AutoScaleMode.Font`.","Url":"https://github.com/dotnet/winforms/issues/3583","RelatedDescription":"Open issue \"System font scaling not working on the fly\" (#3583)"},{"Id":"657229797","IsPullRequest":true,"CreatedAt":"2020-07-15T10:07:39","Actor":"zwergenaufstand","Number":"3582","RawContent":null,"Title":"Set right SplitterDistance when setting SplitContainer.Panel2MinSize","State":"open","Body":"Respect the SplitContainer orientation in ApplyPanel2MinSize. Adjust\r\nthe splitter distance to accommodate Panel2 if Panel2 is smaller than\r\nPanel2MinSize.\r\n\r\nFixes #3568\r\n\r\n\r\n## Proposed changes\r\n\r\n- When setting Panel2MinSize in a SplitContainer with Orientation = Orientation.Horizontal, consider Panel2.Height instead of Panel2.Width to determine wether changing SplitterDistance is required.\r\n- If changing Panel2MinSize requires increasing the size of Panel2, change SplitterDistance in such a way that Panel2 size matches Panel2MinSize.\r\n- Add tests.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- SplitContainer moves splitter (if necessary) to make sure that Panel2 is not smaller than Panel2MinSize.\r\n- SplitContainer does not move the splitter unnecessarily when setting Panel2MinSize.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Low (I guess)\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Added unit tests.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n- Does not make changes that affect accessibility.\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- 5.0.100-preview.6.20310.4\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3582)","Url":"https://github.com/dotnet/winforms/pull/3582","RelatedDescription":"Open PR \"Set right SplitterDistance when setting SplitContainer.Panel2MinSize\" (#3582)"},{"Id":"657134652","IsPullRequest":false,"CreatedAt":"2020-07-15T07:39:57","Actor":"Lydia-Shi","Number":"3580","RawContent":null,"Title":"Default values are not shown after setting SelectedObject property for PropertyGird control ","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET SDK Version: \r\n5.0.100-preview.8.20363.2\r\n\r\n* Have you experienced this same bug with .NET Framework?\r\nNo\r\n\r\n**Problem description:**\r\nDefault values are not shown after setting SelectedObject property for PropertyGird control.\r\n![image](https://user-images.githubusercontent.com/54019172/87515885-190bc680-c6af-11ea-9c7f-f8a784a11429.png)\r\n\r\n**Expected behavior:**\r\nAfter setting the SelectedObject property for the PropertyGird control, it should display correct default values.\r\n![image](https://user-images.githubusercontent.com/54019172/87515918-26c14c00-c6af-11ea-894f-815622d329c3.png)\r\n**More info:**\r\n1.\tThis is a regression issue,  and it can repro from 5.0.100-preview.8.20360.10 to latest .NET SDK, it cannot repro on .Net Core 5.0.100-preview.8.20359.5, below is the the version number of System.Windows.Forms.dll in 5.0.100-preview.8.20359.5:\r\n![image](https://user-images.githubusercontent.com/54019172/87527238-69d6eb80-c6be-11ea-9953-e1ab724b7e8e.png)\r\n\r\n2.\tThis issue cannot repro with .NET Core 3.1.\r\n3.\tThis issue also occurs in design time.\r\n![image](https://user-images.githubusercontent.com/54019172/87516035-54a69080-c6af-11ea-8554-2b5fbefc74ba.png)\r\n\r\n**Minimal repro:**\r\n1.\tCreate a WinForms .Net Core application\r\n2.\tAdd a PropertyGird control to Form\r\n3.\tPress F4 to go to the Property Browser Window, set its SelectedObject property to Form1\r\n4.\tBuild and run the application, observe the PropertyGrid\r\n\r\n Or \r\n1.\tExtract the attached project and open it\r\n[PropertyGirdDefaultValue.zip](https://github.com/dotnet/winforms/files/4923535/PropertyGirdDefaultValue.zip)\r\n2.\tBuild and run this application, observe the PropertyGrid\r\n","Url":"https://github.com/dotnet/winforms/issues/3580","RelatedDescription":"Open issue \"Default values are not shown after setting SelectedObject property for PropertyGird control \" (#3580)"},{"Id":"656309248","IsPullRequest":true,"CreatedAt":"2020-07-15T05:56:23","Actor":"RussKie","Number":"3574","RawContent":null,"Title":"ListBox nested classes cleanup","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n## Proposed changes\r\n\r\n- Automated changes, nothing functional\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3574)","Url":"https://github.com/dotnet/winforms/pull/3574","RelatedDescription":"Closed or merged PR \"ListBox nested classes cleanup\" (#3574)"},{"Id":"657030929","IsPullRequest":false,"CreatedAt":"2020-07-15T03:24:29","Actor":"Lydia-Shi","Number":"3579","RawContent":null,"Title":"There is no detailed description for some properties of ToolTip control","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0.100-preview.8.20363.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nThere is no detailed description for some properties of ToolTip control.\r\n![image](https://user-images.githubusercontent.com/54019172/87495262-830e7680-c683-11ea-8810-7687689bec65.png)\r\n\r\n\r\n**Expected behavior:**\r\nThe description of the property should describe the function of the property in detail.\r\n![image](https://user-images.githubusercontent.com/54019172/87495269-89045780-c683-11ea-9096-84aef787ccb7.png)\r\n\r\n**More info:**\r\n\r\n1. Affected Properties of ToolTip control: InitialDelay, OwnerDraw, ReshowDelay, ShowAlways, Tag, ToolTipIcon, ToolTipTitle.\r\n2. This issue also occurs in the \"ToolTip on tooltip\" property of other control.\r\n3. This issue also can reproduce with .Net Core 3.1.\r\n\r\n**Minimal repro:**\r\n\r\n1. Create a Winforms core app\r\n2. Drag and drop a ToolTip control to the form\r\n3. Observe the property description of the ToolTip control in Property Browser window\r\n\r\nOr\r\n\r\n1. Extract the attached project and open it\r\n[ToolTipPropertyDescription.zip](https://github.com/dotnet/winforms/files/4922648/ToolTipPropertyDescription.zip)\r\n2. Build and run it, observe the property description in PropertyGrid\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3579","RelatedDescription":"Open issue \"There is no detailed description for some properties of ToolTip control\" (#3579)"},{"Id":"656908430","IsPullRequest":false,"CreatedAt":"2020-07-14T21:24:59","Actor":"osamakawish","Number":"3578","RawContent":null,"Title":"TableLayoutPanel.RowCount doesn't seem to add new rows (similarly for TableLayoutPanel.ColumnCount","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1.301\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes, this was made in .Net Framework 4.7.2 (according to project information).\r\n\r\n**Problem description:**\r\nThe following is my class. It's straightforward and just contains a table. The table is 6x6 in the Designer (for testing). \r\n\r\n`Table` here is a `TableLayoutPanel`. \r\n\r\n```c#\r\npublic partial class Board : UserControl\r\n    {\r\n        public int BoardSize { get; private set; }\r\n\r\n        public Board(int size)\r\n        {\r\n            InitializeComponent();\r\n            BoardSize = size;\r\n            Table.RowCount = size;\r\n            Table.ColumnCount = size;\r\n\r\n            float val = 100 / size;\r\n            for (int i = 0; i < size; i++)\r\n            {\r\n                Table.RowStyles[i].Height = val; // exception raised here\r\n                Table.ColumnStyles[i].Width = val;\r\n                for (int j = 0; j < size; j++)\r\n                {\r\n                    Table.SetCellPosition(new Button(), new TableLayoutPanelCellPosition(i, j));\r\n                }\r\n            }\r\n\r\n            // Table.CellPaint += Table_CellPaint;\r\n        }\r\n```\r\n\r\nError:\r\n> System.ArgumentOutOfRangeException: 'Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index'\r\n\r\nIt turns out, the error occurs when it tries to reach index 6 (which is basically the RowCount in the Designer).\r\n\r\nI'm not sure why this is occurring, as I just set new values for the RowCount and ColumnCount a few lines before.\r\n\r\n**Expected behavior:**\r\nIndex should not be out of range for Table.RowStyles[i] when it's less than Table.RowCount.\r\n\r\n**Minimal repro:**\r\nNot sure what \"repro\" means...","Url":"https://github.com/dotnet/winforms/issues/3578","RelatedDescription":"Open issue \"TableLayoutPanel.RowCount doesn't seem to add new rows (similarly for TableLayoutPanel.ColumnCount\" (#3578)"},{"Id":"656745967","IsPullRequest":true,"CreatedAt":"2020-07-14T17:16:35","Actor":"mmitche","Number":"3577","RawContent":null,"Title":"Add dependencies required for CPD strict","State":"closed","Body":"Also run a general update\r\nCPD strict means the following:\r\n```\r\n<Dependency Name=\"Microsoft.Win32.Registry.AccessControl\" Version=\"5.0.0-preview.8.20361.2\" CoherentParentDependency=\"Microsoft.Private.Winforms\">\r\n    <Uri>https://github.com/dotnet/runtime</Uri>\r\n    <Sha>f37dd6fc8595e130909dcb3085a56342d04aa20c</Sha>\r\n</Dependency>\r\n```\r\nThis is from windowdesktop. In this case, Maestro will look up to find a direct dependency on Microsoft.Win32.Registry.AccessControl in runtime@f37dd6fc8595e130909dcb3085a56342d04aa20c.\r\nIf none exists, it fails. This contrasts to the current CPD algorithm which will attempt to find the newest Microsoft.Win32.Registry.AccessControl in any build within the graph below runtime@f37dd6fc8595e130909dcb3085a56342d04aa20c.\r\nThis is prone to error in some servicing cases, is slow, and requires the use of external data sources.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3577)","Url":"https://github.com/dotnet/winforms/pull/3577","RelatedDescription":"Closed or merged PR \"Add dependencies required for CPD strict\" (#3577)"},{"Id":"656515803","IsPullRequest":true,"CreatedAt":"2020-07-14T10:44:02","Actor":"echalone","Number":"3575","RawContent":null,"Title":"Removed duplicate ReadResources call","State":"open","Body":"The ReadResources method is already called in the ResourceSet constructor (see https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/Resources/ResourceSet.cs ) and would be called a second time in the ResXResourceSet constructor.\r\nThis leads to a System.ArgumentException \"Item has already been added. Key in dictionary: '\\<keyname\\>'  Key being added: '\\<keyname\\>'\" because the code would try to add every data element of a resx file a second time (first time in the ResourceSet constructor, second time in the ResXResourceSet constructor).\r\nTherefore, this second call needs to be removed from all ResXResourceSet constructors that already call the base constructor (which are both).\r\nYou can recreate this issue just by calling\r\n```\r\nnew System.Resources.ResXResourceSet(\"<PathToResx>\")\r\n```\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3575)","Url":"https://github.com/dotnet/winforms/pull/3575","RelatedDescription":"Open PR \"Removed duplicate ReadResources call\" (#3575)"},{"Id":"656276548","IsPullRequest":false,"CreatedAt":"2020-07-14T02:32:15","Actor":"Zheng-Li01","Number":"3573","RawContent":null,"Title":"Missing the description for the ‘AutoUpgradeEnabled’ property of FolderBrowserDialog/SaveFileDialog/OpenFileDialog controls in the description pane ","State":"open","Body":"## Version info:\r\nDev16 16.8.0 Preview 1.0 [30307.178.master] + .NET 5.0 Preview8.20363.2\r\n\r\n## Have you experienced this same bug with .NET Framework?\r\nNo\r\n\r\n## More info:\r\n1.This is not a regression issue that can repro in Dev16 16.6.3.\r\n2.The '‘UserDescriptionForTitle’ & ‘AutoUpgradeEnabled’ properties are new added for core project, not appear in the property browser window in the Framework project.\r\n\r\n## Minimal Reproduction Scenario\r\n1. Create a winforms .NET Core project with a FolderBrowserDialog control.\r\n2. Select the ‘AutoUpgradeEnabled’ property of folderBrowserDialog1 in the property browser window.\r\n3. Observe the description for ‘AutoUpgradeEnabled’ property in the description pane.\r\n\r\n## Expected Behavior\r\nHave the description for ‘AutoUpgradeEnabled’ property in the description pane.\r\n\r\n## Current Behavior\r\n1. Missing the description for ‘AutoUpgradeEnabled’ property in the description pane.\r\n2. For the ‘UserDescriptionForTitle’ of FolderBrowserDialog control, the description is inaccurate.(SaveFileDialog/OpenFileDialog are not having the property).\r\n\r\n![Core](https://user-images.githubusercontent.com/38325459/87373785-ebdeeb80-c5bc-11ea-8a45-97e3627d01c2.PNG)","Url":"https://github.com/dotnet/winforms/issues/3573","RelatedDescription":"Open issue \"Missing the description for the ‘AutoUpgradeEnabled’ property of FolderBrowserDialog/SaveFileDialog/OpenFileDialog controls in the description pane \" (#3573)"},{"Id":"656268241","IsPullRequest":false,"CreatedAt":"2020-07-06T14:19:41","Actor":"rLindorfer","Number":"3572","RawContent":null,"Title":"Where is the Select event for the ToolStripMenuItem?","State":"open","Body":"# The MenuItem.Select event of the MenuItem is missing in the ToolStripMenuItem\r\n\r\nThis event should be typically raised when the user places the mouse pointer over the menu item. The event can also be raised when the user highlights a menu item using the keyboard by scrolling to the menu item with the arrow keys. \r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.menuitem.select?view=netframework-4.8\r\n\r\n# General\r\n\r\nWhen .NET Core 3.1 was introduced, there was a breaking change in using ContextMenus. MenuItem should be replaced by the ToolStripMenuItem. https://docs.microsoft.com/en-us/dotnet/core/compatibility/winforms\r\n\r\nHowever, when I try to replace MenuItem with the ToolStripMenuItem, it is not possible for me to get feedback when the user selects an item using the keyboard.\r\n\r\nSome workarounds are the following events: MouseEnter, MouseLeave, MouseHover, etc.\r\nBut this does not cover the selection of a ToolStripMenuItem via keyboard (e.g. arrow keys)!\r\n\r\nhttps://social.msdn.microsoft.com/Forums/en-US/39d5376c-a4c7-4136-b0d1-9193dc215ff8/where-is-select-event-of-toolstripmenuitem\r\nhttps://stackoverflow.com/questions/464493/net1-menuitem-vs-net2-toolstripmenuitem-select-event\r\n","Url":"https://github.com/dotnet/winforms/issues/3572","RelatedDescription":"Open issue \"Where is the Select event for the ToolStripMenuItem?\" (#3572)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-07-18T05:30:55.1136648Z","RunDurationInMilliseconds":738}