{"Data":{"GitHub":{"Issues":[{"Id":"1561280895","IsPullRequest":false,"CreatedAt":"2023-01-29T13:06:52","Actor":"roland5572","Number":"8536","RawContent":null,"Title":"ListView ListViewGroupCollection.Insert not working properly (incorrect location)","State":"open","Body":"### .NET version\r\n\r\n.net 7.0\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Issue description\r\n\r\nListViewGroupCollection.Insert not working properly.\r\n\r\nUsers can use ListViewGroupCollection.Insert to insert new data. But currently it doesn't work properly (**incorrect location**).\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.listviewgroupcollection.insert\r\n\r\nHow to test:\r\n1.  Copy the full test code to Visual Studio (see Steps to reproduce).\r\n2. Add a breakpoint to this line.\r\n```(sender as Button).Enabled = false;```\r\n\r\nPicture 1.\r\nRun the test code, click this button to start test.\r\n\r\n![000](https://user-images.githubusercontent.com/88176616/215327609-77d76064-8d6d-422d-910f-4ef7506178aa.png)\r\n\r\nPicture 2.\r\nIf you have set breakpoint, the \"Watch 1\" dialog shows the position of the inserted object in relation to other elements.\r\nIf you haven't set a breakpoint, Add a breakpoint to this line, and then add \"view.Groups\" to \"Watch 1\" dialog.\r\n```(sender as Button).Enabled = false;```\r\n\r\n![001](https://user-images.githubusercontent.com/88176616/215327623-8fe5b13c-7a96-4765-a1c1-6536d0e36ffd.png)\r\n\r\nPicture 3.\r\nIn the actual running UI, the display effect of ListView is not consistent with the relationship in the previous \"Watch 1\" dialog box.\r\n\r\n![0021](https://user-images.githubusercontent.com/88176616/215327646-0eda3e86-3d76-46e2-80da-e67c1ac7543c.png)\r\n\r\n\r\n### Steps to reproduce\r\n\r\nFull C# Test code with Visual Studio 2022 and .net 7.0\r\n\r\n```\r\nusing System;\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nnamespace ListViewGroupInsertTest\r\n{\r\n    internal static class Program\r\n    {\r\n        [STAThread]\r\n        static void Main()\r\n        {\r\n            ApplicationConfiguration.Initialize();\r\n            Application.Run(CreateForm());\r\n        }\r\n\r\n        private static Form CreateForm()\r\n        {\r\n            var form = new Form()\r\n            {\r\n                Width = 600,\r\n                Height = 480,\r\n\r\n                StartPosition = FormStartPosition.CenterScreen,\r\n            };\r\n\r\n            var control = _listView = CreateListView();\r\n            form.Controls.Add(control);\r\n\r\n            var button = new Button()\r\n            {\r\n                Text = \"Click to insert Group and Item\",\r\n                AutoSize = true,\r\n\r\n                MaximumSize = new Size(0, 45),\r\n                Dock = DockStyle.Right\r\n            };\r\n\r\n            button.Click += Button_Click;\r\n\r\n            form.Controls.Add(button);\r\n            return form;\r\n        }\r\n\r\n        private static ListView CreateListView()\r\n        {\r\n            var control = new ListView()\r\n            {\r\n                Dock = DockStyle.Fill,\r\n                View = View.Details,\r\n\r\n                FullRowSelect = true,\r\n            };\r\n\r\n            CreteListViewContent(control);\r\n            return control;\r\n        }\r\n\r\n        private static ListView _listView;\r\n\r\n        private static ListViewGroup _group_new;\r\n        private static ListViewItem _item_new;\r\n\r\n        private static void CreteListViewContent(ListView view)\r\n        {\r\n            ListViewGroup group_1;\r\n            ListViewGroup group_2;\r\n            ListViewGroup group_3;\r\n            ListViewGroup group_4;\r\n\r\n            view.Groups.Add(group_1 = new ListViewGroup() { Header = \"Group 1\" });\r\n            view.Groups.Add(group_2 = new ListViewGroup() { Header = \"Group 2\" });\r\n            view.Groups.Add(group_3 = new ListViewGroup() { Header = \"Group 3\" });\r\n            view.Groups.Add(group_4 = new ListViewGroup() { Header = \"Group 4\" });\r\n\r\n            view.Columns.Add(new ColumnHeader() { Text = \"Column 1\", Width = 300 });\r\n            view.Columns.Add(new ColumnHeader() { Text = \"Column 2\", Width = -2 });\r\n\r\n            view.Items.Add(new ListViewItem(\"ListView Item 1\") { Group = group_1 });\r\n            view.Items.Add(new ListViewItem(\"ListView Item 2\") { Group = group_2 });\r\n            view.Items.Add(new ListViewItem(\"ListView Item 3\") { Group = group_3 });\r\n            view.Items.Add(new ListViewItem(\"ListView Item 4\") { Group = group_4 });\r\n\r\n            _group_new = new ListViewGroup() { Header = \"Group (New)\" };\r\n            _item_new = new ListViewItem(\"ListView Item (New)\") { Group = _group_new };\r\n        }\r\n\r\n        private static void Button_Click(object sender, EventArgs e)\r\n        {\r\n            var view = _listView;\r\n\r\n            view.Groups.Insert(3, _group_new);\r\n            view.Items.Add(_item_new);\r\n\r\n            (sender as Button).Enabled = false;\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/8536","RelatedDescription":"Open issue \"ListView ListViewGroupCollection.Insert not working properly (incorrect location)\" (#8536)"},{"Id":"1561275377","IsPullRequest":false,"CreatedAt":"2023-01-29T12:51:31","Actor":"kirsan31","Number":"8535","RawContent":null,"Title":"DataGridView TopLeftHeaderCell visibility related problems","State":"open","Body":"### .NET version\r\n\r\nAll\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo\r\n\r\n### Issue description\r\n\r\nComes from https://github.com/dotnet/winforms/issues/6926#issuecomment-1236143035 and related discussion. _Sorry had no time to raised it in time and then completely forgot about it_ ðŸ˜”\r\n\r\n- As far as I can tell, **all** `DataGridView` [Flaky tests](https://github.com/dotnet/winforms/issues/7799) have the same root. The `TopLeftHeaderCell` is not visible if we have no columns at all, but `DataGridView` still treat it as visible (still trying to Invalidate it) :(\r\n- Also we have another non consistent behavior here -`DataGridView` without columns (left) look different from `DataGridView` with all invisible columns (right):\r\n![image](https://user-images.githubusercontent.com/17767561/188275713-67683082-9c15-4050-a8b8-892c16004f83.png)\r\n  If we have no columns at all `TopLeftHeaderCell` not visible and if we have columns but they all set as not visible, `TopLeftHeaderCell` is visible ðŸ¤” Also we have third variant [bound `DataGridView` with all invisible columns](https://github.com/dotnet/winforms/issues/4807) ðŸ˜«\r\n\r\n- Another bunch of bugs related to visibility of `TopLeftHeaderCell`. In many places it's checked like `DataGridView.LayoutInfo.TopLeftHeader != Rectangle.Empty`. And `DataGridView.LayoutInfo.TopLeftHeader` updated only in `PerformLayoutPrivate`.  Which is not always called when necessary. For example if we have `DataGridView` with `AutoSize == true` and call `ColumnHeadersVisible = false` then we will get `TopLeftHeaderCell.Visible == false` and `TopLeftHeaderCell.Displayed == true` because `PerformLayoutPrivate` will not be called if `AutoSize == true` ðŸ˜•\r\n\r\nIt seems that the option of the absence of columns was not considered in the context of `TopLeftHeaderCell`. I see 2 ways here:\r\n1. Treat `TopLeftHeaderCell` invisible if we have no columns. This will be some how a [breaking change](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridviewheadercell.visible?f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(System.Windows.Forms.DataGridViewHeaderCell.Visible)%3Bk(SolutionItemsProject)%3Bk(DevLang-csharp)%26rd%3Dtrue&view=windowsdesktop-6.0#:~:text=If%20the%20cell%20is%20the%20top%20left%20header%20cell%2C%20it%20is%20visible%20if%20both%20RowHeadersVisible%20and%20ColumnHeadersVisible%20are%20true.)... And after that it will be necessary to redo about 60 tests that consider that `TopLeftHeaderCell` is always visible when `ColumnHeadersVisible` && `RowHeadersVisible`.\r\n  By the way, to fix all (I think) Flaky tests  we no need to change `DataGridViewHeaderCell.Visible`, just add the conditions for invalidate in two places. Because all invalidated test are using empty (no columns) `DataGridView`. But if some one will add \r\ntests with columns - we will get all this mouse problems again :(\r\n2. Paint `TopLeftHeaderCell` in any cases if `ColumnHeadersVisible` && `RowHeadersVisible`. Will it be a _visual_ breaking change? This approach will not fix any of our flaky tests, but at least it will be clear what needs to be changed in them and why...\r\n\r\n\r\nIf we go with this I think we need to add tests which will put the mouse above `TopLeftHeaderCell`... So moving all _invalidated_ tests to UIIntegrationTests is something need to be done any way...\r\n\r\n@RussKie [response](https://github.com/dotnet/winforms/issues/6926#issuecomment-1244876947) on this:\r\n\r\n> Just to reiterate my understanding - we have a number of issues that we believe are all caused by the incorrect visibility handling of `TopLeftHeaderCell`. These issues are as follows (in no specific order):\r\n> \r\n> * multiple intermittent DGV-related test failures,\r\n> * inconsistent behaviour depending on whether a DGV has any columns or not,\r\n> * inconsistent behaviour depending on whether a DGV has any bound columns,\r\n> * [DataGridView.TopLeftHeaderCell throws ArgumentOutOfRangeException on Handle creationÂ #3378](https://github.com/dotnet/winforms/issues/3378)\r\n> * [bound DataGridView with all invisible columns will display first column anywayÂ #4807](https://github.com/dotnet/winforms/issues/4807)\r\n> \r\n> Did I get this correctly? ðŸ’­ What may be helpful here is a simple sample app - a form with a DGV and buttons - that show case different behaviours and deficiencies, so that we could observe different scenarios all in one place (like we did in [#3029 (comment)](https://github.com/dotnet/winforms/issues/3029#issuecomment-749295542)).\r\n> \r\n> All but the first issue (i.e., the test related) will require a hollistic review of the handling, and the fix will likely be breaking change; not to mention an extensive testing will be required. This path is not completely off the table, in fact with the [re-introduced support for feature switches](https://github.com/dotnet/winforms/blob/main/docs/WinformsRuntimeConfiguration.md) in .NET 7, we can consider fixing the behaviour putting it behind an opt-out switch (i.e., allow to return to the old behaviour). I don't think the team would be able to champion this work due to current and the already assigned priorities for the .NET 8 release. And we'd look up to the community to champion this (with the team's support, though limited). ","Url":"https://github.com/dotnet/winforms/issues/8535","RelatedDescription":"Open issue \"DataGridView TopLeftHeaderCell visibility related problems\" (#8535)"},{"Id":"1560935186","IsPullRequest":false,"CreatedAt":"2023-01-28T17:13:22","Actor":"reader-man","Number":"8534","RawContent":null,"Title":"Dataset is using System.Data.SqlClient.SqlDataAdapter not Microsoft.Data.SqlClient","State":"open","Body":"### Environment\n\nVisualStudio.17.Release/17.4.4+33213.308\r\nMicrosoft .NET Framework\r\nVersion 4.8.04084\r\n\n\n### .NET version\n\n4.8\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nno\n\n### Issue description\n\ni am trying to move from \"System.Data.SqlClient\" to \"Microsoft.Data.SqlClient\",\r\nand all my code is working,\r\nbut when i change the dataset autogenerated code to use the new \"Microsoft.Data.SqlClient.SqlDataAdapter\"\r\nit works, but when adding any new tables or changing the fields in the dataset designer, it returns the \"SqlDataAdapter\" to use:\r\n\"System.Data.SqlClient.SqlDataAdapter\"\r\nso how to make the designer stay using the new \"Microsoft.Data.SqlClient.SqlDataAdapter\".\r\nand this is also happening to:\r\n    private global::System.Data.SqlClient.SqlDataAdapter _adapter;\r\n        private global::System.Data.SqlClient.SqlConnection _connection;\r\n        private global::System.Data.SqlClient.SqlTransaction _transaction;\r\n        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;\r\n\r\n\r\ne.g.:\r\nnamespace MetaObjectDAL.DS_FormsTableAdapters {\r\n    \r\n    \r\n    /// <summary>\r\n    ///Represents the connection and commands used to retrieve and save data.\r\n    ///</summary>\r\n    [global::System.ComponentModel.DesignerCategoryAttribute(\"code\")]\r\n    [global::System.ComponentModel.ToolboxItem(true)]\r\n    [global::System.ComponentModel.DataObjectAttribute(true)]\r\n    [global::System.ComponentModel.DesignerAttribute(\"Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner\" +\r\n        \", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\r\n    [global::System.ComponentModel.Design.HelpKeywordAttribute(\"vs.data.TableAdapter\")]\r\n    public partial class MetaObjectTableAdapter : global::System.ComponentModel.Component {\r\n        \r\n        private global::System.Data.SqlClient.SqlDataAdapter _adapter;\r\n        \r\n        private global::System.Data.SqlClient.SqlConnection _connection;\r\n        \r\n        private global::System.Data.SqlClient.SqlTransaction _transaction;\r\n        \r\n        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;\r\n\n\n### Steps to reproduce\n\ncreate a new winforms solution\r\nadd a dataset from sql server tables.\r\nthe compile it.\r\nthen add nuget \"Microsoft.Data.SqlClient\"\r\nand replace all references of \"Microsoft.Data.SqlClient\" to \"System.Data.SqlClient\"\r\nsave and re-compile.\r\n\r\nthen open the dataset in designer mode, and add to it a new table from sql server.\r\nsave it.\r\ngo to the Dataset code, and u will see that it returned to the old: \"System.Data.SqlClient\"\r\n\n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8534","RelatedDescription":"Open issue \"Dataset is using System.Data.SqlClient.SqlDataAdapter not Microsoft.Data.SqlClient\" (#8534)"},{"Id":"1560850793","IsPullRequest":true,"CreatedAt":"2023-01-28T13:03:39","Actor":"dotnet-maestro[bot]","Number":"8533","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230128.5\r\n- **Date Produced**: January 29, 2023 6:24:49 AM UTC\r\n- **Commit**: dfe1076090adad6990747e6abed8bf6699371877\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.23076.9 to 8.0.0-alpha.1.23078.5][2]\r\n\r\n[2]: https://github.com/dotnet/runtime/compare/007df05...dfe1076\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8533)\r\n","Url":"https://github.com/dotnet/winforms/pull/8533","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/runtime\" (#8533)"},{"Id":"1558964268","IsPullRequest":false,"CreatedAt":"2023-01-28T01:06:29","Actor":"riverar","Number":"8527","RawContent":null,"Title":"[LOC] KeysConverter returns \"None\" for Windows.Forms.Keys::None in all languages","State":"closed","Body":"### Which files are affected?\r\n\r\nPreviously reported at https://github.com/File-New-Project/EarTrumpet/issues/548.\r\nRelated area https://github.com/dotnet/winforms/issues/8440.\r\n\r\nSteps to reproduce:\r\n1. Log into a non-English machine\r\n2. Run the following PowerShell snippet:\r\n\r\n  ```powershell\r\n  [Reflection.Assembly]::LoadFile(\"C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App\\6.0.10\\System.Windows.Forms.dll\") | Out-Null\r\n  $Converter = New-Object Windows.Forms.KeysConverter\r\n  $Converter.ConvertToString($Null, [System.Globalization.CultureInfo]::CurrentUICulture, [Windows.Forms.Keys]::None)\r\n  ```\r\n3. Observe `None` output\r\n\r\n### Which languages are affected?\r\n\r\nAll non-English","Url":"https://github.com/dotnet/winforms/issues/8527","RelatedDescription":"Closed issue \"[LOC] KeysConverter returns \"None\" for Windows.Forms.Keys::None in all languages\" (#8527)"},{"Id":"1559739737","IsPullRequest":true,"CreatedAt":"2023-01-27T22:02:48","Actor":"dotnet-maestro[bot]","Number":"8530","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230126.9\r\n- **Date Produced**: January 27, 2023 11:13:33 AM UTC\r\n- **Commit**: 007df054a526ed9e3dc70b43bfa330943bd4816a\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.23075.6 to 8.0.0-alpha.1.23076.9][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/d92e70f...007df05\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8530)","Url":"https://github.com/dotnet/winforms/pull/8530","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8530)"},{"Id":"1560216377","IsPullRequest":false,"CreatedAt":"2023-01-27T18:27:58","Actor":"zeh-almeida","Number":"8532","RawContent":null,"Title":"Control Binding should use Invoke","State":"open","Body":"### Is your feature request related to a problem? Please describe\n\nI have a WinForms application which uses CommunityToolkit.Mvvm for bindings.\r\nI am also using the same MVVM library to build a MAUI application for study purposes.\r\n\r\nMVVM allows me to have asynchronous commands and messages, which I use to propagate changes across models.\r\nHowever, because my form binds some controls to those models, I have started to receive UI Thread exceptions when updating values.\r\n\r\nAfter a lot of debugging, I saw that the `SetPropValue` method in the Bindings class does not use the `Invoke` method when updating values:\r\nhttps://github.com/dotnet/winforms/blob/77d01dd234bc6fb2dac3b86d6c2a0b7cd61f1507/src/System.Windows.Forms/src/System/Windows/Forms/Binding.cs#L956\n\n### Describe the solution you'd like and alternatives you've considered\n\nIt is my understanding that the `Control` property is available for the `Binding` object:\r\nhttps://github.com/dotnet/winforms/blob/77d01dd234bc6fb2dac3b86d6c2a0b7cd61f1507/src/System.Windows.Forms/src/System/Windows/Forms/Binding.cs#L110\r\n\r\nIn this case, I propose that the `SetPropValue` method checks if the `Control` property is not null and tries to update it's value through an execution of the `Control.Invoke` method, to ensure the value change occurs in the UI Thread.\n\n### Will this feature affect UI controls?\n\nI do not think so because the underlining flow is kept as is.","Url":"https://github.com/dotnet/winforms/issues/8532","RelatedDescription":"Open issue \"Control Binding should use Invoke\" (#8532)"},{"Id":"1559739388","IsPullRequest":true,"CreatedAt":"2023-01-27T17:32:30","Actor":"dotnet-maestro[bot]","Number":"8529","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20230126.1\r\n- **Date Produced**: January 26, 2023 7:54:45 PM UTC\r\n- **Commit**: 3900335a25247d931fc62a62a1ebc30acbb5403d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.23075.2 to 8.0.0-beta.23076.1][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.23075.2 to 8.0.0-beta.23076.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.23075.2 to 8.0.0-beta.23076.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.23075.2 to 8.0.0-beta.23076.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.23075.2 to 8.0.0-beta.23076.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.23075.2 to 8.0.0-beta.23076.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/74a74c4...3900335\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8529)","Url":"https://github.com/dotnet/winforms/pull/8529","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#8529)"},{"Id":"1559798272","IsPullRequest":true,"CreatedAt":"2023-01-27T13:46:41","Actor":"elachlan","Number":"8531","RawContent":null,"Title":"Refactored `DropSourceBehavior` to partial and split `BehaviorDataObject` into its own file","State":"open","Body":"Refactored `DropSourceBehavior` to partial file and split `BehaviorDataObject` into its own file.\r\n\r\nEnabled nullability in `BehaviorDataObject`.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8531)","Url":"https://github.com/dotnet/winforms/pull/8531","RelatedDescription":"Open PR \"Refactored `DropSourceBehavior` to partial and split `BehaviorDataObject` into its own file\" (#8531)"},{"Id":"1559104526","IsPullRequest":true,"CreatedAt":"2023-01-27T03:21:05","Actor":"elachlan","Number":"8528","RawContent":null,"Title":"Refactor `SelectionService` to replace `ArrayList` and enable Nullability","State":"open","Body":"Refactored `ISelectionService` to replace `ArrayList` and enable Nullability.\r\n\r\nI had to submit a PR to Runtime to fix the nullability on `ISelectionService.PrimarySelection`, this PR will need to be rebased to main once that change has been made available. Until then this will have build errors.\r\nhttps://github.com/dotnet/runtime/pull/81254\r\n\r\nRelated: #8140\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8528)","Url":"https://github.com/dotnet/winforms/pull/8528","RelatedDescription":"Open PR \"Refactor `SelectionService` to replace `ArrayList` and enable Nullability\" (#8528)"},{"Id":"1558111191","IsPullRequest":true,"CreatedAt":"2023-01-26T18:18:59","Actor":"dotnet-maestro[bot]","Number":"8526","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230125.6\r\n- **Date Produced**: January 26, 2023 9:18:02 AM UTC\r\n- **Commit**: d92e70f05b8de72758f3a990844e53c76b44d713\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.23074.4 to 8.0.0-alpha.1.23075.6][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/98ca349...d92e70f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8526)","Url":"https://github.com/dotnet/winforms/pull/8526","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8526)"},{"Id":"1551645000","IsPullRequest":false,"CreatedAt":"2023-01-26T18:18:12","Actor":"Olina-Zhang","Number":"8515","RawContent":null,"Title":"Cannot resize controls in runtime and has an exception when moving controls","State":"closed","Body":"### .NET version\n\n8.0.100-alpha.1.23068.16\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nwork in .Net 6.0, and reproduced from .Net 7.0\n\n### Issue description\n\nIn Winforms repo, there has a [DemoConsole](https://github.com/dotnet/winforms/tree/main/src/System.Windows.Forms/tests/IntegrationTests/DesignSurface/DemoConsole) test app, cannot resize controls in .Net 7.0 & 8.0 and has an exception when moving controls in .Net 8.0.\r\n![8 0Issue](https://user-images.githubusercontent.com/26474449/213832129-deedfb87-c995-49a4-8ae3-a9c281581b56.gif)\r\n\n\n### Steps to reproduce\n\nTest sample: [DemoConsole](https://github.com/dotnet/winforms/tree/main/src/System.Windows.Forms/tests/IntegrationTests/DesignSurface/DemoConsole) in Winforms repo","Url":"https://github.com/dotnet/winforms/issues/8515","RelatedDescription":"Closed issue \"Cannot resize controls in runtime and has an exception when moving controls\" (#8515)"},{"Id":"1555850868","IsPullRequest":true,"CreatedAt":"2023-01-26T18:17:56","Actor":"elachlan","Number":"8522","RawContent":null,"Title":"Fix control select and exception when moving controls","State":"closed","Body":"Related: #8515\r\n\r\nI have fixed the exceptions in `DropSourceBehavior` and `SelectionUIService`. But the resize via the editor still doesn't work.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8522)","Url":"https://github.com/dotnet/winforms/pull/8522","RelatedDescription":"Closed or merged PR \"Fix control select and exception when moving controls\" (#8522)"},{"Id":"1537176648","IsPullRequest":true,"CreatedAt":"2023-01-26T12:26:28","Actor":"elachlan","Number":"8511","RawContent":null,"Title":"Improve form memory leak test code","State":"closed","Body":"Follow up to #8478\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8511)","Url":"https://github.com/dotnet/winforms/pull/8511","RelatedDescription":"Closed or merged PR \"Improve form memory leak test code\" (#8511)"},{"Id":"1557178190","IsPullRequest":true,"CreatedAt":"2023-01-25T22:36:42","Actor":"dotnet-bot","Number":"8525","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2096917","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8525)","Url":"https://github.com/dotnet/winforms/pull/8525","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2096917\" (#8525)"},{"Id":"1557177887","IsPullRequest":true,"CreatedAt":"2023-01-25T20:56:25","Actor":"dotnet-bot","Number":"8524","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2095145","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8524)","Url":"https://github.com/dotnet/winforms/pull/8524","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2095145\" (#8524)"},{"Id":"1556620874","IsPullRequest":true,"CreatedAt":"2023-01-25T18:12:57","Actor":"dotnet-maestro[bot]","Number":"8523","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230124.4\r\n- **Date Produced**: January 25, 2023 4:31:21 AM UTC\r\n- **Commit**: 98ca34955f6b4018dcacdddbb7b02fc3e47bcf9b\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.23073.10 to 8.0.0-alpha.1.23074.4][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/ae70a1c...98ca349\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8523)","Url":"https://github.com/dotnet/winforms/pull/8523","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8523)"},{"Id":"1555772033","IsPullRequest":false,"CreatedAt":"2023-01-24T22:37:19","Actor":"runfoapp[bot]","Number":"8521","RawContent":null,"Title":"Flaky test: Com2Interop.COM2FontConverterTests.COM2FontConverter_ConvertManagedToNative","State":"open","Body":"<!-- runfo report start -->\r\nRunfo Tracking Issue: [Flaky test: Com2Interop.COM2FontConverterTests.COM2FontConverter_ConvertManagedToNative](https://runfo.azurewebsites.net/tracking/issue/449)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n|[147093](https://dev.azure.com/dnceng-public/public/_build/results?buildId=147093)|[dotnet-winforms CI](https://dnceng-public.visualstudio.com/public/_build?definitionId=76)|[PR 8519](https://github.com/dotnet/winforms/pull/8519)|Windows_x86-xunit|\r\n|[146884](https://dev.azure.com/dnceng-public/public/_build/results?buildId=146884)|[dotnet-winforms CI](https://dnceng-public.visualstudio.com/public/_build?definitionId=76)|[PR 8518](https://github.com/dotnet/winforms/pull/8518)|Windows_x86-xunit|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|0|2|2|\r\n\r\n<!-- runfo report end -->\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/8521","RelatedDescription":"Open issue \"Flaky test: Com2Interop.COM2FontConverterTests.COM2FontConverter_ConvertManagedToNative\" (#8521)"},{"Id":"1555637037","IsPullRequest":false,"CreatedAt":"2023-01-24T20:41:14","Actor":"runfoapp[bot]","Number":"8520","RawContent":null,"Title":"Flaky Test: System.Windows.Forms.Tests.CursorTests.Cursor_ToString_CursorFromFile_ReturnsExpected","State":"open","Body":"<!-- runfo report start -->\r\nRunfo Tracking Issue: [Flaky Test: System.Windows.Forms.Tests.CursorTests.Cursor_ToString_CursorFromFile_ReturnsExpected](https://runfo.azurewebsites.net/tracking/issue/448)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n|[147093](https://dev.azure.com/dnceng-public/public/_build/results?buildId=147093)|[dotnet-winforms CI](https://dnceng-public.visualstudio.com/public/_build?definitionId=76)|[PR 8519](https://github.com/dotnet/winforms/pull/8519)|Windows_x86-xunit|\r\n|[145261](https://dev.azure.com/dnceng-public/public/_build/results?buildId=145261)|[dotnet-winforms CI](https://dnceng-public.visualstudio.com/public/_build?definitionId=76)|[PR 8474](https://github.com/dotnet/winforms/pull/8474)|Windows_x64-xunit|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|0|2|2|\r\n\r\n<!-- runfo report end -->\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/8520","RelatedDescription":"Open issue \"Flaky Test: System.Windows.Forms.Tests.CursorTests.Cursor_ToString_CursorFromFile_ReturnsExpected\" (#8520)"},{"Id":"1555557275","IsPullRequest":true,"CreatedAt":"2023-01-24T19:37:25","Actor":"dreddy-work","Number":"8519","RawContent":null,"Title":"Enable Thread's DPI hosting behavior for mixed mode DPI applications.","State":"open","Body":"fixes #8144 \r\n\r\nWinForms now supports mixed mode DPI scenarios for applications hosted in Visual Studio. This requires the explicit alteration of default [hosting behavior](https://learn.microsoft.com/en-us/windows/win32/api/windef/ne-windef-dpi_hosting_behavior) on the threads creating the main UI, which Visual Studio has done to allow for mixed mode DPI child elements while in PermonitorV2 DPI mode.\r\n\r\n However, when investigating issue #8144, it was found that WinForms control parenting was failing in the designer within Visual Studio due to threads creating WinForms controls not enabling mixed mode hosting, resulting in a failure to build the parenting hierarchy when the DpiAwarenessContext differs, and not yet parented to Visual Studio. \r\n\r\nTo support mixed mode DPI outside of Visual Studio hosting or WinForms standalone applications, mixed mode DPI hosting needs to be enabled on the threads that creating windows in WinForms.\r\n\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8519)","Url":"https://github.com/dotnet/winforms/pull/8519","RelatedDescription":"Open PR \"Enable Thread's DPI hosting behavior for mixed mode DPI applications.\" (#8519)"},{"Id":"1554950474","IsPullRequest":true,"CreatedAt":"2023-01-24T18:10:26","Actor":"dotnet-maestro[bot]","Number":"8517","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230123.10\r\n- **Date Produced**: January 24, 2023 11:09:02 AM UTC\r\n- **Commit**: ae70a1c51a334a5e13fa22d500f8a8390052eef5\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Text.Json**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.23072.5 to 8.0.0-alpha.1.23073.10][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/a272954...ae70a1c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8517)","Url":"https://github.com/dotnet/winforms/pull/8517","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8517)"},{"Id":"1555413202","IsPullRequest":true,"CreatedAt":"2023-01-24T17:53:09","Actor":"dkazennov","Number":"8518","RawContent":null,"Title":"Removed extra code for the ListBox.ItemHeight property","State":"open","Body":"Fixes #4463\r\n\r\n## Proposed changes\r\n\r\n- Introduces a new private property `DefaultHeight` with **the intended value** equals Winforms Control.DefaultFont.Height (for example in Windows.Forms it is **Segoe UI, Size 9, Height 16** by default).\r\n- Removes the DefaultValue attribute from the `ListBox.ItemHeight` property;\r\n- Implements `ResetItemHeight` and `ShouldSerializeItemHeight` methods ([see more](https://learn.microsoft.com/en-us/dotnet/desktop/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods?view=netframeworkdesktop-4.8)).\r\n- The ListBox.DefaultItemHeight constant marked as obsolete. The `ListBox.ItemHeight` is now depended on actual `DefaultFont.Height` value.\r\n- The `ListBox.ItemHeight` property still returns the value of the  `_itemHeight` property as usual.\r\n- Existing unit tests weren't changed.\r\n- New unit test `ListBox_Height_IsEqualDefaultHeight_IfDefaultFontIsChanged` is added.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Fixes the Issue which impacts user experience,  breaks DPI and Font scaling. For the _newly created_ control at 100% scaling, designer should generate the same value as is defined by the Default. There is no extra code.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/104525385-e63a8080-55b4-11eb-8018-1cd886b658a0.png)\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/104525352-d1f68380-55b4-11eb-9bf4-fafbf11c85f4.png)\r\n\r\n\r\n## Test methodology\r\n\r\n- Manual (Issue can be tested via substitution of dlls, complete restart of the VS recommended)\r\n- Unit test\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- dotnet 8.0.100-alpha.1.22607.6\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8518)","Url":"https://github.com/dotnet/winforms/pull/8518","RelatedDescription":"Open PR \"Removed extra code for the ListBox.ItemHeight property\" (#8518)"},{"Id":"1553975222","IsPullRequest":true,"CreatedAt":"2023-01-24T00:55:27","Actor":"elachlan","Number":"8516","RawContent":null,"Title":"Enable IDE0059 Unnecessary assignment of a value","State":"closed","Body":"Analyzer was used to apply fix to whole solution.\r\n\r\nRelated: #7887\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8516)","Url":"https://github.com/dotnet/winforms/pull/8516","RelatedDescription":"Closed or merged PR \"Enable IDE0059 Unnecessary assignment of a value\" (#8516)"},{"Id":"1534831204","IsPullRequest":true,"CreatedAt":"2023-01-23T20:31:40","Actor":"NikitaSemenovAkvelon","Number":"8507","RawContent":null,"Title":"Making `DataGridView` icons more clear","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #7722\r\n\r\n\r\n## Proposed changes\r\n\r\n- Added a `ControlPaint.CreateBitmapWithInvertedForeColor` method for inverting colors of the bitmap if the image's primary color has low contrast with a background.\r\n- Used the `ControlPaint.CreateBitmapWithInvertedForeColor` method for `DataGridViewRowHeaderCell` images if HC mode is on.\r\n- Covered the `ControlPaint.CreateBitmapWithInvertedForeColor` method with unit tests.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Images in `DataGridViewRowHeaderCell` become more clear.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/109065597/212674774-a1f4ee82-5118-463e-9528-1985eaab81cd.png)\r\n![image](https://user-images.githubusercontent.com/109065597/212674780-98c61d1b-571a-446d-9e07-0fcd4aa76e79.png)\r\n![image](https://user-images.githubusercontent.com/109065597/212674792-56a0b77c-ddeb-4b71-97eb-b1292c695794.png)\r\n![image](https://user-images.githubusercontent.com/109065597/212674803-41ce6773-3d3f-4d8e-99ee-a3883dfe22ea.png)\r\n\r\n### After\r\n\r\n![Screenshot 2023-01-16 112352](https://user-images.githubusercontent.com/109065597/212674945-3e969508-5500-4aad-b0e0-ed39a9f3b3e5.png)\r\n![Screenshot 2023-01-16 112342](https://user-images.githubusercontent.com/109065597/212674954-3923408a-2dfd-41f1-a62c-e9c1afaf1135.png)\r\n![Screenshot 2023-01-16 112256](https://user-images.githubusercontent.com/109065597/212674960-32d3ef02-e7c2-4181-ab94-4df99a33f90e.png)\r\n![Screenshot 2023-01-16 112245](https://user-images.githubusercontent.com/109065597/212674966-7c6a390b-b58d-4192-94af-986d0723f036.png)\r\n![Screenshot 2023-01-16 103801](https://user-images.githubusercontent.com/109065597/212674863-4d5af6bc-a7f7-4181-a3d0-b193fe4769b1.png)\r\n![Screenshot 2023-01-16 103750](https://user-images.githubusercontent.com/109065597/212674874-78f63ba1-4b5d-444d-802f-41437d321af2.png)\r\n![Screenshot 2023-01-16 112136](https://user-images.githubusercontent.com/109065597/212674982-cddea073-9e53-4380-a069-676e46f06e18.png)\r\n![Screenshot 2023-01-16 112122](https://user-images.githubusercontent.com/109065597/212674996-77c8bfa1-08de-44b4-a7c5-ad0b830e26b5.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually\r\n- AI\r\n- Unit testing\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n- AI\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET SDK:\r\n Version:   8.0.100-alpha.1.22512.5\r\n Commit:    1b80461e45\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22621\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8507)","Url":"https://github.com/dotnet/winforms/pull/8507","RelatedDescription":"Closed or merged PR \"Making `DataGridView` icons more clear\" (#8507)"},{"Id":"1550763660","IsPullRequest":false,"CreatedAt":"2023-01-20T12:20:25","Actor":"ismlsmile","Number":"8514","RawContent":null,"Title":"RichTextBox could not be used in VS designer","State":"open","Body":"### Environment\r\n\r\n17.4.4\r\n\r\n### .NET version\r\n\r\n7.0.102\r\n\r\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\r\n\r\n_No response_\r\n\r\n### Issue description\r\nwhen drag a RichTextBox to a Form, VS Designer will show this error:\r\nBuilt-in COM has been disabled via a feature switch. See https://aka.ms/dotnet-illink/com for more\r\n\r\n![image](https://user-images.githubusercontent.com/1876179/213693437-a7444221-4877-457d-a087-415f1a4e3970.png)\r\n\r\n\r\n### Steps to reproduce\r\n\r\njust drag a RichTextBox to a Form\r\n\r\n### Diagnostics\r\n\r\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8514","RelatedDescription":"Open issue \"RichTextBox could not be used in VS designer\" (#8514)"},{"Id":"1550512157","IsPullRequest":false,"CreatedAt":"2023-01-20T09:02:12","Actor":"Olina-Zhang","Number":"8513","RawContent":null,"Title":"Automation case about ErrorProvider failed with \"Cannot access a disposed object\"","State":"open","Body":"### .NET version\n\n8.0.100-alpha.1.23068.16\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, cannot repro in previous versions\n\n### Issue description\n\n![image](https://user-images.githubusercontent.com/26474449/213655624-c6592448-98f2-413e-8f63-c82f811b9c79.png), related causing PR: https://github.com/dotnet/winforms/pull/8486\r\n_System.ObjectDisposedException\r\n  HResult=0x80131622\r\n  Message=Cannot access a disposed object.\r\n  Source=System.Drawing.Common\r\n  StackTrace:\r\n   at System.Drawing.Icon.get_Handle()\r\n   at System.Drawing.Icon.get_Size()\r\n   at System.Windows.Forms.ErrorProvider.IconRegion.get_Size()\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.Update(Boolean timerCaused)\r\n   at System.Windows.Forms.ErrorProvider.ErrorWindow.Add(ControlItem item)\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.AddToWindow()\r\n   at System.Windows.Forms.ErrorProvider.ControlItem.set_Error(String value)\r\n   at System.Windows.Forms.ErrorProvider.SetError(Control control, String value)\r\n   at XErrorProvider.set_RightToLeft(TParams p, Boolean rtl) in C:\\Users\\xxx\\Desktop\\XErrorProvider_P1\\XErrorProvider_P1\\XErrorProvider.cs:line 455\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)_\r\n\n\n### Steps to reproduce\n\nIt reproduces steadily in our automation case about errorProvider, but we cannot repro manually in TextBox and ErrorProvider, then errorProvider.setError","Url":"https://github.com/dotnet/winforms/issues/8513","RelatedDescription":"Open issue \"Automation case about ErrorProvider failed with \"Cannot access a disposed object\"\" (#8513)"},{"Id":"1536450590","IsPullRequest":false,"CreatedAt":"2023-01-18T18:36:54","Actor":"MohanramAnbukkarasu","Number":"8510","RawContent":null,"Title":"Custom border corners are not rendered properly when having rounded corners in a Form","State":"closed","Body":"### .NET version\n\nIssue occurs both in .NET framework 4.6 and NET 6 \n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo\n\n### Issue description\n\nI have created a custom form with rounded corners implemented as shown in the below given code snippet. \r\n\r\n```\r\npublic partial class Form1 : Form\r\n{\r\n    public Form1()\r\n    {\r\n        InitializeComponent();\r\n    }\r\n    protected override void OnShown(EventArgs e)\r\n    {\r\n        base.OnShown(e);\r\n        ApplyRoundedCorners();\r\n    }\r\n    private long ApplyRoundedCorners()\r\n    {\r\n        NativeMethods.DWM_WINDOW_CORNER_PREFERENCE dWM_WINDOW_CORNER_PREFERENCE;\r\n        dWM_WINDOW_CORNER_PREFERENCE = NativeMethods.DWM_WINDOW_CORNER_PREFERENCE.DWMWCP_ROUND;\r\n        NativeMethods.DWMWINDOWATTRIBUTE attribute = NativeMethods.DWMWINDOWATTRIBUTE.DWMWA_WINDOW_CORNER_PREFERENCE;\r\n        return NativeMethods.DwmSetWindowAttribute(base.Handle, attribute, ref dWM_WINDOW_CORNER_PREFERENCE, 4u);\r\n    }\r\n    protected override void WndProc(ref Message m)\r\n    {\r\n        if (m.Msg == NativeMethods.WM_NCPAINT)\r\n        {\r\n            NativeMethods.RECT rc = new NativeMethods.RECT();\r\n            NativeMethods.GetWindowRect((int)this.Handle, ref rc);\r\n            IntPtr hdc = NativeMethods.GetWindowDC(this.Handle);\r\n            IntPtr bufferDC = NativeMethods.CreateCompatibleDC(hdc);\r\n            using (Graphics bufferedGraphics = Graphics.FromHdc(bufferDC))\r\n            {\r\n                DrawFrameBorders(bufferedGraphics, new Rectangle(0, 0, rc.Width, rc.Height));\r\n            }\r\n        }\r\n        else\r\n            base.WndProc(ref m);\r\n    }\r\n    private void DrawFrameBorders(Graphics g, Rectangle rc)\r\n    {\r\n        SmoothingMode smoothingMode = g.SmoothingMode;\r\n        g.SmoothingMode = SmoothingMode.AntiAlias;\r\n        Color borderColor = Color.Red;\r\n        if (this.WindowState != FormWindowState.Maximized)\r\n        {\r\n            Pen pen = new Pen(borderColor, 5);\r\n            Rectangle rect = new Rectangle(rc.X, rc.Y, rc.Width - 1, rc.Height - 1);\r\n            g.DrawRectangle(pen, rect);\r\n            pen.Dispose();\r\n        }\r\n        g.SmoothingMode = smoothingMode;\r\n    }\r\n}\r\n```\r\n\r\nI have override the `WndProc` to customize the appearance of the non client area. In the above given code I have provided only the code used for rounded corners and custom borders. \r\n\r\nThe problem I'm facing on this is the rounded corners are not rendered completely when the custom borders are drawn. \r\n\r\n![image](https://user-images.githubusercontent.com/44049406/212918781-20d52870-622d-4136-afaf-3d6768e071a0.png)\r\n\r\n\r\n\n\n### Steps to reproduce\n\nI'm unable to provide a sample app as my custom form include more line of code. So I have provided only the code which I have used to have rounded corners and custom border.  ","Url":"https://github.com/dotnet/winforms/issues/8510","RelatedDescription":"Closed issue \"Custom border corners are not rendered properly when having rounded corners in a Form\" (#8510)"},{"Id":"1538027060","IsPullRequest":false,"CreatedAt":"2023-01-18T18:31:26","Actor":"roland5572","Number":"8512","RawContent":null,"Title":"ListView OwnerDraw has compatibility problem if the user double-clicks the column header divider","State":"closed","Body":"### .NET version\r\n\r\n.Net 7.0\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNo\r\n\r\n### Issue description\r\n\r\nUsers can use **ListView.OwnerDraw** property to implement custom drawing function for ListViewItem.\r\n\r\nAbout OwnerDraw:\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.listview.ownerdraw\r\n\r\nBut when using this feature, and when user double click on **column header divider**, ListView can't show correct column width.\r\n\r\nPicture 1:\r\nAfter running the test code, the ListView control shows two columns. When you click on the area on the picture, ListView will automatically adjust the width of the corresponding column.\r\n\r\n![1](https://user-images.githubusercontent.com/88176616/213186437-d048cea8-bd87-4e7e-979e-df459025796b.png)\r\n\r\nPicture 2:\r\nSince there is no corresponding **width property** for OwnerDraw, ListView cannot automatically calculate the width of ListViewSubItem, and the wrong column width is displayed.\r\n\r\n![2](https://user-images.githubusercontent.com/88176616/213186474-73c9fd06-4a24-412c-ae1e-b790596fdb28.png)\r\n\r\n![3](https://user-images.githubusercontent.com/88176616/213186492-419837c9-c551-4b3b-ba8d-acb2b1c74cbc.png)\r\n\r\nOther supplements:\r\n\r\n1. The **DataGridView** control has a **ColumnDividerDoubleClick** event, but the ListView control does not have this event, so it cannot be processed in the event.\r\n\r\nAbout ColumnDividerDoubleClick Event\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridview.columndividerdoubleclick\r\n\r\nPossible improvements\r\n\r\nProvide specific event so that when the user double-clicks the column divider, the program can calculate the correct Column Width.\r\n\r\n### Steps to reproduce\r\n\r\nC# Test Code with .Net 7.0 and Visual Studio 2022\r\n\r\n```\r\nusing System;\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nnamespace ListViewOwnerDrawTest\r\n{\r\n    internal static class Program\r\n    {\r\n        [STAThread]\r\n        static void Main()\r\n        {\r\n            ApplicationConfiguration.Initialize();\r\n            Application.Run(CreateForm());\r\n        }\r\n\r\n        private class ItemData\r\n        {\r\n            public string Name { get; set; }\r\n            public Color Color { get; set; }\r\n            public Brush Brush { get; }\r\n\r\n            public ItemData(Color color)\r\n            {\r\n                Name = color.Name;\r\n                Color = color;\r\n\r\n                Brush = new SolidBrush(Color);\r\n            }\r\n        }\r\n\r\n        private static Form CreateForm()\r\n        {\r\n            var form = new Form()\r\n            {\r\n                Width = 600,\r\n                Height = 480,\r\n\r\n                StartPosition = FormStartPosition.CenterScreen,\r\n            };\r\n\r\n            var control = CreateListView();\r\n            form.Controls.Add(control);\r\n\r\n            return form;\r\n        }\r\n\r\n        private static ListView CreateListView()\r\n        {\r\n            var control = new ListView()\r\n            {\r\n                Dock = DockStyle.Fill,\r\n                View = View.Details,\r\n\r\n                OwnerDraw = true,\r\n                FullRowSelect = true,\r\n            };\r\n\r\n            control.Columns.Add(\"Number\", 100);\r\n            control.Columns.Add(\"Color Name\", 200);\r\n\r\n            var index = 1;\r\n\r\n            AddItemData(control, index++, new ItemData(Color.Orange));\r\n            AddItemData(control, index++, new ItemData(Color.Yellow));\r\n            AddItemData(control, index++, new ItemData(Color.Red));\r\n            AddItemData(control, index++, new ItemData(Color.Blue));\r\n            AddItemData(control, index++, new ItemData(Color.Green));\r\n            AddItemData(control, index++, new ItemData(Color.LightSkyBlue));\r\n\r\n            control.DrawColumnHeader += Control_DrawColumnHeader;\r\n            control.DrawSubItem += Control_DrawSubItem;\r\n\r\n            return control;\r\n        }\r\n\r\n        private static void AddItemData(ListView list, int number, ItemData data)\r\n        {\r\n            var item = list.Items.Add(number.ToString());\r\n\r\n            item.SubItems.Add(\"\"); //No text is needed, graphics need to be drawn, among other things.\r\n\r\n            item.Tag = data;\r\n        }\r\n\r\n        private static void Control_DrawColumnHeader(object sender, DrawListViewColumnHeaderEventArgs e)\r\n        {\r\n            e.DrawDefault = true;\r\n        }\r\n\r\n        private static void Control_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)\r\n        {\r\n            if (e.ColumnIndex != 1)\r\n            {\r\n                e.DrawDefault = true;\r\n                return;\r\n            }\r\n\r\n            var item = e.Item;\r\n            var subItem = e.SubItem;\r\n            var bounds = subItem.Bounds;\r\n\r\n            var data = item.Tag as ItemData;\r\n            var text = data.Name;\r\n\r\n            var g = e.Graphics;\r\n            g.Clip = new Region(bounds);\r\n\r\n            var picWidth = 20;\r\n            var picHeight = bounds.Height - 4;\r\n\r\n            var rect = new Rectangle(bounds.X, bounds.Y, picWidth, picHeight);\r\n\r\n            g.FillRectangle(data.Brush, rect);\r\n\r\n            rect = bounds;\r\n            rect.Offset(picWidth, 0);\r\n\r\n            g.DrawString(text, item.Font, Brushes.Black, rect);\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/8512","RelatedDescription":"Closed issue \"ListView OwnerDraw has compatibility problem if the user double-clicks the column header divider\" (#8512)"},{"Id":"1535605728","IsPullRequest":true,"CreatedAt":"2023-01-16T23:42:02","Actor":"elachlan","Number":"8509","RawContent":null,"Title":"Refactor `ToolStripControlHost.Control` property to throw `ObjectDisposedException` if null","State":"open","Body":"Refactored `ToolStripControlHost.Control` property to throw `ObjectDisposedException` if null.\r\nAlso some minor refactoring using expression bodies\r\n\r\nFixes #2466\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8509)","Url":"https://github.com/dotnet/winforms/pull/8509","RelatedDescription":"Open PR \"Refactor `ToolStripControlHost.Control` property to throw `ObjectDisposedException` if null\" (#8509)"},{"Id":"1535543038","IsPullRequest":false,"CreatedAt":"2023-01-16T22:10:48","Actor":"dmanter","Number":"8508","RawContent":null,"Title":"Winforms Customer Designer - (DataGridView and DateTimePicker)","State":"open","Body":"### .NET version\n\n7.0\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNot tried - Worked in 4.7.2\n\n### Issue description\n\nHi Klaus,\r\nI canâ€™t find anywhere or anybody to help me with this problem. I had a programmer who wrote us a custom Form Designer using some old VS Designer Project from many years ago. Basically we allow user to design a form and then save it and the controls to xml. At runtime we read the xml make a dynamic user form with those controls. When they hit OK, it runs a stored procedure with SQL and the controls text entries are passed to the stored procedure as parameters. This allow things like a user can make a pricing update form with a simple textbox for price increase amount. The stored proc runs thru the price table and adds that. We have been using for many years. Just updating now off .Net 4 to .Net 7 to modernize our app. This Form Designer almost worked. The DateTimePicker and DataGridView get a no designer error. Iâ€™ve spent days tracking the code that fail and only get to this in the TypeDescriptor.\r\nThe line :type = Type.GetType(designerAttribute.DesignerTypeName); returns null for DTP and DGV but a designer for Labels, TextBox, RadioBUttons, CHeckBOx, etc.\r\nOnly null on DTP and DGV.\r\nI canâ€™t seem to get debug to step into the Type.GetType() so at a dead end.\r\nI am stuck for days and at a loss what to do. DTP and DGV work in VS 2022 designer so there must be some way this can get at a designer for each.\r\nThanks Doug Manter, CTO Creative Information Systems, Inc.\r\n[dmanter@creativeinfo.net](mailto:dmanter@creativeinfo.net)\r\nPlease help or advise. I wanted to leave under WinForms page but said comments closed.\r\n\r\n    public static IDesigner? CreateDesigner(IComponent component, Type designerBaseType)\r\n    {\r\n        Type? type = null;\r\n        IDesigner? result = null;\r\n        AttributeCollection attributes = GetAttributes(component);\r\n        for (int i = 0; i < attributes.Count; i++)\r\n        {\r\n            if (attributes[i] is DesignerAttribute designerAttribute)\r\n            {\r\n                Type? type2 = Type.GetType(designerAttribute.DesignerBaseTypeName);\r\n                if (type2 != null && type2 == designerBaseType)\r\n                {\r\n                    ISite? site = component.Site;\r\n                    bool flag = false;\r\n                    ITypeResolutionService? typeResolutionService = (ITypeResolutionService?)site?.GetService(typeof(ITypeResolutionService));\r\n                    if (typeResolutionService != null)\r\n                    {\r\n                        flag = true;\r\n                        type = typeResolutionService.GetType(designerAttribute.DesignerTypeName);\r\n                    }\r\n                    if (!flag)\r\n                    {\r\n                        type = Type.GetType(designerAttribute.DesignerTypeName); <- RETURNS NULL for DateTimePicker and DataGridview.\r\n                    }\r\n                    if (type != null)\r\n                    {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (type != null)\r\n        {\r\n            result = (IDesigner?)Activator.CreateInstance(type);\r\n        }\r\n        return result;\r\n    }\r\n![CustomFormDesignerIssue](https://user-images.githubusercontent.com/3495842/212772762-218692b8-3d62-4aca-90ed-3e5e2c4696c2.png)\r\n\n\n### Steps to reproduce\n\nI could upload the whole project but unsure how.","Url":"https://github.com/dotnet/winforms/issues/8508","RelatedDescription":"Open issue \"Winforms Customer Designer - (DataGridView and DateTimePicker)\" (#8508)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-01-30T03:31:07.9893424Z","RunDurationInMilliseconds":619}