{"Data":{"GitHub":{"Issues":[{"Id":"664831045","IsPullRequest":true,"CreatedAt":"2020-07-25T01:32:59","Actor":"JeremyKuhne","Number":"3635","RawContent":null,"Title":"Don't double apply Graphics transform","State":"closed","Body":"Grid entry text was being shifted out of the control window as we were applying the Graphics transform manually when the centralized code now does this for us.\r\n\r\nThis change no longer double applies and changes the code to use TextRenderer, removing the local HFONT caching.\r\n\r\nAlso fix GroupBox to use FillRect instead of Rectangle. Remove an uncalled overload for Rectangle.\r\n\r\nFixes #3580\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3635)","Url":"https://github.com/dotnet/winforms/pull/3635","RelatedDescription":"Closed or merged PR \"Don't double apply Graphics transform\" (#3635)"},{"Id":"665483844","IsPullRequest":false,"CreatedAt":"2020-07-25T00:51:21","Actor":"DragoonAethis","Number":"3642","RawContent":null,"Title":"TextBox.PlaceholderText uses BackColor even when TextBox.Enabled = false","State":"open","Body":"* .NET Core Version: 3.1.6\r\n* Have you experienced this same bug with .NET Framework?: No (PlaceholderText not available)\r\n* Visual Studio version: 2019 16.7 Preview 5\r\n\r\n**Problem description:**\r\n\r\nWhen PlaceholderText is set and displayed, it's always drawn with the BackColor as the background, regardless of the Enabled value. This causes minor graphical issues as presented below.\r\n\r\n![image](https://user-images.githubusercontent.com/1546665/88445020-56472580-ce20-11ea-8c81-ef1983395eff.png)\r\n\r\nThe issue is most likely [here](https://github.com/dotnet/winforms/blob/b12ba3357e6f2246b5af3c506b8b6e05b8ce1cae/src/System.Windows.Forms/src/System/Windows/Forms/TextBox.cs#L900) - renderer for the Text itself [draws the appropriate background color first, then the text without any background](https://github.com/dotnet/winforms/blob/b12ba3357e6f2246b5af3c506b8b6e05b8ce1cae/src/System.Windows.Forms/src/System/Windows/Forms/TextBoxRenderer.cs#L91).\r\n\r\n**Expected behavior:**\r\n\r\nWhen PlaceholderText is set and TextBox is disabled, the background color is rendered properly across the entire control.\r\n\r\n**Minimal repro:**\r\n\r\n```csharp\r\nusing System;\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nnamespace BrokenPlaceholder {\r\n    class PlaceholderForm : Form {\r\n        private TextBox textBox1;\r\n        private TextBox textBox2;\r\n        private TextBox textBox3;\r\n\r\n        public PlaceholderForm() {\r\n            SuspendLayout();\r\n\r\n            textBox1 = new TextBox {\r\n                Name = \"textBox1\",\r\n                Size = new Size(226, 23),\r\n                Location = new Point(33, 25),\r\n                Text = \"Some perfectly fine Text\"\r\n            };\r\n\r\n            textBox2 = new TextBox {\r\n                Name = \"textBox2\",\r\n                Size = new Size(226, 23),\r\n                Location = new Point(33, 54),\r\n                PlaceholderText = \"PlaceholderText\"\r\n            };\r\n\r\n            textBox3 = new TextBox {\r\n                Name = \"textBox3\",\r\n                Size = new Size(226, 23),\r\n                Location = new Point(33, 83),\r\n                PlaceholderText = \"Disabled PlaceholderText\",\r\n                Enabled = false\r\n            };\r\n\r\n            ClientSize = new Size(293, 138);\r\n            Controls.Add(this.textBox1);\r\n            Controls.Add(this.textBox2);\r\n            Controls.Add(this.textBox3);\r\n            Name = \"PlaceholderForm\";\r\n            Text = \"PlaceholderForm\";\r\n            ResumeLayout(false);\r\n\r\n            PerformLayout();\r\n        }\r\n    }\r\n\r\n    static class Program {\r\n        [STAThread]\r\n        static void Main() {\r\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\r\n            Application.EnableVisualStyles();\r\n            Application.SetCompatibleTextRenderingDefault(false);\r\n            Application.Run(new PlaceholderForm());\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/3642","RelatedDescription":"Open issue \"TextBox.PlaceholderText uses BackColor even when TextBox.Enabled = false\" (#3642)"},{"Id":"663349836","IsPullRequest":false,"CreatedAt":"2020-07-24T15:25:27","Actor":"jnm2","Number":"3620","RawContent":null,"Title":"Designer loading should not fail due to NuGet Package Manager dropdown being set to an internal feed","State":"closed","Body":"If the NuGet Package Manager UI happens to have the 'Package source' dropdown set to anything other than nuget.org or All, and you try to open a designer that depends on types defined in packages.\r\n\r\n![image](https://user-images.githubusercontent.com/8040367/88113523-ec105580-cb7f-11ea-9f17-a3549ee360a0.png)\r\n\r\nThis is in spite of the fact that building the solution succeeds. Given that building succeeds, there should be no reason that the designer can't load the types.\r\n\r\nIf you open up the package manager UI and switch the dropdown, then try to reopen the designer, it works.\r\n\r\nThe 'Package source' option gets reset all the time due to git cleans or fresh clones. If you open a project in a repository that has a nuget.config file, the package source defaults to the first entry in the repo's nuget.config file. This is usually not the nuget.org feed.\r\n\r\nThis is .NET Core SDK 3.1.302 and VS 16.6.5. I'll get you a repro if that is helpful.","Url":"https://github.com/dotnet/winforms/issues/3620","RelatedDescription":"Closed issue \"Designer loading should not fail due to NuGet Package Manager dropdown being set to an internal feed\" (#3620)"},{"Id":"665124881","IsPullRequest":true,"CreatedAt":"2020-07-24T12:37:36","Actor":"dotnet-maestro[bot]","Number":"3641","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200721.13\r\n- **Date Produced**: 7/22/2020 6:41 AM\r\n- **Commit**: d8cf13e0ba9b369a15a83472b6b97463c6d07fe2\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Diagnostics.PerformanceCounter**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.DirectoryServices**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Drawing.Common**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.IO.FileSystem.AccessControl**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.IO.Packaging**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.CodeDom**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.App**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.Targets**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.Win32.Registry.AccessControl**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **Microsoft.NETCore.App.Ref**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.IO.Pipes.AccessControl**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Windows.Extensions**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Resources.Extensions**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.AccessControl**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.Cryptography.Pkcs**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.Cryptography.ProtectedData**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.Permissions**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Security.Principal.Windows**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Text.Encodings.Web**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Text.Json**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n  - **System.Threading.AccessControl**: from 5.0.0-rc.1.20370.4 to 5.0.0-rc.1.20371.13\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3641)","Url":"https://github.com/dotnet/winforms/pull/3641","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3641)"},{"Id":"665011065","IsPullRequest":false,"CreatedAt":"2020-07-24T08:37:15","Actor":"Marie-Shi","Number":"3640","RawContent":null,"Title":"[Accessibility]Narrator's blue cursor cannot move when entering characters into the RichTextBox/ComboBox in RTL environment","State":"open","Body":"* .NET Core Version: \r\n.Net 5.0.100-rc.1.20373.1 from master branch + latest master VS2019 with latest core designer\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**More info:**\r\n1.\tThis issue cannot repro in LTR environment.\r\n2.\tWhen using left/right arrows, it also cannot focus on every letter.\r\n\r\n**Steps to reproduce:**\r\n1.\tExtract “Private_1588_RTL.zip” and open in in VS, then build and run this application.\r\n[Private_1588_RTL.zip](https://github.com/dotnet/winforms/files/4970937/Private_1588_RTL.zip)\r\n2.\tStart Narrator and focus on RichTextBox/ComboBox, input characters into them and observe Narrator blue cursor.\r\n\r\n**Actual behavior:**\r\nNarrator's blue cursor cannot move when entering characters into the RichTextBox/ComboBox in RTL environment.\r\n![New_issue1](https://user-images.githubusercontent.com/45864017/88374022-87493b00-cdcb-11ea-963d-e2c80be107a1.gif)\r\n\r\n**Expected behavior:**\r\nNarrator's blue cursor can move when entering characters into the RichTextBox/ComboBox in RTL environment. The behavior should be like in LTR.\r\n![Untitled](https://user-images.githubusercontent.com/45864017/88374091-b6f84300-cdcb-11ea-98b8-2b3a6b57f543.png)","Url":"https://github.com/dotnet/winforms/issues/3640","RelatedDescription":"Open issue \"[Accessibility]Narrator's blue cursor cannot move when entering characters into the RichTextBox/ComboBox in RTL environment\" (#3640)"},{"Id":"665002671","IsPullRequest":false,"CreatedAt":"2020-07-24T08:25:50","Actor":"Olina-Zhang","Number":"3639","RawContent":null,"Title":"Some properties are grey with black rectangle in Properties window after choosing more controls","State":"open","Body":"* .NET Core Version: \r\n5.0.100-rc.1.20373.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n No\r\n\r\n**Problem description:**\r\nSome properties are grey with black rectangle in Properties window after choosing more controls. Please see following screenshot:\r\n**This is a regression issue.** It cannot repro .Net 5.0 SDK build: 5.0.100-rc.1.20371.1\r\n![image](https://user-images.githubusercontent.com/26474449/88373072-bc548e00-cdc9-11ea-8df2-6b462c448218.png)\r\n\r\n**Expected behavior:**\r\nThey are enabled properties after choosing more controls. Please see following screenshot:\r\n![image](https://user-images.githubusercontent.com/26474449/88373191-f887ee80-cdc9-11ea-8299-9eb365155e21.png)\r\n\r\n**Minimal repro:**\r\n1. Create a WinForms .Net Core application\r\n2. Add a button and a checkedListBox to form designer\r\n3. Choose these 2 controls, then go to VS properties window to observe all properties","Url":"https://github.com/dotnet/winforms/issues/3639","RelatedDescription":"Open issue \"Some properties are grey with black rectangle in Properties window after choosing more controls\" (#3639)"},{"Id":"664976191","IsPullRequest":false,"CreatedAt":"2020-07-24T07:34:38","Actor":"Vino-Wang","Number":"3638","RawContent":null,"Title":"VS crash and restart after clicking the smart tag of ImageList/ContextMenuStrip controls in Component Tray ","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0.100-rc1.20373.1\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n<!-- Yes / No -->\r\n\r\n**More info:**\r\n1.\tThis is a regression issue of .NET5.0 5.0.100-rc1.20373.1, it cannot reproducing with 5.0.100-rc.1.20371.1 build and .NET Core 3.1 version.\r\n2.\tThis issue cannot reproduce with NotifyIcon control.\r\n\r\n**Problem description:**\r\nUser try to show the Tasks dialog to modify some properties using smart tag, but VS crash and restart after clicking the smart tag button.\r\n![Crash](https://user-images.githubusercontent.com/18568603/88369600-f8d0bb80-cdc2-11ea-8a36-271c47aba2a7.gif)\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n**Expected behavior:**\r\nThe Tasks dialog should be shown normally and VS shouldn’t crash.\r\n![Expected](https://user-images.githubusercontent.com/18568603/88369429-97105180-cdc2-11ea-92a1-be3128a8265c.png)\r\n\r\n**Minimal repro:**\r\n1.\tCreate a winforms core project.\r\n2.\tDrag and drop a ImageList control\r\n3.\tClick the smart tag of it in Component tray.","Url":"https://github.com/dotnet/winforms/issues/3638","RelatedDescription":"Open issue \"VS crash and restart after clicking the smart tag of ImageList/ContextMenuStrip controls in Component Tray \" (#3638)"},{"Id":"664963936","IsPullRequest":false,"CreatedAt":"2020-07-24T07:06:56","Actor":"Vino-Wang","Number":"3637","RawContent":null,"Title":"An error pops up after clicking the smart tag of ToolStrip/MenuStrip/StatusStrip/TreeView/PictureBox controls","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0.100-rc1.20373.1\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n<!-- Yes / No -->\r\n**More info:**\r\nThis is a regression issue of .NET5.0 5.0.100-rc1.20373.1, it cannot reproducing with 5.0.100-rc.1.20371.1 build and .NET Core 3.1 version.\r\n\r\n**Problem description:**\r\nUser try to show the Tasks dialog to modify some properties using smart tag, but an error pops up after clicking the smart tag button.\r\n\r\n![Actual](https://user-images.githubusercontent.com/18568603/88367764-2451a700-cdbf-11ea-8a24-3f6614bc169b.png)\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n**Expected behavior:**\r\nThe Controls' Tasks dialog should be shown normally.\r\n![Expected](https://user-images.githubusercontent.com/18568603/88367780-2ddb0f00-cdbf-11ea-92ca-0b96b8fb50bc.png)\r\n\r\n**Minimal repro:**\r\n1.\tCreate a winforms core project.\r\n2.\tDrag and drop a ToolStrip control to form designer.\r\n3.\tClick the smart tag in the top right corner of the ToolStrip control.\r\n","Url":"https://github.com/dotnet/winforms/issues/3637","RelatedDescription":"Open issue \"An error pops up after clicking the smart tag of ToolStrip/MenuStrip/StatusStrip/TreeView/PictureBox controls\" (#3637)"},{"Id":"664948088","IsPullRequest":false,"CreatedAt":"2020-07-24T06:29:21","Actor":"Olina-Zhang","Number":"3636","RawContent":null,"Title":"Properties window is blank","State":"open","Body":"* .NET Core Version: \r\n5.0.100-rc.1.20373.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nProperties window is blank, we cannot see any properties for form or added controls, and no properties and events toolbar in Properties window.\r\n**This is a regression issue**. It cannot repro .Net 5.0 SDK build: 5.0.100-rc.1.20371.1\r\n![image](https://user-images.githubusercontent.com/26474449/88374127-cd060380-cdcb-11ea-92a4-3030a4fb1db2.png)\r\n\r\n**Expected behavior:**\r\nAll properties and events are in Properties window\r\n![image](https://user-images.githubusercontent.com/26474449/88374167-de4f1000-cdcb-11ea-8eba-427f9de52512.png)\r\n\r\n**Minimal repro:**\r\nThe repro step is very simple, just create an empty app \r\n1.\tCreate a WinForms .Net Core application\r\n2.\tFocus on Form designer, and go to Properties window or press F4\r\n3.\tObserve Properties window\r\n","Url":"https://github.com/dotnet/winforms/issues/3636","RelatedDescription":"Open issue \"Properties window is blank\" (#3636)"},{"Id":"664695144","IsPullRequest":false,"CreatedAt":"2020-07-23T18:53:10","Actor":"vladimir-krestov","Number":"3634","RawContent":null,"Title":"Periodic NRE in GdiCache.GetHFONT method","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: 5.0\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\n- We can get `NullReferenceException` sometimes (about 10-15% chance) in `GdiCache.GetHFONT` method. (**`s_fontCache`** is null)\r\n![image](https://user-images.githubusercontent.com/49272759/88325491-de003780-cd2d-11ea-876f-a9937edd0539.png)\r\n\r\n- It seems this method is called before **`s_fontCache`** initializing in `ScreenDcCache`.\r\n![image](https://user-images.githubusercontent.com/49272759/88325715-05ef9b00-cd2e-11ea-946b-92aacad2de0a.png)\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\n- There are no NREs\r\n\r\n**Minimal repro:**\r\n- Run Inspect (The issue reproduces only if inspect is already running)\r\n- Run the internal WindowsControlsTest project\r\n- Get NRE sometimes before loading the main test form","Url":"https://github.com/dotnet/winforms/issues/3634","RelatedDescription":"Open issue \"Periodic NRE in GdiCache.GetHFONT method\" (#3634)"},{"Id":"664434680","IsPullRequest":true,"CreatedAt":"2020-07-23T12:32:15","Actor":"RussKie","Number":"3633","RawContent":null,"Title":"Enable RemoteExecutor tests","State":"open","Body":"Resolves https://github.com/dotnet/arcade/issues/5325\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3633)","Url":"https://github.com/dotnet/winforms/pull/3633","RelatedDescription":"Open PR \"Enable RemoteExecutor tests\" (#3633)"},{"Id":"664417569","IsPullRequest":false,"CreatedAt":"2020-07-23T12:02:34","Actor":"RussKie","Number":"3632","RawContent":null,"Title":"RichTextBox no longer renders links","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n\r\n* .NET Core Version: \r\n   - .NET Core 3.1 - doesn't\r\n   - .NET 5.0 RC1 - doesn't\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n    - .NET 4.6.1 - **works**\r\n    - .NET 4.7.2+ - doesn't\r\n\r\nThis is blocking a [migration of Git Extensions to .NET Core / .NET 5.0](https://github.com/gitextensions/gitextensions/pull/7162).\r\n\r\n**Problem description:**\r\n\r\n`RichTextBox` control doesn't respond to `EM_SETCHARFORMAT` with `lParam: SCF_SELECTION, wParam: CHARFORMAT2W(dwMask: CFM.LINK, dwEffects: CFE.LINK)`.\r\n\r\nThe text put in the RTB is as follows:\r\n```\r\n\"Related links: <a href='https://github.com/gitextensions/gitextensions/commit/2c0698453e29dc243bfbc817ef74581c0cbfc830'>View on GitHub</a>, <a href='https://github.com/gitextensions/gitextensions/issues/8333'>Issue 8333</a>\"\r\n```\r\n\r\n* .NET 4.6.1:\r\n    ![image](https://user-images.githubusercontent.com/4403806/88283735-5e736800-cd2f-11ea-9ab4-6453970293a5.png)\r\n* .NET 4.7.2:\r\n    ![image](https://user-images.githubusercontent.com/4403806/88283770-6f23de00-cd2f-11ea-8f2c-4e88eda6a76a.png)\r\n* .NET 5.0:\r\n    ![image](https://user-images.githubusercontent.com/4403806/88283831-911d6080-cd2f-11ea-88f8-c586d3422438.png)\r\n\r\nAs pointed in https://github.com/dotnet/winforms/issues/3399#issuecomment-661024452 in .NET 4.7.2 there was a change of version of the underlying native control (i.e. RichEdit 4.1 from Msftedit.dll), which is probably the underlying reason of the problem.\r\n\r\n**Minimal repro:**\r\n\r\n[ge-rtb-links.zip](https://github.com/dotnet/winforms/files/4965681/ge-rtb-links.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3632","RelatedDescription":"Open issue \"RichTextBox no longer renders links\" (#3632)"},{"Id":"664188256","IsPullRequest":true,"CreatedAt":"2020-07-23T04:05:18","Actor":"RussKie","Number":"3631","RawContent":null,"Title":"Add template for WinForms Control Library","State":"open","Body":"Resolves #3608\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- local / manually\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3631)","Url":"https://github.com/dotnet/winforms/pull/3631","RelatedDescription":"Open PR \"Add template for WinForms Control Library\" (#3631)"},{"Id":"663367883","IsPullRequest":true,"CreatedAt":"2020-07-22T23:59:08","Actor":"JeremyKuhne","Number":"3621","RawContent":null,"Title":"Improve SendKeys performance","State":"closed","Body":"There were significantly more allocations in `SendKeys` than were necessary. This cuts them down by:\r\n\r\n1. Using structs instead of classes\r\n2. Using a generic queue\r\n3. Using stack allocated space to get key state\r\n\r\nWe hit the key state in `Control` as well. Also cleaned up the tracking of modifier keys a bit.\r\n\r\nThe first commit is just style cleanup. The second is the functional change.\r\n\r\n@KlausLoeffelmann \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3621)","Url":"https://github.com/dotnet/winforms/pull/3621","RelatedDescription":"Closed or merged PR \"Improve SendKeys performance\" (#3621)"},{"Id":"663421682","IsPullRequest":true,"CreatedAt":"2020-07-22T21:36:51","Actor":"cristianosuzuki77","Number":"3624","RawContent":null,"Title":"LOC CHECKIN","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3624)","Url":"https://github.com/dotnet/winforms/pull/3624","RelatedDescription":"Closed or merged PR \"LOC CHECKIN\" (#3624)"},{"Id":"664048461","IsPullRequest":false,"CreatedAt":"2020-07-22T21:02:55","Actor":"RussKie","Number":"3630","RawContent":null,"Title":"`DeviceContextExtensions.CreateGraphics` results in `System.OutOfMemoryException`","State":"open","Body":"Observed in https://dev.azure.com/dnceng/public/_build/results?buildId=741547&view=results\r\n\r\n**Problem description:**\r\n\r\n```\r\n    System.Windows.Forms.Tests.RadioButtonTests.RadioButton_OnMouseUp_InvokeMouseDown_CallsMouseUp(flatStyle: Flat, eventArgs: HandledMouseEventArgs { Button = Left, Clicks = 1, Delta = 4, Handled = False, Location = {X=2,Y=3}, ... }, expectedIsHandleCreated: True) [FAIL]\r\n      System.OutOfMemoryException : Out of memory.\r\n      Stack Trace:\r\n           at System.Drawing.SafeNativeMethods.Gdip.CheckStatus(Int32 status)\r\n           at System.Drawing.Graphics.FromHdcInternal(IntPtr hdc)\r\n        /_/src/System.Windows.Forms.Primitives/src/System/Windows/Forms/DeviceContextExtensions.cs(110,0): at System.Windows.Forms.DeviceContextExtensions.CreateGraphics(HDC hdc)\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/Internal/GdiCache.ScreenGraphicsScope.cs(23,0): at System.Windows.Forms.GdiCache.ScreenGraphicsScope..ctor(ScreenDcScope& scope)\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/Internal/GdiCache.cs(45,0): at System.Windows.Forms.GdiCache.GetScreenDCGraphics()\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ButtonInternal/ButtonBaseAdapter.cs(1364,0): at System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.LayoutOptions.GetTextSize(Size proposedSize)\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ButtonInternal/ButtonBaseAdapter.cs(1217,0): at System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.LayoutOptions.LayoutTextAndImage(LayoutData layout)\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ButtonInternal/ButtonBaseAdapter.cs(990,0): at System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.LayoutOptions.Layout()\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/RadioButton.cs(342,0): at System.Windows.Forms.RadioButton.get_DownChangeRectangle()\r\n        /_/src/System.Windows.Forms/src/System/Windows/Forms/ButtonBase.cs(913,0): at System.Windows.Forms.ButtonBase.OnMouseDown(MouseEventArgs mevent)\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/RadioButtonTests.cs(1474,0): at System.Windows.Forms.Tests.RadioButtonTests.SubRadioButton.OnMouseDown(MouseEventArgs eventargs)\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/RadioButtonTests.cs(984,0): at System.Windows.Forms.Tests.RadioButtonTests.RadioButton_OnMouseUp_InvokeMouseDown_CallsMouseUp(FlatStyle flatStyle, MouseEventArgs eventArgs, Boolean expectedIsHandleCreated)\r\n```\r\n","Url":"https://github.com/dotnet/winforms/issues/3630","RelatedDescription":"Open issue \"`DeviceContextExtensions.CreateGraphics` results in `System.OutOfMemoryException`\" (#3630)"},{"Id":"663926483","IsPullRequest":true,"CreatedAt":"2020-07-22T17:48:31","Actor":"JeremyKuhne","Number":"3629","RawContent":null,"Title":"Set the color when drawing text in CheckedListBox.","State":"closed","Body":"Didn't actually set a color for the GDI case. Add an assert to FillRectangle to try and flush out this sort of mistake earlier.\r\n\r\nFixes #3628\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3629)","Url":"https://github.com/dotnet/winforms/pull/3629","RelatedDescription":"Closed or merged PR \"Set the color when drawing text in CheckedListBox.\" (#3629)"},{"Id":"663727882","IsPullRequest":false,"CreatedAt":"2020-07-22T17:48:31","Actor":"vladimir-krestov","Number":"3628","RawContent":null,"Title":"[Regression] CheckedListBox selected item has an incorrect color","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n* Regression from a6a308fa452770caafca55ee4d8ac54d1ee1015d\r\n* .NET Core Version: 5.0\r\n* Have you experienced this same bug with .NET Framework?: No\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n- If to select some CheckedListBox item it will have an incorrect background color.\r\n![image](https://user-images.githubusercontent.com/49272759/88175999-5207e600-cc2f-11ea-92de-6ec9e61e3c35.png)\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\n- CheckedListBox selected item has a color as before\r\n![image](https://user-images.githubusercontent.com/49272759/88176472-00139000-cc30-11ea-978f-bf3e2f8fe926.png)\r\n\r\n**Minimal repro:**\r\n- Create a .Net 5.0 app using the latest master branch dlls (Or just run WinformsControlsTest project - MultipleControls form)\r\n- Add a CheckedListBox with items to the form\r\n- Run the app and select some item\r\n","Url":"https://github.com/dotnet/winforms/issues/3628","RelatedDescription":"Closed issue \"[Regression] CheckedListBox selected item has an incorrect color\" (#3628)"},{"Id":"663508096","IsPullRequest":true,"CreatedAt":"2020-07-22T17:34:17","Actor":"JeremyKuhne","Number":"3627","RawContent":null,"Title":"Fix field naming on a number of types","State":"closed","Body":"Cleaning up for other perf changes in flight. These name changes were done with the rename tools. No functional changes.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3627)","Url":"https://github.com/dotnet/winforms/pull/3627","RelatedDescription":"Closed or merged PR \"Fix field naming on a number of types\" (#3627)"},{"Id":"663192950","IsPullRequest":true,"CreatedAt":"2020-07-22T16:39:31","Actor":"mmitche","Number":"3616","RawContent":null,"Title":"Enable internal build consumption","State":"closed","Body":"Also do a bit of cleanup on the YAML\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3616)","Url":"https://github.com/dotnet/winforms/pull/3616","RelatedDescription":"Closed or merged PR \"Enable internal build consumption\" (#3616)"},{"Id":"663507455","IsPullRequest":false,"CreatedAt":"2020-07-22T06:21:55","Actor":"Vino-Wang","Number":"3626","RawContent":null,"Title":"[Color Contrast] The Link is practically invisible when the full dataGridView row is highlighted/selected","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0.100-rc.1.20367.2\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n<!-- Yes / No -->\r\n\r\n**More info:**\r\nThis issue also can reproduce when targeting .NET Core 3.1\r\n\r\n**Problem description:**\r\nIn runtime, when the user selected the full dataGridView row is, the link/website is practically invisible.\r\n![Core](https://user-images.githubusercontent.com/18568603/88141562-6eebeb80-cc26-11ea-8757-e6b9f7509edc.png)\r\n![Core_Color](https://user-images.githubusercontent.com/18568603/88141575-74493600-cc26-11ea-8e35-3278bc4f6f9d.png)\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\nThe website should be easy to read even if the full row is selected.\r\n\r\n**Minimal repro:**\r\n1.\tCreate a winforms Core project.\r\n2.\tDrag and drop a DataGridView control with a DataGridViewLinkColumn added.\r\n3.\tAdd following code in Form.cs file:\r\n![Code](https://user-images.githubusercontent.com/18568603/88141517-57acfe00-cc26-11ea-91c3-27b8f6a36641.png)\r\nSystem.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle = new System.Windows.Forms.DataGridViewCellStyle();\r\ndataGridViewCellStyle.NullValue = \"www.microsoft.com\";\r\ndataGridView1.Columns[0].DefaultCellStyle = dataGridViewCellStyle;\r\n4.\tBuild and run it, then select the whole first row.\r\n5.\tLaunch the Accessibility insights tool to see the color contrast of the link.\r\n\r\nOr\r\n1.\tRun the attached project. [DataGridViewLinkColumn.zip](https://github.com/dotnet/winforms/files/4958207/DataGridViewLinkColumn.zip)\r\n2.\tObserve the link in the linkColumn.\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3626","RelatedDescription":"Open issue \"[Color Contrast] The Link is practically invisible when the full dataGridView row is highlighted/selected\" (#3626)"},{"Id":"663410120","IsPullRequest":false,"CreatedAt":"2020-07-22T01:39:44","Actor":"Vino-Wang","Number":"3623","RawContent":null,"Title":"The up button is truncated when set the DateTimePicker’s ShowUpDown property to True","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0.100-rc.1.20367.2\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nAfter set the ShowUpDown property of dateTimePicker to True, then observe the up/down buttons, you'll find the up button is truncated. \r\n![UpDownButton](https://user-images.githubusercontent.com/18568603/88124206-28cf6180-cbff-11ea-8a7d-3fc0001f35d8.png)\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\nIt shouldn’t be truncated.\r\n\r\n**Minimal repro:**\r\n1. Create a winforms core project.\r\n2. Drag and drop a dateTimePicker control.\r\n3. Set its ShowUpDown property to True.\r\n4. Build and run the project.\r\n5. Observer the Up/Down buttons.\r\n\r\nOr run the attached project: [ShowUpDown.zip](https://github.com/dotnet/winforms/files/4969905/ShowUpDown.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3623","RelatedDescription":"Open issue \"The up button is truncated when set the DateTimePicker’s ShowUpDown property to True\" (#3623)"},{"Id":"663399147","IsPullRequest":false,"CreatedAt":"2020-07-22T01:03:39","Actor":"merriemcgaw","Number":"3622","RawContent":null,"Title":"Clean up VB Template feedback","State":"open","Body":"We need to do a cleanup of our VB Template to address the open feedback in #3352 ","Url":"https://github.com/dotnet/winforms/issues/3622","RelatedDescription":"Open issue \"Clean up VB Template feedback\" (#3622)"},{"Id":"663345020","IsPullRequest":false,"CreatedAt":"2020-07-21T22:20:22","Actor":"jnm2","Number":"3619","RawContent":null,"Title":"SubType is determined slowly or not at all","State":"open","Body":"This is Visual Studio 16.6.5/.NET Core SDK 3.1.302, and it's been a problem for a few versions. It happens with both netcoreapp3.1 and net472 projects using Microsoft.NET.Sdk.WindowsDesktop. Both had been working for a long time with WindowsDesktop.\r\n\r\nOn one project, you have to wait several minutes for the designer to become available (that is, for form icons to show up in Solution Explorer). On another project, it can sit for hours and the designer never becomes available. We've had to use workarounds like adding SubType to the csproj manually or rename the file and the rename it back.\r\n\r\nIf a repro is helpful, I will get you one. This is happening even in tiny projects within a larger solution.\r\n\r\nIn the meantime, is there a workaround we can paste into Directory.Build.props to set SubType appropriately?\r\n\r\nWasn't sure if I should post here or https://github.com/dotnet/windowsdesktop. Related: https://github.com/dotnet/winforms/issues/3510","Url":"https://github.com/dotnet/winforms/issues/3619","RelatedDescription":"Open issue \"SubType is determined slowly or not at all\" (#3619)"},{"Id":"663265378","IsPullRequest":false,"CreatedAt":"2020-07-21T19:48:13","Actor":"vladimir-krestov","Number":"3618","RawContent":null,"Title":"[Accessibility] Label and GroupBox do not change the Localized control type accessible property when Accessible Role is changed","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n* Original [Bug: 1129920](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1129920)\r\n* .NET Core Version: 5.0\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n- ControlType property for Label and GroupBox doesn't depend on the Role property. \r\nThe Localized control type property stays unchanged if to change the Role property value.\r\n\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\n- Localized control type property should be changed when Accessible Role is changed.\r\n\r\n**Minimal repro:**\r\n- Create a .Net 5.0 app\r\n- Add a Label to the app form\r\n- Change its AccessibleRole value\r\n- Run the app and check LabelAccessibleObject Localized control type accessible property using Inspect\r\n","Url":"https://github.com/dotnet/winforms/issues/3618","RelatedDescription":"Open issue \"[Accessibility] Label and GroupBox do not change the Localized control type accessible property when Accessible Role is changed\" (#3618)"},{"Id":"663193945","IsPullRequest":false,"CreatedAt":"2020-07-21T17:43:04","Actor":"JeremyKuhne","Number":"3617","RawContent":null,"Title":"MAUI tests fail frequently and aren't easily diagnosable","State":"open","Body":"These are an attempt to shim in the old internal tests (note that MAUI here is an old internal test framework). The old tests worked quite differently and don't fit in well with the current test infrastructure. We're getting [frequent intermittent failures](https://dev.azure.com/dnceng/public/_build/results?buildId=737706&view=ms.vss-test-web.build-test-results-tab&runId=22844842&resultId=100000&paneView=history) like so:\r\n\r\n```\r\nSystem.Windows.Forms.Maui.IntegrationTests.WinformsMauiButtonTests.MauiButtonTest(scenarioName: \\\"Hotkey_Fires_OnClick\\\")\r\n\r\nAssert.Equal() Failure\\r\\n          ↓ (pos 0)\\r\\nExpected: Pass\\r\\nActual:   Fail\\r\\n          ↑ (pos 0)\r\n\r\nStack trace\r\n   at System.Windows.Forms.Maui.IntegrationTests.MauiTestHelper.ValidateScenarioPassed(String projectName, String scenarioName) in /_/src/System.Windows.Forms/tests/IntegrationTests/System.Windows.Forms.Maui.IntegrationTests/MauiTestHelper.cs:line 90\r\n   at System.Windows.Forms.Maui.IntegrationTests.WinformsMauiButtonTests.MauiButtonTest(String scenarioName) in /_/src/System.Windows.Forms/tests/IntegrationTests/System.Windows.Forms.Maui.IntegrationTests/WinformsMauiButtonTests.cs:line 35\r\n``` \r\n\r\n\r\n\r\nThis doesn't really help you much and it isn't obvious as to what you can do to move forward. In addition, the MAUI infrastructure sources aren't available so it is difficult to understand how the whole system works.\r\n\r\nMy recommendation (and current POR):\r\n\r\n1. Disable the MAUI tests for now\r\n2. Make them more xUnit-like and have any shim code in the repo\r\n3. If we can make the tests plug in as a \"normal\" xUnit test then re-enable them for the CI, otherwise leave them for manual runs\r\n\r\ncc: @AdamYoblick, @RussKie \r\n\r\nFailed with #3600","Url":"https://github.com/dotnet/winforms/issues/3617","RelatedDescription":"Open issue \"MAUI tests fail frequently and aren't easily diagnosable\" (#3617)"},{"Id":"662945128","IsPullRequest":true,"CreatedAt":"2020-07-21T12:44:05","Actor":"dotnet-maestro[bot]","Number":"3615","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200720.4\r\n- **Date Produced**: 7/20/2020 4:13 PM\r\n- **Commit**: 0e0e648770e54b12c2fa81a77538ce1a72fca8af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Diagnostics.PerformanceCounter**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.DirectoryServices**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Drawing.Common**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.IO.FileSystem.AccessControl**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.IO.Packaging**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.CodeDom**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **Microsoft.NETCore.App**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **Microsoft.NETCore.Targets**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **Microsoft.Win32.Registry.AccessControl**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **Microsoft.NETCore.App.Ref**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.IO.Pipes.AccessControl**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Windows.Extensions**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Resources.Extensions**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Security.AccessControl**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Security.Cryptography.Pkcs**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Security.Cryptography.ProtectedData**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Security.Permissions**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Security.Principal.Windows**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Text.Encodings.Web**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Text.Json**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n  - **System.Threading.AccessControl**: from 5.0.0-rc.1.20367.23 to 5.0.0-rc.1.20370.4\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3615)","Url":"https://github.com/dotnet/winforms/pull/3615","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3615)"},{"Id":"662648673","IsPullRequest":false,"CreatedAt":"2020-07-21T06:32:45","Actor":"John-Qiao","Number":"3614","RawContent":null,"Title":"DTS: USER32!SetScrollInfo is not called as expected when you drag the scrollbar over the window","State":"open","Body":"* .NET Core Version: \r\n\r\n   5.0.100-rc.1.20367.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n   Yes\r\n\r\n**More info:**\r\n\r\n1. This is **not** a regression issue in both .NET Framework and .NET Core.\r\n2. If add the below code in **hScrollBar1_Scroll** event handler, this issue will not be reproduced.   \r\n            `panel1.PerformLayout();`\r\n\r\n**Problem description:**\r\n\r\nThe label15 appears on the left side when the position of the scrollbar is left side as below.\r\n![Actual](https://user-images.githubusercontent.com/45864985/88019319-1cde9380-cb5c-11ea-8ecf-6400076c6ebd.png)\r\n\r\n**Expected behavior:**\r\n\r\nThe label10 should appears on the left side when the position of the scrollbar is left side as below.\r\n![Expected](https://user-images.githubusercontent.com/45864985/88019323-20721a80-cb5c-11ea-9614-221902840089.png)\r\n\r\n**Minimal repro:**\r\n\r\n1. Launch the attached project in VS and run it.\r\n2. Drag the scrollbar to the right edge, and continue move the mouse cursor from the right edge outside the form, still keep mouse button down. (The scrollbar will returns to left side automatically)\r\n3. Move mouse cursor back into the right edge of form, still keep mouse button down.\r\n4. Then move the mouse cursor from the right edge outside the form again, and release the mouse. \r\n[TestApp.zip](https://github.com/dotnet/winforms/files/4951672/TestApp.zip)\r\n![ReproSteps](https://user-images.githubusercontent.com/45864985/88020032-8a3ef400-cb5d-11ea-94b5-f45af611651a.gif)\r\n","Url":"https://github.com/dotnet/winforms/issues/3614","RelatedDescription":"Open issue \"DTS: USER32!SetScrollInfo is not called as expected when you drag the scrollbar over the window\" (#3614)"},{"Id":"662524202","IsPullRequest":false,"CreatedAt":"2020-07-21T03:18:15","Actor":"Jenna-Zheng","Number":"3613","RawContent":null,"Title":"[Accessibility]DateTimePicker control should support Tab stop for its drop-down button","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 5.0.100-rc.1.20367.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\nThere is no tab stop for DateTimePicker drop-down button, so user don't know how to expand this control's calendar pane, but actually we can use Alt+Down arrow or press F4 keyboard to expand.\r\n![image](https://user-images.githubusercontent.com/64949616/88007264-2e19a700-cb40-11ea-84d5-8645bb6fd052.png)\r\n![TestResult_keyboard](https://user-images.githubusercontent.com/64949616/88007986-c3696b00-cb41-11ea-9086-afd239de17ba.gif)\r\n\r\n**Expected behavior:**\r\nDateTimePicker control should have a tab stop for its drop-down button while navigating through Left\\Right arrow\r\n![image](https://user-images.githubusercontent.com/64949616/88006855-3ae9cb00-cb3f-11ea-9b45-ac7c1ee00d85.png)\r\n\r\n**Minimal repro:**\r\n1. Create a .Net Core WinForms App.\r\n2. Add a DateTimePicker control to the Form.\r\n3. Build and run the app.\r\n4. Navigate the DateTimePicker control by using Left\\Right arrow.\r\n5. Observe the keyboard focus. ","Url":"https://github.com/dotnet/winforms/issues/3613","RelatedDescription":"Open issue \"[Accessibility]DateTimePicker control should support Tab stop for its drop-down button\" (#3613)"},{"Id":"662419287","IsPullRequest":false,"CreatedAt":"2020-07-21T00:37:52","Actor":"GrabYourPitchforks","Number":"3612","RawContent":null,"Title":"Tracking issue: remove calls to obsoleted CAS and CER APIs","State":"open","Body":"In https://github.com/dotnet/winforms/pull/3611, a bunch of calls to CAS and CER APIs were surrounded by pragmas to suppress newly-introduced warnings in 5.0.\r\n\r\nThe CAS and CER infrastructure does not exist in .NET 5.0. Hence the obsoletions. :)\r\nSince WinForms targets 5.0 exclusively, these call sites should be removed rather than suppressed.","Url":"https://github.com/dotnet/winforms/issues/3612","RelatedDescription":"Open issue \"Tracking issue: remove calls to obsoleted CAS and CER APIs\" (#3612)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-07-25T05:30:49.9722652Z","RunDurationInMilliseconds":736}