{"Data":{"GitHub":{"Issues":[{"Id":"2862070171","IsPullRequest":true,"CreatedAt":"2025-02-19T02:36:13","Actor":"LeafShi1","Number":"12974","RawContent":null,"Title":"Public the unshipped APIs","State":"open","Body":"Public the unshipped APIs\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12974)","Url":"https://github.com/dotnet/winforms/pull/12974","RelatedDescription":"Open PR \"Public the unshipped APIs\" (#12974)"},{"Id":"2861962352","IsPullRequest":true,"CreatedAt":"2025-02-19T02:33:13","Actor":"JeremyKuhne","Number":"12972","RawContent":null,"Title":"Move bitmap copy code to HBITMAP","State":"closed","Body":"The same logic is used in WPF, factoring so it can be reused.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12972)","Url":"https://github.com/dotnet/winforms/pull/12972","RelatedDescription":"Closed or merged PR \"Move bitmap copy code to HBITMAP\" (#12972)"},{"Id":"2861977245","IsPullRequest":true,"CreatedAt":"2025-02-19T02:17:11","Actor":"Tanya-Solyanik","Number":"12973","RawContent":null,"Title":"removed extra whitespaces from the project file","State":"closed","Body":"\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12973)","Url":"https://github.com/dotnet/winforms/pull/12973","RelatedDescription":"Closed or merged PR \"removed extra whitespaces from the project file\" (#12973)"},{"Id":"2861756396","IsPullRequest":true,"CreatedAt":"2025-02-19T00:14:07","Actor":"JeremyKuhne","Number":"12969","RawContent":null,"Title":"Add a few more EMF tests","State":"closed","Body":"Move a few interop definitions down and add some more EMF tests to ensure we have #12951 fully covered.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12969)","Url":"https://github.com/dotnet/winforms/pull/12969","RelatedDescription":"Closed or merged PR \"Add a few more EMF tests\" (#12969)"},{"Id":"2861593255","IsPullRequest":true,"CreatedAt":"2025-02-18T23:17:03","Actor":"Tanya-Solyanik","Number":"12968","RawContent":null,"Title":"fix for the CI build","State":"closed","Body":"Will check in as 2 separate commits\r\n1 [Fixes](https://dnceng.visualstudio.com/internal/_build/results?buildId=2642760&view=logs&j=c2111129-d6a3-58de-e667-00e5a0966c99&t=dbb91d6b-a8a9-52a4-d165-489e1fa4c9b8) the localization step in the CI build\r\n2. exclude a test project from the shipping code ([reference](https://github.com/dotnet/arcade/blob/d4adfaba4969147b67d364f47500c73a5de16def/Documentation/ArcadeSdk.md?plain=1#L959))\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12968)","Url":"https://github.com/dotnet/winforms/pull/12968","RelatedDescription":"Closed or merged PR \"fix for the CI build\" (#12968)"},{"Id":"2861783950","IsPullRequest":true,"CreatedAt":"2025-02-18T22:41:17","Actor":"JeremyKuhne","Number":"12971","RawContent":null,"Title":"Set stream copy position to beginning","State":"open","Body":"This is a manual port of #12953. The code was refactored in .NET 9 so the fix needs manually applied.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12971)","Url":"https://github.com/dotnet/winforms/pull/12971","RelatedDescription":"Open PR \"Set stream copy position to beginning\" (#12971)"},{"Id":"2861773023","IsPullRequest":true,"CreatedAt":"2025-02-18T22:33:30","Actor":"JeremyKuhne","Number":"12970","RawContent":null,"Title":"Ensure `ComManagedStream` seekable wrapper stream has position of 0 (…","State":"open","Body":"…#12953)\r\n\r\nPORTS #12953 - DO NOT SQUASH\r\n\r\nUntil .NET 5, `ComManagedStream` (then `GPStream`) would wrap a non-seekable stream in a `MemoryStream` using the `MemoryStream(Byte[])` constructor. This results in a stream with a position of 0.\r\n\r\ndotnet/runtime commit 136527537e6 (Improve perfromance for loading from Stream on Windows (dotnet/corefx#31142), 2018-07-20) updated this logic to instead use `CopyTo` to populate the wrapping `MemoryStream`. This results in a stream with a non-zero position.\r\n\r\nIt seems that this non-zero position causes some issues in downstream code when using `Image.FromStream` to load `.emf` and `.wmf` files, resulting in `LoadGdipImageFromStream` returning a status of 2 and thus an exception.\r\n\r\nSeek the wrapping `MemoryStream` back to the beginning after copying the source stream into it to prevent this exception.\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12970)","Url":"https://github.com/dotnet/winforms/pull/12970","RelatedDescription":"Open PR \"Ensure `ComManagedStream` seekable wrapper stream has position of 0 (…\" (#12970)"},{"Id":"2852788789","IsPullRequest":false,"CreatedAt":"2025-02-18T22:12:06","Actor":"zivarah","Number":"12951","RawContent":null,"Title":"`Image.FromStream` where stream's `CanSeek` is false crashes with \"Parameter not valid\" for `.wmf`/`.emf` images","State":"closed","Body":"### .NET version\n\nReproduced on:\n- 5.0.100\n- 8.0.403\n- 9.0.200-preview.0.24575.35\n\nI suspect this was broken in 5.0 by 136527537e6 (Improve perfromance for loading from Stream on Windows (dotnet/corefx#31142), 2018-07-20)\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, confirmed that it worked in .NET Core 3.1\n\n### Issue description\n\nAttempting to load certain image types with `Image.FromStream` will throw an exception if the stream reports `CanSeek` as false. This seems to be a combination of `ComManagedStream` creating a `MemoryStream` with a non-zero position, and some downstream code not handling that well. This occurs with `.wmf` and `.emf`, though that may not be exhaustive.\n\nThis looks to have been caused by [136527537e6](https://github.com/dotnet/runtime/commit/136527537e68110c0891d911705c50cbbddd829e) (Improve perfromance for loading from Stream on Windows (dotnet/corefx#31142), 2018-07-20).\n\nPrior to that commit, the `GPStream` (since renamed to `ComManagedStream`) created a `MemoryStream` using the constructor accepting a `byte[]`:\n\n```C#\nif (!stream.CanSeek)\n{\n    // [...] Omitted for brevity                                                 \n    dataStream = new MemoryStream(bytes);\n}\n```\n\nThat commit updated it to instead use `CopyTo`:\n\n```C#\nif (makeSeekable && !stream.CanSeek)\n{\n    // Copy to a memory stream so we can seek\n    MemoryStream memoryStream = new MemoryStream();\n    stream.CopyTo(memoryStream);\n    _dataStream = memoryStream;\n}\n```\n\nFrom stepping through this new version of the code, it seems that `memoryStream.Position` ends up being non-zero as a result of using `CopyTo`, which seems to then cause some downstream code to fail:\n\n```\nUnhandled exception. System.ArgumentException: Parameter is not valid.\n   at Windows.Win32.Graphics.GdiPlus.StatusExtensions.ThrowIfFailed(Status status)\n   at System.Drawing.Image.LoadGdipImageFromStream(IStream* stream, Boolean useEmbeddedColorManagement)\n   at System.Drawing.Image.LoadGdipImageFromStream(Stream stream, Boolean useEmbeddedColorManagement)\n   at System.Drawing.Image.FromStream(Stream stream, Boolean useEmbeddedColorManagement, Boolean validateImageData)\n   at System.Drawing.Image.FromStream(Stream stream, Boolean useEmbeddedColorManagement)\n   at System.Drawing.Image.FromStream(Stream stream)\n   at Program.Main(String[] args) in ...\n```\n\nThis can be worked around by wrapping the stream in a `MemoryStream`, ensuring that `MemoryStream`'s position is set to `0`, and passing that to `Image.FromStream` instead of the original stream.\n\n### Steps to reproduce\n\nNote: I was not allowed to attach the small `example.wmf` file I used for testing as `.wmf` isn't a supported file type for this form, apparently. You'll need to find an example file and drop it into your CWD before running the below reproduction.\n\n```xml\n<!-- Repro.csproj -->\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"System.Drawing.Common\" Version=\"9.0.2\" />\n  </ItemGroup>\n\n</Project>\n```\n\n```C#\n// Program.cs\n\nusing System;\nusing System.IO;\n\ninternal class CustomStream : MemoryStream\n{\n    private readonly bool _canSeek;\n\n    public override bool CanSeek => _canSeek;\n\n    public CustomStream(byte[] buffer, bool canSeek) : base(buffer) {\n        _canSeek = canSeek;\n    }\n}\n\ninternal class Program\n{\n    private static void Main(string[] args)\n    {\n        using FileStream fs = new FileStream(\"example.wmf\", FileMode.Open);\n        byte[] buffer = new byte[fs.Length];\n        fs.Read(buffer, 0, buffer.Length);\n\n        // canSeek: false => crash\n        // canSeek: true => works\n        using MemoryStream ms = new CustomStream(buffer, canSeek: false);\n        using System.Drawing.Image image = System.Drawing.Image.FromStream(ms);\n        Console.WriteLine(image.Size);\n    }\n}\n```","Url":"https://github.com/dotnet/winforms/issues/12951","RelatedDescription":"Closed issue \"`Image.FromStream` where stream's `CanSeek` is false crashes with \"Parameter not valid\" for `.wmf`/`.emf` images\" (#12951)"},{"Id":"2852906622","IsPullRequest":true,"CreatedAt":"2025-02-18T22:12:05","Actor":"zivarah","Number":"12953","RawContent":null,"Title":"Ensure `ComManagedStream` seekable wrapper stream has position of 0","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12951\r\n\r\n## Proposed changes\r\n\r\n- `ComManagedStream` will ensure that the stream wrapping a non-seekable source stream has a position of 0 at the end of its constructor.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- `Image.FromStream` with a non-seekable stream should no longer throw an exception when loading `.emf` and `.wmf` images.\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Risk seems relatively low, in particular because this constructor created a stream with a position of 0 in .NET Framework and .NET Core 3.1. It seems unlikely that consumers are relying on a non-zero position.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Added unit tests ensuring that the stream returned by `ComManagedStream.GetDataStream()` has the expected state. \r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12953)","Url":"https://github.com/dotnet/winforms/pull/12953","RelatedDescription":"Closed or merged PR \"Ensure `ComManagedStream` seekable wrapper stream has position of 0\" (#12953)"},{"Id":"2858001209","IsPullRequest":true,"CreatedAt":"2025-02-18T19:58:54","Actor":"ViktorHofer","Number":"12964","RawContent":null,"Title":"React to NuGet package pruning warnings (2)","State":"closed","Body":"Replaces https://github.com/dotnet/winforms/pull/12960\r\nUnsure why those weren't flagged in 9249b89d72852616b25660141f9d1a155c1aebd9 but this is the right thing to do.\r\n\r\nSet PackageId for the facade project to avoid project prune warnings.","Url":"https://github.com/dotnet/winforms/pull/12964","RelatedDescription":"Closed or merged PR \"React to NuGet package pruning warnings (2)\" (#12964)"},{"Id":"2859567228","IsPullRequest":true,"CreatedAt":"2025-02-18T07:23:23","Actor":"Olina-Zhang","Number":"12967","RawContent":null,"Title":"Add unit tests for ToolStripDesignerUtils.cs file","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/10773\r\n\r\n## Proposed changes\r\n\r\n- Add unit test file: ToolStripDesignerUtilsTests.cs for public methods of the ToolStripDesignerUtils.cs.\r\n- Enable nullability in ToolStripDesignerUtilsTests.cs.\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12967)","Url":"https://github.com/dotnet/winforms/pull/12967","RelatedDescription":"Open PR \"Add unit tests for ToolStripDesignerUtils.cs file\" (#12967)"},{"Id":"2859104695","IsPullRequest":false,"CreatedAt":"2025-02-18T01:39:20","Actor":"LeafShi1","Number":"12966","RawContent":null,"Title":"Port ControlBindingsConverter","State":"open","Body":"Contributes to https://github.com/dotnet/winforms/issues/1115","Url":"https://github.com/dotnet/winforms/issues/12966","RelatedDescription":"Open issue \"Port ControlBindingsConverter\" (#12966)"},{"Id":"2859062849","IsPullRequest":true,"CreatedAt":"2025-02-18T01:05:28","Actor":"ricardobossan","Number":"12965","RawContent":null,"Title":"Port ControlBindingsConverter from InProc to Runtime","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nRelated #12966\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12965)","Url":"https://github.com/dotnet/winforms/pull/12965","RelatedDescription":"Open PR \"Port ControlBindingsConverter from InProc to Runtime\" (#12965)"},{"Id":"2855354504","IsPullRequest":true,"CreatedAt":"2025-02-17T14:24:01","Actor":"akoeplinger","Number":"12960","RawContent":null,"Title":"Fix more nuget package pruning warnings in tests","State":"closed","Body":"These showed up in the VMR.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12960)","Url":"https://github.com/dotnet/winforms/pull/12960","RelatedDescription":"Closed or merged PR \"Fix more nuget package pruning warnings in tests\" (#12960)"},{"Id":"2856918608","IsPullRequest":true,"CreatedAt":"2025-02-17T06:41:47","Actor":"Zheng-Li01","Number":"12963","RawContent":null,"Title":"Add code coverage for ToolStripCustomTypeDescriptor","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/10773\r\n\r\n## Proposed changes\r\nAdd unit test file: ToolStripCustomTypeDescriptorTests.cs for public methods of the ToolStripCustomTypeDescriptor.cs.\r\nEnable nullability in ToolStripCustomTypeDescriptorTests.cs.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12963)","Url":"https://github.com/dotnet/winforms/pull/12963","RelatedDescription":"Open PR \"Add code coverage for ToolStripCustomTypeDescriptor\" (#12963)"},{"Id":"2856881787","IsPullRequest":true,"CreatedAt":"2025-02-17T06:18:48","Actor":"Olina-Zhang","Number":"12962","RawContent":null,"Title":"Add code coverage for ToolStripCollectionEditor.cs file","State":"open","Body":"Related https://github.com/dotnet/winforms/issues/10773\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add unit test file: ToolStripCollectionEditorTests.cs for public methods of the ToolStripCollectionEditor.cs.\r\n- Enable nullability in ToolStripCollectionEditorTests.cs.\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12962)","Url":"https://github.com/dotnet/winforms/pull/12962","RelatedDescription":"Open PR \"Add code coverage for ToolStripCollectionEditor.cs file\" (#12962)"},{"Id":"2855919560","IsPullRequest":true,"CreatedAt":"2025-02-16T06:43:41","Actor":"gpetrou","Number":"12961","RawContent":null,"Title":"Enable nullability in ContainerSelectorBehavior","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in ContainerSelectorBehavior.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12961)","Url":"https://github.com/dotnet/winforms/pull/12961","RelatedDescription":"Open PR \"Enable nullability in ContainerSelectorBehavior\" (#12961)"},{"Id":"2855279236","IsPullRequest":true,"CreatedAt":"2025-02-15T06:34:03","Actor":"toehead2001","Number":"12959","RawContent":null,"Title":"Prevent Toolbar tooltips from appearing directly under cursor hotspot","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12958\r\n\r\n\r\n## Proposed changes\r\n\r\n- This positions the `ToolTip` so that it is offset by 1px from the cursor's HotSpot X value.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- This prevents `ToolStrip` tooltips from appearing directly under cursor HotSpot. Thus, the user is able to click the `ToolStripItem`.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually tested.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12959)","Url":"https://github.com/dotnet/winforms/pull/12959","RelatedDescription":"Open PR \"Prevent Toolbar tooltips from appearing directly under cursor hotspot\" (#12959)"},{"Id":"2855270329","IsPullRequest":false,"CreatedAt":"2025-02-15T06:13:16","Actor":"toehead2001","Number":"12958","RawContent":null,"Title":"ToolStrip tooltips can appear directly under cursor hotspot","State":"open","Body":"### .NET version\n\n9.0\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nWhen a `ToolStrip` is next to the Windows Taskbar, a `ToolStripItem`'s ToolTip can appear directly under cursor HotSpot. This prevents the item from being clicked.\n\nThis is an issue that has come up quite a few times over the years in the Paint.NET community.\n\n![Image](https://github.com/user-attachments/assets/7de4679d-a027-4d8c-a7d8-fbaeb870186d)\n\nhttps://github.com/user-attachments/assets/0205147d-2041-4a8b-8896-5bd7a4e6dd73\n\ncc: @rickbrew\n\n### Steps to reproduce\n\n1. Move a Form so that a ToolStrip is just above the Windows Taskbar.\n2. Hover the mouse over a ToolStripItem until its ToolTip appears.\n3. Try to click the ToolStripItem.","Url":"https://github.com/dotnet/winforms/issues/12958","RelatedDescription":"Open issue \"ToolStrip tooltips can appear directly under cursor hotspot\" (#12958)"},{"Id":"2855186457","IsPullRequest":true,"CreatedAt":"2025-02-15T05:44:37","Actor":"dotnet-maestro[bot]","Number":"12957","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\n## From https://github.com/dotnet/runtime\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\n- **Build**: 20250214.1\n- **Date Produced**: February 14, 2025 10:55:20 AM UTC\n- **Commit**: 42423ef91c9f23381d99dee708fa55336318debc\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.CodeDom**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.ComponentModel.Composition**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Data.Odbc**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Data.OleDb**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Diagnostics.EventLog**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.DirectoryServices**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Formats.Nrbf**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.IO.Hashing**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.IO.Packaging**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.IO.Ports**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Management**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Reflection.Context**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Resources.Extensions**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Runtime.Caching**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Security.Permissions**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.ServiceModel.Syndication**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Speech**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Text.Encodings.Web**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Text.Json**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Threading.AccessControl**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **System.Windows.Extensions**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-preview.2.25113.8 to 10.0.0-preview.2.25114.1][1]\n\n[1]: https://github.com/dotnet/runtime/compare/77ccd7b81e...42423ef91c\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12957)","Url":"https://github.com/dotnet/winforms/pull/12957","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#12957)"},{"Id":"2854506810","IsPullRequest":true,"CreatedAt":"2025-02-15T02:09:22","Actor":"JeremyKuhne","Number":"12956","RawContent":null,"Title":"Avoid ECMA spec violation in PropertyStore","State":"closed","Body":"The manual unboxing we were doing was not an ECMA approved use of the instruction. As such it could potentially fail in the future should the runtime decide to break the way we were using it.\r\n\r\nOne way to fix this would be to set each of the fields individually on the unboxed ref as the current two types we're optimizing are mutable. I've instead used `StrongBox<T>`. While significantly more complicated, it will not run afoul of the ECMA spec should we get an immutable type we want to handle.\r\n\r\nIf performance here ever ends up being a problem we could go the other way.\r\n\r\nFixes #12933\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12956)","Url":"https://github.com/dotnet/winforms/pull/12956","RelatedDescription":"Closed or merged PR \"Avoid ECMA spec violation in PropertyStore\" (#12956)"},{"Id":"2852743049","IsPullRequest":true,"CreatedAt":"2025-02-15T02:08:28","Actor":"JeremyKuhne","Number":"12950","RawContent":null,"Title":"Refine type binding for deserialization","State":"closed","Body":"This change refines deserialization binding behavior for the BinaryFormatUtilites class.\r\n\r\n- Untyped requests must be requesting the object type (as the outer APIs all do)\r\n- Removes delegate in TypeBinder\r\n- TypeBinder returns typeof(object) for untyped requests\r\n- TypeBinder does not fall back to implicit INrbfSerializer binding when missing a resolver\r\n- Move JsonSerializer serialization to static interface\r\n- Reorder TryGetObjectFromJson to fail out appropriately when binding the root type\r\n- Reset the stream position in TryReadObjectFromStream\r\n- Create the binder up front in TryReadObjectFromStream to normalize usage\r\n- Don't allow implicit nullable conversion without an explicit binder\r\n- Write a number of new tests\r\n\r\nPlan is to continue to write tests with further test cleanup\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12950)","Url":"https://github.com/dotnet/winforms/pull/12950","RelatedDescription":"Closed or merged PR \"Refine type binding for deserialization\" (#12950)"},{"Id":"2852479221","IsPullRequest":true,"CreatedAt":"2025-02-14T18:42:25","Actor":"Tanya-Solyanik","Number":"12945","RawContent":null,"Title":"add facade assemblies to scratch projects","State":"closed","Body":"To test type editors in the runtime scenarios for HDPI testing\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12945)","Url":"https://github.com/dotnet/winforms/pull/12945","RelatedDescription":"Closed or merged PR \"add facade assemblies to scratch projects\" (#12945)"},{"Id":"2852547808","IsPullRequest":true,"CreatedAt":"2025-02-14T18:07:17","Actor":"Tanya-Solyanik","Number":"12946","RawContent":null,"Title":"Chart control requires the SQLClient at runtime","State":"closed","Body":"Chart control in the winforms interactive test requires the SQL Client dependency at runtime. We are getting 4.9.0 version, which is the latest by default.\r\n\r\nFixes https://github.com/dotnet/winforms/issues/12940\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12946)","Url":"https://github.com/dotnet/winforms/pull/12946","RelatedDescription":"Closed or merged PR \"Chart control requires the SQLClient at runtime\" (#12946)"},{"Id":"2853494390","IsPullRequest":true,"CreatedAt":"2025-02-14T18:01:25","Actor":"ViktorHofer","Number":"12955","RawContent":null,"Title":"React to NuGet package pruning warnings","State":"closed","Body":"Contributes to https://github.com/dotnet/sdk/pull/46829\r\n\r\nNuGet added a new feature that automatically prunes package and project references that are provided by the shared framework that is targeted.\r\n\r\nResolve the warnings that got emitted when building the repository in non-source-only mode.\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12955)","Url":"https://github.com/dotnet/winforms/pull/12955","RelatedDescription":"Closed or merged PR \"React to NuGet package pruning warnings\" (#12955)"},{"Id":"2852683788","IsPullRequest":true,"CreatedAt":"2025-02-14T16:42:21","Actor":"dotnet-maestro[bot]","Number":"12948","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\n## From https://github.com/dotnet/runtime\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\n- **Build**: 20250213.8\n- **Date Produced**: February 14, 2025 1:59:47 AM UTC\n- **Commit**: 77ccd7b81e81627c8cb1ab124adc3c98f6ee388b\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **Microsoft.NET.Sdk.IL**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **Microsoft.NETCore.ILDAsm**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.CodeDom**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.ComponentModel.Composition**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Data.Odbc**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Data.OleDb**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Diagnostics.EventLog**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.DirectoryServices**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Formats.Nrbf**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.IO.Hashing**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.IO.Packaging**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.IO.Ports**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Management**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Reflection.Context**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Resources.Extensions**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Runtime.Caching**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Security.Permissions**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.ServiceModel.Syndication**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Speech**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Text.Encodings.Web**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Text.Json**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Threading.AccessControl**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **System.Windows.Extensions**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-preview.2.25112.7 to 10.0.0-preview.2.25113.8][1]\n\n[1]: https://github.com/dotnet/runtime/compare/751acdef8e...77ccd7b81e\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12948)","Url":"https://github.com/dotnet/winforms/pull/12948","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#12948)"},{"Id":"2853282278","IsPullRequest":false,"CreatedAt":"2025-02-14T10:26:36","Actor":"LeafShi1","Number":"12954","RawContent":null,"Title":"Port DataGridViewColumnCollectionEditor","State":"open","Body":"Contributes to https://github.com/dotnet/winforms/issues/1115","Url":"https://github.com/dotnet/winforms/issues/12954","RelatedDescription":"Open issue \"Port DataGridViewColumnCollectionEditor\" (#12954)"},{"Id":"2852888969","IsPullRequest":true,"CreatedAt":"2025-02-14T07:28:08","Actor":"Zheng-Li01","Number":"12952","RawContent":null,"Title":"Add code coverage for ListBoxSelectedObjectCollection","State":"open","Body":"related https://github.com/dotnet/winforms/issues/10453\r\n\r\n## Proposed changes\r\nAdd unit tests for ListBox.SelectedObjectCollection.cs to test its methods\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12952)","Url":"https://github.com/dotnet/winforms/pull/12952","RelatedDescription":"Open PR \"Add code coverage for ListBoxSelectedObjectCollection\" (#12952)"},{"Id":"2852683857","IsPullRequest":true,"CreatedAt":"2025-02-14T05:54:58","Actor":"dotnet-maestro[bot]","Number":"12949","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\n## From https://github.com/dotnet/arcade\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\n- **Build**: 20250213.2\n- **Date Produced**: February 13, 2025 5:32:04 PM UTC\n- **Commit**: ea0a0a28cccd4b63a9ec40df53ef2df260ffa5b1\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.25112.2 to 10.0.0-beta.25113.2][1]\n  - **Microsoft.DotNet.CMake.Sdk**: [from 10.0.0-beta.25112.2 to 10.0.0-beta.25113.2][1]\n  - **Microsoft.DotNet.GenFacades**: [from 10.0.0-beta.25112.2 to 10.0.0-beta.25113.2][1]\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.25112.2 to 10.0.0-beta.25113.2][1]\n  - **Microsoft.DotNet.RemoteExecutor**: [from 10.0.0-beta.25112.2 to 10.0.0-beta.25113.2][1]\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.25112.2 to 10.0.0-beta.25113.2][1]\n\n[1]: https://github.com/dotnet/arcade/compare/c7b4cf2b26...ea0a0a28cc\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12949)","Url":"https://github.com/dotnet/winforms/pull/12949","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#12949)"},{"Id":"2852567617","IsPullRequest":true,"CreatedAt":"2025-02-14T03:15:23","Actor":"LeafShi1","Number":"12947","RawContent":null,"Title":"Scale errorProvider Icon to DeviceDPI","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #12939\r\n\r\n## Proposed changes\r\n\r\n- Scale errorProvider Icon to DeviceDPI\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- The icon of errorProvider can be scaled well on HDPI screen\r\n\r\n## Regression? \r\n\r\n- Yes \r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\nThe icon of errorProvider is not scaled well on HDPI screen with SystemAware and PerMoniterV2 modes\r\n\r\n![BeforeChange](https://github.com/user-attachments/assets/bf20fcc8-bc09-44f3-b9c4-9fb1beb4751c)\r\n\r\n### After\r\nThe icon of errorProvider can be scaled well on HDPI screen\r\n\r\n![AfterChange](https://github.com/user-attachments/assets/c757eb70-9bee-4114-a2a5-55dc7a34fb2b)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .net 10.0.0-preview.2.25111.15\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/12947)","Url":"https://github.com/dotnet/winforms/pull/12947","RelatedDescription":"Open PR \"Scale errorProvider Icon to DeviceDPI\" (#12947)"}],"ResultType":"GitHubIssue"}},"RunOn":"2025-02-19T03:30:28.798819Z","RunDurationInMilliseconds":416}