{"Data":{"GitHub":{"Issues":[{"Id":"1888493288","IsPullRequest":false,"CreatedAt":"2023-09-08T23:51:33","Actor":"BoltBait","Number":"9874","RawContent":null,"Title":"Failed to load assembly: System.Private.CoreLib.dll","State":"open","Body":"## Environment\r\n\r\nI just bought a new laptop with Windows 11 Home and did a fresh install of VS 2022 Community.  Here's the info from the about box:\r\n\r\nMicrosoft Visual Studio Community 2022\r\nVersion 17.7.3\r\nVisualStudio.17.Release/17.7.3+34024.191\r\nMicrosoft .NET Framework\r\nVersion 4.8.09032\r\n\r\nInstalled Version: Community\r\n\r\nVisual C++ 2022   00482-90000-00000-AA783\r\nMicrosoft Visual C++ 2022\r\n\r\nADL Tools Service Provider   1.0\r\nThis package contains services used by Data Lake tools\r\n\r\nASA Service Provider   1.0\r\n\r\nASP.NET and Web Tools   17.7.273.65229\r\nASP.NET and Web Tools\r\n\r\nAzure App Service Tools v3.0.0   17.7.273.65229\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Tools for Visual Studio   2.6.5000.0\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Functions and Web Jobs Tools   17.7.273.65229\r\nAzure Functions and Web Jobs Tools\r\n\r\nAzure Stream Analytics Tools for Visual Studio   2.6.5000.0\r\nMicrosoft Azure Stream Analytics Tools for Visual Studio\r\n\r\nC# Tools   4.7.0-3.23416.8+43b0b05cc4f492fd5de00f6f6717409091df8daa\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nMicrosoft Azure Hive Query Language Service   2.6.5000.0\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.6.5000.0\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Tools for Visual Studio   2.9\r\nSupport for Azure Cloud Services projects\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nNuGet Package Manager   6.7.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/\r\n\r\nRazor (ASP.NET Core)   17.7.3.2333001+0ab18affdf2a37647768d0e25f5f021bee6257a1\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nSQL Server Data Tools   17.7.10.1\r\nMicrosoft SQL Server Data Tools\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   17.0.20628.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   4.7.0-3.23416.8+43b0b05cc4f492fd5de00f6f6717409091df8daa\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools   17.7.0-beta.23314.10+e612cf93b989503c89e3a5830090062b7ab5e143\r\nMicrosoft Visual F# Tools\r\n\r\nVisual Studio IntelliCode   2.2\r\nAI-assisted development for Visual Studio.\r\n\r\n## .NET version\r\n\r\nHere are the first few lines of my solution file:\r\n\r\n```\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\nVisual Studio Version 17\r\nVisualStudioVersion = 17.4.33103.184\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\n\r\n```\r\nand the first few lines of the project file:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net7.0-windows</TargetFramework>\r\n    <RootNamespace>PaintDotNet.Effects</RootNamespace>\r\n    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>\r\n    <UseWindowsForms>true</UseWindowsForms>\r\n    <UseWPF>true</UseWPF>\r\n    <ImportWindowsDesktopTargets>true</ImportWindowsDesktopTargets>\r\n    <Configurations>Debug;Release;FastDebug</Configurations>\r\n    <Deterministic>false</Deterministic>\r\n    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n  </PropertyGroup>\r\n\r\n```\r\n\r\n## Did this work in a previous version of Visual Studio and/or previous .NET release?\r\n\r\nI am able to build my project and the build works fine.\r\n\r\n\r\n\r\n## Issue description\r\n\r\nI'm just not able to edit any Windows forms using the Designer.  It simply won't open. \r\n\r\n![image](https://github.com/dotnet/winforms/assets/14893317/7f8e2dfe-b201-465c-a61c-6d82f0d071b4)\r\n\r\n\r\nThe specific error message I'm getting is listed in the Diagnostics section below.\r\n\r\nI've tried lots of stuff from the web, like whitelisting the vs directory, cleaning the solution, refreshing my nuget packages, and running vs without a project loading it later. Google is failing me at this point.  Please help!\r\n\r\n## Steps to reproduce\r\n\r\n1. Open project\r\n2. Double click on any form to open it\r\n\r\nMy project's forms run from complicated to very simple.  None will open.\r\n\r\nThe code is actually available at GitHub here: https://github.com/BoltBait/CodeLab\r\nIt is a plugin for Paint.NET which is available here: https://www.dotpdn.com/downloads/pdn.html\r\n\r\n## Diagnostics\r\n\r\n```text\r\n[16:27:49.012726] fail: [CodeLab]: Failed to load assembly: \\\\?\\C:\\Users\\BoltBait\\AppData\\Local\\Microsoft\\VisualStudio\\17.0_f1477706\\WinFormsDesigner\\qyeil1bu.gma\\UserAppData\\System.Private.CoreLib.dll\r\n                        System.IO.FileLoadException: Could not load file or assembly 'System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'.\r\n                           at System.Runtime.Loader.AssemblyLoadContext.<LoadFromPath>g____PInvoke|5_0(IntPtr ptrNativeAssemblyBinder, UInt16* ilPath, UInt16* niPath, ObjectHandleOnStack retAssembly)\r\n                           at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\r\n                           at Microsoft.DotNet.DesignTools.Services.TypeResolutionService.LoadFromAssemblyPath(String filePath)\r\n```\r\nThe file does exist in the specified directory.  Nothing special about it--not marked readonly or anything.  Here are the file's properties:\r\n![image](https://github.com/dotnet/winforms/assets/14893317/b763468a-fc8d-4be9-a55c-cb96a81c6fa3)\r\n\r\nEDIT: I just tried loading my project on my old laptop and get the same error.  Super bummed now.\r\n","Url":"https://github.com/dotnet/winforms/issues/9874","RelatedDescription":"Open issue \"Failed to load assembly: System.Private.CoreLib.dll\" (#9874)"},{"Id":"1885407384","IsPullRequest":false,"CreatedAt":"2023-09-08T17:55:09","Actor":"Ashley-Li","Number":"9859","RawContent":null,"Title":"An System.AccessViolationException appears when changing InitialDirectory property of OpenFileDialog control","State":"closed","Body":"### .NET version\r\n\r\n.NET SDK 8.0.100-rc.2.23456.6\r\n\r\n### Did it work in .NET Framework?\r\n\r\nNot tested/verified\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nYes, it cannot repro in .Net 7.0 SDK/.NET 6.0 SDK build.\r\n\r\n### Issue description\r\n\r\nAfter setting PropertyGrid's selectedObject to OpenFileDialog control and run the app, enter an absolute path to the D-disk for the InitialDirectory peoperty of the OpenFileDialog control,  an System.AccessViolationException pops up.\r\n\r\nThe issue also repro in FolderBrowserDialog/SaveFileDialog controls.\r\n\r\n**.Net 8.0 result:**\r\n[Exception Details.txt](https://github.com/dotnet/winforms/files/12546662/Exception.Details.txt)\r\n![image](https://github.com/dotnet/winforms/assets/56664234/686e9b60-6177-4134-b702-128f45af7cc5)\r\n\r\n![repro_video](https://github.com/dotnet/winforms/assets/56664234/bce234e1-85d2-4730-a1dc-84c1c027e92f)\r\n\r\n\r\n\r\n**.Net 7.0/.Net 6.0 result:**\r\nThere is no error dialog pop up and the InitialDirectory property of the OpenFileDialog control can be changed successfully.\r\n![image](https://github.com/dotnet/winforms/assets/56664234/31ce613e-b646-4da6-99b6-67a0ab494e97)\r\n\r\n![Expected_video](https://github.com/dotnet/winforms/assets/56664234/de8aca08-95ff-454d-9453-515c50c006e6)\r\n\r\n### Steps to reproduce\r\n\r\nUse following sample application:\r\n[WinFormsApp16.zip](https://github.com/dotnet/winforms/files/12546745/WinFormsApp16.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/9859","RelatedDescription":"Closed issue \"An System.AccessViolationException appears when changing InitialDirectory property of OpenFileDialog control\" (#9859)"},{"Id":"1888074981","IsPullRequest":true,"CreatedAt":"2023-09-08T17:55:07","Actor":"JeremyKuhne","Number":"9873","RawContent":null,"Title":"Fix folder browser code (#9866)","State":"closed","Body":"## Port of #9866\r\n\r\nThe old style folder browser was broken a few different ways:\r\n\r\n- FolderBrowserDialog would not return the result\r\n- FolderNameEditor would AV\r\n- All were leaking shell handles\r\n\r\nThis adds a centralized helper to avoid these problems. This also:\r\n\r\n- Moves the exception string to primitives\r\n- Uses CSIDL defines and clarifies usage\r\n- Unblocks other CSIDL values\r\n- Uses the updated API to get the path from the PIDL\r\n\r\nWe can't use the shared dialog in FolderNameEditor as we expose dialog styles there that are not exposed in FolderBrowserDialog.\r\n\r\nFixes #9859\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9873)","Url":"https://github.com/dotnet/winforms/pull/9873","RelatedDescription":"Closed or merged PR \"Fix folder browser code (#9866)\" (#9873)"},{"Id":"1886368310","IsPullRequest":true,"CreatedAt":"2023-09-08T17:44:06","Actor":"lonitra","Number":"9861","RawContent":null,"Title":"Fix application hang on exit","State":"closed","Body":"Fixes #9721\r\n\r\n`PInvoke.GetExitCodeThread()` is incorrectly wrapped. It doesn't define `SetLastError = true`, which causes `Marshal.GetLastWin32Error()` to not return the invalid handle error code that would terminate [this loop ](https://github.com/dotnet/winforms/blob/main/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs#L3840) we eventually get into, ultimately causing WinForms app to hang on exit.\r\n\r\nThis is not an issue in .NET 8 as we are leveraging Cswin32, which defines PInvokes correctly.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9861)","Url":"https://github.com/dotnet/winforms/pull/9861","RelatedDescription":"Closed or merged PR \"Fix application hang on exit\" (#9861)"},{"Id":"1885759729","IsPullRequest":false,"CreatedAt":"2023-09-08T17:37:13","Actor":"pascallauer","Number":"9860","RawContent":null,"Title":"Designer crashes System.InvalidOperationException: DPI mode value - DpiUnaware","State":"closed","Body":"### Environment\n\nMicrosoft Visual Studio Professional 2022 (64-Bit) - Preview\r\nVersion 17.8.0 Preview 1.0\n\n### .NET version\n\nnet7.0-windows7.0\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\n_No response_\n\n### Issue description\n\nI am using VS2022 for developing a Windows Forms app. Since i have a 4k screen i have a scaling of 150%. To keep my apps working on different DPI Scalings i have to restart visual studio everytime or set a registry key to disable the automatic DPI adjustment.\r\n\r\nTo do this, i use a registry setting: \r\n\r\n[Computer\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Layers]\r\n\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Preview\\\\Common7\\\\IDE\\\\devenv.exe\"=\"DPIUNAWARE\" \r\n\r\n\n\n### Steps to reproduce\n\nThe Issue was already well descriped in the following issue:\r\nhttps://github.com/dotnet/winforms/issues/7609\r\n\r\nIf i remove the registry key and start vs with the /noscale parameter everything seems to work fine. \r\nBut that's not working for the \"recent projects\" in the taskbar.\n\n### Diagnostics\n\n```text\n[13:54:05.373798] warn: DPI mode SystemAware specified for the project is different from the DPI mode specified for the designer. Winforms designer will have DPI mode DpiUnaware \r\n[13:54:08.069092] fail: [Cosmolink.Scripting.Lauchner]: Failed to launch design tools server process process\r\n                        System.InvalidOperationException: Prozess-DPI-Moduswert konnte nicht auf eingestellt werden:DpiUnaware.\r\n                           at Microsoft.WinForms.Utilities.Desktop.DpiHelper.SetDesignerProcessDpiAwareness(DpiAwarenessContext dpiContext)\r\n                           at Microsoft.DotNet.DesignTools.Server.Program.<>c__DisplayClass2_0.<<Main>b__1>d.MoveNext()\r\n\r\n                        Informationen zur Problembehandlung für den Designer finden Sie im Leitfaden unter https://aka.ms/winforms/designer/troubleshooting.\r\n[13:56:07.733097] fail: [Cosmolink.Scripting.Lauchner]: Timed out while connecting to named pipe: DesignToolsServer.e550f24b-2700-43d0-b492-f84c283e2342\r\n\r\n                        Informationen zur Problembehandlung für den Designer finden Sie im Leitfaden unter https://aka.ms/winforms/designer/troubleshooting.\r\n[13:56:07.738130] fail: Microsoft.DotNet.DesignTools.Client.ServerException: Timeout beim Herstellen einer Verbindung mit Named Pipe.\r\n                           bei Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.<ConnectToStreamAsync>d__36.MoveNext()\r\n                        --- Ende der Stapelüberwachung vom vorhergehenden Ort, an dem die Ausnahme ausgelöst wurde ---\r\n                           bei System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n                           bei System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n                           bei Microsoft.DotNet.DesignTools.Client.Host.ServerProcess.<LaunchAsync>d__28.MoveNext()\r\n                        --- Ende der Stapelüberwachung vom vorhergehenden Ort, an dem die Ausnahme ausgelöst wurde ---\r\n                           bei System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n                           bei System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n                           bei Microsoft.DotNet.DesignTools.Client.Host.ServerHostFactory.<CreateHostAsync>d__8.MoveNext()\r\n                        --- Ende der Stapelüberwachung vom vorhergehenden Ort, an dem die Ausnahme ausgelöst wurde ---\r\n                           bei System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n                           bei System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n                           bei Microsoft.DotNet.DesignTools.Client.DesignToolsClientLoader.<CreateClientAsync>d__29.MoveNext()\r\n\r\n                        Informationen zur Problembehandlung für den Designer finden Sie im Leitfaden unter https://aka.ms/winforms/designer/troubleshooting.\r\n[13:56:08.023776] warn: Cannot update selection in server process as Session is not connected.\n```\n","Url":"https://github.com/dotnet/winforms/issues/9860","RelatedDescription":"Closed issue \"Designer crashes System.InvalidOperationException: DPI mode value - DpiUnaware\" (#9860)"},{"Id":"1887822958","IsPullRequest":true,"CreatedAt":"2023-09-08T14:42:48","Actor":"gpetrou","Number":"9872","RawContent":null,"Title":"Enable nullability in some Binding members","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in some Binding members.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9872)","Url":"https://github.com/dotnet/winforms/pull/9872","RelatedDescription":"Open PR \"Enable nullability in some Binding members\" (#9872)"},{"Id":"1887751406","IsPullRequest":true,"CreatedAt":"2023-09-08T14:02:11","Actor":"gpetrou","Number":"9871","RawContent":null,"Title":"Enable nullability in some DataGridView members","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in some DataGridView members.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9871)","Url":"https://github.com/dotnet/winforms/pull/9871","RelatedDescription":"Open PR \"Enable nullability in some DataGridView members\" (#9871)"},{"Id":"1887252155","IsPullRequest":false,"CreatedAt":"2023-09-08T08:57:58","Actor":"LeafShi1","Number":"9870","RawContent":null,"Title":"Column types cannot be displayed in the DataGridView's Add Column window","State":"open","Body":"### Issue description\r\nThe column type cannot be show in the Add Column window of the DataGridView\r\nRelated to #4908 \r\n\r\n### Steps to reproduce\r\n\r\n1. Clone current repo\r\n2. Set \"DemoConsole\" as startup project and debug the project\r\n3. Switch tab to \"TabControl and TableLayoutPanel\"\r\n4. Try to add an Unbound column to DataGridView \r\n\r\nActual:\r\nThe column type is empty\r\n![image](https://github.com/dotnet/winforms/assets/132890443/556fa651-a0df-4b24-afc6-2aa7c319182a)\r\n\r\nExpected: \r\nThe column type show up\r\n![image](https://github.com/dotnet/winforms/assets/132890443/fbea1818-e5c5-4f89-9ecf-92cac8a9a68a)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/9870","RelatedDescription":"Open issue \"Column types cannot be displayed in the DataGridView's Add Column window\" (#9870)"},{"Id":"1887229327","IsPullRequest":true,"CreatedAt":"2023-09-08T08:42:22","Actor":"LeafShi1","Number":"9869","RawContent":null,"Title":"Port DataGridViewComboBoxColumnDesigner to runtime","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nRelated to #4908 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Add DataGridViewComboBoxColumnDesigner.cs\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- DataGridViewComboBoxColumnDesigner can be designed in runtime\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\nThe ComboBoxColumn cannot be added to DataGridView\r\n\r\n### After\r\n\r\n![AfterChang](https://github.com/dotnet/winforms/assets/132890443/dbe7a28f-73d2-45eb-966c-76da09160266)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manually (added DataGridViewComboBoxColumnDesigner to DemoConsole test app)\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .net 8.0.0-rc.1.23421.3\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9869)","Url":"https://github.com/dotnet/winforms/pull/9869","RelatedDescription":"Open PR \"Port DataGridViewComboBoxColumnDesigner to runtime\" (#9869)"},{"Id":"1886989243","IsPullRequest":true,"CreatedAt":"2023-09-08T05:59:26","Actor":"SimonZhao888","Number":"9868","RawContent":null,"Title":"Add new unit test for ToolStripMenuItemDesigner","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nReleate #721 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Add new unit test for ToolStripMenuItemDesigner\r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9868)","Url":"https://github.com/dotnet/winforms/pull/9868","RelatedDescription":"Open PR \"Add new unit test for ToolStripMenuItemDesigner\" (#9868)"},{"Id":"1886911833","IsPullRequest":true,"CreatedAt":"2023-09-08T04:26:04","Actor":"paul1956","Number":"9867","RawContent":null,"Title":"Fix issue#9807","State":"open","Body":"Fixes #9807\r\n\r\n## Proposed changes\r\n\r\n- Add Remove dependance on WebClient for VB FileDownload by using HttpClient\r\n- Add a Visual Basic Scratch Project so that Microsoft.VisualBasic.Forms dependent code can be tested from a Visual Basic project (even an empty WinForms project written in VB does not work)\r\n-  Upload still uses WebClient that also needs to be done as a separate PR\r\n\r\n## Customer Impact\r\n- Adds Async file download support to VB, and if WebClient goes away this will allow existing Visual Basic programs using synchronous File Download to still work.\r\n\r\n## Regression? \r\n\r\n- Yes when WebClient if and when goes away, no today \r\n\r\n## Risk\r\n\r\n- The code as is completely untested as I can't test without a working Scratch Project.\r\n- The existing code uses ICredentials in some of the paths, it is unclear how compatible that is between WebClient and HttpClient \r\n\r\n## Test methodology\r\n-  CODE IT UNTESTED, and don't know if any tests currently exist for FileDownload.\r\n- I will write tests if none exist.\r\n\r\n## Test environment(s) \r\n- TBD\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n- Visual Basic code to replace deprecated WebClient, before it is removed from .Net\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9867)","Url":"https://github.com/dotnet/winforms/pull/9867","RelatedDescription":"Open PR \"Fix issue#9807\" (#9867)"},{"Id":"1886643247","IsPullRequest":true,"CreatedAt":"2023-09-08T01:38:09","Actor":"JeremyKuhne","Number":"9866","RawContent":null,"Title":"Fix folder browser code","State":"closed","Body":"The old style folder browser was broken a few different ways:\r\n\r\n- FolderBrowserDialog would mutate the managed result string, usually corrupting memory in terrible ways\r\n- FolderNameEditor would AV\r\n- All were leaking shell handles\r\n\r\nThis adds a centralized helper to avoid these problems. This also:\r\n\r\n- Moves the exception string to primitives\r\n- Uses CSIDL defines and clarifies usage\r\n- Unblocks other CSIDL values\r\n- Uses the updated API to get the path from the PIDL\r\n\r\nWe can't use the shared dialog in FolderNameEditor as we expose dialog styles there that are not exposed in FolderBrowserDialog.\r\n\r\nFixes #9859","Url":"https://github.com/dotnet/winforms/pull/9866","RelatedDescription":"Closed or merged PR \"Fix folder browser code\" (#9866)"},{"Id":"1886608951","IsPullRequest":true,"CreatedAt":"2023-09-07T21:57:52","Actor":"Tanya-Solyanik","Number":"9865","RawContent":null,"Title":"bump up VS redist to 9.0","State":"open","Body":"move to runtime toolset 'dotnet/x64 v9.0.0-alpha.1.23430.1' to ensure coherency in the windows desktop repo, see https://github.com/dotnet/windowsdesktop/pull/3841 for details\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9865)","Url":"https://github.com/dotnet/winforms/pull/9865","RelatedDescription":"Open PR \"bump up VS redist to 9.0\" (#9865)"},{"Id":"1886560403","IsPullRequest":true,"CreatedAt":"2023-09-07T21:02:30","Actor":"Tanya-Solyanik","Number":"9864","RawContent":null,"Title":"reverted pinned .NET versions","State":"open","Body":"Fixes #9851 \n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9864)","Url":"https://github.com/dotnet/winforms/pull/9864","RelatedDescription":"Open PR \"reverted pinned .NET versions\" (#9864)"},{"Id":"1886476136","IsPullRequest":true,"CreatedAt":"2023-09-07T21:01:52","Actor":"dotnet-maestro[bot]","Number":"9862","RawContent":null,"Title":"[release/8.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:5f9d099d-0d05-4b82-cc41-08db9e4039c1)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 5f9d099d-0d05-4b82-cc41-08db9e4039c1\r\n- **Build**: 20230907.7\r\n- **Date Produced**: September 7, 2023 7:21:12 PM UTC\r\n- **Commit**: da3500bb02343b1d0424c74ccdddbc592b5b3f4f\r\n- **Branch**: refs/heads/release/8.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.CodeDom**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.ComponentModel.Composition**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Data.Odbc**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Data.OleDb**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.DirectoryServices.Protocols**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.IO.Ports**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Management**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Reflection.Context**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Runtime.Caching**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.ServiceModel.Syndication**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Speech**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Text.Encoding.CodePages**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Text.Json**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-rc.2.23456.8 to 8.0.0-rc.2.23457.7][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/1222f14d02...da3500bb02\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:5f9d099d-0d05-4b82-cc41-08db9e4039c1)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9862)","Url":"https://github.com/dotnet/winforms/pull/9862","RelatedDescription":"Closed or merged PR \"[release/8.0] Update dependencies from dotnet/runtime\" (#9862)"},{"Id":"1886525508","IsPullRequest":false,"CreatedAt":"2023-09-07T20:30:04","Actor":"Tanya-Solyanik","Number":"9863","RawContent":null,"Title":"When branding to NET9 is done, remove conditional compilation in System.Drawing.Common","State":"open","Body":"Interop with GDI+ in System.Drawing.Common is done differently for .NET6 and .NET7+, so it is conditionally compiled using `#if NET7_0_OR_GREATER` in the code and conditional inclusion in the project file. This was required because the .NET8.0 version of the standalone package was [multitargeted ](https://github.com/dotnet/winforms/blob/1be42ac61d472f01dc6a2da06230b6e67e4cdfde/src/System.Drawing.Common/src/System.Drawing.Common.csproj#L3)to .NET6, .NET7, .NET8, netstandard2.0 and net472. NETFX version is a facade assembly, i.e. contains only type forwards. And the netstandard2.0 version does not contain [implementations](https://github.com/dotnet/winforms/blob/release/8.0/src/System.Drawing.Common/src/NotSupported.cs).  \r\n\r\nThe NET9 version will target .NET8, .NET9, netstandard2.0 and NET472, as these will be in support by the RTM time, so we will not need conditional compilation after branding is done.\r\n","Url":"https://github.com/dotnet/winforms/issues/9863","RelatedDescription":"Open issue \"When branding to NET9 is done, remove conditional compilation in System.Drawing.Common\" (#9863)"},{"Id":"1882791438","IsPullRequest":true,"CreatedAt":"2023-09-07T17:34:35","Actor":"lonitra","Number":"9847","RawContent":null,"Title":"Convert AxHost to use Pointers","State":"closed","Body":"- Add `StorageType` enumto track what interface `_instance` is\r\n- Remove `T.Interface` fields in `AxHost` and query interface on `_instance` based on`StorageType`\r\n- Use `StorageType.PropertyBag` where appropriate. We never explicitly defined this before, but were essentially following the same pattern as the other storage cases\r\n- Fix PropertyBag storage cases. This was likely never working due to this case always throwing in `AxHost.DepersistControl`\r\n- Update methods in `AxHost.State` to use pointers instead of `T.Interface`","Url":"https://github.com/dotnet/winforms/pull/9847","RelatedDescription":"Closed or merged PR \"Convert AxHost to use Pointers\" (#9847)"},{"Id":"1885195178","IsPullRequest":true,"CreatedAt":"2023-09-07T16:37:07","Actor":"ViktorHofer","Number":"9858","RawContent":null,"Title":"Rename package.md to PACKAGE.md","State":"closed","Body":"Just noticed that the file name casing doesn't match what's specified in the csproj.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9858)","Url":"https://github.com/dotnet/winforms/pull/9858","RelatedDescription":"Closed or merged PR \"Rename package.md to PACKAGE.md\" (#9858)"},{"Id":"1885139329","IsPullRequest":true,"CreatedAt":"2023-09-07T05:25:41","Actor":"gpetrou","Number":"9857","RawContent":null,"Title":"Enable nullability in remaining TreeView members","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in remaining TreeView members.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9857)","Url":"https://github.com/dotnet/winforms/pull/9857","RelatedDescription":"Open PR \"Enable nullability in remaining TreeView members\" (#9857)"},{"Id":"1884973559","IsPullRequest":true,"CreatedAt":"2023-09-07T04:05:02","Actor":"dotnet-maestro[bot]","Number":"9854","RawContent":null,"Title":"[release/8.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:5f9d099d-0d05-4b82-cc41-08db9e4039c1)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 5f9d099d-0d05-4b82-cc41-08db9e4039c1\r\n- **Build**: 20230906.8\r\n- **Date Produced**: September 7, 2023 1:18:02 AM UTC\r\n- **Commit**: 1222f14d02818cfab597fa2a17c8664fe6cb39be\r\n- **Branch**: refs/heads/release/8.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.CodeDom**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.ComponentModel.Composition**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Data.Odbc**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Data.OleDb**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.DirectoryServices.Protocols**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.IO.Ports**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Management**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Reflection.Context**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Runtime.Caching**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.ServiceModel.Syndication**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Speech**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Text.Encoding.CodePages**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Text.Json**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-rc.2.23431.9 to 8.0.0-rc.2.23456.8][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/3c48925a6c...1222f14d02\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:5f9d099d-0d05-4b82-cc41-08db9e4039c1)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9854)","Url":"https://github.com/dotnet/winforms/pull/9854","RelatedDescription":"Closed or merged PR \"[release/8.0] Update dependencies from dotnet/runtime\" (#9854)"},{"Id":"1885048321","IsPullRequest":true,"CreatedAt":"2023-09-07T03:22:34","Actor":"SimonZhao888","Number":"9856","RawContent":null,"Title":"Make sure no exception pop up when edit label is accessed in ListView with viewMode: LargeIcon,SmallIcon,Tile","State":"open","Body":"Fixes #9829 \r\nThe parent node of the edit label in the ListView may be one of SubItem or ListViewItem, so the tree structure needs to be drawn according to different view modes.\r\n\r\n## Proposed changes\r\n\r\n- Modify the access level of the selected  ListViewItem in ListView class so that ListViewLabelEditAccessibleObject can access it.\r\n- Modify the ListViewItemTileAccessibleObject and ListViewItemWithImageAccessibleObject classes so that when the ListView is enabled for editing, the tree structure can correctly load the AccessibleObject of Edit label.\r\n- Modify the ListViewLabelEditAccessibleObject class to make sure the edit label can find correctly parent node in different ViewModel.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- No Excepiton pop up when Accessibility tools accessed the edit label in ListView.\r\n- Edit label can correctly find parent nodes in all view modes.\r\n\r\n## Regression? \r\n\r\n- Yes \r\n\r\n## Risk\r\n\r\n-Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\nAn exception unhandled when using Accessibility tools to edit ListItem with View modes: LargeIcon/SmallIcon/List.\r\n![image](https://github.com/dotnet/winforms/assets/133954995/10bd5282-fb67-4649-b98c-34506dde36d1)\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\nNo more exceptions are generated and the tree structure can be drawn correctly. \r\n**Details Model:**\r\n![Details_Image](https://github.com/dotnet/winforms/assets/133954995/bc3322f4-c4d3-49a6-b19d-05f6ea0f9bee)\r\n![Details_NoImage](https://github.com/dotnet/winforms/assets/133954995/d2c9eabd-efb5-495a-b56c-8b4f00ece974)\r\n\r\n**List Model:**\r\n![List_Image](https://github.com/dotnet/winforms/assets/133954995/98328a02-f0ff-4077-b260-e25197f4b751)\r\n![List_NoImage](https://github.com/dotnet/winforms/assets/133954995/254fcb66-e5ef-4d97-a308-0a36c9c8c543)\r\n\r\n**SmallIcon Model:**\r\n![Small_Image](https://github.com/dotnet/winforms/assets/133954995/e2c7e76b-d3eb-4025-b1a6-051e5063cf04)\r\n![Small_NoImage](https://github.com/dotnet/winforms/assets/133954995/2510ef5d-89c4-401a-bbcf-a56a7cbc7803)\r\n\r\n**LargeIcon Model:**\r\n![Large_Image](https://github.com/dotnet/winforms/assets/133954995/1d5abb6e-7531-4215-a779-b01f2585aa16)\r\n![Large_NoImage](https://github.com/dotnet/winforms/assets/133954995/62a1109a-5d34-47b4-8320-f04d6396ffe8)\r\n\r\n**Tile Model:**\r\n![Title_Image](https://github.com/dotnet/winforms/assets/133954995/f1d28533-552a-4104-874b-eede8f6ab425)\r\n![Title_NoImage](https://github.com/dotnet/winforms/assets/133954995/174f2d51-1162-4096-98fe-98178aa6c577)\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual (using inspect )\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- 8.0.100-preview.7.23376.3\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9856)","Url":"https://github.com/dotnet/winforms/pull/9856","RelatedDescription":"Open PR \"Make sure no exception pop up when edit label is accessed in ListView with viewMode: LargeIcon,SmallIcon,Tile\" (#9856)"},{"Id":"1885008228","IsPullRequest":false,"CreatedAt":"2023-09-07T02:24:30","Actor":"elachlan","Number":"9855","RawContent":null,"Title":"sdk warning on nuget package Microsoft.CodeAnalysis.CodeStyle","State":"open","Body":"I followed all the instructions for installing and starting VS from a script, but I get 91 of the errors below. I do have ,Net 4.8 installed from VS installer but where do I get new compiler?\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nWarning\tCS9057\tThe analyzer assembly 'C:\\Users\\PaulM\\Source\\Repos\\winforms\\.dotnet\\sdk\\8.0.100-preview.7.23376.3\\Sdks\\Microsoft.NET.Sdk\\codestyle\\cs\\Microsoft.CodeAnalysis.CodeStyle.dll' references version '4.8.0.0' of the compiler, which is newer than the currently running version '4.7.0.0'.\tAccessibility-version\tC:\\Users\\PaulM\\Source\\Repos\\winforms\\.dotnet\\sdk\\8.0.100-preview.7.23376.3\\Sdks\\Microsoft.NET.Sdk\\codestyle\\cs\\Microsoft.CodeAnalysis.CodeStyle.dll\t1\tActive\r\n```\r\n\r\n_Originally posted by @paul1956 in https://github.com/dotnet/winforms/issues/9807#issuecomment-1707643187_\r\n            ","Url":"https://github.com/dotnet/winforms/issues/9855","RelatedDescription":"Open issue \"sdk warning on nuget package Microsoft.CodeAnalysis.CodeStyle\" (#9855)"},{"Id":"1883488908","IsPullRequest":false,"CreatedAt":"2023-09-07T00:40:10","Actor":"Ashley-Li","Number":"9848","RawContent":null,"Title":"[HDPI]GDI+ HatchBrushes are virtually useless on high-dpi displays","State":"closed","Body":"### .NET version\r\n\r\ndotnet-sdk-8.0.100-rc.1.23423.3\r\n\r\n### Did it work in .NET Framework?\r\n\r\nYes\r\n\r\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\r\n\r\nNo, it reproes in .Net 7.0 SDK/.NET 6.0 SDK build.\r\n\r\n### Issue description\r\n\r\nOn High DPI environment, the patterns are rendered much too small to be useful on high-dpi displays and  the pattern of the graphic is inconsistent with the .NET Framework.\r\n\r\n**Result on .Net 8.0 rc1 build with 300%DPI:**\r\n![Core_300DPI](https://github.com/dotnet/winforms/assets/56664234/aae605b6-dcb1-4997-8575-81ea51b9f214)\r\n\r\n**Result on .NET Framework 4.8.1 with 300%DPI:**\r\n![Framework_300DPI](https://github.com/dotnet/winforms/assets/56664234/420a8cca-e3ee-461d-bd61-69223c84b758)\r\n\r\n### Steps to reproduce\r\n\r\nSample app:\r\n[WinFormsApp131.zip](https://github.com/dotnet/winforms/files/12534942/WinFormsApp131.zip)\r\n\r\nCodes：\r\n ```C# Form f = new Form();\r\n        HatchBrush h = new HatchBrush(HatchStyle.Sphere, Color.Navy, Color.NavajoWhite);\r\n        Bitmap b = new Bitmap(f.ClientRectangle.Width, f.ClientRectangle.Height);\r\n        using (Graphics g = Graphics.FromImage(b))\r\n        {\r\n            g.FillRectangle(h, new Rectangle(Point.Empty, f.ClientSize));\r\n        }\r\n        f.BackgroundImage = b;\r\n        f.WindowState = FormWindowState.Maximized;\r\n        f.Show();\r\n  ```\r\n\r\nThe initial ticket link is here: https://devdiv.visualstudio.com/DevDiv/_queries/edit/1879680","Url":"https://github.com/dotnet/winforms/issues/9848","RelatedDescription":"Closed issue \"[HDPI]GDI+ HatchBrushes are virtually useless on high-dpi displays\" (#9848)"},{"Id":"1884860176","IsPullRequest":true,"CreatedAt":"2023-09-06T23:55:17","Actor":"JeremyKuhne","Number":"9853","RawContent":null,"Title":"Release COM object when wrapping in PictureWrapper","State":"closed","Body":"We need to release the incoming pointer when returning a wrapped object. This was fixed in .NET 7 and removed completely in .NET 8 (where we access the COM object directly).\r\n\r\nWithout this any time we access IPicture we will permanently leak the incoming native class with no way for customers to fix it. This usually manifests as an exhaustion of GDI handles and will crash the application.\r\n\r\nThis is a regression from .NET 5.\r\n\r\nFixes #9774\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9853)","Url":"https://github.com/dotnet/winforms/pull/9853","RelatedDescription":"Closed or merged PR \"Release COM object when wrapping in PictureWrapper\" (#9853)"},{"Id":"1884858050","IsPullRequest":true,"CreatedAt":"2023-09-06T23:21:28","Actor":"KlausLoeffelmann","Number":"9852","RawContent":null,"Title":"RC2 dual checkin for fixes in AppFramework, DataBinding, Readme-Update","State":"closed","Body":"Insertion PR for .NET 8 RC2 updates for the following PRs:\r\n\r\n* #9844\r\n* #9817\r\n* #9799\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9852)","Url":"https://github.com/dotnet/winforms/pull/9852","RelatedDescription":"Closed or merged PR \"RC2 dual checkin for fixes in AppFramework, DataBinding, Readme-Update\" (#9852)"},{"Id":"1884544469","IsPullRequest":false,"CreatedAt":"2023-09-06T18:32:26","Actor":"Tanya-Solyanik","Number":"9851","RawContent":null,"Title":"Remove hardcoded .NET versions when Arcade updates SDK to 9.0","State":"open","Body":"Until Arcade updates to a 9.0 SDK, you want to set these properties in your root Directory.Build.props file with a TODO to remove it when a 9.0 SDK is used: \r\n\r\n```\r\n<NetMinimum>net8.0</NetMinimum>\r\n<NetPrevious>net8.0</NetPrevious>\r\n<NetCurrent>net8.0</NetCurrent>\r\n```\r\n\r\nThis will drop the net6.0 and net7.0 assets from System.Drawing.Common (which is intentional) and doesn't yet use the net9.0 TFM (which would require some msbuild work). I think winforms in the past continued building the current TFM until an SDK is used that supports the newer TFM.\r\n\r\n_Originally posted by @ViktorHofer in https://github.com/dotnet/winforms/issues/9836#issuecomment-1708860563_\r\n\r\nOnce Arcade is upgraded, we should revert [that change](https://github.com/dotnet/winforms/pull/9836/commits/3be1f719e3944b0a7b51a487f5c002f1e469e79a) and re-evaluate if we still need conditional computation in System.Drawing.Common\r\n            ","Url":"https://github.com/dotnet/winforms/issues/9851","RelatedDescription":"Open issue \"Remove hardcoded .NET versions when Arcade updates SDK to 9.0\" (#9851)"},{"Id":"1884457157","IsPullRequest":true,"CreatedAt":"2023-09-06T17:57:45","Actor":"JeremyKuhne","Number":"9850","RawContent":null,"Title":"Break out and annotate AxImporter","State":"closed","Body":"Investigating porting the implementation, cleaning up the stub code.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9850)","Url":"https://github.com/dotnet/winforms/pull/9850","RelatedDescription":"Closed or merged PR \"Break out and annotate AxImporter\" (#9850)"},{"Id":"1882715297","IsPullRequest":true,"CreatedAt":"2023-09-06T17:00:17","Actor":"JeremyKuhne","Number":"9845","RawContent":null,"Title":"Create IUnknownStrategy for GlobalInterfaceTable","State":"closed","Body":"Create a Global Interface Table IUnknownStrategy so we can use the same machinery the runtime uses to expose COM interfaces as objects with AgileComPointer-like support.\r\n\r\nChange all of the direct Marshal calls to use a ComHelpers wrapper method.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/9845)","Url":"https://github.com/dotnet/winforms/pull/9845","RelatedDescription":"Closed or merged PR \"Create IUnknownStrategy for GlobalInterfaceTable\" (#9845)"},{"Id":"1883912746","IsPullRequest":false,"CreatedAt":"2023-09-06T12:29:05","Actor":"KieranDevvs","Number":"9849","RawContent":null,"Title":"Components within a panel are not positioned correctly at runtime if scrollbar is visible.","State":"open","Body":"### .NET version\n\n7.0\n\n### Did it work in .NET Framework?\n\nNot tested/verified\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nIf components are anchored within a panel, and the scroll bar for the panel is *NOT* visible when loading the form, the components are positioned correctly.\r\nIf components are anchored within a panel, and the scroll bar for the panel *IS* visible when loading the form, the components are shifted to the left by the same number of pixels the scroll bar is wide.\r\n\r\nExample of when the scrollbar is visible before loading the form:\r\n![image](https://github.com/dotnet/winforms/assets/21192520/5cea2529-c910-4efe-a79a-b89bd07a1f3e)\r\n\r\nExample of when the scroll bar is not visible before loading the form, but the form is resized to make the scroll bar visible after the fact:\r\n![image](https://github.com/dotnet/winforms/assets/21192520/45a8cc62-c730-4a8e-8783-0400e47cda60)\r\n\n\n### Steps to reproduce\n\n1) Create a blank form\r\n2) Add a panel and dock it to the form.\r\n3) Add a component, resize it to the width of the panel and anchor it (Left, Top, Right).\r\n4) Set the panel to automatically show the scroll bar.\r\n5) Resize the form within the designer to make the scroll bar appear.\r\n6) Run the application and observe the difference between the designer and the running form.\r\n","Url":"https://github.com/dotnet/winforms/issues/9849","RelatedDescription":"Open issue \"Components within a panel are not positioned correctly at runtime if scrollbar is visible.\" (#9849)"},{"Id":"1882746774","IsPullRequest":false,"CreatedAt":"2023-09-05T21:27:43","Actor":"JeremyKuhne","Number":"9846","RawContent":null,"Title":"Analyze AxImporter for COM exposure","State":"open","Body":"`AxImporter` is the class that generates the wrapper `AxHost` derived classes for ActiveX controls. In Core this is just a stub. COM references use this through the `AxImp` command line tool in addition to `TlbImp`.\r\n\r\nIn order for AOT/Trimming to work in these scenarios we'll need to write up exactly how these tools are working to understand the exposure to built-in COM support.\r\n\r\nPresumably it is unlikely that we cannot make these work directly without changing the toolchain.","Url":"https://github.com/dotnet/winforms/issues/9846","RelatedDescription":"Open issue \"Analyze AxImporter for COM exposure\" (#9846)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-09-09T03:30:35.8174291Z","RunDurationInMilliseconds":534}