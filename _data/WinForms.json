{"Data":{"GitHub":{"Issues":[{"Id":"662524202","IsPullRequest":false,"CreatedAt":"2020-07-21T03:18:15","Actor":"Jenna-Zheng","Number":"3613","RawContent":null,"Title":"[Accessibility]DateTimePicker control should support Tab stop for its drop-down button","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 5.0.100-rc.1.20367.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Problem description:**\r\nThere is no tab stop for DateTimePicker drop-down button, so user don't know how to expand this control's calendar pane, but actually we can use Alt+Down arrow or press F4 keyboard to expand.\r\n![image](https://user-images.githubusercontent.com/64949616/88007264-2e19a700-cb40-11ea-84d5-8645bb6fd052.png)\r\n![TestResult_keyboard](https://user-images.githubusercontent.com/64949616/88007986-c3696b00-cb41-11ea-9086-afd239de17ba.gif)\r\n\r\n**Expected behavior:**\r\nDateTimePicker control should have a tab stop for its drop-down button while navigating through Left\\Right arrow\r\n![image](https://user-images.githubusercontent.com/64949616/88006855-3ae9cb00-cb3f-11ea-9b45-ac7c1ee00d85.png)\r\n\r\n**Minimal repro:**\r\n1. Create a .Net Core WinForms App.\r\n2. Add a DateTimePicker control to the Form.\r\n3. Build and run the app.\r\n4. Navigate the DateTimePicker control by using Left\\Right arrow.\r\n5. Observe the keyboard focus. ","Url":"https://github.com/dotnet/winforms/issues/3613","RelatedDescription":"Open issue \"[Accessibility]DateTimePicker control should support Tab stop for its drop-down button\" (#3613)"},{"Id":"662419287","IsPullRequest":false,"CreatedAt":"2020-07-21T00:37:52","Actor":"GrabYourPitchforks","Number":"3612","RawContent":null,"Title":"Tracking issue: remove calls to obsoleted CAS and CER APIs","State":"open","Body":"In https://github.com/dotnet/winforms/pull/3611, a bunch of calls to CAS and CER APIs were surrounded by pragmas to suppress newly-introduced warnings in 5.0.\r\n\r\nThe CAS and CER infrastructure does not exist in .NET 5.0. Hence the obsoletions. :)\r\nSince WinForms targets 5.0 exclusively, these call sites should be removed rather than suppressed.","Url":"https://github.com/dotnet/winforms/issues/3612","RelatedDescription":"Open issue \"Tracking issue: remove calls to obsoleted CAS and CER APIs\" (#3612)"},{"Id":"659203447","IsPullRequest":true,"CreatedAt":"2020-07-20T23:42:12","Actor":"dotnet-maestro[bot]","Number":"3599","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200717.23\r\n- **Date Produced**: 7/18/2020 5:21 AM\r\n- **Commit**: f6dc87f43df543bdc761ded7c578ecedc5b39668\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Diagnostics.PerformanceCounter**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.DirectoryServices**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Drawing.Common**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.IO.FileSystem.AccessControl**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.IO.Packaging**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.CodeDom**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **Microsoft.NETCore.Targets**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **Microsoft.Win32.Registry.AccessControl**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **Microsoft.NETCore.App.Ref**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.IO.Pipes.AccessControl**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Security.Cryptography.Pkcs**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Security.Cryptography.ProtectedData**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Security.Permissions**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Text.Encodings.Web**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Text.Json**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n  - **System.Threading.AccessControl**: from 5.0.0-preview.8.20363.2 to 5.0.0-rc.1.20367.23\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3599)\r\n","Url":"https://github.com/dotnet/winforms/pull/3599","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3599)"},{"Id":"662343211","IsPullRequest":true,"CreatedAt":"2020-07-20T22:57:55","Actor":"AdamYoblick","Number":"3611","RawContent":null,"Title":"Suppress warnings about obsolete types and members","State":"closed","Body":"Some types and members were recently made obsolete in dotnet/runtime, and dependency flow into dotnet/winforms is broken because of it.\r\n\r\nTo keep darc running smoothly, I've suppressed these warnings individually.\r\nI've built locally from both command line and VS, and all errors are now gone.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3611)","Url":"https://github.com/dotnet/winforms/pull/3611","RelatedDescription":"Closed or merged PR \"Suppress warnings about obsolete types and members\" (#3611)"},{"Id":"662232712","IsPullRequest":false,"CreatedAt":"2020-07-20T20:30:06","Actor":"madewokherd","Number":"3610","RawContent":null,"Title":"NativeWindow depends on WndProc delegates functioning during finalization","State":"open","Body":"This is an issue I found in Wine Mono while running regression tests, which might theoretically affect .NET Core as well. I don't know for sure if it does, but I wanted to let you know so you can review it.\r\n\r\nWine Mono uses a fork of .NET Core winforms running under Mono. When I most recently merged upstream Mono, I found that it introduced crashes running MonoTests.System.Windows.Forms.TimerTest from Mono's unit tests. This happens when the NativeWindow class is finalized. It turns out that when the _windowProc delegate is only referenced by objects that are being finalized, calling it from native code can crash, or it can result in the instance method being called with this == NULL.\r\n\r\nI don't know if there's an easy way to run this test in .NET Core, I've only built it to run in .NET Framework.\r\n\r\nI am working around this by ensuring that any active WndProc delegates have a static reference to them. That change is https://github.com/madewokherd/winforms/commit/a0bc4ebd64afbac01116a8dee0551250fc56202b but I didn't write it with the intention of sending it upstream.\r\n\r\nDoes the .NET Core runtime provide the needed guarantees that a delegate will function while it is referenced by a cycle that includes objects being finalized? If not, then you should ensure there is a live reference to all WNDPROC objects for as long as they are required by a user32 window object.","Url":"https://github.com/dotnet/winforms/issues/3610","RelatedDescription":"Open issue \"NativeWindow depends on WndProc delegates functioning during finalization\" (#3610)"},{"Id":"662185782","IsPullRequest":true,"CreatedAt":"2020-07-20T19:36:42","Actor":"cristianosuzuki77","Number":"3609","RawContent":null,"Title":"Locchecking 2020*07*20","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3609)","Url":"https://github.com/dotnet/winforms/pull/3609","RelatedDescription":"Closed or merged PR \"Locchecking 2020*07*20\" (#3609)"},{"Id":"658513810","IsPullRequest":true,"CreatedAt":"2020-07-20T17:57:35","Actor":"Shyam-Gupta","Number":"3594","RawContent":null,"Title":"[Port to 3.1 servicing]: Adding Form subtype in WinForms C# template","State":"closed","Body":"Porting fix for bug #3510 to 3.1 servicing release.\r\nMaster branch commit: #3527 \r\n\r\nChanges:\r\n\r\n1. Added *.user file so as to add Form subtype.\r\n2. By default template engine removes *.user files.\r\n    To override it, I have added sources in template.json to remove *.user from \"exclude\"\r\n\r\nVerified that:\r\n\r\n1. .user file gets dropped on creating new project from dotnet CLI\r\n2. It works when project gets created from VS. Now Form1.cs opens directly in designer\r\n3. .user file has BOM (0xEF, 0xBB, 0xBF) characters in the beginning and the files have UTF 8 encoding\r\n4. On adding a new Form to an existing project, the new Form opens directly in designer\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3594)","Url":"https://github.com/dotnet/winforms/pull/3594","RelatedDescription":"Closed or merged PR \"[Port to 3.1 servicing]: Adding Form subtype in WinForms C# template\" (#3594)"},{"Id":"662067840","IsPullRequest":false,"CreatedAt":"2020-07-20T17:25:01","Actor":"Tanya-Solyanik","Number":"3608","RawContent":null,"Title":"Add template for WinForms Control Library","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET 5.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nIn .NET Framework we had a VS template for WinForms Control Library, but in Core we have to modify the class library project file to create a control library.\r\n\r\nWinForms Control Library is simply a Class Library with a reference to Winforms added by default. So to create it you can just create a Class Library from VS template and add `<UseWinforms>true</UseWinforms>` in the project file.\r\n\r\n**Expected behavior:**\r\nAdd new project in VS:\r\n![image](https://user-images.githubusercontent.com/15823268/87967003-001a6100-ca73-11ea-8209-bf8202d04c9f.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3608","RelatedDescription":"Open issue \"Add template for WinForms Control Library\" (#3608)"},{"Id":"658373326","IsPullRequest":true,"CreatedAt":"2020-07-20T16:48:27","Actor":"cristianosuzuki77","Number":"3593","RawContent":null,"Title":"LOC CHECKING 20200716","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3593)","Url":"https://github.com/dotnet/winforms/pull/3593","RelatedDescription":"Closed or merged PR \"LOC CHECKING 20200716\" (#3593)"},{"Id":"661834995","IsPullRequest":true,"CreatedAt":"2020-07-20T13:38:17","Actor":"SergeySmirnov-Akvelon","Number":"3607","RawContent":null,"Title":"Fixing issue with getting of Accessible Name, Role, Description","State":"open","Body":"Fixes #3560\r\n\r\n## Proposed changes\r\nAdded supporting of \"LegacyIAccessible\" pattern. Added missing logic for Name property.\r\n\r\n## Customer Impact\r\n- No\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- Unit-tests \r\n- Manual testing\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- Microsoft Windows [Version 10.0.18363.900]\r\n- .NET Core 5.0 Version: 5.0.100-rc.1.20367.2\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3607)","Url":"https://github.com/dotnet/winforms/pull/3607","RelatedDescription":"Open PR \"Fixing issue with getting of Accessible Name, Role, Description\" (#3607)"},{"Id":"661565954","IsPullRequest":false,"CreatedAt":"2020-07-20T09:04:10","Actor":"kirsan31","Number":"3606","RawContent":null,"Title":"Application.Exit raises FormClosing and FormClosed events in wrong order for MDI application","State":"open","Body":"* .NET Core Version: **Any**\r\n\r\n* Have you experienced this same bug with .NET Framework?: **Yes**\r\n\r\n**Problem description:**\r\n\r\nIn [docs](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.form.formclosing?view=netcore-3.1): \r\n\r\n> If the form is a multiple-document interface (MDI) parent form, the FormClosing events of all MDI child forms are raised before the MDI parent form's FormClosing event is raised. Likewise, the FormClosed events of all MDI child forms are raised before the FormClosed event of the MDI parent form is raised\r\n\r\nBut in `Application.Exit `those events raised in unpredictable order: https://github.com/dotnet/winforms/blob/a6a308fa452770caafca55ee4d8ac54d1ee1015d/src/System.Windows.Forms/src/System/Windows/Forms/Application.cs#L872-L889\r\n\r\n**Expected behavior:**\r\nEvents raised in correct order - first for MDI child windows and for MDI parent last. I think the fix is really simple.\r\n\r\n-----------------------------\r\n\r\nAlso during this, it will be nice to eliminate `foreach` loop on `OpenForms (s_forms)` when rising `FormClosing`. To fix this old nasty behavior of `Application.Exit`: \r\n\r\n> System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n\r\nwhen user puts some forms closing logic in main app form's `FormClosing` event.  But  I don't know how easily to achieve this and preserve this behavior :\r\n\r\n> If one of more of the handlers cancels the event, then Exit returns without further action.\r\n\r\n:(\r\n","Url":"https://github.com/dotnet/winforms/issues/3606","RelatedDescription":"Open issue \"Application.Exit raises FormClosing and FormClosed events in wrong order for MDI application\" (#3606)"},{"Id":"661559382","IsPullRequest":false,"CreatedAt":"2020-07-20T08:57:41","Actor":"Jessie-Zhang01","Number":"3605","RawContent":null,"Title":"Events and properties do not display description text in property browser","State":"open","Body":"* .NET Core Version: \r\n.Net SDK 5.0.100-rc.1.20367.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**More Info**\r\n\r\n1. All events of BackgroundWorker and FileSystemWatcher has no functional description.\r\n2. BackgroundWorker's \"Misc\" item name is different from framework.\r\n![image](https://user-images.githubusercontent.com/45864649/87918993-bef17380-caa9-11ea-9cc9-7203579a3156.png)\r\n\r\n**Minimal repro:**\r\n\r\n1. Create a winforms .NET core app.\r\n2. Drag and drop a BackgroundWorker/FileSystemWatcher to form designer.\r\n3. Select a property under the Misc item, and check the description of the function.\r\n[WindowsFormsApp5.zip](https://github.com/dotnet/winforms/files/4946582/WindowsFormsApp5.zip)\r\n\r\n**Expected behavior:**\r\nThe property under 'Misc' should has functional description.\r\n![image](https://user-images.githubusercontent.com/45864649/87918831-85b90380-caa9-11ea-8027-4b02bcc23605.png)\r\n\r\n**Actual behavior:**\r\nThe property under 'Misc' has no functional description.\r\n![image](https://user-images.githubusercontent.com/45864649/87918823-83ef4000-caa9-11ea-842b-4ba8e639f067.png)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3605","RelatedDescription":"Open issue \"Events and properties do not display description text in property browser\" (#3605)"},{"Id":"661034110","IsPullRequest":true,"CreatedAt":"2020-07-19T19:55:34","Actor":"gpetrou","Number":"3604","RawContent":null,"Title":"Move PRINTPAGERANGE to Interop Comdlg32","State":"open","Body":"## Proposed changes\r\n\r\n- Move PRINTPAGERANGE to Interop Comdlg32.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3604)","Url":"https://github.com/dotnet/winforms/pull/3604","RelatedDescription":"Open PR \"Move PRINTPAGERANGE to Interop Comdlg32\" (#3604)"},{"Id":"660852628","IsPullRequest":true,"CreatedAt":"2020-07-19T13:58:33","Actor":"kpreisser","Number":"3603","RawContent":null,"Title":"Use native-sized integers to avoid overhead for 32-bit platforms","State":"open","Body":"## Proposed changes\r\n\r\n- Resolve TODOs in the TaskDialog code by using native-sized integers (`nint`/`nuint`) where applicable, to reduce overhead for 32-bit platforms and to avoid having to use the `unsafe` keyword.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- None\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Testing the changed code running as `x86` and `x64` with various inputs, including values where an overflow could happen, to make sure it behaves the same as the previous code.\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.100-rc.1.20367.2\r\n Commit:    0dd3ff77c7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-rc.1.20367.2\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-preview.8.20361.2\r\n  Commit:  f37dd6fc85\r\n\r\n.NET SDKs installed:\r\n  3.1.400-preview-015203 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-rc.1.20367.2 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3603)","Url":"https://github.com/dotnet/winforms/pull/3603","RelatedDescription":"Open PR \"Use native-sized integers to avoid overhead for 32-bit platforms\" (#3603)"},{"Id":"660824956","IsPullRequest":true,"CreatedAt":"2020-07-19T13:03:08","Actor":"kpreisser","Number":"3602","RawContent":null,"Title":"Remove unnecessary NRT directives from TaskDialog interop files","State":"open","Body":"Remove now unnecessary NRT directives that were added by #1133, since #3451 enabled nullable reference types for `System.Windows.Forms.Primitives` globally in the project file.\r\n\r\n## Proposed changes\r\n\r\n- Remove remaining `#nullable enable` directives in `System.Windows.Forms.Primitives` files.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- None\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Changed one of the field types in `PFTASKDIALOGCALLBACK` to `object?` and verified that the compiler doesn't raise `CS8632`.\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.100-rc.1.20367.2\r\n Commit:    0dd3ff77c7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-rc.1.20367.2\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-preview.8.20361.2\r\n  Commit:  f37dd6fc85\r\n\r\n.NET SDKs installed:\r\n  3.1.400-preview-015203 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-rc.1.20367.2 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3602)","Url":"https://github.com/dotnet/winforms/pull/3602","RelatedDescription":"Open PR \"Remove unnecessary NRT directives from TaskDialog interop files\" (#3602)"},{"Id":"659635473","IsPullRequest":true,"CreatedAt":"2020-07-17T20:57:59","Actor":"weltkante","Number":"3601","RawContent":null,"Title":"Workaround for bad ImageList ownership management","State":"open","Body":"Fixes #3358\r\n\r\n## Proposed changes\r\n\r\nDisable sharing ImageList handles because they are implemented incorrectly and can double-free handles, which will crash if the handle was reused already (#3358). Instead of sharing ImageLists this PR creates an explicit duplicate when assigning an ImageList to the native control, and destroys the previous instance. This guarantees the handle used by the native control is always unique and can be safely destroyed. To avoid leaks all ImageLists are removed when the handle is destroyed.\r\n\r\n#3531 is tracking proper implementation of ImageList ownership\r\n\r\nFor TreeViews the StateImageList is never shareable and it had similar bugs, so the correct solution is also to create unique handles and destroy them. Part of the logic already was there, but it was too eager and destroyed ImageLists it didn't own. By creating unique handles this problem is avoided.\r\n\r\n## Customer Impact\r\n\r\n- ImageLists don't get destroyed prematurely (see #3531)\r\n- Usage of ImageLists on checkbox-enabled TreeView or ListView controls no longer risks double-free crashes\r\n- Higher memory usage due to duplicating ImageLists\r\n\r\n## Regression? \r\n\r\n- No, the memory corruption and ownership issues were also present in Desktop Framework\r\n\r\n## Risk\r\n\r\n- This changes semantics of how ImageLists are managed, users which send window messages directly to the native control may not be prepared to handle this.\r\n\r\n### Before\r\n\r\n- ImageLists were destroyed while still in use\r\n- ImageLists were destroyed twice (risk of crashing if numeric handle value was reused)\r\n\r\n### After\r\n\r\n- ImageList destruction result is checked in debug builds to verify no double-free happened\r\n\r\n## Test methodology\r\n\r\n- Running the test suite in a debugger and ensure the asserts detected no double-frees\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3601)","Url":"https://github.com/dotnet/winforms/pull/3601","RelatedDescription":"Open PR \"Workaround for bad ImageList ownership management\" (#3601)"},{"Id":"659274301","IsPullRequest":true,"CreatedAt":"2020-07-17T13:51:35","Actor":"SergeySmirnov-Akvelon","Number":"3600","RawContent":null,"Title":"Fixing regression in  Control.AccessibleName, Control.AccessibleRole, and Control.AccessibleDescription properties","State":"open","Body":"Fixes #3504\r\n\r\n## Proposed changes\r\nAdded supporting of \"LegacyIAccessible\" pattern. Added missing logic for Name property.\r\n\r\n## Customer Impact\r\n- No\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- Unit-tests \r\n- Manual testing\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- Microsoft Windows [Version 10.0.18363.900]\r\n- .NET Core 3.1.6\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3600)","Url":"https://github.com/dotnet/winforms/pull/3600","RelatedDescription":"Open PR \"Fixing regression in  Control.AccessibleName, Control.AccessibleRole, and Control.AccessibleDescription properties\" (#3600)"},{"Id":"659040576","IsPullRequest":false,"CreatedAt":"2020-07-17T08:57:53","Actor":"Jessie-Zhang01","Number":"3598","RawContent":null,"Title":"[Accessibility] Keyboard tab focus is invisible and Keyboard shortcut key is unavailable to access any items in the Print preview dialog after pressing 'Enter' on any button (One page, Two Page...)","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 5.0.100-rc.1.20366.7\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**More Info:**\r\n\r\n1. This issue can also repro on Framework project.\r\n2. There are 2 similar bugs: [1156779](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1156779), [1156785 ](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1156785)in VSO.\r\n\r\n**Minimal repro:**\r\n1. Extract “[WindowsFormsApp3.zip](https://github.com/dotnet/winforms/files/4936772/WindowsFormsApp3.zip)” and open it in VS.\r\n2. Build and run the project.\r\n3. Using Tab key to navigate to Preview button, then press Enter key to show Print preview dialog.\r\n4. Using Tab key to navigate page button(One Page, Two Page...), then press Enter key.            \r\n5. Try to use Tab key to navigate any items in the Print preview dialog.\r\n\r\n\r\n**Expected behavior:**\r\nKeyboard tab focus is visible and Keyboard shortcut key is available to access any items in the Print preview dialog.\r\n\r\n**Actual behavior:**\r\nKeyboard tab focus is invisible and Keyboard shortcut key is unavailable to access any items in the Print preview dialog.\r\n![steps](https://user-images.githubusercontent.com/45864649/87767155-cd8f1f00-c84c-11ea-967c-f17039f88e81.gif)\r\n","Url":"https://github.com/dotnet/winforms/issues/3598","RelatedDescription":"Open issue \"[Accessibility] Keyboard tab focus is invisible and Keyboard shortcut key is unavailable to access any items in the Print preview dialog after pressing 'Enter' on any button (One page, Two Page...)\" (#3598)"},{"Id":"659021568","IsPullRequest":false,"CreatedAt":"2020-07-17T08:37:38","Actor":"Lydia-Shi","Number":"3597","RawContent":null,"Title":"[Accessibility] Narrator does not read the state of the CheckBox as checked/unchecked after selection in DataGridViewCheckBoxColumn","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version:\r\n5.0.100-rc.1.20366.7\r\n\r\n* Have you experienced this same bug with .NET Framework?:\r\nYes\r\n\r\n**More info:**\r\nNVDA tool also can reproduce this issue.\r\n\r\n**Problem description:**\r\nNarrator does not read the state of the CheckBox as checked/unchecked after selection.\r\n![Read](https://user-images.githubusercontent.com/54019172/87765014-daf6da00-c849-11ea-9859-177d1fc1813c.gif)\r\n![ReadPic](https://user-images.githubusercontent.com/54019172/87765022-dc280700-c849-11ea-9f0a-69f68d156920.PNG)\r\n\r\n**Expected behavior:**\r\nNarrator should read the state of the checkbox as checked/unchecked after selection.\r\n\r\n**Minimal repro:**\r\n1.\tExtract following attached project, then build and run it\r\n[DataGridViewCheckBoxTest.zip](https://github.com/dotnet/winforms/files/4936568/DataGridViewCheckBoxTest.zip)\r\n2.\tOpen Narrator tool, navigate to the first row, Column5, check whether the narrator reads the state of the check box as checked /unchecked after selection\r\n","Url":"https://github.com/dotnet/winforms/issues/3597","RelatedDescription":"Open issue \"[Accessibility] Narrator does not read the state of the CheckBox as checked/unchecked after selection in DataGridViewCheckBoxColumn\" (#3597)"},{"Id":"658950212","IsPullRequest":false,"CreatedAt":"2020-07-17T07:13:27","Actor":"Amy-Li03","Number":"3596","RawContent":null,"Title":"[Accessibility] Narrator does not read the status message as row added after click on Add New button of BindingNavigator","State":"open","Body":"* .NET Core Version: \r\n.NET SDK 5.0.100-preview.8.20363.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**More info:**\r\nNVDA tool also can reproduce this issue.\r\n\r\n**Minimal repro:**\r\n1. Extract the test app, then build and run it. \r\n[CoreApp.zip](https://github.com/dotnet/winforms/files/4936229/CoreApp.zip)\r\n2. Open Narrator tool, navigate to the **Add New** button of BindingNavigator.\r\n3. Click on **Add New** button (click by mouse or through keyboard), then a row will be added.\r\n![repro](https://user-images.githubusercontent.com/62929087/87757469-45ede400-c83d-11ea-9dfb-41ac2774c7a8.gif)\r\n\r\n**Actual behavior:**\r\n1. Narrator does not provide instruction that Add New button refers to  what control to be added.\r\n2. While clicking on Add New button through Caps + Enter key, Narrator will not focus on the new added row, so Narrator does not read the status message as row added.\r\n![Narrator1](https://user-images.githubusercontent.com/62929087/87757481-4a1a0180-c83d-11ea-8bf0-1e843b62ed79.png)\r\n\r\n3. While clicking on Add New button by mouse, Narrator will focus on the new added row, so Narrator will read the status message as row added.\r\n![Narrator2](https://user-images.githubusercontent.com/62929087/87757497-52723c80-c83d-11ea-84ee-c365f608e090.png)\r\n\r\n**Expected behavior:**\r\n1. Narrator should provide information that Add new button refers to what control should be added.\r\n2. While clicking on Add New button through Caps + Enter key, Narrator should read the status message as row added after click on \"Add New\" button.","Url":"https://github.com/dotnet/winforms/issues/3596","RelatedDescription":"Open issue \"[Accessibility] Narrator does not read the status message as row added after click on Add New button of BindingNavigator\" (#3596)"},{"Id":"658899304","IsPullRequest":false,"CreatedAt":"2020-07-17T05:58:58","Actor":"Marie-Shi","Number":"3595","RawContent":null,"Title":"Windows forms ComboBox.DropDownStyle change causes System.AccessViolationException randomly","State":"open","Body":"* .NET Core Version: \r\n.Net 5.0.100-rc.1.20366.7 from 5.0 master branch + VS2019 with latest core designer\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**More Info**\r\nThis issue can reproduce from .NET 3.5 to .NET 4.8 on Dev14/Dev15/Dev16. And this is a randomly issue, not happened each time.\r\n\r\n**Minimal repro:**\r\n1.\tExtract “Core.zip” and open it in VS.\r\n[Core.zip](https://github.com/dotnet/winforms/files/4935973/Core.zip)\r\n2.\tBuild and run the project.\r\n3.\tClick the dropdown button of ComboBox in form1, then form2 shown.\r\n4.\tClick “X” to close form2.\r\n\r\n **Actual behavior:**\r\nAfter step4, an error dialog pop up: \r\n[Call_stack.txt](https://github.com/dotnet/winforms/files/4935975/Call_stack.txt)\r\n![System_AccessViolationException](https://user-images.githubusercontent.com/45864017/87753381-1044fd00-c835-11ea-957b-45225cf06de7.png)\r\n\r\n**Expected behavior:**\r\nThere is no error dialog pop up. The project can run normally.","Url":"https://github.com/dotnet/winforms/issues/3595","RelatedDescription":"Open issue \"Windows forms ComboBox.DropDownStyle change causes System.AccessViolationException randomly\" (#3595)"},{"Id":"658301909","IsPullRequest":true,"CreatedAt":"2020-07-16T15:41:58","Actor":"mmitche","Number":"3592","RawContent":null,"Title":"[release/5.0-preview8] Enable builds of internal branches","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3592)","Url":"https://github.com/dotnet/winforms/pull/3592","RelatedDescription":"Closed or merged PR \"[release/5.0-preview8] Enable builds of internal branches\" (#3592)"},{"Id":"658301834","IsPullRequest":true,"CreatedAt":"2020-07-16T15:24:20","Actor":"mmitche","Number":"3591","RawContent":null,"Title":"[master] Enable builds of internal branches","State":"open","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3591)","Url":"https://github.com/dotnet/winforms/pull/3591","RelatedDescription":"Open PR \"[master] Enable builds of internal branches\" (#3591)"},{"Id":"657895082","IsPullRequest":false,"CreatedAt":"2020-07-16T06:43:26","Actor":"Jessie-Zhang01","Number":"3590","RawContent":null,"Title":"[Accessibility] Narrator/Inspect hang eventually when the \"ComboBox\" to be expanded contains the same item","State":"open","Body":"* .NET Core Version: \r\n.Net 5.0.100-rc.1.20365.11 from 5.0 master branch\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes, it has a VSO bug: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1157357\r\n\r\n**More Info:**\r\n\r\n1. This issue cannot reproduce when set DropDownStyle property of ComboBox as 'Simple'.\r\n2. This issue can reproduce when set DropDownStyle property of ComboBox as 'DropDown/DropDownList'.\r\n3. This issue also can reproduce on .Net 3.1.\r\n\r\n**Minimal repro:**\r\n\r\n1. Open the attached ‘WindowsFormsApp4’ application in VS, then build and run it.\r\n2. Open Narrator or Inspect, then focus its cursor to the ComboBox control.\r\n3. Expand the ComboBox drop-down list.\r\n[WindowsFormsApp4.zip](https://github.com/dotnet/winforms/files/4929733/WindowsFormsApp4.zip)\r\n\r\n**Expected behavior:**\r\nNarrator or Inspect's cursor can be focus on the ComboBox‘s items and works fine.\r\n\r\n**Actual behavior:**\r\nNarrator/Inspect will hang.\r\n![Issue-1](https://user-images.githubusercontent.com/45864649/87739556-bb908a80-c812-11ea-91a6-72b5b3ef13de.gif)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3590","RelatedDescription":"Open issue \"[Accessibility] Narrator/Inspect hang eventually when the \"ComboBox\" to be expanded contains the same item\" (#3590)"},{"Id":"657796758","IsPullRequest":true,"CreatedAt":"2020-07-16T05:52:56","Actor":"dotnet-maestro[bot]","Number":"3589","RawContent":null,"Title":"[release/5.0-preview7] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 10d330dc-4f8f-4c44-8c66-08d812f956ec\r\n- **Build**: 20200714.11\r\n- **Date Produced**: 7/16/2020 2:09 AM\r\n- **Commit**: 53976d38b1bd6917b8fa4d1dd4f009728ece3adb\r\n- **Branch**: refs/heads/release/5.0-preview7\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20364.6 to 5.0.0-preview.7.20364.11\r\n\r\n[marker]: <> (End:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3589)","Url":"https://github.com/dotnet/winforms/pull/3589","RelatedDescription":"Closed or merged PR \"[release/5.0-preview7] Update dependencies from dotnet/runtime\" (#3589)"},{"Id":"657705686","IsPullRequest":true,"CreatedAt":"2020-07-16T00:57:06","Actor":"dotnet-maestro[bot]","Number":"3588","RawContent":null,"Title":"[release/5.0-preview8] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2c98d757-7e74-42d9-3cc7-08d824643728)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 2c98d757-7e74-42d9-3cc7-08d824643728\r\n- **Build**: 20200714.3\r\n- **Date Produced**: 7/14/2020 9:08 PM\r\n- **Commit**: ff5d4b6c8dbdaeacb6e6159d3f8185118dffd915\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.RemoteExecutor**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n\r\n[marker]: <> (End:2c98d757-7e74-42d9-3cc7-08d824643728)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3588)","Url":"https://github.com/dotnet/winforms/pull/3588","RelatedDescription":"Closed or merged PR \"[release/5.0-preview8] Update dependencies from dotnet/arcade\" (#3588)"},{"Id":"657696701","IsPullRequest":true,"CreatedAt":"2020-07-15T23:30:29","Actor":"dotnet-maestro[bot]","Number":"3587","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200714.3\r\n- **Date Produced**: 7/14/2020 9:08 PM\r\n- **Commit**: ff5d4b6c8dbdaeacb6e6159d3f8185118dffd915\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.RemoteExecutor**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20364.3\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3587)","Url":"https://github.com/dotnet/winforms/pull/3587","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3587)"},{"Id":"657548016","IsPullRequest":true,"CreatedAt":"2020-07-15T19:34:45","Actor":"dotnet-maestro[bot]","Number":"3586","RawContent":null,"Title":"[release/5.0-preview7] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 10d330dc-4f8f-4c44-8c66-08d812f956ec\r\n- **Build**: 20200714.6\r\n- **Date Produced**: 7/15/2020 5:19 PM\r\n- **Commit**: fe9e53e14694e281818945c28ea7468053248fb7\r\n- **Branch**: refs/heads/release/5.0-preview7\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20326.1 to 5.0.0-preview.7.20364.6\r\n\r\n[marker]: <> (End:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3586)","Url":"https://github.com/dotnet/winforms/pull/3586","RelatedDescription":"Closed or merged PR \"[release/5.0-preview7] Update dependencies from dotnet/runtime\" (#3586)"},{"Id":"657494108","IsPullRequest":false,"CreatedAt":"2020-07-15T16:39:30","Actor":"PranavSah","Number":"3585","RawContent":null,"Title":"At times System.Windows.Forms.ToolStripDropDown.Show Method gives StackOverFlowException","State":"open","Body":" .NET Framework : 4.6.2\r\n\r\n**Problem description:**\r\nWhen switching from one window to another using context menus it has come to my notice that most of the times the application crashes due to StackOverFlowException. On debugging the stack is filled with calls of \"System.Windows.Forms.ToolStripDropDown.get_RightToLeft()\". My ToolStripMenuItem is added to the ContextStrip of the form.\r\n\r\n**Minimal repro:**\r\nWhen switching from one window to another using context menus (\"_The click event of the menuitems is linked to Reflection code that opens the other window._\")\r\n\r\n\r\n**Debugging and Analysis of Crash Dump**\r\nAttached crash dump analysis report. Analysis done using WinDbg tool.  To my understanding something goes for a toss in ToolStripDropDown.cs Show(Control control, Point position) method while either setting Location or when calling ShowCore() method.\r\nI have also tried setting Overflow  property of ToolStripMenuItem to  ToolStripItemOverflow.AsNeeded but of no use.\r\n\r\n[CrashDumpAnalysis1.txt](https://github.com/dotnet/winforms/files/4926511/CrashDumpAnalysis1.txt)\r\n[CrashDumpAnalysis2.txt](https://github.com/dotnet/winforms/files/4926512/CrashDumpAnalysis2.txt)\r\n","Url":"https://github.com/dotnet/winforms/issues/3585","RelatedDescription":"Open issue \"At times System.Windows.Forms.ToolStripDropDown.Show Method gives StackOverFlowException\" (#3585)"},{"Id":"657427695","IsPullRequest":false,"CreatedAt":"2020-07-15T15:08:39","Actor":"Tanya-Solyanik","Number":"3584","RawContent":null,"Title":"AccessibleName for data bound ComboBox Items is shown as the type name instead of the item text","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nno\r\nworks correctly in 4.7.2, does not work in 4.8, but will be services in 9C\r\n\r\n**Problem description:**\r\n\r\nAccessibility technology user does not know what items are available in the ComboBox drop down, because all of them have the same type and we display the type name. \r\n\r\n**Expected behavior:**\r\n\r\nAccessible Name matches display name of the drop down item\r\n\r\n**Minimal repro:**\r\n1. Create a new winforms application targeting Core\r\n\t2. Add a class with at least one string property (Name in this case)\r\n\r\n```\r\n\t    public class Person\r\n\t    {\r\n\t        public Person(int id, string name)\r\n\t        {\r\n\t            Id = id;\r\n\t            Name = name;\r\n\t        }\r\n\t\r\n\t        public int Id { get; set; }\r\n\t        public string Name { get; set; }\r\n\t    }\r\n```\r\n\t\r\n3. Add a combobox to the form\r\n4. Create a collection of \"Persons\"( type created in step 2) \r\n5. Set combobox's DataSource property to collection created in step3 and DisplayMember property to the name of the string property in the class from step 2 \r\n\r\n```\r\n\t        private void Form1_Load(object sender, EventArgs e)\r\n\t        {\r\n\t            List<Person> persons = new List<Person>();\r\n\t\r\n\t            persons.Add(new Person(1, \"Name 1\"));\r\n\t            persons.Add(new Person(2, \"Name 2\"));\r\n\t            persons.Add(new Person(3, \"Name 3\"));\r\n\t            persons.Add(new Person(4, \"Name 4\"));\r\n\t            persons.Add(new Person(5, \"Name 5\"));\r\n\t\r\n\t            comboBox1.DataSource = persons;\r\n\t            comboBox1.DisplayMember = \"Name\";\r\n\t       }\r\n```\r\n6. Run this application under the inspect tool\r\n**Result**: type name is used as accessible name for the combobox list items, because a object.ToString is called:\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/87098832-1582c600-c1fd-11ea-93e1-df9b5980ebcf.png)\r\n\r\n**Expected:**\r\nAccessible tree should show the same strings as the drop down shows\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/87098581-7d84dc80-c1fc-11ea-9c63-6a1652576143.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3584","RelatedDescription":"Open issue \"AccessibleName for data bound ComboBox Items is shown as the type name instead of the item text\" (#3584)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-07-21T05:30:55.1928139Z","RunDurationInMilliseconds":766}