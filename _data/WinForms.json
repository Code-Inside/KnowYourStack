{"Data":{"GitHub":{"Issues":[{"Id":"654534649","IsPullRequest":true,"CreatedAt":"2020-07-11T23:14:33","Actor":"gpetrou","Number":"3556","RawContent":null,"Title":"Enable and fix CA1830 warnings","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable and fix CA1830 warnings.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3556)","Url":"https://github.com/dotnet/winforms/pull/3556","RelatedDescription":"Closed or merged PR \"Enable and fix CA1830 warnings\" (#3556)"},{"Id":"655253939","IsPullRequest":true,"CreatedAt":"2020-07-11T23:00:29","Actor":"gpetrou","Number":"3562","RawContent":null,"Title":"Enable and fix CA1200 warnings","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable and fix CA1200 warnings.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3562)","Url":"https://github.com/dotnet/winforms/pull/3562","RelatedDescription":"Closed or merged PR \"Enable and fix CA1200 warnings\" (#3562)"},{"Id":"655250236","IsPullRequest":true,"CreatedAt":"2020-07-11T17:46:06","Actor":"gpetrou","Number":"3561","RawContent":null,"Title":"Enable and fix CA1810 warnings","State":"open","Body":"## Proposed changes\r\n\r\n- Enable and fix CA1810 warnings.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3561)","Url":"https://github.com/dotnet/winforms/pull/3561","RelatedDescription":"Open PR \"Enable and fix CA1810 warnings\" (#3561)"},{"Id":"654862154","IsPullRequest":true,"CreatedAt":"2020-07-10T23:33:17","Actor":"mmitche","Number":"3559","RawContent":null,"Title":"Disable per-build SDL + other validations","State":"closed","Body":"Reduces overall build time. These validations are being run nightly and on every build candidate\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3559)","Url":"https://github.com/dotnet/winforms/pull/3559","RelatedDescription":"Closed or merged PR \"Disable per-build SDL + other validations\" (#3559)"},{"Id":"654988234","IsPullRequest":false,"CreatedAt":"2020-07-10T19:22:38","Actor":"vladimir-krestov","Number":"3560","RawContent":null,"Title":"[Accessibility] There is no ability to set custom Accessible Name, Role, Description to some AccessibleObjects","State":"open","Body":"* Original [Bug 1108206](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1108206)\r\n\r\n* .NET Core Version: **5.0**\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n- A customer can't set a custom Name for the following AccessibleObjects:       \r\n  \r\n1. ToolStrip\r\n2. ToolStripItems\r\n3. StatusStrip\r\n4. StatusStripItems\r\n5. MenuStrip\r\n6. MenuItems\r\n\r\n**Expected behavior:**\r\n- A customer can set the custom values of AccessibleName/Role/Description for any AccessibleObjects\r\n\r\n**Minimal repro:**\r\n- Create a Core 5.0 app\r\n- Add a control from the list above to the form\r\n- Set AccessibleName/Role/Description for it\r\n- Run the app and check the control's AccessibleObject using Inspect\r\n","Url":"https://github.com/dotnet/winforms/issues/3560","RelatedDescription":"Open issue \"[Accessibility] There is no ability to set custom Accessible Name, Role, Description to some AccessibleObjects\" (#3560)"},{"Id":"654340660","IsPullRequest":true,"CreatedAt":"2020-07-10T15:24:28","Actor":"mmitche","Number":"3551","RawContent":null,"Title":"Add sdl config","State":"closed","Body":"This enables nightly SDL validation to run, rather than running during the build\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3551)","Url":"https://github.com/dotnet/winforms/pull/3551","RelatedDescription":"Closed or merged PR \"Add sdl config\" (#3551)"},{"Id":"654595751","IsPullRequest":false,"CreatedAt":"2020-07-10T08:08:22","Actor":"MagicAndre1981","Number":"3558","RawContent":null,"Title":"InvokeRequired sometimes not working correctly","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version:  3.1.5\r\n\r\n```\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   3.1.301\r\n Commit:    7feb845744\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.301\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.5\r\n  Commit:  65cd789777\r\n\r\n.NET Core SDKs installed:\r\n  2.1.807 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.204 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.207 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.402 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\n\r\nNo, the code works for years without any issues\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\nI have the issue that [InvokeRequired](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.control.invokerequired?view=netcore-3.1) returns false where it should return true. This causes that directly updating of text fails with System.InvalidOperationException: The calling thread cannot access this object because a different thread owns it.\r\n\r\n![image](https://user-images.githubusercontent.com/8274816/87131101-34806700-c294-11ea-867b-f9276fa68f7d.png)\r\n\r\n**Expected behavior:**\r\n\r\nInvokeRequired works fine\r\n\r\n**Minimal repro:**\r\n\r\nI tried to create a repro and here it always works and I have no idea why. For the problematic application, this is a .net framework 4.8 WinForms application. I followed the [guide for migration](https://docs.microsoft.com/en-us/dotnet/core/porting/winforms), converted the csproj to SDK style, set target to netcoreapp3.1, added UseWindowsForms.\r\n\r\n**Workaround**\r\n\r\nwhen I set breakpoint at first line and wait a bit before I hit F5 to continue, the call works fine.","Url":"https://github.com/dotnet/winforms/issues/3558","RelatedDescription":"Open issue \"InvokeRequired sometimes not working correctly\" (#3558)"},{"Id":"654536403","IsPullRequest":true,"CreatedAt":"2020-07-10T06:08:06","Actor":"gpetrou","Number":"3557","RawContent":null,"Title":"Enable and fix CA1835 warnings","State":"open","Body":"## Proposed changes\r\n\r\n- Enable and fix CA1835 warnings.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3557)","Url":"https://github.com/dotnet/winforms/pull/3557","RelatedDescription":"Open PR \"Enable and fix CA1835 warnings\" (#3557)"},{"Id":"654533537","IsPullRequest":true,"CreatedAt":"2020-07-10T06:00:40","Actor":"RussKie","Number":"3555","RawContent":null,"Title":"Test traits","State":"open","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3555)","Url":"https://github.com/dotnet/winforms/pull/3555","RelatedDescription":"Open PR \"Test traits\" (#3555)"},{"Id":"654532394","IsPullRequest":true,"CreatedAt":"2020-07-10T05:57:40","Actor":"gpetrou","Number":"3554","RawContent":null,"Title":"Enable and fix CA1507 warnings","State":"open","Body":"## Proposed changes\r\n\r\n- Enable and fix CA1507 warnings in non-test projects.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3554)","Url":"https://github.com/dotnet/winforms/pull/3554","RelatedDescription":"Open PR \"Enable and fix CA1507 warnings\" (#3554)"},{"Id":"654510153","IsPullRequest":true,"CreatedAt":"2020-07-10T04:58:13","Actor":"JeremyKuhne","Number":"3553","RawContent":null,"Title":"Remove WindowsGraphics and DeviceContext","State":"open","Body":"This change removes all of the misc\\GDI classes and replaces them with new scopes and isolated caches for Font-to-HFONT and \"measurement\" screen DCs.\r\n\r\nThis reduces significant allocations and complexity and improves performance with the related code paths. It also facilitates continued unravelling of HDC Graphics wrapping.\r\n\r\nThis is the first draft PR. It works and passes tests, with the exception of Maui for some reason which isn't clear. I'm going to be doing more scrubbing, writing tests, and measuring performance. In the meantime I welcome feedback.\r\n\r\nCode that lived in `WindowsFont` moved mostly to `TextExtensions` and works directly on native GDI handles. The only known difference is that I currently don't cache the font height, but I'm planning to reintroduce that after I walk through the call chains.\r\n\r\ncc: @Tanya-Solyanik, @KlausLoeffelmann, @RussKie \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3553)","Url":"https://github.com/dotnet/winforms/pull/3553","RelatedDescription":"Open PR \"Remove WindowsGraphics and DeviceContext\" (#3553)"},{"Id":"652604810","IsPullRequest":true,"CreatedAt":"2020-07-10T04:55:08","Actor":"gpetrou","Number":"3541","RawContent":null,"Title":"Update FxCopAnalyzers","State":"closed","Body":"## Proposed changes\r\n\r\n- Update FxCopAnalyzers.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3541)","Url":"https://github.com/dotnet/winforms/pull/3541","RelatedDescription":"Closed or merged PR \"Update FxCopAnalyzers\" (#3541)"},{"Id":"654505269","IsPullRequest":true,"CreatedAt":"2020-07-10T04:43:03","Actor":"RussKie","Number":"3552","RawContent":null,"Title":"Collect memory dumps for hung tests","State":"open","Body":"Resolves #3298\r\n\r\n\r\n## Proposed changes\r\n\r\n- Spin up a background thread that signals at 15 minute mark, and looks for a dotnet.exe process that runs our tests. \r\n- If one is or more processes are found, collect their heap dumps and kill those processes.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3552)","Url":"https://github.com/dotnet/winforms/pull/3552","RelatedDescription":"Open PR \"Collect memory dumps for hung tests\" (#3552)"},{"Id":"654240456","IsPullRequest":true,"CreatedAt":"2020-07-09T17:48:56","Actor":"Tanya-Solyanik","Number":"3550","RawContent":null,"Title":"Fixes #3549","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3549 \r\n\r\n\r\n## Proposed changes\r\n\r\nuse method that accesses DisplayMember property instead of ToString\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\nsee the issue\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\nmanual\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3550)","Url":"https://github.com/dotnet/winforms/pull/3550","RelatedDescription":"Open PR \"Fixes #3549\" (#3550)"},{"Id":"654228677","IsPullRequest":false,"CreatedAt":"2020-07-09T17:28:20","Actor":"Tanya-Solyanik","Number":"3549","RawContent":null,"Title":"ComboBox.DisplayMember property should be used as an accessible name for combobox items","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET 5.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nworks correctly in 4.7.2, does not work in 4.8\r\n\r\n**Problem description:**\r\nAT user does not know what items are available for selection \r\n\r\n**Expected behavior:**\r\nDisplayMember property is used to access name\r\n\r\n**Minimal repro:**\r\n\t1. Create a new winforms application targeting Core\r\n\t2. Add a class with at least one string property (Name in this case)\r\n\r\n```\r\n\t    public class Person\r\n\t    {\r\n\t        public Person(int id, string name)\r\n\t        {\r\n\t            Id = id;\r\n\t            Name = name;\r\n\t        }\r\n\t\r\n\t        public int Id { get; set; }\r\n\t        public string Name { get; set; }\r\n\t    }\r\n```\r\n\t\r\n3. Add a combobox to the form\r\n4. Create a collection of \"Persons\"( type created in step 2) \r\n5. Set combobox's DataSource property to collection created in step3 and DisplayMember property to the name of the string property in the class from step 2 \r\n\r\n```\r\n\t        private void Form1_Load(object sender, EventArgs e)\r\n\t        {\r\n\t            List<Person> persons = new List<Person>();\r\n\t\r\n\t            persons.Add(new Person(1, \"Name 1\"));\r\n\t            persons.Add(new Person(2, \"Name 2\"));\r\n\t            persons.Add(new Person(3, \"Name 3\"));\r\n\t            persons.Add(new Person(4, \"Name 4\"));\r\n\t            persons.Add(new Person(5, \"Name 5\"));\r\n\t\r\n\t            comboBox1.DataSource = persons;\r\n\t            comboBox1.DisplayMember = \"Name\";\r\n\t       }\r\n```\r\n6. Run this application under the inspect tool\r\n**Result**: type name is used as accessible name for the combobox list items, because a object.ToString is called:\r\n![image](https://user-images.githubusercontent.com/15823268/87098832-1582c600-c1fd-11ea-93e1-df9b5980ebcf.png)\r\n\r\n\r\nExpected:\r\nAccessible tree should show the same strings as the drop down shows\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/87098581-7d84dc80-c1fc-11ea-9c63-6a1652576143.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/3549","RelatedDescription":"Open issue \"ComboBox.DisplayMember property should be used as an accessible name for combobox items\" (#3549)"},{"Id":"654008921","IsPullRequest":true,"CreatedAt":"2020-07-09T12:48:13","Actor":"dotnet-maestro[bot]","Number":"3548","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200708.9\r\n- **Date Produced**: 7/9/2020 6:32 AM\r\n- **Commit**: 255eea008147245df48aaa1fae60eb92519f1dc3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.CodeDom**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.DirectoryServices**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.Drawing.Common**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.Security.Permissions**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.IO.Packaging**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.8.20357.14 to 5.0.0-preview.8.20358.9\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3548)","Url":"https://github.com/dotnet/winforms/pull/3548","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3548)"},{"Id":"653833973","IsPullRequest":false,"CreatedAt":"2020-07-09T07:33:18","Actor":"TempeBrennan","Number":"3547","RawContent":null,"Title":"In windows 2004, IME in DataGridView has some problem","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n Version: 5.0.0-preview.2.20160.6\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nuse this code to create a DataGridView\r\n```\r\n            var dataGridView1 = new DataGridView();\r\n            dataGridView1.Width = 500;\r\n            dataGridView1.Columns.Add(new DataGridViewTextBoxColumn());\r\n            dataGridView1.Columns.Add(new DataGridViewTextBoxColumn());\r\n            dataGridView1.Columns.Add(new DataGridViewTextBoxColumn());\r\n            this.Controls.Add(dataGridView1);\r\n```\r\n\r\n1. double click one cell, use jp hiragaga and press k and then press i\r\ncandidate show like this:\r\n![image](https://user-images.githubusercontent.com/51563666/87009646-0baa9400-c1f8-11ea-8c14-56443ce640ad.png)\r\n2. click other cell, not double click, press k and i directly.\r\ncandidate change like this:\r\n![image](https://user-images.githubusercontent.com/51563666/87009780-3d235f80-c1f8-11ea-8673-0794375b9e1c.png)\r\n\r\nI can confirm this issue is fine before windows update\r\n\r\nversion:\r\nos need windows 2004\r\n\r\n**Expected behavior:**\r\nboth two case show same candidate\r\n\r\n**Minimal repro:**\r\nboth two case show different candidate\r\n\r\nCould MS told us this is new IME startegy in DataGridView or will fix it in the next version?","Url":"https://github.com/dotnet/winforms/issues/3547","RelatedDescription":"Open issue \"In windows 2004, IME in DataGridView has some problem\" (#3547)"},{"Id":"652956261","IsPullRequest":true,"CreatedAt":"2020-07-08T21:37:56","Actor":"JeremyKuhne","Number":"3542","RawContent":null,"Title":"Remove more WindowsGraphics","State":"closed","Body":"- Cut back WindowsGraphics to font related usages\r\n- Merge in WindowsGraphicsWrapper\r\n- Make scopes readonly\r\n\r\nNext step is to work on a new font cache\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3542)","Url":"https://github.com/dotnet/winforms/pull/3542","RelatedDescription":"Closed or merged PR \"Remove more WindowsGraphics\" (#3542)"},{"Id":"653602972","IsPullRequest":false,"CreatedAt":"2020-07-08T21:16:59","Actor":"JeremyKuhne","Number":"3546","RawContent":null,"Title":"Need to clean up references to VS code names","State":"open","Body":"We should replace the references to VS and VS code names to be .NET Framework release versions:\r\n\r\nVS | Code name | .NET Release (should use this)\r\n-|-|-\r\nVS .NET 2002 | Rainier | .NET Framework 1.0\r\nVS .NET 2003 | Everett | .NET Framework 1.1\r\nVS 2005 | Whidbey | .NET Framework 2.0\r\nVS 2008 | Orcas | .NET Framework 3.5\r\nVS 2010 | Dev10 | .NET Framework 4.0\r\n\r\nFor the record, the 2.0 (Whidbey) release was the last one that supported Windows 9x.","Url":"https://github.com/dotnet/winforms/issues/3546","RelatedDescription":"Open issue \"Need to clean up references to VS code names\" (#3546)"},{"Id":"653244131","IsPullRequest":true,"CreatedAt":"2020-07-08T12:28:00","Actor":"dotnet-maestro[bot]","Number":"3545","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200707.14\r\n- **Date Produced**: 7/8/2020 9:58 AM\r\n- **Commit**: 898832566661830677344ea90b1951ba8cca94c5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.CodeDom**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.DirectoryServices**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.Drawing.Common**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.Security.Permissions**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.IO.Packaging**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.8.20328.6 to 5.0.0-preview.8.20357.14\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3545)","Url":"https://github.com/dotnet/winforms/pull/3545","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3545)"},{"Id":"653024471","IsPullRequest":true,"CreatedAt":"2020-07-08T08:10:30","Actor":"RussKie","Number":"3544","RawContent":null,"Title":"Test screenshots","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3544)","Url":"https://github.com/dotnet/winforms/pull/3544","RelatedDescription":"Closed or merged PR \"Test screenshots\" (#3544)"},{"Id":"652972327","IsPullRequest":true,"CreatedAt":"2020-07-08T07:34:24","Actor":"RussKie","Number":"3543","RawContent":null,"Title":"Replace UTF7 with UTF8","State":"closed","Body":"Address https://github.com/dotnet/runtime/issues/32284\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3543)","Url":"https://github.com/dotnet/winforms/pull/3543","RelatedDescription":"Closed or merged PR \"Replace UTF7 with UTF8\" (#3543)"},{"Id":"651855391","IsPullRequest":true,"CreatedAt":"2020-07-08T01:22:15","Actor":"JeremyKuhne","Number":"3538","RawContent":null,"Title":"Add tests for font measurement","State":"closed","Body":"Move font quality method to extensions.\r\nAdd basic text measurement related tests.\r\n\r\nPut the tests in a general file as the intent is to refactor these methods (e.g. they won't stay where they are).\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3538)","Url":"https://github.com/dotnet/winforms/pull/3538","RelatedDescription":"Closed or merged PR \"Add tests for font measurement\" (#3538)"},{"Id":"651514026","IsPullRequest":true,"CreatedAt":"2020-07-08T01:03:24","Actor":"RussKie","Number":"3537","RawContent":null,"Title":"Add TaskDialog accessibility sample","State":"closed","Body":"\r\n![image](https://user-images.githubusercontent.com/4403806/86595155-a4b09380-bfdb-11ea-853b-9fbef963ab19.png)\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3537)","Url":"https://github.com/dotnet/winforms/pull/3537","RelatedDescription":"Closed or merged PR \"Add TaskDialog accessibility sample\" (#3537)"},{"Id":"652322164","IsPullRequest":false,"CreatedAt":"2020-07-07T13:26:33","Actor":"weltkante","Number":"3540","RawContent":null,"Title":"Control printing test coverage","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nDuring PR review it [was noted](https://github.com/dotnet/winforms/pull/3532#discussion_r449221086) that there is likely little test coverage of printing support of Controls. Printers typically use higher DPI and it was unclear how this represents itself during control rendering. The behavior should be checked and if possible tests should be added.\r\n\r\nThe most common usage of printing functionality I am aware of is used in reporting, where WinForms UserControls can be printed into a report. Sometimes people also want to print out a form filled with values for documentation purposes. Printing is also used to generate PDF or XPS documents to be sent by mail, so is not restricted to physical printers.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n\r\n* add tests for covering `Control.DrawToBitmap`, both for general functionality and also covering DPI behavior. Preliminary testing indicates that `Control.DrawToBitmap` currently ignores image DPI.\r\n\r\n* examine how `WM_PRINT` / `WM_PRINTCLIENT` scenarios are propagating DPI when rendering to a printer HDC (e.g. by calling `PrintDlgEx` to select a printer in a local test environment and use `PrintWindow` to trigger a `WM_PRINT`, or maybe send messages directly).\r\n\r\n  Depending on how WinForms reacts on native messages with a printer HDC it may not be necessary to have dedicated tests, if it also ignores DPI like `DrawToBitmap` does then test coverage through the latter might be enough. If drawing to a printer HDC actually preserves DPI then there should be tests added to provide coverage and prevent regressions. It might be possible to use the XPS printing driver which \"prints\" to a file of zipped xmls.\r\n\r\n**Will this feature affect UI controls?**\r\n\r\nno\r\n","Url":"https://github.com/dotnet/winforms/issues/3540","RelatedDescription":"Open issue \"Control printing test coverage\" (#3540)"},{"Id":"652315660","IsPullRequest":false,"CreatedAt":"2020-07-07T13:18:09","Actor":"weltkante","Number":"3539","RawContent":null,"Title":"Fix Encoding.Default regressions","State":"open","Body":"**.NET Core Version:**\r\nany .NET Core version\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nno, regression against Desktop Framework\r\n\r\n**Problem description:**\r\n\r\n.NET Core changed the behavior of `Encoding.Default` to return UTF8 encoding, while Desktop (from which WinForms is derived) returned the Windows ANSI encoding (which is also used for interop). Any usage of `Encoding.Default` in WinForms is now very likely to be incorrect and must be reviewed and updated.\r\n\r\nSee issue #3032 and PR #3100, #3141, #3210 for the previously done corrections, but [more remain](https://github.com/dotnet/winforms/search?q=%22Encoding.Default%22&unscoped_q=%22Encoding.Default%22) to be fixed.\r\n\r\nThe correct pattern for porting Desktop Framework usage of `Encoding.Default` is now to use `CodePagesEncodingProvider.Instance.GetEncoding(0) ?? Encoding.UTF8` instead, which retrieves the ANSI encoding Windows uses for interop. (The codepage based encoding is null if Windows was configured to be using UTF8 instead of a normal codepage, see discussion in #3032.)\r\n\r\nFor call sites which aren't related to interop there needs to be discussion and case-by-case decision of whether to replace `Encoding.Default` or whether to use UTF8 going forward. They could still be updated to refer to the UTF8 encoding explicitly for clarity.\r\n\r\n**Expected behavior:**\r\nWinForms is updated to respect the changed behavior of `Encoding.Default`\r\n\r\n**Minimal repro:**\r\nn/a (issue raised due to manual inspection of source code, analysis of scenarios should happen as part of the issue, if required)","Url":"https://github.com/dotnet/winforms/issues/3539","RelatedDescription":"Open issue \"Fix Encoding.Default regressions\" (#3539)"},{"Id":"650496896","IsPullRequest":false,"CreatedAt":"2020-07-03T10:14:09","Actor":"weltkante","Number":"3536","RawContent":null,"Title":"Proposal for ComponentManager interop fix","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen WinForms is used in 3rd party hosting applications it may invoke ComponentManager interop to communicate form modality and share the message loop infrastructure with the host application. This is an undocumented COM API which to my knowledge is used by Office, VS and legacy VB6 application hosts. Activation and loading of .NET Core components into such hosts can happen by loading a COM object which happens to be implemented in .NET Core and is using WinForms for some of its UI.\r\n\r\nCurrently this kind of interop is broken and should be crashing (#247) if WinForms is invoked in an external host based on ComponentManager interop. This was an intentional choice for .NET Core 3 to make sure its obvious that this scenario is not supported, but is [candidate](https://github.com/dotnet/winforms/issues/1763#issuecomment-653125277) to be fixed in some way or another for .NET Core 5\r\n\r\nThe whole ComponentManager infrastructure is undocumented and to my knowledge the Office applications are the only ones which are actively using 64bit versions. Visual Studio has only a 32bit version of the API and may have deviated from the Office declarations as far as 64bit compatibility is concerned (VS maintains its own copy of the declarations and doesn't share headers with Office). As far as I know Visual Studio is currently not using the ComponentManager interop in the designer hosting (otherwise it would probably have been running into the same issue #247). Legacy VB applications have not been supported for a long time and so far nobody has complained that a hosting VB6 application cannot load .NET Core 3 code (the inverse scenario, loading VB6 components into a .NET Core application, isn't affected by ComponentManager - it wasn't in Desktop Framework either, never has been using this code path since WinForms doesn't register its implementation for others to call)\r\n\r\nSo I believe Office is the only scenario that can currently be encountered in practice, and its already a very advanced scenario, but that doesn't mean such addins won't achieve high distribution, applications tend to just install their addins if the user doesn't opt out. Since the effects of a broken ComponentManager implementation can be very subtile and the code is hidden deep inside WinForms implementation its highly unlikely that bugs surfacing in Office COM addins will be reported back to WinForms in a timely manner, it can be years breaking many Office users experience without being root caused as caused by WinForms and fixed here. I consider it highly risky to just let refactored and completely untested code \"go live\" this way.\r\n\r\nNote that only WinForms seems to have this ComponentManager integration with hosting applications, as far as I can tell WPF doesn't have a copy of this infrastructure.\r\n\r\nPS: since this has been miscommunicated several times also note that this is about COM addins for Office, not .NET addins, even though .NET is used to implement the addin its an entirely different API model. Office currently only supports .NET addins from Desktop Framework, but that doesn't matter when C# just happens to be the language of choice for implementing a COM addin, as the .NET Core runtime supports the relevant COM interop.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\n\r\nI'm proposing the following options for discussion:\r\n\r\n- (1) remove the ComponentManager integration from WinForms.\r\n\r\n  This is probably the cleanest solution because it removes undocumented untestested code that cannot be maintained properly. It would make WinForms behave like WPF as far as modality of forms is concerned. This also assumes VS will not need ComponentManager integration in the future either.\r\n\r\n  If you feel bad about complete removal a variant of this option is to just remove the activation and leave the code itself in the codebase in case it may need resurrection. This allows it to be included in future refactorings and reduce the work compared to resurrecting from git history. (Can add some basic unit tests to ensure its not removed by accident as unused code.)\r\n\r\n- (2) include ComponentManager integration but making it opt-in from the application host by defining a special GUID in the [service container](https://github.com/dotnet/winforms/blob/18f1c8101085fd60a3eda7c95c796edc86c65820/src/System.Windows.Forms/src/System/Windows/Forms/Application.ThreadContext.cs#L202). WinForms would look for an ComponentManager host but only use it if it also finds the marker GUID in the service container.\r\n\r\n  This would allow VS (or yet unknown hosts Microsoft may have) to opt-in into using the .NET Core ComponentManager implementation but disables it for Office and VB6 because it can't be supported. If Office in the future decides it wants special ComponentManager handling from WinForms it could add the GUID to its service container to opt-in as well, until then WinForms would act like WPF as far as modality is concerned. (This approach can also be versioned by changing the GUID you are looking for in future .NET Core versions.)\r\n\r\n- (3) include ComponentManager integration but make it opt-in from the \"client\" side. The developer would have to call a static Application.EnableComponentManager or similar before calling any WinForms APIs, if he doesn't WinForms wouldn't use Component Manager integration and behave like WPF as far as modality is concerned.\r\n\r\n  I don't like this option much because it puts the burden on the developer to make a decision he isn't qualified to do, the dev calling WinForms knows nothing about the compatibility between WinForms implementation internals and a third party hosting application. Still its better than the next option (4) because it gives the user choice and requires opt-in to run unreliable code if necessary for compatibility purposes.\r\n\r\n- (4) include ComponentManager integration \"as is\" (i.e. refactored but untested) and wait for customers to complain. This is what was proposed several times before, but I absolutely do not like this option because it makes WinForms an unreliable platform, if theres any chance please avoid this option for .NET Core 5\r\n\r\n  It is possible to gain some test coverage by consulting with VS but I do not consider this enough to make the implementation reliable, as there is no reference or documentation of the 64bit interface actually used by Office and getting it wrong is still very risky. Also getting good coverage over testing the edge cases is hard and time for .NET Core 5 is limited.\r\n\r\n- (5) wait for the Office team to tell you how the 64bit COM API is declared and perhaps give guidance how they want it to be tested to make sure WinForms integrates nicely with Office. Honestly I don't have much hope for this happening in time for .NET 5, its been about a year without that kind of feedback, just including it for completeness.\r\n\r\n**Will this feature affect UI controls?**\r\n\r\nno, but it will affect _behavior_ of modal forms and user code calling DoEvents, as well as how the message loop is shared with respect to the host application. The effect can be very subtile which is why its important to me that untested and unreliable code does not remain active by default.\r\n\r\nNormal .NET Core applications are not affected, they never use a hosted ComponentManager integration as the dotnet runtime host doesn't register the necessary interfaces.\r\n\r\n/cc @RussKie @JeremyKuhne @merriemcgaw \r\n","Url":"https://github.com/dotnet/winforms/issues/3536","RelatedDescription":"Open issue \"Proposal for ComponentManager interop fix\" (#3536)"},{"Id":"650147352","IsPullRequest":true,"CreatedAt":"2020-07-02T23:15:25","Actor":"cristianosuzuki77","Number":"3535","RawContent":null,"Title":"LOC CHECKIN | dotnet/winforms master | 20200702","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3535)","Url":"https://github.com/dotnet/winforms/pull/3535","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/winforms master | 20200702\" (#3535)"},{"Id":"649876104","IsPullRequest":true,"CreatedAt":"2020-07-02T12:22:11","Actor":"dotnet-maestro[bot]","Number":"3534","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200630.3\r\n- **Date Produced**: 6/30/2020 7:16 PM\r\n- **Commit**: 243cc92161ad44c2a07464425892daee19121c99\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20330.3\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20330.3\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20330.3\r\n  - **Microsoft.DotNet.RemoteExecutor**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20330.3\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20316.1 to 5.0.0-beta.20330.3\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3534)","Url":"https://github.com/dotnet/winforms/pull/3534","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3534)"},{"Id":"649747211","IsPullRequest":false,"CreatedAt":"2020-07-02T08:38:06","Actor":"tbolon","Number":"3533","RawContent":null,"Title":"Disabled DateTimePicker at Design-Time does not have the correct border color when enabled when running","State":"open","Body":"* .NET Core Version: 3.1.400-preview-015178\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n\r\n**Problem description:**\r\n\r\nWhen using a DateTimePicker which is initialized as `Enabled = false` in the designer, enabling the control later when the app is running does not change the border color, which stays with a \"disabled gray\" color.\r\n\r\n![bug](https://user-images.githubusercontent.com/127185/86336016-8c451f80-bc4f-11ea-8420-ba3c9af0226f.gif)\r\n\r\nNote: if the control is enabled by default, and you disable/enable it, the border is changed correctly.\r\n\r\n**Expected behavior:**\r\n\r\nWhen enabling the control, the border should change to use the standard border color instead of keeping the disabled one.\r\n\r\n**Minimal repro:**\r\n\r\n- Create a new Form\r\n- Drop a `DateTimePicker` control\r\n- Set `Enabled` to `false`\r\n- Add a button which change the `Enabled` state to `true`\r\n- Start the project\r\n- Click the button to enable the control.\r\n\r\n## Edit based on following comments\r\n\r\n**There seems to be a bug in the way the border color of the control is set and drawn by the .net control or the native control.**\r\n\r\n* The border color which will be used for the entire existence of the control seems to be set when the handle is created.\r\n* If the control is in an enabled state, a dark gray color will be used. If it is disabled a light gray color will be used instead.\r\n* Once the handle is created, the border color will never change again, despite changing the Enabled property (or sending WM_ENABLE messages)\r\n* The only way to update the border color of the control is to force the recreation of the handle, which will change the border color according to the control state.\r\n* (Not necessary related: there is a strange extended style WS_EX.CLIENTEDGE set on the control, which seems to be useless and break `UpdateStyles()` calls)","Url":"https://github.com/dotnet/winforms/issues/3533","RelatedDescription":"Open issue \"Disabled DateTimePicker at Design-Time does not have the correct border color when enabled when running\" (#3533)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-07-12T05:30:52.4346876Z","RunDurationInMilliseconds":738}