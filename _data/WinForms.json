{"Data":{"GitHub":{"Issues":[{"Id":"2152335971","IsPullRequest":false,"CreatedAt":"2024-02-24T14:17:20","Actor":"Zintom","Number":"10949","RawContent":null,"Title":"Using vectorised API's to do basic drawing instead of calling out to GDI+.","State":"open","Body":"### Background and motivation\n\nAll calls to draw any kind of graphics, even just clearing a Bitmap to a certain colour, will result in a GDI/GDI+ invocation.\r\n\r\nAnecdotal testing shows that using vectorised API's like AVX/SSE to directly modify the underlying Bitmap data displayed significantly improved performance. I imagine this is due to the GDI libraries being old and not being vectorised themselves.\r\n\r\nFor example; to clear a Bitmap, instead of calling `Graphics.Clear(color)`, you can locate the Bitmap in memory using `LockBits`, create a stack allocated integer containing `color`, and use `Span.Fill(color)`, this won't call out to GDI+, and Span uses vectorised instructions to accelerate the clearing of the pixels.\r\n\r\nCode example:\r\n   ```\r\n    /// <summary>\r\n    ///  Fills the entire drawing surface with the specified color.\r\n    /// </summary>\r\n    public unsafe void Clear(Color color)\r\n    {\r\n        // Store the height so that we don't make two calls to Bitmap.Height, saves 1 P/Invoke.\r\n        int height = bitmap.Height;\r\n\r\n        var bmpData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, height), ImageLockMode.WriteOnly, imageBitmap.PixelFormat);\r\n\r\n        // This is the length of the underlying memory which backs this bitmap.\r\n        int lengthInBytes = bmpData.Stride * height;\r\n\r\n        // Get our color as an integer - There might be a quicker way to do this, although this is already fast using the stack and an 'unsafe' type conversion.\r\n        byte* colorData = stackalloc byte[4] { color.B, color.G, color.R, color.A };\r\n        int colorInt = Unsafe.As<byte, int>(ref *colorData);\r\n\r\n        // Get the backing memory of the Bitmap as a Span<int>.\r\n        Span<int> imgBytes = new Span<int>((void*)bmpData.Scan0, lengthInBytes / sizeof(int));\r\n\r\n        // Use the accelerated Span.Fill function to clear the memory with the requested color.\r\n        imgBytes.Fill(colorInt);\r\n\r\n        // Release the memory.\r\n        bitmap.UnlockBits(bmpData);\r\n    }\r\n```\r\n\r\nThis is just one example of the basic `Clear` functionality, I have also experimented with drawing another bitmap directly into the memory of the source bitmap using AVX/SSE, this drastically improves draw performance (increasing as the number of draw calls increases), you can also choose to draw with transparency on each draw call, rather than dictating transparency support in the PixelFormat.\r\n\r\nIf this kind of proposal has support I am more than willing to provide PRs to add this to Bitmap.cs\n\n### API Proposal\n\n```\r\npublic sealed unsafe class Bitmap : Image, IPointer<GpBitmap>\r\n{\r\n    public unsafe void Clear(Color color);\r\n    public unsafe void Draw(Bitmap otherBitmap, Rectangle bounds, bool blendPixels);\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\nBitmap bitmap = new Bitmap(1000, 1000);\r\nbitmap.Clear(Color.Red);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n### Will this feature affect UI controls?\n\nNo","Url":"https://github.com/dotnet/winforms/issues/10949","RelatedDescription":"Open issue \"Using vectorised API's to do basic drawing instead of calling out to GDI+.\" (#10949)"},{"Id":"2152301804","IsPullRequest":true,"CreatedAt":"2024-02-24T13:01:03","Actor":"dotnet-maestro[bot]","Number":"10948","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20240224.1\r\n- **Date Produced**: February 24, 2024 12:42:55 PM UTC\r\n- **Commit**: f32c428c86b4cc41e88e2e5a750c37dfb354e33a\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.CodeDom**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.ComponentModel.Composition**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Data.Odbc**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Data.OleDb**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.DirectoryServices**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.DirectoryServices.Protocols**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.IO.Hashing**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.IO.Packaging**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.IO.Ports**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Management**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Reflection.Context**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Resources.Extensions**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Runtime.Caching**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Security.Permissions**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.ServiceModel.Syndication**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Speech**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Text.Encoding.CodePages**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Text.Encodings.Web**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Text.Json**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Threading.AccessControl**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **System.Windows.Extensions**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.9.0**: [from 9.0.0-preview.2.24122.9 to 9.0.0-preview.2.24124.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/52c14fb8d0...f32c428c86\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10948)","Url":"https://github.com/dotnet/winforms/pull/10948","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/runtime\" (#10948)"},{"Id":"2151992595","IsPullRequest":false,"CreatedAt":"2024-02-24T00:37:08","Actor":"JeremyKuhne","Number":"10947","RawContent":null,"Title":"API Proposal: Add typed convenience methods to WinForms collections","State":"open","Body":"### Background and motivation\r\n\r\nWinForms \"typed\" collections predate generics. Many of them have not been updated with generic methods and interfaces to allow using things like LINQ, receiving typed collections, and efficient collection expressions.\r\n\r\n### API Proposal\r\n\r\n```diff\r\nnamespace System.Windows.Forms;\r\n\r\n// IList throws on index set, don't want to add IList<T> until we figure out the right way to deal with it\r\n// (we could potentially remove the throws as you can perform the operations with multiple calls to\r\n// existing ControlCollection APIs)\r\n-public class ControlCollection : ArrangedElementCollection, IList, ICloneable\r\n+public class ControlCollection : ArrangedElementCollection, IList, IEnumerable<Control>, ICloneable\r\n{\r\n    public virtual void AddRange(params Control[] controls);\r\n    // Optimized internally to avoid converting to Control[] when we can avoid it.\r\n+   public void AddRange(params ReadOnlySpan<Control> controls);\r\n+   public void AddRange(IEnumerable<Control> controls);\r\n+   IEnumerator<Control> IEnumerable<Control>.GetEnumerator();\r\n}\r\n\r\npublic class ListView\r\n{\r\n-    public class ListViewItemCollection : IList\r\n-    public class ListViewItemCollection : IList, IList<ListViewItem>\r\n    {\r\n+       void IList<ListViewItem>.Insert(int index, ListViewItem item);\r\n+       void ICollection<ListViewItem>.Add(ListViewItem item) => Add(item);\r\n+       public void CopyTo(ListViewItem[] array, int arrayIndex);\r\n+       bool ICollection<ListViewItem>.Remove(ListViewItem item);\r\n+       IEnumerator<ListViewItem> IEnumerable<ListViewItem>.GetEnumerator()\r\n        public void AddRange(params ListViewItem[] items);\r\n+       public void AddRange(params ReadOnlySpan<ListViewItem> items)\r\n+       public void AddRange(IEnumerable<ListViewItem> collection)\r\n    }\r\n}\r\n```\r\n\r\nThere are a number of other collections which we'll bring back for API review, but the general approach would be as follows:\r\n\r\n1. No new virtual methods\r\n2. Add `AddRange` methods of `IEnumerable<T>` and `params ReadOnlySpan<T>`\r\n3. IList -> IList, IList<T> where plausible, at a minimum adding `IEnumerable<T>`\r\n\r\n### API Usage\r\n\r\n```csharp\r\nList<Control> controls = [];\r\ncontrol.Controls.AddRange(controls);\r\ncontrol.Controls.AddRange(control1, control2, control3);\r\n```\r\n\r\n### Will this feature affect UI controls?\r\n\r\nWon't impact design scenarios.","Url":"https://github.com/dotnet/winforms/issues/10947","RelatedDescription":"Open issue \"API Proposal: Add typed convenience methods to WinForms collections\" (#10947)"},{"Id":"2151974531","IsPullRequest":false,"CreatedAt":"2024-02-24T00:05:49","Actor":"JeremyKuhne","Number":"10946","RawContent":null,"Title":"Collection expression overload ambiguity","State":"open","Body":"This issue is to track any instances we come across where [collection expressions](https://learn.microsoft.com/dotnet/csharp/language-reference/operators/collection-expressions) leave users with ambiguous overloads.\r\n\r\nThis is particularly problematic when tools push users to convert things like `ToArray()` to collection expressions and it breaks the code.\r\n\r\nThere is a feature that should hopefully allow us to address existing code where this is a problem: https://github.com/dotnet/csharplang/issues/7706\r\n\r\nKnown issues:\r\n\r\n1. #10924\r\n2. #10945\r\n","Url":"https://github.com/dotnet/winforms/issues/10946","RelatedDescription":"Open issue \"Collection expression overload ambiguity\" (#10946)"},{"Id":"2151974224","IsPullRequest":false,"CreatedAt":"2024-02-24T00:05:20","Actor":"JeremyKuhne","Number":"10945","RawContent":null,"Title":"Collection expressions are ambiguous with all System.Drawing `Point[]` APIs.","State":"open","Body":"`Point` has an explicit conversion to `PointF`. Calling any API that takes `Point[]` results in ambiguity as a result.\r\n\r\n``` c#\r\nGraphics g = Graphics.FromImage(new Bitmap(10, 10));\r\n// CS0121 The call is ambiguous between the following methods or properties: 'Graphics.DrawLines(Pen, ReadOnlySpan<PointF>)' and 'Graphics.DrawLines(Pen, ReadOnlySpan<Point>)'\r\ng.DrawLines(new Pen(Color.Black), [new Point(0, 0), new Point(10, 10)]);\r\n```\r\n\r\nThis particular problem should be fixed by adding `params ReadOnlySpan<>`.","Url":"https://github.com/dotnet/winforms/issues/10945","RelatedDescription":"Open issue \"Collection expressions are ambiguous with all System.Drawing `Point[]` APIs.\" (#10945)"},{"Id":"2151907433","IsPullRequest":true,"CreatedAt":"2024-02-23T22:35:03","Actor":"JeremyKuhne","Number":"10944","RawContent":null,"Title":"Add convenience / perf methods to ListViewItem/ControlCollection","State":"open","Body":"`ListViewItemCollection` doesn't have an `AddRange` that takes an `IEnumerable<ListViewItem>`, which necessitates unnecessary array allocations when adding from a collection.\r\n\r\nIt also doesn't implement a generic `IList<T>` which makes typed usage and LINQ usage difficult. This adds that.\r\n\r\nAlso add `IEnumerable<Control>` to `ControlCollection` to address the LINQ scenario. Control has `IList`, but indexed setting throws. I don't want to add `IList<Control>` until we've had time to evaluate the implications of implicitly doing the public steps with the collection that replicate what those setters should be doing.\r\n\r\nAlso tweak `ArrangedElementCollection` so the static empty collection can't be written to.\r\n\r\nThis doesn't fix the ambiguity of `AddRange([..])` with `ListViewItemCollection`, but it does avoid the need for it in some cases.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10944)","Url":"https://github.com/dotnet/winforms/pull/10944","RelatedDescription":"Open PR \"Add convenience / perf methods to ListViewItem/ControlCollection\" (#10944)"},{"Id":"2151763353","IsPullRequest":true,"CreatedAt":"2024-02-23T20:38:45","Actor":"sbomer","Number":"10943","RawContent":null,"Title":"Fix some trim warnings in DesignerHost","State":"open","Body":"Annotations on these methods should match those on `IReflect`, otherwise this produces warnings in a blank trimmed winforms app. The `DesignerHost` code is unused, but this still produces warnings due to https://github.com/dotnet/runtime/issues/98870. In any case, annotating these methods seems like the right way to annotate this code in `DesignerHost`.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10943)","Url":"https://github.com/dotnet/winforms/pull/10943","RelatedDescription":"Open PR \"Fix some trim warnings in DesignerHost\" (#10943)"},{"Id":"2151639665","IsPullRequest":true,"CreatedAt":"2024-02-23T19:35:55","Actor":"lonitra","Number":"10942","RawContent":null,"Title":"Update Pre-Release Iteration and Resource Management Milestone","State":"closed","Body":"\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10942)","Url":"https://github.com/dotnet/winforms/pull/10942","RelatedDescription":"Closed or merged PR \"Update Pre-Release Iteration and Resource Management Milestone\" (#10942)"},{"Id":"2151568071","IsPullRequest":true,"CreatedAt":"2024-02-23T18:43:31","Actor":"lonitra","Number":"10941","RawContent":null,"Title":"Publish APIs for .NET 9 Preview 2","State":"closed","Body":"1. Selected all in PublicAPI.Shipped.txt > Edit > Advanced > Sort Lines (1st commit, for ease of review)\r\n2. ran  .\\eng\\ApiCompatibility\\mark-shipped.cmd (no change)\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10941)","Url":"https://github.com/dotnet/winforms/pull/10941","RelatedDescription":"Closed or merged PR \"Publish APIs for .NET 9 Preview 2\" (#10941)"},{"Id":"2151043655","IsPullRequest":true,"CreatedAt":"2024-02-23T13:36:22","Actor":"dotnet-maestro[bot]","Number":"10940","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20240222.9\r\n- **Date Produced**: February 23, 2024 7:13:38 AM UTC\r\n- **Commit**: 52c14fb8d01ddd293a0710642aa1e7ef3a438687\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.CodeDom**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.ComponentModel.Composition**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Data.Odbc**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Data.OleDb**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Diagnostics.EventLog**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.DirectoryServices**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.DirectoryServices.Protocols**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.IO.Hashing**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.IO.Packaging**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.IO.Ports**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Management**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Reflection.Context**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Resources.Extensions**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Runtime.Caching**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Security.Cryptography.Xml**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Security.Permissions**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.ServiceModel.Syndication**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Speech**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Text.Encoding.CodePages**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Text.Encodings.Web**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Text.Json**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Threading.AccessControl**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **System.Windows.Extensions**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.9.0**: [from 9.0.0-preview.2.24122.1 to 9.0.0-preview.2.24122.9][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/d908f00305...52c14fb8d0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10940)","Url":"https://github.com/dotnet/winforms/pull/10940","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#10940)"},{"Id":"2150787739","IsPullRequest":true,"CreatedAt":"2024-02-23T10:21:15","Actor":"LeafShi1","Number":"10939","RawContent":null,"Title":"Replace MD5 with SHA256","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #10930 \r\n\r\nRemove use of MD5 in tests and switch them to SHA256 and remove related suppression information\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10939)","Url":"https://github.com/dotnet/winforms/pull/10939","RelatedDescription":"Open PR \"Replace MD5 with SHA256\" (#10939)"},{"Id":"2150473039","IsPullRequest":true,"CreatedAt":"2024-02-23T08:46:48","Actor":"SimonZhao888","Number":"10937","RawContent":null,"Title":"Fix ComponentModel.Design.serialization not support .Net8","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #10425\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10937)","Url":"https://github.com/dotnet/winforms/pull/10937","RelatedDescription":"Closed or merged PR \"Fix ComponentModel.Design.serialization not support .Net8\" (#10937)"},{"Id":"2150486701","IsPullRequest":false,"CreatedAt":"2024-02-23T07:06:45","Actor":"Varorbc","Number":"10938","RawContent":null,"Title":"why are there unsupported target framework options?","State":"open","Body":"https://github.com/dotnet/winforms/blob/b4c9c031e5451208ac12ad2b21ed3196a5c100e6/pkg/Microsoft.Dotnet.WinForms.ProjectTemplates/content/WinFormsApplication-CSharp/.template.config/template.json#L32-L41","Url":"https://github.com/dotnet/winforms/issues/10938","RelatedDescription":"Open issue \"why are there unsupported target framework options?\" (#10938)"},{"Id":"2145944115","IsPullRequest":true,"CreatedAt":"2024-02-23T02:29:22","Actor":"LeafShi1","Number":"10922","RawContent":null,"Title":"Suppress codeQL warnings in tests \"BitmapTests\" and \"ImageListTests\"","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nRelated #10871\r\n\r\nSuppress codeQL warnings in BitmapTests and ImageListTests \r\n\r\n## Related bug:\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/1666874/?view=edit\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/1775936/?view=edit\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10922)","Url":"https://github.com/dotnet/winforms/pull/10922","RelatedDescription":"Closed or merged PR \"Suppress codeQL warnings in tests \"BitmapTests\" and \"ImageListTests\"\" (#10922)"},{"Id":"2150228229","IsPullRequest":false,"CreatedAt":"2024-02-23T01:38:53","Actor":"elachlan","Number":"10936","RawContent":null,"Title":"Write analyzer to identify component properties not annotated with `[SRCategoryAttribute]`","State":"open","Body":"We should create an analyzer to help identify the missing attributes and then fix them.\r\n\r\nHelps with issue: https://github.com/dotnet/runtime/issues/94365\r\n\r\nRaised in: https://github.com/dotnet/winforms/pull/10728#issuecomment-1960601810","Url":"https://github.com/dotnet/winforms/issues/10936","RelatedDescription":"Open issue \"Write analyzer to identify component properties not annotated with `[SRCategoryAttribute]`\" (#10936)"},{"Id":"2150033007","IsPullRequest":true,"CreatedAt":"2024-02-22T23:03:31","Actor":"lonitra","Number":"10935","RawContent":null,"Title":"Migrate to 1ES Standard Pipeline Template","State":"closed","Body":"Related: https://github.com/dotnet/winforms/issues/10895\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10935)","Url":"https://github.com/dotnet/winforms/pull/10935","RelatedDescription":"Closed or merged PR \"Migrate to 1ES Standard Pipeline Template\" (#10935)"},{"Id":"2148277656","IsPullRequest":false,"CreatedAt":"2024-02-22T19:35:40","Actor":"MelonWang1","Number":"10931","RawContent":null,"Title":"The tablelayoutpanel's cloumn2 and datagridview wasn't deleted when drag the DataGridView control to the TableLayoutPanel control and click \"Remove Last Column\" in the DemoConsole application","State":"closed","Body":"### .NET version\n\n.Net 9.0: Main branch of Winforms repo\n\n### Did it work in .NET Framework?\n\nNot tested/verified\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, the DataGridView control start support from 9.0.\n\n### Issue description\n\nThe tablelayoutpanel's cloumn2 and datagridview wasn't deleted when drag the DataGridView control to the TableLayoutPanel control and click \"Remove Last Column\" in the DemoConsole application.\r\n\r\nhttps://github.com/dotnet/winforms/assets/94418985/57fc58ed-9226-4b29-9255-6e6fd87d5460\r\n\r\n\r\n**Expected result:**\r\nAfter step 5: The tablelayoutpanel's cloumn2 and datagridview was deleted.\r\n\r\nhttps://github.com/dotnet/winforms/assets/94418985/012b6e03-129d-4767-8e21-7b09daa708b4\r\n\r\n\n\n### Steps to reproduce\n\n1. Run test sample: [DemoConsole](https://github.com/dotnet/winforms/tree/main/src/System.Windows.Forms/tests/IntegrationTests/DesignSurface/DemoConsole) in Winforms repo\r\n2. Switch to \"TabControl and TableLayoutPanel\" tabpage\r\n3. Drag the DataGridView control to the second row and column of the TableLayoutPanel control\r\n4. Select TableLayoutPanel control \r\n5. Click \"Remove Last Column\" in smarttag or property commands window(An warning popup \"Designer is not initialized\")\r\n6. Click \"Remove Last Column\" again(An warning popup \"Designer is not initialized\" and DataGridView's cloumn1 was deleted)\r\n7. Select another control and then select TableLayoutPanel control(TableLayoutPanel's row1 was deleted )","Url":"https://github.com/dotnet/winforms/issues/10931","RelatedDescription":"Closed issue \"The tablelayoutpanel's cloumn2 and datagridview wasn't deleted when drag the DataGridView control to the TableLayoutPanel control and click \"Remove Last Column\" in the DemoConsole application\" (#10931)"},{"Id":"2149710793","IsPullRequest":true,"CreatedAt":"2024-02-22T18:37:40","Actor":"Tanya-Solyanik","Number":"10934","RawContent":null,"Title":"Intermittent exception when creating a ListViewGroupAccessibleObject","State":"open","Body":"This fix is based on this call stack:\r\nSystem.InvalidOperationException: ListView\r\n\r\n   at System.Windows.Forms.ListViewGroup.ListViewGroupAccessibleObject..ctor(ListViewGroup owningGroup, Boolean owningGroupIsDefault)\r\n   at System.Windows.Forms.ListViewGroup.get_AccessibilityObject()\r\n   at System.Windows.Forms.ListView.OnGotFocus(EventArgs e)\r\n\r\nThis is a follow up on https://github.com/dotnet/winforms/pull/10910#issuecomment-1958261561\r\nRelated to https://github.com/dotnet/winforms/issues/4019\r\n\r\nDraft because I'll do more manual testing.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10934)","Url":"https://github.com/dotnet/winforms/pull/10934","RelatedDescription":"Open PR \"Intermittent exception when creating a ListViewGroupAccessibleObject\" (#10934)"},{"Id":"2145913106","IsPullRequest":true,"CreatedAt":"2024-02-22T17:36:33","Actor":"Zheng-Li01","Number":"10921","RawContent":null,"Title":"Add code coverage for RichTextBox","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\nrelated https://github.com/dotnet/winforms/issues/10453\r\n\r\n## Proposed changes\r\n\r\n- Add unit tests for RichTextBox to test its GetCharIndexFromPosition() method\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- None\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit tests\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10921)","Url":"https://github.com/dotnet/winforms/pull/10921","RelatedDescription":"Closed or merged PR \"Add code coverage for RichTextBox\" (#10921)"},{"Id":"2147963796","IsPullRequest":true,"CreatedAt":"2024-02-22T17:31:06","Actor":"JeremyKuhne","Number":"10929","RawContent":null,"Title":"Add span overloads to Graphics","State":"closed","Body":"This adds new span APIs to Graphics and adds params where applicable.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10929)","Url":"https://github.com/dotnet/winforms/pull/10929","RelatedDescription":"Closed or merged PR \"Add span overloads to Graphics\" (#10929)"},{"Id":"2149517848","IsPullRequest":true,"CreatedAt":"2024-02-22T17:01:17","Actor":"ricardobossan","Number":"10933","RawContent":null,"Title":"Supress remaining CodeQL warning on tests","State":"open","Body":"Fixes #10871\r\n\r\n## Proposed changes\r\n\r\n- Adds comments based on PR [9431][pr_9431], in order to supress warnings unecessary on tests.\r\n\r\n[pr_9431]: https://github.com/dotnet/winforms/pull/9431/files\r\n\r\n## Customer Impact\r\n\r\n- None\r\n\r\n## Regression?\r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n## Test environment(s)\r\n\r\n- 9.0.100-alpha.1.23618.3\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10933)","Url":"https://github.com/dotnet/winforms/pull/10933","RelatedDescription":"Open PR \"Supress remaining CodeQL warning on tests\" (#10933)"},{"Id":"2149027833","IsPullRequest":true,"CreatedAt":"2024-02-22T13:36:27","Actor":"dotnet-maestro[bot]","Number":"10932","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20240222.1\r\n- **Date Produced**: February 22, 2024 12:33:43 PM UTC\r\n- **Commit**: d908f00305588dcf577cd5f9c99ff0464000efdc\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.CodeDom**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.ComponentModel.Composition**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Data.Odbc**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Data.OleDb**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.DirectoryServices**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.DirectoryServices.Protocols**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.IO.Hashing**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.IO.Packaging**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.IO.Ports**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Management**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Reflection.Context**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Resources.Extensions**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Runtime.Caching**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Security.Permissions**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.ServiceModel.Syndication**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Speech**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Text.Encoding.CodePages**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Text.Encodings.Web**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Text.Json**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Threading.AccessControl**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **System.Windows.Extensions**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.9.0**: [from 9.0.0-preview.2.24120.11 to 9.0.0-preview.2.24122.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/1b1d26ac74...d908f00305\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10932)","Url":"https://github.com/dotnet/winforms/pull/10932","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#10932)"},{"Id":"2148091612","IsPullRequest":false,"CreatedAt":"2024-02-22T03:08:42","Actor":"LeafShi1","Number":"10930","RawContent":null,"Title":"Remove use of MD5 in tests and switch them to SHA256","State":"open","Body":"There are 2 test files using MD5 that need to switch to use SHA256:\r\n\r\n1. System.Drawing.Tests.DrawingTest\r\n2. MonoTests.System.Drawing.BitmapTests","Url":"https://github.com/dotnet/winforms/issues/10930","RelatedDescription":"Open issue \"Remove use of MD5 in tests and switch them to SHA256\" (#10930)"},{"Id":"2146286549","IsPullRequest":true,"CreatedAt":"2024-02-22T00:30:01","Actor":"MilenaHristova","Number":"10923","RawContent":null,"Title":"Set ProducesDotNetReleaseShippingAssets property in Publishing.props","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n## Proposed changes\r\n\r\nAdd a boolean property named `ProducesDotNetReleaseShippingAssets` in Publishing.props for repos that produce .NET shipping packages (packages that we ship with the release infra)\r\nBased on this property we will select which packages to ship as part of .NET on release day.\r\n\r\n**This is a infrastructure only change.** It will add extra metadata to the MergedManifest.xml produced during CI build.\r\n\r\nIssue: https://github.com/dotnet/release/issues/822\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nNo\r\n\r\n## Regression? \r\n\r\nNo\r\n\r\n## Risk\r\n\r\nNo\r\n\r\n<!-- end TELL-MODE -->\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10923)","Url":"https://github.com/dotnet/winforms/pull/10923","RelatedDescription":"Closed or merged PR \"Set ProducesDotNetReleaseShippingAssets property in Publishing.props\" (#10923)"},{"Id":"2145889401","IsPullRequest":false,"CreatedAt":"2024-02-22T00:04:00","Actor":"Olina-Zhang","Number":"10920","RawContent":null,"Title":"The DialogResult of PrintDialog is not correct when setting its UseEXDialog is false and clicking Cancel for dialog","State":"closed","Body":"### .NET version\n\n.NET 9.0 SDK build: 9.0.100-preview.2.24116.21\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nYes, cannot repro previous version: .NET 8.0 SDK build\n\n### Issue description\n\nWhen setting PrintDialog's UseEXDialog is false and clicking Cancel button for this dialog, the value of DialogResult is OK, not Cancel.\r\n\r\n.NET 9.0 Result:\r\n\r\nhttps://github.com/dotnet/winforms/assets/26474449/106af37e-b263-4c70-9970-e216ed183977\r\n\r\n\r\n.Net 8.0 Result:\r\n\r\nhttps://github.com/dotnet/winforms/assets/26474449/6d69aa7f-b0f1-439b-ae0c-95fbaf136720\r\n\r\n\n\n### Steps to reproduce\n\n1. Create a Winforms application with a button, textBox and a PrintDialog\r\n2. Double-click button and add following code:\r\n ```\r\nprivate void button1_Click(object sender, EventArgs e)\r\n {\r\n     DialogResult result;\r\n\r\n     printDialog1.UseEXDialog = false;\r\n     result = printDialog1.ShowDialog();\r\n     \r\n     textBox1.Text = result.ToString();  \r\n }\r\n```\r\nor use this sample application: \r\n[PrintDialogSample.zip](https://github.com/dotnet/winforms/files/14354573/PrintDialogSample.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/10920","RelatedDescription":"Closed issue \"The DialogResult of PrintDialog is not correct when setting its UseEXDialog is false and clicking Cancel for dialog\" (#10920)"},{"Id":"2147863612","IsPullRequest":true,"CreatedAt":"2024-02-22T00:03:59","Actor":"elachlan","Number":"10928","RawContent":null,"Title":"Fix `PrintDialog` to return `DialogResult.Cancel` when cancelled or closed","State":"closed","Body":"Fixes #10920\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10928)","Url":"https://github.com/dotnet/winforms/pull/10928","RelatedDescription":"Closed or merged PR \"Fix `PrintDialog` to return `DialogResult.Cancel` when cancelled or closed\" (#10928)"},{"Id":"2147531565","IsPullRequest":true,"CreatedAt":"2024-02-21T22:36:30","Actor":"JeremyKuhne","Number":"10926","RawContent":null,"Title":"Update APIs for API review","State":"closed","Body":"Update RoundedRectangle APIs, ColorMap APIs and PrinterSettings.StringCollection per API review.\r\n\r\n#10763 (partial)\r\nFixes #10795\r\nFixes #9001\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10926)","Url":"https://github.com/dotnet/winforms/pull/10926","RelatedDescription":"Closed or merged PR \"Update APIs for API review\" (#10926)"},{"Id":"2147562072","IsPullRequest":true,"CreatedAt":"2024-02-21T19:52:14","Actor":"weltkante","Number":"10927","RawContent":null,"Title":"Make AxHost work without classic COM interop.","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #10583\r\n\r\n## Proposed changes\r\n\r\n- Adjust COM interop in WinForms to have AxHost usable together with classic COM interop disabled (`<BuiltInComInteropSupport>false</BuiltInComInteropSupport>`), which is a requirement for AOT.\r\n\r\n## Customer Impact\r\n\r\n- Allows using ActiveX controls in AOT builds.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- I may have gotten some of the interop wrong, the PR requires review\r\n- I have no unit test coverage. Test coverage can be added but requires #10754 to have a simple control. Since it has to be handwritten and cannot be generated yet it can't be one of the more complex Windows-provided ActiveX controls.\r\n\r\n### Before\r\n\r\n- Application fails with exceptions if an ActiveX control is used while having configured  `<BuiltInComInteropSupport>false</BuiltInComInteropSupport>` in the project file.\r\n\r\n### After\r\n\r\n- Application can support a simple ActiveX while having configured  `<BuiltInComInteropSupport>false</BuiltInComInteropSupport>` in the project file.\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- so far only manual testing in the scratch project, not part of the PR since it depends on the ActiveX control of #10754 which is part of a separate PR\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- 9.0.0-preview.2.24116.2\r\n- `<BuiltInComInteropSupport>false</BuiltInComInteropSupport>` in the project file\r\n- I've also used `[assembly: DisableRuntimeMarshalling]` in my test, in case its relevant\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10927)","Url":"https://github.com/dotnet/winforms/pull/10927","RelatedDescription":"Open PR \"Make AxHost work without classic COM interop.\" (#10927)"},{"Id":"2146705383","IsPullRequest":true,"CreatedAt":"2024-02-21T19:50:38","Actor":"dotnet-maestro[bot]","Number":"10925","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20240220.11\r\n- **Date Produced**: February 21, 2024 1:04:10 AM UTC\r\n- **Commit**: 1b1d26ac74e374309fb101382026ba0480d3821d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.CodeDom**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.ComponentModel.Composition**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.ComponentModel.Composition.Registration**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Data.Odbc**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Data.OleDb**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Diagnostics.EventLog**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.DirectoryServices**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.DirectoryServices.AccountManagement**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.DirectoryServices.Protocols**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.IO.Hashing**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.IO.Packaging**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.IO.Ports**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Management**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Reflection.Context**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Resources.Extensions**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Runtime.Caching**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Security.Cryptography.Xml**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Security.Permissions**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.ServiceModel.Syndication**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.ServiceProcess.ServiceController**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Speech**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Text.Encoding.CodePages**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Text.Encodings.Web**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Text.Json**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Threading.AccessControl**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **System.Windows.Extensions**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.9.0**: [from 9.0.0-preview.2.24120.1 to 9.0.0-preview.2.24120.11][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/9dc6ea62a4...1b1d26ac74\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/winforms/pull/10925)","Url":"https://github.com/dotnet/winforms/pull/10925","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#10925)"},{"Id":"2146597022","IsPullRequest":false,"CreatedAt":"2024-02-21T12:09:01","Actor":"AraHaan","Number":"10924","RawContent":null,"Title":"Add version of ListViewItemCollection.AddRange() which accepts IList.","State":"open","Body":"### Background and motivation\n\nCurrently when I call ``ToArray()`` on an ``List<ListViewItem>`` to then add the items in bulk in this way:\r\n\r\n```cs\r\nvar sourceEntries = new List<ListViewItem>();\r\nArray.ForEach(\r\n    SettingsFile.SettingsJson.Sources,\r\n    (x) => sourceEntries.Add(\r\n        new ListViewItem(\r\n            new string[]\r\n            {\r\n                x,\r\n            },\r\n            -1)));\r\nthis.ListView2.Items.AddRange(sourceEntries.ToArray());\r\n```\r\nThis then generates a warning for the usage of ``ToArray()`` saying the inititialization can be simplified to:\r\n\r\n```cs\r\nthis.ListView2.Items.AddRange([.. sourceEntries]);\r\n```\r\nWhich compiles in the IDE, however when doing command line compiles via ``dotnet build -c Release`` this results in:\r\n```\r\nerror CS0121: The call is ambiguous between the following methods or properties: 'ListView.ListViewItemCollection.AddRange(ListViewItem[])' and 'ListView.ListViewItemCollection.AddRange(ListView.ListViewItemCollection)'\r\n```\r\n\r\nAs such a better option would be to add a version of ``AddRange`` that accepts ``List<ListViewItem>`` would be a great addition to the API and help fix this problem as well.\n\n### API Proposal\n\n```csharp\r\nusing System.Collections.Generic;\r\n\r\nnamespace System.Windows.Forms;\r\n\r\npublic partial class ListView\r\n{\r\n    /// <summary>\r\n    ///  Represents the collection of items in a ListView or ListViewGroup\r\n    /// </summary>\r\n    [ListBindable(false)]\r\n    public partial class ListViewItemCollection : IList\r\n    {\r\n        public void AddRange(List<ListViewItem> items);\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar sourceEntries = new List<ListViewItem>();\r\nArray.ForEach(\r\n    SettingsFile.SettingsJson.Sources,\r\n    (x) => sourceEntries.Add(\r\n        new ListViewItem(\r\n            new string[]\r\n            {\r\n                x,\r\n            },\r\n            -1)));\r\nthis.ListView2.Items.AddRange(sourceEntries);\r\n```\r\n\n\n### Alternative Designs\n\nChange the existing ``ListViewItemCollection`` overload of ``AddRange`` to also include all types that inherit from ``IList`` like ``List<T>`` for example.\n\n### Risks\n\nMinimal, since it deals with adding ListViewItems from a ``List<ListViewItem>`` type of collection.\n\n### Will this feature affect UI controls?\n\nI think this would minimally affect them.","Url":"https://github.com/dotnet/winforms/issues/10924","RelatedDescription":"Open issue \"Add version of ListViewItemCollection.AddRange() which accepts IList.\" (#10924)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-02-25T03:30:26.1222277Z","RunDurationInMilliseconds":434}