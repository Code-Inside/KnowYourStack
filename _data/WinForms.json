{"Data":{"GitHub":{"Issues":[{"Id":"644375392","IsPullRequest":true,"CreatedAt":"2020-06-25T04:39:54","Actor":"RussKie","Number":"3502","RawContent":null,"Title":"Fix ImageList memory leaks","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n## Proposed changes\r\n\r\nDisposing a listview control that has shared instances of `ImageList` wired to any of its properties will cause memory leaks due to incorrect unwiring of associated `ImageList` events.\r\n\r\nRework wire/unwire routines to match `TreeView` implementation.\r\n\r\nResolves #3494\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- No memory leaks disposing `ListView` controls.\r\n- \r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual using the provided sample at https://blog.ramondeklein.nl/2009/05/18/listview-may-leak-with-imagelists/\r\n- unit test (courtesy of @weltkante)\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3502)","Url":"https://github.com/dotnet/winforms/pull/3502","RelatedDescription":"Closed or merged PR \"Fix ImageList memory leaks\" (#3502)"},{"Id":"643689880","IsPullRequest":false,"CreatedAt":"2020-06-25T04:39:54","Actor":"weltkante","Number":"3494","RawContent":null,"Title":"ListView attaches lifetime to ImageList","State":"closed","Body":"**.NET Core Version:**\r\n3.1 and master\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nyes\r\n\r\n**Problem description:**\r\n\r\nWhen a ListView is assigned an ImageList it subscribes on events. This attaches the lifetime of the ListView to the ImageList, i.e. the ListView cannot be collected before the ImageList. If the ImageList outlives the ListView then the ListView (and everything attached to it) is leaked.\r\n\r\nOther controls like TreeView solve this by unsubscribing during disposal.\r\n\r\noriginal article here: https://blog.ramondeklein.nl/2009/05/18/listview-may-leak-with-imagelists/\r\n\r\n**Expected behavior:**\r\nListView lifetime should be independent of ImageList lifetime. Implementation should be similar to TreeView which apparently already solves this problem.\r\n\r\n**Minimal repro:**\r\n* create a ListView\r\n* assign it an ImageList\r\n* clear reference to ListView but keep reference to ImageList\r\n* observe ListView not getting collected\r\n\r\n(for details see linked article)","Url":"https://github.com/dotnet/winforms/issues/3494","RelatedDescription":"Closed issue \"ListView attaches lifetime to ImageList\" (#3494)"},{"Id":"643775981","IsPullRequest":true,"CreatedAt":"2020-06-25T00:01:22","Actor":"gpetrou","Number":"3495","RawContent":null,"Title":"Add EM enum in Interop Richedit","State":"closed","Body":"## Proposed changes\r\n\r\n- Add EM enum in Interop Richedit.\r\n- Remove Interop.RichEditMessages.cs and replace usages with the above enum values.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3495)","Url":"https://github.com/dotnet/winforms/pull/3495","RelatedDescription":"Closed or merged PR \"Add EM enum in Interop Richedit\" (#3495)"},{"Id":"643805406","IsPullRequest":true,"CreatedAt":"2020-06-24T23:55:31","Actor":"gpetrou","Number":"3497","RawContent":null,"Title":"Add tests for TreeNodeCollection Find method","State":"closed","Body":"## Proposed changes\r\n\r\n- Add tests for TreeNodeCollection Find method.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3497)","Url":"https://github.com/dotnet/winforms/pull/3497","RelatedDescription":"Closed or merged PR \"Add tests for TreeNodeCollection Find method\" (#3497)"},{"Id":"644959151","IsPullRequest":true,"CreatedAt":"2020-06-24T23:08:27","Actor":"JeremyKuhne","Number":"3507","RawContent":null,"Title":"Fix HDC in BeginPaintScope","State":"closed","Body":"Getting the DC again was a copy/paste mistake\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3507)","Url":"https://github.com/dotnet/winforms/pull/3507","RelatedDescription":"Closed or merged PR \"Fix HDC in BeginPaintScope\" (#3507)"},{"Id":"644811936","IsPullRequest":false,"CreatedAt":"2020-06-24T18:08:20","Actor":"raffaeler","Number":"3506","RawContent":null,"Title":"Make the designer experience of the ToolStrip controls identical to the classic controls","State":"open","Body":"This is  a suggestion to consider making the designer experience identical regardless the control being used on the form.\r\n\r\nThe latest generation controls (Toolstrip related) have a different designer-experience in comparison to all the others.\r\nWhile using the designer you often have to use dialogs to configure the properties of the toolstrip buttons, combos, etc.\r\n\r\nOf course this suggestion is not meant to change any runtime experience or behavior, neither the designer generated code. It is just a matter of the designer experience.\r\n","Url":"https://github.com/dotnet/winforms/issues/3506","RelatedDescription":"Open issue \"Make the designer experience of the ToolStrip controls identical to the classic controls\" (#3506)"},{"Id":"644761098","IsPullRequest":false,"CreatedAt":"2020-06-24T16:48:16","Actor":"mmitche","Number":"3505","RawContent":null,"Title":"Move validation steps to post-build","State":"open","Body":"Winforms should opt-in to post-build validation for SDL, NuGet validation, etc.,\r\n\r\nTo enable the nightly validation runs, you add repo entries here: https://dev.azure.com/dnceng/internal/_git/dotnet-release?path=%2Feng%2Fpipeline%2Ftools%2Frepos-to-validate.txt and this file a version of https://github.com/dotnet/aspnetcore/blob/master/eng/sdl-tsa-vars.config into your repo under the eng folder. Then the validation steps can be disabled in your azure pipeline as they have been in runtimeâ€™s build https://github.com/dotnet/runtime/blob/master/eng/pipelines/official/stages/publish.yml#L30-L49","Url":"https://github.com/dotnet/winforms/issues/3505","RelatedDescription":"Open issue \"Move validation steps to post-build\" (#3505)"},{"Id":"644647381","IsPullRequest":false,"CreatedAt":"2020-06-24T14:11:00","Actor":"vladimir-krestov","Number":"3504","RawContent":null,"Title":"[Servicing] Accessibility: no way to set Label control accessible role and accessible name","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: 3.1\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\nLink to DevDiv issue: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1108206\r\n\r\n**Problem description:**\r\nIf AccessibleName, AccessibleRole, AccessibleDescription is set to a custom value for the Label/GroupBox control, this does not affect the AccessibleName, AccessibleRole, AccessibleDescription in runtime. And default values are shown.\r\n\r\n**Expected behavior:**\r\nThere should be an ability to set/change AccessibleName, AccessibleRole, AccessibleDescription for the Label/GroupBox control.\r\n\r\n**Minimal repro:**\r\nCreate the app with the Label/GroupBox control. Specify custom AccessibleName, AccessibleRole, AccessibleDescription for the label/groupBox. Run the app and observe that the default AccessibleRole or default AccessibleName or default AccessibleDescription are shown in Inspect or Accessibility Insights.","Url":"https://github.com/dotnet/winforms/issues/3504","RelatedDescription":"Open issue \"[Servicing] Accessibility: no way to set Label control accessible role and accessible name\" (#3504)"},{"Id":"644563165","IsPullRequest":true,"CreatedAt":"2020-06-24T12:33:00","Actor":"dotnet-maestro[bot]","Number":"3503","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200623.9\r\n- **Date Produced**: 6/24/2020 9:17 AM\r\n- **Commit**: d908270add914db0e9fb3ce72e93c410e8f0f95a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.DirectoryServices**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.IO.Packaging**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20322.7 to 5.0.0-preview.8.20323.9\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3503)","Url":"https://github.com/dotnet/winforms/pull/3503","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3503)"},{"Id":"643784798","IsPullRequest":true,"CreatedAt":"2020-06-24T07:55:50","Actor":"dotnet-maestro[bot]","Number":"3496","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200622.7\r\n- **Date Produced**: 6/23/2020 8:43 AM\r\n- **Commit**: d6b8109177d0ba0eeafc8f7570c63cbc0b2f2562\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.DirectoryServices**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.IO.Packaging**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.7\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3496)","Url":"https://github.com/dotnet/winforms/pull/3496","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3496)"},{"Id":"642934278","IsPullRequest":true,"CreatedAt":"2020-06-24T07:45:39","Actor":"gpetrou","Number":"3483","RawContent":null,"Title":"Use generic lists in MonthCalendar","State":"closed","Body":"## Proposed changes\r\n\r\n- Use generic lists in MonthCalendar.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3483)","Url":"https://github.com/dotnet/winforms/pull/3483","RelatedDescription":"Closed or merged PR \"Use generic lists in MonthCalendar\" (#3483)"},{"Id":"644191381","IsPullRequest":true,"CreatedAt":"2020-06-23T23:25:28","Actor":"dotnet-maestro[bot]","Number":"3501","RawContent":null,"Title":"[release/5.0-preview7] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 10d330dc-4f8f-4c44-8c66-08d812f956ec\r\n- **Build**: 20200623.4\r\n- **Date Produced**: 6/23/2020 10:06 PM\r\n- **Commit**: 17df0b885273d0f4d22794fd830361d28bf3b663\r\n- **Branch**: refs/heads/release/5.0-preview7\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20322.6 to 5.0.0-preview.7.20323.4\r\n\r\n[marker]: <> (End:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3501)","Url":"https://github.com/dotnet/winforms/pull/3501","RelatedDescription":"Closed or merged PR \"[release/5.0-preview7] Update dependencies from dotnet/runtime\" (#3501)"},{"Id":"644058126","IsPullRequest":true,"CreatedAt":"2020-06-23T22:10:55","Actor":"JeremyKuhne","Number":"3499","RawContent":null,"Title":"Another incremental improvement","State":"closed","Body":"Don't want to lock the current command prompt.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3499)","Url":"https://github.com/dotnet/winforms/pull/3499","RelatedDescription":"Closed or merged PR \"Another incremental improvement\" (#3499)"},{"Id":"644082171","IsPullRequest":false,"CreatedAt":"2020-06-23T19:14:58","Actor":"jlchavez","Number":"3500","RawContent":null,"Title":"Printing from ASP.NET Core Razor Pages through Windows Forms Library","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI'm using Syncfusion.PdfViewer.Windows for printing a Pdf through the .NET Core 3.1 App with the WindowsForms SDK without starting the Form, the test worked fine. Syncfusion's library works perfect for printing the Pdf.\r\n\r\nYes I can make it a .NET Framework 4.8 Windows Service, but I would have to create a complete set of tools to manage thist printing service, will I could just add pages to the Hosted Service and run integrated, without having to make APIs, authentication, using tooling that is old as Microsoft has no out-of-the-box solutions as we used to have with Remoting or WCF or ASP.NET WebServices, so we have to reinvent the wheel with gRPC or SignalR or WebSockets. Yes this would be done to interact in another stage,\r\n\r\nCalling the \"Console App\" wouldn't be a problem with Process.Start, but It's just a workaround.\r\n\r\nI tried referencing the System.Windows.Forms, library, but it's a Reference Assembly, I added it from the SDK, and a couple more assemblies, but it required a native dll. So the binding are the one that are missing so that it can be used the references assembly. \r\n\r\nSome printing is done manually through PrintDocument so this would be easier for any one to print.\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\nI Would like to print it through a Hosted Service App running as a Windows Service in .NET Core 3.1. I know it's not a expected thing to be integrated into a ASP.NET WebForms App, you could separate the Printing API, if you wish. \r\n\r\nA SDK or something that let's us reference this from the Microsoft.NET.Sdk.Web SDK, or a way to add it would be great.\r\n\r\n**Will this feature affect UI controls?**\r\nNO","Url":"https://github.com/dotnet/winforms/issues/3500","RelatedDescription":"Open issue \"Printing from ASP.NET Core Razor Pages through Windows Forms Library\" (#3500)"},{"Id":"644024529","IsPullRequest":true,"CreatedAt":"2020-06-23T17:57:27","Actor":"dotnet-maestro[bot]","Number":"3498","RawContent":null,"Title":"[release/5.0-preview7] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 10d330dc-4f8f-4c44-8c66-08d812f956ec\r\n- **Build**: 20200622.6\r\n- **Date Produced**: 6/23/2020 4:06 AM\r\n- **Commit**: 80a7935c3accde1a9a97299de456d6f3d75cd57c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20322.6\r\n\r\n[marker]: <> (End:10d330dc-4f8f-4c44-8c66-08d812f956ec)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3498)","Url":"https://github.com/dotnet/winforms/pull/3498","RelatedDescription":"Closed or merged PR \"[release/5.0-preview7] Update dependencies from dotnet/runtime\" (#3498)"},{"Id":"643015519","IsPullRequest":true,"CreatedAt":"2020-06-23T10:59:40","Actor":"dotnet-maestro[bot]","Number":"3484","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200621.2\r\n- **Date Produced**: 6/21/2020 8:09 PM\r\n- **Commit**: 1f4d0db2339c37d75723d063827fd2a4c6e2ecef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3484)","Url":"https://github.com/dotnet/winforms/pull/3484","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3484)"},{"Id":"642868521","IsPullRequest":true,"CreatedAt":"2020-06-23T08:31:53","Actor":"gpetrou","Number":"3482","RawContent":null,"Title":"Dispose GetWindowsFont return value","State":"closed","Body":"## Proposed changes\r\n\r\n- WindowsFont was not disposed in some cases.\r\n- Made using statement usage consistent.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3482)","Url":"https://github.com/dotnet/winforms/pull/3482","RelatedDescription":"Closed or merged PR \"Dispose GetWindowsFont return value\" (#3482)"},{"Id":"643564115","IsPullRequest":false,"CreatedAt":"2020-06-23T06:17:38","Actor":"weltkante","Number":"3493","RawContent":null,"Title":"Support Span where appropriate","State":"open","Body":"**.NET Core Version:**\r\nmaster\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nyes\r\n\r\n**Problem description:**\r\n.NET Core supports `Span` as a new feature that was not present when WinForms was designed. Need to identify appropriate places where e.g. `Span<byte>` can be used as argument instead of byte arrays or streams. Workarounds are converting the span to an array or wrapping it in a stream.\r\n\r\nFollowing places have been identified so far:\r\n* `Cursor(Span<byte>)` constructor should be added\r\n\r\n**Expected behavior:**\r\nSupport `Span` where appropriate\r\n\r\n**Minimal repro:**\r\nSpan API not present, must be converted to array or wrapped in stream.","Url":"https://github.com/dotnet/winforms/issues/3493","RelatedDescription":"Open issue \"Support Span where appropriate\" (#3493)"},{"Id":"643561196","IsPullRequest":false,"CreatedAt":"2020-06-23T06:10:53","Actor":"weltkante","Number":"3492","RawContent":null,"Title":"Cursor(Stream) bugs","State":"open","Body":"**.NET Core Version:**\r\nmaster\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nprobably\r\n\r\n**Problem description:**\r\nAs noted [here in a PR](https://github.com/dotnet/winforms/pull/3476#discussion_r443216116) the constrcutor of `Cursor` taking a `Stream` is broken\r\n\r\n```cs\r\npublic Cursor(Stream stream)\r\n{\r\n    if (stream == null)\r\n    {\r\n        throw new ArgumentNullException(nameof(stream));\r\n    }\r\n\r\n    int length = checked((int)stream.Length);\r\n    _cursorData = new byte[length];\r\n    stream.Read(_cursorData, 0, length);\r\n    LoadPicture(\r\n        new Ole32.GPStream(new MemoryStream(_cursorData)),\r\n        nameof(stream));\r\n}\r\n```\r\n\r\n- if the stream position isn't at zero the buffer would be allocated too large (suboptimal)\r\n- if the stream doesn't know its length this would throw even though it doesn't have to (bug)\r\n- `Read` is allowed to read less then `length` bytes so cursor data may be incomplete (bug)\r\n\r\nUsers can work around those bugs by wrapping their stream, but really the code should do a `stream.CopyTo(MemoryStream)` to let it do the heavy lifting and be more compatible to passing in arbitrary streams.\r\n\r\nNote the current code doesn't throw, it just over-allocates and then reads less bytes than requested, which is fine if the cursor data is still represented completely at the current position.\r\n\r\n**Expected behavior:**\r\n- streams which don't expose their length can still be read\r\n- streams which provide data in chunks still can be loaded\r\n\r\n**Minimal repro:**\r\nprovide a custom stream","Url":"https://github.com/dotnet/winforms/issues/3492","RelatedDescription":"Open issue \"Cursor(Stream) bugs\" (#3492)"},{"Id":"643255055","IsPullRequest":true,"CreatedAt":"2020-06-23T05:18:29","Actor":"weltkante","Number":"3486","RawContent":null,"Title":"ImageList must be disposed","State":"closed","Body":"## Proposed changes\r\n\r\nDuring investigation of #3358 I noticed that some NativeImageLists were finalized.\r\n\r\nImageLists (the owner of NativeImageList) are designer components that need to be disposed.\r\n\r\n## Customer Impact\r\n\r\nnone\r\n\r\n## Regression? \r\n\r\nno\r\n\r\n## Risk\r\n\r\nnone\r\n\r\n### Before\r\n\r\nImageList handles were collected by GC and released in the finalizer\r\n\r\n### After\r\n\r\nImageList handles should be disposed by the test that created them\r\n\r\n## Test methodology\r\n\r\nsetting a breakpoint in the `NativeImageList` finalizer and ensure its not hit\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3486)","Url":"https://github.com/dotnet/winforms/pull/3486","RelatedDescription":"Closed or merged PR \"ImageList must be disposed\" (#3486)"},{"Id":"643280361","IsPullRequest":true,"CreatedAt":"2020-06-23T03:41:01","Actor":"mmitche","Number":"3489","RawContent":null,"Title":"Prepare for strict coherency","State":"closed","Body":"Strict coherency means that if your repo declares a dependency with a CPD attribute, the CPD parent must have a direct dependency on that dependency.\r\nThis means that for WPF, there are a few dependencies where it declares Microsoft.Private.Winforms to be the parent, but winforms does not have a dependency on those dependencies. Add them.\r\n\r\nReasons for this approach over the current approach:\r\n- This eliminates some ambiguous tie-breaking scenarios that are very problematic and dangerous in servicing\r\n- Those tie breaking scenarios require the use of BAR to break the ties. If the DB data were to be lost then the tie-breaking would do unexpected things.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3489)","Url":"https://github.com/dotnet/winforms/pull/3489","RelatedDescription":"Closed or merged PR \"Prepare for strict coherency\" (#3489)"},{"Id":"643458615","IsPullRequest":false,"CreatedAt":"2020-06-23T01:22:11","Actor":"alanhoman","Number":"3491","RawContent":null,"Title":"ChildMdi has multiple rendering issues when using PerMonitorV2 or PerMonitor","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n* .NET Core Version: \r\n3.1.400 and v5.0.0-preview.5\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nPerMonitor  using app.manifest works on .NET Framework 4.8.  PerMonitorV2 and PerMonitor do not work in .NET Core 3.1/5.0\r\n\r\n**Problem description:**\r\nThe following issues are occurring with .NET Core 3.1/5.0 HighDpiMode.PerMonitorV2.  The sample project was based on https://github.com/microsoft/dotnet-samples/tree/master/WinForms-HDPI/PerMonitorAware.  These issues prevent us from being able to move to .NET Core.  One of our largest projects has over 1,000 forms and many have multiple Tabs and ListViews that do not render properly on .NET Core due to PerMonitor and PerMonitorV2 issues.  Currently we run with .NET Framework 4.8 in PerMonitor mode and programmatically adjust the fonts on all child forms when the scaling changes.  This PerMonitor workaround does not work in .NET Core. In all the examples, the 144 Dpi monitor is on the left and the 96 Dpi monitor is on the right. Here are [short video clips of issues 1-6](https://github.com/dotnet/winforms/files/4814338/mp4Files.zip).\r\n\r\n**Issue 1**: When moving an MdiParent to a higher DPI monitor the Maximized ChildMdi does not render properly\r\n- Run the project and click MdiParent - Simple Layout\r\n- Maximize SimpleLayout, then drag the MdiParent from a 96 DPI monitor to a 144 DPI monitor (150%).\r\n- The tabControl1 control appears to be anchored beyond the top of the form and overlays all other controls.  The tabContol1 is on the bottom half of the screen and is anchored Top, Bottom, Left, Right.  It should remain on the lower half of the form.\r\n- If the tabControl1 anchoring is changed to Top, Left, this issue does not occur.  On our large project we have dozens of forms that use Top, Bottom, Left, Right anchoring so that it will display as much information as possible to the user depending on their form and screen size.\r\n![Issue 1](https://user-images.githubusercontent.com/2184698/85347187-beff5300-b4ac-11ea-8b62-b873c30ed84f.gif)\r\n\r\n**Issue 2**: When moving an MdiParent to a higher DPI monitor the ChildMdi (not maximized) has extra space on the right and bottom, although it does not have the rendering issues when maximized as in Issue 1.\r\n- Run the project and click MdiParent - Simple Layout\r\n- Drag the MdiParent from a 96 DPI monitor to a 144 DPI monitor (150%).\r\n- There is considerable extra space introduced on the right and bottom of SimpleLayout.\r\n![Issue 2](https://user-images.githubusercontent.com/2184698/85347620-f28ead00-b4ad-11ea-87a9-89b3ac18fc70.gif)\r\n\r\n**Issue 3**: When moving MdiParent to a higher DPI monitor, opening SimpleLayout, and moving it to a lower DPI monitor, the font size increases.  Moving it back increases it more.\r\n- Run the project and click MdiParent - Simple Layout.\r\n- Move the form to a 144 DPI monitor, close the SimpleLayout and go to Tools -> Open New SimpleLayout.\r\n- Move the MdiParent to the 96 DPI monitor.  The form does not render properly, and the font also increases in size.  \r\n- Move the MdiParent back to the 144 DPI monitor.  The font size increases further.  You will notice that the groupBox1 font size is much larger than when the form was first opened on the 144 Dpi monitor.\r\n![Issue 3](https://user-images.githubusercontent.com/2184698/85347734-4b5e4580-b4ae-11ea-876b-0be9aad3f7f5.gif)\r\n\r\n**Issue 4**: When moving SimpleForm to a higher DPI monitor it does not render properly\r\n- Run the project and click Simple Layout\r\n- Drag SimpleLayout from a 96 DPI monitor to a 144 DPI monitor (150%).\r\n- On .NET Core, the ListBox label, TextBox label, and textbox2 are cutoff.  The numericUpDown1, comboBox1, listview1 header, and multiline textbox1 controls are all in a small font (not scaled).  \r\n- On .NET Framework 4.8, the numericUpDown1, comboBox1, listview1 header, and multiline textbox1 controls are all in a small font (not scaled).  The labels are not cutoff as they are in .NET Core.\r\n![Issue 4](https://user-images.githubusercontent.com/2184698/85348934-d7be3780-b4b1-11ea-9884-cf30e213fa10.gif)\r\n\r\n**Issue 5**: When increasing then decreasing the font size, the form does not render properly\r\n- Run the project and click MdiParent - Simple Layout.\r\n- Select Tools - > Increase Font Size, then Tools -> Decrease Font Size.\r\n- SimpleLayout does not render properly.  Its rendering issue is like Issue 1.\r\n- If HighDpiMode.PerMonitorV2 is disabled in Program.cs, the issue does not occur.  With HighDpiMode.PerMonitor, the issue still occurs.\r\n- With .NET Framework 4.8 and With PerMonitor set in app.manifest (app.config setting commented out), this issue does not occur. This is how our current app runs.\r\n![Issue 5](https://user-images.githubusercontent.com/2184698/85347833-a7c16500-b4ae-11ea-9397-08b341e6289b.gif)\r\n\r\n**Issue 6**: Similar issues occur with HighDpiMode.PerMonitor when moving the MdiParent between monitors with different DPIâ€™s.  After 3-4 moves, the form does not render properly.  For .NET Framework 4.8, this issue does not occur.\r\n![Issue 6](https://user-images.githubusercontent.com/2184698/85350040-e22e0080-b4b4-11ea-9de1-abb2de33fa46.gif)\r\n\r\n**Issue 7**: When switching the project from .NET Core 3.1 to NET Core 5.0, the Minimize/Maximize/Close buttons no longer appear on the menu strip when SimpleLayout is maximized.\r\n\r\n**Expected behavior:**\r\nThe SimpleLayout Form should render properly using PerMonitorV2 on monitors with varying DPI's.\r\n\r\n**Minimal repro:**\r\n[.NET Core Sample Project](https://github.com/dotnet/winforms/files/4816186/PerMonitorHDPICore.zip)\r\n[.NET Framework Sample Project](https://github.com/dotnet/winforms/files/4816187/PerMonitorHDPIFramework.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3491","RelatedDescription":"Open issue \"ChildMdi has multiple rendering issues when using PerMonitorV2 or PerMonitor\" (#3491)"},{"Id":"643387641","IsPullRequest":true,"CreatedAt":"2020-06-22T22:01:32","Actor":"lonitra","Number":"3490","RawContent":null,"Title":"Implement TitleImageIndex/Key to ListViewGroup","State":"open","Body":"Fixes #3301 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Add `TitleImageIndex` and `TitleImageKey` API to `ListViewGroup`\r\n- Add `GroupImageList` to `ListView`\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customers will be able to set icons next to `ListViewGroup` header\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/30007367/85338352-f7943200-b496-11ea-816c-94eddb85beec.png)\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/30007367/85338430-23afb300-b497-11ea-98a4-fd123ff0442c.png)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n- Unit testing\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3490)","Url":"https://github.com/dotnet/winforms/pull/3490","RelatedDescription":"Open PR \"Implement TitleImageIndex/Key to ListViewGroup\" (#3490)"},{"Id":"643270046","IsPullRequest":true,"CreatedAt":"2020-06-22T18:14:44","Actor":"weltkante","Number":"3488","RawContent":null,"Title":"[WIP] Reduce sharing of disposable objects across MemberData sets","State":"open","Body":"Fixes #3487\r\n\r\n## Proposed changes\r\n\r\nUse factory methods instead of sharing disposable objects across MemberData sets\r\n\r\nSharing disposable objects relies on undocumented behavior of xunit (it does not guarantee that disposal happens after all tests are run, it could just as well dispose each set individually after running it). It also introduces hidden dependencies between tests that may lead to undesired interaction between tests.\r\n\r\n## Customer Impact\r\n\r\nnone\r\n\r\n## Regression? \r\n\r\nno\r\n\r\n## Risk\r\n\r\nnone\r\n\r\n### Before\r\n\r\nsometimes disposable objects were shared between MemberData sets\r\n\r\n### After\r\n\r\ndisposable objects should not be shared between MemberData sets\r\n\r\n## Test methodology\r\n\r\ncode review\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3488)","Url":"https://github.com/dotnet/winforms/pull/3488","RelatedDescription":"Open PR \"[WIP] Reduce sharing of disposable objects across MemberData sets\" (#3488)"},{"Id":"643260522","IsPullRequest":false,"CreatedAt":"2020-06-22T17:56:59","Actor":"weltkante","Number":"3487","RawContent":null,"Title":"Reduce sharing of disposable objects across MemberData sets","State":"open","Body":"**.NET Core Version:**\r\nmaster\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nno\r\n\r\n**Problem description:**\r\nDuring investigation of flaky unit tests it was noticed that sharing disposable objects between multiple yields of MemberData sets is not advisable. It works but relies on the undocumented fact that xunit disposes member data after all tests have run. If it were to dispose between test runs it would break those tests.\r\n\r\nIts better style to have each set of test data be independent. This also reduces risk of undesired interaction between data sets.\r\n\r\n**Expected behavior:**\r\nEach set of (disposable) test data returned by MemberData functions should be independent\r\n\r\n**Minimal repro:**\r\nSource code review for shared member data","Url":"https://github.com/dotnet/winforms/issues/3487","RelatedDescription":"Open issue \"Reduce sharing of disposable objects across MemberData sets\" (#3487)"},{"Id":"643251731","IsPullRequest":false,"CreatedAt":"2020-06-22T17:40:33","Actor":"weltkante","Number":"3485","RawContent":null,"Title":"PropertyGrid allocates ImageList handles while disposing","State":"open","Body":"**.NET Core Version:**\r\nmaster\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nunknown\r\n\r\n**Problem description:**\r\n`PropertyGrid` creates native `ImageList` handles when disposing. Those handles are _not_ disposed and left for the GC to collect.\r\n\r\n<details><summary>Stack Trace A</summary>\r\n\r\n### call site\r\n`System.Windows.Forms.Tests.PropertyGridTests.PropertyGrid_LargeButtons_SetWithHandle_GetReturnsExpected`\r\n\r\n### allocation stack\r\n```\r\n   at System.Windows.Forms.ImageList.NativeImageList..ctor(IntPtr himl)\r\n   at System.Windows.Forms.ImageList.CreateHandle()\r\n   at System.Windows.Forms.ImageList.get_Handle()\r\n   at Interop.ComCtl32.ImageList.DrawEx(IHandle himl, Int32 i, HandleRef hdcDst, Int32 x, Int32 y, Int32 dx, Int32 dy, Int32 rgbBk, Int32 rgbFg, ILD fStyle)\r\n   at System.Windows.Forms.ImageList.GetBitmap(Int32 index)\r\n   at System.Windows.Forms.ImageList.ImageCollection.get_Item(Int32 index)\r\n   at System.Windows.Forms.ToolStripItem.get_Image()\r\n   at System.Windows.Forms.ToolStripItem.Animate(Boolean animate)\r\n   at System.Windows.Forms.ToolStripItem.StopAnimate()\r\n   at System.Windows.Forms.ToolStripItem.Dispose(Boolean disposing)\r\n   at System.ComponentModel.Component.Dispose()\r\n   at System.Windows.Forms.ToolStrip.Dispose(Boolean disposing)\r\n   at System.ComponentModel.Component.Dispose()\r\n   at System.Windows.Forms.Control.Dispose(Boolean disposing)\r\n   at System.Windows.Forms.ContainerControl.Dispose(Boolean disposing)\r\n   at System.Windows.Forms.PropertyGrid.Dispose(Boolean disposing)\r\n   at System.ComponentModel.Component.Dispose()\r\n   at System.Windows.Forms.Tests.PropertyGridTests.PropertyGrid_LargeButtons_SetWithHandle_GetReturnsExpected(Boolean visible, Boolean value, Int32 expectedLayoutCallCount1, Int32 expectedInvalidatedCallCount1, Int32 expectedLayoutCallCount2, Int32 expectedInvalidatedCallCount2)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance)\r\n   at Xunit.Sdk.UITestInvoker.<>c__DisplayClass2_0.<<RunAsync>b__2>d.MoveNext()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Delegate.DynamicInvokeImpl(Object[] args)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackDo(ThreadMethodEntry tme)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackHelper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallback(ThreadMethodEntry tme)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbacks()\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)\r\n   at Interop.User32.DispatchMessageW(MSG& msg)\r\n   at Interop.User32.DispatchMessageW(MSG& msg)\r\n   at System.Windows.Forms.Application.ComponentManager.Interop.Mso.IMsoComponentManager.FPushMessageLoop(UIntPtr dwComponentID, msoloop uReason, Void* pvLoopData)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(msoloop reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(msoloop reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.DoEvents()\r\n   at Xunit.Sdk.WinFormsSynchronizationContextAdapter.PumpTill(SynchronizationContext synchronizationContext, Task task)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n```\r\n\r\n</details>\r\n\r\n<details><summary>Stack Trace B</summary>\r\n\r\n### call site\r\n`System.Windows.Forms.Tests.PropertyGridTests.PropertyGrid_LargeButtons_Set_GetReturnsExpected`\r\n\r\n### allocation stack\r\n```\r\n   at System.Windows.Forms.ImageList.NativeImageList..ctor(IntPtr himl)\r\n   at System.Windows.Forms.ImageList.CreateHandle()\r\n   at System.Windows.Forms.ImageList.get_Handle()\r\n   at Interop.ComCtl32.ImageList.DrawEx(IHandle himl, Int32 i, HandleRef hdcDst, Int32 x, Int32 y, Int32 dx, Int32 dy, Int32 rgbBk, Int32 rgbFg, ILD fStyle)\r\n   at System.Windows.Forms.ImageList.GetBitmap(Int32 index)\r\n   at System.Windows.Forms.ImageList.ImageCollection.get_Item(Int32 index)\r\n   at System.Windows.Forms.ToolStripItem.get_Image()\r\n   at System.Windows.Forms.ToolStripItem.Animate(Boolean animate)\r\n   at System.Windows.Forms.ToolStripItem.StopAnimate()\r\n   at System.Windows.Forms.ToolStripItem.Dispose(Boolean disposing)\r\n   at System.ComponentModel.Component.Dispose()\r\n   at System.Windows.Forms.ToolStrip.Dispose(Boolean disposing)\r\n   at System.ComponentModel.Component.Dispose()\r\n   at System.Windows.Forms.Control.Dispose(Boolean disposing)\r\n   at System.Windows.Forms.ContainerControl.Dispose(Boolean disposing)\r\n   at System.Windows.Forms.PropertyGrid.Dispose(Boolean disposing)\r\n   at System.ComponentModel.Component.Dispose()\r\n   at System.Windows.Forms.Tests.PropertyGridTests.PropertyGrid_LargeButtons_Set_GetReturnsExpected(Boolean visible, Boolean value)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance)\r\n   at Xunit.Sdk.UITestInvoker.<>c__DisplayClass2_0.<<RunAsync>b__2>d.MoveNext()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Delegate.DynamicInvokeImpl(Object[] args)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackDo(ThreadMethodEntry tme)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackHelper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallback(ThreadMethodEntry tme)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbacks()\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)\r\n   at Interop.User32.DispatchMessageW(MSG& msg)\r\n   at Interop.User32.DispatchMessageW(MSG& msg)\r\n   at System.Windows.Forms.Application.ComponentManager.Interop.Mso.IMsoComponentManager.FPushMessageLoop(UIntPtr dwComponentID, msoloop uReason, Void* pvLoopData)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(msoloop reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(msoloop reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.DoEvents()\r\n   at Xunit.Sdk.WinFormsSynchronizationContextAdapter.PumpTill(SynchronizationContext synchronizationContext, Task task)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n```\r\n\r\n</details>\r\n\r\n**Expected behavior:**\r\n`PropertyGrid` should not allocate new handles during disposal\r\n\r\n**Minimal repro:**\r\nPut a breakpoint in `NativeImageList` finalizer and run one of these two tests:\r\n* `System.Windows.Forms.Tests.PropertyGridTests.PropertyGrid_LargeButtons_SetWithHandle_GetReturnsExpected`\r\n* `System.Windows.Forms.Tests.PropertyGridTests.PropertyGrid_LargeButtons_Set_GetReturnsExpected`\r\n","Url":"https://github.com/dotnet/winforms/issues/3485","RelatedDescription":"Open issue \"PropertyGrid allocates ImageList handles while disposing\" (#3485)"},{"Id":"642575565","IsPullRequest":true,"CreatedAt":"2020-06-22T10:40:52","Actor":"gpetrou","Number":"3479","RawContent":null,"Title":"Dispose StringWriter instances","State":"closed","Body":"## Proposed changes\r\n\r\n- Looks like some StringWriter instances should be disposed.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3479)","Url":"https://github.com/dotnet/winforms/pull/3479","RelatedDescription":"Closed or merged PR \"Dispose StringWriter instances\" (#3479)"},{"Id":"642861795","IsPullRequest":true,"CreatedAt":"2020-06-22T09:58:43","Actor":"gpetrou","Number":"3481","RawContent":null,"Title":"Add ECO and ECOOP enums in Interop Richedit","State":"closed","Body":"## Proposed changes\r\n\r\n- Add ECO and ECOOP enums in Interop Richedit.\r\n- Remove ECO and ECOOP constants from RichTextBoxConstants.cs and replace their usages with the above enum values.\r\n- Remove unused WCH_EMBEDDING constant.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3481)","Url":"https://github.com/dotnet/winforms/pull/3481","RelatedDescription":"Closed or merged PR \"Add ECO and ECOOP enums in Interop Richedit\" (#3481)"},{"Id":"642540671","IsPullRequest":true,"CreatedAt":"2020-06-22T07:27:10","Actor":"gpetrou","Number":"3478","RawContent":null,"Title":"Dispose BinaryReader, BinaryWriter and MemoryStream in AxHost.State","State":"closed","Body":"## Proposed changes\r\n\r\n- Looks like that some disposables should be disposed in this class.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3478)","Url":"https://github.com/dotnet/winforms/pull/3478","RelatedDescription":"Closed or merged PR \"Dispose BinaryReader, BinaryWriter and MemoryStream in AxHost.State\" (#3478)"},{"Id":"642619973","IsPullRequest":true,"CreatedAt":"2020-06-21T18:52:38","Actor":"gpetrou","Number":"3480","RawContent":null,"Title":"Use generic list in FindInternal and FindControls methods of some classes","State":"open","Body":"## Proposed changes\r\n\r\n- Use generic list in FindInternal and FindControls methods of some classes.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3480)","Url":"https://github.com/dotnet/winforms/pull/3480","RelatedDescription":"Open PR \"Use generic list in FindInternal and FindControls methods of some classes\" (#3480)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-06-25T05:30:51.0418081Z","RunDurationInMilliseconds":560}