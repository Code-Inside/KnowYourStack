{"Data":{"GitHub":{"Issues":[{"Id":"1620145319","IsPullRequest":true,"CreatedAt":"2023-03-11T21:04:10","Actor":"halgab","Number":"8792","RawContent":null,"Title":"Add nullability annotations to DesignerActionList and DesignerActionListCollection","State":"open","Body":"Contributes to #1107\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8792)","Url":"https://github.com/dotnet/winforms/pull/8792","RelatedDescription":"Open PR \"Add nullability annotations to DesignerActionList and DesignerActionListCollection\" (#8792)"},{"Id":"1620140054","IsPullRequest":true,"CreatedAt":"2023-03-11T20:43:15","Actor":"dotnet-bot","Number":"8791","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2133171","State":"open","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8791)","Url":"https://github.com/dotnet/winforms/pull/8791","RelatedDescription":"Open PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2133171\" (#8791)"},{"Id":"1619954346","IsPullRequest":true,"CreatedAt":"2023-03-11T20:01:36","Actor":"gpetrou","Number":"8786","RawContent":null,"Title":"Dispose TextBox in tests","State":"closed","Body":"## Proposed changes\r\n\r\n- Dispose TextBox in tests\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8786)","Url":"https://github.com/dotnet/winforms/pull/8786","RelatedDescription":"Closed or merged PR \"Dispose TextBox in tests\" (#8786)"},{"Id":"1620079602","IsPullRequest":false,"CreatedAt":"2023-03-11T17:13:59","Actor":"ravipoddar10","Number":"8790","RawContent":null,"Title":"TablelayoutPanelDesigner,TabControlDesigner is missing in .net7.0.","State":"open","Body":"### .NET version\n\n.net7.0\n\n### Did it work in .NET Framework?\n\nYes\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\n_No response_\n\n### Issue description\n\nDesigner surface code generation issue occur with table layout panel\r\n\r\nhttps://learn.microsoft.com/en-us/answers/questions/1187787/private-member-code-generation-and-resize-issue-wi\n\n### Steps to reproduce\n\nhttps://learn.microsoft.com/en-us/answers/questions/1187787/private-member-code-generation-and-resize-issue-wi","Url":"https://github.com/dotnet/winforms/issues/8790","RelatedDescription":"Open issue \"TablelayoutPanelDesigner,TabControlDesigner is missing in .net7.0.\" (#8790)"},{"Id":"1619998313","IsPullRequest":true,"CreatedAt":"2023-03-11T13:24:00","Actor":"dotnet-maestro[bot]","Number":"8788","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230311.1\r\n- **Date Produced**: March 11, 2023 11:19:07 AM UTC\r\n- **Commit**: 2bacbca96ddcf7ae809a0e32a0d5dbffd6354199\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.CodeDom**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Text.Json**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.3.23160.1 to 8.0.0-preview.3.23161.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/1d5c424...2bacbca\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8788)","Url":"https://github.com/dotnet/winforms/pull/8788","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8788)"},{"Id":"1620002243","IsPullRequest":true,"CreatedAt":"2023-03-11T13:19:33","Actor":"halgab","Number":"8789","RawContent":null,"Title":"Add nullability to ExtenderProviderService and TypeDescriptorFilterService","State":"open","Body":"Contributes to #1107\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8789)","Url":"https://github.com/dotnet/winforms/pull/8789","RelatedDescription":"Open PR \"Add nullability to ExtenderProviderService and TypeDescriptorFilterService\" (#8789)"},{"Id":"1619993489","IsPullRequest":true,"CreatedAt":"2023-03-11T12:44:29","Actor":"halgab","Number":"8787","RawContent":null,"Title":"Enable nullability in CodeMarkers","State":"open","Body":"Contributes to #1107\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8787)","Url":"https://github.com/dotnet/winforms/pull/8787","RelatedDescription":"Open PR \"Enable nullability in CodeMarkers\" (#8787)"},{"Id":"1619951684","IsPullRequest":true,"CreatedAt":"2023-03-11T09:54:18","Actor":"gpetrou","Number":"8785","RawContent":null,"Title":"Dispose PaintEventArgs in tests","State":"open","Body":"## Proposed changes\r\n\r\n- Dispose PaintEventArgs in tests.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8785)","Url":"https://github.com/dotnet/winforms/pull/8785","RelatedDescription":"Open PR \"Dispose PaintEventArgs in tests\" (#8785)"},{"Id":"1619937717","IsPullRequest":true,"CreatedAt":"2023-03-11T08:57:15","Actor":"halgab","Number":"8784","RawContent":null,"Title":"Enable nullability in ComponentCache ","State":"open","Body":"Contributes to #1107\r\n\r\nI did a bit of cleanup again in the second commit\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8784)","Url":"https://github.com/dotnet/winforms/pull/8784","RelatedDescription":"Open PR \"Enable nullability in ComponentCache \" (#8784)"},{"Id":"1619915545","IsPullRequest":true,"CreatedAt":"2023-03-11T07:20:50","Actor":"gpetrou","Number":"8783","RawContent":null,"Title":"Fix ToolStripItems_FontScaling tests","State":"open","Body":"## Proposed changes\r\n\r\n- Locally, the tests are failing for me and it looks like it is because we are using `DpiHelper.LogicalDpi` which is always `96.0`. I used `Form.DeviceDpi` instead.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8783)","Url":"https://github.com/dotnet/winforms/pull/8783","RelatedDescription":"Open PR \"Fix ToolStripItems_FontScaling tests\" (#8783)"},{"Id":"1619907924","IsPullRequest":true,"CreatedAt":"2023-03-11T06:45:47","Actor":"gpetrou","Number":"8782","RawContent":null,"Title":"Remove some unused variables","State":"open","Body":"## Proposed changes\r\n\r\n- Remove some unused variables.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8782)","Url":"https://github.com/dotnet/winforms/pull/8782","RelatedDescription":"Open PR \"Remove some unused variables\" (#8782)"},{"Id":"1619903785","IsPullRequest":true,"CreatedAt":"2023-03-11T06:27:13","Actor":"gpetrou","Number":"8781","RawContent":null,"Title":"Enable nullability in ListBindingHelper","State":"open","Body":"## Proposed changes\r\n\r\n- Enable nullability in ListBindingHelper.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8781)","Url":"https://github.com/dotnet/winforms/pull/8781","RelatedDescription":"Open PR \"Enable nullability in ListBindingHelper\" (#8781)"},{"Id":"1615550473","IsPullRequest":true,"CreatedAt":"2023-03-11T00:34:55","Actor":"gpetrou","Number":"8765","RawContent":null,"Title":"Enable nullability in ColorPaletteAccessibleObject and ControlDesignerAccessibleObject","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in ColorPaletteAccessibleObject and ControlDesignerAccessibleObject\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8765)","Url":"https://github.com/dotnet/winforms/pull/8765","RelatedDescription":"Closed or merged PR \"Enable nullability in ColorPaletteAccessibleObject and ControlDesignerAccessibleObject\" (#8765)"},{"Id":"1618668309","IsPullRequest":true,"CreatedAt":"2023-03-11T00:19:28","Actor":"halgab","Number":"8776","RawContent":null,"Title":"Enable nullability in ExpressionContext and ExpressionTable","State":"closed","Body":"Contributes to #1107\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8776)","Url":"https://github.com/dotnet/winforms/pull/8776","RelatedDescription":"Closed or merged PR \"Enable nullability in ExpressionContext and ExpressionTable\" (#8776)"},{"Id":"1613983521","IsPullRequest":true,"CreatedAt":"2023-03-10T22:33:53","Actor":"gpetrou","Number":"8763","RawContent":null,"Title":"Enable nullability in MultilineStringEditor","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in MultilineStringEditor.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8763)","Url":"https://github.com/dotnet/winforms/pull/8763","RelatedDescription":"Closed or merged PR \"Enable nullability in MultilineStringEditor\" (#8763)"},{"Id":"1619641060","IsPullRequest":true,"CreatedAt":"2023-03-10T22:20:09","Actor":"halgab","Number":"8779","RawContent":null,"Title":"Add nullability to RootContext, SerializeAbsoluteContext, StatementContext","State":"closed","Body":"Contributes to #1107 \n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8779)","Url":"https://github.com/dotnet/winforms/pull/8779","RelatedDescription":"Closed or merged PR \"Add nullability to RootContext, SerializeAbsoluteContext, StatementContext\" (#8779)"},{"Id":"1619676715","IsPullRequest":false,"CreatedAt":"2023-03-10T22:04:15","Actor":"MLyons10","Number":"8780","RawContent":null,"Title":"Visual Studio 17.5 and 17.5.1 issues with 3rd party Controls","State":"open","Body":"### Environment\n\n17.5 and 17.5.1\n\n### .NET version\n\nAll\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nYes.  17.4.5 and previous (going back to Visual Studio 2010 or earlier) all worked without issue.\n\n### Issue description\n\nThis is also submitted under Feedback here: https://developercommunity.visualstudio.com/t/Adding-control-libraries-is-not-working/10294562?port=1025&fsid=aba7d08f-0769-43a2-befb-fd6cf5e7cffb&ref=native&refTime=1678485051219&refUserId=842923cd-f358-4b57-af26-82dbd0a8431d&viewtype=all\r\n\r\nBut does not seem to be going anywhere.  There are significant resources attached however, including a demo project, control dlls, and video showing the issue.\r\n\r\nEffectively, this worked without any issue in prior versions of Visual Studio.\r\n\r\nVisual Studio 17.5 seemingly introduced a change in how references were handled, where it automatically attempts to add a reference when a control is dragged onto a form.  If the reference is already added however, the control cannot be added and generates an error that the reference is already added to the project.  This then makes the software unuseable as you must delete the reference between each and every new control that you add to the form and the form designer then cannot display the form if the reference is removed...\r\n\r\nCan this please be corrected?  It is a serious issue.\n\n### Steps to reproduce\n\nOpen a form in the designer.\r\n\r\nDrag a 3rd party control to the form. This then adds a reference to the dll to the project.\r\n\r\nTry to add another control from the same 3rd party control library to the form.  This now generates an error that the control library was already added as a reference and refuses to allow you to add the control to the form.\r\n\r\nDelete the reference to the control library.\r\n\r\nDrag a 3rd party control to the form.  This works and again adds a reference to the dll to the project.\r\n\r\nTry to add another control from the same 3rd party control library to the form.  This now again generates an error that the control library was already added as a reference and refuses again to allow you to add the control to the form.\n\n### Diagnostics\n\n```text\nI believe this is caused by a change in the way Visual Studio 17.5 and 17.5.1 attempt to add references automatically when you add a control to a form / project.  If the reference is already added, Visual Studio should not then attempt to add it again and should not generate an error or refuse to allow you to add the control.\n```\n","Url":"https://github.com/dotnet/winforms/issues/8780","RelatedDescription":"Open issue \"Visual Studio 17.5 and 17.5.1 issues with 3rd party Controls\" (#8780)"},{"Id":"1616260064","IsPullRequest":true,"CreatedAt":"2023-03-10T21:58:16","Actor":"JeremyKuhne","Number":"8771","RawContent":null,"Title":"Fix disabled text label rendering.","State":"closed","Body":"The problem was actually in ControlPaint.DrawStringDisabled that takes an IDeviceContext. In the big refactoring it lost the application of TextFormatFlags to decide whether or not to apply Graphics state. LinkLabel never set those flags historically so it didn't get the clipping it applied to the Graphics object applied to the HDC. Fix is to apply the flags properly.\r\n\r\nI've also cleaned up the LinkLabel code and did a thorough pass of the TextExtensions to bring the code up to snuff.\r\n\r\nFixes https://github.com/dotnet/winforms/issues/7341\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8771)","Url":"https://github.com/dotnet/winforms/pull/8771","RelatedDescription":"Closed or merged PR \"Fix disabled text label rendering.\" (#8771)"},{"Id":"1618651454","IsPullRequest":true,"CreatedAt":"2023-03-10T21:08:28","Actor":"halgab","Number":"8775","RawContent":null,"Title":"Enable nullability in CodeMethodMap","State":"closed","Body":"Contributes to #1107 \r\n\r\nThe first commit is just about nulls. I cleaned up the code a bit in the second commit, but I can revert if that's not welcome\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8775)","Url":"https://github.com/dotnet/winforms/pull/8775","RelatedDescription":"Closed or merged PR \"Enable nullability in CodeMethodMap\" (#8775)"},{"Id":"1618255340","IsPullRequest":true,"CreatedAt":"2023-03-10T20:00:30","Actor":"snnz","Number":"8774","RawContent":null,"Title":"Fix: Do not use fixed index in the TreeNode.PrevNode if the TreeView is sorted","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #8768\r\n\r\nThis corresponds to the following check in `TreeNodeCollection.AddInternal`, that results in the fixed index not being used for node insertion:\r\n\r\n```\r\nif (tv is not null && tv.Sorted)\r\n{\r\n    return owner.AddSorted(node);\r\n}\r\n```\r\n## Regression? \r\n\r\n- No\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8774)","Url":"https://github.com/dotnet/winforms/pull/8774","RelatedDescription":"Closed or merged PR \"Fix: Do not use fixed index in the TreeNode.PrevNode if the TreeView is sorted\" (#8774)"},{"Id":"1619439869","IsPullRequest":true,"CreatedAt":"2023-03-10T19:42:59","Actor":"dotnet-bot","Number":"8778","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2132587","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8778)","Url":"https://github.com/dotnet/winforms/pull/8778","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2132587\" (#8778)"},{"Id":"1615572174","IsPullRequest":true,"CreatedAt":"2023-03-10T18:27:16","Actor":"gpetrou","Number":"8766","RawContent":null,"Title":"Enable nullability in MdiControlStrip","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in MdiControlStrip.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8766)","Url":"https://github.com/dotnet/winforms/pull/8766","RelatedDescription":"Closed or merged PR \"Enable nullability in MdiControlStrip\" (#8766)"},{"Id":"1618948834","IsPullRequest":true,"CreatedAt":"2023-03-10T18:26:06","Actor":"dotnet-maestro[bot]","Number":"8777","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20230309.1\r\n- **Date Produced**: March 9, 2023 3:21:59 PM UTC\r\n- **Commit**: cb64095ec45ac34378a1a26db9932a3b561f9e4e\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.23156.4 to 8.0.0-beta.23159.1][1]\r\n  - **Microsoft.DotNet.CMake.Sdk**: [from 8.0.0-beta.23156.4 to 8.0.0-beta.23159.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 8.0.0-beta.23156.4 to 8.0.0-beta.23159.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.23156.4 to 8.0.0-beta.23159.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 8.0.0-beta.23156.4 to 8.0.0-beta.23159.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.23156.4 to 8.0.0-beta.23159.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/e4e5e16...cb64095\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8777)","Url":"https://github.com/dotnet/winforms/pull/8777","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#8777)"},{"Id":"1618149130","IsPullRequest":true,"CreatedAt":"2023-03-10T18:13:02","Actor":"dotnet-bot","Number":"8773","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2131960","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8773)","Url":"https://github.com/dotnet/winforms/pull/8773","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 164: Build ID 2131960\" (#8773)"},{"Id":"1615236023","IsPullRequest":true,"CreatedAt":"2023-03-10T17:54:03","Actor":"dotnet-maestro[bot]","Number":"8764","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20230310.1\r\n- **Date Produced**: March 10, 2023 11:13:21 AM UTC\r\n- **Commit**: 1d5c424487c476831d9f98b1ca78b4fda6d18066\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Internal.Runtime.WindowsDesktop.Transport**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **Microsoft.NET.Sdk.IL**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **Microsoft.Windows.Compatibility**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.CodeDom**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Drawing.Common**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Text.Encodings.Web**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Text.Json**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.3.23157.1 to 8.0.0-preview.3.23160.1][3]\r\n\r\n[3]: https://github.com/dotnet/runtime/compare/2d5a916...1d5c424\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8764)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/8764","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#8764)"},{"Id":"1615859275","IsPullRequest":true,"CreatedAt":"2023-03-10T17:53:37","Actor":"halgab","Number":"8769","RawContent":null,"Title":"Inline UndoEngine.Trace method","State":"closed","Body":"Contributes to #8203\r\n\r\n\r\n## Proposed changes\r\n\r\nIt's the same story as in #8743. This time I'm inlining a lot more calls though, around 15, so we're paying a higher cost to make the most of interpolated strings.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8769)","Url":"https://github.com/dotnet/winforms/pull/8769","RelatedDescription":"Closed or merged PR \"Inline UndoEngine.Trace method\" (#8769)"},{"Id":"1617888929","IsPullRequest":true,"CreatedAt":"2023-03-09T19:40:16","Actor":"dreddy-work","Number":"8772","RawContent":null,"Title":"[Test] Disable parallel mode for test collections.","State":"open","Body":"Testing theory of \"disabling test collection parallelism may be fixing flaky tests\". \r\n\r\nchanges:\r\n\r\n- Serialize execution of unit tests on build agents.\r\n- Add delay of 500ms after input simulator input action before proceeding with next action/validation.\r\n- Prevent disposing Cursor that is not owned by process.\r\n- Add checks for Cursor/Handle creation and fail fast.\r\n- Block tests against `hsplit.cur` and `vsplit.cur`. They need special attention. Possibly a bug that has been there since Framework.\r\n- Remove collection definition that is not necessary anymore.\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8772)","Url":"https://github.com/dotnet/winforms/pull/8772","RelatedDescription":"Open PR \"[Test] Disable parallel mode for test collections.\" (#8772)"},{"Id":"1615900408","IsPullRequest":false,"CreatedAt":"2023-03-09T01:22:05","Actor":"bernox89","Number":"8770","RawContent":null,"Title":"Developer warning error with 125% DPI","State":"closed","Body":"### Environment\n\nVisual Studio 2022\n\n### .NET version\n\n.net 5/6/7\n\n### Did this work in a previous version of Visual Studio and/or previous .NET release?\n\nNo\n\n### Issue description\n\nI'm aware of the Winforms interface design issue with high DPI, as well as visual studio warns you with that info on startup.  But I want to give voice to the relevant Microsoft teams, that it has become really ugly and frustrating, not being able to use Winforms design with high DPI monitors, (not to mention the unnerving slowness compared to the net framerwork) in fact today who uses a notebook for development has been kicked out, very discriminating and disrespectful towards developers all over the world, who are using Winforms in 80% of cases to develop on Windows platform, it has become impossible to use visual studio in 100% mode, I am on the verge of giving up everything.  I'm sorry to say, but I think Microsoft is not respecting us developers, stopping for a moment to do new things, and last for all the loose ends with Winforms.  It has since net 3.0 that I wait for them to solve, and every holy November I am disappointed, I was hoping that everything would be solved with the net 7. Despite this, with the .net 8 we still don't talk about what to improve with DPI.  Microsoft doesn't just think about MAUI, it also thinks about us at Winforms.\n\n### Steps to reproduce\n\nAny new project \n\n### Diagnostics\n\n_No response_","Url":"https://github.com/dotnet/winforms/issues/8770","RelatedDescription":"Closed issue \"Developer warning error with 125% DPI\" (#8770)"},{"Id":"1615834332","IsPullRequest":false,"CreatedAt":"2023-03-08T19:55:24","Actor":"snnz","Number":"8768","RawContent":null,"Title":"TreeNodeCollection.AddRange works incorrectly for non-empty collection of the sorted TreeView","State":"open","Body":"### .NET version\n\n6.0\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo\n\n### Issue description\n\nWhen the tree nodes are appended to the non-empty `TreeNodeCollection` owned by the sorted `TreeView` with already created underlying window, the resulting order of items in the actual window does not match the one in the collection (which is correct).\r\n\r\nThe cause is how method `TreeNode.PrevNode` works: when called from within `TreeNodeCollection.AddRange` of non-empty collection, it always uses fixed index as the position of the previous node, assuming the normal backward insertion of the nodes in the unsorted tree. Yet in case of the sorted `TreeView`, insertions are made at various positions according to a sort order.\r\n\r\nThere obviously should be a check for the sorted state of the tree in `TreeNode.PrevNode` to avoid this.\n\n### Steps to reproduce\n\n```\r\nnamespace TreeViewTest\r\n{\r\n  internal static class Program\r\n  {\r\n    [STAThread]\r\n    static void Main()\r\n    {\r\n      ApplicationConfiguration.Initialize();\r\n\r\n      var treeView = new TreeView();\r\n      treeView.Nodes.Add(new TreeNode(\"2\"));\r\n      treeView.Sort();\r\n\r\n      var form = new Form();\r\n      form.Controls.Add(treeView);\r\n      form.Load += (sender, e) => treeView.Nodes.AddRange(new TreeNode[] {\r\n        new TreeNode(\"3\"),\r\n        new TreeNode(\"5\"),\r\n        new TreeNode(\"1\"),\r\n        new TreeNode(\"4\")\r\n      });\r\n      Application.Run(form);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis results in:\r\n![Clipboard01](https://user-images.githubusercontent.com/20656895/223826227-6cf6d1aa-3605-4e39-98a8-65116d5db21a.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/8768","RelatedDescription":"Open issue \"TreeNodeCollection.AddRange works incorrectly for non-empty collection of the sorted TreeView\" (#8768)"},{"Id":"1615587387","IsPullRequest":true,"CreatedAt":"2023-03-08T18:43:05","Actor":"gpetrou","Number":"8767","RawContent":null,"Title":"Enable nullability in ShortcutKeysUI","State":"closed","Body":"## Proposed changes\r\n\r\n- Enable nullability in ShortcutKeysUI.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/8767)","Url":"https://github.com/dotnet/winforms/pull/8767","RelatedDescription":"Closed or merged PR \"Enable nullability in ShortcutKeysUI\" (#8767)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-03-12T03:30:33.0427221Z","RunDurationInMilliseconds":592}