{"Data":{"GitHub":{"Issues":[{"Id":"750252373","IsPullRequest":true,"CreatedAt":"2020-11-26T04:55:34","Actor":"dotnet-maestro[bot]","Number":"4276","RawContent":null,"Title":"[release/5.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6d389ecb-0616-453a-2112-08d85e71258f)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 6d389ecb-0616-453a-2112-08d85e71258f\r\n- **Build**: 20201125.16\r\n- **Date Produced**: 11/26/2020 3:40 AM\r\n- **Commit**: b02e13abab3d6f499751af2ad1ae6333fb4e633d\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20574.5 to 5.0.1-servicing.20575.16][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20574.5 to 5.0.1-servicing.20575.16][1]\r\n  - **Microsoft.NETCore.App.Internal**: [from 5.0.1-servicing.20574.5 to 5.0.1-servicing.20575.16][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 5.0.1-servicing.20574.5 to 5.0.1-servicing.20575.16][1]\r\n  - **Microsoft.NETCore.App**: [from 5.0.1-servicing.20574.5 to 5.0.1-servicing.20575.16][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 5.0.1-servicing.20574.5 to 5.0.1-servicing.20575.16][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20574.5 to 5.0.1-servicing.20575.16][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 5.0.1 to 5.0.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 5.0.0 to 5.0.1][2]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/2767f44...b02e13a\r\n[2]: https://github.com/dotnet/runtime/compare/cf258a1...b02e13a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:6d389ecb-0616-453a-2112-08d85e71258f)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4276)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/4276","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dotnet/runtime\" (#4276)"},{"Id":"751231475","IsPullRequest":false,"CreatedAt":"2020-11-26T02:25:56","Actor":"vsfeedback","Number":"4284","RawContent":null,"Title":"VS crashes by resizing DataGridview scrollbars in inheritance when making them permanently visible","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/VS-crashes-by-resizing-DataGridview-scro/1263854?preview=true)._\n\n---\n[severity:It's more difficult to complete my work]\nHello,\nas described and confirmed by an other community member (Timon Yang) VS 2019 crashes when you try to make the vertical and horizontal scrollbar permanently visible independant from the rows and column count. \n\n**Report by Timon Yang:**\nIf I make any changes to it and then run the project, Visual Studio will definitely crash, but after opening Visual Studio again, it won’t crash anymore.\n\nIt is always impossible to operate it in the designer, whether it is moving or deleting, but as long as the relevant code of the horizontal scroll bar is commented, it can be operated normally.\nThis is not a solution to this problem, but a solution for the current situation where this control cannot be operated in the designer.\n\n\n**Link and Code:**\n[https://social.msdn.microsoft.com/Forums/windows/en-US/f91fe749-72d6-4ccc-a41c-0208faddac61/show-always-horizontal-and-vertical-scrollbar-in-a-datagridview?forum=csharpgeneral&prof=required]()\n\n```\n class MyDatagridview : DataGridView\n    {\n        public MyDatagridview()\n        {\n            VerticalScrollBar.Visible = true;\n            HorizontalScrollBar.Visible = true;\n\n            HorizontalScrollBar.VisibleChanged += HorizontalScrollBar_VisibleChanged;\n            VerticalScrollBar.VisibleChanged += VerticalScrollBar_VisibleChanged;\n\n        }\n\n        private void VerticalScrollBar_VisibleChanged(object sender, EventArgs e)\n        {\n            if (!VerticalScrollBar.Visible)\n            {\n                int width = VerticalScrollBar.Width;\n                VerticalScrollBar.Location = new Point(ClientRectangle.Width - width - 1, 1);\n                VerticalScrollBar.Size = new Size(width, ClientRectangle.Height-2);\n                VerticalScrollBar.Show();\n            }\n        }\n\n        private void HorizontalScrollBar_VisibleChanged(object sender, EventArgs e)\n        {\n            if (!HorizontalScrollBar.Visible)\n            {\n                int height = HorizontalScrollBar.Height;\n                HorizontalScrollBar.Location = new Point(1, ClientRectangle.Height - height );\n                HorizontalScrollBar.Size = new Size(ClientRectangle.Width - 2-17,height);\n                HorizontalScrollBar.Show();\n            }\n        }\n    }\n```\n\n---\n### Original Comments\n\n#### Feedback Bot on 11/23/2020, 11:14 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Zheng Li [MSFT] on 11/24/2020, 05:20 PM: \n\n<p>Dear customer, thanks for your feedback.</p>\n<p>The issue can reproduce on side based on your description, want to confirm with you, did you have the same experience than before?</p>\n<p>In addition, the Visual Studio crashed when re-size the DGV or try to delete/Cut it, if these matched your points? and the  issue also can reproduce on .NET Core project.<br>\n<img src=\"https://aka.ms/dc/image?name=B870741ade6d24d0fa413786f5c2d7929637418077160801744_FeedBackRepro1.gif&amp;tid=870741ade6d24d0fa413786f5c2d7929637418077160801744\" alt=\"FeedBackRepro1.gif\"><br>\n<img src=\"https://aka.ms/dc/image?name=B78fffb2bdd59470b949951bb290d0fcd637418077340278881_FeedBackRepro2.gif&amp;tid=78fffb2bdd59470b949951bb290d0fcd637418077340278881\" alt=\"FeedBackRepro2.gif\"></p>\n<p><img src=\"https://aka.ms/dc/image?name=B283e85fb87eb48c7a9a0a3c09b23aacc637418077458786075_FeedBackRepro3.gif&amp;tid=283e85fb87eb48c7a9a0a3c09b23aacc637418077458786075\" alt=\"FeedBackRepro3.gif\"></p>\n<p><a target='_blank' href=\"https://aka.ms/dc/file?name=Ba3984f57450e4ccea36a7461685f99cb637418077646832590_FeedBack1.zip&amp;tid=a3984f57450e4ccea36a7461685f99cb637418077646832590\">FeedBack1.zip</a></p>\n<p>Thanks<br>\nZheng</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/winforms/issues/4284","RelatedDescription":"Open issue \"VS crashes by resizing DataGridview scrollbars in inheritance when making them permanently visible\" (#4284)"},{"Id":"750684367","IsPullRequest":true,"CreatedAt":"2020-11-25T23:17:52","Actor":"RussKie","Number":"4281","RawContent":null,"Title":"fix: Prevent GC'on of native callback","State":"closed","Body":"\r\nFixes #4264\r\n\r\n(cherry picked from commit 9b140c0952647840d8f1b6984a812c548b002738)\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n## Proposed changes\r\n\r\nThe native callback can be garbage collected even in a simple app, which leads to an app crash with ExecutionEngineException.\r\nThe issue can be observed even in an app as simple as:\r\n```cs\r\nnamespace repro_listview\r\n{\r\n    static class Program\r\n    {\r\n        [STAThread]\r\n        static void Main()\r\n        {\r\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\r\n            Application.EnableVisualStyles();\r\n            Application.SetCompatibleTextRenderingDefault(false);\r\n\r\n            var f = new Form();\r\n            var listView = new ListView();\r\n\r\n            f.Controls.Add(listView);\r\n\r\n            listView.Items.Add(\"A\");\r\n            listView.Items.Add(\"Z\");\r\n            listView.Items.Add(\"X\");\r\n            listView.ListViewItemSorter = new TestComparer();\r\n\r\n            Application.Run(f);\r\n        }\r\n\r\n        class TestComparer : Comparer<ListViewItem>\r\n        {\r\n            public override int Compare(ListViewItem x, ListViewItem y)\r\n            {\r\n                GC.Collect();\r\n                Thread.Sleep(10);\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Interacting with a `ListView` with sort enabled won't be crashing an app due to a GC'ed native callback.\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual, by replacing binaries in C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App\\6.0.0-alpha.1.20570.2\r\n- no automation test could be devised as the problem couldn't be reproduced from the Windows Forms codebase, either 5.0 or 6.0 branches\r\n\r\n\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4280)\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4281)","Url":"https://github.com/dotnet/winforms/pull/4281","RelatedDescription":"Closed or merged PR \"fix: Prevent GC'on of native callback\" (#4281)"},{"Id":"750790908","IsPullRequest":false,"CreatedAt":"2020-11-25T12:50:59","Actor":"kirsan31","Number":"4283","RawContent":null,"Title":"MonthCalendar: UpdateBoldedDates flickers and resets DisplayRange","State":"open","Body":"* .NET Core Version: **all**\r\n\r\n* Have you experienced this same bug with .NET Framework?: **yes**\r\n\r\n**Problem description:**\r\nAfter you changed BoldedDates in MonthCalendar you need to call `UpdateBoldedDates` method to see visual changes. The problem is that [UpdateBoldedDates](https://github.com/dotnet/winforms/blob/6391b524dd64e7530eba986c6607bf129b3ec8ae/src/System.Windows.Forms/src/System/Windows/Forms/MonthCalendar.cs#L1967) simple calling `RecreateHandle`. That's leads to 2 problems:\r\n1. Control fully redrawing with heavy flickering.\r\n2. If `MonthCalendar` displaying more than one months, you are not on the first page and selected date not in the last month, than  control will scroll one page back - reset current DisplayRange.\r\n![MonthCalendar](https://user-images.githubusercontent.com/17767561/100223926-2f634200-2f2d-11eb-8d06-062265b5c5a7.gif)\r\n\r\nI think that the **1** problem appear due to not using `MCM_SETDAYSTATE`. Only `MCN_GETDAYSTATE` is using, so you need full redraw to process all dates. \r\n**2** problem appear due to that [OnHandleCreated](https://github.com/dotnet/winforms/blob/6391b524dd64e7530eba986c6607bf129b3ec8ae/src/System.Windows.Forms/src/System/Windows/Forms/MonthCalendar.cs#L1386)  not care at all of  DisplayRange (only `SelectionRange` is taken into account).\r\nIt can be workaround in user code with something like this:\r\n```cs\r\nmonthCalendar1.SuspendLayout();\r\nvar v = monthCalendar1.GetDisplayRange(true);\r\nvar MinDate = monthCalendar1.MinDate;\r\nvar MaxDate = monthCalendar1.MaxDate;\r\nmonthCalendar1.MinDate = v.Start;\r\nmonthCalendar1.MaxDate = v.End;\r\nmonthCalendar1.UpdateBoldedDates();\r\nmonthCalendar1.MinDate = MinDate;\r\nmonthCalendar1.MaxDate = MaxDate;\r\nmonthCalendar1.ResumeLayout();\r\n```\r\nSomething similar can be added to `OnHandleCreated`. But I think that most efficient way is to solve **1** issue  - use `MCM_SETDAYSTATE`  with all changes to `BoldedDates` (`AnnuallyBoldedDates`, `BoldedDates`, `MonthlyBoldedDates`, `UpdateBoldedDates`). Then **2** will be solve _automatically_.\r\n\r\n**Expected behavior:**\r\nNo flickering and no DisplayRange reset.\r\n\r\n\r\n**Minimal repro:**\r\n[MonthCalendar.zip](https://github.com/dotnet/winforms/files/5596679/MonthCalendar.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/4283","RelatedDescription":"Open issue \"MonthCalendar: UpdateBoldedDates flickers and resets DisplayRange\" (#4283)"},{"Id":"750763710","IsPullRequest":true,"CreatedAt":"2020-11-25T12:08:41","Actor":"SergeySmirnov-Akvelon","Number":"4282","RawContent":null,"Title":"Adding border for focused ToolStripButton in PropertyGrid","State":"open","Body":"Fixes #4268\r\n\r\n## Proposed changes\r\n- Added a special method for high contrast mode that draws a black and white dashed border\r\n- Added a special method for normal mode that draws a dashed border\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n**Before fix:**\r\n![100072081-c5886100-2e76-11eb-92f5-390882b13f65](https://user-images.githubusercontent.com/23376742/100229792-d51aaf00-2f35-11eb-8625-d9fd9c79bbea.png)\r\n\r\n**After fix:**\r\nNormal mode:\r\n![Issue-4282-NormalMode](https://user-images.githubusercontent.com/23376742/100229857-ecf23300-2f35-11eb-8b77-93d02c3ac487.gif)\r\nHigh Contrast 1:\r\n![Issue-4282-HC1](https://user-images.githubusercontent.com/23376742/100229952-0dba8880-2f36-11eb-9a85-3eb83b8087c7.gif)\r\n\r\nHigh Contrast 2:\r\n![Issue-4282-HC2](https://user-images.githubusercontent.com/23376742/100230189-70ac1f80-2f36-11eb-9463-28dfe1a1a5dc.gif)\r\n\r\nHigh Contrast Black:\r\n![Issue-4282-HCB](https://user-images.githubusercontent.com/23376742/100230209-786bc400-2f36-11eb-9b24-2770ccd1abb1.gif)\r\n\r\nHigh Contrast White:\r\n![Issue-4282-HCW](https://user-images.githubusercontent.com/23376742/100230230-7e61a500-2f36-11eb-88b7-81bbd8788eba.gif)\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n- Manually \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n- Microsoft Windows [Version 10.0.19041.388]\r\n- .NET Core 5.0.100-rc.1.20420.14\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4282)","Url":"https://github.com/dotnet/winforms/pull/4282","RelatedDescription":"Open PR \"Adding border for focused ToolStripButton in PropertyGrid\" (#4282)"},{"Id":"750551986","IsPullRequest":true,"CreatedAt":"2020-11-25T09:52:03","Actor":"RussKie","Number":"4280","RawContent":null,"Title":"fix: Prevent GC'on of native callback","State":"closed","Body":"\r\n\r\nFixes #4264\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n## Proposed changes\r\n\r\nThe native callback can be garbage collected even in a simple app, which leads to an app crash with ExecutionEngineException.\r\nThe issue can be observed even in an app as simple as:\r\n```cs\r\nnamespace repro_listview\r\n{\r\n    static class Program\r\n    {\r\n        [STAThread]\r\n        static void Main()\r\n        {\r\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\r\n            Application.EnableVisualStyles();\r\n            Application.SetCompatibleTextRenderingDefault(false);\r\n\r\n            var f = new Form();\r\n            var listView = new ListView();\r\n\r\n            f.Controls.Add(listView);\r\n\r\n            listView.Items.Add(\"A\");\r\n            listView.Items.Add(\"Z\");\r\n            listView.Items.Add(\"X\");\r\n            listView.ListViewItemSorter = new TestComparer();\r\n\r\n            Application.Run(f);\r\n        }\r\n\r\n        class TestComparer : Comparer<ListViewItem>\r\n        {\r\n            public override int Compare(ListViewItem x, ListViewItem y)\r\n            {\r\n                GC.Collect();\r\n                Thread.Sleep(10);\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Interacting with a `ListView` with sort enabled won't be crashing an app due to a GC'ed native callback.\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual, by replacing binaries in C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App\\6.0.0-alpha.1.20570.2\r\n- no automation test could be devised as the problem couldn't be reproduced from the Windows Forms codebase, either 5.0 or 6.0 branches\r\n\r\n\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4280)","Url":"https://github.com/dotnet/winforms/pull/4280","RelatedDescription":"Closed or merged PR \"fix: Prevent GC'on of native callback\" (#4280)"},{"Id":"748147247","IsPullRequest":false,"CreatedAt":"2020-11-25T09:52:03","Actor":"dhrdlicka","Number":"4264","RawContent":null,"Title":"ListView.Items.Add throws ExecutionEngineException with custom ListViewItemSorter","State":"closed","Body":"* .NET Core Version: 5.0.100\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\n\r\nListView.Items.Add throws ExecutionEngineException upon reaching a certain number of items in the ListView when ListView.ListViewItemSorter is used to sort the items.\r\n\r\nThe exact number might vary on the specific use case and machine setup. The repro linked below crashes on my machine after ~130 added items, although I have observed numbers as low as 16 in a project of mine.\r\n\r\nThis didn't happen in .NET Core 3.1.\r\n\r\nStack trace:\r\n```\r\nProcess terminated. A callback was made on a garbage collected delegate of type 'System.Windows.Forms.Primitives!System.Windows.Forms.NativeMethods+ListViewCompareCallback::Invoke'.\r\nRepeat 2 times:\r\n--------------------------------\r\n   at Interop+User32.CallWindowProcW(IntPtr, IntPtr, WM, IntPtr, IntPtr)\r\n--------------------------------\r\n   at System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.ListView.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr, WM, IntPtr, IntPtr)\r\n   at Interop+User32.SendMessageW(IntPtr, WM, IntPtr, IntPtr)\r\n   at Interop+User32.SendMessageW(IntPtr, WM, IntPtr, IntPtr)\r\n   at System.Windows.Forms.ListView.Sort()\r\n   at System.Windows.Forms.ListView.InsertItems(Int32, System.Windows.Forms.ListViewItem[], Boolean)\r\n   at System.Windows.Forms.ListView+ListViewNativeItemCollection.Add(System.Windows.Forms.ListViewItem)\r\n   at System.Windows.Forms.ListView+ListViewItemCollection.Add(System.Windows.Forms.ListViewItem)\r\n   at ListViewRepro.MainForm.AddFruit()\r\n   at ListViewRepro.MainForm.MainForm_Shown(System.Object, System.EventArgs)\r\n   at System.Windows.Forms.Form.OnShown(System.EventArgs)\r\n   at System.Windows.Forms.Form.CallShownEvent()\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackDo(ThreadMethodEntry)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackHelper(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallback(ThreadMethodEntry)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbacks()\r\n   at System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.ScrollableControl.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Form.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.Control+ControlNativeWindow.WndProc(System.Windows.Forms.Message ByRef)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr, WM, IntPtr, IntPtr)\r\n   at Interop+User32.DispatchMessageW(MSG ByRef)\r\n   at Interop+User32.DispatchMessageW(MSG ByRef)\r\n   at System.Windows.Forms.Application+ComponentManager.Interop.Mso.IMsoComponentManager.FPushMessageLoop(UIntPtr, msoloop, Void*)\r\n   at System.Windows.Forms.Application+ThreadContext.RunMessageLoopInner(msoloop, System.Windows.Forms.ApplicationContext)\r\n   at System.Windows.Forms.Application+ThreadContext.RunMessageLoop(msoloop, System.Windows.Forms.ApplicationContext)\r\n   at System.Windows.Forms.Application.Run(System.Windows.Forms.Form)\r\n   at ListViewRepro.Program.Main()\r\n```\r\n\r\n**Expected behavior:**\r\nListView.Add does not throw ExecutionEngineException.\r\n\r\n**Minimal repro:**\r\nhttps://github.com/dhrdlicka/ListViewRepro (The LVIS assignment is commented out in the MainForm constructor as the same project serves as repro on another issue as well)","Url":"https://github.com/dotnet/winforms/issues/4264","RelatedDescription":"Closed issue \"ListView.Items.Add throws ExecutionEngineException with custom ListViewItemSorter\" (#4264)"},{"Id":"750460362","IsPullRequest":false,"CreatedAt":"2020-11-25T05:24:40","Actor":"paul1956","Number":"4279","RawContent":null,"Title":"SplashScreen form not shown unless Startup Form set to Sub Main","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\nMicrosoft.WindowsDesktop.App 5.0.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nIn Framework SplashScreen is shown if one is defined in project file and Project Startup object is set to Form1. In Core the splash screen is only shown if Startup object is set to Sub Main\r\n\r\n**Expected behavior:**\r\nSplashScreen is shown if Startup object is set to Form1\r\n\r\n**Minimal repro:**\r\nhttps://github.com/paul1956/WinForms5VBSample\r\n","Url":"https://github.com/dotnet/winforms/issues/4279","RelatedDescription":"Open issue \"SplashScreen form not shown unless Startup Form set to Sub Main\" (#4279)"},{"Id":"750312189","IsPullRequest":true,"CreatedAt":"2020-11-25T02:44:17","Actor":"RussKie","Number":"4277","RawContent":null,"Title":"Revert \"Explicit ImageList ownership management. (#3601)\"","State":"open","Body":"This reverts commit 03db3fbfcc6884356f70141f882433638b23bb49.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4277)","Url":"https://github.com/dotnet/winforms/pull/4277","RelatedDescription":"Open PR \"Revert \"Explicit ImageList ownership management. (#3601)\"\" (#4277)"},{"Id":"750138823","IsPullRequest":false,"CreatedAt":"2020-11-24T23:20:15","Actor":"AustinWise","Number":"4275","RawContent":null,"Title":"ListView redraws when images are added to its ImageList","State":"open","Body":"* .NET Core Version: release/5.0 branch (af41134ff98cf2793a2fcf40f21f95dc94f3ee79), includes #4222\r\n\r\n* Have you experienced this same bug with .NET Framework?: No. The problem is also not in .NET Core 3.1.\r\n\r\n**Problem description:**\r\n\r\nWhen adding a image to the ImageList, the entire contents of a ListView that is using that ImageList is redrawn. This causes it flicker and if there are enough item, it slows down the app. This seems to be causes by the fix in #4222. Every time an image is added to an image list, the `ImageList.RecreateHandle` event is raised. This causes the ListView to call `ImageList.CreateUniqueHandle`, which always creates a copy of the native image list.\r\n\r\n**Expected behavior:**\r\n\r\nI think to prevent the redrawing the `ImageList` needs to share the underlying native image list with the `ListView`, instead of giving it a new copy every time an image is added. This would prevent the `ListView` from redrawing unnecessarily.\r\n\r\nI know y'all recently change the lifetime management in #3601 to fix some crashes, so I understand this might not be an easy fix.\r\n\r\n**Minimal repro:**\r\n\r\n```c#\r\nusing System;\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nclass MyForm : Form\r\n{\r\n    [STAThread]\r\n    static void Main()\r\n    {\r\n        Application.SetHighDpiMode(HighDpiMode.SystemAware);\r\n        Application.EnableVisualStyles();\r\n        Application.SetCompatibleTextRenderingDefault(false);\r\n        Application.Run(new MyForm());\r\n    }\r\n\r\n    ListView lv;\r\n    ImageList il;\r\n    Timer tmr;\r\n\r\n    MyForm()\r\n    {\r\n        tmr = new Timer\r\n        {\r\n            Interval = 100,\r\n        };\r\n        il = new ImageList()\r\n        {\r\n        };\r\n        lv = new ListView()\r\n        {\r\n            LargeImageList = il,\r\n            View = View.LargeIcon,\r\n            Dock = DockStyle.Fill,\r\n        };\r\n        this.Controls.Add(lv);\r\n\r\n        var red = new Bitmap(il.ImageSize.Width, il.ImageSize.Height);\r\n        using (var g = Graphics.FromImage(red))\r\n            g.Clear(Color.Red);\r\n        int redIndex = il.Images.Add(red, Color.Transparent);\r\n\r\n        for (int i = 0; i < 1000; i++)\r\n        {\r\n            var lvi = new ListViewItem(i.ToString(), redIndex);\r\n            lv.Items.Add(lvi);\r\n        }\r\n\r\n        this.WindowState = FormWindowState.Maximized;\r\n        this.Load += MyForm_Load;\r\n        tmr.Tick += Tmr_Tick;\r\n    }\r\n\r\n    private void MyForm_Load(object sender, EventArgs e)\r\n    {\r\n        tmr.Enabled = true;\r\n    }\r\n\r\n    private void Tmr_Tick(object sender, EventArgs e)\r\n    {\r\n        il.Images.Add(new Bitmap(il.ImageSize.Width, il.ImageSize.Height), Color.Transparent);\r\n    }\r\n}\r\n\r\n```","Url":"https://github.com/dotnet/winforms/issues/4275","RelatedDescription":"Open issue \"ListView redraws when images are added to its ImageList\" (#4275)"},{"Id":"750104257","IsPullRequest":true,"CreatedAt":"2020-11-24T22:40:54","Actor":"dotnet-maestro[bot]","Number":"4273","RawContent":null,"Title":"[release/5.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6d389ecb-0616-453a-2112-08d85e71258f)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 6d389ecb-0616-453a-2112-08d85e71258f\r\n- **Build**: 20201124.5\r\n- **Date Produced**: 11/24/2020 9:20 PM\r\n- **Commit**: 2767f4466bd3fe4e3678510aba636b66f02b11b4\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20572.4 to 5.0.1-servicing.20574.5][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20572.4 to 5.0.1-servicing.20574.5][1]\r\n  - **Microsoft.NETCore.App.Internal**: [from 5.0.1-servicing.20572.4 to 5.0.1-servicing.20574.5][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 5.0.1-servicing.20572.4 to 5.0.1-servicing.20574.5][1]\r\n  - **Microsoft.NETCore.App**: [from 5.0.1-servicing.20572.4 to 5.0.1-servicing.20574.5][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 5.0.1-servicing.20572.4 to 5.0.1-servicing.20574.5][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20572.4 to 5.0.1-servicing.20574.5][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 5.0.1 to 5.0.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/e564220...2767f44\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:6d389ecb-0616-453a-2112-08d85e71258f)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4273)","Url":"https://github.com/dotnet/winforms/pull/4273","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dotnet/runtime\" (#4273)"},{"Id":"749916717","IsPullRequest":false,"CreatedAt":"2020-11-24T17:47:54","Actor":"rlktradewright","Number":"4272","RawContent":null,"Title":"ActiveX support in .Net 5 Windows Forms designer?","State":"open","Body":"* .NET Core Version: \r\n.Net 5\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nThe Windows Forms designer for .Net 5 appears to be brain-dead with regard to ActiveX controls.\r\n\r\nI have not succeeded in getting any ActiveX controls working in the Toolbox. The 'Choose items' dialog says:\r\n\r\n_'The following controls were successfully added to the toolbox but are not enabled in the active designer. .... Make sure the controls to add are compatible with the current designer and .Net Framework version.'_\r\n\r\nWell, the controls are all perfectly compatible with .Net 5 and work fine if they are manually included in the form design, so I have to conclude that the current version of the designer simply doesn't do ActiveX.\r\n\r\nPlease confirm this, and indicate whether there is likely to be full support for ActiveX controls any time soon.\r\n\r\nOr tell me what I'm doing wrong!...\r\n\r\n**Expected behavior:**\r\n\r\nThe chosen ActiveX control should appear in the Toolbox and create the control properly when applied to the form.\r\n\r\n**Minimal repro:**\r\n\r\nFor example:\r\n\r\n1. Create new .Net 5 C# Windows Forms app in Visual Studio 2019 v16.8 or later\r\n2. Right-click on a category header in the Toolbox and Select 'Choose Items...' .\r\n3. On the 'COM Components' tab of the 'Choose Toolbox Items 'dialog, set the checkbox for a control (for example the Calendar Control 8.0 is conveniently near the top of the list).\r\n4. A new window appears with the error message shown in the description above. The control is not visible in the Toolbox.\r\n","Url":"https://github.com/dotnet/winforms/issues/4272","RelatedDescription":"Open issue \"ActiveX support in .Net 5 Windows Forms designer?\" (#4272)"},{"Id":"749687508","IsPullRequest":true,"CreatedAt":"2020-11-24T13:01:29","Actor":"dotnet-maestro[bot]","Number":"4271","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20201123.2\r\n- **Date Produced**: 11/23/2020 7:34 PM\r\n- **Commit**: 35bddd4fbfab8da3518fb920250d7c9e0c3138ff\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.20567.7 to 6.0.0-beta.20573.2][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.20567.7 to 6.0.0-beta.20573.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.20567.7 to 6.0.0-beta.20573.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.20567.7 to 6.0.0-beta.20573.2][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.20567.7 to 6.0.0-beta.20573.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/a9a80fb...35bddd4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4271)\r\n","Url":"https://github.com/dotnet/winforms/pull/4271","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#4271)"},{"Id":"749558411","IsPullRequest":false,"CreatedAt":"2020-11-24T12:06:35","Actor":"MojoDK","Number":"4269","RawContent":null,"Title":"The 'Windows Forms Remote Designer Hosting Package' package did not load correctly.","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\nNet5.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\nCreating a new project gives me this error:\r\n\r\n![image](https://user-images.githubusercontent.com/1185948/100077821-18e0bc00-2e43-11eb-9e79-fc0aa17943b5.png)\r\n\r\nActivity log:\r\n\r\n```\r\n<entry>\r\n    <record>2302</record>\r\n    <time>2020/11/24 09:58:18.678</time>\r\n    <type>Information</type>\r\n    <source>VisualStudio</source>\r\n    <description>Begin package load [Windows Forms Remote Designer Hosting Package]</description>\r\n    <guid>{C78CA057-CC29-421F-AD6D-3B0943DEBDFC}</guid>\r\n  </entry>\r\n  <entry>\r\n    <record>2303</record>\r\n    <time>2020/11/24 09:58:18.679</time>\r\n    <type>Error</type>\r\n    <source>VisualStudio</source>\r\n    <description>CreateInstance failed for package [Windows Forms Remote Designer Hosting Package]Source: &apos;mscorlib&apos; Description: Could not load type &apos;Microsoft.VisualStudio.Design.VSDesignPackage&apos; from assembly &apos;Microsoft.VisualStudio.WinForms.Package, Version=0.3.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&apos;.&#x000D;&#x000A;System.TypeLoadException: Could not load type &apos;Microsoft.VisualStudio.Design.VSDesignPackage&apos; from assembly &apos;Microsoft.VisualStudio.WinForms.Package, Version=0.3.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&apos;.&#x000D;&#x000A;   at System.Reflection.RuntimeAssembly.GetType(RuntimeAssembly assembly, String name, Boolean throwOnError, Boolean ignoreCase, ObjectHandleOnStack type)&#x000D;&#x000A;   at System.Reflection.RuntimeAssembly.GetType(String name, Boolean throwOnError, Boolean ignoreCase)&#x000D;&#x000A;   at System.Activator.CreateInstanceFromInternal(String assemblyFile, String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, Evidence securityInfo)&#x000D;&#x000A;   at System.AppDomain.CreateInstanceFrom(String assemblyFile, String typeName)</description>\r\n    <guid>{C78CA057-CC29-421F-AD6D-3B0943DEBDFC}</guid>\r\n    <hr>80004005 - E_FAIL</hr>\r\n    <errorinfo></errorinfo>\r\n  </entry>\r\n\r\n```\r\nRestarting VS does not help.\r\n\r\nWhen trying to open Form1 designer, I get this error:\r\n\"The designer could not  be shown for this file because none of the classes within it can be designed.  The designer inspected the following classes in the file: Form1 --- The base  class 'System.Windows.Forms.Form' could not be loaded. Ensure the assembly has  been referenced and that all projects have been built. |   | The designer could not  be shown for this file because none of the classes within it can be designed.  The designer inspected the following classes in the file: Form1 --- The base  class 'System.Windows.Forms.Form' could not be loaded. Ensure the assembly has  been referenced and that all projects have been built.\"\r\n\r\n**Expected behavior:**\r\n\r\n\r\n**Minimal repro:**\r\nCreate new project and I got the error right away...\r\n![2020-11-24_10-58-39](https://user-images.githubusercontent.com/1185948/100078809-35c9bf00-2e44-11eb-8dbd-7310c0cf084e.gif)\r\n","Url":"https://github.com/dotnet/winforms/issues/4269","RelatedDescription":"Closed issue \"The 'Windows Forms Remote Designer Hosting Package' package did not load correctly.\" (#4269)"},{"Id":"749515307","IsPullRequest":false,"CreatedAt":"2020-11-24T09:03:02","Actor":"Olina-Zhang","Number":"4268","RawContent":null,"Title":"[Accessibility]HighContrast: ToolStripButtons in PropertyGrid should have obvious distinct between focused and checked status","State":"open","Body":"* .NET Core Version: \r\n6.0.100-aipha.1.20573.16\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Minimal repro:**\r\n1. Extract following attached app and open it in VS\r\n[WinFormsApp30.zip](https://github.com/dotnet/winforms/files/5588567/WinFormsApp30.zip)\r\n2. Set Windows as HighContrast modes: HC Black/White/#1/#2\r\n3. Build and run the project.\r\n4. Press \"Right/Left\" arrow to focus on \"Categorized\", \"Alphabetical\" and \" Property Pages\" toolStripbuttons.\r\n\r\n**Actual behavior:**\r\nToolStripButtons in PropertyGrid have no obvious distinct between focused and checked status in HC themes\r\n![image](https://user-images.githubusercontent.com/26474449/100072081-c5886100-2e76-11eb-92f5-390882b13f65.png)\r\n\r\n**Expected behavior:**\r\nMake focused and checked tool strip buttons look more distinct in HC themes","Url":"https://github.com/dotnet/winforms/issues/4268","RelatedDescription":"Open issue \"[Accessibility]HighContrast: ToolStripButtons in PropertyGrid should have obvious distinct between focused and checked status\" (#4268)"},{"Id":"747281010","IsPullRequest":false,"CreatedAt":"2020-11-24T05:46:22","Actor":"Jessie-Zhang01","Number":"4260","RawContent":null,"Title":"RichTextBox Monospace Font Rendering is Broken","State":"closed","Body":"* .NET Core Version: \r\n.Net 6.0.100-alpha.1.20568.7 from master branch\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**More Info:**\r\n\r\n1. This issue also can reproduce on .Net Core 3.1.\r\n2. This is a regression issue, it can reproduce from .Net framework 4.7 to 4.8, but cannot reproduce on .Net Framework 4.6.2. In addition, from .Net framework 4.7 to 4.8, there is a workaround: add the quirk to the App.config file.\r\n ```\r\n <runtime>\r\n\t<AppContextSwitchOverrides value=\"Switch.System.Windows.Forms.DoNotLoadLatestRichEditControl=true\"/>\r\n</runtime>\r\n ```\r\n\r\n**Minimal repro:**\r\n\r\n1. Extract the [RichTextBoxDemo.zip](https://github.com/dotnet/winforms/files/5572035/RichTextBoxDemo.zip) and open it in VS.\r\n2. Build and run this application.\r\n3. Observe the length of Text in RichTextBox.\r\n\r\n**Expected behavior:**\r\nThe Text of the same length in the RichTextBox should be consistent.\r\n![image](https://user-images.githubusercontent.com/45864649/99774896-5e527000-2b49-11eb-9b6a-ed9b99cb6787.png)\r\n\r\n**Actual behavior:**\r\nThe text of the same length in the RichTextBox is not consistent.\r\n![image](https://user-images.githubusercontent.com/45864649/99774721-277c5a00-2b49-11eb-9b26-a58cafa78498.png)\r\n![image](https://user-images.githubusercontent.com/45864649/99774827-44b12880-2b49-11eb-9f88-36987a397498.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/4260","RelatedDescription":"Closed issue \"RichTextBox Monospace Font Rendering is Broken\" (#4260)"},{"Id":"747625060","IsPullRequest":false,"CreatedAt":"2020-11-24T05:44:43","Actor":"CBrauer","Number":"4261","RawContent":null,"Title":"Windows Forms App (.NET) .NET5.0 SkiaSharp throws Attempted to read or write protected memory","State":"closed","Body":"# Issue\r\nI have built a Windows Forms App (.NET) using .NET 5.0 rc2 and SkiaSharp. It is throwing the error: “Message=Attempted to read or write protected memory. This is often an indication that other memory is corrupt.”\r\n\r\n# General\r\n\r\nI have put my reproducible solution on GitHub at: https://github.com/CBrauer/TestSkia\r\nI hope you guys can use this complete solution to fix the error.\r\n\r\n# Environment\r\nMicrosoft Windows 10 Enterprise, version 10.0,19042 Build 19042\r\nMicrosoft Visual Studio Professional 2019 Preview Version 16.9.0 Preview 1.0\r\n.NET 5.0 rc2\r\n\r\nCharles\r\n","Url":"https://github.com/dotnet/winforms/issues/4261","RelatedDescription":"Closed issue \"Windows Forms App (.NET) .NET5.0 SkiaSharp throws Attempted to read or write protected memory\" (#4261)"},{"Id":"748946429","IsPullRequest":true,"CreatedAt":"2020-11-23T22:33:36","Actor":"mmitche","Number":"4266","RawContent":null,"Title":"Enable post-build signing","State":"closed","Body":"Enables post build signing. This repo will discontinue signing in-build and instead the entire product will sign all at once in the staging pipelines.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4266)","Url":"https://github.com/dotnet/winforms/pull/4266","RelatedDescription":"Closed or merged PR \"Enable post-build signing\" (#4266)"},{"Id":"748995680","IsPullRequest":true,"CreatedAt":"2020-11-23T18:46:21","Actor":"dotnet-maestro[bot]","Number":"4267","RawContent":null,"Title":"[release/5.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6d389ecb-0616-453a-2112-08d85e71258f)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 6d389ecb-0616-453a-2112-08d85e71258f\r\n- **Build**: 20201122.4\r\n- **Date Produced**: 11/23/2020 4:47 PM\r\n- **Commit**: e564220b5228e7d26a959dcecec62e6c98d8cbb7\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20570.12 to 5.0.1-servicing.20572.4][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20570.12 to 5.0.1-servicing.20572.4][1]\r\n  - **Microsoft.NETCore.App.Internal**: [from 5.0.1-servicing.20570.12 to 5.0.1-servicing.20572.4][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 5.0.1-servicing.20570.12 to 5.0.1-servicing.20572.4][1]\r\n  - **Microsoft.NETCore.App**: [from 5.0.1-servicing.20570.12 to 5.0.1-servicing.20572.4][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 5.0.1-servicing.20570.12 to 5.0.1-servicing.20572.4][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20570.12 to 5.0.1-servicing.20572.4][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 5.0.1 to 5.0.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/9ecbcd7...e564220\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:6d389ecb-0616-453a-2112-08d85e71258f)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4267)","Url":"https://github.com/dotnet/winforms/pull/4267","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dotnet/runtime\" (#4267)"},{"Id":"746564050","IsPullRequest":true,"CreatedAt":"2020-11-23T07:26:41","Actor":"dotnet-maestro[bot]","Number":"4258","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20201117.7\r\n- **Date Produced**: 11/18/2020 12:05 AM\r\n- **Commit**: a9a80fb35d2e7da21509441d665a40022ce8f1b4\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.20566.3 to 6.0.0-beta.20567.7][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.20566.3 to 6.0.0-beta.20567.7][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.20566.3 to 6.0.0-beta.20567.7][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.20566.3 to 6.0.0-beta.20567.7][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.20566.3 to 6.0.0-beta.20567.7][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/7a2f81b...a9a80fb\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4258)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/4258","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4258)"},{"Id":"748447565","IsPullRequest":false,"CreatedAt":"2020-11-23T04:05:50","Actor":"RussKie","Number":"4265","RawContent":null,"Title":"Sited `ImageList` attached to `ListView` detached twice","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET 5.0 RTM, .NET 6.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nA sited `ImageList` (i.e. added to an `IContainer`) \r\n```cs\r\nimageList = new System.Windows.Forms.ImageList(this.components);\r\n```\r\n\r\nthat is shared across several properties (e.g. `LargeImageList` and `SmallImageList`) upon the container disposal will be detached trice tripping on an assert (on the 2nd and 3rd re-entries):\r\nhttps://github.com/dotnet/winforms/blob/26ee7b5fea05516d1caa83b94995c54115c148a1/src/System.Windows.Forms/src/System/Windows/Forms/ListView.cs#L2978-L2988\r\n\r\nThe first time `DetachImageList` is called, the `sender` will be equal to both `_imageListSmall` and `_imageListLarge`, on the 2nd and the 3rd entries the `sender` won't be equal to any of those since they were nulled out on the 1st call, but the instance of the imagelist would be the same as the one that was bound to those properties.\r\n\r\nThis doesn't happen if an imagelist is not sited, i.e. \r\n```cs\r\nimageList = new System.Windows.Forms.ImageList();\r\n```\r\n\r\nWhen the imagelist is not sited, whenever the form is closed, the listivew is getting disposed, and it detaches event handlers before unsetting imagelists:\r\n```\r\n>\tSystem.Windows.Forms.dll!System.Windows.Forms.ListView.DetachSmallImageListListHandlers() Line 3042\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ListView.Dispose(bool disposing = true) Line 3073\tC#\tSymbols loaded.\r\n \tSystem.ComponentModel.Primitives.dll!System.ComponentModel.Component.Dispose() Line 74\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.Dispose(bool disposing = true) Line 5167\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ContainerControl.Dispose(bool disposing = true) Line 607\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Form.Dispose(bool disposing = true) Line 3309\tC#\tSymbols loaded.\r\n \tListViewRepro.dll!ListViewRepro.MainForm.Dispose(bool disposing = true) Line 20\tC#\tSymbols loaded.\r\n```\r\n\r\nHowever in \"sited\" case, the container will invoke the dispose sequence before we dispose the imagelist, and thus detach imagelist handlers:\r\n```\r\n>\tSystem.Windows.Forms.dll!System.Windows.Forms.ListView.DetachImageList(object sender = {System.Windows.Forms.ImageList}, System.EventArgs e = {System.EventArgs}) Line 2984\tC#\tSymbols loaded.\r\n \tSystem.ComponentModel.Primitives.dll!System.ComponentModel.Component.Dispose(bool disposing)\tUnknown\tNo symbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ImageList.Dispose(bool disposing = true) Line 538\tC#\tSymbols loaded.\r\n \tSystem.ComponentModel.Primitives.dll!System.ComponentModel.Component.Dispose()\tUnknown\tNo symbols loaded.\r\n \tSystem.ComponentModel.TypeConverter.dll!System.ComponentModel.Container.Dispose(bool disposing)\tUnknown\tNo symbols loaded.\r\n \tSystem.ComponentModel.TypeConverter.dll!System.ComponentModel.Container.Dispose()\tUnknown\tNo symbols loaded.\r\n \tListViewRepro.dll!ListViewRepro.MainForm.Dispose(bool disposing = true) Line 18\tC#\tSymbols loaded.\r\n```\r\n\r\n**Expected behavior:**\r\n\r\n\r\n**Minimal repro:**\r\n\r\n```cs\r\n    public partial class MainForm : Form\r\n    {\r\n        private System.ComponentModel.IContainer components = null;\r\n        private System.Windows.Forms.ListView listView;\r\n\r\n        public MainForm()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        protected override void Dispose(bool disposing)\r\n        {\r\n            if (disposing && (components != null))\r\n            {\r\n                components.Dispose();\r\n            }\r\n            base.Dispose(disposing);\r\n        }\r\n\r\n        private void InitializeComponent()\r\n        {\r\n            this.components = new System.ComponentModel.Container();\r\n            System.Windows.Forms.ImageList imageList;\r\n            this.listView = new System.Windows.Forms.ListView();\r\n            imageList = new System.Windows.Forms.ImageList(this.components);\r\n            this.SuspendLayout();\r\n            // \r\n            // imageList\r\n            // \r\n            imageList.ColorDepth = System.Windows.Forms.ColorDepth.Depth32Bit;\r\n            imageList.ImageSize = new System.Drawing.Size(16, 16);\r\n            imageList.TransparentColor = System.Drawing.Color.Transparent;\r\n            // \r\n            // listView\r\n            // \r\n            this.listView.Dock = System.Windows.Forms.DockStyle.Fill;\r\n            this.listView.HideSelection = false;\r\n            this.listView.Location = new System.Drawing.Point(0, 0);\r\n            this.listView.Name = \"listView\";\r\n            this.listView.Size = new System.Drawing.Size(686, 390);\r\n            this.listView.LargeImageList = imageList;\t\t\t\t// \r\n            this.listView.SmallImageList = imageList;\t\t\t\t// sharing is important!\r\n            this.listView.TabIndex = 0;\r\n            this.listView.UseCompatibleStateImageBehavior = false;\r\n            // \r\n            // MainForm\r\n            // \r\n            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\r\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\r\n            this.ClientSize = new System.Drawing.Size(686, 390);\r\n            this.Controls.Add(this.listView);\r\n            this.Name = \"MainForm\";\r\n            this.Text = \"MainForm\";\r\n            this.ResumeLayout(false);\r\n\r\n        }\r\n    }\r\n```\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/4265","RelatedDescription":"Open issue \"Sited `ImageList` attached to `ListView` detached twice\" (#4265)"},{"Id":"748143311","IsPullRequest":false,"CreatedAt":"2020-11-23T00:59:39","Actor":"dhrdlicka","Number":"4263","RawContent":null,"Title":"ListView does not display icons for items added after the form has been loaded","State":"closed","Body":"* .NET Core Version: 5.0.100\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\n\r\nListView renders items added after the form has been loaded without their icons. This happens regardless of the configured view.\r\n\r\nThe provided repro adds 50 items in the constructor, Form.Load handler and Form.Shown handler respectively. As you can see, only the first 50 items are displayed with icons, although all items are generated and added by the same function.\r\n![image](https://user-images.githubusercontent.com/13226155/99891805-3e689c80-2c6e-11eb-96fa-7302c6af9121.png)\r\n\r\n**Expected behavior:**\r\nThe same project built for .NET Core 3.1:\r\n![image](https://user-images.githubusercontent.com/13226155/99891844-a7e8ab00-2c6e-11eb-9c3c-3e848842fd15.png)\r\n\r\n\r\n**Minimal repro:**\r\nhttps://github.com/dhrdlicka/ListViewRepro","Url":"https://github.com/dotnet/winforms/issues/4263","RelatedDescription":"Closed issue \"ListView does not display icons for items added after the form has been loaded\" (#4263)"},{"Id":"747919312","IsPullRequest":true,"CreatedAt":"2020-11-21T04:32:35","Actor":"dotnet-maestro[bot]","Number":"4262","RawContent":null,"Title":"[release/5.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6d389ecb-0616-453a-2112-08d85e71258f)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 6d389ecb-0616-453a-2112-08d85e71258f\r\n- **Build**: 20201120.12\r\n- **Date Produced**: 11/21/2020 3:35 AM\r\n- **Commit**: 9ecbcd746c9648d00d4bf98bf15f31e21e01db6e\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20568.11 to 5.0.1-servicing.20570.12][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20568.11 to 5.0.1-servicing.20570.12][1]\r\n  - **Microsoft.NETCore.App.Internal**: [from 5.0.1-servicing.20568.11 to 5.0.1-servicing.20570.12][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 5.0.1-servicing.20568.11 to 5.0.1-servicing.20570.12][1]\r\n  - **Microsoft.NETCore.App**: [from 5.0.1-servicing.20568.11 to 5.0.1-servicing.20570.12][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 5.0.1-servicing.20568.11 to 5.0.1-servicing.20570.12][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20568.11 to 5.0.1-servicing.20570.12][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 5.0.1 to 5.0.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/a05d753...9ecbcd7\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:6d389ecb-0616-453a-2112-08d85e71258f)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4262)","Url":"https://github.com/dotnet/winforms/pull/4262","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dotnet/runtime\" (#4262)"},{"Id":"747039573","IsPullRequest":true,"CreatedAt":"2020-11-20T00:26:26","Actor":"AdamYoblick","Number":"4259","RawContent":null,"Title":"**NO-MERGE** Proof of concept for running unit tests through helix","State":"open","Body":"Fixes #3140 \r\nFixes https://github.com/dotnet/winforms-designer/issues/1732\r\n\r\nThis work is tracked by https://github.com/dotnet/winforms-designer/issues/1732 in the winforms-designer repo.\r\n\r\nThis task is mostly done, but there are still some remaining tasks:\r\n\r\n1. Scaling to other OS's if we choose to (this is easy, just add to the `_HelixTargetQueues` variables in the yaml.\r\n1. Fixing the few unit tests that are failing\r\n1. Fixing the integration tests.\r\n   * This one is the biggest task, as it's not as simple as unit tests. See https://github.com/dotnet/winforms-designer/issues/1732#issuecomment-729954799 for details.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4259)","Url":"https://github.com/dotnet/winforms/pull/4259","RelatedDescription":"Open PR \"**NO-MERGE** Proof of concept for running unit tests through helix\" (#4259)"},{"Id":"746209074","IsPullRequest":true,"CreatedAt":"2020-11-19T03:31:10","Actor":"dotnet-maestro[bot]","Number":"4257","RawContent":null,"Title":"[release/5.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6d389ecb-0616-453a-2112-08d85e71258f)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 6d389ecb-0616-453a-2112-08d85e71258f\r\n- **Build**: 20201118.11\r\n- **Date Produced**: 11/19/2020 2:25 AM\r\n- **Commit**: a05d7533168a89e5ddd8eaedfd2c03adc0b8d10b\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20568.8 to 5.0.1-servicing.20568.11][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20568.8 to 5.0.1-servicing.20568.11][1]\r\n  - **Microsoft.NETCore.App.Internal**: [from 5.0.1-servicing.20568.8 to 5.0.1-servicing.20568.11][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 5.0.1-servicing.20568.8 to 5.0.1-servicing.20568.11][1]\r\n  - **Microsoft.NETCore.App**: [from 5.0.1-servicing.20568.8 to 5.0.1-servicing.20568.11][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 5.0.1-servicing.20568.8 to 5.0.1-servicing.20568.11][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20568.8 to 5.0.1-servicing.20568.11][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 5.0.1 to 5.0.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/87bc28f...a05d753\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:6d389ecb-0616-453a-2112-08d85e71258f)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4257)","Url":"https://github.com/dotnet/winforms/pull/4257","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dotnet/runtime\" (#4257)"},{"Id":"746133333","IsPullRequest":true,"CreatedAt":"2020-11-19T00:33:40","Actor":"dotnet-maestro[bot]","Number":"4256","RawContent":null,"Title":"[release/5.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6d389ecb-0616-453a-2112-08d85e71258f)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 6d389ecb-0616-453a-2112-08d85e71258f\r\n- **Build**: 20201118.8\r\n- **Date Produced**: 11/18/2020 11:14 PM\r\n- **Commit**: 87bc28f8c846a0d58764eb73e694ace2f2c6e87c\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20568.5 to 5.0.1-servicing.20568.8][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20568.5 to 5.0.1-servicing.20568.8][1]\r\n  - **Microsoft.NETCore.App.Internal**: [from 5.0.1-servicing.20568.5 to 5.0.1-servicing.20568.8][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 5.0.1-servicing.20568.5 to 5.0.1-servicing.20568.8][1]\r\n  - **Microsoft.NETCore.App**: [from 5.0.1-servicing.20568.5 to 5.0.1-servicing.20568.8][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 5.0.1-servicing.20568.5 to 5.0.1-servicing.20568.8][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20568.5 to 5.0.1-servicing.20568.8][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 5.0.1 to 5.0.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/51873a0...87bc28f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:6d389ecb-0616-453a-2112-08d85e71258f)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4256)","Url":"https://github.com/dotnet/winforms/pull/4256","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dotnet/runtime\" (#4256)"},{"Id":"746099635","IsPullRequest":false,"CreatedAt":"2020-11-18T22:55:31","Actor":"samsp-msft","Number":"4255","RawContent":null,"Title":"Survey: Repo contribution experience, Fall 2020","State":"open","Body":"We normally focus on how to improve the product, but we’re also turning our focus to improving the open source project. Periodically we are running a survey to collect feedback on your experience working with our repos. We did one back in May, and as its been about 6 months, its about time for another. We’ve created a survey to better understand your individual experience of participating and contributing in this project.\r\n\r\nWe would appreciate your feedback so we can work to address shortcomings and missed opportunities. If you don’t supply contact details, then responses will be anonymous.\r\n\r\n[Survey](https://www.surveymonkey.com/r/92RLF7R?Source=dotnet/winforms)\r\n\r\nThank you for your time!\r\n","Url":"https://github.com/dotnet/winforms/issues/4255","RelatedDescription":"Open issue \"Survey: Repo contribution experience, Fall 2020\" (#4255)"},{"Id":"745968654","IsPullRequest":true,"CreatedAt":"2020-11-18T20:35:21","Actor":"dotnet-maestro[bot]","Number":"4254","RawContent":null,"Title":"[release/5.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6d389ecb-0616-453a-2112-08d85e71258f)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 6d389ecb-0616-453a-2112-08d85e71258f\r\n- **Build**: 20201118.5\r\n- **Date Produced**: 11/18/2020 7:22 PM\r\n- **Commit**: 51873a07965f04c4c1d43a674311a606ab5dda8f\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20567.14 to 5.0.1-servicing.20568.5][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20567.14 to 5.0.1-servicing.20568.5][1]\r\n  - **Microsoft.NETCore.App.Internal**: [from 5.0.1-servicing.20567.14 to 5.0.1-servicing.20568.5][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 5.0.1-servicing.20567.14 to 5.0.1-servicing.20568.5][1]\r\n  - **Microsoft.NETCore.App**: [from 5.0.1-servicing.20567.14 to 5.0.1-servicing.20568.5][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 5.0.1-servicing.20567.14 to 5.0.1-servicing.20568.5][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20567.14 to 5.0.1-servicing.20568.5][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 5.0.1 to 5.0.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/030f593...51873a0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:6d389ecb-0616-453a-2112-08d85e71258f)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4254)","Url":"https://github.com/dotnet/winforms/pull/4254","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dotnet/runtime\" (#4254)"},{"Id":"745846739","IsPullRequest":true,"CreatedAt":"2020-11-18T17:45:24","Actor":"dotnet-maestro[bot]","Number":"4252","RawContent":null,"Title":"[release/5.0] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6d389ecb-0616-453a-2112-08d85e71258f)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 6d389ecb-0616-453a-2112-08d85e71258f\r\n- **Build**: 20201117.14\r\n- **Date Produced**: 11/18/2020 4:21 PM\r\n- **Commit**: 030f5933e2f82bd8fceff166fc578020943a6b11\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20567.12 to 5.0.1-servicing.20567.14][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20567.12 to 5.0.1-servicing.20567.14][1]\r\n  - **Microsoft.NETCore.App.Internal**: [from 5.0.1-servicing.20567.12 to 5.0.1-servicing.20567.14][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 5.0.1-servicing.20567.12 to 5.0.1-servicing.20567.14][1]\r\n  - **Microsoft.NETCore.App**: [from 5.0.1-servicing.20567.12 to 5.0.1-servicing.20567.14][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 5.0.1-servicing.20567.12 to 5.0.1-servicing.20567.14][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 5.0.1-servicing.20567.12 to 5.0.1-servicing.20567.14][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 5.0.1 to 5.0.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/06330b8...030f593\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:6d389ecb-0616-453a-2112-08d85e71258f)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4252)","Url":"https://github.com/dotnet/winforms/pull/4252","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dotnet/runtime\" (#4252)"},{"Id":"750117048","IsPullRequest":false,"CreatedAt":"2020-11-14T22:16:21","Actor":"augustoproiete","Number":"4274","RawContent":null,"Title":"Calls to comctl32.dll succeed in .NET 4.8, but fail in .NET 5 with System.EntryPointNotFoundException","State":"open","Body":"* .NET Core Version: **5.0.100** and **3.1.404**\r\n* Windows version: **Windows 10** (18363.1139)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: **No**\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? **No**\r\n\r\n **Problem description:**\r\n \r\nCalls to `comctl32.dll` succeed in .NET Framework 4.8, but fail in .NET 5 and also in .NET Core 3.1 with a `System.EntryPointNotFoundException`.\r\n\r\ne.g.\r\n\r\n```csharp\r\n[DllImport(\"comctl32.dll\", PreserveSig = false)]\r\nprivate static extern void TaskDialogIndirect([In] ref TaskDialogConfig pTaskConfig, out int pnButton,\r\n    out int pnRadioButton, [MarshalAs(UnmanagedType.Bool)] out bool pfVerificationFlagChecked);\r\n\r\n// ...\r\n\r\nvar config = new TaskDialogConfig\r\n{\r\n    pszWindowTitle = \"Task dialog title\",\r\n    pszMainInstruction = \"Task dialog main instruction\",\r\n    dwCommonButtons = TaskDialogCommonButtonFlags.OkButton | TaskDialogCommonButtonFlags.CancelButton,\r\n    // ...\r\n};\r\n\r\nusing (new ComCtlv6ActivationContext(enable: true))\r\n{\r\n    TaskDialogIndirect(ref config, out _, out _, out _);\r\n}\r\n```\r\n\r\n **Actual behavior:**\r\n\r\n![image](https://user-images.githubusercontent.com/177608/99158014-8d2d9980-26a4-11eb-95c9-8ecd3e366fff.png)\r\n\r\n```\r\nSystem.EntryPointNotFoundException: Unable to find an entry point named 'TaskDialogIndirect' in DLL 'comctl32.dll'.\r\n   at TaskDialogApi.TaskDialog.TaskDialogIndirect(TaskDialogConfig& pTaskConfig, Int32& pnButton, Int32& pnRadioButton, Boolean& pfVerificationFlagChecked)\r\n```\r\n \r\n **Expected behavior:**\r\n \r\nDisplay the Task Dialog requested\r\n\r\n![image](https://user-images.githubusercontent.com/177608/99158064-22309280-26a5-11eb-9d4a-fa7b5a58d6a5.png)\r\n\r\n **Minimal repro:**\r\n\r\n- [repro-wpf-net5-comctl32-entrypointnotfoundexception](https://github.com/augustoproiete-repros/repro-wpf-net5-comctl32-entrypointnotfoundexception)\r\n","Url":"https://github.com/dotnet/winforms/issues/4274","RelatedDescription":"Open issue \"Calls to comctl32.dll succeed in .NET 4.8, but fail in .NET 5 with System.EntryPointNotFoundException\" (#4274)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-11-26T05:30:48.8215169Z","RunDurationInMilliseconds":654}