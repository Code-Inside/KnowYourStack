{"Data":{"GitHub":{"Issues":[{"Id":"623564107","IsPullRequest":false,"CreatedAt":"2020-05-23T02:39:32","Actor":"jscholes","Number":"3334","RawContent":null,"Title":"Accessibility: problematic screen reader UX for ContextMenuStrip (NVDA)","State":"open","Body":"* .NET Core Version: 3.1\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n#### Problem description:\r\n\r\nWhen using the standard `ContextMenu` removed in https://github.com/dotnet/winforms/pull/2157, NVDA announces \"Context Menu\" when the menu opens.  With `ContextMenuStrip`, NVDA doesn't announce anything on pop-up (not even the presence of a menu without an accessible name), meaning that a user has no idea that a menu has been invoked.\r\n\r\n#### Expected behavior:\r\n\r\nNVDA will announce \"Context Menu\" on pop-up.\r\n\r\n#### Minimal repro:\r\n\r\n```\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nnamespace Test {\r\n\tpublic class MainWindow : Form {\r\n\t\tpublic MainWindow() {\r\n\t\t\tthis.ClientSize = new Size(800, 450);\r\n\t\t\tthis.Text = \"Context Menu Accessibility\";\r\n\t\t\tthis.AutoScaleDimensions = new SizeF(6F, 13F);\r\n\t\t\tthis.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\r\n\t\t\tthis.SuspendLayout();\r\n\t\t\tthis.InitializeControls();\r\n\t\t\tthis.ResumeLayout(false);\r\n\t\t\tthis.PerformLayout();\r\n\t\t}\r\n\r\n\t\tprivate void InitializeControls() {\r\n\t\t\tButton aButton = new Button{\r\n\t\t\t\tText=\"Button with a ContextMenuStrip\"\r\n\t\t\t};\r\n\t\t\tContextMenuStrip ctxMenu = new ContextMenuStrip();\r\n\t\t\tctxMenu.Items.Add(\"Item &1\");\r\n\t\t\tctxMenu.Items.Add(\"Item &2\");\r\n\t\t\tctxMenu.Items.Add(\"Item &3\");\r\n\t\t\taButton.ContextMenuStrip = ctxMenu;\r\n\t\t\tthis.Controls.Add(aButton);\r\n\t\t}\r\n\r\n\t\tprotected override void Dispose(bool disposing) {\r\n\t\t\tbase.Dispose(disposing);\r\n\t\t}\r\n\t}\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/3334","RelatedDescription":"Open issue \"Accessibility: problematic screen reader UX for ContextMenuStrip (NVDA)\" (#3334)"},{"Id":"623390966","IsPullRequest":false,"CreatedAt":"2020-05-22T18:01:55","Actor":"yashimwong","Number":"3333","RawContent":null,"Title":"Missing items during adding to MenuToolStrip in designer mode","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version:  3.1.300\r\n\r\n* Have you experienced this same bug with .NET Framework?:  No\r\n\r\n**Problem description:**\r\n- When adding items to MenuToolStrip in the designer mode, when switching to code and switching back, items added is suddenly missing in the designer but retains in WinForm auto-generated code.\r\n\r\n**Expected behavior:**\r\n- Items should not be missing after adding\r\n","Url":"https://github.com/dotnet/winforms/issues/3333","RelatedDescription":"Open issue \"Missing items during adding to MenuToolStrip in designer mode\" (#3333)"},{"Id":"623303950","IsPullRequest":false,"CreatedAt":"2020-05-22T15:49:44","Actor":"DualBrain","Number":"3332","RawContent":null,"Title":"Initializing and immediately adding an image as a resource fails until you close and reopen.","State":"open","Body":"* .NET Core Version: \r\n\r\n3.1 in VS 16.6 (release version)\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n\r\nNo\r\n\r\n**Problem description:**\r\n\r\nWhen initialize the resource file, switch to the image tab (without first closing), add an item (without first closing) and it is added to the resources folder but disappears from the actual resource list.  Have to reopen and re-add the item - after this takes place things are working as expected.\r\n\r\nNOTE: I don't know if this is a VB only behavior; I haven't tried this in C#.\r\n\r\n**Expected behavior:**\r\n\r\nInitialize the resource, switch to the image tab, add an item and it actually work.\r\n\r\n**Minimal repro:**\r\n\r\nCreate a Console application (VB).  Change the project so that it is as follows:\r\n\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n  <PropertyGroup>\r\n    <OutputType>WinExe</OutputType>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n    <UseWindowsForms>true</UseWindowsForms>\r\n  </PropertyGroup>\r\n</Project>\r\n\r\nModify Program.vb...\r\n\r\nImports System.Windows.Forms\r\n\r\nModule Program\r\n  <STAThread>\r\n  Sub Main()\r\n    Application.SetHighDpiMode(HighDpiMode.SystemAware)\r\n    Application.EnableVisualStyles()\r\n    Application.SetCompatibleTextRenderingDefault(False)\r\n    Application.Run(New Form1())\r\n  End Sub\r\nEnd Module\r\n\r\nUnload project, reload project.\r\n\r\nOpen project properties, click on Resources.  Click on the \"link\" to create resources... switch to images, drag an image to the list and close.\r\n\r\nThe image is placed in the Resources folder; however, it disappears from the actual resources list.  I've tried this several different ways and it does seem to be only associated with the initial creation of the resources and immediately adding an image (resource).  If you create the resources, close (save) and then reopen before adding the initial image... things appear to work.","Url":"https://github.com/dotnet/winforms/issues/3332","RelatedDescription":"Open issue \"Initializing and immediately adding an image as a resource fails until you close and reopen.\" (#3332)"},{"Id":"623186793","IsPullRequest":true,"CreatedAt":"2020-05-22T12:55:20","Actor":"gpetrou","Number":"3331","RawContent":null,"Title":"Enable and fix CA1825 warnings","State":"open","Body":"## Proposed changes\r\n\r\n- Enable and fix CA1825 warnings\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3331)","Url":"https://github.com/dotnet/winforms/pull/3331","RelatedDescription":"Open PR \"Enable and fix CA1825 warnings\" (#3331)"},{"Id":"623163835","IsPullRequest":true,"CreatedAt":"2020-05-22T12:39:38","Actor":"dotnet-maestro[bot]","Number":"3330","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200521.10\r\n- **Date Produced**: 5/22/2020 7:29 AM\r\n- **Commit**: c44dc40b763b7c74012622a0a6120cd8ffa35ce4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20270.12 to 5.0.0-preview.6.20271.10\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3330)","Url":"https://github.com/dotnet/winforms/pull/3330","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3330)"},{"Id":"623068333","IsPullRequest":false,"CreatedAt":"2020-05-22T09:08:45","Actor":"nawfalhasan","Number":"3329","RawContent":null,"Title":"Support abstract base class in designer ","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nProblem: Unable to open up a form that inherits from an abstract form class.\r\n\r\n**Description:**\r\nWhen a form inherits from a abstract class, the designer of the more derived type cant be opened.\r\n\r\n**Example:**\r\n\r\n    public abstract class FormBase : Form\r\n    {\r\n        protected FormBase()\r\n        {\r\n        }\r\n    }\r\n\r\n    public class FormDerived : FormBase\r\n    {\r\n        public FormDerived()\r\n        {\r\n        }\r\n    }\r\n \r\nNow `FormDerived` in the designer wouldn't open up. \r\n\r\n**Error when I try today:**\r\nFrom the designer: \r\n> The designer must create an instance of type 'Xxx.Common.Presentation.Mvvm.FormBase' but it cannot because the type is declared as abstract. \r\n\r\nCall stack:\r\n\r\n>at System.ComponentModel.Design.Serialization.CodeDomSerializerBase.Error(IDesignerSerializationManager manager, String exceptionText, String helpLink)\r\nat System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(IDesignerSerializationManager manager, CodeTypeDeclaration declaration)\r\nat System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager manager)\r\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager)\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager)\r\nat System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad(IDesignerLoaderHost host) \r\n\r\n**Solution I would like**: \r\nOpening up the form designer should work any time from VS. Just like it opens up if base class is a regular class. The designer should design the first base class which can be instantiated (walking up the inheritance chain). In the above example it would be `Form`.\r\n\r\n**What I tried:**\r\nThis is the most commonly seen hack on internet:\r\n\r\n    [TypeDescriptionProvider(typeof(GenericControlDescriptionProvider))]\r\n    public abstract class FormBase : Form\r\n    {\r\n        protected FormBase()\r\n        {\r\n        }\r\n    }\r\n\r\n    class GenericControlDescriptionProvider : TypeDescriptionProvider\r\n    {\r\n        public GenericControlDescriptionProvider()\r\n            : base(TypeDescriptor.GetProvider(typeof(ContainerControl)))\r\n        {\r\n        }\r\n\r\n        public override Type GetReflectionType(Type objectType, object instance)\r\n        {\r\n            Type designerType = GetTypeForDesigner(objectType);\r\n            if (designerType != null)\r\n            {\r\n                return designerType;\r\n            }\r\n\r\n            return base.GetReflectionType(objectType, instance);\r\n        }\r\n\r\n        public override object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, object[] args)\r\n        {\r\n            Type designerType = GetTypeForDesigner(objectType);\r\n            if (designerType != null)\r\n            {\r\n                objectType = designerType;\r\n            }\r\n\r\n            return base.CreateInstance(provider, objectType, argTypes, args);\r\n        }\r\n\r\n        static Type GetTypeForDesigner(Type actualTypeVsIsTryingToDesign)\r\n        {\r\n            if (actualTypeVsIsTryingToDesign.IsSubclassOf(typeof(UserControl)))\r\n            {\r\n                return typeof(UserControl);\r\n            }\r\n\r\n            if (actualTypeVsIsTryingToDesign.IsSubclassOf(typeof(Form)))\r\n            {\r\n                return typeof(Form);\r\n            }\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\nBut then again it doesn't work flawlessly. Project has to be rebuilt sometimes, sometimes VS has to be restarted etc. Doesn't work always","Url":"https://github.com/dotnet/winforms/issues/3329","RelatedDescription":"Open issue \"Support abstract base class in designer \" (#3329)"},{"Id":"623058559","IsPullRequest":false,"CreatedAt":"2020-05-22T08:51:19","Actor":"nawfalhasan","Number":"3328","RawContent":null,"Title":"Support generic base class in designer","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nProblem: Unable to open up a form that inherits from a generic form class without building project.\r\n\r\n**Description:**\r\nWhen a form inherits from a common base class like `FormBase<T>`, the designer of the more derived type cant be opened without building the project in VS.\r\n\r\n**Example:**\r\n\r\n    public class FormBase<T> : Form\r\n    {\r\n        protected FormBase()\r\n        {\r\n        }\r\n    }\r\n\r\n    public class FormDerived : FormBase<DerivedViewModel>\r\n    {\r\n        public FormDerived()\r\n        {\r\n        }\r\n    }\r\n \r\nNow `FormDerived` in the designer wouldn't open up easily. Sometimes building VS is required to open up the designer, sometimes restarting VS and building is required. \r\n\r\n**Error when I try today:**\r\nFrom the designer: \r\n> The designer could not be shown for this file because none of the classes within it can be designed. The designer inspected the following classes in the file: FormDerived --- The base class 'Xxx.Common.Presentation.Mvvm.FormBase`1' could not be loaded. Ensure the assembly has been referenced and that all projects have been built. \r\n\r\nCall stack:\r\n\r\n> at System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.EnsureDocument(IDesignerSerializationManager manager)\r\nat System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager manager)\r\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager)\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager)\r\nat System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad(IDesignerLoaderHost host) \r\n\r\n**Solution I would like**: \r\nOpening up the form designer should work any time from VS. Just like it opens up if base class is a regular class.\r\n\r\n**Related info:**\r\n1. Here MS staff confirms this feature is on the roadmap. I am here trying to create a github issue for tracking. https://devblogs.microsoft.com/dotnet/windows-forms-designer-for-net-core-released/#comment-5898\r\n\r\n2. Similar thread before https://github.com/dotnet/roslyn/issues/4987","Url":"https://github.com/dotnet/winforms/issues/3328","RelatedDescription":"Open issue \"Support generic base class in designer\" (#3328)"},{"Id":"622390187","IsPullRequest":true,"CreatedAt":"2020-05-22T05:28:41","Actor":"weltkante","Number":"3321","RawContent":null,"Title":"manually release ITypeInfo references (missed one)","State":"closed","Body":"Fixes #3305\r\nRelates to #3271\r\n\r\n## Proposed changes\r\nRelease ITypeInfo RCW manually instead of letting the GC clean up. Original PR #3315 missed one reference, this generally made the test run more stable but it was still flaky.\r\n\r\n## Customer Impact\r\nTests should become more stable regardless how they are run\r\n\r\n## Regression? \r\nYes (after merging PR #3276)\r\n\r\n## Risk\r\nno known risk\r\n\r\n### Before\r\nTests start failing after PR #3276\r\nTest were still failing occasionally after PR #3315\r\n\r\n### After\r\nTests should succeed even more before and after PR #3276\r\n\r\n## Test methodology\r\n* Locally running (a lot of) tests with PR #3276\r\n* Running PR #3276 with this fix on the CI machine (this PR is extracted from the nuget package update since it may still need some time)\r\n* going through the test file and looking for ITypeInfo references\r\n\r\n## Test environment(s)\r\nlocal & CI\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3321)","Url":"https://github.com/dotnet/winforms/pull/3321","RelatedDescription":"Closed or merged PR \"manually release ITypeInfo references (missed one)\" (#3321)"},{"Id":"622171504","IsPullRequest":false,"CreatedAt":"2020-05-21T20:57:19","Actor":"paul1956","Number":"3318","RawContent":null,"Title":"Winforms Designer in Version 16.7.0 Preview 1.0 Not Working with Visual Basic","State":"closed","Body":"* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo also not with Visual Studio 16.6.0\r\n\r\n**Problem description:**\r\nAttempting to open any VB form in designer by clicking on any Visual Basic Windows Form you will see the 2 error dialogs at the bottom \r\n A sample project you can use is https://github.com/kpreisser/TaskDialogDemo.git  and it has a C# and VB identical project the C# one works and the VB one does not.\r\n\r\nAny forms operation after this will return just the second error.\r\n\r\n**Expected behavior:**\r\n\r\n![image](https://user-images.githubusercontent.com/12789369/82511140-5b56c400-9ac1-11ea-9519-49378f117fb6.png)\r\n\r\n**Minimal repro:**\r\n\r\n![image](https://user-images.githubusercontent.com/12789369/82510834-7543d700-9ac0-11ea-8f3e-2f78445fc88b.png)\r\n![image](https://user-images.githubusercontent.com/12789369/82510869-8987d400-9ac0-11ea-84f5-932471f50d72.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/3318","RelatedDescription":"Closed issue \"Winforms Designer in Version 16.7.0 Preview 1.0 Not Working with Visual Basic\" (#3318)"},{"Id":"622765846","IsPullRequest":true,"CreatedAt":"2020-05-21T20:43:11","Actor":"dotnet-maestro[bot]","Number":"3327","RawContent":null,"Title":"[release/5.0-preview5] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:67c9bc50-cce6-417c-985c-08d7f21e18b5)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: 67c9bc50-cce6-417c-985c-08d7f21e18b5\r\n- **Build**: 20200518.11\r\n- **Date Produced**: 5/21/2020 7:26 PM\r\n- **Commit**: 201841eea7a9a62374666edbf02e9421a0fd6675\r\n- **Branch**: refs/heads/release/5.0-preview5\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.CodeDom**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.Security.Permissions**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.Drawing.Common**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.5.20268.9 to 5.0.0-preview.5.20268.11\r\n\r\n[marker]: <> (End:67c9bc50-cce6-417c-985c-08d7f21e18b5)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3327)","Url":"https://github.com/dotnet/winforms/pull/3327","RelatedDescription":"Closed or merged PR \"[release/5.0-preview5] Update dependencies from dotnet/runtime\" (#3327)"},{"Id":"622749577","IsPullRequest":true,"CreatedAt":"2020-05-21T20:06:13","Actor":"hughbe","Number":"3326","RawContent":null,"Title":"Structify VARIANT and use in more places","State":"open","Body":"Extracted from #3197 \r\n\r\nThis PR is limited to making `VARIANT` blittable, using it in more places (and fixing some memory bugs in x64!) and fixing a bug made in porting `~VARENUM.TYPEMASK` instead of `VARENUM.TYPEMASK`\r\n\r\nThe idea is that this should be semi-trivial to merge and will make the above PR easier to review as functionality in that PR should be limited to making `ToObject` actually work in the way it should\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3326)","Url":"https://github.com/dotnet/winforms/pull/3326","RelatedDescription":"Open PR \"Structify VARIANT and use in more places\" (#3326)"},{"Id":"622457024","IsPullRequest":true,"CreatedAt":"2020-05-21T12:40:28","Actor":"dotnet-maestro[bot]","Number":"3325","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200520.12\r\n- **Date Produced**: 5/21/2020 6:04 AM\r\n- **Commit**: 5b7d6319ec8ff44c7eda6f8358e29cfdd53d81b5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.CodeDom**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.Security.Permissions**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.Drawing.Common**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.6.20264.1 to 5.0.0-preview.6.20270.12\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3325)","Url":"https://github.com/dotnet/winforms/pull/3325","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3325)"},{"Id":"622402477","IsPullRequest":true,"CreatedAt":"2020-05-21T10:23:09","Actor":"hughbe","Number":"3324","RawContent":null,"Title":"Cleanup CopyMemory/WideCharToMultiByte","State":"open","Body":"## Proposed Changes\r\n- Cleanup CopyMemory/WideCharToMultiByte\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3324)","Url":"https://github.com/dotnet/winforms/pull/3324","RelatedDescription":"Open PR \"Cleanup CopyMemory/WideCharToMultiByte\" (#3324)"},{"Id":"622392573","IsPullRequest":true,"CreatedAt":"2020-05-21T10:04:57","Actor":"hughbe","Number":"3323","RawContent":null,"Title":"Move FileDialogNative code to modern interop model","State":"open","Body":"## Proposed Changes\r\n- Move FileDialogNative code to modern interop model\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3323)","Url":"https://github.com/dotnet/winforms/pull/3323","RelatedDescription":"Open PR \"Move FileDialogNative code to modern interop model\" (#3323)"},{"Id":"622390595","IsPullRequest":false,"CreatedAt":"2020-05-21T10:01:26","Actor":"Jessie-Zhang01","Number":"3322","RawContent":null,"Title":"Brightness contrast of the control boundary line is less than 3:1","State":"open","Body":"* .NET Core Version: .Net Core 5.0.100-preview.6.20270.51\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes \r\n\r\n**Related test scenarios:**\r\n\r\n- The contrast of control default status(non-focused, unselected).\r\n\r\n  - Affected controls:\r\n    - [ ] Button\r\n    - [ ] ComboBox(DropDownStyle = DropDownList)\r\n    - [ ] TooStrip(ProgressBar, Button) \r\n    - [ ] DataGridView(Inner boundary line)\r\n    - [ ] PropertyGrid\r\n    - [ ] RichTextBox\r\n    - [ ] ProgressBar\r\n    - [ ] DomainUpDown\r\n    - [ ] GroupBox\r\n    - [ ] NumericUpDown\r\n    - [ ] MonthCanlendar\r\n    - [ ] StatusStrip\r\n    - [ ] TabControl\r\n\r\n- The contrast of control focused, unselected status.\r\n\r\n  - Affected controls: \r\n    - [ ] ContextMenuStrip\r\n    - [ ] MenuStrip\r\n    - [ ] ToolStrip (Button)\r\n\r\n- The contrast of control focused, selected status.\r\n\r\n  - Affected controls: \r\n    - [ ] CheckedListBox\r\n    - [ ] ComboBox(DropDownStyle = DropDownList)\r\n    - [ ] ListBox\r\n    - [ ] ListView\r\n    - [ ] TreeView\r\n\r\n**Minimal repro:**\r\n1.\tInstall the Accessibility Insights from https://accessibilityinsights.io/en/downloads.\r\n2.\tCreate a winforms core project.\r\n3.\tAdd a control in the Form designer, build and run this project.\r\n4.\tOpen the Accessibility Insights and select the Contrast of the directory on the left.\r\n5.\tClick on the color picker under Color1 and focus it to the border lines of the control.\r\n6.\tClick on the color picker under Color2 and focus it to the background of the control.\r\n\r\n**Expected behavior:**\r\nThe brightness contrast of the control boundary line should be greater than 3:1.\r\n\r\n**Actual behavior:**\r\nBrightness contrast of the control boundary line is less than 3:1.\r\n![image](https://user-images.githubusercontent.com/45864649/82546135-3da16180-9b8a-11ea-9933-4b57706ddd06.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3322","RelatedDescription":"Open issue \"Brightness contrast of the control boundary line is less than 3:1\" (#3322)"},{"Id":"622280266","IsPullRequest":false,"CreatedAt":"2020-05-21T06:28:11","Actor":"mgholam","Number":"3320","RawContent":null,"Title":"ListView Group Header Color","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n![listview group](https://user-images.githubusercontent.com/460565/82530040-96a0d380-9b51-11ea-843b-19e5db65008e.png)\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nIn the original WinForms ListView, when grouping items, you cannot change the Group Header color and it is always Blue. \r\nWhich is not visible when the background is dark (as in the image above).\r\n\r\n**Describe the solution you'd like and alternatives you've considered**\r\nThe ability to set a color style for group headers.\r\n\r\n**Will this feature affect UI controls?**\r\nYes\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3320","RelatedDescription":"Open issue \"ListView Group Header Color\" (#3320)"},{"Id":"621672411","IsPullRequest":true,"CreatedAt":"2020-05-21T05:47:31","Actor":"hughbe","Number":"3311","RawContent":null,"Title":"Cleanup remaining ExternDll.Shell32 interop","State":"closed","Body":"## Proposed Changes\r\n- Cleanup remaining ExternDll.Shell32 interop\r\n\r\nThere's still a bunch left in `FileBrowserNative` for vista stuff, but that can wait for another day. Priority is to clean things out of `UnsafeNativeMethods`!\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3311)","Url":"https://github.com/dotnet/winforms/pull/3311","RelatedDescription":"Closed or merged PR \"Cleanup remaining ExternDll.Shell32 interop\" (#3311)"},{"Id":"621751412","IsPullRequest":true,"CreatedAt":"2020-05-21T05:26:49","Actor":"hughbe","Number":"3314","RawContent":null,"Title":"Make ButtonBase setters idempotent","State":"closed","Body":"## Proposed Changes\r\n- Make ButtonBase setters idempotent: setting the same value shouldn't invalidate, layout etc\r\n\r\nMight have some perf wins but mostly just for good consistency\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3314)","Url":"https://github.com/dotnet/winforms/pull/3314","RelatedDescription":"Closed or merged PR \"Make ButtonBase setters idempotent\" (#3314)"},{"Id":"622210349","IsPullRequest":false,"CreatedAt":"2020-05-21T02:56:11","Actor":"vsfeedback","Number":"3319","RawContent":null,"Title":"TableLayoutPanel memory leak","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/681591/tablelayoutpanel-memory-leak.html)._\n\n---\nTableLayoutPanel has a memory leak when dynamically filled with controls, controls cleared (with dispose), and reloaded with the same data source. This will eventually cause a parameter error somewhere in system code. The memory leak is equivalent to what has been loaded. So if I load 1GB of controls; dispose and clear the panel.controls, and load 1GB of controls from the same data source, I will end up with a memory use of 2GB. If I dispose of the panel before recreating it and loading it, the memory leak disappears.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/8/2019, 06:22 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### mbarnet on 8/9/2019, 06:49 AM: \n\n(private comment, text removed)\n#### Visual Studio Feedback System on 10/8/2019, 05:23 PM: \n\nI have detected that for the last 35 days, this issue didn't have any product team activity and a very small amount of new votes or comments.&nbsp;Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/winforms/issues/3319","RelatedDescription":"Open issue \"TableLayoutPanel memory leak\" (#3319)"},{"Id":"621752758","IsPullRequest":true,"CreatedAt":"2020-05-21T01:05:41","Actor":"weltkante","Number":"3315","RawContent":null,"Title":"manually release ITypeInfo references","State":"closed","Body":"Fixes #3305\r\nRelates to #3271\r\n\r\n## Proposed changes\r\nRelease ITypeInfo RCW manually instead of letting the GC clean up\r\n\r\nI'm doing this seperately from PR #3276 so it can be reviewed and merged before figuring out all the problems of the package updates.\r\n\r\n## Customer Impact\r\nTests should become more stable regardless how they are run\r\n\r\n## Regression? \r\nYes (after merging PR #3276)\r\n\r\n## Risk\r\nno known risk\r\n\r\n### Before\r\nTests start failing after PR #3276\r\n\r\n### After\r\nTests should succeed before and after PR #3276\r\n\r\n## Test methodology\r\nLocally running tests both with and without PR #3276\r\n\r\n## Test environment(s)\r\nlocal\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3315)","Url":"https://github.com/dotnet/winforms/pull/3315","RelatedDescription":"Closed or merged PR \"manually release ITypeInfo references\" (#3315)"},{"Id":"621330302","IsPullRequest":false,"CreatedAt":"2020-05-21T01:05:41","Actor":"weltkante","Number":"3305","RawContent":null,"Title":"Broken IDispatch.GetTypeInfo interop tests","State":"closed","Body":"**.NET Core Version:**\r\nMaster with PR #3276 applied\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nunknown\r\n\r\n**Problem description:**\r\nThe [tests](https://github.com/dotnet/winforms/blob/e32620ed185e3c15fa67bdb7fe93757a735d6edb/src/System.Windows.Forms.Primitives/tests/Interop/Oleaut32/ITypeInfoTests.cs) were flaky before, sometimes throwing `ComException(E_FAIL)`. The update of xunit.stafact now is properly hosting everything in an WinForms STA thread and they suddenly seem to fail \"reliably\" with this error here.\r\n```\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_AddressOfMember_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_AddressOfMember_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 23\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_CreateInstance_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_CreateInstance_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 39\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetDllEntry_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetDllEntry_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 81\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetFuncDesc_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetFuncDesc_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 123\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetIDsOfNames_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetIDsOfNames_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 159\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetMops_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetMops_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 196\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetRefTypeInfo_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_GetRefTypeInfo_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 236\r\n\r\nSystem.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_Invoke_Invoke_Success\r\nSystem.Runtime.InteropServices.InvalidComObjectException : COM object that has been separated from its underlying RCW cannot be used. The COM object was released while it was still in use on another thread.\r\n   at System.StubHelpers.InterfaceMarshaler.ConvertToManaged(IntPtr ppUnk, IntPtr itfMT, IntPtr classMT, Int32 flags)\r\n   at Interop.Oleaut32.IDispatch.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo& ppTInfo)\r\n   at System.Windows.Forms.Primitives.Tests.Interop.Oleaut32.ITypeInfoTests.ITypeInfo_Invoke_Invoke_Success() in D:\\projects\\winforms\\src\\System.Windows.Forms.Primitives\\tests\\Interop\\Oleaut32\\ITypeInfoTests.cs:line 368\r\n\r\n```\r\n\r\n**Expected behavior:**\r\nTests pass or there is a reasonable explanation for the error\r\n\r\n**Minimal repro:**\r\nRun tests with PR #3276 applied","Url":"https://github.com/dotnet/winforms/issues/3305","RelatedDescription":"Closed issue \"Broken IDispatch.GetTypeInfo interop tests\" (#3305)"},{"Id":"622108535","IsPullRequest":false,"CreatedAt":"2020-05-20T20:47:08","Actor":"weltkante","Number":"3317","RawContent":null,"Title":"SystemEvents deadlock if UI thread shuts down early","State":"open","Body":"### Description\r\n\r\nThe first thread that accesses `SystemEvents` is [used for initialization](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Win32.SystemEvents/src/Microsoft/Win32/SystemEvents.cs#L475). If its a MTA thread then a private STA thread with message loop is created for listening to system events, but if the first thread is an STA thread the initialization happens on this thread.\r\n\r\nThe code is not prepared for an STA thread that stops pumping messages or shuts down before process exit.\r\n\r\n* WinForms is running UI tests on multiple threads. Initialization of SystemEvents can happen directly in a test or indirectly by usage of WinForms API. If the first usage happens on a UI test (STA) then SystemEvents will bind to that thread. If this is a test thread which gets terminated earily this can lead to deadlocks in the CI framework (dotnet/winforms#3254)\r\n* Some applications are using a separate UI thread for the initial splash screen during application startup. This UI thread is likely to terminate early, if SystemEvents were initialized on that thread they would stop working.\r\n* Some applications use multiple UI threads to implement responsive progress/notification dialogs when the main application thread is busy and work cannot be easily moved off-thread. If such a dialog shows up early (e.g. progress dialog for some update during application startup) SystemEvents may be initialized on a secondary thread that could be terminated early.\r\n* There apparently have been [Watson reports](https://github.com/dotnet/winforms/issues/3254#issuecomment-628936999) indicating deadlocking STA threads and/or threads that stop pumping messages.\r\n\r\n### Regression?\r\nNo\r\n","Url":"https://github.com/dotnet/winforms/issues/3317","RelatedDescription":"Open issue \"SystemEvents deadlock if UI thread shuts down early\" (#3317)"},{"Id":"621831834","IsPullRequest":false,"CreatedAt":"2020-05-20T14:57:32","Actor":"cadilhac","Number":"3316","RawContent":null,"Title":"Winforms designer exception with my custom control","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1.300-preview-015135\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nI'm the developer of Smart PropertyGrid.Net (VisualHint company) and I am trying to port my component to .net core 3. It works well but I was unable to use the forms designer so far. I was happy to read this morning that the winforms designer could now be used with custom controls so I updated VS2019 to the latest 16.7.0 preview 1. When I try to open a form containing my custom PropertyGrid, I get this error from the designer:\r\n\"Unable to find method 'SendRequestAsync/2' on {no object} for the following reasons: An argument was not supplied for a required parameter.\r\n\r\nHere is the call stack:\r\n\r\n```\r\n\r\nat StreamJsonRpc.JsonRpc.d__116`1.MoveNext()\r\n\r\n--- End of  stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.WinForms.Protocol.WinFormsServer.d__31`1.MoveNext()\r\n---  End of stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.<>c__DisplayClass54_0.<b__0>d.MoveNext()\r\n---  End of stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\nat  Microsoft.VisualStudio.Threading.JoinableTask`1.CompleteOnCurrentThread()\r\nat  Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1 asyncMethod,  JoinableTaskCreationOptions creationOptions)\r\nat  Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1  asyncMethod)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.Run[T](Func`1 func)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.InitializeRootComponent(CodeTypeDeclaration  typeDeclaration)\r\nat  Microsoft.VisualStudio.WinForms.RemoteClient.Loader.RemoteCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  manager)\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  serializationManager)\r\n--- End of stack trace from previous location where  exception was thrown ---\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  serializationManager)\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.DeferredLoadHandler.Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(Int32  fReload) | \r\nat StreamJsonRpc.JsonRpc.d__116`1.MoveNext()\r\n--- End of  stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.WinForms.Protocol.WinFormsServer.d__31`1.MoveNext()\r\n---  End of stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.<>c__DisplayClass54_0.<b__0>d.MoveNext()\r\n---  End of stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\nat  Microsoft.VisualStudio.Threading.JoinableTask`1.CompleteOnCurrentThread()\r\nat  Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1 asyncMethod,  JoinableTaskCreationOptions creationOptions)\r\nat  Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1  asyncMethod)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.Run[T](Func`1 func)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.InitializeRootComponent(CodeTypeDeclaration  typeDeclaration)\r\nat  Microsoft.VisualStudio.WinForms.RemoteClient.Loader.RemoteCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  manager)\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  serializationManager)\r\n--- End of stack trace from previous location where  exception was thrown ---\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  serializationManager)\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.DeferredLoadHandler.Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(Int32  fReload) | \r\nat StreamJsonRpc.JsonRpc.d__116`1.MoveNext()\r\n--- End of  stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.WinForms.Protocol.WinFormsServer.d__31`1.MoveNext()\r\n---  End of stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.<>c__DisplayClass54_0.<b__0>d.MoveNext()\r\n---  End of stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\nat  Microsoft.VisualStudio.Threading.JoinableTask`1.CompleteOnCurrentThread()\r\nat  Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1 asyncMethod,  JoinableTaskCreationOptions creationOptions)\r\nat  Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1  asyncMethod)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.Run[T](Func`1 func)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.InitializeRootComponent(CodeTypeDeclaration  typeDeclaration)\r\nat  Microsoft.VisualStudio.WinForms.RemoteClient.Loader.RemoteCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  manager)\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  serializationManager)\r\n--- End of stack trace from previous location where  exception was thrown ---\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  serializationManager)\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.DeferredLoadHandler.Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(Int32  fReload)\r\n-- | -- | --\r\nat StreamJsonRpc.JsonRpc.d__116`1.MoveNext()\r\n--- End of  stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.WinForms.Protocol.WinFormsServer.d__31`1.MoveNext()\r\n---  End of stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.<>c__DisplayClass54_0.<b__0>d.MoveNext()\r\n---  End of stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\nat  Microsoft.VisualStudio.Threading.JoinableTask`1.CompleteOnCurrentThread()\r\nat  Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1 asyncMethod,  JoinableTaskCreationOptions creationOptions)\r\nat  Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1  asyncMethod)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.Run[T](Func`1 func)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.InitializeRootComponent(CodeTypeDeclaration  typeDeclaration)\r\nat  Microsoft.VisualStudio.WinForms.RemoteClient.Loader.RemoteCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  manager)\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  serializationManager)\r\n--- End of stack trace from previous location where  exception was thrown ---\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  serializationManager)\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.DeferredLoadHandler.Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(Int32  fReload) | \r\nat StreamJsonRpc.JsonRpc.d__116`1.MoveNext()\r\n--- End of  stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.WinForms.Protocol.WinFormsServer.d__31`1.MoveNext()\r\n---  End of stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.<>c__DisplayClass54_0.<b__0>d.MoveNext()\r\n---  End of stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\nat  Microsoft.VisualStudio.Threading.JoinableTask`1.CompleteOnCurrentThread()\r\nat  Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1 asyncMethod,  JoinableTaskCreationOptions creationOptions)\r\nat  Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1  asyncMethod)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.Run[T](Func`1 func)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.InitializeRootComponent(CodeTypeDeclaration  typeDeclaration)\r\nat  Microsoft.VisualStudio.WinForms.RemoteClient.Loader.RemoteCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  manager)\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  serializationManager)\r\n--- End of stack trace from previous location where  exception was thrown ---\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  serializationManager)\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.DeferredLoadHandler.Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(Int32  fReload)\r\nat StreamJsonRpc.JsonRpc.d__116`1.MoveNext()\r\n--- End of  stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.WinForms.Protocol.WinFormsServer.d__31`1.MoveNext()\r\n---  End of stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.<>c__DisplayClass54_0.<b__0>d.MoveNext()\r\n---  End of stack trace from previous location where exception was thrown ---\r\nat  System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat  System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task  task)\r\nat  Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\nat  Microsoft.VisualStudio.Threading.JoinableTask`1.CompleteOnCurrentThread()\r\nat  Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1 asyncMethod,  JoinableTaskCreationOptions creationOptions)\r\nat  Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run[T](Func`1  asyncMethod)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.Run[T](Func`1 func)\r\nat  Microsoft.VisualStudio.Design.Remote.DesignerSession.InitializeRootComponent(CodeTypeDeclaration  typeDeclaration)\r\nat  Microsoft.VisualStudio.WinForms.RemoteClient.Loader.RemoteCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  manager)\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  serializationManager)\r\n--- End of stack trace from previous location where  exception was thrown ---\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager  serializationManager)\r\nat  Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.DeferredLoadHandler.Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(Int32  fReload)\r\n```\r\n\r\n**Expected behavior:**\r\nForm should open and show my custom controls.\r\n\r\n**Minimal repro:**\r\nFor an exact repro, you need to download the product trial, open the sample and then the form. I read that you work with product vendors (the main ones). I am not a \"big one\" but if you need to contact me to fix this issue, don't hesitate to do so.\r\n","Url":"https://github.com/dotnet/winforms/issues/3316","RelatedDescription":"Open issue \"Winforms designer exception with my custom control\" (#3316)"},{"Id":"621739873","IsPullRequest":false,"CreatedAt":"2020-05-20T12:55:12","Actor":"Padanian","Number":"3313","RawContent":null,"Title":"NumericUpDown: unable to evaluate its properties at runtime","State":"open","Body":"\r\n* .NET Core Version: \r\n 5.0.100-preview.4.20258.7\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nRuntime evaluation of NumericUpDown properties fails with <Internal evaluation error of expression> for properties .Value, .Min and .Max \r\nNOTE = actual error message may be different because of translation from my locale\r\nNOTE 2 = Multiple different errors are shown in the inspect object properties pane\r\nNOTE 3 = Textbox property is present in the inspect object properties pane, but NumericUpDowns don't inherit any TextBox property\r\n\r\n**Expected behavior:**\r\nNumericUpDown.Value , .Min and .Max shall be evaluatable at runtime\r\n\r\n**Minimal repro:**\r\nDrag a NumericUpDown onto a form, create a ValueChanged event handler and inspect properties of control\r\n","Url":"https://github.com/dotnet/winforms/issues/3313","RelatedDescription":"Open issue \"NumericUpDown: unable to evaluate its properties at runtime\" (#3313)"},{"Id":"621733474","IsPullRequest":false,"CreatedAt":"2020-05-20T12:46:02","Actor":"Padanian","Number":"3312","RawContent":null,"Title":"Controls declared without WithEvents clause in Winforms Designer","State":"open","Body":"* .NET Core Version: \r\n 5.0.100-preview.4.20258.7\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nDeclaration of controls on a form by dragging control onto it does not include \"WithEvents\" clause.\r\nAs such, event handlers methods are created without \"Handles\" clause.\r\n\r\n**Expected behavior:**\r\nDragging and dropping controls on form shall correctly declare and instatiate controls WithEvents\r\n\r\n**Minimal repro:**\r\nCreate form, drag TextBox or NumericUpDown from toolbox onto form, double click on control.\r\nMethod is created without Handles clause.\r\nAdding Handles clause manually ends up in complaining the control is declared without WithEvents clause.\r\n","Url":"https://github.com/dotnet/winforms/issues/3312","RelatedDescription":"Open issue \"Controls declared without WithEvents clause in Winforms Designer\" (#3312)"},{"Id":"621660491","IsPullRequest":true,"CreatedAt":"2020-05-20T10:46:22","Actor":"hughbe","Number":"3310","RawContent":null,"Title":"Cleanup remaining UxTheme interop","State":"open","Body":"## Proposed Changes\r\n- Cleanup remaining UxTheme interop\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3310)","Url":"https://github.com/dotnet/winforms/pull/3310","RelatedDescription":"Open PR \"Cleanup remaining UxTheme interop\" (#3310)"},{"Id":"621627192","IsPullRequest":false,"CreatedAt":"2020-05-20T09:55:34","Actor":"Jessie-Zhang01","Number":"3309","RawContent":null,"Title":"An exception occurred when adding an image to the BackgroundImage property  ","State":"open","Body":"* .NET Core Version: .Net Core 5.0.100-preview.6.20269.24\r\n\r\n* Have you experienced this same bug with .NET Framework?:\r\nNo\r\n\r\n**More Info:**\r\n\r\n1. This issue cannot reproduce when adding pictures from the property window.\r\n2. This issue just reproduce when the BackgroundImageLayout property to Tile.\r\n3. This issue also can reproduce on .Net 3.1 and .Net 3.0.\r\n\r\n**Minimal repro:**\r\n1. Create a winforms core project.\r\n2. Add a PropertyGrid and a Button in the Form designer, then bind button to propertygrid.\r\n3. Build and run this project.\r\n4. Set the **BackgroundImageLayout** property to **Tile**.\r\n5. Add an image to the **BackgroundImage** property.\r\n[WindowsFormsApp5.zip](https://github.com/dotnet/winforms/files/4661095/WindowsFormsApp5.zip)\r\n\r\n**Expected behavior:**\r\nPicture added successfully.\r\n\r\n**Actual behavior:**\r\nAn exception occurred when adding an image to the BackgroundImage property.\r\n![image](https://user-images.githubusercontent.com/45864649/82428676-6f98c200-9abd-11ea-81f1-f3ee805b61a4.png)\r\n\r\n```\r\nSystem.OutOfMemoryException\r\n  HResult=0x8007000E\r\n  Message=Out of memory.\r\n  Source=System.Drawing.Common\r\n  StackTrace:\r\n   at System.Drawing.TextureBrush..ctor(Image image, WrapMode wrapMode) in /_/src/libraries/System.Drawing.Common/src/System/Drawing/TextureBrush.cs:line 42\r\n   at System.Windows.Forms.ControlPaint.DrawBackgroundImage(Graphics g, Image backgroundImage, Color backColor, ImageLayout backgroundImageLayout, Rectangle bounds, Rectangle clipRect, Point scrollOffset, RightToLeft rightToLeft) in /_/src/System.Windows.Forms/src/System/Windows/Forms/ControlPaint.cs:line 496\r\n   at System.Windows.Forms.ButtonInternal.ButtonStandardAdapter.PaintThemedButtonBackground(PaintEventArgs e, Rectangle bounds, Boolean up) in /_/src/System.Windows.Forms/src/System/Windows/Forms/ButtonInternal/ButtonStandardAdapter.cs:line 139\r\n   at System.Windows.Forms.ButtonInternal.ButtonStandardAdapter.PaintWorker(PaintEventArgs e, Boolean up, CheckState state) in /_/src/System.Windows.Forms/src/System/Windows/Forms/ButtonInternal/ButtonStandardAdapter.cs:line 247\r\n   at System.Windows.Forms.ButtonInternal.ButtonStandardAdapter.PaintUp(PaintEventArgs e, CheckState state) in /_/src/System.Windows.Forms/src/System/Windows/Forms/ButtonInternal/ButtonStandardAdapter.cs:line 49\r\n   at System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.Paint(PaintEventArgs pevent) in /_/src/System.Windows.Forms/src/System/Windows/Forms/ButtonInternal/ButtonBaseAdapter.cs:line 55\r\n   at System.Windows.Forms.ButtonBase.OnPaint(PaintEventArgs pevent) in /_/src/System.Windows.Forms/src/System/Windows/Forms/ButtonBase.cs:line 1139\r\n   at System.Windows.Forms.Control.PaintWithErrorHandling(PaintEventArgs e, Int16 layer) in /_/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs:line 8784\r\n   at System.Windows.Forms.Control.WmPaint(Message& m) in /_/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs:line 12538\r\n   at System.Windows.Forms.Control.WndProc(Message& m) in /_/src/System.Windows.Forms/src/System/Windows/Forms/Control.cs:line 12949\r\n   at System.Windows.Forms.ButtonBase.WndProc(Message& m) in /_/src/System.Windows.Forms/src/System/Windows/Forms/ButtonBase.cs:line 1310\r\n   at System.Windows.Forms.Button.WndProc(Message& m) in /_/src/System.Windows.Forms/src/System/Windows/Forms/Button.cs:line 389\r\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m) in /_/src/System.Windows.Forms/src/System/Windows/Forms/Control.ControlNativeWindow.cs:line 120\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam) in /_/src/System.Windows.Forms/src/System/Windows/Forms/NativeWindow.cs:line 372\r\n \r\n  This exception was originally thrown at this call stack:\r\n    System.Drawing.TextureBrush.TextureBrush(System.Drawing.Image, System.Drawing.Drawing2D.WrapMode) in TextureBrush.cs\r\n    System.Windows.Forms.ControlPaint.DrawBackgroundImage(System.Drawing.Graphics, System.Drawing.Image, System.Drawing.Color, System.Windows.Forms.ImageLayout, System.Drawing.Rectangle, System.Drawing.Rectangle, System.Drawing.Point, System.Windows.Forms.RightToLeft) in ControlPaint.cs\r\n    System.Windows.Forms.ButtonInternal.ButtonStandardAdapter.PaintThemedButtonBackground(System.Windows.Forms.PaintEventArgs, System.Drawing.Rectangle, bool) in ButtonStandardAdapter.cs\r\n    System.Windows.Forms.ButtonInternal.ButtonStandardAdapter.PaintWorker(System.Windows.Forms.PaintEventArgs, bool, System.Windows.Forms.CheckState) in ButtonStandardAdapter.cs\r\n    System.Windows.Forms.ButtonInternal.ButtonStandardAdapter.PaintUp(System.Windows.Forms.PaintEventArgs, System.Windows.Forms.CheckState) in ButtonStandardAdapter.cs\r\n    System.Windows.Forms.ButtonInternal.ButtonBaseAdapter.Paint(System.Windows.Forms.PaintEventArgs) in ButtonBaseAdapter.cs\r\n    System.Windows.Forms.ButtonBase.OnPaint(System.Windows.Forms.PaintEventArgs) in ButtonBase.cs\r\n    System.Windows.Forms.Control.PaintWithErrorHandling(System.Windows.Forms.PaintEventArgs, short) in Control.cs\r\n    System.Windows.Forms.Control.WmPaint(ref System.Windows.Forms.Message) in Control.cs\r\n    System.Windows.Forms.Control.WndProc(ref System.Windows.Forms.Message) in Control.cs\r\n    ...\r\n    [Call Stack Truncated]\r\n```\r\n","Url":"https://github.com/dotnet/winforms/issues/3309","RelatedDescription":"Open issue \"An exception occurred when adding an image to the BackgroundImage property  \" (#3309)"},{"Id":"621622894","IsPullRequest":true,"CreatedAt":"2020-05-20T09:49:04","Actor":"filipnavara","Number":"3308","RawContent":null,"Title":"Call UiaDisconnectProvider from Control.ReleaseUiaProvider","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nPartially fixes #3182\r\n\r\n## Proposed changes\r\n\r\n- Call `UiaDisconnectProvider` to explicitly detach UIA providers when a control or form is being disposed. This ensures that clients that leak UIA objects cannot leak them in the target application indefinitely. It follows the pattern from the [Windows SDK sample](https://github.com/microsoft/Windows-classic-samples/tree/master/Samples/UIAutomationCleanShutdown).\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- UIA objects for disposed controls won't cause memory leak\r\n- UIA clients accessing UIA providers for disposed controls will get `UIA_E_ELEMENTNOTAVAILABLE` error\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- There should be no risk when the application is accessed by properly implemented UIA clients. These clients should be prepared to handle `UIA_E_ELEMENTNOTAVAILABLE` error and also release the UIA objects in timely manner. For misbehaving UIA clients it could cause a problem in the UIA client instead of a leak in the WinForms application.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Tested with VisualUIAVerifyNative and Accessibility Insight to ensure that the UIA clients react correctly to the change (longer description of effect available in #3182).\r\n- Tested with SciTech Memory Profiler to ensure that controls/forms with UIA providers are released when a form is closed and hence don't keep additional reference that would make these objects have prolonged lifetime.\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET 5 (master, winforms@d851dac649d74c3a1d2b416713dd22de14b93fe1)\r\n- .NET Core 3.1.200 with backported fix\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3308)","Url":"https://github.com/dotnet/winforms/pull/3308","RelatedDescription":"Open PR \"Call UiaDisconnectProvider from Control.ReleaseUiaProvider\" (#3308)"},{"Id":"621579037","IsPullRequest":false,"CreatedAt":"2020-05-20T08:46:58","Actor":"nirzaf","Number":"3307","RawContent":null,"Title":"Winforms Designer Not Working with .NET Core 3.1 SDK","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version:   3.1 LTS Version\r\n<!-- e.g. 3.1 LTS Version -->\r\n\r\n* Have you experienced this same bug with .NET Framework?:  No\r\n<!-- No -->\r\n\r\n**Problem description:**\r\n\r\n    Winform Designer looks like in a screenshot given below \r\n\r\n![image](https://user-images.githubusercontent.com/18024930/82425619-63543b00-9aa4-11ea-9532-bae05883afa1.png)\r\nCould not do any designing in Winforms\r\nI am using Visual Studio 16.6.0 Version Last Updated 20/05/2020\r\n","Url":"https://github.com/dotnet/winforms/issues/3307","RelatedDescription":"Open issue \"Winforms Designer Not Working with .NET Core 3.1 SDK\" (#3307)"},{"Id":"621374229","IsPullRequest":false,"CreatedAt":"2020-05-20T00:35:14","Actor":"KlausLoeffelmann","Number":"3306","RawContent":null,"Title":"Should we move System.Windows.Forms.Padding back to the System.Windows.Forms assembly","State":"open","Body":"While investigating a bug in the WinForms Core Designer, namely in the context of serialization of Resource files, I noticed that from 3.1 to 5.0 the `Padding` struct has moved from the `System.Windows.Forms` assembly to `System.Windows.Forms.Primitives`. This is the reason, at least from the perspective of deserializing resource files in the Core Designer, we can not retarget a WinForms 5.0 Core App back to 3.1. The type resolution service in the ResXDataNode processor, which is already version tolerant, cannot handle the new type name (at least not without introducing some black magic).\r\n\r\nSo, while this resources issues might be principally resolvable, my concern is that the `Padding` struct of all WinForms structs gets serialized and deserialized in typical Customer in mixed version scenarios (where e.g. 100 clients write some custom serialized files back to a server still running 3.1, and others already 5.0), which could cause real problems.\r\n\r\nSo, for that reason, I would propose to move the `Padding` struct back to the `System.Windows.Forms` namespace, or at least discuss the seriousness of my concern.","Url":"https://github.com/dotnet/winforms/issues/3306","RelatedDescription":"Open issue \"Should we move System.Windows.Forms.Padding back to the System.Windows.Forms assembly\" (#3306)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-05-23T05:30:47.9712912Z","RunDurationInMilliseconds":665}