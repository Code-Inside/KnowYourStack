{"Data":{"GitHub":{"Issues":[{"Id":"891593978","IsPullRequest":false,"CreatedAt":"2021-05-14T04:49:52","Actor":"RussKie","Number":"4909","RawContent":null,"Title":"[Proposal] Streamline application configuration and bootstrap","State":"open","Body":"# Overview\r\n\r\nHistorically Windows Forms designer was rendering its design surface based on hardcoded assumptions, such as control default font and dpi settings. However over the past 10-15 years not only multi-monitor configurations became a norm, monitor tech has made significant process making 4K, 5K, 8K, etc. monitors widely used by our consumers. The Windows itself has been innovating and tinkering with UI configurations, such default font metrics, which over the years deviated from \"Microsoft Sans Serif, 8pt\" and now is set to \"Segoe UI, 9pt\".\r\n\r\nThe Windows Forms runtime has been (more or less) keeping up with the changes, e.g.  providing a new API to [set high dpi mode](https://github.com/dotnet/winforms/pull/396), or by updating the [default font](https://github.com/dotnet/winforms/pull/656). The default font change has unearthed numerous issues in the runtime (e.g. different font-based scaling), which we considered addressing by providing (yet another) API to set an [application-wide default font](https://github.com/dotnet/winforms/issues/3001). \r\n\r\nHowever during numerous discussions the team has identified probably the biggest flaw in the current separation of the runtime and the designer, and the overall move from .NET Framework assumptions - the lack of a mechanism to share Windows Forms project-level configuration settings between the runtime and the designer. That is, if the app is configured to run with disabled visual styles, in PerMonitorV2, and have an application-wide default font set to \"Arial, 14pt\" there is no way to show the designer surface with the same settings to truly provide the WYSIWYG experience.\r\n\r\n\r\nFunnily enough Visual Basic apps are in a good position for the designer integration with their Application Framework functionality, i.e. \"*.myapp\" file. The C# project lack this mechanism, and traditionally have been a configuration-code-first approach.\r\n\r\n# Proposal\r\n\r\nThe purpose of this proposal is to \r\n1 **streamline a Windows Forms application configuration and bootstrap**, \r\n2. with the view that this will facilitate the **sharing of the information between the runtime and the designer during the development phase**. That is, whenever the designers surface process is started configuration information is read from a known location, and necessary configurations are applied (e.g. run the design surface in PerMonitorV2 mode, or set a form/usercontrol default font to \"Arial, 14pt\"). ⚠️  **out of scope**, tracked under https://github.com/dotnet/winforms-designer/issues/3192.\r\n\r\n**NOTE:** The new functionality is opt-in, i.e. unless a developer makes a conscience decision to use the new configuration and the bootstrap mechanism existing applications will continue to work as-is, and the current developer experience will remain the same.\r\n\r\n### 1. Visual Basic \r\nFor VB projects this known location is \"myapp\" file.\r\n![image](https://user-images.githubusercontent.com/4403806/114354200-3d9abd80-9bb1-11eb-9d48-a43f299f82e1.png)\r\n\r\nThe designer surface process should have no issues reading configuration values from a myapp file.\r\n\r\nThere are a number of avenues we can take to facilitate an integrated devex such as:\r\n1. Enhance the VB Application Framework in the same way as it was done for `HighDpiMode` (see #3705). This requires changes on the VS side. \r\n2. Until the necessary changes on the VS side are done provide a workaround similar to the one performed for `HighDpiMode` in .NET 5.0 (see: #3894)\r\n3. Alternatively we can consider departing from VBAF/myapp generators and replace those with a source generator. This will necessitate a separate investigation and proposal (**out of scope**).\r\n\r\n### Other points for further consideration:\r\n- How to read app.manifest/app.config for dpi values. See \"How to resolve dpi settings?\" below.\r\n\r\nThe final decision is TBD. /cc: @KlausLoeffelmann @KathleenDollard \r\n\r\n### 2. C#\r\n\r\nFor C# projects the issue is little more involved. There are several candidates for storing settings, such as a csproj file, an app.config or a new configuration file.\r\nAfter deliberations and discussions we propose the settings to be stored in the csproj file for the following reasons:\r\n- The designer surface process should have no issues reading configuration values from a myapp file.\r\n- Unlike schema enforced app.config, a csproj can contain an arbitrary set of settings, easily manageable and available to MSBuild process.\r\n- app.configs don't appear to be very popular in .NET apps.\r\n- Whilst developers who build their apps on .NET Framework 4.7+ maybe familiar with [app.config ApplicationConfigurationSection](https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/winforms/windows-forms-add-configuration-element) and/or [app.config AppContextSwitchOverrides](https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element), we have removed all dependencies on app.config and these quirks which those two provided in .NET Core 3.0 timeframe.\r\n  > 💭  It is also worth noting that quirks were necessary in .NET Framework, which was installed in-place, and didn't provided any kind of side-by-side deployment. In a rare and unfortunate event where we may accidentally break end users experiences in a given release users will be able to install a previous working .NET release and run their application against it until a fix becomes available.\r\n- whilst there maybe an argument that app.config can be changed by users, thus altering behaviours of applications, and changes to csproj will require a recompilation, it is also worth noting that our SDK is built with developers in mind, and not the ability of users to alter the application behaviours at will. If an app developer feels it is important to allow the app users to change the default font or dpi settings via an app.config it is the developers responsibility to facilitate that mechanism to the users.\r\n\r\n\r\n\r\nThe runtime portion will leverage source generators to read configurations from the csproj, and emit code for the necessary API, e.g. call `Application.SetHighDpiMode(HighDpiMode.PerMonitorV2)` and `Application.SetDefaultFont(\"Arial, 14pt\")`.\r\n![image](https://user-images.githubusercontent.com/4403806/114354384-8488b300-9bb1-11eb-855a-b58e80953793.png)\r\n\r\nWith that we will be able to leverage the power of Roslyn analyzers to warn developers about duplicate/redundant API invocations performed outside the generated code.\r\n\r\n### 3. Visual Studio (out of scope)\r\nTo complete the user experience we can consider leveraging (e.g. copying) VBAF property pages and provide the same experience to C# developers.\r\n\r\n# How to resolve dpi settings?\r\n\r\nAt this point an astute Windows Forms developer will say that there are currently 3 different ways to configure dpi settings (which may or may not be mutually exclusive or complimentary):\r\n* [app.manifest](https://docs.microsoft.com/windows/win32/sbscs/application-manifests) - Common Control related configuration, dealing with it was always a pain. Very likely that a significant part of Windows Forms developers have never heard of it.\r\n* [app.config ApplicationConfigurationSection](https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/winforms/windows-forms-add-configuration-element) and [app.config AppContextSwitchOverrides](https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element).\r\n* [`Application.SetHighDpiMode(HighDpiMode)`](https://docs.microsoft.com/dotnet/api/system.windows.forms.application.sethighdpimode).\r\n\r\nThis proposal introduces a 4th way of configuring dpi, and to make it successful it has to (paraphrasing JRR Tolkien):\r\n\r\n> _One API to rule them all, One API to find them,_\r\n> _One API to bring them all and in the ProjectConfiguration bind them..._\r\n\r\nThe benefit the new approach provides is by facilitating the sharing of the information between the runtime and the designer during the development phase, as well as unifying how dpi settings are configured. This benefit is believed to outweigh the need to remove several lines of code from `Main()` method and adding several properties into a `cspoj` file.\r\n\r\n\r\nHere's how we plan to resolve a project's dpi settings:\r\n\r\n1. If a custom app.manifest is specified, read it. It takes the precedence as it is used when the process is created, before Windows Forms runtime gets involved. \r\n2. Since the runtime no longer reads any settings from the app.config we will ignore it. It is possible to use Roslyn analyzers to warn a developer that app.config switches are no longer supported.\r\n3. Also check for `Application.SetHighDpiMode(HighDpiMode)` in the application's entry method - either the default `static void Main()` or as specified by `StartupObject` property.\r\n4. If there are multiple values are detected warn the developer.\r\n5. If no values are detected - use a default value we agree upon (e.g. `PerMonitorV2`).\r\n\r\n# Other considerations\r\n\r\n* The new source generator project will form a new Windows Forms artifact, and will be part of Windows Desktop bundle. It will also need to be references by a Windows Forms C# project by default.\r\n* The default C# template will need to be updated to replace the current project configurations with the new source generated method.\r\n* Plan the Roslyn analyzers taxonomy for warnings/errors, and other related considerations.","Url":"https://github.com/dotnet/winforms/issues/4909","RelatedDescription":"Open issue \"[Proposal] Streamline application configuration and bootstrap\" (#4909)"},{"Id":"883951616","IsPullRequest":false,"CreatedAt":"2021-05-14T02:15:23","Actor":"SenthilKumaranRajan","Number":"4887","RawContent":null,"Title":"Smart Tag support in WF","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.Netcore 3.1 and NET 5\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nThe smart tag is not working properly for the NETCore project.\r\n\r\n**Expected behavior:**\r\n\r\nThe smart tag should work properly as like .NETFramework\r\n\r\nAttached the code example in the below link\r\n\r\n[CustomControlWithSmartTag.zip](https://github.com/dotnet/winforms/files/6457287/CustomControlWithSmartTag.zip)\r\n\r\n**Minimal repro:**\r\n\r\n![image](https://user-images.githubusercontent.com/44424557/117776267-03c4e180-b259-11eb-87ff-621918cac4a6.png)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/4887","RelatedDescription":"Closed issue \"Smart Tag support in WF\" (#4887)"},{"Id":"891532885","IsPullRequest":false,"CreatedAt":"2021-05-14T02:07:08","Actor":"RussKie","Number":"4908","RawContent":null,"Title":"Support designer capabilities at runtime","State":"open","Body":"# Context\r\n\r\nThe Windows Forms SDK consist of two distinct parts – the **runtime** (the code that executes, open sourced in this repo) and the **designer** (consists of the \"_general purpose_\" and \"_Visual Studio-specific_\"  components, close sourced). In .NET Framework these two parts lived together, and that allowed customers to invoke and use VS-specific functionality. Skip forward to .NET Core/.NET and these two components are now split and evolve (for the most part) independently of each other.\r\n \r\nThe more and more customers are starting to migrate their apps to .NET the more we see the demand to the missing designer capabilities to be ported over to .NET (e.g. #1395, #2573, #4456, #4886, #4887, [AB#1314797](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1314797)).\r\n\r\n\r\n# In scope:\r\n\r\nHowever we need to port the general purpose designer infrastructure – i.e. API that enable building \"_a designer that the user can embed in their application_\". For example, a user might have a business application that contains a report designer feature, which can use our \"general designer\" framework.\r\n\r\n* The following designers are currently available (though may have restricted or incomplete functionality):\r\n  - [x] System.ComponentModel.Design.ComponentDesigner\r\n  - [x] System.Windows.Forms.Design.DocumentDesigner (#122)\r\n  - [x] System.Windows.Forms.Design.FormDocumentDesigner (#681)\r\n  - [x] System.Windows.Forms.Design.MaskedTextBoxDesigner\r\n  - [x] System.Windows.Forms.Design.ParentControlDesigner (#122)\r\n  - [x] System.Windows.Forms.Design.ScrollableControlDesigner (#122)\r\n  - [x] System.Windows.Forms.Design.TextBoxBaseDesigner\r\n  - [x] System.Windows.Forms.Design.ToolStripDesigner\r\n  - [x] System.Windows.Forms.Design.ToolStripDropDownDesigner\r\n  - [x] System.Windows.Forms.Design.ToolStripItemDesigner\r\n  - [x] System.Windows.Forms.Design.ToolStripMenuItemDesigner\r\n \r\n* The following designers are missing and will be ported in scope of #4456:\r\n  - [x] System.Windows.Forms.Design.ButtonBaseDesigner\r\n  - [x] System.Windows.Forms.Design.ControlDesigner\r\n  - [x] System.Windows.Forms.Design.DocumentDesigner - functionality restored\r\n  - [x] System.Windows.Forms.Design.LabelDesigner\r\n  - [x] System.Windows.Forms.Design.ParentControlDesigner - functionality restored\r\n  - [x] System.Windows.Forms.Design.ScrollableControlDesigner - functionality restored\r\n  - [x] System.Windows.Forms.Design.TextBoxDesigner\r\n  - [x] System.Windows.Forms.Design.ComboBoxDesigner\r\n  - [x] System.Windows.Forms.Design.GroupBoxDesigner\r\n  - [x] System.Windows.Forms.Design.ListBoxDesigner\r\n  - [x] System.Windows.Forms.Design.ListViewDesigner\r\n  - [x] System.Windows.Forms.Design.PanelDesigner\r\n  - [x] System.Windows.Forms.Design.PictureBoxDesigner\r\n  - [x] System.Windows.Forms.Design.RadioButtonDesigner\r\n  - [x] System.Windows.Forms.Design.RichTextBoxDesigner\r\n  - [x] System.Windows.Forms.Design.TreeViewDesigner\r\n  - [x] System.Windows.Forms.Design.UpDownBaseDesigner\r\n  - [x] System.Windows.Forms.Design.UserControlDocumentDesigner\r\n\r\n\r\n\r\n# Open for consideration\r\n\r\nThe following API may be considered for porting upon significant demand and real use cases.\r\n\r\n* The following designers:\r\n  - [ ] System.Windows.Forms.Design.DateTimePickerDesigner\r\n  - [ ] System.Windows.Forms.Design.FlowLayoutPanelDesigner\r\n  - [ ] System.Windows.Forms.Design.MonthCalendarDesigner\r\n  - [ ] System.Windows.Forms.Design.PrintDialogDesigner\r\n  - [ ] System.Windows.Forms.Design.TableLayoutPanelDesigner\r\n  - [ ] System.Windows.Forms.Design.TabControlDesigner\r\n  - [ ] System.Windows.Forms.Design.TabPageDesigner\r\n* Missing editors for the ported designers, see the list in #2411\r\n\r\n# Out of scope\r\n\r\n* Back-porting of the missing types in .NET Core 3.1 or .NET 5.0, because both of these are going out of support shortly after .NET 6.0 is released.\r\n* The VS-specific designer functionality will not be made available, because it makes no sense outside the VS. \r\n* Databinding\r\n* Advanced databinding designers and editors\r\n* The following designers:\r\n  - [ ] System.Windows.Forms.Design.AxDesigner\r\n  - [ ] System.Windows.Forms.Design.AxHostDesigner\r\n  - [ ] System.Windows.Forms.Design.BindingNavigatorDesigner\r\n  - [ ] System.Windows.Forms.Design.BindingSourceDesigner\r\n  - [ ] System.Windows.Forms.Design.DataGridViewColumnDesigner\r\n  - [ ] System.Windows.Forms.Design.DataGridViewComboBoxColumnDesigner\r\n  - [ ] System.Windows.Forms.Design.DataGridViewDesigner\r\n  - [ ] System.Windows.Forms.Design.FolderBrowserDialogDesigner\r\n  - [ ] System.Windows.Forms.Design.ImageListDesigner\r\n  - [ ] System.Windows.Forms.Design.NotifyIconDesigner\r\n  - [ ] System.Windows.Forms.Design.PropertyGridDesigner\r\n  - [ ] System.Windows.Forms.Design.SplitContainerDesigner\r\n  - [ ] System.Windows.Forms.Design.SplitterDesigner\r\n  - [ ] System.Windows.Forms.Design.SplitterPanelDesigner\r\n  - [ ] System.Windows.Forms.Design.ToolStripContainerDesigner\r\n  - [ ] System.Windows.Forms.Design.ToolStripContentPanelDesigner\r\n  - [ ] System.Windows.Forms.Design.ToolStripPanelDesigner\r\n  - [ ] System.Windows.Forms.Design.TrackBarDesigner\r\n  - [ ] System.Windows.Forms.Design.WebBrowserDesigner ","Url":"https://github.com/dotnet/winforms/issues/4908","RelatedDescription":"Open issue \"Support designer capabilities at runtime\" (#4908)"},{"Id":"891465277","IsPullRequest":true,"CreatedAt":"2021-05-14T00:05:53","Actor":"RussKie","Number":"4907","RawContent":null,"Title":"Disabled flaky tests to enable release build","State":"closed","Body":"A follow up on #4904\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4907)","Url":"https://github.com/dotnet/winforms/pull/4907","RelatedDescription":"Closed or merged PR \"Disabled flaky tests to enable release build\" (#4907)"},{"Id":"890986860","IsPullRequest":true,"CreatedAt":"2021-05-13T23:54:03","Actor":"dotnet-maestro[bot]","Number":"4903","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210513.1\r\n- **Date Produced**: 5/13/2021 10:42 AM\r\n- **Commit**: 1b09a384f29eafd98ec6bcb2d9e6fc820c9db801\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21262.1 to 6.0.0-preview.5.21263.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/b4f4418...1b09a38\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4903)","Url":"https://github.com/dotnet/winforms/pull/4903","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4903)"},{"Id":"890986535","IsPullRequest":true,"CreatedAt":"2021-05-13T23:45:33","Actor":"dotnet-maestro[bot]","Number":"4902","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20210513.1\r\n- **Date Produced**: 5/13/2021 9:01 AM\r\n- **Commit**: 6b9758661f4483a70654bcaf6f8d7c6a79ee5660\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21261.6 to 6.0.0-beta.21263.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21261.6 to 6.0.0-beta.21263.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.21261.6 to 6.0.0-beta.21263.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.21261.6 to 6.0.0-beta.21263.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21261.6 to 6.0.0-beta.21263.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/c5c6ef9...6b97586\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4902)","Url":"https://github.com/dotnet/winforms/pull/4902","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#4902)"},{"Id":"890979175","IsPullRequest":true,"CreatedAt":"2021-05-13T23:31:58","Actor":"RussKie","Number":"4901","RawContent":null,"Title":"Allow to skip TextRenderer asserts","State":"closed","Body":"While painting LinkedLabel we modify device context before drawing the\r\nlabel's text. Because of that we hit the asserts in TextRenderer.GetApplyStateFlags.\r\nSince the DC state is expected, skip the assertions.\r\n\r\nCloses #4857\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4901)","Url":"https://github.com/dotnet/winforms/pull/4901","RelatedDescription":"Closed or merged PR \"Allow to skip TextRenderer asserts\" (#4901)"},{"Id":"891353935","IsPullRequest":true,"CreatedAt":"2021-05-13T22:37:35","Actor":"Tanya-Solyanik","Number":"4905","RawContent":null,"Title":"Fix HtmlDocument tests (#4904)","State":"closed","Body":"Porting https://github.com/dotnet/winforms/pull/4904 to release/5.0\r\n\r\nCurrently all public CI builds are failing with\r\n\r\n    System.Windows.Forms.Tests.HtmlDocumentTests.HtmlDocument_Focus_Invoke_Success [FAIL]\r\n      Assert.False() Failure\r\n      Expected: False\r\n      Actual:   True\r\n      Stack Trace:\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/HtmlDocumentTests.cs(1566,0): at System.Windows.Forms.Tests.HtmlDocumentTests.HtmlDocument_Focus_Invoke_Success()\r\n        --- End of stack trace from previous location ---\r\n    System.Windows.Forms.Tests.HtmlDocumentTests.HtmlDocument_Focused_GetFocused_ReturnsExpected [FAIL]\r\n      Assert.False() Failure\r\n      Expected: False\r\n      Actual:   True\r\n      Stack Trace:\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/HtmlDocumentTests.cs(644,0): at System.Windows.Forms.Tests.HtmlDocumentTests.HtmlDocument_Focused_GetFocused_ReturnsExpected()\r\n        --- End of stack trace from previous location ---\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4905)","Url":"https://github.com/dotnet/winforms/pull/4905","RelatedDescription":"Closed or merged PR \"Fix HtmlDocument tests (#4904)\" (#4905)"},{"Id":"891404757","IsPullRequest":false,"CreatedAt":"2021-05-13T21:41:02","Actor":"Tanya-Solyanik","Number":"4906","RawContent":null,"Title":"Investigate HtmlDocument tests that set focus to the document","State":"open","Body":"`HtmlDocument_Focused_GetFocused_ReturnsExpected` and `HtmlDocument_Focus_Invoke_Success` tests are failing with inconsistent errors. Sometimes IHtmlDocument4.Focus succeeds and sometimes it does not.\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=1137942&view=ms.vss-test-web.build-test-results-tab&runId=34524282&resultId=103045&paneView=debug\r\n```\r\nAssert.True() Failure\\r\\nExpected: True\\r\\nActual:   False\r\n\r\n\r\nStack trace\r\n   at System.Windows.Forms.Tests.HtmlDocumentTests.HtmlDocument_Focused_GetFocused_ReturnsExpected() in D:\\workspace\\_work\\1\\s\\src\\System.Windows.Forms\\tests\\UnitTests\\System\\Windows\\Forms\\HtmlDocumentTests.cs:line 648\r\n--- End of stack trace from previous location ---\r\n```\r\nand sometimes\r\nhttps://dev.azure.com/dnceng/internal/_build/results?buildId=1137596&view=ms.vss-test-web.build-test-results-tab&runId=34521092&resultId=107894&paneView=debug\r\n```\r\nAssert.False() Failure\\r\\nExpected: False\\r\\nActual:   True\r\n\r\n\r\nStack trace\r\nat System.Windows.Forms.Tests.HtmlDocumentTests.HtmlDocument_Focused_GetFocused_ReturnsExpected() in /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/HtmlDocumentTests.cs:line 644\r\n--- End of stack trace from previous location ---\r\n```\r\n","Url":"https://github.com/dotnet/winforms/issues/4906","RelatedDescription":"Open issue \"Investigate HtmlDocument tests that set focus to the document\" (#4906)"},{"Id":"891008038","IsPullRequest":true,"CreatedAt":"2021-05-13T20:16:27","Actor":"RussKie","Number":"4904","RawContent":null,"Title":"Fix HtmlDocument tests","State":"closed","Body":"Currently all public CI builds are failing with\r\n```\r\n    System.Windows.Forms.Tests.HtmlDocumentTests.HtmlDocument_Focus_Invoke_Success [FAIL]\r\n      Assert.False() Failure\r\n      Expected: False\r\n      Actual:   True\r\n      Stack Trace:\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/HtmlDocumentTests.cs(1566,0): at System.Windows.Forms.Tests.HtmlDocumentTests.HtmlDocument_Focus_Invoke_Success()\r\n        --- End of stack trace from previous location ---\r\n    System.Windows.Forms.Tests.HtmlDocumentTests.HtmlDocument_Focused_GetFocused_ReturnsExpected [FAIL]\r\n      Assert.False() Failure\r\n      Expected: False\r\n      Actual:   True\r\n      Stack Trace:\r\n        /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/HtmlDocumentTests.cs(644,0): at System.Windows.Forms.Tests.HtmlDocumentTests.HtmlDocument_Focused_GetFocused_ReturnsExpected()\r\n        --- End of stack trace from previous location ---\r\n```\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4904)","Url":"https://github.com/dotnet/winforms/pull/4904","RelatedDescription":"Closed or merged PR \"Fix HtmlDocument tests\" (#4904)"},{"Id":"890018517","IsPullRequest":true,"CreatedAt":"2021-05-12T16:42:39","Actor":"dotnet-maestro[bot]","Number":"4899","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20210511.6\r\n- **Date Produced**: 5/12/2021 4:11 AM\r\n- **Commit**: c5c6ef92686f208055e884bad45d32966f0b1f95\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21260.1 to 6.0.0-beta.21261.6][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21260.1 to 6.0.0-beta.21261.6][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.21260.1 to 6.0.0-beta.21261.6][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.21260.1 to 6.0.0-beta.21261.6][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21260.1 to 6.0.0-beta.21261.6][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/44324e2...c5c6ef9\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4899)","Url":"https://github.com/dotnet/winforms/pull/4899","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#4899)"},{"Id":"890018963","IsPullRequest":true,"CreatedAt":"2021-05-12T12:46:08","Actor":"dotnet-maestro[bot]","Number":"4900","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210512.1\r\n- **Date Produced**: 5/12/2021 10:38 AM\r\n- **Commit**: b4f4418d56d32c3a1677b5651899a112d7e02226\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21260.8 to 6.0.0-preview.5.21262.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/05b646c...b4f4418\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4900)","Url":"https://github.com/dotnet/winforms/pull/4900","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4900)"},{"Id":"889217235","IsPullRequest":false,"CreatedAt":"2021-05-11T23:59:58","Actor":"wjk","Number":"4898","RawContent":null,"Title":"ContextMenuStrip doesn’t DPI-scale its items properly","State":"open","Body":"## .NET Core Version\r\n6.0.0-preview.3.21201.4\r\n\r\n**Have you experienced this same bug with .NET Framework?** Didn’t bother to check; I no longer target .NET Framework\r\n\r\n## Problem description\r\nThe below screenshot illustrates the problem much better than words can. The left menu is the `ContextMenuStrip`; the right menu is a `ToolStripMenuDropDown`.\r\n\r\n## Expected behavior\r\nAll menu items should have the same height, no matter what kind of container they are located in.\r\n\r\n## Minimal repro\r\n<img width=\"369\" alt=\"Screenshot\" src=\"https://user-images.githubusercontent.com/1915951/117898547-2d9afa00-b293-11eb-98dd-db5faa345996.png\">","Url":"https://github.com/dotnet/winforms/issues/4898","RelatedDescription":"Open issue \"ContextMenuStrip doesn’t DPI-scale its items properly\" (#4898)"},{"Id":"888707688","IsPullRequest":true,"CreatedAt":"2021-05-11T21:55:33","Actor":"mmitche","Number":"4897","RawContent":null,"Title":"[release/5.0] Merge in 5.0.6 changes","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4897)","Url":"https://github.com/dotnet/winforms/pull/4897","RelatedDescription":"Closed or merged PR \"[release/5.0] Merge in 5.0.6 changes\" (#4897)"},{"Id":"888706240","IsPullRequest":true,"CreatedAt":"2021-05-11T21:43:20","Actor":"mmitche","Number":"4896","RawContent":null,"Title":"[release/3.1] Merge in 3.1.15 changes","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4896)","Url":"https://github.com/dotnet/winforms/pull/4896","RelatedDescription":"Closed or merged PR \"[release/3.1] Merge in 3.1.15 changes\" (#4896)"},{"Id":"888704831","IsPullRequest":false,"CreatedAt":"2021-05-11T21:21:44","Actor":"KlausLoeffelmann","Number":"4895","RawContent":null,"Title":"[WIP] Introduce Commands and DataContext to WinForms to adapt modern Binding scenarios","State":"open","Body":"## Rationale:\r\n\r\nWe want our customers to bring their existing WinForms Apps forward and allow them to adapt new Azure-based technologies. It is important for our customers, that the logic of their LOB apps to this end becomes way more flexible and can be rearchitected away from code-behind and towards layers. At the same time, we need to make sure, that they can minimize the risk for this rearchitectural process, and therefore we should provide a soft migration option to reach this sound architecture: WinForms should be able to consume ViewModels or Controllers which are designed by a certain industry standard.\r\n\r\n### Introducing architectures to WinForms which can be reused for Mobile/Azure based scenarios\r\n\r\nThe ultimate goal is, that our customer’s LOB logic can be leverage to other UI technologies (Maui, WinUi, WPF) and the Cloud, and can on top be easily unit tested, _all of which is not possible with the typical existing WinForms code-behind methodology._\r\n\r\n### Using EntityFramework and EntityFramework Core instead of the ancient Typed DataSets**\r\n\r\nThe other advantage is an easier adaptation and migration away from ancient WinForms DataLayer architectures: While typed `DataSet` and `DataTable` were clearly designed with the WinForms code-behind model in mind, with these new DataBinding features present, modernized WinForms Apps could easily consume typical ViewModels and Models as their Controller and Data Layer abstractions, and, what's important: Models in this scenarios being POCO classes which are generated and maintained by EntityFramework and EntityFramework Core.\r\n\r\n## API-Changes:\r\n\r\nTo provide a more ViewModel/View Controller compatible way for a WinForms LOB architecture, I propose the following API-Changes:\r\n\r\n* Introduce a bindable `Command` property on the `Button` class of type `ICommand` (we should identify other potential controls)\r\n![image](https://user-images.githubusercontent.com/9663150/117886177-abdfa800-b263-11eb-94d2-a582a08b0fb0.png)\r\n\r\n* Implement `IBindableComponent` on `ToolStripItem`, to make all `ToolStripItem` derived components bindable, and introduce a bindable `Command` property on all `ToolStripItem` derived components which can be clicked.\r\n![image](https://user-images.githubusercontent.com/9663150/117886405-feb95f80-b263-11eb-899d-c849e704c846.png)\r\n\r\n* Introduce a `IDataContextTarget` interface with a property `DataContext`.\r\n* Explicit implement `IDataContextTarget` in the `Form` class and in the `UserControl` class.\r\n* Introduce an `AssignDataContext` Event on Form and UserControl, which gets raised, when the setter of said property gets written, so that WinForms dev can reroute the DataSource to the appropriate `BindingSource` of the `Form` or the `UserControl`.\r\n![image](https://user-images.githubusercontent.com/9663150/117886048-7fc42700-b263-11eb-9a0a-4c14818620aa.png)\r\n\r\n  ![image](https://user-images.githubusercontent.com/9663150/117886480-227ca580-b264-11eb-81d3-595d3dcba139.png)\r\n\r\n* Optional: To reroute individual Events and bind them to a ViewModel or UI Controller, introduce a `BindableCommandComponent` (more to come).\r\n","Url":"https://github.com/dotnet/winforms/issues/4895","RelatedDescription":"Open issue \"[WIP] Introduce Commands and DataContext to WinForms to adapt modern Binding scenarios\" (#4895)"},{"Id":"885320538","IsPullRequest":true,"CreatedAt":"2021-05-11T18:32:54","Actor":"mmitche","Number":"4889","RawContent":null,"Title":"Use .NET certificate","State":"closed","Body":"Enables an automatic swap from Microsoft400 to MicrosoftDotNet500\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4889)","Url":"https://github.com/dotnet/winforms/pull/4889","RelatedDescription":"Closed or merged PR \"Use .NET certificate\" (#4889)"},{"Id":"879056308","IsPullRequest":false,"CreatedAt":"2021-05-11T14:32:55","Actor":"SenthilKumaranRajan","Number":"4878","RawContent":null,"Title":"Windows Forms Designer debugging in NetCore","State":"closed","Body":"We could not able to perform design time debugging in NetCore Windows Forms.\r\n\r\nWe have tried to perform debugging as we perform for dot NetFramework but our source code cannot be able to debug at design time. We have followed the below steps.\r\n\r\n1.\tSet the breakpoint in our custom control constructor.\r\n2.\tSet the start-up project as “devenv.exe”.\r\n \r\n![image](https://user-images.githubusercontent.com/44424557/117460626-57d67a00-af6a-11eb-9367-e7d823ebee11.png)\r\n\r\n3.\tOn running the application it shows another VisualStudio instance where we will select the project that we need to debug.\r\n4.\tThen on opening the designer and adding the custom control from the toolbox.\r\n\r\nExpected result:\r\n                The Breakpoint set at our custom control constructor should hit.\r\n\r\nObserved result:\r\n                The breakpoint hit properly in the .Net Framework project. But not for the Net core project.\r\n\r\n**Please let us know if we need to enable any other operations to debug for the NET core project.**\r\n\r\nNote:\r\nWe have enabled the preview feature for NetCore.\r\n \r\n![image](https://user-images.githubusercontent.com/44424557/117460590-4ee5a880-af6a-11eb-89e2-66e43746b787.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/4878","RelatedDescription":"Closed issue \"Windows Forms Designer debugging in NetCore\" (#4878)"},{"Id":"887072732","IsPullRequest":true,"CreatedAt":"2021-05-11T12:54:23","Actor":"dotnet-maestro[bot]","Number":"4890","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20210510.1\r\n- **Date Produced**: 5/10/2021 5:53 PM\r\n- **Commit**: 44324e2d3563921f60b1522fccf3fef45dcfe636\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21257.5 to 6.0.0-beta.21260.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21257.5 to 6.0.0-beta.21260.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.21257.5 to 6.0.0-beta.21260.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.21257.5 to 6.0.0-beta.21260.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21257.5 to 6.0.0-beta.21260.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/5faea1b...44324e2\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4890)","Url":"https://github.com/dotnet/winforms/pull/4890","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#4890)"},{"Id":"887074544","IsPullRequest":true,"CreatedAt":"2021-05-11T12:40:48","Actor":"dotnet-maestro[bot]","Number":"4891","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210510.8\r\n- **Date Produced**: 5/11/2021 12:00 AM\r\n- **Commit**: 05b646c85e2d3cfb0f95a4c700238a560477144a\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21260.1 to 6.0.0-preview.5.21260.8][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/e39196f...05b646c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4891)","Url":"https://github.com/dotnet/winforms/pull/4891","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4891)"},{"Id":"884085616","IsPullRequest":true,"CreatedAt":"2021-05-10T12:38:45","Actor":"dotnet-maestro[bot]","Number":"4888","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210510.1\r\n- **Date Produced**: 5/10/2021 10:25 AM\r\n- **Commit**: e39196ffc9e50f3d8927622daaedcd50681d56f2\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21258.11 to 6.0.0-preview.5.21260.1][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/b3278ca...e39196f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4888)","Url":"https://github.com/dotnet/winforms/pull/4888","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4888)"},{"Id":"883184589","IsPullRequest":false,"CreatedAt":"2021-05-10T02:16:18","Actor":"paxtonxuhongzhi","Number":"4886","RawContent":null,"Title":"ControlDesigner can not be used in .NetCore winform,but it works in .Net Framework,how to use it in .Net Core winform","State":"open","Body":"ControlDesigner can not be used in .NetCore winform,but it works in .Net Framework,how to use it in .Net Core winform\r\n92764-image.png\r\n\r\n\r\n![92764-image](https://user-images.githubusercontent.com/42473082/117597581-7316d480-b178-11eb-9504-5bc743bf2129.png)\r\n\r\nSuch as this(Framework),the panel in framework work well,it visable in designer and controable,but in .Net Core,it just exist but can not use.\r\n![92677-image](https://user-images.githubusercontent.com/42473082/117597577-714d1100-b178-11eb-997a-9fcfd91bdf9e.png)\r\n92677-image.png\r\nsuch as this（.Net Core）\r\n\r\nmy code as follow,\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Drawing;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows.Forms;\r\nusing System.Windows.Forms.Design;\r\n\r\nnamespace WindowsFormsAppNetCore\r\n{\r\n[Designer(typeof(LDesigner))]\r\n[DesignTimeVisible(true)]\r\npublic class MenuControlEx : SetterControl\r\n{\r\npublic MenuControlEx()\r\n{\r\nInitializeComponent();\r\n}\r\n/// <summary>\r\n/// Panel\r\n/// </summary>\r\n[Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]\r\npublic Panel MenuPanel\r\n{ get { return setterPanel; } }\r\n\r\n     private void InitializeComponent()\r\n     {\r\n         this.setterPanel = new System.Windows.Forms.Panel();\r\n         this.SuspendLayout();\r\n         // \r\n         // setterPanel\r\n         // \r\n         this.setterPanel.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \r\n         | System.Windows.Forms.AnchorStyles.Left) \r\n         | System.Windows.Forms.AnchorStyles.Right)));\r\n         this.setterPanel.AutoScroll = true;\r\n         this.setterPanel.Location = new System.Drawing.Point(104, 66);\r\n         this.setterPanel.Name = \"setterPanel\";\r\n         this.setterPanel.Size = new System.Drawing.Size(355, 413);\r\n         this.setterPanel.TabIndex = 0;\r\n         // \r\n         // MenuControlEx\r\n         // \r\n         this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 12F);\r\n         this.Controls.Add(this.setterPanel);\r\n         this.ItemContainer = this.setterPanel;\r\n         this.Name = \"MenuControlEx\";\r\n         this.Size = new System.Drawing.Size(482, 508);\r\n         this.ResumeLayout(false);\r\n     }\r\n     private System.Windows.Forms.Panel setterPanel;\r\n }\r\n //system.Desgin\r\n public class LDesigner : ParentControlDesigner\r\n {\r\n     private MenuControlEx _control;\r\n     public override void Initialize(IComponent component)\r\n     {\r\n         base.Initialize(component);\r\n         _control = (MenuControlEx)component;\r\n         bool succ = this.EnableDesignMode(_control.MenuPanel, \"setterPanel\");\r\n         if (!succ)\r\n             throw new Exception(\"\");\r\n     }\r\n }\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/4886","RelatedDescription":"Open issue \"ControlDesigner can not be used in .NetCore winform,but it works in .Net Framework,how to use it in .Net Core winform\" (#4886)"},{"Id":"882233268","IsPullRequest":true,"CreatedAt":"2021-05-09T12:33:50","Actor":"dotnet-maestro[bot]","Number":"4884","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210508.11\r\n- **Date Produced**: 5/9/2021 7:55 AM\r\n- **Commit**: b3278cabceae3231d669f39ea97d9aef8342799e\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21258.11][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/7c69ca6...b3278ca\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4884)","Url":"https://github.com/dotnet/winforms/pull/4884","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4884)"},{"Id":"881069987","IsPullRequest":false,"CreatedAt":"2021-05-08T17:13:55","Actor":"kirsan31","Number":"4883","RawContent":null,"Title":"TreeView flickering","State":"open","Body":"* .NET Core Version: all up to latest (5.0.5).\r\n\r\n* Have you experienced this same bug with .NET Framework?:  yes\r\n\r\n**Problem description:**\r\nTreeView is flickering (especially on large amount of data):\r\nNative control has [ex. style](https://docs.microsoft.com/en-us/windows/win32/controls/tree-view-control-window-extended-styles) `TVS_EX_DOUBLEBUFFER` that fix the problem:\r\n```cs\r\nprivate class TreeViewEx : TreeView\r\n{\r\n    private const int TVM_SETEXTENDEDSTYLE = 0x1100 + 44;\r\n    private const int TVS_EX_DOUBLEBUFFER = 0x0004;\r\n\r\n    [System.Runtime.InteropServices.DllImport(\"user32.dll\", SetLastError = true)]\r\n    private static extern IntPtr SendMessage(IntPtr HWnd, int Msg, IntPtr Wp, IntPtr Lp);\r\n\r\n    protected override void OnHandleCreated(EventArgs e)\r\n    {\r\n        SendMessage(this.Handle, TVM_SETEXTENDEDSTYLE, (IntPtr)TVS_EX_DOUBLEBUFFER, (IntPtr)TVS_EX_DOUBLEBUFFER);\r\n        base.OnHandleCreated(e);\r\n    }\r\n}\r\n```\r\nLeft default `TreeView`, Right with `TVS_EX_DOUBLEBUFFER`:\r\n![TreeView](https://user-images.githubusercontent.com/17767561/117547611-224c9200-b039-11eb-8782-a49848dce38b.gif)\r\n[stackoverflow](https://stackoverflow.com/a/10364283/6075536).\r\n\r\n**Expected behavior:**\r\nAbility to avoid flickering without Pinvoke  and deriving own class from `TreeView`.\r\nP.s. protected `DoubleBuffered` doesn't solve the problem.\r\nP.p.s. May be _API request_ is more suitable here?\r\n\r\n**Minimal repro:**\r\n[TreeViewFlickering.zip](https://github.com/dotnet/winforms/files/6446248/TreeViewFlickering.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/4883","RelatedDescription":"Open issue \"TreeView flickering\" (#4883)"},{"Id":"880741131","IsPullRequest":true,"CreatedAt":"2021-05-08T12:36:25","Actor":"dotnet-maestro[bot]","Number":"4882","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210508.2\r\n- **Date Produced**: 5/8/2021 11:36 AM\r\n- **Commit**: 7c69ca62abd4b1b31c2021fad1e6a539cac4d9cd\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/f511a4a...7c69ca6\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4882)","Url":"https://github.com/dotnet/winforms/pull/4882","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4882)"},{"Id":"880740073","IsPullRequest":true,"CreatedAt":"2021-05-08T12:35:29","Actor":"dotnet-maestro[bot]","Number":"4881","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: b9a1a4bb-2302-4987-3b3d-08d8b8050dda\r\n- **Build**: 20210507.5\r\n- **Date Produced**: 5/8/2021 1:44 AM\r\n- **Commit**: 5faea1b7965644d1f1c666a7130f6f614abe76c0\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21256.13 to 6.0.0-beta.21257.5][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21256.13 to 6.0.0-beta.21257.5][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.21256.13 to 6.0.0-beta.21257.5][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.21256.13 to 6.0.0-beta.21257.5][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21256.13 to 6.0.0-beta.21257.5][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/f9ce605...5faea1b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b9a1a4bb-2302-4987-3b3d-08d8b8050dda)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4881)","Url":"https://github.com/dotnet/winforms/pull/4881","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#4881)"},{"Id":"879803798","IsPullRequest":false,"CreatedAt":"2021-05-07T21:48:50","Actor":"OliaG","Number":"4880","RawContent":null,"Title":"[HighDPI] WinForms changes the true size of controls with system DPI awareness","State":"open","Body":"\r\n* .NET Core Version: \r\n\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nCopied from tweet thread: https://twitter.com/awakecoding/status/1389943462871633922?s=20 \r\n\r\n A 1920x1080 is reported as 4800x2700 with 250% DPI scaling, yet the true size of the control is still 1920x1080 (if I draw using the reported size, it is 250% larger than the real size). This means that when trying to automatically size the contents to the control size, it is always 250% too big when the system DPI scaling is set to 250%. I wouldn't mind if drawing at 250% gave the correct result, but it doesn't. I have to downscale the reported control size:\r\n![image](https://user-images.githubusercontent.com/31997351/117511646-ed5e1380-af42-11eb-8637-1547e35d2a8c.png)\r\n\r\nThe odd thing is that by applying this workaround, I get a correct result even on a mixed DPI system. I can move the control between screens and it still gets the correct size by doing the inverse operation. I would have expected maybe an incorrect result on the high dpi screen?\r\n\r\n\r\n**Minimal repro:**\r\na primary display in the middle with a gigantic resolution (and huge scaling factor - 250%). Add a full HD display on the left (it'll have *negative* coordinates) and another one to the right to get mixed DPI Smiling face with open mouth and cold sweat\r\n![image](https://user-images.githubusercontent.com/31997351/117511722-19799480-af43-11eb-9578-18b4c4d220b2.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/4880","RelatedDescription":"Open issue \"[HighDPI] WinForms changes the true size of controls with system DPI awareness\" (#4880)"},{"Id":"879346652","IsPullRequest":true,"CreatedAt":"2021-05-07T18:04:17","Actor":"pranavkm","Number":"4879","RawContent":null,"Title":"React to MetadataUpdateHandler renames","State":"closed","Body":"Contributes to https://github.com/dotnet/runtime/issues/51545\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4879)","Url":"https://github.com/dotnet/winforms/pull/4879","RelatedDescription":"Closed or merged PR \"React to MetadataUpdateHandler renames\" (#4879)"},{"Id":"878884304","IsPullRequest":true,"CreatedAt":"2021-05-07T12:46:43","Actor":"dotnet-maestro[bot]","Number":"4877","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: d9f5b309-084f-43b5-02de-08d8b80548e4\r\n- **Build**: 20210507.2\r\n- **Date Produced**: 5/7/2021 9:38 AM\r\n- **Commit**: f511a4af3d25e68796bdb7e27a121dab79c88d89\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Text.Json**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21256.1 to 6.0.0-preview.5.21257.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/3897ee5...f511a4a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d9f5b309-084f-43b5-02de-08d8b80548e4)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/winforms/pull/4877)","Url":"https://github.com/dotnet/winforms/pull/4877","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#4877)"},{"Id":"878803506","IsPullRequest":false,"CreatedAt":"2021-05-07T11:15:16","Actor":"SergeySmirnov-Akvelon","Number":"4876","RawContent":null,"Title":"Inspect can't find PropertyGrid's highlighted dropdown list in the accessibility tree","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/main/docs/issue-guide.md -->\r\n\r\n**.NET Core Version:**\r\n- 6.0.100-preview.3.21202.5\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\n- Yes\r\n\r\n**Minimal repro:**\r\n1. Create an app with a PropertyGrid and button.\r\n2. Set button as \"SelectedObject\" property of PropertyGrid\r\n3. Run the app\r\n4. Run  the Inspect\r\n5. Expand the \"AccessibleRole\" dropdown list and highlight the drop-down list using the Inspect\r\n\r\n**Actual behavior:**\r\nThe highlighted drop-down list is not displayed in the accessibility tree.\r\n![image](https://user-images.githubusercontent.com/23376742/117441815-9d7d4d80-af3e-11eb-8e62-e10c914b4a2a.png)\r\n\r\n\r\n**Expected behavior:**\r\nThe highlighted drop-down list should be displayed in the accessibility tree.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/4876","RelatedDescription":"Open issue \"Inspect can't find PropertyGrid's highlighted dropdown list in the accessibility tree\" (#4876)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-05-14T05:30:41.9760046Z","RunDurationInMilliseconds":603}