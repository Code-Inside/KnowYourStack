{"Data":{"GitHub":{"Issues":[{"Id":"785634013","IsPullRequest":true,"CreatedAt":"2021-01-14T04:10:44","Actor":"RussKie","Number":"4464","RawContent":null,"Title":"fix MDI clients lost control box icons ","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n(cherry picked from commit a40d23ce4227a25ae86b7f7bbaf9c7cff818fe5d)\r\n\r\n## Proposed changes\r\n\r\nDuring a cleanup in #2659 the `GetNativeMenuItemImage` forgot to set the size of the struct (previously done in the constructor when it was still a class). Since the return code of `GetMenuItemInfoW` is not checked it was not detected, effectively leaving the image at IntPtr.Zero and ignoring the call.\r\n\r\nResolves #4388\r\nResolves #4460\r\n\r\n\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- migration blocker: in certain scenarios MDI apps become virtually unusable as the control box icons are missing, leaving users unable to restore or close child MDI forms\r\n\r\n## Regression? \r\n\r\n- Yes, introduced in #2659\r\n\r\n## Risk\r\n\r\n- minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![dotNet3 1](https://user-images.githubusercontent.com/22772163/102506385-5374f780-4083-11eb-9477-5a93760844ab.PNG)\r\n![dotNet5 0](https://user-images.githubusercontent.com/22772163/102506400-5839ab80-4083-11eb-985b-87600d7c1d71.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/4403806/104168256-e2421d80-5451-11eb-9eb1-5d1d5a3e1e82.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual\r\n- CTI\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4464)","Url":"https://github.com/dotnet/winforms/pull/4464","RelatedDescription":"Open PR \"fix MDI clients lost control box icons \" (#4464)"},{"Id":"785230228","IsPullRequest":false,"CreatedAt":"2021-01-14T00:33:41","Actor":"fn2020","Number":"4460","RawContent":null,"Title":"Icons of maximized MDI Form are not displayed in .NET 5.0","State":"closed","Body":"![mdi_window_maximized_net50](https://user-images.githubusercontent.com/61822948/104476119-2bb07b00-55c0-11eb-8281-46fd76ef42f5.png)\r\n![mdi_window_maximized_netcore31](https://user-images.githubusercontent.com/61822948/104476124-2c491180-55c0-11eb-9515-ca1b86cc0314.png)\r\n\r\nIt's easy to reproduce if you switch the target Framework in VS2019 between .NET Core 3.1 and .NET 5.0\r\n","Url":"https://github.com/dotnet/winforms/issues/4460","RelatedDescription":"Closed issue \"Icons of maximized MDI Form are not displayed in .NET 5.0\" (#4460)"},{"Id":"785534126","IsPullRequest":false,"CreatedAt":"2021-01-13T23:35:40","Actor":"Tanya-Solyanik","Number":"4463","RawContent":null,"Title":"The code generated by the ListBox control is not consistent with Framework","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1+\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nThe generated code for ListBox1 have extra code: this.listBox1.ItemHeight = 15;\r\n![image](https://user-images.githubusercontent.com/15823268/104525385-e63a8080-55b4-11eb-8018-1cd886b658a0.png)\r\n\r\n**Expected behavior:**\r\nThe generated code for ListBox1 should not have this code: this.listBox1.ItemHeight = 15;\r\n![image](https://user-images.githubusercontent.com/15823268/104525352-d1f68380-55b4-11eb-9bf4-fafbf11c85f4.png)\r\n\r\n\r\n**Minimal repro:**\r\n1. Create a Core winforms application.\r\n2. Add a **ListBox** control to **form**.\r\n3. Double click the **Form1.Designer.cs** file in Solution Explorer.\r\n4. Observe the generated code of the **ListBox**.\r\nResult: The generated code for ListBox1 should not have this code: this.listBox1.ItemHeight = 15;\r\n\r\nNote from Dustin: ListBox.ItemHeight property. \r\ndotnet/winforms@4bca5b3/src/System.Windows.Forms/src/System/Windows/Forms/ListBox.cs#L596-L616\r\nIt has a `[DefaultValue(DefaultItemHeight)]` attribute and DefaultItemHeight is 13.\r\nNote from Tanya: Our default value is not accurate anymore due to the default font change. 13 is the default for Microsoft Sans Serif, 8.25pt, 15 is what comctl32 listbox calculates for Segoe UI, 9pt. To confirm - change the parent control's font.","Url":"https://github.com/dotnet/winforms/issues/4463","RelatedDescription":"Open issue \"The code generated by the ListBox control is not consistent with Framework\" (#4463)"},{"Id":"785532720","IsPullRequest":false,"CreatedAt":"2021-01-13T23:32:03","Actor":"Tanya-Solyanik","Number":"4462","RawContent":null,"Title":"Some default values for control Heights are out of sync with the new default font","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1+\r\n\r\n**Problem description:**\r\n\r\nWe need to enumerate all DefaultValueAttributes to investigate if there are controls other than ListBox and DataGridView whose default sizes are affected by the default font change.\r\n\r\nRelated issues:\r\nhttps://github.com/dotnet/winforms/issues/4461\r\nhttps://github.com/dotnet/winforms/issues/4463","Url":"https://github.com/dotnet/winforms/issues/4462","RelatedDescription":"Open issue \"Some default values for control Heights are out of sync with the new default font\" (#4462)"},{"Id":"785530770","IsPullRequest":false,"CreatedAt":"2021-01-13T23:27:33","Actor":"Tanya-Solyanik","Number":"4461","RawContent":null,"Title":"The code generated by the DataGridView control has extra code for the RowTemplate.Height property","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n3.1+\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nThe generating code for dataGirdView1 has extra code for the RowTemplate.Height property. For the newly created control *at 100% scaling*, designer should generate the same value as is defined by the DefaultValueAttribute\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/104521807-77f4be80-55b2-11eb-9f38-b7e32eff005d.png)\r\n\r\n**Expected behavior:**\r\nRowTemplate.Height line should not be generated\r\n \r\n![image](https://user-images.githubusercontent.com/15823268/104521910-b5f1e280-55b2-11eb-804e-5a05b8b8a195.png)\r\n\r\n**Minimal repro:**\r\n1. Create a Winforms .Net Core application.\r\n2. Add a DataGridView to from designer.\r\n3. Double click to open Form1.Designer.cs file in Solution Explorer.\r\n4. Observe the generated code of the dataGridView1.\r\n\r\nNote from Dustin: DataGridViewRow.Height has a [DefaultValue(22)] attribute, so the code-gen above is expected if the value is 25. ","Url":"https://github.com/dotnet/winforms/issues/4461","RelatedDescription":"Open issue \"The code generated by the DataGridView control has extra code for the RowTemplate.Height property\" (#4461)"},{"Id":"785093437","IsPullRequest":true,"CreatedAt":"2021-01-13T23:17:21","Actor":"dotnet-maestro[bot]","Number":"4458","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20210113.3\r\n- **Date Produced**: 1/13/2021 11:25 AM\r\n- **Commit**: e464963969971f8f1968bdf27248669d624ce29e\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-alpha.1.21061.20 to 6.0.0-alpha.1.21063.3][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/7ffe282...e464963\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4458)","Url":"https://github.com/dotnet/winforms/pull/4458","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4458)"},{"Id":"783416532","IsPullRequest":true,"CreatedAt":"2021-01-13T22:39:20","Actor":"SergeySmirnov-Akvelon","Number":"4453","RawContent":null,"Title":"Implemented ScrollItemPattern for ComboBoxItemAccessibleObject (port to 3.1)","State":"closed","Body":"Fixes #4335\r\nFixes #4323\r\n\r\nBased on changes from #4350\r\n\r\n⚠️ A port of a .NET Framework servicing fix \r\n\r\n## Proposed changes:\r\n- Implement `ScrollIntoView `method of `ScrollItemPattern`\r\n- Fix getting of `Bounds`\r\n\r\n\r\n## Customer Impact:\r\n\r\n- Accessibility tools or users can scroll a combo box drop-down list to some item\r\n- A user can see a correct item Bounds position when combobox scrolling, previously item position was not adjusted based on the scroll position\r\n- These 2 bugs were approved for servicing in .NET Framework 4.8 in February release\r\n\r\n## Regression?\r\n- Yes (from .NET Framework 4.7.2)\r\n\r\n## Risk\r\n- Minimal\r\n\r\n## Screenshots\r\n### Before\r\n- ComboBox items don't support `ScrollItemPattern`\r\n![image](https://user-images.githubusercontent.com/23376742/104170748-adfb3c80-5412-11eb-827f-9ac9ec022787.png)\r\n\r\n### After\r\n- ComboBox items support `ScrollItemPattern` - scroll the current item when invoking `ScrollIntoView`.\r\nFor example, in the gif below I call `ScroolIntoView` for the **9th** item, and the `ComboBox` ensures that the **9th** item is visible.\r\n![4350](https://user-images.githubusercontent.com/23376742/104171000-05011180-5413-11eb-8078-c3a540451b5d.gif)\r\n\r\n## Test methodology\r\n- Unit tests\r\n- Manual testing\r\n- CTI\r\n## Accessibility testing\r\n- Using Inspect\r\n## Test environment(s)\r\n- Microsoft Windows [Version 10.0.19042.685]\r\n- .NET v. 6.0.100-alpha.1.20554.10\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4452)\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4453)","Url":"https://github.com/dotnet/winforms/pull/4453","RelatedDescription":"Closed or merged PR \"Implemented ScrollItemPattern for ComboBoxItemAccessibleObject (port to 3.1)\" (#4453)"},{"Id":"783261060","IsPullRequest":true,"CreatedAt":"2021-01-13T22:39:00","Actor":"SergeySmirnov-Akvelon","Number":"4452","RawContent":null,"Title":"Implemented ScrollItemPattern for ComboBoxItemAccessibleObject (port to 5.0)","State":"closed","Body":"Fixes #4335\r\nFixes #4323\r\n\r\nBased on changes from #4350\r\n\r\n⚠️ A port of a .NET Framework servicing fix \r\n## Proposed changes:\r\n- Implement `ScrollIntoView `method of `ScrollItemPattern`\r\n- Fix getting of `Bounds`\r\n\r\n## Customer Impact:\r\n- Accessibility tools or users can scroll a combo box drop-down list to some item\r\n- A user can see a correct item Bounds position when combobox scrolling\r\n- These 2 bugs were approved for servicing in .NET Framework 4.8 in February release\r\n## Regression?\r\n- Yes (from .NET Framework 4.7.2)\r\n## Risk\r\n- Minimal\r\n## Screenshots\r\n### Before\r\n- ComboBox items don't support `ScrollItemPattern` - `ScrollIntoView` is not available\r\n![image](https://user-images.githubusercontent.com/23376742/104170748-adfb3c80-5412-11eb-827f-9ac9ec022787.png)\r\n\r\n### After\r\n- ComboBox items support `ScrollItemPattern` - ensure that the item is visible when invoking `ScrollIntoView`.\r\nFor example, in the gif below I call `ScroolIntoView` for the **9th** item, and the `ComboBox` shows the **9th** item.\r\n![4350](https://user-images.githubusercontent.com/23376742/104171000-05011180-5413-11eb-8078-c3a540451b5d.gif)\r\n\r\n## Test methodology\r\n- Unit tests\r\n- Manual testing\r\n- CTI\r\n## Accessibility testing\r\n- Using Inspect\r\n## Test environment(s)\r\n- Microsoft Windows [Version 10.0.19042.685]\r\n- .NET v. 6.0.100-alpha.1.20554.10\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4452)","Url":"https://github.com/dotnet/winforms/pull/4452","RelatedDescription":"Closed or merged PR \"Implemented ScrollItemPattern for ComboBoxItemAccessibleObject (port to 5.0)\" (#4452)"},{"Id":"785191648","IsPullRequest":true,"CreatedAt":"2021-01-13T15:52:19","Actor":"dotnet-maestro[bot]","Number":"4459","RawContent":null,"Title":"[release/5.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:7ad8a074-d804-46e2-eafe-08d86aff023e)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 7ad8a074-d804-46e2-eafe-08d86aff023e\r\n- **Build**: 20201221.10\r\n- **Date Produced**: 12/22/2020 12:13 AM\r\n- **Commit**: f1c7a4b1bcd028e17f2714b7e6f30ec1abd1a03f\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.GenFacades**: [from 5.0.0-beta.20580.4 to 5.0.0-beta.20621.10][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 5.0.0-beta.20580.4 to 5.0.0-beta.20621.10][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 5.0.0-beta.20580.4 to 5.0.0-beta.20621.10][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 5.0.0-beta.20580.4 to 5.0.0-beta.20621.10][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 5.0.0-beta.20580.4 to 5.0.0-beta.20621.10][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/79333c5...f1c7a4b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:7ad8a074-d804-46e2-eafe-08d86aff023e)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4459)","Url":"https://github.com/dotnet/winforms/pull/4459","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dotnet/arcade\" (#4459)"},{"Id":"783239195","IsPullRequest":true,"CreatedAt":"2021-01-12T23:48:39","Actor":"RussKie","Number":"4450","RawContent":null,"Title":"fix MDI clients lost control box icons","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n## Proposed changes\r\n\r\nDuring a cleanup in #2659 the `GetNativeMenuItemImage` forgot to set the size of the struct (previously done in the constructor when it was still a class). Since the return code of `GetMenuItemInfoW` is not checked it was not detected, effectively leaving the image at IntPtr.Zero and ignoring the call.\r\n\r\nResolves #4388\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- in certain scenarios MDI apps become virtually unusable as the control box icons are missing, leaving users unable to restore or close child MDI forms\r\n\r\n## Regression? \r\n\r\n- Yes, introduced in #2659\r\n\r\n## Risk\r\n\r\n- minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![dotNet3 1](https://user-images.githubusercontent.com/22772163/102506385-5374f780-4083-11eb-9477-5a93760844ab.PNG)\r\n![dotNet5 0](https://user-images.githubusercontent.com/22772163/102506400-5839ab80-4083-11eb-985b-87600d7c1d71.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/4403806/104168256-e2421d80-5451-11eb-9eb1-5d1d5a3e1e82.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- manual\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4450)","Url":"https://github.com/dotnet/winforms/pull/4450","RelatedDescription":"Closed or merged PR \"fix MDI clients lost control box icons\" (#4450)"},{"Id":"784603822","IsPullRequest":true,"CreatedAt":"2021-01-12T21:33:55","Actor":"dotnet-maestro[bot]","Number":"4457","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:a2a5ea62-d9bf-419c-0c86-08d7315b512a)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: a2a5ea62-d9bf-419c-0c86-08d7315b512a\r\n- **Build**: 20201221.2\r\n- **Date Produced**: 12/21/2020 7:42 PM\r\n- **Commit**: ac42bf1c800b896125632aa845f961e391d1a440\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 2.4.1-beta.20113.5 to 2.4.1-beta.20621.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.20113.5 to 1.0.0-beta.20621.2][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 1.0.0-beta.20113.5 to 1.0.0-beta.20621.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 2.0.0-beta.20113.5 to 2.0.0-beta.20621.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/15f00ef...ac42bf1\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:a2a5ea62-d9bf-419c-0c86-08d7315b512a)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4457)","Url":"https://github.com/dotnet/winforms/pull/4457","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#4457)"},{"Id":"784515087","IsPullRequest":false,"CreatedAt":"2021-01-12T19:09:35","Actor":"phillipstoll","Number":"4456","RawContent":null,"Title":"DesignerHost.CreateComponent throws NotImplemetedException","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET SDK 5.0.101 - .NET Framework 5.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nNo, the bug does not happen in .NET 4.8\r\n\r\n**Problem description:**\r\n`DesignerHost.CreateComponent` throws `NotImplemetedException` with message: \r\n__This method/object is not implemented by design.__\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n```\r\nSystem.Windows.Forms.Design.dll!System.ComponentModel.Design.DesignerHost.System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type componentType, string name) Line 712\tC#\r\n \tSystem.Windows.Forms.Design.dll!System.ComponentModel.Design.DesignerHost.System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type componentType) Line 682\tC#\r\n \tSystem.Windows.Forms.Design.dll!System.ComponentModel.Design.DesignSurface.DefaultDesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost loaderHost) Line 329\tC#\r\n \tSystem.Windows.Forms.Design.dll!System.ComponentModel.Design.DesignerHost.BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader loader) Line 239\tC#\r\n \tSystem.Windows.Forms.Design.dll!System.ComponentModel.Design.DesignSurface.BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader loader) Line 123\tC#\r\n \tSystem.Windows.Forms.Design.dll!System.ComponentModel.Design.DesignSurface.BeginLoad(System.Type rootComponentType) Line 132\tC#\r\n \tDesignSurfaceExtNet5.dll!DesignSurfaceExtNet5.DesignSurfaceExt.CreateRootComponent(System.Type controlType, System.Drawing.Size controlSize) Line 107\tC#\r\n \tDemoConsoleNet5.dll!DemoConsoleNet5.MainForm.CreateDesignSurface(int n) Line 108\tC#\r\n \tDemoConsoleNet5.dll!DemoConsoleNet5.MainForm.InitFormDesigner() Line 29\tC#\r\n \tDemoConsoleNet5.dll!DemoConsoleNet5.MainForm.MainForm_Load(object sender, System.EventArgs e) Line 239\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Form.OnLoad(System.EventArgs e) Line 2625\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Form.OnCreateControl() Line 2501\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.CreateControl(bool fIgnoreVisible) Line 3548\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.CreateControl() Line 3513\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.WmShowWindow(ref System.Windows.Forms.Message m) Line 8348\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.WndProc(ref System.Windows.Forms.Message m) Line 8461\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ScrollableControl.WndProc(ref System.Windows.Forms.Message m) Line 998\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.ContainerControl.WndProc(ref System.Windows.Forms.Message m) Line 1195\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Form.WmShowWindow(ref System.Windows.Forms.Message m) Line 4189\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Form.WndProc(ref System.Windows.Forms.Message m) Line 4280\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.ControlNativeWindow.OnMessage(ref System.Windows.Forms.Message m) Line 12276\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.ControlNativeWindow.WndProc(ref System.Windows.Forms.Message m) Line 12304\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.NativeWindow.Callback(System.IntPtr hWnd, Interop.User32.WM msg, System.IntPtr wparam, System.IntPtr lparam) Line 196\tC#\r\n \t[Native to Managed Transition]\t\r\n \t[Managed to Native Transition]\t\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.SetVisibleCore(bool value) Line 7347\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Form.SetVisibleCore(bool value) Line 1491\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Interop.Mso.msoloop reason, System.Windows.Forms.ApplicationContext context) Line 1929\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Interop.Mso.msoloop reason, System.Windows.Forms.ApplicationContext context) Line 1867\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Application.RunDialog(System.Windows.Forms.Form form) Line 794\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Form.ShowDialog(System.Windows.Forms.IWin32Window owner) Line 3514\tC#\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Form.ShowDialog() Line 3453\tC#\r\n \tDemoConsoleNet5.dll!DemoConsoleNet5.Program.Main(string[] args) Line 42\tC#\r\n```\r\n\r\nI am porting from .NET 4.8 to 5.0 a report designer that features a drag and drop design surface and uses WinForms. Everything works except for this.\r\nI also ported from .NET 3.5 to 5.0 this project (https://www.codeproject.com/Articles/24385/Have-a-Great-DesignTime-Experience-with-a-Powerful) and everything works except for this.\r\nUsing dotPeek to step into the .NET 5.0 code I got as far as DesignerHost.CreateComponent, but I didn't find the method that throws the exception.\r\n\r\n**Expected behavior:**\r\nDesignerHost.CreateComponent returns the requested component\r\n\r\n**Minimal repro:**\r\n1. create a Windows Forms App using .NET 5.0 Framewok\r\n1. create a class DesignSurfaceExt that inherits System.ComponentModel.Design.DesignSurface\r\n2. initialize DesignSurfaceExt by calling ServiceContainer.AddService(typeof(INameCreationService), _nameCreationService); \r\n3. call rootComponent = (Form)designSurfaceExt.CreateRootComponent(typeof(Form), new Size(640, 480));\r\nexpected: CreateRootComponent returns a new Form\r\nactual: DesignerHost.CreateComponent throws NotImplemetedException with message 'This method/object is not implemented by design.'\r\n","Url":"https://github.com/dotnet/winforms/issues/4456","RelatedDescription":"Open issue \"DesignerHost.CreateComponent throws NotImplemetedException\" (#4456)"},{"Id":"784222035","IsPullRequest":true,"CreatedAt":"2021-01-12T13:31:52","Actor":"dotnet-maestro[bot]","Number":"4455","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20210111.20\r\n- **Date Produced**: 1/12/2021 7:56 AM\r\n- **Commit**: 7ffe282af85c6d5ab3f98e6959df39aec9d5ed0f\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-alpha.1.21060.3 to 6.0.0-alpha.1.21061.20][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/4e13df4...7ffe282\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4455)","Url":"https://github.com/dotnet/winforms/pull/4455","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4455)"},{"Id":"784096548","IsPullRequest":false,"CreatedAt":"2021-01-12T10:10:41","Actor":"max-m-s","Number":"4454","RawContent":null,"Title":"ToolStripItemCollection.AddRange(ToolStripItemCollection toolStripItems) causes ArgumentOutOfRangeException as it deletes from source collection","State":"open","Body":"This method cannot be used as it will always cause an ArgumentOutOfRangeException since items are deleted from the source collection while they are copied into the new collection.\r\n\r\nTake this code in Form_Load()\r\n    ContextMenuStrip1.Items.AddRange(EditToolStripMenuItem.DropDownItems)\r\n\r\nBefore it is executed, ContextMenuStrip1 has 0 items and EditToolStripMenuItem has 16. While it is called and the exception is triggered, both have 8 but alternating. I.e. ContextMenuStrip1 now has indexes 0,2,4,6,8,10,12,14 from the original EditToolStripMenuItem. EditToolStripMenuItem is left with 1,3,5,7,9,11,13,15.\r\n\r\nThe exception occurs because it is expected there will be 16 items to move, but only 8 exist in the array now.\r\n\r\nExpected behavior: Each reference is copied into the target menu. Not removed from source.\r\n\r\nWatches before: [https://pasteboard.co/JJhkD66.png](url)\r\nAfter (at exception): [https://pasteboard.co/JJhkV9w.png](url)\r\n(Apologies for random image site. Most are blocked by our corporate firewall)\r\n\r\nThis was tested on VB .NET 4.6.\r\n\r\nI already have a workaround.","Url":"https://github.com/dotnet/winforms/issues/4454","RelatedDescription":"Open issue \"ToolStripItemCollection.AddRange(ToolStripItemCollection toolStripItems) causes ArgumentOutOfRangeException as it deletes from source collection\" (#4454)"},{"Id":"782109130","IsPullRequest":true,"CreatedAt":"2021-01-11T20:57:17","Actor":"dotnet-maestro[bot]","Number":"4444","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20210110.3\r\n- **Date Produced**: 1/11/2021 2:21 AM\r\n- **Commit**: 4e13df4c4ee210850d134ec972569d64fedaa11a\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-alpha.1.21057.2 to 6.0.0-alpha.1.21060.3][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/81b9558...4e13df4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4444)\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/4444","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4444)"},{"Id":"781173143","IsPullRequest":false,"CreatedAt":"2021-01-11T17:18:29","Actor":"LiorBanai","Number":"4441","RawContent":null,"Title":"[NET 5.0] NumericUPDown Exception","State":"closed","Body":"Hi,\r\nI have switched from 3.1 to net 5 and have strange exception on winforms launch on newing NumericUpDowm:\r\n\r\n```Unable to find an entry point named 'UiaRaiseNotificationEvent' in DLL 'UIAutomationCore.dll'.```\r\n\r\nwhich is not clear what is the source.\r\nThe application still  runs ok and I can ignore this error.\r\n\r\n![image](https://user-images.githubusercontent.com/36262995/103876599-820f4c80-50dc-11eb-9029-506c2bc7deb1.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/4441","RelatedDescription":"Closed issue \"[NET 5.0] NumericUPDown Exception\" (#4441)"},{"Id":"783260245","IsPullRequest":false,"CreatedAt":"2021-01-11T10:44:55","Actor":"chris-steema","Number":"4451","RawContent":null,"Title":".NET 5.0 OnCreateHandle override isn't called","State":"open","Body":"* .NET Core Version: \r\n\r\nMicrosoft.NETCore.App.Ref v5.0.0\r\nMicrosoft.WindowsDesktop.App.Ref v5.0.0\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n\r\nNo.\r\n\r\n**Problem description:**\r\n\r\nWhen I build this control in .NET Framework and then drag it onto a .NET Framework Windows Form design surface, OnCreateHandle is called and the MessageBox is shown. However, when I build this control in .NET 5.0 (net5.0-windows) with UseWindowsForms true and then drag it onto a .NET 5.0 Windows Forms design surface, OnCreateHandle is **not** called and the MessageBox does **not** show.\r\n\r\n**Expected behavior:**\r\n\r\nI would expect OnCreateHandle to be called in .NET 5.0 in the same way as it is called in .NET Framework 4.6\r\n\r\n**Minimal repro:**\r\n\r\n```\r\n[Designer(typeof(TestDesigner))]\r\npublic class NETFrameworkControl : Control\r\n{\r\n    protected override void OnPaint(PaintEventArgs e)\r\n    {\r\n        base.OnPaint(e);\r\n\r\n        e.Graphics.FillRectangle(Brushes.Red, e.ClipRectangle);\r\n    }\r\n\r\n    public class TestDesigner : System.Windows.Forms.Design.ControlDesigner\r\n    {\r\n        protected override void OnCreateHandle()\r\n        {\r\n            base.OnCreateHandle();\r\n            MessageBox.Show(\"OnCreateHandle\");\r\n        }\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/winforms/issues/4451","RelatedDescription":"Open issue \".NET 5.0 OnCreateHandle override isn't called\" (#4451)"},{"Id":"782737976","IsPullRequest":false,"CreatedAt":"2021-01-10T04:07:00","Actor":"RussKie","Number":"4449","RawContent":null,"Title":"Incorrect toolbar location when restored via `ToolStripManager.LoadSettings`","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\nPresumably all versions:\r\n* .NET Framework: 4.6.1 (tested)\r\n* .NET Version: 5.0 (tested)\r\n\r\n\r\n**Problem description:**\r\n\r\nOriginally reported in https://github.com/gitextensions/gitextensions/issues/8680. \r\n\r\nIf an application has multiple toolbars, and those are placed at an arbitrary location and persisted via `ToolStripManager.SaveSettings`, not all toolbars will be correctly located once `ToolStripManager.LoadSettings` is called.\r\nE.g. on save:\r\n![image](https://user-images.githubusercontent.com/4403806/104114132-0409aa80-5355-11eb-81fb-54dc4c324249.png)\r\n\r\nOn load:\r\n![image](https://user-images.githubusercontent.com/4403806/104114140-213e7900-5355-11eb-9735-718cefab6bec.png)\r\n\r\n\r\n**Expected behavior:**\r\n\r\nThe location of the toolbars persisted in the config must be preserved.\r\n\r\n\r\n**Minimal repro:**\r\n\r\n1. clone https://github.com/RussKie/Test-ToolStripLoad\r\n1. Run the app, align both toolbars to the left one under another.\r\n2. Stop the app.\r\n3. Open the user.config file, located somethere at `C:\\Users\\<user>\\AppData\\Local\\ToolstripLoad\\ToolstripLoad_Url_<random string>\\1.0.0.0`, check that both toolbars' locations are like this:\r\n```xml\r\n        <System.Windows.Forms.ToolStripSettings.toolsettings.ToolStripFilters>\r\n            <setting name=\"Name\" serializeAs=\"String\">\r\n                <value>ToolStripFilters</value>\r\n            </setting>\r\n            <setting name=\"Location\" serializeAs=\"String\">\r\n                <value>7, 25</value>\r\n            </setting>\r\n        </System.Windows.Forms.ToolStripSettings.toolsettings.ToolStripFilters>\r\n        <System.Windows.Forms.ToolStripSettings.toolsettings.ToolStripMain>\r\n            <setting name=\"Name\" serializeAs=\"String\">\r\n                <value>ToolStripMain</value>\r\n            </setting>\r\n            <setting name=\"Location\" serializeAs=\"String\">\r\n                <value>7, 0</value>\r\n            </setting>\r\n        </System.Windows.Forms.ToolStripSettings.toolsettings.ToolStripMain>\r\n```\r\n4. Run the app again and observe the bottom toolbar shifted by few pixels to the right.\r\n5. Close the app and see that the location value for `ToolStripFilters` has changed.","Url":"https://github.com/dotnet/winforms/issues/4449","RelatedDescription":"Open issue \"Incorrect toolbar location when restored via `ToolStripManager.LoadSettings`\" (#4449)"},{"Id":"782603665","IsPullRequest":true,"CreatedAt":"2021-01-09T13:26:40","Actor":"dotnet-maestro[bot]","Number":"4447","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20210108.3\r\n- **Date Produced**: 1/8/2021 7:58 PM\r\n- **Commit**: 1571d6b095014ad63fdb48b10f5dea912f96872e\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.20630.2 to 6.0.0-beta.21058.3][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.20630.2 to 6.0.0-beta.21058.3][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 6.0.0-beta.20630.2 to 6.0.0-beta.21058.3][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 6.0.0-beta.20630.2 to 6.0.0-beta.21058.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.20630.2 to 6.0.0-beta.21058.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/4c8515c...1571d6b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4447)","Url":"https://github.com/dotnet/winforms/pull/4447","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4447)"},{"Id":"782580862","IsPullRequest":false,"CreatedAt":"2021-01-09T10:42:10","Actor":"RussKie","Number":"4446","RawContent":null,"Title":"Incorrect toolbar location at 125%+ scale factor","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\nPresumably all versions:\r\n* .NET Framework: 4.6.1 (tested)\r\n* .NET Version: 5.0 (tested)\r\n\r\n\r\n**Problem description:**\r\n\r\nOriginally reported in https://github.com/gitextensions/gitextensions/issues/8680. \r\n\r\nAn application with two toolbars placed on the same lane, one after another. When the app is run in scaled environments (i.e. 125%+) the toolbars will get re-odered if the first toolbar becomes longer than the location of the second toolbar.\r\n\r\nThe same problem isn't observed at 100% scale factor, or if the repro app doesn't use its app.manifest.\r\n\r\n* Designer:\r\n![image](https://user-images.githubusercontent.com/4403806/104089377-9ca31a80-52c2-11eb-8884-148fb2b63fc9.png)\r\n\r\n* Runtime 100%\r\n![image](https://user-images.githubusercontent.com/4403806/104089397-c4927e00-52c2-11eb-9b42-fede30dde77f.png)\r\n\r\n* Runtime 150%\r\n![image](https://user-images.githubusercontent.com/4403806/104089413-decc5c00-52c2-11eb-932f-79236d5306ad.png)\r\n\r\n\r\n**Expected behavior:**\r\n\r\nThe order of the toolbars set at the design time must be preserved.\r\n\r\nA workaround is to remove all toolbars after `InitializeComponent();` and add them back in the correct order, e.g.:\r\n```cs\r\n        public FormBrowse()\r\n        {\r\n            InitializeComponent();\r\n\r\n            this.toolPanel.TopToolStripPanel.Controls.Clear();\r\n            this.toolPanel.TopToolStripPanel.Controls.Add(this.ToolStripFilters);\r\n            this.toolPanel.TopToolStripPanel.Controls.Add(this.ToolStripMain);\r\n\r\n        }\r\n```\r\n\r\n**Minimal repro:**\r\n\r\n1. clone https://github.com/RussKie/Test-ToolStripOrder\r\n2. run the app at 100% - observe  `ToolStripMain` before `ToolStripFilters`\r\n3. run the app at 150%+ - observe the reverse order of toolbars","Url":"https://github.com/dotnet/winforms/issues/4446","RelatedDescription":"Open issue \"Incorrect toolbar location at 125%+ scale factor\" (#4446)"},{"Id":"782234566","IsPullRequest":false,"CreatedAt":"2021-01-08T21:49:01","Actor":"transis2","Number":"4445","RawContent":null,"Title":"Create #if to diferentiate Winform and WPF","State":"closed","Body":"I'm converting some projects from .Net Framework to .Net 5 and don't know how to separate the code from winform and wpf.\r\nEg.:\r\nWould be nice if we have:\r\n\r\n#IF WINFORM Then\r\nlabelStatus.Text = \"\"\r\n#Else\r\nlabelStatus.Content = \"\"\r\n#End If\r\n","Url":"https://github.com/dotnet/winforms/issues/4445","RelatedDescription":"Closed issue \"Create #if to diferentiate Winform and WPF\" (#4445)"},{"Id":"781416825","IsPullRequest":false,"CreatedAt":"2021-01-07T15:56:35","Actor":"rummelsworth","Number":"4443","RawContent":null,"Title":"\"window.external\" evaluation in WebBrowser control gives error \"Unexpected call to method or property access.\"","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: .NET 5.0.101\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: No.\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\nAs of .NET 5.0, the “window.external” object reference that’s intended to provide access to the WebBrowser.ObjectForScripting property value does not work. It worked in .NET Core 3.1.\r\n\r\nI didn't find any information about this behavior in the .NET 5 documentation for Breaking Changes or Known Issues.\r\n\r\nEvaluating “window.external” in the control’s browser environment produces the following error message:\r\n\r\n“Unexpected call to method or property access.”\r\n\r\nHere’s a screenshot of the error:\r\n\r\n![webbrowser control error](https://user-images.githubusercontent.com/3069355/103913376-13c38d80-50ce-11eb-80ca-99e6def51ef9.png)\r\n\r\n**Expected behavior:**\r\n\r\nA \"normal\" message box should show (with the message \"called from script code\").\r\n\r\n**Minimal repro:**\r\n\r\nhttps://github.com/rummelsworth/WebBrowserControlTutorial\r\n\r\nThe above-linked repo is an implementation of the [WebBrowser control's \"2-way communication\" tutorial][web-browser-2-way-comms]. It has 3 branches:\r\n- One branch targets netcoreapp3.1 and does not reproduce the error.\r\n- The main branch targets net5.0 and reproduces the error.\r\n- Another branch also targets net5.0 but has been migrated to use WebView2 instead of WebBrowser.\r\n\r\n[web-browser-2-way-comms]: https://docs.microsoft.com/en-us/dotnet/desktop/winforms/controls/implement-two-way-com-between-dhtml-and-client?view=netframeworkdesktop-4.8","Url":"https://github.com/dotnet/winforms/issues/4443","RelatedDescription":"Open issue \"\"window.external\" evaluation in WebBrowser control gives error \"Unexpected call to method or property access.\"\" (#4443)"},{"Id":"781302543","IsPullRequest":true,"CreatedAt":"2021-01-07T13:31:31","Actor":"dotnet-maestro[bot]","Number":"4442","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20210107.2\r\n- **Date Produced**: 1/7/2021 9:25 AM\r\n- **Commit**: 81b9558199454adc6cc2a0e34cc64ebeb8f754c6\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-alpha.1.21055.17 to 6.0.0-alpha.1.21057.2][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/dd3da2b...81b9558\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4442)","Url":"https://github.com/dotnet/winforms/pull/4442","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4442)"},{"Id":"779996835","IsPullRequest":true,"CreatedAt":"2021-01-06T22:48:48","Actor":"RussKie","Number":"4438","RawContent":null,"Title":"Check font returned via `SystemParametersInfoW` interop","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4438)","Url":"https://github.com/dotnet/winforms/pull/4438","RelatedDescription":"Closed or merged PR \"Check font returned via `SystemParametersInfoW` interop\" (#4438)"},{"Id":"780543254","IsPullRequest":true,"CreatedAt":"2021-01-06T13:37:41","Actor":"dotnet-maestro[bot]","Number":"4440","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20210105.17\r\n- **Date Produced**: 1/6/2021 8:25 AM\r\n- **Commit**: dd3da2b5e8d4655414f8b6fbe3a97fbe0f8ee8af\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-alpha.1.21054.6 to 6.0.0-alpha.1.21055.17][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/fd5609d...dd3da2b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4440)","Url":"https://github.com/dotnet/winforms/pull/4440","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4440)"},{"Id":"780513862","IsPullRequest":false,"CreatedAt":"2021-01-06T12:21:32","Actor":"SergeySmirnov-Akvelon","Number":"4439","RawContent":null,"Title":"[Accessibility] Tree node has no keyboard tooltip","State":"open","Body":"- .NET Core Version: 5.0\r\n- Have you experienced this same bug with .NET Framework?: Yes\r\n\r\n**Problem description:**\r\n- TreeNode has no keyboard tooltip when pressing the up/down arrow or Tab button to navigate to a TreeNode which got the keyboard focus\r\n\r\n**Expected behavior:**\r\n- TreeNode has a keyboard tooltip\r\n\r\n**Minimal repro:**\r\n1. Create .Net Core 5.0 app\r\n2. Add a TreeView to the app\r\n3. Add nodes to the TreeView\r\n4. Set tooltips for TreeNodes\r\n5. Allow showing tooltips for nodes\r\n6. Run the app and try to get a node tooltip using a keyboard navigation","Url":"https://github.com/dotnet/winforms/issues/4439","RelatedDescription":"Open issue \"[Accessibility] Tree node has no keyboard tooltip\" (#4439)"},{"Id":"778862843","IsPullRequest":false,"CreatedAt":"2021-01-06T04:01:16","Actor":"PavelAgurov","Number":"4435","RawContent":null,"Title":"Default size of Button in design time","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: 3.1\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nWhen I added new button on the form I have 8x8 button. In .NET WinForms it was much better - default size was useful.\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\n\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/4435","RelatedDescription":"Closed issue \"Default size of Button in design time\" (#4435)"},{"Id":"779546037","IsPullRequest":false,"CreatedAt":"2021-01-05T20:41:55","Actor":"leecow","Number":"4437","RawContent":null,"Title":"Self-Contained Single-File Win Form app does not run","State":"open","Body":"---\r\n**Issue moved from microsoft/dotnet#1285**\r\n- Please respond to @jwu-dharmo.\r\n\r\n---\r\n\r\n_From @jwu-dharmo on Monday, January 4, 2021 5:32:39 PM_\r\n\r\nI am on VS 2019 16.8.3 with .Net 5.0.\r\n\r\nI have created a simple Win Form project without any NuGet or project dependency.  I have made sure it runs out of the IDE.\r\n\r\nWhen I published the project to a self-contained single file exe, it does not run.  The Task explorer briefly showed the exe and switch it to suspended before killing it.  The exe worked fine after I republished it either without the single-file or the self-contained option.  It seems like both options cannot co-exist.\r\n\r\nAny idea?","Url":"https://github.com/dotnet/winforms/issues/4437","RelatedDescription":"Open issue \"Self-Contained Single-File Win Form app does not run\" (#4437)"},{"Id":"779008013","IsPullRequest":true,"CreatedAt":"2021-01-05T13:31:47","Actor":"dotnet-maestro[bot]","Number":"4436","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20210104.6\r\n- **Date Produced**: 1/5/2021 12:16 AM\r\n- **Commit**: fd5609d44cfa904334864e113f253ed9c5e660b8\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.NETCore.Targets**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.Win32.SystemEvents**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.NET.Sdk.IL**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.CodeDom**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.IO.Pipes.AccessControl**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.AccessControl**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.Cryptography.Cng**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.Cryptography.Pkcs**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.Permissions**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.IO.FileSystem.AccessControl**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.IO.Packaging**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.DirectoryServices**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Drawing.Common**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Text.Json**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Text.Encodings.Web**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Threading.AccessControl**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **System.Windows.Extensions**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-alpha.1.21053.3 to 6.0.0-alpha.1.21054.6][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/144cac3...fd5609d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/4436)","Url":"https://github.com/dotnet/winforms/pull/4436","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4436)"},{"Id":"778859256","IsPullRequest":false,"CreatedAt":"2021-01-05T10:45:33","Actor":"PavelAgurov","Number":"4434","RawContent":null,"Title":"Performance issue of Core WinForms Designer","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/docs/issue-guide.md -->\r\n\r\n* .NET Core Version: 3.1\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\n\r\nPerformance of Core WinForms designer is VERY bad to compare with .NET WinForms.\r\nSometimes I should click on control and wait 10-30 sec to select this control and ability to edit it in Property Grid.\r\nWhen I save changes in designer it takes much more time then it was in .NET WinForms.\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\n\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/4434","RelatedDescription":"Closed issue \"Performance issue of Core WinForms Designer\" (#4434)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-01-14T05:30:50.455921Z","RunDurationInMilliseconds":653}