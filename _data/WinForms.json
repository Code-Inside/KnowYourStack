{"Data":{"GitHub":{"Issues":[{"Id":"643255055","IsPullRequest":true,"CreatedAt":"2020-06-23T05:18:29","Actor":"weltkante","Number":"3486","RawContent":null,"Title":"ImageList must be disposed","State":"closed","Body":"## Proposed changes\r\n\r\nDuring investigation of #3358 I noticed that some ImageLists were finalized.\r\n\r\nImageLists are designer components that need to be disposed.\r\n\r\n## Customer Impact\r\n\r\nnone\r\n\r\n## Regression? \r\n\r\nno\r\n\r\n## Risk\r\n\r\nnone\r\n\r\n### Before\r\n\r\nImageList handles were collected by GC and released in the finalizer\r\n\r\n### After\r\n\r\nImageList handles should be disposed by the test that created them\r\n\r\n## Test methodology\r\n\r\nsetting a breakpoint in the `NativeImageList` finalizer and ensure its not hit\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3486)","Url":"https://github.com/dotnet/winforms/pull/3486","RelatedDescription":"Closed or merged PR \"ImageList must be disposed\" (#3486)"},{"Id":"643280361","IsPullRequest":true,"CreatedAt":"2020-06-23T03:41:01","Actor":"mmitche","Number":"3489","RawContent":null,"Title":"Prepare for strict coherency","State":"closed","Body":"Strict coherency means that if your repo declares a dependency with a CPD attribute, the CPD parent must have a direct dependency on that dependency.\r\nThis means that for WPF, there are a few dependencies where it declares Microsoft.Private.Winforms to be the parent, but winforms does not have a dependency on those dependencies. Add them.\r\n\r\nReasons for this approach over the current approach:\r\n- This eliminates some ambiguous tie-breaking scenarios that are very problematic and dangerous in servicing\r\n- Those tie breaking scenarios require the use of BAR to break the ties. If the DB data were to be lost then the tie-breaking would do unexpected things.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3489)","Url":"https://github.com/dotnet/winforms/pull/3489","RelatedDescription":"Closed or merged PR \"Prepare for strict coherency\" (#3489)"},{"Id":"643458615","IsPullRequest":false,"CreatedAt":"2020-06-23T01:22:11","Actor":"alanhoman","Number":"3491","RawContent":null,"Title":"ChildMdi has multiple rendering issues when using PerMonitorV2 or PerMonitor","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n* .NET Core Version: \r\n3.1.400 and v5.0.0-preview.5\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nPerMonitor  using app.manifest works on .NET Framework 4.8.  PerMonitorV2 and PerMonitor do not work in .NET Core 3.1/5.0\r\n\r\n**Problem description:**\r\nThe following issues are occurring with .NET Core 3.1/5.0 HighDpiMode.PerMonitorV2.  The sample project was based on https://github.com/microsoft/dotnet-samples/tree/master/WinForms-HDPI/PerMonitorAware.  These issues prevent us from being able to move to .NET Core.  One of our largest projects has over 1,000 forms and many have multiple Tabs and ListViews that do not render properly on .NET Core due to PerMonitor and PerMonitorV2 issues.  Currently we run with .NET Framework 4.8 in PerMonitor mode and programmatically adjust the fonts on all child forms when the scaling changes.  This PerMonitor workaround does not work in .NET Core. In all the examples, the 144 Dpi monitor is on the left and the 96 Dpi monitor is on the right. Here are [short video clips of issues 1-6](https://github.com/dotnet/winforms/files/4814338/mp4Files.zip).\r\n\r\n**Issue 1**: When moving an MdiParent to a higher DPI monitor the Maximized ChildMdi does not render properly\r\n- Run the project and click MdiParent - Simple Layout\r\n- Maximize SimpleLayout, then drag the MdiParent from a 96 DPI monitor to a 144 DPI monitor (150%).\r\n- The tabControl1 control appears to be anchored beyond the top of the form and overlays all other controls.  The tabContol1 is on the bottom half of the screen and is anchored Top, Bottom, Left, Right.  It should remain on the lower half of the form.\r\n- If the tabControl1 anchoring is changed to Top, Left, this issue does not occur.  On our large project we have dozens of forms that use Top, Bottom, Left, Right anchoring so that it will display as much information as possible to the user depending on their form and screen size.\r\n![Issue 1](https://user-images.githubusercontent.com/2184698/85347187-beff5300-b4ac-11ea-8b62-b873c30ed84f.gif)\r\n\r\n**Issue 2**: When moving an MdiParent to a higher DPI monitor the ChildMdi (not maximized) has extra space on the right and bottom, although it does not have the rendering issues when maximized as in Issue 1.\r\n- Run the project and click MdiParent - Simple Layout\r\n- Drag the MdiParent from a 96 DPI monitor to a 144 DPI monitor (150%).\r\n- There is considerable extra space introduced on the right and bottom of SimpleLayout.\r\n![Issue 2](https://user-images.githubusercontent.com/2184698/85347620-f28ead00-b4ad-11ea-87a9-89b3ac18fc70.gif)\r\n\r\n**Issue 3**: When moving MdiParent to a higher DPI monitor, opening SimpleLayout, and moving it to a lower DPI monitor, the font size increases.  Moving it back increases it more.\r\n- Run the project and click MdiParent - Simple Layout.\r\n- Move the form to a 144 DPI monitor, close the SimpleLayout and go to Tools -> Open New SimpleLayout.\r\n- Move the MdiParent to the 96 DPI monitor.  The form does not render properly, and the font also increases in size.  \r\n- Move the MdiParent back to the 144 DPI monitor.  The font size increases further.  You will notice that the groupBox1 font size is much larger than when the form was first opened on the 144 Dpi monitor.\r\n![Issue 3](https://user-images.githubusercontent.com/2184698/85347734-4b5e4580-b4ae-11ea-876b-0be9aad3f7f5.gif)\r\n\r\n**Issue 4**: When moving SimpleForm to a higher DPI monitor it does not render properly\r\n- Run the project and click Simple Layout\r\n- Drag SimpleLayout from a 96 DPI monitor to a 144 DPI monitor (150%).\r\n- On .NET Core, the ListBox label, TextBox label, and textbox2 are cutoff.  The numericUpDown1, comboBox1, listview1 header, and multiline textbox1 controls are all in a small font (not scaled).  \r\n- On .NET Framework 4.8, the numericUpDown1, comboBox1, listview1 header, and multiline textbox1 controls are all in a small font (not scaled).  The labels are not cutoff as they are in .NET Core.\r\n![Issue 4](https://user-images.githubusercontent.com/2184698/85348934-d7be3780-b4b1-11ea-9884-cf30e213fa10.gif)\r\n\r\n**Issue 5**: When increasing then decreasing the font size, the form does not render properly\r\n- Run the project and click MdiParent - Simple Layout.\r\n- Select Tools - > Increase Font Size, then Tools -> Decrease Font Size.\r\n- SimpleLayout does not render properly.  Its rendering issue is like Issue 1.\r\n- If HighDpiMode.PerMonitorV2 is disabled in Program.cs, the issue does not occur.  With HighDpiMode.PerMonitor, the issue still occurs.\r\n- With .NET Framework 4.8 and With PerMonitor set in app.manifest (app.config setting commented out), this issue does not occur. This is how our current app runs.\r\n![Issue 5](https://user-images.githubusercontent.com/2184698/85347833-a7c16500-b4ae-11ea-9397-08b341e6289b.gif)\r\n\r\n**Issue 6**: Similar issues occur with HighDpiMode.PerMonitor when moving the MdiParent between monitors with different DPI’s.  After 3-4 moves, the form does not render properly.  For .NET Framework 4.8, this issue does not occur.\r\n![Issue 6](https://user-images.githubusercontent.com/2184698/85350040-e22e0080-b4b4-11ea-9de1-abb2de33fa46.gif)\r\n\r\n**Issue 7**: When switching the project from .NET Core 3.1 to NET Core 5.0, the Minimize/Maximize/Close buttons no longer appear on the menu strip when SimpleLayout is maximized.\r\n\r\n**Expected behavior:**\r\nThe SimpleLayout Form should render properly using PerMonitorV2 on monitors with varying DPI's.\r\n\r\n**Minimal repro:**\r\n[.NET Core Sample Project](https://github.com/dotnet/winforms/files/4816186/PerMonitorHDPICore.zip)\r\n[.NET Framework Sample Project](https://github.com/dotnet/winforms/files/4816187/PerMonitorHDPIFramework.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3491","RelatedDescription":"Open issue \"ChildMdi has multiple rendering issues when using PerMonitorV2 or PerMonitor\" (#3491)"},{"Id":"643387641","IsPullRequest":true,"CreatedAt":"2020-06-22T22:01:32","Actor":"lonitra","Number":"3490","RawContent":null,"Title":"Implement TitleImageIndex/Key to ListViewGroup","State":"open","Body":"Fixes #3301 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Add `TitleImageIndex` and `TitleImageKey` API to `ListViewGroup`\r\n- Add `GroupImageList` to `ListView`\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customers will be able to set icons next to `ListViewGroup` header\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/30007367/85338352-f7943200-b496-11ea-816c-94eddb85beec.png)\r\n\r\n### After\r\n\r\n![image](https://user-images.githubusercontent.com/30007367/85338430-23afb300-b497-11ea-98a4-fd123ff0442c.png)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing\r\n- Unit testing\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3490)","Url":"https://github.com/dotnet/winforms/pull/3490","RelatedDescription":"Open PR \"Implement TitleImageIndex/Key to ListViewGroup\" (#3490)"},{"Id":"643270046","IsPullRequest":true,"CreatedAt":"2020-06-22T18:14:44","Actor":"weltkante","Number":"3488","RawContent":null,"Title":"[WIP] Reduce sharing of disposable objects across MemberData sets","State":"open","Body":"Fixes #3487\r\n\r\n## Proposed changes\r\n\r\nUse factory methods instead of sharing disposable objects across MemberData sets\r\n\r\nSharing disposable objects relies on undocumented behavior of xunit (it does not guarantee that disposal happens after all tests are run, it could just as well dispose each set individually after running it). It also introduces hidden dependencies between tests that may lead to undesired interaction between tests.\r\n\r\n## Customer Impact\r\n\r\nnone\r\n\r\n## Regression? \r\n\r\nno\r\n\r\n## Risk\r\n\r\nnone\r\n\r\n### Before\r\n\r\nsometimes disposable objects were shared between MemberData sets\r\n\r\n### After\r\n\r\ndisposable objects should not be shared between MemberData sets\r\n\r\n## Test methodology\r\n\r\ncode review\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3488)","Url":"https://github.com/dotnet/winforms/pull/3488","RelatedDescription":"Open PR \"[WIP] Reduce sharing of disposable objects across MemberData sets\" (#3488)"},{"Id":"643260522","IsPullRequest":false,"CreatedAt":"2020-06-22T17:56:59","Actor":"weltkante","Number":"3487","RawContent":null,"Title":"Reduce sharing of disposable objects across MemberData sets","State":"open","Body":"**.NET Core Version:**\r\nmaster\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nno\r\n\r\n**Problem description:**\r\nDuring investigation of flaky unit tests it was noticed that sharing disposable objects between multiple yields of MemberData sets is not advisable. It works but relies on the undocumented fact that xunit disposes member data after all tests have run. If it were to dispose between test runs it would break those tests.\r\n\r\nIts better style to have each set of test data be independent. This also reduces risk of undesired interaction between data sets.\r\n\r\n**Expected behavior:**\r\nEach set of (disposable) test data returned by MemberData functions should be independent\r\n\r\n**Minimal repro:**\r\nSource code review for shared member data","Url":"https://github.com/dotnet/winforms/issues/3487","RelatedDescription":"Open issue \"Reduce sharing of disposable objects across MemberData sets\" (#3487)"},{"Id":"643251731","IsPullRequest":false,"CreatedAt":"2020-06-22T17:40:33","Actor":"weltkante","Number":"3485","RawContent":null,"Title":"PropertyGrid allocates ImageList handles while disposing","State":"open","Body":"**.NET Core Version:**\r\nmaster\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nunknown\r\n\r\n**Problem description:**\r\n`PropertyGrid` creates native `ImageList` handles when disposing. Those handles are _not_ disposed and left for the GC to collect.\r\n\r\n<details><summary>Stack Trace A</summary>\r\n\r\n### call site\r\n`System.Windows.Forms.Tests.PropertyGridTests.PropertyGrid_LargeButtons_SetWithHandle_GetReturnsExpected`\r\n\r\n### allocation stack\r\n```\r\n   at System.Windows.Forms.ImageList.NativeImageList..ctor(IntPtr himl)\r\n   at System.Windows.Forms.ImageList.CreateHandle()\r\n   at System.Windows.Forms.ImageList.get_Handle()\r\n   at Interop.ComCtl32.ImageList.DrawEx(IHandle himl, Int32 i, HandleRef hdcDst, Int32 x, Int32 y, Int32 dx, Int32 dy, Int32 rgbBk, Int32 rgbFg, ILD fStyle)\r\n   at System.Windows.Forms.ImageList.GetBitmap(Int32 index)\r\n   at System.Windows.Forms.ImageList.ImageCollection.get_Item(Int32 index)\r\n   at System.Windows.Forms.ToolStripItem.get_Image()\r\n   at System.Windows.Forms.ToolStripItem.Animate(Boolean animate)\r\n   at System.Windows.Forms.ToolStripItem.StopAnimate()\r\n   at System.Windows.Forms.ToolStripItem.Dispose(Boolean disposing)\r\n   at System.ComponentModel.Component.Dispose()\r\n   at System.Windows.Forms.ToolStrip.Dispose(Boolean disposing)\r\n   at System.ComponentModel.Component.Dispose()\r\n   at System.Windows.Forms.Control.Dispose(Boolean disposing)\r\n   at System.Windows.Forms.ContainerControl.Dispose(Boolean disposing)\r\n   at System.Windows.Forms.PropertyGrid.Dispose(Boolean disposing)\r\n   at System.ComponentModel.Component.Dispose()\r\n   at System.Windows.Forms.Tests.PropertyGridTests.PropertyGrid_LargeButtons_SetWithHandle_GetReturnsExpected(Boolean visible, Boolean value, Int32 expectedLayoutCallCount1, Int32 expectedInvalidatedCallCount1, Int32 expectedLayoutCallCount2, Int32 expectedInvalidatedCallCount2)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance)\r\n   at Xunit.Sdk.UITestInvoker.<>c__DisplayClass2_0.<<RunAsync>b__2>d.MoveNext()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Delegate.DynamicInvokeImpl(Object[] args)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackDo(ThreadMethodEntry tme)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackHelper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallback(ThreadMethodEntry tme)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbacks()\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)\r\n   at Interop.User32.DispatchMessageW(MSG& msg)\r\n   at Interop.User32.DispatchMessageW(MSG& msg)\r\n   at System.Windows.Forms.Application.ComponentManager.Interop.Mso.IMsoComponentManager.FPushMessageLoop(UIntPtr dwComponentID, msoloop uReason, Void* pvLoopData)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(msoloop reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(msoloop reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.DoEvents()\r\n   at Xunit.Sdk.WinFormsSynchronizationContextAdapter.PumpTill(SynchronizationContext synchronizationContext, Task task)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n```\r\n\r\n</details>\r\n\r\n<details><summary>Stack Trace B</summary>\r\n\r\n### call site\r\n`System.Windows.Forms.Tests.PropertyGridTests.PropertyGrid_LargeButtons_Set_GetReturnsExpected`\r\n\r\n### allocation stack\r\n```\r\n   at System.Windows.Forms.ImageList.NativeImageList..ctor(IntPtr himl)\r\n   at System.Windows.Forms.ImageList.CreateHandle()\r\n   at System.Windows.Forms.ImageList.get_Handle()\r\n   at Interop.ComCtl32.ImageList.DrawEx(IHandle himl, Int32 i, HandleRef hdcDst, Int32 x, Int32 y, Int32 dx, Int32 dy, Int32 rgbBk, Int32 rgbFg, ILD fStyle)\r\n   at System.Windows.Forms.ImageList.GetBitmap(Int32 index)\r\n   at System.Windows.Forms.ImageList.ImageCollection.get_Item(Int32 index)\r\n   at System.Windows.Forms.ToolStripItem.get_Image()\r\n   at System.Windows.Forms.ToolStripItem.Animate(Boolean animate)\r\n   at System.Windows.Forms.ToolStripItem.StopAnimate()\r\n   at System.Windows.Forms.ToolStripItem.Dispose(Boolean disposing)\r\n   at System.ComponentModel.Component.Dispose()\r\n   at System.Windows.Forms.ToolStrip.Dispose(Boolean disposing)\r\n   at System.ComponentModel.Component.Dispose()\r\n   at System.Windows.Forms.Control.Dispose(Boolean disposing)\r\n   at System.Windows.Forms.ContainerControl.Dispose(Boolean disposing)\r\n   at System.Windows.Forms.PropertyGrid.Dispose(Boolean disposing)\r\n   at System.ComponentModel.Component.Dispose()\r\n   at System.Windows.Forms.Tests.PropertyGridTests.PropertyGrid_LargeButtons_Set_GetReturnsExpected(Boolean visible, Boolean value)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance)\r\n   at Xunit.Sdk.UITestInvoker.<>c__DisplayClass2_0.<<RunAsync>b__2>d.MoveNext()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Delegate.DynamicInvokeImpl(Object[] args)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackDo(ThreadMethodEntry tme)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbackHelper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallback(ThreadMethodEntry tme)\r\n   at System.Windows.Forms.Control.InvokeMarshaledCallbacks()\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)\r\n   at Interop.User32.DispatchMessageW(MSG& msg)\r\n   at Interop.User32.DispatchMessageW(MSG& msg)\r\n   at System.Windows.Forms.Application.ComponentManager.Interop.Mso.IMsoComponentManager.FPushMessageLoop(UIntPtr dwComponentID, msoloop uReason, Void* pvLoopData)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(msoloop reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(msoloop reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.DoEvents()\r\n   at Xunit.Sdk.WinFormsSynchronizationContextAdapter.PumpTill(SynchronizationContext synchronizationContext, Task task)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n```\r\n\r\n</details>\r\n\r\n**Expected behavior:**\r\n`PropertyGrid` should not allocate new handles during disposal\r\n\r\n**Minimal repro:**\r\nPut a breakpoint in `NativeImageList` finalizer and run one of these two tests:\r\n* `System.Windows.Forms.Tests.PropertyGridTests.PropertyGrid_LargeButtons_SetWithHandle_GetReturnsExpected`\r\n* `System.Windows.Forms.Tests.PropertyGridTests.PropertyGrid_LargeButtons_Set_GetReturnsExpected`\r\n","Url":"https://github.com/dotnet/winforms/issues/3485","RelatedDescription":"Open issue \"PropertyGrid allocates ImageList handles while disposing\" (#3485)"},{"Id":"643015519","IsPullRequest":true,"CreatedAt":"2020-06-22T12:07:37","Actor":"dotnet-maestro[bot]","Number":"3484","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200621.2\r\n- **Date Produced**: 6/21/2020 8:09 PM\r\n- **Commit**: 1f4d0db2339c37d75723d063827fd2a4c6e2ecef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20320.5 to 5.0.0-preview.7.20321.2\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3484)","Url":"https://github.com/dotnet/winforms/pull/3484","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/runtime\" (#3484)"},{"Id":"642575565","IsPullRequest":true,"CreatedAt":"2020-06-22T10:40:52","Actor":"gpetrou","Number":"3479","RawContent":null,"Title":"Dispose StringWriter instances","State":"closed","Body":"## Proposed changes\r\n\r\n- Looks like some StringWriter instances should be disposed.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3479)","Url":"https://github.com/dotnet/winforms/pull/3479","RelatedDescription":"Closed or merged PR \"Dispose StringWriter instances\" (#3479)"},{"Id":"642934278","IsPullRequest":true,"CreatedAt":"2020-06-22T10:04:28","Actor":"gpetrou","Number":"3483","RawContent":null,"Title":"Use generic lists in MonthCalendar","State":"open","Body":"## Proposed changes\r\n\r\n- Use generic lists in MonthCalendar.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3483)","Url":"https://github.com/dotnet/winforms/pull/3483","RelatedDescription":"Open PR \"Use generic lists in MonthCalendar\" (#3483)"},{"Id":"642861795","IsPullRequest":true,"CreatedAt":"2020-06-22T09:58:43","Actor":"gpetrou","Number":"3481","RawContent":null,"Title":"Add ECO and ECOOP enums in Interop Richedit","State":"closed","Body":"## Proposed changes\r\n\r\n- Add ECO and ECOOP enums in Interop Richedit.\r\n- Remove ECO and ECOOP constants from RichTextBoxConstants.cs and replace their usages with the above enum values.\r\n- Remove unused WCH_EMBEDDING constant.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3481)","Url":"https://github.com/dotnet/winforms/pull/3481","RelatedDescription":"Closed or merged PR \"Add ECO and ECOOP enums in Interop Richedit\" (#3481)"},{"Id":"642868521","IsPullRequest":true,"CreatedAt":"2020-06-22T08:31:46","Actor":"gpetrou","Number":"3482","RawContent":null,"Title":"Dispose GetWindowsFont return value","State":"open","Body":"## Proposed changes\r\n\r\n- WindowsFont was not disposed in some cases.\r\n- Made using statement usage consistent.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3482)","Url":"https://github.com/dotnet/winforms/pull/3482","RelatedDescription":"Open PR \"Dispose GetWindowsFont return value\" (#3482)"},{"Id":"642540671","IsPullRequest":true,"CreatedAt":"2020-06-22T07:27:10","Actor":"gpetrou","Number":"3478","RawContent":null,"Title":"Dispose BinaryReader, BinaryWriter and MemoryStream in AxHost.State","State":"closed","Body":"## Proposed changes\r\n\r\n- Looks like that some disposables should be disposed in this class.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3478)","Url":"https://github.com/dotnet/winforms/pull/3478","RelatedDescription":"Closed or merged PR \"Dispose BinaryReader, BinaryWriter and MemoryStream in AxHost.State\" (#3478)"},{"Id":"642253422","IsPullRequest":true,"CreatedAt":"2020-06-22T07:16:54","Actor":"weltkante","Number":"3473","RawContent":null,"Title":"WebBrowser doesn't like multiple UI threads","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nWorkaround for #3358\r\n\r\n(Extended version of PR #3423 and #3429)\r\n\r\nLike mentioned on the other PR this is only a workaround and not a final solution, further investigation to the memory corruption issues are desired. There is also the possibility of another memory corruption source we did not pinpoint yet.\r\n\r\n## Proposed changes\r\n\r\nPrevent running WebBrowser control tests on multiple UI threads in parallel as that seems to cause memory corruption (unknown whether root cause is in WinForms or native control)\r\n\r\n## Customer Impact\r\n\r\nno random crashes due to memory corruption in unit tests, should improve CI sucess rates\r\n\r\n## Regression? \r\n\r\nno\r\n\r\n## Risk\r\n\r\nmay slow down tests a bit\r\n\r\n### Before\r\n\r\nrandom CI crashes or test failures that made no sense due to memory corruption\r\n\r\n### After\r\n\r\nprevent memory corruption, allowing CI runs to perform normally\r\n\r\n\r\n## Test methodology\r\n\r\nisolated repro scenario into a separate application, it doesn't seem to cause memory corruption when only one UI thread is running the WebBrowser control\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3473)","Url":"https://github.com/dotnet/winforms/pull/3473","RelatedDescription":"Closed or merged PR \"WebBrowser doesn't like multiple UI threads\" (#3473)"},{"Id":"641922573","IsPullRequest":true,"CreatedAt":"2020-06-22T07:15:06","Actor":"dotnet-maestro[bot]","Number":"3472","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200620.5\r\n- **Date Produced**: 6/21/2020 12:12 AM\r\n- **Commit**: 531ebcd1895aa32a106db5849cd4ace3909cefce\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20318.2 to 5.0.0-preview.7.20320.5\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3472)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/3472","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3472)"},{"Id":"642328387","IsPullRequest":true,"CreatedAt":"2020-06-21T23:29:57","Actor":"gpetrou","Number":"3474","RawContent":null,"Title":"Add ES enum in Interop Richedit","State":"closed","Body":"## Proposed changes\r\n\r\n- Add ES enum in Interop Richedit.\r\n- Remove ES and ES_X constants from RichTextBoxConstants.cs and replace their usages with the above enum values.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3474)","Url":"https://github.com/dotnet/winforms/pull/3474","RelatedDescription":"Closed or merged PR \"Add ES enum in Interop Richedit\" (#3474)"},{"Id":"642619973","IsPullRequest":true,"CreatedAt":"2020-06-21T18:52:38","Actor":"gpetrou","Number":"3480","RawContent":null,"Title":"Use generic list in FindInternal and FindControls methods of some classes","State":"open","Body":"## Proposed changes\r\n\r\n- Use generic list in FindInternal and FindControls methods of some classes.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3480)","Url":"https://github.com/dotnet/winforms/pull/3480","RelatedDescription":"Open PR \"Use generic list in FindInternal and FindControls methods of some classes\" (#3480)"},{"Id":"642528843","IsPullRequest":true,"CreatedAt":"2020-06-21T09:30:02","Actor":"hughbe","Number":"3477","RawContent":null,"Title":"Cleanup LCID code","State":"open","Body":"## Proposed Changes\r\n- Cleanup LCID code\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3477)","Url":"https://github.com/dotnet/winforms/pull/3477","RelatedDescription":"Open PR \"Cleanup LCID code\" (#3477)"},{"Id":"642524223","IsPullRequest":true,"CreatedAt":"2020-06-21T08:56:34","Actor":"gpetrou","Number":"3476","RawContent":null,"Title":"Dispose MemoryStream in ConvertFrom method of CursorConverter","State":"open","Body":"## Proposed changes\r\n\r\n- Looks like that a MemoryStream used in ConvertFrom method should be disposed.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3476)","Url":"https://github.com/dotnet/winforms/pull/3476","RelatedDescription":"Open PR \"Dispose MemoryStream in ConvertFrom method of CursorConverter\" (#3476)"},{"Id":"642407742","IsPullRequest":false,"CreatedAt":"2020-06-20T16:41:10","Actor":"KoB-Kirito","Number":"3475","RawContent":null,"Title":"Controls can't be dragged with mouse while in TabControl","State":"open","Body":"* .NET Core Version: \r\n3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nControls can't be dragged around while they are in a TabControl.\r\nTabControl is in general quite buggy. I can also not drag anything into a tab, but the first, because it always switches back to the first tab.\r\n\r\n**Expected behavior:**\r\nTo be able to drag controls around like outside of TabControls.\r\n\r\n**Minimal repro:**\r\n- Create a new Windows Forms App (.NET Core)\r\n- Go in designer-view\r\n- Add a TabControl\r\n- Put something in the TabControl\r\n- Try to drag it with the mouse","Url":"https://github.com/dotnet/winforms/issues/3475","RelatedDescription":"Open issue \"Controls can't be dragged with mouse while in TabControl\" (#3475)"},{"Id":"641817076","IsPullRequest":false,"CreatedAt":"2020-06-19T08:59:35","Actor":"Olina-Zhang","Number":"3471","RawContent":null,"Title":"[Accessibility] Narrator cannot announce order information of the sub menu items in MenuStrip","State":"open","Body":"* .NET Core Version: \r\n.Net 5.0.100-preview.7.20314.1 from Net 5.0 master branch\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**Minimal repro:**\r\n1. Extract WinformsFormsApp6.zip with MenuStrip and open it in VS, then build and run this application.\r\n[WindowsFormsApp6.zip](https://github.com/dotnet/winforms/files/4803525/WindowsFormsApp6.zip)\r\n2. Start Narrator, and focus on File menu, then expand it, go through its sub-items “New, Open, Save, Save As, Print, Print Preview, Exist” one by one\r\n\r\n**Actual behavior:**\r\nNarrator cannot announce order information of the sub menu items in MenuStrip:\r\n![image](https://user-images.githubusercontent.com/26474449/85115411-32eff000-b24e-11ea-871d-5309f4e5d069.png)\r\n\r\n**Expected behavior:**\r\nNarrator can announce order information of the sub menu items in MenuStrip\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3471","RelatedDescription":"Open issue \"[Accessibility] Narrator cannot announce order information of the sub menu items in MenuStrip\" (#3471)"},{"Id":"641150731","IsPullRequest":true,"CreatedAt":"2020-06-19T08:24:12","Actor":"dotnet-maestro[bot]","Number":"3467","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200616.1\r\n- **Date Produced**: 6/16/2020 3:17 PM\r\n- **Commit**: 71b580038fb704df63e03c6b7ae7d2c6a4fdd71d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: from 5.0.0-beta.20309.1 to 5.0.0-beta.20316.1\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20309.1 to 5.0.0-beta.20316.1\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20309.1 to 5.0.0-beta.20316.1\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20309.1 to 5.0.0-beta.20316.1\r\n  - **Microsoft.DotNet.RemoteExecutor**: from 5.0.0-beta.20309.1 to 5.0.0-beta.20316.1\r\n- **Updates to .NET SDKs:**\r\n  - Updates sdk.version to 5.0.100-preview.6.20310.4\r\n  - Updates tools.dotnet to 5.0.100-preview.6.20310.4\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3467)","Url":"https://github.com/dotnet/winforms/pull/3467","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3467)"},{"Id":"640621512","IsPullRequest":true,"CreatedAt":"2020-06-19T07:07:10","Actor":"hughbe","Number":"3465","RawContent":null,"Title":"Cleanup Critical Exception Handling","State":"closed","Body":"## Proposed Changes\r\n- Remove DbgUtil\r\n- Turn `IsSecurityOrCriticalException` to `IsCriticalException`. Its my understanding that in .NET Core we shouldn't be expecting code assert failures etc./\r\n\r\nI'd really love to see `IsCriticalException` killed off and us to do proper checking. I hate this pattern!","Url":"https://github.com/dotnet/winforms/pull/3465","RelatedDescription":"Closed or merged PR \"Cleanup Critical Exception Handling\" (#3465)"},{"Id":"641643907","IsPullRequest":true,"CreatedAt":"2020-06-19T01:37:32","Actor":"JeremyKuhne","Number":"3470","RawContent":null,"Title":"Add region scoping","State":"open","Body":"- Adds scope structs for GDI regions\r\n- Removes WindowsRegion\r\n- Rework WindowsGraphics and WindowsGraphicsWrapper to dispose safely/correctly\r\n- Rework ActiveXImpl to not retain an active HRGN handle\r\n- Fix some IntPtr != null checks\r\n\r\nThis is another step in trying to get rid of DeviceContext and WindowsGraphics and replace them with struct based contexts.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3470)","Url":"https://github.com/dotnet/winforms/pull/3470","RelatedDescription":"Open PR \"Add region scoping\" (#3470)"},{"Id":"641185598","IsPullRequest":true,"CreatedAt":"2020-06-18T12:56:04","Actor":"sashatankov","Number":"3469","RawContent":null,"Title":"all appearances of \"== null\" are replaced with \"is null\" and all appe…","State":"open","Body":"…arances of \"!= null\" are replaced with \"is not null\"\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3469)","Url":"https://github.com/dotnet/winforms/pull/3469","RelatedDescription":"Open PR \"all appearances of \"== null\" are replaced with \"is null\" and all appe…\" (#3469)"},{"Id":"641159732","IsPullRequest":true,"CreatedAt":"2020-06-18T12:36:30","Actor":"dotnet-maestro[bot]","Number":"3468","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: be4b0f38-c1d5-43ab-c5d9-08d76fa9c820\r\n- **Build**: 20200618.2\r\n- **Date Produced**: 6/18/2020 11:02 AM\r\n- **Commit**: 38192e3cbd5610c9fa3d814506424ad93dfa19b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.win-x86.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **runtime.win-x64.Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **Microsoft.NET.Sdk.IL**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **Microsoft.NETCore.App**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **Microsoft.Win32.SystemEvents**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n  - **System.Security.Cryptography.Cng**: from 5.0.0-preview.7.20317.2 to 5.0.0-preview.7.20318.2\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3468)","Url":"https://github.com/dotnet/winforms/pull/3468","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#3468)"},{"Id":"640599906","IsPullRequest":true,"CreatedAt":"2020-06-18T03:50:59","Actor":"hughbe","Number":"3463","RawContent":null,"Title":"Remove StringSorter","State":"closed","Body":"Most of the code was dead anyway. We only call it in one place. Prefer using `Array.Sort`!\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3463)","Url":"https://github.com/dotnet/winforms/pull/3463","RelatedDescription":"Closed or merged PR \"Remove StringSorter\" (#3463)"},{"Id":"640650967","IsPullRequest":true,"CreatedAt":"2020-06-17T18:24:20","Actor":"hughbe","Number":"3466","RawContent":null,"Title":"Add tests for hidden rtf text","State":"open","Body":"## Proposed Changes\r\n- Add tests for hidden rtf text\r\n\r\nAiming to fix https://github.com/dotnet/winforms/issues/3399\r\nCan't quite repro right now\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3466)","Url":"https://github.com/dotnet/winforms/pull/3466","RelatedDescription":"Open PR \"Add tests for hidden rtf text\" (#3466)"},{"Id":"640601730","IsPullRequest":false,"CreatedAt":"2020-06-17T17:00:43","Actor":"harborsiem","Number":"3464","RawContent":null,"Title":"Vista part of the FolderBrowserDialog should be more compatible","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   3.1.301\r\n Commit:    7feb845744\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.301\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.5\r\n  Commit:  65cd789777\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nI set the SelectedPath property of the FolderBrowserDialog to string.Empty or to \"D:\\\". In this both cases the FolderBrowserDialog will show me any directory (possibly shows me the last directory I have used with OpenFileDialog).\r\n\r\n![FolderBrowser_blank_Core](https://user-images.githubusercontent.com/28147549/84926422-a9b0b000-b0cb-11ea-9237-ebea757642b6.png)\r\n\r\nWhen I set a directory to SelectedPath like \"D:\\Data\" the FolderBrowserDialog will show this directory (this will be the correct behavior)\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n\r\n**Expected behavior:**\r\n\r\nSelectedPath = string.Empty should show this:\r\n![FolderBrowser_blank](https://user-images.githubusercontent.com/28147549/84926318-7ec65c00-b0cb-11ea-8dd5-e8d0820504ea.png)\r\n\r\nSelectedPath = \"D:\\\" should show this:\r\n![FolderBrowser_d](https://user-images.githubusercontent.com/28147549/84926359-8ab21e00-b0cb-11ea-8572-1e353ecd5433.png)\r\n\r\n\r\n**Minimal repro:**\r\n\r\nFolderBrowserDialog dialog = new FolderBrowserDialog();\r\ndialog.SelectedPath = string.Empty;\r\ndialog.ShowDialog();","Url":"https://github.com/dotnet/winforms/issues/3464","RelatedDescription":"Open issue \"Vista part of the FolderBrowserDialog should be more compatible\" (#3464)"},{"Id":"640227046","IsPullRequest":true,"CreatedAt":"2020-06-17T08:26:38","Actor":"v-chmart","Number":"3462","RawContent":null,"Title":"LOC CHECKIN | dotnet/winforms master | 20200617","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\nLocalization update only\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3462)","Url":"https://github.com/dotnet/winforms/pull/3462","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/winforms master | 20200617\" (#3462)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-06-23T05:30:52.8708337Z","RunDurationInMilliseconds":1013}