{"Data":{"GitHub":{"Issues":[{"Id":"1173136380","IsPullRequest":true,"CreatedAt":"2022-03-18T03:07:35","Actor":"dotnet-maestro[bot]","Number":"6277","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220317.3\r\n- **Date Produced**: March 18, 2022 2:43:52 AM UTC\r\n- **Commit**: cc62324f044c1c286478c437fb2608c2d3f9edad\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22166.2 to 7.0.0-preview.3.22167.3][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22166.2 to 7.0.0-preview.3.22167.3][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.1][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/f2eb3f7...cc62324\r\n[2]: https://github.com/dotnet/runtime/compare/a5f3f96...05cb7f5\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6277","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/winforms\" (#6277)"},{"Id":"1173098427","IsPullRequest":true,"CreatedAt":"2022-03-18T01:53:00","Actor":"stephentoub","Number":"6276","RawContent":null,"Title":"Avoid unnecessary byte[] allocation in Baml2006Reader.Process_Header","State":"open","Body":"## Description\r\n\r\nBaml2006Reader.Process_Header skips past data from the reader, but it does so by calling BinaryReader.ReadBytes, which allocates, fills, and returns an array, which Process_Header promptly ignores.  We can instead just change the position on the stream, or worst case if it's not seekable, read into a temporarily rented array.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary array allocations.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal.","Url":"https://github.com/dotnet/wpf/pull/6276","RelatedDescription":"Open PR \"Avoid unnecessary byte[] allocation in Baml2006Reader.Process_Header\" (#6276)"},{"Id":"1172934909","IsPullRequest":true,"CreatedAt":"2022-03-17T21:23:54","Actor":"stephentoub","Number":"6275","RawContent":null,"Title":"Remove some unnecessary StringBuilders","State":"open","Body":"## Description\r\n\r\nThere are a bunch of StringBuilders being created that aren't necessary.  This removes some of them.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary overheads.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal (basically just if there were typos)","Url":"https://github.com/dotnet/wpf/pull/6275","RelatedDescription":"Open PR \"Remove some unnecessary StringBuilders\" (#6275)"},{"Id":"1172852904","IsPullRequest":true,"CreatedAt":"2022-03-17T19:59:12","Actor":"stephentoub","Number":"6274","RawContent":null,"Title":"Run some built-in .NET SDK perf analyzers over several WPF assemblies","State":"open","Body":"## Description\r\n\r\nOver the last several releases of .NET, the SDK has added a multitude of analyzers to help find and flag opportunities for perf improvements.  I ran several of those analyzers over a few of the assemblies and applied the auto-fixers; I also code reviewed each fix and tweaked a handfull.\r\n\r\n## Customer Impact\r\n\r\nMany of these changes contribute small but meaningful reductions in overhead.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6274","RelatedDescription":"Open PR \"Run some built-in .NET SDK perf analyzers over several WPF assemblies\" (#6274)"},{"Id":"1172828356","IsPullRequest":false,"CreatedAt":"2022-03-17T19:31:21","Actor":"NWoodsman","Number":"6273","RawContent":null,"Title":"System.Windows.Media.Pen.DashCap uses PenLineCap instead of PenDashCap","State":"open","Body":"* .NET Core Version: 6.0\r\n* Windows version: 10 build 19043.1586\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? **No**\r\n\r\n **Problem description:**\r\n\r\n`System.Windows.Media.Pen.DashCap` is of type `enum` `System.Windows.Media.PenLineCap` . The namespace has `enum` `System.Windows.Media.PenDashCap` which by the name seems to be the correct enum for this property. \r\n\r\nThe reference source for .Net 4.8 has the following (internal) comment reinforcing the mismatched type.\r\n\r\n```\r\n/// <summary>\r\n        /// Pen - Initializes the brush from the parameters.\r\n        /// </summary>\r\n        /// <param name=\"brush\"> The Pen's Brush. </param>\r\n        /// <param name=\"thickness\"> The Pen's thickness. </param>\r\n        /// <param name=\"startLineCap\"> The PenLineCap which applies to the start of the stroke. </param>\r\n        /// <param name=\"endLineCap\"> The PenLineCap which applies to the end of the stroke. </param>\r\n        /// <param name=\"dashCap\"> The PenDashCap which applies to the ends of each dash. </param> //<--------- Incorrect\r\n        /// <param name=\"lineJoin\"> The PenLineJoin. </param>\r\n        /// <param name=\"miterLimit\"> The miter limit. </param>\r\n        /// <param name=\"dashStyle\"> The dash style. </param>\r\n```\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n \r\nUse the `PenLineCap`  enum in the property `Pen.DashCap`\r\n\r\n **Expected behavior:**\r\n\r\nExpected to use `System.Windows.Media.PenDashCap` in the property `Pen.DashCap` \r\n \r\n **Minimal repro:**\r\n\r\nSee the docs:\r\n\r\nhttps://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/Media/Pen.cs,abab5dce39ebd2ad\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.windows.media.pendashcap?view=windowsdesktop-6.0\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.windows.media.pen?view=windowsdesktop-6.0\r\n\r\nMaybe `PenDashCap` should be removed from the namespace, I can't find any used instances of the enum.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/6273","RelatedDescription":"Open issue \"System.Windows.Media.Pen.DashCap uses PenLineCap instead of PenDashCap\" (#6273)"},{"Id":"1172682594","IsPullRequest":true,"CreatedAt":"2022-03-17T18:02:10","Actor":"stephentoub","Number":"6272","RawContent":null,"Title":"Use span slice instead of substring in AbbreviatedGeometryParser.ReadNumber","State":"open","Body":"## Description\r\n\r\nAbbreviatedGeometryParser.ReadNumber is using Substring to pass to Convert.ToDouble the relevant portion of the string to parse. We can instead just pass in a span slice to double.Parse (which Convert.ToDouble delegates to after a null check that's irrelevant here).\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocations.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6272","RelatedDescription":"Open PR \"Use span slice instead of substring in AbbreviatedGeometryParser.ReadNumber\" (#6272)"},{"Id":"1172532689","IsPullRequest":true,"CreatedAt":"2022-03-17T16:11:10","Actor":"stephentoub","Number":"6271","RawContent":null,"Title":"Remove substring allocation from Baml2006Reader.Logic_GetFullXmlns","State":"open","Body":"## Description\r\n\r\nWhen getting the assembly name, we can slice out the piece that's needed rather than allocating a substring.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary string allocations.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6271","RelatedDescription":"Open PR \"Remove substring allocation from Baml2006Reader.Logic_GetFullXmlns\" (#6271)"},{"Id":"1172494985","IsPullRequest":true,"CreatedAt":"2022-03-17T15:44:08","Actor":"stephentoub","Number":"6270","RawContent":null,"Title":"Don't allocate fallback name in XamlNamespace.GetXamlType unless it's needed","State":"open","Body":"## Description\r\n\r\nXamlNamespace.GetXamlType is always concatenating a string together, but that string is only used on a fallback path.  So only create it on the fallback path.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary string allocation.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6270","RelatedDescription":"Open PR \"Don't allocate fallback name in XamlNamespace.GetXamlType unless it's needed\" (#6270)"},{"Id":"1172487002","IsPullRequest":true,"CreatedAt":"2022-03-17T15:38:52","Actor":"stephentoub","Number":"6269","RawContent":null,"Title":"Avoid exceptional string allocation in StaticExtension.ProvideValue","State":"open","Body":"## Description\r\n\r\nProvideValue is frequently creating a string that only ends up being used to populate an exception.  We can just delay creating the string until the exception is thrown so that we don't create it in success cases.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocations meant only for an exceptional path showing up in success paths.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6269","RelatedDescription":"Open PR \"Avoid exceptional string allocation in StaticExtension.ProvideValue\" (#6269)"},{"Id":"1172394936","IsPullRequest":true,"CreatedAt":"2022-03-17T13:33:31","Actor":"stephentoub","Number":"6268","RawContent":null,"Title":"Remove unnecessary string and string[] allocations from MS.Internal.ContentType","State":"open","Body":"## Description\r\n\r\nMS.Internal.ContentType is incurring a multitude of unnecessary allocations.  It's parsing input by Substring'ing along it and Trim'ing along it to find the next piece, but only a subset of those strings are actually saved. It's using string.Split just to get two strings, resulting in a string[].  Etc.\r\n\r\n## Customer Impact\r\n\r\nApps using this indirectly incur unnecessary overhead.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal.","Url":"https://github.com/dotnet/wpf/pull/6268","RelatedDescription":"Open PR \"Remove unnecessary string and string[] allocations from MS.Internal.ContentType\" (#6268)"},{"Id":"1172314379","IsPullRequest":true,"CreatedAt":"2022-03-17T12:46:11","Actor":"dotnet-maestro[bot]","Number":"6267","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220316.1\r\n- **Date Produced**: March 16, 2022 4:58:30 PM UTC\r\n- **Commit**: c90e2d9f3d3e2b471a078f949f2a2fea6af2627d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/81001b4...c90e2d9\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6267","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6267)"},{"Id":"1171883806","IsPullRequest":true,"CreatedAt":"2022-03-17T03:20:56","Actor":"ThomasGoulet73","Number":"6266","RawContent":null,"Title":"Disable Indeterminate animation when hiding ProgressBar","State":"open","Body":"Fixes dotnet/wpf#6264\r\n\r\n## Description\r\nDisable Indeterminate animation when hiding ProgressBar. Fixes a performance regression introduced in Aero2 theme (Windows 8 or newer)\r\n\r\n## Customer Impact\r\nBetter performance when hiding an indeterminate progress bar with the theme Aero2.\r\n\r\n## Regression\r\nPerformance regression introduced in Aero2 theme (Windows 8 or newer).\r\n\r\n## Testing\r\nTested with the sample in #6264 and a combination of Visibility and Indeterminate to validate that this PR does not break existing behavior.\r\n\r\n## Risk\r\nLow.","Url":"https://github.com/dotnet/wpf/pull/6266","RelatedDescription":"Open PR \"Disable Indeterminate animation when hiding ProgressBar\" (#6266)"},{"Id":"1171578487","IsPullRequest":true,"CreatedAt":"2022-03-16T22:22:34","Actor":"dotnet-maestro[bot]","Number":"6263","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220316.2\r\n- **Date Produced**: March 16, 2022 8:56:37 PM UTC\r\n- **Commit**: f2eb3f7f3cb5b024a560a0f8b51ed0f36d274d2d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22165.2 to 7.0.0-preview.3.22166.2][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22165.2 to 7.0.0-preview.3.22166.2][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/7deb7cc...f2eb3f7\r\n[2]: https://github.com/dotnet/runtime/compare/bc5e386...a5f3f96\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6263","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6263)"},{"Id":"1171606060","IsPullRequest":true,"CreatedAt":"2022-03-16T22:08:16","Actor":"stephentoub","Number":"6265","RawContent":null,"Title":"Avoid unnecessary enumerator allocations in XamlDirective.GetHashCode","State":"open","Body":"## Description\r\n\r\nWe can just index into the ReadOnlyCollection rather than iterating it via IEnumerator.  We can also avoid unnecessary collection allocations when all of our internal usage that already has an immutable ReadOnlyCollection goes through the internal constructor.\r\n\r\n## Customer Impact\r\n\r\nThese XamlDirective instances are frequently stored in Dictionary's, resulting in every GetHashCode call by the dictionary allocating an enumerator.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal.","Url":"https://github.com/dotnet/wpf/pull/6265","RelatedDescription":"Open PR \"Avoid unnecessary enumerator allocations in XamlDirective.GetHashCode\" (#6265)"},{"Id":"1171600449","IsPullRequest":false,"CreatedAt":"2022-03-16T22:00:34","Actor":"ryanmolden","Number":"6264","RawContent":null,"Title":"WPF ProgressBars with IsIndeterminate = true appear to leak animations, since .NET 4.5","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`): All since .NET 4.5\r\n* Windows version: (`winver`): Any\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n\r\n**Problem description:** WPF's ProgressBar uses a well-known named template part (GlowingRectTemplateName which is == PART_GlowRect) in order to control the indeterminate animation. Specifically it wants to stop the animation when the control becomes invisible.\r\n\r\nSince aero2.normalcolor.xaml was introduced this no longer works as the template has no PART_GlowRect and instead triggers the animation based on the Indeterminate VisualState.\r\n\r\nSpecifically see \r\n\r\nCode here: https://github.com/dotnet/wpf/blob/89d172db0b7a192de720c6cfba5e28a1e7d46123/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Controls/ProgressBar.cs#L62\r\n\r\nand here: https://github.com/dotnet/wpf/blob/89d172db0b7a192de720c6cfba5e28a1e7d46123/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Controls/ProgressBar.cs#L220\r\n\r\nand template here (other templates have similar issues, other than aero.normalcolor.xaml): https://github.com/dotnet/wpf/blob/89d172db0b7a192de720c6cfba5e28a1e7d46123/src/Microsoft.DotNet.Wpf/src/Themes/PresentationFramework.Aero2/Themes/Aero2.NormalColor.xaml#L4428\r\n\r\nThis means that for stock WPF ProgressBars with IsIndeterminate=True, the animations will run forever regardless of whether the animation is visible. This is esepcially bad on high-refresh rate monitors as the callbacks occur much more frequently and keep what could be an idle system non-idle preventing battery saving mode switches on laptops.\r\n \r\n**Actual behavior:** Animations run forever\r\n \r\n**Expected behavior:** Animations stop when the control becomes invisible, as the code appears to facilitate.\r\n \r\n**Minimal repro:**\r\n\r\nMainWindow.xaml\r\n\r\n```\r\n<Window x:Class=\"AnimationTestApp.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:AnimationTestApp\"\r\n        xmlns:system=\"clr-namespace:System;assembly=mscorlib\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n  <Grid Name=\"HostGrid\">\r\n    <Grid.ColumnDefinitions>\r\n      <ColumnDefinition/>\r\n    </Grid.ColumnDefinitions>\r\n    <Grid Grid.Column=\"0\" Name=\"HostElement_Collapsed\" Margin=\"10\" VerticalAlignment=\"Stretch\">\r\n      <ProgressBar Width=\"100\" Height=\"50\" IsIndeterminate=\"True\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\"/>\r\n    </Grid>\r\n  </Grid>\r\n</Window>\r\n\r\n``` \r\nMainWindow.xaml.cs\r\n \r\n```\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\nusing System.Windows.Controls;\r\n \r\nnamespace AnimationTestApp\r\n{\r\n    public partial class MainWindow : Window\r\n    {\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            \r\n            Task.Delay(2000).ContinueWith((t) =>\r\n                {\r\n                    return Dispatcher.InvokeAsync(() =>\r\n                        {\r\n                            Grid panel = (Grid)this.FindName(\"HostElement_Collapsed\");\r\n                            if (panel != null)\r\n                                panel.Visibility = Visibility.Collapsed;\r\n                        }).Task;\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\n```\r\nPlacing a breakpoint on System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.GetCurrentValueCore  with a 'when hit' action that simply say prints a line to the debugger shows that even when the animation is invisible the callbacks continue.\r\n\r\nChanging the markup such that IsIndeterminate is bound to IsVisible and rerunning the repro with the same printing breakpoint shows then the animations stop as the control becomes invisible (as the VisualState = Indeterminate becomes no longer true)\r\n\r\n<ProgressBar Width=\"100\" Height=\"50\" IsIndeterminate=\"{Binding RelativeSource={RelativeSource Self}, Path=IsVisible}\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\"/>","Url":"https://github.com/dotnet/wpf/issues/6264","RelatedDescription":"Open issue \"WPF ProgressBars with IsIndeterminate = true appear to leak animations, since .NET 4.5\" (#6264)"},{"Id":"1170505595","IsPullRequest":false,"CreatedAt":"2022-03-16T18:52:16","Actor":"sam-wheat","Number":"6261","RawContent":null,"Title":"Bindings for CommandParameter do not work","State":"closed","Body":"My control  contains a ListBox which I populate with an array of strings as shown below:\r\n\r\n\r\n\t<ControlTemplate TargetType=\"{x:Type local:DimensionButton}\">\r\n\t\t<Border Background=\"{TemplateBinding Background}\"\r\n\t\t\t\tDataContext=\"{Binding RelativeSource={RelativeSource AncestorType=local:DimensionButton}}\">\r\n\t\t\t<local:DropDownButton\r\n\t\t\t\tContent=\"{Binding Content}\" \r\n\t\t\t\tSelectedItem=\"{Binding SelectedItem}\"\r\n\t\t\t\tItemTemplate=\"{StaticResource DimensionButtonItemTemplate}\"\r\n\t\t\t\tStyle=\"{StaticResource ResourceKey=DropDownButtonStyle}\">\r\n\t\t\t\t<local:DropDownButton.ItemsSource>\r\n\t\t\t\t\t<x:Array Type=\"{x:Type sys:String}\">\r\n\t\t\t\t\t\t<sys:String>Sort Ascending</sys:String>\r\n\t\t\t\t\t\t<sys:String>Sort Descending</sys:String>\r\n\t\t\t\t\t\t<sys:String>Hide</sys:String>\r\n\t\t\t\t\t</x:Array>\r\n\t\t\t\t</local:DropDownButton.ItemsSource>\r\n\t\t\t</local:DropDownButton>\r\n\t\t</Border>\r\n\t</ControlTemplate>\r\n\r\n\t\r\n\r\nDataTemplate is shown below.  **The bindings for the `CheckBox.CommandParameter` do not work.  Why is that and how might I fix it?**  Note that Content and Action are both bound to the same string data item.  Content works - I can see it in the UI - but Action is always null as is DimensionID.\r\n\r\n\r\n\t<DataTemplate x:Key=\"DimensionButtonItemTemplate\">\r\n        <Border Background=\"Yellow\" Padding=\"10\">\r\n            <CheckBox Content=\"{Binding}\" // Works\r\n                      IsChecked=\"{Binding RelativeSource={RelativeSource AncestorType=local:DimensionButton}, Path=SortAscending}\" // Works\r\n                      Command=\"{Binding RelativeSource={RelativeSource AncestorType=local:MyControl}, Path=DimensionEventCommand}\" //Works\r\n                      >\r\n                <CheckBox.CommandParameter>\r\n                    <local:DimensionEventArgs \r\n                        DimensionID=\"{Binding RelativeSource={RelativeSource AncestorType=local:DimensionButton}, Path=Dimension.DisplayValue}\" // error can not find RelativeSource\r\n                        Action=\"{Binding}\"/> // No error msg in output but value is null\r\n                </CheckBox.CommandParameter>\r\n            </CheckBox>\r\n        </Border>\r\n    </DataTemplate>\r\n\t\r\n\r\nIt is interesting to note that when I put a breakpoint on the constructor of the DimensionEventArgs class (shown below) I see the object being constructed however the properties that are targets of the binding are null. \r\n \r\nAlso interesting to note that if the CommandParameter is set as follows it does contain a valid string:\r\n\r\n\t<CheckBox .... CommandParameter={Binding} />\r\n\r\n\r\n\r\nAs attempt to solve the above I tried creating the DimensionEventArgs objects in the list itself as shown below.  However this time the DimensionID binding does not work and nothing I try will fix it.  Error msg:\r\n\r\n> Cannot find source for binding with reference 'RelativeSource FindAncestor, AncestorType='...DimensionButton'\r\n\r\n\r\n\t<local:DropDownButton.ItemsSource>\r\n\t\t<x:Array Type=\"{x:Type local:DimensionEventArgs}\">\r\n\t\t\t<local:DimensionEventArgs Action=\"Sort Ascending\" DimensionID=\"{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DimensionButton}}, Path=Dimension.DisplayValue}\"/>\r\n\t\t\t<local:DimensionEventArgs Action=\"Sort Descending\" DimensionID=\"{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DimensionButton}}, Path=Dimension.DisplayValue}\"/>\r\n\t\t\t<local:DimensionEventArgs Action=\"Hide\" DimensionID=\"{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DimensionButton}}, Path=Dimension.DisplayValue}\"/>\r\n\t\t</x:Array>\r\n\t</local:DropDownButton.ItemsSource>\r\n\r\n\r\nModified the DataTemplate as follows:\r\n\r\n\t<DataTemplate x:Key=\"DimensionButtonItemTemplate\">\r\n\t\t<Border Background=\"Yellow\" Padding=\"10\">\r\n\t\t\t<CheckBox Content=\"{Binding Action}\" \r\n\t\t\t\t\t  IsChecked=\"{Binding RelativeSource={RelativeSource AncestorType=local:DimensionButton}, Path=SortAscending}\" \r\n\t\t\t\t\t  Command=\"{Binding RelativeSource={RelativeSource AncestorType=local:MyControl}, Path=DimensionEventCommand}\"\r\n\t\t\t\t\t  CommandParameter=\"{Binding}\">\r\n\t\t\t\t\r\n\t\t\t</CheckBox>\r\n\t\t</Border>\r\n\t</DataTemplate>\r\n\t\r\n\t\r\nDimensionEventArgs class:\t\r\n\t\r\n\tpublic class DimensionEventArgs  :Control\r\n\t{\r\n\r\n\t\t//  Dimension.DisplayName is guaranteed to be unique and is also the ID\r\n\t\tpublic string DimensionID\r\n\t\t{\r\n\t\t\tget { return (string)GetValue(DimensionIDProperty); }\r\n\t\t\tset { SetValue(DimensionIDProperty, value); }\r\n\t\t}\r\n\r\n\t\tpublic static readonly DependencyProperty DimensionIDProperty =\r\n\t\t\tDependencyProperty.Register(\"DimensionID\", typeof(string), typeof(DimensionEventArgs), new PropertyMetadata(null));\r\n\r\n\r\n\t\tpublic string Action\r\n\t\t{\r\n\t\t\tget { return (string)GetValue(ActionProperty); }\r\n\t\t\tset { SetValue(ActionProperty, value); }\r\n\t\t}\r\n\r\n\t\tpublic static readonly DependencyProperty ActionProperty =\r\n\t\t\tDependencyProperty.Register(\"Action\", typeof(string), typeof(DimensionEventArgs), new PropertyMetadata(null));\r\n\t}\r\n\r\n\r\nI appreciate any assistance.  \r\n\r\n\r\nVersions:\r\n\r\n\tC:\\Users\\sam>dotnet --info\r\n\t.NET SDK (reflecting any global.json):\r\n\t Version:   6.0.201\r\n\t Commit:    ef40e6aa06\r\n\r\n\tRuntime Environment:\r\n\t OS Name:     Windows\r\n\t OS Version:  10.0.19044\r\n\t OS Platform: Windows\r\n\t RID:         win10-x64\r\n\t Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.201\\\r\n\r\n\tHost (useful for support):\r\n\t  Version: 6.0.3\r\n\t  Commit:  c24d9a9c91\r\n\r\nVisual Studio 2022 17.1 latest.","Url":"https://github.com/dotnet/wpf/issues/6261","RelatedDescription":"Closed issue \"Bindings for CommandParameter do not work\" (#6261)"},{"Id":"1171042765","IsPullRequest":false,"CreatedAt":"2022-03-16T13:41:49","Actor":"sampath-narayanan","Number":"6262","RawContent":null,"Title":"Getting wrong size while calculate the size of contenttemplate. ","State":"open","Body":"* Windows version: 10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n\r\n **Problem description:**\r\n\r\n**What I'm doing**\r\nI have a contentcontrol in my window. I have loaded the content template to the contentcontrol. I have loaded the Expander control and ListView whose visibility is set to collapsed to the contenttemplate initially. In runtime when i click the expand button in the ExpanderControl, I will set the ListView visibility to visible. \r\n\r\n**Problem**\r\nI'm trying to calculate the size of the contenttemplate using following code. But I'm getting wrong size. \r\n\r\n```\r\nthis.control.Content = ItemTemplate1.ContentTemplate;\r\nthis.control.ContentTemplate = ItemTemplate1.ContentTemplate;\r\nthis.control.Measure(new Size());\r\nvar controlsize = Size.Empty;\r\nthis.control.Measure(new Size(double.PositiveInfinity, double.PositiveInfinity));\r\ncontrolsize = this.control.DesiredSize;\r\n```\r\n\r\nMean while if I set the listview visibility as visible in compile time itself, then I'm getting the correct size with same code shown above.\r\n\r\n**Gif :**\r\n\r\n![ezgif com-gif-maker (10)](https://user-images.githubusercontent.com/88649640/158601682-27c64191-d76f-4794-a5d9-2129c0f4e1bd.gif)\r\n\r\n **Actual behavior:** \r\n\r\nWhile calculating size of the content template whose visibility is set in runtime, we are getting wrong size as shown in the gif.\r\n \r\n **Expected behavior:**\r\n\r\nNeed to get the correct size of the content template.\r\n \r\n **Minimal repro:**\r\n\r\n1. Run the attached sample\r\n2. Expand the content template 1\r\n3. Click the button \"Template Height of ContentTemplate 1\"\r\n4. you will get a size of 31, 29.\r\n5. Click the button \"Template Height of ContentTemplate 2\"\r\n6. you will get a size of 402,429\r\n\r\nPlease find the sample from the attachment.\r\n[WpfApp2.zip](https://github.com/dotnet/wpf/files/8262591/WpfApp2.zip)\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/6262","RelatedDescription":"Open issue \"Getting wrong size while calculate the size of contenttemplate. \" (#6262)"},{"Id":"1170470623","IsPullRequest":true,"CreatedAt":"2022-03-16T02:41:42","Actor":"ThomasGoulet73","Number":"6260","RawContent":null,"Title":"[Managed DWrite] Migrate FontCollectionLoader to managed","State":"open","Body":"Contributes to #5305\r\nDepends on #6171\r\n\r\n## Description\r\nMigrate DWrite FontCollectionLoader to managed.\r\n\r\n## Customer Impact\r\nIt might be faster and should allow better support of trimming and the support of NativeAOT once everything is migrated to C#.\r\n\r\n## Regression\r\nNo.\r\n\r\n## Testing\r\nLocal build + CI + I tested a few apps that uses custom fonts to test this code path.\r\n\r\n## Risk\r\nLow. For the most part, it is a copy of the C++ code manually rewritten to C# with as little changes as possible.","Url":"https://github.com/dotnet/wpf/pull/6260","RelatedDescription":"Open PR \"[Managed DWrite] Migrate FontCollectionLoader to managed\" (#6260)"},{"Id":"1170256790","IsPullRequest":true,"CreatedAt":"2022-03-15T21:19:05","Actor":"dotnet-maestro[bot]","Number":"6259","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220315.2\r\n- **Date Produced**: March 15, 2022 8:26:36 PM UTC\r\n- **Commit**: 7deb7cca1efe8e3e9930d6c17bd1802f8f29fbcf\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22164.9 to 7.0.0-preview.3.22165.2][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22164.9 to 7.0.0-preview.3.22165.2][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/a2d4493...7deb7cc\r\n[2]: https://github.com/dotnet/runtime/compare/accf6fb...bc5e386\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6259","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6259)"},{"Id":"1170057549","IsPullRequest":false,"CreatedAt":"2022-03-15T18:52:50","Actor":"RaulFunezp","Number":"6258","RawContent":null,"Title":"Me too. A helping workaround is using a global.json in solution dir:","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/issues/6258","RelatedDescription":"Closed issue \"Me too. A helping workaround is using a global.json in solution dir:\" (#6258)"},{"Id":"1169120195","IsPullRequest":true,"CreatedAt":"2022-03-15T03:16:29","Actor":"dotnet-maestro[bot]","Number":"6257","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220314.9\r\n- **Date Produced**: March 15, 2022 2:25:44 AM UTC\r\n- **Commit**: a2d4493edb0a6623d584d23895fd88185099b7e4\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22164.8 to 7.0.0-preview.3.22164.9][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22164.8 to 7.0.0-preview.3.22164.9][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/09eb296...a2d4493\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6257","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6257)"},{"Id":"1169071502","IsPullRequest":true,"CreatedAt":"2022-03-15T01:33:51","Actor":"dotnet-maestro[bot]","Number":"6256","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220314.8\r\n- **Date Produced**: March 15, 2022 12:47:32 AM UTC\r\n- **Commit**: 09eb29692cb7c0c13bef50826d5fa6af97a683b6\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22164.4 to 7.0.0-preview.3.22164.8][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22164.4 to 7.0.0-preview.3.22164.8][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/ba73da8...09eb296\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6256","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6256)"},{"Id":"1168975671","IsPullRequest":true,"CreatedAt":"2022-03-14T22:49:40","Actor":"dotnet-maestro[bot]","Number":"6255","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220314.4\r\n- **Date Produced**: March 14, 2022 9:57:03 PM UTC\r\n- **Commit**: ba73da8eec5ff38342040e6298367c0da17c8081\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22161.1 to 7.0.0-preview.3.22164.4][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22161.1 to 7.0.0-preview.3.22164.4][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22160.15 to 7.0.0-preview.3.22163.2][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/4b94463...ba73da8\r\n[2]: https://github.com/dotnet/runtime/compare/5ce2b9f...accf6fb\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6255","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6255)"},{"Id":"1168628055","IsPullRequest":true,"CreatedAt":"2022-03-14T16:32:06","Actor":"bgrainger","Number":"6254","RawContent":null,"Title":"Eliminate memory copy when reading font data","State":"open","Body":"Fixes #6236\r\n\r\n## Description\r\n\r\nUsing a `<Resource>` font in WPF currently causes a lot of allocation, GC pinning, and memory copying. This is entirely avoidable by returning a pointer to the already-loaded font data to DWrite.\r\n\r\n## Customer Impact\r\n\r\nWithout this fix, customers are forced to hook DWrite APIs and supply their own font-loading implementation; e.g., https://faithlife.codes/blog/2019/06/improving-wpf-text-display-performance/.\r\n\r\n## Regression\r\n\r\nNot a regression.\r\n\r\n## Testing\r\n\r\nManual testing using a test app: https://github.com/bgrainger/EmbeddedFontPerformance\r\n\r\n## Risk\r\n\r\nRisk is low. This fix has been prototyped in a commercial WPF application that's been shipping for 5 years (see blog post above). Since the font source is an `UnmanagedMemoryStream`, we can rely on its data being present in memory at least as long as we hold a reference to the stream. (And since, practically speaking, the font data is backed by the assembly that contains it being mmap'ed into the process' address space, it's going to be safe to dereference it for the lifetime of the application.)\r\n","Url":"https://github.com/dotnet/wpf/pull/6254","RelatedDescription":"Open PR \"Eliminate memory copy when reading font data\" (#6254)"},{"Id":"1168330176","IsPullRequest":false,"CreatedAt":"2022-03-14T12:48:17","Actor":"redseujac75","Number":"6253","RawContent":null,"Title":"Tooltips are still broken in 6.0.3 - in some ways worse than before, is it possible the merge resolution was unsuccessful? Now tooltips seem to disappear everywhere. Run the popup-repro @ https://github.com/amirburbea/PopupRepro","State":"closed","Body":"Tooltips are still broken in 6.0.3 - in some ways worse than before, is it possible the merge resolution was unsuccessful? Now tooltips seem to disappear everywhere. Run the popup-repro @ https://github.com/amirburbea/PopupRepro\r\n\r\nChange the app between .NET5 & .NET6, check out tooltips in a ListBox (left) and in a ComboBox (right). It seems broken in both, whereas before it was only broken in the ComboBox.\r\n\r\n_Originally posted by @amirburbea in https://github.com/dotnet/wpf/issues/6063#issuecomment-1064069083_","Url":"https://github.com/dotnet/wpf/issues/6253","RelatedDescription":"Closed issue \"Tooltips are still broken in 6.0.3 - in some ways worse than before, is it possible the merge resolution was unsuccessful? Now tooltips seem to disappear everywhere. Run the popup-repro @ https://github.com/amirburbea/PopupRepro\" (#6253)"},{"Id":"1167463425","IsPullRequest":true,"CreatedAt":"2022-03-13T02:57:03","Actor":"lindexi","Number":"6252","RawContent":null,"Title":"Optimize the code of OSVersionHelper","State":"open","Body":"\r\n\r\n## Description\r\n\r\nWe can not run the WPF application in the system which version lower than win7. And it will return fast without call the RtlVerifyVersionInfo method.\r\n\r\n## Customer Impact\r\n\r\nImprove performance?\r\n\r\n## Regression\r\n\r\nNone.\r\n\r\n## Testing\r\n\r\nJust CI.\r\n\r\n## Risk\r\n\r\nLow.\r\n","Url":"https://github.com/dotnet/wpf/pull/6252","RelatedDescription":"Open PR \"Optimize the code of OSVersionHelper\" (#6252)"},{"Id":"1167297288","IsPullRequest":false,"CreatedAt":"2022-03-12T14:02:24","Actor":"deeprobin","Number":"6251","RawContent":null,"Title":"Unable to build WPF","State":"open","Body":"```\r\nE:\\external\\dotnet\\wpf>build.cmd -pack -ci -configuration Release -prepareMachine /p:Platform=x86\r\n\r\n// ...\r\n\r\n  UIAutomationTypes -> E:\\external\\dotnet\\wpf\\artifacts\\bin\\UIAutomationTypes\\Release\\net7.0\\UIAutomationTypes.dll\r\n  .NETCoreApp,Version=7.0.AssemblyAttributes.cpp\r\n  UIAutomationProvider-ref -> E:\\external\\dotnet\\wpf\\artifacts\\bin\\UIAutomationProvider-ref\\Release\\net7.0\\UIAutomation\r\n  Provider.dll\r\nLINK : fatal error LNK1104: cannot open file 'MSVCURT_netcore.LIB' [E:\\external\\dotnet\\wpf\\src\\Microsoft.DotNet.Wpf\\src\r\n\\DirectWriteForwarder\\DirectWriteForwarder.vcxproj]\r\n##vso[task.logissue type=error;sourcepath=LINK;linenumber=0;columnnumber=0;code=LNK1104;](NETCORE_ENGINEERING_TELEMETRY=Build) cannot open file 'MSVCURT_netcore.LIB'\r\n  UIAutomationClient-ref -> E:\\external\\dotnet\\wpf\\artifacts\\bin\\UIAutomationClient-ref\\Release\\net7.0\\UIAutomationClie\r\n  nt.dll\r\n  UIAutomationClientSideProviders-ref -> E:\\external\\dotnet\\wpf\\artifacts\\bin\\UIAutomationClientSideProviders-ref\\Relea\r\n  se\\net7.0\\UIAutomationClientSideProviders.dll\r\n  UIAutomationProvider -> E:\\external\\dotnet\\wpf\\artifacts\\bin\\UIAutomationProvider\\Release\\net7.0\\UIAutomationProvider\r\n  .dll\r\n  PresentationCore-ref -> E:\\external\\dotnet\\wpf\\artifacts\\bin\\PresentationCore-ref\\Release\\net7.0\\PresentationCore.dll\r\n\r\nFehler beim Buildvorgang.\r\n\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(130,\r\n5): error : Fehler beim Abrufen von Informationen zu \"runtime.win-x86.Microsoft.DotNet.Wpf.DncEng\" aus der Remotequelle\r\n \"https://pkgs.dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_packaging/d1622942-d16f-48e5-bc83-96f4539e760\r\n1/nuget/v3/flat2/runtime.win-x86.microsoft.dotnet.wpf.dnceng/index.json\". [E:\\external\\dotnet\\wpf\\artifacts\\obj\\effects\r\n\\Win32\\Release\\CppSupport\\CppSupport_effects.csproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(130,\r\n5): error :   Fehler beim Senden der Anforderung. [E:\\external\\dotnet\\wpf\\artifacts\\obj\\effects\\Win32\\Release\\CppSuppor\r\nt\\CppSupport_effects.csproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(130,\r\n5): error :   Die Verbindung mit dem Remoteserver kann nicht hergestellt werden. [E:\\external\\dotnet\\wpf\\artifacts\\obj\\\r\neffects\\Win32\\Release\\CppSupport\\CppSupport_effects.csproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(130,\r\n5): error :   Ein Socketvorgang konnte nicht ausgeführt werden, da dem System Pufferspeicher fehlte oder eine Warteschl\r\nange voll war [E:\\external\\dotnet\\wpf\\artifacts\\obj\\effects\\Win32\\Release\\CppSupport\\CppSupport_effects.csproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(130,\r\n5): error : Fehler beim Herunterladen von Paket \"runtime.win-x86.Microsoft.DotNet.Wpf.DncEng.7.0.0-preview.3.22118.1\" v\r\non \"https://pkgs.dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_packaging/e31c6eea-0277-49f3-8194-142be67a9\r\nf72/nuget/v3/flat2/runtime.win-x86.microsoft.dotnet.wpf.dnceng/7.0.0-preview.3.22118.1/runtime.win-x86.microsoft.dotnet\r\n.wpf.dnceng.7.0.0-preview.3.22118.1.nupkg\". [E:\\external\\dotnet\\wpf\\artifacts\\obj\\DynamicCall\\Win32\\Release\\CppSupport\\\r\nCppSupport_DynamicCall.csproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(130,\r\n5): error : Fehler beim Senden der Anforderung. [E:\\external\\dotnet\\wpf\\artifacts\\obj\\DynamicCall\\Win32\\Release\\CppSupp\r\nort\\CppSupport_DynamicCall.csproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(130,\r\n5): error :   Die Verbindung mit dem Remoteserver kann nicht hergestellt werden. [E:\\external\\dotnet\\wpf\\artifacts\\obj\\\r\nDynamicCall\\Win32\\Release\\CppSupport\\CppSupport_DynamicCall.csproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(130,\r\n5): error :   Ein Socketvorgang konnte nicht ausgeführt werden, da dem System Pufferspeicher fehlte oder eine Warteschl\r\nange voll war [E:\\external\\dotnet\\wpf\\artifacts\\obj\\DynamicCall\\Win32\\Release\\CppSupport\\CppSupport_DynamicCall.csproj]\r\nLINK : fatal error LNK1104: cannot open file 'MSVCURT_netcore.LIB' [E:\\external\\dotnet\\wpf\\src\\Microsoft.DotNet.Wpf\\src\r\n\\DirectWriteForwarder\\DirectWriteForwarder.vcxproj]\r\n    0 Warnung(en)\r\n    3 Fehler\r\n\r\nVerstrichene Zeit 00:01:55.90\r\nBuild failed with exit code 1. Check errors above.\r\n```\r\n\r\nDo you have a solution for this problem?","Url":"https://github.com/dotnet/wpf/issues/6251","RelatedDescription":"Open issue \"Unable to build WPF\" (#6251)"},{"Id":"1166939349","IsPullRequest":true,"CreatedAt":"2022-03-11T22:57:49","Actor":"dotnet-maestro[bot]","Number":"6248","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220311.1\r\n- **Date Produced**: March 11, 2022 10:00:01 PM UTC\r\n- **Commit**: 4b944630e9d5678ddb3a9808e062e5173702db59\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22160.3 to 7.0.0-preview.3.22161.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22160.3 to 7.0.0-preview.3.22161.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22159.12 to 7.0.0-preview.3.22160.15][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/564463d...4b94463\r\n[2]: https://github.com/dotnet/runtime/compare/7e7736d...5ce2b9f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6248","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6248)"},{"Id":"1166893477","IsPullRequest":false,"CreatedAt":"2022-03-11T21:31:28","Actor":"ryan-weil","Number":"6247","RawContent":null,"Title":"AssemblyLoadContext - Assemblies with WPF Window Cannot Be Unloaded","State":"open","Body":" **Problem description:**\r\nAssemblyLoadContext's unload method fails (does not garbage collect/unload the assembly) when the assembly has a WPF window. There is a thread about this issue [here in the main dotnet runtime GitHub](https://github.com/dotnet/runtime/issues/13226), but they recommended someone create a thread in the WPF GitHub .","Url":"https://github.com/dotnet/wpf/issues/6247","RelatedDescription":"Open issue \"AssemblyLoadContext - Assemblies with WPF Window Cannot Be Unloaded\" (#6247)"},{"Id":"1166775931","IsPullRequest":false,"CreatedAt":"2022-03-11T19:26:08","Actor":"vsfeedback","Number":"6246","RawContent":null,"Title":"Missing LostKeyboardFocus event in Windows 11","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Missing-LostKeyboardFocus-event-in-Windo/1678933)._\n\n---\nWhen the MainWindow's LostKeyboardFocus event is triggered in my WPF (bridge) app, i.e. when the user clicks the mouse outside my app, the MainWindow will be hidden with Hide() in the LostKeyboardFocus handler. If the user clicks the app icon in the taskbar another time, the new app instance sends a message to the already existing MainWindow, whereupon it shows itself again with Show(). The new app instance will then be closed.\n\nUnfortunately, under Windows 11, when the MainWindow is displayed again, the LostKeyboardFocus event is no longer triggered if the user clicks outside the MainWindow. However, under Windows 8.1 and under Windows 10, the LostKeyboardFocus event is triggered. Under Windows 11, only when the user clicks inside the app and then outside the app, the LostKeyboardFocus event is triggered and the MainWindow can be hidden again.\n\nI asked in the developer forum, but there the problem could not be reproduced. [https://docs.microsoft.com/en-us/answers/questions/746213/missing-lostkeyboardfocus-event-in-windows-11.html] ()\n\nSample project: [https://1drv.ms/u/s!AnJkahC5qjfigQTcZXXX36fj8ah9]()\n\n---\n### Original Comments\n\n#### Feedback Bot on 2/28/2022, 10:46 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/6246","RelatedDescription":"Open issue \"Missing LostKeyboardFocus event in Windows 11\" (#6246)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-03-18T03:30:28.6088671Z","RunDurationInMilliseconds":550}