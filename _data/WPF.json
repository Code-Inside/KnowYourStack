{"Data":{"GitHub":{"Issues":[{"Id":"1661673017","IsPullRequest":false,"CreatedAt":"2023-04-11T02:30:25","Actor":"EdiWang","Number":"7704","RawContent":null,"Title":"High memory consumption or memory leak on Intel integrated graphics","State":"open","Body":"### Description\r\n\r\nWPF application running on some Intel integrated graphics card is taking a lot more memory than it should. Even a pure empty WPF app takes 165.2 MB on startup.\r\n\r\n![3aedc63e2047a93783dd15d5ac35848](https://user-images.githubusercontent.com/3304703/231039829-55775565-0d43-4026-b4b2-d687a9f401c3.png)\r\n\r\nOn other machine without Intel graphics, or disabling intel graphics card, or use software rendering, the memory consumption is normal.\r\n\r\n![1ea5fdd519f495d74ada897df20fedb](https://user-images.githubusercontent.com/3304703/231039932-8886392a-7b09-493f-b0ce-32c2ec259798.png)\r\n\r\nThere are two threads on Intel community site describing the same issue. But I am not sure if this is a WPF issue or Intel issue.\r\n\r\nhttps://community.intel.com/t5/Graphics/Net-WPF-Application-high-memory-consumption/td-p/1434020\r\nhttps://community.intel.com/t5/Graphics/UHD710-High-memory-usage-and-memory-leak-issues-with-WPF/m-p/1471504\r\n\r\n### Reproduction Steps\r\n\r\n- Prepare a computer with i9-13900H CPU with Iris XE graphics (Other intel graphic may also have the issue)\r\n  - Install latest RTM driver 31.0.101.4255\r\n  - (Or) install latest beta driver 31.0.101.4257\r\n- Create an empty WPF application with VS2022, .NET 6.0 or 7.0\r\n- Publish the application using Release build\r\n- Run the application\r\n- Observe memory usage in task manager\r\n\r\n### Expected behavior\r\n\r\nMemory usage is around 10-30 MB\r\n\r\n### Actual behavior\r\n\r\nMemory usage is around 150 MB\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nSet the WPF app to use software rendering.\r\n\r\n```csharp\r\npublic partial class App : Application\r\n{\r\n    protected override void OnStartup(StartupEventArgs e)\r\n    {\r\n        base.OnStartup(e);\r\n\r\n        RenderOptions.ProcessRenderMode = RenderMode.SoftwareOnly;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Impact\r\n\r\nUsers with some type of Intel graphics will have much more memory usage and potentially slow down their system.\r\n\r\n### Configuration\r\n\r\n- .NET 6.0 / 7.0\r\n- Windows 11 Pro 22621.1485 x64\r\n\r\n### Other information\r\n\r\nThis issue does not happen to\r\n\r\n- i7-1065G7 CPU with Intel lris Plus Graphics (e.g. Surface Laptop 3, Driver version 27.20.100.9621)\r\n- i7-10700T CPU with Intel UHD 630 Graphics \r\n- i7-8665U CPU with Intel UHD 620 Graphics (Driver version 30.0.101.1404)\r\n\r\nAttaching the WPF app used for testing this\r\n\r\n[WpfApp1.zip](https://github.com/dotnet/wpf/files/11195882/WpfApp1.zip)\r\n\r\n_No response_","Url":"https://github.com/dotnet/wpf/issues/7704","RelatedDescription":"Open issue \"High memory consumption or memory leak on Intel integrated graphics\" (#7704)"},{"Id":"1661411506","IsPullRequest":false,"CreatedAt":"2023-04-10T21:42:21","Actor":"lee8871","Number":"7703","RawContent":null,"Title":"PushOpacityMask bad behavior","State":"open","Body":"### Description\n\nI am try to make a Simth chat process, which using WPF:\t`public class test1 : Control {`\r\n![NNBQUWFQ_3}IMCGS0$PC02J](https://user-images.githubusercontent.com/25917796/230999798-5fb86efa-e1e1-4973-9046-7962322bf05a.jpg)\r\nI have to draw all arcs in the circle. So I need a mask \r\n![image](https://user-images.githubusercontent.com/25917796/231000194-4ba4a8cc-b10e-4f86-aaf5-f7fcd59bb1b8.png)\r\nWhen I draw the mask,\r\n```c#\r\n\r\n\t\t\tvar mask_dg = new DrawingGroup();\r\n\t\t\tmask_dg.Children.Add(new GeometryDrawing(Brushes.Black, base_pen, new EllipseGeometry(new Point(0, 0), 1, 1)));\r\n\t\t\tmask_dg.Children.Add(new GeometryDrawing(Brushes.Transparent, base_pen, new EllipseGeometry(new Point(0, 0), 1000, 1000)));\r\n\t\t\tdrawingContext.DrawDrawing(mask_dg);\r\n\t\t\t//drawingContext.PushOpacityMask(new DrawingBrush(mask_dg));\r\n```\r\nIt work well, the black circle is masked.\r\nthan use PushOpacityMask():\r\n```c#\r\n\t\t\tdrawingContext.PushOpacityMask(new DrawingBrush(mask_dg));\r\n```\r\nSomething little here.:\r\n![image](https://user-images.githubusercontent.com/25917796/231000688-97230809-4bc1-458c-b1d1-f0690175cf49.png)\r\n Is the PushOpacityMask do not using the transform? let's try:\r\n```c#\r\n\t\t\tvar mask_dg = new DrawingGroup();\r\n\t\t\tmask_dg.Children.Add(new GeometryDrawing(Brushes.Black, base_pen, new EllipseGeometry(new Point(0, 0), 100, 100)));//change to 100 from 1\r\n\t\t\tmask_dg.Children.Add(new GeometryDrawing(Brushes.Transparent, base_pen, new EllipseGeometry(new Point(0, 0), 1000, 1000)));\r\n\t\t\t//drawingContext.DrawDrawing(mask_dg);\r\n\t\t\tdrawingContext.PushOpacityMask(new DrawingBrush(mask_dg));\r\n\t\t\tforeach (var r in er_circle_r_table) {\r\n\t\t\t\tdrawingContext.DrawGeometry(Brushes.Transparent, R_pen, new EllipseGeometry(new Point(r / (1 + r), 0), 1 / (1 + r), 1 / (1 + r)));\r\n\t\t\t\tdrawingContext.DrawGeometry(Brushes.Transparent, G_pen, new EllipseGeometry(new Point(-r / (1 + r), 0), 1 / (1 + r), 1 / (1 + r)));\r\n\t\t\t}\r\n```\r\n![image](https://user-images.githubusercontent.com/25917796/231001242-dee75d10-7967-4e92-9c4c-a90c8487ebf5.png)\r\nWHY????????\r\n![image](https://user-images.githubusercontent.com/25917796/231001407-e83cef6a-3cab-4747-a513-d4f67da878a4.png)\r\n\r\nMask should big than all draws. \r\n```c#\r\n\t\t\tmask_dg.Children.Add(new GeometryDrawing(Brushes.Transparent, base_pen, new EllipseGeometry(new Point(0, 0), 10000, 10000)));\r\n```\r\nIf any draw out of mask, mask disabled.\r\n![image](https://user-images.githubusercontent.com/25917796/231002760-814b0d28-5315-4d6d-87b1-7f0648c85ddb.png)\r\n\r\n\r\n\r\n\r\n\r\n\n\n### Reproduction Steps\n\nChould you check my publish:\r\nhttps://github.com/lee8871/SimthChat\n\n### Expected behavior\n\nMay fix mask, may mask using same transform in DrawingContext. \n\n### Actual behavior\n\n\r\n![image](https://user-images.githubusercontent.com/25917796/231001407-e83cef6a-3cab-4747-a513-d4f67da878a4.png)\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Impact\n\n_No response_\n\n### Configuration\n\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\r\n    <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform>\r\n    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/wpf/issues/7703","RelatedDescription":"Open issue \"PushOpacityMask bad behavior\" (#7703)"},{"Id":"1660394899","IsPullRequest":false,"CreatedAt":"2023-04-10T07:51:53","Actor":"JakenVeina","Number":"7702","RawContent":null,"Title":"Application.Resources assignments do not trigger InitializeComponent() method to be code generated","State":"open","Body":"### Description\r\n\r\nWhen resources are assigned to `Application.Resources` for an Application definition XAML file, this alone does not cause the code generator to generate an `InitializeComponent()` method, which results in these resource never being loaded by an `Application.LoadComponent()` call . If the `InitializeComponent()` method is generated due to other pieces of XAML code, the `Application.LoadComponent()` call is added to `InitializeComponent()` as expected, but in scenarios where the `Application.LoadComponent()` would be the only thing within the `InitializeComponent()` method, the method is omitted entirely.\r\n\r\n### Reproduction Steps\r\n\r\nCreate a new project from the \"WPF Application\" template, and find the \"App.xaml\" file, and modify it to include a resource definition, and remove the `StartupUri` assignment, as follows:\r\n\r\n```xml\r\n<Application x:Class=\"WpfTest.App\"\r\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n             xmlns:local=\"clr-namespace:WpfTest\">\r\n    <Application.Resources>\r\n        <DataTemplate x:Key=\"Test\"/>\r\n    </Application.Resources>\r\n</Application>\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe code required to load the resource defined in the \"App.xaml\" file should be included in the \"App.g.i.cs\" file generated from \"App.xaml\", as follows:\r\n\r\n```cs\r\n#pragma checksum \"..\\..\\..\\App.xaml\" \"{ff1816ec-aa5e-4d10-87f7-6f4963833460}\" \"E17BFDDF1F61F1827E1EC88A436BDD15F0EECF2C\"\r\n//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//     Runtime Version:4.0.30319.42000\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Windows;\r\nusing System.Windows.Automation;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Controls.Primitives;\r\nusing System.Windows.Controls.Ribbon;\r\nusing System.Windows.Data;\r\nusing System.Windows.Documents;\r\nusing System.Windows.Ink;\r\nusing System.Windows.Input;\r\nusing System.Windows.Markup;\r\nusing System.Windows.Media;\r\nusing System.Windows.Media.Animation;\r\nusing System.Windows.Media.Effects;\r\nusing System.Windows.Media.Imaging;\r\nusing System.Windows.Media.Media3D;\r\nusing System.Windows.Media.TextFormatting;\r\nusing System.Windows.Navigation;\r\nusing System.Windows.Shapes;\r\nusing System.Windows.Shell;\r\nusing WpfTest;\r\n\r\n\r\nnamespace WpfTest {\r\n    \r\n    \r\n    /// <summary>\r\n    /// App\r\n    /// </summary>\r\n    public partial class App : System.Windows.Application {\r\n        \r\n        private bool _contentLoaded;\r\n        \r\n        /// <summary>\r\n        /// InitializeComponent\r\n        /// </summary>\r\n        [System.Diagnostics.DebuggerNonUserCodeAttribute()]\r\n        [System.CodeDom.Compiler.GeneratedCodeAttribute(\"PresentationBuildTasks\", \"7.0.4.0\")]\r\n        public void InitializeComponent() {\r\n            if (_contentLoaded) {\r\n                return;\r\n            }\r\n            _contentLoaded = true;\r\n            \r\n            #line default\r\n            #line hidden\r\n            System.Uri resourceLocater = new System.Uri(\"/WpfTest;component/app.xaml\", System.UriKind.Relative);\r\n            \r\n            #line 1 \"..\\..\\..\\App.xaml\"\r\n            System.Windows.Application.LoadComponent(this, resourceLocater);\r\n            \r\n            #line default\r\n            #line hidden\r\n        }\r\n        \r\n        /// <summary>\r\n        /// Application Entry Point.\r\n        /// </summary>\r\n        [System.STAThreadAttribute()]\r\n        [System.Diagnostics.DebuggerNonUserCodeAttribute()]\r\n        [System.CodeDom.Compiler.GeneratedCodeAttribute(\"PresentationBuildTasks\", \"7.0.4.0\")]\r\n        public static void Main() {\r\n            WpfTest.App app = new WpfTest.App();\r\n            app.InitializeComponent();\r\n            app.Run();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Actual behavior\r\n\r\nThe \"App.g.i.cs\" file that actually gets generated does not include the `Application.LoadComponent()` call necessary to load the resource, and even omits the `InitializeComponent()` method entirely.\r\n\r\n```cs\r\n#pragma checksum \"..\\..\\..\\App.xaml\" \"{ff1816ec-aa5e-4d10-87f7-6f4963833460}\" \"02DBBD13FE26481FB35ED11F73BD07378D520AF0\"\r\n//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//     Runtime Version:4.0.30319.42000\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Windows;\r\nusing System.Windows.Automation;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Controls.Primitives;\r\nusing System.Windows.Controls.Ribbon;\r\nusing System.Windows.Data;\r\nusing System.Windows.Documents;\r\nusing System.Windows.Ink;\r\nusing System.Windows.Input;\r\nusing System.Windows.Markup;\r\nusing System.Windows.Media;\r\nusing System.Windows.Media.Animation;\r\nusing System.Windows.Media.Effects;\r\nusing System.Windows.Media.Imaging;\r\nusing System.Windows.Media.Media3D;\r\nusing System.Windows.Media.TextFormatting;\r\nusing System.Windows.Navigation;\r\nusing System.Windows.Shapes;\r\nusing System.Windows.Shell;\r\nusing WpfTest;\r\n\r\n\r\nnamespace WpfTest {\r\n    \r\n    \r\n    /// <summary>\r\n    /// App\r\n    /// </summary>\r\n    public partial class App : System.Windows.Application {\r\n        \r\n        /// <summary>\r\n        /// Application Entry Point.\r\n        /// </summary>\r\n        [System.STAThreadAttribute()]\r\n        [System.Diagnostics.DebuggerNonUserCodeAttribute()]\r\n        [System.CodeDom.Compiler.GeneratedCodeAttribute(\"PresentationBuildTasks\", \"7.0.4.0\")]\r\n        public static void Main() {\r\n            WpfTest.App app = new WpfTest.App();\r\n            app.Run();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Regression?\r\n\r\nUnsure if this is a regression from .NET Framework.\r\n\r\n### Known Workarounds\r\n\r\nI was unable to work around this issue by manually adding an `Application.LoadComponent()` call to the `App` class constructor, in `App.xaml.cs`. The only workaround I was able to achieve was by adding a dummy attribute assignment to \"App.xaml\", to replace the `StartupUri` assignment, thus triggering the `InitializeComponent()` method to generate normally, for example `ShutdownMode=\"OnLastWindowClose\"`.\r\n\r\n\r\n### Impact\r\n\r\nMinimal impact. This is likely an uncommon scenario, and the workaround is trivial, if a bit smelly.\r\n\r\n### Configuration\r\n\r\nSDK Version: 7.0.202\r\n\r\n### Other information\r\n\r\nAt a glance, it looks like there is a flaw in the logical calculation of [`MarkupCompiler.IsBamlNeeded`](https://github.com/dotnet/wpf/blob/341c0fb1b6a55b397f4ad29aaa8cd66e8f3e5196/src/Microsoft.DotNet.Wpf/src/PresentationBuildTasks/MS/Internal/MarkupCompiler/MarkupCompiler.cs#L3069), which is used to trigger the generation of the `InitializeComponent()` method, or not, within the `PresentationBuildTasks` assembly.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/7702","RelatedDescription":"Open issue \"Application.Resources assignments do not trigger InitializeComponent() method to be code generated\" (#7702)"},{"Id":"1660112402","IsPullRequest":false,"CreatedAt":"2023-04-10T02:03:57","Actor":"292390450","Number":"7701","RawContent":null,"Title":"RichTextBox Select Will cause the main thread to freeze and memory to continue to increase","State":"open","Body":"### Description\n\nAfter loading FlowDocument, dragging and selecting some elements with the mouse can cause the program to get stuck.This will not happen if I use the xml formatting tool to format the text and then load it.\n\n### Reproduction Steps\n\n[bug.zip](https://github.com/dotnet/wpf/files/11186990/bug.zip)\r\nThis is the testing program\r\nXaml exports flowdocument to 1. txt ，\r\n1.xml: I use the xml tool to format\n\n### Expected behavior\n\ncan freely select\n\n### Actual behavior\n\nProgram stuck, memory overflow\r\n\r\nhttps://user-images.githubusercontent.com/20938585/230810785-74935978-5249-4f28-be56-09df47d4a83c.mp4\r\n\r\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Impact\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/wpf/issues/7701","RelatedDescription":"Open issue \"RichTextBox Select Will cause the main thread to freeze and memory to continue to increase\" (#7701)"},{"Id":"1657540980","IsPullRequest":true,"CreatedAt":"2023-04-06T14:58:59","Actor":"dotnet-maestro[bot]","Number":"7699","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20230405.4\r\n- **Date Produced**: April 5, 2023 9:59:43 PM UTC\r\n- **Commit**: 290a3ecc0e3dabcdcafff632ccbf28d42db8061b\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat**: [from 8.0.0-beta.23177.4 to 8.0.0-beta.23205.4][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.23177.4 to 8.0.0-beta.23205.4][1]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 8.0.0-beta.23177.4 to 8.0.0-beta.23205.4][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 8.0.0-beta.23177.4 to 8.0.0-beta.23205.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.23177.4 to 8.0.0-beta.23205.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/747f53d751...290a3ecc0e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7699)","Url":"https://github.com/dotnet/wpf/pull/7699","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#7699)"},{"Id":"1654290244","IsPullRequest":true,"CreatedAt":"2023-04-04T18:47:55","Actor":"vseanreesermsft","Number":"7696","RawContent":null,"Title":"Update branding to 7.0.6","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7696)","Url":"https://github.com/dotnet/wpf/pull/7696","RelatedDescription":"Closed or merged PR \"Update branding to 7.0.6\" (#7696)"},{"Id":"1654290066","IsPullRequest":true,"CreatedAt":"2023-04-04T18:47:43","Actor":"vseanreesermsft","Number":"7695","RawContent":null,"Title":"Update branding to 6.0.17","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7695)","Url":"https://github.com/dotnet/wpf/pull/7695","RelatedDescription":"Closed or merged PR \"Update branding to 6.0.17\" (#7695)"},{"Id":"1651394799","IsPullRequest":true,"CreatedAt":"2023-04-04T13:45:18","Actor":"Kuldeep-MS","Number":"7693","RawContent":null,"Title":"Adding documentation for debugging PBT","State":"closed","Body":"## Description\r\n\r\nAdding documentation for \"How to debug Presentation Build Task?\".\r\n\r\n## Customer Impact\r\n\r\nNA\r\n\r\n## Regression\r\n\r\nNO\r\n\r\n## Testing\r\n\r\nNA\r\n\r\n## Risk\r\n\r\nNA\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7693)","Url":"https://github.com/dotnet/wpf/pull/7693","RelatedDescription":"Closed or merged PR \"Adding documentation for debugging PBT\" (#7693)"},{"Id":"1652100514","IsPullRequest":false,"CreatedAt":"2023-04-03T13:43:38","Actor":"michaldobrodenka","Number":"7694","RawContent":null,"Title":"WPF - mouse wheel for scrolling over ISCrollable could scroll during drag","State":"open","Body":"Currently when using Drag&Drop mouse wheel does not scroll IScrollable under mouse cursor. It would be very nice if it works.","Url":"https://github.com/dotnet/wpf/issues/7694","RelatedDescription":"Open issue \"WPF - mouse wheel for scrolling over ISCrollable could scroll during drag\" (#7694)"},{"Id":"1648161495","IsPullRequest":false,"CreatedAt":"2023-04-02T02:21:33","Actor":"danielbanda","Number":"7690","RawContent":null,"Title":"wpf OpenFileDialog cuts off name","State":"closed","Body":"### Description\r\n\r\nLaunching an open file dialog displays a cut off the **file name** field:\r\n\r\n![image](https://user-images.githubusercontent.com/5540896/228934773-20634779-e389-42a1-9900-31bb343b97ac.png)\r\nNotice how the name field only displays the last N characters of the prepopulated name instead of the whole name - in this case \"f00173de206d369809b102e15cc48fc8.pdb\".\r\n\r\nHere is the same dialog after I moved the caret to the beginning of the **file name**:\r\n![image](https://user-images.githubusercontent.com/5540896/228935660-1d3b5dca-d00d-4c5f-83c6-e909832b68bf.png)\r\n\r\n\r\n\r\n### Reproduction Steps\r\n\r\n    var dialog = new OpenFileDialog();\r\n    dialog.Filter = \"PDB (*.pdb)|*.pdb\";\r\n    dialog.FilterIndex = 0;\r\n    dialog.FileName = \"f00173de206d369809b102e15cc48fc8.pdb\";\r\n    dialog.ShowDialog();\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\n**File name** field displays the whole provided name.\r\n\r\n![image](https://user-images.githubusercontent.com/5540896/228943454-509a7287-5693-48e4-a9ca-406960917051.png)\r\n\r\n### Actual behavior\r\n\r\n**File name** field only displays the last N characters.\r\n\r\n![image](https://user-images.githubusercontent.com/5540896/228934773-20634779-e389-42a1-9900-31bb343b97ac.png)\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.net 6 & 7\r\nWindows 11 Enterprise\r\nVersion 22H2\r\nx64\r\nDo not know if it is specific to this configuration\r\n\r\n### Other information\r\n\r\n_No response_","Url":"https://github.com/dotnet/wpf/issues/7690","RelatedDescription":"Closed issue \"wpf OpenFileDialog cuts off name\" (#7690)"},{"Id":"1650289448","IsPullRequest":true,"CreatedAt":"2023-04-01T04:32:09","Actor":"ThomasGoulet73","Number":"7691","RawContent":null,"Title":"Cleanup following replacing resource constants with properties.","State":"open","Body":"Closes dotnet/wpf#1\r\n\r\n## Description\r\nCleanup following replacing resource constants with properties.\r\n\r\n## Customer Impact\r\nNone.\r\n\r\n## Regression\r\nNo.\r\n\r\n## Testing\r\nLocal build + CI.\r\n\r\n## Risk\r\nLow.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7691)","Url":"https://github.com/dotnet/wpf/pull/7691","RelatedDescription":"Open PR \"Cleanup following replacing resource constants with properties.\" (#7691)"},{"Id":"1647591306","IsPullRequest":true,"CreatedAt":"2023-03-30T16:57:59","Actor":"dotnet-bot","Number":"7688","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 217: Build ID 2147331","State":"closed","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/ceLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7688)","Url":"https://github.com/dotnet/wpf/pull/7688","RelatedDescription":"Closed or merged PR \"Localized file check-in by OneLocBuild Task: Build definition ID 217: Build ID 2147331\" (#7688)"},{"Id":"1647743765","IsPullRequest":false,"CreatedAt":"2023-03-30T14:26:43","Actor":"miloush","Number":"7689","RawContent":null,"Title":"[API Proposal]: OpenFolderDialog","State":"open","Body":"### Background and motivation\r\n\r\nI was asked to create an API Proposal issue for the OpenFolderDialog, PR https://github.com/dotnet/wpf/pull/7244\r\n\r\nThe purpose of the API is to enable folder selection using the common folder dialogs in WPF. #438 is the top voted issue in the repository.\r\n\r\nThis proposal involves splitting a hierarchy of classes and removing support for Windows XP dialogs (they fallback to Vista dialogs).\r\n\r\n### API Proposal\r\n\r\nThe proposed API is a compromise on perceived compatibility requirements.\r\n\r\nNote that users cannot inherit from `FileDialog` due to internal abstract members, so `protected` and `abstract/virtual` changes are non-breaking.\r\n\r\nClass diagram in PR. Public members diff:\r\n\r\n```diff\r\n  namespace Microsoft.Win32;\r\n  \r\n  public abstract partial class CommonDialog\r\n  {\r\n      protected CommonDialog();\r\n      public object Tag { get; set; }\r\n      protected virtual void CheckPermissionsToShowDialog();\r\n      protected virtual IntPtr HookProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam);\r\n      public abstract void Reset();\r\n      protected abstract bool RunDialog(IntPtr hwndOwner);\r\n      public virtual bool? ShowDialog();\r\n      public bool? ShowDialog(Window owner);\r\n  }\r\n\r\n+ // all members lifted up from FileDialog, no new members that had not existed\r\n+\r\n+ public abstract partial class CommonItemDialog : CommonDialog\r\n+ {\r\n+     protected CommonItemDialog();\r\n+     public IList<FileDialogCustomPlace> CustomPlaces { get; set; }\r\n+     public bool DereferenceLinks { get; set; }\r\n+     public string InitialDirectory { get; set; }\r\n+     public string FileName { get; set; }\r\n+     public string[] FileNames { get; }\r\n+     public bool RestoreDirectory { get; set; }\r\n+     public string SafeFileName { get; }\r\n+     public string[] SafeFileNames { get; }\r\n+     public string Title { get; set; }\r\n+     public bool ValidateNames { get; set; }\r\n+     public event CancelEventHandler FileOk { add; remove; }\r\n+     protected void OnFileOk(CancelEventArgs e);\r\n+     protected override bool RunDialog(IntPtr hwndOwner};\r\n+     public override void Reset();\r\n+     public override string ToString();\r\n+ }\r\n  \r\n- // unless noted otherwise, all removed members lifted up to CommonItemDialog\r\n-\r\n  public abstract partial class FileDialog : CommonDialog\r\n  {\r\n      protected FileDialog();\r\n      public bool AddExtension { get; set; }\r\n      public virtual bool CheckFileExists { get; set; }\r\n      public bool CheckPathExists { get; set; } // WAS VIRTUAL\r\n-     public IList<FileDialogCustomPlace> CustomPlaces { get; set; }\r\n      public string DefaultExt { get; set; }\r\n-     public bool DereferenceLinks { get; set; }\r\n-     public string InitialDirectory { get; set; }\r\n-     public string FileName { get; set; }\r\n-     public string[] FileNames { get; }\r\n      public string Filter { get; set; }\r\n      public int FilterIndex { get; set; }\r\n-     protected int Options { get; } // REMOVED\r\n-     public bool RestoreDirectory { get; set; }\r\n-     public string SafeFileName { get; }\r\n-     public string[] SafeFileNames { get; }\r\n-     public string Title { get; set; }\r\n-     public bool ValidateNames { get; set; }\r\n-     public event CancelEventHandler FileOk { add; remove; }\r\n-     protected override IntPtr HookProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam); // OVERRIDE REMOVED\r\n-     protected void OnFileOk(CancelEventArgs e);\r\n      public override void Reset();\r\n      protected override bool RunDialog(IntPtr hwndOwner);\r\n      public override string ToString();\r\n  }\r\n\r\n  public sealed partial class OpenFileDialog : FileDialog\r\n  {\r\n      public OpenFileDialog();\r\n      public bool Multiselect { get; set; }\r\n      public bool ReadOnlyChecked { get; set; }\r\n      public bool ShowReadOnly { get; set; }\r\n      protected override void CheckPermissionsToShowDialog();\r\n      public System.IO.Stream OpenFile();\r\n      public System.IO.Stream[] OpenFiles();\r\n      public override void Reset();\r\n  }\r\n\r\n+ public sealed partial class OpenFolderDialog : CommonItemDialog\r\n+ {\r\n+     public OpenFolderDialog();\r\n+     public bool Multiselect { get; set; }\r\n+     public override void Reset();\r\n+ }\r\n\r\n  public sealed partial class SaveFileDialog : FileDialog\r\n  {\r\n      public SaveFileDialog();\r\n      public bool CreatePrompt { get; set; }\r\n      public bool OverwritePrompt { get; set; }\r\n      public System.IO.Stream OpenFile();\r\n      public override void Reset();\r\n  }\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nOpenFolderDialog dialog = new OpenFolderDialog();\r\ndialog.Multiselect = true;\r\ndialog.ShowDialog();\r\nstring[] folders = dialog.FileNames;\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nThere are several ways how the dialog could be introduced.\r\n\r\n1. Pile on the technical debt and just add another flag property on `OpenFileDialog`. This is #6374.\r\n    **Pros:** Minimal risk, no breaking changes, reflects native API design.\r\n    **Cons:** When using `OpenFileDialog` for folders, some of its properties would become meaningless, some would start throwing. Any future enhancements to the API would become more and more difficult.\r\n\r\n2. Inherit directly from `CommonDialog`, or do not inherit form anything.\r\n   **Pros:** No backward compatibility requirements, can have clean design.\r\n   **Cons:** Does not reflect the fact the underlying API is a file dialog. User code that prepares the dialog would have to be duplicated across different types. Vast majority of the code that is currently in `FileDialog` would have to be duplicated (and any future enhancements to it).\r\n\r\nMoving the members around and/or splitting the inheritance chain seems to be the only way how to achieve a reasonably clean design and utilize existing code.\r\n\r\nIdeally, the situation would be like this:\r\n`OpenFolderDialog : CommonDialog`\r\n`OpenFileDialog : FileDialog : CommonDialog`\r\nwhere `CommonDialog` would specifically mean common file dialog (dropping the current design where `CommonDialog` was expected to be used for other system dialogs like color, font, etc.), and all the members that are shared between file and folder dialogs would be lifted up to `CommonDialog`. Unfortunately touching `CommonDialog` is a compatibility concern, because unlike `FileDialog`, people can inherit directly from `CommonDialog` and even if it mostly wouldn't be a breaking change, we would pollute it with file-related members even for unrelated inheritors.\r\n\r\nHaving to keep `CommonDialog` what it is, we need to introduce another class in the inheritance chain for the shared members for both files and folders.\r\n\r\nHowever, introducing a class in-between, e.g.\r\n     `OpenFolderDialog : FileDialog : CommonDialog`\r\n     `OpenFileDialog : CommonFileDialog : FileDialog : CommonDialog`\r\nwould mean some of the members would have to be moved down from `FileDialog` to a derived class. That is a breaking change for when a variable is declared as `FileDialog`, it would be missing the moved members.\r\n\r\nThe remaining options is to introduce a new base class (i.e. this proposal):\r\n    `OpenFolderDialog : CommonItemDialog : CommonDialog`\r\n    `OpenFileDialog : FileDialog : CommonItemDialog : CommonDialog`\r\nand lift the members up from `FileDialog` to a parent class. This will keep variables declared as `FileDialog` working like before, the existing members would become inherited.\r\n\r\n(There is also always the possibility to throw away the current implementation and create a clean design in a different namespace.)\r\n\r\n### Risks\r\n\r\nNo public API removed, a new base class introduced. Current applications using the types will keep working without recompilation. Code using reflection even on public types might break if it is not flattening them.\r\n\r\nApplications with Windows XP compatibility flag when recompiled will still work, however, the dialogs will use the `IFileDialog` API rather than the legacy dialogs.","Url":"https://github.com/dotnet/wpf/issues/7689","RelatedDescription":"Open issue \"[API Proposal]: OpenFolderDialog\" (#7689)"},{"Id":"1647179635","IsPullRequest":false,"CreatedAt":"2023-03-30T14:23:38","Actor":"carlos83cc","Number":"7686","RawContent":null,"Title":"wpf Fontawesome icons are not showing on Visual Studio Designer 2022","State":"closed","Body":"I am writing a WPF application and I’m using fontawesome icons as part of my UI.\r\n\r\nThese are the Steps I took to get to the issue.\r\n\r\n- I downloaded the fontawesome.ttf file\r\n- In Visual studio I created a new WPF project. (.NET Framework 4.8)\r\n- I created a new folder called fonts and placed the .ttf file in the same folder\r\n- I set the property of the .ttf file as a resource.\r\n- I rebuilt the project.\r\n- Then I added the ttf font as a resource in the proper way\r\n ` <FontFamily x:Key=“FontAwesomeFont” >pack://application:,/Fonts/#Font Awesome 5 Free Solid</FontFamily>`\r\n- I registered the icon in this way\r\n  `<system:String x:Key=\"FontAngleUp\">&#xf106;</system:String>`\r\n\r\n\r\nIf I use the Visual Studio 2019 all warks well: both at the design time and at run time.\r\nIf I use the Visual Studio 2022 only at run time works well\r\n\r\nThanks for any help\r\n","Url":"https://github.com/dotnet/wpf/issues/7686","RelatedDescription":"Closed issue \"wpf Fontawesome icons are not showing on Visual Studio Designer 2022\" (#7686)"},{"Id":"1647513012","IsPullRequest":true,"CreatedAt":"2023-03-30T12:47:22","Actor":"dotnet-maestro[bot]","Number":"7687","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20230327.4\r\n- **Date Produced**: March 28, 2023 12:19:48 AM UTC\r\n- **Commit**: 747f53d751983dd062f39f4654bff074536e0012\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.23174.1 to 8.0.0-beta.23177.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/1177b37e60...747f53d751\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7687)","Url":"https://github.com/dotnet/wpf/pull/7687","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#7687)"},{"Id":"1646787571","IsPullRequest":true,"CreatedAt":"2023-03-30T02:26:52","Actor":"dotnet-maestro[bot]","Number":"7685","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.Reflection.MetadataLoadContext**: from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.Win32.Registry.AccessControl**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.Win32.SystemEvents**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.CodeDom**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.ComponentModel.Composition**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Data.Odbc**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Data.OleDb**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.PerformanceCounter**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices.AccountManagement**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices.Protocols**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Ports**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Management**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.Context**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Runtime.Caching**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Pkcs**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.ProtectedData**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.ServiceModel.Syndication**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.ServiceProcess.ServiceController**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Speech**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Text.Encoding.CodePages**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.Threading.AccessControl**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n  - **System.ComponentModel.Composition.Registration**: from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20230329.1\r\n- **Date Produced**: March 29, 2023 1:14:44 PM UTC\r\n- **Commit**: cfc12f8e22df13da03b558ab18b0eddfb8f3fd19\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 8.0.0-preview.4.23177.3 to 8.0.0-preview.4.23179.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 8.0.0-preview.4.23177.3 to 8.0.0-preview.4.23179.1][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-preview.4.23177.3 to 8.0.0-preview.4.23179.1][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18][2]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18][2]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.4.23172.14 to 8.0.0-preview.4.23178.18][2]\r\n  - **Microsoft.Win32.Registry.AccessControl**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **Microsoft.Win32.SystemEvents**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.CodeDom**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.ComponentModel.Composition**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Data.Odbc**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Data.OleDb**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Diagnostics.PerformanceCounter**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.DirectoryServices.AccountManagement**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.DirectoryServices.Protocols**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.IO.Ports**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Management**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Reflection.Context**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Runtime.Caching**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Security.Cryptography.Pkcs**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.ServiceModel.Syndication**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.ServiceProcess.ServiceController**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Speech**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Text.Encoding.CodePages**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.Threading.AccessControl**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n  - **System.ComponentModel.Composition.Registration**: [from 8.0.0-preview.4.23177.1 to 8.0.0-preview.4.23178.18][3]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/d5c99d71d0...cfc12f8e22\r\n[2]: https://github.com/dotnet/runtime/compare/10abc299cc...9111203d54\r\n[3]: https://github.com/dotnet/runtime/compare/beb708f6fe...9111203d54\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7685)","Url":"https://github.com/dotnet/wpf/pull/7685","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#7685)"},{"Id":"1646240861","IsPullRequest":true,"CreatedAt":"2023-03-29T17:34:05","Actor":"Kuldeep-MS","Number":"7684","RawContent":null,"Title":"[WIP] Enabling Hardware Acceleration on RDP","State":"open","Body":"Fixes #3215\r\n\r\n## Description\r\n\r\nEnabling Hardware Acceleration on RDP for exes which can opt-in.\r\n\r\n## Customer Impact\r\n\r\nWithout this fix, customers won't be able to get the benefits of Hardware Acceleration on RDP.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nIn progress\r\n\r\n## Risk\r\n\r\nRisk is Low as the exes which want to have hardware acceleration on RDP need to Opt-in through registry entries.\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7684)","Url":"https://github.com/dotnet/wpf/pull/7684","RelatedDescription":"Open PR \"[WIP] Enabling Hardware Acceleration on RDP\" (#7684)"},{"Id":"1643643267","IsPullRequest":true,"CreatedAt":"2023-03-28T15:30:08","Actor":"ViktorHofer","Number":"7681","RawContent":null,"Title":"Add dependencies required by windowsdesktop","State":"closed","Body":"Blocked by https://github.com/dotnet/winforms/pull/8909\r\nUnblocks https://github.com/dotnet/windowsdesktop/pull/3516\r\n\r\nMicrosoft.Windows.Compatibility is being migrated from runtime to windowsdesktop and depends on packages from dotnet/runtime. As there's already a subscription from `runtime -> winforms`, a new one can't be added directly between `runtime -> windowsdesktop` as that would cause coherency issues. Instead, we need to flow the dependencies through winforms and wpf.\r\n\r\nThe `git diff` is confusing. I just added the new dependencies at the end of the product dependencies section and removed the ones that already existed from above so that all the ones that are required by windowsdesktop are grouped together.\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7681)","Url":"https://github.com/dotnet/wpf/pull/7681","RelatedDescription":"Closed or merged PR \"Add dependencies required by windowsdesktop\" (#7681)"},{"Id":"1643996882","IsPullRequest":false,"CreatedAt":"2023-03-28T14:49:51","Actor":"SaranRajChandrasekaran","Number":"7683","RawContent":null,"Title":"Control are visible in Visual Studio 2022 Toolbox even after DesignTimeVisible attribute as false.","State":"closed","Body":"### Description\r\n\r\nIn VS 2022, I have a Custom Control Library, When adding the Custom Control to WPF ToolBox the controls are visible even after adding the following attribute \"[Browsable(false), EditorBrowsable(EditorBrowsableState.Never), ToolboxItem(false), DesignTimeVisible(false)]\". If I use the \"DesignTimeVisible(false)\" attribute at first \"[DesignTimeVisible(false), Browsable(false), EditorBrowsable(EditorBrowsableState.Never), ToolboxItem(false)]\" in this format it works.\r\n\r\nBut In VS 2019, it supports all the formats have no issues.\r\n\r\n[WpfCustomControlLibrary (2).zip](https://github.com/dotnet/wpf/files/11090149/WpfCustomControlLibrary.2.zip)\r\n\r\n\r\n### Reproduction Steps\r\n\r\nIn VS 2022, \r\nCreate a simple Custom Control Library.\r\nAdd the following attribute \"[Browsable(false), EditorBrowsable(EditorBrowsableState.Never), ToolboxItem(false), DesignTimeVisible(false)]\" to the control.\r\nAdd the Custom Control Library to WPF Toolbox. The controls are visible in Toolbox even after adding this attribute\"[Browsable(false), EditorBrowsable(EditorBrowsableState.Never), ToolboxItem(false), DesignTimeVisible(false)]\"\r\n\r\n### Expected behavior\r\n\r\nControl shouldn't be visible in the Toolbox.\r\n\r\n### Actual behavior\r\n\r\nBut the controls are visible in the Toolbox even after adding the \"DesignTimeVisible(false)\" attribute.\r\n\r\n\r\n\r\nBut In VS 2019, it supports all the formats have no issues.\r\nIs there any solution to support all formats in VS 2022?\r\n","Url":"https://github.com/dotnet/wpf/issues/7683","RelatedDescription":"Closed issue \"Control are visible in Visual Studio 2022 Toolbox even after DesignTimeVisible attribute as false.\" (#7683)"},{"Id":"1643721853","IsPullRequest":true,"CreatedAt":"2023-03-28T11:13:36","Actor":"anjali-wpf","Number":"7682","RawContent":null,"Title":"Added layout for win11 light theme","State":"open","Body":"## Description\r\nEnhancement : Added layout for win11 light theme\r\n\r\n## Customer Impact\r\nCustomers will get to have win11 theming for wpf apps\r\n\r\n## Regression\r\nNA\r\n\r\n## Testing\r\nNA\r\n\r\n## Risk\r\nNA\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7682)","Url":"https://github.com/dotnet/wpf/pull/7682","RelatedDescription":"Open PR \"Added layout for win11 light theme\" (#7682)"},{"Id":"1643564134","IsPullRequest":true,"CreatedAt":"2023-03-28T09:35:48","Actor":"lindexi","Number":"7680","RawContent":null,"Title":"Replace String.CompareOrdinal to string.Equals in KnownTypes Part 2","State":"open","Body":"\r\n\r\n\r\n## Description\r\n\r\nWe can use `string.Equals(string1, string2, StringComparison.Ordinal)` to check for equality, see https://learn.microsoft.com/en-us/dotnet/csharp/how-to/compare-strings and https://learn.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings\r\n\r\n> Use the [String.Compare](https://learn.microsoft.com/en-us/dotnet/api/system.string.compare) and [String.CompareTo](https://learn.microsoft.com/en-us/dotnet/api/system.string.compareto) methods to sort strings, not to check for equality.\r\n\r\nReference https://github.com/dotnet/wpf/pull/7500\r\n\r\n## Customer Impact\r\n\r\nSmall performance improvements\r\n\r\n## Regression\r\n\r\nNone.\r\n\r\n## Testing\r\n\r\nJust CI.\r\n\r\n## Risk\r\n\r\nLow.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7680)","Url":"https://github.com/dotnet/wpf/pull/7680","RelatedDescription":"Open PR \"Replace String.CompareOrdinal to string.Equals in KnownTypes Part 2\" (#7680)"},{"Id":"1643352745","IsPullRequest":true,"CreatedAt":"2023-03-28T09:07:15","Actor":"dipeshmsft","Number":"7679","RawContent":null,"Title":"Update WPF C# and VB Project Templates","State":"closed","Body":"## Description\r\nThis PR updates the following:\r\n1. Updates the precedence and identity of C# templates to match with .NET 8\r\n2. Updates VB templates - precedence, identity to match with .NET 8 and added display names for localization. \r\n\r\n## Regression\r\n--\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\nInstalled the templates. Created applications using `dotnet new <template>`, built and ran the applications. Uninstalled the templates.\r\n\r\n## Risk\r\nAny app/test using the template identity will have to make changes to match with the latest version.\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7679)","Url":"https://github.com/dotnet/wpf/pull/7679","RelatedDescription":"Closed or merged PR \"Update WPF C# and VB Project Templates\" (#7679)"},{"Id":"1643212021","IsPullRequest":true,"CreatedAt":"2023-03-28T06:00:53","Actor":"dipeshmsft","Number":"7678","RawContent":null,"Title":"Disable WriteOnlyWhenDifferent if Overwrite=false","State":"closed","Body":"## Description\r\nWriteOnlyWhenDifferent is considered only when Overwrite is set in the WriteLinesToFile task. Therefore, disabling the WriteOnlyWhenDifferent property when Overwrite=false in Wpf.Cpp.targets. See https://github.com/dotnet/msbuild/issues/8363\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\n\r\n## Customer Impact\r\nDevelopers facing issues with local builds will be unblocked.\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n--\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\nLocal build is working\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\nNo.\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7678)","Url":"https://github.com/dotnet/wpf/pull/7678","RelatedDescription":"Closed or merged PR \"Disable WriteOnlyWhenDifferent if Overwrite=false\" (#7678)"},{"Id":"1643179676","IsPullRequest":true,"CreatedAt":"2023-03-28T04:55:32","Actor":"dotnet-maestro[bot]","Number":"7677","RawContent":null,"Title":"[release/8.0-preview3] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:bcaf9e4e-6640-420a-e3f8-08db2964937d)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: bcaf9e4e-6640-420a-e3f8-08db2964937d\r\n- **Build**: 20230327.1\r\n- **Date Produced**: March 27, 2023 9:13:14 PM UTC\r\n- **Commit**: 568877f82c91c6bd0018b6349bde681b48dd5803\r\n- **Branch**: refs/heads/release/8.0-preview3\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 8.0.0-preview.3.23173.4 to 8.0.0-preview.3.23177.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 8.0.0-preview.3.23173.4 to 8.0.0-preview.3.23177.1][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-preview.3.23173.4 to 8.0.0-preview.3.23177.1][1]\r\n  - **System.CodeDom**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.3.23173.6 to 8.0.0-preview.3.23174.8][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/827e0e1112...568877f82c\r\n[2]: https://github.com/dotnet/runtime/compare/416b9e108a...47bad717bd\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:bcaf9e4e-6640-420a-e3f8-08db2964937d)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7677)","Url":"https://github.com/dotnet/wpf/pull/7677","RelatedDescription":"Closed or merged PR \"[release/8.0-preview3] Update dependencies from dotnet/winforms\" (#7677)"},{"Id":"1643078289","IsPullRequest":true,"CreatedAt":"2023-03-28T02:26:50","Actor":"dotnet-maestro[bot]","Number":"7676","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20230327.3\r\n- **Date Produced**: March 28, 2023 1:12:38 AM UTC\r\n- **Commit**: d5c99d71d02787c42753807e2271d42a01d5b2ca\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 8.0.0-preview.4.23172.4 to 8.0.0-preview.4.23177.3][1]\r\n  - **Microsoft.Private.Winforms**: [from 8.0.0-preview.4.23172.4 to 8.0.0-preview.4.23177.3][1]\r\n  - **System.Drawing.Common**: [from 8.0.0-preview.4.23172.4 to 8.0.0-preview.4.23177.3][1]\r\n  - **System.CodeDom**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n  - **System.DirectoryServices**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n  - **System.Security.Permissions**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n  - **System.Windows.Extensions**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n  - **System.IO.Packaging**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n  - **System.Resources.Extensions**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-preview.4.23172.1 to 8.0.0-preview.4.23172.14][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/f777662b7d...d5c99d71d0\r\n[2]: https://github.com/dotnet/runtime/compare/7500625bd9...10abc299cc\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7676)","Url":"https://github.com/dotnet/wpf/pull/7676","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#7676)"},{"Id":"1641780421","IsPullRequest":true,"CreatedAt":"2023-03-27T10:47:06","Actor":"Kuldeep-MS","Number":"7675","RawContent":null,"Title":"Fixing switch for data grid sort using keyboard shortcut","State":"closed","Body":"## Description\r\n\r\nFixing switch for data grid sort using keyboard shortcut\r\n\r\n## Customer Impact\r\n\r\nNA\r\n\r\n## Regression\r\n\r\nNA\r\n\r\n## Testing\r\n\r\nNA\r\n\r\n## Risk\r\n\r\nNA\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7675)","Url":"https://github.com/dotnet/wpf/pull/7675","RelatedDescription":"Closed or merged PR \"Fixing switch for data grid sort using keyboard shortcut\" (#7675)"},{"Id":"1641291393","IsPullRequest":false,"CreatedAt":"2023-03-27T02:21:54","Actor":"nyendwa","Number":"7673","RawContent":null,"Title":"System.Printing","State":"open","Body":"I am building a WPF App .NET Framework that opens and preview a PDF file and then print it. I noticed the System.Printing class is not present in .NET Core. How do I access this class in .NET Core, I noticed this is not a new issue other developers have asked this question before however the solution for me did not seem to work out, I opened the .csproj file and pasted the code below but still faced a missing component for my System.Printing assembly. Am I missing something that I should be doing?\r\n\r\n\"You can add the following to a .NET Core 3.0 class library project in order to access System.Printing:\r\n\r\n<ItemGroup>\r\n  <FrameworkReference Include=\"Microsoft.WindowsDesktop.App\" />\r\n</ItemGroup>\"","Url":"https://github.com/dotnet/wpf/issues/7673","RelatedDescription":"Open issue \"System.Printing\" (#7673)"},{"Id":"1641242980","IsPullRequest":false,"CreatedAt":"2023-03-27T02:14:30","Actor":"clovett","Number":"7672","RawContent":null,"Title":"ScrollIntoView sometimes fails to scroll the item into view","State":"open","Body":"### Description\n\nI recently ported my app from .NET 4.8 to .NET 7.0 and everything went well, except this one bug.  Sometimes ScrollIntoView on a `System.Windows.Controls.DataGrid` silently fails to do what it is asked, resulting in random vertical scroll position that is not showing the selected item.\n\n### Reproduction Steps\n\n- git clone https://github.com/MoneyTools/MyMoney.Net\r\n- git checkout clovett/scrollintoview\r\n- open Source\\Wpf\\MyMoney.sln\r\n- press F5 in the debug/any cpu configuration\r\n- click create to create temp database\r\n- click Help/Add Sample Data, and request 30 years of data\r\n- open AMEX account and hit \"ctrl-space\" on the last couple pages of transactions (about 20 should do it). This marks them as \"unaccepted\" transactions.\r\n- select one of those \"unaccepted\" transactions near the top of your list of unaccepted transactions.\r\n- Click the filter dropdown at the top of the grid to filter the list to show only unaccepted transactions.  notice the selection is preserved \r\n- Click the folder dropdown and select \"all\" to go back to the full view.\r\n- look at the debug output output\r\n\r\nOnItemsChanged: Reset\r\nDelayed ScrollIntoView Transaction: Amazon.com on 7/31/2022 for -9.9\r\nOnItemsChanged: Reset\r\nDelayed ScrollIntoView Transaction: Amazon.com on 7/31/2022 for -9.9\r\nOnItemsChanged: Add\r\nDelayed ScrollIntoView Transaction: Amazon.com on 7/31/2022 for -9.9\r\nScrollIntoView Transaction: Amazon.com on 7/31/2022 for -9.9\r\nScrollIntoView Transaction: Amazon.com on 7/31/2022 for -9.9\r\nRow is visible as position 33\r\n\r\nThe row position reported here is wrong, it is the position of the row BEFORE the ItemsSource was completely changed - and I think this is why ScrollIntoView is failing.\r\n\r\nI've added retry logic in the \"CheckVisibility\" function and sometimes you will see the errors:\r\n\r\n- Dangorang, the container is not available yet, try again.\r\n- Dangorang, the silly thing is still offscreen!\r\n\r\nThese are also indications that ScrollIntoView failed, but this retry also makes it appear to work, so comment out the call to CheckVisibility to reproduce the failure for your debugging.  I should need to do any delayed actions around ScrollIntoView, I want to be able to set the ItemsSource, set the selected item, and call ScrollIntoView all synchronously and it should just work, no matter how long the list is.\n\n### Expected behavior\n\nScrollIntoView needs to be reliable.\n\n### Actual behavior\n\nScrollIntoView silently fails sometimes, mostly when the ItemsSource is changed from a short list to a long list where the selected item is the both lists and is moved much further down in the second longer list.\r\n\r\nWhen it fails you will see one of the following debug outputs:\r\n> Dangorang, the container is not available yet, try again...\r\n> Dangorang, the silly thing is still offscreen!\r\n\r\n\n\n### Regression?\n\nYes, this did not happen in .NET 4.8.\n\n### Known Workarounds\n\nI'm trying lots of delayed retries and so forth with no luck because the actual bounds reported by the DataGridRow are stale.\n\n### Impact\n\nHeavily used navigation feature of the app is broken as a result (F12, and F8).\n\n### Configuration\n\nDebug, Any CPU but a bit easier to repro in Release, Any CPU.\n\n### Other information\n\nSee [Demo View](https://www.youtube.com/watch?v=u6BVF2x9FBA) showing how to use the app.","Url":"https://github.com/dotnet/wpf/issues/7672","RelatedDescription":"Open issue \"ScrollIntoView sometimes fails to scroll the item into view\" (#7672)"},{"Id":"1640763255","IsPullRequest":false,"CreatedAt":"2023-03-26T04:10:45","Actor":"HughWarrington","Number":"7671","RawContent":null,"Title":"GetFocusScope/GetIsFocusScope inconsistency","State":"open","Body":" .NET 6.0.15\r\n\r\nDocs for [FocusManager.GetFocusScope](https://learn.microsoft.com/en-us/dotnet/api/system.windows.input.focusmanager.getfocusscope?view=windowsdesktop-7.0&viewFallbackFrom=net-6.0) say\r\n\r\n> Determines the closest ancestor of the specified element that has [IsFocusScope](https://learn.microsoft.com/en-us/dotnet/api/system.windows.input.focusmanager.isfocusscope?view=windowsdesktop-7.0#system-windows-input-focusmanager-isfocusscope) set to true.\r\n\r\nHowever, I have a control `c` and when I call `FocusManager.GetIsFocusScope(GetFocusScope(c))`, the returned value is false. Either the documentation is incorrect, or the implementation.\r\n\r\nIn my xaml I have:\r\n\r\n```xaml\r\n<TextBox GotFocus=\"UIElement_OnGotFocus\" />\r\n```\r\n\r\nAnd in the codebehind:\r\n\r\n```c#\r\nprivate void UIElement_OnGotFocus(object sender, RoutedEventArgs e)\r\n{\r\n    var c = (Control)sender;\r\n    var fs = FocusManager.GetFocusScope(c);\r\n    var wasScope = FocusManager.GetIsFocusScope(fs);\r\n    if (!wasScope)\r\n    {\r\n        throw new InvalidOperationException();\r\n    }\r\n}\r\n```\r\n\r\nWhen the textbox gets focus, the exception is always thrown.\r\n\r\nI would be very happy to provide more information on my code, the visual tree and so on, but I'm not sure what is salient. I don't call [FocusManager.SetIsFocusScope](https://learn.microsoft.com/en-us/dotnet/api/system.windows.input.focusmanager.setisfocusscope?view=windowsdesktop-7.0&viewFallbackFrom=net-6.0) anywhere in the program.","Url":"https://github.com/dotnet/wpf/issues/7671","RelatedDescription":"Open issue \"GetFocusScope/GetIsFocusScope inconsistency\" (#7671)"},{"Id":"1640496901","IsPullRequest":true,"CreatedAt":"2023-03-25T12:46:06","Actor":"dotnet-maestro[bot]","Number":"7670","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20230324.1\r\n- **Date Produced**: March 24, 2023 4:26:19 PM UTC\r\n- **Commit**: 1177b37e60c7271ab461098aefbdd03edc15b90d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat**: [from 8.0.0-beta.23173.3 to 8.0.0-beta.23174.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.23173.3 to 8.0.0-beta.23174.1][1]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 8.0.0-beta.23173.3 to 8.0.0-beta.23174.1][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 8.0.0-beta.23173.3 to 8.0.0-beta.23174.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.23173.3 to 8.0.0-beta.23174.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/e3d501e3e7...1177b37e60\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7670)","Url":"https://github.com/dotnet/wpf/pull/7670","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#7670)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-04-11T03:30:30.3475826Z","RunDurationInMilliseconds":623}