{"Data":{"GitHub":{"Issues":[{"Id":"2810196967","IsPullRequest":true,"CreatedAt":"2025-01-24T19:00:31","Actor":"dotnet-maestro[bot]","Number":"10334","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"open","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n## From https://github.com/dotnet/winforms\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\n- **Build**: 20250123.8\n- **Date Produced**: January 24, 2025 6:06:48 AM UTC\n- **Commit**: e3e5ddce9f186b4f11599b9e099ed6661c9c4851\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 10.0.0-alpha.1.25073.6 to 10.0.0-alpha.1.25073.8][1]\n  - **Microsoft.Private.Winforms**: [from 10.0.0-alpha.1.25073.6 to 10.0.0-alpha.1.25073.8][1]\n  - **System.Drawing.Common**: [from 10.0.0-alpha.1.25073.6 to 10.0.0-alpha.1.25073.8][1]\n\n[1]: https://github.com/dotnet/winforms/compare/5fc66aac25...e3e5ddce9f\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10334)","Url":"https://github.com/dotnet/wpf/pull/10334","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/winforms\" (#10334)"},{"Id":"2809483466","IsPullRequest":true,"CreatedAt":"2025-01-24T13:37:57","Actor":"harshit7962","Number":"10333","RawContent":null,"Title":"Normalize start Text pointer to support Text Cursor Indicator","State":"open","Body":"## Description\r\nUsing accessibility option of _text cursor indicator_ in `RichTextBox` sometimes lead to crashing applications due to Invariant assert [here](https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Controls/TextRangeAdaptor.cs/#L462). Adding `Normalize()` call in changed location moves the `end` to the `start` if this invariant assert fails and hence essentially corrects the cursor position.\r\n\r\n## Customer Impact\r\nAccessibility fix. Allowing the usage of text cursor indicator with RichTextBox.\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n_None_\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\nLocal Build Pass\r\nSample Application Testing\r\nTest Pass\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\nLow\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10333)","Url":"https://github.com/dotnet/wpf/pull/10333","RelatedDescription":"Open PR \"Normalize start Text pointer to support Text Cursor Indicator\" (#10333)"},{"Id":"2809152155","IsPullRequest":true,"CreatedAt":"2025-01-24T11:19:15","Actor":"harshit7962","Number":"10332","RawContent":null,"Title":"Update templates to 10.0","State":"closed","Body":"## Description\r\nUpdate WPF Project templates to version 10.0.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10332)","Url":"https://github.com/dotnet/wpf/pull/10332","RelatedDescription":"Closed or merged PR \"Update templates to 10.0\" (#10332)"},{"Id":"2809029202","IsPullRequest":true,"CreatedAt":"2025-01-24T10:00:32","Actor":"dotnet-bot","Number":"10331","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 217: Build ID 2627443","State":"open","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/icxLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10331)","Url":"https://github.com/dotnet/wpf/pull/10331","RelatedDescription":"Open PR \"Localized file check-in by OneLocBuild Task: Build definition ID 217: Build ID 2627443\" (#10331)"},{"Id":"2807691465","IsPullRequest":true,"CreatedAt":"2025-01-24T06:33:36","Actor":"dotnet-maestro[bot]","Number":"10329","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:Coherency Updates)\n## Coherency Updates\n\nThe following updates ensure that dependencies with a *CoherentParentDependency*\nattribute were produced in a build used as input to the parent dependency's build.\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\n\n[DependencyUpdate]: <> (Begin)\n\n- **Coherency Updates**:\n  - **System.Reflection.MetadataLoadContext**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Windows.Extensions**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.Platforms**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Resources.Extensions**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Serialization.Formatters**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Ref**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.Registry.AccessControl**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.SystemEvents**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.CodeDom**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Configuration.ConfigurationManager**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Data.Odbc**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Data.OleDb**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.EventLog**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.PerformanceCounter**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.AccountManagement**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.Protocols**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Formats.Nrbf**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Packaging**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Ports**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Management**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Reflection.Context**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Caching**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Pkcs**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.ProtectedData**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Xml**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Permissions**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceModel.Syndication**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceProcess.ServiceController**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Speech**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Text.Encoding.CodePages**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Threading.AccessControl**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition.Registration**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n\n[DependencyUpdate]: <> (End)\n\n[marker]: <> (End:Coherency Updates)\n\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n## From https://github.com/dotnet/winforms\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\n- **Build**: 20250123.6\n- **Date Produced**: January 24, 2025 2:34:08 AM UTC\n- **Commit**: 5fc66aac253a96fd7ad9f5d566696c721a864e74\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 10.0.0-alpha.1.25072.5 to 10.0.0-alpha.1.25073.6][3]\n  - **Microsoft.Private.Winforms**: [from 10.0.0-alpha.1.25072.5 to 10.0.0-alpha.1.25073.6][3]\n  - **System.Drawing.Common**: [from 10.0.0-alpha.1.25072.5 to 10.0.0-alpha.1.25073.6][3]\n\n[3]: https://github.com/dotnet/winforms/compare/9a8b5a2a86...5fc66aac25\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10329)\n\n\n","Url":"https://github.com/dotnet/wpf/pull/10329","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#10329)"},{"Id":"2807304349","IsPullRequest":true,"CreatedAt":"2025-01-23T16:03:05","Actor":"h3xds1nz","Number":"10328","RawContent":null,"Title":"Remove allocations in BaseUriHelper, improve resource resolution performance","State":"open","Body":"Currently blocked by #9822, hence draft.\r\n\r\n## Description\r\n\r\nOptimizes methods in `BaseUriHelper`, removes most of the allocations directly in this class and opens up more optimization possibilities; directly builds upon #9739 and #9822.\r\n\r\n- Removes `IsSameKeyToken` from SecurityHelper in favour of `ReflectionUtils.IsSamePublicKeyToken`.\r\n- `BaseUriHelper.GetAssemblyNameAndPart` is now fully allocation free.\r\n    - This allows for more optimizations in the future and already makes some paths without any allocations.\r\n    - Instead of returning 3 strings, we return slices in `AssemblyPackageInfo` `ref struct`.\r\n- In `FontResourceCache`, we can now use `AlternateLookup` to benefit from this change as well.\r\n- `BaseUriHelper.BaseUri` was never set outside static constructor, where it was initialized to the `s_packAppBaseUri` value,\r\nhence I've removed the property altogether, which also led to removal of `BindUriHelper.BaseUri` which was just proxy.\r\n- Code under `CF_Envelope_Activation_Enabled` macro was removed, most of the code is already missing in .NET Core than what was in reference files for .NET 3.5 and it is never compiled on NetFX nor on .NET Core.\r\n- Changes in `GetLoadedAssembly` bring a bit of an improvement but there's more benchmarking needed on how to handle this chain most efficiently, so keeping as it is right now.\r\n\r\nCherry-picking some cases:\r\n\r\n### GetAssemblyNameAndPart\r\n\r\n| Method   | someUri             | Mean [ns] | Error [ns] | StdDev [ns] |  Gen0   | Allocated [B] |\r\n|--------- |-------------------- |----------:|-----------:|------------:|---------:|--------------:|\r\n| Original | /Mic(...)xaml [103] | 104.95 ns |   2.274 ns |    6.706 ns |     0.0448 |         752 B |\r\n| PR__EDIT | /Mic(...)xaml [103] |  45.42 ns |   0.475 ns |    0.445 ns |         - |             - |\r\n\r\n### AssemblyMatchesKeyString vs ComparePublicKeyTokens\r\n\r\n| Method   | someAssembly         | Mean [ns] | Error [ns] | StdDev [ns] | Gen0   | Allocated [B] |\r\n|--------- |--------------------- |----------:|-----------:|------------:|-------:|---------------:|\r\n| Original | Syste(...)7798e [89] | 40.755 ns |  0.3990 ns |   0.3537 ns | 0.0019 |          32 B |\r\n| PR__EDIT | Syste(...)7798e [89] |  8.135 ns |  0.0835 ns |   0.0740 ns |      - |                 - |\r\n\r\n## Customer Impact\r\n\r\nImproved performance, decrased allocations.\r\n\r\n## Regression\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nLocal build, some assert testing; I'll provide tests before this goes out of draft.\r\n\r\n## Risk\r\n\r\nLow to medium, there are quite a few changes but most of them are rather straightforward.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10328)","Url":"https://github.com/dotnet/wpf/pull/10328","RelatedDescription":"Open PR \"Remove allocations in BaseUriHelper, improve resource resolution performance\" (#10328)"},{"Id":"2806891124","IsPullRequest":true,"CreatedAt":"2025-01-23T13:18:56","Actor":"himgoyalmicro","Number":"10327","RawContent":null,"Title":"Fix in .NET 8 for Inconsistent UI Issue due to incorrect localized string resources","State":"open","Body":"Fixes #10273 \r\n\r\n## Description\r\n\r\nFixed the translation state for ScrollBar_ContextMenu_Top, ScrollBar_ContextMenu_PageDown and ScrollBar_ContextMenu_PageUp resource\r\n\r\n## Customer Impact\r\n\r\nContext menu for users using ScrollBar will be correctly translated for different languages.\r\n\r\n## Regression\r\n\r\nN/A\r\n\r\n## Testing\r\n\r\nLocally Tested \r\n\r\n## Risk\r\n\r\nLow\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10327)","Url":"https://github.com/dotnet/wpf/pull/10327","RelatedDescription":"Open PR \"Fix in .NET 8 for Inconsistent UI Issue due to incorrect localized string resources\" (#10327)"},{"Id":"2805133163","IsPullRequest":true,"CreatedAt":"2025-01-23T05:38:25","Actor":"dotnet-maestro[bot]","Number":"10325","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n## From https://github.com/dotnet/winforms\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\n- **Build**: 20250122.5\n- **Date Produced**: January 23, 2025 12:23:16 AM UTC\n- **Commit**: 9a8b5a2a86123e583e234a0fa12fc34d716a7c88\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 10.0.0-alpha.1.25071.5 to 10.0.0-alpha.1.25072.5][2]\n  - **Microsoft.Private.Winforms**: [from 10.0.0-alpha.1.25071.5 to 10.0.0-alpha.1.25072.5][2]\n  - **System.Drawing.Common**: [from 10.0.0-alpha.1.25071.5 to 10.0.0-alpha.1.25072.5][2]\n\n[2]: https://github.com/dotnet/winforms/compare/51fffb84af...9a8b5a2a86\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10325)\n\n\n","Url":"https://github.com/dotnet/wpf/pull/10325","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#10325)"},{"Id":"2805697298","IsPullRequest":false,"CreatedAt":"2025-01-23T01:40:07","Actor":"cqgis","Number":"10326","RawContent":null,"Title":"Windows 11 reduce the performance  when run without vs debugger","State":"open","Body":"I created a WPF Application （.net 8） with a TextBlock to show the FPS of the application.   \nI used two tasks to calculate the FPS and update the TextBlock.   \n\n``` csharp\n private volatile int                  _frameCount    = 0;\n private readonly ManualResetEventSlim _quantumWaiter = new(false);\n\n private void MainWindow_Loaded(object sender, RoutedEventArgs e)\n {\n     Task.Factory.StartNew(() =>\n     {\n         var sw    = new Stopwatch();\n         var delay = TimeSpan.FromMilliseconds(5);\n         while (true)\n         {\n             sw.Restart();\n             Interlocked.Add(ref this._frameCount, 1);\n             sw.Stop();\n             var waitting = delay - sw.Elapsed;\n             this._quantumWaiter.Wait(waitting);\n         }\n     });\n\n     Task.Factory.StartNew(async () =>\n     {\n         DateTime? lastTime = null;\n         while (true)\n         {\n             var datetime = DateTime.Now;\n             var count    = Interlocked.Exchange(ref this._frameCount, 0);\n             if (lastTime != null)\n             {\n                 var elapsed = datetime - lastTime.Value;\n                 var fps     = count / elapsed.TotalSeconds;\n                 await this.Dispatcher.InvokeAsync(() => { this._txt.Text = $\"FPS: {fps:0.0}\"; });\n             }\n\n             lastTime = datetime;\n             await Task.Delay(TimeSpan.FromSeconds(1));\n         }\n     });\n }\n```\n\n\nThe problem is that when run the application on windows 11, something strange happens. \nExpand on the problem:\n- On Windows 11, run the application with  visualsutdio debugger, the FPS is around 200.\n- On Windows 11, run the application without  vs debugger, the FPS is around 60. not only debug version but also release version.\n- On Windows 11, run the application without vs debugger, the FPS is around 60. the attached process to vs debugger, the FPS is around 200.\n- On Windows 10, the FPS is always around 200, not matter if run with or without  vs debugger.\n  \nNot only WPF application but also other types of  appliation.\n\nI can't understand why the FPS is different on Windows 11 when run with or without the vs debugger. some one can help me?\n\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/17ad1043-48d0-4d5a-bd33-d6c0db99c930\" />\n\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b5dde5ee-9f78-4d79-b84f-05123d63f272\" />","Url":"https://github.com/dotnet/wpf/issues/10326","RelatedDescription":"Open issue \"Windows 11 reduce the performance  when run without vs debugger\" (#10326)"},{"Id":"2804657416","IsPullRequest":false,"CreatedAt":"2025-01-22T15:13:57","Actor":"h3xds1nz","Number":"10324","RawContent":null,"Title":"Race condition in DependencyProperty registration mechanism","State":"open","Body":"### Description\n\nThere is a race condition in `DependencyProperty` registration mechanism which can cause a successful `DependencyProperty` registration for the same type, with the same name. What makes it worse is that this property will exist everywhere but in the property name map.\n\nWhile there are in total 3 attempts to synchronize the access around the collections, it may happen that this will simply not be enough.\n\nHere we check under a lock whether property exists:\n\nhttps://github.com/dotnet/wpf/blob/662423d3614158380ba77d710212ac6bb890f8ac/src/Microsoft.DotNet.Wpf/src/WindowsBase/System/Windows/DependencyProperty.cs#L253-L258\n\nAfterwards, under the same lock, `DependencyProperty` gets an unique index and is added into the list of registered properties. Before this lock is taken, it was already possible for another thread to pass the check for property name map registration successfully.\n\nhttps://github.com/dotnet/wpf/blob/662423d3614158380ba77d710212ac6bb890f8ac/src/Microsoft.DotNet.Wpf/src/WindowsBase/System/Windows/DependencyProperty.cs#L1060-L1065\n\nFinally, under the same lock, a property is written without checking whether it exists in the map. That means the previous one that was added into the map, the newer one can replace it (because it has managed to get past the `ContainsKey` check meanwhile.)\n\nhttps://github.com/dotnet/wpf/blob/662423d3614158380ba77d710212ac6bb890f8ac/src/Microsoft.DotNet.Wpf/src/WindowsBase/System/Windows/DependencyProperty.cs#L296-L299\n\n\n### Reproduction Steps\n\nAs with all race conditions, hit registration overloads for `DependencyProperty` with the right timing on multiple threads. It is sometimes replicable by running the current tests in a lucky order even. It is not easy but it ain't impossible.\n\n### Expected behavior\n\nA dependency property for a single `ownerType` with an identical name is not created and partially registered, exception is thrown instead.\n\n### Actual behavior\n\nA property is created, returned, the newer one replaces the older one in `PropertyFromName` and the older one ceases to exist in this map without any notice.\n\n### Regression?\n\nNo.\n\n### Known Workarounds\n\n_No response_\n\n### Impact\n\nIn the real application world/usage, given that developers follow guidelines of declaring dependency properties as `static readonly`, there's almost no impact as it requires a grave human error combined with great amount of luck to hit this one since most of the time this will actually properly fail with `ArgumentException` so you'd find out rather quickly you've made the mistake of declaring two dependency properties for the same type with the same name; then again, you may not always control all of your dependencies.\n\n### Configuration\n\n_No response_\n\n### Other information\n\nThis also applies to  `AddOwner` instance method  where it may cause a metadata override but that's way harder to trigger.\n\nTo be honest, I'm not sure this is worth fixing on its own as it might negatively impact perf but I think it's worth to have this issue existing.","Url":"https://github.com/dotnet/wpf/issues/10324","RelatedDescription":"Open issue \"Race condition in DependencyProperty registration mechanism\" (#10324)"},{"Id":"2804569371","IsPullRequest":false,"CreatedAt":"2025-01-22T14:39:45","Actor":"h3xds1nz","Number":"10323","RawContent":null,"Title":"DependencyProperty tests are ignoring multiple variance of ArgumentException","State":"open","Body":"### The issue\n\nIn the new tests from #8215 for `DependencyProperty`, there's a lot of re-use of data that are being passed to `Register` methods of `DependencyProperty`.\n\nThis would be fine on its own when testing for other things, but in tests specifically for `Register` methods, an `ArgumentException` can be thrown either because the property was already registered (`SR.PropertyAlreadyRegistered`) or when auto generation of default property metadata fails (`SR.DefaultValueAutoAssignFailed`).\n\nThis can cause flaky unit test results that do not clearly express where the problem is and require further debugging.\n\n### Failure example\n\nFor example, `Register_InvokeStringTypeTypeValidateFail_Throws` will fail if ran together with `Register_InvokeStringTypeType_Success` on the `callCount` assertion, because `Register` throws `ArgumentException`,\nhowever due to the fact that the property was previously registered, not because the actual test case fails.\n\n### Other information\n\nI will fix these myself by proper comparison of resource messages but I guess that will require first fixing the correct internals visibility between WindowsBase and WindowsBase.Tests or my VS is flaky at the moment. Assign to me please as I cannot without triage rights.","Url":"https://github.com/dotnet/wpf/issues/10323","RelatedDescription":"Open issue \"DependencyProperty tests are ignoring multiple variance of ArgumentException\" (#10323)"},{"Id":"2804520616","IsPullRequest":false,"CreatedAt":"2025-01-22T14:19:28","Actor":"stewartsims","Number":"10322","RawContent":null,"Title":"Problem with update KB5050009 affecting IIS web application (XPS Document images)","State":"open","Body":"### Description\n\nSince installing update KB5050009 on more than one machine we are now have a problem with a web application that runs in IIS. The application produces XPS documents from a XAML template that are then converted in PDFs.\n\nAny of the images that use network references as the source such as below are now not showing when the application produces the document:\n`<Image Source=\"\\\\localhost\\SharedFolder\\my-image.png\" />`\n\nRolling back the update fixes the problem, but Windows continues to 'want' to install the update.\n\nThis is remarkably similar to an issue from a few years ago created by another security update:\nhttps://github.com/dotnet/wpf/issues/7357\n\nThat is why I have reported this issue in this repository. If this isn't the best place to report this, please let me know where to submit the issue.\n\nHere are the packages used in the .cs file in the web application if it helps direct me to the right place to report the issue:\nusing System.Windows.Documents; \nusing System.Windows.Markup;\nusing System.Windows.Xps; \nusing System.Windows.Xps.Packaging; \n\nFor the PDF conversion we are using PdfSharp.Xps.XpsConverter but this is not the problem, it is definitely somehow the Windows update affecting the XPS Document functionality.\n\nApologies for the brief details, I can supply more information on how to recreate the issue.\n\n### Reproduction Steps\n\nProcess an XPS document in code on a Windows 11 machine after installing KB5050009. Note that any image with the following type of network path as an image source fails to display in the document:\n`<Image Source=\"\\\\localhost\\SharedFolder\\my-image.png\" />`\n\n### Expected behavior\n\nThe image should load from the network and display in the document.\n\n### Actual behavior\n\nThe image does not appear\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Impact\n\n_No response_\n\n### Configuration\n\nThis is an issue for 2 web applications - one targeting .NET Framework 4.8 and one targeting .NET Framework 4.5.2\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/wpf/issues/10322","RelatedDescription":"Open issue \"Problem with update KB5050009 affecting IIS web application (XPS Document images)\" (#10322)"},{"Id":"2802594882","IsPullRequest":true,"CreatedAt":"2025-01-22T05:59:07","Actor":"dotnet-maestro[bot]","Number":"10319","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:Coherency Updates)\n## Coherency Updates\n\nThe following updates ensure that dependencies with a *CoherentParentDependency*\nattribute were produced in a build used as input to the parent dependency's build.\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\n\n[DependencyUpdate]: <> (Begin)\n\n- **Coherency Updates**:\n  - **System.Reflection.MetadataLoadContext**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Windows.Extensions**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.Platforms**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Resources.Extensions**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Serialization.Formatters**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Ref**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.Registry.AccessControl**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.SystemEvents**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.CodeDom**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Configuration.ConfigurationManager**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Data.Odbc**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Data.OleDb**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.EventLog**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.PerformanceCounter**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.AccountManagement**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.Protocols**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Formats.Nrbf**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Packaging**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Ports**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Management**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Reflection.Context**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Caching**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Pkcs**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.ProtectedData**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Xml**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Permissions**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceModel.Syndication**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceProcess.ServiceController**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Speech**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Text.Encoding.CodePages**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Threading.AccessControl**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition.Registration**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n\n[DependencyUpdate]: <> (End)\n\n[marker]: <> (End:Coherency Updates)\n\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n## From https://github.com/dotnet/winforms\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\n- **Build**: 20250121.5\n- **Date Produced**: January 22, 2025 1:27:37 AM UTC\n- **Commit**: 51fffb84af97a5452fb5c7d33648551be7e057d5\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 10.0.0-alpha.1.25068.2 to 10.0.0-alpha.1.25071.5][3]\n  - **Microsoft.Private.Winforms**: [from 10.0.0-alpha.1.25068.2 to 10.0.0-alpha.1.25071.5][3]\n  - **System.Drawing.Common**: [from 10.0.0-alpha.1.25068.2 to 10.0.0-alpha.1.25071.5][3]\n\n[3]: https://github.com/dotnet/winforms/compare/1e44f01199...51fffb84af\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10319)\n\n\n","Url":"https://github.com/dotnet/wpf/pull/10319","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#10319)"},{"Id":"2794584568","IsPullRequest":true,"CreatedAt":"2025-01-22T04:45:49","Actor":"ThomasGoulet73","Number":"10304","RawContent":null,"Title":"Fix flaky tests","State":"closed","Body":"Fixes dotnet/wpf#10250\r\n\r\n## Description\r\nThis fixes the flaky tests which was caused by the native dependencies sometime not being built before the test projects. This PR adds an explicit reference to the projects of the native dependencies to make sure that it's built in the right order and also adds some protection by including the files explictly instead of using file globbing to make the build fail with an error which contain the path of the file missing instead of the tests failing to start, which improves the build logs in case of error.\r\n\r\n## Customer Impact\r\nNone, tests only.\r\n\r\n## Regression\r\nNo.\r\n\r\n## Testing\r\nDid a bunch of local builds and it fails on 1 out of 5 build before this PR and I did ~10 local builds with this PR and it didn't failed. I also validated the build order in the build log.\r\n\r\n## Risk\r\nLow to none, tests only.\r\n\r\n/cc @JeremyKuhne since you worked in that area too lately.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10304)","Url":"https://github.com/dotnet/wpf/pull/10304","RelatedDescription":"Closed or merged PR \"Fix flaky tests\" (#10304)"},{"Id":"2803070102","IsPullRequest":true,"CreatedAt":"2025-01-22T00:10:22","Actor":"ThomasGoulet73","Number":"10321","RawContent":null,"Title":"[Cleanup] Use named arguments in PresentationCore","State":"open","Body":"Contributes to dotnet/wpf#10018\r\n\r\n## Description\r\nI replaced comments specifying an argument name with named arguments, which were introduced in C# 7. This improves readability and maintainability.\r\n\r\nMy changes are in 2 commits the first commit is automated changes using regexes and the second commit is manual changes where the comment is outdated or formatted differently than the parameter name.\r\n\r\n**Note: The compiled IL is identical.**\r\n(Except for some of the changes in Visual.cs where I renamed some parameters e -> args to better reflect the parameter and be able to remove the comment)\r\n\r\n## Customer Impact\r\nNone.\r\n\r\n## Regression\r\nNo.\r\n\r\n## Testing\r\nLocal build + validated IL.\r\n\r\n## Risk\r\nLow to none.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10321)","Url":"https://github.com/dotnet/wpf/pull/10321","RelatedDescription":"Open PR \"[Cleanup] Use named arguments in PresentationCore\" (#10321)"},{"Id":"2802848557","IsPullRequest":true,"CreatedAt":"2025-01-21T21:28:48","Actor":"h3xds1nz","Number":"10320","RawContent":null,"Title":"Use stack-allocated/inline arrays with fixed lengths in more places","State":"open","Body":"## Description\r\n\r\nFinding a few more places that are just low hanging fruit to swap from heap-allocated arrays to stack-allocated/inline-arrays.\r\n\r\n## Customer Impact\r\n\r\nImproved performance, decreased allocations.\r\n\r\n## Regression\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nLocal build.\r\n\r\n## Risk\r\n\r\nLow, the swaps are pretty much 1:1.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10320)","Url":"https://github.com/dotnet/wpf/pull/10320","RelatedDescription":"Open PR \"Use stack-allocated/inline arrays with fixed lengths in more places\" (#10320)"},{"Id":"2799435668","IsPullRequest":true,"CreatedAt":"2025-01-20T14:36:55","Actor":"himgoyalmicro","Number":"10317","RawContent":null,"Title":"Implemented shorthand syntax for ColumnDefinitions and RowDefinitions","State":"open","Body":"Implements #9802 \r\n\r\n## Description\r\n\r\nIt will simplify the definition syntax of RowDefinitions and ColumnDefinitions by:\r\n- Allowing rows and columns within a Grid to be defined by a collection that is delimited by comma and space\r\n- Creating a Typeconvertor for ColumnDefinitionCollection and RowDefinitionCollection so they can process String as its input.\r\n\r\nDecoupled RowDefinitionCollection and ColumnDefinitionCollection from the owner grid to ensure VS Hot Reload functionality remains intact.\r\n\r\n## Customer Impact\r\n\r\nThis feature will make Grid markup less verbose, allowing developers to create grids with simpler syntax.\r\n\r\n## Regression\r\n\r\nN/A\r\n\r\n## Testing\r\n\r\nLocal build pass\r\n\r\n## Risk\r\n\r\nLow\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10317)","Url":"https://github.com/dotnet/wpf/pull/10317","RelatedDescription":"Open PR \"Implemented shorthand syntax for ColumnDefinitions and RowDefinitions\" (#10317)"},{"Id":"2796814395","IsPullRequest":true,"CreatedAt":"2025-01-20T07:13:50","Actor":"Kuldeep-MS","Number":"10315","RawContent":null,"Title":"Updating the script to use new CDN","State":"closed","Body":"Fixes #10290\r\n\r\n## Description\r\n\r\nUpdating the script to use new CDN\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10315)","Url":"https://github.com/dotnet/wpf/pull/10315","RelatedDescription":"Closed or merged PR \"Updating the script to use new CDN\" (#10315)"},{"Id":"2796121852","IsPullRequest":true,"CreatedAt":"2025-01-20T05:22:18","Actor":"dotnet-maestro[bot]","Number":"10309","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:Coherency Updates)\n## Coherency Updates\n\nThe following updates ensure that dependencies with a *CoherentParentDependency*\nattribute were produced in a build used as input to the parent dependency's build.\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\n\n[DependencyUpdate]: <> (Begin)\n\n- **Coherency Updates**:\n  - **System.Reflection.MetadataLoadContext**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Windows.Extensions**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.Platforms**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Resources.Extensions**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Serialization.Formatters**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Ref**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.Registry.AccessControl**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.SystemEvents**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.CodeDom**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Configuration.ConfigurationManager**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Data.Odbc**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Data.OleDb**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.EventLog**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.PerformanceCounter**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.AccountManagement**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.Protocols**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Formats.Nrbf**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Packaging**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Ports**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Management**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Reflection.Context**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Caching**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Pkcs**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.ProtectedData**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Xml**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Permissions**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceModel.Syndication**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceProcess.ServiceController**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Speech**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Text.Encoding.CodePages**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.Threading.AccessControl**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition.Registration**: from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1 (parent: Microsoft.Private.Winforms)\n\n[DependencyUpdate]: <> (End)\n\n[marker]: <> (End:Coherency Updates)\n\n\n\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n## From https://github.com/dotnet/winforms\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\n- **Build**: 20250118.2\n- **Date Produced**: January 19, 2025 6:06:22 AM UTC\n- **Commit**: 1e44f011994881e4268bb9706509f7051a7dae46\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 10.0.0-alpha.1.25066.5 to 10.0.0-alpha.1.25068.2][7]\n  - **Microsoft.Private.Winforms**: [from 10.0.0-alpha.1.25066.5 to 10.0.0-alpha.1.25068.2][7]\n  - **System.Drawing.Common**: [from 10.0.0-alpha.1.25066.5 to 10.0.0-alpha.1.25068.2][7]\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Windows.Extensions**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Resources.Extensions**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.CodeDom**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.ComponentModel.Composition**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Data.Odbc**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Data.OleDb**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Diagnostics.EventLog**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.DirectoryServices**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Formats.Nrbf**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.IO.Packaging**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.IO.Ports**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Management**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Reflection.Context**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Runtime.Caching**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Security.Permissions**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.ServiceModel.Syndication**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Speech**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.Threading.AccessControl**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-alpha.1.25065.17 to 10.0.0-alpha.1.25068.1][8]\n\n[7]: https://github.com/dotnet/winforms/compare/f0026e791f...1e44f01199\n[8]: https://github.com/dotnet/runtime/compare/2da9a85776...29013d8ae5\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n\n\n\n\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10309)\n\n\n\n\n\n\n\n\n\n\n\n\n\n","Url":"https://github.com/dotnet/wpf/pull/10309","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#10309)"},{"Id":"2802571956","IsPullRequest":false,"CreatedAt":"2025-01-19T17:02:56","Actor":"samanoudi","Number":"10318","RawContent":null,"Title":"OpenFileDialog / SaveFileDialog will shutdown WPF application with Error","State":"open","Body":"### Description\n\nhave an issue using OpenFileDialog/ SaveFileDialog in .NET 9.0 WPF Application. When shown the Dialog and hovering/clicking with the mouse on the Drive selection parts the WPF app will exit with the following error : \n\nThe program '[32780] WPFTESTS.exe' has exited with code 3221226505 (0xc0000409). \n\n\n\n![Image](https://github.com/user-attachments/assets/fdccb891-d8fa-4742-a305-78d5bd3778ea)\n\nNote: Using the Quicklinks, and Selecting Files is working without any Errors. Reverting the Application to Target .NET 8 the error will go away. This is calling method.\n\n### Reproduction Steps\n\nprivate void Button_Click(object sender, RoutedEventArgs e)\n{\n    OpenFileDialog f= new OpenFileDialog();\n    f.ShowDialog();\n}\n\n\n### Expected behavior\n\nOpening a FielDialog and selecting drives, folder and files\n\n### Actual behavior\n\nApp Shuts down with Error\n\n### Regression?\n\n.Net8\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nWindows 11\nNet9 var 9.102\n\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/wpf/issues/10318","RelatedDescription":"Open issue \"OpenFileDialog / SaveFileDialog will shutdown WPF application with Error\" (#10318)"},{"Id":"2796368330","IsPullRequest":true,"CreatedAt":"2025-01-19T07:31:26","Actor":"SergeCroise","Number":"10311","RawContent":null,"Title":"fix: api-compat.md spelling punctuation","State":"closed","Body":"- referen**ce** assemblies\r\n- availab**le**\r\n- generate **an** MSBuild error\r\n- inten**tion**al\r\n\r\nFixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\nsee:\r\nhttps://www.merriam-webster.com/dictionary/availabe\r\nhttps://www.merriam-webster.com/dictionary/intential\r\nhttps://www.merriam-webster.com/dictionary/e.g.#examples\r\nhttps://www.merriam-webster.com/dictionary/an#usage-discussion-1\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n","Url":"https://github.com/dotnet/wpf/pull/10311","RelatedDescription":"Closed or merged PR \"fix: api-compat.md spelling punctuation\" (#10311)"},{"Id":"2797304951","IsPullRequest":false,"CreatedAt":"2025-01-19T00:16:15","Actor":"ApplePieCodes","Number":"10316","RawContent":null,"Title":"Implement a preprocessor for C# like JSX. CSX?","State":"open","Body":"I don't like databindings and tend to handle repetitive instances of a component in code. For example, I have code like this\n```C#\nforeach (ProjectReference project in projects.Projects)\n{\n    ListBoxItem item = new ListBoxItem();\n    StackPanel proj = new StackPanel();\n    proj.Orientation = Orientation.Horizontal;\n    proj.VerticalAlignment = VerticalAlignment.Center;\n    proj.HorizontalAlignment = HorizontalAlignment.Left;\n    Image templateImg = new Image();\n    templateImg.Width = 50;\n    templateImg.Height = 50;\n    templateImg.Margin = new Thickness(5, 5, 5, 5);\n    switch (project.Template)\n    {\n        case \"3D\":\n            templateImg.Source = new BitmapImage(new Uri(\"pack://application:,,,/Resources\\\\Images\\\\TemplateIcons\\\\3D.png\"));\n            break;\n        case \"3D+\":\n            templateImg.Source = new BitmapImage(new Uri(\"pack://application:,,,/Resources\\\\Images\\\\TemplateIcons\\\\3D_Plus.png\"));\n            break;\n    }\n    proj.Children.Add(templateImg);\n    item.Content = proj;\n    ListBox.Children.Add(item);\n}\n```\n\nWhat if I could simplify the code to something like this?\n```C#\nforeach (ProjectReference project in projects.Projects)\n{\n    BitmapImage imgSource;\n    switch (project.Template)\n    {\n        case \"3D\":\n            imgSource = new BitmapImage(new Uri(\"pack://application:,,,/Resources\\\\Images\\\\TemplateIcons\\\\3D.png\"));\n            break;\n        case \"3D+\":\n            imgSource = new BitmapImage(new Uri(\"pack://application:,,,/Resources\\\\Images\\\\TemplateIcons\\\\3D_Plus.png\"));\n            break;\n    }\n    ListBox.Children.Add(\n    <ListBoxItem>\n       <StackPanel Orientation=\"Horizontal\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Left\">\n            <Image Source=imgSource/>\n        </StackPanel>\n    </ListBoxItem>);\n```\n\nI feel like this would be a really helpful feature.","Url":"https://github.com/dotnet/wpf/issues/10316","RelatedDescription":"Open issue \"Implement a preprocessor for C# like JSX. CSX?\" (#10316)"},{"Id":"2796785576","IsPullRequest":true,"CreatedAt":"2025-01-18T06:07:45","Actor":"ThomasGoulet73","Number":"10314","RawContent":null,"Title":"Fix XamlDirective stack overflow exception","State":"open","Body":"Fixes dotnet/wpf#10313\r\n\r\n## Description\r\nI changed MemberReflector.UnknownReflector to be thread safe by initializing the property from the static constructor instead of doing the lazy initialization manually. The static constructor of a type is guaranteed to be called only once.\r\n\r\nSee the issue for an explanation of the bug and how it's hit.\r\n\r\n## Customer Impact\r\nCould fix a crash or weird behavior at runtime but it's very hard to hit (See issue).\r\n\r\n## Regression\r\nNo.\r\n\r\n## Testing\r\nUsed the repro in the issue which crashed before this PR and passes with this PR.\r\n\r\n## Risk\r\nLow.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10314)","Url":"https://github.com/dotnet/wpf/pull/10314","RelatedDescription":"Open PR \"Fix XamlDirective stack overflow exception\" (#10314)"},{"Id":"2796775003","IsPullRequest":false,"CreatedAt":"2025-01-18T05:39:56","Actor":"ThomasGoulet73","Number":"10313","RawContent":null,"Title":"Stack overflow exception when creating and using multiple instances of XamlDirective in parallel","State":"open","Body":"### Description\n\nThis bug isn't really specific to XamlDirective but it's the class where I found the issue and it's the easiest to cause an issue. You can have the bug when using instances of XamlMember or of any of its descendants (In this case XamlDirective).\n\nThe bug is that XamlMember._reflector can be wrongly initialized when hitting this point from 3 threads and with very specific timing:\nhttps://github.com/dotnet/wpf/blob/b08d70d354d9f0f34ecf4bcd5f214e57dd5dab1e/src/Microsoft.DotNet.Wpf/src/System.Xaml/System/Xaml/XamlMember.cs#L154\n\nHere's the code for MemberReflector.UnknownReflector:\nhttps://github.com/dotnet/wpf/blob/b08d70d354d9f0f34ecf4bcd5f214e57dd5dab1e/src/Microsoft.DotNet.Wpf/src/System.Xaml/System/Xaml/Schema/MemberReflector.cs#L77-L104\n\nHere's the required timing of those 3 threads to have an invalid MemberReflector returned from MemberReflector.UnknownReflector:\nThread 1 and 2 invoke MemberReflector.UnknownReflector and find that s_UnknownReflector is null. Thread 1 assigns s_UnknownReflector to a new instance. Thread 3 invokes MemberReflector.UnknownReflector, finds that s_UnknownReflector is not null and returns s_UnknownReflector. Thread 2 assigns s_UnknownReflector to a new instance.\n\nIn this scenario thread 1 and 2 both return the same instance from MemberReflector.UnknownReflector while thread 3 returned an old instance from MemberReflector.UnknownReflector that wasn't fully initialized.\n\n<br/>\n<br/>\n\nNow that I've explained how to have a partially initialized MemberReflector, here's how to have a stack overflow exception using XamlDirective:\nWe enter XamlDirective.Type when _reflector.Type is null which means that we enter this if block:\nhttps://github.com/dotnet/wpf/blob/b08d70d354d9f0f34ecf4bcd5f214e57dd5dab1e/src/Microsoft.DotNet.Wpf/src/System.Xaml/System/Xaml/XamlMember.cs#L251-L254\n\nIn the if block it calls the virtual method XamlDirective.LookupType() which is implemented in XamlDirective to return base.Type: \nhttps://github.com/dotnet/wpf/blob/b08d70d354d9f0f34ecf4bcd5f214e57dd5dab1e/src/Microsoft.DotNet.Wpf/src/System.Xaml/System/Xaml/Schema/XamlDirective.cs#L185-L189\n\nWe then have an infinite loop of Type -> LookupType() -> Type -> LookupType() -> etc.\n\n### Reproduction Steps\n\nAdd this code to https://github.com/dotnet/wpf/blob/b08d70d354d9f0f34ecf4bcd5f214e57dd5dab1e/src/Microsoft.DotNet.Wpf/tests/UnitTests/System.Xaml.Tests/System/Xaml/XamlDirectiveTests.cs\n```csharp\n[Theory]\n[InlineData(\"xamlNamespace\", \"name\")]\npublic void Parallel_Ctor_String_String(string xamlNamespace, string? name)\n{\n    Parallel.For(0, 1000, i =>\n    {\n        var directive = new XamlDirective(xamlNamespace, name);\n        Assert.Equal(XamlLanguage.Object, directive.Type);\n    });\n}\n```\n\nRun the test a couple of times and it should crash the process with a stack overflow exception.\n\n### Expected behavior\n\nThe process shouldn't crash with a stack overflow exception.\n\n### Actual behavior\n\nThe process crashes with a stack overflow exception.\n\n### Regression?\n\nNo.\n\n### Known Workarounds\n\nNone.\n\n### Impact\n\nCan cause the process to crash or weird bugs at runtime but the chance of getting this issue in practice is extremely low. As explained in the description, it requires 3 threads with very specific timing so I think it would be very hard to hit in practice.\n\n### Configuration\n\n.Net 9.0\nWindows 11\nx64\nNot specific to that configuration.\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/wpf/issues/10313","RelatedDescription":"Open issue \"Stack overflow exception when creating and using multiple instances of XamlDirective in parallel\" (#10313)"},{"Id":"2796497582","IsPullRequest":false,"CreatedAt":"2025-01-18T00:03:07","Actor":"mjkkirschner","Number":"10312","RawContent":null,"Title":"debug / trace find ancestor of type","State":"open","Body":"Hello,\n\nplease redirect me if this is the not the correct location for this issue.\n\nI would somehow like to debug all FindAncestorOfType calls but I cannot seem to find objectref file when decompiling symbols in visual studio.\n\nIf that is not possible I would like to enable the tracing args for this method - is that possible?\n\nhttps://github.com/dotnet/wpf/blob/b08d70d354d9f0f34ecf4bcd5f214e57dd5dab1e/src/Microsoft.DotNet.Wpf/src/PresentationFramework/MS/Internal/Data/ObjectRef.cs#L393","Url":"https://github.com/dotnet/wpf/issues/10312","RelatedDescription":"Open issue \"debug / trace find ancestor of type\" (#10312)"},{"Id":"2796168690","IsPullRequest":true,"CreatedAt":"2025-01-17T19:34:32","Actor":"h3xds1nz","Number":"10310","RawContent":null,"Title":"Remove some allocations related to GudelineSet and DoubleCollection","State":"open","Body":"## Description\r\n\r\n- Accept stack-allocated arrays internally for `GudelineSet`.\r\n- Accept params for `DoubleCollection` with pre-allocated capacity in `FrugalStructList<T>`.\r\n- Use them in the framework code.\r\n\r\n#### Sample benchmark for `GuidelineSet` creation\r\n\r\n| Method   | Mean [ns] | Error [ns] | StdDev [ns] | Gen0   | Code Size [B] | Allocated [B] |\r\n|--------- |----------:|-----------:|------------:|-------:|--------------:|--------------:|\r\n| ORIGINAL |  298.1 ns |    4.57 ns |     4.28 ns | 0.0329 |         866 B |         552 B |\r\n| PR__EDIT |  257.5 ns |    3.55 ns |     3.15 ns | 0.0281 |       3,842 B |         472 B |\r\n\r\n\r\n```csharp\r\n[Benchmark]\r\npublic GuidelineSet Original() => new GuidelineSet([4.5, 6.5], [4.5, 6.5]);\r\n\r\n[Benchmark]\r\npublic GuidelineSet PR__EDIT() => new GuidelineSet(new double[] { 4.5, 6.5 }, new double[] { 4.5, 6.5 });\r\n```\r\n\r\n## Customer Impact\r\n\r\nImproved performance, decreased allocations.\r\n\r\n## Regression\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nLocal build.\r\n\r\n## Risk\r\n\r\nLow, just swaps from heap arrays to stack arrays. Part of the speed up comes from the fact the new `DoubleCollection` doesn't check the thread in `params` ctor as it makes no sense (further backed with all the code comments) and it can therefore get inlined.\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10310)","Url":"https://github.com/dotnet/wpf/pull/10310","RelatedDescription":"Open PR \"Remove some allocations related to GudelineSet and DoubleCollection\" (#10310)"},{"Id":"2796120025","IsPullRequest":true,"CreatedAt":"2025-01-17T19:14:05","Actor":"SergeCroise","Number":"10308","RawContent":null,"Title":"fix: acceptance_criteria.md remove useless article","State":"closed","Body":"- When **a** solution has been...\r\n\r\nFixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\nSimplify the sentence by removing a useless word\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10308)","Url":"https://github.com/dotnet/wpf/pull/10308","RelatedDescription":"Closed or merged PR \"fix: acceptance_criteria.md remove useless article\" (#10308)"},{"Id":"2796079118","IsPullRequest":true,"CreatedAt":"2025-01-17T18:39:10","Actor":"SergeCroise","Number":"10307","RawContent":null,"Title":"fix: contributing.md spelling","State":"closed","Body":"- techn**olo**gy\r\n- comman**d l**ine\r\n\r\nFixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\nsee:\r\nhttps://learn.microsoft.com/en-us/style-guide/a-z-word-list-term-collections/c/command-line\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10307)","Url":"https://github.com/dotnet/wpf/pull/10307","RelatedDescription":"Closed or merged PR \"fix: contributing.md spelling\" (#10307)"},{"Id":"2795146299","IsPullRequest":false,"CreatedAt":"2025-01-17T10:47:24","Actor":"luchunminglu","Number":"10305","RawContent":null,"Title":"Microsoft.Win32.OpenFileDialog  cause  application crash  After update .NET9","State":"open","Body":"\nAfter update .NET9,  dialog.ShowDialog() crash the application . It happens on some machine, not all machine.\nThe same code work on .net8.\n\n```\n\nMicrosoft.Win32.OpenFileDialog dialog = new Microsoft.Win32.OpenFileDialog();\n\nbool? dialogResult = dialog.ShowDialog();\n```","Url":"https://github.com/dotnet/wpf/issues/10305","RelatedDescription":"Open issue \"Microsoft.Win32.OpenFileDialog  cause  application crash  After update .NET9\" (#10305)"},{"Id":"2795987236","IsPullRequest":false,"CreatedAt":"2025-01-17T09:30:38","Actor":"VShawn","Number":"10306","RawContent":null,"Title":"The WPF program caused a KERNELBASE.dll exception on Windows11","State":"open","Body":"## Description\n\nI developed an RDP desktop program using WPF + WindowsFormsHost + MSTSCLib.dll(.NET6 and .NET8), and everything worked fine on the Win10. However, in Win11, whenever I click on the information button in the RDP connection bar, it causes the WPF program to crash. (Tests have shown that any pop-up of RDP will cause a crash.)\n\n![Image](https://github.com/user-attachments/assets/3a5d728c-bf1b-4ad0-a5bb-842fe6250748)\n\nInitially, I thought it was an issue with WindowsFormsHost, so I rewrote a complete Winform RDP window and opened it in the WPF project, but the problem persisted.\n\nThen, I moved this Winform RDP window to a Winform project, and now clicking on the information button in the RDP connection bar does not cause the software to crash.\n\nYou can see the difference between Winform and WPF in this video:\n\nhttps://github.com/user-attachments/assets/850c8402-2cb0-4444-8f73-7bdc0e609d27\n\n\n## related \n\nrelated ticket: https://github.com/1Remote/1Remote/issues/559\n\n\n\n\n### Reproduction Steps\n\n![Image](https://github.com/user-attachments/assets/13edcb51-8f62-47ce-a1f3-6912bfabcd97)\n\nOpen the solution I uploaded in Win11, change the account password to fit your server, run it, and click the information button in the connection bar. You will find that it only crashes in the WPF project. (The RDP sections of the two test projects have exactly the same code.)\n\n[Demo Upload.zip](https://github.com/user-attachments/files/18452348/Demo.Upload.zip)\n\n### Expected behavior\n\nNo crash with WPF.\n\n### Actual behavior\n\ncrash with WPF.\n\n\n## Log in the event viewer:\n```\n错误应用程序名称: WpfRDPHost6.exe，版本: 0.0.0.0，时间戳: 0x65cd0000\n错误模块名称: KERNELBASE.dll，版本: 10.0.22621.4249，时间戳: 0x0cf64c6a\n异常代码: 0xc000041d\n错误偏移量: 0x000000000005fe4c\n错误进程 ID: 0x0x7FAC\n错误应用程序启动时间: 0x0x1DB68BFFE406869\n错误应用程序路径: D:\\Project\\Upload\\WpfRDPHost6\\bin\\Debug\\net8.0-windows10.0.17763.0\\WpfRDPHost6.exe\n错误模块路径: C:\\Windows\\System32\\KERNELBASE.dll\n报告 ID: 0037c9ba-27af-481f-a4f0-af1324548f1d\n错误程序包全名: \n错误程序包相对应用程序 ID: \n```\n\n[Report.wer.zip](https://github.com/user-attachments/files/18451787/Report.wer.zip)\n\n","Url":"https://github.com/dotnet/wpf/issues/10306","RelatedDescription":"Open issue \"The WPF program caused a KERNELBASE.dll exception on Windows11\" (#10306)"}],"ResultType":"GitHubIssue"}},"RunOn":"2025-01-25T03:30:27.5757591Z","RunDurationInMilliseconds":476}