{"Data":{"GitHub":{"Issues":[{"Id":"2814540004","IsPullRequest":true,"CreatedAt":"2025-01-28T03:27:10","Actor":"github-actions[bot]","Number":"10345","RawContent":null,"Title":"[release/9.0] Updating KeyTime of Expander","State":"open","Body":"Backport of #10343 to release/9.0\n/cc @dipeshmsft @siagupta0202\n## Customer Impact\n## Testing\n## Risk\n**IMPORTANT**: If this backport is for a servicing release, please verify that:\n- The PR target branch is `release/X.0-staging`, not `release/X.0`.\n- If the change touches code that ships in a NuGet package, you have added the necessary [package authoring](https://github.com/dotnet/runtime/blob/main/docs/project/library-servicing.md) and gotten it explicitly reviewed.\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10345)","Url":"https://github.com/dotnet/wpf/pull/10345","RelatedDescription":"Open PR \"[release/9.0] Updating KeyTime of Expander\" (#10345)"},{"Id":"2813945734","IsPullRequest":true,"CreatedAt":"2025-01-28T03:26:30","Actor":"siagupta0202","Number":"10343","RawContent":null,"Title":"Updating KeyTime of Expander","State":"closed","Body":"Fixes #10295 \r\n\r\n## Description\r\n\r\nUpdating KeyTime to 0.2 seconds for expander in down expanded direction\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\nYes\r\n## Testing\r\n\r\nLocal build pass\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10343)","Url":"https://github.com/dotnet/wpf/pull/10343","RelatedDescription":"Closed or merged PR \"Updating KeyTime of Expander\" (#10343)"},{"Id":"2813948613","IsPullRequest":true,"CreatedAt":"2025-01-27T20:07:24","Actor":"dotnet-maestro[bot]","Number":"10344","RawContent":null,"Title":"[release/10.0-preview1] Update dependencies from dotnet/winforms","State":"open","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:079bba45-8c31-4cb7-8ab7-ea9727f94872)\n## From https://github.com/dotnet/winforms\n- **Subscription**: 079bba45-8c31-4cb7-8ab7-ea9727f94872\n- **Build**: 20250127.1\n- **Date Produced**: January 27, 2025 7:51:27 PM UTC\n- **Commit**: 9dd599da192a91cbbefe2e5600af82153972e40a\n- **Branch**: refs/heads/release/10.0-preview1\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 10.0.0-alpha.1.25076.1 to 10.0.0-alpha.1.25077.1][1]\n  - **Microsoft.Private.Winforms**: [from 10.0.0-alpha.1.25076.1 to 10.0.0-alpha.1.25077.1][1]\n  - **System.Drawing.Common**: [from 10.0.0-alpha.1.25076.1 to 10.0.0-alpha.1.25077.1][1]\n\n[1]: https://github.com/dotnet/winforms/compare/9dd599da19...9dd599da19\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:079bba45-8c31-4cb7-8ab7-ea9727f94872)\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10344)","Url":"https://github.com/dotnet/wpf/pull/10344","RelatedDescription":"Open PR \"[release/10.0-preview1] Update dependencies from dotnet/winforms\" (#10344)"},{"Id":"2812545278","IsPullRequest":true,"CreatedAt":"2025-01-27T19:04:45","Actor":"harshit7962","Number":"10340","RawContent":null,"Title":"Update branding to release/10.0-preview2","State":"closed","Body":"Update branding to release/10.0-preview2.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10340)","Url":"https://github.com/dotnet/wpf/pull/10340","RelatedDescription":"Closed or merged PR \"Update branding to release/10.0-preview2\" (#10340)"},{"Id":"2813823860","IsPullRequest":true,"CreatedAt":"2025-01-27T19:01:02","Actor":"dotnet-maestro[bot]","Number":"10342","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"open","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n## From https://github.com/dotnet/winforms\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\n- **Build**: 20250126.2\n- **Date Produced**: January 27, 2025 6:25:32 AM UTC\n- **Commit**: c4f23c34f4e6c66b69542f92d45dcaa919a7ceb6\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 10.0.0-alpha.1.25076.1 to 10.0.0-alpha.2.25076.2][1]\n  - **Microsoft.Private.Winforms**: [from 10.0.0-alpha.1.25076.1 to 10.0.0-alpha.2.25076.2][1]\n  - **System.Drawing.Common**: [from 10.0.0-alpha.1.25076.1 to 10.0.0-alpha.2.25076.2][1]\n\n[1]: https://github.com/dotnet/winforms/compare/9dd599da19...c4f23c34f4\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10342)","Url":"https://github.com/dotnet/wpf/pull/10342","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/winforms\" (#10342)"},{"Id":"2813547359","IsPullRequest":false,"CreatedAt":"2025-01-27T16:55:42","Actor":"robert-abeo","Number":"10341","RawContent":null,"Title":"Fluent v2: DatePicker Issues","State":"open","Body":"### Description\n\nThe Fluent v2 DatePicker theme has a few issues:\n\n 1. The icon glyph is not vertically centered (with reduced control height most likely)\n 2. Some days do not have a circular background/border\n\n\n### Reproduction Steps\n\nSee image below\n\n### Expected behavior\n\n1. The icon glyph should be centered vertically in all cases like in Aero2\n2. All days displayed on the calendar should have a circle background/border. The width should be the same as the height. Other Fluent themes achieve this with a converter.\n\n### Actual behavior\n\n\n![Image](https://github.com/user-attachments/assets/9c8b0ef5-d837-4a8f-a603-c0a354461d49)\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nRe-templating\n\n### Impact\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/wpf/issues/10341","RelatedDescription":"Open issue \"Fluent v2: DatePicker Issues\" (#10341)"},{"Id":"2812095412","IsPullRequest":true,"CreatedAt":"2025-01-27T06:18:13","Actor":"harshit7962","Number":"10339","RawContent":null,"Title":"Update template changes","State":"closed","Body":"## Description\r\nBuild changes after update in teamples.\r\n\r\n## Regression\r\n_None_\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\nLocal Build Pass\r\n<!-- What kind of testing has been done with the fix. -->\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10339)","Url":"https://github.com/dotnet/wpf/pull/10339","RelatedDescription":"Closed or merged PR \"Update template changes\" (#10339)"},{"Id":"2810196967","IsPullRequest":true,"CreatedAt":"2025-01-27T06:07:48","Actor":"dotnet-maestro[bot]","Number":"10334","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n## From https://github.com/dotnet/winforms\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\n- **Build**: 20250126.1\n- **Date Produced**: January 27, 2025 3:20:42 AM UTC\n- **Commit**: 9dd599da192a91cbbefe2e5600af82153972e40a\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 10.0.0-alpha.1.25073.6 to 10.0.0-alpha.1.25076.1][5]\n  - **Microsoft.Private.Winforms**: [from 10.0.0-alpha.1.25073.6 to 10.0.0-alpha.1.25076.1][5]\n  - **System.Drawing.Common**: [from 10.0.0-alpha.1.25073.6 to 10.0.0-alpha.1.25076.1][5]\n\n[5]: https://github.com/dotnet/winforms/compare/5fc66aac25...9dd599da19\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n\n\n\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10334)\n\n[marker]: <> (Begin:Coherency Updates)\n## Coherency Updates\n\nThe following updates ensure that dependencies with a *CoherentParentDependency*\nattribute were produced in a build used as input to the parent dependency's build.\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\n\n[DependencyUpdate]: <> (Begin)\n\n- **Coherency Updates**:\n  - **System.Reflection.MetadataLoadContext**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Windows.Extensions**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.Platforms**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Resources.Extensions**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Serialization.Formatters**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Ref**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.Registry.AccessControl**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.SystemEvents**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.CodeDom**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Configuration.ConfigurationManager**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Data.Odbc**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Data.OleDb**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.EventLog**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.PerformanceCounter**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.AccountManagement**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.Protocols**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Formats.Nrbf**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Packaging**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Ports**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Management**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Reflection.Context**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Caching**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Pkcs**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.ProtectedData**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Xml**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Permissions**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceModel.Syndication**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceProcess.ServiceController**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Speech**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Text.Encoding.CodePages**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.Threading.AccessControl**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition.Registration**: from 10.0.0-alpha.1.25072.13 to 10.0.0-alpha.1.25073.13 (parent: Microsoft.Private.Winforms)\n\n[DependencyUpdate]: <> (End)\n\n[marker]: <> (End:Coherency Updates)\n\n\n\n\n\n\n\n\n","Url":"https://github.com/dotnet/wpf/pull/10334","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#10334)"},{"Id":"2811850655","IsPullRequest":true,"CreatedAt":"2025-01-26T23:49:47","Actor":"ThomasGoulet73","Number":"10338","RawContent":null,"Title":"Fix unit tests native dependencies","State":"open","Body":"This is a workaround for dotnet/runtime#111825\r\n\r\n## Description\r\nFixes errors in unit tests when trying to load wpfgfx_cor3.dll which depends on D3DCompiler_47_cor3.dll which can't be found at runtime which seems to be caused by a bug in the runtime when using `DllImportSearchPath.AssemblyDirectory | DllImportSearchPath.System32` as the search path. \r\n\r\nThis search path is the default search path used by all projects in this repo and it's configured here:\r\nhttps://github.com/dotnet/wpf/blob/81019fc2492bfc15620ef14053f4f3f22eeeac6c/eng/WpfArcadeSdk/tools/ExtendedAssemblyInfo.props#L16-L20\r\n\r\nWe can't just set `IncludeDllSafeSearchPathAttribute` to false in the test projects since the attribute is used to configure the search path used by default for each assembly. We would need to set it to false for all assemblies trying to load wpfgfx_cor3.dll.\r\n\r\n**This problem does not occur for apps using WPF, see the issue for more info**\r\n\r\n## Customer Impact\r\nNone, test only.\r\n\r\n## Regression\r\nNo.\r\n\r\n## Testing\r\nLocal build + CI + local test.\r\n\r\n## Risk\r\nNone, test only.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10338)","Url":"https://github.com/dotnet/wpf/pull/10338","RelatedDescription":"Open PR \"Fix unit tests native dependencies\" (#10338)"},{"Id":"2811800122","IsPullRequest":true,"CreatedAt":"2025-01-26T21:35:10","Actor":"ThomasGoulet73","Number":"10337","RawContent":null,"Title":"Disable code analysis for generated code","State":"open","Body":"## Description\r\nDisables code analysis for generated code. Code analysis for generated code does not make sense since generated code will never be perfectly formatted and it prevents doing auto formatting to generated code without modifying the code generator.\r\n\r\nWe'll probably want to format the generated code someday but it should probably be done only when dotnet/wpf#6135 is merged and we can modify the code generator instead of modifying the generated code manually.\r\n\r\n## Customer Impact\r\nNone.\r\n\r\n## Regression\r\nNo.\r\n\r\n## Testing\r\nLocal build + CI.\r\n\r\n## Risk\r\nNone.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10337)","Url":"https://github.com/dotnet/wpf/pull/10337","RelatedDescription":"Open PR \"Disable code analysis for generated code\" (#10337)"},{"Id":"2810754546","IsPullRequest":false,"CreatedAt":"2025-01-25T04:29:00","Actor":"ThomasGoulet73","Number":"10335","RawContent":null,"Title":"Exception when loading native dlls from the application path when using AssemblyDirectory and System32 as the DllImportSearchPath","State":"closed","Body":"### Description\n\nThere seems to be an issue when loading a native dll in the application path that depends on a native dll also in the application path when using `DllImportSearchPath.AssemblyDirectory | DllImportSearchPath.System32` as the search path. When both of those scenario occurs, it'll throw an exception that the dll could not be loaded. This issue is not reproducible when using only `DllImportSearchPath.AssemblyDirectory` or if a native dll does not have a dependency on another native dll in the application path. This also doesn't seem to affect native dlls shipped in a runtime pack because the .Net host seems to include a custom search path for the runtime packs.\n\nThis is a bug I found while investigating a problem when running WPF unit tests, see https://github.com/dotnet/wpf/pull/10304#issuecomment-2613764193 for more info. I'm not sure if it's the expected behavior, a bug or if I simply misunderstood the bug in WPF.\n\n/cc @dipeshmsft\n\n### Reproduction Steps\n\n1. Clone https://github.com/[ThomasGoulet73/DllSearchPathRepro](https://github.com/ThomasGoulet73/DllSearchPathRepro)\n2. Build TestLibrary1.\n3. Build TestLibrary2.\n4. Run ConsoleApp. It should exit without issue.\n5. Open Program.cs in ConsoleApp.\n6. Comment the line in Main with Test1WithoutSystem32\n7. Uncomment the line in Main with Test1WithSystem32\n8. Run ConsoleApp. It should exit with an exception that TestLibrary1.dll could not be loaded.\n\n### Expected behavior\n\nMethods Test1WithoutSystem32 and Test1WithSystem32 should both succeed.\n\n### Actual behavior\n\nMethods Test1WithoutSystem32 succeeds and Test1WithSystem32 fails.\n\n### Regression?\n\nI tested using .Net 6 through .Net 9 and they all have the same behavior.\n\n### Known Workarounds\n\nChange the DllImportSearchPath.\n\n### Impact\n\nNot sure, I don't know how frequent this exact scenario occurs.\n\n### Configuration\n\n.Net 9.0\nWindows 11 x64\nDon't know if it is specific to my configuration.\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/wpf/issues/10335","RelatedDescription":"Closed issue \"Exception when loading native dlls from the application path when using AssemblyDirectory and System32 as the DllImportSearchPath\" (#10335)"},{"Id":"2809483466","IsPullRequest":true,"CreatedAt":"2025-01-24T13:37:57","Actor":"harshit7962","Number":"10333","RawContent":null,"Title":"Normalize start Text pointer to support Text Cursor Indicator","State":"open","Body":"## Description\r\nUsing accessibility option of _text cursor indicator_ in `RichTextBox` sometimes lead to crashing applications due to Invariant assert [here](https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Controls/TextRangeAdaptor.cs/#L462). Adding `Normalize()` call in changed location moves the `end` to the `start` if this invariant assert fails and hence essentially corrects the cursor position.\r\n\r\n## Customer Impact\r\nAccessibility fix. Allowing the usage of text cursor indicator with RichTextBox.\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n_None_\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\nLocal Build Pass\r\nSample Application Testing\r\nTest Pass\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\nLow\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10333)","Url":"https://github.com/dotnet/wpf/pull/10333","RelatedDescription":"Open PR \"Normalize start Text pointer to support Text Cursor Indicator\" (#10333)"},{"Id":"2809152155","IsPullRequest":true,"CreatedAt":"2025-01-24T11:19:15","Actor":"harshit7962","Number":"10332","RawContent":null,"Title":"Update templates to 10.0","State":"closed","Body":"## Description\r\nUpdate WPF Project templates to version 10.0.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10332)","Url":"https://github.com/dotnet/wpf/pull/10332","RelatedDescription":"Closed or merged PR \"Update templates to 10.0\" (#10332)"},{"Id":"2809029202","IsPullRequest":true,"CreatedAt":"2025-01-24T10:00:32","Actor":"dotnet-bot","Number":"10331","RawContent":null,"Title":"Localized file check-in by OneLocBuild Task: Build definition ID 217: Build ID 2629428","State":"open","Body":"This is the pull request automatically created by the OneLocBuild task in the build process to check-in localized files generated based upon translation source files (.lcl files) handed-back from the downstream localization pipeline. If there are issues in translations, visit https://aka.ms/icxLocBug and log bugs for fixes. The OneLocBuild wiki is https://aka.ms/onelocbuild and the localization process in general is documented at https://aka.ms/AllAboutLoc.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10331)","Url":"https://github.com/dotnet/wpf/pull/10331","RelatedDescription":"Open PR \"Localized file check-in by OneLocBuild Task: Build definition ID 217: Build ID 2629428\" (#10331)"},{"Id":"2807691465","IsPullRequest":true,"CreatedAt":"2025-01-24T06:33:36","Actor":"dotnet-maestro[bot]","Number":"10329","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:Coherency Updates)\n## Coherency Updates\n\nThe following updates ensure that dependencies with a *CoherentParentDependency*\nattribute were produced in a build used as input to the parent dependency's build.\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\n\n[DependencyUpdate]: <> (Begin)\n\n- **Coherency Updates**:\n  - **System.Reflection.MetadataLoadContext**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Windows.Extensions**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.Platforms**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Resources.Extensions**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Serialization.Formatters**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Ref**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.Registry.AccessControl**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.SystemEvents**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.CodeDom**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Configuration.ConfigurationManager**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Data.Odbc**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Data.OleDb**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.EventLog**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.PerformanceCounter**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.AccountManagement**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.Protocols**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Formats.Nrbf**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Packaging**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Ports**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Management**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Reflection.Context**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Caching**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Pkcs**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.ProtectedData**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Xml**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Permissions**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceModel.Syndication**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceProcess.ServiceController**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Speech**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Text.Encoding.CodePages**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.Threading.AccessControl**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition.Registration**: from 10.0.0-alpha.1.25070.4 to 10.0.0-alpha.1.25072.13 (parent: Microsoft.Private.Winforms)\n\n[DependencyUpdate]: <> (End)\n\n[marker]: <> (End:Coherency Updates)\n\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n## From https://github.com/dotnet/winforms\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\n- **Build**: 20250123.6\n- **Date Produced**: January 24, 2025 2:34:08 AM UTC\n- **Commit**: 5fc66aac253a96fd7ad9f5d566696c721a864e74\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 10.0.0-alpha.1.25072.5 to 10.0.0-alpha.1.25073.6][3]\n  - **Microsoft.Private.Winforms**: [from 10.0.0-alpha.1.25072.5 to 10.0.0-alpha.1.25073.6][3]\n  - **System.Drawing.Common**: [from 10.0.0-alpha.1.25072.5 to 10.0.0-alpha.1.25073.6][3]\n\n[3]: https://github.com/dotnet/winforms/compare/9a8b5a2a86...5fc66aac25\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10329)\n\n\n","Url":"https://github.com/dotnet/wpf/pull/10329","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#10329)"},{"Id":"2807304349","IsPullRequest":true,"CreatedAt":"2025-01-23T16:03:05","Actor":"h3xds1nz","Number":"10328","RawContent":null,"Title":"Remove allocations in BaseUriHelper, improve resource resolution performance","State":"open","Body":"Currently blocked by #9822, hence draft.\r\n\r\n## Description\r\n\r\nOptimizes methods in `BaseUriHelper`, removes most of the allocations directly in this class and opens up more optimization possibilities; directly builds upon #9739 and #9822.\r\n\r\n- Removes `IsSameKeyToken` from SecurityHelper in favour of `ReflectionUtils.IsSamePublicKeyToken`.\r\n- `BaseUriHelper.GetAssemblyNameAndPart` is now fully allocation free.\r\n    - This allows for more optimizations in the future and already makes some paths without any allocations.\r\n    - Instead of returning 3 strings, we return slices in `AssemblyPackageInfo` `ref struct`.\r\n- In `FontResourceCache`, we can now use `AlternateLookup` to benefit from this change as well.\r\n- `BaseUriHelper.BaseUri` was never set outside static constructor, where it was initialized to the `s_packAppBaseUri` value,\r\nhence I've removed the property altogether, which also led to removal of `BindUriHelper.BaseUri` which was just proxy.\r\n- Code under `CF_Envelope_Activation_Enabled` macro was removed, most of the code is already missing in .NET Core than what was in reference files for .NET 3.5 and it is never compiled on NetFX nor on .NET Core.\r\n- Changes in `GetLoadedAssembly` bring a bit of an improvement but there's more benchmarking needed on how to handle this chain most efficiently, so keeping as it is right now.\r\n\r\nCherry-picking some cases:\r\n\r\n### GetAssemblyNameAndPart\r\n\r\n| Method   | someUri             | Mean [ns] | Error [ns] | StdDev [ns] |  Gen0   | Allocated [B] |\r\n|--------- |-------------------- |----------:|-----------:|------------:|---------:|--------------:|\r\n| Original | /Mic(...)xaml [103] | 104.95 ns |   2.274 ns |    6.706 ns |     0.0448 |         752 B |\r\n| PR__EDIT | /Mic(...)xaml [103] |  45.42 ns |   0.475 ns |    0.445 ns |         - |             - |\r\n\r\n### AssemblyMatchesKeyString vs ComparePublicKeyTokens\r\n\r\n| Method   | someAssembly         | Mean [ns] | Error [ns] | StdDev [ns] | Gen0   | Allocated [B] |\r\n|--------- |--------------------- |----------:|-----------:|------------:|-------:|---------------:|\r\n| Original | Syste(...)7798e [89] | 40.755 ns |  0.3990 ns |   0.3537 ns | 0.0019 |          32 B |\r\n| PR__EDIT | Syste(...)7798e [89] |  8.135 ns |  0.0835 ns |   0.0740 ns |      - |                 - |\r\n\r\n## Customer Impact\r\n\r\nImproved performance, decrased allocations.\r\n\r\n## Regression\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nLocal build, some assert testing; I'll provide tests before this goes out of draft.\r\n\r\n## Risk\r\n\r\nLow to medium, there are quite a few changes but most of them are rather straightforward.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10328)","Url":"https://github.com/dotnet/wpf/pull/10328","RelatedDescription":"Open PR \"Remove allocations in BaseUriHelper, improve resource resolution performance\" (#10328)"},{"Id":"2806891124","IsPullRequest":true,"CreatedAt":"2025-01-23T13:18:56","Actor":"himgoyalmicro","Number":"10327","RawContent":null,"Title":"Fix in .NET 8 for Inconsistent UI Issue due to incorrect localized string resources","State":"open","Body":"Fixes #10273 \r\n\r\n## Description\r\n\r\nFixed the translation state for ScrollBar_ContextMenu_Top, ScrollBar_ContextMenu_PageDown and ScrollBar_ContextMenu_PageUp resource\r\n\r\n## Customer Impact\r\n\r\nContext menu for users using ScrollBar will be correctly translated for different languages.\r\n\r\n## Regression\r\n\r\nN/A\r\n\r\n## Testing\r\n\r\nLocally Tested \r\n\r\n## Risk\r\n\r\nLow\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10327)","Url":"https://github.com/dotnet/wpf/pull/10327","RelatedDescription":"Open PR \"Fix in .NET 8 for Inconsistent UI Issue due to incorrect localized string resources\" (#10327)"},{"Id":"2805133163","IsPullRequest":true,"CreatedAt":"2025-01-23T05:38:25","Actor":"dotnet-maestro[bot]","Number":"10325","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n## From https://github.com/dotnet/winforms\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\n- **Build**: 20250122.5\n- **Date Produced**: January 23, 2025 12:23:16 AM UTC\n- **Commit**: 9a8b5a2a86123e583e234a0fa12fc34d716a7c88\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 10.0.0-alpha.1.25071.5 to 10.0.0-alpha.1.25072.5][2]\n  - **Microsoft.Private.Winforms**: [from 10.0.0-alpha.1.25071.5 to 10.0.0-alpha.1.25072.5][2]\n  - **System.Drawing.Common**: [from 10.0.0-alpha.1.25071.5 to 10.0.0-alpha.1.25072.5][2]\n\n[2]: https://github.com/dotnet/winforms/compare/51fffb84af...9a8b5a2a86\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10325)\n\n\n","Url":"https://github.com/dotnet/wpf/pull/10325","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#10325)"},{"Id":"2805697298","IsPullRequest":false,"CreatedAt":"2025-01-23T01:40:07","Actor":"cqgis","Number":"10326","RawContent":null,"Title":"Windows 11 reduce the performance  when run without vs debugger","State":"open","Body":"I created a WPF Application （.net 8） with a TextBlock to show the FPS of the application.   \nI used two tasks to calculate the FPS and update the TextBlock.   \n\n``` csharp\n private volatile int                  _frameCount    = 0;\n private readonly ManualResetEventSlim _quantumWaiter = new(false);\n\n private void MainWindow_Loaded(object sender, RoutedEventArgs e)\n {\n     Task.Factory.StartNew(() =>\n     {\n         var sw    = new Stopwatch();\n         var delay = TimeSpan.FromMilliseconds(5);\n         while (true)\n         {\n             sw.Restart();\n             Interlocked.Add(ref this._frameCount, 1);\n             sw.Stop();\n             var waitting = delay - sw.Elapsed;\n             this._quantumWaiter.Wait(waitting);\n         }\n     });\n\n     Task.Factory.StartNew(async () =>\n     {\n         DateTime? lastTime = null;\n         while (true)\n         {\n             var datetime = DateTime.Now;\n             var count    = Interlocked.Exchange(ref this._frameCount, 0);\n             if (lastTime != null)\n             {\n                 var elapsed = datetime - lastTime.Value;\n                 var fps     = count / elapsed.TotalSeconds;\n                 await this.Dispatcher.InvokeAsync(() => { this._txt.Text = $\"FPS: {fps:0.0}\"; });\n             }\n\n             lastTime = datetime;\n             await Task.Delay(TimeSpan.FromSeconds(1));\n         }\n     });\n }\n```\n\n\nThe problem is that when run the application on windows 11, something strange happens. \nExpand on the problem:\n- On Windows 11, run the application with  visualsutdio debugger, the FPS is around 200.\n- On Windows 11, run the application without  vs debugger, the FPS is around 60. not only debug version but also release version.\n- On Windows 11, run the application without vs debugger, the FPS is around 60. the attached process to vs debugger, the FPS is around 200.\n- On Windows 10, the FPS is always around 200, not matter if run with or without  vs debugger.\n  \nNot only WPF application but also other types of  appliation.\n\nI can't understand why the FPS is different on Windows 11 when run with or without the vs debugger. some one can help me?\n\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/17ad1043-48d0-4d5a-bd33-d6c0db99c930\" />\n\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b5dde5ee-9f78-4d79-b84f-05123d63f272\" />","Url":"https://github.com/dotnet/wpf/issues/10326","RelatedDescription":"Open issue \"Windows 11 reduce the performance  when run without vs debugger\" (#10326)"},{"Id":"2804657416","IsPullRequest":false,"CreatedAt":"2025-01-22T15:13:57","Actor":"h3xds1nz","Number":"10324","RawContent":null,"Title":"Race condition in DependencyProperty registration mechanism","State":"open","Body":"### Description\n\nThere is a race condition in `DependencyProperty` registration mechanism which can cause a successful `DependencyProperty` registration for the same type, with the same name. What makes it worse is that this property will exist everywhere but in the property name map.\n\nWhile there are in total 3 attempts to synchronize the access around the collections, it may happen that this will simply not be enough.\n\nHere we check under a lock whether property exists:\n\nhttps://github.com/dotnet/wpf/blob/662423d3614158380ba77d710212ac6bb890f8ac/src/Microsoft.DotNet.Wpf/src/WindowsBase/System/Windows/DependencyProperty.cs#L253-L258\n\nAfterwards, under the same lock, `DependencyProperty` gets an unique index and is added into the list of registered properties. Before this lock is taken, it was already possible for another thread to pass the check for property name map registration successfully.\n\nhttps://github.com/dotnet/wpf/blob/662423d3614158380ba77d710212ac6bb890f8ac/src/Microsoft.DotNet.Wpf/src/WindowsBase/System/Windows/DependencyProperty.cs#L1060-L1065\n\nFinally, under the same lock, a property is written without checking whether it exists in the map. That means the previous one that was added into the map, the newer one can replace it (because it has managed to get past the `ContainsKey` check meanwhile.)\n\nhttps://github.com/dotnet/wpf/blob/662423d3614158380ba77d710212ac6bb890f8ac/src/Microsoft.DotNet.Wpf/src/WindowsBase/System/Windows/DependencyProperty.cs#L296-L299\n\n\n### Reproduction Steps\n\nAs with all race conditions, hit registration overloads for `DependencyProperty` with the right timing on multiple threads. It is sometimes replicable by running the current tests in a lucky order even. It is not easy but it ain't impossible.\n\n### Expected behavior\n\nA dependency property for a single `ownerType` with an identical name is not created and partially registered, exception is thrown instead.\n\n### Actual behavior\n\nA property is created, returned, the newer one replaces the older one in `PropertyFromName` and the older one ceases to exist in this map without any notice.\n\n### Regression?\n\nNo.\n\n### Known Workarounds\n\n_No response_\n\n### Impact\n\nIn the real application world/usage, given that developers follow guidelines of declaring dependency properties as `static readonly`, there's almost no impact as it requires a grave human error combined with great amount of luck to hit this one since most of the time this will actually properly fail with `ArgumentException` so you'd find out rather quickly you've made the mistake of declaring two dependency properties for the same type with the same name; then again, you may not always control all of your dependencies.\n\n### Configuration\n\n_No response_\n\n### Other information\n\nThis also applies to  `AddOwner` instance method  where it may cause a metadata override but that's way harder to trigger.\n\nTo be honest, I'm not sure this is worth fixing on its own as it might negatively impact perf but I think it's worth to have this issue existing.","Url":"https://github.com/dotnet/wpf/issues/10324","RelatedDescription":"Open issue \"Race condition in DependencyProperty registration mechanism\" (#10324)"},{"Id":"2804569371","IsPullRequest":false,"CreatedAt":"2025-01-22T14:39:45","Actor":"h3xds1nz","Number":"10323","RawContent":null,"Title":"DependencyProperty tests are ignoring multiple variance of ArgumentException","State":"open","Body":"### The issue\n\nIn the new tests from #8215 for `DependencyProperty`, there's a lot of re-use of data that are being passed to `Register` methods of `DependencyProperty`.\n\nThis would be fine on its own when testing for other things, but in tests specifically for `Register` methods, an `ArgumentException` can be thrown either because the property was already registered (`SR.PropertyAlreadyRegistered`) or when auto generation of default property metadata fails (`SR.DefaultValueAutoAssignFailed`).\n\nThis can cause flaky unit test results that do not clearly express where the problem is and require further debugging.\n\n### Failure example\n\nFor example, `Register_InvokeStringTypeTypeValidateFail_Throws` will fail if ran together with `Register_InvokeStringTypeType_Success` on the `callCount` assertion, because `Register` throws `ArgumentException`,\nhowever due to the fact that the property was previously registered, not because the actual test case fails.\n\n### Other information\n\nI will fix these myself by proper comparison of resource messages but I guess that will require first fixing the correct internals visibility between WindowsBase and WindowsBase.Tests or my VS is flaky at the moment. Assign to me please as I cannot without triage rights.","Url":"https://github.com/dotnet/wpf/issues/10323","RelatedDescription":"Open issue \"DependencyProperty tests are ignoring multiple variance of ArgumentException\" (#10323)"},{"Id":"2804520616","IsPullRequest":false,"CreatedAt":"2025-01-22T14:19:28","Actor":"stewartsims","Number":"10322","RawContent":null,"Title":"Problem with update KB5050009 affecting IIS web application (XPS Document images)","State":"open","Body":"### Description\n\nSince installing update KB5050009 on more than one machine we are now have a problem with a web application that runs in IIS. The application produces XPS documents from a XAML template that are then converted in PDFs.\n\nAny of the images that use network references as the source such as below are now not showing when the application produces the document:\n`<Image Source=\"\\\\localhost\\SharedFolder\\my-image.png\" />`\n\nRolling back the update fixes the problem, but Windows continues to 'want' to install the update.\n\nThis is remarkably similar to an issue from a few years ago created by another security update:\nhttps://github.com/dotnet/wpf/issues/7357\n\nThat is why I have reported this issue in this repository. If this isn't the best place to report this, please let me know where to submit the issue.\n\nHere are the packages used in the .cs file in the web application if it helps direct me to the right place to report the issue:\nusing System.Windows.Documents; \nusing System.Windows.Markup;\nusing System.Windows.Xps; \nusing System.Windows.Xps.Packaging; \n\nFor the PDF conversion we are using PdfSharp.Xps.XpsConverter but this is not the problem, it is definitely somehow the Windows update affecting the XPS Document functionality.\n\nApologies for the brief details, I can supply more information on how to recreate the issue.\n\n### Reproduction Steps\n\nProcess an XPS document in code on a Windows 11 machine after installing KB5050009. Note that any image with the following type of network path as an image source fails to display in the document:\n`<Image Source=\"\\\\localhost\\SharedFolder\\my-image.png\" />`\n\n### Expected behavior\n\nThe image should load from the network and display in the document.\n\n### Actual behavior\n\nThe image does not appear\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Impact\n\n_No response_\n\n### Configuration\n\nThis is an issue for 2 web applications - one targeting .NET Framework 4.8 and one targeting .NET Framework 4.5.2\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/wpf/issues/10322","RelatedDescription":"Open issue \"Problem with update KB5050009 affecting IIS web application (XPS Document images)\" (#10322)"},{"Id":"2802594882","IsPullRequest":true,"CreatedAt":"2025-01-22T05:59:07","Actor":"dotnet-maestro[bot]","Number":"10319","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:Coherency Updates)\n## Coherency Updates\n\nThe following updates ensure that dependencies with a *CoherentParentDependency*\nattribute were produced in a build used as input to the parent dependency's build.\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\n\n[DependencyUpdate]: <> (Begin)\n\n- **Coherency Updates**:\n  - **System.Reflection.MetadataLoadContext**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Windows.Extensions**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.Platforms**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Resources.Extensions**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Serialization.Formatters**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Ref**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.Registry.AccessControl**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.SystemEvents**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.CodeDom**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Configuration.ConfigurationManager**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Data.Odbc**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Data.OleDb**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.EventLog**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.PerformanceCounter**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.AccountManagement**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.Protocols**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Formats.Nrbf**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Packaging**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Ports**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Management**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Reflection.Context**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Caching**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Pkcs**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.ProtectedData**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Xml**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Permissions**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceModel.Syndication**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceProcess.ServiceController**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Speech**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Text.Encoding.CodePages**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.Threading.AccessControl**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition.Registration**: from 10.0.0-alpha.1.25068.1 to 10.0.0-alpha.1.25070.4 (parent: Microsoft.Private.Winforms)\n\n[DependencyUpdate]: <> (End)\n\n[marker]: <> (End:Coherency Updates)\n\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n## From https://github.com/dotnet/winforms\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\n- **Build**: 20250121.5\n- **Date Produced**: January 22, 2025 1:27:37 AM UTC\n- **Commit**: 51fffb84af97a5452fb5c7d33648551be7e057d5\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 10.0.0-alpha.1.25068.2 to 10.0.0-alpha.1.25071.5][3]\n  - **Microsoft.Private.Winforms**: [from 10.0.0-alpha.1.25068.2 to 10.0.0-alpha.1.25071.5][3]\n  - **System.Drawing.Common**: [from 10.0.0-alpha.1.25068.2 to 10.0.0-alpha.1.25071.5][3]\n\n[3]: https://github.com/dotnet/winforms/compare/1e44f01199...51fffb84af\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10319)\n\n\n","Url":"https://github.com/dotnet/wpf/pull/10319","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#10319)"},{"Id":"2803070102","IsPullRequest":true,"CreatedAt":"2025-01-22T00:10:22","Actor":"ThomasGoulet73","Number":"10321","RawContent":null,"Title":"[Cleanup] Use named arguments in PresentationCore","State":"open","Body":"Contributes to dotnet/wpf#10018\r\n\r\n## Description\r\nI replaced comments specifying an argument name with named arguments, which were introduced in C# 7. This improves readability and maintainability.\r\n\r\nMy changes are in 2 commits the first commit is automated changes using regexes and the second commit is manual changes where the comment is outdated or formatted differently than the parameter name.\r\n\r\n**Note: The compiled IL is identical.**\r\n(Except for some of the changes in Visual.cs where I renamed some parameters e -> args to better reflect the parameter and be able to remove the comment)\r\n\r\n## Customer Impact\r\nNone.\r\n\r\n## Regression\r\nNo.\r\n\r\n## Testing\r\nLocal build + validated IL.\r\n\r\n## Risk\r\nLow to none.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10321)","Url":"https://github.com/dotnet/wpf/pull/10321","RelatedDescription":"Open PR \"[Cleanup] Use named arguments in PresentationCore\" (#10321)"},{"Id":"2802848557","IsPullRequest":true,"CreatedAt":"2025-01-21T21:28:48","Actor":"h3xds1nz","Number":"10320","RawContent":null,"Title":"Use stack-allocated/inline arrays with fixed lengths in more places","State":"open","Body":"## Description\r\n\r\nFinding a few more places that are just low hanging fruit to swap from heap-allocated arrays to stack-allocated/inline-arrays.\r\n\r\n## Customer Impact\r\n\r\nImproved performance, decreased allocations.\r\n\r\n## Regression\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nLocal build.\r\n\r\n## Risk\r\n\r\nLow, the swaps are pretty much 1:1.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10320)","Url":"https://github.com/dotnet/wpf/pull/10320","RelatedDescription":"Open PR \"Use stack-allocated/inline arrays with fixed lengths in more places\" (#10320)"},{"Id":"2799435668","IsPullRequest":true,"CreatedAt":"2025-01-20T14:36:55","Actor":"himgoyalmicro","Number":"10317","RawContent":null,"Title":"Implemented shorthand syntax for ColumnDefinitions and RowDefinitions","State":"open","Body":"Implements #9802 \r\n\r\n## Description\r\n\r\nIt will simplify the definition syntax of RowDefinitions and ColumnDefinitions by:\r\n- Allowing rows and columns within a Grid to be defined by a collection that is delimited by comma and space\r\n- Creating a Typeconvertor for ColumnDefinitionCollection and RowDefinitionCollection so they can process String as its input.\r\n\r\nDecoupled RowDefinitionCollection and ColumnDefinitionCollection from the owner grid to ensure VS Hot Reload functionality remains intact.\r\n\r\n## Customer Impact\r\n\r\nThis feature will make Grid markup less verbose, allowing developers to create grids with simpler syntax.\r\n\r\n## Regression\r\n\r\nN/A\r\n\r\n## Testing\r\n\r\nLocal build pass\r\n\r\n## Risk\r\n\r\nLow\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10317)","Url":"https://github.com/dotnet/wpf/pull/10317","RelatedDescription":"Open PR \"Implemented shorthand syntax for ColumnDefinitions and RowDefinitions\" (#10317)"},{"Id":"2796814395","IsPullRequest":true,"CreatedAt":"2025-01-20T07:13:50","Actor":"Kuldeep-MS","Number":"10315","RawContent":null,"Title":"Updating the script to use new CDN","State":"closed","Body":"Fixes #10290\r\n\r\n## Description\r\n\r\nUpdating the script to use new CDN\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10315)","Url":"https://github.com/dotnet/wpf/pull/10315","RelatedDescription":"Closed or merged PR \"Updating the script to use new CDN\" (#10315)"},{"Id":"2802571956","IsPullRequest":false,"CreatedAt":"2025-01-19T17:02:56","Actor":"samanoudi","Number":"10318","RawContent":null,"Title":"OpenFileDialog / SaveFileDialog will shutdown WPF application with Error","State":"open","Body":"### Description\n\nhave an issue using OpenFileDialog/ SaveFileDialog in .NET 9.0 WPF Application. When shown the Dialog and hovering/clicking with the mouse on the Drive selection parts the WPF app will exit with the following error : \n\nThe program '[32780] WPFTESTS.exe' has exited with code 3221226505 (0xc0000409). \n\n\n\n![Image](https://github.com/user-attachments/assets/fdccb891-d8fa-4742-a305-78d5bd3778ea)\n\nNote: Using the Quicklinks, and Selecting Files is working without any Errors. Reverting the Application to Target .NET 8 the error will go away. This is calling method.\n\n### Reproduction Steps\n\nprivate void Button_Click(object sender, RoutedEventArgs e)\n{\n    OpenFileDialog f= new OpenFileDialog();\n    f.ShowDialog();\n}\n\n\n### Expected behavior\n\nOpening a FielDialog and selecting drives, folder and files\n\n### Actual behavior\n\nApp Shuts down with Error\n\n### Regression?\n\n.Net8\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nWindows 11\nNet9 var 9.102\n\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/wpf/issues/10318","RelatedDescription":"Open issue \"OpenFileDialog / SaveFileDialog will shutdown WPF application with Error\" (#10318)"},{"Id":"2797304951","IsPullRequest":false,"CreatedAt":"2025-01-19T00:16:15","Actor":"ApplePieCodes","Number":"10316","RawContent":null,"Title":"Implement a preprocessor for C# like JSX. CSX?","State":"open","Body":"I don't like databindings and tend to handle repetitive instances of a component in code. For example, I have code like this\n```C#\nforeach (ProjectReference project in projects.Projects)\n{\n    ListBoxItem item = new ListBoxItem();\n    StackPanel proj = new StackPanel();\n    proj.Orientation = Orientation.Horizontal;\n    proj.VerticalAlignment = VerticalAlignment.Center;\n    proj.HorizontalAlignment = HorizontalAlignment.Left;\n    Image templateImg = new Image();\n    templateImg.Width = 50;\n    templateImg.Height = 50;\n    templateImg.Margin = new Thickness(5, 5, 5, 5);\n    switch (project.Template)\n    {\n        case \"3D\":\n            templateImg.Source = new BitmapImage(new Uri(\"pack://application:,,,/Resources\\\\Images\\\\TemplateIcons\\\\3D.png\"));\n            break;\n        case \"3D+\":\n            templateImg.Source = new BitmapImage(new Uri(\"pack://application:,,,/Resources\\\\Images\\\\TemplateIcons\\\\3D_Plus.png\"));\n            break;\n    }\n    proj.Children.Add(templateImg);\n    item.Content = proj;\n    ListBox.Children.Add(item);\n}\n```\n\nWhat if I could simplify the code to something like this?\n```C#\nforeach (ProjectReference project in projects.Projects)\n{\n    BitmapImage imgSource;\n    switch (project.Template)\n    {\n        case \"3D\":\n            imgSource = new BitmapImage(new Uri(\"pack://application:,,,/Resources\\\\Images\\\\TemplateIcons\\\\3D.png\"));\n            break;\n        case \"3D+\":\n            imgSource = new BitmapImage(new Uri(\"pack://application:,,,/Resources\\\\Images\\\\TemplateIcons\\\\3D_Plus.png\"));\n            break;\n    }\n    ListBox.Children.Add(\n    <ListBoxItem>\n       <StackPanel Orientation=\"Horizontal\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Left\">\n            <Image Source=imgSource/>\n        </StackPanel>\n    </ListBoxItem>);\n```\n\nI feel like this would be a really helpful feature.","Url":"https://github.com/dotnet/wpf/issues/10316","RelatedDescription":"Open issue \"Implement a preprocessor for C# like JSX. CSX?\" (#10316)"},{"Id":"2796785576","IsPullRequest":true,"CreatedAt":"2025-01-18T06:07:45","Actor":"ThomasGoulet73","Number":"10314","RawContent":null,"Title":"Fix XamlDirective stack overflow exception","State":"open","Body":"Fixes dotnet/wpf#10313\r\n\r\n## Description\r\nI changed MemberReflector.UnknownReflector to be thread safe by initializing the property from the static constructor instead of doing the lazy initialization manually. The static constructor of a type is guaranteed to be called only once.\r\n\r\nSee the issue for an explanation of the bug and how it's hit.\r\n\r\n## Customer Impact\r\nCould fix a crash or weird behavior at runtime but it's very hard to hit (See issue).\r\n\r\n## Regression\r\nNo.\r\n\r\n## Testing\r\nUsed the repro in the issue which crashed before this PR and passes with this PR.\r\n\r\n## Risk\r\nLow.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10314)","Url":"https://github.com/dotnet/wpf/pull/10314","RelatedDescription":"Open PR \"Fix XamlDirective stack overflow exception\" (#10314)"}],"ResultType":"GitHubIssue"}},"RunOn":"2025-01-28T03:30:26.9501644Z","RunDurationInMilliseconds":440}