{"Data":{"GitHub":{"Issues":[{"Id":"1458807397","IsPullRequest":false,"CreatedAt":"2022-11-22T00:38:52","Actor":"innominate227","Number":"7307","RawContent":null,"Title":"XmlLanguage.GetEquivalentCulture doesn't match System.Globalization.CultureInfo","State":"open","Body":"* .NET Core Version: 5.0\r\n* Windows version: windows 10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n\r\n **Problem description:**\r\n_XmlLanguage.GetEquivalentCulture()_ no longer matches _new System.Globalization.CultureInfo_.\r\nWhen compiling with netcoreapp3.1 string1 and string2 in the code block below are the same.  With net5.0 they are different.\r\n```\r\nvar string1 = (-10).ToString(\"C2\", new System.Globalization.CultureInfo(\"en-US\"));\r\nvar string2 = (-10).ToString(\"C2\", System.Windows.Markup.XmlLanguage.GetLanguage(\"en-US\").GetEquivalentCulture());\r\n```\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nstring1 and string2 difer \r\n\r\n **Expected behavior:**\r\nstring1 and string2 are the same\r\n \r\n **Minimal repro:**\r\nSee description","Url":"https://github.com/dotnet/wpf/issues/7307","RelatedDescription":"Open issue \"XmlLanguage.GetEquivalentCulture doesn't match System.Globalization.CultureInfo\" (#7307)"},{"Id":"1454518011","IsPullRequest":true,"CreatedAt":"2022-11-21T05:57:17","Actor":"rchauhan18","Number":"7302","RawContent":null,"Title":"Pool image changes release/3.1","State":"closed","Body":"Pool image changes release/3.1\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7302)","Url":"https://github.com/dotnet/wpf/pull/7302","RelatedDescription":"Closed or merged PR \"Pool image changes release/3.1\" (#7302)"},{"Id":"1456464671","IsPullRequest":true,"CreatedAt":"2022-11-19T13:40:40","Actor":"dotnet-maestro[bot]","Number":"7306","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20221118.12\r\n- **Date Produced**: November 19, 2022 2:05:14 AM UTC\r\n- **Commit**: 1c5ce883192ffa043d53f796b41dbb057967f3ea\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 8.0.0-alpha.1.22567.9 to 8.0.0-alpha.1.22568.12][1]\r\n  - **Microsoft.Private.Winforms**: [from 8.0.0-alpha.1.22567.9 to 8.0.0-alpha.1.22568.12][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/1275c00...1c5ce88\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7306)","Url":"https://github.com/dotnet/wpf/pull/7306","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#7306)"},{"Id":"1455923141","IsPullRequest":true,"CreatedAt":"2022-11-18T22:39:17","Actor":"dotnet-maestro[bot]","Number":"7305","RawContent":null,"Title":"[release/5.0] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:879723a8-02ca-470e-70c0-08d83eef1915)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 879723a8-02ca-470e-70c0-08d83eef1915\r\n- **Build**: 20221007.2\r\n- **Date Produced**: October 7, 2022 4:31:51 PM UTC\r\n- **Commit**: 7171c5d1c8f203e0880c50dd181cd17959e79079\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 5.0.12-servicing.22205.5 to 5.0.12-servicing.22507.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC70a0cf8&targetVersion=GC7171c5d&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:879723a8-02ca-470e-70c0-08d83eef1915)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7305)","Url":"https://github.com/dotnet/wpf/pull/7305","RelatedDescription":"Open PR \"[release/5.0] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#7305)"},{"Id":"1455602944","IsPullRequest":false,"CreatedAt":"2022-11-18T18:26:05","Actor":"q812143836","Number":"7304","RawContent":null,"Title":"TextBox SelectAll Input Chinese crash","State":"open","Body":"* .NET Core Version: .NET6\r\n* Windows version: (`Windows10`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* \r\nProblem description:TextBox SelectAll Input Chinese crash\r\n\r\n``` xaml\r\n    <Grid>\r\n        <TextBox\r\n            Name=\"textEdit\"\r\n            AcceptsReturn=\"False\"\r\n            TextWrapping=\"NoWrap\" />\r\n    </Grid>\r\n```\r\n\r\n```C#\r\n      public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            //In actual business, sometimes I need to assign a string with a newline character\r\n            textEdit.Text = \"testasdfasdfgasd阿斯顿发斯蒂芬\\r\\n撒旦法师打发斯蒂芬\\r\\n阿斯顿发送到发送到\\r\\n\";\r\n        }\r\n```\r\n\r\nWhen there are multiple lines of strings, when using the Chinese input method to input, the selected text will crash directly\r\nI know setting AcceptsReturn=\"True\" UndoLimit!=\"0\" will fix this\r\nBut I need to use Enter event, so it doesn't work for me\r\nSo how should I solve this problem?\r\n\r\n![WPFTextBoxBug](https://user-images.githubusercontent.com/54973061/202776437-ce6ca4c1-85f5-498b-b1aa-5add250e1fea.gif)\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/7304","RelatedDescription":"Open issue \"TextBox SelectAll Input Chinese crash\" (#7304)"},{"Id":"1455096420","IsPullRequest":true,"CreatedAt":"2022-11-18T13:45:47","Actor":"dotnet-maestro[bot]","Number":"7303","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20221117.9\r\n- **Date Produced**: November 18, 2022 6:35:54 AM UTC\r\n- **Commit**: 1275c007063471acc6b7fd1bad5281ad0b823813\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 8.0.0-alpha.1.22566.3 to 8.0.0-alpha.1.22567.9][1]\r\n  - **Microsoft.Private.Winforms**: [from 8.0.0-alpha.1.22566.3 to 8.0.0-alpha.1.22567.9][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/14e5506...1275c00\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7303)","Url":"https://github.com/dotnet/wpf/pull/7303","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#7303)"},{"Id":"1453908698","IsPullRequest":false,"CreatedAt":"2022-11-17T20:00:32","Actor":"matthew-a-thomas","Number":"7301","RawContent":null,"Title":"Add Dispatcher.Created static event","State":"open","Body":"# The need\r\n\r\nIt's undesirable to instantiate a [`Dispatcher`](https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/WindowsBase/System/Windows/Threading/Dispatcher.cs) on a non-UI thread. Doing so is (usually) a bug and leads to several issues, such as:\r\n\r\n* Deadlock. Usually the dispatcher will not be running. But code may check if the current thread has a dispatcher and if so post a callback to it and wait to proceed until the callback has executed. Since the dispatcher is not running the callback never executes\r\n* Memory leak. Usually the dispatcher will not be running. But code may post callbacks to it. Those callbacks contain state which is strongly-referenced by the dispatcher. That state graph will not be garbage collected until the thread ends\r\n\r\nHowever it is extremely easy to instantiate a `Dispatcher` on a non-UI thread. Broadly speaking there are two general ways this tends to happen:\r\n\r\n* Access `Dispatcher.CurrentDispatcher`\r\n* Instantiate anything that derives from `DispatcherObject`\r\n\r\nIt is usually possible for the disciplined solo programmer to avoid these issues in a small project. But sometimes people forget, and other times these issues are subtle and unexpected (e.g. I just recently learned that simply calling `CommandManager.InvalidateRequerySuggested()` creates a dispatcher). So these issues tend to crop up in larger projects with many developers. As a result it's virtually guaranteed that the software project will periodically encounter deadlocks, memory leaks, and other unexpected behavior.\r\n\r\n# A solution\r\n\r\nI'd like to solve this problem by giving developers a proactive way to know when a dispatcher is instantiated. Developers can write `#if DEBUG` code that subscribes to the proposed event and inspects `Thread.CurrentThread` in the handler, and then log the stack trace when it's an undesirable thread. Then developers will know _exactly_ where the offending code is and will be able to solve it promptly.\r\n\r\n# Alternatives\r\n\r\nI think this would be better than the alternatives. I only know of a few alternatives (I'm open to hearing of more). In increasing order of hackiness:\r\n\r\n1. Use the Win32 API to be notified after a Win32 window is created. I assume such a hook would execute asynchronously, so this would really be no better than # 2, which is...\r\n1. Use reflection to poll `Dispatcher._dispatchers` (while under the `Dispatcher._globalLock` guard of course)\r\n1. Add a hook to intercept the call to the user32.dll > CreateWindowEx Win32 function call that happens while instantiating a dispatcher\r\n1. Edit the CLR method descriptor for `Dispatcher.ctor` or `Dispatcher.get_CurrentDispatcher` at runtime to point to my own hacked up method that does the same thing as this proposal but in a much messier way\r\n1. Run a fork of WPF\r\n\r\n# The proposal\r\n\r\n```csharp\r\npublic sealed class Dispatcher\r\n{\r\n  public static event DispatcherCreatedEventHandler? Created; // Add this event\r\n\r\n  public static Dispatcher CurrentDispatcher\r\n  {\r\n    get\r\n    {\r\n      Dispatcher currentDispatcher = FromThread(Thread.CurrentThread);;\r\n      if(currentDispatcher == null)\r\n      {\r\n        currentDispatcher = new Dispatcher();\r\n\r\n        //// The following line is new ////\r\n        Created?.Invoke();\r\n        //// The above line is new ////\r\n\r\n      }\r\n      return currentDispatcher;\r\n    }\r\n  }\r\n}\r\n\r\n// Add this delegate\r\npublic delegate void DispatcherCreatedEventHander();\r\n```\r\n\r\n\r\n\r\n<!-- Read https://github.com/dotnet/wpf/blob/main/Documentation/issue-guide.md -->\r\n","Url":"https://github.com/dotnet/wpf/issues/7301","RelatedDescription":"Open issue \"Add Dispatcher.Created static event\" (#7301)"},{"Id":"1453611847","IsPullRequest":false,"CreatedAt":"2022-11-17T16:13:48","Actor":"czdietrich","Number":"7300","RawContent":null,"Title":"DataGrid crash in Automation code","State":"open","Body":"* .NET Core Version: 6.0\r\n* Windows version: Windows 10 21H2 \r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\nChanging the columns of a DataGrid can crash the application while editing cells.\r\n \r\n **Actual behavior:**\r\n<details>\r\n<summary>The application crashes:</summary>\r\n System.ArgumentNullException: Value cannot be null. (Parameter 'element')\r\n   at System.Windows.Automation.Peers.UIElementAutomationPeer.FromElement(UIElement element)\r\n   at System.Windows.Controls.DataGrid.CellAutomationValueHolder.TrackValue()\r\n   at System.Windows.Controls.DataGrid.ReleaseCellAutomationValueHolders()\r\n   at System.Windows.Controls.DataGrid.OnExecutedCommitEdit(ExecutedRoutedEventArgs e)\r\n   at System.Windows.Controls.DataGrid.OnExecutedCommitEdit(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.Input.CommandBinding.OnExecuted(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.Input.CommandManager.FindCommandBinding(Object sender, RoutedEventArgs e, ICommand command, Boolean execute)\r\n   at System.Windows.Input.CommandManager.OnExecuted(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.UIElement.OnExecutedThunk(Object sender, ExecutedRoutedEventArgs e)\r\n   at System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(Delegate genericHandler, Object target)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs args, Boolean trusted)\r\n   at System.Windows.Input.RoutedCommand.ExecuteImpl(Object parameter, IInputElement target, Boolean userInitiated)\r\n   at System.Windows.Input.RoutedCommand.Execute(Object parameter, IInputElement target)\r\n   at System.Windows.Controls.DataGrid.EndEdit(RoutedCommand command, DataGridCell cellContainer, DataGridEditingUnit editingUnit, Boolean exitEditMode)\r\n   at System.Windows.Controls.DataGrid.OnCurrentCellChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n   at System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs e)\r\n   at System.Windows.FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs e)\r\n   at System.Windows.DependencyObject.NotifyPropertyChange(DependencyPropertyChangedEventArgs args)\r\n   at System.Windows.DependencyObject.UpdateEffectiveValue(EntryIndex entryIndex, DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry oldEntry, EffectiveValueEntry& newEntry, Boolean coerceWithDeferredReference, Boolean coerceWithCurrentValue, OperationType operationType)\r\n   at System.Windows.DependencyObject.SetValueCommon(DependencyProperty dp, Object value, PropertyMetadata metadata, Boolean coerceWithDeferredReference, Boolean coerceWithCurrentValue, OperationType operationType, Boolean isInternal)\r\n   at System.Windows.DependencyObject.SetCurrentValueInternal(DependencyProperty dp, Object value)\r\n   at System.Windows.Controls.DataGrid.set_CurrentCellContainer(DataGridCell value)\r\n   at System.Windows.Controls.DataGrid.set_FocusedCell(DataGridCell value)\r\n   at System.Windows.Controls.DataGridCell.OnAnyGotFocus(Object sender, RoutedEventArgs e)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs e)\r\n   at System.Windows.UIElement.OnGotFocus(RoutedEventArgs e)\r\n   at System.Windows.FrameworkElement.OnGotFocus(RoutedEventArgs e)\r\n   at System.Windows.UIElement.IsFocused_Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n   at System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs e)\r\n   at System.Windows.FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs e)\r\n   at System.Windows.DependencyObject.NotifyPropertyChange(DependencyPropertyChangedEventArgs args)\r\n   at System.Windows.DependencyObject.UpdateEffectiveValue(EntryIndex entryIndex, DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry oldEntry, EffectiveValueEntry& newEntry, Boolean coerceWithDeferredReference, Boolean coerceWithCurrentValue, OperationType operationType)\r\n   at System.Windows.DependencyObject.SetValueCommon(DependencyProperty dp, Object value, PropertyMetadata metadata, Boolean coerceWithDeferredReference, Boolean coerceWithCurrentValue, OperationType operationType, Boolean isInternal)\r\n   at System.Windows.DependencyObject.SetValue(DependencyPropertyKey key, Object value)\r\n   at System.Windows.Input.FocusManager.OnFocusedElementChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n   at System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs e)\r\n   at System.Windows.FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs e)\r\n   at System.Windows.DependencyObject.NotifyPropertyChange(DependencyPropertyChangedEventArgs args)\r\n   at System.Windows.DependencyObject.UpdateEffectiveValue(EntryIndex entryIndex, DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry oldEntry, EffectiveValueEntry& newEntry, Boolean coerceWithDeferredReference, Boolean coerceWithCurrentValue, OperationType operationType)\r\n   at System.Windows.DependencyObject.SetValueCommon(DependencyProperty dp, Object value, PropertyMetadata metadata, Boolean coerceWithDeferredReference, Boolean coerceWithCurrentValue, OperationType operationType, Boolean isInternal)\r\n   at System.Windows.DependencyObject.SetValue(DependencyProperty dp, Object value)\r\n   at System.Windows.Input.FocusManager.SetFocusedElement(DependencyObject element, IInputElement value)\r\n   at System.Windows.Input.KeyboardNavigation.UpdateFocusedElement(DependencyObject focusTarget)\r\n   at System.Windows.FrameworkElement.OnGotKeyboardFocus(Object sender, KeyboardFocusChangedEventArgs e)\r\n   at System.Windows.Input.KeyboardFocusChangedEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\n   at System.Windows.Input.KeyboardDevice.ChangeFocus(DependencyObject focus, Int32 timestamp)\r\n   at System.Windows.Input.KeyboardDevice.TryChangeFocus(DependencyObject newFocus, IKeyboardInputProvider keyboardInputProvider, Boolean askOld, Boolean askNew, Boolean forceToNullIfFailed)\r\n   at System.Windows.Input.KeyboardDevice.Focus(DependencyObject focus, Boolean askOld, Boolean askNew, Boolean forceToNullIfFailed)\r\n   at System.Windows.Input.KeyboardDevice.Focus(IInputElement element)\r\n   at System.Windows.UIElement.Focus()\r\n   at System.Windows.Controls.DataGridCell.OnAnyMouseLeftButtonDown(MouseButtonEventArgs e)\r\n   at System.Windows.Controls.DataGridCell.OnAnyMouseLeftButtonDownThunk(Object sender, MouseButtonEventArgs e)\r\n   at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.ReRaiseEventAs(DependencyObject sender, RoutedEventArgs args, RoutedEvent newEvent)\r\n   at System.Windows.UIElement.OnMouseDownThunk(Object sender, MouseButtonEventArgs e)\r\n   at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\n   at System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)\r\n   at System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawMouseActions actions, Int32 x, Int32 y, Int32 wheel)\r\n   at System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr hwnd, WindowMessage msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run()\r\n   at TestDataGridEditing.App.Main()\r\n\r\n</details>\r\n\r\n **Expected behavior:**\r\nThe application does not crash.\r\n \r\n **Minimal repro:**\r\n1. Clone the sample repo: https://github.com/czdietrich/DataGridAutomationCrash.git\r\n2. Open the project and run it\r\n3. Open and close the ComboBox (Opening a popup starts Automation)\r\n4. Select the first cell and enter '1'\r\n5. Select the second cell in the first row\r\n6. Press F5 (This refreshes the UI and rebuilds the DataGrid columns)\r\n7. Select again the second cell in the first row\r\n8. Select any cell in the second row\r\n\r\n![1644_TestDataGridEditing_9msNvMrdH1](https://user-images.githubusercontent.com/43068830/202498241-7b1cb5bc-7791-4a6b-a93c-c2620246f581.gif)\r\n\r\n**Details:**\r\nInternally the DataGrid keeps track of edited cells within a row to raise Automation events.\r\nThose references are not reset when the columns change, so there are references with invalid column definitions.\r\nLater when the DataGrid tries to raise these Automation events, it will crash due to these invalid column references.\r\n\r\nRebuilding the columns using a key does not raise any focus change, so the DataGrid row keeps the focus.","Url":"https://github.com/dotnet/wpf/issues/7300","RelatedDescription":"Open issue \"DataGrid crash in Automation code\" (#7300)"},{"Id":"1453543881","IsPullRequest":false,"CreatedAt":"2022-11-17T15:29:24","Actor":"zlatanov","Number":"7299","RawContent":null,"Title":"Grid isn't calculating row height correctly in some cases when RowSpan is used","State":"open","Body":"* .NET Core Version: All\r\n* Windows version: 11\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\nThe following XAML:\r\n```xaml\r\n<Grid Width=\"400\" Background=\"Black\">\r\n    <Grid.ColumnDefinitions>\r\n        <ColumnDefinition />\r\n        <ColumnDefinition Width=\"100\" />\r\n        <ColumnDefinition Width=\"100\" />\r\n    </Grid.ColumnDefinitions>\r\n    <Grid.RowDefinitions>\r\n        <RowDefinition Height=\"Auto\" />\r\n        <RowDefinition Height=\"Auto\" />\r\n    </Grid.RowDefinitions>\r\n    <Border Grid.ColumnSpan=\"2\"\r\n            Height=\"100\"\r\n            Background=\"Green\" />\r\n\r\n    <Border Grid.RowSpan=\"2\"\r\n            Grid.Column=\"2\"\r\n            Height=\"200\"\r\n            Background=\"Aquamarine\" />\r\n\r\n    <Border Grid.Row=\"1\"\r\n            Height=\"100\"\r\n            Background=\"Orange\" />\r\n\r\n    <Border Grid.Row=\"1\"\r\n            Grid.Column=\"1\"\r\n            Height=\"100\"\r\n            Background=\"Red\" />\r\n</Grid>\r\n```\r\n\r\nshould render two rows, each with height of 100 because each element has a height of 100, with exception of the one that spans 2 rows, which has a height of 200.\r\n\r\nHowever, the result is the following:\r\n![image](https://user-images.githubusercontent.com/2470527/202486566-32eea7c6-0b6d-4766-b760-66a376b60878.png)\r\n\r\nThe second row is exactly 1.5 times the height it should be.\r\n\r\n **Expected behavior:**\r\n![image](https://user-images.githubusercontent.com/2470527/202486980-e05535ca-4646-4463-9bff-eea7485c3e10.png)\r\n\r\nIf we insert the following:\r\n```xaml\r\n<Border Grid.Column=\"1\" Height=\"100\" />\r\n```\r\n\r\nThen the grid is rendered as expected.\r\n\r\nAn interesting observation is that if we set explicit width for the first column, which in my example has 1* width, then the problem disappears.","Url":"https://github.com/dotnet/wpf/issues/7299","RelatedDescription":"Open issue \"Grid isn't calculating row height correctly in some cases when RowSpan is used\" (#7299)"},{"Id":"1453320655","IsPullRequest":true,"CreatedAt":"2022-11-17T13:45:27","Actor":"dotnet-maestro[bot]","Number":"7298","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20221116.3\r\n- **Date Produced**: November 16, 2022 10:50:53 PM UTC\r\n- **Commit**: 14e550693bc3afce8440e18136f58c01a76f11da\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 8.0.0-alpha.1.22565.6 to 8.0.0-alpha.1.22566.3][1]\r\n  - **Microsoft.Private.Winforms**: [from 8.0.0-alpha.1.22565.6 to 8.0.0-alpha.1.22566.3][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/727e0ad...14e5506\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7298)","Url":"https://github.com/dotnet/wpf/pull/7298","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#7298)"},{"Id":"1453101025","IsPullRequest":true,"CreatedAt":"2022-11-17T10:30:43","Actor":"singhashish-wpf","Number":"7297","RawContent":null,"Title":"Surround Keyboard Datagrid F3 sort with switch","State":"open","Body":"Fixes #7288 \r\n\r\nMain PR https://github.com/dotnet/wpf/pull/6873\r\n\r\n## Description\r\nF3 sort on Datagrid was causing compatibility issues. Surrounding the F3 datagrid sort feature around an opt Out switch.\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\n\r\n## Customer Impact\r\nCustomers can run into problem with F3 handling in datagrid scenarios. Unintended sorting rather than a specifically expected behaviour.\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\nYes\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\nLocal testing by sample datagrid app.\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\nLow\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7297)","Url":"https://github.com/dotnet/wpf/pull/7297","RelatedDescription":"Open PR \"Surround Keyboard Datagrid F3 sort with switch\" (#7297)"},{"Id":"1453011653","IsPullRequest":true,"CreatedAt":"2022-11-17T09:32:54","Actor":"Kuldeep-MS","Number":"7296","RawContent":null,"Title":"Fixing *-defs width calculation","State":"open","Body":"Fixes #5231\r\n\r\n## Description\r\n\r\nA calculation to see how much width has been allocated to *-columns produces a result that's less than the available width by a tiny amount, due to floating-point drift. This causes a loop to continue when it shouldn't, leading to infinite loop. In such case adding that tiny remaining width to a column resolved as \"min\".\r\n\r\n## Customer Impact\r\n\r\nVS XAML Designer freezes when resizing the column width.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nIn progress\r\n\r\n## Risk\r\n\r\nNA\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7296)","Url":"https://github.com/dotnet/wpf/pull/7296","RelatedDescription":"Open PR \"Fixing *-defs width calculation\" (#7296)"},{"Id":"1452985935","IsPullRequest":true,"CreatedAt":"2022-11-17T09:15:03","Actor":"Kuldeep-MS","Number":"7295","RawContent":null,"Title":"Adding static constructor to StyleHelper class","State":"open","Body":"Fixes #7205\r\nFixes #7291\r\n\r\n## Description\r\n\r\nAdding static constructor to StyleHelper class to do the required initialization i.e. registering the \"alternative Expression storage\". Also, adding check to \"RegisterAlternateExpressionStorage\" function to avoid re-registration being called.\r\n\r\n## Customer Impact\r\n\r\nAn attempt to call the BindingOperations.GetBindingExpression method in .NET 7.0 leads to Null Reference Exception.\r\n\r\n## Regression\r\n\r\nYes\r\n\r\n## Testing\r\n\r\nIn progress\r\n\r\n## Risk\r\n\r\nNA\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7295)","Url":"https://github.com/dotnet/wpf/pull/7295","RelatedDescription":"Open PR \"Adding static constructor to StyleHelper class\" (#7295)"},{"Id":"1452778638","IsPullRequest":false,"CreatedAt":"2022-11-17T06:17:32","Actor":"ronak-k-p","Number":"7294","RawContent":null,"Title":"Narrator narrates TabItem twice when tab changed with navigation keys (arrow keys) ","State":"open","Body":"* .NET Framework Version: 4.8 (Any)\r\n* Windows version: Windows 10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\n Narrator narrates TabItem header twice when tab changed with navigation keys (arrow keys) \r\n \"**Tabitem2HeaderText** 2 of 2 selected \" narrates twice.\r\n\r\n **Minimal repro:**\r\n [1] Create blank WPF app\r\n [2] Add TabControl on MainWindow & Add two TabItems into TabControl. (Set their headers \"TabItem1\" & \"TabItem2\")\r\n [3] Run application  & Press Tab key to set focus on TabItem1\r\n [4] Run Narrator from windows & Switch back to our sample application.\r\n [5] When Tab key Focus on TabItem move next TabItem press Left/Right arrow key.\r\n [6] Notice Narrator narrates twice for selected TabItem. \r\n","Url":"https://github.com/dotnet/wpf/issues/7294","RelatedDescription":"Open issue \"Narrator narrates TabItem twice when tab changed with navigation keys (arrow keys) \" (#7294)"},{"Id":"1451577419","IsPullRequest":true,"CreatedAt":"2022-11-16T13:45:46","Actor":"dotnet-maestro[bot]","Number":"7293","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20221115.6\r\n- **Date Produced**: November 16, 2022 6:35:36 AM UTC\r\n- **Commit**: 727e0adf3b3c21deb3a9e3f56c8a1c6cf59e8a91\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 8.0.0-alpha.1.22564.12 to 8.0.0-alpha.1.22565.6][1]\r\n  - **Microsoft.Private.Winforms**: [from 8.0.0-alpha.1.22564.12 to 8.0.0-alpha.1.22565.6][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/8e6fc44...727e0ad\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7293)","Url":"https://github.com/dotnet/wpf/pull/7293","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#7293)"},{"Id":"1451409360","IsPullRequest":true,"CreatedAt":"2022-11-16T11:26:53","Actor":"rchauhan18","Number":"7292","RawContent":null,"Title":"Fix build Release/3.0","State":"open","Body":"Fix build and updated pool images Release/3.0\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7292)","Url":"https://github.com/dotnet/wpf/pull/7292","RelatedDescription":"Open PR \"Fix build Release/3.0\" (#7292)"},{"Id":"1449761935","IsPullRequest":true,"CreatedAt":"2022-11-15T13:46:00","Actor":"dotnet-maestro[bot]","Number":"7290","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20221114.12\r\n- **Date Produced**: November 15, 2022 4:11:29 AM UTC\r\n- **Commit**: 8e6fc4437db278201e5b610351389010893afdf9\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 8.0.0-alpha.1.22563.6 to 8.0.0-alpha.1.22564.12][1]\r\n  - **Microsoft.Private.Winforms**: [from 8.0.0-alpha.1.22563.6 to 8.0.0-alpha.1.22564.12][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/7f0a54d...8e6fc44\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7290)","Url":"https://github.com/dotnet/wpf/pull/7290","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#7290)"},{"Id":"1449916968","IsPullRequest":false,"CreatedAt":"2022-11-15T12:07:42","Actor":"danielkaczmarek","Number":"7291","RawContent":null,"Title":"In the .net7 CollectionViewSource has a different behaviour than in the .net6","State":"open","Body":"Basically, in .net7 when you run the attached project and press the button, it will display a list of items. If you run the unit test it will throw an exception on this line \r\n\r\n` EntityCollectionView = new CollectionViewSource { Source = Entities }.View;`\r\n\r\nBecause the View is null.\r\n\r\nIf you change the TargetFramework to net6 the test passes because View contains an instance. \r\n\r\nIs this a bug?\r\n\r\nRegards\r\nDaniel Kaczmarek\r\n\r\n[WpfApp2.zip](https://github.com/dotnet/core/files/10012439/WpfApp2.zip)\r\n","Url":"https://github.com/dotnet/wpf/issues/7291","RelatedDescription":"Open issue \"In the .net7 CollectionViewSource has a different behaviour than in the .net6\" (#7291)"},{"Id":"1449091356","IsPullRequest":false,"CreatedAt":"2022-11-15T03:15:31","Actor":"kitgrose","Number":"7289","RawContent":null,"Title":"Using embedded font resources leaks memory","State":"open","Body":"* .NET Core Version: 7.0\r\n* Windows version: Windows 10 version 21H2 (OS Build 19044.2251)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n \r\n **Problem description:**\r\nWhen a custom font is loaded as a Resource and used in the application, the application slowly leaks memory via an `UnmanagedMemoryStream` object that grows apparently without bounds, regardless of GC collection.\r\n\r\nThe issue does not appear to affect fonts with Build Action set to Content (although publishing fonts this way may be against their respective EULAs).\r\n\r\n **Actual behavior:**\r\nWhen a text block is rapidly changed between a series of embedded fonts, Visual Studio's Diagnostic Tools shows a `UnmanagedMemoryStream` object growing by approximately 35–40 KB per second.\r\n \r\n **Expected behavior:**\r\nOnce all the custom fonts are loaded, changing the `FontFamily` property of a `TextBlock` shouldn't increase memory usage at all.\r\n \r\n **Minimal repro:**\r\n1. Create a new WPF project (the issue can be reproduced in .NET 7.0 and .NET Framework v4.8 at least, but [I can find references to it online from earlier][1] referencing now-unavailable MS Connect posts).\r\n2. Add some typefaces to the project (I've got a combination of OTF and TTF fonts in my test app), and mark their Build Action as `Resource`.\r\n3. Add those fonts to your application resources in `App.xaml` (exact code will differ based on the fonts you choose):\r\n    ```xaml\r\n    <Application.Resources>\r\n      <FontFamily x:Key=\"Flama\">./Fonts/#Flama</FontFamily>\r\n      <FontFamily x:Key=\"FlamaMedium\">./Fonts/#Flama Medium</FontFamily>\r\n      <FontFamily x:Key=\"IntroCaps\">./Fonts/#Intro Caps</FontFamily>\r\n      <FontFamily x:Key=\"IntroBlackInline\">./Fonts/#Intro Inline Caps</FontFamily>\r\n      <FontFamily x:Key=\"Pacifico\">./Fonts/#Pacifico</FontFamily>\r\n    </Application.Resources>\r\n    ```\r\n4. In `MainWindow.xaml`, create a `TextBlock`:\r\n    ```xaml\r\n    <TextBlock x:Name=\"TestBlock\" FontSize=\"48\">Test block</TextBlock>\r\n    ```\r\n5. Add a new `Loaded` event handler for `MainWindow` that cycles through your embedded fonts to use as the text block's font family as fast as possible:\r\n    ```csharp\r\n    private void MainWindow_Loaded(object sender, RoutedEventArgs e)\r\n    {\r\n        var resourceEnumerator = Application.Current.Resources.GetEnumerator();\r\n        var fontChanger = new DispatcherTimer();\r\n        fontChanger.Tick += (s, e) =>\r\n        {\r\n            if (!resourceEnumerator.MoveNext())\r\n            {\r\n                resourceEnumerator.Reset();\r\n                resourceEnumerator.MoveNext();\r\n            }\r\n\r\n            if (resourceEnumerator.Value is FontFamily fontFamily)\r\n            {\r\n                TestBlock.FontFamily = fontFamily;\r\n            }\r\n        };\r\n        fontChanger.Start();\r\n    }\r\n    ```\r\n6. Run the app and observe the memory usage steadily increasing over time. Diagnostic tools will show the largest culprit for the growth being the `UnmanagedMemoryStream`:\r\n    <img width=\"1132\" alt=\"wpf-font-memory-leak\" src=\"https://user-images.githubusercontent.com/165977/201817300-5c033e99-9619-460f-b6ac-11f61c6af3c9.png\">\r\n7. Change the font resources to have a Build Action of `Content`, and set the Copy to Output Directory property to `Copy if newer`, and re-run the test.\r\n8. Observe that now the memory usage does not appear to grow over time.\r\n\r\n  [1]: https://stackoverflow.com/a/31452979/181495","Url":"https://github.com/dotnet/wpf/issues/7289","RelatedDescription":"Open issue \"Using embedded font resources leaks memory\" (#7289)"},{"Id":"1448921444","IsPullRequest":false,"CreatedAt":"2022-11-14T23:27:26","Actor":"RajeshAKumar","Number":"7288","RawContent":null,"Title":"Wpf DataGrid in .NET7 takes away F3 and automatically sorts. - Breaking change.","State":"open","Body":"Our application uses Wpf DataGrid and was working fine till .NET 6.0\r\nWhen upgraded to .NET 7, press F3 the application expectation is to take to Main window's Search box, but the grid takes over and does the sort of a column where F3 was pressed.\r\n\r\nThis breaks the functionality.\r\n\r\nIs there a way to disable this?","Url":"https://github.com/dotnet/wpf/issues/7288","RelatedDescription":"Open issue \"Wpf DataGrid in .NET7 takes away F3 and automatically sorts. - Breaking change.\" (#7288)"},{"Id":"1448762076","IsPullRequest":true,"CreatedAt":"2022-11-14T21:44:04","Actor":"dotnet-maestro[bot]","Number":"7287","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:64ecc23e-064a-456b-da03-08d961c27f17)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 64ecc23e-064a-456b-da03-08d961c27f17\r\n- **Build**: 20221111.1\r\n- **Date Produced**: November 11, 2022 6:08:35 PM UTC\r\n- **Commit**: 0967701e5527a1be21d9473821077c3f4be7f9dc\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat**: [from 6.0.0-beta.22560.1 to 6.0.0-beta.22561.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.22560.1 to 6.0.0-beta.22561.1][1]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 6.0.0-beta.22560.1 to 6.0.0-beta.22561.1][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 6.0.0-beta.22560.1 to 6.0.0-beta.22561.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.22560.1 to 6.0.0-beta.22561.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/a0fd54b...0967701\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:64ecc23e-064a-456b-da03-08d961c27f17)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7287)","Url":"https://github.com/dotnet/wpf/pull/7287","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#7287)"},{"Id":"1448559869","IsPullRequest":true,"CreatedAt":"2022-11-14T21:05:38","Actor":"dotnet-maestro[bot]","Number":"7285","RawContent":null,"Title":"[release/7.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0 to 7.0.0 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-rtm.22518.5 to 7.0.0-rtm.22513.5 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n[marker]: <> (Begin:e96ced2d-df2c-460a-8163-08da7ef6284d)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: e96ced2d-df2c-460a-8163-08da7ef6284d\r\n- **Build**: 20221111.2\r\n- **Date Produced**: November 11, 2022 6:35:12 PM UTC\r\n- **Commit**: f36ea231c234560514ede4c2747897a737ced28f\r\n- **Branch**: refs/heads/release/7.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22558.4 to 7.0.0-beta.22561.2][3]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22558.4 to 7.0.0-beta.22561.2][3]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22558.4 to 7.0.0-beta.22561.2][3]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22558.4 to 7.0.0-beta.22561.2][3]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22558.4 to 7.0.0-beta.22561.2][3]\r\n  - **System.CodeDom**: [from 7.0.0 to 7.0.0][4]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0 to 7.0.0][4]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0 to 7.0.0][4]\r\n  - **System.DirectoryServices**: [from 7.0.0 to 7.0.0][4]\r\n  - **System.Drawing.Common**: [from 7.0.0 to 7.0.0][4]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0 to 7.0.0][4]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0 to 7.0.0][4]\r\n  - **System.Security.Permissions**: [from 7.0.0 to 7.0.0][4]\r\n  - **System.Windows.Extensions**: [from 7.0.0 to 7.0.0][4]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0 to 7.0.0][4]\r\n  - **System.IO.Packaging**: [from 7.0.0 to 7.0.0][4]\r\n  - **System.Resources.Extensions**: [from 7.0.0 to 7.0.0][4]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0 to 7.0.0][4]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0 to 7.0.0][4]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-rtm.22518.5 to 7.0.0-rtm.22513.5][4]\r\n\r\n[3]: https://github.com/dotnet/arcade/compare/3f3c360...f36ea23\r\n[4]: https://github.com/dotnet/runtime/compare/d099f07...075e74e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:e96ced2d-df2c-460a-8163-08da7ef6284d)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7285)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/7285","RelatedDescription":"Closed or merged PR \"[release/7.0] Update dependencies from dotnet/arcade\" (#7285)"},{"Id":"1448567196","IsPullRequest":true,"CreatedAt":"2022-11-14T19:15:05","Actor":"dotnet-maestro[bot]","Number":"7286","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:64ecc23e-064a-456b-da03-08d961c27f17)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 64ecc23e-064a-456b-da03-08d961c27f17\r\n- **Build**: 20221110.1\r\n- **Date Produced**: November 11, 2022 4:38:15 PM UTC\r\n- **Commit**: a0fd54b5c2dc3e23aa8466bd4638462df4303633\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat**: [from 6.0.0-beta.22558.7 to 6.0.0-beta.22560.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.22558.7 to 6.0.0-beta.22560.1][1]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 6.0.0-beta.22558.7 to 6.0.0-beta.22560.1][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 6.0.0-beta.22558.7 to 6.0.0-beta.22560.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.22558.7 to 6.0.0-beta.22560.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/a7773a9...a0fd54b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:64ecc23e-064a-456b-da03-08d961c27f17)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7286)","Url":"https://github.com/dotnet/wpf/pull/7286","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#7286)"},{"Id":"1448394067","IsPullRequest":false,"CreatedAt":"2022-11-14T16:43:09","Actor":"czdietrich","Number":"7284","RawContent":null,"Title":"File conflict with System.Diagnostics.EventLog.Messages.dll","State":"open","Body":"* .NET Version: 6.0.11\r\n \r\n **Problem description:**\r\nSelf-contained WPF apps seem to include a wrong version of `System.Diagnostics.EventLog.Messages.dll` in the output directory.\r\nStarting with .NET 6.0.9 the runtime for desktop applications now contains the `System.Diagnostics.EventLog.Messages.dll`.\r\nThat DLL is binary different to the one used by the ASP.NET Core runtime.\r\n\r\n \r\n **Actual behavior:**\r\nWhen a project uses both, the desktop runtime and the ASP.NET Core runtime, it randomly picks one of those DLLs.\r\n \r\n **Expected behavior:**\r\nThe desktop runtime and the ASP.NET Core runtime should contain binary identical native DLLs to prevent any file conflicts. \r\n\r\n **Minimal repro:**\r\n1. Install the latest .NET 6 SDK (currently 6.0.403)\r\n2. Create a new WPF project (`dotnet new wpf`)\r\n3. Add a reference to the ASP.NET Core framework to the .csproj file (`<ItemGroup><FrameworkReference Include=\"Microsoft.AspNetCore.App\" /></ItemGroup>`)\r\n4. Publish the app (`dotnet publish --self-contained true -r win-x64`)\r\n5. Compare the used runtime assets. They are different: \r\n`~\\.nuget\\packages\\microsoft.aspnetcore.app.runtime.win-x64\\6.0.11\\runtimes\\win-x64\\lib\\net6.0\\System.Diagnostics.EventLog.Messages.dll`\r\n`~\\.nuget\\packages\\microsoft.windowsdesktop.app.runtime.win-x64\\6.0.11\\runtimes\\win-x64\\lib\\net6.0\\System.Diagnostics.EventLog.Messages.dll`\r\n\r\nComparing both files using Beyond Compare hints that the DLL from the desktop runtime seems to be x86 even though win-x64 is used:\r\n![image](https://user-images.githubusercontent.com/43068830/201714969-313414ca-f724-4e2e-85d7-e4968c5a908f.png)\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/7284","RelatedDescription":"Open issue \"File conflict with System.Diagnostics.EventLog.Messages.dll\" (#7284)"},{"Id":"1448210153","IsPullRequest":false,"CreatedAt":"2022-11-14T14:52:11","Actor":"vsfeedback","Number":"7283","RawContent":null,"Title":"The component does not have a resource identified by the URI","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/The-component-does-not-have-a-resource-i/10192205)._\n\n---\n[severity:It's more difficult to complete my work]\r\nEnvironment: Visual Studio 2022, Version 17.3.6\n.net 6.0 Long Term Support\n\nI was asked to resubmit this as a standalone issue as the posting I added to was using a different version of VS.\n\n[TestLib.zip](https://aka.ms/dc/file?name=B515a2f862e6546dd9d830e4cb86a475c638034358688157708_TestLib.zip&tid=515a2f862e6546dd9d830e4cb86a475c638034358688157708)\n\nWhen creating a subclass of a UserControl created in a separate WPF Library, the error \"The component '_name of control_' does not have a resource identified by the URI '/_libname_;component/_controlname.xaml_'\n\nThe error is reported by VS, but VS will allow you to build; use of the subclass in the UI will cause a runtime error.\n\nSteps to repeat:\n\nCreate a simple WPF library (\"TestLib\") - Windows Desktop, C#, WPF control library, .net 6.0\n- Create a UserControl (\"AControl\"). You don't need to bother adding anything to it.\n- Build.\n\n\nCreate a test application (\"TestApp\") - Windows Desktop, C#, WPF Application, .net 6.0\n- Add \"TestLib\" as a project reference.\n- Create a new class (\"ASubclassOfAControl\"):\n\n```\nusing System.Windows.Controls;\nusing TestLib;\n\nnamespace TestApp\n{\n    public class ASubclassOfAControl : AControl\n    {\n        public ASubclassOfAControl() : base() { }\n    }\n}\n```\n- Build the application to make \"ASubclasssOfAControl\" available in the XAML ToolBox for MainWindow.\n- Add \"ASublcassOfAControl\" to the MainWindow XAML:\n\n```\n\n    \n    \n\n```\n\nVS reports the aforementioned error.\n\nYou can still compile to an executable, but it will throw a runtime exception with the same error.\n\nThe important part here is I need to subclass the library control - I cannot simply add a reference to it as a member of another class; I cannot use it directly - I need to add functionality to it while still being considered a the base control (in the case of the example, there are other functions that require \"AControl,\" so \"ASubclassOfAControl\" needs to be considered a type of AControl - polymorphism is an important core concept of OOP).\n\nThere is a work-around that requires replacing \"InitializeComponent\" in the library, but it shouldn't happen to begin with, and it's only useful if I actually have control over the source code of the library, so it's not a very good solution to a problem that shouldn't exist to begin with.\n\n---\n### Original Comments\n\n#### Feedback Bot on 11/7/2022, 06:57 PM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/7283","RelatedDescription":"Open issue \"The component does not have a resource identified by the URI\" (#7283)"},{"Id":"1448151292","IsPullRequest":false,"CreatedAt":"2022-11-14T14:15:50","Actor":"Abrynos","Number":"7282","RawContent":null,"Title":"Combination of `PublishSingleFile` and `PublishReadyToRun` prevents app from starting","State":"open","Body":"## Problem description\r\n\r\nSince changing the `TargetFramework` in our .csproj file from `net6.0-windows` to `net7.0-windows` our app crashes upon starting with a `System.TypeInitializationException` thrown in the initializer for `System.Windows.Media.FontFamily`.\r\n\r\nRemoving either the `PublishSingleFile` or the `PublishReadyToRun` tag from the projects .csproj file (or switching back to `net6.0-windows`) fixes the problem.\r\n\r\n## Stack-trace\r\n\r\n```\r\nSystem.TypeInitializationException: The type initializer for 'System.Windows.Media.FontFamily' threw an exception.\r\n ---> System.TypeInitializationException: The type initializer for 'MS.Internal.FontCache.DWriteFactory' threw an exception.\r\n ---> System.InvalidCastException: Specified cast is not valid.\r\n   at MS.Internal.Text.TextInterface.Native.Util.ConvertHresultToException(Int32 hr)\r\n   at MS.Internal.Text.TextInterface.Factory.Initialize(FactoryType factoryType)\r\n   at MS.Internal.Text.TextInterface.Factory..ctor(FactoryType factoryType, IFontSourceCollectionFactory fontSourceCollectionFactory, IFontSourceFactory fontSourceFactory)\r\n   at MS.Internal.FontCache.DWriteFactory..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at MS.Internal.FontCache.DWriteFactory.get_SystemFontCollection()\r\n   at System.Windows.Media.FontFamily..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at MS.Internal.Text.DynamicPropertyReader.GetTypeface(DependencyObject element)\r\n   at MS.Internal.Text.TextProperties.InitCommon(DependencyObject target)\r\n   at MS.Internal.Text.TextProperties..ctor(FrameworkElement target, Boolean isTypographyDefaultValue)\r\n   at System.Windows.Controls.TextBoxView.GetLineProperties()\r\n   at System.Windows.Controls.TextBoxView.TextCache..ctor(TextBoxView owner)\r\n   at System.Windows.Controls.TextBoxView.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at MS.Internal.Helper.MeasureElementWithSingleChild(UIElement element, Size constraint)\r\n   at System.Windows.Controls.ScrollContentPresenter.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Controls.Grid.MeasureCell(Int32 cell, Boolean forceInfinityV)\r\n   at System.Windows.Controls.Grid.MeasureCellsGroup(Int32 cellsHead, Size referenceSize, Boolean ignoreDesiredSizeU, Boolean forceInfinityV, Boolean& hasDesiredSizeUChanged)\r\n   at System.Windows.Controls.Grid.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Controls.ScrollViewer.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Controls.Border.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Controls.Control.MeasureOverride(Size constraint)\r\n   at System.Windows.Controls.TextBox.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Controls.Grid.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at MS.Internal.Helper.MeasureElementWithSingleChild(UIElement element, Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Controls.Decorator.MeasureOverride(Size constraint)\r\n   at System.Windows.Documents.AdornerDecorator.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Controls.Border.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Window.MeasureOverrideHelper(Size constraint)\r\n   at System.Windows.Window.MeasureOverride(Size availableSize)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Interop.HwndSource.SetLayoutSize()\r\n   at System.Windows.Interop.HwndSource.set_RootVisualInternal(Visual value)\r\n   at System.Windows.Window.SetRootVisualAndUpdateSTC()\r\n   at System.Windows.Window.SetupInitialState(Double requestedTop, Double requestedLeft, Double requestedWidth, Double requestedHeight)\r\n   at System.Windows.Window.CreateSourceWindow(Boolean duringShow)\r\n   at System.Windows.Window.ShowHelper(Object booleanBox)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at MyProject.App.Main()\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe app starts the same way it did when using `net6.0-windows` as `TargetFramework`.\r\n\r\n## net48\r\n\r\nNo idea whether this also reproduces in .NET Framework 4.8. We're using `net7.0` exclusively.\r\n\r\n## Relation to Visual Studio (or other tooling)\r\n\r\nNone. We did our testing using the `dotnet publish` command.\r\n\r\n\r\n## dotnet info:\r\n```\r\n.NET SDK:\r\n Version:   7.0.100\r\n Commit:    e12b7af219\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19044\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.100\\\r\n \r\n...\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n```\r\n\r\n<details>\r\n  <summary>Minimal reproduction</summary>\r\n  \r\nThere are no `Directory.Build.props` or `Directory.Packages.props` files present.\r\n\r\nExecuting the project results in a file named `ex.txt` with the stack-trace being left in the execution directory.\r\n\r\n  Project.csproj\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net7.0-windows</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <OutputType>WinExe</OutputType>\r\n    <UseWPF>true</UseWPF>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <PublishSingleFile>true</PublishSingleFile>\r\n    <PublishReadyToRun>true</PublishReadyToRun>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nApp.xaml\r\n\r\n```xml\r\n<Application x:Class=\"MyProject.App\"\r\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n             StartupUri=\"TestView.xaml\"/>\r\n```\r\n\r\nApp.xaml.cs\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.Windows;\r\n\r\nnamespace MyProject;\r\n\r\npublic sealed partial class App\r\n{\r\n    protected override void OnStartup(StartupEventArgs e)\r\n    {\r\n        AppDomain.CurrentDomain.UnhandledException += OnUnhandledException;\r\n\r\n        base.OnStartup(e);\r\n    }\r\n\r\n    private void OnUnhandledException(object sender, UnhandledExceptionEventArgs e)\r\n    {\r\n        ArgumentNullException.ThrowIfNull(e);\r\n        ArgumentNullException.ThrowIfNull(e.ExceptionObject);\r\n\r\n        Exception exception = (Exception)e.ExceptionObject;\r\n\r\n        File.WriteAllText(\"ex.txt\", exception.ToString());\r\n\r\n        Environment.Exit(byte.MaxValue);\r\n    }\r\n}\r\n```\r\n\r\nTestView.xaml\r\n\r\n```xml\r\n<Window x:Class=\"MyProject.TestView\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        mc:Ignorable=\"d\">\r\n    <Grid>\r\n        <TextBox Text=\"Test\"/>\r\n    </Grid>\r\n</Window>\r\n```\r\n\r\nTestView.xaml.cs\r\n\r\n```csharp\r\nnamespace MyProject;\r\n\r\npublic partial class TestView\r\n{\r\n    public TestView() => InitializeComponent();\r\n}\r\n```\r\n</details>\r\n\r\nspecial thanks to @beagle1986 for lending me his ear.","Url":"https://github.com/dotnet/wpf/issues/7282","RelatedDescription":"Open issue \"Combination of `PublishSingleFile` and `PublishReadyToRun` prevents app from starting\" (#7282)"},{"Id":"1448039068","IsPullRequest":true,"CreatedAt":"2022-11-14T13:45:09","Actor":"dotnet-maestro[bot]","Number":"7281","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20221113.6\r\n- **Date Produced**: November 14, 2022 5:11:22 AM UTC\r\n- **Commit**: 7f0a54d5adb9e8d84d2c6f00a1bb521f4e53be95\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 8.0.0-alpha.1.22561.6 to 8.0.0-alpha.1.22563.6][1]\r\n  - **Microsoft.Private.Winforms**: [from 8.0.0-alpha.1.22561.6 to 8.0.0-alpha.1.22563.6][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/b2f6e00...7f0a54d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7281)","Url":"https://github.com/dotnet/wpf/pull/7281","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#7281)"},{"Id":"1446446162","IsPullRequest":true,"CreatedAt":"2022-11-12T13:44:59","Actor":"dotnet-maestro[bot]","Number":"7280","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20221111.6\r\n- **Date Produced**: November 11, 2022 11:23:00 PM UTC\r\n- **Commit**: b2f6e00ec51c7e1e4af1fd08125327dfc7bdbe18\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 8.0.0-alpha.1.22561.1 to 8.0.0-alpha.1.22561.6][1]\r\n  - **Microsoft.Private.Winforms**: [from 8.0.0-alpha.1.22561.1 to 8.0.0-alpha.1.22561.6][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/b545ab8...b2f6e00\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7280)","Url":"https://github.com/dotnet/wpf/pull/7280","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#7280)"},{"Id":"1446106408","IsPullRequest":true,"CreatedAt":"2022-11-12T00:14:56","Actor":"dotnet-maestro[bot]","Number":"7279","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:64ecc23e-064a-456b-da03-08d961c27f17)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 64ecc23e-064a-456b-da03-08d961c27f17\r\n- **Build**: 20221108.7\r\n- **Date Produced**: November 9, 2022 12:33:13 AM UTC\r\n- **Commit**: a7773a9828c67a9b1fba3d2daee061ec90db3505\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat**: [from 6.0.0-beta.22558.2 to 6.0.0-beta.22558.7][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.22558.2 to 6.0.0-beta.22558.7][1]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 6.0.0-beta.22558.2 to 6.0.0-beta.22558.7][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 6.0.0-beta.22558.2 to 6.0.0-beta.22558.7][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.22558.2 to 6.0.0-beta.22558.7][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/841e1fe...a7773a9\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:64ecc23e-064a-456b-da03-08d961c27f17)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7279)","Url":"https://github.com/dotnet/wpf/pull/7279","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#7279)"},{"Id":"1445453707","IsPullRequest":true,"CreatedAt":"2022-11-11T13:40:41","Actor":"dotnet-maestro[bot]","Number":"7278","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20221111.1\r\n- **Date Produced**: November 11, 2022 11:00:40 AM UTC\r\n- **Commit**: b545ab83528a541fd9a2bf501c9dd6a533582277\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 8.0.0-alpha.1.22559.13 to 8.0.0-alpha.1.22561.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 8.0.0-alpha.1.22559.13 to 8.0.0-alpha.1.22561.1][1]\r\n  - **System.CodeDom**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **System.Diagnostics.EventLog**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **System.DirectoryServices**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **System.Drawing.Common**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **System.Security.Cryptography.Xml**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **System.Security.Permissions**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **System.Windows.Extensions**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **System.IO.Packaging**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **System.Resources.Extensions**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.8.0**: [from 8.0.0-alpha.1.22559.1 to 8.0.0-alpha.1.22559.2][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/25a3497...b545ab8\r\n[2]: https://github.com/dotnet/runtime/compare/1366574...dd7fdb7\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/7278)","Url":"https://github.com/dotnet/wpf/pull/7278","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#7278)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-11-22T03:30:33.8996855Z","RunDurationInMilliseconds":593}