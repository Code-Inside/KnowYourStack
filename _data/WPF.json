{"Data":{"GitHub":{"Issues":[{"Id":"1117796787","IsPullRequest":true,"CreatedAt":"2022-01-28T20:19:09","Actor":"dotnet-maestro[bot]","Number":"6027","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220128.1\r\n- **Date Produced**: January 28, 2022 7:28:18 PM UTC\r\n- **Commit**: 58720dac1ffc0e77e105e9c5f3269f1a5fc23a59\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.2.22077.1 to 7.0.0-preview.2.22078.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.2.22077.1 to 7.0.0-preview.2.22078.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22076.16 to 7.0.0-preview.2.22078.1][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/0076168...58720da\r\n[2]: https://github.com/dotnet/runtime/compare/ac0a35b...953fd35\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6027","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6027)"},{"Id":"1117583764","IsPullRequest":false,"CreatedAt":"2022-01-28T16:14:57","Actor":"matthew-a-thomas","Number":"6026","RawContent":null,"Title":"Exception \"The data area passed to a system call is too small\"","State":"open","Body":"### Description\n\nEncountered the below exception stack trace in our production WPF application.\r\n\r\nDetails are scant but I do know the PC was running Windows 10 Pro 2009, and the version of our software that was running targeted net6.0-windows runtime environment. I also have a list of processes that were currently running at the time of the exception. I'm not sure how to share that privately here; let me know if you need it and I'll arrange a way.\r\n\r\nIt's difficult to tell exactly what the state of our software was when this exception happened, but other than this exception all signs indicate the software was operating normally.\r\n\r\nHere's the stack trace:\r\n```\r\nType: System.ComponentModel.Win32Exception\r\nMessage: The data area passed to a system call is too small.\r\nSource: WindowsBase\r\nStack Trace:\r\nat MS.Win32.UnsafeNativeMethods.GetWindowText(HandleRef hWnd, StringBuilder lpString, Int32 nMaxCount)\r\nat System.Windows.Automation.Peers.WindowAutomationPeer.GetNameCore()\r\nat System.Windows.Automation.Peers.AutomationPeer.UpdateSubtree()\r\nat System.Windows.ContextLayoutManager.fireAutomationEvents()\r\nat System.Windows.ContextLayoutManager.UpdateLayout()\r\nat System.Windows.ContextLayoutManager.UpdateLayoutCallback(Object arg)\r\nat System.Windows.Media.MediaContext.FireInvokeOnRenderCallbacks()\r\nat System.Windows.Media.MediaContext.RenderMessageHandlerCore(Object resizedCompositionTarget)\r\nat System.Windows.Media.MediaContext.RenderMessageHandler(Object resizedCompositionTarget)\r\nat System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\nat System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n```\r\n\r\nInternet search results currently point to some issue with an out-of-date installation of SQL Server. I do not believe SQL Server is/was present on this machine.\n\n### Reproduction Steps\n\nSorry\n\n### Expected behavior\n\nI expect no exception\n\n### Actual behavior\n\nAbove exception was thrown\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nWindows 10 Pro 2009\r\nx64\r\nWPF\r\nnet6.0-windows target\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/wpf/issues/6026","RelatedDescription":"Open issue \"Exception \"The data area passed to a system call is too small\"\" (#6026)"},{"Id":"1117400281","IsPullRequest":true,"CreatedAt":"2022-01-28T13:57:50","Actor":"dotnet-maestro[bot]","Number":"6025","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220127.8\r\n- **Date Produced**: January 27, 2022 7:59:03 PM UTC\r\n- **Commit**: 510b555b426c5383890bbc3c94aca38b8c290758\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22076.9 to 7.0.0-beta.22077.8][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22076.9 to 7.0.0-beta.22077.8][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22076.9 to 7.0.0-beta.22077.8][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22076.9 to 7.0.0-beta.22077.8][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22076.9 to 7.0.0-beta.22077.8][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/93656ab...510b555\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6025","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6025)"},{"Id":"1116922497","IsPullRequest":false,"CreatedAt":"2022-01-28T02:03:09","Actor":"lindexi","Number":"6024","RawContent":null,"Title":"Should we remove the PresentationFramework.Luna.dll","State":"open","Body":"As we all know, the PresentationFramework.Luna.dll is the Windows XP theme assembly. But we no longer support Windows XP.\r\n\r\nShould we remove the PresentationFramework.Luna.dll to save the size?\r\n\r\n- PresentationFramework.Luna.dll   643.60KB\r\n\r\nRef: https://github.com/dotnet/sdk/issues/3265","Url":"https://github.com/dotnet/wpf/issues/6024","RelatedDescription":"Open issue \"Should we remove the PresentationFramework.Luna.dll\" (#6024)"},{"Id":"1116732383","IsPullRequest":true,"CreatedAt":"2022-01-27T21:30:28","Actor":"dotnet-maestro[bot]","Number":"6023","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220127.1\r\n- **Date Produced**: January 27, 2022 8:23:08 PM UTC\r\n- **Commit**: 00761686e5b79f0de9ff8b166a5307368d1a7dcd\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.2.22076.4 to 7.0.0-preview.2.22077.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.2.22076.4 to 7.0.0-preview.2.22077.1][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22075.9 to 7.0.0-preview.2.22076.16][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/23c3ad1...0076168\r\n[2]: https://github.com/dotnet/runtime/compare/cfd725f...ac0a35b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6023","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6023)"},{"Id":"1116559019","IsPullRequest":true,"CreatedAt":"2022-01-27T18:41:55","Actor":"dotnet-maestro[bot]","Number":"6022","RawContent":null,"Title":"[release/7.0-preview1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:b8de973d-99ac-4419-198a-08d9d606f30d)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: b8de973d-99ac-4419-198a-08d9d606f30d\r\n- **Build**: 20220126.6\r\n- **Date Produced**: January 27, 2022 5:15:27 PM UTC\r\n- **Commit**: 7035a96e6ad8e0241cc8eb20fe380701ed4093c8\r\n- **Branch**: refs/heads/release/7.0-preview1\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.1.22076.2 to 7.0.0-preview.1.22076.6][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.1.22076.2 to 7.0.0-preview.1.22076.6][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.1.22075.6 to 7.0.0-preview.1.22076.8][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/0a895a8...7035a96\r\n[2]: https://github.com/dotnet/runtime/compare/aa73132...4053379\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b8de973d-99ac-4419-198a-08d9d606f30d)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6022","RelatedDescription":"Closed or merged PR \"[release/7.0-preview1] Update dependencies from dotnet/winforms\" (#6022)"},{"Id":"1116213508","IsPullRequest":true,"CreatedAt":"2022-01-27T13:57:05","Actor":"dotnet-maestro[bot]","Number":"6021","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220126.9\r\n- **Date Produced**: January 27, 2022 1:40:48 AM UTC\r\n- **Commit**: 93656ab81d1b7f4507edc971465ef2e640694e64\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22075.6 to 7.0.0-beta.22076.9][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22075.6 to 7.0.0-beta.22076.9][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22075.6 to 7.0.0-beta.22076.9][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22075.6 to 7.0.0-beta.22076.9][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22075.6 to 7.0.0-beta.22076.9][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/86a931a...93656ab\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6021","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6021)"},{"Id":"1116136125","IsPullRequest":true,"CreatedAt":"2022-01-27T12:11:31","Actor":"dipeshmsft","Number":"6020","RawContent":null,"Title":"reset ContextMenu whose popup cannot be opened (#5843)","State":"open","Body":"Addresses #5835\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nThere are two reasons the context menu does not display. The first reason is that its owner gets removed from the tree after the right-button-up gesture but before the PopupControlService initiates the display logic. The logic notices that the owner is not being displayed, and therefore doesn't display the context menu. This is by design - you shouldn't display a context menu for an element that isn't itself visible.\r\n\r\nThe second reason is that the (shared) context menu is in a bad state, where it's marked IsOpen=true, but isn't actually being displayed. The display logic doesn't do anything, since it thinks the menu is already open. This is a bug, left over from the first case, which doesn't reset IsOpen to false when it aborts the display logic. The net effect is that once a context menu doesn't open because of reason 1, it will never open again, even in cases where it should.\r\n\r\nThe fix is to reset the context menu's state when aborting the display logic.\r\n\r\n### Customer Impact\r\nContextMenus stop working\r\n\r\n### Regression\r\nNo\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6020","RelatedDescription":"Open PR \"reset ContextMenu whose popup cannot be opened (#5843)\" (#6020)"},{"Id":"1116135575","IsPullRequest":true,"CreatedAt":"2022-01-27T12:10:56","Actor":"dipeshmsft","Number":"6019","RawContent":null,"Title":"honor UIA_WindowVisibilityOverridden property (#5839)","State":"open","Body":"Addresses #5443\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nThis bug is about \"anomalous\" windows, where the UIA_WindowVisibilityOverridden property is set to 1 (ForceVisible), but window's rect is empty. The .NET automation code doesn't recognize this property, and thus treats the window as \"not visible\" because it's empty. This means an automation search won't find any windows below the anomalous window.\r\n\r\nFixed by recognizing the property, and overriding the hwnd's visibility to automation accordingly.\r\n\r\n### Customer Impact\r\nAutomation searches cannot find descendants of anomalous windows (e.g. the Windows 11 Start button).\r\n\r\n### Regression\r\nNo.\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6019","RelatedDescription":"Open PR \"honor UIA_WindowVisibilityOverridden property (#5839)\" (#6019)"},{"Id":"1116134923","IsPullRequest":true,"CreatedAt":"2022-01-27T12:10:16","Actor":"dipeshmsft","Number":"6018","RawContent":null,"Title":"fix IME vs. property-changed Binding battle (#5840)","State":"open","Body":"Addresses #5444\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nA binding on TextBox.Text defers two kinds of work when an IME composition is in progress on the TextBox:\r\n\r\nWhen the text changes (and UpdateTrigger=PropertyChanged), write a new value into the source property.\r\nAfter writing a value into the source property, read the property's new value (which might be different), apply the customary conversions, and write the result into the TextBox.\r\nThe bug occurs when the IME starts a new composition before the previous composition's type 2 work happens. This yields a situation where two tasks are deferred: the older composition's type 2 task and the newer composition's type 1 task. The type 2 task happens first, overwriting the text change that the type 1 task is supposed to handle. This confusion of state leads to exceptions (caught and hidden from the IME, but visible in the debugger), and unexpected content entered into the TextBox.\r\n\r\nFixed by cancelling any pending type 2 work when new type 1 work is needed.\r\n\r\n### Customer Impact\r\nInput with certain IMEs (e.g. MS Quick) is broken.\r\n\r\n### Regression\r\nNo.\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6018","RelatedDescription":"Open PR \"fix IME vs. property-changed Binding battle (#5840)\" (#6018)"},{"Id":"1116134329","IsPullRequest":true,"CreatedAt":"2022-01-27T12:09:39","Actor":"dipeshmsft","Number":"6017","RawContent":null,"Title":"forward activation message during manipulation (#5836)","State":"open","Body":"Addresses #5440\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nDuring a manipulation (e.g. swipe), WPF's Pointer stack discards all promoted mouse events. In the given scenario, this includes the Activation event. But this means the MouseDevice never gets the Activation event, and thus stays inactive (unresponsive) even after the manipulation ends, until it gets another Activation event, i.e. until the user activates another window then returns to the WPF app.\r\n\r\nFixed by detecting a \"promoted\" Activation event and explicitly pushing a non-promoted Activation event in its place.\r\n\r\n### Customer Impact\r\nTouch is broken\r\n\r\n### Regression\r\nNo\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6017","RelatedDescription":"Open PR \"forward activation message during manipulation (#5836)\" (#6017)"},{"Id":"1116133811","IsPullRequest":true,"CreatedAt":"2022-01-27T12:09:07","Actor":"dipeshmsft","Number":"6016","RawContent":null,"Title":"fix hang when margin is not a multiple of DPI rounding quantum (#5841)","State":"open","Body":"Addresses #4834\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nThis hang arises when UseLayoutRounding is set, and the container's top margin is not a multiple of the rounding quantum. VSP uses two offsets from the viewport to the container, one that includes the margin and one that doesn't. It was computing the second and subtracting the margin to obtain the first, but that can give the wrong answer in the situation above. This can lead to infinite re-measures in anchored scrolls.\r\n\r\nFixed by computing the first offset directly from layout information. The two offsets will differ by an amount that is close to the margin size, and rounded to a quantum, but there's no way to know which of the nearby candidates is the right one.\r\n\r\n### Customer Impact\r\nHang while scrolling an ItemsControl.\r\n\r\n### Regression\r\nno\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6016","RelatedDescription":"Open PR \"fix hang when margin is not a multiple of DPI rounding quantum (#5841)\" (#6016)"},{"Id":"1116133168","IsPullRequest":true,"CreatedAt":"2022-01-27T12:08:22","Actor":"dipeshmsft","Number":"6015","RawContent":null,"Title":"rect with negative height is not allowed (#5842)","State":"open","Body":"Addresses #2854\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nThe crash arises when adding an item to the items-source collection underlying the ItemsControl, when the VSP is in an odd state: viewport.Y > extent.Height and <another relationship between viewport, extent, and last-computed \"extended viewport\", whose exact details I haven't yet determined>. The logic that determines whether such an addition requires a re-measurement predicts the height of the new extended viewport; in the odd state this sets the height to (extent.Height - viewport.Y), a negative number that's not allowed.\r\n\r\nThe first condition cannot happen during Measure, or immediately after; Measure starts by initializing viewport.Y to a value <= extent.Height. But it can occur after collection changes, as these can change extent.Height. Collection changes can also affect the quantities in the second condition. The first kind of change puts the height-assignment at risk; the second kind of change can allow the logic to reach the height-assignment. It's a Goldilocks situation - if the changes are too big or too small the logic doesn't need the height-assignment, which happens only when the changes are \"just right\". In fact, I've been unable to produce a fully-deterministic repro suitable for use in a test case; the \"just-rightness\" depends on the exact scrolling and virtualization history in a way that I've only seen in large datasets after non-deterministic scrolling (e.g. dragging the thumb when the data is so large that a single pixel of thumb motion corresponds to more than a screenful of data motion: extent.Height > viewport.Height^2 ).\r\n\r\nThe fix is to replace negative height by 0 in the height-assignment. This obviously avoids the crash, but it's not so obvious whether doing so can cause other problems later on. In the collection-change case, we only care whether the predicted extended viewport is taller than the last-computed one, we don't actually use the new height in any other way. So it's OK to use 0 instead of a negative number - they both have the same effect.\r\n\r\n### Customer Impact\r\nCrash while adding/removing items from the underlying collection.\r\n\r\n### Regression\r\nNo.\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6015","RelatedDescription":"Open PR \"rect with negative height is not allowed (#5842)\" (#6015)"},{"Id":"1116132172","IsPullRequest":true,"CreatedAt":"2022-01-27T12:07:19","Actor":"dipeshmsft","Number":"6014","RawContent":null,"Title":"preserve extra info across PeekMessage (#5838)","State":"open","Body":"Addresses #5442\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nAs part of a mitigation for an OS problem (delivering WM_CHAR messages after the related WM_KEYDOWN message has been marked \"handled\"), WPF reorders the thread's message queue by removing a certain private message, then re-inserting it at the end of the queue. This happens early while acting on a WM_KEYDOWN, but has the (undocumented) side-effect of overwriting the \"extra info\" associated with the WM_KEYDOWN.\r\n\r\nThis is fixed by preserving the \"extra info\" across the call that removes the private message.\r\n\r\n### Customer Impact\r\nExtra info attached to a WM_KEYDOWN is lost.\r\n\r\n### Regression\r\nNo.\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6014","RelatedDescription":"Open PR \"preserve extra info across PeekMessage (#5838)\" (#6014)"},{"Id":"1116095385","IsPullRequest":true,"CreatedAt":"2022-01-27T11:27:07","Actor":"dipeshmsft","Number":"6013","RawContent":null,"Title":"rect with negative height is not allowed (#5842)","State":"open","Body":"Addresses #2854\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nThe crash arises when adding an item to the items-source collection underlying the ItemsControl, when the VSP is in an odd state: viewport.Y > extent.Height and <another relationship between viewport, extent, and last-computed \"extended viewport\", whose exact details I haven't yet determined>. The logic that determines whether such an addition requires a re-measurement predicts the height of the new extended viewport; in the odd state this sets the height to (extent.Height - viewport.Y), a negative number that's not allowed.\r\n\r\nThe first condition cannot happen during Measure, or immediately after; Measure starts by initializing viewport.Y to a value <= extent.Height. But it can occur after collection changes, as these can change extent.Height. Collection changes can also affect the quantities in the second condition. The first kind of change puts the height-assignment at risk; the second kind of change can allow the logic to reach the height-assignment. It's a Goldilocks situation - if the changes are too big or too small the logic doesn't need the height-assignment, which happens only when the changes are \"just right\". In fact, I've been unable to produce a fully-deterministic repro suitable for use in a test case; the \"just-rightness\" depends on the exact scrolling and virtualization history in a way that I've only seen in large datasets after non-deterministic scrolling (e.g. dragging the thumb when the data is so large that a single pixel of thumb motion corresponds to more than a screenful of data motion: extent.Height > viewport.Height^2 ).\r\n\r\nThe fix is to replace negative height by 0 in the height-assignment. This obviously avoids the crash, but it's not so obvious whether doing so can cause other problems later on. In the collection-change case, we only care whether the predicted extended viewport is taller than the last-computed one, we don't actually use the new height in any other way. So it's OK to use 0 instead of a negative number - they both have the same effect.\r\n\r\n### Customer Impact\r\nCrash while adding/removing items from the underlying collection.\r\n\r\n### Regression\r\nNo.\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6013","RelatedDescription":"Open PR \"rect with negative height is not allowed (#5842)\" (#6013)"},{"Id":"1116094662","IsPullRequest":true,"CreatedAt":"2022-01-27T11:26:22","Actor":"dipeshmsft","Number":"6012","RawContent":null,"Title":"fix hang when margin is not a multiple of DPI rounding quantum (#5841)","State":"open","Body":"Addresses #4834\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nThis hang arises when UseLayoutRounding is set, and the container's top margin is not a multiple of the rounding quantum. VSP uses two offsets from the viewport to the container, one that includes the margin and one that doesn't. It was computing the second and subtracting the margin to obtain the first, but that can give the wrong answer in the situation above. This can lead to infinite re-measures in anchored scrolls.\r\n\r\nFixed by computing the first offset directly from layout information. The two offsets will differ by an amount that is close to the margin size, and rounded to a quantum, but there's no way to know which of the nearby candidates is the right one.\r\n\r\n### Customer Impact\r\nHang while scrolling an ItemsControl.\r\n\r\n### Regression\r\nno\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6012","RelatedDescription":"Open PR \"fix hang when margin is not a multiple of DPI rounding quantum (#5841)\" (#6012)"},{"Id":"1116093739","IsPullRequest":true,"CreatedAt":"2022-01-27T11:25:26","Actor":"dipeshmsft","Number":"6011","RawContent":null,"Title":"forward activation message during manipulation (#5836)","State":"open","Body":"Addresses #5440\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nDuring a manipulation (e.g. swipe), WPF's Pointer stack discards all promoted mouse events. In the given scenario, this includes the Activation event. But this means the MouseDevice never gets the Activation event, and thus stays inactive (unresponsive) even after the manipulation ends, until it gets another Activation event, i.e. until the user activates another window then returns to the WPF app.\r\n\r\nFixed by detecting a \"promoted\" Activation event and explicitly pushing a non-promoted Activation event in its place.\r\n\r\n### Customer Impact\r\nTouch is broken\r\n\r\n### Regression\r\nNo\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6011","RelatedDescription":"Open PR \"forward activation message during manipulation (#5836)\" (#6011)"},{"Id":"1116092711","IsPullRequest":true,"CreatedAt":"2022-01-27T11:24:24","Actor":"dipeshmsft","Number":"6010","RawContent":null,"Title":"preserve extra info across PeekMessage (#5838)","State":"open","Body":"Addresses #5442\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nAs part of a mitigation for an OS problem (delivering WM_CHAR messages after the related WM_KEYDOWN message has been marked \"handled\"), WPF reorders the thread's message queue by removing a certain private message, then re-inserting it at the end of the queue. This happens early while acting on a WM_KEYDOWN, but has the (undocumented) side-effect of overwriting the \"extra info\" associated with the WM_KEYDOWN.\r\n\r\nThis is fixed by preserving the \"extra info\" across the call that removes the private message.\r\n\r\n### Customer Impact\r\nExtra info attached to a WM_KEYDOWN is lost.\r\n\r\n### Regression\r\nNo.\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6010","RelatedDescription":"Open PR \"preserve extra info across PeekMessage (#5838)\" (#6010)"},{"Id":"1116091834","IsPullRequest":true,"CreatedAt":"2022-01-27T11:23:35","Actor":"dipeshmsft","Number":"6009","RawContent":null,"Title":"honor UIA_WindowVisibilityOverridden property (#5839)","State":"open","Body":"Addresses #5443\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nThis bug is about \"anomalous\" windows, where the UIA_WindowVisibilityOverridden property is set to 1 (ForceVisible), but window's rect is empty. The .NET automation code doesn't recognize this property, and thus treats the window as \"not visible\" because it's empty. This means an automation search won't find any windows below the anomalous window.\r\n\r\nFixed by recognizing the property, and overriding the hwnd's visibility to automation accordingly.\r\n\r\n### Customer Impact\r\nAutomation searches cannot find descendants of anomalous windows (e.g. the Windows 11 Start button).\r\n\r\n### Regression\r\nNo.\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6009","RelatedDescription":"Open PR \"honor UIA_WindowVisibilityOverridden property (#5839)\" (#6009)"},{"Id":"1116090875","IsPullRequest":true,"CreatedAt":"2022-01-27T11:22:34","Actor":"dipeshmsft","Number":"6008","RawContent":null,"Title":"fix IME vs. property-changed Binding battle (#5840)","State":"open","Body":"Addresses #5444\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nA binding on TextBox.Text defers two kinds of work when an IME composition is in progress on the TextBox:\r\n\r\nWhen the text changes (and UpdateTrigger=PropertyChanged), write a new value into the source property.\r\nAfter writing a value into the source property, read the property's new value (which might be different), apply the customary conversions, and write the result into the TextBox.\r\nThe bug occurs when the IME starts a new composition before the previous composition's type 2 work happens. This yields a situation where two tasks are deferred: the older composition's type 2 task and the newer composition's type 1 task. The type 2 task happens first, overwriting the text change that the type 1 task is supposed to handle. This confusion of state leads to exceptions (caught and hidden from the IME, but visible in the debugger), and unexpected content entered into the TextBox.\r\n\r\nFixed by cancelling any pending type 2 work when new type 1 work is needed.\r\n\r\n### Customer Impact\r\nInput with certain IMEs (e.g. MS Quick) is broken.\r\n\r\n### Regression\r\nNo.\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6008","RelatedDescription":"Open PR \"fix IME vs. property-changed Binding battle (#5840)\" (#6008)"},{"Id":"1116089199","IsPullRequest":true,"CreatedAt":"2022-01-27T11:20:50","Actor":"dipeshmsft","Number":"6007","RawContent":null,"Title":"reset ContextMenu whose popup cannot be opened (#5843)","State":"open","Body":"Addresses #5835\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nThere are two reasons the context menu does not display. The first reason is that its owner gets removed from the tree after the right-button-up gesture but before the PopupControlService initiates the display logic. The logic notices that the owner is not being displayed, and therefore doesn't display the context menu. This is by design - you shouldn't display a context menu for an element that isn't itself visible.\r\n\r\nThe second reason is that the (shared) context menu is in a bad state, where it's marked IsOpen=true, but isn't actually being displayed. The display logic doesn't do anything, since it thinks the menu is already open. This is a bug, left over from the first case, which doesn't reset IsOpen to false when it aborts the display logic. The net effect is that once a context menu doesn't open because of reason 1, it will never open again, even in cases where it should.\r\n\r\nThe fix is to reset the context menu's state when aborting the display logic.\r\n\r\n### Customer Impact\r\nContextMenus stop working\r\n\r\n### Regression\r\nNo\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6007","RelatedDescription":"Open PR \"reset ContextMenu whose popup cannot be opened (#5843)\" (#6007)"},{"Id":"1116011181","IsPullRequest":true,"CreatedAt":"2022-01-27T10:04:44","Actor":"singhashish-wpf","Number":"6006","RawContent":null,"Title":"fix IME vs. property-changed Binding battle (#5840)","State":"open","Body":"Addresses #5444\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nA binding on TextBox.Text defers two kinds of work when an IME composition is in progress on the TextBox:\r\n\r\nWhen the text changes (and UpdateTrigger=PropertyChanged), write a new value into the source property.\r\nAfter writing a value into the source property, read the property's new value (which might be different), apply the customary conversions, and write the result into the TextBox.\r\nThe bug occurs when the IME starts a new composition before the previous composition's type 2 work happens. This yields a situation where two tasks are deferred: the older composition's type 2 task and the newer composition's type 1 task. The type 2 task happens first, overwriting the text change that the type 1 task is supposed to handle. This confusion of state leads to exceptions (caught and hidden from the IME, but visible in the debugger), and unexpected content entered into the TextBox.\r\n\r\nFixed by cancelling any pending type 2 work when new type 1 work is needed.\r\n\r\n### Customer Impact\r\nInput with certain IMEs (e.g. MS Quick) is broken.\r\n\r\n### Regression\r\nNo.\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6006","RelatedDescription":"Open PR \"fix IME vs. property-changed Binding battle (#5840)\" (#6006)"},{"Id":"1116003573","IsPullRequest":true,"CreatedAt":"2022-01-27T09:57:29","Actor":"singhashish-wpf","Number":"6005","RawContent":null,"Title":"forward activation message during manipulation (#5836)","State":"open","Body":"Addresses #5440\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nDuring a manipulation (e.g. swipe), WPF's Pointer stack discards all promoted mouse events. In the given scenario, this includes the Activation event. But this means the MouseDevice never gets the Activation event, and thus stays inactive (unresponsive) even after the manipulation ends, until it gets another Activation event, i.e. until the user activates another window then returns to the WPF app.\r\n\r\nFixed by detecting a \"promoted\" Activation event and explicitly pushing a non-promoted Activation event in its place.\r\n\r\n### Customer Impact\r\nTouch is broken\r\n\r\n### Regression\r\nNo\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6005","RelatedDescription":"Open PR \"forward activation message during manipulation (#5836)\" (#6005)"},{"Id":"1115999898","IsPullRequest":true,"CreatedAt":"2022-01-27T09:53:54","Actor":"singhashish-wpf","Number":"6004","RawContent":null,"Title":"fix hang when margin is not a multiple of DPI rounding quantum (#5841)","State":"open","Body":"Addresses #4834\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nThis hang arises when UseLayoutRounding is set, and the container's top margin is not a multiple of the rounding quantum. VSP uses two offsets from the viewport to the container, one that includes the margin and one that doesn't. It was computing the second and subtracting the margin to obtain the first, but that can give the wrong answer in the situation above. This can lead to infinite re-measures in anchored scrolls.\r\n\r\nFixed by computing the first offset directly from layout information. The two offsets will differ by an amount that is close to the margin size, and rounded to a quantum, but there's no way to know which of the nearby candidates is the right one.\r\n\r\n### Customer Impact\r\nHang while scrolling an ItemsControl.\r\n\r\n### Regression\r\nno\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6004","RelatedDescription":"Open PR \"fix hang when margin is not a multiple of DPI rounding quantum (#5841)\" (#6004)"},{"Id":"1115996812","IsPullRequest":true,"CreatedAt":"2022-01-27T09:50:46","Actor":"singhashish-wpf","Number":"6003","RawContent":null,"Title":"rect with negative height is not allowed (#5842)","State":"open","Body":"Addresses #2854\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nThe crash arises when adding an item to the items-source collection underlying the ItemsControl, when the VSP is in an odd state: viewport.Y > extent.Height and <another relationship between viewport, extent, and last-computed \"extended viewport\", whose exact details I haven't yet determined>. The logic that determines whether such an addition requires a re-measurement predicts the height of the new extended viewport; in the odd state this sets the height to (extent.Height - viewport.Y), a negative number that's not allowed.\r\n\r\nThe first condition cannot happen during Measure, or immediately after; Measure starts by initializing viewport.Y to a value <= extent.Height. But it can occur after collection changes, as these can change extent.Height. Collection changes can also affect the quantities in the second condition. The first kind of change puts the height-assignment at risk; the second kind of change can allow the logic to reach the height-assignment. It's a Goldilocks situation - if the changes are too big or too small the logic doesn't need the height-assignment, which happens only when the changes are \"just right\". In fact, I've been unable to produce a fully-deterministic repro suitable for use in a test case; the \"just-rightness\" depends on the exact scrolling and virtualization history in a way that I've only seen in large datasets after non-deterministic scrolling (e.g. dragging the thumb when the data is so large that a single pixel of thumb motion corresponds to more than a screenful of data motion: extent.Height > viewport.Height^2 ).\r\n\r\nThe fix is to replace negative height by 0 in the height-assignment. This obviously avoids the crash, but it's not so obvious whether doing so can cause other problems later on. In the collection-change case, we only care whether the predicted extended viewport is taller than the last-computed one, we don't actually use the new height in any other way. So it's OK to use 0 instead of a negative number - they both have the same effect.\r\n\r\n### Customer Impact\r\nCrash while adding/removing items from the underlying collection.\r\n\r\n### Regression\r\nNo.\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6003","RelatedDescription":"Open PR \"rect with negative height is not allowed (#5842)\" (#6003)"},{"Id":"1115993415","IsPullRequest":true,"CreatedAt":"2022-01-27T09:47:24","Actor":"singhashish-wpf","Number":"6002","RawContent":null,"Title":"closing tooltip's popup directly (#5932)","State":"open","Body":"Fixes #5730\r\n\r\n### Description\r\nClosing a tooltip's Popup directly (as opposed to closing the ToolTip and letting WPF close the Popup in response) causes WPF to clear some private state on the ToolTip while leaving its IsOpen=true. When the ToolTip is eventually closed, WPF uses that state and crashes because it's null.\r\n\r\nFixed by preserving the private state until the ToolTip itself is closed, and adding logic to ensure that the state is cleared even if the Popup was already closed before the ToolTip closed.\r\n\r\n### Customer Impact\r\nFixes a regression.\r\n\r\n### Regression\r\nYes.\r\n\r\n### Testing\r\n### Risk\r\nLow. The fix itself is safe. The customer reports did not include repros, so there's a small risk that there are crashing scenarios that this fix doesn't address.","Url":"https://github.com/dotnet/wpf/pull/6002","RelatedDescription":"Open PR \"closing tooltip's popup directly (#5932)\" (#6002)"},{"Id":"1115990491","IsPullRequest":true,"CreatedAt":"2022-01-27T09:44:31","Actor":"singhashish-wpf","Number":"6001","RawContent":null,"Title":"preserve extra info across PeekMessage (#5838)","State":"open","Body":"Addresses #5442\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nAs part of a mitigation for an OS problem (delivering WM_CHAR messages after the related WM_KEYDOWN message has been marked \"handled\"), WPF reorders the thread's message queue by removing a certain private message, then re-inserting it at the end of the queue. This happens early while acting on a WM_KEYDOWN, but has the (undocumented) side-effect of overwriting the \"extra info\" associated with the WM_KEYDOWN.\r\n\r\nThis is fixed by preserving the \"extra info\" across the call that removes the private message.\r\n\r\n### Customer Impact\r\nExtra info attached to a WM_KEYDOWN is lost.\r\n\r\n### Regression\r\nNo.\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6001","RelatedDescription":"Open PR \"preserve extra info across PeekMessage (#5838)\" (#6001)"},{"Id":"1115986906","IsPullRequest":true,"CreatedAt":"2022-01-27T09:40:56","Actor":"singhashish-wpf","Number":"6000","RawContent":null,"Title":"honor UIA_WindowVisibilityOverridden property (#5839)","State":"open","Body":"Addresses #5443\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nThis bug is about \"anomalous\" windows, where the UIA_WindowVisibilityOverridden property is set to 1 (ForceVisible), but window's rect is empty. The .NET automation code doesn't recognize this property, and thus treats the window as \"not visible\" because it's empty. This means an automation search won't find any windows below the anomalous window.\r\n\r\nFixed by recognizing the property, and overriding the hwnd's visibility to automation accordingly.\r\n\r\n### Customer Impact\r\nAutomation searches cannot find descendants of anomalous windows (e.g. the Windows 11 Start button).\r\n\r\n### Regression\r\nNo.\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/6000","RelatedDescription":"Open PR \"honor UIA_WindowVisibilityOverridden property (#5839)\" (#6000)"},{"Id":"1115869151","IsPullRequest":true,"CreatedAt":"2022-01-27T07:32:03","Actor":"singhashish-wpf","Number":"5999","RawContent":null,"Title":"reset ContextMenu whose popup cannot be opened (#5843)","State":"open","Body":"Addresses #5835\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n### Description\r\nThere are two reasons the context menu does not display. The first reason is that its owner gets removed from the tree after the right-button-up gesture but before the PopupControlService initiates the display logic. The logic notices that the owner is not being displayed, and therefore doesn't display the context menu. This is by design - you shouldn't display a context menu for an element that isn't itself visible.\r\n\r\nThe second reason is that the (shared) context menu is in a bad state, where it's marked IsOpen=true, but isn't actually being displayed. The display logic doesn't do anything, since it thinks the menu is already open. This is a bug, left over from the first case, which doesn't reset IsOpen to false when it aborts the display logic. The net effect is that once a context menu doesn't open because of reason 1, it will never open again, even in cases where it should.\r\n\r\nThe fix is to reset the context menu's state when aborting the display logic.\r\n\r\n### Customer Impact\r\nContextMenus stop working\r\n\r\n### Regression\r\nNo\r\n\r\n### Testing\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n### Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/5999","RelatedDescription":"Open PR \"reset ContextMenu whose popup cannot be opened (#5843)\" (#5999)"},{"Id":"1115665144","IsPullRequest":true,"CreatedAt":"2022-01-27T01:51:00","Actor":"dotnet-maestro[bot]","Number":"5998","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220126.4\r\n- **Date Produced**: January 27, 2022 12:48:47 AM UTC\r\n- **Commit**: 23c3ad1a7faf4ffe5d6a0b257a2c96b76d5625fe\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.2.22075.4 to 7.0.0-preview.2.22076.4][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.2.22075.4 to 7.0.0-preview.2.22076.4][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22074.8 to 7.0.0-preview.2.22075.9][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/1807d1d...23c3ad1\r\n[2]: https://github.com/dotnet/runtime/compare/341c394...cfd725f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5998","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#5998)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-01-29T03:30:30.5374666Z","RunDurationInMilliseconds":492}