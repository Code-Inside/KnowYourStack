{"Data":{"GitHub":{"Issues":[{"Id":"1180295094","IsPullRequest":true,"CreatedAt":"2022-03-25T03:21:39","Actor":"stephentoub","Number":"6309","RawContent":null,"Title":"Stop boxing in Visual.SetDpiScaleVisualFlags","State":"open","Body":"## Description\r\n\r\nThis uses DpiScale.Equals(DpiScale), but there's no such strongly-typed overload, so it falls back to using ValueType.Equals(object), which not only boxes the DpiScale but also both doubles that end up being compared.  This just adds an internal Equals method to DpiScale to bind to that Equals instead; ideally in the future DpiScale would implement `IEquatable<T>` and this `Equals` would be made public.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocation / overhead\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6309","RelatedDescription":"Open PR \"Stop boxing in Visual.SetDpiScaleVisualFlags\" (#6309)"},{"Id":"1173696442","IsPullRequest":false,"CreatedAt":"2022-03-24T19:53:47","Actor":"vijayarasan","Number":"6283","RawContent":null,"Title":"ToolTip immediately closed when showing in Button while project create with .Net 6","State":"closed","Body":"* .NET Core Version: 6.0\r\n \r\n **Problem description:**\r\n I am using button and defined the tooltip like below mentioned code snippet,\r\n```XML  \r\n<Button x:Name=\"btn\"  Content=\"Button\"  Width=\"150\" Height=\"30\" >\r\n            <ToolTipService.ToolTip>\r\n                <ToolTip Background=\"#FFDB000C\" Content=\"Hello\" />\r\n            </ToolTipService.ToolTip>\r\n </Button>\r\n```\r\n\r\nWhen hovering to the button ToolTip immediately disappear. The reported problem occurs while using with VS2022 Preview, Scaling 150 and .Net 6.0. \r\n \r\n I have also set the ShowDuration and InitialDelayDuration, but no effect.\r\n \r\n **Note :** The reported problem does not occurs in .Net 5.0 \r\n \r\n **Actual behavior:** \r\n ToolTip immediately closed when showing in Button while project create with .Net 6\r\n \r\n **Expected behavior:**\r\n ToolTip properly display when showing in Button while project create with .Net 6\r\n\r\n**Sample Link:**  [ToolTipDemo.zip](https://github.com/dotnet/wpf/files/8305470/ToolTipDemo.zip)\r\n\r\nCan you please check and share any idea to resolve this issue?\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/6283","RelatedDescription":"Closed issue \"ToolTip immediately closed when showing in Button while project create with .Net 6\" (#6283)"},{"Id":"1178818246","IsPullRequest":true,"CreatedAt":"2022-03-24T15:32:18","Actor":"dotnet-maestro[bot]","Number":"6306","RawContent":null,"Title":"[release/7.0-preview3] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n[marker]: <> (Begin:d60cfb58-7a89-49a6-42cc-08da0b731261)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: d60cfb58-7a89-49a6-42cc-08da0b731261\r\n- **Build**: 20220323.5\r\n- **Date Produced**: March 24, 2022 3:06:03 AM UTC\r\n- **Commit**: 1fc26109b28c6893ff32219783a08adf39a5492b\r\n- **Branch**: refs/heads/release/7.0-preview3\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22173.3 to 7.0.0-preview.3.22173.5][3]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22173.3 to 7.0.0-preview.3.22173.5][3]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22171.6 to 7.0.0-preview.3.22173.5][4]\r\n\r\n[3]: https://github.com/dotnet/winforms/compare/7ed73eb...1fc2610\r\n[4]: https://github.com/dotnet/runtime/compare/ce81388...5569ff0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d60cfb58-7a89-49a6-42cc-08da0b731261)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6306","RelatedDescription":"Closed or merged PR \"[release/7.0-preview3] Update dependencies from dotnet/winforms\" (#6306)"},{"Id":"1173136380","IsPullRequest":true,"CreatedAt":"2022-03-24T14:28:56","Actor":"dotnet-maestro[bot]","Number":"6277","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220324.1\r\n- **Date Produced**: March 24, 2022 1:37:01 PM UTC\r\n- **Commit**: 625efe296fc7f840b27c62c5937893e8968fea74\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22166.2 to 7.0.0-preview.4.22174.1][39]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22166.2 to 7.0.0-preview.4.22174.1][39]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.4.22174.1][40]\r\n\r\n[39]: https://github.com/dotnet/winforms/compare/f2eb3f7...625efe2\r\n[40]: https://github.com/dotnet/runtime/compare/a5f3f96...c33d614\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6277","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6277)"},{"Id":"1179404594","IsPullRequest":false,"CreatedAt":"2022-03-24T11:47:26","Actor":"Symbai","Number":"6308","RawContent":null,"Title":"72 Hours","State":"open","Body":"https://github.com/dotnet/wpf/blob/main/roadmap.md#triaging-github-issues Since weekend (monday) PRs are not reviewed and issues are not labeled/commented. Are the mentioned 72 hours still up to date?","Url":"https://github.com/dotnet/wpf/issues/6308","RelatedDescription":"Open issue \"72 Hours\" (#6308)"},{"Id":"1178891715","IsPullRequest":true,"CreatedAt":"2022-03-24T03:47:48","Actor":"dotnet-maestro[bot]","Number":"6307","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20220323.2\r\n- **Date Produced**: March 24, 2022 2:53:46 AM UTC\r\n- **Commit**: 6a3e171edc00d876d05cfef72dddaf7bb1823398\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 7.0.0-preview.3.22118.1 to 7.0.0-preview.4.22173.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC21ded4b&targetVersion=GC6a3e171&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6307","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#6307)"},{"Id":"1177614392","IsPullRequest":true,"CreatedAt":"2022-03-23T22:48:22","Actor":"ThomasGoulet73","Number":"6300","RawContent":null,"Title":"Fix Popup regression on high DPI","State":"closed","Body":"Fixes dotnet/wpf#6289\r\n\r\n## Description\r\nFixes a regression where popups would vanish when using high DPI settings. The current code in .Net 6.0.3 uses the position of the mouse to check if the mouse was inside an array of points. The problem was that the position of the mouse was not DPI aware while the array of points was DPI aware. I fixed this by transforming the position of the mouse to have a point which is DPI aware.\r\n\r\n## Customer Impact\r\nFixes popup vanishing immediately.\r\n\r\n## Regression\r\nRegression introduced in .Net 6.0.3 with #6063 which was a backport of #5931.\r\n\r\n## Testing\r\nI tested locally using the sample provided here: https://github.com/dotnet/wpf/pull/6063#issuecomment-1064069083. I used two monitors with different DPI settings and after the changes in this PR, the issue was fixed.\r\n\r\n## Risk\r\nLow.","Url":"https://github.com/dotnet/wpf/pull/6300","RelatedDescription":"Closed or merged PR \"Fix Popup regression on high DPI\" (#6300)"},{"Id":"1178516407","IsPullRequest":true,"CreatedAt":"2022-03-23T22:42:04","Actor":"dotnet-maestro[bot]","Number":"6303","RawContent":null,"Title":"[release/7.0-preview3] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:d60cfb58-7a89-49a6-42cc-08da0b731261)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: d60cfb58-7a89-49a6-42cc-08da0b731261\r\n- **Build**: 20220323.3\r\n- **Date Produced**: March 23, 2022 6:11:53 PM UTC\r\n- **Commit**: 7ed73eb9f492ec21500c33bd516601ad2a95ef08\r\n- **Branch**: refs/heads/release/7.0-preview3\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22166.2 to 7.0.0-preview.3.22173.3][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22166.2 to 7.0.0-preview.3.22173.3][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22171.6][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/f2eb3f7...7ed73eb\r\n[2]: https://github.com/dotnet/runtime/compare/a5f3f96...ce81388\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:d60cfb58-7a89-49a6-42cc-08da0b731261)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6303","RelatedDescription":"Closed or merged PR \"[release/7.0-preview3] Update dependencies from dotnet/winforms\" (#6303)"},{"Id":"1178632219","IsPullRequest":true,"CreatedAt":"2022-03-23T21:36:29","Actor":"dotnet-maestro[bot]","Number":"6305","RawContent":null,"Title":"[release/7.0-preview3] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:25e87f7d-a2d9-48b3-a0c5-08da0b730a5a)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 25e87f7d-a2d9-48b3-a0c5-08da0b730a5a\r\n- **Build**: 20220323.1\r\n- **Date Produced**: March 23, 2022 8:05:07 PM UTC\r\n- **Commit**: 21ded4b588dd69d8c17e9f8ba21f02f1a83b11dc\r\n- **Branch**: refs/heads/release/7.0-preview3\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 7.0.0-preview.3.22118.1 to 7.0.0-preview.3.22173.1][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC21ded4b&targetVersion=GC21ded4b&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:25e87f7d-a2d9-48b3-a0c5-08da0b730a5a)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6305","RelatedDescription":"Closed or merged PR \"[release/7.0-preview3] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#6305)"},{"Id":"1178606616","IsPullRequest":false,"CreatedAt":"2022-03-23T20:07:38","Actor":"kayle","Number":"6304","RawContent":null,"Title":"TextFormatter.FormatLine has O(n^2) performance when called multiple times","State":"open","Body":"* .NET Core Version: .net 6\r\n* Windows version: 11\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? no\r\n  \r\n **Actual behavior:** \r\n\r\nTextFormatter.FormatLine has O(n^2) performance\r\n \r\n **Expected behavior:**\r\n \r\nTextFormatter.FormatLine exhibits linear performance\r\n\r\n **Minimal repro:**\r\n[WpfFontRepro.zip](https://github.com/dotnet/wpf/files/8336231/WpfFontRepro.zip)\r\n\r\n**Remarks**\r\n\r\nDisposing the formatted lines or creating new TextFormatter instances prevents the O(n^2) behavior.\r\n","Url":"https://github.com/dotnet/wpf/issues/6304","RelatedDescription":"Open issue \"TextFormatter.FormatLine has O(n^2) performance when called multiple times\" (#6304)"},{"Id":"1178067064","IsPullRequest":false,"CreatedAt":"2022-03-23T12:41:11","Actor":"vijayarasan","Number":"6302","RawContent":null,"Title":"DynamicResource is not working for Header property in DataGridTextColumn","State":"open","Body":"* .NET Core Version:  .Net 6.0\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n \r\n **Problem description:**\r\n \r\nI have defined the DynamicResource for Header property in DataGridTextColumn of DataGrid. Please refer the below code snippet,\r\n```XML\r\n<Application.Resources>\r\n        <System:String x:Key=\"firstName\"  >Before Change Name</System:String>\r\n        <System:String x:Key=\"secondName\" >After Change Name</System:String>\r\n    </Application.Resources>\r\n``` \r\n \r\n```XML\r\n<DataGridTextColumn Binding=\"{Binding CustomerID}\" \r\n                                    Header=\"{DynamicResource firstName}\" />\r\n```\r\n\r\nWhen change the resource at runtime Header property does not change the value in DataGrid. Can you please check and elaborate why DynamicResource is not working in DataGridTextColumn.Header property of DataGrid?\r\n\r\n**Note :** \r\nIf we use HeaderTemplate property in DataGridTextColumn its working properly in DataGrid. Please refer the code snippet,\r\n\r\n```XML\r\n<Window.Resources>\r\n        <DataTemplate x:Key=\"headerTemplate\">\r\n            <TextBlock Height=\"50\"                    \r\n                    Text=\"{DynamicResource firstName}\"\r\n                    TextWrapping=\"Wrap\" />\r\n        </DataTemplate>\r\n</Window.Resources>   \r\n\r\n<Grid>\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition />\r\n            <ColumnDefinition Width=\"200\" />\r\n        </Grid.ColumnDefinitions>\r\n        <DataGrid x:Name=\"dataGrid\"                                 \r\n                  ItemsSource=\"{Binding Orders}\"\r\n                  AutoGenerateColumns=\"False\">\r\n            <DataGrid.Columns>\r\n                <DataGridTextColumn Binding=\"{Binding OrderID}\" \r\n                                    HeaderTemplate=\"{StaticResource headerTemplate}\" />\r\n                <DataGridTextColumn Binding=\"{Binding CustomerID}\" \r\n                                    Header=\"{DynamicResource firstName}\" />\r\n                <DataGridTextColumn Binding=\"{Binding CustomerName}\" Header=\"Customer Name\" />\r\n                <DataGridTextColumn Binding=\"{Binding Country}\" Header=\"Country\" />\r\n                <DataGridTextColumn Binding=\"{Binding UnitPrice}\" Header=\"Unit Price\" />\r\n            </DataGrid.Columns>\r\n        </DataGrid>\r\n</Grid>\r\n```\r\nPlease refer the Screenshot for your reference\r\n<img width=\"404\" alt=\"Resource\" src=\"https://user-images.githubusercontent.com/58214164/159700077-e314133b-4517-4484-8503-ed7a1f269107.png\">\r\n\r\n\r\n **Minimal repro:**\r\nStep 1: Run the sample\r\n\r\nStep 2: Click the Change resource button\r\n\r\n **Actual behavior:**\r\nDynamicResource is not working for Header property in DataGridTextColumn\r\n \r\n**Expected behavior:**\r\nDynamicResource is working properly for Header property in DataGridTextColumn\r\n\r\nI have attached the sample for your reference.\r\n**Sample Link:** [DataGrid.zip](https://github.com/dotnet/wpf/files/8333012/DataGrid.zip)\r\n\r\nCan you please check and provide the solution to use the DynamicResource in Header property in DataGridTextColumn?\r\n\r\nRegards,\r\nVijayarasan S\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/6302","RelatedDescription":"Open issue \"DynamicResource is not working for Header property in DataGridTextColumn\" (#6302)"},{"Id":"1177785653","IsPullRequest":false,"CreatedAt":"2022-03-23T08:34:34","Actor":"wstaelens","Number":"6301","RawContent":null,"Title":"XPS documents memory leak (System.Windows.ContextLayoutManager+LayoutQueue+Request and XpsDocument.GetFixedDocumentSequence())","State":"open","Body":"originally posted at runtime but is for wpf: https://github.com/dotnet/runtime/issues/66756 \r\n\r\n### Description\r\n\r\nSituation: we have a windows service running in .net 6 with an admin panel in asp.net core 6 (+ blazor + pri nt drivers etc...)\r\n\r\n(complex solution, but for the memory leak mainly does this:)\r\n```\r\nPDF files dumped in hotfolder \r\n--> opened by our code and converted to XPS \r\n--> modifications to XPS file (e.g. adding barcode) \r\n--> converting back to PDF the single (or merged) modified XPS documents.\r\n--> dumping the resulting PDF files to a folder\r\n```\r\n\r\nWhen processing 5 documents, we see an increase of memory with ±1.5MB memory because `System.Windows.ContextLayoutManager+LayoutQueue+Request` and this is because of being called by   `XpsDocument.GetFixedDocumentSequence()` are never released or GC'd.\r\n\r\nEventually when our service runs for a time, it just runs out of memory.\r\n\r\n### Reproduction Steps\r\n\r\nunable to create a minimal repro-solution, our software should be run and configured to reproduce (if needed somebody can get in contact with me in PM).\r\n\r\n\r\nI guess these code in stackoverflow topics will demonstrate a similar issue:\r\nhttps://stackoverflow.com/questions/218681/opening-xps-document-in-net-causes-a-memory-leak\r\nhttps://stackoverflow.com/questions/51463348/c-sharp-reading-xps-causing-memory-leak\r\nhttps://stackoverflow.com/questions/12703796/creating-fixed-document-causes-memory-leak\r\nhttps://social.msdn.microsoft.com/Forums/en-US/becc0d42-908a-435c-a4ff-175843b83ad8/memory-leak-while-opening-the-xps-document-in-documentviewer\r\nhttps://social.msdn.microsoft.com/Forums/vstudio/en-US/b7fec24a-138b-4d3b-bdb3-cd4f0785e4ac/populating-collection-with-rendertargetbitmap-via-thread-causes-memory-leak\r\n\r\n### Expected behavior\r\n\r\nProcessing XPS documents should release memory.\r\n\r\n### Actual behavior\r\n\r\nWhen processing XPS documents the memory increases, after processing 5.000 - 10.000 documents, our service crashes due to OutOfMemory. (depending on the hardware and type of documents this number can be higher/lower...)\r\n\r\n### Regression?\r\n\r\nWe've seen this issue in every version of .net core, seen it last in .net 5 and after upgrading to .net 6 it is still present.\r\n\r\nThis memory leak and the issues have been out there already for a while (also in .NET Framework).\r\nsee:\r\n\r\nhttps://stackoverflow.com/questions/218681/opening-xps-document-in-net-causes-a-memory-leak\r\nhttps://stackoverflow.com/questions/51463348/c-sharp-reading-xps-causing-memory-leak\r\nhttps://stackoverflow.com/questions/12703796/creating-fixed-document-causes-memory-leak\r\nhttps://social.msdn.microsoft.com/Forums/en-US/becc0d42-908a-435c-a4ff-175843b83ad8/memory-leak-while-opening-the-xps-document-in-documentviewer \r\nhttps://social.msdn.microsoft.com/Forums/vstudio/en-US/b7fec24a-138b-4d3b-bdb3-cd4f0785e4ac/populating-collection-with-rendertargetbitmap-via-thread-causes-memory-leak\r\n\r\n\r\n### Known Workarounds\r\n\r\nNo working workaround for us... :sad\r\n\r\n### Configuration\r\n\r\nVS 2019 Pro 16.11.11\r\nVS 2022 17.2.0 Preview 2.0\r\nIssue occurred in every version we've been using .net 5, .net 6 \r\n\r\nWindows 10 21H1\r\nWindows 11 21H2\r\n\r\n### Other information\r\n\r\nsuggested fixes as preloading PresentationCore and/or PresentationFramework don't work (https://web.archive.org/web/20110404040352/http://support.microsoft.com/kb/942443) \r\n\r\nCalling updatelayout as suggested in stackoverflow also doesn't seem to work:\r\nhttps://stackoverflow.com/questions/218681/opening-xps-document-in-net-causes-a-memory-leak\r\nhttps://stackoverflow.com/questions/51463348/c-sharp-reading-xps-causing-memory-leak\r\nhttps://stackoverflow.com/questions/12703796/creating-fixed-document-causes-memory-leak\r\nhttps://stackoverflow.com/questions/50560580/memory-leak-at-xpsdocument-getfixeddocumentsequence\r\nhttps://social.msdn.microsoft.com/Forums/en-US/becc0d42-908a-435c-a4ff-175843b83ad8/memory-leak-while-opening-the-xps-document-in-documentviewer \r\nhttps://social.msdn.microsoft.com/Forums/vstudio/en-US/b7fec24a-138b-4d3b-bdb3-cd4f0785e4ac/populating-collection-with-rendertargetbitmap-via-thread-causes-memory-leak\r\n\r\n\r\nWe really hope the team investigates some time in XPS as it is really terrible, and it always being updated to \"Future\", \"Future\", \"Future\" 😠 .\r\nSee also:\r\n\r\n- https://github.com/dotnet/wpf/issues/6296\r\n\r\n- https://github.com/dotnet/runtime/issues/66756\r\n- https://github.com/dotnet/runtime/issues/51930\r\n- https://github.com/dotnet/wpf/issues/3546\r\n- https://github.com/dotnet/runtime/issues/51929#issuecomment-835808702\r\n- https://github.com/dotnet/wpf/issues/4000\r\n- https://github.com/dotnet/wpf/issues/4466 \r\n- https://github.com/dotnet/wpf/issues/2106 \r\n- https://github.com/dotnet/wpf/issues/2085 \r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/6301","RelatedDescription":"Open issue \"XPS documents memory leak (System.Windows.ContextLayoutManager+LayoutQueue+Request and XpsDocument.GetFixedDocumentSequence())\" (#6301)"},{"Id":"1176707071","IsPullRequest":true,"CreatedAt":"2022-03-22T12:50:56","Actor":"dotnet-maestro[bot]","Number":"6298","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220321.2\r\n- **Date Produced**: March 21, 2022 6:59:55 PM UTC\r\n- **Commit**: c8a95297e2622251c125aa5c0ef7c822275a792d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22168.2 to 7.0.0-beta.22171.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22168.2 to 7.0.0-beta.22171.2][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22168.2 to 7.0.0-beta.22171.2][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22168.2 to 7.0.0-beta.22171.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22168.2 to 7.0.0-beta.22171.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/bafd559...c8a9529\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6298","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6298)"},{"Id":"1176503717","IsPullRequest":false,"CreatedAt":"2022-03-22T09:27:09","Actor":"jroessel","Number":"6297","RawContent":null,"Title":"VisualCollection.RemoveAt breaks when multiple null entries exist","State":"open","Body":"RemoveAt takes the entry at the specified index and delegates to RemoveInternal with that item. However, if there are multiple `null` entries in the collection, RemoveInternal then only removes the first, not the one at the requested index.\r\n\r\nThis likely necessitates inlining part of what RemoveInternal does into RemoveAt, since those two approaches are a bit incompatible with each other.","Url":"https://github.com/dotnet/wpf/issues/6297","RelatedDescription":"Open issue \"VisualCollection.RemoveAt breaks when multiple null entries exist\" (#6297)"},{"Id":"1176467116","IsPullRequest":false,"CreatedAt":"2022-03-22T08:59:51","Actor":"wstaelens","Number":"6296","RawContent":null,"Title":"XPS huge memory issues","State":"open","Body":"* .NET Core Version: 5, 6, ... every version. \r\n* Windows version: Windows 10 21H2 Windows 10 21H1, Windows 11 21H2\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes, I guess so.\r\n\r\n **Problem description:**\r\n \r\nOpening a large XPS document requires a huge amount of memory.\r\nSame situation when merging several XPS documents into one XPS documents (the total amount of merged pages is: 500 - 1.000 - 5.000 or even 10.000).\r\n\r\n1.000 pages can easily run up to 15 or 20GB of memory. Depending on the document content and fonts being used.\r\n\r\nThere are several problems:\r\n- XPS documents need to be fully loaded into memory when working with them. When for example converting XPS documents, you loop over every page. Once a page has been loaded in memory it is being kept there. There is no way to only load a Visual per Visual (e.g. FixedPage per FixedPage (page per page)) as there is no signal on when the Visual/FixedPage is not needed anymore in order to unload it from memory. \r\n(Besides this, is it even possible to unload a single Visual/FixedPage from memory?)\r\n\r\n- When processing a document (e.g. adding content, printing, converting, ...) the memory can increase very rapidly to several GB's of memory. Especially when the source documents contain TrueType CID fonts, as when converting these to XPS (e.g. converting PDF files and draw them to XPS) the font and character information is being converted to polygons (a lot of doubles) and huge strings because the XML of the XPS is fully loaded into memory.\r\n\r\n- XPS uses doubles (EMF uses floats), because the nature of XPS that everything is kept in memory, the doubles take also a huge amount of memory. Same for strings as XPS = XML file = strings.\r\n\r\n\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n \r\nUnable to process and/or merge thousands of XPS documents. Even 500 pages can be problematic. Running out of memory.\r\n\r\n![MicrosoftTeams-image (12)](https://user-images.githubusercontent.com/7447285/159434111-b5db3b45-83d8-4fb9-8664-e6fdeb48c847.png)\r\nThis screenshot is a view of the memory usage over a short time where several XPS documents of the XPS printer are being processed when being combined together. The huge string is because of the XML content being loaded all into memory (because documents need to be merged, meaning everything should be loaded into memory.) Once the document has been merged, the source documents can be unloaded from memory. \r\n\r\nsituation: 1000 documents of 2 (or 3 pages) need to be merged into a big document .\r\nThe pages to be merged, can be \"random\", according to the logic of the configured product. Meaning that e.g. from document1 we can use page 2 and 3, from document 2 we can use page 1, from document 3 we can use all pages, from document 4 we can use the last page, etc...\r\nPseudo-code:\r\n\r\n```\r\nforeach (doc in documents) { mergeIntoBigFile(doc); }\r\n```\r\n\r\nIt is also possible that we first merge e.g. document 3, document 1, document 999, again document 1, document 2, document 36, document 1000. \r\nThe final code that does the merging, doesn't need any knowlegde of the original document(s). \r\n\r\n\r\n **Expected behavior:**\r\nBeing able to at least process and/or merge several hundreds and thousands of XPS documents. 500 pages shouldn't be a problem. Memory should be better under control.\r\n\r\nIn case it is possible to process/merge/whatever big XPS documents without having huge memory issues or unload pages, please show code samples as it seems to be impossible.\r\n\r\n **Minimal repro:**\r\n/ (unable to repro, if someone of msft PM's me I can help configuring a product to demonstrate).\r\n\r\n**Question**\r\nOne of the biggest questions:\r\nIs there a way to unload a FixedPage/Visual from memory?\r\n\r\n\r\n**General XPS issues and :shit: that nobody seems to care about**\r\n\r\n- https://github.com/dotnet/runtime/issues/66756\r\n- https://github.com/dotnet/runtime/issues/51930\r\n- https://github.com/dotnet/wpf/issues/3546\r\n- https://github.com/dotnet/runtime/issues/51929#issuecomment-835808702\r\n- https://github.com/dotnet/wpf/issues/4000\r\n- https://github.com/dotnet/wpf/issues/4466 \r\n- https://github.com/dotnet/wpf/issues/2106 \r\n- https://github.com/dotnet/wpf/issues/2085 \r\n\r\n( related: https://stackoverflow.com/questions/2342623/how-to-generate-and-print-large-xps-documents-in-wpf  and https://social.msdn.microsoft.com/Forums/en-US/f3eeaf1e-e397-44b8-819a-8a79d1e5baa5/batch-printing-of-visuals-to-xps-leads-to-outofmemoryexception )","Url":"https://github.com/dotnet/wpf/issues/6296","RelatedDescription":"Open issue \"XPS huge memory issues\" (#6296)"},{"Id":"1176425017","IsPullRequest":true,"CreatedAt":"2022-03-22T08:18:56","Actor":"dipeshmsft","Number":"6295","RawContent":null,"Title":"Fixes rounding error while glyphrun serialization","State":"open","Body":"Fixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\nWhen we serialize a GlyphRun to an XPS file, the advance widths for each glyph are rounded to an integer separately, thus producing a significant difference between the rendered output in the file and on the screen. This PR fixes the rounding, by taking into account the cumulative rounding error from the previous glyphs while rounding the current glyph.\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nAd-Hoc testing. Tried with different sample apps.\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n","Url":"https://github.com/dotnet/wpf/pull/6295","RelatedDescription":"Open PR \"Fixes rounding error while glyphrun serialization\" (#6295)"},{"Id":"1176412441","IsPullRequest":false,"CreatedAt":"2022-03-22T08:05:54","Actor":"aquinn39","Number":"6294","RawContent":null,"Title":"WindowsFormsHost does not scale children correctly when the DPI is changed","State":"open","Body":"* .NET Core Version:  .Net 6.0.3\r\n* Windows version: Windows 11 21H2 (OS Build 22000.556)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes (Except for some of the issues with NumericUpDown - some of these issues did not exist in .Net Framework 4.8)\r\n\r\n\r\n \r\n **Problem description:**\r\nWhen scaling to a new DPI using Per Monitor V2, the contents of WindowsFormsHosts often do not scale correctly - this issue is worse in .Net 6 compared to .Net Framework 4.8 (I have not tested with .Net Core 3 or .Net 5). The main issue appears to be that the height and width of the child window hosting the Windows Forms control does not scale at all, and in .Net 6 the NumericUpDown control completely ignores DPI changes.\r\n\r\n\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n Below is a screenshot of a WPF window with some Forms controls in it, opened on a monitor with the DPI scaling set to 100% and set to the main monitor:\r\n![image](https://user-images.githubusercontent.com/43898231/159429999-4dde4b8e-6204-4530-8377-d05014adeba3.png)\r\nAfter moving the window over to a monitor with a scaling of 225%, it looks like this:\r\n![image](https://user-images.githubusercontent.com/43898231/159430096-1d7651d0-53e8-406c-8998-f16ec7dba3b8.png)\r\nNote that the height and width of all the Forms controls did not scale at all. While the font size scales fine on most of the controls in the screenshot, it completely fails on the NumericUpDown control - the control seems to ignore the change in DPI completely.\r\nIn regards to the NumericUpDown control, I made the exact same project in .Net Framework 4.8 and moved the window over from the 100% scaling monitor to the 225% scaling one and here is a screenshot of that:\r\n![image](https://user-images.githubusercontent.com/43898231/159430650-f1aa69dd-8c6e-4d85-bbad-5304b00ec9fc.png)\r\nNote that the text and up/down buttons do scale correctly for the NumericUpDown control in .Net Framework 4.8 - this seems to have been broken somewhere in between then and .Net 6. The other issues still seem to persist.\r\n\r\nIf I open the .Net 6 WPF window directly on the monitor with 225% scaling with that monitor set as my main one, it scales nicely:\r\n![image](https://user-images.githubusercontent.com/43898231/159431557-9dee000c-1eb0-499a-a213-f33537d2df38.png)\r\nBut then if I move it over to the 100% scaling monitor, I get this:\r\n![image](https://user-images.githubusercontent.com/43898231/159431633-1197fecb-9874-4259-acce-155372481316.png)\r\n\r\nSo to sum up, the physical height and width of these Windows Forms controls is not changing at all when the DPI changes. I have used Visual Studio to check the logical height and width of the WindowsFormsHost, and it remains correct after the DPI change, but the physical height and width of the child window hosting the Windows Forms content appears to not change.\r\n\r\nI have uploaded the demo project I used for the screenshots. Both are very basic apps with as many modern DPI scaling features enabled as I could (such as in the Manifest and App.config - see the minimal repo for specifics) and with the DPI scaling mode set to Per Monitor V2. Also note that the same issues seem to occur if the DPI for the monitor the WPF window is on is changed, not just if dragged to a new monitor.\r\n\r\n **Expected behavior:**\r\nWhen moving from the 100% DPI monitor to the 225% one, the controls should scale like so:\r\n![image](https://user-images.githubusercontent.com/43898231/159431557-9dee000c-1eb0-499a-a213-f33537d2df38.png)\r\n\r\nAlso for comparison, here is a .Net 6 Windows Form with the same controls on the 100% DPI monitor:\r\n![image](https://user-images.githubusercontent.com/43898231/159434552-f905acd8-c63b-4d9d-9741-888792529eff.png)\r\nAnd now moved over the the 225% one:\r\n![image](https://user-images.githubusercontent.com/43898231/159433331-e22971ec-3f6b-4263-98a8-106c6c1795d6.png)\r\nIt scales almost perfectly except for the up/down buttons in the NumericUpDown box.\r\n **Minimal repro:**\r\n[WpfApp1.zip](https://github.com/dotnet/wpf/files/8322247/WpfApp1.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/6294","RelatedDescription":"Open issue \"WindowsFormsHost does not scale children correctly when the DPI is changed\" (#6294)"},{"Id":"1176188836","IsPullRequest":true,"CreatedAt":"2022-03-22T06:46:40","Actor":"singhashish-wpf","Number":"6291","RawContent":null,"Title":"Update branding iteration to 4","State":"closed","Body":"\r\n## Description\r\nUpdate branding iteration to 4\r\n","Url":"https://github.com/dotnet/wpf/pull/6291","RelatedDescription":"Closed or merged PR \"Update branding iteration to 4\" (#6291)"},{"Id":"1176289218","IsPullRequest":true,"CreatedAt":"2022-03-22T05:34:40","Actor":"paulozemek","Number":"6293","RawContent":null,"Title":"Avoid excessive calls to the PropertyValues index getter.","State":"open","Body":"## Description\r\nIn some places the PropertyValues indexer was called multiple times. This change just stores the value into a local once then use the local variable instead.\r\n\r\n## Customer Impact\r\nNo noticeable difference.\r\n\r\n## Regression\r\nNo.\r\n","Url":"https://github.com/dotnet/wpf/pull/6293","RelatedDescription":"Open PR \"Avoid excessive calls to the PropertyValues index getter.\" (#6293)"},{"Id":"1176195684","IsPullRequest":true,"CreatedAt":"2022-03-22T02:49:44","Actor":"singhashish-wpf","Number":"6292","RawContent":null,"Title":"Test Internal pools for build","State":"open","Body":"General Testing of wpf build on Internal pool before rollout for errors\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6292","RelatedDescription":"Open PR \"Test Internal pools for build\" (#6292)"},{"Id":"1175476599","IsPullRequest":true,"CreatedAt":"2022-03-21T14:33:06","Actor":"stephentoub","Number":"6288","RawContent":null,"Title":"Avoid unnecessary allocations/code in ReaderWriterLockWrapper","State":"open","Body":"## Description\r\n\r\nBy default the code was using structs as the IDisposables returned to the caller, resulting in those structs being boxed on every access.  The code was also for some reason maintaining two code paths based on a switch, but the only impact of that would be on whether new instances would be allocated on each call, which is not something we need to guard with a switch (that's seemingly unrelated).  The code is also allocating a new delegate for every enter and exit operation.  This commit simplifies all that and avoids all that unnecessary allocation and duplication.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocation and overhead\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal. Only issue would be if callers were for some reason depending on a different object reference being returned from the Read/WriteLock properties on every access.","Url":"https://github.com/dotnet/wpf/pull/6288","RelatedDescription":"Open PR \"Avoid unnecessary allocations/code in ReaderWriterLockWrapper\" (#6288)"},{"Id":"1174398602","IsPullRequest":true,"CreatedAt":"2022-03-20T00:00:25","Actor":"stephentoub","Number":"6285","RawContent":null,"Title":"Change most non-generic sorts to be generic","State":"open","Body":"## Description\r\n\r\nEspecially for the sorts based on int[], this avoids boxing potentially huge numbers of ints.  Even for classes, it avoids unnecessary casting and expensive Array.Get/SetValue calls, and switching to a delegate avoids a top-level allocation for the comparer inside the current Array.Sort implementation.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocation, interface dispatch, expensive Array.Get/SetValue calls, etc.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6285","RelatedDescription":"Open PR \"Change most non-generic sorts to be generic\" (#6285)"},{"Id":"1174253643","IsPullRequest":true,"CreatedAt":"2022-03-19T12:47:53","Actor":"dotnet-maestro[bot]","Number":"6284","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220318.2\r\n- **Date Produced**: March 18, 2022 11:42:47 PM UTC\r\n- **Commit**: bafd55901b50d6fc3507c8ed96a7777fcca1796f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/251034e...bafd559\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6284","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6284)"},{"Id":"1173641036","IsPullRequest":true,"CreatedAt":"2022-03-18T14:15:20","Actor":"stephentoub","Number":"6282","RawContent":null,"Title":"Avoid enumerator boxing in XamlSchemaContext.UpdateNamespaceByUriList","State":"open","Body":"## Description\r\n\r\nUpdateNamespaceByUriList has an `IList<T>` but is enumerating it with foreach, resulting in boxing the underlying list or array's enumerator.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocation.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6282","RelatedDescription":"Open PR \"Avoid enumerator boxing in XamlSchemaContext.UpdateNamespaceByUriList\" (#6282)"},{"Id":"1173634428","IsPullRequest":true,"CreatedAt":"2022-03-18T14:08:49","Actor":"stephentoub","Number":"6281","RawContent":null,"Title":"Avoid boxing list/array enumerator in CreateTextLSRuns","State":"open","Body":"## Description\r\n\r\nGetTextShapeableSymbols returns an `IList<T>`, but it's getting treated as an `ICollection<T>` and thus enumerated.  We can index into it instead to avoid some interface dispatch and boxing the enumerator of what's typically a `List<T>` or a `T[]`.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocation/overhead.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6281","RelatedDescription":"Open PR \"Avoid boxing list/array enumerator in CreateTextLSRuns\" (#6281)"},{"Id":"1173626013","IsPullRequest":true,"CreatedAt":"2022-03-18T14:00:25","Actor":"stephentoub","Number":"6280","RawContent":null,"Title":"Some improvements to FrugalList","State":"open","Body":"## Description\r\n\r\n- FrugalStructList's `ICollection<T>`-based constructor uses foreach to enumerate the contents of the collection.  If it's an `IList<T>`, we can instead index and avoid allocating the enumerator.\r\n- Avoid multiple interface calls to `ICollection<T>.Count` in FrugalStructList's ctor\r\n- Delete a dead ctor on `ArrayItemList<T>`.  That ctor was the only reason an array field may have been left null, so we can also remove subsequent null checks when accessing that array.\r\n- Use Span/Array in ArrayItemList for Clear, Contains, IndexOf, ToArray, and CopyTo rather than open-coding them\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocation and interface dispatch\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6280","RelatedDescription":"Open PR \"Some improvements to FrugalList\" (#6280)"},{"Id":"1173592096","IsPullRequest":true,"CreatedAt":"2022-03-18T13:27:50","Actor":"stephentoub","Number":"6279","RawContent":null,"Title":"Avoid boxing list enumerator in XamlObjectWriter.Logic_ConvertPositionalParamsToArgs","State":"open","Body":"## Description\r\n\r\nLogic_ConvertPositionalParamsToArgs is using foreach with an `IList<>` it gets back from `GetPositionalParameters`.  Doing so will end up boxing the enumerator, typically of a `List<T>`, when we can instead just use a for loop with the `IList<>`, avoiding the boxing and reducing interface calls.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocation and interface dispatch.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6279","RelatedDescription":"Open PR \"Avoid boxing list enumerator in XamlObjectWriter.Logic_ConvertPositionalParamsToArgs\" (#6279)"},{"Id":"1173534718","IsPullRequest":true,"CreatedAt":"2022-03-18T12:49:36","Actor":"dotnet-maestro[bot]","Number":"6278","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220317.4\r\n- **Date Produced**: March 17, 2022 10:58:04 PM UTC\r\n- **Commit**: 251034e7687335886c3774a0138a8584a782b0eb\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/c90e2d9...251034e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6278","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6278)"},{"Id":"1173098427","IsPullRequest":true,"CreatedAt":"2022-03-18T01:53:00","Actor":"stephentoub","Number":"6276","RawContent":null,"Title":"Avoid unnecessary byte[] allocation in Baml2006Reader.Process_Header","State":"open","Body":"## Description\r\n\r\nBaml2006Reader.Process_Header skips past data from the reader, but it does so by calling BinaryReader.ReadBytes, which allocates, fills, and returns an array, which Process_Header promptly ignores.  We can instead just change the position on the stream, or worst case if it's not seekable, read into a temporarily rented array.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary array allocations.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal.","Url":"https://github.com/dotnet/wpf/pull/6276","RelatedDescription":"Open PR \"Avoid unnecessary byte[] allocation in Baml2006Reader.Process_Header\" (#6276)"},{"Id":"1172934909","IsPullRequest":true,"CreatedAt":"2022-03-17T21:23:54","Actor":"stephentoub","Number":"6275","RawContent":null,"Title":"Remove some unnecessary StringBuilders","State":"open","Body":"## Description\r\n\r\nThere are a bunch of StringBuilders being created that aren't necessary.  This removes some of them.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary overheads.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal (basically just if there were typos)","Url":"https://github.com/dotnet/wpf/pull/6275","RelatedDescription":"Open PR \"Remove some unnecessary StringBuilders\" (#6275)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-03-25T03:30:30.1491416Z","RunDurationInMilliseconds":490}