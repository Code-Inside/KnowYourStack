{"Data":{"GitHub":{"Issues":[{"Id":"1174398602","IsPullRequest":true,"CreatedAt":"2022-03-20T00:00:25","Actor":"stephentoub","Number":"6285","RawContent":null,"Title":"Change most non-generic sorts to be generic","State":"open","Body":"## Description\r\n\r\nEspecially for the sorts based on int[], this avoids boxing potentially huge numbers of ints.  Even for classes, it avoids unnecessary casting and expensive Array.Get/SetValue calls, and switching to a delegate avoids a top-level allocation for the comparer inside the current Array.Sort implementation.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocation, interface dispatch, expensive Array.Get/SetValue calls, etc.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6285","RelatedDescription":"Open PR \"Change most non-generic sorts to be generic\" (#6285)"},{"Id":"1174253643","IsPullRequest":true,"CreatedAt":"2022-03-19T12:47:53","Actor":"dotnet-maestro[bot]","Number":"6284","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220318.2\r\n- **Date Produced**: March 18, 2022 11:42:47 PM UTC\r\n- **Commit**: bafd55901b50d6fc3507c8ed96a7777fcca1796f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22167.4 to 7.0.0-beta.22168.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/251034e...bafd559\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6284","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6284)"},{"Id":"1173696442","IsPullRequest":false,"CreatedAt":"2022-03-18T15:06:59","Actor":"vijayarasan","Number":"6283","RawContent":null,"Title":"ToolTip immediately closed when showing in Button while project create with .Net 6","State":"open","Body":"* .NET Core Version: 6.0\r\n \r\n **Problem description:**\r\n I am using button and defined the tooltip like below mentioned code snippet,\r\n```XML  \r\n<Button x:Name=\"btn\"  Content=\"Button\"  Width=\"150\" Height=\"30\" >\r\n            <ToolTipService.ToolTip>\r\n                <ToolTip Background=\"#FFDB000C\" Content=\"Hello\" />\r\n            </ToolTipService.ToolTip>\r\n </Button>\r\n```\r\n\r\nWhen hovering to the button ToolTip immediately disappear. The reported problem occurs while using with VS2022 Preview, Scaling 150 and .Net 6.0. \r\n \r\n I have also set the ShowDuration and InitialDelayDuration, but no effect.\r\n \r\n **Note :** The reported problem does not occurs in .Net 5.0 \r\n \r\n **Actual behavior:** \r\n ToolTip immediately closed when showing in Button while project create with .Net 6\r\n \r\n **Expected behavior:**\r\n ToolTip properly display when showing in Button while project create with .Net 6\r\n\r\n**Sample Link:**  [ToolTipDemo.zip](https://github.com/dotnet/wpf/files/8305470/ToolTipDemo.zip)\r\n\r\nCan you please check and share any idea to resolve this issue?\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/6283","RelatedDescription":"Open issue \"ToolTip immediately closed when showing in Button while project create with .Net 6\" (#6283)"},{"Id":"1173641036","IsPullRequest":true,"CreatedAt":"2022-03-18T14:15:20","Actor":"stephentoub","Number":"6282","RawContent":null,"Title":"Avoid enumerator boxing in XamlSchemaContext.UpdateNamespaceByUriList","State":"open","Body":"## Description\r\n\r\nUpdateNamespaceByUriList has an `IList<T>` but is enumerating it with foreach, resulting in boxing the underlying list or array's enumerator.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocation.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6282","RelatedDescription":"Open PR \"Avoid enumerator boxing in XamlSchemaContext.UpdateNamespaceByUriList\" (#6282)"},{"Id":"1173634428","IsPullRequest":true,"CreatedAt":"2022-03-18T14:08:49","Actor":"stephentoub","Number":"6281","RawContent":null,"Title":"Avoid boxing list/array enumerator in CreateTextLSRuns","State":"open","Body":"## Description\r\n\r\nGetTextShapeableSymbols returns an `IList<T>`, but it's getting treated as an `ICollection<T>` and thus enumerated.  We can index into it instead to avoid some interface dispatch and boxing the enumerator of what's typically a `List<T>` or a `T[]`.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocation/overhead.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6281","RelatedDescription":"Open PR \"Avoid boxing list/array enumerator in CreateTextLSRuns\" (#6281)"},{"Id":"1173626013","IsPullRequest":true,"CreatedAt":"2022-03-18T14:00:25","Actor":"stephentoub","Number":"6280","RawContent":null,"Title":"Some improvements to FrugalList","State":"open","Body":"## Description\r\n\r\n- FrugalStructList's `ICollection<T>`-based constructor uses foreach to enumerate the contents of the collection.  If it's an `IList<T>`, we can instead index and avoid allocating the enumerator.\r\n- Avoid multiple interface calls to `ICollection<T>.Count` in FrugalStructList's ctor\r\n- Delete a dead ctor on `ArrayItemList<T>`.  That ctor was the only reason an array field may have been left null, so we can also remove subsequent null checks when accessing that array.\r\n- Use Span/Array in ArrayItemList for Clear, Contains, IndexOf, ToArray, and CopyTo rather than open-coding them\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocation and interface dispatch\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6280","RelatedDescription":"Open PR \"Some improvements to FrugalList\" (#6280)"},{"Id":"1173592096","IsPullRequest":true,"CreatedAt":"2022-03-18T13:27:50","Actor":"stephentoub","Number":"6279","RawContent":null,"Title":"Avoid boxing list enumerator in XamlObjectWriter.Logic_ConvertPositionalParamsToArgs","State":"open","Body":"## Description\r\n\r\nLogic_ConvertPositionalParamsToArgs is using foreach with an `IList<>` it gets back from `GetPositionalParameters`.  Doing so will end up boxing the enumerator, typically of a `List<T>`, when we can instead just use a for loop with the `IList<>`, avoiding the boxing and reducing interface calls.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocation and interface dispatch.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6279","RelatedDescription":"Open PR \"Avoid boxing list enumerator in XamlObjectWriter.Logic_ConvertPositionalParamsToArgs\" (#6279)"},{"Id":"1173534718","IsPullRequest":true,"CreatedAt":"2022-03-18T12:49:36","Actor":"dotnet-maestro[bot]","Number":"6278","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220317.4\r\n- **Date Produced**: March 17, 2022 10:58:04 PM UTC\r\n- **Commit**: 251034e7687335886c3774a0138a8584a782b0eb\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22166.1 to 7.0.0-beta.22167.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/c90e2d9...251034e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6278","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6278)"},{"Id":"1173136380","IsPullRequest":true,"CreatedAt":"2022-03-18T03:07:35","Actor":"dotnet-maestro[bot]","Number":"6277","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n\r\n\r\n\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220319.2\r\n- **Date Produced**: March 20, 2022 5:03:20 AM UTC\r\n- **Commit**: 624eda04533ca6799fdf3075949111b96b6ba4ed\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22166.2 to 7.0.0-preview.3.22169.2][11]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22166.2 to 7.0.0-preview.3.22169.2][11]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22166.1 to 7.0.0-preview.3.22167.8][12]\r\n\r\n[11]: https://github.com/dotnet/winforms/compare/f2eb3f7...624eda0\r\n[12]: https://github.com/dotnet/runtime/compare/a5f3f96...5371203\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6277","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/winforms\" (#6277)"},{"Id":"1173098427","IsPullRequest":true,"CreatedAt":"2022-03-18T01:53:00","Actor":"stephentoub","Number":"6276","RawContent":null,"Title":"Avoid unnecessary byte[] allocation in Baml2006Reader.Process_Header","State":"open","Body":"## Description\r\n\r\nBaml2006Reader.Process_Header skips past data from the reader, but it does so by calling BinaryReader.ReadBytes, which allocates, fills, and returns an array, which Process_Header promptly ignores.  We can instead just change the position on the stream, or worst case if it's not seekable, read into a temporarily rented array.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary array allocations.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal.","Url":"https://github.com/dotnet/wpf/pull/6276","RelatedDescription":"Open PR \"Avoid unnecessary byte[] allocation in Baml2006Reader.Process_Header\" (#6276)"},{"Id":"1172934909","IsPullRequest":true,"CreatedAt":"2022-03-17T21:23:54","Actor":"stephentoub","Number":"6275","RawContent":null,"Title":"Remove some unnecessary StringBuilders","State":"open","Body":"## Description\r\n\r\nThere are a bunch of StringBuilders being created that aren't necessary.  This removes some of them.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary overheads.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal (basically just if there were typos)","Url":"https://github.com/dotnet/wpf/pull/6275","RelatedDescription":"Open PR \"Remove some unnecessary StringBuilders\" (#6275)"},{"Id":"1172852904","IsPullRequest":true,"CreatedAt":"2022-03-17T19:59:12","Actor":"stephentoub","Number":"6274","RawContent":null,"Title":"Run some built-in .NET SDK perf analyzers over several WPF assemblies","State":"open","Body":"## Description\r\n\r\nOver the last several releases of .NET, the SDK has added a multitude of analyzers to help find and flag opportunities for perf improvements.  I ran several of those analyzers over a few of the assemblies and applied the auto-fixers; I also code reviewed each fix and tweaked a handfull.\r\n\r\n## Customer Impact\r\n\r\nMany of these changes contribute small but meaningful reductions in overhead.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6274","RelatedDescription":"Open PR \"Run some built-in .NET SDK perf analyzers over several WPF assemblies\" (#6274)"},{"Id":"1172828356","IsPullRequest":false,"CreatedAt":"2022-03-17T19:31:21","Actor":"NWoodsman","Number":"6273","RawContent":null,"Title":"System.Windows.Media.Pen.DashCap uses PenLineCap instead of PenDashCap","State":"open","Body":"* .NET Core Version: 6.0\r\n* Windows version: 10 build 19043.1586\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? **No**\r\n\r\n **Problem description:**\r\n\r\n`System.Windows.Media.Pen.DashCap` is of type `enum` `System.Windows.Media.PenLineCap` . The namespace has `enum` `System.Windows.Media.PenDashCap` which by the name seems to be the correct enum for this property. \r\n\r\nThe reference source for .Net 4.8 has the following (internal) comment reinforcing the mismatched type.\r\n\r\n```\r\n/// <summary>\r\n        /// Pen - Initializes the brush from the parameters.\r\n        /// </summary>\r\n        /// <param name=\"brush\"> The Pen's Brush. </param>\r\n        /// <param name=\"thickness\"> The Pen's thickness. </param>\r\n        /// <param name=\"startLineCap\"> The PenLineCap which applies to the start of the stroke. </param>\r\n        /// <param name=\"endLineCap\"> The PenLineCap which applies to the end of the stroke. </param>\r\n        /// <param name=\"dashCap\"> The PenDashCap which applies to the ends of each dash. </param> //<--------- Incorrect\r\n        /// <param name=\"lineJoin\"> The PenLineJoin. </param>\r\n        /// <param name=\"miterLimit\"> The miter limit. </param>\r\n        /// <param name=\"dashStyle\"> The dash style. </param>\r\n```\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n \r\nUse the `PenLineCap`  enum in the property `Pen.DashCap`\r\n\r\n **Expected behavior:**\r\n\r\nExpected to use `System.Windows.Media.PenDashCap` in the property `Pen.DashCap` \r\n \r\n **Minimal repro:**\r\n\r\nSee the docs:\r\n\r\nhttps://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/Media/Pen.cs,abab5dce39ebd2ad\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.windows.media.pendashcap?view=windowsdesktop-6.0\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.windows.media.pen?view=windowsdesktop-6.0\r\n\r\nMaybe `PenDashCap` should be removed from the namespace, I can't find any used instances of the enum.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/6273","RelatedDescription":"Open issue \"System.Windows.Media.Pen.DashCap uses PenLineCap instead of PenDashCap\" (#6273)"},{"Id":"1172682594","IsPullRequest":true,"CreatedAt":"2022-03-17T18:02:10","Actor":"stephentoub","Number":"6272","RawContent":null,"Title":"Use span slice instead of substring in AbbreviatedGeometryParser.ReadNumber","State":"open","Body":"## Description\r\n\r\nAbbreviatedGeometryParser.ReadNumber is using Substring to pass to Convert.ToDouble the relevant portion of the string to parse. We can instead just pass in a span slice to double.Parse (which Convert.ToDouble delegates to after a null check that's irrelevant here).\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocations.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6272","RelatedDescription":"Open PR \"Use span slice instead of substring in AbbreviatedGeometryParser.ReadNumber\" (#6272)"},{"Id":"1172532689","IsPullRequest":true,"CreatedAt":"2022-03-17T16:11:10","Actor":"stephentoub","Number":"6271","RawContent":null,"Title":"Remove substring allocation from Baml2006Reader.Logic_GetFullXmlns","State":"open","Body":"## Description\r\n\r\nWhen getting the assembly name, we can slice out the piece that's needed rather than allocating a substring.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary string allocations.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6271","RelatedDescription":"Open PR \"Remove substring allocation from Baml2006Reader.Logic_GetFullXmlns\" (#6271)"},{"Id":"1172494985","IsPullRequest":true,"CreatedAt":"2022-03-17T15:44:08","Actor":"stephentoub","Number":"6270","RawContent":null,"Title":"Don't allocate fallback name in XamlNamespace.GetXamlType unless it's needed","State":"open","Body":"## Description\r\n\r\nXamlNamespace.GetXamlType is always concatenating a string together, but that string is only used on a fallback path.  So only create it on the fallback path.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary string allocation.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6270","RelatedDescription":"Open PR \"Don't allocate fallback name in XamlNamespace.GetXamlType unless it's needed\" (#6270)"},{"Id":"1172487002","IsPullRequest":true,"CreatedAt":"2022-03-17T15:38:52","Actor":"stephentoub","Number":"6269","RawContent":null,"Title":"Avoid exceptional string allocation in StaticExtension.ProvideValue","State":"open","Body":"## Description\r\n\r\nProvideValue is frequently creating a string that only ends up being used to populate an exception.  We can just delay creating the string until the exception is thrown so that we don't create it in success cases.\r\n\r\n## Customer Impact\r\n\r\nUnnecessary allocations meant only for an exceptional path showing up in success paths.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal","Url":"https://github.com/dotnet/wpf/pull/6269","RelatedDescription":"Open PR \"Avoid exceptional string allocation in StaticExtension.ProvideValue\" (#6269)"},{"Id":"1172394936","IsPullRequest":true,"CreatedAt":"2022-03-17T13:33:31","Actor":"stephentoub","Number":"6268","RawContent":null,"Title":"Remove unnecessary string and string[] allocations from MS.Internal.ContentType","State":"open","Body":"## Description\r\n\r\nMS.Internal.ContentType is incurring a multitude of unnecessary allocations.  It's parsing input by Substring'ing along it and Trim'ing along it to find the next piece, but only a subset of those strings are actually saved. It's using string.Split just to get two strings, resulting in a string[].  Etc.\r\n\r\n## Customer Impact\r\n\r\nApps using this indirectly incur unnecessary overhead.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal.","Url":"https://github.com/dotnet/wpf/pull/6268","RelatedDescription":"Open PR \"Remove unnecessary string and string[] allocations from MS.Internal.ContentType\" (#6268)"},{"Id":"1172314379","IsPullRequest":true,"CreatedAt":"2022-03-17T12:46:11","Actor":"dotnet-maestro[bot]","Number":"6267","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220316.1\r\n- **Date Produced**: March 16, 2022 4:58:30 PM UTC\r\n- **Commit**: c90e2d9f3d3e2b471a078f949f2a2fea6af2627d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22166.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/81001b4...c90e2d9\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6267","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6267)"},{"Id":"1171883806","IsPullRequest":true,"CreatedAt":"2022-03-17T03:20:56","Actor":"ThomasGoulet73","Number":"6266","RawContent":null,"Title":"Disable Indeterminate animation when hiding ProgressBar","State":"open","Body":"Fixes dotnet/wpf#6264\r\n\r\n## Description\r\nDisable Indeterminate animation when hiding ProgressBar. Fixes a performance regression introduced in Aero2 theme (Windows 8 or newer)\r\n\r\n## Customer Impact\r\nBetter performance when hiding an indeterminate progress bar with the theme Aero2.\r\n\r\n## Regression\r\nPerformance regression introduced in Aero2 theme (Windows 8 or newer).\r\n\r\n## Testing\r\nTested with the sample in #6264 and a combination of Visibility and Indeterminate to validate that this PR does not break existing behavior.\r\n\r\n## Risk\r\nLow.","Url":"https://github.com/dotnet/wpf/pull/6266","RelatedDescription":"Open PR \"Disable Indeterminate animation when hiding ProgressBar\" (#6266)"},{"Id":"1171578487","IsPullRequest":true,"CreatedAt":"2022-03-16T22:22:34","Actor":"dotnet-maestro[bot]","Number":"6263","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220316.2\r\n- **Date Produced**: March 16, 2022 8:56:37 PM UTC\r\n- **Commit**: f2eb3f7f3cb5b024a560a0f8b51ed0f36d274d2d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22165.2 to 7.0.0-preview.3.22166.2][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22165.2 to 7.0.0-preview.3.22166.2][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22165.1 to 7.0.0-preview.3.22166.1][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/7deb7cc...f2eb3f7\r\n[2]: https://github.com/dotnet/runtime/compare/bc5e386...a5f3f96\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6263","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6263)"},{"Id":"1171606060","IsPullRequest":true,"CreatedAt":"2022-03-16T22:08:16","Actor":"stephentoub","Number":"6265","RawContent":null,"Title":"Avoid unnecessary enumerator allocations in XamlDirective.GetHashCode","State":"open","Body":"## Description\r\n\r\nWe can just index into the ReadOnlyCollection rather than iterating it via IEnumerator.  We can also avoid unnecessary collection allocations when all of our internal usage that already has an immutable ReadOnlyCollection goes through the internal constructor.\r\n\r\n## Customer Impact\r\n\r\nThese XamlDirective instances are frequently stored in Dictionary's, resulting in every GetHashCode call by the dictionary allocating an enumerator.\r\n\r\n## Regression\r\n\r\nNo\r\n\r\n## Testing\r\n\r\nCI\r\n\r\n## Risk\r\n\r\nMinimal.","Url":"https://github.com/dotnet/wpf/pull/6265","RelatedDescription":"Open PR \"Avoid unnecessary enumerator allocations in XamlDirective.GetHashCode\" (#6265)"},{"Id":"1171600449","IsPullRequest":false,"CreatedAt":"2022-03-16T22:00:34","Actor":"ryanmolden","Number":"6264","RawContent":null,"Title":"WPF ProgressBars with IsIndeterminate = true appear to leak animations, since .NET 4.5","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`): All since .NET 4.5\r\n* Windows version: (`winver`): Any\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n\r\n**Problem description:** WPF's ProgressBar uses a well-known named template part (GlowingRectTemplateName which is == PART_GlowRect) in order to control the indeterminate animation. Specifically it wants to stop the animation when the control becomes invisible.\r\n\r\nSince aero2.normalcolor.xaml was introduced this no longer works as the template has no PART_GlowRect and instead triggers the animation based on the Indeterminate VisualState.\r\n\r\nSpecifically see \r\n\r\nCode here: https://github.com/dotnet/wpf/blob/89d172db0b7a192de720c6cfba5e28a1e7d46123/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Controls/ProgressBar.cs#L62\r\n\r\nand here: https://github.com/dotnet/wpf/blob/89d172db0b7a192de720c6cfba5e28a1e7d46123/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Controls/ProgressBar.cs#L220\r\n\r\nand template here (other templates have similar issues, other than aero.normalcolor.xaml): https://github.com/dotnet/wpf/blob/89d172db0b7a192de720c6cfba5e28a1e7d46123/src/Microsoft.DotNet.Wpf/src/Themes/PresentationFramework.Aero2/Themes/Aero2.NormalColor.xaml#L4428\r\n\r\nThis means that for stock WPF ProgressBars with IsIndeterminate=True, the animations will run forever regardless of whether the animation is visible. This is esepcially bad on high-refresh rate monitors as the callbacks occur much more frequently and keep what could be an idle system non-idle preventing battery saving mode switches on laptops.\r\n \r\n**Actual behavior:** Animations run forever\r\n \r\n**Expected behavior:** Animations stop when the control becomes invisible, as the code appears to facilitate.\r\n \r\n**Minimal repro:**\r\n\r\nMainWindow.xaml\r\n\r\n```\r\n<Window x:Class=\"AnimationTestApp.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:AnimationTestApp\"\r\n        xmlns:system=\"clr-namespace:System;assembly=mscorlib\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n  <Grid Name=\"HostGrid\">\r\n    <Grid.ColumnDefinitions>\r\n      <ColumnDefinition/>\r\n    </Grid.ColumnDefinitions>\r\n    <Grid Grid.Column=\"0\" Name=\"HostElement_Collapsed\" Margin=\"10\" VerticalAlignment=\"Stretch\">\r\n      <ProgressBar Width=\"100\" Height=\"50\" IsIndeterminate=\"True\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\"/>\r\n    </Grid>\r\n  </Grid>\r\n</Window>\r\n\r\n``` \r\nMainWindow.xaml.cs\r\n \r\n```\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\nusing System.Windows.Controls;\r\n \r\nnamespace AnimationTestApp\r\n{\r\n    public partial class MainWindow : Window\r\n    {\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            \r\n            Task.Delay(2000).ContinueWith((t) =>\r\n                {\r\n                    return Dispatcher.InvokeAsync(() =>\r\n                        {\r\n                            Grid panel = (Grid)this.FindName(\"HostElement_Collapsed\");\r\n                            if (panel != null)\r\n                                panel.Visibility = Visibility.Collapsed;\r\n                        }).Task;\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\n```\r\nPlacing a breakpoint on System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.GetCurrentValueCore  with a 'when hit' action that simply say prints a line to the debugger shows that even when the animation is invisible the callbacks continue.\r\n\r\nChanging the markup such that IsIndeterminate is bound to IsVisible and rerunning the repro with the same printing breakpoint shows then the animations stop as the control becomes invisible (as the VisualState = Indeterminate becomes no longer true)\r\n\r\n<ProgressBar Width=\"100\" Height=\"50\" IsIndeterminate=\"{Binding RelativeSource={RelativeSource Self}, Path=IsVisible}\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\"/>","Url":"https://github.com/dotnet/wpf/issues/6264","RelatedDescription":"Open issue \"WPF ProgressBars with IsIndeterminate = true appear to leak animations, since .NET 4.5\" (#6264)"},{"Id":"1170505595","IsPullRequest":false,"CreatedAt":"2022-03-16T18:52:16","Actor":"sam-wheat","Number":"6261","RawContent":null,"Title":"Bindings for CommandParameter do not work","State":"closed","Body":"My control  contains a ListBox which I populate with an array of strings as shown below:\r\n\r\n\r\n\t<ControlTemplate TargetType=\"{x:Type local:DimensionButton}\">\r\n\t\t<Border Background=\"{TemplateBinding Background}\"\r\n\t\t\t\tDataContext=\"{Binding RelativeSource={RelativeSource AncestorType=local:DimensionButton}}\">\r\n\t\t\t<local:DropDownButton\r\n\t\t\t\tContent=\"{Binding Content}\" \r\n\t\t\t\tSelectedItem=\"{Binding SelectedItem}\"\r\n\t\t\t\tItemTemplate=\"{StaticResource DimensionButtonItemTemplate}\"\r\n\t\t\t\tStyle=\"{StaticResource ResourceKey=DropDownButtonStyle}\">\r\n\t\t\t\t<local:DropDownButton.ItemsSource>\r\n\t\t\t\t\t<x:Array Type=\"{x:Type sys:String}\">\r\n\t\t\t\t\t\t<sys:String>Sort Ascending</sys:String>\r\n\t\t\t\t\t\t<sys:String>Sort Descending</sys:String>\r\n\t\t\t\t\t\t<sys:String>Hide</sys:String>\r\n\t\t\t\t\t</x:Array>\r\n\t\t\t\t</local:DropDownButton.ItemsSource>\r\n\t\t\t</local:DropDownButton>\r\n\t\t</Border>\r\n\t</ControlTemplate>\r\n\r\n\t\r\n\r\nDataTemplate is shown below.  **The bindings for the `CheckBox.CommandParameter` do not work.  Why is that and how might I fix it?**  Note that Content and Action are both bound to the same string data item.  Content works - I can see it in the UI - but Action is always null as is DimensionID.\r\n\r\n\r\n\t<DataTemplate x:Key=\"DimensionButtonItemTemplate\">\r\n        <Border Background=\"Yellow\" Padding=\"10\">\r\n            <CheckBox Content=\"{Binding}\" // Works\r\n                      IsChecked=\"{Binding RelativeSource={RelativeSource AncestorType=local:DimensionButton}, Path=SortAscending}\" // Works\r\n                      Command=\"{Binding RelativeSource={RelativeSource AncestorType=local:MyControl}, Path=DimensionEventCommand}\" //Works\r\n                      >\r\n                <CheckBox.CommandParameter>\r\n                    <local:DimensionEventArgs \r\n                        DimensionID=\"{Binding RelativeSource={RelativeSource AncestorType=local:DimensionButton}, Path=Dimension.DisplayValue}\" // error can not find RelativeSource\r\n                        Action=\"{Binding}\"/> // No error msg in output but value is null\r\n                </CheckBox.CommandParameter>\r\n            </CheckBox>\r\n        </Border>\r\n    </DataTemplate>\r\n\t\r\n\r\nIt is interesting to note that when I put a breakpoint on the constructor of the DimensionEventArgs class (shown below) I see the object being constructed however the properties that are targets of the binding are null. \r\n \r\nAlso interesting to note that if the CommandParameter is set as follows it does contain a valid string:\r\n\r\n\t<CheckBox .... CommandParameter={Binding} />\r\n\r\n\r\n\r\nAs attempt to solve the above I tried creating the DimensionEventArgs objects in the list itself as shown below.  However this time the DimensionID binding does not work and nothing I try will fix it.  Error msg:\r\n\r\n> Cannot find source for binding with reference 'RelativeSource FindAncestor, AncestorType='...DimensionButton'\r\n\r\n\r\n\t<local:DropDownButton.ItemsSource>\r\n\t\t<x:Array Type=\"{x:Type local:DimensionEventArgs}\">\r\n\t\t\t<local:DimensionEventArgs Action=\"Sort Ascending\" DimensionID=\"{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DimensionButton}}, Path=Dimension.DisplayValue}\"/>\r\n\t\t\t<local:DimensionEventArgs Action=\"Sort Descending\" DimensionID=\"{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DimensionButton}}, Path=Dimension.DisplayValue}\"/>\r\n\t\t\t<local:DimensionEventArgs Action=\"Hide\" DimensionID=\"{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DimensionButton}}, Path=Dimension.DisplayValue}\"/>\r\n\t\t</x:Array>\r\n\t</local:DropDownButton.ItemsSource>\r\n\r\n\r\nModified the DataTemplate as follows:\r\n\r\n\t<DataTemplate x:Key=\"DimensionButtonItemTemplate\">\r\n\t\t<Border Background=\"Yellow\" Padding=\"10\">\r\n\t\t\t<CheckBox Content=\"{Binding Action}\" \r\n\t\t\t\t\t  IsChecked=\"{Binding RelativeSource={RelativeSource AncestorType=local:DimensionButton}, Path=SortAscending}\" \r\n\t\t\t\t\t  Command=\"{Binding RelativeSource={RelativeSource AncestorType=local:MyControl}, Path=DimensionEventCommand}\"\r\n\t\t\t\t\t  CommandParameter=\"{Binding}\">\r\n\t\t\t\t\r\n\t\t\t</CheckBox>\r\n\t\t</Border>\r\n\t</DataTemplate>\r\n\t\r\n\t\r\nDimensionEventArgs class:\t\r\n\t\r\n\tpublic class DimensionEventArgs  :Control\r\n\t{\r\n\r\n\t\t//  Dimension.DisplayName is guaranteed to be unique and is also the ID\r\n\t\tpublic string DimensionID\r\n\t\t{\r\n\t\t\tget { return (string)GetValue(DimensionIDProperty); }\r\n\t\t\tset { SetValue(DimensionIDProperty, value); }\r\n\t\t}\r\n\r\n\t\tpublic static readonly DependencyProperty DimensionIDProperty =\r\n\t\t\tDependencyProperty.Register(\"DimensionID\", typeof(string), typeof(DimensionEventArgs), new PropertyMetadata(null));\r\n\r\n\r\n\t\tpublic string Action\r\n\t\t{\r\n\t\t\tget { return (string)GetValue(ActionProperty); }\r\n\t\t\tset { SetValue(ActionProperty, value); }\r\n\t\t}\r\n\r\n\t\tpublic static readonly DependencyProperty ActionProperty =\r\n\t\t\tDependencyProperty.Register(\"Action\", typeof(string), typeof(DimensionEventArgs), new PropertyMetadata(null));\r\n\t}\r\n\r\n\r\nI appreciate any assistance.  \r\n\r\n\r\nVersions:\r\n\r\n\tC:\\Users\\sam>dotnet --info\r\n\t.NET SDK (reflecting any global.json):\r\n\t Version:   6.0.201\r\n\t Commit:    ef40e6aa06\r\n\r\n\tRuntime Environment:\r\n\t OS Name:     Windows\r\n\t OS Version:  10.0.19044\r\n\t OS Platform: Windows\r\n\t RID:         win10-x64\r\n\t Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.201\\\r\n\r\n\tHost (useful for support):\r\n\t  Version: 6.0.3\r\n\t  Commit:  c24d9a9c91\r\n\r\nVisual Studio 2022 17.1 latest.","Url":"https://github.com/dotnet/wpf/issues/6261","RelatedDescription":"Closed issue \"Bindings for CommandParameter do not work\" (#6261)"},{"Id":"1171042765","IsPullRequest":false,"CreatedAt":"2022-03-16T13:41:49","Actor":"sampath-narayanan","Number":"6262","RawContent":null,"Title":"Getting wrong size while calculate the size of contenttemplate. ","State":"open","Body":"* Windows version: 10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n\r\n **Problem description:**\r\n\r\n**What I'm doing**\r\nI have a contentcontrol in my window. I have loaded the content template to the contentcontrol. I have loaded the Expander control and ListView whose visibility is set to collapsed to the contenttemplate initially. In runtime when i click the expand button in the ExpanderControl, I will set the ListView visibility to visible. \r\n\r\n**Problem**\r\nI'm trying to calculate the size of the contenttemplate using following code. But I'm getting wrong size. \r\n\r\n```\r\nthis.control.Content = ItemTemplate1.ContentTemplate;\r\nthis.control.ContentTemplate = ItemTemplate1.ContentTemplate;\r\nthis.control.Measure(new Size());\r\nvar controlsize = Size.Empty;\r\nthis.control.Measure(new Size(double.PositiveInfinity, double.PositiveInfinity));\r\ncontrolsize = this.control.DesiredSize;\r\n```\r\n\r\nMean while if I set the listview visibility as visible in compile time itself, then I'm getting the correct size with same code shown above.\r\n\r\n**Gif :**\r\n\r\n![ezgif com-gif-maker (10)](https://user-images.githubusercontent.com/88649640/158601682-27c64191-d76f-4794-a5d9-2129c0f4e1bd.gif)\r\n\r\n **Actual behavior:** \r\n\r\nWhile calculating size of the content template whose visibility is set in runtime, we are getting wrong size as shown in the gif.\r\n \r\n **Expected behavior:**\r\n\r\nNeed to get the correct size of the content template.\r\n \r\n **Minimal repro:**\r\n\r\n1. Run the attached sample\r\n2. Expand the content template 1\r\n3. Click the button \"Template Height of ContentTemplate 1\"\r\n4. you will get a size of 31, 29.\r\n5. Click the button \"Template Height of ContentTemplate 2\"\r\n6. you will get a size of 402,429\r\n\r\nPlease find the sample from the attachment.\r\n[WpfApp2.zip](https://github.com/dotnet/wpf/files/8262591/WpfApp2.zip)\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/6262","RelatedDescription":"Open issue \"Getting wrong size while calculate the size of contenttemplate. \" (#6262)"},{"Id":"1170470623","IsPullRequest":true,"CreatedAt":"2022-03-16T02:41:42","Actor":"ThomasGoulet73","Number":"6260","RawContent":null,"Title":"[Managed DWrite] Migrate FontCollectionLoader to managed","State":"open","Body":"Contributes to #5305\r\nDepends on #6171\r\n\r\n## Description\r\nMigrate DWrite FontCollectionLoader to managed.\r\n\r\n## Customer Impact\r\nIt might be faster and should allow better support of trimming and the support of NativeAOT once everything is migrated to C#.\r\n\r\n## Regression\r\nNo.\r\n\r\n## Testing\r\nLocal build + CI + I tested a few apps that uses custom fonts to test this code path.\r\n\r\n## Risk\r\nLow. For the most part, it is a copy of the C++ code manually rewritten to C# with as little changes as possible.","Url":"https://github.com/dotnet/wpf/pull/6260","RelatedDescription":"Open PR \"[Managed DWrite] Migrate FontCollectionLoader to managed\" (#6260)"},{"Id":"1170256790","IsPullRequest":true,"CreatedAt":"2022-03-15T21:19:05","Actor":"dotnet-maestro[bot]","Number":"6259","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220315.2\r\n- **Date Produced**: March 15, 2022 8:26:36 PM UTC\r\n- **Commit**: 7deb7cca1efe8e3e9930d6c17bd1802f8f29fbcf\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22164.9 to 7.0.0-preview.3.22165.2][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22164.9 to 7.0.0-preview.3.22165.2][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.3.22163.2 to 7.0.0-preview.3.22165.1][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/a2d4493...7deb7cc\r\n[2]: https://github.com/dotnet/runtime/compare/accf6fb...bc5e386\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6259","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6259)"},{"Id":"1170057549","IsPullRequest":false,"CreatedAt":"2022-03-15T18:52:50","Actor":"RaulFunezp","Number":"6258","RawContent":null,"Title":"Me too. A helping workaround is using a global.json in solution dir:","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/issues/6258","RelatedDescription":"Closed issue \"Me too. A helping workaround is using a global.json in solution dir:\" (#6258)"},{"Id":"1169120195","IsPullRequest":true,"CreatedAt":"2022-03-15T03:16:29","Actor":"dotnet-maestro[bot]","Number":"6257","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220314.9\r\n- **Date Produced**: March 15, 2022 2:25:44 AM UTC\r\n- **Commit**: a2d4493edb0a6623d584d23895fd88185099b7e4\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22164.8 to 7.0.0-preview.3.22164.9][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22164.8 to 7.0.0-preview.3.22164.9][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/09eb296...a2d4493\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6257","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6257)"},{"Id":"1169071502","IsPullRequest":true,"CreatedAt":"2022-03-15T01:33:51","Actor":"dotnet-maestro[bot]","Number":"6256","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220314.8\r\n- **Date Produced**: March 15, 2022 12:47:32 AM UTC\r\n- **Commit**: 09eb29692cb7c0c13bef50826d5fa6af97a683b6\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.3.22164.4 to 7.0.0-preview.3.22164.8][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.3.22164.4 to 7.0.0-preview.3.22164.8][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/ba73da8...09eb296\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6256","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6256)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-03-21T03:30:30.2195002Z","RunDurationInMilliseconds":559}