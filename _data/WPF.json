{"Data":{"GitHub":{"Issues":[{"Id":"885684350","IsPullRequest":false,"CreatedAt":"2021-05-11T02:23:35","Actor":"lindexi","Number":"4501","RawContent":null,"Title":"Code comments and behavior are inconsistent in Selector.cs","State":"open","Body":"We say that \"Returns false if FrameworkElement representing this item has Selector.SelectableProperty set to false\", but we just check the object type\r\n\r\nhttps://github.com/dotnet/wpf/blob/1c3be71312540f51d98f769b431ea3cc110844d0/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Controls/Primitives/Selector.cs#L1859-L1872","Url":"https://github.com/dotnet/wpf/issues/4501","RelatedDescription":"Open issue \"Code comments and behavior are inconsistent in Selector.cs\" (#4501)"},{"Id":"885237183","IsPullRequest":true,"CreatedAt":"2021-05-11T01:39:56","Actor":"ryalanms","Number":"4497","RawContent":null,"Title":"Update 5.0 branding version to 5.0.7","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/4497","RelatedDescription":"Closed or merged PR \"Update 5.0 branding version to 5.0.7\" (#4497)"},{"Id":"885495024","IsPullRequest":true,"CreatedAt":"2021-05-11T01:17:49","Actor":"dotnet-maestro[bot]","Number":"4499","RawContent":null,"Title":"[release/5.0] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:879723a8-02ca-470e-70c0-08d83eef1915)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 879723a8-02ca-470e-70c0-08d83eef1915\r\n- **Build**: 20210510.3\r\n- **Date Produced**: 5/10/2021 11:24 PM\r\n- **Commit**: 85674e156c6a1e4810d8c1324cdd7cdcde31972c\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 5.0.6-servicing.21206.6 to 5.0.7-servicing.21260.3][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC64d5af9&targetVersion=GC85674e1&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:879723a8-02ca-470e-70c0-08d83eef1915)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4499","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4499)"},{"Id":"885502376","IsPullRequest":false,"CreatedAt":"2021-05-11T00:54:46","Actor":"lindexi","Number":"4500","RawContent":null,"Title":"Why we write the foo bar in WPF code?","State":"closed","Body":"LOL. I find we write the foo bar code in `MimeTypeMapper`, see \r\n\r\nhttps://github.com/dotnet/wpf/blob/1c3be71312540f51d98f769b431ea3cc110844d0/src/Microsoft.DotNet.Wpf/src/Shared/MS/Internal/MimeTypeMapper.cs#L34\r\n\r\nCan I remove it?","Url":"https://github.com/dotnet/wpf/issues/4500","RelatedDescription":"Closed issue \"Why we write the foo bar in WPF code?\" (#4500)"},{"Id":"885236133","IsPullRequest":true,"CreatedAt":"2021-05-10T22:45:13","Actor":"ryalanms","Number":"4496","RawContent":null,"Title":"Update 3.1 branding to 3.1.16","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/4496","RelatedDescription":"Closed or merged PR \"Update 3.1 branding to 3.1.16\" (#4496)"},{"Id":"885269167","IsPullRequest":false,"CreatedAt":"2021-05-10T22:41:07","Actor":"vsfeedback","Number":"4498","RawContent":null,"Title":"Adorner Thumb DragDelta changes values incorrect when Adorned Element is rotated","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Adorner-Thumb-DragDelta-changes-values-i/1413029)._\n\n---\n[severity:I'm unable to use this version]\r\nI have created a test application (attached) that can be used to demonstrated the problem and test the solution.\nThe DragDelta horizontal and vertical change values of the Thumb are incorrect when the Adorned Element is rotated with a positive angle or a negative angle more than 90 degrees.\nWhen rotated for example at 60 degrees, the horizontal and vertical change values appear to increase in an exponential rate causing he adorned element to rapidly disappear off the screen/canvas.\nWhen the adorned element is not rotated, the DragDelta change values are like:\ndX:    -0.3  dY:    -1.0\ndX:    -0.3  dY:    -2.0\ndX:     1.5  dY:    -0.4\ndX:     0.9  dY:    -0.9\ndX:     1.4  dY:    -3.2\ndX:     2.3  dY:    -2.2\ndX:     3.0  dY:    -2.2\ndX:     1.8  dY:    -2.7\nHowever, if the adorned element is rotated > 0 degrees clockwise, or more than 90 degrees counter clockwise, the DragDelta change values are like:\ndX:     2.3  dY:   -13.1\ndX:    38.7  dY:  -333.8\ndX:   353.0  dY:  -209.5\ndX:   467.2  dY:   185.6\ndX:   169.9  dY:   589.6\ndX:  -442.6  dY:   601.3\ndX:  -907.6  dY:    17.5\ndX:  -687.7  dY:  -863.2\ndX:   325.4  dY: -1,304.8\ndX: 1,505.3  dY:  -651.8\ndX: 1,746.2  dY:   971.2\nAs a result the adorned element rapidly disappears off the screen.\nIn this case an adorner to use for dragging is Not Useable.\n\n---\n### Original Comments\n\n#### Feedback Bot on 5/5/2021, 08:14 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/4498","RelatedDescription":"Open issue \"Adorner Thumb DragDelta changes values incorrect when Adorned Element is rotated\" (#4498)"},{"Id":"884756059","IsPullRequest":true,"CreatedAt":"2021-05-10T18:49:19","Actor":"mmitche","Number":"4495","RawContent":null,"Title":"Remove windowsdesktop blob feed","State":"closed","Body":"This should allow the feed check to verify no upstreams across all input feeds.","Url":"https://github.com/dotnet/wpf/pull/4495","RelatedDescription":"Closed or merged PR \"Remove windowsdesktop blob feed\" (#4495)"},{"Id":"883064796","IsPullRequest":false,"CreatedAt":"2021-05-10T18:26:22","Actor":"lindexi","Number":"4492","RawContent":null,"Title":"The default MS.Internal.AppModel.MimeObjectFactory._objectConverters count is 9 but the capacity is 5","State":"closed","Body":"We can find the `MS.Internal.AppModel.MimeObjectFactory._objectConverters` will be created in static constructor.\r\n\r\nhttps://github.com/dotnet/wpf/blob/6a4e1e5713622ace57f96ac7f1f0baa9a414254b/src/Microsoft.DotNet.Wpf/src/PresentationFramework/MS/Internal/AppModel/MimeObjectFactory.cs#L69\r\n\r\nAnd we will add the elements in Application static constructor.\r\n\r\nhttps://github.com/dotnet/wpf/blob/6a4e1e5713622ace57f96ac7f1f0baa9a414254b/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Application.cs#L1974-L1996\r\n\r\nAs the code showed, we add the elements 9 times. That means we should re-alloc the memory in `_objectConverters`\r\n\r\nAnd I write a demo to get the MS.Internal.AppModel.MimeObjectFactory._objectConverters count.\r\n\r\n![](https://user-images.githubusercontent.com/16054566/117592604-cafb0e80-b16b-11eb-9102-264736353f63.png)\r\n","Url":"https://github.com/dotnet/wpf/issues/4492","RelatedDescription":"Closed issue \"The default MS.Internal.AppModel.MimeObjectFactory._objectConverters count is 9 but the capacity is 5\" (#4492)"},{"Id":"883080227","IsPullRequest":true,"CreatedAt":"2021-05-10T18:26:01","Actor":"lindexi","Number":"4493","RawContent":null,"Title":"Fix the MimeObjectFactory field capacity","State":"closed","Body":"\r\n\r\nFixes Issue  #4492\r\n\r\n\r\n## Description\r\n\r\nThe default MS.Internal.AppModel.MimeObjectFactory._objectConverters capacity should be 9\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4493","RelatedDescription":"Closed or merged PR \"Fix the MimeObjectFactory field capacity\" (#4493)"},{"Id":"884547787","IsPullRequest":false,"CreatedAt":"2021-05-10T16:06:12","Actor":"wenbei421","Number":"4494","RawContent":null,"Title":" XAML parser resolving URIs (I get odd control behavior, and \"The component 'XXX' does not have a resource identified by the URI\" errors.","State":"open","Body":"I am currently struggling with what I assume is this issue. I have a .NET 5.0 WPF plugin architecture and encounter errors if I have multiple plugins in different assembly load contexts. It seems to come down to issues with the XAML parser resolving URIs (I get odd control behavior, and \"The component 'XXX' does not have a resource identified by the URI\" errors.\r\n\r\nGiven that this is still an open issue, is there any known way to work around the problem? Thanks.\r\n\r\n_Originally posted by @mikeoliphant in https://github.com/dotnet/wpf/issues/1700#issuecomment-776875639_","Url":"https://github.com/dotnet/wpf/issues/4494","RelatedDescription":"Open issue \" XAML parser resolving URIs (I get odd control behavior, and \"The component 'XXX' does not have a resource identified by the URI\" errors.\" (#4494)"},{"Id":"882197817","IsPullRequest":false,"CreatedAt":"2021-05-09T11:35:14","Actor":"Daniel-Svensson","Number":"4491","RawContent":null,"Title":"Add basic paging support via PagedCollectionView ","State":"open","Body":"I propose that that the [PagedCollectionView](https://docs.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/dd538382(v=vs.95)) and the corresponding [IPagedCollectionView](https://docs.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/dd491235(v=vs.95)) from Silverlight are added to WPF.\r\n\r\nWhile it might be possible to get a better implementation it seems just taking the existing code from the Silverlight codebase and adopting the existing API as is seems to be the most straightforward and easiest way to get basic support for paging without having to put a lot of making a new API.\r\n\r\nHaving a standardized interface such as IPagedCollectionView for paging would allow standard controls for paging and make it a lot easier to show a portion of data for example in LOB applications. \r\n\r\n- [ ] Add [IPagedCollectionView](https://docs.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/dd491235(v=vs.95)) \r\n- [ ] Add [PagedCollectionView](https://docs.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/dd538382(v=vs.95))\r\n- [ ] Add [DataPager](https://docs.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/dd538632(v=vs.95)) control or similar ","Url":"https://github.com/dotnet/wpf/issues/4491","RelatedDescription":"Open issue \"Add basic paging support via PagedCollectionView \" (#4491)"},{"Id":"880789144","IsPullRequest":true,"CreatedAt":"2021-05-08T13:21:14","Actor":"dotnet-maestro[bot]","Number":"4490","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210508.2\r\n- **Date Produced**: 5/8/2021 12:47 PM\r\n- **Commit**: 6856790743b0e82244b0ccad5fd7382c92adda5d\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.5.21257.2 to 6.0.0-preview.5.21258.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC3345d90&targetVersion=GC6856790&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4490","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4490)"},{"Id":"878985045","IsPullRequest":true,"CreatedAt":"2021-05-07T13:35:45","Actor":"dotnet-maestro[bot]","Number":"4489","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210507.2\r\n- **Date Produced**: 5/7/2021 1:07 PM\r\n- **Commit**: 3345d90dcd6d3e4151150c3ecc97be7416d6031f\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.5.21256.2 to 6.0.0-preview.5.21257.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GCd7f63ee&targetVersion=GC3345d90&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4489","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4489)"},{"Id":"878854354","IsPullRequest":false,"CreatedAt":"2021-05-07T11:50:42","Actor":"samir-dahal","Number":"4488","RawContent":null,"Title":"Is there anyway to simulate touch on WPF UI? ","State":"open","Body":"Is this feature request related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? If yes, please file the request via the instructions here: https://docs.microsoft.com/visualstudio/ide/suggest-a-feature?view=vs-2019\r\n\r\n<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n","Url":"https://github.com/dotnet/wpf/issues/4488","RelatedDescription":"Open issue \"Is there anyway to simulate touch on WPF UI? \" (#4488)"},{"Id":"878848336","IsPullRequest":true,"CreatedAt":"2021-05-07T11:46:33","Actor":"lindexi","Number":"4487","RawContent":null,"Title":"Make some lock object as readonly","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/4487","RelatedDescription":"Open PR \"Make some lock object as readonly\" (#4487)"},{"Id":"878803916","IsPullRequest":true,"CreatedAt":"2021-05-07T11:15:36","Actor":"lindexi","Number":"4486","RawContent":null,"Title":"In FamilyCollection.cs replace Dictionary ContainsKey-Add with TryAdd","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/4486","RelatedDescription":"Open PR \"In FamilyCollection.cs replace Dictionary ContainsKey-Add with TryAdd\" (#4486)"},{"Id":"875120095","IsPullRequest":false,"CreatedAt":"2021-05-07T04:16:37","Actor":"trodent83","Number":"4472","RawContent":null,"Title":"CommandParameter doesn't trigger Command revalidation","State":"closed","Body":".NET Core Version: 5.0.201\r\nWindows version: Windows 10 Entrprise 190\r\nDoes the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n**Problem description: \r\nIf the CommandParameter of a Button is changed the Command will not be automaticly revalidated and this can result in the strange behavior that even though the parameter is set the command doesn't see this until something else triggers the revalidation of the command.\r\n\r\nThis would have the beneficial effect that the revalidating of the commands could  be more event driven.\r\n\r\n**Actual behavior: If only the command parameter is change nothing happens\r\n\r\n**Expected behavior: The CanExecute of the corresponding command should be automaticly triggered.","Url":"https://github.com/dotnet/wpf/issues/4472","RelatedDescription":"Closed issue \"CommandParameter doesn't trigger Command revalidation\" (#4472)"},{"Id":"876986192","IsPullRequest":true,"CreatedAt":"2021-05-06T15:33:46","Actor":"ryalanms","Number":"4482","RawContent":null,"Title":"Fix ReachFramework's resource string resolution","State":"closed","Body":"## Description\r\n\r\nSystem.Windows.Documents.Serialization.SerializerProvider creation always fails while creating System.Uri. \r\n\r\n```cs\r\nSerializerProvider sp = new SerializerProvider();\r\n```   \r\n> at System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind)\r\n   at System.Uri..ctor(String uriString)\r\n   at System.Windows.Xps.Serialization.XpsSerializerFactory.get_ManufacturerWebsite()\r\n   at System.Windows.Documents.Serialization.SerializerDescriptor.CreateFromFactoryInstance(ISerializerFactory factoryInstance)\r\n   at System.Windows.Documents.Serialization.SerializerProvider..ctor()\r\n   at TestSerializerProvider.MainWindow..ctor() in D:\\PluginSerializer\\TestSerializerProvider\\MainWindow.xaml.cs:line 30\r\n\r\nThe issue is that resource lookups for the ReachFramework were not actually resolving the string, and instead were returning the key.  When the key `Xps_ManufacturersWebsite` was passed in to the URI constructor, URI creation failed.  Fixing the resource lookup path fixed `SerializerProvider`.  Fixes https://github.com/dotnet/wpf/issues/4481.  \r\n\r\nThis bug is blocking testing of the fix for another bug that is preventing WPF from taking the latest WinForms update: https://github.com/dotnet/wpf/issues/4479.  \r\n\r\n## Regression\r\n\r\nNo.  This is a longstanding bug from 3.0.  \r\n\r\n## Testing\r\n\r\nRepro'd the failure, fixed the resource string lookup, and verified SerializerProvider is working.  \r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4482","RelatedDescription":"Closed or merged PR \"Fix ReachFramework's resource string resolution\" (#4482)"},{"Id":"876943733","IsPullRequest":false,"CreatedAt":"2021-05-06T15:33:46","Actor":"ryalanms","Number":"4481","RawContent":null,"Title":"System.Windows.Documents.Serialization.SerializerProvider default constructor fails creating System.Uri","State":"closed","Body":"System.Windows.Documents.Serialization.SerializerProvider creation always fails while creating System.Uri. \r\n\r\n```cs\r\nSerializerProvider sp = new SerializerProvider();\r\n```   \r\n> at System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind)\r\n   at System.Uri..ctor(String uriString)\r\n   at System.Windows.Xps.Serialization.XpsSerializerFactory.get_ManufacturerWebsite()\r\n   at System.Windows.Documents.Serialization.SerializerDescriptor.CreateFromFactoryInstance(ISerializerFactory factoryInstance)\r\n   at System.Windows.Documents.Serialization.SerializerProvider..ctor()\r\n   at TestSerializerProvider.MainWindow..ctor() in D:\\PluginSerializer\\TestSerializerProvider\\MainWindow.xaml.cs:line 30","Url":"https://github.com/dotnet/wpf/issues/4481","RelatedDescription":"Closed issue \"System.Windows.Documents.Serialization.SerializerProvider default constructor fails creating System.Uri\" (#4481)"},{"Id":"877456665","IsPullRequest":true,"CreatedAt":"2021-05-06T12:53:30","Actor":"dotnet-maestro[bot]","Number":"4484","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210506.2\r\n- **Date Produced**: 5/6/2021 12:33 PM\r\n- **Commit**: d7f63ee877663f18f0aa1e120245edce77bbb0fc\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21256.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC19c3c89&targetVersion=GCd7f63ee&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4484","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4484)"},{"Id":"877437437","IsPullRequest":true,"CreatedAt":"2021-05-06T12:20:24","Actor":"dotnet-maestro[bot]","Number":"4483","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20210507.5\r\n- **Date Produced**: 5/8/2021 1:44 AM\r\n- **Commit**: 5faea1b7965644d1f1c666a7130f6f614abe76c0\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 6.0.0-beta.21254.3 to 6.0.0-beta.21257.5][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21254.3 to 6.0.0-beta.21257.5][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 6.0.0-beta.21254.3 to 6.0.0-beta.21257.5][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 6.0.0-beta.21254.3 to 6.0.0-beta.21257.5][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21254.3 to 6.0.0-beta.21257.5][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/0cfaf93...5faea1b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4483","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/arcade\" (#4483)"},{"Id":"876741568","IsPullRequest":false,"CreatedAt":"2021-05-05T18:51:44","Actor":"MarkusNeff","Number":"4480","RawContent":null,"Title":"WPF dirty rectangle glitches in high GPU-load situations","State":"open","Body":"- In high GPU-load situations, dirty-rect handling in WPF-based applications gets out of sync with window content update\r\n- This triggers situations in which e.g. a bigger update of a visual is first clipped to the update rectangle of another overlaid smaller visual / control and just shows in one of the subsequent frames\r\n- Preliminary analysis suggests, that this is because of D3D 9Ex with D3DSWAPEFFECT_COPY is used by the WPF rendering engine and partial updates during D3D 9Ex application frame rendering are not properly synchronized with DWM GPU blit copy presentation and DWM update rectangle / presentation history handling\r\n- A detailed write-up can be found in the attached document:\r\n[D3D9Ex_WPF_Update_Rectangle_Glitches.pdf](https://github.com/dotnet/wpf/files/6429461/D3D9Ex_WPF_Update_Rectangle_Glitches.pdf)\r\n- More detailed information like videos, screenshots, GPUView ETW traces and reproducer applications are available for download here: https://drive.google.com/file/d/1yfLaGcvRUD4rAXRPjfpvTHhaytXAk-KI/view?usp=sharing","Url":"https://github.com/dotnet/wpf/issues/4480","RelatedDescription":"Open issue \"WPF dirty rectangle glitches in high GPU-load situations\" (#4480)"},{"Id":"876391075","IsPullRequest":true,"CreatedAt":"2021-05-05T17:52:39","Actor":"dotnet-maestro[bot]","Number":"4477","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20210504.3\r\n- **Date Produced**: 5/4/2021 9:32 PM\r\n- **Commit**: 0cfaf935894a4c98ff7445c903f1b4c32990b127\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 6.0.0-beta.21253.2 to 6.0.0-beta.21254.3][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21253.2 to 6.0.0-beta.21254.3][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 6.0.0-beta.21253.2 to 6.0.0-beta.21254.3][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 6.0.0-beta.21253.2 to 6.0.0-beta.21254.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21253.2 to 6.0.0-beta.21254.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/e9fd640...0cfaf93\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates sdk.version to 6.0.100-preview.3.21202.5\r\n  - Updates tools.dotnet to 6.0.100-preview.3.21202.5\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4477","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#4477)"},{"Id":"876678841","IsPullRequest":false,"CreatedAt":"2021-05-05T17:26:26","Actor":"ryalanms","Number":"4479","RawContent":null,"Title":"SerializerDescriptor relies on unsupported reflection API and will always throw","State":"open","Body":"SerializerDescriptor needs to be updated to use System.Reflection.MetadataLoadContext.   \r\n\r\n(This is covered by internal test Avalon.Test.D2.Print.PluginSerializer.PluginSrzTestApp.)","Url":"https://github.com/dotnet/wpf/issues/4479","RelatedDescription":"Open issue \"SerializerDescriptor relies on unsupported reflection API and will always throw\" (#4479)"},{"Id":"876429178","IsPullRequest":true,"CreatedAt":"2021-05-05T13:25:17","Actor":"dotnet-maestro[bot]","Number":"4478","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210505.2\r\n- **Date Produced**: 5/5/2021 12:53 PM\r\n- **Commit**: 19c3c8994e89fe08bfc7cb1061fb7cf1672472e8\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.5.21254.2 to 6.0.0-preview.5.21255.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC98527fa&targetVersion=GC19c3c89&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4478","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4478)"},{"Id":"875563664","IsPullRequest":false,"CreatedAt":"2021-05-04T15:11:10","Actor":"brunosegiu","Number":"4475","RawContent":null,"Title":"Crash while querying interface on ITfMessagePump (System.Windows.Threading.Dispatcher.GetMessagePump)","State":"open","Body":"* .NET Core Version: 5.0.202\r\n* Windows version: 10.0.1904\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n \r\n **Problem description:**\r\n\r\nI'm getting random crashes when WPF (.NET 4.8) tries to get ahold of the Text Service Framework message pump, which I haven't been able to get much info on.\r\n\r\n[Here's the source of the function that's trying to cast it.][1] I've tried disabling it by turning off support for it but there's no way.\r\n\r\nHow can I debug this? WPF works alright and renders fine until it just stops here (I guess the Text Service Framework interface loads and eventually stops working).\r\n \r\n **Actual behavior:**\r\n\r\nException thrown at 0x00007FFFE7234B59 (KernelBase.dll) in MyApp.exe: WinRT originate error - 0x80040155 : 'Failed to find proxy registration for IID: {8F1B8AD8-0B6B-4874-90C5-BD76011E8F7C}.'.\r\n\r\n Callstack:\r\n```\r\n>\tKernelBase.dll!RaiseException()\tUnknown\r\n \tcombase.dll!SendReport(HRESULT error, unsigned int cchMax, const wchar_t * message, unsigned short pSid, void * pExceptionObject, IUnknown *) Line 433\tC++\r\n \tcombase.dll!RoOriginateErrorW(HRESULT error, unsigned int cchMax, const wchar_t * message) Line 569\tC++\r\n \t[Inline Frame] combase.dll!OriginateErrorUsingFormattedResource(HRESULT) Line 83\tC++\r\n \tcombase.dll!CRIFTable::GetPSClsidHelper(const _GUID & riid, bool suppressErrorOrigination, _GUID * pclsid, CRIFTable::tagRIFEntry * * ppEntry) Line 1816\tC++\r\n \t[Inline Frame] combase.dll!CRIFTable::GetPSClsidAndObject(const _GUID &) Line 1656\tC++\r\n \tcombase.dll!GetPSFactoryInternal(unsigned long dwContext, const _GUID & riid, IPSFactoryBuffer * * ppFactory) Line 2492\tC++\r\n \tcombase.dll!GetPSFactory(const _GUID & riid, IPSFactoryBuffer * * ppFactory) Line 2611\tC++\r\n \tcombase.dll!CStdWrapper::CreateIFaceEntry(const _GUID & riid, void * pServer, IFaceEntry * * ppEntry) Line 1097\tC++\r\n \tcombase.dll!CrossCtxQIFn(void * pv) Line 1513\tC++\r\n \tcombase.dll!EnterForCallback(tagRPCOLEMESSAGE * pMessage, CPolicySet * pPS, HRESULT(*)(void *) pfnCallback, void * pv, const _GUID & riid, unsigned long) Line 2073\tC++\r\n \tcombase.dll!SwitchForCallback(CPolicySet * pPS, HRESULT(*)(void *) pfnCallback, void * pv, const _GUID & riid, unsigned long iMethod, IUnknown * pUnk) Line 1705\tC++\r\n \tcombase.dll!CStdWrapper::CrossCtxQI(CPolicySet * pPS, const _GUID & riid, IFaceEntry * * ppEntry) Line 3524\tC++\r\n \tcombase.dll!CStdWrapper::InternalQI(const _GUID & riid, void * * ppv, int pWrapperEntry, int) Line 2296\tC++\r\n \tcombase.dll!CStdWrapper::QueryInterface(const _GUID & riid, void * * ppv) Line 2391\tC++\r\n \t[Managed to Native Transition]\t\r\n \tWindowsBase.dll!System.Windows.Threading.Dispatcher.GetMessagePump()\tUnknown\r\n \tWindowsBase.dll!System.Windows.Threading.Dispatcher.GetMessage(ref System.Windows.Interop.MSG msg, System.IntPtr hwnd, int minMessage, int maxMessage)\tUnknown\r\n \tWindowsBase.dll!System.Windows.Threading.Dispatcher.PushFrameImpl(System.Windows.Threading.DispatcherFrame frame)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Application.RunDispatcher(object ignore)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Application.RunInternal(System.Windows.Window window)\tUnknown\r\n \tMyApp.exe!MyApp.UI.App.Main()\tUnknown\r\n \t[Native to Managed Transition]\t\r\n \tmscoreei.dll!_CorExeMain()\tUnknown\r\n \tmscoree.dll!_CorExeMain_Exported()\tUnknown\r\n \tkernel32.dll!BaseThreadInitThunk()\tUnknown\r\n \tntdll.dll!RtlUserThreadStart()\tUnknown\r\n\r\n```\r\n **Expected behavior:**\r\nNo crash\r\n \r\n **Minimal repro:**\r\nReproducing this is just random. Happens sometimes.","Url":"https://github.com/dotnet/wpf/issues/4475","RelatedDescription":"Open issue \"Crash while querying interface on ITfMessagePump (System.Windows.Threading.Dispatcher.GetMessagePump)\" (#4475)"},{"Id":"875449301","IsPullRequest":true,"CreatedAt":"2021-05-04T13:38:43","Actor":"dotnet-maestro[bot]","Number":"4474","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210504.2\r\n- **Date Produced**: 5/4/2021 12:59 PM\r\n- **Commit**: 98527fa4d7ccc273b507358b6296ec9fdd2be02c\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.5.21251.2 to 6.0.0-preview.5.21254.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GCc37ea21&targetVersion=GC98527fa&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4474","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4474)"},{"Id":"875135042","IsPullRequest":false,"CreatedAt":"2021-05-04T06:06:06","Actor":"trodent83","Number":"4473","RawContent":null,"Title":"ICommand.CanExecuteChanged should handle the execution on the correct thread","State":"open","Body":"NET Core Version: 5.0.201\r\nWindows version: Windows 10 Entrprise 190\r\nDoes the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n**Problem description:\r\nCurrently the registration to the ICommand.CanExecuteChanged event doesn't consider that the triggering of the command state change can happen from a background thread and throws an InvalidOperationException.\r\n\r\nConsidering that the registration to the command even happens in the control it should ensure the execution of the refresh will happen on the thread of the control.\r\n\r\n**Actual behavior: Exception is thrown when the CanExecuteChanged is called from not the Owner thread.\r\n\r\n**Expected behavior: The state refresh should be executed without any problems","Url":"https://github.com/dotnet/wpf/issues/4473","RelatedDescription":"Open issue \"ICommand.CanExecuteChanged should handle the execution on the correct thread\" (#4473)"},{"Id":"875112446","IsPullRequest":false,"CreatedAt":"2021-05-04T05:19:59","Actor":"trodent83","Number":"4471","RawContent":null,"Title":"If Window.Title is set to null Exception is thrown","State":"open","Body":"* .NET Core Version: 5.0.201\r\n* Windows version: Windows 10 Entrprise 190\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description: If the Title of a window is set to null then an Exception is thrown, and this cannot be avoided by Coerce\r\n \r\n **Actual behavior: ArgmentException is thrown\r\n \r\n **Expected behavior: Null value is handled as an empty string\r\n","Url":"https://github.com/dotnet/wpf/issues/4471","RelatedDescription":"Open issue \"If Window.Title is set to null Exception is thrown\" (#4471)"},{"Id":"875062882","IsPullRequest":true,"CreatedAt":"2021-05-04T03:28:30","Actor":"dotnet-maestro[bot]","Number":"4470","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210501.2\r\n- **Date Produced**: 5/1/2021 12:53 PM\r\n- **Commit**: c37ea21a9caffe6959208fda31d8b2214f3b8959\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.5.21229.2 to 6.0.0-preview.5.21251.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC5361643&targetVersion=GCc37ea21&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4470","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4470)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-05-11T05:30:38.0397648Z","RunDurationInMilliseconds":490}