{"Data":{"GitHub":{"Issues":[{"Id":"1081743157","IsPullRequest":true,"CreatedAt":"2021-12-16T05:08:25","Actor":"dotnet-maestro[bot]","Number":"5844","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20211215.7\r\n- **Date Produced**: December 16, 2021 3:49:58 AM UTC\r\n- **Commit**: fe12fe1b90a19dba5136505b91172af39d06b09f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-alpha.1.21615.4 to 7.0.0-alpha.1.21615.7][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-alpha.1.21615.4 to 7.0.0-alpha.1.21615.7][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/ac18802...fe12fe1\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5844","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#5844)"},{"Id":"1081707803","IsPullRequest":true,"CreatedAt":"2021-12-16T02:40:23","Actor":"SamBent","Number":"5843","RawContent":null,"Title":"Port \"remove ContextMenu owner\" fix from 4.8","State":"open","Body":"Addresses #5835\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n## Description\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\nThere are two reasons the context menu does not display.  The first reason is that its owner gets removed from the tree after the right-button-up gesture but before the PopupControlService initiates the display logic.  The logic notices that the owner is not being displayed, and therefore doesn't display the context menu.  This is by design - you shouldn't display a context menu for an element that isn't itself visible.\r\n\r\nThe second reason is that the (shared) context menu is in a bad state, where it's marked IsOpen=true, but isn't actually being displayed.  The display logic doesn't do anything, since it thinks the menu is already open.  This is a bug, left over from the first case, which doesn't reset IsOpen to false when it aborts the display logic.   The net effect is that once a context menu doesn't open because of reason 1, it will never open again, even in cases where it should.\r\n\r\nThe fix is to reset the context menu's state when aborting the display logic.\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\nContextMenus stop working\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\nNo\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/5843","RelatedDescription":"Open PR \"Port \"remove ContextMenu owner\" fix from 4.8\" (#5843)"},{"Id":"1081705255","IsPullRequest":true,"CreatedAt":"2021-12-16T02:34:31","Actor":"SamBent","Number":"5842","RawContent":null,"Title":"Port negative-height VSP fix from 4.8","State":"open","Body":"Addresses #2854\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n## Description\r\n\r\nThe crash arises when adding an item to the items-source collection underlying the ItemsControl, when the VSP is in an odd state: viewport.Y > extent.Height and <another relationship between viewport, extent, and last-computed \"extended viewport\", whose exact details I haven't yet determined>.  The logic that determines whether such an addition requires a re-measurement predicts the height of the new extended viewport;  in the odd state this sets the height to (extent.Height - viewport.Y), a negative number that's not allowed.\r\n\r\nThe first condition cannot happen during Measure, or immediately after;   Measure starts by initializing viewport.Y to a value <= extent.Height.  But it can occur after collection changes, as these can change extent.Height.  Collection changes can also affect the quantities in the second condition.  The first kind of change puts the height-assignment at risk;  the second kind of change can allow the logic to reach the height-assignment.  It's a Goldilocks situation - if the changes are too big or too small the logic doesn't need the height-assignment, which happens only when the changes are \"just right\".  In fact, I've been unable to produce a fully-deterministic repro suitable for use in a test case;  the \"just-rightness\" depends on the exact scrolling and virtualization history in a way that I've only seen in large datasets after non-deterministic scrolling (e.g. dragging the thumb when the data is so large that a single pixel of thumb motion corresponds to more than a screenful of data motion:  extent.Height > viewport.Height^2 ).\r\n\r\nThe fix is to replace negative height by 0 in the height-assignment.  This obviously avoids the crash, but it's not so obvious whether doing so can cause other problems later on.  In the collection-change case, we only care whether the predicted extended viewport is taller than the last-computed one, we don't actually use the new height in any other way.  So it's OK to use 0 instead of a negative number - they both have the same effect.\r\n\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\nCrash while adding/removing items from the underlying collection.\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\nNo.\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/5842","RelatedDescription":"Open PR \"Port negative-height VSP fix from 4.8\" (#5842)"},{"Id":"1081702664","IsPullRequest":true,"CreatedAt":"2021-12-16T02:28:41","Actor":"SamBent","Number":"5841","RawContent":null,"Title":"Port HighDPI/margin fix from 4.8","State":"open","Body":"Addresses #4834\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n## Description\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\nThis hang arises when UseLayoutRounding is set, and the container's top margin is not a multiple of the rounding quantum.  VSP uses two offsets from the viewport to the container, one that includes the margin and one that doesn't.  It was computing the second and subtracting the margin to obtain the first, but that can give the wrong answer in the situation above.  This can lead to infinite re-measures in anchored scrolls.\r\n\r\nFixed by computing the first offset directly from layout information.  The two offsets will differ by an amount that is close to the margin size, and rounded to a quantum, but there's no way to know which of the nearby candidates is the right one.\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\nHang while scrolling an ItemsControl.\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\nno\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\nLow. Port of a .NETFx servicing fix released earlier this year.\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5841","RelatedDescription":"Open PR \"Port HighDPI/margin fix from 4.8\" (#5841)"},{"Id":"1081698166","IsPullRequest":true,"CreatedAt":"2021-12-16T02:19:38","Actor":"SamBent","Number":"5840","RawContent":null,"Title":"Port IME/databinding fix from 4.8.","State":"open","Body":"Addresses #5444\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n## Description\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\nA binding on TextBox.Text defers two kinds of work when an IME composition is in progress on the TextBox:\r\n1. When the text changes (and UpdateTrigger=PropertyChanged), write a new value into the source property.\r\n2. After writing a value into the source property, read the property's new value (which might be different), apply the customary conversions, and write the result into the TextBox.\r\n\r\nThe bug occurs when the IME starts a new composition before the previous composition's type 2 work happens.  This yields a situation where two tasks are deferred:  the older composition's type 2 task and the newer composition's type 1 task.  The type 2 task happens first, overwriting the text change that the type 1 task is supposed to handle.  This confusion of state leads to exceptions (caught and hidden from the IME, but visible in the debugger), and unexpected content entered into the TextBox.\r\n\r\nFixed by cancelling any pending type 2 work when new type 1 work is needed.\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\nInput with certain IMEs (e.g. MS Quick) is broken.\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\nNo.\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n## Risk\r\nLow. Port of a .NETFx servicing fix released earlier this year.\r\n\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n","Url":"https://github.com/dotnet/wpf/pull/5840","RelatedDescription":"Open PR \"Port IME/databinding fix from 4.8.\" (#5840)"},{"Id":"1081693721","IsPullRequest":true,"CreatedAt":"2021-12-16T02:11:08","Actor":"SamBent","Number":"5839","RawContent":null,"Title":"Port UIA_WindowVisibilityOverridden fix from 4.8","State":"open","Body":"Addresses #5443 \r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n## Description\r\n\r\nThis bug is about \"anomalous\" windows, where the UIA_WindowVisibilityOverridden property is set to 1 (ForceVisible), but window's rect is empty.  The .NET automation code doesn't recognize this property, and thus treats the window as \"not visible\" because it's empty.  This means an automation search won't find any windows below the anomalous window.\r\n\r\nFixed by recognizing the property, and overriding the hwnd's visibility to automation accordingly.  \r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\nAutomation searches cannot find descendants of anomalous windows (e.g. the Windows 11 Start button).\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\nNo.\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/5839","RelatedDescription":"Open PR \"Port UIA_WindowVisibilityOverridden fix from 4.8\" (#5839)"},{"Id":"1081690273","IsPullRequest":true,"CreatedAt":"2021-12-16T02:04:37","Actor":"SamBent","Number":"5838","RawContent":null,"Title":"Port extra-info fix from 4.8","State":"open","Body":"Addresses #5442\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n## Description\r\n\r\nAs part of a mitigation for an OS problem (delivering WM_CHAR messages after the related WM_KEYDOWN message has been marked \"handled\"), WPF reorders the thread's message queue by removing a certain private message, then re-inserting it at the end of the queue.  This happens early while acting on a WM_KEYDOWN, but has the (undocumented) side-effect of overwriting the \"extra info\" associated with the WM_KEYDOWN.  \r\n\r\nThis is fixed by preserving the \"extra info\" across the call that removes the private message.\r\n\r\n## Customer Impact\r\n\r\nExtra info attached to a WM_KEYDOWN is lost.\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\nNo.\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\nLow. Port of a .NETFx servicing fix released earlier this year.","Url":"https://github.com/dotnet/wpf/pull/5838","RelatedDescription":"Open PR \"Port extra-info fix from 4.8\" (#5838)"},{"Id":"1081686620","IsPullRequest":true,"CreatedAt":"2021-12-16T01:56:43","Actor":"SamBent","Number":"5837","RawContent":null,"Title":"Port dirty-rectangle opt-out from 4.8","State":"open","Body":"Addresses #5441\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n## Description\r\n\r\nThe problem is due to a limitation of D3D - the content it presents via dirty-rectangles can be out of sync with the rest of the content, if the timing of the presents and fills is unfortunate.  WPF cannot fix this, but we can mitigate it by giving the app a way to disable the dirty-rectangle optimization.  This impacts the graphics performance;  by opting-in the app accepts the tradeoff of performance vs. fidelity.\r\n\r\nThe mitigation takes the form of two AppContext switches:\r\n* Switch.System.Windows.Media.MediaContext.DisableDirtyRectangles\r\n* Switch.System.Windows.Media.MediaContext.EnableDynamicDirtyRectangles\r\n\r\nThese can be set using one of the techniques listed [here](https://docs.microsoft.com/en-us/dotnet/api/system.appcontext?view=net-5.0#remarks) under the subheading \"AppContext for library consumers\".   Setting the first switch to 'true' disables the dirty-rectangle optimization.  Setting the second switch to 'true' causes WPF to re-query the first switch before each render, so that it honors changes the app makes at runtime by calling AppContext.SetSwitch.\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\nNo way to get rapidly updating images to display faithfully.\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\nNo\r\n\r\n## Testing\r\n\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n## Risk\r\n\r\nLow. Port of a .NETFx servicing fix released earlier this year.\r\n","Url":"https://github.com/dotnet/wpf/pull/5837","RelatedDescription":"Open PR \"Port dirty-rectangle opt-out from 4.8\" (#5837)"},{"Id":"1081683401","IsPullRequest":true,"CreatedAt":"2021-12-16T01:49:23","Actor":"SamBent","Number":"5836","RawContent":null,"Title":"Port touch activation fix from 4.8","State":"open","Body":"Addresses #5440\r\nThis is a port of a servicing fix in .NET 4.7-4.8.\r\n\r\n## Description\r\n\r\nDuring a manipulation (e.g. swipe), WPF's Pointer stack discards all promoted mouse events.   In the given scenario, this includes the Activation event.  But this means the MouseDevice never gets the Activation event, and thus stays inactive (unresponsive) even after the manipulation ends, until it gets another Activation event, i.e. until the user activates another window then returns to the WPF app.\r\n\r\nFixed by detecting a \"promoted\" Activation event and explicitly pushing a non-promoted Activation event in its place.\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\nTouch is broken\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\nNo\r\n\r\n## Testing\r\n\r\nAd-hoc around customer scenario.\r\nStandard regression testing.\r\n\r\n## Risk\r\n\r\nLow. Port of a .NETFx servicing fix released earlier this year.\r\n","Url":"https://github.com/dotnet/wpf/pull/5836","RelatedDescription":"Open PR \"Port touch activation fix from 4.8\" (#5836)"},{"Id":"1081677584","IsPullRequest":false,"CreatedAt":"2021-12-16T01:35:31","Actor":"SamBent","Number":"5835","RawContent":null,"Title":"ContextMenu stops working if its owner is removed from the visual tree","State":"open","Body":"[Port of a servicing fix for .NET 4.7-4.8]\r\n \r\n **Problem description:**\r\nIf user invokes a ContextMenu (e.g. right-clicking on its owner), but the owner leaves the visual tree before the ContextMenu actually displays, the ContextMenu never displays again.  This is interesting when the ContextMenu is shared by multiple owners - it won't display for other owners, even when the other owners remain in the visual tree normally.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nInvoking the ContextMenu does nothing.\r\n \r\n **Expected behavior:**\r\nContextMenu displays\r\n \r\n **Minimal repro:**\r\n","Url":"https://github.com/dotnet/wpf/issues/5835","RelatedDescription":"Open issue \"ContextMenu stops working if its owner is removed from the visual tree\" (#5835)"},{"Id":"1081617650","IsPullRequest":true,"CreatedAt":"2021-12-16T00:15:59","Actor":"dotnet-maestro[bot]","Number":"5834","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20211215.4\r\n- **Date Produced**: December 15, 2021 11:36:11 PM UTC\r\n- **Commit**: ac188028a10defe8bde758000c466043a2ac7ce7\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-alpha.1.21615.3 to 7.0.0-alpha.1.21615.4][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-alpha.1.21615.3 to 7.0.0-alpha.1.21615.4][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/6dfe634...ac18802\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5834","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#5834)"},{"Id":"1081437002","IsPullRequest":true,"CreatedAt":"2021-12-15T20:32:35","Actor":"dotnet-maestro[bot]","Number":"5833","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20211215.3\r\n- **Date Produced**: December 15, 2021 6:51:31 PM UTC\r\n- **Commit**: 6dfe634b722120b575cb6ac9904e6d95cc161894\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-alpha.1.21615.2 to 7.0.0-alpha.1.21615.3][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-alpha.1.21615.2 to 7.0.0-alpha.1.21615.3][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/2470414...6dfe634\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5833","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#5833)"},{"Id":"1081387232","IsPullRequest":true,"CreatedAt":"2021-12-15T19:31:43","Actor":"dotnet-maestro[bot]","Number":"5832","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20211215.2\r\n- **Date Produced**: December 15, 2021 6:44:54 PM UTC\r\n- **Commit**: 2470414ce9477532d7f9920f141d370e88be307e\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-alpha.1.21615.1 to 7.0.0-alpha.1.21615.2][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-alpha.1.21615.1 to 7.0.0-alpha.1.21615.2][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/07e915c...2470414\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5832","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#5832)"},{"Id":"1080510140","IsPullRequest":true,"CreatedAt":"2021-12-15T15:04:35","Actor":"dotnet-maestro[bot]","Number":"5830","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20211215.1\r\n- **Date Produced**: December 15, 2021 2:19:30 PM UTC\r\n- **Commit**: 07e915cab90fa7d5d8a20f235065f5f210d0b721\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-alpha.1.21614.15 to 7.0.0-alpha.1.21615.1][3]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-alpha.1.21614.15 to 7.0.0-alpha.1.21615.1][3]\r\n\r\n[3]: https://github.com/dotnet/winforms/compare/e8c89c8...07e915c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5830","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#5830)"},{"Id":"1081032106","IsPullRequest":true,"CreatedAt":"2021-12-15T13:49:27","Actor":"dotnet-maestro[bot]","Number":"5831","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20211214.1\r\n- **Date Produced**: December 14, 2021 2:58:51 PM UTC\r\n- **Commit**: cc0fa942bf43c2814af778868d4e7ddf21146b96\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.21613.2 to 7.0.0-beta.21614.1][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.21613.2 to 7.0.0-beta.21614.1][1]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.21613.2 to 7.0.0-beta.21614.1][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.21613.2 to 7.0.0-beta.21614.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.21613.2 to 7.0.0-beta.21614.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/bcd6e00...cc0fa94\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5831","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#5831)"},{"Id":"1080484914","IsPullRequest":true,"CreatedAt":"2021-12-15T03:04:50","Actor":"dotnet-maestro[bot]","Number":"5829","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20211214.15\r\n- **Date Produced**: December 15, 2021 2:04:09 AM UTC\r\n- **Commit**: e8c89c8b4f40bfa657cba9c71f7d8c01b76101d0\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-alpha.1.21614.13 to 7.0.0-alpha.1.21614.15][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-alpha.1.21614.13 to 7.0.0-alpha.1.21614.15][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/f90faff...e8c89c8\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5829","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#5829)"},{"Id":"1080461648","IsPullRequest":true,"CreatedAt":"2021-12-15T02:09:21","Actor":"dotnet-maestro[bot]","Number":"5828","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20211214.13\r\n- **Date Produced**: December 15, 2021 1:18:22 AM UTC\r\n- **Commit**: f90faff2fce7ffd1e2d1abefb8a5bcd04870c1cc\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-alpha.1.21614.11 to 7.0.0-alpha.1.21614.13][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-alpha.1.21614.11 to 7.0.0-alpha.1.21614.13][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/a3d5b2c...f90faff\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5828","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#5828)"},{"Id":"1080367386","IsPullRequest":true,"CreatedAt":"2021-12-14T23:19:37","Actor":"dotnet-maestro[bot]","Number":"5827","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20211214.11\r\n- **Date Produced**: December 14, 2021 10:33:55 PM UTC\r\n- **Commit**: a3d5b2cd0e2d450eb5313d7cdabe538df2424c0e\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-alpha.1.21614.6 to 7.0.0-alpha.1.21614.11][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-alpha.1.21614.6 to 7.0.0-alpha.1.21614.11][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/f8fb791...a3d5b2c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5827","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#5827)"},{"Id":"1080249997","IsPullRequest":true,"CreatedAt":"2021-12-14T22:01:37","Actor":"dotnet-maestro[bot]","Number":"5826","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20211214.6\r\n- **Date Produced**: December 14, 2021 8:37:39 PM UTC\r\n- **Commit**: f8fb7916bd366038883065e6780d0b15b472e317\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-alpha.1.21614.5 to 7.0.0-alpha.1.21614.6][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-alpha.1.21614.5 to 7.0.0-alpha.1.21614.6][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/54ffc24...f8fb791\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5826","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#5826)"},{"Id":"1080054946","IsPullRequest":true,"CreatedAt":"2021-12-14T21:30:36","Actor":"vseanreesermsft","Number":"5820","RawContent":null,"Title":"Merging internal commits for release/5.0","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/5820","RelatedDescription":"Closed or merged PR \"Merging internal commits for release/5.0\" (#5820)"},{"Id":"1080190837","IsPullRequest":true,"CreatedAt":"2021-12-14T21:02:42","Actor":"dotnet-maestro[bot]","Number":"5825","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20211214.5\r\n- **Date Produced**: December 14, 2021 8:22:20 PM UTC\r\n- **Commit**: 54ffc24432eebf9dc098d6c7b81cb65c24ec3222\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-alpha.1.21614.1 to 7.0.0-alpha.1.21614.5][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-alpha.1.21614.1 to 7.0.0-alpha.1.21614.5][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/52b1eaf...54ffc24\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5825","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#5825)"},{"Id":"1080048663","IsPullRequest":true,"CreatedAt":"2021-12-14T20:48:22","Actor":"vseanreesermsft","Number":"5819","RawContent":null,"Title":"Merging internal commits for release/6.0","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/5819","RelatedDescription":"Closed or merged PR \"Merging internal commits for release/6.0\" (#5819)"},{"Id":"1080155308","IsPullRequest":true,"CreatedAt":"2021-12-14T20:39:41","Actor":"dotnet-maestro[bot]","Number":"5824","RawContent":null,"Title":"[release/5.0] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:879723a8-02ca-470e-70c0-08d83eef1915)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 879723a8-02ca-470e-70c0-08d83eef1915\r\n- **Build**: 20211214.6\r\n- **Date Produced**: December 14, 2021 7:43:41 PM UTC\r\n- **Commit**: a2b92aee2c2324f39ffc4736f6a0f281958f42cc\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 5.0.12-servicing.21554.2 to 5.0.12-servicing.21614.6][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GCf297611&targetVersion=GCa2b92ae&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:879723a8-02ca-470e-70c0-08d83eef1915)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5824","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#5824)"},{"Id":"1080057767","IsPullRequest":true,"CreatedAt":"2021-12-14T20:36:47","Actor":"vseanreesermsft","Number":"5821","RawContent":null,"Title":"Merging internal commits for release/3.1","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/5821","RelatedDescription":"Closed or merged PR \"Merging internal commits for release/3.1\" (#5821)"},{"Id":"1080101121","IsPullRequest":true,"CreatedAt":"2021-12-14T19:30:43","Actor":"dotnet-maestro[bot]","Number":"5823","RawContent":null,"Title":"[release/5.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1b2e9dc5-44be-480a-8167-08d86afc0648)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 1b2e9dc5-44be-480a-8167-08d86afc0648\r\n- **Build**: 20211115.1\r\n- **Date Produced**: November 15, 2021 10:06:02 PM UTC\r\n- **Commit**: 2f5d6d594674c80c57048dd9ba8b4f6ee9297171\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 5.0.0-beta.21552.7 to 5.0.0-beta.21565.1][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 5.0.0-beta.21552.7 to 5.0.0-beta.21565.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 5.0.0-beta.21552.7 to 5.0.0-beta.21565.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 5.0.0-beta.21552.7 to 5.0.0-beta.21565.1][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 5.0.0-beta.21552.7 to 5.0.0-beta.21565.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/03adead...2f5d6d5\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:1b2e9dc5-44be-480a-8167-08d86afc0648)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5823","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dotnet/arcade\" (#5823)"},{"Id":"1080094211","IsPullRequest":true,"CreatedAt":"2021-12-14T19:17:17","Actor":"dotnet-maestro[bot]","Number":"5822","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f6560d32-4c6b-4ed3-5c71-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: f6560d32-4c6b-4ed3-5c71-08d72a4d3f20\r\n- **Build**: 20211111.2\r\n- **Date Produced**: November 11, 2021 7:34:26 PM UTC\r\n- **Commit**: 3df4410511ad9900804da00ec680bd1c7d6f21e1\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat**: [from 1.0.0-beta.21552.6 to 1.0.0-beta.21561.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.21552.6 to 1.0.0-beta.21561.2][1]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 1.0.0-beta.21552.6 to 1.0.0-beta.21561.2][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 1.0.0-beta.21552.6 to 1.0.0-beta.21561.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 2.0.0-beta.21552.6 to 2.0.0-beta.21561.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/afb7961...3df4410\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f6560d32-4c6b-4ed3-5c71-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5822","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#5822)"},{"Id":"1079829006","IsPullRequest":true,"CreatedAt":"2021-12-14T15:00:28","Actor":"dotnet-maestro[bot]","Number":"5818","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20211214.1\r\n- **Date Produced**: December 14, 2021 2:19:00 PM UTC\r\n- **Commit**: 52b1eaf58693f927258033ef92d7d513cc335feb\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-alpha.1.21613.2 to 7.0.0-alpha.1.21614.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-alpha.1.21613.2 to 7.0.0-alpha.1.21614.1][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/665e872...52b1eaf\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5818","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#5818)"},{"Id":"1079750507","IsPullRequest":true,"CreatedAt":"2021-12-14T13:55:15","Actor":"dotnet-maestro[bot]","Number":"5817","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20211213.2\r\n- **Date Produced**: December 13, 2021 2:45:43 PM UTC\r\n- **Commit**: bcd6e007b9f53be0a7aff804d5c17ea7e179317b\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.21610.4 to 7.0.0-beta.21613.2][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.21610.4 to 7.0.0-beta.21613.2][1]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.21610.4 to 7.0.0-beta.21613.2][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.21610.4 to 7.0.0-beta.21613.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.21610.4 to 7.0.0-beta.21613.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/18adc5b...bcd6e00\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/5817","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#5817)"},{"Id":"1079281846","IsPullRequest":true,"CreatedAt":"2021-12-14T09:06:25","Actor":"ThomasGoulet73","Number":"5815","RawContent":null,"Title":"Fix issue number in pull request template","State":"closed","Body":"## Description\r\nFix issue number to allow GitHub to link a PR with an issue. This also allows GitHub to automatically close the linked issue when the pull request is merged.\r\n\r\nGitHub does not recognize \"Fixes Issue #...\"\r\nGitHub recognizes \"Fixes #...\"\r\n\r\nI also moved \"PULL_REQUEST_TEMPLATE\" to \".github/PULL_REQUEST_TEMPLATE.md\", the same path as the template in the Windows Forms repo.\r\n\r\n## Customer Impact\r\nNone.\r\n\r\n## Regression\r\nNo.\r\n\r\n## Testing\r\nI don't really know how to test it without merging this PR.\r\n\r\n## Risk\r\nNone.\r\n","Url":"https://github.com/dotnet/wpf/pull/5815","RelatedDescription":"Closed or merged PR \"Fix issue number in pull request template\" (#5815)"},{"Id":"1079373689","IsPullRequest":false,"CreatedAt":"2021-12-14T06:44:42","Actor":"andrekoehler","Number":"5816","RawContent":null,"Title":"Window freezes during resize when updating WriteableBitmap from worker thread","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n6.0.100\r\n\r\n* Windows version: (`winver`)\r\nWindows 10 21H2\r\n\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\nYes\r\n\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? If yes, please file the issue via the instructions [here](https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019).\r\nNo\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/main/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nUpdating the back buffer of a WriteableBitmap once per frame works fine until I try to resize the form. As soon as I do that, the mouse cursor is forever in resize mode and the mouse is locked out from the Windows task bar.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nStuck in resize mode, Window does not respond anymore.\r\n \r\n **Expected behavior:**\r\nWriting to a WriteableBitmap should not disturb the Window's resizing behavior because it was explicitly designed for multi-threading: https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.imaging.writeablebitmap?view=windowsdesktop-6.0&viewFallbackFrom=net-6.0#remarks\r\n\r\n> 3) Write changes to the back buffer. Other threads may write changes to the back buffer when the WriteableBitmap is locked.\r\n\r\n \r\n **Minimal repro:**\r\nCreate a new Wpf App, then copy the following code over MainWindow.xaml.cs:\r\n```\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Media;\r\nusing System.Windows.Media.Imaging;\r\n\r\nnamespace WpfApp1\r\n{\r\n    public partial class MainWindow : Window\r\n    {\r\n        private readonly byte[] buffer = new byte[1920 * 1080 * 3];\r\n\r\n        private readonly WriteableBitmap wb = new WriteableBitmap(\r\n            1920, 1080, 96, 96, PixelFormats.Bgr24, null);\r\n\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n\r\n            for (int y = 0; y < wb.PixelHeight; ++y)\r\n            {\r\n                for (int x = 0; x < wb.PixelWidth; ++x)\r\n                {\r\n                    int offset = 3 * x + (y * wb.PixelWidth * 3);\r\n                    buffer[offset + 0] = 0xFF;\r\n                }\r\n            }\r\n\r\n            Image image = new Image() { Source = wb };\r\n            this.Content = image;\r\n\r\n            CompositionTarget.Rendering += CompositionTarget_Rendering;\r\n        }\r\n\r\n\r\n        private async void CompositionTarget_Rendering(object sender, EventArgs e)\r\n        {\r\n            wb.Lock();\r\n\r\n            // we have to copy this because it must only be accessed from the UI thread\r\n            IntPtr backBuffer = wb.BackBuffer;\r\n\r\n            // assume there is no padding to make this example short\r\n            System.Diagnostics.Debug.Assert(wb.BackBufferStride == wb.PixelWidth * wb.Format.BitsPerPixel / 8);\r\n\r\n            void CopyImage()\r\n            {\r\n                Marshal.Copy(buffer, 0, backBuffer, buffer.Length);\r\n            }\r\n            await Task.Run(CopyImage); // freeze only if resizing\r\n            //CopyImage(); works but higher load on UI thread\r\n\r\n            wb.AddDirtyRect(new Int32Rect(0, 0, wb.PixelWidth, wb.PixelHeight));\r\n            wb.Unlock();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n","Url":"https://github.com/dotnet/wpf/issues/5816","RelatedDescription":"Open issue \"Window freezes during resize when updating WriteableBitmap from worker thread\" (#5816)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-12-16T05:31:01.979405Z","RunDurationInMilliseconds":714}