{"Data":{"GitHub":{"Issues":[{"Id":"2980722719","IsPullRequest":true,"CreatedAt":"2025-04-08T19:09:43","Actor":"vseanreesermsft","Number":"10742","RawContent":null,"Title":"Merging internal commits for release/8.0","State":"open","Body":"\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10742)","Url":"https://github.com/dotnet/wpf/pull/10742","RelatedDescription":"Open PR \"Merging internal commits for release/8.0\" (#10742)"},{"Id":"2980697256","IsPullRequest":true,"CreatedAt":"2025-04-08T18:57:07","Actor":"vseanreesermsft","Number":"10741","RawContent":null,"Title":"Merging internal commits for release/9.0","State":"open","Body":"\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10741)","Url":"https://github.com/dotnet/wpf/pull/10741","RelatedDescription":"Open PR \"Merging internal commits for release/9.0\" (#10741)"},{"Id":"2980625983","IsPullRequest":false,"CreatedAt":"2025-04-08T18:23:51","Actor":"JeremyKuhne","Number":"10740","RawContent":null,"Title":"Investigate removing hard dependency on System.Drawing.Common for Clipboard","State":"open","Body":"Now that CsWin32 is fully available, there is no need to load the entirety of `System.Drawing.Common` to handle Clipboard scenarios. https://github.com/dotnet/wpf/tree/main/src/Microsoft.DotNet.Wpf/src/Extensions/PresentationFramework-SystemDrawing should be able to be removed.\n\nTo do this safely, GDI+ initialization needs to be done via `GdiPlusInitialization.EnsureInitialized()` in `System.Private.Windows.Core`. GDI+ CsWin32 handle types are exposed in this assembly.\n\nGDI+ is mostly being used for creating HBITMAP and looking at image metadata. Another option here may be going directly against WIC APIs for some of the functionality, which GDI+ uses under the covers anyway.","Url":"https://github.com/dotnet/wpf/issues/10740","RelatedDescription":"Open issue \"Investigate removing hard dependency on System.Drawing.Common for Clipboard\" (#10740)"},{"Id":"2980603410","IsPullRequest":false,"CreatedAt":"2025-04-08T18:13:50","Actor":"JeremyKuhne","Number":"10739","RawContent":null,"Title":"Convert drag/drop code to use shared implementation","State":"open","Body":"The shared code is available, but WPF has not been converted to use it.\n\nhttps://github.com/dotnet/winforms/blob/main/src/System.Private.Windows.Core/src/System/Private/Windows/Ole/DragDropHelper.cs\n\nThis has not been investigated yet. Code paths would need compared between WinForms and WPF to ensure the shared code satisfies WPF needs. @JeremyKuhne and @Tanya-Solyanik can be consulted.","Url":"https://github.com/dotnet/wpf/issues/10739","RelatedDescription":"Open issue \"Convert drag/drop code to use shared implementation\" (#10739)"},{"Id":"2980596059","IsPullRequest":false,"CreatedAt":"2025-04-08T18:11:31","Actor":"JeremyKuhne","Number":"10738","RawContent":null,"Title":"Null annotate new APIs in ref assembly","State":"open","Body":"Clipboard and DataObject are null annotated in the implementation, but the ref assembly code has not been updated with the null annotations.","Url":"https://github.com/dotnet/wpf/issues/10738","RelatedDescription":"Open issue \"Null annotate new APIs in ref assembly\" (#10738)"},{"Id":"2980565309","IsPullRequest":false,"CreatedAt":"2025-04-08T18:01:36","Actor":"JeremyKuhne","Number":"10737","RawContent":null,"Title":"Obsolete old APIs (in ref and impl assemblies)","State":"open","Body":"#10544 exposes the new APIs but does not obsolete the GetData* APIs.\n\nSee WinForms obsoletions here https://github.com/dotnet/winforms/blob/89978450ea81fbaffb3e41ab3a2e131aba22e09f/src/System.Windows.Forms/System/Windows/Forms/OLE/Clipboard.cs#L135-L147 and here https://github.com/dotnet/winforms/blob/89978450ea81fbaffb3e41ab3a2e131aba22e09f/src/System.Windows.Forms/System/Windows/Forms/OLE/DataObject.cs#L108-L127.\n\n``` C#\n    /// <summary>\n    ///  Retrieves data from the <see cref=\"Clipboard\"/> in the specified format.\n    /// </summary>\n    /// <exception cref=\"ThreadStateException\">\n    ///  The current thread is not in single-threaded apartment (STA) mode.\n    /// </exception>\n    [Obsolete(\n        Obsoletions.ClipboardGetDataMessage,\n        error: false,\n        DiagnosticId = Obsoletions.ClipboardGetDataDiagnosticId,\n        UrlFormat = Obsoletions.SharedUrlFormat)]\n    public static object? GetData(string format) =>\n        string.IsNullOrWhiteSpace(format) ? null : GetData(format, autoConvert: false);\n```","Url":"https://github.com/dotnet/wpf/issues/10737","RelatedDescription":"Open issue \"Obsolete old APIs (in ref and impl assemblies)\" (#10737)"},{"Id":"2980562010","IsPullRequest":false,"CreatedAt":"2025-04-08T18:00:01","Actor":"JeremyKuhne","Number":"10736","RawContent":null,"Title":"Expose typed Clipboard APIs in WPF","State":"open","Body":"As the Windows clipboard is a shared resource and .NET uses binary format (NRBF), there is some amount of risk to having only untyped (`object`) deserialization. While usage of `BinaryFormatter` now requires a [compatibility package](https://learn.microsoft.com/dotnet/standard/serialization/binaryformatter-migration-guide/compatibility-package), when one needs to take this dependency for `Clipboard` or other reasons there are ways to mitigate exposure here.\n\n[New Clipboard and DataObject APIs](https://github.com/dotnet/winforms/issues/12362) describes the new set of APIs and behaviors that both Windows Forms and WPF are implementing in .NET 10.\n\nThe brief summary of changes:\n\n- `Get` APIs that return `object` are all obsoleted\n- A new `TryGet<T>` set of methods have been introduced to replace the obsoleted APIs\n- Introduces a `SetDataAsJson<T>` for simple JSON user type serialization\n- `BinaryFormatter` usage in Clipboard scenarios now requires an additional `AppContext` switch\n\nIt is recommended that users use .NET primitive types (`string`, `int`, etc.) or arrays or `List<>` of these primitives for `Clipboard` and drag/drop. Simple types can be set with `SetDataAsJson` to avoid `BinaryFormatter`.\n\nChecklist of required work:\n\n- [x] Consume and use shared OLE implementation from WinForms #10544\n- [x] Expose typed get and set as JSON APIs #10544\n- [ ] Obsolete old APIs\n- [ ] Null annotate new APIs in ref assembly\n- [ ] Create breaking change documentation\n- [ ] Update API documentation\n\nChecklist for other follow-up:\n\n- [ ] Implement additional unit tests\n- [ ] Convert drag/drop code to use shared implementation\n- [ ] Investigate removing hard dependency of System.Drawing.Common for Clipboard","Url":"https://github.com/dotnet/wpf/issues/10736","RelatedDescription":"Open issue \"Expose typed Clipboard APIs in WPF\" (#10736)"},{"Id":"2979181307","IsPullRequest":true,"CreatedAt":"2025-04-08T09:29:34","Actor":"dipeshmsft","Number":"10735","RawContent":null,"Title":"Fixed MenuItem Header alignment wrt to Icons","State":"open","Body":"Fixes #9980 and #10493 \r\n\r\n## Description\r\nIn the current MenuItem Fluent styles, the Icon column didn't share width among the different MenuItems. Due to this, the Header content presenter gets misaligned.\r\n\r\n## Customer Impact\r\nImproves usability and speeds up visual scanning of the UI\r\n\r\n## Regression\r\nTechnically no, but as compared to Aero2 styles this is a regression in Fluent styles.\r\n\r\n## Testing\r\nLocal app testing.\r\n\r\n## Risk\r\nMinimal\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10735)","Url":"https://github.com/dotnet/wpf/pull/10735","RelatedDescription":"Open PR \"Fixed MenuItem Header alignment wrt to Icons\" (#10735)"},{"Id":"2978599015","IsPullRequest":true,"CreatedAt":"2025-04-08T05:02:02","Actor":"dotnet-maestro[bot]","Number":"10734","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\n## From https://github.com/dotnet/arcade\n- **Subscription**: [840bf684-917a-4879-f62c-08d8e93a0c51](https://maestro.dot.net/subscriptions?search=840bf684-917a-4879-f62c-08d8e93a0c51)\n- **Build**: [20250407.4](https://dev.azure.com/dnceng/internal/_build/results?buildId=2681473)\n- **Date Produced**: April 7, 2025 8:03:01 PM UTC\n- **Commit**: [6bcab7722ffc02d9a9f64e736d06bb4e4a04a94b](https://github.com/dotnet/arcade/commit/6bcab7722ffc02d9a9f64e736d06bb4e4a04a94b)\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.25206.1 to 10.0.0-beta.25207.4][1]\n  - **Microsoft.DotNet.CodeAnalysis**: [from 10.0.0-beta.25206.1 to 10.0.0-beta.25207.4][1]\n  - **Microsoft.DotNet.GenAPI**: [from 10.0.0-beta.25206.1 to 10.0.0-beta.25207.4][1]\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.25206.1 to 10.0.0-beta.25207.4][1]\n\n[1]: https://github.com/dotnet/arcade/compare/37f732fbfa...6bcab7722f\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10734)","Url":"https://github.com/dotnet/wpf/pull/10734","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/arcade\" (#10734)"},{"Id":"2977733678","IsPullRequest":true,"CreatedAt":"2025-04-07T19:01:15","Actor":"dotnet-maestro[bot]","Number":"10733","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"open","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:Coherency Updates)\n## Coherency Updates\n\nThe following updates ensure that dependencies with a *CoherentParentDependency*\nattribute were produced in a build used as input to the parent dependency's build.\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\n\n[DependencyUpdate]: <> (Begin)\n\n- **Coherency Updates**:\n  - **System.Reflection.MetadataLoadContext**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Windows.Extensions**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.Platforms**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Resources.Extensions**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Serialization.Formatters**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Ref**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.Registry.AccessControl**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **Microsoft.Win32.SystemEvents**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.CodeDom**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Configuration.ConfigurationManager**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Data.Odbc**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Data.OleDb**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.EventLog**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Diagnostics.PerformanceCounter**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.AccountManagement**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices.Protocols**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.DirectoryServices**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Formats.Nrbf**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Packaging**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.IO.Ports**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Management**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Reflection.Context**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Runtime.Caching**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Pkcs**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.ProtectedData**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Cryptography.Xml**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Security.Permissions**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceModel.Syndication**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.ServiceProcess.ServiceController**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Speech**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Text.Encoding.CodePages**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.Threading.AccessControl**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n  - **System.ComponentModel.Composition.Registration**: from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7 (parent: Microsoft.Private.Winforms)\n\n[DependencyUpdate]: <> (End)\n\n[marker]: <> (End:Coherency Updates)\n\n\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n## From https://github.com/dotnet/winforms\n- **Subscription**: [dd483b3f-65b0-44ab-f62d-08d8e93a0c51](https://maestro.dot.net/subscriptions?search=dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n- **Build**: [20250408.2](https://dev.azure.com/dnceng/internal/_build/results?buildId=2682237)\n- **Date Produced**: April 8, 2025 4:55:25 PM UTC\n- **Commit**: [89978450ea81fbaffb3e41ab3a2e131aba22e09f](https://github.com/dotnet/winforms/commit/89978450ea81fbaffb3e41ab3a2e131aba22e09f)\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 10.0.0-preview.4.25205.1 to 10.0.0-preview.4.25208.2][4]\n  - **Microsoft.Private.Winforms**: [from 10.0.0-preview.4.25205.1 to 10.0.0-preview.4.25208.2][4]\n  - **System.Drawing.Common**: [from 10.0.0-preview.4.25205.1 to 10.0.0-preview.4.25208.2][4]\n  - **System.Reflection.MetadataLoadContext**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Windows.Extensions**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **Microsoft.NETCore.Platforms**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Resources.Extensions**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Runtime.Serialization.Formatters**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **Microsoft.NETCore.App.Ref**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.10.0**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **Microsoft.Win32.Registry.AccessControl**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **Microsoft.Win32.SystemEvents**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.CodeDom**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.ComponentModel.Composition**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Configuration.ConfigurationManager**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Data.Odbc**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Data.OleDb**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Diagnostics.EventLog**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Diagnostics.PerformanceCounter**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.DirectoryServices.AccountManagement**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.DirectoryServices.Protocols**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.DirectoryServices**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Formats.Nrbf**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.IO.Packaging**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.IO.Ports**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Management**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Reflection.Context**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Runtime.Caching**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Security.Cryptography.Pkcs**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Security.Cryptography.ProtectedData**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Security.Cryptography.Xml**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Security.Permissions**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.ServiceModel.Syndication**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.ServiceProcess.ServiceController**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Speech**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Text.Encoding.CodePages**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.Threading.AccessControl**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n  - **System.ComponentModel.Composition.Registration**: [from 10.0.0-preview.4.25205.3 to 10.0.0-preview.4.25207.7][5]\n\n[4]: https://github.com/dotnet/winforms/compare/851d52d401...89978450ea\n[5]: https://github.com/dotnet/runtime/compare/a2e1d21bb4...9559b2a8c2\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\n\n\n\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10733)\n\n\n\n\n\n\n","Url":"https://github.com/dotnet/wpf/pull/10733","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/winforms\" (#10733)"},{"Id":"2977631502","IsPullRequest":true,"CreatedAt":"2025-04-07T18:15:33","Actor":"harshit7962","Number":"10732","RawContent":null,"Title":"Fix DataObject SetData methods inaccordance to previous implementation","State":"open","Body":"## Description\r\nThese changes are in accordance to the original API contract of certain `SetData` methods in `DataObject` class. The original behaviour was altered a bit in form of exceptions not being thrown as part of the shared clipboard code for winforms and wpf as in the PR #10544. These changes brings back the expected behaviour that respects WPFs original implementation.\r\n <!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\n\r\n## Customer Impact\r\nAvoids breaking changes in subsequent preview release of .NET 10.\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\nYes\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\nLocal Build Pass, unit testing and verified the same with sample applications.\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\nLow\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10732)","Url":"https://github.com/dotnet/wpf/pull/10732","RelatedDescription":"Open PR \"Fix DataObject SetData methods inaccordance to previous implementation\" (#10732)"},{"Id":"2977597105","IsPullRequest":true,"CreatedAt":"2025-04-07T18:00:15","Actor":"h3xds1nz","Number":"10731","RawContent":null,"Title":"[StyleCleanUp] Add readonly modifiers in WindowsBase","State":"open","Body":"Fixes #10730 \r\n\r\n## Description\r\n\r\nFixes occurences of fields that are only written during construction to be `readonly` in `WindowsBase`.\r\n\r\nIn case they were being initialized to non-default value but are **always** overwritten in the constructor, I have removed such assigment. This is a case which analyzers won't flag and imho there's no better time to do it than when resolving `IDE0044` and changing fields to `readonly`.\r\n\r\n## Customer Impact\r\n\r\nIncreased performance due to the fields being treated as JIT-time constant in case of `static readonly` and better code-gen in `readonly` cases. These changes unlock #10724 since full sweep can only be done after the fields are marked appropriately.\r\n\r\n## Regression\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nLocal build.\r\n\r\n## Risk\r\n\r\nFull test pass will be required, even in cases where no manual changes are done.\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10731)","Url":"https://github.com/dotnet/wpf/pull/10731","RelatedDescription":"Open PR \"[StyleCleanUp] Add readonly modifiers in WindowsBase\" (#10731)"},{"Id":"2977588873","IsPullRequest":false,"CreatedAt":"2025-04-07T17:57:12","Actor":"h3xds1nz","Number":"10730","RawContent":null,"Title":"IDE0044: Add readonly modifier (fields) - WindowsBase","State":"open","Body":"Issue for fixing IDE0044 in `WindowsBase`.","Url":"https://github.com/dotnet/wpf/issues/10730","RelatedDescription":"Open issue \"IDE0044: Add readonly modifier (fields) - WindowsBase\" (#10730)"},{"Id":"2977168743","IsPullRequest":false,"CreatedAt":"2025-04-07T17:42:43","Actor":"ericstj","Number":"10721","RawContent":null,"Title":"WindowsDesktop redistributes many libraries already carried by MSBuild","State":"closed","Body":"### Description\n\nPresentationBuildTasks redistributes many runtime libraries:\nhttps://github.com/dotnet/wpf/blob/72af9a57bbfb4aac9bdc554d860ab320ac73c587/src/Microsoft.DotNet.Wpf/src/PresentationBuildTasks/PresentationBuildTasks.csproj#L53-L62\n\nAll of these have a version provided by MSBuild.\n\nWPF can reference the version provided by MSBuild and avoid shipping these.  The one tradeoff is that it won't be able to benefit from new API in these libraries right away - but that's most likely an acceptable tradeoff to avoid redistributing these libraries.\n\n### Reproduction Steps\n\nExamine `C:\\Program Files\\dotnet\\sdk\\10.0.100-preview.2.25164.34\\Sdks\\Microsoft.NET.Sdk.WindowsDesktop\\tools\\net472`\n\n### Expected behavior\n\nNo binaries included that overlap with those provided by MSBuild.\n\n### Actual behavior\n\nMany binaries redistributed with newer versions than MSBuild.\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nNo\n\n### Impact\n\nAdded complexity in servicing / size on disk\n\n### Configuration\n\nAll\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/wpf/issues/10721","RelatedDescription":"Closed issue \"WindowsDesktop redistributes many libraries already carried by MSBuild\" (#10721)"},{"Id":"2977227789","IsPullRequest":true,"CreatedAt":"2025-04-07T17:42:41","Actor":"ViktorHofer","Number":"10722","RawContent":null,"Title":"Don't redistribute inbox msbuild dependencies","State":"closed","Body":"Fixes https://github.com/dotnet/wpf/issues/10721\r\n\r\nSystem.CodeDom is only used on .NETCoreApp and its live version is available in the SDK directory. Therefore, we shouldn't need to pin it to an older version.","Url":"https://github.com/dotnet/wpf/pull/10722","RelatedDescription":"Closed or merged PR \"Don't redistribute inbox msbuild dependencies\" (#10722)"},{"Id":"2977454977","IsPullRequest":true,"CreatedAt":"2025-04-07T16:53:07","Actor":"h3xds1nz","Number":"10729","RawContent":null,"Title":"[StyleCleanUp] Add readonly modifiers in PresentationBuildTasks","State":"open","Body":"Fixes #10726 \r\n\r\n## Description\r\n\r\nFixes occurences of fields that are only written during construction to be `readonly` in `PresentationBuildTasks`.\r\n\r\nIn case they were being initialized to non-default value  (e.g. initialized to `string.Empty`) but are **always** overwritten in the constructor, I have removed such assigment. This is a case which analyzers won't flag and imho there's no better time to do it than when resolving `IDE0044` and changing fields to `readonly`.\r\n\r\n## Customer Impact\r\n\r\nIncreased performance due to the fields being treated as JIT-time constant in case of `static readonly` and better code-gen in `readonly` cases. These changes unlock #10724 since full sweep can only be done after the fields are marked appropriately.\r\n\r\n## Regression\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nLocal build.\r\n\r\n## Risk\r\n\r\nFull test pass will be required, even in cases where no manual changes are done.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10729)","Url":"https://github.com/dotnet/wpf/pull/10729","RelatedDescription":"Open PR \"[StyleCleanUp] Add readonly modifiers in PresentationBuildTasks\" (#10729)"},{"Id":"2977380216","IsPullRequest":false,"CreatedAt":"2025-04-07T16:20:24","Actor":"h3xds1nz","Number":"10728","RawContent":null,"Title":"IDE0044: Add readonly modifier (fields) - PresentationFramework","State":"open","Body":"Issue for fixing IDE0044 in `PresentationFramework`.","Url":"https://github.com/dotnet/wpf/issues/10728","RelatedDescription":"Open issue \"IDE0044: Add readonly modifier (fields) - PresentationFramework\" (#10728)"},{"Id":"2977378339","IsPullRequest":false,"CreatedAt":"2025-04-07T16:19:39","Actor":"h3xds1nz","Number":"10727","RawContent":null,"Title":"IDE0044: Add readonly modifier (fields) - PresentationCore","State":"open","Body":"Issue for fixing IDE0044 in `PresentationCore`.","Url":"https://github.com/dotnet/wpf/issues/10727","RelatedDescription":"Open issue \"IDE0044: Add readonly modifier (fields) - PresentationCore\" (#10727)"},{"Id":"2977376319","IsPullRequest":false,"CreatedAt":"2025-04-07T16:18:45","Actor":"h3xds1nz","Number":"10726","RawContent":null,"Title":"IDE0044: Add readonly modifier (fields) - PresentationBuildTasks","State":"open","Body":"Issue for fixing IDE0044 in `PresentationBuildTasks`.","Url":"https://github.com/dotnet/wpf/issues/10726","RelatedDescription":"Open issue \"IDE0044: Add readonly modifier (fields) - PresentationBuildTasks\" (#10726)"},{"Id":"2977334938","IsPullRequest":true,"CreatedAt":"2025-04-07T16:02:22","Actor":"h3xds1nz","Number":"10725","RawContent":null,"Title":"[StyleCleanUp] Use literals where appropriate (CA1802)","State":"open","Body":"I've prepared this PR but then just realized that #10382 needs to be done first to prevent havoc, so gonna draft this.\r\n\r\nFixes #10724\r\n\r\n## Description\r\n\r\nSwaps use of `static readonly` fields for `const` where appropriate. This in some cases saves allocations.\r\n\r\n**Note that naming issues will be taken care of in a separate issue to reduce diffs.**\r\n\r\n## Customer Impact\r\n\r\nDecreased allocations, a bit of perf.\r\n\r\n## Regression\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nLocal build.\r\n\r\n## Risk\r\n\r\nLow, just an analyzer fix. The only issue would be reflection-based changes that will no longer be possible but there's no point of supporting these anyways, we'd never move anywhere.\r\n\r\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10725)","Url":"https://github.com/dotnet/wpf/pull/10725","RelatedDescription":"Open PR \"[StyleCleanUp] Use literals where appropriate (CA1802)\" (#10725)"},{"Id":"2977297531","IsPullRequest":false,"CreatedAt":"2025-04-07T15:48:35","Actor":"h3xds1nz","Number":"10724","RawContent":null,"Title":"CA1802: Use literals where appropriate","State":"open","Body":"More info: https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1802","Url":"https://github.com/dotnet/wpf/issues/10724","RelatedDescription":"Open issue \"CA1802: Use literals where appropriate\" (#10724)"},{"Id":"2977262006","IsPullRequest":true,"CreatedAt":"2025-04-07T15:35:12","Actor":"h3xds1nz","Number":"10723","RawContent":null,"Title":"Use `Debug.Fail(\"message\")` over `Debug.Assert(false, \"message\")`","State":"open","Body":"## Description\r\n\r\nThis is a standard practice in rutime repo and also makes more sense in terms of readibility in general.\r\n\r\n`Fail` is what's called when condition in `Assert` evaluates to `false`. `false` indeed evaluates to `false`.\r\n\r\n## Customer Impact\r\n\r\nCleaner codebase for developers.\r\n\r\n## Regression\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nLocal build.\r\n\r\n## Risk\r\n\r\nThis was a simple search/replace, shouldn't introduce any risk.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10723)","Url":"https://github.com/dotnet/wpf/pull/10723","RelatedDescription":"Open PR \"Use `Debug.Fail(\"message\")` over `Debug.Assert(false, \"message\")`\" (#10723)"},{"Id":"2977028083","IsPullRequest":true,"CreatedAt":"2025-04-07T14:17:12","Actor":"bstordrup","Number":"10720","RawContent":null,"Title":"Adding more MessageBox buttons and result values","State":"open","Body":"Fixes #9613 \r\n\r\n## Description\r\n\r\nThe purpose with the pull request is to streamline the `MessageBox.Show` overloads between WinForms and WPF thus making it more intuitive and easier to migrate a WinForms applicatio to WPF.\r\nAlso, since (on Windows), both WinForms and WPF call into the same underlying Windows API functions, there is in my opinion only little reason not to streamline them.\r\n\r\n## Customer Impact\r\n\r\nThe customer impact of not taking this fix is that a migration from WinForms to WPF becomes a bit more complex when it comes to using MessageBox.Show with more options than just Yes/No or OK/Cancel. With the extension of both `MessageBoxButton` and `MessageBoxResult` enumerations, a more generous set of options is available for the application after showing `MessageBox.Show (...)` method.\r\n\r\n## Regression\r\n\r\nThis is no regression.\r\n\r\n## Testing\r\n\r\nI tested the extensions of `MessageBoxButton` and `MessageBoxResult` enumerations with a sample Wpf application targeting a locally build version of Wpf. It simply had a set of `Button` and `TextBlock` controls in `MainWindow`, and each of these buttons uses the `MessageBoxButton` enumeration value as indicated by the button title. The result of `MessageBox.Show` is then assigned to the corresponding `TextBlock` control.\r\n\r\n## Risk\r\n\r\nThe risk of taking this fix is minimal (if not even none). The WinForms repository already contains these extensions, and they are building upon an existing Windows API.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10720)","Url":"https://github.com/dotnet/wpf/pull/10720","RelatedDescription":"Open PR \"Adding more MessageBox buttons and result values\" (#10720)"},{"Id":"2977005324","IsPullRequest":true,"CreatedAt":"2025-04-07T14:09:17","Actor":"h3xds1nz","Number":"10719","RawContent":null,"Title":"Swap Dictionary<K, V> with HashSet<ICyclicBrush> in TreeWalkProgress","State":"open","Body":"## Description\r\n\r\nSwaps `Dictionary<ICyclicBrush, EmptyStruct>` with `HashSet<ICyclicBrush>` for improved performance and decreased allocations. The conditions under which this was written do no longer apply.\r\n\r\nAlso removes the double lookup on addition.\r\n\r\n## Customer Impact\r\n\r\nImproved performance, decreased allocations.\r\n\r\n## Regression\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nLocal build.\r\n\r\n## Risk\r\n\r\nLow.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10719)","Url":"https://github.com/dotnet/wpf/pull/10719","RelatedDescription":"Open PR \"Swap Dictionary<K, V> with HashSet<ICyclicBrush> in TreeWalkProgress\" (#10719)"},{"Id":"2976964220","IsPullRequest":true,"CreatedAt":"2025-04-07T13:55:32","Actor":"h3xds1nz","Number":"10718","RawContent":null,"Title":"[StyleCleanUp] Static holder types should be `static` or `sealed` (CA1052)","State":"open","Body":"Currently blocked via #10680 hence draft.\r\n\r\nFixes #10717 \r\n\r\n## Description\r\n\r\nFixes classes (usually) with private ctors to be `static` or `sealed` (in case of singletons).\r\n\r\n## Customer Impact\r\n\r\nCleaner codebase for developers.\r\n\r\n## Regression\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nLocal build.\r\n\r\n## Risk\r\n\r\nLow, these are all `internal` classes.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10718)","Url":"https://github.com/dotnet/wpf/pull/10718","RelatedDescription":"Open PR \"[StyleCleanUp] Static holder types should be `static` or `sealed` (CA1052)\" (#10718)"},{"Id":"2976954211","IsPullRequest":false,"CreatedAt":"2025-04-07T13:52:25","Actor":"h3xds1nz","Number":"10717","RawContent":null,"Title":"CA1052: Static holder types should be `static` or `sealed`","State":"open","Body":"More info: https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1052","Url":"https://github.com/dotnet/wpf/issues/10717","RelatedDescription":"Open issue \"CA1052: Static holder types should be `static` or `sealed`\" (#10717)"},{"Id":"2976904610","IsPullRequest":false,"CreatedAt":"2025-04-07T13:35:35","Actor":"DrkWzrd","Number":"10716","RawContent":null,"Title":"Make `AnimationType` public","State":"open","Body":"`System.Windows.Media.Animation.AnimationType` can be public without any problem. And that avoid implementators to create a new enum type for the same thing in custom animations.","Url":"https://github.com/dotnet/wpf/issues/10716","RelatedDescription":"Open issue \"Make `AnimationType` public\" (#10716)"},{"Id":"2976658664","IsPullRequest":true,"CreatedAt":"2025-04-07T12:12:09","Actor":"h3xds1nz","Number":"10715","RawContent":null,"Title":"Avoid caching `typeof` result to decrease code size and improve perf","State":"open","Body":"## Description\r\n\r\nThere are a lot of instances, mostly in generated code, that we cache the result of the `typeof(T)`. This is basically an anti-pattern for a few versions now as `typeof` is a JIT-time constant and the data is stored on the frozen heap.\r\n\r\nPreviously it was a cool optimization, now it is actually a de-optimization that increases code size and in some cases results in having additional fields stored. What this PR will mostly do is speed up the static init of core objects.\r\n\r\nFirst commit contains generated changes via `MilCodeGen`, second/third are manual replacements which could use a review.\r\n\r\n## Customer Impact\r\n\r\nDecreased code size, slightly improved performance on startup.\r\n\r\n## Regression\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nLocal build.\r\n\r\n## Risk\r\n\r\nLow.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10715)","Url":"https://github.com/dotnet/wpf/pull/10715","RelatedDescription":"Open PR \"Avoid caching `typeof` result to decrease code size and improve perf\" (#10715)"},{"Id":"2976618987","IsPullRequest":false,"CreatedAt":"2025-04-07T11:57:09","Actor":"martinivanoff","Number":"10714","RawContent":null,"Title":"WindowsFormsIntegration assembly is not copied in the output folder when Publish .NET 9 WPF application using Self-contained deployment mode","State":"open","Body":"### Description\n\nThe WindowsFormsIntegration dll is not copied in the \"publish\" folder afer a .NET 9 WPF application is published using Self-container deployment mode. \n\nTo reproduce the problem the `<UseWindowsForms>true</UseWindowsForms>` tag should be enabled in a WPF class library project. The class library should invoke a WinForms API (lets say the WindowsFormsHost for this specific case). Then, another (.NET 9) WPF project should reference the class library. On publish of the WPF project in self-contained mode, the WindowsFormsIntegration is not copied in the \"publish\" folder which causes runtime errors.\n\nThe issue occurs also with other WinForms dlls.\n\nThis not reproducible when publishin a .NET 8 application.\n\nAlso, this started recreating with Visual Studio v.17.13.1. The WinForms assembly was copied properly in a previous build of VIsual Studio (unfortunately I don't remember the exact previous build on my machine).\n\n### Reproduction Steps\n\n1. Get the attached project and open it in Visual Studio.\n2. Build the two projects.\n3. The project includes the needed publish profile, but if you need to recreate it again, the only setting aside from the default ones is to set the __Deployment mode__ to __Self-contained__.\n4. Publish the TestWpfApp project.\n5. Navigate to the __publish__ folder. You will see that the WindowsFromIntegration.dll file is missing. \n6. Run the `TestWpfApp.exe` file from the __publish__ folder. Nothing will happen because an exception occurs at runtime. You can indicate this by checking the Event Viewer tool of the Windows OS. Go to the Windows Logs --> Application view of the viewer to see the error.\n\nHere is the stacktrace of the issue:\n\n```\nSystem.IO.FileNotFoundException: Could not load file or assembly 'WindowsFormsIntegration, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\nFile name: 'WindowsFormsIntegration, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'\n   at WpfLibrary1.TestClass..ctor()\n   at WpfApp197.MainWindow..ctor() in C:\\Users\\mivanov\\source\\repos\\WpfApp197\\WpfApp197\\MainWindow.xaml.cs:line 11\n   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)\n   --- End of inner exception stack trace ---\n   at System.Windows.Markup.XamlReader.RewrapException(Exception e, IXamlLineInfo lineInfo, Uri baseUri)\n   at System.Windows.Markup.WpfXamlLoader.Load(XamlReader xamlReader, IXamlObjectWriterFactory writerFactory, Boolean skipJournaledProperties, Object rootObject, XamlObjectWriterSettings settings, Uri baseUri)\n   at System.Windows.Markup.WpfXamlLoader.LoadBaml(XamlReader xamlReader, Boolean skipJournaledProperties, Object rootObject, XamlAccessLevel accessLevel, Uri baseUri)\n   at System.Windows.Markup.XamlReader.LoadBaml(Stream stream, ParserContext parserContext, Object parent, Boolean closeStream)\n   at System.Windows.Application.LoadBamlStreamWithSyncInfo(Stream stream, ParserContext pc)\n   at System.Windows.Application.LoadComponent(Uri resourceLocator, Boolean bSkipJournaledProperties)\n   at System.Windows.Application.DoStartup()\n```\n\n[WpfTestApp.zip](https://github.com/user-attachments/files/19631510/WpfTestApp.zip)\n\n\n### Expected behavior\n\nThe WindowsFormsIntegration and any other WinForms related dlls used in the class library project should be copied in the publish folder.\n\n### Actual behavior\n\nThe WindowsFormsIntegration dll is not copied in the publish folder, which causes a runtime error.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nTo workaround this use one of the following workarounds:\n* Enable the `<UseWindowsForms>true</UseWindowsForms>` tag also in the main project. \n* Manuallyu reference the related WinForms dlls in the main project.\n* Use .NET 8 for the main project and wait for the fix. Or avoid the Self-contained deployment mode.\n* Manually copy the WinForms dll in the publish folder. You can do that using a post build action in the main project or an extra build step if are running this on a DevOps system.\n\n### Impact\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_","Url":"https://github.com/dotnet/wpf/issues/10714","RelatedDescription":"Open issue \"WindowsFormsIntegration assembly is not copied in the output folder when Publish .NET 9 WPF application using Self-contained deployment mode\" (#10714)"},{"Id":"2976100247","IsPullRequest":true,"CreatedAt":"2025-04-07T08:46:53","Actor":"h3xds1nz","Number":"10713","RawContent":null,"Title":"Add tests for public API surface of BitmapSizeOptions, cleanup the class","State":"open","Body":"## Description\r\n\r\nAdds test for the entire public API surface of `BitmapSizeOptions`.\r\n\r\nBeyond that, the following has been code:\r\n- Updated xml doc to reflect the state of things (there were several incorrect claims that are correct in the official documentation / and also now proven via the unit tests, especially the rotation stuff)\r\n- Uses auto-init properties now to allow for the field to be readonly after creation.\r\n- The namespace has been flattened as in all new PRs. This is a separate commit to allow for easy review.\r\n\r\n## Customer Impact\r\n\r\nBetter codegen and test coverage on public surface.\r\n\r\n## Regression\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nLocal build, unit tests.\r\n\r\n## Risk\r\n\r\nLow.\r\n\n ###### Microsoft Reviewers: [Open in CodeFlow](https://microsoft.github.io/open-pr/?codeflow=https://github.com/dotnet/wpf/pull/10713)","Url":"https://github.com/dotnet/wpf/pull/10713","RelatedDescription":"Open PR \"Add tests for public API surface of BitmapSizeOptions, cleanup the class\" (#10713)"}],"ResultType":"GitHubIssue"}},"RunOn":"2025-04-09T03:30:26.5529334Z","RunDurationInMilliseconds":492}