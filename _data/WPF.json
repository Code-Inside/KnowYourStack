{"Data":{"GitHub":{"Issues":[{"Id":"854859803","IsPullRequest":false,"CreatedAt":"2021-04-09T21:17:42","Actor":"SetTrend","Number":"4393","RawContent":null,"Title":"Cannot freeze color palette based BitmapSource image","State":"open","Body":"* .NET Core Version: 5.0.201\r\n* Windows version: Windows 10x64 20H2 19042.906\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?\r\n  I'm not able to test: [.NET Framework 4.8 not available in VS 2019 New Project wizard](https://developercommunity.visualstudio.com/t/NET-Framework-48-not-listed-in-New-Pro/1395034?entry=myfeedback&space=8&scope=follow&sort=newest)\r\n  However, I can reproduce in .NET Framework 4.72.\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No.\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n### Problem description:\r\n\r\nI'm not able to freeze a color palette based [`BitmapSource`](https://docs.microsoft.com/dotnet/api/system.windows.media.imaging.bitmapsource) image.\r\n\r\nSo, it's impossible to create a color palette based `BitmapSource` image asynchronously and yield to WPF UI thread. (See [this issue on StackOverflow](https://stackoverflow.com/questions/67020257/how-can-i-yield-a-palette-image-from-another-thread-to-wpf-ui-thread).)\r\n\r\n### Actual behavior: <!-- callstack for crashes / exceptions -->\r\n\r\n```BitmapSource.CanFreeze``` always yields `false` when the image assigned is using a color palette.\r\n\r\n### Expected behavior:\r\n\r\n```BitmapSource.CanFreeze``` should return `true`, even with bitmaps using a color palette.\r\n\r\nA color palette is a `DispatcherObject` that cannot be transferred between threads, cloned or anything else. So, there is no way to workaround this situation.\r\n \r\n### Minimal repro:\r\n\r\n```c#\r\ninternal static Task<BitmapSource> GetImageAsync()\r\n{\r\n  return Task.Run<BitmapSource>(() =>\r\n  {\r\n    BitmapImage bi = new BitmapImage();\r\n\r\n    bi.BeginInit();\r\n    bi.UriSource = new Uri(@\"test.jpg\");\r\n    bi.DecodePixelWidth = 16;\r\n    bi.EndInit();\r\n\r\n    FormatConvertedBitmap fcb = new FormatConvertedBitmap(bi, PixelFormats.Indexed2, new BitmapPalette(bi, 4), 1);\r\n\r\n    // Required for the UI thread to be able to use the bitmap.\r\n    // However, fcb.CanFreeze is false, though.\r\n    fcb.Freeze();\r\n\r\n    return fcb;\r\n  });\r\n}\r\n```\r\n<br/>\r\n\r\nWPF tracing returns the following warning message:\r\n```html\r\nSystem.Windows.Freezable Warning:\r\n  2 : CanFreeze is returning false because a DependencyProperty\r\n      on the Freezable has a value that is a DispatcherObject\r\n      with thread affinity\r\n```","Url":"https://github.com/dotnet/wpf/issues/4393","RelatedDescription":"Open issue \"Cannot freeze color palette based BitmapSource image\" (#4393)"},{"Id":"852852981","IsPullRequest":false,"CreatedAt":"2021-04-09T16:01:18","Actor":"Omcsesz","Number":"4385","RawContent":null,"Title":"DataGrid ItemsSource unexpected behavior","State":"closed","Body":"Hello, Team!\r\n\r\nI would like to report the following issue:\r\nwhen I add a new item to a List, then I set it to be the ItemSource, this results in putting the two entries beside each other:\r\n![DataGridUnexpectedBehavior](https://user-images.githubusercontent.com/1839739/113763476-02fcd500-971a-11eb-84c3-736bbd703699.jpg)\r\n\r\n[WpfApp1.zip](https://github.com/dotnet/sdk/files/6266869/WpfApp1.zip)\r\n\r\nIs this normal?\r\nCan you please support?\r\n","Url":"https://github.com/dotnet/wpf/issues/4385","RelatedDescription":"Closed issue \"DataGrid ItemsSource unexpected behavior\" (#4385)"},{"Id":"854611205","IsPullRequest":false,"CreatedAt":"2021-04-09T15:07:41","Actor":"magla42","Number":"4392","RawContent":null,"Title":"Get of RowDefinition Height gives Pixel value with Star GridUnitType","State":"open","Body":"* .NET Core Version: 5.0.5\r\n* Windows version: Windows 10, build 19042.868\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Don't know, but probably not considering this [old social.msdn post](https://social.msdn.microsoft.com/Forums/vstudio/en-US/08579b70-8b53-4855-9eea-333ce05491f8/how-to-saverestore-gridsplitter-position?forum=wpf)\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)?: As far as I can judge, this is a runtime issue.\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nI have the following `Grid` and `GridSplitter` in xaml:\r\n```\r\n<Grid>\r\n    <Grid.RowDefinitions>            \r\n        <RowDefinition Height=\"{Binding TheHeight, Mode=TwoWay}\"/>\r\n        <RowDefinition Height=\"2*\"/>\r\n    </Grid.RowDefinitions>\r\n\r\n     <GridSplitter Grid.Row=\"0\" Height=\"5\" VerticalAlignment=\"Bottom\"/>\r\n     \r\n     ... snip ...\r\n\r\n</Grid>\r\n```\r\nWith the initial value of `TheHeight` property on the DataContext (viewmodel) set to, for example, `GridLength(1.0, GridUnitType.Star)` this looks as expected.\r\n\r\nWhen the user moves the `GridSplitter`, say for example so the two Grid-rows are equal size, I would expect the `TheHeight` property to be updated via the binding to `GridLength(2.0, GridUnitType.Star)`. \r\n\r\nWhat I get is however something like `GridLength(321.3, GridUnitType.Star)`. That is, it seems you get the Pixel-value but with the Star `GridUnitType`.\r\n\r\nWhen this `GridLength` is written back to the view, typically next time it is recreated, you get a very large first row and a very small second row. So _setting_ the RowDefinition Height property seems to work as expected.\r\n","Url":"https://github.com/dotnet/wpf/issues/4392","RelatedDescription":"Open issue \"Get of RowDefinition Height gives Pixel value with Star GridUnitType\" (#4392)"},{"Id":"854489050","IsPullRequest":true,"CreatedAt":"2021-04-09T13:02:23","Actor":"dotnet-maestro[bot]","Number":"4391","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210409.2\r\n- **Date Produced**: 4/9/2021 12:33 PM\r\n- **Commit**: f719b29a7f981497db46d6b04a8b0d75e389c388\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.4.21208.2 to 6.0.0-preview.4.21209.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC568d6bd&targetVersion=GCf719b29&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4391","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4391)"},{"Id":"852197717","IsPullRequest":false,"CreatedAt":"2021-04-08T15:22:52","Actor":"JansthcirlU","Number":"4382","RawContent":null,"Title":"DataGrid binding to SelectedItem does not trigger when changing selection","State":"closed","Body":"# `DataGrid` selected item does not change when I select a different row\r\n\r\nI'm not sure if this is the right place to ask this, but I can't seem to find anything on Stack Overflow. In short, I have a `DataGrid` that's bound to an `ObservableCollection` of a custom class I've written called `Coordinate`. When I populate the collection by adding rows in the data grid, the collection gets updated correctly. However, when I click around to select different rows (e.g. to update their content), my binding to the grid's `SelectedItem` does not seem to change.\r\n\r\n## 1. Implementations\r\n\r\n### a. `DataGrid` implementation\r\n\r\n```xaml\r\n<DataGrid x:Name=\"CoordinatesData\"\r\n                 ItemsSource=\"{Binding Coordinates}\"\r\n                 SelectedItem=\"{Binding SelectedCoordinate}\"\r\n                 AutoGenerateColumns=\"False\"\r\n                 CanUserAddRows=\"True\"\r\n                 CanUserReorderColumns=\"False\"\r\n                 CanUserSortColumns=\"False\"\r\n                 CanUserResizeColumns=\"False\">\r\n    <DataGrid.Columns>\r\n        <DataGridTextColumn Header=\"Xs\" Binding=\"{Binding X}\" />\r\n        <DataGridTextColumn Header=\"Ys\" Binding=\"{Binding Y}\" />\r\n    </DataGrid.Columns>\r\n</DataGrid>\r\n```\r\n\r\n### b. Viewmodel implementation\r\n\r\n```csharp\r\npublic class CoordinatesViewmodel : ...\r\n{\r\n    ...\r\n    private ObservableCollection<Coordinate<double, double>> _coordinates = new ObservableCollection<Coordinate<double, double>>();\r\n    private Coordinate<double, double> _selectedCoordinate = null;\r\n    ...\r\n    public ObservableCollection<Coordinate<double, double>> Coordinates\r\n    {\r\n        get => _coordinates;\r\n        set => _coordinates = value;\r\n    }\r\n    public Coordinate<double, double>> SelectedCoordinate\r\n    {\r\n        get => _selectedCoordinate;\r\n        set => _selectedCoordinate = value;\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### c. `Coordinate<T, U>` implementation\r\n\r\n```csharp\r\npublic class Coordinate<T, U> : IComparable<Coordinate<T, U>>, IEquatable<Coordinate<T, U>>\r\n    where T : IComparable<T>, IEquatable<T>\r\n    where U : IComparable<U>, IEquatable<U>\r\n{\r\n    public Coordinate() { }\r\n    public Coordinate(T x, U y)\r\n    {\r\n        X = x;\r\n        Y = y;\r\n    }\r\n\r\n    public T X { get; set; }\r\n    public U Y { get; set; }\r\n\r\n    public override string ToString() => $\"({X}, {Y})\";\r\n\r\n    public int CompareTo(Coordinate<T, U> other)\r\n    {\r\n        if (!(other is null) && other is Coordinate<T, U> cObj)\r\n        {\r\n            var result = X.CompareTo(cObj.X) == 0\r\n                            ? Y.CompareTo(cObj.Y)\r\n                            : X.CompareTo(cObj.X);\r\n            return result;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    public bool Equals(Coordinate<T, U> other)\r\n        => ReferenceEquals(this, other);\r\n\r\n    public override bool Equals(object obj)\r\n        => obj is Coordinate<T, U> cObj && Equals(cObj);\r\n\r\n    public override int GetHashCode()\r\n        => HashCode.Combine(X, Y);\r\n\r\n    public static bool operator ==(Coordinate<T, U> left, Coordinate<T, U> right)\r\n        => left?.CompareTo(right) == 0;\r\n\r\n    public static bool operator !=(Coordinate<T, U> left, Coordinate<T, U> right)\r\n        => !(left == right);\r\n\r\n    public static bool operator <(Coordinate<T, U> left, Coordinate<T, U> right)\r\n        => left?.CompareTo(right) < 0;\r\n\r\n    public static bool operator >(Coordinate<T, U> left, Coordinate<T, U> right)\r\n        => left?.CompareTo(right) > 0;\r\n\r\n    public static bool operator <=(Coordinate<T, U> left, Coordinate<T, U> right)\r\n        => left?.CompareTo(right) <= 0;\r\n\r\n    public static bool operator >=(Coordinate<T, U> left, Coordinate<T, U> right)\r\n        => left?.CompareTo(right) >= 0;\r\n}\r\n```\r\n\r\n## 2. Observations\r\n\r\nI thought that the `SelectedItem` property would automatically take care of selection changes and whatnot, but what I've noticed is that I only get into the setter when the first row of the `DataGrid` is added to the collection. After that, I can keep adding new rows but when I then select one of the previous rows, my `SelectedItem` property does not update.\r\n\r\nWhat could be the issue here?","Url":"https://github.com/dotnet/wpf/issues/4382","RelatedDescription":"Closed issue \"DataGrid binding to SelectedItem does not trigger when changing selection\" (#4382)"},{"Id":"853467359","IsPullRequest":true,"CreatedAt":"2021-04-08T13:40:55","Actor":"dotnet-maestro[bot]","Number":"4390","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20210408.1\r\n- **Date Produced**: 4/8/2021 1:10 PM\r\n- **Commit**: f40322f4b65ee7da86cabe708eec5bac9c9f3dd8\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 6.0.0-preview.4.21207.3 to 6.0.0-preview.4.21208.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 6.0.0-preview.4.21207.3 to 6.0.0-preview.4.21208.1][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/e71ccb0...f40322f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4390","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#4390)"},{"Id":"853455030","IsPullRequest":true,"CreatedAt":"2021-04-08T13:27:49","Actor":"dotnet-maestro[bot]","Number":"4389","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210408.2\r\n- **Date Produced**: 4/8/2021 12:57 PM\r\n- **Commit**: 568d6bdfc4ddf9cfff8ef1cfb663a900c14e3139\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.4.21206.2 to 6.0.0-preview.4.21208.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GCa94c471&targetVersion=GC568d6bd&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4389","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4389)"},{"Id":"853085036","IsPullRequest":true,"CreatedAt":"2021-04-08T06:14:44","Actor":"dotnet-maestro[bot]","Number":"4388","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20210407.3\r\n- **Date Produced**: 4/8/2021 5:35 AM\r\n- **Commit**: e71ccb00909c57ca07ceef26b75a13bbe4fb9d46\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 6.0.0-preview.4.21207.2 to 6.0.0-preview.4.21207.3][1]\r\n  - **Microsoft.Private.Winforms**: [from 6.0.0-preview.4.21207.2 to 6.0.0-preview.4.21207.3][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/3294829...e71ccb0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4388","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#4388)"},{"Id":"853056110","IsPullRequest":true,"CreatedAt":"2021-04-08T05:05:03","Actor":"dotnet-maestro[bot]","Number":"4387","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20210407.2\r\n- **Date Produced**: 4/8/2021 4:42 AM\r\n- **Commit**: 3294829bcfbcb45404f42d9a55e288fda4184997\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 6.0.0-preview.4.21206.5 to 6.0.0-preview.4.21207.2][1]\r\n  - **Microsoft.Private.Winforms**: [from 6.0.0-preview.4.21206.5 to 6.0.0-preview.4.21207.2][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/c1ea1e2...3294829\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4387","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#4387)"},{"Id":"852871535","IsPullRequest":false,"CreatedAt":"2021-04-07T22:21:31","Actor":"SamBent","Number":"4386","RawContent":null,"Title":"Scrolling optimization for SW rendering is wrong - crashes in debug build","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`) all\r\n* Windows version: (`winver`) all\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? If yes, please file the issue via the instructions [here](https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019). no\r\n* Security issues and bugs should be reported privately, learn more via our [responsible disclosure guidelines](https://github.com/dotnet/wpf/blob/master/README.md#reporting-security-issues-and-security-bugs).\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nThe method ``CPreComputeContext::ScrollableAreaHandling`` applies an optimization for scrolling when using SW rendering (e.g. over RDP).  [Part of it](https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/WpfGfx/core/uce/precompctx.cpp#L1184-L1196) is wrong:\r\n```\r\n             // trim horizontalScrollRect so it doesn't overlap verticalScrollRect\r\n            if (offsetY != 0)\r\n            {\r\n                if (offsetY > 0)\r\n                {\r\n                    // scrolling up. Strip is along the top of the clip area\r\n                    horizontalScrollRect.top += offsetY;\r\n                }\r\n                else\r\n                {\r\n                    // scrolling down\r\n                    horizontalScrollRect.bottom += offsetY;\r\n                }\r\n            }\r\n```\r\nWhen `offsetY` exceeds the height of the `scrollClipRectFinal`, this makes `horizontalScrollRect` invalid because ``top > bottom``.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n In debug builds, this fails ``Assert(horizontalScrollRect.IsWellOrdered());``  a few lines farther down, and crashes.\r\nIn retail builds the bad rect is detected in [`CDirtyRegion2::Add`](https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/WpfGfx/core/uce/dirtyregion.cpp#L283-L305), which applies a fallback that \"could cause a serious perf regression\".\r\n\r\n **Expected behavior:**\r\nNo crash, no fallback, no \"serious perf regression\".\r\n \r\n **Minimal repro:**\r\nN/A.  I've seen this in Visual Studio (using debug WPF bits, and RDP connection).  While debugging an app, single-stepping occasionally hits the problem - it's deep in the low-level rendering code, so I don't know what VS is doing to request the problematic scroll.  VS crashes without warning - it just disappears.  By attaching WinDbgX to the VS process, I was able to catch the assert:\r\n\r\n```\r\n*** Assertion failed: horizontalScrollRect.IsWellOrdered()\r\n***   Function: CPreComputeContext::ScrollableAreaHandling, Source: `e:\\dd\\netfxdev1\\src\\wpf\\src\\graphics\\core\\uce\\precompctx.cpp:1198`\r\n\r\n(No kernel debugger is present.) Respond with:\r\n  g                    -- Go (continue)\r\n  eb 0x095CEEC8 'i';g  -- Ignore all future hits\r\n  eb 0x095CEEC8 'p';g  -- terminate Process\r\n  eb 0x095CEEC8 't';g  -- terminate Thread\r\n or regular debugging.\r\n(3124.6390): Break instruction exception - code 80000003 (first chance)\r\neax=00000000 ebx=08b47df0 ecx=00000065 edx=095cec91 esi=095cee84 edi=095ceef4\r\neip=76f64ef0 esp=095cee80 ebp=095ceef4 iopl=0         nv up ei pl zr na pe nc\r\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246\r\nntdll!DbgBreakPoint:\r\n76f64ef0 cc              int     3\r\n0:011> k5\r\n # ChildEBP RetAddr      \r\n00 095ceef4 62c0ad8f     ntdll!DbgBreakPoint [minkernel\\ntos\\rtl\\i386\\debug2.asm @ 61] \r\n01 095ceef4 62cc5567     wpfgfx_v0400!AssertW+0x27f [e:\\dd\\netfxdev1\\src\\wpf\\src\\graphics\\shared\\util\\utillib\\assert.inl @ 635] \r\n02 095cf1d8 62cc382c     wpfgfx_v0400!CPreComputeContext::ScrollableAreaHandling+0x877 [e:\\dd\\netfxdev1\\src\\wpf\\src\\graphics\\core\\uce\\precompctx.cpp @ 1198] \r\n03 095cf288 62d03f21     wpfgfx_v0400!CPreComputeContext::PreSubgraph+0x1ec [e:\\dd\\netfxdev1\\src\\wpf\\src\\graphics\\core\\uce\\precompctx.cpp @ 219] \r\n04 095cf320 62cc33fb     wpfgfx_v0400!CGraphIterator::Walk+0x141 [e:\\dd\\netfxdev1\\src\\wpf\\src\\graphics\\core\\uce\\graphwalker.cpp @ 303] \r\n```","Url":"https://github.com/dotnet/wpf/issues/4386","RelatedDescription":"Open issue \"Scrolling optimization for SW rendering is wrong - crashes in debug build\" (#4386)"},{"Id":"852650042","IsPullRequest":false,"CreatedAt":"2021-04-07T17:57:58","Actor":"jogibear9988","Number":"4384","RawContent":null,"Title":"Activator.CreateInstance(type, arguments) fails for Type Button","State":"closed","Body":"I use WPF in Sharp Develop Designer Project.\r\n\r\nI now try to Convert to Net5\r\n\r\nNow when I create a new instance via Activator.CreateInstance(type, arguments);\r\nI got a System.TypeInitializationException: \"The type initializer for 'System.Windows.Application' threw an exception.\"\r\n\r\n![image](https://user-images.githubusercontent.com/364896/113911365-31da8000-97da-11eb-99bf-1043e4bbfa68.png)\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/4384","RelatedDescription":"Closed issue \"Activator.CreateInstance(type, arguments) fails for Type Button\" (#4384)"},{"Id":"851681776","IsPullRequest":true,"CreatedAt":"2021-04-07T17:46:14","Actor":"ryalanms","Number":"4380","RawContent":null,"Title":"Update release/5.0 branding to 5.0.6","State":"closed","Body":"(The internal merge will occur on 4/13.)","Url":"https://github.com/dotnet/wpf/pull/4380","RelatedDescription":"Closed or merged PR \"Update release/5.0 branding to 5.0.6\" (#4380)"},{"Id":"852562994","IsPullRequest":false,"CreatedAt":"2021-04-07T16:05:03","Actor":"jogibear9988","Number":"4383","RawContent":null,"Title":"WPF could not compile if Namespace contains Some part of a Nuget or Xml Namespace","State":"open","Body":"Don't know what the exactly Bug is.\r\n\r\nLook at my Code sample: \r\n[XamlDesigner.zip](https://github.com/dotnet/wpf/files/6272960/XamlDesigner.zip)\r\n\r\nIt contains a Converter in following namespace:\r\n\r\n        ICSharpCode.XamlDesigner.AvalonDock\r\n\r\nIf I compile I got this error:\r\n\r\n![image](https://user-images.githubusercontent.com/364896/113897873-9cd08a80-97cb-11eb-8891-e34e64c0d113.png)\r\n\r\nIf I change the Namespace to \"ICSharpCode.XamlDesigner.aaaAvalonDock\" it works. But this Namespace is not contained in the Avalondock Nuget.\r\n\r\nThis worked in Netcore 3","Url":"https://github.com/dotnet/wpf/issues/4383","RelatedDescription":"Open issue \"WPF could not compile if Namespace contains Some part of a Nuget or Xml Namespace\" (#4383)"},{"Id":"851849086","IsPullRequest":true,"CreatedAt":"2021-04-07T00:47:12","Actor":"dotnet-maestro[bot]","Number":"4381","RawContent":null,"Title":"[release/5.0] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:879723a8-02ca-470e-70c0-08d83eef1915)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 879723a8-02ca-470e-70c0-08d83eef1915\r\n- **Build**: 20210406.6\r\n- **Date Produced**: 4/6/2021 11:53 PM\r\n- **Commit**: 64d5af96affe5b0cf879d2e375d2d6497844d216\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 5.0.2-servicing.21117.1 to 5.0.6-servicing.21206.6][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GCc16c1e5&targetVersion=GC64d5af9&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:879723a8-02ca-470e-70c0-08d83eef1915)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4381","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4381)"},{"Id":"851681442","IsPullRequest":true,"CreatedAt":"2021-04-06T18:08:18","Actor":"ryalanms","Number":"4379","RawContent":null,"Title":"Update release/3.1 branding to 3.1.15","State":"open","Body":"(The internal merge will occur on 4/13. )","Url":"https://github.com/dotnet/wpf/pull/4379","RelatedDescription":"Open PR \"Update release/3.1 branding to 3.1.15\" (#4379)"},{"Id":"851481660","IsPullRequest":true,"CreatedAt":"2021-04-06T14:54:54","Actor":"dotnet-maestro[bot]","Number":"4378","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **Microsoft.Win32.Registry**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **System.CodeDom**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.AccessControl**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Principal.Windows**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.ILDAsm**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.ILAsm**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20210406.5\r\n- **Date Produced**: 4/6/2021 2:14 PM\r\n- **Commit**: c1ea1e253003d207419f87bd0d49a16aeeb40b11\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 6.0.0-preview.4.21205.2 to 6.0.0-preview.4.21206.5][1]\r\n  - **Microsoft.Private.Winforms**: [from 6.0.0-preview.4.21205.2 to 6.0.0-preview.4.21206.5][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **System.CodeDom**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.3][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/9073ca4...c1ea1e2\r\n[2]: https://github.com/dotnet/runtime/compare/9520149...b7a1648\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4378","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#4378)"},{"Id":"851415069","IsPullRequest":true,"CreatedAt":"2021-04-06T13:53:08","Actor":"dotnet-maestro[bot]","Number":"4377","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210406.2\r\n- **Date Produced**: 4/6/2021 1:04 PM\r\n- **Commit**: a94c47188d741a06d14fb0302124ef2b2538b8f6\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.4.21203.2 to 6.0.0-preview.4.21206.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC72ce477&targetVersion=GCa94c471&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4377","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4377)"},{"Id":"850981164","IsPullRequest":true,"CreatedAt":"2021-04-06T05:56:39","Actor":"dotnet-maestro[bot]","Number":"4376","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20210405.2\r\n- **Date Produced**: 4/6/2021 5:15 AM\r\n- **Commit**: 9073ca4669eb40ca6a6a8fc1bf8d62cd7e520c07\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.2][1]\r\n  - **Microsoft.Private.Winforms**: [from 6.0.0-preview.4.21205.1 to 6.0.0-preview.4.21205.2][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/5a7cb66...9073ca4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4376","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#4376)"},{"Id":"850902889","IsPullRequest":true,"CreatedAt":"2021-04-06T03:10:15","Actor":"dotnet-maestro[bot]","Number":"4375","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **Microsoft.Win32.Registry**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.CodeDom**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.AccessControl**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Principal.Windows**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.ILDAsm**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.ILAsm**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20210405.1\r\n- **Date Produced**: 4/6/2021 2:37 AM\r\n- **Commit**: 5a7cb661e90dab0d40f7a85774ef10683c81b442\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 6.0.0-preview.4.21203.1 to 6.0.0-preview.4.21205.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 6.0.0-preview.4.21203.1 to 6.0.0-preview.4.21205.1][1]\r\n  - **Microsoft.Win32.Registry**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **System.CodeDom**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **System.Diagnostics.EventLog**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **System.DirectoryServices**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **System.Drawing.Common**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **System.Security.AccessControl**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **System.Security.Cryptography.Xml**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **System.Security.Permissions**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **System.Security.Principal.Windows**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **System.Windows.Extensions**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **System.IO.Packaging**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **Microsoft.NETCore.ILDAsm**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **Microsoft.NETCore.ILAsm**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.4.21177.4 to 6.0.0-preview.4.21205.1][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/cf909de...5a7cb66\r\n[2]: https://github.com/dotnet/runtime/compare/7795971...9520149\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4375","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#4375)"},{"Id":"850864993","IsPullRequest":false,"CreatedAt":"2021-04-06T01:02:14","Actor":"abnervieraso","Number":"4374","RawContent":null,"Title":"Refocus last selected cell in DataGrid when it gain focus again","State":"open","Body":"* .NET Core Version: **3.1**\r\n* Windows version: **Windows 10 20H2 (19042.867)**\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: **Yes**\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nI filled a ObservableCollection with some data then I bound it to a DataGrid.\r\nThe actual problem occurs when I navigate in the DataGrid and for example I have select the third entire row (at this moment, the third row is selected). Then, I move to another control (TextBox for example).\r\nWhen I move focus again to DataGrid pressing **TAB**, first cell of first column is in focus always, I mean, the dataGrid doesn't remember the last selected cell, but the selected row does. \r\n \r\n1. **Last Focused Cell:**\r\n![sa1](https://user-images.githubusercontent.com/45499791/113643705-1fc4da00-9640-11eb-808f-5ce3a7ae7931.PNG)\r\n\r\n2. **DataGrid lost focus:**\r\n![sa3](https://user-images.githubusercontent.com/45499791/113644186-67983100-9641-11eb-8703-1bf0c8b63d2f.PNG)\r\n\r\n3. **When I move focus to DataGrid again** (the cell selection is reset)\r\n![sa2](https://user-images.githubusercontent.com/45499791/113643811-74685500-9640-11eb-9f28-cd198e74abb7.PNG)\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n \r\n **Expected behavior:**\r\nThe expected behavior is that the last selection of the cell is refocused, and does not restart.\r\nLike a Windows Forms  DataGridView.\r\n\r\n **Minimal repro:**\r\n1. Navigate on WPF dataGrid, and select any cell.\r\n2. Move focus to a TextBox\r\n3. Move focus again to DataGrid using TAB key.\r\n","Url":"https://github.com/dotnet/wpf/issues/4374","RelatedDescription":"Open issue \"Refocus last selected cell in DataGrid when it gain focus again\" (#4374)"},{"Id":"849990027","IsPullRequest":false,"CreatedAt":"2021-04-04T16:30:35","Actor":"manuelelucchi","Number":"4373","RawContent":null,"Title":"useWpf with SDK Style projects, NET 4.7.2 and Visual Studio 2017","State":"open","Body":"Hi, I'm currently trying to port a big wpf codebase from net framework to net core, step by step. The company I work with is stuck on Visual Studio 2017 (latest version). Since wpf projects can't be ported to net standard, I'm first converting them using try-convert (so it adds useWpf) and then changing the target framework back to 4.7.2. On Visual Studio 2019, everything works fine, the xaml compiles and it adds all the necessary references as you can see in the image below\r\n\r\n![image](https://user-images.githubusercontent.com/17146198/113515003-1a00c300-9572-11eb-8267-9ed029734f3e.png)\r\n\r\nWhile in Visual Studio 2017, xaml compilation needs to be specified for each file and it doesn't add all the references\r\n\r\n![image](https://user-images.githubusercontent.com/17146198/113514996-13724b80-9572-11eb-88b5-02813921fe87.png)\r\n\r\nIn the [wpf repo](https://github.com/dotnet/wpf/issues/3865) I learned about Microsoft.NET.Sdk.WindowsDesktop, but using that breaks the project on 2017 (2019 still works fine)\r\n\r\nIs there a way to make this combo work or do I have to block this upgrade until the company can upgrade to VS2019?\r\n\r\nThank you in advice\r\n","Url":"https://github.com/dotnet/wpf/issues/4373","RelatedDescription":"Open issue \"useWpf with SDK Style projects, NET 4.7.2 and Visual Studio 2017\" (#4373)"},{"Id":"849657282","IsPullRequest":true,"CreatedAt":"2021-04-03T13:42:58","Actor":"dotnet-maestro[bot]","Number":"4372","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210403.2\r\n- **Date Produced**: 4/3/2021 1:14 PM\r\n- **Commit**: 72ce477cf0a0bf91346925037829255bc2a082c9\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.4.21202.2 to 6.0.0-preview.4.21203.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC07b9db4&targetVersion=GC72ce477&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4372","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4372)"},{"Id":"849655946","IsPullRequest":true,"CreatedAt":"2021-04-03T13:39:41","Actor":"dotnet-maestro[bot]","Number":"4371","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20210403.1\r\n- **Date Produced**: 4/3/2021 1:04 PM\r\n- **Commit**: cf909def8e4f4d5a9ab71d4f26ef62288cb9fece\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 6.0.0-preview.4.21202.1 to 6.0.0-preview.4.21203.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 6.0.0-preview.4.21202.1 to 6.0.0-preview.4.21203.1][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/81464bc...cf909de\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4371","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#4371)"},{"Id":"849429829","IsPullRequest":false,"CreatedAt":"2021-04-02T19:46:04","Actor":"SamBent","Number":"4370","RawContent":null,"Title":"Layout loop due to re-entrant UpdateLayout call","State":"open","Body":"* .NET Core Version: all\r\n* Windows version: all\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? no\r\n\r\n **Problem description:**\r\n UpdateLayout has logic for ignoring re-entrant calls, escaping from runaway layout, and continuing its main loop when callouts create more work.  This logic fails in the following circumstances.\r\n1. UpdateLayout begins (outer call), starts main loop ``while(hasDirtiness || _firePostLayoutEvents) {...}``.  (Initially both conditions are true.)  Each iteration sets ``_isInUpdateLayout`` to true at the beginning and resets it to false near the end, to prevent re-entrancy during the Measure and Arrange phases.\r\n2. An iteration that clears the measure and arrange queues (i.e. ``hasDirtiness==false``) ends by raising the post-layout events.  Re-entrancy is allowed during the event phase, although each of the event-firing methods prevents its own re-entrancy.\r\n3. The 3rd (of 4) event-firing method ``fireAutomationEvents()`` is responsible for clearing the ``_firePostLayoutEvents`` flag.  It does this after checking for re-entrancy but before raising events.\r\n4. The problem arises when one of the automation event handlers creates dirtiness and calls UpdateLayout synchronously (inner call).  The first iteration sets ``_firePostLayoutEvents==true`` (by calling Measure or Arrange), but no iteration clears it - the re-entrancy check in ``fireAutomationEvents`` prevents it.  Thus the inner call's main loop continues even after all the dirtiness is gone, and only terminates when the loop counter exceeds the \"runaway\" threshold.\r\n5. The problem can compound if synchronous re-entrant UpdateLayout calls keep occurring before the outer call's ``fireAutomationEvents`` completes.  Each such call spins the main loop the maximum amount, and posts another background layout task.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n The app appears unresponsive.\r\n\r\n **Expected behavior:**\r\n App remains responsive.\r\n\r\n **Minimal repro:**\r\nNot available.  This is something I observed while investigating another issue.  It only occurred when attaching a debugger or TTD recorder to the process, so it's sensitive to timing.  The re-entrant call happened when raising an automation event to the OS automation component;  the COM call or P/Invoke pumped messages, including a WM_SIZE that triggered logic in ``HwndSource.Process_WM_SIZE``.\r\n","Url":"https://github.com/dotnet/wpf/issues/4370","RelatedDescription":"Open issue \"Layout loop due to re-entrant UpdateLayout call\" (#4370)"},{"Id":"849340959","IsPullRequest":false,"CreatedAt":"2021-04-02T17:04:05","Actor":"etvorun","Number":"4369","RawContent":null,"Title":"Add DefaultStyleKeyAttribute","State":"open","Body":"**Why is this needed:** to better support very popular Copy Template feature in Visual Studio XAML designer.\r\n\r\n**Details**: [DefaultStyleKey](https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.defaultstylekey) value is available/discoverable during runtime only. To enable Copy Template in XAML intellisense (i.e. without XAML designer or running app) we need a way to find it. Consider following code which is most common way of customizing default style key for user controls\r\n```\r\n    public class MyButton : MuButtonBase\r\n    {\r\n        static MyButton()\r\n        {\r\n            DefaultStyleKeyProperty.OverrideMetadata(typeof(MyButton), new FrameworkPropertyMetadata(typeof(MyButton)));\r\n        }\r\n    }\r\n```\r\nThis is not reflection/Roslyn friendly wrt finding that `typeof(MyButton)` is default style key. This can be addressed by adding DefaultStyleKeyAttribute, e.g.\r\n```\r\n    [DefaultStyleKey(typeof(MyButton))]\r\n    public class MyButton : MuButtonBase\r\n    {\r\n        static MyButton()\r\n        {\r\n            DefaultStyleKeyProperty.OverrideMetadata(typeof(MyButton), new FrameworkPropertyMetadata(typeof(MyButton)));\r\n        }\r\n    }\r\n\r\n    // To be added to WPF\r\n    public class DefaultStyleKeyAttribute : Attribute\r\n    {\r\n        public DefaultStyleKeyAttribute(Type type) => this.DefaultStyleKey = type;\r\n        public Type DefaultStyleKey { get; }\r\n    }\r\n```\r\n\r\nThis will be similar to other \"tooling\" attributes like [BrowsableAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.browsableattribute) or [CategoryAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.categoryattribute). ","Url":"https://github.com/dotnet/wpf/issues/4369","RelatedDescription":"Open issue \"Add DefaultStyleKeyAttribute\" (#4369)"},{"Id":"849331029","IsPullRequest":false,"CreatedAt":"2021-04-02T16:43:27","Actor":"etvorun","Number":"4368","RawContent":null,"Title":"Include themes XAML for WPF controls into SDK","State":"open","Body":"**Why is this needed**: to better support very popular Copy Template feature in Visual Studio XAML designer.\r\n\r\n**Details**: When .NET SDK is installed on target machine there are no *.xaml files which contain styles and templates for Button, CheckBox and other controls. Compare it with UWP SDK which installs generic.xaml. Currently VS install classic.xaml, aero.normalcolor.xaml, etc. for WPF Framework. However those files have not been updated since v4.5. WPF Core should address this by including such files into SDK. Consider following [Microsoft Guidelines](https://docs.microsoft.com/en-us/nuget/guides/create-ui-controls#add-design-time-support) for where and why to install such files.","Url":"https://github.com/dotnet/wpf/issues/4368","RelatedDescription":"Open issue \"Include themes XAML for WPF controls into SDK\" (#4368)"},{"Id":"849250230","IsPullRequest":false,"CreatedAt":"2021-04-02T14:28:04","Actor":"kingcean","Number":"4367","RawContent":null,"Title":"Localization issue about scroll bar context menu in Simplified Chinese","State":"open","Body":"* .NET Core Version: ALL.\r\n* Windows version: all.\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No.\r\n* Security issues and bugs should be reported privately, learn more via our [responsible disclosure guidelines]. No.\r\n \r\n **Problem description:**\r\nThe context menu of scroll bar in Simplified Chinese includes some menu items in English and incorrect Simplified Chinese.\r\n\r\n| Menu item | Current implementation | Expected |\r\n| ---------------- | ---------------- | ---------------- |\r\n| Scroll here | 滚动至此 | 滚动至此 |\r\n| Top | Top | 顶部 |\r\n| Bottom | 底 | 底部 |\r\n| Page Up | Page Up | 向上翻页 |\r\n| Page Down | Page Down | 向下翻页 |\r\n| Scroll Up | 向上滚动 | 向上滚动 |\r\n| Scroll Down | 向下滚动 | 向下滚动 |\r\n \r\n **Actual behavior:**\r\n \r\nFollowing sample targets .NET Core App 3.1 which is incorrect.\r\n\r\n![Screenshot1](https://user-images.githubusercontent.com/1724940/113423555-46e19880-9401-11eb-9f82-8b64065a78a3.jpg)\r\n\r\n **Expected behavior:**\r\n \r\nFollowing sample targets .NET Framework 4.6 which is correct.\r\n\r\n![Screenshot2](https://user-images.githubusercontent.com/1724940/113423637-6d073880-9401-11eb-8ec1-04e1ec12670b.jpg)\r\n\r\n **Minimal repro:**\r\n\r\n1. Create a WPF project.\r\n2. Insert a `ScrollViewer`.\r\n3. Run and right click on the scroll bar.\r\n\r\nRequired Simplified Chinese environment.\r\n","Url":"https://github.com/dotnet/wpf/issues/4367","RelatedDescription":"Open issue \"Localization issue about scroll bar context menu in Simplified Chinese\" (#4367)"},{"Id":"849209960","IsPullRequest":true,"CreatedAt":"2021-04-02T13:32:02","Actor":"dotnet-maestro[bot]","Number":"4366","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20210402.1\r\n- **Date Produced**: 4/2/2021 1:02 PM\r\n- **Commit**: 81464bc09686c084305f8f861add8371cb32eb25\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 6.0.0-preview.4.21201.3 to 6.0.0-preview.4.21202.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 6.0.0-preview.4.21201.3 to 6.0.0-preview.4.21202.1][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/3934b9e...81464bc\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4366","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#4366)"},{"Id":"849203990","IsPullRequest":true,"CreatedAt":"2021-04-02T13:19:42","Actor":"dotnet-maestro[bot]","Number":"4365","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210402.2\r\n- **Date Produced**: 4/2/2021 12:51 PM\r\n- **Commit**: 07b9db43e9d5958e9a483f7e2dbe550ce7a6b142\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.4.21201.2 to 6.0.0-preview.4.21202.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GCda664ba&targetVersion=GC07b9db4&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4365","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4365)"},{"Id":"848920436","IsPullRequest":true,"CreatedAt":"2021-04-02T03:09:41","Actor":"dotnet-maestro[bot]","Number":"4364","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20210401.3\r\n- **Date Produced**: 4/2/2021 2:47 AM\r\n- **Commit**: 3934b9ea0e99bae1dfdf0bbd70356f956556f05c\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 6.0.0-preview.4.21181.3 to 6.0.0-preview.4.21201.3][1]\r\n  - **Microsoft.Private.Winforms**: [from 6.0.0-preview.4.21181.3 to 6.0.0-preview.4.21201.3][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/3b50903...3934b9e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4364","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#4364)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-04-10T05:30:36.9168624Z","RunDurationInMilliseconds":501}