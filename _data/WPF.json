{"Data":{"GitHub":{"Issues":[{"Id":"1304176715","IsPullRequest":true,"CreatedAt":"2022-07-14T02:40:08","Actor":"ThomasGoulet73","Number":"6793","RawContent":null,"Title":"Fix build when using source generators coming from NuGet packages.","State":"open","Body":"Fixes dotnet/wpf#6792\r\n\r\n## Description\r\nFixes build of project using source generators coming from NuGet packages. I fixed this by only including analyzers that are coming from a FrameworkReference in the temporary target assembly project. Those analyzers are the ones that are not automatically added in the temporary target assembly project because `ResolveTargetingPackAssets` is never called (We could investigate calling this target in the future but, to me, it seemed riskier than the changes in this PR).\r\n\r\n## Customer Impact\r\nFixes build.\r\n\r\n## Regression\r\nThis is a regression introduced in .Net 6.0.7 by #6534 which was backported by #6680. Those were changes from me, sorry about the regression.\r\n\r\n## Testing\r\nTested locally by building a project which uses Regex source generator, WinForms source generator and [CommunityToolkit.Mvvm 7.1.2](https://www.nuget.org/packages/CommunityToolkit.Mvvm/7.1.2) source generator (This is an example of a source generator that currently fails on .Net 6.0.7 SDK).\r\n\r\n## Risk\r\nLow.","Url":"https://github.com/dotnet/wpf/pull/6793","RelatedDescription":"Open PR \"Fix build when using source generators coming from NuGet packages.\" (#6793)"},{"Id":"1302869698","IsPullRequest":true,"CreatedAt":"2022-07-13T20:37:14","Actor":"dotnet-maestro[bot]","Number":"6788","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220713.4\r\n- **Date Produced**: July 13, 2022 7:36:29 PM UTC\r\n- **Commit**: e16b5a39e5edbefe849cb421e724075f5137ffa4\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.7.22362.5 to 7.0.0-rc.1.22363.4][2]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.7.22362.5 to 7.0.0-rc.1.22363.4][2]\r\n\r\n[2]: https://github.com/dotnet/winforms/compare/4a89efc...e16b5a3\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6788)\r\n","Url":"https://github.com/dotnet/wpf/pull/6788","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6788)"},{"Id":"1303376571","IsPullRequest":true,"CreatedAt":"2022-07-13T13:02:33","Actor":"dotnet-maestro[bot]","Number":"6791","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220712.1\r\n- **Date Produced**: July 12, 2022 2:49:36 PM UTC\r\n- **Commit**: bd18f30f71daf7eaaf1d70363c303bd7dfac65a2\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22358.3 to 7.0.0-beta.22362.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22358.3 to 7.0.0-beta.22362.1][1]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22358.3 to 7.0.0-beta.22362.1][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22358.3 to 7.0.0-beta.22362.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22358.3 to 7.0.0-beta.22362.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/54a00a8...bd18f30\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6791)","Url":"https://github.com/dotnet/wpf/pull/6791","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6791)"},{"Id":"1303342835","IsPullRequest":true,"CreatedAt":"2022-07-13T12:08:02","Actor":"lindexi","Number":"6790","RawContent":null,"Title":"Adding the lock to keep the WeakEventTable ThreadSafe","State":"open","Body":"Fixes https://github.com/dotnet/wpf/issues/6452\r\n\r\n## Description\r\n\r\nThe `_dataTable` is the field in WeakEventTable which will be read and written in a thread-unsafe code. See https://github.com/dotnet/wpf/issues/6452\r\n\r\nSee https://docs.microsoft.com/en-us/dotnet/api/system.collections.hashtable\r\n\r\nReference: https://github.com/dotnet/wpf/pull/6443\r\n\r\n## Customer Impact\r\n\r\nFix the WeakEventTable thread safe issues.\r\n\r\n## Regression\r\n\r\nNone.\r\n\r\n## Testing\r\n\r\nJust CI.\r\n\r\n## Risk\r\n\r\nThe lock may cause the performance issues.\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6790)","Url":"https://github.com/dotnet/wpf/pull/6790","RelatedDescription":"Open PR \"Adding the lock to keep the WeakEventTable ThreadSafe\" (#6790)"},{"Id":"1302950870","IsPullRequest":true,"CreatedAt":"2022-07-13T06:30:49","Actor":"dotnet-maestro[bot]","Number":"6789","RawContent":null,"Title":"[release/7.0-preview7] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:288179f0-f220-4541-5055-08da5f9ad98d)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 288179f0-f220-4541-5055-08da5f9ad98d\r\n- **Build**: 20220712.8\r\n- **Date Produced**: July 13, 2022 5:45:04 AM UTC\r\n- **Commit**: 28c6b99c5f30595fea52a51c428327a16e06ea05\r\n- **Branch**: refs/heads/release/7.0-preview7\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.7.22357.2 to 7.0.0-preview.7.22362.8][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.7.22357.2 to 7.0.0-preview.7.22362.8][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/67bbe05...28c6b99\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:288179f0-f220-4541-5055-08da5f9ad98d)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6789)","Url":"https://github.com/dotnet/wpf/pull/6789","RelatedDescription":"Closed or merged PR \"[release/7.0-preview7] Update dependencies from dotnet/winforms\" (#6789)"},{"Id":"1302822664","IsPullRequest":true,"CreatedAt":"2022-07-13T02:53:39","Actor":"dotnet-maestro[bot]","Number":"6787","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220712.5\r\n- **Date Produced**: July 13, 2022 2:02:45 AM UTC\r\n- **Commit**: 4a89efc79e2c5a43d208a61d23df4d961b9fefca\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.7.22362.1 to 7.0.0-preview.7.22362.5][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.7.22362.1 to 7.0.0-preview.7.22362.5][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/99708eb...4a89efc\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6787)","Url":"https://github.com/dotnet/wpf/pull/6787","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6787)"},{"Id":"1302679405","IsPullRequest":true,"CreatedAt":"2022-07-12T23:01:17","Actor":"dotnet-maestro[bot]","Number":"6786","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220712.1\r\n- **Date Produced**: July 12, 2022 9:59:57 PM UTC\r\n- **Commit**: 99708eb4dd54806cac8e085a2a22eb524c693616\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.7.22357.2 to 7.0.0-preview.7.22362.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.7.22357.2 to 7.0.0-preview.7.22362.1][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/67bbe05...99708eb\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6786)","Url":"https://github.com/dotnet/wpf/pull/6786","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6786)"},{"Id":"1303713506","IsPullRequest":false,"CreatedAt":"2022-07-12T22:50:23","Actor":"jamiehankins","Number":"6792","RawContent":null,"Title":"Visual Studio 17.2.6 Breaks CommunityToolkit.Mvvm","State":"open","Body":"**Version Used**:  17.2.6\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a WPF exe project targeting `net6.0-windows`\r\n2. Reference CommunityToolkit.Mvvm like so:\r\n`<PackageReference Include=\"CommunityToolkit.Mvvm\" Version=\"7.1.2\" />`\r\n4. Create a simple class inheriting from `ObservableObject`, like so:\r\n```\r\nusing CommunityToolkit.Mvvm.ComponentModel;\r\n\r\nnamespace ObservablePropertyTest\r\n{\r\n    public partial class TestVM : ObservableObject\r\n    {\r\n        [ObservableProperty]\r\n        private string _testString = string.Empty;\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nIn 17.2.5, it built and ran fine.\r\n\r\n**Actual Behavior**:\r\n```\r\nRebuild started...\r\n1>------ Rebuild All started: Project: ObservablePropertyTest, Configuration: Debug Any CPU ------\r\nRestored C:\\git\\ObservablePropertyTest\\ObservablePropertyTest.csproj (in 2 ms).\r\n1>C:\\git\\ObservablePropertyTest\\CommunityToolkit.Mvvm.SourceGenerators\\CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator\\__KnownINotifyPropertyChangedOrChangingArgs.cs(12,27,12,70): error CS0101: The namespace 'CommunityToolkit.Mvvm.ComponentModel.__Internals' already contains a definition for '__KnownINotifyPropertyChangedOrChangingArgs'\r\n1>C:\\git\\ObservablePropertyTest\\CommunityToolkit.Mvvm.SourceGenerators\\CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator\\__KnownINotifyPropertyChangedOrChangingArgs.cs(7,6,7,51): error CS0579: Duplicate 'global::System.CodeDom.Compiler.GeneratedCode' attribute\r\n1>C:\\git\\ObservablePropertyTest\\CommunityToolkit.Mvvm.SourceGenerators\\CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator\\__KnownINotifyPropertyChangedOrChangingArgs.cs(8,6,8,52): error CS0579: Duplicate 'global::System.Diagnostics.DebuggerNonUserCode' attribute\r\n1>C:\\git\\ObservablePropertyTest\\CommunityToolkit.Mvvm.SourceGenerators\\CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator\\__KnownINotifyPropertyChangedOrChangingArgs.cs(9,6,9,69): error CS0579: Duplicate 'global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage' attribute\r\n1>C:\\git\\ObservablePropertyTest\\CommunityToolkit.Mvvm.SourceGenerators\\CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator\\__KnownINotifyPropertyChangedOrChangingArgs.cs(10,6,10,51): error CS0579: Duplicate 'global::System.ComponentModel.EditorBrowsable' attribute\r\n1>C:\\git\\ObservablePropertyTest\\CommunityToolkit.Mvvm.SourceGenerators\\CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator\\__KnownINotifyPropertyChangedOrChangingArgs.cs(11,6,11,29): error CS0579: Duplicate 'global::System.Obsolete' attribute\r\n1>C:\\git\\ObservablePropertyTest\\CommunityToolkit.Mvvm.SourceGenerators\\CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator\\ObservablePropertyTest.TestVM.cs(12,23,12,33): error CS0102: The type 'TestVM' already contains a definition for 'TestString'\r\n1>Done building project \"ObservablePropertyTest_yynlzhol_wpftmp.csproj\" -- FAILED.\r\n========== Rebuild All: 0 succeeded, 1 failed, 0 skipped ==========\r\n```\r\n\r\nIt appears that somehow the CommunityToolkit.Mvvm source generators are being run twice.\r\n\r\nIf you create a WPF class library, things work fine. They're only broken in a WPF app.\r\n\r\nHere is my test project:\r\n[ObservablePropertyTest.zip](https://github.com/dotnet/roslyn/files/9097397/ObservablePropertyTest.zip)\r\n","Url":"https://github.com/dotnet/wpf/issues/6792","RelatedDescription":"Open issue \"Visual Studio 17.2.6 Breaks CommunityToolkit.Mvvm\" (#6792)"},{"Id":"1302440705","IsPullRequest":true,"CreatedAt":"2022-07-12T22:20:55","Actor":"wtgodbe","Number":"6783","RawContent":null,"Title":"Merging internal commits for release/6.0","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6783)","Url":"https://github.com/dotnet/wpf/pull/6783","RelatedDescription":"Closed or merged PR \"Merging internal commits for release/6.0\" (#6783)"},{"Id":"1302443054","IsPullRequest":true,"CreatedAt":"2022-07-12T22:17:39","Actor":"wtgodbe","Number":"6784","RawContent":null,"Title":"Merging internal commits for release/3.1","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6784)","Url":"https://github.com/dotnet/wpf/pull/6784","RelatedDescription":"Closed or merged PR \"Merging internal commits for release/3.1\" (#6784)"},{"Id":"1302533098","IsPullRequest":true,"CreatedAt":"2022-07-12T19:30:54","Actor":"VladimirKhil","Number":"6785","RawContent":null,"Title":"Fix NullReferenceException in Invariant.get_IsDialogOverrideEnabled","State":"open","Body":"Fixes #6772\r\n\r\n## Description\r\n\r\nFix NullReferenceException in Invariant.get_IsDialogOverrideEnabled when .NET Framework Registry key (HKLM\\Software\\Microsoft\\.NETFramework) is not present on the machine\r\n\r\n## Customer Impact\r\n\r\n-\r\n\r\n## Regression\r\n\r\n-\r\n\r\n## Testing\r\n\r\n-\r\n\r\n## Risk\r\n\r\n-\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6785)","Url":"https://github.com/dotnet/wpf/pull/6785","RelatedDescription":"Open PR \"Fix NullReferenceException in Invariant.get_IsDialogOverrideEnabled\" (#6785)"},{"Id":"1302223264","IsPullRequest":false,"CreatedAt":"2022-07-12T15:27:13","Actor":"marbel82","Number":"6782","RawContent":null,"Title":"Memory Leak when Effect assigned to UIElement not been frozen","State":"open","Body":"* .NET Core Version: 6.0.203\r\n* Windows version: 21H2\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: I don't know\r\n\r\n \r\n **Problem description:**\r\nI define DropShadowEffect in global Application.Resources> in App.xaml, and I use it for a Border.Effect property.\r\nThe Border is in some Window. All windows I created and closed stay in memory.\r\n\r\nI found that the Window object is is held by the Border, and the Border is held by an EventHandler, and the EventHandler is held by DropShadowEffect. EventHandler has reference to EffectChanged method.\r\n\r\nI think I have found the problem.\r\nWhen an `UIElement.Effect` property is assigned, the setter (`Visual.VisualEffectInternal.set`) adds strong event handler for `EffectChanged` method\r\n\r\nhttps://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/Media/Visual.cs,2976\r\nFrom ILSpy\r\n```c#\r\n// System.Windows.Media.Visual\r\nusing System.Windows.Media.Effects;\r\n\r\ninternal Effect VisualEffectInternal\r\n{\r\n    get\r\n    {\r\n        if (NodeHasLegacyBitmapEffect)\r\n        {\r\n            return null;\r\n        }\r\n        return EffectField.GetValue(this);\r\n    }\r\n    set\r\n    {\r\n        Effect value2 = EffectField.GetValue(this);\r\n        if (value2 == value)\r\n        {\r\n            return;\r\n        }\r\n        if (value != null && !value.IsFrozen)\r\n        {\r\n            value.Changed += EffectChangedHandler;  // <-----\r\n        }\r\n        if (value2 != null)\r\n        {\r\n            if (!value2.IsFrozen)\r\n            {\r\n                value2.Changed -= EffectChangedHandler;  // <-----\r\n            }\r\n            DisconnectAttachedResource(VisualProxyFlags.IsEffectDirty, value2);\r\n        }\r\n        SetFlags(value != null, VisualFlags.NodeHasEffect);\r\n        EffectField.SetValue(this, value);\r\n        SetFlagsOnAllChannels(value: true, VisualProxyFlags.IsEffectDirty);\r\n        EffectChanged(null, null);\r\n    }\r\n}\r\n```\r\n\r\nEvent handler is removed only if an Effect property is changed. _(Am I wrong?)_\r\n\r\nAnalyzing this code, you can see that the event handler has not been added when the Effect object is frozen (IsFrozen=true).\r\n\r\nI found a page, on which was written how to switch IsFrozen in XAML.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/desktop/wpf/advanced/freezable-objects-overview?redirectedfrom=MSDN&view=netframeworkdesktop-4.8#freezing-from-markup\r\n```\r\n    xmlns:PresentationOptions=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation/options\" \r\n    PresentationOptions:Freeze=\"True\" \r\n```\r\nBut, it's not working. \r\n\r\n\r\nOne solution to the memory leak I have found is to define each DropShadowEffect localy in a Border.\r\n\r\n \r\n **Actual behavior:**\r\nEffect setter (System.Windows.Media.Visual.VisualEffectInternal.set) use strong reference for event handler.\r\n \r\n **Expected behavior:**\r\nEffect setter (System.Windows.Media.Visual.VisualEffectInternal.set) should use weak reference for event handler (e.g. WeakEventManager)\r\n \r\n **Minimal repro:**\r\nhttps://github.com/marbel82/UIElementEffectMemoryLeakRepro\r\n\r\nClick [Create LeakWindow], close the Window, click GC.Collect, Pause Visual Studio, Memory Usage/Take  Snapshot and find LeakWindow\r\n\r\n![image](https://user-images.githubusercontent.com/31281571/178527091-0f8b1fe6-7ce5-4b5f-b569-b356f19ae6d9.png)\r\n","Url":"https://github.com/dotnet/wpf/issues/6782","RelatedDescription":"Open issue \"Memory Leak when Effect assigned to UIElement not been frozen\" (#6782)"},{"Id":"1302146380","IsPullRequest":true,"CreatedAt":"2022-07-12T14:49:51","Actor":"singhashish-wpf","Number":"6781","RawContent":null,"Title":"Fix Zlib and ds lowercase issues","State":"closed","Body":"Fix Zlib and ds lowercase issues\r\nhttps://github.com/dotnet/wpf/pull/6753/checks?check_run_id=7263833319\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6781)","Url":"https://github.com/dotnet/wpf/pull/6781","RelatedDescription":"Closed or merged PR \"Fix Zlib and ds lowercase issues\" (#6781)"},{"Id":"1297910190","IsPullRequest":false,"CreatedAt":"2022-07-12T14:15:02","Actor":"Qiu233","Number":"6766","RawContent":null,"Title":"WindowFromPoint malfunctions for x64 WPF application.","State":"closed","Body":"* .NET Core Version: (6.0.202)\r\n* Windows version: (Windows 11 21H2)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Test for 4.7.1 reproduced successfully.\r\n \r\n **Problem description:**\r\nNative function `WindowFromPoint `  cannot be used to obtain handle to windows in x64 WPF application.  \r\nWhen attempting to get a window from .NET WPF process(no matter it's a remote process or the current process), it returns the 'background' window as if the WPF window does not exist.  \r\nThis problem disappeared if  `PlatformTarget` property in '.csproj' file is set to x86(default x64 in the following project).\r\n \r\n **Minimal repro:**\r\n[WpfApp1.zip](https://github.com/dotnet/wpf/files/9066344/WpfApp1.zip) in which is a draggable cross.\r\nDragging the cross to any point at the window itself does not work.","Url":"https://github.com/dotnet/wpf/issues/6766","RelatedDescription":"Closed issue \"WindowFromPoint malfunctions for x64 WPF application.\" (#6766)"},{"Id":"1301796529","IsPullRequest":false,"CreatedAt":"2022-07-12T09:30:27","Actor":"Blessymanna","Number":"6780","RawContent":null,"Title":" The radio buttons are not accessible using up arrow and down arrow keys as well and also not getting automatically selected on navigating through radio buttons.","State":"open","Body":"**GitHubTags**:#A11ySev2#A11yMAS;#A11yTCS;#DesktopApp;#Win11;#.NET Core[WPF]-Win32-June2022;#.NET Core;#Benchmark;#Keyboard;#WCAG2.1.1;\r\n\r\n### Environment Details:\r\nApplication Name: Unified Service Desk\r\nWindows Version: Win11\r\nApplication Version: 4.2\r\n\r\n### Repro Steps:\r\n\r\n1. Open RadioButton Test file.\r\n2. Open RadioButton Test.sln file.\r\n3. Tab to \"Start\" button and hit enter.\r\n4. Tab to the radio buttons\r\n5. Observe whether the radio buttons are accessible using up and down arrow keys as well and also getting automatically selected on navigating through radio buttons or not.\r\n### Actual:\r\nThe radio buttons are not accessible using up and down arrow and also not getting selected automatically on navigating through left and right arrow keys, it is selected on pressing space bar.\r\n\r\n### Expected:\r\nThe radio buttons should be automatically selected on navigating and also those radio buttons should be accessible using up and down arrow keys.\r\n\r\n### User Impact:\r\nKeyboard users may get confusion on navigating through radio buttons and screen reader users cannot get the information of the navigation clearly.\r\n\r\n[RaditoButtonTest.zip](https://github.com/dotnet/wpf/files/9090475/RaditoButtonTest.zip)\r\n[Keyboard_Issue.zip](https://github.com/dotnet/wpf/files/9091516/Keyboard_Issue.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/6780","RelatedDescription":"Open issue \" The radio buttons are not accessible using up arrow and down arrow keys as well and also not getting automatically selected on navigating through radio buttons.\" (#6780)"},{"Id":"1301594242","IsPullRequest":true,"CreatedAt":"2022-07-12T06:21:57","Actor":"lindexi","Number":"6779","RawContent":null,"Title":"Fix System.OverflowException in WindowChromeWorker._HandleNCHitTest","State":"open","Body":"\r\nFixes https://github.com/dotnet/wpf/issues/6777\r\n\r\n\r\n\r\n## Description\r\n\r\nThe lParam may be the int 64 value which will throw OverflowException when cast to int 32. We only use the int32 part inside the int64, so it's safe for us to use ToInt64 first and then cast to int32.\r\n\r\n## Customer Impact\r\n\r\nSee https://github.com/dotnet/wpf/issues/6777\r\n\r\n## Regression\r\n\r\nNone.\r\n\r\n## Testing\r\n\r\nJust the CI.\r\n\r\n## Risk\r\n\r\nLow. It is safe for us to use IntPtr.ToInt64 and cast the long to int.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6779)","Url":"https://github.com/dotnet/wpf/pull/6779","RelatedDescription":"Open PR \"Fix System.OverflowException in WindowChromeWorker._HandleNCHitTest\" (#6779)"},{"Id":"1301561809","IsPullRequest":true,"CreatedAt":"2022-07-12T05:56:10","Actor":"dotnet-maestro[bot]","Number":"6778","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20220711.3\r\n- **Date Produced**: July 12, 2022 5:09:02 AM UTC\r\n- **Commit**: 28d07eaed25cac92f53a2906e917627a6adb0443\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 7.0.0-preview.6.22274.2 to 7.0.0-rc.1.22361.3][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GCab99468&targetVersion=GC28d07ea&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6778)","Url":"https://github.com/dotnet/wpf/pull/6778","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#6778)"},{"Id":"1301500566","IsPullRequest":false,"CreatedAt":"2022-07-12T03:57:01","Actor":"lindexi","Number":"6777","RawContent":null,"Title":"System.OverflowException in PresentationFramework.dll in System.Windows.Shell.WindowChromeWorker","State":"open","Body":"* .NET Core Version: All\r\n* Windows version: All\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n \r\n **Problem description:**\r\n\r\nWe have been getting a crash when using the mouse on certain windows in our WPF application. This Stackoverflow issue appears with exactly the same error messages as our own so I believe it to be relevant. https://stackoverflow.com/questions/33287542/what-would-cause-wm-nchittest-lparam-to-overflow-a-32-bit-integer\r\n\r\nThis issue has also been reported to the Visual Studio community site and a simple test application has been provided. https://developercommunity.visualstudio.com/content/problem/167357/overflow-exception-in-windowchrome.html\r\n\r\nThe crashes occur on a Windows 10 Pro Version 1709 OS Build 16299.309, win7 sp1, Windows10 21H2 19044.1645\r\n\r\nI run the application with .NET 6.0.5 and @contre run the application with  .NET Framework 4.6.2\r\n\r\n\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\n\r\n```\r\nSystem.OverflowException\r\n  HResult=0x80131516\r\n  Message=Arithmetic operation resulted in an overflow.\r\n  Source=PresentationFramework\r\n  StackTrace:\r\n   at System.Windows.Shell.WindowChromeWorker._HandleNCHitTest(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at System.Windows.Shell.WindowChromeWorker._WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at System.Windows.Interop.HwndSource.PublicHooksFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n```\r\n \r\n **Expected behavior:**\r\n\r\nIt can work well.\r\n \r\n **Minimal repro:**\r\n\r\nAny WPF application which use WindowChrome . But we must run the application on the special system.\r\n\r\n\r\n- See https://github.com/Microsoft/dotnet/issues/689\r\n- See https://github.com/ControlzEx/ControlzEx/issues/30 \r\n- See https://github.com/MahApps/MahApps.Metro/issues/3301 \r\n- See https://github.com/HandyOrg/HandyControl/issues/886\r\n- See https://developercommunity.visualstudio.com/t/overflow-exception-in-windowchrome/167357\r\n\r\nCC @batzen","Url":"https://github.com/dotnet/wpf/issues/6777","RelatedDescription":"Open issue \"System.OverflowException in PresentationFramework.dll in System.Windows.Shell.WindowChromeWorker\" (#6777)"},{"Id":"1301470210","IsPullRequest":true,"CreatedAt":"2022-07-12T03:31:30","Actor":"singhashish-wpf","Number":"6776","RawContent":null,"Title":"update branding to rc1","State":"closed","Body":"update branding to rc1\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6776)","Url":"https://github.com/dotnet/wpf/pull/6776","RelatedDescription":"Closed or merged PR \"update branding to rc1\" (#6776)"},{"Id":"1301179609","IsPullRequest":false,"CreatedAt":"2022-07-11T20:20:13","Actor":"vsfeedback","Number":"6775","RawContent":null,"Title":"Despite setting DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 MessageBox are displayed blurred.","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Despite-setting-DPI_AWARENESS_CONTEXT_PE/10092129)._\n\n---\n[severity:It bothers me. A fix would be nice]\r\n1st monitor: 100 %, primary\n2nd monitor: 150 %\n\nIf you have the App window on the 2nd monitor where a MessageBox is displayed, it will be displayed blurred in the correct size. On the other hand, if the 1st monitor also has a scaling of 150%, the MessaageBox on the 2nd monitor will be displayed in focus.\n\nThis affects WPF apps with .NET Framework 4.8 under Windows 11.\n\nSo the MessageBox is always created with the scaling of the primary monitor and then stretched to the scaling of the 2nd monitor. However, it should work the same way as other dialogs, e.g. OpenFileDialog and FolderBrowserDialog.\n\n---\n### Original Comments\n(no comments)\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/6775","RelatedDescription":"Open issue \"Despite setting DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 MessageBox are displayed blurred.\" (#6775)"},{"Id":"1300655083","IsPullRequest":true,"CreatedAt":"2022-07-11T13:00:55","Actor":"lindexi","Number":"6774","RawContent":null,"Title":"Add comment to Wpf.Cpp.props code","State":"closed","Body":"## Description\r\n\r\nJust add the comment.\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->None.\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->None.\r\n\r\n## Testing\r\n\r\nNone.\r\n\r\n## Risk\r\n\r\nNone.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6774)","Url":"https://github.com/dotnet/wpf/pull/6774","RelatedDescription":"Closed or merged PR \"Add comment to Wpf.Cpp.props code\" (#6774)"},{"Id":"1300609172","IsPullRequest":true,"CreatedAt":"2022-07-11T12:09:30","Actor":"lindexi","Number":"6773","RawContent":null,"Title":"Fix document format","State":"closed","Body":"## Description\r\n\r\nJust fix the report-on-adding-new-property.md document format.\r\n\r\n## Customer Impact\r\n\r\nNone.\r\n\r\n## Regression\r\n\r\nNone.\r\n\r\n## Testing\r\n\r\nNone.\r\n\r\n## Risk\r\n\r\nNone.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6773)","Url":"https://github.com/dotnet/wpf/pull/6773","RelatedDescription":"Closed or merged PR \"Fix document format\" (#6773)"},{"Id":"1299759817","IsPullRequest":false,"CreatedAt":"2022-07-09T20:19:37","Actor":"VladimirKhil","Number":"6772","RawContent":null,"Title":"MS.Internal.Invariant.get_IsDialogOverrideEnabled() can throw NullReferenceException","State":"open","Body":"* .NET Core Version: 6.0\r\n\r\nI have only the exception stack trace collected automatically from one of my clients. No other system information is available.\r\n\r\nI hope that this stack trace would be useful for some research.\r\n\r\nAccording to [sources](https://github.com/dotnet/wpf/blob/main/src/Microsoft.DotNet.Wpf/src/Shared/MS/Internal/Invariant.cs), IsDialogOverrideEnabled could throw NRE if registry key \"Software\\\\Microsoft\\\\.NETFramework\" is missing on the machine.\r\n\r\n`System.NullReferenceException: Object reference not set to an instance of an object.\r\nat bool MS.Internal.Invariant.get_IsDialogOverrideEnabled()\r\nat void MS.Internal.Invariant.Assert(bool condition)\r\nat IFontFamily System.Windows.Media.FontFamily.get_FirstFontFamily()\r\nat double System.Windows.Media.FontFamily.get_LineSpacing()\r\nat double System.Windows.Controls.TextBox.GetLineHeight()\r\nat void System.Windows.Controls.TextBox.SetScrollViewerMinMaxHeight()\r\nat Size System.Windows.Controls.TextBox.MeasureOverride(Size constraint)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat Size System.Windows.Controls.DockPanel.MeasureOverride(Size constraint)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat Size System.Windows.Controls.DockPanel.MeasureOverride(Size constraint)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat Size MS.Internal.Helper.MeasureElementWithSingleChild(UIElement element, Size constraint)\r\nat Size System.Windows.Controls.ContentPresenter.MeasureOverride(Size constraint)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat Size Microsoft.Windows.Themes.ClassicBorderDecorator.MeasureOverride(Size availableSize)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat Size System.Windows.Controls.Grid.MeasureOverride(Size constraint)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat void System.Windows.Controls.Grid.MeasureCell(int cell, bool forceInfinityV)\r\nat void System.Windows.Controls.Grid.MeasureCellsGroup(int cellsHead, Size referenceSize, bool ignoreDesiredSizeU, bool forceInfinityV, out bool hasDesiredSizeUChanged)\r\nat Size System.Windows.Controls.Grid.MeasureOverride(Size constraint)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat Size System.Windows.Controls.Control.MeasureOverride(Size constraint)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat void System.Windows.Controls.Grid.MeasureCell(int cell, bool forceInfinityV)\r\nat void System.Windows.Controls.Grid.MeasureCellsGroup(int cellsHead, Size referenceSize, bool ignoreDesiredSizeU, bool forceInfinityV, out bool hasDesiredSizeUChanged)\r\nat Size System.Windows.Controls.Grid.MeasureOverride(Size constraint)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat Size System.Windows.Controls.Grid.MeasureOverride(Size constraint)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat Size MS.Internal.Helper.MeasureElementWithSingleChild(UIElement element, Size constraint)\r\nat Size System.Windows.Controls.ContentPresenter.MeasureOverride(Size constraint)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat Size System.Windows.Controls.Border.MeasureOverride(Size constraint)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat Size System.Windows.Controls.Control.MeasureOverride(Size constraint)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat Size MS.Internal.Helper.MeasureElementWithSingleChild(UIElement element, Size constraint)\r\nat Size System.Windows.Controls.ContentPresenter.MeasureOverride(Size constraint)\r\nat Size System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\nat void System.Windows.UIElement.Measure(Size availableSize)\r\nat void System.Windows.ContextLayoutManager.UpdateLayout()\r\nat object System.Windows.ContextLayoutManager.UpdateLayoutCallback(object arg)\r\nat void System.Windows.Media.MediaContext.FireInvokeOnRenderCallbacks()\r\nat void System.Windows.Media.MediaContext.RenderMessageHandlerCore(object resizedCompositionTarget)\r\nat object System.Windows.Media.MediaContext.RenderMessageHandler(object resizedCompositionTarget)\r\nat object System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, object args, int numArgs)\r\nat object System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, Delegate callback, object args, int numArgs, Delegate catchHandler)`","Url":"https://github.com/dotnet/wpf/issues/6772","RelatedDescription":"Open issue \"MS.Internal.Invariant.get_IsDialogOverrideEnabled() can throw NullReferenceException\" (#6772)"},{"Id":"1299151024","IsPullRequest":false,"CreatedAt":"2022-07-08T15:15:09","Actor":"vedeevi","Number":"6771","RawContent":null,"Title":"[Accessibility Issue]: Narrator tool in Windows 11 is not able to read content there in RichTextBox control of WPF application.","State":"open","Body":"* .NET Framework Version: 4.7.2\r\n* Windows version: (Windows 11 21H2 (Build : 22000.739)`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.7.2?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? If yes, please file the issue via the instructions [here](https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019). No\r\n* Security issues and bugs should be reported privately, learn more via our [responsible disclosure guidelines](https://github.com/dotnet/wpf/blob/main/README.md#reporting-security-issues-and-security-bugs).\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/main/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n Narrator tool in Windows 11 operating system is not able to read the text content available in paragraphs under RichTextBox control of WPF. However, this same text there in RichTextBox control is read by Narrator tool in Windows 10 21H2 OS.\r\n\r\nSample code for RichTextBox control used in our WPF application:\r\n`<RichTextBox x:Name=\"AppContentRichTextBox\" BorderThickness=\"0\"\r\n                                   x:FieldModifier=\"public\" IsDocumentEnabled=\"True\" IsReadOnly=\"True\"\r\n                                   FontSize=\"16\" Foreground=\"Black\" FontFamily=\"Segoe UI\" \r\n                                     KeyboardNavigation.TabNavigation=\"Continue\" Focusable=\"True\"\r\n                                   Margin=\"-5,0,0,30\" AutomationProperties.Name=\"App content details\"\r\n                                   Visibility=\"Visible\" HorizontalContentAlignment=\"Stretch\" VerticalAlignment=\"Center\">\r\n                            <FlowDocument>\r\n                                <Paragraph    KeyboardNavigation.TabNavigation=\"Continue\" Focusable=\"True\">\r\n                                    This is the \r\n                                    <Bold> paragraph</Bold> text of the application which need to be read by \r\n                                    <Bold> Narrator tool </Bold> available in Windows 10 or 11 operating system.\r\n                               </Paragraph>\r\n                            </FlowDocument>\r\n</RichTextBox>`\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n No exceptions. \r\n Narrator tool in Windows 11 is not able to read content there in RichTextBox control of WPF application.\r\n\r\n **Expected behavior:**\r\nNarrator tool in Windows 11 has to read content there in RichTextBox control of WPF application. \r\n\r\n **Minimal repro:**\r\n","Url":"https://github.com/dotnet/wpf/issues/6771","RelatedDescription":"Open issue \"[Accessibility Issue]: Narrator tool in Windows 11 is not able to read content there in RichTextBox control of WPF application.\" (#6771)"},{"Id":"1298767739","IsPullRequest":true,"CreatedAt":"2022-07-08T09:41:47","Actor":"singhashish-wpf","Number":"6770","RawContent":null,"Title":"Update pipeline to run DRTs on PRs","State":"open","Body":"Fixes #6769 \r\nUpdate WPF pipeline to Run DRTs \n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6770)","Url":"https://github.com/dotnet/wpf/pull/6770","RelatedDescription":"Open PR \"Update pipeline to run DRTs on PRs\" (#6770)"},{"Id":"1298765975","IsPullRequest":false,"CreatedAt":"2022-07-08T09:40:11","Actor":"singhashish-wpf","Number":"6769","RawContent":null,"Title":"Modify wpf pipeline for test automation","State":"open","Body":"\n- [x] Zipped testbins not available in latest builds of wpf-test\n- [x] Architecture and buildconfig not adhered in copying wpf binaries\n- [x] Copy and replace wpf built binaries in test host dotnet installation\n- [ ] Verify whether the binaries were replaced properly\n- [x] Find and update pools which support wpf testing requirement","Url":"https://github.com/dotnet/wpf/issues/6769","RelatedDescription":"Open issue \"Modify wpf pipeline for test automation\" (#6769)"},{"Id":"1298443986","IsPullRequest":false,"CreatedAt":"2022-07-08T03:46:28","Actor":"ryanryanorient","Number":"6768","RawContent":null,"Title":"set PrintQueue.CreateXpsDocumentWriter owner","State":"open","Body":"* .NET Core Version:5.0\r\n* Windows version: windows 10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\n **Problem description:**\r\n I showDialog in window 1 another window 2,\r\nCall PrintQueue.CreateXpsDocumentWriter in new window 2\r\nThe printer selection dialog 3 popped up, \r\nbut it can not set the Owner option, \r\nwhich caused me to accidentally click on the new window 2, \r\nand the printer selection dialog 3 was hidden to the new window 2. \r\nAfter that, \r\nit is expected that the new window 2 cannot be clicked.\r\nXPSDocumentViewer has the same problem,\r\nWhen the print button is clicked, the dialog box may be set to the back\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n \r\n **Expected behavior:**\r\n \r\n **Minimal repro:**\r\n","Url":"https://github.com/dotnet/wpf/issues/6768","RelatedDescription":"Open issue \"set PrintQueue.CreateXpsDocumentWriter owner\" (#6768)"},{"Id":"1298025601","IsPullRequest":true,"CreatedAt":"2022-07-07T20:27:46","Actor":"dotnet-maestro[bot]","Number":"6767","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220707.2\r\n- **Date Produced**: July 7, 2022 7:25:14 PM UTC\r\n- **Commit**: 67bbe0551b46defdea8ddac62c8aab6130721ed7\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.7.22357.1 to 7.0.0-preview.7.22357.2][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.7.22357.1 to 7.0.0-preview.7.22357.2][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.6.22330.8 to 7.0.0-preview.6.22356.9][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/147100a...67bbe05\r\n[2]: https://github.com/dotnet/runtime/compare/8cb93a2...889404f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6767)","Url":"https://github.com/dotnet/wpf/pull/6767","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6767)"},{"Id":"1297873303","IsPullRequest":true,"CreatedAt":"2022-07-07T18:31:15","Actor":"dotnet-maestro[bot]","Number":"6765","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220707.1\r\n- **Date Produced**: July 7, 2022 5:43:48 PM UTC\r\n- **Commit**: 147100a5b09d15cfc598a072b84113c2530d7896\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.7.22355.1 to 7.0.0-preview.7.22357.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.7.22355.1 to 7.0.0-preview.7.22357.1][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/5972c29...147100a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6765)","Url":"https://github.com/dotnet/wpf/pull/6765","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6765)"},{"Id":"1296881866","IsPullRequest":false,"CreatedAt":"2022-07-07T06:11:13","Actor":"SubashiniMahendran","Number":"6763","RawContent":null,"Title":"Setting LinearGradientBrush for more than one control not working properly","State":"open","Body":" **Problem description:**\r\n\r\nMy requirement is to set the different color for bottom border as like below. So, I have used LinearGradientBrush for my requirement.\r\n\r\n![image](https://user-images.githubusercontent.com/92976485/177701762-04b8de8d-f9b1-4005-88c2-ddc8fd5f5c70.png)\r\n\r\nI have a viewmodel with one LinearGradientBrush type property, then I have binded this property to many controls like TextBox, Button, RichTextBox etc  BorderBrush property. Binding same LinearGradientBrush property to many controls not working as excepted. \r\n\r\nPlease find the sample and screenshot below:\r\n\r\n[WPF-Application.zip](https://github.com/dotnet/wpf/files/9060848/WPF-Application.zip)\r\n\r\n![image](https://user-images.githubusercontent.com/92976485/177703408-8ecbb9c9-a8da-4ef8-80ee-a3491e10642a.png)\r\n \r\n **Actual behavior:** Binding same LinearGradientBrush property to many controls not working as excepted. \r\n \r\n **Expected behavior:** Binding same LinearGradientBrush property to many controls should work as excepted. \r\n\r\n**Note:** I have checked with other platform like WinUI, this scenario works properly. Please find the sample regarding it below:\r\n\r\n[WinUI-Application.zip](https://github.com/dotnet/wpf/files/9060857/WinUI-Application.zip)\r\n\r\n![image](https://user-images.githubusercontent.com/92976485/177703922-5555cb6b-3140-41a2-8114-dfca9e49143d.png)\r\n","Url":"https://github.com/dotnet/wpf/issues/6763","RelatedDescription":"Open issue \"Setting LinearGradientBrush for more than one control not working properly\" (#6763)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-07-14T03:30:30.0314892Z","RunDurationInMilliseconds":495}