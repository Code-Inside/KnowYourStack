{"Data":{"GitHub":{"Issues":[{"Id":"893608611","IsPullRequest":true,"CreatedAt":"2021-05-17T18:56:15","Actor":"ryalanms","Number":"4523","RawContent":null,"Title":"Port WPF ARM64 support to NET 5:  Final project, source, and packaging updates","State":"open","Body":"  WPF support for ARM64: Enable build in public repo and update packaging (#4048)\r\n\r\n    * WPF support for ARM64: WPF ARM64 public repo Packaging updates\r\n\r\n    * Enable arm64 builds on public WPF repo\r\n\r\n    * Update APICompat targets to work with ARM64\r\n\r\n    Co-authored-by: Alexandre Zollinger Chohfi <...>\r\n    Co-authored-by: Marcpems <...>\r\n    Co-authored-by: Juan Sebastian Hoyos Ayala <...>\r\n    Co-authored-by: Ryland <41491307+ryalanms@users.noreply.github.com>\r\n\r\n   WPF support for ARM64: WPF public repo project updates and final source fixes (#4049)\r\n\r\n    * WPF support for ARM64: WPF public repo project updates and final source fixes\r\n\r\n    Co-authored-by: Alexandre Zollinger Chohfi <...>\r\n    Co-authored-by: Marcpems <...>\r\n    Co-authored-by: Juan Sebastian Hoyos Ayala <...>\r\n    Co-authored-by: Ryland <41491307+ryalanms@users.noreply.github.com>\r\n\r\n    * PR Feedback\r\n\r\n    Co-authored-by: Alexandre Zollinger Chohfi <...>\r\n    Co-authored-by: Marcpems <...>\r\n    Co-authored-by: Juan Sebastian Hoyos Ayala <...>\r\n    Co-authored-by: Ryland <41491307+ryalanms@users.noreply.github.com>\r\n\r\n    * Add Juan's sln fix for ARM64 platform\r\n\r\n    Co-authored-by: Alexandre Zollinger Chohfi <...>\r\n    Co-authored-by: Marcpems <...>\r\n    Co-authored-by: Juan Sebastian Hoyos Ayala <...>\r\n    Co-authored-by: Ryland <41491307+ryalanms@users.noreply.github.com>\r\n\r\n/cc @azchohfi @hoyosjs @marcpems","Url":"https://github.com/dotnet/wpf/pull/4523","RelatedDescription":"Open PR \"Port WPF ARM64 support to NET 5:  Final project, source, and packaging updates\" (#4523)"},{"Id":"893594410","IsPullRequest":true,"CreatedAt":"2021-05-17T18:35:24","Actor":"ryalanms","Number":"4522","RawContent":null,"Title":"Port WPF ARM64 support to NET 5:  Update WPF Arcade SDK to support ARM64","State":"open","Body":"Update WPF Arcade SDK to support ARM64\r\n\r\n    Co-authored-by: Alexandre Zollinger Chohfi <...>\r\n    Co-authored-by: Marcpems <...>\r\n    Co-authored-by: Juan Sebastian Hoyos Ayala <...>\r\n    Co-authored-by: Ryland <41491307+ryalanms@users.noreply.github.com>\r\n\r\n/cc @azchohfi @hoyosjs @marcpems","Url":"https://github.com/dotnet/wpf/pull/4522","RelatedDescription":"Open PR \"Port WPF ARM64 support to NET 5:  Update WPF Arcade SDK to support ARM64\" (#4522)"},{"Id":"893586465","IsPullRequest":false,"CreatedAt":"2021-05-17T18:23:47","Actor":"vsfeedback","Number":"4521","RawContent":null,"Title":"Can't navigate to a CustomUserContol from the main XAML file in WPF","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Cant-navigate-to-a-CustomUserContol-fro/1424271)._\n\n---\n[regression]\r\nIf I rename my custom UserControl to a different one, in main XAML file, than F12 on the new user control will redirect me to the old one.\n\n## Example:\n\n`<local: customUserControl /> rename to <local: otherUserControl />`\n\n**F12** on the __otherUserControl__ will open __customUserControl__\n\nAlso, reference counter, the one above the method or property, doesn't get updated until I recompile the project.\n\n---\n### Original Comments\n\n#### Feedback Bot on 5/16/2021, 06:33 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/4521","RelatedDescription":"Open issue \"Can't navigate to a CustomUserContol from the main XAML file in WPF\" (#4521)"},{"Id":"893585929","IsPullRequest":false,"CreatedAt":"2021-05-17T18:22:58","Actor":"vsfeedback","Number":"4520","RawContent":null,"Title":"Adorner Thumb DragDelta changes values incorrect when Adorned Element is rotated","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Adorner-Thumb-DragDelta-changes-values-i/1424110)._\n\n---\nMy previous problem reported on Reported May 04, 2021 (same title) has been closed duplicate with the following comment:\n\"We moved this issue to a relevant GitHub project. Please comment and track it at this URL: https://github.com/dotnet/wpf/issues/4498\"\nBUT!\n1. No solution here!\n2. I signed into github, and no solution there for issue 4498 - open issue!\n3. Visual studio help does not help!\n4. Visual Studio reference does not help!\n5. You closed it as duplicate? Duplicate of what? Where is the duplicate? Was the duplicate resolved, solved?\n6. I cannot find any help to indicate how to re-open the problem.\n\nWHAT IS the reference to the duplicate problem?\nWHAT WAS the solution?\n\nPlease help.\n\n---\n### Original Comments\n\n#### Feedback Bot on 5/16/2021, 06:30 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/4520","RelatedDescription":"Open issue \"Adorner Thumb DragDelta changes values incorrect when Adorned Element is rotated\" (#4520)"},{"Id":"892780203","IsPullRequest":true,"CreatedAt":"2021-05-16T23:09:56","Actor":"jmarolf","Number":"4519","RawContent":null,"Title":"enable nullable for new projects","State":"open","Body":"resolves https://github.com/dotnet/templates/issues/485","Url":"https://github.com/dotnet/wpf/pull/4519","RelatedDescription":"Open PR \"enable nullable for new projects\" (#4519)"},{"Id":"892434278","IsPullRequest":true,"CreatedAt":"2021-05-15T12:49:28","Actor":"dotnet-maestro[bot]","Number":"4518","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210515.2\r\n- **Date Produced**: 5/15/2021 12:26 PM\r\n- **Commit**: 47d93161a935c11356350184bd266068d750d07c\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.5.21264.2 to 6.0.0-preview.5.21265.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC88d0db5&targetVersion=GC47d9316&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4518","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4518)"},{"Id":"892198634","IsPullRequest":false,"CreatedAt":"2021-05-14T19:58:19","Actor":"SamBent","Number":"4517","RawContent":null,"Title":"Bad assert in VirtualizingStackPanel.EnsureScrollInfo","State":"open","Body":"* .NET Core Version: all\r\n* Windows version: all\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? no\r\n \r\n **Problem description:**\r\n The following markup causes a Debug.Assert in `VirtualizingStackPanel.EnsureScrollInfo`\r\n\r\n```\r\n            <ItemsControl.ItemsPanel>\r\n                <ItemsPanelTemplate>\r\n                    <VirtualizingStackPanel\r\n                        CanVerticallyScroll=\"True\"\r\n                        CanHorizontallyScroll=\"False\"/>\r\n                </ItemsPanelTemplate>\r\n            </ItemsControl.ItemsPanel>\r\n```\r\n\r\n **Actual behavior:** \r\nWhen using debug WPF bits, this asserts and either displays the assert dialog or simply crashes (depending on external factors).  The assertion occurs when setting both Can*Scroll properties before the VSP is hooked up to a ScrollViewer.\r\n \r\n **Expected behavior:**\r\n No assert.  The markup is legal.\r\n\r\n **Minimal repro:**\r\n[WpfApp5.zip](https://github.com/dotnet/wpf/files/6480889/WpfApp5.zip)\r\n\r\n**Notes:**\r\nThe markup is actually useless.  Instead, you should set the \\*ScrollBarVisibility properties on the ScrollViewer.  The ScrollViewer uses these properties to set the VSP's Can*Scroll properties, overriding the values from the ItemsPanelTemplate.\r\n\r\n```\r\n                <ScrollViewer ...\r\n                    VerticalScrollBarVisibility=\"Visible\"\r\n                    HorizontalScrollBarVisibility=\"Disabled\">\r\n```\r\n\r\nNevertheless, the assertion should be removed.  It's not valid, and it interferes with running an app that may have used the quoted markup.  For example, Visual Studio 16.10.0 Preview 2.0.","Url":"https://github.com/dotnet/wpf/issues/4517","RelatedDescription":"Open issue \"Bad assert in VirtualizingStackPanel.EnsureScrollInfo\" (#4517)"},{"Id":"891901754","IsPullRequest":true,"CreatedAt":"2021-05-14T13:18:20","Actor":"dotnet-maestro[bot]","Number":"4516","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210514.2\r\n- **Date Produced**: 5/14/2021 12:48 PM\r\n- **Commit**: 88d0db542670c833c9246afca3226bf82f8fa00a\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.5.21263.2 to 6.0.0-preview.5.21264.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC7fe82c7&targetVersion=GC88d0db5&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4516","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4516)"},{"Id":"891396704","IsPullRequest":false,"CreatedAt":"2021-05-13T21:35:31","Actor":"KirillOsenkov","Number":"4515","RawContent":null,"Title":"SDK-style WPF Projects targeting net472 are broken because ImportFrameworkWinFXTargets is false","State":"open","Body":"This PR has regressed building WPF projects that use the SDK-style:\r\nhttps://github.com/dotnet/wpf/pull/2976\r\n\r\nBy default ImportFrameworkWinFXTargets was `true`, but now changes to `false`, resulting in MarkupCompile not running.\r\n\r\nFYI @Nirmal4G ","Url":"https://github.com/dotnet/wpf/issues/4515","RelatedDescription":"Open issue \"SDK-style WPF Projects targeting net472 are broken because ImportFrameworkWinFXTargets is false\" (#4515)"},{"Id":"891013936","IsPullRequest":true,"CreatedAt":"2021-05-13T13:33:33","Actor":"dotnet-maestro[bot]","Number":"4514","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210513.2\r\n- **Date Produced**: 5/13/2021 12:44 PM\r\n- **Commit**: 7fe82c7753f993860f4b15287dd4e79c4959281c\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.5.21262.4 to 6.0.0-preview.5.21263.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC19a17ec&targetVersion=GC7fe82c7&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4514","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4514)"},{"Id":"890306490","IsPullRequest":true,"CreatedAt":"2021-05-12T17:50:48","Actor":"dotnet-maestro[bot]","Number":"4513","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210512.4\r\n- **Date Produced**: 5/12/2021 4:58 PM\r\n- **Commit**: 19a17ecbcb4fa079be7fd99020bf2647122ee59b\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.5.21262.2 to 6.0.0-preview.5.21262.4][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC3705938&targetVersion=GC19a17ec&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4513","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4513)"},{"Id":"890086197","IsPullRequest":false,"CreatedAt":"2021-05-12T13:22:38","Actor":"topsterde","Number":"4512","RawContent":null,"Title":"WPF RepeatButton fires only once on TouchUp","State":"open","Body":"* .NET Core Version: 3.1\r\n* Windows version: Win 10 1809\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n\r\n **Problem description:**\r\nA wpf application with a \"dynamic splashscreen\" has a bug with the RepeatButton.\r\nThe RepeatButton is not firing repeated click events with a touch monitor. \r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n WPF RepeatButton fires only once on TouchUp.\r\n\r\n **Expected behavior:**\r\nRepeatButton fires repeated click events like with a long mouse press\r\n \r\n **Minimal repro:**\r\n[SplashScreenRepeatButtonBug.zip](https://github.com/dotnet/wpf/files/6465919/SplashScreenRepeatButtonBug.zip)","Url":"https://github.com/dotnet/wpf/issues/4512","RelatedDescription":"Open issue \"WPF RepeatButton fires only once on TouchUp\" (#4512)"},{"Id":"890067665","IsPullRequest":true,"CreatedAt":"2021-05-12T13:22:30","Actor":"dotnet-maestro[bot]","Number":"4511","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210512.2\r\n- **Date Produced**: 5/12/2021 12:53 PM\r\n- **Commit**: 3705938bd2bfa9100ab4742e1703f090d6bc85cb\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.5.21261.2 to 6.0.0-preview.5.21262.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GCb89ae3d&targetVersion=GC3705938&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4511","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4511)"},{"Id":"889898926","IsPullRequest":false,"CreatedAt":"2021-05-12T09:52:57","Actor":"ChengYen-Tang","Number":"4510","RawContent":null,"Title":"Refreshing pictures causes high CPU usage.","State":"open","Body":"Because I need to draw the bounding box in the video, I take out each frame of the video to draw the bounding box, and then refresh the Image component. But this is causing high CPU usage. Is there any suggestion to solve the high CPU usage caused by high frequency refresh of the form?\r\n\r\nThank you.","Url":"https://github.com/dotnet/wpf/issues/4510","RelatedDescription":"Open issue \"Refreshing pictures causes high CPU usage.\" (#4510)"},{"Id":"889779110","IsPullRequest":true,"CreatedAt":"2021-05-12T07:42:31","Actor":"kant2002","Number":"4509","RawContent":null,"Title":"Remove not used code","State":"open","Body":"This was discovered when trying to run WPF under NativeAOT https://github.com/dotnet/runtimelab/issues/1109\r\nResetLogPixelsY and ResetLogPixelsX just seems to be not used too.","Url":"https://github.com/dotnet/wpf/pull/4509","RelatedDescription":"Open PR \"Remove not used code\" (#4509)"},{"Id":"888211459","IsPullRequest":true,"CreatedAt":"2021-05-11T19:07:37","Actor":"ryalanms","Number":"4508","RawContent":null,"Title":"Merge internal/release/3.1 into release/3.1","State":"closed","Body":"Merge internal/release/3.1 into release/3.1.","Url":"https://github.com/dotnet/wpf/pull/4508","RelatedDescription":"Closed or merged PR \"Merge internal/release/3.1 into release/3.1\" (#4508)"},{"Id":"888203007","IsPullRequest":true,"CreatedAt":"2021-05-11T19:06:51","Actor":"ryalanms","Number":"4507","RawContent":null,"Title":"Merge internal/release/5.0 into release/5.0","State":"closed","Body":"Merge internal/release/5.0 into release/5.0.  ","Url":"https://github.com/dotnet/wpf/pull/4507","RelatedDescription":"Closed or merged PR \"Merge internal/release/5.0 into release/5.0\" (#4507)"},{"Id":"888161372","IsPullRequest":true,"CreatedAt":"2021-05-11T18:35:46","Actor":"mmitche","Number":"4506","RawContent":null,"Title":"Use dotnet certificate","State":"open","Body":"Uses the .NET certificate instead of Microsoft400","Url":"https://github.com/dotnet/wpf/pull/4506","RelatedDescription":"Open PR \"Use dotnet certificate\" (#4506)"},{"Id":"887304383","IsPullRequest":true,"CreatedAt":"2021-05-11T13:44:45","Actor":"dotnet-maestro[bot]","Number":"4505","RawContent":null,"Title":"[main] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: f8781171-8d89-4d6b-f62b-08d8e93a0c51\r\n- **Build**: 20210511.2\r\n- **Date Produced**: 5/11/2021 1:26 PM\r\n- **Commit**: b89ae3ddb52a2b91ca9ec89f0ca2ff0e99e33e44\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-preview.5.21258.2 to 6.0.0-preview.5.21261.2][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC6856790&targetVersion=GCb89ae3d&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f8781171-8d89-4d6b-f62b-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4505","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4505)"},{"Id":"886831016","IsPullRequest":false,"CreatedAt":"2021-05-11T10:38:24","Actor":"nalka0","Number":"4503","RawContent":null,"Title":"Support for TypeDescriptionProvider when resolving the TypeConverter used while parsing xaml files","State":"open","Body":"**Issue to fix**\r\n\r\nConsidering the following class : \r\n```cs\r\npublic class Wrapper<T>\r\n{\r\n    public T Wrapped { get; set; }\r\n\r\n    public override string ToString()\r\n    {\r\n        return $\"{Wrapped.GetType()} : {Wrapped}\";\r\n    }\r\n}\r\n```\r\nIf I have an object with a property of type `Wrapper<T>` and want to use it in XAML like `MyProperty=\"SomeValue\"` a TypeConverter is required. \r\nHere, the TypeConverter implementation would look like : \r\n```cs\r\npublic class WrapperConverter : TypeConverter\r\n{\r\n    private readonly Type wrappedType;\r\n\r\n    public WrapperConverter(Type wrappedType)\r\n    {\r\n        this.wrappedType = wrappedType;\r\n    }\r\n\r\n    public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)\r\n    {\r\n        return sourceType == typeof(string) || base.CanConvertFrom(context, sourceType);\r\n    }\r\n\r\n    public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)\r\n    {\r\n        Type retType = typeof(Wrapper<>).MakeGenericType(wrappedType);\r\n        var conversionResult = TypeDescriptor.GetConverter(wrappedType).ConvertFrom(context, culture, value);\r\n        var ret = Activator.CreateInstance(retType); // var ret = new Wrapper<T>();\r\n        retType.GetProperty(nameof(Wrapper<object>.Wrapped)).SetValue(ret, conversionResult); // ret.Wrapped = conversionResult;\r\n        return ret;\r\n    }\r\n}\r\n```\r\nThe issue is, if I apply`[TypeConverter(typeof(WrapperConverter))]` to my `Wrapper<T>` class, the XAML parser doesn't find the constructor for `WrapperConverter` (since it has no default constructor) and hence throws a `XamlParseException`.\r\n\r\n**Most likely solution to me**\r\n\r\nNow if I implement a TypeDescriptionProvider and a CustomTypeDescriptor : \r\n\r\n```cs\r\npublic class WrapperTypeDescriptor : CustomTypeDescriptor\r\n{\r\n    private readonly Type objectType;\r\n\r\n    public WrapperTypeDescriptor(Type objectType)\r\n    {\r\n        this.objectType = objectType;\r\n    }\r\n\r\n    public override TypeConverter GetConverter()\r\n    {\r\n        Type wrappedType = objectType.GenericTypeArguments[0];\r\n        return new WrapperConverter(wrappedType);\r\n    }\r\n}\r\n\r\npublic class WrapperTypeDescriptionProvider : TypeDescriptionProvider\r\n{\r\n    public override ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance)\r\n    {\r\n        return new WrapperTypeDescriptor(objectType);\r\n    }\r\n}\r\n```\r\n\r\nI can control the `WrapperConverter`'s instantiation and use my `WrapperConverter`'s parameterized constructor and convert strings to `Wrapper<T>` instances by applying `[TypeDescriptionProvider(typeof(WrapperTypeDescriptionProvider))]` to my `Wrapper<T>` class : \r\n\r\n```cs\r\nConsole.WriteLine(TypeDescriptor.GetConverter(typeof(Wrapper<int>)).ConvertFromString(\"18\"));\r\n```\r\nwill output : \r\n\r\n> System.Int32 : 18\r\n\r\nThe only problem with this solution is that WPF's xaml parser doesn't seem to look for a TypeDescriptionProviderAttribute but only a TypeConverterAttribute.","Url":"https://github.com/dotnet/wpf/issues/4503","RelatedDescription":"Open issue \"Support for TypeDescriptionProvider when resolving the TypeConverter used while parsing xaml files\" (#4503)"},{"Id":"886417095","IsPullRequest":true,"CreatedAt":"2021-05-11T08:03:43","Actor":"0x90d","Number":"4502","RawContent":null,"Title":"Add IntPtr overloads to MessageBox","State":"open","Body":"From all existing overloads it takes the window handle (IntPtr) and call its core functionality in `ShowCore` method anyway. But it has no public overload for IntPtr yet. But one reason why this could be useful is that it allows us to do something like:\r\n\r\n```C#\r\nMessageBox.Show(Application.Current?.MainWindow == null ?\r\n    IntPtr.Zero :\r\n    new WindowInteropHelper(Application.Current.MainWindow).Handle, \"Hello world\");\r\n```\r\n\r\nUsing the window overload the messagebox will be shown centered at the application window. However sometimes `Application.Current.MainWindow` can be null for example when called before the window is shown. And in this case it will throw an exception, rather than just fallback to IntPtr.Zero in which case the messagebox appears centered at the desktop. This is because it creates a new instance of `WindowInteropHelper` on the existing window overloads to obtain the window handle. But `WindowInteropHelper` does not allow NULL on its `ctor`.\r\n\r\nIntially I wanted to just add nullify support of the window overloads but I don't know if the WPF project supports it, it seems like it does not. This would also be problematically since it modifies existing code. Adding IntPtr overloads was the safest solution as it has zero risk by not modifying existing code.","Url":"https://github.com/dotnet/wpf/pull/4502","RelatedDescription":"Open PR \"Add IntPtr overloads to MessageBox\" (#4502)"},{"Id":"885684350","IsPullRequest":false,"CreatedAt":"2021-05-11T02:23:35","Actor":"lindexi","Number":"4501","RawContent":null,"Title":"Code comments and behavior are inconsistent in Selector.cs","State":"open","Body":"We say that \"Returns false if FrameworkElement representing this item has Selector.SelectableProperty set to false\", but we just check the object type\r\n\r\nhttps://github.com/dotnet/wpf/blob/1c3be71312540f51d98f769b431ea3cc110844d0/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Controls/Primitives/Selector.cs#L1859-L1872","Url":"https://github.com/dotnet/wpf/issues/4501","RelatedDescription":"Open issue \"Code comments and behavior are inconsistent in Selector.cs\" (#4501)"},{"Id":"885237183","IsPullRequest":true,"CreatedAt":"2021-05-11T01:39:56","Actor":"ryalanms","Number":"4497","RawContent":null,"Title":"Update 5.0 branding version to 5.0.7","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/4497","RelatedDescription":"Closed or merged PR \"Update 5.0 branding version to 5.0.7\" (#4497)"},{"Id":"885495024","IsPullRequest":true,"CreatedAt":"2021-05-11T01:17:49","Actor":"dotnet-maestro[bot]","Number":"4499","RawContent":null,"Title":"[release/5.0] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:879723a8-02ca-470e-70c0-08d83eef1915)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 879723a8-02ca-470e-70c0-08d83eef1915\r\n- **Build**: 20210510.3\r\n- **Date Produced**: 5/10/2021 11:24 PM\r\n- **Commit**: 85674e156c6a1e4810d8c1324cdd7cdcde31972c\r\n- **Branch**: refs/heads/release/5.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 5.0.6-servicing.21206.6 to 5.0.7-servicing.21260.3][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC64d5af9&targetVersion=GC85674e1&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:879723a8-02ca-470e-70c0-08d83eef1915)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4499","RelatedDescription":"Closed or merged PR \"[release/5.0] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#4499)"},{"Id":"885502376","IsPullRequest":false,"CreatedAt":"2021-05-11T00:54:46","Actor":"lindexi","Number":"4500","RawContent":null,"Title":"Why we write the foo bar in WPF code?","State":"closed","Body":"LOL. I find we write the foo bar code in `MimeTypeMapper`, see \r\n\r\nhttps://github.com/dotnet/wpf/blob/1c3be71312540f51d98f769b431ea3cc110844d0/src/Microsoft.DotNet.Wpf/src/Shared/MS/Internal/MimeTypeMapper.cs#L34\r\n\r\nCan I remove it?","Url":"https://github.com/dotnet/wpf/issues/4500","RelatedDescription":"Closed issue \"Why we write the foo bar in WPF code?\" (#4500)"},{"Id":"885236133","IsPullRequest":true,"CreatedAt":"2021-05-10T22:45:13","Actor":"ryalanms","Number":"4496","RawContent":null,"Title":"Update 3.1 branding to 3.1.16","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/4496","RelatedDescription":"Closed or merged PR \"Update 3.1 branding to 3.1.16\" (#4496)"},{"Id":"885269167","IsPullRequest":false,"CreatedAt":"2021-05-10T22:41:07","Actor":"vsfeedback","Number":"4498","RawContent":null,"Title":"Adorner Thumb DragDelta changes values incorrect when Adorned Element is rotated","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Adorner-Thumb-DragDelta-changes-values-i/1413029)._\n\n---\n[severity:I'm unable to use this version]\r\nI have created a test application (attached) that can be used to demonstrated the problem and test the solution.\nThe DragDelta horizontal and vertical change values of the Thumb are incorrect when the Adorned Element is rotated with a positive angle or a negative angle more than 90 degrees.\nWhen rotated for example at 60 degrees, the horizontal and vertical change values appear to increase in an exponential rate causing he adorned element to rapidly disappear off the screen/canvas.\nWhen the adorned element is not rotated, the DragDelta change values are like:\ndX:    -0.3  dY:    -1.0\ndX:    -0.3  dY:    -2.0\ndX:     1.5  dY:    -0.4\ndX:     0.9  dY:    -0.9\ndX:     1.4  dY:    -3.2\ndX:     2.3  dY:    -2.2\ndX:     3.0  dY:    -2.2\ndX:     1.8  dY:    -2.7\nHowever, if the adorned element is rotated > 0 degrees clockwise, or more than 90 degrees counter clockwise, the DragDelta change values are like:\ndX:     2.3  dY:   -13.1\ndX:    38.7  dY:  -333.8\ndX:   353.0  dY:  -209.5\ndX:   467.2  dY:   185.6\ndX:   169.9  dY:   589.6\ndX:  -442.6  dY:   601.3\ndX:  -907.6  dY:    17.5\ndX:  -687.7  dY:  -863.2\ndX:   325.4  dY: -1,304.8\ndX: 1,505.3  dY:  -651.8\ndX: 1,746.2  dY:   971.2\nAs a result the adorned element rapidly disappears off the screen.\nIn this case an adorner to use for dragging is Not Useable.\n\n---\n### Original Comments\n\n#### Feedback Bot on 5/5/2021, 08:14 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/wpf/issues/4498","RelatedDescription":"Open issue \"Adorner Thumb DragDelta changes values incorrect when Adorned Element is rotated\" (#4498)"},{"Id":"884756059","IsPullRequest":true,"CreatedAt":"2021-05-10T18:49:19","Actor":"mmitche","Number":"4495","RawContent":null,"Title":"Remove windowsdesktop blob feed","State":"closed","Body":"This should allow the feed check to verify no upstreams across all input feeds.","Url":"https://github.com/dotnet/wpf/pull/4495","RelatedDescription":"Closed or merged PR \"Remove windowsdesktop blob feed\" (#4495)"},{"Id":"883080227","IsPullRequest":true,"CreatedAt":"2021-05-10T18:26:01","Actor":"lindexi","Number":"4493","RawContent":null,"Title":"Fix the MimeObjectFactory field capacity","State":"closed","Body":"\r\n\r\nFixes Issue  #4492\r\n\r\n\r\n## Description\r\n\r\nThe default MS.Internal.AppModel.MimeObjectFactory._objectConverters capacity should be 9\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/4493","RelatedDescription":"Closed or merged PR \"Fix the MimeObjectFactory field capacity\" (#4493)"},{"Id":"884547787","IsPullRequest":false,"CreatedAt":"2021-05-10T16:06:12","Actor":"wenbei421","Number":"4494","RawContent":null,"Title":" XAML parser resolving URIs (I get odd control behavior, and \"The component 'XXX' does not have a resource identified by the URI\" errors.","State":"open","Body":"I am currently struggling with what I assume is this issue. I have a .NET 5.0 WPF plugin architecture and encounter errors if I have multiple plugins in different assembly load contexts. It seems to come down to issues with the XAML parser resolving URIs (I get odd control behavior, and \"The component 'XXX' does not have a resource identified by the URI\" errors.\r\n\r\nGiven that this is still an open issue, is there any known way to work around the problem? Thanks.\r\n\r\n_Originally posted by @mikeoliphant in https://github.com/dotnet/wpf/issues/1700#issuecomment-776875639_","Url":"https://github.com/dotnet/wpf/issues/4494","RelatedDescription":"Open issue \" XAML parser resolving URIs (I get odd control behavior, and \"The component 'XXX' does not have a resource identified by the URI\" errors.\" (#4494)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-05-18T05:30:39.3936568Z","RunDurationInMilliseconds":616}