{"Data":{"GitHub":{"Issues":[{"Id":"1204922029","IsPullRequest":false,"CreatedAt":"2022-04-14T19:55:23","Actor":"raffaeler","Number":"6434","RawContent":null,"Title":"Enable WPF to play well with Dependency Injection","State":"open","Body":"I created my own framework to use Dependency Injection in WPF. This is done using the ASP.NET infrastructure.\r\nI can inject pages, viewmodels and many other types, but the WPF infrastructure does not allow to inject, for example, converters or markup extensions.\r\n\r\nMarkup extensions provide an IServiceProvider which we can't access elsewhere.\r\n\r\nThis issue is about a two-phase request:\r\n- Step 1 (short-term): Ability to provide to WPF a user-provided IServiceProvider, so that I can retrieve my objects within a markup extension.\r\n- Step 2 (long-term): Embrace the ASP.NET DI infrastructure so that we can access configurations within converters, controls, behaviors, etc. \r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/6434","RelatedDescription":"Open issue \"Enable WPF to play well with Dependency Injection\" (#6434)"},{"Id":"1204820297","IsPullRequest":false,"CreatedAt":"2022-04-14T17:57:29","Actor":"mol","Number":"6433","RawContent":null,"Title":"NullReferenceException in PopupSecurityHelper started appearing yesterday (with .NET Core 3.1.24 update?) for hundreds of users so far","State":"open","Body":"* .NET Core Version: **3.1.24.**\r\n* Windows version: **Windows 10 and 11 so far.**\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: **Unable to reproduce so far. Just seeing hundreds of bug reports coming in from our users.**\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? **No.**\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/main/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nYesterday, April 13, coinciding with a number of Windows updates rolling out (in particular I think .NET Core 3.1.24 is the culprit) we started seeing crashes of our application, [Mailbird](www.getmailbird.com), coming in from first a few users, but today hundreds.\r\n\r\nStack traces are entirely in .NET code and we've released no update to Mailbird in several weeks. Looking at the change log for .NET Core 3.1.24 I see two PR's that make changes that \"fit\" the stack traces: https://github.com/dotnet/wpf/pull/6020 and https://github.com/dotnet/wpf/pull/6017.\r\n\r\n\r\n **Actual behavior:**\r\nSince it's the Dispatcher, the application crashes. A few of the stack traces we're seeing (all end the same place):\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n  Module \"System.Windows.Controls.Primitives.Popup+PopupSecurityHelper\", in get_Handle\r\n  Module \"System.Windows.Controls.Primitives.Popup+PopupSecurityHelper\", in RegisterForTooltipDismissNotification\r\n  Module \"System.Windows.Controls.PopupControlService\", in CloseToolTip\r\n  Module \"System.Windows.Controls.PopupControlService\", in OnMouseMove\r\n  Module \"System.Windows.Controls.PopupControlService\", in OnPostProcessInput\r\n  Module \"System.Windows.Input.InputManager\", in RaiseProcessInputEventHandlers\r\n  Module \"System.Windows.Input.InputManager\", in ProcessStagingArea\r\n  Module \"System.Windows.Input.InputManager\", in ProcessInput\r\n  Module \"System.Windows.Input.InputProviderSite\", in ReportInput\r\n  Module \"System.Windows.Interop.HwndMouseInputProvider\", in ReportInput\r\n  Module \"System.Windows.Interop.HwndMouseInputProvider\", in FilterMessage\r\n  Module \"System.Windows.Interop.HwndSource\", in InputFilterMessage\r\n  Module \"MS.Win32.HwndWrapper\", in WndProc\r\n  Module \"MS.Win32.HwndSubclass\", in DispatcherCallbackOperation\r\n  Module \"System.Windows.Threading.ExceptionWrapper\", in InternalRealCall\r\n  Module \"System.Windows.Threading.ExceptionWrapper\", in TryCatchWhen\r\n```\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n  Module \"System.Windows.Controls.Primitives.Popup+PopupSecurityHelper\", in get_Handle\r\n  Module \"System.Windows.Controls.Primitives.Popup+PopupSecurityHelper\", in RegisterForTooltipDismissNotification\r\n  Module \"System.Windows.Controls.PopupControlService\", in CloseToolTip\r\n  Module \"System.Windows.Controls.PopupControlService\", in OnMouseMove\r\n  Module \"System.Windows.Controls.PopupControlService\", in OnPostProcessInput\r\n  Module \"System.Windows.Input.InputManager\", in RaiseProcessInputEventHandlers\r\n  Module \"System.Windows.Input.InputManager\", in ProcessStagingArea\r\n  Module \"System.Windows.Input.InputManager\", in ProcessInput\r\n  Module \"System.Windows.Input.MouseDevice\", in Synchronize\r\n  Module \"System.Windows.Input.InputManager\", in HitTestInvalidatedAsyncCallback\r\n  Module \"System.Windows.Threading.ExceptionWrapper\", in InternalRealCall\r\n  Module \"System.Windows.Threading.ExceptionWrapper\", in TryCatchWhen\r\n```\r\n```\r\nSystem.NullReferenceException: La référence d'objet n'est pas définie à une instance d'un objet.\r\nà System.Windows.Controls.Primitives.Popup.PopupSecurityHelper.get_Handle()\r\nà System.Windows.Controls.Primitives.Popup.PopupSecurityHelper.RegisterForTooltipDismissNotification(UInt32 flag)\r\nà System.Windows.Controls.PopupControlService.CloseToolTip(ToolTip tooltip)\r\nà System.Windows.Controls.PopupControlService.OnPostProcessInput(Object sender, ProcessInputEventArgs e)\r\nà System.Windows.Input.InputManager.RaiseProcessInputEventHandlers(ProcessInputEventHandler postProcessInput, ProcessInputEventArgs processInputEventArgs)\r\nà System.Windows.Input.InputManager.ProcessStagingArea()\r\nà System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\nà System.Windows.Input.MouseDevice.Synchronize()\r\nà System.Windows.Input.MouseDevice.ChangeMouseCapture(IInputElement mouseCapture, IMouseInputProvider providerCapture, CaptureMode captureMode, Int32 timestamp)\r\nà System.Windows.Input.MouseDevice.Capture(IInputElement element, CaptureMode captureMode)\r\nà System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(MouseButtonEventArgs e)\r\nà System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\nà System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\nà System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\nà System.Windows.UIElement.ReRaiseEventAs(DependencyObject sender, RoutedEventArgs args, RoutedEvent newEvent)\r\nà System.Windows.UIElement.OnMouseDownThunk(Object sender, MouseButtonEventArgs e)\r\nà System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\nà System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\nà System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\nà System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\nà System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\r\nà System.Windows.Input.InputManager.ProcessStagingArea()\r\nà System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\nà System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)\r\nà System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawMouseActions actions, Int32 x, Int32 y, Int32 wheel)\r\nà System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr hwnd, WindowMessage msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\nà System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\nà MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\nà MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\nà System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\nà System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n```\r\n \r\n **Expected behavior:**\r\nNo `System.NullReferenceException` should be thrown.\r\n \r\n **Minimal repro:**\r\nAs of yet we've been unable to reproduce. It seems random in terms of when and where it happens, but looking at the stack traces it seems to happen when tooltips are closed.","Url":"https://github.com/dotnet/wpf/issues/6433","RelatedDescription":"Open issue \"NullReferenceException in PopupSecurityHelper started appearing yesterday (with .NET Core 3.1.24 update?) for hundreds of users so far\" (#6433)"},{"Id":"1204571337","IsPullRequest":true,"CreatedAt":"2022-04-14T14:29:40","Actor":"dotnet-maestro[bot]","Number":"6432","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220414.1\r\n- **Date Produced**: April 14, 2022 1:38:13 PM UTC\r\n- **Commit**: 94dc5b303a3b441767007aa0f2bcd9d048bf1c17\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.4.22213.1 to 7.0.0-preview.4.22214.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.4.22213.1 to 7.0.0-preview.4.22214.1][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/8dfd08d...94dc5b3\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6432)","Url":"https://github.com/dotnet/wpf/pull/6432","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6432)"},{"Id":"1204472521","IsPullRequest":true,"CreatedAt":"2022-04-14T12:58:56","Actor":"dotnet-maestro[bot]","Number":"6430","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220413.2\r\n- **Date Produced**: April 13, 2022 4:15:41 PM UTC\r\n- **Commit**: 4ec0b54a25d4e2129e8b34f60b4489e325421cb7\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22212.2 to 7.0.0-beta.22213.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22212.2 to 7.0.0-beta.22213.2][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22212.2 to 7.0.0-beta.22213.2][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22212.2 to 7.0.0-beta.22213.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22212.2 to 7.0.0-beta.22213.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/2e24ed0...4ec0b54\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6430)","Url":"https://github.com/dotnet/wpf/pull/6430","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6430)"},{"Id":"1203999296","IsPullRequest":true,"CreatedAt":"2022-04-14T03:35:07","Actor":"lindexi","Number":"6428","RawContent":null,"Title":"Try fix the first point in StylusPlugin in high DPI","State":"open","Body":"Fixes #6415\r\n\r\n## Description\r\n\r\nAfter https://github.com/dotnet/wpf/pull/2891 , we call calculate the point with `stylusDevice.CriticalActiveSourc`e. But the `stylusDevice.CriticalActiveSource` must be null when first touch down, because the wpf do not touch any element and do not get the AcitveSource before first touch down.\r\n\r\nWe should input the PresentationSource to `GetAndCacheTransformToDeviceMatrix` to get the right Matrix. So I replace the `report.InputSource` to `stylusDevice.CriticalActiveSource` when the `stylusDevice.CriticalActiveSource`  is null.\r\n\r\n## Customer Impact\r\n\r\nFix #6415\r\n\r\nThe coordinates of the points are correct in StylusPlugin.\r\n\r\n## Regression\r\n\r\nRegression in PR https://github.com/dotnet/wpf/pull/2891\r\n\r\n## Testing\r\n\r\nI test the code in my touch screen with high DPI. And I build it in https://github.com/dotnet-campus/wpf/actions/runs/2164903389\r\n\r\n## Risk\r\n\r\nAll of the application which run in the device with touch screen.\r\n\r\n@rladuca Could you review my code?\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6428)","Url":"https://github.com/dotnet/wpf/pull/6428","RelatedDescription":"Open PR \"Try fix the first point in StylusPlugin in high DPI\" (#6428)"},{"Id":"1202264090","IsPullRequest":true,"CreatedAt":"2022-04-13T17:09:31","Actor":"vseanreesermsft","Number":"6403","RawContent":null,"Title":"Merging internal commits for release/3.1","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6403)","Url":"https://github.com/dotnet/wpf/pull/6403","RelatedDescription":"Closed or merged PR \"Merging internal commits for release/3.1\" (#6403)"},{"Id":"1202266963","IsPullRequest":true,"CreatedAt":"2022-04-13T17:05:22","Actor":"vseanreesermsft","Number":"6404","RawContent":null,"Title":"Merging internal commits for release/5.0","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6404)","Url":"https://github.com/dotnet/wpf/pull/6404","RelatedDescription":"Closed or merged PR \"Merging internal commits for release/5.0\" (#6404)"},{"Id":"1203430922","IsPullRequest":true,"CreatedAt":"2022-04-13T15:34:23","Actor":"dotnet-maestro[bot]","Number":"6427","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:64ecc23e-064a-456b-da03-08d961c27f17)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 64ecc23e-064a-456b-da03-08d961c27f17\r\n- **Build**: 20220412.5\r\n- **Date Produced**: April 12, 2022 10:19:30 PM UTC\r\n- **Commit**: 1a6b24397e50146d0fece9cfb9c0b87275691e6f\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 6.0.0-beta.22122.7 to 6.0.0-beta.22212.5][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.22122.7 to 6.0.0-beta.22212.5][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 6.0.0-beta.22122.7 to 6.0.0-beta.22212.5][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 6.0.0-beta.22122.7 to 6.0.0-beta.22212.5][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.22122.7 to 6.0.0-beta.22212.5][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/7215d82...1a6b243\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates sdk.version to 6.0.104\r\n  - Updates tools.dotnet to 6.0.104\r\n\r\n[marker]: <> (End:64ecc23e-064a-456b-da03-08d961c27f17)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6427)","Url":"https://github.com/dotnet/wpf/pull/6427","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#6427)"},{"Id":"1203424813","IsPullRequest":true,"CreatedAt":"2022-04-13T15:24:32","Actor":"dotnet-maestro[bot]","Number":"6425","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f6560d32-4c6b-4ed3-5c71-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: f6560d32-4c6b-4ed3-5c71-08d72a4d3f20\r\n- **Build**: 20220412.4\r\n- **Date Produced**: April 12, 2022 11:02:32 PM UTC\r\n- **Commit**: 110afd89a939ac6476282e27d7290583ad3b1715\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat**: [from 1.0.0-beta.22159.6 to 1.0.0-beta.22212.4][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.22159.6 to 1.0.0-beta.22212.4][1]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 1.0.0-beta.22159.6 to 1.0.0-beta.22212.4][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 1.0.0-beta.22159.6 to 1.0.0-beta.22212.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 2.0.0-beta.22159.6 to 2.0.0-beta.22212.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/aebcd10...110afd8\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates tools.dotnet to 3.1.418\r\n\r\n[marker]: <> (End:f6560d32-4c6b-4ed3-5c71-08d72a4d3f20)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6425)","Url":"https://github.com/dotnet/wpf/pull/6425","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#6425)"},{"Id":"1203427142","IsPullRequest":false,"CreatedAt":"2022-04-13T15:01:05","Actor":"wstaelens","Number":"6426","RawContent":null,"Title":"Remove ArrayLists from WPF / XPS to improve code and performance","State":"open","Body":"https://github.com/dotnet/wpf/blob/89d172db0b7a192de720c6cfba5e28a1e7d46123/src/Microsoft.DotNet.Wpf/src/ReachFramework/AlphaFlattener/Primitive.cs#L1999\r\n\r\nArrayList? why not List<Primitive>?\r\n\r\nhttps://github.com/dotnet/wpf/blob/89d172db0b7a192de720c6cfba5e28a1e7d46123/src/Microsoft.DotNet.Wpf/src/ReachFramework/AlphaFlattener/Flattener.cs#L101\r\n\r\nhttps://github.com/dotnet/wpf/blob/89d172db0b7a192de720c6cfba5e28a1e7d46123/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Markup/XamlStream.cs#L577\r\n\r\nhttps://github.com/dotnet/wpf/search?l=C%23&q=arraylist\r\n\r\n**all versions**","Url":"https://github.com/dotnet/wpf/issues/6426","RelatedDescription":"Open issue \"Remove ArrayLists from WPF / XPS to improve code and performance\" (#6426)"},{"Id":"1203406722","IsPullRequest":true,"CreatedAt":"2022-04-13T14:45:42","Actor":"wstaelens","Number":"6424","RawContent":null,"Title":"Update FixedDocument.cs","State":"open","Body":"ArrayLists... really? 😢\r\n\r\nFixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6424)","Url":"https://github.com/dotnet/wpf/pull/6424","RelatedDescription":"Open PR \"Update FixedDocument.cs\" (#6424)"},{"Id":"1203344350","IsPullRequest":true,"CreatedAt":"2022-04-13T14:25:04","Actor":"dotnet-maestro[bot]","Number":"6419","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220413.1\r\n- **Date Produced**: April 13, 2022 1:33:05 PM UTC\r\n- **Commit**: 8dfd08de957e7e2b8f697c816032285fdf1dcf0f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.4.22212.7 to 7.0.0-preview.4.22213.1][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.4.22212.7 to 7.0.0-preview.4.22213.1][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/734bf64...8dfd08d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6419)","Url":"https://github.com/dotnet/wpf/pull/6419","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6419)"},{"Id":"1203372678","IsPullRequest":true,"CreatedAt":"2022-04-13T14:20:49","Actor":"wstaelens","Number":"6423","RawContent":null,"Title":"Update FixedPage.cs","State":"open","Body":"code improvements + unneeded casts and remove of arraylist\r\n\r\nFixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6423)","Url":"https://github.com/dotnet/wpf/pull/6423","RelatedDescription":"Open PR \"Update FixedPage.cs\" (#6423)"},{"Id":"1203353400","IsPullRequest":true,"CreatedAt":"2022-04-13T14:06:51","Actor":"wstaelens","Number":"6422","RawContent":null,"Title":"Update FixedPageProcessor.cs","State":"open","Body":"Fixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6422)","Url":"https://github.com/dotnet/wpf/pull/6422","RelatedDescription":"Open PR \"Update FixedPageProcessor.cs\" (#6422)"},{"Id":"1203353341","IsPullRequest":true,"CreatedAt":"2022-04-13T14:06:48","Actor":"wstaelens","Number":"6421","RawContent":null,"Title":"Update RenderOptions.cs","State":"open","Body":"Fixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6421)","Url":"https://github.com/dotnet/wpf/pull/6421","RelatedDescription":"Open PR \"Update RenderOptions.cs\" (#6421)"},{"Id":"1203353278","IsPullRequest":true,"CreatedAt":"2022-04-13T14:06:45","Actor":"wstaelens","Number":"6420","RawContent":null,"Title":"Update XmlAttributeProperties.cs","State":"open","Body":"Fixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6420)","Url":"https://github.com/dotnet/wpf/pull/6420","RelatedDescription":"Open PR \"Update XmlAttributeProperties.cs\" (#6420)"},{"Id":"1203334418","IsPullRequest":true,"CreatedAt":"2022-04-13T13:52:30","Actor":"wstaelens","Number":"6418","RawContent":null,"Title":"Update AutomationProperties.cs","State":"open","Body":"code cleanup\r\n\r\nFixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6418)","Url":"https://github.com/dotnet/wpf/pull/6418","RelatedDescription":"Open PR \"Update AutomationProperties.cs\" (#6418)"},{"Id":"1203242969","IsPullRequest":true,"CreatedAt":"2022-04-13T13:02:03","Actor":"dotnet-maestro[bot]","Number":"6417","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220412.2\r\n- **Date Produced**: April 12, 2022 6:41:37 PM UTC\r\n- **Commit**: 2e24ed0bdbd4e3b42c296503955c837bb0b08372\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22211.6 to 7.0.0-beta.22212.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22211.6 to 7.0.0-beta.22212.2][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22211.6 to 7.0.0-beta.22212.2][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22211.6 to 7.0.0-beta.22212.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22211.6 to 7.0.0-beta.22212.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/d2715c6...2e24ed0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6417)","Url":"https://github.com/dotnet/wpf/pull/6417","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6417)"},{"Id":"1203222320","IsPullRequest":false,"CreatedAt":"2022-04-13T12:18:00","Actor":"KMZeiseBTAC","Number":"6416","RawContent":null,"Title":"Resources used in ListBox ItemTemplate not properly loaded","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`) 5.0.16 \r\n* Windows version: (`winver`)   21H1 19043.1645\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? If yes, please file the issue via the instructions [here](https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019).\r\n  No, interestingly the XAML Designer does not show the problem \r\n* Security issues and bugs should be reported privately, learn more via our [responsible disclosure guidelines](https://github.com/dotnet/wpf/blob/main/README.md#reporting-security-issues-and-security-bugs).\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/main/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nWhen I load a &lt;Rectangle&gt; as a resource to display inside a button, which is used inside the item template for the list box, the rectangle is only displayed for the last item in the list. It should be shown on all items.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nWhen running the example below, I see\r\n![Example for list box output](https://user-images.githubusercontent.com/98807064/163175907-23d87e85-56a1-4ee3-8fc8-546a451bafb6.png)\r\n\r\nOn the left the rectangle loaded via a resource, and on the right the directly specified rectangle. Both sides should be the same, but are not.\r\n \r\n **Expected behavior:**\r\n \r\n **Minimal repro:**\r\nFor MainWindow.xaml, in a standard WPF App generated via Visual Studio,\r\n``` \r\n  <Window.Resources>\r\n    <LinearGradientBrush x:Key=\"GreenBackground\" StartPoint=\"0,0\" EndPoint=\"0,1\">\r\n      <GradientStop Color=\"#FFE4F9F2\" Offset=\"0\"/>\r\n      <GradientStop Color=\"#FFA2F1D7\" Offset=\"2.5\"/>\r\n    </LinearGradientBrush>\r\n    <Rectangle Width=\"16\" Height=\"16\" x:Key=\"Icon-Green\" Fill=\"{StaticResource GreenBackground}\"/>\r\n  </Window.Resources>\r\n  <Grid>\r\n    <ListBox Name=\"lstDemo\" Margin=\"2,29,2,0\">\r\n      <ListBox.ItemTemplate>\r\n        <DataTemplate>\r\n          <Grid Margin=\"4\">\r\n            <Grid.ColumnDefinitions>\r\n              <ColumnDefinition Width=\"Auto\"/>\r\n              <ColumnDefinition Width=\"Auto\"/>\r\n            </Grid.ColumnDefinitions>\r\n            <Button Content=\"{StaticResource Icon-Green}\" Width=\"40\" Height=\"24\" Margin=\"2\"/>\r\n            <Button Width=\"40\" Height=\"24\" Margin=\"2\" Grid.Column=\"1\">\r\n              <Rectangle Width=\"16\" Height=\"16\" Fill=\"{StaticResource GreenBackground}\"/>\r\n            </Button>\r\n          </Grid>\r\n        </DataTemplate>\r\n      </ListBox.ItemTemplate>\r\n    </ListBox>\r\n  </Grid>\r\n```\r\nand in MainWindow.xaml.cs\r\n```       \r\n        public MainWindow() {\r\n            InitializeComponent();\r\n            lstDemo.ItemsSource = new int[] { 1, 2, 3, 4, 5, 6 };\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/wpf/issues/6416","RelatedDescription":"Open issue \"Resources used in ListBox ItemTemplate not properly loaded\" (#6416)"},{"Id":"1203210562","IsPullRequest":false,"CreatedAt":"2022-04-13T12:07:49","Actor":"lindexi","Number":"6415","RawContent":null,"Title":"The first point in StylusPlugin is wrong when use the high DPI","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Windows version: (`winver`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? If yes, please file the issue via the instructions [here](https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019).\r\n* Security issues and bugs should be reported privately, learn more via our [responsible disclosure guidelines](https://github.com/dotnet/wpf/blob/main/README.md#reporting-security-issues-and-security-bugs).\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/main/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nAfter https://github.com/dotnet/wpf/pull/2891 , we call calculate the point with `stylusDevice.CriticalActiveSource`. But the  `stylusDevice.CriticalActiveSource` must be null when first touch down, because the wpf do not touch any element and do not get the AcitveSource before first touch down.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nAll of the StylusPlugin will reviece the wrong coordinate point.\r\n \r\n **Expected behavior:**\r\n\r\nThese points can be calculated correctly.\r\n \r\n **Minimal repro:**\r\n\r\nCreate an emtpy WPF project and add the StylusPlugin and then output the point received.\r\n\r\ncc @rladuca @singhashish-wpf ","Url":"https://github.com/dotnet/wpf/issues/6415","RelatedDescription":"Open issue \"The first point in StylusPlugin is wrong when use the high DPI\" (#6415)"},{"Id":"1203185856","IsPullRequest":true,"CreatedAt":"2022-04-13T11:43:44","Actor":"wstaelens","Number":"6414","RawContent":null,"Title":"Update XpsImageSerializationService.cs","State":"open","Body":"clean code improvements\r\n\r\nFixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6414)","Url":"https://github.com/dotnet/wpf/pull/6414","RelatedDescription":"Open PR \"Update XpsImageSerializationService.cs\" (#6414)"},{"Id":"1203174797","IsPullRequest":true,"CreatedAt":"2022-04-13T11:33:25","Actor":"wstaelens","Number":"6413","RawContent":null,"Title":"Update BitmapFrame.cs","State":"open","Body":"using nameof()\r\n\r\nFixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6413)","Url":"https://github.com/dotnet/wpf/pull/6413","RelatedDescription":"Open PR \"Update BitmapFrame.cs\" (#6413)"},{"Id":"1203135526","IsPullRequest":false,"CreatedAt":"2022-04-13T10:55:41","Actor":"IAmTheCShark","Number":"6412","RawContent":null,"Title":"Dispatcher MemoryLeak","State":"open","Body":"When investigating a memory leak using a process dump from a client, I noticed that there are lots of Dispatchers\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/20905599/163154167-f171d5d4-016a-46ab-a044-e2a4c9502c75.png)\r\n\r\nWhen you take a close look on the first screenshot at paths to root it looks like Dispatchers are holding references of each other.\r\nTo my understanding a Dispatcher is connected to a Thread, so how can this happen? \r\n\r\n\r\n\r\n\r\n\r\nThe actual problem is that those dispatchers seem to hold lots of references\r\n\r\n![image](https://user-images.githubusercontent.com/20905599/163164937-7eab28c3-dd20-4bba-85ab-7a1be58a5804.png)\r\n![image](https://user-images.githubusercontent.com/20905599/163165000-ca808591-3dfe-4ad5-8d08-88384e897492.png)\r\n![image](https://user-images.githubusercontent.com/20905599/163165015-cb0cf8bd-a0e1-454d-80cd-e98c97cf50ba.png)\r\n\r\n\r\n\r\nSadly I do not know how to reproduce this, I only have the process dump (3.5 GB).\r\nThe Application uses lots of FlowDocuments and some WindowsFormsHosts.\r\n\r\nObserved in .net 4.8 on a TerminalServer without RemoteGFX (software rendering).\r\n![image](https://user-images.githubusercontent.com/20905599/163165206-96a3b3ee-27e2-4179-b99d-0a77374663fd.png)\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/6412","RelatedDescription":"Open issue \"Dispatcher MemoryLeak\" (#6412)"},{"Id":"1203104585","IsPullRequest":false,"CreatedAt":"2022-04-13T10:27:14","Actor":"dxh-sc","Number":"6411","RawContent":null,"Title":".net 6: WriteableBitmap performance lower than Net framework 4.8.","State":"open","Body":"* .NET Core Version: .net6\r\n* Windows version: win10 or win11\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?  No\r\n\r\n!!!Upgrade project to Net6, the test found this problem.\r\n\r\nwhen i use WriteableBitmap to display video frame, will cost 70-90 ms with .net6, but if i use .net48, have no this issue.\r\nthe frame size is 1920x1080.\r\n\r\n _element?.Dispatcher?.Invoke(() =>\r\n                {\r\n                    _frameBitmap.Lock();\r\n                    Extension.CopyMemory(_backBufferPointer, frameInfo.data, (uint)frameInfo.frameSize);\r\n                    _frameBitmap.AddDirtyRect(_int32Rect); \r\n                    _frameBitmap.Unlock(); \r\n                }, DispatcherPriority.Send);\r\n \r\nwill call this method in another thread.\r\n\r\nso is it possible to have a fix? at least the performance should be higher\r\n\r\nor maybe there's something wrong with my way?\r\n\r\n\r\n\r\nThanks.","Url":"https://github.com/dotnet/wpf/issues/6411","RelatedDescription":"Open issue \".net 6: WriteableBitmap performance lower than Net framework 4.8.\" (#6411)"},{"Id":"1202269413","IsPullRequest":true,"CreatedAt":"2022-04-13T06:02:10","Actor":"vseanreesermsft","Number":"6405","RawContent":null,"Title":"Merging internal commits for release/6.0","State":"closed","Body":"null\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6405)","Url":"https://github.com/dotnet/wpf/pull/6405","RelatedDescription":"Closed or merged PR \"Merging internal commits for release/6.0\" (#6405)"},{"Id":"1202736443","IsPullRequest":true,"CreatedAt":"2022-04-13T05:17:10","Actor":"huynhit24","Number":"6408","RawContent":null,"Title":"Configs","State":"closed","Body":"Fixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6408)","Url":"https://github.com/dotnet/wpf/pull/6408","RelatedDescription":"Closed or merged PR \"Configs\" (#6408)"},{"Id":"1202750476","IsPullRequest":true,"CreatedAt":"2022-04-13T05:13:02","Actor":"dotnet-maestro[bot]","Number":"6409","RawContent":null,"Title":"[release/6.0] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:934472a4-9da1-4b66-da04-08d961c27f17)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 934472a4-9da1-4b66-da04-08d961c27f17\r\n- **Build**: 20220412.1\r\n- **Date Produced**: April 13, 2022 4:24:04 AM UTC\r\n- **Commit**: 88ff411715df6da3c1e6c789496f83042b470d3a\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-rtm.22207.2 to 6.0.0-rtm.22212.1][1]\r\n\r\n[1]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC88ff411&targetVersion=GC88ff411&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:934472a4-9da1-4b66-da04-08d961c27f17)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6409)","Url":"https://github.com/dotnet/wpf/pull/6409","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#6409)"},{"Id":"1202688772","IsPullRequest":false,"CreatedAt":"2022-04-13T03:04:00","Actor":"tryashtar","Number":"6407","RawContent":null,"Title":"TreeView slower than the Winforms version","State":"open","Body":"* .NET Core Version: `6.0.200`\r\n* Windows version: `22H2 (OS Build 22593.1)`\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?\r\n  * Sorry, I don't have that option for some reason :(. And yes I have it installed. \r\n![image](https://user-images.githubusercontent.com/26075577/163089142-b5df4b44-5310-4f28-8fc8-93e3a55698c0.png) ![image](https://user-images.githubusercontent.com/26075577/163089270-b0e9c3b9-5a74-4a2c-8ca5-56833655f89a.png)\r\n \r\n **Problem description:**\r\nWhen expanding nodes, the WPF `TreeView` takes longer to load than the WinForms one does.\r\n \r\n **Minimal repro:**\r\nI've attached a very small project for reproducing this.\r\n[TreeViewComparison.zip](https://github.com/dotnet/wpf/files/8477829/TreeViewComparison.zip)\r\nOn the left is a WPF `TreeView`, on the right is a WinForms `TreeView` wrapped in `WindowsFormsHost`. Both are prepopulated with an identical bunch of nested nodes. Click the WPF text to run `root.ExpandSubtree()`, and click the WinForms text to run `root.ExpandAll()`. Click the text, not the expand arrows, since that will just open one layer.\r\n![image](https://user-images.githubusercontent.com/26075577/163090457-5f3c5a5c-4776-4a09-a3c7-648a95af753e.png)\r\nHere I've copied the two relevant files from the solution:\r\n<details>\r\n  <summary><code>MainWindow.xaml</code></summary>\r\n  \r\n  ```xaml\r\n  <Window x:Class=\"TreeViewComparison.MainWindow\"\r\n          xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n          xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n          xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n          xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n          xmlns:local=\"clr-namespace:TreeViewComparison\"\r\n          xmlns:wf=\"clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms\"\r\n          mc:Ignorable=\"d\"\r\n          Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n      <Grid>\r\n          <Grid.ColumnDefinitions>\r\n              <ColumnDefinition/>\r\n              <ColumnDefinition/>\r\n          </Grid.ColumnDefinitions>\r\n          <TreeView x:Name=\"WPFTree\" Grid.Column=\"0\"/>\r\n          <WindowsFormsHost Grid.Column=\"1\">\r\n              <wf:TreeView x:Name=\"WinFormsTree\"/>\r\n          </WindowsFormsHost>\r\n      </Grid>\r\n  </Window>\r\n  ```\r\n</details>\r\n\r\n<details>\r\n  <summary><code>MainWindow.xaml.cs</code></summary>\r\n  \r\n  ```cs\r\n  using System.Windows;\r\n  using System.Windows.Controls;\r\n  using System.Windows.Forms;\r\n  \r\n  namespace TreeViewComparison;\r\n  \r\n  public partial class MainWindow : Window\r\n  {\r\n      public MainWindow()\r\n      {\r\n          InitializeComponent();\r\n          var wpf_root = new TreeViewItem() { Header = \"Click to expand WPF nodes\" };\r\n          var win_root = new TreeNode(\"Click to expand WinForms nodes\");\r\n          WPFTree.Items.Add(wpf_root);\r\n          WinFormsTree.Nodes.Add(win_root);\r\n          AddGenerations(wpf_root, 5, 5);\r\n          AddGenerations(win_root, 5, 5);\r\n          wpf_root.Selected += (s, e) => wpf_root.ExpandSubtree();\r\n          WinFormsTree.AfterSelect += (s, e) => win_root.ExpandAll();\r\n      }\r\n  \r\n      private void AddGenerations(TreeViewItem item, int children, int generations)\r\n      {\r\n          for (int i = 0; i < children; i++)\r\n          {\r\n              var child = new TreeViewItem() { Header = $\"Child #{i + 1}\" };\r\n              item.Items.Add(child);\r\n              if (generations > 0)\r\n                  AddGenerations(child, children, generations - 1);\r\n          }\r\n      }\r\n  \r\n      private void AddGenerations(TreeNode item, int children, int generations)\r\n      {\r\n          for (int i = 0; i < children; i++)\r\n          {\r\n              var child = new TreeNode($\"Child #{i + 1}\");\r\n              item.Nodes.Add(child);\r\n              if (generations > 0)\r\n                  AddGenerations(child, children, generations - 1);\r\n          }\r\n      }\r\n  }\r\n  ```\r\n</details>\r\n\r\n\r\n **Expected behavior:**\r\nWPF should be as fast as, if not faster than, WinForms at loading `TreeView` nodes.\r\n\r\n **Actual behavior:**\r\nThe WPF `TreeView` takes significantly longer to finish. On my computer, the WinForms view fully expands in about 8 seconds, while the WPF view takes a staggering 62 seconds. Honestly, both of these are unacceptably slow.\r\n\r\n---\r\n\r\nI am new to this repository and WPF in general so please let me know if I did anything wrong, and thank you for your work! :)","Url":"https://github.com/dotnet/wpf/issues/6407","RelatedDescription":"Open issue \"TreeView slower than the Winforms version\" (#6407)"},{"Id":"1202402100","IsPullRequest":true,"CreatedAt":"2022-04-12T21:46:27","Actor":"dotnet-maestro[bot]","Number":"6406","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220412.7\r\n- **Date Produced**: April 12, 2022 8:56:48 PM UTC\r\n- **Commit**: 734bf64715498a14239bb4a09437247363506831\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.4.22212.2 to 7.0.0-preview.4.22212.7][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.4.22212.2 to 7.0.0-preview.4.22212.7][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/b151ab0...734bf64\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6406)","Url":"https://github.com/dotnet/wpf/pull/6406","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6406)"},{"Id":"1202223800","IsPullRequest":true,"CreatedAt":"2022-04-12T18:43:56","Actor":"dotnet-maestro[bot]","Number":"6402","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220412.2\r\n- **Date Produced**: April 12, 2022 5:45:51 PM UTC\r\n- **Commit**: b151ab0e687ccef77f5cb1c334f42f5e14197fa1\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.4.22212.1 to 7.0.0-preview.4.22212.2][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.4.22212.1 to 7.0.0-preview.4.22212.2][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/5344033...b151ab0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/wpf/pull/6402)","Url":"https://github.com/dotnet/wpf/pull/6402","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6402)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-04-15T03:30:30.6872519Z","RunDurationInMilliseconds":544}