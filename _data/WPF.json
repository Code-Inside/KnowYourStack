{"Data":{"GitHub":{"Issues":[{"Id":"637876112","IsPullRequest":false,"CreatedAt":"2020-06-12T16:34:19","Actor":"teh173","Number":"3135","RawContent":null,"Title":"WPF window and images take massive amount of memory compared to UWP","State":"open","Body":"* .NET Core Version: 3.1.300\r\n* Windows version: 19041.329, but also reproducible in earlier versions\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n \r\nA WPF window and image seem to take a massive amount of memory compared to an equivalently sized window in UWP.\r\n\r\nPossibly related issues:\r\n- https://developercommunity.visualstudio.com/content/problem/724609/wpf-window-memory-usage-is-high-on-big-screens-on.html\r\n- we are also seeing this error in some crash data, but haven't been able to reproduce in-house, so not clear if it is related  https://github.com/dotnet/wpf/issues/128\r\nSystem.OutOfMemoryException: Insufficient memory to continue the execution of the program.\r\n   at MS.Internal.HRESULT.Check(int hr)\r\n   at System.Windows.Media.Composition.DUCE+Channel.SyncFlush()\r\n- I noticed encountering this issue as well, when resizing a WPF window, the Dedicated GPU usage column continually goes up in Task Manager. I guess it's a Task Manager bug but I'm wondering why it's manifested by WPF here.\r\nhttps://support.microsoft.com/en-us/help/4490156/windows-10-1709-gpu-process-memory-counters-report-incorrect-values\r\nAlso see a lot of page faults.\r\n\r\n **Minimal repro:**\r\n\r\nTest apps for WPF and UWP\r\n\r\n[WindowMemoryTestApps.zip](https://github.com/dotnet/wpf/files/4771955/WindowMemoryTestApps.zip)\r\n\r\n1. Create a window\r\n2. (optional) Add an image element at the size of the screen. It just increases the memory usage even further than a blank window alone\r\n3. Resize the window to multiple monitors ( for example, 2 4Ks, or 1 4K monitor and other sized monitors)\r\n\r\nCompare the memory usage in WPF vs. UWP\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nOn my monitor setup with 7495 x 4440 virtual screen pixels, for WPF, sizing a window to that size takes around\r\n![image](https://user-images.githubusercontent.com/5522385/84521894-b1272200-aca3-11ea-824a-f4e362600a82.png)\r\n\r\nThis is what a similar setup looks like in UWP.\r\n![image](https://user-images.githubusercontent.com/5522385/84523071-b2f1e500-aca5-11ea-807b-339d01d4d2f8.png)\r\n\r\n **Expected behavior:**\r\nI would expect the behavior closer to UWP.  I would expect say a (3840 x 2160 x 4 bytes per pixel) * 2 monitor setup to take 66,355,200 bytes, but WPF seems to be using many multiples of that.  \r\n\r\nIs this just an architectural limitation in WPF, or a bug?\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/3135","RelatedDescription":"Open issue \"WPF window and images take massive amount of memory compared to UWP\" (#3135)"},{"Id":"637783246","IsPullRequest":false,"CreatedAt":"2020-06-12T14:16:32","Actor":"Noemata","Number":"3134","RawContent":null,"Title":"Permission to publish Surface SDK source code.","State":"open","Body":"As mentioned here: https://github.com/dotnet/wpf/issues/118\r\n\r\nI would like to get permission to publish the reverse engineered source code for the WPF Surface SDK.  A lot of very valuable code is currently out of reach that would be very beneficial to the WPF user community.\r\n\r\nCan someone from Microsoft please provide some sort of legal waver for this?  It's a much better starting point than nothing.","Url":"https://github.com/dotnet/wpf/issues/3134","RelatedDescription":"Open issue \"Permission to publish Surface SDK source code.\" (#3134)"},{"Id":"637737279","IsPullRequest":true,"CreatedAt":"2020-06-12T13:32:12","Actor":"dotnet-maestro[bot]","Number":"3133","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200612.2\r\n- **Date Produced**: 6/12/2020 12:58 PM\r\n- **Commit**: cedbac7844a828fd4b97bad17a51fdde83726b1f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: from 5.0.0-preview.7.20311.2 to 5.0.0-preview.7.20312.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3133","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#3133)"},{"Id":"637717844","IsPullRequest":false,"CreatedAt":"2020-06-12T12:33:26","Actor":"miloush","Number":"3132","RawContent":null,"Title":"Local testing missing packages","State":"open","Body":"I am trying to test a local WPF build, but since it involves changes in public API, I need the sample app to use the new references rather than replacing published binaries.\r\n\r\nI tried to follow the [Developer Guide](https://github.com/dotnet/wpf/blob/master/Documentation/developer-guide.md), basically:\r\n\r\n1. forking and cloning the wpf repo\r\n2. importing wpf.vsconfig\r\n3. installing latest .NET Core SDK (5.0.100-preview.5.20279.10 from dotnet.microsoft.com)\r\n4. running `build` from command line, that succeeded\r\n5. running `bulid -test` from administrator command line, that failed, see below\r\n6. changing the code\r\n7. running `build -package`, that succeeded (created 5 files `.nupkg` after build)\r\n8. created a new WPF App (.NET Core)\r\n9. added the `<PropertyGroup>` and `<ItemGroup>`  with `WpfRepoRoot` etc. from _Testing API changes_ section of the _Developer Guide_ at the end of the .csproj file\r\n\r\nStill, the Visual Studio does not seem to be using the custom build (does not compile against the API changes). What I noticed is that\r\n\r\n```xml\r\n<ReferenceCopyLocalPaths Include=\"$(WpfRepoRoot)\\artifacts\\packaging\\$(WpfConfig)\\Microsoft.DotNet.Wpf.GitHub\\lib\\$(RuntimeIdentifier)\\*.dll\" />`\r\n```\r\n\r\ndoes not exist. there is only _netcoreapp5.0_ folder under the _lib_ folders.\r\n\r\nAnother suspicious thing is the beginning of the `build` output, which looks like this:\r\n```\r\nC:\\Users\\User\\Source\\WPF>build -pack\r\nProcessing C:\\Users\\User\\Source\\WPF\\global.json\r\nstrawberry-perl was not found in .\r\nnet-framework-48-ref-assemblies was not found in .\r\ndotnet-api-docs_netcoreapp3.0 was not found in .\r\nmsvcurt-c1xx was not found in .\r\nnet-framework-472-iltools was not found in .\r\nNative tools bootstrap failed\r\nDetecting WPF Git hooks...\r\nDetected existing WPF Git pre-commit hook.\r\nProcessing C:\\Users\\User\\Source\\WPF\\eng\\..\\global.json\r\nstrawberry-perl was not found in .\r\nnet-framework-48-ref-assemblies was not found in .\r\ndotnet-api-docs_netcoreapp3.0 was not found in .\r\nmsvcurt-c1xx was not found in .\r\nnet-framework-472-iltools was not found in .\r\nNative tools bootstrap failed\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\msbuild.exe ...\r\n```\r\n\r\nNot sure if that is OK or not.\r\n\r\nPossibly related, the `build -test` is failing with\r\n```\r\n...\r\n  PresentationFramework.Aero -> C:\\Users\\User\\Source\\WPF\\artifacts\\bin\\PresentationFramework.Aero\\Debug\\netcoreapp5.0\\PresentationFramework.Aero.dll\r\n  The system cannot find the path specified.\r\nC:\\Users\\User\\Source\\WPF\\eng\\WpfArcadeSdk\\tools\\RunDrtsLocal.targets(10,5): error MSB3073: The command \"C:\\Users\\User\\Source\\WPF\\\\artifacts\\test\\Debug\\x86\\runte\r\nsts.cmd\" exited with code 3. [C:\\Users\\User\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\5.0.0-beta.20309.1\\tools\\AfterSolutionBuild.proj]\r\n\r\nBuild FAILED.\r\n```\r\n\r\nWhat did I miss?","Url":"https://github.com/dotnet/wpf/issues/3132","RelatedDescription":"Open issue \"Local testing missing packages\" (#3132)"},{"Id":"637521581","IsPullRequest":true,"CreatedAt":"2020-06-12T06:38:00","Actor":"dotnet-maestro[bot]","Number":"3131","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200612.1\r\n- **Date Produced**: 6/13/2020 12:31 AM\r\n- **Commit**: d7a88d8be41aec9bbd60626cb701fb3c8681b284\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms**: from 5.0.0-preview.7.20311.7 to 5.0.0-preview.7.20312.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3131","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/winforms\" (#3131)"},{"Id":"637515681","IsPullRequest":true,"CreatedAt":"2020-06-12T06:37:11","Actor":"dotnet-maestro[bot]","Number":"3130","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200611.7\r\n- **Date Produced**: 6/12/2020 6:12 AM\r\n- **Commit**: 2343c3b1c43507fe60f07df1d62baa25ec996ee8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms**: from 5.0.0-preview.7.20311.5 to 5.0.0-preview.7.20311.7\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3130","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#3130)"},{"Id":"637484958","IsPullRequest":true,"CreatedAt":"2020-06-12T05:15:37","Actor":"dotnet-maestro[bot]","Number":"3129","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200611.5\r\n- **Date Produced**: 6/12/2020 4:25 AM\r\n- **Commit**: 38b608ecd8cf587c89af49cb0853fdca143c3b46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms**: from 5.0.0-preview.7.20311.4 to 5.0.0-preview.7.20311.5\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3129","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#3129)"},{"Id":"637476523","IsPullRequest":true,"CreatedAt":"2020-06-12T04:58:59","Actor":"dotnet-maestro[bot]","Number":"3128","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **System.CodeDom**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **System.Diagnostics.EventLog**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **System.DirectoryServices**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **System.Drawing.Common**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.AccessControl**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Cryptography.Xml**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Permissions**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Principal.Windows**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **System.Windows.Extensions**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **System.IO.Packaging**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **System.Resources.Extensions**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200611.4\r\n- **Date Produced**: 6/12/2020 4:23 AM\r\n- **Commit**: f5b8fcc2280a28c75486776f46ed2fa4335aa5e1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms**: from 5.0.0-preview.7.20309.5 to 5.0.0-preview.7.20311.4\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.DirectoryServices**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.IO.Packaging**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20311.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3128","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#3128)"},{"Id":"637376161","IsPullRequest":false,"CreatedAt":"2020-06-11T23:16:12","Actor":"vsfeedback","Number":"3127","RawContent":null,"Title":"DragLeave event delivering wrong value for 'e.GetPosition(...)'","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/635146/dragleave-event-delivering-wrong-value-for-egetpos.html)._\n\n---\n<p>While doing Drag'n'Drop I tried to use the DragLeave event to determine, if mouse has left the my control. Problem is, that the DragLeave event is also fired, if mouse leaves toward a child visual of my control but does not leave my control's boundaries at all.</p> <p>Trying to use the 'getPosition(sender...)' method from DragEventArgs does not return a Point value related to my control, but rather a Point value related to the control it entered while leaving my control.</p> <p><strong>I would expect a value, that signals that it is out of bounds of the left control, e.g. negative values for leaving toward left and top and positive values greater than width/height for leaving the control toward bottom and right.</strong></p>\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 7/8/2019, 02:43 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Marie Shi [MSFT] on 7/8/2019, 07:31 PM: \n\n<p>Dear Customer,</p>\n<p>Thank you for your feedback! I am unable to reproduce your problem.<br>\nFor us to investigate this further, could you please provide your detail reproduce steps, sample app to reproduce this issue? We look forward to hearing from you!</p>\n<p>Thanks,<br>\nMarie</p>\n\n#### Sven Kämpf on 7/22/2019, 07:31 AM: \n\n<p>Hello Marie,</p><p>thank you very much for your answer and please excuse my late response (vacation offline :o) ).</p><p>Please find attached a sample app to show you the issue (<a target='_blank' href=\"https://developercommunity.visualstudio.com/storage/temp/84375-dragleaveissuereproductionapp.tar.gz\">dragleaveissuereproductionapp.tar.gz).<br></a></p><p>In that sample app I created a rectangle within a canvas. You can drag the rectangle towards the canvas (using left mouse button). If you leave the rectangle's boundaries while dragging, the DragLeave event is fired and handled in the related handler in code-behind:</p><pre>private void Rectangle_OnPreviewDragLeave(object sender, DragEventArgs e)\n{\n    ...\n\n}</pre><p>Here I try to retrieve the relative position of the mouse pointer with:</p><pre>var givenPoint = e.GetPosition(sender as IInputElement);<br></pre><p>Furthermore I relocate the position of the text box (with name \"GetPositionValue\") to display the coords from the 'givenPoint' and set it's Text property to the 'givenPoint' value:</p><pre>Canvas.SetLeft(this.GetPositionValue, givenPoint.X);\nCanvas.SetTop(this.GetPositionValue, givenPoint.Y);\nthis.GetPositionValue.Text = givenPoint.ToString();<br></pre><p>As you can see (after dragging the rectangle towards the canvas), the textbox is located right at that point, where the mouse left the rectangle on the canvas.</p><p>That is, the point given by e.GetPosition(...) is relative to the Canvas(!), even if I gave the sender(i.e. the rectangle) as the InputElement. But the givenPoint's X-value for instance should be negative for leaving the rectangle to the left, etc. Otherwise in my opinion I can not decide, if the drag has left the rectangle's boundaries.</p><p>I hope that helped.</p><p>PS: I made the app very simple and short. Please ignore code style here.</p>\n\n#### Blair Wang [MSFT] on 7/22/2019, 07:38 AM: \n\nWe will close this report in 7 days because we don’t have enough information to investigate further. To keep the problem open, please provide the requested details.\n#### Visual Studio Feedback System on 7/23/2019, 03:01 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Sven Kämpf on 8/8/2019, 07:20 AM: \n\n<p>Hello there,</p><p>are there any news about this issue? Maybe workarounds or other ideas to avoid that DragLeave?</p>\n\n#### Sven Kämpf on 8/18/2019, 11:38 PM: \n\n<p>Hello again,</p><p>could you please tell me the status of my request or a timescale for the answer?</p>\n\n#### Visual Studio Feedback System on 10/8/2019, 02:21 AM: \n\nI have detected that for the last 35 days, this issue didn't have any product team activity and a very small amount of new votes or comments.&nbsp;Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.\n#### Sven Kämpf on 10/8/2019, 04:21 AM: \n\n<p>Why? It's essential for Drag&Drop? At least an explanation beside that probably automated Visual Studio Feedback System message would be nice!</p>\n\n\n---\n### Original Solutions\n\n#### Martin Zindler solved on 12/30/2019, 05:00 AM, 0 votes: \n\n<p>Hi,</p><p>Described in </p><p>https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.mouse.getposition</p><p>you may read the section <em>Remarks.<br></em></p><p><em>&gt;&gt;&gt;<br></em></p><p>... </p><p>During drag-and drop operations, the position of the mouse cannot be reliably determined through <a target='_blank' href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.mouse.getposition?view=netframework-4.8\">GetPosition</a>.  </p><p>This is because control of the mouse (possibly including capture) is  held by the originating element of the drag </p><p>until the drop is completed,  with much of the behavior controlled by underlying Win32 calls. </p><p>Try the  following approaches instead:</p><p> \n</p><ul><li>Call the <a target='_blank' href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.drageventargs.getposition?view=netframework-4.8\">GetPosition</a> method of the <a target='_blank' href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.drageventargs?view=netframework-4.8\">DragEventArgs</a> that is passed to the drag events (<a target='_blank' href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.contentelement.dragenter?view=netframework-4.8\">DragEnter</a>, <a target='_blank' href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.contentelement.dragover?view=netframework-4.8\">DragOver</a>, <a target='_blank' href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.contentelement.dragleave?view=netframework-4.8\">DragLeave</a>).</li><li>Call <a target='_blank' href=\"https://msdn.microsoft.com/library/default.asp?url=/library/winui/winui/windowsuserinterface/resources/cursors/cursorreference/cursorfunctions/getcursorpos.asp\">GetCursorPos</a>, using P/Invoke.</li></ul><p><em>&lt;&lt;&lt;<br></em></p><p>Another approach will be to use the <em>PreviewMouseMove </em>event.</p><p>kind regards // Martin</p>\n\n#### Sven Kämpf solved on 1/6/2020, 00:46 AM, 0 votes: \n\n<p>Hello Martin Zindler,</p><p>thank you very much for posting a solution to my issue.</p><p>I agree with you, that - using <a target='_blank' href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.mouse.getposition?view=netframework-4.8\" target=\"_blank\">Mouse.GetPosition(...)</a> isn't a good solution. That's why I didn't do it (see my post from july, 22). In my example I wrote \"e.GetPosition(...)\" where <em>e </em>is a variable containing the DragEventArgs.</p><p><strong>I still treat this issue as a bug in the Framework.<br></strong></p><p><strong><br></strong></p><p><em>For everybody looking for a workaround to use DragLeave:</em><br><strong></strong></p><p>Since the DragLeave event has another drawback(see below) I would recommend anyone asking me to use DragOver of a Parent in the VisualTree, since this is more reliable.</p><p>The other drawback of DragLeave is, that, if you move the mouse too fast over the border of the control you started to drag, the DragLeave event isn't fired sometimes (race condition?). Since this event is only fired once, that missing event distracted my whole application resulting in undefined state.</p><p>Using the DragOver event instead is more reliable, since this event is fired multiple times while moving the mouse and you can use a hit test to see, if you left your source control or not.</p><br>\n","Url":"https://github.com/dotnet/wpf/issues/3127","RelatedDescription":"Open issue \"DragLeave event delivering wrong value for 'e.GetPosition(...)'\" (#3127)"},{"Id":"637240448","IsPullRequest":true,"CreatedAt":"2020-06-11T19:47:40","Actor":"ryalanms","Number":"3126","RawContent":null,"Title":"Update branding for 3.1.6","State":"closed","Body":"Update branding for 3.1.6\r\n\r\nIncludes the merge from internal/release/3.1 (847da8feefa286affd3f458fc3fdcedcd0d93869) which resulted in no changes after resolving merge conflicts.  No MSRCs were taken for this release, so that is expected. ","Url":"https://github.com/dotnet/wpf/pull/3126","RelatedDescription":"Closed or merged PR \"Update branding for 3.1.6\" (#3126)"},{"Id":"637003007","IsPullRequest":true,"CreatedAt":"2020-06-11T14:19:54","Actor":"dotnet-maestro[bot]","Number":"3125","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200611.2\r\n- **Date Produced**: 6/11/2020 1:07 PM\r\n- **Commit**: 858c2a8ce5af2bde99004e1b9e1e6de1e535059d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: from 5.0.0-preview.7.20310.2 to 5.0.0-preview.7.20311.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3125","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#3125)"},{"Id":"636957927","IsPullRequest":true,"CreatedAt":"2020-06-11T12:32:53","Actor":"dotnet-maestro[bot]","Number":"3124","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 3a1d3bb6-c64d-406d-e8f4-08d648cf64cb\r\n- **Build**: 20200609.1\r\n- **Date Produced**: 6/9/2020 8:21 PM\r\n- **Commit**: 54d096ee50a9bcf7ac6efd16a07d51af651d20a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat**: from 5.0.0-beta.20280.1 to 5.0.0-beta.20309.1\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20280.1 to 5.0.0-beta.20309.1\r\n  - **Microsoft.DotNet.CodeAnalysis**: from 5.0.0-beta.20280.1 to 5.0.0-beta.20309.1\r\n  - **Microsoft.DotNet.GenAPI**: from 5.0.0-beta.20280.1 to 5.0.0-beta.20309.1\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20280.1 to 5.0.0-beta.20309.1\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3124","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3124)"},{"Id":"636890948","IsPullRequest":false,"CreatedAt":"2020-06-11T10:08:40","Actor":"xianyun666","Number":"3123","RawContent":null,"Title":"MessageBox control is fuzzy ","State":"open","Body":"* .NET Core Version: 5.0\r\n* Windows version: (Windows 2004)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n \r\n **Problem description:**\r\n I have two monitors,The second monitor MessageBox control is fuzzy \r\nThe first display，125% zoom，1920 * 1080 resolution.\r\nThe second display，100% zoom，1920 * 1080 resolution。\r\nAfter adding the parameter PerMonitorV2 in the app.manifest file, the message box shows fuzzy and abnormal.\r\nIf Microsoft.Windows.Common-Controls is enabled, also fuzzy .\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n After adding the parameter PerMonitorV2 in the app.manifest file, the message box shows fuzzy and abnormal\r\n **Expected behavior:**\r\n Normal display, no blur\r\n **Minimal repro:**\r\n![w1](https://user-images.githubusercontent.com/22339210/84372856-5abbd400-ac0e-11ea-9325-7560910aebb5.png)\r\n![w2](https://user-images.githubusercontent.com/22339210/84372861-5bed0100-ac0e-11ea-8b8b-f99a762ec780.png)\r\n\r\n[netcoreapp5.0.zip](https://github.com/dotnet/wpf/files/4764076/netcoreapp5.0.zip)\r\n","Url":"https://github.com/dotnet/wpf/issues/3123","RelatedDescription":"Open issue \"MessageBox control is fuzzy \" (#3123)"},{"Id":"636635388","IsPullRequest":false,"CreatedAt":"2020-06-11T00:35:30","Actor":"TrevorFellman-MSFT","Number":"3122","RawContent":null,"Title":"WPF should clean up temp dictionary files it creates when the app sets Custom Dictionaries on text controls","State":"open","Body":"* .NET Core Version: (5.0.100-preview.2.20176.6/.NET 4.5.2+)\r\n* Windows version: (Win 10 2004/Win8+`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n \r\n **Problem description:**\r\n This is an adoption problem moving from Win7 to Win10\r\nThis does not repro on Win7 with the old spellcheck libraries.\r\n\r\nwhen you add the same dictionary to every edit box in your app, a separate custom dictionary is registered for each one in %LocalAppData%\\Temp\\WPF, and causes perf issues, when we really just want all the edit boxes to use the same custom dictionary.\r\n\r\nWe can work around this issues by removing the code/xaml using WPF's custom dictionary support and instead using the Windows convention of putting in a *.dic file in %AppData%\\Microsoft\\Spelling with the app installer.\r\n\r\nrepro is as simple as...\r\n\r\nprivate void MainWindow_Loaded(object sender, RoutedEventArgs e)\r\n{\r\nStackPanel stackPanel = new StackPanel();\r\n\r\n        for (int i = 0; i < 100; i++)\r\n        {\r\n            var textBox = new TextBox();\r\n            textBox.Text = \"Hello World.\";\r\n            SpellCheck.SetIsEnabled(textBox, true);\r\n            var dictionaries = SpellCheck.GetCustomDictionaries(textBox);\r\n            dictionaries.Add(new Uri(@\"pack://application:,,,/WpfDictPerf;component/CustomDictionary.lex\"));\r\n           \r\n            stackPanel.Children.Add(textBox);\r\n        }\r\n\r\n        this.Content = stackPanel;\r\n    }\r\n\r\n\r\n **Actual behavior:** \r\n1. App takes many seconds longer to open\r\n2. a duplicate *.dic file is created for each textbox (even though the same spellchecker object is used, so one dictionary file applies to all TextBoxes)\r\n3. *.dic files may be leaked and not deleted, ever causing the system to run out of disk space over time\r\n \r\n **Expected behavior:**\r\n1. App opens as fast as if no custom dictionaries are used\r\n2. Only one new dictionary file is created\r\n3. Orphaned Files are cleaned up next time the app is run\r\n\r\n\r\n **Minimal repro:**\r\n[WpfDictPerf.zip](https://github.com/dotnet/wpf/files/4761906/WpfDictPerf.zip)\r\n\r\n1.  Run attached WPFDictPerf\r\n2.  Open %LocalAppData%\\Temp\\WPF\r\n3.  Stop debugging\r\n4.  Run WPFDictPerf again\r\n","Url":"https://github.com/dotnet/wpf/issues/3122","RelatedDescription":"Open issue \"WPF should clean up temp dictionary files it creates when the app sets Custom Dictionaries on text controls\" (#3122)"},{"Id":"636616759","IsPullRequest":false,"CreatedAt":"2020-06-10T23:48:29","Actor":"TrevorFellman-MSFT","Number":"3121","RawContent":null,"Title":"Adding Custom Dictionaries to WPF controls can cause perf issues by registering the same dictionary multiple times.","State":"open","Body":"This is an adoption problem moving from Win7 to Win10\r\nThis does not repro on Win7 with the old spellcheck libraries.\r\n\r\nwhen you add the same dictionary to every edit box in your app, a separate custom dictionary is registered for each one in  %LocalAppData%\\Temp\\WPF, and causes perf issues, when we really just want all the edit boxes to use the same custom dictionary.\r\n\r\nWe can work around this issues by removing the code/xaml using WPF's custom dictionary support and instead using the Windows convention of putting in a *.dic file in  %AppData%\\Microsoft\\Spelling with the app installer.\r\n\r\n\r\nrepro is as simple as...\r\n\r\nprivate void MainWindow_Loaded(object sender, RoutedEventArgs e)\r\n        {\r\n            StackPanel stackPanel = new StackPanel();\r\n\r\n            for (int i = 0; i < 100; i++)\r\n            {\r\n                var textBox = new TextBox();\r\n                textBox.Text = \"Hello World.\";\r\n                SpellCheck.SetIsEnabled(textBox, true);\r\n                var dictionaries = SpellCheck.GetCustomDictionaries(textBox);\r\n                dictionaries.Add(new Uri(@\"pack://application:,,,/WpfDictPerf;component/CustomDictionary.lex\"));\r\n               \r\n                stackPanel.Children.Add(textBox);\r\n            }\r\n\r\n            this.Content = stackPanel;\r\n        }\r\n\r\nAnd this may take 30+ seconds to open.\r\n\r\nPart of the problem is how WPF converts the *.lex file into a *.dic file for Windows.\r\n\r\nSteps to reproduce:\r\n=============\r\n[WpfDictPerf.zip](https://github.com/dotnet/wpf/files/4761762/WpfDictPerf.zip)\r\n\r\n1.  Run attached WPFDictPerf\r\n2.  Open %LocalAppData%\\Temp\\WPF\r\n\r\nExpected Results\r\n===========\r\n1. App opens as fast as if no custom dictionaries are used\r\n2. Only one new dictionary file is created\r\n\r\n\r\nActual Results\r\n=========\r\n1. App takes many seconds longer to open\r\n2. a duplicate *.dic file is created for each textbox (even though the same spellchecker object is used, so one dictionary file applies to all TextBoxes)\r\n","Url":"https://github.com/dotnet/wpf/issues/3121","RelatedDescription":"Open issue \"Adding Custom Dictionaries to WPF controls can cause perf issues by registering the same dictionary multiple times.\" (#3121)"},{"Id":"636609147","IsPullRequest":true,"CreatedAt":"2020-06-10T23:25:51","Actor":"ryalanms","Number":"3120","RawContent":null,"Title":".NET Core WPF Build error on custom BaseIntermediateOutputPath #1718","State":"open","Body":"Reviving the simplest of the proposed fixes for the BaseIntermediateOutputPath issue for comments.   (.NET standard's Path.GetRelativePath is one of the alternatives.)\r\n\r\nBuilding WPF applications using .NET Framework and .NET Core with various custom BaseIntermediateOutputPaths on different drives works as expected.  \r\n\r\nNote that PresentationBuildTasks.dll is built and consumed by both .NET Framework and .NET Core.   ","Url":"https://github.com/dotnet/wpf/pull/3120","RelatedDescription":"Open PR \".NET Core WPF Build error on custom BaseIntermediateOutputPath #1718\" (#3120)"},{"Id":"636236924","IsPullRequest":true,"CreatedAt":"2020-06-10T13:30:00","Actor":"dotnet-maestro[bot]","Number":"3119","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200610.2\r\n- **Date Produced**: 6/10/2020 1:04 PM\r\n- **Commit**: 63d7af8eb1af1cb88ab655ae02fde4e264b67d96\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: from 5.0.0-preview.7.20309.2 to 5.0.0-preview.7.20310.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3119","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#3119)"},{"Id":"635998496","IsPullRequest":true,"CreatedAt":"2020-06-10T07:32:39","Actor":"dotnet-maestro[bot]","Number":"3118","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200609.5\r\n- **Date Produced**: 6/10/2020 7:13 AM\r\n- **Commit**: 46f1d69fb11c8169ccb1859ef839569c02a6b4f4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms**: from 5.0.0-preview.7.20309.3 to 5.0.0-preview.7.20309.5\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3118","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#3118)"},{"Id":"635641524","IsPullRequest":true,"CreatedAt":"2020-06-10T00:00:18","Actor":"wli3","Number":"3111","RawContent":null,"Title":"Shuffle property location","State":"closed","Body":"Remake of https://github.com/dotnet/wpf/pull/2869 due to CI issues","Url":"https://github.com/dotnet/wpf/pull/3111","RelatedDescription":"Closed or merged PR \"Shuffle property location\" (#3111)"},{"Id":"635770808","IsPullRequest":true,"CreatedAt":"2020-06-09T21:27:56","Actor":"GrabYourPitchforks","Number":"3117","RawContent":null,"Title":"Remove custom copy of PtrToStringChars","State":"open","Body":"This PR removes WPF's custom implementation of `PtrToStringChars` in favor of the built-in version. The custom version was originally introduced to work around CAS performance issues. However, since Core did not bring any of the CAS infrastructure forward, there's no need for the custom copy.\r\n\r\nRelated: https://github.com/dotnet/runtime/issues/31406","Url":"https://github.com/dotnet/wpf/pull/3117","RelatedDescription":"Open PR \"Remove custom copy of PtrToStringChars\" (#3117)"},{"Id":"635674621","IsPullRequest":false,"CreatedAt":"2020-06-09T18:45:38","Actor":"SamBent","Number":"3116","RawContent":null,"Title":"WPF app crash in EnsureChildren() with Null Reference Exception","State":"open","Body":"Content in a list control (DataGrid, ListBox, etc.) is cleaned when leaving the visual tree.  In some circumstances, the cleaning can raise automation events, which causes COM to start a nested message pump.  If this happens to see a WM_SIZE message, the resulting layout pass and subsequent rebuild of the automation tree can happen while the visual tree is in a torn state (visual children lists in the process of being cleared can contain nulls).  Some automation peers aren't prepared for this, and NRE.\r\n\r\n[Port of servicing fix for .NET 4.7-4.8]","Url":"https://github.com/dotnet/wpf/issues/3116","RelatedDescription":"Open issue \"WPF app crash in EnsureChildren() with Null Reference Exception\" (#3116)"},{"Id":"635665385","IsPullRequest":false,"CreatedAt":"2020-06-09T18:29:10","Actor":"SamBent","Number":"3115","RawContent":null,"Title":"DocumentViewer cannot select all multi-line sentence of Japanese which is contained in one TextBox.","State":"open","Body":"When loading certain XPS documents, bugs in the construction of FixedPage's \"semantic object model\" lead to incorrect ordering of text runs, causing editing operations like selection and copy to omit part of the text or include it in the wrong order.\r\n\r\n[Port of servicing fix for .NET 4.7-4.8]","Url":"https://github.com/dotnet/wpf/issues/3115","RelatedDescription":"Open issue \"DocumentViewer cannot select all multi-line sentence of Japanese which is contained in one TextBox.\" (#3115)"},{"Id":"635661861","IsPullRequest":false,"CreatedAt":"2020-06-09T18:23:09","Actor":"SamBent","Number":"3114","RawContent":null,"Title":"WPF is creating and formatting stack traces when removing HwndSource from visual tree","State":"open","Body":"Removing an HwndSource from the visual tree exercises logic that was recently augmented to help track down an unexplained crash.  The new logic creates a stack trace, but does even in the normal case, causing a non-trivial perf hit for no reason.\r\n\r\n[Port of servicing fix for .NET 4.8.]","Url":"https://github.com/dotnet/wpf/issues/3114","RelatedDescription":"Open issue \"WPF is creating and formatting stack traces when removing HwndSource from visual tree\" (#3114)"},{"Id":"635655674","IsPullRequest":false,"CreatedAt":"2020-06-09T18:13:08","Actor":"SamBent","Number":"3113","RawContent":null,"Title":"Copying data from WPF DataGrid crashes application with error \"(CLIPBRD_E_CANT_OPEN)\"","State":"open","Body":"DataGrid copy command crashes if some other process has locked the clipboard.\r\n\r\nThe standard behavior (in TextBox and other apps like Word, Notepad, etc.) is to fail silently - no copy, but no crash.\r\n\r\n[Port of servicing fix for .NET 4.5.2-4.8]","Url":"https://github.com/dotnet/wpf/issues/3113","RelatedDescription":"Open issue \"Copying data from WPF DataGrid crashes application with error \"(CLIPBRD_E_CANT_OPEN)\"\" (#3113)"},{"Id":"635652139","IsPullRequest":false,"CreatedAt":"2020-06-09T18:06:46","Actor":"SamBent","Number":"3112","RawContent":null,"Title":"Tooltip crash [Watson] clr20r3: NULL_POINTER_READ_c0000005_PresentationFramework.dll!System.Windows.Controls.PopupControlService.OnPostProcessInput","State":"open","Body":"NRE when closing tooltips in some situations, due to re-entrancy.\r\n\r\n[Port of servicing fix for .NET 4.8]","Url":"https://github.com/dotnet/wpf/issues/3112","RelatedDescription":"Open issue \"Tooltip crash [Watson] clr20r3: NULL_POINTER_READ_c0000005_PresentationFramework.dll!System.Windows.Controls.PopupControlService.OnPostProcessInput\" (#3112)"},{"Id":"635412037","IsPullRequest":true,"CreatedAt":"2020-06-09T13:13:54","Actor":"dotnet-maestro[bot]","Number":"3110","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **System.CodeDom**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **System.Diagnostics.EventLog**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **System.DirectoryServices**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **System.Drawing.Common**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.AccessControl**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Cryptography.Xml**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Permissions**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Principal.Windows**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **System.Windows.Extensions**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **System.IO.Packaging**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **System.Resources.Extensions**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200609.3\r\n- **Date Produced**: 6/9/2020 12:54 PM\r\n- **Commit**: 8d38a28fbcc2854c06f9deb8bc78b35b83ed43e1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms**: from 5.0.0-preview.7.20309.2 to 5.0.0-preview.7.20309.3\r\n  - **Microsoft.Win32.Registry**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.CodeDom**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Configuration.ConfigurationManager**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Diagnostics.EventLog**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.DirectoryServices**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Drawing.Common**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Reflection.MetadataLoadContext**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Security.AccessControl**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Security.Cryptography.Xml**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Security.Permissions**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Security.Principal.Windows**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Windows.Extensions**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **Microsoft.NETCore.Platforms**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.IO.Packaging**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **Microsoft.NETCore.ILDAsm**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **Microsoft.NETCore.ILAsm**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **System.Resources.Extensions**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n  - **Microsoft.NETCore.App.Internal**: from 5.0.0-preview.7.20307.4 to 5.0.0-preview.7.20308.8\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3110","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#3110)"},{"Id":"635401788","IsPullRequest":true,"CreatedAt":"2020-06-09T13:05:15","Actor":"dotnet-maestro[bot]","Number":"3109","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200609.2\r\n- **Date Produced**: 6/9/2020 12:39 PM\r\n- **Commit**: 5741b811e51fec642c788c01f705defd8300e81c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: from 5.0.0-preview.7.20308.2 to 5.0.0-preview.7.20309.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3109","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#3109)"},{"Id":"635350537","IsPullRequest":true,"CreatedAt":"2020-06-09T11:57:36","Actor":"dotnet-maestro[bot]","Number":"3108","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200609.2\r\n- **Date Produced**: 6/9/2020 11:24 AM\r\n- **Commit**: de01b4ec947267212e446bfc698beafb7230a5c9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms**: from 5.0.0-preview.7.20308.12 to 5.0.0-preview.7.20309.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3108","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#3108)"},{"Id":"635150955","IsPullRequest":true,"CreatedAt":"2020-06-09T06:58:25","Actor":"dotnet-maestro[bot]","Number":"3107","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200608.12\r\n- **Date Produced**: 6/9/2020 6:14 AM\r\n- **Commit**: 4716b3e339f07085921d9e2fd1c0a4af2d6e3aec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms**: from 5.0.0-preview.7.20308.10 to 5.0.0-preview.7.20308.12\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3107","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#3107)"},{"Id":"635139848","IsPullRequest":true,"CreatedAt":"2020-06-09T06:32:22","Actor":"dotnet-maestro[bot]","Number":"3106","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200608.9\r\n- **Date Produced**: 6/9/2020 5:57 AM\r\n- **Commit**: 75f13d7841a43abf67db4a6b78820e8b26ea96b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms**: from 5.0.0-preview.7.20308.8 to 5.0.0-preview.7.20308.9\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/3106","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#3106)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-06-13T05:30:47.9938066Z","RunDurationInMilliseconds":623}