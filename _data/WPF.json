{"Data":{"GitHub":{"Issues":[{"Id":"1131448512","IsPullRequest":true,"CreatedAt":"2022-02-11T02:12:46","Actor":"dotnet-maestro[bot]","Number":"6113","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220210.13\r\n- **Date Produced**: February 11, 2022 1:05:16 AM UTC\r\n- **Commit**: ec82ceab973e097ba42774f576c2a5869150a2a1\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.2.22110.12 to 7.0.0-preview.2.22110.13][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.2.22110.12 to 7.0.0-preview.2.22110.13][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/338b3aa...ec82cea\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6113","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6113)"},{"Id":"1131401381","IsPullRequest":true,"CreatedAt":"2022-02-11T01:46:37","Actor":"dotnet-maestro[bot]","Number":"6112","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220210.12\r\n- **Date Produced**: February 11, 2022 12:45:17 AM UTC\r\n- **Commit**: 338b3aa645c733666acef8921a59408fa93f038b\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.2.22110.10 to 7.0.0-preview.2.22110.12][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.2.22110.10 to 7.0.0-preview.2.22110.12][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/ccf29fc...338b3aa\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6112","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6112)"},{"Id":"1131214322","IsPullRequest":true,"CreatedAt":"2022-02-10T23:42:49","Actor":"dotnet-maestro[bot]","Number":"6110","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220210.10\r\n- **Date Produced**: February 10, 2022 10:48:17 PM UTC\r\n- **Commit**: ccf29fc6c37cd424b5688638cdc3838bc12494ac\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.2.22110.9 to 7.0.0-preview.2.22110.10][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.2.22110.9 to 7.0.0-preview.2.22110.10][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/3d23d2a...ccf29fc\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6110","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6110)"},{"Id":"1131084567","IsPullRequest":true,"CreatedAt":"2022-02-10T22:38:26","Actor":"dotnet-maestro[bot]","Number":"6108","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220210.9\r\n- **Date Produced**: February 10, 2022 9:34:48 PM UTC\r\n- **Commit**: 3d23d2a3544aadacdc3dec042da6aec5841fccf9\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.2.22110.7 to 7.0.0-preview.2.22110.9][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.2.22110.7 to 7.0.0-preview.2.22110.9][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/cac6caa...3d23d2a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6108","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6108)"},{"Id":"1131138247","IsPullRequest":false,"CreatedAt":"2022-02-10T22:33:06","Actor":"RussKie","Number":"6109","RawContent":null,"Title":"Issue building with Windows Desktop 6.0.2","State":"open","Body":"After updating to 6.0.2 you may experience issues running WPF apps built against 6.0.2 on 6.0.0 or 6.0.1 runtime with the following error.\r\n\r\n```\r\nCoreCLR Version: 6.0.121.56705\r\n.NET Version: 6.0.1\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.IO.FileLoadException: Could not load file or assembly 'PresentationFramework, Version=6.0.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The located assembly's manifest definition does not match the assembly reference. (0x80131040)\r\nFile name: 'PresentationFramework, Version=6.0.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'\r\n```\r\n\r\nFor an available workaround please refer to https://github.com/dotnet/core/issues/7176.","Url":"https://github.com/dotnet/wpf/issues/6109","RelatedDescription":"Open issue \"Issue building with Windows Desktop 6.0.2\" (#6109)"},{"Id":"1130263326","IsPullRequest":true,"CreatedAt":"2022-02-10T21:24:19","Actor":"dotnet-maestro[bot]","Number":"6105","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220210.7\r\n- **Date Produced**: February 10, 2022 8:16:55 PM UTC\r\n- **Commit**: cac6caa689b314a84858aa537f14e74d74450420\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.2.22109.2 to 7.0.0-preview.2.22110.7][7]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.2.22109.2 to 7.0.0-preview.2.22110.7][7]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22108.17 to 7.0.0-preview.2.22109.10][8]\r\n\r\n[7]: https://github.com/dotnet/winforms/compare/fe9d9d8...cac6caa\r\n[8]: https://github.com/dotnet/runtime/compare/c4c1c3a...2b862d4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6105","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6105)"},{"Id":"1130600382","IsPullRequest":true,"CreatedAt":"2022-02-10T18:13:40","Actor":"singhashish-wpf","Number":"6107","RawContent":null,"Title":"workaround to fix build error","State":"open","Body":"This is a workaround to fix build error on the CI.","Url":"https://github.com/dotnet/wpf/pull/6107","RelatedDescription":"Open PR \"workaround to fix build error\" (#6107)"},{"Id":"1130369420","IsPullRequest":false,"CreatedAt":"2022-02-10T15:59:00","Actor":"LaughingJohn","Number":"6106","RawContent":null,"Title":"Spell Check very slow and causes UI to become unresponsive","State":"open","Body":".NET Version: I tried this with .Net Framework 4.5.2, 4.7.2, 4.8 and .Net (Core) 6.0.\r\nWindows version: Windows 11\r\nDoes the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\nHi,\r\n\r\nThe spell checking is really slow in our Application (.Net 4.7.2) and causes the UI to become unresponsive and essentially unusable until the spell check is complete. This affects both the text box and the rich textbox.\r\n\r\nTo investigate this I created a simple test project with a single textbox with spelling enabled (SpellCheck.IsEnabled=\"True\") bound to a string property. At start-up I load the string property with text and the problem is observed. Once the spell check has finished the UI becomes responsive again.\r\n\r\nThe problem seems worse the more misspelt words there are in the text and the longer the text is (tested with \"Lorum Ipsum\" text). It is also made worse if there are multiple text boxes/rich text boxes with spelling enabled on the same window (as is the case in our actual application).\r\n\r\nMy colleague claims to have also observed high CPU, but in my testing CPU was around 8% (laptop with Core I9 & 32GB). I wonder whether it is more to do with the UI thread being blocked.\r\n\r\nI tried the switch: AppContext.SetSwitch(@\"Switch.System.Windows.Controls.DoNotAugmentWordBreakingUsingSpeller\", true); but this didn't seem to make much, if any, difference.\r\n\r\nI know it's a completely different beast, but I did some testing with the same text in Word and of course it was very responsive. This appears similar to #3350.\r\n\r\nThis has been reported by our customers.\r\n\r\nThanks","Url":"https://github.com/dotnet/wpf/issues/6106","RelatedDescription":"Open issue \"Spell Check very slow and causes UI to become unresponsive\" (#6106)"},{"Id":"1131303334","IsPullRequest":false,"CreatedAt":"2022-02-10T14:49:43","Actor":"philfontaine","Number":"6111","RawContent":null,"Title":"WPF App corrupted when using GitHub Action setup-dotnet for .NET 6","State":"open","Body":"### Describe the bug\r\nThe WPF app is built with GitHub Actions. The compiled application simply does not work (nothing launches, nothing appears).\r\nThe App works fine when compiled locally.\r\nThe App was created using the default WPF template, so it's a blank page.\r\n\r\n### To Reproduce\r\nI have a repo here https://github.com/philfontaine/gh-actions-wpf-net-6-bug showing the bug.\r\nThe `vTest1` release contains the \"corrupted\" application. You may create another tag `vXxx` yourself if you don't trust its content. The action runs when pushing a tag starting with `v`.\r\n\r\nI also added a tag `vTestManualRelease` where I ran the CI steps locally, then replaced the zip in the release with the one compiled locally, redownloaded it. In that case, the app works fine.\r\n\r\n### More Info\r\n- .NET 5 works fine. You can see that I created a branch and a tag with .NET 5 to showcase that it works fine.\r\n- The OS (windows-2019 vs windows-2022) does not matter (both have the same problem).\r\n- Console applications don't have this problem.\r\n\r\nI tried running the corrupted app on an old Windows 7 computer just for fun. I managed to get more information there:\r\n\r\n![image](https://user-images.githubusercontent.com/16233697/153431908-7b71df7c-599e-4691-8a46-d0ad90c2dfaa.png)\r\n![image](https://user-images.githubusercontent.com/16233697/153432030-5bdfffb6-a2b0-441a-bc41-26b48f32f599.png)\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/6111","RelatedDescription":"Open issue \"WPF App corrupted when using GitHub Action setup-dotnet for .NET 6\" (#6111)"},{"Id":"1130078043","IsPullRequest":true,"CreatedAt":"2022-02-10T13:25:08","Actor":"dotnet-maestro[bot]","Number":"6104","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220209.1\r\n- **Date Produced**: February 9, 2022 4:34:03 PM UTC\r\n- **Commit**: 00b6cce8983065a9cf9fb108a724f28ec44eaf75\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22108.1 to 7.0.0-beta.22109.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22108.1 to 7.0.0-beta.22109.1][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22108.1 to 7.0.0-beta.22109.1][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22108.1 to 7.0.0-beta.22109.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22108.1 to 7.0.0-beta.22109.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/dda61e4...00b6cce\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6104","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/arcade\" (#6104)"},{"Id":"1130059223","IsPullRequest":false,"CreatedAt":"2022-02-10T13:13:20","Actor":"luojunyuan","Number":"6103","RawContent":null,"Title":"Show a new window as CenterScreen bugged with dpi PerMonitorV2 at second screen","State":"open","Body":"* .NET Core Version: 6.0.102\r\n* Windows version: Windows 11 21H2 22000.434\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/main/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nI have two monitors. One set as primary screen with dpi scale 300%, another one dpi 100%.\r\n\r\nAdd `app.manifest` to the project (code below). Showing a window at the second screen with `WindowStartupLocation = WindowStartupLocation.CenterScreen`. The window doesn't show at center.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nYou can see if the `MainWindow` is in primary screen, new window is correctly displayed at the center of the screen. \r\n\r\nIf `MainWindow` at a second screen. The new window shows beyond the screen.\r\n \r\n![image](https://user-images.githubusercontent.com/28323948/153412768-679fce24-80c7-46a1-ba41-a89f2e37f2df.png)\r\n\r\n **Expected behavior:**\r\n\r\nThe window should be in the center of the second screen.\r\n \r\n **Minimal repro:**\r\n\r\n`app.manifest`\r\n```xml\r\n<application xmlns=\"urn:schemas-microsoft-com:asm.v3\">\r\n  <windowsSettings>\r\n    <dpiAwareness xmlns=\"http://schemas.microsoft.com/SMI/2016/WindowsSettings\">PerMonitorV2</dpiAwareness>\r\n    <dpiAware xmlns=\"http://schemas.microsoft.com/SMI/2005/WindowsSettings\">true</dpiAware>\r\n  </windowsSettings>\r\n</application>\r\n```\r\n`MainWindow.xaml.cs`\r\n```csharp\r\nprivate void Button_Click(object sender, RoutedEventArgs e)\r\n{\r\n     new Window() \r\n     { \r\n         Width = 400,\r\n         Height = 500,\r\n         WindowStartupLocation = WindowStartupLocation.CenterScreen \r\n      }.Show();\r\n}\r\n```\r\n\r\n**Extra**\r\nComment out the line of `PerMonitorV2` in manifest, this problem would be fixed. But the window became more blurred than using PerMonitorV2 and I can confirm that PerMonitorV2 can bring a better performance of my apps animation.\r\n(In TaskManager, DPI aware of the app would be displayed as `System`)","Url":"https://github.com/dotnet/wpf/issues/6103","RelatedDescription":"Open issue \"Show a new window as CenterScreen bugged with dpi PerMonitorV2 at second screen\" (#6103)"},{"Id":"1129618099","IsPullRequest":true,"CreatedAt":"2022-02-10T08:17:59","Actor":"singhashish-wpf","Number":"6102","RawContent":null,"Title":"Revert \"Update dependencies from https://github.com/dotnet/arcade bui…","State":"closed","Body":"…ld 20220208.1 (#6094)\"\r\n\r\nThis reverts commit 7c29f086b641dcc7b8845d5103fe83e86a5e7180.\r\n\r\nFixes # <!-- Issue Number -->\r\n\r\nMain PR <!-- Link to PR if any that fixed this in the main branch. -->\r\n\r\n## Description\r\n\r\n<!-- Give a brief summary of the issue and how the pull request is fixing it. -->\r\n\r\n## Customer Impact\r\n\r\n<!-- What is the impact to customers of not taking this fix? -->\r\n\r\n## Regression\r\n\r\n<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression? -->\r\n\r\n## Testing\r\n\r\n<!-- What kind of testing has been done with the fix. -->\r\n\r\n## Risk\r\n\r\n<!-- Please assess the risk of taking this fix. Provide details backing up your assessment. -->\r\n","Url":"https://github.com/dotnet/wpf/pull/6102","RelatedDescription":"Closed or merged PR \"Revert \"Update dependencies from https://github.com/dotnet/arcade bui…\" (#6102)"},{"Id":"1129437144","IsPullRequest":true,"CreatedAt":"2022-02-10T04:32:49","Actor":"RussKie","Number":"6101","RawContent":null,"Title":"Pin assembly versions to prevent revving those in servicing releases","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nResolves https://github.com/dotnet/core/issues/7172#issuecomment-1034105137\r\n\r\n\r\n## Proposed changes\r\n\r\nPin assembly versions similar to https://github.com/dotnet/runtime/blob/bbc766a7c65716305919bc691d696b1e46fa6f62/eng/Versions.props#L14 and https://github.com/dotnet/aspnetcore/blob/c0575788ecadd6e5cfeb4eab635c13b5fd433d37/Directory.Build.targets#L88 to avoid revving assembly versions in servicing releases.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- WPF applications built against 6.0.2 won't run on 6.0 GA or 6.0.1\r\n\r\n## Regression? \r\n\r\n- Yes \r\n\r\n## Risk\r\n\r\n- Medium. With this fix we'll stop supporting the folks that compiled against 6.0.2, and any assets compiled against 6.0.2 won't exchange and will need to be rebuilt.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n6.0.1\r\n![image](https://user-images.githubusercontent.com/4403806/153336436-ff2b0f29-9019-44f3-9b62-8b021d4ff676.png)\r\n![image](https://user-images.githubusercontent.com/4403806/153336463-0289b410-d474-46e3-8021-1e0a8b9346b0.png)\r\n\r\n6.0.2\r\n![image](https://user-images.githubusercontent.com/4403806/153336273-5bf08a69-b4fa-4834-938f-d55e0d1702be.png)\r\n![image](https://user-images.githubusercontent.com/4403806/153336311-4b350c68-1151-4774-b300-ed5fca3db8b8.png)\r\n\r\n### After\r\n\r\nA private built for this fix:\r\n\r\n❗  TBD\r\n\r\n\r\nwhich aligns with \r\n\r\n![image](https://user-images.githubusercontent.com/4403806/153319666-d16a5c37-5a47-41b4-8a1c-f4db878f1ba9.png)\r\n![image](https://user-images.githubusercontent.com/4403806/153319118-8b1874ab-9aa6-42d5-810c-83a60d729041.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4403806/153319440-58cd1b3b-3b9b-4a23-b6cd-2128f7ad3149.png)\r\n![image](https://user-images.githubusercontent.com/4403806/153318731-b346e04e-d4af-4dd2-a597-4e03ce025703.png)\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6101","RelatedDescription":"Open PR \"Pin assembly versions to prevent revving those in servicing releases\" (#6101)"},{"Id":"1129416746","IsPullRequest":true,"CreatedAt":"2022-02-10T04:03:37","Actor":"singhashish-wpf","Number":"6100","RawContent":null,"Title":"Revert \"[release/6.0] Update dependencies from dnceng/internal/dotnet-wpf-int\"","State":"closed","Body":"Reverts dotnet/wpf#6086","Url":"https://github.com/dotnet/wpf/pull/6100","RelatedDescription":"Closed or merged PR \"Revert \"[release/6.0] Update dependencies from dnceng/internal/dotnet-wpf-int\"\" (#6100)"},{"Id":"1129358958","IsPullRequest":true,"CreatedAt":"2022-02-10T02:38:20","Actor":"RussKie","Number":"6099","RawContent":null,"Title":"Pin assembly versions to prevent revving those in servicing releases","State":"open","Body":"Relates to https://github.com/dotnet/core/issues/7172#issuecomment-1034105137 and https://github.com/dotnet/core/issues/7176","Url":"https://github.com/dotnet/wpf/pull/6099","RelatedDescription":"Open PR \"Pin assembly versions to prevent revving those in servicing releases\" (#6099)"},{"Id":"1129357370","IsPullRequest":true,"CreatedAt":"2022-02-10T02:36:10","Actor":"RussKie","Number":"6098","RawContent":null,"Title":"Remove and updated outdate dependencies","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/6098","RelatedDescription":"Open PR \"Remove and updated outdate dependencies\" (#6098)"},{"Id":"1129002423","IsPullRequest":true,"CreatedAt":"2022-02-09T20:43:25","Actor":"ahoefling","Number":"6097","RawContent":null,"Title":"Adds Support for ObservableCollection<T> and Collection<T> Range APIs from dotnet/runtime","State":"open","Body":"Fixes #1887\r\n\r\n## Description\r\nRemoves the `CollectionChanged` exceptions from `ListCollectionVIew` when the record count is not equal to 1. This PR is required to support https://github.com/dotnet/runtime/pull/65101. \r\n\r\nThe change to dotnet/runtime as originally attempted in 2019 and it was discovered during preview builds that it broke WPF. I have spoken with both the .NET Team and the WPF Team and both teams are ready to accept this change. See https://github.com/dotnet/runtime/pull/65101 for a complete detail of history and API changes.\r\n\r\n## Customer Impact\r\nIf this change is accepted it will allow developers to use `AddRange()` and `RemoveRange()` APIs on their `ObservableCollection<T>`. This will reduce the call stack from event invocations by N number of items that are being added to the collection. If an application is adding 5000 items to an `ObservableCollection<T>` currently it will invoke 5000 events, with this change it will only invoke 1 event.\r\n\r\nIf this change is not accepted, then https://github.com/dotnet/runtime/pull/65101 will not be accepted as it will break just about every WPF application that uses `ListCollectionView`.\r\n\r\n## Regression\r\nN/A\r\n\r\n## Testing\r\nI had problems running the wpf project locally and wasn't able to test as I would have liked to. I wanted to submit this PR and discuss with the community if someone could give me some help testing or instructions. I think the testing is giving me issues because I need a custom build of .NET 7 and the SDK project, then I need a custom build of WPF and finally will be able to test.\r\n\r\n## Risk\r\nAs far as I understand this PR mitigates the risk of breaking changes from https://github.com/dotnet/runtime/pull/65101. I think it is important once we get a build we can test with to use some large WPF projects as a test solution like the NuGet Package Explorer. That was the project that originally caught the issue from the first attempt in 2019\r\n","Url":"https://github.com/dotnet/wpf/pull/6097","RelatedDescription":"Open PR \"Adds Support for ObservableCollection<T> and Collection<T> Range APIs from dotnet/runtime\" (#6097)"},{"Id":"1128985841","IsPullRequest":false,"CreatedAt":"2022-02-09T19:55:13","Actor":"Tetedeiench","Number":"6096","RawContent":null,"Title":"Trimming for WPF - Enable the feature, or give us a way to force the include an assembly","State":"open","Body":"I was considering moving my application from .net Framework to Net code and encountered a show stopper. One of your team member on Reddit suggested I open an issue, so here I am !\r\n\r\nMy application ( you can easily find it using my profile, i'm just avoiding advertising here) is used by many (20k+ downloads a day), and Microsoft is one of my customers.\r\n\r\nOn to my requirements :\r\n- SIngle exe (no installer)\r\n- No prerequisites or dependencies, at least for the basic startup of the app\r\n- Being able to execute off a USB stick or network folder\r\n- As small an exe as possible\r\n- Being able to run under WinPE environment is a plus\r\n\r\nIt is a desktop app using WPF right now, WPF being chosen for being not abandoned or close to be discontinued, not replaced by the new cool kid that cropped up ( MAUI ), and mature enough that I find lots of libraries doing what I need (I rely heavily on materialdesigninxaml and oxyplot ).\r\n\r\nMAUI is too young, the numerous candidates between WPF and MAUI have been deprecated or are not being actively worked upon, or lack enough possibilities through Nugets.\r\n\r\nPorting from .net framework to Net core 6 was easy thanks to the upgrade tool, it was done in about 30 minutes, and the app was working, great !\r\n\r\nHowever, the final exe size, even when activating single exe deployment and compression, ended up around 100MB. that's more than 3 times the size of my original exe ( 30MB). This size increase comes with little to no advantages for users, so it's a tough one to sell.\r\n\r\n I used this build command : \r\n```\r\ndotnet publish -p:PublishSingleFile=true -r win-x64 -c Release --self-contained true -p:EnableCompressionInSingleFile=true\r\n```\r\n\r\nI think it all boils down to trimming not being possible for WPF scenarios, to constraint the final exe size (I realize the Presentation* dll weights 30MB already, but still...).\r\n\r\nPlease enable trimming in those scenarios. \r\n\r\nOr please give us a good workaround by letting us specify which assemblies we want to exclude from trimming, by forcing them to be included if they are among the dependencies. This will lead to us WPF developers being able to enable trimming and get it working (since we do know the dependencies and can do it manually if they're called from xaml only). Yes, it will be a tad micro-management, but getting that \"force exclude from trimming\" list will enable the support for all scenarios that are currently excluded.\r\n\r\nI have little hope for this to be heard tbh, as MAUI is the cool kid on the block that will get all the attention (until it is, like many before, replaced by yet another tech - Blazor for desktop anyone ?).\r\n\r\nJust don't let old, reliable, common technologies fade away in your support in net6. Even if they don't have all the bells and whistles of newer techs, lots of apps are heavily relying on it.","Url":"https://github.com/dotnet/wpf/issues/6096","RelatedDescription":"Open issue \"Trimming for WPF - Enable the feature, or give us a way to force the include an assembly\" (#6096)"},{"Id":"1128656167","IsPullRequest":true,"CreatedAt":"2022-02-09T15:24:05","Actor":"dotnet-maestro[bot]","Number":"6095","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Coherency Updates**:\r\n  - **System.CodeDom**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **System.Configuration.ConfigurationManager**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **System.Diagnostics.EventLog**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **System.DirectoryServices**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **System.Drawing.Common**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **System.Reflection.MetadataLoadContext**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Cryptography.Xml**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **System.Security.Permissions**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **System.Windows.Extensions**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.Platforms**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **System.IO.Packaging**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **System.Resources.Extensions**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Ref**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17 (parent: Microsoft.Private.Winforms)\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220209.2\r\n- **Date Produced**: February 9, 2022 2:34:57 PM UTC\r\n- **Commit**: fe9d9d8ecd101816ca5c9a115e601b71b1471410\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.2.22108.10 to 7.0.0-preview.2.22109.2][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.2.22108.10 to 7.0.0-preview.2.22109.2][1]\r\n  - **System.CodeDom**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **System.Configuration.ConfigurationManager**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **System.Diagnostics.EventLog**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **System.DirectoryServices**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **System.Drawing.Common**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **System.Reflection.MetadataLoadContext**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **System.Security.Cryptography.Xml**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **System.Security.Permissions**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **System.Windows.Extensions**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **Microsoft.NETCore.Platforms**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **System.IO.Packaging**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **System.Resources.Extensions**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **Microsoft.NETCore.App.Ref**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.7.0**: [from 7.0.0-preview.2.22107.26 to 7.0.0-preview.2.22108.17][2]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/1ca626c...fe9d9d8\r\n[2]: https://github.com/dotnet/runtime/compare/af42c8e...c4c1c3a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6095","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6095)"},{"Id":"1128544007","IsPullRequest":true,"CreatedAt":"2022-02-09T14:08:11","Actor":"dotnet-maestro[bot]","Number":"6094","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 840bf684-917a-4879-f62c-08d8e93a0c51\r\n- **Build**: 20220208.1\r\n- **Date Produced**: February 8, 2022 1:04:46 PM UTC\r\n- **Commit**: dda61e4601d38b5d9d972f0541ff652ba5a16ad6\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 7.0.0-beta.22103.1 to 7.0.0-beta.22108.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22103.1 to 7.0.0-beta.22108.1][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 7.0.0-beta.22103.1 to 7.0.0-beta.22108.1][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 7.0.0-beta.22103.1 to 7.0.0-beta.22108.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22103.1 to 7.0.0-beta.22108.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/70831f0...dda61e4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:840bf684-917a-4879-f62c-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6094","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6094)"},{"Id":"1127486376","IsPullRequest":true,"CreatedAt":"2022-02-09T11:43:52","Actor":"dotnet-maestro[bot]","Number":"6086","RawContent":null,"Title":"[release/6.0] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:934472a4-9da1-4b66-da04-08d961c27f17)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 934472a4-9da1-4b66-da04-08d961c27f17\r\n- **Build**: 20220209.4\r\n- **Date Produced**: February 9, 2022 10:17:30 AM UTC\r\n- **Commit**: a91dc679d9bb06e7d00e7308de518a232702f888\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: [from 6.0.0-rtm.22104.2 to 6.0.0-rtm.22109.4][2]\r\n\r\n[2]: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/branches?baseVersion=GC962ab77&targetVersion=GCa91dc67&_a=files\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:934472a4-9da1-4b66-da04-08d961c27f17)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6086","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#6086)"},{"Id":"1127383686","IsPullRequest":true,"CreatedAt":"2022-02-09T10:00:10","Actor":"dotnet-maestro[bot]","Number":"6085","RawContent":null,"Title":"[release/6.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:64ecc23e-064a-456b-da03-08d961c27f17)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 64ecc23e-064a-456b-da03-08d961c27f17\r\n- **Build**: 20220207.2\r\n- **Date Produced**: February 7, 2022 11:24:16 PM UTC\r\n- **Commit**: fe5cc1841d12196d94a4ae3b276cb92d8d7ca73d\r\n- **Branch**: refs/heads/release/6.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 6.0.0-beta.22102.3 to 6.0.0-beta.22107.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.22102.3 to 6.0.0-beta.22107.2][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 6.0.0-beta.22102.3 to 6.0.0-beta.22107.2][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 6.0.0-beta.22102.3 to 6.0.0-beta.22107.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.22102.3 to 6.0.0-beta.22107.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/93e08e3...fe5cc18\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:64ecc23e-064a-456b-da03-08d961c27f17)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6085","RelatedDescription":"Closed or merged PR \"[release/6.0] Update dependencies from dotnet/arcade\" (#6085)"},{"Id":"1127889376","IsPullRequest":true,"CreatedAt":"2022-02-09T05:31:32","Actor":"vseanreesermsft","Number":"6092","RawContent":null,"Title":"Merging internal commits for release/6.0","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/6092","RelatedDescription":"Closed or merged PR \"Merging internal commits for release/6.0\" (#6092)"},{"Id":"1127610182","IsPullRequest":true,"CreatedAt":"2022-02-09T05:31:18","Actor":"vseanreesermsft","Number":"6089","RawContent":null,"Title":"Merging internal commits for release/5.0","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/6089","RelatedDescription":"Closed or merged PR \"Merging internal commits for release/5.0\" (#6089)"},{"Id":"1127607843","IsPullRequest":true,"CreatedAt":"2022-02-09T05:30:45","Actor":"vseanreesermsft","Number":"6088","RawContent":null,"Title":"Merging internal commits for release/6.0","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/6088","RelatedDescription":"Closed or merged PR \"Merging internal commits for release/6.0\" (#6088)"},{"Id":"1128030342","IsPullRequest":true,"CreatedAt":"2022-02-09T04:39:55","Actor":"dotnet-maestro[bot]","Number":"6093","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220208.10\r\n- **Date Produced**: February 9, 2022 3:48:18 AM UTC\r\n- **Commit**: 1ca626c09bc8a1f593400c3f82453198c95093c8\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.2.22108.3 to 7.0.0-preview.2.22108.10][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.2.22108.3 to 7.0.0-preview.2.22108.10][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/d18568d...1ca626c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6093","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6093)"},{"Id":"1127757996","IsPullRequest":false,"CreatedAt":"2022-02-08T21:06:16","Actor":"Starwer","Number":"6091","RawContent":null,"Title":"Displaying an Image from a byte[] in an ItemControl leads to huge memory leak","State":"open","Body":"* .NET Core Version: 6.0 or any other .NET core version I could try\r\n* Windows version: 10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n \r\n **Problem description:**\r\nI need to display an image which is in a form of `byte[]` (array of byte) in a WPF `ItemsControl`, but everything I could try leads to memory leak. I use what I think to be the canonical MVVM approach to do so. To enable the `Image` to display the `byte[]`, I convert it in the ViewModel into an `ImageSource` using a `MemoryStream` (example below). I've tried some more exotic ways to get this `byte[]` converted to an `ImageSource`, using `Bitmap` and GDI+ in between. But this always end up with the same conclusion: the memory fills in and never gets freed.\r\n\r\n **Minimal repro:**\r\n\r\nMainWindow.xaml\r\n```XML \r\n<Window x:Class=\"Toy.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:Toy\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n    <Grid>\r\n        <StackPanel>\r\n            <Button Content=\"Collect Garbage\" Click=\"gcButton_Click\"/>\r\n            <Button x:Name=\"wxButton\" Click=\"wxButton_Click\"/>\r\n            <ItemsControl x:Name=\"wxToy\" ItemsSource=\"{Binding}\" HorizontalAlignment=\"Center\">\r\n                <ItemsControl.ItemsPanel>\r\n                    <ItemsPanelTemplate>\r\n                        <WrapPanel/>\r\n                    </ItemsPanelTemplate>\r\n                </ItemsControl.ItemsPanel>\r\n                <ItemsControl.ItemTemplate>\r\n                    <DataTemplate>\r\n                        <Border BorderBrush=\"Bisque\" Width=\"100\" Height=\"100\" BorderThickness=\"2\">\r\n                            <Image Source=\"{Binding Data}\"/>\r\n                        </Border>\r\n                    </DataTemplate>\r\n                </ItemsControl.ItemTemplate>\r\n            </ItemsControl>\r\n        </StackPanel>\r\n    </Grid>\r\n</Window>\r\n```\r\n\r\nMainWindow.xaml.cs\r\n```C#\r\nusing System;\r\nusing System.Collections.ObjectModel;\r\nusing System.ComponentModel;\r\nusing System.IO;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Windows;\r\nusing System.Windows.Media;\r\nusing System.Windows.Media.Imaging;\r\n\r\nnamespace Toy\r\n{\r\n\r\n\r\n    internal class ToyItem : INotifyPropertyChanged\r\n    {\r\n        #region Boilerplate INotifyPropertyChanged\r\n\r\n        protected void OnPropertyChanged(PropertyChangedEventArgs e)\r\n        {\r\n            PropertyChanged?.Invoke(this, e);\r\n        }\r\n\r\n        public void OnPropertyChanged([CallerMemberName] string propertyName = \"\")\r\n        {\r\n            OnPropertyChanged(new PropertyChangedEventArgs(propertyName));\r\n        }\r\n        public event PropertyChangedEventHandler? PropertyChanged;\r\n\r\n\t#endregion\r\n\r\n\t/// <summary>\r\n\t/// Build an image from Picture bytes\r\n\t/// </summary>\r\n\t/// <param name=\"imageData\">Picture as array of bytes</param>\r\n\t/// <returns>Pictures as BitmapImage</returns>\r\n\tpublic static ImageSource? BitmapFromRaw(byte[]? imageData)\r\n\t{\r\n\t\tif (imageData == null) return null;\r\n\t\tvar image = new BitmapImage();\r\n\t\tvar mem = new MemoryStream(imageData);\r\n\t\timage.BeginInit();\r\n\t\t//image.CreateOptions = BitmapCreateOptions.PreservePixelFormat;\r\n\t\t//image.CacheOption = BitmapCacheOption.None;\r\n\t\t//image.UriSource = null;\r\n\t\timage.StreamSource = mem;\r\n\t\timage.EndInit();\r\n\t\t//mem.Close();\r\n\t\t//mem.Dispose();\r\n\t\timage.Freeze();\r\n \t\treturn image;\r\n\t}\r\n\r\n\tpublic ImageSource? Data\r\n        {\r\n            get { return _Data; }\r\n            set\r\n            {\r\n                if (value != _Data)\r\n                {\r\n                    _Data = value;\r\n                    OnPropertyChanged();\r\n                }\r\n            }\r\n        }\r\n        private ImageSource? _Data;\r\n        \r\n        public ToyItem ()\r\n        {\r\n            Data = BitmapFromRaw(Properties.Resources.pexels_jonathan_faria_8581946);\r\n        }\r\n\r\n    }\r\n\r\n    /// <summary>\r\n    /// Interaction logic for MainWindow.xaml\r\n    /// </summary>\r\n    public partial class MainWindow : Window\r\n    {\r\n\r\n        ObservableCollection<ToyItem> ToyList = new ObservableCollection<ToyItem>();\r\n\r\n        int Counter = 0;\r\n\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n\r\n            wxToy.DataContext = ToyList;\r\n            wxButton.Content = Counter;\r\n        }\r\n\r\n        private void gcButton_Click(object sender, RoutedEventArgs e)\r\n        {\r\n            GC.Collect();\r\n        }\r\n\r\n        private void wxButton_Click(object sender, RoutedEventArgs e)\r\n        {\r\n            wxButton.Content = ++Counter;\r\n\r\n            ToyList.Clear();\r\n\r\n            for (int i = 0; i < 5; i++)\r\n            {\r\n                ToyList.Add(new ToyItem());\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n```\r\nYou could see some attempts to rweak the code with the comments `//`\r\n\r\n**References**\r\n\r\nYou can download a ready-to-use solution of this [here](http://mouyseb.online.fr/?section=Public/WPF+Support)\r\n\r\nI've also ask the question [here](https://www.codeproject.com/Messages/5859183/Re-Converting-a-byte-to-a-ImageSource-means-huge-m)\r\nThis is to apply in the Desktop application I'm developping [here](https://github.com/Starwer/Lime)\r\nThe problem seems similar but is different to #1082 because it needs byte[] and ItemsControl.\r\n\r\n**Additional notes**\r\n\r\nThis example uses a resource (Properties.Resources.pexels_jonathan_faria_8581946) to get an image in byte[]. This is only for simplifying the example, don't bother to explain how I could workaround the problem by using a jpg image and URI instead. In the real [application](https://github.com/Starwer/Lime), I have no choice but getting the images from byte[] arrays...\r\n\r\nIf you run this code, you could hit a button to generate and show 5 images at a time in a MVVM scheme in an ItemsControl, just the way we are suppose to do it in WPF/C# I guess... Clicking the button several times will bring this deadly simple code to progressively eat Gigabytes of memory.\r\n\r\nI really do hope this is not a bug and that I'm doing something wrong here. Please point out on what I'm doing bad here....","Url":"https://github.com/dotnet/wpf/issues/6091","RelatedDescription":"Open issue \"Displaying an Image from a byte[] in an ItemControl leads to huge memory leak\" (#6091)"},{"Id":"1127667500","IsPullRequest":true,"CreatedAt":"2022-02-08T20:06:12","Actor":"dotnet-maestro[bot]","Number":"6090","RawContent":null,"Title":"[main] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: dd483b3f-65b0-44ab-f62d-08d8e93a0c51\r\n- **Build**: 20220208.3\r\n- **Date Produced**: February 8, 2022 6:59:01 PM UTC\r\n- **Commit**: d18568d80afaad8c31e2a9cd96fb22470597554f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Dotnet.WinForms.ProjectTemplates**: [from 7.0.0-preview.2.22108.2 to 7.0.0-preview.2.22108.3][1]\r\n  - **Microsoft.Private.Winforms**: [from 7.0.0-preview.2.22108.2 to 7.0.0-preview.2.22108.3][1]\r\n\r\n[1]: https://github.com/dotnet/winforms/compare/e125fd5...d18568d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:dd483b3f-65b0-44ab-f62d-08d8e93a0c51)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/6090","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/winforms\" (#6090)"},{"Id":"1127587280","IsPullRequest":false,"CreatedAt":"2022-02-08T18:00:24","Actor":"tomasfil","Number":"6087","RawContent":null,"Title":"WPF DataGrid memory leak","State":"open","Body":" **Problem description:**\r\n I originaly thought this was issue of ReactiveUI:\r\nhttps://github.com/reactiveui/ReactiveUI/issues/3178\r\n\r\nbut it turns out it is issue with WPF somewhere.\r\n\r\nThis issue exists for me on VS 2022, VS2019, no matter if it is debugger or not, NET5, NET6, NET CORE 3.1\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nObjects are not  getting garbage collected after removing them from ObservableCollection which is bound to DataGrid.ItemsSource\r\n\r\n **Expected behavior:**\r\nShould not leak \r\n\r\n **Minimal repro:**\r\nI have built repository showcasing the issue (Branch without ReactiveUI and project ReactiveUI_DataGrid_MemoryLeak):\r\nhttps://github.com/tomasfil/ReactiveUI_Tests/tree/WithoutReactiveUI/ReactiveUI_DataGrid_MemoryLeak\r\n\r\nThe demo logic is at MainWindow.xaml.cs\r\nJust run the project. The cycle will stop after 15 seconds.","Url":"https://github.com/dotnet/wpf/issues/6087","RelatedDescription":"Open issue \"WPF DataGrid memory leak\" (#6087)"},{"Id":"1127383132","IsPullRequest":false,"CreatedAt":"2022-02-08T15:10:01","Actor":"igugalov","Number":"6084","RawContent":null,"Title":"Minimize information inside \"MyApp.deps.json\" file","State":"open","Body":"* .NET Core Version: .Net 5.0.13\r\n* Windows version: 10.19043\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\n **Problem description:**\r\nHaving a MyApp.deps.json file is requiring all dependent libraries to be packaged in my installer. This does not make sense to me because when my app was running on .NET Framework I wasn't packaging all these dll files inside my installer. I have tried removing MyApp.deps.json file with `<GenerateDependencyFile>false</GenerateDependencyFile>`, but this is crashing my application upon start up with no errors in Event Viewer. Am I missing some tag or attribute that is needed in my project files?\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nAll libraries are required to run application.\r\n\r\n **Expected behavior:**\r\n Is there a way to use MyApp.deps.json with only the core libraries that are required to run my application or remove the file all together without breaking my application?\r\n\r\n **Minimal repro:**\r\nCreate a basic WPF application and add a Nuget package for example Xceed.Wpf.Toolkit.\r\nThis package is adding 4 more Xceed dll files along.\r\nDelete 1 of those libraries and try to start your executable and observe that it failed with an error in Event Viewer.\r\n`An assembly specified in the application dependencies manifest (MyApp.deps.json) was not found:\r\n    package: 'Extended.Wpf.Toolkit', version: '4.2.0'\r\n    path: 'lib/net40/Xceed.Wpf.AvalonDock.dll'`\r\nThis behavior is not observed in .NET Framework as there is no MyApp.deps.json.","Url":"https://github.com/dotnet/wpf/issues/6084","RelatedDescription":"Open issue \"Minimize information inside \"MyApp.deps.json\" file\" (#6084)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-02-11T03:30:32.7494811Z","RunDurationInMilliseconds":494}