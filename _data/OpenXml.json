{"Data":{"Sdk":{"Events":[{"Id":"40619358042","Type":"IssuesEvent","CreatedAt":"2024-07-31T10:39:33","Actor":"skrabbe001","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1766","RelatedDescription":"Opened issue \"DocumentFormat.OpenXml.Office2016.Drawing.Charts.UniqueID creates the wrong case in the resulting XML\" (#1766) at dotnet/Open-XML-SDK","RelatedBody":"DocumentFormat.OpenXml.Office2016.Drawing.Charts.UniqueID creates the wrong case in the resulting XML.\r\n\r\nThe case created by the SDK is \"UniqueID\" but it should be \"UniqueId\", otherwise the PowerPoint application (in some instances) reports an error.\r\n\r\nWhen creating unique identifiers for a chart series, then the following code creates a corrupted presentation:\r\n```\r\nusing C16 = DocumentFormat.OpenXml.Office2016.Drawing.Charts;\r\n\r\nvar uniqueId = new C16.UniqueID() { Val = $\"{{{seriesGuid}}}\" };\r\next.Append(uniqueId);\r\n```\r\n\r\nThis is a workaround for the time being:\r\n```\r\next.InnerXml = $\"<c16:uniqueId xmlns:c16=\\\"http://schemas.microsoft.com/office/drawing/2014/chart\\\" val=\\\"{{{seriesGuid}}}\\\" />\";\r\n```\r\n\r\nLibrary Version: 3.0.1"},{"Id":"40617400392","Type":"IssuesEvent","CreatedAt":"2024-07-31T09:39:21","Actor":"snake-L","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1765","RelatedDescription":"Opened issue \"I am using the OpenXML SDK to read the PPT template for content replacement. After stress testing, I found that the memory usage is too high and the number of Gen0, Gen1, and Gen2 object collections is too frequent.\" (#1765) at dotnet/Open-XML-SDK","RelatedBody":"BenchmarkDotNet v0.13.12, Windows 11 (10.0.22631.3880/23H2/2023Update/SunValley3)\r\n11th Gen Intel Core i5-11400H 2.70GHz, 1 CPU, 12 logical and 6 physical cores\r\n.NET SDK 9.0.100-preview.3.24204.13\r\n  [Host]   : .NET 8.0.7 (8.0.724.31311), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\r\n  .NET 8.0 : .NET 8.0.7 (8.0.724.31311), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\r\n\r\nJob=.NET 8.0  Runtime=.NET 8.0  \r\n\r\n\r\n| Method |    Mean |    Error |   StdDev |      Gen0 |      Gen1 | Allocated |\r\n| ------ | ------: | -------: | -------: | --------: | --------: | --------: |\r\n| xxx    | 2.293 s | 0.0110 s | 0.0103 s | 3000.0000 | 1000.0000 |  22.34 MB |\r\n\r\n\r\n**code**\r\nRead specific tags and modify content as shown in the following figure.\r\n![image](https://github.com/user-attachments/assets/2a84b757-22e7-4185-be79-dba0e9388d9a)\r\n![image](https://github.com/user-attachments/assets/a14a80c9-86cc-4c1f-a2e3-1c86e873d9d4)\r\n![image](https://github.com/user-attachments/assets/14970d66-3752-4178-9310-08c68008f035)\r\n\r\n\r\n"},{"Id":"40611222850","Type":"IssuesEvent","CreatedAt":"2024-07-31T06:12:21","Actor":"catmanjan","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1764","RelatedDescription":"Opened issue \"Documentation Request: Explain how to \"Splitting up (shredding) a file into multiple files, and combining multiple files into a single file.\"\" (#1764) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the API or scenario**\r\nOne of the first features listed in this repo is:\r\n\r\n\"Splitting up (shredding) a file into multiple files, and combining multiple files into a single file.\"\r\n\r\nBut I can't find any information on the internet on how to split a file into multiple files using this SDK.\r\n\r\n**Attempts**\r\nGoogled it\r\n\r\n**Related scenarios**\r\nAll these questions but no code answers:\r\n\r\nhttps://stackoverflow.com/questions/43659785/openxml-word-document-split\r\nhttps://stackoverflow.com/questions/43659785/openxml-word-document-split\r\nhttps://stackoverflow.com/questions/4920532/how-to-split-a-word-document-by-section-using-c-sharp-and-the-open-xml-sdk\r\n\r\n"},{"Id":"40601382224","Type":"IssuesEvent","CreatedAt":"2024-07-30T20:29:15","Actor":"github-actions[bot]","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1763","RelatedDescription":"Closed issue \"Manual approval required for workflow run 10169279217: Approval for publishing to Nuget.org\" (#1763) at dotnet/Open-XML-SDK","RelatedBody":"Please approve or deny the deployment to Nuget.org\n\nWorkflow is pending manual review.\nURL: https://api.github.com/dotnet/Open-XML-SDK/actions/runs/10169279217\n\nRequired approvers: [twsouthwick tomjebo mikeebowen]\n\nRespond \"approved\", \"approve\", \"lgtm\", \"yes\" to continue workflow or \"denied\", \"deny\", \"no\" to cancel."},{"Id":"40601345475","Type":"IssuesEvent","CreatedAt":"2024-07-30T20:27:44","Actor":"github-actions[bot]","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1763","RelatedDescription":"Opened issue \"Manual approval required for workflow run 10169279217: Approval for publishing to Nuget.org\" (#1763) at dotnet/Open-XML-SDK","RelatedBody":"Please approve or deny the deployment to Nuget.org\n\nWorkflow is pending manual review.\nURL: https://api.github.com/dotnet/Open-XML-SDK/actions/runs/10169279217\n\nRequired approvers: [twsouthwick tomjebo mikeebowen]\n\nRespond \"approved\", \"approve\", \"lgtm\", \"yes\" to continue workflow or \"denied\", \"deny\", \"no\" to cancel."},{"Id":"40598710477","Type":"IssuesEvent","CreatedAt":"2024-07-30T18:43:55","Actor":"tomjebo","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1762","RelatedDescription":"Opened issue \"c16:uniqueID element has wrong case\" (#1762) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nWhen writing out the c16:uniqueId element using the UniqueID class\r\n```xml\r\n<c:ser>\r\n    ...\r\n    <c:extLst>\r\n        <c:ext xmlns:c16=\"http://schemas.microsoft.com/office/drawing/2014/chart\"\r\n               uri=\"{C3380CC4-5D6E-409C-BE32-E72D297353CC}\">\r\n            <c16:uniqueID val=\"{00000000-2153-43F5-A17B-C2679033F518}\" />\r\n        </c:ext>\r\n    </c:extLst>\r\n</c:ser>\r\n```\r\n\r\n**Observed behavior**\r\n`c16:uniqueID` is written\r\n\r\n**Expected behavior**\r\n`c16:uniqueId` should be written\r\n\r\n**Desktop (please complete the following information):**\r\n - DocumentFormat.OpenXml Version: 3.0.2\r\n\r\n"},{"Id":"40598178025","Type":"PullRequestEvent","CreatedAt":"2024-07-30T18:23:53","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1761","RelatedDescription":"Opened pull request \"Update CHANGELOG.md\" (#1761) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"40505452373","Type":"IssuesEvent","CreatedAt":"2024-07-26T19:20:57","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1755","RelatedDescription":"Closed issue \"Unable to Write Shared String Table Part using OpenXmlWriter\" (#1755) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nWhen using the OpenXmlWriter to write the Shared String Table part, the resulting sharedStrings.xml document saved to disk does not contain any string items. I've created a very simple script that creates an excel document, a default sheet, and tries to updated the shared string table to contain one entry. (The next step would be to use OpenXmlWriter to write one row with one cell with shared string value)\r\n\r\n**To Reproduce**\r\n```\r\nCancellationToken ct = CancellationToken.None;\r\n\r\nvoid Main()\r\n{\r\n\tusing (FileStream destinationFileStream = File.Create(@\"C:\\temp\\Simple_Doc_Using_OpenXml_Sax_SharedString.xlsx\", 1024 * 16))\r\n\tusing (var destinationSpreadsheetDocument = CreateNewSpreadsheet(destinationFileStream))\r\n\t{\r\n\t\tvar newWorksheetPart = CreateWorksheet(destinationSpreadsheetDocument, \"Sheet1\");\r\n\t\t\r\n\t\t// Use XmlWriter to write the SharedString contents - SAX model - writing start to end\r\n\t\tusing (var sharedStringTablePartWriter = OpenXmlWriter.Create(destinationSpreadsheetDocument.WorkbookPart.SharedStringTablePart))\r\n\t\t{\r\n\t\t\tsharedStringTablePartWriter.WriteStartDocument();\r\n\t\t\tsharedStringTablePartWriter.WriteStartElement(new SharedStringTable());\r\n\r\n\t\t\tsharedStringTablePartWriter.WriteElement(new SharedStringItem(new Text(\"Is Current\")));\r\n\r\n\t\t\t// End tag for SharedStringTable element.\r\n\t\t\tsharedStringTablePartWriter.WriteEndElement();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nSpreadsheetDocument CreateNewSpreadsheet(Stream stream)\r\n{\r\n\tSpreadsheetDocument newDoc = SpreadsheetDocument.Create(stream, SpreadsheetDocumentType.Workbook);\r\n\r\n\t// Add a WorkbookPart to the document.\r\n\tWorkbookPart workbookPart = newDoc.AddWorkbookPart();\r\n\t//workbookPart.Workbook = new Workbook();\r\n\r\n\t// Add Sheets section to the Workbook.\r\n\t//Sheets sheets = newDoc.WorkbookPart.Workbook.AppendChild<Sheets>(new Sheets());\r\n\r\n\t// Add a SharedStringTablePart to the WorkbookPart.\r\n\tSharedStringTablePart sharedStringTablePart = workbookPart.AddNewPart<SharedStringTablePart>();\r\n\tsharedStringTablePart.SharedStringTable = new SharedStringTable();\r\n\r\n\t// Add a WorkbookStylesPart to the WorkbookPart, and create default styles.\r\n\tWorkbookStylesPart workStylePart = workbookPart.AddNewPart<WorkbookStylesPart>();\r\n\tworkStylePart.Stylesheet = new Stylesheet();\r\n\r\n\tworkStylePart.Stylesheet.Borders = new Borders() { Count = 1 };\r\n\tworkStylePart.Stylesheet.Borders.AppendChild(new Border { LeftBorder = new LeftBorder(), RightBorder = new RightBorder(), TopBorder = new TopBorder(), BottomBorder = new BottomBorder(), DiagonalBorder = new DiagonalBorder() });\r\n\r\n\tworkStylePart.Stylesheet.CellFormats = new CellFormats() { Count = 1 };\r\n\tworkStylePart.Stylesheet.CellFormats.AppendChild(new CellFormat { NumberFormatId = 0, FontId = 0, FillId = 0, BorderId = 0 }); // empty one for index 0, seems to be required\r\n\r\n\tworkStylePart.Stylesheet.CellStyleFormats = new CellStyleFormats() { Count = 1 };\r\n\tworkStylePart.Stylesheet.CellStyleFormats.AppendChild(new CellFormat { NumberFormatId = 0, FontId = 0, FillId = 0, BorderId = 0, FormatId = 0 });\r\n\r\n\tworkStylePart.Stylesheet.DifferentialFormats = new DifferentialFormats() { Count = 0 };\r\n\r\n\tworkStylePart.Stylesheet.Fills = new Fills() { Count = 2 };\r\n\tworkStylePart.Stylesheet.Fills.AppendChild(new Fill { PatternFill = new PatternFill { PatternType = PatternValues.None } }); // required, reserved by Excel\r\n\tworkStylePart.Stylesheet.Fills.AppendChild(new Fill { PatternFill = new PatternFill { PatternType = PatternValues.Gray125 } }); // required, reserved by Excel\r\n\r\n\tworkStylePart.Stylesheet.Fonts = new Fonts() { Count = 1 };\r\n\tworkStylePart.Stylesheet.Fonts.AppendChild(\r\n\t\tnew Font()\r\n\t\t{\r\n\t\t\tFontName = new FontName() { Val = \"Calibri\" },\r\n\t\t\tFontSize = new FontSize() { Val = 11 }\r\n\t\t});\r\n\r\n\tworkStylePart.Stylesheet.TableStyles = new TableStyles() { Count = 0, DefaultTableStyle = \"TableStyleMedium2\", DefaultPivotStyle = \"PivotStyleLight16\" };\r\n\r\n\treturn newDoc;\r\n}\r\n\r\nWorksheetPart CreateWorksheet(SpreadsheetDocument doc, string sheetName)\r\n{\r\n\tvar newWorksheetPart = doc.WorkbookPart.AddNewPart<WorksheetPart>();\r\n\t\r\n\t// Updating the workbook part done via DOM since we just want to append a sheet to the end, and the workbook xml is not so large, loading it into memory won't be a significan cost.\r\n\tif (doc.WorkbookPart.Workbook == null)\r\n\t{\r\n\t\tdoc.WorkbookPart.Workbook = new Workbook();\r\n\t}\r\n\t\r\n\tif (doc.WorkbookPart.Workbook.Sheets == null)\r\n\t{\r\n\t\tdoc.WorkbookPart.Workbook.Sheets = new Sheets();\r\n\t}\r\n\r\n\tSheet sheet = new Sheet() { Id = doc.WorkbookPart.GetIdOfPart(newWorksheetPart), SheetId = Convert.ToUInt32(doc.WorkbookPart.Workbook.Sheets.Count() + 1), Name = sheetName };\r\n\tdoc.WorkbookPart.Workbook.Sheets.Append(sheet);\r\n\r\n\t// Saves data in Workbook DOM tree back to the WorkbookPart.\r\n\tdoc.WorkbookPart.Workbook.Save();\r\n\r\n\treturn newWorksheetPart;\r\n}\r\n```\r\n\r\nSteps to reproduce the behavior:\r\n1. Execute Main method\r\n2. Rename xlsx file to .zip file\r\n3. Extract contents of zip file\r\n4. Review contents of sharedStrings.xml in text editor. Observe issue, that no Shared String has been added.\r\n\r\n**Observed behavior**\r\nThe sharedStrings.xml is minimal, containing only the xml root tag and shared string table tag, with no children.\r\n\r\n**Expected behavior**\r\nThe sharedStrings.xml should have xml defining a shared string item with child Text item with value \"Is Current\"\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows\r\n - Office version [e.g. 16.0.15427.20178]\r\n - .NET Target: (e.g. .NET Framework, .NET Core, UWP, Xamarin...)\r\n - DocumentFormat.OpenXml Version 3.0.2\r\n\r\n**Additional context**\r\nI need to use the SAX model using OpenXmlWriter to write the content, and not the DOM model, as I'm working with large data sets across multiple spreadsheets and doing merge/copy operations, and need to be mindful of memory usage.\r\n"},{"Id":"40505452361","Type":"IssuesEvent","CreatedAt":"2024-07-26T19:20:57","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1755","RelatedDescription":"Closed issue \"Unable to Write Shared String Table Part using OpenXmlWriter\" (#1755) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nWhen using the OpenXmlWriter to write the Shared String Table part, the resulting sharedStrings.xml document saved to disk does not contain any string items. I've created a very simple script that creates an excel document, a default sheet, and tries to updated the shared string table to contain one entry. (The next step would be to use OpenXmlWriter to write one row with one cell with shared string value)\r\n\r\n**To Reproduce**\r\n```\r\nCancellationToken ct = CancellationToken.None;\r\n\r\nvoid Main()\r\n{\r\n\tusing (FileStream destinationFileStream = File.Create(@\"C:\\temp\\Simple_Doc_Using_OpenXml_Sax_SharedString.xlsx\", 1024 * 16))\r\n\tusing (var destinationSpreadsheetDocument = CreateNewSpreadsheet(destinationFileStream))\r\n\t{\r\n\t\tvar newWorksheetPart = CreateWorksheet(destinationSpreadsheetDocument, \"Sheet1\");\r\n\t\t\r\n\t\t// Use XmlWriter to write the SharedString contents - SAX model - writing start to end\r\n\t\tusing (var sharedStringTablePartWriter = OpenXmlWriter.Create(destinationSpreadsheetDocument.WorkbookPart.SharedStringTablePart))\r\n\t\t{\r\n\t\t\tsharedStringTablePartWriter.WriteStartDocument();\r\n\t\t\tsharedStringTablePartWriter.WriteStartElement(new SharedStringTable());\r\n\r\n\t\t\tsharedStringTablePartWriter.WriteElement(new SharedStringItem(new Text(\"Is Current\")));\r\n\r\n\t\t\t// End tag for SharedStringTable element.\r\n\t\t\tsharedStringTablePartWriter.WriteEndElement();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nSpreadsheetDocument CreateNewSpreadsheet(Stream stream)\r\n{\r\n\tSpreadsheetDocument newDoc = SpreadsheetDocument.Create(stream, SpreadsheetDocumentType.Workbook);\r\n\r\n\t// Add a WorkbookPart to the document.\r\n\tWorkbookPart workbookPart = newDoc.AddWorkbookPart();\r\n\t//workbookPart.Workbook = new Workbook();\r\n\r\n\t// Add Sheets section to the Workbook.\r\n\t//Sheets sheets = newDoc.WorkbookPart.Workbook.AppendChild<Sheets>(new Sheets());\r\n\r\n\t// Add a SharedStringTablePart to the WorkbookPart.\r\n\tSharedStringTablePart sharedStringTablePart = workbookPart.AddNewPart<SharedStringTablePart>();\r\n\tsharedStringTablePart.SharedStringTable = new SharedStringTable();\r\n\r\n\t// Add a WorkbookStylesPart to the WorkbookPart, and create default styles.\r\n\tWorkbookStylesPart workStylePart = workbookPart.AddNewPart<WorkbookStylesPart>();\r\n\tworkStylePart.Stylesheet = new Stylesheet();\r\n\r\n\tworkStylePart.Stylesheet.Borders = new Borders() { Count = 1 };\r\n\tworkStylePart.Stylesheet.Borders.AppendChild(new Border { LeftBorder = new LeftBorder(), RightBorder = new RightBorder(), TopBorder = new TopBorder(), BottomBorder = new BottomBorder(), DiagonalBorder = new DiagonalBorder() });\r\n\r\n\tworkStylePart.Stylesheet.CellFormats = new CellFormats() { Count = 1 };\r\n\tworkStylePart.Stylesheet.CellFormats.AppendChild(new CellFormat { NumberFormatId = 0, FontId = 0, FillId = 0, BorderId = 0 }); // empty one for index 0, seems to be required\r\n\r\n\tworkStylePart.Stylesheet.CellStyleFormats = new CellStyleFormats() { Count = 1 };\r\n\tworkStylePart.Stylesheet.CellStyleFormats.AppendChild(new CellFormat { NumberFormatId = 0, FontId = 0, FillId = 0, BorderId = 0, FormatId = 0 });\r\n\r\n\tworkStylePart.Stylesheet.DifferentialFormats = new DifferentialFormats() { Count = 0 };\r\n\r\n\tworkStylePart.Stylesheet.Fills = new Fills() { Count = 2 };\r\n\tworkStylePart.Stylesheet.Fills.AppendChild(new Fill { PatternFill = new PatternFill { PatternType = PatternValues.None } }); // required, reserved by Excel\r\n\tworkStylePart.Stylesheet.Fills.AppendChild(new Fill { PatternFill = new PatternFill { PatternType = PatternValues.Gray125 } }); // required, reserved by Excel\r\n\r\n\tworkStylePart.Stylesheet.Fonts = new Fonts() { Count = 1 };\r\n\tworkStylePart.Stylesheet.Fonts.AppendChild(\r\n\t\tnew Font()\r\n\t\t{\r\n\t\t\tFontName = new FontName() { Val = \"Calibri\" },\r\n\t\t\tFontSize = new FontSize() { Val = 11 }\r\n\t\t});\r\n\r\n\tworkStylePart.Stylesheet.TableStyles = new TableStyles() { Count = 0, DefaultTableStyle = \"TableStyleMedium2\", DefaultPivotStyle = \"PivotStyleLight16\" };\r\n\r\n\treturn newDoc;\r\n}\r\n\r\nWorksheetPart CreateWorksheet(SpreadsheetDocument doc, string sheetName)\r\n{\r\n\tvar newWorksheetPart = doc.WorkbookPart.AddNewPart<WorksheetPart>();\r\n\t\r\n\t// Updating the workbook part done via DOM since we just want to append a sheet to the end, and the workbook xml is not so large, loading it into memory won't be a significan cost.\r\n\tif (doc.WorkbookPart.Workbook == null)\r\n\t{\r\n\t\tdoc.WorkbookPart.Workbook = new Workbook();\r\n\t}\r\n\t\r\n\tif (doc.WorkbookPart.Workbook.Sheets == null)\r\n\t{\r\n\t\tdoc.WorkbookPart.Workbook.Sheets = new Sheets();\r\n\t}\r\n\r\n\tSheet sheet = new Sheet() { Id = doc.WorkbookPart.GetIdOfPart(newWorksheetPart), SheetId = Convert.ToUInt32(doc.WorkbookPart.Workbook.Sheets.Count() + 1), Name = sheetName };\r\n\tdoc.WorkbookPart.Workbook.Sheets.Append(sheet);\r\n\r\n\t// Saves data in Workbook DOM tree back to the WorkbookPart.\r\n\tdoc.WorkbookPart.Workbook.Save();\r\n\r\n\treturn newWorksheetPart;\r\n}\r\n```\r\n\r\nSteps to reproduce the behavior:\r\n1. Execute Main method\r\n2. Rename xlsx file to .zip file\r\n3. Extract contents of zip file\r\n4. Review contents of sharedStrings.xml in text editor. Observe issue, that no Shared String has been added.\r\n\r\n**Observed behavior**\r\nThe sharedStrings.xml is minimal, containing only the xml root tag and shared string table tag, with no children.\r\n\r\n**Expected behavior**\r\nThe sharedStrings.xml should have xml defining a shared string item with child Text item with value \"Is Current\"\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows\r\n - Office version [e.g. 16.0.15427.20178]\r\n - .NET Target: (e.g. .NET Framework, .NET Core, UWP, Xamarin...)\r\n - DocumentFormat.OpenXml Version 3.0.2\r\n\r\n**Additional context**\r\nI need to use the SAX model using OpenXmlWriter to write the content, and not the DOM model, as I'm working with large data sets across multiple spreadsheets and doing merge/copy operations, and need to be mindful of memory usage.\r\n"},{"Id":"40505452055","Type":"PullRequestEvent","CreatedAt":"2024-07-26T19:20:56","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1760","RelatedDescription":"Merged pull request \"Unload root element if Part.GetStream updates the underlying value\" (#1760) at dotnet/Open-XML-SDK","RelatedBody":"Fixes #1755\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-08-01T03:30:22.1442046Z","RunDurationInMilliseconds":573}