{"Data":{"Sdk":{"Events":[{"Id":"31563474056","Type":"IssuesEvent","CreatedAt":"2023-09-03T14:29:54","Actor":"sergey-tihon","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1519","RelatedDescription":"Opened issue \"Breaking change with Open XML SDK 3.0 in MarkupCompatibilityProcessMode.ProcessAllParts\" (#1519) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nDocumentFormat.OpenXml `3.0.0-beta0002` removes custom attributes from elements on save, when `WordprocessingDocument` opened with `MarkupCompatibilityProcessSettings(MarkupCompatibilityProcessMode.ProcessAllParts, FileFormatVersions.Office2007)` \r\n\r\nIs it a bug or somewhere documented breaking change?\r\n\r\n**Screenshots**\r\nI've created a [repro code with a sample document](https://github.com/sergey-tihon/oxml-custom-attrs/blob/master/oxml3.tests/UnitTest.cs).\r\n\r\nThis sample \r\n1. Open a sample Word file using all 3 `MarkupCompatibilityProcessMode`s\r\n2. Load `MainDocumentPart` as `XDocument`\r\n3. Add custom `Unid` attribute (from fictional `pt14` namespace) to all elements\r\n4. Add namespace to the list of `Ignorable` namespace\r\n5. Save the document into a new file\r\n6. Validate that the saved file contains added attributes. \r\n\r\nAs you can see on the screenshot everything works as expected using `2.20.0` but does not work using `3.0.0-beta0002` with `MarkupCompatibilityProcessMode.ProcessAllParts`\r\n\r\n<img width=\"850\" alt=\"image\" src=\"https://github.com/dotnet/Open-XML-SDK/assets/1197905/998dfd1d-84bf-4d1a-93a2-e933c50ed5fc\">\r\n\r\n**To Reproduce**\r\n\r\nSteps to reproduce the behavior:\r\n1. Clone repo https://github.com/sergey-tihon/oxml-custom-attrs/tree/master\r\n2. Run unit test\r\n\r\n**Observed behavior**\r\nDocument saved by `v2.20` with `MarkupCompatibilityProcessMode.ProcessAllParts `\r\n<img width=\"1396\" alt=\"image\" src=\"https://github.com/dotnet/Open-XML-SDK/assets/1197905/7a97334e-a542-469f-aa5a-212df97191aa\">\r\n\r\nDocument saved by `v3.0.0-beta0002` with `MarkupCompatibilityProcessMode.ProcessAllParts `\r\n<img width=\"1420\" alt=\"image\" src=\"https://github.com/dotnet/Open-XML-SDK/assets/1197905/3500546f-173e-4b33-a367-78f23aa0fe66\">\r\n\r\n\r\n**Expected behavior**\r\nThe document should be saved as-is without removing attributes from Ignorable namespace.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: macOS\r\n - .NET Target: .NET 7\r\n - DocumentFormat.OpenXml Version: 3.0.0-beta0002\r\n\r\n**Additional context**\r\nFound [during migrating](https://github.com/sergey-tihon/Clippit/pull/63) my copy of PowerTools to SDK v3\r\n"},{"Id":"31508357508","Type":"IssuesEvent","CreatedAt":"2023-08-31T12:33:35","Actor":"BogdanGeorge","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1518","RelatedDescription":"Opened issue \"When updating a SpreadsheetDocument opened using a MemoryStream, the stream is not updated\" (#1518) at dotnet/Open-XML-SDK","RelatedBody":"When updating an Excel file downloaded using http request then opened as SpreadsheetDocument using a MemoryStream, the stream is not updated\r\n\r\nCode:\r\n\r\n ```\r\n   using (var memoryStream = new MemoryStream())\r\n   {\r\n          var byteArray = await fileReader.ReadFileFromUri(reportFileSasUri);\r\n          memoryStream.Write(byteArray, 0, (int)byteArray.Length);\r\n          using (var excelWorkbook = SpreadsheetDocument.Open(memoryStream, true))\r\n          {\r\n               AppendDictionaryToSheet(excelWorkbook, \"Params\", paramsDictionary)\r\n               \r\n               await fileWriter.WriteToBlobStorage(memoryStream);\r\n          }\r\n   }\r\n\r\n      public static SpreadsheetDocument AppendDictionaryToSheet(SpreadsheetDocument excelWorkbook, string sheetName, Dictionary<string, object> dictionary, bool hideSheet = false)\r\n    {\r\n        WorkbookPart workbookPart = excelWorkbook.WorkbookPart;\r\n        WorksheetPart worksheetPart = GetWorksheetPartByName(workbookPart, sheetName);\r\n\r\n        if (worksheetPart == null)\r\n        {\r\n            throw new Exception($\"Table from '{sheetName}' not found in the worksheet.\");\r\n        }\r\n\r\n        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();\r\n        string lastCell = GetLastCellWithTextInColumn(sheetData, \"A\");\r\n        string startingColumn = GetColumnName(lastCell);\r\n        int startingRow = GetRowNumber(lastCell) + 1;\r\n\r\n        foreach (var kvp in dictionary)\r\n        {\r\n            var column = GetColumnName(startingColumn);\r\n            Row newRow = new Row() { RowIndex = (uint)startingRow };\r\n\r\n            Cell keyCell = CreateCell(kvp.Key, column, startingRow);\r\n            newRow.Append(keyCell);\r\n\r\n            column = GetNextColumn(startingColumn);\r\n            Cell valueCell = CreateCell(kvp.Value, column, startingRow);\r\n            newRow.Append(valueCell);\r\n\r\n            sheetData.Append(newRow);\r\n            startingRow++;\r\n        }\r\n\r\n        Sheet sheet = workbookPart.Workbook.Descendants<Sheet>().FirstOrDefault(s => s.Name == sheetName);\r\n        if (sheet != null && hideSheet)\r\n        {\r\n            sheet.State = SheetStateValues.Hidden;\r\n        }\r\n\r\n        workbookPart.Workbook.CalculationProperties = new CalculationProperties { ForceFullCalculation = true };\r\n        worksheetPart.Worksheet.Save();\r\n\r\n        return excelWorkbook;\r\n    }\r\n\r\n```\r\n\r\nBasically what I tried to implement is something similar to the example from here:\r\nhttps://learn.microsoft.com/en-us/previous-versions/office/developer/officetalk2010/ee945362(v=office.11)#creating-resizable-memory-streams-from-byte-arrays\r\n\r\nThe only difference is that the file is not read from local, is read using an http client from an external storage and instead of writing the stream to local I'm writing it to an external storage.\r\n\r\nIf instead of relying on memory stream to automatically be updated I create a new stream like\r\n`\r\nvar newMemoryStream = new MemoryStream();\r\nexcelWorkbook .Clone(newMemoryStream);\r\n`\r\nWorks fine..but i want to avoid duplicating the streams in memory.\r\n"},{"Id":"31493956691","Type":"PullRequestEvent","CreatedAt":"2023-08-30T23:37:28","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1517","RelatedDescription":"Merged pull request \"update version in package.yml, README, and delete ADO build folder\" (#1517) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"31493275172","Type":"PullRequestEvent","CreatedAt":"2023-08-30T22:44:11","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1517","RelatedDescription":"Opened pull request \"update version in package.yml, README, and delete ADO build folder\" (#1517) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"31435324191","Type":"IssuesEvent","CreatedAt":"2023-08-29T01:36:35","Actor":"github-actions[bot]","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1516","RelatedDescription":"Closed issue \"Manual approval required for workflow run 6004156266: Approval for publishing to Nuget.org\" (#1516) at dotnet/Open-XML-SDK","RelatedBody":"Please approve or deny the deployment to Nuget.org\n\nWorkflow is pending manual review.\nURL: https://github.com/dotnet/Open-XML-SDK/actions/runs/6004156266\n\nRequired approvers: [twsouthwick tomjebo mikeebowen]\n\nRespond \"approved\", \"approve\", \"lgtm\", \"yes\" to continue workflow or \"denied\", \"deny\", \"no\" to cancel."}],"ResultType":"GitHubEvent"}},"RunOn":"2023-09-04T03:30:23.4037438Z","RunDurationInMilliseconds":782}