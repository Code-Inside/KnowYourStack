{"Data":{"Sdk":{"Events":[{"Id":"22594108556","Type":"PullRequestEvent","CreatedAt":"2022-06-28T23:38:20","Actor":"mikeebowen","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1176","RelatedDescription":"Merged pull request \"update changelog\" (#1176) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"22593609910","Type":"PullRequestEvent","CreatedAt":"2022-06-28T22:47:25","Actor":"mikeebowen","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1176","RelatedDescription":"Opened pull request \"update changelog\" (#1176) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"22593252634","Type":"PullRequestEvent","CreatedAt":"2022-06-28T22:15:14","Actor":"mikeebowen","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1171","RelatedDescription":"Merged pull request \"M365 May 2022 Update\" (#1171) at OfficeDev/Open-XML-SDK","RelatedBody":"\r\n- Added PowerPointCommentPart relationship to SlidePart (https://github.com/OfficeDev/Open-XML-SDK/pull/1137)\r\n  - This deprecates the relationship between PowerPointCommentPart and PresentationPart, which will be removed in a future version\r\n- Removed dogfood Reactions feature"},{"Id":"22592744619","Type":"IssuesEvent","CreatedAt":"2022-06-28T21:39:26","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/962","RelatedDescription":"Closed issue \"Consider providing w14:paraId and w14:textId generators\" (#962) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\n`w:p` and `w:tr` elements can have the `w14:paraId` and `w14:textId` attributes, which are defined in [MS-DOCX](https://docs.microsoft.com/en-us/openspecs/office_standards/ms-docx/b839fe1f-e1ca-4fa6-8c26-5954d0abbccd) as `ST_LongHexNumber` values that are unique within the document part as well as greater than `0` and less than `0x80000000`.\r\n\r\nMicrosoft Word uses a random number generator to generate the values (noting that is not a requirement).\r\n\r\nAt the moment, the `Paragraph` (`w:p`) and `TableRow` (`w:tr`) classes do not generate values for the `ParagraphId` (`w14:paraId`) and `TextId` (`w14:textId`) attributes. There are also no utility classes or methods for producing compliant values.\r\n\r\nTherefore, the question is whether we want to offer any functionality for generating or validating those attribute values.\r\n\r\nProviding utility methods would be very straightforward. For example, here is the code (taken from two classes) that I am using in my codebase for creating random `ST_LongHexNumber` values (optionally making sure they are less than `0x80000000` while always guaranteeing they are greater than `0`):\r\n\r\n```csharp\r\nprivate static readonly RNGCryptoServiceProvider Generator = new RNGCryptoServiceProvider();\r\n\r\n/// <summary>\r\n/// Creates an ST_LongHexNumber value, masking the most significant byte with\r\n/// the given <paramref name=\"msbMask\" />.\r\n/// </summary>\r\n/// <param name=\"msbMask\">The most significant byte mask.</param>\r\npublic static string CreateRandomLongHexNumber(byte msbMask = 0xff)\r\n{\r\n    // Create a four-byte random number, noting that the first byte (data[0])\r\n    // will become the most significant byte in the string value created by\r\n    // the ToHexString() method.\r\n    var data = new byte[4];\r\n    Generator.GetNonZeroBytes(data);\r\n    data[0] &= msbMask;\r\n\r\n    return data.ToHexString();\r\n}\r\n\r\n/// <summary>\r\n/// Converts the given value into a hexadecimal string, with the first\r\n/// byte in the list being the most significant byte in the resulting\r\n/// string.\r\n/// </summary>\r\n/// <param name=\"source\">The list of bytes to be converted.</param>\r\n/// <returns>A hexadecimal string.</returns>\r\npublic static string ToHexString(this IReadOnlyList<byte> source)\r\n{\r\n    var dest = new char[source.Count * 2];\r\n\r\n    var i = 0;\r\n    var j = 0;\r\n\r\n    while (i < source.Count)\r\n    {\r\n        byte b = source[i++];\r\n        dest[j++] = ToCharUpper(b >> 4);\r\n        dest[j++] = ToCharUpper(b);\r\n    }\r\n\r\n    return new string(dest);\r\n}\r\n\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\nprivate static char ToCharUpper(int value)\r\n{\r\n    value &= 0xF;\r\n    value += '0';\r\n\r\n    if (value > '9')\r\n    {\r\n        value += ('A' - ('9' + 1));\r\n    }\r\n\r\n    return (char) value;\r\n}\r\n```\r\n\r\nA first step could be to provide utility or extension methods without changing the `Paragraph` and `TableRow` classes.\r\n\r\nA second, optional step could be to enhance the `Paragraph` and `TableRow` classes by adding instance methods like the following (noting that I have not put much thought into this yet and using the `Paragraph` class as an example):\r\n\r\n```csharp\r\n// Normal setter methods.\r\npublic void SetRandomParagraphId();\r\npublic void SetRandomTextId();\r\n\r\n// Methods that would be handy for pure functional transformation scenarios.\r\n// Like the With() method we added earlier.\r\npublic Paragraph WithNewRandomParagraphId();\r\npublic Paragraph WithNewRandomTextId();\r\n```\r\n\r\n**Information**\r\n\r\n- .NET Target: all\r\n- DocumentFormat.OpenXml Version: latest"},{"Id":"22592725071","Type":"IssuesEvent","CreatedAt":"2022-06-28T21:38:34","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1109","RelatedDescription":"Closed issue \"Spreadsheet.Open crash in Kestrel web server (.NET 6) since synch reads are not allowed\" (#1109) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nWhen opening an excel document in .NET 6 (Kestrel web server) I get an exception that synch reads are not allowed. And this is for a good reason, no libraries should force user to do blocking operations because it limits where the library can be used (on a web server in this case).\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET 6\r\n- DocumentFormat.OpenXml Version: 2.15\r\n\r\n**Repro**\r\n\r\nCall Spreadsheet.Load from a ASP.NET Core Action or in Blazor Server callback.\r\n\r\n**Observed**\r\n\r\nSystem.NotSupportedException: Synchronous reads are not supported.\r\n   at Microsoft.AspNetCore.Components.Forms.BrowserFileStream.Read(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.IO.Stream.CopyTo(Stream destination, Int32 bufferSize)\r\n   at System.IO.Stream.CopyTo(Stream destination)\r\n   at System.IO.Compression.ZipArchive..ctor(Stream stream, ZipArchiveMode mode, Boolean leaveOpen, Encoding entryNameEncoding)\r\n   at System.IO.Packaging.ZipPackage..ctor(Stream s, FileMode packageFileMode, FileAccess packageFileAccess)\r\n   at System.IO.Packaging.Package.Open(Stream stream, FileMode packageMode, FileAccess packageAccess)\r\n   at DocumentFormat.OpenXml.Packaging.PackageLoader.OpenCore(Stream stream, Boolean readWriteMode)\r\n   at DocumentFormat.OpenXml.Packaging.SpreadsheetDocument.Open(Stream stream, Boolean isEditable, OpenSettings openSettings)\r\n   at DocumentFormat.OpenXml.Packaging.SpreadsheetDocument.Open(Stream stream, Boolean isEditable)\r\n\r\n**Expected**\r\n\r\nI would expect there to be a Spreadsheet.OpenAsync or some similar mechanism to prevent blocking IO while loading the document."},{"Id":"22592559780","Type":"IssuesEvent","CreatedAt":"2022-06-28T21:29:47","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1136","RelatedDescription":"Closed issue \"Ambiguous OpenXmlElement constructors\" (#1136) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nGreetings.\r\nSome time ago we started analyzing our code with [SonarQube](https://www.sonarqube.org/), and I have noticed a large number of reports in cases like these:\r\n\r\n```csharp\r\nplaceholder.InsertBeforeSelf(new Paragraph(new ParagraphProperties(new SpacingBetweenLines() { After = \"0\" })));\r\n```\r\n\r\nwhich lead to warnings like this:\r\n\r\n>[S3220](https://rules.sonarsource.com/csharp/RSPEC-3220): Review this call, which partially matches an overload without 'params'. The partial match is 'Paragraph.Paragraph(IEnumerable<DocumentFormat.OpenXml.OpenXmlElement> childElements)'.\r\n\r\nThis happens because\r\n- all (most?) `OpenXmlElement`s define two constructors:\r\n    - one accepting an `IEnumerable<OpenXmlElement>`\r\n    - one accepting an `OpenXmlElement[]` as `params`\r\n- `OpenXmlElement` implements `IEnumerable<OpenXmlElement>`\r\n\r\nA call with a single `OpenXmlElement` as the argument is correctly resolved with the params[] overload, so this does not cause actual problems. However, this report shows this usage is king of ambiguous which I agree with (note also `OpenXmlElement.Append` and `Linq.Enumerable.Append`).\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Core (irrelevant)\r\n- DocumentFormat.OpenXml Version: 2.16.0 (and previous)\r\n\r\n**Expected**\r\n\r\nI guess adding an `OpenXmlElement(OpenXmlElement)` constructor would solve this issue, but I understand this would be an immense undertaking (every single OpenXmlElement would have to include it) which is likely not worth the time for this little gain. Moreover, while I understand and agree with this specific rule, I do not know how SonarQube rules are regarded in general / whether others share this sentiment.\r\n\r\nPlease consider this as just a comment about something I noticed and not as a strong request."},{"Id":"22592520565","Type":"IssuesEvent","CreatedAt":"2022-06-28T21:27:41","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1175","RelatedDescription":"Opened issue \"Trimming: EnumInfoLookup\" (#1175) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nWe should generate a feature that can produce enum info without reflection. This should be addressed in two phases:\r\n\r\n1. Move enum info retrieval to a separate feature\r\n2. Remove reflection\r\n\r\n*Warning:*\r\n\r\n```\r\nW:\\openxml\\sdk\\src\\DocumentFormat.OpenXml\\SimpleTypes\\EnumInfoLookup.cs(123,33): warning IL2090: 'this' argument do\r\nes not satisfy 'DynamicallyAccessedMemberTypes.PublicFields', 'DynamicallyAccessedMemberTypes.NonPublicFields' in c\r\nall to 'System.Reflection.TypeInfo.GetDeclaredField(String)'. The generic parameter 'TEnum' of 'DocumentFormat.Open\r\nXml.EnumInfoLookup<TEnum>' does not have matching annotations. The source value must declare at least the same requ\r\nirements as those declared on the target location it is assigned to. [W:\\openxml\\sdk\\src\\DocumentFormat.OpenXml\\Doc\r\numentFormat.OpenXml.csproj]\r\n```"},{"Id":"22592505392","Type":"IssuesEvent","CreatedAt":"2022-06-28T21:26:35","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1174","RelatedDescription":"Opened issue \"Trimming: ReflectioNBasedRootElementFactory\" (#1174) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nWe should generate a feature that can create root elements without resorting to reflection.\r\n\r\n*Warning:*\r\n\r\n```\r\nW:\\openxml\\sdk\\src\\DocumentFormat.OpenXml\\Features\\ReflectionBasedRootElementFactory.cs(53,25): warning IL2026: Usi\r\nng member 'System.Reflection.Assembly.GetTypes()' which has 'RequiresUnreferencedCodeAttribute' can break functiona\r\nlity when trimming application code. Types might be removed. [W:\\openxml\\sdk\\src\\DocumentFormat.OpenXml\\DocumentFor\r\nmat.OpenXml.csproj]\r\n```"},{"Id":"22592488663","Type":"IssuesEvent","CreatedAt":"2022-06-28T21:25:26","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1173","RelatedDescription":"Opened issue \"Trimming: ClassActivator{T} usage\" (#1173) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nRemove usage of `ClassActivator<T>` and get activators without using reflection.\r\n\r\n*Warning:*\r\n```\r\nsrc\\DocumentFormat.OpenXml\\Features\\ClassActivator{T}.cs(26,31): warning IL2070: 'this' argument doe\r\ns not satisfy 'DynamicallyAccessedMemberTypes.PublicConstructors', 'DynamicallyAccessedMemberTypes.NonPublicConstru\r\nctors' in call to 'System.Type.GetConstructor(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[]\r\n)'. The parameter 'type' of method 'DocumentFormat.OpenXml.Features.ClassActivator<T>.CreateActivator(Type)' does n\r\not have matching annotations. The source value must declare at least the same requirements as those declared on the\r\n target location it is assigned to. [src\\DocumentFormat.OpenXml\\DocumentFormat.OpenXml.csproj]\r\n```"},{"Id":"22592461003","Type":"IssuesEvent","CreatedAt":"2022-06-28T21:23:49","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1172","RelatedDescription":"Opened issue \"Enable trimming\" (#1172) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nWe want to ensure that the library is compatible with the trimming in .NET 6+. In order to enable this, a few warnings must be addressed. These all appear to be somewhere in the M-L range of effort, generally requiring a bit of a redesign."},{"Id":"22591167123","Type":"PullRequestEvent","CreatedAt":"2022-06-28T20:01:55","Actor":"mikeebowen","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1171","RelatedDescription":"Opened pull request \"M365 May 2022 Update\" (#1171) at OfficeDev/Open-XML-SDK","RelatedBody":"\r\n- Added PowerPointCommentPart relationship to SlidePart (https://github.com/OfficeDev/Open-XML-SDK/pull/1137)\r\n  - This deprecates the relationship between PowerPointCommentPart and PresentationPart, which will be removed in a future version\r\n- Removed dogfood Reactions feature"},{"Id":"22569472065","Type":"PullRequestEvent","CreatedAt":"2022-06-27T21:55:36","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1170","RelatedDescription":"Merged pull request \"Adding msbuild.binlog to .gitignore\" (#1170) at OfficeDev/Open-XML-SDK","RelatedBody":""}],"ResultType":"GitHubEvent"}},"RunOn":"2022-06-29T03:30:35.2701664Z","RunDurationInMilliseconds":613}