{"Data":{"Sdk":{"Events":[{"Id":"12409652778","Type":"IssuesEvent","CreatedAt":"2020-05-22T03:42:48","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/566","RelatedDescription":"Reopened issue \"SAX Approach Replace Example\" (#566) at OfficeDev/Open-XML-SDK","RelatedBody":"I'm looking for an example of using the SAX approach (instead of DOM) to open a large file and perform a replace on a given value, then save the file.\r\n\r\nI think this would be a useful addition to the [Documentation](https://docs.microsoft.com/en-gb/office/open-xml/open-xml-sdk).\r\n\r\nHow to: Search and replace text in a document part (Open XML SDK)\r\nhttps://docs.microsoft.com/en-us/office/open-xml/how-to-search-and-replace-text-in-a-document-part\r\n\r\nThis uses a `Stream`.\r\n\r\nHow to: Parse and read a large spreadsheet document (Open XML SDK)\r\nhttps://docs.microsoft.com/en-us/office/open-xml/how-to-parse-and-read-a-large-spreadsheet\r\n\r\n```csharp\r\n// The SAX approach.\r\nstatic void ReadExcelFileSAX(string fileName)\r\n{\r\n    using (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(fileName, false))\r\n    {\r\n        WorkbookPart workbookPart = spreadsheetDocument.WorkbookPart;\r\n        WorksheetPart worksheetPart = workbookPart.WorksheetParts.First();\r\n\r\n        OpenXmlReader reader = OpenXmlReader.Create(worksheetPart);\r\n        string text;\r\n        while (reader.Read())\r\n        {\r\n            if (reader.ElementType == typeof(CellValue))\r\n            {\r\n                text = reader.GetText();\r\n                Console.Write(text + \" \");\r\n            }\r\n        }\r\n        Console.WriteLine();\r\n        Console.ReadKey();\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\nIf I read in the \"text\" and wish to replace this:\r\n\r\n```csharp\r\nusing (WordprocessingDocument wordDoc = WordprocessingDocument.Open(filePath, true))\r\n{\r\n    Document document = wordDoc.MainDocumentPart.Document;\r\n    OpenXmlReader reader = OpenXmlReader.Create(document);\r\n    while (reader.Read())\r\n    {\r\n        //OpenXmlElement element = reader.LoadCurrentElement();\r\n        //text = element.InnerText;\r\n        text = reader.GetText();\r\n    }\r\n}\r\n```\r\n\r\n`OpenXmlWriter` expects an `OpenXmlPart` or `Stream` when you create it.\r\n\r\n```csharp\r\nOpenXmlWriter writer = OpenXmlWriter.Create(#);\r\nwriter.WriteStartElement(reader);\r\nwriter.WriteElement(#);\r\nwriter.WriteEndElement();\r\nwriter.Close();\r\n```\r\n\r\nWhat is the supported approach/method for this?\r\n\r\nUsing the DOM approach on large files can cause memory exceptions.\r\n\r\n---\r\n\r\nThere are a number of blog posts documenting how to use the `OpenXmlWriter` but this is for creating new files or adding new elements to an existing file, not updating existing data.\r\n\r\n**Parsing and Reading Large Excel Files with the Open XML SDK**\r\nhttp://blogs.msdn.com/b/brian_jones/archive/2010/05/27/parsing-and-reading-large-excel-files-with-the-open-xml-sdk.aspx [Dead Link]\r\nhttps://web.archive.org/web/20151205145806/http://blogs.msdn.com/b/brian_jones/archive/2010/05/27/parsing-and-reading-large-excel-files-with-the-open-xml-sdk.aspx\r\n\r\n**Writing Large Excel Files with the Open XML SDK**\r\nhttp://blogs.msdn.com/b/brian_jones/archive/2010/06/22/writing-large-excel-files-with-the-open-xml-sdk.aspx [Dead Link]\r\nhttps://web.archive.org/web/20160216062257/http://blogs.msdn.com/b/brian_jones/archive/2010/06/22/writing-large-excel-files-with-the-open-xml-sdk.aspx\r\n\r\n**Performance issue while reading/writing large excel files using OpenXML SDK**\r\nhttp://tech-turf.blogspot.com/2015/10/performance-issue-while-readingwriting.html\r\n\r\n**How to read and write Excel cells with OpenXML and C#**\r\nhttp://fczaja.blogspot.com/2013/05/how-to-read-and-write-excel-cells-with.html\r\n\r\n**How to properly use OpenXmlWriter to write large Excel files**\r\nhttp://polymathprogrammer.com/2012/08/06/how-to-properly-use-openxmlwriter-to-write-large-excel-files/"},{"Id":"12408585971","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:37","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/42","RelatedDescription":"Closed issue \"WordprocessingML PageMargin attributes' type not compliant\" (#42) at OfficeDev/Open-XML-SDK","RelatedBody":"I noticed that we use Int32 and UInt32 to store page margin values (left, top, right, bottom). However, the spec (ยง22.9.2.14 ST_TwipsMeasure) specifies that the type of the value depends on the value itself. It can be an integer or a decimal value with a unit specifier.\nThe result is there are some documents that can't be properly red, like those generated by Google Docs, because it uses decimal values for page margins.\n"},{"Id":"12408585932","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:37","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/90","RelatedDescription":"Closed issue \"SpreadSheet custom map add x: to defaultNamespace\" (#90) at OfficeDev/Open-XML-SDK","RelatedBody":"Changing an OpenEmlElement in a CustomXmlMapping adds the prefix x to the default namespace.\nThis results in the new xlsx file cant map to the schemas in excel.\n"},{"Id":"12408585897","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:36","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/143","RelatedDescription":"Closed issue \"Add constructor overload to validator that determines file format version instead of defaulting to 2007\" (#143) at OfficeDev/Open-XML-SDK","RelatedBody":"From #8 this is a request for fixing and improving default handling for validator ctor.\r\n\r\n\"The constructor of the validator requires me to specify against which fileformat (2007/2010/2013) to validate. How can I determine the file format of an existing document? If that's possible, why doesn't the default constructor of the validator do so, instead of defaulting to 2007?\"\r\n\r\n"},{"Id":"12408585837","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:36","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/166","RelatedDescription":"Closed issue \"Organize test infrastructure\" (#166) at OfficeDev/Open-XML-SDK","RelatedBody":"The tests need to be cleaned up in order to decrease run time (such as is shown in #186). Things that need to be done:\r\n\r\n- [x] Remove test context - this is unused and appears to be a remnant of an old test system (#231)\r\n- [x] Use xunit's ITestOutputHelper instead of creating custom log files (#230)\r\n- [x] Move test assets to be under the test directory so they can more easily be included in output using built-in tasks (#229)\r\n- [x] Consolidate OpenXmlDomTestExtensions - these seem to be duplicated and structured in a way so there is no single point where a file is opened. In order to speed up tests, this needs to be consolidated (#228)\r\n- [x] Redo \"Safelist.xml\" comparisons. This uses many regex comparisons to search for known issues and drastically slows the tests down (see https://github.com/OfficeDev/Open-XML-SDK/blob/vNext/DocumentFormat.OpenXml.Tests/OpenXmlDomTaskLibrary/OpenXmlDomTaskLibrary.cs#L40-L73)\r\n- [x] Use embedded resources instead of flat files so that open operations can be done in-memory instead of via file paths. File IO is a huge bottleneck for these tests.\r\n  - [x] Use test assets for `CreateDocumentTestClass` (#395)\r\n  - [x] Use test assets for `DocumentTraverseTests.Traverse[xxx]Document` (#403)\r\n  - [x] Use test assets for `GenerateList4LowLevelTest` (#405)\r\n  - [x] Use test assets for `MarkupCompatibilityTest` (#414)\r\n  - [x] Use test assets for `OpenXmlCompositeElementTestClass` (#402)\r\n  - [x] Use test assets for `OpenXmlReaderWriterTest.[bug247883|bug251835_ReaderDispose]` (#404)\r\n  - [x] Use test assets for `OpenXmlRootElementTestClass` (#397)\r\n- [x] Create a test assets library to minimize compilation times\r\n- [x] Remove current test util helpers that generate files (#443)\r\n- [ ] Remove `VerifiableLog` and use `ITestOutputHelper`\r\n- [ ] Move large generated tests to new assembly\r\n"},{"Id":"12408585777","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:35","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/204","RelatedDescription":"Closed issue \"Add SVG as ImagePartType for Office 2016 support\" (#204) at OfficeDev/Open-XML-SDK","RelatedBody":"Hi,\r\n\r\nOffice 2016 now (finally) supports svg as a vector image format (https://support.office.com/en-gb/article/Insert-SVG-images-in-Microsoft-Office-69f29d39-194a-4072-8c35-dbe5e7ea528c)\r\nAs far as I can see the OpenXml SDK does not currently have support for this yet (as ImagePartType for example).\r\nAre there any plans of adding it in the future, or any roadblocks that might inhibit implementing it?"},{"Id":"12408585739","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:34","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/224","RelatedDescription":"Closed issue \"Add custom part validation per MS-OI29500 3.5 and ISO/IEC 29500 15.2.5 and 15.2.6\" (#224) at OfficeDev/Open-XML-SDK","RelatedBody":"The Open-XML-SDK (at least at the time of writing) does not fail to validate documents which have missing required properties per MS-OI29500 3.5 and ISO/IEC 29500 15.2.5 and 15.2.6.\r\n\r\nOne way of creating these documents today is to go to an existing document library on a SharePoint server.  Ensure this document library has Office Documents in it.  Add a new required field to the document library.  if you then try to edit one of the files, it should not let you save due to the missing required fields.\r\n\r\nThat's because, as outlined in the standards specified above, the customXml parts list the required properties and the values of those properties.  The Open-XML-SDK doesn't provide an easy way to validate that those properties are all set."},{"Id":"12408585698","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:34","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/244","RelatedDescription":"Closed issue \"System.IO.IOException: Stream was too long error on .NET Core 2.0 application\" (#244) at OfficeDev/Open-XML-SDK","RelatedBody":"In .NET Core 2 console application ([ConsoleApp1.zip](https://github.com/OfficeDev/Open-XML-SDK/files/1309342/ConsoleApp1.zip)) writing a large Excel file stops with the following error:\r\nSystem.IO.IOException: Stream was too long.\r\n   at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.IO.Compression.WrappedStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.Xml.XmlUtf8RawTextWriter.FlushBuffer()\r\n   at System.Xml.XmlUtf8RawTextWriter.WriteAttributeTextBlock(Char* pSrc, Char* pSrcEnd)\r\n   at System.Xml.XmlUtf8RawTextWriter.WriteString(String text)\r\n   at System.Xml.XmlWellFormedWriter.WriteString(String text)\r\n   at DocumentFormat.OpenXml.OpenXmlElement.WriteAttributesTo(XmlWriter xmlWriter)\r\n   at DocumentFormat.OpenXml.OpenXmlElement.WriteTo(XmlWriter xmlWriter)\r\n   at DocumentFormat.OpenXml.OpenXmlPartWriter.WriteElement(OpenXmlElement elementObject)\r\n   at ConsoleApp1.Program.WriteRandomValuesSAX(String fileName, String sheetName) in C:\\Users\\anton\\Documents\\Visual Studio 2017\\Projects\\ConsoleApplication2\\ConsoleApp1\\Program.cs:line 80\r\n   at ConsoleApp1.Program.Main(String[] args) in C:\\Users\\anton\\Documents\\Visual Studio 2017\\Projects\\ConsoleApplication2\\ConsoleApp1\\Program.cs:line 105\r\n\r\nAnd application workset size was growed up to 4 GiB. But there is a x64 application, so the process memory is not limited by 4GiB\r\n\r\nMeanwhile in .NET FW4.7 same application ([ConsoleApp2.zip](https://github.com/OfficeDev/Open-XML-SDK/files/1309348/ConsoleApp2.zip)) works perfectly with 10 MB workset size"},{"Id":"12408585641","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:34","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/297","RelatedDescription":"Closed issue \"Unhandled OpenXmlPackageException when opening workbook which contains malformed email hyperlinks\" (#297) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\nAn unhandled OpenXmlPackageException exception is thrown by SpreadsheetDocument.Open when the workbook to be opened contains a malformed email hyperlink, such as mailto:one@.\r\nAs a result, the xlsx file cannot be opened while it opens fine in Excel.\r\n\r\n**Information**\r\n- .NET Target: .NET Framework 4.5.2\r\n- DocumentFormat.OpenXml Version: 2.7.2\r\n\r\n**Repro**\r\nIn Excel, create a new workbook.\r\nIn cell A1, enter random text and add a hyperlink (Right-click > Link).\r\nSelect 'E-mail address' and enter an invalid address, such as mailto:one@\r\nSave the file and try to open the file using OpenXml SDK:\r\nvar dSpreadsheet = SpreadsheetDocument.Open(fileName, false)\r\n\r\n**Observed**\r\nThe file cannot be opened with OpenXml SDK, an unhandled \r\nOpenXmlPackageException exception is thrown and further processing stops.\r\nThe file can be opened just fine in Excel.\r\n\r\n**Expected**\r\nThere should be a way to open such an xlsx.\r\n[issue6b.xlsx](https://github.com/OfficeDev/Open-XML-SDK/files/1483879/issue6b.xlsx)\r\n"},{"Id":"12408585616","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:33","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/384","RelatedDescription":"Closed issue \"Adding common interface/base class for related elements\" (#384) at OfficeDev/Open-XML-SDK","RelatedBody":"I know most of the element classes are code generated from XSDs somewhere. Sometimes when I would like to work on shared properties, especially like styles in Word, the classes don't share a common base class or interface to get at the strongly typed properties.\r\n\r\nFor instance, I've had to come up with this pattern.\r\n\r\n```\r\npublic interface IOpenXmlElement { } // For future\r\npublic interface IParagraphProperties : IOpenXmlElement\r\n{\r\n    Justification Justification { get; }\r\n    SpacingBetweenLines SpacingBetweenLines { get; }\r\n}\r\npublic class ParagraphProperties : DocumentFormat.OpenXml.Wordprocessing.ParagraphProperties, IParagraphProperties\r\n{\r\n    public ParagraphProperties(DocumentFormat.OpenXml.Wordprocessing.ParagraphProperties paragraphProperties)\r\n        : base(paragraphProperties.OuterXml)\r\n    { }\r\n}\r\npublic class ParagraphPropertiesBaseStyle : DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesBaseStyle, IParagraphProperties\r\n{\r\n    public ParagraphProperties(DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesBaseStyle baseStyle)\r\n        : base(baseStyle.OuterXml)\r\n    { }\r\n}\r\n\r\n```\r\n\r\nIs there a way the XSD and/or the code gen develop something similar using either an interface or base class for these related classes and properties?"},{"Id":"12408585567","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:33","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/387","RelatedDescription":"Closed issue \"Changes for 3.x version\" (#387) at OfficeDev/Open-XML-SDK","RelatedBody":"I've noticed some things we can do when we decide to make a 3.x version which will allow us to have breaking changes. I'll keep this list up-to-date with ideas as we come across them:\r\n\r\n- [ ] `OpenXmlSimpleType.TextValue` should be made `private protected`\r\n- [ ] Types derived from `OpenXmlSimpleType` should not have implicit casting operators if they allocate objects\r\n- [ ] Make `EnumStringAttribute` internal\r\n- [ ] Consider making a `DocumentFormat.OpenXml.Validation` library that adds the validation logic. This currently adds a few megabytes to the openxml library\r\n- [ ] Redesign usage of `IFixedContentTypePart`; possibly remove\r\n- [ ] Remove obsolete classes/methods\r\n- [ ] Slim `OpenXmlPackage` (and maybe others) by moving some helper methods to extension classes. An example is the `FlatOPC` methods\r\n- [ ] Make `ValidatorSettings` public and readonly. Add a constructor to `OpenXmlValidator` to handle the settings\r\n- [ ] Consider breaking up library into smaller ones for Word/Powerpoint/Excel. \r\n- [ ] Add standard unit conversion type. There are different units such as points, emus, etc. that could be understood and convertible from the api."},{"Id":"12408585513","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:32","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/389","RelatedDescription":"Closed issue \"DocumentFormat.OpenXml.Packaging.CoreFilePropertiesPart has no functional properties\" (#389) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nDocumentFormat.OpenXml.Packaging.CoreFilePropertiesPart has no functional properties. I'd like to access at least the tags, description and title elements. There seems to be a well defined schema for it.\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Core\r\n- DocumentFormat.OpenXml Version: (ie 2.8.2)\r\n\r\n** Concept API surface **\r\n\r\n```csharp\r\npublic class CoreProperties\r\n{\r\n    public string Category { get; set; } \r\n    public ContentStatusType ContentStatus { get; set; }\r\n    public DateTimeOffset CreatedAt {get; set;}\r\n    public string CreatedBy {get; set; }\r\n    public string Summary {get; set; }\r\n    public IReadOnlyCollection<Keyword> Keywords {get; }\r\n    public string Language {get; set; }\r\n    public string LastModifiedBy {get; set; }\r\n    public DateTimeOffset? LastModifiedAt {get; set; }\r\n    public DateTimeOffset? LastPrintedAt {get; set; }\r\n    public int? Revision {get; set; }\r\n    public int? Version {get; set; }\r\n    public string Subject {get; set; }\r\n    public string Title {get; set; }\r\n}\r\n\r\npublic class Keyword\r\n{\r\n    public string Language { get; set; }\r\n    public string Value { get; set; }\r\n}\r\n\r\npublic enum ContentStatusType \r\n{\r\n    Draft,\r\n    Reviewed,\r\n    Final\r\n}\r\n```\r\n"},{"Id":"12408585459","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:32","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/393","RelatedDescription":"Closed issue \"Strict http://purl.oclc.org/ooxml/spreadsheetml/main tables fail validation\" (#393) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nStrict namespace spreadsheetml tables throw an exception in OpenXmlValidator.\r\n\r\n**Information**\r\n\r\n- .NET Target: whatever the default is in VS\r\n- DocumentFormat.OpenXml Version: 2.5.0, 2.8.1\r\n\r\n**Repro**\r\n\r\nTrivial spreadsheet that triggers the problem: [test.xlsx](https://github.com/OfficeDev/Open-XML-SDK/files/1668722/test.xlsx)\r\n\r\n*_rels/worksheet.xml.rels* has `<Relationship Id='rId1' Type='http://purl.oclc.org/ooxml/officeDocu\r\nment/relationships/table' Target='table.xml' />` which should, I think, enable `StrictTranslation`.\r\n\r\n*table.xml* has `<table xmlns='http://purl.oclc.org/ooxml/spreadsheetml/main' id='1' displayName='Data' ref='A1:B3'>`\r\n\r\nBoth URLs are straight from ECMA-376, Part 1, *12.3.21 Table Definition Part*.\r\n\r\nAdditionally, both LibreOffice and Office Online are able to load the table definition, which arguably might not signify anything.\r\n\r\n```csharp\r\nSpreadsheetDocument document = SpreadsheetDocument.Open(\"test.xlsx\", false);\r\nOpenXmlValidator validator = new OpenXmlValidator(FileFormatVersions.Office2010);\r\nvalidator.Validate(document);\r\n``` \r\n\r\n**Observed**\r\n\r\n```\r\nSystem.IO.InvalidDataException\r\n  HResult=0x80131501\r\n  Message=Cannot load the root element from the part. The part contains invalid data.\r\n  Source=DocumentFormat.OpenXml\r\n  StackTrace:\r\n   at DocumentFormat.OpenXml.Packaging.OpenXmlPart.LoadDomTree[T]()\r\n   at DocumentFormat.OpenXml.Packaging.TableDefinitionPart.get_PartRootElement()\r\n   at DocumentFormat.OpenXml.Validation.DocumentValidator.ValidatePart(OpenXmlPart part)\r\n   at DocumentFormat.OpenXml.Validation.DocumentValidator.Validate(OpenXmlPackage document)\r\n   at DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(OpenXmlPackage openXmlPackage)\r\n   at ConsoleApp1.Program.Main(String[] args) in C:\\Users\\IEUser\\source\\repos\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 18\r\n\r\nInner Exception 1:\r\nInvalidDataException: The root XML element \"http://purl.oclc.org/ooxml/spreadsheetml/main:table\" in the part is incorrect. The expected root XML element is: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main:table\".\r\n```\r\n\r\n**Expected**\r\n\r\nNo exception should be thrown and no errors returned."},{"Id":"12408585412","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:31","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/398","RelatedDescription":"Closed issue \"Proposed OpenXmlReader methods\" (#398) at OfficeDev/Open-XML-SDK","RelatedBody":"In order to make more succinct calling code, I've extended `OpenXmlReader` in my code with these helpers. I propose that something similar can be added to the library.\r\n\r\n```\r\npublic T LoadCurrentElement<T>() where T : OpenXmlElement => (T)_reader.LoadCurrentElement();\r\n\r\npublic bool ElementTypeIs<T>() where T : OpenXmlElement => ElementType == typeof(T);\r\n\r\npublic bool ElementIs<T>(out T element) where T : OpenXmlElement\r\n{\r\n       element = null;\r\n\r\n        if (ElementTypeIs<T>())\r\n        {\r\n            element = LoadCurrentElement<T>();\r\n            return true;\r\n       }\r\n\r\n       return false;\r\n}\r\n```\r\n\r\n`ElementIs<T>` plays nice with the new `out` semantics introduced in C# 7.0. Instead of this mess, \r\n\r\n```\r\nif (reader.ElementType == typeof(Paragraph))\r\n{\r\n    Paragraph p = (Paragraph)reader.LoadCurrentElement();\r\n    // ...\r\n}\r\n```\r\n\r\nthe new methods provide a simplification\r\n\r\n```\r\nif (reader.ElementIs(out Paragraph p))\r\n{\r\n    // ...\r\n}\r\n```\r\n\r\nThoughts?"},{"Id":"12408585369","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:30","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/441","RelatedDescription":"Closed issue \"Add some security/fuzz testing\" (#441) at OfficeDev/Open-XML-SDK","RelatedBody":"We should add some sort of fuzz testing to test for potential security/reliability issues:\r\n\r\n- Zip bombs\r\n- Malicious XML\r\n- Recursive content\r\n\r\nThese are the items at the top of my head.... there are probably others\r\n"},{"Id":"12408585304","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:30","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/478","RelatedDescription":"Closed issue \"Add option ToFlatOpcString to exclude whitespace.\" (#478) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\n`OpenXmlDocument.ToFlatOpcString` formulates the document with a lot of whitespace - line breaks and tabs. These aren't needed in XML and creates bloat when transferring.\r\n\r\n**Information**\r\n\r\n- .NET Target: Any\r\n- DocumentFormat.OpenXml Version: 2.8.1\r\n"},{"Id":"12408585248","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:29","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/479","RelatedDescription":"Closed issue \"Create an abstracted package exporter/importer\" (#479) at OfficeDev/Open-XML-SDK","RelatedBody":"Currently, there is some functionality to export/import packages to/from strings via the `ToFlatOpcโฆ` helpers. However, it would be nice to separate this out and create a generalized export/import pattern. This issue is to track this for vNext and to gather ideas of what we could/should include in this design."},{"Id":"12408585216","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:29","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/489","RelatedDescription":"Closed issue \"Support for isNarration element \" (#489) at OfficeDev/Open-XML-SDK","RelatedBody":"I can't find SDK class for [isNarration element](https://msdn.microsoft.com/en-us/library/dn912522%28v=office.12%29.aspx) \r\n\r\nThis element widely used in [OfficeMix](https://mix.office.com) extension.\r\n\r\nCan you help me? May be have some workaround (except direct xml reading)?\r\n\r\nThanks"},{"Id":"12408585187","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:28","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/491","RelatedDescription":"Closed issue \"Convert FileFormatVersions to non-flags enum or even simply a constant\" (#491) at OfficeDev/Open-XML-SDK","RelatedBody":"I've added an item to investigate switch the FileFormatVersions enum to a non-flags enum or simply constants. I haven't found any good use case and it causes a bunch of unnecessary code to deal with at times.\r\n"},{"Id":"12408585137","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:27","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/564","RelatedDescription":"Closed issue \"Office Online created document fails OpenXmlValidator validation\" (#564) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nAny document created in Office Online, including blank ones fail OpenXmlValidator validation. \r\n\r\n                var v = new OpenXmlValidator(FileFormatVersions.Office2016);\r\n                var errors = v.Validate(wDoc);\r\n\r\nProduces the following 2 errors :\r\n\r\n1. \r\nAttributeQualifiedName: null\r\nDescription: The element has unexpected child element 'http://schemas.microsoft.com/office/word/2010/wordml:docId'.\r\nErrorType: Schema\r\nId: Sch_UnexpectedElementContentExpectingComplex\r\nNode: {DocumentFormat.OpenXml.Wordprocessing.Settings}\r\nPart: {DocumentFormat.OpenXml.Packaging.DocumentSettingsPart}\r\nPath: XPath=\"/w:settings[1]\"\r\nRelatedNode: {DocumentFormat.OpenXml.Office2010.Word.DocumentId}\r\n\r\n2.\r\nAttributeQualifiedName: http://schemas.microsoft.com/office/word/2012/wordml:val\r\nDescription: \"The attribute 'http://schemas.microsoft.com/office/word/2012/wordml:val' has invalid value '{7297be79-5e23-470a-9fe2-a7ede5c0760f}'. The Pattern constraint failed. The expected pattern is \\\\{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\\\}.\"\r\nErrorType: Schema\r\nId: Sch_AttributeValueDataTypeDetailed\r\nNode: {DocumentFormat.OpenXml.Office2013.Word.PersistentDocumentId}\r\nPart: {DocumentFormat.OpenXml.Packaging.DocumentSettingsPart}\r\nPath: XPath=\"/w:settings[1]/w15:docId[1]\"\r\nRelatedNode: null\r\nValidationErrorCategory: Sch_PatternConstraintFailed\r\n**Information**\r\n\r\n- .NET Target: .NET Framework,\r\n- DocumentFormat.OpenXml Version:  feature/office2016\r\n\r\n**Repro**\r\n#\r\n        [Theory]\r\n        [InlineData(TestFiles.O365BlankDocument)]\r\n        public void OF16_001_ValidateDocx_2016(string name)\r\n        {\r\n            using (var stream = GetStream(name))\r\n            using (var wDoc = WordprocessingDocument.Open(stream, false))\r\n            {\r\n                var v = new OpenXmlValidator(FileFormatVersions.Office2016);\r\n                var errors = v.Validate(wDoc);\r\n\r\n                Assert.Empty(errors);\r\n            }\r\n        }\r\n\r\n**Observed**\r\n\r\nValidation produces 2 errors\r\n\r\n**Expected**\r\n\r\nValidation produces 0 errors\r\n"},{"Id":"12408585095","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:27","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/601","RelatedDescription":"Closed issue \"WorkbookProtection corrupts Spreadsheet for Excel 2019\" (#601) at OfficeDev/Open-XML-SDK","RelatedBody":"Spreadsheets saved with Excel 2019 get corrupted as soon as you add a WorkbookProtection.\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET 3.5\r\n- DocumentFormat.OpenXml Version: 2.9.1, 2.10.0-beta0001\r\n\r\n**Repro**\r\n\r\nCreate an empty spreadsheet in Excel 2019. Perform the following operation:\r\n\r\n```csharp\r\nusing (var document = SpreadsheetDocument.Open(\"...\", true) {\r\n  document.WorkbookPart.Workbook.WorkbookProtection = new WorkbookProtection();\r\n}\r\n``` \r\n\r\nOpen the spreadsheet in Excel 2019.\r\n\r\n**Observed**\r\n\r\nExcel fails to open and repair the file.\r\n\r\n![Exception](https://user-images.githubusercontent.com/145854/41104354-74e23734-6a6b-11e8-856f-184535172d76.png)\r\n\r\nThe resulting workbook.xml contains the newly added `x:workbookProtection` followed by the `x:revisionPtr`. \r\n\r\n```xml\r\n<x:workbookProtection />\r\n<xr:revisionPtr revIDLastSave=\"0\" documentId=\"13_ncr:1_{4BF1E7C4-2F1B-4756-81DA-B102ED8D212D}\" xr6:coauthVersionLast=\"36\" xr6:coauthVersionMax=\"36\" xr10:uidLastSave=\"{00000000-0000-0000-0000-000000000000}\" />\r\n```\r\n\r\nManually changing the order (unzip/edit/zip) repairs the file.\r\n\r\n```xml\r\n<xr:revisionPtr revIDLastSave=\"0\" documentId=\"13_ncr:1_{4BF1E7C4-2F1B-4756-81DA-B102ED8D212D}\" xr6:coauthVersionLast=\"36\" xr6:coauthVersionMax=\"36\" xr10:uidLastSave=\"{00000000-0000-0000-0000-000000000000}\" />\r\n<x:workbookProtection />\r\n\r\n```\r\n**Expected**\r\n\r\nFile should not get corrupted."},{"Id":"12408585045","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:26","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/612","RelatedDescription":"Closed issue \"Location of pivot cache parts inside xlsx file\" (#612) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nWhen creating a new .xlsx file with a pivot table in Excel and saving it, the pivot cache parts (specificially the `PivotCacheDefinitionPart` and `PivotCacheRecords` parts) are saved to the `./xl/pivotCache/` location inside package. \r\n\r\nWhen one generates pivot tables using the OpenXML SDK, these new parts are added to the `./pivotCache/` location. Notice that it does not fall under `./xl/`.\r\n\r\nWhile the generated file isn't corrupt and works with all spreadsheet clients, the discrepancy about the location of the parts does feel strange. It's especially confusing when one opens an Excel-generated file using the OpenXML SDK where the file already contains pivot table parts and one adds new pivot table parts. The resulting file will have the original pivot table cache parts in the `./xl/pivotCache` location, but the newly added parts will be in the `./pivotCache/` location. Additionally, this is the only spreadsheet-related part (that I've noticed) that does *not* save to some location under `./xl/`.\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET 4.7.2\r\n- DocumentFormat.OpenXml Version: Commit 9d8629a7778c876e56b3c7e14c213b65f6f84ea0\r\n\r\n**Repro**\r\n\r\n```csharp\r\nusing DocumentFormat.OpenXml;\r\nusing DocumentFormat.OpenXml.Packaging;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            using (var package = SpreadsheetDocument.Create(\"outputfile.xlsx\", SpreadsheetDocumentType.Workbook))\r\n            {\r\n                var workbookPart = package.AddWorkbookPart();\r\n\r\n                workbookPart.AddNewPart<PivotTableCacheDefinitionPart>(\"rId2\");\r\n            }\r\n        }\r\n    }\r\n}\r\n``` \r\n\r\n**Observed**\r\n\r\nNotice location of result pivot cache parts:\r\n![pivotcache2](https://user-images.githubusercontent.com/145854/60818071-33a68800-a19d-11e9-884c-0db6094a6625.gif)\r\n\r\n\r\n\r\n**Expected**\r\n\r\nWhen one generates a file in Excel, pivot cache parts are in this location:\r\n![pivotcache](https://user-images.githubusercontent.com/145854/60817203-81ba8c00-a19b-11e9-925b-9fba9d54eb6f.gif)"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2020-05-23T05:30:39.8044948Z","RunDurationInMilliseconds":860}