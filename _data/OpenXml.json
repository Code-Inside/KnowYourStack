{"Data":{"Sdk":{"Events":[{"Id":"13558772308","Type":"PullRequestEvent","CreatedAt":"2020-09-17T21:33:50","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/809","RelatedDescription":"Opened pull request \"Parse exponent for int/uint if present\" (#809) at OfficeDev/Open-XML-SDK","RelatedBody":"Fixes #806"},{"Id":"13558248674","Type":"PullRequestEvent","CreatedAt":"2020-09-17T20:38:35","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/808","RelatedDescription":"Merged pull request \"Clean up OpenXml[Part]Writer\" (#808) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"13557847000","Type":"PullRequestEvent","CreatedAt":"2020-09-17T19:59:22","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/808","RelatedDescription":"Opened pull request \"Clean up OpenXml[Part]Writer\" (#808) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"13553942285","Type":"PullRequestEvent","CreatedAt":"2020-09-17T14:27:04","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/804","RelatedDescription":"Merged pull request \"Provide IXmlLineInfo from OpenXmlReader when available\" (#804) at OfficeDev/Open-XML-SDK","RelatedBody":"Provides ability to track the line number and position while reading a part. This is only available on implementations that operate on text itself; implementations such as the `OpenXmlDomReader` operate on nodes which don't have line information anymore.\r\n\r\nFixes #803 "},{"Id":"13553942196","Type":"IssuesEvent","CreatedAt":"2020-09-17T14:27:03","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/803","RelatedDescription":"Closed issue \"Reader depth or how to get current node's real depth.\" (#803) at OfficeDev/Open-XML-SDK","RelatedBody":"Is there any approach to get `depth`, `lineNumber` or `position` of current node in a real XML file?\r\nAs it's done using native `XmlTextReader`: https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmltextreader.lineposition?view=netcore-3.1\r\n```csharp\r\nwhile (reader.Read()){\r\n       switch (reader.NodeType){\r\n         case XmlNodeType.Element:\r\n           Console.Write(\"{0} {1},{2}  \", reader.Depth, reader.LineNumber, reader.LinePosition);\r\n           Console.WriteLine(\"<{0}>\", reader.Name);\r\n           break;\r\n       }\r\n    }\r\n```\r\n\r\nI have tried to get `Depth` of OpenXMLReader, but it seems that it is returning depth of element in some stack which is not real depth of current xml node.\r\n\r\nIt would be nice to have such functionality.\r\n"},{"Id":"13551430710","Type":"IssuesEvent","CreatedAt":"2020-09-17T11:05:40","Actor":"Viktor-36","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/807","RelatedDescription":"Reopened issue \"OutOfMemoryException using SAX in .NET Core\" (#807) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nI was using ClosedXML to create large excel files (100k rows with 63 colums) and I faced issue with OutOfMemoryException. I found some examples of OpenXML using SAX, so I tried to switch to OpenXML, but it didn't help me. I tried to remove all my code (reading from DB, etc.) to try if that works, but I still get OutOfMemoryException.\r\n\r\nMy code is based on [http://polymathprogrammer.com/2012/08/06/how-to-properly-use-openxmlwriter-to-write-large-excel-files/](url)\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Core 3.1\r\n- DocumentFormat.OpenXml Version: 2.11.3\r\n\r\n**EDIT:** Same code is working fine in .NET Framework 4.7.2 with same DocumentFormat.OpenXml version.\r\n\r\n**Repro**\r\nThis is simple code that I use at the moment. I am testing with RAM limited to 500 MB (testing purpose). I don't think that this code can consume so much RAM.\r\n\r\n```csharp\r\nusing (SpreadsheetDocument document = SpreadsheetDocument.Create(filePath, SpreadsheetDocumentType.Workbook))\r\n{\r\n    document.AddWorkbookPart();\r\n\r\n    WorksheetPart wsp = document.WorkbookPart.AddNewPart<WorksheetPart>();\r\n\r\n    using (OpenXmlWriter writer = OpenXmlWriter.Create(wsp))\r\n    {\r\n        List<OpenXmlAttribute> oxa;\r\n        writer.WriteStartElement(new Worksheet());\r\n        writer.WriteStartElement(new SheetData());\r\n\r\n        for (int i = 0; i < 100000; i++)\r\n        {\r\n            oxa = new List<OpenXmlAttribute>();\r\n            oxa.Add(new OpenXmlAttribute(\"r\", null, i.ToString()));\r\n            writer.WriteStartElement(new Row(), oxa);\r\n\r\n            for (int j = 0; j < 40; j++)\r\n            {\r\n                oxa = new List<OpenXmlAttribute>();\r\n                oxa.Add(new OpenXmlAttribute(\"t\", null, \"str\"));\r\n                writer.WriteStartElement(new Cell(), oxa);\r\n                writer.WriteElement(new CellValue(\"test\"));\r\n                writer.WriteEndElement();\r\n            }\r\n\r\n            writer.WriteEndElement();\r\n        }\r\n\r\n        writer.WriteEndElement(); // end of sheetdata\r\n        writer.WriteEndElement(); //end of worksheet\r\n    }\r\n\r\n    using (OpenXmlWriter writer = OpenXmlWriter.Create(document.WorkbookPart))\r\n    {\r\n        writer.WriteStartElement(new Workbook());\r\n        writer.WriteStartElement(new Sheets());\r\n\r\n        writer.WriteElement(new Sheet() { Id = document.WorkbookPart.GetIdOfPart(wsp), SheetId = 1, Name = \"Test\" });\r\n\r\n        writer.WriteEndElement();\r\n        writer.WriteEndElement();\r\n    }\r\n}\r\n``` \r\n\r\n**Observed**\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.IO.MemoryStream.set_Capacity(Int32 value)\r\n   at System.IO.MemoryStream.EnsureCapacity(Int32 value)\r\n   at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.Xml.XmlUtf8RawTextWriter.FlushBuffer()\r\n   at System.Xml.XmlUtf8RawTextWriter.RawText(Char* pSrcBegin, Char* pSrcEnd)\r\n   at System.Xml.XmlUtf8RawTextWriter.RawText(String s)\r\n   at System.Xml.XmlUtf8RawTextWriter.WriteEndElement(String prefix, String localName, String ns)\r\n   at System.Xml.XmlWellFormedWriter.WriteEndElement()\r\n   at DocumentFormat.OpenXml.OpenXmlPartWriter.WriteEndElement()\r\n````\r\n\r\n**Expected**\r\n\r\nExcel file in filePath with 100k rows and 40 columns with string \"test\" in all cells.\r\n"},{"Id":"13551368786","Type":"IssuesEvent","CreatedAt":"2020-09-17T10:59:57","Actor":"Viktor-36","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/807","RelatedDescription":"Closed issue \"OutOfMemoryException using SAX in .NET Core\" (#807) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nI was using ClosedXML to create large excel files (100k rows with 63 colums) and I faced issue with OutOfMemoryException. I found some examples of OpenXML using SAX, so I tried to switch to OpenXML, but it didn't help me. I tried to remove all my code (reading from DB, etc.) to try if that works, but I still get OutOfMemoryException.\r\n\r\nMy code is based on [http://polymathprogrammer.com/2012/08/06/how-to-properly-use-openxmlwriter-to-write-large-excel-files/](url)\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Core 3.1\r\n- DocumentFormat.OpenXml Version: 2.11.3\r\n\r\n**EDIT:** Same code is working fine in .NET Framework 4.7.2 with same DocumentFormat.OpenXml version.\r\n\r\n**Repro**\r\nThis is simple code that I use at the moment. I am testing with RAM limited to 500 MB (testing purpose). I don't think that this code can consume so much RAM.\r\n\r\n```csharp\r\nusing (SpreadsheetDocument document = SpreadsheetDocument.Create(filePath, SpreadsheetDocumentType.Workbook))\r\n{\r\n    document.AddWorkbookPart();\r\n\r\n    WorksheetPart wsp = document.WorkbookPart.AddNewPart<WorksheetPart>();\r\n\r\n    using (OpenXmlWriter writer = OpenXmlWriter.Create(wsp))\r\n    {\r\n        List<OpenXmlAttribute> oxa;\r\n        writer.WriteStartElement(new Worksheet());\r\n        writer.WriteStartElement(new SheetData());\r\n\r\n        for (int i = 0; i < 100000; i++)\r\n        {\r\n            oxa = new List<OpenXmlAttribute>();\r\n            oxa.Add(new OpenXmlAttribute(\"r\", null, i.ToString()));\r\n            writer.WriteStartElement(new Row(), oxa);\r\n\r\n            for (int j = 0; j < 40; j++)\r\n            {\r\n                oxa = new List<OpenXmlAttribute>();\r\n                oxa.Add(new OpenXmlAttribute(\"t\", null, \"str\"));\r\n                writer.WriteStartElement(new Cell(), oxa);\r\n                writer.WriteElement(new CellValue(\"test\"));\r\n                writer.WriteEndElement();\r\n            }\r\n\r\n            writer.WriteEndElement();\r\n        }\r\n\r\n        writer.WriteEndElement(); // end of sheetdata\r\n        writer.WriteEndElement(); //end of worksheet\r\n    }\r\n\r\n    using (OpenXmlWriter writer = OpenXmlWriter.Create(document.WorkbookPart))\r\n    {\r\n        writer.WriteStartElement(new Workbook());\r\n        writer.WriteStartElement(new Sheets());\r\n\r\n        writer.WriteElement(new Sheet() { Id = document.WorkbookPart.GetIdOfPart(wsp), SheetId = 1, Name = \"Test\" });\r\n\r\n        writer.WriteEndElement();\r\n        writer.WriteEndElement();\r\n    }\r\n}\r\n``` \r\n\r\n**Observed**\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.IO.MemoryStream.set_Capacity(Int32 value)\r\n   at System.IO.MemoryStream.EnsureCapacity(Int32 value)\r\n   at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.Xml.XmlUtf8RawTextWriter.FlushBuffer()\r\n   at System.Xml.XmlUtf8RawTextWriter.RawText(Char* pSrcBegin, Char* pSrcEnd)\r\n   at System.Xml.XmlUtf8RawTextWriter.RawText(String s)\r\n   at System.Xml.XmlUtf8RawTextWriter.WriteEndElement(String prefix, String localName, String ns)\r\n   at System.Xml.XmlWellFormedWriter.WriteEndElement()\r\n   at DocumentFormat.OpenXml.OpenXmlPartWriter.WriteEndElement()\r\n````\r\n\r\n**Expected**\r\n\r\nExcel file in filePath with 100k rows and 40 columns with string \"test\" in all cells.\r\n"},{"Id":"13539702578","Type":"IssuesEvent","CreatedAt":"2020-09-16T13:47:40","Actor":"Viktor-36","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/807","RelatedDescription":"Opened issue \"OutOfMemoryException using SAX\" (#807) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nI was using ClosedXML to create large excel files (100k rows with 63 colums) and I faced issue with OutOfMemoryException. I found some examples of OpenXML using SAX, so I tried it, but it didn't help me. I tried to remove all my code (reading from DB, etc.) to try if that works, but I still get OutOfMemoryException.\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Core 3.1\r\n- DocumentFormat.OpenXml Version: 2.11.3\r\n\r\n**Repro**\r\nThis is simple code that I use at the moment. I am testing with RAM limited to 500 MB (testing purpose). I don't think that this code can consume so much RAM.\r\n\r\n```csharp\r\nusing (SpreadsheetDocument document = SpreadsheetDocument.Create(filePath, SpreadsheetDocumentType.Workbook))\r\n{\r\n    document.AddWorkbookPart();\r\n\r\n    WorksheetPart wsp = document.WorkbookPart.AddNewPart<WorksheetPart>();\r\n\r\n    using (OpenXmlWriter writer = OpenXmlWriter.Create(wsp))\r\n    {\r\n        List<OpenXmlAttribute> oxa;\r\n        writer.WriteStartElement(new Worksheet());\r\n        writer.WriteStartElement(new SheetData());\r\n\r\n        for (int i = 0; i < 100000; i++)\r\n        {\r\n            oxa = new List<OpenXmlAttribute>();\r\n            oxa.Add(new OpenXmlAttribute(\"r\", null, i.ToString()));\r\n            writer.WriteStartElement(new Row(), oxa);\r\n\r\n            for (int j = 0; j < 40; j++)\r\n            {\r\n                oxa = new List<OpenXmlAttribute>();\r\n                oxa.Add(new OpenXmlAttribute(\"t\", null, \"str\"));\r\n                writer.WriteStartElement(new Cell(), oxa);\r\n                writer.WriteElement(new CellValue(\"test\"));\r\n                writer.WriteEndElement();\r\n            }\r\n\r\n            writer.WriteEndElement();\r\n        }\r\n\r\n        writer.WriteEndElement(); // end of sheetdata\r\n        writer.WriteEndElement(); //end of worksheet\r\n    }\r\n\r\n    using (OpenXmlWriter writer = OpenXmlWriter.Create(document.WorkbookPart))\r\n    {\r\n        writer.WriteStartElement(new Workbook());\r\n        writer.WriteStartElement(new Sheets());\r\n\r\n        writer.WriteElement(new Sheet() { Id = document.WorkbookPart.GetIdOfPart(wsp), SheetId = 1, Name = \"Test\" });\r\n\r\n        writer.WriteEndElement();\r\n        writer.WriteEndElement();\r\n    }\r\n}\r\n``` \r\n\r\n**Observed**\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.IO.MemoryStream.set_Capacity(Int32 value)\r\n   at System.IO.MemoryStream.EnsureCapacity(Int32 value)\r\n   at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.Xml.XmlUtf8RawTextWriter.FlushBuffer()\r\n   at System.Xml.XmlUtf8RawTextWriter.RawText(Char* pSrcBegin, Char* pSrcEnd)\r\n   at System.Xml.XmlUtf8RawTextWriter.RawText(String s)\r\n   at System.Xml.XmlUtf8RawTextWriter.WriteEndElement(String prefix, String localName, String ns)\r\n   at System.Xml.XmlWellFormedWriter.WriteEndElement()\r\n   at DocumentFormat.OpenXml.OpenXmlPartWriter.WriteEndElement()\r\n````\r\n\r\n**Expected**\r\n\r\nExcel file in filePath with 100k rows and 40 columns with string \"test\" in all cells.\r\n"},{"Id":"13489952415","Type":"IssuesEvent","CreatedAt":"2020-09-11T14:30:57","Actor":"abalaci","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/806","RelatedDescription":"Opened issue \"System.FormatException on Row.RowIndex.Value once row index hits one million\" (#806) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nI need to import data from an exceptionally large Excel worksheet (~ 1 million rows),\r\nand I'm using the `OpenXmlReader` class to read the sheet row by row.\r\nHowever, when calling the `Row.RowIndex.Value` method for the row with index 1 million,\r\nI'm getting a `System.FormatException`.\r\n\r\n**Information**\r\n\r\n- .NET Target:  .NET Core 3.1\r\n- DocumentFormat.OpenXml Version: 2.11.3\r\n- Partial stack trace:\r\n\r\n_System.FormatException: Input string was not in a correct format.\r\n   at System.Number.ThrowOverflowOrFormatException(ParsingStatus status, TypeCode type)\r\n   at System.Number.ParseUInt32(ReadOnlySpan\\`1 value, NumberStyles styles, NumberFormatInfo info)\r\n   at DocumentFormat.OpenXml.UInt32Value.Parse(String input)\r\n   at DocumentFormat.OpenXml.OpenXmlSimpleValue`1.get_Value()_\r\n\r\n**Repro**\r\n\r\n```csharp\r\nusing var reader = OpenXmlReader.Create(worksheetPart);\r\nwhile (reader.Read())\r\n{\r\n    if (reader.ElementType == typeof(Row))\r\n    {\r\n        var row = (Row)reader.LoadCurrentElement();\r\n        uint rowIndex = row.RowIndex.Value;\r\n    }\r\n}\r\n``` \r\n\r\n```xml\r\n<row r=\"999999\" s=\"1\" customFormat=\"1\" ht=\"19.7321\" customHeight=\"1\">\r\n    <c r=\"A999999\" s=\"3\" t=\"s\">\r\n        <v>3231031</v>\r\n    </c>\r\n    <c r=\"B999999\" s=\"3\" t=\"s\">\r\n        <v>18938</v>\r\n    </c>\r\n</row>\r\n<row r=\"1e6\" s=\"1\" customFormat=\"1\" ht=\"19.7321\" customHeight=\"1\">\r\n    <c r=\"A1000000\" s=\"3\" t=\"s\">\r\n        <v>3231032</v>\r\n    </c>\r\n    <c r=\"B1000000\" s=\"3\" t=\"s\">\r\n        <v>440271</v>\r\n    </c>\r\n</row>\r\n<row r=\"1.000001e6\" s=\"1\" customFormat=\"1\" ht=\"19.7321\" customHeight=\"1\">\r\n    <c r=\"A1000001\" s=\"3\" t=\"s\">\r\n        <v>3231033</v>\r\n    </c>\r\n    <c r=\"B1000001\" s=\"3\" t=\"s\">\r\n        <v>3231034</v>\r\n    </c>\r\n</row>\r\n```\r\n\r\n**Observed**\r\n\r\nThe value that's causing the exception is **1e6**.\r\nWhat's interesting is that once the row index reaches 1,000,000, the number format of the indexes changes from base 10 to exponential notation.\r\nWhat's even more curious is that this only happens for rows, because—as you can notice from the example—the values of the cell references are still base 10, even for values larger than 1,000,000.\r\n\r\n**Expected**\r\n\r\nI have absolutely no idea why the row indexes change format at the 1,000,000 mark, but I would expect the SDK to be able to work with them, nevertheless.\r\n"},{"Id":"13485488009","Type":"IssuesEvent","CreatedAt":"2020-09-11T08:06:37","Actor":"mattiamerzi","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/805","RelatedDescription":"Opened issue \"Add support for SVG files\" (#805) at OfficeDev/Open-XML-SDK","RelatedBody":"Office 2016 natively supports svg as a vector image format, but OpenXml SDK does have support for this yet.\r\nIssue #204 has been opened back in 2017, but closed for inactivity.\r\nI've written basic support for SVGs, and created pull request #802 , but that has been refused because modifies generated files, and the code generation process is not publicly available (sic.)"},{"Id":"13465113731","Type":"IssuesEvent","CreatedAt":"2020-09-09T20:19:11","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/797","RelatedDescription":"Closed issue \"Looking for consultant/vendor with Open Office XML/Open XML SDK  Expertise\" (#797) at OfficeDev/Open-XML-SDK","RelatedBody":"Dear Open-XML-SDK Community,\r\n\r\nMy company is working on a large project where we are levering Open Office XML/Open XML SDK to manipulate/transform patent submission documents (Word format) as they are submitted online.  We are looking for somebody (or a vendor) with deep expertise with Open Office XML/Open XML SDK to provide technical consultation for the project.  We can accommodate a full-time resource for this role.   \r\n\r\nPlease let me know if you might know somebody who can help with this requirement.\r\n\r\nThanks!\r\n\r\n"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2020-09-18T05:30:42.5606349Z","RunDurationInMilliseconds":919}