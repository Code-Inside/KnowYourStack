{"Data":{"Sdk":{"Events":[{"Id":"15929499010","Type":"PullRequestEvent","CreatedAt":"2021-04-13T22:38:54","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/920","RelatedDescription":"Opened pull request \"Update README.md\" (#920) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"15929330381","Type":"PullRequestEvent","CreatedAt":"2021-04-13T22:18:14","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/910","RelatedDescription":"Merged pull request \"Update README.md\" (#910) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"15902047172","Type":"IssuesEvent","CreatedAt":"2021-04-12T08:21:57","Actor":"sdudnic","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/919","RelatedDescription":"Opened issue \"Copy pictures from one generated Word document to another one\" (#919) at OfficeDev/Open-XML-SDK","RelatedBody":"# Before submitting an issue, please fill this out\r\n\r\nIs this a:\r\n- [ ] Issue with the OpenXml library\r\n- [x] Question on library usage\r\n\r\nI ask here, because I had any answer [on StackOverflow](https://stackoverflow.com/questions/67038242) for several weeks.\r\n\r\n---------------- Remove this line and above before posting ----------------\r\n\r\n**Description**\r\n\r\nI generate an SSRS report that I save as a Word document. That document contain pictures (charts as plat images). \r\nI don't really save the Word document, I have it open in memory.\r\n\r\nI use then OpenXML to create another word document, in witch I need to copy the pictures from the SSRS report.   \r\n\r\nI try to get the drawings from the ssrs report, and insert them in the new word document.\r\n\r\nI tried to insert pictures from the disk to the generated document, that works well. What does not work, is copying one picture from one document to another. \r\nI don't need to copy all the content of a document to another. I need to copy just a picture.\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET 5\r\n- DocumentFormat.OpenXml Version: 2.12.3\r\n\r\n**Repro**\r\n\r\n```csharp\r\nMainDocumentPart ssrsMainPart = ssrsDoc.MainDocumentPart;\r\nvar drawings = ssrsMainPart.Document.Descendants<Drawing>().ToList();\r\n```\r\nand then insert it in the new document\r\n```csharp\r\nMainDocumentPart mainPart = wordDoc.MainDocumentPart;\r\nBody body = mainPart.Document.Body;\r\n```\r\n```csharp\r\nfor (int i = 0; i < 10; i++)\r\n{\r\n    if (i < drawings.Count())\r\n    {\r\n        var myDrawing = drawings.Skip(i).First();\r\n        myDrawing.Remove();\r\n        body.Append(myDrawing); \r\n        body.Append(new Paragraph());\r\n    }\r\n}\r\n```\r\nAs result I get in the resulting document only the picture placeholders, of the same size as in ssrs Word Document, but the pictures are empty. \r\n\r\nI tried to copy the ImageData as well, using the following code:\r\n\r\n```csharp\r\nforeach (var e in ssrsDoc.MainDocumentPart.Document.Body.Elements())\r\n{\r\n\tvar clonedElement = e.CloneNode(true);\r\n\tclonedElement.Descendants<DocumentFormat.OpenXml.Drawing.Blip>().ToList().ForEach(blip =>\r\n\t{\r\n\t\tvar newRelation = wordDoc.CopyImage(blip.Embed, ssrsDoc);\r\n\t\tblip.Embed = newRelation;\r\n\t});\r\n\tclonedElement.Descendants<DocumentFormat.OpenXml.Vml.ImageData>().ToList().ForEach(imageData =>\r\n\t{\r\n\t\tvar newRelation = wordDoc.CopyImage(imageData.RelationshipId, ssrsDoc);\r\n\t\timageData.RelationshipId = newRelation;\r\n\t});\r\n\twordDoc.MainDocumentPart.Document.Body.AppendChild(clonedElement);\r\n}\r\n```\r\nwith CopyImage defined like this:\r\n```csharp\r\npublic static string CopyImage(this WordprocessingDocument newDoc, string relId, WordprocessingDocument org)\r\n{\r\n\tvar p = org.MainDocumentPart.GetPartById(relId) as ImagePart;\r\n\tvar newPart = newDoc.MainDocumentPart.AddPart(p);\r\n\tnewPart.FeedData(p.GetStream());\r\n\treturn newDoc.MainDocumentPart.GetIdOfPart(newPart);\r\n}\r\n``` \r\n\r\nbut after that I wasn't able to open anymore the document with Word 365, word reporting the doc as a broken one...\r\n"},{"Id":"15877954887","Type":"IssuesEvent","CreatedAt":"2021-04-09T10:19:26","Actor":"rubansergey","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/918","RelatedDescription":"Opened issue \"OpenXml validation works slow starting from version 2.11.3\" (#918) at OfficeDev/Open-XML-SDK","RelatedBody":"- Issue with the OpenXml library\r\n\r\nWe have a customer's Wordprocessing document **with a lot of tracked changes** that hangs after we update OpenXml.\r\n\r\nImvestigation shows that:\r\n- It hangs when we call OpenXmlValidator's **Validate** method against MainDocumentPart of this document. \r\n- It works quick on version 2.11.2\r\n- It was broken of version 2.11.3 I have reviewed [changelog ](https://github.com/OfficeDev/Open-XML-SDK/blob/main/CHANGELOG.md)and there is no information that means improvement quality or making algorithm of validation  more complex. Against, there were some performance improvements like removing recursion. **This points to think that there was some side effect in this build that causes such performance impact**.\r\n- Version 2.12.0 has a CancellationToken support which is great, but is more like a workaround for our situation than a fix, as we still want to validate parts as quick as before.\r\n\r\nAfter this innitial investigation I ran main branch with such simple code added against CPU profiler:\r\n\r\n`namespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var doc = WordprocessingDocument.Open(@\"d:\\xxxxxx\\Workspace\\Desk\\Sample.docx\", false))\r\n            {\r\n                var validator = new OpenXmlValidator();\r\n                validator.Validate(doc.MainDocumentPart);\r\n            }\r\n        }\r\n    }\r\n}`\r\n\r\nProfiler shows that currently the slovest method is DocumentFormat.OpenXml.Validation.ValidationTraverser **ValidatingTraverse** \r\n![image](https://user-images.githubusercontent.com/52368905/114165458-2ea7d700-9935-11eb-825e-2c7063cc63a3.png)\r\n\r\nAt this point my investigation stops as I do not have a brunch with build before this method starts works slow and this will be out of scope of my investigation, but I think given information should be enough to at least point to the issue.\r\n\r\nAlso see attached sample document and VS profiller dump file \r\n[Sample.docx](https://github.com/OfficeDev/Open-XML-SDK/files/6284918/Sample.docx)\r\n[Report20210409-1040.zip](https://github.com/OfficeDev/Open-XML-SDK/files/6284919/Report20210409-1040.zip)\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2021-04-16T05:30:39.7902159Z","RunDurationInMilliseconds":843}