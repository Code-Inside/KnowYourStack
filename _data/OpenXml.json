{"Data":{"Sdk":{"Events":[{"Id":"12895691342","Type":"PullRequestEvent","CreatedAt":"2020-07-14T04:23:24","Actor":"lindexi","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/757","RelatedDescription":"Opened pull request \"Improve ElementLookup performance\" (#757) at OfficeDev/Open-XML-SDK","RelatedBody":"But now there's no code that uses the `Contains` method."},{"Id":"12894132732","Type":"IssuesEvent","CreatedAt":"2020-07-13T23:24:10","Actor":"zds0180","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/756","RelatedDescription":"Opened issue \"Memory use when loading worksheets\" (#756) at OfficeDev/Open-XML-SDK","RelatedBody":"I am seeing what I perceive to be excessive memory use when attempting to get the names of all of the worksheets in a workbook. As soon as I try and open the worksheets inside of the package (excelPackage.Workbook.Worksheets) my test uses ~ 400 MB of memory and takes around 20 seconds to finish that line of code. I am wondering if this is a normal amount of load for the tool to be using for a 30 MB .xlsx file with 3 worksheets. My larger issue is that the tool seems to be keeping around 1.2 GB of memory even after I am done with this ListWorksheets task. So a) 1.2 GB seems excessive for a 30 MB file and b) the memory should be deallocated when the tool is done with it should it not?"},{"Id":"12894130083","Type":"IssuesEvent","CreatedAt":"2020-07-13T23:23:41","Actor":"RAVIDHOBLE","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/755","RelatedDescription":"Opened issue \"Not able to add chart in spreadsheet\" (#755) at OfficeDev/Open-XML-SDK","RelatedBody":"Am new to C# and OpenXML. As per the example shown in this link [https://docs.microsoft.com/en-us/office/open-xml/how-to-insert-a-chart-into-a-spreadsheet](url) I can't see the chart added to the generated spreadsheet.\r\nIn this below code snipet the Uri link is not working. \r\ngraphicFrame.Append(New Graphic(New GraphicData(New ChartReference() With _\r\n                {.Id = drawingsPart.GetIdOfPart(chartPart)}) With {.Uri = _\r\n                \"http://schemas.openxmlformats.org/drawingml/2006/chart\"}))\r\nI also tried to use other .Uri http link. but not able to see the expected chart in the output spreadsheet. Looking for a solution to this."},{"Id":"12890395196","Type":"PullRequestEvent","CreatedAt":"2020-07-13T15:56:08","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/754","RelatedDescription":"Merged pull request \"Rename IOpenXmlSimpleTypeValidator to IValidator\" (#754) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"12890211031","Type":"PullRequestEvent","CreatedAt":"2020-07-13T15:38:55","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/754","RelatedDescription":"Opened pull request \"Rename IOpenXmlSimpleTypeValidator to IValidator\" (#754) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"12889212574","Type":"IssuesEvent","CreatedAt":"2020-07-13T14:12:39","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/566","RelatedDescription":"Reopened issue \"SAX Approach Replace Example\" (#566) at OfficeDev/Open-XML-SDK","RelatedBody":"I'm looking for an example of using the SAX approach (instead of DOM) to open a large file and perform a replace on a given value, then save the file.\r\n\r\nI think this would be a useful addition to the [Documentation](https://docs.microsoft.com/en-gb/office/open-xml/open-xml-sdk).\r\n\r\nHow to: Search and replace text in a document part (Open XML SDK)\r\nhttps://docs.microsoft.com/en-us/office/open-xml/how-to-search-and-replace-text-in-a-document-part\r\n\r\nThis uses a `Stream`.\r\n\r\nHow to: Parse and read a large spreadsheet document (Open XML SDK)\r\nhttps://docs.microsoft.com/en-us/office/open-xml/how-to-parse-and-read-a-large-spreadsheet\r\n\r\n```csharp\r\n// The SAX approach.\r\nstatic void ReadExcelFileSAX(string fileName)\r\n{\r\n    using (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(fileName, false))\r\n    {\r\n        WorkbookPart workbookPart = spreadsheetDocument.WorkbookPart;\r\n        WorksheetPart worksheetPart = workbookPart.WorksheetParts.First();\r\n\r\n        OpenXmlReader reader = OpenXmlReader.Create(worksheetPart);\r\n        string text;\r\n        while (reader.Read())\r\n        {\r\n            if (reader.ElementType == typeof(CellValue))\r\n            {\r\n                text = reader.GetText();\r\n                Console.Write(text + \" \");\r\n            }\r\n        }\r\n        Console.WriteLine();\r\n        Console.ReadKey();\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\nIf I read in the \"text\" and wish to replace this:\r\n\r\n```csharp\r\nusing (WordprocessingDocument wordDoc = WordprocessingDocument.Open(filePath, true))\r\n{\r\n    Document document = wordDoc.MainDocumentPart.Document;\r\n    OpenXmlReader reader = OpenXmlReader.Create(document);\r\n    while (reader.Read())\r\n    {\r\n        //OpenXmlElement element = reader.LoadCurrentElement();\r\n        //text = element.InnerText;\r\n        text = reader.GetText();\r\n    }\r\n}\r\n```\r\n\r\n`OpenXmlWriter` expects an `OpenXmlPart` or `Stream` when you create it.\r\n\r\n```csharp\r\nOpenXmlWriter writer = OpenXmlWriter.Create(#);\r\nwriter.WriteStartElement(reader);\r\nwriter.WriteElement(#);\r\nwriter.WriteEndElement();\r\nwriter.Close();\r\n```\r\n\r\nWhat is the supported approach/method for this?\r\n\r\nUsing the DOM approach on large files can cause memory exceptions.\r\n\r\n---\r\n\r\nThere are a number of blog posts documenting how to use the `OpenXmlWriter` but this is for creating new files or adding new elements to an existing file, not updating existing data.\r\n\r\n**Parsing and Reading Large Excel Files with the Open XML SDK**\r\nhttp://blogs.msdn.com/b/brian_jones/archive/2010/05/27/parsing-and-reading-large-excel-files-with-the-open-xml-sdk.aspx [Dead Link]\r\nhttps://web.archive.org/web/20151205145806/http://blogs.msdn.com/b/brian_jones/archive/2010/05/27/parsing-and-reading-large-excel-files-with-the-open-xml-sdk.aspx\r\n\r\n**Writing Large Excel Files with the Open XML SDK**\r\nhttp://blogs.msdn.com/b/brian_jones/archive/2010/06/22/writing-large-excel-files-with-the-open-xml-sdk.aspx [Dead Link]\r\nhttps://web.archive.org/web/20160216062257/http://blogs.msdn.com/b/brian_jones/archive/2010/06/22/writing-large-excel-files-with-the-open-xml-sdk.aspx\r\n\r\n**Performance issue while reading/writing large excel files using OpenXML SDK**\r\nhttp://tech-turf.blogspot.com/2015/10/performance-issue-while-readingwriting.html\r\n\r\n**How to read and write Excel cells with OpenXML and C#**\r\nhttp://fczaja.blogspot.com/2013/05/how-to-read-and-write-excel-cells-with.html\r\n\r\n**How to properly use OpenXmlWriter to write large Excel files**\r\nhttp://polymathprogrammer.com/2012/08/06/how-to-properly-use-openxmlwriter-to-write-large-excel-files/"},{"Id":"12886436965","Type":"IssuesEvent","CreatedAt":"2020-07-13T09:29:02","Actor":"tipa","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/753","RelatedDescription":"Opened issue \"DLL size in Xamarin project very large\" (#753) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nI am using this SDK in a Xamarin.Android project.\r\nStarting with 2.11.1, the DocumentFormat.OpenXml.dll in my release bundle grew from ~6MB to over 20MB, causing the apps download size to grow about 3MB\r\n\r\n**Information**\r\n\r\n- .NET Target: Xamarin\r\n- DocumentFormat.OpenXml Version: 2.11.1 + 2.11.2\r\n\r\n**Repro**\r\n\r\nXamarin.Android project with AOT+LLVM enabled\r\nExample project: [App2.zip](https://github.com/OfficeDev/Open-XML-SDK/files/4911544/App2.zip)\r\nYou can reproduce the problem by building the Release APK with v2.11.0 and with v2.11.2 - you will notice that with v2.11.0, the uncompressed DocumentFormat.OpenXml.dll in the APK (which can be renamed to .zip and inspected) is ~15MB and with v2.11.2 it is **over 30MB**.\r\n\r\nThis libraries DLL is already by far the largest of all the libraries that I am using in this project. It would be great if it wouldn't further increase my apps size :)"},{"Id":"12884223402","Type":"PullRequestEvent","CreatedAt":"2020-07-13T02:12:09","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/741","RelatedDescription":"Merged pull request \"Limit milliseconds to three digits\" (#741) at OfficeDev/Open-XML-SDK","RelatedBody":"Fixes #724 and adds test to ensure that's all that changes\r\nNo standard format limits to three digits for milliseconds, but the format is the same as `\"o\"` used before in all other regards"},{"Id":"12884223383","Type":"IssuesEvent","CreatedAt":"2020-07-13T02:12:09","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/724","RelatedDescription":"Closed issue \"CellValue ctor for DateTime and DateTimeOffset should use proper xml standard format\" (#724) at OfficeDev/Open-XML-SDK","RelatedBody":"Issue with the OpenXml library\r\n\r\n**Description**\r\n\r\nCellValue created via DateTime constructor does not serialize xml string properly.\r\nWith the latest version of Excel the document xml has no problems loading, however with Excel 2016 it fails to load the xml value.\r\n\r\nFurther inspection showed the issue was with \"midnight\" date cell value \"2019-09-25T00:00:00.0000000\". \r\nIf you trim down the miliseconds, it works, \r\nIf you add actual miliseconds, it works.\r\n\r\nTo workaround the issue I have used the string constructor with date formatted via `XmlConvert.ToString`\r\n\r\nFor example:\r\n\r\n```\r\nnew DateTime(2019, 9, 25, 0, 0, 0)\r\n    should be\r\n\"2019-09-25T00:00:00\"\r\n    but was\r\n\"2019-09-25T00:00:00.0000000\"\r\n```\r\n\r\n```\r\nnew DateTime(2019, 9, 25, 0, 0, 0).AddMilliseconds(123)\r\n    should be\r\n\"2019-09-25T00:00:00.123\"\r\n    but was\r\n\"2019-09-25T00:00:00.1230000\"\r\n```"},{"Id":"12884217296","Type":"IssuesEvent","CreatedAt":"2020-07-13T02:10:41","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/752","RelatedDescription":"Opened issue \"Add strongly typed parsing to CellValue\" (#752) at OfficeDev/Open-XML-SDK","RelatedBody":"`CellValue` can hold various forms of data. We've added constructors to correctly set `DateTime`/`DateTimeOffset` but it may be helpful to provide helpers for the other datatypes, as well as strongly typed parsers, ie `CellValue.TryParse(out DateTimeOffset dt)`"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2020-07-14T05:30:46.4017431Z","RunDurationInMilliseconds":954}