{"Data":{"Sdk":{"Events":[{"Id":"12468141508","Type":"PullRequestEvent","CreatedAt":"2020-05-28T18:19:14","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/729","RelatedDescription":"Merged pull request \"Use a builder pattern to configure metadata for elements\" (#729) at OfficeDev/Open-XML-SDK","RelatedBody":"This is part of a series of changes to consolidate the metadata. Previous changes has moved all relevant metadata into the classes themselves, now cleaning up their registration so it is clear, minimizes (hopefully removes) reflection usage, and potentially extensible.\r\n\r\nThis change does the following:\r\n\r\n- Removes usage of attributes for element metadata\r\n- Adds a ConfigureMetadata method that builds up metadata\r\n- Removes IndexAttribute and associated usage\r\n- Moves most element state itself into an `ElementState` holder that can track it (helps with programmatic access of attributes)\r\n\r\nLater changes will continue this by:\r\n\r\n- Move semantic constraints to be a part of this registration, removing the final magic numbers\r\n- Move constraint declaration into this, and potentially remove need for children registration\r\n- Change validators to be generic for easier simple type transformations\r\n- Apply similar method to the part and relationship definitions"},{"Id":"12459140240","Type":"IssuesEvent","CreatedAt":"2020-05-28T00:14:05","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/509","RelatedDescription":"Closed issue \"Generated package does not include certain required parts\" (#509) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\nStarted on MSDN support first. \r\nhttps://social.msdn.microsoft.com/Forums/office/en-US/fa395b57-ab12-4fe8-9fa1-0726c18fe0cd/openxml-generated-file-wont-open-in-ms-spreadsheet-compare-tool-and-excel-quotopen-and?forum=oxmlsdk\r\n\r\nThe basic problem is when a new file is created by OpenXML, it appears to load in Excel, but if you use the Excel File Open tool for \"Open and Repair\" you can see there are some hidden errors being reported. My assumption is the tool Spreadhsheet Compare tool from MS Office can't open this file because of teh same underlying error. If the file is opened and then saved in Excel, the tool now open the file. \r\n\r\n\r\n**Information**\r\n\r\n- .NET Target: 4.7.1\r\n- DocumentFormat.OpenXml Version: 2.8.1.0\r\n\r\n**Repro**\r\n\r\n```csharp\r\npublic static void CreateSpreadsheetWorkbook(string filepath)\r\n        {\r\n            // Create a spreadsheet document by supplying the filepath.\r\n            // By default, AutoSave = true, Editable = true, and Type = xlsx.\r\n            SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Create(filepath, SpreadsheetDocumentType.Workbook);\r\n\r\n            // Add a WorkbookPart to the document.\r\n            WorkbookPart workbookpart = spreadsheetDocument.AddWorkbookPart();\r\n            workbookpart.Workbook = new Workbook();\r\n\r\n            // Add a WorksheetPart to the WorkbookPart.\r\n            WorksheetPart worksheetPart = workbookpart.AddNewPart<WorksheetPart>();\r\n            worksheetPart.Worksheet = new Worksheet(new SheetData());\r\n\r\n            // Add Sheets to the Workbook.\r\n            Sheets sheets = spreadsheetDocument.WorkbookPart.Workbook.\r\n                AppendChild<Sheets>(new Sheets());\r\n\r\n            // Append a new worksheet and associate it with the workbook.\r\n            Sheet sheet = new Sheet()\r\n            {\r\n                Id = spreadsheetDocument.WorkbookPart.\r\n                    GetIdOfPart(worksheetPart),\r\n                SheetId = 1,\r\n                Name = \"mySheet\"\r\n            };\r\n            sheets.Append(sheet);\r\n\r\n            workbookpart.Workbook.Save();\r\n\r\n            // Close the document.\r\n            spreadsheetDocument.Close();\r\n        }\r\n``` \r\n\r\n**Observed**\r\n\r\nSpreadsheet Comparison tool will report\r\nhttps://support.office.com/en-us/article/Basic-tasks-in-Spreadsheet-Compare-F2B20AF8-A6D3-4780-8011-F15B3229F5D8\r\n\r\n\"Error opening workbook. Attempted to read past the end of the stream\"\r\n\r\nIf you attempt to open the file through Excel \"Open and Repair\" option, you will get this XML error. \r\n```XML\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<recoveryLog xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">\r\n<logFileName>error260080_01.xml</logFileName><summary>Errors were detected in file 'C:\\TEMP\\testing.xlsx'</summary>\r\n<additionalInfo><info>Excel completed file level validation and repair. Some parts of this workbook may have been repaired or discarded.</info></additionalInfo>\r\n</recoveryLog>\r\n``` \r\n\r\n**Expected**\r\nFile should open without errors.\r\n\r\nPlease add your expected behavior here.\r\n\r\n"},{"Id":"12457165782","Type":"PullRequestEvent","CreatedAt":"2020-05-27T19:46:47","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/729","RelatedDescription":"Opened pull request \"Use a builder pattern to configure metadata for elements\" (#729) at OfficeDev/Open-XML-SDK","RelatedBody":"This is part of a series of changes to consolidate the metadata. Previous changes has moved all relevant metadata into the classes themselves, now cleaning up their registration so it is clear, minimizes (hopefully removes) reflection usage, and potentially extensible.\r\n\r\nThis change does the following:\r\n\r\n- Removes usage of attributes for element metadata\r\n- Adds a ConfigureMetadata method that builds up metadata\r\n- Removes IndexAttribute and associated usage\r\n- Moves most element state itself into an `ElementState` holder that can track it (helps with programmatic access of attributes)\r\n\r\nLater changes will continue this by:\r\n\r\n- Move semantic constraints to be a part of this registration, removing the final magic numbers\r\n- Move constraint declaration into this, and potentially remove need for children registration\r\n- Change validators to be generic for easier simple type transformations\r\n- Apply similar method to the part and relationship definitions"},{"Id":"12435733959","Type":"IssuesEvent","CreatedAt":"2020-05-26T00:12:01","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/702","RelatedDescription":"Closed issue \"Can we make the ListStyle and TextListStyleType have inheritance\" (#702) at OfficeDev/Open-XML-SDK","RelatedBody":"# Before submitting an issue, please fill this out\r\n\r\nIs this a:\r\n- [x] Issue with the OpenXml library\r\n- [ ] Question on library usage\r\n\r\n**Description**\r\n\r\nI found that I need to write lengthy code to adapt the properties of these two classes.Because these two classes without inheritance have many of the same properties\r\n\r\n**Information**\r\n\r\n- .NET Target: All\r\n- DocumentFormat.OpenXml Version: 2.10.1\r\n\r\n**Repro**\r\n\r\nWhen I want to get the TextParagraphPropertiesType array of ListStyle and the array of TextListStyleType, I need to write the following code\r\n\r\n```csharp\r\n        public static TextParagraphPropertiesType[]\r\n            ToTextParagraphPropertiesTypeList(this ListStyle textBodyListStyle) => new TextParagraphPropertiesType[]\r\n        {\r\n            textBodyListStyle.Level1ParagraphProperties,\r\n            textBodyListStyle.Level2ParagraphProperties,\r\n            textBodyListStyle.Level3ParagraphProperties,\r\n            textBodyListStyle.Level4ParagraphProperties,\r\n            textBodyListStyle.Level5ParagraphProperties,\r\n            textBodyListStyle.Level6ParagraphProperties,\r\n            textBodyListStyle.Level7ParagraphProperties,\r\n            textBodyListStyle.Level8ParagraphProperties,\r\n            textBodyListStyle.Level9ParagraphProperties\r\n        };\r\n\r\n        public static TextParagraphPropertiesType[]\r\n            ToTextParagraphPropertiesTypeList(this TextListStyleType textListStyleType) => new TextParagraphPropertiesType[]\r\n            {\r\n                textListStyleType.Level1ParagraphProperties,\r\n                textListStyleType.Level2ParagraphProperties,\r\n                textListStyleType.Level3ParagraphProperties,\r\n                textListStyleType.Level4ParagraphProperties,\r\n                textListStyleType.Level5ParagraphProperties,\r\n                textListStyleType.Level6ParagraphProperties,\r\n                textListStyleType.Level7ParagraphProperties,\r\n                textListStyleType.Level8ParagraphProperties,\r\n                textListStyleType.Level9ParagraphProperties\r\n            };\r\n``` \r\n\r\n**Observed**\r\n\r\nThe code is too verbose\r\n\r\n**Expected**\r\n\r\nThere are concise ways, such as letting these two classes have an inheritance relationship, while providing an array containing the properties\r\n"},{"Id":"12409652778","Type":"IssuesEvent","CreatedAt":"2020-05-22T03:42:48","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/566","RelatedDescription":"Reopened issue \"SAX Approach Replace Example\" (#566) at OfficeDev/Open-XML-SDK","RelatedBody":"I'm looking for an example of using the SAX approach (instead of DOM) to open a large file and perform a replace on a given value, then save the file.\r\n\r\nI think this would be a useful addition to the [Documentation](https://docs.microsoft.com/en-gb/office/open-xml/open-xml-sdk).\r\n\r\nHow to: Search and replace text in a document part (Open XML SDK)\r\nhttps://docs.microsoft.com/en-us/office/open-xml/how-to-search-and-replace-text-in-a-document-part\r\n\r\nThis uses a `Stream`.\r\n\r\nHow to: Parse and read a large spreadsheet document (Open XML SDK)\r\nhttps://docs.microsoft.com/en-us/office/open-xml/how-to-parse-and-read-a-large-spreadsheet\r\n\r\n```csharp\r\n// The SAX approach.\r\nstatic void ReadExcelFileSAX(string fileName)\r\n{\r\n    using (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(fileName, false))\r\n    {\r\n        WorkbookPart workbookPart = spreadsheetDocument.WorkbookPart;\r\n        WorksheetPart worksheetPart = workbookPart.WorksheetParts.First();\r\n\r\n        OpenXmlReader reader = OpenXmlReader.Create(worksheetPart);\r\n        string text;\r\n        while (reader.Read())\r\n        {\r\n            if (reader.ElementType == typeof(CellValue))\r\n            {\r\n                text = reader.GetText();\r\n                Console.Write(text + \" \");\r\n            }\r\n        }\r\n        Console.WriteLine();\r\n        Console.ReadKey();\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\nIf I read in the \"text\" and wish to replace this:\r\n\r\n```csharp\r\nusing (WordprocessingDocument wordDoc = WordprocessingDocument.Open(filePath, true))\r\n{\r\n    Document document = wordDoc.MainDocumentPart.Document;\r\n    OpenXmlReader reader = OpenXmlReader.Create(document);\r\n    while (reader.Read())\r\n    {\r\n        //OpenXmlElement element = reader.LoadCurrentElement();\r\n        //text = element.InnerText;\r\n        text = reader.GetText();\r\n    }\r\n}\r\n```\r\n\r\n`OpenXmlWriter` expects an `OpenXmlPart` or `Stream` when you create it.\r\n\r\n```csharp\r\nOpenXmlWriter writer = OpenXmlWriter.Create(#);\r\nwriter.WriteStartElement(reader);\r\nwriter.WriteElement(#);\r\nwriter.WriteEndElement();\r\nwriter.Close();\r\n```\r\n\r\nWhat is the supported approach/method for this?\r\n\r\nUsing the DOM approach on large files can cause memory exceptions.\r\n\r\n---\r\n\r\nThere are a number of blog posts documenting how to use the `OpenXmlWriter` but this is for creating new files or adding new elements to an existing file, not updating existing data.\r\n\r\n**Parsing and Reading Large Excel Files with the Open XML SDK**\r\nhttp://blogs.msdn.com/b/brian_jones/archive/2010/05/27/parsing-and-reading-large-excel-files-with-the-open-xml-sdk.aspx [Dead Link]\r\nhttps://web.archive.org/web/20151205145806/http://blogs.msdn.com/b/brian_jones/archive/2010/05/27/parsing-and-reading-large-excel-files-with-the-open-xml-sdk.aspx\r\n\r\n**Writing Large Excel Files with the Open XML SDK**\r\nhttp://blogs.msdn.com/b/brian_jones/archive/2010/06/22/writing-large-excel-files-with-the-open-xml-sdk.aspx [Dead Link]\r\nhttps://web.archive.org/web/20160216062257/http://blogs.msdn.com/b/brian_jones/archive/2010/06/22/writing-large-excel-files-with-the-open-xml-sdk.aspx\r\n\r\n**Performance issue while reading/writing large excel files using OpenXML SDK**\r\nhttp://tech-turf.blogspot.com/2015/10/performance-issue-while-readingwriting.html\r\n\r\n**How to read and write Excel cells with OpenXML and C#**\r\nhttp://fczaja.blogspot.com/2013/05/how-to-read-and-write-excel-cells-with.html\r\n\r\n**How to properly use OpenXmlWriter to write large Excel files**\r\nhttp://polymathprogrammer.com/2012/08/06/how-to-properly-use-openxmlwriter-to-write-large-excel-files/"},{"Id":"12408585971","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:37","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/42","RelatedDescription":"Closed issue \"WordprocessingML PageMargin attributes' type not compliant\" (#42) at OfficeDev/Open-XML-SDK","RelatedBody":"I noticed that we use Int32 and UInt32 to store page margin values (left, top, right, bottom). However, the spec (§22.9.2.14 ST_TwipsMeasure) specifies that the type of the value depends on the value itself. It can be an integer or a decimal value with a unit specifier.\nThe result is there are some documents that can't be properly red, like those generated by Google Docs, because it uses decimal values for page margins.\n"},{"Id":"12408585932","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:37","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/90","RelatedDescription":"Closed issue \"SpreadSheet custom map add x: to defaultNamespace\" (#90) at OfficeDev/Open-XML-SDK","RelatedBody":"Changing an OpenEmlElement in a CustomXmlMapping adds the prefix x to the default namespace.\nThis results in the new xlsx file cant map to the schemas in excel.\n"},{"Id":"12408585897","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:36","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/143","RelatedDescription":"Closed issue \"Add constructor overload to validator that determines file format version instead of defaulting to 2007\" (#143) at OfficeDev/Open-XML-SDK","RelatedBody":"From #8 this is a request for fixing and improving default handling for validator ctor.\r\n\r\n\"The constructor of the validator requires me to specify against which fileformat (2007/2010/2013) to validate. How can I determine the file format of an existing document? If that's possible, why doesn't the default constructor of the validator do so, instead of defaulting to 2007?\"\r\n\r\n"},{"Id":"12408585837","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:36","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/166","RelatedDescription":"Closed issue \"Organize test infrastructure\" (#166) at OfficeDev/Open-XML-SDK","RelatedBody":"The tests need to be cleaned up in order to decrease run time (such as is shown in #186). Things that need to be done:\r\n\r\n- [x] Remove test context - this is unused and appears to be a remnant of an old test system (#231)\r\n- [x] Use xunit's ITestOutputHelper instead of creating custom log files (#230)\r\n- [x] Move test assets to be under the test directory so they can more easily be included in output using built-in tasks (#229)\r\n- [x] Consolidate OpenXmlDomTestExtensions - these seem to be duplicated and structured in a way so there is no single point where a file is opened. In order to speed up tests, this needs to be consolidated (#228)\r\n- [x] Redo \"Safelist.xml\" comparisons. This uses many regex comparisons to search for known issues and drastically slows the tests down (see https://github.com/OfficeDev/Open-XML-SDK/blob/vNext/DocumentFormat.OpenXml.Tests/OpenXmlDomTaskLibrary/OpenXmlDomTaskLibrary.cs#L40-L73)\r\n- [x] Use embedded resources instead of flat files so that open operations can be done in-memory instead of via file paths. File IO is a huge bottleneck for these tests.\r\n  - [x] Use test assets for `CreateDocumentTestClass` (#395)\r\n  - [x] Use test assets for `DocumentTraverseTests.Traverse[xxx]Document` (#403)\r\n  - [x] Use test assets for `GenerateList4LowLevelTest` (#405)\r\n  - [x] Use test assets for `MarkupCompatibilityTest` (#414)\r\n  - [x] Use test assets for `OpenXmlCompositeElementTestClass` (#402)\r\n  - [x] Use test assets for `OpenXmlReaderWriterTest.[bug247883|bug251835_ReaderDispose]` (#404)\r\n  - [x] Use test assets for `OpenXmlRootElementTestClass` (#397)\r\n- [x] Create a test assets library to minimize compilation times\r\n- [x] Remove current test util helpers that generate files (#443)\r\n- [ ] Remove `VerifiableLog` and use `ITestOutputHelper`\r\n- [ ] Move large generated tests to new assembly\r\n"},{"Id":"12408585777","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:35","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/204","RelatedDescription":"Closed issue \"Add SVG as ImagePartType for Office 2016 support\" (#204) at OfficeDev/Open-XML-SDK","RelatedBody":"Hi,\r\n\r\nOffice 2016 now (finally) supports svg as a vector image format (https://support.office.com/en-gb/article/Insert-SVG-images-in-Microsoft-Office-69f29d39-194a-4072-8c35-dbe5e7ea528c)\r\nAs far as I can see the OpenXml SDK does not currently have support for this yet (as ImagePartType for example).\r\nAre there any plans of adding it in the future, or any roadblocks that might inhibit implementing it?"},{"Id":"12408585739","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:34","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/224","RelatedDescription":"Closed issue \"Add custom part validation per MS-OI29500 3.5 and ISO/IEC 29500 15.2.5 and 15.2.6\" (#224) at OfficeDev/Open-XML-SDK","RelatedBody":"The Open-XML-SDK (at least at the time of writing) does not fail to validate documents which have missing required properties per MS-OI29500 3.5 and ISO/IEC 29500 15.2.5 and 15.2.6.\r\n\r\nOne way of creating these documents today is to go to an existing document library on a SharePoint server.  Ensure this document library has Office Documents in it.  Add a new required field to the document library.  if you then try to edit one of the files, it should not let you save due to the missing required fields.\r\n\r\nThat's because, as outlined in the standards specified above, the customXml parts list the required properties and the values of those properties.  The Open-XML-SDK doesn't provide an easy way to validate that those properties are all set."},{"Id":"12408585698","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:34","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/244","RelatedDescription":"Closed issue \"System.IO.IOException: Stream was too long error on .NET Core 2.0 application\" (#244) at OfficeDev/Open-XML-SDK","RelatedBody":"In .NET Core 2 console application ([ConsoleApp1.zip](https://github.com/OfficeDev/Open-XML-SDK/files/1309342/ConsoleApp1.zip)) writing a large Excel file stops with the following error:\r\nSystem.IO.IOException: Stream was too long.\r\n   at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.IO.Compression.WrappedStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.Xml.XmlUtf8RawTextWriter.FlushBuffer()\r\n   at System.Xml.XmlUtf8RawTextWriter.WriteAttributeTextBlock(Char* pSrc, Char* pSrcEnd)\r\n   at System.Xml.XmlUtf8RawTextWriter.WriteString(String text)\r\n   at System.Xml.XmlWellFormedWriter.WriteString(String text)\r\n   at DocumentFormat.OpenXml.OpenXmlElement.WriteAttributesTo(XmlWriter xmlWriter)\r\n   at DocumentFormat.OpenXml.OpenXmlElement.WriteTo(XmlWriter xmlWriter)\r\n   at DocumentFormat.OpenXml.OpenXmlPartWriter.WriteElement(OpenXmlElement elementObject)\r\n   at ConsoleApp1.Program.WriteRandomValuesSAX(String fileName, String sheetName) in C:\\Users\\anton\\Documents\\Visual Studio 2017\\Projects\\ConsoleApplication2\\ConsoleApp1\\Program.cs:line 80\r\n   at ConsoleApp1.Program.Main(String[] args) in C:\\Users\\anton\\Documents\\Visual Studio 2017\\Projects\\ConsoleApplication2\\ConsoleApp1\\Program.cs:line 105\r\n\r\nAnd application workset size was growed up to 4 GiB. But there is a x64 application, so the process memory is not limited by 4GiB\r\n\r\nMeanwhile in .NET FW4.7 same application ([ConsoleApp2.zip](https://github.com/OfficeDev/Open-XML-SDK/files/1309348/ConsoleApp2.zip)) works perfectly with 10 MB workset size"},{"Id":"12408585641","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:34","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/297","RelatedDescription":"Closed issue \"Unhandled OpenXmlPackageException when opening workbook which contains malformed email hyperlinks\" (#297) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\nAn unhandled OpenXmlPackageException exception is thrown by SpreadsheetDocument.Open when the workbook to be opened contains a malformed email hyperlink, such as mailto:one@.\r\nAs a result, the xlsx file cannot be opened while it opens fine in Excel.\r\n\r\n**Information**\r\n- .NET Target: .NET Framework 4.5.2\r\n- DocumentFormat.OpenXml Version: 2.7.2\r\n\r\n**Repro**\r\nIn Excel, create a new workbook.\r\nIn cell A1, enter random text and add a hyperlink (Right-click > Link).\r\nSelect 'E-mail address' and enter an invalid address, such as mailto:one@\r\nSave the file and try to open the file using OpenXml SDK:\r\nvar dSpreadsheet = SpreadsheetDocument.Open(fileName, false)\r\n\r\n**Observed**\r\nThe file cannot be opened with OpenXml SDK, an unhandled \r\nOpenXmlPackageException exception is thrown and further processing stops.\r\nThe file can be opened just fine in Excel.\r\n\r\n**Expected**\r\nThere should be a way to open such an xlsx.\r\n[issue6b.xlsx](https://github.com/OfficeDev/Open-XML-SDK/files/1483879/issue6b.xlsx)\r\n"},{"Id":"12408585616","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:33","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/384","RelatedDescription":"Closed issue \"Adding common interface/base class for related elements\" (#384) at OfficeDev/Open-XML-SDK","RelatedBody":"I know most of the element classes are code generated from XSDs somewhere. Sometimes when I would like to work on shared properties, especially like styles in Word, the classes don't share a common base class or interface to get at the strongly typed properties.\r\n\r\nFor instance, I've had to come up with this pattern.\r\n\r\n```\r\npublic interface IOpenXmlElement { } // For future\r\npublic interface IParagraphProperties : IOpenXmlElement\r\n{\r\n    Justification Justification { get; }\r\n    SpacingBetweenLines SpacingBetweenLines { get; }\r\n}\r\npublic class ParagraphProperties : DocumentFormat.OpenXml.Wordprocessing.ParagraphProperties, IParagraphProperties\r\n{\r\n    public ParagraphProperties(DocumentFormat.OpenXml.Wordprocessing.ParagraphProperties paragraphProperties)\r\n        : base(paragraphProperties.OuterXml)\r\n    { }\r\n}\r\npublic class ParagraphPropertiesBaseStyle : DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesBaseStyle, IParagraphProperties\r\n{\r\n    public ParagraphProperties(DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesBaseStyle baseStyle)\r\n        : base(baseStyle.OuterXml)\r\n    { }\r\n}\r\n\r\n```\r\n\r\nIs there a way the XSD and/or the code gen develop something similar using either an interface or base class for these related classes and properties?"},{"Id":"12408585567","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:33","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/387","RelatedDescription":"Closed issue \"Changes for 3.x version\" (#387) at OfficeDev/Open-XML-SDK","RelatedBody":"I've noticed some things we can do when we decide to make a 3.x version which will allow us to have breaking changes. I'll keep this list up-to-date with ideas as we come across them:\r\n\r\n- [ ] `OpenXmlSimpleType.TextValue` should be made `private protected`\r\n- [ ] Types derived from `OpenXmlSimpleType` should not have implicit casting operators if they allocate objects\r\n- [ ] Make `EnumStringAttribute` internal\r\n- [ ] Consider making a `DocumentFormat.OpenXml.Validation` library that adds the validation logic. This currently adds a few megabytes to the openxml library\r\n- [ ] Redesign usage of `IFixedContentTypePart`; possibly remove\r\n- [ ] Remove obsolete classes/methods\r\n- [ ] Slim `OpenXmlPackage` (and maybe others) by moving some helper methods to extension classes. An example is the `FlatOPC` methods\r\n- [ ] Make `ValidatorSettings` public and readonly. Add a constructor to `OpenXmlValidator` to handle the settings\r\n- [ ] Consider breaking up library into smaller ones for Word/Powerpoint/Excel. \r\n- [ ] Add standard unit conversion type. There are different units such as points, emus, etc. that could be understood and convertible from the api."},{"Id":"12408585513","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:32","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/389","RelatedDescription":"Closed issue \"DocumentFormat.OpenXml.Packaging.CoreFilePropertiesPart has no functional properties\" (#389) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nDocumentFormat.OpenXml.Packaging.CoreFilePropertiesPart has no functional properties. I'd like to access at least the tags, description and title elements. There seems to be a well defined schema for it.\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Core\r\n- DocumentFormat.OpenXml Version: (ie 2.8.2)\r\n\r\n** Concept API surface **\r\n\r\n```csharp\r\npublic class CoreProperties\r\n{\r\n    public string Category { get; set; } \r\n    public ContentStatusType ContentStatus { get; set; }\r\n    public DateTimeOffset CreatedAt {get; set;}\r\n    public string CreatedBy {get; set; }\r\n    public string Summary {get; set; }\r\n    public IReadOnlyCollection<Keyword> Keywords {get; }\r\n    public string Language {get; set; }\r\n    public string LastModifiedBy {get; set; }\r\n    public DateTimeOffset? LastModifiedAt {get; set; }\r\n    public DateTimeOffset? LastPrintedAt {get; set; }\r\n    public int? Revision {get; set; }\r\n    public int? Version {get; set; }\r\n    public string Subject {get; set; }\r\n    public string Title {get; set; }\r\n}\r\n\r\npublic class Keyword\r\n{\r\n    public string Language { get; set; }\r\n    public string Value { get; set; }\r\n}\r\n\r\npublic enum ContentStatusType \r\n{\r\n    Draft,\r\n    Reviewed,\r\n    Final\r\n}\r\n```\r\n"},{"Id":"12408585459","Type":"IssuesEvent","CreatedAt":"2020-05-22T00:06:32","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/393","RelatedDescription":"Closed issue \"Strict http://purl.oclc.org/ooxml/spreadsheetml/main tables fail validation\" (#393) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nStrict namespace spreadsheetml tables throw an exception in OpenXmlValidator.\r\n\r\n**Information**\r\n\r\n- .NET Target: whatever the default is in VS\r\n- DocumentFormat.OpenXml Version: 2.5.0, 2.8.1\r\n\r\n**Repro**\r\n\r\nTrivial spreadsheet that triggers the problem: [test.xlsx](https://github.com/OfficeDev/Open-XML-SDK/files/1668722/test.xlsx)\r\n\r\n*_rels/worksheet.xml.rels* has `<Relationship Id='rId1' Type='http://purl.oclc.org/ooxml/officeDocu\r\nment/relationships/table' Target='table.xml' />` which should, I think, enable `StrictTranslation`.\r\n\r\n*table.xml* has `<table xmlns='http://purl.oclc.org/ooxml/spreadsheetml/main' id='1' displayName='Data' ref='A1:B3'>`\r\n\r\nBoth URLs are straight from ECMA-376, Part 1, *12.3.21 Table Definition Part*.\r\n\r\nAdditionally, both LibreOffice and Office Online are able to load the table definition, which arguably might not signify anything.\r\n\r\n```csharp\r\nSpreadsheetDocument document = SpreadsheetDocument.Open(\"test.xlsx\", false);\r\nOpenXmlValidator validator = new OpenXmlValidator(FileFormatVersions.Office2010);\r\nvalidator.Validate(document);\r\n``` \r\n\r\n**Observed**\r\n\r\n```\r\nSystem.IO.InvalidDataException\r\n  HResult=0x80131501\r\n  Message=Cannot load the root element from the part. The part contains invalid data.\r\n  Source=DocumentFormat.OpenXml\r\n  StackTrace:\r\n   at DocumentFormat.OpenXml.Packaging.OpenXmlPart.LoadDomTree[T]()\r\n   at DocumentFormat.OpenXml.Packaging.TableDefinitionPart.get_PartRootElement()\r\n   at DocumentFormat.OpenXml.Validation.DocumentValidator.ValidatePart(OpenXmlPart part)\r\n   at DocumentFormat.OpenXml.Validation.DocumentValidator.Validate(OpenXmlPackage document)\r\n   at DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(OpenXmlPackage openXmlPackage)\r\n   at ConsoleApp1.Program.Main(String[] args) in C:\\Users\\IEUser\\source\\repos\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 18\r\n\r\nInner Exception 1:\r\nInvalidDataException: The root XML element \"http://purl.oclc.org/ooxml/spreadsheetml/main:table\" in the part is incorrect. The expected root XML element is: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main:table\".\r\n```\r\n\r\n**Expected**\r\n\r\nNo exception should be thrown and no errors returned."}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2020-05-29T05:30:42.0460709Z","RunDurationInMilliseconds":1268}