{"Data":{"Sdk":{"Events":[{"Id":"26519199144","Type":"PullRequestEvent","CreatedAt":"2023-01-19T00:10:40","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1316","RelatedDescription":"Opened pull request \"Convert IdPartPair to readonly struct\" (#1316) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"26518847770","Type":"PullRequestEvent","CreatedAt":"2023-01-18T23:42:58","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1315","RelatedDescription":"Opened pull request \"Remove custom project load style\" (#1315) at dotnet/Open-XML-SDK","RelatedBody":"This had been in place for some performance issues in VS. It does make\ndevelopment challenging, and with the refactoring of the framework from\nthe strongly typed classes, Visual Studio seems to handle this better.\n"},{"Id":"26512434280","Type":"IssuesEvent","CreatedAt":"2023-01-18T18:10:08","Actor":"ThomasBarnekow","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1314","RelatedDescription":"Opened issue \"Macro-enabled document created with CreateFromTemplate() cannot be opened by Word\" (#1314) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\n\r\nAs described in this [stackoverflow question](https://stackoverflow.com/questions/75158776/wordprocessingdocument-createfromtemplate-method-creates-corrupted-ms-word-files) and [my answer](https://stackoverflow.com/questions/75158776/wordprocessingdocument-createfromtemplate-method-creates-corrupted-ms-word-files/75160516#75160516), Microsoft Word does not open a macro-enabled document (.docm) created from a macro-enabled template (.dotm) with the `WordprocessingDocument.CreateFromTemplate()` method. When using the same code to create a \"normal\" document (.docx) from a template (.dotx), Word opens the document without any issue.\r\n\r\nWhen validating both documents (i.e., .docm and .docx) with the `OpenXmlValidator`, no validation errors are reported (unless the template is attached, in which case one validation error related to the attached template is emitted in each case).\r\n\r\n**To Reproduce**\r\n\r\n```csharp\r\npublic sealed class CreateFromTemplateTests\r\n{\r\n    private readonly ITestOutputHelper _output;\r\n\r\n    public CreateFromTemplateTests(ITestOutputHelper output)\r\n    {\r\n        _output = output;\r\n    }\r\n\r\n    [Theory]\r\n    [InlineData(\"c:\\\\temp\\\\MacroEnabledTemplate.dotm\", \"c:\\\\temp\\\\MacroEnabledDocument.docm\")]\r\n    [InlineData(\"c:\\\\temp\\\\Template.dotx\", \"c:\\\\temp\\\\Document.docx\")]\r\n    public void CanCreateDocmFromDotm(string templatePath, string documentPath)\r\n    {\r\n        // Let's not attach the template, which is done by default. If a template is attached, the validator complains as follows:\r\n        // The element has unexpected child element 'http://schemas.openxmlformats.org/wordprocessingml/2006/main:attachedTemplate'.\r\n        using (var wordDocument = WordprocessingDocument.CreateFromTemplate(templatePath, false))\r\n        {\r\n            // Validate the document as created with CreateFromTemplate.\r\n            ValidateOpenXmlPackage(wordDocument);\r\n\r\n            // Save that document to disk so we can open it with Word, for example.\r\n            wordDocument.SaveAs(documentPath).Dispose();\r\n        }\r\n\r\n        using (WordprocessingDocument wordDocument = WordprocessingDocument.Open(documentPath, true))\r\n        {\r\n            // Validate the document that was opened from disk, just to see what Word would open.\r\n            ValidateOpenXmlPackage(wordDocument);\r\n        }\r\n    }\r\n\r\n    private void ValidateOpenXmlPackage(OpenXmlPackage openXmlPackage)\r\n    {\r\n        OpenXmlValidator validator = new(FileFormatVersions.Office2019);\r\n        List<ValidationErrorInfo> validationErrors = validator.Validate(openXmlPackage).ToList();\r\n\r\n        foreach (ValidationErrorInfo validationError in validationErrors)\r\n        {\r\n            _output.WriteLine(validationError.Description);\r\n        }\r\n\r\n        if (validationErrors.Any())\r\n        {\r\n            // Note that Word will most often be able to open the document even if there are validation errors.\r\n            throw new Exception(\"The validator found validation errors.\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe above unit tests pass and no validation errors are reported. \r\n\r\nI could not attach the templates. However, I only created super-simple templates with one line of text and a hello world macro in the case of the macro-enabled template.\r\n\r\n**Observed behavior**\r\n\r\nThe Word document (.docx) created by the test can be opened as expected. The macro-enabled document (.docm) cannot be opened. In my case, Word neither displays the document nor reports any error. In the case of the original poster of the stackoverflow question, a runtime error seems to occur (which I could not reproduce).\r\n\r\n**Expected behavior**\r\n\r\nUsing `WordprocessingDocument.CreateFromTemplate()`, the Open XML SDK should be able to create a macro-enabled document (.docm) from a valid, macro-enabled template (.dotm) that can be opened by Microsoft Word.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows 10 (in my case)\r\n - Office version: Word 365 version 16.0.14931.20648 32bit (OP on stackoverflow), Microsoft Word for M365 MSO (Version 2022 Build 16.0.14931.20858) 64-bit (in my case)\r\n - .NET Target: .NET 7.0 and net472 (in my case)\r\n - DocumentFormat.OpenXml Version: 2.19.0 (in both cases)\r\n"},{"Id":"26505336881","Type":"IssuesEvent","CreatedAt":"2023-01-18T13:27:13","Actor":"m-gallesio","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1313","RelatedDescription":"Opened issue \"Split assembly in separate packages for DOCX / XLSX / PPTX\" (#1313) at dotnet/Open-XML-SDK","RelatedBody":"Per https://github.com/dotnet/Open-XML-SDK/issues/387\r\n> Consider breaking up library into smaller ones for Word/Powerpoint/Excel.\r\n\r\nAs well as my comment: https://github.com/dotnet/Open-XML-SDK/issues/387#issuecomment-1140978211\r\n> Yes, please. Having these separated (along with a base / core module, I assume) would improve clarity, make for a smaller base package (currently ~5.8 MB) and allow more code splitting between dependent assemblies. For reference our product does not currently use Powerpoint at all.\r\n\r\nI know this topic is in the backlog, but considering its structural impact I think it it worth it to have a dedicated issue, at least to improve its visibility and prevent it from getting buried.\r\n\r\n(I have searched for similar issues but if I could not find any; if this is indeed explicitly tracked elsewhere please close / delete this issue)."},{"Id":"26479525656","Type":"IssuesEvent","CreatedAt":"2023-01-17T13:45:05","Actor":"zhuangjiaju","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1312","RelatedDescription":"Opened issue \"The correct date cannot be read\" (#1312) at OfficeDev/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\n\r\nI expected the date to be: `2022-06-17 23:59:59`, but instead I got `2022-06-17 23:59:58`\r\n\r\n\r\n**Screenshots**\r\n\r\n![image](https://user-images.githubusercontent.com/18475586/212914590-a6471b6f-ff97-46ba-b48c-bff110a34812.png)\r\n\r\n![image](https://user-images.githubusercontent.com/18475586/212914742-eba95860-671f-4ead-aded-234d2301b3de.png)\r\n\r\n\r\n\r\nSteps to reproduce the behavior:\r\n```c#\r\n// Open the document as read-only.\r\nusing (SpreadsheetDocument spreadsheetDocument =\r\n       SpreadsheetDocument.Open(\"/Users/zhuangjiaju/Downloads/date2.xlsx\", false))\r\n{\r\n    WorkbookPart workbookPart = spreadsheetDocument.WorkbookPart;\r\n    WorksheetPart worksheetPart = workbookPart.WorksheetParts.First();\r\n    SheetData sheetData = worksheetPart.Worksheet.Elements<SheetData>().First();\r\n    string text;\r\n    foreach (Row r in sheetData.Elements<Row>())\r\n    {\r\n        foreach (Cell c in r.Elements<Cell>())\r\n        {\r\n            text = c.CellValue.Text;\r\n            double doubleTime = double.Parse(c.CellValue.InnerXml);\r\n            DateTime dateTime = DateTime.FromOADate(doubleTime);\r\n            Console.WriteLine(dateTime.ToString(\"yyyy-MM-dd HH:mm:ss\") + \" \");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Observed behavior**\r\nA clear and concise description of what you expected to happen.\r\n[date2.xlsx](https://github.com/OfficeDev/Open-XML-SDK/files/10435559/date2.xlsx)\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: [e.g. Windows]\r\n - Office version [e.g. 16.0.15427.20178]\r\n - .NET Target: (e.g. .NET Framework, .NET Core, UWP, Xamarin...)\r\n - DocumentFormat.OpenXml Version: (e.g. 2.11.0)\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-01-20T03:31:59.416806Z","RunDurationInMilliseconds":726}