{"Data":{"Sdk":{"Events":[{"Id":"51438860573","Type":"PullRequestEvent","CreatedAt":"2025-06-27T18:32:58","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1949","RelatedDescription":"Opened pull request \"Obsolete PivotCacheRichInfo and PivotCacheDynamicArray classes\" (#1949) at dotnet/Open-XML-SDK","RelatedBody":"- closes #1946 \r\n- closes #1944 "},{"Id":"51421697127","Type":"IssuesEvent","CreatedAt":"2025-06-27T11:12:26","Actor":"alexa-padberg","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1948","RelatedDescription":"Closed issue \"Getting Error that Powerpoint needs to be repaired after adding video through open xml\" (#1948) at dotnet/Open-XML-SDK","RelatedBody":"I am currently trying to add in a video element to a powerpoint that I am creating. I have tried both of microsofts functions in the openxml sdk\nas well as a chat line on github about having a similar issue. https://github.com/dotnet/Open-XML-SDK/issues/1740\n\nI am not entirely sure what the problem is, but I always get a notification that the powerpoint has to be repaired and every time I open it, there is not video or image displayed on the slide. Oddly enough, when I open the powerpoint, the video is displayed on the slide correcntly. I cannot figure out where the xml is messed up and causing the repair error.  Here is my current function\n\n```csharp\n public async static Task AddVideo(PresentationDocument presentationDocument, SlidePart slidePart, string videoFilePath, string coverPicPath)\n {\n\n     string imgEmbedId = \"imgid\", embedId = \"embedid\", mediaEmbedId = \"mediaid\";\n     UInt32Value shapeId = 5;\n   \n         PresentationPart presentationPart = presentationDocument.PresentationPart;\n\n         //Get slides ids.\n         OpenXmlElementList slidesIds = presentationPart.Presentation.SlideIdList.ChildElements;\n\n       \n\n         //Get slide part by relationshipID\n         //SlidePart? slidePart = (SlidePart)presentationPart.GetPartById(videoSldRelationshipId);\n\n         // Create video Media Data Part (content type, extension)\n         MediaDataPart mediaDataPart = presentationDocument.CreateMediaDataPart(\"video/mp4\", \".mp4\");\n\n         //Get the video file and feed the stream\n         using (Stream mediaDataPartStream = File.OpenRead(videoFilePath))\n         {\n             mediaDataPart.FeedData(mediaDataPartStream);\n         }\n         //Adds a VideoReferenceRelationship to the MainDocumentPart\n         slidePart.AddVideoReferenceRelationship(mediaDataPart, embedId);\n\n         //Adds a MediaReferenceRelationship to the SlideLayoutPart\n         slidePart.AddMediaReferenceRelationship(mediaDataPart, mediaEmbedId);\n\n         NonVisualDrawingProperties nonVisualDrawingProperties = new NonVisualDrawingProperties() { Id = shapeId, Name = \"video\" };\n         A.VideoFromFile videoFromFile = new A.VideoFromFile() { Link = embedId };\n\n         ApplicationNonVisualDrawingProperties appNonVisualDrawingProperties = new ApplicationNonVisualDrawingProperties();\n         appNonVisualDrawingProperties.Append(videoFromFile);\n\n         //adds sample image to the slide with id to be used as reference in blip\n         ImagePart imagePart = slidePart.AddImagePart(ImagePartType.Png, imgEmbedId);\n         using (Stream data = File.OpenRead(coverPicPath))\n         {\n             imagePart.FeedData(data);\n         }\n\n         if (slidePart!.Slide!.CommonSlideData!.ShapeTree == null)\n         {\n             throw new NullReferenceException(\"Presentation shape tree is empty\");\n         }\n\n         //Getting existing shape tree object from PowerPoint\n         P.ShapeTree shapeTree = slidePart.Slide.CommonSlideData.ShapeTree;\n\n         // specifies the existence of a picture within a presentation.\n         // It can have non-visual properties, a picture fill as well as shape properties attached to it.\n         Picture picture = new Picture();\n         NonVisualPictureProperties nonVisualPictureProperties = new NonVisualPictureProperties();\n\n       //  A.HyperlinkOnClick hyperlinkOnClick = new A.HyperlinkOnClick() { Id = \"\", Action = \"ppaction://media\" };\n        // nonVisualDrawingProperties.Append(hyperlinkOnClick);\n\n         NonVisualPictureDrawingProperties nonVisualPictureDrawingProperties = new NonVisualPictureDrawingProperties();\n         A.PictureLocks pictureLocks = new A.PictureLocks() { NoChangeAspect = true };\n         nonVisualPictureDrawingProperties.Append(pictureLocks);\n\n         ApplicationNonVisualDrawingPropertiesExtensionList appNonVisualDrawingPropertiesExtensionList = new ApplicationNonVisualDrawingPropertiesExtensionList();\n         ApplicationNonVisualDrawingPropertiesExtension appNonVisualDrawingPropertiesExtension = new ApplicationNonVisualDrawingPropertiesExtension() { Uri = \"{DAA4B4D4-6D71-4841-9C94-3DE7FCFB9230}\" };\n\n     P14.Media media = new() { Embed = mediaEmbedId };\n     media.AddNamespaceDeclaration(\"p14\", \"http://schemas.microsoft.com/office/powerpoint/2010/main\");\n\n     appNonVisualDrawingPropertiesExtension.Append(media);\n     appNonVisualDrawingPropertiesExtensionList.Append(appNonVisualDrawingPropertiesExtension);\n     appNonVisualDrawingProperties.Append(appNonVisualDrawingPropertiesExtensionList);\n\n          nonVisualPictureProperties.Append(nonVisualDrawingProperties);\n         nonVisualPictureProperties.Append(nonVisualPictureDrawingProperties);\n     //start here for commenting shit out\n         nonVisualPictureProperties.Append(appNonVisualDrawingProperties);\n\n         //Prepare shape properties to display picture\n         BlipFill blipFill = new BlipFill();\n         A.Blip blip = new A.Blip() { Embed = imgEmbedId };\n     A.Stretch stretch = new A.Stretch();\n     A.FillRectangle fillRectangle = new A.FillRectangle();\n     A.Transform2D transform2D = new A.Transform2D();\n     A.Offset offset = new A.Offset() { X = 4801938, Y = 1960881 };\n     A.Extents extents = new A.Extents() { Cx = 7410381, Cy = 3165566 };\n\n     \n      long arialX = (long)GeoPoserPowerPointFrame.arialX;  // Horizontal position\n     long arialY = (long)GeoPoserPowerPointFrame.arialY;\n\n     A.PresetGeometry presetGeometry = new A.PresetGeometry() { Preset = A.ShapeTypeValues.Rectangle };\n     A.AdjustValueList adjValueList = new A.AdjustValueList();\n\n     stretch.Append(fillRectangle);\n         blipFill.Append(blip);\n         blipFill.Append(stretch);\n         transform2D.Append(offset);\n         transform2D.Append(extents);\n         presetGeometry.Append(adjValueList);\n     P.ShapeProperties pShapeProperties = new P.ShapeProperties();\n\n     ShapeProperties shapeProperties = new ShapeProperties();\n         pShapeProperties.Append(transform2D);\n         pShapeProperties.Append(presetGeometry);\n\n         //adds all elements to the slide's shape tree\n         picture.Append(nonVisualPictureProperties);\n         picture.Append(blipFill);\n         picture.Append(pShapeProperties);\n\n         shapeTree.Append(picture);\n     \n }\n```"},{"Id":"51397117668","Type":"IssuesEvent","CreatedAt":"2025-06-26T20:36:51","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1933","RelatedDescription":"Closed issue \"When the root element is an unknown element, OpenXmlPartReader could not get the correct values of LocalName, NamespaceUri and Prefix properties\" (#1933) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\nIn the CreateElement method of OpenXmlPartReader, when the element is unknown, it returns a new instance of OpenXmlUnknownElement but does not pass the qualified name and prefix parameters to its constructor, resulting in the reader being unable to retrieve the correct values of some properties such as LocalName\n\n**Observed behavior**\nWhen the root element is an unknown element, the LocalName, NamepaceUri and Prefix properties of the reader are string.Empty\n\n**Expected behavior**\nThe reader returns the correct values of the element\n\n**Additional context**\nIt seems that even for the construction of known elements, the relevant parameters are not passed. If I use a different namespace prefix, the reader's Prefix property still returns the element's default prefix, not the actual value. Is this also a bug?\n"},{"Id":"51397117322","Type":"PullRequestEvent","CreatedAt":"2025-06-26T20:36:51","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1936","RelatedDescription":"Merged pull request \"Fixes #1933 - CreateElement calls now parametrized UnknownOpenXmlElement constructor\" (#1936) at dotnet/Open-XML-SDK","RelatedBody":"Fixes #1933 "},{"Id":"51389278047","Type":"IssuesEvent","CreatedAt":"2025-06-26T17:00:36","Actor":"alexa-padberg","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1948","RelatedDescription":"Opened issue \"Getting Error that Powerpoint needs to be repaired after adding video through open xml\" (#1948) at dotnet/Open-XML-SDK","RelatedBody":"I am currently trying to add in a video element to a powerpoint that I am creating. I have tried both of microsofts functions in the openxml sdk\nas well as a chat line on github about having a similar issue. https://github.com/dotnet/Open-XML-SDK/issues/1740\n\nI am not entirely sure what the problem is, but I always get a notification that the powerpoint has to be repaired and every time I open it, there is not video or image displayed on the slide. Oddly enough, when I open the powerpoint, the video is displayed on the slide correcntly. I cannot figure out where the xml is messed up and causing the repair error.  Here is my current function\n\n public async static Task AddVideo(PresentationDocument presentationDocument, SlidePart slidePart, string videoFilePath, string coverPicPath)\n {\n\n     string imgEmbedId = \"imgid\", embedId = \"embedid\", mediaEmbedId = \"mediaid\";\n     UInt32Value shapeId = 5;\n   \n         PresentationPart presentationPart = presentationDocument.PresentationPart;\n\n         //Get slides ids.\n         OpenXmlElementList slidesIds = presentationPart.Presentation.SlideIdList.ChildElements;\n\n       \n\n         //Get slide part by relationshipID\n         //SlidePart? slidePart = (SlidePart)presentationPart.GetPartById(videoSldRelationshipId);\n\n         // Create video Media Data Part (content type, extension)\n         MediaDataPart mediaDataPart = presentationDocument.CreateMediaDataPart(\"video/mp4\", \".mp4\");\n\n         //Get the video file and feed the stream\n         using (Stream mediaDataPartStream = File.OpenRead(videoFilePath))\n         {\n             mediaDataPart.FeedData(mediaDataPartStream);\n         }\n         //Adds a VideoReferenceRelationship to the MainDocumentPart\n         slidePart.AddVideoReferenceRelationship(mediaDataPart, embedId);\n\n         //Adds a MediaReferenceRelationship to the SlideLayoutPart\n         slidePart.AddMediaReferenceRelationship(mediaDataPart, mediaEmbedId);\n\n         NonVisualDrawingProperties nonVisualDrawingProperties = new NonVisualDrawingProperties() { Id = shapeId, Name = \"video\" };\n         A.VideoFromFile videoFromFile = new A.VideoFromFile() { Link = embedId };\n\n         ApplicationNonVisualDrawingProperties appNonVisualDrawingProperties = new ApplicationNonVisualDrawingProperties();\n         appNonVisualDrawingProperties.Append(videoFromFile);\n\n         //adds sample image to the slide with id to be used as reference in blip\n         ImagePart imagePart = slidePart.AddImagePart(ImagePartType.Png, imgEmbedId);\n         using (Stream data = File.OpenRead(coverPicPath))\n         {\n             imagePart.FeedData(data);\n         }\n\n         if (slidePart!.Slide!.CommonSlideData!.ShapeTree == null)\n         {\n             throw new NullReferenceException(\"Presentation shape tree is empty\");\n         }\n\n         //Getting existing shape tree object from PowerPoint\n         P.ShapeTree shapeTree = slidePart.Slide.CommonSlideData.ShapeTree;\n\n         // specifies the existence of a picture within a presentation.\n         // It can have non-visual properties, a picture fill as well as shape properties attached to it.\n         Picture picture = new Picture();\n         NonVisualPictureProperties nonVisualPictureProperties = new NonVisualPictureProperties();\n\n       //  A.HyperlinkOnClick hyperlinkOnClick = new A.HyperlinkOnClick() { Id = \"\", Action = \"ppaction://media\" };\n        // nonVisualDrawingProperties.Append(hyperlinkOnClick);\n\n         NonVisualPictureDrawingProperties nonVisualPictureDrawingProperties = new NonVisualPictureDrawingProperties();\n         A.PictureLocks pictureLocks = new A.PictureLocks() { NoChangeAspect = true };\n         nonVisualPictureDrawingProperties.Append(pictureLocks);\n\n         ApplicationNonVisualDrawingPropertiesExtensionList appNonVisualDrawingPropertiesExtensionList = new ApplicationNonVisualDrawingPropertiesExtensionList();\n         ApplicationNonVisualDrawingPropertiesExtension appNonVisualDrawingPropertiesExtension = new ApplicationNonVisualDrawingPropertiesExtension() { Uri = \"{DAA4B4D4-6D71-4841-9C94-3DE7FCFB9230}\" };\n\n     P14.Media media = new() { Embed = mediaEmbedId };\n     media.AddNamespaceDeclaration(\"p14\", \"http://schemas.microsoft.com/office/powerpoint/2010/main\");\n\n     appNonVisualDrawingPropertiesExtension.Append(media);\n     appNonVisualDrawingPropertiesExtensionList.Append(appNonVisualDrawingPropertiesExtension);\n     appNonVisualDrawingProperties.Append(appNonVisualDrawingPropertiesExtensionList);\n\n          nonVisualPictureProperties.Append(nonVisualDrawingProperties);\n         nonVisualPictureProperties.Append(nonVisualPictureDrawingProperties);\n     //start here for commenting shit out\n         nonVisualPictureProperties.Append(appNonVisualDrawingProperties);\n\n         //Prepare shape properties to display picture\n         BlipFill blipFill = new BlipFill();\n         A.Blip blip = new A.Blip() { Embed = imgEmbedId };\n     A.Stretch stretch = new A.Stretch();\n     A.FillRectangle fillRectangle = new A.FillRectangle();\n     A.Transform2D transform2D = new A.Transform2D();\n     A.Offset offset = new A.Offset() { X = 4801938, Y = 1960881 };\n     A.Extents extents = new A.Extents() { Cx = 7410381, Cy = 3165566 };\n\n     \n      long arialX = (long)GeoPoserPowerPointFrame.arialX;  // Horizontal position\n     long arialY = (long)GeoPoserPowerPointFrame.arialY;\n\n     A.PresetGeometry presetGeometry = new A.PresetGeometry() { Preset = A.ShapeTypeValues.Rectangle };\n     A.AdjustValueList adjValueList = new A.AdjustValueList();\n\n     stretch.Append(fillRectangle);\n         blipFill.Append(blip);\n         blipFill.Append(stretch);\n         transform2D.Append(offset);\n         transform2D.Append(extents);\n         presetGeometry.Append(adjValueList);\n     P.ShapeProperties pShapeProperties = new P.ShapeProperties();\n\n     ShapeProperties shapeProperties = new ShapeProperties();\n         pShapeProperties.Append(transform2D);\n         pShapeProperties.Append(presetGeometry);\n\n         //adds all elements to the slide's shape tree\n         picture.Append(nonVisualPictureProperties);\n         picture.Append(blipFill);\n         picture.Append(pShapeProperties);\n\n         shapeTree.Append(picture);\n     \n }"},{"Id":"51296437578","Type":"IssuesEvent","CreatedAt":"2025-06-24T20:47:37","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1947","RelatedDescription":"Opened issue \"Remove PivotCacheRichInfo\" (#1947) at dotnet/Open-XML-SDK","RelatedBody":"odoc:omit=\"true\" fails  on CT_PivotCacheRichInfo, so PivotCacheRichInfo should be removed in v4 unless the odoc:omit status has changed."},{"Id":"51296395149","Type":"IssuesEvent","CreatedAt":"2025-06-24T20:46:22","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1946","RelatedDescription":"Opened issue \"Obsolete PivotCacheRichInfo\" (#1946) at dotnet/Open-XML-SDK","RelatedBody":"CT_PivotCacheRichInfo is odoc:omit=\"true\" but it failed, so PivotCacheRichInfo should be obsoleted then removed in v4"},{"Id":"51291183387","Type":"IssuesEvent","CreatedAt":"2025-06-24T18:19:36","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1945","RelatedDescription":"Opened issue \"Remove PivotCacheDynamicArray class\" (#1945) at dotnet/Open-XML-SDK","RelatedBody":"The PivotCacheDynamicArray is obsoleted and should be removed in v4"},{"Id":"51291130846","Type":"IssuesEvent","CreatedAt":"2025-06-24T18:18:11","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1944","RelatedDescription":"Opened issue \"Obsolete PivotCacheDynamicArray class\" (#1944) at dotnet/Open-XML-SDK","RelatedBody":"CT_PivotCacheDynamicArrayExt has been removed in the latest schema update so PivotCacheDynamicArray should be obsoleted until it can be removed in v4"},{"Id":"51288387697","Type":"IssuesEvent","CreatedAt":"2025-06-24T17:06:49","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1943","RelatedDescription":"Opened issue \"Add Feature Extension and List for CT_CustomSheetView and CT_SheetView\" (#1943) at dotnet/Open-XML-SDK","RelatedBody":"CT_CustomSheetView and CT_SheetView need feature extension and list added to patch file"},{"Id":"51267492361","Type":"IssuesEvent","CreatedAt":"2025-06-24T09:42:32","Actor":"JoseAngelSalmeronMorote","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1942","RelatedDescription":"Opened issue \"Bug with Open XML SDK Disposing SpreadsheetDocument\" (#1942) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\n\nReading metadata properties of an Excel file containing `ContentTypeId` metadata attribute leads to a huge increase of memory while disposing SpreadsheetDocument.\n\n**Screenshots**\n\nMemory issue on Spreadsheetdocument disposal:\n![Image](https://github.com/user-attachments/assets/d14783e9-a9b6-4ec3-8f84-e54e0c5976f0)\n\nMetadata attribute causing the trouble:\n\n![Image](https://github.com/user-attachments/assets/f51e95ce-5a5d-4228-aef9-33f06fa753fd)\n\n**To Reproduce**\n\nMinimal repro:\n\nvar openSettings = new OpenSettings\n{\n    RelationshipErrorHandlerFactory = package =>\n    {\n        return new UriRelationshipErrorHandler();\n    }\n};\nusing (FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite))\n{\n    using (SpreadsheetDocument myDoc = SpreadsheetDocument.Open(fs, true, openSettings))\n    {\n        //Access main part of document \n        CustomFilePropertiesPart FileProperties = myDoc.CustomFilePropertiesPart;\n\n        if (FileProperties == null)\n        {\n            output = MetadataError.ThereAreNoProperties;\n            return output;\n        }\n\n        // Bug here: Executing this line leads to later issue while disposing 'myDoc'.\n        // I assume it's related to the 'LoadDom<Properties>' executed inside of it.\n        DocumentFormat.OpenXml.CustomProperties.Properties props = FileProperties.Properties;\n        output = MetadataError.Ok;\n    } // Issue here: this line never returns.\n    fs.Close(); // Line never reached.\n}\n\nSteps to reproduce the behavior:\n1. Get an Excel file of 100Mb.\n2. Add this metadata attribute: 'ContentTypeId' of type 'Text' with value '0x010100FA10029CDD445747B364374CC14F16B5' (this is automatically added by SharePoint if you just upload/download the document).\n3. Execute above code.\n4. See how memory increases until several Gb and the process hang.\n\n**Observed behavior**\n\nMemory increases until its limit. Dispose line never returns.\n\n**Expected behavior**\nMemory should not increase and .Disposing the SpreadsheetDocument should not hang the application.\n\n**Desktop (please complete the following information):**\n - OS: [Windows Server 2022 Datacenter Evaluation]\n - Office version [N/A]\n - .NET Target: reproduced with .NETStandard 2.0 and .NETFramework 4.0\n - DocumentFormat.OpenXml Version: 2.12.0\n\n**Additional context**\n\n"},{"Id":"51238106194","Type":"PullRequestEvent","CreatedAt":"2025-06-23T18:09:58","Actor":"tomjebo","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1941","RelatedDescription":"Opened pull request \"Fixes #1033 by adding oMath element to CT_TextMath\" (#1941) at dotnet/Open-XML-SDK","RelatedBody":""}],"ResultType":"GitHubEvent"}},"RunOn":"2025-06-29T03:30:21.6091498Z","RunDurationInMilliseconds":490}