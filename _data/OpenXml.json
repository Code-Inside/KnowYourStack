{"Data":{"Sdk":{"Events":[{"Id":"16309269675","Type":"IssuesEvent","CreatedAt":"2021-05-11T11:55:10","Actor":"Hacnar","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/930","RelatedDescription":"Opened issue \"Opening an empty docx file leaks handle on Windows.\" (#930) at OfficeDev/Open-XML-SDK","RelatedBody":"Is this a:\r\n- [x] Issue with the OpenXml library\r\n- [ ] Question on library usage\r\n\r\n**Description**\r\n\r\nWhen trying to open empty docx file, OpenXml keeps an open handle to this file after throwing an exception. This prevents certain actions from being performed on the file, e.g. deleting it.\r\n\r\n**Information**\r\n\r\nTested with\r\n- Windows 10 x64 20H2 build 19042.964\r\n- .NET 5.0.5\r\n- DocumentFormat.OpenXml 2.11.3 and 2.12.3 nuget packages\r\n\r\n**Repro**\r\n\r\nCreate a new, empty docx file and try to open it with OpenXml.\r\n\r\n```csharp\r\nvoid LeakedHandle()\r\n{\r\n    var path = @\"F:\\aaa.docx\";\r\n    using var doc = WordprocessingDocument.Open(path, false);\r\n}\r\n``` \r\n\r\n**Observed**\r\n\r\nThe method Open throws an exception, which I handle. However, I am unable to delete the file after that.\r\n\r\n**Expected**\r\n\r\nI can delete the file.\r\n"},{"Id":"16295744757","Type":"IssuesEvent","CreatedAt":"2021-05-10T22:23:19","Actor":"robertmuehsig","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/929","RelatedDescription":"Opened issue \"Office 365 Word starts extremly slow with a template that has \"AltChunks\" in it\" (#929) at OfficeDev/Open-XML-SDK","RelatedBody":"Office 365 Word starts extremly slow with a template that has \"AltChunks\" in it\r\n\r\nWe have a tool, that produces \"dotx\" files. The tool can automatically add content based on some variables. The added content is inserted via the OpenXML \"AltChunk\" mechanic. \r\n\r\nThis worked absolutely fine in Office 2013/2016/2019, but with Office 365 we are seeing performance issues. \r\n\r\nWe even could reproduce it with a very simple dotx template: We just inserted 200 \"AltChunks\" with the content \"ABC\".\r\n\r\nOffice 365 Word needs more than 4 minutes to open this file. On a machine with Office 2019 this takes 5 seconds. \r\n\r\nIt seems that the performance is getting worse when a user has multiple languages installed. Attached is the \"simple dotx\" file. \r\n\r\nBe aware that I posted the same stuff in the MS Office Support forum, but the official MS Support sees \"AltChunk\" and told me, that this is development related. Maybe someone could clarify if this is an official \"bug\" or if we are doing something strange inside the generated template.\r\n\r\nThe MS support forum issue: https://answers.microsoft.com/en-us/msoffice/forum/msoffice_word-mso_win10-mso_o365b/office-365-word-starts-extremly-slow-with-a/ff762f54-4044-4076-a6da-79aee6f10df1?auth=1\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Framework\r\n- DocumentFormat.OpenXml Version: 2.9.1\r\n\r\n**Repro**\r\n\r\n* Create a template with multiple AltChunks\r\n* Open the generated template on a Office 365 Click to Run installation (Current Channel) \r\n* To make it even worse: Install addional language packs (I have 10 installed)\r\n\r\n**Observed**\r\n\r\nWord loading phase is extremly long even on simple documents\r\n\r\n**Expected**\r\n\r\n\"As fast as a Office 2019\" installation. \r\n\r\nI'm not sure if this is the correct spot, but our customers are not very amused about this issue and I try to find someone at Microsoft who might at least point us in the \"right\" direction.\r\n"},{"Id":"16197635781","Type":"PullRequestEvent","CreatedAt":"2021-05-04T16:24:55","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/924","RelatedDescription":"Merged pull request \"Cache search better in UniqueAttributeValueConstraint\" (#924) at OfficeDev/Open-XML-SDK","RelatedBody":"If a document happened to have a large number of elements that have the\r\nUniqueAttributeValueConstraint validation, it will end up recalculating\r\nthe values for the constraint way too often. This was because the\r\nconstraint was generating the cached lookup with a key using the\r\nattribute text itself. This change updates the lookup to cache all\r\npossible duplicates for the element in question so it only has to be\r\nsearched once.\r\n\r\nFixes #918 "},{"Id":"16197635697","Type":"IssuesEvent","CreatedAt":"2021-05-04T16:24:55","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/918","RelatedDescription":"Closed issue \"OpenXml validation works slow starting from version 2.11.3\" (#918) at OfficeDev/Open-XML-SDK","RelatedBody":"- Issue with the OpenXml library\r\n\r\nWe have a customer's Wordprocessing document **with a lot of tracked changes** that hangs after we update OpenXml.\r\n\r\nInvestigation shows that:\r\n- It hangs when we call OpenXmlValidator's **Validate** method against MainDocumentPart of this document. \r\n- It works quick on version 2.11.2\r\n- It was broken on version 2.11.3 I have reviewed [changelog ](https://github.com/OfficeDev/Open-XML-SDK/blob/main/CHANGELOG.md)and there is no information that means quality improvement or making algorithm of validation  more complex. Against, there were some performance improvements like removing recursion. **This points to think that there was some side effect in this build that causes such performance impact**.\r\n- Version 2.12.0 has a CancellationToken support which is great, but is more like a workaround for our situation than a fix, as we still want to validate parts as quick as before.\r\n\r\nAfter this innitial investigation I ran main branch with such simple code added against CPU profiler:\r\n\r\n```cs\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var doc = WordprocessingDocument.Open(@\"d:\\xxxxxx\\Workspace\\Desk\\Sample.docx\", false))\r\n            {\r\n                var validator = new OpenXmlValidator();\r\n                validator.Validate(doc.MainDocumentPart);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nProfiler shows that currently the slowest method is DocumentFormat.OpenXml.Validation.ValidationTraverser **ValidatingTraverse** \r\n![image](https://user-images.githubusercontent.com/52368905/114165458-2ea7d700-9935-11eb-825e-2c7063cc63a3.png)\r\n\r\nAt this point my investigation stops as I do not have a brunch with build before this method starts works slow and this will be out of scope of my investigation, but I think given information should be enough to at least point to the issue.\r\n\r\nAlso see attached sample document and VS profiller dump file \r\n[Sample.docx](https://github.com/OfficeDev/Open-XML-SDK/files/6284918/Sample.docx)\r\n[Report20210409-1040.zip](https://github.com/OfficeDev/Open-XML-SDK/files/6284919/Report20210409-1040.zip)\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"16144916488","Type":"PullRequestEvent","CreatedAt":"2021-04-29T22:26:26","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/928","RelatedDescription":null,"RelatedBody":""},{"Id":"16144916264","Type":"PullRequestEvent","CreatedAt":"2021-04-29T22:26:24","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/928","RelatedDescription":"Closed pull request \"Add commentsids part to maindocumentpart relationship\" (#928) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"16144908836","Type":"PullRequestEvent","CreatedAt":"2021-04-29T22:25:37","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/924","RelatedDescription":null,"RelatedBody":"If a document happened to have a large number of elements that have the\r\nUniqueAttributeValueConstraint validation, it will end up recalculating\r\nthe values for the constraint way too often. This was because the\r\nconstraint was generating the cached lookup with a key using the\r\nattribute text itself. This change updates the lookup to cache all\r\npossible duplicates for the element in question so it only has to be\r\nsearched once.\r\n\r\nFixes #918 "}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2021-05-12T05:30:34.2596255Z","RunDurationInMilliseconds":875}