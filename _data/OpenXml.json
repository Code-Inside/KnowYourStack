{"Data":{"Sdk":{"Events":[{"Id":"19188234817","Type":"PullRequestEvent","CreatedAt":"2021-12-05T15:15:46","Actor":"ThomasBarnekow","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1088","RelatedDescription":"Opened pull request \"Enhance Linq feature\" (#1088) at OfficeDev/Open-XML-SDK","RelatedBody":"This PR enhances the `RootXElementFeature`, `IPartRootXElementFeature`, and `OpenXmlLinqExtensions` by adding the capability to work with both `XElement` and `XDocument` representations. It adds the following properties and extension methods to the public API:\r\n\r\n```csharp\r\npublic interface IPartRootXElementFeature\r\n{\r\n    XDocument Document { get; set; }\r\n}\r\n\r\npublic static class OpenXmlLinqExtensions\r\n{\r\n    XDocument GetXDocument(this OpenXmlPart part);\r\n    void SetXDocument(this OpenXmlPart part, XDocument document);\r\n    void SaveXDocument(this OpenXmlPart part);\r\n}\r\n```\r\n\r\nThe `SaveXDocument` extension method is only added for naming consistency with the `GetXDocument` and `SetXDocument` methods. It has the exact same effect as calling `part.SaveXElement()`.\r\n\r\nCalling `part.GetXElement()` has the same effect as `part.GetXDocument().Root`. Calling `part.SetXElement(element)` either adds or replaces the `XDocument` instance's root element. In other words, we can freely use either subset of Get, Set, and Save methods or mix and match as desired.\r\n\r\nDepending on the use case, the `GetXDocument` method has the benefit of always returning the same instance (unless you change it via `SetXDocument`). For example, you can get the instance from an initially empty part and change the root `XElement` via `SetXElement`. Further, changing and saving the strongly typed `OpenXmlPartRootElement` will only remove the `XDocument` instance's root element but not replace the instance. Thus, you could hold on to that instance in your code if desired.\r\n\r\n`XDocument` representations are extensively used by the [Open XML PowerTools](https://github.com/EricWhiteDev/Open-Xml-PowerTools). To leverage the Linq feature in the Open XML PowerTools without lots of breaking changes, we need the ability to get, set, and save `XDocument` representations as well."},{"Id":"19178342454","Type":"IssuesEvent","CreatedAt":"2021-12-04T01:15:40","Actor":"JaimeStill","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1081","RelatedDescription":"Closed issue \"Feature Proposal: method to retrieve ImagePartType from file extension\" (#1081) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nIn working through some abstractions for working with images in wordprocessing documents, I wrote a method for getting the `ImagePartType` based on the provided extension. I'm trying to see the utility of incorporating this into the API, and if so, where I might incorporate it?\r\n\r\n```cs\r\n// proposed method\r\nstatic ImagePartType GetImagePartType(string ext) =>\r\n    ext.ToLower() switch\r\n    {\r\n        \".bmp\"  => ImagePartType.Bmp,\r\n        \".emf\"  => ImagePartType.Emf,\r\n        \".ico\"  => ImagePartType.Icon,\r\n        \".jpg\"  => ImagePartType.Jpeg,\r\n        \".jpeg\" => ImagePartType.Jpeg,\r\n        \".pcx\"  => ImagePartType.Pcx,\r\n        \".png\"  => ImagePartType.Png,\r\n        \".svg\"  => ImagePartType.Svg,\r\n        \".tiff\" => ImagePartType.Tiff,\r\n        \".wmf\"  => ImagePartType.Wmf,\r\n        _ => throw new NotSupportedException($\"{ext} is not supported\")\r\n    };\r\n\r\n// example usage\r\nstatic ImagePart LoadImageIntoDoc(MainDocumentPart main, FileInfo file)\r\n{\r\n    var imagePart = main.AddImagePart(GetImagePartType(file.Extension));\r\n    // remaining method excluded for brevity\r\n}\r\n```"},{"Id":"19178332218","Type":"PullRequestEvent","CreatedAt":"2021-12-04T01:13:37","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1082","RelatedDescription":"Merged pull request \"AddImagePart extension method to support GetImagePartType feature\" (#1082) at OfficeDev/Open-XML-SDK","RelatedBody":"I was unsure of where to add the functionality described in #1081\r\n\r\nI ultimately decided that it might be best to create an `ImagePartExtensions` class that:\r\n\r\n1. Defines a `GetImagePartType` method given an associated file extension string.\r\n2. Overloads `AddImagePart` with a version that takes the file extension string and adds the `ImagePart` using the native method, but retrieving the `ImagePartType` via the above method.\r\n\r\nIf there is a better place / approach for this feature, please let me know so that I have a better grasp on where to accomplish similar features in the future should they arise. Thanks!"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2021-12-06T05:30:31.554634Z","RunDurationInMilliseconds":874}