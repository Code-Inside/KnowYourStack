{"Data":{"Sdk":{"Events":[{"Id":"12486173768","Type":"IssuesEvent","CreatedAt":"2020-05-31T00:10:10","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/704","RelatedDescription":"Closed issue \"Document error in docs.microsoft.com\" (#704) at OfficeDev/Open-XML-SDK","RelatedBody":"Is this a:\r\n- [x] Issue with the OpenXml library\r\n- [ ] Question on library usage\r\n\r\n**Description**\r\n\r\nThe document in https://docs.microsoft.com/en-us/dotnet/api/documentformat.openxml.drawing.textparagraphpropertiestype?view=openxml-2.8.1 is error\r\n\r\n![图片](https://user-images.githubusercontent.com/16054566/77152366-c93b3b00-6ad2-11ea-84c4-cf4b26022726.png)\r\n\r\n**Observed**\r\n\r\nThe document say that `bullet <a:buNone>` but the buNone is NoBullet\r\n\r\nBut the code is right in schemas_openxmlformats_org_drawingml_2006_main.g.cs\r\n\r\nhttps://github.com/OfficeDev/Open-XML-SDK/blob/8ec381450c76495e5048b7687197f805e56a6d53/src/DocumentFormat.OpenXml/GeneratedCode/schemas_openxmlformats_org_drawingml_2006_main.g.cs#L24511\r\n\r\n**Expected**\r\n\r\nWe should format the document and update the type\r\n"},{"Id":"12481971842","Type":"IssuesEvent","CreatedAt":"2020-05-30T00:41:16","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/628","RelatedDescription":"Reopened issue \"WordprocessingDocument.Open is very slow\" (#628) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\n`WordprocessingDocument.Open` is very very slow when reading big .docx document.\r\ni'm trying to read 10 mb sized .docx document and it takes about 1 minute just to open it.\r\n\r\n**Information**\r\n\r\n- .NET Target:  .NET Core 2.2\r\n- DocumentFormat.OpenXml Version: 2.9.0\r\n\r\n**Repro**\r\n\r\n```csharp\r\nConsole.WriteLine(\"Creating filter\")\r\nusing (var doc = WordprocessingDocument.Open(path, false))\r\n{\r\n        Console.WriteLine(\"Creating BodyReader\");\r\n        _bodyReader = OpenXmlReader.Create(doc.MainDocumentPart.Document);\r\n}\r\n``` \r\n\r\nLink to the file: https://drive.google.com/file/d/1_InQLbZ19KCUgkuePAiLXvUuLcZl6Qu7/view?usp=sharing\r\n\r\n*Uploaded to GitHub*: [10mb_file.docx](https://github.com/OfficeDev/Open-XML-SDK/files/3664838/10mb_file.docx)\r\n\r\n**Observed**\r\n\r\nI put to lines of `Console.WriteLine` so the time between \"Creating filter\" and \"Creating BodyReader\" is about 1 min. It doesn't matter if i opening file from memory stream or just giving it a real path to the file.\r\n\r\n**Expected**\r\n\r\nInstant open expected :)\r\n\r\n"},{"Id":"12481965053","Type":"PullRequestEvent","CreatedAt":"2020-05-30T00:39:15","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/733","RelatedDescription":"Merged pull request \"Move particle declaration and usage to metadata\" (#733) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"12481913816","Type":"PullRequestEvent","CreatedAt":"2020-05-30T00:24:20","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/733","RelatedDescription":"Opened pull request \"Move particle declaration and usage to metadata\" (#733) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"12481859798","Type":"IssuesEvent","CreatedAt":"2020-05-30T00:09:44","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/566","RelatedDescription":"Closed issue \"SAX Approach Replace Example\" (#566) at OfficeDev/Open-XML-SDK","RelatedBody":"I'm looking for an example of using the SAX approach (instead of DOM) to open a large file and perform a replace on a given value, then save the file.\r\n\r\nI think this would be a useful addition to the [Documentation](https://docs.microsoft.com/en-gb/office/open-xml/open-xml-sdk).\r\n\r\nHow to: Search and replace text in a document part (Open XML SDK)\r\nhttps://docs.microsoft.com/en-us/office/open-xml/how-to-search-and-replace-text-in-a-document-part\r\n\r\nThis uses a `Stream`.\r\n\r\nHow to: Parse and read a large spreadsheet document (Open XML SDK)\r\nhttps://docs.microsoft.com/en-us/office/open-xml/how-to-parse-and-read-a-large-spreadsheet\r\n\r\n```csharp\r\n// The SAX approach.\r\nstatic void ReadExcelFileSAX(string fileName)\r\n{\r\n    using (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(fileName, false))\r\n    {\r\n        WorkbookPart workbookPart = spreadsheetDocument.WorkbookPart;\r\n        WorksheetPart worksheetPart = workbookPart.WorksheetParts.First();\r\n\r\n        OpenXmlReader reader = OpenXmlReader.Create(worksheetPart);\r\n        string text;\r\n        while (reader.Read())\r\n        {\r\n            if (reader.ElementType == typeof(CellValue))\r\n            {\r\n                text = reader.GetText();\r\n                Console.Write(text + \" \");\r\n            }\r\n        }\r\n        Console.WriteLine();\r\n        Console.ReadKey();\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\nIf I read in the \"text\" and wish to replace this:\r\n\r\n```csharp\r\nusing (WordprocessingDocument wordDoc = WordprocessingDocument.Open(filePath, true))\r\n{\r\n    Document document = wordDoc.MainDocumentPart.Document;\r\n    OpenXmlReader reader = OpenXmlReader.Create(document);\r\n    while (reader.Read())\r\n    {\r\n        //OpenXmlElement element = reader.LoadCurrentElement();\r\n        //text = element.InnerText;\r\n        text = reader.GetText();\r\n    }\r\n}\r\n```\r\n\r\n`OpenXmlWriter` expects an `OpenXmlPart` or `Stream` when you create it.\r\n\r\n```csharp\r\nOpenXmlWriter writer = OpenXmlWriter.Create(#);\r\nwriter.WriteStartElement(reader);\r\nwriter.WriteElement(#);\r\nwriter.WriteEndElement();\r\nwriter.Close();\r\n```\r\n\r\nWhat is the supported approach/method for this?\r\n\r\nUsing the DOM approach on large files can cause memory exceptions.\r\n\r\n---\r\n\r\nThere are a number of blog posts documenting how to use the `OpenXmlWriter` but this is for creating new files or adding new elements to an existing file, not updating existing data.\r\n\r\n**Parsing and Reading Large Excel Files with the Open XML SDK**\r\nhttp://blogs.msdn.com/b/brian_jones/archive/2010/05/27/parsing-and-reading-large-excel-files-with-the-open-xml-sdk.aspx [Dead Link]\r\nhttps://web.archive.org/web/20151205145806/http://blogs.msdn.com/b/brian_jones/archive/2010/05/27/parsing-and-reading-large-excel-files-with-the-open-xml-sdk.aspx\r\n\r\n**Writing Large Excel Files with the Open XML SDK**\r\nhttp://blogs.msdn.com/b/brian_jones/archive/2010/06/22/writing-large-excel-files-with-the-open-xml-sdk.aspx [Dead Link]\r\nhttps://web.archive.org/web/20160216062257/http://blogs.msdn.com/b/brian_jones/archive/2010/06/22/writing-large-excel-files-with-the-open-xml-sdk.aspx\r\n\r\n**Performance issue while reading/writing large excel files using OpenXML SDK**\r\nhttp://tech-turf.blogspot.com/2015/10/performance-issue-while-readingwriting.html\r\n\r\n**How to read and write Excel cells with OpenXML and C#**\r\nhttp://fczaja.blogspot.com/2013/05/how-to-read-and-write-excel-cells-with.html\r\n\r\n**How to properly use OpenXmlWriter to write large Excel files**\r\nhttp://polymathprogrammer.com/2012/08/06/how-to-properly-use-openxmlwriter-to-write-large-excel-files/"},{"Id":"12481494586","Type":"PullRequestEvent","CreatedAt":"2020-05-29T22:45:47","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/732","RelatedDescription":"Merged pull request \"Remove attribute base from validators\" (#732) at OfficeDev/Open-XML-SDK","RelatedBody":"Validators are no longer attributes and thus do not need to derive from System.Attribute"},{"Id":"12481369009","Type":"PullRequestEvent","CreatedAt":"2020-05-29T22:26:36","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/732","RelatedDescription":"Opened pull request \"Remove attribute base from validators\" (#732) at OfficeDev/Open-XML-SDK","RelatedBody":"Validators are no longer attributes and thus do not need to derive from System.Attribute"},{"Id":"12480797584","Type":"PullRequestEvent","CreatedAt":"2020-05-29T21:00:57","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/731","RelatedDescription":"Merged pull request \"Remove IUnionValidator\" (#731) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"12480184760","Type":"PullRequestEvent","CreatedAt":"2020-05-29T19:46:16","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/731","RelatedDescription":"Opened pull request \"Remove IUnionValidator\" (#731) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"12480174568","Type":"PullRequestEvent","CreatedAt":"2020-05-29T19:44:54","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/730","RelatedDescription":"Merged pull request \"Add generic SimpleTypeValidator with new() constraint\" (#730) at OfficeDev/Open-XML-SDK","RelatedBody":"This is part of a push to remove reflection from the code base"},{"Id":"12480038353","Type":"PullRequestEvent","CreatedAt":"2020-05-29T19:27:19","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/730","RelatedDescription":"Opened pull request \"Add generic SimpleTypeValidator with new() constraint\" (#730) at OfficeDev/Open-XML-SDK","RelatedBody":"This is part of a push to remove reflection from the code base"},{"Id":"12468141508","Type":"PullRequestEvent","CreatedAt":"2020-05-28T18:19:14","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/729","RelatedDescription":"Merged pull request \"Use a builder pattern to configure metadata for elements\" (#729) at OfficeDev/Open-XML-SDK","RelatedBody":"This is part of a series of changes to consolidate the metadata. Previous changes has moved all relevant metadata into the classes themselves, now cleaning up their registration so it is clear, minimizes (hopefully removes) reflection usage, and potentially extensible.\r\n\r\nThis change does the following:\r\n\r\n- Removes usage of attributes for element metadata\r\n- Adds a ConfigureMetadata method that builds up metadata\r\n- Removes IndexAttribute and associated usage\r\n- Moves most element state itself into an `ElementState` holder that can track it (helps with programmatic access of attributes)\r\n\r\nLater changes will continue this by:\r\n\r\n- Move semantic constraints to be a part of this registration, removing the final magic numbers\r\n- Move constraint declaration into this, and potentially remove need for children registration\r\n- Change validators to be generic for easier simple type transformations\r\n- Apply similar method to the part and relationship definitions"},{"Id":"12459140240","Type":"IssuesEvent","CreatedAt":"2020-05-28T00:14:05","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/509","RelatedDescription":"Closed issue \"Generated package does not include certain required parts\" (#509) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\nStarted on MSDN support first. \r\nhttps://social.msdn.microsoft.com/Forums/office/en-US/fa395b57-ab12-4fe8-9fa1-0726c18fe0cd/openxml-generated-file-wont-open-in-ms-spreadsheet-compare-tool-and-excel-quotopen-and?forum=oxmlsdk\r\n\r\nThe basic problem is when a new file is created by OpenXML, it appears to load in Excel, but if you use the Excel File Open tool for \"Open and Repair\" you can see there are some hidden errors being reported. My assumption is the tool Spreadhsheet Compare tool from MS Office can't open this file because of teh same underlying error. If the file is opened and then saved in Excel, the tool now open the file. \r\n\r\n\r\n**Information**\r\n\r\n- .NET Target: 4.7.1\r\n- DocumentFormat.OpenXml Version: 2.8.1.0\r\n\r\n**Repro**\r\n\r\n```csharp\r\npublic static void CreateSpreadsheetWorkbook(string filepath)\r\n        {\r\n            // Create a spreadsheet document by supplying the filepath.\r\n            // By default, AutoSave = true, Editable = true, and Type = xlsx.\r\n            SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Create(filepath, SpreadsheetDocumentType.Workbook);\r\n\r\n            // Add a WorkbookPart to the document.\r\n            WorkbookPart workbookpart = spreadsheetDocument.AddWorkbookPart();\r\n            workbookpart.Workbook = new Workbook();\r\n\r\n            // Add a WorksheetPart to the WorkbookPart.\r\n            WorksheetPart worksheetPart = workbookpart.AddNewPart<WorksheetPart>();\r\n            worksheetPart.Worksheet = new Worksheet(new SheetData());\r\n\r\n            // Add Sheets to the Workbook.\r\n            Sheets sheets = spreadsheetDocument.WorkbookPart.Workbook.\r\n                AppendChild<Sheets>(new Sheets());\r\n\r\n            // Append a new worksheet and associate it with the workbook.\r\n            Sheet sheet = new Sheet()\r\n            {\r\n                Id = spreadsheetDocument.WorkbookPart.\r\n                    GetIdOfPart(worksheetPart),\r\n                SheetId = 1,\r\n                Name = \"mySheet\"\r\n            };\r\n            sheets.Append(sheet);\r\n\r\n            workbookpart.Workbook.Save();\r\n\r\n            // Close the document.\r\n            spreadsheetDocument.Close();\r\n        }\r\n``` \r\n\r\n**Observed**\r\n\r\nSpreadsheet Comparison tool will report\r\nhttps://support.office.com/en-us/article/Basic-tasks-in-Spreadsheet-Compare-F2B20AF8-A6D3-4780-8011-F15B3229F5D8\r\n\r\n\"Error opening workbook. Attempted to read past the end of the stream\"\r\n\r\nIf you attempt to open the file through Excel \"Open and Repair\" option, you will get this XML error. \r\n```XML\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<recoveryLog xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">\r\n<logFileName>error260080_01.xml</logFileName><summary>Errors were detected in file 'C:\\TEMP\\testing.xlsx'</summary>\r\n<additionalInfo><info>Excel completed file level validation and repair. Some parts of this workbook may have been repaired or discarded.</info></additionalInfo>\r\n</recoveryLog>\r\n``` \r\n\r\n**Expected**\r\nFile should open without errors.\r\n\r\nPlease add your expected behavior here.\r\n\r\n"},{"Id":"12457165782","Type":"PullRequestEvent","CreatedAt":"2020-05-27T19:46:47","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/729","RelatedDescription":"Opened pull request \"Use a builder pattern to configure metadata for elements\" (#729) at OfficeDev/Open-XML-SDK","RelatedBody":"This is part of a series of changes to consolidate the metadata. Previous changes has moved all relevant metadata into the classes themselves, now cleaning up their registration so it is clear, minimizes (hopefully removes) reflection usage, and potentially extensible.\r\n\r\nThis change does the following:\r\n\r\n- Removes usage of attributes for element metadata\r\n- Adds a ConfigureMetadata method that builds up metadata\r\n- Removes IndexAttribute and associated usage\r\n- Moves most element state itself into an `ElementState` holder that can track it (helps with programmatic access of attributes)\r\n\r\nLater changes will continue this by:\r\n\r\n- Move semantic constraints to be a part of this registration, removing the final magic numbers\r\n- Move constraint declaration into this, and potentially remove need for children registration\r\n- Change validators to be generic for easier simple type transformations\r\n- Apply similar method to the part and relationship definitions"},{"Id":"12435733959","Type":"IssuesEvent","CreatedAt":"2020-05-26T00:12:01","Actor":"github-actions[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/702","RelatedDescription":"Closed issue \"Can we make the ListStyle and TextListStyleType have inheritance\" (#702) at OfficeDev/Open-XML-SDK","RelatedBody":"# Before submitting an issue, please fill this out\r\n\r\nIs this a:\r\n- [x] Issue with the OpenXml library\r\n- [ ] Question on library usage\r\n\r\n**Description**\r\n\r\nI found that I need to write lengthy code to adapt the properties of these two classes.Because these two classes without inheritance have many of the same properties\r\n\r\n**Information**\r\n\r\n- .NET Target: All\r\n- DocumentFormat.OpenXml Version: 2.10.1\r\n\r\n**Repro**\r\n\r\nWhen I want to get the TextParagraphPropertiesType array of ListStyle and the array of TextListStyleType, I need to write the following code\r\n\r\n```csharp\r\n        public static TextParagraphPropertiesType[]\r\n            ToTextParagraphPropertiesTypeList(this ListStyle textBodyListStyle) => new TextParagraphPropertiesType[]\r\n        {\r\n            textBodyListStyle.Level1ParagraphProperties,\r\n            textBodyListStyle.Level2ParagraphProperties,\r\n            textBodyListStyle.Level3ParagraphProperties,\r\n            textBodyListStyle.Level4ParagraphProperties,\r\n            textBodyListStyle.Level5ParagraphProperties,\r\n            textBodyListStyle.Level6ParagraphProperties,\r\n            textBodyListStyle.Level7ParagraphProperties,\r\n            textBodyListStyle.Level8ParagraphProperties,\r\n            textBodyListStyle.Level9ParagraphProperties\r\n        };\r\n\r\n        public static TextParagraphPropertiesType[]\r\n            ToTextParagraphPropertiesTypeList(this TextListStyleType textListStyleType) => new TextParagraphPropertiesType[]\r\n            {\r\n                textListStyleType.Level1ParagraphProperties,\r\n                textListStyleType.Level2ParagraphProperties,\r\n                textListStyleType.Level3ParagraphProperties,\r\n                textListStyleType.Level4ParagraphProperties,\r\n                textListStyleType.Level5ParagraphProperties,\r\n                textListStyleType.Level6ParagraphProperties,\r\n                textListStyleType.Level7ParagraphProperties,\r\n                textListStyleType.Level8ParagraphProperties,\r\n                textListStyleType.Level9ParagraphProperties\r\n            };\r\n``` \r\n\r\n**Observed**\r\n\r\nThe code is too verbose\r\n\r\n**Expected**\r\n\r\nThere are concise ways, such as letting these two classes have an inheritance relationship, while providing an array containing the properties\r\n"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2020-06-01T05:30:46.0545861Z","RunDurationInMilliseconds":1320}