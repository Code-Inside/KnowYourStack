{"Data":{"Sdk":{"Events":[{"Id":"46939055790","Type":"IssuesEvent","CreatedAt":"2025-02-25T14:27:02","Actor":"mkaszewiak","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1740","RelatedDescription":"Closed issue \"Can't Add video or audio to premade presentation\" (#1740) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\nCan't Add video or audio to premade presentations\n\n\n\n**To Reproduce**\nThis is my code, I load a PowerPoint presentation from disk and make text changes to the slide after I call these methods to add audio/video.\n```csharp\npublic void AddVideoToPresentation(PresentationDocument presentationDocument, string audioFilePath)\n{\n    int PicID = 915;\n    PresentationPart presentationPart = presentationDocument.PresentationPart;\n    var slideCount = presentationPart.Presentation.SlideIdList.Count();\n    var videoEmbedId = string.Format(\"audioId{0}{1}\", slideCount, PicID++);\n    var mediaEmbedId = string.Format(\"medId{0}{1}\", slideCount, PicID++);\n\n    SlidePart slidepart = presentationDocument.PresentationPart.SlideParts.LastOrDefault();\n\n    MediaDataPart mediaDataPart1 = presentationDocument.CreateMediaDataPart(\"audio/mp3\", \".mp3\");\n    System.IO.Stream mediaDataPart1Stream = File.OpenRead(audioFilePath);\n    mediaDataPart1.FeedData(mediaDataPart1Stream);\n    mediaDataPart1Stream.Close();\n\n    slidepart.AddAudioReferenceRelationship(mediaDataPart1, videoEmbedId);\n    slidepart.AddMediaReferenceRelationship(mediaDataPart1, mediaEmbedId);\n\n    slidepart.Slide.Save();\n\n    AddVid(presentationDocument);\n}\n\n\npublic void AddVid(PresentationDocument presentationDocument)\n{\n    PresentationPart presentationPart = presentationDocument.PresentationPart;\n    SlidePart slidepart = presentationDocument.PresentationPart.AddNewPart<SlidePart>(\"rxId3\");\n    MediaDataPart mediaDataPart1 = presentationDocument.CreateMediaDataPart(\"video/mp4\", \".mp4\");\n    System.IO.Stream mediaDataPart1Stream = System.IO.File.Open(@\"D:\\samplevideo.mp4\", System.IO.FileMode.Open);\n    mediaDataPart1.FeedData(mediaDataPart1Stream);\n    mediaDataPart1Stream.Close();\n\n    slidepart.AddMediaReferenceRelationship(mediaDataPart1, \"rxId2\");\n    slidepart.AddVideoReferenceRelationship(mediaDataPart1, \"rxId1\");\n}\n```\n\n**Observed behavior**\nNo Video or audio embedded in the presentation\n\n**Expected behavior**\nPlay audio after slide transition\n\n**Desktop (please complete the following information):** \n```csharp\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>WinExe</OutputType>\n    <TargetFramework>net6.0-windows</TargetFramework>\n    <Nullable>enable</Nullable>\n    <UseWindowsForms>true</UseWindowsForms>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"DocumentFormat.OpenXml\" Version=\"2.20.0\" />\n    <PackageReference Include=\"Microsoft.Office.Interop.PowerPoint\" Version=\"15.0.4420.1018\" />\n    <PackageReference Include=\"Mscc.GenerativeAI\" Version=\"1.5.0\" />\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    <PackageReference Include=\"OpenXmlPowerTools.NetCore\" Version=\"1.1.0\" />\n    <PackageReference Include=\"System.ServiceModel.Syndication\" Version=\"8.0.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <Reference Include=\"office\">\n      <HintPath>..\\..\\..\\..\\..\\Windows\\assembly\\GAC_MSIL\\office\\15.0.0.0__71e9bce111e9429c\\OFFICE.DLL</HintPath>\n    </Reference>\n  </ItemGroup>\n\n</Project>\n```\n\n"},{"Id":"46935336736","Type":"IssuesEvent","CreatedAt":"2025-02-25T13:00:54","Actor":"mkaszewiak","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1684","RelatedDescription":"Closed issue \"Changing underlying excel data sheet does not update other worksheets\" (#1684) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\nI have a power point presentation with charts powered by data in an excel OLE object.\n\n[valentineschocolates.pptx](https://github.com/dotnet/Open-XML-SDK/files/14486750/valentineschocolates.pptx)\n\nThere is a presentation layer and a `Data` sheet that powers the prettier presentation sheet (there are also custom fonts associated here). Within the presentation, there are two rows of interest:\n\nTHE HERSEY CO: $123\nMARS INC: $456\n\nI run the below code, primarily if not exclusively using the OpenXML code to open the PPTX, get inside the Excel object, update the data for these two rows, save and close. However, when I re-open the file again, the object does not appear updated but when I double click on the object, then and only then, does the data \"snap\" to the correct values.\n\nIs it possible I am not setting an \"AutoUpdate\" flag correctly or not calling something to have this updated before a user needs to open the file and double click?\n\nNuGet Packages Used (some of these are not used in the code example)\n\n```xml\n  <ItemGroup>\n    <PackageReference Include=\"Aspose.Cells\" Version=\"24.2.0\" />\n    <PackageReference Include=\"Aspose.Slides.NET\" Version=\"24.1.0\" />\n    <PackageReference Include=\"DocumentFormat.OpenXml\" Version=\"3.0.1\" />\n    <PackageReference Include=\"Microsoft.AnalysisServices.AdomdClient.NetCore.retail.amd64\" Version=\"19.76.0\" />\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    <PackageReference Include=\"SendGrid\" Version=\"9.29.1\" />\n  </ItemGroup>\n```\n\nCode\n\n```csharp\nusing DocumentFormat.OpenXml;\nusing DocumentFormat.OpenXml.Packaging;\nusing DocumentFormat.OpenXml.Presentation;\nusing DocumentFormat.OpenXml.Spreadsheet;\nusing Newtonsoft.Json;\nusing System.Text;\n\nTestAsposeDataRefresh();\n\nstatic void TestAsposeDataRefresh()\n{\n    List<string> queryKeys = new() { \"SLIDE328_OBJECT 6\" };\n    string directory = @\"[Directory Omitted]\\valentineschocolates.pptx\";\n    using FileStream ReportStream = File.Open(directory, FileMode.Open, FileAccess.ReadWrite);\n\n    // First open the document using OpenXML to change the data (Aspose ignore this)\n    PresentationDocument presentationDocument = PresentationDocument.Open(ReportStream, true);\n    PresentationPart? presentationPart = presentationDocument.PresentationPart;\n\n    if (presentationPart != null)\n    {\n        SlideIdList? slideList = presentationPart.Presentation.SlideIdList;\n\n        if (slideList != null)\n        {\n            OpenXmlElementList slideIDs = slideList.ChildElements;\n\n            for (int i = 0; i <= slideIDs.Count - 1; i++)\n            {\n                SlideId? slideId = slideIDs[i] as SlideId;\n                StringValue? slidePartRelationshipID = slideId.RelationshipId;\n                SlidePart slidePart = (SlidePart)presentationPart.GetPartById(slidePartRelationshipID);\n                int slideID = Convert.ToInt32(slideId.Id.ToString());\n\n                foreach (GraphicFrame gf in slidePart.Slide.Descendants<GraphicFrame>())\n                {\n                    foreach (NonVisualDrawingProperties nvdp in gf.Descendants<NonVisualDrawingProperties>())\n                    {\n                        if (gf.Graphic.GraphicData.Uri.ToString().Contains(\"ole\"))\n                        {\n                            string shapeName = nvdp.Name.ToString().ToUpper();\n                            string queryKey = string.Concat(\"SLIDE\", slideID.ToString(), \"_\", shapeName);\n\n                            foreach (DocumentFormat.OpenXml.Presentation.OleObject ole in gf.Descendants<DocumentFormat.OpenXml.Presentation.OleObject>())\n                            {\n                                if (ole != null)\n                                {\n                                    if (string.Compare(slidePart.GetPartById(ole.Id.Value).GetType().Name, \"EmbeddedPackagePart\") == 0)\n                                    {\n                                        EmbeddedPackagePart epp = (EmbeddedPackagePart)slidePart.GetPartById(ole.Id.Value);\n                                        if (queryKeys.Contains(queryKey))\n                                        {\n                                            using Stream embeddedPackagePartStream = epp.GetStream();\n                                            using SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(embeddedPackagePartStream, true);\n                                            UpdateChartData(spreadsheetDocument);\n                                            spreadsheetDocument.Save();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        presentationDocument.Save();\n    }\n\n    Console.WriteLine(\"Done\");\n}\n\nstatic void ExperimentWithOpenXML()\n{\n\n    Dictionary<string, string> sheetNames = new();\n    Dictionary<string, string> newValues = new()\n    {\n        { \"A1\", \"G\" },\n        { \"A2\", \"H\" },\n        { \"A3\", \"I\" },\n        { \"B1\", \"7\" },\n        { \"B2\", \"8\" },\n        { \"B3\", \"9\" }\n    };\n    string directory = @\"C:\\Users\\brian\\OneDrive\\Documents\\ghirardelli\\Book1.xlsx\";\n    Console.WriteLine($\"Opening File: {directory}\");\n    Console.WriteLine(\"\");\n    using FileStream reportStream = File.Open(directory, FileMode.Open, FileAccess.ReadWrite);\n\n    // Create a spreadsheet document by supplying the file name.  \n    SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(reportStream, true);\n    WorkbookPart? wbp = spreadsheetDocument.WorkbookPart;\n\n    // Read details of the workbook\n    if (wbp != null)\n    {\n        foreach (Sheet sheet in wbp.Workbook.Descendants<Sheet>())\n        {\n            StringValue? sheetId = sheet.Id;\n            StringValue? sheetName = sheet.Name;\n\n            if (sheetId != null && sheetId.HasValue && sheetName != null && sheetName.HasValue)\n            {\n                sheetNames.Add(sheetId, sheetName);\n            }\n        }\n\n        // List the sheet names\n        foreach (KeyValuePair<string, string> sheet in sheetNames)\n        {\n            Console.WriteLine($\"Sheet Key: {sheet.Key}; Sheet Name: {sheet.Value}\");\n        }\n        Console.WriteLine(\"\");\n\n        // Going through the Worksheets\n        foreach (WorksheetPart sheet in wbp.WorksheetParts)\n        {\n            DocumentFormat.OpenXml.Spreadsheet.Worksheet worksheet = sheet.Worksheet;\n            SheetData? sheetData = worksheet.GetFirstChild<SheetData>();\n\n            if (sheetData != null)\n            {\n                DocumentFormat.OpenXml.Spreadsheet.Row[] rows = sheetData.Elements<DocumentFormat.OpenXml.Spreadsheet.Row>().ToArray();\n\n                for (int x = 0; x < rows.Count(); x++)\n                {\n                    foreach (DocumentFormat.OpenXml.Spreadsheet.Cell c in rows[x].Elements<DocumentFormat.OpenXml.Spreadsheet.Cell>().ToArray())\n                    {\n                        if (c.DataType != null && c.DataType == CellValues.SharedString)\n                        {\n                            int stringId = Convert.ToInt32(c.InnerText);\n                            SharedStringTablePart? tablePart = wbp.SharedStringTablePart;\n                            if (tablePart != null)\n                            {\n                                string cellValue = tablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(stringId).InnerText;\n                                Console.WriteLine($\"Cell: {c.CellReference}; Value: {cellValue}; Data Type: {c.DataType}\");\n                            }\n\n                            if (newValues.ContainsKey(c.CellReference))\n                            {\n                                DocumentFormat.OpenXml.Spreadsheet.CellValue newValue = new(newValues[c.CellReference]);\n                                c.CellValue = newValue;\n                            }\n                        }\n                        else\n                        {\n                            Console.WriteLine($\"Cell: {c.CellReference}; Value: {c.CellValue.InnerText}; Data Type: {c.DataType}\");\n\n                            if (newValues.ContainsKey(c.CellReference))\n                            {\n                                DocumentFormat.OpenXml.Spreadsheet.CellValue newValue = new(int.Parse(newValues[c.CellReference]));\n                                c.CellValue = newValue;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    spreadsheetDocument.Save();\n}\n\nstatic void TestAsposeDataRefresh2()\n{\n    Console.WriteLine(\"TestAsposeDataRefresh2\");\n\n    string jsonObjectArrayData = \"[[\\\"Product\\\",\\\"Time Period\\\",\\\"Geography\\\",\\\"Dollar Sales\\\",\\\"Dollar Sales Year Ago\\\",\\\"Unit Sales\\\",\\\"Unit Sales Year Ago\\\"],[\\\"VALENTINE\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",1017922.0,848299.0,274256.0,264593.0],[\\\"THE HERSHEY CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",453137.0,358935.0,124223.0,94165.0],[\\\"MARS INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",163497.0,165286.0,38117.0,45832.0],[\\\"RUSSELL STOVER CHOCOLATES, LLC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",162167.0,142333.0,41123.0,55579.0],[\\\"LINDT\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",102415.0,52291.0,17452.0,12425.0],[\\\"GHIRARDELLI CHOCOLATE CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",32874.0,39488.0,4356.0,5766.0],[\\\"R M PALMER CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",26549.0,19967.0,18800.0,17168.0],[\\\"FRANKFORD CANDY LLC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",22573.0,15824.0,11906.0,15862.0],[\\\"FERRERO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",17172.0,13933.0,7028.0,6784.0],[\\\"GODIVA CHOCOLATIER\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",17147.0,27946.0,2337.0,3901.0],[\\\"FERRARA CANDY CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",15645.0,5790.0,3138.0,1192.0],[\\\"TOOTSIE ROLL INDS INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",4312.0,3446.0,3510.0,3454.0],[\\\"R L ALBERT & SON INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",3286.0,3051.0,2266.0,2459.0],[\\\"BK Broiler INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",3137.0,8675.0,3096.0,666.0]]\";\n    List<object[]> modifiedDataList = JsonConvert.DeserializeObject<List<object[]>>(jsonObjectArrayData);\n\n    List<string> queryKeys = new() { \"SLIDE328_OBJECT 6\" };\n    string directory = @\"[Directory Omitted]\\ghirardelli.pptx\";\n\n    Dictionary<string, string> newValues = new()\n    {\n        { \"D3\", \"453137\" }\n    };\n\n    using FileStream ReportStream = File.Open(directory, FileMode.Open, FileAccess.ReadWrite);\n\n    // First open the document using OpenXML to change the data (Aspose ignore this)\n    bool openXmlPassed = false;\n    PresentationDocument presentationDocument = PresentationDocument.Open(ReportStream, true);\n    PresentationPart? presentationPart = presentationDocument.PresentationPart;\n\n    if (presentationPart != null)\n    {\n        SlideIdList? slideList = presentationPart.Presentation.SlideIdList;\n\n        if (slideList != null)\n        {\n            OpenXmlElementList slideIDs = slideList.ChildElements;\n\n            for (int i = 0; i <= slideIDs.Count - 1; i++)\n            {\n                SlideId? slideId = slideIDs[i] as SlideId;\n                StringValue? slidePartRelationshipID = slideId.RelationshipId;\n                SlidePart slidePart = (SlidePart)presentationPart.GetPartById(slidePartRelationshipID);\n                int slideID = Convert.ToInt32(slideId.Id.ToString());\n\n                foreach (GraphicFrame gf in slidePart.Slide.Descendants<GraphicFrame>())\n                {\n                    foreach (NonVisualDrawingProperties nvdp in gf.Descendants<NonVisualDrawingProperties>())\n                    {\n                        if (gf.Graphic.GraphicData.Uri.ToString().Contains(\"ole\"))\n                        {\n                            string shapeName = nvdp.Name.ToString().ToUpper();\n                            string queryKey = string.Concat(\"SLIDE\", slideID.ToString(), \"_\", shapeName);\n\n                            foreach (DocumentFormat.OpenXml.Presentation.OleObject ole in gf.Descendants<DocumentFormat.OpenXml.Presentation.OleObject>())\n                            {\n                                if (ole != null)\n                                {\n                                    if (string.Compare(slidePart.GetPartById(ole.Id.Value).GetType().Name, \"EmbeddedPackagePart\") == 0)\n                                    {\n                                        EmbeddedPackagePart epp = (EmbeddedPackagePart)slidePart.GetPartById(ole.Id.Value);\n                                        if (queryKeys.Contains(queryKey))\n                                        {\n                                            using Stream embeddedPackagePartStream = epp.GetStream();\n                                            using SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(embeddedPackagePartStream, true);\n                                            WorkbookPart? wbp = spreadsheetDocument.WorkbookPart;\n\n                                            Dictionary<string, string> sheetNames = new();\n                                            foreach (Sheet sheet in wbp.Workbook.Descendants<Sheet>())\n                                            {\n                                                StringValue? sheetId = sheet.Id;\n                                                StringValue? sheetName = sheet.Name;\n\n                                                if (sheetId != null && sheetId.HasValue && sheetName != null && sheetName.HasValue)\n                                                {\n                                                    sheetNames.Add(sheetId, sheetName);\n                                                }\n                                            }\n\n                                            // List the sheet names\n                                            foreach (KeyValuePair<string, string> sheet in sheetNames)\n                                            {\n                                                Console.WriteLine($\"Query Key: {queryKey}; Sheet Key: {sheet.Key}; Sheet Name: {sheet.Value}\");\n                                            }\n                                            Console.WriteLine(\"\");\n\n                                            // Going through the Worksheets\n                                            foreach (WorksheetPart sheet in wbp.WorksheetParts)\n                                            {\n                                                DocumentFormat.OpenXml.Spreadsheet.Worksheet worksheet = sheet.Worksheet;\n                                                SheetData? sheetData = worksheet.GetFirstChild<SheetData>();\n\n                                                if (sheetData != null)\n                                                {\n                                                    DocumentFormat.OpenXml.Spreadsheet.Row[] rows = sheetData.Elements<DocumentFormat.OpenXml.Spreadsheet.Row>().ToArray();\n\n                                                    for (int x = 0; x < rows.Count(); x++)\n                                                    {\n                                                        foreach (DocumentFormat.OpenXml.Spreadsheet.Cell c in rows[x].Elements<DocumentFormat.OpenXml.Spreadsheet.Cell>().ToArray())\n                                                        {\n                                                            if (c.CellValue != null)\n                                                            {\n                                                                if (c.DataType != null && c.DataType == CellValues.SharedString)\n                                                                {\n                                                                    int stringId = Convert.ToInt32(c.InnerText);\n                                                                    SharedStringTablePart? tablePart = wbp.SharedStringTablePart;\n                                                                    if (tablePart != null)\n                                                                    {\n                                                                        string cellValue = tablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(stringId).InnerText;\n                                                                        if (c.CellReference == \"D3\")\n                                                                        {\n                                                                            Console.WriteLine($\"Cell: {c.CellReference}; Value: {cellValue}; Data Type: {c.DataType}\");\n                                                                        }\n                                                                    }\n\n                                                                    if (newValues.ContainsKey(c.CellReference))\n                                                                    {\n                                                                        DocumentFormat.OpenXml.Spreadsheet.CellValue newValue = new(newValues[c.CellReference]);\n                                                                        c.CellValue = newValue;\n                                                                    }\n                                                                }\n                                                                else\n                                                                {\n                                                                    if (c.CellReference == \"D3\")\n                                                                    {\n                                                                        Console.WriteLine($\"Cell: {c.CellReference}; Value: {c.CellValue.InnerText}; Data Type: {c.DataType}\");\n                                                                    }\n\n                                                                    if (newValues.ContainsKey(c.CellReference))\n                                                                    {\n                                                                        DocumentFormat.OpenXml.Spreadsheet.CellValue newValue = new(int.Parse(newValues[c.CellReference]));\n                                                                        c.CellValue = newValue;\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n\n                                                    worksheet.Save();\n                                                }\n                                            }\n\n                                            spreadsheetDocument.Save();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        presentationDocument.Save();\n    }\n}\n\n#region OpenXML Private Helper Classes (Strictly to update the excel object)\nstatic void UpdateChartData(SpreadsheetDocument sd)\n{\n    WorkbookPart wbp = sd.WorkbookPart;\n    Dictionary<string, string> sheetNames = new Dictionary<string, string>();\n    string jsonObjectArrayData = \"[[\\\"Product\\\",\\\"Time Period\\\",\\\"Geography\\\",\\\"Dollar Sales\\\",\\\"Dollar Sales Year Ago\\\",\\\"Unit Sales\\\",\\\"Unit Sales Year Ago\\\"],[\\\"VALENTINE\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",1017922.0,848299.0,274256.0,264593.0],[\\\"THE HERSHEY CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",453137.0,358935.0,124223.0,94165.0],[\\\"MARS INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",163497.0,165286.0,38117.0,45832.0],[\\\"RUSSELL STOVER CHOCOLATES, LLC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",162167.0,142333.0,41123.0,55579.0],[\\\"LINDT\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",102415.0,52291.0,17452.0,12425.0],[\\\"GHIRARDELLI CHOCOLATE CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",32874.0,39488.0,4356.0,5766.0],[\\\"R M PALMER CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",26549.0,19967.0,18800.0,17168.0],[\\\"FRANKFORD CANDY LLC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",22573.0,15824.0,11906.0,15862.0],[\\\"FERRERO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",17172.0,13933.0,7028.0,6784.0],[\\\"GODIVA CHOCOLATIER\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",17147.0,27946.0,2337.0,3901.0],[\\\"FERRARA CANDY CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",15645.0,5790.0,3138.0,1192.0],[\\\"TOOTSIE ROLL INDS INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",4312.0,3446.0,3510.0,3454.0],[\\\"R L ALBERT & SON INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",3286.0,3051.0,2266.0,2459.0],[\\\"BK Broiler INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",3137.0,8675.0,3096.0,2459.0]]\";\n    List<object[]> modifiedDataList = JsonConvert.DeserializeObject<List<object[]>>(jsonObjectArrayData);\n\n    string sNewRange = CalcExcelTableRange(modifiedDataList);\n    string dataSheetName = \"Sheet1\", sheetID = string.Empty, sheetName = string.Empty;\n    DocumentFormat.OpenXml.Spreadsheet.Worksheet worksheet = null;\n\n    foreach (Sheet sheet in wbp.Workbook.Descendants<Sheet>())\n    {\n        sheetNames.Add(sheet.Id, sheet.Name);\n\n        if (string.Compare(sheet.Name, \"Data\", true) == 0)\n        {\n            dataSheetName = \"Data\";\n        }\n    }\n\n    wbp.Workbook.CalculationProperties.ForceFullCalculation = true;\n    wbp.Workbook.CalculationProperties.FullCalculationOnLoad = true;\n\n    foreach (WorksheetPart sheet in wbp.WorksheetParts)\n    {\n        sheetID = wbp.GetIdOfPart(sheet);\n        worksheet = sheet.Worksheet;\n        sheetName = sheetNames[sheetID];\n\n        if (string.Compare(sheetName, dataSheetName, true) == 0 || string.Compare(sheetName, \"Chart\", true) == 0)\n        {\n            if (!sheet.PivotTableParts.Any() && !sheet.TableDefinitionParts.Any())\n            {\n                string sOldRange = \"A1:G14\";\n                ClearSheet(worksheet, sOldRange);\n                WriteSheetDataOffset(worksheet, modifiedDataList, sOldRange.Substring(0, sNewRange.IndexOf(':')));\n\n                // We need to make sure the new sheet's reference saves properly\n                worksheet.SheetDimension.Reference = sNewRange;\n                break;\n            }\n        }\n    }\n}\nstatic string CalcExcelTableRange(List<object[]> data)\n{\n    string sRange = \"A1:\" + GenerateRange(data[0].Length, data.Count);\n\n    return sRange;\n}\nstatic string GenerateRange(int endColumn, int endRow)\n{\n    StringBuilder sb = new StringBuilder();\n    int root = 0, suffix = 0;\n    char left = default(char), right = default(char);\n\n    root = endColumn / 26;\n    suffix = endColumn % 26;\n\n    if (root > 0)\n    {\n        if (root == 1)\n        {\n            if (suffix > 0)\n            {\n                left = Convert.ToChar(root + 64);\n                right = Convert.ToChar(suffix + 64);\n                sb.Append(left);\n                sb.Append(right);\n            }\n            else\n            {\n                sb.Append(Convert.ToChar(endColumn + 64));\n            }\n        }\n        else\n        {\n            if (suffix > 0)\n            {\n                left = Convert.ToChar(root + 64);\n                right = Convert.ToChar(suffix + 64);\n            }\n            else\n            {\n                left = Convert.ToChar(root - 1 + 64);\n                right = Convert.ToChar(90);\n            }\n\n            sb.Append(left);\n            sb.Append(right);\n        }\n    }\n    else\n    {\n        sb.Append(Convert.ToChar(endColumn + 64));\n    }\n\n    sb.Append(endRow.ToString());\n\n    return sb.ToString();\n}\nstatic void ClearSheet(DocumentFormat.OpenXml.Spreadsheet.Worksheet worksheet, string range = \"\")\n{\n    SheetData sheetData = worksheet.GetFirstChild<SheetData>();\n    string startCell = string.Empty;\n    string startCol = string.Empty;\n    string currCol = string.Empty;\n    string endCol = string.Empty;\n    string endCell = string.Empty;\n    DocumentFormat.OpenXml.Spreadsheet.Row[] rows = sheetData.Elements<DocumentFormat.OpenXml.Spreadsheet.Row>().ToArray();\n    string[] srange = null;\n\n    //bug236\n    range = range.Replace(\"$\", String.Empty);\n\n    if (range != string.Empty)\n    {\n        srange = range.Split(':');\n\n        if (range.Contains(':'))\n        {\n            startCell = srange[0];\n            endCell = srange[1];\n        }\n        else\n        {\n            startCell = srange[0];\n            endCell = srange[0];\n        }\n\n        for (int x = 0; x < rows.Count(); x++)\n        {\n            foreach (DocumentFormat.OpenXml.Spreadsheet.Cell c in rows[x].Elements<DocumentFormat.OpenXml.Spreadsheet.Cell>().ToArray())\n            {\n                if (Compare(c.CellReference, startCell) >= 0 && Compare(c.CellReference, endCell) <= 0)\n                {\n                    if (c.CellValue != null)\n                    {\n                        c.CellValue.Remove();\n                    }\n                    c.CellValue = null;\n                }\n            }\n        }\n    }\n    worksheet.Save();\n}\nstatic int Compare(string x, string y)\n{\n    int returnValue = -1;\n    string startX = string.Empty, startY = string.Empty, colX = string.Empty,\n        colY = string.Empty, rowX = string.Empty, rowY = string.Empty;\n    int rowXNumeric = -1, rowYNumeric = -1;\n\n    if (string.Equals(x, y))\n    {\n        returnValue = 0;\n    }\n    else\n    {\n\n        if ((x.IndexOf(\":\") < 0) || (y.IndexOf(\":\") < 0))\n        {\n            startX = x;\n            startY = y;\n        }\n        else\n        {\n            startX = x.Substring(0, x.IndexOf(\":\"));\n            startY = y.Substring(0, y.IndexOf(\":\"));\n        }\n\n        foreach (char c in startX)\n        {\n            if (!char.IsNumber(c))\n            {\n                colX += c;\n            }\n            else\n            {\n                rowX += c;\n            }\n        }\n\n        foreach (char c in startY)\n        {\n            if (!char.IsNumber(c))\n            {\n                colY += c;\n            }\n            else\n            {\n                rowY += c;\n            }\n        }\n\n        if (colX.Length != colY.Length)\n        {\n            returnValue = colX.Length - colY.Length;\n        }\n        else\n        {\n            returnValue = string.Compare(colX, colY, true);\n\n            //bug244 only geography showed since cleared wrong area\n            if (returnValue >= 0)\n            {\n                rowXNumeric = int.Parse(rowX);\n                rowYNumeric = int.Parse(rowY);\n                returnValue = rowXNumeric - rowYNumeric >= 0 ? 1 : -1;\n            }\n        }\n    }\n\n    return returnValue;\n}\nstatic void WriteSheetDataOffset(DocumentFormat.OpenXml.Spreadsheet.Worksheet worksheet, List<object[]> data, string startPosition)\n{\n    SheetData sheetData = worksheet.WorksheetPart.Worksheet.GetFirstChild<SheetData>();\n\n    List<DocumentFormat.OpenXml.Spreadsheet.Cell> existingCells = new List<DocumentFormat.OpenXml.Spreadsheet.Cell>();\n    string cellCol = string.Empty;\n    DocumentFormat.OpenXml.Spreadsheet.Row prevRow = null;\n    DocumentFormat.OpenXml.Spreadsheet.Row rowBuilder = null;\n    DocumentFormat.OpenXml.Spreadsheet.Cell cell = null;\n    DocumentFormat.OpenXml.Spreadsheet.Cell nextCell = null;\n    object val = null;\n    int startColumn = 0, startRow = 0;\n    StringBuilder columnSB = new(), rowSB = new();\n\n    //bug236\n    startPosition = startPosition.Replace(\"$\", String.Empty);\n\n    foreach (char c in startPosition)\n    {\n        if (char.IsNumber(c))\n        {\n            rowSB.Append(c);\n        }\n        else\n        {\n            columnSB.Append(c);\n        }\n    }\n\n    startRow = Convert.ToInt32(rowSB.ToString().Trim());\n    startColumn = ConvertColumnStringToNumeric(columnSB.ToString());\n\n    for (int i = 0; i <= data.Count - 1; i++)\n    {\n        if (sheetData.Elements<DocumentFormat.OpenXml.Spreadsheet.Row>().Count(r => r.RowIndex == i + startRow) != 0)\n        {\n            rowBuilder = sheetData.Elements<DocumentFormat.OpenXml.Spreadsheet.Row>().First(r => r.RowIndex == i + startRow);\n        }\n        else\n        {\n            if (rowBuilder != null)\n            {\n                prevRow = rowBuilder;\n            }\n\n            rowBuilder = new DocumentFormat.OpenXml.Spreadsheet.Row { RowIndex = (uint)(i + startRow) };\n\n            if (prevRow != null)\n            {\n                sheetData.InsertAfter(rowBuilder, prevRow); // Needs to be an insert after prior row\n            }\n            else\n            {\n                sheetData.Append(rowBuilder);\n            }\n        }\n\n        existingCells = rowBuilder.Elements<DocumentFormat.OpenXml.Spreadsheet.Cell>().ToList();\n\n        for (int j = 0; j <= data[i].GetUpperBound(0); j++)\n        {\n            if (existingCells != null && existingCells.Count > 0)\n            {\n                DocumentFormat.OpenXml.Spreadsheet.Cell existingCell = existingCells.Find(\n                    c => string.Compare(c.CellReference, GenerateRange(startColumn + j, startRow + i), true) == 0);\n\n                if (existingCell != null)\n                {\n                    if (data[i][j] is double || data[i][j] == null || data[i][j] == DBNull.Value)\n                    {\n                        existingCell.DataType = CellValues.Number;\n                        val = data[i].GetValue(j);\n\n                        existingCell.CellValue = val == null ? null : new DocumentFormat.OpenXml.Spreadsheet.CellValue(val.ToString());\n                    }\n                    else\n                    {\n                        existingCell.DataType = CellValues.String;\n                        existingCell.CellValue = new DocumentFormat.OpenXml.Spreadsheet.CellValue(data[i].GetValue(j) == null ? string.Empty : data[i].GetValue(j).ToString());\n                    }\n                }\n                else\n                {\n                    if (data[i][j] is double || data[i][j] == null || data[i][j] == DBNull.Value)\n                    {\n                        cell = new DocumentFormat.OpenXml.Spreadsheet.Cell\n                        {\n                            CellReference = GenerateRange(startColumn + j, startRow + i),\n                            DataType = CellValues.Number,\n                            CellValue = data[i].GetValue(j) == null ? null : new DocumentFormat.OpenXml.Spreadsheet.CellValue(data[i].GetValue(j).ToString()),\n                            StyleIndex = 0,\n                        };\n                    }\n                    else\n                    {\n                        cell = new DocumentFormat.OpenXml.Spreadsheet.Cell\n                        {\n                            CellReference = GenerateRange(startColumn + j, startRow + i),\n                            DataType = CellValues.String,\n                            CellValue = new DocumentFormat.OpenXml.Spreadsheet.CellValue(data[i].GetValue(j) == null ? string.Empty : data[i].GetValue(j).ToString()),\n                        };\n                    }\n\n                    bool insert = false;\n\n                    foreach (DocumentFormat.OpenXml.Spreadsheet.Cell c in existingCells)\n                    {\n                        if (GetAsciiValueofText(cell.CellReference) < GetAsciiValueofText(c.CellReference))\n                        {\n                            insert = true;\n                            nextCell = c;\n                            break;\n                        }\n                    }\n\n                    if (insert)\n                    {\n                        rowBuilder.InsertBefore(cell, nextCell);\n                    }\n                    else\n                    {\n                        rowBuilder.Append(cell);\n                    }\n                }\n            }\n            else\n            {\n                if (data[i][j] is double || data[i][j] == null || data[i][j] == DBNull.Value)\n                {\n                    cell = new DocumentFormat.OpenXml.Spreadsheet.Cell\n                    {\n                        CellReference = GenerateRange(startColumn + j, startRow + i),\n                        DataType = CellValues.Number,\n                        CellValue = data[i].GetValue(j) == null ? null : new DocumentFormat.OpenXml.Spreadsheet.CellValue(data[i].GetValue(j).ToString()),\n                        StyleIndex = 0,\n                    };\n                }\n                else\n                {\n                    cell = new DocumentFormat.OpenXml.Spreadsheet.Cell\n                    {\n                        CellReference = GenerateRange(startColumn + j, startRow + i),\n                        DataType = CellValues.String,\n                        CellValue = new DocumentFormat.OpenXml.Spreadsheet.CellValue(data[i].GetValue(j) == null ? string.Empty : data[i].GetValue(j).ToString()),\n                    };\n                }\n                rowBuilder.Append(cell);\n            }\n        }\n    }\n\n    worksheet.Save();\n}\nstatic int ConvertColumnStringToNumeric(string columnString)\n{\n    int columnValue = 0, power = 0, mantissa = 0, exponent = 0;\n    //bug236\n    columnString = columnString.Replace(\"$\", String.Empty);\n\n    power = columnString.Length - 1;\n\n    foreach (char c in columnString)\n    {\n        mantissa = (int)Math.Pow(26.0d, power);\n        exponent = c - 64;\n        columnValue += mantissa * exponent;\n        power--;\n    }\n\n    return columnValue;\n}\nstatic int GetAsciiValueofText(string text)\n{\n    int i = 0;\n    foreach (char c in text)\n    {\n        i = i + c;\n    }\n    return i;\n}\n#endregion\n```"},{"Id":"46927140674","Type":"IssuesEvent","CreatedAt":"2025-02-25T09:34:38","Actor":"mkaszewiak","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1740","RelatedDescription":"Reopened issue \"Can't Add video or audio to premade presentation\" (#1740) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\nCan't Add video or audio to premade presentations\n\n\n\n**To Reproduce**\nThis is my code, I load a PowerPoint presentation from disk and make text changes to the slide after I call these methods to add audio/video.\n```csharp\npublic void AddVideoToPresentation(PresentationDocument presentationDocument, string audioFilePath)\n{\n    int PicID = 915;\n    PresentationPart presentationPart = presentationDocument.PresentationPart;\n    var slideCount = presentationPart.Presentation.SlideIdList.Count();\n    var videoEmbedId = string.Format(\"audioId{0}{1}\", slideCount, PicID++);\n    var mediaEmbedId = string.Format(\"medId{0}{1}\", slideCount, PicID++);\n\n    SlidePart slidepart = presentationDocument.PresentationPart.SlideParts.LastOrDefault();\n\n    MediaDataPart mediaDataPart1 = presentationDocument.CreateMediaDataPart(\"audio/mp3\", \".mp3\");\n    System.IO.Stream mediaDataPart1Stream = File.OpenRead(audioFilePath);\n    mediaDataPart1.FeedData(mediaDataPart1Stream);\n    mediaDataPart1Stream.Close();\n\n    slidepart.AddAudioReferenceRelationship(mediaDataPart1, videoEmbedId);\n    slidepart.AddMediaReferenceRelationship(mediaDataPart1, mediaEmbedId);\n\n    slidepart.Slide.Save();\n\n    AddVid(presentationDocument);\n}\n\n\npublic void AddVid(PresentationDocument presentationDocument)\n{\n    PresentationPart presentationPart = presentationDocument.PresentationPart;\n    SlidePart slidepart = presentationDocument.PresentationPart.AddNewPart<SlidePart>(\"rxId3\");\n    MediaDataPart mediaDataPart1 = presentationDocument.CreateMediaDataPart(\"video/mp4\", \".mp4\");\n    System.IO.Stream mediaDataPart1Stream = System.IO.File.Open(@\"D:\\samplevideo.mp4\", System.IO.FileMode.Open);\n    mediaDataPart1.FeedData(mediaDataPart1Stream);\n    mediaDataPart1Stream.Close();\n\n    slidepart.AddMediaReferenceRelationship(mediaDataPart1, \"rxId2\");\n    slidepart.AddVideoReferenceRelationship(mediaDataPart1, \"rxId1\");\n}\n```\n\n**Observed behavior**\nNo Video or audio embedded in the presentation\n\n**Expected behavior**\nPlay audio after slide transition\n\n**Desktop (please complete the following information):** \n```csharp\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>WinExe</OutputType>\n    <TargetFramework>net6.0-windows</TargetFramework>\n    <Nullable>enable</Nullable>\n    <UseWindowsForms>true</UseWindowsForms>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"DocumentFormat.OpenXml\" Version=\"2.20.0\" />\n    <PackageReference Include=\"Microsoft.Office.Interop.PowerPoint\" Version=\"15.0.4420.1018\" />\n    <PackageReference Include=\"Mscc.GenerativeAI\" Version=\"1.5.0\" />\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    <PackageReference Include=\"OpenXmlPowerTools.NetCore\" Version=\"1.1.0\" />\n    <PackageReference Include=\"System.ServiceModel.Syndication\" Version=\"8.0.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <Reference Include=\"office\">\n      <HintPath>..\\..\\..\\..\\..\\Windows\\assembly\\GAC_MSIL\\office\\15.0.0.0__71e9bce111e9429c\\OFFICE.DLL</HintPath>\n    </Reference>\n  </ItemGroup>\n\n</Project>\n```\n\n"},{"Id":"46912104990","Type":"IssuesEvent","CreatedAt":"2025-02-24T23:42:20","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1312","RelatedDescription":"Closed issue \"The correct date cannot be read\" (#1312) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\n\r\nI expected the date to be: `2022-06-17 23:59:59`, but instead I got `2022-06-17 23:59:58`\r\n\r\n\r\n**Screenshots**\r\n\r\n![image](https://user-images.githubusercontent.com/18475586/212914590-a6471b6f-ff97-46ba-b48c-bff110a34812.png)\r\n\r\n![image](https://user-images.githubusercontent.com/18475586/212914742-eba95860-671f-4ead-aded-234d2301b3de.png)\r\n\r\n\r\n\r\nSteps to reproduce the behavior:\r\n```c#\r\n// Open the document as read-only.\r\nusing (SpreadsheetDocument spreadsheetDocument =\r\n       SpreadsheetDocument.Open(\"/Users/zhuangjiaju/Downloads/date2.xlsx\", false))\r\n{\r\n    WorkbookPart workbookPart = spreadsheetDocument.WorkbookPart;\r\n    WorksheetPart worksheetPart = workbookPart.WorksheetParts.First();\r\n    SheetData sheetData = worksheetPart.Worksheet.Elements<SheetData>().First();\r\n    string text;\r\n    foreach (Row r in sheetData.Elements<Row>())\r\n    {\r\n        foreach (Cell c in r.Elements<Cell>())\r\n        {\r\n            text = c.CellValue.Text;\r\n            double doubleTime = double.Parse(c.CellValue.InnerXml);\r\n            DateTime dateTime = DateTime.FromOADate(doubleTime);\r\n            Console.WriteLine(dateTime.ToString(\"yyyy-MM-dd HH:mm:ss\") + \" \");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Observed behavior**\r\nA clear and concise description of what you expected to happen.\r\n[date2.xlsx](https://github.com/OfficeDev/Open-XML-SDK/files/10435559/date2.xlsx)\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: [e.g. Windows]\r\n - Office version [e.g. 16.0.15427.20178]\r\n - .NET Target: (e.g. .NET Framework, .NET Core, UWP, Xamarin...)\r\n - DocumentFormat.OpenXml Version: (e.g. 2.11.0)\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n"},{"Id":"46899466640","Type":"IssuesEvent","CreatedAt":"2025-02-24T16:54:43","Actor":"mkaszewiak","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1867","RelatedDescription":"Closed issue \"AcceptAllChanges word document Open XML SDK\" (#1867) at dotnet/Open-XML-SDK","RelatedBody":"It seems like you're trying to read and accept all changes in a Word document using C#. However, you're facing an issue where the MoveTo method is not properly cloning the data. Kindly help me.\n\nPlease find below a sample code for AcceptAll changes:\n\n```csharp\nprivate void AcceptAllChanges(string filePath)\n{\n    using (WordprocessingDocument doc = WordprocessingDocument.Open(filePath, true))\n    {\n        var body = doc.MainDocumentPart.Document.Body;\n\n        // Accept Inserted text (InsertedRun elements)\n        var insertedRuns = body.Descendants<InsertedRun>().ToList();\n        foreach (var insertedRun in insertedRuns)\n        {\n            var parent = insertedRun.Parent;\n            foreach (var child in insertedRun.ChildElements.ToList())\n            {\n                parent.InsertBefore(child.CloneNode(true), insertedRun);\n            }\n            insertedRun.Remove();\n        }\n\n        // Remove Deleted text (DeletedRun elements)\n        var deletedRuns = body.Descendants<DeletedRun>().ToList();\n        foreach (var deletedRun in deletedRuns)\n        {\n            deletedRun.Remove();\n        }\n\n        // Remove MoveFrom and MoveTo elements\n        var moveFromElements = body.Descendants<MoveFrom>().ToList();\n        var moveToElements = body.Descendants<MoveTo>().ToList();\n\n        foreach (var moveFrom in moveFromElements)\n        {\n            moveFrom.Remove();\n        }\n\n        //foreach (var moveTo in moveToElements)\n        //{\n        //    var parent = moveTo.Parent;\n        //    foreach (var child in moveTo.ChildElements.ToList())\n        //    {\n        //        parent.InsertBefore(child.CloneNode(true), moveTo);\n        //    }\n        //    moveTo.Remove();\n        //}\n        foreach (var moveTo in moveToElements)\n        {\n            // Iterate over the Run elements inside MoveTo\n            foreach (var run in moveTo.Elements<Run>())\n            {\n                // Now iterate over the Text elements inside each Run\n                foreach (var text in run.Elements<Text>())\n                {\n                    // Append the text content from MoveTo elements\n                    //sb.Append(text.Text);\n                    Console.WriteLine($\"Moved Insertion Text: {text.Text}\");  // For debugging\n                }\n            }\n\n            // Optional: If you want to move the content out of MoveTo and remove the MoveTo element\n            var parent = moveTo.Parent;\n            foreach (var run in moveTo.Elements<Run>())\n            {\n                foreach (var child in run.ChildElements)\n                {\n                    parent.InsertBefore(child.CloneNode(true), moveTo); // Insert content before the MoveTo element\n                }\n            }\n            moveTo.Remove(); // Remove the MoveTo element itself\n        }\n\n        // Remove other tracked changes (paragraph properties, table properties, etc.)\n        var pPrChanges = body.Descendants<ParagraphPropertiesChange>().ToList();\n        foreach (var pPrChange in pPrChanges)\n        {\n            pPrChange.Remove();\n        }\n\n        var tblPrChanges = body.Descendants<TablePropertiesChange>().ToList();\n        foreach (var tblPrChange in tblPrChanges)\n        {\n            tblPrChange.Remove();\n        }\n\n        // Save the changes\n        doc.MainDocumentPart.Document.Save();\n    }\n}\n```"},{"Id":"46899423948","Type":"IssuesEvent","CreatedAt":"2025-02-24T16:53:41","Actor":"mkaszewiak","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1871","RelatedDescription":"Closed issue \"Please give name of missing package in exception \"Specified part does not exist in the package.\"\" (#1871) at dotnet/Open-XML-SDK","RelatedBody":"**Is your feature request related to a problem? Please describe.**\nI download a file from the internet (i.e. out of my control), the excel file is corrupt - I cannot open it with OpenXML neither with the OpenXML productivity tool, but in Excel it opens. Excel seems more fault tolerant btw.\n\n**Describe the solution you'd like**\nPlease give the name of the part that is missing in the exception message, this reduces the time greatly to find the issue.\nSpecified part '[NAMEOFPART]' does not exist in the package.\n\nStack Trace:\n```\nSystem.InvalidOperationException: Specified part does not exist in the package.\n   at System.IO.Packaging.Package.GetPart(Uri partUri)\n   at DocumentFormat.OpenXml.Features.PackageFeatureBase.DocumentFormat.OpenXml.Packaging.IPackage.GetPart(Uri uriTarget)\n   at DocumentFormat.OpenXml.Packaging.Builder.DelegatingPackageFeature.GetPart(Uri uriTarget)\n   at DocumentFormat.OpenXml.Packaging.PackageUriHandlingExtensions.MalformedUriHandlingPackage.GetPart(Uri uriTarget)\n   at DocumentFormat.OpenXml.Packaging.OpenXmlPart.Load(OpenXmlPackage openXmlPackage, OpenXmlPart parent, Uri uriTarget, String id)\n   at DocumentFormat.OpenXml.Packaging.PartRelationshipsFeature.LoadReferencedPartsAndRelationships()\n   at DocumentFormat.OpenXml.Packaging.PartRelationshipsFeature.get_RelationshipMap()\n   at DocumentFormat.OpenXml.Packaging.PartRelationshipsFeature.DocumentFormat.OpenXml.Features.IPartRelationshipsFeature.get_Count()\n   at DocumentFormat.OpenXml.Packaging.OpenXmlPackage.LoadAllParts()\n   at DocumentFormat.OpenXml.Features.StrictNamespaceExtensions.StrictNamespaceFeature.DocumentFormat.OpenXml.Features.IStrictNamespaceFeature.get_Found()\n   at DocumentFormat.OpenXml.Packaging.OpenXmlPackage.get_StrictRelationshipFound()\n   at DocumentFormat.OpenXml.Packaging.OpenXmlPart.LoadDomTree[T]()\n   at DocumentFormat.OpenXml.Packaging.SharedStringTablePart.get_SharedStringTable()\n\n```\n**Describe alternatives you've considered**\nLoad the file in excel, save it, extract it, compare files one by one and move one difference after each other and try to reopen it to find the issue.\n\n**Additional context**\nSame problem: https://stackoverflow.com/questions/11212374/specified-part-does-not-exist-in-the-package\n\nexample file: https://www.rba.gov.au/statistics/tables/xls/d03hist.xlsx?v=2025-02-08-17-05-12\nin this case, some invalid rel references to drawings which do not exist have to be removed, you get the idea:\nwarn: Excel removing invalid reference 'xl/drawings/drawing1.xml' from 'xl/worksheets/_rels/sheet1.xml.rels'\nwarn: Excel removing invalid reference 'xl/printerSettings/printerSettings1.bin' from 'xl/worksheets/_rels/sheet1.xml.rels'\nwarn: Excel removing invalid reference 'xl/drawings/vmlDrawing1.vml' from 'xl/worksheets/_rels/sheet1.xml.rels'\nwarn: Excel removing invalid reference 'xl/drawings/drawing2.xml' from 'xl/worksheets/_rels/sheet2.xml.rels'\nwarn: Excel removing invalid reference 'xl/printerSettings/printerSettings2.bin' from 'xl/worksheets/_rels/sheet2.xml.rels'\nwarn: Excel removing invalid reference 'xl/drawings/vmlDrawing2.vml' from 'xl/worksheets/_rels/sheet2.xml.rels'\nwarn: Excel removing invalid reference 'xl/drawings/drawing3.xml' from 'xl/worksheets/_rels/sheet3.xml.rels'\nwarn: Excel removing invalid reference 'xl/printerSettings/printerSettings3.bin' from 'xl/worksheets/_rels/sheet3.xml.rels'\nwarn: Excel removing invalid reference 'xl/drawings/vmlDrawing3.vml' from 'xl/worksheets/_rels/sheet3.xml.rels'\n"},{"Id":"46898474803","Type":"IssuesEvent","CreatedAt":"2025-02-24T16:30:15","Actor":"mkaszewiak","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1740","RelatedDescription":"Closed issue \"Can't Add video or audio to premade presentation\" (#1740) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\nCan't Add video or audio to premade presentations\n\n\n\n**To Reproduce**\nThis is my code, I load a PowerPoint presentation from disk and make text changes to the slide after I call these methods to add audio/video.\n```csharp\npublic void AddVideoToPresentation(PresentationDocument presentationDocument, string audioFilePath)\n{\n    int PicID = 915;\n    PresentationPart presentationPart = presentationDocument.PresentationPart;\n    var slideCount = presentationPart.Presentation.SlideIdList.Count();\n    var videoEmbedId = string.Format(\"audioId{0}{1}\", slideCount, PicID++);\n    var mediaEmbedId = string.Format(\"medId{0}{1}\", slideCount, PicID++);\n\n    SlidePart slidepart = presentationDocument.PresentationPart.SlideParts.LastOrDefault();\n\n    MediaDataPart mediaDataPart1 = presentationDocument.CreateMediaDataPart(\"audio/mp3\", \".mp3\");\n    System.IO.Stream mediaDataPart1Stream = File.OpenRead(audioFilePath);\n    mediaDataPart1.FeedData(mediaDataPart1Stream);\n    mediaDataPart1Stream.Close();\n\n    slidepart.AddAudioReferenceRelationship(mediaDataPart1, videoEmbedId);\n    slidepart.AddMediaReferenceRelationship(mediaDataPart1, mediaEmbedId);\n\n    slidepart.Slide.Save();\n\n    AddVid(presentationDocument);\n}\n\n\npublic void AddVid(PresentationDocument presentationDocument)\n{\n    PresentationPart presentationPart = presentationDocument.PresentationPart;\n    SlidePart slidepart = presentationDocument.PresentationPart.AddNewPart<SlidePart>(\"rxId3\");\n    MediaDataPart mediaDataPart1 = presentationDocument.CreateMediaDataPart(\"video/mp4\", \".mp4\");\n    System.IO.Stream mediaDataPart1Stream = System.IO.File.Open(@\"D:\\samplevideo.mp4\", System.IO.FileMode.Open);\n    mediaDataPart1.FeedData(mediaDataPart1Stream);\n    mediaDataPart1Stream.Close();\n\n    slidepart.AddMediaReferenceRelationship(mediaDataPart1, \"rxId2\");\n    slidepart.AddVideoReferenceRelationship(mediaDataPart1, \"rxId1\");\n}\n```\n\n**Observed behavior**\nNo Video or audio embedded in the presentation\n\n**Expected behavior**\nPlay audio after slide transition\n\n**Desktop (please complete the following information):** \n```csharp\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>WinExe</OutputType>\n    <TargetFramework>net6.0-windows</TargetFramework>\n    <Nullable>enable</Nullable>\n    <UseWindowsForms>true</UseWindowsForms>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"DocumentFormat.OpenXml\" Version=\"2.20.0\" />\n    <PackageReference Include=\"Microsoft.Office.Interop.PowerPoint\" Version=\"15.0.4420.1018\" />\n    <PackageReference Include=\"Mscc.GenerativeAI\" Version=\"1.5.0\" />\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    <PackageReference Include=\"OpenXmlPowerTools.NetCore\" Version=\"1.1.0\" />\n    <PackageReference Include=\"System.ServiceModel.Syndication\" Version=\"8.0.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <Reference Include=\"office\">\n      <HintPath>..\\..\\..\\..\\..\\Windows\\assembly\\GAC_MSIL\\office\\15.0.0.0__71e9bce111e9429c\\OFFICE.DLL</HintPath>\n    </Reference>\n  </ItemGroup>\n\n</Project>\n```\n\n"},{"Id":"46807446025","Type":"IssuesEvent","CreatedAt":"2025-02-21T07:11:48","Actor":"lindexi","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1874","RelatedDescription":"Opened issue \"Setting `PackageProperties.Title` with 0x0001 Unicode Characters in OpenXML Results in an Error\" (#1874) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\nWhen attempting to configure the `PackageProperties.Title` attribute of a `PresentationDocument` within OpenXML, inserting a string containing the Unicode character `\\u0001` (often known as a soft hyphen) generates an `ArgumentException`. This occurs despite the presence of other valid properties.\n\n\n**Screenshots**\nNone.\n\n**To Reproduce**\n\nThe mini repro code is:\n\n```csharp\nusing System;\n\nusing (var presentationDocument =\n       DocumentFormat.OpenXml.Packaging.PresentationDocument.Open(\"Test.pptx\", true))\n{\n    presentationDocument.PackageProperties.Title = \"\\u0001\";\n}\n```\n\nThe `Test.pptx` is any normal pptx file.\n\nYou can find all my demo project in https://github.com/lindexi/lindexi_gd/tree/6baba8b5407c1d23119d3ac150b1ab5af4cd810c/Pptx/FukemqibairLaylalljerowhem\n\n\n**Observed behavior**\n\nRun my mini repro code, and you can find the exception:\n\n```\n System.ArgumentException:“'', hexadecimal value 0x01, is an invalid character.”\n  \t System.Private.Xml.dll!System.Xml.XmlUtf8RawTextWriter.InvalidXmlChar(int ch, byte* pDst, bool entitize)\t\n  \t System.Private.Xml.dll!System.Xml.XmlUtf8RawTextWriter.WriteElementTextBlock(char* pSrc, char* pSrcEnd)\t\n  \t System.Private.Xml.dll!System.Xml.XmlUtf8RawTextWriter.WriteString(string text)\t\n  \t System.Private.Xml.dll!System.Xml.XmlWellFormedWriter.WriteString(string text)\t\n  \t System.IO.Packaging.dll!System.IO.Packaging.PartBasedPackageProperties.SerializeDirtyProperties()\t\n  \t System.IO.Packaging.dll!System.IO.Packaging.PartBasedPackageProperties.Flush()\t\n  \t System.IO.Packaging.dll!System.IO.Packaging.PartBasedPackageProperties.Close()\t\n  \t System.IO.Packaging.dll!System.IO.Packaging.Package.System.IDisposable.Dispose()\t\n  \t System.IO.Packaging.dll!System.IO.Packaging.Package.Close()\t\n  \t DocumentFormat.OpenXml.Framework.dll!DocumentFormat.OpenXml.Features.StreamPackageFeature.Dispose(bool disposing)\t\n  \t DocumentFormat.OpenXml.Framework.dll!DocumentFormat.OpenXml.Features.StreamPackageFeature.Dispose()\t\n  \t DocumentFormat.OpenXml.Framework.dll!DocumentFormat.OpenXml.Packaging.PackageFeatureCollection.DocumentFormat.OpenXml.Features.IContainerDisposableFeature.Dispose()\t\n  \t DocumentFormat.OpenXml.Framework.dll!DocumentFormat.OpenXml.Packaging.OpenXmlPackage.Dispose(bool disposing)\t\n  \t DocumentFormat.OpenXml.Framework.dll!DocumentFormat.OpenXml.Packaging.OpenXmlPackage.Dispose()\t\n >\t FukemqibairLaylalljerowhem.dll!Program.<Main>$(string[] args)\n```\n\n**Expected behavior**\n\nWork well without exception.\n\n**Desktop (please complete the following information):**\n - .NET Target: .NET 9\n - DocumentFormat.OpenXml Version: 3.2.0\n\n**Additional context**\n\nThis error throw in dotnet runtime library: https://github.com/dotnet/runtime/blob/c1fe87ad88532f0e80de3739fe7b215e6e1f8b90/src/libraries/System.Private.Xml/src/System/Xml/Core/XmlUtf8RawTextWriter.cs#L932\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2025-02-26T03:30:26.0676594Z","RunDurationInMilliseconds":617}