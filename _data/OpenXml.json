{"Data":{"Sdk":{"Events":[{"Id":"46250759651","Type":"IssuesEvent","CreatedAt":"2025-02-05T10:50:44","Actor":"ChandrasekarML","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1867","RelatedDescription":"Opened issue \"AcceptAllChanges word document Open XML SDK\" (#1867) at dotnet/Open-XML-SDK","RelatedBody":"It seems like you're trying to read and accept all changes in a Word document using C#. However, you're facing an issue where the MoveTo method is not properly cloning the data. Kindly help me.\n\nPlease find below a sample code for AcceptAll changes:\n\nprivate void AcceptAllChanges(string filePath)\n{\n    using (WordprocessingDocument doc = WordprocessingDocument.Open(filePath, true))\n    {\n        var body = doc.MainDocumentPart.Document.Body;\n\n        // Accept Inserted text (InsertedRun elements)\n        var insertedRuns = body.Descendants<InsertedRun>().ToList();\n        foreach (var insertedRun in insertedRuns)\n        {\n            var parent = insertedRun.Parent;\n            foreach (var child in insertedRun.ChildElements.ToList())\n            {\n                parent.InsertBefore(child.CloneNode(true), insertedRun);\n            }\n            insertedRun.Remove();\n        }\n\n        // Remove Deleted text (DeletedRun elements)\n        var deletedRuns = body.Descendants<DeletedRun>().ToList();\n        foreach (var deletedRun in deletedRuns)\n        {\n            deletedRun.Remove();\n        }\n\n        // Remove MoveFrom and MoveTo elements\n        var moveFromElements = body.Descendants<MoveFrom>().ToList();\n        var moveToElements = body.Descendants<MoveTo>().ToList();\n\n        foreach (var moveFrom in moveFromElements)\n        {\n            moveFrom.Remove();\n        }\n\n        //foreach (var moveTo in moveToElements)\n        //{\n        //    var parent = moveTo.Parent;\n        //    foreach (var child in moveTo.ChildElements.ToList())\n        //    {\n        //        parent.InsertBefore(child.CloneNode(true), moveTo);\n        //    }\n        //    moveTo.Remove();\n        //}\n        foreach (var moveTo in moveToElements)\n        {\n            // Iterate over the Run elements inside MoveTo\n            foreach (var run in moveTo.Elements<Run>())\n            {\n                // Now iterate over the Text elements inside each Run\n                foreach (var text in run.Elements<Text>())\n                {\n                    // Append the text content from MoveTo elements\n                    //sb.Append(text.Text);\n                    Console.WriteLine($\"Moved Insertion Text: {text.Text}\");  // For debugging\n                }\n            }\n\n            // Optional: If you want to move the content out of MoveTo and remove the MoveTo element\n            var parent = moveTo.Parent;\n            foreach (var run in moveTo.Elements<Run>())\n            {\n                foreach (var child in run.ChildElements)\n                {\n                    parent.InsertBefore(child.CloneNode(true), moveTo); // Insert content before the MoveTo element\n                }\n            }\n            moveTo.Remove(); // Remove the MoveTo element itself\n        }\n\n        // Remove other tracked changes (paragraph properties, table properties, etc.)\n        var pPrChanges = body.Descendants<ParagraphPropertiesChange>().ToList();\n        foreach (var pPrChange in pPrChanges)\n        {\n            pPrChange.Remove();\n        }\n\n        var tblPrChanges = body.Descendants<TablePropertiesChange>().ToList();\n        foreach (var tblPrChange in tblPrChanges)\n        {\n            tblPrChange.Remove();\n        }\n\n        // Save the changes\n        doc.MainDocumentPart.Document.Save();\n    }\n}"},{"Id":"46229467341","Type":"PullRequestEvent","CreatedAt":"2025-02-04T20:24:00","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1863","RelatedDescription":"Merged pull request \"Optimize ToFlatOpcString to reduce memory usage and improve performanâ€¦\" (#1863) at dotnet/Open-XML-SDK","RelatedBody":"## Optimized the ToFlatOpcString method to address high memory usage and improve performance. \r\n\r\nThe previous implementation relied on LINQ, which created a significant amount of intermediate collections and dictionaries, leading to inefficiency, especially when working with Word documents containing images. \r\n\r\nThis update removes unnecessary LINQ operations and reduces memory overhead, replace manual chunking logic with Convert.ToBase64String using Base64FormattingOptions.InsertLineBreaks. \r\n\r\nThis approach eliminates the need for LINQ-based chunking and aggregation, resulting in cleaner, more efficient code while adhering to the MIME specification for line breaks in Base64 encoding.\r\n\r\nA sample benchmark output when working with a 822KB-word document.\r\n\r\n![image](https://github.com/user-attachments/assets/3efadb6b-9f0f-41d5-9e8d-9992d0296469)\r\n"},{"Id":"46046752935","Type":"PullRequestEvent","CreatedAt":"2025-01-29T22:24:49","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1774","RelatedDescription":"Closed pull request \"Add open xml editor extension for Visual Studio Project\" (#1774) at dotnet/Open-XML-SDK","RelatedBody":"This moves the archived repo for the Open Xml Editor extension for Visual Studio from [Open-XML-Package-Editor-Power-Tool-for-Visual-Studio](https://github.com/OfficeDev/Open-XML-Package-Editor-Power-Tool-for-Visual-Studio) to the Open-XML-SDK repo."},{"Id":"46042775758","Type":"PullRequestEvent","CreatedAt":"2025-01-29T20:01:12","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1866","RelatedDescription":"Opened pull request \"add mp4 to MediaDataPartType enum\" (#1866) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"45966461833","Type":"IssuesEvent","CreatedAt":"2025-01-27T22:35:49","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1665","RelatedDescription":"Closed issue \"Excel in-cell dropdown\" (#1665) at dotnet/Open-XML-SDK","RelatedBody":"I have this code below. The purpose of this code is to set very specific cell's to have drop down values. Not all cells in the column must have this dropdown and the data types differ for each cell.\r\n\r\nThis works fine and excel is created.\r\n\r\nThe issue here is that in Excel, for each cell that have a dropdown applied you need to:\r\n1. Select the cell\r\n2. Select the \"Data\" tab\r\n3. Select \"Data Validation\"\r\n4. Check the \"in-cell dropdown\" checkbox\r\nbefore the cell have a drop  down option\r\n\r\nThis code was developed using several sources to try and resolve the issue, and all of the sources advise more or less the same code\r\n\r\n```csharp\r\nif (data.ApplyLookup(x, rowIndex))\r\n{\r\n\tstring columnName = GetExcelColumnName(x + 1);\r\n\t\r\n\tDataValidation dataValidation = new DataValidation\r\n\t{\r\n\t\tType = DataValidationValues.List,\r\n\t\tShowDropDown = true,\r\n\t\tAllowBlank = true,\r\n\t\tSequenceOfReferences = new ListValue<StringValue> { InnerText = $\"{columnName}{rowIndex}\" }\r\n\t};\r\n\t\r\n\tstring lookupString = $\"\\\"{string.Join(\",\", data.LookupValues[x].Select(kv => kv.Value))}\\\"\";\r\n\tdataValidation.Formula1 = new Formula1(lookupString);\r\n\t\r\n\tdataValidations.Append(dataValidation);\r\n}\r\n```\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2025-02-06T03:30:20.9995221Z","RunDurationInMilliseconds":593}