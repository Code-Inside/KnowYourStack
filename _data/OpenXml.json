{"Data":{"Sdk":{"Events":[{"Id":"30021665556","Type":"PullRequestEvent","CreatedAt":"2023-06-27T00:19:37","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1455","RelatedDescription":"Opened pull request \"Add benchmark workflow\" (#1455) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"30019970589","Type":"PullRequestEvent","CreatedAt":"2023-06-26T22:09:17","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1452","RelatedDescription":"Merged pull request \"Add enumeration to IFeatureCollection\" (#1452) at dotnet/Open-XML-SDK","RelatedBody":"This will allow us to copy or inspect features from one collection to another\n"},{"Id":"30019084478","Type":"IssuesEvent","CreatedAt":"2023-06-26T21:17:17","Actor":"PhDuck","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1454","RelatedDescription":"Opened issue \"Performant way to compare OpenXmlElement\" (#1454) at dotnet/Open-XML-SDK","RelatedBody":"When comparing OpenXmlElement objects, there isn't an obvious performant way to do it.\r\nThe current top solution from [StackOverflow](https://stackoverflow.com/questions/21608492/comparing-two-xml-elements-in-openxml) does:\r\n\r\n```\r\nreturn font.OuterXml.Equals(existingFont.OuterXml);\r\n```\r\n\r\nPerformance wise this performs very poorly, due to two reasons:\r\n1. Lots of temporary allocations:\r\n1.1. StringWriter\r\n1.2. XmlDomTextWriter (which allocates a 6000 char buffer)\r\n1.3 Final string\r\n2. String comparison instead of comparing primitive types.\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nDue to the amount of allocations, we are seeing tons of garbage collection happening when creating Excel sheets in our service.\r\nWhen creating the sheets we have attach styles for the sheet, but to avoid re-adding styles, we compare them to previously added styles.\r\n\r\n**Describe the solution you'd like**\r\nWould be nice if OpenXmlElement implemented IEquatable<T>.\r\nHowever, due to potential wishes for controlling ordering behaviour I could imagine someone wanting a more complex API, but I'm okay with any of them.\r\n\r\n**Describe alternatives you've considered**\r\nTried to implement a faster comparison based on writing to a stream and comparing the underlying bytes instead.\r\n\r\n```\r\nusing (var ms0 = new MemoryStream(256))\r\nusing (var ms1 = new MemoryStream(256))\r\nusing (XmlWriter writer = XmlWriter.Create(ms0, xwSettings))\r\nusing (XmlWriter writer2 = XmlWriter.Create(ms0, xwSettings))\r\n{\r\n    font.WriteTo(writer);\r\n    font.WriteTo(writer2);\r\n\r\n    writer.Flush();\r\n    writer2.Flush();\r\n\r\n    if (ms0.Position == ms1.Position)\r\n    {\r\n        byte[] buf1 = ms0.GetBuffer();\r\n        byte[] buf2 = ms1.GetBuffer();\r\n\r\n        buf1.AsSpan(0, (int)ms0.Position).SequenceEqual(ms1.GetBuffer().AsSpan(0, (int)ms1.Position));\r\n    }\r\n}\r\n```\r\n\r\nI have also tried to do the above, but reusing the XmlWriter and MemoryStream, which reduces the allocations and time significantly. However [StackOverflow](https://stackoverflow.com/questions/4919210/reusing-xmltextwriter-class) warns of reuse.\r\nHowever a slightly naive attempt to recurse the children and attributes show there is more to gain. It could be even faster if the GetAttributes didn't allocate a new list.\r\n\r\n**Additional context**\r\nBenchmarks:\r\n```\r\nBenchmarkDotNet=v0.13.5, OS=Windows 10 (10.0.19045.3086/22H2/2022Update)\r\nAMD Ryzen 7 5800X, 1 CPU, 16 logical and 8 physical cores\r\n.NET SDK=7.0.304\r\n  [Host] : .NET 6.0.18 (6.0.1823.26907), X64 RyuJIT AVX2\r\n\r\nServer=True  \r\n\r\n|          Method | N |       Mean |     Error |   StdDev |   Gen0 |   Gen1 | Allocated |\r\n|---------------- |-- |-----------:|----------:|---------:|-------:|-------:|----------:|\r\n|              MS | 1 | 4,455.6 ns |  57.62 ns | 51.08 ns | 0.9537 | 0.0381 |   16024 B |\r\n|           Reuse | 1 | 2,732.4 ns |  12.43 ns | 11.02 ns | 0.0076 |      - |     144 B |\r\n|        OuterXML | 1 | 5,784.4 ns | 100.72 ns | 98.92 ns | 1.7548 | 0.0839 |   29424 B |\r\n| RecursiveManual | 1 |   974.1 ns |   3.62 ns |  3.21 ns | 0.0648 |      - |    1104 B |\r\n```\r\n"},{"Id":"30014702110","Type":"IssuesEvent","CreatedAt":"2023-06-26T17:46:22","Actor":"tomjebo","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1453","RelatedDescription":"Opened issue \"Migrate AzDo build, release pipeline to Github Actions\" (#1453) at dotnet/Open-XML-SDK","RelatedBody":"We currently have disabled PR triggered AzDo pipeline builds for security reasons. \r\nTo resolve this, we should create a Github Action based pipeline. \r\n\r\nThis issue should track the effort and discuss requirements, features needed, etc..."}],"ResultType":"GitHubEvent"}},"RunOn":"2023-06-27T03:30:24.903273Z","RunDurationInMilliseconds":838}