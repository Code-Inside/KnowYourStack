{"Data":{"Sdk":{"Events":[{"Id":"14918429565","Type":"IssuesEvent","CreatedAt":"2021-01-22T21:40:37","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/848","RelatedDescription":"Closed issue \"Lost whitespace in power point\" (#848) at OfficeDev/Open-XML-SDK","RelatedBody":"Hi,\r\nI encountered the following issue using the OpenXML SDK\r\n\r\n**Description**\r\nI am reading in a simple pptx file (see the resource in the repro section) using the OpenXML SDK (code provided in the repro section).\r\nFirst opening the file and then reading the slide part with the OpenXMLReader.\r\nThe text element containing only white spaces is trimmed and after reading contains no characters.\r\nThis behaviour destroys the layout of manually indented content if the file would be saved after reading it.\r\n\r\nSimilar reports:\r\nhttps://stackoverflow.com/questions/6106044/missing-whitespace-within-pptx-paragraphs-using-openxmlsdk?rq=1\r\nhttps://stackoverflow.com/questions/7153387/powerpoint-openxml-whitespace-is-disappearing?rq=1\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Core\r\n- DocumentFormat.OpenXml Version: 2.11.3\r\n\r\n**Repro**\r\nI have created a small example using an example pptx file with one slide\r\nhttps://github.com/lklein53/openxmlsdk-whitespace\r\n\r\n**Observed**\r\n\r\nThe xml reader used internally is configured to ignore insignificant whitespaces which results in the removal of the whitespaces in the text element. I haven't seen the possibility to change that behaviour. For word documents there is the xml:space=preserve attribute added to such text nodes which seems to be not the case for power point files. \r\n\r\n**Expected**\r\n\r\nIt would be nice if it would be possible to configure the current behaviour to explicitly keep insignificant whitespaces if that is desired by the user of the SDK. I could implement this functionality if you think it should be added.\r\n\r\nPlease let me know if I am using the OpenXMLReader wrong and there is another way to read in the slide part.\r\n\r\nThanks for your help and kind regards,\r\nLars\r\n\r\n(edit by @twsouthwick)\r\n\r\n```csharp\r\nusing System;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing DocumentFormat.OpenXml;\r\nusing DocumentFormat.OpenXml.Drawing;\r\nusing DocumentFormat.OpenXml.Packaging;\r\nusing Xunit;\r\nusing Path = System.IO.Path;\r\n\r\nnamespace TestProject1 {\r\npublic class UnitTest1 {\r\n  [Fact]\r\n  public void Test1() {\r\n    const string fileName = \"Resources/example.pptx\";\r\n    var path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) ?? throw new InvalidOperationException(), fileName);\r\n    using var doc = PresentationDocument.Open(path, false);\r\n    var slide = doc.PresentationPart.SlideParts.First();\r\n    var reader = OpenXmlReader.Create(slide);\r\n    reader.Read();\r\n    var element = reader.LoadCurrentElement();\r\n    var text = element.Descendants<Text>().First();\r\n    Assert.Equal(\" \", text.Text);\r\n  }\r\n}\r\n}\r\n```"},{"Id":"14918406615","Type":"PullRequestEvent","CreatedAt":"2021-01-22T21:37:50","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/857","RelatedDescription":"Merged pull request \"Openxmlreader ignorews option\" (#857) at OfficeDev/Open-XML-SDK","RelatedBody":"Changes discussed in #848 @twsouthwick "},{"Id":"14918224530","Type":"PullRequestEvent","CreatedAt":"2021-01-22T21:17:05","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/859","RelatedDescription":"Merged pull request \"Enable nullable annotations for OpenXmlAttribute\" (#859) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"14917051745","Type":"PullRequestEvent","CreatedAt":"2021-01-22T19:12:37","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/859","RelatedDescription":"Opened pull request \"Enable nullable annotations for OpenXmlAttribute\" (#859) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"14916963760","Type":"PullRequestEvent","CreatedAt":"2021-01-22T19:03:48","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/856","RelatedDescription":"Merged pull request \"Replace usage of namespace ids with OpenXmlNamespace\" (#856) at OfficeDev/Open-XML-SDK","RelatedBody":"This change is fairly large and reworks how namespaces are handled internally. The main benefit of this change is it removes reliance on all inner workings on the namespace id. This was a hard coded value that was essentially a magic number for each namespace. This replaces that with a struct that handles the comparisons (`OpenXmlNamespace`) as well as a type that wraps that to identify a qualified name (`OpenXmlQualifiedName`). This change also makes it clear where a string is a name, a namespace, a prefix, etc.\r\n\r\nThis does not update the generated files to not use namespace ids. That is still in place, but is the last place where a namespace id is needed."}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2021-01-24T05:30:40.567494Z","RunDurationInMilliseconds":911}