{"Data":{"Sdk":{"Events":[{"Id":"26711856821","Type":"PullRequestEvent","CreatedAt":"2023-01-28T01:50:07","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1329","RelatedDescription":"Opened pull request \"Rename IChildPartFeature to IChildRelationshipPartFeature\" (#1329) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"26711766914","Type":"PullRequestEvent","CreatedAt":"2023-01-28T01:35:38","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1328","RelatedDescription":"Opened pull request \"Add relationship filter to reduce overriding package parts\" (#1328) at dotnet/Open-XML-SDK","RelatedBody":"This allows for a callback to be registered that will filter out how relationships are defined so without needing to override IPackagePart implementations.\n"},{"Id":"26705564129","Type":"PullRequestEvent","CreatedAt":"2023-01-27T17:50:11","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1327","RelatedDescription":"Merged pull request \"Move main part loading\" (#1327) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"26688586776","Type":"PullRequestEvent","CreatedAt":"2023-01-27T01:08:12","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1327","RelatedDescription":"Opened pull request \"Move main part loading\" (#1327) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"26688389744","Type":"PullRequestEvent","CreatedAt":"2023-01-27T00:51:53","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1326","RelatedDescription":"Opened pull request \"Turn on all the framework warnings available\" (#1326) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"26687238532","Type":"IssuesEvent","CreatedAt":"2023-01-26T23:18:51","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1325","RelatedDescription":"Opened issue \"Clean up CA1851 warnings\" (#1325) at dotnet/Open-XML-SDK","RelatedBody":"After turning on warnings, a number of CA1851 showed up that will take a bit of refactoring to clean up correclty."},{"Id":"26686725967","Type":"PullRequestEvent","CreatedAt":"2023-01-26T22:43:04","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1123","RelatedDescription":"Closed pull request \"Add TypeScript code generator\" (#1123) at dotnet/Open-XML-SDK","RelatedBody":"This PR adds a TypeScript code generator to the `DocumentFormat.OpenXml.Generator.Linq` project. This lets us generate namespace-related classes for the \"LINQ to XML way\" for both C# and TypeScript.\r\n\r\nThe TypeScript classes can be used with the [@openxmldev/linq-to-xml](https://www.npmjs.com/package/@openxmldev/linq-to-xml) NPM package, which also provides the `XNamespace`, `XName`, and `XAttribute` classes required for the generated code.\r\n\r\nIn PowerShell, for example, the generator is invoked as follows to generate C# code (which is the default) in the output directory specified using the required `--outDir` option:\r\n\r\n```ps1\r\n.\\DocumentFormat.OpenXml.Generator.Linq.exe --outDir .\\path\\to\\output\\directory\r\n```\r\n\r\nTo generate TypeScript code instead, the `--ts` option is used:\r\n\r\n```ps1\r\n.\\DocumentFormat.OpenXml.Generator.Linq.exe --outDir .\\path\\to\\output\\directory --ts\r\n```\r\n\r\nIn case no options are specified, you'll see an error message with the description of the options:\r\n\r\n```\r\nERROR(S):\r\n  Required option 'outDir' is missing.\r\n\r\n  --outDir     Required. Specifies the output directory.\r\n\r\n  --ts         (Default: false) Selects TypeScript instead of C# as the output language.\r\n\r\n  --help       Display this help screen.\r\n\r\n  --version    Display version information.\r\n```\r\n\r\nAt the moment, the TypeScript generator does not generate code for all classes but selects the more frequently used namespaces (from my point of view). If there is better data available to make a more informed selection, I'd be open to using that instead. The idea is to limit the size of the NPM package by not including namespace-related classes that are not used in practice.\r\n\r\nThe TypeScript generator emits static attributes because a benchmark performed with @mikeebowen demonstrated that this leads to the best run-time performance (see [benchmark results](https://github.com/mikeebowen/getter-vs-property-benchmark/issues/1))."},{"Id":"26686708659","Type":"PullRequestEvent","CreatedAt":"2023-01-26T22:41:50","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1315","RelatedDescription":"Closed pull request \"Remove custom project load style\" (#1315) at dotnet/Open-XML-SDK","RelatedBody":"This had been in place for some performance issues in VS. It does make\ndevelopment challenging, and with the refactoring of the framework from\nthe strongly typed classes, Visual Studio seems to handle this better.\n"},{"Id":"26686702197","Type":"PullRequestEvent","CreatedAt":"2023-01-26T22:41:23","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1311","RelatedDescription":"Closed pull request \"Enable large part writing\" (#1311) at dotnet/Open-XML-SDK","RelatedBody":"On .NET Core and .NET 5+, there is an issue that prevents largs parts from being written to a package. This is due to the underlying ZipArchive buffering everything in memory when updating an archive entry. Because of the way that we use the archive, the only way around that is to load the package in a write-only mode. With the recent addition of being able to reload a package, we can work around this behavior by redirecting streams and then writing them to a write-only package after everything else has been written.\r\n\r\nFixes #807\r\n"},{"Id":"26686255076","Type":"PullRequestEvent","CreatedAt":"2023-01-26T22:13:30","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1324","RelatedDescription":"Merged pull request \"Move package initialization out of constructor\" (#1324) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"26685898207","Type":"PullRequestEvent","CreatedAt":"2023-01-26T21:53:56","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1324","RelatedDescription":"Opened pull request \"Move package initialization out of constructor\" (#1324) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"26685849827","Type":"IssuesEvent","CreatedAt":"2023-01-26T21:51:28","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/715","RelatedDescription":"Closed issue \"One illegal uri in Relationship will destroy the document parsing\" (#715) at dotnet/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nThe PPTX document that include an illegal uri in Relationship will make the `System.IO.Packaging.InternalRelationshipCollection.ProcessRelationshipAttributes` throw an exception to  `OpenXmlPart.Load`.\r\n\r\nAnd the `OpenXmlPart.Load` can not catch the exception and it will break the `PresentationDocument.Open`.\r\n\r\n**Information**\r\n\r\n- .NET Target: All\r\n- DocumentFormat.OpenXml Version: 2.10.1\r\n\r\n**Repro**\r\n\r\n```csharp\r\nvar document = PresentationDocument.Open(\"hyperlink.pptx\", isEditable: false, openSettings)\r\n``` \r\n\r\nHere is the hyperlink.pptx file : https://1drv.ms/p/s!AiKjiQqRWKThlv5zkY4HoRvvJ3Ppdg?e=3kfdNU \r\n\r\n**Observed**\r\n\r\nThe PresentationDocument.Open throw the UriFormatException exception\r\n\r\n```\r\nSystem.UriFormatException: 'Invalid URI: The hostname could not be parsed.'\r\n```\r\n\r\nBecause the ppt\\slides\\_rels\\slide1.xml.rels contain this string\r\n\r\n```xml\r\n<Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\" Target=\"mailto:!@#$%^&amp;*()_+}{:”?&gt;&lt;,./;’[]=-098766554321\" TargetMode=\"External\"/>\r\n```\r\n\r\nAs you can see, the `Target` is not an uri.\r\n\r\n**Expected**\r\n\r\nWe can design an exception handle API, and we can handle some illegal document.\r\n\r\nSee #38 #274 #297 #298 \r\n\r\nAnd the #298 only add more information but can not tolerate errors.\r\n\r\nAnd just as @twsouthwick says, we can not fix this in the OpenXML SDK project https://github.com/OfficeDev/Open-XML-SDK/issues/297#issuecomment-345560540 , but I think we can tolerate some errors"},{"Id":"26685849464","Type":"PullRequestEvent","CreatedAt":"2023-01-26T21:51:27","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1322","RelatedDescription":"Merged pull request \"Add better support for malformed URIs\" (#1322) at dotnet/Open-XML-SDK","RelatedBody":"An ability to rewrite relationship URIs was introduced in v2.12. However, this required someone to opt in and manually write support. This change attempts to enable support for these malformed URIs out of the box. Later changes will move this to be an opt-in feature due to the potential performance hit (especially for readonly packages that will essentially be duplicated).\r\n\r\nFixes #715 \r\n"},{"Id":"26681135343","Type":"IssuesEvent","CreatedAt":"2023-01-26T17:47:01","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1323","RelatedDescription":"Opened issue \"Remove initial load in OpenXmlPackage\" (#1323) at dotnet/Open-XML-SDK","RelatedBody":"Within the constructor of OpenXmlPackage, it does an initial load of all the parts. This is both premature as well as prevents us from having control over certain aspects of the loading (i.e. package shape, how to handle certain error conditions, etc). We should move this design to be more of an on-demand load if possible."},{"Id":"26679702024","Type":"PullRequestEvent","CreatedAt":"2023-01-26T16:43:30","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1304","RelatedDescription":"Merged pull request \"Add two extensions to GetImagePartType\" (#1304) at dotnet/Open-XML-SDK","RelatedBody":"See issue:\r\nhttps://github.com/OfficeDev/Open-XML-SDK/issues/1081"},{"Id":"26667058070","Type":"PullRequestEvent","CreatedAt":"2023-01-26T05:53:37","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1322","RelatedDescription":"Opened pull request \"Add better support for malformed URIs\" (#1322) at dotnet/Open-XML-SDK","RelatedBody":"An ability to rewrite relationship URIs was introduced in v2.12. However, this required someone to opt in and manually write support. This change attempts to enable support for these malformed URIs out of the box. Later changes will move this to be an opt-in feature due to the potential performance hit (especially for readonly packages that will essentially be duplicated).\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-01-28T03:30:26.3699768Z","RunDurationInMilliseconds":717}