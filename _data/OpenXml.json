{"Data":{"Sdk":{"Events":[{"Id":"36236745790","Type":"IssuesEvent","CreatedAt":"2024-03-04T20:34:47","Actor":"bkatchmar","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1684","RelatedDescription":"Opened issue \"Changing underlying excel data sheet does not update other worksheets\" (#1684) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nI have a power point presentation with charts powered by data in an excel OLE object.\r\n\r\n[valentineschocolates.pptx](https://github.com/dotnet/Open-XML-SDK/files/14486750/valentineschocolates.pptx)\r\n\r\nThere is a presentation layer and a `Data` sheet that powers the prettier presentation sheet (there are also custom fonts associated here). Within the presentation, there are two rows of interest:\r\n\r\nTHE HERSEY CO: $123\r\nMARS INC: $456\r\n\r\nI run the below code, primarily if not exclusively using the OpenXML code to open the PPTX, get inside the Excel object, update the data for these two rows, save and close. However, when I re-open the file again, the object does not appear updated but when I double click on the object, then and only then, does the data \"snap\" to the correct values.\r\n\r\nIs it possible I am not setting an \"AutoUpdate\" flag correctly or not calling something to have this updated before a user needs to open the file and double click?\r\n\r\nNuGet Packages Used (some of these are not used in the code example)\r\n\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Aspose.Cells\" Version=\"24.2.0\" />\r\n    <PackageReference Include=\"Aspose.Slides.NET\" Version=\"24.1.0\" />\r\n    <PackageReference Include=\"DocumentFormat.OpenXml\" Version=\"3.0.1\" />\r\n    <PackageReference Include=\"Microsoft.AnalysisServices.AdomdClient.NetCore.retail.amd64\" Version=\"19.76.0\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\r\n    <PackageReference Include=\"SendGrid\" Version=\"9.29.1\" />\r\n  </ItemGroup>\r\n```\r\n\r\nCode\r\n\r\n```\r\nusing DocumentFormat.OpenXml;\r\nusing DocumentFormat.OpenXml.Packaging;\r\nusing DocumentFormat.OpenXml.Presentation;\r\nusing DocumentFormat.OpenXml.Spreadsheet;\r\nusing Newtonsoft.Json;\r\nusing System.Text;\r\n\r\nTestAsposeDataRefresh();\r\n\r\nstatic void TestAsposeDataRefresh()\r\n{\r\n    List<string> queryKeys = new() { \"SLIDE328_OBJECT 6\" };\r\n    string directory = @\"C:\\Users\\brian\\OneDrive\\Documents\\ghirardelli\\valentineschocolates.pptx\";\r\n    using FileStream ReportStream = File.Open(directory, FileMode.Open, FileAccess.ReadWrite);\r\n\r\n    // First open the document using OpenXML to change the data (Aspose ignore this)\r\n    PresentationDocument presentationDocument = PresentationDocument.Open(ReportStream, true);\r\n    PresentationPart? presentationPart = presentationDocument.PresentationPart;\r\n\r\n    if (presentationPart != null)\r\n    {\r\n        SlideIdList? slideList = presentationPart.Presentation.SlideIdList;\r\n\r\n        if (slideList != null)\r\n        {\r\n            OpenXmlElementList slideIDs = slideList.ChildElements;\r\n\r\n            for (int i = 0; i <= slideIDs.Count - 1; i++)\r\n            {\r\n                SlideId? slideId = slideIDs[i] as SlideId;\r\n                StringValue? slidePartRelationshipID = slideId.RelationshipId;\r\n                SlidePart slidePart = (SlidePart)presentationPart.GetPartById(slidePartRelationshipID);\r\n                int slideID = Convert.ToInt32(slideId.Id.ToString());\r\n\r\n                foreach (GraphicFrame gf in slidePart.Slide.Descendants<GraphicFrame>())\r\n                {\r\n                    foreach (NonVisualDrawingProperties nvdp in gf.Descendants<NonVisualDrawingProperties>())\r\n                    {\r\n                        if (gf.Graphic.GraphicData.Uri.ToString().Contains(\"ole\"))\r\n                        {\r\n                            string shapeName = nvdp.Name.ToString().ToUpper();\r\n                            string queryKey = string.Concat(\"SLIDE\", slideID.ToString(), \"_\", shapeName);\r\n\r\n                            foreach (DocumentFormat.OpenXml.Presentation.OleObject ole in gf.Descendants<DocumentFormat.OpenXml.Presentation.OleObject>())\r\n                            {\r\n                                if (ole != null)\r\n                                {\r\n                                    if (string.Compare(slidePart.GetPartById(ole.Id.Value).GetType().Name, \"EmbeddedPackagePart\") == 0)\r\n                                    {\r\n                                        EmbeddedPackagePart epp = (EmbeddedPackagePart)slidePart.GetPartById(ole.Id.Value);\r\n                                        if (queryKeys.Contains(queryKey))\r\n                                        {\r\n                                            using Stream embeddedPackagePartStream = epp.GetStream();\r\n                                            using SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(embeddedPackagePartStream, true);\r\n                                            UpdateChartData(spreadsheetDocument);\r\n                                            spreadsheetDocument.Save();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        presentationDocument.Save();\r\n    }\r\n\r\n    Console.WriteLine(\"Done\");\r\n}\r\n\r\nstatic void ExperimentWithOpenXML()\r\n{\r\n\r\n    Dictionary<string, string> sheetNames = new();\r\n    Dictionary<string, string> newValues = new()\r\n    {\r\n        { \"A1\", \"G\" },\r\n        { \"A2\", \"H\" },\r\n        { \"A3\", \"I\" },\r\n        { \"B1\", \"7\" },\r\n        { \"B2\", \"8\" },\r\n        { \"B3\", \"9\" }\r\n    };\r\n    string directory = @\"C:\\Users\\brian\\OneDrive\\Documents\\ghirardelli\\Book1.xlsx\";\r\n    Console.WriteLine($\"Opening File: {directory}\");\r\n    Console.WriteLine(\"\");\r\n    using FileStream reportStream = File.Open(directory, FileMode.Open, FileAccess.ReadWrite);\r\n\r\n    // Create a spreadsheet document by supplying the file name.  \r\n    SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(reportStream, true);\r\n    WorkbookPart? wbp = spreadsheetDocument.WorkbookPart;\r\n\r\n    // Read details of the workbook\r\n    if (wbp != null)\r\n    {\r\n        foreach (Sheet sheet in wbp.Workbook.Descendants<Sheet>())\r\n        {\r\n            StringValue? sheetId = sheet.Id;\r\n            StringValue? sheetName = sheet.Name;\r\n\r\n            if (sheetId != null && sheetId.HasValue && sheetName != null && sheetName.HasValue)\r\n            {\r\n                sheetNames.Add(sheetId, sheetName);\r\n            }\r\n        }\r\n\r\n        // List the sheet names\r\n        foreach (KeyValuePair<string, string> sheet in sheetNames)\r\n        {\r\n            Console.WriteLine($\"Sheet Key: {sheet.Key}; Sheet Name: {sheet.Value}\");\r\n        }\r\n        Console.WriteLine(\"\");\r\n\r\n        // Going through the Worksheets\r\n        foreach (WorksheetPart sheet in wbp.WorksheetParts)\r\n        {\r\n            DocumentFormat.OpenXml.Spreadsheet.Worksheet worksheet = sheet.Worksheet;\r\n            SheetData? sheetData = worksheet.GetFirstChild<SheetData>();\r\n\r\n            if (sheetData != null)\r\n            {\r\n                DocumentFormat.OpenXml.Spreadsheet.Row[] rows = sheetData.Elements<DocumentFormat.OpenXml.Spreadsheet.Row>().ToArray();\r\n\r\n                for (int x = 0; x < rows.Count(); x++)\r\n                {\r\n                    foreach (DocumentFormat.OpenXml.Spreadsheet.Cell c in rows[x].Elements<DocumentFormat.OpenXml.Spreadsheet.Cell>().ToArray())\r\n                    {\r\n                        if (c.DataType != null && c.DataType == CellValues.SharedString)\r\n                        {\r\n                            int stringId = Convert.ToInt32(c.InnerText);\r\n                            SharedStringTablePart? tablePart = wbp.SharedStringTablePart;\r\n                            if (tablePart != null)\r\n                            {\r\n                                string cellValue = tablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(stringId).InnerText;\r\n                                Console.WriteLine($\"Cell: {c.CellReference}; Value: {cellValue}; Data Type: {c.DataType}\");\r\n                            }\r\n\r\n                            if (newValues.ContainsKey(c.CellReference))\r\n                            {\r\n                                DocumentFormat.OpenXml.Spreadsheet.CellValue newValue = new(newValues[c.CellReference]);\r\n                                c.CellValue = newValue;\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine($\"Cell: {c.CellReference}; Value: {c.CellValue.InnerText}; Data Type: {c.DataType}\");\r\n\r\n                            if (newValues.ContainsKey(c.CellReference))\r\n                            {\r\n                                DocumentFormat.OpenXml.Spreadsheet.CellValue newValue = new(int.Parse(newValues[c.CellReference]));\r\n                                c.CellValue = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    spreadsheetDocument.Save();\r\n}\r\n\r\nstatic void TestAsposeDataRefresh2()\r\n{\r\n    Console.WriteLine(\"TestAsposeDataRefresh2\");\r\n\r\n    string jsonObjectArrayData = \"[[\\\"Product\\\",\\\"Time Period\\\",\\\"Geography\\\",\\\"Dollar Sales\\\",\\\"Dollar Sales Year Ago\\\",\\\"Unit Sales\\\",\\\"Unit Sales Year Ago\\\"],[\\\"VALENTINE\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",1017922.0,848299.0,274256.0,264593.0],[\\\"THE HERSHEY CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",453137.0,358935.0,124223.0,94165.0],[\\\"MARS INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",163497.0,165286.0,38117.0,45832.0],[\\\"RUSSELL STOVER CHOCOLATES, LLC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",162167.0,142333.0,41123.0,55579.0],[\\\"LINDT\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",102415.0,52291.0,17452.0,12425.0],[\\\"GHIRARDELLI CHOCOLATE CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",32874.0,39488.0,4356.0,5766.0],[\\\"R M PALMER CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",26549.0,19967.0,18800.0,17168.0],[\\\"FRANKFORD CANDY LLC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",22573.0,15824.0,11906.0,15862.0],[\\\"FERRERO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",17172.0,13933.0,7028.0,6784.0],[\\\"GODIVA CHOCOLATIER\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",17147.0,27946.0,2337.0,3901.0],[\\\"FERRARA CANDY CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",15645.0,5790.0,3138.0,1192.0],[\\\"TOOTSIE ROLL INDS INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",4312.0,3446.0,3510.0,3454.0],[\\\"R L ALBERT & SON INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",3286.0,3051.0,2266.0,2459.0],[\\\"BK Broiler INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",3137.0,8675.0,3096.0,666.0]]\";\r\n    List<object[]> modifiedDataList = JsonConvert.DeserializeObject<List<object[]>>(jsonObjectArrayData);\r\n\r\n    List<string> queryKeys = new() { \"SLIDE328_OBJECT 6\" };\r\n    string directory = @\"C:\\Users\\brian\\OneDrive\\Documents\\ghirardelli\\ghirardelli.pptx\";\r\n\r\n    Dictionary<string, string> newValues = new()\r\n    {\r\n        { \"D3\", \"453137\" }\r\n    };\r\n\r\n    using FileStream ReportStream = File.Open(directory, FileMode.Open, FileAccess.ReadWrite);\r\n\r\n    // First open the document using OpenXML to change the data (Aspose ignore this)\r\n    bool openXmlPassed = false;\r\n    PresentationDocument presentationDocument = PresentationDocument.Open(ReportStream, true);\r\n    PresentationPart? presentationPart = presentationDocument.PresentationPart;\r\n\r\n    if (presentationPart != null)\r\n    {\r\n        SlideIdList? slideList = presentationPart.Presentation.SlideIdList;\r\n\r\n        if (slideList != null)\r\n        {\r\n            OpenXmlElementList slideIDs = slideList.ChildElements;\r\n\r\n            for (int i = 0; i <= slideIDs.Count - 1; i++)\r\n            {\r\n                SlideId? slideId = slideIDs[i] as SlideId;\r\n                StringValue? slidePartRelationshipID = slideId.RelationshipId;\r\n                SlidePart slidePart = (SlidePart)presentationPart.GetPartById(slidePartRelationshipID);\r\n                int slideID = Convert.ToInt32(slideId.Id.ToString());\r\n\r\n                foreach (GraphicFrame gf in slidePart.Slide.Descendants<GraphicFrame>())\r\n                {\r\n                    foreach (NonVisualDrawingProperties nvdp in gf.Descendants<NonVisualDrawingProperties>())\r\n                    {\r\n                        if (gf.Graphic.GraphicData.Uri.ToString().Contains(\"ole\"))\r\n                        {\r\n                            string shapeName = nvdp.Name.ToString().ToUpper();\r\n                            string queryKey = string.Concat(\"SLIDE\", slideID.ToString(), \"_\", shapeName);\r\n\r\n                            foreach (DocumentFormat.OpenXml.Presentation.OleObject ole in gf.Descendants<DocumentFormat.OpenXml.Presentation.OleObject>())\r\n                            {\r\n                                if (ole != null)\r\n                                {\r\n                                    if (string.Compare(slidePart.GetPartById(ole.Id.Value).GetType().Name, \"EmbeddedPackagePart\") == 0)\r\n                                    {\r\n                                        EmbeddedPackagePart epp = (EmbeddedPackagePart)slidePart.GetPartById(ole.Id.Value);\r\n                                        if (queryKeys.Contains(queryKey))\r\n                                        {\r\n                                            using Stream embeddedPackagePartStream = epp.GetStream();\r\n                                            using SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(embeddedPackagePartStream, true);\r\n                                            WorkbookPart? wbp = spreadsheetDocument.WorkbookPart;\r\n\r\n                                            Dictionary<string, string> sheetNames = new();\r\n                                            foreach (Sheet sheet in wbp.Workbook.Descendants<Sheet>())\r\n                                            {\r\n                                                StringValue? sheetId = sheet.Id;\r\n                                                StringValue? sheetName = sheet.Name;\r\n\r\n                                                if (sheetId != null && sheetId.HasValue && sheetName != null && sheetName.HasValue)\r\n                                                {\r\n                                                    sheetNames.Add(sheetId, sheetName);\r\n                                                }\r\n                                            }\r\n\r\n                                            // List the sheet names\r\n                                            foreach (KeyValuePair<string, string> sheet in sheetNames)\r\n                                            {\r\n                                                Console.WriteLine($\"Query Key: {queryKey}; Sheet Key: {sheet.Key}; Sheet Name: {sheet.Value}\");\r\n                                            }\r\n                                            Console.WriteLine(\"\");\r\n\r\n                                            // Going through the Worksheets\r\n                                            foreach (WorksheetPart sheet in wbp.WorksheetParts)\r\n                                            {\r\n                                                DocumentFormat.OpenXml.Spreadsheet.Worksheet worksheet = sheet.Worksheet;\r\n                                                SheetData? sheetData = worksheet.GetFirstChild<SheetData>();\r\n\r\n                                                if (sheetData != null)\r\n                                                {\r\n                                                    DocumentFormat.OpenXml.Spreadsheet.Row[] rows = sheetData.Elements<DocumentFormat.OpenXml.Spreadsheet.Row>().ToArray();\r\n\r\n                                                    for (int x = 0; x < rows.Count(); x++)\r\n                                                    {\r\n                                                        foreach (DocumentFormat.OpenXml.Spreadsheet.Cell c in rows[x].Elements<DocumentFormat.OpenXml.Spreadsheet.Cell>().ToArray())\r\n                                                        {\r\n                                                            if (c.CellValue != null)\r\n                                                            {\r\n                                                                if (c.DataType != null && c.DataType == CellValues.SharedString)\r\n                                                                {\r\n                                                                    int stringId = Convert.ToInt32(c.InnerText);\r\n                                                                    SharedStringTablePart? tablePart = wbp.SharedStringTablePart;\r\n                                                                    if (tablePart != null)\r\n                                                                    {\r\n                                                                        string cellValue = tablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(stringId).InnerText;\r\n                                                                        if (c.CellReference == \"D3\")\r\n                                                                        {\r\n                                                                            Console.WriteLine($\"Cell: {c.CellReference}; Value: {cellValue}; Data Type: {c.DataType}\");\r\n                                                                        }\r\n                                                                    }\r\n\r\n                                                                    if (newValues.ContainsKey(c.CellReference))\r\n                                                                    {\r\n                                                                        DocumentFormat.OpenXml.Spreadsheet.CellValue newValue = new(newValues[c.CellReference]);\r\n                                                                        c.CellValue = newValue;\r\n                                                                    }\r\n                                                                }\r\n                                                                else\r\n                                                                {\r\n                                                                    if (c.CellReference == \"D3\")\r\n                                                                    {\r\n                                                                        Console.WriteLine($\"Cell: {c.CellReference}; Value: {c.CellValue.InnerText}; Data Type: {c.DataType}\");\r\n                                                                    }\r\n\r\n                                                                    if (newValues.ContainsKey(c.CellReference))\r\n                                                                    {\r\n                                                                        DocumentFormat.OpenXml.Spreadsheet.CellValue newValue = new(int.Parse(newValues[c.CellReference]));\r\n                                                                        c.CellValue = newValue;\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    worksheet.Save();\r\n                                                }\r\n                                            }\r\n\r\n                                            spreadsheetDocument.Save();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        presentationDocument.Save();\r\n    }\r\n}\r\n\r\n#region OpenXML Private Helper Classes (Strictly to update the excel object)\r\nstatic void UpdateChartData(SpreadsheetDocument sd)\r\n{\r\n    WorkbookPart wbp = sd.WorkbookPart;\r\n    Dictionary<string, string> sheetNames = new Dictionary<string, string>();\r\n    string jsonObjectArrayData = \"[[\\\"Product\\\",\\\"Time Period\\\",\\\"Geography\\\",\\\"Dollar Sales\\\",\\\"Dollar Sales Year Ago\\\",\\\"Unit Sales\\\",\\\"Unit Sales Year Ago\\\"],[\\\"VALENTINE\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",1017922.0,848299.0,274256.0,264593.0],[\\\"THE HERSHEY CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",453137.0,358935.0,124223.0,94165.0],[\\\"MARS INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",163497.0,165286.0,38117.0,45832.0],[\\\"RUSSELL STOVER CHOCOLATES, LLC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",162167.0,142333.0,41123.0,55579.0],[\\\"LINDT\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",102415.0,52291.0,17452.0,12425.0],[\\\"GHIRARDELLI CHOCOLATE CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",32874.0,39488.0,4356.0,5766.0],[\\\"R M PALMER CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",26549.0,19967.0,18800.0,17168.0],[\\\"FRANKFORD CANDY LLC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",22573.0,15824.0,11906.0,15862.0],[\\\"FERRERO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",17172.0,13933.0,7028.0,6784.0],[\\\"GODIVA CHOCOLATIER\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",17147.0,27946.0,2337.0,3901.0],[\\\"FERRARA CANDY CO\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",15645.0,5790.0,3138.0,1192.0],[\\\"TOOTSIE ROLL INDS INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",4312.0,3446.0,3510.0,3454.0],[\\\"R L ALBERT & SON INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",3286.0,3051.0,2266.0,2459.0],[\\\"BK Broiler INC\\\",\\\"Vday 2023 12WE 02-19-2023\\\",\\\"Weis Corp\\\",3137.0,8675.0,3096.0,2459.0]]\";\r\n    List<object[]> modifiedDataList = JsonConvert.DeserializeObject<List<object[]>>(jsonObjectArrayData);\r\n\r\n    string sNewRange = CalcExcelTableRange(modifiedDataList);\r\n    string dataSheetName = \"Sheet1\", sheetID = string.Empty, sheetName = string.Empty;\r\n    DocumentFormat.OpenXml.Spreadsheet.Worksheet worksheet = null;\r\n\r\n    foreach (Sheet sheet in wbp.Workbook.Descendants<Sheet>())\r\n    {\r\n        sheetNames.Add(sheet.Id, sheet.Name);\r\n\r\n        if (string.Compare(sheet.Name, \"Data\", true) == 0)\r\n        {\r\n            dataSheetName = \"Data\";\r\n        }\r\n    }\r\n\r\n    wbp.Workbook.CalculationProperties.ForceFullCalculation = true;\r\n    wbp.Workbook.CalculationProperties.FullCalculationOnLoad = true;\r\n\r\n    foreach (WorksheetPart sheet in wbp.WorksheetParts)\r\n    {\r\n        sheetID = wbp.GetIdOfPart(sheet);\r\n        worksheet = sheet.Worksheet;\r\n        sheetName = sheetNames[sheetID];\r\n\r\n        if (string.Compare(sheetName, dataSheetName, true) == 0 || string.Compare(sheetName, \"Chart\", true) == 0)\r\n        {\r\n            if (!sheet.PivotTableParts.Any() && !sheet.TableDefinitionParts.Any())\r\n            {\r\n                string sOldRange = \"A1:G14\";\r\n                ClearSheet(worksheet, sOldRange);\r\n                WriteSheetDataOffset(worksheet, modifiedDataList, sOldRange.Substring(0, sNewRange.IndexOf(':')));\r\n\r\n                // We need to make sure the new sheet's reference saves properly\r\n                worksheet.SheetDimension.Reference = sNewRange;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\nstatic string CalcExcelTableRange(List<object[]> data)\r\n{\r\n    string sRange = \"A1:\" + GenerateRange(data[0].Length, data.Count);\r\n\r\n    return sRange;\r\n}\r\nstatic string GenerateRange(int endColumn, int endRow)\r\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    int root = 0, suffix = 0;\r\n    char left = default(char), right = default(char);\r\n\r\n    root = endColumn / 26;\r\n    suffix = endColumn % 26;\r\n\r\n    if (root > 0)\r\n    {\r\n        if (root == 1)\r\n        {\r\n            if (suffix > 0)\r\n            {\r\n                left = Convert.ToChar(root + 64);\r\n                right = Convert.ToChar(suffix + 64);\r\n                sb.Append(left);\r\n                sb.Append(right);\r\n            }\r\n            else\r\n            {\r\n                sb.Append(Convert.ToChar(endColumn + 64));\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (suffix > 0)\r\n            {\r\n                left = Convert.ToChar(root + 64);\r\n                right = Convert.ToChar(suffix + 64);\r\n            }\r\n            else\r\n            {\r\n                left = Convert.ToChar(root - 1 + 64);\r\n                right = Convert.ToChar(90);\r\n            }\r\n\r\n            sb.Append(left);\r\n            sb.Append(right);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        sb.Append(Convert.ToChar(endColumn + 64));\r\n    }\r\n\r\n    sb.Append(endRow.ToString());\r\n\r\n    return sb.ToString();\r\n}\r\nstatic void ClearSheet(DocumentFormat.OpenXml.Spreadsheet.Worksheet worksheet, string range = \"\")\r\n{\r\n    SheetData sheetData = worksheet.GetFirstChild<SheetData>();\r\n    string startCell = string.Empty;\r\n    string startCol = string.Empty;\r\n    string currCol = string.Empty;\r\n    string endCol = string.Empty;\r\n    string endCell = string.Empty;\r\n    DocumentFormat.OpenXml.Spreadsheet.Row[] rows = sheetData.Elements<DocumentFormat.OpenXml.Spreadsheet.Row>().ToArray();\r\n    string[] srange = null;\r\n\r\n    //bug236\r\n    range = range.Replace(\"$\", String.Empty);\r\n\r\n    if (range != string.Empty)\r\n    {\r\n        srange = range.Split(':');\r\n\r\n        if (range.Contains(':'))\r\n        {\r\n            startCell = srange[0];\r\n            endCell = srange[1];\r\n        }\r\n        else\r\n        {\r\n            startCell = srange[0];\r\n            endCell = srange[0];\r\n        }\r\n\r\n        for (int x = 0; x < rows.Count(); x++)\r\n        {\r\n            foreach (DocumentFormat.OpenXml.Spreadsheet.Cell c in rows[x].Elements<DocumentFormat.OpenXml.Spreadsheet.Cell>().ToArray())\r\n            {\r\n                if (Compare(c.CellReference, startCell) >= 0 && Compare(c.CellReference, endCell) <= 0)\r\n                {\r\n                    if (c.CellValue != null)\r\n                    {\r\n                        c.CellValue.Remove();\r\n                    }\r\n                    c.CellValue = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    worksheet.Save();\r\n}\r\nstatic int Compare(string x, string y)\r\n{\r\n    int returnValue = -1;\r\n    string startX = string.Empty, startY = string.Empty, colX = string.Empty,\r\n        colY = string.Empty, rowX = string.Empty, rowY = string.Empty;\r\n    int rowXNumeric = -1, rowYNumeric = -1;\r\n\r\n    if (string.Equals(x, y))\r\n    {\r\n        returnValue = 0;\r\n    }\r\n    else\r\n    {\r\n\r\n        if ((x.IndexOf(\":\") < 0) || (y.IndexOf(\":\") < 0))\r\n        {\r\n            startX = x;\r\n            startY = y;\r\n        }\r\n        else\r\n        {\r\n            startX = x.Substring(0, x.IndexOf(\":\"));\r\n            startY = y.Substring(0, y.IndexOf(\":\"));\r\n        }\r\n\r\n        foreach (char c in startX)\r\n        {\r\n            if (!char.IsNumber(c))\r\n            {\r\n                colX += c;\r\n            }\r\n            else\r\n            {\r\n                rowX += c;\r\n            }\r\n        }\r\n\r\n        foreach (char c in startY)\r\n        {\r\n            if (!char.IsNumber(c))\r\n            {\r\n                colY += c;\r\n            }\r\n            else\r\n            {\r\n                rowY += c;\r\n            }\r\n        }\r\n\r\n        if (colX.Length != colY.Length)\r\n        {\r\n            returnValue = colX.Length - colY.Length;\r\n        }\r\n        else\r\n        {\r\n            returnValue = string.Compare(colX, colY, true);\r\n\r\n            //bug244 only geography showed since cleared wrong area\r\n            if (returnValue >= 0)\r\n            {\r\n                rowXNumeric = int.Parse(rowX);\r\n                rowYNumeric = int.Parse(rowY);\r\n                returnValue = rowXNumeric - rowYNumeric >= 0 ? 1 : -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    return returnValue;\r\n}\r\nstatic void WriteSheetDataOffset(DocumentFormat.OpenXml.Spreadsheet.Worksheet worksheet, List<object[]> data, string startPosition)\r\n{\r\n    SheetData sheetData = worksheet.WorksheetPart.Worksheet.GetFirstChild<SheetData>();\r\n\r\n    List<DocumentFormat.OpenXml.Spreadsheet.Cell> existingCells = new List<DocumentFormat.OpenXml.Spreadsheet.Cell>();\r\n    string cellCol = string.Empty;\r\n    DocumentFormat.OpenXml.Spreadsheet.Row prevRow = null;\r\n    DocumentFormat.OpenXml.Spreadsheet.Row rowBuilder = null;\r\n    DocumentFormat.OpenXml.Spreadsheet.Cell cell = null;\r\n    DocumentFormat.OpenXml.Spreadsheet.Cell nextCell = null;\r\n    object val = null;\r\n    int startColumn = 0, startRow = 0;\r\n    StringBuilder columnSB = new(), rowSB = new();\r\n\r\n    //bug236\r\n    startPosition = startPosition.Replace(\"$\", String.Empty);\r\n\r\n    foreach (char c in startPosition)\r\n    {\r\n        if (char.IsNumber(c))\r\n        {\r\n            rowSB.Append(c);\r\n        }\r\n        else\r\n        {\r\n            columnSB.Append(c);\r\n        }\r\n    }\r\n\r\n    startRow = Convert.ToInt32(rowSB.ToString().Trim());\r\n    startColumn = ConvertColumnStringToNumeric(columnSB.ToString());\r\n\r\n    for (int i = 0; i <= data.Count - 1; i++)\r\n    {\r\n        if (sheetData.Elements<DocumentFormat.OpenXml.Spreadsheet.Row>().Count(r => r.RowIndex == i + startRow) != 0)\r\n        {\r\n            rowBuilder = sheetData.Elements<DocumentFormat.OpenXml.Spreadsheet.Row>().First(r => r.RowIndex == i + startRow);\r\n        }\r\n        else\r\n        {\r\n            if (rowBuilder != null)\r\n            {\r\n                prevRow = rowBuilder;\r\n            }\r\n\r\n            rowBuilder = new DocumentFormat.OpenXml.Spreadsheet.Row { RowIndex = (uint)(i + startRow) };\r\n\r\n            if (prevRow != null)\r\n            {\r\n                sheetData.InsertAfter(rowBuilder, prevRow); // Needs to be an insert after prior row\r\n            }\r\n            else\r\n            {\r\n                sheetData.Append(rowBuilder);\r\n            }\r\n        }\r\n\r\n        existingCells = rowBuilder.Elements<DocumentFormat.OpenXml.Spreadsheet.Cell>().ToList();\r\n\r\n        for (int j = 0; j <= data[i].GetUpperBound(0); j++)\r\n        {\r\n            if (existingCells != null && existingCells.Count > 0)\r\n            {\r\n                DocumentFormat.OpenXml.Spreadsheet.Cell existingCell = existingCells.Find(\r\n                    c => string.Compare(c.CellReference, GenerateRange(startColumn + j, startRow + i), true) == 0);\r\n\r\n                if (existingCell != null)\r\n                {\r\n                    if (data[i][j] is double || data[i][j] == null || data[i][j] == DBNull.Value)\r\n                    {\r\n                        existingCell.DataType = CellValues.Number;\r\n                        val = data[i].GetValue(j);\r\n\r\n                        existingCell.CellValue = val == null ? null : new DocumentFormat.OpenXml.Spreadsheet.CellValue(val.ToString());\r\n                    }\r\n                    else\r\n                    {\r\n                        existingCell.DataType = CellValues.String;\r\n                        existingCell.CellValue = new DocumentFormat.OpenXml.Spreadsheet.CellValue(data[i].GetValue(j) == null ? string.Empty : data[i].GetValue(j).ToString());\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if (data[i][j] is double || data[i][j] == null || data[i][j] == DBNull.Value)\r\n                    {\r\n                        cell = new DocumentFormat.OpenXml.Spreadsheet.Cell\r\n                        {\r\n                            CellReference = GenerateRange(startColumn + j, startRow + i),\r\n                            DataType = CellValues.Number,\r\n                            CellValue = data[i].GetValue(j) == null ? null : new DocumentFormat.OpenXml.Spreadsheet.CellValue(data[i].GetValue(j).ToString()),\r\n                            StyleIndex = 0,\r\n                        };\r\n                    }\r\n                    else\r\n                    {\r\n                        cell = new DocumentFormat.OpenXml.Spreadsheet.Cell\r\n                        {\r\n                            CellReference = GenerateRange(startColumn + j, startRow + i),\r\n                            DataType = CellValues.String,\r\n                            CellValue = new DocumentFormat.OpenXml.Spreadsheet.CellValue(data[i].GetValue(j) == null ? string.Empty : data[i].GetValue(j).ToString()),\r\n                        };\r\n                    }\r\n\r\n                    bool insert = false;\r\n\r\n                    foreach (DocumentFormat.OpenXml.Spreadsheet.Cell c in existingCells)\r\n                    {\r\n                        if (GetAsciiValueofText(cell.CellReference) < GetAsciiValueofText(c.CellReference))\r\n                        {\r\n                            insert = true;\r\n                            nextCell = c;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (insert)\r\n                    {\r\n                        rowBuilder.InsertBefore(cell, nextCell);\r\n                    }\r\n                    else\r\n                    {\r\n                        rowBuilder.Append(cell);\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (data[i][j] is double || data[i][j] == null || data[i][j] == DBNull.Value)\r\n                {\r\n                    cell = new DocumentFormat.OpenXml.Spreadsheet.Cell\r\n                    {\r\n                        CellReference = GenerateRange(startColumn + j, startRow + i),\r\n                        DataType = CellValues.Number,\r\n                        CellValue = data[i].GetValue(j) == null ? null : new DocumentFormat.OpenXml.Spreadsheet.CellValue(data[i].GetValue(j).ToString()),\r\n                        StyleIndex = 0,\r\n                    };\r\n                }\r\n                else\r\n                {\r\n                    cell = new DocumentFormat.OpenXml.Spreadsheet.Cell\r\n                    {\r\n                        CellReference = GenerateRange(startColumn + j, startRow + i),\r\n                        DataType = CellValues.String,\r\n                        CellValue = new DocumentFormat.OpenXml.Spreadsheet.CellValue(data[i].GetValue(j) == null ? string.Empty : data[i].GetValue(j).ToString()),\r\n                    };\r\n                }\r\n                rowBuilder.Append(cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    worksheet.Save();\r\n}\r\nstatic int ConvertColumnStringToNumeric(string columnString)\r\n{\r\n    int columnValue = 0, power = 0, mantissa = 0, exponent = 0;\r\n    //bug236\r\n    columnString = columnString.Replace(\"$\", String.Empty);\r\n\r\n    power = columnString.Length - 1;\r\n\r\n    foreach (char c in columnString)\r\n    {\r\n        mantissa = (int)Math.Pow(26.0d, power);\r\n        exponent = c - 64;\r\n        columnValue += mantissa * exponent;\r\n        power--;\r\n    }\r\n\r\n    return columnValue;\r\n}\r\nstatic int GetAsciiValueofText(string text)\r\n{\r\n    int i = 0;\r\n    foreach (char c in text)\r\n    {\r\n        i = i + c;\r\n    }\r\n    return i;\r\n}\r\n#endregion\r\n```"},{"Id":"36147668315","Type":"IssuesEvent","CreatedAt":"2024-03-01T03:02:27","Actor":"james-d-hasselman","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1683","RelatedDescription":"Opened issue \"SpreadsheetDocument Class documentation contains non-existent Close method\" (#1683) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nThe documentation for the SpreadsheetDocument Class contains a Close method from 2.X which was removed in 3.X. Documentation for the final version of 2.X states that the method will be removed in later releases. Both the 3.0.0 and 3.0.1 documentation need to be updated.\r\n\r\n**To Reproduce**\r\nGo [here](https://learn.microsoft.com/en-us/dotnet/api/documentformat.openxml.packaging.spreadsheetdocument?view=openxml-3.0.1) and search under methods for Close.\r\n\r\n**Observed behavior**\r\nI get the build error `'SpreadsheetDocument' does not contain a definition for Close`\r\n\r\n**Expected behavior**\r\nThe documentation should be updated to reflect the removal of the Close method in release 3.0.0.\r\n\r\n**Desktop (please complete the following information):**\r\n - DocumentFormat.OpenXml Version: 3.0.1"},{"Id":"36101250446","Type":"PullRequestEvent","CreatedAt":"2024-02-28T19:41:25","Actor":"dependabot[bot]","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1682","RelatedDescription":"Opened pull request \"Bump NuGet.Resolver from 6.8.0 to 6.9.1\" (#1682) at dotnet/Open-XML-SDK","RelatedBody":"Bumps [NuGet.Resolver](https://github.com/NuGet/NuGet.Client) from 6.8.0 to 6.9.1.\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/NuGet/NuGet.Client/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=NuGet.Resolver&package-manager=nuget&previous-version=6.8.0&new-version=6.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>"},{"Id":"36089456956","Type":"IssuesEvent","CreatedAt":"2024-02-28T13:49:04","Actor":"BenjaminLopVic","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1681","RelatedDescription":"Opened issue \"Bug with corrupted Open XML documents\" (#1681) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nOpening a corrupted document lock the file.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Simulate a corrupted file (simply create a txt file with content in it and change the extension to .docx)\r\n2. Try opening the file with WordProcessingDocument.Open(...)\r\n\r\n**Observed behavior**\r\nThe method WordProcessingDocument.Open(...) throws an exception, stating that the file is corrupted but keeps the file locked to. This can be verified using tools like \"File Locksmith.\"\r\n\r\n**Expected behavior**\r\nContinue throwing the exception but release the file before.\r\n\r\n**Desktop**\r\n - OS: Windows 11\r\n - .NET Target: .NET Framework 4.8\r\n - DocumentFormat.OpenXml Version: 3.0.1\r\n\r\nThanks."},{"Id":"36079761326","Type":"IssuesEvent","CreatedAt":"2024-02-28T08:58:51","Actor":"Tsarass","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1680","RelatedDescription":"Opened issue \"Charts directory appears under the drawings directory when packaged\" (#1680) at dotnet/Open-XML-SDK","RelatedBody":"**Description**\r\nWe are creating spreadsheets using OpenXML with charts. The resulting xlsx files contain the 'charts' directory as a subdirectory of the 'drawings' directory instead of being at the same level as 'drawings' and 'worksheets' directories (under 'xl'). We could not find a workaround in the API to get the expected result.\r\n\r\nThe xlsx files output by other applications (Excel, LibreOffice Calc etc) output the 'charts' as a sibling directory of 'drawings' instead.\r\n\r\nHere is a tree view of the packaged structure of the xlsx files we are getting with the minimum repro:\r\n![image](https://github.com/dotnet/Open-XML-SDK/assets/44903696/d72f199f-278d-406d-8901-3e1489f2fe1e)\r\n\r\nHere is the expected output:\r\n![image](https://github.com/dotnet/Open-XML-SDK/assets/44903696/bd263d4d-3dfa-46e3-89aa-d09d5bc6c11a)\r\n\r\n**To Reproduce**\r\n```\r\nSpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Create(\"charts-test.xlsx\", SpreadsheetDocumentType.Workbook);\r\nWorkbookPart workbookPart = spreadsheetDocument.AddWorkbookPart();\r\nworkbookPart.Workbook = new Workbook();\r\nWorksheetPart worksheetPart = workbookPart.AddNewPart<WorksheetPart>();\r\nworksheetPart.Worksheet = new Worksheet(new SheetData());\r\n\r\nSheets sheets = workbookPart.Workbook.AppendChild(new Sheets());\r\nSheet sheet = new Sheet() { Id = workbookPart.GetIdOfPart(worksheetPart), SheetId = 1, Name = \"mySheet\" };\r\nsheets.Append(sheet);\r\n\r\nDrawingsPart drawingsPart = worksheetPart.AddNewPart<DrawingsPart>();\r\ndrawingsPart.AddNewPart<ChartPart>();\r\n\r\nworkbookPart.Workbook.Save();\r\nspreadsheetDocument.Dispose();\r\n```\r\n\r\n**Desktop:**\r\n - OS: Windows 11\r\n - Office version 16.0.17231.29236\r\n - .NET Target: NET Framework 4.7.2\r\n - DocumentFormat.OpenXml Version: 3.0.0\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-03-05T03:30:18.5280995Z","RunDurationInMilliseconds":640}