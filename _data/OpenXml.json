{"Data":{"Sdk":{"Events":[{"Id":"13577857525","Type":"PullRequestEvent","CreatedAt":"2020-09-20T04:08:10","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/810","RelatedDescription":"Merged pull request \"Update debug view of LookupItem\" (#810) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"13577190405","Type":"PullRequestEvent","CreatedAt":"2020-09-19T23:38:03","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/810","RelatedDescription":"Opened pull request \"Update debug view of LookupItem\" (#810) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"13558772308","Type":"PullRequestEvent","CreatedAt":"2020-09-17T21:33:50","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/809","RelatedDescription":"Opened pull request \"Parse exponent for int/uint if present\" (#809) at OfficeDev/Open-XML-SDK","RelatedBody":"Fixes #806"},{"Id":"13558248674","Type":"PullRequestEvent","CreatedAt":"2020-09-17T20:38:35","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/808","RelatedDescription":"Merged pull request \"Clean up OpenXml[Part]Writer\" (#808) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"13557847000","Type":"PullRequestEvent","CreatedAt":"2020-09-17T19:59:22","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/808","RelatedDescription":"Opened pull request \"Clean up OpenXml[Part]Writer\" (#808) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"13553942285","Type":"PullRequestEvent","CreatedAt":"2020-09-17T14:27:04","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/804","RelatedDescription":"Merged pull request \"Provide IXmlLineInfo from OpenXmlReader when available\" (#804) at OfficeDev/Open-XML-SDK","RelatedBody":"Provides ability to track the line number and position while reading a part. This is only available on implementations that operate on text itself; implementations such as the `OpenXmlDomReader` operate on nodes which don't have line information anymore.\r\n\r\nFixes #803 "},{"Id":"13553942196","Type":"IssuesEvent","CreatedAt":"2020-09-17T14:27:03","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/803","RelatedDescription":"Closed issue \"Reader depth or how to get current node's real depth.\" (#803) at OfficeDev/Open-XML-SDK","RelatedBody":"Is there any approach to get `depth`, `lineNumber` or `position` of current node in a real XML file?\r\nAs it's done using native `XmlTextReader`: https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmltextreader.lineposition?view=netcore-3.1\r\n```csharp\r\nwhile (reader.Read()){\r\n       switch (reader.NodeType){\r\n         case XmlNodeType.Element:\r\n           Console.Write(\"{0} {1},{2}  \", reader.Depth, reader.LineNumber, reader.LinePosition);\r\n           Console.WriteLine(\"<{0}>\", reader.Name);\r\n           break;\r\n       }\r\n    }\r\n```\r\n\r\nI have tried to get `Depth` of OpenXMLReader, but it seems that it is returning depth of element in some stack which is not real depth of current xml node.\r\n\r\nIt would be nice to have such functionality.\r\n"},{"Id":"13551430710","Type":"IssuesEvent","CreatedAt":"2020-09-17T11:05:40","Actor":"Viktor-36","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/807","RelatedDescription":"Reopened issue \"OutOfMemoryException using SAX in .NET Core\" (#807) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nI was using ClosedXML to create large excel files (100k rows with 63 colums) and I faced issue with OutOfMemoryException. I found some examples of OpenXML using SAX, so I tried to switch to OpenXML, but it didn't help me. I tried to remove all my code (reading from DB, etc.) to try if that works, but I still get OutOfMemoryException.\r\n\r\nMy code is based on [http://polymathprogrammer.com/2012/08/06/how-to-properly-use-openxmlwriter-to-write-large-excel-files/](url)\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Core 3.1\r\n- DocumentFormat.OpenXml Version: 2.11.3\r\n\r\n**EDIT:** Same code is working fine in .NET Framework 4.7.2 with same DocumentFormat.OpenXml version.\r\n\r\n**Repro**\r\nThis is simple code that I use at the moment. I am testing with RAM limited to 500 MB (testing purpose). I don't think that this code can consume so much RAM.\r\n\r\n```csharp\r\nusing (SpreadsheetDocument document = SpreadsheetDocument.Create(filePath, SpreadsheetDocumentType.Workbook))\r\n{\r\n    document.AddWorkbookPart();\r\n\r\n    WorksheetPart wsp = document.WorkbookPart.AddNewPart<WorksheetPart>();\r\n\r\n    using (OpenXmlWriter writer = OpenXmlWriter.Create(wsp))\r\n    {\r\n        List<OpenXmlAttribute> oxa;\r\n        writer.WriteStartElement(new Worksheet());\r\n        writer.WriteStartElement(new SheetData());\r\n\r\n        for (int i = 0; i < 100000; i++)\r\n        {\r\n            oxa = new List<OpenXmlAttribute>();\r\n            oxa.Add(new OpenXmlAttribute(\"r\", null, i.ToString()));\r\n            writer.WriteStartElement(new Row(), oxa);\r\n\r\n            for (int j = 0; j < 40; j++)\r\n            {\r\n                oxa = new List<OpenXmlAttribute>();\r\n                oxa.Add(new OpenXmlAttribute(\"t\", null, \"str\"));\r\n                writer.WriteStartElement(new Cell(), oxa);\r\n                writer.WriteElement(new CellValue(\"test\"));\r\n                writer.WriteEndElement();\r\n            }\r\n\r\n            writer.WriteEndElement();\r\n        }\r\n\r\n        writer.WriteEndElement(); // end of sheetdata\r\n        writer.WriteEndElement(); //end of worksheet\r\n    }\r\n\r\n    using (OpenXmlWriter writer = OpenXmlWriter.Create(document.WorkbookPart))\r\n    {\r\n        writer.WriteStartElement(new Workbook());\r\n        writer.WriteStartElement(new Sheets());\r\n\r\n        writer.WriteElement(new Sheet() { Id = document.WorkbookPart.GetIdOfPart(wsp), SheetId = 1, Name = \"Test\" });\r\n\r\n        writer.WriteEndElement();\r\n        writer.WriteEndElement();\r\n    }\r\n}\r\n``` \r\n\r\n**Observed**\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.IO.MemoryStream.set_Capacity(Int32 value)\r\n   at System.IO.MemoryStream.EnsureCapacity(Int32 value)\r\n   at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.Xml.XmlUtf8RawTextWriter.FlushBuffer()\r\n   at System.Xml.XmlUtf8RawTextWriter.RawText(Char* pSrcBegin, Char* pSrcEnd)\r\n   at System.Xml.XmlUtf8RawTextWriter.RawText(String s)\r\n   at System.Xml.XmlUtf8RawTextWriter.WriteEndElement(String prefix, String localName, String ns)\r\n   at System.Xml.XmlWellFormedWriter.WriteEndElement()\r\n   at DocumentFormat.OpenXml.OpenXmlPartWriter.WriteEndElement()\r\n````\r\n\r\n**Expected**\r\n\r\nExcel file in filePath with 100k rows and 40 columns with string \"test\" in all cells.\r\n"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2020-09-25T05:30:41.80297Z","RunDurationInMilliseconds":800}