{"Data":{"Sdk":{"Events":[{"Id":"41303111321","Type":"PullRequestEvent","CreatedAt":"2024-08-24T07:07:57","Actor":"AlissaSabre","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1776","RelatedDescription":"Opened pull request \"A fix to the use of <remark> tags rather than <remarks> in the documentation comments\" (#1776) at dotnet/Open-XML-SDK","RelatedBody":"This PR fixes #1775\r\n- by fixing the code generator (commit a7c4f6db5dfbcaf50d4722272afab50c8aa45430), and\r\n- by fixing two non-generated source files (commit f0d1c08bc540428d50474df167c00de611bd245d).\r\n\r\nThe changes to the generated source files (i.e., those in `generated/`) are *not* included in this PR, because they will be re-generated by the updated code generator when building. (You will need to commit those changes to the repository by yourself...)\r\n\r\nNote that, after applying this PR to your working tree, you *may* need to **restart Windows** and run `dotnet clean`, before running `dotnet build`."},{"Id":"41302882442","Type":"IssuesEvent","CreatedAt":"2024-08-24T06:37:25","Actor":"AlissaSabre","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1775","RelatedDescription":"Opened issue \"Some source files use <remark> tags rather than <remarks> in their documentation comments\" (#1775) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nSome C# source files in this repository, mostly those generated from the schema and put in `generated/`, use `<remark>` tags rather than the usual `<remarks>` tags in their documentation comments. As a result, some development tools that use the documentation comments or the XML documentation file fail to utilize the remark information.\r\n\r\n**Screenshots**\r\nvscode showing the information for `DocumentFormat.OpenXml.Wordprocessing.ParagraphPropertiesChange` class in the file `generated\\DocumentFormat.OpenXml\\DocumentFormat.OpenXml.Generator\\DocumentFormat.OpenXml.Generator.OpenXmlGenerator\\schemas_openxmlformats_org_wordprocessingml_2006_main.g.cs`. (Red lines are added manually.)\r\n\r\n![before fix](https://github.com/user-attachments/assets/25347bb8-d5cf-4fc0-8e0c-486b5c182cb7)\r\n\r\n**To Reproduce**\r\n1. Start vscode and open the folder for the repository.\r\n2. On the Explorer pain, locate the file `generated\\DocumentFormat.OpenXml\\DocumentFormat.OpenXml.Generator\\DocumentFormat.OpenXml.Generator.OpenXmlGenerator\\schemas_openxmlformats_org_wordprocessingml_2006_main.g.cs` and click it to open it.\r\n3. Scroll down to find the (partial) class definition for `ParagraphPropertiesChange`.\r\n4. Observe the documentation comment above it, then hover your mouse cursor over the identifier.\r\n\r\n**Observed behavior**\r\n1. The documentation comment uses `<remark>` and `</remark>` tag pair.\r\n2. The popup shows only the summary part of the documentation comment.\r\n\r\n**Expected behavior**\r\n1. The documentation comment uses `<remarks>` and `</remarks>` tag pair.\r\n2. The popup shows both summary and remark parts.\r\n\r\n![after fix](https://github.com/user-attachments/assets/1dd2eed7-53b8-4942-a8bf-f75c87f992b2)\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows 11\r\n - Office version: version 2407 build 16.0.17830.20056\r\n - .NET Target: .NET Framework 4.8.1\r\n - DocumentFormat.OpenXml Version: 3.1.0\r\n\r\n**Additional notes**\r\nThe major cause of this issue is a bug in the schema to C# code generator. However, there are a few files outside `generated/` that use `<remark>`. They are:\r\n- `src/DocumentFormat.OpenXml/Schema/Presentation/CommentPropertiesExtension.cs` and\r\n- `src/DocumentFormat.OpenXml/Schema/Wordprocessing/CustomXmlElement.cs`."},{"Id":"41218396757","Type":"PullRequestEvent","CreatedAt":"2024-08-21T15:53:28","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1774","RelatedDescription":"Opened pull request \"Add open xml editor extension for Visual Studio Project\" (#1774) at dotnet/Open-XML-SDK","RelatedBody":"This moves the archived repo for the Open Xml Editor extension for Visual Studio from [Open-XML-Package-Editor-Power-Tool-for-Visual-Studio](https://github.com/OfficeDev/Open-XML-Package-Editor-Power-Tool-for-Visual-Studio) to the Open-XML-SDK repo."},{"Id":"41186089232","Type":"IssuesEvent","CreatedAt":"2024-08-20T18:41:22","Actor":"AlfredHellstern","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/807","RelatedDescription":"Closed issue \"Large parts cannot be written on .NET Core due to OutOfMemoryException\" (#807) at dotnet/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nI was using ClosedXML to create large excel files (100k rows with 63 colums) and I faced issue with OutOfMemoryException. I found some examples of OpenXML using SAX, so I tried to switch to OpenXML, but it didn't help me. I tried to remove all my code (reading from DB, etc.) to try if that works, but I still get OutOfMemoryException.\r\n\r\nMy code is based on [http://polymathprogrammer.com/2012/08/06/how-to-properly-use-openxmlwriter-to-write-large-excel-files/](url)\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Core 3.1\r\n- DocumentFormat.OpenXml Version: 2.11.3\r\n\r\n**EDIT:** Same code is working fine in .NET Framework 4.7.2 with same DocumentFormat.OpenXml version.\r\n\r\n**Repro**\r\nThis is simple code that I use at the moment. I am testing with RAM limited to 500 MB (testing purpose). I don't think that this code can consume so much RAM.\r\n\r\n```csharp\r\nusing (SpreadsheetDocument document = SpreadsheetDocument.Create(filePath, SpreadsheetDocumentType.Workbook))\r\n{\r\n    document.AddWorkbookPart();\r\n\r\n    WorksheetPart wsp = document.WorkbookPart.AddNewPart<WorksheetPart>();\r\n\r\n    using (OpenXmlWriter writer = OpenXmlWriter.Create(wsp))\r\n    {\r\n        List<OpenXmlAttribute> oxa;\r\n        writer.WriteStartElement(new Worksheet());\r\n        writer.WriteStartElement(new SheetData());\r\n\r\n        for (int i = 0; i < 100000; i++)\r\n        {\r\n            oxa = new List<OpenXmlAttribute>();\r\n            oxa.Add(new OpenXmlAttribute(\"r\", null, i.ToString()));\r\n            writer.WriteStartElement(new Row(), oxa);\r\n\r\n            for (int j = 0; j < 40; j++)\r\n            {\r\n                oxa = new List<OpenXmlAttribute>();\r\n                oxa.Add(new OpenXmlAttribute(\"t\", null, \"str\"));\r\n                writer.WriteStartElement(new Cell(), oxa);\r\n                writer.WriteElement(new CellValue(\"test\"));\r\n                writer.WriteEndElement();\r\n            }\r\n\r\n            writer.WriteEndElement();\r\n        }\r\n\r\n        writer.WriteEndElement(); // end of sheetdata\r\n        writer.WriteEndElement(); //end of worksheet\r\n    }\r\n\r\n    using (OpenXmlWriter writer = OpenXmlWriter.Create(document.WorkbookPart))\r\n    {\r\n        writer.WriteStartElement(new Workbook());\r\n        writer.WriteStartElement(new Sheets());\r\n\r\n        writer.WriteElement(new Sheet() { Id = document.WorkbookPart.GetIdOfPart(wsp), SheetId = 1, Name = \"Test\" });\r\n\r\n        writer.WriteEndElement();\r\n        writer.WriteEndElement();\r\n    }\r\n}\r\n``` \r\n\r\n**Observed**\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.IO.MemoryStream.set_Capacity(Int32 value)\r\n   at System.IO.MemoryStream.EnsureCapacity(Int32 value)\r\n   at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.Xml.XmlUtf8RawTextWriter.FlushBuffer()\r\n   at System.Xml.XmlUtf8RawTextWriter.RawText(Char* pSrcBegin, Char* pSrcEnd)\r\n   at System.Xml.XmlUtf8RawTextWriter.RawText(String s)\r\n   at System.Xml.XmlUtf8RawTextWriter.WriteEndElement(String prefix, String localName, String ns)\r\n   at System.Xml.XmlWellFormedWriter.WriteEndElement()\r\n   at DocumentFormat.OpenXml.OpenXmlPartWriter.WriteEndElement()\r\n````\r\n\r\n**Expected**\r\n\r\nExcel file in filePath with 100k rows and 40 columns with string \"test\" in all cells.\r\n"},{"Id":"41165607734","Type":"PullRequestEvent","CreatedAt":"2024-08-20T08:20:57","Actor":"waydalee","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1773","RelatedDescription":"Opened pull request \"优化路径为NULL的资源判断\" (#1773) at dotnet/Open-XML-SDK","RelatedBody":""}],"ResultType":"GitHubEvent"}},"RunOn":"2024-08-25T03:30:20.1763758Z","RunDurationInMilliseconds":697}