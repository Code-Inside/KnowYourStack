{"Data":{"Sdk":{"Events":[{"Id":"14362653707","Type":"PullRequestEvent","CreatedAt":"2020-11-30T20:10:50","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/818","RelatedDescription":null,"RelatedBody":"The current version of your code:\r\n\r\nIt sets _rawOuterXml to string.Empty if value is null, but instead of leaving the setter immediately, it resets the field to null at the end of the setter\r\n\r\nThe changes I made should resolve the issue.\r\n\r\nThanks."},{"Id":"14362653432","Type":"PullRequestEvent","CreatedAt":"2020-11-30T20:10:48","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/818","RelatedDescription":"Closed pull request \"Fixed NullReferenceException in OpenXmlElement RawOuterXml field\" (#818) at OfficeDev/Open-XML-SDK","RelatedBody":"The current version of your code:\r\n\r\nIt sets _rawOuterXml to string.Empty if value is null, but instead of leaving the setter immediately, it resets the field to null at the end of the setter\r\n\r\nThe changes I made should resolve the issue.\r\n\r\nThanks."},{"Id":"14362640755","Type":"PullRequestEvent","CreatedAt":"2020-11-30T20:09:33","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/822","RelatedDescription":null,"RelatedBody":"Fixes #815 "},{"Id":"14362640394","Type":"PullRequestEvent","CreatedAt":"2020-11-30T20:09:31","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/822","RelatedDescription":"Closed pull request \"Allow saving of svg content to FlatOPC\" (#822) at OfficeDev/Open-XML-SDK","RelatedBody":"Fixes #815 "},{"Id":"14362582019","Type":"PullRequestEvent","CreatedAt":"2020-11-30T20:03:39","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/822","RelatedDescription":null,"RelatedBody":"Fixes #815 "},{"Id":"14362573250","Type":"PullRequestEvent","CreatedAt":"2020-11-30T20:02:47","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/822","RelatedDescription":"Closed pull request \"Allow saving of svg content to FlatOPC\" (#822) at OfficeDev/Open-XML-SDK","RelatedBody":"Fixes #815 "},{"Id":"14361693045","Type":"PullRequestEvent","CreatedAt":"2020-11-30T18:39:08","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/822","RelatedDescription":"Opened pull request \"Allow saving of svg content to FlatOPC\" (#822) at OfficeDev/Open-XML-SDK","RelatedBody":"Fixes #815 "},{"Id":"14340610511","Type":"IssuesEvent","CreatedAt":"2020-11-27T19:18:51","Actor":"no-response[bot]","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/806","RelatedDescription":"Closed issue \"System.FormatException on Row.RowIndex.Value once row index hits one million\" (#806) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nI need to import data from an exceptionally large Excel worksheet (~ 1 million rows),\r\nand I'm using the `OpenXmlReader` class to read the sheet row by row.\r\nHowever, when calling the `Row.RowIndex.Value` method for the row with index 1 million,\r\nI'm getting a `System.FormatException`.\r\n\r\n**Information**\r\n\r\n- .NET Target:  .NET Core 3.1\r\n- DocumentFormat.OpenXml Version: 2.11.3\r\n- Partial stack trace:\r\n\r\n_System.FormatException: Input string was not in a correct format.\r\n   at System.Number.ThrowOverflowOrFormatException(ParsingStatus status, TypeCode type)\r\n   at System.Number.ParseUInt32(ReadOnlySpan\\`1 value, NumberStyles styles, NumberFormatInfo info)\r\n   at DocumentFormat.OpenXml.UInt32Value.Parse(String input)\r\n   at DocumentFormat.OpenXml.OpenXmlSimpleValue`1.get_Value()_\r\n\r\n**Repro**\r\n\r\n```csharp\r\nusing var reader = OpenXmlReader.Create(worksheetPart);\r\nwhile (reader.Read())\r\n{\r\n    if (reader.ElementType == typeof(Row))\r\n    {\r\n        var row = (Row)reader.LoadCurrentElement();\r\n        uint rowIndex = row.RowIndex.Value;\r\n    }\r\n}\r\n``` \r\n\r\n```xml\r\n<row r=\"999999\" s=\"1\" customFormat=\"1\" ht=\"19.7321\" customHeight=\"1\">\r\n    <c r=\"A999999\" s=\"3\" t=\"s\">\r\n        <v>3231031</v>\r\n    </c>\r\n    <c r=\"B999999\" s=\"3\" t=\"s\">\r\n        <v>18938</v>\r\n    </c>\r\n</row>\r\n<row r=\"1e6\" s=\"1\" customFormat=\"1\" ht=\"19.7321\" customHeight=\"1\">\r\n    <c r=\"A1000000\" s=\"3\" t=\"s\">\r\n        <v>3231032</v>\r\n    </c>\r\n    <c r=\"B1000000\" s=\"3\" t=\"s\">\r\n        <v>440271</v>\r\n    </c>\r\n</row>\r\n<row r=\"1.000001e6\" s=\"1\" customFormat=\"1\" ht=\"19.7321\" customHeight=\"1\">\r\n    <c r=\"A1000001\" s=\"3\" t=\"s\">\r\n        <v>3231033</v>\r\n    </c>\r\n    <c r=\"B1000001\" s=\"3\" t=\"s\">\r\n        <v>3231034</v>\r\n    </c>\r\n</row>\r\n```\r\n\r\n**Observed**\r\n\r\nThe value that's causing the exception is **1e6**.\r\nWhat's interesting is that once the row index reaches 1,000,000, the number format of the indexes changes from base 10 to exponential notation.\r\nWhat's even more curious is that this only happens for rows, because—as you can notice from the example—the values of the cell references are still base 10, even for values larger than 1,000,000.\r\n\r\n**Expected**\r\n\r\nI have absolutely no idea why the row indexes change format at the 1,000,000 mark, but I would expect the SDK to be able to work with them, nevertheless.\r\n"},{"Id":"14337213627","Type":"IssuesEvent","CreatedAt":"2020-11-27T12:46:07","Actor":"arcusmaximus","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/821","RelatedDescription":"Opened issue \"No more (public) way of retrieving schema metadata\" (#821) at OfficeDev/Open-XML-SDK","RelatedBody":"Pull request #532 saw the removal of the \"unused\" SchemaAttrAttribute. However, we have software at our company that very much depends on this attribute to determine XML namespaces and attribute names based on .NET properties. (An example would be finding the \"anchorx\" XML attribute name for the TextWrap.AnchorX .NET property.)\r\n\r\nI looked around for alternative ways of retrieving this information in the current version of the library, but came up empty.\r\n* The pull request refers to OpenXmlElement.RawAttributes, but this property appears to no longer exist. There is a RawState property, but along with the Metadata property, it's not accessible from outside the library.\r\n* Similarly, the ElementMetadata and AttributeMetadata classes are internal, making it impossible to (say) call ElementMetadata.Create\\<TextWrap\\>() and read the results without resorting to reflection.\r\n* While OpenXmlElement does have a public way of retrieving OpenXmlAttributes, the OpenXmlAttribute struct doesn't contain the .NET property name.\r\n\r\nPlease add back a public way of retrieving schema metadata."},{"Id":"14334191566","Type":"IssuesEvent","CreatedAt":"2020-11-27T07:38:53","Actor":"SvyatoslavRazmyslov","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/820","RelatedDescription":"Opened issue \"Bug report from PVS-Studio\" (#820) at OfficeDev/Open-XML-SDK","RelatedBody":"Hello all.\r\n\r\nWe have found bugs using [PVS-Studio](https://www.viva64.com/en/pvs-studio/) tool (static code analyzer for C, C++, C#, and Java).\r\n\r\nHere is the report: [Analyzing the Code Quality of Microsoft's Open XML SDK](https://www.viva64.com/en/b/0777/)."}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2020-12-04T05:30:40.8657123Z","RunDurationInMilliseconds":743}