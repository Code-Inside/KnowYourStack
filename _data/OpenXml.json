{"Data":{"Sdk":{"Events":[{"Id":"27402513112","Type":"IssuesEvent","CreatedAt":"2023-03-01T02:30:33","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1349","RelatedDescription":"Opened issue \"Ensure a package only references the types *needed*\" (#1349) at dotnet/Open-XML-SDK","RelatedBody":"Currently, there are some generated helper features/methods that will unintentionally link types together that may never be needed. For example, parts that are only for spreadsheets will be referenced by a word document. This prevents the IL trimmer from removing unused code for purposes of trimming and AOT.\r\n\r\nSpecifically, we should:\r\n\r\n- [ ] Implement package specific implementations of `IRootElementFactory`\r\n- [ ] Ensure any element activation code is only linked via pathways where it will be used"},{"Id":"27402483810","Type":"IssuesEvent","CreatedAt":"2023-03-01T02:28:11","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1348","RelatedDescription":"Opened issue \"Enable better AOT support for SDK\" (#1348) at dotnet/Open-XML-SDK","RelatedBody":"This is an issue to track all related issues for AOT compatibility that we may try to do for v3.0. This is a continuation of issue #753.\r\n\r\nWork to investigate so far (which may overlap with some needs for #1313):\r\n\r\n- [ ] A single generated file is used for all the root part generation - this would need to be separated out to be per-document type\r\n- [ ] TypedOpenXmlPartReader was introduced in 2.19 as a type that provides the typed factories for use of OpenXmlPartReader with just a stream. This would need to be replaced with a doc specific one\r\n- [ ] https://github.com/dotnet/Open-XML-SDK/issues/1347"},{"Id":"27402446312","Type":"IssuesEvent","CreatedAt":"2023-03-01T02:25:19","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1347","RelatedDescription":"Opened issue \"Consider replacing enum usage with readonly structs\" (#1347) at dotnet/Open-XML-SDK","RelatedBody":"There are many enums that are generated for use with the SDK. In order to convert between a string representation and the enum value itself, we must use reflection to grab the `EnumStringAttribute` value. This ends up adding around 20% of the size of an AOT compiled assembly.\r\n\r\nI propose we switch the enums to readonly structs that can contain all the information:\r\n\r\n```csharp\r\npublic class EnumValue<T> : OpenXmlSimpleValue<T>\r\n    where T : struct, IEnumValue, IEnumValueFactory<T>\r\n{\r\n...\r\n}\r\n\r\npublic interface IEnumValue\r\n{\r\n    /// <summary>\r\n    /// Gets a value indicating whether the current value is valid.\r\n    /// </summary>\r\n    bool IsValid { get; }\r\n\r\n    /// <summary>\r\n    /// Gets the version this type was introduced in.\r\n    /// </summary>\r\n    FileFormatVersions Version { get; }\r\n\r\n    /// <summary>\r\n    /// Gets the value of the enum.\r\n    /// </summary>\r\n    string Value { get; }\r\n}\r\n\r\npublic interface IEnumValueFactory<T>\r\n    where T : IEnumValue\r\n{\r\n    /// <summary>\r\n    /// Creates an enum value with the supplied value.\r\n    /// </summary>\r\n    /// <param name=\"value\">Value of enum</param>\r\n    /// <returns>Constructed enum.</returns>\r\n    T Create(string value);\r\n}\r\n```\r\n\r\nAn example of the change would be:\r\n\r\n```cs\r\npublic enum ClipboardFormatValues\r\n{\r\n    /// <summary>\r\n    /// WMF.\r\n    /// <para>When the item is serialized out as xml, its value is \"PictOld\".</para>\r\n    /// </summary>\r\n    [EnumString(\"PictOld\")]\r\n    PictureOld,\r\n    /// <summary>\r\n    /// EMF.\r\n    /// <para>When the item is serialized out as xml, its value is \"Pict\".</para>\r\n    /// </summary>\r\n    [EnumString(\"Pict\")]\r\n    Picture,\r\n    /// <summary>\r\n    /// Bitmap.\r\n    /// <para>When the item is serialized out as xml, its value is \"Bitmap\".</para>\r\n    /// </summary>\r\n    [EnumString(\"Bitmap\")]\r\n    Bitmap,\r\n    /// <summary>\r\n    /// Printer Picture.\r\n    /// <para>When the item is serialized out as xml, its value is \"PictPrint\".</para>\r\n    /// </summary>\r\n    [EnumString(\"PictPrint\")]\r\n    PicturePrint,\r\n    /// <summary>\r\n    /// Screen Picture EMF.\r\n    /// <para>When the item is serialized out as xml, its value is \"PictScreen\".</para>\r\n    /// </summary>\r\n    [EnumString(\"PictScreen\")]\r\n    PictureScreen\r\n}\r\n```\r\n\r\nwould be \r\n\r\n```cs\r\npublic readonly record struct ClipboardFormatValues : IEnumValue, IEnumValueFactory<ClipboardFormatValues>\r\n{\r\n    private readonly string? _value;\r\n    /// <summary>\r\n    /// Creates a new ClipboardFormatValues enum instance\r\n    /// </summary>\r\n    public ClipboardFormatValues(string value) => _value = value;\r\n    ClipboardFormatValues IEnumValueFactory<ClipboardFormatValues>.Create(string name) => new(name);\r\n    bool IEnumValue.IsValid => InternalValue switch\r\n    {\r\n        \"PictOld\" => true,\r\n        \"Pict\" => true,\r\n        \"Bitmap\" => true,\r\n        \"PictPrint\" => true,\r\n        \"PictScreen\" => true,\r\n        _ => false\r\n    };\r\n    string IEnumValue.Value => InternalValue;\r\n    private string InternalValue => _value ?? \"PictOld\";\r\n    FileFormatVersions IEnumValue.Version => FileFormatVersions.Office2007;\r\n    /// <summary>\r\n    /// WMF.\r\n    /// <para>When the item is serialized out as xml, its value is \"PictOld\".</para>\r\n    /// </summary>\r\n    public static ClipboardFormatValues PictureOld => new(\"PictOld\");\r\n    /// <summary>\r\n    /// EMF.\r\n    /// <para>When the item is serialized out as xml, its value is \"Pict\".</para>\r\n    /// </summary>\r\n    public static ClipboardFormatValues Picture => new(\"Pict\");\r\n    /// <summary>\r\n    /// Bitmap.\r\n    /// <para>When the item is serialized out as xml, its value is \"Bitmap\".</para>\r\n    /// </summary>\r\n    public static ClipboardFormatValues Bitmap => new(\"Bitmap\");\r\n    /// <summary>\r\n    /// Printer Picture.\r\n    /// <para>When the item is serialized out as xml, its value is \"PictPrint\".</para>\r\n    /// </summary>\r\n    public static ClipboardFormatValues PicturePrint => new(\"PictPrint\");\r\n    /// <summary>\r\n    /// Screen Picture EMF.\r\n    /// <para>When the item is serialized out as xml, its value is \"PictScreen\".</para>\r\n    /// </summary>\r\n    public static ClipboardFormatValues PictureScreen => new(\"PictScreen\");\r\n\r\n}\r\n```\r\n\r\n## Benefits:\r\n- Enums are user definable if needed now\r\n- Massive size improvement for AOT compilation (20% reduction)\r\n- No reflection needed\r\n- Generally source compatible\r\n\r\n## Downsides:\r\n- Non-AOT assembly sees a 8% increase in size\r\n- Enum values no longer work in constant situations (i.e. as attribute values)"},{"Id":"27366015734","Type":"PullRequestEvent","CreatedAt":"2023-02-27T19:14:05","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1346","RelatedDescription":"Merged pull request \"Update SDK to 7.0.200\" (#1346) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"27333908159","Type":"PullRequestEvent","CreatedAt":"2023-02-26T00:33:46","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1346","RelatedDescription":"Opened pull request \"Update SDK to 7.0.200\" (#1346) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"27325344984","Type":"PullRequestEvent","CreatedAt":"2023-02-25T01:22:20","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1345","RelatedDescription":"Opened pull request \"Convert LINQ generator to run as source generator\" (#1345) at dotnet/Open-XML-SDK","RelatedBody":"This change integrates the LINQ generator with the source generator infrastructure so things will stay up-to-date as well as use a single source of truth.\n"},{"Id":"27299761058","Type":"PullRequestEvent","CreatedAt":"2023-02-24T00:15:07","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1343","RelatedDescription":"Merged pull request \"Remove unused IContainerFeature\" (#1343) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"27299758590","Type":"PullRequestEvent","CreatedAt":"2023-02-24T00:14:56","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1344","RelatedDescription":"Merged pull request \"Remove extra indirection for relationship management\" (#1344) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"27298890262","Type":"PullRequestEvent","CreatedAt":"2023-02-23T23:08:04","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1344","RelatedDescription":"Opened pull request \"Remove extra indirection for relationship management\" (#1344) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"27298873860","Type":"PullRequestEvent","CreatedAt":"2023-02-23T23:07:01","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1343","RelatedDescription":"Opened pull request \"Remove unused IContainerFeature\" (#1343) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"27298837621","Type":"IssuesEvent","CreatedAt":"2023-02-23T23:04:45","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1281","RelatedDescription":"Closed issue \"How to open SpreadsheetDocument without calcchain.xml\" (#1281) at dotnet/Open-XML-SDK","RelatedBody":"### Discussed in https://github.com/OfficeDev/Open-XML-SDK/discussions/1279\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **Distancehe** December 22, 2022</sup>\r\nThe Excel file itself do not contain calcchain.xml, but calcchain.xml is referenced from workbook.xml.rels as below snapshot. When trying to load the excel with SpreadsheetDocument.Open(), it will throw exception since the calcchain.xml is missing. The question is, how to open the excel file with calcchain.xml missing? Is there some way to ignore this and continue open the file ? Thanks !\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/4394577/209112903-02252d47-95a6-4be0-a404-b3ff1ca45c63.png)\r\n\r\n</div>"},{"Id":"27298837307","Type":"PullRequestEvent","CreatedAt":"2023-02-23T23:04:44","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1341","RelatedDescription":"Merged pull request \"Use relationship filter for calcChain and recovered types\" (#1341) at dotnet/Open-XML-SDK","RelatedBody":"This changes the relationship filtering to use the `IRelationshipFilterFeature` to register ignorable relationships. As part of this, the `OpenSettings.IgnoreExceptionOnCalcChainPartMissing` property has been removed and a new extension method has been added that can be opted into.\r\n\r\nFixes #1281"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-03-01T03:30:26.4965692Z","RunDurationInMilliseconds":685}