{"Data":{"Sdk":{"Events":[{"Id":"25359017561","Type":"IssuesEvent","CreatedAt":"2022-11-20T17:28:10","Actor":"f1nzer","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1237","RelatedDescription":"Opened issue \"FlatOpc: line break at the end of binary part format\" (#1237) at OfficeDev/Open-XML-SDK","RelatedBody":"Hi, I have a question about the next method:\r\nhttps://github.com/OfficeDev/Open-XML-SDK/blob/main/src/DocumentFormat.OpenXml/Packaging/OpenXmlPackage.FlatOpc.cs#L140-L159\r\n\r\nAccording to the [old blog post](https://learn.microsoft.com/en-us/archive/blogs/ericwhite/the-flat-opc-format) from Eric White:\r\n> the string must be broken into lines of 76 characters, and there **must not be a line break at the beginning or end of the data**\r\n\r\nBut the linked code adds a line break at the end of the data.\r\n\r\nAlso, the logic of this method is not obvious from my point of view.\r\nIf it is a bug then it might be simplified a bit:\r\n```cs\r\nconst int maxLineLength = 76;\r\n\r\nvar str = Convert.ToBase64String(byteArray);\r\n\r\nvar sb = new StringBuilder();\r\nfor (var i = 0; i < str.Length; i += maxLineLength)\r\n{\r\n    if (i > 0)\r\n    {\r\n        sb.AppendLine();\r\n    }\r\n\r\n    sb.Append(str.Substring(i, System.Math.Min(maxLineLength, str.Length - i)));\r\n}\r\n\r\nreturn sb.ToString();\r\n```"},{"Id":"25358665766","Type":"PullRequestEvent","CreatedAt":"2022-11-20T16:41:20","Actor":"f1nzer","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1236","RelatedDescription":"Opened pull request \"FlatOpc: avoid unnecessary MemoryStream.ToArray call\" (#1236) at OfficeDev/Open-XML-SDK","RelatedBody":"There is an unnecessary allocation in PR #1232: it allocates a new byte array via `MemoryStream.ToArray()`.\r\n\r\nIt's possible to avoid this call and read the data into a byte array directly, as it was done before (but was broken due to the [net6 breaking change](https://learn.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/6.0/partial-byte-reads-in-streams))."},{"Id":"25343323030","Type":"PullRequestEvent","CreatedAt":"2022-11-19T00:51:45","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1235","RelatedDescription":"Opened pull request \"Persist generated code\" (#1235) at OfficeDev/Open-XML-SDK","RelatedBody":"This is helpful to see what the data files actually generate and potentially catch any changes that are unexpected."}],"ResultType":"GitHubEvent"}},"RunOn":"2022-11-22T03:30:28.5816906Z","RunDurationInMilliseconds":626}