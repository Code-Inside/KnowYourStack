{"Data":{"Sdk":{"Events":[{"Id":"43996220759","Type":"IssuesEvent","CreatedAt":"2024-11-20T01:30:10","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1792","RelatedDescription":"Closed issue \"FontName becomes OpenXmlUnknownElement\" (#1792) at dotnet/Open-XML-SDK","RelatedBody":"Hi team\r\n**Describe the bug**\r\nAfter updating to version 3.1.0, I've encountered a bug. When I create a **DocumentFormat.OpenXml.Spreadsheet.RunProperties** with **FontName** as a child element, it changes the **FontName** to **OpenXmlUnknownElement**.\r\n\r\n**Screenshots**\r\n![image](https://github.com/user-attachments/assets/192c235f-4f24-4305-b82e-b791533a4b30)\r\n\r\n**To Reproduce**\r\n```csharp\r\nusing System.Linq;\r\nusing DocumentFormat.OpenXml;\r\nusing DocumentFormat.OpenXml.Packaging;\r\nusing DocumentFormat.OpenXml.Spreadsheet;\r\nusing Xunit;\r\n\r\nnamespace SOME_NAME_SPACE;\r\n\r\npublic class ExcelConvertingHelperTests\r\n{\r\n    [Fact]\r\n    public void BuildFont_Should_Return_RunProperties_With_FontName()\r\n    {\r\n        // Arrange\r\n        var runProps = new RunProperties(new FontName());\r\n        var spreadsheetDocument = SpreadsheetDocument.Create($\"SampleWithRunProperties.xlsx\", SpreadsheetDocumentType.Workbook);\r\n        var workbookPart = spreadsheetDocument.AddWorkbookPart();\r\n        var worksheetPart = workbookPart.AddNewPart<WorksheetPart>();\r\n        worksheetPart.Worksheet = new Worksheet(new SheetData(new Row(new Cell(new InlineString(new Run(runProps))))));\r\n        workbookPart.Workbook = new Workbook(new Sheets(new Sheet()));\r\n        spreadsheetDocument.Save();\r\n\r\n        // Act\r\n        var result = worksheetPart.Worksheet.Descendants<RunProperties>().First().FirstChild;\r\n\r\n        // Assert\r\n        Assert.True(result is FontName);\r\n        Assert.True(result is not OpenXmlUnknownElement);\r\n\r\n        spreadsheetDocument.Dispose();\r\n    }\r\n}\r\n```\r\n1. Run the test\r\n2. See error\r\n\r\n**Expected behavior**\r\nFontName becomes OpenXmlUnknownElement, I expect it to stay FontName.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows 11 Enterprise 23H2\r\n - .NET Target: .Net 8.0\r\n - DocumentFormat.OpenXml Version: 3.1.0\r\n\r\n"},{"Id":"43996009598","Type":"IssuesEvent","CreatedAt":"2024-11-20T01:18:52","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1771","RelatedDescription":"Closed issue \"Calling Worksheet.Save() makes rest of changes to worksheet not apply in 3.1\" (#1771) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nWhen calling `Worksheet.Save()` in 3.0.2 changes were saved and you could continue to make changes to the worksheet.\r\nIn version 3.1 after calling `Worksheet.Save()` no other changes to the worksheet gets applied.\r\n\r\n**To Reproduce**\r\n```cs\r\nusing DocumentFormat.OpenXml;\r\nusing DocumentFormat.OpenXml.Packaging;\r\nusing DocumentFormat.OpenXml.Spreadsheet;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        // Create a spreadsheet document\r\n        using (SpreadsheetDocument doc = SpreadsheetDocument.Create(@\"c:\\temp\\test.xlsx\", SpreadsheetDocumentType.Workbook))\r\n        {\r\n            // Add a WorkbookPart to the document\r\n            WorkbookPart workbookPart = doc.AddWorkbookPart();\r\n            workbookPart.Workbook = new Workbook();\r\n\r\n            // Add a WorksheetPart to the WorkbookPart\r\n            WorksheetPart worksheetPart = workbookPart.AddNewPart<WorksheetPart>();\r\n            worksheetPart.Worksheet = new Worksheet(new SheetData());\r\n\r\n            // Add Sheets to the Workbook\r\n            Sheets sheets = doc.WorkbookPart.Workbook.AppendChild(new Sheets());\r\n\r\n            // Append a new sheet and associate it with the workbook\r\n            Sheet sheet = new Sheet()\r\n            {\r\n                Id = doc.WorkbookPart.GetIdOfPart(worksheetPart),\r\n                SheetId = 1,\r\n                Name = \"Sheet1\"\r\n            };\r\n            sheets.Append(sheet);\r\n           \r\n            // Get the SheetData from the Worksheet\r\n            SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();\r\n\r\n            // Create a new row\r\n            Row row = new Row() { RowIndex = 1 };\r\n            sheetData.Append(row);\r\n            worksheetPart.Worksheet.Save(); // Calling save here makes the document blank in 3.1\r\n\r\n            // Create a new cell\r\n            Cell cell = new Cell() { CellReference = \"A1\", CellValue = new CellValue(\"Hello\"), DataType = CellValues.String };\r\n            row.Append(cell);\r\n\r\n            // Save the changes\r\n            worksheetPart.Worksheet.Save();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n**Observed behavior**\r\nThe worksheet is blank.\r\n\r\n**Expected behavior**\r\nA worksheet with one cell that says \"Hello\" is created.\r\n\r\n**Desktop**\r\n - OS: Windows 11\r\n - Office version: Microsoft® Excel® for Microsoft 365 MSO (Version 2407 Build 16.0.17830.20056) 64-bit \r\n - .NET Target: .NET 8\r\n - DocumentFormat.OpenXml Version: 3.1\r\n"},{"Id":"43996009311","Type":"PullRequestEvent","CreatedAt":"2024-11-20T01:18:52","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1828","RelatedDescription":"Merged pull request \"Only unload part when saving part if it is not the same element\" (#1828) at dotnet/Open-XML-SDK","RelatedBody":"This is fall out from #1760 that removes the loaded part but doesn't check if we're saving an existing root element\n\nFixes #1771\n"},{"Id":"43995939325","Type":"IssuesEvent","CreatedAt":"2024-11-20T01:15:05","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1681","RelatedDescription":"Closed issue \"Bug with opening corrupted Open XML documents\" (#1681) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nOpening a corrupted document lock the file.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Simulate a corrupted file (simply create a txt file with content in it and change the extension to .docx)\r\n2. Try opening the file with WordProcessingDocument.Open(...)\r\n\r\n**Observed behavior**\r\nThe method WordProcessingDocument.Open(...) throws an exception, stating that the file is corrupted but keeps the file locked to. This can be verified using tools like \"File Locksmith.\"\r\n\r\n**Expected behavior**\r\nContinue throwing the exception but release the file before.\r\n\r\n**Desktop**\r\n - OS: Windows 11\r\n - .NET Target: .NET Framework 4.8\r\n - DocumentFormat.OpenXml Version: 3.0.1\r\n\r\nThanks."},{"Id":"43995939037","Type":"PullRequestEvent","CreatedAt":"2024-11-20T01:15:04","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1829","RelatedDescription":"Merged pull request \"Dispose stream in initializer if loading file fails\" (#1829) at dotnet/Open-XML-SDK","RelatedBody":"Fixes #1681\n"},{"Id":"43995174475","Type":"IssuesEvent","CreatedAt":"2024-11-20T00:36:37","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1818","RelatedDescription":"Closed issue \"AddAlternativeFormatImportPart produces corrupted docx document on net48, but works fine on net4.8\" (#1818) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\nRun the following code on .net48 and .net8.0, and then extract the generated docx file with 7zip, the .net48 output file has an error:\n\n```\ndata error: word\\_rels\\document.xml.rels\n```\n\nThe code:\n```c#\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        var m_stream = new MemoryStream();\n        GenerateDocx(m_stream);\n        m_stream.Position = 0;\n\n        var mydoc = WordprocessingDocument.Open(m_stream, true);\n        var mainPart = mydoc.MainDocumentPart!;\n\n        var alternativeFormatImportPart = mainPart.AddAlternativeFormatImportPart(AlternativeFormatImportPartType.Html);\n        alternativeFormatImportPart.FeedData(new MemoryStream(new UTF8Encoding(true).GetBytes(\"<html>Hello</html>\")));\n        mydoc.Save();\n\n        using var fs = new FileStream(\"result.docx\", FileMode.Create, FileAccess.ReadWrite);\n        m_stream.Position = 0;\n        m_stream.CopyTo(fs);\n    }\n\n    private static void GenerateDocx(MemoryStream m_stream)\n    {\n        using var wpDocument = WordprocessingDocument.Create(m_stream, WordprocessingDocumentType.Document);\n        MainDocumentPart mainPart = wpDocument.AddMainDocumentPart();\n        mainPart.Document = new Document(new Body(new Paragraph(new Run(new Text(\"Here comes HTML {{ds}:html}\")))));\n        wpDocument.Save();\n    }\n}\n```\n\n**Screenshots**\n![Image](https://github.com/user-attachments/assets/7f5a3d48-ed1a-4126-b3fa-38ca174b94ef)\n\n**To Reproduce**\nThe code in the **Describe the bug** section.\n\nSteps to reproduce the behavior:\n1. Create an console application, and paste the Program code above.\n2. Switch to net48, run the program, the output docx file is in the output directory of the project.\n3. Extract the output docx file with 7zip.\n4. See error like described above.\n\n**Observed behavior**\nThe output file of net48 is corrupted \n\n**Expected behavior**\nThe files produced by net48 are the same as those produced by net8.0\n\n**Desktop (please complete the following information):**\n - OS: Windows 11\n - .NET Target: .NET Framework 4.8 and .NET 8.0\n - DocumentFormat.OpenXml Version: 3.1.1\n\n**Additional context**\nAdd any other context about the problem here.\n\n**Edit**\nThe OpenSettings is not relevant to the current problem, so it has been removed.\n"},{"Id":"43994849955","Type":"IssuesEvent","CreatedAt":"2024-11-20T00:20:17","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1817","RelatedDescription":"Closed issue \"How to Track changes Insert new word and old word with Open XML SDK\" (#1817) at dotnet/Open-XML-SDK","RelatedBody":"have issue with Track changes new word and old word in the word document.\nBut Inserted Run newword working properly, but detetion not working prolerly.\n\n\nSource Code i have tried it.\n\n public void WordUpdate3(string filePath)\n {\n     string newWord = \"NewWord\";\n     string wordToDelete = \"POWERUP\";\n\n     using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(filePath, true))\n     {\n         Body body = wordDoc.MainDocumentPart.Document.Body;\n\n         ReplaceWordWithTracking2(body, wordToDelete, newWord);\n\n         wordDoc.MainDocumentPart.Document.Save();\n     }\n }\n\n private void ReplaceWordWithTracking2(Body body, string targetWord, string newWord)\n {\n     Paragraph targetParagraph = body.Elements<Paragraph>()\n                             .FirstOrDefault(p => p.InnerText.Contains(targetWord));\n\n     if (targetParagraph != null)\n     {\n         Run targetRun = targetParagraph.Elements<Run>()\n                                        .FirstOrDefault(r => r.InnerText.Contains(targetWord));\n\n         if (targetRun != null)\n         {\n             // Step 1: Create a DeletedRun for tracking the deletion\n             DeletedRun deletedRun = new DeletedRun();\n\n             // Set author and date attributes on the DeletedRun\n             deletedRun.SetAttribute(new OpenXmlAttribute(\"author\", \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\", \"AuthorName\"));\n             deletedRun.SetAttribute(new OpenXmlAttribute(\"date\", \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\", DateTime.Now.ToString(\"s\")));\n\n             // Add the deleted word with strikethrough formatting and color\n             RunProperties runProperties = new RunProperties();\n             Color color = new Color() { Val = \"FF0000\" }; // Red color for deleted text\n             runProperties.Append(color);\n             runProperties.Append(new Strike()); // Strikethrough for deletion\n\n             Run deletedWordRun = new Run(runProperties, new Text(targetWord));\n             deletedRun.Append(deletedWordRun); // Append the deleted word run to DeletedRun\n\n             // Insert the DeletedRun before the target run\n             targetRun.Parent.InsertBefore(deletedRun, targetRun);\n\n             // Step 2: Remove the original target run\n             targetRun.Remove();\n\n             // Step 3: Create an InsertedRun for tracking the insertion\n             InsertedRun insertedRun = new InsertedRun();\n\n             // Set author and date attributes on the InsertedRun\n             insertedRun.SetAttribute(new OpenXmlAttribute(\"author\", \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\", \"AuthorName\"));\n             insertedRun.SetAttribute(new OpenXmlAttribute(\"date\", \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\", DateTime.Now.ToString(\"s\")));\n\n             // Add the new word with color formatting\n             Run insertedWordRun = new Run(new Text(newWord))\n             {\n                 RunProperties = new RunProperties(new Color { Val = \"00FF00\" }) // Green color for inserted word\n             };\n             insertedRun.Append(insertedWordRun); // Append the inserted word run to InsertedRun\n\n             // Insert the InsertedRun after the DeletedRun\n             deletedRun.Parent.InsertAfter(insertedRun, deletedRun);\n         }\n         else\n         {\n             Console.WriteLine(\"Target Run is null.\");\n         }\n     }\n     else\n     {\n         Console.WriteLine(\"Target Paragraph is null.\");\n     }\n }\n"},{"Id":"43994845072","Type":"IssuesEvent","CreatedAt":"2024-11-20T00:20:03","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1816","RelatedDescription":"Closed issue \"How to insert image into cell in xlsx file?\" (#1816) at dotnet/Open-XML-SDK","RelatedBody":"I hope use openxml insert image into one cell(embed) in xlsx file。\nthen use winrar unzip this xlsx。\ndir:\n![Image](https://github.com/user-attachments/assets/af15cf1d-5e53-4751-a940-8dacee103335)\n![Image](https://github.com/user-attachments/assets/4828be9c-892a-4c04-bb07-49b1d78f451e)\n![Image](https://github.com/user-attachments/assets/8846bccd-2b52-4f1f-9b13-6060d8914e9f)\nI want to have relations \ncellimages.xml\n![Image](https://github.com/user-attachments/assets/261a4712-aacb-4859-91d7-ada690dd9561)\ncellimages.xml.rels\n![Image](https://github.com/user-attachments/assets/ca1283e9-155a-4acf-8986-f3e489affd40)\n"},{"Id":"43994697563","Type":"IssuesEvent","CreatedAt":"2024-11-20T00:12:45","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1777","RelatedDescription":"Closed issue \"Bug with Open XML SDK\" (#1777) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\n1. Updated a customxml part (item1.xml), then saved the word document. \n2. After saving the word file, I reviewed the customxml part (item1.xml) and noted that it did update correctly.\n3. Opened the word doc and noted that the data in the xml gets pulled into the word document as expected. \n4. Without saving the word doc, I unpacked the doc file and reviewed document.xml file and noted that it did NOT update with the updated customxml part. \n5. If I perform a Save As and examine the file again, the document.xml file is updated. \n\n\n\n\n**Screenshots**\nIf applicable, add screenshots to help explain your problem.\n\n**To Reproduce**\n// Please add a self-contained, minimum viable repro of the issue.\n// If you require external resources, please provide a gist or GitHub repro\n// An Xunit style test is preferred, but a console application would work too.\n\nUsing the latest version. 3.1.0 and .Net 8\n```csharp\nUsing \n var os = new OpenSettings\n {\n     MarkupCompatibilityProcessSettings = new MarkupCompatibilityProcessSettings(\n MarkupCompatibilityProcessMode.ProcessAllParts, FileFormatVersions.Office2007)\n };\n```\n\nSteps to reproduce the behavior:\n\nbeginning of code:\n\n```csharp\n //Word Doc - Decode the word doc from SharePoint. \n byte[] byteWordDoc = Convert.FromBase64String(strWordDocBase64);\n MemoryStream streamWordDoc = new MemoryStream();\n streamWordDoc.Write(byteWordDoc, 0, byteWordDoc.Length);\n\n //XML File\n byte[] byteXMlFile = Convert.FromBase64String(strXMLFileBase64);\n XElement xmlfile = XElement.Parse(System.Text.Encoding.UTF8.GetString(byteXMlFile));\n\n\n streamWordDoc.Seek(0, SeekOrigin.Begin);\n\n //Get the custom part for index1.xml\n foreach (CustomXmlPart part in wordDoc.MainDocumentPart.CustomXmlParts)\n {\n     \n     if (part.Uri.OriginalString.IndexOf(strWordDocNamespace) != -1)\n     {\n         mainXMLPart = part;\n         break;\n     }\n }\n\n using (Stream stream = mainXMLPart.GetStream(FileMode.Create, FileAccess.Write))\n {\n     using (XmlWriter partXMLWriter = XmlWriter.Create(stream))\n     {\n         xmlfile.Save(partXMLWriter);\n         \n\n     };\n\n }\n\n streamWordDoc.Seek(0, SeekOrigin.Begin);\n wordDoc.Save();\n wordDoc.Dispose();\n\n//Convert to base64 and return as JSON payload.\nvar wordDocBase64 = new { worddoc = Convert.ToBase64String(streamWordDoc2.ToArray()) };\n```\n\n\n\n**Observed behavior**\nSee notes above. \n\n**Expected behavior**\nThe document.xml to be updated. \n\n**Desktop (please complete the following information):**\n - OS: Windows 11\n - Office version 16\n - .NET Target: 8\n - DocumentFormat.OpenXml Version: 3.1.0\n\n**Additional context**\nAdd any other context about the problem here.\n"},{"Id":"43994646307","Type":"IssuesEvent","CreatedAt":"2024-11-20T00:10:17","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1793","RelatedDescription":"Closed issue \"Adding CellFormula - on opening with Excel, @ have been injected. How to avoid?\" (#1793) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nI'm building up an excel sheet. I'm using CellFormula to add a formula to a cell. That works fine. When opening the file with Excel, @ characters are injected into the formula and the formula is broken. \r\n\r\nSample formula: \r\n\r\n=WENN(ANZAHL2('I&C Extension'!D3:E3)>1;INDEX(D2:D1300;VERGLEICH(INDEX(A:A;ZEILE())&\"OC001\";A2:A1300&C2:C1300;0));Material!C9)\r\n\r\nends up as \r\n\r\n=WENN(ANZAHL2('I&C Extension'!D3:E3)>1;INDEX(D2:D1300;VERGLEICH(@INDEX(A:A;ZEILE())&\"OC001\";@A2:A1300&@C2:C1300;0));Material!C9)\r\n\r\nUsing version 2.20. \r\n\r\nThere are hints for VBA to use CellFormula2, but this isn't available in the SDK. How to avoid this?\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-11-21T03:30:23.268377Z","RunDurationInMilliseconds":705}