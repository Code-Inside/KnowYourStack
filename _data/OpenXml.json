{"Data":{"Sdk":{"Events":[{"Id":"23368316226","Type":"PullRequestEvent","CreatedAt":"2022-08-10T17:20:34","Actor":"mikeebowen","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1194","RelatedDescription":"Opened pull request \"update readme for .Net foundation requirements\" (#1194) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"23363704569","Type":"IssuesEvent","CreatedAt":"2022-08-10T13:47:45","Actor":"tauheedul","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1193","RelatedDescription":"Opened issue \"Feature request: SAX Approach addition of ReadLastChild() function for OpenXmlReader\" (#1193) at OfficeDev/Open-XML-SDK","RelatedBody":"**Suggestion**\r\nThere are three SAX options to read from a spreadsheet document e.g.\r\n- Read()\r\n- ReadFirstChild()\r\n- ReadNextSibling()\r\n\r\nPlease can this be extended to include **ReadLastChild()** which will move the SAX reader straight to the Last Child Element of the node?\r\n\r\n**Current situation**\r\nWhen using the DOM approach we can easily sort by Descending or take the LastChild from the element collection.\r\n\r\nWith the SAX approach, the reader must iterate through all preceeding Cells or Rows using reader.ReadNextSibling and checking if reader.IsEndElement before the last element can be loaded using the reader.LoadCurrentElement();\r\n\r\nIt would be faster if when ReadLastChild() is used the OpenXmlReader's position is moved immediately to the last child Element of the node whether it is a Row or Cell type.\r\n\r\nThe SAX reader is used for large Excel document's and this will reduce processing speed in these instances.\r\n"},{"Id":"23350146462","Type":"PullRequestEvent","CreatedAt":"2022-08-09T22:29:03","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1192","RelatedDescription":"Opened pull request \"Fix roadmap links\" (#1192) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"23278307043","Type":"IssuesEvent","CreatedAt":"2022-08-05T09:26:03","Actor":"tauheedul","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1189","RelatedDescription":"Closed issue \"Add support for XLOOKUP formula in OpenXML SDK\" (#1189) at OfficeDev/Open-XML-SDK","RelatedBody":"** Description **\r\nPlease add support for XLOOKUP formula parsing and calculation in Strict Open XML XLSX file output\r\n\r\n**Information**\r\n\r\n- .NET Target: All\r\n- DocumentFormat.OpenXml Version: 2.17.1\r\n\r\n**Repro**\r\n\r\n```csharp\r\nExample formula\r\n=XLOOKUP(A1, A3:A5, B3:B5)\r\n``` \r\n\r\n**Observed**\r\n\r\nLookup is not calculated in XLSX output\r\n![image](https://user-images.githubusercontent.com/9335220/182652778-67aef7a4-963b-44ce-ab7a-d271b92ca1e0.png)\r\n\r\n\r\n**Expected**\r\n\r\nSupport for formula syntax\r\n=XLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode]) \r\n"},{"Id":"23266856236","Type":"IssuesEvent","CreatedAt":"2022-08-04T18:16:56","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1188","RelatedDescription":"Closed issue \"Doesn't work in .Net\" (#1188) at OfficeDev/Open-XML-SDK","RelatedBody":"I recently used an amazingly effective MS tool for upgrading a WPF .Net Framework app to .Net 6.  Everything worked perfect-perfect except for all of my (too many to contemplate rewriting) reports I created using OpenXML. \r\n\r\ndoc.Save causes: [System.IO.IOException: 'Entries cannot be opened multiple times in Update mode\r\n\r\nFile.Copy(sourceWordTemplate, tempReportPath, true);\r\nusing (WordprocessingDocument wordDoc = WordprocessingDocument.Open(tempReportPath, true))\r\n{\r\n      MainDocumentPart mainPart = wordDoc.MainDocumentPart;\r\n      XmlDocument doc = new XmlDocument();\r\n      XmlDocument xnRow = new XmlDocument();\r\n      doc.Load(mainPart.GetStream());\r\n\r\n      // Building of the report which includes replacing text in the source doc, \r\n      // looping through, removing and adding table nodes and rows etc... \r\n      // nowhere in the report building is the word Stream used.\r\n\r\n      doc.Save(mainPart.GetStream(FileMode.Create, FileAccess.Write));\r\n      wordDoc.Close();\r\n}\r\nAny ideas?\r\n\r\n_Originally posted by @KurtIO in https://github.com/OfficeDev/Open-XML-SDK/issues/909#issuecomment-1060068306_"}],"ResultType":"GitHubEvent"}},"RunOn":"2022-08-13T03:30:25.3779622Z","RunDurationInMilliseconds":708}