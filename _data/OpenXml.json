{"Data":{"Sdk":{"Events":[{"Id":"19043082292","Type":"PullRequestEvent","CreatedAt":"2021-11-25T02:03:01","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1077","RelatedDescription":"Merged pull request \"Remove namespace ids and attribute ids\" (#1077) at OfficeDev/Open-XML-SDK","RelatedBody":"This change removes all usage of namespace ids and attribute ids. This internal implementation caused a tight coupling between the backend and the front end. Now namespaces can be used internally as prefixes or URIs to reference each other.\n"},{"Id":"19041400498","Type":"PullRequestEvent","CreatedAt":"2021-11-24T22:24:34","Actor":"mikeebowen","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1080","RelatedDescription":"Opened pull request \"Add Examples\" (#1080) at OfficeDev/Open-XML-SDK","RelatedBody":"This adds examples for Animated Model 3D, Named Sheet Views, Document Tasks, and SVG support."},{"Id":"19039242124","Type":"IssuesEvent","CreatedAt":"2021-11-24T19:07:58","Actor":"andrewmolyneux","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1079","RelatedDescription":"Opened issue \"PresentationDocument.Save() performance weirdness\" (#1079) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nI've been working on some code that searches through all the slides of a PPTX file looking for certain types of content, and modifies the XML if certain patterns are matched. I noticed that with some larger files, the time taken to save the file can be excessive (e.g. nearly 1 minute for a file under 10MB in size). Unfortunately I can't share files that perform really badly, but I have managed to demonstrate some anomalies with a file I generated myself.\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Framework 4.7.2\r\n- DocumentFormat.OpenXml Version: 2.14.0\r\n\r\n**Repro**\r\n\r\nUsing this sample file: [map.pptx](https://github.com/OfficeDev/Open-XML-SDK/files/7597954/map.pptx)\r\n(This file was generated by downloading the PPTX file from [this page](https://slidelizard.com/en-gb/blog/powerpoint-world-map), then copying the last slide (\"Editable World Map\") into a new blank presentation with PowerPoint 2019 and copying and pasting the slide 17 times for a total of 18 copies)\r\n\r\n```csharp\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.IO;\r\nusing DocumentFormat.OpenXml.Packaging;\r\nusing DocumentFormat.OpenXml.Presentation;\r\n\r\nnamespace ReproOxmlSaveSlowness\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var sourceFileName = \"map.pptx\";\r\n            var tempFileName = \"temp.pptx\";\r\n            // Make a temporary copy of the original file.\r\n            File.Copy(sourceFileName, tempFileName, true);\r\n            // Open the file read/write, and change the name of the first slide.\r\n            using (var doc = PresentationDocument.Open(tempFileName, true))\r\n            {\r\n                var firstSlideId = doc.PresentationPart.Presentation.SlideIdList.FirstChild as SlideId;\r\n                var firstSlidePart = doc.PresentationPart.GetPartById(firstSlideId.RelationshipId) as SlidePart;\r\n                firstSlidePart.Slide.CommonSlideData.Name = \"Some slide name\";\r\n                var stopwatch1 = new Stopwatch();\r\n                stopwatch1.Start();\r\n                doc.Save();\r\n                stopwatch1.Stop();\r\n                Console.WriteLine($\"Time to save after changing 1 slide: {stopwatch1.Elapsed.TotalSeconds} sec\");\r\n            }\r\n            // Make a fresh temporary copy of the original file.\r\n            File.Copy(sourceFileName, tempFileName, true);\r\n            var stopwatch2 = new Stopwatch();\r\n            int numSlides = 0;\r\n            // Open the file read/write, this time just reading the names of all slides without\r\n            // modifying anything.\r\n            using (var doc = PresentationDocument.Open(tempFileName, true))\r\n            {\r\n                foreach (SlideId slideId in doc.PresentationPart.Presentation.SlideIdList)\r\n                {\r\n                    var slidePart = doc.PresentationPart.GetPartById(slideId.RelationshipId) as SlidePart;\r\n                    Console.WriteLine($\"Slide name: {slidePart.Slide.CommonSlideData.Name}\");\r\n                    ++numSlides;\r\n                }\r\n                var stopwatch3 = new Stopwatch();\r\n                stopwatch3.Start();\r\n                doc.Save();\r\n                stopwatch3.Stop();\r\n                Console.WriteLine($\"Time to save after looking at {numSlides} slides: {stopwatch3.Elapsed.TotalSeconds} sec\");\r\n                stopwatch2.Start();\r\n            }\r\n            stopwatch2.Stop();\r\n            Console.WriteLine($\"Time to close after looking at {numSlides} slides: {stopwatch2.Elapsed.TotalSeconds} sec\");\r\n            File.Delete(tempFileName);\r\n        }\r\n    }\r\n}\r\n``` \r\n\r\n**Observed**\r\n\r\nOn my (admittedly rather elderly) development PC, I see the following output:\r\n```\r\nTime to save after changing 1 slide: 0.6335861 sec\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nSlide name:\r\nTime to save after looking at 18 slides: 4.8866107 sec\r\nTime to close after looking at 18 slides: 4.7443786 sec\r\n```\r\n\r\n**Expected**\r\n\r\nThere were a few surprises for me here:\r\n\r\n1. I expected that after merely accessing (and not writing to) all 18 slides, saving would effectively be a no-op (as no content has been modified). However, it seems a lot more time (almost 8x) is being spent saving the unmodified (but more accessed) document than the document with a small modification to one slide. This suggests that `Save()` is saving every part that has been accessed at all, even if not modified.\r\n2. In the case where all 18 slides are touched, it seems excessive for the `Save()` operation to take nearly 5 seconds, when PowerPoint 2019 is able to save the same file in well under a second on the same machine.\r\n3. Closing the document (implicitly, by disposing it) took roughly as long as saving, suggesting that the SDK is saving everything again, rather than only saving parts that have changed since the last `Save()` operation, as I expected.\r\n\r\nPoint 3 is simple for me to work around - I can just avoid calling `Save()` explicitly and allow the document to save itself when disposed, so I'm not personally concerned about that but I doubt I'm the only person to be surprised by it so I thought it was worth mentioning.\r\n\r\nI can also work around Point 1 by making two passes through the presentation (open it read-only to scan an make a note of content that needs to be updated, then close and reopen it read/write to make the necessary changes). However, it seems like implementing a \"dirty\" flag (if feasible) in the OXML SDK for parts that have actually been modified would be more efficient. This would also address Point 3, if the \"dirty\" flags were reset as part of the `Save()` operation.\r\n\r\nPoint 2 is more of a general observation - anecdotally, the SDK seems to be slow at saving documents in cases where a large number of parts (e.g. hundreds) need to be updated, particularly when large overall file sizes (tens or hundreds of megabytes) are involved."},{"Id":"19038706947","Type":"PullRequestEvent","CreatedAt":"2021-11-24T18:24:30","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1073","RelatedDescription":"Merged pull request \"Correctly serialize new CellValue(bool) (#1070)\" (#1073) at OfficeDev/Open-XML-SDK","RelatedBody":""}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2021-11-25T05:30:32.3156985Z","RunDurationInMilliseconds":974}