{"Data":{"Sdk":{"Events":[{"Id":"20847720550","Type":"IssuesEvent","CreatedAt":"2022-03-21T10:32:04","Actor":"tipa","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1068","RelatedDescription":"Closed issue \"Exception after building iOS app in Release mode\" (#1068) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\nTo reproduce this crash you need to enable Full Linking & build the app in Release mode.\r\nUsing Full Linking & building in Debug mode does not show the problem.\r\n\r\nThe problem was not present with 2.13.0 - it showed up after upgrading to 2.14.0.\r\nExcluding the whole `DocumentFormat.OpenXml` assembly from linking does prevent the exception, but it's not an option for me as it would drastically increase the app's size\r\n\r\n**Information**\r\n\r\n- .NET Target: Xamarin.iOS\r\n- DocumentFormat.OpenXml Version: 2.14.0\r\n\r\n**Repro**\r\n\r\n```csharp\r\nvar text = new Text(\"...\") { Space = SpaceProcessingModeValues.Preserve };\r\n``` \r\n\r\n**Observed**\r\n\r\n```\r\nSystem.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\r\nParameter name: TEnum\r\nat DocumentFormat.OpenXml.EnumInfoLookup`1+EnumStringLookupImpl[TEnum].IsDefined (TEnum value, System.Int32& index) <0x105de6abc + 0x000b8> in <61d1b00a264a46ffb924015d81c50ac1#cab60450a0de5c701fd309f7d44ec96c>:0 \r\nat DocumentFormat.OpenXml.EnumInfoLookup`1+EnumStringLookupImpl[TEnum].IsDefined (TEnum value) <0x105de51e0 + 0x00047> in <61d1b00a264a46ffb924015d81c50ac1#cab60450a0de5c701fd309f7d44ec96c>:0 \r\nat DocumentFormat.OpenXml.EnumInfoLookup`1[TEnum].IsDefined (TEnum value) <0x105ddeec0 + 0x0006b> in <61d1b00a264a46ffb924015d81c50ac1#cab60450a0de5c701fd309f7d44ec96c>:0 \r\nat DocumentFormat.OpenXml.EnumValue`1[T].ValidateSet (T value) <0x105d73394 + 0x0005f> in <61d1b00a264a46ffb924015d81c50ac1#cab60450a0de5c701fd309f7d44ec96c>:0 \r\nat DocumentFormat.OpenXml.OpenXmlSimpleValue`1[T].set_Value (T value) <0x105d6947c + 0x00033> in <61d1b00a264a46ffb924015d81c50ac1#cab60450a0de5c701fd309f7d44ec96c>:0 \r\nat DocumentFormat.OpenXml.OpenXmlSimpleValue`1[T]..ctor (DocumentFormat.OpenXml.SpaceProcessingModeValues value) <0x105d69030 + 0x0003f> in <61d1b00a264a46ffb924015d81c50ac1#cab60450a0de5c701fd309f7d44ec96c>:0 \r\nat DocumentFormat.OpenXml.EnumValue`1[T]..ctor (DocumentFormat.OpenXml.SpaceProcessingModeValues value) <0x105d731d8 + 0x0003f> in <61d1b00a264a46ffb924015d81c50ac1#cab60450a0de5c701fd309f7d44ec96c>:0 \r\nat DocumentFormat.OpenXml.EnumValue`1[T].op_Implicit (T value) <0x105d732b0 + 0x0004b> in <61d1b00a264a46ffb924015d81c50ac1#cab60450a0de5c701fd309f7d44ec96c>:0 \r\n```\r\n\r\n**Expected**\r\n\r\nNo exception I guess"},{"Id":"20789728234","Type":"PullRequestEvent","CreatedAt":"2022-03-16T23:45:41","Actor":"mikeebowen","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/1137","RelatedDescription":"Opened pull request \"move PowerPointCommentPart relationship to SlidePart\" (#1137) at OfficeDev/Open-XML-SDK","RelatedBody":"This commit corrects the relationship between PowerPointCommentPart (modern comments) and SlidePart. This fixes #1133."},{"Id":"20783950274","Type":"IssuesEvent","CreatedAt":"2022-03-16T17:05:45","Actor":"m-gallesio","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/1136","RelatedDescription":"Opened issue \"Ambiguous OpenXmlElement constructors\" (#1136) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nGreetings.\r\nSome time ago we started analyzing our code with [SonarQube](https://www.sonarqube.org/), and I have noticed a large number of reports in cases like these:\r\n\r\n```csharp\r\nplaceholder.InsertBeforeSelf(new Paragraph(new ParagraphProperties(new SpacingBetweenLines() { After = \"0\" })));\r\n```\r\n\r\nwhich lead to warnings like this:\r\n\r\n>[S3220](https://rules.sonarsource.com/csharp/RSPEC-3220): Review this call, which partially matches an overload without 'params'. The partial match is 'Paragraph.Paragraph(IEnumerable<DocumentFormat.OpenXml.OpenXmlElement> childElements)'.\r\n\r\nThis happens because\r\n- all (most?) `OpenXmlElement`s define two constructors:\r\n    - one accepting an `IEnumerable<OpenXmlElement>`\r\n    - one accepting an `OpenXmlElement[]` as `params`\r\n- `OpenXmlElement` implements `IEnumerable<OpenXmlElement>`\r\n\r\nA call with a single `OpenXmlElement` as the argument is correctly resolved with the params[] overload, so this does not cause actual problems. However, this report shows this usage is king of ambiguous which I agree with (note also `OpenXmlElement.Append` and `Linq.Enumerable.Append`).\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Core (irrelevant)\r\n- DocumentFormat.OpenXml Version: 2.16.0 (and previous)\r\n\r\n**Expected**\r\n\r\nI guess adding an `OpenXmlElement(OpenXmlElement)` constructor would solve this issue, but I understand this would be an immense undertaking (every single OpenXmlElement would have to include it) which is likely not worth the time for this little gain. Moreover, while I understand and agree with this specific rule, I do not know how SonarQube rules are regarded in general / whether others share this sentiment.\r\n\r\nPlease consider this as just a comment about something I noticed and not as a strong request."}],"ResultType":"GitHubEvent"}},"RunOn":"2022-03-24T03:30:25.1985598Z","RunDurationInMilliseconds":574}