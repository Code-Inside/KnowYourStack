{"Data":{"Sdk":{"Events":[{"Id":"26863548241","Type":"IssuesEvent","CreatedAt":"2023-02-03T20:50:33","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/566","RelatedDescription":"Reopened issue \"SAX Approach Replace Example\" (#566) at dotnet/Open-XML-SDK","RelatedBody":"I'm looking for an example of using the SAX approach (instead of DOM) to open a large file and perform a replace on a given value, then save the file.\r\n\r\nI think this would be a useful addition to the [Documentation](https://docs.microsoft.com/en-gb/office/open-xml/open-xml-sdk).\r\n\r\nHow to: Search and replace text in a document part (Open XML SDK)\r\nhttps://docs.microsoft.com/en-us/office/open-xml/how-to-search-and-replace-text-in-a-document-part\r\n\r\nThis uses a `Stream`.\r\n\r\nHow to: Parse and read a large spreadsheet document (Open XML SDK)\r\nhttps://docs.microsoft.com/en-us/office/open-xml/how-to-parse-and-read-a-large-spreadsheet\r\n\r\n```csharp\r\n// The SAX approach.\r\nstatic void ReadExcelFileSAX(string fileName)\r\n{\r\n    using (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(fileName, false))\r\n    {\r\n        WorkbookPart workbookPart = spreadsheetDocument.WorkbookPart;\r\n        WorksheetPart worksheetPart = workbookPart.WorksheetParts.First();\r\n\r\n        OpenXmlReader reader = OpenXmlReader.Create(worksheetPart);\r\n        string text;\r\n        while (reader.Read())\r\n        {\r\n            if (reader.ElementType == typeof(CellValue))\r\n            {\r\n                text = reader.GetText();\r\n                Console.Write(text + \" \");\r\n            }\r\n        }\r\n        Console.WriteLine();\r\n        Console.ReadKey();\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\nIf I read in the \"text\" and wish to replace this:\r\n\r\n```csharp\r\nusing (WordprocessingDocument wordDoc = WordprocessingDocument.Open(filePath, true))\r\n{\r\n    Document document = wordDoc.MainDocumentPart.Document;\r\n    OpenXmlReader reader = OpenXmlReader.Create(document);\r\n    while (reader.Read())\r\n    {\r\n        //OpenXmlElement element = reader.LoadCurrentElement();\r\n        //text = element.InnerText;\r\n        text = reader.GetText();\r\n    }\r\n}\r\n```\r\n\r\n`OpenXmlWriter` expects an `OpenXmlPart` or `Stream` when you create it.\r\n\r\n```csharp\r\nOpenXmlWriter writer = OpenXmlWriter.Create(#);\r\nwriter.WriteStartElement(reader);\r\nwriter.WriteElement(#);\r\nwriter.WriteEndElement();\r\nwriter.Close();\r\n```\r\n\r\nWhat is the supported approach/method for this?\r\n\r\nUsing the DOM approach on large files can cause memory exceptions.\r\n\r\n---\r\n\r\nThere are a number of blog posts documenting how to use the `OpenXmlWriter` but this is for creating new files or adding new elements to an existing file, not updating existing data.\r\n\r\n**Parsing and Reading Large Excel Files with the Open XML SDK**\r\nhttp://blogs.msdn.com/b/brian_jones/archive/2010/05/27/parsing-and-reading-large-excel-files-with-the-open-xml-sdk.aspx [Dead Link]\r\nhttps://web.archive.org/web/20151205145806/http://blogs.msdn.com/b/brian_jones/archive/2010/05/27/parsing-and-reading-large-excel-files-with-the-open-xml-sdk.aspx\r\n\r\n**Writing Large Excel Files with the Open XML SDK**\r\nhttp://blogs.msdn.com/b/brian_jones/archive/2010/06/22/writing-large-excel-files-with-the-open-xml-sdk.aspx [Dead Link]\r\nhttps://web.archive.org/web/20160216062257/http://blogs.msdn.com/b/brian_jones/archive/2010/06/22/writing-large-excel-files-with-the-open-xml-sdk.aspx\r\n\r\n**Performance issue while reading/writing large excel files using OpenXML SDK**\r\nhttp://tech-turf.blogspot.com/2015/10/performance-issue-while-readingwriting.html\r\n\r\n**How to read and write Excel cells with OpenXML and C#**\r\nhttp://fczaja.blogspot.com/2013/05/how-to-read-and-write-excel-cells-with.html\r\n\r\n**How to properly use OpenXmlWriter to write large Excel files**\r\nhttp://polymathprogrammer.com/2012/08/06/how-to-properly-use-openxmlwriter-to-write-large-excel-files/"},{"Id":"26860966811","Type":"PullRequestEvent","CreatedAt":"2023-02-03T18:20:34","Actor":"AlexHedley","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1336","RelatedDescription":"Opened pull request \"Add in tags\" (#1336) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"26860894653","Type":"PullRequestEvent","CreatedAt":"2023-02-03T18:16:47","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1302","RelatedDescription":"Closed pull request \"Vba extension fix for 2.20.0\" (#1302) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"26860870386","Type":"PullRequestEvent","CreatedAt":"2023-02-03T18:15:30","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1301","RelatedDescription":"Merged pull request \"vbaProject should use TargetFileExtension .bin\" (#1301) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"26860004731","Type":"IssuesEvent","CreatedAt":"2023-02-03T17:30:59","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1323","RelatedDescription":"Closed issue \"Remove initial load in OpenXmlPackage\" (#1323) at dotnet/Open-XML-SDK","RelatedBody":"Within the constructor of OpenXmlPackage, it does an initial load of all the parts. This is both premature as well as prevents us from having control over certain aspects of the loading (i.e. package shape, how to handle certain error conditions, etc). We should move this design to be more of an on-demand load if possible.\r\n\r\n- [x] Refactor load out of constructor (#1324)\r\n- [x] Refactor malformed URI handling (#1322)\r\n- [x] Refactor main part retrieval (#1324)\r\n- [x] Refactor relationship/part loading (#1328, #1330 )\r\n- [x] Refactor recursive relationship/part loading (#1332)"},{"Id":"26859959780","Type":"IssuesEvent","CreatedAt":"2023-02-03T17:28:49","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/566","RelatedDescription":"Closed issue \"SAX Approach Replace Example\" (#566) at dotnet/Open-XML-SDK","RelatedBody":"I'm looking for an example of using the SAX approach (instead of DOM) to open a large file and perform a replace on a given value, then save the file.\r\n\r\nI think this would be a useful addition to the [Documentation](https://docs.microsoft.com/en-gb/office/open-xml/open-xml-sdk).\r\n\r\nHow to: Search and replace text in a document part (Open XML SDK)\r\nhttps://docs.microsoft.com/en-us/office/open-xml/how-to-search-and-replace-text-in-a-document-part\r\n\r\nThis uses a `Stream`.\r\n\r\nHow to: Parse and read a large spreadsheet document (Open XML SDK)\r\nhttps://docs.microsoft.com/en-us/office/open-xml/how-to-parse-and-read-a-large-spreadsheet\r\n\r\n```csharp\r\n// The SAX approach.\r\nstatic void ReadExcelFileSAX(string fileName)\r\n{\r\n    using (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(fileName, false))\r\n    {\r\n        WorkbookPart workbookPart = spreadsheetDocument.WorkbookPart;\r\n        WorksheetPart worksheetPart = workbookPart.WorksheetParts.First();\r\n\r\n        OpenXmlReader reader = OpenXmlReader.Create(worksheetPart);\r\n        string text;\r\n        while (reader.Read())\r\n        {\r\n            if (reader.ElementType == typeof(CellValue))\r\n            {\r\n                text = reader.GetText();\r\n                Console.Write(text + \" \");\r\n            }\r\n        }\r\n        Console.WriteLine();\r\n        Console.ReadKey();\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\nIf I read in the \"text\" and wish to replace this:\r\n\r\n```csharp\r\nusing (WordprocessingDocument wordDoc = WordprocessingDocument.Open(filePath, true))\r\n{\r\n    Document document = wordDoc.MainDocumentPart.Document;\r\n    OpenXmlReader reader = OpenXmlReader.Create(document);\r\n    while (reader.Read())\r\n    {\r\n        //OpenXmlElement element = reader.LoadCurrentElement();\r\n        //text = element.InnerText;\r\n        text = reader.GetText();\r\n    }\r\n}\r\n```\r\n\r\n`OpenXmlWriter` expects an `OpenXmlPart` or `Stream` when you create it.\r\n\r\n```csharp\r\nOpenXmlWriter writer = OpenXmlWriter.Create(#);\r\nwriter.WriteStartElement(reader);\r\nwriter.WriteElement(#);\r\nwriter.WriteEndElement();\r\nwriter.Close();\r\n```\r\n\r\nWhat is the supported approach/method for this?\r\n\r\nUsing the DOM approach on large files can cause memory exceptions.\r\n\r\n---\r\n\r\nThere are a number of blog posts documenting how to use the `OpenXmlWriter` but this is for creating new files or adding new elements to an existing file, not updating existing data.\r\n\r\n**Parsing and Reading Large Excel Files with the Open XML SDK**\r\nhttp://blogs.msdn.com/b/brian_jones/archive/2010/05/27/parsing-and-reading-large-excel-files-with-the-open-xml-sdk.aspx [Dead Link]\r\nhttps://web.archive.org/web/20151205145806/http://blogs.msdn.com/b/brian_jones/archive/2010/05/27/parsing-and-reading-large-excel-files-with-the-open-xml-sdk.aspx\r\n\r\n**Writing Large Excel Files with the Open XML SDK**\r\nhttp://blogs.msdn.com/b/brian_jones/archive/2010/06/22/writing-large-excel-files-with-the-open-xml-sdk.aspx [Dead Link]\r\nhttps://web.archive.org/web/20160216062257/http://blogs.msdn.com/b/brian_jones/archive/2010/06/22/writing-large-excel-files-with-the-open-xml-sdk.aspx\r\n\r\n**Performance issue while reading/writing large excel files using OpenXML SDK**\r\nhttp://tech-turf.blogspot.com/2015/10/performance-issue-while-readingwriting.html\r\n\r\n**How to read and write Excel cells with OpenXML and C#**\r\nhttp://fczaja.blogspot.com/2013/05/how-to-read-and-write-excel-cells-with.html\r\n\r\n**How to properly use OpenXmlWriter to write large Excel files**\r\nhttp://polymathprogrammer.com/2012/08/06/how-to-properly-use-openxmlwriter-to-write-large-excel-files/"},{"Id":"26859940614","Type":"IssuesEvent","CreatedAt":"2023-02-03T17:27:53","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1334","RelatedDescription":"Closed issue \"Reading comments from PowerPoint using Open XML SDK SAX Model\" (#1334) at dotnet/Open-XML-SDK","RelatedBody":"**Is your feature request related to a problem? Please describe.**\r\nWe are trying to read comments of large files and if we use DOM based reading then memory utilization is very high, hence looking a solution with SAX model.\r\n\r\n**Describe the solution you'd like**\r\nI would like to read/open large PowerPoint file and find comments in it\r\n\r\n**Describe alternatives you've considered**\r\nWe are able to read comments using DOM model but its utilizing higher memory approx. 9x than original file size.\r\n\r\n**Additional context**\r\nSample pseudo code as below\r\n```csharp\r\nusing (var presentationDocument = PresentationDocument.Open(stream, false))\r\n{\r\n    using (var reader = OpenXmlReader.Create(presentationDocument?.PresentationPart))\r\n    {\r\n        while (reader.Read())\r\n        {\r\n            Console.WriteLine(reader.ElementType);\r\n            //Looking if any comments are present in any of the slides, then read them.\r\n        }                   \r\n    }\r\n}\r\n```\r\n\r\n*edited for format*\r\n"},{"Id":"26859935957","Type":"IssuesEvent","CreatedAt":"2023-02-03T17:27:40","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1335","RelatedDescription":"Closed issue \"Reading large  Excel document with Open XML SAX model\" (#1335) at dotnet/Open-XML-SDK","RelatedBody":"We are trying to read a comments and find if the track changes are enabled on a large excel document through SAX model\r\n\r\nDescribe the solution you'd like\r\nWe would like to read/open a large Excel file and find the comments in it\r\n\r\nDescribe alternatives you've considered\r\nWe are able to read comments using Open XML DOM model but leads to higher memory demand approx. 9x than original file size.\r\n\r\nAdditional context\r\n\r\nSample pseudo code below\r\n\r\n```csharp\r\nusing (var reader = OpenXmlReader.Create(spreadSheetDocument.WorkbookPart))\r\n{\r\n    while(reader.Read())\r\n    {\r\n        Console.WriteLine(reader.ElementType);\r\n        // Can't the below if be better readable?\r\n        if (reader?.ElementType == typeof(CommentRangeStart))\r\n        {\r\n            // Chance that this is a comment.\r\n            //CommentRangeStart element = reader.LoadCurrentElement() as CommentRangeStart;\r\n            //Console.WriteLine($\"Comment text {reader.GetText()}, InnerText:{element.InnerText}\");\r\n            result = true;\r\n        }\r\n        else if(reader.ElementType == typeof(Deleted)\r\n              || reader.ElementType == typeof(Inserted)\r\n              || reader.ElementType == typeof(InsertedRun)\r\n              || reader.ElementType == typeof(InsertedMathControl)\r\n              || reader.ElementType == typeof(ParagraphPropertiesChange)\r\n              )\r\n        {\r\n            result = true;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n*@twsouthwick edited for format*"},{"Id":"26859846989","Type":"PullRequestEvent","CreatedAt":"2023-02-03T17:23:28","Actor":"twsouthwick","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1332","RelatedDescription":"Merged pull request \"Do not require container to load all relationships in constructor\" (#1332) at dotnet/Open-XML-SDK","RelatedBody":"Opening a package would implicitly open all child relationships (parts, dataparts, links, etc) even if those are never needed. This change adds a layer between the container and the package to handle the relationships so that they can be retrieved lazily.\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-02-05T03:30:25.1032798Z","RunDurationInMilliseconds":720}