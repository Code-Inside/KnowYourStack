{"Data":{"Sdk":{"Events":[{"Id":"42876228209","Type":"IssuesEvent","CreatedAt":"2024-10-15T19:20:00","Actor":"github-actions[bot]","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1811","RelatedDescription":"Opened issue \"Manual approval required for workflow run 11352925951: Approval for publishing to Nuget.org\" (#1811) at dotnet/Open-XML-SDK","RelatedBody":"Please approve or deny the deployment to Nuget.org\n\nWorkflow is pending manual review.\nURL: https://api.github.com/dotnet/Open-XML-SDK/actions/runs/11352925951\n\nRequired approvers: [twsouthwick tomjebo mikeebowen]\n\nRespond \"approved\", \"approve\", \"lgtm\", \"yes\" to continue workflow or \"denied\", \"deny\", \"no\" to cancel."},{"Id":"42875653899","Type":"PullRequestEvent","CreatedAt":"2024-10-15T19:00:45","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1810","RelatedDescription":"Merged pull request \"Update CHANGELOG.md\" (#1810) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"42875619352","Type":"PullRequestEvent","CreatedAt":"2024-10-15T18:59:42","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1810","RelatedDescription":"Opened pull request \"Update CHANGELOG.md\" (#1810) at dotnet/Open-XML-SDK","RelatedBody":""},{"Id":"42875440625","Type":"IssuesEvent","CreatedAt":"2024-10-15T18:53:47","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1762","RelatedDescription":"Closed issue \"c16:uniqueID element has wrong case\" (#1762) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nWhen writing out the c16:uniqueId element using the UniqueID class\r\n```xml\r\n<c:ser>\r\n    ...\r\n    <c:extLst>\r\n        <c:ext xmlns:c16=\"http://schemas.microsoft.com/office/drawing/2014/chart\"\r\n               uri=\"{C3380CC4-5D6E-409C-BE32-E72D297353CC}\">\r\n            <c16:uniqueID val=\"{00000000-2153-43F5-A17B-C2679033F518}\" />\r\n        </c:ext>\r\n    </c:extLst>\r\n</c:ser>\r\n```\r\n\r\n**Observed behavior**\r\n`c16:uniqueID` is written\r\n\r\n**Expected behavior**\r\n`c16:uniqueId` should be written\r\n\r\n**Desktop (please complete the following information):**\r\n - DocumentFormat.OpenXml Version: 3.0.2\r\n\r\n"},{"Id":"42802394249","Type":"IssuesEvent","CreatedAt":"2024-10-13T18:43:24","Actor":"Reules","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1809","RelatedDescription":"Opened issue \"After AddWorkbookPart() I recieved \"Cannot retrieve parts of writeonly container\" Exception from System.IO.Packaging\" (#1809) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\nRecently I updated OpenXML from 2.18.0 to 3.1.0.\nThe function AddWorkbookPart() didn't work anymore. \nAlways get the System.IO.IOException \"Cannot retrieve parts of writeonly container\".\n\n**Screenshots**\n![Image](https://github.com/user-attachments/assets/59a63504-4b01-4a79-b859-ed0a99cfdf9e)\n\nAnyone knows the problem?\n"},{"Id":"42776471252","Type":"IssuesEvent","CreatedAt":"2024-10-11T20:11:10","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1783","RelatedDescription":"Closed issue \"Unable to Create Custom Icon Set for Conditional Formatting\" (#1783) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nI am trying to set up conditional formatting in an Excel file using the DocumentFormat.OpenXml library. Specifically, I want to use a red X and a green checkmark from the ThreeSymbols icon set. However, this icon set also includes a yellow exclamation mark, which I do not want to use. The issue is that the library does not allow the creation of a custom icon set to exclude the yellow exclamation mark.\r\n\r\n**To Reproduce**\r\n\r\nSteps to reproduce the behavior:\r\n1.\tCreate a new Excel file.\r\n2.\tApply conditional formatting using the ThreeSymbols icon set.\r\n3.\tAttempt to customize the icon set to exclude the yellow exclamation mark.\r\n\r\n\r\n**Expected behavior**\r\n•\tIf the value is equal to 0, no icon should be displayed.\r\n•\tIf the value is equal to 1, a green checkmark icon should be displayed.\r\n•\tIf the value is greater than 1, a red X icon should be displayed.\r\n\r\nAdditional Information: I also tried using the IconFilter class, but it did not work as expected.\r\n**Additional context**\r\n`using DocumentFormat.OpenXml.Packaging;\r\nusing DocumentFormat.OpenXml.Spreadsheet;\r\nusing DocumentFormat.OpenXml;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing DocumentFormat.OpenXml.Office2010.Excel;\r\nusing ConditionalFormatting = DocumentFormat.OpenXml.Spreadsheet.ConditionalFormatting;\r\nusing ConditionalFormattingRule = DocumentFormat.OpenXml.Spreadsheet.ConditionalFormattingRule;\r\nusing IconSet = DocumentFormat.OpenXml.Spreadsheet.IconSet;\r\n\r\nnamespace ConsoleApp5\r\n{\r\n    public class ExcelHeaderProtection\r\n    {\r\n        public void ConditionalFormattingIconSet()\r\n        {\r\n            using (var spreadsheetDocument = SpreadsheetDocument.Create(@\"C:\\temp\\EXCEL_EXCEL\\ConditionalFormattingIconSet.xlsx\", SpreadsheetDocumentType.Workbook))\r\n            {\r\n                var workbookPart = spreadsheetDocument.AddWorkbookPart();\r\n\r\n                var worksheetPart = workbookPart.AddNewPart<WorksheetPart>();\r\n                var workbook = new Workbook();\r\n\r\n                var worksheet = new Worksheet();\r\n                worksheetPart.Worksheet = worksheet;\r\n\r\n                AddDataConditionalFormattingIconSet(workbookPart, worksheetPart);\r\n\r\n                var cColumn = worksheet.AppendChild(new ConditionalFormatting());\r\n                cColumn.SequenceOfReferences = new ListValue<StringValue> { InnerText = \"C:C\" };\r\n\r\n                // Rule for Red X\r\n                var cfRuleRedX = cColumn.AppendChild(new ConditionalFormattingRule());\r\n                cfRuleRedX.Type = ConditionalFormatValues.IconSet;\r\n                cfRuleRedX.Priority = 1;\r\n\r\n                var iconSetRedX = new IconSet()\r\n                {\r\n                    ShowValue = false,\r\n                    Reverse = false,\r\n                    IconSetValue = new EnumValue<IconSetValues>(IconSetValues.ThreeSymbols)\r\n                };\r\n\r\n                iconSetRedX.AppendChild(new ConditionalFormatValueObject\r\n                {\r\n                    Type = ConditionalFormatValueObjectValues.Number,\r\n                    Val = \"0\",\r\n                    GreaterThanOrEqual = BooleanValue.FromBoolean(true),\r\n                });\r\n                iconSetRedX.AppendChild(new ConditionalFormatValueObject\r\n                {\r\n                    Type = ConditionalFormatValueObjectValues.Number,\r\n                    Val = \"1\",\r\n                    GreaterThanOrEqual = BooleanValue.FromBoolean(false),\r\n                });\r\n                iconSetRedX.AppendChild(new ConditionalFormatValueObject\r\n                {\r\n                    Type = ConditionalFormatValueObjectValues.Number,\r\n                    Val = \"2\",\r\n                    GreaterThanOrEqual = BooleanValue.FromBoolean(false),\r\n                });\r\n\r\n                cfRuleRedX.Append(iconSetRedX);\r\n\r\n                // Rule for Green Check\r\n                var cfRuleGreenCheck = cColumn.AppendChild(new ConditionalFormattingRule());\r\n                cfRuleGreenCheck.Type = ConditionalFormatValues.IconSet;\r\n                cfRuleGreenCheck.Priority = 2;\r\n\r\n                var iconSetGreenCheck = new IconSet()\r\n                {\r\n                    ShowValue = false,\r\n                    Reverse = false,\r\n                    IconSetValue = new EnumValue<IconSetValues>(IconSetValues.ThreeSymbols)\r\n                };\r\n\r\n                iconSetGreenCheck.AppendChild(new ConditionalFormatValueObject\r\n                {\r\n                    Type = ConditionalFormatValueObjectValues.Number,\r\n                    Val = \"0\",\r\n                    GreaterThanOrEqual = BooleanValue.FromBoolean(false),\r\n                });\r\n                iconSetGreenCheck.AppendChild(new ConditionalFormatValueObject\r\n                {\r\n                    Type = ConditionalFormatValueObjectValues.Number,\r\n                    Val = \"1\",\r\n                    GreaterThanOrEqual = BooleanValue.FromBoolean(false),\r\n                });\r\n                iconSetGreenCheck.AppendChild(new ConditionalFormatValueObject\r\n                {\r\n                    Type = ConditionalFormatValueObjectValues.Number,\r\n                    Val = \"2\",\r\n                    GreaterThanOrEqual = BooleanValue.FromBoolean(true),\r\n                });\r\n\r\n                cfRuleGreenCheck.Append(iconSetGreenCheck);\r\n\r\n                worksheetPart.Worksheet.Save();\r\n                var sheets = new Sheets();\r\n                var sheet = new Sheet();\r\n                sheet.Name = \"Sheet1\";\r\n                sheet.SheetId = 1;\r\n                sheet.Id = workbookPart.GetIdOfPart(worksheetPart);\r\n                sheets.Append(sheet);\r\n                workbook.Append(sheets);\r\n\r\n                spreadsheetDocument.WorkbookPart.Workbook = workbook;\r\n                spreadsheetDocument.WorkbookPart.Workbook.Save();\r\n            }\r\n        }\r\n\r\n        internal void AddDataConditionalFormattingIconSet(WorkbookPart workbookPart, WorksheetPart worksheetPart)\r\n        {\r\n            SheetData sheetData = new SheetData();\r\n\r\n            var sharedStringPart = workbookPart.AddNewPart<SharedStringTablePart>();\r\n            sharedStringPart.SharedStringTable = new SharedStringTable();\r\n            sharedStringPart.SharedStringTable.AppendChild(new SharedStringItem(new Text(\"Default Three Arrows\")));\r\n            sharedStringPart.SharedStringTable.AppendChild(new SharedStringItem(new Text(\"Custom ThreeTrafficLights2 Minimum:25% Maximum:75%\")));\r\n            sharedStringPart.SharedStringTable.AppendChild(new SharedStringItem(new Text(\"Default Five Rating\")));\r\n\r\n            var row1 = new Row() { RowIndex = 1 };\r\n            var row2 = new Row() { RowIndex = 2 };\r\n            var row3 = new Row() { RowIndex = 3 };\r\n\r\n            sheetData.Append(row1);\r\n            sheetData.Append(row2);\r\n            sheetData.Append(row3);\r\n\r\n            var cellA1 = new Cell() { CellReference = \"A1\", DataType = new EnumValue<CellValues>(CellValues.SharedString) };\r\n            cellA1.CellValue = new CellValue(\"0\");\r\n            var cellA2 = new Cell() { CellReference = \"A2\", DataType = new EnumValue<CellValues>(CellValues.SharedString) };\r\n            cellA2.CellValue = new CellValue(\"1\");\r\n            var cellA3 = new Cell() { CellReference = \"A3\", DataType = new EnumValue<CellValues>(CellValues.SharedString) };\r\n            cellA3.CellValue = new CellValue(\"2\");\r\n\r\n            row1.Append(cellA1);\r\n            row2.Append(cellA2);\r\n            row3.Append(cellA3);\r\n\r\n            row1.Append(new Cell() { CellReference = \"B1\", CellValue = new CellValue(\"1\") });\r\n            row1.Append(new Cell() { CellReference = \"C1\", CellValue = new CellValue(\"2\") });\r\n            row1.Append(new Cell() { CellReference = \"D1\", CellValue = new CellValue(\"3\") });\r\n            row1.Append(new Cell() { CellReference = \"E1\", CellValue = new CellValue(\"4\") });\r\n            row1.Append(new Cell() { CellReference = \"F1\", CellValue = new CellValue(\"5\") });\r\n\r\n            row2.Append(new Cell() { CellReference = \"B2\", CellValue = new CellValue(\"1\") });\r\n            row2.Append(new Cell() { CellReference = \"C2\", CellValue = new CellValue(\"2\") });\r\n            row2.Append(new Cell() { CellReference = \"D2\", CellValue = new CellValue(\"3\") });\r\n            row2.Append(new Cell() { CellReference = \"E2\", CellValue = new CellValue(\"4\") });\r\n            row2.Append(new Cell() { CellReference = \"F2\", CellValue = new CellValue(\"5\") });\r\n\r\n            row3.Append(new Cell() { CellReference = \"B3\", CellValue = new CellValue(\"1\") });\r\n            row3.Append(new Cell() { CellReference = \"C3\", CellValue = new CellValue(\"2\") });\r\n            row3.Append(new Cell() { CellReference = \"D3\", CellValue = new CellValue(\"3\") });\r\n            row3.Append(new Cell() { CellReference = \"E3\", CellValue = new CellValue(\"4\") });\r\n            row3.Append(new Cell() { CellReference = \"F3\", CellValue = new CellValue(\"5\") });\r\n\r\n            worksheetPart.Worksheet.Append(sheetData);\r\n        }\r\n    }\r\n}\r\n`\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-10-16T03:30:25.1074925Z","RunDurationInMilliseconds":589}