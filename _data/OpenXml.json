{"Data":{"Sdk":{"Events":[{"Id":"32496128299","Type":"IssuesEvent","CreatedAt":"2023-10-11T21:51:47","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1208","RelatedDescription":"Closed issue \"Absolute path is not found\" (#1208) at dotnet/Open-XML-SDK","RelatedBody":"**Describe the bug**\r\nThe SDK cannot find absolute path to local directory in workbook.xml even though it exists in the XML attribute is \"x15ac:absPath\".\r\n\r\nFor further context, I refer to question I made on Stackoverflow, where I was recommended to file an issue here:\r\nhttps://stackoverflow.com/questions/73633816/absolute-path-not-detected-in-open-xml-sdk/73641509?noredirect=1#comment130327161_73641509\r\n\r\n**Screenshots**\r\nSee question on Stackoverflow for screenshots.\r\n\r\n**To Reproduce**\r\n\r\nTo reproduce use this method on a spreadsheet with absolute path. You may find a data sample with absolute path here: \r\nhttps://github.com/Asbjoedt/CLISC/blob/master/Docs/Mappe1.xlsx\r\n\r\nMethod that ought to work\r\n```csharp\r\nusing DocumentFormat.OpenXml.Packaging;\r\nusing DocumentFormat.OpenXml.Spreadsheet;\r\nusing DocumentFormat.OpenXml.Office2013.ExcelAc;\r\n\r\npublic bool Check_AbsolutePath(string filepath)\r\n{\r\n    bool absolutepath = false;\r\n\r\n    using (SpreadsheetDocument spreadsheet = SpreadsheetDocument.Open(filepath, false))\r\n    {\r\n        if (spreadsheet.WorkbookPart.Workbook.AbsolutePath != null)\r\n        {\r\n            Console.WriteLine(\"--> Absolute path to local directory detected\");\r\n            absolutepath = true;\r\n        }\r\n    }\r\n    return absolutepath;\r\n}\r\n```\r\n\r\n**Observed behavior**\r\nNo absolute path is found in spreadsheet despite workbook.xml has absolutepath. XML attribute is \"x15ac:absPath\". I need to remove absolute paths in spreadsheets, which I cannot do if they cannot be found.\r\n\r\n**Expected behavior**\r\nAbsolute path was found as get and i should be able to remove it by set \"\".\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows 11\r\n - .NET Target: I dunno, I just use C# in Visual Studio as \"console application\"\r\n - DocumentFormat.OpenXml Version: 2.18.0\r\n\r\n**Additional context**\r\nThx for your attention, I hope you can fix this.\r\n"},{"Id":"32342304581","Type":"IssuesEvent","CreatedAt":"2023-10-05T13:42:47","Actor":"tauheedul","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1532","RelatedDescription":"Opened issue \"Feature request for Open XML SDK - Exclude unsupported XML characters during file generation\" (#1532) at dotnet/Open-XML-SDK","RelatedBody":"I have encountered an scenario where a user has entered data into the database which included control characters (most likely from a 3rd party system).\r\n\r\nSubequently when attempting to export the data to an OpenXML spreadsheet directly from the database e.g. creating a spreadsheet using a DataTable with no pre-processing, the Open XML plugin fails because of the invalid hex characters detected.\r\n\r\n**Suggested solution**\r\nUpon saving a datatable and while parsing each column value, detect Invalid Xml Characters and exclude them from the output file or transform them to an XML equivalent character where possible.\r\n\r\n**The workaround**\r\nThe workaround for us is to find every field at source and exclude invalid characters being added to the database, but this isn't feasable for a large system.\r\n\r\nThe other solution is to map the data table manually parse every column while mapping the columns and exclude special characters there, but that adds additional overhead for large datasets because the table will be iterated again when OpenXML opens the dataset.\r\n\r\n**Example error**\r\n\r\n![image](https://github.com/dotnet/Open-XML-SDK/assets/9335220/77930566-bd6d-4511-aa47-aae3418bb631)\r\n\r\n- Exception message\r\n\r\n'', hexadecimal value 0x02, is an invalid character.\r\n\r\n- Exception stacktrace\r\n\r\n   at System.Xml.XmlUtf8RawTextWriter.InvalidXmlChar(Int32 ch, Byte* pDst, Boolean entitize)\r\n   at System.Xml.XmlUtf8RawTextWriter.WriteElementTextBlock(Char* pSrc, Char* pSrcEnd)\r\n   at System.Xml.XmlUtf8RawTextWriter.WriteString(String text)\r\n   at System.Xml.XmlWellFormedWriter.WriteString(String text)\r\n   at DocumentFormat.OpenXml.OpenXmlLeafTextElement.WriteContentTo(XmlWriter w)\r\n   at DocumentFormat.OpenXml.OpenXmlElement.WriteTo(XmlWriter xmlWriter)\r\n   at DocumentFormat.OpenXml.OpenXmlCompositeElement.WriteContentTo(XmlWriter w)\r\n   at DocumentFormat.OpenXml.OpenXmlElement.WriteTo(XmlWriter xmlWriter)\r\n   at DocumentFormat.OpenXml.OpenXmlCompositeElement.WriteContentTo(XmlWriter w)\r\n   at DocumentFormat.OpenXml.OpenXmlElement.WriteTo(XmlWriter xmlWriter)\r\n   at DocumentFormat.OpenXml.OpenXmlCompositeElement.WriteContentTo(XmlWriter w)\r\n   at DocumentFormat.OpenXml.OpenXmlElement.WriteTo(XmlWriter xmlWriter)\r\n   at DocumentFormat.OpenXml.OpenXmlCompositeElement.WriteContentTo(XmlWriter w)\r\n   at DocumentFormat.OpenXml.OpenXmlPartRootElement.WriteTo(XmlWriter xmlWriter)\r\n   at DocumentFormat.OpenXml.OpenXmlPartRootElement.Save(Stream stream)\r\n   at DocumentFormat.OpenXml.OpenXmlPartRootElement.SaveToPart(OpenXmlPart openXmlPart)\r\n   at DocumentFormat.OpenXml.OpenXmlPartRootElement.Save()\r\n   at DocumentFormat.OpenXml.Packaging.OpenXmlPackage.TrySavePartContent(OpenXmlPart part)\r\n   at DocumentFormat.OpenXml.Packaging.OpenXmlPackage.SavePartContents(Boolean save)\r\n   at DocumentFormat.OpenXml.Packaging.OpenXmlPackage.Dispose(Boolean disposing)\r\n   at DocumentFormat.OpenXml.Packaging.OpenXmlPackage.Dispose()\r\n   at TestOpenXmlSpreadsheet.Helper.ExportToExcelDownload(DataSet dataSet) in C:\\Users\\user\\Source\\repos\\TestOpenXmlSpreadsheet\\TestOpenXmlSpreadsheet\\Form1.cs:line 118\r\n   at TestOpenXmlSpreadsheet.Form1.btnTest_Click(Object sender, EventArgs e) in C:\\Users\\user\\Source\\repos\\TestOpenXmlSpreadsheet\\TestOpenXmlSpreadsheet\\Form1.cs:line 39\r\n   at System.Windows.Forms.Control.OnClick(EventArgs e)\r\n   at System.Windows.Forms.Button.OnClick(EventArgs e)\r\n   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)\r\n   at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.ButtonBase.WndProc(Message& m)\r\n   at System.Windows.Forms.Button.WndProc(Message& m)\r\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, WM msg, IntPtr wparam, IntPtr lparam)\r\n"},{"Id":"32324764464","Type":"PullRequestEvent","CreatedAt":"2023-10-04T23:16:34","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1531","RelatedDescription":"Merged pull request \"August 2023 Microsoft 365 update\" (#1531) at dotnet/Open-XML-SDK","RelatedBody":"### Added\r\n\r\n- `DocumentFormat.OpenXml.Office.PowerPoint.Y2023.M02.Main` namespace\r\n- `DocumentFormat.OpenXml.Office.PowerPoint.Y2022.M03.Main` namespace\r\n- `DocumentFormat.OpenXml.Office.SpreadSheetML.Y2021.ExtLinks2021` namespace\r\n\r\n### Breaking Changes\r\n\r\n- `Model3D` now represents the modified xml element tag name `am3d.model3d` (Previously `am3d.model3D`)\r\n- Removed `DocumentFormat.OpenXml.Office.SpreadSheetML.Y2022.PivotRichData.PivotCacheHasRichValuePivotCacheRichInfo`\r\n- Removed `DocumentFormat.OpenXml.Office.SpreadSheetML.Y2022.PivotRichData.`"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-10-12T03:30:24.2912133Z","RunDurationInMilliseconds":861}