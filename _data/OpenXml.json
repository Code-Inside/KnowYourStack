{"Data":{"Sdk":{"Events":[{"Id":"16197635781","Type":"PullRequestEvent","CreatedAt":"2021-05-04T16:24:55","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/924","RelatedDescription":"Merged pull request \"Cache search better in UniqueAttributeValueConstraint\" (#924) at OfficeDev/Open-XML-SDK","RelatedBody":"If a document happened to have a large number of elements that have the\r\nUniqueAttributeValueConstraint validation, it will end up recalculating\r\nthe values for the constraint way too often. This was because the\r\nconstraint was generating the cached lookup with a key using the\r\nattribute text itself. This change updates the lookup to cache all\r\npossible duplicates for the element in question so it only has to be\r\nsearched once.\r\n\r\nFixes #918 "},{"Id":"16197635697","Type":"IssuesEvent","CreatedAt":"2021-05-04T16:24:55","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/918","RelatedDescription":"Closed issue \"OpenXml validation works slow starting from version 2.11.3\" (#918) at OfficeDev/Open-XML-SDK","RelatedBody":"- Issue with the OpenXml library\r\n\r\nWe have a customer's Wordprocessing document **with a lot of tracked changes** that hangs after we update OpenXml.\r\n\r\nInvestigation shows that:\r\n- It hangs when we call OpenXmlValidator's **Validate** method against MainDocumentPart of this document. \r\n- It works quick on version 2.11.2\r\n- It was broken on version 2.11.3 I have reviewed [changelog ](https://github.com/OfficeDev/Open-XML-SDK/blob/main/CHANGELOG.md)and there is no information that means quality improvement or making algorithm of validation  more complex. Against, there were some performance improvements like removing recursion. **This points to think that there was some side effect in this build that causes such performance impact**.\r\n- Version 2.12.0 has a CancellationToken support which is great, but is more like a workaround for our situation than a fix, as we still want to validate parts as quick as before.\r\n\r\nAfter this innitial investigation I ran main branch with such simple code added against CPU profiler:\r\n\r\n```cs\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var doc = WordprocessingDocument.Open(@\"d:\\xxxxxx\\Workspace\\Desk\\Sample.docx\", false))\r\n            {\r\n                var validator = new OpenXmlValidator();\r\n                validator.Validate(doc.MainDocumentPart);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nProfiler shows that currently the slowest method is DocumentFormat.OpenXml.Validation.ValidationTraverser **ValidatingTraverse** \r\n![image](https://user-images.githubusercontent.com/52368905/114165458-2ea7d700-9935-11eb-825e-2c7063cc63a3.png)\r\n\r\nAt this point my investigation stops as I do not have a brunch with build before this method starts works slow and this will be out of scope of my investigation, but I think given information should be enough to at least point to the issue.\r\n\r\nAlso see attached sample document and VS profiller dump file \r\n[Sample.docx](https://github.com/OfficeDev/Open-XML-SDK/files/6284918/Sample.docx)\r\n[Report20210409-1040.zip](https://github.com/OfficeDev/Open-XML-SDK/files/6284919/Report20210409-1040.zip)\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"16144916488","Type":"PullRequestEvent","CreatedAt":"2021-04-29T22:26:26","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/928","RelatedDescription":null,"RelatedBody":""},{"Id":"16144916264","Type":"PullRequestEvent","CreatedAt":"2021-04-29T22:26:24","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/928","RelatedDescription":"Closed pull request \"Add commentsids part to maindocumentpart relationship\" (#928) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"16144908836","Type":"PullRequestEvent","CreatedAt":"2021-04-29T22:25:37","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/924","RelatedDescription":null,"RelatedBody":"If a document happened to have a large number of elements that have the\r\nUniqueAttributeValueConstraint validation, it will end up recalculating\r\nthe values for the constraint way too often. This was because the\r\nconstraint was generating the cached lookup with a key using the\r\nattribute text itself. This change updates the lookup to cache all\r\npossible duplicates for the element in question so it only has to be\r\nsearched once.\r\n\r\nFixes #918 "},{"Id":"16144908557","Type":"PullRequestEvent","CreatedAt":"2021-04-29T22:25:35","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/924","RelatedDescription":"Closed pull request \"Cache search better in UniqueAttributeValueConstraint\" (#924) at OfficeDev/Open-XML-SDK","RelatedBody":"If a document happened to have a large number of elements that have the\r\nUniqueAttributeValueConstraint validation, it will end up recalculating\r\nthe values for the constraint way too often. This was because the\r\nconstraint was generating the cached lookup with a key using the\r\nattribute text itself. This change updates the lookup to cache all\r\npossible duplicates for the element in question so it only has to be\r\nsearched once.\r\n\r\nFixes #918 "}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2021-05-08T05:30:32.5131472Z","RunDurationInMilliseconds":855}