{"Data":{"Sdk":{"Events":[{"Id":"47500156897","Type":"IssuesEvent","CreatedAt":"2025-03-12T23:31:50","Actor":"mikeebowen","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/919","RelatedDescription":"Closed issue \"Copy pictures from one generated Word document to another one\" (#919) at dotnet/Open-XML-SDK","RelatedBody":"# Before submitting an issue, please fill this out\r\n\r\nIs this a:\r\n- [ ] Issue with the OpenXml library\r\n- [x] Question on library usage\r\n\r\nI ask here, because I had any answer [on StackOverflow](https://stackoverflow.com/questions/67038242) for several weeks.\r\n\r\n---------------- Remove this line and above before posting ----------------\r\n\r\n**Description**\r\n\r\nI generate an SSRS report that I save as a Word document. That document contain pictures (charts as plat images). \r\nI don't really save the Word document, I have it open in memory.\r\n\r\nI use then OpenXML to create another word document, in witch I need to copy the pictures from the SSRS report.   \r\n\r\nI try to get the drawings from the ssrs report, and insert them in the new word document.\r\n\r\nI tried to insert pictures from the disk to the generated document, that works well. What does not work, is copying one picture from one document to another. \r\nI don't need to copy all the content of a document to another. I need to copy just a picture.\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET 5\r\n- DocumentFormat.OpenXml Version: 2.12.3\r\n\r\n**Repro**\r\n\r\n```csharp\r\nMainDocumentPart ssrsMainPart = ssrsDoc.MainDocumentPart;\r\nvar drawings = ssrsMainPart.Document.Descendants<Drawing>().ToList();\r\n```\r\nand then insert it in the new document\r\n```csharp\r\nMainDocumentPart mainPart = wordDoc.MainDocumentPart;\r\nBody body = mainPart.Document.Body;\r\n```\r\n```csharp\r\nfor (int i = 0; i < 10; i++)\r\n{\r\n    if (i < drawings.Count())\r\n    {\r\n        var myDrawing = drawings.Skip(i).First();\r\n        myDrawing.Remove();\r\n        body.Append(myDrawing); \r\n        body.Append(new Paragraph());\r\n    }\r\n}\r\n```\r\nAs result I get in the resulting document only the picture placeholders, of the same size as in ssrs Word Document, but the pictures are empty. \r\n\r\nI tried to copy the ImageData as well, using the following code:\r\n\r\n```csharp\r\nforeach (var e in ssrsDoc.MainDocumentPart.Document.Body.Elements())\r\n{\r\n\tvar clonedElement = e.CloneNode(true);\r\n\tclonedElement.Descendants<DocumentFormat.OpenXml.Drawing.Blip>().ToList().ForEach(blip =>\r\n\t{\r\n\t\tvar newRelation = wordDoc.CopyImage(blip.Embed, ssrsDoc);\r\n\t\tblip.Embed = newRelation;\r\n\t});\r\n\tclonedElement.Descendants<DocumentFormat.OpenXml.Vml.ImageData>().ToList().ForEach(imageData =>\r\n\t{\r\n\t\tvar newRelation = wordDoc.CopyImage(imageData.RelationshipId, ssrsDoc);\r\n\t\timageData.RelationshipId = newRelation;\r\n\t});\r\n\twordDoc.MainDocumentPart.Document.Body.AppendChild(clonedElement);\r\n}\r\n```\r\nwith CopyImage defined like this:\r\n```csharp\r\npublic static string CopyImage(this WordprocessingDocument newDoc, string relId, WordprocessingDocument org)\r\n{\r\n\tvar p = org.MainDocumentPart.GetPartById(relId) as ImagePart;\r\n\tvar newPart = newDoc.MainDocumentPart.AddPart(p);\r\n\tnewPart.FeedData(p.GetStream());\r\n\treturn newDoc.MainDocumentPart.GetIdOfPart(newPart);\r\n}\r\n``` \r\n\r\nbut after that I wasn't able to open anymore the document with Word 365, word reporting the doc as a broken one...\r\n"},{"Id":"47495144847","Type":"IssuesEvent","CreatedAt":"2025-03-12T20:15:11","Actor":"tomjebo","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/561","RelatedDescription":"Closed issue \"Open-Xml-SDK cannot load document referencing not installed font when x14ac:knownFonts is present\" (#561) at dotnet/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nOpen-Xml-SDK will throw an OpenXmlPackageException with the message \"The specified package is invalid. The main part is missing.\" when an excel file references fonts in worksheets that are not present on the system and the tag x14ac:knownFonts is found.\r\n\r\n**Information**\r\n\r\n- .NET Target: .Net Framework 4.7.1\r\n- DocumentFormat.OpenXml Version: 2.8.1 and 2.9.0\r\n\r\n**Repro**\r\nWe use Open-XML SDK to produce a file (with lots of data) that we give to 3rd parties scattered around the world. They edit that file and send them back for us to import (using Open-Xml SDK again).\r\n\r\nSometimes we have this error from the exception while loading the document using Open-Xml SDK: The specified package is invalid. The main part is missing.\r\n\r\nIf I save the file with my own Excel application (Excel 2016) prior to import it, I can import the file fine. So I've decompressed the xlsx files and compared both against each other (the one working and the one not working)\r\nThe only thing that was different is the presence of the tag x14ac:knownFonts\r\nhttps://docs.microsoft.com/en-us/dotnet/api/documentformat.openxml.spreadsheet.fonts.knownfonts?view=openxml-2.8.1 Value of the tag is 1. If I remove the worksheet that uses the fonts found in the styles.xml, I can load the document or if I remove the \"knownfonts\" tag and let the worksheets that reference those fonts: Open-Xml-SDK can open the file successfully again.\r\n\r\n**Observed**\r\n\r\nThe excel app that was used to save the excel is the same version than me (2016), but installed in Korean language. Two of the fonts referenced have their name in asian characters so my wild guest is that I don't have those fonts on my system, and with the presence of the knownfonts, it causes Open-Xml to die painfully when trying to load that document.\r\n\r\n**Expected**\r\n\r\nI would expect that Open-Xml don't die when loading an excel document with if that tag is found (and fonts that I don't have on my system are referenced in that excel document). Excel do not die from actually: it allow me to open the document resave it (effectively removing that infamous \"knownfonts\" tag.\r\n"},{"Id":"47490827809","Type":"IssuesEvent","CreatedAt":"2025-03-12T18:07:26","Actor":"tomjebo","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/389","RelatedDescription":"Closed issue \"DocumentFormat.OpenXml.Packaging.CoreFilePropertiesPart has no functional properties\" (#389) at dotnet/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nDocumentFormat.OpenXml.Packaging.CoreFilePropertiesPart has no functional properties. I'd like to access at least the tags, description and title elements. There seems to be a well defined schema for it.\r\n\r\n**Information**\r\n\r\n- .NET Target: .NET Core\r\n- DocumentFormat.OpenXml Version: (ie 2.8.2)\r\n\r\n** Concept API surface **\r\n\r\n```csharp\r\npublic class CoreProperties\r\n{\r\n    public string Category { get; set; } \r\n    public ContentStatusType ContentStatus { get; set; }\r\n    public DateTimeOffset CreatedAt {get; set;}\r\n    public string CreatedBy {get; set; }\r\n    public string Summary {get; set; }\r\n    public IReadOnlyCollection<Keyword> Keywords {get; }\r\n    public string Language {get; set; }\r\n    public string LastModifiedBy {get; set; }\r\n    public DateTimeOffset? LastModifiedAt {get; set; }\r\n    public DateTimeOffset? LastPrintedAt {get; set; }\r\n    public int? Revision {get; set; }\r\n    public int? Version {get; set; }\r\n    public string Subject {get; set; }\r\n    public string Title {get; set; }\r\n}\r\n\r\npublic class Keyword\r\n{\r\n    public string Language { get; set; }\r\n    public string Value { get; set; }\r\n}\r\n\r\npublic enum ContentStatusType \r\n{\r\n    Draft,\r\n    Reviewed,\r\n    Final\r\n}\r\n```\r\n"},{"Id":"47490737853","Type":"PullRequestEvent","CreatedAt":"2025-03-12T18:04:55","Actor":"tomjebo","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1895","RelatedDescription":"Opened pull request \"add extension to CoreFilePropertiesPart to access package properties\" (#1895) at dotnet/Open-XML-SDK","RelatedBody":"This allows CoreFilePropertiesPart to access package properties via the parent package properties per discussion in #389 ."},{"Id":"47486210818","Type":"IssuesEvent","CreatedAt":"2025-03-12T16:11:18","Actor":"tomjebo","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/issues/1228","RelatedDescription":"Closed issue \"Issue With Bi Directional Chart in OpenXML\" (#1228) at dotnet/Open-XML-SDK","RelatedBody":"We are using the **DocumentFormat.openXMl** DLL(version: **2.18**) in order to generate Bi Directional Chart in Word Document from bytes array(bytes array generated by reading Dynamics CRM Document Template) and **XDocument** (**System.XMl.Linq**). The Word Document was generated properly with other charts except Bi Directional chart."},{"Id":"47446803787","Type":"PullRequestEvent","CreatedAt":"2025-03-11T19:26:46","Actor":"dependabot[bot]","Repository":"dotnet/Open-XML-SDK","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/Open-XML-SDK/pull/1894","RelatedDescription":"Opened pull request \"Bump Newtonsoft.Json, NuGet.Common and NuGet.Packaging\" (#1894) at dotnet/Open-XML-SDK","RelatedBody":"Bumps [Newtonsoft.Json](https://github.com/JamesNK/Newtonsoft.Json), [NuGet.Common](https://github.com/NuGet/NuGet.Client) and [NuGet.Packaging](https://github.com/NuGet/NuGet.Client). These dependencies needed to be updated together.\nUpdates `Newtonsoft.Json` from 13.0.3 to 13.0.3\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/JamesNK/Newtonsoft.Json/compare/13.0.3...13.0.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\nUpdates `NuGet.Common` from 6.12.1 to 6.13.2\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/NuGet/NuGet.Client/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\nUpdates `NuGet.Packaging` from 6.12.1 to 6.13.2\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/NuGet/NuGet.Client/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>"}],"ResultType":"GitHubEvent"}},"RunOn":"2025-03-14T03:30:21.5612961Z","RunDurationInMilliseconds":716}