{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2456688853","IsPullRequest":true,"CreatedAt":"2024-08-08T21:49:45","Actor":"maurer2","Number":"14153","RawContent":null,"Title":"Add padding: inherit to tokens for padding","State":"open","Body":"Hello, I think adding a way to set `padding: inherit` in tailwind would be a good idea.\r\nI opened up a discussion here: https://github.com/tailwindlabs/tailwindcss/discussions/14154\r\n\r\nCheers\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14153","RelatedDescription":"Open PR \"Add padding: inherit to tokens for padding\" (#14153)"},{"Id":"2456482956","IsPullRequest":false,"CreatedAt":"2024-08-08T19:29:29","Actor":"aentwist","Number":"14152","RawContent":null,"Title":"Upgrade dependency postcss-load-config to support postcss configs that use ESM with TypeScript","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.3\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite 5.2.11 (@ electron-forge 7.4.0 x electron 30.0.2)\r\njust using the vite layer to debug (`npx vite`)\r\n\r\n**What version of Node.js are you using?**\r\n\r\n22.1.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nwin11\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/aentwist/tailwind-upgrade-postcss-repro\r\n\r\n**Describe your issue**\r\n\r\nMy project cannot handle postcss config that uses ESM and TypeScript. Apparently there was a fix for this in v5 https://github.com/postcss/postcss-load-config/issues/239.\r\n\r\n```\r\n$ npm why postcss-load-config\r\npostcss-load-config@4.0.2 dev\r\nnode_modules/postcss-load-config\r\n  postcss-load-config@\"^4.0.1\" from tailwindcss@3.4.3\r\n  node_modules/tailwindcss\r\n    dev tailwindcss@\"^3.4.3\" from the root project\r\n```\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/f65023efb97832660dc17cf954504f9f156047ba/package.json#L84\r\n\r\nActually though, [postcss-load-config is now on v6](https://www.npmjs.com/package/postcss-load-config?activeTab=versions). The breaking changes are very light - a [node upgrade](https://github.com/postcss/postcss-load-config/blob/824a7de5f625310505504b2d79526ee8d608194f/CHANGELOG.md#breaking-changes-1) that drops support for versions of node that have been [unmaintained for a year minimum now](https://nodejs.org/en/about/previous-releases#release-schedule) [v5], and [requiring yaml users to install their own yaml dependency](https://github.com/postcss/postcss-load-config/blob/824a7de5f625310505504b2d79526ee8d608194f/CHANGELOG.md#breaking-changes) [v6].\r\n\r\nI see that unfortunately tailwind still supports old versions of node (14),\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/f65023efb97832660dc17cf954504f9f156047ba/package.json#L116\r\n\r\nso I guess this *is* a breaking change. In that case, may as well upgrade all the way to whatever latest is when the opportunity comes.\r\n\r\n---\r\n\r\nFor now, I will use commonjs and TypeScript, by using a .cts extension for the postcss config. This seems to work fine, but I know that for some reason in these configurations the postcss config file produces no warning if not present, however if present produces a seemingly related warning when running the app (`vite`) and loading the page.\r\n\r\n```\r\n(node:19428) Warning: To load an ES module, set \"type\": \"module\" in the package.json or use the .mjs extension.\r\n(Use `node --trace-warnings ...` to show where the warning was created)\r\n```\r\n\r\nI was hoping that just supporting ESM and TypeScript would make it go away. Sadly for completeness, I cannot figure how to pass that node option through vite to get the full trace.\r\n\r\nMy postcss config is the recommended starter,\r\n\r\n```ts\r\nexport default {\r\n  plugins: {\r\n    tailwindcss: {},\r\n    autoprefixer: {},\r\n  },\r\n};\r\n\r\n```\r\n\r\nI've tried various combinations of file extension and export syntax with `\"type\": \"module\"` and cannot make this warning disappear. For TS, I'm using `\"module\": \"nodenext\"`.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14152","RelatedDescription":"Open issue \"Upgrade dependency postcss-load-config to support postcss configs that use ESM with TypeScript\" (#14152)"},{"Id":"2456185391","IsPullRequest":true,"CreatedAt":"2024-08-08T16:18:49","Actor":"philipp-spiess","Number":"14151","RawContent":null,"Title":"Vite: Support Tailwind in Svelte <style> blocks","State":"open","Body":"This PR is currently in draft state. I will update the description before opening it up for review.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14151","RelatedDescription":"Open PR \"Vite: Support Tailwind in Svelte <style> blocks\" (#14151)"},{"Id":"2450519875","IsPullRequest":true,"CreatedAt":"2024-08-08T15:49:06","Actor":"philipp-spiess","Number":"14132","RawContent":null,"Title":"Use `import` to load plugins","State":"closed","Body":"Alternative to #14110\r\n\r\nThis PR changes the way how we load plugins to be compatible with ES6 async `import`s. This allows us to load plugins even inside the browser but it comes at a downside: We now have to change the `compile` API to return a `Promise`...\r\n\r\nSo most of this PR is rewriting all of the call sites of `compile` to expect a promise instead of the object.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14132","RelatedDescription":"Closed or merged PR \"Use `import` to load plugins\" (#14132)"},{"Id":"2455813986","IsPullRequest":false,"CreatedAt":"2024-08-08T14:19:57","Actor":"SolidAnonDev","Number":"14149","RawContent":null,"Title":"Broad Glob Patterns content config throws warning when anything containing the word `vendor` is in the specified folder","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n`latest: 3.4.8`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n```\r\n\"next\": \"13.5.1\",\r\n    \"postcss\": \"^8.4.41\",\r\n    \"react\": \"18.2.0\",\r\n    \"react-dom\": \"18.2.0\",\r\n    \"tailwindcss\": \"^3.4.8\",\r\n```\r\n\r\n**What version of Node.js are you using?**\r\n\r\n`>18`\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\n[Reproduction Link](https://stackblitz.com/edit/stackblitz-starters-tvynhn?file=app%2Fvendor.ts)\r\n\r\n**Describe your issue**\r\n\r\nI am running a project and have a database entity called `vendor`, thus I have a few files containing the word `vendor`, though I have no direct matches specifically. Things like `vendor-service.ts` and `edit-vendor-form.tsx` including a folder named `edit-vendors/` as a file-routed page and so on.\r\n\r\nAny folder or file containing the word `vendor` in any of the folders included in the glob pattern in `tailwind.config.js` will result in the following warning thrown:\r\n\r\n```\r\nwarn - Your `content` configuration includes a pattern which looks like it's accidentally matching all of `vendor` and can cause serious performance issues.\r\nwarn - Pattern: `./app/**/*.ts`\r\nwarn - See our documentation for recommendations:\r\nwarn - https://tailwindcss.com/docs/content-configuration#pattern-recommendations\r\n```\r\n\r\nThis is related to the warnings included in broad glob patterns in #14140 - pointed out [in this comment](https://github.com/tailwindlabs/tailwindcss/discussions/14145#discussioncomment-10269135) by @adamwathan that vendor is the node_modules equivalent in PHP projects. \r\n\r\n\r\n### Instructions to reproduce\r\n\r\nThe error should show the first time stackblitz project loads and compiles `/page`, but if you miss it or don't see it:\r\n\r\n1. Open Stackblitz Link - allow dependencies to install\r\n2. _Stop the server in the terminal using Ctrl+C_\r\n3. Start again using the command `npm run dev`\r\n4. When `/page` compiles, you will see the above warning thrown\r\n\r\n\r\nIf you want to experiment, you will notice you can delete the files and folders containing the word `vendor` and the issue will stop.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14149","RelatedDescription":"Closed issue \"Broad Glob Patterns content config throws warning when anything containing the word `vendor` is in the specified folder\" (#14149)"},{"Id":"2455904038","IsPullRequest":true,"CreatedAt":"2024-08-08T14:05:10","Actor":"thecrypticace","Number":"14150","RawContent":null,"Title":"Unify implementations of compile and `__unstable__loadDesignSystem`","State":"open","Body":"Right now there's some minor duplication and a ton of missing stuff in `__unstable__loadDesignSystem` â€” this PR makes sure the functionality is unified between it and `compile()`","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14150","RelatedDescription":"Open PR \"Unify implementations of compile and `__unstable__loadDesignSystem`\" (#14150)"},{"Id":"2455574622","IsPullRequest":true,"CreatedAt":"2024-08-08T13:05:52","Actor":"philipp-spiess","Number":"14147","RawContent":null,"Title":"Don't warn about broad globs in vendor folders","State":"closed","Body":"After shipping the new warning that prevents unexpected scanning of all dependencies in 3.4.8, we noticed that it was firing more often than we wanted to. \r\n\r\nThe heuristics we added works by finding broad glob patterns (once that contain `/**/`) and when those are found and are the _sole pattern used to match a file of a known-large directory_, we were showing the warning. The motivation for this is that we have seen time and time again that an incorrect config like `/**/*.js` can cause recursive scans through _all_ dependencies including many minified libraries which greatly impacts performance. \r\n\r\nIn #14140, we were adding two known-large directory names: \r\n\r\n- `node_modules` (used by npm)\r\n- `vendor` (used by PHP)\r\n\r\nThe problem with the `vendor` name though is that it is more generic than we would like it and there are legit use cases to have a folder named `vendor` inside your component folder. Additionally, PHP vendors behave a bit differently and it's not super common to have minified build files in that folder (which is one of the main reasons for the slow builds). Because of this, we decided to revert the change for `vendor` and only scan for `node_modules` going forward.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14147","RelatedDescription":"Closed or merged PR \"Don't warn about broad globs in vendor folders\" (#14147)"},{"Id":"2450672244","IsPullRequest":true,"CreatedAt":"2024-08-08T10:02:20","Actor":"philipp-spiess","Number":"14133","RawContent":null,"Title":"Add `test.debug` to integration tests","State":"closed","Body":"While working on #14078, there were a couple of debugging  techniques that we were using quite frequently:\r\n\r\n- Being able to `cd` into the test setup\r\n- Seeing the stdio and stdout data in real-time (this currently requires us to mark a test as failing)\r\n- Checking the exact commands that are being run\r\n\r\nSince we naturally worked around this quite often, I decided to make this a first-level API with the introduction of a new `test.debug` flag. When set, it will:\r\n\r\n- Create the test setup in the project dir within a new `.debug` folder and won't delete it after the run. Having it in an explicit folder allows us to easily delete it manually when we need to.\r\n- Logs all run commands to the console (`>` for a sync call, `>&` for a spawned process)\r\n- Logs stdio and stderr to the console in real time.\r\n- Run the test as `.only`\r\n\r\n<img width=\"2267\" alt=\"Screenshot 2024-08-06 at 13 19 49\" src=\"https://github.com/user-attachments/assets/1b204ac2-feee-489e-9cd8-edf73c0f2abd\">","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14133","RelatedDescription":"Closed or merged PR \"Add `test.debug` to integration tests\" (#14133)"},{"Id":"2454090796","IsPullRequest":true,"CreatedAt":"2024-08-07T18:34:41","Actor":"RobinMalfait","Number":"14144","RawContent":null,"Title":"Ensure `@apply` works inside `@utility`","State":"open","Body":"This PR fixes an issue where `@apply` was not handled if it was used inside of `@utility`.\r\n\r\nYou should now be able to do something like this:\r\n```css\r\n@utility btn {\r\n  @apply flex flex-col bg-white p-4 rounded-lg shadow-md;\r\n}\r\n```\r\n\r\nIf you then use `btn` as a class, the following CSS will be generated:\r\n```css\r\n.btn {\r\n  border-radius: var(--radius-lg, .5rem);\r\n  background-color: var(--color-white, #fff);\r\n  padding: var(--spacing-4, 1rem);\r\n  --tw-shadow: 0 4px 6px -1px #0000001a, 0 2px 4px -2px #0000001a;\r\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);\r\n  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\r\n  flex-direction: column;\r\n  display: flex;\r\n}\r\n```\r\n\r\nThis PR also makes sure that you can use custom `@utility` inside other `@utility` via `@apply`. E.g.:\r\n```css\r\n@utility foo {\r\n  color: red;\r\n}\r\n\r\n@utility bar {\r\n  color: red;\r\n  @apply hover:foo;\r\n}\r\n```\r\n\r\nIf we detect a circular dependency, then we will throw an error since circular dependencies are not allowed. E.g.:\r\n```css\r\n@utility foo {\r\n  @apply hover:bar;\r\n}\r\n\r\n@utility bar {\r\n  @apply focus:baz;\r\n}\r\n\r\n@utility baz {\r\n  @apply dark:foo;\r\n}\r\n```\r\nRegardless of which utility you use, eventually it will apply itself.\r\n\r\nFixes: #14143\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14144","RelatedDescription":"Open PR \"Ensure `@apply` works inside `@utility`\" (#14144)"},{"Id":"2446693223","IsPullRequest":false,"CreatedAt":"2024-08-07T17:28:00","Actor":"ottomated","Number":"14119","RawContent":null,"Title":"[v4] Clarify browser support","State":"closed","Body":"Tailwind v4 seems to be taking a different direction for browser support than v3, using some pretty bleeding-edge CSS features for common utilities rather than just providing APIs for them. This is fine, but requires:\r\n\r\n1. Very obvious documentation upon release, so people upgrading are aware that their existing code will stop working on older browsers\r\n2. Potentially, an official plugin that transpiles utilities such as `transform` that lightningcss does not support (#14094)\r\n3. Potentially, said plugin being enabled by default\r\n\r\nI think this issue will be more pervasive upon release given that v4 will support backwards compatibility for config files and might be mistakenly seen as a drop-in replacement.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14119","RelatedDescription":"Closed issue \"[v4] Clarify browser support\" (#14119)"},{"Id":"2453907674","IsPullRequest":false,"CreatedAt":"2024-08-07T16:44:01","Actor":"sntran","Number":"14143","RawContent":null,"Title":"[v4]: Can't use `@apply` inside `@utility`","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.0.0-alpha.18\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`@tailwindcss/cli`\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v20.12.2\r\n\r\n**What browser are you using?**\r\n\r\nChrome Version 127.0.6533.89 (Official Build) (arm64)\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/5pjBCbzFvp?file=css\r\n\r\n**Describe your issue**\r\n\r\nWhen using `@utility` to define custom utility, any `@apply` is ignored inside. We have to use actual CSS to define the utility, i.e. `font-size: var(--font-size-4xl);`","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14143","RelatedDescription":"Open issue \"[v4]: Can't use `@apply` inside `@utility`\" (#14143)"},{"Id":"2453824318","IsPullRequest":false,"CreatedAt":"2024-08-07T16:12:21","Actor":"phenomen","Number":"14142","RawContent":null,"Title":"[v4] @source directive is included in the generated CSS","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n`4.0.0-alpha.18`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nVite `5.3.5`\r\n\r\n**What version of Node.js are you using?**\r\n\r\nBun `1.1.21`\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/wBAMLvsEJZ?size=1874x1117\r\n\r\n**Describe your issue**\r\n\r\nIn the reproduction generated CSS you can see `@source \"../templates/**/*.hbs\";` even though it should have been purged.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14142","RelatedDescription":"Closed issue \"[v4] @source directive is included in the generated CSS\" (#14142)"},{"Id":"2453009781","IsPullRequest":true,"CreatedAt":"2024-08-07T14:55:21","Actor":"RobinMalfait","Number":"14140","RawContent":null,"Title":"Warn when broad glob patterns are used in the content configuration","State":"closed","Body":"When you use a glob pattern in your `content` configuration that is too broad, it could be that you are accidentally including files that you didn't intend to include. E.g.: all of `node_modules`\r\n\r\nThis has been documented in the [Tailwind CSS documentation](https://tailwindcss.com/docs/content-configuration#pattern-recommendations), but it's still something that a lot of people run into.\r\n\r\nThis PR will try to detect those patterns and show a big warning to let you know if you may have done something wrong.\r\n\r\nWe will show a warning if all of these conditions are true:\r\n\r\n1. We detect `**` in the glob pattern\r\n2. _and_ you didn't explicitly use `node_modules` in the glob pattern\r\n3. _and_ we found files that include `node_modules` in the file path\r\n4. _and_ no other globs exist that explicitly match the found file\r\n\r\nWith these rules in place, the DX has nice trade-offs:\r\n\r\n1. Very simple projects (that don't even have a `node_modules` folder), can simply use `./**/*` because while resolving actual files we won't see files from `node_modules` and thus won't warn.\r\n2. If you use `./src/**` and you do have a `node_modules`, then we also won't complain (unless you have a `node_modules` folder in the `./src` folder).\r\n3. If you work with a 3rd party library that you want to make changes to. Using an explicit match like `./node_modules/my-package/**/*` is allowed because `node_modules` is explicitly mentioned.\r\n\r\nNote: this only shows a warning, it does not stop the process entirely. The warning will be show when the very first file in the `node_modules` is detected.\r\n\r\n<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14140","RelatedDescription":"Closed or merged PR \"Warn when broad glob patterns are used in the content configuration\" (#14140)"},{"Id":"2444788287","IsPullRequest":true,"CreatedAt":"2024-08-07T14:54:54","Actor":"RobinMalfait","Number":"14110","RawContent":null,"Title":"Ensure `require` is possible in `esm` file","State":"closed","Body":"When using the `@plugin \"â€¦\";` in CSS, then the `@tailwindcss/cli` will currently crash with `Dynamic require` error:\n\n```\nError: Dynamic require of \"./plugin.js\" is not supported\n    at file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/@tailwindcss/cli/dist/index.mjs:2:195\n    at loadPlugin (file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/@tailwindcss/cli/dist/index.mjs:6:439)\n    at file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/tailwindcss/dist/lib.mjs:8:4328\n    at S (file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/tailwindcss/dist/lib.mjs:1:445)\n    at Module._r (file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/tailwindcss/dist/lib.mjs:8:4222)\n    at p (file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/@tailwindcss/cli/dist/index.mjs:6:414)\n    at le (file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/@tailwindcss/cli/dist/index.mjs:6:452)\n```\n\nTo solve this, we will make sure that we create a `require` based on the `import.meta.url`.\n<!--\n\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14110","RelatedDescription":"Closed or merged PR \"Ensure `require` is possible in `esm` file\" (#14110)"},{"Id":"2447081998","IsPullRequest":false,"CreatedAt":"2024-08-07T14:24:57","Actor":"hamidreza4dev","Number":"14121","RawContent":null,"Title":"Support for Arbitrary Values with Custom Breakpoint configuration","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss 8.4.40, Next.js 14.2.5\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v20.15.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/DN6QPm53oY\r\n\r\n**Describe your issue**\r\n\r\nThe class `min-[800px]:bg-red-500` is not recognized because I switched to max-width breakpoints instead of the default min-width. Here is my configuration:\r\n```ts\r\n/** @type {import('tailwindcss').Config} */\r\nexport default {\r\n  theme: {\r\n    screens: {\r\n      '3xl': { max: '1899px' },\r\n      '2xl': { max: '1535px' },\r\n      xl: { max: '1399px' },\r\n      xxl: { max: '1279px' },\r\n      lg: { max: '1023px' },\r\n      md: { max: '767px' },\r\n      sm: { max: '639px' },\r\n      xs: { max: '479px' },\r\n      xxs: { max: '399px' },\r\n    },\r\n  }\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14121","RelatedDescription":"Closed issue \"Support for Arbitrary Values with Custom Breakpoint configuration\" (#14121)"},{"Id":"2451270783","IsPullRequest":true,"CreatedAt":"2024-08-07T14:24:15","Actor":"RobinMalfait","Number":"14135","RawContent":null,"Title":"Apply general feedback for `@sources`","State":"closed","Body":"Part of #14078\r\n\r\nThis PR applies general feedback to the `@sources` umbrella PR.\r\n\r\nThis PR includes the following changes:\r\n- Used real classes instead of class-like objects.\r\n- Only handle PostCSS imports when `@import` is used.\r\n- Improve some comments\r\n- Improve naming of `GlobEntry` (`glob.glob` -> `glob.pattern`)\r\n- Use `scanFiles` on the `scanDirResult` as-if it's an incremental scan (under\r\n  the hood we still do a full scan right now).\r\n- Renamed `content_paths` to `sources`\r\n\r\nThis is a separate PR just so that we can merge the umbrella PR un-squashed for each sub-PR. This way all the commits here won't show up in the `next` branch as-is.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14135","RelatedDescription":"Closed or merged PR \"Apply general feedback for `@sources`\" (#14135)"},{"Id":"2449195337","IsPullRequest":true,"CreatedAt":"2024-08-07T14:09:01","Actor":"RobinMalfait","Number":"14129","RawContent":null,"Title":"Add `inert` variant","State":"closed","Body":"This PR adds a new `inert` variant.\r\n\r\nWe use `:where([inert], [inert] *)`, because the element with the `inert` attribute and any of its descendants will be inert.\r\n\r\nFor example, both these buttons will have `opacity-50`:\r\n\r\n```html\r\n<button inert class=\"inert:opacity-50\">I am inert</button>\r\n<div inert>\r\n  <button class=\"inert:opacity-50\">I am also inert</button>\r\n</div>\r\n```\r\n\r\nSee: https://play.tailwindcss.com/Jqedv6phGn\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14129","RelatedDescription":"Closed or merged PR \"Add `inert` variant\" (#14129)"},{"Id":"2450973395","IsPullRequest":true,"CreatedAt":"2024-08-07T13:50:26","Actor":"philipp-spiess","Number":"14134","RawContent":null,"Title":"Error on invalid @plugin usage","State":"closed","Body":"This PR just adds two minor errors to guard against invalid `@plugin` usage similarly to what we do with `@source` in \r\nhttps://github.com/tailwindlabs/tailwindcss/pull/14078.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14134","RelatedDescription":"Closed or merged PR \"Error on invalid @plugin usage\" (#14134)"},{"Id":"2449106301","IsPullRequest":true,"CreatedAt":"2024-08-06T09:57:01","Actor":"RobinMalfait","Number":"14127","RawContent":null,"Title":"Rename `@content` to `@source`","State":"closed","Body":"This PR renames the `@content` directive to `@source`.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14127","RelatedDescription":"Closed or merged PR \"Rename `@content` to `@source`\" (#14127)"},{"Id":"2449130758","IsPullRequest":false,"CreatedAt":"2024-08-05T18:09:35","Actor":"tance77","Number":"14128","RawContent":null,"Title":"List Cursor Position Content Editable","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n3.4.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nTailwindcss Playground\r\n\r\nVue3, Vite\r\n\r\n**What version of Node.js are you using?**\r\nv22.5.1\r\n\r\n**What browser are you using?**\r\nChrome, Safari, Edge\r\n\r\n**What operating system are you using?**\r\nmacOS, Windows\r\n\r\n**Reproduction URL**\r\n[Reproduction URL](https://play.tailwindcss.com/8Ne5OpAa72)\r\n\r\n\r\n\r\n**Describe your issue**\r\n\r\nI've created a simple div that has the `contenteditable` flag set to true. Within this div contains an `ol` and a `li` element. As you can see in the preview on the right-hand side when you click into it the Cursor is on the left side of the `li` which it should be on the right side of the `li` If you type any character it seems to correct itself. \r\n\r\nI would expect the cursor to be on the right-hand side of the `1.` \r\n\r\n\r\nNo TailwindCss\r\n\r\n```html\r\n<div style=\"padding: 0.25rem;\">\r\n    <div contenteditable=\"true\" style=\"padding: 0.25rem; border: 1px solid black;\">\r\n        <ol class=\"\">\r\n            <li></li>\r\n        </ol>\r\n    </div>\r\n</div>\r\n\r\n```\r\n\r\n![Screenshot 2024-08-05 at 10 48 44â€¯AM](https://github.com/user-attachments/assets/543bfdb5-2d4c-44f4-be45-f33bdeb694d2)\r\n\r\nNotice the cursor is on the right side of the list\r\n\r\n\r\nWith TailwindCSS\r\n\r\n![Screenshot 2024-08-05 at 10 50 17â€¯AM](https://github.com/user-attachments/assets/69279287-775c-41eb-bffe-5dd59863e917)\r\n\r\n\r\nNotice the cursor is on the left side\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14128","RelatedDescription":"Closed issue \"List Cursor Position Content Editable\" (#14128)"},{"Id":"2447135148","IsPullRequest":false,"CreatedAt":"2024-08-05T09:04:26","Actor":"bayaderpack","Number":"14122","RawContent":null,"Title":"Tailwind crash with watch","State":"closed","Body":"tailwindcss v3.4.7\r\n\r\nNode: v21.5.0\r\n\r\nBrowser: Chrome\r\n\r\nWindows 11\r\n\r\n**Describe your issue**\r\n\r\nI'm using this command to watch the file changes \r\n\r\n```\r\ntailwindcss -i ./assets/styles.scss -o ./static/styles.css --watch\r\n```\r\nAfter some time I get this error and tailwind crash \r\n\r\n<--- Last few GCs --->\r\n\r\n[19804:00000284BC071B40]  6883361 ms: Mark-sweep 4050.6 (4138.7) -> 4038.8 (4142.7) MB, 3220.5 / 16.2 ms  (average mu = 0.363, current mu = 0.017) allocation failure scavenge might not succeed\r\n[19804:00000284BC071B40]  6888419 ms: Mark-sweep 4054.6 (4142.7) -> 4042.8 (4146.7) MB, 4975.4 / 11.5 ms  (average mu = 0.182, current mu = 0.016) allocation failure scavenge might not succeed\r\n\r\n\r\n<--- JS stacktrace --->\r\n\r\nFATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory\r\n 1: 00007FF6BA7219EF v8::internal::CodeObjectRegistry::~CodeObjectRegistry+114175\r\n 2: 00007FF6BA6AF836 v8::internal::MicrotaskQueue::GetMicrotasksScopeDepth+65526\r\n 3: 00007FF6BA6B06ED node::OnFatalError+301\r\n 4: 00007FF6BAFE7BFE v8::Isolate::ReportExternalAllocationLimitReached+94\r\n 5: 00007FF6BAFD20FD v8::SharedArrayBuffer::Externalize+781\r\n 6: 00007FF6BAE7545C v8::internal::Heap::EphemeronKeyWriteBarrierFromCode+1468\r\n 7: 00007FF6BAE72574 v8::internal::Heap::CollectGarbage+4244\r\n 9: 00007FF6BAE94A76 v8::internal::Factory::NewFillerObject+214\r\n10: 00007FF6BABC6A75 v8::internal::DateCache::Weekday+1797\r\n11: 00007FF6BB0758F1 v8::internal::SetupIsolateDelegate::SetupHeap+494417\r\n12: 00007FF6BB036A12 v8::internal::SetupIsolateDelegate::SetupHeap+236658\r\n13: 00000284BDEDA4B8","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14122","RelatedDescription":"Closed issue \"Tailwind crash with watch\" (#14122)"},{"Id":"2446110627","IsPullRequest":true,"CreatedAt":"2024-08-03T05:22:02","Actor":"thecrypticace","Number":"14116","RawContent":null,"Title":"Only read from stdin when using `â€”input -`","State":"open","Body":"Using `process.stdin.resume()` causes stdin to be consumed and buffered in Node immediately â€” even when using a file as input. Itâ€™d be better for our process to not read data from stdin at all in this case.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14116","RelatedDescription":"Open PR \"Only read from stdin when using `â€”input -`\" (#14116)"},{"Id":"2445521822","IsPullRequest":true,"CreatedAt":"2024-08-02T18:15:50","Actor":"thecrypticace","Number":"14114","RawContent":null,"Title":"Add `matchUtilities` and `addUtilities` APIs","State":"open","Body":"This PR introduces support for the v3-like `addUtilities` and `matchUtilities` APIs in v4. We anticipate designing a new API that feels more native to the way v4 works before shipping v4.0 stable, but we're continuing to support these APIs for backwards compatibility.\r\n\r\nWe've tried to make the behavior as identical as possible, but because of fundamental differences between the v3 and v4 engines there are a few things that work differently:\r\n\r\n## Only simple single-class selectors are supported\r\n\r\nIn v3 you could pass a complex CSS selector to `addUtilities` and we would generate a utility for every class in the selector. In v4 we only allow you to use a simple, single-class selector.\r\n\r\nYou should use nesting if you need a more complex selector, or need to include at-rules like `@media` or `@supports`.\r\n\r\n```js\r\n// v3\r\nfunction ({ addUtilities }) {\r\n  addUtilities({\r\n    '.scrollbar-none::-webkit-scrollbar': {\r\n      display: 'none',\r\n    },\r\n  })\r\n}\r\n\r\n// v4\r\nfunction ({ addUtilities }) {\r\n  addUtilities({\r\n    '.scrollbar-none': {\r\n      '&::-webkit-scrollbar': {\r\n        display: 'none',\r\n      },\r\n    },\r\n  })\r\n}\r\n```\r\n\r\nIf you were adding custom utilities that included two classes and were depending on both of those classes behaving like utilities (they could each be used with variants), those custom utilities will need to be rewritten as two separate utilities that each use nesting:\r\n\r\n```js\r\n// v3\r\nfunction ({ addUtilities }) {\r\n  addUtilities({\r\n    '.section > .row': {\r\n      color: 'red',\r\n    },\r\n  })\r\n}\r\n\r\n// v4\r\nfunction ({ addUtilities }) {\r\n  addUtilities({\r\n    '.section': {\r\n      '& > .row': {\r\n        color: 'red',\r\n      },\r\n    },\r\n\r\n    '.row': {\r\n      'section > &': {\r\n        color: 'red',\r\n      },\r\n    },\r\n  })\r\n}\r\n```\r\n\r\nWe may introduce support for this in the future if this limitation turns out to be a huge pain in the ass, but crossing our fingers that people were mostly doing simple stuff here.\r\n\r\n## Opacity modifiers support bare values\r\n\r\nTo be consistent with how built-in utilities work in v4, custom utilities that specify `type: \"color\"` now get \"bare value\" support for opacity modifiers. This means that a utility like `foo-black/33` will work out of the box without having to either add `--opacity-33` to your theme nor would you need to add it to the `modifiers` option.\r\n\r\n## The `preferOnConflict` type option is gone\r\n\r\nIn v3 we introduced an internal API called `preferOnConflict` for types. This was used as a way to disambiguate between two utilities with the same \"root\" but which produced different properties which used the same CSS data types. This was only applicable to arbitrary values and was only used for disambiguating between `background-position` and `background-size`.\r\n\r\nIn v4, both of these properties are handled by a single plugin meaning this feature is no longer necessary. No one should've really been using this option anyway as it was never documented so we're dropping the feature.\r\n\r\n## The options `respectPrefix` and `respectImportant` are not yet supported\r\n\r\nNeither the `prefix` nor `important` features exist in any form in v4 at this time. Therefore, they are not currently supported by this PR. We will look into supporting them if/when those features return.\r\n\r\n## The `theme(â€¦)` function is not currently supported\r\n\r\nCustom utilities defined using `matchUtilities` often use the `theme(â€¦)` function to define their default values, but we haven't implemented support for `theme(â€¦)` yet in v4.\r\n\r\nThis means that as of this PR, default values for custom utilities must be hardcoded:\r\n\r\n```js\r\nfunction ({ matchUtilities }) {\r\n  matchUtilities({\r\n    'tab': (value) => {\r\n      return {\r\n        'tab-size': value,\r\n      }\r\n    },\r\n  }, {\r\n    values: {\r\n      2: '2',\r\n      4: '4',\r\n      8: '8',\r\n    },\r\n  })\r\n}\r\n```\r\n\r\nGetting `theme(â€¦)` working is a big project so we're going to tackle it in a separate PR.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14114","RelatedDescription":"Open PR \"Add `matchUtilities` and `addUtilities` APIs\" (#14114)"},{"Id":"2440797346","IsPullRequest":true,"CreatedAt":"2024-08-02T13:37:30","Actor":"adamwathan","Number":"14095","RawContent":null,"Title":"Add support for `inline` option when defining `@theme` values","State":"closed","Body":"This PR adds support for a new `inline` option when defining a `@theme` block that tells Tailwind to use raw theme values for utilities instead of referencing the corresponding generated CSS variable.\r\n\r\n```css\r\n/* Input */\r\n@theme inline {\r\n  --color-red-500: #ef4444;\r\n  /* ... */\r\n}\r\n\r\n\r\n/* Example output */\r\n:root {\r\n  --color-red-500: #ef4444;\r\n}\r\n\r\n.text-red-500 {\r\n  color: #ef4444;\r\n}\r\n```\r\n\r\nThis can be composed with the existing `reference` option in case you want to define a `@theme` block as both `reference` (so the variables aren't generated) and `inline`:\r\n\r\n```css\r\n/* Input */\r\n@theme inline reference {\r\n  --color-red-500: #ef4444;\r\n  /* ... */\r\n}\r\n\r\n\r\n/* Example output */\r\n.text-red-500 {\r\n  color: #ef4444;\r\n}\r\n```\r\n\r\nSince you can have multiple `@theme` blocks, you can even define some values normally and some as inline based on how you're using them. For example you might want to use `inline` for defining literal tokens like `--color-red-500`, but include the variable for tokens that you want to be able to theme like `--color-primary`:\r\n\r\n```css\r\n/* Input */\r\n@theme inline {\r\n  --color-red-500: #ef4444;\r\n  /* ... */\r\n}\r\n\r\n@theme {\r\n  --color-primary: var(--color-red-500);\r\n}\r\n\r\n\r\n/* Example output */\r\n:root {\r\n  --color-red-500: #ef4444;\r\n  --color-primary: var(--color-red-500);\r\n}\r\n\r\n.text-red-500 {\r\n  color: #ef4444;\r\n}\r\n\r\n.text-primary {\r\n  color: var(--color-primary, var(--color-red-500));\r\n}\r\n```\r\n\r\n## Breaking changes\r\n\r\nPrior to this PR, you could `@import` a stylesheet that contained `@theme` blocks as reference by adding the `reference` keyword to your import:\r\n\r\n```css\r\n@import \"./my-theme.css\" reference;\r\n```\r\n\r\nNow that `reference` isn't the only possible option when declaring your `@theme`, this syntax has changed to a new `theme(â€¦)` function that accepts `reference` and `inline` as potential space-separated values:\r\n\r\n```css\r\n@import \"./my-theme.css\";\r\n@import \"./my-theme.css\" theme(reference);\r\n@import \"./my-theme.css\" theme(inline);\r\n@import \"./my-theme.css\" theme(reference inline);\r\n```\r\n\r\nIf you are using the `@import â€¦ reference` option with an earlier alpha release, you'll need to update your code to `@import â€¦ theme(reference)` once this PR lands in a release.\r\n\r\n## Motivation\r\n\r\nThis PR is designed to solve an issue pointed out in #14091.\r\n\r\nPrior to this PR, generated utilities would always reference variables directly, with the raw value as a fallback:\r\n\r\n```css\r\n/* Input */\r\n@theme {\r\n  --color-red-500: #ef4444;\r\n  /* ... */\r\n}\r\n\r\n\r\n/* Example output */\r\n:root {\r\n  --color-red-500: #ef4444;\r\n}\r\n\r\n.text-red-500 {\r\n  color: var(--color-red-500, #ef4444);\r\n}\r\n```\r\n\r\nBut this can create issues with variables resolving to an unexpected value when a theme value is referencing another variable defined on `:root`.\r\n\r\nFor example, say you have a CSS file like this:\r\n\r\n```css\r\n:root, .light {\r\n  --text-fg: #000; \r\n}\r\n\r\n.dark {\r\n  --text-fg: #fff;\r\n}\r\n\r\n@theme {\r\n  --color-fg: var(--text-fg);\r\n}\r\n```\r\n\r\nWithout `@theme inline`, we'd generate this output if you used the `text-fg` utility:\r\n\r\n```css\r\n:root, .light {\r\n  --text-fg: #000; \r\n}\r\n\r\n.dark {\r\n  --text-fg: #fff;\r\n}\r\n\r\n:root {\r\n  --color-fg: var(--text-fg);\r\n}\r\n\r\n.text-fg {\r\n  color: var(--color-fg, var(--text-fg));\r\n}\r\n```\r\n\r\nNow if you wrote this HTML, you're probably expecting your text to be the dark mode color:\r\n\r\n```html\r\n<div class=\"dark\">\r\n  <h1 class=\"text-fg\">Hello world</h1>\r\n</div>\r\n```\r\n\r\nBut you'd actually get the light mode color because of this rule:\r\n\r\n```css\r\n:root {\r\n  --color-fg: var(--text-fg);\r\n}\r\n\r\n.text-fg {\r\n  color: var(--color-fg, var(--text-fg));\r\n}\r\n```\r\n\r\nThe browser will try to resolve the `--color-fg` variable, which is defined on `:root`. When it tries to resolve the value, _it uses the value of `var(--text-fg)` as it would resolve at `:root`_, not what it would resolve to based on the element that has the `text-fg` class.\r\n\r\nSo `var(--color-fg)` resolves to `#000` because `var(--text-fg)` resolved to `#000` at the point in the tree where the browser resolved the value of `var(--color-fg)`.\r\n\r\nBy using `@theme inline`, the `.text-fg` class looks like this:\r\n\r\n```css\r\n.text-fg {\r\n  color: var(--text-fg);\r\n}\r\n```\r\n\r\nWith this definition, the browser doesn't try to resolve `--color-fg` at all and instead resolves `--text-fg` directly which correctly resolves to `#fff` as expected.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14095","RelatedDescription":"Closed or merged PR \"Add support for `inline` option when defining `@theme` values\" (#14095)"},{"Id":"2443253777","IsPullRequest":true,"CreatedAt":"2024-08-02T12:57:15","Actor":"thecrypticace","Number":"14105","RawContent":null,"Title":"Bump to latest cssnano v6","State":"closed","Body":"We bundle cssnano in our CLI and it's on an older version that does not handle nested CSS correctly. This PR updates it to the latest version of v6.x\r\n\r\nFixes #14092\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14105","RelatedDescription":"Closed or merged PR \"Bump to latest cssnano v6\" (#14105)"},{"Id":"2442822424","IsPullRequest":true,"CreatedAt":"2024-08-02T08:33:14","Actor":"philipp-spiess","Number":"14101","RawContent":null,"Title":"Upgrade vitest and remove bench script from CI","State":"closed","Body":"This PR updates vitest to v2. The changes are mostly around using fork instead of threads for how tests are run which should fix one of the issues we've found.\r\n\r\nEver since adding the unit tests on Windows, we started seeing occacional flags of vitest crashing with the following error:\r\n\r\n```\r\nâ€‰ELIFECYCLEâ€‰ Command failed with exit code 3221225477.\r\nError: Process completed with exit code 1.\r\n```\r\n\r\nWhen reading the [v2 changelog](https://github.com/vitest-dev/vitest/releases/tag/v2.0.0) we saw many bug fixes related to segfaulting so we believe this was the issue. \r\n\r\nWhen upgrading `vitest` alone, we got a bunch of dependency mismatches though (specifically, vite was installed two times with different peer dependencies for `@types/node` which causes our vite plugin's `Plugin` type to be different from the one in the vite playground. Yikes. These were eventually fixed by having pnpm create a new lockfile for us. So, unfortunatly this PR also bumps a bunch of patch versions for some transitive dependencies. Tests seem fine, though ðŸ¤ž \r\n\r\nThis PR also removes the `bench` script from CI. It doesn't give us value in its current state (since it's not reporting when performance regresses) but added a few seconds of unnecessary overhead to each test run.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14101","RelatedDescription":"Closed or merged PR \"Upgrade vitest and remove bench script from CI\" (#14101)"},{"Id":"2443371175","IsPullRequest":false,"CreatedAt":"2024-08-01T20:38:39","Actor":"KartoffelToby","Number":"14106","RawContent":null,"Title":"[v4] vite build --watch only compile html classes right on the init run","State":"open","Body":"\n\n**What version of Tailwind CSS are you using?**\n\nv4\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nPlain vite Projekt with css/html Input files in rollup config\n\n**What version of Node.js are you using?**\n\nv20.11.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nLinux Debian \n\n**Describe your issue**\n\nI have some css files ans HTML files. The HTML contains some tailwindcss classes like p-2 etc. If i run vite build --watch the first build is correct. And the p-2 css Definition is in the Output css. But if i change the classes in the HTML it recompiles but dont get the new classes. If i use @apply in my source css file the Compiler works every time. So must be a bug in the HTML stuff.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14106","RelatedDescription":"Open issue \"[v4] vite build --watch only compile html classes right on the init run\" (#14106)"},{"Id":"2443030664","IsPullRequest":false,"CreatedAt":"2024-08-01T18:24:11","Actor":"MarcyLina","Number":"14103","RawContent":null,"Title":"Font sizes are not rendering correctly in Chrome","State":"closed","Body":"This very well may be a Chrome issue. I'm on version 127 and macOS Sonoma.\r\n\r\nThe problem I've run into is that nothing smaller than `text-base` will render. Anything I have with the classes `text-sm` and `text-xs` show up as 1rem. Oddly the line-height _does_ work.\r\n\r\nOn my main page, I added some `<p>` tags to test other browsers using `text-xs`, `text-sm`, `text-base,` and `text-lg`. The screenshots are the results I got:\r\n\r\n**Chrome:**\r\n<img width=\"436\" alt=\"image\" src=\"https://github.com/user-attachments/assets/6f4829ae-cce0-4ac1-b574-a906f2fe9667\">\r\n\r\n**Firefox and Safari:**\r\n<img width=\"380\" alt=\"image\" src=\"https://github.com/user-attachments/assets/08c46cbc-8a4d-4164-8087-5bb4e04d404c\">\r\n\r\nI'm on a Laravel, Inertia, and Vue 3 build. All of those, and Tailwind are on the latest versions.\r\n\r\nI did see this issue  [#1402](https://github.com/tailwindlabs/tailwindcss/issues/1402) while searching for answers, which is fairly similar regarding font-weight and it turned out to be a Chrome bug, so I figured I'd post anyway to at least get some attention on the issue and perhaps have it reported to the folks at Chrome.\r\n</div>","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14103","RelatedDescription":"Closed issue \"Font sizes are not rendering correctly in Chrome\" (#14103)"},{"Id":"2440215719","IsPullRequest":false,"CreatedAt":"2024-08-01T16:39:16","Actor":"ottomated","Number":"14094","RawContent":null,"Title":"Individual transforms can't get converted to compatible syntax by lightningcss","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.18\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite@5.3.5\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.16.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome 103.0.5060.134 (OBS CEF)\r\n\r\n**What operating system are you using?**\r\n\r\nLinux\r\n\r\n**Reproduction URL**\r\n\r\n[LightningCSS](https://lightningcss.dev/playground/index.html#%7B%22minify%22%3Afalse%2C%22customMedia%22%3Atrue%2C%22cssModules%22%3Afalse%2C%22analyzeDependencies%22%3Afalse%2C%22targets%22%3A%7B%22chrome%22%3A6225920%7D%2C%22include%22%3A0%2C%22exclude%22%3A0%2C%22source%22%3A%22%2F*%20Current%20output%20*%2F%5Cn.translate-x-4%20%7B%5Cn%20%20--tw-translate-x%3A%20var(--spacing-4%2C%201rem)%3B%5Cn%20%20translate%3A%20var(--tw-translate-x)%20var(--tw-translate-y)%3B%5Cn%7D%5Cn%5Cn%2F*%20Can't%20just%20add%20transform%3A%20none%20*%2F%5Cn.also-broken%20%7B%5Cn%20%20transform%3A%20none%3B%5Cn%20%20--tw-translate-x%3A%20var(--spacing-4%2C%201rem)%3B%5Cn%20%20translate%3A%20var(--tw-translate-x)%20var(--tw-translate-y)%3B%5Cn%7D%5Cn%5Cn%2F*%20transform%20prop%20is%20required%20*%2F%5Cn.broken%20%7B%5Cn%20%20translate%3A%201rem%201rem%3B%5Cn%7D%5Cn%5Cn%2F*%20only%20case%20where%20it%20works%20*%2F%5Cn.works%20%7B%5Cn%20%20transform%3A%20none%3B%5Cn%20%20translate%3A%201rem%201rem%3B%5Cn%7D%22%2C%22visitorEnabled%22%3Afalse%2C%22visitor%22%3A%22%7B%5Cn%20%20Color(color)%20%7B%5Cn%20%20%20%20if%20(color.type%20%3D%3D%3D%20'rgb')%20%7B%5Cn%20%20%20%20%20%20color.g%20%3D%200%3B%5Cn%20%20%20%20%20%20return%20color%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22unusedSymbols%22%3A%5B%5D%2C%22version%22%3A%22local%22%7D)\r\n\r\n**Describe your issue**\r\n\r\nThe `translate` property (and other individual transforms) is [only supported in newer browsers](https://developer.mozilla.org/en-US/docs/Web/CSS/translate).\r\n\r\nPer https://github.com/parcel-bundler/lightningcss/issues/247, lightningcss does support converting `translate: ...;` into `transform: translate(...);`. However, it seems to have a few caveats - it needs a `transform` property in the same class, and it also doesn't seem to work when `var`s are used to define the parameters.\r\n\r\nThe v3 docs say:\r\n> While most of the features in Tailwind CSS will work in all modern browsers, Tailwind also includes APIs for several bleeding-edge features that arenâ€™t yet supported by all browsers, for example the `:focus-visible` pseudo-class and `backdrop-filter` utilities.\r\n\r\nIn my opinion, a common utility such as `transform` should be supported in all browsers - the lack of support blocks me from using v4 in any production applications.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14094","RelatedDescription":"Closed issue \"Individual transforms can't get converted to compatible syntax by lightningcss\" (#14094)"},{"Id":"2441954851","IsPullRequest":true,"CreatedAt":"2024-08-01T09:37:40","Actor":"philipp-spiess","Number":"14099","RawContent":null,"Title":"Second branch to run 2 CI jobs concurrently ðŸ™ˆ","State":"closed","Body":"<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14099","RelatedDescription":"Closed or merged PR \"Second branch to run 2 CI jobs concurrently ðŸ™ˆ\" (#14099)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-08-09T03:30:21.6274409Z","RunDurationInMilliseconds":410}