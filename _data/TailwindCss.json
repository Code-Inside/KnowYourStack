{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2664995693","IsPullRequest":false,"CreatedAt":"2024-11-16T22:10:19","Actor":"danie-ramdhani","Number":"15018","RawContent":null,"Title":"[V4] Theme colors broken on build result","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.33\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite 5.4.11\r\n\r\n**What version of Node.js are you using?**\r\n\r\n—\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\n—\r\n\r\n**Describe your issue**\r\n\r\n`--color-primary` is not works properly on build result but works as expected in development mode.\r\n\r\n**Steps to Reproduce**\r\n\r\n```html\r\n<div\r\n        style=\"background-color: var(--color-primary); width: 40px; height: 40px; margin-top: 10px; margin-bottom: 10px;\">\r\n</div>\r\n```\r\n\r\n```css\r\n@theme {\r\n    --color-primary: light-dark(theme(--color-cyan-700), theme(--color-cyan-300));\r\n}\r\n```\r\n\r\n**dev mode result**\r\n\r\n![dev mode result](https://github.com/user-attachments/assets/a9300be4-16d1-4f15-bd9d-3b86e658f341)\r\n\r\n![dev mode result 1](https://github.com/user-attachments/assets/c1611ded-e7ce-4710-8c2d-c19ae79da90b)\r\n\r\n**build result**\r\n\r\n![build result](https://github.com/user-attachments/assets/33e1b80d-fb21-4958-a654-373f561b6d40)\r\n\r\n![build result 1](https://github.com/user-attachments/assets/de430058-4843-4891-bba0-9dbe0341dd9c)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15018","RelatedDescription":"Open issue \"[V4] Theme colors broken on build result\" (#15018)"},{"Id":"2662472919","IsPullRequest":true,"CreatedAt":"2024-11-16T20:10:55","Actor":"philipp-spiess","Number":"15013","RawContent":null,"Title":"Bring back `max-w-screen-*` utilities","State":"closed","Body":"This PR brings back the `max-w-screen-*` utilities from v3 that read from the `--breakpoint` namespace. \r\n\r\nSince these utilities are only added back for compatibility reasons, it's put into the compatibility layer.\r\n\r\nNote that this does not do Intellisense recommendations for the functional utility. \r\n\r\n## Test Plan\r\n\r\nUnit tests are upgraded including some from the compat test that extends the `--breakpoint` namespace from `screen` keys. Also tested this in the Vite playground. ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15013","RelatedDescription":"Closed or merged PR \"Bring back `max-w-screen-*` utilities\" (#15013)"},{"Id":"2664480119","IsPullRequest":false,"CreatedAt":"2024-11-16T14:38:26","Actor":"amjarmed","Number":"15017","RawContent":null,"Title":"Empty Selector Generated in Tailwind CSS Output","State":"open","Body":"I encountered an issue where Tailwind CSS generates an invalid empty selector { } in the compiled CSS, causing errors during parsing.\r\n\r\n\r\n```bash\r\n\r\nParsing css source code failed\r\n  839 |   border-width: 1px;\r\n  840 | }\r\n> 841 |  {\r\n      |   ^\r\n  842 |   border-bottom-width: 1px !important;\r\n  843 | }\r\n  844 | .border-b {\r\n\r\nInvalid empty selector at\r\n\r\n\r\n```\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n-  \"tailwindcss\": \"^3.4.14\",\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n-  \"next\": \"15.0.1\",\r\n\r\n**What browser are you using?**\r\n\r\n- Chrome\r\n\r\n**What operating system are you using?**\r\n\r\n-  Windows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/amjarmed/jsm-banking\r\n\r\n\r\n**Describe your issue**\r\nTailwind CSS should not generate any empty selectors. All rules should be associated with a valid class or selector.\r\nA selector {border-bottom-width: 1px !important; } is generated without a class name, leading to parsing failures during build or runtime.\r\n\r\n\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15017","RelatedDescription":"Open issue \"Empty Selector Generated in Tailwind CSS Output\" (#15017)"},{"Id":"2662249111","IsPullRequest":true,"CreatedAt":"2024-11-15T21:06:52","Actor":"RobinMalfait","Number":"15010","RawContent":null,"Title":"Resolve imports from CSS file","State":"closed","Body":"This PR adds an improvement to the upgrade tool to make sure that if you pass a single CSS file, that the upgrade tool resolves all the imports in that file and processes them as well.\r\n\r\n\r\nTest plan:\r\n---\r\n\r\nCreated a project where `index.css` imports `other.css`. Another `leave-me-alone.css` is created to proof that this file is _not_ changed. Running the upgrade guide using `index.css` also migrates `other.css` but not `leave-me-alone.css`.\r\n\r\nHere is a video so you don't have to manually create it:\r\n\r\n\r\nhttps://github.com/user-attachments/assets/20decf77-77d2-4a7c-8ff1-accb1c77f8c1\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15010","RelatedDescription":"Closed or merged PR \"Resolve imports from CSS file\" (#15010)"},{"Id":"2662601377","IsPullRequest":true,"CreatedAt":"2024-11-15T17:05:28","Actor":"philipp-spiess","Number":"15015","RawContent":null,"Title":"Upgrade: Error when project is already using Tailwind CSS v4","State":"open","Body":"In some local testing we ran the `@tailwindcss/upgrade` command twice in a row. It would be great to get some feedback that this is not working, so this PR now checks if it can resolve the installed version of `tailwindcss` and if it can, it requires it to be < 4 (you can bypass this check with `--force`).","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15015","RelatedDescription":"Open PR \"Upgrade: Error when project is already using Tailwind CSS v4\" (#15015)"},{"Id":"2662578029","IsPullRequest":true,"CreatedAt":"2024-11-15T17:02:57","Actor":"RobinMalfait","Number":"15014","RawContent":null,"Title":"Make `flex` a static utility","State":"closed","Body":"This PR makes `flex` a static utility, which also means that it is located near the other static `display` utilities.\n\nThis is possible because we changed how `parseCandidate` returns an array of utilities instead of a single utility.\n\nThis makes the code more consistent and a bit easier to understand.\n\nBonus: turns out that `flex` was never suggested to intellisense, but now it is!\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15014","RelatedDescription":"Closed or merged PR \"Make `flex` a static utility\" (#15014)"},{"Id":"2662466188","IsPullRequest":false,"CreatedAt":"2024-11-15T16:18:51","Actor":"delCatta","Number":"15012","RawContent":null,"Title":"[v4] Can't find Plugins in standalone cli","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.0.0.alpha.34\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: standalone-cli @ 4.0.0.alpha.34\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: N/A\r\n\r\n**What browser are you using?**\r\n\r\nFor example: N/A\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/delCatta/tailwind-issue\r\n\r\n**Describe your issue**\r\n\r\nUsing the latest release I'm unable to use the @tailwindcss/typography plugin because it is not included in the executable.\r\n\r\nI copied the release file and created an `input.css` file with the following contents:\r\n\r\n```\r\n@import \"tailwindcss\";\r\n@plugin \"@tailwindcss/typography\";\r\n```\r\n\r\nThen I ran `./tailwindcss-macos-arm64 -i index.css -o built.css` and got:\r\n\r\n```\r\n./tailwindcss-macos-arm64 -i index.css -o built.css\r\n5737 |       }\r\n5738 |       const message = `resolve '${request}' in '${path}'`;\r\n5739 |       const finishResolved = (result) => {\r\n5740 |         return callback(null, result.path === false ? false : `${result.path.replace(/#/g, \"\\0#\")}${result.query ? result.query.replace(/#/g, \"\\0#\") : \"\"}${result.fragment || \"\"}`, result);\r\n5741 |       };\r\n5742 |         const error = new Error(\"Can't \" + message);\r\n                             ^\r\nerror: Can't resolve '@tailwindcss/typography' in '<THE-CURRENT-FOLDER>'\r\n      at finishWithoutResolve (/$bunfs/root/tailwindcss-macos-arm64:5742:23)\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n```\r\n\r\nI wish to be able to use on rails using [tailwind-rails](https://github.com/rails/tailwindcss-rails) and [tailwind-ruby](https://github.com/flavorjones/tailwindcss-ruby)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15012","RelatedDescription":"Open issue \"[v4] Can't find Plugins in standalone cli\" (#15012)"},{"Id":"2662425679","IsPullRequest":true,"CreatedAt":"2024-11-15T16:18:48","Actor":"philipp-spiess","Number":"15011","RawContent":null,"Title":"Ensure clients pin the `tailwindcss` version","State":"closed","Body":"We noticed that in the current alpha 34 release, the `package.json` file of the `@tailwindcss/node` package only defines `tailwindcss` as a dev dependency. This makes it very easy for version mismatches to happen when a v3 version (or an earlier v4 alpha for that matter) was installed in the same project:\r\n\r\n```json\r\n{\r\n  \"name\": \"@tailwindcss/node\",\r\n  \"version\": \"4.0.0-alpha.34\",\r\n  \"description\": \"A utility-first CSS framework for rapidly building custom user interfaces.\",\r\n  \"license\": \"MIT\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/tailwindlabs/tailwindcss.git\",\r\n    \"directory\": \"packages/@tailwindcss-node\"\r\n  },\r\n  \"bugs\": \"https://github.com/tailwindlabs/tailwindcss/issues\",\r\n  \"homepage\": \"https://tailwindcss.com\",\r\n  \"files\": [\r\n    \"dist/\"\r\n  ],\r\n  \"publishConfig\": {\r\n    \"provenance\": true,\r\n    \"access\": \"public\"\r\n  },\r\n  \"exports\": {\r\n    \".\": {\r\n      \"types\": \"./dist/index.d.ts\",\r\n      \"import\": \"./dist/index.mjs\",\r\n      \"require\": \"./dist/index.js\"\r\n    },\r\n    \"./require-cache\": {\r\n      \"types\": \"./dist/require-cache.d.ts\",\r\n      \"default\": \"./dist/require-cache.js\"\r\n    },\r\n    \"./esm-cache-loader\": {\r\n      \"types\": \"./dist/esm-cache.loader.d.mts\",\r\n      \"default\": \"./dist/esm-cache.loader.mjs\"\r\n    }\r\n  },\r\n  \"devDependencies\": {\r\n    \"tailwindcss\": \"4.0.0-alpha.34\"\r\n  },\r\n  \"dependencies\": {\r\n    \"enhanced-resolve\": \"^5.17.1\",\r\n    \"jiti\": \"^2.0.0-beta.3\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"tsup-node\",\r\n    \"dev\": \"pnpm run build -- --watch\"\r\n  }\r\n}\r\n```\r\n\r\nFurthermore, we were trying to fix issues where our integration test setup could not install `tailwindcss@3` because of how we did pnpm overrides. \r\n\r\nThis PR fixes this by:\r\n\r\n- Ensuring every client that calls into `tailwindcss` core marks it as a version-pinned dependency. You are still required to install `tailwindcss` in your project along side a client (e.g. `@tailwindcss/vite`) but we now only use your installed version for importing the respective `.css` files. For the core logic, we are now requiring each package to use `tailwindcss` at the same version. This should help resolve issues like https://github.com/tailwindlabs/tailwindcss/discussions/14652\r\n- We tried to eliminate the dependency on `tailwindcss` from the `@tailwindcss/upgrade` package. Unfortunately this is not possible to do right now because we need to load the CSS files from v4 to create the right environment. In a future version we could bundle the required CSS files with `@tailwidncss/upgrade` but it doesn't seem necessary for now.\r\n- We then changed our integration test overrides to only override the `tailwindcss` package that are dependencies of the known list of packages that we have `tailwindcss` dependencies on: `@tailwindcss/node` and `@tailwindcss/upgrade`. This ensures that we can install v3 of `tailwindcss` in the integration tests and it will work. Something we want to do for some upgrade tests.\r\n\r\n# Test plan\r\n\r\nIntegration work again. Furthermore we added a quick setup with the CLI using the local tarballs and ensured it works:\r\n\r\n```bash\r\npnpm init\r\npnpm install ../../tailwindcss/dist/tailwindcss-cli.tgz \r\npnpm install ../../tailwindcss/dist/tailwindcss.tgz \r\necho '@import \"tailwindcss\";' > index.css\r\necho '<div class=\"underline\"></div>' > index.html\r\npnpm tailwindcss -i index.css -o out.css\r\ncat out.css\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15011","RelatedDescription":"Closed or merged PR \"Ensure clients pin the `tailwindcss` version\" (#15011)"},{"Id":"2661525779","IsPullRequest":true,"CreatedAt":"2024-11-15T14:43:12","Actor":"philipp-spiess","Number":"15009","RawContent":null,"Title":"Bring back named opacity support for color opacity modifiers","State":"closed","Body":"This PR reverts https://github.com/tailwindlabs/tailwindcss/pull/14278 to bring back support for using named opacity values in color opacity modifiers:\r\n\r\n```css\r\n@theme {\r\n  --opacity-myOpacity: 50%;\r\n}\r\n```\r\n\r\n```html\r\n<div class=\"bg-red-500/myOpacity\"></div>\r\n```\r\n\r\nWe briefly discuss to restructure the code so that we avoid adding a `theme` argument to the call sites but I do still prefer the current approach for the following reasons: The way to avoid this is to a) put something in either the `Theme` class scope, where it feels grossly out of place, or b) put it into the shared closure in the utilities file which is already very large and hard to reason. Furthermore, there's a second call site in the compile function where we would need to duplicate the namespace lookup.\r\n\r\nEvery caller of the current `asColor` value already has access to the `Theme` so passing that as an argument seems like the least intrusive way.\r\n\r\n## Test Plan\r\n\r\nBrought back the unit tests but I also tested it with the Vite extension:\r\n\r\n<img width=\"744\" alt=\"Screenshot 2024-11-15 at 11 15 05\" src=\"https://github.com/user-attachments/assets/63923b80-767e-4104-b7eb-f71fc815b51e\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15009","RelatedDescription":"Closed or merged PR \"Bring back named opacity support for color opacity modifiers\" (#15009)"},{"Id":"2660632944","IsPullRequest":false,"CreatedAt":"2024-11-15T10:10:22","Actor":"HexMox","Number":"15007","RawContent":null,"Title":"Special character in group-has-[xxx] not escaped","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.13\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss-cli 8.4.47, Next.js 14.2.8\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv18.20.4\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nN/A\r\n\r\n**Describe your issue**\r\n\r\n<img width=\"958\" alt=\"image\" src=\"https://github.com/user-attachments/assets/528e5d9c-6d25-4b6c-b310-74f9f9a8154d\">\r\n\r\nThe colon in css result .group:has(xxx) is unescaped","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15007","RelatedDescription":"Closed issue \"Special character in group-has-[xxx] not escaped\" (#15007)"},{"Id":"2659934221","IsPullRequest":false,"CreatedAt":"2024-11-14T20:09:53","Actor":"blittle","Number":"15005","RawContent":null,"Title":"@property isn't supported in shadow roots","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: `4.0.0-alpha.34`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nWeb components with shadow roots.\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.2.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/blittle/tw-shadow\r\n\r\n**Describe your issue**\r\n\r\nTailwind v4 uses `@property` to define defaults for custom properties. At the moment, shadow roots do _not support_ `@property`. It used to be explicitly denied in the spec, but it looks like there's talk on adding it: https://github.com/w3c/css-houdini-drafts/pull/1085\r\n\r\nI don't know if this is something tailwind should fix, but it took me a while to find the issue, so it's probably worth keeping this issue to document the limitation.\r\n\r\nHere is a work-around, [just attaching the `@property` definitions to the base document](https://benfrain.com/using-css-property-inside-shadowroot-web-components-workaround/). It would be nice if tailwind provided an easy way to import just that content.\r\n\r\nAn easy way to do that with Vite is to create a tailwind css file specifically for the properties and apply a transform:\r\n\r\n```js\r\nexport default defineConfig(() => {\r\n  return {\r\n    ...\r\n    plugins: [\r\n      tailwindcss(),\r\n      {\r\n        name: \"tailwind-properties\",\r\n        transform(code, id) {\r\n          if (id.endsWith(\"tailwind-properties.css?inline\")) {\r\n            // Change custom properties to inherit\r\n            code = code.replaceAll(\"inherits: false\", \"inherits: true\");\r\n\r\n            // Remove everything before the property declarations\r\n            code = code.substring(code.indexOf(\"@property\"));\r\n\r\n            return code;\r\n          }\r\n        },\r\n      },\r\n    ],\r\n  };\r\n});\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15005","RelatedDescription":"Open issue \"@property isn't supported in shadow roots\" (#15005)"},{"Id":"2659145188","IsPullRequest":false,"CreatedAt":"2024-11-14T20:00:07","Actor":"schenney-chromium","Number":"15000","RawContent":null,"Title":"Selection is broken in Chrome 131 due to --tw-text-opacity and friends","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nNot sure what version sites are using, but I suspect less than a year old.\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nDon't know\r\n\r\n**What version of Node.js are you using?**\r\n\r\nDon't know\r\n\r\n**What browser are you using?**\r\n\r\nChrome and Edge\r\n\r\n**What operating system are you using?**\r\n\r\nAll\r\n\r\n**Reproduction URL**\r\n\r\nSee https://issues.chromium.org/issues/378754060 for numerous reproductions. From The Verge:\r\n```\r\n.selection\\:bg-franklin-20::selection {\r\n    --tw-bg-opacity: 1;\r\n    background-color: rgb(216 255 246/var(--tw-bg-opacity));\r\n}\r\n```\r\nAll selection is blank in Chrome 131 and later on The Verge, Bloomberg news, ...\r\n\r\n**Describe your issue**\r\n\r\nChrome 131 and browsers using Chromium enable CSS Highlight Inheritance for ::selection. In this model custom properties for ::selection and other highlight pseudos are taken from the originating element, and not the pseudo itself. All custom properties defined on highlight pseudos are ignored. But Tailwind defines a custom property for opacity on every use of a color, including ::selection colors. There is no practical use for this because the variable is redefined all over the place and any given usage inside ::selection applies only within that ::selection block (with the old behavior).\r\n\r\nSee https://developer.chrome.com/blog/selection-styling and https://blogs.igalia.com/schenney/css-custom-properties-in-highlight-pseudos/\r\n\r\nI might try to figure out how to fix this and put up a PR for you.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15000","RelatedDescription":"Closed issue \"Selection is broken in Chrome 131 due to --tw-text-opacity and friends\" (#15000)"},{"Id":"2659790744","IsPullRequest":false,"CreatedAt":"2024-11-14T19:09:58","Actor":"ranseur92","Number":"15004","RawContent":null,"Title":"[V4] - Loading PostCSS Plugin failed: The URL must be of scheme file","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.21 onwards\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nVite ^5.4.8\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.11.0\r\n\r\n**What browser are you using?**\r\n\r\nEdge\r\n\r\n**What operating system are you using?**\r\n\r\nWindows 11\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/ranseur92/twind-test\r\n\r\n**Describe your issue**\r\n\r\nCannot get any version higher than v4 Alpha 20 to work, within a AdonisJS + InertiaJS setup.\r\n\r\n```\r\n[Failed to load PostCSS config: Failed to load PostCSS config (searchPath: D:/JS/twind-test): [Error] Loading PostCSS Plugin failed: The URL must be of scheme file\r\n\r\n(@D:\\JS\\twind-test\\postcss.config.cjs)\r\nError: Loading PostCSS Plugin failed: The URL must be of scheme file\r\n```\r\n\r\nI'm guessing the underlying issue, is related to https://github.com/tailwindlabs/tailwindcss/issues/14420 but that fix isn't appropriate in this case. ","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15004","RelatedDescription":"Open issue \"[V4] - Loading PostCSS Plugin failed: The URL must be of scheme file\" (#15004)"},{"Id":"2659531872","IsPullRequest":true,"CreatedAt":"2024-11-14T18:33:27","Actor":"thecrypticace","Number":"15003","RawContent":null,"Title":"Add variable fallback to fix Chrome issue","State":"closed","Body":"This works around an issue in Chrome where `::selection` does not read from variables defined on `::selection` thus breaking all uses of color utilities with the selection variant. e.g. `selection::bg-red-200`.\r\n\r\nWe now add a fallback value of `1` to all uses of `var(--tw-bg-opacity)`, `var(--tw-text-opacity)`, `var(--tw-border-opacity)`, etc… since Chrome treats the variable as if it did not exist because it's not defined on the parent.\r\n\r\nIn Chrome 131 (until the change is rolled back) existing utilities like these will not work:\r\n- `selection:text-opacity-50`\r\n- `selection:[--tw-text-opacity:0.5]`\r\n\r\nFixes #15000 ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15003","RelatedDescription":"Closed or merged PR \"Add variable fallback to fix Chrome issue\" (#15003)"},{"Id":"2659518446","IsPullRequest":true,"CreatedAt":"2024-11-14T17:23:40","Actor":"philipp-spiess","Number":"15002","RawContent":null,"Title":"Prepare v4.0.0-alpha.34","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15002","RelatedDescription":"Closed or merged PR \"Prepare v4.0.0-alpha.34\" (#15002)"},{"Id":"2658673469","IsPullRequest":true,"CreatedAt":"2024-11-14T17:19:22","Actor":"philipp-spiess","Number":"14999","RawContent":null,"Title":"Add codemod and interop for legacy `container` component configu","State":"closed","Body":"This PR adds support for handling v3 [`container` customizations ](https://tailwindcss.com/docs/container#customizing). This is done by adding a custom utility to extend the core `container` utility. A concrete example can be taken from the added integration test.\r\n\r\n### Input\r\n\r\n```ts\r\n/** @type {import('tailwindcss').Config} */\r\nexport default {\r\n  content: ['./src/**/*.html'],\r\n  theme: {\r\n    container: {\r\n      center: true,\r\n      padding: {\r\n        DEFAULT: '2rem',\r\n        '2xl': '4rem',\r\n      },\r\n      screens: {\r\n        md: '48rem', // Matches a default --breakpoint\r\n        xl: '1280px',\r\n        '2xl': '1536px',\r\n      },\r\n    },\r\n  },\r\n}\r\n```\r\n\r\n### Output\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n\r\n@utility container {\r\n  margin-inline: auto;\r\n  padding-inline: 2rem;\r\n\r\n  @media (width >= theme(--breakpoint-sm)) {\r\n    max-width: none;\r\n  }\r\n\r\n  @media (width >= 48rem) {\r\n    max-width: 48rem;\r\n  }\r\n\r\n  @media (width >= 1280px) {\r\n    max-width: 1280px;\r\n  }\r\n\r\n  @media (width >= 1536px) {\r\n    max-width: 1536px;\r\n    padding-inline: 4rem;\r\n  }\r\n}\r\n````\r\n\r\n\r\n## Test Plan\r\n\r\nThis PR adds extensive tests to the compat layer as part of unit tests. Additionally it does at a test to the codemod setup that shows that the right `@utility` code is generated. Furthermore I compared the implementation against v3 on both the compat layer and the custom `@utility`:\r\n\r\nhttps://github.com/user-attachments/assets/44d6cbfb-4861-4225-9593-602b719f628f\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14999","RelatedDescription":"Closed or merged PR \"Add codemod and interop for legacy `container` component configu\" (#14999)"},{"Id":"2653175070","IsPullRequest":true,"CreatedAt":"2024-11-14T17:05:14","Actor":"RobinMalfait","Number":"14982","RawContent":null,"Title":"Add missing `layer(…)` to imports above Tailwind directives","State":"closed","Body":"This PR fixes an issue where imports above Tailwind directives didn't get a `layer(…)` argument.\r\n\r\nGiven this CSS:\r\n```css\r\n@import \"./typography.css\";\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n```\r\n\r\nIt was migrated to:\r\n```css\r\n@import \"./typography.css\";\r\n@import \"tailwindcss\";\r\n```\r\n\r\nBut to ensure that the typography styles end up in the correct location, it requires the `layer(…)` argument.\r\n\r\nThis PR now migrates the input to:\r\n```css\r\n@import \"./typography.css\" layer(base);\r\n@import \"tailwindcss\";\r\n```\r\n\r\nTest plan:\r\n---\r\n\r\nAdded an integration test where an import receives the `layer(…)`, but an import that eventually contains `@utility` does not receive the `layer(…)` argument. This is necessary otherwise the `@utility` will be nested when we are processing the inlined CSS.\r\n\r\nRunning this on the Commit template, we do have a proper `layer(…)`\r\n<img width=\"585\" alt=\"image\" src=\"https://github.com/user-attachments/assets/538055e6-a9ac-490d-981f-41065a6b59f9\">\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14982","RelatedDescription":"Closed or merged PR \"Add missing `layer(…)` to imports above Tailwind directives\" (#14982)"},{"Id":"2659464653","IsPullRequest":true,"CreatedAt":"2024-11-14T16:57:03","Actor":"RobinMalfait","Number":"15001","RawContent":null,"Title":"Improve multi-root `@config` linking","State":"open","Body":"This PR improves the discoverability of Tailwind config files when we are trying to link them to your CSS files.\r\n\r\nWhen you have multiple \"root\" CSS files in your project, and if they don't include an `@config` directive, then we tried to find the Tailwind config file in your current working directory.\r\n\r\nThis means that if you run the upgrade command from the root of your project, and you have a nested folder with a separate Tailwind setup, then the nested CSS file would link to the root Tailwind config file.\r\n\r\nVisually, you can think of it like this:\r\n\r\n```\r\n.\r\n├── admin\r\n│   ├── src\r\n│   │   └── styles\r\n│   │       └── index.css       <-- This will be linked to (1)\r\n│   └── tailwind.config.js      (2)\r\n├── src\r\n│   └── styles\r\n│       └── index.css           <-- This will be linked to (1)\r\n└── tailwind.config.js          (1)\r\n```\r\n\r\nIf you run the upgrade command from the root of your project, then the `/src/styles/index.css` will be linked to `/tailwind.config.js` which is what we expect.\r\n\r\nBut `/admin/src/styles/index.css` will _also_ be linked to `/tailwind.config.js`\r\n\r\nWith this PR we improve this behavior by looking at the CSS file, and crawling up the parent tree. This mens that the new behavior looks like this:\r\n\r\n```\r\n.\r\n├── admin\r\n│   ├── src\r\n│   │   └── styles\r\n│   │       └── index.css       <-- This will be linked to (2)\r\n│   └── tailwind.config.js      (2)\r\n├── src\r\n│   └── styles\r\n│       └── index.css           <-- This will be linked to (1)\r\n└── tailwind.config.js          (1)\r\n```\r\n\r\nNow `/src/styles/index.css` will be linked to `/tailwind.config.js`, and `/admin/src/styles/index.css` will be linked to `/admin/tailwind.config.js`.\r\n\r\nWhen we discover the Tailwind config file, we will also print a message to the user to let them know which CSS file is linked to which Tailwind config file.\r\n\r\nThis should be a safe improvement because if your Tailwind config file had a different name, or if it lived in a sibling folder then Tailwind wouldn't find it either and you already required a `@config \"…\";` directive in your CSS file to point to the correct file.\r\n\r\nIn the unlikely event that it turns out that 2 (or more) CSS files resolve to the same to the same Tailwind config file, then an upgrade might not be safe and some manual intervention might be needed. In this case, we will show a warning about this.\r\n\r\n<img width=\"1312\" alt=\"image\" src=\"https://github.com/user-attachments/assets/5ad6285e-6256-466f-ae64-54db109d3f44\">\r\n\r\nTest plan:\r\n---\r\n\r\n- Added an integration test that properly links the nearest Tailwind config file by looking up the tree\r\n- Added an integration test that resolves 2 or more CSS files to the same config file, resulting in an error where manual intervention is needed\r\n- Ran it on the Tailwind UI codebase\r\n\r\nRunning this on Tailwind UI's codebase it looks like this:\r\n\r\n<img width=\"1682\" alt=\"image\" src=\"https://github.com/user-attachments/assets/f566bf55-8f8c-41a8-8d4f-ac937d01f4e7\">\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15001","RelatedDescription":"Open PR \"Improve multi-root `@config` linking\" (#15001)"},{"Id":"2655839209","IsPullRequest":true,"CreatedAt":"2024-11-14T10:48:31","Actor":"RobinMalfait","Number":"14989","RawContent":null,"Title":"Ensure `@config` is injected in common ancestor sheet","State":"closed","Body":"This PR fixes an issue where an `@config` was injected in a strange location if you have multiple CSS files with Tailwind directives. \r\n\r\nLet's say you have this setup:\r\n```css\r\n/* ./src/index.css */\r\n@import \"./tailwind-setup.css\";\r\n\r\n/* ./src/tailwind-setup.css */\r\n@import \"./base.css\";\r\n@import \"./components.css\";\r\n@import \"./utilities.css\";\r\n\r\n/* ./src/base.css */\r\n@tailwind base;\r\n\r\n/* ./src/components.css */\r\n@tailwind components;\r\n\r\n/* ./src/utilities.css */\r\n@tailwind utilities;\r\n```\r\n\r\nIn this case, `base.css`, `components.css`, and `utilities.css` are all considered Tailwind roots because they contain Tailwind directives or imports.\r\n\r\nSince there are multiple roots, the nearest common ancestor should become the tailwind root (where `@config` is injected). In this case, the nearest common ancestor is `tailwind-setup.css` (not `index.css` because that's further away).\r\n\r\nBefore this change, we find the common ancestor between `base.css` and `components.css` which would be `index.css` instead of `tailwind-setup.css`.\r\n\r\nIn a next iteration, we compare `index.css` with `utilities.css` and find that there is no common ancestor (because the `index.css` file has no parents). This resulted in the `@config` being injected in `index.css` and in `utilities.css`.\r\n\r\nContinuing with the rest of the migrations, we migrate the `index.css`'s `@config` away, but we didn't migrate the `@config` from `utilities.css`.\r\n\r\nWith this PR, we don't even have the `@config` in the `utilities.css` file anymore.\r\n\r\nTest plan\r\n---\r\n\r\n1. Added an integration test with a non-migrateable config file to ensure that the `@config` is injected in the correct file.\r\n2. Added an integration test with a migrateable config file to ensure that the CSS config is injected in the correct file. h/t @philipp-spiess \r\n3. Ran the upgrade on the https://commit.tailwindui.com project and ensured that \r\n  1. The `@config` does not exist in the `utilities.css` file (this was the first bug we solved)\r\n  2. The `@config` is replaced in the `tailwind.css` file correctly.\r\n\r\n<img width=\"592\" alt=\"image\" src=\"https://github.com/user-attachments/assets/02e3f6ea-a85d-46c2-ac93-09f34ac4a4b8\">\r\n\r\n<img width=\"573\" alt=\"image\" src=\"https://github.com/user-attachments/assets/e372eb5f-5732-4052-ab39-096ba7970ff6\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14989","RelatedDescription":"Closed or merged PR \"Ensure `@config` is injected in common ancestor sheet\" (#14989)"},{"Id":"2657839088","IsPullRequest":false,"CreatedAt":"2024-11-14T10:26:38","Actor":"BVPritesh","Number":"14998","RawContent":null,"Title":"Need to resolve the :has() empty sub selector after build the angular project.","State":"closed","Body":"After building the Angular project, I found that a warning was displayed. However, the style.css file is not empty; the .has() selector has a value. Please check the screenshot below.\r\n\r\nLet me know if you need further adjustments!\r\n\r\nWarning message as below:\r\n```\r\nWARNING] 7 rules skipped due to selector errors:\r\n  .has-\\[\\:checked\\]\\:border-indigo-200:has() -> Empty sub-selector\r\n  .has-\\[\\:checked\\]\\:bg-indigo-50:has() -> Empty sub-selector\r\n  .has-\\[\\:checked\\]\\:bg-indigo-500:has() -> Empty sub-selector\r\n  .has-\\[\\:checked\\]\\:text-indigo-900:has() -> Empty sub-selector\r\n  .has-\\[\\:checked\\]\\:text-white:has() -> Empty sub-selector\r\n  .has-\\[\\:checked\\]\\:ring-2:has() -> Empty sub-selector\r\n  .has-\\[\\:checked\\]\\:ring-indigo-600:has() -> Empty sub-selector\r\n```  \r\nScreenshot:  \r\n![image](https://github.com/user-attachments/assets/18c83f7f-c195-4cf4-b422-90571236a645)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14998","RelatedDescription":"Closed issue \"Need to resolve the :has() empty sub selector after build the angular project.\" (#14998)"},{"Id":"2655567876","IsPullRequest":false,"CreatedAt":"2024-11-13T18:46:24","Actor":"maxdeichmann","Number":"14988","RawContent":null,"Title":"[Security] SNYK-JS-CROSSSPAWN-8303230","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: tailwindcss 3.4.14\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: next 14.2.15\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: [v12.0.0](node:20-alpine3.20)\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS\r\n\r\n**Reproduction URL**\r\n\r\n- pnpm lock file from tailwind: https://github.com/tailwindlabs/tailwindcss/blob/0b908f3992d83ded583bf59f2457c41670418eca/pnpm-lock.yaml#L1826 \r\n\r\n**Describe your issue**\r\n\r\nWe are faced with the SNYK-JS-CROSSSPAWN-8303230 vulnerability which occurs in cross-spawn < 7.0.5. Can you please upgrade the dependencies on your end?\r\n\r\nhttps://security.snyk.io/vuln/SNYK-JS-CROSSSPAWN-8303230","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14988","RelatedDescription":"Closed issue \"[Security] SNYK-JS-CROSSSPAWN-8303230\" (#14988)"},{"Id":"2656137078","IsPullRequest":true,"CreatedAt":"2024-11-13T18:39:21","Actor":"philipp-spiess","Number":"14993","RawContent":null,"Title":"Reintroduce `container` component as a utility","State":"closed","Body":"Closes #13129\r\n\r\nWe're adding back the v3 `container` component, this time as a utility. The idea is that we support the default `container` behavior but we will not have an API to configure this similar to what v3 offered. Instead, the recommended approach is to configure it by creating a custom utility like so:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n\r\n@utility container {\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding-left: 2rem;\r\n  padding-right: 2rem;\r\n}\r\n```\r\n\r\nWe do have an idea of how to migrate existing JS configuration files to the new `@utility` as part of the interop layer and the codemod. This is going to be a follow-up PR though.\r\n\r\n## Test Plan\r\n\r\nWe added a unit test but we've also played around with it in the Vite playground. Yep, looks like a `container`:\r\n\r\nhttps://github.com/user-attachments/assets/ea7a5a4c-4cde-4ef5-9062-03e16239eb85\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14993","RelatedDescription":"Closed or merged PR \"Reintroduce `container` component as a utility\" (#14993)"},{"Id":"2655863498","IsPullRequest":false,"CreatedAt":"2024-11-13T18:21:50","Actor":"JasonKleban","Number":"14990","RawContent":null,"Title":"Performance Monitoring flags two regex taking majority of cli time","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n3.4.14\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss-loader: 8.1, webpack 5.96\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv21.1.0\r\n\r\n**What operating system are you using?**\r\n\r\nMac, Windows\r\n\r\n**Describe your issue**\r\n\r\nIn a fairly small project tailwind is taking 26 seconds.  I profiled it with Chrome DevTools `npx --node-options=--inspect-brk tailwindcss -i .\\src\\input.css` and see that some specific regexes are taking up a majority of the time:\r\n\r\n![image](https://github.com/user-attachments/assets/4884d5ed-c456-4d83-94df-d20829b6f117)\r\n\r\nI don't think this is project-specific.  I'm suspecting that these regexes should be re-evaluated for performance - but I have not been able to find where these regexes are in the source.\r\n\r\n> ```((?=(((?:([^\\s\"'`\\[\\\\]+-)?\\[[^\\s`]+\\]\\/[\\w_-]+:|([^\\s\"'`\\[\\\\]+-)?\\[[^\\s`]+\\]:|[^\\s`\\[\\\\]+:))+))\\2)?!?(?:\\[[^\\s:'\"`]+:[^\\s\\[\\]]+\\]|\\[[^\\s:'\"`\\]]+:[^\\s]+?\\[[^\\s]+\\][^\\s]+?\\]|(?:-?(?:\\w+)|@(?:\\w+))(?:(?:(?:-(?:\\w+-)*\\['[^\\s]+'\\]|-(?:\\w+-)*\\[\"[^\\s]+\"\\]|-(?:\\w+-)*\\[`[^\\s]+`\\]|-(?:\\w+-)*\\[(?:[^\\s\\[\\]]+\\[[^\\s\\[\\]]+\\])*[^\\s:\\[\\]]+\\])(?![{([]])(?:\\/[^\\s'\"`\\\\><$]*)?|(?:-(?:\\w+-)*\\['[^\\s]+'\\]|-(?:\\w+-)*\\[\"[^\\s]+\"\\]|-(?:\\w+-)*\\[`[^\\s]+`\\]|-(?:\\w+-)*\\[(?:[^\\s\\[\\]]+\\[[^\\s\\[\\]]+\\])*[^\\s\\[\\]]+\\])(?![{([]])(?:\\/[^\\s'\"`\\\\$]*)?|[-\\/][^\\s'\"`\\\\$={><]*))?)```\r\n\r\n> ```((?=(((?:@\\[[^\\s\"'`]+\\](\\/[^\\s\"'`]+)?:|([^\\s\"'`\\[\\\\]+-)?\\[[^\\s\"'`]+\\]\\/[\\w_-]+:|([^\\s\"'`\\[\\\\]+-)?\\[[^\\s\"'`]+\\]:|[^\\s\"'`\\[\\\\]+:))+))\\2)?!?(?:\\[[^\\s:'\"`]+:[^\\s\\[\\]]+\\]|\\[[^\\s:'\"`\\]]+:[^\\s]+?\\[[^\\s]+\\][^\\s]+?\\]|(?:-?(?:\\w+)|@(?:\\w+))(?:(?:(?:-(?:\\w+-)*\\['[^\\s]+'\\]|-(?:\\w+-)*\\[\"[^\\s]+\"\\]|-(?:\\w+-)*\\[`[^\\s]+`\\]|-(?:\\w+-)*\\[(?:[^\\s\\[\\]]+\\[[^\\s\\[\\]]+\\])*[^\\s:\\[\\]]+\\])(?![{([]])(?:\\/[^\\s'\"`\\\\><$]*)?|(?:-(?:\\w+-)*\\['[^\\s]+'\\]|-(?:\\w+-)*\\[\"[^\\s]+\"\\]|-(?:\\w+-)*\\[`[^\\s]+`\\]|-(?:\\w+-)*\\[(?:[^\\s\\[\\]]+\\[[^\\s\\[\\]]+\\])*[^\\s\\[\\]]+\\])(?![{([]])(?:\\/[^\\s'\"`\\\\$]*)?|[-\\/][^\\s'\"`\\\\$={><]*))?)```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14990","RelatedDescription":"Closed issue \"Performance Monitoring flags two regex taking majority of cli time\" (#14990)"},{"Id":"2656007640","IsPullRequest":false,"CreatedAt":"2024-11-13T17:35:11","Actor":"simonmaass","Number":"14992","RawContent":null,"Title":"Lexical error on line 1: Unrecognized text. in v4","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.0.0-alpha.30\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\"@tailwindcss/node@4.0.0-alpha.30\"\r\n\"@tailwindcss/postcss@4.0.0-alpha.30\"\r\n\"@tailwindcss/vite@4.0.0-alpha.30\"\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.11.1\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Describe your issue**\r\n\r\n WARN  [vite:css] Lexical error on line 1: Unrecognized text.                                                                                                                                     17:04:20\r\n\r\n  Erroneous area:\r\n1: infinity * 1px\r\n^..^\r\n1117|    }\r\n1118|    .rounded-full {\r\n1119|      border-radius: calc(infinity * 1px);\r\n   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n1120|    }\r\n1121|    .rounded-lg { (x2)\r\n\r\n![image](https://github.com/user-attachments/assets/baca0ffb-066b-4109-b52a-274669d690ca)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14992","RelatedDescription":"Closed issue \"Lexical error on line 1: Unrecognized text. in v4\" (#14992)"},{"Id":"2655994531","IsPullRequest":true,"CreatedAt":"2024-11-13T16:03:27","Actor":"adamwathan","Number":"14991","RawContent":null,"Title":"Ensure consistent opacity for disabled form controls in all browsers","State":"open","Body":"We noticed that in Chrome, disabled `<select>` elements were being rendered at 70% opacity, but were being rendered at 100% opacity in Firefox and Safari. After some research, we learned that all form controls in all browsers are rendered at a lower opacity when disabled _if you don't include our other Preflight styles_, but some of the other normalizations we do in Preflight (specifically stuff around borders) causes each browser to abandon their default/native control styles, and only Chrome persists the user-agent opacity setting it was using for the untouched native control.\r\n\r\nThis PR just sets the opacity for all disabled elements to `1` so that there are no surprises and you can style your disabled elements however you want. This is something we ran into on Catalyst, and had to add `disabled:opacity-100` to our select controls to avoid since we had our own custom styles for them.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14991","RelatedDescription":"Open PR \"Ensure consistent opacity for disabled form controls in all browsers\" (#14991)"},{"Id":"2652852608","IsPullRequest":true,"CreatedAt":"2024-11-13T15:42:49","Actor":"philipp-spiess","Number":"14981","RawContent":null,"Title":"Vite: Don't track candidate changes for Svelte `<style>` tags","State":"closed","Body":"Closes #14965\r\n\r\nThis PR changes the way we register Tailwind CSS as a Svelte preprocessor when using the Vite plugin. The idea is to reduce the bookkeeping for interacting with CSS inside `<style>` tags so that we have a more consistent behavior and make sure the Svelte-specific post-processing (e.g. local class mangling) works as expected.\r\n\r\nPrior to this change, we were running Tailwind CSS as a Svelte preprocessor and then we would transform the file again when necessary inside the Vite `transform` hook. This is necessary to have the right list of candidates when we build the final CSS, but it did cause some situation to not apply the Svelte post-processors anymore. The repro for this seemed to indicate a timing specific issue and I did notice that specifically the code where we invalidate modules in Vite would cause unexpected processing orders.\r\n\r\nWe do, however, not officially support rendering utilities (`@tailwind utilities;`) inside `<style>` tag. This is because the `<style>` block is scoped by default and emitting utilities will always include utilities for all classes in your whole project. For this case, we highly recommend creating as separate `.css` file and importing it explicitly.\r\n\r\nWith this limitation in place, the additional bookkeeping where we need to invalidate modules because the candidate list has changed is no longer necessary and removing it allows us to reduce the complexity of the Svelte integration.\r\n\r\n## Test Plan\r\n\r\nhttps://github.com/user-attachments/assets/32c8e91f-ab21-48c6-aeaf-2582273b9bac\r\n\r\nNot seen in the test plan above I also tested the `pnpm build --watch` step of the Vite project. This does require the `pnpm preview` server to restart but the build artifact are updated as expected.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14981","RelatedDescription":"Closed or merged PR \"Vite: Don't track candidate changes for Svelte `<style>` tags\" (#14981)"},{"Id":"2652765147","IsPullRequest":true,"CreatedAt":"2024-11-13T15:23:34","Actor":"RobinMalfait","Number":"14979","RawContent":null,"Title":"Ensure it's safe to perform suffix-less migrations","State":"closed","Body":"This PR makes sure that migrations from suffix-less candidates (e.g.: `rounded`, `blur`, `shadow`) are safe to be migrated. \n\nIn some code snippets that's not always the case.\n\nGiven the following code snippet:\n```tsx\ntype Star = [\n  x: number,\n  y: number,\n  dim?: boolean,\n  blur?: boolean,\n  rounded?: boolean,\n  shadow?: boolean,\n]\n\nfunction Star({ point: [cx, cy, dim, blur, rounded, shadow] }: { point: Star }) {\n  return <svg class=\"rounded shadow blur\" filter={blur ? 'url(…)' : undefined} />\n}\n```\n\nWithout this change, it would result in:\n```tsx\ntype Star = [\n  x: number,\n  y: number,\n  dim?: boolean,\n  blur-sm?: boolean,\n  rounded-sm?: boolean,\n  shadow-sm?: boolean,\n]\n\nfunction Star({ point: [cx, cy, dim, blur-sm, rounded-sm, shadow-sm] }: { point: Star }) {\n  return <svg class=\"rounded-sm shadow-sm blur-sm\" filter={blur-sm ? 'url(…)' : undefined} />\n}\n```\n\nBut with this change, it results in:\n```tsx\ntype Star = [\n  x: number,\n  y: number,\n  dim?: boolean,\n  blur?: boolean,\n  rounded?: boolean,\n  shadow?: boolean,\n]\n\nfunction Star({ point: [cx, cy, dim, blur, rounded, shadow] }: { point: Star }) {\n  return <svg class=\"rounded-sm shadow-sm blur-sm\" filter={blur ? 'url(…)' : undefined} />\n}\n```\n\nNotice how the classes inside the `class` attribute _are_ converted, but the ones in the types or as part of the JavaScript code (e.g.: `filter={blur ? 'url(…)' : undefined}`) are not.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14979","RelatedDescription":"Closed or merged PR \"Ensure it's safe to perform suffix-less migrations\" (#14979)"},{"Id":"2653850492","IsPullRequest":true,"CreatedAt":"2024-11-13T15:18:59","Actor":"adamwathan","Number":"14984","RawContent":null,"Title":"Support specifying gradient interpolation method via modifier","State":"closed","Body":"This PR adds support for specifying a color interpolation method for all gradient utilities using a modifier:\r\n\r\n```html\r\n<div class=\"bg-linear-to-r/oklab\">\r\n```\r\n\r\nSupported bare values are any valid color space keyword, as well as the special keywords `shorter`, `longer`, `increasing`, and `decreasing`, which are shortcuts for `in oklch {keyword} hue`.\r\n\r\nArbitrary values are also supported and are used as-is, so the `in` keyword is not automatically included for you:\r\n\r\n```html\r\n<div class=\"bg-linear-to-r/[in_oklab]\">\r\n```\r\n\r\nModifiers are not supported when using arbitrary values for the actual gradient, as it's expected that your arbitrary gradient value contain all of the details you want in your gradient:\r\n\r\n\r\n```html\r\n<!-- Won't work -->\r\n<div class=\"bg-linear-[to_right]/oklab\">\r\n\r\n<!-- Do this -->\r\n<div class=\"bg-linear-[to_right_in_oklab]\">\r\n```\r\n\r\nResolves https://github.com/tailwindlabs/tailwindcss/issues/14955, but it may still be wise to make `oklab` the default since I do sort of agree with the poster there that most people probably expect a gradient between two colors to sort of just \"fade\" between them rather than interpolate between them around the color wheel.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14984","RelatedDescription":"Closed or merged PR \"Support specifying gradient interpolation method via modifier\" (#14984)"},{"Id":"2653885602","IsPullRequest":false,"CreatedAt":"2024-11-13T10:32:06","Actor":"F-fengzi","Number":"14985","RawContent":null,"Title":"[v4] font family config breaks in `4.0.0-alpha.32`","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.33\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite 5.4.11, @tailwindcss/vite 4.0.0-alpha.33, svelte 5.4.16\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.17.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome 130\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/8JDdWlTAd5\r\n\r\n**Describe your issue**\r\n\r\nCustom font family config in `@theme` stops working at `4.0.0-alpha.32`.  Confirmed working in `4.0.0-alpha.31`.\r\n\r\nElements fell back to the default font. The expected behavior is to use the font family defined in `@theme`.\r\nSuccessfully reproduced the issue in the above Playground url. To reproduce yourself, use Tailwind `4.0.0-alpha.32` and configure a custom font family.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14985","RelatedDescription":"Closed issue \"[v4] font family config breaks in `4.0.0-alpha.32`\" (#14985)"},{"Id":"2652773054","IsPullRequest":true,"CreatedAt":"2024-11-12T19:04:13","Actor":"adamwathan","Number":"14980","RawContent":null,"Title":"Support opacity values in increments of 0.25 by default","State":"closed","Body":"This PR updates all areas in the framework that accept opacity values (`opacity-*`, `backdrop-opacity-*`, `bg-red-500/*`, etc.) to accept fractional values in increments of 0.25 instead of just whole numbers.\r\n\r\nWe noticed we use values like `2.5` and `7.5` pretty regularly in our templates and don't see why those should be treated as any more \"weird\" than something like `opacity-63` which we already support, so baking this in to core.\r\n\r\nIntelliSense will still only suggest values in increments of `5` like it did before.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14980","RelatedDescription":"Closed or merged PR \"Support opacity values in increments of 0.25 by default\" (#14980)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-11-17T03:30:24.4587262Z","RunDurationInMilliseconds":416}