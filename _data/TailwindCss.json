{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2548259465","IsPullRequest":true,"CreatedAt":"2024-09-25T16:39:01","Actor":"RobinMalfait","Number":"14518","RawContent":null,"Title":"CSS codemod: ensure we don't lose selectors","State":"closed","Body":"This PR fixes an issue where a CSS rule with a selector that contains multiple selectors lost everything but the last selector.\n\nWhile testing the `npx @tailwindcss/upgrade` codemods on real world projects, I noticed that we lost one of the selectors in the `docker/docs` repository. \n\n```diff\ndiff --git a/assets/css/toc.css b/assets/css/toc.css\nindex 91ff92d7cd..3b2432e913 100644\n--- a/assets/css/toc.css\n+++ b/assets/css/toc.css\n@@ -2,7 +2,7 @@\n   #TableOfContents {\n     .toc a {\n       @apply block max-w-full truncate py-1 pl-2 hover:font-medium hover:no-underline;\n-      &[aria-current=\"true\"],\n+      \n       &:hover {\n         @apply border-l-2 border-l-gray-light bg-gradient-to-r from-gray-light-100 font-medium text-black dark:border-l-gray-dark dark:from-gray-dark-200 dark:text-white;\n       }\n```\n\nThis PR fixes the issue by not overriding the `node.selector` internally with the last selector we handled. Instead, we let the selector parser handle it entirely.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14518","RelatedDescription":"Closed or merged PR \"CSS codemod: ensure we don't lose selectors\" (#14518)"},{"Id":"2548301709","IsPullRequest":true,"CreatedAt":"2024-09-25T15:24:33","Actor":"thecrypticace","Number":"14519","RawContent":null,"Title":"CSS codemod: Add `prefix(…)` to necessary CSS imports when a prefix is used.","State":"open","Body":"If your config file has the `prefix` option specified:\r\n\r\n```ts\r\n/* tailwind.config.js */\r\nexport default {\r\n  prefix: 'tw-',\r\n};\r\n```\r\n\r\nWe'll migrate it to the new `prefix` option in CSS:\r\n\r\n```css\r\n/* app.css */\r\n@import 'tailwindcss' prefix(tw);\r\n```\r\n\r\nNote: we error on invalid prefixes currently, so if you have a prefix that is not valid, you'll need to update it to a valid one before running the migration.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14519","RelatedDescription":"Open PR \"CSS codemod: Add `prefix(…)` to necessary CSS imports when a prefix is used.\" (#14519)"},{"Id":"2545173827","IsPullRequest":true,"CreatedAt":"2024-09-25T14:20:14","Actor":"philipp-spiess","Number":"14502","RawContent":null,"Title":"Add setup for template migrations","State":"closed","Body":"This PR adds the initial setup and a first codemod for the template migrations. These are a new set of migrations that operate on files defined in the Tailwind v3 config as part of the `content` option (so your HTML, JavaScript, TSX files etc.).\r\n\r\nThe migration for this is integrated in the new `@tailwindcss/upgrade` package and will require pointing the migration to an input JavaScript config file, like this:\r\n\r\n```\r\nnpx @tailwindcss/upgrade --config tailwind.config.js\r\n```\r\n\r\nThe idea of template migrations is to apply breaking changes from the v3 to v4 migration within your template files.\r\n\r\n## Migrating !important syntax\r\n\r\nThe first migration that I’m adding with this PR is to ensure we use the v4 important syntax that has the exclamation mark at the end of the utility. \r\n\r\nFor example, this:\r\n\r\n```html\r\n<div class=\"!flex sm:!block\"></div>\r\n```\r\n\r\nWill now turn into:\r\n\r\n```html\r\n<div class=\"flex! sm:block!\"></div>\r\n```\r\n\r\n## Architecture considerations\r\n\r\nImplementation wise, we make use of Oxide to scan the content files fast and efficiently. By relying on the same scanner als Tailwind v4, we guarantee that all candidates that are part of the v4 output will have gone through a migration. \r\n\r\nMigrations itself operate on the abstract `Candidate` type, similar to the type we use in the v4 codebase. It will parse the candidate into its parts so they can easily be introspected/modified. Migrations are typed as:\r\n\r\n```ts\r\ntype TemplateMigration = (candidate: Candidate) => Candidate | null\r\n``` \r\n\r\n`null` should be returned if the `Candidate` does not need a migration. \r\n\r\nWe currently use the v4 `parseCandidate` function to get an abstract definition of the candidate rule that we can operate on. _This will likely need to change in the future as we need to fork `parseCandidate` for v3 specific syntax_. \r\n\r\nAdditionally, we're inlining a `printCandidate` function that can stringify the abstract `Candidate` type. It is not guaranteed that this is an identity function since some information can be lost during the parse step. This is not a problem though, because migrations will only run selectively and if none of the selectors trigger, the candidates are not updated. h/t to @RobinMalfait for providing the printer.\r\n\r\nSo the overall flow of a migration looks like this:\r\n\r\n- Scan the config file for `content` files\r\n- Use Oxide to extract a list of candidate and their positions from these `content` files\r\n- Run a few migrations that operate on the `Candidate` abstract type.\r\n- Print the updated `Candidate` back into the original `content` file.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14502","RelatedDescription":"Closed or merged PR \"Add setup for template migrations\" (#14502)"},{"Id":"2543819364","IsPullRequest":true,"CreatedAt":"2024-09-25T14:06:37","Actor":"thecrypticace","Number":"14501","RawContent":null,"Title":"Add support for prefixes","State":"closed","Body":"This PR adds support for requiring a custom prefix on utility classes.\r\n\r\nPrefixes work a bit differently in v4 than they did in v3:\r\n- They look like a custom variant: `tw:bg-white`\r\n- It is always first in a utility — even before other variants: `tw:hover:bg-white`\r\n- It is required on **all** utility classes — even arbitrary properties: `tw:[color:red]`\r\n- Prefixes also apply to generated CSS variables which will be separated by a dash: `--tw-color-white: #fff;`\r\n- Only alpha (a-z) characters are allowed in a prefix — so no `#tw#` or `__` or similar prefixes are allowed\r\n\r\nTo configure a prefix you can use add `prefix(tw)` to your theme or when importing Tailwind CSS like so:\r\n\r\n```css\r\n/* when importing `tailwindcss` */\r\n@import 'tailwindcss' prefix(tw);\r\n\r\n/* when importing the theme separately */\r\n@import 'tailwindcss/theme' prefix(tw);\r\n\r\n/* or when using an entirely custom theme */\r\n@theme prefix(tw) {\r\n  --color-white: #fff;\r\n  --breakpoint-sm: 640px;\r\n  /* … */\r\n}\r\n```\r\n\r\nThis will configure Tailwind CSS to require a prefix on all utility classes when used in HTML:\r\n\r\n```html\r\n<div class=\"tw:bg-white tw:p-4\">\r\n  This will have a white background and 4 units of padding.\r\n</div>\r\n\r\n<div class=\"bg-white p-4\">\r\n  This will not because the prefix is missing.\r\n</div>\r\n```\r\n\r\nand when used in CSS via `@apply`:\r\n```css\r\n.my-class {\r\n  @apply tw:bg-white tw:p-4;\r\n}\r\n```\r\n\r\nAdditionally, the prefix will be added to the generated CSS variables. You **do not** need to prefix the variables in the `@theme` block yourself — Tailwind CSS handles this automatically.\r\n\r\n```css\r\n:root {\r\n  --tw-color-white: #fff;\r\n  --tw-breakpoint-sm: 640px;\r\n}\r\n```\r\n\r\nA prefix is not necessary when using the `theme(…)` function in your CSS or JS given that plugins will not know what the current prefix is and must work with or without a prefix:\r\n\r\n```css\r\n.my-class {\r\n  color: theme(--color-white);\r\n}\r\n```\r\n\r\nHowever, because the variables themselves are prefixed when outputting the CSS, you **do** need to prefix the variables when using `var(…)` in your CSS:\r\n\r\n```css\r\n.my-class {\r\n  color: var(--tw-color-white);\r\n}\r\n```\r\n\r\nIf you want to customize the prefix itself change `tw` to something else:\r\n\r\n```css\r\n/* my:underline, my:hover:bg-red-500, etc… */\r\n@import 'tailwindcss' prefix(my);\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14501","RelatedDescription":"Closed or merged PR \"Add support for prefixes\" (#14501)"},{"Id":"2547823713","IsPullRequest":true,"CreatedAt":"2024-09-25T12:58:06","Actor":"RobinMalfait","Number":"14517","RawContent":null,"Title":"CSS codemod: do not wrap comment nodes in `@layer`","State":"closed","Body":"When CSS exists between two tailwind directives, then the CSS will be wrapped in an `@layer` to ensure it all ends up in the correct location in the final CSS file.\n\nHowever, if the only thing between two tailwind directives is a comment, then the comment will also be wrapped in an `@layer` directive.\n\nE.g.:\n```css\n@tailwind base;\n/* This is a comment */\n@tailwind components;\n/* This is another comment */\n@tailwind utilities;\n```\n\nResults in:\n```css\n@import \"tailwindcss\";\n@layer base {\n  /* This is a comment */\n}\n@layer components {\n  /* This is another comment */\n}\n```\n\nIn this case, the layers don't matter, so this can be simplified to:\n```css\n@import \"tailwindcss\";\n/* This is a comment */\n/* This is another comment */\n```\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14517","RelatedDescription":"Closed or merged PR \"CSS codemod: do not wrap comment nodes in `@layer`\" (#14517)"},{"Id":"2547438688","IsPullRequest":true,"CreatedAt":"2024-09-25T12:48:22","Actor":"RobinMalfait","Number":"14514","RawContent":null,"Title":"CSS codemod: Migrate `@import \"tailwindcss/tailwind.css\"` to `@import \"tailwindcss\"`","State":"closed","Body":"This PR adds an additional step to ensure we migrate:\n```css\n@import \"tailwindcss/tailwind.css\";\n```\n\nTo:\n```css\n@import \"tailwindcss\";\n```\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14514","RelatedDescription":"Closed or merged PR \"CSS codemod: Migrate `@import \"tailwindcss/tailwind.css\"` to `@import \"tailwindcss\"`\" (#14514)"},{"Id":"2547752282","IsPullRequest":false,"CreatedAt":"2024-09-25T12:11:55","Actor":"tokmo","Number":"14515","RawContent":null,"Title":"Add extend screen disable min-[*px] class","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\nv3.4.13\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\nNext.js v14.2.11, postcss v8.4.47\r\n\r\n**What version of Node.js are you using?**\r\nv20.17\r\n\r\n**What browser are you using?**\r\nChrome\r\n\r\n**What operating system are you using?**\r\nMacOS\r\n\r\n**Describe your issue**\r\nWhen I add extended screens inside the Tailwind config, it disables the min-[*px] class in the HTML.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14515","RelatedDescription":"Closed issue \"Add extend screen disable min-[*px] class\" (#14515)"},{"Id":"2547373655","IsPullRequest":true,"CreatedAt":"2024-09-25T11:48:14","Actor":"RobinMalfait","Number":"14513","RawContent":null,"Title":"CSS codemod: Fix incorrect empty `layer()` at the end of `@import` at-rules","State":"closed","Body":"This PR fixes an issue where some `@import` at-rules had an empty `layer()` attached at the end of the `@import` string. \n\nWe should only add that if a Tailwind directive or Tailwind import such as `@tailwind base` or `@import \"tailwindcss/base\"` preceded the current `@import` at-rule. If there was no Tailwind directive, the `lastLayer` will be empty and we don't need to attach it to the `@import` string.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14513","RelatedDescription":"Closed or merged PR \"CSS codemod: Fix incorrect empty `layer()` at the end of `@import` at-rules\" (#14513)"},{"Id":"2547329527","IsPullRequest":true,"CreatedAt":"2024-09-25T08:42:19","Actor":"RobinMalfait","Number":"14512","RawContent":null,"Title":"Improve missing layer codemod","State":"closed","Body":"This PR improves the missing layers codemod where everything after the last Tailwind directive can stay as-is without wrapping it in a `@layer` directive.\n\nThe `@layer` at-rules are only important for CSS that exists between Tailwind directives.\n\nE.g.:\n```css\n@tailwind base;\n\nhtml {}\n\n@tailwind components;\n\n.btn {}\n\n@tailwind utilities;\n\n.foo {}\n\n.bar {}\n```\n\nWas transformed into:\n```css\n@import \"tailwindcss\";\n\n@layer base {\n  html {}\n}\n\n@layer components {\n  .btn {}\n}\n\n@layer utilities {\n  .foo {}\n  \n  .bar {}\n}\n```\n\nBut the last `@layer utilities` is already in the correct spot, so we can simplify this to just this instead:\n```css\n@import \"tailwindcss\";\n\n@layer base {\n  html {}\n}\n\n@layer components {\n  .btn {}\n}\n\n.foo {}\n\n.bar {}\n```\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14512","RelatedDescription":"Closed or merged PR \"Improve missing layer codemod\" (#14512)"},{"Id":"2545905286","IsPullRequest":true,"CreatedAt":"2024-09-24T17:03:00","Actor":"RobinMalfait","Number":"14507","RawContent":null,"Title":"Release v4.0.0-alpha.25","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14507","RelatedDescription":"Closed or merged PR \"Release v4.0.0-alpha.25\" (#14507)"},{"Id":"2545525759","IsPullRequest":true,"CreatedAt":"2024-09-24T16:32:51","Actor":"RobinMalfait","Number":"14504","RawContent":null,"Title":"Add CSS codemod for missing `@layer`","State":"closed","Body":"This PR adds a codemod that ensures that some parts of your stylesheet are wrapped in an `@layer`.\n\nThis is a follow-up PR of #14411, in that PR we migrate `@tailwind` directives to imports.\n\nAs a quick summary, that will turn this:\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nInto:\n```css\n@import 'tailwindcss';\n```\n\nBut there are a few issues with that _if_ we have additional CSS on the page. For example let's imagine we had this:\n```css\n@tailwind base;\n\nbody {\n  background-color: red;\n}\n\n@tailwind components;\n\n.btn {}\n\n@tailwind utilities;\n```\n\nThis will now be turned into:\n```css\n@import 'tailwindcss';\n\nbody {\n  background-color: red;\n}\n\n.btn {}\n```\n\nBut in v4 we use real layers, in v3 we used to replace the directive with the result of that layer. This means that now the `body` and `.btn` styles are in the incorrect spot.\n\nTo solve this, we have to wrap them in a layer. The `body` should go in an `@layer base`, and the `.btn` should be in an `@layer components` to make sure it's in the same spot as it was before.\n\nThat's what this PR does, the original input will now be turned into:\n\n```css\n@import 'tailwindcss';\n\n@layer base {\n  body {\n    background-color: red;\n  }\n}\n\n@layer components {\n  .btn {\n  }\n}\n```\n\nThere are a few internal refactors going on as well, but those are less important.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14504","RelatedDescription":"Closed or merged PR \"Add CSS codemod for missing `@layer`\" (#14504)"},{"Id":"2543631877","IsPullRequest":true,"CreatedAt":"2024-09-24T15:43:57","Actor":"adamwathan","Number":"14500","RawContent":null,"Title":"Only apply hover on devices that support hover","State":"closed","Body":"This PR updates the `hover` variant to only apply when `@media (hover: hover)` matches.\r\n\r\n```diff\r\n  .hover\\:bg-black {\r\n    &:hover {\r\n+     @media (hover: hover) {\r\n        background: black;\r\n+     }\r\n    }\r\n  }\r\n```\r\n\r\nThis is technically a breaking change because you may have built your site in a way where some interactions depend on hover (like opening a dropdown menu), and were relying on the fact that tapping on mobile triggers hover.\r\n\r\nTo bring back the old hover behavior, users can override the `hover` variant in their CSS file back to the simpler implementation:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n@variant hover (&:hover);\r\n```\r\n\r\nI've opted to go with just `@media (hover: hover)` for this because it seems like the best trade-off between the available options. Using `(any-hover: hover)` would mean users would get sticky hover states when tapping on an iPad if they have a mouse or trackpad connected, which feels wrong to me because in those cases touch is still likely the primary method of interaction.\r\n\r\nSites built with this feature in mind will be treating hover styles as progressive enhancement, so it seems better to me that using an iPad with a mouse would not have hover styles, vs. having sticky hover styles in the same situation.\r\n\r\nOf course users can always override this with whatever they want, so making this the default isn't locking anyone in to a particular choice.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14500","RelatedDescription":"Closed or merged PR \"Only apply hover on devices that support hover\" (#14500)"},{"Id":"2545618143","IsPullRequest":false,"CreatedAt":"2024-09-24T15:25:34","Actor":"samouri","Number":"14505","RawContent":null,"Title":"Tailwind Base CSS Variable Performance","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v3.4.13\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nN/A\r\n\r\n**What version of Node.js are you using?**\r\n\r\nN/A\r\n\r\n**What browser are you using?**\r\n\r\nLatest Chrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/, no modifications needed\r\n\r\n**Describe your issue**\r\n\r\n👋 Hi all.\r\n\r\nFirst off I'd like to thank y'all for tailwind. I really love using it.\r\n\r\nWhile diagnosing performance problems on a closed-source app I develop, I realized that `@base` is adding a host of css variables to the `*` selector. I'm confused why it's targeted this way instead of [:root](https://developer.mozilla.org/en-US/docs/Web/CSS/:root#examples).\r\n\r\nI *think* targeting `*` is an issue for css variables in particular because it appears to redefine the variable at every single node. That's why when inspecting any element on the page and looking at the variable definitions, you'll often see dozens of overriden definitions. Not only is this noisy, but I've measured a significant performance impact to `Recalculate Styles` in Chrome Devtools.\r\n\r\n*Performance impact details*\r\n\r\nIt's likely a different level of impact for every app, but I'm measuring around a ~2.5x hit to Recalculate Styles on Tailwind Play. The closed-source app I develop involves a page with a supidly large number of DOM elements and has a larger impact. It likely scales with the depth of nodes. See the attached screenshots for traces I took on Tailwind Play with the css vars applied to `*` vs. `:root`.\r\n\r\n\r\n| * selector  |  :root selector |\r\n| ------------- | ------------- |\r\n| 5.18ms  | 1.96ms |\r\n\r\nRepro steps: do the below steps for both default and after modifying the css var initialization selector to `:root`.\r\n1. Go to https://play.tailwindcss.com/.\r\n2. Click the \"Preview only\" button.\r\n3. Now start a performance trace and click the \"Vertical Split\" option.\r\n4. Stop the trace and examine \"Recalculate Styles\".\r\n\r\n*Applied to star (current behavior)*\r\n<img width=\"1919\" alt=\"applied-to-star\" src=\"https://github.com/user-attachments/assets/03805a34-b6cf-4772-8930-7b2022016bf1\">\r\n\r\n\r\n*Applied to root*\r\n<img width=\"1920\" alt=\"applied-to-root\" src=\"https://github.com/user-attachments/assets/d52e1255-a373-44b4-aa79-aa9aae2906e9\">\r\n\r\n*Request for advice*\r\n\r\nI'm considering manually injecting the required css variables to `:root` to solve these issues instead of using `@base`.\r\nDo y'all think that's an ok workaround? Are there things I should be wary of?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14505","RelatedDescription":"Closed issue \"Tailwind Base CSS Variable Performance\" (#14505)"},{"Id":"2545257128","IsPullRequest":true,"CreatedAt":"2024-09-24T12:23:57","Actor":"MartijnCuppens","Number":"14503","RawContent":null,"Title":"Use a default line height","State":"open","Body":"This is a slimmer version of #14335, which only includes the default line heights & the `<small>` fix.\r\n\r\nIn this PR:\r\n- Fixed line heights are replaced by a default line height css function.\r\n- This removes the need of adding fixed line heights to each font size.\r\n- It's still possible to use fixed line heights the way it worked before.\r\n- Custom font sizes will now have a better line height by default. For example, `text-[2.4rem]` will have a calculated line height of `2.625rem`, instead of `3.6rem`. \r\n- The default values are calculated in CSS, which means you can use arbitrary values in combination with custom properties (eg `text-[length:var(--title-font-size)]`). \r\n- Relative font sizes like `text-[1.5em]` or `text-[larger]` will now use a recalculated line height.\r\n- Only breaking change is the line height of `lg` (also see #14223).\r\n- The line heights are always rounded to even pixels (2px), so that you never have vertical alignment issues. Even if you use viewport relative units.\r\n\r\nHere's have an overview of which line height will be used for each font size range:\r\n\r\n| Font size range | Line height |\r\n| --- | --- |\r\n| `0rem` - `.5rem` * | `1em`  |\r\n| `.5rem` - `1rem` | `2em - .5rem` |\r\n| `1rem` - `2rem` | `1em + .5rem` |\r\n| `2rem` - `3rem` | `2em / 3 + 1rem` |\r\n|  ≥`3rem` | `1em` |\r\n\r\n<sub>* These font sizes are not used in Tailwind by default</sub>\r\n\r\nCloses #14484, #14223","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14503","RelatedDescription":"Open PR \"Use a default line height\" (#14503)"},{"Id":"2543589048","IsPullRequest":false,"CreatedAt":"2024-09-23T20:24:05","Actor":"andronocean","Number":"14499","RawContent":null,"Title":"oklch color definitions don't work with color/opacity syntax — classes missing or incomplete","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.13\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nTested with Bud.js 6.23.3 (using postcss 8.4.24) and Tailwind Playground.\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.16.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS Sonoma 14.7\r\n\r\n**Reproduction URL**\r\nhttps://play.tailwindcss.com/dDmsole8X3\r\n\r\n**Describe your issue**\r\n\r\nWhen colors are added to a Tailwind config using the standard [`oklch()` function](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/oklch), the resulting color classes do not work with Tailwind's methods of controlling opacity. For a color like `primary: \"oklch(68% 0.15 237.33)\"`, these two issues appear:\r\n1. The simple color classes generated are missing the opacity properties like `var(--tw-bg-opacity)` and `var(--tw-text-opacity)` — it seems that Tailwind just copies the value directly.\r\n2. Tailwind completely fails to generate modified-opacity classes for these colors, like `bg-primary/50`.\r\n\r\nThe same problems occur if I explicitly declare an opacity in the color definition: `primary: \"oklch(68% 0.15 237.33 / 1)\"`.\r\n\r\nClasses _ARE_ generated correctly if I use the `<alpha-value>` placeholder in color definitions: `primary: \"oklch(68% 0.15 237.33 / <alpha-value>)\"`. **However, this magic is not explained anywhere in Tailwind's color documentation:** https://tailwindcss.com/docs/customizing-colors\r\n\r\nThe playground link shows both issues and contrasts the correct behavior of colors defined using `rgb(r g b / a)` notation.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14499","RelatedDescription":"Open issue \"oklch color definitions don't work with color/opacity syntax — classes missing or incomplete\" (#14499)"},{"Id":"2543355210","IsPullRequest":false,"CreatedAt":"2024-09-23T19:45:01","Actor":"Daniel777y","Number":"14497","RawContent":null,"Title":"Background gradient `bg-gradient` display error","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v3.4.1\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss8, Next.js 14.2.5\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.10.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome, Safari\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS, Windows, iOS, Android\r\n\r\n**Reproduction URL**\r\n\r\nWe did see this issue once on some scenarios, but we can't reproduce it consistently. For now, this issue is only on mobile (including iOS and Android).\r\n\r\n**Describe your issue**\r\n\r\nI use `bg-gradient` on buttons and text ([Tailwind Play](https://play.tailwindcss.com/BBH4fYGGGN)):\r\n\r\n```\r\n<div class=\"flex h-screen w-screen items-center justify-center bg-[#101414]\">\r\n  <div class=\"flex h-full w-full flex-col items-center justify-center gap-4\">\r\n    <button class=\"group relative z-0\">\r\n      <div class=\"absolute inset-0 -z-10 rounded-full bg-gradient-to-br from-[#EFFF00] via-[#15FFEE] to-[#15C1FF]\"></div>\r\n      <div class=\"m-[1.5px] rounded-full bg-[#101414] px-4 py-2 transition duration-300 ease-in-out group-hover:bg-gray-800\">\r\n        <span class=\"h-full w-full rounded-full bg-gradient-to-br from-[#EFFF00] via-[#15FFEE] to-[#15C1FF] bg-clip-text font-light text-transparent\"> Button </span>\r\n      </div>\r\n    </button>\r\n\r\n    <p class=\"text-5xl bg-gradient-to-br from-[#EFFF00] via-[#15FFEE] to-[#15C1FF] bg-clip-text text-transparent\">Text</p>\r\n  </div>\r\n</div>\r\n```\r\n\r\nOn our website, it should look like:\r\n\r\n<img width=\"394\" alt=\"image\" src=\"https://github.com/user-attachments/assets/603baa3e-eddf-4061-a4b4-c3d3941bf0c4\">\r\n\r\n<img width=\"322\" alt=\"image\" src=\"https://github.com/user-attachments/assets/5cb64fe8-c1fc-4f95-8257-98a8cc223adb\">\r\n\r\n\r\nBut some of our users told us they saw these:\r\n\r\n<img width=\"461\" alt=\"image\" src=\"https://github.com/user-attachments/assets/64cbd725-3f8e-4802-b56d-bac99f87ac90\">\r\n\r\n<img width=\"541\" alt=\"image\" src=\"https://github.com/user-attachments/assets/b2092644-4f45-4d18-b1b5-f2d86ca0b663\">\r\n\r\n\r\n# Environment\r\n\r\n`package.json`:\r\n\r\n```\r\n  \"dependencies\": {\r\n    \"@next/third-parties\": \"^14.2.5\",\r\n    \"@wcj/html-to-markdown\": \"^2.1.1\",\r\n    \"date-fns-tz\": \"^3.1.3\",\r\n    \"file-saver\": \"^2.0.5\",\r\n    \"framer-motion\": \"^11.3.24\",\r\n    \"html-react-parser\": \"^5.1.12\",\r\n    \"ics\": \"^3.7.6\",\r\n    \"next\": \"^14.2.5\",\r\n    \"react\": \"^18\",\r\n    \"react-dom\": \"^18\",\r\n    \"react-markdown\": \"^9.0.1\",\r\n    \"react-medium-image-zoom\": \"^5.2.8\",\r\n    \"react-share\": \"^5.1.0\",\r\n    \"remark-gfm\": \"^4.0.0\",\r\n    \"sharp\": \"^0.33.4\",\r\n    \"swr\": \"^2.2.5\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"eslint\": \"^8\",\r\n    \"eslint-config-next\": \"14.2.4\",\r\n    \"eslint-config-prettier\": \"^9.1.0\",\r\n    \"eslint-plugin-react\": \"^7.34.3\",\r\n    \"eslint-plugin-react-hooks\": \"^4.6.2\",\r\n    \"eslint-plugin-react-refresh\": \"^0.4.7\",\r\n    \"next-sitemap\": \"^4.2.3\",\r\n    \"postcss\": \"^8\",\r\n    \"prettier\": \"^3.3.2\",\r\n    \"tailwindcss\": \"^3.4.1\"\r\n  }\r\n```\r\n\r\nSince this issue only appears occasionally, do anyone know what's going on here and how to fix it?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14497","RelatedDescription":"Closed issue \"Background gradient `bg-gradient` display error\" (#14497)"},{"Id":"2540478023","IsPullRequest":true,"CreatedAt":"2024-09-23T14:43:28","Actor":"adamwathan","Number":"14490","RawContent":null,"Title":"Preserve explicit transition duration and timing function when overriding transition property","State":"closed","Body":"This PR changes the behavior of the `transition-{property}` utilities to respect any explicit timing function or duration set by the user using the `ease-*` and `duration-*` utilities.\r\n\r\nSay you have this HTML:\r\n\r\n```html\r\n<div class=\"transition-colors duration-500 ease-out lg:transition-all\">\r\n```\r\n\r\nCurrently, the `transition-duration` and `transition-timing-functions` will be reset to their default values at the `lg` breakpoint even though you've provided explicit values for them.\r\n\r\nAfter this PR is merged, those values will be preserved at the `lg` breakpoint.\r\n\r\nThis PR also adds `duration-initial` and `ease-initial` utilities to \"unset\" explicit duration/timing-function values so that the defaults from classes like `transition-all` will kick in, without having to specify their explicit values.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14490","RelatedDescription":"Closed or merged PR \"Preserve explicit transition duration and timing function when overriding transition property\" (#14490)"},{"Id":"2540468902","IsPullRequest":true,"CreatedAt":"2024-09-23T13:07:54","Actor":"adamwathan","Number":"14489","RawContent":null,"Title":"Include gradient color properties in color transitions","State":"closed","Body":"This PR adds our custom gradient color properties (`--tw-gradient-from`, `--tw-gradient-via`, and `--tw-gradient-to`) to the list of color properties we transition in the `transition` and `transition-colors` utilities.\r\n\r\nAs part of this I noticed that we had duplicate `@property` declarations for these custom properties, so I've removed the duplicates.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14489","RelatedDescription":"Closed or merged PR \"Include gradient color properties in color transitions\" (#14489)"},{"Id":"2539465178","IsPullRequest":true,"CreatedAt":"2024-09-23T12:23:48","Actor":"depfu[bot]","Number":"14487","RawContent":null,"Title":"Update @playwright/test 1.46.0 → 1.47.1 (minor)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ @​playwright/test (1.46.0 → 1.47.1) · [Repo](https://github.com/Microsoft/playwright)\n\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/microsoft/playwright/releases/tag/v1.47.1\">1.47.1</a></h4>\n\n<blockquote><h3 dir=\"auto\">Highlights</h3>\n<p dir=\"auto\"><a href=\"https://bounce.depfu.com/github.com/microsoft/playwright/issues/32480\">#32480</a> - [REGRESSION]: tsconfig.json's compilerOptions.paths no longer working in 1.47<br>\n<a href=\"https://bounce.depfu.com/github.com/microsoft/playwright/issues/32552\">#32552</a> - [REGRESSION]: broken UI in Trace Viewer while showing network response body</p>\n<h2 dir=\"auto\">Browser Versions</h2>\n<ul dir=\"auto\">\n<li>Chromium 129.0.6668.29</li>\n<li>Mozilla Firefox 130.0</li>\n<li>WebKit 18.0</li>\n</ul>\n<p dir=\"auto\">This version was also tested against the following stable channels:</p>\n<ul dir=\"auto\">\n<li>Google Chrome 128</li>\n<li>Microsoft Edge 128</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/microsoft/playwright/releases/tag/v1.47.0\">1.47.0</a></h4>\n\n<blockquote><h2 dir=\"auto\">Network Tab improvements</h2>\n<p dir=\"auto\">The Network tab in the UI mode and trace viewer has several nice improvements:</p>\n<ul dir=\"auto\">\n<li>filtering by asset type and URL</li>\n<li>better display of query string parameters</li>\n<li>preview of font assets</li>\n</ul>\n<p dir=\"auto\"><a href=\"https://private-user-images.githubusercontent.com/14912729/364679091-4bd1b67d-90bd-438b-a227-00b9e86872e2.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjYyNTcxOTYsIm5iZiI6MTcyNjI1Njg5NiwicGF0aCI6Ii8xNDkxMjcyOS8zNjQ2NzkwOTEtNGJkMWI2N2QtOTBiZC00MzhiLWEyMjctMDBiOWU4Njg3MmUyLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTEzVDE5NDgxNlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTM0NmZiYzk5NjcyMzhkYTY0ZTcxZGExY2ZkYTczM2RmNzFmNmIwMTlkZjEzMTgyZWU5YWUxZDRmZjNmN2M2NWMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.O0DOTmNkLFGCiGimL2O8YMJOhq-9AneWV_wX1uHvu48\"><img src=\"https://private-user-images.githubusercontent.com/14912729/364679091-4bd1b67d-90bd-438b-a227-00b9e86872e2.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjYyNTcxOTYsIm5iZiI6MTcyNjI1Njg5NiwicGF0aCI6Ii8xNDkxMjcyOS8zNjQ2NzkwOTEtNGJkMWI2N2QtOTBiZC00MzhiLWEyMjctMDBiOWU4Njg3MmUyLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTEzVDE5NDgxNlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTM0NmZiYzk5NjcyMzhkYTY0ZTcxZGExY2ZkYTczM2RmNzFmNmIwMTlkZjEzMTgyZWU5YWUxZDRmZjNmN2M2NWMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.O0DOTmNkLFGCiGimL2O8YMJOhq-9AneWV_wX1uHvu48\" alt=\"Network tab now has filters\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Credit to <a href=\"https://bounce.depfu.com/github.com/kubajanik\">@kubajanik</a> for these wonderful improvements!</p>\n<h2 dir=\"auto\">\n<code class=\"notranslate\">--tsconfig</code> CLI option</h2>\n<p dir=\"auto\">By default, Playwright will look up the closest tsconfig for each imported file using a heuristic. You can now specify a single tsconfig file in the command line, and Playwright will use it for all imported files, not only test files:</p>\n<div class=\"highlight highlight-source-shell\" dir=\"auto\"><pre class=\"notranslate\"><span class=\"pl-c\"><span class=\"pl-c\">#</span> Pass a specific tsconfig</span>\nnpx playwright <span class=\"pl-c1\">test</span> --tsconfig tsconfig.test.json</pre></div>\n<h2 dir=\"auto\">\n<a href=\"https://playwright.dev/docs/api/class-apirequestcontext\">APIRequestContext</a> now accepts <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\"><code class=\"notranslate\">URLSearchParams</code></a> and <code class=\"notranslate\">string</code> as query parameters</h2>\n<p dir=\"auto\">You can now pass <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\"><code class=\"notranslate\">URLSearchParams</code></a> and <code class=\"notranslate\">string</code> as query parameters to <a href=\"https://playwright.dev/docs/api/class-apirequestcontext\">APIRequestContext</a>:</p>\n<div class=\"highlight highlight-source-ts\" dir=\"auto\"><pre class=\"notranslate\"><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'query params'</span><span class=\"pl-kos\">,</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> request <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">searchParams</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">URLSearchParams</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-s1\">searchParams</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'userId'</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">response</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">request</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span>\n      <span class=\"pl-s\">'https://jsonplaceholder.typicode.com/posts'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">params</span>: <span class=\"pl-s1\">searchParams</span> <span class=\"pl-c\">// or as a string: 'userId=1'</span>\n      <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c\">// ...</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<h2 dir=\"auto\">Miscellaneous</h2>\n<ul dir=\"auto\">\n<li>The <code class=\"notranslate\">mcr.microsoft.com/playwright:v1.47.0</code> now serves a Playwright image based on Ubuntu 24.04 Noble.<br>\nTo use the 22.04 jammy-based image, please use <code class=\"notranslate\">mcr.microsoft.com/playwright:v1.47.0-jammy</code> instead.</li>\n<li>The <code class=\"notranslate\">:latest</code>/<code class=\"notranslate\">:focal</code>/<code class=\"notranslate\">:jammy</code> tag for Playwright Docker images is no longer being published. Pin to a specific version for better stability and reproducibility.</li>\n<li>New option <code class=\"notranslate\">behavior</code> in <a href=\"https://playwright.dev/docs/api/class-page#page-remove-all-listeners\">page.removeAllListeners()</a>, <a href=\"https://playwright.dev/docs/api/class-browser#browser-remove-all-listeners\">browser.removeAllListeners()</a> and <a href=\"https://playwright.dev/docs/api/class-browsercontext#browser-context-remove-all-listeners\">browserContext.removeAllListeners()</a> to wait for ongoing listeners to complete.</li>\n<li>TLS client certificates can now be passed from memory by passing <code class=\"notranslate\">cert</code> and <code class=\"notranslate\">key</code> as buffers instead of file paths.</li>\n<li>Attachments with a <code class=\"notranslate\">text/html</code> content type can now be opened in a new tab in the HTML report. This is useful for including third-party reports or other HTML content in the Playwright test report and distributing it to your team.</li>\n<li>\n<code class=\"notranslate\">noWaitAfter</code> in <a href=\"https://playwright.dev/docs/api/class-locator#locator-select-option\">locator.selectOption()</a> was deprecated.</li>\n<li>We've seen reports of WebGL in Webkit misbehaving on GitHub Actions <code class=\"notranslate\">macos-13</code>. We recommend upgrading GitHub Actions to <code class=\"notranslate\">macos-14</code>.</li>\n</ul>\n<h2 dir=\"auto\">Browser Versions</h2>\n<ul dir=\"auto\">\n<li>Chromium 129.0.6668.29</li>\n<li>Mozilla Firefox 130.0</li>\n<li>WebKit 18.0</li>\n</ul>\n<p dir=\"auto\">This version was also tested against the following stable channels:</p>\n<ul dir=\"auto\">\n<li>Google Chrome 128</li>\n<li>Microsoft Edge 128</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/microsoft/playwright/releases/tag/v1.46.1\">1.46.1</a></h4>\n\n<blockquote><h3 dir=\"auto\">Highlights</h3>\n<p dir=\"auto\"><a href=\"https://bounce.depfu.com/github.com/microsoft/playwright/issues/32004\">#32004</a> - [REGRESSION]: Client Certificates don't work with Microsoft IIS<br>\n<a href=\"https://bounce.depfu.com/github.com/microsoft/playwright/issues/32004\">#32004</a> - [REGRESSION]: Websites stall on TLS handshake errors when using Client Certificates<br>\n<a href=\"https://bounce.depfu.com/github.com/microsoft/playwright/issues/32146\">#32146</a> - [BUG]: Credential scanners warn about internal socks-proxy TLS certificates<br>\n<a href=\"https://bounce.depfu.com/github.com/microsoft/playwright/issues/32056\">#32056</a> - [REGRESSION]: 1.46.0 (TypeScript) - custom fixtures extend no longer chainable<br>\n<a href=\"https://bounce.depfu.com/github.com/microsoft/playwright/issues/32070\">#32070</a> - [Bug]: --only-changed flag and project dependencies<br>\n<a href=\"https://bounce.depfu.com/github.com/microsoft/playwright/issues/32188\">#32188</a> - [Bug]: --only-changed with shallow clone throws \"unknown revision\" error</p>\n<h2 dir=\"auto\">Browser Versions</h2>\n<ul dir=\"auto\">\n<li>Chromium 128.0.6613.18</li>\n<li>Mozilla Firefox 128.0</li>\n<li>WebKit 18.0</li>\n</ul>\n<p dir=\"auto\">This version was also tested against the following stable channels:</p>\n<ul dir=\"auto\">\n<li>Google Chrome 127</li>\n<li>Microsoft Edge 127</li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/@playwright%2Ftest/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/Microsoft/playwright/compare/99a36310570617222290c09b96a2026beb8b00f9...3d2ffd0fe97f23f480092054da5928539a3c5beb\">See the full diff on Github</a>. The new version differs by more commits than we can show here.</p>\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14487","RelatedDescription":"Closed or merged PR \"Update @playwright/test 1.46.0 → 1.47.1 (minor)\" (#14487)"},{"Id":"2538197070","IsPullRequest":true,"CreatedAt":"2024-09-23T11:25:08","Actor":"n-batalha","Number":"14476","RawContent":null,"Title":"Split CI to run jobs in parallel","State":"closed","Body":"I shaved some minutes from the CI (_In the scenario of caches being hit_, the most common?) by splitting various test types into their own jobs, to run them in parallel.\r\nSo it's as fast as its slowest job (Windows integration tests), rather than unrelated tests waiting on others.\r\n\r\nI guess the DX improves too, to more quickly visualise failing tests on the job list (instead of needing to open a job to look for the failing step).\r\n\r\nBefore:\r\n\r\n![image](https://github.com/user-attachments/assets/23217397-710e-40e0-a4f7-e4e690836990)\r\n\r\nAfter (sometimes 6min, not sure why the large variance):\r\n\r\n![image](https://github.com/user-attachments/assets/44452dca-42e7-4c57-a363-0365bf0c5525)\r\n\r\n\r\n(Edit: apologies, I created duplicate PRs because it seems I can't force push and reopen https://github.com/tailwindlabs/tailwindcss/pull/14460)","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14476","RelatedDescription":"Closed or merged PR \"Split CI to run jobs in parallel\" (#14476)"},{"Id":"2538789665","IsPullRequest":true,"CreatedAt":"2024-09-23T08:52:05","Actor":"ivanwonder","Number":"14481","RawContent":null,"Title":"Improve the performance when checking broad glob patterns.","State":"closed","Body":"In a large project, it's costly to repeatedly call the\r\nfunction `micromatch.isMatch` that parses a glob pattern,\r\ncreates a regular expression, and tests the path name\r\nagainst the regular expression. To optimize performance,\r\nit's important to cache the parsing and creating process\r\nbefore entering the loop.\r\n\r\nFor example, the content configuration in a project\r\nlooks like this\r\n`['./pages/**/*.{ts,js}', './node_modules/pages/**/*.{ts,js}']`.\r\nIf the project has 10000 matched files and 10 glob patterns,\r\nthe function `micromatch.isMatch` will be called 100000 times.\r\n\r\nFixes https://github.com/tailwindlabs/tailwindcss/issues/14353\r\n<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14481","RelatedDescription":"Closed or merged PR \"Improve the performance when checking broad glob patterns.\" (#14481)"},{"Id":"2541129476","IsPullRequest":false,"CreatedAt":"2024-09-22T16:28:48","Actor":"muellerluke","Number":"14494","RawContent":null,"Title":"--watch Not Rebuilding Upon Save","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.12\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nGolang http/template\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.14.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nWindows 11 Pro (Snapdragon X Elite ARM processor)\r\n\r\n**Reproduction URL**\r\n\r\nhttp://localhost:8080\r\n\r\n**Describe your issue**\r\n\r\nUpon changes to the /templates directory, tailwind does not rebuild. It's pretty simple.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14494","RelatedDescription":"Closed issue \"--watch Not Rebuilding Upon Save\" (#14494)"},{"Id":"2540777241","IsPullRequest":true,"CreatedAt":"2024-09-22T13:54:34","Actor":"shulandmimi","Number":"14492","RawContent":null,"Title":"fix: avoid `require` not exists","State":"closed","Body":"avoiding the absence of `require.cache` in some runtime environments","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14492","RelatedDescription":"Closed or merged PR \"fix: avoid `require` not exists\" (#14492)"},{"Id":"2539250204","IsPullRequest":true,"CreatedAt":"2024-09-20T19:59:18","Actor":"Brooooooklyn","Number":"14485","RawContent":null,"Title":"ci: speedup windows integrations tests","State":"closed","Body":"- Avoid cross-device copying in Windows CI by setting the tests dir to the same drive as the workspace.\r\n- Disable LTO and use a faster linker for the Rust build \r\n\r\n\r\nBuid: ~3min -> ~2min\r\nIntegration Tests: ~8min -> ~3min20s\r\n\r\n![](https://github.com/user-attachments/assets/e4179d73-e0a2-4422-bc1f-220bd1ae383f)\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14485","RelatedDescription":"Closed or merged PR \"ci: speedup windows integrations tests\" (#14485)"},{"Id":"2539239614","IsPullRequest":false,"CreatedAt":"2024-09-20T16:51:01","Actor":"MartijnCuppens","Number":"14484","RawContent":null,"Title":"Line-height issue for `<small>`","State":"open","Body":"Issue is visible here: https://play.tailwindcss.com/BXck05lL3v\r\n\r\nThe fixed line height is inherited via `text-2xl`, and because `<small>` is aligned to the baseline, there will be more whitespace at the bottom.\r\n\r\n---\r\n\r\nExtracted from https://github.com/tailwindlabs/tailwindcss/pull/14335. Depending on whether we continue with that idea, we 'll need another implementation.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14484","RelatedDescription":"Open issue \"Line-height issue for `<small>`\" (#14484)"},{"Id":"2538362218","IsPullRequest":false,"CreatedAt":"2024-09-20T16:40:46","Actor":"lubomirblazekcz","Number":"14479","RawContent":null,"Title":"[v4] Transition properties are not included in utility CSS classes","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.0.0-alpha.21\r\n\r\n**Describe your issue**\r\n\r\nTransition props from `@theme ` like `--default-transition-duration` or `--transition-timing-function-linear` change the value, but the CSS props are not present. Eg. \r\n\r\n## CSS properties missing\r\nCurrent\r\n```css\r\n.transition {\r\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;\r\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n    transition-duration: 150ms;\r\n  }\r\n```\r\n\r\nShloud be\r\n```css\r\n.transition {\r\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;\r\n    transition-timing-function: var(--transition-timing-function-in-out, cubic-bezier(0.4, 0, 0.2, 1));\r\n    transition-duration: var(--default-transition-duration, 150ms);\r\n  }\r\n```\r\n\r\n## transition-property\r\nAlso the same should be applied to `transition-property`, but I didn't find how this can be changed. There should be `--default-transition-property` prop I guess? \r\n\r\nI also don't know if it's currently possible to add new transition properties like here - https://tailwindcss.com/docs/transition-property#customizing-your-theme","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14479","RelatedDescription":"Closed issue \"[v4] Transition properties are not included in utility CSS classes\" (#14479)"},{"Id":"2538835890","IsPullRequest":true,"CreatedAt":"2024-09-20T16:40:45","Actor":"adamwathan","Number":"14482","RawContent":null,"Title":"Include `--default-transition-*` variables in `transition-*` utility output","State":"closed","Body":"Fixes #14479.\r\n\r\nBack in March we made a change to the `transition-*` utilities that inlined the values of the `--default-transition-*` variables to fix a bug where things would break if those variables didn't exist in your CSS. At the time though we weren't outputting CSS variables as part of the values of any utilities, for example `bg-red-500` didn't actually reference the `--color-red-500` variable.\r\n\r\nWe later changed that but missed this situation, so these variables were still inlined even though nothing else was.\r\n\r\nThis PR fixes that and makes things more consistent, so these variables will be used as expected unless using the `@theme inline` option, like with everything else.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14482","RelatedDescription":"Closed or merged PR \"Include `--default-transition-*` variables in `transition-*` utility output\" (#14482)"},{"Id":"2538038802","IsPullRequest":true,"CreatedAt":"2024-09-20T14:45:54","Actor":"shulandmimi","Number":"14475","RawContent":null,"Title":"chore: can't find @tailwindcss/node type file","State":"closed","Body":"<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n\r\n```ts\r\n// error: can't find `@tailwindcss/node` types file\r\nimport { compile } from '@tailwindcss/node';\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14475","RelatedDescription":"Closed or merged PR \"chore: can't find @tailwindcss/node type file\" (#14475)"},{"Id":"2538289947","IsPullRequest":true,"CreatedAt":"2024-09-20T13:02:28","Actor":"lubomirblazekcz","Number":"14477","RawContent":null,"Title":"Add missing theme props","State":"closed","Body":"There are some default props missing in @theme, these are definitely handy for use as CSS variables in custom CSS too\r\n\r\n* Added missing font-weights props\r\n* Added missing z-index props\r\n* Added missing radius full prop","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14477","RelatedDescription":"Closed or merged PR \"Add missing theme props\" (#14477)"},{"Id":"2538317757","IsPullRequest":false,"CreatedAt":"2024-09-20T09:21:56","Actor":"lubomirblazekcz","Number":"14478","RawContent":null,"Title":"[v4] Expose CSS properties also to :host","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.0.0-alpha.21\r\n\r\n**Describe your issue**\r\n\r\nCurrently the `@theme` CSS properties are exposed to `:root`, which is great but it would be also good to expose it to `:host`, like this `:root, :host {}`. This way the CSS properties are also available in web components. \r\n\r\nLets say you have a widget as web component `<custom-widget></custom-widget>` and inside there is CSS and tailwindcss classes in shadowroot, `:root` will not work - in this scenario the `:host` is the `:root` for the web component.\r\n\r\nEg. how it's done in Winduum here - https://github.com/winduum/winduum/blob/next/src/base/theme/default.css","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14478","RelatedDescription":"Open issue \"[v4] Expose CSS properties also to :host\" (#14478)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-09-26T03:30:24.5997205Z","RunDurationInMilliseconds":636}