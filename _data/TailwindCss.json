{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2531920492","IsPullRequest":true,"CreatedAt":"2024-09-17T19:21:31","Actor":"thecrypticace","Number":"14449","RawContent":null,"Title":"Add support for `prefix` in v4","State":"open","Body":"WIP","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14449","RelatedDescription":"Open PR \"Add support for `prefix` in v4\" (#14449)"},{"Id":"2531746363","IsPullRequest":true,"CreatedAt":"2024-09-17T17:50:39","Actor":"thecrypticace","Number":"14448","RawContent":null,"Title":"Add support for `important` in v4","State":"open","Body":"I don't know if we're 100% certain we still need this in v4 (but I think it might be needed)\r\n\r\n\r\n- `important: \"#some-selector\"` wraps `@tailwind utilities` in a rule when we call `compile()`\r\n- `important: true` marks all generated declarations as important during `build(…)`\r\n\r\nThis _does not_ bring back support for the `respectImportant` flag in `addUtilities` / `matchUtilities`.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14448","RelatedDescription":"Open PR \"Add support for `important` in v4\" (#14448)"},{"Id":"2528992951","IsPullRequest":true,"CreatedAt":"2024-09-17T16:46:42","Actor":"thecrypticace","Number":"14437","RawContent":null,"Title":"Skip candidates with invalid `theme()` calls","State":"closed","Body":"Right now when we encounter a candidates with invalid `theme()` calls we throw an error which stops the build entirely. This is not ideal because, especially in the case of `node_modules`, if one file in one package has an error it will stop the build for an entire project and tracking this down can be quite difficult.\r\n\r\nNow, after this PR, any candidates that use `theme(…)` with non-existent theme keys (e.g. `rounded-[theme(--radius-does-not-exist)]`) will be skipped instead of breaking the build.\r\n\r\nBefore:\r\n```html\r\n<div class=\"underline rounded-[theme(--radius-does-not-exist)]\"></div>\r\n```\r\n\r\n```css\r\n/* No CSS was generated because an error was thrown */\r\n/* Error: Invalid theme key: --radius-does-not-exist */\r\n```\r\n\r\nAfter:\r\n```html\r\n<div class=\"underline rounded-[theme(--radius-does-not-exist)]\"></div>\r\n```\r\n\r\n```css\r\n.underline {\r\n  text-decoration-line: underline;\r\n}\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14437","RelatedDescription":"Closed or merged PR \"Skip candidates with invalid `theme()` calls\" (#14437)"},{"Id":"2522068351","IsPullRequest":true,"CreatedAt":"2024-09-17T15:09:42","Actor":"philipp-spiess","Number":"14407","RawContent":null,"Title":"Create variants for `aria`, `supports`, and `data` JS config theme keys","State":"closed","Body":"This PR adds support for the `aria`, `supports`, and `data` properties found in JS config options. In v3, you could extend the theme to add more variants by using an object syntax like this:\r\n\r\n```ts\r\n{\r\n   theme: {\r\n    extend: {\r\n      aria: {\r\n        polite: 'live=\"polite\"',\r\n      },\r\n      supports: {\r\n        'child-combinator': 'h2 > p',\r\n      },\r\n      data: {\r\n        checked: 'ui~=\"checked\"',\r\n      },\r\n    },\r\n  }\r\n}\r\n```\r\n\r\nSince we no longer rely on theme variables for these variants, the way to make this work is by adding custom variants for each of these manually added variants.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14407","RelatedDescription":"Closed or merged PR \"Create variants for `aria`, `supports`, and `data` JS config theme keys\" (#14407)"},{"Id":"2528050008","IsPullRequest":true,"CreatedAt":"2024-09-17T15:00:12","Actor":"philipp-spiess","Number":"14431","RawContent":null,"Title":"Fix stacking variant order when variants inside a group are treated as equal","State":"closed","Body":"This PR fixes an issue with the order of CSS when using stacked variants when two variants have the same order (as defined by the custom comperator function).\r\n\r\n## The problem\r\n\r\nTake, for example, our breakpoint variants. Those are split into `max-*` variants and a group containing all `min-*` variants as well as the unprefixed static ones (e.g. `lg`, `sm`).\r\n\r\nWe currently define a custom sort order for all breakpoints variants that will compare their order based on the resolved value provided. So if you define `--breakpoint-sm: 100px` and `--breakpoint-lg: 200px`, we first check if both breakpoints have the same unit and then we rank based on the numerical value, making `sm` appear before `lg`.\r\n\r\nBut since the `min-*` variant and the `sm` variant share the same group, this also means that `min-sm` and `sm` as well as `min-lg` and `lg` will always have the same order (which makes sense—they also have the exact same CSS they generate!)\r\n\r\nThe issue now arises when you use these together with variant stacking. So, say you want to stack the two variants `max-lg:min-sm`. We always want stacked variants to appear _after_ their non-stacked individual parts (since they are more specific). To do this right now, we generate a bitfield based on the variant order. If you have four variants like this:\r\n\r\n\r\n| Order | Variant |\r\n| ------------- | ------------- |\r\n| 0  | `max-lg`  |\r\n| 1  | `max-sm`  |\r\n| 2  | `min-sm`  |\r\n| 3  | `min-lg`  |\r\n\r\n\r\nWe will assign one bit for each used variant starting from the lowest bit, so for the stack `max-lg:min-sm` we will set the bitfield to `0101` and those for the individual variants would result in `0100` (for `min-sm`) and `0001` (for `max-lg`). We then convert this bitfield to a number and order based on that number. This ensures that the stack always sorts higher.\r\n\r\nThe issue now arises from the fact that the variant order also include the unprefixed variants for a breakpoint. So in our case of `lg` and `sm`, the full list would look like this:\r\n\r\n\r\n| Order | Variant |\r\n| ------------- | ------------- |\r\n| 0  | `max-lg`  |\r\n| 1  | `max-sm`  |\r\n| 2  | `min-sm`  |\r\n| 3  | `sm`  |\r\n| 4  | `min-lg`  |\r\n| 5  | `lg`  |\r\n\r\nThis logic now breaks when you start to compute a stack for something like `max-lg:min-lg` _while also using the `lg` utility:\r\n\r\n| Stack | Bitmap | Integer Value |\r\n| ------------- | ------------- | ------------- |\r\n| `max-lg:min-lg` | `010001` | 17 |\r\n| `lg` | `100000` | 18 |\r\n\r\nAs you can see here, the sole `lg` variant will now sort higher than the compound of `max-lg:min-lg`. That's not something we want!\r\n\r\n## Proposed solution\r\n\r\nTo fix this, we need to encode the information of _same_ variant order somehow. A single array like the example above is not sufficient for this, since it will remove the information of the similar sort order. Instead, we now computed a list of nested arrays for the order lookup that will combine variants of similar values (while keeping the order the same). So from the 6 item array above, we now have the following nested array:\r\n\r\n| Order | Variant |\r\n| ------------- | ------------- |\r\n| 0  | [`max-lg`]  |\r\n| 1  | [`max-sm`]  |\r\n| 2  | [`min-sm`, `sm`]  |\r\n| 3  | [`min-lg`, `lg`]  |\r\n\r\nWhen we use the first layer index for the bitfield, we can now see how this solves the issue:\r\n\r\n| Stack | Bitmap | Integer Value |\r\n| ------------- | ------------- | ------------- |\r\n| `max-lg:min-lg` | `1001` | 9 |\r\n| `lg` | `1000` | 8 |\r\n\r\nThat's pretty-much it! There are a few other changes in this PR that mostly handles with a small regression by this change where now, named `group` variants and unnamed `group` variants would now have the same order (something that was undefined behavior before). ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14431","RelatedDescription":"Closed or merged PR \"Fix stacking variant order when variants inside a group are treated as equal\" (#14431)"},{"Id":"2531258513","IsPullRequest":true,"CreatedAt":"2024-09-17T14:41:07","Actor":"adamwathan","Number":"14445","RawContent":null,"Title":"Don't generate CSS for less specific utilities when a more specific utility matches","State":"closed","Body":"Resolves #14440.\r\n\r\nThis PR fixes an issue where registering a custom `inset-shadow-*` utility value in your theme like this:\r\n\r\n```css\r\n@theme {\r\n  --inset-shadow-potato: inset 0px 2px 6px #7a4724;\r\n}\r\n```\r\n\r\n…mistakenly generates both an `inset-shadow-*` and `inset-*` utility with that value:\r\n\r\n```css\r\n.inset-shadow-potato {\r\n  inset: inset 0px 2px 6px #7a4724;\r\n}\r\n\r\n.inset-shadow-potato {\r\n  box-shadow: inset 0px 2px 6px #7a4724;\r\n}\r\n```\r\n\r\nWe do this by making sure that when parsing a candidate name like `inset-shadow-potato`, we stop trying to find less specific matches as soon as we find any match. So once `inset-shadow` matches as a root with `potato` as a value, we don't try to match `inset` as a root with `shadow-potato` as a value.\r\n\r\nThis reverts _some_ of the things we changed in https://github.com/tailwindlabs/tailwindcss/pull/14231 ~~that we can't for the life of us remember why we changed 🧠~~\r\n\r\nRemembered why we didn't want to do this — if we only accept the most specific match it's possible for someone to completely override a core utility without really doing it on purpose.\r\n\r\nFor example, say for some cursed reason someone wants to change the color of all bold text by doing this:\r\n\r\n```css\r\n@utility font-bold {\r\n  color: red;\r\n}\r\n```\r\n\r\nThat will actually _remove_ the `font-weight: bold` declaration from that utility in this case, because we don't explicitly register `font-bold`. We register `font` and handle `bold` as a value, so the user-defined `font-bold` will match as more specific, and our handler for `font-*` with `bold` as a value will never run.\r\n\r\nNo one should ever do this, but it does expose this other weird thing where we could refactor internals to use a static utility for a previously functional utility (or vice versa) and change the behavior of user-land code which just doesn't feel right.\r\n\r\nReplacing this PR with #14447.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14445","RelatedDescription":"Closed or merged PR \"Don't generate CSS for less specific utilities when a more specific utility matches\" (#14445)"},{"Id":"2531351415","IsPullRequest":true,"CreatedAt":"2024-09-17T14:40:15","Actor":"adamwathan","Number":"14447","RawContent":null,"Title":"Explicitly ignore `--inset-shadow` and `--inset-ring` variables in `inset` handler","State":"open","Body":"Resolves #14440.\r\n\r\nThis PR fixes an issue where registering a custom `inset-shadow-*` utility value in your theme like this:\r\n\r\n```css\r\n@theme {\r\n  --inset-shadow-potato: inset 0px 2px 6px #7a4724;\r\n}\r\n```\r\n\r\n…mistakenly generates both an `inset-shadow-*` and `inset-*` utility with that value:\r\n\r\n```css\r\n.inset-shadow-potato {\r\n  inset: inset 0px 2px 6px #7a4724;\r\n}\r\n\r\n.inset-shadow-potato {\r\n  box-shadow: inset 0px 2px 6px #7a4724;\r\n}\r\n```\r\n\r\nThis replaces #14445 which turns out to not be the ideal solution.\r\n\r\nNow we just explicitly ignore variables like `--inset-shadow-*` and `--inset-ring-*` in the `inset` handler. Kind of a gross patch but I can live with it because the whole existence of the `--inset-*` key is kind of a backwards compatibility thing anyways.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14447","RelatedDescription":"Open PR \"Explicitly ignore `--inset-shadow` and `--inset-ring` variables in `inset` handler\" (#14447)"},{"Id":"2531325697","IsPullRequest":true,"CreatedAt":"2024-09-17T14:29:45","Actor":"philipp-spiess","Number":"14446","RawContent":null,"Title":"Resolve `@import` in core","State":"open","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14446","RelatedDescription":"Open PR \"Resolve `@import` in core\" (#14446)"},{"Id":"2526980491","IsPullRequest":false,"CreatedAt":"2024-09-17T13:10:04","Actor":"alex-jitbit","Number":"14426","RawContent":null,"Title":"`optimizeUniversalDefaults: true` breaks shadows","State":"closed","Body":"**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/JN9kLsgnWE\r\n\r\n**Describe your issue**\r\n\r\nUsing `optimizeUniversalDefaults: true` adds css var overrides that remove shadows (when used in `base` layer)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14426","RelatedDescription":"Closed issue \"`optimizeUniversalDefaults: true` breaks shadows\" (#14426)"},{"Id":"2527123313","IsPullRequest":true,"CreatedAt":"2024-09-17T13:09:09","Actor":"adamwathan","Number":"14427","RawContent":null,"Title":"Insert `@defaults` at start of stylesheet","State":"closed","Body":"Prior to this PR, we'd put all of the `@defaults` (the CSS variables and stuff) _after_ the `base` rules. This creates an issue when using `optimizeUniversalDefaults` with CSS that looks like this:\r\n\r\n```css\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n@layer base {\r\n  input {\r\n    @apply shadow;\r\n  }\r\n}\r\n```\r\n\r\n…because the default shadow stuff ends up after the base `input` rules, so the generated styles are like this:\r\n\r\n```css\r\ninput {\r\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\r\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),\r\n    0 1px 2px -1px var(--tw-shadow-color);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\r\n    var(--tw-shadow);\r\n}\r\n\r\ninput {\r\n  --tw-ring-offset-shadow: 0 0 #0000;\r\n  --tw-ring-shadow: 0 0 #0000;\r\n  --tw-shadow: 0 0 #0000;\r\n  --tw-shadow-colored: 0 0 #0000;\r\n}\r\n```\r\n\r\nThis means all of the actual shadow values for the input are reset and the shadow doesn't work.\r\n\r\nFixes https://github.com/tailwindlabs/tailwindcss/issues/14426.\r\n\r\nLots of failing tests right because this changes a ton of stuff, albeit in a totally inconsequential way. @thecrypticace if you could update these for me this week that would be a huge help, just banging this fix out quick while the kids are napping 😴","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14427","RelatedDescription":"Closed or merged PR \"Insert `@defaults` at start of stylesheet\" (#14427)"},{"Id":"2528890019","IsPullRequest":true,"CreatedAt":"2024-09-17T08:54:36","Actor":"philipp-spiess","Number":"14436","RawContent":null,"Title":"Resolve `borderRadius` when using dot notation inside the `theme()` function","State":"closed","Body":"Fixes an issue where `borderRadius` was not properly upgraded when using it in the `theme()` function like this:\r\n\r\n```\r\nrounded-[theme(borderRadius.lg)]\r\n```\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14436","RelatedDescription":"Closed or merged PR \"Resolve `borderRadius` when using dot notation inside the `theme()` function\" (#14436)"},{"Id":"2529734710","IsPullRequest":false,"CreatedAt":"2024-09-17T00:48:20","Actor":"Kinbaum","Number":"14440","RawContent":null,"Title":"Bug in v4 with `--inset-shadow-*` generating `inset` position rule ","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n`v4.0.0-alpha.24`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n- next: `14.2.11`\r\n- tailwindcss: `4.0.0-alpha.24`\r\n- @tailwindcss/postcss: `4.0.0-alpha.24`\r\n\r\n**What version of Node.js are you using?**\r\n\r\n`v20.11.0`\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/R5yKQBCPfX?file=css\r\n\r\n**Describe your issue**\r\n\r\nWhen using the `--inset-shadow` custom CSS property to generate an inset shadow, v4 is generating the inset position rule by mistake. Here is the generated output from the tailwindplay listed above (notice the highlighted section).\r\n\r\n<img width=\"1602\" alt=\"Screen Shot 2024-09-16 at 8 47 43 PM\" src=\"https://github.com/user-attachments/assets/b26625ba-da08-4a66-8dad-a90bf21358d2\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14440","RelatedDescription":"Open issue \"Bug in v4 with `--inset-shadow-*` generating `inset` position rule \" (#14440)"},{"Id":"2529115110","IsPullRequest":true,"CreatedAt":"2024-09-16T17:59:51","Actor":"thecrypticace","Number":"14438","RawContent":null,"Title":"Implement `screen()` in CSS","State":"open","Body":"WIP\r\n\r\nNeeds #14415 (complex breakpoint stuff)\r\nNeeds #14437\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14438","RelatedDescription":"Open PR \"Implement `screen()` in CSS\" (#14438)"},{"Id":"2526723031","IsPullRequest":true,"CreatedAt":"2024-09-16T14:31:19","Actor":"YuHyeonWook","Number":"14424","RawContent":null,"Title":"Remove unnecessary inheritance properties in .description class","State":"closed","Body":"### Summary\r\n\r\nThis PR removes the `inherit` values for `display`, `justify-content`, and `align-items` in the `.description` class. These properties were redundant since the `.description` class already has default values set fro these propert","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14424","RelatedDescription":"Closed or merged PR \"Remove unnecessary inheritance properties in .description class\" (#14424)"},{"Id":"2527746658","IsPullRequest":false,"CreatedAt":"2024-09-16T14:01:50","Actor":"SebastianMarzecCodewise","Number":"14429","RawContent":null,"Title":"max-breakpoint:class not working when raw screen setup present in tailwind config","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/rHaI81WQuv\r\n\r\n**Describe your issue**\r\n\r\nIn example above class `max-lg:hidden` is not working, but of course none of max:breakpoint classes works when I have custom media-query with `raw` setup in tailwind config.\r\nIf you'll remove this line (in tailwind play/config): \r\n`'shortdesktop': { 'raw': '(max-height: 950px) and (min-width: 768px)' },`\r\nit works again ","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14429","RelatedDescription":"Closed issue \"max-breakpoint:class not working when raw screen setup present in tailwind config\" (#14429)"},{"Id":"2524821720","IsPullRequest":true,"CreatedAt":"2024-09-16T12:08:11","Actor":"RobinMalfait","Number":"14416","RawContent":null,"Title":"Add ability to parse SCSS syntax","State":"closed","Body":"This PR adds support for parsing SCSS syntax. This will help with codemods.\r\n\r\nNote: this does not \"run\" or \"execute\" SCSS code, it only parses it. If you are using SCSS and any of its features that aren't native to CSS (e.g.: $variables, mixins, functions, …), you will need to use a SCSS compiler to transform the SCSS.\r\n\r\nNote: while this parse CSS comments and SCSS single-line comments, they are not in the AST yet. This will be a a separate PR for when we need it.\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14416","RelatedDescription":"Closed or merged PR \"Add ability to parse SCSS syntax\" (#14416)"},{"Id":"2523410029","IsPullRequest":true,"CreatedAt":"2024-09-16T11:09:58","Actor":"RobinMalfait","Number":"14412","RawContent":null,"Title":"Add CSS codemods for migrating `@apply`","State":"closed","Body":"This PR adds CSS codemods for migrating existing `@apply` directives to the new version. Note, the actual tooling to execute and apply the codemod will be available in another PR. This is just the codemod on its own.\n\nThis PR has the ability to migrate the following cases:\n\n---\n\nIn v4, the convention is to put the important modifier `!` at the end of the utility class instead of right before it. This makes it easier to reason about, especially when you are variants.\n\nInput:\n```css\n.foo {\n  @apply !flex flex-col! hover:!items-start items-center;\n}\n```\n\nOutput:\n```css\n.foo {\n  @apply flex! flex-col! hover:items-start! items-center;\n}\n```\n\n\n---\n\nIn v4 we don't support `!important` as a marker at the end of `@apply` directives. Instead, you can append the `!` to each utility class to make it `!important`.\n\nInput:\n```css\n.foo {\n  @apply flex flex-col !important;\n}\n```\n\nOutput:\n```css\n.foo {\n  @apply flex! flex-col!;\n}\n```\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14412","RelatedDescription":"Closed or merged PR \"Add CSS codemods for migrating `@apply`\" (#14412)"},{"Id":"2528144141","IsPullRequest":true,"CreatedAt":"2024-09-16T11:06:31","Actor":"RobinMalfait","Number":"14433","RawContent":null,"Title":"Add initial codemod tooling","State":"closed","Body":"This PR adds some initial tooling for codemods. We are currently only interested in migrating CSS files, so we will be using PostCSS under the hood to do this. This PR also implements the \"migrate `@apply`\" codemod from #14412.\n\nThe usage will look like this:\n\n```sh\nnpx @tailwindcss/codemods\n```\n\nYou can pass in CSS files to transform as arguments:\n\n```sh\nnpx @tailwindcss/codemods src/**/*.css\n```\n\nBut, if none are provided, it will search for CSS files in the current directory and its subdirectories.\n\n```\n≈ tailwindcss v4.0.0-alpha.24\n\n│ No files provided. Searching for CSS files in the current\n│ directory and its subdirectories…\n\n│ Migration complete. Verify the changes and commit them to\n│ your repository.\n```\n\nThe tooling also requires the Git repository to be in a clean state. This is a common convention to ensure that everything is undo-able. If we detect that the git repository is dirty, we will abort the migration.\n\n```\n≈ tailwindcss v4.0.0-alpha.24\n\n│ Git directory is not clean. Please stash or commit your\n│ changes before migrating.\n\n│ You may use the `--force` flag to override this safety\n│ check.\n```\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14433","RelatedDescription":"Closed or merged PR \"Add initial codemod tooling\" (#14433)"},{"Id":"2528153612","IsPullRequest":true,"CreatedAt":"2024-09-16T11:06:28","Actor":"RobinMalfait","Number":"14434","RawContent":null,"Title":"Add initial codemod tooling","State":"open","Body":"This PR adds some initial tooling for codemods. We are currently only interested in migrating CSS files, so we will be using PostCSS under the hood to do this. This PR also implements the \"migrate `@apply`\" codemod from #14412.\r\n\r\nThe usage will look like this:\r\n\r\n```sh\r\nnpx @tailwindcss/upgrade\r\n```\r\n\r\nYou can pass in CSS files to transform as arguments:\r\n\r\n```sh\r\nnpx @tailwindcss/upgrade src/**/*.css\r\n```\r\n\r\nBut, if none are provided, it will search for CSS files in the current directory and its subdirectories.\r\n\r\n```\r\n≈ tailwindcss v4.0.0-alpha.24\r\n\r\n│ No files provided. Searching for CSS files in the current\r\n│ directory and its subdirectories…\r\n\r\n│ Migration complete. Verify the changes and commit them to\r\n│ your repository.\r\n```\r\n\r\nThe tooling also requires the Git repository to be in a clean state. This is a common convention to ensure that everything is undo-able. If we detect that the git repository is dirty, we will abort the migration.\r\n\r\n```\r\n≈ tailwindcss v4.0.0-alpha.24\r\n\r\n│ Git directory is not clean. Please stash or commit your\r\n│ changes before migrating.\r\n\r\n│ You may use the `--force` flag to override this safety\r\n│ check.\r\n```\r\n\r\n\r\n---\r\n\r\nThis PR alsoo adds CSS codemods for migrating existing `@apply` directives to the new version.\r\n\r\nThis PR has the ability to migrate the following cases:\r\n\r\n---\r\n\r\nIn v4, the convention is to put the important modifier `!` at the end of the utility class instead of right before it. This makes it easier to reason about, especially when you are variants.\r\n\r\nInput:\r\n```css\r\n.foo {\r\n  @apply !flex flex-col! hover:!items-start items-center;\r\n}\r\n```\r\n\r\nOutput:\r\n```css\r\n.foo {\r\n  @apply flex! flex-col! hover:items-start! items-center;\r\n}\r\n```\r\n\r\n\r\n---\r\n\r\nIn v4 we don't support `!important` as a marker at the end of `@apply` directives. Instead, you can append the `!` to each utility class to make it `!important`.\r\n\r\nInput:\r\n```css\r\n.foo {\r\n  @apply flex flex-col !important;\r\n}\r\n```\r\n\r\nOutput:\r\n```css\r\n.foo {\r\n  @apply flex! flex-col!;\r\n}\r\n```\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14434","RelatedDescription":"Open PR \"Add initial codemod tooling\" (#14434)"},{"Id":"2528141894","IsPullRequest":true,"CreatedAt":"2024-09-16T11:01:17","Actor":"RobinMalfait","Number":"14432","RawContent":null,"Title":"Add initial codemod tooling","State":"closed","Body":"This PR adds some initial tooling for codemods. We are currently only interested\nin migrating CSS files, so we will be using PostCSS under the hood to do this.\nThis PR also implements the \"migrate `@apply`\" codemod from #14412.\n\nThe usage will look like this:\n\n```sh\nnpx @tailwindcss/codemods\n```\n\nYou can pass in CSS files to transform as arguments:\n\n```sh\nnpx @tailwindcss/codemods src/**/*.css\n```\n\nBut, if none are provided, it will search for CSS files in the current directory and its subdirectories.\n\n```\n≈ tailwindcss v4.0.0-alpha.24\n\n│ No files provided. Searching for CSS files in the current\n│ directory and its subdirectories…\n\n│ Migration complete. Verify the changes and commit them to\n│ your repository.\n```\n\nThe tooling also requires the Git repository to be in a clean state. This is a common convention to ensure that everything is undo-able. If we detect that the git repository is dirty, we will abort the migration.\n\n```\n≈ tailwindcss v4.0.0-alpha.24\n\n│ Git directory is not clean. Please stash or commit your\n│ changes before migrating.\n\n│ You may use the `--force` flag to override this safety\n│ check.\n```\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14432","RelatedDescription":"Closed or merged PR \"Add initial codemod tooling\" (#14432)"},{"Id":"2526805072","IsPullRequest":false,"CreatedAt":"2024-09-15T12:06:58","Actor":"Benjamin-Gelb","Number":"14425","RawContent":null,"Title":"Unexpected behavior coming from custom animations","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv^3.4.1\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss-cli v^8, Next.js v14.2.11\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv21.7.2\r\n\r\n**What browser are you using?**\r\n\r\nMozilla Developer Edition\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/Benjamin-Gelb/tailwindcss-issue-reproduction\r\n\r\n**Describe your issue**\r\n\r\n\r\nI encountered this issue in my NextJS application. I think the issue is related to how the tailwind compiler bundles CSS.\r\nI specified a custom keyframe in the tailwind.config.ts file for use in some one-off animations.\r\nThis feature documented here:\r\nhttps://tailwindcss.com/docs/animation#arbitrary-values\r\nI wanted the animations to be timed dynamically so I used string interpolation to attempt this:\r\n\r\n❌ Doesn't Work\r\n```typescript\r\nconst duration = 4;\r\nreturn (\r\n  <div className={`animate-[wiggle_${duration}s_ease-in-out_infinite]`}>\r\n  ...\r\n  </div>\r\n)\r\n// (assuming wiggle is a valid Keyframe in the tailwindcss.config.ts file)\r\n```\r\n\r\nThis wouldn't work and I felt like I was going crazy.\r\nAfter some experimentation, I made a really unfortunate realization.\r\nFrom what I can intuit is that one-off animations compiled into individual classes during the tailwind compilation-step.\r\n\"animate-[wiggle_4s_ease-in-out_infinite]\"\r\nIs compiled as one fixed animation. It's not translating the specifications of the animation at runtime like I expect Tailwind's base classes to behave.\r\n\r\nMy band-aid solution is to just include comments with the dynamic variations of the animation I want.\r\nThe animations are pre-compiled and included in the CSS bundle to be dynamically iterated through.\r\n\r\n✅ Works\r\n```typescript\r\n  // animate-[giggle_1s_ease-in-out_infinite]\r\n  // animate-[giggle_2s_ease-in-out_infinite]\r\n  // animate-[giggle_3s_ease-in-out_infinite]\r\n  // animate-[giggle_4s_ease-in-out_infinite]\r\nconst duration = 3; // duration 1-4 is supported\r\nreturn (\r\n  <div className={`animate-[wiggle_${duration}s_ease-in-out_infinite]`}>\r\n  ...\r\n  </div>\r\n```\r\n\r\nI think this behavior needs to be documented. Since this behavior a deviation from the expectations of TailwindCSS' design system but inevitable since CSS animations do need to be pre-compiled. I doubt most people actually get this far and would normally give up or reach for inline styles. Maybe I should have honestly.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14425","RelatedDescription":"Closed issue \"Unexpected behavior coming from custom animations\" (#14425)"},{"Id":"2526511947","IsPullRequest":false,"CreatedAt":"2024-09-14T16:51:46","Actor":"mkeyy0","Number":"14423","RawContent":null,"Title":"import.meta.resolve doesn't work in the tailwind.config file","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite 5.3.4, vue 3.4.31\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.12.0\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n[Reproduction URL](https://github.com/mkeyy0/tailwind-import-meta-issue)\r\n\r\n**Describe your issue**\r\n\r\nTailwind doesn't support ESM natively and uses some tools to achieve that. And for some properties of `import.meta` like `url` works nice, but in my case, I need to use `import.meta.resolve` to resolve the path to my monorepo UI library in `node_modules`.\r\nI know that I can use `require.resolve` as a workaround, but I'm not sure that is a good way to mix esm and cjs globals. So for me, it would be nice to add support of `import.meta.resolve` to the `tailwind.config` file\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14423","RelatedDescription":"Open issue \"import.meta.resolve doesn't work in the tailwind.config file\" (#14423)"},{"Id":"2526001542","IsPullRequest":false,"CreatedAt":"2024-09-14T13:49:53","Actor":"turkgenciyim","Number":"14421","RawContent":null,"Title":"I cannot style the html data from the API","State":"closed","Body":"### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/14419\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **turkgenciyim** September 14, 2024</sup>\r\nI'm using NextJS 14 and I'm pulling html from an API, I'm printing it with the parser and there are tailwind classes in it. navigation and footer are static, that is, the files I added myself, while tailwindcss is running in these files, when I print the html from the API, styling is not applied. actually it is applied, but I can say that some of them are applied, for example, all media queries do not work. md:flex, xl:grid and no responsive classes like that work. What can i do? i tried to use safelist but it didn't work! \r\n\r\n\r\nexample issue: https://stackoverflow.com/questions/73186053/next-js-the-style-of-the-tailwind-class-i-get-from-api-doesnt-apply-on-my-elem</div>","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14421","RelatedDescription":"Closed issue \"I cannot style the html data from the API\" (#14421)"},{"Id":"2525885859","IsPullRequest":false,"CreatedAt":"2024-09-14T00:14:25","Actor":"brandongit2","Number":"14420","RawContent":null,"Title":"[v4] Vite+tsx fails with `The URL must be of scheme file`","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n- `tailwindcss@4.0.0-alpha.24`\r\n- `@tailwindcss/vite@4.0.0-alpha.24`\r\n\r\n(But the error presents starting at `4.0.0-alpha.21`)\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n- `vite@5.4.2`\r\n- `tsx@4.17.0`\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv18.19.1\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS Sonoma 14.6.1\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/brandongit2/tailwind-bug\r\n\r\nRun `pnpm run dev` in the repo and it errors immediately.\r\n\r\nCommenting out the Tailwind plugin from the Vite config makes the error go away.\r\n\r\n**Describe your issue**\r\n\r\nThe error occurs starting at `4.0.0-alpha.21`. `4.0.0-alpha.20` works fine.\r\n\r\n```\r\n> tailwind-bug@ dev /Users/brandontsang/projects/tailwind-bug\r\n> tsx server/index.ts\r\n\r\n✘ [ERROR] Could not resolve \"/Users/brandontsang/projects/vite.config.ts\"\r\n\r\nfailed to load config from /Users/brandontsang/projects/vite.config.ts\r\n/Users/brandontsang/projects/tailwind-bug/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:1472\r\n  let error = new Error(text);\r\n              ^\r\n\r\nError: Build failed with 1 error:\r\nerror: Could not resolve \"/Users/brandontsang/projects/vite.config.ts\"\r\n    at failureErrorWithLog (/Users/brandontsang/projects/tailwind-bug/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:1472:15)\r\n    at /Users/brandontsang/projects/tailwind-bug/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:945:25\r\n    at runOnEndCallbacks (/Users/brandontsang/projects/tailwind-bug/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:1315:45)\r\n    at buildResponseToResult (/Users/brandontsang/projects/tailwind-bug/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:943:7)\r\n    at /Users/brandontsang/projects/tailwind-bug/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:970:16\r\n    at responseCallbacks.<computed> (/Users/brandontsang/projects/tailwind-bug/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:622:9)\r\n    at handleIncomingPacket (/Users/brandontsang/projects/tailwind-bug/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:677:12)\r\n    at Socket.readFromStdout (/Users/brandontsang/projects/tailwind-bug/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:600:7)\r\n    at Socket.emit (node:events:517:28)\r\n    at addChunk (node:internal/streams/readable:368:12) {\r\n  errors: [Getter/Setter],\r\n  warnings: [Getter/Setter]\r\n}\r\n\r\nNode.js v18.19.1\r\n ELIFECYCLE  Command failed with exit code 1.\r\n```\r\n\r\nRunning a Vite server through the tsx CLI. After some debugging sessions, I believe tsx is attempting to import `'file:///Users/[...]/node_modules/.pnpm/@tailwindcss+node@4.0.0-alpha.24/node_modules/@tailwindcss/node/dist/esm-cache.loader.mts'` (note the `.mts` instead of the correct `.mjs` extension) and failing. It looks like tsx attempts to resolve import paths by trying to `require` imports with various different extensions. Or something like that. I suppose that's why it's attempting to import the `.mts` extension.\r\n\r\nA screenshot from the debugging session I had which could be useful:\r\n\r\n<img width=\"1728\" alt=\"image\" src=\"https://github.com/user-attachments/assets/0d3ce04e-7599-49d0-8db4-8a74f057fd75\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14420","RelatedDescription":"Open issue \"[v4] Vite+tsx fails with `The URL must be of scheme file`\" (#14420)"},{"Id":"2523798375","IsPullRequest":false,"CreatedAt":"2024-09-13T12:34:36","Actor":"gabrielramos731","Number":"14414","RawContent":null,"Title":"Infinite draggable window size at playground","State":"closed","Body":"### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/14413\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **gabrielramos731** September 13, 2024</sup>\r\nAt the playground on Tailwind oficial page, the window size has a infinite draggable size (apparently has no upper limits).\r\n![image](https://github.com/user-attachments/assets/6aa0f990-847c-43af-b148-63db94f7ad3e)\r\n</div>","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14414","RelatedDescription":"Closed issue \"Infinite draggable window size at playground\" (#14414)"},{"Id":"2524556568","IsPullRequest":true,"CreatedAt":"2024-09-13T11:03:30","Actor":"philipp-spiess","Number":"14415","RawContent":null,"Title":"Add support for setting `screens` in JS config","State":"open","Body":"This PR adds support for the _simple_ case of the `screens` option inside JS config paths. This allows JS configs to extend the responsive theme by adding custom breakpoints. Here's an example from our v3 docs:\r\n\r\n```js\r\n{\r\n  theme: {\r\n    screens: {\r\n      'sm': '640px',\r\n      // => @media (min-width: 640px) { ... }\r\n\r\n      'md': '768px',\r\n      // => @media (min-width: 768px) { ... }\r\n\r\n      'lg': '1024px',\r\n      // => @media (min-width: 1024px) { ... }\r\n\r\n      'xl': '1280px',\r\n      // => @media (min-width: 1280px) { ... }\r\n\r\n      '2xl': '1536px',\r\n      // => @media (min-width: 1536px) { ... }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nFor simple breakpoints, this will extend the core breakpoints and will work with the `min-*` and `max-*` utilities. However, we also support complex ways of setting up custom screens like this:\r\n\r\n```js\r\n{\r\n  theme: {\r\n    extend: {\r\n      screens: {\r\n        sm: { max: '639px' },\r\n        md: [\r\n          { min: '668px', max: '767px' },\r\n          { min: '868px' },\r\n        ],\r\n        lg: { min: '868px' },\r\n        xl: { min: '1024px', max: '1279px' },\r\n        tall: { raw: '(min-height: 800px)' },\r\n      },\r\n    },\r\n  },\r\n}\r\n```\r\n\r\nFor these complex setups, we _only_ generate the shorthand variant (e.g. `tall`) but those won't integrate within `min-*` and `max-*`. In v3, adding any of these complex configurations would omit any `min-*` and `max-*` variants.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14415","RelatedDescription":"Open PR \"Add support for setting `screens` in JS config\" (#14415)"},{"Id":"2522218664","IsPullRequest":true,"CreatedAt":"2024-09-13T09:26:08","Actor":"philipp-spiess","Number":"14408","RawContent":null,"Title":"Further clean up compatibility APIs","State":"closed","Body":"This PR builds on top of #14365 and adds a few more changes we discussed during a sync on the latter PR:\r\n\r\n- We now split `plugin-api.ts` into two files and moved it into `compat/`. One file is now defining the comat plugin API only where as another file deals with the compat hook.\r\n- The walk for `@plugin` and `@config` is now happening inside the compat hook.\r\n\r\nThe one remaining work item is to change the `loadPlugin` and `loadConfig` APIs to a more unified `resolveModule` one that does not care on what we try to load it for. I suggest we should make this change at the same time we start working on finalizing the `tailwindcss` APIs, since a lot of things will have to be rethought then anyways.\r\n  ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14408","RelatedDescription":"Closed or merged PR \"Further clean up compatibility APIs\" (#14408)"},{"Id":"2522761158","IsPullRequest":true,"CreatedAt":"2024-09-12T21:44:59","Actor":"RobinMalfait","Number":"14410","RawContent":null,"Title":"Add CSS codemods","State":"closed","Body":"This PR is an umbrella PR for adding CSS codemods.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14410","RelatedDescription":"Closed or merged PR \"Add CSS codemods\" (#14410)"},{"Id":"2523396507","IsPullRequest":true,"CreatedAt":"2024-09-12T21:31:52","Actor":"RobinMalfait","Number":"14411","RawContent":null,"Title":"Add CSS codemods for migrating `@tailwind` directives","State":"open","Body":"This PR adds CSS codemods for migrating existing `@tailwind` directives to the new alternatives.\r\n\r\nThis PR has the ability to migrate the following cases:\r\n\r\n---\r\n\r\nTypical default usage of `@tailwind` directives in v3.\r\n\r\nInput:\r\n```css\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n```\r\n\r\nOutput:\r\n```css\r\n@import 'tailwindcss';\r\n```\r\n\r\n---\r\n\r\nSimilar as above, but always using `@import` instead of `@import` directly.\r\n\r\nInput:\r\n```css\r\n@import 'tailwindcss/base';\r\n@import 'tailwindcss/components';\r\n@import 'tailwindcss/utilities';\r\n```\r\n\r\nOutput:\r\n```css\r\n@import 'tailwindcss';\r\n```\r\n\r\n---\r\n\r\nWhen you are _only_ using `@tailwind base`:\r\n\r\nInput:\r\n```css\r\n@tailwind base;\r\n```\r\n\r\nOutput:\r\n```css\r\n@import 'tailwindcss/theme' layer(theme);\r\n@import 'tailwindcss/preflight' layer(base);\r\n```\r\n\r\n---\r\n\r\nWhen you are _only_ using `@tailwind utilities`:\r\n\r\nInput:\r\n```css\r\n@tailwind utilities;\r\n```\r\n\r\nOutput:\r\n```css\r\n@import 'tailwindcss/utilities' layer(utilities);\r\n```\r\n\r\n---\r\n\r\nWhen you are _only_ using `@tailwind base; @tailwind utilities;`:\r\n\r\nInput:\r\n```css\r\n@tailwind base;\r\n@tailwind utilities;\r\n```\r\n\r\nOutput:\r\n```css\r\n@import 'tailwindcss';\r\n```\r\n\r\nWe currently don't have a concept of `@tailwind components` in v4, so if you are not using `@tailwind components`, we can expand to the default `@import 'tailwindcss';` instead of the individual imports.\r\n\r\n---\r\n\r\n`@tailwind screens` and `@tailwind variants` are not supported/necessary in v4, so we can safely remove them.\r\n\r\nInput:\r\n```css\r\n@tailwind screens;\r\n@tailwind variants;\r\n```\r\n\r\nOutput:\r\n```css\r\n```\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14411","RelatedDescription":"Open PR \"Add CSS codemods for migrating `@tailwind` directives\" (#14411)"},{"Id":"2521918371","IsPullRequest":true,"CreatedAt":"2024-09-12T12:07:43","Actor":"philipp-spiess","Number":"14406","RawContent":null,"Title":"Pin rust toolchain to work around Windows regression","State":"closed","Body":"This PR works around a current regression in the Rust toolchain that caused our Windows workers to start failing with:\r\n\r\n```\r\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 32.63s\r\n     Running unittests src\\lib.rs (target\\debug\\deps\\tailwind_oxide-ce6a5d43a3798437.exe)\r\nLoad Node-API [napi_get_last_error_info] from host runtime failed: GetProcAddress failed\r\nfatal runtime error: thread::set_current should only be called once per thread\r\nLoad Node-API [napi_get_uv_event_loop] from host runtime failed: GetProcAddress failed\r\nLoad Node-API [napi_fatal_exception] from host runtime failed: GetProcAddress failed\r\nLoad Node-API [napi_create_threadsafe_function] from host runtime failed: GetProcAddress failed\r\nerror: test failed, to rerun pass `-p tailwind-oxide --lib`\r\n```\r\n\r\nThe workaround is to pin the rust toolchain version so that the regression isn't applied when we build on Windows in test mode.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14406","RelatedDescription":"Closed or merged PR \"Pin rust toolchain to work around Windows regression\" (#14406)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-09-18T03:30:22.7714107Z","RunDurationInMilliseconds":407}