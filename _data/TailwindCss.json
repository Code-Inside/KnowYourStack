{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2501487726","IsPullRequest":true,"CreatedAt":"2024-09-02T19:43:28","Actor":"adamwathan","Number":"14313","RawContent":null,"Title":"Prepare `v4.0.0-alpha.21`","State":"closed","Body":"<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14313","RelatedDescription":"Closed or merged PR \"Prepare `v4.0.0-alpha.21`\" (#14313)"},{"Id":"2487651875","IsPullRequest":true,"CreatedAt":"2024-09-02T16:49:09","Actor":"thecrypticace","Number":"14264","RawContent":null,"Title":"Support plugin options in CSS","State":"closed","Body":"Builds on #14239 — that PR needs to be merged first.\r\n\r\nThis PR allows plugins defined with `plugin.withOptions` to receive options in CSS when using `@plugin` as long as the options are simple key/value pairs.\r\n\r\nFor example, the following is now valid and will include the forms plugin with only the base styles enabled:\r\n\r\n```css\r\n@plugin \"@tailwindcss/forms\" {\r\n  strategy: base;\r\n}\r\n```\r\n\r\nWe handle `null`, `true`, `false`, and numeric values as expected and will convert them to their JavaScript equivalents. Comma separated values are turned into arrays. All other values are converted to strings.\r\n\r\nFor example, in the following plugin definition, the options that are passed to the plugin will be the correct types:\r\n- `debug` will be the boolean value `true`\r\n- `threshold` will be the number `0.5`\r\n- `message` will be the string `\"Hello world\"`\r\n- `features` will be the array `[\"base\", \"responsive\"]`\r\n\r\n```css\r\n@plugin \"my-plugin\" {\r\n  debug: false;\r\n  threshold: 0.5;\r\n  message: Hello world;\r\n  features: base, responsive;\r\n}\r\n```\r\n\r\nIf you need to pass a number or boolean value as a string, you can do so by wrapping the value in quotes:\r\n\r\n```css\r\n@plugin \"my-plugin\" {\r\n  debug: \"false\";\r\n  threshold: \"0.5\";\r\n  message: \"Hello world\";\r\n}\r\n```\r\n\r\nWhen duplicate options are encountered the last value wins:\r\n\r\n```css\r\n@plugin \"my-plugin\" {\r\n  message: Hello world;\r\n  message: Hello plugin; /* this will be the value of `message` */\r\n}\r\n```\r\n\r\nIt's important to note that this feature is **only available for plugins defined with `plugin.withOptions`**. If you try to pass options to a plugin that doesn't support them, you'll get an error message when building:\r\n\r\n```css\r\n@plugin \"my-plugin\" {\r\n  debug: false;\r\n  threshold: 0.5;\r\n}\r\n\r\n/* Error: The plugin \"my-plugin\" does not accept options */\r\n```\r\n\r\nAdditionally, if you try to pass in more complex values like objects or selectors you'll get an error message:\r\n\r\n```css\r\n@plugin \"my-plugin\" {\r\n  color: { red: 100; green: 200; blue: 300 };\r\n}\r\n\r\n/* Error: Objects are not supported in `@plugin` options. */\r\n```\r\n\r\n```css\r\n@plugin \"my-plugin\" {\r\n  .some-selector > * {\r\n    primary: \"blue\";\r\n    secondary: \"green\";\r\n  }\r\n}\r\n\r\n/* Error: `@plugin` can only contain declarations. */\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14264","RelatedDescription":"Closed or merged PR \"Support plugin options in CSS\" (#14264)"},{"Id":"2481635785","IsPullRequest":true,"CreatedAt":"2024-09-02T16:03:16","Actor":"thecrypticace","Number":"14239","RawContent":null,"Title":"Support loading config files via `@config`","State":"closed","Body":"In Tailwind v4 the CSS file is the main entry point to your project and is generally configured via `@theme`. However, given that all v3 projects were configured via a `tailwind.config.js` file we definitely need to support those. This PR adds support for loading existing Tailwind config files by adding an `@config` directive to the CSS — similar to how v3 supported multiple config files except that this is now _required_ to use a config file.\r\n\r\nYou can load a config file like so:\r\n\r\n```\r\n@import \"tailwindcss\";\r\n@config \"./path/to/tailwind.config.js\";\r\n```\r\n\r\nA few notes:\r\n- Both CommonJS and ESM config files are supported (loaded directly via `import()` in Node)\r\n- This is not yet supported in Intellisense or Prettier — should hopefully land next week\r\n- TypeScript is **not yet** supported in the config file — this will be handled in a future PR.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14239","RelatedDescription":"Closed or merged PR \"Support loading config files via `@config`\" (#14239)"},{"Id":"2492501113","IsPullRequest":true,"CreatedAt":"2024-09-02T14:41:39","Actor":"philipp-spiess","Number":"14278","RawContent":null,"Title":"Remove named opacity support for color opacity modifiers","State":"closed","Body":"Right now if you have a custom opacity theme value configured like this…\r\n\r\n```css\r\n@theme {\r\n  --opacity-disabled: 50%;\r\n}\r\n```\r\n\r\n…then you can use that named opacity value as a color opacity modifier like this:\r\n\r\n```html\r\n<div class=\"bg-red-500/disabled\">\r\n```\r\n\r\nWe think this behavior is confusing. The color opacity modifier is not setting opacity but the alpha value of a color. Opacity is for setting the opacity of an element, so the custom names you'd come up with are named after those situations, which makes them not seem appropriate for color modifiers.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14278","RelatedDescription":"Closed or merged PR \"Remove named opacity support for color opacity modifiers\" (#14278)"},{"Id":"2489112207","IsPullRequest":true,"CreatedAt":"2024-09-02T13:23:46","Actor":"philipp-spiess","Number":"14270","RawContent":null,"Title":"Add standalone CLI","State":"closed","Body":"This PR adds a new standalone client: A single-binary file that you can use to run Tailwind v4 without having a node setup. To make this work we use Bun's single-binary build which can properly package up native modules and the bun runtime for us so we do not have to rely on any expand-into-tmp-folder-at-runtime workarounds.\r\n\r\nWhen running locally, `pnpm build` will now standalone artifacts inside `packages/@tailwindcss-standalone/dist`. Note that since we do not build Oxide for other environments in the local setup, you won't be able to use the standalone artifacts for other platforms in local dev mode.\r\n\r\nUnfortunately Bun does not have support for Windows ARM builds yet but we found that using the `bun-baseline` runtime for Windows x64 would make the builds work fine in ARM emulation mode:\r\n\r\n![Screenshot windows](https://github.com/user-attachments/assets/5b39387f-ec50-4757-9469-19b98e43162d)\r\n\r\n\r\nSome Bun related issues we faced and worked around:\r\n\r\n- We found that the regular Windows x64 build of  `bun` does not run on Windows ARM via emulation. Instead, we have to use the `bun-baseline` builds which emulate correctly.\r\n\r\n- When we tried to bundle artifacts with [embed directories](https://bun.sh/docs/bundler/executables#embed-directories), node binary dependencies were no longer resolved correctly even though they would still be bundled and accessible within the [`embeddedFiles` list](https://bun.sh/docs/bundler/executables#listing-embedded-files). We worked around this by using the `import * as from ... with { type: \"file\" };` and patching the resolver we use in our CLI.\r\n  \r\n  \r\n- If you have an import to a module that is used as a regular import _and_ a `with { type: \"file\" }`, it will either return the module in both cases _or_ the file path when we would expect only the `with { type: \"file\" }` import to return the path. We do read the Tailwind CSS version via the file system and `require.resolve()` in the CLI and via `import * from './package.json'` in core and had to work around this by patching the version resolution in our CLI. \r\n \r\n  ```ts\r\n  import packageJson from \"./package.json\"\r\n  import packageJsonPath from \"./package.json\" with {type: \"file\"}\r\n  \r\n  // We do not expect these to be equal\r\n  packageJson === packageJsonPath \r\n  ```\r\n- We can not customize the app icon used for Windows `.exe` builds without decompiling the binary. For now we will leave the default but one workaround is to [use tools like ResourceHacker](https://github.com/tailwindlabs/tailwindcss/pull/14270/commits/698d9c4bd182391adb4b236f19a539aff13f78f9) to decompile the binary first.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14270","RelatedDescription":"Closed or merged PR \"Add standalone CLI\" (#14270)"},{"Id":"2498929759","IsPullRequest":false,"CreatedAt":"2024-08-31T16:17:57","Actor":"kbr-","Number":"14308","RawContent":null,"Title":"`--watch` not observing changes done by `vi` when input file and config file are in different directories (but works with `--poll` mode)","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n3.4.10, `tailwindcss-linux-x64` binary downloaded for the [releases](https://github.com/tailwindlabs/tailwindcss/releases/tag/v3.4.10) page.\r\n\r\n**What operating system are you using?**\r\n\r\n```\r\nLinux pop-os 6.9.3-76060903-generic #202405300957~1721174657~22.04~abb7c06 SMP PREEMPT_DYNAMIC Wed J x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\n**Reproduction + description**\r\n\r\nYou need two empty files: empty config.js file and empty input.css file; they must be in separate directories. You can execute the following sequence of bash commands to reproduce:\r\n```bash\r\nmkdir repro\r\ncd repro\r\nmkdir cfg\r\ntouch cfg/config.js\r\ntouch input.css\r\nwget https://github.com/tailwindlabs/tailwindcss/releases/download/v3.4.10/tailwindcss-linux-x64\r\nchmod +x tailwindcss-linux-x64\r\n./tailwindcss-linux-x64 -c cfg/config.js -i input.css -o output.css -w\r\n```\r\n\r\nThen open the file `input.css` in `vi` and save it (`:w`).\r\n\r\nTailwind will **not** rebuild the file on save.\r\n\r\nThe conditions to reproduce the issue are oddly specific:\r\n- `touch input.css` causes rebuild\r\n- opening it with `gedit` and saving causes rebuild\r\n- if we add `-p` (`--poll`), saving in `vi` works (causes rebuild):\r\n```\r\n./tailwindcss-linux-x64 -c cfg/config.js -i input.css -o output.css -w -p\r\n```\r\n- if we use `config.js` from the same directory as `input.css`, saving in `vi` works:\r\n```\r\ntouch config.js\r\n./tailwindcss-linux-x64 -c cfg/config.js -i input.css -o output.css -w\r\n```\r\n\r\n\r\nWhy `vi` is needed? I'm guessing it's somehow related to the file metadata, perhaps saving in `vi` is not modifying some file metadata that `touch` or saving with another editor like `gedit` does, and `-w` is observing this metadata. I'd guess there are some other editors which make this possible to reproduce.\r\n\r\nBut why do the files have to be in different directories? No idea.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14308","RelatedDescription":"Open issue \"`--watch` not observing changes done by `vi` when input file and config file are in different directories (but works with `--poll` mode)\" (#14308)"},{"Id":"2493437808","IsPullRequest":false,"CreatedAt":"2024-08-31T14:42:18","Actor":"EhsanKhalili","Number":"14284","RawContent":null,"Title":"Presets issue for **letterSpacing**","State":"closed","Body":"Hi, I have an issue about presets of letterSpacing:\r\n\r\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n\"tailwindcss\": \"^3.4.10\",\r\n\"prettier-plugin-tailwindcss\": \"^0.6.6\"\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\"next\": \"^14.2.7\"\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.17.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome Version 128.0.6613.114 (Official Build) (64-bit)\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Describe your issue**\r\n\r\nI have a <a href=\"https://tailwindcss.com/docs/presets\">Reusable Configuration Preset</a> like below:\r\n```js\r\n// @persiabme/toolkit/dist/styles/tailwind.config.js\r\n\r\n/** @type {import('tailwindcss').Config} */\r\nmodule.exports = {\r\n  content: [\"./src/**/*.{html,jsx,tsx,ts}\"],\r\n  theme: {\r\n    extend: {\r\n       ...\r\n    },\r\n    fontSize: {\r\n      xs: [\"var(--font-size-xs)\", \"var(--line-height-xs)\"],\r\n      sm: [\"var(--font-size-sm)\", \"var(--line-height-sm)\"],\r\n      base: [\"var(--font-size-base)\", \"var(--line-height-base)\"],\r\n      lg: [\"var(--font-size-lg)\", \"var(--line-height-lg)\"],\r\n      xl: [\"var(--font-size-xl)\", \"var(--line-height-xl)\"],\r\n      \"2xl\": [\"var(--font-size-2xl)\", \"var(--line-height-2xl)\"],\r\n      \"3xl\": [\"var(--font-size-3xl)\", \"var(--line-height-3xl)\"],\r\n      \"4xl\": [\"var(--font-size-4xl)\", \"var(--line-height-4xl)\"],\r\n      \"5xl\": [\"var(--font-size-5xl)\", \"var(--line-height-5xl)\"],\r\n      \"6xl\": [\"var(--font-size-6xl)\", \"var(--line-height-6xl)\"],\r\n      \"7xl\": [\"var(--font-size-7xl)\", \"var(--line-height-7xl)\"],\r\n      \"8xl\": [\"var(--font-size-8xl)\", \"var(--line-height-8xl)\"],\r\n      \"9xl\": [\"var(--font-size-9xl)\", \"var(--line-height-9xl)\"],\r\n    },\r\n    letterSpacing: {\r\n      tightest: \"var(--tightest)\",\r\n      tighter: \"var(--tighter)\",\r\n      tight: \"var(--tight)\",\r\n      normal: \"var(--normal)\",\r\n      wide: \"var(--wide)\",\r\n      wider: \"var(--wider)\",\r\n      \"more-wider\": \"var(--more-wider)\",\r\n      widest: \"var(--widest)\",\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n\r\nBut when I want to use it in my code like below\r\n\r\n```js\r\n/** @type {import('tailwindcss').Config} */\r\nmodule.exports = {\r\n  presets: [require(\"@persiabme/toolkit/dist/styles/tailwind.config.js\")],\r\n  prefix: \"\",\r\n  corePlugins: {\r\n    preflight: false,\r\n  },\r\n};\r\n```\r\n\r\nEverything work fine:\r\n\r\n<img width=\"857\" alt=\"image\" src=\"https://github.com/user-attachments/assets/c18fe77c-2f50-4240-8983-37db4fb1c071\">\r\n\r\nexcept **letterSpacing**, \r\n\r\n<img width=\"857\" alt=\"image\" src=\"https://github.com/user-attachments/assets/03b756b6-3797-44c6-8944-e0554edf9af4\">\r\n\r\nIt seems the presets doesn't work for **letterSpacing**.\r\n\r\nThank you very much.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14284","RelatedDescription":"Closed issue \"Presets issue for **letterSpacing**\" (#14284)"},{"Id":"2498785219","IsPullRequest":true,"CreatedAt":"2024-08-31T10:48:24","Actor":"shedokan","Number":"14306","RawContent":null,"Title":"Fix rtl/ltr to work with dir=auto","State":"open","Body":"<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n\r\n\r\nThis fixes the following issue https://github.com/tailwindlabs/tailwindcss/issues/14305 by using `:dir()`","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14306","RelatedDescription":"Open PR \"Fix rtl/ltr to work with dir=auto\" (#14306)"},{"Id":"2498782435","IsPullRequest":false,"CreatedAt":"2024-08-31T10:40:48","Actor":"shedokan","Number":"14305","RawContent":null,"Title":"tlr and rtl don't respect the direction when dir=auto is used","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss 8.4.41, svelte 4.2.19, vite 5.4.2\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.17.0\r\n\r\n**What browser are you using?**\r\n\r\nArc (Chromium based)\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nIt is expected that when using dir=auto the english(ltr) and hebrew(rtl) texts would also be coloured\r\n\r\nhttps://play.tailwindcss.com/ZKvy8eFhha\r\n\r\n**Describe your issue**\r\n\r\nWhen using [dir=auto](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) on an element, the user agent parses the content and figures out the direction to be used.\r\n\r\nThe current attributes depend on the attribute, instead of the [`:dir()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:dir)\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/ac6d4a6e8e9ae7ca197bf98d933ae2f205be3635/packages/tailwindcss/src/variants.ts#L902-L903\r\n\r\n\r\nNote: Things like `ps` and `pe` do work","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14305","RelatedDescription":"Open issue \"tlr and rtl don't respect the direction when dir=auto is used\" (#14305)"},{"Id":"2497338672","IsPullRequest":true,"CreatedAt":"2024-08-30T14:04:47","Actor":"vfssantos","Number":"14300","RawContent":null,"Title":"Enable tailwindcss to run in restricted permissions environment (eg. Deno Webworker w/o read permissions)","State":"open","Body":"\r\nThis PR is a suggestion implementation for solving #14299 .\r\n\r\n#### Description:\r\nI have identified a potential improvement for TailwindCSS that would enhance its compatibility with environments that have limited read permissions, such as Cloudflare Workers or Deno WebWorkers / Deno Deploy with limited read / write permissions.\r\n\r\n#### Problem:\r\nWhen running TailwindCSS in environments where read access to the file system is restricted (e.g., serverless functions, WebWorkers), the dependency on fast-glob for resolving file paths can cause issues. Specifically, fast-glob requires read access to the instance's current directory (via process.cwd()), which is not necessary for use cases where the Tailwind config is passed directly into PostCSS, and the HTML containing Tailwind CSS utilities is provided in-memory as the raw property in content.files.\r\n\r\n#### Proposed Solution:\r\nA simple solution (about 10 lines of code) could be implemented to check if the length of the paths to be verified is greater than zero. If paths are present, the regular logic using fast-glob would proceed. If not, we can skip the fast-glob call, allowing TailwindCSS to function in environments with restricted read permissions.\r\n\r\n#### Benefits:\r\nThis change would enable dynamic CSS generation in restricted serverless environments, making TailwindCSS more versatile and opening up new use cases, such as running on platforms like Cloudflare Workers or Deno WebWorkers without the need for read access.\r\n\r\n#### Reproduction URL\r\n\r\nClone the repo: https://github.com/vfssantos/tailwind-edge-test/tree/main\r\nAs we're using Deno in that repo, make sure you have Deno installed locally\r\nRun the project as instructed. You'll be prompted for permissions. You can deny all of them and would still work, except for the --read for cwd command (which is used by fast-glob).\r\n\r\n**Expected Behavior ** : TailwindCSS should allow dynamic CSS generation without requiring file system read access when the paths to be checked are empty.\r\n\r\n**Proposed Changes Behavior**: With the simple proposed changes in this PR, the repo in **Reproduction URL** works seamlessly.\r\n\r\nIf the maintainers agree, I'd be happy to change this PR to comply with any other requirement.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14300","RelatedDescription":"Open PR \"Enable tailwindcss to run in restricted permissions environment (eg. Deno Webworker w/o read permissions)\" (#14300)"},{"Id":"2497241938","IsPullRequest":false,"CreatedAt":"2024-08-30T13:25:15","Actor":"vfssantos","Number":"14299","RawContent":null,"Title":"Enable TailwindCSS in Serverless, Edge and Restricted Environments for Dynamic Styling by Bypassing `fast-glob` if not used","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n- Deno v1.4.44\r\n- Postcss v8.0.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\n----- not applicable: using Deno instead -----\r\n\r\n**What browser are you using?**\r\n\r\n---- not applicable ----\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Describe your issue**\r\n\r\n#### Description:\r\nI have identified a potential improvement for TailwindCSS that would enhance its compatibility with environments that have limited read permissions, such as **Cloudflare Workers** or **Deno WebWorkers** / **Deno Deploy** with limited read / write permissions.\r\n\r\n#### Problem:\r\nWhen running TailwindCSS in environments where read access to the file system is restricted (e.g., serverless functions, WebWorkers), the dependency on fast-glob for resolving file paths can cause issues. Specifically, fast-glob requires read access to the instance's current directory (via process.cwd()), which is not necessary for use cases where the Tailwind config is passed directly into PostCSS, and the HTML containing Tailwind CSS utilities is provided in-memory as the raw property in content.files.\r\n\r\n#### Proposed Solution:\r\nA simple solution (about 10 lines of code) could be implemented to check if the length of the paths to be verified is greater than zero. If paths are present, the regular logic using fast-glob would proceed. If not, we can skip the fast-glob call, allowing TailwindCSS to function in environments with restricted read permissions.\r\n\r\n#### Benefits:\r\nThis change would enable dynamic CSS generation in restricted serverless environments, making TailwindCSS more versatile and opening up new use cases, such as running on platforms like Cloudflare Workers or Deno WebWorkers without the need for read access.\r\n\r\n**Reproduction URL**\r\n1. Clone the repo: https://github.com/vfssantos/tailwind-edge-test/tree/main\r\n2. As we're using Deno in that repo, make sure you have Deno installed locally\r\n3. Run the project as instructed. You'll be prompted for permissions. You can deny all of them and would still work, except for the `--read` for `cwd` command (which is used by `fast-glob`).\r\n\r\n**Expected Behavior ** : TailwindCSS should allow dynamic CSS generation without requiring file system read access when the paths to be checked are empty.\r\n\r\n**Additional Notes** : I am happy to contribute this improvement via a PR if the maintainers agree with the approach.\r\n\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14299","RelatedDescription":"Open issue \"Enable TailwindCSS in Serverless, Edge and Restricted Environments for Dynamic Styling by Bypassing `fast-glob` if not used\" (#14299)"},{"Id":"2496515129","IsPullRequest":false,"CreatedAt":"2024-08-30T11:49:13","Actor":"lorypelli","Number":"14296","RawContent":null,"Title":"tailwindcss classes aren't applied in `index.html`","State":"closed","Body":"```\r\n/** @type {import('tailwindcss').Config} */\r\nexport default {\r\n    content: ['./index.html', './src/**/*.{svelte,js,ts,jsx,tsx}'],\r\n    theme: {\r\n        extend: {\r\n            backgroundColor: {\r\n                primary: '#171717',\r\n                secondary: '#232323',\r\n            },\r\n            fontFamily: {\r\n                custom: \"'Martian Mono', monospace\",\r\n            },\r\n        },\r\n    },\r\n    plugins: [],\r\n};\r\n```\r\nthis is my tailwind config\r\n\r\n```\r\nexport default {\r\n    plugins: {\r\n        tailwindcss: {},\r\n        autoprefixer: {},\r\n    },\r\n};\r\n```\r\nthis is my postcss config\r\n\r\n```\r\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\r\nimport autoprefixer from 'autoprefixer';\r\nimport tailwind from 'tailwindcss';\r\n\r\nexport default {\r\n    // Consult https://svelte.dev/docs#compile-time-svelte-preprocess\r\n    // for more information about preprocessors\r\n    preprocess: vitePreprocess({\r\n        postcss: {\r\n            plugins: [tailwind, autoprefixer],\r\n        },\r\n    }),\r\n};\r\n```\r\nthis is my svelte config\r\n\r\ntailwindcss version: `3.4.10`\r\npostcss version: `8.4.41`\r\nautoprefixer version: `10.4.20`\r\n\r\nclasses are applied in the framework files, only `index.html` isn't working and I need to restart dev server to apply them.\r\nat first `postcss` wasn't installed, after installing, it started working, but after I restarted the dev server, it didn't work anymore.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14296","RelatedDescription":"Closed issue \"tailwindcss classes aren't applied in `index.html`\" (#14296)"},{"Id":"2494330951","IsPullRequest":false,"CreatedAt":"2024-08-29T20:35:25","Actor":"erikdemarco","Number":"14291","RawContent":null,"Title":"Cant Install tailwind with astro anymore...","State":"closed","Body":"yesterday I successfully install astro with tailwind, using this exact steps from here:\r\n\r\n`https://tailwindcss.com/docs/guides/astro`\r\n\r\nToday I ant install anymore. It always shows:\r\n\r\n```\r\n7:35:13 PM [vite] Error when evaluating SSR module /home/Desktop/tmp/astro/my-project/astro.config.mjs: failed to import \"@astrojs/tailwind\"\r\n|- SyntaxError: [vite] The requested module '@astrojs/tailwind' does not provide an export named 'tailwind'\r\n    at analyzeImportedModDifference (file:///home/Desktop/tmp/astro/my-project/node_modules/vite/dist/node/chunks/dep-BzOvws4Y.js:51946:15)\r\n    at nodeImport (file:///home/Desktop/tmp/astro/my-project/node_modules/vite/dist/node/chunks/dep-BzOvws4Y.js:52958:5)\r\n    at async ssrImport (file:///home/Desktop/tmp/astro/my-project/node_modules/vite/dist/node/chunks/dep-BzOvws4Y.js:52812:16)\r\n    at async eval (/home/Desktop/tmp/astro/my-project/astro.config.mjs:4:31)\r\n    at async instantiateModule (file:///home/Desktop/tmp/astro/my-project/node_modules/vite/dist/node/chunks/dep-BzOvws4Y.js:52870:5)\r\n\r\n[astro] Unable to load your Astro config\r\n\r\n[vite] The requested module '@astrojs/tailwind' does not provide an export named 'tailwind'\r\n  Stack trace:\r\n    at analyzeImportedModDifference (file:///home/Desktop/tmp/astro/my-project/node_modules/vite/dist/node/chunks/dep-BzOvws4Y.js:51946:15)\r\n    at async ssrImport (file:///home/Desktop/tmp/astro/my-project/node_modules/vite/dist/node/chunks/dep-BzOvws4Y.js:52812:16)\r\n    at async instantiateModule (file:///home/Desktop/tmp/astro/my-project/node_modules/vite/dist/node/chunks/dep-BzOvws4Y.js:52870:5)\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14291","RelatedDescription":"Closed issue \"Cant Install tailwind with astro anymore...\" (#14291)"},{"Id":"2495204101","IsPullRequest":false,"CreatedAt":"2024-08-29T18:38:36","Actor":"ogbotemi-2000","Number":"14293","RawContent":null,"Title":"A thorough CSS purging software that is production ready and efficient for TailwindCSS with a browser based UI and npm package","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n\\> v3.0.4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNone\r\n\r\n**What version of Node.js are you using?**\r\n\\> v18.0.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\nN/A since this is an issue with the trimmed TailwindCSS styles not being thorough and making the generated CSS incomplete\r\n\r\n**Describe your issue**\r\n`PurgeCSS`, as used by TailwindCSS, doesn't detect selectors in inline event listeners in the html code of a webpage without much configuration. I present a `rmrf-css` - a browser-based UI and npm package that thoroughly scans wherever used selectors may be - in inline scripts or external scripts, inline event listeners in the HTML and correctly generates a CSS file of used styles and generic ones\r\n***Browser-based UI***\r\nHead over to https://rmrf-css.vercel.app and begin trimming and downloading used styles for your website by providing a URL\r\n\r\n***NPM package***\r\nVisit https://www.npmjs.com/package/rmrf-css for the details of the npm package that offers similar functionality as well as usability via the command line or as a module.\r\n\r\nI look forward to the engagement of users of the TailwindCSS library, I assure you that the generated output of the software is battle-tested and delivers a CSS file that is concise with all used styles applying in its HTML file","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14293","RelatedDescription":"Closed issue \"A thorough CSS purging software that is production ready and efficient for TailwindCSS with a browser based UI and npm package\" (#14293)"},{"Id":"2494260781","IsPullRequest":false,"CreatedAt":"2024-08-29T12:35:34","Actor":"sylann","Number":"14290","RawContent":null,"Title":"tailwindcss --watch does not purge unused classes when saving a source file","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.6\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNone\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.15.1\r\n\r\n**What browser are you using?**\r\n\r\nNot relevant\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS, Sonoma (14.6.1), Intel X86\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/sylann/tailwind-issue-14290\r\n\r\n**Describe your issue**\r\n\r\nWhen running tailwindcss with the --watch flag:\r\n```sh\r\nnode_modules/.bin/tailwindcss -i ./input.css -o ./output.css --watch\r\n```\r\n\r\n1. The first generation in ./output.css is correct\r\n  - ✅ used classes are added\r\n  - ✅ unused classes are removed\r\n2. Subsequent generations (on updates) are incorrect\r\n  - ✅ used classes are added\r\n  - ❌ unused classes are not removed\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14290","RelatedDescription":"Closed issue \"tailwindcss --watch does not purge unused classes when saving a source file\" (#14290)"},{"Id":"2486657967","IsPullRequest":true,"CreatedAt":"2024-08-29T12:05:41","Actor":"philipp-spiess","Number":"14257","RawContent":null,"Title":"Spreading `tailwindcss/defaultTheme` exports keeps bare values","State":"closed","Body":"In #14221 we added a new export to the `tailwindcss` package: `tailwindcss/defaultTheme`. This is build on top of the full config from V3 and will allow plugins to keep being compatible.\r\n\r\nHowever, spreading in from this package has overwritten the bare value callback handler. This PR fixes it by sharing the bare value callbacks with the compat config.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14257","RelatedDescription":"Closed or merged PR \"Spreading `tailwindcss/defaultTheme` exports keeps bare values\" (#14257)"},{"Id":"2491597396","IsPullRequest":false,"CreatedAt":"2024-08-28T09:45:39","Actor":"probablykasper","Number":"14277","RawContent":null,"Title":"calc() broken in v4: Invalid property value, expected type \"<length> | <percentage>\"","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: 4.0.0-alpha.20\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: Vite 5.4.2\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v20.15.0\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Brave\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/CLyjwhj0qQ\r\n\r\n**Describe your issue**\r\n\r\nThe same code does work in v3. Setting the CSS variable's `syntax` property from `\"<length> | <percentage>\"` to `\"<length-percentage>\"` fixes it.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14277","RelatedDescription":"Open issue \"calc() broken in v4: Invalid property value, expected type \"<length> | <percentage>\"\" (#14277)"},{"Id":"2488861178","IsPullRequest":false,"CreatedAt":"2024-08-27T12:43:19","Actor":"wangyuanfen","Number":"14268","RawContent":null,"Title":"How could i delete useless css when vite build","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite 5.4.1\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.13.1\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/wangyuanfen/tailwind\r\n\r\n**Describe your issue**\r\n\r\nwhen i build , my App.tsx no import sub.tsx\r\n\r\nApp.tsx\r\n```\r\nexport default function App() {\r\n  return (\r\n    <h1 className=\"text-3xl font-bold underline\">\r\n      Hello world!\r\n    </h1>\r\n  )\r\n}\r\n```\r\n\r\nsub.tsx\r\n```\r\nexport default function Test() {\r\n  return (\r\n    <h1 className=\"text-[#123456] bg-[url(./avatar.jpg)]\">\r\n      12345789\r\n    </h1>\r\n  )\r\n}\r\n```\r\n\r\nand the dist have the useless css and picture\r\n![1](https://github.com/user-attachments/assets/ff8888f3-fdb6-4bb3-9a58-a184a0e539b1)\r\n\r\nDoesn't JIT delete useless CSS?\r\n\r\nI hope the useless css not show in the dist, especially the jpg no build in dist","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14268","RelatedDescription":"Closed issue \"How could i delete useless css when vite build\" (#14268)"},{"Id":"2488914311","IsPullRequest":true,"CreatedAt":"2024-08-27T10:21:12","Actor":"philipp-spiess","Number":"14269","RawContent":null,"Title":"Rework Vite plugin to support lightningcss pre processor and fast rebuilds","State":"open","Body":"Fixes #14205\r\nFixes #14106\r\n\r\nThis PR reworks the Vite extension in order to supprt `lightningcss` as the pre-processor, enable faster rebuilds, and adds support for `vite build --watch` mode. To make this change possible, we've done two major changes to the extension that have caused the other changes.\r\n\r\n## 1. Tailwind CSS is a preprocessor\r\n\r\nWe now run all of our modifications in `enforce: 'pre'`. This means that Tailwind CSS now gets the untransformed CSS files rather than the one already going through postcss or lightningcss. We do this because Tailwind CSS _is_ a preprocessor at the same level as those tools and we do sometimes use the language in ways that [creates problems when it's the input for other bundlers](https://github.com/tailwindlabs/tailwindcss/pull/14269). \r\n\r\nThe correct solution here is to make Tailwind not depend on any other transformations. The main reason we were not using the `enforce: 'pre'` phase in Vite before was becuase we relied on the `@import` flattening of postcss so we now have to do this manually. `@import` flattening is now a concern that every Tailwind V4 client has to deal with so this might actually be something we want to inline into tailwindcss in the future. \r\n\r\n## 2. A Vite config can have multiple Tailwind roots \r\n\r\nThis is something that we have not made very explicit in the previous iteration of the Vite plugin but we have to support multiple Tailwind roots in a single Vite workspace. A Tailwind root is a CSS file that is used to configure Tailwind. Technically, any CSS file can be the input for `tailwindcss` but you have to add certain rules (e.g. `@import \"tailwindcss\";`) to make the compiler do something.\r\n\r\nA workspace can have multiple of these rules (e.g. by having different Tailwind configures for different sub-pages). With the addition of [support for `@source` rules](https://github.com/tailwindlabs/tailwindcss/pull/14078) and [JS config files](https://github.com/tailwindlabs/tailwindcss/pull/14239), Tailwind roots become more complex and can have a custom list of _dependencies_ (that is other JavaScript modules the compiler includes as part of these new rules). In order to _only rebuild the roots we need to_, we have to make this separation very clear. \r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14269","RelatedDescription":"Open PR \"Rework Vite plugin to support lightningcss pre processor and fast rebuilds\" (#14269)"},{"Id":"2487696788","IsPullRequest":true,"CreatedAt":"2024-08-27T10:18:53","Actor":"thecrypticace","Number":"14265","RawContent":null,"Title":"Fix support for declaration fallbacks in plugins","State":"closed","Body":"This PR fixes support for \"fallback\" values for declarations in plugins. \r\n\r\nA plugin using `addUtilities`, `matchUtilities`, `addComponents`, etc… should be able to specify \"fallback\" values for declarations by passing an array as the value of a declaration however this does not currently work in v4 (but it does in v3):\r\n\r\n```js\r\nexport default {\r\n  plugins: [\r\n    function ({ addUtilities }) {\r\n      addUtilities({\r\n        '.outlined': {\r\n          outline: ['1px solid ButtonText', '1px auto -webkit-focus-ring-color'],\r\n        },\r\n      })\r\n    },\r\n  ],\r\n};\r\n```\r\n\r\nAfter this PR the candidate `outlined` will now produce the following CSS — like it does in v3:\r\n\r\n```css\r\n.outlined {\r\n  outline: 1px solid ButtonText;\r\n  outline: 1px auto -webkit-focus-ring-color;\r\n}\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14265","RelatedDescription":"Closed or merged PR \"Fix support for declaration fallbacks in plugins\" (#14265)"},{"Id":"2486708506","IsPullRequest":false,"CreatedAt":"2024-08-26T17:17:07","Actor":"fedu","Number":"14258","RawContent":null,"Title":"tailwindcss-3.4.10.tgz: 2 vulnerabilities (highest severity is: 7.5)","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nMend security scan\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.9.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Info**\r\n\r\n![image](https://github.com/user-attachments/assets/88c52e94-7b46-4a75-a1f2-384bd10821a8)\r\n\r\n**Describe your issue**\r\n\r\nI'm getting Mend security warning for `braces` and `micromatch` from Mend security scan. If this something that needs to fixed into this package or is there a workaround?\r\n\r\n[CVE-2024-4068](https://www.mend.io/vulnerability-database/CVE-2024-4068)\r\n\r\n High\r\n7.5\r\nbraces-3.0.2.tgz\r\nTransitive\r\nN/A*\r\n❌\r\n\r\n\r\n[CVE-2024-4067](https://www.mend.io/vulnerability-database/CVE-2024-4067)\r\n\r\n High\r\n7.5\r\nmicromatch-4.0.5.tgz\r\nTransitive\r\nN/A*\r\n❌\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14258","RelatedDescription":"Closed issue \"tailwindcss-3.4.10.tgz: 2 vulnerabilities (highest severity is: 7.5)\" (#14258)"},{"Id":"2486911897","IsPullRequest":true,"CreatedAt":"2024-08-26T16:55:27","Actor":"philipp-spiess","Number":"14262","RawContent":null,"Title":"Fix issues with the CSS `theme()` function","State":"closed","Body":"While working on #14257, we noticed two issues with the CSS `theme()` function:\r\n\r\n1. In V3 it's possible to set arrays inside the theme object. An example for this is the default font families as defined here: https://github.com/tailwindlabs/tailwindcss/blob/main/stubs/config.full.js#L303-L311. We now properly join these arrays that are not tuples.\r\n2. We noticed that in the case where there are no modifiers, the fallback values for the CSS `theme()` function had the first word removed. A regression test for this was added.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14262","RelatedDescription":"Closed or merged PR \"Fix issues with the CSS `theme()` function\" (#14262)"},{"Id":"2487206996","IsPullRequest":false,"CreatedAt":"2024-08-26T16:02:12","Actor":"davidmyersdev","Number":"14263","RawContent":null,"Title":"Duplicate ellipsis in Safari when using `<sup>` or `<sub>` tags","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nN/A\r\n\r\n**What version of Node.js are you using?**\r\n\r\nN/A\r\n\r\n**What browser are you using?**\r\n\r\nSafari\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/cUuJcAdOkx\r\n\r\n**Describe your issue**\r\n\r\nWhen loading the above reproduction in Safari, the text is truncated with multiple sets of ellipsis. It appears to be happening due to the `position: relative` styling of the `<sup>` and `<sub>` tags.\r\n\r\nScreenshot:\r\n![image](https://github.com/user-attachments/assets/6075dbe7-f8f7-48d2-ba08-9ad890345661)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14263","RelatedDescription":"Open issue \"Duplicate ellipsis in Safari when using `<sup>` or `<sub>` tags\" (#14263)"},{"Id":"2486900200","IsPullRequest":true,"CreatedAt":"2024-08-26T14:23:52","Actor":"philipp-spiess","Number":"14260","RawContent":null,"Title":"Correctly merge tuple values when using the plugin API","State":"closed","Body":"We noticed that when the `defaultTheme` (change for this is coming in #14257) defines a tuple that is also defined in the CSS theme, the values are incorrectly merged as objects instead of overwritten. However, CSS theme values should take precedence, even when they use tuple syntax.\r\n\r\nProper coverage of this will come once `#14257` is merged when calling `theme(fontSize.xs[1].lineHeight)` will also have a default value passed in from the `defaultTheme`. ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14260","RelatedDescription":"Closed or merged PR \"Correctly merge tuple values when using the plugin API\" (#14260)"},{"Id":"2485311424","IsPullRequest":false,"CreatedAt":"2024-08-26T13:54:09","Actor":"AlbertSabate","Number":"14253","RawContent":null,"Title":"[v4] Broken types on @tailwindcss/postcss from version 4.0.0-alpha.19","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n\"@tailwindcss/postcss\": \"4.0.0-alpha.19\",\r\n\"@tailwindcss/postcss\": \"4.0.0-alpha.20\",\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nBunJS 1.1.26\r\n\r\n**What version of Node.js are you using?**\r\n\r\nBunJS 1.1.26\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nJust install the library and check the build folder, the problem is with @tailwindcss/postcss not with tailwindcss. You will find the .d.ts and .d.mts with export {  }.\r\n\r\n[Can't be reproduced on the playground](https://play.tailwindcss.com/M7TxWXpLnq?file=css)\r\n\r\n**Describe your issue**\r\n\r\nFrom version \"@tailwindcss/postcss\": \"4.0.0-alpha.19\" the types for the plugin @tailwindcss/postcss stopped working. After research I can find that the type file export becomes empty.\r\n\r\n<img width=\"407\" alt=\"Screenshot 2024-08-25 at 10 54 21 PM\" src=\"https://github.com/user-attachments/assets/f8fc20e3-44da-4707-8fe1-efdcf1090045\">\r\n\r\nIt should be as per version \"@tailwindcss/postcss\": \"4.0.0-alpha.18\". I can confirm downgrading to version \"@tailwindcss/postcss\": \"4.0.0-alpha.18\" everything is working fine.\r\n\r\n<img width=\"566\" alt=\"Screenshot 2024-08-25 at 10 55 48 PM\" src=\"https://github.com/user-attachments/assets/67bc2749-7a0a-45d0-94a4-decb91a6d646\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14253","RelatedDescription":"Closed issue \"[v4] Broken types on @tailwindcss/postcss from version 4.0.0-alpha.19\" (#14253)"},{"Id":"2486398563","IsPullRequest":true,"CreatedAt":"2024-08-26T13:54:07","Actor":"philipp-spiess","Number":"14256","RawContent":null,"Title":"Postcss: Bring back proper type exports","State":"closed","Body":"Closes #14253\r\n\r\nSince we changed the export strategy for the postcss client in #14132, we accidentally no longer generated type exports for this package.\r\n\r\nThis PR adds a type export back. We now use a similar pattern to the `./colors` and `./defaultTheme` exports in the tailwindcss package where we have a separate cjs entrypoint.\r\n\r\nThe changes were validated manually in a playground project that were installing the updated dependencies from tarballs.\r\n\r\nHere is one example of it working as expected:\r\n \r\n<img width=\"750\" alt=\"Screenshot 2024-08-26 at 14 10 07\" src=\"https://github.com/user-attachments/assets/83de15f2-1543-4805-9231-9b8df1636c5e\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14256","RelatedDescription":"Closed or merged PR \"Postcss: Bring back proper type exports\" (#14256)"},{"Id":"2484619245","IsPullRequest":false,"CreatedAt":"2024-08-24T14:02:13","Actor":"HydenLiu","Number":"14247","RawContent":null,"Title":"type: the opacity of tailwind's custom keyframes cannot be a number.","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: postcss-cli 8.3.1, Next.js 10.0.9, webpack 5.28.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v12.0.0\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome, Safari, or N/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/ks4NiyjRok?file=config\r\n\r\n**Describe your issue**\r\n\r\nThe opacity of tailwind's custom keyframes cannot be a number.\r\n<img width=\"805\" alt=\"image\" src=\"https://github.com/user-attachments/assets/c10cd97c-8e88-44e3-8c14-a48397d033a0\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14247","RelatedDescription":"Open issue \"type: the opacity of tailwind's custom keyframes cannot be a number.\" (#14247)"},{"Id":"2484195691","IsPullRequest":false,"CreatedAt":"2024-08-24T04:40:38","Actor":"zhuba-Ahhh","Number":"14245","RawContent":null,"Title":"When I use the !important modifier in Text Color, I get an error","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: vtailwindcss\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: postcss-cli 8.3.1, Next.js 10.0.9, webpack 5.28.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v12.0.0\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome, Safari, or N/A\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS, Windows\r\n\r\n**Reproduction URL**\r\n\r\nA Tailwind Play link or public GitHub repo that includes a minimal reproduction of the bug. **Please do not link to your actual project**, what we need instead is a _minimal_ reproduction in a fresh project without any unnecessary code. This means it doesn't matter if your real project is private/confidential, since we want a link to a separate, isolated reproduction anyways.\r\n\r\nA reproduction is **required** when filing an issue — any issue opened without a reproduction will be closed and you'll be asked to create a new issue that includes a reproduction. We're a small team and we can't keep up with the volume of issues we receive if we need to reproduce each issue from scratch ourselves.\r\n\r\n**Describe your issue**\r\n\r\nuse：\r\n<img width=\"555\" alt=\"image\" src=\"https://github.com/user-attachments/assets/69658c5c-61fe-4a6e-82a5-aacc6564c1eb\">\r\nshow:\r\n<img width=\"706\" alt=\"image\" src=\"https://github.com/user-attachments/assets/1c54c85b-ffcf-43a2-94f6-fa33d54c602b\">\r\n<img width=\"478\" alt=\"image\" src=\"https://github.com/user-attachments/assets/f725d939-c564-4909-bb3f-28c43b1e1073\">\r\n\r\nIt seems that the variable is also brought in during compilation! Important\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14245","RelatedDescription":"Closed issue \"When I use the !important modifier in Text Color, I get an error\" (#14245)"},{"Id":"2483186925","IsPullRequest":true,"CreatedAt":"2024-08-23T13:51:54","Actor":"philipp-spiess","Number":"14244","RawContent":null,"Title":"Prepare `v4.0.0-alpha.20`","State":"closed","Body":"Prepare next `4.0.0-alpha.20` release\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14244","RelatedDescription":"Closed or merged PR \"Prepare `v4.0.0-alpha.20`\" (#14244)"},{"Id":"2482027519","IsPullRequest":false,"CreatedAt":"2024-08-23T00:39:33","Actor":"quick007","Number":"14240","RawContent":null,"Title":"Border opacity not working when color isn't specified","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\"next\": \"14.2.5\",\r\n\"postcss\": \"^8.4.40\",\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.0.0\r\n\r\n**What browser are you using?**\r\n\r\nChome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/2kFJgAhjXC\r\n\r\n**Describe your issue**\r\n\r\nYou need to add a border color for `border-opacity-<number>` to work. Just `border border-opacity-<number>` should work on it's own.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14240","RelatedDescription":"Open issue \"Border opacity not working when color isn't specified\" (#14240)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-09-03T03:30:22.1957654Z","RunDurationInMilliseconds":436}