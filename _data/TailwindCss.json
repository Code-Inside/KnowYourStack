{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2424469097","IsPullRequest":true,"CreatedAt":"2024-07-24T16:46:21","Actor":"philipp-spiess","Number":"14037","RawContent":null,"Title":"Normalize attribute selector for `data-*` and `aria-*` modifiers","State":"closed","Body":"Fixes #14026 \r\nSee #14040 for the v4 fix\r\n\r\nWhen translating `data-` and `aria-` modifiers with attribute selectors, we currently do not wrap the target attribute in quotes. This only works for keywords (purely alphabetic words) but breaks as soon as there are numbers or things like spaces in the attribute:\r\n\r\n```html\r\n<div data-id=\"foo\" class=\"data-[id=foo]:underline\">underlined</div>\r\n<div data-id=\"f1\" class=\"data-[id=1]:underline\">not underlined</div>\r\n<div data-id=\"foo bar\" class=\"data-[id=foo_bar]:underline\">not underlined</div>\r\n```\r\n\r\nSince it's fairly common to have attribute selectors with `data-` and `aria-` modifiers, this PR will now wrap the attribute in quotes unless these are already wrapped. \r\n\r\n| Tailwind Modifier  | CSS Selector |\r\n| ------------- | ------------- |\r\n| `.data-[id=foo]`  | `[data-id='foo']`  |\r\n| `.data-[id='foo']`  | `[data-id='foo']`  |\r\n| `.data-[id=foo_i]`  | `[data-id='foo i']`  |\r\n| `.data-[id='foo'_i]`  | `[data-id='foo' i]`  |\r\n| `.data-[id=123]`  | `[data-id='123']`  |\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14037","RelatedDescription":"Closed or merged PR \"Normalize attribute selector for `data-*` and `aria-*` modifiers\" (#14037)"},{"Id":"2426058425","IsPullRequest":true,"CreatedAt":"2024-07-24T15:07:24","Actor":"thecrypticace","Number":"14044","RawContent":null,"Title":"Add support for defining simple custom utilities in CSS via `@utility`","State":"closed","Body":"This PR allows you to add custom utilities to your project via the new `@utility` rule.\r\n\r\nFor example, given the following:\r\n```css\r\n@utility text-trim {\r\n  text-box-trim: both;\r\n  text-box-edge: cap alphabetic;\r\n}\r\n```\r\n\r\nA new `text-trim` utility is available and can be used directly or with variants:\r\n```html\r\n<div class=\"text-trim\">...</div>\r\n<div class=\"hover:text-trim\">...</div>\r\n<div class=\"lg:dark:text-trim\">...</div>\r\n```\r\n\r\nIf a utility is defined more than one time the latest definition will be used:\r\n```css\r\n@utility text-trim {\r\n  text-box-trim: both;\r\n  text-box-edge: cap alphabetic;\r\n}\r\n\r\n@utility text-trim {\r\n  text-box-trim: both;\r\n  text-box-edge: cap ideographic;\r\n}\r\n```\r\n\r\nThen using `text-trim` will produce the following CSS:\r\n```css\r\n.text-trim {\r\n  text-box-trim: both;\r\n  text-box-edge: cap ideographic;\r\n}\r\n```\r\n\r\nYou may also override specific existing utilities with this â€” for example to add a `text-rendering` property to the `text-sm` utility:\r\n```css\r\n@utility text-sm {\r\n  font-size: var(--font-size-sm, 0.875rem);\r\n  line-height: var(--font-size-sm--line-height, 1.25rem);\r\n  text-rendering: optimizeLegibility;\r\n}\r\n```\r\n\r\nThough it's preferred, should you not need to add properties, to override the theme instead.\r\n\r\nLastly, utilities with special characters do not need to be escaped like you would for a class name in a selector:\r\n```css\r\n@utility push-1/2 {\r\n  right: 50%;\r\n}\r\n```\r\n\r\nWe do however explicitly error on certain patterns that we want to reserve for future use, for example `push-*` and `push-[15px]`.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14044","RelatedDescription":"Closed or merged PR \"Add support for defining simple custom utilities in CSS via `@utility`\" (#14044)"},{"Id":"2427834497","IsPullRequest":true,"CreatedAt":"2024-07-24T15:06:25","Actor":"philipp-spiess","Number":"14049","RawContent":null,"Title":"Feat/import","State":"open","Body":"<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14049","RelatedDescription":"Open PR \"Feat/import\" (#14049)"},{"Id":"2418637519","IsPullRequest":false,"CreatedAt":"2024-07-24T14:55:08","Actor":"flauwekeul","Number":"14026","RawContent":null,"Title":"Data attribute modifier doesn't work with numeric values","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n3.4.6\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nVite 5.3.3 (no Vue/React/Angular)\r\n\r\n**What version of Node.js are you using?**\r\n\r\n20.12.1\r\n\r\n**What browser are you using?**\r\n\r\nAny browser\r\n\r\n**What operating system are you using?**\r\n\r\nMacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/urhLO2C0Zj\r\n\r\n**Describe your issue**\r\n\r\nWhen the `data-*` modifier is used and the `data` attribute has a numeric value, the class isn't applied.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14026","RelatedDescription":"Closed issue \"Data attribute modifier doesn't work with numeric values\" (#14026)"},{"Id":"2425083509","IsPullRequest":true,"CreatedAt":"2024-07-24T14:55:07","Actor":"philipp-spiess","Number":"14040","RawContent":null,"Title":"Normalize attribute selectors for `data-*` and `aria-*` modifiers","State":"closed","Body":"Fixes #14026 \r\nSee https://github.com/tailwindlabs/tailwindcss/pull/14037 for the v3 fix\r\n\r\nWhen translating `data-` and `aria-` modifiers with attribute selectors, we currently do not wrap the target attribute in quotes. This only works for keywords (purely alphabetic words) but breaks as soon as there are numbers or things like spaces in the attribute:\r\n\r\n```html\r\n<div data-id=\"foo\" class=\"data-[id=foo]:underline\">underlined</div>\r\n<div data-id=\"f1\" class=\"data-[id=1]:underline\">not underlined</div>\r\n<div data-id=\"foo bar\" class=\"data-[id=foo_bar]:underline\">not underlined</div>\r\n```\r\n\r\nSince it's fairly common to have attribute selectors with `data-` and `aria-` modifiers, this PR will now wrap the attribute in quotes unless these are already wrapped. \r\n\r\n| Tailwind Modifier  | CSS Selector |\r\n| ------------- | ------------- |\r\n| `.data-[id=foo]`  | `[data-id='foo']`  |\r\n| `.data-[id='foo']`  | `[data-id='foo']`  |\r\n| `.data-[id=foo_i]`  | `[data-id='foo i']`  |\r\n| `.data-[id='foo'_i]`  | `[data-id='foo' i]`  |\r\n| `.data-[id=123]`  | `[data-id='123']`  |","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14040","RelatedDescription":"Closed or merged PR \"Normalize attribute selectors for `data-*` and `aria-*` modifiers\" (#14040)"},{"Id":"2427448708","IsPullRequest":true,"CreatedAt":"2024-07-24T12:22:18","Actor":"philipp-spiess","Number":"14048","RawContent":null,"Title":"Add support for explicit content path via `@content` ","State":"open","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14048","RelatedDescription":"Open PR \"Add support for explicit content path via `@content` \" (#14048)"},{"Id":"2422759956","IsPullRequest":true,"CreatedAt":"2024-07-23T12:40:11","Actor":"philipp-spiess","Number":"14034","RawContent":null,"Title":"Print eventual lightning CSS parsing errors when the CSS matcher fail","State":"closed","Body":"When working on adding a test case with the slightly more complex arbitrary variants names:\r\n\r\n```\r\n[&[data-foo=1]+.bar]:underline\r\n```\r\n\r\nwe noticed that the CSS formatting helpers were giving us unhelpful diff outputs that would make it hard to find the issue.\r\n\r\nIt turns out that we try to normalize the CSS with lightningcss _and automatically fall back to prettier if lightning fails_. This caused confusion and quite a bit of time to understand what's going on. In our case, the CSS being generated by Tailwind was not adding quotes around attribute selectors which caused lightning to fail but prettier to automatically insert these quotes.\r\n\r\nTo fix this, we now capture any eventual lightning error and include it when the test matcher is going to fail (so we keep the tests that currently rely on this behavior clean while adding useful debug information for new tests).\r\n\r\nHere's an example of the new error message:\r\n\r\n````\r\nError: Error formatting using Lightning CSS:\r\n\r\n```css\r\n    text-decoration-line: underline\r\n}\r\n.data-\\[id\\=0\\]\\:underline[data-id=0] {\r\n                                    ^-- SyntaxError: Invalid value in attribute selector: Number { has_sign: false, value: 0.0, int_value: Some(0) }\r\n    text-decoration-line: underline\r\n}\r\n```\r\n````","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14034","RelatedDescription":"Closed or merged PR \"Print eventual lightning CSS parsing errors when the CSS matcher fail\" (#14034)"},{"Id":"2424836292","IsPullRequest":false,"CreatedAt":"2024-07-23T10:31:17","Actor":"Jauharmuhammed","Number":"14038","RawContent":null,"Title":"Overscroll bug across entire site, especially on the docs navbar","State":"closed","Body":"\r\n<img width=\"1440\" alt=\"Screenshot 2024-07-23 at 3 53 00â€¯PM\" src=\"https://github.com/user-attachments/assets/8c5e21e9-36e7-4919-8dac-fd5873757508\">\r\n\r\nBrowser : Chrome\r\nOS: macOS,\r\n\r\n**Describe your issue**\r\n\r\nthere is an overscroll behaviour bug across the entire https://tailwindcss.com/ website. on the docs section navbar look really weird on scroll.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14038","RelatedDescription":"Closed issue \"Overscroll bug across entire site, especially on the docs navbar\" (#14038)"},{"Id":"2420732297","IsPullRequest":true,"CreatedAt":"2024-07-20T08:37:02","Actor":"thibautsabot","Number":"14029","RawContent":null,"Title":"Upgrade lilconfig version to enable ESM support","State":"open","Body":"This PR https://github.com/tailwindlabs/tailwindcss/pull/12455 was merged last year by a [lilconfig](https://github.com/antonk52/lilconfig) maintainer.\r\n\r\nHowever, looking at the merge commit [here](https://github.com/tailwindlabs/tailwindcss/commit/f75c3988b3ea862c2388e83f9372386e68913e06), only the `package-lock.json` file was changed, the `package.json` didn't make it through.\r\n\r\nUpgrading to lilconfig v3 allows user to use ESM for importing postcss configs.\r\n(For example, when using `\"type\": \"module\"` in `package.json`)\r\n\r\nOn this branch, I used the latest version (which includes security patches), alongside a small bump to `postcss-load-config`.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14029","RelatedDescription":"Open PR \"Upgrade lilconfig version to enable ESM support\" (#14029)"},{"Id":"2417315919","IsPullRequest":true,"CreatedAt":"2024-07-19T14:13:10","Actor":"LucasLuisBorges","Number":"14023","RawContent":null,"Title":"changed height vh per dvh, mobile bug with vh","State":"closed","Body":"In various cases, when using VH units to define the heights of components, we encountered rendering issues on mobile applications. However, by replacing VH with DVH, all these issues were resolved without impacting the behavior on desktop. This PR makes the change from VH to DVH units, ensuring a better user experience on mobile devices.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14023","RelatedDescription":"Closed or merged PR \"changed height vh per dvh, mobile bug with vh\" (#14023)"},{"Id":"2416868847","IsPullRequest":false,"CreatedAt":"2024-07-18T16:17:44","Actor":"Matheun","Number":"14020","RawContent":null,"Title":"[v4] importing tailwindcss/utilities breaks hmr","State":"open","Body":"Im using:\r\n- tailwind v4.0.0-alpha.17 ( @tailwindcss/postcss )\r\n- nuxt v3.12.3\r\n- sass v1.77.8\r\n\r\nThe following code works perfectly:\r\n```\r\n@import \"../theme/_index.scss\" layer(theme);\r\n\r\n@import \"tailwindcss/preflight\" layer(base);\r\n@import \"../base/_index.scss\" layer(base);\r\n@import \"../plugins/postcss/_index.scss\" layer(base);\r\n\r\n@import \"../plugins/formkit/_index.scss\" layer(components);\r\n```\r\n\r\nBut whenever i try and import the utilities from tailwind like so:\r\n```\r\n@import \"../theme/_index.scss\" layer(theme);\r\n\r\n@import \"tailwindcss/preflight\" layer(base);\r\n@import \"../base/_index.scss\" layer(base);\r\n@import \"../plugins/postcss/_index.scss\" layer(base);\r\n\r\n@import \"../plugins/formkit/_index.scss\" layer(components);\r\n\r\n@import \"tailwindcss/utilities\" layer(utilities);\r\n```\r\nThe HMR stops working, it does still say that the HMR got updated but it wont actually apply the changes to the front-end.\r\nWhenever i save my main scss file, the changes actually get applied.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14020","RelatedDescription":"Open issue \"[v4] importing tailwindcss/utilities breaks hmr\" (#14020)"},{"Id":"2416620237","IsPullRequest":true,"CreatedAt":"2024-07-18T15:21:20","Actor":"thecrypticace","Number":"14019","RawContent":null,"Title":"Fix class detection in Slim templates with attached attributes and IDs","State":"closed","Body":"This PR brings back a tweaked version of our \"inner matches\" regex so the `m*-auto` classes in the following Slim template will be properly detected:\r\n\r\n```slim\r\n.ml-auto[\r\n  data-value='foo'\r\n]\r\n  Foo bar\r\n.mr-auto[data-value='foo']\r\n  Foo bar\r\n.mt-auto#omg\r\n  Foo bar\r\n#omg.mb-auto\r\n  Foo bar\r\n```\r\n\r\nThe regex isn't identical to the previous one because we still want to prevent things like `px-1.5` from detecting both `px-1` and `px-1.5`.\r\n\r\nFixes #14013\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14019","RelatedDescription":"Closed or merged PR \"Fix class detection in Slim templates with attached attributes and IDs\" (#14019)"},{"Id":"2414354789","IsPullRequest":true,"CreatedAt":"2024-07-17T19:08:34","Actor":"thecrypticace","Number":"14018","RawContent":null,"Title":"Throw out compound variants using variants with nested selectors","State":"closed","Body":"This prevents `not-*`, `has-*`, `group-*`, and `peer-*` from being used with variants containing nested CSS selectors.\r\n\r\nPrior to this PR this was implemented incorrectly. Ideally this would work but requires additional significant effort to ensure that the results are functionally equivalent to the nested version.\r\n\r\nFor now we're disabling this until we can rework the implementation to handle these cases correctly.\r\n\r\nFor an example of something that does not work:\r\n```css\r\n@variant super-focus {\r\n  &:focus {\r\n    &:hover {\r\n      @slot;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nHowever, this does not affect variants nesting a _single_ selector inside `@media`:\r\n```css\r\n/* This still works */\r\n@variant strict-hover {\r\n  @media (hover: hover) {\r\n    &:hover {\r\n      @slot;\r\n    }\r\n  }\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14018","RelatedDescription":"Closed or merged PR \"Throw out compound variants using variants with nested selectors\" (#14018)"},{"Id":"2414327248","IsPullRequest":true,"CreatedAt":"2024-07-17T19:06:00","Actor":"thecrypticace","Number":"14017","RawContent":null,"Title":"Throw out compound variants using variants with nested selectors","State":"closed","Body":"This prevents `not-*`, `has-*`, `group-*`, and `peer-*` from being used with variants containing nested CSS selectors.\r\n\r\nPrior to this PR this was implemented incorrectly. Ideally this would work but requires additional significant effort to ensure that the results are functionally equivalent to the nested version.\r\n\r\nFor now we're disabling this until we can rework the implementation to handle these cases correctly.\r\n\r\nFor an example of something that does not work:\r\n```css\r\n@variant super-focus {\r\n  &:focus {\r\n    &:hover {\r\n      @slot;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nHowever, this does not affect variants nesting a _single_ selector inside `@media`:\r\n```css\r\n/* This still works */\r\n@variant strict-hover {\r\n  @media (hover: hover) {\r\n    &:hover {\r\n      @slot;\r\n    }\r\n  }\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14017","RelatedDescription":"Closed or merged PR \"Throw out compound variants using variants with nested selectors\" (#14017)"},{"Id":"2414318298","IsPullRequest":true,"CreatedAt":"2024-07-17T19:03:57","Actor":"thecrypticace","Number":"14016","RawContent":null,"Title":"Ensure compound variants work with variants with multiple selectors","State":"closed","Body":"Currently the `not-*` and `has-*` variants fail to generate correct CSS when given a custom variant using multiple selectors like so:\r\n```css\r\n@variant hocus {\r\n  &:hover, &:focus {\r\n    @slot;\r\n  }\r\n}\r\n```\r\n\r\nPreviously `not-hocus:underline` generated this â€” incorrectly including the utility inside the `:not(â€¦)`:\r\n```css\r\n.not-hocus\\\\:underline:not(:hover, .not-hocus\\\\:underline:focus) {\r\n  text-decoration-line: underline;\r\n}\r\n```\r\n\r\nNow it generates the following correct CSS:\r\n```css\r\n.not-hocus\\\\:underline:not(:hover, :focus) {\r\n  text-decoration-line: underline;\r\n}\r\n```\r\n\r\nThis same issue applied to the `has-*` variant as well which now generates:\r\n\r\n```css\r\n.has-hocus\\\\:underline:has(:hover, :focus) {\r\n  text-decoration-line: underline;\r\n}\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14016","RelatedDescription":"Closed or merged PR \"Ensure compound variants work with variants with multiple selectors\" (#14016)"},{"Id":"2414309431","IsPullRequest":true,"CreatedAt":"2024-07-17T18:52:29","Actor":"thecrypticace","Number":"14015","RawContent":null,"Title":"Donâ€™t allow at-rule-only variants to be compounded","State":"closed","Body":"This prevents any variant using _only_ an at-rule from being used with `not-*`, `has-*`, `group-*`, and `peer-*`.\r\n\r\nFor example, given the following CSS:\r\n```css\r\n@variant any-hover (@media (any-hover: hover))\r\n```\r\n\r\nNone of these utilities generate CSS:\r\n- `not-any-hover:underline`\r\n- `has-any-hover:underline`\r\n- `group-any-hover:underline`\r\n- `peer-any-hover:underline`\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14015","RelatedDescription":"Closed or merged PR \"Donâ€™t allow at-rule-only variants to be compounded\" (#14015)"},{"Id":"2413821740","IsPullRequest":false,"CreatedAt":"2024-07-17T14:47:55","Actor":"ilkon","Number":"14013","RawContent":null,"Title":"Class `ml-auto` no longer working with 3.4.5+","State":"open","Body":"With the release of version 3.4.5, the class `ml-auto` stopped working and is no longer recognized as CSS class.\r\n\r\nFor example I have html from this [example](https://tailwindui.com/components/application-ui/lists/grid-lists#component-2beafc928684743ff886c0b164edb126) (simplified):\r\n\r\n```html\r\n<div class=\"flex items-center gap-x-6\">\r\n  <div>Block 1</div>\r\n  <div class=\"ml-auto\">Block 2</div>\r\n</div>\r\n```\r\n\r\nThe CSS class `ml-auto` is not recognized by tailwind and not added to the `styles.css`, so the last block is not aligned to the right.\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.5, v3.4.6\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nStandalone CLI that comes with [Tailwindcss-rails](https://github.com/rails/tailwindcss-rails) gem: `tailwindcss-rails (2.6.3-x86_64-linux)`\r\n\r\n**What browser are you using?**\r\n\r\nTested in the latest Chrome and Firefox\r\n\r\n**What operating system are you using?**\r\n\r\nLinux (Debian 12)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14013","RelatedDescription":"Open issue \"Class `ml-auto` no longer working with 3.4.5+\" (#14013)"},{"Id":"2413263204","IsPullRequest":false,"CreatedAt":"2024-07-17T10:41:07","Actor":"VoigtK","Number":"14011","RawContent":null,"Title":"Angular class binding no longer working with 3.4.5+","State":"open","Body":"With the release of version 3.4.5, and the merged pull request #13959 the [single CSS class binding](https://angular.dev/guide/templates/class-binding#binding-to-a-single-css-class) in angular is no longer recognised as css class.\r\n\r\nFor example I have html with\r\n\r\n```\r\n<div class=\"flex flex-col\" [class.ml-2]=\"active\">\r\n</div>\r\n```\r\n\r\nThe css class is not recognised by tailwind and therefore not added to the styles.css\r\n\r\nChanging the code to \r\n```\r\n<div class=\"flex flex-col ml-2\">\r\n</div>\r\n```\r\n\r\nit is added to the resulting styles.css again.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14011","RelatedDescription":"Open issue \"Angular class binding no longer working with 3.4.5+\" (#14011)"},{"Id":"2412004810","IsPullRequest":true,"CreatedAt":"2024-07-16T20:55:13","Actor":"thecrypticace","Number":"14008","RawContent":null,"Title":"Allow variants to be overridden","State":"closed","Body":"You can now override built-in variants using the new `@variant` syntax. For example, to customize the `dark` variant to use a data attribute you can add something like this to your CSS:\r\n```css\r\n@variant dark (&:is([data-theme='dark'] *));\r\n```\r\n\r\n\r\nWhich will, given the utility `dark:text-white`, generate the following CSS:\r\n```css\r\n.dark\\\\:text-white:is([data-theme=\"dark\"] *) {\r\n  color: var(--color-white, #fff);\r\n}\r\n```\r\n\r\nOverriding a variant with a new implementation preserves the original order of the CSS.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14008","RelatedDescription":"Closed or merged PR \"Allow variants to be overridden\" (#14008)"},{"Id":"2403567317","IsPullRequest":true,"CreatedAt":"2024-07-16T20:23:23","Actor":"RobinMalfait","Number":"13992","RawContent":null,"Title":"Add support for custom variants via CSS","State":"closed","Body":"This PR adds support for custom variants, both via CSS and JS.\n\nWe can define simple variants:\n\nVia CSS:\n```css\n@variant foo (.foo &);\n```\n\nOr via JS:\n```js\naddVariant('foo', '.foo &')\n```\n\nWe can define simple parallel variants:\n\nVia CSS:\n```css\n@variant hocus (&:focus, &:hover);\n```\n\nOr via JS:\n```js\naddVariant('hocus', ['&:focus', '&:hover'])\n```\n\nBut we can also define more complex variants where you might want to use media queries and selectors and nesting and anything you want.\n\nThis also introduces a placeholder value named `@slot` that you can use to mark a specific spot where existing utilities and/or variants will be injected.\n\nVia CSS:\n```css\n@variant strict-hover {\n  @media (hover: hover) {\n    &:hover {\n      @slot;\n    }\n  }\n}\n```\n\nOr via JS:\n```js\naddVariant('strict-hover', {\n  '@media (hover: hover)': {\n    '&:hover': '@slot',\n  }\n})\n```\n\n<!--\n\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13992","RelatedDescription":"Closed or merged PR \"Add support for custom variants via CSS\" (#13992)"},{"Id":"2410968432","IsPullRequest":false,"CreatedAt":"2024-07-16T15:34:04","Actor":"ledermann","Number":"14005","RawContent":null,"Title":"Slim template regression with v3.4.5","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.5\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss-cli 8.4.39 (but IMHO not relevant here)\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.9.0\r\n\r\n**What browser are you using?**\r\n\r\nNot relevant\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS (but not relevant)\r\n\r\n**Reproduction URL**\r\n\r\nBecause the bug belongs to Pug or slim, `play.tailwindcss.com` cannot be used to build an example. I will send a PR to fix, please don't close this issue.\r\n\r\n\r\n**Describe your issue**\r\n\r\nAfter upgrading my Rails application (using Slim templates) to Tailwind CSS [v3.4.5](https://github.com/tailwindlabs/tailwindcss/releases/tag/v3.4.5), I found a regression that some classes are not generated anymore. Example:\r\n\r\n```slim\r\n.bg-green-300.2xl:bg-red-300\r\n  '(Look mom, no closing tag!)\r\n```\r\n\r\nThe class `2xl:bg-red-300` is missing. It seems this happens because #13959 uses an invalid number check.\r\n\r\nStay tuned, I'm working on a PR to fix this.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14005","RelatedDescription":"Closed issue \"Slim template regression with v3.4.5\" (#14005)"},{"Id":"2411004429","IsPullRequest":true,"CreatedAt":"2024-07-16T13:34:21","Actor":"ledermann","Number":"14006","RawContent":null,"Title":"Fix extracting utilities from slim/pug templates","State":"closed","Body":"This pull request addresses an issue with extracting utility classes from slim/pug templates. Specifically, it corrects the handling of segments starting with a number to avoid the loss of relevant class names.\r\n\r\nThis fixes a regression (described in #14005) of yesterday's release `v3.4.5`.\r\n\r\nIt uses `Number()` instead of `parseInt()` to check whether a string is a number. This is better because:\r\n\r\n```js\r\nconst segment = \"2xl:bg-red-500\"\r\nparseInt(segment) => 2\r\nNumber(segment) => NaN\r\n```\r\n\r\nI've added a test to ensure my change works as expected.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14006","RelatedDescription":"Closed or merged PR \"Fix extracting utilities from slim/pug templates\" (#14006)"},{"Id":"2406483156","IsPullRequest":true,"CreatedAt":"2024-07-13T00:48:08","Actor":"adamwathan","Number":"13997","RawContent":null,"Title":"Always generate -webkit-backdrop-filter property","State":"closed","Body":"This PR updates all of the `backdrop-*` utilities to always include the `-webkit-backdrop-filter` vendor prefixed property so that Tailwind isn't completely dependent on autoprefixer or Lightning CSS to produce these styles. We used to do this for `-webkit-appearance: none` for the same reason until browser support for the unprefixed property was solid.\r\n\r\nSafari didn't add support for unprefixed `backdrop-filter` until Safari 18 (which isn't out yet at the time of this PR), so I think it makes sense to just bake this in. We do this in the v4 engine already which is targets more modern browsers than v3, so I think it makes sense to do in v3 as well:\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/utilities.ts#L3262\r\n\r\nHere's an example of where this bit someone in an important situation:\r\n\r\nhttps://x.com/impatienceisav1/status/1811837511544803416","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13997","RelatedDescription":"Closed or merged PR \"Always generate -webkit-backdrop-filter property\" (#13997)"},{"Id":"2405811673","IsPullRequest":true,"CreatedAt":"2024-07-12T15:00:23","Actor":"RobinMalfait","Number":"13995","RawContent":null,"Title":"Implement `not-*` variant with `@media`, `@supports` and `@container` variants","State":"open","Body":"The `not-*` variant worked with other variants that only included selectors, however some variants where only `@media`, `@supports`, and `@container` is used, the `not-*` variant would not work.\n\nThis PR solves that by inverting the query using the `not` keyword.\n\nThis allows us to use `not-print:flex` which compiles to:\n\n```css\n@media not print {\n  .not-print\\:flex {\n    display: flex;\n  }\n}\n```\n<!--\n\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13995","RelatedDescription":"Open PR \"Implement `not-*` variant with `@media`, `@supports` and `@container` variants\" (#13995)"},{"Id":"2401981062","IsPullRequest":false,"CreatedAt":"2024-07-11T18:06:03","Actor":"creeper-0910","Number":"13987","RawContent":null,"Title":"Differences occur in the rendering of text and images between the mobile version of Firefox and the mobile version of Chrome.","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nautoprefixer 10.4.19, postcss 8.4.39, typescript 5.2.2, vite 5.3.1\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.14.0\r\n\r\n**What browser are you using?**\r\n\r\nFirefox, Chrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows, Android\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/o-kalan-project/website-test\r\nhttps://o-kalan-project.github.io/website-test/\r\n\r\n**Describe your issue**\r\n\r\nDifferences occur in the rendering of text and images between the mobile version of Firefox and the mobile version of Chrome.\r\nSee attached image for details.\r\n![Screenshot_2024-07-11-03-28-16-28_fd7367fd0afc7e864f00091a00b3d0b0](https://github.com/tailwindlabs/tailwindcss/assets/56744841/b0a17d8a-b391-4910-95b5-d3f534799455)\r\n![Screenshot_2024-07-11-01-52-12-77_40deb401b9ffe8e1df2f1cc5ba480b12](https://github.com/tailwindlabs/tailwindcss/assets/56744841/23961b82-42b8-46ae-8122-14a1c56e67f3)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13987","RelatedDescription":"Closed issue \"Differences occur in the rendering of text and images between the mobile version of Firefox and the mobile version of Chrome.\" (#13987)"},{"Id":"2401045712","IsPullRequest":true,"CreatedAt":"2024-07-11T13:47:26","Actor":"adamwathan","Number":"13982","RawContent":null,"Title":"Add support for basic `addVariant` plugins with new `@plugin` directive","State":"closed","Body":"This PR adds support for a new `@plugin` directive as a first step towards reintroducing compatibility with v3 plugins:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n@plugin \"my-plugin\";\r\n```\r\n\r\nThis PR only introduces support for the `addVariant` API for now, with support for the other plugin APIs planned for separate PRs.\r\n\r\nJust like v3, plugins are JS files that look like this:\r\n\r\n```js\r\n// my-plugin.js\r\nmodule.exports = function ({ addVariant }) {\r\n  addVariant('hocus', ['&:hover', '&:focus'])\r\n}\r\n```\r\n\r\nThis PR doesn't reintroduce the `tailwindcss/plugin` export yet that you can use to wrap plugins that support configuration options, but planning to reintroduce that as well to ensure old plugins continue to work.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13982","RelatedDescription":"Closed or merged PR \"Add support for basic `addVariant` plugins with new `@plugin` directive\" (#13982)"},{"Id":"2401609841","IsPullRequest":false,"CreatedAt":"2024-07-10T20:28:40","Actor":"jwalkerinterpres","Number":"13984","RawContent":null,"Title":"For Some Odd Reason `max-w-lg` (Only!) Reverts to Tailwind Default","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.3\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss:  8.4.38\r\nvite: 5.0.3\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv21.2.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/j1hGAbY7f1\r\n\r\nJust inspect the div it generates and you will see:\r\n<img width=\"167\" alt=\"image\" src=\"https://github.com/tailwindlabs/tailwindcss/assets/152227747/6495f5b7-41bd-45b3-a63b-f47e6ea79328\">\r\n\r\nAlso, a quick side note: if you're going to require that people provide repro, why not link to the reproduction tool you want them to use?  https://play.tailwindcss.com/ seems like it's expressly designed for this purpose, so why not add a link to it in this template (in the text that says that a repro is required)?\r\n\r\n**Describe your issue**\r\n\r\nI have Tailwind on a production site, and it's awesome.  Everything works perfectly, as expected ... or at least it did until I saw this today:\r\n<img width=\"715\" alt=\"image\" src=\"https://github.com/tailwindlabs/tailwindcss/assets/152227747/873d7b29-7ea0-492d-a195-0363dbb629c7\">\r\n\r\nWhat you want to focus on is that the element in question has two classes: `min-w-lg max-w-lg`.  And I've defined my own custom `lg` of `20px` in tailwind.config.js:\r\n\r\n      spacing: {\r\n         // ....\r\n        lg: '20px',\r\n        // ....\r\n      }\r\n\r\n`min-w-lg` works exactly as expected, rendering a style of `min-width: 20px;`.  But `max-w-lg` ... despite using literally the same `lg` ... is instead rendering the default Tailwind style of `max-width: 32rem;`.\r\n\r\nI'm far from a Tailwind expert, but if `foo-lg` gives me `20px`, `bar-lg` should also give me `20px`, regardless of what foo and bar are (well, as long as they are spacing properties).  As I understand it it, it should be impossible for `min-w-lg` to result in a different number of pixels vs. `max-w-lg` ... but it does.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13984","RelatedDescription":"Closed issue \"For Some Odd Reason `max-w-lg` (Only!) Reverts to Tailwind Default\" (#13984)"},{"Id":"2401319822","IsPullRequest":true,"CreatedAt":"2024-07-10T18:12:20","Actor":"syi0808","Number":"13983","RawContent":null,"Title":"fix: add color resolver with opacity type to colors property","State":"closed","Body":"PR is for missing type in custom color property.\r\nand refactor some duplicated types. \r\n\r\nAfter this PR type is correctly like below screenshot.\r\n### Screenshot\r\n![Screenshot 2024-07-11 at 2 31 07â€¯AM](https://github.com/tailwindlabs/tailwindcss/assets/66503450/e0b3cd68-cc2a-43a0-be26-62778583a526)\r\n\r\nMore information linked issue.\r\nresolves: #13917","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13983","RelatedDescription":"Closed or merged PR \"fix: add color resolver with opacity type to colors property\" (#13983)"},{"Id":"2400916854","IsPullRequest":false,"CreatedAt":"2024-07-10T15:04:07","Actor":"vhoyer","Number":"13980","RawContent":null,"Title":"<utility>-<color>/<opacity> syntax doesn't work if your color is a css custom property (`var(--color)`) on tailwindcss@3.4.4","State":"closed","Body":"(sorry for the bad issue start, I accidently pressed enter before writing the issue)\r\n\r\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v3.4.4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: vite 4.5.3\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v22.2.0\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Firefox\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: majaroOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/vhoyer-bug-reproductions/tailwind-slash-opacity-css-var\r\n\r\n**Describe your issue**\r\n\r\nutility-color/opacity syntax doesn't work if your color is a css custom property (var(--color)) on tailwindcss@3.4.4\r\n\r\n```html\r\n  <div class=\"container mx-auto flex p-5 gap-5\">\r\n    <div class=\"size-40 border bg-primary\">\r\n      bg-primary\r\n    </div>\r\n\r\n    <div class=\"size-40 border bg-primary bg-opacity-50\">\r\n      bg-primary bg-opacity-50 (works with workaround)\r\n    </div>\r\n\r\n    <div class=\"size-40 border ring ring-primary\">\r\n      ring-primary\r\n    </div>\r\n\r\n    <div class=\"size-40 border ring ring-primary/50\">\r\n      ring-primary/50 (don't work, there is no workaround)\r\n    </div>\r\n\r\n    <div class=\"size-40 border text-primary\">\r\n      text-primary\r\n    </div>\r\n\r\n    <div class=\"size-40 border text-primary/50\">\r\n      text-primary/50 (don't work, there is no workaround)\r\n    </div>\r\n  </div>\r\n```\r\n\r\n```css\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n@layer base {\r\n  :root {\r\n    --color-primary: #845ec2;\r\n  }\r\n}\r\n```\r\n\r\n```ts\r\nimport type { Config } from 'tailwindcss'\r\n\r\nexport default {\r\n  content: [\r\n    'index.html',\r\n    'src/**/*',\r\n  ],\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        primary: 'var(--color-primary)',\r\n      },\r\n      backgroundColor: ({ theme }) => ({\r\n        // this is the workaround\r\n        primary: `color-mix(in oklab, ${theme('colors.primary')} calc(100% * var(--tw-bg-opacity, 1)), transparent)`,\r\n      }),\r\n\r\n    },\r\n  },\r\n  plugins: [],\r\n} satisfies Config\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13980","RelatedDescription":"Closed issue \"<utility>-<color>/<opacity> syntax doesn't work if your color is a css custom property (`var(--color)`) on tailwindcss@3.4.4\" (#13980)"},{"Id":"2400262156","IsPullRequest":true,"CreatedAt":"2024-07-10T13:44:28","Actor":"RobinMalfait","Number":"13978","RawContent":null,"Title":"Fix parsing body-less at-rule without terminating semicolon","State":"closed","Body":"This PR fixes an issue in the CSS parser where a body-less at-rule at the end of the file that is not terminated by a semicolon was missing and didn't parse correctly.\n\nE.g.:\n```css\n@tailwind utilities\n```\n\nWouldn't parse and the AST was empty. With this PR that's fixed.\n\nWhen you have a body-less at-rule nested inside a block and without terminating semicolon that worked already as expected:\n\nE.g.:\n```css\n@layer utilities {\n  @tailwind utilities\n}\n```\n<!--\n\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13978","RelatedDescription":"Closed or merged PR \"Fix parsing body-less at-rule without terminating semicolon\" (#13978)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-07-25T03:30:21.4911413Z","RunDurationInMilliseconds":399}