{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2238764988","IsPullRequest":false,"CreatedAt":"2024-04-11T23:50:23","Actor":"traderift","Number":"13508","RawContent":null,"Title":"Talwind 4 alpha firefox space-x issues","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n^4.0.0-alpha.13\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nsveltekit5 \r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v18\r\n\r\n**What browser are you using?**\r\n\r\nFirefox\r\n\r\n**What operating system are you using?**\r\n\r\nmacOs\r\n\r\n**Reproduction URL**\r\n\r\nWhen you add space-x-any or space--y whatever between elements it doesn't give spacing in firefox\r\n\r\n**Describe your issue**\r\n\r\nDescribe the problem you're seeing, any important steps to reproduce and what behavior you expect instead.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13508","RelatedDescription":"Closed issue \"Talwind 4 alpha firefox space-x issues\" (#13508)"},{"Id":"2238726240","IsPullRequest":true,"CreatedAt":"2024-04-11T22:38:45","Actor":"RobinMalfait","Number":"13507","RawContent":null,"Title":"Improve sorting candidates containing numbers","State":"open","Body":"This PR adds a custom `compare` function that compares two strings. However, once a number is reached the numbers are compared as actual numbers instead of their string representation.\r\n\r\nBefore this change, `p-1 p-2 p-10 p-20` would be sorted as `p-1 p-10 p-2 p-20`. After this change, the order is `p-1 p-2 p-10 p-20`.\r\n\r\nThis makes the suggestions in the vscode extension more logical.\r\n\r\nThe implementation compares two strings, and as long as the strings don't contain any numbers, it compares them as strings. This way we don't pay a performance penalty for comparing strings that don't contain numbers.\r\n\r\nTesting this change on the `tailwindcss.com` codebase where we have to store `~3200` unique classes the time spend on sorting the classes went from `~2.35ms` to ~~`~3.29ms`~~`~3.10ms`. This means that there is about a ~~`~1ms`~~`~0.75ms` performance penalty for sorting this.\r\n\r\nAnother thing we could have done is to compare using the `localeCompare` method:\r\n\r\n```ts\r\nfunction compare(a, b) {\r\n  return a.localeCompare(b, undefined, { numeric: true });\r\n}\r\n```\r\n\r\nHowever, this is an order of magnitude slower than the current implementation, and sorting takes around `~30ms` instead.\r\n\r\n---\r\n\r\nOutstanding questions:\r\n\r\n1. We could _only_ do this for the VS Code extension and Prettier plugin because then we wouldn't have to pay the performance penalty of ~~`~1ms`~~`~0.75ms`. This however means that the order in the extension or the Prettier plugin would be different compared to the order in the generated CSS. Should we only do it there or everywhere and pay the ~~`~1ms`~~`~0.75ms` penalty in favor of nicer consistency?\r\n\r\n\r\n<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13507","RelatedDescription":"Open PR \"Improve sorting candidates containing numbers\" (#13507)"},{"Id":"2237421510","IsPullRequest":true,"CreatedAt":"2024-04-11T10:44:44","Actor":"adamwathan","Number":"13500","RawContent":null,"Title":"Declare character code constants per file","State":"closed","Body":"This PR effectively reverts https://github.com/tailwindlabs/tailwindcss/pull/13497 but preserves the naming improvements that makes the name of each constant consistent between files.\r\n\r\nI noticed when benchmarking `segment` that objects access like `Token.OPEN_CURLY` made the function 25x slower (!) so we should at a minimum import all of the character codes directly instead of using `import * as Token from ...`.\r\n\r\nI feel like since these aren't application-specific constants there's no harm in just redeclaring them in each file anyways â€” `BACKSLASH` is going to be `0x5c` until the end of time, there's no risk that we have to update that value and now have to update it in more than one place. This also reduces the number of dependencies between files which is nice if we ever wanted to publish anything here as a separate package for any reason.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13500","RelatedDescription":"Closed or merged PR \"Declare character code constants per file\" (#13500)"},{"Id":"2236524161","IsPullRequest":true,"CreatedAt":"2024-04-10T22:29:55","Actor":"RobinMalfait","Number":"13497","RawContent":null,"Title":"Colocate charcode tokens","State":"closed","Body":"This PR moves all `charCode` constants in a shared tokens file. This allows us to remove hardcoded magic numbers (and their associated comments) from the code.\r\n\r\nThis is some cleanup as a continuation from 2 separate PRs that used constant tokens in their own files.\r\n\r\nNote: when running a build, all the constants are inlined, so there is not performance penalty for this change.\r\n\r\n<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13497","RelatedDescription":"Closed or merged PR \"Colocate charcode tokens\" (#13497)"},{"Id":"2236489547","IsPullRequest":true,"CreatedAt":"2024-04-10T22:17:11","Actor":"RobinMalfait","Number":"13496","RawContent":null,"Title":"Fix typo \"envionment\" -> \"environment\"","State":"closed","Body":"Very small PR, but this fixes a typo from \"envionment\" to \"environment\".\n<!--\n\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13496","RelatedDescription":"Closed or merged PR \"Fix typo \"envionment\" -> \"environment\"\" (#13496)"},{"Id":"2236190064","IsPullRequest":false,"CreatedAt":"2024-04-10T18:48:56","Actor":"JeevaRamu0104","Number":"13495","RawContent":null,"Title":"Issue on passing arbitrary values","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.0.0\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nrescript : 10.1.2 webpack: 5.3.2\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v12.0.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\n macOS\r\n\r\n\r\n\r\n**Describe your issue**\r\n\r\n```\r\nlet getUIConfigs = (\r\n  ~sidebar=\"[#dc2626]\",\r\n  (),\r\n) => {\r\n  sidebar: {\r\n    backgroundColor: {\r\n      primaryNormal: `bg-${sidebar}`,\r\n    },\r\n  },\r\n}\r\n```\r\nIn the above config if I pass sidebar as bg-[#dc2626] it is working as expected but if I pass only color code [#dc2626] its not working and tailwind is also not generating the color code #dc2626","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13495","RelatedDescription":"Closed issue \"Issue on passing arbitrary values\" (#13495)"},{"Id":"2235077954","IsPullRequest":false,"CreatedAt":"2024-04-10T08:50:58","Actor":"Oskar-Nilsen-Roos","Number":"13492","RawContent":null,"Title":"Colon separated class bindings in Vue does not generate the expected class","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.3\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n--\r\n\r\n**What version of Node.js are you using?**\r\n\r\n--\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/JBhjflrJ2x\r\n\r\n**Describe your issue**\r\n\r\nUsing a [Vue class binding](https://vuejs.org/guide/essentials/class-and-style#binding-to-objects) like so:\r\n```HTML\r\n<div :class=\"{ invisible: hideClose }\">\r\n</div>\r\n```\r\n\r\nWill result in the following minified Javascript when built:\r\n```Javascript\r\n{class:l({invisible:e.hideClose})}\r\n```\r\n\r\nAny class not surrounded by double or single quotes, and separated by a colon on either side with a following value will not generate the expected tailwind class.\r\n\r\nExpected result:\r\nGenerated 'invisible' class.\r\n\r\nActual result:\r\nNo 'invisible' class generated.\r\n\r\nSimply surrounding the value in quotes would fix it in this case, however building the file will minify it away since it's not technically necessary.\r\n\r\nOnly current workaround I know of is not using a Vue class binding, and instead using a ternary operator or something similar, leaving you with quotes in the minified file:\r\n```HTML\r\n<div :class=\"[hideClose ? 'invisible' : '']\">\r\n</div>\r\n```\r\n\r\nGiving you:\r\n```Javascript\r\n{class:l([e.hideClose?\"invisible\":\"\"])}\r\n```\r\n\r\nThanks!","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13492","RelatedDescription":"Open issue \"Colon separated class bindings in Vue does not generate the expected class\" (#13492)"},{"Id":"2229856109","IsPullRequest":true,"CreatedAt":"2024-04-10T01:04:58","Actor":"barvian","Number":"13469","RawContent":null,"Title":"[v4] Switch default breakpoints to rem","State":"closed","Body":"This was seemingly considered/planned for v4 (mentioned by @adamwathan in https://github.com/tailwindlabs/tailwindcss/discussions/8378), but I didn't see it in the codebase. Feel free to delete this PR if plans changed! I used `rem` instead of `em` because the functionality seems to be the same, and it's consistent with the spacing and type scales.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13469","RelatedDescription":"Closed or merged PR \"[v4] Switch default breakpoints to rem\" (#13469)"},{"Id":"2234089587","IsPullRequest":true,"CreatedAt":"2024-04-09T18:55:54","Actor":"RobinMalfait","Number":"13487","RawContent":null,"Title":"4.0.0-alpha.14","State":"closed","Body":"This PR preps the `4.0.0-alpha.14` release.\n<!--\n\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13487","RelatedDescription":"Closed or merged PR \"4.0.0-alpha.14\" (#13487)"},{"Id":"2228527782","IsPullRequest":true,"CreatedAt":"2024-04-09T16:59:09","Actor":"adamwathan","Number":"13459","RawContent":null,"Title":"Don't accommodate hidden elements in space/divide","State":"closed","Body":"This PR changes the implementation of the `space-*` and `divide-*` utilities to use a different selector, and apply the \"between\" styling to the first/left element instead of the last/right element:\r\n\r\n```diff\r\n- .space-y-4 > :not([hidden]) ~ :not([hidden]) {\r\n+ .space-y-4 > :not(:last-child) {\r\n-   margin-top: 1rem;\r\n+   margin-bottom: 1rem;\r\n  }\r\n```\r\n\r\nThis is a small breaking change, specifically when the very last child of an element has the `hidden` attribute:\r\n\r\n```html\r\n<ul class=\"space-y-4\">\r\n  <li>One</li>\r\n  <li>Two</li>\r\n  <li>Three</li>\r\n  <li hidden>Hidden</li>\r\n</ul>\r\n```\r\n\r\nPrior to this PR, the \"Three\" element would have no space below it, but with this new implementation it does. I suspect this change will impact almost nobody though, because in all of the real-world scenarios I've explored, hidden elements are never the very last element. They are almost always the very first element, or first few elements, and in those situations this new implementation has the same behavior as the old implementation.\r\n\r\n## Motivation\r\n\r\nThe \"between\" styling that we do with `space-*` and `divide-*` is most commonly achieved in CSS with the \"lobotomized owl selector\", like this:\r\n\r\n```css\r\n.space-y-4 > * + * {\r\n  margin-top: 1rem;\r\n}\r\n```\r\n\r\nOur implementation in Tailwind though has always used selectors that look like this:\r\n\r\n```css\r\n.space-y-4 > :not([hidden]) ~ :not([hidden]) {\r\n  margin-top: 1rem;\r\n}\r\n```\r\n\r\nPretty much the only reason we did this was so that you could use these utilities with [`x-for` in Alpine.js](https://alpinejs.dev/directives/for)\r\n\r\n```html\r\n<ul class=\"space-y-4\" x-data=\"{ colors: ['Red', 'Orange', 'Yellow'] }\">\r\n  <template x-for=\"color in colors\">\r\n    <li x-text=\"color\"></li>\r\n  </template>\r\n</ul>\r\n```\r\n\r\nAlpine leaves that `<template>` tag in the DOM, which means the first `<li>` is actually the second child of the `<ul>`, and receives the \"between\" styling even when it shouldn't:\r\n\r\nhttps://play.tailwindcss.com/7q6MiKZnRg\r\n\r\nBy using the implementation we've used up until now, Alpine users could throw the `hidden` attribute on their `<template>` element and now the \"between\" styling would only show up where it's supposed to:\r\n\r\nhttps://play.tailwindcss.com/p6ZGpSw1zt\r\n\r\nThe problem is on pages with a lot of DOM nodes, the selector we use is _fucking_ slow ðŸ˜„\r\n\r\nhttps://twitter.com/cramforce/status/1774847095171862943\r\n\r\n![image](https://github.com/tailwindlabs/tailwindcss/assets/4323180/2e7c3f55-d475-41ef-9029-60102861d65b)\r\n\r\nIt's not just \"technically slow but you can't actually tell because it's still fast\" either â€” if you have a really big list or table or something it's very, very noticeable:\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/discussions/13445\r\n\r\nThe new implementation introduced in this PR is almost 2000x faster, getting things back down to \"feels as fast as any other normal selector\" speeds.\r\n\r\nOne nice benefit of the new implementation is that you don't need to use the `hidden` attribute on `template` tags anymore â€” the \"between\" styling just works as expected without it because the `template` tag is receiving a `margin-bottom` for example but the entire element is hidden so that margin isn't actually rendered in the browser anyways.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13459","RelatedDescription":"Closed or merged PR \"Don't accommodate hidden elements in space/divide\" (#13459)"},{"Id":"2232317369","IsPullRequest":true,"CreatedAt":"2024-04-09T15:37:56","Actor":"RobinMalfait","Number":"13478","RawContent":null,"Title":"Invert variant order application","State":"closed","Body":"This PR can be a breaking change, but it will make the order of variants more intuitive. Instead of applying the variants \"inside-out\", they will be applied \"left-to-right\".\r\n\r\nWhat is affected:\r\n\r\n- Utilities with multiple variants, where the order matters.\r\n\r\n  E.g.: In combination with pseudo elements:\r\n\r\n  - `before:hover:flex` â€” This means: \"when the before pseudo element is hovered, apply flex\". This doesn't work in CSS.\r\n  - `hover:before:flex` â€” This means: \"when the element is hovered, apply flex to the before pseudo element\".\r\n\r\n  E.g.: Variants that rely on another class in the selector. This will now change the order of the classes.\r\n\r\n  - `*:first:underline`\r\n    ```\r\n    *:first:underline\r\n      ^^^^^ first child `&:first-child`\r\n    ^       Child selector `& > *`\r\n    ```\r\n\r\n    - Previous behavior:  \"when the current element is the first child, add an underline to all its direct children\"\r\n      E.g.: `.foo:first-child > *`\r\n    - New behavior: \"add an underline to the first child of the current element\"\r\n      E.g.: `.foo > *:first-child`\r\n\r\nWhat's not affected:\r\n\r\n- Utilities used without variants. E.g.: `flex`\r\n- Utilities used with a single variant. E.g.: `hover:flex`\r\n- Utilities used with multiple variants, but where the order doesn't matter. E.g.: `hover:focus:flex`\r\n\r\n<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13478","RelatedDescription":"Closed or merged PR \"Invert variant order application\" (#13478)"},{"Id":"2232890193","IsPullRequest":false,"CreatedAt":"2024-04-09T09:34:25","Actor":"Simon-He95","Number":"13479","RawContent":null,"Title":"feat: text-shadow","State":"closed","Body":"Is there any plan to add the use of text-shadow?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13479","RelatedDescription":"Closed issue \"feat: text-shadow\" (#13479)"},{"Id":"2233002347","IsPullRequest":true,"CreatedAt":"2024-04-09T09:32:18","Actor":"Fariba-shamseh","Number":"13480","RawContent":null,"Title":"Update README.md","State":"closed","Body":"updated conti to contiton\r\n\r\n<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13480","RelatedDescription":"Closed or merged PR \"Update README.md\" (#13480)"},{"Id":"2233008427","IsPullRequest":true,"CreatedAt":"2024-04-09T09:31:11","Actor":"Fariba-shamseh","Number":"13481","RawContent":null,"Title":"change nnn","State":"closed","Body":"change to coimnonnnn\r\n\r\n<!--\r\nhi iam learnin\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13481","RelatedDescription":"Closed or merged PR \"change nnn\" (#13481)"},{"Id":"2230852581","IsPullRequest":false,"CreatedAt":"2024-04-08T23:08:28","Actor":"brandonmcconnell","Number":"13475","RawContent":null,"Title":"Vendor prefix not being applied for `backdrop-filter`, using CLI tool","State":"closed","Body":"## What version of Tailwind CSS are you using?\r\n\r\nv3.4.3\r\n\r\n## What browser are you using?\r\n\r\nChrome v123.0.6312.107 (Official Build) (arm64)\r\nSafari v17.4.1 (19618.1.15.11.14)\r\n\r\n## What operating system are you using?\r\n\r\nmacOS Sonoma v14.4.1 (23E224)\r\n\r\n## Reproduction URL\r\n\r\nhttps://play.tailwindcss.com/gO656Xsgjh\r\n\r\n## Describe your issue\r\n\r\nThe [documentation states](https://tailwindcss.com/docs/browser-support#vendor-prefixes) that \"If youâ€™re using the Tailwind CLI tool, vendor prefixes like this will be added automatically.\"\r\n\r\nHowever, in the case of `backdrop-filter`, the needed `webkit` filter does not appear to get applied, preventing Safari from blurring the backdrop.\r\n\r\n| Chrome | Safari |\r\n|--------|--------|\r\n| ![](https://github.com/tailwindlabs/tailwindcss/assets/5913254/087ab04c-4582-4b9e-ab76-d32ec19155cc) | ![](https://github.com/tailwindlabs/tailwindcss/assets/5913254/2dd56697-36c1-4ce6-a4ca-5780b2d45541) | \r\n\r\nIn this example below, I add the vendor-prefixed style, and you can see the blur take effect:\r\nhttps://play.tailwindcss.com/6KUJEBtoue\r\n\r\n![](https://github.com/tailwindlabs/tailwindcss/assets/5913254/694af0ce-4bb9-401b-8aa7-c07246be56be)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13475","RelatedDescription":"Closed issue \"Vendor prefix not being applied for `backdrop-filter`, using CLI tool\" (#13475)"},{"Id":"2224323724","IsPullRequest":false,"CreatedAt":"2024-04-08T22:10:10","Actor":"Brian-Pob","Number":"13441","RawContent":null,"Title":"[v4] Styles not being generated on project build","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n## Environment\r\n\r\n```\r\nAstro                    v4.5.15\r\nNode                     v18.17.1\r\nSystem                   macOS (arm64)\r\nPackage Manager          bun\r\nOutput                   static\r\nAdapter                  none\r\nIntegrations             @astrojs/svelte\r\n\r\ntailwindcss             v4.0.0-alpha.11\r\n@tailwindcss/vite       v4.0.0-alpha.11\r\n```\r\nCan also reproduce the issue with using npm instead of bun.\r\n\r\n**Reproduction URL**\r\n\r\nRepo: https://github.com/Brian-Pob/tailwind-v4-vite/tree/alpha-11-bug\r\n\r\nVercel deploy preview: https://tailwind-v4-vite-git-alpha-11-bug-brian-pobletes-projects.vercel.app/?_vercel_share=HBCiq51fIy1xjh2hdYtOnZrineQnVvSn\r\n\r\nVercel working deploy: https://tailwind-v4-vite.vercel.app/\r\n\r\n**Describe your issue**\r\n\r\nOutcome\r\n\r\nRunning `bun run build` does not generate Tailwind styles. The build process completes successfully but the styles are not applied to the output.\r\n\r\n![alpha 11 bug](https://github.com/Brian-Pob/tailwind-v4-vite/raw/alpha-11-bug/alpha-11-bug.png)\r\n\r\nExpected outcome\r\n\r\nRunning `bun run build` should generate Tailwind styles and apply them to the output.\r\n\r\nUsing Tailwind `4.0.0-alpha.10` with same versions for every other package produces the expected outcome.\r\n\r\n## Steps to Reproduce\r\n1. Clone this branch of the repository.\r\n2. Ensure Tailwind version is `v4.0.0-alpha.11`. Same for `@tailwindcss/vite`.\r\n3. Run `bun install`.\r\n4. Run `bun run build` and `bun run preview`.\r\n5. Open the preview URL in the browser.\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13441","RelatedDescription":"Closed issue \"[v4] Styles not being generated on project build\" (#13441)"},{"Id":"2227992881","IsPullRequest":true,"CreatedAt":"2024-04-08T22:10:09","Actor":"RobinMalfait","Number":"13457","RawContent":null,"Title":"Ensure deterministic SSR builds in `@tailwindcss/vite`","State":"closed","Body":"This PR fixes an issue where running `astro build` doesn't generate the correct CSS when using `@tailwindcss/vite`. This issue only seems to happen when running a build, and not when running in `dev` mode.\n\nTo fix this, we apply the same code (`waitForRequestsIdle`) as we do in the `apply: \"server\"` step.\n\nAdding this to the `apply: \"build\"` step as well does generate the correct result.\n\nWhile this does fix the issue, I'm not 100% convinced that this is the correct solution /cc @thecrypticace.\n\nFixes: #13441\n\n<!--\n\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13457","RelatedDescription":"Closed or merged PR \"Ensure deterministic SSR builds in `@tailwindcss/vite`\" (#13457)"},{"Id":"2230450898","IsPullRequest":false,"CreatedAt":"2024-04-08T07:19:28","Actor":"brandonmcconnell","Number":"13473","RawContent":null,"Title":"Breaking changes in plugins potentially caused by parser changes","State":"open","Body":"## What version of Tailwind CSS are you using?\r\n\r\nv3.4.3\r\n\r\n## What browser are you using?\r\n\r\nChrome v123.0.6312.107 (Official Build) (arm64)\r\n\r\n## What operating system are you using?\r\n\r\nmacOS Sonoma v14.4.1 (23E224)\r\n\r\n## Reproduction URL\r\n\r\n* for MultiTool for Tailwind CSS: https://play.tailwindcss.com/T6ELlblWLw\r\n* for JS Tool for Tailwind CSS: https://play.tailwindcss.com/ZID1xrVAra\r\n\r\n## Describe your issue\r\n\r\nI was auditing some of the plugins in my growing collection of plugins I've developed for the Tailwind CSS community this past week, and a couple of them appear to now break due to what I perceive to be changes in the way the parser handles arbitrary values in plugins.\r\n\r\nAffected plugins:\r\n\r\n### 1. MultiTool for Tailwind CSS ([github](https://github.com/brandonmcconnell/tailwindcss-multitool) | [npm](https://www.npmjs.com/package/tailwindcss-multitool))\r\n\r\nMy MultiTool for Tailwind CSS plugin breaks when it contains a string including the `:` symbol, likely due to the parser terminating/splitting variants when it encounters the `:` symbol.\r\n\r\nI've done some testing, and this doesn't appear to be something my plugin can account for internally. If you look at the reproduction URL linked above ([also here](https://play.tailwindcss.com/T6ELlblWLw)), the first two lines receive the expected styles, but the last breaks entirely if it contains that character.\r\n\r\nThe problematic instances (those that contain `:`) don't appear to trigger the plugin and are likely seen as erroneous since, assuming my guesses here are correct, a usage like `multi-[underline;hover:font-bold]` would be split into `:multi-[underline;hover` and `font-bold]`.\r\n\r\nWith some slight tweaking to the parser, values could whitelist any instances of `:` within brackets.\r\n* current: `'a:b:[c:d]:e'` âžž `['a', 'b', '[c', 'd]', 'e']`\r\n* desired: `'a:b:[c:d]:e'` âžž `['a', 'b', '[c:d]', 'e']`\r\n\r\nIt's also important to note here that this was not always the case, or at least I am convinced it is not, as I include this example in the plugin's README, which worked when I tested it before including it in the README:\r\n\r\n```html\r\n<div class=\"sm:[&>div]:hover:active:multi-[font-bold;text-[red];[font-family:'Open_Sans',sans-serif]]\">\r\n  When hovered, this text will appear bold, red, and in Open Sans font.\r\n</div>\r\n```\r\n\r\nEven a more `:`-riddled nested variant should be perfectly fine:\r\n\r\n```html\r\n<div class=\"hover:multi-[[&:is(*)]:focus:underline;[--some-var:{whatever}]]\">â€¦</div>\r\n```\r\n\r\n### 2. JS Tool for Tailwind CSS ([github](https://github.com/brandonmcconnell/tailwindcss-jstool) | [npm](https://www.npmjs.com/package/tailwindcss-jstool))\r\n\r\nWithout rehashing many of the same points I did above, if you take a look at this Tailwind Play example linked above ([also here](https://play.tailwindcss.com/ZID1xrVAra)), you'll see many examples I use to showcase how JS can expose specific values to Tailwind CSS using plugins. Admittedly, I seldom use this one, but it is nice sometimes when I need to break glass and expose JSON values to CSS while testing. I could expose them as CSS variables alternatively, but it's helpful to have some means to directly interface with raw data like this, even if only used on occasion.\r\n\r\nHere are those same examples from the linked Tailwind Play example, all of which previously worked:\r\n```html\r\n<div class=\"before:js-[content-['fontSize.2xl_===_#{theme('fontSize.2xl')}']]\"></div>\r\n<div class=\"before:js-[content-['the_registered_config_keys_are_#{Object.keys(config()).join(',_')}']]\"></div>\r\n<div class=\"before:js-[content-['A_random_digit_is_#{randomDigit()}']]\"></div>\r\n<div class=\"js-[[--random-color:#{randomColor()}]] js-[[--random-color-2:#{randomColor()}]] text-[--random-color] font-semibold [text-shadow:1px_2px_0_var(--random-color-2)]\">Random_colors_ftw!</div>\r\n<div class=\"js-[[--random-length:#{randomRange(16,22)}px]] text-[length:--random-length]\">Random sizes too ðŸ¤¯</div>\r\n```\r\n\r\n---\r\n\r\nIn both of these examples, I'm primarily addressing how these regressions limit plugin authors from achieving some of the powerful tasks plugins were formerly able to perform.\r\n\r\nBoth of these plugins may seem to operate unconventionally, but that's why they're plugins. This is part of what excites a community like this oneâ€”testing the limits of a technology like Tailwind CSS, finding various ways it can be extended to achieve different tasks, and ultimately building within those limits to make someone else's work easier.\r\n\r\nI've heard from real users of my plugins how my tools have improved their experience building with Tailwind CSS, and I would hate to discontinue some of them due to breaking changes.\r\n\r\nEven this past week, I've been prepping content for a blog post or videoâ€”perhaps bothâ€”on the powerful ways Tailwind CSS plugins supercharge the developer experience, demonstrating examples and providing a crash course on how to build effective plugins.\r\n\r\n\"The power of JavaScript in the simple and familiar form factor of Tailwind CSS utilities.\" (still bikeshedding the name)\r\n\r\nBecause many people primarily associate Tailwind CSS with CSS (for obvious reasons), they miss that with plugins, we can interject all sorts of sophisticated and useful functionality into our utilities. Plugins are essentially middleware that allow us to bridge the parser/compiler to our frontend in dynamic and performant ways, leveraging build-time processing.\r\n\r\nMany things that are not yet possible in pure CSS **_are_** possible with Tailwind CSS because of this JS processing, so it acts more like mixins and functions than just variable interpolation.\r\n\r\nThat said, it would be helpful to use examples like these to demonstrate the flexibility of Tailwind CSS plugins. Thanks!","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13473","RelatedDescription":"Open issue \"Breaking changes in plugins potentially caused by parser changes\" (#13473)"},{"Id":"2229853823","IsPullRequest":true,"CreatedAt":"2024-04-07T17:05:56","Actor":"barvian","Number":"13468","RawContent":null,"Title":"Switch breakpoints to rem","State":"closed","Body":"This was seemingly planned for v4 (mentioned by @adamwathan in #8378), but I didn't see it in the codebase. Feel free to delete this PR if plans changed! I used `rem` instead of `em` because the functionality seems to be the same, and it's more consistent with the spacing and type scales.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13468","RelatedDescription":"Closed or merged PR \"Switch breakpoints to rem\" (#13468)"},{"Id":"2229804922","IsPullRequest":false,"CreatedAt":"2024-04-07T14:51:27","Actor":"herzaso","Number":"13465","RawContent":null,"Title":"group not working in conjunction to data selectors?","State":"open","Body":"Version 3.4.3\r\nReproduction URL: https://play.tailwindcss.com/5PGfLBp9gF\r\n(Move focus with TAB and notice that the background color doesn't change. If you remove either the `group-focus` or the `data` selector it does work)\r\n\r\nAm I doing something wrong?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13465","RelatedDescription":"Open issue \"group not working in conjunction to data selectors?\" (#13465)"},{"Id":"2228220250","IsPullRequest":false,"CreatedAt":"2024-04-05T15:05:26","Actor":"The-Code-Monkey","Number":"13458","RawContent":null,"Title":"[V4] - @keyframes not being hoisted into built css","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.13\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nTailwindcss/cli\r\n\r\n**What version of Node.js are you using?**\r\n\r\nNot using node using bun\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nMAC\r\n\r\n**Reproduction URL**\r\n\r\n[repoduction](https://codesandbox.io/p/devbox/trusting-black-rwpl6n?layout=%257B%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522rootPanelGroup%2522%253A%257B%2522direction%2522%253A%2522horizontal%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522id%2522%253A%2522ROOT_LAYOUT%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522clums4zgt00083b6iav5neh6g%2522%252C%2522sizes%2522%253A%255B70%252C30%255D%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522EDITOR%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522id%2522%253A%2522clums4zgt00033b6iszuw4zz0%2522%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522SHELLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522id%2522%253A%2522clums4zgt00063b6i2me8z3l6%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522DEVTOOLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522id%2522%253A%2522clums4zgt00073b6iisvv707h%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%252C%2522sizes%2522%253A%255B50%252C50%255D%257D%252C%2522tabbedPanels%2522%253A%257B%2522clums4zgt00033b6iszuw4zz0%2522%253A%257B%2522id%2522%253A%2522clums4zgt00033b6iszuw4zz0%2522%252C%2522tabs%2522%253A%255B%255D%257D%252C%2522clums4zgt00073b6iisvv707h%2522%253A%257B%2522id%2522%253A%2522clums4zgt00073b6iisvv707h%2522%252C%2522activeTabId%2522%253A%2522clums5g10001y3b6ixpz7muvr%2522%252C%2522tabs%2522%253A%255B%257B%2522type%2522%253A%2522UNASSIGNED_PORT%2522%252C%2522port%2522%253A5173%252C%2522id%2522%253A%2522clums5g10001y3b6ixpz7muvr%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522path%2522%253A%2522%252F%2522%257D%255D%257D%252C%2522clums4zgt00063b6i2me8z3l6%2522%253A%257B%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522clums4zgt00043b6in3qal21y%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522TASK_LOG%2522%252C%2522taskId%2522%253A%2522dev%2522%257D%252C%257B%2522id%2522%253A%2522clums4zgt00053b6ixr07cfg7%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522TERMINAL%2522%252C%2522shellId%2522%253A%2522clthehtu2004tdijpdg4g358j%2522%257D%255D%252C%2522id%2522%253A%2522clums4zgt00063b6i2me8z3l6%2522%252C%2522activeTabId%2522%253A%2522clums4zgt00043b6in3qal21y%2522%257D%257D%252C%2522showDevtools%2522%253Atrue%252C%2522showShells%2522%253Atrue%252C%2522showSidebar%2522%253Atrue%252C%2522sidebarPanelSize%2522%253A15%257D)\r\n\r\n**Describe your issue**\r\n\r\nThe keyframe value should be put into the css but it isnt being","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13458","RelatedDescription":"Closed issue \"[V4] - @keyframes not being hoisted into built css\" (#13458)"},{"Id":"2227174311","IsPullRequest":false,"CreatedAt":"2024-04-05T10:13:34","Actor":"mohammadhosseinmoradi","Number":"13453","RawContent":null,"Title":"Add group values to Tailwind CSS","State":"closed","Body":"Hi there,\r\n\r\nI hope this message finds you well. I've been thoroughly enjoying using the Tailwind CSS library for my projects, and I recently came across a couple of points I'd like to bring to your attention.\r\n\r\nTailwind utility classes sometimes is very verbose like this situation:\r\n\r\n```\r\n\"group-focus-within/text-field:text-xs\",\r\n\"[label.group:has(input:not(:placeholder-shown))_&]:text-xs\",\r\n\"group-focus-within/text-field:start-4\",\r\n\"[label.group:has(input:not(:placeholder-shown))_&]:start-4\",\r\n\"group-focus-within/text-field:top-0\",\r\n\"[label.group:has(input:not(:placeholder-shown))_&]:top-0\",\r\n```\r\n\r\nIt would be great if you add ability to group values something like below:\r\n\r\n```\r\n\"group-focus-within/text-field:text-xs_start-4_top-0\",\r\n\"[label.group:has(input:not(:placeholder-shown))_&]:text-xs_start-4_top-0\",\r\n```\r\n\r\nThank you for your continuous efforts in maintaining and improving the Tailwind CSS library. I appreciate your time and consideration.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13453","RelatedDescription":"Closed issue \"Add group values to Tailwind CSS\" (#13453)"},{"Id":"2226653179","IsPullRequest":false,"CreatedAt":"2024-04-05T01:22:45","Actor":"brandonmcconnell","Number":"13450","RawContent":null,"Title":"Shadow does not apply when size is instantiated on hover","State":"closed","Body":"### What version of Tailwind CSS are you using?\r\n\r\nv3.4.3\r\n\r\n### What browser are you using?\r\n\r\nChrome v123.0.6312.87 (Official Build) (arm64)\r\n\r\n### What operating system are you using?\r\n\r\nmacOS Sonoma v14.4\r\n\r\n### Reproduction URL\r\n\r\nhttps://play.tailwindcss.com/jngJ1mOTKS\r\n\r\n### Describe your issue\r\n\r\nChanging the size of a shadow does not reveal the shadow if its size is instantiated on hover. My workaround was to show the shadow by default without a variant and hide it when it's not being hovered using a `:not` pseudo selector.\r\n\r\nThis bug appears to be easily reproducible.\r\n\r\nI demonstrate the issue on this Loom as well:\r\nhttps://www.loom.com/share/585482a718584525a1f3fae5c1a1c4f9?sid=d329fa46-54b6-4811-aa76-93b3053249fa","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13450","RelatedDescription":"Closed issue \"Shadow does not apply when size is instantiated on hover\" (#13450)"},{"Id":"2223851212","IsPullRequest":false,"CreatedAt":"2024-04-04T22:01:38","Actor":"alexhtech","Number":"13438","RawContent":null,"Title":"[V4] Box Shadow Color doesn't work","State":"closed","Body":"\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: 4.0.0-alpha.11\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nnextjs@14\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v21.7.1\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/alexhtech/tailwindcss4-test\r\n\r\n**Describe your issue**\r\n\r\n`<div className=\"h-20 w-20 shadow-xl shadow-red-500\" />` - color isn't applied it tends to be `rgba(0,0,0, 0.1)`","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13438","RelatedDescription":"Closed issue \"[V4] Box Shadow Color doesn't work\" (#13438)"},{"Id":"2226180798","IsPullRequest":true,"CreatedAt":"2024-04-04T22:01:37","Actor":"adamwathan","Number":"13449","RawContent":null,"Title":"Don't read variables for shadow sizes","State":"closed","Body":"Resolves https://github.com/tailwindlabs/tailwindcss/issues/13438\r\n\r\nIn https://github.com/tailwindlabs/tailwindcss/pull/13177 we changed the way utility values are referenced in utility classes to use variables with fallbacks instead of raw values:\r\n\r\n```diff\r\n  .pt-4 {\r\n-   padding-top: 1rem;\r\n+   padding-top: var(--spacing-4, 1rem);\r\n  }\r\n```\r\n\r\nThis creates an issue with colored shadows, because colored shadows rely on being able to override the value of a sub-variable that is reference by the actual shadow variable created based on your theme configuration.\r\n\r\nSimplified but representative code:\r\n\r\n```css\r\n:root {\r\n  --shadow-sm: 0 1px 2px 0 var(--tw-shadow-color, black);\r\n}\r\n\r\n.shadow-sm {\r\n  box-shadow: var(--shadow-sm, 0 1px 2px 0 var(--tw-shadow-color, black));\r\n}\r\n\r\n.shadow-blue {\r\n  --tw-shadow-color: blue;\r\n}\r\n```\r\n\r\nThe problem here is that `var(--shadow-sm, ...)` will see that `--shadow-sm` is defined on `:root`, and use the computed value of that variable from `:root`, where `--tw-shadow-color` is yet to be defined, so the color falls back to `black` even when using the `shadow-blue` utility:\r\n\r\n```html\r\n<!-- Shadow is still black, not blue like you might expect -->\r\n<div class=\"shadow-sm shadow-blue\">\r\n  <!-- ... -->\r\n</div>\r\n```\r\n\r\nThis caught me by surprise personally as I expected CSS variables to be evaluated lazily but it seems like they are not. The only solution I've found here is to _not_ reference the `--shadow-sm` variable in the `.shadow-sm` class, to make sure the value of `--tw-shadow-color` on the current element is respected, rather than looking for the value of `--tw-shadow-color` where `--shadow-sm` is defined:\r\n\r\n```diff\r\n  :root {\r\n    --shadow-sm: 0 1px 2px 0 var(--tw-shadow-color, black);\r\n  }\r\n  \r\n  .shadow-sm {\r\n-   box-shadow: var(--shadow-sm, 0 1px 2px 0 var(--tw-shadow-color, black));\r\n+   box-shadow: 0 1px 2px 0 var(--tw-shadow-color, black);\r\n  }\r\n  \r\n  .shadow-blue {\r\n    --tw-shadow-color: blue;\r\n  }\r\n```\r\n\r\nThis is pretty unfortunate because now our box shadow utilities behave subtly differently than every other utility in the framework. I'm hoping we can find some trick to make these variables lazily evaluated, and [tweeted about it](https://twitter.com/adamwathan/status/1775937299919859961) in case someone else out there has any ideas.\r\n\r\nFor now though we should merge this to effectively selectively revert https://github.com/tailwindlabs/tailwindcss/pull/13177 for the affected utilities.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13449","RelatedDescription":"Closed or merged PR \"Don't read variables for shadow sizes\" (#13449)"},{"Id":"2225797897","IsPullRequest":true,"CreatedAt":"2024-04-04T15:43:02","Actor":"RobinMalfait","Number":"13448","RawContent":null,"Title":"Prepare next release: `4.0.0-alpha.12`","State":"closed","Body":"This PR prepares the release of `4.0.0-alpha.12`\r\n<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13448","RelatedDescription":"Closed or merged PR \"Prepare next release: `4.0.0-alpha.12`\" (#13448)"},{"Id":"2224831735","IsPullRequest":false,"CreatedAt":"2024-04-04T11:11:31","Actor":"2eron","Number":"13444","RawContent":null,"Title":"Tailwind classes not work in mfe remote module","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.3.3\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nnx 18.0.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv18.16.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome latest\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Describe your issue**\r\n\r\nMy front-end architecture is a host application and multiple remote modules, and the language is angular. Managed via nx mfe. Both the main application and the remote module use tailwindcss. The current problem is that the tailwindcss classes style does not take effect after the remote module is loaded through the main application.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13444","RelatedDescription":"Closed issue \"Tailwind classes not work in mfe remote module\" (#13444)"},{"Id":"2221980564","IsPullRequest":false,"CreatedAt":"2024-04-03T10:12:41","Actor":"jdlien","Number":"13435","RawContent":null,"Title":"In Firefox v124, some styles fail to apply due to missing fallback values for custom properties.","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.11\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n@tailwindcss/cli@next\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv21.7.1\r\n\r\n**What browser are you using?**\r\n\r\nFirefox Stable v124.0.2\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/jdlien/tailwindv4-missing-custom-props\r\n\r\n\r\n**Describe your issue**\r\n\r\nIn tailwindcss 4.0.0-alpha.11, several styles are not applied in current stable builds of Firefox (v124). The ones I've noticed thus far are:\r\n\r\n- space-x utilities\r\n- border utilities\r\n\r\nThis is because Firefox v124 [does not yet support the @property rule](https://caniuse.com/mdn-css_at-rules_property), and thus several CSS custom properties are left undefined.\r\n\r\nConsequently, styles like space-x-_ and border-_ are not applied in Firefox v124.\r\n\r\nThe properties are set by Tailwind v4 like using @property rule like:\r\n\r\n```css\r\n@property --tw-space-x-reverse {\r\n  syntax: \"<number>\";\r\n  inherits: false;\r\n  initial-value: 0;\r\n}\r\n```\r\n\r\nThis currently results in code like the following that uses the undefined custom props without a fallback value:\r\n\r\n```css\r\n.space-x-8 {\r\n  :where(& > :not([hidden]) ~ :not([hidden])) {\r\n    margin-inline-end: calc(var(--spacing-8, 2rem) * var(--tw-space-x-reverse));\r\n    margin-inline-start: calc(var(--spacing-8, 2rem) * calc(1 - var(--tw-space-x-reverse)));\r\n  }\r\n}\r\n```\r\n\r\nThe most straightforward solution is to add the appropriate fallback values to the custom properties where they are used, unless there are compelling reasons not to do this, e.g., for performance or safety. For example, the above code could be modified to:\r\n\r\n```css\r\n.space-x-8 {\r\n  :where(& > :not([hidden]) ~ :not([hidden])) {\r\n    margin-inline-end: calc(var(--spacing-8, 2rem) * var(--tw-space-x-reverse, 0));\r\n    margin-inline-start: calc(var(--spacing-8, 2rem) * calc(1 - var(--tw-space-x-reverse, 0)));\r\n  }\r\n}\r\n```\r\n\r\nSee also cases where the `--tw-border-style` is used. There should also be a fallback to `solid`:\r\n\r\nCurrent:\r\n\r\n```\r\n  .border {\r\n    border-style: var(--tw-border-style);\r\n    border-width: 1px;\r\n  }\r\n```\r\n\r\nSuggested:\r\n\r\n```\r\n  .border {\r\n    border-style: var(--tw-border-style, solid);\r\n    border-width: 1px;\r\n  }\r\n```\r\n\r\nThis demo can be viewed at:\r\nhttps://jdlien.com/tailwindv4-missing-custom-props/","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13435","RelatedDescription":"Closed issue \"In Firefox v124, some styles fail to apply due to missing fallback values for custom properties.\" (#13435)"},{"Id":"2221105609","IsPullRequest":false,"CreatedAt":"2024-04-02T20:10:44","Actor":"jagthedrummer","Number":"13433","RawContent":null,"Title":"3.4.2 contains a breaking change related to `@apply`","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.2\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss 8.4.38\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v20.11.1\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS, Linux\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/1igX3RZ4zc?size=540x720&file=css\r\n\r\n**Describe your issue**\r\n\r\nCSS like this works just fine in version 3.4.1:\r\n\r\n```css\r\n.button {\r\n  @apply rounded-md border border-gray-200 px-4 py-2;\r\n  @apply inline-flex items-center whitespace-nowrap;\r\n  &.button-smaller {\r\n    @apply px-3 py-1 text-xs;\r\n  }\r\n}\r\n\r\n.test-button {\r\n  @apply button;\r\n}\r\n```\r\n\r\nBut starting in 3.4.2 the build step throws this error:\r\n\r\n```\r\n/sourcePath:14:3: The `button` class cannot be used with `@apply` because `@apply`\r\n  does not currently support nested CSS. Rewrite the selector without nesting or\r\n  configure the `tailwindcss/nesting` plugin:\r\n  https://tailwindcss.com/docs/using-with-preprocessors#nesting\r\n```\r\n\r\nThe error still happens even with the `tailwindcss/nesting` plugin configured.\r\n\r\nIt looks like the new behavior was added here: https://github.com/tailwindlabs/tailwindcss/pull/13325\r\n\r\nIt's unexpected for a breaking change like this to come through on a `patch` level version bump.\r\n\r\nGiven that `tailwindcss/nesting` doesn't fix the issue, is there something else we should do to get past the failing build?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13433","RelatedDescription":"Closed issue \"3.4.2 contains a breaking change related to `@apply`\" (#13433)"},{"Id":"2220004717","IsPullRequest":false,"CreatedAt":"2024-04-02T09:48:50","Actor":"kiranaryal","Number":"13430","RawContent":null,"Title":"line clamp bug","State":"closed","Body":"![image](https://github.com/tailwindlabs/tailwindcss/assets/29688675/297da7be-4d7c-431b-8c22-e339006f0842)\r\n\r\nline-clamp-2\r\nafter 2 liness there is half line\r\n\r\nlaravel 10\r\ntailwind ^4\r\nchrome\r\n\r\n\r\nfor eg \r\ntruncate\r\n![Screenshot from 2024-04-02 15-22-53](https://github.com/tailwindlabs/tailwindcss/assets/29688675/7ce771f3-77e7-45c4-83b0-c05b6682f495)\r\n\r\nvs  line-clamp-1\r\n![Screenshot from 2024-04-02 15-24-16](https://github.com/tailwindlabs/tailwindcss/assets/29688675/ec269fab-9b4b-4cfe-ae90-05280f5a8751)\r\n\r\n\r\nsupposed to be same thing  right  line-clamp-1  and truncate\r\n\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13430","RelatedDescription":"Closed issue \"line clamp bug\" (#13430)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-04-12T03:30:19.8256193Z","RunDurationInMilliseconds":389}