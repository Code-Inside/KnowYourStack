{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2681316352","IsPullRequest":false,"CreatedAt":"2024-11-21T23:32:11","Actor":"zoltanszogyenyi","Number":"15075","RawContent":null,"Title":"[v4] v3 preflight styles option","State":"open","Body":"Currently switching from v3 to v4 clearly changes the layout and styles of the website because of the new preflight stuff.\r\n\r\nWhy not allow users to opt-in for two basic preflight styles (v3 or v4) and just recommend v4?\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0+\r\n\r\n**Describe your issue**\r\n\r\nButton styles, form styles, whatever that was previously set in v3 preflight no longer applies for v4 and you need to manually update the whole preflight styles and configuration to resolve let's say 90% of issues. I wouldn't just simply override v4 preflight with v3 preflight but I would add the possibility to keep v3 preflight and just recommend v4 preflight. ","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15075","RelatedDescription":"Open issue \"[v4] v3 preflight styles option\" (#15075)"},{"Id":"2681239768","IsPullRequest":false,"CreatedAt":"2024-11-21T22:53:51","Actor":"F-fengzi","Number":"15073","RawContent":null,"Title":"[v4] undocumented button style changes in `beta.1`","State":"open","Body":"What version of Tailwind CSS are you using?\r\n\r\nv4.0.0-beta.1\r\n\r\nWhat build tool (or framework if it abstracts the build tool) are you using?\r\n\r\nvite 5.4.11, @tailwindcss/vite 4.0.0-beta.1, svelte 5.2.7\r\n\r\nWhat version of Node.js are you using?\r\n\r\nv20.17.0\r\n\r\nWhat browser are you using?\r\n\r\nChrome 131\r\n\r\nWhat operating system are you using?\r\n\r\nWindows\r\n\r\nReproduction URL\r\n\r\nhttps://play.tailwindcss.com/onv0DKfoZj (it's really just an unstyled button)\r\n\r\nDescribe your issue\r\n\r\nKind of a follow-up to #14985, I noticed that my button styles broke after updating to this version. There doesn't seem to be a changelog tracking the changes from `alpha.36` to `beta.1`. Will we ever get one? I completely understand if it's not a priority, and I can probably figure the changes out 😅.\r\n\r\nWhat I noticed: probably a preflight change, buttons are now styled by default with a border and a background color, or perhaps more.\r\nYou can reproduce this by making an unstyled button and compare them between this version and a previous version.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15073","RelatedDescription":"Open issue \"[v4] undocumented button style changes in `beta.1`\" (#15073)"},{"Id":"2681110502","IsPullRequest":false,"CreatedAt":"2024-11-21T22:04:44","Actor":"aaronbushnell","Number":"15072","RawContent":null,"Title":"[v4] A `@utility` that includes a number is not processed/styled correctly","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-beta.1\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNext.js 15.0.3\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.12.2\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS, Windows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/aaronbushnell/sample-tailwind-project (A basic Next.js project setup using `npx create-next-app@latest`)\r\n\r\n**Describe your issue**\r\n\r\nWhen I create a new `@utility` it does not apply styling if the utility contains a number. For instance:\r\n\r\n```css\r\n/* This won't work */\r\n@utility h1 {\r\n  @apply text-4xl font-bold;\r\n}\r\n\r\n/* But this will */\r\n@utility hz {\r\n  @apply text-4xl font-bold;\r\n}\r\n```\r\n\r\n```jsx\r\nexport default function Home() {\r\n  return (\r\n    <div>\r\n      <h1 className=\"h1\">I don't work (class: h1)</h1>\r\n      <h1 className=\"hz\">I do work (class: hz)</h1>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nWhen I use `@utility h-1` I do see some of my changes, but the actual `<h1>` element has some peculiar line-height settings.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15072","RelatedDescription":"Open issue \"[v4] A `@utility` that includes a number is not processed/styled correctly\" (#15072)"},{"Id":"2680809826","IsPullRequest":true,"CreatedAt":"2024-11-21T20:29:48","Actor":"reinink","Number":"15071","RawContent":null,"Title":"Update codemod to restore border color on form elements","State":"open","Body":"This PR updates the upgrade codemod to also restore the border color on form elements, since the current `*` selector doesn't catch these elements since it has a lower specificity (`0,0,0`) than the form element styles in preflight (`0,0,1`).\r\n\r\nI considered putting this in the form reset CSS instead, but it's possible that someone might be okay with removing that reset from their project but still needs to the border color reset—basically if they're using the `border` class on all their buttons and form controls, and relying on the default border color in certain situations.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15071","RelatedDescription":"Open PR \"Update codemod to restore border color on form elements\" (#15071)"},{"Id":"2680428683","IsPullRequest":true,"CreatedAt":"2024-11-21T18:20:30","Actor":"thecrypticace","Number":"15070","RawContent":null,"Title":"Prepare v4.0.0-beta.1 release","State":"closed","Body":"<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15070","RelatedDescription":"Closed or merged PR \"Prepare v4.0.0-beta.1 release\" (#15070)"},{"Id":"2680201163","IsPullRequest":true,"CreatedAt":"2024-11-21T18:09:41","Actor":"thecrypticace","Number":"15069","RawContent":null,"Title":"Bring back some deprecated utilities","State":"closed","Body":"These utilities are deprecated (and were removed) but we're brining them back so they keep working:\r\n\r\n- `flex-grow-*`\r\n- `flex-shrink-*`\r\n- `decoration-slice`\r\n- `decoration-clone`\r\n- `overflow-ellipsis`","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15069","RelatedDescription":"Closed or merged PR \"Bring back some deprecated utilities\" (#15069)"},{"Id":"2680087278","IsPullRequest":true,"CreatedAt":"2024-11-21T18:06:58","Actor":"philipp-spiess","Number":"15067","RawContent":null,"Title":"Convert opacity keys to percentage values","State":"closed","Body":"This PR improves compatibility for named `opacity` theme values. One of the changes in v4 is that we use the CSS `color-mix()` function to apply opacity to colors. This, however, is limited to percentage values only:\r\n\r\n```css\r\ncolor: color-mix(in oklch, var(--color-red-500) 50%, transparent);\r\n/*                                              ^^^             */\r\n/*                          This needs to be a percentage value */\r\n```\r\n\r\nIn v3, however, it was common to specify custom opacity values as decimal numbers. That's also what we did in our default config:\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/6069a811871c58a9b202fbb3a6f13774c57278c0/stubs/config.full.js#L703-L725\r\n\r\nThis PR improves interop with these values by:\r\n\r\n1. Converting decimal numbers in the range of `[0, 1]` to their percentage value equivalent when using the interop layer.\r\n2. Adjusts the codemod that migrates `opacity` theme keys to Tailwind v4 theme variables to include the same conversion.\r\n3. Furthermore, due to the added support of named opacity modifers, we can also drop theme keys that would now be the default. For example the following config would not be necessary in v4 as the opacity modifier would accept the value `50` by default:\r\n    ```js\r\n    module.exports = {\r\n      theme: {\r\n        opacity: {\r\n          50: 0.5\r\n        }\r\n      }\r\n    }\r\n    ```\r\n\r\n## Test Plan\r\n\r\nAdded a new integration test for the codemod and a unit test for the interop layer. I also re-ran the codemod on the Commit template and it's now working as expected (left is v3, right is v4):\r\n\r\n<img width=\"2560\" alt=\"Screenshot 2024-11-21 at 17 25 32\" src=\"https://github.com/user-attachments/assets/f0c87243-ca80-4c39-ae5e-c1ab48fbe614\">\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15067","RelatedDescription":"Closed or merged PR \"Convert opacity keys to percentage values\" (#15067)"},{"Id":"2679806814","IsPullRequest":false,"CreatedAt":"2024-11-21T15:44:47","Actor":"b-meyer","Number":"15065","RawContent":null,"Title":"[v4] Modifiers are not working with custom utilities","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.36\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n@tailwindcss-cli\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.18.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nv4 - https://play.tailwindcss.com/5J8xPhUZ6g\r\nv3 - https://play.tailwindcss.com/jEOLXrPd2M\r\n\r\n**Describe your issue**\r\n\r\nSome if not all modifiers are not working with custom utilities added to the any tailwind @layer. This is working as expected in v3. And it is also working correctly with built-in utility classes. My example above uses font-bold and a custom utility that adds another bold class.  \r\n\r\ngroup-open:font-bold -- Works\r\ngroup-open:bold -- Does not Work","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15065","RelatedDescription":"Closed issue \"[v4] Modifiers are not working with custom utilities\" (#15065)"},{"Id":"2679786316","IsPullRequest":true,"CreatedAt":"2024-11-21T15:14:53","Actor":"philipp-spiess","Number":"15064","RawContent":null,"Title":"Add `color` to form reset snippet","State":"closed","Body":"While testing the latest alpha release across Tailwind v3 projects, we noticed one regression in relation to the default color of `<button>` elements. In v3, the reset would change the default to `inherit` but in v4 we would _not include it in the reset snippet inserted by the upgrade too_.\r\n\r\nThis PR changes the upgrade snippet to include it:\r\n\r\n```diff\r\n /*\r\n   In Tailwind CSS v4, basic styles are applied to form elements by default. To\r\n   maintain compatibility with v3, the following resets have been added:\r\n */\r\n @layer base {\r\n   input,\r\n   textarea,\r\n   select,\r\n   button {\r\n     border: 0px solid;\r\n     border-radius: 0;\r\n     padding: 0;\r\n+    color: inherit;\r\n     background-color: transparent;\r\n   }\r\n }\r\n```\r\n\r\nThis PR also ensures that there's a newline between the two code snippets.\r\n\r\n## Test Plan\r\n\r\n### Before\r\n\r\n![image](https://github.com/user-attachments/assets/00b5ea23-a6f2-4f7c-93c9-62aac841ce97)\r\n\r\n### After\r\n\r\n<img width=\"1354\" alt=\"Screenshot 2024-11-21 at 15 42 58\" src=\"https://github.com/user-attachments/assets/9a4503fe-683f-4d08-abf2-7dd111ed5428\">\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15064","RelatedDescription":"Closed or merged PR \"Add `color` to form reset snippet\" (#15064)"},{"Id":"2679403144","IsPullRequest":true,"CreatedAt":"2024-11-21T13:20:26","Actor":"RobinMalfait","Number":"15063","RawContent":null,"Title":"Upgrade: Migrate `ring` to `ring-3`","State":"closed","Body":"This PR adds a codemod for migrating `ring` to `ring-3` if it is safe to do so.\r\n\r\n\r\n# Test plan\r\n\r\nAdded a `ring` to the Catalyst project and then migrated it:\r\n<img width=\"864\" alt=\"image\" src=\"https://github.com/user-attachments/assets/163d9faa-c712-494e-b9d7-106508157915\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15063","RelatedDescription":"Closed or merged PR \"Upgrade: Migrate `ring` to `ring-3`\" (#15063)"},{"Id":"2679344466","IsPullRequest":true,"CreatedAt":"2024-11-21T12:57:25","Actor":"RobinMalfait","Number":"15062","RawContent":null,"Title":"v4.0.0-alpha.36","State":"closed","Body":"Prepare v4.0.0-alpha.36\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15062","RelatedDescription":"Closed or merged PR \"v4.0.0-alpha.36\" (#15062)"},{"Id":"2679022627","IsPullRequest":true,"CreatedAt":"2024-11-21T12:50:45","Actor":"philipp-spiess","Number":"15060","RawContent":null,"Title":"Publish `beta` releases as `next` with the upgrade tool as `latest`","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15060","RelatedDescription":"Closed or merged PR \"Publish `beta` releases as `next` with the upgrade tool as `latest`\" (#15060)"},{"Id":"2676785039","IsPullRequest":true,"CreatedAt":"2024-11-21T12:47:13","Actor":"RobinMalfait","Number":"15055","RawContent":null,"Title":"Disallow empty arbitrary values","State":"closed","Body":"This PR makes the candidate parser more strict by not allowing empty arbitrary values.\n\nExamples that are not allowed anymore:\n\n- `bg-[]` — arbitrary value\n- `bg-()` — arbitrary value, var shorthand\n- `bg-[length:]` — arbitrary value, with typehint\n- `bg-(length:)` — arbitrary value, with typehint, var shorthand\n- `bg-red-500/[]` — arbitrary modifier\n- `bg-red-500/()` — arbitrary modifier, var shorthand\n- `data-[]:flex` — arbitrary value for variant\n- `data-():flex` — arbitrary value for variant, var shorthand\n- `group-visible/[]:flex` — arbitrary modifier for variant\n- `group-visible/():flex` — arbitrary modifier for variant, var shorthand\n\nIf you are trying to trick the parser by injecting some spaces like this:\n\n- `bg-[_]`\n\nThen that is also not allowed.\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15055","RelatedDescription":"Closed or merged PR \"Disallow empty arbitrary values\" (#15055)"},{"Id":"2677325199","IsPullRequest":true,"CreatedAt":"2024-11-21T12:13:39","Actor":"thecrypticace","Number":"15056","RawContent":null,"Title":"Update default `drop-shadow-*` values to use a single shadow","State":"closed","Body":"This PR updates the default `drop-shadow-*` values to use a single shadow instead of multiple shadows.\r\n\r\nThis ensures that the usage with `drop-shadow(var(--drop-shadow-xl))` is correct because the `drop-shadow(…)` needs to encode a single drop shadow.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15056","RelatedDescription":"Closed or merged PR \"Update default `drop-shadow-*` values to use a single shadow\" (#15056)"},{"Id":"2675081135","IsPullRequest":false,"CreatedAt":"2024-11-21T09:47:28","Actor":"vladmoroz","Number":"15050","RawContent":null,"Title":"v4 blows up Next.js with custom `distDir`","State":"closed","Body":"HMR blows up the server when using v4 in a project with a custom `distDir` in the Next.js config\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n```\r\n\"@tailwindcss/postcss\": \"4.0.0-alpha.34\",\r\n\"tailwindcss\": \"4.0.0-alpha.34\",\r\n```\r\n\r\nThis wasn't an issue in `\"4.0.0-alpha.30\"`, started happening in `\"4.0.0-alpha.31\"`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNext.js 15\r\n\r\n**What version of Node.js are you using?**\r\n\r\nNode.js 20\r\n\r\n**Reproduction URL**\r\n\r\nhttps://codesandbox.io/p/devbox/tphzmv?file=%2Fnext.config.js%3A4%2C3\r\n\r\nhttps://github.com/user-attachments/assets/f2cf5118-c83a-42c5-91a4-56152dbb759d","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15050","RelatedDescription":"Closed issue \"v4 blows up Next.js with custom `distDir`\" (#15050)"},{"Id":"2675500564","IsPullRequest":true,"CreatedAt":"2024-11-21T09:47:27","Actor":"philipp-spiess","Number":"15053","RawContent":null,"Title":"Fix Next.js endless loop when setting a custom `distDir`","State":"closed","Body":"Closes #15050\r\n\r\nIn Tailwind CSS v4 Alpha 31 we changed how we scan template files. This changes included a new folder-dependency that is emitted for the `base` directory, so we can listen for new files being added as part of the postcss dependency.\r\n\r\nIn our testing, this worked fine with the Next.js integration meaning a new file in the project root would be picked up by Oxide and we could update the CSS files accordingly. \r\n\r\nThis change is now, however, causing an issue. With Next.js 15 **and with a custom `distDir` configured**, the postcss build, that will write into the `distDir`, will cause another postcss run to be triggered, starting an endless loop (regardless of wether or not the `distDir` was also part of your gitignore list).\r\n\r\nThis PR now changes the postcss client to not emit the base directory as a dependency to revert this changes. This does mean that new files and folders created _directly in the project root_ will require a restart of the Next.js server again (just like it did in Alpha 31 and before) for now.\r\n\r\n## Test Plan\r\n\r\nNext 15 does not seem to run in our current integration test setup (for some reason the server does not close correctly and it will fail on the cleanup step), so this change was tested manually:\r\n\r\n- First, clone the [templates repo](https://github.com/philipp-spiess/tailwindcss-playgrounds) I use for third party frameworks\r\n- Then, do a full build in the parent repo `tailwindcss` via `pnpm build`\r\n- Now, install the local tarballs in the `tailwindcss-playgrounds` repo via `pnpm install`\r\n\r\nWith this setup I have tested changes to a template file (that causes new utilities to be added) and the CSS file (that will rebuild properly) across both `pnpm dev` and `pnpm dev --turbo`.  Furthermore integration tests assert it still works in Next 14 like it did before:\r\n\r\nhttps://github.com/user-attachments/assets/b0ccb3dd-d090-4e4c-97c5-74129a2789be\r\n\r\nOne thing to make sure of is to include the new `distDir` into the `.gitignore` file as well, otherwise we will scrape it for changes which inherently causes an endless loop issue again.\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15053","RelatedDescription":"Closed or merged PR \"Fix Next.js endless loop when setting a custom `distDir`\" (#15053)"},{"Id":"2677586774","IsPullRequest":false,"CreatedAt":"2024-11-20T23:59:08","Actor":"HummingMind","Number":"15057","RawContent":null,"Title":"[v4] Issue with vite-plugin-vue-devtools and v4 beta.1","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-beta.1\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nVite 5.4.11\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.11.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome 131.0.6778.86\r\n\r\n**What operating system are you using?**\r\n\r\nWindows 11 24H2\r\n\r\n**Reproduction URL**\r\n\r\n[StackBlitz](https://stackblitz.com/edit/vitejs-vite-y3qdps)\r\nCan't run it there though. They don't seem to allow plugins like tailwindcss in vite.config.js\r\n\r\n![image](https://github.com/user-attachments/assets/1516e077-c008-462e-ae41-1571f250b96f)\r\n\r\nAnother way to reproduce is just to `npm create vue@latest` with vue router and just add TailwindCSS v4 alpha/beta to it and run the dev server.\r\n\r\n**Describe your issue**\r\n\r\nWhen using vue and vue-router, during vite HMR, the vite-plugin-vue-devtools, version 7.6.4, freaks out with this error:\r\n\r\n![image](https://github.com/user-attachments/assets/74631828-88ea-4548-9267-c0d2b8ca05e1)\r\n\r\nand the page looks like this:\r\n\r\n![image](https://github.com/user-attachments/assets/c2e3b393-3915-4a1f-a8db-254de58d04af)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15057","RelatedDescription":"Open issue \"[v4] Issue with vite-plugin-vue-devtools and v4 beta.1\" (#15057)"},{"Id":"2676021450","IsPullRequest":true,"CreatedAt":"2024-11-20T14:47:26","Actor":"RobinMalfait","Number":"15054","RawContent":null,"Title":"Improve `in-*` variant migrations","State":"closed","Body":"While testing the codemods on some projects, I noticed some issues with the migration to the new `in-*` variant.\r\n\r\nOne such example is that we checked for `&` at the end, instead of ` &` (the whitespace is significant).\r\n\r\nThis meant that `[figure>&]:my-0` was converted to `in-[figure>]:my-0` which is wrong. In this case, we want to keep it as `[figure>&]:my-0`.\r\n\r\nAdditionally this PR brings back the migration from `group-[]:flex` to `in-[.group]:flex`. If you are using a prefix, then `group-[]:tw-flex` is migrated to `tw:in-[.tw\\:group]:flex`.\r\n\r\nLast but not least, this does some internal refactors to group migrations logically together.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15054","RelatedDescription":"Closed or merged PR \"Improve `in-*` variant migrations\" (#15054)"},{"Id":"2675380535","IsPullRequest":true,"CreatedAt":"2024-11-20T11:12:32","Actor":"RobinMalfait","Number":"15052","RawContent":null,"Title":"Prepare v4.0.0-alpha.35 release","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15052","RelatedDescription":"Closed or merged PR \"Prepare v4.0.0-alpha.35 release\" (#15052)"},{"Id":"2675297200","IsPullRequest":true,"CreatedAt":"2024-11-20T10:39:17","Actor":"RobinMalfait","Number":"15051","RawContent":null,"Title":"Add new `transition-discrete` and `transition-normal` utilities","State":"closed","Body":"This PR adds two new utilities for the `transition-behavior` property:\r\n\r\n| Name | Definition |\r\n| --- | --- |\r\n| `transition-discrete` | `transition-behavior: allow-discrete` |\r\n| `transition-normal` | `transition-behavior: normal` |\r\n\r\n\r\n# Test plan\r\n\r\nNot a lot too test here, but verified in the browser that these properties generate correct CSS:\r\n<img width=\"301\" alt=\"image\" src=\"https://github.com/user-attachments/assets/db314750-e129-47d6-b605-d3b367ae81a4\">\r\n<img width=\"253\" alt=\"image\" src=\"https://github.com/user-attachments/assets/24da5a6e-0b6a-48aa-a042-5ec19773bc6b\">\r\n\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15051","RelatedDescription":"Closed or merged PR \"Add new `transition-discrete` and `transition-normal` utilities\" (#15051)"},{"Id":"2673999713","IsPullRequest":false,"CreatedAt":"2024-11-20T01:20:39","Actor":"tremby","Number":"15049","RawContent":null,"Title":"Child selector + :last-of-type do not work together as expected","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n3.4.15\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nn/a / unknown (occurs in tailwind play)\r\n\r\n**What version of Node.js are you using?**\r\n\r\nna / unknown\r\n\r\n**What browser are you using?**\r\n\r\nFirefox\r\n\r\n**What operating system are you using?**\r\n\r\nLinux\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/v4z3gZxhXm\r\n\r\n**Describe your issue**\r\n\r\nI'm putting this class on a blockquote: `[&_p]:last-of-type:bg-red-500`. It has paragraph children. I expect the last of those child paragraphs to have a red background.\r\n\r\n\"Test 1\" shows the expected behaviour: only the last paragraph has a background colour applied.\r\n\r\n\"Test 2\" shows broken behaviour: all paragraphs have the background colour applied.\r\n\r\nTailwind is generating this style rule:\r\n\r\n```css\r\n.\\[\\&_p\\]\\:last-of-type\\:bg-red-500:last-of-type p {\r\n  ...\r\n}\r\n```\r\n\r\nSince a child is being selected via `&_p`, the `:last-of-type` part should be after the trailing `p`, not after the base selector.\r\n\r\nActual use case: combining with `:before` and `:after` to put quotes around paragraphs of a blockquote.\r\n\r\nIt's interesting to note that if I use `:after` on a selector like this, that part is put in the right place. For example, in my actual use case, `[&_p]:last-of-type:after:content-['”']` generates `.\\[\\&_p\\]\\:last-of-type\\:after\\:content-\\[\\'”\\'\\]:last-of-type p::after`, which you'll see has `::after` in the right place, but `:last-of-type` in the wrong place.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15049","RelatedDescription":"Closed issue \"Child selector + :last-of-type do not work together as expected\" (#15049)"},{"Id":"2673812297","IsPullRequest":true,"CreatedAt":"2024-11-19T23:20:40","Actor":"RobinMalfait","Number":"15048","RawContent":null,"Title":"Improve root file detection","State":"closed","Body":"This PR fixes an issue where the Tailwind root file detection was wrong.\r\n\r\nWhenever a CSS file contains any of the `@tailwind` directives or an `@import` to any of the Tailwind files, the file is considered a Tailwind root file.\r\n\r\nIf multiple CSS files are part of the same tree, then we make the nearest common parent the root file.\r\n\r\nThis root file will be the file where we add `@config` and/or inject other changes during the migration process.\r\n\r\nHowever, if your folder structure looked like this:\r\n\r\n```css\r\n/* index.css */\r\n@import \"./base.css\";\r\n@import \"./typography.css\";\r\n@import \"tailwindcss/components\"; /* This makes index.css a root file */\r\n@import \"./utilities.css\";\r\n\r\n/* base.css */\r\n@tailwind base; /* This makes base.css a root file */\r\n\r\n/* utilities.css */\r\n@tailwind utilities; /* This makes utilities.css a root file */\r\n```\r\n\r\nThen we computed that `index.css` nad `base.css` were considered root files even though they belong to the same tree (because `base.css` is imported by `index.css`).\r\n\r\nThis PR fixes that behaviour by essentially being less smart, and just checking again if any sheets are part of the same tree.\r\n\r\n# Test plan:\r\n\r\nAdded an integration test that covers this scenario and fails before the fix.\r\n\r\nAlso ran it on our tailwindcss.com codebase.\r\n\r\n| Before | After |\r\n| --- | --- |\r\n| <img width=\"1072\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8ee99a59-335e-4221-b368-a8cd81e85191\"> | <img width=\"1072\" alt=\"image\" src=\"https://github.com/user-attachments/assets/fe5acae4-d3fc-43a4-bd31-eee768a3a6a5\"> |\r\n\r\n(Yes, I know the migration still fails, but that's a different issue.)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15048","RelatedDescription":"Closed or merged PR \"Improve root file detection\" (#15048)"},{"Id":"2673718819","IsPullRequest":false,"CreatedAt":"2024-11-19T22:28:25","Actor":"spaceemotion","Number":"15047","RawContent":null,"Title":"[v4] Vite plugin providing a virtual file can't be resolved from within main CSS file","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n```\r\n@tailwindcss/cli 4.0.0-alpha.33\r\n└── tailwindcss 4.0.0-alpha.33\r\n@tailwindcss/typography 0.5.15\r\n└── tailwindcss 4.0.0-alpha.33 peer\r\n@tailwindcss/vite 4.0.0-alpha.33\r\n└── tailwindcss 4.0.0-alpha.33\r\ntailwindcss 4.0.0-alpha.33\r\n```\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n`astro 5.0.0-beta.8`, using `vite 6.0.0-beta.10`\r\n\r\n**What version of Node.js are you using?**\r\nv20\r\n\r\n**What browser are you using?**\r\nChrome/Edge/Brave\r\n\r\n**What operating system are you using?**\r\nLinux/Windows\r\n\r\n**Reproduction URL**\r\nWe got the following stylesheet:\r\n\r\n```css\r\n@import 'tailwindcss';\r\n@import 'virtual:fontawesome.css';\r\n```\r\n\r\nThe custom vite plugin is quite simple:\r\n```ts\r\nimport { dom } from '@fortawesome/fontawesome-svg-core';\r\nimport type { Plugin } from 'vite';\r\n\r\nconst VIRTUAL_MODULE_ID = 'virtual:fontawesome.css';\r\nconst RESOLVED_VIRTUAL_MODULE_ID = '\\0' + VIRTUAL_MODULE_ID;\r\n\r\nexport function fontAwesomeCss(): Plugin {\r\n  return {\r\n    name: 'vite-plugin-fontawesome-css',\r\n\r\n    resolveId(id) {\r\n      if (id !== VIRTUAL_MODULE_ID) {\r\n        return;\r\n      }\r\n\r\n      return RESOLVED_VIRTUAL_MODULE_ID;\r\n    },\r\n\r\n    load(id) {\r\n      if (id !== RESOLVED_VIRTUAL_MODULE_ID) {\r\n        return;\r\n      }\r\n\r\n      return {\r\n        code: `@layer base { ${dom.css()} }`,\r\n      };\r\n    }\r\n  };\r\n}\r\n```\r\n\r\nWe need the fontawesome CSS to be included in the base layer of our CSS, since we want to be able to overwrite some things (like icon size) via the utility classes. We also don't want to include the CSS on every page, and instead have it in the global stylesheet.\r\n\r\nSadly, FontAwesome does not offer a simple static CSS we can use, since the classes are built at run-/build-time.\r\n\r\n**Describe your issue**\r\nI ran `astro dev` with verbose enabled:\r\n\r\n```\r\n  vite:transform 9.96ms /src/layouts/default.astro +12ms\r\n  vite:load 0.28ms [fs] /src/styles/main.css +14ms\r\n  astro:vite Error when evaluating SSR module /home/spaceemotion/code/nc-website/novelcrafter/src/pages/courses/[...course]/[...lesson].astro:\r\n  astro:vite |- Error: Can't resolve 'virtual:fontawesome.css' in '/home/spaceemotion/code/nc-website/novelcrafter/src/styles'\r\n  astro:vite     at finishWithoutResolve (/home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:564:18)\r\n  astro:vite     at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:656:15\r\n  astro:vite     at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n  astro:vite     at eval (eval at create (/home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/tapable@2.2.1/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:15:1)\r\n  astro:vite     at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n  astro:vite     at eval (eval at create (/home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/tapable@2.2.1/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:27:1)\r\n  astro:vite     at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/DescriptionFilePlugin.js:89:43\r\n  astro:vite     at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n  astro:vite     at eval (eval at create (/home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/tapable@2.2.1/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:15:1)\r\n  astro:vite     at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n  astro:vite  +0ms\r\n23:17:35 [ERROR] Can't resolve 'virtual:fontawesome.css' in '/home/spaceemotion/code/nc-website/novelcrafter/src/styles'\r\n  Stack trace:\r\n    at finishWithoutResolve (/home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:564:18)\r\n    at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n    at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n    at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/DescriptionFilePlugin.js:89:43\r\n    at eval (eval at create (/home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/tapable@2.2.1/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:15:1)\r\n```\r\n\r\nFrom what I can tell, the resolving is being handled by tailwind, and not Astro/Vite? I tried to see if there is a way to still make this worth, but not sure why the virtual module isn't being picked up - the same approach (using virtual modules) works without issue in other parts of the pipeline where we just import things into Vue/Astro/JS.\r\n\r\nhttps://stackblitz.com/edit/vite-u8kysb?file=vite.config.mjs (doesn't load inside of stackblitz due to oxide, but has a minimal example)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15047","RelatedDescription":"Open issue \"[v4] Vite plugin providing a virtual file can't be resolved from within main CSS file\" (#15047)"},{"Id":"2673643398","IsPullRequest":true,"CreatedAt":"2024-11-19T21:56:30","Actor":"RobinMalfait","Number":"15046","RawContent":null,"Title":"Improve PostCSS migration","State":"closed","Body":"If you have a PostCSS config file, that is not simple (has functions, requires, ...). In that case we don't migrate the PostCSS file. Because we don't migrate, the `didMigrate` is still false and we continue with the next migration.\n\nThe issue here is that there are 2 states encoded in the same variable and they should be two separate variables because there is a difference between:\n\n1. Not finding a file at all\n2. Finding a file, but not migrating it\n\nBefore this change, the output looks like this if you have a complex PostCSS file:\n```\n│ Migrating PostCSS configuration…\n\n│ The PostCSS config contains dynamic JavaScript and can not be automatically migrated.\n\n│ No PostCSS config found, skipping migration.\n```\n\nAfter this change, the output looks like this:\n```\n│ Migrating PostCSS configuration…\n\n│ ↳ The PostCSS config contains dynamic JavaScript and can not be automatically migrated.\n```\n\nAlso updated the output to include `↳ ` to be consistent with the other logs.\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15046","RelatedDescription":"Closed or merged PR \"Improve PostCSS migration\" (#15046)"},{"Id":"2673368317","IsPullRequest":true,"CreatedAt":"2024-11-19T20:27:47","Actor":"thecrypticace","Number":"15044","RawContent":null,"Title":"Fix negative rotate utilities","State":"closed","Body":"This fixes the negative versions of rotate:\r\n`-rotate-y-*`, `-rotate-x-*`, and `-rotate-z-*`\r\n\r\nThey were producing CSS like `--tw-rotate-x: calc(rotateX(Xdeg) * -1)` instead of `--tw-rotate-x: rotateX(calc(Xdeg * -1))`. This fixes all of those. The skew utilities have a similar structure but were already handled correctly.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15044","RelatedDescription":"Closed or merged PR \"Fix negative rotate utilities\" (#15044)"},{"Id":"2673393232","IsPullRequest":false,"CreatedAt":"2024-11-19T20:07:19","Actor":"saadeghi","Number":"15045","RawContent":null,"Title":"[v4] `addComponents` is adding styles to `@layer utilities` instead of `@layer components`","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.34\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`@tailwindcss/cli`\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/saadeghi/tw4-component-layer-issue\r\n\r\n**Describe your issue**\r\n\r\nThese are the layers in output CSS file:\r\n```\r\n@layer theme, base, components, utilities;\r\n```\r\n**Expectation**  \r\nIt's expected for `addComponents` to add styles to `@layer components`  \r\n\r\n**Current behavior**  \r\nCurrently `addComponents` adds styles to `@layer utilities`, similar to `addUtilities`\r\n\r\nPlugin example:  \r\nhttps://github.com/saadeghi/tw4-component-layer-issue/blob/master/myplugin.js\r\n\r\nGenerated style:  \r\nhttps://github.com/saadeghi/tw4-component-layer-issue/blob/9b7a944690a35d55c7406756e30cc98c7a239623/output.css#L516","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15045","RelatedDescription":"Open issue \"[v4] `addComponents` is adding styles to `@layer utilities` instead of `@layer components`\" (#15045)"},{"Id":"2673021650","IsPullRequest":true,"CreatedAt":"2024-11-19T17:54:52","Actor":"philipp-spiess","Number":"15043","RawContent":null,"Title":"Upgrade `jiti` dependency to stable","State":"closed","Body":"This PR updates the `jiti` dependency we use for plugin loading to the latest stable release.\r\n\r\n## Test Plan\r\n\r\nThis was relying on integration tests which contains example of TypeScript configs. It's also rebased to include the new examples from https://github.com/tailwindlabs/tailwindcss/pull/15041.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15043","RelatedDescription":"Closed or merged PR \"Upgrade `jiti` dependency to stable\" (#15043)"},{"Id":"2672645154","IsPullRequest":true,"CreatedAt":"2024-11-19T17:39:50","Actor":"RobinMalfait","Number":"15041","RawContent":null,"Title":"Use `resolveJsId` when resolving `tailwindcss/package.json`","State":"closed","Body":"This PR uses the `enhanced-resolve` instead of `createRequire(…).resolve` which improves the usability when running the upgrade tool locally using Bun.\r\n\r\nWhile testing, we also noticed that it is not possible to use a `cjs`-only plugin inside of an `esm` project. It was also not possible to use an `esm`-only plugin inside of a `cjs` project.\r\n\r\n# Test plan\r\n\r\nWe added integration tests in both the CLI (the CLI is an mjs project) and in the PostCSS (where we can configure a `cjs` and `esm` PostCSS config) integration tests where we created an `esm` and `cjs` based project with 4 plugins (`cjs`-only, `esm`-only, and TypeScript based plugins: `cts`-only and `mts`-only).","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15041","RelatedDescription":"Closed or merged PR \"Use `resolveJsId` when resolving `tailwindcss/package.json`\" (#15041)"},{"Id":"2672237016","IsPullRequest":true,"CreatedAt":"2024-11-19T14:52:30","Actor":"RobinMalfait","Number":"15040","RawContent":null,"Title":"Upgrade: don't show error during upgrade when analyzing external URL import","State":"closed","Body":"This PR improves the output of the upgrade tool when we are handling imports and the import happens to be an external URL.\r\n\r\nExternal URLs shouldn't and can't be upgraded, so printing an error message doesn't help the user.\r\n\r\nAdditionally, if an `@import` is using the `url(…)` function, then we skip over it and continue with the rest of the imports. \r\n\r\n| Before | After |\r\n| --- | --- |\r\n| <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/1ee00ea4-68e1-4252-b1cf-30a04f608b75\"> | <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/da1f3eaf-dedb-4b1b-bf73-93bdfee65759\"> |\r\n\r\nRunning this on github.com/parcel-bundler/parcel\r\n\r\n| Before | After |\r\n| -- | -- |\r\n| <img width=\"1552\" alt=\"image\" src=\"https://github.com/user-attachments/assets/89987444-8008-4edd-a907-6ad9276a86a0\"> | <img width=\"1552\" alt=\"image\" src=\"https://github.com/user-attachments/assets/cc2a34ae-ef17-4ad1-b06d-097874400b4d\"> |\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15040","RelatedDescription":"Closed or merged PR \"Upgrade: don't show error during upgrade when analyzing external URL import\" (#15040)"},{"Id":"2672024298","IsPullRequest":true,"CreatedAt":"2024-11-19T13:29:51","Actor":"RobinMalfait","Number":"15038","RawContent":null,"Title":"Improve robustness when upgrading","State":"closed","Body":"This PR improves the robustness when running the upgrade script.\r\n\r\nRight now when you run it and if you run into issues, it could be that an error with stack trace is printed in the terminal. This PR improves most of the cases where this happens to ensure the output is easier to parse as a human.\r\n\r\n# Test plan:\r\n\r\nUsed SourceGraph to find some popular open source repositories that use Tailwind and tried to run the upgrade tool on those repositories. If a repository fails to upgrade, then that's a good candidate for this PR to showcase the improved error messages.\r\n\r\ngithub.com/docker/docs\r\n\r\n| Before | After |\r\n| --- | --- |\r\n| <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/ae28c1c1-8472-45a2-89f7-ed74a703e216\"> | <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/6bf4ec79-ddfc-47c4-8ba0-051566cb0116\"> |\r\n\r\ngithub.com/parcel-bundler/parcel\r\n\r\n| Before | After |\r\n| --- | --- |\r\n| <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/826e510f-df7a-4672-9895-8e13da1d03a8\"> | <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/a75146f5-bfac-4c96-a02b-be00ef671f73\"> |\r\n\r\ngithub.com/vercel/next.js\r\n\r\n| Before | After |\r\n| --- | --- |\r\n| <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8d6c3744-f210-4164-b1ee-51950d44b349\"> | <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/b2739a9a-9629-411d-a506-3993a5867caf\"> |\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15038","RelatedDescription":"Closed or merged PR \"Improve robustness when upgrading\" (#15038)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-11-22T03:30:26.3506262Z","RunDurationInMilliseconds":421}