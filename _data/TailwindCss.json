{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2485311424","IsPullRequest":false,"CreatedAt":"2024-08-25T14:52:33","Actor":"AlbertSabate","Number":"14253","RawContent":null,"Title":"[v4] Broken types on @tailwindcss/postcss from version 4.0.0-alpha.19","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n\"@tailwindcss/postcss\": \"4.0.0-alpha.19\",\r\n\"@tailwindcss/postcss\": \"4.0.0-alpha.20\",\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nBunJS 1.1.26\r\n\r\n**What version of Node.js are you using?**\r\n\r\nBunJS 1.1.26\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nJust install the library and check the build folder, the problem is with @tailwindcss/postcss not with tailwindcss. You will find the .d.ts and .d.mts with export {  }.\r\n\r\n[Can't be reproduced on the playground](https://play.tailwindcss.com/M7TxWXpLnq?file=css)\r\n\r\n**Describe your issue**\r\n\r\nFrom version \"@tailwindcss/postcss\": \"4.0.0-alpha.19\" the types for the plugin @tailwindcss/postcss stopped working. After research I can find that the type file export becomes empty.\r\n\r\n<img width=\"407\" alt=\"Screenshot 2024-08-25 at 10 54 21 PM\" src=\"https://github.com/user-attachments/assets/f8fc20e3-44da-4707-8fe1-efdcf1090045\">\r\n\r\nIt should be as per version \"@tailwindcss/postcss\": \"4.0.0-alpha.18\". I can confirm downgrading to version \"@tailwindcss/postcss\": \"4.0.0-alpha.18\" everything is working fine.\r\n\r\n<img width=\"566\" alt=\"Screenshot 2024-08-25 at 10 55 48 PM\" src=\"https://github.com/user-attachments/assets/67bc2749-7a0a-45d0-94a4-decb91a6d646\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14253","RelatedDescription":"Open issue \"[v4] Broken types on @tailwindcss/postcss from version 4.0.0-alpha.19\" (#14253)"},{"Id":"2484619245","IsPullRequest":false,"CreatedAt":"2024-08-24T14:02:13","Actor":"HydenLiu","Number":"14247","RawContent":null,"Title":"type: the opacity of tailwind's custom keyframes cannot be a number.","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: postcss-cli 8.3.1, Next.js 10.0.9, webpack 5.28.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v12.0.0\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome, Safari, or N/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/ks4NiyjRok?file=config\r\n\r\n**Describe your issue**\r\n\r\nThe opacity of tailwind's custom keyframes cannot be a number.\r\n<img width=\"805\" alt=\"image\" src=\"https://github.com/user-attachments/assets/c10cd97c-8e88-44e3-8c14-a48397d033a0\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14247","RelatedDescription":"Open issue \"type: the opacity of tailwind's custom keyframes cannot be a number.\" (#14247)"},{"Id":"2484195691","IsPullRequest":false,"CreatedAt":"2024-08-24T04:40:38","Actor":"zhuba-Ahhh","Number":"14245","RawContent":null,"Title":"When I use the !important modifier in Text Color, I get an error","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: vtailwindcss\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: postcss-cli 8.3.1, Next.js 10.0.9, webpack 5.28.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v12.0.0\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome, Safari, or N/A\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS, Windows\r\n\r\n**Reproduction URL**\r\n\r\nA Tailwind Play link or public GitHub repo that includes a minimal reproduction of the bug. **Please do not link to your actual project**, what we need instead is a _minimal_ reproduction in a fresh project without any unnecessary code. This means it doesn't matter if your real project is private/confidential, since we want a link to a separate, isolated reproduction anyways.\r\n\r\nA reproduction is **required** when filing an issue — any issue opened without a reproduction will be closed and you'll be asked to create a new issue that includes a reproduction. We're a small team and we can't keep up with the volume of issues we receive if we need to reproduce each issue from scratch ourselves.\r\n\r\n**Describe your issue**\r\n\r\nuse：\r\n<img width=\"555\" alt=\"image\" src=\"https://github.com/user-attachments/assets/69658c5c-61fe-4a6e-82a5-aacc6564c1eb\">\r\nshow:\r\n<img width=\"706\" alt=\"image\" src=\"https://github.com/user-attachments/assets/1c54c85b-ffcf-43a2-94f6-fa33d54c602b\">\r\n<img width=\"478\" alt=\"image\" src=\"https://github.com/user-attachments/assets/f725d939-c564-4909-bb3f-28c43b1e1073\">\r\n\r\nIt seems that the variable is also brought in during compilation! Important\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14245","RelatedDescription":"Closed issue \"When I use the !important modifier in Text Color, I get an error\" (#14245)"},{"Id":"2480344230","IsPullRequest":false,"CreatedAt":"2024-08-23T16:53:35","Actor":"PrasathHari","Number":"14233","RawContent":null,"Title":"Vulnerability reported in the dependent package \"micromatch\"","State":"closed","Body":"A ReDOS Vulnerability is reported on one of the dependencies `micromatch` used in tailwind css.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14233","RelatedDescription":"Closed issue \"Vulnerability reported in the dependent package \"micromatch\"\" (#14233)"},{"Id":"2483186925","IsPullRequest":true,"CreatedAt":"2024-08-23T13:51:54","Actor":"philipp-spiess","Number":"14244","RawContent":null,"Title":"Prepare `v4.0.0-alpha.20`","State":"closed","Body":"Prepare next `4.0.0-alpha.20` release\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14244","RelatedDescription":"Closed or merged PR \"Prepare `v4.0.0-alpha.20`\" (#14244)"},{"Id":"2482027519","IsPullRequest":false,"CreatedAt":"2024-08-23T00:39:33","Actor":"quick007","Number":"14240","RawContent":null,"Title":"Border opacity not working when color isn't specified","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\"next\": \"14.2.5\",\r\n\"postcss\": \"^8.4.40\",\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.0.0\r\n\r\n**What browser are you using?**\r\n\r\nChome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/2kFJgAhjXC\r\n\r\n**Describe your issue**\r\n\r\nYou need to add a border color for `border-opacity-<number>` to work. Just `border border-opacity-<number>` should work on it's own.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14240","RelatedDescription":"Open issue \"Border opacity not working when color isn't specified\" (#14240)"},{"Id":"2481635785","IsPullRequest":true,"CreatedAt":"2024-08-22T20:15:54","Actor":"thecrypticace","Number":"14239","RawContent":null,"Title":"Support loading config files via `@config`","State":"open","Body":"In Tailwind v4 the CSS file is the main entry point to your project and is generally configured via `@theme`. However, given that all v3 projects were configured via a `tailwind.config.js` file we definitely need to support those. This PR adds support for loading existing Tailwind config files by adding an `@config` directive to the CSS — similar to how v3 supported multiple config files except that this is now _required_ to use a config file.\r\n\r\nYou can load a config file like so:\r\n\r\n```\r\n@import \"tailwindcss\";\r\n@config \"./path/to/tailwind.config.js\";\r\n```\r\n\r\nA few notes:\r\n- Both CommonJS and ESM config files are supported (loaded directly via `import()` in Node)\r\n- This is not yet supported in Intellisense or Prettier — should hopefully land next week\r\n- TypeScript is **not yet** supported in the config file — this will be handled in a future PR.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14239","RelatedDescription":"Open PR \"Support loading config files via `@config`\" (#14239)"},{"Id":"2481317966","IsPullRequest":false,"CreatedAt":"2024-08-22T17:18:48","Actor":"brandonmcconnell","Number":"14237","RawContent":null,"Title":"Bug: asterisk character `*` not working in utility name","State":"closed","Body":"<details><summary> Technical Configuration</summary>\r\n<br>\r\n<table>\r\n    <tr></tr>\r\n    <tr>\r\n        <th align=\"left\">What version of Tailwind CSS are you using?</th>\r\n    </tr>\r\n    <tr>\r\n        <td>v3.4.10</td>\r\n    </tr>\r\n    <tr>\r\n        <th align=\"left\">What build tool (or framework if it abstracts the build tool) are you using?</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Tailwind Play</td>\r\n    </tr>\r\n    <tr>\r\n        <th align=\"left\">What version of Node.js are you using?</th>\r\n    </tr>\r\n    <tr>\r\n        <td>N/A</td>\r\n    </tr>\r\n    <tr>\r\n        <th align=\"left\">What browser are you using?</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Chrome v127.0.6533.120 (Official Build) (arm64)</td>\r\n    </tr>\r\n    <tr>\r\n        <th align=\"left\">What operating system are you using?</th>\r\n    </tr>\r\n    <tr>\r\n        <td>macOS Sonoma v14.5 (23F79)</td>\r\n    </tr>\r\n</table>\r\n\r\n</details>\r\n\r\n---\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/1hJWSCKURf?file=config\r\n\r\n**Describe your issue**\r\n\r\nI am making some improvements to my [tailwindcss-directional-shadows](https://github.com/brandonmcconnell/tailwindcss-directional-shadows) plugin, and a new direction I am adding is `*` that will apply the shadow to all directions.\r\n\r\nHowever, any way I tried to configure the utilities to support any with the name `shadow-*-SIZE`, it didn't work. Changing `*` to `all` resolves the issue, but I would prefer to use `*` here, and I am not sure why it doesn't work.\r\n\r\n<img src=\"https://github.com/user-attachments/assets/90e05520-cd8b-4cd2-ad97-5e856e02baf5\" width=\"500\" alt=\"\" />\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14237","RelatedDescription":"Closed issue \"Bug: asterisk character `*` not working in utility name\" (#14237)"},{"Id":"2481161414","IsPullRequest":true,"CreatedAt":"2024-08-22T16:32:49","Actor":"philipp-spiess","Number":"14236","RawContent":null,"Title":"Move value parser into `tailwindcss` root","State":"closed","Body":"This PR is moving content from `packages/tailwindcss/src/value-parser/*.ts` into `packages/tailwindcss/src/value-parser.ts` to simplify the file structure.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14236","RelatedDescription":"Closed or merged PR \"Move value parser into `tailwindcss` root\" (#14236)"},{"Id":"2481062955","IsPullRequest":true,"CreatedAt":"2024-08-22T15:21:14","Actor":"philipp-spiess","Number":"14235","RawContent":null,"Title":"Remove unused resolveNamespace method","State":"closed","Body":"Removing a leftover API from the recent changes in https://github.com/tailwindlabs/tailwindcss/pull/14177","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14235","RelatedDescription":"Closed or merged PR \"Remove unused resolveNamespace method\" (#14235)"},{"Id":"2478785408","IsPullRequest":true,"CreatedAt":"2024-08-22T14:22:12","Actor":"thecrypticace","Number":"14231","RawContent":null,"Title":"Add support for matching multiple utility definitions for one candidate","State":"closed","Body":"Currently if a plugin adds a utility called `duration` it will take precedence over the built-in utilities — or any utilities with the same name in previously included plugins. However, in v3, we emitted matches from _all_ plugins where possible.\r\n\r\nTake this plugin for example which adds utilities for `animation-duration` via the `duration-*` class:\r\n\r\n```ts\r\nimport plugin from 'tailwindcss/plugin'\r\n\r\nexport default plugin(\r\n  function ({ matchUtilities, theme }) {\r\n    matchUtilities(\r\n      { duration: (value) => ({ animationDuration: value }) },\r\n      { values: theme(\"animationDuration\") },\r\n    )\r\n  },\r\n  {\r\n    theme: {\r\n      extend: {\r\n        animationDuration: ({ theme }) => ({\r\n          ...theme(\"transitionDuration\"),\r\n        }),\r\n      }\r\n    },\r\n  }\r\n)\r\n```\r\n\r\nBefore this PR this plugin's `duration` utility would override the built-in `duration` utility so you'd get this for a class like `duration-3500`:\r\n```css\r\n.duration-3000 {\r\n  animation-duration: 3500ms;\r\n}\r\n```\r\n\r\nNow, after this PR, we'll emit rules for `transition-duration` (Tailwind's built-in `duration-*` utility) and `animation-duration` (from the above plugin) and you'll get this instead:\r\n```css\r\n.duration-3000 {\r\n  transition-duration: 3500ms;\r\n}\r\n\r\n.duration-3000 {\r\n  animation-duration: 3500ms;\r\n}\r\n```\r\n\r\nThese are output as separate rules to ensure that they can all be sorted appropriately against other utilities.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14231","RelatedDescription":"Closed or merged PR \"Add support for matching multiple utility definitions for one candidate\" (#14231)"},{"Id":"2473917047","IsPullRequest":true,"CreatedAt":"2024-08-22T12:06:21","Actor":"thecrypticace","Number":"14221","RawContent":null,"Title":"Improve compatibility with `@tailwindcss/typography` and `@tailwindcss/forms`","State":"closed","Body":"This PR enables compatibility for the `@tailwindcss/typography` and `@tailwindcss/forms` plugins. This required the addition of new Plugin APIs and new package exports.\r\n\r\n## New Plugin APIs and compatibility improvements\r\n\r\nWe added support for `addComponents`, `matchComponents`, and `prefix`. The component APIs are an alias for the utilities APIs because the sorting in V4 is different and emitting components in a custom `@layer` is not necessary. Since `prefix` is not supported in V4, the `prefix()` API is currently an identity function.\r\n\r\n```js\r\n addComponents({\r\n  '.btn': {\r\n    padding: '.5rem 1rem',\r\n    borderRadius: '.25rem',\r\n    fontWeight: '600',\r\n  },\r\n  '.btn-blue': {\r\n    backgroundColor: '#3490dc',\r\n    color: '#fff',\r\n    '&:hover': {\r\n      backgroundColor: '#2779bd',\r\n    },\r\n  },\r\n  '.btn-red': {\r\n    backgroundColor: '#e3342f',\r\n    color: '#fff',\r\n    '&:hover': {\r\n      backgroundColor: '#cc1f1a',\r\n    },\r\n  },\r\n})\r\n```\r\n\r\nThe behavioral changes effect the `addUtilities` and `matchUtilities` functions, we now:\r\n\r\n- Allow arrays of CSS property objects to be emitted:\r\n  ```js\r\n  addUtilities({\r\n    '.text-trim': [\r\n      {'text-box-trim': 'both'},\r\n      {'text-box-edge': 'cap alphabetic'},\r\n    ],\r\n  })\r\n  ```\r\n- Allow arrays of utilities\r\n  ```js\r\n  addUtilities([\r\n    {\r\n      '.text-trim':{\r\n        'text-box-trim': 'both',\r\n        'text-box-edge': 'cap alphabetic',\r\n      },\r\n    }\r\n  ])\r\n  ```\r\n- Allow more complicated selector names\r\n  ```js\r\n  addUtilities({\r\n    '.form-input, .form-select, .form-radio': {\r\n      /* styles here */\r\n    },\r\n    '.form-input::placeholder': {\r\n      /* styles here */\r\n    },\r\n    '.form-checkbox:indeterminate:checked': {\r\n      /* styles here */\r\n    }\r\n  })\r\n  ```\r\n\r\n## New `tailwindcss/color` and `tailwindcss/defaultTheme` export\r\n\r\nTo be compatible to v3, we're adding two new exports to the tailwindcss package. These match the default theme values as defined in v3:\r\n\r\n```ts\r\nimport colors from 'tailwindcss/colors'\r\n\r\nconsole.log(colors.red[600])\r\n```\r\n\r\n```ts\r\nimport theme from 'tailwindcss/defaultTheme'\r\n\r\nconsole.log(theme.spacing[4])\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14221","RelatedDescription":"Closed or merged PR \"Improve compatibility with `@tailwindcss/typography` and `@tailwindcss/forms`\" (#14221)"},{"Id":"2477752037","IsPullRequest":false,"CreatedAt":"2024-08-21T11:07:40","Actor":"marvinhagemeister","Number":"14229","RawContent":null,"Title":"Config hashing consumes 30% of total processsing time","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss 8.4.41\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.6.0 (also Deno 1.46.0-rc.3+dd8a9c5)\r\n\r\n**What browser are you using?**\r\n\r\n- N/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/marvinhagemeister/tw-config-hash-repro\r\n\r\nSteps to reproduce:\r\n\r\n1. Clone https://github.com/marvinhagemeister/tw-config-hash-repro\r\n2. Run `npm i`\r\n3. Run `node foo.mjs` -> observe time printed to console\r\n4. Edit `node_modules/tailwindcss/lib/util/hashConfig.js` and replace the contents of the hashing function with `JSON.stringify(config)`\r\n   ```diff\r\n     function hashConfig(config) {\r\n   -   return (0, _objecthash.default)(config, {\r\n   -     ignoreUnknown: true\r\n   -   });\r\n   +   return JSON.stringify(config);\r\n     }\r\n   ```\r\n5. Run `node foo.mjs` again -> observe much faster time\r\n\r\n**Describe your issue**\r\n\r\nI noticed that hashing the tailwind configuration takes up roughly a third of the time in my project. That seemed a bit much. It looks like the `object-hash` package isn't the fastest.\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/f07dbff2a7f78fd75c53c6cfe01b58b6c0419f22/src/util/hashConfig.js#L3-L5\r\n\r\nGiven that the config is mostly json, switching to `JSON.stringify` would be much faster. If we do want to treat some values in a special way when the config isn't pure json, we could pass a custom replacer function to `JSON.stringify` for those.\r\n\r\nHere is a quick diff:\r\n\r\n```diff\r\n  function hashConfig(config) {\r\n-   return hash(config, { ignoreUnknown: true });\r\n+   return JSON.stringify(config);\r\n  }\r\n```\r\n\r\nBefore 84ms:\r\n\r\n<img width=\"420\" alt=\"Screenshot 2024-08-21 at 13 02 06\" src=\"https://github.com/user-attachments/assets/659c5e9d-7c5e-4e88-93b1-371387987c7e\">\r\n\r\nAfter 6.33ms:\r\n\r\n<img width=\"358\" alt=\"Screenshot 2024-08-21 at 13 02 13\" src=\"https://github.com/user-attachments/assets/c01b981c-fb07-48cc-9479-04d41a1b9de0\">\r\n\r\nWhilst this is just a synthetic example repository, I can reproduce the same results in real world projects of mine.\r\n\r\n| Project | Before | After |\r\n|---|---|---|\r\n| Reproduction repo | 84ms | 6.33ms |\r\n| Project A | 207ms | 19ms |\r\n| Project B | 301ms | 24ms |\r\n\r\nIt might not seem like much in the grander scheme of thing, but in my projects where I do tailwind processing during development this makes HMR updates feel a tiny bit snappier. There the time hashing the configuration easily takes up 30-35% of the total tailwind processing time. Would be nice if that could be reduced.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14229","RelatedDescription":"Open issue \"Config hashing consumes 30% of total processsing time\" (#14229)"},{"Id":"2477586452","IsPullRequest":true,"CreatedAt":"2024-08-21T10:54:42","Actor":"philipp-spiess","Number":"14228","RawContent":null,"Title":"Vite: Retain candidates between input CSS updates","State":"closed","Body":"This PR fixes an issue introduced with the changed candidate cache behavior in #14187.\r\n\r\nPrior to #14187, candidates were cached globally within an instance of Oxide. This meant that once a candidate was discovered, it would not reset until you either manually cleared the cache or restarted the Oxide process. With the changes in #14187 however, the cache was scoped to the instance of the `Scanner` class with the intention of making the caching behavior more easy to understand and to avoid a global cache.\r\n\r\nThis, however, had an unforeseen side-effect in our Vite extension. Vite, in dev mode, discovers files _lazily_. So when a developer goes to `/index.html` the first time, we will scan the `/index.html` file for Tailwind candidates and then build a CSS file with those candidate. When they go to `/about.html` later, we will _append_ the candidates from the new file and so forth.\r\n\r\nThe problem now arises when the dev server detects changes to the input CSS file. This requires us to do a re-scan of that CSS file which, after #14187, caused the candidate cache to be gone. This is usually fine since we would just scan files again for the changed candidate list but in the Vite case we would only get the input CSS file change _but no subsequent change events for all other files, including those currently rendered in the browser_). This caused updates to the CSS file to remove all candidates from the CSS file again.\r\n\r\nIdeally, we can separate between two concepts: The candidate cache and the CSS input file scan. An instance of the `Scanner` could re-parse the input CSS file without having to throw away previous candidates. This, however, would have another issue with the current Vite extension where we do not properly retain instances of the `Scanner` class anyways. To properly improve the cache behavior, we will have to fix the Vite `Scanner` retaining behavior first. Unfortunately this means that for the short term, we have to add some manual bookkeeping to the Vite client and retain the candidate cache between builds ourselves.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14228","RelatedDescription":"Closed or merged PR \"Vite: Retain candidates between input CSS updates\" (#14228)"},{"Id":"2476821140","IsPullRequest":false,"CreatedAt":"2024-08-21T02:33:05","Actor":"tebaly","Number":"14225","RawContent":null,"Title":"In the dark theme, background transparency does not work. In the light theme, it works.","State":"closed","Body":" In the dark theme, background transparency does not work. In the light theme, it works.\r\n\r\n```class=\" bg-black dark:bg-zinc-800 bg-opacity-50\"```\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n  ^3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\"nuxt\": \"^3.7.4\",\r\n\"tailwindcss\": \"^3.4.10\",\r\n\"@nuxtjs/tailwindcss\": \"^6.12.1\",\r\n\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v18 \r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome \r\n\r\n**What operating system are you using?**\r\n\r\nFor example: Linux\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14225","RelatedDescription":"Closed issue \"In the dark theme, background transparency does not work. In the light theme, it works.\" (#14225)"},{"Id":"2470765417","IsPullRequest":true,"CreatedAt":"2024-08-20T15:05:09","Actor":"adamwathan","Number":"14207","RawContent":null,"Title":"Add support for the `theme()` function in the plugin API","State":"closed","Body":"This PR adds support for the [`theme()` function](https://tailwindcss.com/docs/plugins#dynamic-utilities) from the v3 plugin API, used for configuring which values functional utilities support:\r\n\r\n```js\r\nplugin(function({ matchUtilities, theme }) {\r\n  matchUtilities(\r\n    {\r\n      tab: (value) => ({\r\n        tabSize: value\r\n      }),\r\n    },\r\n    { values: theme('tabSize') }\r\n  )\r\n})\r\n```\r\n\r\nThings this handles:\r\n\r\n- \"Upgrading\" theme keys to their v4 names, so if you do `theme('colors')` that will correctly retrieve all the colors from the `--color-*` namespace with the new CSS variable based configuration\r\n- Polyfilling dependent keys, so `theme('backgroundColor')` will still pull everything in `--color-*` even though there is no values in the `backgroundColor` namespace in v4 by default\r\n- Polyfilling theme values that are now handled by \"bare values\" internally, so even though there is no `flexShrink` theme values in v4, `theme('flexShrink')` will still configure your plugin to properly support any value that the built-in `shrink-*` utilities support\r\n\r\nThings that aren't handled:\r\n\r\n- Theme values that have been replaced by static utilities can't be retrieved yet, so for example `theme('cursor')` returns nothing right now because there are no values for the `cursor-*` utilities in the theme anymore, they are all just baked in to the framework.\r\n\r\nThis will be handled in a future PR.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14207","RelatedDescription":"Closed or merged PR \"Add support for the `theme()` function in the plugin API\" (#14207)"},{"Id":"2475130480","IsPullRequest":true,"CreatedAt":"2024-08-20T09:13:56","Actor":"MartijnCuppens","Number":"14223","RawContent":null,"Title":"Change line height of the `lg` font size to `1.625rem`","State":"open","Body":"The default line height of the `lg` font size looks a bit large compared to the rest of the line heights. You can see this in these demo's (third paragraph):\r\n\r\n| https://play.tailwindcss.com/0B3D7HVsj0 | https://play.tailwindcss.com/rZkSJPczKR |\r\n| - | - |\r\n| ![PixelSnap 2024-08-20 at 11 06 02 AM@2x](https://github.com/user-attachments/assets/2a68418d-5a01-4123-ad52-652321266184) | ![PixelSnap 2024-08-20 at 11 05 24 AM@2x](https://github.com/user-attachments/assets/35f8a9d0-c946-48de-af17-8c69b2c911ea) |\r\n\r\nAlso, if you plot the values of the relative line heights, you see the gap between `lg` and `xl` (blue dots 4&5):\r\n\r\n![Relative line-height](https://github.com/user-attachments/assets/a09dd782-12b4-4db5-a22e-023179918309)\r\n\r\nThis is a breaking change, so I changed this in `v4`.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14223","RelatedDescription":"Open PR \"Change line height of the `lg` font size to `1.625rem`\" (#14223)"},{"Id":"2475053478","IsPullRequest":false,"CreatedAt":"2024-08-20T08:38:35","Actor":"Tobitubbie","Number":"14222","RawContent":null,"Title":"media-query duplicates its generated styles","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n`v3.4.10`\r\n(tested in `v3.4.4`, too)\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n`none`\r\n\r\n**What version of Node.js are you using?**\r\n`v18.20.1`\r\n\r\n**What browser are you using?**\r\n`Chrome`\r\n\r\n**What operating system are you using?**\r\n`Windows`\r\n\r\n**Reproduction URL**\r\nhttps://play.tailwindcss.com/4aiEEar1oo?file=config\r\n\r\n**Describe your issue**\r\n\r\nThe 3 preconditions for the error to occur are: \r\n- `important` is true or set to a string\r\n- some `safelist`-pattern is configured and matches\r\n- styles are inside a media-query\r\n\r\n**Every style (key of the object) defined for the media-query is repeated x times in the final generated css!**\r\n\r\n---\r\n2 times on sibling css: \r\n```\r\n'@media (...)': { \r\n  '.a': {...}, \r\n  '.b': {...} \r\n}\r\n```\r\n=> results in:\r\n```\r\n@media (...): { \r\n  '.a':  {...}, \r\n  '.b':  {...}, \r\n\r\n  '.a':  {...}, \r\n  '.b':  {...} \r\n}\r\n```\r\n---\r\n3 times on nested css:\r\n```\r\n'@media (...)': { \r\n  '.a': { '.b': {...} } \r\n}\r\n``` \r\n=> results in: \r\n```\r\n'@media': { \r\n  '.a .b':  {...}, \r\n\r\n  '.a .b':  {...}, \r\n\r\n  '.a .b':  {...}\r\n}\r\n```\r\n> 5 nested properties ( a { b { c { d { e } } } } ) lead to 15 duplications\r\n\r\nThis is increasing our final stylesheet quite a bit 🥲 \r\n\r\nIs this intended behaviour or am I doing something wrong?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14222","RelatedDescription":"Open issue \"media-query duplicates its generated styles\" (#14222)"},{"Id":"2472171684","IsPullRequest":false,"CreatedAt":"2024-08-19T02:28:29","Actor":"benface","Number":"14218","RawContent":null,"Title":"Getting a stringified JS function in the CSS output with `matchUtilities` and `type: 'color'`","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nTailwind Play\r\n\r\n**What version of Node.js are you using?**\r\n\r\nTailwind Play\r\n\r\n**What browser are you using?**\r\n\r\nAll\r\n\r\n**What operating system are you using?**\r\n\r\nAll\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/1OtR3kLe72?file=config\r\n\r\n**Describe your issue**\r\n\r\nI am writing a custom plugin that generates color utilities, and I want it to support opacity modifiers like the core color plugins do. I found [this nice answer on how to do that](https://github.com/tailwindlabs/tailwindcss/discussions/12337#discussioncomment-7445342), but unfortunately I ran into an issue when combining it with [the trick to define colors with CSS variables](https://tailwindcss.com/docs/customizing-colors#using-css-variables). As you can see, the rule generated for `fade-red/50` looks as expected, but the `fade-red` class with no modifier generates this weird CSS:\r\n\r\n```css\r\n.fade-red {\r\n  --foo: ({opacityValue:e=1})=>t.replace(/<alpha-value>/g,e);\r\n}\r\n```\r\n\r\nThanks in advance!","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14218","RelatedDescription":"Closed issue \"Getting a stringified JS function in the CSS output with `matchUtilities` and `type: 'color'`\" (#14218)"},{"Id":"2472024031","IsPullRequest":true,"CreatedAt":"2024-08-18T15:24:57","Actor":"adamwathan","Number":"14217","RawContent":null,"Title":"Improve sorting of utilities that contain the same properties but one has more declarations than the other","State":"open","Body":"This PR improves our sorting algorithm to better handle situations where two utilities have the same set of unique properties but one has more total declarations than the other.\r\n\r\nThis is motivated by trying to better sort what were considered \"component classes\" in v3, because in v4 we're hoping to just call all of those things \"utilities\" and stick them in the same layer, relying on heuristic-based sorting to keep things working the same way they did for people in v3.\r\n\r\nSay we had a custom class that was similar to the `container` class from v3:\r\n\r\n```css\r\n@utility max-w-responsive {\r\n  @media (min-width: 640px) {\r\n    max-width: 640px;\r\n  }\r\n  @media (min-width: 768px) {\r\n    max-width: 768px;\r\n  }\r\n  @media (min-width: 1024px) {\r\n    max-width: 1024px;\r\n  }\r\n  @media (min-width: 1280px) {\r\n    max-width: 1280px;\r\n  }\r\n  @media (min-width: 1536px) {\r\n    max-width: 1536px;\r\n  }\r\n}\r\n```\r\n\r\nIf you use `max-w-responsive` and `max-w-md` on the same element, right now `max-w-responsive` would take precedence over `max-w-md` because they both only target the `max-width` property, so our current sorting algorithm falls back to sorting alphabetically based on the actual class name.\r\n\r\nThis PR adds one more check before alphabetical sorting, which is checking how many instances exist of each unique property in nodes being sorted.\r\n\r\nSo since `max-w-responsive` contains 5 `max-width` declarations and `max-w-md` only contains one, the sorting algorithm considers `max-w-md` to be a more \"specific\" utility than `max-w-responsive` and ensures that `max-w-md` takes precedence.\r\n\r\n**I'm opening this as a draft for now because I'm still not totally sure this is necessary** — the actual `container` class in v3 looks like this:\r\n\r\n```css\r\n.container {\r\n  width: 100%;\r\n  @media (min-width: 640px) {\r\n    max-width: 640px;\r\n  }\r\n  @media (min-width: 768px) {\r\n    max-width: 768px;\r\n  }\r\n  @media (min-width: 1024px) {\r\n    max-width: 1024px;\r\n  }\r\n  @media (min-width: 1280px) {\r\n    max-width: 1280px;\r\n  }\r\n  @media (min-width: 1536px) {\r\n    max-width: 1536px;\r\n  }\r\n}\r\n```\r\n\r\n…so it already includes two properties (notice `width` is there), which means it'll already be sorted before the `max-w-*` utilities.\r\n\r\nI'm also a bit nervous that this unique property counting approach is flawed when looking at things that use `@supports` with fallbacks.\r\n\r\nFor example of you had a `p-safe` utility that looked like this:\r\n\r\n```css\r\n@utility p-safe {\r\n  padding: auto;\r\n  @supports (padding: env(safe-area-inset-top, 20px)) {\r\n    padding: env(safe-area-inset-top, 20px) env(safe-area-inset-right, 20px) env(safe-area-inset-bottom, 20px) env(safe-area-inset-left, 20px);\r\n  }\r\n}\r\n```\r\n\r\n…that technically sets `padding` twice but it's not really the same as the `max-w-responsive` example because it's not trying to do more than one _thing_, it's just that it's declaring a fallback.\r\n\r\nSo I dunno, I think this is a pretty complicated one to think through and I'm kinda hoping we just don't need to think about it at all. But we already prototyped it last week, so I'm opening this as a point of discussion in case anyone has a clearer sense than me for whether we actually need to worry about this or not.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14217","RelatedDescription":"Open PR \"Improve sorting of utilities that contain the same properties but one has more declarations than the other\" (#14217)"},{"Id":"2471826477","IsPullRequest":false,"CreatedAt":"2024-08-18T11:20:36","Actor":"joutvhu","Number":"14214","RawContent":null,"Title":"The Tailwind's functions not working on Angular","State":"closed","Body":"File `tailwind.config.js`\r\n```js\r\n/** @type {import('tailwindcss').Config} */\r\nmodule.exports = {\r\n  content: [\r\n    './src/**/*.{html,ts,css,scss}',\r\n  ],\r\n  theme: {\r\n    container: {\r\n      center: true,\r\n    },\r\n    extend: {\r\n      colors: {\r\n        primary: '#ffab40',\r\n      },\r\n    },\r\n  },\r\n  plugins: [],\r\n}\r\n```\r\n\r\nFile `styles.scss`\r\n```scss\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n@debug #{theme('colors.primary')};\r\n@debug theme('colors.primary');\r\n@debug #{screen(sm)};\r\n@debug screen(sm);\r\n```\r\n\r\nOutput:\r\n```\r\nsrc\\styles.scss:5 DEBUG: theme(\"colors.primary\")\r\nsrc\\styles.scss:6 DEBUG: theme(\"colors.primary\")\r\nsrc\\styles.scss:7 DEBUG: screen(sm)\r\nsrc\\styles.scss:8 DEBUG: screen(sm)\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14214","RelatedDescription":"Closed issue \"The Tailwind's functions not working on Angular\" (#14214)"},{"Id":"2471643089","IsPullRequest":false,"CreatedAt":"2024-08-17T19:33:02","Actor":"MiguelG97","Number":"14212","RawContent":null,"Title":"referencing tailwind extended types in js with Nextjs framework","State":"open","Body":"\r\n**What version of Tailwind CSS are you using?**\r\n\r\n    \"tailwindcss\": \"^3.4.1\",\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\"next\": \"14.2.2\",\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.10.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n\r\n\r\n**Describe your issue**\r\n\r\nNextjs creates the default tailwind.config.ts file structure:\r\n```\r\nimport type { Config } from \"tailwindcss\";\r\n\r\nconst config: Config = {\r\n  content: [\r\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./modules/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\r\n  ],\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        ...\r\n      },\r\n    },\r\n  },\r\n  plugins: [],\r\n};\r\n\r\nexport default config;\r\n```\r\nHowever, when referencing the theme in another file through:\r\n```\r\nimport resolveConfig from \"tailwindcss/resolveConfig\";\r\nimport tailwindConfig from \"@/tailwind.config\";\r\nexport const themeTailwind = resolveConfig(tailwindConfig);\r\n```\r\nthe extended colors types are not loaded. \r\nIs this an expected behavior using the following syntax?\r\n`import type { Config } from \"tailwindcss\";`\r\n\r\nKind of annoying because I needed to do the following modification for types to work properly:\r\n```\r\n/** @type {import('tailwindcss').Config} */\r\nconst config = {...}\r\nexport default config;\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14212","RelatedDescription":"Open issue \"referencing tailwind extended types in js with Nextjs framework\" (#14212)"},{"Id":"2471549651","IsPullRequest":false,"CreatedAt":"2024-08-17T14:38:42","Actor":"mogeko","Number":"14211","RawContent":null,"Title":"[v4] It seems that Oxide can't work with CSS Modules","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n`v4.0.0-alpha.19`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite: `v5.4.1`, @tailwindcss/vite: `4.0.0-alpha.19`\r\n\r\n**What version of Node.js are you using?**\r\n\r\n`v22.6.0`\r\n\r\n**What browser are you using?**\r\n\r\nFirefox\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://stackblitz.com/edit/vitejs-vite-pzkrfk?file=src%2Fmain.ts\r\n\r\nBut it seems that [the node version of stackblitz](https://developer.stackblitz.com/codeflow/codeflow-faq#can-i-change-the-node-version) does not support TailwindCSS 4.0.\r\n\r\n**Describe your issue**\r\n\r\nI tried to use `prose.module.css`:\r\n\r\n```css\r\n@import '@fontsource-variable/fira-code' layer(base);\r\n\r\n@theme {\r\n  --font-family-mono: 'Fira Code Variable', ui-monospace, SFMono-Regular, Menlo,\r\n    Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;\r\n}\r\n\r\n.prose h1 {\r\n  @apply text-4xl font-[900] lg:text-5xl font-mono;\r\n}\r\n```\r\n\r\nBut it looks like `@apply...` It has not been compiled.  `globals.css` is worked.\r\n\r\n<img width=\"1116\" alt=\"截屏2024-08-17 22 29 51\" src=\"https://github.com/user-attachments/assets/8243c825-f31f-42f6-84ad-c730e5b82b29\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14211","RelatedDescription":"Open issue \"[v4] It seems that Oxide can't work with CSS Modules\" (#14211)"},{"Id":"2471529169","IsPullRequest":false,"CreatedAt":"2024-08-17T13:50:17","Actor":"rohit-ghoghari","Number":"14209","RawContent":null,"Title":"Dynamic Class Name Not Applying CSS on Front-End","State":"closed","Body":"\r\n// Fetching dynamic class not working in taiwind css\r\n\r\nRight now, I am working with my project laravel as backend and next.js (App router) as frontend technology. for frontend i have use taiwind css.\r\nI have some functionality in my project in which css need to dynamic assign from backend side and need to display in frontend side.\r\n\r\n\r\nThis is my about page:\r\n\r\nI have TRY IT in multiple ways:\r\n\r\n// ----------------------------------------First Option------------------------------------------------------------//\r\n\r\n\r\n// app/about.js\r\n\r\n/*\r\n\r\nIssue: Dynamic Class Name Not Applying CSS on Front-End\r\n\r\nDescription:\r\nWe are using a class name that is partially dynamic. The base part of the class name, \"text-\", is static, while the second part, \"green\", is dynamic and comes from a variable ${item.class}. The expected output is \"text-green\", but the CSS associated with this class is not being applied on the front-end.\r\n\r\nExample:\r\n\r\nlet colorClass = `text-${item.class}`; // where item.class could be 'green'\r\n\r\nExpected Output:\r\n\r\nThe class \"text-green\" should be applied to the element, but the corresponding CSS is not working as expected.\r\n\r\nQuestion:\r\nWhy is the \"text-green\" class not applying its CSS on the front-end, and how can we ensure that dynamically generated classes like this are correctly rendered with their associated styles?\r\n\r\n*/\r\n\r\nexport default async function About() {\r\n\t\r\n\t//API Call to get header icon data\r\n\t const res = await fetch('https://api.example.com/colour/data');\r\n\t const { icons } = res.data\r\n\r\n\t //icons data recieved\r\n\r\n\t const icons = [\r\n\t \t{\r\n\t \t\t'icon' : 'Bookmarks',\r\n\t \t\t'class' : 'green',\r\n\t \t},\r\n\t \t{\r\n\t \t\t'icon' : 'FilterIcon',\r\n\t \t\t'class' : 'blue',\r\n\t \t},\r\n\t \t{\r\n\t \t\t'icon' : 'ShareIcon',\r\n\t \t\t'class' : 'yellow',\r\n\t \t}\r\n\t ];\r\n\r\n\t  return (\r\n\t    <>\r\n\t      {/* Header icons */}\r\n\t      <div className=\"flex items-center gap-1\">\r\n\t        {icons && icons.map((item, index) => {\r\n\t            return (\r\n\t              <button\r\n\t                className={`text-${item.class} bg-${item.class}`}\r\n\t              >\r\n\t              <GlobalIcon value={item.icon} />\r\n\t              </button>\r\n\t            );\r\n\t          })}\r\n\t      </div>\r\n\t    </>\r\n\t  );\r\n};\r\n\r\n// tailwind.config.js\r\n\r\n\r\nconst { nextui } = require(\"@nextui-org/react\");\r\nmodule.exports = {\r\n  content: [\r\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}\",\r\n  ],\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        white: \"#ffffff\",\r\n        green: \"#189775\",\r\n        blue: \"#0000FF\",\r\n        yellow: \"#EFE89B\",\r\n      },\r\n\r\n      fontFamily: {\r\n        geist: [\r\n          \"geist\"\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  plugins: [\r\n    nextui({\r\n      layout: {\r\n        ariaLabel: \"NextUI Layout\",\r\n      },\r\n    }),\r\n  ],\r\n};\r\n\r\n\r\n\r\n// ----------------------------------------Second Option------------------------------------------------------------//\r\n\r\n\r\n/*\r\n\r\nIssue: Dynamic Color code Not Applying CSS on Front-End\r\n\r\nDescription:\r\nWe are using a Color code that is partially dynamic. The base part of the color code, \"text-\", is static, while the second part, \"#189775\", is dynamic and comes from a variable ${item.class}. The expected output is \"text-[#189775]\", but the CSS associated with this class is not being applied on the front-end.\r\n\r\nExample:\r\n\r\nlet colorClass = `text-[${item.class}]`; // where item.class could be 'green'\r\n\r\nExpected Output:\r\n\r\nThe class \"text-[#189775]\" should be applied to the element, but the corresponding CSS is not working as expected.\r\n\r\nQuestion:\r\nWhy is the \"text-[#189775]\" class not applying its CSS on the front-end, and how can we ensure that dynamically generated Color like this are correctly rendered with their associated styles?\r\n\r\n*/\r\n\r\n// app/about.js\r\n\r\n\r\n\r\nexport default async function About() {\r\n\t\r\n\t//API Call to get header icon data\r\n\t const res = await fetch('https://api.example.com/colour/data');\r\n\t const { icons } = res.data\r\n\r\n\t //icons data recieved\r\n\r\n\t const icons = [\r\n\t \t{\r\n\t \t\t'icon' : 'Bookmarks',\r\n\t \t\t'class' : '#189775',\r\n\t \t},\r\n\t \t{\r\n\t \t\t'icon' : 'FilterIcon',\r\n\t \t\t'class' : '#0000FF',\r\n\t \t},\r\n\t \t{\r\n\t \t\t'icon' : 'ShareIcon',\r\n\t \t\t'class' : '#EFE89B',\r\n\t \t}\r\n\t ];\r\n\r\n\t  return (\r\n\t    <>\r\n\t      {/* Header icons */}\r\n\t      <div className=\"flex items-center gap-1\">\r\n\t        {icons && icons.map((item, index) => {\r\n\t            return (\r\n\t              <button\r\n\t                className={`text-[${item.class}] bg-[${item.class}]`}\r\n\t              >\r\n\t              <GlobalIcon value={item.icon} />\r\n\t              </button>\r\n\t            );\r\n\t          })}\r\n\t      </div>\r\n\t    </>\r\n\t  );\r\n};\r\n\r\n// tailwind.config.js\r\n\r\n\r\nconst { nextui } = require(\"@nextui-org/react\");\r\nmodule.exports = {\r\n  content: [\r\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}\",\r\n  ],\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        white: \"#ffffff\",\r\n        green: \"#189775\",\r\n        blue: \"#0000FF\",\r\n        yellow: \"#EFE89B\",\r\n      },\r\n\r\n      fontFamily: {\r\n        geist: [\r\n          \"geist\"\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  plugins: [\r\n    nextui({\r\n      layout: {\r\n        ariaLabel: \"NextUI Layout\",\r\n      },\r\n    }),\r\n  ],\r\n};","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14209","RelatedDescription":"Closed issue \"Dynamic Class Name Not Applying CSS on Front-End\" (#14209)"},{"Id":"2468565028","IsPullRequest":false,"CreatedAt":"2024-08-16T17:42:05","Actor":"sntran","Number":"14202","RawContent":null,"Title":"`has-*` with relative selector produces wrong output","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\ntailwindcss v4.0.0-alpha.19\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`@tailwindcss/cli@4.0.0-alpha.19`\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.12.2\r\n\r\n**What browser are you using?**\r\n\r\nChrome version 127.0.6533.89 (Official Build) (arm64)\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS 14.5\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/eVAnr2RUDF\r\n\r\n**Describe your issue**\r\n\r\nElement with `has-[>img]:bg-red-500` should only have red background when it has an immediate child that is an `<img>`.\r\n\r\nHowever, the generated output is\r\n\r\n![image](https://github.com/user-attachments/assets/c3389c6e-b1cc-4e45-bedf-a2df50160cc5)\r\n\r\nWith `has-[&>img]:bg-red-500`, the outer container has red background, even though its immediate children is the one that has immediate `<img>`. The output of that is:\r\n\r\n![image](https://github.com/user-attachments/assets/628b1ed1-df24-480b-8d69-5d4f6bcb70ed)\r\n\r\nWhat I would expect it to output:\r\n\r\n```css\r\n.has-\\[\\>img\\]\\:bg-red-500 {\r\n  &:has(>img) {\r\n    background-color: var(--color-red-500, #ef4444);\r\n  }\r\n}\r\n```\r\n\r\nFor the case of `has-[&>img]:bg-red-500`, it should probably output the same as above, since `&>img` is not really a [relative selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors/Selector_structure#relative_selector)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14202","RelatedDescription":"Closed issue \"`has-*` with relative selector produces wrong output\" (#14202)"},{"Id":"2468891495","IsPullRequest":true,"CreatedAt":"2024-08-16T17:42:04","Actor":"adamwathan","Number":"14203","RawContent":null,"Title":"Don't wrap relative selectors in arbitrary variants with `:is(…)`","State":"closed","Body":"Prior to this PR, we weren't accounting for the fact that `:has(…)` supports [relative selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors/Selector_structure#relative_selector), which are sort of like partial selectors that can start with a combinator like `>`, `+`, or `~`.\r\n\r\nBefore, a class like `has-[>img]:flex` would generate this:\r\n\r\n```css\r\n.has-\\[\\>img\\]\\:flex:has(*:is(> img)) {\r\n  display: flex;\r\n}\r\n```\r\n\r\nThis was incorrect because `*:is(> img)` isn't even valid CSS at all, so the rule would do nothing.\r\n\r\nAfter this change, we generate this instead:\r\n\r\n```css\r\n.has-\\[\\>img\\]\\:flex:has(> img) {\r\n  display: flex;\r\n}\r\n```\r\n\r\nThis PR also ensures that relative selectors are recognized as invalid in places where they are not supported, so classes like `group-[>img]:flex` for example will produce nothing now instead of invalid CSS.\r\n\r\nThis is mostly a simple change but it did involve storing some additional information in the variant AST.\r\n\r\nFixes #14202.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14203","RelatedDescription":"Closed or merged PR \"Don't wrap relative selectors in arbitrary variants with `:is(…)`\" (#14203)"},{"Id":"2470220266","IsPullRequest":false,"CreatedAt":"2024-08-16T12:53:21","Actor":"aaronadamsCA","Number":"14205","RawContent":null,"Title":"[v4] Vite plugin breaks when setting `css.transformer` to `\"lightningcss\"`","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.19\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nVite 5.4.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\n20.16.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nUbuntu 22.04\r\n\r\n**Reproduction URL**\r\n\r\nLet me know if you need this and how you'd like it. [It works fine on Tailwind Play](https://play.tailwindcss.com/ViBCaGZhLm?file=css) but fails in Vite.\r\n\r\n**Describe your issue**\r\n\r\nWith a Vite config that specifies `\"lightningcss\"` as the CSS transformer:\r\n\r\n```ts\r\nimport tailwindcss from \"@tailwindcss/vite\";\r\nimport react from \"@vitejs/plugin-react\";\r\nimport { defineConfig } from \"vite\";\r\n\r\nexport default defineConfig({\r\n  css: {\r\n    transformer: \"lightningcss\",\r\n  },\r\n  plugins: [react(), tailwindcss()],\r\n});\r\n```\r\n\r\nThe behaviour of the Vite plugin is undefined and buggy.\r\n\r\nIt crashes when using `@apply` with class names containing characters `*` or `/`:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n\r\n@utility foo {\r\n  @apply text-3xl/tight;\r\n}\r\n```\r\n\r\n```\r\n12:44:49 PM [vite] Pre-transform error: Cannot apply unknown utility class: /\r\n12:44:49 PM [vite] Internal server error: Cannot apply unknown utility class: /\r\n  Plugin: @tailwindcss/vite:generate:serve\r\n  File: /workspace/packages/ui/src/tailwind.css\r\n      at onInvalidCandidate (file:///workspace/node_modules/.pnpm/tailwindcss@4.0.0-alpha.19/node_modules/tailwindcss/dist/lib.mjs:6:109810)\r\n...\r\n```\r\n\r\nIt pollutes the console with warnings:\r\n\r\n```\r\nError running vite:css on Tailwind CSS output. Skipping.\r\nError running vite:css on Tailwind CSS output. Skipping.\r\nError running vite:css on Tailwind CSS output. Skipping.\r\n```\r\n\r\nAnd it seems to ignore `@layer base` classes.\r\n\r\nYou can work around the problem by removing the offending part of the Vite config.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14205","RelatedDescription":"Open issue \"[v4] Vite plugin breaks when setting `css.transformer` to `\"lightningcss\"`\" (#14205)"},{"Id":"2469769918","IsPullRequest":false,"CreatedAt":"2024-08-16T10:26:27","Actor":"Burtonium","Number":"14204","RawContent":null,"Title":"Using rem values instead of px makes xs class override larger breakpoints","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v3.4.10\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/CAY0v1N8oa\r\n\r\n**Describe your issue**\r\n\r\nUsing something like \"xs:hidden md:block\" will stay hidden at the md: size for some reason when using rem values but not when using px.\r\n\r\n```\r\nmodule.exports = {\r\n  theme: {\r\n    extend: {\r\n      screens: {\r\n        xs: '32rem',\r\n        sm: '48rem',\r\n        md: '75rem',\r\n        lg: '92rem',\r\n        xl: '112rem',\r\n      },\r\n    },\r\n  },\r\n}\r\n\r\n\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14204","RelatedDescription":"Closed issue \"Using rem values instead of px makes xs class override larger breakpoints\" (#14204)"},{"Id":"2467586391","IsPullRequest":true,"CreatedAt":"2024-08-15T13:34:19","Actor":"mfeckie","Number":"14199","RawContent":null,"Title":"Add Glimmer template extensions to Oxide content detection","State":"closed","Body":"I recently watched the talk at [Tailwind Connect 2023](https://youtu.be/CLkxRnRQtDE) and was very interested in the idea that we'd no longer have to specify \"content\" and so was looking through the implementation.\r\n\r\nI noticed that currently it would not be able to support Ember.js next gen [templates](https://guides.emberjs.com/release/components/template-tag-format/) as the file extensions aren't listed (`gts` and `gjs`).\r\n\r\nI added them and then went to update the tests.\r\n\r\nWhen I did that, I noticed that it was hard to understand what was happening with the extensions as they weren't in alphabetical order (I suspect this is because of the FxHashMap algorithm), so I took the liberty of sorting the vec.\r\n\r\nSomething I may also have misunderstood is that the found extensions:\r\n\r\n```rust\r\n    let mut found_extensions = FxHashSet::from_iter(\r\n        include_str!(\"fixtures/template-extensions.txt\")\r\n            .trim()\r\n            .lines()\r\n            .filter(|x| !x.starts_with('#')) // Drop commented lines\r\n            .filter(|x| !x.is_empty()) // Drop empty lines\r\n            .map(|x| x.to_string()),\r\n    );\r\n```\r\n\r\nSeems to run each time the function is called. Perhaps this isn't a big performance penalty, but it seems like this could actually be done at compile time or via a `lazy_static` as it doesn't depend on any of the function's inputs, but wanted to check before considering updating that too.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14199","RelatedDescription":"Closed or merged PR \"Add Glimmer template extensions to Oxide content detection\" (#14199)"},{"Id":"2467543469","IsPullRequest":false,"CreatedAt":"2024-08-15T12:33:18","Actor":"xApep","Number":"14198","RawContent":null,"Title":"Custom BEM CSS classes not generated - randomly","State":"closed","Body":"hey!\r\n\r\nI have base.css with code:\r\n```\r\n@layer base {\r\n  .cards {\r\n    @apply px-4 md:mx-auto md:px-10 xl:px-16 xl:max-w-[1536px];\r\n\r\n    &--mobile-none {\r\n      @apply -mx-4 md:mx-0;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nwhich i import it in tailwind.css \r\n```\r\n@import 'tailwindcss/base';\r\n@import './base.css';\r\n@import 'tailwindcss/components';\r\n@import 'tailwindcss/utilities';\r\n```\r\n\r\nmy postcss.config.js\r\n```\r\nmodule.exports = {\r\n  plugins: {\r\n    'postcss-import': {},\r\n    'tailwindcss/nesting': {},\r\n    tailwindcss: {},\r\n    autoprefixer: {},\r\n  },\r\n}\r\n```\r\n\r\nNow the problem is that when I write some \"custom\" css components it happens that very randomly some classes, using BEM methodology it is just not generated.\r\n\r\nFew things to have in mind.\r\n- those css classes are set in CMS systems, so they never exist for tailwind content watch; but since classes are set in .css they should always be generated?\r\n- I have tried with or without adding *.css to \"content\" in tailwind settings, but problems are more or less always the same\r\n\r\nThe solution is, either I define some plain .html file, which tailwind \"content\" can watch, or if I define classes without BEM, so:\r\n```\r\n@layer base {\r\n  .cards--mobile-none {\r\n    @apply -mx-4 md:mx-0;\r\n  }\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14198","RelatedDescription":"Closed issue \"Custom BEM CSS classes not generated - randomly\" (#14198)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-08-26T03:30:21.8357986Z","RunDurationInMilliseconds":525}