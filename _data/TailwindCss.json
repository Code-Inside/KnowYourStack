{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2488861178","IsPullRequest":false,"CreatedAt":"2024-08-27T12:43:19","Actor":"wangyuanfen","Number":"14268","RawContent":null,"Title":"How could i delete useless css when vite build","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite 5.4.1\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.13.1\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/wangyuanfen/tailwind\r\n\r\n**Describe your issue**\r\n\r\nwhen i build , my App.tsx no import sub.tsx\r\n\r\nApp.tsx\r\n```\r\nexport default function App() {\r\n  return (\r\n    <h1 className=\"text-3xl font-bold underline\">\r\n      Hello world!\r\n    </h1>\r\n  )\r\n}\r\n```\r\n\r\nsub.tsx\r\n```\r\nexport default function Test() {\r\n  return (\r\n    <h1 className=\"text-[#123456] bg-[url(./avatar.jpg)]\">\r\n      12345789\r\n    </h1>\r\n  )\r\n}\r\n```\r\n\r\nand the dist have the useless css and picture\r\n![1](https://github.com/user-attachments/assets/ff8888f3-fdb6-4bb3-9a58-a184a0e539b1)\r\n\r\nDoesn't JIT delete useless CSS?\r\n\r\nI hope the useless css not show in the dist, especially the jpg no build in dist","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14268","RelatedDescription":"Closed issue \"How could i delete useless css when vite build\" (#14268)"},{"Id":"2489112207","IsPullRequest":true,"CreatedAt":"2024-08-27T11:50:18","Actor":"philipp-spiess","Number":"14270","RawContent":null,"Title":"Add standalone CLI","State":"open","Body":"<!--\r\n\r\nüëã Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14270","RelatedDescription":"Open PR \"Add standalone CLI\" (#14270)"},{"Id":"2488914311","IsPullRequest":true,"CreatedAt":"2024-08-27T10:21:12","Actor":"philipp-spiess","Number":"14269","RawContent":null,"Title":"Vite: Support lightningcss pre processor and simplify plugin","State":"open","Body":"Fixes #14269\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14269","RelatedDescription":"Open PR \"Vite: Support lightningcss pre processor and simplify plugin\" (#14269)"},{"Id":"2487696788","IsPullRequest":true,"CreatedAt":"2024-08-27T10:18:53","Actor":"thecrypticace","Number":"14265","RawContent":null,"Title":"Fix support for declaration fallbacks in plugins","State":"closed","Body":"This PR fixes support for \"fallback\" values for declarations in plugins. \r\n\r\nA plugin using `addUtilities`, `matchUtilities`, `addComponents`, etc‚Ä¶ should be able to specify \"fallback\" values for declarations by passing an array as the value of a declaration however this does not currently work in v4 (but it does in v3):\r\n\r\n```js\r\nexport default {\r\n  plugins: [\r\n    function ({ addUtilities }) {\r\n      addUtilities({\r\n        '.outlined': {\r\n          outline: ['1px solid ButtonText', '1px auto -webkit-focus-ring-color'],\r\n        },\r\n      })\r\n    },\r\n  ],\r\n};\r\n```\r\n\r\nAfter this PR the candidate `outlined` will now produce the following CSS ‚Äî like it does in v3:\r\n\r\n```css\r\n.outlined {\r\n  outline: 1px solid ButtonText;\r\n  outline: 1px auto -webkit-focus-ring-color;\r\n}\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14265","RelatedDescription":"Closed or merged PR \"Fix support for declaration fallbacks in plugins\" (#14265)"},{"Id":"2487651875","IsPullRequest":true,"CreatedAt":"2024-08-26T19:53:18","Actor":"thecrypticace","Number":"14264","RawContent":null,"Title":"Support plugin options in CSS","State":"open","Body":"Builds on #14239 ‚Äî that PR needs to be merged first.\r\n\r\nThis PR allows plugins defined with `plugin.withOptions` to receive options in CSS when using `@plugin` as long as the options are simple key/value pairs.\r\n\r\nFor example, the following is now valid and will include the forms plugin with only the base styles enabled:\r\n\r\n```css\r\n@plugin \"@tailwindcss/forms\" {\r\n  strategy: base;\r\n}\r\n```\r\n\r\nWe handle `null`, `true`, `false`, and numeric values as expected and will convert them to their JavaScript equivalents. All other values are converted to strings.\r\n\r\nFor example, in the following plugin definition, the options that are passed to the plugin will be the correct types:\r\n- `debug` will be the boolean value `true`\r\n- `threshold` will be the number `0.5`\r\n\r\n```css\r\n@plugin \"my-plugin\" {\r\n  debug: false;\r\n  threshold: 0.5;\r\n  message: Hello world;\r\n}\r\n```\r\n\r\nIf you need to pass a number or boolean value as a string, you can do so by wrapping the value in quotes:\r\n\r\n```css\r\n@plugin \"my-plugin\" {\r\n  debug: \"false\";\r\n  threshold: \"0.5\";\r\n  message: \"Hello world\";\r\n}\r\n```\r\n\r\nWhen duplicate options are encountered the last value wins:\r\n\r\n```css\r\n@plugin \"my-plugin\" {\r\n  message: Hello world;\r\n  message: Hello plugin; /* this will be the value of `message` */\r\n}\r\n```\r\n\r\nIt's important to note that this feature is **only available for plugins defined with `plugin.withOptions`**. If you try to pass options to a plugin that doesn't support them, you'll get an error message when building:\r\n\r\n```css\r\n@plugin \"my-plugin\" {\r\n  debug: false;\r\n  threshold: 0.5;\r\n}\r\n\r\n/* Error: The plugin \"my-plugin\" does not accept options */\r\n```\r\n\r\nAdditionally, if you try to pass in more complex values like arrays, objects, or selectors you'll get an error message:\r\n\r\n```css\r\n@plugin \"my-plugin\" {\r\n  color: ['red', 'green', 'blue'];\r\n}\r\n\r\n/* Error: Arrays are not supported in `@plugin` options. */\r\n```\r\n\r\n```css\r\n@plugin \"my-plugin\" {\r\n  color: { red: 100; green: 200; blue: 300 };\r\n}\r\n\r\n/* Error: Objects are not supported in `@plugin` options. */\r\n```\r\n\r\n```css\r\n@plugin \"my-plugin\" {\r\n  .some-selector > * {\r\n    primary: \"blue\";\r\n    secondary: \"green\";\r\n  }\r\n}\r\n\r\n/* Error: `@plugin` can only contain declarations. */\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14264","RelatedDescription":"Open PR \"Support plugin options in CSS\" (#14264)"},{"Id":"2486708506","IsPullRequest":false,"CreatedAt":"2024-08-26T17:17:07","Actor":"fedu","Number":"14258","RawContent":null,"Title":"tailwindcss-3.4.10.tgz: 2 vulnerabilities (highest severity is: 7.5)","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nMend security scan\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.9.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Info**\r\n\r\n![image](https://github.com/user-attachments/assets/88c52e94-7b46-4a75-a1f2-384bd10821a8)\r\n\r\n**Describe your issue**\r\n\r\nI'm getting Mend security warning for `braces` and `micromatch` from Mend security scan. If this something that needs to fixed into this package or is there a workaround?\r\n\r\n[CVE-2024-4068](https://www.mend.io/vulnerability-database/CVE-2024-4068)\r\n\r\n High\r\n7.5\r\nbraces-3.0.2.tgz\r\nTransitive\r\nN/A*\r\n‚ùå\r\n\r\n\r\n[CVE-2024-4067](https://www.mend.io/vulnerability-database/CVE-2024-4067)\r\n\r\n High\r\n7.5\r\nmicromatch-4.0.5.tgz\r\nTransitive\r\nN/A*\r\n‚ùå\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14258","RelatedDescription":"Closed issue \"tailwindcss-3.4.10.tgz: 2 vulnerabilities (highest severity is: 7.5)\" (#14258)"},{"Id":"2486911897","IsPullRequest":true,"CreatedAt":"2024-08-26T16:55:27","Actor":"philipp-spiess","Number":"14262","RawContent":null,"Title":"Fix issues with the CSS `theme()` function","State":"closed","Body":"While working on #14257, we noticed two issues with the CSS `theme()` function:\r\n\r\n1. In V3 it's possible to set arrays inside the theme object. An example for this is the default font families as defined here: https://github.com/tailwindlabs/tailwindcss/blob/main/stubs/config.full.js#L303-L311. We now properly join these arrays that are not tuples.\r\n2. We noticed that in the case where there are no modifiers, the fallback values for the CSS `theme()` function had the first word removed. A regression test for this was added.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14262","RelatedDescription":"Closed or merged PR \"Fix issues with the CSS `theme()` function\" (#14262)"},{"Id":"2487206996","IsPullRequest":false,"CreatedAt":"2024-08-26T16:02:12","Actor":"davidmyersdev","Number":"14263","RawContent":null,"Title":"Duplicate ellipsis in Safari when using `<sup>` or `<sub>` tags","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nN/A\r\n\r\n**What version of Node.js are you using?**\r\n\r\nN/A\r\n\r\n**What browser are you using?**\r\n\r\nSafari\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/cUuJcAdOkx\r\n\r\n**Describe your issue**\r\n\r\nWhen loading the above reproduction in Safari, the text is truncated with multiple sets of ellipsis. It appears to be happening due to the `position: relative` styling of the `<sup>` and `<sub>` tags.\r\n\r\nScreenshot:\r\n![image](https://github.com/user-attachments/assets/6075dbe7-f8f7-48d2-ba08-9ad890345661)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14263","RelatedDescription":"Open issue \"Duplicate ellipsis in Safari when using `<sup>` or `<sub>` tags\" (#14263)"},{"Id":"2486900200","IsPullRequest":true,"CreatedAt":"2024-08-26T14:23:52","Actor":"philipp-spiess","Number":"14260","RawContent":null,"Title":"Correctly merge tuple values when using the plugin API","State":"closed","Body":"We noticed that when the `defaultTheme` (change for this is coming in #14257) defines a tuple that is also defined in the CSS theme, the values are incorrectly merged as objects instead of overwritten. However, CSS theme values should take precedence, even when they use tuple syntax.\r\n\r\nProper coverage of this will come once `#14257` is merged when calling `theme(fontSize.xs[1].lineHeight)` will also have a default value passed in from the `defaultTheme`. ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14260","RelatedDescription":"Closed or merged PR \"Correctly merge tuple values when using the plugin API\" (#14260)"},{"Id":"2485311424","IsPullRequest":false,"CreatedAt":"2024-08-26T13:54:09","Actor":"AlbertSabate","Number":"14253","RawContent":null,"Title":"[v4] Broken types on @tailwindcss/postcss from version 4.0.0-alpha.19","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n\"@tailwindcss/postcss\": \"4.0.0-alpha.19\",\r\n\"@tailwindcss/postcss\": \"4.0.0-alpha.20\",\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nBunJS 1.1.26\r\n\r\n**What version of Node.js are you using?**\r\n\r\nBunJS 1.1.26\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nJust install the library and check the build folder, the problem is with @tailwindcss/postcss not with tailwindcss. You will find the .d.ts and .d.mts with export {  }.\r\n\r\n[Can't be reproduced on the playground](https://play.tailwindcss.com/M7TxWXpLnq?file=css)\r\n\r\n**Describe your issue**\r\n\r\nFrom version \"@tailwindcss/postcss\": \"4.0.0-alpha.19\" the types for the plugin @tailwindcss/postcss stopped working. After research I can find that the type file export becomes empty.\r\n\r\n<img width=\"407\" alt=\"Screenshot 2024-08-25 at 10 54 21‚ÄØPM\" src=\"https://github.com/user-attachments/assets/f8fc20e3-44da-4707-8fe1-efdcf1090045\">\r\n\r\nIt should be as per version \"@tailwindcss/postcss\": \"4.0.0-alpha.18\". I can confirm downgrading to version \"@tailwindcss/postcss\": \"4.0.0-alpha.18\" everything is working fine.\r\n\r\n<img width=\"566\" alt=\"Screenshot 2024-08-25 at 10 55 48‚ÄØPM\" src=\"https://github.com/user-attachments/assets/67bc2749-7a0a-45d0-94a4-decb91a6d646\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14253","RelatedDescription":"Closed issue \"[v4] Broken types on @tailwindcss/postcss from version 4.0.0-alpha.19\" (#14253)"},{"Id":"2486398563","IsPullRequest":true,"CreatedAt":"2024-08-26T13:54:07","Actor":"philipp-spiess","Number":"14256","RawContent":null,"Title":"Postcss: Bring back proper type exports","State":"closed","Body":"Closes #14253\r\n\r\nSince we changed the export strategy for the postcss client in #14132, we accidentally no longer generated type exports for this package.\r\n\r\nThis PR adds a type export back. We now use a similar pattern to the `./colors` and `./defaultTheme` exports in the tailwindcss package where we have a separate cjs entrypoint.\r\n\r\nThe changes were validated manually in a playground project that were installing the updated dependencies from tarballs.\r\n\r\nHere is one example of it working as expected:\r\n \r\n<img width=\"750\" alt=\"Screenshot 2024-08-26 at 14 10 07\" src=\"https://github.com/user-attachments/assets/83de15f2-1543-4805-9231-9b8df1636c5e\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14256","RelatedDescription":"Closed or merged PR \"Postcss: Bring back proper type exports\" (#14256)"},{"Id":"2486657967","IsPullRequest":true,"CreatedAt":"2024-08-26T11:43:49","Actor":"philipp-spiess","Number":"14257","RawContent":null,"Title":"Spreading `tailwindcss/defaultTheme` exports keeps bare values","State":"open","Body":"In #14221 we added a new export to the `tailwindcss` package: `tailwindcss/defaultTheme`. This is build on top of the full config from V3 and will allow plugins to keep being compatible.\r\n\r\nHowever, spreading in from this package has overwritten the bare value callback handler. This PR fixes it by sharing the bare value callbacks with the compat config.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14257","RelatedDescription":"Open PR \"Spreading `tailwindcss/defaultTheme` exports keeps bare values\" (#14257)"},{"Id":"2484619245","IsPullRequest":false,"CreatedAt":"2024-08-24T14:02:13","Actor":"HydenLiu","Number":"14247","RawContent":null,"Title":"type: the opacity of tailwind's custom keyframes cannot be a number.","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: postcss-cli 8.3.1, Next.js 10.0.9, webpack 5.28.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v12.0.0\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome, Safari, or N/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/ks4NiyjRok?file=config\r\n\r\n**Describe your issue**\r\n\r\nThe opacity of tailwind's custom keyframes cannot be a number.\r\n<img width=\"805\" alt=\"image\" src=\"https://github.com/user-attachments/assets/c10cd97c-8e88-44e3-8c14-a48397d033a0\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14247","RelatedDescription":"Open issue \"type: the opacity of tailwind's custom keyframes cannot be a number.\" (#14247)"},{"Id":"2484195691","IsPullRequest":false,"CreatedAt":"2024-08-24T04:40:38","Actor":"zhuba-Ahhh","Number":"14245","RawContent":null,"Title":"When I use the !important modifier in Text Color, I get an error","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: vtailwindcss\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: postcss-cli 8.3.1, Next.js 10.0.9, webpack 5.28.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v12.0.0\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome, Safari, or N/A\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS, Windows\r\n\r\n**Reproduction URL**\r\n\r\nA Tailwind Play link or public GitHub repo that includes a minimal reproduction of the bug. **Please do not link to your actual project**, what we need instead is a _minimal_ reproduction in a fresh project without any unnecessary code. This means it doesn't matter if your real project is private/confidential, since we want a link to a separate, isolated reproduction anyways.\r\n\r\nA reproduction is **required** when filing an issue ‚Äî any issue opened without a reproduction will be closed and you'll be asked to create a new issue that includes a reproduction. We're a small team and we can't keep up with the volume of issues we receive if we need to reproduce each issue from scratch ourselves.\r\n\r\n**Describe your issue**\r\n\r\nuseÔºö\r\n<img width=\"555\" alt=\"image\" src=\"https://github.com/user-attachments/assets/69658c5c-61fe-4a6e-82a5-aacc6564c1eb\">\r\nshow:\r\n<img width=\"706\" alt=\"image\" src=\"https://github.com/user-attachments/assets/1c54c85b-ffcf-43a2-94f6-fa33d54c602b\">\r\n<img width=\"478\" alt=\"image\" src=\"https://github.com/user-attachments/assets/f725d939-c564-4909-bb3f-28c43b1e1073\">\r\n\r\nIt seems that the variable is also brought in during compilation! Important\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14245","RelatedDescription":"Closed issue \"When I use the !important modifier in Text Color, I get an error\" (#14245)"},{"Id":"2480344230","IsPullRequest":false,"CreatedAt":"2024-08-23T16:53:35","Actor":"PrasathHari","Number":"14233","RawContent":null,"Title":"Vulnerability reported in the dependent package \"micromatch\"","State":"closed","Body":"A ReDOS Vulnerability is reported on one of the dependencies `micromatch` used in tailwind css.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14233","RelatedDescription":"Closed issue \"Vulnerability reported in the dependent package \"micromatch\"\" (#14233)"},{"Id":"2483186925","IsPullRequest":true,"CreatedAt":"2024-08-23T13:51:54","Actor":"philipp-spiess","Number":"14244","RawContent":null,"Title":"Prepare `v4.0.0-alpha.20`","State":"closed","Body":"Prepare next `4.0.0-alpha.20` release\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14244","RelatedDescription":"Closed or merged PR \"Prepare `v4.0.0-alpha.20`\" (#14244)"},{"Id":"2482027519","IsPullRequest":false,"CreatedAt":"2024-08-23T00:39:33","Actor":"quick007","Number":"14240","RawContent":null,"Title":"Border opacity not working when color isn't specified","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\"next\": \"14.2.5\",\r\n\"postcss\": \"^8.4.40\",\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.0.0\r\n\r\n**What browser are you using?**\r\n\r\nChome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/2kFJgAhjXC\r\n\r\n**Describe your issue**\r\n\r\nYou need to add a border color for `border-opacity-<number>` to work. Just `border border-opacity-<number>` should work on it's own.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14240","RelatedDescription":"Open issue \"Border opacity not working when color isn't specified\" (#14240)"},{"Id":"2481635785","IsPullRequest":true,"CreatedAt":"2024-08-22T20:15:54","Actor":"thecrypticace","Number":"14239","RawContent":null,"Title":"Support loading config files via `@config`","State":"open","Body":"In Tailwind v4 the CSS file is the main entry point to your project and is generally configured via `@theme`. However, given that all v3 projects were configured via a `tailwind.config.js` file we definitely need to support those. This PR adds support for loading existing Tailwind config files by adding an `@config` directive to the CSS ‚Äî similar to how v3 supported multiple config files except that this is now _required_ to use a config file.\r\n\r\nYou can load a config file like so:\r\n\r\n```\r\n@import \"tailwindcss\";\r\n@config \"./path/to/tailwind.config.js\";\r\n```\r\n\r\nA few notes:\r\n- Both CommonJS and ESM config files are supported (loaded directly via `import()` in Node)\r\n- This is not yet supported in Intellisense or Prettier ‚Äî should hopefully land next week\r\n- TypeScript is **not yet** supported in the config file ‚Äî this will be handled in a future PR.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14239","RelatedDescription":"Open PR \"Support loading config files via `@config`\" (#14239)"},{"Id":"2481317966","IsPullRequest":false,"CreatedAt":"2024-08-22T17:18:48","Actor":"brandonmcconnell","Number":"14237","RawContent":null,"Title":"Bug: asterisk character `*` not working in utility name","State":"closed","Body":"<details><summary> Technical Configuration</summary>\r\n<br>\r\n<table>\r\n    <tr></tr>\r\n    <tr>\r\n        <th align=\"left\">What version of Tailwind CSS are you using?</th>\r\n    </tr>\r\n    <tr>\r\n        <td>v3.4.10</td>\r\n    </tr>\r\n    <tr>\r\n        <th align=\"left\">What build tool (or framework if it abstracts the build tool) are you using?</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Tailwind Play</td>\r\n    </tr>\r\n    <tr>\r\n        <th align=\"left\">What version of Node.js are you using?</th>\r\n    </tr>\r\n    <tr>\r\n        <td>N/A</td>\r\n    </tr>\r\n    <tr>\r\n        <th align=\"left\">What browser are you using?</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Chrome v127.0.6533.120 (Official Build) (arm64)</td>\r\n    </tr>\r\n    <tr>\r\n        <th align=\"left\">What operating system are you using?</th>\r\n    </tr>\r\n    <tr>\r\n        <td>macOS Sonoma v14.5 (23F79)</td>\r\n    </tr>\r\n</table>\r\n\r\n</details>\r\n\r\n---\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/1hJWSCKURf?file=config\r\n\r\n**Describe your issue**\r\n\r\nI am making some improvements to my [tailwindcss-directional-shadows](https://github.com/brandonmcconnell/tailwindcss-directional-shadows) plugin, and a new direction I am adding is `*` that will apply the shadow to all directions.\r\n\r\nHowever, any way I tried to configure the utilities to support any with the name `shadow-*-SIZE`, it didn't work. Changing `*` to `all` resolves the issue, but I would prefer to use `*` here, and I am not sure why it doesn't work.\r\n\r\n<img src=\"https://github.com/user-attachments/assets/90e05520-cd8b-4cd2-ad97-5e856e02baf5\" width=\"500\" alt=\"\" />\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14237","RelatedDescription":"Closed issue \"Bug: asterisk character `*` not working in utility name\" (#14237)"},{"Id":"2481161414","IsPullRequest":true,"CreatedAt":"2024-08-22T16:32:49","Actor":"philipp-spiess","Number":"14236","RawContent":null,"Title":"Move value parser into `tailwindcss` root","State":"closed","Body":"This PR is moving content from `packages/tailwindcss/src/value-parser/*.ts` into `packages/tailwindcss/src/value-parser.ts` to simplify the file structure.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14236","RelatedDescription":"Closed or merged PR \"Move value parser into `tailwindcss` root\" (#14236)"},{"Id":"2481062955","IsPullRequest":true,"CreatedAt":"2024-08-22T15:21:14","Actor":"philipp-spiess","Number":"14235","RawContent":null,"Title":"Remove unused resolveNamespace method","State":"closed","Body":"Removing a leftover API from the recent changes in https://github.com/tailwindlabs/tailwindcss/pull/14177","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14235","RelatedDescription":"Closed or merged PR \"Remove unused resolveNamespace method\" (#14235)"},{"Id":"2478785408","IsPullRequest":true,"CreatedAt":"2024-08-22T14:22:12","Actor":"thecrypticace","Number":"14231","RawContent":null,"Title":"Add support for matching multiple utility definitions for one candidate","State":"closed","Body":"Currently if a plugin adds a utility called `duration` it will take precedence over the built-in utilities ‚Äî or any utilities with the same name in previously included plugins. However, in v3, we emitted matches from _all_ plugins where possible.\r\n\r\nTake this plugin for example which adds utilities for `animation-duration` via the `duration-*` class:\r\n\r\n```ts\r\nimport plugin from 'tailwindcss/plugin'\r\n\r\nexport default plugin(\r\n  function ({ matchUtilities, theme }) {\r\n    matchUtilities(\r\n      { duration: (value) => ({ animationDuration: value }) },\r\n      { values: theme(\"animationDuration\") },\r\n    )\r\n  },\r\n  {\r\n    theme: {\r\n      extend: {\r\n        animationDuration: ({ theme }) => ({\r\n          ...theme(\"transitionDuration\"),\r\n        }),\r\n      }\r\n    },\r\n  }\r\n)\r\n```\r\n\r\nBefore this PR this plugin's `duration` utility would override the built-in `duration` utility so you'd get this for a class like `duration-3500`:\r\n```css\r\n.duration-3000 {\r\n  animation-duration: 3500ms;\r\n}\r\n```\r\n\r\nNow, after this PR, we'll emit rules for `transition-duration` (Tailwind's built-in `duration-*` utility) and `animation-duration` (from the above plugin) and you'll get this instead:\r\n```css\r\n.duration-3000 {\r\n  transition-duration: 3500ms;\r\n}\r\n\r\n.duration-3000 {\r\n  animation-duration: 3500ms;\r\n}\r\n```\r\n\r\nThese are output as separate rules to ensure that they can all be sorted appropriately against other utilities.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14231","RelatedDescription":"Closed or merged PR \"Add support for matching multiple utility definitions for one candidate\" (#14231)"},{"Id":"2473917047","IsPullRequest":true,"CreatedAt":"2024-08-22T12:06:21","Actor":"thecrypticace","Number":"14221","RawContent":null,"Title":"Improve compatibility with `@tailwindcss/typography` and `@tailwindcss/forms`","State":"closed","Body":"This PR enables compatibility for the `@tailwindcss/typography` and `@tailwindcss/forms` plugins. This required the addition of new Plugin APIs and new package exports.\r\n\r\n## New Plugin APIs and compatibility improvements\r\n\r\nWe added support for `addComponents`, `matchComponents`, and `prefix`. The component APIs are an alias for the utilities APIs because the sorting in V4 is different and emitting components in a custom `@layer` is not necessary. Since `prefix` is not supported in V4, the `prefix()` API is currently an identity function.\r\n\r\n```js\r\n addComponents({\r\n  '.btn': {\r\n    padding: '.5rem 1rem',\r\n    borderRadius: '.25rem',\r\n    fontWeight: '600',\r\n  },\r\n  '.btn-blue': {\r\n    backgroundColor: '#3490dc',\r\n    color: '#fff',\r\n    '&:hover': {\r\n      backgroundColor: '#2779bd',\r\n    },\r\n  },\r\n  '.btn-red': {\r\n    backgroundColor: '#e3342f',\r\n    color: '#fff',\r\n    '&:hover': {\r\n      backgroundColor: '#cc1f1a',\r\n    },\r\n  },\r\n})\r\n```\r\n\r\nThe behavioral changes effect the `addUtilities` and `matchUtilities` functions, we now:\r\n\r\n- Allow arrays of CSS property objects to be emitted:\r\n  ```js\r\n  addUtilities({\r\n    '.text-trim': [\r\n      {'text-box-trim': 'both'},\r\n      {'text-box-edge': 'cap alphabetic'},\r\n    ],\r\n  })\r\n  ```\r\n- Allow arrays of utilities\r\n  ```js\r\n  addUtilities([\r\n    {\r\n      '.text-trim':{\r\n        'text-box-trim': 'both',\r\n        'text-box-edge': 'cap alphabetic',\r\n      },\r\n    }\r\n  ])\r\n  ```\r\n- Allow more complicated selector names\r\n  ```js\r\n  addUtilities({\r\n    '.form-input, .form-select, .form-radio': {\r\n      /* styles here */\r\n    },\r\n    '.form-input::placeholder': {\r\n      /* styles here */\r\n    },\r\n    '.form-checkbox:indeterminate:checked': {\r\n      /* styles here */\r\n    }\r\n  })\r\n  ```\r\n\r\n## New `tailwindcss/color` and `tailwindcss/defaultTheme` export\r\n\r\nTo be compatible to v3, we're adding two new exports to the tailwindcss package. These match the default theme values as defined in v3:\r\n\r\n```ts\r\nimport colors from 'tailwindcss/colors'\r\n\r\nconsole.log(colors.red[600])\r\n```\r\n\r\n```ts\r\nimport theme from 'tailwindcss/defaultTheme'\r\n\r\nconsole.log(theme.spacing[4])\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14221","RelatedDescription":"Closed or merged PR \"Improve compatibility with `@tailwindcss/typography` and `@tailwindcss/forms`\" (#14221)"},{"Id":"2477752037","IsPullRequest":false,"CreatedAt":"2024-08-21T11:07:40","Actor":"marvinhagemeister","Number":"14229","RawContent":null,"Title":"Config hashing consumes 30% of total processsing time","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss 8.4.41\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.6.0 (also Deno 1.46.0-rc.3+dd8a9c5)\r\n\r\n**What browser are you using?**\r\n\r\n- N/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/marvinhagemeister/tw-config-hash-repro\r\n\r\nSteps to reproduce:\r\n\r\n1. Clone https://github.com/marvinhagemeister/tw-config-hash-repro\r\n2. Run `npm i`\r\n3. Run `node foo.mjs` -> observe time printed to console\r\n4. Edit `node_modules/tailwindcss/lib/util/hashConfig.js` and replace the contents of the hashing function with `JSON.stringify(config)`\r\n   ```diff\r\n     function hashConfig(config) {\r\n   -   return (0, _objecthash.default)(config, {\r\n   -     ignoreUnknown: true\r\n   -   });\r\n   +   return JSON.stringify(config);\r\n     }\r\n   ```\r\n5. Run `node foo.mjs` again -> observe much faster time\r\n\r\n**Describe your issue**\r\n\r\nI noticed that hashing the tailwind configuration takes up roughly a third of the time in my project. That seemed a bit much. It looks like the `object-hash` package isn't the fastest.\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/f07dbff2a7f78fd75c53c6cfe01b58b6c0419f22/src/util/hashConfig.js#L3-L5\r\n\r\nGiven that the config is mostly json, switching to `JSON.stringify` would be much faster. If we do want to treat some values in a special way when the config isn't pure json, we could pass a custom replacer function to `JSON.stringify` for those.\r\n\r\nHere is a quick diff:\r\n\r\n```diff\r\n  function hashConfig(config) {\r\n-   return hash(config, { ignoreUnknown: true });\r\n+   return JSON.stringify(config);\r\n  }\r\n```\r\n\r\nBefore 84ms:\r\n\r\n<img width=\"420\" alt=\"Screenshot 2024-08-21 at 13 02 06\" src=\"https://github.com/user-attachments/assets/659c5e9d-7c5e-4e88-93b1-371387987c7e\">\r\n\r\nAfter 6.33ms:\r\n\r\n<img width=\"358\" alt=\"Screenshot 2024-08-21 at 13 02 13\" src=\"https://github.com/user-attachments/assets/c01b981c-fb07-48cc-9479-04d41a1b9de0\">\r\n\r\nWhilst this is just a synthetic example repository, I can reproduce the same results in real world projects of mine.\r\n\r\n| Project | Before | After |\r\n|---|---|---|\r\n| Reproduction repo | 84ms | 6.33ms |\r\n| Project A | 207ms | 19ms |\r\n| Project B | 301ms | 24ms |\r\n\r\nIt might not seem like much in the grander scheme of thing, but in my projects where I do tailwind processing during development this makes HMR updates feel a tiny bit snappier. There the time hashing the configuration easily takes up 30-35% of the total tailwind processing time. Would be nice if that could be reduced.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14229","RelatedDescription":"Open issue \"Config hashing consumes 30% of total processsing time\" (#14229)"},{"Id":"2477586452","IsPullRequest":true,"CreatedAt":"2024-08-21T10:54:42","Actor":"philipp-spiess","Number":"14228","RawContent":null,"Title":"Vite: Retain candidates between input CSS updates","State":"closed","Body":"This PR fixes an issue introduced with the changed candidate cache behavior in #14187.\r\n\r\nPrior to #14187, candidates were cached globally within an instance of Oxide. This meant that once a candidate was discovered, it would not reset until you either manually cleared the cache or restarted the Oxide process. With the changes in #14187 however, the cache was scoped to the instance of the `Scanner` class with the intention of making the caching behavior more easy to understand and to avoid a global cache.\r\n\r\nThis, however, had an unforeseen side-effect in our Vite extension. Vite, in dev mode, discovers files _lazily_. So when a developer goes to `/index.html` the first time, we will scan the `/index.html` file for Tailwind candidates and then build a CSS file with those candidate. When they go to `/about.html` later, we will _append_ the candidates from the new file and so forth.\r\n\r\nThe problem now arises when the dev server detects changes to the input CSS file. This requires us to do a re-scan of that CSS file which, after #14187, caused the candidate cache to be gone. This is usually fine since we would just scan files again for the changed candidate list but in the Vite case we would only get the input CSS file change _but no subsequent change events for all other files, including those currently rendered in the browser_). This caused updates to the CSS file to remove all candidates from the CSS file again.\r\n\r\nIdeally, we can separate between two concepts: The candidate cache and the CSS input file scan. An instance of the `Scanner` could re-parse the input CSS file without having to throw away previous candidates. This, however, would have another issue with the current Vite extension where we do not properly retain instances of the `Scanner` class anyways. To properly improve the cache behavior, we will have to fix the Vite `Scanner` retaining behavior first. Unfortunately this means that for the short term, we have to add some manual bookkeeping to the Vite client and retain the candidate cache between builds ourselves.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14228","RelatedDescription":"Closed or merged PR \"Vite: Retain candidates between input CSS updates\" (#14228)"},{"Id":"2476821140","IsPullRequest":false,"CreatedAt":"2024-08-21T02:33:05","Actor":"tebaly","Number":"14225","RawContent":null,"Title":"In the dark theme, background transparency does not work. In the light theme, it works.","State":"closed","Body":" In the dark theme, background transparency does not work. In the light theme, it works.\r\n\r\n```class=\" bg-black dark:bg-zinc-800 bg-opacity-50\"```\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n  ^3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\"nuxt\": \"^3.7.4\",\r\n\"tailwindcss\": \"^3.4.10\",\r\n\"@nuxtjs/tailwindcss\": \"^6.12.1\",\r\n\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v18 \r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome \r\n\r\n**What operating system are you using?**\r\n\r\nFor example: Linux\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14225","RelatedDescription":"Closed issue \"In the dark theme, background transparency does not work. In the light theme, it works.\" (#14225)"},{"Id":"2475130480","IsPullRequest":true,"CreatedAt":"2024-08-20T09:13:56","Actor":"MartijnCuppens","Number":"14223","RawContent":null,"Title":"Change line height of the `lg` font size to `1.625rem`","State":"open","Body":"The default line height of the `lg` font size looks a bit large compared to the rest of the line heights. You can see this in these demo's (third paragraph):\r\n\r\n| https://play.tailwindcss.com/0B3D7HVsj0 | https://play.tailwindcss.com/rZkSJPczKR |\r\n| - | - |\r\n| ![PixelSnap 2024-08-20 at 11 06 02‚ÄØAM@2x](https://github.com/user-attachments/assets/2a68418d-5a01-4123-ad52-652321266184) | ![PixelSnap 2024-08-20 at 11 05 24‚ÄØAM@2x](https://github.com/user-attachments/assets/35f8a9d0-c946-48de-af17-8c69b2c911ea) |\r\n\r\nAlso, if you plot the values of the relative line heights, you see the gap between `lg` and `xl` (blue dots 4&5):\r\n\r\n![Relative line-height](https://github.com/user-attachments/assets/a09dd782-12b4-4db5-a22e-023179918309)\r\n\r\nThis is a breaking change, so I changed this in `v4`.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14223","RelatedDescription":"Open PR \"Change line height of the `lg` font size to `1.625rem`\" (#14223)"},{"Id":"2475053478","IsPullRequest":false,"CreatedAt":"2024-08-20T08:38:35","Actor":"Tobitubbie","Number":"14222","RawContent":null,"Title":"media-query duplicates its generated styles","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n`v3.4.10`\r\n(tested in `v3.4.4`, too)\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n`none`\r\n\r\n**What version of Node.js are you using?**\r\n`v18.20.1`\r\n\r\n**What browser are you using?**\r\n`Chrome`\r\n\r\n**What operating system are you using?**\r\n`Windows`\r\n\r\n**Reproduction URL**\r\nhttps://play.tailwindcss.com/4aiEEar1oo?file=config\r\n\r\n**Describe your issue**\r\n\r\nThe 3 preconditions for the error to occur are: \r\n- `important` is true or set to a string\r\n- some `safelist`-pattern is configured and matches\r\n- styles are inside a media-query\r\n\r\n**Every style (key of the object) defined for the media-query is repeated x times in the final generated css!**\r\n\r\n---\r\n2 times on sibling css: \r\n```\r\n'@media (...)': { \r\n  '.a': {...}, \r\n  '.b': {...} \r\n}\r\n```\r\n=> results in:\r\n```\r\n@media (...): { \r\n  '.a':  {...}, \r\n  '.b':  {...}, \r\n\r\n  '.a':  {...}, \r\n  '.b':  {...} \r\n}\r\n```\r\n---\r\n3 times on nested css:\r\n```\r\n'@media (...)': { \r\n  '.a': { '.b': {...} } \r\n}\r\n``` \r\n=> results in: \r\n```\r\n'@media': { \r\n  '.a .b':  {...}, \r\n\r\n  '.a .b':  {...}, \r\n\r\n  '.a .b':  {...}\r\n}\r\n```\r\n> 5 nested properties ( a { b { c { d { e } } } } ) lead to 15 duplications\r\n\r\nThis is increasing our final stylesheet quite a bit ü•≤ \r\n\r\nIs this intended behaviour or am I doing something wrong?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14222","RelatedDescription":"Open issue \"media-query duplicates its generated styles\" (#14222)"},{"Id":"2472171684","IsPullRequest":false,"CreatedAt":"2024-08-19T02:28:29","Actor":"benface","Number":"14218","RawContent":null,"Title":"Getting a stringified JS function in the CSS output with `matchUtilities` and `type: 'color'`","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nTailwind Play\r\n\r\n**What version of Node.js are you using?**\r\n\r\nTailwind Play\r\n\r\n**What browser are you using?**\r\n\r\nAll\r\n\r\n**What operating system are you using?**\r\n\r\nAll\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/1OtR3kLe72?file=config\r\n\r\n**Describe your issue**\r\n\r\nI am writing a custom plugin that generates color utilities, and I want it to support opacity modifiers like the core color plugins do. I found [this nice answer on how to do that](https://github.com/tailwindlabs/tailwindcss/discussions/12337#discussioncomment-7445342), but unfortunately I ran into an issue when combining it with [the trick to define colors with CSS variables](https://tailwindcss.com/docs/customizing-colors#using-css-variables). As you can see, the rule generated for `fade-red/50` looks as expected, but the `fade-red` class with no modifier generates this weird CSS:\r\n\r\n```css\r\n.fade-red {\r\n  --foo: ({opacityValue:e=1})=>t.replace(/<alpha-value>/g,e);\r\n}\r\n```\r\n\r\nThanks in advance!","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14218","RelatedDescription":"Closed issue \"Getting a stringified JS function in the CSS output with `matchUtilities` and `type: 'color'`\" (#14218)"},{"Id":"2472024031","IsPullRequest":true,"CreatedAt":"2024-08-18T15:24:57","Actor":"adamwathan","Number":"14217","RawContent":null,"Title":"Improve sorting of utilities that contain the same properties but one has more declarations than the other","State":"open","Body":"This PR improves our sorting algorithm to better handle situations where two utilities have the same set of unique properties but one has more total declarations than the other.\r\n\r\nThis is motivated by trying to better sort what were considered \"component classes\" in v3, because in v4 we're hoping to just call all of those things \"utilities\" and stick them in the same layer, relying on heuristic-based sorting to keep things working the same way they did for people in v3.\r\n\r\nSay we had a custom class that was similar to the `container` class from v3:\r\n\r\n```css\r\n@utility max-w-responsive {\r\n  @media (min-width: 640px) {\r\n    max-width: 640px;\r\n  }\r\n  @media (min-width: 768px) {\r\n    max-width: 768px;\r\n  }\r\n  @media (min-width: 1024px) {\r\n    max-width: 1024px;\r\n  }\r\n  @media (min-width: 1280px) {\r\n    max-width: 1280px;\r\n  }\r\n  @media (min-width: 1536px) {\r\n    max-width: 1536px;\r\n  }\r\n}\r\n```\r\n\r\nIf you use `max-w-responsive` and `max-w-md` on the same element, right now `max-w-responsive` would take precedence over `max-w-md` because they both only target the `max-width` property, so our current sorting algorithm falls back to sorting alphabetically based on the actual class name.\r\n\r\nThis PR adds one more check before alphabetical sorting, which is checking how many instances exist of each unique property in nodes being sorted.\r\n\r\nSo since `max-w-responsive` contains 5 `max-width` declarations and `max-w-md` only contains one, the sorting algorithm considers `max-w-md` to be a more \"specific\" utility than `max-w-responsive` and ensures that `max-w-md` takes precedence.\r\n\r\n**I'm opening this as a draft for now because I'm still not totally sure this is necessary** ‚Äî the actual `container` class in v3 looks like this:\r\n\r\n```css\r\n.container {\r\n  width: 100%;\r\n  @media (min-width: 640px) {\r\n    max-width: 640px;\r\n  }\r\n  @media (min-width: 768px) {\r\n    max-width: 768px;\r\n  }\r\n  @media (min-width: 1024px) {\r\n    max-width: 1024px;\r\n  }\r\n  @media (min-width: 1280px) {\r\n    max-width: 1280px;\r\n  }\r\n  @media (min-width: 1536px) {\r\n    max-width: 1536px;\r\n  }\r\n}\r\n```\r\n\r\n‚Ä¶so it already includes two properties (notice `width` is there), which means it'll already be sorted before the `max-w-*` utilities.\r\n\r\nI'm also a bit nervous that this unique property counting approach is flawed when looking at things that use `@supports` with fallbacks.\r\n\r\nFor example of you had a `p-safe` utility that looked like this:\r\n\r\n```css\r\n@utility p-safe {\r\n  padding: auto;\r\n  @supports (padding: env(safe-area-inset-top, 20px)) {\r\n    padding: env(safe-area-inset-top, 20px) env(safe-area-inset-right, 20px) env(safe-area-inset-bottom, 20px) env(safe-area-inset-left, 20px);\r\n  }\r\n}\r\n```\r\n\r\n‚Ä¶that technically sets `padding` twice but it's not really the same as the `max-w-responsive` example because it's not trying to do more than one _thing_, it's just that it's declaring a fallback.\r\n\r\nSo I dunno, I think this is a pretty complicated one to think through and I'm kinda hoping we just don't need to think about it at all. But we already prototyped it last week, so I'm opening this as a point of discussion in case anyone has a clearer sense than me for whether we actually need to worry about this or not.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14217","RelatedDescription":"Open PR \"Improve sorting of utilities that contain the same properties but one has more declarations than the other\" (#14217)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-08-28T03:30:21.9886243Z","RunDurationInMilliseconds":393}