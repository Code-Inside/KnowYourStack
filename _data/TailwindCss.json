{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2723478440","IsPullRequest":false,"CreatedAt":"2024-12-07T20:55:01","Actor":"amanmavai","Number":"15324","RawContent":null,"Title":"@tailwindcss/vite plugin issue with @apply directive","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-beta.5\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite\r\n\r\n**What version of Node.js are you using?**\r\n\r\n20.8.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\nhttps://github.com/amanmavai/tailwind_v4_repro_01\r\n\r\n**Describe your issue**\r\nnot able to use @apply directive in vite + react project\r\nwhen I am running dev server or build getting below error\r\nerror during build:\r\n[@tailwindcss/vite:generate:build] Cannot apply unknown utility class: text-3xl\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15324","RelatedDescription":"Closed issue \"@tailwindcss/vite plugin issue with @apply directive\" (#15324)"},{"Id":"2724537660","IsPullRequest":false,"CreatedAt":"2024-12-07T20:52:14","Actor":"mynona","Number":"15329","RawContent":null,"Title":"v4: build warning","State":"closed","Body":"Tailwind generates this code:\r\n\r\n```\r\nimg, svg, video, canvas, audio, iframe, embed, object {\r\n    display: block;\r\n    vertical-align: middle;\r\n  }\r\n```\r\n\r\nWarning:\r\nProperty is ignored due to the display. With 'display: block', vertical-align should not be used.\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15329","RelatedDescription":"Closed issue \"v4: build warning\" (#15329)"},{"Id":"2723300764","IsPullRequest":false,"CreatedAt":"2024-12-07T11:50:45","Actor":"stephanedemotte","Number":"15323","RawContent":null,"Title":"[v4] Unused CSS selector warning with new @import \"style.css\" reference with svelte","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv4 beta 5\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nsvelte5, vite 6\r\n\r\n**What version of Node.js are you using?**\r\n\r\n v22\r\n\r\n**What browser are you using?**\r\n\r\n Chrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/stephanedemotte/_issue-tw-v4-unused-css-selector\r\n\r\n**Describe your issue**\r\n\r\nWhen i'm using the new `@import \"$lib/style.css\" reference` i've got a warning `Unused CSS selector`, in a real project i've got hundred of warning :)\r\n\r\n<img width=\"1012\" alt=\"Screenshot 2024-12-06 at 10 42 39 AM\" src=\"https://github.com/user-attachments/assets/b2403248-1f38-45c8-86c1-71d867f8fd66\">\r\n\r\n\r\nAnother thing i've got `Unknow at rule @apply` and `Unknow at rule @theme` :/\r\n\r\n\r\n<img width=\"792\" alt=\"Screenshot 2024-12-06 at 10 15 51 AM\" src=\"https://github.com/user-attachments/assets/c946acd4-aa66-4a32-b833-ea3dffe671b5\">\r\n\r\n<img width=\"1275\" alt=\"Screenshot 2024-12-06 at 10 42 57 AM\" src=\"https://github.com/user-attachments/assets/61c2958c-d8b3-4702-b325-31d2cf3e0385\">\r\n\r\n\r\n\r\nThank you\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15323","RelatedDescription":"Closed issue \"[v4] Unused CSS selector warning with new @import \"style.css\" reference with svelte\" (#15323)"},{"Id":"2723755467","IsPullRequest":true,"CreatedAt":"2024-12-06T19:32:21","Actor":"thecrypticace","Number":"15325","RawContent":null,"Title":"Prepare v4.0.0-beta.6 release","State":"closed","Body":"<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15325","RelatedDescription":"Closed or merged PR \"Prepare v4.0.0-beta.6 release\" (#15325)"},{"Id":"2722938605","IsPullRequest":true,"CreatedAt":"2024-12-06T12:23:58","Actor":"philipp-spiess","Number":"15321","RawContent":null,"Title":"Fix PostCSS watcher warnings on Windows","State":"open","Body":"Resolves #15320\r\n\r\nTurns out that the postcss file watcher does not like our Unix based paths and will print a warning about them. This fixes the issue by calling `path.resolve()` to convert it back to a Windows-style absolute path if necessary. \r\n\r\n## Test Plan\r\n\r\nTested on Windows with a new Next.js 14 project. Ensured that file reloads also still work (changes to the `tsx` file are picked up correctly). Also ensure that the CI runs on Windows.\r\n\r\n### Before\r\n\r\n<img width=\"1178\" alt=\"Screenshot 2024-12-06 at 13 12 23\" src=\"https://github.com/user-attachments/assets/70c1fe45-6983-4fb4-9889-716a0cbef03a\">\r\n\r\n### After\r\n\r\n<img width=\"1196\" alt=\"Screenshot 2024-12-06 at 13 23 24\" src=\"https://github.com/user-attachments/assets/0b9e3ff7-c5b6-4ccb-85a9-e7ba7aee355a\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15321","RelatedDescription":"Open PR \"Fix PostCSS watcher warnings on Windows\" (#15321)"},{"Id":"2722900351","IsPullRequest":false,"CreatedAt":"2024-12-06T12:04:07","Actor":"philipp-spiess","Number":"15320","RawContent":null,"Title":"Windows: Warnings in Next.js project with the postcss extension","State":"open","Body":"### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/15317\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **peyman-dev** December  6, 2024</sup>\r\nI'm just trying to upgrade the tailwindcss in nextjs project, the styles changes successfully But when im trying to save and compile the code, I'm facing with this error in terminal:\r\n\r\n`Import trace for requested module:\r\n./app/globals.css.webpack[javascript/auto]!=!./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[14].oneOf[12].use[2]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[14].oneOf[12].use[3]!./app/globals.css`\r\n\r\n![image](https://github.com/user-attachments/assets/c67cebad-2c61-489d-aea0-31eb8635d667)\r\n</div>","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15320","RelatedDescription":"Open issue \"Windows: Warnings in Next.js project with the postcss extension\" (#15320)"},{"Id":"2722794368","IsPullRequest":true,"CreatedAt":"2024-12-06T11:28:27","Actor":"lukewarlow","Number":"15319","RawContent":null,"Title":"Add `details-content` variant","State":"open","Body":"This matches the new `::details-content` pseudo element.\r\n\r\nSee https://developer.chrome.com/blog/styling-details#the_details-content_pseudo for more info.\r\n\r\nCurrently shipped in Chromium, in development in WebKit and no development yet in Firefox but they're [supportive](https://github.com/mozilla/standards-positions/issues/1027).\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15319","RelatedDescription":"Open PR \"Add `details-content` variant\" (#15319)"},{"Id":"2722668570","IsPullRequest":true,"CreatedAt":"2024-12-06T10:40:19","Actor":"philipp-spiess","Number":"15318","RawContent":null,"Title":"Expose `flattenColorPalette`","State":"open","Body":"Resolves #15315 \r\n\r\nIt looks like we implemented this in Core but forgot to expose it from the distributed package (the references are only used for testing plugins internally right now). This exposes `flattenColorPalette` under the old import path of `tailwindcss/lib/util/flattenColorPalette`.\r\n\r\n## Test Plan\r\n\r\nAdded the following plugin to the Vite example and ensured it works as expected:\r\n\r\n```ts\r\nimport flattenColorPalette from 'tailwindcss/lib/util/flattenColorPalette'\r\nimport plugin from 'tailwindcss/plugin'\r\n\r\nexport default plugin(({ matchUtilities, theme }) => {\r\n  matchUtilities(\r\n    {\r\n      'hover-bg': (value) => {\r\n        return {\r\n          '&:hover': {\r\n            backgroundColor: value,\r\n          },\r\n        }\r\n      },\r\n    },\r\n    { values: flattenColorPalette(theme('colors')) },\r\n  )\r\n})\r\n```\r\n\r\n<img width=\"462\" alt=\"Screenshot 2024-12-06 at 11 47 44\" src=\"https://github.com/user-attachments/assets/11163390-053e-4c6e-8cb9-ae67184ad594\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15318","RelatedDescription":"Open PR \"Expose `flattenColorPalette`\" (#15318)"},{"Id":"2721346454","IsPullRequest":false,"CreatedAt":"2024-12-05T20:40:24","Actor":"KevinGrajeda","Number":"15315","RawContent":null,"Title":"Trying to upgrade a plugin to v4","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\"vite\": \"^6.0.1\"\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.18.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nnew vite project with tailwind and tailwindcss-motion\r\nhttps://github.com/KevinGrajeda/plugin-v4\r\n\r\n**Describe your issue**\r\n\r\nI'm the developer of https://github.com/romboHQ/tailwindcss-motion and I'm trying to check the compatibility of the plugin with Tailwind v4 and when I run the project it throws me this error:\r\n\r\n\r\n```\r\n[plugin:@tailwindcss/vite:generate:serve] Package subpath './lib/util/flattenColorPalette' is not defined by \"exports\" in \r\n/Users/yokev/dev/rombo/example/upgrade-to-v4/node_modules/.pnpm/tailwindcss-motion@0.4.3-beta_tailwindcss@4.0.0-\r\nbeta.5/node_modules/tailwindcss/package.json\r\n```\r\n\r\nI'm using flattenColorPalette to add animations with the theme colors\r\n\r\nhttps://github.com/romboHQ/tailwindcss-motion/blob/09ceaeca9654598bca430872f1c967eb066ca4a5/src/baseAnimations.js#L472-L473 \r\n\r\nIs there a new approach for doing this? What can I do?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15315","RelatedDescription":"Open issue \"Trying to upgrade a plugin to v4\" (#15315)"},{"Id":"2721026598","IsPullRequest":false,"CreatedAt":"2024-12-05T19:50:20","Actor":"bczsalba","Number":"15314","RawContent":null,"Title":"[v4]: `@apply` no longer allows referencing custom utilities after `alpha-32`","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-beta.5\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n@tailwindcss/cli@v4.0.0-beta.5\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.9.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/xky1QCZccs?file=css\r\n\r\n**Describe your issue**\r\n\r\nUsing `@apply` with user-defined styles works from `alpha-3` (the first version I could get to build with only a CSS file as config) all the way to `alpha-31`, after which it results in `Cannot apply unknown utility class: ...`.\r\n\r\nTried:\r\n\r\n- Moving around the initial tailwind import\r\n- Moving the `@apply` call in/out of the `utilities` layer\r\n- Adding `@import \"tailwindcss/theme\" theme(reference);` at various points in the file\r\n\r\nThe only thing I could come up with to get around this was to use the CSS vars the declaration would've referenced (`--font-family-example`, in this case) to manually set the style within the utility. This doesn't seem very convenient, and is practically useless when chaining multiple utilities in a single `@apply` call (which is 99% of my usage of the feature).\r\n\r\nI couldn't find any references to this change of behaviour, but I might have just overlooked something since of course the docs aren't quite complete yet. It feels a bit weird that this _wouldn't_ have already been reported, but I couldn't find anything relevant.\r\n\r\nThank you!","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15314","RelatedDescription":"Closed issue \"[v4]: `@apply` no longer allows referencing custom utilities after `alpha-32`\" (#15314)"},{"Id":"2720394342","IsPullRequest":false,"CreatedAt":"2024-12-05T15:35:49","Actor":"omaishar","Number":"15311","RawContent":null,"Title":"[v4] Tailwind does not parse Svelte class directives","State":"closed","Body":"Tailwind v4 does not seem to parse any [Svelte class directives](https://svelte.dev/tutorial/svelte/classes).\r\nExample:\r\n\r\nTailwind v3 - works!\r\n`<div class:bg-gray-500={isDisabled} ...>`\r\nAfter running `tailwindcss` CLI command the `bg-gray-500` class is added to the `app.min.css` file.\r\n\r\nTailwind v4 - does not work!\r\n`<div class:bg-gray-500={isDisabled} ...>`\r\nAfter running `npx @tailwindcss/cli` CLI command the `bg-gray-500` class is NOT added to the `app.min.css` file.\r\n\r\n**What version of Tailwind CSS are you using?**\r\nTailwind: 4.0.0-beta.4\r\nTailwind CLI: 4.0.0-beta.4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\nSvelteKit: 2.5.26\r\nVite: 5.4.4\r\n\r\n**What version of Node.js are you using?**\r\n20.17.0\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome, Safari, or N/A\r\n\r\n**What operating system are you using?**\r\nMacOS","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15311","RelatedDescription":"Closed issue \"[v4] Tailwind does not parse Svelte class directives\" (#15311)"},{"Id":"2720077119","IsPullRequest":true,"CreatedAt":"2024-12-05T15:18:06","Actor":"philipp-spiess","Number":"15307","RawContent":null,"Title":"Reference imports should not generate utilities","State":"closed","Body":"We noticed an issue where the new `@import \"…\" reference` syntax was not throwing away `@tailwind` declarations, effectively causing you to create utility classes whenever you used this feature.\r\n\r\nThis is especially noticed in setups with very strict compilers like Svelte.\r\n\r\n## Test Plan\r\n\r\n### Before\r\n\r\n<img width=\"1142\" alt=\"Screenshot 2024-12-05 at 11 56 00\" src=\"https://github.com/user-attachments/assets/546f0eb3-4401-48c9-9268-76992e899226\">\r\n\r\n### After\r\n\r\n<img width=\"2560\" alt=\"Screenshot 2024-12-05 at 12 27 30\" src=\"https://github.com/user-attachments/assets/16732000-e02c-49bc-ac6f-91da0cfcc7e8\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15307","RelatedDescription":"Closed or merged PR \"Reference imports should not generate utilities\" (#15307)"},{"Id":"2720156425","IsPullRequest":true,"CreatedAt":"2024-12-05T11:32:38","Actor":"RobinMalfait","Number":"15308","RawContent":null,"Title":"Alias `@tailwindcss/postcss`, `@tailwindcss/vite` and `@tailwindcss/upgrade` to the latest tag","State":"open","Body":"When releasing a new beta version, we publish everything to a `next` tag, this is important so that you can still use `npm install tailwindcss` and get the current v3 instead of the beta v4 version.\r\n\r\nHowever, some packages don't have a meaning before the v4 release. This PR aliases the `next` tag to the `latest` tag for the following packages:\r\n\r\n- `@tailwindcss/vite`\r\n- `@tailwindcss/postcss`\r\n- `@tailwindcss/upgrade`\r\n\r\nThis in turn allow you to run `npx @tailwindcss/upgrade` for example, instead of using `npx @tailwindcss/upgrade@next`.\r\n\r\n---\r\n\r\n> [!NOTE]\r\n>  I actually have no idea how to properly test this without actually running it in CI. The `npm dist-tag` command doesn't have a `--dry-run` flag. Additionally, when running this command locally we have to authenticate (obviously) and in CI we typically don't have to do this because of the `NODE_AUTH_TOKEN` (at least that's the case when running `npm publish`) so I'm hoping this Just Works™ as expected.\r\n\r\n---\r\n\r\nThe other packages aren't aliased because those are packages you typically don't have to install yourself.\r\n\r\nI was considering adding `@tailwindcss/cli`, but right now this is already published as an alias for the CLI of Tailwind CSS v2.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15308","RelatedDescription":"Open PR \"Alias `@tailwindcss/postcss`, `@tailwindcss/vite` and `@tailwindcss/upgrade` to the latest tag\" (#15308)"},{"Id":"2718756559","IsPullRequest":true,"CreatedAt":"2024-12-04T20:47:39","Actor":"RobinMalfait","Number":"15303","RawContent":null,"Title":"Improve debug logs + small improvements","State":"open","Body":"This PR improves the debug logs for the `@tailwindcss/postcss` integration. It uses custom instrumentation to provide a nested but detailed overview of where time is spent during the build process.\r\n\r\nAdditionally, this PR also bails out in the `@tailwindcss/postcss` integration if we know it can't be a Tailwind CSS related CSS file. In that case, it doesn't even have to create a compiler or anything.\r\n\r\nWe do this by looping over the incoming PostCSS AST and check if any of the `@import`, `@config`, `@theme`, `@plugin` or `@apply` at rules are being used.\r\n\r\nIf none of them are found, we bail out early.\r\n\r\n\r\nThe updated logs look like this:\r\n```\r\n[0.15ms] [@tailwindcss/postcss] src/app/geistsans_9fc57718.module.css\r\n[0.14ms]   ↳ Quick bail check\r\n[0.02ms] [@tailwindcss/postcss] src/app/geistsans_9fc57718.module.css\r\n[0.01ms]   ↳ Quick bail check\r\n\r\n[0.03ms] [@tailwindcss/postcss] src/app/geistmono_b9f59162.module.css\r\n[0.02ms]   ↳ Quick bail check\r\n[0.12ms] [@tailwindcss/postcss] src/app/geistmono_b9f59162.module.css\r\n[0.11ms]   ↳ Quick bail check\r\n\r\n[42.09ms] [@tailwindcss/postcss] src/app/globals.css\r\n[ 0.01ms]   ↳ Quick bail check\r\n[12.12ms]   ↳ Setup compiler\r\n[ 0.11ms]     ↳ PostCSS AST -> Tailwind CSS AST\r\n[11.99ms]     ↳ Create compiler\r\n[ 0.07ms]   ↳ Register full rebuild paths\r\n[ 0.06ms]   ↳ Setup scanner\r\n[ 7.51ms]   ↳ Scan for candidates\r\n[ 5.86ms]   ↳ Register dependency messages\r\n[ 5.88ms]   ↳ Build utilities\r\n[ 8.34ms]   ↳ Optimization\r\n[ 0.23ms]     ↳ AST -> CSS\r\n[ 4.20ms]     ↳ Lightning CSS\r\n[ 3.89ms]     ↳ CSS -> PostCSS AST\r\n[ 1.97ms]   ↳ Update PostCSS AST\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15303","RelatedDescription":"Open PR \"Improve debug logs + small improvements\" (#15303)"},{"Id":"2718596606","IsPullRequest":false,"CreatedAt":"2024-12-04T19:15:41","Actor":"Fuzzyma","Number":"15302","RawContent":null,"Title":"Update chokidar to v4","State":"open","Body":"I would like to propose to update chokidar to v4. It reduces its dependency count by 11 deps and also brings better type safety.\r\nThis is part of the ecosystem cleanup initiative (https://e18e.dev). We try to modernize and declutter the ecosystem as best as we can.\r\nTailwind is downloaded over 46 million times per month and reducing its dependencies will have a huge impact and will lead to faster install times in ci and on dev machines.\r\n\r\nI would be happy to create a PR with the necessary changes if you are open for that :)\r\n\r\nPS: Sorry for misusing the bug tracker. I didn't know where to put it","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15302","RelatedDescription":"Open issue \"Update chokidar to v4\" (#15302)"},{"Id":"2715011019","IsPullRequest":true,"CreatedAt":"2024-12-04T15:28:16","Actor":"philipp-spiess","Number":"15285","RawContent":null,"Title":"Prepare v4.0.0-beta.5","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15285","RelatedDescription":"Closed or merged PR \"Prepare v4.0.0-beta.5\" (#15285)"},{"Id":"2717178990","IsPullRequest":true,"CreatedAt":"2024-12-04T14:43:59","Actor":"RobinMalfait","Number":"15297","RawContent":null,"Title":"Use AST transformations in `@tailwindcss/postcss`","State":"closed","Body":"This PR improves the `@tailwindcss/postcss` integration by using direct AST transformations between our own AST and PostCSS's AST. This allows us to skip a step where we convert our AST into a string, then parse it back into a PostCSS AST.\r\n\r\nThe only downside is that we still have to print the AST into a string if we want to optimize the CSS using Lightning CSS. Luckily this only happens in production (`NODE_ENV=production`).\r\n\r\nThis also introduces a new private `compileAst` API, that allows us to accept an AST as the input. This allows us to skip the PostCSS AST -> string -> parse into our own AST step.\r\n\r\nTo summarize:\r\n\r\nInstead of:\r\n- Input: `PostCSS AST` -> `.toString()` -> `CSS.parse(…)` -> `Tailwind CSS AST`\r\n- Output: `Tailwind CSS AST` -> `toCSS(ast)` -> `postcss.parse(…)` -> `PostCSS AST`\r\n\r\nWe will now do this instead:\r\n- Input: `PostCSS AST` -> `transform(…)` -> `Tailwind CSS AST`\r\n- Output: `Tailwind CSS AST` -> `transform(…)` -> `PostCSS AST`\r\n\r\n\r\n---\r\n\r\nRunning this on Catalyst, the time spent in the `@tailwindcss/postcss` looks like this:\r\n- Before: median time per run: 19.407687 ms\r\n- After: median time per run: 11.8796455 ms\r\n\r\nThis is tested on Catalyst which roughly generates ~208kb worth of CSS in dev mode.\r\n\r\nWhile it's not a lot, skipping the stringification and parsing seems to improve this step by ~40%.\r\n\r\nNote: these times exclude scanning the actual candidates and only time the work needed for parsing/stringifying the CSS from and into ASTs. The actual numbers are a bit higher because of the Oxide scanner reading files from disk. But since that part is going to be there no matter what, it's not fair to include it in this benchmark.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15297","RelatedDescription":"Closed or merged PR \"Use AST transformations in `@tailwindcss/postcss`\" (#15297)"},{"Id":"2717932558","IsPullRequest":false,"CreatedAt":"2024-12-04T14:35:39","Actor":"MonaAghili","Number":"15299","RawContent":null,"Title":"Range Input Accent Color with a Single Hex Value Not Switching Correctly Between Light and Dark Modes in Tailwind CSS","State":"closed","Body":"version of Tailwind CSS v3.4.3\r\nWe are using chrome and brave\r\nWe use Windows and MacOS\r\nWe are using `Phoenix LiveView` with `esbuild` for JavaScript bundling and asset management.\r\n\r\n**Reproduction URL**  \r\n[https://play.tailwindcss.com/DF91Zxjl2M](https://play.tailwindcss.com/DF91Zxjl2M)\r\n\r\n**The issue**  \r\nI have an `input` range field with a default `accent` color specified for both light and dark modes using the `accent-[color]` class. However, in light mode, the bar of the range field stays dark instead of using the specified light mode color. I tested this in the Tailwind Play playground, and the issue persists there as well, suggesting it might not be project-specific.\r\n\r\nHere’s an example of the code I used:\r\n```html\r\n<input type=\"range\" value=\"20\" name=\"form-example-3\" class=\"w-full accent-[#CA8D01] dark:accent-[#FDC034]\" max=\"100\" min=\"0\" />\r\n<input type=\"range\" value=\"40\" name=\"form-example-2\" class=\"w-full accent-[#CA8D01]\" max=\"100\" min=\"0\" />\r\n```\r\n\r\nI expect the range bar to change its accent color correctly between light and dark modes, but it remains dark in light mode. This issue also occurs in the Tailwind Play environment, as seen in the provided link.\r\n\r\nAny guidance on how to resolve this would be much appreciated!","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15299","RelatedDescription":"Closed issue \"Range Input Accent Color with a Single Hex Value Not Switching Correctly Between Light and Dark Modes in Tailwind CSS\" (#15299)"},{"Id":"2716466604","IsPullRequest":true,"CreatedAt":"2024-12-04T03:25:46","Actor":"thecrypticace","Number":"15294","RawContent":null,"Title":"Add `getThemeEntries` API","State":"open","Body":"This adds an API that lets us provide `@theme` variable completions from within core. The old list was hardcoded in IntelliSense but since the names for some of these changed recently we need a way to control this from within Tailwind CSS itself.\r\n\r\nIntelliSense PR: https://github.com/tailwindlabs/tailwindcss-intellisense/pull/1104\r\n\r\nDo we think this is worth a changelog entry? Kinda thinking not but idk","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15294","RelatedDescription":"Open PR \"Add `getThemeEntries` API\" (#15294)"},{"Id":"2716466509","IsPullRequest":true,"CreatedAt":"2024-12-04T03:25:40","Actor":"RyanYANG52","Number":"15293","RawContent":null,"Title":"feat: [v3] add support for `oklch oklab lch lab` color spaces","State":"open","Body":"Hi, currently in v3 doesn't support `oklab(var(--foo) / var(--alpha))`, I create this simple PR to add support for it.\r\n\r\nBecause v4 is still in beta, it would be very nice to try out some of the new color space in our current projects, before migrating to v4\r\n\r\n<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15293","RelatedDescription":"Open PR \"feat: [v3] add support for `oklch oklab lch lab` color spaces\" (#15293)"},{"Id":"2715344279","IsPullRequest":true,"CreatedAt":"2024-12-04T00:11:30","Actor":"thecrypticace","Number":"15288","RawContent":null,"Title":"Add some missing suggestions in IntelliSense","State":"closed","Body":"When we renamed the theme keys this got missed\r\n\r\nTheme keys like `--font-sans` will result in suggestions for `font-sans` again","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15288","RelatedDescription":"Closed or merged PR \"Add some missing suggestions in IntelliSense\" (#15288)"},{"Id":"2715769946","IsPullRequest":true,"CreatedAt":"2024-12-03T19:19:29","Actor":"shellscape","Number":"15289","RawContent":null,"Title":"fix: update lilconfig for ESM and Windows support","State":"closed","Body":"<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n\r\nThis PR updates `lilconfig` from v2.1.0 to v3.1.3. Significant improvements to this package include Windows absolute path support as well as ESM config files support. This supersedes https://github.com/tailwindlabs/tailwindcss/pull/14029 which has fallen behind and has conflicts with the upstream branch. This is a critical update for Next.js apps running in development which have dependencies on packages that use an updated version of `lilconfig`. I understand that v4 will not be using `lilconfig` but it's an important update for users on v3.x in the meantime. \r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15289","RelatedDescription":"Closed or merged PR \"fix: update lilconfig for ESM and Windows support\" (#15289)"},{"Id":"2714486007","IsPullRequest":true,"CreatedAt":"2024-12-03T12:48:52","Actor":"philipp-spiess","Number":"15282","RawContent":null,"Title":"Update changelog and add test for absolute url rebasing","State":"closed","Body":"I noticed uncommitted changes of #15275 on my local setup so here's the updated changelog and the added unit test.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15282","RelatedDescription":"Closed or merged PR \"Update changelog and add test for absolute url rebasing\" (#15282)"},{"Id":"2712035291","IsPullRequest":true,"CreatedAt":"2024-12-03T09:28:51","Actor":"philipp-spiess","Number":"15273","RawContent":null,"Title":"Postcss: Run plugin in `Once` hook","State":"closed","Body":"Closes #15138\r\n\r\nThis PR changes the postcss client to run in the `Once` hook instead of `OnceExit`. This makes sure the postcss order in v4 matches that of v3.\r\n\r\nConceptually this also makes more sense, since we expect tailwindcss to be run as one of the first plugins in the pipeline (where `OnceExit` would run it almost at the end).\r\n\r\nTo make sure it's still possible to use `postcss-import` before and have it resolve to the right paths, we also needed to change the `postcss-fix-relative-paths` plugin to run in the `Once` order (`postcss-import` also uses `Once` order so the order).\r\n\r\n## Test Plan\r\n\r\nThis issue had many ways in which it can manifest. I added a unit test to ensure the plugin order works but here's a concrete example when using the postcss plugin in Vite.\r\n\r\n### Before\r\n\r\nImage `url()`s were not properly handled since the postcss plugin to transform these was run before Tailwind CSS could generate the class for it:\r\n\r\n<img width=\"2532\" alt=\"Screenshot 2024-12-02 at 14 55 42\" src=\"https://github.com/user-attachments/assets/2f23b409-1576-441d-9ffe-6f24ad6e7436\">\r\n\r\n### After\r\n\r\n<img width=\"2529\" alt=\"Screenshot 2024-12-02 at 14 53 52\" src=\"https://github.com/user-attachments/assets/b754c3d8-1af1-4aeb-87da-0bfc3ffecdb7\">\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15273","RelatedDescription":"Closed or merged PR \"Postcss: Run plugin in `Once` hook\" (#15273)"},{"Id":"2713329383","IsPullRequest":true,"CreatedAt":"2024-12-02T22:08:13","Actor":"AlemTuzlak","Number":"15279","RawContent":null,"Title":"Fix resolution of imported CSS files in Vite SSR builds","State":"closed","Body":"It seems this change makes the below mentioned issue go away and seems to generate the correct tailwindcss output file durring the ssr build. Big shoutout to @rossipedia for figuring this out.\r\n\r\nI think you guys might want to take this over and own it as I'm not sure about other implications and if it breaks any other framework.\r\n\r\nFixes #15237\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15279","RelatedDescription":"Closed or merged PR \"Fix resolution of imported CSS files in Vite SSR builds\" (#15279)"},{"Id":"2712440266","IsPullRequest":true,"CreatedAt":"2024-12-02T19:48:01","Actor":"philipp-spiess","Number":"15274","RawContent":null,"Title":"Vite: Simplify preprocessor to make it work with Svelte 5 and Vite 6","State":"closed","Body":"Closes #15250\r\n\r\nThis PR simplifies our Vite integration even more. It turns out that in some projects (see #15250 for the exact repro), the way we invoke `svelte-preprocess` was actually causing issues in Vite since with Vite, it's expected to use the `sveltePreprocess` version exported by `sveltejs/vite-plugin-svelte`.\r\n\r\nWhile trying to change this we noticed that there are different versions of `sveltejs/vite-plugin-svelte` for Vite 5 and Vite 6 which caused us to investigate even more and we noticed that we do not even need to recursively call into the `sveltePreprocess()` as every plugin is run after each other anyways. This allows us to drop the dependency on `svelte-preprocess` and simplify the code a bit more, registering only a `(string) => string` style transformer.\r\n\r\n## Test Plan\r\n\r\nThis was tsted on the repro repo from #15250 as well as the SvelteKit setup from [my playgrounds](https://github.com/philipp-spiess/tailwindcss-playgrounds). Furthermore we tested various combinations of `svelte`, `@sveltejs/vite-plugin-svelte` and `vite` in our integration test to ensure everything works as expected. ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15274","RelatedDescription":"Closed or merged PR \"Vite: Simplify preprocessor to make it work with Svelte 5 and Vite 6\" (#15274)"},{"Id":"2712704688","IsPullRequest":true,"CreatedAt":"2024-12-02T19:23:38","Actor":"philipp-spiess","Number":"15275","RawContent":null,"Title":"Vite: Don't rebase absolute `url()`s","State":"closed","Body":"Closes #15269\r\n\r\nThis PR fixes an issue where our Vite extension was rebasing absolute urls inside `@import`-ed files. We forgot to cover this when we implemented the URL rebasing.\r\n\r\n## Test Plan\r\n\r\nWe validated that this fixes the repro in #15269:\r\n\r\n<img width=\"851\" alt=\"Screenshot 2024-12-02 at 18 07 35\" src=\"https://github.com/user-attachments/assets/3b2c2be3-1f73-469e-9f64-301c6b948b02\">\r\n\r\nAlso added a unit test for this.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15275","RelatedDescription":"Closed or merged PR \"Vite: Don't rebase absolute `url()`s\" (#15275)"},{"Id":"2711543827","IsPullRequest":true,"CreatedAt":"2024-12-02T19:03:10","Actor":"RobinMalfait","Number":"15270","RawContent":null,"Title":"Improve performance of scanning source files","State":"closed","Body":"This PR improves scanning files by scanning chunks of the files in parallel. Each chunk is separated by new lines since we can't use whitespace in classes anyway.\r\n\r\nThis also means that we can use the power of your CPU to scan files faster. The extractor itself also has less state to worry about on these smaller chunks.\r\n\r\nOn a dedicated benchmark machine: Mac Mini, M1, 16 GB RAM\r\n```shellsession\r\n❯ hyperfine --warmup 15 --runs 50 \\\r\n  -n NEW 'bun --bun /Users/ben/github.com/tailwindlabs/tailwindcss/packages/@tailwindcss-cli/src/index.ts -i ./tailwind.css -o out.css' \\\r\n  -n CURRENT 'bun --bun /Users/ben/github.com/tailwindlabs/tailwindcss--next/packages/@tailwindcss-cli/src/index.ts -i ./tailwind.css -o out.css'\r\nBenchmark 1: NEW\r\n  Time (mean ± σ):     337.2 ms ±   2.9 ms    [User: 1376.6 ms, System: 80.9 ms]\r\n  Range (min … max):   331.0 ms … 345.3 ms    50 runs\r\n\r\nBenchmark 2: CURRENT\r\n  Time (mean ± σ):     730.3 ms ±   3.8 ms    [User: 978.9 ms, System: 78.7 ms]\r\n  Range (min … max):   722.0 ms … 741.8 ms    50 runs\r\n\r\nSummary\r\n  NEW ran\r\n    2.17 ± 0.02 times faster than CURRENT\r\n```\r\n\r\n\r\nOn a more powerful machine, MacBook Pro M1 Max, 64 GB RAM, the results look even more promising:\r\n```shellsession\r\n❯ hyperfine --warmup 15 --runs 50 \\\r\n  -n NEW 'bun --bun /Users/robin/github.com/tailwindlabs/tailwindcss/packages/@tailwindcss-cli/src/index.ts -i ./tailwind.css -o out.css' \\\r\n  -n CURRENT 'bun --bun /Users/robin/github.com/tailwindlabs/tailwindcss--next/packages/@tailwindcss-cli/src/index.ts -i ./tailwind.css -o out.css'\r\nBenchmark 1: NEW\r\n  Time (mean ± σ):     307.8 ms ±  24.5 ms    [User: 1124.8 ms, System: 187.9 ms]\r\n  Range (min … max):   291.7 ms … 397.9 ms    50 runs\r\n\r\nBenchmark 2: CURRENT\r\n  Time (mean ± σ):     754.7 ms ±  27.2 ms    [User: 934.9 ms, System: 217.6 ms]\r\n  Range (min … max):   735.5 ms … 845.6 ms    50 runs\r\n\r\n  Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet system without any interferences from other programs. It might help to use the '--warmup' or '--prepare' options.\r\n\r\nSummary\r\n  NEW ran\r\n    2.45 ± 0.21 times faster than CURRENT\r\n```\r\n\r\n> Note: This last benchmark is running on my main machine which is more \"busy\" compared to my benchmark machine. Because of this I had to increase the `--runs` to get statistically better results. There is still a warning present, but the overall numbers are still very promising.\r\n\r\n---\r\n\r\nThese benchmarks are running on our Tailwind UI project where we have >1000 files, and >750 000 lines of code in those files.\r\n\r\n\r\n| Before | After |\r\n| --- | --- |\r\n| <img width=\"385\" alt=\"image\" src=\"https://github.com/user-attachments/assets/4786b842-bedc-4456-a9ca-942f72ca738c\"> | <img width=\"382\" alt=\"image\" src=\"https://github.com/user-attachments/assets/fb43cff8-95e7-453e-991e-d036c64659ba\"> |\r\n\r\n---\r\n\r\nI am sure there is more we can do here, because reading all of these 1000 files only takes ~10ms, whereas parsing all these files takes ~180ms. But I'm still happy with these results as an incremental improvement.\r\n\r\nFor good measure, I also wanted to make sure that we didn't regress on smaller projects. Running this on Catalyst, we only have to deal with ~100 files and ~18 000 lines of code. In this case reading all the files takes ~890µs and parsing takes about ~4ms.\r\n\r\n| Before | After |\r\n| --- | --- |\r\n| <img width=\"381\" alt=\"image\" src=\"https://github.com/user-attachments/assets/25d4859f-d058-4f57-a2f6-219d8c4b1804\"> | <img width=\"390\" alt=\"image\" src=\"https://github.com/user-attachments/assets/f06d7536-337b-4dc0-a460-6a9f141c65f5\"> |\r\n\r\nNot a huge difference, still better and definitely no regressions which sounds like a win to me.\r\n\r\n---\r\n\r\n**Edit:** after talking to @thecrypticace, instead of splitting on any whitespace we just split on newlines. This makes the chunks a bit larger, but it reduces the overhead of the extractor itself. This now results in a 2.45x speedup in Tailwind UI compared to 1.94x speedup.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15270","RelatedDescription":"Closed or merged PR \"Improve performance of scanning source files\" (#15270)"},{"Id":"2712753941","IsPullRequest":false,"CreatedAt":"2024-12-02T17:31:31","Actor":"vejja","Number":"15278","RawContent":null,"Title":"[v4] Tailwind utilities layer absent in production build when vite.build.minify is used","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNuxt (Vite)\r\n\r\n**What version of Node.js are you using?**\r\n\r\n20\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/siyosu/nuxt-ui-v3\r\nhttps://nuxt-ui-v3.vercel.app/\r\n\r\n**Describe your issue**\r\n\r\nThe Tailwind `utilities` layer is absent in the reproduction.\r\nObserve how the class `space-y-4` is not applied between the email input and the login button. \r\n\r\nPlease see details in full issue as originally posted here : https://github.com/nuxt-modules/security/issues/576\r\n\r\nThis is Nuxt Security team.\r\nOur context is the Nuxt Framework, but the issue appears to be unrelated to Nuxt.\r\nOur investigation found that the bug only appears when Vite is used with option `{ build: { minify: true } }` as documented in Vite here : https://vite.dev/config/build-options#build-minify\r\n\r\nAs a temporary workaround, we are disabling Vite's build minification.\r\nHowever we would like to be able to minify builds again. This breaks Tailwind for now.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15278","RelatedDescription":"Open issue \"[v4] Tailwind utilities layer absent in production build when vite.build.minify is used\" (#15278)"},{"Id":"2712726315","IsPullRequest":false,"CreatedAt":"2024-12-02T17:30:14","Actor":"sntran","Number":"15276","RawContent":null,"Title":"[v4] Underscores in arbitrary variant with class name are converted to spaces","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n`4.0.0-beta.4`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`@tailwindcss/cli@4.0.0-beta.4`\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.2\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/vIy4AY0qLN\r\n\r\n**Describe your issue**\r\n\r\nTailwind replaces the double underscores in arbitrary variant with spaces, from `wp-block-cover__inner-container` to `wp-block-cover  inner-container`.\r\n\r\n![image](https://github.com/user-attachments/assets/b0ebc26e-997f-4ec9-aa0d-3fc6df00452f)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15276","RelatedDescription":"Closed issue \"[v4] Underscores in arbitrary variant with class name are converted to spaces\" (#15276)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-12-08T03:30:23.7024337Z","RunDurationInMilliseconds":425}