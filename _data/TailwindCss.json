{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2616200876","IsPullRequest":true,"CreatedAt":"2024-10-26T23:11:17","Actor":"RobinMalfait","Number":"14802","RawContent":null,"Title":"Internal refactor, introduce `AtRule`","State":"open","Body":"This PR introduces an internal refactor where we introduce the `AtRule` CSS Node in our AST.\r\n\r\nThe motivation for this is that in a lot of places we need to differentiate between a `Rule` and an `AtRule`. We often do this with code that looks like this:\r\n\r\n```ts\r\nrule.selector[0] === '@' && rule.selector.startsWith('@media')\r\n```\r\n\r\nAnother issue we have is that we often need to check for `'@media '` including the space, because we don't want to match `@mediafoobar` if somebody has this in their CSS. Alternatively, if you CSS is minified then it could be that you have a rule that looks like `@media(width>=100px)`, in this case we _also_ have to check for `@media(`.\r\n\r\nHere is a snippet of code that we have in our codebase:\r\n\r\n```ts\r\n// Find at-rules rules\r\nif (node.kind === 'rule') {\r\n  if (\r\n    node.selector[0] === '@' &&\r\n    (node.selector.startsWith('@media ') ||\r\n      node.selector.startsWith('@media(') ||\r\n      node.selector.startsWith('@custom-media ') ||\r\n      node.selector.startsWith('@custom-media(') ||\r\n      node.selector.startsWith('@container ') ||\r\n      node.selector.startsWith('@container(') ||\r\n      node.selector.startsWith('@supports ') ||\r\n      node.selector.startsWith('@supports(')) &&\r\n    node.selector.includes(THEME_FUNCTION_INVOCATION)\r\n  ) {\r\n    node.selector = substituteFunctionsInValue(node.selector, resolveThemeValue)\r\n  }\r\n}\r\n```\r\n\r\nWhich will now be replaced with a much simpler:\r\n```ts\r\n// Find at-rules rules\r\nif (node.kind === 'at-rule') {\r\n  if (\r\n    (node.name === 'media' ||\r\n      node.name === 'custom-media' ||\r\n      node.name === 'container' ||\r\n      node.name === 'supports') &&\r\n    node.params.includes(THEME_FUNCTION_INVOCATION)\r\n  ) {\r\n    node.params = substituteFunctionsInValue(node.params, resolveThemeValue)\r\n  }\r\n}\r\n```\r\n\r\nChecking for all the cases from the first snippet is not the end of the world, but it is error prone. It's easy to miss a case.\r\n\r\nA direct comparison is also faster than comparing via the `startsWith(…)` function.\r\n\r\n---\r\n\r\nNote: this is only a refactor without changing other code _unless_ it was required to make the tests pass. The tests themselves are all passing and none of them changed (because the behavior should be the same).\r\nThe one exception is the tests where we check the parsed AST, which now includes `at-rule` nodes instead of `rule` nodes when we have an at-rule.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14802","RelatedDescription":"Open PR \"Internal refactor, introduce `AtRule`\" (#14802)"},{"Id":"2615684644","IsPullRequest":false,"CreatedAt":"2024-10-26T09:22:39","Actor":"binajmen","Number":"14800","RawContent":null,"Title":"[v4] Tailwind CSS classes not updating in output when adding previously unused classes - requires server restart","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n```\r\n\"@tailwindcss/vite\": \"^4.0.0-alpha.30\",\r\n\"tailwindcss\": \"^4.0.0-alpha.30\"\r\n```\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n```\r\n\"@solidjs/start\": \"^1.0.9\",\r\n\"vinxi\": \"^0.4.3\"\r\n```\r\n\r\n**What version of Node.js are you using?**\r\n\r\n```\r\n\"node\": \">=18\"\r\n```\r\n\r\n**What browser are you using?**\r\n\r\nFirefox\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nSince SolidStart isn't currently working on Stackblitz, please test locally:\r\n\r\n1. Clone the repository: `git clone https://github.com/binajmen/bun-solidstart-tw4`\r\n2. Install dependencies and start the dev server: `bun install && bun dev`\r\n3. You should see a colored background on the index page\r\n4. Try changing the background color class in `app.tsx` (e.g., to bg-blue-400) and save the file\r\n5. The background will turn white instead of updating to the new color\r\n6. Only after manually restarting bun dev will the new background color appear\r\n\r\n**Describe your issue**\r\n\r\nWhen adding Tailwind classes that weren't previously used anywhere in the codebase, these new classes aren't being included in the generated CSS file. The changes only take effect after manually restarting the development server.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14800","RelatedDescription":"Open issue \"[v4] Tailwind CSS classes not updating in output when adding previously unused classes - requires server restart\" (#14800)"},{"Id":"2615423259","IsPullRequest":true,"CreatedAt":"2024-10-26T01:01:19","Actor":"thecrypticace","Number":"14799","RawContent":null,"Title":"Make `config()` path arg optional in v4 plugin API","State":"open","Body":"Fixes #14797\r\n\r\nThe `config()` function in v3 had an optional `path` argument and when it wasn't provided it returned the resolved config directly so we need to do the same here.\r\n\r\nI've also added a `future` key to the config objects / types.\r\n\r\ncc @adamwathan any objection to adding this or do you think we can get by without it?","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14799","RelatedDescription":"Open PR \"Make `config()` path arg optional in v4 plugin API\" (#14799)"},{"Id":"2615141923","IsPullRequest":true,"CreatedAt":"2024-10-26T00:46:45","Actor":"luisrudge","Number":"14798","RawContent":null,"Title":"[Failing Test] - Fix multiple data attributes","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.0.0-alpha.30\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: \"postcss\": \"^8.4.47\",\r\n\r\n**Describe your issue**\r\n\r\n<img width=\"1828\" alt=\"image\" src=\"https://github.com/user-attachments/assets/d5aead10-99f6-4075-99b6-33cd91c26cd1\">\r\n\r\nThe upgrade was successful, however I can see in the diffs that only the first instance of the attribute was updated, not the other ones.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14798","RelatedDescription":"Closed or merged PR \"[Failing Test] - Fix multiple data attributes\" (#14798)"},{"Id":"2615112040","IsPullRequest":false,"CreatedAt":"2024-10-25T20:59:28","Actor":"adamwathan","Number":"14797","RawContent":null,"Title":"`config` is not fully compatible in plugin layer","State":"open","Body":"Just linking to an issue posted on react-spectrum:\r\n\r\nhttps://github.com/adobe/react-spectrum/issues/7263\r\n\r\nDon't have time to dig deeper but dropping here so we don't forget to investigate!","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14797","RelatedDescription":"Open issue \"`config` is not fully compatible in plugin layer\" (#14797)"},{"Id":"2614977107","IsPullRequest":false,"CreatedAt":"2024-10-25T19:47:39","Actor":"sceee","Number":"14796","RawContent":null,"Title":"@tailwindcss/vite 4.0.0-alpha.25 and above breaks Scoped CSS styles in Vue production builds (whereas in dev-builds they work)","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\nCurrently using `4.0.0-alpha.30` but the issue occurs since `4.0.0-alpha.25`.\r\nThe issue is **not** present in `4.0.0-alpha.24`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`vite 5.4.10`\r\n\r\n**What version of Node.js are you using?**\r\n\r\n`v20.18.0`\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/sceee/tailwind-vue-scoped-build-issue\r\n\r\nReproduction steps:\r\n1. Clone repo\r\n2. `npm i`\r\n3. `npm run dev`\r\n4. Check browser page, focus on the links beneath \"You did it\" - it displays the \"Vite + Vue 3\" links green and the \"Some fancy link\" red\r\n![image](https://github.com/user-attachments/assets/3c9df78c-eb60-4768-b158-324a984a94a9)\r\nThis is expected as the \"Some fancy link\" receives a scoped style that can also be seen in the devtools\r\n![image](https://github.com/user-attachments/assets/d083c324-d5d0-493d-8410-53a7e37ebbbd)\r\nwhich is defined as scoped here:\r\nhttps://github.com/sceee/tailwind-vue-scoped-build-issue/blob/31c440f57f16fef1671da722f2c6921f08f7ac2d/src/App.vue#L21-L24\r\n\r\n5. Stop HMR webserver\r\n6. Run `npm run build`\r\n7. Run `npm run preview` to serve the production build\r\n8. Check browser page of the preview - it now displays the \"Vite + Vue3\" links also (incorrectly) red\r\n![image](https://github.com/user-attachments/assets/8823566e-f2ad-4f58-8978-e72703abfb72)\r\nSee that the (initially) style is now no longer scoped in the browser devtools:\r\n![image](https://github.com/user-attachments/assets/7ebeb21f-3ce3-450d-b5ca-ae4996e91ae9)\r\nInstead it is now a global style.\r\n\r\nAs written above, this was introduced with `4.0.0-alpha.25`.\r\nIf you downgrade to `4.0.0-alpha.24`, this issue no longer happens and the scoped style remains during production builds.\r\n\r\n_I could imagine it has something to do with the dependency changes for @tailwindcss/vite from .24 to .25 (regarding the `postcss` removal) but this is just a random guess._\r\n\r\n**Describe your issue**\r\n\r\nThe issue is that css defined in a scoped `<style scoped> ... </style>` tag results only in scoped css when being served as dev builds.\r\nIn production builds, these styles are no longer scoped, instead they are just \"global\" css and therefore unintentionally affect other elements.\r\n\r\nSee reproduction steps abov - both (dev and production builds) should emit the same scoped css like\r\n![image](https://github.com/user-attachments/assets/543f9ccb-e776-425e-b1aa-8d24b4346c19)\r\ninstead of being different between dev and production builds.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14796","RelatedDescription":"Open issue \"@tailwindcss/vite 4.0.0-alpha.25 and above breaks Scoped CSS styles in Vue production builds (whereas in dev-builds they work)\" (#14796)"},{"Id":"2613515751","IsPullRequest":true,"CreatedAt":"2024-10-25T09:31:34","Actor":"philipp-spiess","Number":"14792","RawContent":null,"Title":"Revert \"Fix Astro integration test by pinning `zod-to-json-schema`\"","State":"closed","Body":"Reverts tailwindlabs/tailwindcss#14780\r\n\r\nThe version pin is no longer needed. 🙂 \r\n\r\n## Test Plan\r\n\r\nCI is green again.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14792","RelatedDescription":"Closed or merged PR \"Revert \"Fix Astro integration test by pinning `zod-to-json-schema`\"\" (#14792)"},{"Id":"2613543665","IsPullRequest":true,"CreatedAt":"2024-10-25T09:13:51","Actor":"philipp-spiess","Number":"14793","RawContent":null,"Title":"Plugin API: Allow custom utilities to start with `@`","State":"open","Body":"Closes #14791\n\nAdd support to the JS Plugin interop layer for utilities that _start with_ `@`. This ensures no breaking when trying to load plugins that contribute utilities like `@container` from `@tailwindcss/container-queries` (even though the `@container` utility is now part of core).\n\n## Test Plan\n\nAdded the `@tailwindcss/container-queries` plugin to to the Vite example:\n![Screenshot 2024-10-25 at 11.18.19.png](https://graphite-user-uploaded-assets-prod.s3.amazonaws.com/0Y77ilPI2WoJfMLFiAEw/3761c0a8-8c54-42eb-a1fd-213c4215c024.png)\n\nHowever, in order for the Vite example to load the extension, I also had to apply the following patch:\n\n![Screenshot 2024-10-25 at 11.18.54.png](https://graphite-user-uploaded-assets-prod.s3.amazonaws.com/0Y77ilPI2WoJfMLFiAEw/bd151684-ff7b-4805-b305-71ac0378c610.png)\n\nI think this is related to our dev system though, the compiled plugin file is going to be a flat file with no requires in our public release.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14793","RelatedDescription":"Open PR \"Plugin API: Allow custom utilities to start with `@`\" (#14793)"},{"Id":"2612920442","IsPullRequest":false,"CreatedAt":"2024-10-25T02:30:11","Actor":"ziloen","Number":"14791","RawContent":null,"Title":"[v4] `@container` is an invalid utility name","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.30\r\n\r\n**Reproduction URL**\r\n\r\n**Describe your issue**\r\n\r\nI am trying to upgrade to v4, but encountered the following error when using `@tailwindcss/container-queries`:\r\n```\r\n`matchUtilities({ '@container' : … })` defines an invalid utility name. Utilities should be alphanumeric and start with a lowercase letter, eg. `scrollbar`\r\n```\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/10a8f1a7257ccd893ea2251279018c8da5541d90/packages/tailwindcss/src/compat/plugin-api.ts#L78","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14791","RelatedDescription":"Open issue \"[v4] `@container` is an invalid utility name\" (#14791)"},{"Id":"2612480450","IsPullRequest":true,"CreatedAt":"2024-10-24T20:22:08","Actor":"thecrypticace","Number":"14789","RawContent":null,"Title":"Prepare v4.0.0-alpha.30 release","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14789","RelatedDescription":"Closed or merged PR \"Prepare v4.0.0-alpha.30 release\" (#14789)"},{"Id":"2612463611","IsPullRequest":true,"CreatedAt":"2024-10-24T20:11:59","Actor":"RobinMalfait","Number":"14788","RawContent":null,"Title":"Handle feedback from #14783","State":"closed","Body":"This PR is a continuation of #14783 to handle the feedback on that PR.\n\n1. Update the test to be more realistic\n2. Updated the comment\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14788","RelatedDescription":"Closed or merged PR \"Handle feedback from #14783\" (#14788)"},{"Id":"2612452664","IsPullRequest":true,"CreatedAt":"2024-10-24T20:10:20","Actor":"adamwathan","Number":"14787","RawContent":null,"Title":"Sort text wrapping utilities with typography utilities","State":"closed","Body":"This PR implements some changes to the way we sort typography utilities, inspired by #14715.\r\n\r\nPrior to this PR, utilities like `text-balance`, `break-words`, and `text-center` were sorted very early, even before things like border utilities:\r\n\r\n```html\r\n<div class=\"text-balance break-words border-2 border-blue-500 text-center indent-5 text-2xl font-medium capitalize leading-6 tracking-tight text-red-500 underline\"></div>\r\n```\r\n\r\nThis PR changes the sort order to co-locate these with other typography utilities which feels a lot more natural:\r\n\r\n```html\r\n<div class=\"border-2 border-blue-500 text-center indent-5 text-2xl leading-6 font-medium tracking-tight text-balance break-words text-red-500 capitalize underline\"></div>\r\n```\r\n\r\nI've also made some small adjustments to how other typography properties are sorted based on pairing with @reinink and just deciding what felt the most intuitive to us and matched the order we'd likely type things in manually.\r\n\r\nTo test this change I temporarily added a new test to `sort.test.ts` to make sure the classes were sorted in the expected order:\r\n\r\n```js\r\n  [\r\n    // Input\r\n    'text-red-500 text-center capitalize text-2xl break-words text-balance underline font-medium tracking-tight leading-6 indent-5',\r\n\r\n    // Expected\r\n    'text-center indent-5 text-2xl leading-6 font-medium tracking-tight text-balance break-words text-red-500 capitalize underline',\r\n  ],\r\n```\r\n\r\nDidn't keep the test around because there's no real logic to test here (it just matches the order in the `property-order.ts` file) and we don't have any other tests like this.\r\n\r\nI've also made some minor unrelated changes here like deleting legacy properties from `property-order.ts` that are never used, and fixing a typo where we wrote `work-break` instead of `word-break`.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14787","RelatedDescription":"Closed or merged PR \"Sort text wrapping utilities with typography utilities\" (#14787)"},{"Id":"2612395256","IsPullRequest":true,"CreatedAt":"2024-10-24T20:07:10","Actor":"thecrypticace","Number":"14786","RawContent":null,"Title":"Fix `word-break` typo","State":"closed","Body":"Fixes #14715","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14786","RelatedDescription":"Closed or merged PR \"Fix `word-break` typo\" (#14786)"},{"Id":"2612289292","IsPullRequest":true,"CreatedAt":"2024-10-24T18:50:21","Actor":"thecrypticace","Number":"14785","RawContent":null,"Title":"Update changelog details and naming around the new `not-*` variant","State":"closed","Body":"I've tweaked the changelog with suggestions from @adamwathan to improve clarity around what the actual changes are.\r\n\r\nI also renamed `compoundWith` back to `compound` — I felt that it made sense at the time but keeping the old name definitely feels better the more I think about it.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14785","RelatedDescription":"Closed or merged PR \"Update changelog details and naming around the new `not-*` variant\" (#14785)"},{"Id":"2612055165","IsPullRequest":true,"CreatedAt":"2024-10-24T18:33:10","Actor":"RobinMalfait","Number":"14783","RawContent":null,"Title":"Ensure `layer(…)` on `@import` is only removed when `@utility` is present","State":"closed","Body":"This PR fixes an issue where `layer(…)` next to imports were removed where they shouldn't have been removed.\r\n\r\nThe issue exists if _any_ of the `@import` nodes in a file contains `@utility`, if that's the case then we removed the `layer(…)` next to _all_ `@import` nodes.\r\n\r\nBefore we were checking if the current sheet contained `@utility` or in any of its children (sub-`@import` nodes).\r\n\r\nThis fixes that by looping over the `@import` nodes in the current sheet, and looking for the `@utility` in the associated/imported file. This way we update each node individually.\r\n\r\nTest plan:\r\n---\r\n\r\nAdded a dedicated integration test to make sure all codemods together result in the correct result. Input:\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/96e890837809487fecdd713695294cb9961cc1d6/integrations/upgrade/index.test.ts#L2076-L2108\r\n\r\nOutput:\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/96e890837809487fecdd713695294cb9961cc1d6/integrations/upgrade/index.test.ts#L2116-L2126","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14783","RelatedDescription":"Closed or merged PR \"Ensure `layer(…)` on `@import` is only removed when `@utility` is present\" (#14783)"},{"Id":"2611183707","IsPullRequest":true,"CreatedAt":"2024-10-24T17:19:56","Actor":"RobinMalfait","Number":"14773","RawContent":null,"Title":"Only generate Preflight compatibility styles when Preflight is used","State":"closed","Body":"This PR improves where we inject the border compatibility CSS. Before this change we injected it if it was necessary in one of these spots:\n\n- Above the first `@layer base` to group it together with existing `@layer base` at-rules.\n- If not present, after the last `@import`, to make sure that we emit valid CSS because `@import` should be at the top (with a few exceptions).\n\nHowever, if you are working with multiple CSS files, then it could be that we injected the border compatibility CSS multiple times if those files met one of the above conditions.\n\nTo solve this, we now inject the border compatibility CSS with the same rules as above, but we also have another condition:\n\nThe border compatibility CSS is only injected if the file also has a `@import \"tailwindcss\";` _or_ `@import \"tailwindcss/preflight\";` in the current file.\n\n---\n\nAdded integration tests to make sure that we are generating what we expect in a real environment. Some of the integration tests also use the old `@tailwind` directives to make sure that the order of migrations is correct (first migrate to `@import` syntax, then inject the border compatibility CSS).\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14773","RelatedDescription":"Closed or merged PR \"Only generate Preflight compatibility styles when Preflight is used\" (#14773)"},{"Id":"2611857376","IsPullRequest":true,"CreatedAt":"2024-10-24T16:49:23","Actor":"philipp-spiess","Number":"14778","RawContent":null,"Title":"Upgrade: Ensure underscores in url() and var() are not escaped","State":"closed","Body":"This PR fixes an issue where currently a `theme()` function call inside an arbitrary value that used a dot in the key path:\n\n```jsx\nlet className = \"ml-[theme(spacing[1.5])]\"\n```\n\nWas causing issues when going though the codemod. The issue is that for candidates, we require `_` to be _escaped_, since otherwise they will be replaced with underscore. When going through the codemods, the above candidate would be translated to the following CSS variable access:\n\n```js\nlet className = \"ml-[var(--spacing-1\\_5))\"\n```\n\nBecause the underscore was escaped, we now have an invalid string inside a JavaScript file (as the `\\` would escape inside the quoted string. \n\nTo resolve this, we decided that this common case (as its used by the Tailwind CSS default theme) should work without escaping. In https://github.com/tailwindlabs/tailwindcss/pull/14776, we made the changes that CSS variables used via `var()` no longer unescape underscores. This PR extends that so that the Variant printer (that creates the serialized candidate representation after the codemods make changes) take this new encoding into account.\n\nThis will result in the above example being translated into:\n\n```js\nlet className = \"ml-[var(--spacing-1_5))\"\n```\n\nWith no more escaping. Nice!\n\n## Test Plan\n\nI have added test for this to the kitchen-sink upgrade tests. Furthermore, to ensure this really works full-stack, I have updated the kitchen-sink test to _actually build the migrated project with Tailwind CSS v4_. After doing so, we can assert that we indeed have the right class name in the generated CSS.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14778","RelatedDescription":"Closed or merged PR \"Upgrade: Ensure underscores in url() and var() are not escaped\" (#14778)"},{"Id":"2611985993","IsPullRequest":true,"CreatedAt":"2024-10-24T16:49:05","Actor":"philipp-spiess","Number":"14781","RawContent":null,"Title":"Ensure underscore in theme() are also preserved","State":"closed","Body":"Quick follow-up to #14776 to treat the `theme()` function the same way.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14781","RelatedDescription":"Closed or merged PR \"Ensure underscore in theme() are also preserved\" (#14781)"},{"Id":"2612011287","IsPullRequest":false,"CreatedAt":"2024-10-24T16:39:57","Actor":"sntran","Number":"14782","RawContent":null,"Title":"[v4]: combine `peer-` with other variants","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\ntailwindcss v4.0.0-alpha.29\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n@tailwindcss/cli v4.0.0-alpha.29\r\n\r\n**What version of Node.js are you using?**\r\n\r\nNode v20.12.2\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/hqwKODvklG\r\n\r\n**Describe your issue**\r\n\r\nA variant such as `is-summary` should be combinable with `peer-` to be effective, e.g. `peer-is-summary:bg-amber-400`.\r\n\r\nCurrently, the generated CSS is\r\n\r\n```css\r\n.\\*\\:peer-is-summary\\:bg-amber-400 {\r\n  :where(& > *) {\r\n    &:is(:where(.peer):is(summary) ~ *) {\r\n      background-color: var(--color-amber-400, oklch(0.828 0.189 84.429));\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhile that is correct with `peer-` expecting a previous sibling with `.peer` class, I can't find a way to add that when I don't have control over the markup. `*:is-summary:peer` does not work.\r\n\r\nIn this particular use case, `is-` variants are special because they already target a certain element, so requiring `.peer` may not be necessary.\r\n\r\nWould this be a use case to have `is-*` varirants (with `*` can be any arbitrary selector) built in Tailwind? ","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14782","RelatedDescription":"Closed issue \"[v4]: combine `peer-` with other variants\" (#14782)"},{"Id":"2612068126","IsPullRequest":false,"CreatedAt":"2024-10-24T16:29:08","Actor":"slavarazum","Number":"14784","RawContent":null,"Title":"[4 alpha] breaks the default Vite `url(...)` references in imported CSS files.","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: alpha.29 (latest)\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: Vite 5.4.10 (latest)\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v20.9.0\r\n\r\n**What browser are you using?**\r\n\r\nMainly Safari, however it's not related to the issue 🙃\r\n\r\n**What operating system are you using?**\r\n\r\nMacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/slavarazum/tailwind4-alpha-vite/\r\n\r\n**Describe your issue**\r\n\r\nVite provides [@import inline and rebasing](https://vite.dev/guide/features.html#import-inlining-and-rebasing) for CSS.\r\nI'm trying to import font from the Fontsource library: https://fontsource.org/fonts/nunito which references font files using `url(...)`.\r\n\r\nAs a result we have such rebased urls:\r\n![CleanShot 2024-10-24 at 17 32 22@2x](https://github.com/user-attachments/assets/3fad2d36-a1ab-48c2-89d1-34484a90edf4)\r\n\r\nAfter installing Tailwind, importing it, and enabling the Vite plugin, the URLs remain with the default related paths:\r\n![CleanShot 2024-10-24 at 17 35 46@2x](https://github.com/user-attachments/assets/c24fa7a4-707c-45c7-842a-efef23990390)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14784","RelatedDescription":"Open issue \"[4 alpha] breaks the default Vite `url(...)` references in imported CSS files.\" (#14784)"},{"Id":"2611733748","IsPullRequest":true,"CreatedAt":"2024-10-24T15:41:58","Actor":"philipp-spiess","Number":"14776","RawContent":null,"Title":"Don't escape underscores for the first parameter of `var()`","State":"closed","Body":"This PR updates our arbitrary value decoder to:\n\n- No longer require an escaping for underscores in the first parameter of `var()`. Example:\n\n    ```\n    ml-[var(--spacing-1_5,_1rem)]\n    ```\n\n- Ensures that properties before an eventual `url()` are properly unescaped. Example:\n    ```\n    bg-[no-repeat_url(./image.jpg)]\n    ```\n\nI will ensure that this properly works for the migrate use case in a follow-up PR in the stack.\n\n## Test Plan\n\nAdded unit tests as well as tests for the variant decoder. Additionally this PR also adds a higher-level test using the public Tailwind APIs to ensure this is properly propagated.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14776","RelatedDescription":"Closed or merged PR \"Don't escape underscores for the first parameter of `var()`\" (#14776)"},{"Id":"2611626710","IsPullRequest":true,"CreatedAt":"2024-10-24T15:34:19","Actor":"philipp-spiess","Number":"14775","RawContent":null,"Title":"Resolve third-party plugins with `exports` in their `package.json`","State":"closed","Body":"This PR fixes an issue when trying to resolve plugins with `exports` in their `package.json`, like `@headlessui/tailwindcss`. The missing `conditionNames` in the enhanced resolver config would cause it to not properly look up the name.\n\n## Test Plan\n\nI added a test using the `postcss` setup (the existing plugin tests are inside the CLI setup but the CLI can only ever run in Module JS mode).\n\nTo ensure the tests are resolving to the right environment (CJS vs MJS), I added logging of the `import.meta.url` value to the resolver code. When run, this was the output:\n\n![Screenshot 2024-10-24 at 15.28.10.png](https://graphite-user-uploaded-assets-prod.s3.amazonaws.com/0Y77ilPI2WoJfMLFiAEw/c0197934-7b61-47c4-bda5-de037b31d43a.png)\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14775","RelatedDescription":"Closed or merged PR \"Resolve third-party plugins with `exports` in their `package.json`\" (#14775)"},{"Id":"2611409443","IsPullRequest":true,"CreatedAt":"2024-10-24T15:31:13","Actor":"philipp-spiess","Number":"14774","RawContent":null,"Title":"Upgrade: Improve heuristics around important codemod","State":"closed","Body":"This PR improves the heuristics around the important codemod (e.g. `!border` => `border!`) as we noticed a few more cases where we the current heuristics was not enough. \n\nSpecifically, we made it not migrate the candidate in the following conditions:\n\n- When there's an immediate property access: `{ \"foo\": !border.something + \"\"}`\n- When it's used as condition in the template language: `<div v-if=\"something && !border\"></div>` or `<div x-if=\"!border\"></div>`\n\n## Test plan\n\nI added test cases to the unit tests and updated the integration test to contain a more sophisticated example.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14774","RelatedDescription":"Closed or merged PR \"Upgrade: Improve heuristics around important codemod\" (#14774)"},{"Id":"2611904315","IsPullRequest":true,"CreatedAt":"2024-10-24T15:18:57","Actor":"philipp-spiess","Number":"14780","RawContent":null,"Title":"Fix Astro integration test by pinning `zod-to-json-schema`","State":"closed","Body":"A regression in one of the dependencies of `astro` has broken our integration tests. An upstream issue already exists and is tracked as https://github.com/StefanTerdell/zod-to-json-schema/issues/151.\n\nThis PR pins `zod-to-json-schema` to unblock the issue.\n\n## Test Plan\n\n1. I made sure that `pnpm test:integrations astro` fails locally as well\n2. After the change, it passes again:\n    ![Screenshot 2024-10-24 at 17.16.27.png](https://graphite-user-uploaded-assets-prod.s3.amazonaws.com/0Y77ilPI2WoJfMLFiAEw/3a35eca7-8d31-41e0-b961-c1fd1ed55ba6.png)\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14780","RelatedDescription":"Closed or merged PR \"Fix Astro integration test by pinning `zod-to-json-schema`\" (#14780)"},{"Id":"2609619128","IsPullRequest":true,"CreatedAt":"2024-10-24T15:00:26","Actor":"adamwathan","Number":"14769","RawContent":null,"Title":"Register `migrateImport` to ensure it actually runs","State":"closed","Body":"This PR makes sure the `migrateImport` codemod is properly registered so that it runs as part of the upgrade process.\r\n\r\n## Test plan\r\n\r\nThis PR adds a new `v3` playground with an `upgrade` script that you can use to run the upgrade from the local package. When you add a non-prefixed `@import` to the v3 example, the paths are now properly updated with no errors logged:\r\n\r\nhttps://github.com/user-attachments/assets/85949bbb-756b-4ee2-8ac0-234fe1b2ca39\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14769","RelatedDescription":"Closed or merged PR \"Register `migrateImport` to ensure it actually runs\" (#14769)"},{"Id":"2610570992","IsPullRequest":false,"CreatedAt":"2024-10-24T14:58:42","Actor":"Malik-Jouda","Number":"14772","RawContent":null,"Title":"The `ps-10` or `pe-10` is not applied as expected because `px-5` takes precedence.","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.28\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nnuxt 3.13.2, nuxt ui3 v3.0.0-alpha.7\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.9.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/user-attachments/assets/fc5c1401-e915-4a0f-a0a4-1591adb14b67\r\n\r\n**Describe your issue**\r\n\r\nin version 4.0.0-alpha.28, the  `ps-10` is not applied as expected because `px-5` takes precedence, while in version 3.4.13, `ps-10` works correctly.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14772","RelatedDescription":"Closed issue \"The `ps-10` or `pe-10` is not applied as expected because `px-5` takes precedence.\" (#14772)"},{"Id":"2611782148","IsPullRequest":true,"CreatedAt":"2024-10-24T14:58:41","Actor":"adamwathan","Number":"14777","RawContent":null,"Title":"Ensure individual logical property utilities are sorted later than left/right pair utilities","State":"closed","Body":"Resolves #14772.\r\n\r\nThis PR fixes an issue where utilities like `ps-2` were sorted earlier in the generated CSS than `px-3`, causing `ps-2` to not override `px-3` as expected.\r\n\r\nThis happened because `px-3` uses `padding-left` and `padding-right`, and `ps-2` uses `padding-inline-start`, and in `property-order.ts` we sort those properties as follows:\r\n\r\n```js\r\n  ...\r\n  'padding',\r\n  'padding-inline',\r\n  'padding-block',\r\n  'padding-inline-start',\r\n  'padding-inline-end',\r\n  'padding-top',\r\n  'padding-right',\r\n  'padding-bottom',\r\n  'padding-left',\r\n  ...\r\n```\r\n\r\nSince `padding-left` and `padding-right` both appear later than `padding-inline-start`, the `px-3` utility is sorted later in the CSS since all of its properties are later in the sort order than all of properties in `ps-2`.\r\n\r\nTo fix this, I'm using our internal `--tw-sort` property to tell Tailwind to sort the `px-3` utility as if it used `padding-inline` to ensure that it's sorted earlier in the CSS.\r\n\r\nThis PR applies this same fix for the `padding` utilities, `scroll-margin` utilities, and `scroll-padding` utilities. No changes have been made to the `margin` utilities because we were already handling this correctly there.\r\n\r\nHere you can see that `pl-2` overrides `px-6` as you'd expect:\r\n\r\n<img width=\"1041\" alt=\"image\" src=\"https://github.com/user-attachments/assets/fb330536-2131-4de8-a584-62edf380148f\">\r\n\r\n…and now with the change in this PR, `ps-2` also overrides `px-6` as you'd expect:\r\n\r\n<img width=\"1043\" alt=\"image\" src=\"https://github.com/user-attachments/assets/c6799416-9c80-4fd5-bce4-ea1e4da53968\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14777","RelatedDescription":"Closed or merged PR \"Ensure individual logical property utilities are sorted later than left/right pair utilities\" (#14777)"},{"Id":"2609882052","IsPullRequest":true,"CreatedAt":"2024-10-24T09:25:51","Actor":"depfu[bot]","Number":"14771","RawContent":null,"Title":"Update picocolors 1.0.1 → 1.1.1 (minor)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ picocolors (1.0.1 → 1.1.1) · [Repo](https://github.com/alexeyraspopov/picocolors) · [Changelog](https://github.com/alexeyraspopov/picocolors/blob/main/CHANGELOG.md)\n\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/alexeyraspopov/picocolors/releases/tag/v1.1.1\">1.1.1</a></h4>\n\n<blockquote><h2 dir=\"auto\">What's new?</h2>\n<ul dir=\"auto\">\n<li>Moved TypeScript declarations to a <code class=\"notranslate\">d.ts</code> file <a href=\"https://bounce.depfu.com/github.com/alexeyraspopov/picocolors/pull/82\">#82</a>\n</li>\n<li>Reworked color detection algorithm to properly work with empty strings in <code class=\"notranslate\">NO_COLOR</code> and <code class=\"notranslate\">FORCE_COLOR</code> env variables <a href=\"https://bounce.depfu.com/github.com/alexeyraspopov/picocolors/pull/87\">#87</a>\n</li>\n<li>Eliminated <code class=\"notranslate\">require()</code> call to make the package compatible with some tools <a href=\"https://bounce.depfu.com/github.com/alexeyraspopov/picocolors/pull/87\">#87</a>\n</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/alexeyraspopov/picocolors/releases/tag/v1.1.0\">1.1.0</a></h4>\n\n<blockquote><h2 dir=\"auto\">What's new?</h2>\n<ul dir=\"auto\">\n<li>Added bright color variants <a href=\"https://bounce.depfu.com/github.com/alexeyraspopov/picocolors/pull/55\">#55</a>\n</li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/picocolors/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/alexeyraspopov/picocolors/compare/5f0c047cd61b51e5d794e3ac1ef700095e9bb6a8...7249f8c5d4825550f70bc1ea98652639933d3bbd\">See the full diff on Github</a>. The new version differs by 10 commits:</p>\n<ul>\n<li><a href=\"https://github.com/alexeyraspopov/picocolors/commit/7249f8c5d4825550f70bc1ea98652639933d3bbd\"><code>picocolors@1.1.1</code></a></li>\n<li><a href=\"https://github.com/alexeyraspopov/picocolors/commit/6f0a4638348ed20633d623ee973f9c9a96f65104\"><code>Add chalk v5 and yoctocolors to benchmarks (#88)</code></a></li>\n<li><a href=\"https://github.com/alexeyraspopov/picocolors/commit/5b01210390006229a9c9f4622234d43124b9daeb\"><code>Rework color detection (#87)</code></a></li>\n<li><a href=\"https://github.com/alexeyraspopov/picocolors/commit/ef5553ba6fb1eee709a1705f758b286b0e266849\"><code>fix: usage of `node12` in `testing.yaml` (#73)</code></a></li>\n<li><a href=\"https://github.com/alexeyraspopov/picocolors/commit/4c5e981af1f462dfda9817606978b0428f165ad4\"><code>Use mitata, esbuild for benchmarking speed and size (#86)</code></a></li>\n<li><a href=\"https://github.com/alexeyraspopov/picocolors/commit/6a1eb72682f21c47c2102bafdfa5b82c92ef92d0\"><code>fix(types): move types declaration into &quot;real&quot; types declaration file (.d.ts) (#82)</code></a></li>\n<li><a href=\"https://github.com/alexeyraspopov/picocolors/commit/4e946891bb511accf089f4d52003afbcbc1bb928\"><code>picocolors@1.1.0</code></a></li>\n<li><a href=\"https://github.com/alexeyraspopov/picocolors/commit/6f6011182c0f16cf119019ca9bef1fadbe86b913\"><code>test: add test (shouldn&#39;t overflow when coloring already colored large text) (#74)</code></a></li>\n<li><a href=\"https://github.com/alexeyraspopov/picocolors/commit/1d7a86dc58209976bff7bc40307646136847aa70\"><code>feat: bright colors variants (#55)</code></a></li>\n<li><a href=\"https://github.com/alexeyraspopov/picocolors/commit/9dd71a05b6674058ec0e1d3dec62c2afe93fb472\"><code>misc</code></a></li>\n</ul>\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14771","RelatedDescription":"Closed or merged PR \"Update picocolors 1.0.1 → 1.1.1 (minor)\" (#14771)"},{"Id":"2609193937","IsPullRequest":true,"CreatedAt":"2024-10-23T18:52:09","Actor":"RobinMalfait","Number":"14766","RawContent":null,"Title":"Hide skipped tests","State":"closed","Body":"Very small quality of life improvement, but let's hide skipped tests. The summary still shows that there are skipped tests, but this makes the UI much better. Especially when debugging a single test, then you don't need to scroll up all the time.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14766","RelatedDescription":"Closed or merged PR \"Hide skipped tests\" (#14766)"},{"Id":"2609195161","IsPullRequest":true,"CreatedAt":"2024-10-23T16:28:31","Actor":"RobinMalfait","Number":"14767","RawContent":null,"Title":"Handle new `source(…)`","State":"open","Body":"This PR introduces a new `source(…)` argument and improves on the existing `@source`. The goal of this PR is to make the automatic source detection configurable, let's dig in.\r\n\r\nBy default, we will perform automatic source detection starting at the current working directory. Auto source detection will find plain text files (no binaries, images, ...) and will ignore git-ignored files.\r\n\r\nIf you want to start from a different directory, you can use the new `source(…)` next to the `@import \"tailwindcss/utilities\" layer(utilities) source(…)`.\r\n\r\nE.g.:\r\n\r\n```css\r\n/* ./src/styles/index.css */\r\n@import 'tailwindcss/utilities' layer(utilities) source('../../');\r\n```\r\n\r\nMost people won't split their source files, and will just use the simple `@import \"tailwindcss\";`, because of this reason, you can use `source(…)` on the import as well:\r\n\r\nE.g.:\r\n\r\n```css\r\n/* ./src/styles/index.css */\r\n@import 'tailwindcss' source('../../');\r\n```\r\n\r\nSometimes, you want to rely on auto source detection, but also want to look in another directory for source files. In this case, yuo can use the `@source` directive:\r\n\r\n```css\r\n/* ./src/index.css */\r\n@import 'tailwindcss';\r\n\r\n/* Look for `blade.php` files in `../resources/views` */\r\n@source '../resources/views/**/*.blade.php';\r\n```\r\n\r\nHowever, you don't need to specify the extension, instead you can just point the directory and all the same automatic source detection rules will apply.\r\n\r\n```css\r\n/* ./src/index.css */\r\n@import 'tailwindcss';\r\n\r\n@source '../resources/views';\r\n```\r\n\r\nIf, for whatever reason, you want to disable the default source detection feature entirely, and only want to rely on very specific glob patterns you define, then you can disable it via `source(none)`.\r\n\r\n```css\r\n/* Completely disable the default auto source detection */\r\n@import 'tailwindcss' source(none);\r\n\r\n/* Only look at .blade.php files, nothing else  */\r\n@source \"../resources/views/**/*.blade.php\";\r\n```\r\n\r\nNote: even with `source(none)`, if your `@source` points to a directory, then auto source detection will still be performed in that directory. If you don't want that, then you can simply add explicit files in the globs as seen in the previous example.\r\n\r\n```css\r\n/* Completely disable the default auto source detection */\r\n@import 'tailwindcss' source(none);\r\n\r\n/* Run auto source detection in `../resources/views` */\r\n@source \"../resources/views\";\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14767","RelatedDescription":"Open PR \"Handle new `source(…)`\" (#14767)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-10-27T03:30:22.7683389Z","RunDurationInMilliseconds":430}