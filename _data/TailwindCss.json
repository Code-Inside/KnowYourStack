{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2443371175","IsPullRequest":false,"CreatedAt":"2024-08-01T20:38:39","Actor":"KartoffelToby","Number":"14106","RawContent":null,"Title":"[v4] vite build --watch only compile html classes right on the init run","State":"open","Body":"\n\n**What version of Tailwind CSS are you using?**\n\nv4\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nPlain vite Projekt with css/html Input files in rollup config\n\n**What version of Node.js are you using?**\n\nv20.11.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nLinux Debian \n\n**Describe your issue**\n\nI have some css files ans HTML files. The HTML contains some tailwindcss classes like p-2 etc. If i run vite build --watch the first build is correct. And the p-2 css Definition is in the Output css. But if i change the classes in the HTML it recompiles but dont get the new classes. If i use @apply in my source css file the Compiler works every time. So must be a bug in the HTML stuff.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14106","RelatedDescription":"Open issue \"[v4] vite build --watch only compile html classes right on the init run\" (#14106)"},{"Id":"2443253777","IsPullRequest":true,"CreatedAt":"2024-08-01T19:34:19","Actor":"thecrypticace","Number":"14105","RawContent":null,"Title":"Bump to latest cssnano v6","State":"open","Body":"We bundle cssnano in our CLI and it's on an older version that does not handle nested CSS correctly. This PR updates it to the latest version of v6.x\r\n\r\nFixes #14092\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14105","RelatedDescription":"Open PR \"Bump to latest cssnano v6\" (#14105)"},{"Id":"2443030664","IsPullRequest":false,"CreatedAt":"2024-08-01T18:24:11","Actor":"MarcyLina","Number":"14103","RawContent":null,"Title":"Font sizes are not rendering correctly in Chrome","State":"closed","Body":"This very well may be a Chrome issue. I'm on version 127 and macOS Sonoma.\r\n\r\nThe problem I've run into is that nothing smaller than `text-base` will render. Anything I have with the classes `text-sm` and `text-xs` show up as 1rem. Oddly the line-height _does_ work.\r\n\r\nOn my main page, I added some `<p>` tags to test other browsers using `text-xs`, `text-sm`, `text-base,` and `text-lg`. The screenshots are the results I got:\r\n\r\n**Chrome:**\r\n<img width=\"436\" alt=\"image\" src=\"https://github.com/user-attachments/assets/6f4829ae-cce0-4ac1-b574-a906f2fe9667\">\r\n\r\n**Firefox and Safari:**\r\n<img width=\"380\" alt=\"image\" src=\"https://github.com/user-attachments/assets/08c46cbc-8a4d-4164-8087-5bb4e04d404c\">\r\n\r\nI'm on a Laravel, Inertia, and Vue 3 build. All of those, and Tailwind are on the latest versions.\r\n\r\nI did see this issue  [#1402](https://github.com/tailwindlabs/tailwindcss/issues/1402) while searching for answers, which is fairly similar regarding font-weight and it turned out to be a Chrome bug, so I figured I'd post anyway to at least get some attention on the issue and perhaps have it reported to the folks at Chrome.\r\n</div>","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14103","RelatedDescription":"Closed issue \"Font sizes are not rendering correctly in Chrome\" (#14103)"},{"Id":"2440215719","IsPullRequest":false,"CreatedAt":"2024-08-01T16:39:16","Actor":"ottomated","Number":"14094","RawContent":null,"Title":"Individual transforms can't get converted to compatible syntax by lightningcss","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.18\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite@5.3.5\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.16.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome 103.0.5060.134 (OBS CEF)\r\n\r\n**What operating system are you using?**\r\n\r\nLinux\r\n\r\n**Reproduction URL**\r\n\r\n[LightningCSS](https://lightningcss.dev/playground/index.html#%7B%22minify%22%3Afalse%2C%22customMedia%22%3Atrue%2C%22cssModules%22%3Afalse%2C%22analyzeDependencies%22%3Afalse%2C%22targets%22%3A%7B%22chrome%22%3A6225920%7D%2C%22include%22%3A0%2C%22exclude%22%3A0%2C%22source%22%3A%22%2F*%20Current%20output%20*%2F%5Cn.translate-x-4%20%7B%5Cn%20%20--tw-translate-x%3A%20var(--spacing-4%2C%201rem)%3B%5Cn%20%20translate%3A%20var(--tw-translate-x)%20var(--tw-translate-y)%3B%5Cn%7D%5Cn%5Cn%2F*%20Can't%20just%20add%20transform%3A%20none%20*%2F%5Cn.also-broken%20%7B%5Cn%20%20transform%3A%20none%3B%5Cn%20%20--tw-translate-x%3A%20var(--spacing-4%2C%201rem)%3B%5Cn%20%20translate%3A%20var(--tw-translate-x)%20var(--tw-translate-y)%3B%5Cn%7D%5Cn%5Cn%2F*%20transform%20prop%20is%20required%20*%2F%5Cn.broken%20%7B%5Cn%20%20translate%3A%201rem%201rem%3B%5Cn%7D%5Cn%5Cn%2F*%20only%20case%20where%20it%20works%20*%2F%5Cn.works%20%7B%5Cn%20%20transform%3A%20none%3B%5Cn%20%20translate%3A%201rem%201rem%3B%5Cn%7D%22%2C%22visitorEnabled%22%3Afalse%2C%22visitor%22%3A%22%7B%5Cn%20%20Color(color)%20%7B%5Cn%20%20%20%20if%20(color.type%20%3D%3D%3D%20'rgb')%20%7B%5Cn%20%20%20%20%20%20color.g%20%3D%200%3B%5Cn%20%20%20%20%20%20return%20color%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22unusedSymbols%22%3A%5B%5D%2C%22version%22%3A%22local%22%7D)\r\n\r\n**Describe your issue**\r\n\r\nThe `translate` property (and other individual transforms) is [only supported in newer browsers](https://developer.mozilla.org/en-US/docs/Web/CSS/translate).\r\n\r\nPer https://github.com/parcel-bundler/lightningcss/issues/247, lightningcss does support converting `translate: ...;` into `transform: translate(...);`. However, it seems to have a few caveats - it needs a `transform` property in the same class, and it also doesn't seem to work when `var`s are used to define the parameters.\r\n\r\nThe v3 docs say:\r\n> While most of the features in Tailwind CSS will work in all modern browsers, Tailwind also includes APIs for several bleeding-edge features that arenâ€™t yet supported by all browsers, for example the `:focus-visible` pseudo-class and `backdrop-filter` utilities.\r\n\r\nIn my opinion, a common utility such as `transform` should be supported in all browsers - the lack of support blocks me from using v4 in any production applications.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14094","RelatedDescription":"Closed issue \"Individual transforms can't get converted to compatible syntax by lightningcss\" (#14094)"},{"Id":"2435495184","IsPullRequest":true,"CreatedAt":"2024-08-01T16:00:48","Actor":"RobinMalfait","Number":"14079","RawContent":null,"Title":"Add `@content` support to `tailwindcss`","State":"closed","Body":"This PR adds `@content` support to `tailwindcss`'s core package. We will handle the `@content` and call the `onContentPath` function when it's encountered.\r\n\r\nThe `@tailwindcss/cli`, `@tailwindcss/vite` and `@tailwindcss/postcss` packages have to implement the `onContentPath` such that the necessary globs are scanned and watchers should be setup with this information.\r\n\r\nExample usage:\r\n\r\n```css\r\n@content \"../../packages/my-sibling-package/src/components/*.tsx\";\r\n```\r\n\r\nIf you are in a monorepo setup, then you could point to other packages if you want. Another common use case is for Laravel projects if you want to point to Laravel blade files since they won't be covered by Vite's module graph:\r\n\r\n```css\r\n/* ./resources/css/app.css */\r\n@content \"../views/*.blade.php\"\r\n```\r\n\r\nNote: all globs are relative to the current file you are in.\r\n\r\n<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14079","RelatedDescription":"Closed or merged PR \"Add `@content` support to `tailwindcss`\" (#14079)"},{"Id":"2442822424","IsPullRequest":true,"CreatedAt":"2024-08-01T15:57:52","Actor":"philipp-spiess","Number":"14101","RawContent":null,"Title":"Upgrade vitest and remove bench script from CI","State":"open","Body":"This PR updates vitest to v2. The changes are mostly around using fork instead of threads for how tests are run which should fix one of the issues we've found.\r\n\r\nEver since adding the unit tests on Windows, we started seeing occacional flags of vitest crashing with the following error:\r\n\r\n```\r\nâ€‰ELIFECYCLEâ€‰ Command failed with exit code 3221225477.\r\nError: Process completed with exit code 1.\r\n```\r\n\r\nWhen reading the [v2 changelog](https://github.com/vitest-dev/vitest/releases/tag/v2.0.0) we saw many bug fixes related to segfaulting so we believe this was the issue. \r\n\r\nWhen upgrading `vitest` alone, we got a bunch of dependency mismatches though (specifically, vite was installed two times with different peer dependencies for `@types/node` which causes our vite plugin's `Plugin` type to be different from the one in the vite playground. Yikes. These were eventually fixed by having pnpm create a new lockfile for us. So, unfortunatly this PR also bumps a bunch of patch versions for some transitive dependencies. Tests seem fine, though ðŸ¤ž \r\n\r\nThis PR also removes the `bench` script from CI. It doesn't give us value in its current state (since it's not reporting when performance regresses) but added a few seconds of unnecessary overhead to each test run.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14101","RelatedDescription":"Open PR \"Upgrade vitest and remove bench script from CI\" (#14101)"},{"Id":"2435599053","IsPullRequest":true,"CreatedAt":"2024-08-01T14:02:25","Actor":"thecrypticace","Number":"14081","RawContent":null,"Title":"Automate checksum generation for standalone CLI","State":"closed","Body":"We've done this manually until now which is _fine_ but not ideal so this PR automates it so it cannot be forgotten.\r\n\r\n@RobinMalfait do you know of a good way to test this w/o creating a tag? Should I add a `workflow_dispatch` trigger to the prepare release workflow?","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14081","RelatedDescription":"Closed or merged PR \"Automate checksum generation for standalone CLI\" (#14081)"},{"Id":"2441954851","IsPullRequest":true,"CreatedAt":"2024-08-01T09:37:40","Actor":"philipp-spiess","Number":"14099","RawContent":null,"Title":"Second branch to run 2 CI jobs concurrently ðŸ™ˆ","State":"closed","Body":"<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14099","RelatedDescription":"Closed or merged PR \"Second branch to run 2 CI jobs concurrently ðŸ™ˆ\" (#14099)"},{"Id":"2440797346","IsPullRequest":true,"CreatedAt":"2024-07-31T19:37:03","Actor":"adamwathan","Number":"14095","RawContent":null,"Title":"Add support for `inline` option when defining `@theme` values","State":"open","Body":"This PR adds support for a new `inline` option when defining a `@theme` block that tells Tailwind to use raw theme values for utilities instead of referencing the corresponding generated CSS variable.\r\n\r\n```css\r\n/* Input */\r\n@theme inline {\r\n  --color-red-500: #ef4444;\r\n  /* ... */\r\n}\r\n\r\n\r\n/* Example output */\r\n:root {\r\n  --color-red-500: #ef4444;\r\n}\r\n\r\n.text-red-500 {\r\n  color: #ef4444;\r\n}\r\n```\r\n\r\nThis can be composed with the existing `reference` option in case you want to define a `@theme` block as both `reference` (so the variables aren't generated) and `inline`:\r\n\r\n```css\r\n/* Input */\r\n@theme inline reference {\r\n  --color-red-500: #ef4444;\r\n  /* ... */\r\n}\r\n\r\n\r\n/* Example output */\r\n.text-red-500 {\r\n  color: #ef4444;\r\n}\r\n```\r\n\r\nSince you can have multiple `@theme` blocks, you can even define some values normally and some as inline based on how you're using them. For example you might want to use `inline` for defining literal tokens like `--color-red-500`, but include the variable for tokens that you want to be able to theme like `--color-primary`:\r\n\r\n```css\r\n/* Input */\r\n@theme inline {\r\n  --color-red-500: #ef4444;\r\n  /* ... */\r\n}\r\n\r\n@theme {\r\n  --color-primary: var(--color-red-500);\r\n}\r\n\r\n\r\n/* Example output */\r\n:root {\r\n  --color-red-500: #ef4444;\r\n  --color-primary: var(--color-red-500);\r\n}\r\n\r\n.text-red-500 {\r\n  color: #ef4444;\r\n}\r\n\r\n.text-primary {\r\n  color: var(--color-primary, var(--color-red-500));\r\n}\r\n```\r\n\r\n## Breaking changes\r\n\r\nPrior to this PR, you could `@import` a stylesheet that contained `@theme` blocks as reference by adding the `reference` keyword to your import:\r\n\r\n```css\r\n@import \"./my-theme.css\" reference;\r\n```\r\n\r\nNow that `reference` isn't the only possible option when declaring your `@theme`, this syntax has changed to a new `theme(â€¦)` function that accepts `reference` and `inline` as potential space-separated values:\r\n\r\n```css\r\n@import \"./my-theme.css\";\r\n@import \"./my-theme.css\" theme(reference);\r\n@import \"./my-theme.css\" theme(inline);\r\n@import \"./my-theme.css\" theme(reference inline);\r\n```\r\n\r\nIf you are using the `@import â€¦ reference` option with an earlier alpha release, you'll need to update your code to `@import â€¦ theme(reference)` once this PR lands in a release.\r\n\r\n## Motivation\r\n\r\nThis PR is designed to solve an issue pointed out in #14091.\r\n\r\nPrior to this PR, generated utilities would always reference variables directly, with the raw value as a fallback:\r\n\r\n```css\r\n/* Input */\r\n@theme {\r\n  --color-red-500: #ef4444;\r\n  /* ... */\r\n}\r\n\r\n\r\n/* Example output */\r\n:root {\r\n  --color-red-500: #ef4444;\r\n}\r\n\r\n.text-red-500 {\r\n  color: var(--color-red-500, #ef4444);\r\n}\r\n```\r\n\r\nBut this can create issues with variables resolving to an unexpected value when a theme value is referencing another variable defined on `:root`.\r\n\r\nFor example, say you have a CSS file like this:\r\n\r\n```css\r\n:root, .light {\r\n  --text-fg: #000; \r\n}\r\n\r\n.dark {\r\n  --text-fg: #fff;\r\n}\r\n\r\n@theme {\r\n  --color-fg: var(--text-fg);\r\n}\r\n```\r\n\r\nWithout `@theme inline`, we'd generate this output if you used the `text-fg` utility:\r\n\r\n```css\r\n:root, .light {\r\n  --text-fg: #000; \r\n}\r\n\r\n.dark {\r\n  --text-fg: #fff;\r\n}\r\n\r\n:root {\r\n  --color-fg: var(--text-fg);\r\n}\r\n\r\n.text-fg {\r\n  color: var(--color-fg, var(--text-fg));\r\n}\r\n```\r\n\r\nNow if you wrote this HTML, you're probably expecting your text to be the dark mode color:\r\n\r\n```html\r\n<div class=\"dark\">\r\n  <h1 class=\"text-fg\">Hello world</h1>\r\n</div>\r\n```\r\n\r\nBut you'd actually get the light mode color because of this rule:\r\n\r\n```css\r\n:root {\r\n  --color-fg: var(--text-fg);\r\n}\r\n\r\n.text-fg {\r\n  color: var(--color-fg, var(--text-fg));\r\n}\r\n```\r\n\r\nThe browser will try to resolve the `--color-fg` variable, which is defined on `:root`. When it tries to resolve the value, _it uses the value of `var(--text-fg)` as it would resolve at `:root`_, not what it would resolve to based on the element that has the `text-fg` class.\r\n\r\nSo `var(--color-fg)` resolves to `#000` because `var(--text-fg)` resolved to `#000` at the point in the tree where the browser resolved the value of `var(--color-fg)`.\r\n\r\nBy using `@theme inline`, the `.text-fg` class looks like this:\r\n\r\n```css\r\n.text-fg {\r\n  color: var(--text-fg);\r\n}\r\n```\r\n\r\nWith this definition, the browser doesn't try to resolve `--color-fg` at all and instead resolves `--text-fg` directly which correctly resolves to `#fff` as expected.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14095","RelatedDescription":"Open PR \"Add support for `inline` option when defining `@theme` values\" (#14095)"},{"Id":"2439794133","IsPullRequest":false,"CreatedAt":"2024-07-31T11:16:55","Actor":"pokonski","Number":"14092","RawContent":null,"Title":"Minification breaks nested @apply","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v3.4.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\ntailwindcss standalone executable 3.4.7\r\n\r\n**What version of Node.js are you using?**\r\n\r\nN/A, using standalone\r\n\r\n**What browser are you using?**\r\n\r\nFirefox 127\r\n\r\n**What operating system are you using?**\r\n\r\nMacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/pokonski/tailwind-minify-nesting/tree/master\r\n\r\n\r\n**Describe your issue**\r\n\r\nMinification breaks nested rules and flattens them:\r\n\r\nSource file\r\n\r\n```css\r\n.parent {\r\n  & .child {\r\n    @apply text-blue-500;\r\n\r\n    &:not([href]) {\r\n      @apply text-red-500;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nRunning `tailwindcss -i source.css -o build.css` outputs working CSS:\r\n\r\n```css\r\n.parent {\r\n  & .child {\r\n    --tw-text-opacity: 1;\r\n    color: rgb(59 130 246 / var(--tw-text-opacity))\r\n  }\r\n  & .child {\r\n    &:not([href]) {\r\n      --tw-text-opacity: 1;\r\n      color: rgb(239 68 68 / var(--tw-text-opacity))\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nBut running `tailwindcss -i source.css -o build-min.css -m` outputs broken CSS with missing nested rules:\r\n(formatted by me for readability)\r\n\r\n```css\r\n.parent {\r\n  & .child {\r\n    --tw-text-opacity: 1;\r\n    color: rgb(239 68 68/var(--tw-text-opacity));\r\n    color: rgb(59 130 246/var(--tw-text-opacity))\r\n  }\r\n}\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14092","RelatedDescription":"Open issue \"Minification breaks nested @apply\" (#14092)"},{"Id":"2439722604","IsPullRequest":false,"CreatedAt":"2024-07-31T10:39:25","Actor":"hassanaitnacer","Number":"14091","RawContent":null,"Title":"Inverting light/dark scales without using :dark variant by playing with data-theme attribute or class name","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.18\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nRemix 2.9\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.10.0\r\n\r\n**What browser are you using?**\r\n\r\nFirefox\r\n\r\n**What operating system are you using?**\r\n\r\nNone. I am using a Linux distro.\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/jIhAOOOUUW?file=css\r\n\r\n**Describe your issue**\r\n\r\nHello everyone,\r\n\r\nI'm using the latest alpha version, and I need to have multiple scopes for color switching (e.g., having both dark sections and light sections within the same page). Iâ€™m using a third-party library that defines CSS variables (I do not have control over it, so I can not simply parse and tweak them. I am looking to an easy way). Look at the attached image to understand the issue:\r\n\r\n![Tailwind CSS Question](https://github.com/user-attachments/assets/e7802163-2c7a-4638-9571-20169a5ed999)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14091","RelatedDescription":"Open issue \"Inverting light/dark scales without using :dark variant by playing with data-theme attribute or class name\" (#14091)"},{"Id":"2439608420","IsPullRequest":true,"CreatedAt":"2024-07-31T09:43:51","Actor":"philipp-spiess","Number":"14089","RawContent":null,"Title":"Add integration test setup and tests for the Vite integration","State":"open","Body":"This PR adds a new root `/integrations` folder that will be the home of integration tests. The idea of these tests is to use Tailwind in various setups just like our users would (by only using the publishable npm builds). \r\n\r\nTo avoid issues with concurrent tests making changes to the file system, to make it very easy to test through a range of versions, and to avoid changing configuration objects over and over in test runs, we decided to inline the scaffolding completely into the test file and have no examples checked into the repo. \r\n\r\nHere's an example of how this can look like for a simple Vite test:\r\n\r\n```ts\r\ntest('works with production builds', {\r\n    fs: {\r\n      'package.json': json`\r\n        {\r\n          \"type\": \"module\",\r\n          \"dependencies\": {\r\n            \"@tailwindcss/vite\": \"workspace:^\",\r\n            \"tailwindcss\": \"workspace:^\"\r\n          },\r\n          \"devDependencies\": {\r\n            \"vite\": \"^5.3.5\"\r\n          }\r\n        }\r\n      `,\r\n      'vite.config.ts': ts`\r\n        import tailwindcss from '@tailwindcss/vite'\r\n        import { defineConfig } from 'vite'\r\n\r\n        export default defineConfig({\r\n          build: { cssMinify: false },\r\n          plugins: [tailwindcss()],\r\n        })\r\n      `,\r\n      'index.html': html`\r\n        <head>\r\n          <link rel=\"stylesheet\" href=\"./src/index.css\">\r\n        </head>\r\n        <body>\r\n          <div class=\"underline m-2\">Hello, world!</div>\r\n        </body>\r\n      `,\r\n      'src/index.css': css`\r\n        @import 'tailwindcss/theme' reference;\r\n        @import 'tailwindcss/utilities';\r\n      `,\r\n    },\r\n  },\r\n  async ({ fs, exec }) => {\r\n    await exec('pnpm vite build')\r\n\r\n    expect.assertions(2)\r\n    for (let [path, content] of await fs.glob('dist/**/*.css')) {\r\n      expect(path).toMatch(/\\.css$/)\r\n      expect(stripTailwindComment(content)).toMatchInlineSnapshot(\r\n        `\r\n        \".m-2 {\r\n          margin: var(--spacing-2, .5rem);\r\n        }\r\n\r\n        .underline {\r\n          text-decoration-line: underline;\r\n        }\"\r\n      `,\r\n      )\r\n    }\r\n  },\r\n)\r\n```\r\n\r\nBy defining all dependencies this way, we never have to worry about which fixtures are checked in and can more easily describe changes to the setup. \r\n\r\nFor ergonomics, we've also added the [`embed` prettier plugin](https://github.com/Sec-ant/prettier-plugin-embed). This will mean that files inlined in the `fs` setup are properly indented. No extra work needed! \r\n\r\nIf you're using VS Code, I can also recommend the [Language Literals](https://marketplace.visualstudio.com/items?itemName=sissel.language-literals) extension so that syntax highlighting also _just works_.\r\n\r\nA neat feature of inlining the scaffolding like this is to make it very simple to test through a variety of versions. For example, here's how we can set up a test against Vite 5 and Vite 4:\r\n\r\n```js\r\n;['^4.5.3', '^5.3.5'].forEach(viteVersion => {\r\n    test(`works with production builds for Vite ${viteVersion}`, {\r\n      fs: {\r\n        'package.json': json`\r\n          {\r\n            \"type\": \"module\",\r\n            \"devDependencies\": {\r\n              \"vite\": \"${viteVersion}\"\r\n            }\r\n          }\r\n        `,\r\n    async () => {\r\n      // Do something\r\n    },\r\n  )\r\n})\r\n```\r\n\r\n## Philosophy\r\n\r\nBefore we dive into the specifics, I want to clearly state the design considerations we have chosen for this new test suite:\r\n\r\n- All file mutations should be done in temp folders, nothing should ever mess with your working directory\r\n- Windows as a first-class citizen\r\n- Have a clean and simple API that describes the test setup only using public APIs\r\n- Focus on reliability (make sure cleanup scripts work and are tolerant to various error scenarios)\r\n- If a user reports an issue with a specific configuration, we want to be able to reproduce them with integration tests, no matter how obscure the setup (this means the test need to be in control of most of the variables)\r\n- Tests should be reasonably fast (obviously this depends on the integration. If we use a slow build tool, we can't magically speed it up, but our overhead should be minimal).\r\n\r\n## How it works\r\n\r\nThe current implementation provides a custom `test` helper function that, when used, sets up the environment according to the configuration. It'll create a new temporary directory and create all files, ensuring things like proper `\\r\\n` line endings on Windows. \r\n\r\nWe do have to patch the `package.json` specifically, since we can not use public versions of the tailwindcss packages as we want to be able to test against a development build. To make this happen, every `pnpm build` run now creates tarballs of the npm modules (that contain only the files that would also in the published build). We then patch the `package.json` to rewrite `workspace:^` versions to link to those tarballs. We found this to work reliably on Windows and macOS as well as being fast enough to not cause any issues. Furthermore we also decided to use `pnpm` as the version manager for integration tests because of it's global module cache (so installing `vite` is fast as soon as you installed it once).\r\n\r\nThe test function will receive a few utilities that it can use to more easily interact with the temp dir. One example is a `fs.glob` function that you can use to easily find files in eventual `dist/` directories or helpers around `spawn` and `exec` that make sure that processes are cleaned up correctly.\r\n\r\nBecause we use tarballs from our build dependencies, working on changes requires a workflow where you run `pnpm build` before running `pnpm test:integrations`. However it also means we can run clients like our CLI client with no additional overheadâ€”just install the dependency like any user would and set up your test cases this way.\r\n\r\n## Test plan\r\n\r\nThis PR also includes two Vite specific integration tests: One testing a static build (`pnpm vite build`) and one a dev mode build (`pnpm vite dev`) that also makes changes to the file system and asserts that the resources properly update.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14089","RelatedDescription":"Open PR \"Add integration test setup and tests for the Vite integration\" (#14089)"},{"Id":"2437500301","IsPullRequest":true,"CreatedAt":"2024-07-30T16:05:14","Actor":"philipp-spiess","Number":"14085","RawContent":null,"Title":"Fix Windows tests for new postcss plugin","State":"closed","Body":"This PR fixes the new `postcss-fix-relative-paths` plugin for Windows paths. The issue was that we mixed Windows-style path separators from the absolute file paths with the Posix-style separators from globs. This caused the `dirname` functions to resolve to the wrong files.\r\n\r\nTo solve this, we now make the difference very clear by calling the content a `glob`. For globs, we always expect Posix-style path separators and for the case of making a glob absolute (by prefixing the directory), we now convert them into Posix-style explicitly.\r\n\r\nThis PR also fixes an issue where negative rules (e.g. `!./**/*.ts`) were not properly rewritten.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14085","RelatedDescription":"Closed or merged PR \"Fix Windows tests for new postcss plugin\" (#14085)"},{"Id":"2437541646","IsPullRequest":true,"CreatedAt":"2024-07-30T11:24:15","Actor":"philipp-spiess","Number":"14086","RawContent":null,"Title":"Run CI on any PR change","State":"closed","Body":"This changes the V4 CI to run on any pull request change (so an opened, reopened, and updated PR), regardless if the PR is directed into the `next` branch or not. \r\n\r\nThis is helpful for testing stacked PRs like: https://github.com/tailwindlabs/tailwindcss/pull/14078","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14086","RelatedDescription":"Closed or merged PR \"Run CI on any PR change\" (#14086)"},{"Id":"2431845928","IsPullRequest":true,"CreatedAt":"2024-07-29T15:57:50","Actor":"philipp-spiess","Number":"14063","RawContent":null,"Title":"Add PostCSS plugin to fix relative `@content` and `@plugin` paths in `@import`ed files","State":"closed","Body":"We noticed an issue that happened when handling relative file imports in the `@plugin` and the upcoming `@content` APIs. The problem arises from relative files that are inside `@import`ed stylesheets. Take, for example, the following folder structure:\r\n\r\n```css\r\n/* src/index.css */\r\n@import \"./dir/index.css\";\r\n```\r\n```css\r\n/* src/dir/index.css */\r\n@plugin \"../../plugin.ts\";\r\n```\r\n\r\nIt's expected that the path is relative to the CSS file that defined it. However, right now, we use [`postcss-import`](https://github.com/postcss/postcss-import) to flatten the CSS file before running the tailwind build step. This causes these custom-properties to be inlined in a flat file which removes the information of which file is being referred:\r\n\r\n```css\r\n/* src/flat.css */\r\n@plugin \"../../plugin.ts\"; /* <- This is now pointing to the wrong file */\r\n```\r\n\r\nThere are generally two approaches that we can do to solve this:\r\n\r\n1. **Handle `@import` flattening inside tailwindcss:** While generally this would give us more freedom and less dependencies, this would require some work to get all edge cases right. We need to support layers/conditional imports and also handle all relative urls for properties like `background-image`. \r\n2. **Rewrite relative paths as a separate postcss visitor:** The approach this PR takes is instead to implement a custom postcss plugin that uses the AST to rewrite relative references inside `@plugin` and `@content`. This has the benefit of requiring little changes to our existing APIs. The rule is only enabled for relative references inside `@plugin` and `@content`, so the surface of this rule is very small.\r\n\r\nWe can use this plugin inside all three current clients: \r\n\r\n- `@tailwindcss/postcss` obviously already uses postcss\r\n- `@tailwindcss/cli` also uses postcss to handle `@import` flattening\r\n- `@tailwindcss/vite` allows us to add custom postcss rules via the CSS pipeline. There are a few cases that we handle with care (e.g. in vite you can pass a string to the postcss config which is supposed to load the config from a file).\r\n\r\n## Test plan\r\n\r\nTo validate the changes, we have added both a list of unit test cases to the plugin itself as well as verified that all three clients are working as expected:\r\n\r\n- `@tailwindcss/postcss` now has an explicit test for this behavior\r\n- `@tailwindcss/cli` and `@tailwindcss/vite` were manually tested by updating the vite playground. The CLI was run with `--cwd playgrounds/vite/ -i ./src/app.css -o foo.css`: \r\n    <img width=\"531\" alt=\"Screenshot 2024-07-29 at 11 35 59\" src=\"https://github.com/user-attachments/assets/78f0acdc-a46c-4c6c-917a-2916417b1001\"> \r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14063","RelatedDescription":"Closed or merged PR \"Add PostCSS plugin to fix relative `@content` and `@plugin` paths in `@import`ed files\" (#14063)"},{"Id":"2434841857","IsPullRequest":true,"CreatedAt":"2024-07-29T14:58:08","Actor":"philipp-spiess","Number":"14074","RawContent":null,"Title":"Prefix internal modules with `internal-*`","State":"closed","Body":"Last week we discussed bringing in some consistency for our non-public npm packages in the repo. We discussed using custom namespaces (e.g. `@tailwindcss-internal`) vs. simple prefixes but it does not matter too much if we are both consistent with our pattern and it's easy for us to see whether a plugin is public or not. \r\n\r\nSince we have a mixture of public namespaced (`@tailwindcss/*`) and non-namespaced (`tailwindcss`) packages, I think it would be best if we use a prefix to signal internal dependencies. This PR proposes we use `internal-*` as the prefix and renames `test-utils` to `internal-example-plugin` (since, really, this package is just an example for the Tailwind plugin system).","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14074","RelatedDescription":"Closed or merged PR \"Prefix internal modules with `internal-*`\" (#14074)"},{"Id":"2431950773","IsPullRequest":true,"CreatedAt":"2024-07-29T14:50:06","Actor":"philipp-spiess","Number":"14065","RawContent":null,"Title":"Add Windows CI","State":"closed","Body":"This PR changes the GitHub action workflow for V4 to start running all unit tests and build on both Ubuntu (our current default) _and_ Windows. This is to ensure we catch issues with paths and other Windows-specific things sooner. It does, however, not replace testing on Windows.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14065","RelatedDescription":"Closed or merged PR \"Add Windows CI\" (#14065)"},{"Id":"2430951567","IsPullRequest":true,"CreatedAt":"2024-07-29T14:10:16","Actor":"kachkaev","Number":"14061","RawContent":null,"Title":"Remove cursor override for `:disabled` buttons","State":"closed","Body":"Related to https://github.com/tailwindlabs/tailwindcss/issues/8961 and https://github.com/tailwindlabs/tailwindcss/pull/8962\r\n\r\nBefore v4, buttons got this CSS in preflight:\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/9824cb64a03afaa405e184cb31003c8a1efafaa7/src/css/preflight.css#L339-L353\r\n\r\nv4 (`next` branch) no longer has `cursor: pointer` in [preflight.css](https://github.com/tailwindlabs/tailwindcss/blob/2fe249963583e436961adc59cf9988af454e3da5/packages/tailwindcss/preflight.css)\r\n\r\nThis PR removes additional CSS for `:disabled` buttons. It was meant to undo an override that is no longer present.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14061","RelatedDescription":"Closed or merged PR \"Remove cursor override for `:disabled` buttons\" (#14061)"},{"Id":"2432871677","IsPullRequest":true,"CreatedAt":"2024-07-29T14:06:59","Actor":"kachkaev","Number":"14066","RawContent":null,"Title":"Specify pnpm version for corepack users","State":"closed","Body":"<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n\r\nI use [corepack](https://nodejs.org/api/corepack.html), so when I run `yarn` or `pnpm`, the command looks at the local `package.json` â†’ `packageManager` field, downloads a specific package manager if needed and then uses it.\r\n\r\nMost of the repos I deal with have this field, so my â€˜defaultâ€™ `pnpm` got a bit dated:\r\n\r\n```sh\r\npnpm --version\r\n8.10.5\r\n```\r\n\r\nWith this PR, corepack contributors like me will automatically opt into the right pnpm version:\r\n\r\n```sh\r\npnpm --version\r\n9.6.0\r\n```\r\n\r\nThis can prevent `pnpm-lock.yaml` spoiling which I have experienced in https://github.com/tailwindlabs/tailwindcss/pull/14061 (https://github.com/tailwindlabs/tailwindcss/pull/14061/commits/5d2d18e94dff56f5f76533b7be391238c099b15c). To be honest I discovered pnpm version mismatch quite late because I got used to correct version picking.\r\n\r\nGoing forward, pnpm version in CI can be also grabbed from `package.json` â†’ `packageManager` field. And this field can be automatically updated on schedule, e.g. via Renovate. Happy to help if thatâ€™s interesting.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14066","RelatedDescription":"Closed or merged PR \"Specify pnpm version for corepack users\" (#14066)"},{"Id":"2435526267","IsPullRequest":true,"CreatedAt":"2024-07-29T14:04:21","Actor":"RobinMalfait","Number":"14080","RawContent":null,"Title":"Add `@content` support to `@tailwindcss/postcss`","State":"open","Body":"This PR adds support for `@content` and makes sure that globs are registered within PostCSS.\n\nFrom a configuration perspective nothing changes for the end user. It does however make sure that `@content` can be used and changes in those globs will be picked up.\n<!--\n\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14080","RelatedDescription":"Open PR \"Add `@content` support to `@tailwindcss/postcss`\" (#14080)"},{"Id":"2435116352","IsPullRequest":true,"CreatedAt":"2024-07-29T11:04:41","Actor":"RobinMalfait","Number":"14078","RawContent":null,"Title":"Add `@content` support","State":"open","Body":"This PR is an umbrella PR where we will add support for `@content`. This will allow you to add explicit content globs if you want to look for Tailwind classes in other files that are not automatically detected yet.\r\n\r\nUsage example:\r\n\r\n```css\r\n/* ./src/input.css */\r\n@import \"tailwindcss\";\r\n@content \"../laravel/resources/views/**/*.blade.php\";\r\n@content \"../../packages/monorepo-package/**/*.js\";\r\n```\r\n\r\nPRs:\r\n\r\n- [x] https://github.com/tailwindlabs/tailwindcss/pull/14063\r\n- [x] https://github.com/tailwindlabs/tailwindcss/pull/14085\r\n- [x] https://github.com/tailwindlabs/tailwindcss/pull/14079\r\n- [ ] https://github.com/tailwindlabs/tailwindcss/pull/14067\r\n- [ ] https://github.com/tailwindlabs/tailwindcss/pull/14076\r\n- [ ] https://github.com/tailwindlabs/tailwindcss/pull/14080\r\n\r\nOnce all the PRs are merged, then this umbrella PR can be merged. \r\n\r\n> [!IMPORTANT]  \r\n> Make sure to merge this without rebasing such that each individual PR ends up on the main branch.\r\n\r\n<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14078","RelatedDescription":"Open PR \"Add `@content` support\" (#14078)"},{"Id":"2435053735","IsPullRequest":true,"CreatedAt":"2024-07-29T10:33:29","Actor":"RobinMalfait","Number":"14076","RawContent":null,"Title":"Add `@content` support to `@tailwindcss/vite`","State":"open","Body":"This PR makes sure that when you use `@content`, that these files are also being watched if you are using Vite.\n\nIn Vite we rely on the module graph instead, but sometimes it can be useful to watch files outside of the module graph. E.g.: A Laravel project, where you are watching `*.blade.php` files.\n<!--\n\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14076","RelatedDescription":"Open PR \"Add `@content` support to `@tailwindcss/vite`\" (#14076)"},{"Id":"2433625739","IsPullRequest":false,"CreatedAt":"2024-07-28T13:34:49","Actor":"flavorjones","Number":"14072","RawContent":null,"Title":"`sha256sums.txt` is not available for the 3.4.7 release","State":"closed","Body":"**Context**\r\n\r\nSince https://github.com/tailwindlabs/tailwindcss/issues/11888, checksums have been made available for tailwindcss releases.\r\n\r\nThe most recent release, https://github.com/tailwindlabs/tailwindcss/releases/tag/v3.4.7, does not have the checksums file.\r\n\r\nCan you please make sure these checksums are part of the release process? They're used by downstream maintainers to automate our release processes (e.g., rails/tailwindcss-rails). Thank you so much!","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14072","RelatedDescription":"Closed issue \"`sha256sums.txt` is not available for the 3.4.7 release\" (#14072)"},{"Id":"2430111488","IsPullRequest":false,"CreatedAt":"2024-07-27T15:46:38","Actor":"sntran","Number":"14058","RawContent":null,"Title":"[v4] variants are not applied to custom classes in utilities layer","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.17\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`@tailwindcss/cli@4.0.0-alpha.17`\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.12.2\r\n\r\n**What browser are you using?**\r\n\r\nChrome version 126.0.6478.127 (Official Build) (arm64)\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS 14.5 (23F79)\r\n\r\n**Reproduction**\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n\r\n@layer utilities {\r\n  .foobar {\r\n    font-weight: bold;\r\n  }\r\n}\r\n```\r\n\r\n```html\r\n<h1 class=\"md:foobar before:foobar\">Bold</h1>\r\n```\r\n\r\n\r\n**Describe your issue**\r\n\r\nI would expect the following style generated, because `.foobar` is within `@layer` directive, and should be able to be used with modifiers, according to [docs](https://tailwindcss.com/docs/functions-and-directives#layer).\r\n\r\n```css\r\n@media (width >= 768px) {\r\n    .md\\:foobar {\r\n        font-weight: 700;\r\n    }\r\n}\r\n```\r\n\r\nBut there is not. Same with `before:foobar`.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14058","RelatedDescription":"Closed issue \"[v4] variants are not applied to custom classes in utilities layer\" (#14058)"},{"Id":"2431936190","IsPullRequest":false,"CreatedAt":"2024-07-27T15:20:12","Actor":"karlhorky","Number":"14064","RawContent":null,"Title":"Regression: classes with decimals no longer showing up in 4.0.0-alpha.18","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.0.0-alpha.18\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: @tailwindcss/postcss 4.0.0-alpha.18, Next.js 15.0.0-rc.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v20.15.0\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS\r\n\r\n**Reproduction URL**\r\n\r\nTailwind Play for v4.0.0-alpha.17 (DOES NOT show bug, because it's a regression in v4.0.0-alpha.18): https://play.tailwindcss.com/1xOx8bbAcO?layout=horizontal\r\n\r\n![Screenshot 2024-07-26 at 12 27 32](https://github.com/user-attachments/assets/6072b1e4-18f7-416b-973d-64cc7b48c257)\r\n\r\nIn v4.0.0-alpha.18, the CSS block in the bottom right of the DevTools is missing.\r\n\r\n**Describe your issue**\r\n\r\nThe CSS for the `lg:w-0.5/10` class is missing in `tailwindcss@4.0.0-alpha.18`\r\n\r\n```css\r\n.lg\\:w-0\\.5\\/10 {\r\n    @media (width >= 64rem) {\r\n        width: calc(0.5 / 10* 100%);\r\n    }\r\n}\r\n```\r\n\r\nDetails:\r\n\r\n1. Other responsive width classes without decimals like `lg:w-9/10` work\r\n2. It is present in `tailwindcss@4.0.0-alpha.17`\r\n\r\n**Keywords for search**\r\n\r\ndecimal, period, dot, point","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14064","RelatedDescription":"Closed issue \"Regression: classes with decimals no longer showing up in 4.0.0-alpha.18\" (#14064)"},{"Id":"2432986656","IsPullRequest":false,"CreatedAt":"2024-07-27T15:17:15","Actor":"gabrielmfern","Number":"14070","RawContent":null,"Title":"`container` component's styles are added just when there is any `container` inside the markup","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`postcss` on my side, but this also happens on the Tailwind playground\r\n\r\n**What version of Node.js are you using?**\r\n\r\n20.11.1\r\n\r\n**What browser are you using?**\r\n\r\nIrrelevant for this issue.\r\n\r\n**What operating system are you using?**\r\n\r\nLinux\r\n\r\n**Reproduction URL**\r\n\r\nHere is a very minimal playground that has the issue:\r\n\r\nhttps://play.tailwindcss.com/1KVilgDOpB\r\n\r\nJust open the `Generated CSS` and go into the `Components` tab.\r\n\r\nThe full piece of code that had the issue for me, was:\r\n\r\nhttps://play.tailwindcss.com/IaQQgzRINi\r\n\r\n**Describe your issue**\r\n\r\nFrom the minimal reproduction, it seems that just having `container` inside the markup somewhere makes it so that Tailwind generates the `container` component's styles. I would guess this is an issue because it would be best to only have the styles for what is necessary.\r\n\r\nIt becomes clear that this might be related to some improper check to find the keyword as when any letter from `container` is removed, the styles generated go away, even in the full example. \r\n\r\nThis issue does not seem to happen when using the alpha versions of v4, though.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14070","RelatedDescription":"Closed issue \"`container` component's styles are added just when there is any `container` inside the markup\" (#14070)"},{"Id":"2432872632","IsPullRequest":true,"CreatedAt":"2024-07-26T19:49:12","Actor":"RobinMalfait","Number":"14067","RawContent":null,"Title":"Add `@content` support to `@tailwindcss/cli`","State":"open","Body":"This is a continuation of #14048 where we specifically focus on the `@tailwindcss/cli`.\r\n\r\nThis PR optimizes the globs such that we always have a clean `base` and the `glob` (which is the first dynamic part).\r\n\r\nThis PR also refactors the CLI such that we can watch files defined by the `@content` at-rules in the CSS. The `@parcel/watcher` watches from a base path (not a glob), which means that we have to create a watcher for each glob's base.\r\n\r\nThis PR also adds a `scanFiles` to the `scanDir` result, so that we can verify that a scanned file matches the globs we already know from `scanDir`.\r\n\r\n<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14067","RelatedDescription":"Open PR \"Add `@content` support to `@tailwindcss/cli`\" (#14067)"},{"Id":"2430220885","IsPullRequest":false,"CreatedAt":"2024-07-25T16:00:04","Actor":"dylancom","Number":"14059","RawContent":null,"Title":"[v3] scale transitions broken since scale moved away from css transforms","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v3.4.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss-cli 8.3.1\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v12.0.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS, Windows\r\n\r\n**Describe your issue**\r\n\r\nThe \"scale\" class switched from using the css property transform `transform: scale(2, 2)` to the new css property `scale`. This breaks animations that use the class `transition`. As it doesn't include `scale`. I noticed it is added to v4 though.\r\n\r\nFix: the transition class should include `scale`\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14059","RelatedDescription":"Closed issue \"[v3] scale transitions broken since scale moved away from css transforms\" (#14059)"},{"Id":"2430305897","IsPullRequest":true,"CreatedAt":"2024-07-25T15:31:53","Actor":"RobinMalfait","Number":"14060","RawContent":null,"Title":"Fix failing publish step","State":"closed","Body":"One of the (private) packages was missing a version which caused `pnpm publish` to fail. This PR adds the missing version.\n\n\n<!--\n\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14060","RelatedDescription":"Closed or merged PR \"Fix failing publish step\" (#14060)"},{"Id":"2430084909","IsPullRequest":true,"CreatedAt":"2024-07-25T14:19:13","Actor":"adamwathan","Number":"14057","RawContent":null,"Title":"Prepare for v4.0.0-alpha.18 release","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14057","RelatedDescription":"Closed or merged PR \"Prepare for v4.0.0-alpha.18 release\" (#14057)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-08-02T03:30:21.222737Z","RunDurationInMilliseconds":341}