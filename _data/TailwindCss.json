{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2603777459","IsPullRequest":true,"CreatedAt":"2024-10-21T22:17:16","Actor":"thecrypticace","Number":"14747","RawContent":null,"Title":"Always emit keyframes registered in `addUtilities`","State":"open","Body":"Fixes #14732\r\n\r\ncc @philipp-spiess this look like an okay fix?","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14747","RelatedDescription":"Open PR \"Always emit keyframes registered in `addUtilities`\" (#14747)"},{"Id":"2602565012","IsPullRequest":true,"CreatedAt":"2024-10-21T21:46:24","Actor":"RobinMalfait","Number":"14738","RawContent":null,"Title":"Remove `layer(utilities)` if imports contain `@utility`","State":"closed","Body":"We have a migration that adds the `layer(…)` next to the `@import` depending on the order of original values. For example:\n```css\n@import \"tailwindcss/utilities\":\n@import \"./foo.css\":\n@import \"tailwindcss/components\":\n```\n\nWill be turned into:\n```css\n@import \"tailwindcss\":\n@import \"./foo.css\" layer(utilities):\n```\n\nBecause it used to exist between `utilities` and `components`. Without this it would be _after_ `components`.\n\nThis results in an issue if an import has (deeply) nested `@utility` at-rules after migrations. This is because if this is generated:\n```css\n/* ./src/index.css */\n@import \"tailwindcss\";\n@import \"./foo.css\" layer(utilities);\n\n/* ./src/foo.css */\n@utility foo {\n  color: red;\n}\n```\n\nOnce we interpret this (and thus flatten it), the final CSS would look like:\n```css\n@layer utilities {\n  @utility foo {\n    color: red;\n  }\n}\n```\n\nThis means that `@utility` is not top-level and an error would occur.\n\nThis fixes that by removing the `layer(…)` from the import if the imported file (or any of its children) contains an `@utility`. This is to ensure that once everything is imported and flattened, that all `@utility` at-rules are top-level.\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14738","RelatedDescription":"Closed or merged PR \"Remove `layer(utilities)` if imports contain `@utility`\" (#14738)"},{"Id":"2603731901","IsPullRequest":true,"CreatedAt":"2024-10-21T21:45:53","Actor":"RobinMalfait","Number":"14746","RawContent":null,"Title":"Add codemod for border style compatibility","State":"open","Body":"This PR adds a codemod that ensures that the border styles from Tailwind CSS v3 work as expected once your project is migrated to Tailwind CSS v4.\n\nIn Tailwind CSS v3, the default border color is `colors.gray.200` and in Tailwind CSS v4 the default border color is `currentColor`.\n\nSimilarly in Tailwind CSS v3, DOM elements such as `input`, `select`, and `textarea` have a border width of `0px`, in Tailwind CSS v4, we don't change the border width of these elements and keep them as `1px`.\n\nIf your project happens to already use the same values as we use in Tailwind CSS v4, then nothing happens. But this is very unlikely, so we will make sure that we honor your `borderWidth.DEFAULT` and `borderColor.DEFAULT` values.\n\nIf you didn't change the default values in your `tailwind.config.js`, then we will inject compatibility CSS using the default Tailwind CSS v3 values to ensure the default color and width are applied correctly.\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14746","RelatedDescription":"Open PR \"Add codemod for border style compatibility\" (#14746)"},{"Id":"2603731786","IsPullRequest":true,"CreatedAt":"2024-10-21T21:45:49","Actor":"RobinMalfait","Number":"14745","RawContent":null,"Title":"Prepare preflight for border compatibility","State":"open","Body":"This PR prepares the `preflight.css` so that we can introduce border style compatibility in a future PR.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14745","RelatedDescription":"Open PR \"Prepare preflight for border compatibility\" (#14745)"},{"Id":"2598473175","IsPullRequest":false,"CreatedAt":"2024-10-21T20:29:34","Actor":"pinzonjulian","Number":"14726","RawContent":null,"Title":"V4 Alpha 27/28 - `--watch` command does not work on the input css file (config file)","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0.alpha28 (also tried on alpha27)\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nTailwind CLI executable only.\r\n\r\n**What version of Node.js are you using?**\r\n\r\nNone. I'm using the Standalone CLI\r\n\r\n**What browser are you using?**\r\n\r\nNot relevant\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS Sonoma 14.6.1\r\n\r\n**Reproduction URL**\r\n\r\nUploading the whole executable to a Git repo doesn't make much sense but here are the instructions to reproduce the issue locally:\r\n\r\n1. Create a new directory for the test\r\n2. `cd` into that directory\r\n3. [Download the version of the executable](https://github.com/tailwindlabs/tailwindcss/releases/tag/v4.0.0-alpha.28) appropriate for your OS. Assuming your version is `macos-arm64`\r\n4. run `chmod +x tailwindcss-macos-arm64`\r\n5. run `mv tailwindcss-macos-arm64 tailwindcss4alpha28`. I've named the executable with the specific version to make it more explicit\r\n6. Create an empty input.css file\r\n7. Create an empty output.css file\r\n8. Add `@import \"tailwindcss\";` to the `input.css` file\r\n9. Run `./tailwindcss4alpha28 --input input.css --output output.css --watch`\r\n10. 🚨 Check the `output.css` file. Tailwind classes should be present but are not.\r\n11. Run `./tailwindcss4alpha28 --input input.css --output output.css`. Note that this time it's not using the `--watch` flag\r\n12. ✅ Check the `output.css` file. Tailwind classes are present.\r\n \r\n**Describe your issue**\r\n\r\nWe've been trying to make the Tailwind 4 alphas work in Rails but noticed that the watch command isn't working when using the Standalone CLI.\r\n\r\nhttps://github.com/rails/tailwindcss-rails/issues/419\r\n\r\nAfter some debugging we realised that the problem is not coming from our Rails implementation but from the executable provided by Tailwind. ","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14726","RelatedDescription":"Closed issue \"V4 Alpha 27/28 - `--watch` command does not work on the input css file (config file)\" (#14726)"},{"Id":"2603570523","IsPullRequest":true,"CreatedAt":"2024-10-21T20:29:33","Actor":"thecrypticace","Number":"14744","RawContent":null,"Title":"Ensure changes to the input CSS file result in a full rebuild","State":"closed","Body":"Fixes #14726\r\n\r\nI think we broke this when we changed core so that it can handle `@import \"…\"` in CSS.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14744","RelatedDescription":"Closed or merged PR \"Ensure changes to the input CSS file result in a full rebuild\" (#14744)"},{"Id":"2603019566","IsPullRequest":true,"CreatedAt":"2024-10-21T20:21:55","Actor":"philipp-spiess","Number":"14742","RawContent":null,"Title":"Upgrade: Allow `corePlugins` in JS config files","State":"closed","Body":"This PR enables JS configuration files with `corePlugins` themes to be migrated. If such option is found in your config, we will warn the user and omit the option from the resulting CSS file as there is no v4 alternative. ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14742","RelatedDescription":"Closed or merged PR \"Upgrade: Allow `corePlugins` in JS config files\" (#14742)"},{"Id":"2602894429","IsPullRequest":false,"CreatedAt":"2024-10-21T19:54:28","Actor":"benjamincanac","Number":"14740","RawContent":null,"Title":"[v4.0.0-alpha.28] The `neutral` color doesn't work well with `color-mix` for transparency","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.28\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNuxt\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.13.1\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://ui3.nuxt.dev/getting-started\r\n\r\n![CleanShot 2024-10-21 at 17 19 10@2x](https://github.com/user-attachments/assets/c85ec262-ce19-41fd-9cca-931af0162315)\r\n\r\n**Describe your issue**\r\n\r\nIt occurs when using `--color-neutral-*` color with a transparency: `bg-neutral-900/75`.\r\n\r\nThe issue might be in the definition of the color:\r\n\r\n`--color-neutral-900: oklch(0.205 0 none)` -> `--color-neutral-900: oklch(0.205 0 0)`","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14740","RelatedDescription":"Closed issue \"[v4.0.0-alpha.28] The `neutral` color doesn't work well with `color-mix` for transparency\" (#14740)"},{"Id":"2602984080","IsPullRequest":true,"CreatedAt":"2024-10-21T19:54:27","Actor":"adamwathan","Number":"14741","RawContent":null,"Title":"Use `0` instead of `none` in OKLCH values","State":"closed","Body":"This PR updates all of our OKCLH colors to use `0` instead of `none` due to weird behavior in Chrome where using `color-mix` with colors using `none` produces unexpected results:\r\n\r\n<img width=\"1110\" alt=\"image\" src=\"https://github.com/user-attachments/assets/2272e494-500b-4f75-b5c1-d41c714f0339\">\r\n\r\nBoth `none` and `0` behave as expected in Safari and Firefox so suspecting this is a bug in Chrome rather than spec'd behavior.\r\n\r\nFixes #14740","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14741","RelatedDescription":"Closed or merged PR \"Use `0` instead of `none` in OKLCH values\" (#14741)"},{"Id":"2603315619","IsPullRequest":true,"CreatedAt":"2024-10-21T18:14:47","Actor":"thecrypticace","Number":"14743","RawContent":null,"Title":"Improve support for custom variants in `group-*`, `peer-*`, `has-*`, and `not-*` variants","State":"open","Body":"This PR does a number of of things that improve the ergonomics of using variants with `group`, `peer`, `has`, and `not`.\r\n\r\n## The body-less `@variant` syntax now creates at most one style rule\r\n\r\nFor example, in the following CSS:\r\n```css\r\n@variant test (&:hover, &:focus);\r\n```\r\n\r\nThe utility `test:flex` used to generate two separate rules:\r\n```css\r\n.test\\:flex {\r\n  &:hover {\r\n    display: flex;\r\n  }\r\n  &:focus {\r\n    display: flex;\r\n  }\r\n}\r\n```\r\n\r\nBut it now generates only one rule:\r\n```css\r\n.test\\:flex {\r\n  &:hover, &:focus {\r\n    display: flex;\r\n  }\r\n}\r\n```\r\n\r\nThis makes the generated CSS more concise and is simpler for compound variants to work with.\r\n\r\n## `group-*`, `peer-*`, and `has-*` are clearer about what they support\r\n\r\n### One or more style rules MUST be present in the variant\r\n\r\nA variant that is just a media query will not work with these variants:\r\n```css\r\n@variant does-not-work {\r\n  @media (min-width: 640px) {\r\n    @slot;\r\n  }\r\n}\r\n```\r\n\r\nThe utilities `group-does-not-work:flex`, `peer-does-not-work:flex`, and `has-does-not-work:flex` generate no CSS.\r\n\r\nHowever, if a style rule is present, it will work:\r\n```css\r\n@variant works {\r\n  @media (min-width: 640px) {\r\n    &:hover {\r\n      @slot;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe utilities `group-works:flex`, `peer-works:flex`, and `has-works:flex` generate the following CSS:\r\n\r\n```css\r\n.group-works\\:flex {\r\n  @media (min-width: 640px) {\r\n    &:is(:where(.group):hover *) {\r\n      display: flex;\r\n    }\r\n  }\r\n}\r\n\r\n.peer-works\\:flex {\r\n  @media (min-width: 640px) {\r\n    &:is(:where(.peer):hover ~ *) {\r\n      display: flex;\r\n    }\r\n  }\r\n}\r\n\r\n.has-works\\:flex {\r\n  @media (min-width: 640px) {\r\n    &:has(*:hover) {\r\n      display: flex;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Multiple style rules are okay\r\n\r\nWith nesting you can write a single rule like the following:\r\n```css\r\n@variant test {\r\n  &:hover, &[data-hover] {\r\n    @slot;\r\n  }\r\n}\r\n```\r\n\r\nHowever you can also split this into two separate rules. It is functionally equivalent and works with `group-*`, `peer-*`, and `has-*`:\r\n```css\r\n@variant test {\r\n  &:hover {\r\n    @slot;\r\n  }\r\n\r\n  &[data-hover] {\r\n    @slot;\r\n  }\r\n}\r\n```\r\n\r\nWhich generates the following CSS for `group-test:flex`, `peer-test:flex`, and `has-test:flex`:\r\n```css\r\n.group-test\\\\:flex {\r\n  &:is(:where(.group):hover *) {\r\n    display: flex;\r\n  }\r\n  &:is(:where(.group)[data-hover] *) {\r\n    display: flex;\r\n  }\r\n}\r\n\r\n.peer-test\\\\:flex {\r\n  &:is(:where(.peer):hover ~ *) {\r\n    display: flex;\r\n  }\r\n  &:is(:where(.peer)[data-hover] ~ *) {\r\n    display: flex;\r\n  }\r\n}\r\n\r\n.has-test\\\\:flex {\r\n  &:has(*:hover) {\r\n    display: flex;\r\n  }\r\n  &:has(*[data-hover]) {\r\n    display: flex;\r\n  }\r\n}\r\n```\r\n\r\n### Nested style rules are NOT supported\r\n\r\nWe've so far ensured that nesting does not need to be flattened anywhere in core. Because of the nature of how `group-*`, `peer-*`, `has-*`, and `not-*` all work we'd have to implement a mechanism to flatten CSS ourselves. In the interest of keeping the core simpler we've decided to not support nested style rules in these variants.\r\n\r\nSo for example, the following variant will not work with `group-*`, `peer-*`, `has-*`, or `not-*`:\r\n```css\r\n@variant test {\r\n  &:hover {\r\n    &:focus {\r\n      @slot;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nBut if you manually flatten the nested style rules it _will_ work:\r\n```css\r\n@variant test {\r\n  &:hover:focus {\r\n    @slot;\r\n  }\r\n}\r\n```\r\n\r\nDon't worry nested at-rules still work — for example:\r\n```css\r\n@variant this-works-too {\r\n  @media (min-width: 640px) {\r\n    @media (orientation: landscape) {\r\n      &:hover:focus {\r\n        @slot;\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nproduces the following CSS for `group-this-works-too:flex`, `peer-this-works-too:flex`, and `has-this-works-too:flex`:\r\n```css\r\n.group-this-works-too\\\\:flex {\r\n  @media (min-width: 640px) {\r\n    @media (orientation: landscape) {\r\n      &:is(:where(.group):hover:focus *) {\r\n        display: flex;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.peer-this-works-too\\\\:flex {\r\n  @media (min-width: 640px) {\r\n    @media (orientation: landscape) {\r\n      &:is(:where(.peer):hover:focus ~ *) {\r\n        display: flex;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.has-this-works-too\\\\:flex {\r\n  @media (min-width: 640px) {\r\n    @media (orientation: landscape) {\r\n      &:has(*:hover:focus) {\r\n        display: flex;\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n## Expands on variants supported by `not-*`\r\n\r\nThe rules for `not-*` are very similar to the rules listed above but with some slight tweaks:\r\n- At-rules are supported as long as they are one of the conditional at-rules: `@media`, `@supports`, or `@container`\r\n- An `@media` at-rule must have one condition so a variant like `@media screen, print` will not work with `not-*`\r\n- At most one at-rule must be present in the variant\r\n- At most one style rule must be present in the variant\r\n- If an at-rule and style rule are present, the style rule must be nested within the at-rule or vice versa. They cannot be siblings.\r\n\r\nThe rules here are a bit complicated but hopefully you won't actually need to memorize these as most variants should end up being fairly simple in practice. We made sure to support these so things like `not-hover:flex` work as expected. These restrictions are in place to keep the core simple as implementing a full solution that handles arbitrarily nested at-rules and style-rules requires flattening nesting, interpreting CSS trees as logical expressions, and operating on those expressions. This is a non-trivial task that adds significant complexity to the codebase.\r\n\r\n### Body-less variants no longer produce logically incorrect CSS\r\n\r\nThe `not-*` variant as its currently implemented can produce logically incorrect CSS depending on how the variant was written. For example, the following variant:\r\n\r\n```css\r\n@variant hocus (&:hover, &:focus);\r\n```\r\n\r\nWould generate the following CSS:\r\n```css\r\n.hocus\\:flex {\r\n  &:not(:hover) {\r\n    display: flex;\r\n  }\r\n\r\n  &:not(:focus) {\r\n    display: flex;\r\n  }\r\n}\r\n```\r\n\r\nBut with the first change we mentioned at the start of this description about body-less variants, this now generates the correct CSS:\r\n```css\r\n.hocus\\:flex {\r\n  &:not(*:hover, *:focus) {\r\n    display: flex;\r\n  }\r\n}\r\n```\r\n\r\n### `not-*` now supports at-rule variants!\r\n\r\nNow things like `not-md:flex`, `not-supports-grid:flex`, `not-landscape`, `not-motion-safe`, etc… all work as expected!\r\n\r\nThis includes custom variants too! For example, given the following CSS:\r\n```css\r\n@variant hdr {\r\n  @media (dynamic-range: high) {\r\n    @slot;\r\n  }\r\n}\r\n```\r\n\r\nThe utilities `hdr:bg-red-900` and `not-hdr:bg-red-900` generate the following CSS:\r\n```css\r\n.not-hdr\\\\:bg-red-900 {\r\n  @media not (dynamic-range: high) {\r\n    background-color: var(--color-red-900, oklch(0.396 0.141 25.723));\r\n  }\r\n}\r\n\r\n.hdr\\\\:bg-red-900 {\r\n  @media (dynamic-range: high) {\r\n    background-color: var(--color-red-900, oklch(0.396 0.141 25.723));\r\n  }\r\n}\r\n```\r\n\r\nThis works with `@supports` and `@container` as well. For example, given the following CSS:\r\n\r\n```css\r\n@variant grid {\r\n  @supports (display: grid) {\r\n    @slot;\r\n  }\r\n}\r\n\r\n@variant contained-sm {\r\n  @container (max-width: 640px) {\r\n    @slot;\r\n  }\r\n}\r\n```\r\n\r\nThe utilities `grid:flex`, `not-grid:flex`, `contained-sm:flex`, and `not-contained-sm:flex` generate the following CSS:\r\n```css\r\n.not-grid\\\\:flex {\r\n  @supports not (display: grid) {\r\n    display: flex;\r\n  }\r\n}\r\n\r\n.not-contained-sm\\\\:flex {\r\n  @container not (max-width: 640px) {\r\n    display: flex;\r\n  }\r\n}\r\n\r\n.grid\\\\:flex {\r\n  @supports (display: grid) {\r\n    display: flex;\r\n  }\r\n}\r\n\r\n.contained-sm\\\\:flex {\r\n  @container (max-width: 640px) {\r\n    display: flex;\r\n  }\r\n}\r\n```\r\n\r\nIf your conditional at-rule already has a `not` we'll remove it — this works with `@media`, `@supports`, and `@container`.\r\n\r\nFor example, given the following CSS:\r\n```css\r\n@variant flex-only {\r\n  @supports not (display: grid) {\r\n    @slot;\r\n  }\r\n}\r\n```\r\n\r\nThe utility `not-flex-only:flex` generates the following CSS:\r\n```css\r\n.not-flex-only\\\\:flex {\r\n  @supports (display: grid) {\r\n    display: flex;\r\n  }\r\n}\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14743","RelatedDescription":"Open PR \"Improve support for custom variants in `group-*`, `peer-*`, `has-*`, and `not-*` variants\" (#14743)"},{"Id":"2602894295","IsPullRequest":true,"CreatedAt":"2024-10-21T15:21:51","Actor":"philipp-spiess","Number":"14739","RawContent":null,"Title":"Escape JS theme configuration keys","State":"open","Body":"This PR fixes two issues related to how we tread JS theme keys in combination with CSS theme values:\r\n\r\n1. When applying JS theme keys to our `Theme` class, we need to ensure they are escaped in the same way as reading CSS theme keys from CSS are.\r\n2. When JS plugins use the `theme()` function to read a namespace that has values contributed to from the CSS theme and the JS theme, we need to ensure that the resulting set contains only unescaped theme keys.\r\n\r\nFor specific examples, please take a look at the test cases.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14739","RelatedDescription":"Open PR \"Escape JS theme configuration keys\" (#14739)"},{"Id":"2600703648","IsPullRequest":true,"CreatedAt":"2024-10-21T13:22:23","Actor":"gkmk","Number":"14733","RawContent":null,"Title":"fix: Update preflight.css","State":"closed","Body":"Add support for both light and dark color schemes.\r\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme#declaring_color_scheme_preferences\r\n\r\nThis fixes a bug where dark mode is not respected on some built-in html elements.\r\n\r\nIssue found when using the ```<input type=\"date\" />```, the icon would not change color based on selected theme.\r\n\r\nBefore fix:\r\n![image](https://github.com/user-attachments/assets/474838ff-1626-4b03-94a8-8837150ec5f2)\r\n\r\n\r\nAfter fix:\r\n![image](https://github.com/user-attachments/assets/8a9c2dcf-7c31-42ea-9b88-41f949fc3d64)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14733","RelatedDescription":"Closed or merged PR \"fix: Update preflight.css\" (#14733)"},{"Id":"2602277869","IsPullRequest":true,"CreatedAt":"2024-10-21T11:39:50","Actor":"philipp-spiess","Number":"14737","RawContent":null,"Title":"Upgrade: Redce number of false-positive migrations of the important modifier","State":"open","Body":"The important candidate migration is one of the most broad we have since it matches for any utility that are prefixed with an exclamation mark.\n\nWhen running the codemodes on our example projects, we noticed that this was instead creating false-positives with candidates used in code positions, e.g: \n\n\n```ts\nexport default {\n  shouldNotUse: !border.shouldUse,\n}\n```\n\nTo prevent false-positives, this PR adds a heuristics to detect wether or not a candidate is used in a non-code position. We do this by checking the character before and after the modifier and only allow quotes or spaces.\n\nThis can cause candidates to not migrate that are valid Tailwind CSS classes, e.g.: \n\n```ts\nlet classNames = `!underline${isHovered ? ' font-bold' : ''}`\n```\n\nThis, however, is not a big issue since v4 can parse the v3 important prefix too. ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14737","RelatedDescription":"Open PR \"Upgrade: Redce number of false-positive migrations of the important modifier\" (#14737)"},{"Id":"2602118139","IsPullRequest":true,"CreatedAt":"2024-10-21T10:41:33","Actor":"philipp-spiess","Number":"14736","RawContent":null,"Title":"Upgrade: Migrate JS theme configuration keys with dot and slash in the property name","State":"open","Body":"This PR fixes an issue where JS configuration theme properties with dots or slashes in them would not migrate correctly. E.g.:\n\n```ts\nimport { type Config } from 'tailwindcss'\n\nmodule.exports = {\n  theme: {   \n    width: {\n      1.5: '0.375rem',\n      '1/2': '50%',\n    }\n  }\n}\n```\n\nThis should convert to:\n\n```css\n@theme {\n  --width-1_5: 0.375rem;\n  --width-1/2: 50%;\n}\n```\n\n_Note: We will likely change the `--width-1_5` key to `--width-1\\.5` in a follow-up PR._","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14736","RelatedDescription":"Open PR \"Upgrade: Migrate JS theme configuration keys with dot and slash in the property name\" (#14736)"},{"Id":"2601824256","IsPullRequest":true,"CreatedAt":"2024-10-21T08:50:15","Actor":"nickfujita","Number":"14734","RawContent":null,"Title":"Update Important Selector Strategy to apply styles to wrapper component also","State":"open","Body":"Adds the wrapper element with the selector to also be included in the output styles.\r\n\r\nMore info\r\nhttps://github.com/tailwindlabs/tailwindcss/discussions/14735\r\n\r\n## Open issue\r\nRan into one test-case that I didn't quite understand. If this is something that others think would be good to move forward with, would appreciate a bit of help on this one.\r\n```\r\nit('apply + layer utilities + selector variants (like group) + important selector', async () => {\r\n  let config = {\r\n    important: '#myselector',\r\n    content: [{ raw: html`<div class=\"custom-utility\"></div>` }],\r\n    plugins: [],\r\n  }\r\n\r\n  let input = css`\r\n    @tailwind utilities;\r\n    @layer utilities {\r\n      .custom-utility {\r\n        @apply font-normal group-hover:underline;\r\n      }\r\n    }\r\n  `\r\n\r\n  let result = await run(input, config)\r\n\r\n  expect(result.css).toMatchFormattedCss(css`\r\n    #myselector:is(.custom-utility),\r\n    #myselector :is(.custom-utility) {\r\n      font-weight: 400;\r\n    }\r\n    #myselector:is(.group:hover .custom-utility),\r\n    #myselector :is(.group:hover .custom-utility) {\r\n      text-decoration-line: underline;\r\n    }\r\n  `)\r\n})\r\n```\r\n\r\nFor some reason it appears to be using the output of a previous call to `applyImportantSelector` as an input to `applyImportantSelector` with the important selector prefix removed only from the first selector. so it has a strange result:\r\n```\r\n    Difference:\r\n\r\n    - Expected\r\n    + Received\r\n\r\n      #myselector.custom-utility,\r\n    - #myselector .custom-utility {\r\n    + :is(#myselector .custom-utility),\r\n    + #myselector .custom-utility,\r\n    + :is(#myselector .custom-utility) {\r\n        font-weight: 400;\r\n      }\r\n      #myselector:is(.group:hover .custom-utility),\r\n    - #myselector :is(.group:hover .custom-utility) {\r\n    + :is(.group:hover #myselector .custom-utility),\r\n    + #myselector :is(.group:hover .custom-utility),\r\n    + :is(.group:hover #myselector .custom-utility) {\r\n        text-decoration-line: underline;\r\n      }\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14734","RelatedDescription":"Open PR \"Update Important Selector Strategy to apply styles to wrapper component also\" (#14734)"},{"Id":"2600559285","IsPullRequest":false,"CreatedAt":"2024-10-20T15:14:17","Actor":"ajayvignesh01","Number":"14732","RawContent":null,"Title":"v4 alpha 0.28 breaks plugin (tailwindcss-animate) & weird behavior with new p3 color opacity","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.28\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss 8.4.47, Next.js 15.0.0-rc.1\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.16.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/ajayvignesh01/tailwind-v4.0.0-alpha.28-plugins\r\n\r\n**Describe your issue**\r\n\r\nThe `tailwindcss-animate` plugin was working since plugin support landed a few weeks ago. But when I upgrade to alpha 0.28, it stops working. No errors are thrown, but animations that rendered with alpha 0.21 - 0.27 are now not rendering.\r\n\r\nAnother bug is from the introduction of p3 colors. If you hover over the primary button which has `bg-primary hover:bg-primary/90`, the hover color shows a hue of green for some reason.\r\n\r\nPreview with alpha 0.27 - https://tailwind-v4-0-0-alpha-28-plugins-gjaplla02.vercel.app/\r\nPreview with alpha 0.28 - https://tailwind-v4-0-0-alpha-28-plugins-4pzuz8jxf.vercel.app/","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14732","RelatedDescription":"Open issue \"v4 alpha 0.28 breaks plugin (tailwindcss-animate) & weird behavior with new p3 color opacity\" (#14732)"},{"Id":"2599676978","IsPullRequest":false,"CreatedAt":"2024-10-20T05:43:51","Actor":"pinzonjulian","Number":"14730","RawContent":null,"Title":"`--watch` command does not clean output up when classes are removed from watched files","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n- 3.4.14\r\n- 4.0.0-alpha28\r\n\r\nBoth using macOS-arm64\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nStandalone CLI\r\n\r\n**What version of Node.js are you using?**\r\n\r\nNot relevant\r\n\r\n**What browser are you using?**\r\n\r\nNot relevant\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS Sonoma 14.6.1 \r\n\r\n**Reproduction**\r\n\r\nhttps://github.com/pinzonjulian/tailwind_css_cli_watch_bug\r\n\r\nThere are folders for Tailwind 3 and 4 here. Follow the steps to download the executables from:\r\n- https://tailwindcss.com/blog/standalone-cli\r\n- https://github.com/tailwindlabs/tailwindcss/releases\r\n\r\n**Describe your issue**\r\n\r\nThe watch command successfully adds classes when they are identified in the watched files (in the case of the reproduction repo, the `application.html` file). However when the classes are removed from the file, the watcher does not remove them from the output file.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14730","RelatedDescription":"Closed issue \"`--watch` command does not clean output up when classes are removed from watched files\" (#14730)"},{"Id":"2598292802","IsPullRequest":true,"CreatedAt":"2024-10-19T13:19:10","Actor":"RobinMalfait","Number":"14724","RawContent":null,"Title":"Ensure we migrate `theme(spacing.1)` to `var(--spacing-1)` correctly","State":"closed","Body":"This PR fixes an issue where `theme(…)` calls that contain a `.1` weren't correctly converted to `var(--spacing-1)`. The reason for this is that `.1` has some special meaning in cases like `fontSize.xs.1.lineHeight` where it should be converted to `--font-size-xs--line-height`, not `--font-size-xs-1-line-height`.\n\nTo solve this, we make sure to only apply the `--` check if the `1` occurs somewhere in the middle instead of at the very end.\n\nWith this change, the following migrations will happen correctly:\n\n```diff\n- [--value:theme(spacing.1)]\n+ [--value:var(--spacing-1)]\n```\n\n```diff\n- [--value:theme(fontSize.xs.1.lineHeight)]\n+ [--value:var(--font-size-xs--line-height)]\n```\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14724","RelatedDescription":"Closed or merged PR \"Ensure we migrate `theme(spacing.1)` to `var(--spacing-1)` correctly\" (#14724)"},{"Id":"2598604255","IsPullRequest":true,"CreatedAt":"2024-10-19T13:18:50","Actor":"depfu[bot]","Number":"14728","RawContent":null,"Title":"Update @types/react-dom 18.3.0 → 18.3.1 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ @​types/react-dom (18.3.0 → 18.3.1) · [Repo](https://github.com/DefinitelyTyped/DefinitelyTyped)\n\n\n\n\n\nSorry, we couldn't find anything useful about this release.\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14728","RelatedDescription":"Closed or merged PR \"Update @types/react-dom 18.3.0 → 18.3.1 (patch)\" (#14728)"},{"Id":"2598599623","IsPullRequest":true,"CreatedAt":"2024-10-19T13:18:39","Actor":"depfu[bot]","Number":"14727","RawContent":null,"Title":"Update @types/bun 1.1.10 → 1.1.11 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ @​types/bun (1.1.10 → 1.1.11) · [Repo](https://github.com/DefinitelyTyped/DefinitelyTyped)\n\n\n\n\n\nSorry, we couldn't find anything useful about this release.\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14727","RelatedDescription":"Closed or merged PR \"Update @types/bun 1.1.10 → 1.1.11 (patch)\" (#14727)"},{"Id":"2598357094","IsPullRequest":true,"CreatedAt":"2024-10-19T13:05:38","Actor":"RobinMalfait","Number":"14725","RawContent":null,"Title":"Migrate `from`, `via`, and `to` arbitrary values to bare values","State":"closed","Body":"This PR migrates arbitrary values for the `from-*`, `via-*` and `to-*` utilities\nto bare values.\n\nInput:\n```html\n<div class=\"from-[28%]\"></div>\n<div class=\"via-[28%]\"></div>\n<div class=\"to-[28%]\"></div>\n```\n\nOutput:\n```html\n<div class=\"from-28%\"></div>\n<div class=\"via-28%\"></div>\n<div class=\"to-28%\"></div>\n```\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14725","RelatedDescription":"Closed or merged PR \"Migrate `from`, `via`, and `to` arbitrary values to bare values\" (#14725)"},{"Id":"2597848120","IsPullRequest":true,"CreatedAt":"2024-10-18T20:44:26","Actor":"RobinMalfait","Number":"14720","RawContent":null,"Title":"Minify arbitrary values when printing candidates","State":"closed","Body":"This PR will optimize and simplify the candidates when printing the candidate again after running codemods.\r\n\r\nWhen we parse a candidate, we will add spaces around operators, for example `p-[calc(1px+1px)]]` will internally be handled as `calc(1px + 1px)`. Before this change, we would re-print this as: `p-[calc(1px_+_1px)]`.\r\n\r\nThis PR changes that by simplifying the candidate again so that the output is `p-[calc(1px+1px)]`. In addition, if _you_ wrote `p-[calc(1px_+_1px)]` then we will also simplify it to the concise form `p-[calc(1px_+_1px)]`.\r\n\r\n\r\nSome examples:\r\n\r\nInput:\r\n```html\r\n<div class=\"[p]:flex\"></div>\r\n<div class=\"[&:is(p)]:flex\"></div>\r\n<div class=\"has-[p]:flex\"></div>\r\n<div class=\"px-[theme(spacing.4)-1px]\"></div>\r\n```\r\n\r\nOutput before:\r\n```html\r\n<div class=\"[&:is(p)]:flex\"></div>\r\n<div class=\"[&:is(p)]:flex\"></div>\r\n<div class=\"has-[&:is(p)]:flex\"></div>\r\n<div class=\"px-[var(--spacing-4)_-_1px]\"></div>\r\n```\r\n\r\nOutput after:\r\n```html\r\n<div class=\"[p]:flex\"></div>\r\n<div class=\"[p]:flex\"></div>\r\n<div class=\"has-[p]:flex\"></div>\r\n<div class=\"px-[var(--spacing-4)-1px]\"></div>\r\n```\r\n\r\n---\r\n\r\nThis is alternative implementation to #14717 and #14718\r\nCloses: #14717 \r\nCloses: #14718","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14720","RelatedDescription":"Closed or merged PR \"Minify arbitrary values when printing candidates\" (#14720)"},{"Id":"2598285840","IsPullRequest":true,"CreatedAt":"2024-10-18T19:58:05","Actor":"RobinMalfait","Number":"14723","RawContent":null,"Title":"Ensure we migrate `theme(spacing.1)` to `var(--spacing-1)` correctly","State":"closed","Body":"This PR fixes an issue where `theme(…)` calls that contain a `.1` weren't correctly converted to `var(--spacing-1)`. The reason for this is that `.1` has some special meaning in cases like `fontSize.xs.1.lineHeight` where it should be converted to `--font-size-xs--line-height`, not `--font-size-xs-1-line-height`.\n\nTo solve this, we make sure to only apply the `--` check if the `1` occurs somewhere in the middle instead of at the very end.\n\nWith this change, the following migrations will happen correctly:\n\n```diff\n- [--value:theme(spacing.1)]\n+ [--value:var(--spacing-1)]\n```\n\n```diff\n- [--value:theme(fontSize.xs.1.lineHeight)]\n+ [--value:var(--font-size-xs--line-height)]\n```\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14723","RelatedDescription":"Closed or merged PR \"Ensure we migrate `theme(spacing.1)` to `var(--spacing-1)` correctly\" (#14723)"},{"Id":"2597582905","IsPullRequest":true,"CreatedAt":"2024-10-18T18:05:24","Actor":"RobinMalfait","Number":"14717","RawContent":null,"Title":"Make `decodeArbitraryValue` overridable","State":"closed","Body":"This PR allows us to override the `decodeArbitraryValue` function used when parsing candidates and variants.\n\nI'm not 100% happy with this (open for suggestions!) but it was either this, or introducing some class where we mock a method or as a last resort, copy the whole `parseCandidate` implementation and make the necessary changes there when running codemods.\n\nWhile the last one seems to be the cleanest, I'm afraid that the implementation will diverge over time.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14717","RelatedDescription":"Closed or merged PR \"Make `decodeArbitraryValue` overridable\" (#14717)"},{"Id":"2597583124","IsPullRequest":true,"CreatedAt":"2024-10-18T18:05:06","Actor":"RobinMalfait","Number":"14718","RawContent":null,"Title":"Override `designSystem` methods by introducing a `mockDesignSystem`","State":"closed","Body":"We can definitely change the name, also open for suggestions here.\n\nThe idea is as follows:\n\n1. We reuse the existing `designSystem` (and therefore keep all the existing functionality)\n2. We override the `decodeArbitraryValues` function such that we don't add spaces around operators anymore. This is a divergence from the actual implementation. This allows us to keep the whitespace from the candidate without trying to be smart about it.\n3. When parsing arbitrary variants, we wrap them in `&:is(…)`. We do get rid of this wrapper in this `mockDesignSystem` function as well. This has a downside that if people literally wrote `[&:is(p)]:flex` that it will be converted to `[p]:flex` but I think that's reasonable.\n\nAnother thing that this unlocks is that by overriding the `parseCandidate` and `parseVariant` functions, that we can remove the layer of caching. This means that we don't have to cache anymore, and even better, we don't have to use `structuredClone(candidate)` anymore. We used `structuredClone` before to make sure that we didn't mutate existing candidates in the cached design system. But now everything is fresh.\n\nSome examples:\n\nInput:\n```html\n<div class=\"[p]:flex\"></div>\n<div class=\"has-[p]:flex\"></div>\n<div class=\"px-[theme(spacing.4)-1px]\"></div>\n```\n\nOutput before:\n```html\n<div class=\"[&:is(p)]:flex\"></div>\n<div class=\"has-[&:is(p)]:flex\"></div>\n<div class=\"px-[var(--spacing-4)_-_1px]\"></div>\n```\n\nOutput after:\n```html\n<div class=\"[p]:flex\"></div>\n<div class=\"has-[p]:flex\"></div>\n<div class=\"px-[var(--spacing-4)-1px]\"></div>\n```\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14718","RelatedDescription":"Closed or merged PR \"Override `designSystem` methods by introducing a `mockDesignSystem`\" (#14718)"},{"Id":"2597926994","IsPullRequest":true,"CreatedAt":"2024-10-18T17:58:02","Actor":"RobinMalfait","Number":"14721","RawContent":null,"Title":"Migrate `flex-grow` -> `grow` and `flex-shrink` -> `shrink`","State":"closed","Body":"This PR adds missing legacy migrations for migrating `flex-grow` to `grow` and `flex-shrink` to `shrink`.\n\nWe already migrated `flex-grow-0` to `grow-0` and `flex-shrink-0` to `shrink-0`, but forgot about these cases.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14721","RelatedDescription":"Closed or merged PR \"Migrate `flex-grow` -> `grow` and `flex-shrink` -> `shrink`\" (#14721)"},{"Id":"2597209191","IsPullRequest":true,"CreatedAt":"2024-10-18T13:48:57","Actor":"philipp-spiess","Number":"14714","RawContent":null,"Title":"`content` rules from the JS config that are also covered by the automatic source detection should not be migrated to CSS","State":"closed","Body":"This PR changes the migration of `content` rules in the JS config to CSS codemods.\n\nWhen a `content` rule is processed which matches files that are _also matched by the automatic content discovery in v4_, we do not need to emit CSS for that rule. \n\nTake, for example this v3 configuration file:\n\n```ts\nimport { type Config } from 'tailwindcss'\n\nmodule.exports = {\n  content: [\n    './src/**/*.{html,js}', \n    './node_modules/my-external-lib/**/*.{html}'\n  ],\n} satisfies Config\n```\n\nProvided the base directories match up, the first rule will also be covered by the automatic content discovery in v4 and thus we only need to convert the second rule to CSS:\n\n```css\n@import \"tailwindcss\";\n@source '../node_modules/my-external-lib/**/*.{html}';\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14714","RelatedDescription":"Closed or merged PR \"`content` rules from the JS config that are also covered by the automatic source detection should not be migrated to CSS\" (#14714)"},{"Id":"2597384395","IsPullRequest":true,"CreatedAt":"2024-10-18T12:22:32","Actor":"philipp-spiess","Number":"14716","RawContent":null,"Title":"Vite: Fix issues when loading files via static asset queries","State":"open","Body":"Fixes: #14558\r\n\r\nThis PR fixes an issue where our Vite plugin would crash when trying to load stylesheets via certain static asset query parameters:\r\n\r\n```ts\r\nimport raw from './style.css?raw'\r\nimport url from './style.css?url'\r\n```\r\n\r\nThe proper behavior for our extension is to _not touch these file at all_. The `?raw` identifier should never transform anything and the `?url` one will emit a module which points to the asset URL. However, if that URL is loaded as a stylesheet, another transform hook is called and the file is properly transformed. I verified this in the Vite setup and have added an integration test ensuring these two features work as expected.\r\n\r\nI've also greatly reduced the complexity of the Vite playground to make it easier to set up examples like this in the future.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14716","RelatedDescription":"Open PR \"Vite: Fix issues when loading files via static asset queries\" (#14716)"},{"Id":"2597290218","IsPullRequest":false,"CreatedAt":"2024-10-18T11:38:30","Actor":"aaronadamsCA","Number":"14715","RawContent":null,"Title":"`work-break` typo (and also a sort order suggestion)","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.28\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/AU8RQ3P1UP\r\n\r\n**Describe your issue**\r\n\r\nThe only true bug in this bug report is this `word-break` typo that's been lurking since the start of v4:\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/b701ed6916573c84567984780ab30c286ac0397f/packages/tailwindcss/src/property-order.ts#L170-L176\r\n\r\nBut instead of just fixing that, what I actually want to bring up is the sort order itself, which feels a bit off:\r\n\r\n```html\r\n<div class=\"text-balance bg-linear-to-b from-red-500 to-blue-500 p-8 text-base leading-7 text-white\">Balance</div>\r\n<div class=\"text-pretty bg-linear-to-b from-red-500 to-blue-500 p-8 text-base leading-7 text-white\">Pretty</div>\r\n```\r\n\r\nI feel like these six properties should move further down the sort order to be with the rest of the text properties.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14715","RelatedDescription":"Open issue \"`work-break` typo (and also a sort order suggestion)\" (#14715)"},{"Id":"2595740352","IsPullRequest":true,"CreatedAt":"2024-10-17T21:03:28","Actor":"adamwathan","Number":"14709","RawContent":null,"Title":"Prepare v4.0.0-alpha.28 release","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14709","RelatedDescription":"Closed or merged PR \"Prepare v4.0.0-alpha.28 release\" (#14709)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-10-22T03:30:26.9312832Z","RunDurationInMilliseconds":480}