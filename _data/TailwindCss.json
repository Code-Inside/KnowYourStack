{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2556912391","IsPullRequest":true,"CreatedAt":"2024-09-30T19:12:04","Actor":"thecrypticace","Number":"14556","RawContent":null,"Title":"Add `blocklist` support from v3 config files","State":"closed","Body":"This PR adds support for the `blocklist` config option when using a JS config file in v4. You can now block certain classes from being generated at all. This is useful in cases where scanning files sees things that look like classes but are actually not used. For example, in paragraphs in a markdown file:\r\n\r\n  ```js\r\n  // tailwind.config.js\r\n  export default {\r\n    blocklist: ['bg-red-500'],\r\n  }\r\n  ```\r\n  \r\n  ```html\r\n  <!-- index.html -->\r\n  <div class=\"bg-red-500 text-black/75\"></div>\r\n  ```\r\n\r\nOutput:\r\n  \r\n  ```css\r\n  .text-black/75 {\r\n    color: rgba(0, 0, 0, 0.75);\r\n  }\r\n  ```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14556","RelatedDescription":"Closed or merged PR \"Add `blocklist` support from v3 config files\" (#14556)"},{"Id":"2557407826","IsPullRequest":false,"CreatedAt":"2024-09-30T18:45:03","Actor":"bitofbreeze","Number":"14558","RawContent":null,"Title":"[v4] Something has broken since alpha.15, causing imports in CSS files and vite URL imports to not work","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.25\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite 5.4.8\r\n\r\n**What version of Node.js are you using?**\r\n\r\nbun 1.1.27\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nUnfortunately Stackblitz doesn't support creating a repro since it can't run the tailwind wasm module used in the @tailwindcss/vite plugin.\r\n\r\n**Describe your issue**\r\n\r\nWith v4.0.0-alpha.15, I can have a css file that does:\r\n\r\n```\r\n@import \"tailwindcss\";\r\n@import \"common/base.css\";\r\n```\r\n\r\nand use that stylesheet as a [vite URL import](https://vitejs.dev/guide/assets#explicit-url-imports):\r\n\r\n```\r\nimport stylesUrl from \"./root.css?url\";\r\n```\r\n\r\nHowever, when I just upgrade to v4.0.0-alpha.25, I get\r\n\r\n1. `Uncaught SyntaxError: The requested module '/app/root.css?url' does not provide an export named 'default'` because the vite URL imports have broken.\r\n\r\nIf I just import normally without the URL suffix (`import \"./root.css\";`),\r\n\r\n2. Now not all the styles from common/base.css which is imported in ./root.css apply, and trying to do something basic like reassign a CSS variable in ./root.css no longer works:\r\n\r\n```\r\n@theme {\r\n\t--color-bg: orange;\r\n}\r\n```\r\n\r\nThat works back on v4.0.0-alpha.15.\r\n\r\nPlease let me know if I can provide more info, or if instead of Stackblitz, there is another provider that does support wasm.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14558","RelatedDescription":"Open issue \"[v4] Something has broken since alpha.15, causing imports in CSS files and vite URL imports to not work\" (#14558)"},{"Id":"2556687603","IsPullRequest":false,"CreatedAt":"2024-09-30T17:38:44","Actor":"JustCreateDeveloper","Number":"14555","RawContent":null,"Title":"Next Js -  Hot reloading occurs on every save when having badly defined content in tailwing config file.","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.13\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\nNextJs 14.2.2\r\n\r\n**What version of Node.js are you using?**\r\n\r\n21.3.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome, Opera\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS, Windows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/vercel/next.js/discussions/25712#discussioncomment-10354430\r\n\r\n**Describe your issue**\r\n\r\nHot reloading occurs on every save when having badly defined content in tailwing config file.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14555","RelatedDescription":"Closed issue \"Next Js -  Hot reloading occurs on every save when having badly defined content in tailwing config file.\" (#14555)"},{"Id":"2557032558","IsPullRequest":true,"CreatedAt":"2024-09-30T15:37:50","Actor":"philipp-spiess","Number":"14557","RawContent":null,"Title":"Template migrations: Migrate v3 prefixes to v4","State":"open","Body":"This PR adds a new migration that can migrate Tailwind CSS v3 style prefixes into Tailwind CSS v4.\r\n\r\nThe migration is split into three separate pieces of work:\r\n\r\n1. Firstly, we need to read the full JavaScript config to get the _old_ prefix option. This is necessary because in v4, we will not allow things like custom-separators for the prefix. From this option we will then try and compute a new prefix (in 90% of the cases this is going to just remove the trailing `-` but it can also work in more complex cases).\r\n2. Then we migrate all Candidates. The important thing here is that we need to operate on the raw candidate string because by relying on `parseCandidate` (which we do for all other migrations) would not work, as the candidates are not valid in v4 syntax. More on that in a bit.\r\n3. Lastly we also make sure to update the CSS config to include the new prefix. This is done by prepending the prefix option like so:\r\n    \r\n    ```css\r\n    @import \"tailwindcss\" prefix(tw);\r\n    ```\r\n\r\n### Migrating candidates\r\n\r\nThe main difference between v3 prefixes and v4 prefixes is that in v3, the prefix was _part of the utility_ where as in v4 it is _always in front of the CSS class. \r\n\r\nSo, for example, this candidate in v3: \r\n\r\n```\r\nhover:-tw-mr-4\r\n```\r\n\r\nWould be converted to the following in v4:\r\n\r\n```\r\ntw:hover:-mr-4\r\n```\r\n\r\nSince the first example _won't parse as a valid Candidate in v4, as the `tw-mr` utility does not exist, we have to operate on the raw candidate string first. To do this I created a fork of the `parseCandidate` function _without any validation of utilities or variants_. This is used to identify part of the candidate that is the `base` and then ensuring the `base` starts with the old prefix. We then remove this to create an \"unprefixed\" candidate that we validate against a version of the DesignSystem _with no prefixes configured_. If the variant is valid this way, we can then print it again with the `DesignSystem` that has the new prefix to get the migrated version.\r\n\r\nSince we set up the `DesignSystem` to include the new prefix, we can also be certain that migrations that happen afterwards would still disqualify candidates that aren't valid according to the new prefix policy. This does mean we need to have the prefix fixup be the first step in our pipeline.\r\n\r\nOne interesting bit is that in v3, arbitrary properties did not require prefixes where as in v4 they do. So the following candidate:\r\n\r\n```\r\n[color:red]\r\n```\r\n\r\nWill be converted to:\r\n\r\n```\r\ntw:[color:red]\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14557","RelatedDescription":"Open PR \"Template migrations: Migrate v3 prefixes to v4\" (#14557)"},{"Id":"2556403101","IsPullRequest":true,"CreatedAt":"2024-09-30T14:39:21","Actor":"RobinMalfait","Number":"14553","RawContent":null,"Title":"Expose timing information in debug mode","State":"closed","Body":"This PR exposes when using the the `DEBUG` environment variable. This follows the `DEBUG` conventions where:\n\n- `DEBUG=1`\n- `DEBUG=true`\n- `DEBUG=*`\n- `DEBUG=tailwindcss`\n\nWill enable the debug information, but when using:\n\n- `DEBUG=0`\n- `DEBUG=false`\n- `DEBUG=-tailwindcss`\n\nIt will not.\n\nThis currently only exposes some timings related to:\n\n1. Scanning for candidates\n2. Building the CSS\n3. Optimizing the CSS\n\nWe can implement a more advanced version of this where we also expose more fine grained information such as the files we scanned, the amount of candidates we found and so on. But I believe that this will be enough to start triaging performance related issues.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14553","RelatedDescription":"Closed or merged PR \"Expose timing information in debug mode\" (#14553)"},{"Id":"2552859219","IsPullRequest":true,"CreatedAt":"2024-09-30T13:32:31","Actor":"RobinMalfait","Number":"14536","RawContent":null,"Title":"CSS codemod: inject `@import` in a more expected location","State":"closed","Body":"This PR inserts the `@import` in a more sensible location when running codemods.\r\n\r\nThe idea is that we replace `@tailwind base; @tailwind components; @tailwind utilities;` with the much simple `@import \"tailwindcss\";`. We did this by adding the `@import` to the top of the file.\r\n\r\nWhile this is correct, this means that the diff might not be as clear. For example, if you have a situation where you have a license comment:\r\n```css\r\n/**! My license comment */\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n```\r\n\r\nThis resulted in:\r\n```css\r\n@import \"tailwindcss\";\r\n/**! My license comment */\r\n```\r\n\r\nWhile it is not wrong, it feels weird that this behaves like this. In this commit we make sure that it is injected in-place (the first `@tailwind` at-rule we find) and fixup the position if we can't inject it in-place.\r\n\r\nThe above example results in this:\r\n```css\r\n/**! My license comment */\r\n@import \"tailwindcss\";\r\n```\r\n\r\nHowever, there are scenario's where you can't replace the `@tailwind` directives directly. E.g.:\r\n```css\r\n/**! My license comment */\r\nhtml {\r\n  color: red;\r\n}\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n```\r\n\r\nIf we replace the `@tailwind` directives in-place, it would look like this:\r\n```css\r\n/**! My license comment */\r\nhtml {\r\n  color: red;\r\n}\r\n@import \"tailwindcss\";\r\n```\r\n\r\nBut this is invalid CSS, because you can't have CSS above an `@import` at-rule. There are some exceptions like:\r\n- `@charset`\r\n- `@import`\r\n- `@layer foo, bar;` (just the order, without a body)\r\n- comments\r\n\r\nIn this scenario, we inject the import in the nearest place where it is allowed to. In this case:\r\n\r\n```css\r\n/**! My license comment */\r\n@import \"tailwindcss\";\r\n@layer base {\r\n  html {\r\n     color: red;\r\n  }\r\n}\r\n```\r\n\r\nAdditionally, we will wrap the existing CSS in an `@layer` of the first Tailwind directive we saw. In this case an `@layer base`. This ensures that utilities still win from the default styles.\r\n\r\nAlso note that the (license) comment is allowed to exist before the `@import`, therefore we do not put the `@import` above it. This also means that the diff doesn't touch the license header at all, which makes the diffs cleaner and easier to reason about.\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14536","RelatedDescription":"Closed or merged PR \"CSS codemod: inject `@import` in a more expected location\" (#14536)"},{"Id":"2554910009","IsPullRequest":true,"CreatedAt":"2024-09-29T13:34:35","Actor":"fcrozatier","Number":"14548","RawContent":null,"Title":"Add a sensible default for alt texts","State":"closed","Body":"Hey! \r\n\r\nIn the rare cases of a broken image, when the alt text is displayed it's is styled as raw text by default. So it's unclear where the alt text starts / ends.\r\n\r\nThis PR makes the alt text italic by default, which seems like a sensible default and a slight improved which doesn't impact most users.  \r\n\r\n<img width=\"1328\" alt=\"Capture d’écran 2024-09-29 à 14 26 33\" src=\"https://github.com/user-attachments/assets/b04b5e4c-a014-49cf-b239-cc75299b2316\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14548","RelatedDescription":"Closed or merged PR \"Add a sensible default for alt texts\" (#14548)"},{"Id":"2554481927","IsPullRequest":true,"CreatedAt":"2024-09-29T01:36:29","Actor":"elham-barzegar","Number":"14546","RawContent":null,"Title":"Update pre-publish-optimizations.mjs","State":"closed","Body":"optimizeFeature\r\n\r\n<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14546","RelatedDescription":"Closed or merged PR \"Update pre-publish-optimizations.mjs\" (#14546)"},{"Id":"2554563708","IsPullRequest":true,"CreatedAt":"2024-09-28T23:57:03","Actor":"depfu[bot]","Number":"14547","RawContent":null,"Title":"Update eslint 8.57.0 → 9.11.1 (major)","State":"open","Body":"\n\n\n\n\nHere is everything you need to know about this upgrade. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ eslint (8.57.0 → 9.11.1) · [Repo](https://github.com/eslint/eslint) · [Changelog](https://github.com/eslint/eslint/blob/main/CHANGELOG.md)\n\n\n\n<details>\n<summary>Release Notes</summary>\n<p><em>Too many releases to show here. View the <a href=\"https://github.com/eslint/eslint/blob/main/CHANGELOG.md\">full release notes</a>.</em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/eslint/eslint/compare/abea3b6f399fde9e28cf6dc5d6c013938f163cdc...69e94597caa92c9b9f4071f8c9ed4a03772fa6de\">See the full diff on Github</a>. The new version differs by more commits than we can show here.</p>\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14547","RelatedDescription":"Open PR \"Update eslint 8.57.0 → 9.11.1 (major)\" (#14547)"},{"Id":"2554380031","IsPullRequest":false,"CreatedAt":"2024-09-28T17:00:27","Actor":"VashJuan","Number":"14545","RawContent":null,"Title":"Add 'full-bleed' or 'breakout' utility.","State":"closed","Body":"### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/14544\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **VashJuan** September 28, 2024</sup>\r\nAfter spending a few days searching, I found this elegant solution to 'breaking out' of whatever container/columns you might be constrained by, and creating a 'full bleed' effect.\r\nhttps://piccalil.li/blog/creating-a-full-bleed-css-utility/\r\n\r\nIt's just:\r\n```\r\nwidth: 100vw;\r\nmargin-left: calc(50% - 50vw);\r\n```\r\nand by making 50vw smaller, you can create variable-width, centered bleeds!\r\n\r\nWouldn't this be a nice addition to TailwindCSS? This seems useful enough to make it broadly available. (Or less nice would just be to put it in the docs/examples somewhere.)</div>","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14545","RelatedDescription":"Closed issue \"Add 'full-bleed' or 'breakout' utility.\" (#14545)"},{"Id":"2554020515","IsPullRequest":true,"CreatedAt":"2024-09-28T11:20:51","Actor":"depfu[bot]","Number":"14542","RawContent":null,"Title":"Update @types/bun 1.1.8 → 1.1.10 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ @​types/bun (1.1.8 → 1.1.10) · [Repo](https://github.com/DefinitelyTyped/DefinitelyTyped)\n\n\n\n\n\nSorry, we couldn't find anything useful about this release.\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14542","RelatedDescription":"Closed or merged PR \"Update @types/bun 1.1.8 → 1.1.10 (patch)\" (#14542)"},{"Id":"2553774779","IsPullRequest":true,"CreatedAt":"2024-09-28T11:11:50","Actor":"depfu[bot]","Number":"14541","RawContent":null,"Title":"Update turbo 2.1.1 → 2.1.2 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ turbo (2.1.1 → 2.1.2) · [Repo](https://github.com/turborepo/turbo)\n\n\n\n\n\nSorry, we couldn't find anything useful about this release.\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14541","RelatedDescription":"Closed or merged PR \"Update turbo 2.1.1 → 2.1.2 (patch)\" (#14541)"},{"Id":"2553209394","IsPullRequest":true,"CreatedAt":"2024-09-27T15:52:58","Actor":"philipp-spiess","Number":"14539","RawContent":null,"Title":"Update template migration interface","State":"closed","Body":"This PR lands a quick interface update for template migration with some lessons learned form our existing migrations. Specifically, this version attempts to:\r\n\r\n- Allow migrations to access the raw candidate. This way we can migrate candidates that _would not parse as valid in v4_. This will help us migrate prefixes in candidates from v3 to v4.\r\n- There is no more awkward \"return null\" if nothing has changed. The return `null` was necessary because we relied on mutating the Variant and since parsing/printing could remove some information, it was not easy to find out wether a candidate needed to be migrated at all. With a string though, we can do this cheaply by returning the `rawCandidate`.\r\n- We previously asserted that if `parseCandidate` returns more than one candidate, we only picked the first one. This behavior is now moved into the migrations where we have more context. For now though, we still do not need to worry about this since in all cases, these duplicate candidates would serialize to the same `Candidate`. It is helpful if you only want to run a migration on a specific type of candidate (e.g. if there's a `static` one and a more generic `functional` one).  \r\n- We need access to the `DesignSystem` inside migrations now to be able to `parseCandidate`s.\r\n\r\nOpening this up as a separate PR since it can take some time to iron out the edge cases for the individual codemod PRs and I don't want to be rebasing all the time. \r\n\r\n## Before\r\n\r\n```ts\r\ntype Migration = (candidate: Candidate) => Candidate | null\r\n```\r\n\r\n## After\r\n\r\n```ts\r\ntype Migration = (designSystem: DesignSystem, rawCandidate: string) => string\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14539","RelatedDescription":"Closed or merged PR \"Update template migration interface\" (#14539)"},{"Id":"2553171158","IsPullRequest":true,"CreatedAt":"2024-09-27T15:22:00","Actor":"philipp-spiess","Number":"14538","RawContent":null,"Title":"Add the bg-gradient migration to the default list of template migrations","State":"closed","Body":"Quick follow-up from #14537 as I forgot to add the new migration to the default list of migrations.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14538","RelatedDescription":"Closed or merged PR \"Add the bg-gradient migration to the default list of template migrations\" (#14538)"},{"Id":"2553106893","IsPullRequest":true,"CreatedAt":"2024-09-27T14:52:57","Actor":"philipp-spiess","Number":"14537","RawContent":null,"Title":"Template migrations: Migrate `bg-gradient-*` utilities to `bg-linear-*`","State":"closed","Body":"In v4, we're making room for more gradient primitives with the addition of [gradient and conic gradient utilities](https://github.com/tailwindlabs/tailwindcss/pull/14467). To make this clearer, we are renaming all v3 `bg-gradient-*` utilities to `bg-linear-*` to make it clear that these refer to linear gradients.\r\n\r\nThis PR adds a migration that will automatically update the class names based on this migration.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14537","RelatedDescription":"Closed or merged PR \"Template migrations: Migrate `bg-gradient-*` utilities to `bg-linear-*`\" (#14537)"},{"Id":"2550212475","IsPullRequest":false,"CreatedAt":"2024-09-27T09:29:41","Actor":"aaronadamsCA","Number":"14523","RawContent":null,"Title":"Fix compiler in non-Node.js environments?","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nSince `v4.0.0-alpha.21`\r\n\r\n<!-- **What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nN/A\r\n\r\n**What version of Node.js are you using?**\r\n\r\nN/A\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nCloudflare Workers -->\r\n\r\n**Reproduction URL**\r\n\r\nI'm not sure it's necessary, plus let's first confirm you even want to support this scenario.\r\n\r\n**Describe your issue**\r\n\r\nUntil recently I could `import { compile } from \"tailwindcss\"` in a worker (or, presumably, browser) runtime and build a Tailwind stylesheet from my own list of candidate classes. This was awesome because we could compile certain Tailwind styles at runtime instead of build time.\r\n\r\nStarting with `v4.0.0-alpha.21` this is broken because of a new unguarded reference to `process.env`:\r\n\r\nhttps://app.renovatebot.com/package-diff?name=tailwindcss&from=4.0.0-alpha.20&to=4.0.0-alpha.21\r\n\r\nI'm not sure this is a bug _per se_, because I don't know if you officially support running the compiler directly in non-Node.js environments.\r\n\r\nBut… could you? Would you? Our use case doesn't require a scanner, because our classes are in pure HTML, where a regex works flawlessly; we just need the compiler to build the CSS (AFAIK the same is true for Tailwind Play).\r\n\r\nObviously we can polyfill `process` to work around this for now, but I wanted to get your POV here. It seems to me if the compiler could pass tests in both Node.js and browser environments, you'd have a pure ESM package that could run anywhere, including worker runtimes. I just don't know if it's something you want to support.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14523","RelatedDescription":"Closed issue \"Fix compiler in non-Node.js environments?\" (#14523)"},{"Id":"2551327205","IsPullRequest":true,"CreatedAt":"2024-09-27T09:29:40","Actor":"thecrypticace","Number":"14531","RawContent":null,"Title":"Remove `process.env.VERSION` check","State":"closed","Body":"Fixes #14523","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14531","RelatedDescription":"Closed or merged PR \"Remove `process.env.VERSION` check\" (#14531)"},{"Id":"2551619128","IsPullRequest":false,"CreatedAt":"2024-09-26T22:20:15","Actor":"blaketradedev","Number":"14533","RawContent":null,"Title":"Tailwind 4.0.0-alpha.25 crashes my 5.0.0-next.259 app on hot reload","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n\"@tailwindcss/postcss\": \"4.0.0-alpha.25\",\r\n\"@tailwindcss/vite\": \"4.0.0-alpha.25\",\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npnpm 8.15.4, vite 5.4.8, @sveltejs/vite-plugin-svelte 4.0.0-next.7, \r\n\r\n**What version of Node.js are you using?**\r\n\r\nv21.7.1\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Describe your issue**\r\n\r\nI had tailwind 4.0.0-alpha.19, when I upgraded to .25, the app started to crash every time I saved a file in my sveltekit 5 app, I guess you call it hot reload? I downgraded and the problem went away, so would be great if you guys could check that out ","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14533","RelatedDescription":"Open issue \"Tailwind 4.0.0-alpha.25 crashes my 5.0.0-next.259 app on hot reload\" (#14533)"},{"Id":"2551276647","IsPullRequest":true,"CreatedAt":"2024-09-26T21:50:31","Actor":"PolyMeilex","Number":"14530","RawContent":null,"Title":"Use official FxHash crate","State":"closed","Body":"`fxhash` is an old (and abandoned?) crate that simply extracts the fxhash implementation from rustc. These days, rustc has an official fxhash crate, that is actively maintained by the rust-lang organization.\r\n\r\nIn practice this does not really matter, aside from the new crate having one less dependency (`byteorder`), but I think it's generally a good idea to use something straight from the rust team.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14530","RelatedDescription":"Closed or merged PR \"Use official FxHash crate\" (#14530)"},{"Id":"2551418205","IsPullRequest":true,"CreatedAt":"2024-09-26T20:02:44","Actor":"depfu[bot]","Number":"14532","RawContent":null,"Title":"Update @types/react 18.3.3 → 18.3.9 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ @​types/react (18.3.3 → 18.3.9) · [Repo](https://github.com/DefinitelyTyped/DefinitelyTyped)\n\n\n\n\n\nSorry, we couldn't find anything useful about this release.\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14532","RelatedDescription":"Closed or merged PR \"Update @types/react 18.3.3 → 18.3.9 (patch)\" (#14532)"},{"Id":"2551150134","IsPullRequest":false,"CreatedAt":"2024-09-26T17:56:43","Actor":"AlemTuzlak","Number":"14527","RawContent":null,"Title":"There seems to be an issue with tailwindcss/nesting plugin","State":"closed","Body":"\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.13\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss 8.4.29\r\n\r\n**What version of Node.js are you using?**\r\n\r\n20\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\n https://github.com/forge42dev/Remix-Dev-Tools/pull/150\r\n\r\n**Describe your issue**\r\n\r\nSo I have a very unique use-case with tailwind, I use it to style `remix-development-tools` which is an OSS library and as such it can't override global styles or anything on the users project/app. I decided to create a class on the root called \"remix-dev-tools\" and use the tailwind nesting plugin to append it to every class generated by tailwind so it does not conflict with users config in any way. This works great for 90% of classes but I've noticed that modifiers such as hover, after, before etc do not get nested, here is an example output of the script:\r\n```css\r\n// this part works awesome!\r\n.remix-dev-tools .transition-all {\r\n  transition-property: all;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n  transition-duration: 150ms;\r\n}\r\n.remix-dev-tools .transition-transform {\r\n  transition-property: transform;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n  transition-duration: 150ms;\r\n}\r\n.remix-dev-tools .duration-1000 {\r\n  transition-duration: 1000ms;\r\n}\r\n.remix-dev-tools .duration-200 {\r\n  transition-duration: 200ms;\r\n}\r\n// this part doesn't :(\r\n.after\\:absolute::after {\r\n  content: var(--tw-content);\r\n  position: absolute;\r\n}\r\n.after\\:-left-2::after {\r\n  content: var(--tw-content);\r\n  left: -0.5rem;\r\n}\r\n.after\\:top-1\\/2::after {\r\n  content: var(--tw-content);\r\n  top: 50%;\r\n}\r\n.after\\:h-0::after {\r\n  content: var(--tw-content);\r\n  height: 0px;\r\n}\r\n.after\\:w-0::after {\r\n  content: var(--tw-content);\r\n  width: 0px;\r\n}\r\n.after\\:-translate-y-1\\/2::after {\r\n  content: var(--tw-content);\r\n  --tw-translate-y: -50%;\r\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\r\n}\r\n.after\\:-rotate-90::after {\r\n  content: var(--tw-content);\r\n  --tw-rotate: -90deg;\r\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\r\n}\r\n.after\\:border-x-4::after {\r\n  content: var(--tw-content);\r\n  border-left-width: 4px;\r\n  border-right-width: 4px;\r\n}\r\n.after\\:border-b-\\[6px\\]::after {\r\n  content: var(--tw-content);\r\n  border-bottom-width: 6px;\r\n}\r\n.after\\:border-x-transparent::after {\r\n  content: var(--tw-content);\r\n  border-left-color: transparent;\r\n  border-right-color: transparent;\r\n}\r\n.after\\:border-b-gray-700::after {\r\n  content: var(--tw-content);\r\n  --tw-border-opacity: 1;\r\n  border-bottom-color: rgb(55 65 81 / var(--tw-border-opacity));\r\n}\r\n.hover\\:cursor-pointer:hover {\r\n  cursor: pointer;\r\n}\r\n.hover\\:bg-\\[\\#121212\\]:hover {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(18 18 18 / var(--tw-bg-opacity));\r\n}\r\n.hover\\:bg-\\[\\#212121\\]\\/50:hover {\r\n  background-color: rgb(33 33 33 / 0.5);\r\n}\r\n.hover\\:text-gray-500:hover {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(107 114 128 / var(--tw-text-opacity));\r\n}\r\n.hover\\:text-green-600:hover {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(22 163 74 / var(--tw-text-opacity));\r\n}\r\n.hover\\:text-red-600:hover {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(220 38 38 / var(--tw-text-opacity));\r\n}\r\n.hover\\:opacity-50:hover {\r\n  opacity: 0.5;\r\n}\r\n.hover\\:ring-2:hover {\r\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\r\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\r\n  box-shadow:\r\n    var(--tw-ring-offset-shadow),\r\n    var(--tw-ring-shadow),\r\n    var(--tw-shadow, 0 0 #0000);\r\n}\r\n.hover\\:ring-offset-2:hover {\r\n  --tw-ring-offset-width: 2px;\r\n}\r\n.focus\\:bg-\\[\\#121212\\]:focus {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(18 18 18 / var(--tw-bg-opacity));\r\n}\r\n.focus\\:outline-none:focus {\r\n  outline: 2px solid transparent;\r\n  outline-offset: 2px;\r\n}\r\n.focus\\:ring-2:focus {\r\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\r\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\r\n  box-shadow:\r\n    var(--tw-ring-offset-shadow),\r\n    var(--tw-ring-shadow),\r\n    var(--tw-shadow, 0 0 #0000);\r\n}\r\n.focus\\:ring-offset-2:focus {\r\n  --tw-ring-offset-width: 2px;\r\n}\r\n.disabled\\:cursor-not-allowed:disabled {\r\n  cursor: not-allowed;\r\n}\r\n.disabled\\:opacity-50:disabled {\r\n  opacity: 0.5;\r\n}\r\n.group:hover .group-hover\\:visible {\r\n  visibility: visible;\r\n}\r\n.group:hover .group-hover\\:opacity-100 {\r\n  opacity: 1;\r\n}\r\n.data-\\[disabled\\]\\:pointer-events-none[data-disabled] {\r\n  pointer-events: none;\r\n}\r\n.data-\\[side\\=bottom\\]\\:translate-y-1[data-side=bottom] {\r\n  --tw-translate-y: 0.25rem;\r\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\r\n}\r\n.data-\\[side\\=left\\]\\:-translate-x-1[data-side=left] {\r\n  --tw-translate-x: -0.25rem;\r\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\r\n}\r\n.data-\\[side\\=right\\]\\:translate-x-1[data-side=right] {\r\n  --tw-translate-x: 0.25rem;\r\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\r\n}\r\n.data-\\[side\\=top\\]\\:-translate-y-1[data-side=top] {\r\n  --tw-translate-y: -0.25rem;\r\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\r\n}\r\n@keyframes accordion-up {\r\n  from {\r\n    height: var(--radix-accordion-content-height);\r\n  }\r\n  to {\r\n    height: 0;\r\n  }\r\n}\r\n.data-\\[state\\=closed\\]\\:animate-accordion-up[data-state=closed] {\r\n  animation: accordion-up 0.2s ease-out;\r\n}\r\n@keyframes accordion-down {\r\n  from {\r\n    height: 0;\r\n  }\r\n  to {\r\n    height: var(--radix-accordion-content-height);\r\n  }\r\n}\r\n.data-\\[state\\=open\\]\\:animate-accordion-down[data-state=open] {\r\n  animation: accordion-down 0.2s ease-out;\r\n}\r\n.data-\\[disabled\\]\\:opacity-50[data-disabled] {\r\n  opacity: 0.5;\r\n}\r\n@media (min-width: 1024px) {\r\n  .lg\\:\\!flex-row {\r\n    flex-direction: row !important;\r\n  }\r\n}\r\n.\\[\\&\\[data-state\\=open\\]\\>svg\\]\\:rotate-180[data-state=open] > svg {\r\n  --tw-rotate: 180deg;\r\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\r\n}\r\n\r\n```\r\nhere is my PostCSS config:\r\n```ts\r\nimport tailwindcss from \"tailwindcss\";\r\nimport tailwindcssNesting from \"tailwindcss/nesting/index.js\";\r\nimport autoprefixer from \"autoprefixer\";\r\nimport config from \"./tailwind.config.js\";\r\nexport default {\r\n  plugins: [tailwindcss(config),tailwindcssNesting(), autoprefixer()],\r\n};\r\n```\r\nand tailwind.config.js:\r\n```ts\r\n/** @type {import('tailwindcss').Config} */\r\nexport default {\r\n  content: [\"./src/**/*.{tsx,ts,js}\"],\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        popover: \"#212121\",\r\n        main: \"#212121\",\r\n        \"popover-foreground\": \"#fff\",\r\n      },\r\n      keyframes: {\r\n        \"accordion-down\": {\r\n          from: { height: 0 },\r\n          to: { height: \"var(--radix-accordion-content-height)\" },\r\n        },\r\n        \"accordion-up\": {\r\n          from: { height: \"var(--radix-accordion-content-height)\" },\r\n          to: { height: 0 },\r\n        },\r\n        \"fade-in-left\": {\r\n          \"0%\": { opacity: 0, transform: \"translateX(-100%)\" },\r\n          \"100%\": { opacity: 1, transform: \"translateX(0)\" },\r\n        },\r\n        \"fade-in\": {\r\n          \"0%\": { opacity: 0 },\r\n          \"100%\": { opacity: 1 },\r\n        },\r\n      },\r\n      animation: {\r\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\r\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\r\n        \"fade-in-left\": \"fade-in-left 0.5s ease-in\",\r\n        \"fade-in\": \"fade-in 0.5s ease-in\",\r\n      },\r\n    },\r\n  }, \r\n  plugins: [await import(\"tailwindcss-animate\")],\r\n \r\n};\r\n\r\n```\r\n\r\nI guess my question is: \r\nIs this some sort of misconfiguration on my end where I'm missing something obvious as the docs are very minimal in terms of GOTCHAs? Or is there some sort of limitation/restriction I'm not aware of that causes this behavior? I've provided the url so you can see it, it's enough to run npm install and npm run build and open up `dist/client.css`","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14527","RelatedDescription":"Closed issue \"There seems to be an issue with tailwindcss/nesting plugin\" (#14527)"},{"Id":"2550891507","IsPullRequest":true,"CreatedAt":"2024-09-26T15:53:41","Actor":"RobinMalfait","Number":"14525","RawContent":null,"Title":"Ensure that `@utility` is top-level and cannot be nested","State":"closed","Body":"This PR fixes an issue where we expect the `@utility` to be top-level, but we didn't enforce it. This PR enforces that the `@utility` is top-level.\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14525","RelatedDescription":"Closed or merged PR \"Ensure that `@utility` is top-level and cannot be nested\" (#14525)"},{"Id":"2550923673","IsPullRequest":true,"CreatedAt":"2024-09-26T15:27:38","Actor":"philipp-spiess","Number":"14526","RawContent":null,"Title":"Template migrations: Add automatic var injection codemods","State":"open","Body":"In v4, we're [removing automatic var injection](https://github.com/tailwindlabs/tailwindcss/pull/13657) (please refer to this PR for more detail as to why). \r\n\r\nAutomatic var injection made it so that if you have a candidate like `bg-[--my-color]`, v3 would automatically wrap the content of the arbitrary section with a `var(…)`, resulting in the same as typing `bg-[var(--my-color)]`.\r\n\r\nThis PR adds codemods that go over various arbitrary fields and does the `var(…)` injection for you. To be precise, we will add `var(…)` to:\r\n\r\n- Modifiers, e.g.: `bg-red-500/[var(--my-opacity)]`\r\n- Variants, e.g.:  `supports-[var(--test)]:flex`\r\n- Arbitrary candidates, e.g.: `[color:var(--my-color)]`\r\n- Arbitrary values for functional candidates, e.g.: `bg-[var(--my-color)]`\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14526","RelatedDescription":"Open PR \"Template migrations: Add automatic var injection codemods\" (#14526)"},{"Id":"2550556927","IsPullRequest":true,"CreatedAt":"2024-09-26T13:13:28","Actor":"philipp-spiess","Number":"14524","RawContent":null,"Title":"Template migrations: Add variant order codemods","State":"open","Body":"One of the breaking changes of v4 is the [inversion of variant order application](https://github.com/tailwindlabs/tailwindcss/pull/13478). In v3, variants are applied \"inside-out\".\r\n\r\n\r\nFor example a candidate like `*:first:underline` would produce the following CSS in v3:\r\n\r\n```css\r\n.\\*\\:first\\:underline:first-child > * {\r\n  text-decoration-line: underline;\r\n}\r\n```\r\n\r\nTo get the same behavior in v4, you would need to invert the candidate order to `first:*:underline`. This would generate the following CSS in v4:\r\n\r\n```css\r\n:where(.first\\:\\*\\:underline:first-child > *) {\r\n  text-decoration-line: underline;\r\n}\r\n```\r\n\r\n## The Migration\r\n\r\nThe most naive approach would be to invert the variants for every candidate with at least two variants. This, however, runs into one issue and some unexpected inconsistencies. I have identified the following areas:\r\n\r\n1. Some pseudo class variants _must appear at the end of the selector_. v3 was patching over this by doing some manual reordering in for these variants. For example, in v3, both of these variants create the same output CSS: `hover:before:underline` and `before:hover:underline`. In v4 we simplified this system though and no longer generate the same output in both cases. Instead, you'd always want to write `hover:before:underline`, ensuring that these variants will appear at the end.\r\n   \r\n   For an exact list of which variants these affect, take a look [at this diff](https://github.com/tailwindlabs/tailwindcss/pull/13478/files#diff-7779a0eebf6b980dd3abd63b39729b3023cf9a31c91594f5a25ea020b066e1c0L228-L246). \r\n\r\n2. The `dark` variant and other media query variants are usually written before other variants. This is more of a recommendation to make it easier to read candidates rather than a difference in behavior as `@media` queries are hoisted by the engine. For this reason, both of these variants are _correct_ yet in real applications we prefer the first one: `lg:hover:underline`, `hover:lg:underline`. \r\n   \r\n   To avoid shuffling these rules across all candidates during the migration, we bucket `dark` and other `@media` variants into a special bucket that will not have their order changed (since people wrote stacks like `sm:max-lg:` before and we want to keep them as-is) and appear before all other variants.\r\n\r\n3. For some variant stacks, the order does not matter. E.g.: `focus:hover:underline` and `hover:focus:underline` will be the same. We don't want to needlessly shuffle their order if we have to. \r\n\r\nWith these considerations, the migration now works as follows:\r\n\r\n- If there is less then two variants, we do not need to migrate the candidate\r\n- If _every_ variant in the stack is an order-independent variant, we do not need to migrate the candidate\r\n  - _Note that this is currently hardcoded to only support `&:hover` and `&:focus`._\r\n- Otherwise, we loop over the candidates and put them into three buckets:\r\n  - `mediaVariants` hold variants that only contribute `@media` rules _and_ the `dark` variant.\r\n  - `pseudoElementVariants` hold variants that _must appear at the end of the selector_. This is based on the allow list from v3/early v4.\r\n  - `regularVariants` contains the rest.\r\n- We now compute if any of the variants inside `regularVariants` is order dependent.\r\n-  With this list of variants, we now construct the new order of variants as:\r\n   \r\n   ```ts\r\n   [\r\n     ...mediaVariants,\r\n     ...(anyRegularVariantOrderDependent ? regularVariants.reverse() : regularVariants),\r\n     ...pseudoElementVariants,\r\n   ]\r\n   ```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14524","RelatedDescription":"Open PR \"Template migrations: Add variant order codemods\" (#14524)"},{"Id":"2549821464","IsPullRequest":false,"CreatedAt":"2024-09-26T10:32:47","Actor":"bep","Number":"14521","RawContent":null,"Title":"cli: Reading from stdin is broken in 4.0.0-alpha.25","State":"closed","Body":"\r\n```\r\nmkdir tailwindtest\r\ncd tailwindtest\r\nnpm i @tailwindcss/cli@4.0.0-alpha.25 tailwindcss@4.0.0-alpha.25 --save-dev\r\necho \"@import 'tailwindcss';\" > foo.css\r\n\r\n```\r\nThis works:\r\n\r\n```\r\nnpx tailwindcss  -i foo.css -o bar.css\r\n```\r\n\r\nThis fails:\r\n\r\n```\r\nnpx tailwindcss  --input=- -o bar.css < foo.css\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n~/d/tailwindbug ❯❯❯ npx tailwindcss  --input=- -o bar.css < foo.css                                                                             main ✱ ◼\r\n/Users/bep/dump/tailwindbug/node_modules/enhanced-resolve/lib/Resolver.js:564\r\n\t\t\tconst error = new Error(\"Can't \" + message);\r\n\t\t\t             ^\r\n\r\nError: Can't resolve 'tailwindcss' in '/Users/bep/dump'\r\n    at finishWithoutResolve (/Users/bep/dump/tailwindbug/node_modules/enhanced-resolve/lib/Resolver.js:564:18)\r\n    at /Users/bep/dump/tailwindbug/node_modules/enhanced-resolve/lib/Resolver.js:656:15\r\n    at /Users/bep/dump/tailwindbug/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n    at eval (eval at create (/Users/bep/dump/tailwindbug/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:15:1)\r\n    at /Users/bep/dump/tailwindbug/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n    at eval (eval at create (/Users/bep/dump/tailwindbug/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:16:1)\r\n    at /Users/bep/dump/tailwindbug/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n    at eval (eval at create (/Users/bep/dump/tailwindbug/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:15:1)\r\n    at /Users/bep/dump/tailwindbug/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n    at eval (eval at create (/Users/bep/dump/tailwindbug/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:15:1) {\r\n  details: \"resolve 'tailwindcss' in '/Users/bep/dump'\\n\" +\r\n    '  Parsed request is a module\\n' +\r\n    '  No description file found in /Users/bep/dump or above\\n' +\r\n    '  resolve as module\\n' +\r\n    \"    /Users/bep/dump/node_modules doesn't exist or is not a directory\\n\" +\r\n    \"    /Users/bep/node_modules doesn't exist or is not a directory\\n\" +\r\n    \"    /Users/node_modules doesn't exist or is not a directory\\n\" +\r\n    \"    /node_modules doesn't exist or is not a directory\"\r\n```\r\n\r\nDowngrading to alpha 24 and it works:\r\n\r\n```\r\nnpm i @tailwindcss/cli@4.0.0-alpha.24 tailwindcss@4.0.0-alpha.24 --save-dev\r\nnpx tailwindcss  --input=- -o bar.css < foo.css\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14521","RelatedDescription":"Closed issue \"cli: Reading from stdin is broken in 4.0.0-alpha.25\" (#14521)"},{"Id":"2550018447","IsPullRequest":true,"CreatedAt":"2024-09-26T10:32:46","Actor":"philipp-spiess","Number":"14522","RawContent":null,"Title":"CLI: Use the right `base` when loading files from `stdin`","State":"closed","Body":"Fixes #14521\r\n\r\nWhen using the CLI to read files from `stdin` like this:\r\n\r\n```bash\r\nnpx tailwindcss  --input=- -o bar.css < foo.css\r\n```\r\n\r\nWe need to set the `base` path to be the current working directory (`process.cwd()`). However, `cwd()` already _is_ a directory and calling `dirname()` on it did go to the parent directory _which might not have the `tailwindcss` dependency installed.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14522","RelatedDescription":"Closed or merged PR \"CLI: Use the right `base` when loading files from `stdin`\" (#14522)"},{"Id":"2548259465","IsPullRequest":true,"CreatedAt":"2024-09-25T16:39:01","Actor":"RobinMalfait","Number":"14518","RawContent":null,"Title":"CSS codemod: ensure we don't lose selectors","State":"closed","Body":"This PR fixes an issue where a CSS rule with a selector that contains multiple selectors lost everything but the last selector.\n\nWhile testing the `npx @tailwindcss/upgrade` codemods on real world projects, I noticed that we lost one of the selectors in the `docker/docs` repository. \n\n```diff\ndiff --git a/assets/css/toc.css b/assets/css/toc.css\nindex 91ff92d7cd..3b2432e913 100644\n--- a/assets/css/toc.css\n+++ b/assets/css/toc.css\n@@ -2,7 +2,7 @@\n   #TableOfContents {\n     .toc a {\n       @apply block max-w-full truncate py-1 pl-2 hover:font-medium hover:no-underline;\n-      &[aria-current=\"true\"],\n+      \n       &:hover {\n         @apply border-l-2 border-l-gray-light bg-gradient-to-r from-gray-light-100 font-medium text-black dark:border-l-gray-dark dark:from-gray-dark-200 dark:text-white;\n       }\n```\n\nThis PR fixes the issue by not overriding the `node.selector` internally with the last selector we handled. Instead, we let the selector parser handle it entirely.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14518","RelatedDescription":"Closed or merged PR \"CSS codemod: ensure we don't lose selectors\" (#14518)"},{"Id":"2548301709","IsPullRequest":true,"CreatedAt":"2024-09-25T15:24:33","Actor":"thecrypticace","Number":"14519","RawContent":null,"Title":"CSS codemod: Add `prefix(…)` to necessary CSS imports when a prefix is used.","State":"open","Body":"If your config file has the `prefix` option specified:\r\n\r\n```ts\r\n/* tailwind.config.js */\r\nexport default {\r\n  prefix: 'tw-',\r\n};\r\n```\r\n\r\nWe'll migrate it to the new `prefix` option in CSS:\r\n\r\n```css\r\n/* app.css */\r\n@import 'tailwindcss' prefix(tw);\r\n```\r\n\r\nNote: we error on invalid prefixes currently, so if you have a prefix that is not valid, you'll need to update it to a valid one before running the migration.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14519","RelatedDescription":"Open PR \"CSS codemod: Add `prefix(…)` to necessary CSS imports when a prefix is used.\" (#14519)"},{"Id":"2547823713","IsPullRequest":true,"CreatedAt":"2024-09-25T12:58:06","Actor":"RobinMalfait","Number":"14517","RawContent":null,"Title":"CSS codemod: do not wrap comment nodes in `@layer`","State":"closed","Body":"When CSS exists between two tailwind directives, then the CSS will be wrapped in an `@layer` to ensure it all ends up in the correct location in the final CSS file.\n\nHowever, if the only thing between two tailwind directives is a comment, then the comment will also be wrapped in an `@layer` directive.\n\nE.g.:\n```css\n@tailwind base;\n/* This is a comment */\n@tailwind components;\n/* This is another comment */\n@tailwind utilities;\n```\n\nResults in:\n```css\n@import \"tailwindcss\";\n@layer base {\n  /* This is a comment */\n}\n@layer components {\n  /* This is another comment */\n}\n```\n\nIn this case, the layers don't matter, so this can be simplified to:\n```css\n@import \"tailwindcss\";\n/* This is a comment */\n/* This is another comment */\n```\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14517","RelatedDescription":"Closed or merged PR \"CSS codemod: do not wrap comment nodes in `@layer`\" (#14517)"},{"Id":"2547752282","IsPullRequest":false,"CreatedAt":"2024-09-25T12:11:55","Actor":"tokmo","Number":"14515","RawContent":null,"Title":"Add extend screen disable min-[*px] class","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\nv3.4.13\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\nNext.js v14.2.11, postcss v8.4.47\r\n\r\n**What version of Node.js are you using?**\r\nv20.17\r\n\r\n**What browser are you using?**\r\nChrome\r\n\r\n**What operating system are you using?**\r\nMacOS\r\n\r\n**Describe your issue**\r\nWhen I add extended screens inside the Tailwind config, it disables the min-[*px] class in the HTML.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14515","RelatedDescription":"Closed issue \"Add extend screen disable min-[*px] class\" (#14515)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-10-01T03:30:26.4387581Z","RunDurationInMilliseconds":558}