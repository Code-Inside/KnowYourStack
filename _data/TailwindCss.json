{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"1376807975","IsPullRequest":false,"CreatedAt":"2022-09-21T17:49:36","Actor":"artur-demidov","Number":"9354","RawContent":null,"Title":"Half value class(f.e. p-0.5) automatically add same zero class(p-0)","State":"closed","Body":"Tailwindcss 3.1.8\r\nEngine: playground/vite + react\r\nDescribe: if you add a class for a half value, then the class of the zero value automatically goes into the bundle\r\n<img width=\"326\" alt=\"–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2022-09-17 –≤ 18 50 59\" src=\"https://user-images.githubusercontent.com/98117545/190865613-d96e0bd4-92ff-4207-a098-ec96b8a02890.png\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9354","RelatedDescription":"Closed issue \"Half value class(f.e. p-0.5) automatically add same zero class(p-0)\" (#9354)"},{"Id":"1381196610","IsPullRequest":true,"CreatedAt":"2022-09-21T16:30:05","Actor":"PositiveUser","Number":"9388","RawContent":null,"Title":"Update CHANGELOG.md","State":"closed","Body":"Typo fix\r\n\r\n<!--\r\n\r\nüëã Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9388","RelatedDescription":"Closed or merged PR \"Update CHANGELOG.md\" (#9388)"},{"Id":"1380801927","IsPullRequest":true,"CreatedAt":"2022-09-21T12:31:08","Actor":"RobinMalfait","Number":"9385","RawContent":null,"Title":"Ignore unset values (like `null` or `undefined`) when resolving the classList for intellisense","State":"closed","Body":"This PR fixes an issue that whenever you \"unset\" a value, that it still provides this information in\r\nthe intellisense plugin. This happens because the `getClassList` was not filtering out those falsey\r\nvalues.\r\n\r\n> **Note**: We are not removing all falsey values (like `0`) otherwise `p-0` won't be provided anymore.\r\n\r\nFixes: https://github.com/tailwindlabs/tailwindcss-intellisense/issues/609\r\n\r\n<!--\r\n\r\nüëã Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9385","RelatedDescription":"Closed or merged PR \"Ignore unset values (like `null` or `undefined`) when resolving the classList for intellisense\" (#9385)"},{"Id":"1380176547","IsPullRequest":false,"CreatedAt":"2022-09-21T09:37:55","Actor":"steven-tey","Number":"9381","RawContent":null,"Title":"leading-tight (line height) is disregarded at certain viewport sizes","State":"closed","Body":"I'm doing the following:\r\n\r\n```\r\n<h1 className=\"text-5xl sm:text-6xl leading-tight sm:leading-tight\">Some long title text</h1>\r\n```\r\n\r\nAnd for some reason the line height value is different for `sm` and non-`sm` viewports. \r\n\r\nA look into Chrome console shows that the line-height attribute is disregarded in the non-`sm` viewport üòÆ \r\n\r\n![CleanShot 2022-09-20 at 20 16 43](https://user-images.githubusercontent.com/28986134/191392744-3c3fa8ed-0078-4a3f-80bb-2f238eb35562.png)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9381","RelatedDescription":"Closed issue \"leading-tight (line height) is disregarded at certain viewport sizes\" (#9381)"},{"Id":"1380312007","IsPullRequest":false,"CreatedAt":"2022-09-21T09:31:33","Actor":"yassh","Number":"9382","RawContent":null,"Title":"rgba in linear-gradient does not work","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.1.6\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNext.js v12.2.0, PostCSS v8.4.14\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv18.4.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/w1bYAm92KB\r\n\r\n**Describe your issue**\r\n\r\n`rgba` in `linear-gradient` does not work.\r\n\r\n**Examples:**\r\n\r\nWorks:\r\n```html\r\n<div class=\"bg-[rgba(255,_0,_0,_0.5)]\">...</div>\r\n<div class=\"bg-[linear-gradient(90deg,_#FFFFFF,_#000000)]\">...</div>\r\n```\r\n\r\nDoes not work:\r\n```html\r\n<div class=\"bg-[linear-gradient(90deg,_rgba(255,_0,_0,_0.5),_#000000)]\">...</div>\r\n<div class=\"bg-[linear-gradient(90deg,_#FFFFFF,_rgba(255,_0,_0,_0.5))]\">...</div>\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9382","RelatedDescription":"Closed issue \"rgba in linear-gradient does not work\" (#9382)"},{"Id":"1380338681","IsPullRequest":false,"CreatedAt":"2022-09-21T09:29:27","Actor":"sandeep-gh","Number":"9383","RawContent":null,"Title":"background and text color for each option of select element doesn't work in firefox","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.0 (from <script src=\"https://cdn.tailwindcss.com\"></script>)\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNo build framework\r\n\r\n**What version of Node.js are you using?**\r\nN/A\r\n\r\n**What browser are you using?**\r\n\r\nChrome (version 104.0.5112.105) and Firefox version 91.13.0esr \r\n\r\n**What operating system are you using?**\r\n\r\nRaspian \r\n\r\n**Reproduction URL**\r\n\r\n https://codepen.io/sancodessometimes/pen/poVwMJO\r\n\r\n**Describe your issue**\r\nBackground color  for select html element for each option works in chrome but not in firefox-esr. ","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9383","RelatedDescription":"Closed issue \"background and text color for each option of select element doesn't work in firefox\" (#9383)"},{"Id":"1379608273","IsPullRequest":true,"CreatedAt":"2022-09-21T09:24:48","Actor":"depfu[bot]","Number":"9379","RawContent":null,"Title":"Update autoprefixer: 10.4.8 ‚Üí 10.4.11 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n#### ‚ú≥Ô∏è autoprefixer (10.4.8 ‚Üí 10.4.11) ¬∑ [Repo](https://github.com/postcss/autoprefixer) ¬∑ [Changelog](https://github.com/postcss/autoprefixer/blob/main/CHANGELOG.md)\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/postcss/autoprefixer/releases/tag/10.4.11\">10.4.11</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>Fixed <code class=\"notranslate\">text-decoration</code> prefixes by moving to MDN data (by <a href=\"https://bounce.depfu.com/github.com/romainmenke\">@romainmenke</a>).</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/postcss/autoprefixer/releases/tag/10.4.10\">10.4.10</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>Fixed <code class=\"notranslate\">unicode-bidi</code> prefixes by moving to MDN data.</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/postcss/autoprefixer/releases/tag/10.4.9\">10.4.9</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>Fixed <code class=\"notranslate\">css-unicode-bidi</code> issue from latest Can I Use.</li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/autoprefixer/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/postcss/autoprefixer/compare/65e2dae12cb64aab79efa73ddb204f3577f4e8f6...961fae7cfa77978c6691dfc25b0775a2b82f2e96\">See the full diff on Github</a>. The new version differs by 11 commits:</p>\n<ul>\n<li><a href=\"https://github.com/postcss/autoprefixer/commit/961fae7cfa77978c6691dfc25b0775a2b82f2e96\"><code>Release 10.4.11 version</code></a></li>\n<li><a href=\"https://github.com/postcss/autoprefixer/commit/2f815ea2519aad6271a94e84302e4e3022ad7bba\"><code>Clean up code</code></a></li>\n<li><a href=\"https://github.com/postcss/autoprefixer/commit/6d4f3db6dd73be857913d9b5fd16cd2e9035ba08\"><code>update data for text-decoration (#1478)</code></a></li>\n<li><a href=\"https://github.com/postcss/autoprefixer/commit/f47866174b1a40f51f6e8948ecdc1cdf7593e33e\"><code>Release 10.4.10 version</code></a></li>\n<li><a href=\"https://github.com/postcss/autoprefixer/commit/db484cc62dd39471136df0a974946d5faf3eab68\"><code>Move to MDN data for unicode-bidi</code></a></li>\n<li><a href=\"https://github.com/postcss/autoprefixer/commit/07c3cf10a297419d7747c9238a8dfa6c37e8e484\"><code>Release 10.4.9 version</code></a></li>\n<li><a href=\"https://github.com/postcss/autoprefixer/commit/acfe2ad0177c8961179e7e47a859d49d4b3f81f2\"><code>Fix unicode-bidi import</code></a></li>\n<li><a href=\"https://github.com/postcss/autoprefixer/commit/135d11feecd6cafbf2ea3a0de543eeccdf70a9d7\"><code>Update dependencies</code></a></li>\n<li><a href=\"https://github.com/postcss/autoprefixer/commit/244a99cfaf42716d72934ff781572ffb6dda01ab\"><code>Update dependencies</code></a></li>\n<li><a href=\"https://github.com/postcss/autoprefixer/commit/5124eae5f042afdeb368b5a8e8436fa721950f93\"><code>Clean up CI config</code></a></li>\n<li><a href=\"https://github.com/postcss/autoprefixer/commit/63e391872a594422151876649d271d075438a29d\"><code>Update test.yml (#1472)</code></a></li>\n</ul>\n</details>\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@‚Äãdepfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@‚Äãdepfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@‚Äãdepfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@‚Äãdepfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@‚Äãdepfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@‚Äãdepfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@‚Äãdepfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@‚Äãdepfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9379","RelatedDescription":"Closed or merged PR \"Update autoprefixer: 10.4.8 ‚Üí 10.4.11 (patch)\" (#9379)"},{"Id":"1379118654","IsPullRequest":true,"CreatedAt":"2022-09-20T09:39:34","Actor":"RobinMalfait","Number":"9376","RawContent":null,"Title":"Add `fallback` to plugins for when arbitrary values collide","State":"open","Body":"This will allow us to use the fallback plugin if there are 2 colliding plugins given a certain arbitrary value that's indistinguishable in either plugin.\r\n\r\nNormally we would then require a type cast, but now we can use the fallback. This is useful so that in the future adding more colliding plugins doesn't result in working code being broken because it requires a typehint all of a sudden.\r\n\r\nE.g.:\r\n```html\r\n<!-- Before -->\r\n<div class=\"bg-[200px_100px]\"></div><!-- Warning -->\r\n\r\n<!-- Fix: -->\r\n<div class=\"bg-[length:200px_100px]\"></div>\r\n<div class=\"bg-[position:200px_100px]\"></div>\r\n```\r\n\r\n```html\r\n<!-- After (no fix required) -->\r\n<div class=\"bg-[200px_100px]\"></div><!-- Generates styles for the background-size -->\r\n```\r\n\r\n<!--\r\n\r\nüëã Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9376","RelatedDescription":"Open PR \"Add `fallback` to plugins for when arbitrary values collide\" (#9376)"},{"Id":"1378779764","IsPullRequest":false,"CreatedAt":"2022-09-20T09:23:56","Actor":"fkworld","Number":"9372","RawContent":null,"Title":"When disabled preflight, border-solid will add 1.5px border-width, which is not expected.","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.1.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss 8.4.16\r\nautoprefixer 10.4.11\r\nvite 3.0.9\r\ntypescript 4.8.2\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv16.16.0\r\n\r\n**What browser are you using?**\r\n\r\nEdge 105.0.1343.42\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/PnrWKkWuNL\r\n\r\n**Describe your issue**\r\n\r\nWhen disabled preflight, border-solid will add 1.5px border-width, which is not expected.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9372","RelatedDescription":"Closed issue \"When disabled preflight, border-solid will add 1.5px border-width, which is not expected.\" (#9372)"},{"Id":"1378083668","IsPullRequest":true,"CreatedAt":"2022-09-19T19:24:21","Actor":"teddybradford","Number":"9367","RawContent":null,"Title":"Replace ring color template literal with string","State":"closed","Body":"Replaces the ring color template literal with a string.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9367","RelatedDescription":"Closed or merged PR \"Replace ring color template literal with string\" (#9367)"},{"Id":"1376750618","IsPullRequest":false,"CreatedAt":"2022-09-17T11:46:20","Actor":"lzt1008","Number":"9352","RawContent":null,"Title":"`bg-[10px_10%]` is missing background-size type checking ","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.1.8 or Insiders (4fddd2d)\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\ntailwind cli\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv16\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/tpx3OYFFsH\r\n\r\n**Describe your issue**\r\n\r\nAs the Reproduction URL,\r\n```html\r\n<div bg-[10px_10%]></div>\r\n<div bg-[10%_10%]></div>\r\n<div bg-[10px_10px]></div>\r\n```\r\ncan generate\r\n```css\r\n.bg-\\[10px_10\\%\\] {\r\n  background-position: 10px 10%;\r\n}\r\n```\r\nwhich does not make sense, because all these values are valid  (background-size and background-position) so it's ambiguous.\r\n\r\nI've created a PR to solve this problem. https://github.com/tailwindlabs/tailwindcss/pull/9349\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9352","RelatedDescription":"Open issue \"`bg-[10px_10%]` is missing background-size type checking \" (#9352)"},{"Id":"1376678246","IsPullRequest":false,"CreatedAt":"2022-09-17T10:57:41","Actor":"18121A05L2","Number":"9346","RawContent":null,"Title":"using  rounded-l and rounded-r to same element is not working","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v3.1.2\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n postcss-cli 8.4.14, Next.js 10.0.9 (latest ), webpack 5.28.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v16.0.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome, Safari\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nA Tailwind Play link or public GitHub repo that includes a minimal reproduction of the bug. **Please do not link to your actual project**, what we need instead is a _minimal_ reproduction in a fresh project without any unnecessary code. This means it doesn't matter if your real project is private/confidential, since we want a link to a separate, isolated reproduction anyways. Unfortunately we can't provide support without a reproduction, and your issue will be closed with no comment if this is not provided.\r\n\r\n**Describe your issue**\r\n\r\nHello team using both rounded-r-[10px] and rounded-l-full , is not working at the same time , can u please look into this\r\n![Screenshot (4388)](https://user-images.githubusercontent.com/59156926/190842915-da01fe6f-47c6-41d2-aba7-a4a6c266a3f7.png)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9346","RelatedDescription":"Closed issue \"using  rounded-l and rounded-r to same element is not working\" (#9346)"},{"Id":"1376738586","IsPullRequest":true,"CreatedAt":"2022-09-17T10:50:28","Actor":"lzt1008","Number":"9349","RawContent":null,"Title":"Improve type checking for formal syntax","State":"open","Body":"There are type validators in `dataType.js` referencing [CSS Types](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types), but splitting the basic data types([\\<length\\>](https://github.com/tailwindlabs/tailwindcss/blob/master/src/util/dataTypes.js#L62) and [\\<percentage\\>](https://github.com/tailwindlabs/tailwindcss/blob/master/src/util/dataTypes.js#L87) ) is not a good solution for further maintenance and development. We can just keep them as minimal validators for the css data type.\r\n\r\n\r\nIn my opinion, `familyName`  and `position` is something like [value definition syntax](https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax). And we should take them out as validators for formal syntax for better type checking, and `dataType.js` is only for basic css data types.\r\n\r\n\r\nThis PR created `validateFormalSyntax.js` and `size` type (or formal syntax) for better background-size checking based on [background-size MDN web docs](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size#formal_syntax).\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/b37a44a85d803ca353f299c1989c425874da9af5/src/util/validateFormalSyntax.js#L22\r\n and I think it's also a better solution for https://github.com/tailwindlabs/tailwindcss/issues/7997, which can also fix https://github.com/tailwindlabs/tailwindcss/issues/9352\r\n\r\nAlso, as [MDN web doc](https://developer.mozilla.org/en-US/docs/Web/CSS/calc) says, the `calc() min() max() clamp()` function can all be used anywhere a [\\<length\\>](https://developer.mozilla.org/en-US/docs/Web/CSS/length), [\\<frequency\\>](https://developer.mozilla.org/en-US/docs/Web/CSS/frequency), [\\<angle\\>](https://developer.mozilla.org/en-US/docs/Web/CSS/angle), [\\<time\\>](https://developer.mozilla.org/en-US/docs/Web/CSS/time), [\\<percentage\\>](https://developer.mozilla.org/en-US/docs/Web/CSS/percentage), [\\<number\\>](https://developer.mozilla.org/en-US/docs/Web/CSS/number), or [\\<integer\\>](https://developer.mozilla.org/en-US/docs/Web/CSS/integer) is allowed. So we can basically just check the value is wrapped by css functions in `number`, `length`, and `percentage` https://github.com/tailwindlabs/tailwindcss/blob/b37a44a85d803ca353f299c1989c425874da9af5/src/util/dataTypes.js#L9\r\n\r\nSo we can now create some crazy stuff like\r\n```css\r\n/* bg-[rgb(11,22,33)] */\r\n.bg-\\[rgb\\(11\\2c 22\\2c 33\\)\\] {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(11 22 33 / var(--tw-bg-opacity))\r\n}\r\n\r\n/* bg-[linear-gradient(45deg,_red_0_50%,_blue_50%_100%)] */\r\n.bg-\\[linear-gradient\\(45deg\\2c _red_0_50\\%\\2c _blue_50\\%_100\\%\\)\\] {\r\n  background-image: linear-gradient(45deg, red 0 50%, blue 50% 100%)\r\n}\r\n\r\n/* bg-[auto_auto,cover,_contain,calc(10px_+_12%),max(20px,_10%)_10%] */\r\n.bg-\\[auto_auto\\2c cover\\2c _contain\\2c calc\\(10px_\\+_12\\%\\)\\2c max\\(20px\\2c _10\\%\\)_10\\%\\] {\r\n  background-size: auto auto,cover, contain,calc(10px + 12%),max(20px, 10%) 10%\r\n}\r\n```\r\ndiscussions: https://github.com/tailwindlabs/tailwindcss/discussions/9351","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9349","RelatedDescription":"Open PR \"Improve type checking for formal syntax\" (#9349)"},{"Id":"1369955933","IsPullRequest":true,"CreatedAt":"2022-09-16T13:37:36","Actor":"RobinMalfait","Number":"9313","RawContent":null,"Title":"Polish `matchVariant` API","State":"closed","Body":"This PR will polish the currently unreleased `matchVariant` API. This API will allow you to create\r\ndynamic variants. E.g.: `supports-[display:grid]:grid`.\r\n\r\nThe API looks very similar to the `addVariant` API, but with a callback instead.\r\n\r\nAn example for demonstrating the API:\r\n```js\r\nmatchVariant('supports', ({ value }) => `@supports(${value})`, {\r\n  values: {\r\n    grid: 'display: grid', // Allows us to use just `supports-grid`\r\n  },\r\n})\r\n```\r\n\r\nInput:\r\n```html\r\n<div class=\"supports-grid:grid supports-[color:red]:text-red-500\"></div> \r\n```\r\n\r\nOutput:\r\n```css\r\n@supports (display: grid) {\r\n  .supports-grid\\:grid {\r\n    display: grid;\r\n  }\r\n}\r\n\r\n@supports (color: red) {\r\n  .supports-\\[color\\:red\\]\\:text-red-500 {\r\n    --tw-text-opacity: 1;\r\n    color: rgb(239 68 68 / var(--tw-text-opacity));\r\n  }\r\n}\r\n```\r\n\r\n> **Note**: the API is still subject to change, this is currently a placeholder.\r\n\r\n<!--\r\n\r\nüëã Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9313","RelatedDescription":"Closed or merged PR \"Polish `matchVariant` API\" (#9313)"},{"Id":"1375748903","IsPullRequest":true,"CreatedAt":"2022-09-16T10:29:03","Actor":"depfu[bot]","Number":"9341","RawContent":null,"Title":"Update fast-glob: 3.2.11 ‚Üí 3.2.12 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n#### ‚ú≥Ô∏è fast-glob (3.2.11 ‚Üí 3.2.12) ¬∑ [Repo](https://github.com/mrmlnc/fast-glob)\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/mrmlnc/fast-glob/releases/tag/3.2.12\">3.2.12</a></h4>\n\n<blockquote><blockquote>\n<p dir=\"auto\"><strong>Full Changelog</strong>: <a href=\"https://bounce.depfu.com/github.com/mrmlnc/fast-glob/compare/3.2.11...3.2.12\"><tt>3.2.11...3.2.12</tt></a></p>\n</blockquote>\n<h2 dir=\"auto\">\n<g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png\">üêõ</g-emoji> Bug fixes</h2>\n<p dir=\"auto\">Fixed an issue introduced in <code class=\"notranslate\">3.2.7</code> related to incorrect application of patterns to entries with a trailing slash when the entry is not a directory.</p>\n<p dir=\"auto\">Before changes:</p>\n<div class=\"highlight highlight-source-js\" dir=\"auto\"><pre><span class=\"pl-s1\">fg</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sync</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'**/!(*.md)'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// ['file.md', 'a/file.md', 'a/file.txt']</span></pre></div>\n<p dir=\"auto\">After fix:</p>\n<div class=\"highlight highlight-source-js\" dir=\"auto\"><pre><span class=\"pl-s1\">fg</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sync</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'**/!(*.md)'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// ['a/file.txt']</span></pre></div>\n<p dir=\"auto\">Thanks <a href=\"https://bounce.depfu.com/github.com/AgentEnder\">@AgentEnder</a> for the issue (<a href=\"https://bounce.depfu.com/github.com/mrmlnc/fast-glob/issues/357\">#357</a>).</p>\n<h2 dir=\"auto\">\n<g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f680.png\">üöÄ</g-emoji> Improvements</h2>\n<p dir=\"auto\">This release includes performance improvements for <a href=\"https://bounce.depfu.com/github.com/mrmlnc/fast-glob#asynchronous\">the asynchronous method</a>. For this method we now use an <a href=\"https://bounce.depfu.com/github.com/nodelib/nodelib/tree/master/packages/fs/fs.walk#walkpath-optionsorsettings-callback\">asynchronous directory traversal interface</a> instead of using a <a href=\"https://bounce.depfu.com/github.com/nodelib/nodelib/tree/master/packages/fs/fs.walk#walkstreampath-optionsorsettings\">streaming interface</a>. This gives up to 15% acceleration for medium and large directories. The result depends a lot on hardware.</p>\n<p dir=\"auto\">You can find the benchmark results for this release in CI <a href=\"https://bounce.depfu.com/github.com/mrmlnc/fast-glob/actions/runs/3020192816\">here</a>.</p>\n<p dir=\"auto\">Here are a few of measurements on my laptop:</p>\n<div class=\"highlight highlight-source-js\" dir=\"auto\"><pre><span class=\"pl-c1\">=</span><span class=\"pl-c1\">==</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-v\">Benchmark</span> <span class=\"pl-s1\">pattern</span> <span class=\"pl-s\">\"*\"</span> <span class=\"pl-s1\">with</span> <span class=\"pl-c1\">100</span> <span class=\"pl-en\">launches</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">regression</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">async</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c1\">===</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-v\">Max</span><span class=\"pl-kos\"></span> stdev: <span class=\"pl-c1\">7</span> <span class=\"pl-c1\">|</span> <span class=\"pl-v\">Retries</span>: <span class=\"pl-c1\">3</span> <span class=\"pl-c1\">|</span> <span class=\"pl-v\">Options</span>: <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">Name</span>                   <span class=\"pl-v\">Time</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">ms</span>  <span class=\"pl-v\">Time</span> <span class=\"pl-s1\">stdev</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">%</span>  <span class=\"pl-v\">Memory</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">MB</span>  <span class=\"pl-v\">Memory</span> <span class=\"pl-s1\">stdev</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">%</span>  <span class=\"pl-v\">Entries</span>  <span class=\"pl-v\">Errors</span>  <span class=\"pl-v\">Retries</span>\n<span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">-</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">-</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">-</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">-</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">-</span>\n<span class=\"pl-s1\">fast</span><span class=\"pl-c1\">-</span><span class=\"pl-s1\">glob</span><span class=\"pl-c1\">-</span><span class=\"pl-s1\">current</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">js</span>   <span class=\"pl-c1\">4.390</span>     <span class=\"pl-c1\">0.252</span>          <span class=\"pl-c1\">6.253</span>       <span class=\"pl-c1\">0.015</span>            <span class=\"pl-c1\">4</span>        <span class=\"pl-c1\">0</span>       <span class=\"pl-c1\">1</span>\n<span class=\"pl-s1\">fast</span><span class=\"pl-c1\">-</span><span class=\"pl-s1\">glob</span><span class=\"pl-c1\">-</span><span class=\"pl-s1\">previous</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">js</span>  <span class=\"pl-c1\">5.653</span>     <span class=\"pl-c1\">0.633</span>          <span class=\"pl-c1\">6.051</span>       <span class=\"pl-c1\">0.056</span>            <span class=\"pl-c1\">4</span>        <span class=\"pl-c1\">0</span>       <span class=\"pl-c1\">1</span>\n\n<span class=\"pl-c1\">===</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-v\">Benchmark</span> <span class=\"pl-s1\">pattern</span> <span class=\"pl-s\">\"**\"</span> <span class=\"pl-s1\">with</span> <span class=\"pl-c1\">100</span> <span class=\"pl-en\">launches</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">regression</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">async</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c1\">===</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-v\">Max</span><span class=\"pl-kos\"></span> stdev: <span class=\"pl-c1\">7</span> <span class=\"pl-c1\">|</span> <span class=\"pl-v\">Retries</span>: <span class=\"pl-c1\">3</span> <span class=\"pl-c1\">|</span> <span class=\"pl-v\">Options</span>: <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">Name</span>                   <span class=\"pl-v\">Time</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">ms</span>  <span class=\"pl-v\">Time</span> <span class=\"pl-s1\">stdev</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">%</span>  <span class=\"pl-v\">Memory</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">MB</span>  <span class=\"pl-v\">Memory</span> <span class=\"pl-s1\">stdev</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">%</span>  <span class=\"pl-v\">Entries</span>  <span class=\"pl-v\">Errors</span>  <span class=\"pl-v\">Retries</span>\n<span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">-</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">-</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">-</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">-</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span>  <span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">--</span><span class=\"pl-c1\">-</span>\n<span class=\"pl-s1\">fast</span><span class=\"pl-c1\">-</span><span class=\"pl-s1\">glob</span><span class=\"pl-c1\">-</span><span class=\"pl-s1\">current</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">js</span>   <span class=\"pl-c1\">34.587</span>    <span class=\"pl-c1\">1.287</span>          <span class=\"pl-c1\">10.654</span>      <span class=\"pl-c1\">0.607</span>            <span class=\"pl-c1\">11835</span>    <span class=\"pl-c1\">0</span>       <span class=\"pl-c1\">1</span>\n<span class=\"pl-s1\">fast</span><span class=\"pl-c1\">-</span><span class=\"pl-s1\">glob</span><span class=\"pl-c1\">-</span><span class=\"pl-s1\">previous</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">js</span>  <span class=\"pl-c1\">41.972</span>    <span class=\"pl-c1\">2.086</span>          <span class=\"pl-c1\">10.236</span>      <span class=\"pl-c1\">1.224</span>            <span class=\"pl-c1\">11835</span>    <span class=\"pl-c1\">0</span>       <span class=\"pl-c1\">1</span></pre></div></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/fast-glob/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/mrmlnc/fast-glob/compare/1f82afb8361757eabbc72f869f1066bea2771128...a028e3670ba3186a102cb9108e3a6e48c1148a9e\">See the full diff on Github</a>. The new version differs by 9 commits:</p>\n<ul>\n<li><a href=\"https://github.com/mrmlnc/fast-glob/commit/a028e3670ba3186a102cb9108e3a6e48c1148a9e\"><code>3.2.12</code></a></li>\n<li><a href=\"https://github.com/mrmlnc/fast-glob/commit/79260ad1d322162e71c63dd7eabfcb35b3ad0b9b\"><code>Merge pull request #366 from AgentEnder/test/broken-segments</code></a></li>\n<li><a href=\"https://github.com/mrmlnc/fast-glob/commit/72a0ec28f57142274b9d46ce28e4132f8eeaa2ef\"><code>test(regular): add failing test for segment matching</code></a></li>\n<li><a href=\"https://github.com/mrmlnc/fast-glob/commit/2ff5a2f370b9362c0fe239573530f1f804fe4a57\"><code>Merge pull request #361 from mrmlnc/use_async_method_instead_of_stream</code></a></li>\n<li><a href=\"https://github.com/mrmlnc/fast-glob/commit/7268b506e8c169094ce1f26017087ab26c5c6164\"><code>perf: use fs.walk instead of fs.walkStream for async provider</code></a></li>\n<li><a href=\"https://github.com/mrmlnc/fast-glob/commit/3c243c26794a5683a395e8ce22ff5f9728da9c01\"><code>Merge pull request #360 from mrmlnc/ISSUE-357_fix_group_patterns_ignore</code></a></li>\n<li><a href=\"https://github.com/mrmlnc/fast-glob/commit/a1550b1e73a6d90085fb154c6dd49e2c24a0685f\"><code>fix: do not try to apply patterns to the path with the trailing slash for non-directory entry</code></a></li>\n<li><a href=\"https://github.com/mrmlnc/fast-glob/commit/f58b8d535ab2cf99fb4ac171ad65be3c535fd66a\"><code>Merge pull request #358 from AgentEnder/test/negative-groups</code></a></li>\n<li><a href=\"https://github.com/mrmlnc/fast-glob/commit/ee1256bc8a484b0b0949e96ac528a0f12002e5ea\"><code>test: add spec for negative groups</code></a></li>\n</ul>\n</details>\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@‚Äãdepfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@‚Äãdepfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@‚Äãdepfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@‚Äãdepfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@‚Äãdepfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@‚Äãdepfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@‚Äãdepfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@‚Äãdepfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9341","RelatedDescription":"Closed or merged PR \"Update fast-glob: 3.2.11 ‚Üí 3.2.12 (patch)\" (#9341)"},{"Id":"1373676252","IsPullRequest":false,"CreatedAt":"2022-09-14T23:28:42","Actor":"NickWoodward","Number":"9332","RawContent":null,"Title":"Gradient class not working with webpack?","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n**3.1.8**\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\"postcss\": \"^8.4.16\",\r\n\"postcss-loader\": \"^7.0.1\",\r\n\"webpack\": \"^5.74.0\"\r\n\r\n**What version of Node.js are you using?**\r\nnode: v16.14.0\r\n\r\n**What browser are you using?**\r\nChrome, Version 104.0.5112.101, but also happens in FF\r\n\r\n**What operating system are you using?**\r\nWin 10\r\n\r\n**Reproduction URL**\r\n\r\n// Minimal repo with webpack where the gradient class doesn't seem to work (but other classes do)\r\nhttps://github.com/NickWoodward/gradient-example\r\n\r\n// Minimal repo without webpack where the gradient class does work\r\nhttps://github.com/NickWoodward/tailwind-starter\r\n\r\n**Describe your issue**\r\n\r\nAdding a gradient class (`bg-gradient-to-r from-cyan-500 to-blue-500` for example) doesn't seem to work as described in the docs when using webpack. I'm guessing it's something to do with the webpack and its loaders, because i don't seem to have a problem using just tailwind. Maybe I've misunderstood the docs, but I've not had any suggestions on a fix on SO either, other than older versions not supporting certain colors. However my version is up to date, and I've tried more obvious colors too.\r\n\r\nAppreciate you guys are a small team, but would love being pointed in the right direction! \r\n\r\nThanks,\r\n\r\nNick","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9332","RelatedDescription":"Closed issue \"Gradient class not working with webpack?\" (#9332)"},{"Id":"1373469769","IsPullRequest":true,"CreatedAt":"2022-09-14T20:06:34","Actor":"thecrypticace","Number":"9331","RawContent":null,"Title":"Revert \"Only listen for stdin close on TTYs (#8523)\"","State":"closed","Body":"This reverts commit 14f6574318b66f7df4d8767c2c70ecb73c4ee26d.\r\n\r\nThis was originally done to fix issues with Turborepo but it had some unforeseen side effects that would leave dangling processes. For things that use Erlang (for example Phoenix) this is a problem because Erlang does not have the necessary APIs to send signals to processes ‚Äî instead relying only on stdin closing behavior or wrapper scripts to work around this.\r\n\r\nAs a bonus it seems that Turborepo has updated their official tailwind example to use `concurrently` which sidesteps this problem entirely because it acts as the wrapper in this case and handles stdin for child processes appropriately.\r\n\r\nFixes #9264","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9331","RelatedDescription":"Closed or merged PR \"Revert \"Only listen for stdin close on TTYs (#8523)\"\" (#9331)"},{"Id":"1370580146","IsPullRequest":false,"CreatedAt":"2022-09-14T19:29:58","Actor":"yaronuliel","Number":"9316","RawContent":null,"Title":"Exception thrown when a plugin defined with `plugin.withOptions` is being used without options","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\nv3.1.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\nvite 3.1.0, postcss 8.4.16\r\n\r\n**What version of Node.js are you using?**\r\nv18.7.0\r\n\r\n**What browser are you using?**\r\nNot Relevant\r\n\r\n**What operating system are you using?**\r\nmacOS 12.5 \r\n\r\n**Reproduction URL**\r\nhttps://play.tailwindcss.com/RJUiGy8hnJ\r\n\r\n**Describe your issue**\r\nAccording to the [documentation](https://play.tailwindcss.com/RJUiGy8hnJ), plugins defined with `plugin.withOptions` should work as callable function with `options` object, or by just passing them to the `plugins` array without invoking the function\r\n\r\nFor example, these 2 snippets should do the same thing:\r\n```js\r\nconst customPlugin1 = plugin.withOptions(...)\r\n\r\nmodule.exports = {\r\n   ...,\r\n   plugins: [customPlugin1]\r\n}\r\n```\r\n\r\n```js\r\nconst customPlugin2 = plugin.withOptions(...)\r\n\r\nmodule.exports = {\r\n   ...,\r\n   plugins: [customPlugin2({})]\r\n}\r\n```\r\n\r\nInstead, the first snippet, passes `undefined` instead of `{}` for the `options` argument - causing direct access to properties on the `options` argument (as depicted in the docs) to throw the following exception:\r\n\r\n```\r\nCannot read properties of undefined (reading '[WHATEVER]')\r\n```\r\n\r\nI'd either expect the docs to be corrected [here](https://github.com/tailwindlabs/tailwindcss.com/blob/master/src/pages/docs/plugins.mdx?plain=1#L539) and [here](https://github.com/tailwindlabs/tailwindcss.com/blob/master/src/pages/docs/plugins.mdx?plain=1#L573), or preferably - the library to send `{}` as the `options` argument if the plugin is registered without invoking it ","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9316","RelatedDescription":"Closed issue \"Exception thrown when a plugin defined with `plugin.withOptions` is being used without options\" (#9316)"},{"Id":"1371631780","IsPullRequest":false,"CreatedAt":"2022-09-14T17:27:03","Actor":"Odas0R","Number":"9318","RawContent":null,"Title":"Tailwind compiler crashes when you try to `[--box-shadow:theme('boxShadow.doesNotExist')]`","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.1.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite 3.0.9, postcss 8.4.14 postcss-cli 8.3.1\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv16.0.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nPopOS, Ubuntu\r\n\r\n**Reproduction URL**\r\n\r\nhttps://stackblitz.com/edit/vitejs-vite-zy2efk?file=src/App.jsx\r\n\r\n**Describe your issue**\r\n\r\nI was thinkering with tailwind to find ways of modifying css variables with classes. Came up with something like\r\n\r\n```javascript\r\n  <button className=\"[--box-shadow:theme('boxShadow.sm')] bg-white p-5\">\r\n    Button\r\n  </button>\r\n```\r\n\r\nBut if I change the `theme` to something that will throw a runtime error:\r\n\r\n```javascript\r\n  <button className=\"[--box-shadow:theme('boxShadow.doesNotExist')] bg-white p-5\">\r\n    Button\r\n  </button>\r\n```\r\n\r\nStill crashes if I change it back to:\r\n\r\n```javascript\r\n  <button className=\"[--box-shadow:theme('boxShadow.sm')] bg-white p-5\">\r\n    Button\r\n  </button>\r\n```\r\n\r\nWell, maybe the Tailwind compiler crashes and can't recover?\r\n\r\nIt's a bug, I think!?\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9318","RelatedDescription":"Closed issue \"Tailwind compiler crashes when you try to `[--box-shadow:theme('boxShadow.doesNotExist')]`\" (#9318)"},{"Id":"1371824376","IsPullRequest":true,"CreatedAt":"2022-09-14T17:27:02","Actor":"thecrypticace","Number":"9319","RawContent":null,"Title":"Don't emit utilities containing invalid theme fn keys","State":"closed","Body":"Fixes #9318\r\n\r\nThis fix isn't ideal ‚Äî need to iterate on it some before merging. We shouldn't even generate the utility in the first place. The problem here is the utility and the evaluation of the `theme()` function are at two separate stages. This causes the utility to be stored in the map when it is otherwise technically invalid. As a perf optimization we don't clear out the utility list when \"watching\" ‚Äî it's effectively append-only causing this to throw as soon as you accidentally introduce a utility w/ a theme key that doesn't exist.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9319","RelatedDescription":"Closed or merged PR \"Don't emit utilities containing invalid theme fn keys\" (#9319)"},{"Id":"1373071123","IsPullRequest":false,"CreatedAt":"2022-09-14T15:33:50","Actor":"msftMazzone","Number":"9329","RawContent":null,"Title":"Ring does not work","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n`\"tailwindcss\": \"^3\",`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`\"postcss\": \"^8.4.5\",`\r\n\r\n**What version of Node.js are you using?**\r\n\r\n`v14.17.5`\r\n\r\n**What browser are you using?**\r\n\r\nChrome, Safari\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS Monterey\r\n\r\n**Describe your issue**\r\n\r\nThe `ring` utility does not work. I can copy/paste [the code directly from the documentation](https://tailwindcss.com/docs/ring-offset-width) and it does not look anything like it does in the docs. \r\nI create a plain HTML `<button>` and use the ring utils as below:\r\n`<button className={styles.notWorking}>Does not work</button>`\r\nWith the styles copied from the documentation:\r\n`@apply px-4 py-2 font-semibold text-sm bg-white text-slate-700 border border-slate-300 rounded-md shadow-sm ring-2 ring-offset-slate-50 ring-pink-500 ring-offset-4;`\r\n\r\nAnd the result is this: \r\n<img width=\"232\" alt=\"image\" src=\"https://user-images.githubusercontent.com/101905492/190179728-39426f6b-deac-4941-9ca7-a7cde20d60a2.png\">\r\n\r\nIf I add `ring-inset` it becomes visible, but looks nothing like [the example from the docs](https://tailwindcss.com/docs/ring-offset-width).\r\n<img width=\"224\" alt=\"image\" src=\"https://user-images.githubusercontent.com/101905492/190179879-48afa835-a010-46fc-8888-23e60954bc74.png\">","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9329","RelatedDescription":"Closed issue \"Ring does not work\" (#9329)"},{"Id":"1371938147","IsPullRequest":true,"CreatedAt":"2022-09-14T12:08:56","Actor":"RobinMalfait","Number":"9320","RawContent":null,"Title":"Improve data type analyses for arbitrary values","State":"closed","Body":"This PR fixes an issue with incorrect splitting of arbitrary values and therefore improving the data type detection so that we require fewer type hints.\n\nThe original RegEx did mostly what we want, the idea is that we wanted to split by a `,` but one that was not within `()`. This is useful when you define multiple background colors for example:\n```html\n<div class=\"bg-[rgb(0,0,0),rgb(255,255,255)]\"></div>\n```\n\nIn this case splitting by the regex would result in the proper result:\n```js\nlet result = [\n  'rgb(0,0,0)',\n  'rgb(255,255,255)'\n]\n```\n\nVisually, you can think of it like:\n```\n    ‚îå‚îÄ[./example.html]\n    ‚îÇ\n‚àô 1 ‚îÇ   <div class=\"bg-[rgb(0,0,0),rgb(255,255,255)]\"></div>\n    ¬∑                       ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ ‚î¨    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n    ¬∑                         ‚îÇ   ‚îÇ         ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Guarded by parens\n    ¬∑                         ‚îÇ   ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ We will split here\n    ¬∑                         ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Guarded by parens\n    ‚îÇ\n    ‚îî‚îÄ\n```\n\nWe properly split by `,` not inside a `()`. However, this RegEx fails the moment you have deeply nested `,` values or an `(` is seen at the right of the current position. If you have the following example:\n\n```html\n<div class=\"bg-[rgba(0,0,0,var(--alpha))]\"></div>\n```\n\nVisually, this is what's happening:\n```\n    ‚îå‚îÄ[./example.html]\n    ‚îÇ\n‚àô 1 ‚îÇ   <div class=\"bg-[rgba(0,0,0,var(--alpha))]\"></div>\n    ¬∑                         ‚î¨ ‚î¨ ‚î¨\n    ¬∑                         ‚ï∞‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚îÄ We accidentally split here\n    ‚îÇ\n    ‚îî‚îÄ\n```\n\nThis is because on the right of the `,`, the first paren is an opening paren `(` instead of a closing one `)`.\n\nI'm not 100% sure how we can improve the RegEx to handle that case as well, instead I wrote a small `splitBy` function that allows you to split the string by a character (just like you could do before) but ignores the ones inside the given exceptions. This keeps track of a stack to know whether we are within parens or not.\n\nVisually, the fix looks like this:\n```\n    ‚îå‚îÄ[./example.html]\n    ‚îÇ\n‚àô 1 ‚îÇ   <div class=\"bg-[rgba(0,0,0,var(--alpha)),rgb(255,255,255,var(--alpha))]\"></div>\n    ¬∑                         ‚î¨ ‚î¨ ‚î¨             ‚î¨       ‚î¨   ‚î¨   ‚î¨\n    ¬∑                         ‚îÇ ‚îÇ ‚îÇ             ‚îÇ       ‚ï∞‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ Guarded by parens\n    ¬∑                         ‚îÇ ‚îÇ ‚îÇ             ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ We will split here\n    ¬∑                         ‚ï∞‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Guarded by parens\n    ‚îÇ\n    ‚îî‚îÄ\n```\n\n<!--\n\nüëã Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9320","RelatedDescription":"Closed or merged PR \"Improve data type analyses for arbitrary values\" (#9320)"},{"Id":"1370640940","IsPullRequest":false,"CreatedAt":"2022-09-12T23:57:59","Actor":"uurcank","Number":"9317","RawContent":null,"Title":"line height classes do not work","State":"closed","Body":"### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/5977\r\n\r\nleading-loose and all other line-height classes do not work.  text-xl class contains \"line-height\" property and it overrides line-height classes. It is expected line-height classes to override the property in font-size classes\r\n\r\n\r\nFrom the discussion : \"They don't work if you use a breakpoint class like md:text-lg leading-loose, you then also have to use md:leading-loose\"","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9317","RelatedDescription":"Closed issue \"line height classes do not work\" (#9317)"},{"Id":"1368938560","IsPullRequest":true,"CreatedAt":"2022-09-12T21:01:27","Actor":"depfu[bot]","Number":"9306","RawContent":null,"Title":"Upgrade esbuild: 0.14.54 ‚Üí 0.15.7 (major)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this upgrade. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n#### ‚ú≥Ô∏è esbuild (0.14.54 ‚Üí 0.15.7) ¬∑ [Repo](https://github.com/evanw/esbuild) ¬∑ [Changelog](https://github.com/evanw/esbuild/blob/master/CHANGELOG.md)\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.15.7\">0.15.7</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Add <code class=\"notranslate\">--watch=forever</code> to allow esbuild to never terminate (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/1511\">#1511</a>, <a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/1885\">#1885</a>)</p>\n<p dir=\"auto\">Currently using esbuild's watch mode via <code class=\"notranslate\">--watch</code> from the CLI will stop watching if stdin is closed. The rationale is that stdin is automatically closed by the OS when the parent process exits, so stopping watch mode when stdin is closed ensures that esbuild's watch mode doesn't keep running forever after the parent process has been closed. For example, it would be bad if you wrote a shell script that did <code class=\"notranslate\">esbuild --watch &amp;</code> to run esbuild's watch mode in the background, and every time you run the script it creates a new <code class=\"notranslate\">esbuild</code> process that runs forever.</p>\n<p dir=\"auto\">However, there are cases when it makes sense for esbuild's watch mode to never exit. One such case is within a short-lived VM where the lifetime of all processes inside the VM is expected to be the lifetime of the VM. Previously you could easily do this by piping the output of a long-lived command into esbuild's stdin such as <code class=\"notranslate\">sleep 999999999 | esbuild --watch &amp;</code>. However, this possibility often doesn't occur to people, and it also doesn't work on Windows. People also sometimes attempt to keep esbuild open by piping an infinite stream of data to esbuild such as with <code class=\"notranslate\">esbuild --watch &lt;/dev/zero &amp;</code> which causes esbuild to spin at 100% CPU. So with this release, esbuild now has a <code class=\"notranslate\">--watch=forever</code> flag that will not stop watch mode when stdin is closed.</p>\n</li>\n<li>\n<p dir=\"auto\">Work around <code class=\"notranslate\">PATH</code> without <code class=\"notranslate\">node</code> in install script (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2519\">#2519</a>)</p>\n<p dir=\"auto\">Some people install esbuild's npm package in an environment without the <code class=\"notranslate\">node</code> command in their <code class=\"notranslate\">PATH</code>. This fails on Windows because esbuild's install script runs the <code class=\"notranslate\">esbuild</code> command before exiting as a sanity check, and on Windows the <code class=\"notranslate\">esbuild</code> command has to be a JavaScript file because of some internal details about how npm handles the <code class=\"notranslate\">bin</code> folder (specifically the <code class=\"notranslate\">esbuild</code> command lacks the <code class=\"notranslate\">.exe</code> extension, which is required on Windows). This release attempts to work around this problem by using <code class=\"notranslate\">process.execPath</code> instead of <code class=\"notranslate\">\"node\"</code> as the command for running node. In theory this means the installer can now still function on Windows if something is wrong with <code class=\"notranslate\">PATH</code>.</p>\n</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.15.6\">0.15.6</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Lower <code class=\"notranslate\">for await</code> loops (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/1930\">#1930</a>)</p>\n<p dir=\"auto\">This release lowers <code class=\"notranslate\">for await</code> loops to the equivalent <code class=\"notranslate\">for</code> loop containing <code class=\"notranslate\">await</code> when esbuild is configured such that <code class=\"notranslate\">for await</code> loops are unsupported. This transform still requires at least generator functions to be supported since esbuild's lowering of <code class=\"notranslate\">await</code> currently relies on generators. This new transformation is mostly modeled after what the TypeScript compiler does. Here's an example:</p>\n<div class=\"highlight highlight-source-js\" dir=\"auto\"><pre><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">for</span> <span class=\"pl-k\">await</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">x</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">y</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">x</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">The code above will now become the following code with <code class=\"notranslate\">--target=es2017</code> (omitting the code for the <code class=\"notranslate\">__forAwait</code> helper function):</p>\n<div class=\"highlight highlight-source-js\" dir=\"auto\"><pre><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">var</span> <span class=\"pl-s1\">iter</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">__forAwait</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">y</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">more</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">temp</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">error</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">more</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">!</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">temp</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">iter</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">done</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">more</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">let</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">temp</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-s1\">x</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">temp</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">error</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">temp</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span> <span class=\"pl-k\">finally</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">more</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">temp</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">iter</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">return</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">temp</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">iter</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">finally</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">error</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">throw</span> <span class=\"pl-s1\">error</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n</li>\n<li>\n<p dir=\"auto\">Automatically fix invalid <code class=\"notranslate\">supported</code> configurations (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2497\">#2497</a>)</p>\n<p dir=\"auto\">The <code class=\"notranslate\">--target=</code> setting lets you tell esbuild to target a specific version of one or more JavaScript runtimes such as <code class=\"notranslate\">chrome80,node14</code> and esbuild will restrict its output to only those features supported by all targeted JavaScript runtimes. More recently, esbuild introduced the <code class=\"notranslate\">--supported:</code> setting that lets you override which features are supported on a per-feature basis. However, this now lets you configure nonsensical things such as <code class=\"notranslate\">--supported:async-await=false --supported:async-generator=true</code>. Previously doing this could result in esbuild building successfully but producing invalid output.</p>\n<p dir=\"auto\">Starting with this release, esbuild will now attempt to automatically fix nonsensical feature override configurations by introducing more overrides until the configuration makes sense. So now the configuration from previous example will be changed such that <code class=\"notranslate\">async-await=false</code> implies <code class=\"notranslate\">async-generator=false</code>. The full list of implications that were introduced is below:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">async-await=false</code> implies:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">async-generator=false</code></li>\n<li><code class=\"notranslate\">for-await=false</code></li>\n<li><code class=\"notranslate\">top-level-await=false</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">generator=false</code> implies:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">async-generator=false</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">object-accessors=false</code> implies:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">class-private-accessor=false</code></li>\n<li><code class=\"notranslate\">class-private-static-accessor=false</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">class-field=false</code> implies:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">class-private-field=false</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">class-static-field=false</code> implies:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">class-private-static-field=false</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">class=false</code> implies:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">class-field=false</code></li>\n<li><code class=\"notranslate\">class-private-accessor=false</code></li>\n<li><code class=\"notranslate\">class-private-brand-check=false</code></li>\n<li><code class=\"notranslate\">class-private-field=false</code></li>\n<li><code class=\"notranslate\">class-private-method=false</code></li>\n<li><code class=\"notranslate\">class-private-static-accessor=false</code></li>\n<li><code class=\"notranslate\">class-private-static-field=false</code></li>\n<li><code class=\"notranslate\">class-private-static-method=false</code></li>\n<li><code class=\"notranslate\">class-static-blocks=false</code></li>\n<li><code class=\"notranslate\">class-static-field=false</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\">Implement a small minification improvement (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2496\">#2496</a>)</p>\n<p dir=\"auto\">Some people write code that contains a label with an immediate break such as <code class=\"notranslate\">x: break x</code>. Previously this code was not removed during minification but it will now be removed during minification starting with this release.</p>\n</li>\n<li>\n<p dir=\"auto\">Fix installing esbuild via Yarn with <code class=\"notranslate\">enableScripts: false</code> configured (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/pull/2457\">#2457</a>)</p>\n<p dir=\"auto\">If esbuild is installed with Yarn with the <code class=\"notranslate\">enableScripts: false</code> setting configured, then Yarn will not \"unplug\" the <code class=\"notranslate\">esbuild</code> package (i.e. it will keep the entire package inside a <code class=\"notranslate\">.zip</code> file). This messes with esbuild's library code that extracts the platform-specific binary executable because that code copies the binary executable into the esbuild package directory, and Yarn's <code class=\"notranslate\">.zip</code> file system shim doesn't let you write to a directory inside of a <code class=\"notranslate\">.zip</code> file. This release fixes this problem by writing to the <code class=\"notranslate\">node_modules/.cache/esbuild</code> directory instead in this case. So you should now be able to use esbuild with Yarn when <code class=\"notranslate\">enableScripts: false</code> is configured.</p>\n<p dir=\"auto\">This fix was contributed by <a href=\"https://bounce.depfu.com/github.com/jonaskuske\">@jonaskuske</a>.</p>\n</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.15.5\">0.15.5</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Fix issues with Yarn PnP and Yarn's workspaces feature (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2476\">#2476</a>)</p>\n<p dir=\"auto\">This release makes sure esbuild works with a Yarn feature called <a href=\"https://yarnpkg.com/features/workspaces/\">workspaces</a>. Previously esbuild wasn't tested in this scenario, but this scenario now has test coverage. Getting this to work involved further tweaks to esbuild's custom code for what happens after Yarn PnP's path resolution algorithm runs, which is not currently covered by Yarn's PnP specification. These tweaks also fix <code class=\"notranslate\">exports</code> map resolution with Yarn PnP for non-empty subpaths, which wasn't previously working.</p>\n</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.15.4\">0.15.4</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Consider TypeScript import assignments to be side-effect free (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2468\">#2468</a>)</p>\n<p dir=\"auto\">TypeScript has a <a href=\"https://www.typescriptlang.org/docs/handbook/namespaces.html#aliases\">legacy import syntax</a> for working with TypeScript namespaces that looks like this:</p>\n<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">someNamespace</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'./some-file'</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">bar</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">someNamespace</span><span class=\"pl-kos\">.</span><span class=\"pl-s1\">foo</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// some-file.ts</span>\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">namespace</span> <span class=\"pl-s1\">someNamespace</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">export</span> <span class=\"pl-k\">let</span> <span class=\"pl-s1\">foo</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">123</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Since esbuild converts TypeScript into JavaScript one file at a time, it doesn't know if <code class=\"notranslate\">bar</code> is supposed to be a value or a type (or both, which TypeScript actually allows in this case). This is problematic because values are supposed to be kept during the conversion but types are supposed to be removed during the conversion. Currently esbuild keeps <code class=\"notranslate\">bar</code> in the output, which is done because <code class=\"notranslate\">someNamespace.foo</code> is a property access and property accesses run code that could potentially have a side effect (although there is no side effect in this case).</p>\n<p dir=\"auto\">With this release, esbuild will now consider <code class=\"notranslate\">someNamespace.foo</code> to have no side effects. This means <code class=\"notranslate\">bar</code> will now be removed when bundling and when tree shaking is enabled. Note that it will still not be removed when tree shaking is disabled. This is because in this mode, esbuild supports adding additional code to the end of the generated output that's in the same scope as the module. That code could potentially make use of <code class=\"notranslate\">bar</code>, so it would be incorrect to remove it. If you want <code class=\"notranslate\">bar</code> to be removed, you'll have to enable tree shaking (which tells esbuild that nothing else depends on the unexported top-level symbols in the generated output).</p>\n</li>\n<li>\n<p dir=\"auto\">Change the order of the banner and the <code class=\"notranslate\">\"use strict\"</code> directive (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2467\">#2467</a>)</p>\n<p dir=\"auto\">Previously the top of the file contained the following things in order:</p>\n<ol dir=\"auto\">\n<li>The hashbang comment (see below) from the source code, if present</li>\n<li>The <code class=\"notranslate\">\"use strict\"</code> directive from the source code, if present</li>\n<li>The content of esbuild's <code class=\"notranslate\">banner</code> API option, if specified</li>\n</ol>\n<p dir=\"auto\">This was problematic for people that used the <code class=\"notranslate\">banner</code> API option to insert the hashbang comment instead of using esbuild's hashbang comment preservation feature. So with this release, the order has now been changed to:</p>\n<ol dir=\"auto\">\n<li>The hashbang comment (see below) from the source code, if present</li>\n<li>The content of esbuild's <code class=\"notranslate\">banner</code> API option, if specified</li>\n<li>The <code class=\"notranslate\">\"use strict\"</code> directive from the source code, if present</li>\n</ol>\n<p dir=\"auto\">I'm considering this change to be a bug fix instead of a breaking change because esbuild's documentation states that the <code class=\"notranslate\">banner</code> API option can be used to \"insert an arbitrary string at the beginning of generated JavaScript files\". While this isn't technically true because esbuild may still insert the original hashbang comment before the banner, it's at least more correct now because the banner will now come before the <code class=\"notranslate\">\"use strict\"</code> directive.</p>\n<p dir=\"auto\">For context: JavaScript files recently allowed using a <a href=\"https://bounce.depfu.com/github.com/tc39/proposal-hashbang\">hashbang comment</a>, which starts with <code class=\"notranslate\">#!</code> and which must start at the very first character of the file. It allows Unix systems to execute the file directly as a script without needing to prefix it by the <code class=\"notranslate\">node</code> command. This comment typically has the value <code class=\"notranslate\">#!/usr/bin/env node</code>. Hashbang comments will be a part of ES2023 when it's released next year.</p>\n</li>\n<li>\n<p dir=\"auto\">Fix <code class=\"notranslate\">exports</code> maps with Yarn PnP path resolution (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2473\">#2473</a>)</p>\n<p dir=\"auto\">The Yarn PnP specification says that to resolve a package path, you first resolve it to the absolute path of a directory, and then you run node's module resolution algorithm on it. Previously esbuild followed this part of the specification. However, doing this means that <code class=\"notranslate\">exports</code> in <code class=\"notranslate\">package.json</code> is not respected because node's module resolution algorithm doesn't interpret <code class=\"notranslate\">exports</code> for absolute paths. So with this release, esbuild will now use a modified algorithm that deviates from both specifications but that should hopefully behave more similar to what Yarn actually does: node's module resolution algorithm is run with the original import path but starting from the directory returned by Yarn PnP.</p>\n</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.15.3\">0.15.3</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Change the Yarn PnP manifest to a singleton (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2463\">#2463</a>)</p>\n<p dir=\"auto\">Previously esbuild searched for the Yarn PnP manifest in the parent directories of each file. But with Yarn's <code class=\"notranslate\">enableGlobalCache</code> setting it's possible to configure Yarn PnP's implementation to reach outside of the directory subtree containing the Yarn PnP manifest. This was causing esbuild to fail to bundle projects with the <code class=\"notranslate\">enableGlobalCache</code> setting enabled.</p>\n<p dir=\"auto\">To handle this case, <em>esbuild will now only search for the Yarn PnP manifest in the current working directory of the esbuild process</em>. If you're using esbuild's CLI, this means you will now have to <code class=\"notranslate\">cd</code> into the appropriate directory first. If you're using esbuild's API, you can override esbuild's value for the current working directory with the <code class=\"notranslate\">absWorkingDir</code> API option.</p>\n</li>\n<li>\n<p dir=\"auto\">Fix Yarn PnP resolution failures due to backslashes in paths on Windows (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2462\">#2462</a>)</p>\n<p dir=\"auto\">Previously dependencies of a Yarn PnP virtual dependency failed to resolve on Windows. This was because Windows uses <code class=\"notranslate\">\\</code> instead of <code class=\"notranslate\">/</code> as a path separator, and the path manipulation algorithms used for Yarn PnP expected <code class=\"notranslate\">/</code>. This release converts <code class=\"notranslate\">\\</code> into <code class=\"notranslate\">/</code> in Windows paths, which fixes this issue.</p>\n</li>\n<li>\n<p dir=\"auto\">Fix <code class=\"notranslate\">sideEffects</code> patterns containing slashes on Windows (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2465\">#2465</a>)</p>\n<p dir=\"auto\">The <code class=\"notranslate\">sideEffects</code> field in <code class=\"notranslate\">package.json</code> lets you specify an array of patterns to mark which files have side effects (which causes all other files to be considered to not have side effects by exclusion). That looks like this:</p>\n<div class=\"highlight highlight-source-json\"><pre><span class=\"pl-ent\">\"sideEffects\"</span>: [\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>**/index.js<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>**/index.prod.js<span class=\"pl-pds\">\"</span></span>\n]</pre></div>\n<p dir=\"auto\">However, the presence of the <code class=\"notranslate\">/</code> character in the pattern meant that the pattern failed to match Windows-style paths, which broke <code class=\"notranslate\">sideEffects</code> on Windows in this case. This release fixes this problem by adding additional code to handle Windows-style paths.</p>\n</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.15.2\">0.15.2</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Fix Yarn PnP issue with packages containing <code class=\"notranslate\">index.js</code> (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2455\">#2455</a>, <a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2461\">#2461</a>)</p>\n<p dir=\"auto\">Yarn PnP's tests require the resolved paths to end in <code class=\"notranslate\">/</code>. That's not how the rest of esbuild's internals work, however, and doing this messed up esbuild's node module path resolution regarding automatically-detected <code class=\"notranslate\">index.js</code> files. Previously packages that relied on implicit <code class=\"notranslate\">index.js</code> resolution rules didn't work with esbuild under Yarn PnP. Removing this slash has fixed esbuild's path resolution behavior regarding <code class=\"notranslate\">index.js</code>, which should now the same both with and without Yarn PnP.</p>\n</li>\n<li>\n<p dir=\"auto\">Fix Yarn PnP support for <code class=\"notranslate\">extends</code> in <code class=\"notranslate\">tsconfig.json</code> (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2456\">#2456</a>)</p>\n<p dir=\"auto\">Previously using <code class=\"notranslate\">extends</code> in <code class=\"notranslate\">tsconfig.json</code> with a path in a Yarn PnP package didn't work. This is because the process of setting up package path resolution rules requires parsing <code class=\"notranslate\">tsconfig.json</code> files (due to the <code class=\"notranslate\">baseUrl</code> and <code class=\"notranslate\">paths</code> features) and resolving <code class=\"notranslate\">extends</code> to a package path requires package path resolution rules to already be set up, which is a circular dependency. This cycle is broken by using special rules for <code class=\"notranslate\">extends</code> in <code class=\"notranslate\">tsconfig.json</code> that bypasses esbuild's normal package path resolution process. This is why using <code class=\"notranslate\">extends</code> with a Yarn PnP package didn't automatically work. With this release, these special rules have been modified to check for a Yarn PnP manifest so this case should work now.</p>\n</li>\n<li>\n<p dir=\"auto\">Fix Yarn PnP support in <code class=\"notranslate\">esbuild-wasm</code> (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2458\">#2458</a>)</p>\n<p dir=\"auto\">When running esbuild via WebAssembly, Yarn PnP support previously failed because Go's file system internals return <code class=\"notranslate\">EINVAL</code> when trying to read a <code class=\"notranslate\">.zip</code> file as a directory when run with WebAssembly. This was unexpected because Go's file system internals return <code class=\"notranslate\">ENOTDIR</code> for this case on native. This release updates esbuild to treat <code class=\"notranslate\">EINVAL</code> like <code class=\"notranslate\">ENOTDIR</code> in this case, which fixes using <code class=\"notranslate\">esbuild-wasm</code> to bundle a Yarn PnP project.</p>\n<p dir=\"auto\">Note that to be able to use <code class=\"notranslate\">esbuild-wasm</code> for Yarn PnP successfully, you currently have to run it using <code class=\"notranslate\">node</code> instead of <code class=\"notranslate\">yarn node</code>. This is because the file system shim that Yarn overwrites node's native file system API with currently generates invalid file descriptors with negative values when inside a <code class=\"notranslate\">.zip</code> file. This prevents esbuild from working correctly because Go's file system internals don't expect syscalls that succeed without an error to return an invalid file descriptor. Yarn is working on fixing their use of invalid file descriptors.</p>\n</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.15.1\">0.15.1</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Update esbuild's Yarn Plug'n'Play implementation to match the latest specification changes (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2452\">#2452</a>, <a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/pull/2453\">#2453</a>)</p>\n<p dir=\"auto\">This release updates esbuild's implementation of Yarn Plug'n'Play to match some changes to Yarn's specification that just landed. The changes are as follows:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Check for platform-specific absolute paths instead of always for the <code class=\"notranslate\">/</code> prefix</p>\n<p dir=\"auto\">The specification previously said that Yarn Plug'n'Play path resolution rules should not apply for paths that start with <code class=\"notranslate\">/</code>. The intent was to avoid accidentally processing absolute paths. However, absolute paths on Windows such as <code class=\"notranslate\">C:\\project</code> start with drive letters instead of with <code class=\"notranslate\">/</code>. So the specification was changed to instead explicitly avoid processing absolute paths.</p>\n</li>\n<li>\n<p dir=\"auto\">Make <code class=\"notranslate\">$$virtual</code> an alias for <code class=\"notranslate\">__virtual__</code></p>\n<p dir=\"auto\">Supporting Yarn-style path resolution requires implementing a custom Yarn-specific path traversal scheme where certain path segments are considered no-ops. Specifically any path containing segments of the form <code class=\"notranslate\">__virtual__/&lt;whatever&gt;/&lt;n&gt;</code> where <code class=\"notranslate\">&lt;n&gt;</code> is an integer must be treated as if they were <code class=\"notranslate\">n</code> times the <code class=\"notranslate\">..</code> operator instead (the <code class=\"notranslate\">&lt;whatever&gt;</code> path segment is ignored). So <code class=\"notranslate\">/path/to/project/__virtual__/xyz/2/foo.js</code> maps to the underlying file <code class=\"notranslate\">/path/to/project/../../foo.js</code>. This scheme makes it possible for Yarn to get node (and esbuild) to load the same file multiple times (which is sometimes required for correctness) without actually duplicating the file on the file system.</p>\n<p dir=\"auto\">However, old versions of Yarn used to use <code class=\"notranslate\">$$virtual</code> instead of <code class=\"notranslate\">__virtual__</code>. This was changed because <code class=\"notranslate\">$$virtual</code> was error-prone due to the use of the <code class=\"notranslate\">$</code> character, which can cause bugs when it's not correctly escaped within regular expressions. Now that esbuild makes <code class=\"notranslate\">$$virtual</code> an alias for <code class=\"notranslate\">__virtual__</code>, esbuild should now work with manifests from these old Yarn versions.</p>\n</li>\n<li>\n<p dir=\"auto\">Ignore PnP manifests in virtual directories</p>\n<p dir=\"auto\">The specification describes the algorithm for how to find the Plug'n'Play manifest when starting from a certain point in the file system: search through all parent directories in reverse order until the manifest is found. However, this interacts poorly with virtual paths since it can end up finding a virtual copy of the manifest instead of the original. To avoid this, esbuild now ignores manifests in virtual directories so that the search for the manifest will continue and find the original manifest in another parent directory later on.</p>\n</li>\n</ul>\n<p dir=\"auto\">These fixes mean that esbuild's implementation of Plug'n'Play now matches Yarn's implementation more closely, and esbuild can now correctly build more projects that use Plug'n'Play.</p>\n</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.15.0\">0.15.0</a></h4>\n\n<blockquote><p dir=\"auto\"><strong>This release contains backwards-incompatible changes.</strong> Since esbuild is before version 1.0.0, these changes have been released as a new minor version to reflect this (as <a href=\"https://docs.npmjs.com/cli/v6/using-npm/semver/\">recommended by npm</a>). You should either be pinning the exact version of <code class=\"notranslate\">esbuild</code> in your <code class=\"notranslate\">package.json</code> file or be using a version range syntax that only accepts patch upgrades such as <code class=\"notranslate\">~0.14.0</code>. See the documentation about <a href=\"https://docs.npmjs.com/cli/v6/using-npm/semver/\">semver</a> for more information.</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Implement the Yarn Plug'n'Play module resolution algorithm (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/154\">#154</a>, <a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/237\">#237</a>, <a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/1263\">#1263</a>, <a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/pull/2451\">#2451</a>)</p>\n<p dir=\"auto\"><a href=\"https://nodejs.org/\">Node</a> comes with a package manager called <a href=\"https://www.npmjs.com/\">npm</a>, which installs packages into a <code class=\"notranslate\">node_modules</code> folder. Node and esbuild both come with built-in rules for resolving import paths to packages within <code class=\"notranslate\">node_modules</code>, so packages installed via npm work automatically without any configuration. However, many people use an alternative package manager called <a href=\"https://yarnpkg.com/\">Yarn</a>. While Yarn can install packages using <code class=\"notranslate\">node_modules</code>, it also offers a different package installation strategy called <a href=\"https://yarnpkg.com/features/pnp/\">Plug'n'Play</a>, which is often shortened to \"PnP\" (not to be confused with <a href=\"https://pnpm.io/\">pnpm</a>, which is an entirely different unrelated package manager).</p>\n<p dir=\"auto\">Plug'n'Play installs packages as <code class=\"notranslate\">.zip</code> files on your file system. The packages are never actually unzipped. Since Node doesn't know anything about Yarn's package installation strategy, this means you can no longer run your code with Node as it won't be able to find your packages. Instead, you need to run your code with Yarn, which applies patches to Node's file system APIs before running your code. These patches attempt to make zip files seem like normal directories. When running under Yarn, using Node's file system API to read <code class=\"notranslate\">./some.zip/lib/file.js</code> actually automatically extracts <code class=\"notranslate\">lib/file.js</code> from <code class=\"notranslate\">./some.zip</code> at run-time as if it was a normal file. Other file system APIs behave similarly. However, these patches don't work with esbuild because esbuild is not written in JavaScript; it's a native binary executable that interacts with the file system directly through the operating system.</p>\n<p dir=\"auto\">Previously the workaround for using esbuild with Plug'n'Play was to use the <a href=\"https://www.npmjs.com/package/@yarnpkg/esbuild-plugin-pnp\"><code class=\"notranslate\">@yarnpkg/esbuild-plugin-pnp</code></a> plugin with esbuild's JavaScript API. However, this wasn't great because the plugin needed to potentially intercept every single import path and file load to check whether it was a Plug'n'Play package, which has an unusually high performance cost. It also meant that certain subtleties of path resolution rules within a <code class=\"notranslate\">.zip</code> file could differ slightly from the way esbuild normally works since path resolution inside <code class=\"notranslate\">.zip</code> files was implemented by Yarn, not by esbuild (which is due to a limitation of esbuild's plugin API).</p>\n<p dir=\"auto\">With this release, esbuild now contains an independent implementation of Yarn's Plug'n'Play algorithm (which is used when esbuild finds a <code class=\"notranslate\">.pnp.js</code>, <code class=\"notranslate\">.pnp.cjs</code>, or <code class=\"notranslate\">.pnp.data.json</code> file in the directory tree). Creating additional implementations of this algorithm recently became possible because Yarn's package manifest format was recently documented: <a href=\"https://yarnpkg.com/advanced/pnp-spec/\">https://yarnpkg.com/advanced/pnp-spec/</a>. This should mean that you can now use esbuild to bundle Plug'n'Play projects without any additional configuration (so you shouldn't need <code class=\"notranslate\">@yarnpkg/esbuild-plugin-pnp</code> anymore). Bundling these projects should now happen much faster as Yarn no longer even needs to be run at all. Bundling the Yarn codebase itself with esbuild before and after this change seems to demonstrate over a 10x speedup (3.4s to 0.24s). And path resolution rules within Yarn packages should now be consistent with how esbuild handles regular Node packages. For example, fields such as <code class=\"notranslate\">module</code> and <code class=\"notranslate\">browser</code> in <code class=\"notranslate\">package.json</code> files within <code class=\"notranslate\">.zip</code> files should now be respected.</p>\n<p dir=\"auto\">Keep in mind that this is brand new code and there may be some initial issues to work through before esbuild's implementation is solid. Yarn's Plug'n'Play specification is also brand new and may need some follow-up edits to guide new implementations to match Yarn's exact behavior. If you try this out, make sure to test it before committing to using it, and let me know if anything isn't working as expected. Should you need to debug esbuild's path resolution, you may find <code class=\"notranslate\">--log-level=verbose</code> helpful.</p>\n</li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/esbuild/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/evanw/esbuild/compare/04ef75fd7ff534a636962f14e11d224c84aa2020...c0b8a538c2bf5106977895535010ec402cae75f8\">See the full diff on Github</a>. The new version differs by 62 commits:</p>\n<ul>\n<li><a href=\"https://github.com/evanw/esbuild/commit/c0b8a538c2bf5106977895535010ec402cae75f8\"><code>publish 0.15.7 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/976b57a5700165ff465a9a932e6a101ab6e151ee\"><code>validate `await` in shorthand destructuring</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/8ac75295183f1a0a368866ebbf330c3883a959ff\"><code>tests: ignore new top-level await test262 tests</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/dbd21a861ae9618faf03e1965986154052224351\"><code>tests: skip new features in test262</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/7331a348c66380be6e0d0725e85c6565f32b1c43\"><code>ci: upgrade to yarn 3.2.3, enable more tests</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/31e1cee49e70a2c1de6158b5a9f5aab5ac99c5ed\"><code>install script: tiny wasm tree-shaking improvement</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/0438f643e25563566431d282a9e8b13607c68ce7\"><code>ci: run deno tests on windows</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/7549073c2fe6f0d2f72f9849c0c09a0e189303fc\"><code>ci: pin deno version to avoid test flakes</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/6a26f5926fdd4b18d09a55c4a4cee9fcba41b737\"><code>tests: use unused test in `node-unref-tests`</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/037ffbba5928d858115c4e4c02eb71ba230753ca\"><code>tests: remove `source-map` from `js-api-tests`</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/bd06f134806722e867e4b29bb6408ca5e89ddb36\"><code>fix #2519: don&#39;t rely on  in install script</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/ccd8cd45a5a56fdff35bb035438d17a005f3cf96\"><code>extra log info for missing file extension (#2518)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/77194c8fd8026e8e9f09f4480d1be42aaa6fc09c\"><code>fix #1511, fix #1885: add `--watch=forever`</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/41c45af627cd72e86e6389434547d3d9a15b4ab2\"><code>fix bugs by preserving option mutations in bundler</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/1eb8a3a383b86fa94eab5cc49c78466ac0e5a66b\"><code>mock fs: fix differences with go&#39;s relative path</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/2334cdfa392c9dc4cce66e64ae93776e64a74a18\"><code>fix #2510: show comment for invalid source maps</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/28ccdc97029acbfc985d3d87d2ec98a5946ce234\"><code>chore: remove duplicate word (#2502)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/324a390091101caecf1aac8d0bd7f7579775d66d\"><code>fix: missing ios15 in top level await (#2505)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/63b575723f17b9eeb0d2fe0ea1bb5fb5c17a2ddc\"><code>fix incorrect plugin test name</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/78a1e00b2e69f8926c5e0468ede2979c21a06e19\"><code>publish 0.15.6 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/6414eeb70056247ba3bba118151251d7d3fcc5c4\"><code>follow-up to #2457</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/4eb171340d0a8c6c5feb872ad27add051e419db3\"><code>fix: don&#39;t write pnpapi binary into own pkg (#2457)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/7cae76971b37033b76c50eb665522b98d448a1a2\"><code>remove an unused test script</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/632d8d1c022aaea6ad22a9b0fac6be144271a050\"><code>fix invalid runtime code possible with `supported`</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/d317a421e145d35ee099868906be209b6c9c7bbd\"><code>tests: remove hack from when import() was esm-only</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/e7169db14141bdd33fb2e53d7dfa8f7352f17110\"><code>implement lowering of `for await` loops</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/af4d944503fd8f25282a73d11b8118b2b9afd274\"><code>fix #2496: minify removes useless break statements</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/501abf7966b5a9f8fd0ae7a6cdad46f14e6d692b\"><code>fix #2497: correct invalid feature configurations</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/2026535fe12d6f151793aef9a95afaa9839cb920\"><code>avoid duplicate errors for unsupported functions</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/029441ccedac62ba6d0d09a26ebff8756020999c\"><code>forbid generator methods when not supported</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/e848de20d505e7bd99afa4d9ff6f595dde708563\"><code>add a hint about using `.cjs`/`.cts` (#2488)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/ec09adec4756fee0fe98ba0cb76af8cf7e254a2e\"><code>serve: add the `.webmanifest` extension</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/a6c42a19ff62a70d118e8e016a302fcac84ed95f\"><code>publish 0.15.5 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/9eb3302b66448584de91ce6b2c1ead54a4698d48\"><code>fix #2476: issues with yarn&#39;s &quot;workspaces&quot; feature</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/f4da27cb6c5907c333ab2cf09fa8bad4d928665f\"><code>publish 0.15.4 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/6a69a18e32bfb6317d76b59de487ef784cf6b3de\"><code>fix #2473: yarn pnp `exports` in `package.json`</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/5e085f5beedfb3989bdbc774a9c0726263809152\"><code>Suggest using `Number.isNaN` instead of `isNaN` (#2471)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/13587cef234e93658d938bc4d92b52b6aa386ef8\"><code>fix #2468: allow ts `import x =` to be tree shaken</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/6d4f9028083b8f9bf77be9492d713d6c2294959e\"><code>fix #2467: move `banner` before `&quot;use strict&quot;`</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/eeb250910f219cbcd23abae103936b8f8a374b48\"><code>publish 0.15.3 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/8a7101141119a50aa1fbf519356129b090e4b7ca\"><code>pnp: remove unused `dependencyTreeRoots` data</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/44a7a61be188d6106a139e581ec9cf4d36378823\"><code>fix #2463: change yarn pnp manifest to a singleton</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/6fd8736d21f40500726025ae1d4de39053251ca6\"><code>fix #2465: handle windows paths and `sideEffects`</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/9f0699f663af91d7361bb0b8836a407ca298e4dc\"><code>unit tests: run using both windows and unix paths</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/1f7273c34a2f1b68cd747999022421a434659881\"><code>fix #2462: convert `\\` to `/` in windows paths</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/e6fa7393054316d0acd233c4325691b21ec60815\"><code>publish 0.15.2 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/9b4026768e946482a453a5611ab1347275a1f47a\"><code>fix #2455: strip `/` to fix `index.js` edge case</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/4e68c27cdc19f50031af36913b89cc4ea825bea1\"><code>fix #2456: `extends` in `tsconfig.json` with pnp</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/201c1f67dc89ed13d67e9cda5a09523e3d03a43b\"><code>release notes for the previous commit (#2458)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/1f17c30883be41db4918c1c7be356ec1f1186a6a\"><code>pnp: fix traversing into zip files with wasm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/6bc6a9cbd334e5262b3eed0cf460809a5711f244\"><code>publish 0.15.1 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/a77695ed8d565b27d3cc3adcd4940b02f890f6d1\"><code>release notes</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/57c8a785b838c5080e65b6fd50d78bcccb238860\"><code>Update Yarn PnP to match the latest specification (#2453)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/c223771c9d7fda2b45f21d866865deff547059f3\"><code>publish 0.15.0 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/a0b752e2989ba845c56746c29989999dbf126b53\"><code>implement the yarn pnp module resolution algorithm (#2451)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/c58fe49a903823c6c943de469dfdf562597d67df\"><code>zip: fix bug with readdir and trailing slashes</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/4f4388886afdedd7169b25619b605634d535ba13\"><code>add simple test coverage for zip and `__virtual__`</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/e870ec5ae024f3795d1fb5ee0999d46c3fdd44fd\"><code>implement yarn pnp `__virtual__` path mangling</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/a481005d8fd6b5504a9ed139e576d5b6534959bb\"><code>add zip file support</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/664c8a513e9a05f8a9830bba54dcc479ba153d64\"><code>jsx: use first element loc for logs and source map</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/1114e7dc4d975eeeb981f5827ba9cdc6b6e0fe24\"><code>fix dropped errors in `readdir` due to refactor</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/da0e4ca9c5c15c72381a5eae539f4256181ac66a\"><code>increase node unref test timeout for slow vms</code></a></li>\n</ul>\n</details>\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@‚Äãdepfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@‚Äãdepfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@‚Äãdepfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@‚Äãdepfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@‚Äãdepfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@‚Äãdepfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@‚Äãdepfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@‚Äãdepfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9306","RelatedDescription":"Closed or merged PR \"Upgrade esbuild: 0.14.54 ‚Üí 0.15.7 (major)\" (#9306)"},{"Id":"1369718504","IsPullRequest":false,"CreatedAt":"2022-09-12T20:42:06","Actor":"dkress59","Number":"9311","RawContent":null,"Title":"Custom Utilities not found in ~80% of dev builds","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\nv3.1.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n* Webpack 5.74.0\r\n  * webpack-cli v4.10.0\r\n  * sass-loader v13.0.2\r\n  * postcss-loader v7.0.1\r\n    * postcss-import\r\n    * tailwindcss/nesting\r\n    * tailwindcss\r\n    * autoprefixer\r\n  * style-loader v3.3.1\r\n  * css-loader v6.7.1\r\n  * style-loader v3.3.1\r\n*  React v18.2.0\r\n\r\n**What version of Node.js are you using?**\r\nv18.9.0\r\n\r\n**What browser are you using?**\r\nany\r\n\r\n**What operating system are you using?**\r\nmacOS Monterey, Debian 11 (bullseye)\r\n\r\n**Reproduction URL**\r\nhttps://github.com/dkress59/eleaves-issue-repro\r\n\r\n**Describe your issue**\r\n\r\n*Issue Description:*\r\nWhen running the app through webpack-dev-server (whether with docker compose, or \"natively\"), in four out of five times the build fails, because my custom utilities are not found. After several tries of restarting without changing any code, the compilation miraculously succeeds. In production builds this issue somehow never occurs, the difference there being A) not using webpack's devServer feature and B) using [MiniCssExtractPlugin](https://webpack.js.org/plugins/mini-css-extract-plugin/)'s loader instead of the classic style-loader. Using MiniCssExtractPlugin for the dev builds, as well, does not help, though.\r\nMore detailed information on the exact error and the general project setup are included in the reproduction repo's readme.\r\n\r\n*Expected Behaviour:*\r\nCustom Tailwind Utilities are found in every dev build instead of just being found occasionally.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9311","RelatedDescription":"Closed issue \"Custom Utilities not found in ~80% of dev builds\" (#9311)"},{"Id":"1368780376","IsPullRequest":false,"CreatedAt":"2022-09-12T19:08:32","Actor":"saadeghi","Number":"9303","RawContent":null,"Title":"Adding custom utilities that use `:where()` selector, generates empty CSS selector when used with a responsive prefix","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.1.8\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/6lUxA2zYzo?file=config\r\n\r\n**Describe your issue**\r\n\r\nThis works:\r\n```html\r\n<div class=\"sm:make-it-red\">\r\n```\r\n```js\r\naddUtilities({\r\n  '.make-it-red': {\r\n    backgroundColor: 'red',\r\n  },\r\n}),{\r\n  variants: [\"responsive\"],\r\n}\r\n```\r\nBut this doesn't work:\r\n```html\r\n<div class=\"sm:make-it-pink\">\r\n```\r\n```js\r\naddUtilities({\r\n  ':where(.make-it-pink)': {\r\n    backgroundColor: 'hotpink',\r\n  },\r\n}),{\r\n  variants: [\"responsive\"],\r\n}\r\n```\r\nExpected CSS:\r\n```css\r\n@media (min-width: 640px) {\r\n  .sm\\:make-it-red {\r\n    background-color: red\r\n  }\r\n\r\n   :where(.sm\\:make-it-pink){\r\n    background-color: hotpink\r\n  }\r\n}\r\n```\r\nGenerated CSS:\r\n```css\r\n@media (min-width: 640px) {\r\n  .sm\\:make-it-red {\r\n    background-color: red\r\n  }\r\n\r\n   {\r\n    background-color: hotpink\r\n  }\r\n}\r\n```\r\nAs you can see [here](https://play.tailwindcss.com/6lUxA2zYzo?file=config) it generates empty selector name.\r\n\r\nI wonder if there's a way to make it work to have `:where()` selectors with responsive prefixes.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9303","RelatedDescription":"Closed issue \"Adding custom utilities that use `:where()` selector, generates empty CSS selector when used with a responsive prefix\" (#9303)"},{"Id":"1369075266","IsPullRequest":true,"CreatedAt":"2022-09-12T19:08:31","Actor":"thecrypticace","Number":"9309","RawContent":null,"Title":"Handle variants in utility selectors using `:where()` and `:has()`","State":"closed","Body":"Fixes #9303","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9309","RelatedDescription":"Closed or merged PR \"Handle variants in utility selectors using `:where()` and `:has()`\" (#9309)"},{"Id":"1370033804","IsPullRequest":false,"CreatedAt":"2022-09-12T15:26:41","Actor":"snaptopixel","Number":"9314","RawContent":null,"Title":"Transforms do not work without importing base","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.1.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nStencilJS/rollup\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv16.17.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/mhI5n4GOWy\r\n\r\n**Describe your issue**\r\n\r\nI'm using tailwind on top of a ui that already has it's own reset, so I'm not importing `base`. The `transform` class does not seem to provide default values for the expected vars (which I assume are set as part of base) and so none of the transforms work.\r\n\r\n```css\r\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\r\n```\r\nShould become something like\r\n```css\r\n    transform: translate(var(--tw-translate-x, 0), var(--tw-translate-y, 0)) rotate(var(--tw-rotate, 0)) skewX(var(--tw-skew-x, 0)) skewY(var(--tw-skew-y, 0)) scaleX(var(--tw-scale-x, 1)) scaleY(var(--tw-scale-y, 1));\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9314","RelatedDescription":"Closed issue \"Transforms do not work without importing base\" (#9314)"},{"Id":"1368412467","IsPullRequest":false,"CreatedAt":"2022-09-09T23:37:02","Actor":"chlbri","Number":"9299","RawContent":null,"Title":"SafeList for 'after' don't work","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n3.1.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\nSolidJS\r\n\r\n**What version of Node.js are you using?**\r\n16\r\n\r\n**What browser are you using?**\r\nedge\r\n\r\n**What operating system are you using?**\r\nmacOS,\r\n\r\n\r\n**Describe your issue**\r\n\r\n`/** @type {import('tailwindcss').Config} */\r\nmodule.exports = {\r\n  content: ['./src/**/*.{js,jsx,ts,tsx}'],\r\n  theme: {\r\n    extend: {},\r\n  },\r\n  plugins: [],\r\n  safelist: [\r\n    'after:absolute',\r\n    'after:rounded-full',\r\n    'after:w-2.5',\r\n    'after:h-2.5',\r\n    'after:bg-cyan-600',\r\n    {\r\n      pattern: /(rounded-full|bg-cyan-600|absolute|w-2.5|h-2.5|ml-1)/,\r\n      variants: ['after'],\r\n    },\r\n  ],\r\n};`\r\n\r\nMy tailwind config\r\n\r\nI create a classList inside a hook in solid like that :\r\n` const classList: main.ClassList = {\r\n    'after:rounded-full  after:bg-cyan-600 after:absolute after:w-2.5 after:h-2.5 after:ml-1':\r\n      dragging(),\r\n  };\r\n`\r\n\r\nBut it doesn't work. The after component is not drawind","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9299","RelatedDescription":"Closed issue \"SafeList for 'after' don't work\" (#9299)"},{"Id":"1367953775","IsPullRequest":false,"CreatedAt":"2022-09-09T15:49:44","Actor":"aidanCQ","Number":"9297","RawContent":null,"Title":"Tailwind fails to detect single class wrapped in double quotes in minified JS build.","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.0.24\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNext.js 12.3.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv16.15.0\r\n\r\n**What browser are you using?**\r\n\r\nFirefox\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\n-\r\n\r\n**Describe your issue**\r\n\r\nI am installing a component library I have created and have added it to the `content` field in `tailwind.config.js`. Tailwind is able to detect 99% of the classes except for single classes wrapped in double quotes.\r\n\r\nIn my component library code I am condionally appending classes like so:\r\n```tsx\r\n<div className={cx(condition ? \"px-3.5\" : \"\", \"bg-blue-600 text-gray-500\")}></div>\r\n```\r\nThe output js in the build is this:\r\n```js\r\n//...minifiedJS\r\nr?\"px-3.5\":\"\" // This is where the problem lies\r\n//...minifiedJS\r\n```\r\nTailwind fails to detect the class `px-3.5` if it is alone in double quotes. If I manually edit the build, tailwind is able to detect the class in the following:\r\n```js\r\n//...minifiedJS\r\nr?\" px-3.5 \":\"\" // I have added whitespace around the class and this works\r\n//...minifiedJS\r\n```\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9297","RelatedDescription":"Closed issue \"Tailwind fails to detect single class wrapped in double quotes in minified JS build.\" (#9297)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-09-22T03:30:29.5899215Z","RunDurationInMilliseconds":543}