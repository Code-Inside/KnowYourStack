{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2451270783","IsPullRequest":true,"CreatedAt":"2024-08-06T16:25:45","Actor":"RobinMalfait","Number":"14135","RawContent":null,"Title":"Apply general feedback for `@sources`","State":"open","Body":"This PR applies general feedback to the `@sources` umbrella PR.\n\nThis PR includes the following changes:\n- Used real classes instead of class-like objects.\n- Only handle PostCSS imports when `@import` is used.\n- Improve some comments\n- Improve naming of `GlobEntry` (`glob.glob` -> `glob.pattern`)\n- Use `scanFiles` on the `scanDirResult` as-if it's an incremental scan (under\n  the hood we still do a full scan right now).\n- Renamed `content_paths` to `sources`\n\nThis is a separate PR just so that we can merge the umbrella PR un-squashed for each sub-PR. This way all the commits here won't show up in the `next` branch as-is.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14135","RelatedDescription":"Open PR \"Apply general feedback for `@sources`\" (#14135)"},{"Id":"2450973395","IsPullRequest":true,"CreatedAt":"2024-08-06T14:01:49","Actor":"philipp-spiess","Number":"14134","RawContent":null,"Title":"Error on invalid @plugin usage","State":"open","Body":"This PR just adds two minor errors to guard against invalid `@plugin` usage similarly to what we do with `@source` in \r\nhttps://github.com/tailwindlabs/tailwindcss/pull/14078.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14134","RelatedDescription":"Open PR \"Error on invalid @plugin usage\" (#14134)"},{"Id":"2450672244","IsPullRequest":true,"CreatedAt":"2024-08-06T11:41:34","Actor":"philipp-spiess","Number":"14133","RawContent":null,"Title":"Add `test.debug` to integration tests","State":"open","Body":"While working on #14078, there were a couple of debugging  techniques that we were using quite frequently:\r\n\r\n- Being able to `cd` into the test setup\r\n- Seeing the stdio and stdout data in real-time (this currently requires us to mark a test as failing)\r\n- Checking the exact commands that are being run\r\n\r\nSince we naturally worked around this quite often, I decided to make this a first-level API with the introduction of a new `test.debug` flag. When set, it will:\r\n\r\n- Create the test setup in the project dir within a new `.debug` folder and won't delete it after the run. Having it in an explicit folder allows us to easily delete it manually when we need to.\r\n- Logs all run commands to the console (`>` for a sync call, `>&` for a spawned process)\r\n- Logs stdio and stderr to the console in real time.\r\n- Run the test as `.only`\r\n\r\n<img width=\"2267\" alt=\"Screenshot 2024-08-06 at 13 19 49\" src=\"https://github.com/user-attachments/assets/1b204ac2-feee-489e-9cd8-edf73c0f2abd\">","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14133","RelatedDescription":"Open PR \"Add `test.debug` to integration tests\" (#14133)"},{"Id":"2450519875","IsPullRequest":true,"CreatedAt":"2024-08-06T10:24:48","Actor":"philipp-spiess","Number":"14132","RawContent":null,"Title":"Use `import` to load plugins","State":"open","Body":"Alternative to #14110\r\n\r\nThis PR changes the way how we load plugins to be compatible with ES6 async `import`s. This allows us to load plugins even inside the browser but it comes at a downside: We now have to change the `compile` API to return a `Promise`...\r\n\r\nSo most of this PR is rewriting all of the call sites of `compile` to expect a promise instead of the object.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14132","RelatedDescription":"Open PR \"Use `import` to load plugins\" (#14132)"},{"Id":"2449106301","IsPullRequest":true,"CreatedAt":"2024-08-06T09:57:01","Actor":"RobinMalfait","Number":"14127","RawContent":null,"Title":"Rename `@content` to `@source`","State":"closed","Body":"This PR renames the `@content` directive to `@source`.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14127","RelatedDescription":"Closed or merged PR \"Rename `@content` to `@source`\" (#14127)"},{"Id":"2449195337","IsPullRequest":true,"CreatedAt":"2024-08-05T18:18:57","Actor":"RobinMalfait","Number":"14129","RawContent":null,"Title":"Add `inert` variant","State":"open","Body":"This PR adds a new `inert` variant.\r\n\r\nWe use `:where([inert], [inert] *)`, because the element with the `inert` attribute and any of its descendants will be inert.\r\n\r\nFor example, both these buttons will have `opacity-50`:\r\n\r\n```html\r\n<button inert class=\"inert:opacity-50\">I am inert</button>\r\n<div inert>\r\n  <button class=\"inert:opacity-50\">I am also inert</button>\r\n</div>\r\n```\r\n\r\nSee: https://play.tailwindcss.com/Jqedv6phGn\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14129","RelatedDescription":"Open PR \"Add `inert` variant\" (#14129)"},{"Id":"2449130758","IsPullRequest":false,"CreatedAt":"2024-08-05T18:09:35","Actor":"tance77","Number":"14128","RawContent":null,"Title":"List Cursor Position Content Editable","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n3.4.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nTailwindcss Playground\r\n\r\nVue3, Vite\r\n\r\n**What version of Node.js are you using?**\r\nv22.5.1\r\n\r\n**What browser are you using?**\r\nChrome, Safari, Edge\r\n\r\n**What operating system are you using?**\r\nmacOS, Windows\r\n\r\n**Reproduction URL**\r\n[Reproduction URL](https://play.tailwindcss.com/8Ne5OpAa72)\r\n\r\n\r\n\r\n**Describe your issue**\r\n\r\nI've created a simple div that has the `contenteditable` flag set to true. Within this div contains an `ol` and a `li` element. As you can see in the preview on the right-hand side when you click into it the Cursor is on the left side of the `li` which it should be on the right side of the `li` If you type any character it seems to correct itself. \r\n\r\nI would expect the cursor to be on the right-hand side of the `1.` \r\n\r\n\r\nNo TailwindCss\r\n\r\n```html\r\n<div style=\"padding: 0.25rem;\">\r\n    <div contenteditable=\"true\" style=\"padding: 0.25rem; border: 1px solid black;\">\r\n        <ol class=\"\">\r\n            <li></li>\r\n        </ol>\r\n    </div>\r\n</div>\r\n\r\n```\r\n\r\n![Screenshot 2024-08-05 at 10 48 44â€¯AM](https://github.com/user-attachments/assets/543bfdb5-2d4c-44f4-be45-f33bdeb694d2)\r\n\r\nNotice the cursor is on the right side of the list\r\n\r\n\r\nWith TailwindCSS\r\n\r\n![Screenshot 2024-08-05 at 10 50 17â€¯AM](https://github.com/user-attachments/assets/69279287-775c-41eb-bffe-5dd59863e917)\r\n\r\n\r\nNotice the cursor is on the left side\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14128","RelatedDescription":"Closed issue \"List Cursor Position Content Editable\" (#14128)"},{"Id":"2435526267","IsPullRequest":true,"CreatedAt":"2024-08-05T17:24:36","Actor":"RobinMalfait","Number":"14080","RawContent":null,"Title":"Add `@content` support to `@tailwindcss/postcss`","State":"closed","Body":"This PR adds support for `@content` and makes sure that globs are registered within PostCSS.\n\nFrom a configuration perspective nothing changes for the end user. It does however make sure that `@content` can be used and changes in those globs will be picked up.\n<!--\n\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14080","RelatedDescription":"Closed or merged PR \"Add `@content` support to `@tailwindcss/postcss`\" (#14080)"},{"Id":"2435053735","IsPullRequest":true,"CreatedAt":"2024-08-05T15:40:35","Actor":"RobinMalfait","Number":"14076","RawContent":null,"Title":"Add `@content` support to `@tailwindcss/vite`","State":"closed","Body":"This PR makes sure that when you use `@content`, that these files are also being watched if you are using Vite.\n\nIn Vite we rely on the module graph instead, but sometimes it can be useful to watch files outside of the module graph. E.g.: A Laravel project, where you are watching `*.blade.php` files.\n<!--\n\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14076","RelatedDescription":"Closed or merged PR \"Add `@content` support to `@tailwindcss/vite`\" (#14076)"},{"Id":"2447135148","IsPullRequest":false,"CreatedAt":"2024-08-05T09:04:26","Actor":"bayaderpack","Number":"14122","RawContent":null,"Title":"Tailwind crash with watch","State":"closed","Body":"tailwindcss v3.4.7\r\n\r\nNode: v21.5.0\r\n\r\nBrowser: Chrome\r\n\r\nWindows 11\r\n\r\n**Describe your issue**\r\n\r\nI'm using this command to watch the file changes \r\n\r\n```\r\ntailwindcss -i ./assets/styles.scss -o ./static/styles.css --watch\r\n```\r\nAfter some time I get this error and tailwind crash \r\n\r\n<--- Last few GCs --->\r\n\r\n[19804:00000284BC071B40]  6883361 ms: Mark-sweep 4050.6 (4138.7) -> 4038.8 (4142.7) MB, 3220.5 / 16.2 ms  (average mu = 0.363, current mu = 0.017) allocation failure scavenge might not succeed\r\n[19804:00000284BC071B40]  6888419 ms: Mark-sweep 4054.6 (4142.7) -> 4042.8 (4146.7) MB, 4975.4 / 11.5 ms  (average mu = 0.182, current mu = 0.016) allocation failure scavenge might not succeed\r\n\r\n\r\n<--- JS stacktrace --->\r\n\r\nFATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory\r\n 1: 00007FF6BA7219EF v8::internal::CodeObjectRegistry::~CodeObjectRegistry+114175\r\n 2: 00007FF6BA6AF836 v8::internal::MicrotaskQueue::GetMicrotasksScopeDepth+65526\r\n 3: 00007FF6BA6B06ED node::OnFatalError+301\r\n 4: 00007FF6BAFE7BFE v8::Isolate::ReportExternalAllocationLimitReached+94\r\n 5: 00007FF6BAFD20FD v8::SharedArrayBuffer::Externalize+781\r\n 6: 00007FF6BAE7545C v8::internal::Heap::EphemeronKeyWriteBarrierFromCode+1468\r\n 7: 00007FF6BAE72574 v8::internal::Heap::CollectGarbage+4244\r\n 9: 00007FF6BAE94A76 v8::internal::Factory::NewFillerObject+214\r\n10: 00007FF6BABC6A75 v8::internal::DateCache::Weekday+1797\r\n11: 00007FF6BB0758F1 v8::internal::SetupIsolateDelegate::SetupHeap+494417\r\n12: 00007FF6BB036A12 v8::internal::SetupIsolateDelegate::SetupHeap+236658\r\n13: 00000284BDEDA4B8","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14122","RelatedDescription":"Closed issue \"Tailwind crash with watch\" (#14122)"},{"Id":"2447081998","IsPullRequest":false,"CreatedAt":"2024-08-04T10:59:48","Actor":"hamidreza4dev","Number":"14121","RawContent":null,"Title":"Support for Arbitrary Values with Custom Breakpoint configuration","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss 8.4.40, Next.js 14.2.5\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v20.15.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/DN6QPm53oY\r\n\r\n**Describe your issue**\r\n\r\nThe class `min-[800px]:bg-red-500` is not recognized because I switched to max-width breakpoints instead of the default min-width. Here is my configuration:\r\n```ts\r\n/** @type {import('tailwindcss').Config} */\r\nexport default {\r\n  theme: {\r\n    screens: {\r\n      '3xl': { max: '1899px' },\r\n      '2xl': { max: '1535px' },\r\n      xl: { max: '1399px' },\r\n      xxl: { max: '1279px' },\r\n      lg: { max: '1023px' },\r\n      md: { max: '767px' },\r\n      sm: { max: '639px' },\r\n      xs: { max: '479px' },\r\n      xxs: { max: '399px' },\r\n    },\r\n  }\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14121","RelatedDescription":"Open issue \"Support for Arbitrary Values with Custom Breakpoint configuration\" (#14121)"},{"Id":"2446693223","IsPullRequest":false,"CreatedAt":"2024-08-04T01:14:17","Actor":"ottomated","Number":"14119","RawContent":null,"Title":"[v4] Clarify browser support","State":"open","Body":"Tailwind v4 seems to be taking a different direction for browser support than v3, using some pretty bleeding-edge CSS features for common utilities rather than just providing APIs for them. This is fine, but requires:\r\n\r\n1. Very obvious documentation upon release, so people upgrading are aware that their existing code will stop working on older browsers\r\n2. Potentially, an official plugin that transpiles utilities such as `transform` that lightningcss does not support (#14094)\r\n3. Potentially, said plugin being enabled by default\r\n\r\nI think this issue will be more pervasive upon release given that v4 will support backwards compatibility for config files and might be mistakenly seen as a drop-in replacement.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14119","RelatedDescription":"Open issue \"[v4] Clarify browser support\" (#14119)"},{"Id":"2446110627","IsPullRequest":true,"CreatedAt":"2024-08-03T05:22:02","Actor":"thecrypticace","Number":"14116","RawContent":null,"Title":"Only read from stdin when using `â€”input -`","State":"open","Body":"Using `process.stdin.resume()` causes stdin to be consumed and buffered in Node immediately â€” even when using a file as input. Itâ€™d be better for our process to not read data from stdin at all in this case.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14116","RelatedDescription":"Open PR \"Only read from stdin when using `â€”input -`\" (#14116)"},{"Id":"2445521822","IsPullRequest":true,"CreatedAt":"2024-08-02T18:15:50","Actor":"thecrypticace","Number":"14114","RawContent":null,"Title":"Add `matchUtilities` and `addUtilities` APIs","State":"open","Body":"This PR introduces support for the v3-like `addUtilities` and `matchUtilities` APIs in v4. We anticipate designing a new API that feels more native to the way v4 works before shipping v4.0 stable, but we're continuing to support these APIs for backwards compatibility.\r\n\r\nWe've tried to make the behavior as identical as possible, but because of fundamental differences between the v3 and v4 engines there are a few things that work differently:\r\n\r\n## Only simple single-class selectors are supported\r\n\r\nIn v3 you could pass a complex CSS selector to `addUtilities` and we would generate a utility for every class in the selector. In v4 we only allow you to use a simple, single-class selector.\r\n\r\nYou should use nesting if you need a more complex selector, or need to include at-rules like `@media` or `@supports`.\r\n\r\n```js\r\n// v3\r\nfunction ({ addUtilities }) {\r\n  addUtilities({\r\n    '.scrollbar-none::-webkit-scrollbar': {\r\n      display: 'none',\r\n    },\r\n  })\r\n}\r\n\r\n// v4\r\nfunction ({ addUtilities }) {\r\n  addUtilities({\r\n    '.scrollbar-none': {\r\n      '&::-webkit-scrollbar': {\r\n        display: 'none',\r\n      },\r\n    },\r\n  })\r\n}\r\n```\r\n\r\nIf you were adding custom utilities that included two classes and were depending on both of those classes behaving like utilities (they could each be used with variants), those custom utilities will need to be rewritten as two separate utilities that each use nesting:\r\n\r\n```js\r\n// v3\r\nfunction ({ addUtilities }) {\r\n  addUtilities({\r\n    '.section > .row': {\r\n      color: 'red',\r\n    },\r\n  })\r\n}\r\n\r\n// v4\r\nfunction ({ addUtilities }) {\r\n  addUtilities({\r\n    '.section': {\r\n      '& > .row': {\r\n        color: 'red',\r\n      },\r\n    },\r\n\r\n    '.row': {\r\n      'section > &': {\r\n        color: 'red',\r\n      },\r\n    },\r\n  })\r\n}\r\n```\r\n\r\nWe may introduce support for this in the future if this limitation turns out to be a huge pain in the ass, but crossing our fingers that people were mostly doing simple stuff here.\r\n\r\n## Opacity modifiers support bare values\r\n\r\nTo be consistent with how built-in utilities work in v4, custom utilities that specify `type: \"color\"` now get \"bare value\" support for opacity modifiers. This means that a utility like `foo-black/33` will work out of the box without having to either add `--opacity-33` to your theme nor would you need to add it to the `modifiers` option.\r\n\r\n## The `preferOnConflict` type option is gone\r\n\r\nIn v3 we introduced an internal API called `preferOnConflict` for types. This was used as a way to disambiguate between two utilities with the same \"root\" but which produced different properties which used the same CSS data types. This was only applicable to arbitrary values and was only used for disambiguating between `background-position` and `background-size`.\r\n\r\nIn v4, both of these properties are handled by a single plugin meaning this feature is no longer necessary. No one should've really been using this option anyway as it was never documented so we're dropping the feature.\r\n\r\n## The options `respectPrefix` and `respectImportant` are not yet supported\r\n\r\nNeither the `prefix` nor `important` features exist in any form in v4 at this time. Therefore, they are not currently supported by this PR. We will look into supporting them if/when those features return.\r\n\r\n## The `theme(â€¦)` function is not currently supported\r\n\r\nCustom utilities defined using `matchUtilities` often use the `theme(â€¦)` function to define their default values, but we haven't implemented support for `theme(â€¦)` yet in v4.\r\n\r\nThis means that as of this PR, default values for custom utilities must be hardcoded:\r\n\r\n```js\r\nfunction ({ matchUtilities }) {\r\n  matchUtilities({\r\n    'tab': (value) => {\r\n      return {\r\n        'tab-size': value,\r\n      }\r\n    },\r\n  }, {\r\n    values: {\r\n      2: '2',\r\n      4: '4',\r\n      8: '8',\r\n    },\r\n  })\r\n}\r\n```\r\n\r\nGetting `theme(â€¦)` working is a big project so we're going to tackle it in a separate PR.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14114","RelatedDescription":"Open PR \"Add `matchUtilities` and `addUtilities` APIs\" (#14114)"},{"Id":"2440797346","IsPullRequest":true,"CreatedAt":"2024-08-02T13:37:30","Actor":"adamwathan","Number":"14095","RawContent":null,"Title":"Add support for `inline` option when defining `@theme` values","State":"closed","Body":"This PR adds support for a new `inline` option when defining a `@theme` block that tells Tailwind to use raw theme values for utilities instead of referencing the corresponding generated CSS variable.\r\n\r\n```css\r\n/* Input */\r\n@theme inline {\r\n  --color-red-500: #ef4444;\r\n  /* ... */\r\n}\r\n\r\n\r\n/* Example output */\r\n:root {\r\n  --color-red-500: #ef4444;\r\n}\r\n\r\n.text-red-500 {\r\n  color: #ef4444;\r\n}\r\n```\r\n\r\nThis can be composed with the existing `reference` option in case you want to define a `@theme` block as both `reference` (so the variables aren't generated) and `inline`:\r\n\r\n```css\r\n/* Input */\r\n@theme inline reference {\r\n  --color-red-500: #ef4444;\r\n  /* ... */\r\n}\r\n\r\n\r\n/* Example output */\r\n.text-red-500 {\r\n  color: #ef4444;\r\n}\r\n```\r\n\r\nSince you can have multiple `@theme` blocks, you can even define some values normally and some as inline based on how you're using them. For example you might want to use `inline` for defining literal tokens like `--color-red-500`, but include the variable for tokens that you want to be able to theme like `--color-primary`:\r\n\r\n```css\r\n/* Input */\r\n@theme inline {\r\n  --color-red-500: #ef4444;\r\n  /* ... */\r\n}\r\n\r\n@theme {\r\n  --color-primary: var(--color-red-500);\r\n}\r\n\r\n\r\n/* Example output */\r\n:root {\r\n  --color-red-500: #ef4444;\r\n  --color-primary: var(--color-red-500);\r\n}\r\n\r\n.text-red-500 {\r\n  color: #ef4444;\r\n}\r\n\r\n.text-primary {\r\n  color: var(--color-primary, var(--color-red-500));\r\n}\r\n```\r\n\r\n## Breaking changes\r\n\r\nPrior to this PR, you could `@import` a stylesheet that contained `@theme` blocks as reference by adding the `reference` keyword to your import:\r\n\r\n```css\r\n@import \"./my-theme.css\" reference;\r\n```\r\n\r\nNow that `reference` isn't the only possible option when declaring your `@theme`, this syntax has changed to a new `theme(â€¦)` function that accepts `reference` and `inline` as potential space-separated values:\r\n\r\n```css\r\n@import \"./my-theme.css\";\r\n@import \"./my-theme.css\" theme(reference);\r\n@import \"./my-theme.css\" theme(inline);\r\n@import \"./my-theme.css\" theme(reference inline);\r\n```\r\n\r\nIf you are using the `@import â€¦ reference` option with an earlier alpha release, you'll need to update your code to `@import â€¦ theme(reference)` once this PR lands in a release.\r\n\r\n## Motivation\r\n\r\nThis PR is designed to solve an issue pointed out in #14091.\r\n\r\nPrior to this PR, generated utilities would always reference variables directly, with the raw value as a fallback:\r\n\r\n```css\r\n/* Input */\r\n@theme {\r\n  --color-red-500: #ef4444;\r\n  /* ... */\r\n}\r\n\r\n\r\n/* Example output */\r\n:root {\r\n  --color-red-500: #ef4444;\r\n}\r\n\r\n.text-red-500 {\r\n  color: var(--color-red-500, #ef4444);\r\n}\r\n```\r\n\r\nBut this can create issues with variables resolving to an unexpected value when a theme value is referencing another variable defined on `:root`.\r\n\r\nFor example, say you have a CSS file like this:\r\n\r\n```css\r\n:root, .light {\r\n  --text-fg: #000; \r\n}\r\n\r\n.dark {\r\n  --text-fg: #fff;\r\n}\r\n\r\n@theme {\r\n  --color-fg: var(--text-fg);\r\n}\r\n```\r\n\r\nWithout `@theme inline`, we'd generate this output if you used the `text-fg` utility:\r\n\r\n```css\r\n:root, .light {\r\n  --text-fg: #000; \r\n}\r\n\r\n.dark {\r\n  --text-fg: #fff;\r\n}\r\n\r\n:root {\r\n  --color-fg: var(--text-fg);\r\n}\r\n\r\n.text-fg {\r\n  color: var(--color-fg, var(--text-fg));\r\n}\r\n```\r\n\r\nNow if you wrote this HTML, you're probably expecting your text to be the dark mode color:\r\n\r\n```html\r\n<div class=\"dark\">\r\n  <h1 class=\"text-fg\">Hello world</h1>\r\n</div>\r\n```\r\n\r\nBut you'd actually get the light mode color because of this rule:\r\n\r\n```css\r\n:root {\r\n  --color-fg: var(--text-fg);\r\n}\r\n\r\n.text-fg {\r\n  color: var(--color-fg, var(--text-fg));\r\n}\r\n```\r\n\r\nThe browser will try to resolve the `--color-fg` variable, which is defined on `:root`. When it tries to resolve the value, _it uses the value of `var(--text-fg)` as it would resolve at `:root`_, not what it would resolve to based on the element that has the `text-fg` class.\r\n\r\nSo `var(--color-fg)` resolves to `#000` because `var(--text-fg)` resolved to `#000` at the point in the tree where the browser resolved the value of `var(--color-fg)`.\r\n\r\nBy using `@theme inline`, the `.text-fg` class looks like this:\r\n\r\n```css\r\n.text-fg {\r\n  color: var(--text-fg);\r\n}\r\n```\r\n\r\nWith this definition, the browser doesn't try to resolve `--color-fg` at all and instead resolves `--text-fg` directly which correctly resolves to `#fff` as expected.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14095","RelatedDescription":"Closed or merged PR \"Add support for `inline` option when defining `@theme` values\" (#14095)"},{"Id":"2439794133","IsPullRequest":false,"CreatedAt":"2024-08-02T13:07:46","Actor":"pokonski","Number":"14092","RawContent":null,"Title":"Minification breaks nested @apply","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v3.4.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\ntailwindcss standalone executable 3.4.7\r\n\r\n**What version of Node.js are you using?**\r\n\r\nN/A, using standalone\r\n\r\n**What browser are you using?**\r\n\r\nFirefox 127\r\n\r\n**What operating system are you using?**\r\n\r\nMacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/pokonski/tailwind-minify-nesting/tree/master\r\n\r\n\r\n**Describe your issue**\r\n\r\nMinification breaks nested rules and flattens them:\r\n\r\nSource file\r\n\r\n```css\r\n.parent {\r\n  & .child {\r\n    @apply text-blue-500;\r\n\r\n    &:not([href]) {\r\n      @apply text-red-500;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nRunning `tailwindcss -i source.css -o build.css` outputs working CSS:\r\n\r\n```css\r\n.parent {\r\n  & .child {\r\n    --tw-text-opacity: 1;\r\n    color: rgb(59 130 246 / var(--tw-text-opacity))\r\n  }\r\n  & .child {\r\n    &:not([href]) {\r\n      --tw-text-opacity: 1;\r\n      color: rgb(239 68 68 / var(--tw-text-opacity))\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nBut running `tailwindcss -i source.css -o build-min.css -m` outputs broken CSS with missing nested rules:\r\n(formatted by me for readability)\r\n\r\n```css\r\n.parent {\r\n  & .child {\r\n    --tw-text-opacity: 1;\r\n    color: rgb(239 68 68/var(--tw-text-opacity));\r\n    color: rgb(59 130 246/var(--tw-text-opacity))\r\n  }\r\n}\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14092","RelatedDescription":"Closed issue \"Minification breaks nested @apply\" (#14092)"},{"Id":"2443253777","IsPullRequest":true,"CreatedAt":"2024-08-02T12:57:15","Actor":"thecrypticace","Number":"14105","RawContent":null,"Title":"Bump to latest cssnano v6","State":"closed","Body":"We bundle cssnano in our CLI and it's on an older version that does not handle nested CSS correctly. This PR updates it to the latest version of v6.x\r\n\r\nFixes #14092\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14105","RelatedDescription":"Closed or merged PR \"Bump to latest cssnano v6\" (#14105)"},{"Id":"2444788287","IsPullRequest":true,"CreatedAt":"2024-08-02T11:47:53","Actor":"RobinMalfait","Number":"14110","RawContent":null,"Title":"Ensure `require` is possible in `esm` file","State":"open","Body":"When using the `@plugin \"â€¦\";` in CSS, then the `@tailwindcss/cli` will currently crash with `Dynamic require` error:\n\n```\nError: Dynamic require of \"./plugin.js\" is not supported\n    at file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/@tailwindcss/cli/dist/index.mjs:2:195\n    at loadPlugin (file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/@tailwindcss/cli/dist/index.mjs:6:439)\n    at file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/tailwindcss/dist/lib.mjs:8:4328\n    at S (file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/tailwindcss/dist/lib.mjs:1:445)\n    at Module._r (file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/tailwindcss/dist/lib.mjs:8:4222)\n    at p (file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/@tailwindcss/cli/dist/index.mjs:6:414)\n    at le (file:///private/var/folders/â€¦/T/tailwind-integrationsâ€¦/node_modules/@tailwindcss/cli/dist/index.mjs:6:452)\n```\n\nTo solve this, we will make sure that we create a `require` based on the `import.meta.url`.\n<!--\n\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14110","RelatedDescription":"Open PR \"Ensure `require` is possible in `esm` file\" (#14110)"},{"Id":"2439608420","IsPullRequest":true,"CreatedAt":"2024-08-02T09:50:49","Actor":"philipp-spiess","Number":"14089","RawContent":null,"Title":"Add integration test setup and tests for the Vite integration","State":"closed","Body":"This PR adds a new root `/integrations` folder that will be the home of integration tests. The idea of these tests is to use Tailwind in various setups just like our users would (by only using the publishable npm builds). \r\n\r\nTo avoid issues with concurrent tests making changes to the file system, to make it very easy to test through a range of versions, and to avoid changing configuration objects over and over in test runs, we decided to inline the scaffolding completely into the test file and have no examples checked into the repo. \r\n\r\nHere's an example of how this can look like for a simple Vite test:\r\n\r\n```ts\r\ntest('works with production builds', {\r\n    fs: {\r\n      'package.json': json`\r\n        {\r\n          \"type\": \"module\",\r\n          \"dependencies\": {\r\n            \"@tailwindcss/vite\": \"workspace:^\",\r\n            \"tailwindcss\": \"workspace:^\"\r\n          },\r\n          \"devDependencies\": {\r\n            \"vite\": \"^5.3.5\"\r\n          }\r\n        }\r\n      `,\r\n      'vite.config.ts': ts`\r\n        import tailwindcss from '@tailwindcss/vite'\r\n        import { defineConfig } from 'vite'\r\n\r\n        export default defineConfig({\r\n          build: { cssMinify: false },\r\n          plugins: [tailwindcss()],\r\n        })\r\n      `,\r\n      'index.html': html`\r\n        <head>\r\n          <link rel=\"stylesheet\" href=\"./src/index.css\">\r\n        </head>\r\n        <body>\r\n          <div class=\"underline m-2\">Hello, world!</div>\r\n        </body>\r\n      `,\r\n      'src/index.css': css`\r\n        @import 'tailwindcss/theme' reference;\r\n        @import 'tailwindcss/utilities';\r\n      `,\r\n    },\r\n  },\r\n  async ({ fs, exec }) => {\r\n    await exec('pnpm vite build')\r\n\r\n    expect.assertions(2)\r\n    for (let [path, content] of await fs.glob('dist/**/*.css')) {\r\n      expect(path).toMatch(/\\.css$/)\r\n      expect(stripTailwindComment(content)).toMatchInlineSnapshot(\r\n        `\r\n        \".m-2 {\r\n          margin: var(--spacing-2, .5rem);\r\n        }\r\n\r\n        .underline {\r\n          text-decoration-line: underline;\r\n        }\"\r\n      `,\r\n      )\r\n    }\r\n  },\r\n)\r\n```\r\n\r\nBy defining all dependencies this way, we never have to worry about which fixtures are checked in and can more easily describe changes to the setup. \r\n\r\nFor ergonomics, we've also added the [`embed` prettier plugin](https://github.com/Sec-ant/prettier-plugin-embed). This will mean that files inlined in the `fs` setup are properly indented. No extra work needed! \r\n\r\nIf you're using VS Code, I can also recommend the [Language Literals](https://marketplace.visualstudio.com/items?itemName=sissel.language-literals) extension so that syntax highlighting also _just works_.\r\n\r\nA neat feature of inlining the scaffolding like this is to make it very simple to test through a variety of versions. For example, here's how we can set up a test against Vite 5 and Vite 4:\r\n\r\n```js\r\n;['^4.5.3', '^5.3.5'].forEach(viteVersion => {\r\n    test(`works with production builds for Vite ${viteVersion}`, {\r\n      fs: {\r\n        'package.json': json`\r\n          {\r\n            \"type\": \"module\",\r\n            \"devDependencies\": {\r\n              \"vite\": \"${viteVersion}\"\r\n            }\r\n          }\r\n        `,\r\n    async () => {\r\n      // Do something\r\n    },\r\n  )\r\n})\r\n```\r\n\r\n## Philosophy\r\n\r\nBefore we dive into the specifics, I want to clearly state the design considerations we have chosen for this new test suite:\r\n\r\n- All file mutations should be done in temp folders, nothing should ever mess with your working directory\r\n- Windows as a first-class citizen\r\n- Have a clean and simple API that describes the test setup only using public APIs\r\n- Focus on reliability (make sure cleanup scripts work and are tolerant to various error scenarios)\r\n- If a user reports an issue with a specific configuration, we want to be able to reproduce them with integration tests, no matter how obscure the setup (this means the test need to be in control of most of the variables)\r\n- Tests should be reasonably fast (obviously this depends on the integration. If we use a slow build tool, we can't magically speed it up, but our overhead should be minimal).\r\n\r\n## How it works\r\n\r\nThe current implementation provides a custom `test` helper function that, when used, sets up the environment according to the configuration. It'll create a new temporary directory and create all files, ensuring things like proper `\\r\\n` line endings on Windows. \r\n\r\nWe do have to patch the `package.json` specifically, since we can not use public versions of the tailwindcss packages as we want to be able to test against a development build. To make this happen, every `pnpm build` run now creates tarballs of the npm modules (that contain only the files that would also in the published build). We then patch the `package.json` to rewrite `workspace:^` versions to link to those tarballs. We found this to work reliably on Windows and macOS as well as being fast enough to not cause any issues. Furthermore we also decided to use `pnpm` as the version manager for integration tests because of it's global module cache (so installing `vite` is fast as soon as you installed it once).\r\n\r\nThe test function will receive a few utilities that it can use to more easily interact with the temp dir. One example is a `fs.glob` function that you can use to easily find files in eventual `dist/` directories or helpers around `spawn` and `exec` that make sure that processes are cleaned up correctly.\r\n\r\nBecause we use tarballs from our build dependencies, working on changes requires a workflow where you run `pnpm build` before running `pnpm test:integrations`. However it also means we can run clients like our CLI client with no additional overheadâ€”just install the dependency like any user would and set up your test cases this way.\r\n\r\n## Test plan\r\n\r\nThis PR also includes two Vite specific integration tests: One testing a static build (`pnpm vite build`) and one a dev mode build (`pnpm vite dev`) that also makes changes to the file system and asserts that the resources properly update.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14089","RelatedDescription":"Closed or merged PR \"Add integration test setup and tests for the Vite integration\" (#14089)"},{"Id":"2442822424","IsPullRequest":true,"CreatedAt":"2024-08-02T08:33:14","Actor":"philipp-spiess","Number":"14101","RawContent":null,"Title":"Upgrade vitest and remove bench script from CI","State":"closed","Body":"This PR updates vitest to v2. The changes are mostly around using fork instead of threads for how tests are run which should fix one of the issues we've found.\r\n\r\nEver since adding the unit tests on Windows, we started seeing occacional flags of vitest crashing with the following error:\r\n\r\n```\r\nâ€‰ELIFECYCLEâ€‰ Command failed with exit code 3221225477.\r\nError: Process completed with exit code 1.\r\n```\r\n\r\nWhen reading the [v2 changelog](https://github.com/vitest-dev/vitest/releases/tag/v2.0.0) we saw many bug fixes related to segfaulting so we believe this was the issue. \r\n\r\nWhen upgrading `vitest` alone, we got a bunch of dependency mismatches though (specifically, vite was installed two times with different peer dependencies for `@types/node` which causes our vite plugin's `Plugin` type to be different from the one in the vite playground. Yikes. These were eventually fixed by having pnpm create a new lockfile for us. So, unfortunatly this PR also bumps a bunch of patch versions for some transitive dependencies. Tests seem fine, though ðŸ¤ž \r\n\r\nThis PR also removes the `bench` script from CI. It doesn't give us value in its current state (since it's not reporting when performance regresses) but added a few seconds of unnecessary overhead to each test run.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14101","RelatedDescription":"Closed or merged PR \"Upgrade vitest and remove bench script from CI\" (#14101)"},{"Id":"2443371175","IsPullRequest":false,"CreatedAt":"2024-08-01T20:38:39","Actor":"KartoffelToby","Number":"14106","RawContent":null,"Title":"[v4] vite build --watch only compile html classes right on the init run","State":"open","Body":"\n\n**What version of Tailwind CSS are you using?**\n\nv4\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nPlain vite Projekt with css/html Input files in rollup config\n\n**What version of Node.js are you using?**\n\nv20.11.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nLinux Debian \n\n**Describe your issue**\n\nI have some css files ans HTML files. The HTML contains some tailwindcss classes like p-2 etc. If i run vite build --watch the first build is correct. And the p-2 css Definition is in the Output css. But if i change the classes in the HTML it recompiles but dont get the new classes. If i use @apply in my source css file the Compiler works every time. So must be a bug in the HTML stuff.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14106","RelatedDescription":"Open issue \"[v4] vite build --watch only compile html classes right on the init run\" (#14106)"},{"Id":"2443030664","IsPullRequest":false,"CreatedAt":"2024-08-01T18:24:11","Actor":"MarcyLina","Number":"14103","RawContent":null,"Title":"Font sizes are not rendering correctly in Chrome","State":"closed","Body":"This very well may be a Chrome issue. I'm on version 127 and macOS Sonoma.\r\n\r\nThe problem I've run into is that nothing smaller than `text-base` will render. Anything I have with the classes `text-sm` and `text-xs` show up as 1rem. Oddly the line-height _does_ work.\r\n\r\nOn my main page, I added some `<p>` tags to test other browsers using `text-xs`, `text-sm`, `text-base,` and `text-lg`. The screenshots are the results I got:\r\n\r\n**Chrome:**\r\n<img width=\"436\" alt=\"image\" src=\"https://github.com/user-attachments/assets/6f4829ae-cce0-4ac1-b574-a906f2fe9667\">\r\n\r\n**Firefox and Safari:**\r\n<img width=\"380\" alt=\"image\" src=\"https://github.com/user-attachments/assets/08c46cbc-8a4d-4164-8087-5bb4e04d404c\">\r\n\r\nI'm on a Laravel, Inertia, and Vue 3 build. All of those, and Tailwind are on the latest versions.\r\n\r\nI did see this issue  [#1402](https://github.com/tailwindlabs/tailwindcss/issues/1402) while searching for answers, which is fairly similar regarding font-weight and it turned out to be a Chrome bug, so I figured I'd post anyway to at least get some attention on the issue and perhaps have it reported to the folks at Chrome.\r\n</div>","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14103","RelatedDescription":"Closed issue \"Font sizes are not rendering correctly in Chrome\" (#14103)"},{"Id":"2440215719","IsPullRequest":false,"CreatedAt":"2024-08-01T16:39:16","Actor":"ottomated","Number":"14094","RawContent":null,"Title":"Individual transforms can't get converted to compatible syntax by lightningcss","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.18\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite@5.3.5\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.16.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome 103.0.5060.134 (OBS CEF)\r\n\r\n**What operating system are you using?**\r\n\r\nLinux\r\n\r\n**Reproduction URL**\r\n\r\n[LightningCSS](https://lightningcss.dev/playground/index.html#%7B%22minify%22%3Afalse%2C%22customMedia%22%3Atrue%2C%22cssModules%22%3Afalse%2C%22analyzeDependencies%22%3Afalse%2C%22targets%22%3A%7B%22chrome%22%3A6225920%7D%2C%22include%22%3A0%2C%22exclude%22%3A0%2C%22source%22%3A%22%2F*%20Current%20output%20*%2F%5Cn.translate-x-4%20%7B%5Cn%20%20--tw-translate-x%3A%20var(--spacing-4%2C%201rem)%3B%5Cn%20%20translate%3A%20var(--tw-translate-x)%20var(--tw-translate-y)%3B%5Cn%7D%5Cn%5Cn%2F*%20Can't%20just%20add%20transform%3A%20none%20*%2F%5Cn.also-broken%20%7B%5Cn%20%20transform%3A%20none%3B%5Cn%20%20--tw-translate-x%3A%20var(--spacing-4%2C%201rem)%3B%5Cn%20%20translate%3A%20var(--tw-translate-x)%20var(--tw-translate-y)%3B%5Cn%7D%5Cn%5Cn%2F*%20transform%20prop%20is%20required%20*%2F%5Cn.broken%20%7B%5Cn%20%20translate%3A%201rem%201rem%3B%5Cn%7D%5Cn%5Cn%2F*%20only%20case%20where%20it%20works%20*%2F%5Cn.works%20%7B%5Cn%20%20transform%3A%20none%3B%5Cn%20%20translate%3A%201rem%201rem%3B%5Cn%7D%22%2C%22visitorEnabled%22%3Afalse%2C%22visitor%22%3A%22%7B%5Cn%20%20Color(color)%20%7B%5Cn%20%20%20%20if%20(color.type%20%3D%3D%3D%20'rgb')%20%7B%5Cn%20%20%20%20%20%20color.g%20%3D%200%3B%5Cn%20%20%20%20%20%20return%20color%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22unusedSymbols%22%3A%5B%5D%2C%22version%22%3A%22local%22%7D)\r\n\r\n**Describe your issue**\r\n\r\nThe `translate` property (and other individual transforms) is [only supported in newer browsers](https://developer.mozilla.org/en-US/docs/Web/CSS/translate).\r\n\r\nPer https://github.com/parcel-bundler/lightningcss/issues/247, lightningcss does support converting `translate: ...;` into `transform: translate(...);`. However, it seems to have a few caveats - it needs a `transform` property in the same class, and it also doesn't seem to work when `var`s are used to define the parameters.\r\n\r\nThe v3 docs say:\r\n> While most of the features in Tailwind CSS will work in all modern browsers, Tailwind also includes APIs for several bleeding-edge features that arenâ€™t yet supported by all browsers, for example the `:focus-visible` pseudo-class and `backdrop-filter` utilities.\r\n\r\nIn my opinion, a common utility such as `transform` should be supported in all browsers - the lack of support blocks me from using v4 in any production applications.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14094","RelatedDescription":"Closed issue \"Individual transforms can't get converted to compatible syntax by lightningcss\" (#14094)"},{"Id":"2435495184","IsPullRequest":true,"CreatedAt":"2024-08-01T16:00:48","Actor":"RobinMalfait","Number":"14079","RawContent":null,"Title":"Add `@content` support to `tailwindcss`","State":"closed","Body":"This PR adds `@content` support to `tailwindcss`'s core package. We will handle the `@content` and call the `onContentPath` function when it's encountered.\r\n\r\nThe `@tailwindcss/cli`, `@tailwindcss/vite` and `@tailwindcss/postcss` packages have to implement the `onContentPath` such that the necessary globs are scanned and watchers should be setup with this information.\r\n\r\nExample usage:\r\n\r\n```css\r\n@content \"../../packages/my-sibling-package/src/components/*.tsx\";\r\n```\r\n\r\nIf you are in a monorepo setup, then you could point to other packages if you want. Another common use case is for Laravel projects if you want to point to Laravel blade files since they won't be covered by Vite's module graph:\r\n\r\n```css\r\n/* ./resources/css/app.css */\r\n@content \"../views/*.blade.php\"\r\n```\r\n\r\nNote: all globs are relative to the current file you are in.\r\n\r\n<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14079","RelatedDescription":"Closed or merged PR \"Add `@content` support to `tailwindcss`\" (#14079)"},{"Id":"2435599053","IsPullRequest":true,"CreatedAt":"2024-08-01T14:02:25","Actor":"thecrypticace","Number":"14081","RawContent":null,"Title":"Automate checksum generation for standalone CLI","State":"closed","Body":"We've done this manually until now which is _fine_ but not ideal so this PR automates it so it cannot be forgotten.\r\n\r\n@RobinMalfait do you know of a good way to test this w/o creating a tag? Should I add a `workflow_dispatch` trigger to the prepare release workflow?","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14081","RelatedDescription":"Closed or merged PR \"Automate checksum generation for standalone CLI\" (#14081)"},{"Id":"2441954851","IsPullRequest":true,"CreatedAt":"2024-08-01T09:37:40","Actor":"philipp-spiess","Number":"14099","RawContent":null,"Title":"Second branch to run 2 CI jobs concurrently ðŸ™ˆ","State":"closed","Body":"<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14099","RelatedDescription":"Closed or merged PR \"Second branch to run 2 CI jobs concurrently ðŸ™ˆ\" (#14099)"},{"Id":"2439722604","IsPullRequest":false,"CreatedAt":"2024-07-31T10:39:25","Actor":"hassanaitnacer","Number":"14091","RawContent":null,"Title":"Inverting light/dark scales without using :dark variant by playing with data-theme attribute or class name","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.18\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nRemix 2.9\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.10.0\r\n\r\n**What browser are you using?**\r\n\r\nFirefox\r\n\r\n**What operating system are you using?**\r\n\r\nNone. I am using a Linux distro.\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/jIhAOOOUUW?file=css\r\n\r\n**Describe your issue**\r\n\r\nHello everyone,\r\n\r\nI'm using the latest alpha version, and I need to have multiple scopes for color switching (e.g., having both dark sections and light sections within the same page). Iâ€™m using a third-party library that defines CSS variables (I do not have control over it, so I can not simply parse and tweak them. I am looking to an easy way). Look at the attached image to understand the issue:\r\n\r\n![Tailwind CSS Question](https://github.com/user-attachments/assets/e7802163-2c7a-4638-9571-20169a5ed999)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14091","RelatedDescription":"Open issue \"Inverting light/dark scales without using :dark variant by playing with data-theme attribute or class name\" (#14091)"},{"Id":"2437500301","IsPullRequest":true,"CreatedAt":"2024-07-30T16:05:14","Actor":"philipp-spiess","Number":"14085","RawContent":null,"Title":"Fix Windows tests for new postcss plugin","State":"closed","Body":"This PR fixes the new `postcss-fix-relative-paths` plugin for Windows paths. The issue was that we mixed Windows-style path separators from the absolute file paths with the Posix-style separators from globs. This caused the `dirname` functions to resolve to the wrong files.\r\n\r\nTo solve this, we now make the difference very clear by calling the content a `glob`. For globs, we always expect Posix-style path separators and for the case of making a glob absolute (by prefixing the directory), we now convert them into Posix-style explicitly.\r\n\r\nThis PR also fixes an issue where negative rules (e.g. `!./**/*.ts`) were not properly rewritten.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14085","RelatedDescription":"Closed or merged PR \"Fix Windows tests for new postcss plugin\" (#14085)"},{"Id":"2437541646","IsPullRequest":true,"CreatedAt":"2024-07-30T11:24:15","Actor":"philipp-spiess","Number":"14086","RawContent":null,"Title":"Run CI on any PR change","State":"closed","Body":"This changes the V4 CI to run on any pull request change (so an opened, reopened, and updated PR), regardless if the PR is directed into the `next` branch or not. \r\n\r\nThis is helpful for testing stacked PRs like: https://github.com/tailwindlabs/tailwindcss/pull/14078","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14086","RelatedDescription":"Closed or merged PR \"Run CI on any PR change\" (#14086)"},{"Id":"2435116352","IsPullRequest":true,"CreatedAt":"2024-07-29T11:04:41","Actor":"RobinMalfait","Number":"14078","RawContent":null,"Title":"Add `@source` support","State":"open","Body":"This PR is an umbrella PR where we will add support for `@source`. This will allow you to add explicit content globs if you want to look for Tailwind classes in other files that are not automatically detected yet.\r\n\r\nUsage example:\r\n\r\n```css\r\n/* ./src/input.css */\r\n@import \"tailwindcss\";\r\n@source \"../laravel/resources/views/**/*.blade.php\";\r\n@source \"../../packages/monorepo-package/**/*.js\";\r\n```\r\n\r\nPRs:\r\n\r\n- [x] https://github.com/tailwindlabs/tailwindcss/pull/14063\r\n- [x] https://github.com/tailwindlabs/tailwindcss/pull/14085\r\n- [x] https://github.com/tailwindlabs/tailwindcss/pull/14079\r\n- [x] https://github.com/tailwindlabs/tailwindcss/pull/14067\r\n- [x] https://github.com/tailwindlabs/tailwindcss/pull/14076\r\n- [x] https://github.com/tailwindlabs/tailwindcss/pull/14080\r\n- [x] https://github.com/tailwindlabs/tailwindcss/pull/14127\r\n\r\nOnce all the PRs are merged, then this umbrella PR can be merged. \r\n\r\n> [!IMPORTANT]  \r\n> Make sure to merge this without rebasing such that each individual PR ends up on the main branch.\r\n\r\n<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14078","RelatedDescription":"Open PR \"Add `@source` support\" (#14078)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-08-07T03:30:21.8784312Z","RunDurationInMilliseconds":395}