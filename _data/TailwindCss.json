{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2472171684","IsPullRequest":false,"CreatedAt":"2024-08-19T02:28:29","Actor":"benface","Number":"14218","RawContent":null,"Title":"Getting a stringified JS function in the CSS output with `matchUtilities` and `type: 'color'`","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nTailwind Play\r\n\r\n**What version of Node.js are you using?**\r\n\r\nTailwind Play\r\n\r\n**What browser are you using?**\r\n\r\nAll\r\n\r\n**What operating system are you using?**\r\n\r\nAll\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/1OtR3kLe72?file=config\r\n\r\n**Describe your issue**\r\n\r\nI am writing a custom plugin that generates color utilities, and I want it to support opacity modifiers like the core color plugins do. I found [this nice answer on how to do that](https://github.com/tailwindlabs/tailwindcss/discussions/12337#discussioncomment-7445342), but unfortunately I ran into an issue when combining it with [the trick to define colors with CSS variables](https://tailwindcss.com/docs/customizing-colors#using-css-variables). As you can see, the rule generated for `fade-red/50` looks as expected, but the `fade-red` class with no modifier generates this weird CSS:\r\n\r\n```css\r\n.fade-red {\r\n  --foo: ({opacityValue:e=1})=>t.replace(/<alpha-value>/g,e);\r\n}\r\n```\r\n\r\nThanks in advance!","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14218","RelatedDescription":"Closed issue \"Getting a stringified JS function in the CSS output with `matchUtilities` and `type: 'color'`\" (#14218)"},{"Id":"2472024031","IsPullRequest":true,"CreatedAt":"2024-08-18T15:24:57","Actor":"adamwathan","Number":"14217","RawContent":null,"Title":"Improve sorting of utilities that contain the same properties but one has more declarations than the other","State":"open","Body":"This PR improves our sorting algorithm to better handle situations where two utilities have the same set of unique properties but one has more total declarations than the other.\r\n\r\nThis is motivated by trying to better sort what were considered \"component classes\" in v3, because in v4 we're hoping to just call all of those things \"utilities\" and stick them in the same layer, relying on heuristic-based sorting to keep things working the same way they did for people in v3.\r\n\r\nSay we had a custom class that was similar to the `container` class from v3:\r\n\r\n```css\r\n@utility max-w-responsive {\r\n  @media (min-width: 640px) {\r\n    max-width: 640px;\r\n  }\r\n  @media (min-width: 768px) {\r\n    max-width: 768px;\r\n  }\r\n  @media (min-width: 1024px) {\r\n    max-width: 1024px;\r\n  }\r\n  @media (min-width: 1280px) {\r\n    max-width: 1280px;\r\n  }\r\n  @media (min-width: 1536px) {\r\n    max-width: 1536px;\r\n  }\r\n}\r\n```\r\n\r\nIf you use `max-w-responsive` and `max-w-md` on the same element, right now `max-w-responsive` would take precedence over `max-w-md` because they both only target the `max-width` property, so our current sorting algorithm falls back to sorting alphabetically based on the actual class name.\r\n\r\nThis PR adds one more check before alphabetical sorting, which is checking how many instances exist of each unique property in nodes being sorted.\r\n\r\nSo since `max-w-responsive` contains 5 `max-width` declarations and `max-w-md` only contains one, the sorting algorithm considers `max-w-md` to be a more \"specific\" utility than `max-w-responsive` and ensures that `max-w-md` takes precedence.\r\n\r\n**I'm opening this as a draft for now because I'm still not totally sure this is necessary** — the actual `container` class in v3 looks like this:\r\n\r\n```css\r\n.container {\r\n  width: 100%;\r\n  @media (min-width: 640px) {\r\n    max-width: 640px;\r\n  }\r\n  @media (min-width: 768px) {\r\n    max-width: 768px;\r\n  }\r\n  @media (min-width: 1024px) {\r\n    max-width: 1024px;\r\n  }\r\n  @media (min-width: 1280px) {\r\n    max-width: 1280px;\r\n  }\r\n  @media (min-width: 1536px) {\r\n    max-width: 1536px;\r\n  }\r\n}\r\n```\r\n\r\n…so it already includes two properties (notice `width` is there), which means it'll already be sorted before the `max-w-*` utilities.\r\n\r\nI'm also a bit nervous that this unique property counting approach is flawed when looking at things that use `@supports` with fallbacks.\r\n\r\nFor example of you had a `p-safe` utility that looked like this:\r\n\r\n```css\r\n@utility p-safe {\r\n  padding: auto;\r\n  @supports (padding: env(safe-area-inset-top, 20px)) {\r\n    padding: env(safe-area-inset-top, 20px) env(safe-area-inset-right, 20px) env(safe-area-inset-bottom, 20px) env(safe-area-inset-left, 20px);\r\n  }\r\n}\r\n```\r\n\r\n…that technically sets `padding` twice but it's not really the same as the `max-w-responsive` example because it's not trying to do more than one _thing_, it's just that it's declaring a fallback.\r\n\r\nSo I dunno, I think this is a pretty complicated one to think through and I'm kinda hoping we just don't need to think about it at all. But we already prototyped it last week, so I'm opening this as a point of discussion in case anyone has a clearer sense than me for whether we actually need to worry about this or not.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14217","RelatedDescription":"Open PR \"Improve sorting of utilities that contain the same properties but one has more declarations than the other\" (#14217)"},{"Id":"2471826477","IsPullRequest":false,"CreatedAt":"2024-08-18T11:20:36","Actor":"joutvhu","Number":"14214","RawContent":null,"Title":"The Tailwind's functions not working on Angular","State":"closed","Body":"File `tailwind.config.js`\r\n```js\r\n/** @type {import('tailwindcss').Config} */\r\nmodule.exports = {\r\n  content: [\r\n    './src/**/*.{html,ts,css,scss}',\r\n  ],\r\n  theme: {\r\n    container: {\r\n      center: true,\r\n    },\r\n    extend: {\r\n      colors: {\r\n        primary: '#ffab40',\r\n      },\r\n    },\r\n  },\r\n  plugins: [],\r\n}\r\n```\r\n\r\nFile `styles.scss`\r\n```scss\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n@debug #{theme('colors.primary')};\r\n@debug theme('colors.primary');\r\n@debug #{screen(sm)};\r\n@debug screen(sm);\r\n```\r\n\r\nOutput:\r\n```\r\nsrc\\styles.scss:5 DEBUG: theme(\"colors.primary\")\r\nsrc\\styles.scss:6 DEBUG: theme(\"colors.primary\")\r\nsrc\\styles.scss:7 DEBUG: screen(sm)\r\nsrc\\styles.scss:8 DEBUG: screen(sm)\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14214","RelatedDescription":"Closed issue \"The Tailwind's functions not working on Angular\" (#14214)"},{"Id":"2471643089","IsPullRequest":false,"CreatedAt":"2024-08-17T19:33:02","Actor":"MiguelG97","Number":"14212","RawContent":null,"Title":"referencing tailwind extended types in js with Nextjs framework","State":"open","Body":"\r\n**What version of Tailwind CSS are you using?**\r\n\r\n    \"tailwindcss\": \"^3.4.1\",\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\"next\": \"14.2.2\",\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.10.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n\r\n\r\n**Describe your issue**\r\n\r\nNextjs creates the default tailwind.config.ts file structure:\r\n```\r\nimport type { Config } from \"tailwindcss\";\r\n\r\nconst config: Config = {\r\n  content: [\r\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./modules/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\r\n  ],\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        ...\r\n      },\r\n    },\r\n  },\r\n  plugins: [],\r\n};\r\n\r\nexport default config;\r\n```\r\nHowever, when referencing the theme in another file through:\r\n```\r\nimport resolveConfig from \"tailwindcss/resolveConfig\";\r\nimport tailwindConfig from \"@/tailwind.config\";\r\nexport const themeTailwind = resolveConfig(tailwindConfig);\r\n```\r\nthe extended colors types are not loaded. \r\nIs this an expected behavior using the following syntax?\r\n`import type { Config } from \"tailwindcss\";`\r\n\r\nKind of annoying because I needed to do the following modification for types to work properly:\r\n```\r\n/** @type {import('tailwindcss').Config} */\r\nconst config = {...}\r\nexport default config;\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14212","RelatedDescription":"Open issue \"referencing tailwind extended types in js with Nextjs framework\" (#14212)"},{"Id":"2471549651","IsPullRequest":false,"CreatedAt":"2024-08-17T14:38:42","Actor":"mogeko","Number":"14211","RawContent":null,"Title":"[v4] It seems that Oxide can't work with CSS Modules","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n`v4.0.0-alpha.19`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite: `v5.4.1`, @tailwindcss/vite: `4.0.0-alpha.19`\r\n\r\n**What version of Node.js are you using?**\r\n\r\n`v22.6.0`\r\n\r\n**What browser are you using?**\r\n\r\nFirefox\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://stackblitz.com/edit/vitejs-vite-pzkrfk?file=src%2Fmain.ts\r\n\r\nBut it seems that [the node version of stackblitz](https://developer.stackblitz.com/codeflow/codeflow-faq#can-i-change-the-node-version) does not support TailwindCSS 4.0.\r\n\r\n**Describe your issue**\r\n\r\nI tried to use `prose.module.css`:\r\n\r\n```css\r\n@import '@fontsource-variable/fira-code' layer(base);\r\n\r\n@theme {\r\n  --font-family-mono: 'Fira Code Variable', ui-monospace, SFMono-Regular, Menlo,\r\n    Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;\r\n}\r\n\r\n.prose h1 {\r\n  @apply text-4xl font-[900] lg:text-5xl font-mono;\r\n}\r\n```\r\n\r\nBut it looks like `@apply...` It has not been compiled.  `globals.css` is worked.\r\n\r\n<img width=\"1116\" alt=\"截屏2024-08-17 22 29 51\" src=\"https://github.com/user-attachments/assets/8243c825-f31f-42f6-84ad-c730e5b82b29\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14211","RelatedDescription":"Open issue \"[v4] It seems that Oxide can't work with CSS Modules\" (#14211)"},{"Id":"2471529169","IsPullRequest":false,"CreatedAt":"2024-08-17T13:50:17","Actor":"rohit-ghoghari","Number":"14209","RawContent":null,"Title":"Dynamic Class Name Not Applying CSS on Front-End","State":"closed","Body":"\r\n// Fetching dynamic class not working in taiwind css\r\n\r\nRight now, I am working with my project laravel as backend and next.js (App router) as frontend technology. for frontend i have use taiwind css.\r\nI have some functionality in my project in which css need to dynamic assign from backend side and need to display in frontend side.\r\n\r\n\r\nThis is my about page:\r\n\r\nI have TRY IT in multiple ways:\r\n\r\n// ----------------------------------------First Option------------------------------------------------------------//\r\n\r\n\r\n// app/about.js\r\n\r\n/*\r\n\r\nIssue: Dynamic Class Name Not Applying CSS on Front-End\r\n\r\nDescription:\r\nWe are using a class name that is partially dynamic. The base part of the class name, \"text-\", is static, while the second part, \"green\", is dynamic and comes from a variable ${item.class}. The expected output is \"text-green\", but the CSS associated with this class is not being applied on the front-end.\r\n\r\nExample:\r\n\r\nlet colorClass = `text-${item.class}`; // where item.class could be 'green'\r\n\r\nExpected Output:\r\n\r\nThe class \"text-green\" should be applied to the element, but the corresponding CSS is not working as expected.\r\n\r\nQuestion:\r\nWhy is the \"text-green\" class not applying its CSS on the front-end, and how can we ensure that dynamically generated classes like this are correctly rendered with their associated styles?\r\n\r\n*/\r\n\r\nexport default async function About() {\r\n\t\r\n\t//API Call to get header icon data\r\n\t const res = await fetch('https://api.example.com/colour/data');\r\n\t const { icons } = res.data\r\n\r\n\t //icons data recieved\r\n\r\n\t const icons = [\r\n\t \t{\r\n\t \t\t'icon' : 'Bookmarks',\r\n\t \t\t'class' : 'green',\r\n\t \t},\r\n\t \t{\r\n\t \t\t'icon' : 'FilterIcon',\r\n\t \t\t'class' : 'blue',\r\n\t \t},\r\n\t \t{\r\n\t \t\t'icon' : 'ShareIcon',\r\n\t \t\t'class' : 'yellow',\r\n\t \t}\r\n\t ];\r\n\r\n\t  return (\r\n\t    <>\r\n\t      {/* Header icons */}\r\n\t      <div className=\"flex items-center gap-1\">\r\n\t        {icons && icons.map((item, index) => {\r\n\t            return (\r\n\t              <button\r\n\t                className={`text-${item.class} bg-${item.class}`}\r\n\t              >\r\n\t              <GlobalIcon value={item.icon} />\r\n\t              </button>\r\n\t            );\r\n\t          })}\r\n\t      </div>\r\n\t    </>\r\n\t  );\r\n};\r\n\r\n// tailwind.config.js\r\n\r\n\r\nconst { nextui } = require(\"@nextui-org/react\");\r\nmodule.exports = {\r\n  content: [\r\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}\",\r\n  ],\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        white: \"#ffffff\",\r\n        green: \"#189775\",\r\n        blue: \"#0000FF\",\r\n        yellow: \"#EFE89B\",\r\n      },\r\n\r\n      fontFamily: {\r\n        geist: [\r\n          \"geist\"\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  plugins: [\r\n    nextui({\r\n      layout: {\r\n        ariaLabel: \"NextUI Layout\",\r\n      },\r\n    }),\r\n  ],\r\n};\r\n\r\n\r\n\r\n// ----------------------------------------Second Option------------------------------------------------------------//\r\n\r\n\r\n/*\r\n\r\nIssue: Dynamic Color code Not Applying CSS on Front-End\r\n\r\nDescription:\r\nWe are using a Color code that is partially dynamic. The base part of the color code, \"text-\", is static, while the second part, \"#189775\", is dynamic and comes from a variable ${item.class}. The expected output is \"text-[#189775]\", but the CSS associated with this class is not being applied on the front-end.\r\n\r\nExample:\r\n\r\nlet colorClass = `text-[${item.class}]`; // where item.class could be 'green'\r\n\r\nExpected Output:\r\n\r\nThe class \"text-[#189775]\" should be applied to the element, but the corresponding CSS is not working as expected.\r\n\r\nQuestion:\r\nWhy is the \"text-[#189775]\" class not applying its CSS on the front-end, and how can we ensure that dynamically generated Color like this are correctly rendered with their associated styles?\r\n\r\n*/\r\n\r\n// app/about.js\r\n\r\n\r\n\r\nexport default async function About() {\r\n\t\r\n\t//API Call to get header icon data\r\n\t const res = await fetch('https://api.example.com/colour/data');\r\n\t const { icons } = res.data\r\n\r\n\t //icons data recieved\r\n\r\n\t const icons = [\r\n\t \t{\r\n\t \t\t'icon' : 'Bookmarks',\r\n\t \t\t'class' : '#189775',\r\n\t \t},\r\n\t \t{\r\n\t \t\t'icon' : 'FilterIcon',\r\n\t \t\t'class' : '#0000FF',\r\n\t \t},\r\n\t \t{\r\n\t \t\t'icon' : 'ShareIcon',\r\n\t \t\t'class' : '#EFE89B',\r\n\t \t}\r\n\t ];\r\n\r\n\t  return (\r\n\t    <>\r\n\t      {/* Header icons */}\r\n\t      <div className=\"flex items-center gap-1\">\r\n\t        {icons && icons.map((item, index) => {\r\n\t            return (\r\n\t              <button\r\n\t                className={`text-[${item.class}] bg-[${item.class}]`}\r\n\t              >\r\n\t              <GlobalIcon value={item.icon} />\r\n\t              </button>\r\n\t            );\r\n\t          })}\r\n\t      </div>\r\n\t    </>\r\n\t  );\r\n};\r\n\r\n// tailwind.config.js\r\n\r\n\r\nconst { nextui } = require(\"@nextui-org/react\");\r\nmodule.exports = {\r\n  content: [\r\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}\",\r\n  ],\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        white: \"#ffffff\",\r\n        green: \"#189775\",\r\n        blue: \"#0000FF\",\r\n        yellow: \"#EFE89B\",\r\n      },\r\n\r\n      fontFamily: {\r\n        geist: [\r\n          \"geist\"\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  plugins: [\r\n    nextui({\r\n      layout: {\r\n        ariaLabel: \"NextUI Layout\",\r\n      },\r\n    }),\r\n  ],\r\n};","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14209","RelatedDescription":"Closed issue \"Dynamic Class Name Not Applying CSS on Front-End\" (#14209)"},{"Id":"2470765417","IsPullRequest":true,"CreatedAt":"2024-08-16T18:33:38","Actor":"adamwathan","Number":"14207","RawContent":null,"Title":"Add support for the `theme()` function in the plugin API","State":"open","Body":"_Work in progress…_\r\n\r\nThis PR adds support for the [`theme()` function](https://tailwindcss.com/docs/plugins#dynamic-utilities) from the v3 plugin API, used for configuring which values functional utilities support:\r\n\r\n```js\r\nplugin(function({ matchUtilities, theme }) {\r\n  matchUtilities(\r\n    {\r\n      tab: (value) => ({\r\n        tabSize: value\r\n      }),\r\n    },\r\n    { values: theme('tabSize') }\r\n  )\r\n})\r\n```\r\n\r\nThings this handles:\r\n\r\n- \"Upgrading\" theme keys to their v4 names, so if you do `theme('colors')` that will correctly retrieve all the colors from the `--color-*` namespace with the new CSS variable based configuration\r\n- Polyfilling dependent keys, so `theme('backgroundColor')` will still pull everything in `--color-*` even though there is no values in the `backgroundColor` namespace in v4 by default\r\n- Polyfilling theme values that are now handled by \"bare values\" internally, so even though there is no `flexShrink` theme values in v4, `theme('flexShrink')` will still configure your plugin to properly support any value that the built-in `shrink-*` utilities support\r\n\r\nThings that aren't handled (yet?):\r\n\r\n- Theme values that have been replaced by static utilities can't be retrieved yet, so for example `theme('cursor')` returns nothing right now because there are no values for the `cursor-*` utilities in the theme anymore, they are all just baked in to the framework\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14207","RelatedDescription":"Open PR \"Add support for the `theme()` function in the plugin API\" (#14207)"},{"Id":"2468565028","IsPullRequest":false,"CreatedAt":"2024-08-16T17:42:05","Actor":"sntran","Number":"14202","RawContent":null,"Title":"`has-*` with relative selector produces wrong output","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\ntailwindcss v4.0.0-alpha.19\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`@tailwindcss/cli@4.0.0-alpha.19`\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.12.2\r\n\r\n**What browser are you using?**\r\n\r\nChrome version 127.0.6533.89 (Official Build) (arm64)\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS 14.5\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/eVAnr2RUDF\r\n\r\n**Describe your issue**\r\n\r\nElement with `has-[>img]:bg-red-500` should only have red background when it has an immediate child that is an `<img>`.\r\n\r\nHowever, the generated output is\r\n\r\n![image](https://github.com/user-attachments/assets/c3389c6e-b1cc-4e45-bedf-a2df50160cc5)\r\n\r\nWith `has-[&>img]:bg-red-500`, the outer container has red background, even though its immediate children is the one that has immediate `<img>`. The output of that is:\r\n\r\n![image](https://github.com/user-attachments/assets/628b1ed1-df24-480b-8d69-5d4f6bcb70ed)\r\n\r\nWhat I would expect it to output:\r\n\r\n```css\r\n.has-\\[\\>img\\]\\:bg-red-500 {\r\n  &:has(>img) {\r\n    background-color: var(--color-red-500, #ef4444);\r\n  }\r\n}\r\n```\r\n\r\nFor the case of `has-[&>img]:bg-red-500`, it should probably output the same as above, since `&>img` is not really a [relative selector](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors/Selector_structure#relative_selector)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14202","RelatedDescription":"Closed issue \"`has-*` with relative selector produces wrong output\" (#14202)"},{"Id":"2468891495","IsPullRequest":true,"CreatedAt":"2024-08-16T17:42:04","Actor":"adamwathan","Number":"14203","RawContent":null,"Title":"Don't wrap relative selectors in arbitrary variants with `:is(…)`","State":"closed","Body":"Prior to this PR, we weren't accounting for the fact that `:has(…)` supports [relative selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors/Selector_structure#relative_selector), which are sort of like partial selectors that can start with a combinator like `>`, `+`, or `~`.\r\n\r\nBefore, a class like `has-[>img]:flex` would generate this:\r\n\r\n```css\r\n.has-\\[\\>img\\]\\:flex:has(*:is(> img)) {\r\n  display: flex;\r\n}\r\n```\r\n\r\nThis was incorrect because `*:is(> img)` isn't even valid CSS at all, so the rule would do nothing.\r\n\r\nAfter this change, we generate this instead:\r\n\r\n```css\r\n.has-\\[\\>img\\]\\:flex:has(> img) {\r\n  display: flex;\r\n}\r\n```\r\n\r\nThis PR also ensures that relative selectors are recognized as invalid in places where they are not supported, so classes like `group-[>img]:flex` for example will produce nothing now instead of invalid CSS.\r\n\r\nThis is mostly a simple change but it did involve storing some additional information in the variant AST.\r\n\r\nFixes #14202.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14203","RelatedDescription":"Closed or merged PR \"Don't wrap relative selectors in arbitrary variants with `:is(…)`\" (#14203)"},{"Id":"2464408013","IsPullRequest":true,"CreatedAt":"2024-08-16T13:05:42","Actor":"RobinMalfait","Number":"14187","RawContent":null,"Title":"Improve Oxide scanner API","State":"closed","Body":"This PR updates the API for interacting with the Oxide API. Until now, we used the name `scanDir(…)` which is fine, but we do way more work right now.\r\n\r\nWe now have features such as:\r\n\r\n1. Auto source detection (can be turned off, e.g.: `@tailwindcss/vite` doesn't need it)\r\n2. Scan based on `@source`s found in CSS files\r\n3. Do \"incremental\" rebuilds (which means that the `scanDir(…)` result was stateful).\r\n\r\nTo solve these issues, this PR introduces a new `Scanner` class where you can pass in the `detectSources` and `sources` options. E.g.:\r\n\r\n```ts\r\nlet scanner = new Scanner({\r\n  // Optional, omitting `detectSources` field disables automatic source detection\r\n  detectSources: { base: __dirname }, \r\n\r\n  // List of glob entries to scan. These come from `@source` directives in CSS.\r\n  sources: [\r\n    { base: __dirname, pattern: \"src/**/*.css\" },\r\n    // …\r\n  ],\r\n});\r\n```\r\n\r\nThe scanner object has the following API:\r\n\r\n```ts\r\nexport interface ChangedContent {\r\n  /** File path to the changed file */\r\n  file?: string\r\n  /** Contents of the changed file */\r\n  content?: string\r\n  /** File extension */\r\n  extension: string\r\n}\r\nexport interface DetectSources {\r\n  /** Base path to start scanning from */\r\n  base: string\r\n}\r\nexport interface GlobEntry {\r\n  /** Base path of the glob */\r\n  base: string\r\n  /** Glob pattern */\r\n  pattern: string\r\n}\r\nexport interface ScannerOptions {\r\n  /** Automatically detect sources in the base path */\r\n  detectSources?: DetectSources\r\n  /** Glob sources */\r\n  sources?: Array<GlobEntry>\r\n}\r\nexport declare class Scanner {\r\n  constructor(opts: ScannerOptions)\r\n  scan(): Array<string>\r\n  scanFiles(input: Array<ChangedContent>): Array<string>\r\n  get files(): Array<string>\r\n  get globs(): Array<GlobEntry>\r\n}\r\n```\r\n\r\nThe `scanFiles(…)` method is used for incremental rebuilds. It takes the `ChangedContent` array for all the new/changes files. It returns whether we scanned any new candidates or not.\r\n\r\nNote that the `scanner` object is stateful, this means that we don't have to track candidates in a `Set` anymore. We can just call `getCandidates()` when we need it.\r\n\r\nThis PR also removed some unused code that we had in the `scanDir(…)` function to allow for sequential or parallel `IO`, and sequential or parallel `Parsing`. We only used the same `IO` and `Parsing` strategies for all files, so I just got rid of it.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14187","RelatedDescription":"Closed or merged PR \"Improve Oxide scanner API\" (#14187)"},{"Id":"2470220266","IsPullRequest":false,"CreatedAt":"2024-08-16T12:53:21","Actor":"aaronadamsCA","Number":"14205","RawContent":null,"Title":"[v4] Vite plugin breaks when setting `css.transformer` to `\"lightningcss\"`","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.19\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nVite 5.4.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\n20.16.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nUbuntu 22.04\r\n\r\n**Reproduction URL**\r\n\r\nLet me know if you need this and how you'd like it. [It works fine on Tailwind Play](https://play.tailwindcss.com/ViBCaGZhLm?file=css) but fails in Vite.\r\n\r\n**Describe your issue**\r\n\r\nWith a Vite config that specifies `\"lightningcss\"` as the CSS transformer:\r\n\r\n```ts\r\nimport tailwindcss from \"@tailwindcss/vite\";\r\nimport react from \"@vitejs/plugin-react\";\r\nimport { defineConfig } from \"vite\";\r\n\r\nexport default defineConfig({\r\n  css: {\r\n    transformer: \"lightningcss\",\r\n  },\r\n  plugins: [react(), tailwindcss()],\r\n});\r\n```\r\n\r\nThe behaviour of the Vite plugin is undefined and buggy.\r\n\r\nIt crashes when using `@apply` with class names containing characters `*` or `/`:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n\r\n@utility foo {\r\n  @apply text-3xl/tight;\r\n}\r\n```\r\n\r\n```\r\n12:44:49 PM [vite] Pre-transform error: Cannot apply unknown utility class: /\r\n12:44:49 PM [vite] Internal server error: Cannot apply unknown utility class: /\r\n  Plugin: @tailwindcss/vite:generate:serve\r\n  File: /workspace/packages/ui/src/tailwind.css\r\n      at onInvalidCandidate (file:///workspace/node_modules/.pnpm/tailwindcss@4.0.0-alpha.19/node_modules/tailwindcss/dist/lib.mjs:6:109810)\r\n...\r\n```\r\n\r\nIt pollutes the console with warnings:\r\n\r\n```\r\nError running vite:css on Tailwind CSS output. Skipping.\r\nError running vite:css on Tailwind CSS output. Skipping.\r\nError running vite:css on Tailwind CSS output. Skipping.\r\n```\r\n\r\nAnd it seems to ignore `@layer base` classes.\r\n\r\nYou can work around the problem by removing the offending part of the Vite config.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14205","RelatedDescription":"Open issue \"[v4] Vite plugin breaks when setting `css.transformer` to `\"lightningcss\"`\" (#14205)"},{"Id":"2469769918","IsPullRequest":false,"CreatedAt":"2024-08-16T10:26:27","Actor":"Burtonium","Number":"14204","RawContent":null,"Title":"Using rem values instead of px makes xs class override larger breakpoints","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v3.4.10\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/CAY0v1N8oa\r\n\r\n**Describe your issue**\r\n\r\nUsing something like \"xs:hidden md:block\" will stay hidden at the md: size for some reason when using rem values but not when using px.\r\n\r\n```\r\nmodule.exports = {\r\n  theme: {\r\n    extend: {\r\n      screens: {\r\n        xs: '32rem',\r\n        sm: '48rem',\r\n        md: '75rem',\r\n        lg: '92rem',\r\n        xl: '112rem',\r\n      },\r\n    },\r\n  },\r\n}\r\n\r\n\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14204","RelatedDescription":"Closed issue \"Using rem values instead of px makes xs class override larger breakpoints\" (#14204)"},{"Id":"2467586391","IsPullRequest":true,"CreatedAt":"2024-08-15T13:34:19","Actor":"mfeckie","Number":"14199","RawContent":null,"Title":"Add Glimmer template extensions to Oxide content detection","State":"closed","Body":"I recently watched the talk at [Tailwind Connect 2023](https://youtu.be/CLkxRnRQtDE) and was very interested in the idea that we'd no longer have to specify \"content\" and so was looking through the implementation.\r\n\r\nI noticed that currently it would not be able to support Ember.js next gen [templates](https://guides.emberjs.com/release/components/template-tag-format/) as the file extensions aren't listed (`gts` and `gjs`).\r\n\r\nI added them and then went to update the tests.\r\n\r\nWhen I did that, I noticed that it was hard to understand what was happening with the extensions as they weren't in alphabetical order (I suspect this is because of the FxHashMap algorithm), so I took the liberty of sorting the vec.\r\n\r\nSomething I may also have misunderstood is that the found extensions:\r\n\r\n```rust\r\n    let mut found_extensions = FxHashSet::from_iter(\r\n        include_str!(\"fixtures/template-extensions.txt\")\r\n            .trim()\r\n            .lines()\r\n            .filter(|x| !x.starts_with('#')) // Drop commented lines\r\n            .filter(|x| !x.is_empty()) // Drop empty lines\r\n            .map(|x| x.to_string()),\r\n    );\r\n```\r\n\r\nSeems to run each time the function is called. Perhaps this isn't a big performance penalty, but it seems like this could actually be done at compile time or via a `lazy_static` as it doesn't depend on any of the function's inputs, but wanted to check before considering updating that too.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14199","RelatedDescription":"Closed or merged PR \"Add Glimmer template extensions to Oxide content detection\" (#14199)"},{"Id":"2467543469","IsPullRequest":false,"CreatedAt":"2024-08-15T12:33:18","Actor":"xApep","Number":"14198","RawContent":null,"Title":"Custom BEM CSS classes not generated - randomly","State":"closed","Body":"hey!\r\n\r\nI have base.css with code:\r\n```\r\n@layer base {\r\n  .cards {\r\n    @apply px-4 md:mx-auto md:px-10 xl:px-16 xl:max-w-[1536px];\r\n\r\n    &--mobile-none {\r\n      @apply -mx-4 md:mx-0;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nwhich i import it in tailwind.css \r\n```\r\n@import 'tailwindcss/base';\r\n@import './base.css';\r\n@import 'tailwindcss/components';\r\n@import 'tailwindcss/utilities';\r\n```\r\n\r\nmy postcss.config.js\r\n```\r\nmodule.exports = {\r\n  plugins: {\r\n    'postcss-import': {},\r\n    'tailwindcss/nesting': {},\r\n    tailwindcss: {},\r\n    autoprefixer: {},\r\n  },\r\n}\r\n```\r\n\r\nNow the problem is that when I write some \"custom\" css components it happens that very randomly some classes, using BEM methodology it is just not generated.\r\n\r\nFew things to have in mind.\r\n- those css classes are set in CMS systems, so they never exist for tailwind content watch; but since classes are set in .css they should always be generated?\r\n- I have tried with or without adding *.css to \"content\" in tailwind settings, but problems are more or less always the same\r\n\r\nThe solution is, either I define some plain .html file, which tailwind \"content\" can watch, or if I define classes without BEM, so:\r\n```\r\n@layer base {\r\n  .cards--mobile-none {\r\n    @apply -mx-4 md:mx-0;\r\n  }\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14198","RelatedDescription":"Closed issue \"Custom BEM CSS classes not generated - randomly\" (#14198)"},{"Id":"2465852095","IsPullRequest":false,"CreatedAt":"2024-08-14T13:32:46","Actor":"iJuulia","Number":"14194","RawContent":null,"Title":"Please add a default aria attribute of `aria-current`","State":"closed","Body":"This is used in react-router-dom's <NavLink> to mark the current page. I believe it would be very useful for it to be a default modifier.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14194","RelatedDescription":"Closed issue \"Please add a default aria attribute of `aria-current`\" (#14194)"},{"Id":"2465325991","IsPullRequest":false,"CreatedAt":"2024-08-14T13:31:32","Actor":"arianshirepublik","Number":"14191","RawContent":null,"Title":"Scroll event flicker on position:sticky element in Safari iOS ","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n\"tailwindcss\": \"^3.4.4\",\r\n \"tailwindcss-animate\": \"^1.0.7\",\r\n\r\n\r\n```\r\n <header className=\"z-20 flex w-full top-0 grow-1 sticky bg-cool-gray-900\">\r\n        <div className=\"w-full h-full relative overflow-hidden safe-area-top\">\r\n       \r\n </header>\r\n```\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n Vite\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv21.6.2\r\n\r\n\r\n**What browser are you using?**\r\n\r\nOn Safari IOS\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS, Windows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://market.republik.gg/\r\n\r\n**Describe your issue**\r\n\r\nthe searchbar filter on market app uses position: sticky CSS on mobile view, so that it can be scrolled away when the user scrolls downwards (to minimise space)\r\n\r\non certain occasions, when the user scrolls up and down rapidly, the component will flicker. this is because the stickied element may or may not occupy space in the DOM, and it may switch between these two states rapidly\r\n\r\ni do not have a good recording of this issue currently, because it is difficult to replicate on demand. but it happens most often on iOS due to compatibility issues\r\n\r\ndocumentation of similar problems:\r\n[Shrinking sticky sticky header causes flicker in Blink/Webkit at certain scroll positions](https://stackoverflow.com/questions/69855309/shrinking-sticky-sticky-header-causes-flicker-in-blink-webkit-at-certain-scroll) \r\n[Sticky Header Blinking - CSS-Tricks](https://css-tricks.com/forums/topic/sticky-header-blinking/)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14191","RelatedDescription":"Closed issue \"Scroll event flicker on position:sticky element in Safari iOS \" (#14191)"},{"Id":"2464006640","IsPullRequest":true,"CreatedAt":"2024-08-13T20:16:49","Actor":"thecrypticace","Number":"14185","RawContent":null,"Title":"Bump versions of plugins in the Standalone CLI","State":"closed","Body":"This PR updates the plugins built into the standalone CLI. The bundled versions here are several versions behind (whoops).","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14185","RelatedDescription":"Closed or merged PR \"Bump versions of plugins in the Standalone CLI\" (#14185)"},{"Id":"2463809790","IsPullRequest":true,"CreatedAt":"2024-08-13T16:57:57","Actor":"lukewarlow","Number":"14183","RawContent":null,"Title":"Add `scrollbar-width` utilities","State":"open","Body":"<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n\r\n# What?\r\n\r\nThis PR adds 3 new utilities for styling the width of scrollbars.\r\n\r\n`scrollbar-width-auto` - For resetting a scrollbar to full-width, useful for overriding the other two*.\r\n\r\n`scrollbar-thin` - For setting the [`scrollbar-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-width) property to `thin`, which normally results in a thinner scrollbar.\r\n\r\n`scrollbar-none` - For setting the [`scrollbar-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-width) property to `none`, which hides the scrollbar. This utility also includes a fallback to the legacy `::-webkit-scrollbar { display: none; }`. Read about `::-webkit-scrollbar` [here](https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbar).\r\n\r\n* - I think `scrollbar-none` might take precendence over `scrollbar-width-auto` in WebKit (and chromium) browsers because the `::-webkit-scrollbar` rule beats the `scrollbar-width: auto` rule.\r\n\r\n# Why?\r\n\r\nStyling of scrollbars is a long requested feature. See https://github.com/tailwindlabs/tailwindcss/discussions?discussions_q=is%3Aopen+scrollbar for a list of discussions requesting utilities for scrollbar styling.\r\n\r\nThis PR would be an initial step in that direction allowing authors to hide scrollbars (while maintaining the ability to scroll) in UIs where that is needed.\r\n\r\nThe naming of `scrollbar-width-auto` is different because the auto value is used across 3 separate scrollbar properties ([`scrollbar-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-width), [`scrollbar-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-color) and [`scrollbar-gutter`](https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-gutter). We could keep this inconsistency, change all values to be `scrollbar-width-X`, or we could drop the auto utility?\r\n\r\n`scrollbar-width` has 71% support according to [caniuse](https://caniuse.com/mdn-css_properties_scrollbar-width). Though this and [`scrollbar-gutter`](https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-gutter) are part of Interop 2024 and the `scrollbar-width` property is [enabled](https://bugs.webkit.org/show_bug.cgi?id=277518) on WebKit trunk so should be supported in Safari soon ™️.\r\n\r\nDue to the currently limited support mentioned above the `scrollbar-none` utility includes the `::-webkit-scrollbar` fallback to maximise Browser compatability including the fallback brings that utility up to 100% of the supported Tailwind browsers. \r\n\r\nSee https://github.com/tailwindlabs/tailwindcss/pull/5732 for a previous attempt at contributing this. No worries if the Tailwind team still aren't ready for scrollbar styling, but given the change in browser support status of this API, I thought I'd give it another go.\r\n\r\nIf the team are open to these contributions I'd happily also open one for `scrollbar-gutter` and even `scrollbar-color` (might need some API discussions but see https://github.com/tailwindlabs/tailwindcss/discussions/5751 for an initial idea)","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14183","RelatedDescription":"Open PR \"Add `scrollbar-width` utilities\" (#14183)"},{"Id":"2463651207","IsPullRequest":false,"CreatedAt":"2024-08-13T16:43:26","Actor":"sntran","Number":"14181","RawContent":null,"Title":"[v4] Border with arbitrary color using `var`","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.18\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`@tailwindcss/cli`\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.12.2\r\n\r\n**What browser are you using?**\r\n\r\nChrome version 127.0.6533.89 (Official Build) (arm64)\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS 14.5\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/fCI06uutZE\r\n\r\n**Describe your issue**\r\n\r\nWhen setting a one-off border width with custom properties, Tailwind sees that as arbitrary value for color, not width.\r\n\r\nExpected:\r\n\r\n```html\r\nborder-b-[var(--spacing-4)]\r\n``` \r\n\r\noutputs to \r\n\r\n```css\r\n.border-b-\\[var\\(--spacing-4\\)\\] {\r\n    border-bottom-width: var(--spacing-4);\r\n}\r\n```\r\n\r\nActual:\r\n\r\n```css\r\n.border-b-\\[var\\(--spacing-4\\)\\] {\r\n    border-bottom-color: var(--spacing-4);\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14181","RelatedDescription":"Closed issue \"[v4] Border with arbitrary color using `var`\" (#14181)"},{"Id":"2463682148","IsPullRequest":true,"CreatedAt":"2024-08-13T16:12:19","Actor":"RobinMalfait","Number":"14182","RawContent":null,"Title":"Bump GitHub actions to latest version","State":"closed","Body":"This PR bumps the versions of common GitHub workflows to the latest version.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14182","RelatedDescription":"Closed or merged PR \"Bump GitHub actions to latest version\" (#14182)"},{"Id":"2463607373","IsPullRequest":false,"CreatedAt":"2024-08-13T15:43:52","Actor":"PatrykKuniczak","Number":"14180","RawContent":null,"Title":"[BUG] Not clean old classes on --watch rebuild","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v3.4.9\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example:\r\nhttps://github.com/PatrykKuniczak/tw-reproduce/blob/main/package.json\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v20.11.1\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome (Latest)\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: Windows 11\r\n\r\n**Reproduction URL**\r\n\r\n[A Tailwind Play link or public GitHub repo that includes a minimal reproduction of the bug. **Please do not link to your actual project**, what we need instead is a _minimal_ reproduction in a fresh project without any unnecessary code. This means it doesn't matter if your real project is private/confidential, since we want a link to a separate, isolated reproduction anyways.\r\n](https://github.com/PatrykKuniczak/tw-reproduce)\r\n\r\n**Describe your issue**\r\n\r\nRun ```npm dev``` for reproduce, what's on video.\r\n\r\nhttps://github.com/user-attachments/assets/e221f7d7-6f1c-478f-b9ca-29aaad214c96\r\n\r\nAs you can see, --watch flag works well, but it leaves unnecessary old classes in output file.\r\nI think it checks only, if class don't exists yet and create it, or even don't check nothing, overwrite file with brute force :)\r\n\r\nI was used this classes, only once:\r\n\r\n![image](https://github.com/user-attachments/assets/88843fc7-0ee5-4000-8d4d-d0ed414f7af3)\r\n\r\n![image](https://github.com/user-attachments/assets/f4775595-456b-4c74-8b52-e1a6202d26ff)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14180","RelatedDescription":"Closed issue \"[BUG] Not clean old classes on --watch rebuild\" (#14180)"},{"Id":"2461678937","IsPullRequest":true,"CreatedAt":"2024-08-13T14:25:30","Actor":"thecrypticace","Number":"14173","RawContent":null,"Title":"Add support for the `tailwindcss/plugin` export","State":"closed","Body":"This PR adds support for the `tailwindcss/plugin` import which has historically been used to define custom plugins:\r\n\r\n```js\r\nimport plugin from \"tailwindcss/plugin\";\r\n\r\nexport default plugin(function ({ addBase }) {\r\n  addBase({\r\n    // ...\r\n  });\r\n});\r\n```\r\n\r\nThis also adds support for `plugin.withOptions` which was used to define plugins that took optional initilization options when they were registered in your `tailwind.config.js` file:\r\n\r\n```js\r\nimport plugin from \"tailwindcss/plugin\";\r\n\r\nexport default plugin.withOptions((options = {}) => {\r\n  return function ({ addBase }) {\r\n    addBase({\r\n      // ...\r\n    });\r\n  };\r\n});\r\n```\r\n\r\nWe've stubbed out support for the `config` argument but we're not actually doing anything with it at the time of this PR. The scope of this PR is just to allow people to create plugins that currently work using the raw function syntax but using the `plugin` and `plugin.withOptions` APIs. Support for `config` will land separately.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14173","RelatedDescription":"Closed or merged PR \"Add support for the `tailwindcss/plugin` export\" (#14173)"},{"Id":"2462663524","IsPullRequest":false,"CreatedAt":"2024-08-13T13:45:13","Actor":"Matheun","Number":"14174","RawContent":null,"Title":"[V4] Postcss: Top-level selectors may not contain the parent selector \"&\".","State":"closed","Body":"**Tailwind version:**\r\nv4.0.0-alpha.19\r\n\r\n**Framework/ build tools:**\r\nNuxt 3.12.3, postcss, sass 1.77.8\r\n\r\n**Relevant Nuxt config:**\r\n```ts\r\nimport { fileURLToPath } from \"node:url\";\r\nimport { dirname, join } from \"node:path\";\r\n\r\nconst currentDir = dirname(fileURLToPath(import.meta.url));\r\n\r\nexport default defineNuxtConfig({\r\n    typescript: {\r\n        includeWorkspace: true,\r\n    },\r\n\r\n    css: [join(currentDir, \"./assets/scss/vendors/tailwind.scss\")],\r\n\r\n    postcss: {\r\n        plugins: {\r\n            \"@tailwindcss/postcss\": {},\r\n            \"postcss-custom-media\": {},\r\n        },\r\n    },\r\n    ...\r\n});\r\n\r\n```\r\n\r\n**Issue:**\r\nThe following error gets thrown:\r\n```bash\r\nError: Top-level selectors may not contain the parent selector \"&\".\r\n```\r\n\r\nThe code snippit thats causing this issue is the following:\r\n```scss\r\n@utility button {\r\n    ...\r\n    @supports selector(:focus-visible) {\r\n        &:focus-visible { // <-- this line\r\n            ...\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis issue still exists when refactoring the code like so:\r\n```scss\r\n@utility button {\r\n    ...\r\n    &:focus-visible { // <-- this line\r\n        ...\r\n    }\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14174","RelatedDescription":"Closed issue \"[V4] Postcss: Top-level selectors may not contain the parent selector \"&\".\" (#14174)"},{"Id":"2463358454","IsPullRequest":true,"CreatedAt":"2024-08-13T13:28:11","Actor":"philipp-spiess","Number":"14177","RawContent":null,"Title":"Add `theme()` function ","State":"open","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14177","RelatedDescription":"Open PR \"Add `theme()` function \" (#14177)"},{"Id":"2461625296","IsPullRequest":true,"CreatedAt":"2024-08-12T18:44:45","Actor":"thecrypticace","Number":"14172","RawContent":null,"Title":"Add support for `addBase` in plugins","State":"closed","Body":"This PR adds support for `addBase` in JS plugins which adds styles into the CSS base layer using `@layer base`. This exists for backwards compatibility with v3 but is not something we will encourage people to use going forward — in v4 it's better to just write these styles in a CSS file.\r\n\r\nIn v3, `@layer base` was something we compiled away and was only used for determining where to add some styles in the final CSS, but in v4 we are using native CSS layers. This means that `addBase` in v4 expects you to have a _real_ `@layer base` in your final CSS, which you will have as long as you are using `@import \"tailwindcss\"` to add Tailwind to your project.\r\n\r\nNow something like this works:\r\n```js\r\nfunction ({ addBase }) {\r\n  addBase({\r\n    'h1': { fontSize: '2em' },\r\n    'h2': { fontSize: '1.5em' },\r\n  })\r\n}\r\n```\r\n\r\nWhich will emit the following CSS:\r\n```css\r\n@layer base {\r\n  h1 {\r\n    font-size: 2em;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1.5em;\r\n  }\r\n}\r\n```\r\n\r\nThe only limitation compared to v3 is that there is no way for you to wrap these styles in another custom layer.\r\n\r\nIn v3 you could do this:\r\n\r\n```css\r\n@layer my-base {\r\n  @tailwind base;\r\n}\r\n```\r\n\r\n…and then anything you added with `addBase` would end up exactly where `@tailwind base` was in your source CSS.\r\n\r\nBut in v4 there is no `@tailwind base`, so there's no way to wrap these styles in `@layer my-base` like in the example above. All base styles added by plugins are simply appended to the end of the stylesheet but wrapped in `@layer base` so they behave as if they are co-located with other base styles.\r\n\r\nOdds of this impacting anyone are extremely low, but if it proves to be an actual issue I think we could output these styles at the location of an optional `@tailwind base` rule if we detect it exists.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14172","RelatedDescription":"Closed or merged PR \"Add support for `addBase` in plugins\" (#14172)"},{"Id":"2460436987","IsPullRequest":true,"CreatedAt":"2024-08-12T09:37:45","Actor":"philipp-spiess","Number":"14171","RawContent":null,"Title":"Fix Rust build by passing through RUSTUP_HOME variable","State":"closed","Body":"While rebasing on the latest changes on `next`, especially #14160, I noticed that my local `pnpm build` step was no longer working and erring with the following:\r\n\r\n```\r\n│ > @tailwindcss/oxide@4.0.0-alpha.19 build /Users/philipp/dev/tailwindcss/crates/node\r\n│ > npx napi build --platform --release --no-const-enum\r\n│\r\n│ Type Error: Could not parse the Cargo.toml: Error: Command failed: cargo metadata --format-version 1 --manifest-path \"/Users/philipp/dev/\r\n│ tailwindcss/crates/node/Cargo.toml\"\r\n│ error: rustup could not choose a version of cargo to run, because one wasn't specified explicitly, and no default is configured.\r\n│ help: run 'rustup default stable' to download the latest stable release of Rust and set it as your default toolchain.\r\n│\r\n│ error: rustup could not choose a version of cargo to run, because one wasn't specified explicitly, and no default is configured.\r\n│ help: run 'rustup default stable' to download the latest stable release of Rust and set it as your default toolchain.\r\n```\r\n\r\nIt turns out that with the changes in turbo v2, env variables no longer propagate to the individual tasks automatically but since I installed rustup outside of the default `~/.rustup` directory, the task was no longer able to find it.\r\n\r\nTo fix this, we now define `RUSTUP_HOME` as a global env to always pass through.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14171","RelatedDescription":"Closed or merged PR \"Fix Rust build by passing through RUSTUP_HOME variable\" (#14171)"},{"Id":"2459598171","IsPullRequest":false,"CreatedAt":"2024-08-11T13:40:13","Actor":"batazor","Number":"14169","RawContent":null,"Title":" Can't resolve 'tailwindcss/plugin'","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n\"tailwindcss\": \"4.0.0-alpha.19\"\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: Next.js 14/15\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v22.4.1\r\n\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n\r\n**Describe your issue**\r\n\r\nIs there a missing package or an error somewhere else? I couldn't find this library on npm","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14169","RelatedDescription":"Closed issue \" Can't resolve 'tailwindcss/plugin'\" (#14169)"},{"Id":"2459155410","IsPullRequest":true,"CreatedAt":"2024-08-10T16:29:09","Actor":"github834541","Number":"14168","RawContent":null,"Title":"Update README.md","State":"closed","Body":"Update README to better understanding","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14168","RelatedDescription":"Closed or merged PR \"Update README.md\" (#14168)"},{"Id":"2458288857","IsPullRequest":true,"CreatedAt":"2024-08-09T17:57:16","Actor":"RobinMalfait","Number":"14167","RawContent":null,"Title":"Fix v4 release workflow","State":"closed","Body":"This PR fixes the release workflow\r\n\r\n- We added a postbuild step so that any arguments/flags passed to the `pnpm run build` command are forwarded to the underlying command.\r\n- We made sure that we run any `pnpm` specific flags before the actual command\r\n- Cleaned up the CI workflow a bit\r\n\r\n<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14167","RelatedDescription":"Closed or merged PR \"Fix v4 release workflow\" (#14167)"},{"Id":"2458271998","IsPullRequest":true,"CreatedAt":"2024-08-09T16:29:13","Actor":"github834541","Number":"14166","RawContent":null,"Title":"Update README.md","State":"closed","Body":"change title to better understanding\r\n\r\n<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14166","RelatedDescription":"Closed or merged PR \"Update README.md\" (#14166)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-08-19T03:30:21.6879402Z","RunDurationInMilliseconds":452}