{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"1345585997","IsPullRequest":false,"CreatedAt":"2022-08-21T20:33:54","Actor":"anwarulislam","Number":"9153","RawContent":null,"Title":"Ability to replace/remove all prefix from files","State":"closed","Body":"### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/9152\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **anwarulislam** August 22, 2022</sup>\r\nHi, this would be interesting if we could replace/remove all prefixes after changing the prefix from our tailwind config. This can be helpful for those who started using tailwind with other frameworks using prefixes not to overlap with others and later refactored their codebase. transformed all code to tailwind. And then they need to replace/remove all prefix from classes in their codebase. as using prefix creates lots of noise in the code. and repetitive use of the prefix</div>","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9153","RelatedDescription":"Closed issue \"Ability to replace/remove all prefix from files\" (#9153)"},{"Id":"1345579227","IsPullRequest":false,"CreatedAt":"2022-08-21T20:14:41","Actor":"oosswwaalldd","Number":"9151","RawContent":null,"Title":"\"items-center\" and  \"justify-center\"","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.1.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: postcss-cli 8.3.1, Next.js 10.0.9, webpack 5.28.0\r\npostcss: 8.4.12\r\nnext: 12.0.9\r\n\r\n**What version of Node.js are you using?**\r\n\r\nNodeJS v16.14.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Describe your issue**\r\n\r\n\"items-center\" and  \"justify-center\" do not work when using them in a simple div. To see the issue do this:\r\n\r\n```\r\n<div class=\"flex flex-col justify-center items-center\">I am Centered</div>\r\n```\r\n\r\nThe words are not centered in a column flex way.\r\n\r\nI reverted to v3.0.23 and it works as expected","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9151","RelatedDescription":"Closed issue \"\"items-center\" and  \"justify-center\"\" (#9151)"},{"Id":"1345570822","IsPullRequest":true,"CreatedAt":"2022-08-21T19:26:58","Actor":"ottoszika","Number":"9150","RawContent":null,"Title":"Add stretch utility for width, height and min/max","State":"closed","Body":"Hello,\r\n\r\nThis PR adds h-stretch, min-h-stretch, max-h-stretch, w-stretch, min-w-stretch, and max-w-stretch utilities.\r\n\r\nThe autoprefixer will take care of vendor prefixing and will generate the following CSS:\r\n```css\r\nheight: -webkit-fill-available;\r\nheight: -moz-available;\r\nheight: stretch;\r\n```\r\n\r\nThanks,\r\nOtto","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9150","RelatedDescription":"Closed or merged PR \"Add stretch utility for width, height and min/max\" (#9150)"},{"Id":"1345408810","IsPullRequest":true,"CreatedAt":"2022-08-21T13:37:46","Actor":"theMosaad","Number":"9147","RawContent":null,"Title":"Remove invalid `.outline-hidden` utility","State":"closed","Body":"This invalid CSS value was added in https://github.com/tailwindlabs/tailwindcss/pull/5887\r\nCannot find any references to it in the [CSS spec](https://developer.mozilla.org/en-US/docs/Web/CSS/outline-style)","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9147","RelatedDescription":"Closed or merged PR \"Remove invalid `.outline-hidden` utility\" (#9147)"},{"Id":"1345422230","IsPullRequest":false,"CreatedAt":"2022-08-21T11:22:07","Actor":"asertym","Number":"9148","RawContent":null,"Title":"PostCSS doesn't work with tailwind","State":"closed","Body":"**Tailwind version:** \r\n`v3.0.23`\r\n\r\n**Build tools:**\r\n```\r\ngulp: 4.0.2\r\ngulp-postcss: 9.0.1\r\npostcss: 8.4.16\r\nnode: 12.22.9\r\n```\r\n\r\nOS: Ubuntu\r\n\r\n**Description**\r\nI started getting this error on a project that worked fine just a couple of months ago, is this issue related to tailwind? I tried posting this over at postcss repo but I haven't received a response so far.\r\n\r\n```\r\ngulp-notify: [gulp error in gulp-postcss] Error in plugin \"gulp-postcss\"\r\nMessage:\r\n    ENOENT: no such file or directory, stat 'src/assets/styles/style.css'\r\nDetails:\r\n    errno: -2\r\n    syscall: stat\r\n    code: ENOENT\r\n    path: src/assets/styles/style.css\r\n    fileName: src/assets/styles/style.css\r\n\r\nStack:\r\nError: ENOENT: no such file or directory, stat 'src/assets/styles/style.css'\r\n    at Object.statSync (fs.js:1016:3)\r\n    at trackModified (node_modules/tailwindcss/lib/lib/setupContextUtils.js:468:46)\r\n    at Object.getContext (node_modules/tailwindcss/lib/lib/setupContextUtils.js:858:5)\r\n    at node_modules/tailwindcss/lib/lib/setupTrackingContext.js:39:53\r\n    at node_modules/tailwindcss/lib/processTailwindFeatures.js:38:11\r\n    at plugins (node_modules/tailwindcss/lib/index.js:33:58)\r\n    at LazyResult.runOnRoot (node_modules/postcss/lib/lazy-result.js:339:16)\r\n    at LazyResult.runAsync (node_modules/postcss/lib/lazy-result.js:393:26)\r\n    at LazyResult.async (node_modules/postcss/lib/lazy-result.js:221:30)\r\n    at LazyResult.then (node_modules/postcss/lib/lazy-result.js:206:17)\r\n```\r\n\r\nHere's my task:\r\n\r\n```\r\ngulp.task(\"styles\", function () {\r\n  const stylesPath = PATH.assets + PATH.styles;\r\n  return gulp\r\n    .src(PATH.source + stylesPath + '**/*.scss') // source\r\n    .pipe(changed(PATH.source + stylesPath + '**/*.scss')) // source\r\n    .pipe(sourcemaps.init())\r\n    .pipe(sass({\r\n        includePaths: ['node_modules'],\r\n        errLogToConsole: true,\r\n        outputStyle: \"compressed\",\r\n      }).on('error', sass.logError))\r\n    .pipe(postcss())\r\n    .pipe(sourcemaps.write(PATH.maps))\r\n    .pipe(gulp.dest(PATH.build + stylesPath)) // output\r\n    .pipe(browser.stream());\r\n});\r\n```\r\n\r\nHere's my postcss config: \r\n\r\n```\r\nmodule.exports = {\r\n    plugins: [\r\n        require(\"postcss-import\"),\r\n        require(\"tailwindcss\"),\r\n        require(\"autoprefixer\"),\r\n    ],\r\n};\r\n```\r\n\r\nIf I comment tailwind in `postcss.config.js` then compile works, otherwise I get the error above. Thanks in advance for any help!","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9148","RelatedDescription":"Closed issue \"PostCSS doesn't work with tailwind\" (#9148)"},{"Id":"1344803678","IsPullRequest":false,"CreatedAt":"2022-08-19T19:02:06","Actor":"gsmeira","Number":"9143","RawContent":null,"Title":"variable colors with <alpha-value> not working with theme function on plugins","State":"open","Body":"I'm trying to create a plugin for Tailwind 3.1.8, but when I use variables on colors with the new syntax - `rgb(var(--primary) / <alpha-value>)` - the color stop working. \r\n\r\nI created an example on [https://play.tailwindcss.com/2apCJBfHdC](https://play.tailwindcss.com/2apCJBfHdC)\r\n\r\nRemoving the `/ <alpha-value>` from the color value make things work again.\r\n\r\nI'm doing something wrong?\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9143","RelatedDescription":"Open issue \"variable colors with <alpha-value> not working with theme function on plugins\" (#9143)"},{"Id":"1344762024","IsPullRequest":true,"CreatedAt":"2022-08-19T18:13:17","Actor":"depfu[bot]","Number":"9142","RawContent":null,"Title":"Update cssnano: 5.1.12 → 5.1.13 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n#### ✳️ cssnano (5.1.12 → 5.1.13) · [Repo](https://github.com/cssnano/cssnano) · [Changelog](https://github.com/cssnano/cssnano/blob/master/packages/cssnano/CHANGELOG.md)\n\n\n<details>\n<summary>Release Notes</summary>\n\n<h4>5.1.13 (from changelog)</h4>\n<blockquote><h3 dir=\"auto\">\n<a href=\"#patch-changes\"></a>Patch Changes</h3>\n<ul dir=\"auto\">\n<li>fix(cssnano): correct return type of cssnano() call</li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/cssnano/feedback\">Please let us know.</a></em></p>\n</details>\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9142","RelatedDescription":"Closed or merged PR \"Update cssnano: 5.1.12 → 5.1.13 (patch)\" (#9142)"},{"Id":"1343510462","IsPullRequest":true,"CreatedAt":"2022-08-19T10:32:18","Actor":"wongjn","Number":"9136","RawContent":null,"Title":"Implement negative outline offsets","State":"closed","Body":"Implementation of https://github.com/tailwindlabs/tailwindcss/discussions/9128","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9136","RelatedDescription":"Closed or merged PR \"Implement negative outline offsets\" (#9136)"},{"Id":"1343776459","IsPullRequest":false,"CreatedAt":"2022-08-19T00:45:39","Actor":"LeptoFlare","Number":"9138","RawContent":null,"Title":"Arbitrary selectors do not work with the group- selector","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\nv3.1.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\nnext v12.2.4\r\n\r\n\r\n**What browser are you using?**\r\n\r\nFirefox\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/v4zwsTiLaY\r\n\r\n**Describe your issue**\r\n\r\nHello, as the title says, I'm unable to use arbitrary variants with the group- selector.\r\n\r\n```jsx\r\n                  <DropdownMenu.Item key={status} className=\"group\">\r\n                    <div className=\"flex items-center gap-3 rounded-md px-3 py-2 group-[&[data-highlighted]]:bg-primary-700\">\r\n                      <div className={parsed.classes}>{parsed.icon}</div>\r\n                      <div className=\"\">{parsed.text}</div>\r\n                    </div>\r\n                  </DropdownMenu.Item>\r\n```\r\n\r\nAs you can see, I'm trying to use the `[&[data-highlighted]]:` arbitrary selector, and I've added `group-` to the start of it to target the parent element.\r\n\r\nI've tested whether the `group` attribute works as intended with `group-hover` and whether the `[&[data-highlighted]]` works on it's own on the level above. Both of these work so I am sure that it's an issue with it combined together.\r\n\r\nI've also tried putting `group-` inside of the arbitrary selector such as: `[group-&[data-highlighted]]` which does not work.\r\n\r\n---\r\n\r\nThis is my first time creating a bug report like this so sorry if I messed something up 😅 ","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9138","RelatedDescription":"Closed issue \"Arbitrary selectors do not work with the group- selector\" (#9138)"},{"Id":"1343689963","IsPullRequest":false,"CreatedAt":"2022-08-18T22:26:26","Actor":"abdulmejidshemsu","Number":"9137","RawContent":null,"Title":"Expected a backslash preceding the semicolon.","State":"closed","Body":"resources/css/app.css","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9137","RelatedDescription":"Closed issue \"Expected a backslash preceding the semicolon.\" (#9137)"},{"Id":"1343247301","IsPullRequest":false,"CreatedAt":"2022-08-18T15:17:21","Actor":"zachrickards","Number":"9132","RawContent":null,"Title":"Media Queries not working","State":"closed","Body":"Here is a set of code that isn't working due to !important on the flex class and not on the internal media query:\r\n\r\n```\r\n<div class=\"flex flex-wrap sm:flex-nowrap content-center\">\r\n   <div>text</div>\r\n   <div>text 2</div>\r\n</div>\r\n```\r\n\r\nThis results in \r\n\r\nflex-wrap being !important and always overriding the media query of flex-nowrap\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9132","RelatedDescription":"Closed issue \"Media Queries not working\" (#9132)"},{"Id":"1342066922","IsPullRequest":false,"CreatedAt":"2022-08-17T17:29:37","Actor":"johansmitsnl","Number":"9123","RawContent":null,"Title":"--2022-08-17: not found","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n`v3.1.8` / `https://github.com/tailwindlabs/tailwindcss/releases/download/v3.1.8/tailwindcss-linux-x64`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`tailwindcss-linux-x64`\r\n\r\n**What version of Node.js are you using?**\r\n\r\n`v16.0.0`\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nDebian Testing\r\n\r\n**Describe your issue**\r\n\r\n```sh\r\nwget https://github.com/tailwindlabs/tailwindcss/releases/download/v3.1.8/tailwindcss-linux-x64 -o ~/bin/tailwindcss\r\nchmod +x ~/bin/tailwindcss\r\ntailwindcss -i style/main.scss -o static/main.css --minify\r\n```\r\n\r\nError output:\r\n```\r\n/home/user/bin/tailwindcss: 1: --2022-08-17: not found\r\n/home/user/bin/tailwindcss: 2: Syntax error: \"(\" unexpected\r\n```\r\n\r\n`style/main.scss`\r\n```scss\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n.background-radial-gradient {\r\n  background-color: hsl(72, 56%, 51%);\r\n  background-image: radial-gradient(650px circle at 0% 0%,\r\n          hsl(72, 41%, 35%) 15%,\r\n          hsl(72, 41%, 30%) 35%,\r\n          hsl(72, 41%, 20%) 75%,\r\n          hsl(72, 41%, 19%) 80%,\r\n          transparent 100%),\r\n  radial-gradient(1250px circle at 100% 100%,\r\n                  hsl(72, 41%, 45%) 15%,\r\n                  hsl(72, 41%, 30%) 35%,\r\n                  hsl(72, 41%, 20%) 75%,\r\n                  hsl(72, 41%, 19%) 80%,\r\n                  transparent 100%);\r\n}\r\n```\r\n\r\n`tailwind.config.js`\r\n```js\r\n/** @type {import('tailwindcss').Config} */\r\nmodule.exports = {\r\n  content: [\"./**/*.html\"],\r\n  theme: {\r\n    extend: {},\r\n  },\r\n  plugins: [\r\n    require('@tailwindcss/forms'),\r\n    require('@tailwindcss/typography'),\r\n  ],\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9123","RelatedDescription":"Closed issue \"--2022-08-17: not found\" (#9123)"},{"Id":"1341417633","IsPullRequest":false,"CreatedAt":"2022-08-17T11:03:36","Actor":"kien-pham","Number":"9118","RawContent":null,"Title":"Tailwind CSS v2.x doesn't work with CRA TypeScript","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\nv2.2.16\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\ncreate react app (Typescript)\r\n\"autoprefixer\": \"^9.8.7\",\r\n\"postcss\": \"^7.0.38\",\r\npostcss7-compat@^2.2.16\r\ncraco: \"^6.1.1\",\r\n\r\n**What version of Node.js are you using?**\r\nv14.x\r\n\r\n**What browser are you using?**\r\nChrome, Edge, Safari\r\n\r\n**What operating system are you using?**\r\nmacOS\r\n\r\n**Describe your issue**\r\nI have an old project with create react app, I installed TailwindCss v2.2.16 as this docs https://v2.tailwindcss.com/docs/guides/create-react-app\r\n\r\nBut styles/classes don't apply to my project. I have tried to search here, stackoverflow... tried many other ways but it doesn't work. So I hope you can help me there. Below are my config files:\r\n\r\n**package.json**\r\n\r\n```\r\n{\r\n  \"name\": \"web-frontend\",\r\n  \"version\": \"0.1.0\",\r\n  \"private\": true,\r\n  \"dependencies\": {\r\n    \"@babel/core\": \"^7.13.14\",\r\n    \"@babel/preset-env\": \"^7.13.12\",\r\n    \"@craco/craco\": \"^6.1.1\",\r\n    \"@ctrl/react-adsense\": \"^1.3.1\",\r\n    \"@fvilers/disable-react-devtools\": \"^1.2.1\",\r\n    \"@greatsumini/react-facebook-login\": \"^2.1.0\",\r\n    \"@headlessui/react\": \"^0.3.2\",\r\n    \"@material-ui/core\": \"^4.11.3\",\r\n    \"@testing-library/jest-dom\": \"^5.11.10\",\r\n    \"@testing-library/react\": \"^11.2.6\",\r\n    \"@testing-library/user-event\": \"^12.8.3\",\r\n    \"@types/jest\": \"^26.0.22\",\r\n    \"@types/node\": \"^12.20.7\",\r\n    \"@types/react\": \"^17.0.3\",\r\n    \"@types/react-dom\": \"^17.0.3\",\r\n    \"@types/react-select\": \"^4.0.15\",\r\n    \"@types/styled-components\": \"^5.1.9\",\r\n    \"axios\": \"^0.21.4\",\r\n    \"bad-words\": \"^3.0.4\",\r\n    \"chart.js\": \"^3.2.1\",\r\n    \"classnames\": \"^2.3.1\",\r\n    \"craco-plugin-scoped-css\": \"^1.1.1\",\r\n    \"emoji-picker-react\": \"^3.4.8\",\r\n    \"file-saver\": \"^2.0.5\",\r\n    \"formik\": \"^2.2.6\",\r\n    \"material-table\": \"^1.69.2\",\r\n    \"moment\": \"^2.29.4\",\r\n    \"react\": \"^17.0.2\",\r\n    \"react-chartjs-2\": \"^3.0.3\",\r\n    \"react-dom\": \"^17.0.2\",\r\n    \"react-facebook-login\": \"^4.1.1\",\r\n    \"react-feather\": \"^2.0.9\",\r\n    \"react-ga\": \"^3.3.0\",\r\n    \"react-ga4\": \"^1.0.4\",\r\n    \"react-google-login\": \"^5.2.2\",\r\n    \"react-google-recaptcha\": \"^2.1.0\",\r\n    \"react-headroom\": \"^3.1.1\",\r\n    \"react-helmet\": \"^6.1.0\",\r\n    \"react-iframe\": \"^1.8.0\",\r\n    \"react-images\": \"^1.2.0-beta.7\",\r\n    \"react-infinite-scroll-component\": \"^6.1.0\",\r\n    \"react-insta-stories\": \"^2.2.3\",\r\n    \"react-lazyload\": \"^3.2.0\",\r\n    \"react-photo-gallery\": \"^8.0.0\",\r\n    \"react-player\": \"^2.9.0\",\r\n    \"react-redux\": \"^7.2.3\",\r\n    \"react-responsive\": \"^9.0.0-beta.3\",\r\n    \"react-router-dom\": \"^5.2.0\",\r\n    \"react-scripts\": \"4.0.3\",\r\n    \"react-select\": \"^4.3.0\",\r\n    \"react-share\": \"^4.4.0\",\r\n    \"react-slick\": \"^0.28.1\",\r\n    \"react-swipeable\": \"^6.2.0\",\r\n    \"react-visibility-sensor\": \"^5.1.1\",\r\n    \"redux-persist\": \"^6.0.0\",\r\n    \"redux-thunk\": \"^2.3.0\",\r\n    \"slick-carousel\": \"^1.8.1\",\r\n    \"styled-components\": \"^5.3.0\",\r\n    \"typescript\": \"^4.2.3\",\r\n    \"web-vitals\": \"^1.1.1\",\r\n    \"yup\": \"^0.32.9\"\r\n  },\r\n  \"scripts\": {\r\n    \"start\": \"craco start\",\r\n    \"build\": \"GENERATE_SOURCEMAP=false craco build\",\r\n    \"test\": \"craco test\",\r\n    \"eject\": \"react-scripts eject\"\r\n  },\r\n  \"eslintConfig\": {\r\n    \"extends\": [\r\n      \"react-app\",\r\n      \"react-app/jest\"\r\n    ]\r\n  },\r\n  \"browserslist\": {\r\n    \"production\": [\r\n      \">0.2%\",\r\n      \"not dead\",\r\n      \"not op_mini all\"\r\n    ],\r\n    \"development\": [\r\n      \"last 1 chrome version\",\r\n      \"last 1 firefox version\",\r\n      \"last 1 safari version\"\r\n    ]\r\n  },\r\n  \"devDependencies\": {\r\n    \"@tailwindcss/postcss7-compat\": \"^2.2.16\",\r\n    \"@types/bad-words\": \"^3.0.1\",\r\n    \"@types/file-saver\": \"^2.0.2\",\r\n    \"@types/react-facebook-login\": \"^4.1.3\",\r\n    \"@types/react-google-recaptcha\": \"^2.1.0\",\r\n    \"@types/react-headroom\": \"^2.2.1\",\r\n    \"@types/react-helmet\": \"^6.1.1\",\r\n    \"@types/react-lazy-load-image-component\": \"^1.5.2\",\r\n    \"@types/react-lazyload\": \"^3.1.1\",\r\n    \"@types/react-router-dom\": \"^5.1.7\",\r\n    \"@types/react-slick\": \"^0.23.5\",\r\n    \"@types/simple-react-lightbox\": \"^3.6.1\",\r\n    \"autoprefixer\": \"^9.8.7\",\r\n    \"postcss\": \"^7.0.38\",\r\n    \"tailwind-scrollbar\": \"^1.3.1\",\r\n    \"tailwindcss\": \"npm:@tailwindcss/postcss7-compat@^2.2.16\"\r\n  }\r\n}\r\n```\r\n\r\n**tailwind.config.js**\r\n```\r\nmodule.exports = {\r\n  purge: ['./src/**/*.{js,jsx,ts,tsx}', './public/index.html'],\r\n  darkMode: 'class', // or 'media' or 'class'\r\n  important: true,\r\n  theme: {\r\n    inset: {\r\n      '-22': '-5.5rem',\r\n      '-999': '-999em'\r\n    },\r\n    backgroundColor: {\r\n      'twitter': '#00acee',\r\n      'sameBg': '#f0f2f5',\r\n      \"darkBg\": '#19191a',\r\n      \"darkSection\": '#242525',\r\n      \"darkArrow\": '#3a3a3a',\r\n      \"darkDialog\": '#272727',\r\n      'footerNavActive': '#323232'\r\n    },\r\n    textColor: {\r\n      'darkText': \"#e8edf2\"\r\n    },\r\n    gradientColorStops: {\r\n      'blue-logo': '#1a8ef8',\r\n      'purple-logo': '#7e3bfd',\r\n      'pink-logo': '#df67fd',\r\n      \"darkSection\": '#242525',\r\n    },\r\n    zIndex: {\r\n      '60': 60,\r\n      '8888': 8888,\r\n      '9999': 9999,\r\n      '99999': 99999,\r\n      '10k': 999999\r\n    },\r\n    flex: {\r\n      '50': '42%',\r\n      '700': '1 1 700px',\r\n      '400': '0 0 400px',\r\n      '11a': '1 1 auto',\r\n      '0024': '0 0 24px'\r\n\r\n    },\r\n    width: {\r\n      '400px': '400px',\r\n      '500px': '500px',\r\n      '26': '6.6rem',\r\n      '22': '5.7rem',\r\n      'videoFeed': '400px',\r\n      'videoFeedIP': '335px'\r\n    },\r\n    height: {\r\n      '15': '3.7rem',\r\n      '26': '6.6rem',\r\n      '22': '5.7rem',\r\n      '30': '30rem'\r\n    },\r\n    maxWidth: {\r\n      'musicText': '15rem',\r\n      'mobileDesc': '19rem'\r\n    },\r\n    maxHeight: {\r\n      'videoFeed': '40rem'\r\n    },\r\n    boxShadow: {\r\n      'box': '0 2px 4px #e9edf0',\r\n      'none': 'none',\r\n    },\r\n    borderColor: theme => ({\r\n      ...theme('colors'),\r\n      'footerNav': '#e5e7eb',\r\n    }),\r\n    animation: {\r\n      'spin-slow': 'spin 4s linear infinite'\r\n    },\r\n    extend: {\r\n      gridTemplateRows: {\r\n        '8': 'repeat(8, minmax(0, 1fr))',\r\n      },\r\n      spacing: {\r\n        'dwnbtn': '7.5rem',\r\n      }\r\n\r\n    },\r\n  },\r\n  variants: {\r\n    extend: {\r\n      borderWidth: ['dark', 'first'],\r\n      borderColor: ['dark'],\r\n      boxShadow: ['dark'],\r\n      divideColor: ['dark'],\r\n      display: ['dark'],\r\n      opacity: ['dark', 'disabled'],\r\n      inset: ['dark'],\r\n      borderOpacity: ['active'],\r\n    },\r\n    scrollbar: ['dark']\r\n  },\r\n  plugins: [\r\n    require('tailwind-scrollbar')\r\n  ],\r\n}\r\n```\r\n\r\n**craco.config.js**\r\n```\r\nmodule.exports = {\r\n    style: {\r\n        postcss: {\r\n            plugins: [\r\n                require('tailwindcss'),\r\n                require('autoprefixer'),\r\n            ],\r\n        },\r\n    },\r\n...\r\n```\r\n\r\n**index.css** has been import these and index.js also import this index.css file\r\n```\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n```\r\n\r\nThank you for your help","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9118","RelatedDescription":"Closed issue \"Tailwind CSS v2.x doesn't work with CRA TypeScript\" (#9118)"},{"Id":"1337995475","IsPullRequest":false,"CreatedAt":"2022-08-15T18:43:42","Actor":"kerberjg","Number":"9093","RawContent":null,"Title":"Sibling selectors of components don't work on classes applying them","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v3.1.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nTailwind Play\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/Gd9jsdpkCi?file=css\r\n\r\n**Describe your issue**\r\n\r\nWhen applying custom components to selectors with a sibling operator, the output CSS does not apply to them properly. For example, with the following code\r\n\r\n```css\r\n@layer components {\r\n    .row.row-odd {\r\n        @apply bg-green-400;\r\n    }\r\n    .row.row-even {\r\n        @apply bg-red-400;\r\n    }\r\n    .row-odd + .row-even {\r\n        @apply bg-blue-400;\r\n    }\r\n    .row-even + .row-odd {\r\n        @apply bg-yellow-400;\r\n    }\r\n}\r\n\r\nsection:nth-of-type(odd) { @apply row row-odd; }\r\nsection:nth-of-type(even) { @apply row row-even; }\r\n```\r\n\r\n...should output something similar to:\r\n\r\n```css\r\nsection:nth-of-type(odd) + section:nth-of-type(even) { background: blue; }\r\nsection:nth-of-type(even) + section:nth-of-type(odd) { background: yellow; }\r\n```\r\n\r\n...and yet it only outputs:\r\n\r\n```css\r\nsection:nth-of-type(odd) + .row-even { background: blue; }\r\n.row-odd + .section:nth-of-type(even) { background: blue; }\r\nsection:nth-of-type(even) + .row-odd { background: yellow; }\r\n.row-even + section:nth-of-type(odd) { background: yellow; }\r\n```\r\n\r\nIt also seems that when declaring composite rules (multiple classes, such as `.row.row-odd`) this breaks during compilation when applying it to a tag instead of a class, resulting in rules such as `.rowsection` (with no separator, which makes no sense) as a result of the following code:\r\n\r\n```css\r\n@layer components {\r\n    .row.row-odd {\r\n        @apply bg-green-400;\r\n    }\r\n}\r\n\r\nsection {\r\n    @apply row-odd;\r\n}\r\n```\r\n\r\nBoth behaviors are observable in the output of the Tailwind Play document I linked","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9093","RelatedDescription":"Closed issue \"Sibling selectors of components don't work on classes applying them\" (#9093)"},{"Id":"1339167639","IsPullRequest":true,"CreatedAt":"2022-08-15T18:43:41","Actor":"thecrypticace","Number":"9107","RawContent":null,"Title":"Fix `@apply` selector rewriting when multiple classes are involved","State":"closed","Body":"This PR fixes two problems when using `@apply`:\r\n\r\n1. Incorrect placement of element selectors when multiple classes are joined in a selector\r\n\r\nGiven:\r\n```css\r\n.foo.bar { color: red; }\r\nsection { @apply bar; }\r\n```\r\n\r\nWe would naively replace the .bar portion with `section` producing `.foosection` which is obviously wrong. This did _not_ happen when applying `foo` because this simple replacement produced something that happened to be correct `section.bar`.\r\n\r\n2. ~Only replacing the first occurrence of a candidate in a selector:~ (reverted due to this not being 100% correct either)\r\n\r\nGiven:\r\n```css\r\n.foo + .foo { color: red; }\r\nsection { @apply foo; }\r\n```\r\n\r\nWe would produce:\r\n```css\r\nsection + .foo { color: red; }\r\n```\r\n\r\nThis is not correct because the `foo` class may not even _exist_ at all if `.foo + .foo` is defined in the `components` or `utilities` layers.\r\n\r\nFixes #9093\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9107","RelatedDescription":"Closed or merged PR \"Fix `@apply` selector rewriting when multiple classes are involved\" (#9107)"},{"Id":"1337661531","IsPullRequest":true,"CreatedAt":"2022-08-15T17:45:02","Actor":"thecrypticace","Number":"9088","RawContent":null,"Title":"Add future flag to disable color opacity utility plugins","State":"closed","Body":"Since we have the opacity modifier syntax these are no longer necessary and this will become the default in Tailwind CSS v4.0\r\n\r\nIf you need to be able to control the opacity independently from the color channels you have two options:\r\n\r\n\r\n1. Use the opacity modifier syntax with CSS variables (recommended):\r\n```html\r\n<div class=\"bg-blue-200/[var(--bg-opacity)] text-blue-900/[var(--text-opacity)]\" style=\"--text-opacity: 0.75; --bg-opacity: 0.25;\">Test</div>\r\n```\r\n\r\n2. Re-enable the appropriate `corePlugin` in your config file:\r\n```js\r\ncorePlugins: {\r\n  backgroundOpacity: true,\r\n  textOpacity: true,\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9088","RelatedDescription":"Closed or merged PR \"Add future flag to disable color opacity utility plugins\" (#9088)"},{"Id":"1338731828","IsPullRequest":false,"CreatedAt":"2022-08-15T09:31:12","Actor":"NhaPCS","Number":"9102","RawContent":null,"Title":"I use px-5 and px-10 at same class but px-10 is not applied","State":"closed","Body":"### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/9101\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **NhaPCS** August 15, 2022</sup>\r\nHi, I haven't gotten this issue before, my code is not changed, but in some way, I use `px-5` and `px-10` in the same class (please check the photo below). \r\n\r\nThe `px-10` should be overrides `px-5` but it's not. It overrides before.\r\n\r\n<img width=\"473\" alt=\"Screen Shot 2022-08-15 at 16 02 54\" src=\"https://user-images.githubusercontent.com/9054422/184608021-7210b8b0-1ac0-4601-88b1-85c9f4e13f27.png\">\r\n\r\nHas anyone face this issue before? \r\nThanks for your help!</div>","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9102","RelatedDescription":"Closed issue \"I use px-5 and px-10 at same class but px-10 is not applied\" (#9102)"},{"Id":"1338056355","IsPullRequest":true,"CreatedAt":"2022-08-13T20:59:43","Actor":"depfu[bot]","Number":"9095","RawContent":null,"Title":"Update eslint: 8.20.0 → 8.21.0 (minor)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n#### ✳️ eslint (8.20.0 → 8.21.0) · [Repo](https://github.com/eslint/eslint) · [Changelog](https://github.com/eslint/eslint/blob/main/CHANGELOG.md)\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/eslint/eslint/releases/tag/v8.21.0\">8.21.0</a></h4>\n\n<blockquote><h2 dir=\"auto\">Features</h2>\n<ul dir=\"auto\">\n<li>\n<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/commit/7b43ea14a8af5fc3dbac38fa9d5bc71741328c16\"><code class=\"notranslate\">7b43ea1</code></a> feat: Implement FlatESLint (<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/pull/16149\">#16149</a>) (Nicholas C. Zakas)</li>\n<li>\n<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/commit/92bf49a4b39dde728fbc6d348e62c7009e21cf7d\"><code class=\"notranslate\">92bf49a</code></a> feat: improve the key width calculation in <code class=\"notranslate\">key-spacing</code> rule (<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/pull/16154\">#16154</a>) (Nitin Kumar)</li>\n<li>\n<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/commit/c4615421cb4825e2ad22e275ec9439756d56299c\"><code class=\"notranslate\">c461542</code></a> feat: add new <code class=\"notranslate\">allowLineSeparatedGroups</code> option to the <code class=\"notranslate\">sort-keys</code> rule (<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/pull/16138\">#16138</a>) (Nitin Kumar)</li>\n<li>\n<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/commit/1cdcbca8a961a057a9db40df412f249545befe2b\"><code class=\"notranslate\">1cdcbca</code></a> feat: add deprecation warnings for legacy API in <code class=\"notranslate\">RuleTester</code> (<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/pull/16063\">#16063</a>) (Nitin Kumar)</li>\n</ul>\n<h2 dir=\"auto\">Bug Fixes</h2>\n<ul dir=\"auto\">\n<li>\n<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/commit/03967755270ae28eec651281c50b6990d3983f48\"><code class=\"notranslate\">0396775</code></a> fix: lines-around-comment apply <code class=\"notranslate\">allowBlockStart</code> for switch statements (<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/pull/16153\">#16153</a>) (Nitin Kumar)</li>\n</ul>\n<h2 dir=\"auto\">Documentation</h2>\n<ul dir=\"auto\">\n<li>\n<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/commit/2aadc93272f1ab7f40246c6b18c4056660f2b3a2\"><code class=\"notranslate\">2aadc93</code></a> docs: add anchors to headings inside docs content (<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/pull/16134\">#16134</a>) (Strek)</li>\n</ul>\n<h2 dir=\"auto\">Chores</h2>\n<ul dir=\"auto\">\n<li>\n<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/commit/889251194867b1f394c571a5982249329fa44cfd\"><code class=\"notranslate\">8892511</code></a> chore: Upgrade to Espree 9.3.3 (<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/pull/16173\">#16173</a>) (Brandon Mills)</li>\n<li>\n<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/commit/1233beea3938fc4234c8f75917776832226fc3c8\"><code class=\"notranslate\">1233bee</code></a> chore: switch to eslint-plugin-node's maintained fork (<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/pull/16150\">#16150</a>) (唯然)</li>\n<li>\n<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/commit/97b95c068d5b35fae68ca919257b61430271ac76\"><code class=\"notranslate\">97b95c0</code></a> chore: upgrade puppeteer v13 (<a href=\"https://bounce.depfu.com/github.com/eslint/eslint/pull/16151\">#16151</a>) (唯然)</li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/eslint/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/eslint/eslint/compare/0bcd2255c40b5c115a95181864776b0dd456c2dc...9c53ed40255f7913cfb68cec32cba38d11fbc5b2\">See the full diff on Github</a>. The new version differs by 11 commits:</p>\n<ul>\n<li><a href=\"https://github.com/eslint/eslint/commit/9c53ed40255f7913cfb68cec32cba38d11fbc5b2\"><code>8.21.0</code></a></li>\n<li><a href=\"https://github.com/eslint/eslint/commit/fd404a5cb35cdee2e809082c3be0837746aa4110\"><code>Build: changelog update for 8.21.0</code></a></li>\n<li><a href=\"https://github.com/eslint/eslint/commit/7b43ea14a8af5fc3dbac38fa9d5bc71741328c16\"><code>feat: Implement FlatESLint (#16149)</code></a></li>\n<li><a href=\"https://github.com/eslint/eslint/commit/889251194867b1f394c571a5982249329fa44cfd\"><code>chore: Upgrade to Espree 9.3.3 (#16173)</code></a></li>\n<li><a href=\"https://github.com/eslint/eslint/commit/92bf49a4b39dde728fbc6d348e62c7009e21cf7d\"><code>feat: improve the key width calculation in `key-spacing` rule (#16154)</code></a></li>\n<li><a href=\"https://github.com/eslint/eslint/commit/c4615421cb4825e2ad22e275ec9439756d56299c\"><code>feat: add new `allowLineSeparatedGroups` option to the `sort-keys` rule (#16138)</code></a></li>\n<li><a href=\"https://github.com/eslint/eslint/commit/1cdcbca8a961a057a9db40df412f249545befe2b\"><code>feat: add deprecation warnings for legacy API in `RuleTester` (#16063)</code></a></li>\n<li><a href=\"https://github.com/eslint/eslint/commit/03967755270ae28eec651281c50b6990d3983f48\"><code>fix: lines-around-comment apply `allowBlockStart` for switch statements (#16153)</code></a></li>\n<li><a href=\"https://github.com/eslint/eslint/commit/2aadc93272f1ab7f40246c6b18c4056660f2b3a2\"><code>docs: add anchors to headings inside docs content (#16134)</code></a></li>\n<li><a href=\"https://github.com/eslint/eslint/commit/1233beea3938fc4234c8f75917776832226fc3c8\"><code>chore: switch to eslint-plugin-node&#39;s maintained fork (#16150)</code></a></li>\n<li><a href=\"https://github.com/eslint/eslint/commit/97b95c068d5b35fae68ca919257b61430271ac76\"><code>chore: upgrade puppeteer v13 (#16151)</code></a></li>\n</ul>\n</details>\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9095","RelatedDescription":"Closed or merged PR \"Update eslint: 8.20.0 → 8.21.0 (minor)\" (#9095)"},{"Id":"1338028862","IsPullRequest":true,"CreatedAt":"2022-08-13T18:43:52","Actor":"depfu[bot]","Number":"9094","RawContent":null,"Title":"Update postcss: 8.4.14 → 8.4.16 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n#### ✳️ postcss (8.4.14 → 8.4.16) · [Repo](https://github.com/postcss/postcss) · [Changelog](https://github.com/postcss/postcss/blob/main/CHANGELOG.md)\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/postcss/postcss/releases/tag/8.4.16\">8.4.16</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>Fixed <code class=\"notranslate\">Root</code> AST migration.</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/postcss/postcss/releases/tag/8.4.15\">8.4.15</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>Fixed AST normalization after using custom parser with old PostCSS AST.</li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/postcss/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/postcss/postcss/compare/b7d1836dc8a7511e4cd6b8c840c0b39aff56c4b2...bc18340b6bcbea43839e56a8b61b939396b487ef\">See the full diff on Github</a>. The new version differs by 18 commits:</p>\n<ul>\n<li><a href=\"https://github.com/postcss/postcss/commit/bc18340b6bcbea43839e56a8b61b939396b487ef\"><code>Release 8.4.16 version</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/c3fc8e47b2484d7b728ea78e1069d3a5dc4d720e\"><code>Typo</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/8aad149577339aa5d04d8e6026b25b9ea45ea568\"><code>Release 8.4.15 version</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/f289e173b07bfb72265692662db94e5c49e5f583\"><code>Improve AST migration</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/fec19518f03bd51f7369be455a81906a23db7c23\"><code>Update dependencies</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/e731697dffd2e14da609503a5114d3a28c948334\"><code>Merge pull request #1762 from eltociear/patch-1</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/3c518200e0479cd38fd9b781697e142e34b34beb\"><code>Fix typo in postcss.test.ts</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/cd8cd28d7e48108d4e965fdec2447d9e76f9524b\"><code>Update dependencies</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/cbaa8fc572241a2dfc8ce09c1a8ef5ff2caa8ba7\"><code>Fix link</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/95dbe445c91e35bbe2350acb62a9156246210ed0\"><code>Merge pull request #1757 from romainmenke/update-plugins--diligent-molly-5d468c6b62</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/45a88fc0d83764e22328a1a841559d43673247c3\"><code>update plugins</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/04877f35f481df17737147351b4122944de824f4\"><code>Merge pull request #1754 from iChenLei/patch-1</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/97091c2bea52f1bb5c1257dd57f78f3aba01b09d\"><code>chore: update vscode extension infomation</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/80f02d9b5e183493f0763141414232284b5682f0\"><code>Avoid type changes</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/2d3f675107733a4591c104c2f71d1127adb7d8aa\"><code>Update depenencies</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/e0c4e8fcfe02c958d431e870281b95cc24d258a0\"><code>Merge pull request #1749 from fabercancio/replace_two_unmaintained_plugins</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/4395bd317f2593f2a008f70ed5edb8957625c860\"><code>Remove postcss-rtlcss</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/5ecbfdeaae964ac3e431856da9dbc318078076f9\"><code>Replace two unmaintained plugins on README</code></a></li>\n</ul>\n</details>\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9094","RelatedDescription":"Closed or merged PR \"Update postcss: 8.4.14 → 8.4.16 (patch)\" (#9094)"},{"Id":"1337831674","IsPullRequest":false,"CreatedAt":"2022-08-13T12:35:35","Actor":"ringeringeraja","Number":"9089","RawContent":null,"Title":"\"border\" utility doesnt work when \"base\" isn't included","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.1.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss 8.4.14, webpack 5.72.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv16.15.1\r\n\r\n**What browser are you using?**\r\n\r\nQutebrowser / Chromium\r\n\r\n**What operating system are you using?**\r\n\r\nLinux\r\n\r\n**Describe your issue**\r\n\r\nI'm using Tailwind on my Vue project, but I'd prefer to use only \"utilities\" (\"base\" will mess up with the font making it larger). Every single utility will work if I use only \"@tailwind utilities\" in my CSS root, but weirdly \"border\" and its related utilities won't. If I then include \"base\" as long with \"utilities\", it will start to work again.\r\n\r\nI don't see any reason for it being like it is, so I'll call it a bug.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9089","RelatedDescription":"Closed issue \"\"border\" utility doesnt work when \"base\" isn't included\" (#9089)"},{"Id":"1337167492","IsPullRequest":true,"CreatedAt":"2022-08-12T17:10:10","Actor":"RomanKotov","Number":"9084","RawContent":null,"Title":"Add standalone-cli node16-linux-armv7 build","State":"closed","Body":"Hi,\r\nThis pull request adds support for linux armv7 standalone-cli platform.\r\n\r\nWhy do I need this:\r\n\r\nI create a [DIY smart-home application](https://github.com/exshome/exshome). It uses [Phoenix Tailwind integration](https://github.com/phoenixframework/tailwind). The integration downloads binaries from this repository.\r\n\r\nWith this PR I will be able to run application in development mode directly on Raspberry PI and test how it works there. I have already tested this binary locally.\r\n\r\nIt seems, that there also a couple discussions regarding this feature:\r\n- https://github.com/tailwindlabs/tailwindcss/discussions/8536\r\n- https://github.com/tailwindlabs/tailwindcss/discussions/7403\r\n\r\nP.S. I can revert package-lock.json changes in this PR, if it is required.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9084","RelatedDescription":"Closed or merged PR \"Add standalone-cli node16-linux-armv7 build\" (#9084)"},{"Id":"1337292739","IsPullRequest":false,"CreatedAt":"2022-08-12T16:07:31","Actor":"furbatamang","Number":"9087","RawContent":null,"Title":"line-clamp doesn't work properly on safari","State":"closed","Body":"### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/9086\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **furbatamang** August 12, 2022</sup>\r\nLine clap doesn't truncate the paragraph properly on safari</div>","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9087","RelatedDescription":"Closed issue \"line-clamp doesn't work properly on safari\" (#9087)"},{"Id":"1336666180","IsPullRequest":false,"CreatedAt":"2022-08-12T02:07:58","Actor":"Techn1x","Number":"9082","RawContent":null,"Title":"`bg-inherit` does not exist, despite docs saying it does","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.1.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss 8.4.16 via ember-cli-postcss 8.0.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v12.0.0\r\n\r\n**What browser are you using?**\r\n\r\nTested on Chrome and Firefox.\r\n\r\n**What operating system are you using?**\r\n\r\nTested on both macOS, Windows\r\n\r\n**Reproduction URL**\r\n\r\nWIP - I'll see if I can include a failing test instead\r\n\r\n**Describe your issue**\r\n\r\nUse `bg-inherit` like you would any other background colour class, in a template (eg HTML). The `bg-inherit` class is not included in the compiled CSS.\r\n\r\nTailwind docs for v3 say it should exist https://tailwindcss.com/docs/background-color\r\n![image](https://user-images.githubusercontent.com/1049837/184271036-b0d6f44d-86ae-4727-ba6d-3dcc62b33249.png)\r\n\r\nOther ones like `bg-black`, `bg-current` and `bg-transparent` all work great, they appear in the CSS\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9082","RelatedDescription":"Closed issue \"`bg-inherit` does not exist, despite docs saying it does\" (#9082)"},{"Id":"1334324518","IsPullRequest":false,"CreatedAt":"2022-08-11T14:19:38","Actor":"Zokor","Number":"9067","RawContent":null,"Title":"On doing ng-build shows [WARNING] Expected identifier but found \"!\"","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.1.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nUsing tailwind with Angular 14\r\n\r\n**What version of Node.js are you using?**\r\n\r\n16.14.2\r\n\r\nFor example: Chrome, Safari, or N/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Describe your issue**\r\n\r\nOn doing ng-build a warning appears due to a wrong \";\" --tw-shadow:inset 0 0 30px 0 rgb(0 0 0 / 10%); !important;\r\n\r\n\r\nWarning: ▲ [WARNING] Expected identifier but found \"!\"\r\n\r\n    styles.e7c4f6bee7583309.css:14192:49:\r\n      14192 │   --tw-shadow:inset 0 0 30px 0 rgb(0 0 0 / 10%); !important;\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9067","RelatedDescription":"Closed issue \"On doing ng-build shows [WARNING] Expected identifier but found \"!\"\" (#9067)"},{"Id":"1334832909","IsPullRequest":false,"CreatedAt":"2022-08-10T15:51:38","Actor":"willdean","Number":"9072","RawContent":null,"Title":"Transient read failure may cause permanent failure to watch file","State":"open","Body":"V3.1.18\r\nTailwind CLI, Visual Studio 2022 as editor.\r\nNode v14.18.1\r\nChrome\r\nWindow 10 (No Docker or WSL)\r\n\r\nThis issue is a very close relative of #7759, but I think it might be quite specialised so I don't want to pollute that one.\r\n\r\nI have a rather odd web project, which has a single HTML file.  So the content section of tailwind.config.js looks like this:\r\n\r\n```\r\n  content: [\r\n      \"./wwwroot/index.html\"\r\n  ],\r\n```\r\n\r\nI run a tailwind CLI watcher with a command like this:\r\n```\r\nnpx tailwindcss --output wwwroot/css/tailwind.css --watch -i css/twbase.css\r\n```\r\n\r\nI am suffering from the problem described in #7759 where the watcher stops watching after a while - anywhere between almost immediately and after lots and lots of successful rebuilds.\r\n\r\nBy using the \"Process Monitor\" utility to observe the filesystem activity on the index.html file, I have observed that when Visual Studio (devenv.exe) is saving index.html, it goes through a rename/replace process which means there is a window of time in which the index.html file does not actually exist.   It appears that node.exe (i.e. Tailwind) sometimes tries to read the file during this window and finds it to be missing.    \r\n\r\nThis apparently causes Tailwind to stop watching that file.\r\n\r\n![image](https://user-images.githubusercontent.com/1306085/183951128-98b84dcd-166f-4d9d-b97f-6f98b9275266.png)\r\n\r\nThe blue selected line in the image is Node getting a file-not-found failure doing a CreateFile (it's actually an open-to-read) on index.html in the middle of devenv doing a rename dance.  I think that's a smoking gun.\r\n\r\nIf I change the content file specification to be a wildcard, then my first impression is that things are much more robust:\r\n\r\n```\r\n  content: [\r\n      \"./wwwroot/*.html\"\r\n  ],\r\n```\r\n\r\nSo:\r\n\r\n1. Is it possible/likely that TW is converting a transient read-failure on a watched file into a permanent failure to watch that file?\r\n2. If so, could this be fixed?   \r\n \r\nEven without the specific Visual Studio rename thing, transient read failures are probably an inescapable feature of Windows, because it's so common that people have tools like anti-virus and cloud-backup and indexers which do lots of automatic file opening.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9072","RelatedDescription":"Open issue \"Transient read failure may cause permanent failure to watch file\" (#9072)"},{"Id":"1334311323","IsPullRequest":false,"CreatedAt":"2022-08-10T14:36:05","Actor":"dcastil","Number":"9066","RawContent":null,"Title":"Not possible to set ring color with `future.respectDefaultRingColorOpacity` enabled","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.1.7\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nn/a\r\n\r\n**What version of Node.js are you using?**\r\n\r\nn/a\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/N1ko1lZjzn?file=config\r\n\r\n**Describe your issue**\r\n\r\nWhen `future.respectDefaultRingColorOpacity` is set to `true` in Tailwind config, I can't set ring colors like `ring-gray-500` anymore. The respective class is not created by the Tailwind compiler.\r\n\r\nRelated: https://github.com/tailwindlabs/tailwindcss/issues/9016#issuecomment-1210378693","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9066","RelatedDescription":"Closed issue \"Not possible to set ring color with `future.respectDefaultRingColorOpacity` enabled\" (#9066)"},{"Id":"1334719314","IsPullRequest":true,"CreatedAt":"2022-08-10T14:36:04","Actor":"thecrypticace","Number":"9070","RawContent":null,"Title":"Fix ring color utility generation when using `respectDefaultRingColorOpacity`","State":"closed","Body":"Fix #9066","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9070","RelatedDescription":"Closed or merged PR \"Fix ring color utility generation when using `respectDefaultRingColorOpacity`\" (#9070)"},{"Id":"1334559544","IsPullRequest":false,"CreatedAt":"2022-08-10T12:43:54","Actor":"VictorPulzz","Number":"9069","RawContent":null,"Title":"Arbitrary values color with opacity tailwind","State":"closed","Body":"### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/9068\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **VictorPulzz** August 10, 2022</sup>\r\nHello!\r\nСan you help me?\r\nI want add dynamic color with opacity in component with css variables\r\nComponent:\r\n```ts\r\n <div\r\n      className={styles.block}\r\n      style={{  '--color': color} as CSSProperties}\r\n   />\r\n```\r\nScss module: \r\n```css\r\n.block {\r\n  @apply text-[color:var(--color)] bg-[color:var(--color)]/10;\r\n}\r\n```\r\nThis class `bg-[color:var(--color)]/10` not work(</div>","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9069","RelatedDescription":"Closed issue \"Arbitrary values color with opacity tailwind\" (#9069)"},{"Id":"1333838103","IsPullRequest":true,"CreatedAt":"2022-08-09T22:14:06","Actor":"depfu[bot]","Number":"9060","RawContent":null,"Title":"Update esbuild: 0.14.48 → 0.14.54 (minor)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n#### ✳️ esbuild (0.14.48 → 0.14.54) · [Repo](https://github.com/evanw/esbuild) · [Changelog](https://github.com/evanw/esbuild/blob/master/CHANGELOG.md)\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.14.54\">0.14.54</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Fix optimizations for calls containing spread arguments (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2445\">#2445</a>)</p>\n<p dir=\"auto\">This release fixes the handling of spread arguments in the optimization of <code class=\"notranslate\">/* @__PURE__ */</code> comments, empty functions, and identity functions:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Original code</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">empty</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">identity</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span> <span class=\"pl-k\">return</span> <span class=\"pl-s1\">x</span> <span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">/* <span class=\"pl-k\">@__PURE__</span> */</span> <span class=\"pl-en\">a</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">/* <span class=\"pl-k\">@__PURE__</span> */</span> <span class=\"pl-k\">new</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-en\">empty</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-en\">identity</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-c\">// Old output (with --minify --tree-shaking=true)</span>\n<span class=\"pl-kos\">.</span><span class=\"pl-kos\">.</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">x</span><span class=\"pl-kos\">;</span>...<span class=\"pl-s1\">x</span><span class=\"pl-kos\">;</span>...<span class=\"pl-s1\">x</span><span class=\"pl-kos\">;</span>...<span class=\"pl-s1\">x</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// New output (with --minify --tree-shaking=true)</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">identity</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">n</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span><span class=\"pl-k\">return</span> <span class=\"pl-s1\">n</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">[</span>...<span class=\"pl-s1\">x</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span><span class=\"pl-kos\">[</span>...<span class=\"pl-s1\">x</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span><span class=\"pl-kos\">[</span>...<span class=\"pl-s1\">x</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span><span class=\"pl-en\">identity</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">Previously esbuild assumed arguments with side effects could be directly inlined. This is almost always true except for spread arguments, which are not syntactically valid on their own and which have the side effect of causing iteration, which might have further side effects. Now esbuild will wrap these elements in an unused array so that they are syntactically valid and so that the iteration side effects are preserved.</p>\n</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.14.53\">0.14.53</a></h4>\n\n<blockquote><p dir=\"auto\">This release fixes a minor issue with the previous release: I had to rename the package <code class=\"notranslate\">esbuild-linux-loong64</code> to <code class=\"notranslate\">@esbuild/linux-loong64</code> in the contributed PR because someone registered the package name before I could claim it, and I missed a spot. Hopefully everything is working after this release. I plan to change all platform-specific package names to use the <code class=\"notranslate\">@esbuild/</code> scope at some point to avoid this problem in the future.</p></blockquote>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.14.52\">0.14.52</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Allow binary data as input to the JS <code class=\"notranslate\">transform</code> and <code class=\"notranslate\">build</code> APIs (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2424\">#2424</a>)</p>\n<p dir=\"auto\">Previously esbuild's <code class=\"notranslate\">transform</code> and <code class=\"notranslate\">build</code> APIs could only take a string. However, some people want to use esbuild to convert binary data to base64 text. This is problematic because JavaScript strings represent UTF-16 text and esbuild internally operates on arrays of bytes, so all strings coming from JavaScript undergo UTF-16 to UTF-8 conversion before use. This meant that using esbuild in this way was doing base64 encoding of the UTF-8 encoding of the text, which was undesired.</p>\n<p dir=\"auto\">With this release, esbuild now accepts <code class=\"notranslate\">Uint8Array</code> in addition to string as an input format for the <code class=\"notranslate\">transform</code> and <code class=\"notranslate\">build</code> APIs. Now you can use esbuild to convert binary data to base64 text:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Original code</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">esbuild</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'esbuild'</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span>\n  <span class=\"pl-kos\">(</span><span class=\"pl-k\">await</span> <span class=\"pl-s1\">esbuild</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">transform</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'\\xFF'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">loader</span>: <span class=\"pl-s\">'base64'</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">code</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">(</span><span class=\"pl-k\">await</span> <span class=\"pl-s1\">esbuild</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">build</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">stdin</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">contents</span>: <span class=\"pl-s\">'\\xFF'</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">loader</span>: <span class=\"pl-s\">'base64'</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">write</span>: <span class=\"pl-c1\">false</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">outputFiles</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">text</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span>\n  <span class=\"pl-kos\">(</span><span class=\"pl-k\">await</span> <span class=\"pl-s1\">esbuild</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">transform</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Uint8Array</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0xFF</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">loader</span>: <span class=\"pl-s\">'base64'</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">code</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">(</span><span class=\"pl-k\">await</span> <span class=\"pl-s1\">esbuild</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">build</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">stdin</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">contents</span>: <span class=\"pl-k\">new</span> <span class=\"pl-v\">Uint8Array</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0xFF</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">loader</span>: <span class=\"pl-s\">'base64'</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">write</span>: <span class=\"pl-c1\">false</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">outputFiles</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">text</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-c\">// Old output</span>\n<span class=\"pl-kos\">[</span> <span class=\"pl-s\">'module.exports = \"w78=\";\\n'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'module.exports = \"w78=\";\\n'</span> <span class=\"pl-kos\">]</span>\n<span class=\"pl-c\">/* ERROR: The input to \"transform\" must be a string */</span>\n\n<span class=\"pl-c\">// New output</span>\n<span class=\"pl-kos\">[</span> <span class=\"pl-s\">'module.exports = \"w78=\";\\n'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'module.exports = \"w78=\";\\n'</span> <span class=\"pl-kos\">]</span>\n<span class=\"pl-kos\">[</span> <span class=\"pl-s\">'module.exports = \"/w==\";\\n'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'module.exports = \"/w==\";\\n'</span> <span class=\"pl-kos\">]</span></pre></div>\n</li>\n<li>\n<p dir=\"auto\">Update the getter for <code class=\"notranslate\">text</code> in build results (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2423\">#2423</a>)</p>\n<p dir=\"auto\">Output files in build results returned from esbuild's JavaScript API have both a <code class=\"notranslate\">contents</code> and a <code class=\"notranslate\">text</code> property to return the contents of the output file. The <code class=\"notranslate\">contents</code> property is a binary UTF-8 Uint8Array and the <code class=\"notranslate\">text</code> property is a JavaScript UTF-16 string. The <code class=\"notranslate\">text</code> property is a getter that does the UTF-8 to UTF-16 conversion only if it's needed for better performance.</p>\n<p dir=\"auto\">Previously if you mutate the build results object, you had to overwrite both <code class=\"notranslate\">contents</code> and <code class=\"notranslate\">text</code> since the value returned from the <code class=\"notranslate\">text</code> getter is the original text returned by esbuild. Some people find this confusing so with this release, the getter for <code class=\"notranslate\">text</code> has been updated to do the UTF-8 to UTF-16 conversion on the current value of the <code class=\"notranslate\">contents</code> property instead of the original value.</p>\n</li>\n<li>\n<p dir=\"auto\">Publish builds for Linux LoongArch 64-bit (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/1804\">#1804</a>, <a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/pull/2373\">#2373</a>)</p>\n<p dir=\"auto\">This release upgrades to <a href=\"https://go.dev/doc/go1.19\">Go 1.19</a>, which now includes support for LoongArch 64-bit processors. LoongArch 64-bit builds of esbuild will now be published to npm, which means that in theory they can now be installed with <code class=\"notranslate\">npm install esbuild</code>. This was contributed by <a href=\"https://bounce.depfu.com/github.com/beyond-1234\">@beyond-1234</a>.</p>\n</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.14.51\">0.14.51</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Add support for React 17's <code class=\"notranslate\">automatic</code> JSX transform (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/334\">#334</a>, <a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/718\">#718</a>, <a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/1172\">#1172</a>, <a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2318\">#2318</a>, <a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/pull/2349\">#2349</a>)</p>\n<p dir=\"auto\">This adds support for the <a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">new \"automatic\" JSX runtime from React 17+</a> to esbuild for both the build and transform APIs.</p>\n<p dir=\"auto\"><strong>New CLI flags and API options:</strong></p>\n<ul dir=\"auto\">\n<li>\n<code class=\"notranslate\">--jsx</code>, <code class=\"notranslate\">jsx</code> — Set this to <code class=\"notranslate\">\"automatic\"</code> to opt in to this new transform</li>\n<li>\n<code class=\"notranslate\">--jsx-dev</code>, <code class=\"notranslate\">jsxDev</code> — Toggles development mode for the automatic runtime</li>\n<li>\n<code class=\"notranslate\">--jsx-import-source</code>, <code class=\"notranslate\">jsxImportSource</code> — Overrides the root import for runtime functions (default <code class=\"notranslate\">\"react\"</code>)</li>\n</ul>\n<p dir=\"auto\"><strong>New JSX pragma comments:</strong></p>\n<ul dir=\"auto\">\n<li>\n<code class=\"notranslate\">@jsxRuntime</code> — Sets the runtime (<code class=\"notranslate\">automatic</code> or <code class=\"notranslate\">classic</code>)</li>\n<li>\n<code class=\"notranslate\">@jsxImportSource</code> — Sets the import source (only valid with automatic runtime)</li>\n</ul>\n<p dir=\"auto\">The existing <code class=\"notranslate\">@jsxFragment</code> and <code class=\"notranslate\">@jsxFactory</code> pragma comments are only valid with \"classic\" runtime.</p>\n<p dir=\"auto\"><strong>TSConfig resolving:</strong><br>\nAlong with accepting the new options directly via CLI or API, option inference from <code class=\"notranslate\">tsconfig.json</code> compiler options was also implemented:</p>\n<ul dir=\"auto\">\n<li>\n<code class=\"notranslate\">\"jsx\": \"preserve\"</code> or <code class=\"notranslate\">\"jsx\": \"react-native\"</code> → Same as <code class=\"notranslate\">--jsx=preserve</code> in esbuild</li>\n<li>\n<code class=\"notranslate\">\"jsx\": \"react\"</code> → Same as <code class=\"notranslate\">--jsx=transform</code> in esbuild (which is the default behavior)</li>\n<li>\n<code class=\"notranslate\">\"jsx\": \"react-jsx\"</code> → Same as <code class=\"notranslate\">--jsx=automatic</code> in esbuild</li>\n<li>\n<code class=\"notranslate\">\"jsx\": \"react-jsxdev\"</code> → Same as <code class=\"notranslate\">--jsx=automatic --jsx-dev</code> in esbuild</li>\n</ul>\n<p dir=\"auto\">It also reads the value of <code class=\"notranslate\">\"jsxImportSource\"</code> from <code class=\"notranslate\">tsconfig.json</code> if specified.</p>\n<p dir=\"auto\">For <code class=\"notranslate\">react-jsx</code> it's important to note that it doesn't implicitly disable <code class=\"notranslate\">--jsx-dev</code>. This is to support the case where a user sets <code class=\"notranslate\">\"react-jsx\"</code> in their <code class=\"notranslate\">tsconfig.json</code> but then toggles development mode directly in esbuild.</p>\n<p dir=\"auto\"><strong>esbuild vs Babel vs TS vs...</strong></p>\n<p dir=\"auto\">There are a few differences between the various technologies that implement automatic JSX runtimes. The JSX transform in esbuild follows a mix of Babel's and TypeScript's behavior:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">When an element has <code class=\"notranslate\">__source</code> or <code class=\"notranslate\">__self</code> props:</p>\n<ul dir=\"auto\">\n<li>Babel: Print an error about a deprecated transform plugin</li>\n<li>TypeScript: Allow the props</li>\n<li>swc: Hard crash</li>\n<li>\n<strong>esbuild</strong>: Print an error — Following Babel was chosen for this one because this might help people catch configuration issues where JSX files are being parsed by multiple tools</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\">Element has an \"implicit true\" key prop, e.g. <code class=\"notranslate\">&lt;a key /&gt;</code>:</p>\n<ul dir=\"auto\">\n<li>Babel: Print an error indicating that \"key\" props require an explicit value</li>\n<li>TypeScript: Silently omit the \"key\" prop</li>\n<li>swc: Hard crash</li>\n<li>\n<strong>esbuild</strong>: Print an error like Babel — This might help catch legitimate programming mistakes</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\">Element has spread children, e.g. <code class=\"notranslate\">&lt;a&gt;{...children}&lt;/a&gt;</code></p>\n<ul dir=\"auto\">\n<li>Babel: Print an error stating that React doesn't support spread children</li>\n<li>TypeScript: Use static jsx function and pass children as-is, including spread operator</li>\n<li>swc: same as Babel</li>\n<li>\n<strong>esbuild</strong>: Same as TypeScript</li>\n</ul>\n</li>\n</ul>\n<p dir=\"auto\">Also note that TypeScript has some bugs regarding JSX development mode and the generation of <code class=\"notranslate\">lineNumber</code> and <code class=\"notranslate\">columnNumber</code> values. Babel's values are accurate though, so esbuild's line and column numbers match Babel. Both numbers are 1-based and columns are counted in terms of UTF-16 code units.</p>\n<p dir=\"auto\">This feature was contributed by <a href=\"https://bounce.depfu.com/github.com/jgoz\">@jgoz</a>.</p>\n</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.14.50\">0.14.50</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Emit <code class=\"notranslate\">names</code> in source maps (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/1296\">#1296</a>)</p>\n<p dir=\"auto\">The <a href=\"https://sourcemaps.info/spec.html\">source map specification</a> includes an optional <code class=\"notranslate\">names</code> field that can associate an identifier with a mapping entry. This can be used to record the original name for an identifier, which is useful if the identifier was renamed to something else in the generated code. When esbuild was originally written, this field wasn't widely used, but now there are some debuggers that make use of it to provide better debugging of minified code. With this release, esbuild now includes a <code class=\"notranslate\">names</code> field in the source maps that it generates. To save space, the original name is only recorded when it's different from the final name.</p>\n</li>\n<li>\n<p dir=\"auto\">Update parser for arrow functions with initial default type parameters in <code class=\"notranslate\">.tsx</code> files (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2410\">#2410</a>)</p>\n<p dir=\"auto\">TypeScript 4.6 introduced a <a href=\"https://bounce.depfu.com/github.com/microsoft/TypeScript/issues/47062\">change to the parsing of JSX syntax in <code class=\"notranslate\">.tsx</code> files</a>. Now a <code class=\"notranslate\">&lt;</code> token followed by an identifier and then a <code class=\"notranslate\">=</code> token is parsed as an arrow function with a default type parameter instead of as a JSX element. This release updates esbuild's parser to match TypeScript's parser.</p>\n</li>\n<li>\n<p dir=\"auto\">Fix an accidental infinite loop with <code class=\"notranslate\">--define</code> substitution (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2407\">#2407</a>)</p>\n<p dir=\"auto\">This is a fix for a regression that was introduced in esbuild version 0.14.44 where certain <code class=\"notranslate\">--define</code> substitutions could result in esbuild crashing with a stack overflow. The problem was an incorrect fix for <a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2292\">#2292</a>. The fix merged the code paths for <code class=\"notranslate\">--define</code> and <code class=\"notranslate\">--jsx-factory</code> rewriting since the value substitution is now the same for both. However, doing this accidentally made <code class=\"notranslate\">--define</code> substitution recursive since the JSX factory needs to be able to match against <code class=\"notranslate\">--define</code> substitutions to integrate with the <code class=\"notranslate\">--inject</code> feature. The fix is to only do one additional level of matching against define substitutions, and to only do this for JSX factories. Now these cases are able to build successfully without a stack overflow.</p>\n</li>\n<li>\n<p dir=\"auto\">Include the \"public path\" value in hashes (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2403\">#2403</a>)</p>\n<p dir=\"auto\">The <code class=\"notranslate\">--public-path=</code> configuration value affects the paths that esbuild uses to reference files from other files and is used in various situations such as cross-chunk imports in JS and references to asset files from CSS files. However, it wasn't included in the hash calculations used for file names due to an oversight. This meant that changing the public path setting incorrectly didn't result in the hashes in file names changing even though the contents of the files changed. This release fixes the issue by including a hash of the public path in all non-asset output files.</p>\n</li>\n<li>\n<p dir=\"auto\">Fix a cross-platform consistency bug (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2383\">#2383</a>)</p>\n<p dir=\"auto\">Previously esbuild would minify <code class=\"notranslate\">0xFFFF_FFFF_FFFF_FFFF</code> as <code class=\"notranslate\">0xffffffffffffffff</code> (18 bytes) on arm64 chips and as <code class=\"notranslate\">18446744073709552e3</code> (19 bytes) on x86_64 chips. The reason was that the number was converted to a 64-bit unsigned integer internally for printing as hexadecimal, the 64-bit floating-point number <code class=\"notranslate\">0xFFFF_FFFF_FFFF_FFFF</code> is actually <code class=\"notranslate\">0x1_0000_0000_0000_0180</code> (i.e. it's rounded up, not down), and converting <code class=\"notranslate\">float64</code> to <code class=\"notranslate\">uint64</code> is implementation-dependent in Go when the input is out of bounds. This was fixed by changing the upper limit for which esbuild uses hexadecimal numbers during minification to <code class=\"notranslate\">0xFFFF_FFFF_FFFF_F800</code>, which is the next representable 64-bit floating-point number below <code class=\"notranslate\">0x1_0000_0000_0000_0180</code>, and which fits in a <code class=\"notranslate\">uint64</code>. As a result, esbuild will now consistently never minify <code class=\"notranslate\">0xFFFF_FFFF_FFFF_FFFF</code> as <code class=\"notranslate\">0xffffffffffffffff</code> anymore, which means the output should now be consistent across platforms.</p>\n</li>\n<li>\n<p dir=\"auto\">Fix a hang with the synchronous API when the package is corrupted (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2396\">#2396</a>)</p>\n<p dir=\"auto\">An error message is already thrown when the esbuild package is corrupted and esbuild can't be run. However, if you are using a synchronous call in the JavaScript API in worker mode, esbuild will use a child worker to initialize esbuild once so that the overhead of initializing esbuild can be amortized across multiple synchronous API calls. However, errors thrown during initialization weren't being propagated correctly which resulted in a hang while the main thread waited forever for the child worker to finish initializing. With this release, initialization errors are now propagated correctly so calling a synchronous API call when the package is corrupted should now result in an error instead of a hang.</p>\n</li>\n<li>\n<p dir=\"auto\">Fix <code class=\"notranslate\">tsconfig.json</code> files that collide with directory names (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2411\">#2411</a>)</p>\n<p dir=\"auto\">TypeScript lets you write <code class=\"notranslate\">tsconfig.json</code> files with <code class=\"notranslate\">extends</code> clauses that refer to another config file using an implicit <code class=\"notranslate\">.json</code> file extension. However, if the config file without the <code class=\"notranslate\">.json</code> extension existed as a directory name, esbuild and TypeScript had different behavior. TypeScript ignores the directory and continues looking for the config file by adding the <code class=\"notranslate\">.json</code> extension while esbuild previously terminated the search and then failed to load the config file (because it's a directory). With this release, esbuild will now ignore exact matches when resolving <code class=\"notranslate\">extends</code> fields in <code class=\"notranslate\">tsconfig.json</code> files if the exact match results in a directory.</p>\n</li>\n<li>\n<p dir=\"auto\">Add <code class=\"notranslate\">platform</code> to the transform API (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2362\">#2362</a>)</p>\n<p dir=\"auto\">The <code class=\"notranslate\">platform</code> option is mainly relevant for bundling because it mostly affects path resolution (e.g. activating the <code class=\"notranslate\">\"browser\"</code> field in <code class=\"notranslate\">package.json</code> files), so it was previously only available for the build API. With this release, it has additionally be made available for the transform API for a single reason: you can now set <code class=\"notranslate\">--platform=node</code> when transforming a string so that esbuild will add export annotations for node, which is only relevant when <code class=\"notranslate\">--format=cjs</code> is also present.</p>\n<p dir=\"auto\">This has to do with an implementation detail of node that parses the AST of CommonJS files to discover named exports when importing CommonJS from ESM. However, this new addition to esbuild's API is of questionable usefulness. Node's loader API (the main use case for using esbuild's transform API like this) actually bypasses the content returned from the loader and parses the AST that's present on the file system, so you won't actually be able to use esbuild's API for this. See the linked issue for more information.</p>\n</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/evanw/esbuild/releases/tag/v0.14.49\">0.14.49</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Keep inlined constants when direct <code class=\"notranslate\">eval</code> is present (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2361\">#2361</a>)</p>\n<p dir=\"auto\">Version 0.14.19 of esbuild added inlining of certain <code class=\"notranslate\">const</code> variables during minification, which replaces all references to the variable with the initializer and then removes the variable declaration. However, this could generate incorrect code when direct <code class=\"notranslate\">eval</code> is present because the direct <code class=\"notranslate\">eval</code> could reference the constant by name. This release fixes the problem by preserving the <code class=\"notranslate\">const</code> variable declaration in this case:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Original code</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span> <span class=\"pl-k\">const</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">123</span><span class=\"pl-kos\">;</span> <span class=\"pl-k\">return</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">+</span> <span class=\"pl-en\">eval</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'x'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-c\">// Old output (with --minify)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">=&gt;</span><span class=\"pl-c1\">123</span><span class=\"pl-c1\">+</span><span class=\"pl-en\">eval</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"x\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// New output (with --minify)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">=&gt;</span><span class=\"pl-kos\">{</span><span class=\"pl-k\">const</span> <span class=\"pl-s1\">x</span><span class=\"pl-c1\">=</span><span class=\"pl-c1\">123</span><span class=\"pl-kos\">;</span><span class=\"pl-k\">return</span> <span class=\"pl-c1\">123</span><span class=\"pl-c1\">+</span><span class=\"pl-en\">eval</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"x\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n</li>\n<li>\n<p dir=\"auto\">Fix an incorrect error in TypeScript when targeting ES5 (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2375\">#2375</a>)</p>\n<p dir=\"auto\">Previously when compiling TypeScript code to ES5, esbuild could incorrectly consider the following syntax forms as a transformation error:</p>\n<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-c1\">0</span> ? <span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> : <span class=\"pl-c1\">1</span> ? <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> : <span class=\"pl-c1\">2</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">The error messages looked like this:</p>\n<pre class=\"notranslate\"><code class=\"notranslate\">✘ [ERROR] Transforming destructuring to the configured target environment (\"es5\") is not supported yet\n\n    example.ts:1:5:\n      1 │ 0 ? ([]) : 1 ? ({}) : 2;\n        ╵      ^\n\n✘ [ERROR] Transforming destructuring to the configured target environment (\"es5\") is not supported yet\n\n    example.ts:1:16:\n      1 │ 0 ? ([]) : 1 ? ({}) : 2;\n        ╵                 ^\n</code></pre>\n<p dir=\"auto\">These parenthesized literals followed by a colon look like the start of an arrow function expression followed by a TypeScript return type (e.g. <code class=\"notranslate\">([]) : 1</code> could be the start of the TypeScript arrow function <code class=\"notranslate\">([]): 1 =&gt; 1</code>). Unlike in JavaScript, parsing arrow functions in TypeScript requires backtracking. In this case esbuild correctly determined that this expression wasn't an arrow function after all but the check for destructuring was incorrectly not covered under the backtracking process. With this release, the error message is now only reported if the parser successfully parses an arrow function without backtracking.</p>\n</li>\n<li>\n<p dir=\"auto\">Fix generated TypeScript <code class=\"notranslate\">enum</code> comments containing <code class=\"notranslate\">*/</code> (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2369\">#2369</a>, <a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/pull/2371\">#2371</a>)</p>\n<p dir=\"auto\">TypeScript <code class=\"notranslate\">enum</code> values that are equal to a number or string literal are inlined (references to the enum are replaced with the literal value) and have a <code class=\"notranslate\">/* ... */</code> comment after them with the original enum name to improve readability. However, this comment is omitted if the enum name contains the character sequence <code class=\"notranslate\">*/</code> because that would end the comment early and cause a syntax error:</p>\n<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-c\">// Original TypeScript</span>\n<span class=\"pl-k\">enum</span> <span class=\"pl-smi\">Foo</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s\">'/*'</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'*/'</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">2</span> <span class=\"pl-kos\">}</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">Foo</span><span class=\"pl-kos\">[</span><span class=\"pl-s\">'/*'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">Foo</span><span class=\"pl-kos\">[</span><span class=\"pl-s\">'*/'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-c\">// Generated JavaScript</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span> <span class=\"pl-c\">/* /* */</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">This was originally handled correctly when TypeScript <code class=\"notranslate\">enum</code> inlining was initially implemented since it was only supported within a single file. However, when esbuild was later extended to support TypeScript <code class=\"notranslate\">enum</code> inlining across files, this special case where the enum name contains <code class=\"notranslate\">*/</code> was not handled in that new code. Starting with this release, esbuild will now handle enums with names containing <code class=\"notranslate\">*/</code> correctly when they are inlined across files:</p>\n<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-c\">// foo.ts</span>\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">enum</span> <span class=\"pl-smi\">Foo</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s\">'/*'</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'*/'</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">2</span> <span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// bar.ts</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-smi\">Foo</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'./foo'</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">Foo</span><span class=\"pl-kos\">[</span><span class=\"pl-s\">'/*'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">Foo</span><span class=\"pl-kos\">[</span><span class=\"pl-s\">'*/'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-c\">// Old output (with --bundle --format=esm)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span> <span class=\"pl-c\">/* /* */</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span> <span class=\"pl-c\">/* */</span> <span class=\"pl-c1\">*</span><span class=\"pl-c1\">/</span><span class=\"pl-kos\">)</span>;\n\n<span class=\"pl-c\">// New output (with --bundle --format=esm)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span> <span class=\"pl-c\">/* /* */</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\"></span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">This fix was contributed by <a href=\"https://bounce.depfu.com/github.com/magic-akari\">@magic-akari</a>.</p>\n</li>\n<li>\n<p dir=\"auto\">Allow <code class=\"notranslate\">declare</code> class fields to be initialized (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2380\">#2380</a>)</p>\n<p dir=\"auto\">This release fixes an oversight in the TypeScript parser that disallowed initializers for <code class=\"notranslate\">declare</code> class fields. TypeScript actually allows the following limited initializer expressions for <code class=\"notranslate\">readonly</code> fields:</p>\n<div class=\"highlight highlight-source-ts\"><pre><span class=\"pl-k\">declare</span> <span class=\"pl-k\">const</span> <span class=\"pl-k\">enum</span> <span class=\"pl-s1\">a</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">b</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span> <span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">Foo</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// These are allowed by TypeScript</span>\n  <span class=\"pl-k\">declare</span> <span class=\"pl-k\">readonly</span> <span class=\"pl-c1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span>\n  <span class=\"pl-k\">declare</span> <span class=\"pl-k\">readonly</span> <span class=\"pl-c1\">b</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">-</span><span class=\"pl-c1\">0</span>\n  <span class=\"pl-k\">declare</span> <span class=\"pl-k\">readonly</span> <span class=\"pl-c1\">c</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0n</span>\n  <span class=\"pl-k\">declare</span> <span class=\"pl-k\">readonly</span> <span class=\"pl-c1\">d</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">-</span><span class=\"pl-c1\">0n</span>\n  <span class=\"pl-k\">declare</span> <span class=\"pl-k\">readonly</span> <span class=\"pl-c1\">e</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'x'</span>\n  <span class=\"pl-k\">declare</span> <span class=\"pl-k\">readonly</span> <span class=\"pl-c1\">f</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">`x`</span>\n  <span class=\"pl-k\">declare</span> <span class=\"pl-k\">readonly</span> <span class=\"pl-c1\">g</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">b</span>\n  <span class=\"pl-k\">declare</span> <span class=\"pl-k\">readonly</span> <span class=\"pl-c1\">h</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">[</span><span class=\"pl-s\">'b'</span><span class=\"pl-kos\">]</span>\n\n  <span class=\"pl-c\">// These are not allowed by TypeScript</span>\n  <span class=\"pl-k\">declare</span> <span class=\"pl-k\">readonly</span> <span class=\"pl-c1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">declare</span> <span class=\"pl-k\">readonly</span> <span class=\"pl-c1\">y</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">null</span>\n  <span class=\"pl-k\">declare</span> <span class=\"pl-k\">readonly</span> <span class=\"pl-c1\">z</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">-</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">b</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">So with this release, esbuild now allows initializers for <code class=\"notranslate\">declare</code> class fields too. To future-proof this in case TypeScript allows more expressions as initializers in the future (such as <code class=\"notranslate\">null</code>), esbuild will allow any expression as an initializer and will leave the specifics of TypeScript's special-casing here to the TypeScript type checker.</p>\n</li>\n<li>\n<p dir=\"auto\">Fix a bug in esbuild's feature compatibility table generator (<a href=\"https://bounce.depfu.com/github.com/evanw/esbuild/issues/2365\">#2365</a>)</p>\n<p dir=\"auto\">Passing specific JavaScript engines to esbuild's <code class=\"notranslate\">--target</code> flag restricts esbuild to only using JavaScript features that are supported on those engines in the output files that esbuild generates. The data for this feature is automatically derived from this compatibility table with a script: <a href=\"https://kangax.github.io/compat-table/\">https://kangax.github.io/compat-table/</a>.</p>\n<p dir=\"auto\">However, the script had a bug that could incorrectly consider a JavaScript syntax feature to be supported in a given engine even when it doesn't actually work in that engine. Specifically this bug happened when a certain aspect of JavaScript syntax has always worked incorrectly in that engine and the bug in that engine has never been fixed. This situation hasn't really come up before because previously esbuild pretty much only targeted JavaScript engines that always fix their bugs, but the two new JavaScript engines that were added in the previous release (<a href=\"https://hermesengine.dev/\">Hermes</a> and <a href=\"https://bounce.depfu.com/github.com/mozilla/rhino\">Rhino</a>) have many aspects of the JavaScript specification that have never been implemented, and may never be implemented. For example, the <code class=\"notranslate\">let</code> and <code class=\"notranslate\">const</code> keywords are not implemented correctly in those engines.</p>\n<p dir=\"auto\">With this release, esbuild's compatibility table generator script has been fixed and as a result, esbuild will now correctly consider a JavaScript syntax feature to be unsupported in a given engine if there is some aspect of that syntax that is broken in all known versions of that engine. This means that the following JavaScript syntax features are no longer considered to be supported by these engines (represented using esbuild's internal names for these syntax features):</p>\n<p dir=\"auto\">Hermes:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">arrow</code></li>\n<li><code class=\"notranslate\">const-and-let</code></li>\n<li><code class=\"notranslate\">default-argument</code></li>\n<li><code class=\"notranslate\">generator</code></li>\n<li><code class=\"notranslate\">optional-catch-binding</code></li>\n<li><code class=\"notranslate\">optional-chain</code></li>\n<li><code class=\"notranslate\">rest-argument</code></li>\n<li><code class=\"notranslate\">template-literal</code></li>\n</ul>\n<p dir=\"auto\">Rhino:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">arrow</code></li>\n<li><code class=\"notranslate\">const-and-let</code></li>\n<li><code class=\"notranslate\">destructuring</code></li>\n<li><code class=\"notranslate\">for-of</code></li>\n<li><code class=\"notranslate\">generator</code></li>\n<li><code class=\"notranslate\">object-extensions</code></li>\n<li><code class=\"notranslate\">template-literal</code></li>\n</ul>\n<p dir=\"auto\">IE:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">const-and-let</code></li>\n</ul>\n</li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/esbuild/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/evanw/esbuild/compare/71be8bc24e70609ab50a80e90a17a1f5770c89b5...04ef75fd7ff534a636962f14e11d224c84aa2020\">See the full diff on Github</a>. The new version differs by 58 commits:</p>\n<ul>\n<li><a href=\"https://github.com/evanw/esbuild/commit/04ef75fd7ff534a636962f14e11d224c84aa2020\"><code>publish 0.14.54 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/20878ce1c1cd6bbd2b4e36b3ed35d3e31ebe5381\"><code>fix #2445: fixes for spread arguments and --minify</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/b2b5a602e4d0bcdb514dcc013d11be4dbf2cd3b3\"><code>ci: move uglify into slow tests</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/b9cae1453d7f77e4c28d0ed01482dafc762e7f55\"><code>ci: clarify some test labels</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/fe9b71189ceb3af1e7eb14d72758e156d07c2c48\"><code>attempt to speed up ci: isolate rollup tests</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/4e65c73fcb05846fc5b1f6451849f88d0fb0b6cf\"><code>publish 0.14.53 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/adbb4753f120027a6a2152220a7d83575dfda5a9\"><code>missed two `esbuild-linux-loong64` names</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/39eccb81dc11dff13ce720b6b8cd4a0dc799c740\"><code>publish 0.14.52 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/d6cf390388d8f796f6a0f90ff5a3666e49d80363\"><code>Support Loongarch LE architecture  (#2373)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/296870e5bde714156850890efab546197980341a\"><code>workarounds for bad go comment formatting behavior</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/af0ab3e2a73b1dde8b1fde132e3545fc2004eef1\"><code>run the new go formatter, which mangles comments</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/21deb419184864b3c6cb327e15118dadde1a6153\"><code>update go 1.18.4 =&gt; 1.19</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/ea63c87b826d61bc9123a4f611ac0f270bd3bffc\"><code>add a note about go 1.13 (#2431)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/7bd490073081c0001f213e82eb83163c952c1211\"><code>Revert &quot;fix #2417: autmatically add `module` to conditions&quot;</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/5e918f449ace01dc3a5c9b911827551fb92ef93e\"><code>fix #2417: autmatically add `module` to conditions</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/08c67446733ec2690ea5da42bcdbae26e8943828\"><code>fix large binary input on deno</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/e23e1818f87bfd6532caaa6a12352ae34008c4d0\"><code>fix #2424: allow binary in `transform` and `build`</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/2f6c89990d4257019abe608c552bc24b31e2262b\"><code>fix #2423: update `text` getter on output files</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/40ef6339d30cf7b07291bfc904823036c03c4ea3\"><code>fix #2422: use original case for watch mode logs</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/19429aaf6cbef7cc5586aa7f953abcd3068a9d31\"><code>fix typo in release notes</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/4402c7649a83e80866d9b62638628b805f02fb2f\"><code>publish 0.14.51 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/013722433bb4a0c8f7e91ec82e5ab6c9feb14284\"><code>fix #334: support automatic JSX runtime (#2349)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/7a268da808b1f9b240b1dbdd8c553e9b31caeacb\"><code>scan over template string ranges in error messages</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/e2830ae35cafa04ce4d3aeee24b23803629ca156\"><code>publish 0.14.50 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/87595902e2cf63202dcc3468bb18082d47b6bc75\"><code>fix #2362: add `platform` to the transform API</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/09cbb59a87fe01eca6b3eeef213d24994558902b\"><code>update internal typescript 4.5 =&gt; 4.7</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/69d356b95c70f0c3f43840ffd2cf780bd6125211\"><code>fix #2411: ignore tsconfig `extends` directories</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/72088462ae161b452ec896462baa882863689d87\"><code>generate `&quot;names&quot;` in source maps (#2415)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/98ab5e19fa11272818d878d905bc1928fa00e42b\"><code>warn about duplicate attributes in jsx elements</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/8c6c39a05b7904bb49b072938146098f4a27f3b8\"><code>improve the error message for generic arrow in tsx</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/2c2ef24c4be435b6ef71c99c2a1d1f11a210c059\"><code>fix #2410: new tsx/arrow parsing rules for ts 4.6</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/f41b38de32e038f2ea8c3d2571310062961829a0\"><code>fix #2403: include public path in hash</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/50c04d6edba30d0c3a064814cea01cfd923427cf\"><code>update go 1.18.3 =&gt; 1.18.4</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/49c229f71d325c4dbc788c5775bfa2e416f8fbda\"><code>fix #2407: undo recursive `--define` substitution</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/fd13718c6195afb9e63682476a774fa6d4483be0\"><code>fix #2399: update golang.org/x/sys</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/f5f5b57733865cf0968f05a5ef38b3604c997950\"><code>add some additional source mappings</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/4c5318f487fcc36e7798071c5a8d8e95db1dc6b1\"><code>move statement source mappings into cases</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/d8e401d2059d0b9470b7cb14b38c063f2ed39117\"><code>avoid allocations during vlq encoding</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/61dd5f449941f676e4ff7ae5cfa5dc93fd6e2499\"><code>avoid mutating symbols when mangling props</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/c05ece77b11d64d69582351aa3968da1776c8eaf\"><code>move expression source mappings into cases</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/e70d8e20b1cea40de50c8ffda11e1c844149a1ef\"><code>move json quoting out of js printer</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/8e78ac67967938d6a63a0a237bb652d48dde7b23\"><code>fix some go warnings</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/a1a70723d8aa4e362a3aca7b070c6e0829e8fcda\"><code>use 32-bit integers in source map parser</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/96a5fb43fe326a5b04eb06bbd10cedfcc457fae3\"><code>preserve newlines in call arguments</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/ecae25db0d8007071eaf62fc5e3b99e1c8ec0919\"><code>fix #2396: propagate sync api errors from workers</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/f730c03dc7be43c3c908fbd6e106120a99ebb4a0\"><code>fix #2383: cross-platform hex number consistency</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/4a4fd6e569f4b98e4a4ff4ab3910a5b32be02666\"><code>add `image/avif` to mime types</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/3b6b964be03b555902484d6775b335e7d5098eed\"><code>publish 0.14.49 to npm</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/04b65729e72c1be671f32e8674c3c9c6e22c0fc2\"><code>fix #2361: keeps inlined `const` for direct `eval`</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/4aa18688262536b8742c8ad88bf9ab8a899cb46c\"><code>Fix documentation link (#2376)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/147163e2bb80c4b25a4a6cce04b2cd07ab6604c3\"><code>#2380: allow `declare` class field initializers</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/a2789bf9b4b44bf0db50b9122a324b1458c16da7\"><code>fix #2375: avoid bad es5 error when backtracking</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/580ad40a9dd050b67916cb3453faf4d0407d2e62\"><code>experiment with equality operand orderings (#2364)</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/ffbc5c25e3b276e251bfcd6e8af5facd438d365b\"><code>remove canonicalization of equality order</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/4a00ba9af247f6d6dd565dad9d818480c124a181\"><code>improve printed diffs in tests</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/18ef7becb931f09bfd83e098fad6956cba4a1989\"><code>fix #2365, close #2372: bug in compat-table code</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/8b5e048786ecb72364f1ff6ab4c7bc30a0ea7e06\"><code>follow-up to #2371</code></a></li>\n<li><a href=\"https://github.com/evanw/esbuild/commit/46d352ed4004275b565c85d40aed3c6a08d78c7c\"><code>fix(bundle): omit enum comments if name contains `*/` in bundle mode (#2371)</code></a></li>\n</ul>\n</details>\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/9060","RelatedDescription":"Closed or merged PR \"Update esbuild: 0.14.48 → 0.14.54 (minor)\" (#9060)"},{"Id":"1333289693","IsPullRequest":false,"CreatedAt":"2022-08-09T13:49:04","Actor":"TastyPi","Number":"9056","RawContent":null,"Title":"CSS rules of the form `.foo.bar` don't behave as expected with `peer-checked:bar`","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.1.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss-cli 10.0.0\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv16.14.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nLinux\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/4zvuUG5xci\r\n\r\nSeems Tailwind Play is still on v3.1.5, but I see the issue in v3.1.8\r\n\r\n**Describe your issue**\r\n\r\nIf I have a standard CSS rule defined like this:\r\n\r\n```css\r\n@layer components {\r\n  .foo.bar {\r\n    background-color: green;\r\n  }\r\n}\r\n```\r\n\r\nThen I would expect `peer-checked:bar` to define the following:\r\n\r\n```css\r\n.peer:checked ~ .foo.peer-checked\\:bar {\r\n  background-color: green;\r\n}\r\n```\r\n\r\nInstead it generates:\r\n\r\n```css\r\n.foo.peer:checked ~ .peer-checked\\:bar {\r\n  background-color: green;\r\n}\r\n```\r\n\r\n`.foo` is applied to the `.peer` instead of the `.peer-checked\\:bar`.\r\n\r\nChanging the original rule to `.bar.foo` fixes the issue (i.e. it works as expected with the first class in the list).","Url":"https://github.com/tailwindlabs/tailwindcss/issues/9056","RelatedDescription":"Open issue \"CSS rules of the form `.foo.bar` don't behave as expected with `peer-checked:bar`\" (#9056)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-08-22T03:30:26.9179253Z","RunDurationInMilliseconds":645}