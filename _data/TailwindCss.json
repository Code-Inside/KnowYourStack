{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2512288283","IsPullRequest":false,"CreatedAt":"2024-09-08T09:29:28","Actor":"Mellowchan","Number":"14367","RawContent":null,"Title":"3.4.10 - Warning regarding node_modules in pattern persist for skeleton theme (svelte)","State":"open","Body":"Hello, I've setup sveltekit project with skeleton theme according to official guidelines which includes tailwind.config.js setup too:  https://next.skeleton.dev/docs/get-started/installation/sveltekit\r\n\r\nSince recent versions of talwindcss I get this warning:\r\n```\r\nwarn - Your `content` configuration includes a pattern which looks like it's accidentally matching all of `node_modules` and can cause serious performance issues.\r\nwarn - Pattern: `../**/*.ts`\r\nwarn - See our documentation for recommendations:\r\nwarn - https://tailwindcss.com/docs/content-configuration#pattern-recommendations\r\n```\r\n\r\nBesides this warning, everything works great. I don't know what I did wrong since the glob pattern is included in the official guidelines.\r\n\r\nThe relevant lines in tailwind.config.js to this warning look like this:\r\n```\r\nexport default {\r\n\tdarkMode: 'selector',\r\n\tcontent: [\r\n                './src/**/*.{html,js,svelte,ts}',\r\n                join(require.resolve('@skeletonlabs/skeleton-svelte'), '../**/*.{html,js,svelte,ts}')\r\n        ],\r\n\ttheme: {\r\n\t\textend: {\r\n\t\t\tcolors: Object.keys(myproject_theme.properties).reduce((acc, k) => {\r\n\t\t\t\tif (k.startsWith('--on-')) {\r\n\t\t\t\t\tconst color = k.substring('--on-'.length);\r\n\t\t\t\t\tacc[color] = `rgb(var(--color-${color}-500) / <alpha-value>)`;\r\n\t\t\t\t}\r\n\t\t\t\treturn acc;\r\n\t\t\t}, {})\r\n\t\t}\r\n\t},\r\n\tplugins: [\r\n\t\tforms,\r\n\t\tskeleton({\r\n\t\t\tthemes: {\r\n\t\t\t\tcustom: [myproject_theme]\r\n\t\t\t}\r\n\t\t})\r\n\t]\r\n}; // satisfies Config\r\n\r\n```\r\n\r\nMy project folder structure is like this:\r\n```\r\n.git/\r\n.svelte-kit/\r\nnode_modules/\r\nsrc/\r\nstatic/\r\n.gitignore\r\n.npmrc\r\n.prettierignore\r\n.prettierrc\r\nREADME.md\r\njsconfig.json\r\npackage.json\r\npackage-lock.json\r\npostcss.config.cjs\r\nsvelte.config.js\r\ntailwind.config.js\r\nvite.config.js\r\n```\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.10\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.15.1\r\n\r\n**What operating system are you using?**\r\n\r\nLinux (NixOS 24.11)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14367","RelatedDescription":"Open issue \"3.4.10 - Warning regarding node_modules in pattern persist for skeleton theme (svelte)\" (#14367)"},{"Id":"2512014942","IsPullRequest":true,"CreatedAt":"2024-09-07T18:32:01","Actor":"adamwathan","Number":"14365","RawContent":null,"Title":"Extract more backwards compatibility logic to compatibility layer","State":"open","Body":"I noticed a lot more backwards compatibility concerns had started leaking into core, especially around the `theme` function, so did a bit of work to try and pull that stuff out and into the compatibility layer.\r\n\r\nNow the core version of `theme` only handles CSS variables (like `--color-red-500`) and has no knowledge of the dot notation or how to upgrade it. Instead, we unconditionally override that function in the compatibility layer with a light version that _does_ know how to do the dot notation upgrade, and override that again with the very heavy/slow version that handles JS config objects only if plugins/JS configs are actually used.\r\n\r\nI've also renamed `registerPlugins` to `applyCompatibilityHooks` because the name was definitely a bit out of date given how much work it's doing now, and now call it unconditionally from core, leaving that function to do any conditional optimizations itself internally.\r\n\r\nNext steps I think would be to split up `plugin-api.ts` a bit and maybe make `applyCompatibilityHooks` its own file, and move both of those files into the `compat` folder so everything is truly isolated there.\r\n\r\nMy goal with this stuff is that if/when we ever decide to drop backwards compatibility with these features in the future (maybe v5), that all we have to do is delete the one line of code that calls `applyCompatibilityHooks` in `index.ts`, and delete the `compat` folder and we're done. I could be convinced that this isn't a worthwhile goal if we feel it's making the codebase needlessly complex, so open to that discussion as well.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14365","RelatedDescription":"Open PR \"Extract more backwards compatibility logic to compatibility layer\" (#14365)"},{"Id":"2511207323","IsPullRequest":true,"CreatedAt":"2024-09-07T17:18:30","Actor":"thecrypticace","Number":"14362","RawContent":null,"Title":"Make config resolution lazy","State":"closed","Body":"The internal `registerPlugins()` API is used to enable backwards compatibility with v3 plugins and configs and it is called on every build even when no v3 plugins or configs are used. This function has a non-trivial cost in that case — around 5ms.\r\n\r\nSo this PR does a few things:\r\n\r\n## Implements a simpler, faster `theme(…)` function\r\n\r\nWe now have a much simpler `theme(…)` function that can be used when backwards compatibility is not necessary. It still supports many of the same features:\r\n- The modern, v4 style CSS variable syntax `theme(--color-red-500)`\r\n- The legacy, v3 path style `theme(colors.red.500)`\r\n- And the v3-style alpha modifier `theme(colors.red.500 / 50%)`\r\n- Path upgrades so things like `theme(accentColor.red.500)` pulls from `--color-red-500` when no `--accent-color-red-500` theme key exists\r\n\r\nWhen you do have plugins or configs the more advanced `theme(…)` function is swapped in for more complete backwards compatibility.\r\n\r\n## `registerPlugins` registers globs\r\n\r\nBefore `registerPlugins` passed the `ResolvedConfig` out so we could register globs in `compile()`. Since that one function is really the main driver for backwards compat we decided to move the content path registration into `registerPlugins` itself when it comes to paths provided by plugins and configs.\r\n\r\nThis is an internal implementation detail (well this entire PR is) but it's worth mentioning. This method is used to resolve a theme value from a theme key.\r\n\r\n## `registerPlugins` is now only called when necessary\r\n\r\nAll of the above work made it so that `registerPlugins` can be called only as needed. This means that when no v3 plugins or configs are used, `registerPlugins` is never called thus elminating the performance impact of config resolution.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14362","RelatedDescription":"Closed or merged PR \"Make config resolution lazy\" (#14362)"},{"Id":"2511092068","IsPullRequest":true,"CreatedAt":"2024-09-06T20:10:18","Actor":"thecrypticace","Number":"14360","RawContent":null,"Title":"Export `Config` type","State":"closed","Body":"Right now the following does not work and instead produces a type error:\r\n\r\n```\r\nimport { type Config } from 'tailwindcss'\r\n\r\nexport default {\r\n  // … config here\r\n} satisfies Config\r\n```\r\n\r\nWe were not exporting a `Config` type but thankfully this already exists in the codebase so we just need to export it.\r\n\r\nIt does _not_ have all properties of an existing config as not all features have been implemented (or in some cases necessary / relevant for v4).\r\n\r\nNotably missing are:\r\n- `important`\r\n- `prefix`\r\n- `separator`\r\n- `safelist`\r\n- `blocklist`\r\n- `future`\r\n- `experimental`\r\n- `corePlugins`\r\n\r\nAlso, explicit keys for theme are not currently specified but we should probably bring this back even if just as an auto-complete aid.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14360","RelatedDescription":"Closed or merged PR \"Export `Config` type\" (#14360)"},{"Id":"2510875345","IsPullRequest":true,"CreatedAt":"2024-09-06T20:05:26","Actor":"thecrypticace","Number":"14359","RawContent":null,"Title":"Allow configs to override default CSS theme values in `theme()` function provided to plugins and configs","State":"closed","Body":"Previously, given the following CSS and configuration:\r\n\r\n```css\r\n/* app.css */\r\n\r\n@theme default {\r\n  --font-size-base: 1.25rem;\r\n  --font-size-base--line-height: 1.5rem;\r\n}\r\n@tailwind utilities;\r\n@config \"./config.js\";\r\n```\r\n\r\n```js\r\n// config.js\r\n\r\nexport default {\r\n  theme: {\r\n    fontSize: {\r\n      // …\r\n      base: ['1rem', { lineHeight: '1.75rem' }],\r\n    },\r\n\r\n    // …\r\n  },\r\n};\r\n```\r\n\r\nWhen a config or a plugin asked for the value of `theme(fontSize.base)` like so:\r\n\r\n```js\r\n// config.js\r\nexport default {\r\n  theme: {\r\n    // …\r\n\r\n    typography: ({ theme }) => ({\r\n      css: {\r\n        '[class~=\"lead\"]': {\r\n          fontSize: theme('fontSize.base')[0],\r\n          ...theme('fontSize.base')[1],\r\n        },\r\n      }\r\n    }),\r\n  },\r\n};\r\n```\r\n\r\nWe would instead pull the values from the CSS theme even through they're marked with `@theme default`. This would cause the incorrect font size and line height to be used resulting in something like this (in the case of the typography plugin with custom styles):\r\n\r\n  ```css\r\n  .prose [class~=\"lead\"] {\r\n    font-size: 1.25rem;\r\n    line-height: 1.5rem;\r\n  }\r\n  ```\r\n\r\nAfter this change we'll now pull the values from the appropriate place (the config in this case) and the correct font size and line height will be used:\r\n\r\n  ```css\r\n  .prose [class~=\"lead\"] {\r\n    font-size: 1rem;\r\n    line-height: 1.75rem;\r\n  }\r\n  ```\r\n\r\nThis will work even when some values are overridden in the CSS theme:\r\n\r\n  ```css\r\n  /* app.css */\r\n  @theme default {\r\n    --font-size-base: 1.25rem;\r\n    --font-size-base--line-height: 1.5rem;\r\n  }\r\n  @theme {\r\n    --font-size-base: 2rem;\r\n  }\r\n  @tailwind utilities;\r\n  @config \"./config.js\";\r\n  ```\r\n\r\nwhich would result in the following CSS:\r\n\r\n  ```css\r\n  .prose [class~=\"lead\"] {\r\n    font-size: 2rem;\r\n    line-height: 1.75rem;\r\n  }\r\n  ```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14359","RelatedDescription":"Closed or merged PR \"Allow configs to override default CSS theme values in `theme()` function provided to plugins and configs\" (#14359)"},{"Id":"2510708823","IsPullRequest":true,"CreatedAt":"2024-09-06T17:05:48","Actor":"philipp-spiess","Number":"14358","RawContent":null,"Title":"Support CSS `theme()` functions inside `@custom-media` rules","State":"closed","Body":"This PR will now also scan `@custom-media` rules for invocations of the CSS `theme()` function.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14358","RelatedDescription":"Closed or merged PR \"Support CSS `theme()` functions inside `@custom-media` rules\" (#14358)"},{"Id":"2508601319","IsPullRequest":true,"CreatedAt":"2024-09-06T13:00:28","Actor":"adamwathan","Number":"14354","RawContent":null,"Title":"Properly resolve `theme('someKey.DEFAULT')` when only `--some-key-*` keys exist","State":"closed","Body":"This PR fixes an issue where theme function calls like `theme('transitionTimingFunction.DEFAULT')` would incorrectly resolve to an object when the set of defined CSS theme values looked like this:\r\n\r\n```css\r\n@theme {\r\n  --transition-timing-function-in: ease-in;\r\n  --transition-timing-function-out: ease-out;\r\n  --transition-timing-function-in-out: ease-out;\r\n}\r\n```\r\n\r\nWe were mistakenly retrieving the entire `--transition-timing-function-*` namespace in this case and returning an object, even though the user is explicitly asking for a single value by including `.DEFAULT` in their call.\r\n\r\nThis ensures it resolves to null instead. Fixes an issue I ran into on this live stream earlier today:\r\n\r\nhttps://x.com/adamwathan/status/1831740214051799281","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14354","RelatedDescription":"Closed or merged PR \"Properly resolve `theme('someKey.DEFAULT')` when only `--some-key-*` keys exist\" (#14354)"},{"Id":"2507789035","IsPullRequest":true,"CreatedAt":"2024-09-06T08:48:49","Actor":"philipp-spiess","Number":"14350","RawContent":null,"Title":"Integration tests: Move all file writes into retry block","State":"closed","Body":"There are still instances in which CI is flaky after #14332. This PR applies the same fix (that is, moving the file write into the retrying block) to all `retryAssertion` callbacks.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14350","RelatedDescription":"Closed or merged PR \"Integration tests: Move all file writes into retry block\" (#14350)"},{"Id":"2505624495","IsPullRequest":true,"CreatedAt":"2024-09-05T22:38:43","Actor":"RobinMalfait","Number":"14337","RawContent":null,"Title":"Use a bit flags for theme options instead of an object with booleans","State":"closed","Body":"This PR is a small improvement to the theme options where it's just a simple number now instead of an object with booleans.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14337","RelatedDescription":"Closed or merged PR \"Use a bit flags for theme options instead of an object with booleans\" (#14337)"},{"Id":"2508086720","IsPullRequest":true,"CreatedAt":"2024-09-05T21:00:57","Actor":"RobinMalfait","Number":"14351","RawContent":null,"Title":"Improve the CLI output when nothing changed","State":"closed","Body":"When we observe that no new candidates were found, then we can return early because nothing really changed. There is also no need to re-optimize (use Lightning CSS) in this case.\r\n\r\nBut this had a side effect that when no new candidates were detected, that you didn't see any output either. This feels like nothing is working from a DX perspective.\r\n\r\nTypically you are changing things, so it's not really a problem. But the moment you use a class that already existed (e.g.: in another file) you also don't get any output because we have a shared cache.\r\n\r\nThis PR solves that by always showing the output. But it still doesn't write to disk if nothing changed.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14351","RelatedDescription":"Closed or merged PR \"Improve the CLI output when nothing changed\" (#14351)"},{"Id":"2508350805","IsPullRequest":false,"CreatedAt":"2024-09-05T17:23:46","Actor":"FrancescoBorzi","Number":"14353","RawContent":null,"Title":"Build performance issue since TailwindCSS 3.4.8","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nI tried `3.4.8`, `3.4.9` and `3.4.10` - they all have the same problem.\r\n\r\nIt works fine until `3.4.7`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nAngular 17 with NX 19\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.17.0\r\n\r\n\r\n**What browser are you using?**\r\n\r\nIt does not matter, it's a build issue.\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nN/A\r\n\r\n**Describe your issue**\r\n\r\nBuild times (both serving the app and recompiling after changes) become extremely slow when upgrading `tailwindcss` from version `3.4.7` to version `3.4.8` or newer.\r\n\r\nSomething released in version `3.4.8` is causing a huge performance regression.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14353","RelatedDescription":"Open issue \"Build performance issue since TailwindCSS 3.4.8\" (#14353)"},{"Id":"2506210574","IsPullRequest":true,"CreatedAt":"2024-09-05T13:45:30","Actor":"thecrypticace","Number":"14346","RawContent":null,"Title":"Add GitHub release workflow","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14346","RelatedDescription":"Closed or merged PR \"Add GitHub release workflow\" (#14346)"},{"Id":"2507396819","IsPullRequest":true,"CreatedAt":"2024-09-05T12:24:50","Actor":"philipp-spiess","Number":"14349","RawContent":null,"Title":"Add integration test for Vite CSS module support","State":"closed","Body":"Wanted to make sure stuff works with CSS modules for both the postcss and the lightningcss pipeline.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14349","RelatedDescription":"Closed or merged PR \"Add integration test for Vite CSS module support\" (#14349)"},{"Id":"2507123921","IsPullRequest":true,"CreatedAt":"2024-09-05T10:40:16","Actor":"philipp-spiess","Number":"14348","RawContent":null,"Title":"Move opacity modifier support into plugin `theme()` function","State":"closed","Body":"This PR moves support for opacity modifies from the CSS  `theme()` function into the plugin `theme()` implementation, this will allow plugins to use this, too:\r\n\r\n```ts\r\nlet plugin = plugin(function ({ addUtilities, theme }) {\r\n    addUtilities({\r\n      '.percentage': {\r\n        color: theme('colors.red.500 / 50%'),\r\n      },\r\n      '.fraction': {\r\n        color: theme('colors.red.500 / 0.5'),\r\n      },\r\n      '.variable': {\r\n        color: theme('colors.red.500 / var(--opacity)'),\r\n      },\r\n    })\r\n  })\r\n}\r\n```\r\n\r\nThere's a small behavioral change for the CSS `theme()` function. Since tuples are resolved by default for the CSS `theme()` function only, these will no longer have opacity applied to their first values. This is probably fine given the reduced complexity as I don't expect the first values of tuples to be colors and the fix would mean we would have to parse the modifier in different places.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14348","RelatedDescription":"Closed or merged PR \"Move opacity modifier support into plugin `theme()` function\" (#14348)"},{"Id":"2506228122","IsPullRequest":true,"CreatedAt":"2024-09-04T20:37:57","Actor":"moshie","Number":"14347","RawContent":null,"Title":"Update Types to allow an array of CSSRuleObjects","State":"open","Body":"When generating tailwind css to js using prejss it combines sections in an array which tailwind's types are not happy with. \r\n\r\n```\r\n\"@supports (color: oklch(0% 0 0))\": [\r\n      {\r\n        \".btn\": {\r\n          \"backgroundColor\": \"var(--btn-color, var(--zui-primary-button))\",\r\n          \"borderColor\": \"var(--btn-color, var(--zui-primary-button))\"\r\n        }\r\n      },\r\n      {\r\n        \".btn-primary\": {\r\n          \"-BtnColor\": \"var(--primary-button)\"\r\n        }\r\n      }\r\n    ],\r\n```\r\n\r\nI propose we update the type to allow for CSSRuleObjects[]\r\n\r\nrelated to: #14054\r\n\r\n\r\n<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14347","RelatedDescription":"Open PR \"Update Types to allow an array of CSSRuleObjects\" (#14347)"},{"Id":"2506087949","IsPullRequest":true,"CreatedAt":"2024-09-04T19:30:21","Actor":"adamwathan","Number":"14344","RawContent":null,"Title":"Ensure `--default-font-*` and `--default-mono-font-*` variables respect theme customizations in JS config files","State":"closed","Body":"This PR fixes an issue where variables like `--default-font-family` wouldn't behave as expected when customizing `fontFamily.sans` or `fontFamily.mono` in a JS config.\r\n\r\nBecause theme values added by JS config files are added as `reference`, customizing `fontFamily.sans` means the `--font-family-sans` variable no longer exists in the generated CSS.\r\n\r\nThe `--default-font-family` variable is set to `var(--font-family-sans)` by default, so because that variable doesn't exist, `--default-font-family` is effectively undefined and the browser default font stack is used. This is unexpected because historically customizing `fontFamily.sans` has updated your default font for your entire project.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14344","RelatedDescription":"Closed or merged PR \"Ensure `--default-font-*` and `--default-mono-font-*` variables respect theme customizations in JS config files\" (#14344)"},{"Id":"2505671851","IsPullRequest":false,"CreatedAt":"2024-09-04T19:15:50","Actor":"Chandu4221","Number":"14338","RawContent":null,"Title":"Custom boxShadow not working when extend the theme using tailwind.config.js","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n`^3.4.10`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n`\"vite\": \"^5.4.1\"`  `\"postcss\": \"^8.4.41\"`  `\"tailwindcss\": \"^3.4.10\"`\r\n\r\n**What version of Node.js are you using?**\r\n`node - v20.12.2`  `npm:10.5.2`\r\n\r\n**What browser are you using?**\r\n`Chrome - 124.0.6367.61`\r\n\r\n**What operating system are you using?**\r\n`Windows 10`\r\n\r\n**Reproduction URL**\r\n\r\n`package.json` dependencies and dev dependencies\r\n```json\r\n{\r\n \"dependencies\": {\r\n    \"@radix-ui/react-slot\": \"^1.1.0\",\r\n    \"class-variance-authority\": \"^0.7.0\",\r\n    \"clsx\": \"^2.1.1\",\r\n    \"lucide-react\": \"^0.436.0\",\r\n    \"react\": \"^18.3.1\",\r\n    \"react-dom\": \"^18.3.1\",\r\n    \"tailwind-merge\": \"^2.5.2\",\r\n    \"tailwindcss-animate\": \"^1.0.7\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@eslint/js\": \"^9.9.0\",\r\n    \"@types/node\": \"^22.5.0\",\r\n    \"@types/react\": \"^18.3.3\",\r\n    \"@types/react-dom\": \"^18.3.0\",\r\n    \"@vitejs/plugin-react\": \"^4.3.1\",\r\n    \"autoprefixer\": \"^10.4.20\",\r\n    \"eslint\": \"^9.9.0\",\r\n    \"eslint-plugin-react-hooks\": \"^5.1.0-rc.0\",\r\n    \"eslint-plugin-react-refresh\": \"^0.4.9\",\r\n    \"globals\": \"^15.9.0\",\r\n    \"postcss\": \"^8.4.41\",\r\n    \"tailwindcss\": \"^3.4.10\",\r\n    \"typescript\": \"^5.5.3\",\r\n    \"typescript-eslint\": \"^8.0.1\",\r\n    \"vite\": \"^5.4.1\"\r\n  }\r\n  }\r\n```\r\n[Tailwind Playground working here](https://play.tailwindcss.com/SYIVUe6jCr)\r\n\r\n**Describe your issue**\r\nI am using `create vite@latest` with `react-ts` and installed `shadcn-ui`\r\n\r\nI have tried extending the `boxShadow` class in the `tailwind.config.js` (refer below image)\r\n\r\n![image](https://github.com/user-attachments/assets/942844d3-83b9-424f-bcdf-036fa7ff2203)\r\n\r\nI am also getting suggestion in vscode when i hover on the class pop up with the css rule is shown (refer below image)\r\n\r\n![image](https://github.com/user-attachments/assets/66608083-cc8e-426a-9e05-6212bf0fcc51)\r\n\r\nbut when i inspect the element on webpage my custom shadow class is missing (refer below image)\r\n\r\n![image](https://github.com/user-attachments/assets/a062be58-d190-43df-ace3-c3247a31d4c3)\r\n\r\n---\r\n\r\nWhen i modify the `key` in `tailwind.config.js` (refer below image)\r\n\r\n![image](https://github.com/user-attachments/assets/f8b00637-eda1-414e-9033-438d1154be00)\r\n\r\nand apply the class to my component \r\n![image](https://github.com/user-attachments/assets/690e8d69-fcc4-489b-bbe0-c5959fea70f4)\r\n\r\nand inspect the component in web page (refer below image)\r\nit is working as expected.\r\n![image](https://github.com/user-attachments/assets/b4e5823b-08f6-4dbf-b758-ed42965c8e5c)\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14338","RelatedDescription":"Closed issue \"Custom boxShadow not working when extend the theme using tailwind.config.js\" (#14338)"},{"Id":"2506068601","IsPullRequest":true,"CreatedAt":"2024-09-04T19:03:47","Actor":"adamwathan","Number":"14343","RawContent":null,"Title":"Support arrays in JS config values","State":"closed","Body":"This PR fixes a small bug where theme values could not be defined as arrays in JS config files, for example:\r\n\r\n```js\r\nexport default {\r\n  theme: {\r\n    fontFamily: {\r\n      sans: ['Inter', 'system-ui', 'sans-serif'],\r\n    },\r\n  },\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14343","RelatedDescription":"Closed or merged PR \"Support arrays in JS config values\" (#14343)"},{"Id":"2505792919","IsPullRequest":false,"CreatedAt":"2024-09-04T17:43:19","Actor":"devjiwonchoi","Number":"14341","RawContent":null,"Title":"[4.0.0-alpha.21] Next.js build fails when imported CSS file with `@import 'tailwindcss';`","State":"closed","Body":"> [!NOTE]\r\n> `tailwindcss@4.0.0-alpha.20` works\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.21\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n```\r\n\"dependencies\": {\r\n  \"next\": \"14.2.7\",\r\n  \"react\": \"18.3.1\",\r\n  \"react-dom\": \"18.3.1\"\r\n},\r\n\"devDependencies\": {\r\n  \"@tailwindcss/postcss\": \"4.0.0-alpha.21\",\r\n  \"@types/node\": \"22.5.3\",\r\n  \"@types/react\": \"18.3.5\",\r\n  \"@types/react-dom\": \"18.3.0\",\r\n  \"tailwindcss\": \"4.0.0-alpha.21\",\r\n  \"typescript\": \"5.5.4\"\r\n},\r\n```\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv18.18.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/devjiwonchoi/repro-tailwindcss-next\r\n\r\n**Describe your issue**\r\n\r\n1. Imported a `globals.css` file at the root `layout.tsx`.\r\n2. `globals.css` includes `@import 'tailwindcss';` at the top.\r\n3.  Build fails with `TypeError: w.register is not a function` error.\r\n\r\nOutput:\r\n\r\n```\r\n> next build\r\n\r\n  ▲ Next.js 14.2.7\r\n\r\n   Creating an optimized production build ...\r\nFailed to compile.\r\n\r\n-- inner error --\r\nTypeError: w.register is not a function\r\n    at Object.<anonymous> (/.../node_modules/@tailwindcss/node/dist/index.js:1:2323)\r\n    at ...\r\n\r\nImport trace for requested module:\r\n./app/globals.css\r\n\r\n> Build failed because of webpack errors\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14341","RelatedDescription":"Closed issue \"[4.0.0-alpha.21] Next.js build fails when imported CSS file with `@import 'tailwindcss';`\" (#14341)"},{"Id":"2505850835","IsPullRequest":true,"CreatedAt":"2024-09-04T17:43:18","Actor":"philipp-spiess","Number":"14342","RawContent":null,"Title":"Fix a crash with older Node.js versions","State":"closed","Body":"Closes #14341","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14342","RelatedDescription":"Closed or merged PR \"Fix a crash with older Node.js versions\" (#14342)"},{"Id":"2505757344","IsPullRequest":true,"CreatedAt":"2024-09-04T17:14:05","Actor":"philipp-spiess","Number":"14340","RawContent":null,"Title":"Vite: Add support for `<style>` tags in Astro files","State":"closed","Body":"This works similar to the Vue setup. The styles that Astro will receive might still contain Tailwind CSS APIs but since it's not picky, we can pass that through to the regular Vite `transform` handlers for now.\r\n\r\nThis, however, will have issues like https://github.com/tailwindlabs/tailwindcss/issues/14205. We have to fix this together with Vue and other similar extensions later. For now, it will break when syntax is used that lightningcss rewrites (like `@apply text-3xl/tight;`)","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14340","RelatedDescription":"Closed or merged PR \"Vite: Add support for `<style>` tags in Astro files\" (#14340)"},{"Id":"2505741614","IsPullRequest":true,"CreatedAt":"2024-09-04T16:57:32","Actor":"thecrypticace","Number":"14339","RawContent":null,"Title":"Don’t suggest named opacity modifiers in intellisense","State":"closed","Body":"We removed named opacity modifier support in #14278 but we (read: me lol) totally forgot about the suggestions in intellisense. So we need to make sure that we don't suggest those either.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14339","RelatedDescription":"Closed or merged PR \"Don’t suggest named opacity modifiers in intellisense\" (#14339)"},{"Id":"2504061832","IsPullRequest":true,"CreatedAt":"2024-09-04T15:49:50","Actor":"adamwathan","Number":"14327","RawContent":null,"Title":"Add `default` option to `@theme` to support overriding default theme values from plugins/JS config files","State":"closed","Body":"This PR adds a new `default` option to `@theme` to make it possible for plugins/JS config files to override default theme values, and also ensures that the final set of CSS variables we output takes into account any theme values added by plugins/JS config files.\r\n\r\n---\r\n\r\nPreviously, if you were using the default theme but also had a JS config file that overrode any of those defaults like this:\r\n\r\n```js\r\n// ./tailwind.config.js\r\nexport default {\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        red: {\r\n          '500': 'tomato',\r\n        },\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n…then utilities like `text-red-500` would correctly use `color: tomato`, but the `--color-red-500` CSS variable would still be set to the default value:\r\n\r\n```css\r\n:root {\r\n  --color-red-500: #ef4444;\r\n}\r\n```\r\n\r\nThis feels like a straight-up bug — if `#ef4444` is not part of your design system because you've overridden it, it shouldn't show up in your set of CSS variables anywhere.\r\n\r\nSo this PR fixes this issue by making sure we don't print the final set of CSS variables until all of your plugins and config files have had a chance to update the theme.\r\n\r\n---\r\n\r\nThe second issue is that we realized people have different expectations about how plugin/config theme values should interact with Tailwind's _default_ theme vs. explicitly user-configured theme values.\r\n\r\nTake this setup for instance:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n@config \"./tailwind.config.js\";\r\n```\r\n\r\nIf `tailwind.config.js` overrides `red-500` to be `tomato`, you'd expect `text-red-500` to actually be `tomato`, not the default `#ef4444` color.\r\n\r\nBut in this setup:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n@config \"./tailwind.config.js\";\r\n@theme {\r\n  --color-red-500: #f00;\r\n}\r\n```\r\n\r\n…you'd expect `text-red-500` to be `#f00`. This is despite the fact that currently in Tailwind there is no difference here — they are both just `@theme` blocks, one just happens to be coming from an imported file (`@import \"tailwindcss\"`).\r\n\r\nSo to resolve this ambiguity, I've added a `default` option to `@theme` for explicitly registering theme values as \"defaults\" that are safe to override with plugin/JS config theme values:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n@config \"./tailwind.config.js\";\r\n@theme default {\r\n  --color-red-500: #f00;\r\n}\r\n```\r\n\r\nNow `text-red-500` would be `tomato` here as per the config file.\r\n\r\nThis API is not something users are generally going to interact with — they will almost never want to use `default` explicitly. But in this PR I've updated the default theme we ship with to include `default` so that it interacts in a more intuitive way with plugins and JS config files.\r\n\r\n---\r\n\r\nFinally, this PR makes sure all theme values registered by plugins/configs are registered with `isReference: true` to make sure they do not end up in the final CSS at all.\r\n\r\nThis is important to make sure that the super weird shit we used to do in configs in v3 doesn't get translated into nonsense variables that pollute your output (hello typography plugin I'm looking at you).\r\n\r\nIf we don't do this, you'll end up with CSS variables like this:\r\n\r\n```css\r\n:root {\r\n  --typography-sm-css-blockquote-padding-inline-start: 1.25em;\r\n}\r\n```\r\n\r\nPreventing theme values registered in plugins/configs from outputting CSS values also serves the secondary purpose of nudging users to migrate to the CSS config if they do want CSS variables for their theme values.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14327","RelatedDescription":"Closed or merged PR \"Add `default` option to `@theme` to support overriding default theme values from plugins/JS config files\" (#14327)"},{"Id":"2504015452","IsPullRequest":true,"CreatedAt":"2024-09-04T15:49:02","Actor":"adamwathan","Number":"14326","RawContent":null,"Title":"Evaluate theme functions in plugins","State":"closed","Body":"This PR fixes a bug where CSS `theme()` functions were not evaluated when present in rules added by plugins, using either `@plugin` or registering a plugin in a JS config file.\r\n\r\nFor example, prior to this PR the `theme()` functions in this plugin would make it into the final CSS without being evaluated:\r\n\r\n```js\r\n// ./my-plugin.js\r\nexport default plugin(({ addBase }) => {\r\n  addBase({\r\n    '.my-rule': {\r\n      background: 'theme(colors.primary)',\r\n      color: 'theme(colors.secondary)',\r\n    },\r\n  })\r\n})\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14326","RelatedDescription":"Closed or merged PR \"Evaluate theme functions in plugins\" (#14326)"},{"Id":"2505240352","IsPullRequest":true,"CreatedAt":"2024-09-04T15:09:33","Actor":"philipp-spiess","Number":"14332","RawContent":null,"Title":"Integration tests: Fix Windows flake for Vite watch mode","State":"closed","Body":"I noticed the Windows integration tests for Vite's `watch` mode have been flaky. Moving the file write into the retrying assertion callback seems to fix it and allows us to get rid of the arbitrary timeout (I don't remember that I ever added this in the first place 😅 ).","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14332","RelatedDescription":"Closed or merged PR \"Integration tests: Fix Windows flake for Vite watch mode\" (#14332)"},{"Id":"2505615208","IsPullRequest":false,"CreatedAt":"2024-09-04T15:00:31","Actor":"sntran","Number":"14336","RawContent":null,"Title":"No way to use the old transform syntax","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n`tailwindcss v4.0.0-alpha.20`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`@tailwindcss/cli v4.0.0-alpha.20`\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.12.2\r\n\r\n**What browser are you using?**\r\n\r\nChrome version 128.0.6613.85 (Official Build) (arm64)\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/yocdck2wZU\r\n\r\n**Describe your issue**\r\n\r\nTailwind v4 switch from the single `transform` style that composes of various properties for translate, scale, etc.. to individual `translate` and `scale`. While this is great, it makes it hard to calculate the transformation matrix. We have some elements that transform when scrolled to. They can be sliding from a side, or scaling up, etc... To detect when the element appears on screen, we depend on its bounding rectangle. However, with transformation, such bounding changes on animation.\r\n\r\nWe can adjust for that using the computed `transform` style. Unfortunately, it has value `none` when used with Tailwind v4. We can use computed `translate` and `scale` styles, but because animations can be arbitrary, it's hard to calculate the final transform from those.\r\n\r\nWould there be a way to explicitly tell Tailwind v4 to use `transform` instead?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14336","RelatedDescription":"Open issue \"No way to use the old transform syntax\" (#14336)"},{"Id":"2505586872","IsPullRequest":true,"CreatedAt":"2024-09-04T14:49:24","Actor":"MartijnCuppens","Number":"14335","RawContent":null,"Title":"Switch to line height functions","State":"open","Body":"## Introduction\r\n\r\nIn this PR, I’ll tackle 6 issues we currently have with the way line heights are used in Tailwind. Some of these issues have workarounds that work well, but the idea is that this PR uses a technique to avoid these workarounds. After I explain the issues, I’ll explain step-by-step how I ended up with the current implementation which might be a little overwhelming at first. The reason I combined these issues is because the solutions will continuously override each other.\r\n\r\n## Issues\r\n\r\n### 1. Line heights are not inherited from parents\r\n\r\nFor example:\r\n```html\r\n<div class=\"leading-thight\">\r\n  <div class=\"text-xl\">\r\n    `leading-thight` is ignored here.\r\n  </div>\r\n</div>\r\n```\r\n\r\n### 2. Line heights in mobile variants are reset\r\n\r\nDetails of this issue can be found here: https://github.com/tailwindlabs/tailwindcss/issues/6504 and https://github.com/tailwindlabs/tailwindcss/issues/2808.\r\n\r\n### 3. The line height of `text-lg` feels a bit off\r\n\r\nSee https://github.com/tailwindlabs/tailwindcss/pull/14223. The line height feels a bit “too loose”. This PR will make clear why I opened that PR 😃.\r\n\r\n### 4. Hard to find sensible line heights when using arbitrary font-sizes\r\n\r\nWhen using arbitrary values for font sizes, the default line height of `1.5` will be used (inherited from `<body>`). Let’s say we want to use `text-[2.4rem]`, this will have a line height of `3.6rem`, which is obviously too huge. We can fix this by using modifiers, but this somewhat makes the font-size utility the only utility that requires modifiers. \r\n\r\n### 5. Named leadings sometimes are a little confusing\r\n\r\nThere is a difference between the normal line height (`1.5`) and the default line height (specified per font size in the config) which isn’t really clear. Also, in cases like `text-3xl leading-tight`, the leading class actually makes the line height less tight. \r\n\r\n### 6. `<small>` influences the line height\r\n\r\nSee https://play.tailwindcss.com/BXck05lL3v. The line height is set via the `text-2xl`, and because `<small>` is aligned to the baseline, there will be more whitespace at the bottom.\r\n\r\n## The fixes\r\n\r\n### Inheritance with custom properties\r\nTo fix (1) and (2), we can rewrite the leading utilities like this:\r\n\r\n```css\r\n.leading-tight {\r\n  --tw-line-height: 1.25;\r\n  line-height: var(--tw-line-height);\r\n}\r\n```\r\n\r\nAnd the font size utility like this:\r\n\r\n```css\r\n.text-2xl {\r\n  font-size: 1.5rem;\r\n  line-height: var(--tw-line-height, 2rem);\r\n}\r\n```\r\n\r\nThis way, the line height of a parent (or the element itself) with a leading will be used if present.\r\n\r\n### Finding a line height function\r\nFor the other issues we’re going to do something different. Let’s start by putting the font sizes and their line heights in a table. We’ll convert everything to rem, so it’s easier to understand:\r\n\r\n  | Font size (rem) | Line height (rem)\r\n-- | -- | --\r\ntext-xs | 0.75 | 1\r\ntext-sm | 0.875 | 1,25\r\ntext-base | 1 | 1.5\r\ntext-lg | 1.125 | 1.75\r\ntext-xl | 1.25 | 1.75\r\ntext-2xl | 1.5 | 2\r\ntext-3xl | 1.875 | 2.25\r\ntext-4xl | 2.25 | 2.5\r\ntext-5xl | 3 | 3\r\ntext-6xl | 3.75 | 3.75\r\ntext-7xl | 4.5 | 4.5\r\ntext-8xl | 6 | 6\r\ntext-9xl | 8 | 8\r\n\r\n\r\nIdeally, we would have some kind of relation between the font sizes and line heights, but because the line heights of tailwind are hand-picked, we do not have this. However, there seem to be 4 line height functions that partially have a relation with the current values.\r\n\r\n_Some notes before reading the next table:_\r\n- I used linear equations to calculate the line heights. I'll spare you the details, because it’s all just boring mathematics.\r\n- The line height of text-lg is already adjusted in the following table (fixing issue 3)\r\n- Matching line heights are bold & italic\r\n\r\n  | Font size (`rem`) | Line height (`rem`) | A:<br> `2em-.5rem` | B:<br> `1em + .5rem` | C:<br> `2em / 3 + 1rem` | D:<br> `1em`\r\n-- | -- | -- | -- | -- | -- | --\r\ntext-xs | 0.75 | _**1**_ | _**1**_ | 1.25 | 1.5 | 0.75\r\ntext-sm | 0.875 | _**1.25**_ | _**1.25**_ | 1.375 | 1.583333333 | 0.875\r\ntext-base | 1 | _**1.5**_ | _**1.5**_ | _**1.5**_ | 1.666666667 | 1\r\ntext-lg | 1.125 | _**1.625**_ | 1.75 | _**1.625**_ | 1.75 | 1.125\r\ntext-xl | 1.25 | _**1.75**_ | 2 | _**1.75**_ | 1.833333333 | 1.25\r\ntext-2xl | 1.5 | _**2**_ | 2.5 | _**2**_ | _**2**_ | 1.5\r\ntext-3xl | 1.875 | _**2.25**_ | 3.25 | 2.375 | _**2.25**_ | 1.875\r\ntext-4xl | 2.25 | _**2.5**_ | 4 | 2.75 | _**2.5**_ | 2.25\r\ntext-5xl | 3 | _**3**_ | 5.5 | 3.5 | _**3**_ | _**3**_\r\ntext-6xl | 3.75 | _**3.75**_ | 7 | 4.25 | 3.5 | _**3.75**_\r\ntext-7xl | 4.5 | _**4.5**_ | 8.5 | 5 | 4 | _**4.5**_\r\ntext-8xl | 6 | _**6**_ | 11.5 | 6.5 | 5 | _**6**_\r\ntext-9xl | 8 | _**8**_ | 15.5 | 8.5 | 6.333333333 | _**8**_\r\n\r\n\r\nIf we take a closer look, we’ll notice the line height should be the minimum of A,B&C, and at least D. Thanks to css functions, we can write this as:\r\n\r\n```\r\nline-height: max(1em, min(2em / 3 + 1rem, min(1em + .5rem, 2em - .5rem)));\r\n```\r\n\r\nWhich means font size utilities can look like:\r\n\r\n```css\r\n.text-2xl {\r\n  font-size: 1.5rem;\r\n  line-height: max(1em, min(2em / 3 + 1rem, min(1em + .5rem, 2em - .5rem)));\r\n}\r\n```\r\n\r\n### Using the line height function\r\n\r\nOk, now let’s have a look at what we can do with this. We can now drop all line heights defined in the config, because the line height function will take care of it. Now the line height of arbitrary values are automatically calculated based on the idea of decreasing the line height for larger font sizes. If we take our example from issue 4 (`text-[2.4rem]`), we’ll see that the calculated line height falls in the `2em / 3 + 1rem` range, so the line height will be `2.6rem`. Much better.\r\n\r\n### Keeping support for using line heights in the config\r\n\r\nOur brand new line height function provides sensible defaults, but someone might want to use a fixed line-height instead. If we also want to support line height inheritance, we can rewrite our font size utilities like this if a line height is present in our config:\r\n\r\n```css\r\n.text-2xl {\r\n  font-size: 1.5rem;\r\n  line-height: var(--tw-line-height, var(--font-size-2xl--line-height));\r\n}\r\n```\r\n\r\n### Fixing named line heights\r\n\r\nNow let’s have a look at how to improve our named leadings. Using distributivity, we can isolate 1.5 in our line height function:\r\n\r\n```\r\nmax(1em, min(2em / 3 + 1rem, min(1em + .5rem, 2em - .5rem)))\r\n```\r\n\r\nbecomes:\r\n\r\n```\r\nmax(1em, 1.5 * min(4em / 9 + 2rem / 3, min((2em + 1rem) / 3, (4em - 1rem) / 3)))\r\n```\r\n\r\nNow that we have isolated 1.5, we can change this number by the other line height factors, for example:\r\n\r\n```css\r\n.leading-tight {\r\n  --tw-line-height: max(1em, 1.25 * min(4em / 9 + 2rem / 3, min((2em + 1rem) / 3, (4em - 1rem) / 3)));\r\n  line-height: var(--tw-line-height);\r\n}\r\n```\r\n\r\nLet’s have a look at how this looks when we plot the calculated line heights with the font sizes. I’ve used the relative line heights and a logarithmic scale to better see what is going on:\r\n\r\n![Relative line height vs font size](https://github.com/user-attachments/assets/a7f218b6-c260-49de-99d1-45e6c094b83a)\r\n\r\nThe only difference between “default tailwind” (pre PR) and “adjusted normal” is the `text-lg` value. All other named leadings are now adjusted to the value of the font size.\r\n\r\nNow that we have adjusted our line-height/leading config to variables, we can use the `--line-height-normal` variable in the font size utility:\r\n\r\n```css\r\n.text-2xl {\r\n  font-size: 1.5rem;\r\n  line-height: var(--tw-line-height, var(--line-height-normal));\r\n}\r\n```\r\n\r\nIn the meanwhile, we have also fixed issue 5. The “default line height” is now equal to the normal line height, and named line heights have the expected influence on font sizes (tighter, more relaxed,...).\r\n\r\n### `<small>` fix\r\nThe last fix is just a small one, we just need to adjust the line height to fix the whitespace:\r\n\r\n```css\r\nsmall {\r\n  font-size: 80%;\r\n  line-height: var(--tw-line-height, var(--line-height-normal));\r\n}\r\n```\r\n\r\n## Remarks\r\n\r\n- I'm using prefixed (`--tw-line-height`) and unprefixed `--line-height-normal` custom properties, because I assumed configurable variables aren't prefixed, but internal variables are. \r\n- The whole `min(4em / 9 + 2rem / 3, min((2em + 1rem) / 3, (4em - 1rem) / 3))` function can be moved to a separate variable to make things a little more readable.\r\n- The tests shuffled the order of some utilities, not sure why. But that's why there are so many changes there.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14335","RelatedDescription":"Open PR \"Switch to line height functions\" (#14335)"},{"Id":"2503141018","IsPullRequest":true,"CreatedAt":"2024-09-03T16:01:04","Actor":"philipp-spiess","Number":"14323","RawContent":null,"Title":"CSS `theme()`: Add unit test that combines CSS variable syntax with opacity modifier","State":"closed","Body":"This PR adds a new test case to the branches that test the CSS `theme()` function with the CSS variable syntax. The new case includes an opacity modifier and ensures that the opacity is properly added.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14323","RelatedDescription":"Closed or merged PR \"CSS `theme()`: Add unit test that combines CSS variable syntax with opacity modifier\" (#14323)"},{"Id":"2502688619","IsPullRequest":false,"CreatedAt":"2024-09-03T15:27:19","Actor":"boylett","Number":"14320","RawContent":null,"Title":"[v4] theme() function does not work with media query range syntax operators","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n`4.0.0-alpha.21`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\nRemix, Vite\r\n\r\n**What version of Node.js are you using?**\r\n`22.4.1`\r\n\r\n**What browser are you using?**\r\nChrome, Safari and Firefox\r\n\r\n**What operating system are you using?**\r\nmacOS Sonoma 14.6.1\r\n\r\n**Reproduction URL**\r\n[https://github.com/boylett/tailwindcss-v4-theme-in-media-bug](https://github.com/boylett/tailwindcss-v4-theme-in-media-bug)\r\n\r\n**Describe your issue**\r\nUsing `theme()` in media queries does not work when using range syntax operators such as `<=` and `>=`.\r\nSee [root.css](https://github.com/boylett/tailwindcss-v4-theme-in-media-bug/blob/main/app/root.css) in the repro.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14320","RelatedDescription":"Closed issue \"[v4] theme() function does not work with media query range syntax operators\" (#14320)"},{"Id":"2502754718","IsPullRequest":true,"CreatedAt":"2024-09-03T15:27:18","Actor":"philipp-spiess","Number":"14321","RawContent":null,"Title":"Ensure CSS `theme()` functions are evaluated in media query ranges with collapsed whitespace","State":"closed","Body":"Fixes #14320\r\n\r\nThis PR adds `>`, `<`, and `=` as separators into the CSS value parser. This is necessary because [`@media` range context](https://www.w3.org/TR/mediaqueries-4/#mq-range-context) does not require spaces around these operators so something like this is a valid value for the range syntax:\r\n\r\n```css\r\n@media (40rem<width<=48rem) { \r\n  /* ... */\r\n}\r\n```\r\n\r\nIf you add our CSS `theme()` function to the mix, this rule look like that:\r\n\r\n```css\r\n@media (theme(--breakpoint-sm)<width<=theme(--breakpoint-md)) {\r\n  /* ... */\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14321","RelatedDescription":"Closed or merged PR \"Ensure CSS `theme()` functions are evaluated in media query ranges with collapsed whitespace\" (#14321)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-09-09T03:30:21.9443288Z","RunDurationInMilliseconds":445}