{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2586583511","IsPullRequest":true,"CreatedAt":"2024-10-14T16:56:38","Actor":"thecrypticace","Number":"14667","RawContent":null,"Title":"Support complex compound variants in `group-*`, `peer-*`, `has-*`, and `not-*`","State":"open","Body":"This PR adds support for more complex variant definitions when using the four compound variants: `group-*`, `peer-*`, `has-*`, and `not-*`. Before this PR these variants were limited in what compound variants they supported — often limited to single rules with single selectors.\r\n\r\nNow, all of these variants support (nearly) the full range of all variant definitions.\r\n\r\nExamples TBD — opening to get some eyes on stuff","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14667","RelatedDescription":"Open PR \"Support complex compound variants in `group-*`, `peer-*`, `has-*`, and `not-*`\" (#14667)"},{"Id":"2581247449","IsPullRequest":true,"CreatedAt":"2024-10-14T15:45:36","Actor":"philipp-spiess","Number":"14648","RawContent":null,"Title":"Detect and migrate static plugin usages","State":"closed","Body":"This PR builds on top of the new [JS config to CSS migration](https://github.com/tailwindlabs/tailwindcss/pull/14651) and extends it to support migrating _static_ plugins.\r\n\r\nWhat are _static_ plugins you might ask? Static plugins are plugins where we can statically determine that these are coming from a different file (so there is nothing inside the JS config that creates them). An example for this is this config file:\r\n\r\n```js\r\nimport typographyPlugin from '@tailwindcss/typography'\r\nimport { type Config } from 'tailwindcss'\r\n\r\nexport default {\r\n  content: ['./src/**/*.{js,jsx,ts,tsx}'],\r\n  darkMode: 'selector',\r\n  plugins: [typographyPlugin],\r\n} satisfies Config\r\n```\r\n\r\nHere, the `plugins` array only has one element and it is a static import from the `@tailwindcss/typography` module. In this PR we attempt to parse the config file via Tree-sitter to extract the following information from this file:\r\n\r\n- What are the contents of the `plugins` array\r\n- What are statically imported resources from the file\r\n\r\nWe then check if _all_ entries in the `plugins` array are either static resources or _strings_ (something I saw working in some tests but I’m not sure it still does). We migrate the JS config file to CSS if all plugins are static and we can migrate them to CSS `@plugin` calls.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14648","RelatedDescription":"Closed or merged PR \"Detect and migrate static plugin usages\" (#14648)"},{"Id":"2586428312","IsPullRequest":true,"CreatedAt":"2024-10-14T15:45:17","Actor":"philipp-spiess","Number":"14666","RawContent":null,"Title":"Migrate keyframes from JS to CSS","State":"open","Body":"This PR adds support for rewriting JS theme config `keyframes` to CSS as part of the JS config to CSS migration.\r\n\r\nExample:\r\n\r\n```ts\r\nimport { type Config } from 'tailwindcss'\r\n\r\nmodule.exports = {\r\n  theme: {\r\n    extend: {\r\n      keyframes: {\r\n        'spin-clockwise': {\r\n          '0%': { transform: 'rotate(0deg)' },\r\n          '100%': { transform: 'rotate(360deg)' },\r\n        },\r\n        'spin-counterclockwise': {\r\n          '0%': { transform: 'rotate(0deg)' },\r\n          '100%': { transform: 'rotate(-360deg)' },\r\n        },\r\n      },\r\n      animation: {\r\n        'spin-clockwise': 'spin-clockwise 1s linear infinite',\r\n        'spin-counterclockwise': 'spin-counterclockwise 1s linear infinite',\r\n      },\r\n    },\r\n  },\r\n} satisfies Config\r\n```\r\n\r\nWill be printed as:\r\n\r\n```css\r\n@theme {\r\n  --animate-spin-clockwise: spin-clockwise 1s linear infinite;\r\n  --animate-spin-counterclockwise: spin-counterclockwise 1s linear infinite;\r\n\r\n  @keyframes spin-clockwise {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n  @keyframes spin-counterclockwise {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(-360deg);\r\n    }\r\n  }\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14666","RelatedDescription":"Open PR \"Migrate keyframes from JS to CSS\" (#14666)"},{"Id":"2586269471","IsPullRequest":true,"CreatedAt":"2024-10-14T14:46:07","Actor":"RobinMalfait","Number":"14664","RawContent":null,"Title":"Migrate `theme(…)` calls to `var(…)` or the modern `theme(…)` syntax","State":"open","Body":"This PR adds a codemod to convert `theme(…)` calls to `var(…)` calls. If we can't safely do this, then we try to convert the `theme(…)` syntax (dot notation) to the modern `theme(…)` syntax (with CSS variable-like syntax).\n\n### Let's look at some examples:\n\n**Simple example:**\n\nInput:\n```html\n<div class=\"bg-[theme(colors.red.500)]\"></div>\n```\n\nOutput:\n```html\n<div class=\"bg-[var(--color-red-500)]\"></div>\n```\n\n---\n\n**With fallback:**\n\nInput:\n```html\n<div class=\"bg-[theme(colors.red.500,theme(colors.blue.500))]\"></div>\n```\n\nOutput:\n```html\n<div class=\"bg-[var(--color-red-500,var(--color-blue-500))]\"></div>\n```\n\n---\n\n**With modifiers:**\n\nInput:\n```html\n<div class=\"bg-[theme(colors.red.500/75%)]\"></div>\n```\n\nOutput:\n```html\n<div class=\"bg-[var(--color-red-500)]/75\"></div>\n```\n\nWe can special case this, because if you are using that modifier syntax we _assume_ it's being used in a `theme(…)` call referencing a color. This means that we can also convert it to a modifier on the actual candidate.\n\n---\n\n**With modifier, if a modifier is already present:**\n\nInput:\n```html\n<div class=\"bg-[theme(colors.red.500/75%)]/50\"></div>\n```\n\nOutput:\n```html\n<div class=\"bg-[theme(--color-red-500/75%)]/50\"></div>\n```\n\nIn this case we can't use the `var(…)` syntax because that requires us to move the opacity modifier to the candidate itself. In this case we could use math to figure out the expected modifier, but that might be too confusing. Instead, we convert to the modern `theme(…)` syntax.\n\n---\n\n**Multiple `theme(…)` calls with modifiers:**\n\nInput:\n```html\n<div class=\"bg-[theme(colors.red.500/75%,theme(colors.blue.500/50%))]\"></div>\n```\n\nOutput:\n```html\n<div class=\"bg-[theme(--color-red-500/75%,theme(--color-blue-500/50%))]\"></div>\n```\n\nIn this case we can't convert to `var(…)` syntax because then we lose the opacity modifier. We also can't move the opacity modifier to the candidate itself e.g.: `/50` because we have 2 different variables to worry about.\n\nIn this situation we convert to the modern `theme(…)` syntax itself.\n\n---\n\n**Inside variants:**\n\nInput:\n```html\n<div class=\"max-[theme(spacing.20)]:flex\"></div>\n```\n\nOutput:\n```html\n<div class=\"max-[theme(--spacing-20)]:flex\"></div>\n```\n\nUnfortunately we can't convert to `var(…)` syntax reliably because in some cases (like the one above) the value will be used inside of an `@media (…)` query and CSS doesn't support that at the time of writing this PR.\n\nSo to be safe, we will not try to convert `theme(…)` to `var(…)` in variants, but we will only upgrade the `theme(…)` call itself to modern syntax.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14664","RelatedDescription":"Open PR \"Migrate `theme(…)` calls to `var(…)` or the modern `theme(…)` syntax\" (#14664)"},{"Id":"2581598633","IsPullRequest":true,"CreatedAt":"2024-10-14T14:33:15","Actor":"philipp-spiess","Number":"14650","RawContent":null,"Title":"Address follow-up work for #14639","State":"closed","Body":"This PR adds a few more test cases to #14639 and updates the documentation.\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14650","RelatedDescription":"Closed or merged PR \"Address follow-up work for #14639\" (#14650)"},{"Id":"2586081822","IsPullRequest":true,"CreatedAt":"2024-10-14T13:46:12","Actor":"philipp-spiess","Number":"14662","RawContent":null,"Title":"Revert \"Warn on use of plugin parameters as function\"","State":"closed","Body":"Reverts tailwindlabs/tailwindcss#14661","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14662","RelatedDescription":"Closed or merged PR \"Revert \"Warn on use of plugin parameters as function\"\" (#14662)"},{"Id":"2582124668","IsPullRequest":true,"CreatedAt":"2024-10-14T12:08:41","Actor":"RobinMalfait","Number":"14653","RawContent":null,"Title":"Fix `var(…)` as the opacity value inside the `theme(…)` function","State":"closed","Body":"Inside the `theme(…)` function, we can use the `/` character for applying an opacity. For example `theme(colors.red.500 / 50%)` will apply a 50% opacity to the `colors.red.500` value.\n\nHowever, if you used a variable instead of the hardcoded `50%` value, then this was not parsed correctly. E.g.: `theme(colors.red.500 / var(--opacity))`\n\n_If_ we have this exact syntax (with the spaces), then it parses, but some information is lost:\n\n```html\n<div class=\"bg-[theme(colors.red.500_/_var(--opacity))]\"></div>\n```\n\nResults in:\n```css\n.bg-\\[theme\\(colors\\.red\\.500_\\/_var\\(--opacity\\)\\)\\] {\n  background-color: color-mix(in srgb, #ef4444 calc(var * 100%), transparent);\n}\n```\nNotice that the `var(--opacity)` is just parsed as `var`, and the `--opacity` is lost.\n\nAdditionally, if we drop the spaces, then it doesn't parse at all:\n\n```html\n<div class=\"bg-[theme(colors.red.500/var(--opacity))]\"></div>\n```\n\nResults in:\n```css\n```\n\nThis means that we have to handle 2 issues to make this work:\n1. We have to properly handle the `/` character as a proper separator.\n2. If we have sub-functions, we have to make sure to print them in full (instead of only the very first node (`var` in this case)).\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14653","RelatedDescription":"Closed or merged PR \"Fix `var(…)` as the opacity value inside the `theme(…)` function\" (#14653)"},{"Id":"2585664859","IsPullRequest":true,"CreatedAt":"2024-10-14T11:57:03","Actor":"philipp-spiess","Number":"14661","RawContent":null,"Title":"Warn on use of plugin parameters as function","State":"closed","Body":"Quick follow-up to #14659 base don @thecrypticace's idea:\r\n\r\n- This behavior is no longer added to the types of the Plugin API to be consistent with v3\r\n- When the plugin argument is used as a function, we now warn the first time","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14661","RelatedDescription":"Closed or merged PR \"Warn on use of plugin parameters as function\" (#14661)"},{"Id":"2585433486","IsPullRequest":true,"CreatedAt":"2024-10-14T10:29:12","Actor":"philipp-spiess","Number":"14659","RawContent":null,"Title":"Callback in theme properties is also the theme function","State":"closed","Body":"Something we noticed while testing the codemods on one of our codebases is that the callback passed to the `theme` function properties doesn't only expose some properties like `colors`, but it's also a function itself.\r\n\r\n```ts\r\n/** @type {import('tailwindcss').Config} */\r\nexport default {\r\n  theme: {\r\n    extend: {\r\n      colors: (theme) => {\r\n        // The `theme` is a theme function _and_ the object...\r\n        console.log(theme('spacing.2'), theme.colors.red['500'])\r\n        return {}\r\n      },\r\n    },\r\n  },\r\n  plugins: [],\r\n}\r\n```\r\n\r\nE.g.: https://play.tailwindcss.com/eV7Jgv17X1?file=config\r\n\r\n---\r\nh/t to @RobinMalfait for the issue description","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14659","RelatedDescription":"Closed or merged PR \"Callback in theme properties is also the theme function\" (#14659)"},{"Id":"2585525819","IsPullRequest":false,"CreatedAt":"2024-10-14T10:14:57","Actor":"neochief","Number":"14660","RawContent":null,"Title":"Using tailwind classes in your own css style selectors breaks @keyframe that include @apply","State":"open","Body":"Hi!\r\n\r\nWhen you override the tailwind classes, as shown in the bottom, AND have these classes as part of the @apply in the keyframes, the resulting code after the build is broken CSS.\r\n\r\n\r\nSOURCE:\r\n```\r\n.some-custom-class .text-white {\r\n    /* ... */\r\n}\r\n\r\n@keyframes text-color {\r\n    from {\r\n        @apply text-black;\r\n    }\r\n    to {\r\n        @apply text-white;\r\n    }\r\n}\r\n```\r\n\r\nBUILT:\r\n```\r\n@keyframes text-color {\r\n    from {\r\n        --tw-text-opacity: 1;\r\n        color: rgb(0 0 0 / var(--tw-text-opacity));\r\n    }\r\n    to {\r\n        --tw-text-opacity: 1;\r\n        color: rgb(255 255 255 / var(--tw-text-opacity));\r\n    }\r\n\r\n.some-custom-class to {\r\n}\r\n\r\n}\r\n```\r\n\r\nAs you see, the `.some-custom-class to { ... }` is inserted inside the @keyframes definition, which is unexpected.\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14660","RelatedDescription":"Open issue \"Using tailwind classes in your own css style selectors breaks @keyframe that include @apply\" (#14660)"},{"Id":"2583266181","IsPullRequest":false,"CreatedAt":"2024-10-12T19:13:44","Actor":"ktmn","Number":"14654","RawContent":null,"Title":"[v4] @apply doesn't combine rules under a single selector","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\nv4.0.0-alpha.26\r\n\r\n**Reproduction URL**\r\nhttps://play.tailwindcss.com/UExmfuz56x?file=css\r\n\r\n**Describe your issue**\r\nIs it intended that \r\n\r\n```css\r\n@layer utilities {\r\n  .parent {\r\n    @apply m-4 p-4 [&>.child]:m-4 [&>.child]:p-4;\r\n  }\r\n}\r\n```\r\n\r\nproduces:\r\n\r\n```css\r\n.parent {\r\n  margin: var(--spacing-4, 1rem);\r\n  padding: var(--spacing-4, 1rem);\r\n  &>.child {\r\n    margin: var(--spacing-4, 1rem);\r\n  }\r\n  &>.child {\r\n    padding: var(--spacing-4, 1rem);\r\n  }\r\n}\r\n```\r\n\r\nrather than:\r\n\r\n```css\r\n.parent {\r\n  margin: var(--spacing-4, 1rem);\r\n  padding: var(--spacing-4, 1rem);\r\n  &>.child {\r\n    margin: var(--spacing-4, 1rem);\r\n    padding: var(--spacing-4, 1rem);\r\n  }\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14654","RelatedDescription":"Closed issue \"[v4] @apply doesn't combine rules under a single selector\" (#14654)"},{"Id":"2583330985","IsPullRequest":false,"CreatedAt":"2024-10-12T19:11:13","Actor":"heychazza","Number":"14655","RawContent":null,"Title":"[v4] Normal font weight is not respected","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n^4.0.0-alpha.26\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nVite (v5.4.8) with React (v18.3.1)\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv21.7.3\r\n\r\n**What browser are you using?**\r\n\r\nSafari\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/jFiizARA8r\r\n\r\n**Describe your issue**\r\n\r\nWhen setting a font weight via the new CSS variable syntax:\r\n```css\r\n@theme {\r\n  --font-weight-normal: 375;\r\n}\r\n```\r\n\r\nIt's not set globally by default for all html tags, and it also shows as \"NaN\" within Safari dev tools. I have tried changing it to `'375'` and the same happens.\r\n\r\n![CleanShot 2024-10-12 at 7  46 32@2x](https://github.com/user-attachments/assets/93217f4b-b7f4-4e95-8e6c-19bfe741cf13)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14655","RelatedDescription":"Closed issue \"[v4] Normal font weight is not respected\" (#14655)"},{"Id":"2581608165","IsPullRequest":true,"CreatedAt":"2024-10-11T16:07:59","Actor":"philipp-spiess","Number":"14651","RawContent":null,"Title":"Support the `color` property in JS theme configuration callbacks","State":"closed","Body":"While working on some fixes for #14639 I noticed that the following v3 configuration file would not load properly in v4:\r\n\r\n```ts\r\nimport { type Config } from 'tailwindcss'\r\n\r\nexport default {\r\n  content: ['./src/**/*.{js,jsx,ts,tsx}'],\r\n  theme: {\r\n    extend: {\r\n      colors: ({ colors }) => ({\r\n        gray: colors.neutral,\r\n      }),\r\n  },\r\n} satisfies Config\r\n```\r\n\r\nThe reason for this is that we did not pass the `colors` property to the callback function. Since we have colors available now, we can easily add it.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14651","RelatedDescription":"Closed or merged PR \"Support the `color` property in JS theme configuration callbacks\" (#14651)"},{"Id":"2579863982","IsPullRequest":true,"CreatedAt":"2024-10-11T14:41:38","Actor":"RobinMalfait","Number":"14644","RawContent":null,"Title":"Migrate `aria-*`, `data-*` and `supports-*` variants from arbitrary values to bare values","State":"closed","Body":"This PR adds a new codemod that can migrate `data-*` and `aria-*` variants using arbitrary values to bare values.\r\n\r\nIn Tailwind CSS v3, if you want to conditionally apply a class using data attributes, then you can write `data-[selected]:flex`. This requires the DOM element to have a `data-selected=\"\"` attribute. In Tailwind CSS v4 we can simplify this, by dropping the brackets and by using `data-selected:flex` directly.\r\n\r\nThis migration operates on the internal AST, which means that this also just works for compound variants such as `group-has-data-[selected]:flex` (which turns into `group-has-data-selected:flex`).\r\n\r\nAdditionally, this codemod is also applicable to `aria-*` variants. The biggest difference is that in v4 `aria-selected` maps to an attribute of `aria-selected=\"true\"`. This means that we can only migrate `aria=[selected=\"true\"]:flex` to `aria-selected:flex`.\r\n\r\nLast but not least, we also migrate `supports-[gap]` to `supports-gap` if the passed in value looks like a property. If not, e.g.: `supports-[display:grid]` then it stays as-is.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14644","RelatedDescription":"Closed or merged PR \"Migrate `aria-*`, `data-*` and `supports-*` variants from arbitrary values to bare values\" (#14644)"},{"Id":"2581527787","IsPullRequest":true,"CreatedAt":"2024-10-11T14:38:46","Actor":"adamwathan","Number":"14649","RawContent":null,"Title":"Tweak changelog entries","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14649","RelatedDescription":"Closed or merged PR \"Tweak changelog entries\" (#14649)"},{"Id":"2579664872","IsPullRequest":true,"CreatedAt":"2024-10-11T14:24:54","Actor":"thecrypticace","Number":"14642","RawContent":null,"Title":"Convert to/from v3 theme keys in configs and plugins","State":"closed","Body":"A few theme keys have changed in v4 relative to v3:\r\n- `screens` -> `--breakpoint-*`\r\n- `colors` -> `--color-*`\r\n- `animation` -> `--animate-*`\r\n- `borderRadius` -> `--radius-*`\r\n- `boxShadow` -> `--shadow-*`\r\n\r\nWhen using the `theme()` function we wouldn't pick up values from the CSS for some of these. Likewise, when loading a v3 config not all of these would be pushed back into the CSS theme and they should've been.\r\n\r\nThis PR addresses both of these problems.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14642","RelatedDescription":"Closed or merged PR \"Convert to/from v3 theme keys in configs and plugins\" (#14642)"},{"Id":"2578672399","IsPullRequest":true,"CreatedAt":"2024-10-11T13:27:53","Actor":"philipp-spiess","Number":"14639","RawContent":null,"Title":"Add simple JS config migration","State":"closed","Body":"This PR implements the first version of JS config file migration to CSS. It is based on the most simple config setups we are using in the Tailwind UI templates Commit, Primer, Radiant, and Studio.\r\n\r\nThe example we use in the integration test is a config that looks like this:\r\n\r\n```js\r\nimport { type Config } from 'tailwindcss'\r\nimport defaultTheme from 'tailwindcss/defaultTheme'\r\n\r\nmodule.exports = {\r\n  darkMode: 'selector',\r\n  content: ['./src/**/*.{html,js}'],\r\n  theme: {\r\n    boxShadow: {\r\n      sm: '0 2px 6px rgb(15 23 42 / 0.08)',\r\n    },\r\n    colors: {\r\n      red: {\r\n        500: '#ef4444',\r\n      },\r\n    },\r\n    fontSize: {\r\n      xs: ['0.75rem', { lineHeight: '1rem' }],\r\n      sm: ['0.875rem', { lineHeight: '1.5rem' }],\r\n      base: ['1rem', { lineHeight: '2rem' }],\r\n    },\r\n    extend: {\r\n      colors: {\r\n        red: {\r\n          600: '#dc2626',\r\n        },\r\n      },\r\n      fontFamily: {\r\n        sans: 'Inter, system-ui, sans-serif',\r\n        display: ['Cabinet Grotesk', ...defaultTheme.fontFamily.sans],\r\n      },\r\n      borderRadius: {\r\n        '4xl': '2rem',\r\n      },\r\n    },\r\n  },\r\n  plugins: [],\r\n} satisfies Config\r\n```\r\n\r\nAs you can see, this file only has a `darkMode` selector, custom `content` globs, a `theme` (with some theme keys being overwriting the default theme and some others extending the defaults). Note that it does not support `plugins` and/or `presets` yet.\r\n\r\nIn the case above, we will find the CSS file containing the existing `@tailwind` directives and are migrating it to the following:\r\n\r\n```css\r\n@import 'tailwindcss';\r\n\r\n@source './**/*.{html,js}';\r\n\r\n@variant dark (&:where(.dark, .dark *));\r\n\r\n@theme {\r\n  --box-shadow-*: initial;\r\n  --box-shadow-sm: 0 2px 6px rgb(15 23 42 / 0.08);\r\n\r\n  --color-*: initial;\r\n  --color-red-500: #ef4444;\r\n\r\n  --font-size-*: initial;\r\n  --font-size-xs: 0.75rem;\r\n  --font-size-xs--line-height: 1rem;\r\n  --font-size-sm: 0.875rem;\r\n  --font-size-sm--line-height: 1.5rem;\r\n  --font-size-base: 1rem;\r\n  --font-size-base--line-height: 2rem;\r\n\r\n  --color-red-600: #dc2626;\r\n\r\n  --font-family-sans: Inter, system-ui, sans-serif;\r\n  --font-family-display: Cabinet Grotesk, ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\r\n\r\n  --border-radius-4xl: 2rem;\r\n} \r\n```\r\n\r\nThis replicates all features of the JS config so we can even delete the existing JS config in this case. ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14639","RelatedDescription":"Closed or merged PR \"Add simple JS config migration\" (#14639)"},{"Id":"2579804731","IsPullRequest":true,"CreatedAt":"2024-10-11T12:22:55","Actor":"RobinMalfait","Number":"14643","RawContent":null,"Title":"Migrate legacy classes to the v4 alternative","State":"closed","Body":"This PR adds a mapping from legacy classes to new classes. For example, the `flex-shrink-0` is still used in our projects, but is deprecated in v3.\r\n\r\nThe migration does a tiny bit of parsing because we can't rely on `designSystem.parseCandidate(…)` because this requires the utility to be defined which is not the case for legacy classes.\r\n\r\nThis migration runs _after_ the migration where we handle prefixes, so we don't have to worry about that. We do have to worry about the `!` location, because the `important` migration also relies on the `designSystem`.\r\n\r\n| Old                 | New                    |\r\n| ------------------- | ---------------------- |\r\n| `overflow-clip`     | `text-clip`            |\r\n| `overflow-ellipsis` | `text-ellipsis`        |\r\n| `flex-grow-0`       | `grow-0`               |\r\n| `flex-shrink-0`     | `shrink-0`             |\r\n| `decoration-clone`  | `box-decoration-clone` |\r\n| `decoration-slice`  | `box-decoration-slice` |\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14643","RelatedDescription":"Closed or merged PR \"Migrate legacy classes to the v4 alternative\" (#14643)"},{"Id":"2580329191","IsPullRequest":true,"CreatedAt":"2024-10-11T10:50:15","Actor":"depfu[bot]","Number":"14646","RawContent":null,"Title":"Update turbo 2.1.2 → 2.1.3 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ turbo (2.1.2 → 2.1.3) · [Repo](https://github.com/turborepo/turbo)\n\n\n\n\n\nSorry, we couldn't find anything useful about this release.\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14646","RelatedDescription":"Closed or merged PR \"Update turbo 2.1.2 → 2.1.3 (patch)\" (#14646)"},{"Id":"2578991874","IsPullRequest":true,"CreatedAt":"2024-10-10T14:29:36","Actor":"RobinMalfait","Number":"14640","RawContent":null,"Title":"Use consistent quotes","State":"closed","Body":"Small improvement, we noticed that some quotes were not consistent with others. Let's make them consistent!\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14640","RelatedDescription":"Closed or merged PR \"Use consistent quotes\" (#14640)"},{"Id":"2576447105","IsPullRequest":true,"CreatedAt":"2024-10-10T14:02:42","Actor":"RobinMalfait","Number":"14635","RawContent":null,"Title":"Inject `@config \"...\"` when a `tailwind.config.{js,ts,...}` is detected","State":"closed","Body":"This PR injects a `@config \"…\"` in the CSS file if a JS based config has been found.\r\n\r\nWe will try to inject the `@config` in a sensible place:\r\n1. Above the very first `@theme`\r\n2. If that doesn't work, below the last `@import`\r\n3. If that doesn't work, at the top of the file (as a last resort)\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14635","RelatedDescription":"Closed or merged PR \"Inject `@config \"...\"` when a `tailwind.config.{js,ts,...}` is detected\" (#14635)"},{"Id":"2571186534","IsPullRequest":true,"CreatedAt":"2024-10-10T13:44:04","Actor":"thecrypticace","Number":"14617","RawContent":null,"Title":"Migrate utilities in CSS files imported into layers","State":"closed","Body":"When a stylesheet is imported with `@import “…” layer(utilities)` that means that all classes in that stylesheet and any of its imported stylesheets become candidates for `@utility` conversion.\r\n\r\nDoing this correctly requires us to place `@utility` rules into separate stylesheets (usually) and replicate the import tree without layers as `@utility` MUST be root-level. If a file consists of only utilities we won't create a separate file for it and instead place the `@utility` rules in the same stylesheet.\r\n\r\nBeen doing a LOT of pairing with @RobinMalfait on this one but I think this is finally ready to be looked at","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14617","RelatedDescription":"Closed or merged PR \"Migrate utilities in CSS files imported into layers\" (#14617)"},{"Id":"2578319069","IsPullRequest":true,"CreatedAt":"2024-10-10T10:14:51","Actor":"philipp-spiess","Number":"14637","RawContent":null,"Title":"Ensure custom variants using the JS API have access to modifiers","State":"closed","Body":"Fixes https://github.com/tailwindlabs/tailwindcss/discussions/14623\r\n\r\nWe didn't properly pass through modifiers for all custom variant calls. This PR fixes that. ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14637","RelatedDescription":"Closed or merged PR \"Ensure custom variants using the JS API have access to modifiers\" (#14637)"},{"Id":"2575817539","IsPullRequest":false,"CreatedAt":"2024-10-09T12:41:11","Actor":"lusayo-nyondo","Number":"14632","RawContent":null,"Title":"Tailwind CLI Hot Reload Not Working When Parent Directories Contain Parenthesis i.e. \"(\" and \")\" in their name.","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.13\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\ntailwindcss-cli\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.12.2\r\n\r\n**What browser are you using?**\r\n\r\nEdge\r\n\r\n**What operating system are you using?**\r\n\r\nWindows 11\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/lusayo-nyondo/tailwindcss_bug_report_sayo\r\n\r\nThe above Repo contains a more detailed explanation of the issue I've faced as well as steps to reproduce the bug int he README section.\r\n\r\n**Describe your issue**\r\n\r\nThe hot reload feature isn't working with tailwindcss-cli under specific circumstances. To be exact:\r\n\r\n- `npx tailwindcss -i ./src/input.css -o ./src/output.css --watch` fails to watch the file system and trigger hot reloads if any of the parent directories containing the project have parenthesis in their name.\r\n\r\nI've included a more detailed explanation in the README section of the repo I've provided, including how to reproduce the bug on my end.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14632","RelatedDescription":"Open issue \"Tailwind CLI Hot Reload Not Working When Parent Directories Contain Parenthesis i.e. \"(\" and \")\" in their name.\" (#14632)"},{"Id":"2575597218","IsPullRequest":true,"CreatedAt":"2024-10-09T11:55:58","Actor":"RobinMalfait","Number":"14631","RawContent":null,"Title":"Don't set `display: none` on elements that use `hidden=\"until-found\"`","State":"closed","Body":"Fixes an issue reported by the React Aria Components team here:\n\nhttps://github.com/adobe/react-spectrum/issues/7160\n\nBasically `hidden=\"until-found\"` behaves very differently than `hidden` and doesn't actually use `display: none`, so we don't want to apply the behavior we apply for the regular `hidden` attribute.\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14631","RelatedDescription":"Closed or merged PR \"Don't set `display: none` on elements that use `hidden=\"until-found\"`\" (#14631)"},{"Id":"2574185269","IsPullRequest":true,"CreatedAt":"2024-10-09T11:55:48","Actor":"adamwathan","Number":"14625","RawContent":null,"Title":"Don't set `display: none` on elements that use `hidden=\"until-found\"`","State":"closed","Body":"Fixes an issue reported by the React Aria Components team here:\r\n\r\nhttps://github.com/adobe/react-spectrum/issues/7160\r\n\r\nBasically `hidden=\"until-found\"` behaves very differently than `hidden` and doesn't actually use `display: none`, so we don't want to apply the behavior we apply for the regular `hidden` attribute.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14625","RelatedDescription":"Closed or merged PR \"Don't set `display: none` on elements that use `hidden=\"until-found\"`\" (#14625)"},{"Id":"2575495368","IsPullRequest":false,"CreatedAt":"2024-10-09T10:45:38","Actor":"Yueyanc","Number":"14629","RawContent":null,"Title":"tailwind.config.js not work at monorepo","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.13\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nreact@18.3.1\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.11.1\r\n\r\n**What browser are you using?**\r\n\r\nelectron\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/Yueyanc/template/tree/electron-template\r\n\r\n**Describe your issue**\r\n\r\nIf I set tailwind.config.js in the root directory of the monorepo project, the configuration takes effect. However, it does not take effect when I set tailwind.config.js in the root directory of the web project\r\n\r\n![image](https://github.com/user-attachments/assets/106ffa5b-3614-47b8-978a-3d5b376c5649)\r\n![image](https://github.com/user-attachments/assets/e2e95372-994b-42cb-95b5-dd6988e4ebe9)\r\n![image](https://github.com/user-attachments/assets/9ea1b518-b6d5-45f2-b69f-c175f4638bd3)\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14629","RelatedDescription":"Closed issue \"tailwind.config.js not work at monorepo\" (#14629)"},{"Id":"2573131324","IsPullRequest":false,"CreatedAt":"2024-10-08T13:47:13","Actor":"Matheun","Number":"14622","RawContent":null,"Title":"[V4]: Custom keyframes in `@theme` won't apply correctly","State":"closed","Body":"For some reason, the custom keyframes in my theme config wont correctly apply in my component layer. i'm using scss files","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14622","RelatedDescription":"Closed issue \"[V4]: Custom keyframes in `@theme` won't apply correctly\" (#14622)"},{"Id":"2571488883","IsPullRequest":true,"CreatedAt":"2024-10-08T11:47:55","Actor":"RobinMalfait","Number":"14618","RawContent":null,"Title":"Make custom `@at-root` private API","State":"closed","Body":"This PR makes the internal `@at-root` API private. Before this PR you could use `@at-root` in your own CSS, which means that it was part of the public API. If you (accidentally) used it in variants, you could generate CSS that was completely broken.\n\nThis now introduces a new private `AtRoot` node (similar to the recently introduced `Context` node) and can only be constructed within the framework.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14618","RelatedDescription":"Closed or merged PR \"Make custom `@at-root` private API\" (#14618)"},{"Id":"2572836017","IsPullRequest":false,"CreatedAt":"2024-10-08T10:53:00","Actor":"The-io-dev","Number":"14621","RawContent":null,"Title":"BroadPattern check is still quite resource hungry","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nnx@19.7.2 monorepo with angular@18.2.4 apps and libs, with esbuild\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.17.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nI tried to make a reproduction link but due to the source of the problem, making a reproduction link is tedious. There would be the need to make many libs, with many components.\r\n\r\nIf the description of the issues doesn't give satisfaction, i will try again to make scripts to make a repo big enough\r\n\r\n**Describe your issue**\r\n\r\nThe issues comes from this PR #14140.\r\n\r\nWhat happens is : \r\n- nx automatically creates patterns with `createGlobPatternsForDependencies` (finds all libs to be included in tailwind compilation)\r\n  - in our project, that may mean 150 libs, times two since we parse `.ts` and `.html` files, so 300 paths.\r\n- when we check for the alert, for each file, we check if the path match with any paths, resulting in great amount of checks.\r\n\r\nWhen compiling prior to this version or comment the feature, we compile in *~90 seconds* with the check, it takes *~180 seconds*.\r\n\r\nWhen removing the use of `createGlobPatternsForDependencies` and switching to a wider pattern, we still get *~105 seconds* and could be considered a loss (we would be generating the same big CSS file for each of or application, regardless of what it actually needs)\r\n\r\nWhen upgrading to the 3.4.13 version where an optimization was implemented, we get *~120 seconds*, witch is still quite long.\r\n\r\nPS: i should add that tailwind being recompiled on serve, the X seconds increase of compilation times makes live development that much more painful, transforming a few needed seconds into a minute of waiting, maybe more.\r\n\r\nCould there be an option to remove this check entirely for thoses who are sure of their patterns and look for performance ?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14621","RelatedDescription":"Open issue \"BroadPattern check is still quite resource hungry\" (#14621)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-10-15T03:30:26.857848Z","RunDurationInMilliseconds":536}