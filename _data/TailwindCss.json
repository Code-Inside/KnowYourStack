{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2673999713","IsPullRequest":false,"CreatedAt":"2024-11-20T01:20:39","Actor":"tremby","Number":"15049","RawContent":null,"Title":"Child selector + :last-of-type do not work together as expected","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n3.4.15\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nn/a / unknown (occurs in tailwind play)\r\n\r\n**What version of Node.js are you using?**\r\n\r\nna / unknown\r\n\r\n**What browser are you using?**\r\n\r\nFirefox\r\n\r\n**What operating system are you using?**\r\n\r\nLinux\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/v4z3gZxhXm\r\n\r\n**Describe your issue**\r\n\r\nI'm putting this class on a blockquote: `[&_p]:last-of-type:bg-red-500`. It has paragraph children. I expect the last of those child paragraphs to have a red background.\r\n\r\n\"Test 1\" shows the expected behaviour: only the last paragraph has a background colour applied.\r\n\r\n\"Test 2\" shows broken behaviour: all paragraphs have the background colour applied.\r\n\r\nTailwind is generating this style rule:\r\n\r\n```css\r\n.\\[\\&_p\\]\\:last-of-type\\:bg-red-500:last-of-type p {\r\n  ...\r\n}\r\n```\r\n\r\nSince a child is being selected via `&_p`, the `:last-of-type` part should be after the trailing `p`, not after the base selector.\r\n\r\nActual use case: combining with `:before` and `:after` to put quotes around paragraphs of a blockquote.\r\n\r\nIt's interesting to note that if I use `:after` on a selector like this, that part is put in the right place. For example, in my actual use case, `[&_p]:last-of-type:after:content-['”']` generates `.\\[\\&_p\\]\\:last-of-type\\:after\\:content-\\[\\'”\\'\\]:last-of-type p::after`, which you'll see has `::after` in the right place, but `:last-of-type` in the wrong place.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15049","RelatedDescription":"Closed issue \"Child selector + :last-of-type do not work together as expected\" (#15049)"},{"Id":"2673812297","IsPullRequest":true,"CreatedAt":"2024-11-19T23:20:40","Actor":"RobinMalfait","Number":"15048","RawContent":null,"Title":"Improve root file detection","State":"closed","Body":"This PR fixes an issue where the Tailwind root file detection was wrong.\r\n\r\nWhenever a CSS file contains any of the `@tailwind` directives or an `@import` to any of the Tailwind files, the file is considered a Tailwind root file.\r\n\r\nIf multiple CSS files are part of the same tree, then we make the nearest common parent the root file.\r\n\r\nThis root file will be the file where we add `@config` and/or inject other changes during the migration process.\r\n\r\nHowever, if your folder structure looked like this:\r\n\r\n```css\r\n/* index.css */\r\n@import \"./base.css\";\r\n@import \"./typography.css\";\r\n@import \"tailwindcss/components\"; /* This makes index.css a root file */\r\n@import \"./utilities.css\";\r\n\r\n/* base.css */\r\n@tailwind base; /* This makes base.css a root file */\r\n\r\n/* utilities.css */\r\n@tailwind utilities; /* This makes utilities.css a root file */\r\n```\r\n\r\nThen we computed that `index.css` nad `base.css` were considered root files even though they belong to the same tree (because `base.css` is imported by `index.css`).\r\n\r\nThis PR fixes that behaviour by essentially being less smart, and just checking again if any sheets are part of the same tree.\r\n\r\n# Test plan:\r\n\r\nAdded an integration test that covers this scenario and fails before the fix.\r\n\r\nAlso ran it on our tailwindcss.com codebase.\r\n\r\n| Before | After |\r\n| --- | --- |\r\n| <img width=\"1072\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8ee99a59-335e-4221-b368-a8cd81e85191\"> | <img width=\"1072\" alt=\"image\" src=\"https://github.com/user-attachments/assets/fe5acae4-d3fc-43a4-bd31-eee768a3a6a5\"> |\r\n\r\n(Yes, I know the migration still fails, but that's a different issue.)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15048","RelatedDescription":"Closed or merged PR \"Improve root file detection\" (#15048)"},{"Id":"2673718819","IsPullRequest":false,"CreatedAt":"2024-11-19T22:28:25","Actor":"spaceemotion","Number":"15047","RawContent":null,"Title":"[v4] Vite plugin providing a virtual file can't be resolved from within main CSS file","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n```\r\n@tailwindcss/cli 4.0.0-alpha.33\r\n└── tailwindcss 4.0.0-alpha.33\r\n@tailwindcss/typography 0.5.15\r\n└── tailwindcss 4.0.0-alpha.33 peer\r\n@tailwindcss/vite 4.0.0-alpha.33\r\n└── tailwindcss 4.0.0-alpha.33\r\ntailwindcss 4.0.0-alpha.33\r\n```\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n`astro 5.0.0-beta.8`, using `vite 6.0.0-beta.10`\r\n\r\n**What version of Node.js are you using?**\r\nv20\r\n\r\n**What browser are you using?**\r\nChrome/Edge/Brave\r\n\r\n**What operating system are you using?**\r\nLinux/Windows\r\n\r\n**Reproduction URL**\r\nWe got the following stylesheet:\r\n\r\n```css\r\n@import 'tailwindcss';\r\n@import 'virtual:fontawesome.css';\r\n```\r\n\r\nThe custom vite plugin is quite simple:\r\n```ts\r\nimport { dom } from '@fortawesome/fontawesome-svg-core';\r\nimport type { Plugin } from 'vite';\r\n\r\nconst VIRTUAL_MODULE_ID = 'virtual:fontawesome.css';\r\nconst RESOLVED_VIRTUAL_MODULE_ID = '\\0' + VIRTUAL_MODULE_ID;\r\n\r\nexport function fontAwesomeCss(): Plugin {\r\n  return {\r\n    name: 'vite-plugin-fontawesome-css',\r\n\r\n    resolveId(id) {\r\n      if (id !== VIRTUAL_MODULE_ID) {\r\n        return;\r\n      }\r\n\r\n      return RESOLVED_VIRTUAL_MODULE_ID;\r\n    },\r\n\r\n    load(id) {\r\n      if (id !== RESOLVED_VIRTUAL_MODULE_ID) {\r\n        return;\r\n      }\r\n\r\n      return {\r\n        code: `@layer base { ${dom.css()} }`,\r\n      };\r\n    }\r\n  };\r\n}\r\n```\r\n\r\nWe need the fontawesome CSS to be included in the base layer of our CSS, since we want to be able to overwrite some things (like icon size) via the utility classes. We also don't want to include the CSS on every page, and instead have it in the global stylesheet.\r\n\r\nSadly, FontAwesome does not offer a simple static CSS we can use, since the classes are built at run-/build-time.\r\n\r\n**Describe your issue**\r\nI ran `astro dev` with verbose enabled:\r\n\r\n```\r\n  vite:transform 9.96ms /src/layouts/default.astro +12ms\r\n  vite:load 0.28ms [fs] /src/styles/main.css +14ms\r\n  astro:vite Error when evaluating SSR module /home/spaceemotion/code/nc-website/novelcrafter/src/pages/courses/[...course]/[...lesson].astro:\r\n  astro:vite |- Error: Can't resolve 'virtual:fontawesome.css' in '/home/spaceemotion/code/nc-website/novelcrafter/src/styles'\r\n  astro:vite     at finishWithoutResolve (/home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:564:18)\r\n  astro:vite     at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:656:15\r\n  astro:vite     at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n  astro:vite     at eval (eval at create (/home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/tapable@2.2.1/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:15:1)\r\n  astro:vite     at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n  astro:vite     at eval (eval at create (/home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/tapable@2.2.1/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:27:1)\r\n  astro:vite     at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/DescriptionFilePlugin.js:89:43\r\n  astro:vite     at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n  astro:vite     at eval (eval at create (/home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/tapable@2.2.1/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:15:1)\r\n  astro:vite     at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n  astro:vite  +0ms\r\n23:17:35 [ERROR] Can't resolve 'virtual:fontawesome.css' in '/home/spaceemotion/code/nc-website/novelcrafter/src/styles'\r\n  Stack trace:\r\n    at finishWithoutResolve (/home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:564:18)\r\n    at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n    at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/Resolver.js:718:5\r\n    at /home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/enhanced-resolve@5.17.1/node_modules/enhanced-resolve/lib/DescriptionFilePlugin.js:89:43\r\n    at eval (eval at create (/home/spaceemotion/code/nc-website/novelcrafter/node_modules/.pnpm/tapable@2.2.1/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:15:1)\r\n```\r\n\r\nFrom what I can tell, the resolving is being handled by tailwind, and not Astro/Vite? I tried to see if there is a way to still make this worth, but not sure why the virtual module isn't being picked up - the same approach (using virtual modules) works without issue in other parts of the pipeline where we just import things into Vue/Astro/JS.\r\n\r\nhttps://stackblitz.com/edit/vite-u8kysb?file=vite.config.mjs (doesn't load inside of stackblitz due to oxide, but has a minimal example)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15047","RelatedDescription":"Open issue \"[v4] Vite plugin providing a virtual file can't be resolved from within main CSS file\" (#15047)"},{"Id":"2673643398","IsPullRequest":true,"CreatedAt":"2024-11-19T21:56:30","Actor":"RobinMalfait","Number":"15046","RawContent":null,"Title":"Improve PostCSS migration","State":"closed","Body":"If you have a PostCSS config file, that is not simple (has functions, requires, ...). In that case we don't migrate the PostCSS file. Because we don't migrate, the `didMigrate` is still false and we continue with the next migration.\n\nThe issue here is that there are 2 states encoded in the same variable and they should be two separate variables because there is a difference between:\n\n1. Not finding a file at all\n2. Finding a file, but not migrating it\n\nBefore this change, the output looks like this if you have a complex PostCSS file:\n```\n│ Migrating PostCSS configuration…\n\n│ The PostCSS config contains dynamic JavaScript and can not be automatically migrated.\n\n│ No PostCSS config found, skipping migration.\n```\n\nAfter this change, the output looks like this:\n```\n│ Migrating PostCSS configuration…\n\n│ ↳ The PostCSS config contains dynamic JavaScript and can not be automatically migrated.\n```\n\nAlso updated the output to include `↳ ` to be consistent with the other logs.\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15046","RelatedDescription":"Closed or merged PR \"Improve PostCSS migration\" (#15046)"},{"Id":"2673368317","IsPullRequest":true,"CreatedAt":"2024-11-19T20:27:47","Actor":"thecrypticace","Number":"15044","RawContent":null,"Title":"Fix negative rotate utilities","State":"closed","Body":"This fixes the negative versions of rotate:\r\n`-rotate-y-*`, `-rotate-x-*`, and `-rotate-z-*`\r\n\r\nThey were producing CSS like `--tw-rotate-x: calc(rotateX(Xdeg) * -1)` instead of `--tw-rotate-x: rotateX(calc(Xdeg * -1))`. This fixes all of those. The skew utilities have a similar structure but were already handled correctly.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15044","RelatedDescription":"Closed or merged PR \"Fix negative rotate utilities\" (#15044)"},{"Id":"2673393232","IsPullRequest":false,"CreatedAt":"2024-11-19T20:07:19","Actor":"saadeghi","Number":"15045","RawContent":null,"Title":"[v4] `addComponents` is adding styles to `@layer utilities` instead of `@layer components`","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.34\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`@tailwindcss/cli`\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/saadeghi/tw4-component-layer-issue\r\n\r\n**Describe your issue**\r\n\r\nThese are the layers in output CSS file:\r\n```\r\n@layer theme, base, components, utilities;\r\n```\r\n**Expectation**  \r\nIt's expected for `addComponents` to add styles to `@layer components`  \r\n\r\n**Current behavior**  \r\nCurrently `addComponents` adds styles to `@layer utilities`, similar to `addUtilities`\r\n\r\nPlugin example:  \r\nhttps://github.com/saadeghi/tw4-component-layer-issue/blob/master/myplugin.js\r\n\r\nGenerated style:  \r\nhttps://github.com/saadeghi/tw4-component-layer-issue/blob/9b7a944690a35d55c7406756e30cc98c7a239623/output.css#L516","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15045","RelatedDescription":"Open issue \"[v4] `addComponents` is adding styles to `@layer utilities` instead of `@layer components`\" (#15045)"},{"Id":"2673021650","IsPullRequest":true,"CreatedAt":"2024-11-19T17:54:52","Actor":"philipp-spiess","Number":"15043","RawContent":null,"Title":"Upgrade `jiti` dependency to stable","State":"closed","Body":"This PR updates the `jiti` dependency we use for plugin loading to the latest stable release.\r\n\r\n## Test Plan\r\n\r\nThis was relying on integration tests which contains example of TypeScript configs. It's also rebased to include the new examples from https://github.com/tailwindlabs/tailwindcss/pull/15041.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15043","RelatedDescription":"Closed or merged PR \"Upgrade `jiti` dependency to stable\" (#15043)"},{"Id":"2672645154","IsPullRequest":true,"CreatedAt":"2024-11-19T17:39:50","Actor":"RobinMalfait","Number":"15041","RawContent":null,"Title":"Use `resolveJsId` when resolving `tailwindcss/package.json`","State":"closed","Body":"This PR uses the `enhanced-resolve` instead of `createRequire(…).resolve` which improves the usability when running the upgrade tool locally using Bun.\r\n\r\nWhile testing, we also noticed that it is not possible to use a `cjs`-only plugin inside of an `esm` project. It was also not possible to use an `esm`-only plugin inside of a `cjs` project.\r\n\r\n# Test plan\r\n\r\nWe added integration tests in both the CLI (the CLI is an mjs project) and in the PostCSS (where we can configure a `cjs` and `esm` PostCSS config) integration tests where we created an `esm` and `cjs` based project with 4 plugins (`cjs`-only, `esm`-only, and TypeScript based plugins: `cts`-only and `mts`-only).","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15041","RelatedDescription":"Closed or merged PR \"Use `resolveJsId` when resolving `tailwindcss/package.json`\" (#15041)"},{"Id":"2662466188","IsPullRequest":false,"CreatedAt":"2024-11-19T15:19:10","Actor":"delCatta","Number":"15012","RawContent":null,"Title":"[v4] Can't find Plugins in standalone cli","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.0.0.alpha.34\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: standalone-cli @ 4.0.0.alpha.34\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: N/A\r\n\r\n**What browser are you using?**\r\n\r\nFor example: N/A\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/delCatta/tailwind-issue\r\n\r\n**Describe your issue**\r\n\r\nUsing the latest release I'm unable to use the @tailwindcss/typography plugin because it is not included in the executable.\r\n\r\nI copied the release file and created an `input.css` file with the following contents:\r\n\r\n```\r\n@import \"tailwindcss\";\r\n@plugin \"@tailwindcss/typography\";\r\n```\r\n\r\nThen I ran `./tailwindcss-macos-arm64 -i index.css -o built.css` and got:\r\n\r\n```\r\n./tailwindcss-macos-arm64 -i index.css -o built.css\r\n5737 |       }\r\n5738 |       const message = `resolve '${request}' in '${path}'`;\r\n5739 |       const finishResolved = (result) => {\r\n5740 |         return callback(null, result.path === false ? false : `${result.path.replace(/#/g, \"\\0#\")}${result.query ? result.query.replace(/#/g, \"\\0#\") : \"\"}${result.fragment || \"\"}`, result);\r\n5741 |       };\r\n5742 |         const error = new Error(\"Can't \" + message);\r\n                             ^\r\nerror: Can't resolve '@tailwindcss/typography' in '<THE-CURRENT-FOLDER>'\r\n      at finishWithoutResolve (/$bunfs/root/tailwindcss-macos-arm64:5742:23)\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n```\r\n\r\nI wish to be able to use on rails using [tailwind-rails](https://github.com/rails/tailwindcss-rails) and [tailwind-ruby](https://github.com/flavorjones/tailwindcss-ruby)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15012","RelatedDescription":"Closed issue \"[v4] Can't find Plugins in standalone cli\" (#15012)"},{"Id":"2668008348","IsPullRequest":true,"CreatedAt":"2024-11-19T15:19:08","Actor":"philipp-spiess","Number":"15028","RawContent":null,"Title":"Bundle core plugins with the standalone build","State":"closed","Body":"Closes #15012\r\n\r\nWe do not have replacements for these plugins _just yet_. In order to increase compatibility with setups that rely on some of these legacy plugins, this PR bundles `@tailwindcss/forms`, `@tailwindcss/typography`, and `@tailwindcss/aspect-ratio` (after https://github.com/tailwindlabs/tailwindcss/pull/15029) with the standalone build now. \r\n\r\nIn comparison to v3, this omits the `@tailwindcss/container-queries` plugin since is not a first-party feature of Tailwind CSS v4.\r\n\r\n## Test Plan\r\n\r\nAdded an integration test. I also tested this by running the standalone binary in a temporary folder with as simple input css:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n@plugin \"@tailwindcss/typography\";\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15028","RelatedDescription":"Closed or merged PR \"Bundle core plugins with the standalone build\" (#15028)"},{"Id":"2669707931","IsPullRequest":true,"CreatedAt":"2024-11-19T15:01:45","Actor":"thecrypticace","Number":"15033","RawContent":null,"Title":"Implement compat for `<alpha-value>` from v3","State":"closed","Body":"This implements backwards compatibility for colors that use the old `<alpha-value>` feature from v3. We can do this by replacing `<alpha-value>` with `1` because we use `color-mix` to actually apply opacity modifiers in v4.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15033","RelatedDescription":"Closed or merged PR \"Implement compat for `<alpha-value>` from v3\" (#15033)"},{"Id":"2662601377","IsPullRequest":true,"CreatedAt":"2024-11-19T14:53:02","Actor":"philipp-spiess","Number":"15015","RawContent":null,"Title":"Upgrade: Error when project is already using Tailwind CSS v4","State":"closed","Body":"In some local testing we ran the `@tailwindcss/upgrade` command twice in a row. It would be great to get some feedback that this is not working, so this PR now checks if it can resolve the installed version of `tailwindcss` and if it can, it requires it to be < 4 (you can bypass this check with `--force`).","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15015","RelatedDescription":"Closed or merged PR \"Upgrade: Error when project is already using Tailwind CSS v4\" (#15015)"},{"Id":"2672237016","IsPullRequest":true,"CreatedAt":"2024-11-19T14:52:30","Actor":"RobinMalfait","Number":"15040","RawContent":null,"Title":"Upgrade: don't show error during upgrade when analyzing external URL import","State":"closed","Body":"This PR improves the output of the upgrade tool when we are handling imports and the import happens to be an external URL.\r\n\r\nExternal URLs shouldn't and can't be upgraded, so printing an error message doesn't help the user.\r\n\r\nAdditionally, if an `@import` is using the `url(…)` function, then we skip over it and continue with the rest of the imports. \r\n\r\n| Before | After |\r\n| --- | --- |\r\n| <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/1ee00ea4-68e1-4252-b1cf-30a04f608b75\"> | <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/da1f3eaf-dedb-4b1b-bf73-93bdfee65759\"> |\r\n\r\nRunning this on github.com/parcel-bundler/parcel\r\n\r\n| Before | After |\r\n| -- | -- |\r\n| <img width=\"1552\" alt=\"image\" src=\"https://github.com/user-attachments/assets/89987444-8008-4edd-a907-6ad9276a86a0\"> | <img width=\"1552\" alt=\"image\" src=\"https://github.com/user-attachments/assets/cc2a34ae-ef17-4ad1-b06d-097874400b4d\"> |\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15040","RelatedDescription":"Closed or merged PR \"Upgrade: don't show error during upgrade when analyzing external URL import\" (#15040)"},{"Id":"2668441555","IsPullRequest":true,"CreatedAt":"2024-11-19T14:52:06","Actor":"philipp-spiess","Number":"15029","RawContent":null,"Title":"Support complex `addUtilities()` configs","State":"closed","Body":"This PR adds support for complex `addUtilities()` configuration objects that use child combinators and other features.\r\n\r\nFor example, in v3 it was possible to add a utility that changes the behavior of all children of the utility class node by doing something like this:\r\n\r\n```ts\r\naddUtilities({\r\n  '.red-children > *': {\r\n    color: 'red',\r\n  },\r\n});\r\n```\r\n\r\nThis is a pattern that was used by first-party plugins like `@tailwindcss/aspect-ratio` but that we never made working in v4, since it requires parsing the selector and properly extracting all utility candidates.\r\n\r\nWhile working on the codemod that can transform `@layer utilities` scoped declarations like the above, we found out a pretty neat heuristics on how to migrate these cases. We're basically finding all class selectors and replace them with `&`. Then we create a nested CSS structure like this:\r\n\r\n```css\r\n.red-children {\r\n  & > * {\r\n    color: red;\r\n  }\r\n}\r\n```\r\n\r\nDue to first party support for nesting, this works as expected in v4.\r\n\r\n## Test Plan\r\n\r\nWe added unit tests to ensure the rewriting works in some edge cases. Furthermore we added an integration test running the `@tailwindcss/aspect-ratio` plugin. We've also installed the tarballs in the Remix example from the [playgrounds](https://github.com/philipp-spiess/tailwindcss-playgrounds) and ensure we can use the `@tailwindcss/aspect-ratio` plugin just like we could in v3:\r\n \r\n<img width=\"2560\" alt=\"Screenshot 2024-11-18 at 13 44 52\" src=\"https://github.com/user-attachments/assets/31889131-fad0-4c37-b574-cfac2b99f786\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15029","RelatedDescription":"Closed or merged PR \"Support complex `addUtilities()` configs\" (#15029)"},{"Id":"2672024298","IsPullRequest":true,"CreatedAt":"2024-11-19T13:29:51","Actor":"RobinMalfait","Number":"15038","RawContent":null,"Title":"Improve robustness when upgrading","State":"closed","Body":"This PR improves the robustness when running the upgrade script.\r\n\r\nRight now when you run it and if you run into issues, it could be that an error with stack trace is printed in the terminal. This PR improves most of the cases where this happens to ensure the output is easier to parse as a human.\r\n\r\n# Test plan:\r\n\r\nUsed SourceGraph to find some popular open source repositories that use Tailwind and tried to run the upgrade tool on those repositories. If a repository fails to upgrade, then that's a good candidate for this PR to showcase the improved error messages.\r\n\r\ngithub.com/docker/docs\r\n\r\n| Before | After |\r\n| --- | --- |\r\n| <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/ae28c1c1-8472-45a2-89f7-ed74a703e216\"> | <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/6bf4ec79-ddfc-47c4-8ba0-051566cb0116\"> |\r\n\r\ngithub.com/parcel-bundler/parcel\r\n\r\n| Before | After |\r\n| --- | --- |\r\n| <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/826e510f-df7a-4672-9895-8e13da1d03a8\"> | <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/a75146f5-bfac-4c96-a02b-be00ef671f73\"> |\r\n\r\ngithub.com/vercel/next.js\r\n\r\n| Before | After |\r\n| --- | --- |\r\n| <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8d6c3744-f210-4164-b1ee-51950d44b349\"> | <img width=\"1455\" alt=\"image\" src=\"https://github.com/user-attachments/assets/b2739a9a-9629-411d-a506-3993a5867caf\"> |\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15038","RelatedDescription":"Closed or merged PR \"Improve robustness when upgrading\" (#15038)"},{"Id":"2671458676","IsPullRequest":false,"CreatedAt":"2024-11-19T13:24:13","Actor":"Neutrovertido","Number":"15035","RawContent":null,"Title":"OS Fractional Scaling interferes with mx-auto's spacing","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.15\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nUnsure about that, will list all dependencies:\r\n\"autoprefixer\": \"^10.4.20\"\r\n\"postcss\": \"^8.4.49\"\r\n\"tailwindcss\": \"^3.4.15\"\r\n\r\nI'm using ReactJS v13.4.0 as my framework too.\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.11\r\n\r\n**What browser are you using?**\r\n\r\nMozilla Firefox, but I confirmed it also happens in Chromium.\r\n\r\n**What operating system are you using?**\r\n\r\nWindows 11\r\n\r\n**Reproduction URL**\r\n\r\nBug Report source code: https://github.com/Neutrovertido/tailwind-fractional-scaling-bug\r\n\r\nLive preview: https://glowing-sunshine-667537.netlify.app/\r\n\r\n**Describe your issue**\r\n\r\nThe issue seemingly appears only when using fractional scaling (ie. 125%, 150%) on the OS configuration and also only when tailwind uses the `xl` viewport.\r\n\r\nThis also seemingly doesn't happen when scaling using the web browser on 100% system scaling.\r\n\r\nWhat happens is `mx-auto` considerably decreases the horizontal margin, making it look too close to the screen borders in comparison to 100% scaling.\r\n\r\nTo replicate this bug, simply put your \"Scale\" system setting to anything above 100% and load a site that uses `mx-auto` with a viewport of `xl`:\r\n![image](https://github.com/user-attachments/assets/821765fb-a7ea-44e0-938b-11186cd841ec)\r\n\r\nThen, compare it to how it looks on 100% scaling, and voila.\r\n\r\n\r\nExpected:\r\n![image](https://github.com/user-attachments/assets/2da2865c-7e5e-4932-9705-dc47f02bd1ff)\r\n\r\n\r\nResult:\r\n![image](https://github.com/user-attachments/assets/23802274-591e-48d4-95ba-78fc48cd39b7)\r\n\r\n__This bug does _NOT_ happen on viewports other than `xl`__:\r\n![image](https://github.com/user-attachments/assets/e4e92e83-0732-49cb-8a19-15f2fee6bbbb)\r\n\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15035","RelatedDescription":"Closed issue \"OS Fractional Scaling interferes with mx-auto's spacing\" (#15035)"},{"Id":"2666251985","IsPullRequest":false,"CreatedAt":"2024-11-19T11:06:11","Actor":"Hugos68","Number":"15021","RawContent":null,"Title":"Plugin config extensions aren't deepmerged.","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n- 3.4.9\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n- vite:  5.0.3\r\n\r\n**What version of Node.js are you using?**\r\n\r\n- 22.11.0\r\n\r\n**What browser are you using?**\r\n\r\n- Chrome\r\n\r\n**What operating system are you using?**\r\n\r\n- Windows\r\n\r\n**Reproduction URL**\r\n\r\nUnsure how to reproduce in tailwind.play as it's a config issue and I can't access the post merge config.\r\n\r\n**Describe your issue**\r\n\r\n[In the tailwind docs](https://tailwindcss.com/docs/plugins#extending-the-configuration) it states quote:\r\n> Plugins can merge their own set of configuration values into the user’s tailwind.config.js configuration by providing an object as the second argument to the plugin function.\r\n\r\nSo when doing the following:\r\n```js\r\nimport plugin from 'tailwindcss/plugin';\r\n\r\nexport default {\r\n    content: ['one']\r\n    plugins: [\r\n       plugin(() => {}, { content: ['two'] })\r\n    ]\r\n}\r\n```\r\n\r\nI would expect the merged config to look like:\r\n```js\r\nexport default {\r\n    content: ['one', 'two']\r\n}\r\n```\r\nBut the actual resulted config is:\r\n```js\r\nexport default {\r\n    content: ['one']\r\n}\r\n```\r\n\r\nThis means because the `content` field is present in the config, the plugin's `content` field is completely ignored. This makes authoring plugins more painful as know I need to instruct users to add stuff to their `content` field manually instead of have my plugin do this *for* them.\r\n\r\nIs this intended behaviour?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15021","RelatedDescription":"Closed issue \"Plugin config extensions aren't deepmerged.\" (#15021)"},{"Id":"2671750345","IsPullRequest":true,"CreatedAt":"2024-11-19T10:57:30","Actor":"philipp-spiess","Number":"15036","RawContent":null,"Title":"Upgrade: Add form reset styles","State":"open","Body":"This PR adds a codemod that will insert a form reset in case we want to move forward with the default form related changes.\r\n\r\nIt will insert the following CSS:\r\n\r\n```css\r\n/*\r\n  In Tailwind CSS v4, form elements have basic styling applied to them. For\r\n  compatibility with v3, we've applied the following resets:\r\n*/\r\n@layer base {\r\n  input,\r\n  textarea,\r\n  select,\r\n  button {\r\n    border: 0px solid;\r\n    border-radius: 0;\r\n    padding: 0;\r\n    background-color: transparent;\r\n  }\r\n}\r\n```\r\n\r\n## Test Plan\r\n\r\nTBD, once we finalize the message we will run this across an example project and all e2e tests","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15036","RelatedDescription":"Open PR \"Upgrade: Add form reset styles\" (#15036)"},{"Id":"2669130900","IsPullRequest":false,"CreatedAt":"2024-11-18T16:32:43","Actor":"flavorjones","Number":"15031","RawContent":null,"Title":"[v4] Musl/Alpine is not supported in the V4 alphas","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.34\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nBinary CLI executable from https://github.com/tailwindlabs/tailwindcss/releases/tag/v4.0.0-alpha.34\r\n\r\n**What version of Node.js are you using?**\r\n\r\nN/A\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nAlpine Linux (musl libc)\r\n\r\n**Reproduction URL**\r\n\r\nYou can see the failure in CI here: https://github.com/flavorjones/tailwindcss-ruby/actions/runs/11896261069/job/33147810896?pr=21#step:7:5\r\n\r\nCompare with successful build run on a glibc system here: https://github.com/flavorjones/tailwindcss-ruby/actions/runs/11896261069/job/33147810459?pr=21#step:5:5\r\n\r\n**Describe your issue**\r\n\r\nWhen running the binary x86_64-linux executable on an Alpine (musl libc) system, I see:\r\n\r\n```\r\n/bin/sh: ./tailwindcss: not found\r\n```\r\n\r\nRunning `ldd` to see whether shared libraries are resolved properly reveals the problem:\r\n\r\n```\r\n# ldd ./tailwindcss\r\n        /lib64/ld-linux-x86-64.so.2 (0x72662d672000)\r\n        libc.so.6 => /lib64/ld-linux-x86-64.so.2 (0x72662d672000)\r\nError loading shared library ld-linux-x86-64.so.2: No such file or directory (needed by ./tailwindcss)\r\n        libpthread.so.0 => /lib64/ld-linux-x86-64.so.2 (0x72662d672000)\r\n        libdl.so.2 => /lib64/ld-linux-x86-64.so.2 (0x72662d672000)\r\n        libm.so.6 => /lib64/ld-linux-x86-64.so.2 (0x72662d672000)\r\nError relocating ./tailwindcss: gnu_get_libc_version: symbol not found\r\nError relocating ./tailwindcss: backtrace: symbol not found\r\nError relocating ./tailwindcss: backtrace_symbols: symbol not found\r\nError relocating ./tailwindcss: __cxa_thread_atexit_impl: symbol not found\r\nError relocating ./tailwindcss: __cxa_at_quick_exit: symbol not found\r\nError relocating ./tailwindcss: __register_atfork: symbol not found\r\nError relocating ./tailwindcss: __strftime_l: symbol not found\r\nError relocating ./tailwindcss: __cxa_thread_atexit_impl: symbol not found\r\nError relocating ./tailwindcss: unsupported relocation type 37\r\nError relocating ./tailwindcss: unsupported relocation type 37\r\nError relocating ./tailwindcss: unsupported relocation type 37\r\n```\r\n\r\nA previous issue (#14569) reported this, and the outcome was to open an upstream `bun` bug at https://github.com/oven-sh/bun/issues/14292. The reply there was, essentially:\r\n\r\n- musl is not supported by bun and won't be\r\n- you should be able to `apk install gcompat` to make it work\r\n\r\nUnfortunately, `gcompat` does not help:\r\n\r\n```\r\n# apk add gcompat\r\n(1/3) Installing musl-obstack (1.2.3-r2)\r\n(2/3) Installing libucontext (1.2-r3)\r\n(3/3) Installing gcompat (1.1.0-r4)\r\nOK: 89 MiB in 55 packages\r\n\r\n# ./tailwindcss\r\nError relocating /tailwindcss-ruby-mount/exe/x86_64-linux/tailwindcss: unsupported relocation type 37\r\nError relocating /tailwindcss-ruby-mount/exe/x86_64-linux/tailwindcss: unsupported relocation type 37\r\nError relocating /tailwindcss-ruby-mount/exe/x86_64-linux/tailwindcss: unsupported relocation type 37\r\n\r\n# ldd ./tailwindcss\r\n        /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\n        libc.so.6 => /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\n        ld-linux-x86-64.so.2 => /lib/ld-linux-x86-64.so.2 (0x7db1dbfbc000)\r\n        libpthread.so.0 => /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\n        libdl.so.2 => /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\n        libm.so.6 => /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\nError relocating ./tailwindcss: gnu_get_libc_version: symbol not found\r\nError relocating ./tailwindcss: backtrace: symbol not found\r\nError relocating ./tailwindcss: backtrace_symbols: symbol not found\r\nError relocating ./tailwindcss: __cxa_thread_atexit_impl: symbol not found\r\nError relocating ./tailwindcss: __cxa_at_quick_exit: symbol not found\r\nError relocating ./tailwindcss: __register_atfork: symbol not found\r\nError relocating ./tailwindcss: __strftime_l: symbol not found\r\nError relocating ./tailwindcss: __cxa_thread_atexit_impl: symbol not found\r\nError relocating ./tailwindcss: unsupported relocation type 37\r\nError relocating ./tailwindcss: unsupported relocation type 37\r\nError relocating ./tailwindcss: unsupported relocation type 37\r\n```\r\n\r\nI suspect this is going to be a blocker to adoption for many people given how widespread Alpine images are, particularly in CI/CD pipelines.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15031","RelatedDescription":"Open issue \"[v4] Musl/Alpine is not supported in the V4 alphas\" (#15031)"},{"Id":"2666665485","IsPullRequest":true,"CreatedAt":"2024-11-18T15:28:16","Actor":"RobinMalfait","Number":"15025","RawContent":null,"Title":"Add new `in-*` variant","State":"closed","Body":"This PR adds a new `in-*` variant that allows you to apply utilities when you are in a certain selector.\r\n\r\nWhile doing research for codemods, we notice that some people use `group-[]:flex` (yep, the arbitrary value is empty…). The idea behind is that people want to know if you are in a `.group` or not.\r\n\r\nSimilarly, some people use `group-[]/name:flex` to know when you are in a `.group/name` class or not.\r\n\r\nThis new `in-*` variant allows you to do that without any hacks.\r\n\r\nIf you want to check whether you are inside of a `p` tag, then you can write `in-[p]:flex`. If you want to check that you are inside of a `.group`, you can write `in-[.group]`.\r\n\r\nThis variant is also a compound variant, which means that you can write `in-data-visible:flex` which generates the following CSS:\r\n```css\r\n:where([data-visible]) .in-data-visible\\:flex {\r\n  display: flex;\r\n}\r\n```\r\n\r\nThis variant also compounds with `not-*`, for example: `not-in-[.group]:flex`.\r\n\r\nAdditionally, this PR also includes a codemod to convert `group-[]:flex` to `in-[.group]:flex`.\r\n\r\n---\r\n\r\nThis was proposed before for v3 in #13912\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15025","RelatedDescription":"Closed or merged PR \"Add new `in-*` variant\" (#15025)"},{"Id":"2666514239","IsPullRequest":true,"CreatedAt":"2024-11-18T15:19:16","Actor":"RobinMalfait","Number":"15022","RawContent":null,"Title":"Migrate `[&>*]` to `*` variant, and `[&_*]` to `**` variant","State":"closed","Body":"This PR adds a migration to convert the `[&>*]` variant to the `*` variant. Additionally this PR also converts the `[&_*]` variant to the `**` variant.\r\n\r\nWe use this variant in Catalyst for example, and now that the specificity is the same as `*`, we can use the more modern syntax instead.\r\n\r\n\r\n# Test plan:\r\n\r\nRunning this on Catalyst results in a diff like:\r\n<img width=\"615\" alt=\"image\" src=\"https://github.com/user-attachments/assets/f384885e-cae1-4b6b-80ab-85f76fa89a33\">\r\n\r\n<img width=\"833\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8a185e1d-0f1b-4fe6-9e06-ca7597534398\">\r\n\r\n\r\nNote: the swapped order of variants is another codemod at work\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15022","RelatedDescription":"Closed or merged PR \"Migrate `[&>*]` to `*` variant, and `[&_*]` to `**` variant\" (#15022)"},{"Id":"2665965228","IsPullRequest":true,"CreatedAt":"2024-11-18T14:47:48","Actor":"RobinMalfait","Number":"15020","RawContent":null,"Title":"Re-introduce automatic var injection shorthand","State":"closed","Body":"This PR re-introduces the automatic var injection feature.\r\n\r\nFor some backstory, we used to support classes such as `bg-[--my-color]` that resolved as-if you wrote `bg-[var(--my-color)]`. \r\n\r\nThe is issue is that some newer CSS properties accepts dashed-idents (without the `var(…)`). This means that some properties accept `view-timeline-name: --my-name;` (see: https://developer.mozilla.org/en-US/docs/Web/CSS/view-timeline-name).\r\n\r\nTo make this a tiny bit worse, these properties _also_ accept `var(--my-name-reference)` where the variable `--my-name-reference` could reference a dashed-ident such as `--my-name`.\r\n\r\nThis makes the `bg-[--my-color]` ambiguous because we don't know if you want `var(--my-color)` or `--my-color`.\r\n\r\nWith this PR, we bring back the automatic var injection feature as syntactic sugar, but we use a different syntax to avoid the ambiguity. Instead of `bg-[--my-color]`, you can now write `bg-(--my-color)` to get the same effect as `bg-[var(--my-color)]`.\r\n\r\nThis also applies to modifiers, so `bg-red-500/[var(--my-opacity)]` can be written as `bg-red-500/(--my-opacity)`. To go full circle, you can rewrite `bg-[var(--my-color)]/[var(--my-opacity)]` as `bg-(--my-color)/(--my-opacity)`.\r\n\r\n---\r\n\r\nThis is implemented as syntactical sugar at the parsing stage and handled when re-printing. Internally the system (and every plugin) still see the proper `var(--my-color)` value.\r\n\r\nSince this is also handled during printing of the candidate, codemods don't need to be changed but they will provide the newly updated syntax. \r\n\r\nE.g.: running this on the Catalyst codebase, you'll now see changes like this:\r\n<img width=\"542\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8f0e26f8-f4c9-4cdc-9f28-52307c38610e\">\r\n\r\nWhereas before we converted this to the much longer `min-w-[var(--button-width)]`.\r\n\r\n---\r\n\r\nAdditionally, this required some changes to the Oxide scanner to make sure that `(` and `)` are valid characters for arbitrary-like values.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15020","RelatedDescription":"Closed or merged PR \"Re-introduce automatic var injection shorthand\" (#15020)"},{"Id":"2664995693","IsPullRequest":false,"CreatedAt":"2024-11-18T10:53:03","Actor":"danie-ramdhani","Number":"15018","RawContent":null,"Title":"[V4] Theme colors broken on build result","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.33\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite 5.4.11\r\n\r\n**What version of Node.js are you using?**\r\n\r\n—\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\n—\r\n\r\n**Describe your issue**\r\n\r\n`--color-primary` is not works properly on build result but works as expected in development mode.\r\n\r\n**Steps to Reproduce**\r\n\r\n```html\r\n<div\r\n        style=\"background-color: var(--color-primary); width: 40px; height: 40px; margin-top: 10px; margin-bottom: 10px;\">\r\n</div>\r\n```\r\n\r\n```css\r\n@theme {\r\n    --color-primary: light-dark(theme(--color-cyan-700), theme(--color-cyan-300));\r\n}\r\n```\r\n\r\n**dev mode result**\r\n\r\n![dev mode result](https://github.com/user-attachments/assets/a9300be4-16d1-4f15-bd9d-3b86e658f341)\r\n\r\n![dev mode result 1](https://github.com/user-attachments/assets/c1611ded-e7ce-4710-8c2d-c19ae79da90b)\r\n\r\n**build result**\r\n\r\n![build result](https://github.com/user-attachments/assets/33e1b80d-fb21-4958-a654-373f561b6d40)\r\n\r\n![build result 1](https://github.com/user-attachments/assets/de430058-4843-4891-bba0-9dbe0341dd9c)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15018","RelatedDescription":"Closed issue \"[V4] Theme colors broken on build result\" (#15018)"},{"Id":"2666577481","IsPullRequest":true,"CreatedAt":"2024-11-18T09:30:46","Actor":"depfu[bot]","Number":"15024","RawContent":null,"Title":"Update postcss 8.4.47 → 8.4.49 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this upgrade. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ postcss (8.4.47 → 8.4.49) · [Repo](https://github.com/postcss/postcss) · [Changelog](https://github.com/postcss/postcss/blob/main/CHANGELOG.md)\n\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/postcss/postcss/releases/tag/8.4.49\">8.4.49</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>Fixed custom syntax without <code class=\"notranslate\">source.offset</code> (by <a href=\"https://bounce.depfu.com/github.com/romainmenke\">@romainmenke</a>).</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/postcss/postcss/releases/tag/8.4.48\">8.4.48</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>Fixed position calculation in error/warnings methods (by <a href=\"https://bounce.depfu.com/github.com/romainmenke\">@romainmenke</a>).</li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/postcss/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/postcss/postcss/compare/5e6fd1302d2cc9a844ac99282b2b7745e4ac0ed3...aed8b899884db4bc89f60782771eecd8c7861b32\">See the full diff on Github</a>. The new version differs by 7 commits:</p>\n<ul>\n<li><a href=\"https://github.com/postcss/postcss/commit/aed8b899884db4bc89f60782771eecd8c7861b32\"><code>Release 8.4.49 version</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/345063010bf5a9724589a9ee420bd511ec2b12bf\"><code>Fix position calculations when offset is missing (#1983)</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/77420d62919b4d53921a113bbc939ad5e5b49fe6\"><code>Release 8.4.48 version</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/341529ff4e78d7b90526e6e2eb178573192b47e3\"><code>Update dependencies</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/66fa667831bae59696d0b9ba54c2ee5b9dd74b6a\"><code>Add Node.js 23 to CI</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/1a8b261404348c7ba495af0707d6d244d66cf566\"><code>fix inconsistent position calculations (#1980)</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/1cc6ac3bf43a12460d3396e2cb76f14075daea1b\"><code>Clarify usage in docs</code></a></li>\n</ul>\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15024","RelatedDescription":"Closed or merged PR \"Update postcss 8.4.47 → 8.4.49 (patch)\" (#15024)"},{"Id":"2666990652","IsPullRequest":true,"CreatedAt":"2024-11-18T09:23:22","Actor":"depfu[bot]","Number":"15026","RawContent":null,"Title":"Update tree-sitter-typescript 0.23.0 → 0.23.2 (minor)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ tree-sitter-typescript (0.23.0 → 0.23.2)\n\n\n\n\n\nSorry, we couldn't find anything useful about this release.\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15026","RelatedDescription":"Closed or merged PR \"Update tree-sitter-typescript 0.23.0 → 0.23.2 (minor)\" (#15026)"},{"Id":"2662472919","IsPullRequest":true,"CreatedAt":"2024-11-16T20:10:55","Actor":"philipp-spiess","Number":"15013","RawContent":null,"Title":"Bring back `max-w-screen-*` utilities","State":"closed","Body":"This PR brings back the `max-w-screen-*` utilities from v3 that read from the `--breakpoint` namespace. \r\n\r\nSince these utilities are only added back for compatibility reasons, it's put into the compatibility layer.\r\n\r\nNote that this does not do Intellisense recommendations for the functional utility. \r\n\r\n## Test Plan\r\n\r\nUnit tests are upgraded including some from the compat test that extends the `--breakpoint` namespace from `screen` keys. Also tested this in the Vite playground. ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15013","RelatedDescription":"Closed or merged PR \"Bring back `max-w-screen-*` utilities\" (#15013)"},{"Id":"2664480119","IsPullRequest":false,"CreatedAt":"2024-11-16T14:38:26","Actor":"amjarmed","Number":"15017","RawContent":null,"Title":"Empty Selector Generated in Tailwind CSS Output","State":"open","Body":"I encountered an issue where Tailwind CSS generates an invalid empty selector { } in the compiled CSS, causing errors during parsing.\r\n\r\n\r\n```bash\r\n\r\nParsing css source code failed\r\n  839 |   border-width: 1px;\r\n  840 | }\r\n> 841 |  {\r\n      |   ^\r\n  842 |   border-bottom-width: 1px !important;\r\n  843 | }\r\n  844 | .border-b {\r\n\r\nInvalid empty selector at\r\n\r\n\r\n```\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n-  \"tailwindcss\": \"^3.4.14\",\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n-  \"next\": \"15.0.1\",\r\n\r\n**What browser are you using?**\r\n\r\n- Chrome\r\n\r\n**What operating system are you using?**\r\n\r\n-  Windows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/amjarmed/jsm-banking\r\n\r\n\r\n**Describe your issue**\r\nTailwind CSS should not generate any empty selectors. All rules should be associated with a valid class or selector.\r\nA selector {border-bottom-width: 1px !important; } is generated without a class name, leading to parsing failures during build or runtime.\r\n\r\n\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15017","RelatedDescription":"Open issue \"Empty Selector Generated in Tailwind CSS Output\" (#15017)"},{"Id":"2662249111","IsPullRequest":true,"CreatedAt":"2024-11-15T21:06:52","Actor":"RobinMalfait","Number":"15010","RawContent":null,"Title":"Resolve imports from CSS file","State":"closed","Body":"This PR adds an improvement to the upgrade tool to make sure that if you pass a single CSS file, that the upgrade tool resolves all the imports in that file and processes them as well.\r\n\r\n\r\nTest plan:\r\n---\r\n\r\nCreated a project where `index.css` imports `other.css`. Another `leave-me-alone.css` is created to proof that this file is _not_ changed. Running the upgrade guide using `index.css` also migrates `other.css` but not `leave-me-alone.css`.\r\n\r\nHere is a video so you don't have to manually create it:\r\n\r\n\r\nhttps://github.com/user-attachments/assets/20decf77-77d2-4a7c-8ff1-accb1c77f8c1\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15010","RelatedDescription":"Closed or merged PR \"Resolve imports from CSS file\" (#15010)"},{"Id":"2662578029","IsPullRequest":true,"CreatedAt":"2024-11-15T17:02:57","Actor":"RobinMalfait","Number":"15014","RawContent":null,"Title":"Make `flex` a static utility","State":"closed","Body":"This PR makes `flex` a static utility, which also means that it is located near the other static `display` utilities.\n\nThis is possible because we changed how `parseCandidate` returns an array of utilities instead of a single utility.\n\nThis makes the code more consistent and a bit easier to understand.\n\nBonus: turns out that `flex` was never suggested to intellisense, but now it is!\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15014","RelatedDescription":"Closed or merged PR \"Make `flex` a static utility\" (#15014)"},{"Id":"2662425679","IsPullRequest":true,"CreatedAt":"2024-11-15T16:18:48","Actor":"philipp-spiess","Number":"15011","RawContent":null,"Title":"Ensure clients pin the `tailwindcss` version","State":"closed","Body":"We noticed that in the current alpha 34 release, the `package.json` file of the `@tailwindcss/node` package only defines `tailwindcss` as a dev dependency. This makes it very easy for version mismatches to happen when a v3 version (or an earlier v4 alpha for that matter) was installed in the same project:\r\n\r\n```json\r\n{\r\n  \"name\": \"@tailwindcss/node\",\r\n  \"version\": \"4.0.0-alpha.34\",\r\n  \"description\": \"A utility-first CSS framework for rapidly building custom user interfaces.\",\r\n  \"license\": \"MIT\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/tailwindlabs/tailwindcss.git\",\r\n    \"directory\": \"packages/@tailwindcss-node\"\r\n  },\r\n  \"bugs\": \"https://github.com/tailwindlabs/tailwindcss/issues\",\r\n  \"homepage\": \"https://tailwindcss.com\",\r\n  \"files\": [\r\n    \"dist/\"\r\n  ],\r\n  \"publishConfig\": {\r\n    \"provenance\": true,\r\n    \"access\": \"public\"\r\n  },\r\n  \"exports\": {\r\n    \".\": {\r\n      \"types\": \"./dist/index.d.ts\",\r\n      \"import\": \"./dist/index.mjs\",\r\n      \"require\": \"./dist/index.js\"\r\n    },\r\n    \"./require-cache\": {\r\n      \"types\": \"./dist/require-cache.d.ts\",\r\n      \"default\": \"./dist/require-cache.js\"\r\n    },\r\n    \"./esm-cache-loader\": {\r\n      \"types\": \"./dist/esm-cache.loader.d.mts\",\r\n      \"default\": \"./dist/esm-cache.loader.mjs\"\r\n    }\r\n  },\r\n  \"devDependencies\": {\r\n    \"tailwindcss\": \"4.0.0-alpha.34\"\r\n  },\r\n  \"dependencies\": {\r\n    \"enhanced-resolve\": \"^5.17.1\",\r\n    \"jiti\": \"^2.0.0-beta.3\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"tsup-node\",\r\n    \"dev\": \"pnpm run build -- --watch\"\r\n  }\r\n}\r\n```\r\n\r\nFurthermore, we were trying to fix issues where our integration test setup could not install `tailwindcss@3` because of how we did pnpm overrides. \r\n\r\nThis PR fixes this by:\r\n\r\n- Ensuring every client that calls into `tailwindcss` core marks it as a version-pinned dependency. You are still required to install `tailwindcss` in your project along side a client (e.g. `@tailwindcss/vite`) but we now only use your installed version for importing the respective `.css` files. For the core logic, we are now requiring each package to use `tailwindcss` at the same version. This should help resolve issues like https://github.com/tailwindlabs/tailwindcss/discussions/14652\r\n- We tried to eliminate the dependency on `tailwindcss` from the `@tailwindcss/upgrade` package. Unfortunately this is not possible to do right now because we need to load the CSS files from v4 to create the right environment. In a future version we could bundle the required CSS files with `@tailwidncss/upgrade` but it doesn't seem necessary for now.\r\n- We then changed our integration test overrides to only override the `tailwindcss` package that are dependencies of the known list of packages that we have `tailwindcss` dependencies on: `@tailwindcss/node` and `@tailwindcss/upgrade`. This ensures that we can install v3 of `tailwindcss` in the integration tests and it will work. Something we want to do for some upgrade tests.\r\n\r\n# Test plan\r\n\r\nIntegration work again. Furthermore we added a quick setup with the CLI using the local tarballs and ensured it works:\r\n\r\n```bash\r\npnpm init\r\npnpm install ../../tailwindcss/dist/tailwindcss-cli.tgz \r\npnpm install ../../tailwindcss/dist/tailwindcss.tgz \r\necho '@import \"tailwindcss\";' > index.css\r\necho '<div class=\"underline\"></div>' > index.html\r\npnpm tailwindcss -i index.css -o out.css\r\ncat out.css\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15011","RelatedDescription":"Closed or merged PR \"Ensure clients pin the `tailwindcss` version\" (#15011)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-11-20T03:30:23.0887264Z","RunDurationInMilliseconds":423}