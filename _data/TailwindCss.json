{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2406483156","IsPullRequest":true,"CreatedAt":"2024-07-13T00:48:08","Actor":"adamwathan","Number":"13997","RawContent":null,"Title":"Always generate -webkit-backdrop-filter property","State":"closed","Body":"This PR updates all of the `backdrop-*` utilities to always include the `-webkit-backdrop-filter` vendor prefixed property so that Tailwind isn't completely dependent on autoprefixer or Lightning CSS to produce these styles. We used to do this for `-webkit-appearance: none` for the same reason until browser support for the unprefixed property was solid.\r\n\r\nSafari didn't add support for unprefixed `backdrop-filter` until Safari 18 (which isn't out yet at the time of this PR), so I think it makes sense to just bake this in. We do this in the v4 engine already which is targets more modern browsers than v3, so I think it makes sense to do in v3 as well:\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/utilities.ts#L3262\r\n\r\nHere's an example of where this bit someone in an important situation:\r\n\r\nhttps://x.com/impatienceisav1/status/1811837511544803416","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13997","RelatedDescription":"Closed or merged PR \"Always generate -webkit-backdrop-filter property\" (#13997)"},{"Id":"2405811673","IsPullRequest":true,"CreatedAt":"2024-07-12T15:00:23","Actor":"RobinMalfait","Number":"13995","RawContent":null,"Title":"Implement `not-*` variant with `@media`, `@supports` and `@container` variants","State":"open","Body":"The `not-*` variant worked with other variants that only included selectors, however some variants where only `@media`, `@supports`, and `@container` is used, the `not-*` variant would not work.\n\nThis PR solves that by inverting the query using the `not` keyword.\n\nThis allows us to use `not-print:flex` which compiles to:\n\n```css\n@media not print {\n  .not-print\\:flex {\n    display: flex;\n  }\n}\n```\n<!--\n\n👋 Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13995","RelatedDescription":"Open PR \"Implement `not-*` variant with `@media`, `@supports` and `@container` variants\" (#13995)"},{"Id":"2401981062","IsPullRequest":false,"CreatedAt":"2024-07-11T18:06:03","Actor":"creeper-0910","Number":"13987","RawContent":null,"Title":"Differences occur in the rendering of text and images between the mobile version of Firefox and the mobile version of Chrome.","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nautoprefixer 10.4.19, postcss 8.4.39, typescript 5.2.2, vite 5.3.1\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.14.0\r\n\r\n**What browser are you using?**\r\n\r\nFirefox, Chrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows, Android\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/o-kalan-project/website-test\r\nhttps://o-kalan-project.github.io/website-test/\r\n\r\n**Describe your issue**\r\n\r\nDifferences occur in the rendering of text and images between the mobile version of Firefox and the mobile version of Chrome.\r\nSee attached image for details.\r\n![Screenshot_2024-07-11-03-28-16-28_fd7367fd0afc7e864f00091a00b3d0b0](https://github.com/tailwindlabs/tailwindcss/assets/56744841/b0a17d8a-b391-4910-95b5-d3f534799455)\r\n![Screenshot_2024-07-11-01-52-12-77_40deb401b9ffe8e1df2f1cc5ba480b12](https://github.com/tailwindlabs/tailwindcss/assets/56744841/23961b82-42b8-46ae-8122-14a1c56e67f3)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13987","RelatedDescription":"Closed issue \"Differences occur in the rendering of text and images between the mobile version of Firefox and the mobile version of Chrome.\" (#13987)"},{"Id":"2403567317","IsPullRequest":true,"CreatedAt":"2024-07-11T16:11:21","Actor":"RobinMalfait","Number":"13992","RawContent":null,"Title":"Add support for custom variants via CSS","State":"open","Body":"This PR adds support for custom variants, both via CSS and JS.\n\nWe can define simple variants:\n\nVia CSS:\n```css\n@variant foo (.foo &);\n```\n\nOr via JS:\n```js\naddVariant('foo', '.foo &')\n```\n\nWe can define simple parallel variants:\n\nVia CSS:\n```css\n@variant hocus (&:focus, &:hover);\n```\n\nOr via JS:\n```js\naddVariant('hocus', ['&:focus', '&:hover'])\n```\n\nBut we can also define more complex variants where you might want to use media queries and selectors and nesting and anything you want.\n\nThis also introduces a placeholder value named `@slot` that you can use to mark a specific spot where existing utilities and/or variants will be injected.\n\nVia CSS:\n```css\n@variant strict-hover {\n  @media (hover: hover) {\n    &:hover {\n      @slot;\n    }\n  }\n}\n```\n\nOr via JS:\n```js\naddVariant('strict-hover', {\n  '@media (hover: hover)': {\n    '&:hover': '@slot',\n  }\n})\n```\n\n<!--\n\n👋 Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13992","RelatedDescription":"Open PR \"Add support for custom variants via CSS\" (#13992)"},{"Id":"2401045712","IsPullRequest":true,"CreatedAt":"2024-07-11T13:47:26","Actor":"adamwathan","Number":"13982","RawContent":null,"Title":"Add support for basic `addVariant` plugins with new `@plugin` directive","State":"closed","Body":"This PR adds support for a new `@plugin` directive as a first step towards reintroducing compatibility with v3 plugins:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n@plugin \"my-plugin\";\r\n```\r\n\r\nThis PR only introduces support for the `addVariant` API for now, with support for the other plugin APIs planned for separate PRs.\r\n\r\nJust like v3, plugins are JS files that look like this:\r\n\r\n```js\r\n// my-plugin.js\r\nmodule.exports = function ({ addVariant }) {\r\n  addVariant('hocus', ['&:hover', '&:focus'])\r\n}\r\n```\r\n\r\nThis PR doesn't reintroduce the `tailwindcss/plugin` export yet that you can use to wrap plugins that support configuration options, but planning to reintroduce that as well to ensure old plugins continue to work.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13982","RelatedDescription":"Closed or merged PR \"Add support for basic `addVariant` plugins with new `@plugin` directive\" (#13982)"},{"Id":"2401609841","IsPullRequest":false,"CreatedAt":"2024-07-10T20:28:40","Actor":"jwalkerinterpres","Number":"13984","RawContent":null,"Title":"For Some Odd Reason `max-w-lg` (Only!) Reverts to Tailwind Default","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.3\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss:  8.4.38\r\nvite: 5.0.3\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv21.2.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/j1hGAbY7f1\r\n\r\nJust inspect the div it generates and you will see:\r\n<img width=\"167\" alt=\"image\" src=\"https://github.com/tailwindlabs/tailwindcss/assets/152227747/6495f5b7-41bd-45b3-a63b-f47e6ea79328\">\r\n\r\nAlso, a quick side note: if you're going to require that people provide repro, why not link to the reproduction tool you want them to use?  https://play.tailwindcss.com/ seems like it's expressly designed for this purpose, so why not add a link to it in this template (in the text that says that a repro is required)?\r\n\r\n**Describe your issue**\r\n\r\nI have Tailwind on a production site, and it's awesome.  Everything works perfectly, as expected ... or at least it did until I saw this today:\r\n<img width=\"715\" alt=\"image\" src=\"https://github.com/tailwindlabs/tailwindcss/assets/152227747/873d7b29-7ea0-492d-a195-0363dbb629c7\">\r\n\r\nWhat you want to focus on is that the element in question has two classes: `min-w-lg max-w-lg`.  And I've defined my own custom `lg` of `20px` in tailwind.config.js:\r\n\r\n      spacing: {\r\n         // ....\r\n        lg: '20px',\r\n        // ....\r\n      }\r\n\r\n`min-w-lg` works exactly as expected, rendering a style of `min-width: 20px;`.  But `max-w-lg` ... despite using literally the same `lg` ... is instead rendering the default Tailwind style of `max-width: 32rem;`.\r\n\r\nI'm far from a Tailwind expert, but if `foo-lg` gives me `20px`, `bar-lg` should also give me `20px`, regardless of what foo and bar are (well, as long as they are spacing properties).  As I understand it it, it should be impossible for `min-w-lg` to result in a different number of pixels vs. `max-w-lg` ... but it does.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13984","RelatedDescription":"Closed issue \"For Some Odd Reason `max-w-lg` (Only!) Reverts to Tailwind Default\" (#13984)"},{"Id":"2401319822","IsPullRequest":true,"CreatedAt":"2024-07-10T18:12:20","Actor":"syi0808","Number":"13983","RawContent":null,"Title":"fix: add color resolver with opacity type to colors property","State":"closed","Body":"PR is for missing type in custom color property.\r\nand refactor some duplicated types. \r\n\r\nAfter this PR type is correctly like below screenshot.\r\n### Screenshot\r\n![Screenshot 2024-07-11 at 2 31 07 AM](https://github.com/tailwindlabs/tailwindcss/assets/66503450/e0b3cd68-cc2a-43a0-be26-62778583a526)\r\n\r\nMore information linked issue.\r\nresolves: #13917","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13983","RelatedDescription":"Closed or merged PR \"fix: add color resolver with opacity type to colors property\" (#13983)"},{"Id":"2381899628","IsPullRequest":false,"CreatedAt":"2024-07-10T18:10:51","Actor":"WillSquire","Number":"13917","RawContent":null,"Title":"Config typing doesn’t support opacity function","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNext.js\r\n\r\n**Describe your issue**\r\n\r\nI’m getting a typescript error `Type '({ opacityVariable, opacityValue, }: { opacityVariable?: string; opacityValue?: string; }) => string' is not assignable to type 'string | RecursiveKeyValuePair<string, string>’` when following this example: https://github.com/adamwathan/tailwind-css-variable-text-opacity-demo.\r\n\r\nThe example works, and I can see it is calling this as a function, but it doesn’t look like the typing supports it in `tailwind.config.ts` using `import type { Config } from ‘tailwindcss’`.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13917","RelatedDescription":"Closed issue \"Config typing doesn’t support opacity function\" (#13917)"},{"Id":"2400916854","IsPullRequest":false,"CreatedAt":"2024-07-10T15:04:07","Actor":"vhoyer","Number":"13980","RawContent":null,"Title":"<utility>-<color>/<opacity> syntax doesn't work if your color is a css custom property (`var(--color)`) on tailwindcss@3.4.4","State":"closed","Body":"(sorry for the bad issue start, I accidently pressed enter before writing the issue)\r\n\r\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v3.4.4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: vite 4.5.3\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v22.2.0\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Firefox\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: majaroOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/vhoyer-bug-reproductions/tailwind-slash-opacity-css-var\r\n\r\n**Describe your issue**\r\n\r\nutility-color/opacity syntax doesn't work if your color is a css custom property (var(--color)) on tailwindcss@3.4.4\r\n\r\n```html\r\n  <div class=\"container mx-auto flex p-5 gap-5\">\r\n    <div class=\"size-40 border bg-primary\">\r\n      bg-primary\r\n    </div>\r\n\r\n    <div class=\"size-40 border bg-primary bg-opacity-50\">\r\n      bg-primary bg-opacity-50 (works with workaround)\r\n    </div>\r\n\r\n    <div class=\"size-40 border ring ring-primary\">\r\n      ring-primary\r\n    </div>\r\n\r\n    <div class=\"size-40 border ring ring-primary/50\">\r\n      ring-primary/50 (don't work, there is no workaround)\r\n    </div>\r\n\r\n    <div class=\"size-40 border text-primary\">\r\n      text-primary\r\n    </div>\r\n\r\n    <div class=\"size-40 border text-primary/50\">\r\n      text-primary/50 (don't work, there is no workaround)\r\n    </div>\r\n  </div>\r\n```\r\n\r\n```css\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n@layer base {\r\n  :root {\r\n    --color-primary: #845ec2;\r\n  }\r\n}\r\n```\r\n\r\n```ts\r\nimport type { Config } from 'tailwindcss'\r\n\r\nexport default {\r\n  content: [\r\n    'index.html',\r\n    'src/**/*',\r\n  ],\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        primary: 'var(--color-primary)',\r\n      },\r\n      backgroundColor: ({ theme }) => ({\r\n        // this is the workaround\r\n        primary: `color-mix(in oklab, ${theme('colors.primary')} calc(100% * var(--tw-bg-opacity, 1)), transparent)`,\r\n      }),\r\n\r\n    },\r\n  },\r\n  plugins: [],\r\n} satisfies Config\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13980","RelatedDescription":"Closed issue \"<utility>-<color>/<opacity> syntax doesn't work if your color is a css custom property (`var(--color)`) on tailwindcss@3.4.4\" (#13980)"},{"Id":"2397807982","IsPullRequest":true,"CreatedAt":"2024-07-10T14:05:16","Actor":"RobinMalfait","Number":"13971","RawContent":null,"Title":"Add missing utilities that exist in v3","State":"closed","Body":"This PR adds missing utilities that exist in v3:\r\n\r\n- `resize`, we had `resize-both` but renamed it to just `resize`\r\n- `fill-none`\r\n- `accent-auto`\r\n- ~~`blur-0`~~\r\n- ~~`backdrop-blur-0`~~\r\n- `drop-shadow-none`\r\n- negative `hue-rotate` utilities\r\n- negative `backdrop-hue-rotate` utilities\r\n- ~~`max-w-screen-*` utilities~~\r\n\r\n<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13971","RelatedDescription":"Closed or merged PR \"Add missing utilities that exist in v3\" (#13971)"},{"Id":"2399471104","IsPullRequest":true,"CreatedAt":"2024-07-10T13:56:33","Actor":"RobinMalfait","Number":"13977","RawContent":null,"Title":"Discard invalid `variants` and `utilities` with modifiers","State":"closed","Body":"This PR discards candidates that contain modifiers for variants and utilities that don't need it.\r\n\r\nFor example, right now you can use `hover/foo:flex` or even `flex/foo`. These generate the exact same contents as `hover:flex` and `flex` respectively. However, the `foo` modifier isn't used but is still included in the class name, which means that this currently just generates additional unnecessary CSS.\r\n\r\nFor static utilities and static variants, we can bail early when we detect a modifier and we don't have to continue parsing the candidate. We also don't have to run the known invalid candidate through the system. (In theory if you have a lot of invalid candidates like this it will result in better performance and smaller CSS)\r\n\r\nSome utilities and variants accept modifiers, e.g.: `bg-red-500/50` or `group-hover/foo`. In these cases we can't discard the `modifier` automatically, which is why the PR is relatively big because we have to discard on a case by case basis.\r\n\r\nRequires:\r\n- [x] #13970 \r\n\r\n<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13977","RelatedDescription":"Closed or merged PR \"Discard invalid `variants` and `utilities` with modifiers\" (#13977)"},{"Id":"2398065693","IsPullRequest":true,"CreatedAt":"2024-07-10T13:52:06","Actor":"RobinMalfait","Number":"13972","RawContent":null,"Title":"Ensure opacity modifier with variables work with `color-mix()`","State":"closed","Body":"This PR fixes an issue with opacity modifiers using `0.5` instead of `50%` syntax.\r\n\r\nWe use `color-mix()` in v4 which means that we can use this for the opacity modifier. One thing we do already is convert values such as `0.5` to `50%` because that's what the `color-mix()` function expects.\r\n\r\nHowever, if you use a variable like this:\r\n\r\n```html\r\n<div class=\"[--opacity:0.5] bg-red-500/[var(--opacity)]\"></div>\r\n```\r\n\r\nThis currently generates:\r\n\r\n```css\r\n.bg-red-500\\/\\[var\\(--opacity\\)\\] {\r\n  background-color: color-mix(\r\n    in srgb,\r\n    var(--color-red-500, #ef4444) var(--opacity),\r\n    transparent\r\n  );\r\n}\r\n.\\[--opacity\\:0\\.5\\] {\r\n  --opacity: 0.5;\r\n}\r\n```\r\n\r\nWhich won't work because the opacity variable resolves to `0.5` instead of the expected`50%`.\r\n\r\nThis PR fixes that by always ensuring that we use `* 100%`.\r\n\r\n- If you already had a percentage, we would have `calc(50% * 100%)` which is `50%`.\r\n- If we have `0.5` then we would have `calc(0.5 * 100%)` which is also `50%`.\r\n\r\nGiven this input:\r\n```html\r\n<div class=\"[--opacity:0.5] bg-red-500/[var(--opacity)]\"></div>\r\n```\r\n\r\nWe will now generate this instead:\r\n\r\n```css\r\n.bg-red-500\\/\\[var\\(--opacity\\)\\] {\r\n  background-color: color-mix(\r\n    in srgb,\r\n    var(--color-red-500, #ef4444) calc(var(--opacity) * 100%),\r\n    transparent\r\n  );\r\n}\r\n.\\[--opacity\\:0\\.5\\] {\r\n  --opacity: 0.5;\r\n}\r\n```\r\n\r\n<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13972","RelatedDescription":"Closed or merged PR \"Ensure opacity modifier with variables work with `color-mix()`\" (#13972)"},{"Id":"2400262156","IsPullRequest":true,"CreatedAt":"2024-07-10T13:44:28","Actor":"RobinMalfait","Number":"13978","RawContent":null,"Title":"Fix parsing body-less at-rule without terminating semicolon","State":"closed","Body":"This PR fixes an issue in the CSS parser where a body-less at-rule at the end of the file that is not terminated by a semicolon was missing and didn't parse correctly.\n\nE.g.:\n```css\n@tailwind utilities\n```\n\nWouldn't parse and the AST was empty. With this PR that's fixed.\n\nWhen you have a body-less at-rule nested inside a block and without terminating semicolon that worked already as expected:\n\nE.g.:\n```css\n@layer utilities {\n  @tailwind utilities\n}\n```\n<!--\n\n👋 Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13978","RelatedDescription":"Closed or merged PR \"Fix parsing body-less at-rule without terminating semicolon\" (#13978)"},{"Id":"2398175518","IsPullRequest":false,"CreatedAt":"2024-07-10T12:28:00","Actor":"SandroMaglione","Number":"13973","RawContent":null,"Title":"[v4] issue with generating `:root` variables when symbol in css variable","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n`4.0.0-alpha.17`\r\n\r\n```json\r\n{\r\n  \"name\": \"repro-issue-tailwindcss-v4-root-vars\",\r\n  \"version\": \"0.1.0\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"dev\": \"next dev\",\r\n    \"build\": \"next build\",\r\n    \"start\": \"next start\",\r\n    \"lint\": \"next lint\"\r\n  },\r\n  \"dependencies\": {\r\n    \"react\": \"^18\",\r\n    \"react-dom\": \"^18\",\r\n    \"next\": \"14.2.4\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@tailwindcss/postcss\": \"4.0.0-alpha.17\",\r\n    \"tailwindcss\": \"4.0.0-alpha.17\",\r\n    \"typescript\": \"^5\",\r\n    \"@types/node\": \"^20\",\r\n    \"@types/react\": \"^18\",\r\n    \"@types/react-dom\": \"^18\"\r\n  }\r\n}\r\n```\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`\"next\": \"14.2.4\"`\r\n\r\n**What version of Node.js are you using?**\r\n\r\n`v20.10.0`\r\n\r\n**What browser are you using?**\r\n\r\n`Brave`\r\n\r\n**What operating system are you using?**\r\n\r\n`macOS`\r\n\r\n**Reproduction URL**\r\n\r\n[Repo repository](https://github.com/SandroMaglione/repro-issue-tailwindcss-v4-root-vars)\r\n\r\n**Describe your issue**\r\n\r\nWhen a css variable inside `@theme` contains a special character (in the repo the `/` character) the following happens:\r\n- In dev mode (`npm run dev`) everything works as expected\r\n- In production (`npm run build`) the `:root` variables are missing\r\n\r\nIn the repro the following css causes the `:root` issue after build:\r\nhttps://github.com/SandroMaglione/repro-issue-tailwindcss-v4-root-vars/blob/f58e8d4da4a328f61183175daa70d24fb7146d60/app/globals.css#L1-L7\r\n\r\nIn this situation the output contains the following but no definition of the variable `--spacing-24` in `:root`:\r\n```css\r\n@layer utilities {\r\n  .mt-24 {\r\n    margin-top: var(--spacing-24, 24px);\r\n  }\r\n}\r\n```\r\n\r\nIf instead you escape the `/` character everything works as expected:\r\n```css\r\n@theme {\r\n  --spacing-24: 24px;\r\n  --spacing-1\\/2: 50%;\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13973","RelatedDescription":"Closed issue \"[v4] issue with generating `:root` variables when symbol in css variable\" (#13973)"},{"Id":"2396623835","IsPullRequest":true,"CreatedAt":"2024-07-10T08:01:24","Actor":"RobinMalfait","Number":"13970","RawContent":null,"Title":"Discard invalid classes such as `bg-red-[#000]`","State":"closed","Body":"This PR improves the candidate parser by making sure that invalid candidates are discarded earlier.\n\nWhen using a utility such as `bg-red-500`, then we have to find the actual plugin by finding the `root`. In this case we will try:\n\n- root: `bg-red-500`, value: null  <- No match yet\n- root: `bg-red`, value: `500`     <- No match yet\n- root: `bg`, value: `red-500`     <- Bingo, `bg` is a known root\n\nHowever, if you are using arbitrary values such as `bg-[#000]`, then we know that everything before the `-[#000]` will be the root of the plugin. In this case we can do a direct lookup for `bg`.\n\nBefore this change, this wasn't the case (in v4), which means that we could write `bg-red-[#000]` and it parsed just fine.\n\nThis PR also adds a test for a case that wasn't covered by any tests, which is when you use a candidate such as `bg-`. This parsed as a root of `\"bg\"` and a value of `\"\"`.\n\n<!--\n\n👋 Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13970","RelatedDescription":"Closed or merged PR \"Discard invalid classes such as `bg-red-[#000]`\" (#13970)"},{"Id":"2395545052","IsPullRequest":false,"CreatedAt":"2024-07-08T13:24:56","Actor":"7iomka","Number":"13968","RawContent":null,"Title":"Why the `container -> screens` uses values as media query?","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nVite\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv18.18.2\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/ZD4y2b0WTo?file=config\r\n\r\n**Describe your issue**\r\n\r\nWhy the `screens` under `container` uses values as media query?\r\n\r\nFor example for `lg` breakpoint I have 992px value (62em equivalent), and I want the max-width of container for this breakpoint to be 960px (60em eq).\r\n\r\nExpected result: \r\n```css\r\n@media (min-width: 62em) {\r\n    .container {\r\n        max-width: 60rem;\r\n    }\r\n}\r\n```\r\n\r\nActual result:\r\n```css\r\n@media (min-width: 60em) {\r\n    .container {\r\n        max-width: 60em;\r\n    }\r\n}\r\n```\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13968","RelatedDescription":"Closed issue \"Why the `container -> screens` uses values as media query?\" (#13968)"},{"Id":"2394650271","IsPullRequest":false,"CreatedAt":"2024-07-08T05:37:51","Actor":"chiro-hiro","Number":"13963","RawContent":null,"Title":"[Security] Is this a supply chain attack that targeted tailwind?","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v3.4.4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: postcss-cli 8.3.1\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v18.20.3\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS\r\n\r\n**Reproduction URL**\r\n\r\nN/A\r\n\r\n**Describe your issue**\r\n\r\nI think you guys should check your dependency packages, for instance the package `@isaacs/cliui@8.0.2` contains many empty packages, e.g: https://www.npmjs.com/package/string-width-cjs?activeTab=code, and that's weird that the authors of these package is unknown but it was included in `@isaacs/cliui@8.0.2` with ~20M downloaded.\r\n\r\n```\r\n  ├─┬ tailwindcss@3.4.4\r\n  │ └─┬ sucrase@3.35.0\r\n  │   ├── @jridgewell/gen-mapping@0.3.5 deduped\r\n  │   ├── commander@4.1.1\r\n  │   ├─┬ glob@10.4.2\r\n  │   │ ├─┬ foreground-child@3.2.1\r\n  │   │ │ ├── cross-spawn@7.0.3 deduped\r\n  │   │ │ └── signal-exit@4.1.0\r\n  │   │ ├─┬ jackspeak@3.4.0\r\n  │   │ │ ├─┬ @isaacs/cliui@8.0.2\r\n  │   │ │ │ ├─┬ string-width-cjs@npm:string-width@4.2.3\r\n  │   │ │ │ │ ├── emoji-regex@8.0.0 deduped\r\n  │   │ │ │ │ ├── is-fullwidth-code-point@3.0.0 deduped\r\n  │   │ │ │ │ └── strip-ansi@6.0.1 deduped\r\n  │   │ │ │ ├─┬ string-width@5.1.2\r\n  │   │ │ │ │ ├── eastasianwidth@0.2.0\r\n  │   │ │ │ │ ├── emoji-regex@9.2.2\r\n  │   │ │ │ │ └── strip-ansi@7.1.0 deduped\r\n  │   │ │ │ ├─┬ strip-ansi-cjs@npm:strip-ansi@6.0.1\r\n  │   │ │ │ │ └── ansi-regex@5.0.1 deduped\r\n  │   │ │ │ ├─┬ strip-ansi@7.1.0\r\n  │   │ │ │ │ └── ansi-regex@6.0.1\r\n  │   │ │ │ ├─┬ wrap-ansi-cjs@npm:wrap-ansi@7.0.0\r\n  │   │ │ │ │ ├── ansi-styles@4.3.0 deduped\r\n  │   │ │ │ │ ├── string-width@4.2.3 deduped\r\n  │   │ │ │ │ └── strip-ansi@6.0.1 deduped\r\n  │   │ │ │ └─┬ wrap-ansi@8.1.0\r\n  │   │ │ │   ├── ansi-styles@6.2.1\r\n  │   │ │ │   ├── string-width@5.1.2 deduped\r\n  │   │ │ │   └── strip-ansi@7.1.0 deduped\r\n  │   │ │ └── @pkgjs/parseargs@0.11.0\r\n  ```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13963","RelatedDescription":"Closed issue \"[Security] Is this a supply chain attack that targeted tailwind?\" (#13963)"},{"Id":"2392895777","IsPullRequest":true,"CreatedAt":"2024-07-05T18:46:51","Actor":"adamwathan","Number":"13959","RawContent":null,"Title":"Avoid over-extracting utilities from candidates with decimal values","State":"closed","Body":"Prevents candidates like `px-1.5` from generating both the `px-1.5` class and the `px-1` class.\r\n\r\nThere's a chance that the inner matches regex we're throwing away here handles some other cases that aren't currently tested, but since they aren't tested I'm assuming it's not needed. We'll find out quickly from our users if they were and can fix it then :)\r\n\r\nFixes #13952 and #9354 and probably a bunch of other issues that have been opened for the same thing.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13959","RelatedDescription":"Closed or merged PR \"Avoid over-extracting utilities from candidates with decimal values\" (#13959)"},{"Id":"2391247039","IsPullRequest":false,"CreatedAt":"2024-07-05T01:38:38","Actor":"obecker","Number":"13952","RawContent":null,"Title":"Tailwindcss creates additional CSS rules when using class names with decimal fraction","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite 5.3.3 with postcss 8.4.39\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.3.0\r\n\r\n**What browser are you using?**\r\n\r\nany\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/obecker/tailwind-issue\r\n\r\n**Describe your issue**\r\n\r\nWhen using size/spacing classes with a decimal fraction (like `m-1.5` or `size-2.5`) then tailwindcss will create extra (unused) rules for the corresponding classes without decimal fraction, i.e. there are also CSS rules for `m-1` or `size-2` like this (manually formatted for better readability):\r\n\r\n```css\r\n.m-1 {\r\n    margin: .25rem\r\n}\r\n\r\n.m-1\\.5 {\r\n    margin: .375rem\r\n}\r\n\r\n.size-2 {\r\n    width: .5rem;\r\n    height: .5rem\r\n}\r\n\r\n.size-2\\.5 {\r\n    width: .625rem;\r\n    height: .625rem\r\n}\r\n```\r\n\r\nI think tailwindcss should not generate these extra CSS rules.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13952","RelatedDescription":"Closed issue \"Tailwindcss creates additional CSS rules when using class names with decimal fraction\" (#13952)"},{"Id":"2391224607","IsPullRequest":true,"CreatedAt":"2024-07-04T17:08:11","Actor":"RobinMalfait","Number":"13951","RawContent":null,"Title":"Prep next release: `4.0.0-alpha.17`","State":"closed","Body":"This PR prepares the next alpha release: `4.0.0-alpha.17`\n\n<!--\n\n👋 Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13951","RelatedDescription":"Closed or merged PR \"Prep next release: `4.0.0-alpha.17`\" (#13951)"},{"Id":"2379241482","IsPullRequest":true,"CreatedAt":"2024-07-04T15:21:09","Actor":"benface","Number":"13907","RawContent":null,"Title":"Revert “Prevent Preflight from affecting list semantics”","State":"closed","Body":"Unfortunately, I realized after my previous PR (#13815) got merged that there is one case where there is a visual difference between `list-style: none` and `list-style: \"\"`, which is when the `<li>` is empty. With `list-style: \"\"`, it still takes up space, as you can see in this CodePen: https://codepen.io/benface/pen/MWdRdyY. I guess we'll have to keep using `role=\"list\"` when we want to keep the list semantics.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13907","RelatedDescription":"Closed or merged PR \"Revert “Prevent Preflight from affecting list semantics”\" (#13907)"},{"Id":"2390052575","IsPullRequest":false,"CreatedAt":"2024-07-04T15:20:06","Actor":"sceee","Number":"13948","RawContent":null,"Title":"Gradients do not work in Firefox in v4.0.0-alpha.16, potentially caused by special `@supports (-moz-orient: inline)` selector","State":"closed","Body":"### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/13941 , since it is reproducible in tailwind play, I think it is indeed a bug and created the issue for it.\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.16\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`vite` v5.3.3, `@tailwindcss/vite` v4.0.0-alpha.16\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.4.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome, Opera, Edge, Firefox\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nSee the following example in Chrome vs. Firefox:\r\nhttps://play.tailwindcss.com/ASf2fh5fiH\r\n\r\nIn Chrome it works but in Firefox the gradient is not displayed.\r\nWhile I applied layers in the example, the same issue occurs if I just `@import 'tailwindcss';` instead:\r\nhttps://play.tailwindcss.com/MPNPWOGHdL?file=css\r\n\r\n**Describe your issue**\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **sceee** July  3, 2024</sup>\r\nGradients do not seem to work in Firefox in `v4.0.0-alpha.16` whereas they work in Chrome.\r\n\r\nSee the following example in Chrome vs. Firefox:\r\nhttps://play.tailwindcss.com/ASf2fh5fiH\r\n\r\nIn Chrome it works but in Firefox the gradient is not displayed.\r\nWhile I applied layers in the example, the same issue occurs if I just `@import 'tailwindcss';` instead:\r\nhttps://play.tailwindcss.com/MPNPWOGHdL?file=css\r\n\r\nIt seems in Firefox there is a special ruling applied to the element based on the `@supports (-moz-orient: inline)` selector. It seems this is injected here: https://github.com/tailwindlabs/tailwindcss/blob/62de02a37946c48c5fa6cdb800173b54198ebb9b/packages/tailwindcss/src/ast.ts#L202\r\n```css\r\n@supports (-moz-orient: inline) {\r\n  @layer base {\r\n    *, ::before, ::after, ::backdrop {\r\n      --tw-gradient-from: #0000;\r\n      --tw-gradient-to: #0000;\r\n      --tw-gradient-via: transparent;\r\n      --tw-gradient-stops: ;\r\n      --tw-gradient-via-stops: ;\r\n      --tw-gradient-from-position: 0%;\r\n      --tw-gradient-via-position: 50%;\r\n      --tw-gradient-to-position: 100%;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAccording to the Browser dev tools, `--tw-gradient-from`, `--tw-gradient-to` and `--tw-gradient-stops` are overwritten (and therefore not applied) but `--tw-gradient-via-stops` is set to [nothing] which seems to cause this issue.\r\n\r\nIf I disable the `--tw-gradient-via-stops` setting from this rule in the dev tools, the gradient also appears in Firefox.\r\n\r\nIs this a known issue or shall I open a issue for this?</div>","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13948","RelatedDescription":"Closed issue \"Gradients do not work in Firefox in v4.0.0-alpha.16, potentially caused by special `@supports (-moz-orient: inline)` selector\" (#13948)"},{"Id":"2390972981","IsPullRequest":true,"CreatedAt":"2024-07-04T15:20:05","Actor":"adamwathan","Number":"13949","RawContent":null,"Title":"Use `initial` for `@property` fallbacks instead of ` `","State":"closed","Body":"This PR updates the way we generate `@property` fallbacks for Firefox to use `initial` instead of ` ` for properties that are defined with no initial value:\r\n\r\n**Before:**\r\n\r\n```css\r\n@property --tw-gradient-via-stops {\r\n  syntax: \"*\";\r\n  inherits: false;\r\n}\r\n\r\n@supports (-moz-orient: inline) {\r\n * {\r\n   --tw-gradient-via-stops: ;\r\n }\r\n}\r\n```\r\n\r\n**After:**\r\n\r\n```css\r\n@property --tw-gradient-via-stops {\r\n  syntax: \"*\";\r\n  inherits: false;\r\n}\r\n\r\n@supports (-moz-orient: inline) {\r\n * {\r\n   --tw-gradient-via-stops: initial;\r\n }\r\n}\r\n```\r\n\r\nThis is necessary because we have code in our CSS that depends on variables like `--tw-gradient-via-stops` resolving to an invalid value to trigger a fallback:\r\n\r\n```css\r\n.from-red-500 {\r\n  --tw-gradient-from: var(--color-red-500, #ef4444);\r\n  --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\r\n}\r\n```\r\n\r\nIf `--tw-gradient-via-stops` resolves to ` `, then `--tw-gradient-stops` will also resolve to ` ` instead of falling back to the fallback value, which prevents 2-stop gradients from working in Firefox at the moment.\r\n\r\nFixes #13948.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13949","RelatedDescription":"Closed or merged PR \"Use `initial` for `@property` fallbacks instead of ` `\" (#13949)"},{"Id":"2389554153","IsPullRequest":false,"CreatedAt":"2024-07-03T21:51:34","Actor":"Bobakanoosh","Number":"13946","RawContent":null,"Title":"Max-width screens named with numbers (e.g. 1800, 1440 instead of xl, lg) not working","State":"open","Body":"Re-opening https://github.com/tailwindlabs/tailwindcss/issues/5956, which asks for support for numerically named max-width breakpoints.\r\n\r\nIt was initially fixed, and then reverted in https://github.com/tailwindlabs/tailwindcss/pull/6289.\r\n\r\n**What version of Tailwind CSS are you using?**\r\n3.4.4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\nN/A\r\n\r\n**What version of Node.js are you using?**\r\nN/A\r\n\r\n**What browser are you using?**\r\nN/A\r\n\r\n**What operating system are you using?**\r\nN/A\r\n\r\n**Reproduction URL**\r\nhttps://play.tailwindcss.com/HZk7pMuTwQ\r\n\r\n**Describe your issue**\r\nI personally prefer to use numbered breakpoint names (e.g. 1800, 1200 vs 2xl, xl) as it feels a lot more intuitive during development. This worked with min-width breakpoints, but seems to not work with max-width breakpoints. The playground link documents this issue pretty well.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13946","RelatedDescription":"Open issue \"Max-width screens named with numbers (e.g. 1800, 1440 instead of xl, lg) not working\" (#13946)"},{"Id":"2382364524","IsPullRequest":false,"CreatedAt":"2024-07-03T21:11:53","Actor":"jscarle","Number":"13927","RawContent":null,"Title":"Add support for tailwind.config.mjs and tailwind.config.mts","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\ntailwindcss 3.4.4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvue 3.4.31, typescript 5.5.2, vue-tsc 2.0.24, vite 5.3.2\r\n\r\n**What version of Node.js are you using?**\r\n\r\nnode 22.3.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/jscarle/ReproTailwindCSS\r\n\r\n**Describe your issue**\r\n\r\nIn preparation for Node 22 and ESM module requirements, I have started converting my projects to use `.mts` files so that vite transforms them to `.mjs` files. When building the project with vite using `tailwind.config.ts`, node generates the following error:\r\n\r\n<img width=\"344\" alt=\"image\" src=\"https://github.com/tailwindlabs/tailwindcss/assets/29762210/4e1dce44-8c44-4603-92ff-4ae9297c3693\" alt=\"transforming (1) index.html(node:43860) Warning: To load an ES module, set 'type': 'module' in the package.json or use the .mjs extension. (Use `node --trace-warnings ...` to show where the warning was created) \">\r\n\r\nIf I change the filename to `tailwind.config.mts`, it no longer finds the configuration.\r\n\r\n<img width=\"380\" alt=\"image\" src=\"https://github.com/tailwindlabs/tailwindcss/assets/29762210/15237c1b-4d84-4139-846b-01ace5e8b9ed\" alt=\"transforming (1) index.html warn - The `content` option in your Tailwind CSS configuration is missing or empty.  warn - Configure your content sources or your generated CSS will be missing styles.  warn - https://tailwindcss.com/docs/content-configuration\">\r\n\r\n### Node 22 documentation\r\n\r\nhttps://nodejs.org/api/esm.html\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13927","RelatedDescription":"Closed issue \"Add support for tailwind.config.mjs and tailwind.config.mts\" (#13927)"},{"Id":"2388360520","IsPullRequest":true,"CreatedAt":"2024-07-03T21:09:35","Actor":"RobinMalfait","Number":"13940","RawContent":null,"Title":"Add `.mts` and `.cts` config file detection","State":"closed","Body":"This PR will add support for detecting `tailwind.config.cts` and `tailwind.config.mts` files by default.\n\nThis PR will also remove some warnings that Node v22 was showing in the terminal when using ESM files (or TS files). If you happen to use an ESM file (`.mjs`) or any TS file (`.ts`, `.cts` or `.mts`), then we will immediately use `jiti` instead of first trying to `require` the file. Requiring these files triggers Node in logging the warning.\n\nFixes: #13927\n\n<!--\n\n👋 Hey, thanks for your interest in contributing to Tailwind!\n\n**Please ask first before starting work on any significant new features.**\n\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\n\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\n\n-->\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13940","RelatedDescription":"Closed or merged PR \"Add `.mts` and `.cts` config file detection\" (#13940)"},{"Id":"2377289424","IsPullRequest":false,"CreatedAt":"2024-06-30T10:44:11","Actor":"dimiatr","Number":"13905","RawContent":null,"Title":" the watcher does not work when adding a custom style to tailwind","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n\"tailwindcss\": \"^3.4.4\"\r\n\r\nFor example: v2.0.4\r\n\r\nI don't use any.\r\n\r\nFor example: postcss-cli 8.3.1, Next.js 10.0.9, webpack 5.28.0\r\n\r\nv20.14.0\r\n\r\nFor example: v12.0.0\r\n\r\nFirefox\r\n\r\nFor example: Chrome, Safari, or N/A\r\n\r\nWindows 10\r\n\r\nFor example: macOS, Windows\r\n\r\nhttps://play.tailwindcss.com/MHLQaZ7rcK?file=config\r\n\r\nA Tailwind Play link or public GitHub repo that includes a minimal reproduction of the bug. **Please do not link to your actual project**, what we need instead is a _minimal_ reproduction in a fresh project without any unnecessary code. This means it doesn't matter if your real project is private/confidential, since we want a link to a separate, isolated reproduction anyways.\r\n\r\nA reproduction is **required** when filing an issue — any issue opened without a reproduction will be closed and you'll be asked to create a new issue that includes a reproduction. We're a small team and we can't keep up with the volume of issues we receive if we need to reproduce each issue from scratch ourselves.\r\n\r\nthe watcher does not work when adding a custom style to tailwind\r\n\r\nI encountered such a problem that when I enter custom properties into tailwind.config.js file, for example, in colors I enter new colors firmBlack: \"https://github.com/tailwindlabs/tailwindcss/issues/333\", which I need and they do not appear in html file, when I explicitly specify a class, for example text-firmBlack, it is not applied.\r\n\r\nbut if I exit vsCode and log in again, everything works, has anyone encountered this problem? it is not profitable to restart vsCode each time\r\n\r\nMaybe it's a general glitch, it happened only today, yesterday it didn't happen.\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13905","RelatedDescription":"Closed issue \" the watcher does not work when adding a custom style to tailwind\" (#13905)"},{"Id":"2381807260","IsPullRequest":false,"CreatedAt":"2024-06-29T15:55:35","Actor":"shiqocred","Number":"13915","RawContent":null,"Title":"First-child on padding-top not work","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v2.0.4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNext.js 14.1.2\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.0.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Describe your issue**\r\n\r\n```\r\n<div className=\"flex flex-col text-xs md:text-sm py-4 before:w-[1px] before:content-[''] before:absolute before:left-3 md:before:left-5 before:bg-gray-300 before:h-full before:top-0 relative z-0 first:pt-8 before:dark:bg-gray-700 last:pb-0\">\r\n   ...\r\n</div>\r\n```\r\n\r\n`first-child:` is not work when i use on `BubbleChat` like\r\n\r\n```\r\n<div className=\"w-full\">\r\n     {chats.map((item) => (\r\n        <BubbleChat key={item.id} {...item} />\r\n      ))}\r\n</div>\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/13915","RelatedDescription":"Closed issue \"First-child on padding-top not work\" (#13915)"},{"Id":"2380561256","IsPullRequest":true,"CreatedAt":"2024-06-28T14:23:41","Actor":"eloyesp","Number":"13912","RawContent":null,"Title":"Parent state modifier without explicit parent (in-*)","State":"open","Body":"I'm doing a follow up on https://github.com/tailwindlabs/tailwindcss/discussions/13751 where I propose a new modifier, that is a simplified \"group-*\" without an explicit parent.\r\n\r\nThere are many times when the styling is based on the parent state, but it is not important which parent, there are many examples of that on the tests with the form of: `[.checked &]:underline`, but there are many other cases, for example:\r\n\r\n- `in-aria-busy`: If any parent is busy is enough, we don't care which parent it is.\r\n- `in-data-active`: This is part of an active element.\r\n\r\nThe syntax is quite simple, the implementation is clean and the generated css is shorter than using `group-*` or `[.checked_&]:underline`, and it also allows using variants like data- and aria-.\r\n\r\nHope you like the idea.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13912","RelatedDescription":"Open PR \"Parent state modifier without explicit parent (in-*)\" (#13912)"},{"Id":"2379358834","IsPullRequest":true,"CreatedAt":"2024-06-28T08:28:20","Actor":"Grogogoll","Number":"13908","RawContent":null,"Title":"Create generator-generic-ossf-slsa3-publish.yml","State":"closed","Body":"<!--\r\n\r\n👋 Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/13908","RelatedDescription":"Closed or merged PR \"Create generator-generic-ossf-slsa3-publish.yml\" (#13908)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-07-16T03:30:22.5937049Z","RunDurationInMilliseconds":427}