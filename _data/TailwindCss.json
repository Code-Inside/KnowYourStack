{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2523798375","IsPullRequest":false,"CreatedAt":"2024-09-13T03:25:51","Actor":"gabrielramos731","Number":"14414","RawContent":null,"Title":"Infinite draggable window size at playground","State":"open","Body":"### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/14413\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **gabrielramos731** September 13, 2024</sup>\r\nAt the playground on Tailwind oficial page, the window size has a infinite draggable size (apparently has no upper limits).\r\n![image](https://github.com/user-attachments/assets/6aa0f990-847c-43af-b148-63db94f7ad3e)\r\n</div>","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14414","RelatedDescription":"Open issue \"Infinite draggable window size at playground\" (#14414)"},{"Id":"2522761158","IsPullRequest":true,"CreatedAt":"2024-09-12T21:44:59","Actor":"RobinMalfait","Number":"14410","RawContent":null,"Title":"Add CSS codemods","State":"closed","Body":"This PR is an umbrella PR for adding CSS codemods.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14410","RelatedDescription":"Closed or merged PR \"Add CSS codemods\" (#14410)"},{"Id":"2523410029","IsPullRequest":true,"CreatedAt":"2024-09-12T21:43:04","Actor":"RobinMalfait","Number":"14412","RawContent":null,"Title":"Add CSS codemods for migrating `@apply`","State":"open","Body":"This PR adds CSS codemods for migrating existing `@apply` directives to the new version. Note, the actual tooling to execute and apply the codemod will be available in another PR. This is just the codemod on its own.\n\nThis PR has the ability to migrate the following cases:\n\n---\n\nIn v4, the convention is to put the important modifier `!` at the end of the utility class instead of right before it. This makes it easier to reason about, especially when you are variants.\n\nInput:\n```css\n.foo {\n  @apply !flex flex-col! hover:!items-start items-center;\n}\n```\n\nOutput:\n```css\n.foo {\n  @apply flex! flex-col! hover:items-start! items-center;\n}\n```\n\n\n---\n\nIn v4 we don't support `!important` as a marker at the end of `@apply` directives. Instead, you can append the `!` to each utility class to make it `!important`.\n\nInput:\n```css\n.foo {\n  @apply flex flex-col !important;\n}\n```\n\nOutput:\n```css\n.foo {\n  @apply flex! flex-col!;\n}\n```\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14412","RelatedDescription":"Open PR \"Add CSS codemods for migrating `@apply`\" (#14412)"},{"Id":"2523396507","IsPullRequest":true,"CreatedAt":"2024-09-12T21:31:52","Actor":"RobinMalfait","Number":"14411","RawContent":null,"Title":"Add CSS codemods for migrating `@tailwind` directives","State":"open","Body":"This PR adds CSS codemods for migrating existing `@tailwind` directives to the new alternatives. Note, the actual tooling to execute and apply the codemod will be available in another PR. This is just the codemod on its own.\n\nThis PR has the ability to migrate the following cases:\n\n---\n\nTypical default usage of `@tailwind` directives in v3.\n\nInput:\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nOutput:\n```css\n@import 'tailwindcss';\n```\n\n---\n\nSimilar as above, but always using `@import` instead of `@import` directly.\n\nInput:\n```css\n@import 'tailwindcss/base';\n@import 'tailwindcss/components';\n@import 'tailwindcss/utilities';\n```\n\nOutput:\n```css\n@import 'tailwindcss';\n```\n\n---\n\nWhen you are _only_ using `@tailwind base`:\n\nInput:\n```css\n@tailwind base;\n```\n\nOutput:\n```css\n@import 'tailwindcss/theme' layer(theme);\n@import 'tailwindcss/preflight' layer(base);\n```\n\n---\n\nWhen you are _only_ using `@tailwind utilities`:\n\nInput:\n```css\n@tailwind utilities;\n```\n\nOutput:\n```css\n@import 'tailwindcss/utilities' layer(utilities);\n```\n\n---\n\nWhen you are _only_ using `@tailwind base; @tailwind utilities;`:\n\nInput:\n```css\n@tailwind base;\n@tailwind utilities;\n```\n\nOutput:\n```css\n@import 'tailwindcss';\n```\n\nWe currently don't have a concept of `@tailwind components` in v4, so if you are not using `@tailwind components`, we can expand to the default `@import 'tailwindcss';` instead of the individual imports.\n\n---\n\n`@tailwind screens` and `@tailwind variants` are not supported/necessary in v4, so we can safely remove them.\n\nInput:\n```css\n@tailwind screens;\n@tailwind variants;\n```\n\nOutput:\n```css\n```\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14411","RelatedDescription":"Open PR \"Add CSS codemods for migrating `@tailwind` directives\" (#14411)"},{"Id":"2520011955","IsPullRequest":true,"CreatedAt":"2024-09-12T14:10:56","Actor":"philipp-spiess","Number":"14395","RawContent":null,"Title":"Release v4.0.0-alpha.24","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14395","RelatedDescription":"Closed or merged PR \"Release v4.0.0-alpha.24\" (#14395)"},{"Id":"2518496761","IsPullRequest":false,"CreatedAt":"2024-09-12T12:12:26","Actor":"renderkid","Number":"14384","RawContent":null,"Title":"[4.0.0-alpha.23] Next.js build fails with a TypeError","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\nv4.0.0-alpha.23\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\nNext.js v14.2.9, Turbo 2.1.1\r\n\r\n**What version of Node.js are you using?**\r\nv20.17.0\r\n\r\n**What browser are you using?**\r\n‚ÄìNA‚Äì\r\n\r\n**What operating system are you using?**\r\nmacOS\r\n\r\n**Reproduction URL**\r\n‚ÄìNA‚Äì\r\n\r\n**Describe your issue**\r\nUpgrading my Next.js app to the latest Tailwind version (v4.0.0-alpha.23) breaks the build with a TypeError.\r\n\r\nOutput:\r\n```\r\nModuleBuildError: ./apps/product/lib/intervariable_7902fd61.module.css\r\nTypeError: (0 , h.compile) is not a function\r\n     [at A (/node_modules/@tailwindcss/node/dist/index.js:1:1823)]\r\n     [at u (/node_modules/@tailwindcss/postcss/dist/index.js:1:2561)]\r\n     [at OnceExit (/node_modules/@tailwindcss/postcss/dist/index.js:1:2649)]\r\n     at LazyResult.runAsync (node_modules/postcss/lib/lazy-result.js:298:21) [/apps/product/.next/chunks/08b5e_b3d708._.js:6118:35]\r\n     [at process.processTicksAndRejections (node:internal/process/task_queues:95:5)]\r\n     at async transform (/apps/product/.next/chunks/[project]_apps_product_8ff6a0._.js:97:36)\r\n     (error resolving source map: Execution of FileContent::lines failed)\r\n     at async run (/turbopack/[turbopack-node]/ipc/evaluate.ts:92:23) [/apps/product/.next/chunks/[turbopack-node]__138e29._.js:426:31]\r\n```\r\n\r\nThe same error is thrown for multiple .css files that are in the codebase.\r\n\r\nThe only change i've made to the codebase is to upgrade the alpha version. I was on v4.0.0-alpha.19, where everything was working well. I've tried with multiple latest alpha versions and alpha.20 works fine too. The build starts to break with the same error for alpha.21 and above.\r\n\r\n\r\nFirst time ever filing a bug report so please let me know if more details are needed. Thank you for all the great work on v4 üôåüèΩ \r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14384","RelatedDescription":"Closed issue \"[4.0.0-alpha.23] Next.js build fails with a TypeError\" (#14384)"},{"Id":"2520047834","IsPullRequest":true,"CreatedAt":"2024-09-12T12:09:28","Actor":"philipp-spiess","Number":"14398","RawContent":null,"Title":"Debug Windows CI","State":"closed","Body":"<!--\r\n\r\nüëã Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14398","RelatedDescription":"Closed or merged PR \"Debug Windows CI\" (#14398)"},{"Id":"2522218664","IsPullRequest":true,"CreatedAt":"2024-09-12T12:08:49","Actor":"philipp-spiess","Number":"14408","RawContent":null,"Title":"Further clean up compatibility APIs","State":"open","Body":"This PR builds on top of #14365 and adds a few more changes we discussed during a sync on the latter PR:\r\n\r\n- We now split `plugin-api.ts` into two files and moved it into `compat/`. One file is now defining the comat plugin API only where as another file deals with the compat hook.\r\n- The walk for `@plugin` and `@config` is now happening inside the compat hook.\r\n\r\nThe one remaining work item is to change the `loadPlugin` and `loadConfig` APIs to a more unified `resolveModule` one that does not care on what we try to load it for. I suggest we should make this change at the same time we start working on finalizing the `tailwindcss` APIs, since a lot of things will have to be rethought then anyways.\r\n  ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14408","RelatedDescription":"Open PR \"Further clean up compatibility APIs\" (#14408)"},{"Id":"2521918371","IsPullRequest":true,"CreatedAt":"2024-09-12T12:07:43","Actor":"philipp-spiess","Number":"14406","RawContent":null,"Title":"Pin rust toolchain to work around Windows regression","State":"closed","Body":"This PR works around a current regression in the Rust toolchain that caused our Windows workers to start failing with:\r\n\r\n```\r\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 32.63s\r\n     Running unittests src\\lib.rs (target\\debug\\deps\\tailwind_oxide-ce6a5d43a3798437.exe)\r\nLoad Node-API [napi_get_last_error_info] from host runtime failed: GetProcAddress failed\r\nfatal runtime error: thread::set_current should only be called once per thread\r\nLoad Node-API [napi_get_uv_event_loop] from host runtime failed: GetProcAddress failed\r\nLoad Node-API [napi_fatal_exception] from host runtime failed: GetProcAddress failed\r\nLoad Node-API [napi_create_threadsafe_function] from host runtime failed: GetProcAddress failed\r\nerror: test failed, to rerun pass `-p tailwind-oxide --lib`\r\n```\r\n\r\nThe workaround is to pin the rust toolchain version so that the regression isn't applied when we build on Windows in test mode.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14406","RelatedDescription":"Closed or merged PR \"Pin rust toolchain to work around Windows regression\" (#14406)"},{"Id":"2522068351","IsPullRequest":true,"CreatedAt":"2024-09-12T10:58:54","Actor":"philipp-spiess","Number":"14407","RawContent":null,"Title":"Create variants for `aria`, `supports`, and `data` JS config theme keys","State":"open","Body":"This PR adds support for the `aria`, `supports`, and `data` properties found in JS config options. In v3, you could extend the theme to add more variants by using an object syntax like this:\r\n\r\n```ts\r\n{\r\n   theme: {\r\n    extend: {\r\n      aria: {\r\n        polite: 'live=\"polite\"',\r\n      },\r\n      supports: {\r\n        'child-combinator': 'h2 > p',\r\n      },\r\n      data: {\r\n        checked: 'ui~=\"checked\"',\r\n      },\r\n    },\r\n  }\r\n}\r\n```\r\n\r\nSince we no longer rely on theme variables for these variants, the way to make this work is by adding custom variants for each of these manually added variants.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14407","RelatedDescription":"Open PR \"Create variants for `aria`, `supports`, and `data` JS config theme keys\" (#14407)"},{"Id":"2521106405","IsPullRequest":true,"CreatedAt":"2024-09-12T01:17:09","Actor":"adamwathan","Number":"14403","RawContent":null,"Title":"Don't override explicit `leading-*`, `tracking-*`, or `font-{weight}` utilities with font-size utility defaults","State":"open","Body":"This PR improves how the `text-{size}` utilities interact with the `leading-*`, `tracking-*`, and `font-{weight}` utilities, ensuring that if the user explicitly uses any of those utilities that those values are not squashed by any defaults baked into the `text-{size}` utilities.\r\n\r\nPrior to this PR, if you wrote something like this:\r\n\r\n```html\r\n<div class=\"text-lg leading-none md:text-2xl\">\r\n```\r\n\r\n‚Ä¶the `leading-none` class would be overridden by the default line-height value baked into the `text-2xl` utility at the `md` breakpoint. This has been a point of confusion and frustration for people [in the past](https://github.com/tailwindlabs/tailwindcss/issues/6504) who are annoyed they have to keep repeating their custom `leading-*` value like this:\r\n\r\n```html\r\n<div class=\"text-lg leading-none md:text-2xl md:leading-none lg:text-4xl lg:leading-none\">\r\n```\r\n\r\nThis PR lets you write this HTML instead but get the same behavior as above:\r\n\r\n```html\r\n<div class=\"text-lg leading-none md:text-2xl lg:text-4xl\">\r\n```\r\n\r\nIt's important to note that this change _only_ applies to line-height values set explicitly with a `leading-*` utility, and does not apply to the line-height modifier.\r\n\r\nIn this example, the line-height set by `text-sm/6` does _not_ override the default line-height included in the `md:text-lg` utility:\r\n\r\n```html\r\n<div class=\"text-sm/6 md:text-lg\">\r\n```\r\n\r\nThat means these two code snippets behave differently:\r\n\r\n```html\r\n<div class=\"text-sm/6 md:text-lg\">‚Ä¶</div>\r\n<div class=\"text-sm leading-6 md:text-lg\">‚Ä¶</div>\r\n```\r\n\r\nIn the top one, the line-height `md:text-lg` overrides the line-height set by `text-sm/6`, but in the bottom one, the explicit `leading-6` utility takes precedence.\r\n\r\nThis PR applies the same improvements to `tracking-*` and `font-{weight}` as well, since all font size utilities can also optionally specify default `letter-spacing` and `font-weight` values.\r\n\r\nWe achieve this using new semi-private CSS variables like we do for things like transforms, shadows, etc., which are set by the `leading-*`, `tracking-*`, and `font-{weight}` utilities respectively. The `text-{size}` utilities always use these values first if they are defined, and the default values become fallbacks for those variables if they aren't present.\r\n\r\nWe use `@property` to make sure these variables are reset to `initial` on a per element basis so that they are never inherited, like with every other variable we define.\r\n\r\nThis PR does slightly increase the amount of CSS generated, because now utilities like `leading-5` look like this:\r\n\r\n```diff\r\n  .leading-5 {\r\n+   --tw-leading: 1.25rem;\r\n    line-height: 1.25rem;\r\n  }\r\n```\r\n\r\n‚Ä¶and utilites like `text-sm` include a `var(‚Ä¶)` lookup that they didn't include before:\r\n\r\n```diff\r\n  .text-sm {\r\n    font-size: 0.875rem;\r\n-   line-height: var(--font-size-sm--line-height, 1.25rem);\r\n+   line-height: var(--tw-leading, var(--font-size-sm--line-height, 1.25rem));\r\n  }\r\n```\r\n\r\nIf this extra CSS doesn't feel worth it for the small improvement in behavior, we may consider just closing this PR and keeping things as they are.\r\n\r\nThis PR is also a breaking change for anyone who was depending on the old behavior, and expected the line-height baked into the `md:text-lg` class to take precedence over the explicit `leading-6` class:\r\n\r\n```html\r\n<div class=\"text-sm leading-6 md:text-lg\">‚Ä¶</div>\r\n```\r\n\r\nPersonally I am comfortable with this because of the fact that you can still get the old behavior by preferring a line-height modifier:\r\n\r\n```html\r\n<div class=\"text-sm/6 md:text-lg\">‚Ä¶</div>\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14403","RelatedDescription":"Open PR \"Don't override explicit `leading-*`, `tracking-*`, or `font-{weight}` utilities with font-size utility defaults\" (#14403)"},{"Id":"2520451994","IsPullRequest":false,"CreatedAt":"2024-09-11T18:28:52","Actor":"olets","Number":"14401","RawContent":null,"Title":"[v3] using a class with a variant generates css for the variant-free class too","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.11\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nplay's\r\n\r\n**What version of Node.js are you using?**\r\n\r\nplay's\r\n\r\n**What browser are you using?**\r\n\r\nChrome, Firefox\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/KnbS12ekWQ\r\n\r\n**Describe your issue**\r\n\r\nGiven the html pseudocode `<div class=\"variant:utility\">`, Tailwind is generating the CSS for `.variant\\:utility` _and the CSS for_ `.utility`.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14401","RelatedDescription":"Open issue \"[v3] using a class with a variant generates css for the variant-free class too\" (#14401)"},{"Id":"2519817906","IsPullRequest":true,"CreatedAt":"2024-09-11T17:23:53","Actor":"RobinMalfait","Number":"14393","RawContent":null,"Title":"Allow `anchor-size(‚Ä¶)` in arbitrary values","State":"closed","Body":"This PR fixes an issue where using `anchor-size` in arbitrary values resulted in the incorrect css.\n\nInput: `w-[calc(anchor-size(width)+8px)]`\nOutput:\n```css\n.w-\\[calc\\(anchor-size\\(width\\)\\+8px\\)\\] {\n  width: calc(anchor - size(width) + 8px);\n}\n```\n\nThis PR fixes that, by generating the correct CSS:\n```css\n.w-\\[calc\\(anchor-size\\(width\\)\\+8px\\)\\] {\n  width: calc(anchor-size(width) + 8px);\n}\n```\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14393","RelatedDescription":"Closed or merged PR \"Allow `anchor-size(‚Ä¶)` in arbitrary values\" (#14393)"},{"Id":"2520124921","IsPullRequest":false,"CreatedAt":"2024-09-11T16:04:21","Actor":"sntran","Number":"14399","RawContent":null,"Title":"[v4] `col-span-*` overrides `col-start-*`. Same with `row-*`","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.23\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`@tailwindcss/cli v4.0.0-alpha.23`\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.12.2\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/GDjchJ2qm2\r\n\r\n**Describe your issue**\r\n\r\nWhen using `col-span-*` with breakpoint variants, Tailwind v4 would set `grid-column: span x / span x`, which overrides any `col-start-*` defined on the same element.\r\n\r\nAs indicated in the playground, `col-start-6 col-span-3 md:col-span-6` on the second `<li>` would put it right next to the first `<li>` on `md`, even though it should start at 6.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14399","RelatedDescription":"Closed issue \"[v4] `col-span-*` overrides `col-start-*`. Same with `row-*`\" (#14399)"},{"Id":"2520039023","IsPullRequest":true,"CreatedAt":"2024-09-11T15:37:36","Actor":"philipp-spiess","Number":"14397","RawContent":null,"Title":"Don't assert on mangled CSS names","State":"closed","Body":"This PR fixes an issue with the regex rule I oh-so-carefully constructed that would fail the regex when the _randomness_ part contains a `t` üò∂‚Äçüå´Ô∏è.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14397","RelatedDescription":"Closed or merged PR \"Don't assert on mangled CSS names\" (#14397)"},{"Id":"2515962152","IsPullRequest":true,"CreatedAt":"2024-09-11T15:02:24","Actor":"philipp-spiess","Number":"14378","RawContent":null,"Title":"Throw a useful error when `tailwindcss` is used as a PostCSS plugin","State":"closed","Body":"While upgrading a project to Tailwind CSS v4, I forgot to remove the `tailwindcss` import from the PostCSS config. As a result of this, I was greeted with the following message:\r\n\r\n```\r\nnode:internal/process/promises:289\r\n            triggerUncaughtException(err, true /* fromPromise */);\r\n            ^\r\n\r\n[Failed to load PostCSS config: Failed to load PostCSS config (searchPath: /Users/philipp/dev/project): [TypeError] Invalid PostCSS Plugin found at: plugins[0]\r\n\r\n(@/Users/philipp/dev/project/postcss.config.js)\r\nTypeError: Invalid PostCSS Plugin found at: plugins[0]\r\n```\r\n\r\nI don't think this was particularly helpful, so I‚Äôm proposing we add a default function export to the `tailwindcss` package so when it's used inside PostCSS, we can control the error message. So I changed it to something along these lines:\r\n\r\n```\r\nIt looks like you're trying to use the \\`tailwindcss\\` package as a PostCSS plugin. This is no longer possible since Tailwind CSS v4.\r\n\r\nIf you want to continue to use Tailwind CSS with PostCSS, please install \\`@tailwindcss/postcss\\` and change your PostCSS config file.\r\n    at w (/Users/philipp/dev/project/node_modules/tailwindcss/node_modules/tailwindcss/dist/lib.js:1:21233)\r\n    at Object.<anonymous> (/Users/philipp/dev/project/node_modules/tailwindcss/postcss.config.cjs:3:13)\r\n    at Module._compile (node:internal/modules/cjs/loader:1358:14)\r\n    at Module._extensions..js (node:internal/modules/cjs/loader:1416:10)\r\n    at Module.load (node:internal/modules/cjs/loader:1208:32)\r\n    at Module._load (node:internal/modules/cjs/loader:1024:12)\r\n    at cjsLoader (node:internal/modules/esm/translators:348:17)\r\n    at ModuleWrap.<anonymous> (node:internal/modules/esm/translators:297:7)\r\n    at ModuleJob.run (node:internal/modules/esm/module_job:222:25)\r\n    at async ModuleLoader.import (node:internal/modules/esm/loader:316:24)\r\n```\r\n\r\nThis is also a good place to link to the migration guides once we have them üôÇ ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14378","RelatedDescription":"Closed or merged PR \"Throw a useful error when `tailwindcss` is used as a PostCSS plugin\" (#14378)"},{"Id":"2513618866","IsPullRequest":true,"CreatedAt":"2024-09-11T14:59:18","Actor":"philipp-spiess","Number":"14370","RawContent":null,"Title":"Intellisense: Add example bare values to border completions","State":"closed","Body":"Closes https://github.com/tailwindlabs/tailwindcss-intellisense/issues/1048\r\n\r\nThis PR adds a few bare value examples for border width completions. The examples are taken from [our docs](https://tailwindcss.com/docs/border-width).","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14370","RelatedDescription":"Closed or merged PR \"Intellisense: Add example bare values to border completions\" (#14370)"},{"Id":"2513868008","IsPullRequest":true,"CreatedAt":"2024-09-11T14:45:07","Actor":"philipp-spiess","Number":"14371","RawContent":null,"Title":"Add `matchVariant` API","State":"closed","Body":"This PR adds support for the `matchVariant` plugin API. I've copied over all [V3 tests](https://github.com/tailwindlabs/tailwindcss/blob/f07dbff2a7f78fd75c53c6cfe01b58b6c0419f22/tests/match-variants.test.js) and made sure they still pass. \r\n\r\n## Sorted order of stacked arbitrary variants\r\n\r\nThe only difference in behavior is regarding the sort order of stacked arbitrary variants: Sorting in this case now works by the latest defined `matchVariant` taking precedence. \r\n\r\nSo, if you define a plugin like this:\r\n\r\n```ts\r\nmatchVariant('testmin', (value) => `@media (min-width: ${value})`, {\r\n  sort(a, z) {\r\n    return parseInt(a.value) - parseInt(z.value)\r\n  },\r\n})\r\n\r\nmatchVariant('testmax', (value) => `@media (max-width: ${value})`, {\r\n  sort(a, z) {\r\n    return parseInt(z.value) - parseInt(a.value)\r\n  },\r\n})\r\n```\r\n\r\nThe resulting CSS is first sorted by the `testmax` values descending and then the `testmin` values ascending, so these candidates:\r\n\r\n```txt\r\ntestmin-[150px]:testmax-[400px]:order-2\r\ntestmin-[100px]:testmax-[350px]:order-3\r\ntestmin-[100px]:testmax-[300px]:order-4\r\ntestmin-[100px]:testmax-[400px]:order-1\r\n```\r\n\r\nWill resolve to the order outlined by the `order-` utility.\r\n\r\n## At-rules and placeholders support\r\n\r\nSince we added support for at-rules and placeholders in the `matchVariant` syntax like this:\r\n\r\n```ts\r\nmatchVariant(\r\n  'potato',\r\n  (flavor) => `@media (potato: ${flavor}) { @supports (font:bold) { &:large-potato } }`,\r\n)\r\n```\r\n\r\nWe also added support for the same syntax to the `addVariant` API:\r\n\r\n```ts\r\naddVariant(\r\n  'potato',\r\n  '@media (max-width: 400px) { @supports (font:bold) { &:large-potato } }',\r\n)\r\n```\r\n\r\nThe only change necessary in core was to call functional variants for when the variant value is set to `null`. This allows functional variants to define the un-parameterized implementation like `potato:underline` as opposed to `potato[big]:underline`.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14371","RelatedDescription":"Closed or merged PR \"Add `matchVariant` API\" (#14371)"},{"Id":"2519955874","IsPullRequest":true,"CreatedAt":"2024-09-11T14:44:35","Actor":"RobinMalfait","Number":"14394","RawContent":null,"Title":"Allow `anchor-size(‚Ä¶)` in arbitrary values","State":"open","Body":"This PR fixes an issue where using `anchor-size` in arbitrary values resulted in the incorrect css.\n\nInput: `w-[calc(anchor-size(width)+8px)]`\nOutput:\n```css\n.w-\\[calc\\(anchor-size\\(width\\)\\+8px\\)\\] {\n  width: calc(anchor - size(width) + 8px);\n}\n```\n\nThis PR fixes that, by generating the correct CSS:\n```css\n.w-\\[calc\\(anchor-size\\(width\\)\\+8px\\)\\] {\n  width: calc(anchor-size(width) + 8px);\n}\n```\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14394","RelatedDescription":"Open PR \"Allow `anchor-size(‚Ä¶)` in arbitrary values\" (#14394)"},{"Id":"2512014942","IsPullRequest":true,"CreatedAt":"2024-09-11T14:17:03","Actor":"adamwathan","Number":"14365","RawContent":null,"Title":"Extract more backwards compatibility logic to compatibility layer","State":"closed","Body":"I noticed a lot more backwards compatibility concerns had started leaking into core, especially around the `theme` function, so did a bit of work to try and pull that stuff out and into the compatibility layer.\r\n\r\nNow the core version of `theme` only handles CSS variables (like `--color-red-500`) and has no knowledge of the dot notation or how to upgrade it. Instead, we unconditionally override that function in the compatibility layer with a light version that _does_ know how to do the dot notation upgrade, and override that again with the very heavy/slow version that handles JS config objects only if plugins/JS configs are actually used.\r\n\r\nI've also renamed `registerPlugins` to `applyCompatibilityHooks` because the name was definitely a bit out of date given how much work it's doing now, and now call it unconditionally from core, leaving that function to do any conditional optimizations itself internally.\r\n\r\nNext steps I think would be to split up `plugin-api.ts` a bit and maybe make `applyCompatibilityHooks` its own file, and move both of those files into the `compat` folder so everything is truly isolated there.\r\n\r\nMy goal with this stuff is that if/when we ever decide to drop backwards compatibility with these features in the future (maybe v5), that all we have to do is delete the one line of code that calls `applyCompatibilityHooks` in `index.ts`, and delete the `compat` folder and we're done. I could be convinced that this isn't a worthwhile goal if we feel it's making the codebase needlessly complex, so open to that discussion as well.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14365","RelatedDescription":"Closed or merged PR \"Extract more backwards compatibility logic to compatibility layer\" (#14365)"},{"Id":"2519790034","IsPullRequest":false,"CreatedAt":"2024-09-11T13:52:33","Actor":"adsingh14","Number":"14392","RawContent":null,"Title":"Performance issue with backdrop-blur on Firefox Mobile app","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nFor example: v3.2.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nFor example: Vite React package, Plain JS (with tailwind npm)\n\n**What version of Node.js are you using?**\n\nFor example: v20\n\n**What browser are you using?**\n\nFor example: Firefox mobile (v130.0) \n\n**What operating system are you using?**\n\nFor example: Android 13\n\n**Reproduction URL**\n\n<!--A Tailwind Play link or public GitHub repo that includes a minimal reproduction of the bug. **Please do not link to your actual project**, what we need instead is a _minimal_ reproduction in a fresh project without any unnecessary code. This means it doesn't matter if your real project is private/confidential, since we want a link to a separate, isolated reproduction anyways.\n\nA reproduction is **required** when filing an issue ‚Äî any issue opened without a reproduction will be closed and you'll be asked to create a new issue that includes a reproduction. We're a small team and we can't keep up with the volume of issues we receive if we need to reproduce each issue from scratch ourselves.-->\n\n1. Open any of these links:\n - https://tailwindcss.com/docs/blur#blurring-elements\n - https://tailwindcss.com\n2. Scroll the page to the footer to see the performance drop. \n\n**Describe your issue**\n\n<!--Describe the problem you're seeing, any important steps to reproduce and what behavior you expect instead.-->\n\nPerformance issue is noticeable when `backdrop-blur` class/es is in use regardless it's a single `<div>` in plain HTML or multiple.\nIt affects the performance when scrolling the page.\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14392","RelatedDescription":"Closed issue \"Performance issue with backdrop-blur on Firefox Mobile app\" (#14392)"},{"Id":"2519121376","IsPullRequest":false,"CreatedAt":"2024-09-11T12:27:42","Actor":"wypzw","Number":"14387","RawContent":null,"Title":"Blink Brower support?","State":"closed","Body":"The tailwind style does not take effect when compiled and opened with Blink brower?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14387","RelatedDescription":"Closed issue \"Blink Brower support?\" (#14387)"},{"Id":"2519534365","IsPullRequest":false,"CreatedAt":"2024-09-11T12:13:10","Actor":"boylett","Number":"14390","RawContent":null,"Title":"[v4] Theme and apply functions do not work inside CSS Modules","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n4.0.0-alpha.23\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\nVite + Remix\r\n\r\n**What version of Node.js are you using?**\r\n22.4.1\r\n\r\n**What browser are you using?**\r\nChrome\r\n\r\n**What operating system are you using?**\r\nmacOS Sonoma 14.6.1\r\n\r\n**Reproduction URL**\r\n[https://github.com/boylett/tailwind-v4-theme-in-css-modules-demo](https://github.com/boylett/tailwind-v4-theme-in-css-modules-demo)\r\n\r\n**Describe your issue**\r\nThe `theme()` and `apply()` functions do not work correctly when used within [CSS Modules](https://github.com/css-modules/css-modules).\r\n\r\nThe repro demonstrates that `theme` does not find the breakpoint variable, and if you add the following it also demonstrates that `apply` cannot resolve values from the theme config:\r\n\r\nAdd to `root.css`:\r\n```css\r\nbody {\r\n  @apply text-2xl;\r\n}\r\n```\r\n(demonstrates that basic CSS files can import variables)\r\n\r\nAdd to `index.module.css`:\r\n```css\r\n.test {\r\n  @apply text-2xl;\r\n}\r\n```\r\n(demonstrates that CSS Modules cannot import variables)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14390","RelatedDescription":"Closed issue \"[v4] Theme and apply functions do not work inside CSS Modules\" (#14390)"},{"Id":"2518977634","IsPullRequest":false,"CreatedAt":"2024-09-11T08:33:09","Actor":"jaimeiniesta","Number":"14385","RawContent":null,"Title":"Safari 17 issue with flex and grid","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.10\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\"autoprefixer\": \"^10.4.16\",\r\n\"daisyui\": \"^4.12.10\",\r\n\"postcss\": \"^8.4.33\",\r\n\"postcss-import\": \"^16.0.0\"\r\n\r\n**What version of Node.js are you using?**\r\n\r\n20.2.0\r\n\r\n**What browser are you using?**\r\n\r\nSafari 17\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/uzqrEtPtKX\r\n\r\nThat link was found in this other guy's question in SO\r\nhttps://stackoverflow.com/questions/78335449/safari-strange-issue-with-flex-and-column-and-grids\r\n\r\n**Describe your issue**\r\n\r\nSome elements have broken layout and appear out of place, as can be seen in the screenshots of this issue:\r\n\r\nhttps://github.com/saadeghi/daisyui/discussions/3205\r\n\r\nThis issue has been fixed in Safari 18.0 beta so maybe it's not worth looking at it, but I thought you might want to be aware of it for backwards compatibility.\r\n\r\nThanks!","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14385","RelatedDescription":"Closed issue \"Safari 17 issue with flex and grid\" (#14385)"},{"Id":"2515954422","IsPullRequest":false,"CreatedAt":"2024-09-10T10:10:48","Actor":"nikitimi","Number":"14377","RawContent":null,"Title":"Styling based on parent state (group-{modifier}) is not working","State":"closed","Body":"Tailwindcss version:   **3.4.3**\r\n\r\n**Build Tools:**\r\nNext.js version:            **14.2.4**\r\nPostcss version:           **8.4.39**\r\n\r\n---\r\nNode version:              **20.15.0**\r\n\r\nBrowser:                      **Firefox v.130**\r\nOS:                              **Windows**\r\n\r\n[Reproduction URL](https://github.com/nikitimi/tailwindcss-reproduction.git)\r\n\r\n---\r\n\r\n# Issue:\r\n\r\nThis is a T3 stack.\r\nI was trying to create a dynamic component with group-modifier,  in my reproduction URL,\r\nthe `<p>` element has a group-{modifier} class, I know that the dynamic construction of a `string` tailwind classes is not possible e.g. :\r\n\r\n### Dynamic string\r\n\r\n```\r\ngroup-{modifier}:text-white\r\n```\r\n\r\nso what I've done is to return the whole static `string` tailwind class e.g. :\r\n\r\n### Static string\r\n\r\n```\r\ngroup-hover:text-white\r\n```\r\n\r\nHowever the result I'm getting is exactly like in the root `/` wherein the tailwind classes are included in the element's class attribute, but the class names are not included in `.css` generated by Tailwind.\r\n\r\nSeems like the `Static string` example, in the context of being dynamic depends on properties passed behaves like the `Dynamic string` example.\r\n\r\nWhat I was hoping for is like the button in route `/manualParagraph`.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14377","RelatedDescription":"Closed issue \"Styling based on parent state (group-{modifier}) is not working\" (#14377)"},{"Id":"2515939391","IsPullRequest":false,"CreatedAt":"2024-09-10T09:41:15","Actor":"Matheun","Number":"14376","RawContent":null,"Title":"Vite: Utilities are not working when importing tailwind in a `.scss` file","State":"open","Body":"tailwind v4.0.0.23\r\n\r\nBasically, tailwind utilities work fine when importing it using a css file, but the wont work when importing it in a scss file\r\n\r\n\r\nmy package.json\r\n```json\r\n{\r\n    \"name\": \"ui-layer\",\r\n    \"type\": \"module\",\r\n    \"version\": \"0.0.1\",\r\n    \"main\": \"./nuxt.config.ts\",\r\n    \"scripts\": {\r\n        \"dev\": \"nuxi dev --host 127.0.0.1\",\r\n        \"build\": \"nuxt build\",\r\n        \"generate\": \"nuxt generate\",\r\n        \"preview\": \"nuxt preview\",\r\n        \"lint\": \"eslint .\",\r\n        \"lint:fix\": \"eslint . --fix\",\r\n        \"postinstall\": \"nuxt prepare\"\r\n    },\r\n    \"dependencies\": {\r\n        \"@antfu/eslint-config\": \"^2.22.4\",\r\n        \"@tailwindcss/vite\": \"^4.0.0-alpha.23\",\r\n        \"@vueuse/core\": \"^10.11.0\",\r\n        \"@vueuse/nuxt\": \"^10.11.0\",\r\n        \"tailwind-merge\": \"^2.4.0\",\r\n        \"tailwindcss\": \"^4.0.0-alpha.23\"\r\n    },\r\n    \"devDependencies\": {\r\n        \"@iconify-json/ph\": \"^1.1.13\",\r\n        \"@nuxt/eslint\": \"^0.3.13\",\r\n        \"@nuxt/eslint-config\": \"^0.3.13\",\r\n        \"@nuxt/icon\": \"^1.1.1\",\r\n        \"@types/node\": \"^20.14.11\",\r\n        \"eslint\": \"^9.7.0\",\r\n        \"eslint-plugin-format\": \"^0.1.2\",\r\n        \"eslint-plugin-tailwindcss\": \"^3.17.4\",\r\n        \"nuxt\": \"^3.12.3\",\r\n        \"postcss-custom-media\": \"^10.0.8\",\r\n        \"sass\": \"^1.77.8\",\r\n        \"typescript\": \"^5.5.5\",\r\n        \"vue\": \"latest\"\r\n    }\r\n}\r\n```\r\n\r\n\r\nmy nuxt.config.ts\r\n```ts\r\nimport tailwindcss from \"@tailwindcss/vite\";\r\n\r\n// https://nuxt.com/docs/api/configuration/nuxt-config\r\nexport default defineNuxtConfig({\r\n    devtools: { enabled: true },\r\n\r\n    typescript: {\r\n        includeWorkspace: true,\r\n    },\r\n\r\n    modules: [\r\n        \"@nuxt/eslint\",\r\n        \"@nuxt/icon\",\r\n        \"@vueuse/nuxt\",\r\n    ],\r\n\r\n    css: [\"./assets/styles/tailwind.scss\"],\r\n\r\n    vite: {\r\n        plugins: [\r\n            tailwindcss(),\r\n        ],\r\n    },\r\n\r\n    eslint: {\r\n        config: {\r\n            standalone: false,\r\n        },\r\n    },\r\n});\r\n```\r\n\r\n\r\nmy /assets/styles/tailwind.scss\r\n```sass\r\n@import \"tailwindcss\";\r\n```\r\n\r\nmy app.vue\r\n```vue\r\n\r\n<template>\r\n        <p class=\"pt-4\">\r\n            Test paragraph\r\n        </p>\r\n</template>\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14376","RelatedDescription":"Open issue \"Vite: Utilities are not working when importing tailwind in a `.scss` file\" (#14376)"},{"Id":"2514427304","IsPullRequest":true,"CreatedAt":"2024-09-09T16:42:56","Actor":"bopm","Number":"14373","RawContent":null,"Title":"Add classes output switch to Tailwind CLI","State":"open","Body":"Introduce a new switch `--classes-output` to the Tailwind CLI build command to output only detected classes.\r\n\r\n* **src/cli/index.js**\r\n  - Add a new switch `--classes-output` to the build command.\r\n* **src/lib/expandTailwindAtRules.js**\r\n  - Update the `expandTailwindAtRules` function to handle the `--classes-output` switch.\r\n  - Add logic to output only the detected classes when the switch is enabled.\r\n* **tests/variants.test.js**\r\n  - Add tests to verify the functionality of the `--classes-output` switch.\r\n  - Include test cases for different scenarios with the new switch.\r\n\r\n<!--\r\n\r\nüëã Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14373","RelatedDescription":"Open PR \"Add classes output switch to Tailwind CLI\" (#14373)"},{"Id":"2512288283","IsPullRequest":false,"CreatedAt":"2024-09-09T09:15:14","Actor":"Mellowchan","Number":"14367","RawContent":null,"Title":"3.4.10 - Warning regarding node_modules in pattern persist for skeleton theme (svelte)","State":"closed","Body":"Hello, I've setup sveltekit project with skeleton theme according to official guidelines which includes tailwind.config.js setup too:  https://next.skeleton.dev/docs/get-started/installation/sveltekit\r\n\r\nSince recent versions of talwindcss I get this warning:\r\n```\r\nwarn - Your `content` configuration includes a pattern which looks like it's accidentally matching all of `node_modules` and can cause serious performance issues.\r\nwarn - Pattern: `../**/*.ts`\r\nwarn - See our documentation for recommendations:\r\nwarn - https://tailwindcss.com/docs/content-configuration#pattern-recommendations\r\n```\r\n\r\nBesides this warning, everything works great. I don't know what I did wrong since the glob pattern is included in the official guidelines.\r\n\r\nThe relevant lines in tailwind.config.js to this warning look like this:\r\n```\r\nexport default {\r\n\tdarkMode: 'selector',\r\n\tcontent: [\r\n                './src/**/*.{html,js,svelte,ts}',\r\n                join(require.resolve('@skeletonlabs/skeleton-svelte'), '../**/*.{html,js,svelte,ts}')\r\n        ],\r\n\ttheme: {\r\n\t\textend: {\r\n\t\t\tcolors: Object.keys(myproject_theme.properties).reduce((acc, k) => {\r\n\t\t\t\tif (k.startsWith('--on-')) {\r\n\t\t\t\t\tconst color = k.substring('--on-'.length);\r\n\t\t\t\t\tacc[color] = `rgb(var(--color-${color}-500) / <alpha-value>)`;\r\n\t\t\t\t}\r\n\t\t\t\treturn acc;\r\n\t\t\t}, {})\r\n\t\t}\r\n\t},\r\n\tplugins: [\r\n\t\tforms,\r\n\t\tskeleton({\r\n\t\t\tthemes: {\r\n\t\t\t\tcustom: [myproject_theme]\r\n\t\t\t}\r\n\t\t})\r\n\t]\r\n}; // satisfies Config\r\n\r\n```\r\n\r\nMy project folder structure is like this:\r\n```\r\n.git/\r\n.svelte-kit/\r\nnode_modules/\r\nsrc/\r\nstatic/\r\n.gitignore\r\n.npmrc\r\n.prettierignore\r\n.prettierrc\r\nREADME.md\r\njsconfig.json\r\npackage.json\r\npackage-lock.json\r\npostcss.config.cjs\r\nsvelte.config.js\r\ntailwind.config.js\r\nvite.config.js\r\n```\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.10\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.15.1\r\n\r\n**What operating system are you using?**\r\n\r\nLinux (NixOS 24.11)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14367","RelatedDescription":"Closed issue \"3.4.10 - Warning regarding node_modules in pattern persist for skeleton theme (svelte)\" (#14367)"},{"Id":"2511207323","IsPullRequest":true,"CreatedAt":"2024-09-07T17:18:30","Actor":"thecrypticace","Number":"14362","RawContent":null,"Title":"Make config resolution lazy","State":"closed","Body":"The internal `registerPlugins()` API is used to enable backwards compatibility with v3 plugins and configs and it is called on every build even when no v3 plugins or configs are used. This function has a non-trivial cost in that case ‚Äî around 5ms.\r\n\r\nSo this PR does a few things:\r\n\r\n## Implements a simpler, faster `theme(‚Ä¶)` function\r\n\r\nWe now have a much simpler `theme(‚Ä¶)` function that can be used when backwards compatibility is not necessary. It still supports many of the same features:\r\n- The modern, v4 style CSS variable syntax `theme(--color-red-500)`\r\n- The legacy, v3 path style `theme(colors.red.500)`\r\n- And the v3-style alpha modifier `theme(colors.red.500 / 50%)`\r\n- Path upgrades so things like `theme(accentColor.red.500)` pulls from `--color-red-500` when no `--accent-color-red-500` theme key exists\r\n\r\nWhen you do have plugins or configs the more advanced `theme(‚Ä¶)` function is swapped in for more complete backwards compatibility.\r\n\r\n## `registerPlugins` registers globs\r\n\r\nBefore `registerPlugins` passed the `ResolvedConfig` out so we could register globs in `compile()`. Since that one function is really the main driver for backwards compat we decided to move the content path registration into `registerPlugins` itself when it comes to paths provided by plugins and configs.\r\n\r\nThis is an internal implementation detail (well this entire PR is) but it's worth mentioning. This method is used to resolve a theme value from a theme key.\r\n\r\n## `registerPlugins` is now only called when necessary\r\n\r\nAll of the above work made it so that `registerPlugins` can be called only as needed. This means that when no v3 plugins or configs are used, `registerPlugins` is never called thus elminating the performance impact of config resolution.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14362","RelatedDescription":"Closed or merged PR \"Make config resolution lazy\" (#14362)"},{"Id":"2511092068","IsPullRequest":true,"CreatedAt":"2024-09-06T20:10:18","Actor":"thecrypticace","Number":"14360","RawContent":null,"Title":"Export `Config` type","State":"closed","Body":"Right now the following does not work and instead produces a type error:\r\n\r\n```\r\nimport { type Config } from 'tailwindcss'\r\n\r\nexport default {\r\n  // ‚Ä¶ config here\r\n} satisfies Config\r\n```\r\n\r\nWe were not exporting a `Config` type but thankfully this already exists in the codebase so we just need to export it.\r\n\r\nIt does _not_ have all properties of an existing config as not all features have been implemented (or in some cases necessary / relevant for v4).\r\n\r\nNotably missing are:\r\n- `important`\r\n- `prefix`\r\n- `separator`\r\n- `safelist`\r\n- `blocklist`\r\n- `future`\r\n- `experimental`\r\n- `corePlugins`\r\n\r\nAlso, explicit keys for theme are not currently specified but we should probably bring this back even if just as an auto-complete aid.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14360","RelatedDescription":"Closed or merged PR \"Export `Config` type\" (#14360)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-09-13T03:30:27.0422062Z","RunDurationInMilliseconds":587}