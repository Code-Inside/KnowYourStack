{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2537466381","IsPullRequest":false,"CreatedAt":"2024-09-20T00:02:47","Actor":"altrae","Number":"14470","RawContent":null,"Title":"Translate using calc adding extra calc breaking intended style","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n3.4.1\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nStencilJS\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v18.20.4\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\n[https://play.tailwindcss.com/70uGwb8oJB](https://play.tailwindcss.com/70uGwb8oJB)\r\n\r\n**Describe your issue**\r\n\r\nIn the Tailwind Play example provided you can see that the transform class provided is `-translate-y-[calc(50%-.75rem)]`, but the arrow it is creating is out of alignment and if you inspect the arrow you can see that Tailwind is adding another calc around the value passed `calc(calc(50% - .75rem) * -1)`. This extra calc is causing the alignment issue. If I remove that it aligns correctly so for now I am unable to use the Tailwind class if calc is needed.\r\n\r\nTailwind adding extra calc wrapper:\r\n![Tailwind adding extra calc wrapper](https://github.com/user-attachments/assets/dfa5e353-b024-465a-9442-306f09fdeb2b)\r\n\r\nManually overriding Tailwind token to remove extra calc wrapper:\r\n![Manually overriding Tailwind token to remove extra calc wrapper](https://github.com/user-attachments/assets/3171fafe-d23c-47c0-abc9-c49254cc0032)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14470","RelatedDescription":"Closed issue \"Translate using calc adding extra calc breaking intended style\" (#14470)"},{"Id":"2537366657","IsPullRequest":true,"CreatedAt":"2024-09-19T21:04:27","Actor":"thecrypticace","Number":"14469","RawContent":null,"Title":"Add `field-sizing` utilities","State":"open","Body":"This PR adds support for the [`field-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/field-sizing) property which can be used to fit a text inputs, file inputs, textareas, and selects to the size of the text rather than some implicit default width.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14469","RelatedDescription":"Open PR \"Add `field-sizing` utilities\" (#14469)"},{"Id":"2537285658","IsPullRequest":true,"CreatedAt":"2024-09-19T20:14:10","Actor":"adamwathan","Number":"14468","RawContent":null,"Title":"Add `shadow-initial` and `inset-shadow-initial` utilities","State":"open","Body":"This PR complements #14458 by adding new `shadow-initial` and `inset-shadow-initial` utilities that make it possible to \"undo\" a custom shadow color and revert to the default shadow color for the current shadow size.\r\n\r\nFor example, in this example the shadow will be red on hover even though the default color for the `shadow` utility is `rgb(0 0 0 / 5%)`:\r\n\r\n```html\r\n<div class=\"shadow-sm shadow-red-500 hover:shadow\">\r\n  <!-- … -->\r\n</div>\r\n```\r\n\r\nThis is usually what you want, but if you actually want `hover:shadow` to apply its default color, you need to know what the color is and add it yourself:\r\n\r\n```html\r\n<div class=\"shadow-sm shadow-red-500 hover:shadow hover:shadow-black/5\">\r\n  <!-- … -->\r\n</div>\r\n```\r\n\r\nUsing `shadow-initial`, you can achieve the same thing without having to know what the original color was:\r\n\r\n```html\r\n<div class=\"shadow-sm shadow-red-500 hover:shadow hover:shadow-initial\">\r\n  <!-- … -->\r\n</div>\r\n```\r\n\r\nThe `inset-shadow-initial` utility does the same thing for the `inset-shadow-*` utilities.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14468","RelatedDescription":"Open PR \"Add `shadow-initial` and `inset-shadow-initial` utilities\" (#14468)"},{"Id":"2537245233","IsPullRequest":true,"CreatedAt":"2024-09-19T19:49:22","Actor":"adamwathan","Number":"14467","RawContent":null,"Title":"Add radial and conic gradient utilities","State":"open","Body":"This PR adds new `bg-radial-*` and `bg-conic-*` utilities for radial and conic gradients. It also adds support for \"arbitrary gradients\", where gradient utilities like `bg-linear-*`, `bg-radial-*`, and `bg-conic-*` can now accept a complete gradient definition as their arbitrary value.\r\n\r\n## Radial gradients\r\n\r\nRadial gradients are created with the `bg-radial` utility, or the `bg-radial-[…]` utility, combined with the existing `from-*`, `via-*`, and `to-*` utilities.\r\n\r\nThe simple `bg-radial` utility just creates a radial gradient with no position information, which defaults to `center`:\r\n\r\n```\r\nradial-gradient({from}, {via}, {to});\r\n```\r\n\r\nIf you use the arbitrary value format, whatever you provide as the arbitrary value is inserted into the first position:\r\n\r\n```\r\nradial-gradient({arbitrary value}, {from}, {via}, {to});\r\n```\r\n\r\nSo a utility like `bg-radial-[at_top_left]` would produce this:\r\n\r\n```\r\nradial-gradient(at top left, {from}, {via}, {to});\r\n```\r\n\r\nThis makes it possible to use some of the `radial-gradient(…)` features that this PR doesn't add first class support for, like using values like `circle at center` or providing a specific interpolation color space like `in hsl longer hue`. We may add explicit APIs for these in the future, but I'm proposing this PR first since those changes would be purely additive and none of the decisions here would create any conflict with those APIs.\r\n\r\n## Conic gradients\r\n\r\nConic gradients are created with the `bg-conic`, `bg-conic-{bareNumber}`, and `bg-conic-[…]` utilities, combined with the existing `from-*`, `via-*`, and `to-*` utilities.\r\n\r\nThe `bg-conic` utility creates a conic gradient with no angle, which defaults to `0deg`:\r\n\r\n```\r\nconic-gradient({from}, {via}, {to});\r\n```\r\n\r\nThe `bg-conic-{bareNumber}` utilities create conic gradients using the bare number as the angle:\r\n\r\n```\r\nconic-gradient(from {bareNumber}deg, {from}, {via}, {to});\r\n```\r\n\r\nThe `bg-conic-[…]` arbitrary value utilities insert whatever you provide as the arbitrary value into the first position verbatim:\r\n\r\n```\r\nconic-gradient({arbitraryValue}, {from}, {via}, {to});\r\n```\r\n\r\nSo a utility like `bg-conic-[from_45deg_in_hsl]` would produce this:\r\n\r\n```\r\nconic-gradient(from 45deg in hsl, {from}, {via}, {to});\r\n```\r\n\r\nNote that the `from` keyword needs to be provided by the user when using arbitrary values, but not when using bare values.\r\n\r\nThis makes it possible to use some of the `conic-gradient(…)` features that this PR doesn't add first class support for, like using values like `at 0 0` or providing a specific interpolation color space like `in hsl longer hue`. We may add explicit APIs for these in the future, but I'm proposing this PR first since those changes would be purely additive and none of the decisions here would create any conflict with those APIs.\r\n\r\n## Arbitrary gradients\r\n\r\nPrior to this PR, utilities like `bg-linear-[…]` could only accept positional information as their arbitrary value, like `bg-linear-[to_top_right]`. All of the color stops could only be provided using the `from-*`, `via-*`, and `to-*` utilities.\r\n\r\nIf you wanted to provide the complete gradient in one class, you needed to use `bg-[…]` and write out the gradient function yourself:\r\n\r\n\r\n```html\r\n<div class=\"bg-[linear-gradient(to_right,var(--color-red-500),var(--color-yellow-400))]\">\r\n```\r\n\r\nThis PR refactors some things internally to make it possible to provide the entire gradient as the arbitrary value to each background gradient utility, like this:\r\n\r\n```html\r\n<div class=\"bg-linear-[to_right,var(--color-red-500),var(--color-yellow-400)]\">\r\n```\r\n\r\nThis is nice if you're doing something very custom and you want to be able to look at the whole value together, while still avoiding some of the boilerplate you'd have if you had to write out the entire gradient function yourself.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14467","RelatedDescription":"Open PR \"Add radial and conic gradient utilities\" (#14467)"},{"Id":"2537066659","IsPullRequest":true,"CreatedAt":"2024-09-19T18:16:34","Actor":"thecrypticace","Number":"14465","RawContent":null,"Title":"Refactor some screen compatibility code","State":"open","Body":"These changes were extracted from our work on a `screen()` function for CSS — we've decided to move those changes to a code mod instead of implementing support for `screen()` in the compiler — but the refactoring around the changes still makes sense to do so I'm landing that here separately.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14465","RelatedDescription":"Open PR \"Refactor some screen compatibility code\" (#14465)"},{"Id":"2529115110","IsPullRequest":true,"CreatedAt":"2024-09-19T18:14:27","Actor":"thecrypticace","Number":"14438","RawContent":null,"Title":"Refactor some screen compatibility code","State":"closed","Body":"This adds support for the `screen(…)` CSS function which can be used to build the media queries for a given breakpoint:\r\n\r\nInput:\r\n\r\n```css\r\n@theme {\r\n  --breakpoint-sm: 640px;\r\n}\r\n\r\n@media screen(sm) {\r\n  .foo {\r\n    color: red;\r\n  }\r\n}\r\n```\r\n\r\noutput:\r\n  \r\n```css\r\n@media (width >= 640px) {\r\n  .foo {\r\n    color: red;\r\n  }\r\n}\r\n```\r\n\r\nWe also support more advanced `screens` configurations from configuration files (mainly for backwards) compat:\r\n```ts\r\nexport default {\r\n  theme: {\r\n    screens: {\r\n      sm: '640px',\r\n      md: { min: '768px' },\r\n      lg: { min: '1024px', max: '1280px' },\r\n      sidebar: [\r\n        { min: '640px', max: '768px' },\r\n        { min: '1024px' },\r\n      ],\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```css\r\n@media screen(sm) {\r\n  .foo {\r\n    color: red;\r\n  }\r\n}\r\n\r\n@media screen(md) {\r\n  .foo {\r\n    color: blue;\r\n  }\r\n}\r\n\r\n@media screen(lg) {\r\n  .foo {\r\n    color: green;\r\n  }\r\n}\r\n\r\n@media screen(sidebar) {\r\n  .foo {\r\n    color: yellow;\r\n  }\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n```css\r\n@media (width >= 640px) {\r\n  .foo {\r\n    color: red;\r\n  }\r\n}\r\n\r\n@media (width >= 768px) {\r\n  .foo {\r\n    color: blue;\r\n  }\r\n}\r\n\r\n@media (1280px >= width >= 1024px) {\r\n  .foo {\r\n    color: green;\r\n  }\r\n}\r\n\r\n@media (768px >= width >= 640px), (width >= 1024px) {\r\n  .foo {\r\n    color: yellow;\r\n  }\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14438","RelatedDescription":"Closed or merged PR \"Refactor some screen compatibility code\" (#14438)"},{"Id":"2536673044","IsPullRequest":false,"CreatedAt":"2024-09-19T17:46:37","Actor":"Simon-He95","Number":"14461","RawContent":null,"Title":"feat: add more class","State":"closed","Body":"I think something like `transform-style`、`translate-z` should work.\r\n\r\nI don't know if it was intentional or if there was an omission. If there was an omission, I would be happy to add it.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14461","RelatedDescription":"Closed issue \"feat: add more class\" (#14461)"},{"Id":"2536987130","IsPullRequest":true,"CreatedAt":"2024-09-19T17:33:06","Actor":"tobeycodes","Number":"14463","RawContent":null,"Title":"feat: use parallel jobs in github actions","State":"open","Body":"- This does not necessarily speed up builds but does run jobs post build in parallel\r\n- There are more ways to optimize these Github actions, which I can do in follow up PRs\r\n- Windows is slow on the build step and integration test step. Some options:\r\n  - Optimize the way build happens so Turborepo can run in a more parallel way\r\n  - Optimize the underlying build\r\n  - Optimize/review how cores/memory are being used efficiently\r\n  - Find ways to skip when possible\r\n  - Use larger windows runners (https://docs.github.com/en/actions/using-github-hosted-runners/using-larger-runners/about-larger-runners)\r\n- I might have been a bit excessive on the ci-common.yml steps as I am not familiar enough with what is needed and what isn't for each step. I am sure that some jobs could have more simplified steps","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14463","RelatedDescription":"Open PR \"feat: use parallel jobs in github actions\" (#14463)"},{"Id":"2536594701","IsPullRequest":true,"CreatedAt":"2024-09-19T15:02:58","Actor":"n-batalha","Number":"14460","RawContent":null,"Title":"CI integration tests speed-up","State":"closed","Body":"Please ignore this PR, checking some quick improvements re: CI https://x.com/adamwathan/status/1836761788936798453\r\n\r\nHope it's ok, I can't push branches to your repo so I'm opening a draft PR to trigger your CI, not replicable locally.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14460","RelatedDescription":"Closed or merged PR \"CI integration tests speed-up\" (#14460)"},{"Id":"2534386404","IsPullRequest":true,"CreatedAt":"2024-09-19T13:43:48","Actor":"adamwathan","Number":"14458","RawContent":null,"Title":"Preserve shadow color when overriding shadow size","State":"closed","Body":"This PR changes how shadow color and shadow size utilities interact when used with variants.\r\n\r\nTake this HTML:\r\n\r\n```html\r\n<div class=\"shadow-lg shadow-red-500 hover:shadow-xl\">\r\n  <!-- … -->\r\n</div>\r\n```\r\n\r\nCurrently this shadow would be red by default, but revert to the default semi-transparent black color on hover.\r\n\r\nThis PR changes this behavior such that the shadow remains red on hover, and only the shadow size changes.\r\n\r\nWe deliberately didn't do this originally because making things behave this way makes it very difficult to get the default shadow color back once you've changed it. The default color for `shadow-xl` for instance is `rgb(0 0 0 / 0.1)`, and the only way to get that color back after changing it is to know that value and explicitly bring it back:\r\n\r\n```html\r\n<div class=\"shadow-lg shadow-red-500 hover:shadow-xl hover:shadow-black/10\">\r\n  <!-- … -->\r\n</div>\r\n```\r\n\r\nTo make things more difficult, the default shadow color is not the same across shadow sizes. For `shadow-sm` it's `black/5`, and for `shadow-2xl` it's `black/25`.\r\n\r\nIn practice though you basically never need to bring back the default shadow color, so I'm reconsidering this trade-off in v4, and think I prefer this new behavior where the color is preserved but you have to bring back the default color if you actually need it.\r\n\r\nA simple workaround if you don't know the color is to reset the `--tw-shadow-color` variable like this:\r\n\r\n```html\r\n<div class=\"shadow-lg shadow-red-500 hover:shadow-xl hover:[--tw-shadow-color:initial]\">\r\n  <!-- … -->\r\n</div>\r\n```\r\n\r\nThis relies on semi-private internals though, so perhaps we can introduce a utility for this, like `shadow-default` or `shadow-initial` that just unsets the shadow color.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14458","RelatedDescription":"Closed or merged PR \"Preserve shadow color when overriding shadow size\" (#14458)"},{"Id":"2535775768","IsPullRequest":true,"CreatedAt":"2024-09-19T09:19:57","Actor":"philipp-spiess","Number":"14459","RawContent":null,"Title":"Experiment with ReFS","State":"open","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14459","RelatedDescription":"Open PR \"Experiment with ReFS\" (#14459)"},{"Id":"2534185687","IsPullRequest":true,"CreatedAt":"2024-09-18T16:27:30","Actor":"depfu[bot]","Number":"14457","RawContent":null,"Title":"Update typescript 5.5.4 → 5.6.2 (minor)","State":"open","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ typescript (5.5.4 → 5.6.2) · [Repo](https://github.com/Microsoft/TypeScript)\n\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/microsoft/TypeScript/releases/tag/v5.6.2\">5.6.2</a></h4>\n\n<blockquote><p dir=\"auto\">For release notes, check out the <a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-5-6/\">release announcement</a>.</p>\n<p dir=\"auto\">For the complete list of fixed issues, check out the</p>\n<ul dir=\"auto\">\n<li>\n<a href=\"https://bounce.depfu.com/github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&amp;q=milestone%3A%22TypeScript+5.6.0%22+is%3Aclosed+\">fixed issues query for Typescript 5.6.0 (Beta)</a>.</li>\n<li>\n<a href=\"https://bounce.depfu.com/github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&amp;q=milestone%3A%22TypeScript+5.6.1%22+is%3Aclosed+\">fixed issues query for Typescript 5.6.1 (RC)</a>.</li>\n<li>\n<a href=\"https://bounce.depfu.com/github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&amp;q=milestone%3A%22TypeScript+5.6.2%22+is%3Aclosed+\">fixed issues query for Typescript 5.6.2 (Stable)</a>.</li>\n</ul>\n<p dir=\"auto\">Downloads are available on:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://www.npmjs.com/package/typescript\">npm</a></li>\n<li><a href=\"https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild\">NuGet package</a></li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/typescript/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/Microsoft/TypeScript/compare/c8a7d589e647e19c94150d9892909f3aa93e48eb...a7e3374f13327483fbe94e32806d65785b0b6cda\">See the full diff on Github</a>. The new version differs by more commits than we can show here.</p>\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14457","RelatedDescription":"Open PR \"Update typescript 5.5.4 → 5.6.2 (minor)\" (#14457)"},{"Id":"2534184512","IsPullRequest":true,"CreatedAt":"2024-09-18T16:26:52","Actor":"depfu[bot]","Number":"14456","RawContent":null,"Title":"Update turbo 2.0.12 → 2.1.1 (minor)","State":"open","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ turbo (2.0.12 → 2.1.1) · [Repo](https://github.com/turborepo/turbo)\n\n\n\n\n\nSorry, we couldn't find anything useful about this release.\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14456","RelatedDescription":"Open PR \"Update turbo 2.0.12 → 2.1.1 (minor)\" (#14456)"},{"Id":"2533557271","IsPullRequest":true,"CreatedAt":"2024-09-18T14:49:27","Actor":"philipp-spiess","Number":"14453","RawContent":null,"Title":"Disallow negative bare values","State":"closed","Body":"Right now, it is possible to type `grid-cols--8` which maps to:\r\n\r\n```css\r\n/* Specificity: (0, 1, 0) */\r\n.grid-cols--8 {\r\n  grid-template-columns: repeat(-8, minmax(0, 1fr));\r\n}\r\n```\r\n\r\nThis doesn't make sense so we used this opportunity to audit all variants and utilities and properly disallow negative bare values. Utilities where negative values are supported still work by using the negative utility syntax, e.g.: `-inset-4`.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14453","RelatedDescription":"Closed or merged PR \"Disallow negative bare values\" (#14453)"},{"Id":"2528153612","IsPullRequest":true,"CreatedAt":"2024-09-18T14:45:44","Actor":"RobinMalfait","Number":"14434","RawContent":null,"Title":"Add initial codemod tooling","State":"closed","Body":"This PR adds some initial tooling for codemods. We are currently only interested in migrating CSS files, so we will be using PostCSS under the hood to do this. This PR also implements the \"migrate `@apply`\" codemod from #14412.\r\n\r\nThe usage will look like this:\r\n\r\n```sh\r\nnpx @tailwindcss/upgrade\r\n```\r\n\r\nYou can pass in CSS files to transform as arguments:\r\n\r\n```sh\r\nnpx @tailwindcss/upgrade src/**/*.css\r\n```\r\n\r\nBut, if none are provided, it will search for CSS files in the current directory and its subdirectories.\r\n\r\n```\r\n≈ tailwindcss v4.0.0-alpha.24\r\n\r\n│ No files provided. Searching for CSS files in the current\r\n│ directory and its subdirectories…\r\n\r\n│ Migration complete. Verify the changes and commit them to\r\n│ your repository.\r\n```\r\n\r\nThe tooling also requires the Git repository to be in a clean state. This is a common convention to ensure that everything is undo-able. If we detect that the git repository is dirty, we will abort the migration.\r\n\r\n```\r\n≈ tailwindcss v4.0.0-alpha.24\r\n\r\n│ Git directory is not clean. Please stash or commit your\r\n│ changes before migrating.\r\n\r\n│ You may use the `--force` flag to override this safety\r\n│ check.\r\n```\r\n\r\n\r\n---\r\n\r\nThis PR alsoo adds CSS codemods for migrating existing `@apply` directives to the new version.\r\n\r\nThis PR has the ability to migrate the following cases:\r\n\r\n---\r\n\r\nIn v4, the convention is to put the important modifier `!` at the end of the utility class instead of right before it. This makes it easier to reason about, especially when you are variants.\r\n\r\nInput:\r\n```css\r\n.foo {\r\n  @apply !flex flex-col! hover:!items-start items-center;\r\n}\r\n```\r\n\r\nOutput:\r\n```css\r\n.foo {\r\n  @apply flex! flex-col! hover:items-start! items-center;\r\n}\r\n```\r\n\r\n\r\n---\r\n\r\nIn v4 we don't support `!important` as a marker at the end of `@apply` directives. Instead, you can append the `!` to each utility class to make it `!important`.\r\n\r\nInput:\r\n```css\r\n.foo {\r\n  @apply flex flex-col !important;\r\n}\r\n```\r\n\r\nOutput:\r\n```css\r\n.foo {\r\n  @apply flex! flex-col!;\r\n}\r\n```\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14434","RelatedDescription":"Closed or merged PR \"Add initial codemod tooling\" (#14434)"},{"Id":"2533704762","IsPullRequest":true,"CreatedAt":"2024-09-18T13:10:07","Actor":"RobinMalfait","Number":"14455","RawContent":null,"Title":"Add CSS codemods for migrating `@layer utilities`","State":"open","Body":"This PR adds CSS codemods for migrating existing `@layer utilities` to `@utility` directives.\n\nThis PR has the ability to migrate the following cases:\n\n---\n\nThe most basic case is when you want to migrate a simple class to a utility directive.\n\nInput:\n```css\n@layer utilities {\n  .foo {\n    color: red;\n  }\n\n  .bar {\n    color: blue;\n  }\n}\n```\n\nOutput:\n```css\n@utility foo {\n  color: red;\n}\n\n@utility bar {\n  color: blue;\n}\n```\n\nYou'll notice that the class `foo` will be used as the utility name, the declarations (and the rest of the body of the rule) will become the body of the `@utility` definition.\n\n---\n\nIn v3, every class in a selector will become a utility. To correctly migrate this to `@utility` directives, we have to register each class in the selector and generate `n` utilities.\n\nWe can use nesting syntax, and replace the current class with `&` to ensure that the final result behaves the same.\n\nInput:\n```css\n@layer utilities {\n  .foo .bar .baz {\n    color: red;\n  }\n}\n```\n\nOutput:\n```css\n@utility foo {\n  & .bar .baz {\n    color: red;\n  }\n}\n\n@utility bar {\n  .foo & .baz {\n    color: red;\n  }\n}\n\n@utility .baz {\n  .foo .bar & {\n    color: red;\n  }\n}\n```\n\nIn this case, it could be that you know that some of them will never be used as a utility (e.g.: `hover:bar`), but then you can safely remove them.\n\n---\n\nEven classes inside of `:has(…)` will become a utility. The only exception to the rule is that we don't do it for `:not(…)`.\n\nInput:\n```css\n@layer utilities {\n  .foo .bar:not(.qux):has(.baz) {\n    display: none;\n  }\n}\n```\n\nOutput:\n```css\n@utility foo {\n  & .bar:not(.qux):has(.baz) {\n    display: none;\n  }\n}\n\n@utility bar {\n  .foo &:not(.qux):has(.baz) {\n    display: none;\n  }\n}\n\n@utility baz {\n  .foo .bar:not(.qux):has(&) {\n    display: none;\n  }\n}\n```\n\nNotice that there is no `@utility qux` because it was used inside of `:not(…)`.\n\n---\n\nWhen classes are nested inside at-rules, then these classes will also become utilities. However, the `@utility <name>` will be at the top and the at-rules will live inside of it. If there are multiple classes inside a shared at-rule, then the at-rule will be duplicated for each class.\n\nLet's look at an example to make it more clear:\n\nInput:\n```css\n@layer utilities {\n  @media (min-width: 640px) {\n    .foo {\n      color: red;\n    }\n\n    .bar {\n      color: blue;\n    }\n\n    @media (min-width: 1024px) {\n      .baz {\n        color: green;\n      }\n\n      @media (min-width: 1280px) {\n        .qux {\n          color: yellow;\n        }\n      }\n    }\n  }\n}\n```\n\nOutput:\n```css\n@utility foo {\n  @media (min-width: 640px) {\n    color: red;\n  }\n}\n\n@utility bar {\n  @media (min-width: 640px) {\n    color: blue;\n  }\n}\n\n@utility baz {\n  @media (min-width: 640px) {\n    @media (min-width: 1024px) {\n      color: green;\n    }\n  }\n}\n\n@utility qux {\n  @media (min-width: 640px) {\n    @media (min-width: 1024px) {\n      @media (min-width: 1280px) {\n        color: yellow;\n      }\n    }\n  }\n}\n```\n\n---\n\nWhen classes result in multiple `@utility` directives with the same name, then the definitions will be merged together.\n\nInput:\n```css\n@layer utilities {\n  .no-scrollbar::-webkit-scrollbar {\n    display: none;\n  }\n\n  .no-scrollbar {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n}\n```\n\nIntermediate representation:\n```css\n@utility no-scrollbar {\n  &::-webkit-scrollbar {\n    display: none;\n  }\n}\n\n@utility no-scrollbar {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n```\n\nOutput:\n```css\n@utility no-scrollbar {\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  -ms-overflow-style: none;\n  scrollbar-width: none\n}\n```\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14455","RelatedDescription":"Open PR \"Add CSS codemods for migrating `@layer utilities`\" (#14455)"},{"Id":"2529734710","IsPullRequest":false,"CreatedAt":"2024-09-18T12:59:40","Actor":"Kinbaum","Number":"14440","RawContent":null,"Title":"Bug in v4 with `--inset-shadow-*` generating `inset` position rule ","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n`v4.0.0-alpha.24`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n- next: `14.2.11`\r\n- tailwindcss: `4.0.0-alpha.24`\r\n- @tailwindcss/postcss: `4.0.0-alpha.24`\r\n\r\n**What version of Node.js are you using?**\r\n\r\n`v20.11.0`\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/R5yKQBCPfX?file=css\r\n\r\n**Describe your issue**\r\n\r\nWhen using the `--inset-shadow` custom CSS property to generate an inset shadow, v4 is generating the inset position rule by mistake. Here is the generated output from the tailwindplay listed above (notice the highlighted section).\r\n\r\n<img width=\"1602\" alt=\"Screen Shot 2024-09-16 at 8 47 43 PM\" src=\"https://github.com/user-attachments/assets/b26625ba-da08-4a66-8dad-a90bf21358d2\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14440","RelatedDescription":"Closed issue \"Bug in v4 with `--inset-shadow-*` generating `inset` position rule \" (#14440)"},{"Id":"2531351415","IsPullRequest":true,"CreatedAt":"2024-09-18T12:59:39","Actor":"adamwathan","Number":"14447","RawContent":null,"Title":"Explicitly ignore `--inset-shadow` and `--inset-ring` variables in `inset` handler","State":"closed","Body":"Resolves #14440.\r\n\r\nThis PR fixes an issue where registering a custom `inset-shadow-*` utility value in your theme like this:\r\n\r\n```css\r\n@theme {\r\n  --inset-shadow-potato: inset 0px 2px 6px #7a4724;\r\n}\r\n```\r\n\r\n…mistakenly generates both an `inset-shadow-*` and `inset-*` utility with that value:\r\n\r\n```css\r\n.inset-shadow-potato {\r\n  inset: inset 0px 2px 6px #7a4724;\r\n}\r\n\r\n.inset-shadow-potato {\r\n  box-shadow: inset 0px 2px 6px #7a4724;\r\n}\r\n```\r\n\r\nThis replaces #14445 which turns out to not be the ideal solution.\r\n\r\nNow we just explicitly ignore variables like `--inset-shadow-*` and `--inset-ring-*` in the `inset` handler. Kind of a gross patch but I can live with it because the whole existence of the `--inset-*` key is kind of a backwards compatibility thing anyways.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14447","RelatedDescription":"Closed or merged PR \"Explicitly ignore `--inset-shadow` and `--inset-ring` variables in `inset` handler\" (#14447)"},{"Id":"2533564490","IsPullRequest":false,"CreatedAt":"2024-09-18T12:10:23","Actor":"joshdavies14","Number":"14454","RawContent":null,"Title":"Build performance with custom classes in @layer is much slower than without","State":"open","Body":"Tailwind CSS v3.4.10, vite v4.4.0, Vue v3.4.15, Node v18.19.1.\r\n\r\nWe have a large Vue SPA project that we build with Vite and use Tailwind as our main framework throughout, and make use of a small number of custom classes with the `@apply` directive, contained within an `@layer` group in our SCSS files (that are transformed by vite upon build). We also define colours using CSS variables in the same way as [outlined in the docs](https://tailwindcss.com/docs/customizing-colors#using-css-variables) (which uses another `@layer` group).\r\n\r\nIn the past few months we have noticed our initial load times when first starting the app going >20s, sometimes with requests failing and needing to refresh to load in, and hot reload taking up to 10s sometimes to load our changes. Changes were made to our Vite config with no improvement.\r\n\r\nOne of my colleagues recently ran a CPU profile across the build process in dev, and we spotted that `expandTailwindAtRules` was taking close to 10s, sometimes more, and clearly being the bottleneck in our build process. I expect our build to not be super quick due to the size but this one function is much slower than I would expect!\r\n\r\n<img width=\"772\" alt=\"Screenshot_2024-09-18_at_12 06 30\" src=\"https://github.com/user-attachments/assets/24190e8c-95dd-4eb3-b86e-a902e4cfc51a\">\r\n\r\nTo test this case, I removed the `@layer` groupings from these classes and restarted the dev process, and both myself and my colleague noticed clear speed differences in the dev build process.\r\n\r\nis there anything that can be done to improve the performance of builds here? It makes day-to-day development much slower than it needs to be.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14454","RelatedDescription":"Open issue \"Build performance with custom classes in @layer is much slower than without\" (#14454)"},{"Id":"2531920492","IsPullRequest":true,"CreatedAt":"2024-09-17T19:21:31","Actor":"thecrypticace","Number":"14449","RawContent":null,"Title":"Add support for `prefix` in v4","State":"open","Body":"WIP","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14449","RelatedDescription":"Open PR \"Add support for `prefix` in v4\" (#14449)"},{"Id":"2531746363","IsPullRequest":true,"CreatedAt":"2024-09-17T17:50:39","Actor":"thecrypticace","Number":"14448","RawContent":null,"Title":"Add support for `important` in v4","State":"open","Body":"I don't know if we're 100% certain we still need this in v4 (but I think it might be needed)\r\n\r\n\r\n- `important: \"#some-selector\"` wraps `@tailwind utilities` in a rule when we call `compile()`\r\n- `important: true` marks all generated declarations as important during `build(…)`\r\n\r\nThis _does not_ bring back support for the `respectImportant` flag in `addUtilities` / `matchUtilities`.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14448","RelatedDescription":"Open PR \"Add support for `important` in v4\" (#14448)"},{"Id":"2528992951","IsPullRequest":true,"CreatedAt":"2024-09-17T16:46:42","Actor":"thecrypticace","Number":"14437","RawContent":null,"Title":"Skip candidates with invalid `theme()` calls","State":"closed","Body":"Right now when we encounter a candidates with invalid `theme()` calls we throw an error which stops the build entirely. This is not ideal because, especially in the case of `node_modules`, if one file in one package has an error it will stop the build for an entire project and tracking this down can be quite difficult.\r\n\r\nNow, after this PR, any candidates that use `theme(…)` with non-existent theme keys (e.g. `rounded-[theme(--radius-does-not-exist)]`) will be skipped instead of breaking the build.\r\n\r\nBefore:\r\n```html\r\n<div class=\"underline rounded-[theme(--radius-does-not-exist)]\"></div>\r\n```\r\n\r\n```css\r\n/* No CSS was generated because an error was thrown */\r\n/* Error: Invalid theme key: --radius-does-not-exist */\r\n```\r\n\r\nAfter:\r\n```html\r\n<div class=\"underline rounded-[theme(--radius-does-not-exist)]\"></div>\r\n```\r\n\r\n```css\r\n.underline {\r\n  text-decoration-line: underline;\r\n}\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14437","RelatedDescription":"Closed or merged PR \"Skip candidates with invalid `theme()` calls\" (#14437)"},{"Id":"2528050008","IsPullRequest":true,"CreatedAt":"2024-09-17T15:00:12","Actor":"philipp-spiess","Number":"14431","RawContent":null,"Title":"Fix stacking variant order when variants inside a group are treated as equal","State":"closed","Body":"This PR fixes an issue with the order of CSS when using stacked variants when two variants have the same order (as defined by the custom comperator function).\r\n\r\n## The problem\r\n\r\nTake, for example, our breakpoint variants. Those are split into `max-*` variants and a group containing all `min-*` variants as well as the unprefixed static ones (e.g. `lg`, `sm`).\r\n\r\nWe currently define a custom sort order for all breakpoints variants that will compare their order based on the resolved value provided. So if you define `--breakpoint-sm: 100px` and `--breakpoint-lg: 200px`, we first check if both breakpoints have the same unit and then we rank based on the numerical value, making `sm` appear before `lg`.\r\n\r\nBut since the `min-*` variant and the `sm` variant share the same group, this also means that `min-sm` and `sm` as well as `min-lg` and `lg` will always have the same order (which makes sense—they also have the exact same CSS they generate!)\r\n\r\nThe issue now arises when you use these together with variant stacking. So, say you want to stack the two variants `max-lg:min-sm`. We always want stacked variants to appear _after_ their non-stacked individual parts (since they are more specific). To do this right now, we generate a bitfield based on the variant order. If you have four variants like this:\r\n\r\n\r\n| Order | Variant |\r\n| ------------- | ------------- |\r\n| 0  | `max-lg`  |\r\n| 1  | `max-sm`  |\r\n| 2  | `min-sm`  |\r\n| 3  | `min-lg`  |\r\n\r\n\r\nWe will assign one bit for each used variant starting from the lowest bit, so for the stack `max-lg:min-sm` we will set the bitfield to `0101` and those for the individual variants would result in `0100` (for `min-sm`) and `0001` (for `max-lg`). We then convert this bitfield to a number and order based on that number. This ensures that the stack always sorts higher.\r\n\r\nThe issue now arises from the fact that the variant order also include the unprefixed variants for a breakpoint. So in our case of `lg` and `sm`, the full list would look like this:\r\n\r\n\r\n| Order | Variant |\r\n| ------------- | ------------- |\r\n| 0  | `max-lg`  |\r\n| 1  | `max-sm`  |\r\n| 2  | `min-sm`  |\r\n| 3  | `sm`  |\r\n| 4  | `min-lg`  |\r\n| 5  | `lg`  |\r\n\r\nThis logic now breaks when you start to compute a stack for something like `max-lg:min-lg` _while also using the `lg` utility:\r\n\r\n| Stack | Bitmap | Integer Value |\r\n| ------------- | ------------- | ------------- |\r\n| `max-lg:min-lg` | `010001` | 17 |\r\n| `lg` | `100000` | 18 |\r\n\r\nAs you can see here, the sole `lg` variant will now sort higher than the compound of `max-lg:min-lg`. That's not something we want!\r\n\r\n## Proposed solution\r\n\r\nTo fix this, we need to encode the information of _same_ variant order somehow. A single array like the example above is not sufficient for this, since it will remove the information of the similar sort order. Instead, we now computed a list of nested arrays for the order lookup that will combine variants of similar values (while keeping the order the same). So from the 6 item array above, we now have the following nested array:\r\n\r\n| Order | Variant |\r\n| ------------- | ------------- |\r\n| 0  | [`max-lg`]  |\r\n| 1  | [`max-sm`]  |\r\n| 2  | [`min-sm`, `sm`]  |\r\n| 3  | [`min-lg`, `lg`]  |\r\n\r\nWhen we use the first layer index for the bitfield, we can now see how this solves the issue:\r\n\r\n| Stack | Bitmap | Integer Value |\r\n| ------------- | ------------- | ------------- |\r\n| `max-lg:min-lg` | `1001` | 9 |\r\n| `lg` | `1000` | 8 |\r\n\r\nThat's pretty-much it! There are a few other changes in this PR that mostly handles with a small regression by this change where now, named `group` variants and unnamed `group` variants would now have the same order (something that was undefined behavior before). ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14431","RelatedDescription":"Closed or merged PR \"Fix stacking variant order when variants inside a group are treated as equal\" (#14431)"},{"Id":"2531258513","IsPullRequest":true,"CreatedAt":"2024-09-17T14:41:07","Actor":"adamwathan","Number":"14445","RawContent":null,"Title":"Don't generate CSS for less specific utilities when a more specific utility matches","State":"closed","Body":"Resolves #14440.\r\n\r\nThis PR fixes an issue where registering a custom `inset-shadow-*` utility value in your theme like this:\r\n\r\n```css\r\n@theme {\r\n  --inset-shadow-potato: inset 0px 2px 6px #7a4724;\r\n}\r\n```\r\n\r\n…mistakenly generates both an `inset-shadow-*` and `inset-*` utility with that value:\r\n\r\n```css\r\n.inset-shadow-potato {\r\n  inset: inset 0px 2px 6px #7a4724;\r\n}\r\n\r\n.inset-shadow-potato {\r\n  box-shadow: inset 0px 2px 6px #7a4724;\r\n}\r\n```\r\n\r\nWe do this by making sure that when parsing a candidate name like `inset-shadow-potato`, we stop trying to find less specific matches as soon as we find any match. So once `inset-shadow` matches as a root with `potato` as a value, we don't try to match `inset` as a root with `shadow-potato` as a value.\r\n\r\nThis reverts _some_ of the things we changed in https://github.com/tailwindlabs/tailwindcss/pull/14231 ~~that we can't for the life of us remember why we changed 🧠~~\r\n\r\nRemembered why we didn't want to do this — if we only accept the most specific match it's possible for someone to completely override a core utility without really doing it on purpose.\r\n\r\nFor example, say for some cursed reason someone wants to change the color of all bold text by doing this:\r\n\r\n```css\r\n@utility font-bold {\r\n  color: red;\r\n}\r\n```\r\n\r\nThat will actually _remove_ the `font-weight: bold` declaration from that utility in this case, because we don't explicitly register `font-bold`. We register `font` and handle `bold` as a value, so the user-defined `font-bold` will match as more specific, and our handler for `font-*` with `bold` as a value will never run.\r\n\r\nNo one should ever do this, but it does expose this other weird thing where we could refactor internals to use a static utility for a previously functional utility (or vice versa) and change the behavior of user-land code which just doesn't feel right.\r\n\r\nReplacing this PR with #14447.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14445","RelatedDescription":"Closed or merged PR \"Don't generate CSS for less specific utilities when a more specific utility matches\" (#14445)"},{"Id":"2531325697","IsPullRequest":true,"CreatedAt":"2024-09-17T14:29:45","Actor":"philipp-spiess","Number":"14446","RawContent":null,"Title":"Resolve `@import` in core","State":"open","Body":"This PR brings `@import` resolution into Tailwind CSS core. This means that our clients (PostCSS, Vite, and CLI) no longer need to depend on `postcss` and `postcss-import` to resolve `@import`. Furthermore this simplifies the handling of relative paths for `@source`, `@plugin`, or `@config` in transitive CSS files (where the relative root should always be relative to the CSS file that contains the directive). This PR also fixes a plugin resolution bug where non-relative imports (e.g. directly importing node modules like `@plugin '@tailwindcss/typography';`) would not work in CSS files that are based in a different npm package.\r\n\r\n### Resolving `@import`\r\n\r\nThe core of the `@import` resolution is inside `packages/tailwindcss/src/at-import.ts`. There, to keep things performant, we do a two-step process to resolve imports. Imagine the following input CSS file:\r\n\r\n```css\r\n@import \"tailwindcss/theme.css\";\r\n@import \"tailwindcss/utilities.css\";\r\n```\r\n\r\nSince our AST walks are synchronous, we will do a first traversal where we start a loading request for each `@import` directive. Once all loads are started, we will await the promise and do a second walk where we actually replace the AST nodes with their resolved stylesheets. All of this is recursive, so that `@import`-ed files can again `@import` other files. \r\n\r\nThe core `@import` resolver also includes extensive test cases for [various combinations of media query and supports conditionals as well als layered imports](https://developer.mozilla.org/en-US/docs/Web/CSS/@import).\r\n\r\nWhen the same file is imported multiple times, the AST nodes are duplicated but duplicate I/O is avoided on a per-file basis, so this will only load one file, but include the `@theme` rules twice:\r\n\r\n```css\r\n@import \"tailwindcss/theme.css\";\r\n@import \"tailwindcss/theme.css\";\r\n```\r\n\r\n### Adding a new `context` node to the AST\r\n\r\nOne limitation we had when working with the `postcss-import` plugin was the need to do an additional traversal to rewrite relative `@source`, `@plugin`, and `@config` directives. This was needed because we want these paths to be relative to the CSS file that defines the directive but when flattening a CSS file, this information is no longer part of the stringifed CSS representation. We worked around this by rewriting the content of these directives to be relative to the input CSS file, which resulted in added complexity and caused a lot of issues with Windows paths in the beginning.\r\n\r\nNow that we are doing the `@import` resolution in core, we can use a different data structure to persist this information. This PR adds a new `context` node so that we can store arbitrary context like this inside the Ast directly. This allows us to share information with the sub tree _while doing the Ast walk_.\r\n\r\nHere's an example of how the new `context` node can be used to share information with subtrees:\r\n\r\n```ts\r\nconst ast = [\r\n  rule('.foo', [decl('color', 'red')]),\r\n  context({ value: 'a' }, [\r\n    rule('.bar', [\r\n      decl('color', 'blue'),\r\n      context({ value: 'b' }, [\r\n        rule('.baz', [decl('color', 'green')]),\r\n      ]),\r\n    ]),\r\n  ]),\r\n]\r\n\r\nwalk(ast, (node, { context }) => {\r\n  if (node.kind !== 'declaration') return\r\n  switch (node.value) {\r\n    case 'red':   assert(context.value === undefined)\r\n    case 'blue':  assert(context.value === 'a')\r\n    case 'green': assert(context.value === 'b')\r\n  }\r\n})\r\n```\r\n\r\nIn core, we use this new Ast node specifically to persist the `base` path of the current CSS file. We put the input CSS file `base` at the root of the Ast and then overwrite the `base` on every `@import` substitution. \r\n\r\n### Removing the dependency on `postcss-import`\r\n\r\nNow that we support `@import` resolution in core, our clients no longer need a dependency on `postcss-import`. Furthermore, most dependencies also don't need to know about `postcss` at all anymore (except the PostCSS client, of course!).\r\n\r\nThis also means that our workaround for rewriting `@source`, the `postcss-fix-relative-paths` plugin, can now go away as a shared dependency between all of our clients. Note that we still have it for the PostCSS plugin only, where it's possible that users already have `postcss-import` running _before_ the `@tailwindcss/postcss` plugin.\r\n\r\nHere's an example of the changes to the dependencies for our Vite client ✨ :\r\n\r\n<img width=\"854\" alt=\"Screenshot 2024-09-19 at 16 59 45\" src=\"https://github.com/user-attachments/assets/ae1f9d5f-d93a-4de9-9244-61af3aff1237\">\r\n\r\n### Performance\r\n\r\nSince our Vite and CLI clients now no longer need to use `postcss` at all, we have also measured a significant improvement to the initial build times. For a small test setup that contains only a hand full of files (nothing super-complex), we measured an improvement in the **3.5x** range:\r\n\r\n<img width=\"1334\" alt=\"Screenshot 2024-09-19 at 14 52 49\" src=\"https://github.com/user-attachments/assets/06071fb0-7f2a-4de6-8ec8-f202d2cc78e5\">\r\n\r\nThe code for this is in the commit history if you want to reproduce the results. The test was based on the Vite client.\r\n\r\n### Caveats\r\n\r\nOne thing to note is that we previously relied on finding specific symbols in the input CSS to _bail out of Tailwind processing completely_. E.g. if a file does not contain a `@tailwind` or `@apply` directive, it can never be a Tailwind file. \r\n\r\nSince we no longer have a string representation of the flattened CSS file, we can no longer do this check. However, the current implementation was already inconsistent with differences on the allowed symbol list between our clients. Ideally, Tailwind CSS should figure out wether a CSS file is a Tailwind CSS file. This, however, is left as an improvement for a future API since it goes hand-in-hand with our planned API changes for the core `tailwindcss` package.\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14446","RelatedDescription":"Open PR \"Resolve `@import` in core\" (#14446)"},{"Id":"2527123313","IsPullRequest":true,"CreatedAt":"2024-09-17T13:09:09","Actor":"adamwathan","Number":"14427","RawContent":null,"Title":"Insert `@defaults` at start of stylesheet","State":"closed","Body":"Prior to this PR, we'd put all of the `@defaults` (the CSS variables and stuff) _after_ the `base` rules. This creates an issue when using `optimizeUniversalDefaults` with CSS that looks like this:\r\n\r\n```css\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n@layer base {\r\n  input {\r\n    @apply shadow;\r\n  }\r\n}\r\n```\r\n\r\n…because the default shadow stuff ends up after the base `input` rules, so the generated styles are like this:\r\n\r\n```css\r\ninput {\r\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\r\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),\r\n    0 1px 2px -1px var(--tw-shadow-color);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\r\n    var(--tw-shadow);\r\n}\r\n\r\ninput {\r\n  --tw-ring-offset-shadow: 0 0 #0000;\r\n  --tw-ring-shadow: 0 0 #0000;\r\n  --tw-shadow: 0 0 #0000;\r\n  --tw-shadow-colored: 0 0 #0000;\r\n}\r\n```\r\n\r\nThis means all of the actual shadow values for the input are reset and the shadow doesn't work.\r\n\r\nFixes https://github.com/tailwindlabs/tailwindcss/issues/14426.\r\n\r\nLots of failing tests right because this changes a ton of stuff, albeit in a totally inconsequential way. @thecrypticace if you could update these for me this week that would be a huge help, just banging this fix out quick while the kids are napping 😴","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14427","RelatedDescription":"Closed or merged PR \"Insert `@defaults` at start of stylesheet\" (#14427)"},{"Id":"2528890019","IsPullRequest":true,"CreatedAt":"2024-09-17T08:54:36","Actor":"philipp-spiess","Number":"14436","RawContent":null,"Title":"Resolve `borderRadius` when using dot notation inside the `theme()` function","State":"closed","Body":"Fixes an issue where `borderRadius` was not properly upgraded when using it in the `theme()` function like this:\r\n\r\n```\r\nrounded-[theme(borderRadius.lg)]\r\n```\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14436","RelatedDescription":"Closed or merged PR \"Resolve `borderRadius` when using dot notation inside the `theme()` function\" (#14436)"},{"Id":"2527746658","IsPullRequest":false,"CreatedAt":"2024-09-16T14:01:50","Actor":"SebastianMarzecCodewise","Number":"14429","RawContent":null,"Title":"max-breakpoint:class not working when raw screen setup present in tailwind config","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.10\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/rHaI81WQuv\r\n\r\n**Describe your issue**\r\n\r\nIn example above class `max-lg:hidden` is not working, but of course none of max:breakpoint classes works when I have custom media-query with `raw` setup in tailwind config.\r\nIf you'll remove this line (in tailwind play/config): \r\n`'shortdesktop': { 'raw': '(max-height: 950px) and (min-width: 768px)' },`\r\nit works again ","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14429","RelatedDescription":"Closed issue \"max-breakpoint:class not working when raw screen setup present in tailwind config\" (#14429)"},{"Id":"2528144141","IsPullRequest":true,"CreatedAt":"2024-09-16T11:06:31","Actor":"RobinMalfait","Number":"14433","RawContent":null,"Title":"Add initial codemod tooling","State":"closed","Body":"This PR adds some initial tooling for codemods. We are currently only interested in migrating CSS files, so we will be using PostCSS under the hood to do this. This PR also implements the \"migrate `@apply`\" codemod from #14412.\n\nThe usage will look like this:\n\n```sh\nnpx @tailwindcss/codemods\n```\n\nYou can pass in CSS files to transform as arguments:\n\n```sh\nnpx @tailwindcss/codemods src/**/*.css\n```\n\nBut, if none are provided, it will search for CSS files in the current directory and its subdirectories.\n\n```\n≈ tailwindcss v4.0.0-alpha.24\n\n│ No files provided. Searching for CSS files in the current\n│ directory and its subdirectories…\n\n│ Migration complete. Verify the changes and commit them to\n│ your repository.\n```\n\nThe tooling also requires the Git repository to be in a clean state. This is a common convention to ensure that everything is undo-able. If we detect that the git repository is dirty, we will abort the migration.\n\n```\n≈ tailwindcss v4.0.0-alpha.24\n\n│ Git directory is not clean. Please stash or commit your\n│ changes before migrating.\n\n│ You may use the `--force` flag to override this safety\n│ check.\n```\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14433","RelatedDescription":"Closed or merged PR \"Add initial codemod tooling\" (#14433)"},{"Id":"2528141894","IsPullRequest":true,"CreatedAt":"2024-09-16T11:01:17","Actor":"RobinMalfait","Number":"14432","RawContent":null,"Title":"Add initial codemod tooling","State":"closed","Body":"This PR adds some initial tooling for codemods. We are currently only interested\nin migrating CSS files, so we will be using PostCSS under the hood to do this.\nThis PR also implements the \"migrate `@apply`\" codemod from #14412.\n\nThe usage will look like this:\n\n```sh\nnpx @tailwindcss/codemods\n```\n\nYou can pass in CSS files to transform as arguments:\n\n```sh\nnpx @tailwindcss/codemods src/**/*.css\n```\n\nBut, if none are provided, it will search for CSS files in the current directory and its subdirectories.\n\n```\n≈ tailwindcss v4.0.0-alpha.24\n\n│ No files provided. Searching for CSS files in the current\n│ directory and its subdirectories…\n\n│ Migration complete. Verify the changes and commit them to\n│ your repository.\n```\n\nThe tooling also requires the Git repository to be in a clean state. This is a common convention to ensure that everything is undo-able. If we detect that the git repository is dirty, we will abort the migration.\n\n```\n≈ tailwindcss v4.0.0-alpha.24\n\n│ Git directory is not clean. Please stash or commit your\n│ changes before migrating.\n\n│ You may use the `--force` flag to override this safety\n│ check.\n```\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14432","RelatedDescription":"Closed or merged PR \"Add initial codemod tooling\" (#14432)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-09-20T03:30:25.5067951Z","RunDurationInMilliseconds":552}