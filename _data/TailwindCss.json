{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2590136238","IsPullRequest":true,"CreatedAt":"2024-10-15T23:13:30","Actor":"depfu[bot]","Number":"14680","RawContent":null,"Title":"Update typescript 5.5.4 → 5.6.3 (minor)","State":"open","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ typescript (5.5.4 → 5.6.3) · [Repo](https://github.com/Microsoft/TypeScript)\n\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/microsoft/TypeScript/releases/tag/v5.6.3\">5.6.3</a></h4>\n\n<blockquote><p dir=\"auto\">For release notes, check out the <a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-5-6/\">release announcement</a>.</p>\n<p dir=\"auto\">For the complete list of fixed issues, check out the</p>\n<ul dir=\"auto\">\n<li>\n<a href=\"https://bounce.depfu.com/github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&amp;q=milestone%3A%22TypeScript+5.6.0%22+is%3Aclosed+\">fixed issues query for Typescript 5.6.0 (Beta)</a>.</li>\n<li>\n<a href=\"https://bounce.depfu.com/github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&amp;q=milestone%3A%22TypeScript+5.6.1%22+is%3Aclosed+\">fixed issues query for Typescript 5.6.1 (RC)</a>.</li>\n<li>\n<a href=\"https://bounce.depfu.com/github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&amp;q=milestone%3A%22TypeScript+5.6.2%22+is%3Aclosed+\">fixed issues query for Typescript 5.6.2 (Stable)</a>.</li>\n<li>\n<a href=\"https://bounce.depfu.com/github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&amp;q=milestone%3A%22TypeScript+5.6.3%22+is%3Aclosed+\">fixed issues query for Typescript 5.6.3 (Stable)</a>.</li>\n</ul>\n<p dir=\"auto\">Downloads are available on:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://www.npmjs.com/package/typescript\">npm</a></li>\n<li><a href=\"https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild\">NuGet package</a></li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/microsoft/TypeScript/releases/tag/v5.6.2\">5.6.2</a></h4>\n\n<blockquote><p dir=\"auto\">For release notes, check out the <a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-5-6/\">release announcement</a>.</p>\n<p dir=\"auto\">For the complete list of fixed issues, check out the</p>\n<ul dir=\"auto\">\n<li>\n<a href=\"https://bounce.depfu.com/github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&amp;q=milestone%3A%22TypeScript+5.6.0%22+is%3Aclosed+\">fixed issues query for Typescript 5.6.0 (Beta)</a>.</li>\n<li>\n<a href=\"https://bounce.depfu.com/github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&amp;q=milestone%3A%22TypeScript+5.6.1%22+is%3Aclosed+\">fixed issues query for Typescript 5.6.1 (RC)</a>.</li>\n<li>\n<a href=\"https://bounce.depfu.com/github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&amp;q=milestone%3A%22TypeScript+5.6.2%22+is%3Aclosed+\">fixed issues query for Typescript 5.6.2 (Stable)</a>.</li>\n</ul>\n<p dir=\"auto\">Downloads are available on:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://www.npmjs.com/package/typescript\">npm</a></li>\n<li><a href=\"https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild\">NuGet package</a></li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/typescript/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/Microsoft/TypeScript/compare/c8a7d589e647e19c94150d9892909f3aa93e48eb...d48a5cf89a62a62d6c6ed53ffa18f070d9458b85\">See the full diff on Github</a>. The new version differs by more commits than we can show here.</p>\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14680","RelatedDescription":"Open PR \"Update typescript 5.5.4 → 5.6.3 (minor)\" (#14680)"},{"Id":"2585525819","IsPullRequest":false,"CreatedAt":"2024-10-15T21:32:27","Actor":"neochief","Number":"14660","RawContent":null,"Title":"Using tailwind classes in your own css style selectors breaks @keyframe that include @apply","State":"closed","Body":"Hi!\r\n\r\nWhen you override the tailwind classes, as shown in the bottom, AND have these classes as part of the @apply in the keyframes, the resulting code after the build is broken CSS.\r\n\r\n\r\nSOURCE:\r\n```\r\n.some-custom-class .text-white {\r\n    /* ... */\r\n}\r\n\r\n@keyframes text-color {\r\n    from {\r\n        @apply text-black;\r\n    }\r\n    to {\r\n        @apply text-white;\r\n    }\r\n}\r\n```\r\n\r\nBUILT:\r\n```\r\n@keyframes text-color {\r\n    from {\r\n        --tw-text-opacity: 1;\r\n        color: rgb(0 0 0 / var(--tw-text-opacity));\r\n    }\r\n    to {\r\n        --tw-text-opacity: 1;\r\n        color: rgb(255 255 255 / var(--tw-text-opacity));\r\n    }\r\n\r\n.some-custom-class to {\r\n}\r\n\r\n}\r\n```\r\n\r\nAs you see, the `.some-custom-class to { ... }` is inserted inside the @keyframes definition, which is unexpected.\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14660","RelatedDescription":"Closed issue \"Using tailwind classes in your own css style selectors breaks @keyframe that include @apply\" (#14660)"},{"Id":"2589333983","IsPullRequest":true,"CreatedAt":"2024-10-15T16:47:50","Actor":"thecrypticace","Number":"14679","RawContent":null,"Title":"Speed up template migrations","State":"open","Body":"This PR does two things:\r\n- Computes UTF-16 string positions in Rust rather than in JS — eliminating a significant number of traversals of the input string\r\n- Applies replacements to the content in ascending order so we only ever move forward through the source string — this lets v8 optimize string concatenation","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14679","RelatedDescription":"Open PR \"Speed up template migrations\" (#14679)"},{"Id":"2589161826","IsPullRequest":true,"CreatedAt":"2024-10-15T15:47:25","Actor":"philipp-spiess","Number":"14676","RawContent":null,"Title":"Remove .gitattributes file","State":"closed","Body":"I added the `.gitattributes` a while back because I thought it would help us make it simpler when rebasing changes to the `CHANGELOG.md` file. However, I don't think this is actually true. Now, instead of a merge conflict, the rebase just ends up duplicating a lot of lines which we only see when we review the PR on GitHub later which is really annoying.\r\n\r\nSo, for now, let's remove it again. Ideally we can have a better merge strategy here (or potentially other tools).","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14676","RelatedDescription":"Closed or merged PR \"Remove .gitattributes file\" (#14676)"},{"Id":"2589042252","IsPullRequest":true,"CreatedAt":"2024-10-15T15:36:05","Actor":"depfu[bot]","Number":"14673","RawContent":null,"Title":"Update @playwright/test 1.47.1 → 1.48.0 (minor)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ @​playwright/test (1.47.1 → 1.48.0) · [Repo](https://github.com/Microsoft/playwright)\n\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/microsoft/playwright/releases/tag/v1.48.0\">1.48.0</a></h4>\n\n<blockquote><h2 dir=\"auto\">WebSocket routing</h2>\n<p dir=\"auto\">New methods <a href=\"https://playwright.dev/docs/api/class-page#page-route-web-socket\">page.routeWebSocket()</a> and <a href=\"https://playwright.dev/docs/api/class-browsercontext#browser-context-route-web-socket\">browserContext.routeWebSocket()</a> allow to intercept, modify and mock WebSocket connections initiated in the page. Below is a simple example that mocks WebSocket communication by responding to a <code class=\"notranslate\">\"request\"</code> with a <code class=\"notranslate\">\"response\"</code>.</p>\n<div class=\"highlight highlight-source-js\" dir=\"auto\"><pre class=\"notranslate\"><span class=\"pl-k\">await</span> <span class=\"pl-s1\">page</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">routeWebSocket</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'/ws'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">ws</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-s1\">ws</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">onMessage</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">message</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">message</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'request'</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-s1\">ws</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">send</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'response'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">See <a href=\"https://playwright.dev/docs/api/class-websocketroute\">WebSocketRoute</a> for more details.</p>\n<h2 dir=\"auto\">UI updates</h2>\n<ul dir=\"auto\">\n<li>New \"copy\" buttons for annotations and test location in the HTML report.</li>\n<li>Route method calls like <a href=\"https://playwright.dev/docs/api/class-route#route-fulfill\">route.fulfill()</a> are not shown in the report and trace viewer anymore. You can see which network requests were routed in the network tab instead.</li>\n<li>New \"Copy as cURL\" and \"Copy as fetch\" buttons for requests in the network tab.</li>\n</ul>\n<h2 dir=\"auto\">Miscellaneous</h2>\n<ul dir=\"auto\">\n<li>Option <a href=\"https://playwright.dev/docs/api/class-apirequestcontext#api-request-context-fetch-option-form\"><code class=\"notranslate\">form</code></a> and similar ones now accept <a href=\"https://playwright.dev/docs/api/class-formdata\">FormData</a>.</li>\n<li>New method <a href=\"https://playwright.dev/docs/api/class-page#page-request-gc\">page.requestGC()</a> may help detect memory leaks.</li>\n<li>New option <a href=\"https://playwright.dev/docs/api/class-test#test-step-option-location\"><code class=\"notranslate\">location</code></a> to pass custom step location.</li>\n<li>Requests made by <a href=\"https://playwright.dev/docs/api/class-apirequestcontext\">APIRequestContext</a> now record detailed timing and security information in the HAR.</li>\n</ul>\n<h2 dir=\"auto\">Browser Versions</h2>\n<ul dir=\"auto\">\n<li>Chromium 130.0.6723.19</li>\n<li>Mozilla Firefox 130.0</li>\n<li>WebKit 18.0</li>\n</ul>\n<p dir=\"auto\">This version was also tested against the following stable channels:</p>\n<ul dir=\"auto\">\n<li>Google Chrome 129</li>\n<li>Microsoft Edge 129</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/microsoft/playwright/releases/tag/v1.47.2\">1.47.2</a></h4>\n\n<blockquote><h3 dir=\"auto\">Highlights</h3>\n<p dir=\"auto\"><a href=\"https://bounce.depfu.com/github.com/microsoft/playwright/pull/32699\">#32699</a> [REGRESSION]: fix(codegen): use content_frame property in python/.NET<br>\n<a href=\"https://bounce.depfu.com/github.com/microsoft/playwright/issues/32706\">#32706</a> [REGRESSION]: page.pause() does not pause test timeout after 1.47<br>\n<a href=\"https://bounce.depfu.com/github.com/microsoft/playwright/pull/32661\">#32661</a> - fix(trace-viewer): time delta between local and remote actions</p>\n<h2 dir=\"auto\">Browser Versions</h2>\n<ul dir=\"auto\">\n<li>Chromium 129.0.6668.29</li>\n<li>Mozilla Firefox 130.0</li>\n<li>WebKit 18.0</li>\n</ul>\n<p dir=\"auto\">This version was also tested against the following stable channels:</p>\n<ul dir=\"auto\">\n<li>Google Chrome 128</li>\n<li>Microsoft Edge 128</li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/@playwright%2Ftest/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/Microsoft/playwright/compare/3d2ffd0fe97f23f480092054da5928539a3c5beb...0cdbb11068f86671c05d57391ac3701610f853df\">See the full diff on Github</a>. The new version differs by more commits than we can show here.</p>\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14673","RelatedDescription":"Closed or merged PR \"Update @playwright/test 1.47.1 → 1.48.0 (minor)\" (#14673)"},{"Id":"2589134480","IsPullRequest":true,"CreatedAt":"2024-10-15T15:26:41","Actor":"philipp-spiess","Number":"14675","RawContent":null,"Title":"Resolve theme keys when migrating JS config to CSS","State":"open","Body":"With the changes in #14672, it now becomes trivial to actually resolve the config (while still retaining the reset behavior). This means that we can now convert JS configs that use _functions_, e.g.:\r\n\r\n```ts\r\n import { type Config } from 'tailwindcss'\r\n\r\nexport default {\r\n  theme: {\r\n    extend: {\r\n      colors: ({ colors }) => ({\r\n        gray: colors.neutral,\r\n      }),\r\n    },\r\n  },\r\n} satisfies Config\r\n```\r\n\r\nThis becomes:\r\n\r\n```css\r\n@import 'tailwindcss';\r\n\r\n@theme {\r\n  --color-gray-50: #fafafa;\r\n  --color-gray-100: #f5f5f5;\r\n  --color-gray-200: #e5e5e5;\r\n  --color-gray-300: #d4d4d4;\r\n  --color-gray-400: #a3a3a3;\r\n  --color-gray-500: #737373;\r\n  --color-gray-600: #525252;\r\n  --color-gray-700: #404040;\r\n  --color-gray-800: #262626;\r\n  --color-gray-900: #171717;\r\n  --color-gray-950: #0a0a0a;\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14675","RelatedDescription":"Open PR \"Resolve theme keys when migrating JS config to CSS\" (#14675)"},{"Id":"2588654198","IsPullRequest":true,"CreatedAt":"2024-10-15T12:36:39","Actor":"philipp-spiess","Number":"14672","RawContent":null,"Title":"Reset `default` @theme values for non `extend` JS theme config","State":"open","Body":"Imagine the following setup:\r\n\r\n```css\r\n/* src/input.css */\r\n@import \"tailwindcss\";\r\n@config \"../tailwind.config.ts\";\r\n@theme {\r\n  --color-red-500: #ef4444;\r\n}\r\n```\r\n\r\n```ts\r\n/* tailwind.config.ts */\r\nexport default {\r\n  theme: {\r\n    colors: {\r\n      red: {\r\n        600: '#dc2626'\r\n      } \r\n    },\r\n    extend: {\r\n      colors: {\r\n        400: '#f87171'\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nSince the theme object in the JS config contains `colors` in the non-`extends` block, you would expect this to _not pull in all the default colors imported via `@import \"tailwindcss\";`_. This, however, wasn't the case right now since all theme options were purely _additive_ to the CSS.\r\n\r\nThis PR makes it so that non-`extend` theme keys _overwrite default CSS theme values_. The emphasis is on `default` here since you still want to be able to overwrite your options via `@theme {}` in user space.\r\n\r\nThis now generates the same CSS that our upgrade codemods would also generate as this would apply the new CSS right after the `@import \"tailwindcss\";` rule resulting in:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n@theme {\r\n  --color-*: initial;\r\n  --color-red-400: #f87171;\r\n  --color-red-600: #dc2626;\r\n}\r\n@theme {\r\n  --color-red-500: #ef4444;\r\n}\r\n```\r\n\r\n## Keyframes\r\n\r\nThis PR also adds a new core API to unset keyframes the same way. We previously had no option of doing that but while working on the above codemods we noticed that keyframes should behave the same way:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n@theme {\r\n  --keyframes-*: initial;\r\n  @keyframes spin {\r\n    to {\r\n      transform: rotate(361deg);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nTo do this, the keyframes bookeeping was moved from the main Tailwind CSS v4 file into the `Theme` class. \r\n\r\n\r\n_I’m not sure super of the API yet but we would need a way for the codemods to behave the same as out interop layer here. Option B is that we don't reset keyframes the same way we reset other theme variables_.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14672","RelatedDescription":"Open PR \"Reset `default` @theme values for non `extend` JS theme config\" (#14672)"},{"Id":"2588206036","IsPullRequest":true,"CreatedAt":"2024-10-15T10:28:34","Actor":"philipp-spiess","Number":"14671","RawContent":null,"Title":"Release v4.0.0-alpha.27","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14671","RelatedDescription":"Closed or merged PR \"Release v4.0.0-alpha.27\" (#14671)"},{"Id":"2588145885","IsPullRequest":true,"CreatedAt":"2024-10-15T09:45:03","Actor":"RobinMalfait","Number":"14669","RawContent":null,"Title":"Migrate arbitrary values to bare values","State":"closed","Body":"This PR adds a codemod that can convert arbitrary values to the cleaner bare values if we can.\n\nFor example, some classes use arbitrary values such as `col-start-[16]`, but in v4 we have bare values for some plugins that don't really need to adhere to your design system.\n\nIn this case, we can convert `col-start-[16]` to just `col-start-16`.\n\nAnother use case is for utilities that use fractions. For example the `aspect-*` plugin.\n\nA custom aspect ratio such as `aspect-[16/9]` can be converted to `aspect-16/9`.\n\nThere are some rules attached to this migration:\n\n1. We can only migrate arbitrary values that is a single positive integer, or an arbitrary value that is a fraction where the numerator and denominator are both positive integers.\n2. We make sure that some CSS can be generated once its converted to a bare value.\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14669","RelatedDescription":"Closed or merged PR \"Migrate arbitrary values to bare values\" (#14669)"},{"Id":"2588193711","IsPullRequest":true,"CreatedAt":"2024-10-15T09:39:05","Actor":"RobinMalfait","Number":"14670","RawContent":null,"Title":"Ensure `font-stretch` utilities only accepts positive integer bare values","State":"closed","Body":"This PR fixes an issue where bare values in the `font-stretch` utility such as `font-stretch-50.5%` compiled. But for bare values, we want these values to be positive integers only so that we don't have too many special characters.\n\nIf you want to use `50.5%`, you can still use `font-stretch-[50.5%]` as a utility.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14670","RelatedDescription":"Closed or merged PR \"Ensure `font-stretch` utilities only accepts positive integer bare values\" (#14670)"},{"Id":"2586428312","IsPullRequest":true,"CreatedAt":"2024-10-15T09:21:19","Actor":"philipp-spiess","Number":"14666","RawContent":null,"Title":"Migrate keyframes from JS to CSS","State":"closed","Body":"This PR adds support for rewriting JS theme config `keyframes` to CSS as part of the JS config to CSS migration.\r\n\r\nExample:\r\n\r\n```ts\r\nimport { type Config } from 'tailwindcss'\r\n\r\nmodule.exports = {\r\n  theme: {\r\n    extend: {\r\n      keyframes: {\r\n        'spin-clockwise': {\r\n          '0%': { transform: 'rotate(0deg)' },\r\n          '100%': { transform: 'rotate(360deg)' },\r\n        },\r\n        'spin-counterclockwise': {\r\n          '0%': { transform: 'rotate(0deg)' },\r\n          '100%': { transform: 'rotate(-360deg)' },\r\n        },\r\n      },\r\n      animation: {\r\n        'spin-clockwise': 'spin-clockwise 1s linear infinite',\r\n        'spin-counterclockwise': 'spin-counterclockwise 1s linear infinite',\r\n      },\r\n    },\r\n  },\r\n} satisfies Config\r\n```\r\n\r\nWill be printed as:\r\n\r\n```css\r\n@theme {\r\n  --animate-spin-clockwise: spin-clockwise 1s linear infinite;\r\n  --animate-spin-counterclockwise: spin-counterclockwise 1s linear infinite;\r\n\r\n  @keyframes spin-clockwise {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n  @keyframes spin-counterclockwise {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(-360deg);\r\n    }\r\n  }\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14666","RelatedDescription":"Closed or merged PR \"Migrate keyframes from JS to CSS\" (#14666)"},{"Id":"2587769799","IsPullRequest":true,"CreatedAt":"2024-10-15T06:27:12","Actor":"mrmckeb","Number":"14668","RawContent":null,"Title":"Fix Plugin type issue","State":"open","Body":"This is a quick fix to an issue where the types for PluginsConfig don't match those used in plugins like [`@tailwindcss/container-queries`](https://github.com/tailwindlabs/tailwindcss-container-queries).\r\n\r\nThis was caught by TypeScript with [`exactOptionalPropertyTypes`]( https://www.typescriptlang.org/tsconfig/exactOptionalPropertyTypes.html) enabled, where TypeScript checks if `undefined` can be supplied as a value for optional types.\r\n\r\nI felt that it made more sense to fix this here, as it makes the core types more flexible, as opposed to each plugin needing to fix this when/if they hit it.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14668","RelatedDescription":"Open PR \"Fix Plugin type issue\" (#14668)"},{"Id":"2586583511","IsPullRequest":true,"CreatedAt":"2024-10-14T16:56:38","Actor":"thecrypticace","Number":"14667","RawContent":null,"Title":"Support complex compound variants in `group-*`, `peer-*`, `has-*`, and `not-*`","State":"open","Body":"This PR adds support for more complex variant definitions when using the four compound variants: `group-*`, `peer-*`, `has-*`, and `not-*`. Before this PR these variants were limited in what compound variants they supported — often limited to single rules with single selectors.\r\n\r\nNow, all of these variants support (nearly) the full range of all variant definitions.\r\n\r\nExamples TBD — opening to get some eyes on stuff\r\n\r\nTODOs:\r\n- [ ] Bail when there's an at rule that is not invertible","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14667","RelatedDescription":"Open PR \"Support complex compound variants in `group-*`, `peer-*`, `has-*`, and `not-*`\" (#14667)"},{"Id":"2581247449","IsPullRequest":true,"CreatedAt":"2024-10-14T15:45:36","Actor":"philipp-spiess","Number":"14648","RawContent":null,"Title":"Detect and migrate static plugin usages","State":"closed","Body":"This PR builds on top of the new [JS config to CSS migration](https://github.com/tailwindlabs/tailwindcss/pull/14651) and extends it to support migrating _static_ plugins.\r\n\r\nWhat are _static_ plugins you might ask? Static plugins are plugins where we can statically determine that these are coming from a different file (so there is nothing inside the JS config that creates them). An example for this is this config file:\r\n\r\n```js\r\nimport typographyPlugin from '@tailwindcss/typography'\r\nimport { type Config } from 'tailwindcss'\r\n\r\nexport default {\r\n  content: ['./src/**/*.{js,jsx,ts,tsx}'],\r\n  darkMode: 'selector',\r\n  plugins: [typographyPlugin],\r\n} satisfies Config\r\n```\r\n\r\nHere, the `plugins` array only has one element and it is a static import from the `@tailwindcss/typography` module. In this PR we attempt to parse the config file via Tree-sitter to extract the following information from this file:\r\n\r\n- What are the contents of the `plugins` array\r\n- What are statically imported resources from the file\r\n\r\nWe then check if _all_ entries in the `plugins` array are either static resources or _strings_ (something I saw working in some tests but I’m not sure it still does). We migrate the JS config file to CSS if all plugins are static and we can migrate them to CSS `@plugin` calls.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14648","RelatedDescription":"Closed or merged PR \"Detect and migrate static plugin usages\" (#14648)"},{"Id":"2586269471","IsPullRequest":true,"CreatedAt":"2024-10-14T14:46:07","Actor":"RobinMalfait","Number":"14664","RawContent":null,"Title":"Migrate `theme(…)` calls to `var(…)` or the modern `theme(…)` syntax","State":"open","Body":"This PR adds a codemod to convert `theme(…)` calls to `var(…)` calls. If we can't safely do this, then we try to convert the `theme(…)` syntax (dot notation) to the modern `theme(…)` syntax (with CSS variable-like syntax).\n\n### Let's look at some examples:\n\n**Simple example:**\n\nInput:\n```html\n<div class=\"bg-[theme(colors.red.500)]\"></div>\n```\n\nOutput:\n```html\n<div class=\"bg-[var(--color-red-500)]\"></div>\n```\n\n---\n\n**With fallback:**\n\nInput:\n```html\n<div class=\"bg-[theme(colors.red.500,theme(colors.blue.500))]\"></div>\n```\n\nOutput:\n```html\n<div class=\"bg-[var(--color-red-500,var(--color-blue-500))]\"></div>\n```\n\n---\n\n**With modifiers:**\n\nInput:\n```html\n<div class=\"bg-[theme(colors.red.500/75%)]\"></div>\n```\n\nOutput:\n```html\n<div class=\"bg-[var(--color-red-500)]/75\"></div>\n```\n\nWe can special case this, because if you are using that modifier syntax we _assume_ it's being used in a `theme(…)` call referencing a color. This means that we can also convert it to a modifier on the actual candidate.\n\n---\n\n**With modifier, if a modifier is already present:**\n\nInput:\n```html\n<div class=\"bg-[theme(colors.red.500/75%)]/50\"></div>\n```\n\nOutput:\n```html\n<div class=\"bg-[theme(--color-red-500/75%)]/50\"></div>\n```\n\nIn this case we can't use the `var(…)` syntax because that requires us to move the opacity modifier to the candidate itself. In this case we could use math to figure out the expected modifier, but that might be too confusing. Instead, we convert to the modern `theme(…)` syntax.\n\n---\n\n**Multiple `theme(…)` calls with modifiers:**\n\nInput:\n```html\n<div class=\"bg-[theme(colors.red.500/75%,theme(colors.blue.500/50%))]\"></div>\n```\n\nOutput:\n```html\n<div class=\"bg-[theme(--color-red-500/75%,theme(--color-blue-500/50%))]\"></div>\n```\n\nIn this case we can't convert to `var(…)` syntax because then we lose the opacity modifier. We also can't move the opacity modifier to the candidate itself e.g.: `/50` because we have 2 different variables to worry about.\n\nIn this situation we convert to the modern `theme(…)` syntax itself.\n\n---\n\n**Inside variants:**\n\nInput:\n```html\n<div class=\"max-[theme(spacing.20)]:flex\"></div>\n```\n\nOutput:\n```html\n<div class=\"max-[theme(--spacing-20)]:flex\"></div>\n```\n\nUnfortunately we can't convert to `var(…)` syntax reliably because in some cases (like the one above) the value will be used inside of an `@media (…)` query and CSS doesn't support that at the time of writing this PR.\n\nSo to be safe, we will not try to convert `theme(…)` to `var(…)` in variants, but we will only upgrade the `theme(…)` call itself to modern syntax.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14664","RelatedDescription":"Open PR \"Migrate `theme(…)` calls to `var(…)` or the modern `theme(…)` syntax\" (#14664)"},{"Id":"2581598633","IsPullRequest":true,"CreatedAt":"2024-10-14T14:33:15","Actor":"philipp-spiess","Number":"14650","RawContent":null,"Title":"Address follow-up work for #14639","State":"closed","Body":"This PR adds a few more test cases to #14639 and updates the documentation.\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14650","RelatedDescription":"Closed or merged PR \"Address follow-up work for #14639\" (#14650)"},{"Id":"2586081822","IsPullRequest":true,"CreatedAt":"2024-10-14T13:46:12","Actor":"philipp-spiess","Number":"14662","RawContent":null,"Title":"Revert \"Warn on use of plugin parameters as function\"","State":"closed","Body":"Reverts tailwindlabs/tailwindcss#14661","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14662","RelatedDescription":"Closed or merged PR \"Revert \"Warn on use of plugin parameters as function\"\" (#14662)"},{"Id":"2582124668","IsPullRequest":true,"CreatedAt":"2024-10-14T12:08:41","Actor":"RobinMalfait","Number":"14653","RawContent":null,"Title":"Fix `var(…)` as the opacity value inside the `theme(…)` function","State":"closed","Body":"Inside the `theme(…)` function, we can use the `/` character for applying an opacity. For example `theme(colors.red.500 / 50%)` will apply a 50% opacity to the `colors.red.500` value.\n\nHowever, if you used a variable instead of the hardcoded `50%` value, then this was not parsed correctly. E.g.: `theme(colors.red.500 / var(--opacity))`\n\n_If_ we have this exact syntax (with the spaces), then it parses, but some information is lost:\n\n```html\n<div class=\"bg-[theme(colors.red.500_/_var(--opacity))]\"></div>\n```\n\nResults in:\n```css\n.bg-\\[theme\\(colors\\.red\\.500_\\/_var\\(--opacity\\)\\)\\] {\n  background-color: color-mix(in srgb, #ef4444 calc(var * 100%), transparent);\n}\n```\nNotice that the `var(--opacity)` is just parsed as `var`, and the `--opacity` is lost.\n\nAdditionally, if we drop the spaces, then it doesn't parse at all:\n\n```html\n<div class=\"bg-[theme(colors.red.500/var(--opacity))]\"></div>\n```\n\nResults in:\n```css\n```\n\nThis means that we have to handle 2 issues to make this work:\n1. We have to properly handle the `/` character as a proper separator.\n2. If we have sub-functions, we have to make sure to print them in full (instead of only the very first node (`var` in this case)).\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14653","RelatedDescription":"Closed or merged PR \"Fix `var(…)` as the opacity value inside the `theme(…)` function\" (#14653)"},{"Id":"2585664859","IsPullRequest":true,"CreatedAt":"2024-10-14T11:57:03","Actor":"philipp-spiess","Number":"14661","RawContent":null,"Title":"Warn on use of plugin parameters as function","State":"closed","Body":"Quick follow-up to #14659 base don @thecrypticace's idea:\r\n\r\n- This behavior is no longer added to the types of the Plugin API to be consistent with v3\r\n- When the plugin argument is used as a function, we now warn the first time","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14661","RelatedDescription":"Closed or merged PR \"Warn on use of plugin parameters as function\" (#14661)"},{"Id":"2585433486","IsPullRequest":true,"CreatedAt":"2024-10-14T10:29:12","Actor":"philipp-spiess","Number":"14659","RawContent":null,"Title":"Callback in theme properties is also the theme function","State":"closed","Body":"Something we noticed while testing the codemods on one of our codebases is that the callback passed to the `theme` function properties doesn't only expose some properties like `colors`, but it's also a function itself.\r\n\r\n```ts\r\n/** @type {import('tailwindcss').Config} */\r\nexport default {\r\n  theme: {\r\n    extend: {\r\n      colors: (theme) => {\r\n        // The `theme` is a theme function _and_ the object...\r\n        console.log(theme('spacing.2'), theme.colors.red['500'])\r\n        return {}\r\n      },\r\n    },\r\n  },\r\n  plugins: [],\r\n}\r\n```\r\n\r\nE.g.: https://play.tailwindcss.com/eV7Jgv17X1?file=config\r\n\r\n---\r\nh/t to @RobinMalfait for the issue description","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14659","RelatedDescription":"Closed or merged PR \"Callback in theme properties is also the theme function\" (#14659)"},{"Id":"2583266181","IsPullRequest":false,"CreatedAt":"2024-10-12T19:13:44","Actor":"ktmn","Number":"14654","RawContent":null,"Title":"[v4] @apply doesn't combine rules under a single selector","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\nv4.0.0-alpha.26\r\n\r\n**Reproduction URL**\r\nhttps://play.tailwindcss.com/UExmfuz56x?file=css\r\n\r\n**Describe your issue**\r\nIs it intended that \r\n\r\n```css\r\n@layer utilities {\r\n  .parent {\r\n    @apply m-4 p-4 [&>.child]:m-4 [&>.child]:p-4;\r\n  }\r\n}\r\n```\r\n\r\nproduces:\r\n\r\n```css\r\n.parent {\r\n  margin: var(--spacing-4, 1rem);\r\n  padding: var(--spacing-4, 1rem);\r\n  &>.child {\r\n    margin: var(--spacing-4, 1rem);\r\n  }\r\n  &>.child {\r\n    padding: var(--spacing-4, 1rem);\r\n  }\r\n}\r\n```\r\n\r\nrather than:\r\n\r\n```css\r\n.parent {\r\n  margin: var(--spacing-4, 1rem);\r\n  padding: var(--spacing-4, 1rem);\r\n  &>.child {\r\n    margin: var(--spacing-4, 1rem);\r\n    padding: var(--spacing-4, 1rem);\r\n  }\r\n}\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14654","RelatedDescription":"Closed issue \"[v4] @apply doesn't combine rules under a single selector\" (#14654)"},{"Id":"2583330985","IsPullRequest":false,"CreatedAt":"2024-10-12T19:11:13","Actor":"heychazza","Number":"14655","RawContent":null,"Title":"[v4] Normal font weight is not respected","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n^4.0.0-alpha.26\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nVite (v5.4.8) with React (v18.3.1)\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv21.7.3\r\n\r\n**What browser are you using?**\r\n\r\nSafari\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/jFiizARA8r\r\n\r\n**Describe your issue**\r\n\r\nWhen setting a font weight via the new CSS variable syntax:\r\n```css\r\n@theme {\r\n  --font-weight-normal: 375;\r\n}\r\n```\r\n\r\nIt's not set globally by default for all html tags, and it also shows as \"NaN\" within Safari dev tools. I have tried changing it to `'375'` and the same happens.\r\n\r\n![CleanShot 2024-10-12 at 7  46 32@2x](https://github.com/user-attachments/assets/93217f4b-b7f4-4e95-8e6c-19bfe741cf13)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14655","RelatedDescription":"Closed issue \"[v4] Normal font weight is not respected\" (#14655)"},{"Id":"2581608165","IsPullRequest":true,"CreatedAt":"2024-10-11T16:07:59","Actor":"philipp-spiess","Number":"14651","RawContent":null,"Title":"Support the `color` property in JS theme configuration callbacks","State":"closed","Body":"While working on some fixes for #14639 I noticed that the following v3 configuration file would not load properly in v4:\r\n\r\n```ts\r\nimport { type Config } from 'tailwindcss'\r\n\r\nexport default {\r\n  content: ['./src/**/*.{js,jsx,ts,tsx}'],\r\n  theme: {\r\n    extend: {\r\n      colors: ({ colors }) => ({\r\n        gray: colors.neutral,\r\n      }),\r\n  },\r\n} satisfies Config\r\n```\r\n\r\nThe reason for this is that we did not pass the `colors` property to the callback function. Since we have colors available now, we can easily add it.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14651","RelatedDescription":"Closed or merged PR \"Support the `color` property in JS theme configuration callbacks\" (#14651)"},{"Id":"2579863982","IsPullRequest":true,"CreatedAt":"2024-10-11T14:41:38","Actor":"RobinMalfait","Number":"14644","RawContent":null,"Title":"Migrate `aria-*`, `data-*` and `supports-*` variants from arbitrary values to bare values","State":"closed","Body":"This PR adds a new codemod that can migrate `data-*` and `aria-*` variants using arbitrary values to bare values.\r\n\r\nIn Tailwind CSS v3, if you want to conditionally apply a class using data attributes, then you can write `data-[selected]:flex`. This requires the DOM element to have a `data-selected=\"\"` attribute. In Tailwind CSS v4 we can simplify this, by dropping the brackets and by using `data-selected:flex` directly.\r\n\r\nThis migration operates on the internal AST, which means that this also just works for compound variants such as `group-has-data-[selected]:flex` (which turns into `group-has-data-selected:flex`).\r\n\r\nAdditionally, this codemod is also applicable to `aria-*` variants. The biggest difference is that in v4 `aria-selected` maps to an attribute of `aria-selected=\"true\"`. This means that we can only migrate `aria=[selected=\"true\"]:flex` to `aria-selected:flex`.\r\n\r\nLast but not least, we also migrate `supports-[gap]` to `supports-gap` if the passed in value looks like a property. If not, e.g.: `supports-[display:grid]` then it stays as-is.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14644","RelatedDescription":"Closed or merged PR \"Migrate `aria-*`, `data-*` and `supports-*` variants from arbitrary values to bare values\" (#14644)"},{"Id":"2581527787","IsPullRequest":true,"CreatedAt":"2024-10-11T14:38:46","Actor":"adamwathan","Number":"14649","RawContent":null,"Title":"Tweak changelog entries","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14649","RelatedDescription":"Closed or merged PR \"Tweak changelog entries\" (#14649)"},{"Id":"2579664872","IsPullRequest":true,"CreatedAt":"2024-10-11T14:24:54","Actor":"thecrypticace","Number":"14642","RawContent":null,"Title":"Convert to/from v3 theme keys in configs and plugins","State":"closed","Body":"A few theme keys have changed in v4 relative to v3:\r\n- `screens` -> `--breakpoint-*`\r\n- `colors` -> `--color-*`\r\n- `animation` -> `--animate-*`\r\n- `borderRadius` -> `--radius-*`\r\n- `boxShadow` -> `--shadow-*`\r\n\r\nWhen using the `theme()` function we wouldn't pick up values from the CSS for some of these. Likewise, when loading a v3 config not all of these would be pushed back into the CSS theme and they should've been.\r\n\r\nThis PR addresses both of these problems.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14642","RelatedDescription":"Closed or merged PR \"Convert to/from v3 theme keys in configs and plugins\" (#14642)"},{"Id":"2578672399","IsPullRequest":true,"CreatedAt":"2024-10-11T13:27:53","Actor":"philipp-spiess","Number":"14639","RawContent":null,"Title":"Add simple JS config migration","State":"closed","Body":"This PR implements the first version of JS config file migration to CSS. It is based on the most simple config setups we are using in the Tailwind UI templates Commit, Primer, Radiant, and Studio.\r\n\r\nThe example we use in the integration test is a config that looks like this:\r\n\r\n```js\r\nimport { type Config } from 'tailwindcss'\r\nimport defaultTheme from 'tailwindcss/defaultTheme'\r\n\r\nmodule.exports = {\r\n  darkMode: 'selector',\r\n  content: ['./src/**/*.{html,js}'],\r\n  theme: {\r\n    boxShadow: {\r\n      sm: '0 2px 6px rgb(15 23 42 / 0.08)',\r\n    },\r\n    colors: {\r\n      red: {\r\n        500: '#ef4444',\r\n      },\r\n    },\r\n    fontSize: {\r\n      xs: ['0.75rem', { lineHeight: '1rem' }],\r\n      sm: ['0.875rem', { lineHeight: '1.5rem' }],\r\n      base: ['1rem', { lineHeight: '2rem' }],\r\n    },\r\n    extend: {\r\n      colors: {\r\n        red: {\r\n          600: '#dc2626',\r\n        },\r\n      },\r\n      fontFamily: {\r\n        sans: 'Inter, system-ui, sans-serif',\r\n        display: ['Cabinet Grotesk', ...defaultTheme.fontFamily.sans],\r\n      },\r\n      borderRadius: {\r\n        '4xl': '2rem',\r\n      },\r\n    },\r\n  },\r\n  plugins: [],\r\n} satisfies Config\r\n```\r\n\r\nAs you can see, this file only has a `darkMode` selector, custom `content` globs, a `theme` (with some theme keys being overwriting the default theme and some others extending the defaults). Note that it does not support `plugins` and/or `presets` yet.\r\n\r\nIn the case above, we will find the CSS file containing the existing `@tailwind` directives and are migrating it to the following:\r\n\r\n```css\r\n@import 'tailwindcss';\r\n\r\n@source './**/*.{html,js}';\r\n\r\n@variant dark (&:where(.dark, .dark *));\r\n\r\n@theme {\r\n  --box-shadow-*: initial;\r\n  --box-shadow-sm: 0 2px 6px rgb(15 23 42 / 0.08);\r\n\r\n  --color-*: initial;\r\n  --color-red-500: #ef4444;\r\n\r\n  --font-size-*: initial;\r\n  --font-size-xs: 0.75rem;\r\n  --font-size-xs--line-height: 1rem;\r\n  --font-size-sm: 0.875rem;\r\n  --font-size-sm--line-height: 1.5rem;\r\n  --font-size-base: 1rem;\r\n  --font-size-base--line-height: 2rem;\r\n\r\n  --color-red-600: #dc2626;\r\n\r\n  --font-family-sans: Inter, system-ui, sans-serif;\r\n  --font-family-display: Cabinet Grotesk, ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\r\n\r\n  --border-radius-4xl: 2rem;\r\n} \r\n```\r\n\r\nThis replicates all features of the JS config so we can even delete the existing JS config in this case. ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14639","RelatedDescription":"Closed or merged PR \"Add simple JS config migration\" (#14639)"},{"Id":"2579804731","IsPullRequest":true,"CreatedAt":"2024-10-11T12:22:55","Actor":"RobinMalfait","Number":"14643","RawContent":null,"Title":"Migrate legacy classes to the v4 alternative","State":"closed","Body":"This PR adds a mapping from legacy classes to new classes. For example, the `flex-shrink-0` is still used in our projects, but is deprecated in v3.\r\n\r\nThe migration does a tiny bit of parsing because we can't rely on `designSystem.parseCandidate(…)` because this requires the utility to be defined which is not the case for legacy classes.\r\n\r\nThis migration runs _after_ the migration where we handle prefixes, so we don't have to worry about that. We do have to worry about the `!` location, because the `important` migration also relies on the `designSystem`.\r\n\r\n| Old                 | New                    |\r\n| ------------------- | ---------------------- |\r\n| `overflow-clip`     | `text-clip`            |\r\n| `overflow-ellipsis` | `text-ellipsis`        |\r\n| `flex-grow-0`       | `grow-0`               |\r\n| `flex-shrink-0`     | `shrink-0`             |\r\n| `decoration-clone`  | `box-decoration-clone` |\r\n| `decoration-slice`  | `box-decoration-slice` |\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14643","RelatedDescription":"Closed or merged PR \"Migrate legacy classes to the v4 alternative\" (#14643)"},{"Id":"2580329191","IsPullRequest":true,"CreatedAt":"2024-10-11T10:50:15","Actor":"depfu[bot]","Number":"14646","RawContent":null,"Title":"Update turbo 2.1.2 → 2.1.3 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ turbo (2.1.2 → 2.1.3) · [Repo](https://github.com/turborepo/turbo)\n\n\n\n\n\nSorry, we couldn't find anything useful about this release.\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14646","RelatedDescription":"Closed or merged PR \"Update turbo 2.1.2 → 2.1.3 (patch)\" (#14646)"},{"Id":"2578991874","IsPullRequest":true,"CreatedAt":"2024-10-10T14:29:36","Actor":"RobinMalfait","Number":"14640","RawContent":null,"Title":"Use consistent quotes","State":"closed","Body":"Small improvement, we noticed that some quotes were not consistent with others. Let's make them consistent!\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14640","RelatedDescription":"Closed or merged PR \"Use consistent quotes\" (#14640)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-10-16T03:30:26.6102246Z","RunDurationInMilliseconds":549}