{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2811992287","IsPullRequest":false,"CreatedAt":"2025-01-27T03:05:59","Actor":"scullion","Number":"15911","RawContent":null,"Title":"Font size / line height shorthand (e.g. `text-3xl/loose`) doesn't apply `line-height` when leading value is `none`","State":"open","Body":"**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\n@tailwindcss/vite 4.0.0, Vite 6.0.11\n\n**What version of Node.js are you using?**\n\nNode.js 20.x\n\n**What browser are you using?**\n\nAppears in all browsers tested.\n\n**What operating system are you using?**\n\nWindows 11\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/ZmoWtl9NX5\n\n**Describe your issue**\n\nThe `font-size` / `line-height` shorthand syntax (e.g., `text-3xl/none`) doesn't apply the `line-height` for `none` leading. The generated ruleset for, e.g. `text-3xl/none` doesn't contain the expected `line-height: 1`.\n\nThe example shows pairs of identical text at different sizes. Each pair shows:\n- Left (red border): Using shorthand syntax (e.g., `text-3xl/none`)\n- Right (blue border): Using separate classes (e.g., `text-3xl leading-none`)\n\nExpected behavior:\n- Both syntaxes should produce identical line heights\n- The shorthand `text-3xl/none` should be equivalent to `text-3xl leading-none`\n- The columns should look the same\n\nActual behavior:\n- Text in the red column has its default line height.\n\nToggling the example to Tailwind v3 shows that this behavior is new with v4.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15911","RelatedDescription":"Open issue \"Font size / line height shorthand (e.g. `text-3xl/loose`) doesn't apply `line-height` when leading value is `none`\" (#15911)"},{"Id":"2811852014","IsPullRequest":false,"CreatedAt":"2025-01-26T23:53:43","Actor":"ramrami","Number":"15910","RawContent":null,"Title":"[v4] Linear gradients behave differently: there is no smoothness between \"via\" and \"to\"","State":"open","Body":"**What version of Tailwind CSS are you using?**\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\ngulp v5.0.0\n\n**What version of Node.js are you using?**\nv20.18.1\n\n**What browser are you using?**\nBrave + Safari\n\n**What operating system are you using?**\nmacOS\n\n**Reproduction URL**\nhttps://play.tailwindcss.com/9WOZcQlXDT\n\n**Describe your issue**\n\nNot sure if this is intentional or a regression, but in v4 there is no smoothness between \"via\" and \"to\"\n\nThe classes I'm using:\n`bg-gradient-to-r from-white/0 from-20% via-white to-50%`\n(I'm using bg-gradient instead of bg-linear to toggle between versions in the playground)\n\n\nv4\n![Image](https://github.com/user-attachments/assets/6aca9b06-a136-4c30-9802-838bbe33b920)\n\n\nv3\n![Image](https://github.com/user-attachments/assets/da6202c4-9302-44c2-81de-47047894726c)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15910","RelatedDescription":"Open issue \"[v4] Linear gradients behave differently: there is no smoothness between \"via\" and \"to\"\" (#15910)"},{"Id":"2811842283","IsPullRequest":false,"CreatedAt":"2025-01-26T23:25:42","Actor":"AlanKha","Number":"15908","RawContent":null,"Title":"SVG backgrounds not working for Tailwind v4.0.0","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 5.2.12\n\n**What version of Node.js are you using?**\n\n10.9.0\n\n**What browser are you using?**\n\nArc/Chrome\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/K2Rma8KsrH\n\n**Describe your issue**\n\nWhen migrating to tailwind v4, I noticed that one of my background patterns disappeared. When recreating this scenario with the tailwind sandbox, I noticed that this is only an issue with svgs. In my attempt, I tried 3 different ways to get it to work: using @theme variables, using :root variables, and inserting the link inline. None of these worked\n\nYou can see what I am attempting to do if you go to https://alan-khalili.com/ and look and look at the sliding text with my github repos.\n\nedit: After tinkering with this more, I noticed that when the url directly contains the '.svg' extension, it works ([playground link](https://play.tailwindcss.com/WmtKbl7FnP?file=css)), but that still does not work with some services like https://uploadthing.com/ that do not have file extensions in the link","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15908","RelatedDescription":"Open issue \"SVG backgrounds not working for Tailwind v4.0.0\" (#15908)"},{"Id":"2811787387","IsPullRequest":true,"CreatedAt":"2025-01-26T21:08:05","Actor":"EricGusmao","Number":"15906","RawContent":null,"Title":"Bundle @tailwindcss/container-queries plugin with the standalone CLI","State":"closed","Body":"Enhances plugin support for the standalone CLI.\r\n\r\n### Integration of `@tailwindcss/container-queries` plugin:\r\n\r\n* [`integrations/cli/standalone.test.ts`](diffhunk://#diff-1c2acef79df0743d1800f3332dffcbd2b64ceeca3b8d28fbcfbec06f9d993e88R36): Added `@container` class and included the `@tailwindcss/container-queries` plugin in the test setup. [[1]](diffhunk://#diff-1c2acef79df0743d1800f3332dffcbd2b64ceeca3b8d28fbcfbec06f9d993e88R36) [[2]](diffhunk://#diff-1c2acef79df0743d1800f3332dffcbd2b64ceeca3b8d28fbcfbec06f9d993e88R45) [[3]](diffhunk://#diff-1c2acef79df0743d1800f3332dffcbd2b64ceeca3b8d28fbcfbec06f9d993e88R58)\r\n* [`packages/@tailwindcss-standalone/package.json`](diffhunk://#diff-f42dafff9cd47f65a1841f83969413055153a6e8069f42f18fe0e46204011b76R30): Added `@tailwindcss/container-queries` as a dependency.\r\n* [`packages/@tailwindcss-standalone/src/index.ts`](diffhunk://#diff-dd232e8dd74633b5b861c20074813152101f0eda78fed64dadbedf67883ffcfeR47): Updated the resolver and loader functions to handle the `@tailwindcss/container-queries` plugin. [[1]](diffhunk://#diff-dd232e8dd74633b5b861c20074813152101f0eda78fed64dadbedf67883ffcfeR47) [[2]](diffhunk://#diff-dd232e8dd74633b5b861c20074813152101f0eda78fed64dadbedf67883ffcfeR60-R61)\r\n* [`pnpm-lock.yaml`](diffhunk://#diff-32824c984905bb02bc7ffcef96a77addd1f1602cff71a11fbbfdd7f53ee026bbR234-R236): Updated to include `@tailwindcss/container-queries` with its dependencies and resolution integrity. [[1]](diffhunk://#diff-32824c984905bb02bc7ffcef96a77addd1f1602cff71a11fbbfdd7f53ee026bbR234-R236) [[2]](diffhunk://#diff-32824c984905bb02bc7ffcef96a77addd1f1602cff71a11fbbfdd7f53ee026bbR1814-R1818) [[3]](diffhunk://#diff-32824c984905bb02bc7ffcef96a77addd1f1602cff71a11fbbfdd7f53ee026bbR4922-R4925)","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15906","RelatedDescription":"Closed or merged PR \"Bundle @tailwindcss/container-queries plugin with the standalone CLI\" (#15906)"},{"Id":"2811726568","IsPullRequest":false,"CreatedAt":"2025-01-26T19:21:11","Actor":"Abdulrahmanelheyb","Number":"15902","RawContent":null,"Title":"background-color and background-image are same class","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nFor example: postcss-cli 8, Next.js 15.1.6\n\n**What version of Node.js are you using?**\n\nFor example: v20.12.2\n\n**What browser are you using?**\n\nMicrosoft Edge v132.0.2957.115\n\n**What operating system are you using?**\n\nWindows\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/RATwRl63sa\n\nA Tailwind Play link or public GitHub repo that includes a minimal reproduction of the bug. **Please do not link to your actual project**, what we need instead is a _minimal_ reproduction in a fresh project without any unnecessary code. This means it doesn't matter if your real project is private/confidential, since we want a link to a separate, isolated reproduction anyways.\n\nA reproduction is **required** when filing an issue â€” any issue opened without a reproduction will be closed and you'll be asked to create a new issue that includes a reproduction. We're a small team and we can't keep up with the volume of issues we receive if we need to reproduce each issue from scratch ourselves.\n\n**Describe your issue**\n\nDescribe the problem you're seeing, any important steps to reproduce and what behavior you expect instead.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15902","RelatedDescription":"Closed issue \"background-color and background-image are same class\" (#15902)"},{"Id":"2811678954","IsPullRequest":false,"CreatedAt":"2025-01-26T17:14:12","Actor":"peernohell","Number":"15899","RawContent":null,"Title":"Tailwindcss4 with meteor won't work unless you add import in each CSS files.","State":"open","Body":"**What version of Tailwind CSS are you using?**\n\n4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\npostcss 8.4.47 with Meteor 3.0.4\n\n**What version of Node.js are you using?**\n\nv20.12.2\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nMeteor simple demo https://github.com/peernohell/meteor-tailwind4\n\n\n**Describe your issue**\n\nBuild will failed.\nIn other.css file if you uncomment line 2 it will fix the build.\nWith tailwindcss v3 you don't have to include somethings on all files.\nIt make migration really complicated as we have to add the import on each css file of our project.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15899","RelatedDescription":"Open issue \"Tailwindcss4 with meteor won't work unless you add import in each CSS files.\" (#15899)"},{"Id":"2811672200","IsPullRequest":false,"CreatedAt":"2025-01-26T17:01:55","Actor":"emirhangumus","Number":"15897","RawContent":null,"Title":"Invalid css transformation on build","State":"open","Body":"**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nsvelte 5.19.2, tailwindcss/vite 4.0.0, vite 6.0.11\n\n**What version of Bun js are you using?**\n\nv1.2.0\n\n**What browser are you using?**\n\nZen Browser (Firefox)\n\n**What operating system are you using?**\n\nUbuntu 22.04\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/czuZLwTt4a\n\n**Describe your issue**\n\n![On development mode](https://github.com/user-attachments/assets/6efb24f3-da28-4d36-84d2-92c3af0d6779)\n![On production mode ](https://github.com/user-attachments/assets/b754af96-5c0f-4433-82db-431348e727a3)\n\nThe bug is, i have a class like this `lg:bg-[center_bottom_-15rem]` and on development mode, tailwind puts all thing as is. When build the app, transformation is convert that into invalid status.\n`center` turning into `50%` and its invalid.\nExpectation is, not creating a invalid value.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15897","RelatedDescription":"Open issue \"Invalid css transformation on build\" (#15897)"},{"Id":"2811617091","IsPullRequest":false,"CreatedAt":"2025-01-26T15:19:53","Actor":"liamduckett","Number":"15895","RawContent":null,"Title":"[v4] Upgrade tool doesn't handle \"Removed deprecated utilities\"","State":"open","Body":"**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\npostcss 8.4.31\n\n**What version of Node.js are you using?**\n\nv22.12.0\n\n**What browser are you using?**\n\nFirefox\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\n* [Code on v3](https://play.tailwindcss.com/yfcOkl8UD0)\n* [Code on v4](https://play.tailwindcss.com/y7D6I8MSqe)\n\n**Describe your issue**\n\nRan upgrade tool on the v3 code, and got the v4 code. No surprise these look different - covered in the upgrade guide: https://tailwindcss.com/docs/upgrade-guide#removed-deprecated-utilities.\n\nCould the upgrade tool handle this automatically?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15895","RelatedDescription":"Open issue \"[v4] Upgrade tool doesn't handle \"Removed deprecated utilities\"\" (#15895)"},{"Id":"2811293103","IsPullRequest":false,"CreatedAt":"2025-01-26T13:32:35","Actor":"fs-projects","Number":"15877","RawContent":null,"Title":"When using tailwindcss4.0.0 with ChakraUI3.5.1, the styles are conflicting and overriden.","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nvite with react + typescript template using  `npm create vite@latest`\n\n**What version of Node.js are you using?**\n\nv22.13.0(Jod)\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nWindows\n\n**Reproduction URL**\n\nhttps://github.com/fs-projects/chakra-tailwind. Please clone this repo and run `npm install` and `npm run dev` correspondingly.\n\n**Describe your issue**\nI created a started project with vite(react+typescript) and then added tailwindcss4.0.0 with ChakraUI3.5.1. I just have a heading in my code and when I try to run it I can see that styles are not getting applied except for the underline. \n\n`<h1 className=\"text-8xl font-bold underline\">Hello world!</h1>`\n\nWhen I inspect above in browser I see font-size, font-weight are getting set and are striked off in the browser.\n\nPlease see below snap - \n\n![Image](https://github.com/user-attachments/assets/4bb5ce4f-e1ef-456c-84a0-158316bd926f)\n\nPlease suggest anything that I can do solve this issue. Thank you very much for your support. \n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15877","RelatedDescription":"Closed issue \"When using tailwindcss4.0.0 with ChakraUI3.5.1, the styles are conflicting and overriden.\" (#15877)"},{"Id":"2811559624","IsPullRequest":false,"CreatedAt":"2025-01-26T13:27:14","Actor":"idan-faibish","Number":"15890","RawContent":null,"Title":"`@utility` directive's content css doesn't have intellisense for css properties","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\n4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nvite 6.0.11\n\n**What version of Node.js are you using?**\n\n20.13.1\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nmacOS\n\n**Describe your issue**\n\nas stated in the title.\nwhen using the new `@utility` directive, the inner css code doesn't have any intellisense. its like we are not using any css code.\n(the code itself is working just fine, its only an intellisense issue)\n\nin the image below, we can even see that the coloring (plain white) indicates it\n![Image](https://github.com/user-attachments/assets/7d41b41f-d289-47c8-8c9b-809ddb5180d0)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15890","RelatedDescription":"Open issue \"`@utility` directive's content css doesn't have intellisense for css properties\" (#15890)"},{"Id":"2811550094","IsPullRequest":false,"CreatedAt":"2025-01-26T13:07:31","Actor":"rudyhadoux","Number":"15887","RawContent":null,"Title":"The update with Angular 19 fails","State":"open","Body":"I upgrade to v4 but a lot of errors like this \nâœ˜ [ERROR] Cannot apply unknown utility class: py-0.5 [plugin angular-sass]\n\n    node_modules/tailwindcss/dist/lib.js:17:296:\n      17 â”‚ ...r,{onInvalidCandidate:x=>{throw new Error(`Cannot apply unknown...\n         â•µ                                    ^\n\n    at onInvalidCandidate","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15887","RelatedDescription":"Open issue \"The update with Angular 19 fails\" (#15887)"},{"Id":"2811493897","IsPullRequest":false,"CreatedAt":"2025-01-26T12:38:38","Actor":"vikingnope","Number":"15885","RawContent":null,"Title":"Update script did not update dependency","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nCurrent 3.4.1 updating to v4\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nSomewhat old Create-React-App project\n\n**What version of Node.js are you using?**\n\nv 23.6.0\n\n**What browser are you using?**\n\nFor example: Chrome, Safari, or N/A\n\n**What operating system are you using?**\n\nWindows\n\n**Reproduction URL**\n\nN/A\n\n**Describe your issue**\n\nIt says it is going to update the dependencies but it does not actually updated the dependencies to v4\n\nhttps://github.com/vikingnope/worther\n\n![Image](https://github.com/user-attachments/assets/72b0e508-aef6-49fa-a951-0cce464284bc)\n\n![Image](https://github.com/user-attachments/assets/f1fac3b0-5684-4bb4-87bd-1a80db1fadbe)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15885","RelatedDescription":"Closed issue \"Update script did not update dependency\" (#15885)"},{"Id":"2811487135","IsPullRequest":false,"CreatedAt":"2025-01-26T11:55:35","Actor":"iquito","Number":"15884","RawContent":null,"Title":"[v4] \"hidden\" is not the last display utility anymore","State":"open","Body":"**What version of Tailwind CSS are you using?**\n\nv4.0\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/1XH8TJa6s3 for v4 (element is shown)\nhttps://play.tailwindcss.com/Ajm578zcYz for v3.4.15 (element is not shown)\n\n**Describe your issue**\n\nThe order of the `display` utilities has slightly changed in v4, putting `hidden` somewhere in the middle of these utilities by default (after `block`, but before `inline-block` or `inline-flex`), where in v3.4 it was at the end of all the `display` utilities. I have used TailwindCSS often like this:\n\n```html\n<div class=\"inline-block hidden\">Some text that is either displayed as inline-block or hidden</div>\n```\n\nThen I remove or re-add the hidden class with Javascript, which worked fine in v3. In v4 this does not work with `inline-block` anymore (because `inline-block` comes after `hidden` in the generated CSS), while it does work with `block` (as it comes before `hidden`). I found the behavior better in v3.4, where `hidden` was assumed to be the preferred/overriding value (if set) of all the display utilities and comes last in the definitions. I could imagine many people used `hidden` in this way and will find the new order surprising.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15884","RelatedDescription":"Open issue \"[v4] \"hidden\" is not the last display utility anymore\" (#15884)"},{"Id":"2811444463","IsPullRequest":false,"CreatedAt":"2025-01-26T10:16:42","Actor":"lentscode","Number":"15882","RawContent":null,"Title":"[v4] Tailwind running with Next v15 on Docker takes ton of time and resources for first load","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nNext.js v15.1.4\n\n**What version of Node.js are you using?**\n\nv23.0.0\n\n**What browser are you using?**\n\nN/A\n\n**What operating system are you using?**\n\nMacOS\n\n[**Reproduction URL**](https://github.com/lentscode/tailwind-issue-replication)\n\nI have an issue running Next v15 + Tailwind v4 on a Docker container: the first compiling takes a huge amount of time compared to running `yarn dev` on local. Furthermore, it takes a ton of CPU and memory just for the first rendering.\n\n**Local `yarn dev`**\n![Image](https://github.com/user-attachments/assets/d95626bb-c4a8-4416-b4a0-20afe756af18)\n\n**Docker container**\n![Image](https://github.com/user-attachments/assets/d586f763-bc30-4029-970e-a5dd2b71d882)\n\n**`docker stats`**\n![Image](https://github.com/user-attachments/assets/18a4868d-348e-476e-84a6-54b6cbc5c93b)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15882","RelatedDescription":"Open issue \"[v4] Tailwind running with Next v15 on Docker takes ton of time and resources for first load\" (#15882)"},{"Id":"2811397807","IsPullRequest":false,"CreatedAt":"2025-01-26T09:37:10","Actor":"jesspinklet","Number":"15880","RawContent":null,"Title":"V4 background size and background position custom value classes are same.","State":"closed","Body":"![Image](https://github.com/user-attachments/assets/5c0f79aa-047c-427b-9dd8-e9643ad13ce7)\n\n![Image](https://github.com/user-attachments/assets/7fddcb20-390a-4441-bc12-ccf37135e482)\n\nThey are both using `bg-[value]`.\n\nIs that how it's supposed to be?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15880","RelatedDescription":"Closed issue \"V4 background size and background position custom value classes are same.\" (#15880)"},{"Id":"2811286769","IsPullRequest":false,"CreatedAt":"2025-01-26T02:54:28","Actor":"AssisrMatheus","Number":"15876","RawContent":null,"Title":"[v4] Sources are not being taken into consideration with Next.js 15","State":"open","Body":"Tailwind: `4.0.0`\nNext.js: `15.1.6`\nMacOS: `Sequoia 15.2`\nNode: `v22.13.1`\npnpm: `9.15.3`\nArc Browser: `1.79.0`\n\n**Reproduction URL**\n\nhttps://github.com/AssisrMatheus/tailwindv4-next15-no-output-repro\n\nSetup process:\n1. `pnpx create-next-app@latest`\n1. `pnpx @tailwindcss/upgrade@next`\n1. `pnpm run dev`\n\n**Describe your issue**\n\nIn a brand new next.js 15 project. Tailwind v4 is only building base css and theme variables, all classes used within source files are ignored.\n\nI have tried to turn off turbopack with no success. Rolling back node to v20 also doesn't help. Tried using `postcss.config.json` file format instead of current one also with no success.\n\nCurrent behaviour:  \n![Image](https://github.com/user-attachments/assets/0f2d6280-b1c8-4d47-95e8-52abd65a8e47)\n\nExpected behaviour:  \n![Image](https://github.com/user-attachments/assets/a97380cc-f19b-4264-a01b-a138e882f171)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15876","RelatedDescription":"Open issue \"[v4] Sources are not being taken into consideration with Next.js 15\" (#15876)"},{"Id":"2811249242","IsPullRequest":false,"CreatedAt":"2025-01-26T00:53:26","Actor":"sangrepura","Number":"15874","RawContent":null,"Title":"Bug: CSS Variables in `@theme`, `@layer base`, and `:root` do Not Inherit Inline style Values in Tailwind CSS v4","State":"open","Body":"## What version of Tailwind CSS are you using?\nv4.0.0\n\n## What build tool are you using?\nTailwind Playground\n\n## What version of Node.js are you using?\nN/A\n\n## What browser are you using?\nChromium to 132.0.6834.111.\n\n## What operating system are you using?\nmacOS Sonoma 14.5\n\n## Reproduction URL\n[Tailwind Play](https://play.tailwindcss.com/7N0n8QrcVe)\n\n## Describe your issue\n\n### Expected Behavior:\n\nCSS variables defined via `@theme`, `@layer base`, `:root`, and global scope should inherit the value set inline via `style=\"--var: foo;\"`\n\n### Actual Behavior:\n\n#### Only these scenarios work:\n\n- Direct Tailwind color w or w/out use of var (`text-[var(--color-red-500)])`)\n\n- Direct Custom Tailwind color  (`text-less-cool`)\n\n- Class-scoped variable (`text-[var(--color-class-cool)]` - i.e. when using my `.cool` class)\n\n#### These scenarios fail:\n\n- Theme-layer variable (`--color-theme-cool`)\n\n- Base-layer variable (`--color-base-cool`)\n\n- Root-scoped variable (`--color-root-cool`)\n\n### Steps to Reproduce:\n\nDefine CSS variables using multiple scoping methods:\n\n```css\n@import \"tailwindcss\";\n\n@theme {\n  --color-less-cool: #A5B937;\n  --color-theme-cool: var(--cool);\n}\n\n@layer base {\n  :root {\n    --color-base-cool: var(--cool);\n  }\n}\n\n.cool {\n  --color-class-cool: var(--cool);\n}\n\n:root {\n  --color-root-cool: var(--cool);\n}\n\n```\n\n```html\n<h1 class=\"text-6xl text-[var(--color-red-500)]\" style=\"--cool: #FE9900;\">Hello</h1>\n\n<h1 class=\"text-6xl text-less-cool\" style=\"--cool: #FE9900;\">Hello</h1>\n\n<h1 class=\"text-6xl text-theme-cool\" style=\"--cool: #FE9900;\">Hello</h1>\n\n<h1 class=\"text-6xl text-[var(--color-theme-cool)]\" style=\"--cool: #FE9900;\">Hello</h1>\n\n<h1 class=\"text-6xl text-[var(--color-base-cool)]\" style=\"--cool: #FE9900;\">Hello</h1>\n\n<h1 class=\"text-6xl text-[var(--color-root-cool)]\" style=\"--cool: #FE9900;\">Hello</h1>\n\n<h1 class=\"cool text-6xl text-[var(--color-class-cool)]\" style=\"--cool: #FE9900;\">Hello</h1>\n```\n\n\n\n\n### Workaround: \n\nVariables scoped to a class (.cool) work correctly, suggesting a scoping/context issue with theme/base-layer variables.\n\n### Additional Notes:\n\nTailwind's layer system doesn't appear to respect inline variable definitions\n\nVariables declared in :root don't inherit values from element-scoped --cool\n\nOnly class-scoped variables work as expected\n\nThis used to work for me in v3","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15874","RelatedDescription":"Open issue \"Bug: CSS Variables in `@theme`, `@layer base`, and `:root` do Not Inherit Inline style Values in Tailwind CSS v4\" (#15874)"},{"Id":"2811230652","IsPullRequest":false,"CreatedAt":"2025-01-25T23:58:10","Actor":"tkafka","Number":"15872","RawContent":null,"Title":"v4: @tailwindcss/vite: Invalid css in @theme section causes the styles to be silently broken in production build only","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\n\"@tailwindcss/vite\": \"^4.0.0\"\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\n\"vite\": \"^6.0.5\"\n\n**What version of Node.js are you using?**\n\nv22.13.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nhttps://github.com/tkafka/tailwind-v4-css-parsing-bug/tree/main\n\n**Describe your issue**\n\nThe above demo demonstrates, how a single typo in `@theme` section in `style.css` causes the page to have broken css in production.\nThe dev build is fine, and there is no error message in production.\nThis can let to a single typo silently breaking the production.\n\n## Reproduction steps:\n\n1. Install dependencies:\n\n```bash\npnpm install\n```\n\n2. Dev build looks fine:\n\n```bash\npnpm dev\n```\n\n<img width=\"516\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0ef9a83c-1ef3-4969-a385-e3ef10dc22a5\" />\n\n3. Production build has broken styling, no error is produced:\n\n```bash\npnpm build && pnpm preview\n```\n\n<img width=\"802\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/3c3255f0-ab2e-4eaf-bfcb-db421b533958\" />\n\nThis is caused by a typo in `style.css` in `--shadow-inset-bad` - it has invalid `rgb(var(from --color-secondary-500) r g b / 0.08)` instead of `rgb(from var(--color-secondary-500) r g b / 0.08)` (`from` is in the wrong place).\n\nCommenting out the `--shadow-inset-bad` style causes the production build to have a proper styling.\n\nThis seems like an error caused by different behavior of css parsing in development vs. in production. I believe that either the parser should work in a same way in development and production mode, or it should report found errors in css.\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15872","RelatedDescription":"Open issue \"v4: @tailwindcss/vite: Invalid css in @theme section causes the styles to be silently broken in production build only\" (#15872)"},{"Id":"2811184066","IsPullRequest":true,"CreatedAt":"2025-01-25T21:28:14","Actor":"userquin","Number":"15869","RawContent":null,"Title":"fix(tailwindcss): default package exports","State":"open","Body":"<!--\r\n\r\nðŸ‘‹ Hey, thanks for your interest in contributing to Tailwind!\r\n\r\n**Please ask first before starting work on any significant new features.**\r\n\r\nIt's never a fun experience to have your pull request declined after investing a lot of time and effort into a new feature. To avoid this from happening, we request that contributors create an issue to first discuss any significant new features. This includes things like adding new utilities, creating new at-rules, or adding new component examples to the documentation.\r\n\r\nhttps://github.com/tailwindcss/tailwindcss/blob/master/.github/CONTRIBUTING.md\r\n\r\n-->\r\n\r\nThis PR includes the following changes to the `packages/tailwindcss` package (check **Context**):\r\n- fixes the default packages exports for node10 and node16 cjs types\r\n- export types in `plugin.ts` module, cannot be used with Typescript 5.7\r\n- add `\"type\": \"commonjs\"` to package.json\r\n- add `./lib/util/flattenColorPalette.js` variant to package.json exports (`publishConfig`)\r\n\r\n**Context**\r\nThe current version at npm registry has all types broken for all packages exports. The problem seems to be with tsup since it is not applying the `.cts` hack, all `d.ts` files using `export { X as default };`, check https://arethetypeswrong.github.io/?p=tailwindcss%404.0.0 .\r\n\r\nWith this PR (for context check this PR https://github.com/unjs/unbuild/pull/475 and this md file https://github.com/unjs/unbuild/blob/a011a7831e2004688bf44716f5e9c9377d08ebec/src/builders/rollup/plugins/cjs.md):\r\n\r\n![image](https://github.com/user-attachments/assets/1cbfcdf7-a573-4465-8191-95dea9fabd56)\r\n\r\n\r\nThis PR includes a new script module that runs after tsup finish building the dist, extracting the default export and applying some replacements in the files including the default `export` correclty: `export = X;` and remaining named exports in the default export statement.\r\n\r\nAbout exporting the types in the `plugin.ts` module, when using TypeScript 5.7 there is an error. Using the following code with any module resolution\r\n\r\n```ts\r\nimport plugin from 'tailwindcss/plugin'\r\n\r\nconst exportedPlugin = plugin.withOptions(() => {\r\n\treturn ({ matchComponents }) => {\r\n\t\tmatchComponents({\r\n\t\t\ttest: (content: string) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcolor: content,\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n});\r\n\r\nexport default exportedPlugin;\r\n```\r\n\r\nand building it via `tsc -b`, there is an error about required annotation:\r\n\r\n![image](https://github.com/user-attachments/assets/dc092554-6467-4c50-b18c-7b0d8dd40274)\r\n\r\nUsing a local tgz from this PR, TypeScript is fine when building the module:\r\n\r\n![image](https://github.com/user-attachments/assets/625ea542-6ac4-41ee-9aa6-670f08d6ca4c)\r\n\r\nYou can generate the local tgz using this PR in the following repository (use packages/plugin): https://github.com/iconify/iconify-tailwind\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15869","RelatedDescription":"Open PR \"fix(tailwindcss): default package exports\" (#15869)"},{"Id":"2811165589","IsPullRequest":false,"CreatedAt":"2025-01-25T20:50:42","Actor":"eyalch","Number":"15868","RawContent":null,"Title":"Upgrade tool converts component classes to custom utilities","State":"closed","Body":"**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\n@tailwindcss/cli 4.0.0\n\n**What version of Node.js are you using?**\n\nv20.12.0\n\n**What browser are you using?**\n\nN/A\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nN/A\n\n**Describe your issue**\n\nWhile upgrading to Tailwind CSS v4.0 (from v3.4.14), the [upgrade tool](https://tailwindcss.com/docs/upgrade-guide#using-the-upgrade-tool) seems to convert [component classes](https://tailwindcss.com/docs/adding-custom-styles#adding-component-classes) to [custom utilities](https://tailwindcss.com/docs/adding-custom-styles#adding-custom-utilities). Reading the code, looks like this behavior is intentional: https://github.com/tailwindlabs/tailwindcss/blob/7e20c3b58750f769d9b6e35bf283689c86341b1d/packages/%40tailwindcss-upgrade/src/codemods/migrate-at-layer-utilities.ts#L277\n\nThe question isâ€”why? Since both Tailwind CSS v3.0 and v4.0 support the `components` layer, I'd expect the upgrade tool to leave component classes _unmodified_.\n\nHere's a unit test for a simple case (would be added to `packages/@tailwindcss-upgrade/src/codemods/migrate-at-layer-utilities.test.ts`):\n\n```ts\nit('should keep components', async () => {\n  expect(\n    await migrate(css`\n      @layer components {\n        .foo {\n          color: red;\n        }\n      }\n    `),\n  ).toMatchInlineSnapshot(`\n    \"@layer components {\n      .foo {\n        color: red;\n      }\n    }\"\n  `)\n})\n```\n\nThis test fails with the following output:\n\n```diff\n FAIL  src/codemods/migrate-at-layer-utilities.test.ts > should keep components\nError: Snapshot `should keep components 1` mismatched\n\n- Expected\n+ Received\n\n- \"@layer components {\n-   .foo {\n+ \"@utility foo {\n-     color: red;\n+   color: red;\n-   }\n  }\"\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15868","RelatedDescription":"Closed issue \"Upgrade tool converts component classes to custom utilities\" (#15868)"},{"Id":"2811132585","IsPullRequest":false,"CreatedAt":"2025-01-25T19:05:19","Actor":"nilshelmig","Number":"15864","RawContent":null,"Title":"[v4] preflight removed margins conflicts with web-component :host styles","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\n@tailwindcss/vite@4.0.0, vite@6.0.11, @material/web@2.2.0\n\n**What version of Node.js are you using?**\n\nv22.9.0\n\n**What browser are you using?**\n\nFirefox 134.0.2, Chromium 132.0.6834.83\n\n**What operating system are you using?**\n\nKubuntu 24.10.\n\n**Reproduction URL**\nhttps://github.com/nilshelmig/tailwindcss-4-webcomponents-bug\n\n```bash\nnpm ci\nnpm start\n```\n\n**Describe your issue**\n\nWe use [material web-components](https://m3.material.io/components) in our project. While upgrading to tailwindcss-v4 we encountered wrong paddings of buttons and wrong position and size of dialog boxes.\n\nIt seems because of preflight setting `padding` and `margin` for every element `*` to zero, it overrides the styling rules from `:host` of the custom-web-elements.\n\nCurrently, the only workaround I see is to create a custom preflight, so that setting `padding` and `margin` won't apply to `:host` elements, or set the `padding` and `margin` for the custom element with tailwindcss. The later one would mean more control on our side, but we have to reapply every sizing of material web-components ðŸ˜• \n\n**With preflight enabled**\n![Image](https://github.com/user-attachments/assets/17e29f80-a5dd-4e4d-9f8a-8d94f3bfd8d5)\n\n**With preflight disabled**\n![Image](https://github.com/user-attachments/assets/86383a9d-0439-43f5-bc5c-4607af61923e)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15864","RelatedDescription":"Open issue \"[v4] preflight removed margins conflicts with web-component :host styles\" (#15864)"},{"Id":"2811096837","IsPullRequest":false,"CreatedAt":"2025-01-25T17:41:21","Actor":"obecker","Number":"15861","RawContent":null,"Title":"v3 -> v4 upgrade tool should replace `outline` with `outline-solid`","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv3.4.17\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nvite 6.0.11\n\n**What version of Node.js are you using?**\n\nv22.11.0\n\n**What browser are you using?**\n\nN/A\n\n**What operating system are you using?**\n\nmacOS\n\n**Describe your issue**\n\nIn tailwindcss v3 the `outline` class translates to `outline-style: solid;`.\nhttps://v3.tailwindcss.com/docs/outline-style\n\nIn tailwindcss v4 this has been fixed to be consistent with border utility classes, so `outline` now translates to `outline-width: 1px;`.\nhttps://tailwindcss.com/docs/outline-width\n\nThat means, when upgrading from v3 to v4 `outline` should be replaced with `outline-solid`.\nHowever, running `npx @tailwindcss/upgrade@next` doesn't do that.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15861","RelatedDescription":"Open issue \"v3 -> v4 upgrade tool should replace `outline` with `outline-solid`\" (#15861)"},{"Id":"2810980855","IsPullRequest":false,"CreatedAt":"2025-01-25T17:04:57","Actor":"minimusubi","Number":"15846","RawContent":null,"Title":"min-h-none and min-w-none do not set correct styles","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nNuxt.js v3.15.3\n\n**What version of Node.js are you using?**\n\nv20.12.2\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nWindows 11\n\n**Reproduction URL**\n\nThese appear to be the lines responsible for adding the `min-w-none` and `min-h-none`  classes.\nhttps://github.com/tailwindlabs/tailwindcss/blob/a8c54acaba7d51875bd332163754fb8bc40939a4/packages/tailwindcss/src/utilities.ts#L899-L902\n\n**Describe your issue**\n\nThere are utility classes for `min-width: none` (`min-w-none`) and `min-height: none` (`min-h-none`). However, `none` is not a valid keyword for those styles.\n\n`none` _is_ valid for [max-height](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#syntax) and [max-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#syntax).\n`none` _is not_ valid for [min-height](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#syntax) and [min-width](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#syntax).\n\n**Alternatives**\nBoth `min-w-0` and `min-w-[0]` can be used to set `min-width` to zero, and the same goes for height.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15846","RelatedDescription":"Closed issue \"min-h-none and min-w-none do not set correct styles\" (#15846)"},{"Id":"2810969751","IsPullRequest":true,"CreatedAt":"2025-01-25T17:04:55","Actor":"wongjn","Number":"15845","RawContent":null,"Title":"Remove `min-w/h-none`","State":"closed","Body":"`none` is not a valid value for `min-width` or `min-height` according to [the CSS spec](https://www.w3.org/TR/css-sizing-3/#min-size-properties):\r\n\r\n> | | |\r\n> | --- | --- |\r\n> | [Value](https://www.w3.org/TR/css-values/#value-defs): | auto \\| [&lt;length-percentage>](https://www.w3.org/TR/css-values-4/#typedef-length-percentage) \\| min-content \\| max-content \\| fit-content([&lt;length-percentage>](https://www.w3.org/TR/css-values-4/#typedef-length-percentage)) |\r\n\r\nI believe we should be able to remove the `min-w-none` and `min-h-none` class candidates since they wouldn't have done anything anyway and thus should not affect backwards compatibility. Indeed, these did not exist in v3 either:\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/4f9f603e12b51cc53b8a09c7739b8f88c8eb87eb/stubs/config.full.js#L674-L684\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/4f9f603e12b51cc53b8a09c7739b8f88c8eb87eb/stubs/config.full.js#L685-L691\r\n\r\n---\r\n\r\nCredit to `@i` on Discord for spotting this[^1], fixes #15846\r\n\r\n[^1]: https://discord.com/channels/486935104384532500/486935104384532502/1332680061144403968","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15845","RelatedDescription":"Closed or merged PR \"Remove `min-w/h-none`\" (#15845)"},{"Id":"2811040948","IsPullRequest":false,"CreatedAt":"2025-01-25T16:59:13","Actor":"userquin","Number":"15856","RawContent":null,"Title":"why do we need to install rush and cargo to fix a simple ts file?","State":"closed","Body":"I'm trying to send a fix and I only need to modify 1 module in the tailwind package (1 line), but I need to install rush, cargo and visual studio libraries on my Windows laptop to build the repo (1.5GB) to check the fix.\n\nis there any chance to split the repo in multiple repositories (at least 2: one for rush stuff and other for ts)?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15856","RelatedDescription":"Closed issue \"why do we need to install rush and cargo to fix a simple ts file?\" (#15856)"},{"Id":"2811057847","IsPullRequest":true,"CreatedAt":"2025-01-25T16:14:00","Actor":"thecrypticace","Number":"15857","RawContent":null,"Title":"Fix IntelliSense class suggestions","State":"open","Body":"This PR fixes a few problems with IntelliSense:\r\n- Default installs suggest font weight utilities twice\r\n- When setting `--font-weight-*: initial;` the default weights are still suggested\r\n- Setting `--spacing-*: initial;` still shows suggestions for utilities using the spacing scale assuming it's multiplier-based. Removing the `--spacing: â€¦` key should make them entirely theme driven instead.\r\n- The default container query variants like `@sm`, `@md`, etcâ€¦ aren't suggested. Only the `@min-sm` and `@max-sm` style ones are.\r\n\r\nFixes https://github.com/tailwindlabs/tailwindcss-intellisense/issues/1133\r\nFixes https://github.com/tailwindlabs/tailwindcss-intellisense/issues/1136\r\nFixes #15811\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15857","RelatedDescription":"Open PR \"Fix IntelliSense class suggestions\" (#15857)"},{"Id":"2811028116","IsPullRequest":false,"CreatedAt":"2025-01-25T15:04:42","Actor":"homeboldham","Number":"15853","RawContent":null,"Title":"v4. build fails with dynamically created classnames + at-rules","State":"open","Body":"**What version of Tailwind CSS are you using?**\n\n4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nvite-6.0.11\n\n**What version of Node.js are you using?**\n\nv23.4.0\n\n**What browser are you using?**\n\nFirefox, but it doesn't matter\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nhttps://github.com/homeboldham/vite-tailwind-unknown-word \n\nit's a minimal vite + tailwind setup (using vite react ts template) and adding tailwind v4 via `@tailwindcss/vite` plugin.\n\n**Describe your issue**\n\nPlease check https://github.com/homeboldham/vite-tailwind-unknown-word/blob/main/src/App.tsx\nIf you have smth like `h-[${h}px]` in your source code, \nAND\nyou have `at-rule` in your css. For example, I add font import here:\nhttps://github.com/homeboldham/vite-tailwind-unknown-word/blob/main/src/index.css\n\nthen the build fails:\n```\n> vite-project@0.0.0 build\n> tsc -b && vite build\n\nvite v6.0.11 building for production...\nâœ“ 15 modules transformed.\nx Build failed in 100ms\nerror during build:\n[vite:css] [postcss] /Users/foo/github/vite-tailwind-atrule/src/index.css:524:15: Unknown word\nfile: /Users/foo/github/vite-tailwind-atrule/src/index.css:524:14\n    at Input.error (/Users/foo/github/vite-tailwind-atrule/node_modules/postcss/lib/input.js:109:16)\n    at Parser.unknownWord (/Users/foo/github/vite-tailwind-atrule/node_modules/postcss/lib/parser.js:593:22)\n    at Parser.other (/Users/foo/github/vite-tailwind-atrule/node_modules/postcss/lib/parser.js:435:12)\n    at Parser.parse (/Users/foo/github/vite-tailwind-atrule/node_modules/postcss/lib/parser.js:470:16)\n    at parse (/Users/foo/foo/vite-tailwind-atrule/node_modules/postcss/lib/parse.js:11:12)\n    at new LazyResult (/Users/foo/github/vite-tailwind-atrule/node_modules/postcss/lib/lazy-result.js:133:16)\n    at Processor.process (/Users/foo/github/vite-tailwind-atrule/node_modules/postcss/lib/processor.js:53:14)\n    at compileCSS (file:///Users/foo/github/vite-tailwind-atrule/node_modules/vite/dist/node/chunks/dep-M1IYMR16.js:48784:59)\n    at async Object.transform (file:///Users/foo/github/vite-tailwind-atrule/node_modules/vite/dist/node/chunks/dep-M1IYMR16.js:48039:11)\n    at async transform (file:///Users/foo/github/vite-tailwind-atrule/node_modules/rollup/dist/es/shared/node-entry.js:19794:16)\n```\n\nEverything works if it's just `@import` or `h-[${h}px]` alone. I can reproduce it only if they're both there.\n\nIt's not about `h-`. I believe any dynamically created className can cause this.\n\n(please disregard the rationale behind the component in the code â€“ I simplified it to nonsensical to reproduce the issue).\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15853","RelatedDescription":"Open issue \"v4. build fails with dynamically created classnames + at-rules\" (#15853)"},{"Id":"2810984996","IsPullRequest":false,"CreatedAt":"2025-01-25T13:31:01","Actor":"nickjj","Number":"15850","RawContent":null,"Title":"Tailwind v4: Applied styles on a base element are overtaking classes defined in an HTML file","State":"open","Body":"**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What version of Node.js are you using?**\n\nv22.13.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nWindows\n\n**Reproduction URL**\n\nHere's the bug with v4: https://play.tailwindcss.com/j4OJXVvyUb\n\nNotice how the link color is sky instead of gray.\n\nNow change the version to v3.4 and the link will become gray.\n\n**Describe your issue**\n\nWith v3 you could apply a color to a specific element and then choose to override that color as needed.\n\nThis is a really useful pattern where you can set a default color or style for something (such as links) and 80% of the time you can use that and then when you want a different style you can go into your HTML template and add the Tailwind classes to adjust it.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15850","RelatedDescription":"Open issue \"Tailwind v4: Applied styles on a base element are overtaking classes defined in an HTML file\" (#15850)"},{"Id":"2810981050","IsPullRequest":false,"CreatedAt":"2025-01-25T13:21:17","Actor":"reubenfirmin","Number":"15847","RawContent":null,"Title":"[V4] new import style doesn't work for node_modules in non-standard location (e.g. gradle)","State":"open","Body":"**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nGradle, but I've got a reproducible CLI example attached\n\n**What version of Node.js are you using?**\n\nFor example: v9.2.0\n\n**What browser are you using?**\n\nN/A\n\n**What operating system are you using?**\n\nLinux\n\n**Reproduction URL**\n\nhttps://github.com/reubenfirmin/tailwindv4-import-bug/\n\n**Describe your issue**\n\nTailwind v4 style imports do not work when the paths are in non-standard locations for the cli. Tailwind v3 worked fine with this setup.\n\nThis folder structure is typical of gradle projects; the input css would likely be in some resources folder, and the node_modules is managed under build/js. The repo above demonstrates the issue.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15847","RelatedDescription":"Open issue \"[V4] new import style doesn't work for node_modules in non-standard location (e.g. gradle)\" (#15847)"},{"Id":"2810967312","IsPullRequest":false,"CreatedAt":"2025-01-25T12:48:42","Actor":"cyberalien","Number":"15844","RawContent":null,"Title":"Cannot build plugin: types in `tailwindcss/plugin` are broken","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\n4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\ntypescript: 5.7.2\n\n**What version of Node.js are you using?**\n\n20.14.0\n\n**What operating system are you using?**\n\nmacOS 15.2\n\n**Reproduction URL**\n\nhttps://github.com/cyberalien/tailwind-plugin-bug\n\n**Describe your issue**\n\nReproduction includes a very basic plugin:\n```ts\nimport plugin from 'tailwindcss/plugin';\n\nconst exportedPlugin = plugin(() => {\n\treturn ({ matchComponents }) => {\n\t\tmatchComponents({\n\t\t\ttest: (content: string) => {\n\t\t\t\treturn {\n\t\t\t\t\tcolor: content,\n\t\t\t\t};\n\t\t\t},\n\t\t});\n\t};\n});\n\nexport default exportedPlugin;\n```\nOn line 3 TypeScript throws the following error:\n```\nsrc/plugin.ts:3:7 - error TS2742: The inferred type of 'exportedPlugin' cannot be named without a reference to '../node_modules/tailwindcss/dist/types-BTRmm49E.mjs'. This is likely not portable. A type annotation is necessary.\n\n3 const exportedPlugin = plugin(() => {\n        ~~~~~~~~~~~~~~\n```\nBuilding it using `tsc -b`.\n\nRemoved all unnecessary dependencies and packages to show smallest possible reproduction.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15844","RelatedDescription":"Open issue \"Cannot build plugin: types in `tailwindcss/plugin` are broken\" (#15844)"}],"ResultType":"GitHubIssue"}},"RunOn":"2025-01-27T03:30:24.7783272Z","RunDurationInMilliseconds":390}