{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2574185269","IsPullRequest":true,"CreatedAt":"2024-10-08T20:50:29","Actor":"adamwathan","Number":"14625","RawContent":null,"Title":"Don't set `display: none` on elements that use `hidden=\"until-found\"`","State":"open","Body":"Fixes an issue reported by the React Aria Components team here:\r\n\r\nhttps://github.com/adobe/react-spectrum/issues/7160\r\n\r\nBasically `hidden=\"until-found\"` behaves very differently than `hidden` and doesn't actually use `display: none`, so we don't want to apply the behavior we apply for the regular `hidden` attribute.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14625","RelatedDescription":"Open PR \"Don't set `display: none` on elements that use `hidden=\"until-found\"`\" (#14625)"},{"Id":"2566687789","IsPullRequest":true,"CreatedAt":"2024-10-08T16:06:44","Actor":"philipp-spiess","Number":"14600","RawContent":null,"Title":"Fix template migration issues","State":"closed","Body":"This PR fixes two issues we found when testing the candidate codemodes:\r\n\r\n1. Sometimes, core would emit the same candidate twice. This would result into rewriting a range multiple times, without realizing that this change might already be applied, causing it to swallow or duplicate some bytes.\r\n2. The codemods were mutating the `Candidate` object, however since the `Candidate` parsing is _cached_ in core, it would sometimes return the same instance. This is an issue especially since we monkey patch the prefix to `null` when migrating prefixed candidates. This means that a candidate would be cached that would be _invalid relative to the real design system_. We fixed this by making sure the mutations would only be applied to clones of the `Candidate` and I changed the `DesignSystem` API to return `ReadOnly<T>` versions of these candidates. A better solution would maybe be to disable the cache at all but this requires broader changes in Core.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14600","RelatedDescription":"Closed or merged PR \"Fix template migration issues\" (#14600)"},{"Id":"2573131324","IsPullRequest":false,"CreatedAt":"2024-10-08T13:47:13","Actor":"Matheun","Number":"14622","RawContent":null,"Title":"[V4]: Custom keyframes in `@theme` won't apply correctly","State":"closed","Body":"For some reason, the custom keyframes in my theme config wont correctly apply in my component layer. i'm using scss files","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14622","RelatedDescription":"Closed issue \"[V4]: Custom keyframes in `@theme` won't apply correctly\" (#14622)"},{"Id":"2564298944","IsPullRequest":true,"CreatedAt":"2024-10-08T11:48:32","Actor":"philipp-spiess","Number":"14587","RawContent":null,"Title":"Try out namespace GitHub Actions workers","State":"closed","Body":"We're trialing [namespace.so](https://namespace.so/) for their custom GitHub Action workers. So far we're seeing an improvement of 3 minutes in our pipeline (used to take 6min 30sec and now it's 3min 30sec, an almost 50% improvement!).\r\n\r\nWe can always revert this PR, but I recommend we try it out by enabling it for our CI for the next few days.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14587","RelatedDescription":"Closed or merged PR \"Try out namespace GitHub Actions workers\" (#14587)"},{"Id":"2571488883","IsPullRequest":true,"CreatedAt":"2024-10-08T11:47:55","Actor":"RobinMalfait","Number":"14618","RawContent":null,"Title":"Make custom `@at-root` private API","State":"closed","Body":"This PR makes the internal `@at-root` API private. Before this PR you could use `@at-root` in your own CSS, which means that it was part of the public API. If you (accidentally) used it in variants, you could generate CSS that was completely broken.\n\nThis now introduces a new private `AtRoot` node (similar to the recently introduced `Context` node) and can only be constructed within the framework.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14618","RelatedDescription":"Closed or merged PR \"Make custom `@at-root` private API\" (#14618)"},{"Id":"2572836017","IsPullRequest":false,"CreatedAt":"2024-10-08T10:53:00","Actor":"The-io-dev","Number":"14621","RawContent":null,"Title":"BroadPattern check is still quite resource hungry","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n3.4.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nnx@19.7.2 monorepo with angular@18.2.4 apps and libs, with esbuild\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.17.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nI tried to make a reproduction link but due to the source of the problem, making a reproduction link is tedious. There would be the need to make many libs, with many components.\r\n\r\nIf the description of the issues doesn't give satisfaction, i will try again to make scripts to make a repo big enough\r\n\r\n**Describe your issue**\r\n\r\nThe issues comes from this PR #14140.\r\n\r\nWhat happens is : \r\n- nx automatically creates patterns with `createGlobPatternsForDependencies` (finds all libs to be included in tailwind compilation)\r\n  - in our project, that may mean 150 libs, times two since we parse `.ts` and `.html` files, so 300 paths.\r\n- when we check for the alert, for each file, we check if the path match with any paths, resulting in great amount of checks.\r\n\r\nWhen compiling prior to this version or comment the feature, we compile in *~90 seconds* with the check, it takes *~180 seconds*.\r\n\r\nWhen removing the use of `createGlobPatternsForDependencies` and switching to a wider pattern, we still get *~105 seconds* and could be considered a loss (we would be generating the same big CSS file for each of or application, regardless of what it actually needs)\r\n\r\nWhen upgrading to the 3.4.13 version where an optimization was implemented, we get *~120 seconds*, witch is still quite long.\r\n\r\nPS: i should add that tailwind being recompiled on serve, the X seconds increase of compilation times makes live development that much more painful, transforming a few needed seconds into a minute of waiting, maybe more.\r\n\r\nCould there be an option to remove this check entirely for thoses who are sure of their patterns and look for performance ?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14621","RelatedDescription":"Open issue \"BroadPattern check is still quite resource hungry\" (#14621)"},{"Id":"2571186534","IsPullRequest":true,"CreatedAt":"2024-10-07T18:42:24","Actor":"thecrypticace","Number":"14617","RawContent":null,"Title":"Migrate utilities in CSS files imported into layers","State":"open","Body":"When a stylesheet is imported with `@import “…” layer(utilities)` that means that all classes in that stylesheet and any of its imported stylesheets become candidates for `@utility` conversion.\r\n\r\nDoing this correctly requires us to place `@utility` rules into separate stylesheets (usually) and replicate the import tree without layers as `@utility` MUST be root-level. If a file consists of only utilities we won't create a separate file for it and instead place the `@utility` rules in the same stylesheet.\r\n\r\nBeen doing a LOT of pairing with @RobinMalfait on this one but I think this is finally ready to be looked at","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14617","RelatedDescription":"Open PR \"Migrate utilities in CSS files imported into layers\" (#14617)"},{"Id":"2570870266","IsPullRequest":true,"CreatedAt":"2024-10-07T16:03:25","Actor":"philipp-spiess","Number":"14616","RawContent":null,"Title":"Fix CLI client crash when a file is removed before we process the change notification","State":"open","Body":"Fixes #14613\r\n\r\nDon't crash when trying to read the modification time of a file that might already be deleted. \r\n\r\nNote: This fix is purely theoretical right now as I wasn't able to reproduce the issue yet.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14616","RelatedDescription":"Open PR \"Fix CLI client crash when a file is removed before we process the change notification\" (#14616)"},{"Id":"2566258821","IsPullRequest":true,"CreatedAt":"2024-10-07T16:02:28","Actor":"philipp-spiess","Number":"14597","RawContent":null,"Title":"Ensure upgrade tool has access to a JS config","State":"closed","Body":"In order to properly migrate your Tailwind CSS v3 project to v4, we need access to the JavaScript configuration object. This was previously only required for template migrations, but in this PR we're making it so that this is also a prerequisite of the CSS migrations. This is because some migrations, like `@apply`, also need to convert candidates that to the v4 syntax and we need the full config in order to properly validate them.\r\n\r\nIn addition to requiring a JS config, we also now attempt to automatically find the right configuration file inside the current working directory. This is now matching the behavior of the Tailwind CSS v3 CLI where it will find the config automatically if it's in the current directory and called `tailwind.conf.js`.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14597","RelatedDescription":"Closed or merged PR \"Ensure upgrade tool has access to a JS config\" (#14597)"},{"Id":"2570632462","IsPullRequest":true,"CreatedAt":"2024-10-07T14:35:34","Actor":"philipp-spiess","Number":"14614","RawContent":null,"Title":"Fix CSS `theme()` function resolution issue","State":"open","Body":"This PR fixes two issues we've encountered when testing the CSS `theme()` function while upgrading Tailwind Templates to v4 using our upgrading toolkit. \r\n\r\n1. The light-weight compatibility resolver was trying to convert `theme(spacing.1)` to tuple syntax. Tuples require a nested property access, though, and instead this should be convert to `theme(--spacing-1)`.\r\n2. We currently only load the JS plugin interop layer if `@plugin` or `@config` directives are used. It is possible, though, that we need the full compat mapping in other cases as well. One example we encountered is `theme(fontWeight.semibold)` which maps to a dictionary in the default theme that that we do not have an equivalent for in v4 variables. To fix this, I know upgrade the theme resolver to a full JS compat one if we can't resolve a key in the simpler compat resolver.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14614","RelatedDescription":"Open PR \"Fix CSS `theme()` function resolution issue\" (#14614)"},{"Id":"2570354517","IsPullRequest":false,"CreatedAt":"2024-10-07T12:51:49","Actor":"krompaco","Number":"14613","RawContent":null,"Title":"Temporary files created and removed causing cli to crash with ENOENT no such file or directory lstat error","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.26\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nnpx @tailwindcss/cli@next -i ./styles.css -o ./wwwroot/dist/styles.css --postcss --watch --verbose\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.9.0\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Describe your issue**\r\n\r\nThe watcher in the cli crashes quite frequently. It can work for hours so this is not a massive blocker - in general v4 is great!\r\n\r\n```\r\n..\r\nDone in 1ms <<< It works for a awhile but then an edit can get this thrown:\r\nnode:internal/process/promises:289\r\n            triggerUncaughtException(err, true /* fromPromise */);\r\n            ^\r\n\r\n[Error: ENOENT: no such file or directory, lstat 'C:\\a-full-path\\in-a-dotnet-project\\1jufg13t.3fy~'] {\r\n  errno: -4058,\r\n  code: 'ENOENT',\r\n  syscall: 'lstat',\r\n  path: 'C:\\\\a-full-path\\\\in-a-dotnet-project\\\\1jufg13t.3fy~'\r\n}\r\n```\r\n\r\nThe files ending with ~ are not part of my project. I think they are used to swap compiled bits of code when running my dotnet web project and doing hot reload. Or they are just temporary files that exists for a shorter while during compilation/build.\r\n\r\nMaybe the error handling can be improved or the list of watched files (if there is one) needs to adapt more quickly on temp files being added and removed in the space?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14613","RelatedDescription":"Open issue \"Temporary files created and removed causing cli to crash with ENOENT no such file or directory lstat error\" (#14613)"},{"Id":"2570334280","IsPullRequest":true,"CreatedAt":"2024-10-07T12:43:22","Actor":"philipp-spiess","Number":"14612","RawContent":null,"Title":"Migrate simple PostCSS setup","State":"open","Body":"This PR attempts to detect simple postcss setups: These are setups that do not load dynamic modules and are based off the examples we are [recommending in our docs](https://tailwindcss.com/docs/installation/using-postcss). We detect wether a config is appropriate by having it use the object plugin config and by not requiring any other modules:\r\n\r\n```js\r\nmodule.exports = {\r\n  plugins: {\r\n    tailwindcss: {},\r\n    autoprefixer: {},\r\n  },\r\n}\r\n```\r\n\r\nWhen we find such a config file, we will go over it line-by-line and attempt to:\r\n\r\n- Upgrade `tailwindcss:` to `'@tailwindcss/postcss':`\r\n- Remove `autoprefixer` if used\r\n\r\nWe then attempt to install and remove the respective npm packages based on the package manger we detect.\r\n\r\nAnd since we now have logic to upgrade packages, this also makes sure to install `tailwindcss@next` at the end of a sucessful migration. ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14612","RelatedDescription":"Open PR \"Migrate simple PostCSS setup\" (#14612)"},{"Id":"2569867973","IsPullRequest":true,"CreatedAt":"2024-10-07T09:38:01","Actor":"RobinMalfait","Number":"14611","RawContent":null,"Title":"Pretty print `!important` in declarations","State":"closed","Body":"This PR is a very small improvement. We started pretty printing the generated CSS (proper indentation) a while ago, so that we can use the output as-is for intellisense (on hover).\n\nThe other day I noticed that when you use `!important` that we attach it directly to the declaration. Not the end of the world, but this PR injects a little space to make sure that the `!important` is separated from the value which makes it a little easier to read and looks more like what you would write by hand.\n\nBefore:\n```css\n.flex\\! {\n  display: flex!important;\n}\n```\n\nAfter:\n```css\n.flex\\! {\n  display: flex !important;\n}\n```\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14611","RelatedDescription":"Closed or merged PR \"Pretty print `!important` in declarations\" (#14611)"},{"Id":"2568065534","IsPullRequest":true,"CreatedAt":"2024-10-07T09:25:00","Actor":"depfu[bot]","Number":"14608","RawContent":null,"Title":"Update bun 1.1.26 → 1.1.29 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ bun (1.1.22 → 1.1.29) · [Repo](https://github.com/oven-sh/bun)\n\n\n\n\n\nSorry, we couldn't find anything useful about this release.\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14608","RelatedDescription":"Closed or merged PR \"Update bun 1.1.26 → 1.1.29 (patch)\" (#14608)"},{"Id":"2568100599","IsPullRequest":false,"CreatedAt":"2024-10-05T14:10:36","Actor":"topherfangio","Number":"14609","RawContent":null,"Title":"Support the :where pseudo-class","State":"closed","Body":"Most browsers now support the `:where()` pseudo-class which allows you to reduce the specificity of an added class allowing other classes to take precedence.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/:where\r\n\r\nWhen building custom Tailwind components, this allows us to add some default classes to our components that can be easily overridden by users' custom classes without resorting to the `!important` variant that Tailwind provides.\r\n\r\nI'm currently doing this by defining a custom selector in my code, but this looks messy and makes the code a bit less readable.\r\n\r\n```haml\r\n#some_element{ class: \"[:where(&)]:text-lg [:where(&)]:text-red-400\" }\r\n```\r\n\r\nIf it was fully supported, my code would look much cleaner:\r\n\r\n\r\n```haml\r\n#some_element{ class: \"where:text-lg where:text-red-400\" }\r\n```\r\n\r\nTailwind [already supports](https://tailwindcss.com/docs/hover-focus-and-other-states#quick-reference) most of the other modifiers out of the box, and although we can easily add this through a custom variant / plugin, it seems like it would be useful to have in the base library.\r\n\r\nWould love to know if there was a particular reason that it was left out or if it causes trouble when added!\r\n\r\nThank you! I really love using Tailwind ❤️ ","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14609","RelatedDescription":"Closed issue \"Support the :where pseudo-class\" (#14609)"},{"Id":"2568061256","IsPullRequest":true,"CreatedAt":"2024-10-05T13:38:11","Actor":"benface","Number":"14607","RawContent":null,"Title":"Add safe alignment utilities","State":"open","Body":"Fixes #7929 and #12916\r\n\r\nThis PR adds [safe alignment utilities](https://www.stefanjudis.com/today-i-learned/safe-unsafe-alignment-in-css-flexbox/) to Tailwind 4. I opted to include them for every justify/align content/items/self property, but only for the `end` and `center` values. I know that it doesn't make sense for `start` (as the point of safe alignment is to fall back to `start` when it overflows), but I'm not sure about `space-between`, `space-around`, or other values. I certainly never encountered a situation where I needed `safe` with those.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14607","RelatedDescription":"Open PR \"Add safe alignment utilities\" (#14607)"},{"Id":"2567725623","IsPullRequest":true,"CreatedAt":"2024-10-05T08:01:39","Actor":"bogdan","Number":"14605","RawContent":null,"Title":"Avoid printing the entire file source code on error when watching","State":"open","Body":"Avoid printing the entire source file to console when watcher encounters an error.\r\n\r\nCurrently, the `CssSyntaxError` is highly unreadable when printed because the source file is printed entirely after the backtrace which makes it necessary to scroll up the console to see more useful information.\r\nThis patch only leaves the part that is usually useful: file name, line color, error message and backtrace:\r\n\r\n```\r\nRebuilding...\r\nCssSyntaxError: tailwindcss: /Users/bogdan/makabu/brad/seven-figures/app/assets/stylesheets/application.tailwind.css:9:5: The `qq` class does not exist. If `qq` is a custom class, make sure it is defined within a `@layer` directive.\r\n    at Input.error (/Users/bogdan/makabu/brad/seven-figures/node_modules/postcss/lib/input.js:106:16)\r\n    at AtRule.error (/Users/bogdan/makabu/brad/seven-figures/node_modules/postcss/lib/node.js:115:32)\r\n    at processApply (/Users/bogdan/makabu/brad/seven-figures/node_modules/tailwindcss/lib/lib/expandApplyAtRules.js:380:29)\r\n    at /Users/bogdan/makabu/brad/seven-figures/node_modules/tailwindcss/lib/lib/expandApplyAtRules.js:551:9\r\n    at /Users/bogdan/makabu/brad/seven-figures/node_modules/tailwindcss/lib/processTailwindFeatures.js:55:50\r\n    at async Object.Once (/Users/bogdan/makabu/brad/seven-figures/node_modules/tailwindcss/lib/cli/build/plugin.js:246:17)\r\n    at async LazyResult.runAsync (/Users/bogdan/makabu/brad/seven-figures/node_modules/postcss/lib/lazy-result.js:261:11)\r\n    at async Object.watch (/Users/bogdan/makabu/brad/seven-figures/node_modules/tailwindcss/lib/cli/build/plugin.js:371:13)\r\n    at async build (/Users/bogdan/makabu/brad/seven-figures/node_modules/tailwindcss/lib/cli/build/index.js:47:9)\r\n```\r\n\r\n<details>\r\n<summary> Example Before the patch</summary>\r\n\r\n```\r\nRebuilding...\r\nCssSyntaxError: tailwindcss: /Users/bogdan/makabu/brad/seven-figures/app/assets/stylesheets/application.tailwind.css:9:5: The `qq` class does not exist. If `qq` is a custom class, make sure it is defined within a `@layer` directive.\r\n    at Input.error (/snapshot/tailwindcss/node_modules/postcss/lib/input.js:106:16)\r\n    at AtRule.error (/snapshot/tailwindcss/node_modules/postcss/lib/node.js:115:32)\r\n    at processApply (/snapshot/tailwindcss/lib/lib/expandApplyAtRules.js:380:29)\r\n    at /snapshot/tailwindcss/lib/lib/expandApplyAtRules.js:551:9\r\n    at /snapshot/tailwindcss/lib/processTailwindFeatures.js:55:50\r\n    at async Object.Once (/snapshot/tailwindcss/lib/cli/build/plugin.js:245:17)\r\n    at async LazyResult.runAsync (/snapshot/tailwindcss/node_modules/postcss/lib/lazy-result.js:261:11)\r\n    at async Object.watch (/snapshot/tailwindcss/lib/cli/build/plugin.js:370:13)\r\n    at async build (/snapshot/tailwindcss/lib/cli/build/index.js:47:9) {\r\n  reason: 'The `qq` class does not exist. If `qq` is a custom class, make sure it is defined within a `@layer` directive.',\r\n  file: '/Users/bogdan/makabu/brad/seven-figures/app/assets/stylesheets/application.tailwind.css',\r\n  source: '@import \"choices.css\";\\n' +\r\n    '\\n' +\r\n    '@tailwind base;\\n' +\r\n    '@tailwind components;\\n' +\r\n    '@tailwind utilities;\\n' +\r\n    '\\n' +\r\n    '@layer components {\\n' +\r\n    '  .page-header {\\n' +\r\n    '    @apply text-4xl font-bold mb-4 text-center qq; \\n' +\r\n    '  }\\n' +\r\n    '  .card-standard {\\n' +\r\n    '    @apply bg-white shadow-xl dark:bg-gray-800;\\n' +\r\n    '  };\\n' +\r\n    '  .card-central {\\n' +\r\n    '    @apply mx-auto max-w-lg w-full;\\n' +\r\n    '  }\\n' +\r\n    '  .text-fade {\\n' +\r\n    '    @apply text-base-300;\\n' +\r\n    '  }\\n' +\r\n    '  .admin-filters-grid {\\n' +\r\n    '    /* @apply columns-1 sm:columns-2 lg:columns-3 2xl:columns-4 w-full break-inside-avoid */\\n' +\r\n    '    /* @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 w-full */\\n' +\r\n    '  }\\n' +\r\n    '  .h1 {\\n' +\r\n    '    @apply text-4xl\\n' +\r\n    '  }\\n' +\r\n    '  .h2 {\\n' +\r\n    '    @apply text-3xl\\n' +\r\n    '  }\\n' +\r\n    '  .h3 {\\n' +\r\n    '    @apply text-2xl\\n' +\r\n    '  }\\n' +\r\n    '  .h4 {\\n' +\r\n    '    @apply text-xl\\n' +\r\n    '  }\\n' +\r\n    '  .h5 {\\n' +\r\n    '    @apply text-lg\\n' +\r\n    '  }\\n' +\r\n    '}\\n' +\r\n    '\\n' +\r\n    'input[type=\"number\"]::-webkit-outer-spin-button, input[type=\"number\"]::-webkit-inner-spin-button {\\n' +\r\n    '  -webkit-appearance: none;\\n' +\r\n    '  margin: 0;\\n' +\r\n    '}\\n' +\r\n    '\\n' +\r\n    'input[type=\"number\"] {\\n' +\r\n    '  -moz-appearance: textfield;\\n' +\r\n    '}\\n' +\r\n    '.field-with-errors {\\n' +\r\n    '  display: contents;\\n' +\r\n    '}\\n',\r\n  line: 9,\r\n  column: 5,\r\n  endLine: 9,\r\n  endColumn: 51,\r\n  input: {\r\n    column: 5,\r\n    endColumn: 51,\r\n    endLine: 9,\r\n    line: 9,\r\n    source: '@import \"choices.css\";\\n' +\r\n      '\\n' +\r\n      '@tailwind base;\\n' +\r\n      '@tailwind components;\\n' +\r\n      '@tailwind utilities;\\n' +\r\n      '\\n' +\r\n      '@layer components {\\n' +\r\n      '  .page-header {\\n' +\r\n      '    @apply text-4xl font-bold mb-4 text-center qq; \\n' +\r\n      '  }\\n' +\r\n      '  .card-standard {\\n' +\r\n      '    @apply bg-white shadow-xl dark:bg-gray-800;\\n' +\r\n      '  };\\n' +\r\n      '  .card-central {\\n' +\r\n      '    @apply mx-auto max-w-lg w-full;\\n' +\r\n      '  }\\n' +\r\n      '  .text-fade {\\n' +\r\n      '    @apply text-base-300;\\n' +\r\n      '  }\\n' +\r\n      '  .admin-filters-grid {\\n' +\r\n      '    /* @apply columns-1 sm:columns-2 lg:columns-3 2xl:columns-4 w-full break-inside-avoid */\\n' +\r\n      '    /* @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 w-full */\\n' +\r\n      '  }\\n' +\r\n      '  .h1 {\\n' +\r\n      '    @apply text-4xl\\n' +\r\n      '  }\\n' +\r\n      '  .h2 {\\n' +\r\n      '    @apply text-3xl\\n' +\r\n      '  }\\n' +\r\n      '  .h3 {\\n' +\r\n      '    @apply text-2xl\\n' +\r\n      '  }\\n' +\r\n      '  .h4 {\\n' +\r\n      '    @apply text-xl\\n' +\r\n      '  }\\n' +\r\n      '  .h5 {\\n' +\r\n      '    @apply text-lg\\n' +\r\n      '  }\\n' +\r\n      '}\\n' +\r\n      '\\n' +\r\n      'input[type=\"number\"]::-webkit-outer-spin-button, input[type=\"number\"]::-webkit-inner-spin-button {\\n' +\r\n      '  -webkit-appearance: none;\\n' +\r\n      '  margin: 0;\\n' +\r\n      '}\\n' +\r\n      '\\n' +\r\n      'input[type=\"number\"] {\\n' +\r\n      '  -moz-appearance: textfield;\\n' +\r\n      '}\\n' +\r\n      '.field-with-errors {\\n' +\r\n      '  display: contents;\\n' +\r\n      '}\\n',\r\n    url: 'file:///Users/bogdan/makabu/brad/seven-figures/app/assets/stylesheets/application.tailwind.css',\r\n    file: '/Users/bogdan/makabu/brad/seven-figures/app/assets/stylesheets/application.tailwind.css'\r\n  },\r\n  plugin: 'tailwindcss'\r\n}\r\n```\r\n</details>","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14605","RelatedDescription":"Open PR \"Avoid printing the entire file source code on error when watching\" (#14605)"},{"Id":"2567541165","IsPullRequest":true,"CreatedAt":"2024-10-04T23:52:38","Actor":"RobinMalfait","Number":"14603","RawContent":null,"Title":"Migrate `@media screen(…)`","State":"open","Body":"This PR adds a codemod that migrates the `@media screen(…)` to the properly expanded `@media (…)` syntax.\n\n```css\n@media screen(md) {\n  .foo {\n    color: red;\n  }\n}\n```\n\nWill be converted to:\n```css\n@media (width >= 48rem) {\n  .foo {\n    color: red;\n  }\n}\n```\n\nIf you happen to have custom screens (even complex ones), the screen will be converted to a custom media query.\n\n```css\n@media screen(foo) {\n  .foo {\n    color: red;\n  }\n}\n```\nWith a custom `tailwind.config.js` file with a config like this:\n```js\nmodule.exports = {\n  // …\n  theme: {\n    screens: {\n      foo: { min: '100px', max: '123px' },\n    },\n  }\n}\n```\n\nThen the codemod will convert it to:\n```css\n@media (123px >= width >= 100px) {\n  .foo {\n    color: red;\n  }\n}\n```\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14603","RelatedDescription":"Open PR \"Migrate `@media screen(…)`\" (#14603)"},{"Id":"2566669561","IsPullRequest":false,"CreatedAt":"2024-10-04T15:44:06","Actor":"fcrozatier","Number":"14599","RawContent":null,"Title":"@plugin directive can't be overridden","State":"open","Body":"Tailwind v4-alpha.26\r\nSvelte v5-alpha.262\r\nNode v22\r\nChrome v129\r\nmacOS\r\n\r\nrepo: https://github.com/fcrozatier/tailwind-media-modifiers\r\n\r\n**Issue**\r\n\r\nHey!\r\n\r\nThis is a follow up to #14551.\r\n\r\nThe `@plugin` directive doesn't allow to both customize the defaults and still be able to override these modifications in one-off situations without using the `!important` modifier.\r\n\r\nI have to import the prose gist instead of using the prose plugin to fix this    \r\n\r\nOverriding the `@utility` directive works fine on the other hand\r\n\r\n**Reproduction**\r\n\r\n`pnpm i`, `pnpm dev`. Layers and classes in `src/app.css`, `src/routes/+page.svelte` \r\n\r\nAnd thank you for the awesome work on v4","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14599","RelatedDescription":"Open issue \"@plugin directive can't be overridden\" (#14599)"},{"Id":"2566354268","IsPullRequest":false,"CreatedAt":"2024-10-04T13:49:41","Actor":"fcrozatier","Number":"14598","RawContent":null,"Title":"Responsive classes do not work","State":"closed","Body":"Tailwind v4-alpha.26\r\nSvelte v5-alpha.262\r\nNode v22\r\nChrome v129 \r\nmacOS\r\n\r\nrepo: https://github.com/fcrozatier/tailwind-media-modifiers\r\n\r\n**Issue**\r\n\r\nthe responsive modifiers `sm:*`, `md:*` do not work with custom classes, like `sm:[.btn-sm] md:[.btn-md]`\r\n\r\nreproduction: `pnpm i`, `pnpm dev`, resize window. Modify layers and classes in `src/app.css`, `src/routes/+page.svelte` and `src/routes/Component.svelte`","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14598","RelatedDescription":"Closed issue \"Responsive classes do not work\" (#14598)"},{"Id":"2566037983","IsPullRequest":true,"CreatedAt":"2024-10-04T13:38:56","Actor":"philipp-spiess","Number":"14595","RawContent":null,"Title":"Add `*.js` export variants for compat files","State":"closed","Body":"In v3 it was possible to import `*.js` variants of compat files, e.g. `tailwindcss/plugin.js` in addition to `tailwindcss/plugin`. We need to properly map the exports to support this.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14595","RelatedDescription":"Closed or merged PR \"Add `*.js` export variants for compat files\" (#14595)"},{"Id":"2566022194","IsPullRequest":true,"CreatedAt":"2024-10-04T11:58:30","Actor":"philipp-spiess","Number":"14594","RawContent":null,"Title":"Support keyframes in JS theme config","State":"closed","Body":"Adds support for defining `keyframes` via the v3 JS config file. E.g.:\r\n\r\n```js\r\nmodule.exports = {\r\n  theme: {\r\n    extends: {\r\n      keyframes: {\r\n        \"fade-in\": {\r\n          \"0%\": { opacity: \"0\" },\r\n          \"100%\": { opacity: \"1\" },\r\n        },\r\n        \"fade-out\": {\r\n          \"0%\": { opacity: \"1\" },\r\n          \"100%\": { opacity: \"0\" },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14594","RelatedDescription":"Closed or merged PR \"Support keyframes in JS theme config\" (#14594)"},{"Id":"2566049073","IsPullRequest":true,"CreatedAt":"2024-10-04T10:47:05","Actor":"RobinMalfait","Number":"14596","RawContent":null,"Title":"Ensure CSS before a layer stays unlayered","State":"closed","Body":"This PR fixes an issue where CSS that existed before a layer:\n\n```css\n.foo {\n  color: red;\n}\n\n@layer components {\n  .bar {\n    color: blue;\n  }\n}\n```\n\nWas turned into an `@layer` without a name:\n```css\n@layer {\n  .foo {\n    color: red;\n  }\n}\n\n@utility bar {\n  color: blue;\n}\n```\n\nBut in this case, it should stay as-is:\n```css\n.foo {\n  color: red;\n}\n\n@utility bar {\n  color: blue;\n}\n```\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14596","RelatedDescription":"Closed or merged PR \"Ensure CSS before a layer stays unlayered\" (#14596)"},{"Id":"2564939702","IsPullRequest":true,"CreatedAt":"2024-10-04T09:58:20","Actor":"thecrypticace","Number":"14588","RawContent":null,"Title":"Don’t crash when scanning candidate matching the prefix","State":"closed","Body":"When a prefix is set in a stylesheet and we found a candidate that is equal to the prefix we would crash:\r\n```css\r\n@import \"tailwindcss\" prefix(tomato);\r\n```\r\n\r\n```js\r\nconsole.log(\"tomato\")\r\n```\r\n\r\nThis PR fixes this case by ensuring that we have something that looks like a variant before considering a prefix.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14588","RelatedDescription":"Closed or merged PR \"Don’t crash when scanning candidate matching the prefix\" (#14588)"},{"Id":"2565870486","IsPullRequest":true,"CreatedAt":"2024-10-04T09:35:25","Actor":"philipp-spiess","Number":"14593","RawContent":null,"Title":"Don't crash when encountering a candidate that is only the prefix","State":"closed","Body":"If you have a prefix in your project (like `prefix(potato)`) and one of your template files contains `potato`, Tailwind currently crashes. We need to assert that Candidates require at least a \"base\" part. ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14593","RelatedDescription":"Closed or merged PR \"Don't crash when encountering a candidate that is only the prefix\" (#14593)"},{"Id":"2565192512","IsPullRequest":true,"CreatedAt":"2024-10-04T00:21:40","Actor":"thecrypticace","Number":"14590","RawContent":null,"Title":"Pass options when using `addComponents` and `matchComponents`","State":"open","Body":"WIP (needs tests)","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14590","RelatedDescription":"Open PR \"Pass options when using `addComponents` and `matchComponents`\" (#14590)"},{"Id":"2565171509","IsPullRequest":true,"CreatedAt":"2024-10-03T23:55:58","Actor":"thecrypticace","Number":"14589","RawContent":null,"Title":"Ensure auto complete suggestions work when using `matchUtilities`","State":"open","Body":"Discovered `matchUtilities(…)` wasn't populating intellisense on v4 when working on Tailwind Play earlier today. This PR fixes this so plugins using matchUtilities also have intellisense suggestions.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14589","RelatedDescription":"Open PR \"Ensure auto complete suggestions work when using `matchUtilities`\" (#14589)"},{"Id":"2564236491","IsPullRequest":true,"CreatedAt":"2024-10-03T15:11:23","Actor":"philipp-spiess","Number":"14586","RawContent":null,"Title":"Update CI wording","State":"closed","Body":"We want to include a link to the build.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14586","RelatedDescription":"Closed or merged PR \"Update CI wording\" (#14586)"},{"Id":"2564216454","IsPullRequest":true,"CreatedAt":"2024-10-03T14:37:24","Actor":"philipp-spiess","Number":"14585","RawContent":null,"Title":"Bring back `rust-toolchain.toml`","State":"closed","Body":"We accidentally removed this in #14565.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14585","RelatedDescription":"Closed or merged PR \"Bring back `rust-toolchain.toml`\" (#14585)"},{"Id":"2563824986","IsPullRequest":true,"CreatedAt":"2024-10-03T12:40:07","Actor":"philipp-spiess","Number":"14584","RawContent":null,"Title":"Add binary extensions found in macOS traces","State":"closed","Body":"While we were doing some tracing for Rust memory issues, we noticed that the builds became slower and slower. Turns out we did store the macOS `.trace` dirs within the auto content directory of the Tailwind CSS instance we were profiling and that _some of the files were massive binary files that we were now scanning_.\r\n\r\nHere's the anatomy of a single trace:\r\n\r\n\r\n```\r\n[ 320]  .\r\n├── [497K]  form.template\r\n├── [5.1K]  open.creq\r\n├── [ 261]  UI_state_metadata.bin\r\n├── [ 160]  corespace\r\n│   ├── [1.2K]  MANIFEST.plist\r\n│   ├── [  96]  currentRun\r\n│   │   └── [  96]  core\r\n│   │       └── [ 128]  uniquing\r\n│   │           ├── [ 128]  arrayUniquer\r\n│   │           │   ├── [10.0K]  integeruniquer.data\r\n│   │           │   └── [   0]  integeruniquer.index\r\n│   │           └── [ 128]  typedArrayUniquer\r\n│   │               ├── [10.0K]  integeruniquer.data\r\n│   │               └── [   0]  integeruniquer.index\r\n│   └── [  96]  run1\r\n│       └── [ 192]  core\r\n│           ├── [ 224]  uniquing\r\n│           │   ├── [6.5K]  EngineeringTypes.etypes\r\n│           │   ├── [3.5K]  strings\r\n│           │   ├── [ 344]  TOC\r\n│           │   ├── [ 128]  arrayUniquer\r\n│           │   │   ├── [1.1K]  integeruniquer.data\r\n│           │   │   └── [  96]  integeruniquer.index\r\n│           │   └── [ 128]  typedArrayUniquer\r\n│           │       ├── [1.0K]  integeruniquer.data\r\n│           │       └── [  28]  integeruniquer.index\r\n│           ├── [ 192]  stores\r\n│           │   ├── [ 224]  indexed-store-0\r\n│           │   │   ├── [1.6K]  bulkstore\r\n│           │   │   ├── [1.2K]  spindex.0\r\n│           │   │   ├── [1.1K]  bulkstore_descriptor\r\n│           │   │   ├── [ 433]  spec.plist\r\n│           │   │   └── [ 188]  schema.xml\r\n│           │   ├── [ 224]  indexed-store-1\r\n│           │   │   ├── [7.5K]  bulkstore\r\n│           │   │   ├── [7.0K]  spindex.0\r\n│           │   │   ├── [1.6K]  bulkstore_descriptor\r\n│           │   │   ├── [ 522]  spec.plist\r\n│           │   │   └── [ 352]  schema.xml\r\n│           │   ├── [ 224]  indexed-store-2\r\n│           │   │   ├── [ 17K]  bulkstore\r\n│           │   │   ├── [7.2K]  spindex.0\r\n│           │   │   ├── [2.0K]  bulkstore_descriptor\r\n│           │   │   ├── [ 532]  spec.plist\r\n│           │   │   └── [ 412]  schema.xml\r\n│           │   └── [ 192]  indexed-store-3\r\n│           │       ├── [1.8K]  bulkstore_descriptor\r\n│           │       ├── [ 426]  spec.plist\r\n│           │       ├── [ 399]  schema.xml\r\n│           │       └── [  50]  bulkstore\r\n│           ├── [  96]  core-config\r\n│           │   └── [2.0K]  exposedTableInfo.plist\r\n│           └── [  96]  table-manager\r\n│               └── [1.6K]  tables.plist\r\n├── [ 128]  Trace1.run\r\n│   ├── [966M]  event_data_52237.oa\r\n│   └── [ 52K]  RunIssues.storedata\r\n├── [ 128]  instrument_data\r\n│   ├── [  96]  EF4DC038-8A17-421A-8050-39DD0980C06F\r\n│   │   └── [  96]  run_data\r\n│   │       └── [ 17K]  1.run.zip\r\n│   └── [  96]  F9F2B147-A042-43F0-A791-EA6D63C7C1E8\r\n│       └── [  96]  run_data\r\n│           └── [2.2K]  1.run.zip\r\n├── [ 128]  symbols\r\n│   ├── [ 608]  stores\r\n│   │   ├── [453K]  D14A8304-5F09-385D-9AA6-1B0C815B6356.symbolsarchive\r\n│   │   ├── [ 36K]  4E9DB999-EFF4-3C83-B4E8-E1914D2C331E.symbolsarchive\r\n│   │   ├── [3.7K]  B5D897DF-D536-3668-BBAD-A17119439EF0.symbolsarchive\r\n│   │   ├── [3.1K]  57FFCB9D-A6C9-3E9A-AA82-40F192626527.symbolsarchive\r\n│   │   ├── [2.9K]  69AA9AB7-C5DE-3CAE-BF1A-384F9F36A3E0.symbolsarchive\r\n│   │   ├── [2.8K]  F453C5AE-3568-3AAA-AAA0-D2FDFBB9BC7A.symbolsarchive\r\n│   │   ├── [2.6K]  62D27203-665F-3AA7-8BE9-7E3C3A847353.symbolsarchive\r\n│   │   ├── [2.4K]  9896C713-054D-377D-88B4-45E1DE3FB6C5.symbolsarchive\r\n│   │   ├── [2.1K]  249D8F21-72A2-3A80-ADC1-7BEAF24B5B58.symbolsarchive\r\n│   │   ├── [2.1K]  FA954AC0-FCC5-3711-800B-432011ACD89E.symbolsarchive\r\n│   │   ├── [2.0K]  E7ED11EE-AFB0-3B96-90A8-F1835726B9B8.symbolsarchive\r\n│   │   ├── [1.3K]  5B476F9B-DF8B-356A-8582-615D4AD08504.symbolsarchive\r\n│   │   ├── [1.3K]  6102110F-7ED8-34C2-95D3-C5ACCB41497E.symbolsarchive\r\n│   │   ├── [1.1K]  EC86EDBF-30B9-3BF8-A358-C8D51805B016.symbolsarchive\r\n│   │   ├── [1.0K]  6740FF57-8D20-3FC7-97F5-B2AFB6E5F48A.symbolsarchive\r\n│   │   ├── [ 963]  9A72FD37-D827-3D6D-B6F4-422621E36C94.symbolsarchive\r\n│   │   └── [ 948]  67A46592-439B-36DA-8A08-A7CD777A43A8.symbolsarchive\r\n│   └── [ 290]  MANIFEST.plist\r\n└── [  96]  shared_data\r\n    └── [  96]  1.run\r\n        └── [ 14M]  533F36D4-2C90-4030-95CA-74077F2E26D7.zip\r\n\r\n29 directories, 59 files\r\n```\r\n\r\nNote that the biggest binary file is a `.oa` but I've also added `.storedata` and `.symbolsarchive` as binary extensions to this PR.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14584","RelatedDescription":"Closed or merged PR \"Add binary extensions found in macOS traces\" (#14584)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-10-09T03:30:25.4507924Z","RunDurationInMilliseconds":576}