{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2645180080","IsPullRequest":true,"CreatedAt":"2024-11-08T21:43:56","Actor":"adamwathan","Number":"14931","RawContent":null,"Title":"Normalize date/time input styles","State":"closed","Body":"This PR adds some additional styles to Preflight to normalize a bunch of inconsistencies in date/time inputs across browsers.\r\n\r\nThe main motivation for this is to remove these insane classes we have to add in Catalyst:\r\n\r\n```html\r\n<input type=\"date\" class=\"[&::-webkit-datetime-edit-fields-wrapper]:p-0 [&::-webkit-date-and-time-value]:min-h-[1.5em]\r\n[&::-webkit-datetime-edit]:inline-flex [&::-webkit-datetime-edit]:p-0 [&::-webkit-datetime-edit-year-field]:p-0\r\n[&::-webkit-datetime-edit-month-field]:p-0 [&::-webkit-datetime-edit-day-field]:p-0\r\n[&::-webkit-datetime-edit-hour-field]:p-0 [&::-webkit-datetime-edit-minute-field]:p-0\r\n[&::-webkit-datetime-edit-second-field]:p-0 [&::-webkit-datetime-edit-millisecond-field]:p-0\r\n[&::-webkit-datetime-edit-meridiem-field]:p-0\"/>\r\n```\r\n\r\nWith these normalizations, changing things like padding, display type, etc. gives consistent results (at least as consistent as is actually possible) across all browsers.\r\n\r\n---\r\n\r\n**Make text alignment work on iOS Safari**\r\n\r\n<kbd><img width=\"418\" alt=\"iOS Safari text alignment\" src=\"https://github.com/user-attachments/assets/0ff792b2-1f3a-40c6-9185-6bd076c8715d\"></kbd>\r\n\r\n---\r\n\r\n**Don't shrink date inputs on iOS Safari when there is no selected value**\r\n\r\n<kbd><img width=\"409\" alt=\"ioS Safari no input\" src=\"https://github.com/user-attachments/assets/a8e69af7-3f0c-4d1d-b7a0-10355a5d3907\"></kbd>\r\n\r\n---\r\n\r\n**Fix padding in macOS Safari**\r\n\r\n<kbd><img width=\"717\" alt=\"MacOS Safari\" src=\"https://github.com/user-attachments/assets/5ea19b66-2dec-46e2-a386-d61bd5b8517a\"></kbd>\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14931","RelatedDescription":"Closed or merged PR \"Normalize date/time input styles\" (#14931)"},{"Id":"2645058090","IsPullRequest":true,"CreatedAt":"2024-11-08T20:29:42","Actor":"adamwathan","Number":"14929","RawContent":null,"Title":"Remove input borders by default","State":"closed","Body":"This PR reverts a change we made for v4 that added borders to inputs by default. It feels like we have to go further than this for this to actually be useful to anyone, and since there were no borders in v3 it's also a breaking change.\r\n\r\nIf we wanted to make form elements look more \"normal\" out of the box I think we need to do something more like this:\r\n\r\nhttps://play.tailwindcss.com/icCwFLVp4z?file=css\r\n\r\nBut it's a huge rabbit hole and there are so many stupid details to get right that it feels like an insurmountable task, and if we can't go all the way with it it's better to just maximize compatibility with v3.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14929","RelatedDescription":"Closed or merged PR \"Remove input borders by default\" (#14929)"},{"Id":"2644493006","IsPullRequest":true,"CreatedAt":"2024-11-08T19:03:12","Actor":"adamwathan","Number":"14926","RawContent":null,"Title":"Replace `outline-none` with `outline-hidden`, add new `outline-none`","State":"closed","Body":"This PR renames the existing `outline-none` utility to `outline-hidden`, and adds a new simpler `outline-none` utility that just sets `outline-style: none`.\r\n\r\nThe existing `outline-none` utility doesn't actually set `outline: none`, and instead creates a 2px invisible outline:\r\n\r\n```css\r\n.outline-none {\r\n  outline: 2px solid transparent;\r\n  outline-offset: 2px;\r\n}\r\n```\r\n\r\nWe implemented it this way because people often use `outline: none` to hide focus rings and replace them with custom shadow-based focus rings, without realizing that that approach leads to no visible focus ring in forced colors mode because box shadows aren't rendered in forced colors mode.\r\n\r\nWhile this is sort of helpful and clever, it can be a pain when you really do need `outline: none`, and I think it feels surprising in hindsight to hijack the name of an existing CSS property value and make it mean something else.\r\n\r\nThe name `outline-hidden` feels better because it's a new keyword that CSS doesn't use for outlines, and implies that perhaps there's a bit more going on than just setting `outline-style: none`.\r\n\r\nThis PR includes a codemod to convert any existing use of `outline-none` to `outline-hidden`, and we will be sure to explain what `outline-hidden` does for you in the v4 documentation.\r\n\r\nManually tested this in the Vite playground to make sure it behaves as expected üëç ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14926","RelatedDescription":"Closed or merged PR \"Replace `outline-none` with `outline-hidden`, add new `outline-none`\" (#14926)"},{"Id":"2644468841","IsPullRequest":true,"CreatedAt":"2024-11-08T19:00:30","Actor":"philipp-spiess","Number":"14925","RawContent":null,"Title":"Rename `--line-height-*` variables to `--leading-*`","State":"closed","Body":"Part of the current changes, we also want to make the `--line-height-*` namespace closer to the utility name so we're renaming it to `--leading-*`:\r\n\r\n```diff\r\n  @theme {\r\n-  --line-height-none: 1;\r\n-  --line-height-tight: 1.25;\r\n-  --line-height-snug: 1.375;\r\n-  --line-height-normal: 1.5;\r\n-  --line-height-relaxed: 1.625;\r\n-  --line-height-loose: 2;\r\n\r\n    /* ... */\r\n  \r\n+  --leading-none: 1;\r\n+  --leading-tight: 1.25;\r\n+  --leading-snug: 1.375;\r\n+  --leading-normal: 1.5;\r\n+  --leading-relaxed: 1.625;\r\n+  --leading-loose: 2;\r\n\r\n    /* ... */\r\n  }\r\n```\r\n\r\nNotice that we did not change the nested values used in the `--text` type scale, e.g.:\r\n\r\n```css\r\n@theme {\r\n  /* Type scale */\r\n  --text-xs: 0.75rem;\r\n  --text-xs--line-height: 1rem;\r\n}\r\n```\r\n\r\nThese do not refer to the `leading` utility and instead refer to nested properties so we're keeping those as-is.\r\n\r\n## Test Plan\r\n\r\nAdded cases to the CSS `theme()` variable/JS plugin tests (interop layer) and the integration tests (codemod layer).","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14925","RelatedDescription":"Closed or merged PR \"Rename `--line-height-*` variables to `--leading-*`\" (#14925)"},{"Id":"2644686208","IsPullRequest":true,"CreatedAt":"2024-11-08T17:30:50","Actor":"depfu[bot]","Number":"14928","RawContent":null,"Title":"Update jiti 2.3.3 ‚Üí 2.4.0 (minor)","State":"open","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ‚ú≥Ô∏è jiti (2.3.3 ‚Üí 2.4.0) ¬∑ [Repo](https://github.com/unjs/jiti) ¬∑ [Changelog](https://github.com/unjs/jiti/blob/main/CHANGELOG.md)\n\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/unjs/jiti/releases/tag/v2.4.0\">2.4.0</a></h4>\n\n<blockquote><p dir=\"auto\"><a href=\"https://bounce.depfu.com/github.com/unjs/jiti/compare/v2.3.3...v2.4.0\">compare changes</a></p>\n<h3 dir=\"auto\">üöÄ Enhancements</h3>\n<ul dir=\"auto\">\n<li>Support generic type for <code class=\"notranslate\">jiti.import&lt;T&gt;</code> (<a href=\"https://bounce.depfu.com/github.com/unjs/jiti/pull/331\">#331</a>)</li>\n</ul>\n<h3 dir=\"auto\">ü©π Fixes</h3>\n<ul dir=\"auto\">\n<li>Try to resolve <code class=\"notranslate\">.ts</code> files with <code class=\"notranslate\">.js</code> extension from js files (<a href=\"https://bounce.depfu.com/github.com/unjs/jiti/pull/337\">#337</a>)</li>\n</ul>\n<h3 dir=\"auto\">üè° Chore</h3>\n<ul dir=\"auto\">\n<li>Update deps and lockfile (<a href=\"https://bounce.depfu.com/github.com/unjs/jiti/commit/5dfb0ec\">5dfb0ec</a>)</li>\n</ul>\n<h3 dir=\"auto\">‚ù§Ô∏è Contributors</h3>\n<ul dir=\"auto\">\n<li>Pooya Parsa (<a href=\"https://bounce.depfu.com/github.com/pi0\">@pi0</a>)</li>\n<li>Lars Kappert (<a href=\"https://bounce.depfu.com/github.com/webpro\">@webpro</a>)</li>\n<li>Alexander <a href=\"mailto:a.hywax@gmail.com\">a.hywax@gmail.com</a>\n</li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/jiti/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/unjs/jiti/compare/544247421cce0349d58dc94d58e862a7bc12176a...2f9c2376e70d951cdfbc06eb8ed046331deb177a\">See the full diff on Github</a>. The new version differs by 7 commits:</p>\n<ul>\n<li><a href=\"https://github.com/unjs/jiti/commit/2f9c2376e70d951cdfbc06eb8ed046331deb177a\"><code>chore(release): v2.4.0</code></a></li>\n<li><a href=\"https://github.com/unjs/jiti/commit/f4d00621f86536d70b61168940cc347fb738c3a1\"><code>ci: deno v2 compat</code></a></li>\n<li><a href=\"https://github.com/unjs/jiti/commit/899a78226aa711c41cf60d121a2d19a663978191\"><code>chore: add nvmrc</code></a></li>\n<li><a href=\"https://github.com/unjs/jiti/commit/5dfb0ec774409c46a42f716c360da623c9f4451d\"><code>chore: update deps and lockfile</code></a></li>\n<li><a href=\"https://github.com/unjs/jiti/commit/86f11b3c6669f7178688fac9453e4e985f83d096\"><code>chore: update renovate.json</code></a></li>\n<li><a href=\"https://github.com/unjs/jiti/commit/f57e3016c5d81ae023b8fbe39d2c33c92cc3e41a\"><code>fix: try to resolve `.ts` files with `.js` extension from js files (#337)</code></a></li>\n<li><a href=\"https://github.com/unjs/jiti/commit/b789385347c411f4f12505148637b78b6d30a8b3\"><code>feat: support generic type for `jiti.import&lt;T&gt;` (#331)</code></a></li>\n</ul>\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@‚Äãdepfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@‚Äãdepfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@‚Äãdepfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@‚Äãdepfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@‚Äãdepfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@‚Äãdepfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@‚Äãdepfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@‚Äãdepfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@‚Äãdepfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14928","RelatedDescription":"Open PR \"Update jiti 2.3.3 ‚Üí 2.4.0 (minor)\" (#14928)"},{"Id":"2644507836","IsPullRequest":true,"CreatedAt":"2024-11-08T16:24:47","Actor":"RobinMalfait","Number":"14927","RawContent":null,"Title":"Convert `,` to ` ` in `grid-cols-[‚Ä¶]`, `grid-rows-[‚Ä¶]`, and `object-[‚Ä¶]`","State":"open","Body":"This PR converts legacy commas in arbitrary values to spaces.\r\n\r\nIn Tailwind CSS v3, we allowed commas in arbitrary values for `grid-cols-[‚Ä¶]`, `grid-rows-[‚Ä¶]`, and `object-[‚Ä¶]` for backwards compatibility. The underlying CSS value did use spaces instead of commas.\r\n\r\nThis PR adds a code mod where convert the commas to spaces when we see them.\r\n\r\n\r\nTest plan:\r\n---\r\n\r\nRunning this on Catalyst it goes from this:\r\n\r\n<img width=\"393\" alt=\"image\" src=\"https://github.com/user-attachments/assets/03cbda73-41f9-4601-b77a-5b511226b876\">\r\n\r\nTo the expected value of:\r\n\r\n<img width=\"376\" alt=\"image\" src=\"https://github.com/user-attachments/assets/dd9bbe01-5eb1-4340-937b-70c435e7e4f0\">\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14927","RelatedDescription":"Open PR \"Convert `,` to ` ` in `grid-cols-[‚Ä¶]`, `grid-rows-[‚Ä¶]`, and `object-[‚Ä¶]`\" (#14927)"},{"Id":"2644020516","IsPullRequest":false,"CreatedAt":"2024-11-08T16:08:22","Actor":"royvanv","Number":"14918","RawContent":null,"Title":"Inconsistent order for custom variants with abritrary groups","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\nv3.4.13\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\nTailwind CLI with `--postcss` flag (postcss v8.4.47)\r\n\r\n**What version of Node.js are you using?**\r\nv18.18.2\r\n\r\n**What browser are you using?**\r\nN/A\r\n\r\n**What operating system are you using?**\r\nN/A\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/Eu7Tz5Jcrc\r\n\r\nToggle the `target` state using your browser's dev tool, because using anchor links breaks the playground.\r\n\r\n**Describe your issue**\r\n\r\nWhen defining custom variants in a plugin and using them in combination with abritrary groups the order of the selector is different than that of default variants (such as `hover`).\r\n\r\nBasic plugin that adds variant `target` with the pseudo selector `:target`\r\n\r\n```\r\nplugin(function ({ addVariant }) {\r\n    addVariant('target', '&:target');\r\n}),\r\n```\r\n\r\nExpected class structure\r\n```\r\ngroup-[.test-group]:hover:<utility-class>\r\ngroup-[.test-group]:target:<utility-class>\r\n```\r\n\r\nActual class structure\r\n```\r\ngroup-[.test-group]:hover:<utility-class>\r\ntarget:group-[.test-group]:<utility-class>\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14918","RelatedDescription":"Closed issue \"Inconsistent order for custom variants with abritrary groups\" (#14918)"},{"Id":"2644426054","IsPullRequest":true,"CreatedAt":"2024-11-08T16:05:31","Actor":"RobinMalfait","Number":"14922","RawContent":null,"Title":"Fix `theme(‚Ä¶/15%)` to only apply when used on its own","State":"closed","Body":"This PR fixes an issue where our codemod migrations can convert `bg-[theme(colors.white/15%)]` to `bg-[var(--color-white)]/15` where the `15%` from within the `theme(‚Ä¶)` is converted to a candidate modifier (at the end).\n\nThe idea was that if the `theme(‚Ä¶)` is used with a modifier, then it can only be used with colors. If a candidate uses it, it also means that a color was used and we can use `/15` instead.\n\nHowever this is not true if it is used as part of a bigger value. E.g.: `shadow-[shadow:inset_0_0_0_1px_theme(colors.white/15%)]` would be converted to `shadow-[inset_0_0_0_1px_var(--color-white)]/15` which is not correct because the value isn't a color, the color is _part_ of the value.\n\nIn this case, we make sure that the `theme(‚Ä¶)` is the only AST node in the value, and if it is we can safely do the conversion. If there are other AST nodes we keep the `theme(‚Ä¶)` call.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14922","RelatedDescription":"Closed or merged PR \"Fix `theme(‚Ä¶/15%)` to only apply when used on its own\" (#14922)"},{"Id":"2644410634","IsPullRequest":true,"CreatedAt":"2024-11-08T16:02:48","Actor":"philipp-spiess","Number":"14921","RawContent":null,"Title":"Rename `--letter-spacing-*` variables to `--tracking-*`","State":"closed","Body":"Part of the current changes, we also want to make the `--letter-spacing-*` namespace closer to the utility name so we're renaming it to `--tracking-*`:\r\n\r\n```diff\r\n  @theme {\r\n-  --letter-spacing-tighter: -0.05em;\r\n-  --letter-spacing-tight: -0.025em;\r\n-  --letter-spacing-normal: 0em;\r\n-  --letter-spacing-wide: 0.025em;\r\n-  --letter-spacing-wider: 0.05em;\r\n-  --letter-spacing-widest: 0.1em;\r\n\r\n    /* ... */\r\n  \r\n+  --tracking-tighter: -0.05em;\r\n+  --tracking-tight: -0.025em;\r\n+  --tracking-normal: 0em;\r\n+  --tracking-wide: 0.025em;\r\n+  --tracking-wider: 0.05em;\r\n+  --tracking-widest: 0.1em;\r\n\r\n    /* ... */\r\n  }\r\n```\r\n\r\n## Test Plan\r\n\r\nAdded cases to the CSS `theme()` variable/JS plugin tests (interop layer) and the integration tests (codemod layer).","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14921","RelatedDescription":"Closed or merged PR \"Rename `--letter-spacing-*` variables to `--tracking-*`\" (#14921)"},{"Id":"2644302918","IsPullRequest":true,"CreatedAt":"2024-11-08T15:19:55","Actor":"RobinMalfait","Number":"14920","RawContent":null,"Title":"Increase specificity of `*` and `**` variants","State":"closed","Body":"Increase the specificity of the `*` and `**` variants. This will now use `:is(‚Ä¶)` instead of `:where(‚Ä¶)`. \r\n\r\nIn Tailwind CSS v3 we used `& > *` instead of `:where(& > *)` which means that this isn't a breaking change anymore.\r\n\r\nThis also allows us to use codemod things like `[&>[data-visible]]:flex` and `[&_[data-visible]]:flex` to `*:data-visible:flex` and `**:data-visible:flex` respectively.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14920","RelatedDescription":"Closed or merged PR \"Increase specificity of `*` and `**` variants\" (#14920)"},{"Id":"2642639010","IsPullRequest":true,"CreatedAt":"2024-11-08T15:19:29","Actor":"adamwathan","Number":"14913","RawContent":null,"Title":"Don't give input elements a transparent background by default","State":"closed","Body":"Early in v4 development we decided to give all form controls a transparent background, but in v3 we only did this for button elements.\r\n\r\nThis PR reverts that decision to make things consistent with v3, as we've noticed this is something that tends to break for people when upgrading from v3 to v4.\r\n\r\nThe default background color of form elements is the [`Field` system color](https://developer.mozilla.org/en-US/docs/Web/CSS/system-color#field) which automatically adapts to light and dark modes if you don't touch it, so it feels reasonable to keep this as the default. Changing it just makes upgrading harder and doesn't really make anything easier for anyone else.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14913","RelatedDescription":"Closed or merged PR \"Don't give input elements a transparent background by default\" (#14913)"},{"Id":"2643951656","IsPullRequest":true,"CreatedAt":"2024-11-08T15:17:03","Actor":"RobinMalfait","Number":"14916","RawContent":null,"Title":"Fix opacity modifier using CSS variables","State":"closed","Body":"When using an opacity modifier such as `bg-black/[var(--opacity)]`, then this was translated to:\n```css\n.bg-black\\/\\[var\\(--opacity\\)\\] {\n  background-color: color-mix( in oklch, var(--color-black, #000) calc(var(--opacity) * 100%), transp\n}\n```\n\nThe issue is that this part: `calc(var(--opacity) * 100%)` is invalid _if_ the `var(--opacity)` already contains a percentage value. See: https://play.tailwindcss.com/xz0t\n\nThis is because this eventually resolves to `calc(20% * 100%)` and `20% 100%` is invalid in CSS.\n\nIn Catalyst we use variables like that _with_ the `%` included, which means that v4 doesn't work as expected when using this.\n\nA variable with a `%` included is probably the better value to support compared to the the unit less one. This also allows you to define your variables using `@property` as a proper `<percentage>` type.\n\nUnfortunately the `var(--opacity)` is a value that can change at runtime, so we don't know the type at compile time.\n\nIn the future we might be able to use `first-valid(‚Ä¶)` (see: https://drafts.csswg.org/css-values-5/#f and generate both versions at the same time.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14916","RelatedDescription":"Closed or merged PR \"Fix opacity modifier using CSS variables\" (#14916)"},{"Id":"2643953953","IsPullRequest":true,"CreatedAt":"2024-11-08T15:14:11","Actor":"philipp-spiess","Number":"14917","RawContent":null,"Title":"Allow newlines and tabs in the argument list of the `theme()` function","State":"closed","Body":"We noticed an issue that the `theme()` function wourld not properly parse in CSS if you split the argument list over multiple lines. This is fixed by treating `\\n` and `\\t` the same as space:\r\n\r\n```css\r\n.custom-font {\r\n  font-family: theme(\r\n    fontFamily.unknown,\r\n    Helvetica Neue,\r\n    Helvetica,\r\n    sans-serif\r\n  );\r\n}\r\n```\r\n\r\n## Test plan\r\n\r\nAdded tests, but also tried it in the Vite example:\r\n\r\n<img width=\"1995\" alt=\"Screenshot 2024-11-08 at 13 46 09\" src=\"https://github.com/user-attachments/assets/f9bf94b0-3f9b-4334-8911-9190987e2df5\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14917","RelatedDescription":"Closed or merged PR \"Allow newlines and tabs in the argument list of the `theme()` function\" (#14917)"},{"Id":"2644024026","IsPullRequest":true,"CreatedAt":"2024-11-08T14:58:00","Actor":"philipp-spiess","Number":"14919","RawContent":null,"Title":"Revert lightningcss change","State":"closed","Body":"In https://github.com/tailwindlabs/tailwindcss/commit/c5b6df2a273b7debaf28f4d56b23f6f2bdfe4b0d we upgraded `lightningcss` which caused `pnpm install` to fail for me because the patch no longer worked. I re-applied the patch, doesn't seem like anything has changed in the diff (just some formatting, probably because I opened it in a new VS Code window...)","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14919","RelatedDescription":"Closed or merged PR \"Revert lightningcss change\" (#14919)"},{"Id":"2642246019","IsPullRequest":true,"CreatedAt":"2024-11-08T14:49:42","Actor":"adamwathan","Number":"14911","RawContent":null,"Title":"Ensure spacing utilities with no value (e.g. `px`) don't generate CSS","State":"closed","Body":"This PR fixes an issue where utilities like `px` would read the `--spacing` variable and use its value as the utility value, similar to how `shadow` reads `--shadow` by default. That doesn't make sense for these utilities since `--spacing` is reserved as a special multiplier variable.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14911","RelatedDescription":"Closed or merged PR \"Ensure spacing utilities with no value (e.g. `px`) don't generate CSS\" (#14911)"},{"Id":"2643538680","IsPullRequest":true,"CreatedAt":"2024-11-08T10:05:06","Actor":"thecrypticace","Number":"14915","RawContent":null,"Title":"Support marking utilities and theme values as deprecated","State":"open","Body":"wip\r\n\r\nIntelliSense PR: https://github.com/tailwindlabs/tailwindcss-intellisense/pull/1084","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14915","RelatedDescription":"Open PR \"Support marking utilities and theme values as deprecated\" (#14915)"},{"Id":"2642256043","IsPullRequest":true,"CreatedAt":"2024-11-07T21:34:40","Actor":"adamwathan","Number":"14912","RawContent":null,"Title":"Add `radius-*` utilities and deprecate `rounded-*` utilities","State":"open","Body":"This PR adds a new set of `radius-*` utilities to replace the existing `rounded-*` utilities.\r\n\r\nThese utilities derive their values from the `--spacing-*` scale by default, but can also be configured with radius-specific values using the `--radius-*` scale.\r\n\r\nThis change makes it easier to do things like concentric border radiuses, where you need to subtract the padding of the parent when calculating the child radius:\r\n\r\n```html\r\n<div class=\"radius-8 p-2\">\r\n  <div class=\"radius-6\">\r\n```\r\n\r\nUsing the old t-shirt scale there was no clear connection to the spacing value which made this sort of thing annoying, and also difficult to notice that the value was carefully chosen to be concentric when reading the code.\r\n\r\nI've kept the `rounded-*` utilities around for backwards compatibility, including the old t-shirt scale but have registered as `inline reference` so that they don't produce CSS variables by default. We plan to mark these as deprecated via IntelliSense though, and also plan to update our codemod tooling to make it easy to migrate from `rounded-*` to `radius-*` automatically.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14912","RelatedDescription":"Open PR \"Add `radius-*` utilities and deprecate `rounded-*` utilities\" (#14912)"},{"Id":"2642097139","IsPullRequest":false,"CreatedAt":"2024-11-07T20:33:10","Actor":"sntran","Number":"14910","RawContent":null,"Title":"[v4] `group-not-hover` does not work","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.30\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`@tailwind/cli@4.0.0-alpha.30`\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v20.12.02\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/oqdmmGAY2k\r\n\r\n**Describe your issue**\r\n\r\nOn 4.0.0-alpha.28 (and also 4.0.0-alpha.29), I could use `group-not-hover` variant to style a child element when the parent is not being hovered. However, after upgrading to 4.0.0-alpha.30, that variant is no longer handled and `@tailwind/cli` will throw error when I `@apply group-not-hover:text-red-100` in my CSS. \r\n\r\nProbably related to https://github.com/tailwindlabs/tailwindcss/pull/14743?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14910","RelatedDescription":"Closed issue \"[v4] `group-not-hover` does not work\" (#14910)"},{"Id":"2640889814","IsPullRequest":true,"CreatedAt":"2024-11-07T20:31:07","Actor":"RobinMalfait","Number":"14904","RawContent":null,"Title":"Fix glob pattern hoisting on Windows","State":"closed","Body":"This ensures our glob hoisting mechanism (see #14896) works on Windows when performing an upgrade.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14904","RelatedDescription":"Closed or merged PR \"Fix glob pattern hoisting on Windows\" (#14904)"},{"Id":"2641226933","IsPullRequest":true,"CreatedAt":"2024-11-07T19:25:21","Actor":"philipp-spiess","Number":"14905","RawContent":null,"Title":"Upgrade: Migrate spacing scale","State":"closed","Body":"This PR adds migrations for the recent changes to the `--spacing` scale done in #12263.\r\n\r\nThere are a few steps that we do to ensure we have the best upgrade experience:\r\n\r\n- If you are overwriting the `spacing` theme with custom values, we now check if the new values are multiplies of the default spacing scale. When they are, we can safely remove the overwrite.\r\n- If you are extending the `spacing` theme, we will unset the default `--spacing` scale and only use the values you provided.\r\n- Any `theme()` function calls are replaced with `calc(var(--spacing) * multiplier)` unless the values are extending the default scale.\r\n\r\nOne caveat here is for `theme()` key which can not be replaced with `var()` (e.g. in `@media` attribute positions). These will not be able to be replaced with `calc()` either so the following needs to stay unmigrated:\r\n\r\n```css\r\n@media (max-width: theme(spacing.96)) {\r\n  .foo {\r\n    color: red;\r\n  }\r\n}\r\n```\r\n\r\n## Test plan\r\n\r\nWe are mainly testing two scenarios: The JS config _extends_ the `spacing` namespace and the JS config _overwrites_ the `spacing` namespace. For both cases we have added an integration test each to ensure this works as expected. The test contains a mixture of keys (some of it matching the default multiples, some don't, some have different scales, and some use non-numeric identifiers). In addition to asserting on the created CSS `@theme`, we also ensure that `theme()` calls are properly replaced.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14905","RelatedDescription":"Closed or merged PR \"Upgrade: Migrate spacing scale\" (#14905)"},{"Id":"2641494339","IsPullRequest":true,"CreatedAt":"2024-11-07T19:08:06","Actor":"adamwathan","Number":"14909","RawContent":null,"Title":"Rename `--font-size-*` variables to `--text-*`","State":"closed","Body":"This PR updates all of the `--font-size-*` variables to `--text-*` instead to closer match the utility names.\r\n\r\n```diff\r\n  @theme {\r\n-   --font-size-xs: 0.75rem;\r\n-   --font-size-xs--line-height: 1rem;\r\n-   --font-size-sm: 0.875rem;\r\n-   --font-size-sm--line-height: 1.25rem;\r\n-   --font-size-base: 1rem;\r\n-   --font-size-base--line-height: 1.5rem;\r\n-   --font-size-lg: 1.125rem;\r\n-   --font-size-lg--line-height: 1.75rem;\r\n-   --font-size-xl: 1.25rem;\r\n-   --font-size-xl--line-height: 1.75rem;\r\n\r\n    /* ... */\r\n  \r\n+   --text-xs: 0.75rem;\r\n+   --text-xs--line-height: 1rem;\r\n+   --text-sm: 0.875rem;\r\n+   --text-sm--line-height: 1.25rem;\r\n+   --text-base: 1rem;\r\n+   --text-base--line-height: 1.5rem;\r\n+   --text-lg: 1.125rem;\r\n+   --text-lg--line-height: 1.75rem;\r\n+   --text-xl: 1.25rem;\r\n+   --text-xl--line-height: 1.75rem;\r\n\r\n    /* ... */\r\n  }\r\n```\r\n\r\nThis is part of a bigger set of changes where we're renaming other theme variables as well with the same goals, since many existing theme variables like `--shadow-*` and `--radius-*` are already not using the explicit CSS property name.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14909","RelatedDescription":"Closed or merged PR \"Rename `--font-size-*` variables to `--text-*`\" (#14909)"},{"Id":"2641274715","IsPullRequest":false,"CreatedAt":"2024-11-07T16:18:03","Actor":"JavierM42","Number":"14907","RawContent":null,"Title":"Default border color (gray-200) doesn't work with flat palettes","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.14\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nVite\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.9\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nWith default palette: [Tailwind Play link](https://play.tailwindcss.com/oaGggnbAx3)\r\n\r\nWith custom, nested palette: [Tailwind Play link](https://play.tailwindcss.com/nJ1AAtAGTj)\r\n\r\nWith flat palette: [Tailwind Play link](https://play.tailwindcss.com/blTtLoJNkb)\r\n\r\n**Describe your issue**\r\n\r\nThe TailwindCSS reset sets the default border color to `gray-200`.\r\n\r\nIf I change the value of `gray-200`, I expect the default border color to take that value.\r\n\r\nIf my palette is nested (`{ gray: { 200: newValue } }`), the default border color takes the new value as expected.\r\n\r\nIf my palette is flat (`{ 'gray-200' newValue }`), the default border color is the browser default.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14907","RelatedDescription":"Closed issue \"Default border color (gray-200) doesn't work with flat palettes\" (#14907)"},{"Id":"2641493084","IsPullRequest":true,"CreatedAt":"2024-11-07T16:08:40","Actor":"philipp-spiess","Number":"14908","RawContent":null,"Title":"Upgrade: Add `--shadow-inner` theme variable when `shadow-inner` class is used","State":"open","Body":"We are dropping the default `--shadow-inner` theme variable from Tailwind CSS v4 in favor of the `inset-shadow` utilities. We can't however, easily codemod usages from `shadow-inner` to `insert-shadow-sm` because of how this utility interacts with shadow colors. E.g.:\r\n\r\n\r\n```diff\r\n- <div class=\"shadow-inner shadow-red-500\">\r\n+ <div class=\"inset-shadow-sm inset-shadow-red-500\">\r\n```\r\n\r\nSince we can't do codemods on connected candidates right now, we instead backfill support for `shadow-inner` if it is used in one of your templates files. This is as simple as adding the following CSS theme variable:\r\n\r\n```css\r\n@theme {\r\n  --shadow-inner: inset 0 2px 4px 0 rgb(0 0 0 / 0.05);\r\n}\r\n```\r\n\r\n## Test plan\r\n\r\nAdded an integration test for a setup using `shadow-inner` in its templates.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14908","RelatedDescription":"Open PR \"Upgrade: Add `--shadow-inner` theme variable when `shadow-inner` class is used\" (#14908)"},{"Id":"2640758451","IsPullRequest":true,"CreatedAt":"2024-11-07T15:48:49","Actor":"RobinMalfait","Number":"14903","RawContent":null,"Title":"Add new `**` variant","State":"closed","Body":"This PR adds a new `**` variant to target any level of children.\n\nThis is very similar to the `*` variant, the big difference is that:\n\n- `*` applies to direct children only\n- `**` applies to any level of children\n\nThought of this because of all the recent work we did around globs. So a good analogy for this is glob syntax where you have the exact same difference. `*.html` vs `**/*.html`.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14903","RelatedDescription":"Closed or merged PR \"Add new `**` variant\" (#14903)"},{"Id":"2641238649","IsPullRequest":true,"CreatedAt":"2024-11-07T15:43:49","Actor":"adamwathan","Number":"14906","RawContent":null,"Title":"Don't unset keys like `--font-weight-*` when unsetting `--font-*`","State":"closed","Body":"This PR fixes an issue where unsetting `--font-*` would unset `--font-weight-*` and `--font-size-*`.\r\n\r\n```css\r\n@theme {\r\n  --font-weight-bold: bold;\r\n  --font-size-sm: 14px;\r\n  --font-sans: sans-serif;\r\n  --font-serif: serif;\r\n}\r\n@theme {\r\n  --font-*: initial;\r\n  --font-body: Inter;\r\n}\r\n```\r\n\r\nUp until now this was sort of intended/desired behavior but with recent changes there are now more overlapping theme keys (`--inset-*` and `--inset-shadow-*` as well for example), and we don't want to make it impossible to unset _just_ the default `font-family` values.\r\n\r\nThis PR also simplifies how we were handling making sure that the `inset-*` utility ignored `--inset-shadow-*` variables since it's all really the same problem.\r\n\r\nThis does mean we need to maintain a list of known theme keys so we know when there is a conflict between two keys, which is kind of unfortunate because up until now this was a totally dynamic thing. End users can still add whatever custom stuff they want under `@theme` but we don't really know about those namespaces since we're maintaining a static list so we can't resolve conflicts there. I'm confident there are ways we could solve this if it actually becomes a problem, so content to push forward without solving it right now and just deal with it if/when it actually arises, because it just might not.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14906","RelatedDescription":"Closed or merged PR \"Don't unset keys like `--font-weight-*` when unsetting `--font-*`\" (#14906)"},{"Id":"2638405808","IsPullRequest":true,"CreatedAt":"2024-11-07T12:22:25","Actor":"RobinMalfait","Number":"14896","RawContent":null,"Title":"Fix crash during upgrade when content globs escape root of project","State":"closed","Body":"This PR fixes an issue where globs in you `content` configuration escape the current \"root\" of the project.\r\n\r\nThis can happen if you have a folder, and you need to look up in the tree (e.g.: when looking at another package in a monorepo, or in case of a Laravel project where you want to look at mail templates).\r\n\r\nThis applies a similar strategy we already implement on the Rust side.\r\n\r\n1. Expand braces in the globs\r\n2. Move static parts of the `pattern` to the `base` of the glob entry object\r\n\r\n---\r\n\r\nGiven a project setup like this:\r\n```\r\n.\r\n‚îú‚îÄ‚îÄ admin\r\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ my-tailwind.config.ts\r\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ src\r\n‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ abc.jpg\r\n‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ index.html\r\n‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ index.js\r\n‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ styles\r\n‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ input.css\r\n‚îú‚îÄ‚îÄ dashboard\r\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ src\r\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html\r\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.js\r\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ input.css\r\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ pickaday.css\r\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ tailwind.config.ts\r\n‚îú‚îÄ‚îÄ package-lock.json\r\n‚îú‚îÄ‚îÄ package.json\r\n‚îú‚îÄ‚îÄ postcss.config.js\r\n‚îî‚îÄ‚îÄ unrelated\r\n    ‚îî‚îÄ‚îÄ index.html\r\n\r\n7 directories, 14 files\r\n```\r\n\r\n\r\nIf you then have this config:\r\n```ts\r\n// admin/my-tailwind.config.ts\r\nexport default {\r\n  content: {\r\n    relative: true,\r\n    files: ['./src/**/*.html', '../dashboard/src/**/*.html'],\r\n                            //  ^^  this is the important part, which escapes\r\n                            //      the current root of the project.\r\n  },\r\n  theme: {\r\n    extend: {\r\n      colors: {\r\n        primary: 'red',\r\n      },\r\n    },\r\n  },\r\n}\r\n```\r\n\r\n\r\nThen before this change, running the command looks like this:\r\n<img width=\"1760\" alt=\"image\" src=\"https://github.com/user-attachments/assets/60e2dfc7-3751-4432-80e3-8b4b8f1083d4\">\r\n\r\n\r\nAfter this change, running the command looks like this:\r\n<img width=\"1452\" alt=\"image\" src=\"https://github.com/user-attachments/assets/5c47182c-119c-4732-a253-2dace7086049\">\r\n\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14896","RelatedDescription":"Closed or merged PR \"Fix crash during upgrade when content globs escape root of project\" (#14896)"},{"Id":"2640557322","IsPullRequest":false,"CreatedAt":"2024-11-07T10:25:13","Actor":"RobinMalfait","Number":"14902","RawContent":null,"Title":"Invalid css selector generated","State":"open","Body":"### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/14901\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **kdy1** November  7, 2024</sup>\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.14\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNext.js + turbopack, but reproducible on playground.\r\n\r\n**What version of Node.js are you using?**\r\n\r\nPlayground\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/obgZakKyiO?file=css\r\n\r\n**Describe your issue**\r\n\r\nGenerated CSS file is \r\n\r\n```css\r\n\r\np.my-4 {\r\n  margin: 0px;\r\n}\r\n.\\[\\&_\\:is\\(p\\)\\]\\:my-4 :is(p)p {\r\n  margin: 0px;\r\n}\r\n\r\n```\r\n\r\n\r\nwhere `:is(p)p` is invalid</div>\r\n\r\n\r\n---\r\n\r\nOriginally opened here, but converted it too soon: https://github.com/tailwindlabs/tailwindcss/issues/14900","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14902","RelatedDescription":"Open issue \"Invalid css selector generated\" (#14902)"},{"Id":"2640494123","IsPullRequest":false,"CreatedAt":"2024-11-07T10:08:24","Actor":"kdy1","Number":"14900","RawContent":null,"Title":"Invalid css selector generated","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.14\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNext.js + turbopack, but reproducible on playground.\r\n\r\n**What version of Node.js are you using?**\r\n\r\nPlayground\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/obgZakKyiO?file=css\r\n\r\n**Describe your issue**\r\n\r\nGenerated CSS file is \r\n\r\n```css\r\n\r\np.my-4 {\r\n  margin: 0px;\r\n}\r\n.\\[\\&_\\:is\\(p\\)\\]\\:my-4 :is(p)p {\r\n  margin: 0px;\r\n}\r\n\r\n```\r\n\r\n\r\nwhere `:is(p)p` is invalid","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14900","RelatedDescription":"Closed issue \"Invalid css selector generated\" (#14900)"},{"Id":"2639332884","IsPullRequest":true,"CreatedAt":"2024-11-07T01:50:31","Actor":"adamwathan","Number":"14898","RawContent":null,"Title":"Rename `--width-*` namespace to `--container-*`","State":"closed","Body":"This PR renames all of the `--width-*` variables to `--container-*` to better communicate the purpose of these tokens as layout container sizes. These are the values that were historically stored under `maxWidth` in the v3 and earlier eras, and were also re-used by the container queries plugin.\r\n\r\nThe name `--container-*` feels like a better match alongside the `--breakpoint-*` namespace and since these both serve that same sort of purpose it makes sense to me that the name should be optimized for feeling \"right\" in that context.\r\n\r\nI like that this also sort of advertises Tailwind's support for container queries directly in the CSS variables themselves, and helps people understand what these are really intended to be used for.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14898","RelatedDescription":"Closed or merged PR \"Rename `--width-*` namespace to `--container-*`\" (#14898)"},{"Id":"2637891526","IsPullRequest":true,"CreatedAt":"2024-11-06T12:36:55","Actor":"RobinMalfait","Number":"14894","RawContent":null,"Title":"Remove `theme(inline)` option from CSS API","State":"closed","Body":"This PR removes the `theme(inline)` option for now. We might re-introduce this in the future but for now we get rid of it to ensure there are fewer knobs to turn.\n\nWe still have the `inline` option internally because it is used in the v3 compat layer.\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14894","RelatedDescription":"Closed or merged PR \"Remove `theme(inline)` option from CSS API\" (#14894)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-11-09T03:30:23.0969852Z","RunDurationInMilliseconds":409}