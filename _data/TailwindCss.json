{"Data":{"TailwindCss-Issues":{"Issues":[{"Id":"2669707931","IsPullRequest":true,"CreatedAt":"2024-11-18T19:50:44","Actor":"thecrypticace","Number":"15033","RawContent":null,"Title":"Implement compat for `<alpha-value>` from v3","State":"open","Body":"This implements backwards compatibility for colors that use the old `<alpha-value>` feature from v3. We can do this by replacing `<alpha-value>` with `1` because we use `color-mix` to actually apply opacity modifiers in v4.","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15033","RelatedDescription":"Open PR \"Implement compat for `<alpha-value>` from v3\" (#15033)"},{"Id":"2659464653","IsPullRequest":true,"CreatedAt":"2024-11-18T16:43:44","Actor":"RobinMalfait","Number":"15001","RawContent":null,"Title":"Improve multi-root `@config` linking","State":"closed","Body":"This PR improves the discoverability of Tailwind config files when we are trying to link them to your CSS files.\r\n\r\nWhen you have multiple \"root\" CSS files in your project, and if they don't include an `@config` directive, then we tried to find the Tailwind config file in your current working directory.\r\n\r\nThis means that if you run the upgrade command from the root of your project, and you have a nested folder with a separate Tailwind setup, then the nested CSS file would link to the root Tailwind config file.\r\n\r\nVisually, you can think of it like this:\r\n\r\n```\r\n.\r\n├── admin\r\n│   ├── src\r\n│   │   └── styles\r\n│   │       └── index.css       <-- This will be linked to (1)\r\n│   └── tailwind.config.js      (2)\r\n├── src\r\n│   └── styles\r\n│       └── index.css           <-- This will be linked to (1)\r\n└── tailwind.config.js          (1)\r\n```\r\n\r\nIf you run the upgrade command from the root of your project, then the `/src/styles/index.css` will be linked to `/tailwind.config.js` which is what we expect.\r\n\r\nBut `/admin/src/styles/index.css` will _also_ be linked to `/tailwind.config.js`\r\n\r\nWith this PR we improve this behavior by looking at the CSS file, and crawling up the parent tree. This mens that the new behavior looks like this:\r\n\r\n```\r\n.\r\n├── admin\r\n│   ├── src\r\n│   │   └── styles\r\n│   │       └── index.css       <-- This will be linked to (2)\r\n│   └── tailwind.config.js      (2)\r\n├── src\r\n│   └── styles\r\n│       └── index.css           <-- This will be linked to (1)\r\n└── tailwind.config.js          (1)\r\n```\r\n\r\nNow `/src/styles/index.css` will be linked to `/tailwind.config.js`, and `/admin/src/styles/index.css` will be linked to `/admin/tailwind.config.js`.\r\n\r\nWhen we discover the Tailwind config file, we will also print a message to the user to let them know which CSS file is linked to which Tailwind config file.\r\n\r\nThis should be a safe improvement because if your Tailwind config file had a different name, or if it lived in a sibling folder then Tailwind wouldn't find it either and you already required a `@config \"…\";` directive in your CSS file to point to the correct file.\r\n\r\nIn the unlikely event that it turns out that 2 (or more) CSS files resolve to the same to the same Tailwind config file, then an upgrade might not be safe and some manual intervention might be needed. In this case, we will show a warning about this.\r\n\r\n<img width=\"1552\" alt=\"image\" src=\"https://github.com/user-attachments/assets/7a1ad11d-18c5-4b7d-9a02-14f0116ae955\">\r\n\r\n\r\nTest plan:\r\n---\r\n\r\n- Added an integration test that properly links the nearest Tailwind config file by looking up the tree\r\n- Added an integration test that resolves 2 or more CSS files to the same config file, resulting in an error where manual intervention is needed\r\n- Ran it on the Tailwind UI codebase\r\n\r\nRunning this on Tailwind UI's codebase it looks like this:\r\n\r\n<img width=\"1552\" alt=\"image\" src=\"https://github.com/user-attachments/assets/21785428-5e0d-47f7-80ec-dab497f58784\">\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15001","RelatedDescription":"Closed or merged PR \"Improve multi-root `@config` linking\" (#15001)"},{"Id":"2669130900","IsPullRequest":false,"CreatedAt":"2024-11-18T16:32:43","Actor":"flavorjones","Number":"15031","RawContent":null,"Title":"[v4] Musl/Alpine is not supported in the V4 alphas","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.34\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nBinary CLI executable from https://github.com/tailwindlabs/tailwindcss/releases/tag/v4.0.0-alpha.34\r\n\r\n**What version of Node.js are you using?**\r\n\r\nN/A\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nAlpine Linux (musl libc)\r\n\r\n**Reproduction URL**\r\n\r\nYou can see the failure in CI here: https://github.com/flavorjones/tailwindcss-ruby/actions/runs/11896261069/job/33147810896?pr=21#step:7:5\r\n\r\nCompare with successful build run on a glibc system here: https://github.com/flavorjones/tailwindcss-ruby/actions/runs/11896261069/job/33147810459?pr=21#step:5:5\r\n\r\n**Describe your issue**\r\n\r\nWhen running the binary x86_64-linux executable on an Alpine (musl libc) system, I see:\r\n\r\n```\r\n/bin/sh: ./tailwindcss: not found\r\n```\r\n\r\nRunning `ldd` to see whether shared libraries are resolved properly reveals the problem:\r\n\r\n```\r\n# ldd ./tailwindcss\r\n        /lib64/ld-linux-x86-64.so.2 (0x72662d672000)\r\n        libc.so.6 => /lib64/ld-linux-x86-64.so.2 (0x72662d672000)\r\nError loading shared library ld-linux-x86-64.so.2: No such file or directory (needed by ./tailwindcss)\r\n        libpthread.so.0 => /lib64/ld-linux-x86-64.so.2 (0x72662d672000)\r\n        libdl.so.2 => /lib64/ld-linux-x86-64.so.2 (0x72662d672000)\r\n        libm.so.6 => /lib64/ld-linux-x86-64.so.2 (0x72662d672000)\r\nError relocating ./tailwindcss: gnu_get_libc_version: symbol not found\r\nError relocating ./tailwindcss: backtrace: symbol not found\r\nError relocating ./tailwindcss: backtrace_symbols: symbol not found\r\nError relocating ./tailwindcss: __cxa_thread_atexit_impl: symbol not found\r\nError relocating ./tailwindcss: __cxa_at_quick_exit: symbol not found\r\nError relocating ./tailwindcss: __register_atfork: symbol not found\r\nError relocating ./tailwindcss: __strftime_l: symbol not found\r\nError relocating ./tailwindcss: __cxa_thread_atexit_impl: symbol not found\r\nError relocating ./tailwindcss: unsupported relocation type 37\r\nError relocating ./tailwindcss: unsupported relocation type 37\r\nError relocating ./tailwindcss: unsupported relocation type 37\r\n```\r\n\r\nA previous issue (#14569) reported this, and the outcome was to open an upstream `bun` bug at https://github.com/oven-sh/bun/issues/14292. The reply there was, essentially:\r\n\r\n- musl is not supported by bun and won't be\r\n- you should be able to `apk install gcompat` to make it work\r\n\r\nUnfortunately, `gcompat` does not help:\r\n\r\n```\r\n# apk add gcompat\r\n(1/3) Installing musl-obstack (1.2.3-r2)\r\n(2/3) Installing libucontext (1.2-r3)\r\n(3/3) Installing gcompat (1.1.0-r4)\r\nOK: 89 MiB in 55 packages\r\n\r\n# ldd ./tailwindcss\r\n        /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\n        libc.so.6 => /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\n        ld-linux-x86-64.so.2 => /lib/ld-linux-x86-64.so.2 (0x7db1dbfbc000)\r\n        libpthread.so.0 => /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\n        libdl.so.2 => /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\n        libm.so.6 => /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\n\r\n# ./tailwindcss\r\nError relocating /tailwindcss-ruby-mount/exe/x86_64-linux/tailwindcss: unsupported relocation type 37\r\nError relocating /tailwindcss-ruby-mount/exe/x86_64-linux/tailwindcss: unsupported relocation type 37\r\nError relocating /tailwindcss-ruby-mount/exe/x86_64-linux/tailwindcss: unsupported relocation type 37\r\n\r\n# ldd ./tailwindcss\r\n        /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\n        libc.so.6 => /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\n        ld-linux-x86-64.so.2 => /lib/ld-linux-x86-64.so.2 (0x7db1dbfbc000)\r\n        libpthread.so.0 => /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\n        libdl.so.2 => /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\n        libm.so.6 => /lib64/ld-linux-x86-64.so.2 (0x7db1dbfca000)\r\nError relocating ./tailwindcss: gnu_get_libc_version: symbol not found\r\nError relocating ./tailwindcss: backtrace: symbol not found\r\nError relocating ./tailwindcss: backtrace_symbols: symbol not found\r\nError relocating ./tailwindcss: __cxa_thread_atexit_impl: symbol not found\r\nError relocating ./tailwindcss: __cxa_at_quick_exit: symbol not found\r\nError relocating ./tailwindcss: __register_atfork: symbol not found\r\nError relocating ./tailwindcss: __strftime_l: symbol not found\r\nError relocating ./tailwindcss: __cxa_thread_atexit_impl: symbol not found\r\nError relocating ./tailwindcss: unsupported relocation type 37\r\nError relocating ./tailwindcss: unsupported relocation type 37\r\nError relocating ./tailwindcss: unsupported relocation type 37\r\n```\r\n\r\nI suspect this is going to be a blocker to adoption for many people given how widespread Alpine images are, particularly in CI/CD pipelines.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15031","RelatedDescription":"Open issue \"[v4] Musl/Alpine is not supported in the V4 alphas\" (#15031)"},{"Id":"2666665485","IsPullRequest":true,"CreatedAt":"2024-11-18T15:28:16","Actor":"RobinMalfait","Number":"15025","RawContent":null,"Title":"Add new `in-*` variant","State":"closed","Body":"This PR adds a new `in-*` variant that allows you to apply utilities when you are in a certain selector.\r\n\r\nWhile doing research for codemods, we notice that some people use `group-[]:flex` (yep, the arbitrary value is empty…). The idea behind is that people want to know if you are in a `.group` or not.\r\n\r\nSimilarly, some people use `group-[]/name:flex` to know when you are in a `.group/name` class or not.\r\n\r\nThis new `in-*` variant allows you to do that without any hacks.\r\n\r\nIf you want to check whether you are inside of a `p` tag, then you can write `in-[p]:flex`. If you want to check that you are inside of a `.group`, you can write `in-[.group]`.\r\n\r\nThis variant is also a compound variant, which means that you can write `in-data-visible:flex` which generates the following CSS:\r\n```css\r\n:where([data-visible]) .in-data-visible\\:flex {\r\n  display: flex;\r\n}\r\n```\r\n\r\nThis variant also compounds with `not-*`, for example: `not-in-[.group]:flex`.\r\n\r\nAdditionally, this PR also includes a codemod to convert `group-[]:flex` to `in-[.group]:flex`.\r\n\r\n---\r\n\r\nThis was proposed before for v3 in #13912\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15025","RelatedDescription":"Closed or merged PR \"Add new `in-*` variant\" (#15025)"},{"Id":"2666514239","IsPullRequest":true,"CreatedAt":"2024-11-18T15:19:16","Actor":"RobinMalfait","Number":"15022","RawContent":null,"Title":"Migrate `[&>*]` to `*` variant, and `[&_*]` to `**` variant","State":"closed","Body":"This PR adds a migration to convert the `[&>*]` variant to the `*` variant. Additionally this PR also converts the `[&_*]` variant to the `**` variant.\r\n\r\nWe use this variant in Catalyst for example, and now that the specificity is the same as `*`, we can use the more modern syntax instead.\r\n\r\n\r\n# Test plan:\r\n\r\nRunning this on Catalyst results in a diff like:\r\n<img width=\"615\" alt=\"image\" src=\"https://github.com/user-attachments/assets/f384885e-cae1-4b6b-80ab-85f76fa89a33\">\r\n\r\n<img width=\"833\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8a185e1d-0f1b-4fe6-9e06-ca7597534398\">\r\n\r\n\r\nNote: the swapped order of variants is another codemod at work\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15022","RelatedDescription":"Closed or merged PR \"Migrate `[&>*]` to `*` variant, and `[&_*]` to `**` variant\" (#15022)"},{"Id":"2665965228","IsPullRequest":true,"CreatedAt":"2024-11-18T14:47:48","Actor":"RobinMalfait","Number":"15020","RawContent":null,"Title":"Re-introduce automatic var injection shorthand","State":"closed","Body":"This PR re-introduces the automatic var injection feature.\r\n\r\nFor some backstory, we used to support classes such as `bg-[--my-color]` that resolved as-if you wrote `bg-[var(--my-color)]`. \r\n\r\nThe is issue is that some newer CSS properties accepts dashed-idents (without the `var(…)`). This means that some properties accept `view-timeline-name: --my-name;` (see: https://developer.mozilla.org/en-US/docs/Web/CSS/view-timeline-name).\r\n\r\nTo make this a tiny bit worse, these properties _also_ accept `var(--my-name-reference)` where the variable `--my-name-reference` could reference a dashed-ident such as `--my-name`.\r\n\r\nThis makes the `bg-[--my-color]` ambiguous because we don't know if you want `var(--my-color)` or `--my-color`.\r\n\r\nWith this PR, we bring back the automatic var injection feature as syntactic sugar, but we use a different syntax to avoid the ambiguity. Instead of `bg-[--my-color]`, you can now write `bg-(--my-color)` to get the same effect as `bg-[var(--my-color)]`.\r\n\r\nThis also applies to modifiers, so `bg-red-500/[var(--my-opacity)]` can be written as `bg-red-500/(--my-opacity)`. To go full circle, you can rewrite `bg-[var(--my-color)]/[var(--my-opacity)]` as `bg-(--my-color)/(--my-opacity)`.\r\n\r\n---\r\n\r\nThis is implemented as syntactical sugar at the parsing stage and handled when re-printing. Internally the system (and every plugin) still see the proper `var(--my-color)` value.\r\n\r\nSince this is also handled during printing of the candidate, codemods don't need to be changed but they will provide the newly updated syntax. \r\n\r\nE.g.: running this on the Catalyst codebase, you'll now see changes like this:\r\n<img width=\"542\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8f0e26f8-f4c9-4cdc-9f28-52307c38610e\">\r\n\r\nWhereas before we converted this to the much longer `min-w-[var(--button-width)]`.\r\n\r\n---\r\n\r\nAdditionally, this required some changes to the Oxide scanner to make sure that `(` and `)` are valid characters for arbitrary-like values.\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15020","RelatedDescription":"Closed or merged PR \"Re-introduce automatic var injection shorthand\" (#15020)"},{"Id":"2668441555","IsPullRequest":true,"CreatedAt":"2024-11-18T12:51:00","Actor":"philipp-spiess","Number":"15029","RawContent":null,"Title":"Support complex `addUtilities()` configs","State":"open","Body":"This PR adds support for complex `addUtilities()` configuration objects that use child combinators and other features.\r\n\r\nFor example, in v3 it was possible to add a utility that changes the behavior of all children of the utility class node by doing something like this:\r\n\r\n```ts\r\naddUtilities({\r\n  '.red-children > *': {\r\n    color: 'red',\r\n  },\r\n});\r\n```\r\n\r\nThis is a pattern that was used by first-party plugins like `@tailwindcss/aspect-ratio` but that we never made working in v4, since it requires parsing the selector and properly extracting all utility candidates.\r\n\r\nWhile working on the codemod that can transform `@layer utilities` scoped declarations like the above, we found out a pretty neat heuristics on how to migrate these cases. We're basically finding all class selectors and replace them with `&`. Then we create a nested CSS structure like this:\r\n\r\n```css\r\n.red-children {\r\n  & > * {\r\n    color: red;\r\n  }\r\n}\r\n```\r\n\r\nDue to first party support for nesting, this works as expected in v4.\r\n\r\n## Test Plan\r\n\r\nWe added unit tests to ensure the rewriting works in some edge cases. Furthermore we added an integration test running the `@tailwindcss/aspect-ratio` plugin. We've also installed the tarballs in the Remix example from the [playgrounds](https://github.com/philipp-spiess/tailwindcss-playgrounds) and ensure we can use the `@tailwindcss/aspect-ratio` plugin just like we could in v3:\r\n \r\n<img width=\"2560\" alt=\"Screenshot 2024-11-18 at 13 44 52\" src=\"https://github.com/user-attachments/assets/31889131-fad0-4c37-b574-cfac2b99f786\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15029","RelatedDescription":"Open PR \"Support complex `addUtilities()` configs\" (#15029)"},{"Id":"2664995693","IsPullRequest":false,"CreatedAt":"2024-11-18T10:53:03","Actor":"danie-ramdhani","Number":"15018","RawContent":null,"Title":"[V4] Theme colors broken on build result","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.33\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite 5.4.11\r\n\r\n**What version of Node.js are you using?**\r\n\r\n—\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\n—\r\n\r\n**Describe your issue**\r\n\r\n`--color-primary` is not works properly on build result but works as expected in development mode.\r\n\r\n**Steps to Reproduce**\r\n\r\n```html\r\n<div\r\n        style=\"background-color: var(--color-primary); width: 40px; height: 40px; margin-top: 10px; margin-bottom: 10px;\">\r\n</div>\r\n```\r\n\r\n```css\r\n@theme {\r\n    --color-primary: light-dark(theme(--color-cyan-700), theme(--color-cyan-300));\r\n}\r\n```\r\n\r\n**dev mode result**\r\n\r\n![dev mode result](https://github.com/user-attachments/assets/a9300be4-16d1-4f15-bd9d-3b86e658f341)\r\n\r\n![dev mode result 1](https://github.com/user-attachments/assets/c1611ded-e7ce-4710-8c2d-c19ae79da90b)\r\n\r\n**build result**\r\n\r\n![build result](https://github.com/user-attachments/assets/33e1b80d-fb21-4958-a654-373f561b6d40)\r\n\r\n![build result 1](https://github.com/user-attachments/assets/de430058-4843-4891-bba0-9dbe0341dd9c)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15018","RelatedDescription":"Closed issue \"[V4] Theme colors broken on build result\" (#15018)"},{"Id":"2668008348","IsPullRequest":true,"CreatedAt":"2024-11-18T10:24:25","Actor":"philipp-spiess","Number":"15028","RawContent":null,"Title":"Bundle core `@tailwindcss/forms` and `@tailwindcss/typography` with the standalone build","State":"open","Body":"Closes #15012\r\n\r\nWe do not have replacements for these plugins _just yet_. In order to increase compatibility with setups that rely on some of these legacy plugins, this PR bundles `@tailwindcss/forms` and `@tailwindcss/typography` with the standalone build now. \r\n\r\nIn comparison to v3, this omits two plugins right now:\r\n\r\n- `@tailwindcss/aspect-ratio` which does not run in v4\r\n- `@tailwindcss/container-queries` which is not a first-party feature of Tailwind CSS v4\r\n\r\nThe implementation isn't great. I tried returning the `localResolve` file path of the module here (which should resolve the module relative to the standalone codebase, but this would not work in compiled builds. I instead choose to change the internal `__tw_resolve` function so that it can return the module directly.\r\n\r\n## Test Plan\r\n\r\nAdded an integration test. I also tested this by running the standalone binary in a temporary folder with as simple input css:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n@plugin \"@tailwindcss/typography\";\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15028","RelatedDescription":"Open PR \"Bundle core `@tailwindcss/forms` and `@tailwindcss/typography` with the standalone build\" (#15028)"},{"Id":"2666577481","IsPullRequest":true,"CreatedAt":"2024-11-18T09:30:46","Actor":"depfu[bot]","Number":"15024","RawContent":null,"Title":"Update postcss 8.4.47 → 8.4.49 (patch)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this upgrade. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ postcss (8.4.47 → 8.4.49) · [Repo](https://github.com/postcss/postcss) · [Changelog](https://github.com/postcss/postcss/blob/main/CHANGELOG.md)\n\n\n\n<details>\n<summary>Release Notes</summary>\n<h4><a href=\"https://github.com/postcss/postcss/releases/tag/8.4.49\">8.4.49</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>Fixed custom syntax without <code class=\"notranslate\">source.offset</code> (by <a href=\"https://bounce.depfu.com/github.com/romainmenke\">@romainmenke</a>).</li>\n</ul></blockquote>\n<h4><a href=\"https://github.com/postcss/postcss/releases/tag/8.4.48\">8.4.48</a></h4>\n\n<blockquote><ul dir=\"auto\">\n<li>Fixed position calculation in error/warnings methods (by <a href=\"https://bounce.depfu.com/github.com/romainmenke\">@romainmenke</a>).</li>\n</ul></blockquote>\n<p><em>Does any of this look wrong? <a href=\"https://depfu.com/packages/npm/postcss/feedback\">Please let us know.</a></em></p>\n</details>\n\n<details>\n<summary>Commits</summary>\n<p><a href=\"https://github.com/postcss/postcss/compare/5e6fd1302d2cc9a844ac99282b2b7745e4ac0ed3...aed8b899884db4bc89f60782771eecd8c7861b32\">See the full diff on Github</a>. The new version differs by 7 commits:</p>\n<ul>\n<li><a href=\"https://github.com/postcss/postcss/commit/aed8b899884db4bc89f60782771eecd8c7861b32\"><code>Release 8.4.49 version</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/345063010bf5a9724589a9ee420bd511ec2b12bf\"><code>Fix position calculations when offset is missing (#1983)</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/77420d62919b4d53921a113bbc939ad5e5b49fe6\"><code>Release 8.4.48 version</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/341529ff4e78d7b90526e6e2eb178573192b47e3\"><code>Update dependencies</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/66fa667831bae59696d0b9ba54c2ee5b9dd74b6a\"><code>Add Node.js 23 to CI</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/1a8b261404348c7ba495af0707d6d244d66cf566\"><code>fix inconsistent position calculations (#1980)</code></a></li>\n<li><a href=\"https://github.com/postcss/postcss/commit/1cc6ac3bf43a12460d3396e2cb76f14075daea1b\"><code>Clarify usage in docs</code></a></li>\n</ul>\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15024","RelatedDescription":"Closed or merged PR \"Update postcss 8.4.47 → 8.4.49 (patch)\" (#15024)"},{"Id":"2666990652","IsPullRequest":true,"CreatedAt":"2024-11-18T09:23:22","Actor":"depfu[bot]","Number":"15026","RawContent":null,"Title":"Update tree-sitter-typescript 0.23.0 → 0.23.2 (minor)","State":"closed","Body":"\n\n\n\n\nHere is everything you need to know about this update. Please take a good look at what changed and the test results before merging this pull request.\n\n### What changed?\n\n\n\n\n#### ✳️ tree-sitter-typescript (0.23.0 → 0.23.2)\n\n\n\n\n\nSorry, we couldn't find anything useful about this release.\n\n\n\n\n\n\n\n\n\n\n\n---\n![Depfu Status](https://depfu.com/badges/edd6acd35d74c8d41cbb540c30442adf/stats.svg)\n\n[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.\n\n<details><summary>All Depfu comment commands</summary>\n<blockquote><dl>\n<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>\n<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>\n<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>\n<dt>@​depfu cancel merge</dt><dd>Cancels automatic merging of this PR</dd>\n<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>\n<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>\n<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>\n<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>\n<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>\n</dl></blockquote>\n</details>\n\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15026","RelatedDescription":"Closed or merged PR \"Update tree-sitter-typescript 0.23.0 → 0.23.2 (minor)\" (#15026)"},{"Id":"2666251985","IsPullRequest":false,"CreatedAt":"2024-11-17T18:18:53","Actor":"Hugos68","Number":"15021","RawContent":null,"Title":"Plugin config extensions aren't deepmerged.","State":"open","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n- 3.4.9\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n- vite:  5.0.3\r\n\r\n**What version of Node.js are you using?**\r\n\r\n- 22.11.0\r\n\r\n**What browser are you using?**\r\n\r\n- Chrome\r\n\r\n**What operating system are you using?**\r\n\r\n- Windows\r\n\r\n**Reproduction URL**\r\n\r\nUnsure how to reproduce in tailwind.play as it's a config issue and I can't access the post merge config.\r\n\r\n**Describe your issue**\r\n\r\n[In the tailwind docs](https://tailwindcss.com/docs/plugins#extending-the-configuration) it states quote:\r\n> Plugins can merge their own set of configuration values into the user’s tailwind.config.js configuration by providing an object as the second argument to the plugin function.\r\n\r\nSo when doing the following:\r\n```js\r\nimport plugin from 'tailwindcss/plugin';\r\n\r\nexport default {\r\n    content: ['one']\r\n    plugins: [\r\n       plugin(() => {}, { content: ['two'] })\r\n    ]\r\n}\r\n```\r\n\r\nI would expect the merged config to look like:\r\n```js\r\nexport default {\r\n    content: ['one', 'two']\r\n}\r\n```\r\nBut the actual resulted config is:\r\n```js\r\nexport default {\r\n    content: ['one']\r\n}\r\n```\r\n\r\nThis means because the `content` field is present in the config, the plugin's `content` field is completely ignored. This makes authoring plugins more painful as know I need to instruct users to add stuff to their `content` field manually instead of have my plugin do this *for* them.\r\n\r\nIs this intended behaviour?","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15021","RelatedDescription":"Open issue \"Plugin config extensions aren't deepmerged.\" (#15021)"},{"Id":"2662472919","IsPullRequest":true,"CreatedAt":"2024-11-16T20:10:55","Actor":"philipp-spiess","Number":"15013","RawContent":null,"Title":"Bring back `max-w-screen-*` utilities","State":"closed","Body":"This PR brings back the `max-w-screen-*` utilities from v3 that read from the `--breakpoint` namespace. \r\n\r\nSince these utilities are only added back for compatibility reasons, it's put into the compatibility layer.\r\n\r\nNote that this does not do Intellisense recommendations for the functional utility. \r\n\r\n## Test Plan\r\n\r\nUnit tests are upgraded including some from the compat test that extends the `--breakpoint` namespace from `screen` keys. Also tested this in the Vite playground. ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15013","RelatedDescription":"Closed or merged PR \"Bring back `max-w-screen-*` utilities\" (#15013)"},{"Id":"2664480119","IsPullRequest":false,"CreatedAt":"2024-11-16T14:38:26","Actor":"amjarmed","Number":"15017","RawContent":null,"Title":"Empty Selector Generated in Tailwind CSS Output","State":"open","Body":"I encountered an issue where Tailwind CSS generates an invalid empty selector { } in the compiled CSS, causing errors during parsing.\r\n\r\n\r\n```bash\r\n\r\nParsing css source code failed\r\n  839 |   border-width: 1px;\r\n  840 | }\r\n> 841 |  {\r\n      |   ^\r\n  842 |   border-bottom-width: 1px !important;\r\n  843 | }\r\n  844 | .border-b {\r\n\r\nInvalid empty selector at\r\n\r\n\r\n```\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n-  \"tailwindcss\": \"^3.4.14\",\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n-  \"next\": \"15.0.1\",\r\n\r\n**What browser are you using?**\r\n\r\n- Chrome\r\n\r\n**What operating system are you using?**\r\n\r\n-  Windows\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/amjarmed/jsm-banking\r\n\r\n\r\n**Describe your issue**\r\nTailwind CSS should not generate any empty selectors. All rules should be associated with a valid class or selector.\r\nA selector {border-bottom-width: 1px !important; } is generated without a class name, leading to parsing failures during build or runtime.\r\n\r\n\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15017","RelatedDescription":"Open issue \"Empty Selector Generated in Tailwind CSS Output\" (#15017)"},{"Id":"2662249111","IsPullRequest":true,"CreatedAt":"2024-11-15T21:06:52","Actor":"RobinMalfait","Number":"15010","RawContent":null,"Title":"Resolve imports from CSS file","State":"closed","Body":"This PR adds an improvement to the upgrade tool to make sure that if you pass a single CSS file, that the upgrade tool resolves all the imports in that file and processes them as well.\r\n\r\n\r\nTest plan:\r\n---\r\n\r\nCreated a project where `index.css` imports `other.css`. Another `leave-me-alone.css` is created to proof that this file is _not_ changed. Running the upgrade guide using `index.css` also migrates `other.css` but not `leave-me-alone.css`.\r\n\r\nHere is a video so you don't have to manually create it:\r\n\r\n\r\nhttps://github.com/user-attachments/assets/20decf77-77d2-4a7c-8ff1-accb1c77f8c1\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15010","RelatedDescription":"Closed or merged PR \"Resolve imports from CSS file\" (#15010)"},{"Id":"2662601377","IsPullRequest":true,"CreatedAt":"2024-11-15T17:05:28","Actor":"philipp-spiess","Number":"15015","RawContent":null,"Title":"Upgrade: Error when project is already using Tailwind CSS v4","State":"open","Body":"In some local testing we ran the `@tailwindcss/upgrade` command twice in a row. It would be great to get some feedback that this is not working, so this PR now checks if it can resolve the installed version of `tailwindcss` and if it can, it requires it to be < 4 (you can bypass this check with `--force`).","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15015","RelatedDescription":"Open PR \"Upgrade: Error when project is already using Tailwind CSS v4\" (#15015)"},{"Id":"2662578029","IsPullRequest":true,"CreatedAt":"2024-11-15T17:02:57","Actor":"RobinMalfait","Number":"15014","RawContent":null,"Title":"Make `flex` a static utility","State":"closed","Body":"This PR makes `flex` a static utility, which also means that it is located near the other static `display` utilities.\n\nThis is possible because we changed how `parseCandidate` returns an array of utilities instead of a single utility.\n\nThis makes the code more consistent and a bit easier to understand.\n\nBonus: turns out that `flex` was never suggested to intellisense, but now it is!\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15014","RelatedDescription":"Closed or merged PR \"Make `flex` a static utility\" (#15014)"},{"Id":"2662466188","IsPullRequest":false,"CreatedAt":"2024-11-15T16:18:51","Actor":"delCatta","Number":"15012","RawContent":null,"Title":"[v4] Can't find Plugins in standalone cli","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.0.0.alpha.34\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: standalone-cli @ 4.0.0.alpha.34\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: N/A\r\n\r\n**What browser are you using?**\r\n\r\nFor example: N/A\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/delCatta/tailwind-issue\r\n\r\n**Describe your issue**\r\n\r\nUsing the latest release I'm unable to use the @tailwindcss/typography plugin because it is not included in the executable.\r\n\r\nI copied the release file and created an `input.css` file with the following contents:\r\n\r\n```\r\n@import \"tailwindcss\";\r\n@plugin \"@tailwindcss/typography\";\r\n```\r\n\r\nThen I ran `./tailwindcss-macos-arm64 -i index.css -o built.css` and got:\r\n\r\n```\r\n./tailwindcss-macos-arm64 -i index.css -o built.css\r\n5737 |       }\r\n5738 |       const message = `resolve '${request}' in '${path}'`;\r\n5739 |       const finishResolved = (result) => {\r\n5740 |         return callback(null, result.path === false ? false : `${result.path.replace(/#/g, \"\\0#\")}${result.query ? result.query.replace(/#/g, \"\\0#\") : \"\"}${result.fragment || \"\"}`, result);\r\n5741 |       };\r\n5742 |         const error = new Error(\"Can't \" + message);\r\n                             ^\r\nerror: Can't resolve '@tailwindcss/typography' in '<THE-CURRENT-FOLDER>'\r\n      at finishWithoutResolve (/$bunfs/root/tailwindcss-macos-arm64:5742:23)\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n```\r\n\r\nI wish to be able to use on rails using [tailwind-rails](https://github.com/rails/tailwindcss-rails) and [tailwind-ruby](https://github.com/flavorjones/tailwindcss-ruby)","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15012","RelatedDescription":"Open issue \"[v4] Can't find Plugins in standalone cli\" (#15012)"},{"Id":"2662425679","IsPullRequest":true,"CreatedAt":"2024-11-15T16:18:48","Actor":"philipp-spiess","Number":"15011","RawContent":null,"Title":"Ensure clients pin the `tailwindcss` version","State":"closed","Body":"We noticed that in the current alpha 34 release, the `package.json` file of the `@tailwindcss/node` package only defines `tailwindcss` as a dev dependency. This makes it very easy for version mismatches to happen when a v3 version (or an earlier v4 alpha for that matter) was installed in the same project:\r\n\r\n```json\r\n{\r\n  \"name\": \"@tailwindcss/node\",\r\n  \"version\": \"4.0.0-alpha.34\",\r\n  \"description\": \"A utility-first CSS framework for rapidly building custom user interfaces.\",\r\n  \"license\": \"MIT\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/tailwindlabs/tailwindcss.git\",\r\n    \"directory\": \"packages/@tailwindcss-node\"\r\n  },\r\n  \"bugs\": \"https://github.com/tailwindlabs/tailwindcss/issues\",\r\n  \"homepage\": \"https://tailwindcss.com\",\r\n  \"files\": [\r\n    \"dist/\"\r\n  ],\r\n  \"publishConfig\": {\r\n    \"provenance\": true,\r\n    \"access\": \"public\"\r\n  },\r\n  \"exports\": {\r\n    \".\": {\r\n      \"types\": \"./dist/index.d.ts\",\r\n      \"import\": \"./dist/index.mjs\",\r\n      \"require\": \"./dist/index.js\"\r\n    },\r\n    \"./require-cache\": {\r\n      \"types\": \"./dist/require-cache.d.ts\",\r\n      \"default\": \"./dist/require-cache.js\"\r\n    },\r\n    \"./esm-cache-loader\": {\r\n      \"types\": \"./dist/esm-cache.loader.d.mts\",\r\n      \"default\": \"./dist/esm-cache.loader.mjs\"\r\n    }\r\n  },\r\n  \"devDependencies\": {\r\n    \"tailwindcss\": \"4.0.0-alpha.34\"\r\n  },\r\n  \"dependencies\": {\r\n    \"enhanced-resolve\": \"^5.17.1\",\r\n    \"jiti\": \"^2.0.0-beta.3\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"tsup-node\",\r\n    \"dev\": \"pnpm run build -- --watch\"\r\n  }\r\n}\r\n```\r\n\r\nFurthermore, we were trying to fix issues where our integration test setup could not install `tailwindcss@3` because of how we did pnpm overrides. \r\n\r\nThis PR fixes this by:\r\n\r\n- Ensuring every client that calls into `tailwindcss` core marks it as a version-pinned dependency. You are still required to install `tailwindcss` in your project along side a client (e.g. `@tailwindcss/vite`) but we now only use your installed version for importing the respective `.css` files. For the core logic, we are now requiring each package to use `tailwindcss` at the same version. This should help resolve issues like https://github.com/tailwindlabs/tailwindcss/discussions/14652\r\n- We tried to eliminate the dependency on `tailwindcss` from the `@tailwindcss/upgrade` package. Unfortunately this is not possible to do right now because we need to load the CSS files from v4 to create the right environment. In a future version we could bundle the required CSS files with `@tailwidncss/upgrade` but it doesn't seem necessary for now.\r\n- We then changed our integration test overrides to only override the `tailwindcss` package that are dependencies of the known list of packages that we have `tailwindcss` dependencies on: `@tailwindcss/node` and `@tailwindcss/upgrade`. This ensures that we can install v3 of `tailwindcss` in the integration tests and it will work. Something we want to do for some upgrade tests.\r\n\r\n# Test plan\r\n\r\nIntegration work again. Furthermore we added a quick setup with the CLI using the local tarballs and ensured it works:\r\n\r\n```bash\r\npnpm init\r\npnpm install ../../tailwindcss/dist/tailwindcss-cli.tgz \r\npnpm install ../../tailwindcss/dist/tailwindcss.tgz \r\necho '@import \"tailwindcss\";' > index.css\r\necho '<div class=\"underline\"></div>' > index.html\r\npnpm tailwindcss -i index.css -o out.css\r\ncat out.css\r\n```\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15011","RelatedDescription":"Closed or merged PR \"Ensure clients pin the `tailwindcss` version\" (#15011)"},{"Id":"2661525779","IsPullRequest":true,"CreatedAt":"2024-11-15T14:43:12","Actor":"philipp-spiess","Number":"15009","RawContent":null,"Title":"Bring back named opacity support for color opacity modifiers","State":"closed","Body":"This PR reverts https://github.com/tailwindlabs/tailwindcss/pull/14278 to bring back support for using named opacity values in color opacity modifiers:\r\n\r\n```css\r\n@theme {\r\n  --opacity-myOpacity: 50%;\r\n}\r\n```\r\n\r\n```html\r\n<div class=\"bg-red-500/myOpacity\"></div>\r\n```\r\n\r\nWe briefly discuss to restructure the code so that we avoid adding a `theme` argument to the call sites but I do still prefer the current approach for the following reasons: The way to avoid this is to a) put something in either the `Theme` class scope, where it feels grossly out of place, or b) put it into the shared closure in the utilities file which is already very large and hard to reason. Furthermore, there's a second call site in the compile function where we would need to duplicate the namespace lookup.\r\n\r\nEvery caller of the current `asColor` value already has access to the `Theme` so passing that as an argument seems like the least intrusive way.\r\n\r\n## Test Plan\r\n\r\nBrought back the unit tests but I also tested it with the Vite extension:\r\n\r\n<img width=\"744\" alt=\"Screenshot 2024-11-15 at 11 15 05\" src=\"https://github.com/user-attachments/assets/63923b80-767e-4104-b7eb-f71fc815b51e\">\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15009","RelatedDescription":"Closed or merged PR \"Bring back named opacity support for color opacity modifiers\" (#15009)"},{"Id":"2660632944","IsPullRequest":false,"CreatedAt":"2024-11-15T10:10:22","Actor":"HexMox","Number":"15007","RawContent":null,"Title":"Special character in group-has-[xxx] not escaped","State":"closed","Body":"<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv3.4.13\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\npostcss-cli 8.4.47, Next.js 14.2.8\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv18.20.4\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nN/A\r\n\r\n**Describe your issue**\r\n\r\n<img width=\"958\" alt=\"image\" src=\"https://github.com/user-attachments/assets/528e5d9c-6d25-4b6c-b310-74f9f9a8154d\">\r\n\r\nThe colon in css result .group:has(xxx) is unescaped","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15007","RelatedDescription":"Closed issue \"Special character in group-has-[xxx] not escaped\" (#15007)"},{"Id":"2659934221","IsPullRequest":false,"CreatedAt":"2024-11-14T20:09:53","Actor":"blittle","Number":"15005","RawContent":null,"Title":"@property isn't supported in shadow roots","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: `4.0.0-alpha.34`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nWeb components with shadow roots.\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.2.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/blittle/tw-shadow\r\n\r\n**Describe your issue**\r\n\r\nTailwind v4 uses `@property` to define defaults for custom properties. At the moment, shadow roots do _not support_ `@property`. It used to be explicitly denied in the spec, but it looks like there's talk on adding it: https://github.com/w3c/css-houdini-drafts/pull/1085\r\n\r\nI don't know if this is something tailwind should fix, but it took me a while to find the issue, so it's probably worth keeping this issue to document the limitation.\r\n\r\nHere is a work-around, [just attaching the `@property` definitions to the base document](https://benfrain.com/using-css-property-inside-shadowroot-web-components-workaround/). It would be nice if tailwind provided an easy way to import just that content.\r\n\r\nAn easy way to do that with Vite is to create a tailwind css file specifically for the properties and apply a transform:\r\n\r\n```js\r\nexport default defineConfig(() => {\r\n  return {\r\n    ...\r\n    plugins: [\r\n      tailwindcss(),\r\n      {\r\n        name: \"tailwind-properties\",\r\n        transform(code, id) {\r\n          if (id.endsWith(\"tailwind-properties.css?inline\")) {\r\n            // Change custom properties to inherit\r\n            code = code.replaceAll(\"inherits: false\", \"inherits: true\");\r\n\r\n            // Remove everything before the property declarations\r\n            code = code.substring(code.indexOf(\"@property\"));\r\n\r\n            return code;\r\n          }\r\n        },\r\n      },\r\n    ],\r\n  };\r\n});\r\n```","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15005","RelatedDescription":"Open issue \"@property isn't supported in shadow roots\" (#15005)"},{"Id":"2659145188","IsPullRequest":false,"CreatedAt":"2024-11-14T20:00:07","Actor":"schenney-chromium","Number":"15000","RawContent":null,"Title":"Selection is broken in Chrome 131 due to --tw-text-opacity and friends","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nNot sure what version sites are using, but I suspect less than a year old.\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nDon't know\r\n\r\n**What version of Node.js are you using?**\r\n\r\nDon't know\r\n\r\n**What browser are you using?**\r\n\r\nChrome and Edge\r\n\r\n**What operating system are you using?**\r\n\r\nAll\r\n\r\n**Reproduction URL**\r\n\r\nSee https://issues.chromium.org/issues/378754060 for numerous reproductions. From The Verge:\r\n```\r\n.selection\\:bg-franklin-20::selection {\r\n    --tw-bg-opacity: 1;\r\n    background-color: rgb(216 255 246/var(--tw-bg-opacity));\r\n}\r\n```\r\nAll selection is blank in Chrome 131 and later on The Verge, Bloomberg news, ...\r\n\r\n**Describe your issue**\r\n\r\nChrome 131 and browsers using Chromium enable CSS Highlight Inheritance for ::selection. In this model custom properties for ::selection and other highlight pseudos are taken from the originating element, and not the pseudo itself. All custom properties defined on highlight pseudos are ignored. But Tailwind defines a custom property for opacity on every use of a color, including ::selection colors. There is no practical use for this because the variable is redefined all over the place and any given usage inside ::selection applies only within that ::selection block (with the old behavior).\r\n\r\nSee https://developer.chrome.com/blog/selection-styling and https://blogs.igalia.com/schenney/css-custom-properties-in-highlight-pseudos/\r\n\r\nI might try to figure out how to fix this and put up a PR for you.","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15000","RelatedDescription":"Closed issue \"Selection is broken in Chrome 131 due to --tw-text-opacity and friends\" (#15000)"},{"Id":"2659790744","IsPullRequest":false,"CreatedAt":"2024-11-14T19:09:58","Actor":"ranseur92","Number":"15004","RawContent":null,"Title":"[V4] - Loading PostCSS Plugin failed: The URL must be of scheme file","State":"open","Body":"**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.21 onwards\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nVite ^5.4.8\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.11.0\r\n\r\n**What browser are you using?**\r\n\r\nEdge\r\n\r\n**What operating system are you using?**\r\n\r\nWindows 11\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/ranseur92/twind-test\r\n\r\n**Describe your issue**\r\n\r\nCannot get any version higher than v4 Alpha 20 to work, within a AdonisJS + InertiaJS setup.\r\n\r\n```\r\n[Failed to load PostCSS config: Failed to load PostCSS config (searchPath: D:/JS/twind-test): [Error] Loading PostCSS Plugin failed: The URL must be of scheme file\r\n\r\n(@D:\\JS\\twind-test\\postcss.config.cjs)\r\nError: Loading PostCSS Plugin failed: The URL must be of scheme file\r\n```\r\n\r\nI'm guessing the underlying issue, is related to https://github.com/tailwindlabs/tailwindcss/issues/14420 but that fix isn't appropriate in this case. ","Url":"https://github.com/tailwindlabs/tailwindcss/issues/15004","RelatedDescription":"Open issue \"[V4] - Loading PostCSS Plugin failed: The URL must be of scheme file\" (#15004)"},{"Id":"2659531872","IsPullRequest":true,"CreatedAt":"2024-11-14T18:33:27","Actor":"thecrypticace","Number":"15003","RawContent":null,"Title":"Add variable fallback to fix Chrome issue","State":"closed","Body":"This works around an issue in Chrome where `::selection` does not read from variables defined on `::selection` thus breaking all uses of color utilities with the selection variant. e.g. `selection::bg-red-200`.\r\n\r\nWe now add a fallback value of `1` to all uses of `var(--tw-bg-opacity)`, `var(--tw-text-opacity)`, `var(--tw-border-opacity)`, etc… since Chrome treats the variable as if it did not exist because it's not defined on the parent.\r\n\r\nIn Chrome 131 (until the change is rolled back) existing utilities like these will not work:\r\n- `selection:text-opacity-50`\r\n- `selection:[--tw-text-opacity:0.5]`\r\n\r\nFixes #15000 ","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15003","RelatedDescription":"Closed or merged PR \"Add variable fallback to fix Chrome issue\" (#15003)"},{"Id":"2659518446","IsPullRequest":true,"CreatedAt":"2024-11-14T17:23:40","Actor":"philipp-spiess","Number":"15002","RawContent":null,"Title":"Prepare v4.0.0-alpha.34","State":"closed","Body":"","Url":"https://github.com/tailwindlabs/tailwindcss/pull/15002","RelatedDescription":"Closed or merged PR \"Prepare v4.0.0-alpha.34\" (#15002)"},{"Id":"2658673469","IsPullRequest":true,"CreatedAt":"2024-11-14T17:19:22","Actor":"philipp-spiess","Number":"14999","RawContent":null,"Title":"Add codemod and interop for legacy `container` component configu","State":"closed","Body":"This PR adds support for handling v3 [`container` customizations ](https://tailwindcss.com/docs/container#customizing). This is done by adding a custom utility to extend the core `container` utility. A concrete example can be taken from the added integration test.\r\n\r\n### Input\r\n\r\n```ts\r\n/** @type {import('tailwindcss').Config} */\r\nexport default {\r\n  content: ['./src/**/*.html'],\r\n  theme: {\r\n    container: {\r\n      center: true,\r\n      padding: {\r\n        DEFAULT: '2rem',\r\n        '2xl': '4rem',\r\n      },\r\n      screens: {\r\n        md: '48rem', // Matches a default --breakpoint\r\n        xl: '1280px',\r\n        '2xl': '1536px',\r\n      },\r\n    },\r\n  },\r\n}\r\n```\r\n\r\n### Output\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n\r\n@utility container {\r\n  margin-inline: auto;\r\n  padding-inline: 2rem;\r\n\r\n  @media (width >= theme(--breakpoint-sm)) {\r\n    max-width: none;\r\n  }\r\n\r\n  @media (width >= 48rem) {\r\n    max-width: 48rem;\r\n  }\r\n\r\n  @media (width >= 1280px) {\r\n    max-width: 1280px;\r\n  }\r\n\r\n  @media (width >= 1536px) {\r\n    max-width: 1536px;\r\n    padding-inline: 4rem;\r\n  }\r\n}\r\n````\r\n\r\n\r\n## Test Plan\r\n\r\nThis PR adds extensive tests to the compat layer as part of unit tests. Additionally it does at a test to the codemod setup that shows that the right `@utility` code is generated. Furthermore I compared the implementation against v3 on both the compat layer and the custom `@utility`:\r\n\r\nhttps://github.com/user-attachments/assets/44d6cbfb-4861-4225-9593-602b719f628f\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14999","RelatedDescription":"Closed or merged PR \"Add codemod and interop for legacy `container` component configu\" (#14999)"},{"Id":"2657839088","IsPullRequest":false,"CreatedAt":"2024-11-14T10:26:38","Actor":"BVPritesh","Number":"14998","RawContent":null,"Title":"Need to resolve the :has() empty sub selector after build the angular project.","State":"closed","Body":"After building the Angular project, I found that a warning was displayed. However, the style.css file is not empty; the .has() selector has a value. Please check the screenshot below.\r\n\r\nLet me know if you need further adjustments!\r\n\r\nWarning message as below:\r\n```\r\nWARNING] 7 rules skipped due to selector errors:\r\n  .has-\\[\\:checked\\]\\:border-indigo-200:has() -> Empty sub-selector\r\n  .has-\\[\\:checked\\]\\:bg-indigo-50:has() -> Empty sub-selector\r\n  .has-\\[\\:checked\\]\\:bg-indigo-500:has() -> Empty sub-selector\r\n  .has-\\[\\:checked\\]\\:text-indigo-900:has() -> Empty sub-selector\r\n  .has-\\[\\:checked\\]\\:text-white:has() -> Empty sub-selector\r\n  .has-\\[\\:checked\\]\\:ring-2:has() -> Empty sub-selector\r\n  .has-\\[\\:checked\\]\\:ring-indigo-600:has() -> Empty sub-selector\r\n```  \r\nScreenshot:  \r\n![image](https://github.com/user-attachments/assets/18c83f7f-c195-4cf4-b422-90571236a645)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14998","RelatedDescription":"Closed issue \"Need to resolve the :has() empty sub selector after build the angular project.\" (#14998)"},{"Id":"2656137078","IsPullRequest":true,"CreatedAt":"2024-11-13T18:39:21","Actor":"philipp-spiess","Number":"14993","RawContent":null,"Title":"Reintroduce `container` component as a utility","State":"closed","Body":"Closes #13129\r\n\r\nWe're adding back the v3 `container` component, this time as a utility. The idea is that we support the default `container` behavior but we will not have an API to configure this similar to what v3 offered. Instead, the recommended approach is to configure it by creating a custom utility like so:\r\n\r\n```css\r\n@import \"tailwindcss\";\r\n\r\n@utility container {\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding-left: 2rem;\r\n  padding-right: 2rem;\r\n}\r\n```\r\n\r\nWe do have an idea of how to migrate existing JS configuration files to the new `@utility` as part of the interop layer and the codemod. This is going to be a follow-up PR though.\r\n\r\n## Test Plan\r\n\r\nWe added a unit test but we've also played around with it in the Vite playground. Yep, looks like a `container`:\r\n\r\nhttps://github.com/user-attachments/assets/ea7a5a4c-4cde-4ef5-9062-03e16239eb85\r\n\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/pull/14993","RelatedDescription":"Closed or merged PR \"Reintroduce `container` component as a utility\" (#14993)"},{"Id":"2656007640","IsPullRequest":false,"CreatedAt":"2024-11-13T17:35:11","Actor":"simonmaass","Number":"14992","RawContent":null,"Title":"Lexical error on line 1: Unrecognized text. in v4","State":"closed","Body":"**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.0.0-alpha.30\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\"@tailwindcss/node@4.0.0-alpha.30\"\r\n\"@tailwindcss/postcss@4.0.0-alpha.30\"\r\n\"@tailwindcss/vite@4.0.0-alpha.30\"\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.11.1\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Describe your issue**\r\n\r\n WARN  [vite:css] Lexical error on line 1: Unrecognized text.                                                                                                                                     17:04:20\r\n\r\n  Erroneous area:\r\n1: infinity * 1px\r\n^..^\r\n1117|    }\r\n1118|    .rounded-full {\r\n1119|      border-radius: calc(infinity * 1px);\r\n   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n1120|    }\r\n1121|    .rounded-lg { (x2)\r\n\r\n![image](https://github.com/user-attachments/assets/baca0ffb-066b-4109-b52a-274669d690ca)\r\n","Url":"https://github.com/tailwindlabs/tailwindcss/issues/14992","RelatedDescription":"Closed issue \"Lexical error on line 1: Unrecognized text. in v4\" (#14992)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-11-19T03:30:25.2663715Z","RunDurationInMilliseconds":429}