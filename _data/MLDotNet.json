{"Data":{"GitHub":{"Issues":[{"Id":"680609239","IsPullRequest":true,"CreatedAt":"2020-08-18T00:46:45","Actor":"frank-dong-ms","Number":"5351","RawContent":null,"Title":"fix issue 5350, check file lock before reload model","State":"open","Body":"fix issue #5350 \r\n\r\nThe issue here is we use a file system watcher to watch model file change and reload the new model file automatically. The problem here is when we try to load the new model file this file is still locked thus cause the reload to fail. \r\nPreviously we are wait for 50 milliseconds before reload the new model file but that fails to work sometimes so here change the strategy to consistently check whether the file can be reload every 50 milliseconds for at most 100 times (which is roughly at total 5 seconds). If we still can't reload new model file after 5 seconds, throw IOException.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5351","RelatedDescription":"Open PR \"fix issue 5350, check file lock before reload model\" (#5351)"},{"Id":"679507967","IsPullRequest":true,"CreatedAt":"2020-08-17T19:00:11","Actor":"antoniovs1029","Number":"5349","RawContent":null,"Title":"Throw when PCA generates invalid eigenvectors","State":"closed","Body":"Fixes https://github.com/microsoft/NimbusML/issues/497\r\n\r\nAs discussed there, the problem is that when PCA generates eigenvectors with NaN values, a cryptic exception is thrown on NimbusML during prediction and not during training. It's thrown during prediction because to do prediction NimbusML saves the model to disk and loads it back, and during deserialization there's a check that prevents loading eigenvectors that contain NaNs.\r\n\r\nIn this PR I'm adding an exception to the constructor of PcaModelParameters so that a more readable exception is thrown during training of either NimbusML or ML.NET, so there's no need to wait until prediction for NimbusML to throw it.","Url":"https://github.com/dotnet/machinelearning/pull/5349","RelatedDescription":"Closed or merged PR \"Throw when PCA generates invalid eigenvectors\" (#5349)"},{"Id":"679109446","IsPullRequest":false,"CreatedAt":"2020-08-17T18:05:52","Actor":"ladodc","Number":"5346","RawContent":null,"Title":"ML.Net CustomMapping with ONNX Model","State":"closed","Body":"### System information\r\n\r\n- **Win10\r\n- ** .Net Core 3.1 \r\n\r\n### Issue\r\n\r\nI do not know how to define output_column with sequence in CustomMapping.\r\n![Output_ONNX](https://user-images.githubusercontent.com/10833738/90246362-ca2f8900-de34-11ea-8f76-25b6c1f09414.PNG)\r\nFor output_label  it is simple Int64[] . But for output_probabilities I have no idea.\r\nI have tried in my InputClass \r\n`IEnumerable<IDictionary<Int64, float>> output_probability { get; set; } `\r\nor\r\n`OnnxSequenceType output_probability { get; set; } `\r\n\r\nBut witout success. \r\n\r\nHier ist fully functional sample. With dataset and onnx model.\r\n[TestCustomMapping.zip](https://github.com/dotnet/machinelearning/files/5074415/TestCustomMapping.zip)\r\nOr here is code :\r\n\r\n### Source code\r\n\r\n`using Microsoft.ML;\r\nusing Microsoft.ML.Transforms.Onnx;\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace TestCustomMapping\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var mlContext = new MLContext();\r\n\r\n            var data = new List<InputDataLinear>() { new InputDataLinear() { day = 3, hour = 4, temperature = 15.4F, vibration = 5.6F, name = \"Machine 1\", worker = \"Hans\", Fehler = true } };\r\n            var dataView = mlContext.Data.LoadFromEnumerable<InputDataLinear>(data);\r\n\r\n            // Define the operation code.\r\n            Action<InputRow, OutputRow> mapping = (input, output) => {                \r\n                output.PredictedLabelSingle = input.output_label[0];\r\n                output.ProbabilitySingle = 0/*input.output_probability*/;\r\n            };\r\n\r\n            var pipeline = mlContext.Transforms.ApplyOnnxModel(modelFile: @\"../../../Model/model2.onnx\", inputColumnNames: new string[] { \"day\", \"hour\", \"name\", \"worker\", \"temperature\", \"vibration\" },\r\n                    outputColumnNames: new[] { \"output_label\", \"output_probability\"});\r\n\r\n            IDataView predictions = pipeline.Fit(dataView).Transform(dataView);\r\n\r\n            IDataView predictions2 = mlContext.Transforms.CustomMapping(mapping, null).Fit(predictions).Transform(predictions);\r\n   \r\n            var metrics = mlContext.BinaryClassification.Evaluate(predictions2, labelColumnName: \"Fehler\", scoreColumnName: \"ScoreSingle\", probabilityColumnName: \"ProbabilitySingle\", predictedLabelColumnName: \"PredictedLabelSingle\");            \r\n        }\r\n    }\r\n\r\n    public class InputRow\r\n    {\r\n        //public IEnumerable<IDictionary<Int64, float>> output_probability { get; set; }\r\n        public IEnumerable<IDictionary<Int64, float>> output_probability { get; set; }\r\n\r\n        public Int64[] output_label { get; set; }\r\n\r\n    }\r\n\r\n    public class OutputRow\r\n    {\r\n        public float ScoreSingle { get; set; }\r\n\r\n        public float ProbabilitySingle { get; set; }\r\n\r\n        public bool PredictedLabelSingle { get; set; }\r\n\r\n    }\r\n\r\n    class InputDataLinear \r\n    {\r\n        public float day { get; set; }\r\n\r\n        public float hour { get; set; }\r\n\r\n        public float temperature { get; set; }\r\n\r\n        public float vibration { get; set; }\r\n\r\n        public string name { get; set; }\r\n\r\n        public string worker { get; set; }\r\n\r\n        public bool Fehler { get; set; }\r\n\r\n    }\r\n}\r\n`\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5346","RelatedDescription":"Closed issue \"ML.Net CustomMapping with ONNX Model\" (#5346)"},{"Id":"679456563","IsPullRequest":true,"CreatedAt":"2020-08-16T05:10:57","Actor":"harishsk","Number":"5348","RawContent":null,"Title":"Added IDisposable to OnnxTransformer and fixed memory leaks","State":"closed","Body":"Fixes #5342 \r\nA temp file was being created when the Onnx model was being loaded from within an ML.NET model. This file wasn't being deleted when the session exited because OnnxTransformer didn't support IDisposable. (Also added Dispose calls to OnnxTransformer objects in the tests)\r\n\r\nThanks to the reported bug, this also fixes memory leaks that we would see from OnnxRuntime.dll because the native memory associated with InferenceSession wasn't freed.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5348","RelatedDescription":"Closed or merged PR \"Added IDisposable to OnnxTransformer and fixed memory leaks\" (#5348)"},{"Id":"677545163","IsPullRequest":false,"CreatedAt":"2020-08-16T05:10:57","Actor":"pthinh14","Number":"5342","RawContent":null,"Title":"Load ONNX model creates temp file","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n- **.NET Version (eg., dotnet --info)**: .NET framework 4\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nLoad model saved by ML.NET, the base model is in ONNX format\r\n- **What happened?**\r\nEverytime I load the model, a new onnx model file is created in %temp% folder and it is not deleted after releasing model object or after exiting the application. File path: %temp%\\7bf1a39c-b65c-4874-927b-2bacbbf57b15\\model.onnx\r\nI tried to delete the file when the model was predicting but there is no error or exception and the result is the same.  \r\n- **What did you expect?**\r\nThis file should be deleted or better not be created since it exposes our model to the user consumes too much user's memory.\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5342","RelatedDescription":"Closed issue \"Load ONNX model creates temp file\" (#5342)"},{"Id":"679633476","IsPullRequest":false,"CreatedAt":"2020-08-15T19:58:55","Actor":"alexandermujirishvili","Number":"5350","RawContent":null,"Title":"ML Model is not reloaded if prediction was made before","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:  Windows 10 Pro, version 2004, OS Build: 19041.450\r\n- **.NET Version (eg., dotnet --info)**: 3.1.302\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\n     After new record is available, I add it to training data and retrain model.\r\n\r\n- **What happened?**\r\n\r\n     New model was generated, but not reloaded in app.\r\n\r\n- **What did you expect?**\r\n\r\n     Reloaded model and better (expected) prediction\r\n\r\n### Source code / logs\r\n\r\nI use this code to add prediction engine pool:\r\n\r\n```\r\nservices.AddPredictionEnginePool<SentimentData, SentimentPrediction>()\r\n                  .FromFile(\r\n                  modelName: Constants.ModelName,\r\n                  filePath: Constants.ModelFileName,\r\n                  watchForChanges: true);\r\n```\r\n![image](https://user-images.githubusercontent.com/46314872/90320515-140e9100-df53-11ea-8392-f1f66364887b.png)\r\n\r\nSample project: https://github.com/alexandermujirishvili/DotnetMLWatchForChanges\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5350","RelatedDescription":"Open issue \"ML Model is not reloaded if prediction was made before\" (#5350)"},{"Id":"677618310","IsPullRequest":false,"CreatedAt":"2020-08-15T06:17:59","Actor":"ladodc","Number":"5343","RawContent":null,"Title":"ONNX Model Evaluation in ML.Net not working","State":"closed","Body":"### System information\r\n\r\n- Win10\r\n- .NET Core 3.1\r\n\r\n### How can I evaluate ONNX Model in ML.Net\r\nI am loading already trained ONNX Model with ApplyOnnxModel then produce predictions based on my data(IDataView) and afterward I am going to evaluate the results with mlContext.BinaryClassification.Evaluate. That does not work. Becouse he expects scoreColumn as single float and not float[]. But ONNX Model returns always results in Vector<Single, -1, 1>. \r\nOn evaluating I got exception: \r\n\r\n> System.ArgumentOutOfRangeException\r\nSchema mismatch for score column 'Score': expected Single, got Vector<Single, 1, 1> (Parameter 'schema')\r\n\r\nAs you can see in the following model. Output Parameter are vectors float32[-1,1] but BinaryClassification.Evaluate expect single float. Is there any workaround. Or it is not possible to evaluate ONNX Model with ML.Net.\r\n\r\n[model.zip](https://github.com/dotnet/machinelearning/files/5062377/model.zip)\r\n\r\n\r\n### Source code / logs\r\n\r\n```\r\nvar pipeline = mlContext.Transforms.ApplyOnnxModel(modelFile: this.ModelFile, inputColumnNames: new string[] { \"day\",\"hour\",\"name\",\"worker\",\"temperature\",\"vibration\"},\r\n                    outputColumnNames: new[] { \"Probability.output\", \"PredictedLabel.output\",\"Score.output\" });\r\n\r\nIDataView predictions = model.Transform(dataView);\r\nvar metrics = mlContext.BinaryClassification.Evaluate(predictions, labelColumnName: labelColumnName, scoreColumnName: \"Score\", probabilityColumnName: \"Probability\", predictedLabelColumnName: \"PredictedLabel\");\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/5343","RelatedDescription":"Closed issue \"ONNX Model Evaluation in ML.Net not working\" (#5343)"},{"Id":"679344999","IsPullRequest":false,"CreatedAt":"2020-08-14T18:56:53","Actor":"LittleLittleCloud","Number":"5347","RawContent":null,"Title":"Feature request: Add support for saving/loading IDataView to/from csv/tsv directly and other pandas-like functionalities","State":"open","Body":"This will be a useful feature when using ML.Net to build pipeline in jupyter notebook, especially in data preprocessing steps.\r\n\r\nOther useful functions can be\r\n- IDataView.description -> similar to DataFrame.description, which prints summary information of current dataset.\r\n- IDataView.Head(n) -> print first n rows in nice table format\r\n- IDataView[ColumnName] -> get the column of ColumnName\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5347","RelatedDescription":"Open issue \"Feature request: Add support for saving/loading IDataView to/from csv/tsv directly and other pandas-like functionalities\" (#5347)"},{"Id":"668301001","IsPullRequest":true,"CreatedAt":"2020-08-13T01:16:14","Actor":"antoniovs1029","Number":"5331","RawContent":null,"Title":"Enable FxCop on all projects","State":"closed","Body":"This PR enables de FxCop Analyzers on all projects of ML.NET using the `Sdl.Required.Warning.ruleset` recommended to us offline.\r\n\r\n**NOTE:** Right after enabling the FxCop Analyzers (i.e. when syncing with this branch), I've found necessary to Clean, Close, Clean and Rebuild the ML.NET Visual Studio solution to make the changes effective.","Url":"https://github.com/dotnet/machinelearning/pull/5331","RelatedDescription":"Closed or merged PR \"Enable FxCop on all projects\" (#5331)"},{"Id":"677944230","IsPullRequest":true,"CreatedAt":"2020-08-13T00:14:45","Actor":"harishsk","Number":"5344","RawContent":null,"Title":"Integrated guardian SDL tools","State":"closed","Body":"The guardian tools allow us to run security tools. This PR adds the configuration for those tools into the repo.","Url":"https://github.com/dotnet/machinelearning/pull/5344","RelatedDescription":"Closed or merged PR \"Integrated guardian SDL tools\" (#5344)"},{"Id":"678030394","IsPullRequest":true,"CreatedAt":"2020-08-12T23:05:09","Actor":"LittleLittleCloud","Number":"5345","RawContent":null,"Title":"AutoML.Net filter infinity value when calculate average score","State":"open","Body":"### Fix issue:\r\n- #5339 \r\n\r\nThis pr fixes #5339 by filtering out the infinity value when [calculating average scores](https://github.com/dotnet/machinelearning/blob/9d3e5452096ac61baf9d2a7ead5a963865fca7d5/src/Microsoft.ML.AutoML/Experiment/Runners/CrossValSummaryRunner.cs#L155) from the results of cross validation runner, so that the average score won't be infinity value in any situation, so that the return value of [GetIndexCloestToAverage](https://github.com/dotnet/machinelearning/blob/37af3f9db86414f4ec5b16a8734c90b498946caa/src/Microsoft.ML.AutoML/Experiment/Runners/CrossValSummaryRunner.cs#L84) will not be -1.\r\n\r\nIn rare case, when all the scores from cross-validation run are infinitive, the average score will be designated to nan. and the return value of [GetIndexCloestToAverage](https://github.com/dotnet/machinelearning/blob/37af3f9db86414f4ec5b16a8734c90b498946caa/src/Microsoft.ML.AutoML/Experiment/Runners/CrossValSummaryRunner.cs#L84) will be 0\r\n\r\nNoted: the +/- infinite value is filtered before calculating average score because of the same reason nan value is filtered. By doing that the evaluation for cross-validation runner might be better than the real situation.","Url":"https://github.com/dotnet/machinelearning/pull/5345","RelatedDescription":"Open PR \"AutoML.Net filter infinity value when calculate average score\" (#5345)"},{"Id":"668367592","IsPullRequest":true,"CreatedAt":"2020-08-12T20:57:27","Actor":"antoniovs1029","Number":"5332","RawContent":null,"Title":"[Reference] Sample on how to solve FxCop errors","State":"closed","Body":"This draft PR is meant for reference, and it's not meant to be merged on the main repo, only show case how the workflow will be for working with FxCop issues.\r\n\r\nNotice in the commit history of this PR that FxCop analyzers are enabled first to see the errors they raise, then they're addressed on following commits, and finally the FxCop analyzers are disabled again because they shouldn't be part of a PR solving FxCop issues (enabling FxCop Analyzer on the main repo will only be done after all its issues are addressed, in order to enable us to create single PRs addressing each issue).\r\n\r\nThis PR also contains some tips and tricks by @sharwell about how to deal with the errors that appear when running FxCop.","Url":"https://github.com/dotnet/machinelearning/pull/5332","RelatedDescription":"Closed or merged PR \"[Reference] Sample on how to solve FxCop errors\" (#5332)"},{"Id":"676413342","IsPullRequest":false,"CreatedAt":"2020-08-10T21:00:22","Actor":"LittleLittleCloud","Number":"5341","RawContent":null,"Title":"Image classification can't run on CPU that doesn't support AVX instruction","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Window10\r\n- **.NET Version (eg., dotnet --info)**:  3.1.302\r\n\r\n### Issue\r\n\r\nWe have a few users from Model Builder report on image classification failure because of loading error.\r\n- https://github.com/dotnet/machinelearning-modelbuilder/issues/915\r\n- https://github.com/dotnet/machinelearning-modelbuilder/issues/920\r\n\r\nAfter some investigation, I think it is because their CPU is too old and doesn't support AVX instruction, which is used to build tensorflow after v1.6. **But I'm not too sure about it, and that conclusion need double check**.\r\n\r\nIn the meanwhile, it would be great if we can catch the instruction not support error from exception thrown by mlnet. Right now the error message is \"Tensorflow exception triggered while loading model\", which is not really helpful in debugging. Is it possible to have a new exception, or a specific error message to highlight the avx not support exception?\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5341","RelatedDescription":"Open issue \"Image classification can't run on CPU that doesn't support AVX instruction\" (#5341)"},{"Id":"673929369","IsPullRequest":true,"CreatedAt":"2020-08-10T17:39:37","Actor":"harishsk","Number":"5338","RawContent":null,"Title":"Removed ability to save filters from legacy filter code","State":"closed","Body":"Fixes #5335 \r\n\r\nThe offending code in ResultProcessor wasn't being used at all. So I have deleted that.\r\n\r\nAnd as per @yaeldekel the StatefulFilterTransform is a legacy filter from TLC and is not part of the ML.NET public API. It is being used internally in some time series code. But it doesn't need the ability to be saved. \r\n\r\nWe should at some point, upgrade the time series code to use the new CustomMappingTransform and delete the StatefulFilterTransform. \r\n\r\nUntil then I have deleted the SerializableLambdaTransform and the associated functionality in LambdaTransformBase.","Url":"https://github.com/dotnet/machinelearning/pull/5338","RelatedDescription":"Closed or merged PR \"Removed ability to save filters from legacy filter code\" (#5338)"},{"Id":"670008383","IsPullRequest":false,"CreatedAt":"2020-08-10T17:39:37","Actor":"JakeRadMSFT","Number":"5335","RawContent":null,"Title":"SerializationBinder must be set for BinaryFormatter","State":"closed","Body":"https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.ResultProcessor/ResultProcessor.cs#L1150-L1151\r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Transforms/SerializableLambdaTransform.cs#L135\r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Transforms/SerializableLambdaTransform.cs#L142\r\n\r\nPlease see tracking bug for more details:\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/1110054","Url":"https://github.com/dotnet/machinelearning/issues/5335","RelatedDescription":"Closed issue \"SerializationBinder must be set for BinaryFormatter\" (#5335)"},{"Id":"676165493","IsPullRequest":false,"CreatedAt":"2020-08-10T14:08:43","Actor":"ladodc","Number":"5340","RawContent":null,"Title":"How to re-train onnx model in ml.net","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win10\r\n\r\n\r\n- **.NET Version (eg., dotnet --info)**: .Net Core 3.1\r\n\r\n### Issue\r\n\r\nHi I am trying to re-train model saved in onnx format. I can inference this model with onnxruntime in .net but retraining without success. What I am doing wrong? Is this in .net possible? Here is my model:[logres_scikit_pipeline.zip](https://github.com/dotnet/machinelearning/files/5051258/logres_scikit_pipeline.zip)\r\n\r\n### Source code\r\n`\r\nvar MODEL_PATH = @\"..\\..\\..\\Model\\logres_scikit_pipeline.onnx\";\r\n                \r\n                var pipeline = mlContext.Transforms.ApplyOnnxModel(modelFile: MODEL_PATH, inputColumnNames: inputColumnNames,\r\n                    outputColumnNames: new[] { \"output_probability\", \"output_label\" });\r\n\r\n                var model = pipeline.Fit(newData);\r\n              \r\n                using (var stream = File.Create(MODEL_PATH))\r\n                {\r\n                    mlContext.Model.ConvertToOnnx(model, newData, stream);\r\n                }\r\n`\r\n\r\n> On ConvertToOnnx, I got following Exception: The targeted pipeline can not be fully converted into a well-defined ONNX model. Please check if all steps in that pipeline are convertible to ONNX and all necessary variables are not dropped (via command line arguments).","Url":"https://github.com/dotnet/machinelearning/issues/5340","RelatedDescription":"Open issue \"How to re-train onnx model in ml.net\" (#5340)"},{"Id":"674625047","IsPullRequest":false,"CreatedAt":"2020-08-06T21:59:22","Actor":"LittleLittleCloud","Number":"5339","RawContent":null,"Title":"AutoML.Net: CrossValSummaryRunner can't handle all-infinity metrics value.","State":"open","Body":"CrossValSummaryRunner picks up the best model and score from cross validation in the following logic:\r\n- get results from all validation runs\r\n- if all run succeed, get the index of model with best score as return model, if all run's score is NaN or Infinity, uses the first model\r\n- if all run succeed, get the score which is closest to the average score as return training score, if average score is NaN, use the first score (**BUG**)\r\n\r\nThe possible place that causes the bug is sometimes the average score can be Infinity, in which case the following function will return -1 and causes an index out of error exception\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/37af3f9db86414f4ec5b16a8734c90b498946caa/src/Microsoft.ML.AutoML/Experiment/Runners/CrossValSummaryRunner.cs#L84\r\n\r\n### Related issue\r\n(The label column for this user's dataset is all empty, which is the root cause for this error) \r\n- https://github.com/dotnet/machinelearning-modelbuilder/issues/929","Url":"https://github.com/dotnet/machinelearning/issues/5339","RelatedDescription":"Open issue \"AutoML.Net: CrossValSummaryRunner can't handle all-infinity metrics value.\" (#5339)"},{"Id":"667361943","IsPullRequest":true,"CreatedAt":"2020-08-05T20:54:45","Actor":"harishsk","Number":"5329","RawContent":null,"Title":"Changed component governance scan type to Register","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5329","RelatedDescription":"Closed or merged PR \"Changed component governance scan type to Register\" (#5329)"},{"Id":"673245637","IsPullRequest":false,"CreatedAt":"2020-08-05T18:40:34","Actor":"pthinh14","Number":"5337","RawContent":null,"Title":"ONNX model performs wrongly and Normalization for Image","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Window \r\n- **.NET Version (eg., dotnet --info)**: .NET Core 3.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n I use pre-trained ONNX in my application\r\n- **What happened?** \r\nThe ONNX model performs worse in ML.NET than in other platforms (pytorch, tensorflow) in term of accuracy. They give the same results for some images while some are not. I think the problem might be on the preprocessing stage. In Pytorch, I have normalization step while I cannot produce the same method in ML.NET.\r\nI tried NormalizeMeanVariance and NormalizeMinMax but the result is all 0 so I wonder if they are applicable for image.\r\n- **What did you expect?** \r\nNormalization for image or allowing custom preprocessing transform. I would love to have sample for this problem. Actually it would be nice to have document about how to map Tensorflow, Pytorch functions to ML.NET functions.\r\n\r\n### Source code / logs\r\nML.NET code which can produce some good results:\r\n```\r\nvar pipeline = mlContext.Transforms\r\n                .LoadImages(\r\n                    outputColumnName: \"image_object\",\r\n                    imageFolder: null,\r\n                    inputColumnName: nameof(ImageData.ImagePath))\r\n            .Append(mlContext.Transforms.ResizeImages(\r\n                outputColumnName: \"image_object_resized\",\r\n                imageWidth: ImageSettings.imageWidth,\r\n                imageHeight: ImageSettings.imageHeight,\r\n                inputColumnName: \"image_object\"\r\n               ))\r\n            .Append(mlContext.Transforms.ExtractPixels(\r\n                outputColumnName: \"image_object_scale\",\r\n                inputColumnName: \"image_object_resized\",\r\n                offsetImage:117,\r\n                scaleImage:1/255f))\r\n.Append(mlContext.Transforms.ApplyOnnxModel(modelFile: _modelFilePath, outputColumnName: ModelSettings.outputTensorName, inputColumnName:  ModelSettings.inputTensorName));\r\n```\r\n\r\n**ML.NET normalize code:**\r\n```\r\nvar pipeline = mlContext.Transforms\r\n                .LoadImages(\r\n                    outputColumnName: \"image_object\",\r\n                    imageFolder: null,\r\n                    inputColumnName: nameof(ImageData.ImagePath))\r\n            .Append(mlContext.Transforms.ResizeImages(\r\n                outputColumnName: \"image_object_resized\",\r\n                imageWidth: ImageSettings.imageWidth,\r\n                imageHeight: ImageSettings.imageHeight,\r\n                inputColumnName: \"image_object\"\r\n               ))\r\n            .Append(mlContext.Transforms.ExtractPixels(\r\n                outputColumnName: \"image_object_scale\",\r\n                inputColumnName: \"image_object_resized\"))\r\n            .Append(mlContext.Transforms.NormalizeLogMeanVariance(inputColumnName: \"image_object_scale\", outputColumnName: \"image_normalized\", fixZero:true));\r\n\r\n            var normalizeTransform = pipeline.Fit(dataView);\r\n            var transformedData = normalizeTransform.Transform(dataView);\r\n            var column = transformedData.GetColumn<float[]>(\"image_normalized\").ToArray();\r\n            foreach (var row in column)\r\n                    Console.WriteLine(string.Join(\", \", row.Select(x => x.ToString())));\r\n```\r\n\r\n**Pytorch transformation:**\r\n```data_transforms = transforms.Compose([\r\ntransforms.Resize(224),\r\ntransforms.ToTensor(),\r\ntransforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5])\r\n])```","Url":"https://github.com/dotnet/machinelearning/issues/5337","RelatedDescription":"Closed issue \"ONNX model performs wrongly and Normalization for Image\" (#5337)"},{"Id":"671940805","IsPullRequest":false,"CreatedAt":"2020-08-03T09:35:17","Actor":"rs22","Number":"5336","RawContent":null,"Title":"Passing serialized TensorFlow Example to TF Serving SavedModel","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: macOS 10.15\r\n- **.NET Version (eg., dotnet --info)**: 3.1.301\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n  I would like to use the PredictionEnginePool (eventually) in combination with a pretrained Tensorflow Model that I exported using the [Estimator.export_saved_model](https://www.tensorflow.org/guide/saved_model?hl=en#savedmodels_from_estimators) function in combination with [`build_parsing_serving_input_receiver_fn`](https://www.tensorflow.org/api_docs/python/tf/estimator/export/build_parsing_serving_input_receiver_fn).\r\n\r\n  Specifically, I went through this tutorial: https://www.tensorflow.org/tfx/tutorials/transform/census. Below, you can find the Tensorflow Serving signature definition according to `saved_model_cli`. \r\n\r\n- **What happened?**\r\n  The `input_example_tensor` input expects a serialized [Example](https://github.com/tensorflow/tensorflow/blob/r2.3/tensorflow/core/example/example.proto) message (a binary buffer, not a text string). This does not work using the ML.NET library because it [re-encodes the data](https://github.com/dotnet/machinelearning/blob/release/1.5.1/src/Microsoft.ML.TensorFlow/TensorflowTransform.cs#L837) that I'm providing as the model input.\r\n- **What did you expect?**\r\n  There should be the option in ML.NET to pass raw binary data as a TFString to the model (maybe as a `byte[]` or `ReadOnlyMemory<byte>`?).\r\n\r\n### Source code / logs\r\nSaved model signature:\r\n```bash\r\n$ saved_model_cli show --dir ./my_saved_model --tag_set serve --signature_def serving_default\r\nThe given SavedModel SignatureDef contains the following input(s):\r\n  inputs['inputs'] tensor_info:\r\n      dtype: DT_STRING\r\n      shape: (-1)\r\n      name: input_example_tensor:0\r\nThe given SavedModel SignatureDef contains the following output(s):\r\n  outputs['classes'] tensor_info:\r\n      dtype: DT_STRING\r\n      shape: (-1, 2)\r\n      name: head/Tile:0\r\n  outputs['scores'] tensor_info:\r\n      dtype: DT_FLOAT\r\n      shape: (-1, 2)\r\n      name: head/predictions/probabilities:0\r\nMethod name is: tensorflow/serving/classify\r\n```\r\n\r\nMy code:\r\n```csharp\r\nclass ModelInput {\r\n    [ColumnName(\"input_example_tensor\"), VectorType(1)]\r\n    public string[] InputExampleTensor { get; set; }\r\n}\r\nclass ModelPrediction {\r\n    [ColumnName(\"head/Tile:0\"), VectorType(2)]\r\n    public string[] Classes { get; set; }\r\n\r\n    [ColumnName(\"head/predictions/probabilities:0\"), VectorType(2)]\r\n    public float[] Prediction { get; set; }\r\n}\r\n\r\nvar mlContext = new MLContext();\r\n\r\nvar pipeline = mlContext.Model.LoadTensorFlowModel(\"my_saved_model\")\r\n    .ScoreTensorFlowModel(\r\n        outputColumnNames: new[] { \"head/Tile:0\", \"head/predictions/probabilities:0\" },\r\n        inputColumnNames: new[] { \"input_example_tensor\" }\r\n    );\r\n\r\n// Train the model\r\n// Since we are simply using a pre-trained TensorFlow model,\r\n// we can \"train\" it against an empty dataset\r\nvar emptyTrainingSet = mlContext.Data.LoadFromEnumerable(new List<ModelInput>());\r\nvar mlModel = pipeline.Fit(emptyTrainingSet);\r\nvar engine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelPrediction>(mlModel);\r\n\r\n// Example is a Protobuf-Class, generated from example.proto\r\nvar example = new Example();\r\n// filling the example with features omitted\r\n\r\nvar input = new ModelInput {\r\n    InputExampleTensor = new[] { new string(example.ToByteArray().Select(x => (char)x).ToArray()) }\r\n};\r\n\r\nvar prediction = engine.Predict(input);\r\n```\r\n\r\nWhich fails with:\r\n```\r\nW tensorflow/core/framework/op_kernel.cc:1767] OP_REQUIRES failed at example_parsing_ops.cc:92 : Invalid argument: Could not parse example input, value: '<omitted binary data>'\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/5336","RelatedDescription":"Open issue \"Passing serialized TensorFlow Example to TF Serving SavedModel\" (#5336)"},{"Id":"669978515","IsPullRequest":false,"CreatedAt":"2020-07-31T16:16:15","Actor":"antoniovs1029","Number":"5334","RawContent":null,"Title":"Running FxCop on ML.NET","State":"open","Body":"Running the FxCop analyzers with the `Sdl.Required.Warning.ruleset` as done on #5331 raises some errors. Please note that ML.NET already had a ruleset defined on [Source.ruleset](https://github.com/dotnet/machinelearning/blob/dd318d89ca6e97a46ce84ae37f091b69dc6ebca5/src/Source.ruleset#L1-L3) but it turns out that since the FxCop analyzers weren't installed before, several of those rules were _never_ actually enforced. After installing the FxCop most of the errors detected come from this preexisting ruleset, but they're not to be considered security-related since they aren't part of the Sdl ruleset.\r\n\r\n### Rules related to security\r\n- [x] CA2301 - Raised on a couple of places of ML.NET. This is actually the only error coming from the Sdl ruleset.\r\n- [ ] CA2100 - This doesn't come from the Sdl ruleset (it comes from the preexisting ruleset) but seems to be security related.\r\n\r\n### Rules not related to security\r\nThe other error codes thrown by the analyzers are the following. As per @sharwell recommendation, it might just be best to disable all of these, but it might also be preferable to address and solve some of them in order to reenable the rules. PR #5331 disables all of this, until they might be addressed in the future.\r\n\r\n**Rules we might want to address after disabling:**\r\n- [ ] CA1060\r\n- [ ] CA1065\r\n- [ ] CA2002\r\n- [ ] CA2101\r\n- [ ] CA2231\r\n\r\n**Rules we might simply want to disable and not address:**\r\n- [ ] CA1001\r\n- [ ] CA1033\r\n- [ ] CA1063\r\n- [ ] CA2213\r\n- [ ] CA2214\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5334","RelatedDescription":"Open issue \"Running FxCop on ML.NET\" (#5334)"},{"Id":"669008003","IsPullRequest":false,"CreatedAt":"2020-07-30T17:33:16","Actor":"jessewinkler","Number":"5333","RawContent":null,"Title":"Image Classification Infinite Training Loop","State":"open","Body":"### System information\r\n\r\n- Windows 10 Enterprise\r\n- .NET 4.7.03190\r\n- Visual Studio Professional 2019 16.6.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI am attempting to run training for image classification for the first time with about 5000 images in 5 sub-folders for tagging as required. My pc does not have a real GPU if that matters, the training uses my CPU cores at 100% during the \"bottleneck\" phase.\r\n\r\n- **What happened?**\r\nThe training runs through a loop that repeats over and over. The loop repeated over 12 times in the longest run over 3 hours before I cancelled it. I will attach the output log. I tried making a new solution entirely and got the same behavior. I tried reducing the training set to 2000 images in 2 sub-folders but that had the same behavior.\r\n\r\n- **What did you expect?**\r\nI expected the training to complete after one loop through the images, since this is what the documentation seems to say.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n[image classifier log](https://github.com/dotnet/machinelearning/files/5002843/image.classifier.log)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5333","RelatedDescription":"Open issue \"Image Classification Infinite Training Loop\" (#5333)"},{"Id":"667988521","IsPullRequest":false,"CreatedAt":"2020-07-29T16:48:54","Actor":"nsingal","Number":"5330","RawContent":null,"Title":"ML.NET Is unable to export model in Text format as MAML used to do","State":"open","Body":"I was using TLC/MAML to create my LR model and would then export it to a text file which would show the weights and the bias value. Our subsequent pipeline consumes this file.\r\nWe are trying to switch over to ML.NET and are noticing that it doesn't have an option to export the same format.\r\nCan we please get this functionality?\r\n\r\n\r\n### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5330","RelatedDescription":"Open issue \"ML.NET Is unable to export model in Text format as MAML used to do\" (#5330)"},{"Id":"666660128","IsPullRequest":true,"CreatedAt":"2020-07-28T05:30:58","Actor":"LetticiaNicoli","Number":"5328","RawContent":null,"Title":"Replace whitelist terminology to allow list","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5328","RelatedDescription":"Closed or merged PR \"Replace whitelist terminology to allow list\" (#5328)"},{"Id":"666653854","IsPullRequest":true,"CreatedAt":"2020-07-28T01:30:57","Actor":"harishsk","Number":"5327","RawContent":null,"Title":"Added build step for component governance","State":"closed","Body":"As per security compliance guidelines.","Url":"https://github.com/dotnet/machinelearning/pull/5327","RelatedDescription":"Closed or merged PR \"Added build step for component governance\" (#5327)"},{"Id":"665762853","IsPullRequest":false,"CreatedAt":"2020-07-27T19:35:02","Actor":"Aleksey1555","Number":"5325","RawContent":null,"Title":"Pause the Training process?","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 x64\r\n- **.NET Version (eg., dotnet --info)**:  .Net Core 3.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nHello!\r\nQuestion - Can I with ML.net  stop training process, save results to the disk and resume process of training later?\r\nTask - Multiclass classification\r\nTrainer - ImageClassificationTrainer\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5325","RelatedDescription":"Closed issue \"Pause the Training process?\" (#5325)"},{"Id":"665632649","IsPullRequest":false,"CreatedAt":"2020-07-27T17:41:36","Actor":"Aleksey1555","Number":"5324","RawContent":null,"Title":"Transform Vector<Byte> to Vector<width,height,3>","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 x64\r\n- **.NET Version (eg., dotnet --info)**: .Net Core 3.1\r\n\r\n### Issue\r\n\r\n- **What did you do?** Creating pipeline for image loading \r\n- **What happened?**  'Schema mismatch for input column 'Data': expected Vector<Byte, 45, 45, 3>, got Vector<Byte> \r\n- **What did you expect?** i don't , i want to known - how covert Vector's\r\n\r\n### Source code / logs\r\n\r\nHow to Convert Vectors?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5324","RelatedDescription":"Closed issue \"Transform Vector<Byte> to Vector<width,height,3>\" (#5324)"},{"Id":"666339046","IsPullRequest":false,"CreatedAt":"2020-07-27T14:28:06","Actor":"kanadaj","Number":"5326","RawContent":null,"Title":"[Documentation] LpNormNormalizingEstimator equations display as plain text","State":"open","Body":"\r\nEquations don't seem to work as intended in the documentation. I assume this isn't meant to be how it's displayed:\r\n\r\n![image](https://user-images.githubusercontent.com/3247357/88553903-b951db80-d01d-11ea-89fc-e32a4a5ac3fd.png)\r\n\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 71dcdd76-b41e-d01e-3a03-e26415d0339a\r\n* Version Independent ID: 1b166fb2-85e0-0378-a467-d84d7435f491\r\n* Content: [LpNormNormalizingEstimator Class (Microsoft.ML.Transforms)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.lpnormnormalizingestimator?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms/LpNormNormalizingEstimator.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms/LpNormNormalizingEstimator.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/5326","RelatedDescription":"Open issue \"[Documentation] LpNormNormalizingEstimator equations display as plain text\" (#5326)"},{"Id":"664736428","IsPullRequest":false,"CreatedAt":"2020-07-26T11:24:26","Actor":"Aleksey1555","Number":"5323","RawContent":null,"Title":": 'Schema mismatch for input column 'data': expected Vector<Byte, 45, 45, 3>, got Vector<Byte> '","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 64\r\n- **.NET Version (eg., dotnet --info)**:  Net Core 3.1\r\n\r\n### Issue\r\n\r\n- **What did you do?** :  Try to load images from folder as byte [], then load data into Bitmap and then  createEnumareable\r\n- **What happened?** : Error  Type 'System.Drawing.Bitmap' is not yet supported.   in ConvertToImage\r\n- **What did you expect?** Expect to make array of abjects with Bitmap field\r\n\r\n### Source code / logs\r\ni Have class:\r\npublic class MyImage\r\n    {\r\n        public string Label { get; set; }\r\n        public string path { get; set; }\r\n        [VectorType(45, 45, 3)]\r\n        public byte[] data { get; set; }\r\n        [ImageType(3, 4)]\r\n        public Bitmap im { get; set; }\r\n    }\r\n\r\nand the code:\r\n\r\n```\r\nMLContext ml = new MLContext();\r\n string folder = @\"here my path to folder with images\";\r\n\r\n// Simple function to load images and populate MyImage class (Label and path properties)\r\n IEnumerable<MyImage> images = LoadImagesFromDirectory3(folder: folder, useFolderNameAsLabel: true);\r\n IDataView data = ml.Data.LoadFromEnumerable<MyImage>(images);\r\n IDataView data2 = ml.Transforms.LoadRawImageBytes(\"data\", folder, \"path\")\r\n                                    .Fit(data).Transform(data);\r\n \r\n // And here i want to from data2 make data3 ( with im field)\r\n// but here i get error:'Schema mismatch for input column 'data': expected Vector<Byte, 45, 45, 3>, got Vector<Byte> '\r\n  IDataView data3 = ml.Transforms.ConvertToImage(45, 45, \"im\", \"data\")\r\n                                     .Fit(data2).Transform(data2);\r\n  // And now i want to convert from data3 of type IDataView to List<MyImage>\r\n  // And here\r\n  IEnumerable<MyImage> res=ml.Data.CreateEnumerable<MyImage>(data3, false)\r\n // and after that, i want to save images to the disk\r\n```\r\n`\r\n\r\nPlease help.\r\nWhat i do wrong?","Url":"https://github.com/dotnet/machinelearning/issues/5323","RelatedDescription":"Closed issue \": 'Schema mismatch for input column 'data': expected Vector<Byte, 45, 45, 3>, got Vector<Byte> '\" (#5323)"},{"Id":"664709250","IsPullRequest":false,"CreatedAt":"2020-07-23T19:18:24","Actor":"crazyoutlook","Number":"5322","RawContent":null,"Title":"ML.Net Invalid GraphDef - Object Detection Model","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 Pro\r\n- **.NET Version (eg., dotnet --info)**: dotnet framework 4.7\r\n\r\n### Issue\r\n\r\nWe are working on how to consume the tensorflow model in .Net using ML.NET. We are using below tutorial as reference :\r\n\r\nTutorial Link : https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/image-classification\r\n\r\nWe tested with model that is used in the Tutorial and it worked fine. But, when we replace tutorial model with our tensorflow model (object detection model which we have exported from Azure Custom Vision), it is throwing an Exception saying ‘Invalid GraphDef’, while loading the tensor flow model. The same custom vision model works fine when consumed in Python code.\r\n\r\n### Source code / logs\r\n\r\nDetails:\r\n\r\nProject Name : TransferLearningTF \r\nClass name : program.cs \r\nMethod Name : GenerateModel \r\n\r\nCode : \r\nIEstimator<ITransformer> pipeline = mlContext.Transforms.LoadImages(outputColumnName: \"input\", imageFolder: _imagesFolder, inputColumnName: nameof(ImageData.ImagePath))\r\n                                                                                              .Append(mlContext.Model.LoadTensorFlowModel(_inceptionTensorFlowModel)\r\n                                                                                                                .ScoreTensorFlowModel(outputColumnNames: new[] { \"softmax2_pre_activation\" }, inputColumnNames: new[] { \"input\" }, addBatchDimensionInput: true))\r\n\r\nException Details : \r\n\r\nException Message : Tensorflow exception triggered while loading model\r\nSource : Microsoft.ML.TensorFlow\r\nStacktrace :  \r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.GetSession(IHostEnvironment env, String modelPath, Boolean metaGraph)\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTensorFlowModel(IHostEnvironment env, String modelPath)\r\n   at Microsoft.ML.TensorflowCatalog.LoadTensorFlowModel(ModelOperationsCatalog catalog, String modelLocation)\r\n   at PredictionModel.Program.GenerateModel(MLContext mlContext) in D:\\Cognitive-Samples-VideoFrameAnalysis-master\\Windows\\PredictionModel\\Program.cs:line 35\r\n   at PredictionModel.Program.Main(String[] args) in D:\\Cognitive-Samples-VideoFrameAnalysis-master\\Windows\\PredictionModel\\Program.cs:line 22\r\n\r\nInner Exception:\r\n\r\nException  Message  : Invalid GraphDef\r\nSource :  TensorFlow.NET\r\nStack trace : \r\n   at Tensorflow.Status.Check(Boolean throwException)\r\n   at Tensorflow.Graph.Import(Byte[] bytes, String prefix)\r\n   at Tensorflow.Graph.Import(String file_path, String prefix)\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5322","RelatedDescription":"Open issue \"ML.Net Invalid GraphDef - Object Detection Model\" (#5322)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-08-18T05:30:36.1587293Z","RunDurationInMilliseconds":669}