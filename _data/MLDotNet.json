{"Data":{"GitHub":{"Issues":[{"Id":"2174868705","IsPullRequest":true,"CreatedAt":"2024-03-08T01:21:22","Actor":"directhex","Number":"7051","RawContent":null,"Title":"Auto-generated baselines by 1ES Pipeline Templates","State":"closed","Body":"Ported from internal AzDO to public GH","Url":"https://github.com/dotnet/machinelearning/pull/7051","RelatedDescription":"Closed or merged PR \"Auto-generated baselines by 1ES Pipeline Templates\" (#7051)"},{"Id":"2158910023","IsPullRequest":false,"CreatedAt":"2024-03-07T05:20:51","Actor":"chuongmep","Number":"7036","RawContent":null,"Title":"Best way to convert Datatable to Dataframe","State":"closed","Body":"**Is your feature request related to a problem? Please describe.**\r\nHi, \r\nDo we have any way to fast convert from `System.Data.Datatable` to `Microsoft.Data.Analysis.DataFrame` ?\r\n\r\nI tried with my solution but it still too slow\r\n\r\n**Describe the solution you'd like**\r\n\r\n```csharp\r\npublic static Microsoft.Data.Analysis.DataFrame ToDataFrame(this DataTable dataTable)\r\n    {\r\n        Microsoft.Data.Analysis.DataFrame dataFrame = new Microsoft.Data.Analysis.DataFrame();\r\n\r\n        foreach (DataColumn column in dataTable.Columns)\r\n        {\r\n            // get values from column cast as string\r\n            string[] values = dataTable.AsEnumerable().Select(r => r.Field<object>(column.ColumnName)?.ToString()).ToArray();\r\n            DataFrameColumn dataFrameColumn = DataFrameColumn.Create(column.ColumnName, values);\r\n            dataFrame.Columns.Add(dataFrameColumn);\r\n        }\r\n        return dataFrame;\r\n    }\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\n- I want keep format column type and quick convert between them.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7036","RelatedDescription":"Closed issue \"Best way to convert Datatable to Dataframe\" (#7036)"},{"Id":"2172174371","IsPullRequest":false,"CreatedAt":"2024-03-07T03:16:58","Actor":"stephentoub","Number":"7050","RawContent":null,"Title":"Delete the public AddedToken","State":"closed","Body":"It appears to not be used by anything.\r\ncc: @tarekgh ","Url":"https://github.com/dotnet/machinelearning/issues/7050","RelatedDescription":"Closed issue \"Delete the public AddedToken\" (#7050)"},{"Id":"2164011427","IsPullRequest":false,"CreatedAt":"2024-03-07T03:04:17","Actor":"tarekgh","Number":"7043","RawContent":null,"Title":"Add more Tokenizer functionality - Create without download sync/async ; Trim APIs","State":"closed","Body":"We need to incorporate the following enhancements into the tokenizer:\r\n\r\n- Enable the creation of tokenizers with streaming capability to avoid on-demand downloading of vocabulary files.\r\n- Introduce an API to facilitate encoding up to a specified maximum token count.\r\n- ~~Introduce API to support encoding text from the end up to the maximum count.~~","Url":"https://github.com/dotnet/machinelearning/issues/7043","RelatedDescription":"Closed issue \"Add more Tokenizer functionality - Create without download sync/async ; Trim APIs\" (#7043)"},{"Id":"2167945874","IsPullRequest":true,"CreatedAt":"2024-03-07T03:04:16","Actor":"tarekgh","Number":"7047","RawContent":null,"Title":"Adding needed Tokenizer's APIs","State":"closed","Body":"Fixes https://github.com/dotnet/machinelearning/issues/7043\r\n\r\nThe change here is adding the following Tokenizer's APIs:\r\n- Enable the creation of Tiktoken tokenizer with streaming capability to avoid on-demand downloading of vocabulary files.\r\n- Introduce an API to facilitate encoding up to a specified maximum token count.","Url":"https://github.com/dotnet/machinelearning/pull/7047","RelatedDescription":"Closed or merged PR \"Adding needed Tokenizer's APIs\" (#7047)"},{"Id":"2169863400","IsPullRequest":true,"CreatedAt":"2024-03-06T20:50:41","Actor":"directhex","Number":"7048","RawContent":null,"Title":"Change official build to use 1ES templates","State":"closed","Body":"There'll be SDL issues to take care of too once autobaselining happens","Url":"https://github.com/dotnet/machinelearning/pull/7048","RelatedDescription":"Closed or merged PR \"Change official build to use 1ES templates\" (#7048)"},{"Id":"2170155199","IsPullRequest":false,"CreatedAt":"2024-03-05T21:14:50","Actor":"ericstj","Number":"7049","RawContent":null,"Title":"ML.NET packages contain .dbg and .dwarf files now","State":"open","Body":"Most likely a regression from #6939 \r\n\r\nThese files should only be part of the symbols packages.\r\n\r\nLooks like they were missing from the symbols packages before, so this might be more about how do we include them in a way that they are treated as symbols.  Could look to dotnet/runtime for precedent.","Url":"https://github.com/dotnet/machinelearning/issues/7049","RelatedDescription":"Open issue \"ML.NET packages contain .dbg and .dwarf files now\" (#7049)"},{"Id":"2166689902","IsPullRequest":false,"CreatedAt":"2024-03-04T12:07:49","Actor":"borakeh","Number":"7046","RawContent":null,"Title":"Is an Object Detection suppose to take 3.5 seconds?","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version: [v17.17.0](https://github.com/dotnet/machinelearning-modelbuilder/tree/v17.17.0)\r\n - .NET Version: .NET 8\r\n\r\n**Describe the bug**\r\nI just managed to setup my first project and things seem to be working quite well, however I noticed that doing a simple object detection takes about 3.5 seconds. I'm not sure if this is normal due to some PredictEngine overhead or something but it seems quite long considering I'm using a 4090 and the images aren't big.\r\n\r\nThe model was trained using 10 images and I'm only trying to predict 1 object on 1 image.\r\n\r\n```\r\nDoorDetection.ModelInput sampleData = new DoorDetection.ModelInput()\r\n{\r\n    Image = image,\r\n};\r\n\r\nStopwatch stopwatch = Stopwatch.StartNew();\r\n\r\nvar predictionResult = DoorDetection.Predict(sampleData);\r\n\r\nstopwatch.Stop();\r\nConsole.WriteLine(stopwatch.ElapsedMilliseconds);\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Clone my project https://github.com/borakeh/ObjectDetection\r\n2. I guess make sure the images are on the desktop in the correct folder\r\n Folder Structure\r\n  - Desktop/doors\r\n  - Desktop/doors/doorsOut\r\n3. Run the project and check how long it takes.\r\n\r\n**Expected behavior**\r\nI would assume it would be a bit faster.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nNo screenshots.\r\n\r\n**Additional context**\r\nNo additional context.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7046","RelatedDescription":"Open issue \"Is an Object Detection suppose to take 3.5 seconds?\" (#7046)"},{"Id":"2165029626","IsPullRequest":false,"CreatedAt":"2024-03-02T23:40:42","Actor":"boneatjp","Number":"7045","RawContent":null,"Title":"LightGBM Version","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11 Pro 23H2 build 22631.3235\r\n - ML.NET Version: ML.NET version 3.0.1\r\n - .NET Version: .NET 8.0\r\n\r\n**Describe the bug**\r\n\r\nSystem.AccessViolationException\r\nHResult=0x80004003\r\nMessage=Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Make a console app project\r\n2. Install following packages with NuGet Package Manager:\r\nMicrosoft.ML Version 3.0.1\r\nMicrosoft.ML.AutoML Version 0.21.1\r\nMicrosoft.ML.CpuMath Version 3.0.1\r\nMicrosoft.ML.DataView Version 3.0.1\r\nMicrosoft.ML.FastTree Version 3.0.1\r\nMicrosoft.ML.LightGbm Version 3.0.1\r\nMicrosoft.ML.Mkl.Compreonents Version 3.0.1\r\nMicrosoft.ML.Mkl.Redist Version 3.0.1\r\n3. Edit Program.cs:\r\n```\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.AutoML;\r\nusing Microsoft.ML.Data;\r\nusing static Microsoft.ML.DataOperationsCatalog;\r\n\r\nMLContext mlContext;\r\nstring sampleData = \"taxi-fare-full.csv\";\r\nmlContext = new MLContext();\r\n\r\n// Infer column information\r\nColumnInferenceResults columnInference = mlContext.Auto()\r\n                                                .InferColumns(sampleData,\r\n                                                    labelColumnName: \"fare_amount\",\r\n                                                    groupColumns: false);\r\n// Create text loader\r\nTextLoader loader = mlContext.Data.CreateTextLoader(columnInference.TextLoaderOptions);\r\n\r\n// Load data into IDataView\r\nIDataView data = loader.Load(sampleData);\r\n\r\nTrainTestData trainValidationData = mlContext.Data.TrainTestSplit(data, testFraction: 0.2);\r\n\r\nSweepablePipeline pipeline = mlContext.Auto()\r\n                    .Featurizer(data, columnInformation: columnInference.ColumnInformation)\r\n                        .Append(mlContext.Auto()\r\n                            .Regression(labelColumnName: columnInference.ColumnInformation.LabelColumnName));\r\n\r\nAutoMLExperiment experiment = mlContext.Auto().CreateExperiment();\r\n\r\nvar regressionMetric = RegressionMetric.RootMeanSquaredError;\r\nexperiment\r\n    .SetPipeline(pipeline)\r\n    .SetRegressionMetric(regressionMetric,\r\n                            labelColumn: columnInference.ColumnInformation.LabelColumnName)\r\n    .SetTrainingTimeInSeconds(100)  // Training time in sec\r\n    .SetDataset(trainValidationData);\r\n\r\n// Log experiment trials\r\nmlContext.Log += (_, e) => {\r\n    if (e.Source.Equals(\"AutoMLExperiment\"))\r\n    {\r\n        Console.WriteLine(e.RawMessage);\r\n    }\r\n};\r\n\r\nTrialResult experimentResults = await experiment.RunAsync();\r\n```\r\n4.Download the [taxi-fare-full.csv](https://github.com/dotnet/machinelearning-samples/blob/main/samples/csharp/getting-started/Regression_TaxiFarePrediction/TaxiFarePrediction/Data/taxi-fare-full.csv) and set it to be copied.\r\n5.This works without  errors. Add LightGBM version 4.0.0 or latest 4.3.0 with NuGet Package Manager.\r\n6. See error\r\n\r\n**Additional context**\r\nWithout installing LightGBM version 4.?.?, ML.NET version 3.0.1 uses LightGBM version 3.3.5.\r\nI've asked [Version 3.3.5 to Version 4.3.0](https://github.com/microsoft/LightGBM/issues/6309) at microsoft/LightGBM.\r\nLightGBM Version 4.3.0 itself maybe works fine. So it might be the problem how ML.NET calls LightGBM.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7045","RelatedDescription":"Open issue \"LightGBM Version\" (#7045)"},{"Id":"2164114809","IsPullRequest":false,"CreatedAt":"2024-03-01T20:21:08","Actor":"ericstj","Number":"7044","RawContent":null,"Title":"Helix test failures are double counted","State":"open","Body":"**Describe the bug**\r\nWhen a helix test fails *gracefully* the failure should be reported and the runner should return 0.\r\n\r\n**To Reproduce**\r\nExamine a normal test failure for a build.  You'll see the test failure reported and the \"work item\" for the test.  The latter is reported as a failure since the runner returned a non-zero exit value.\r\n\r\n**Expected behavior**\r\nOnly the failing test is reported.\r\n\r\n**Screenshots, Code, Sample Projects**\r\n<img width=\"720\" alt=\"image\" src=\"https://github.com/dotnet/machinelearning/assets/8918108/1957457c-3b22-445b-a762-952125d75f9d\">.\r\n\r\nExample build: https://dev.azure.com/dnceng-public/public/_build/results?buildId=583517&view=ms.vss-test-web.build-test-results-tab&runId=14034000&resultId=100083&paneView=debug\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7044","RelatedDescription":"Open issue \"Helix test failures are double counted\" (#7044)"},{"Id":"2163714282","IsPullRequest":false,"CreatedAt":"2024-03-01T16:09:02","Actor":"hannespreishuber","Number":"7042","RawContent":null,"Title":"ONNX Vision ","State":"open","Body":".NET 8 ML.NET 3 \r\n\r\nrunning out of ideas exception\r\n\r\ndid a training with customvision.ai - exported and download the onnx.model. Use the ZIP attached cs file and created a UWP app within minutes- works.\r\n\r\nTry to rebuild this stuff with console app. Nothing detected\r\nRepro https://github.com/hannespreishuber/MLNETONNX\r\n\r\n\r\n![onnx1](https://github.com/dotnet/machinelearning/assets/3587156/3f76b858-103d-45c0-8469-59451d40e4fe)\r\n\r\n\r\n```using Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Transforms.Image;\r\nusing Microsoft.ML.Transforms.Onnx;\r\nusing MLNETONNX;\r\n\r\n\r\nstring assetsPath = @\"C:\\\\stateof\\\\MLNETONNX\\\\MLNETONNX\\\\assets\";\r\nvar modelFilePath = Path.Combine(assetsPath, \"model.onnx\");\r\n\r\nvar mlContext = new MLContext();\r\n\r\n//var imageData = new ImageData\r\n//{\r\n//    Image = File.ReadAllBytes(@\"c:\\temp\\test.png\"),\r\n//    ImagePath = @\"c:\\temp\\test.png\"\r\n//};\r\n\r\n\r\n//B\r\nvar imageData = new ImageData\r\n{\r\n    Image = MLImage.CreateFromFile(@\"c:\\temp\\test.png\")\r\n  \r\n};\r\nvar dataView = mlContext.Data.LoadFromEnumerable(new List<ImageData>() );\r\n\r\n//var pipeline =\r\n//    mlContext.Transforms.LoadImages(outputColumnName: \"data\", imageFolder: \"\", inputColumnName: nameof(ImageData.ImagePath))\r\n//    .Append(mlContext.Transforms.ResizeImages(\r\n//                   inputColumnName: \"data\",\r\n//                   outputColumnName: \"data\",\r\n//                   imageWidth: 416,\r\n//                   imageHeight: 416,\r\n//                   resizing: ImageResizingEstimator.ResizingKind.Fill))\r\n//    .Append(mlContext.Transforms.ExtractPixels(inputColumnName:\"data\",\r\n//                   outputColumnName: \"data\"))\r\n//    .Append(mlContext.Transforms.ApplyOnnxModel(modelFile: modelFilePath,\r\n//    outputColumnNames: new[] { \"model_outputs0\" }, \r\n//      inputColumnNames: new[] { \"data\" }));\r\n\r\n//B\r\nvar pipeline =  mlContext.Transforms.ResizeImages(\"data\", 416,416, nameof(ImageData.Image))\r\n        .Append(mlContext.Transforms.ExtractPixels( \"data\",  \"data\"))\r\n        .Append(mlContext.Transforms.ApplyOnnxModel(\"model_outputs0\", \"data\", modelFilePath));\r\n\r\nvar model = pipeline.Fit(dataView);\r\n\r\nvar predictionEngine = mlContext.Model.CreatePredictionEngine<ImageData, List<PredictionModel>>(model);\r\nvar prediction = predictionEngine.Predict(imageData);\r\n\r\nConsole.WriteLine($\"Vorhersage: \");\r\n\r\n\r\n\r\npublic sealed class BoundingBox\r\n{\r\n    public BoundingBox(float left, float top, float width, float height)\r\n    {\r\n        this.Left = left;\r\n        this.Top = top;\r\n        this.Width = width;\r\n        this.Height = height;\r\n    }\r\n\r\n    public float Left { get; private set; }\r\n    public float Top { get; private set; }\r\n    public float Width { get; private set; }\r\n    public float Height { get; private set; }\r\n}\r\n\r\npublic sealed class PredictionModel\r\n{\r\n    public PredictionModel(float[] probability, string tagName, BoundingBox boundingBox)\r\n    {\r\n        this.Probability = probability;\r\n        this.TagName = tagName;\r\n        this.BoundingBox = boundingBox;\r\n    }\r\n   \r\n    public float[] Probability { get; private set; }\r\n    public string TagName { get; private set; }\r\n    public BoundingBox BoundingBox { get; private set; }\r\n}\r\n\r\n//public class ImageData\r\n//{\r\n//    [ImageType(416, 416)]\r\n//    [ColumnName(\"data\")]\r\n//    public byte[] Image { get; set; }\r\n//    public string ImagePath { get; set; }\r\n    \r\n//}\r\n\r\n\r\n//B\r\npublic class ImageData\r\n{\r\n    [ImageType(416, 416)]\r\n    public MLImage Image { get; set; }\r\n\r\n\r\n}`\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7042","RelatedDescription":"Open issue \"ONNX Vision \" (#7042)"},{"Id":"2163659046","IsPullRequest":false,"CreatedAt":"2024-03-01T15:38:44","Actor":"maurice-cote","Number":"7041","RawContent":null,"Title":"Help text for fields are in the source code yet are not present here","State":"open","Body":"\r\nThere is help provided for these fields directly in the source code, I wonder why it wasn't used even in this templated topic\r\n\r\n- Threshold  = \"The threshold to determine anomaly, score larger than the threshold is considered as anomaly.\"\r\n- BatchSize = \"The number of data points to be detected in each batch. It should be at least 12. Set this parameter to -1 to detect anomaly on the entire series.\"\r\n- Sensitivity  = \"This parameter is used in AnomalyAndMargin mode the determine the range of the boundaries.\"\r\n- DetectMode = \"Specify the detect mode as one of AnomalyOnly, AnomalyAndExpectedValue and AnomalyAndMargin.\"\r\n- Period = \"If there is circular pattern in the series, set this value to the number of points in one cycle.\"\r\n- DeseasonalityMode = \"Specify the deseasonality mode as one of stl, mean and median.\"\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for learn.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 3bf2c1e4-4042-be7d-c072-8ee9e0690e48\r\n* Version Independent ID: 0406e897-a227-2397-d4e1-fde038e743c5\r\n* Content: [SrCnnEntireAnomalyDetectorOptions.Threshold Field (Microsoft.ML.TimeSeries)](https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.timeseries.srcnnentireanomalydetectoroptions.threshold?view=ml-dotnet-2.0.0&source=docs)\r\n* Content Source: [dotnet/xml/Microsoft.ML.TimeSeries/SrCnnEntireAnomalyDetectorOptions.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.TimeSeries/SrCnnEntireAnomalyDetectorOptions.xml)\r\n* Service: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/7041","RelatedDescription":"Open issue \"Help text for fields are in the source code yet are not present here\" (#7041)"},{"Id":"2162750436","IsPullRequest":false,"CreatedAt":"2024-03-01T07:07:16","Actor":"harry-hathorn","Number":"7040","RawContent":null,"Title":"ML.Net: System.OutOfMemoryException: 'Exception of type 'System.OutOfMemoryException' was thrown.' on small dataset","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version: Microsoft.ML 3.0.1\r\n - .NET Version: 6.0\r\n\r\n**Describe the bug**\r\nAttempt to train model and run into out-of-memory exception, PC doesn't even use 20% of memory. Build for any CPU.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Load data text-based set with 700 000 rows (60mb) and 2 columns (feature and label)\r\n2. Run Transforms.Conversion.MapValueToKey for the Label\r\n3. Run Transforms.Text.FeaturizeText on the Features\r\n4. Append a mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(\"Label\", \"Features\") prediction\r\n5. Attempt to Fit the model\r\n6. Receive an out of memory exception on trainingPipeline.Fit(trainData)\r\n```\r\nSystem.OutOfMemoryException\r\n  HResult=0x8007000E\r\n  Message=Exception of type 'System.OutOfMemoryException' was thrown.\r\n  Source=Microsoft.ML.Core\r\n  StackTrace:\r\n   at Microsoft.ML.Internal.Utilities.VBufferUtils.CreateDense[T](Int32 length)\r\n   at Microsoft.ML.Trainers.SdcaTrainerBase`3.TrainCore(IChannel ch, RoleMappedData data, LinearModelParameters predictor, Int32 weightSetCount)\r\n   at Microsoft.ML.Trainers.StochasticTrainerBase`2.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Program.<Main>$(String[] args) in C:\\Ml.Product.2\\Ml.Product.2\\Program.cs:line 29\r\n```\r\n\r\n**Expected behavior**\r\nI have a 60mb CSV with 700000 rows, IMO this is not a huge amount. My machine has 32 GB of memory and doesn't even use 20% of my memory when I watch performance. I tried to build a release build on 64bit and still ran into the out-of-memory exception. Please could someone advise me on what I am doing wrong, this seems like a bug? Eventually, I want to train much larger data sets, surely ML.Net should be able to do that? \r\n\r\n**Screenshots, Code, Sample Projects**\r\n```\r\nMLContext _mlContext;\r\nPredictionEngine<MlProduct, MlProductPrediction> _predictionEngine;\r\nITransformer _trainedModel;\r\nIDataView _trainingDataView;\r\n\r\n\r\n_mlContext = new MLContext();\r\n\r\n_trainingDataView = LoadDataFromCSV();\r\n\r\nTrainTestData dataSplit = _mlContext.Data.TrainTestSplit(_trainingDataView, testFraction: 0.2);\r\nIDataView trainData = dataSplit.TrainSet;\r\nIDataView testData = dataSplit.TestSet;\r\n\r\nvar pipeline = _mlContext.Transforms.Conversion.MapValueToKey(inputColumnName: \"CategoryName\", outputColumnName: \"Label\")\r\n           .Append(_mlContext.Transforms.Text.FeaturizeText(\"Features\", \"ProductName\"));\r\n\r\nvar trainingPipeline = pipeline.Append(_mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(\"Label\", \"Features\"))\r\n       .Append(_mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\n\r\n_trainedModel = trainingPipeline.Fit(trainData);\r\n\r\nIDataView transformTest = _trainedModel.Transform(testData);\r\n\r\npublic class MlProduct\r\n{\r\n\r\n    [LoadColumn(0)]\r\n    [ColumnName(\"ProductName\")]\r\n    public string ProductName { get; set; }\r\n    [LoadColumn(1)]\r\n    [ColumnName(\"CategoryName\")]\r\n    public string CategoryName { get; set; }\r\n}\r\n\r\npublic class MlProductPrediction\r\n{\r\n    [ColumnName(\"PredictedLabel\")]\r\n    public string CategoryName;\r\n\r\n    [ColumnName(\"PredictionScore\")]\r\n    public float Score { get; set; }\r\n}\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7040","RelatedDescription":"Open issue \"ML.Net: System.OutOfMemoryException: 'Exception of type 'System.OutOfMemoryException' was thrown.' on small dataset\" (#7040)"},{"Id":"2157950944","IsPullRequest":true,"CreatedAt":"2024-03-01T02:01:13","Actor":"tarekgh","Number":"7035","RawContent":null,"Title":"Add Span support in tokenizer's Model abstraction","State":"closed","Body":"This change is adding Span support to the Tokenizer's Model abstraction. This will help in performance and not restrict us in the future to use spans without to worry about more memory allocations. ","Url":"https://github.com/dotnet/machinelearning/pull/7035","RelatedDescription":"Closed or merged PR \"Add Span support in tokenizer's Model abstraction\" (#7035)"},{"Id":"2160092346","IsPullRequest":false,"CreatedAt":"2024-02-29T00:10:26","Actor":"thomasd3","Number":"7038","RawContent":null,"Title":"What is the best way to represent N/A if a value is not available?","State":"open","Body":"I'm using a binary classifier.\r\n\r\nMy feature list has a list of columns representing various states in my model. The range of values is -1 to +1.\r\nBut, in some cases, some states are simply not present, in some rows.\r\n\r\nFor example:\r\n```\r\n0, 1, 1, 1, 0, 0, 1\r\n1, 0, 0, 1, 1, 0, 0\r\n1, X, 1, 1, 1, 0, 1\r\n1, 0, 0, 0, 0, 1, 1\r\n```\r\n\r\nNotice the X? which really means, in my model, that there is an absence of data there.\r\nThe model is supposed to classify a specific situation based on the states of various systems. And sometimes that data is not present, shouldn't be interpolated from neighbors either, it really means that this signal does not exist at that time.\r\n\r\nWhat is the best way to represent this?\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7038","RelatedDescription":"Open issue \"What is the best way to represent N/A if a value is not available?\" (#7038)"},{"Id":"2159384547","IsPullRequest":true,"CreatedAt":"2024-02-28T20:55:27","Actor":"ericstj","Number":"7037","RawContent":null,"Title":"Remove SourceLink SDK references","State":"closed","Body":"@ViktorHofer let me know that we no longer need to have explicit SDK references to these source-link packages.\r\n\r\nI'm removing them and also testing the behavior of build to ensure we still have source-link info in our binaries per https://learn.microsoft.com/en-us/dotnet/standard/library-guidance/sourcelink.","Url":"https://github.com/dotnet/machinelearning/pull/7037","RelatedDescription":"Closed or merged PR \"Remove SourceLink SDK references\" (#7037)"},{"Id":"2157810214","IsPullRequest":true,"CreatedAt":"2024-02-27T23:49:40","Actor":"michaelgsharp","Number":"7034","RawContent":null,"Title":"Helix queue testing","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/7034","RelatedDescription":"Open PR \"Helix queue testing\" (#7034)"},{"Id":"2157709761","IsPullRequest":true,"CreatedAt":"2024-02-27T22:19:11","Actor":"michaelgsharp","Number":"7033","RawContent":null,"Title":"M1 helix testing","State":"open","Body":"Fixed testing for M1 machines and made it so M1 tests are now required.","Url":"https://github.com/dotnet/machinelearning/pull/7033","RelatedDescription":"Open PR \"M1 helix testing\" (#7033)"},{"Id":"2155085067","IsPullRequest":true,"CreatedAt":"2024-02-27T22:13:03","Actor":"michaelgsharp","Number":"7029","RawContent":null,"Title":"Make MlImage tests not block file for reading","State":"closed","Body":"Makes ML-Image tests not block the image file for reading as this is causing some test failures.","Url":"https://github.com/dotnet/machinelearning/pull/7029","RelatedDescription":"Closed or merged PR \"Make MlImage tests not block file for reading\" (#7029)"},{"Id":"2157499570","IsPullRequest":false,"CreatedAt":"2024-02-27T19:58:17","Actor":"scott19896","Number":"7032","RawContent":null,"Title":"Calling predict from LightGBM model file load","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n- **.NET Version (eg., dotnet --info)**: 6\r\n\r\n### Issue\r\n\r\nFollowing on from https://github.com/dotnet/machinelearning/pull/6569\r\n\r\nAre there any examples of how to load the LGBM model file and call predict on an entry by entry basis?\r\n\r\nLooking at the Booster wrapper, the GetModel call is private and so the only interface I could see to access the model is through the trainer. This only provides that access when calling Fit however, which is not needed from what I can tell when loading a pre-trained model.\r\n\r\nWould you know if this is something that is supported?  In other words, load a pre-trained LGBM model text file and access the Booster to call predicts \r\n\r\nThanks!","Url":"https://github.com/dotnet/machinelearning/issues/7032","RelatedDescription":"Open issue \"Calling predict from LightGBM model file load\" (#7032)"},{"Id":"2157465678","IsPullRequest":false,"CreatedAt":"2024-02-27T19:38:20","Actor":"elvinsomon","Number":"7031","RawContent":null,"Title":"When we have all support without limitations for ARM devises for use all ML.NET models?","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/7031","RelatedDescription":"Open issue \"When we have all support without limitations for ARM devises for use all ML.NET models?\" (#7031)"},{"Id":"2155826542","IsPullRequest":true,"CreatedAt":"2024-02-27T07:06:57","Actor":"michaelgsharp","Number":"7030","RawContent":null,"Title":"Fix global.json to work better on non x64 hardware","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/7030","RelatedDescription":"Open PR \"Fix global.json to work better on non x64 hardware\" (#7030)"},{"Id":"2150148900","IsPullRequest":true,"CreatedAt":"2024-02-26T18:57:18","Actor":"tarekgh","Number":"7024","RawContent":null,"Title":"Address the feedback on the tokenizer's library","State":"closed","Body":"This fix address the feedback reported in the issues:\r\n\r\n- https://github.com/dotnet/machinelearning/issues/7004\r\n- https://github.com/dotnet/machinelearning/issues/7005\r\n- https://github.com/dotnet/machinelearning/issues/7006\r\n- https://github.com/dotnet/machinelearning/issues/7008\r\n- https://github.com/dotnet/machinelearning/issues/7010\r\n- https://github.com/dotnet/machinelearning/issues/7011\r\n- https://github.com/dotnet/machinelearning/issues/7013\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7024","RelatedDescription":"Closed or merged PR \"Address the feedback on the tokenizer's library\" (#7024)"},{"Id":"2152373689","IsPullRequest":false,"CreatedAt":"2024-02-24T15:53:49","Actor":"OldManUnderTheHill","Number":"7028","RawContent":null,"Title":"Object detection training using CUDA gives decent results, while using CPU always returns nothing or inferior results","State":"open","Body":"**System Information (please complete the following information):**\r\n\r\n - OS & Version: Windows 11\r\n - ML.NET Version: 16.18.2\r\n - .NET Version: 8.0\r\n\r\n**Describe the bug**\r\nI have a self created training set where I want to detect small marked passages of text (with a text marker). If I use CUDA for object detection training I get like the following result (using these parameters: --epoch 10 --device gpu0 -b 1 -st 0.3 -it 0.5 --width 600 --height 800)\r\n\r\n-> ObjectDetectionMulti                0.6115    \r\n\r\nIf I switch to CPU training while keeping all other parameters the result is always 0.0%. Testing the CPU model with some test images will never return any boxes, while the model from GPU training generates nice hits.\r\nAs a workaround I temporarily use the GPU model with CPU code.\r\n\r\nI know what I try to do is a bit strange, but it seems to work out if the GPU is used for training. A similar thing happens when I use the stop sign tutorial data set. Results when using the CPU for 5 epochs gives approx. 0.53 as result, while using the GPU on the same set with the same parameters 0.63.\r\n\r\nI added my dataset for further analysis, all used documents are public available on the internet.\r\n\r\n[LetterMarkerAnnot.zip](https://github.com/dotnet/machinelearning/files/14393399/LetterMarkerAnnot.zip)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7028","RelatedDescription":"Open issue \"Object detection training using CUDA gives decent results, while using CPU always returns nothing or inferior results\" (#7028)"},{"Id":"2151210047","IsPullRequest":false,"CreatedAt":"2024-02-23T14:30:11","Actor":"abbottdev","Number":"7026","RawContent":null,"Title":"Add support/examples for Google Gemma lightweight LLM models","State":"open","Body":"**Is your feature request related to a problem? **\r\nSupport complex LLM reasoning tasks with ML .NET. My specific use case here is structured data extraction into a known format.\r\n\r\nBeing able to take this models and fine tune them using the ML .NET training/pipeline APIs would be a huge benefit.\r\n\r\n**Describe the solution you'd like**\r\nGoogle have opened sourced their base model Gemma which is a lightlight deriviative of the Gemini LLM. There is a keras implementation of it, a TensorFlow implementation. There are other options available but they havent been instruction tuned so the model would need more work for say, pytorch?\r\n\r\n**Additional context**\r\nhttps://blog.google/technology/developers/gemma-open-models/\r\nhttps://www.kaggle.com/models/google/gemma\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7026","RelatedDescription":"Open issue \"Add support/examples for Google Gemma lightweight LLM models\" (#7026)"},{"Id":"2150573552","IsPullRequest":false,"CreatedAt":"2024-02-23T08:02:21","Actor":"bettwedder","Number":"7025","RawContent":null,"Title":"Unable to remove SdcaLogisticRegressionOva from AutoML Multiclassification Experiment","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n - ML.NET Version:  v3.0.1 & AutoML 0.21.1\r\n - .NET Version: 8.0\r\n\r\n**Describe the bug**\r\nWhen creating an AutoML Multiclassification Experiment, you are unable to remove the trainer \"SdcaLogisticRegressionOva\".  \r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1.  Create a Multiclass experiment settings object\r\n2.  Iterate on settings.Trainers and remove all trainers that are not \"LightGbm\" or \"FastForest\"\r\n3.  Create a Multiclass Progress Reporter that will output the TrainerName used.  \r\n4.  Use this replace command to remove the currently bugged (3.0.1 and 0.21.1) TrainerName value:  \r\n`TrainerName.Replace(\"Multi\", \"\").Replace(\"ReplaceMissingValues\", \"\").Replace(\"Concatenate\", \"\").Replace(\"Unknown\", \"\").Replace(\"=>\", \"\"); `\r\n5.  Run experiment and monitor names.\r\n\r\n\r\n**Expected behavior**\r\nOne of the first three models will include the unremovable trainer.\r\n\r\n**Screenshots, Code, Sample Projects**\r\n\r\n```\r\n  \r\n               MulticlassExperimentSettings settings = new MulticlassExperimentSettings()\r\n                {\r\n                    OptimizingMetric = optimizeMetric,\r\n                    MaxExperimentTimeInSeconds = experimentTime,\r\n                    CacheDirectoryName = cacheDir,\r\n                    CancellationToken = cts.Token,\r\n                    CacheBeforeTrainer = CacheBeforeTrainer.On\r\n                    \r\n                };\r\n\r\n                bool keptLightGBM = false;\r\n                foreach (var trainer in settings.Trainers.ToList())\r\n                {\r\n\r\n                    if (!trainer.ToString().ToUpperInvariant().Contains(\"LIGHTGBM\") && !trainer.ToString().ToUpperInvariant().Contains(\"FASTFOREST\"))\r\n                    {\r\n                        settings.Trainers.Remove(trainer);\r\n                        Console.WriteLine(\"Removed Trainer: \" + trainer.ToString());\r\n                    }\r\n                    //else\r\n                    //{\r\n                    //    if (keptLightGBM)\r\n                    //    {\r\n                    //        settings.Trainers.Remove(trainer);\r\n                    //        Console.WriteLine(\"Removed Extra \"LightGbm\" Trainer: \" + trainer.ToString());\r\n                    //    }\r\n                    //    else\r\n                    //        keptLightGBM = true;\r\n                    //}\r\n                }\r\n\r\n                MulticlassClassificationExperiment experiment = context.Auto().CreateMulticlassClassificationExperiment(settings);\r\n                ExperimentResult<MulticlassClassificationMetrics> result;\r\n\r\n                result = experiment.Execute(trainData, splitTestData, columnInformation, null, new MulticlassProgressReporter() { labelColumnName = label, CacheDir = cacheDir, ExperimentTime = DateTime.Now });\r\n\r\n```\r\n\r\nThis code produces this output: \r\n\r\n![image](https://github.com/dotnet/machinelearning/assets/40208910/00b0f1ab-a208-4ad2-845f-8e72627a74ea)\r\n\r\n\r\n\r\n**Additional context**\r\nIf you only leave one LightGbm as the only trainer, then AutoML uses the \"SdcaLogisticRegressionOva\" every other time.\r\n\r\nThe trainer \"SdcaLogisticRegressionOva\" does not appear in the list after creating a settings object which is supposed to populate the list with all values.  Also, if you iterate on list of auto populated trainers, two items appear with the name \"LightGbm\".  \r\n\r\nLast, when I peek the definition of Microsoft.ML.AutoML.MulticlassClassificationTrainer, I get this list which also doesn't have \"SdcaLogisticRegressionOva\" in the list. \r\n\r\n```\r\n// Decompiled with JetBrains decompiler\r\n// Type: Microsoft.ML.AutoML.MulticlassClassificationTrainer\r\n// Assembly: Microsoft.ML.AutoML, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n// MVID: 5D7A79B7-CF20-433B-A534-1ED92C335230\r\n// Assembly location: C:\\Users\\xxxx\\.nuget\\packages\\microsoft.ml.automl\\0.21.1\\lib\\netstandard2.0\\Microsoft.ML.AutoML.dll\r\n// XML documentation location: C:\\Users\\xxxx\\.nuget\\packages\\microsoft.ml.automl\\0.21.1\\lib\\netstandard2.0\\Microsoft.ML.AutoML.xml\r\n\r\n#nullable disable\r\nnamespace Microsoft.ML.AutoML\r\n{\r\n  /// <summary>\r\n  /// Enumeration of ML.NET multiclass classification trainers used by AutoML.\r\n  /// </summary>\r\n  public enum MulticlassClassificationTrainer\r\n  {\r\n    /// <summary>\r\n    /// <see cref=\"T:Microsoft.ML.Trainers.OneVersusAllTrainer\" /> using <see cref=\"T:Microsoft.ML.Trainers.FastTree.FastForestBinaryTrainer\" />.\r\n    /// </summary>\r\n    FastForestOva,\r\n    /// <summary>\r\n    /// <see cref=\"T:Microsoft.ML.Trainers.OneVersusAllTrainer\" /> using <see cref=\"T:Microsoft.ML.Trainers.FastTree.FastTreeBinaryTrainer\" />.\r\n    /// </summary>\r\n    FastTreeOva,\r\n    /// <summary>\r\n    /// See <see cref=\"T:Microsoft.ML.Trainers.LightGbm.LightGbmMulticlassTrainer\" />.\r\n    /// </summary>\r\n    LightGbm,\r\n    /// <summary>\r\n    /// See <see cref=\"T:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer\" />.\r\n    /// </summary>\r\n    LbfgsMaximumEntropy,\r\n    /// <summary>\r\n    /// <see cref=\"T:Microsoft.ML.Trainers.OneVersusAllTrainer\" /> using <see cref=\"T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer\" />.\r\n    /// </summary>\r\n    LbfgsLogisticRegressionOva,\r\n    /// <summary>\r\n    /// See <see cref=\"T:Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer\" />.\r\n    /// </summary>\r\n    SdcaMaximumEntropy,\r\n  }\r\n}\r\n\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/7025","RelatedDescription":"Open issue \"Unable to remove SdcaLogisticRegressionOva from AutoML Multiclassification Experiment\" (#7025)"},{"Id":"2145442937","IsPullRequest":true,"CreatedAt":"2024-02-23T00:41:24","Actor":"stephentoub","Number":"7020","RawContent":null,"Title":"Optimize regexes used in tiktoken","State":"closed","Body":"This ports the tweaks in https://github.com/openai/tiktoken/pull/234. I noticed the differences as they also show up in the source for https://www.youtube.com/watch?v=zduSFxRajkE.\r\n\r\n@tarekgh, if this conflicts with any of your changes, feel free to close this and I can re-make them after your changes land.","Url":"https://github.com/dotnet/machinelearning/pull/7020","RelatedDescription":"Closed or merged PR \"Optimize regexes used in tiktoken\" (#7020)"},{"Id":"2147660741","IsPullRequest":true,"CreatedAt":"2024-02-22T21:49:28","Actor":"michaelgsharp","Number":"7023","RawContent":null,"Title":"Fix formatting that fails in VS","State":"closed","Body":"Fixes minor formatting that fails in VS but not with command line.","Url":"https://github.com/dotnet/machinelearning/pull/7023","RelatedDescription":"Closed or merged PR \"Fix formatting that fails in VS\" (#7023)"},{"Id":"2146099505","IsPullRequest":true,"CreatedAt":"2024-02-21T20:14:45","Actor":"michaelgsharp","Number":"7021","RawContent":null,"Title":"Temp fix for the race condition during the tests.","State":"closed","Body":"Temporarily fixes the race condition that seems to be happening during the tests by making the offending tests run sequentially.","Url":"https://github.com/dotnet/machinelearning/pull/7021","RelatedDescription":"Closed or merged PR \"Temp fix for the race condition during the tests.\" (#7021)"},{"Id":"2146116326","IsPullRequest":true,"CreatedAt":"2024-02-21T08:33:30","Actor":"michaelgsharp","Number":"7022","RawContent":null,"Title":"Working on memory issue during tests for TorchSharp","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7022","RelatedDescription":"Open PR \"Working on memory issue during tests for TorchSharp\" (#7022)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-03-09T03:30:15.1598197Z","RunDurationInMilliseconds":351}