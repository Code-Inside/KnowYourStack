{"Data":{"GitHub":{"Issues":[{"Id":"1123595956","IsPullRequest":false,"CreatedAt":"2022-02-09T01:01:02","Actor":"r-pankevicius","Number":"6071","RawContent":null,"Title":"Can't compile sample programs (VS2022: IDE0055, VS2019: Microsoft.CodeAnalysis.CodeStyle.CSharpFormattingAnalyzer)","State":"closed","Body":"**System Information:**\r\n - OS & Version: Windows 11\r\n - ML.NET Version: latest from main: e25dce7 12 hours ago \r\n - .NET Version: \r\n```\r\n C:\\~src\\machinelearning>dotnet --list-sdks\r\n3.1.416 [C:\\Program Files\\dotnet\\sdk]\r\n5.0.303 [C:\\Program Files\\dotnet\\sdk]\r\n5.0.403 [C:\\Program Files\\dotnet\\sdk]\r\n5.0.404 [C:\\Program Files\\dotnet\\sdk]\r\n6.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n\r\n**Describe the bug**\r\nCan't compile sample programs (tried Microsoft.ML.AutoML.Samples, Microsoft.ML.Samples).\r\nGetting code analyzers errors (what tf?) like CSharpFormattingAnalyzer:\r\n`Could not load file or assembly 'Microsoft.CodeAnalysis, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'`\r\nA sample error:\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS8032\tAn instance of analyzer Microsoft.CodeAnalysis.CodeStyle.CSharpFormattingAnalyzer cannot be created from C:\\Program Files\\dotnet\\sdk\\6.0.101\\Sdks\\Microsoft.NET.Sdk\\codestyle\\cs\\Microsoft.CodeAnalysis.CSharp.CodeStyle.dll : Could not load file or assembly 'Microsoft.CodeAnalysis, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..\tMicrosoft.ML.InternalCodeAnalyzer\tC:\\~src\\machinelearning\\tools-local\\Microsoft.ML.InternalCodeAnalyzer\\CSC\t1\tN/A\r\n```\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. git clone...\r\n2. cd machinelearning\r\n3. build.cmd\r\nKind of succeeded, but strange warnings I've never seen before at the end (IDE0055: Fix formatting):\r\n```\r\n...\r\n  Microsoft.ML.Core.Tests -> C:\\~src\\machinelearning\\artifacts\\bin\\Microsoft.ML.Core.Tests\\Debug\\netcoreapp3.1\\Microsoft.ML.Core.Tests.dll\r\n\r\nBuild succeeded.\r\n\r\nC:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\UserInputValidationTests.cs(410,1): warning IDE0055: Fix formatting [C:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\Microsoft.ML.AutoML.Tests.csproj]\r\nC:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\UserInputValidationTests.cs(425,1): warning IDE0055: Fix formatting [C:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\Microsoft.ML.AutoML.Tests.csproj]\r\nC:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\UserInputValidationTests.cs(410,1): warning IDE0055: Fix formatting [C:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\Microsoft.ML.AutoML.Tests.csproj]\r\nC:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\UserInputValidationTests.cs(425,1): warning IDE0055: Fix formatting [C:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\Microsoft.ML.AutoML.Tests.csproj]\r\n    4 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:06:27.32\r\n```\r\n4. Opened Microsoft.ML.sln with default Visual Studio (it was 2019, not 2022; I have both installed). Set default project to Microsoft.ML.Samples, tried to build.\r\n5. Got an error (see A sample error above).\r\n\r\n**To Reproduce (2)**\r\nSame as above, but opened Microsoft.ML.sln with Visual Studio 2022.\r\nGot two IDE0055 Fix formatting errors, no idea why.\r\n![image](https://user-images.githubusercontent.com/1467109/152435410-0be7c0b6-deb0-4d0a-9ce7-df657639b172.png)\r\n\r\n**Expected behavior**\r\nCompiling sample without errors.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nAdded scrreenshot.\r\n\r\n**Additional context**\r\nN/A\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6071","RelatedDescription":"Closed issue \"Can't compile sample programs (VS2022: IDE0055, VS2019: Microsoft.CodeAnalysis.CodeStyle.CSharpFormattingAnalyzer)\" (#6071)"},{"Id":"1127838390","IsPullRequest":false,"CreatedAt":"2022-02-08T22:46:42","Actor":"ChadMGeek","Number":"6079","RawContent":null,"Title":"Unable to load KMeans model as original data type","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10 \r\n - ML.NET Version: ML.Net 1.7.0\r\n - .NET Version: .Net 6.0\r\n\r\n**Describe the bug**\r\nAfter fitting a KMeans model, the trained model is of type TransformerChain<ClusteringPredictionTransformer<KMeansModelParameters>>.  After saving the model to a file using mlContext.Model.Save and reloading it using mlContext.Model.Load, there is no way to get the model back to TransformerChain<ClusteringPredictionTransformer<KMeansModelParameters>>. The initial object loaded is of type TransformerChain<ITransformer>. If you look at the object.LastTransformer, it is of type ClusteringPredictionTransformer<IPredictorProducing<Vector<float>>>. Casting either the loaded object or the LastTransformer gives a System.InvalidCastException. Using mlContext.Model.Load(...) as ... gives you null. Leaving LastTransformer as ITransformer does not provide you with the \"Model\" property.\r\n\r\n**To Reproduce**\r\n\r\nCode below for simple Console app, based on MS KMeans example.\r\n\r\n```\r\nusing System;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Trainers;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\n\r\nnamespace KMeansSample\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            // Create a new context for ML.NET operations. It can be used for\r\n            // exception tracking and logging, as a catalog of available operations\r\n            // and as the source of randomness. Setting the seed to a fixed number\r\n            // in this example to make outputs deterministic.\r\n            var mlContext = new MLContext(seed: 0);\r\n\r\n            // Create a list of training data points.\r\n            var dataPoints = GenerateRandomDataPoints(1000, 0);\r\n\r\n            var _model = mlContext.Clustering.Trainers.KMeans(numberOfClusters: 3, featureColumnName: \"Features\");\r\n\r\n            // Convert the list of data points to an IDataView object, which is\r\n            // consumable by ML.NET API.\r\n            IDataView trainingData = mlContext.Data.LoadFromEnumerable(dataPoints);\r\n            var dataProcessPipeline = mlContext.Transforms.Concatenate(\"Features\", nameof(DataPoint.val1),\r\n                nameof(DataPoint.val2),\r\n                nameof(DataPoint.val3),\r\n                nameof(DataPoint.val4)).AppendCacheCheckpoint(mlContext);\r\n            var trainingPipeline = dataProcessPipeline.Append(_model);\r\n\r\n            var trainedModel = trainingPipeline.Fit(trainingData);\r\n\r\n            mlContext.Model.Save(trainedModel, trainingData.Schema, \"C:\\\\temp\\\\trainedModel.ms\");\r\n\r\n            //This version will produce a System.InvalidCastException\r\n           using (var stream = new FileStream(\"C:\\\\temp\\\\trainedModel.ms\", FileMode.Open, FileAccess.Read, FileShare.Read))\r\n            { \r\n                var loadedModel = (TransformerChain<ClusteringPredictionTransformer<KMeansModelParameters>>)(mlContext.Model.Load(stream, out var modelInputSchema1));\r\n                var lastTransformer = loadedModel.LastTransformer;\r\n                var modelParameters = lastTransformer.Model;\r\n            }\r\n\r\n           //This version will produce a null reference exception\r\n            using (var stream = new FileStream(\"C:\\\\temp\\\\trainedModel.ms\", FileMode.Open, FileAccess.Read, FileShare.Read))\r\n            {\r\n                var loadedModel = mlContext.Model.Load(stream, out var modelInputSchema1) as TransformerChain<ClusteringPredictionTransformer<KMeansModelParameters>>;\r\n                var lastTransformer = loadedModel.LastTransformer;\r\n                var modelParameters = lastTransformer.Model;\r\n            }\r\n\r\n            //This version gives a compiler error\r\n            \r\n            using (var stream = new FileStream(\"C:\\\\temp\\\\trainedModel.ms\", FileMode.Open, FileAccess.Read, FileShare.Read))\r\n            {\r\n                var loadedModel = mlContext.Model.Load(stream, out var modelInputSchema1) as TransformerChain<ITransformer> ;\r\n                var lastTransformer = loadedModel.LastTransformer;\r\n                var modelParameters = lastTransformer.Model;\r\n            }\r\n\r\n            //This version also gives a compiler error\r\n            using (var stream = new FileStream(\"C:\\\\temp\\\\trainedModel.ms\", FileMode.Open, FileAccess.Read, FileShare.Read))\r\n            {\r\n                var loadedModel = mlContext.Model.Load(stream, out var modelInputSchema1);\r\n                var lastTransformer = loadedModel.LastTransformer;\r\n                var modelParameters = lastTransformer.Model;\r\n            }\r\n            \r\n        }\r\n\r\n    \r\n\r\n        private static IEnumerable<DataPoint> GenerateRandomDataPoints(int count,\r\n            int seed = 0)\r\n        {\r\n            var random = new Random(seed);\r\n            float randomFloat() => (float)random.NextDouble();\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n               \r\n                yield return new DataPoint\r\n                {\r\n                 val1 = randomFloat(),\r\n                 val2 = randomFloat(),\r\n                 val3 = randomFloat(),\r\n                 val4 = randomFloat()\r\n                   \r\n                };\r\n            }\r\n        }\r\n\r\n        // Example with label and 50 feature values. A data set is a collection of\r\n        // such examples.\r\n        private class DataPoint\r\n        {\r\n         \r\n            public float val1 { get; set; }\r\n            public float val2 { get; set; }\r\n            public float val3 { get; set; }\r\n            public float val4 { get; set; }\r\n\r\n      \r\n        }\r\n\r\n        // Class used to capture predictions.\r\n        private class Prediction\r\n        {\r\n            // Original label (not used during training, just for comparison).\r\n            public uint Label { get; set; }\r\n            // Predicted label from the trainer.\r\n            public uint PredictedLabel { get; set; }\r\n        }\r\n\r\n        // Pretty-print of ClusteringMetrics object.\r\n        private static void PrintMetrics(ClusteringMetrics metrics)\r\n        {\r\n            Console.WriteLine($\"Normalized Mutual Information: \" +\r\n                $\"{metrics.NormalizedMutualInformation:F2}\");\r\n\r\n            Console.WriteLine($\"Average Distance: \" +\r\n                $\"{metrics.AverageDistance:F2}\");\r\n\r\n            Console.WriteLine($\"Davies Bouldin Index: \" +\r\n                $\"{metrics.DaviesBouldinIndex:F2}\");\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n**Expected behavior**\r\nAble to load object back into the same type as the object that was saved.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6079","RelatedDescription":"Open issue \"Unable to load KMeans model as original data type\" (#6079)"},{"Id":"1126977706","IsPullRequest":false,"CreatedAt":"2022-02-08T09:09:36","Actor":"stamen-petrov","Number":"6078","RawContent":null,"Title":"The example ApplyCustomWordEmbedding is not correct, \"product\" is not found.","State":"open","Body":"The example ApplyCustomWordEmbedding is not correct, because the method NormalizeText in ML 1.6, has by default keepPunctuation = true, which leads to extracting \"product.\", not \"product\". The output is as shown, but the explanation is not, because the 2nd position of the output should be -2, if \"product\" is considered. I suggest either to remove the \"product\" row from the custom embeddings, or modify the example accordingly.\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 80b1e2db-bc79-cead-9e39-ff830d8b211b\r\n* Version Independent ID: c6b67859-e2d9-2b15-8ace-973a164c8ff3\r\n* Content: [TextCatalog.ApplyWordEmbedding Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.textcatalog.applywordembedding?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML/TextCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/TextCatalog.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/6078","RelatedDescription":"Open issue \"The example ApplyCustomWordEmbedding is not correct, \"product\" is not found.\" (#6078)"},{"Id":"1126927141","IsPullRequest":true,"CreatedAt":"2022-02-08T08:16:46","Actor":"GitHubPang","Number":"6077","RawContent":null,"Title":"Fix typo","State":"open","Body":"Reference: https://github.com/dotnet/docs/pull/28105","Url":"https://github.com/dotnet/machinelearning/pull/6077","RelatedDescription":"Open PR \"Fix typo\" (#6077)"},{"Id":"1125998665","IsPullRequest":true,"CreatedAt":"2022-02-07T13:28:47","Actor":"dotnet-maestro[bot]","Number":"6076","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 97926d79-6b8b-4d32-c8db-08d9d479971c\r\n- **Build**: 20220203.1\r\n- **Date Produced**: February 3, 2022 10:28:45 AM UTC\r\n- **Commit**: 70831f0d126fe88b81d7dc8de11358e17a5ce364\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22103.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22103.1][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22103.1][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22103.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22103.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/4d6406f...70831f0\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6076","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/arcade\" (#6076)"},{"Id":"1124432954","IsPullRequest":true,"CreatedAt":"2022-02-06T07:24:26","Actor":"ericstj","Number":"6074","RawContent":null,"Title":"Update SharpZipLib to 1.3.3","State":"closed","Body":"There's a new version of this dependency used by our samples.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6074","RelatedDescription":"Closed or merged PR \"Update SharpZipLib to 1.3.3\" (#6074)"},{"Id":"1122220162","IsPullRequest":true,"CreatedAt":"2022-02-05T11:17:23","Actor":"torronen","Number":"6068","RawContent":null,"Title":"Use LightGBM default seed if not set explicitly","State":"closed","Body":"\r\n - Fixes #6062 \r\n \r\nLightGBM has a default value for seeds. If we set random_seed, then more specific seeds will get overridden. ML.NET interface does not provide option to set the other seeds explicitly. This makes it impossible to train LightGBM with default values. Further, if we a new random seed is set from MLContext it may change for each call. This will affect models which use feature_fraction or other features which use randomity\r\n\r\nThis PR updates LightGBM to not set seed from .NET unless it has been explicitly set.\r\n\r\nLinks:\r\nhttps://lightgbm.readthedocs.io/en/latest/Parameters.html#seed\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6068","RelatedDescription":"Closed or merged PR \"Use LightGBM default seed if not set explicitly\" (#6068)"},{"Id":"1123689202","IsPullRequest":true,"CreatedAt":"2022-02-05T06:29:51","Actor":"michaelgsharp","Number":"6073","RawContent":null,"Title":"Testing Hardlinking for space saving","State":"closed","Body":"Having space issues again. This PR is testing using hardlinks and clearing of the non-windows nuget binaries (already been done for the OS other than windows.)","Url":"https://github.com/dotnet/machinelearning/pull/6073","RelatedDescription":"Closed or merged PR \"Testing Hardlinking for space saving\" (#6073)"},{"Id":"1124440724","IsPullRequest":true,"CreatedAt":"2022-02-04T17:25:45","Actor":"ericstj","Number":"6075","RawContent":null,"Title":"Update Google.Protobuf to 3.19.4","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/6075","RelatedDescription":"Open PR \"Update Google.Protobuf to 3.19.4\" (#6075)"},{"Id":"1123590534","IsPullRequest":true,"CreatedAt":"2022-02-04T01:00:55","Actor":"michaelgsharp","Number":"6070","RawContent":null,"Title":"Disabling flaky tests on unix/arm systems for stability.","State":"closed","Body":"Disabling 3 more flaky System.Drawing tests on unix/arm systems.\r\n\r\nTracked in #6043","Url":"https://github.com/dotnet/machinelearning/pull/6070","RelatedDescription":"Closed or merged PR \"Disabling flaky tests on unix/arm systems for stability.\" (#6070)"},{"Id":"1123631051","IsPullRequest":false,"CreatedAt":"2022-02-03T22:46:51","Actor":"michaelgsharp","Number":"6072","RawContent":null,"Title":"Community Survey","State":"open","Body":"A couple years ago we surveyed you the members of the community in this repo to learn how we were doing as maintainers.\r\n\r\nIt's time to repeat the same survey. Whether you've been involved for years or you're relatively new please tell us about your experience participating and contributing to the project. It should only take a few minutes, and you can answer for up to 3 repos:\r\n\r\nhttps://www.surveymonkey.com/r/8QTQTGJ?Source=machinelearning","Url":"https://github.com/dotnet/machinelearning/issues/6072","RelatedDescription":"Open issue \"Community Survey\" (#6072)"},{"Id":"1123393293","IsPullRequest":false,"CreatedAt":"2022-02-03T17:58:53","Actor":"papyr","Number":"6069","RawContent":null,"Title":"NLP in voice /audio","State":"open","Body":"Currently we have some alexa enabled customer care options.\r\n\r\nWe want to port that to ML.NET , do you have any native language parsers on a voice stream like google or Amazon","Url":"https://github.com/dotnet/machinelearning/issues/6069","RelatedDescription":"Open issue \"NLP in voice /audio\" (#6069)"},{"Id":"1111641821","IsPullRequest":true,"CreatedAt":"2022-02-03T09:05:05","Actor":"xenoverse-us","Number":"6055","RawContent":null,"Title":"Use interface IProgress instead of Progress in AutoML ExperimentBase","State":"closed","Body":"Fixes #6042 ","Url":"https://github.com/dotnet/machinelearning/pull/6055","RelatedDescription":"Closed or merged PR \"Use interface IProgress instead of Progress in AutoML ExperimentBase\" (#6055)"},{"Id":"1118500174","IsPullRequest":true,"CreatedAt":"2022-02-01T15:00:29","Actor":"torronen","Number":"6064","RawContent":null,"Title":"LightGBM parameter changes to match Python implementation results","State":"closed","Body":"Suggested changes for LightGBM results through ML.NET similar as through Python:\r\n* keep LightGBM default seed if seed has not been set\r\n* add mapping from NumberOfIterations to num_iterations\r\n* add NumberOfIterations to parameters array for LightGBM\r\n* change sigmoid default value to match LightGBM\r\n* Default Evaluation Metric to None per LightGBM default\r\n\r\nProject that can be used for comparison between LightGBM in Python and Microsoft.ML.LightGBM and also compare ModelBuilder with python-FLAML: https://github.com/torronen/lightgbm-comparison\r\n\r\nRationale: https://github.com/microsoft/FLAML/discussions/409#discussioncomment-2058431\r\nReasons for changes explained in the issues:\r\n* fixes #6063 \r\n* fixes #6062 \r\n* fixes #654\r\n\r\nI suggest the results should be equal through Python and ML.NET so that developers can discuss and share best practices about hyperparameters. Also, it enables to use tuning from Python. \r\n\r\nSigmoid value change has been propose before but was not implemented.\r\nIt may need more consideration:  https://github.com/dotnet/machinelearning/pull/667\r\n\r\nPR is for comments and discussions for now. Results are not yet equal through ML.Net and Python.","Url":"https://github.com/dotnet/machinelearning/pull/6064","RelatedDescription":"Closed or merged PR \"LightGBM parameter changes to match Python implementation results\" (#6064)"},{"Id":"1118327154","IsPullRequest":false,"CreatedAt":"2022-02-01T14:46:35","Actor":"torronen","Number":"6063","RawContent":null,"Title":"Q: Where is num_iterations set for LightGBM binary?","State":"closed","Body":"I am trying to match model performance for LightGBM in .NET and Python. I am having some challenges ( discussion :  https://github.com/microsoft/FLAML/discussions/409#discussioncomment-2058431 )\r\n\r\nTesting pipeline with simple Titanic dataset simplified sample https://github.com/torronen/lightgbm-comparison\r\n\r\nI would like to understand better how values are sent for LightGBM library compiled from C++.\r\nI have trouble finding how NumberOfIterations is mapped. \r\n\r\nThe below method would rename it to number_of_iterations but it is not a valid alias for number of trees per link to C++ source below. I did not find \"NumberOf\" => \"num\" replace either.\r\nhttps://github.com/dotnet/machinelearning/blob/212b5dfc3ba9341ea73867cdc495dbcada8ab660/src/Microsoft.ML.LightGbm/WrappedLightGbmInterface.cs#L258-L282 \r\n\r\nI think it should be here:\r\nhttps://github.com/dotnet/machinelearning/blob/b3a3c665aa3d986ffd06a221f07b46f589e45c75/src/Microsoft.ML.LightGbm/LightGbmTrainerBase.cs#L50-L61\r\n\r\nI can find NumBoostRounds (num_boost_rounds is a valid alias) here, but could someone explain what does this annotation mean? There is another class for sweepable ranges. Does this get somehow transferred to LightGBM binary? Where does this suggested sweepable range get used?\r\nhttps://github.com/dotnet/machinelearning/blob/8eac93a0f999acb144478f1b39a321128861acc3/src/Microsoft.ML.LightGbm/LightGbmTrainerBase.cs#L77\r\n\r\nFinally, those values which have dependant default values are set here:\r\nhttps://github.com/dotnet/machinelearning/blob/8eac93a0f999acb144478f1b39a321128861acc3/src/Microsoft.ML.LightGbm/LightGbmTrainerBase.cs#L431-L433\r\n\r\nExplanation of some name mapping + links can be found from this Github issue. Although snippets point to old versions, main branch seems not to have changes\r\nhttps://github.com/dotnet/machinelearning/issues/5451#issuecomment-714664503\r\n\r\n**Links to LightGBM aliases:** \r\nC++ source\r\nhttps://github.com/microsoft/LightGBM/blob/cf38071b6ac7e238b1654286dbb5a9a98b2c320b/src/io/config_auto.cpp\r\n(more clear in R package):\r\nhttps://github.com/microsoft/LightGBM/blob/c84b330a30c0b6b8b71ec5d2bffab05928a715d0/R-package/R/aliases.R#L108\r\nAliases in documentation\r\nhttps://lightgbm.readthedocs.io/en/latest/Parameters.html#num_iterations\r\nSame case in 2.3.1\r\nhttps://github.com/microsoft/LightGBM/blob/v2.3.1/src/io/config_auto.cpp","Url":"https://github.com/dotnet/machinelearning/issues/6063","RelatedDescription":"Closed issue \"Q: Where is num_iterations set for LightGBM binary?\" (#6063)"},{"Id":"1120335215","IsPullRequest":false,"CreatedAt":"2022-02-01T07:50:55","Actor":"DeveloperNo579212","Number":"6067","RawContent":null,"Title":"Validation of Onnx input using ApplyOnnxModel","State":"open","Body":" - Windows 10 build (19044.1469)\r\nLatest of these as per (2022-02-01):\r\n - Microsoft.ML.NET Version: 1.7\r\n - Microsoft.ML.ImageAnalytics: 1.7.0\r\n - Microsoft.OnnxRuntime: 1.10\r\n - Microsoft.OnnxRuntime.GPU: 1.10\r\n - Microsoft.OnnxTransformer: 1.7.0\r\n - .NET Framework 4.8\r\n\r\nI created a very simple ImagePrediction model that I converted from savedmodel to onnx using tf2onnx.\r\nI have verified the conversion is ok using python.\r\n\r\nUsing the onnx file in ML.Net does not verify ok but does fail in classification,\r\nI get a high prediction score in the image itself but it assigned to wrong column (class).\r\n\r\nThe image is normalized between (1 ,-1) in python and in my ML.net implementation. Removing\r\nthe normalization in python gives same sort of problem as shows with normalization in ML.net.\r\nImageformat in use is PNG.\r\n\r\nModel is very simple with two classes of 10 images each and gives 100% hit using a training image\r\nin validation when training, the conversion from savedmodel to onnx is confirmed ok and predictable\r\neven if not as good as in training.  \r\n\r\nI need some reference implementation with image classification in ML.net with Onnx model as input as\r\nmy last step in verification.\r\n\r\nI used a slightly modifed version of this (section Verifying a Converted Model) adding normalization of input image:\r\nhttps://onnxruntime.ai/docs/tutorials/tf-get-started.html\r\n\r\nI want to verify my onnx model in ML.net to be identical as in the output from python as above.\r\n\r\nI used opset 11 as noted in (https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.onnx.onnxscoringestimator?view=ml-dotnet)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6067","RelatedDescription":"Open issue \"Validation of Onnx input using ApplyOnnxModel\" (#6067)"},{"Id":"1119986759","IsPullRequest":false,"CreatedAt":"2022-01-31T22:09:43","Actor":"jannickj","Number":"6066","RawContent":null,"Title":"Add support for multi-dimensional arrays for model input/output.","State":"open","Body":"I have a fully working tensorflow model and I litterally just need the last step of having C# run my model, but I am stuck on a null exception.\r\n\r\nI have a very simple setup, and I've locked down both sequence length and  batch size, however no matter what i do it gives me the exception:\r\n\r\n```\r\n  at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.<>c__DisplayClass8_0`1.<CreateDirectVBufferSetter>b__0(TRow row)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.FillValues(TRow row)\r\n   at Microsoft.ML.Data.TypedCursorable`1.RowImplementation.FillValues(TRow row)\r\n   at Microsoft.ML.PredictionEngineBase`2.FillValues(TDst prediction)\r\n   at Microsoft.ML.PredictionEngine`2.Predict(TSrc example, TDst& prediction)\r\n   at MyProject.Model.Run() in \r\n```\r\n\r\nI have tested that the model works in python and I've made 100% sure the dimensions fit exactly.\r\n\r\n```csharp\r\npublic record Features\r\n\t{\r\n\r\n\t\t[ColumnName(\"x_1\")]\r\n\t\t[VectorType(1, 41, 3)]\r\n\t\tpublic int[,,] UnigramWindows { get; set; } = null!;\r\n\t\t[ColumnName(\"x_2\")]\r\n\t\t[VectorType(1, 41, 3)]\r\n\t\tpublic int[,,] BigramWindows { get; set; } = null!;\r\n\t\t[ColumnName(\"x_3\")]\r\n\t\t[VectorType(1, 41, 3)]\r\n\t\tpublic int[,,] CharTypeWindows { get; set; } = null!;\r\n\t\t[ColumnName(\"x_4\")]\r\n\t\t[VectorType(1, 41, 41)]\r\n\t\tpublic int[,,] WordsStartingAt { get; set; } = null!;\r\n\t\t[ColumnName(\"x_5\")]\r\n\t\t[VectorType(1, 41, 41)]\r\n\t\tpublic int[,,] WordsEndingAt { get; set; } = null!;\r\n\t\t[ColumnName(\"x\")]\r\n\t\t[VectorType(1)]\r\n\t\tpublic int[] SeqLen { get; set; } = null!;\r\n\t}\r\n\r\nprivate record Output\r\n{\r\n\t[VectorType(1, 41, 6)]\r\n\tpublic float[,,] Identity;\r\n}\r\n\r\n\r\nprivate static ITransformer LoadModel(\r\n\tMLContext mlContext,\r\n\tstring modelPath)\r\n{\r\n\tvar tfModel = mlContext.Model\r\n\t\t.LoadTensorFlowModel(modelPath);\r\n\tvar schema = tfModel.GetModelSchema();\r\n\tvar revSchema = schema.Reverse().ToArray();\r\n\tvar pipeline =\r\n\t\ttfModel\r\n\t\t.ScoreTensorFlowModel(\r\n\t\t\t\toutputColumnNames: new[] { \"Identity\" },\r\n\t\t\t\tinputColumnNames:\r\n\t\t\t \tnew[] {\r\n\t\t\t \t\t\"x\",\r\n\t\t\t \t\t\"x_1\",\r\n\t\t\t \t\t\"x_2\",\r\n\t\t\t \t\t\"x_3\",\r\n\t\t\t \t\t\"x_4\",\r\n\t\t\t \t\t\"x_5\",\r\n\t\t\t \t},\r\n\t\t\t\taddBatchDimensionInput: false);\r\n\r\n\r\n\r\n\tvar dataView = mlContext.Data.LoadFromEnumerable(Enumerable.Empty<Features>());\r\n\tITransformer mlModel = pipeline.Fit(dataView);\r\n\r\n\treturn mlModel;\r\n}\r\n\r\npublic static run() \r\n{\r\n        var model = LoadModel(mlContext, \"model.pb\");\r\n\tvar predictionEngine = mlContext\r\n\t\t.Model\r\n\t\t.CreatePredictionEngine<Features, Output>(model);\r\n\r\n        var res = predictionEngine.Predict(features);\r\n\r\n\tConsole.WriteLine(System.Text.Json.JsonSerializer.Serialize(res));\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6066","RelatedDescription":"Open issue \"Add support for multi-dimensional arrays for model input/output.\" (#6066)"},{"Id":"1118602652","IsPullRequest":false,"CreatedAt":"2022-01-30T16:49:10","Actor":"torronen","Number":"6065","RawContent":null,"Title":"Q: Roadmap for LightGBM interface in .NET","State":"open","Body":"LightGBM 2.3.1 has some parameters and features which are missing from Microsoft.ML.LightGBM. One such is refitting / re-training:\r\n- https://lightgbm.readthedocs.io/en/latest/pythonapi/lightgbm.Booster.html#lightgbm.Booster.refit\r\n- https://github.com/microsoft/LightGBM/issues/1473\r\n- https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/retrain-model-ml-net\r\n\r\nRe-fitting is missing from all tree-based trainers in Microsoft.ML. It has been requested at least in #6010 albeit for FastTree, as well something useful for some of my use cases. Another useful would be GPU-support which is mentioned multiple issues, e.g. https://github.com/dotnet/machinelearning/pull/452\r\n\r\nThere was also [PR about LightGBM upgrade to 3.x](https://github.com/dotnet/machinelearning/pull/5851) versions but it was decided to not upgrade it at this time. Upgrade requirements are listed in issue https://github.com/dotnet/machinelearning/issues/5447 .NET might be missing out on the improvements, as well as throws \"Bad allocation\" errors in some combination of hyperparameters.\r\n\r\nIn my experiments, FastTree often outperforms LightGBM. Based on online discussion sentiment about LightGBM this should not be the case. LightGBM is considered a high-performing algorithm and has continued development which I think LightGBM integration should be important for performance of Microsoft.ML.\r\n\r\nFinally, there may be some misconfiguration which prevents Microsoft.ML.LightGBM getting similar results with same hyperparameters as through Python interface (links in https://github.com/dotnet/machinelearning/pull/6064 , sample code https://github.com/torronen/lightgbm-comparison )\r\n\r\nIs the intent to have a complete LightGBM interface in .NET, or is it better to use Python for advanced uses cases (and e.g. export to ONNX from Python)? Any roadmaps / estimated priority for upgrade of LightGBM? \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6065","RelatedDescription":"Open issue \"Q: Roadmap for LightGBM interface in .NET\" (#6065)"},{"Id":"1118128243","IsPullRequest":false,"CreatedAt":"2022-01-29T09:24:38","Actor":"torronen","Number":"6062","RawContent":null,"Title":"LightGBM should use default seed if not set explicitly","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n - ML.NET Version: ML.NT 1.6.0\r\n - .NET Version: .NET 5.0\r\n\r\n**Describe the bug**\r\nLightGBM must get random seed when called, or it will set a set a random seed from MLContext.\r\nHowever, LightGBM has a default value for seeds. If we set this random_seed, then other seeds will get overridden. ML.NET interface does not provide option to set the other seeds explicitly.\r\n\r\nLinks:\r\nhttps://lightgbm.readthedocs.io/en/latest/Parameters.html#seed\r\nhttps://github.com/dotnet/machinelearning/blob/b3a3c665aa3d986ffd06a221f07b46f589e45c75/src/Microsoft.ML.LightGbm/LightGbmTrainerBase.cs#L230\r\n\r\nIf some features which use randomity are used then this may cause issues:\r\n-not being able to reproduce results after running Python. \r\n-not able to reproduce results in ML.NET due to MLContex random generator may have had a different number of calls already.\r\n\r\n**Expected behavior**\r\nSeed should not be set for LightGBM. \r\nIf not possible, then option to set the specific seeds ( data_random_seed, feature_fraction_seed ...) would be useful.\r\n\r\n**Possible fix*\r\nDo not set res{\"seed\"] here if Seed == null \r\n[res[\"seed\"] = (Seed.HasValue) ? Seed : host.Rand.Next();](https://github.com/dotnet/machinelearning/blob/b3a3c665aa3d986ffd06a221f07b46f589e45c75/src/Microsoft.ML.LightGbm/LightGbmTrainerBase.cs#L267)\r\n\r\n**Additional context**\r\nRelated to this discussion about not being able to reproduce LightGBM results in ML.NET from Python\r\nhttps://github.com/microsoft/FLAML/discussions/409#discussioncomment-2058431","Url":"https://github.com/dotnet/machinelearning/issues/6062","RelatedDescription":"Open issue \"LightGBM should use default seed if not set explicitly\" (#6062)"},{"Id":"1117739822","IsPullRequest":false,"CreatedAt":"2022-01-28T19:00:07","Actor":"80LevelElf","Number":"6061","RawContent":null,"Title":"Ability to limit AutoML resource using (amount of parallel threads) ","State":"open","Body":"The current AutoML is not good to use when you have trained a lot of models at the same time in the cloud.\r\nIf you have some amount of pods in your Kubernetes cluster it doesn't matter how many AutoML experiments you execute at the same time. 4 experiments or 1 experiment at the same time use 100% of CPU (It brokes health checks and so on)\r\n\r\nLow-level API of trainers (like FastForestBinaryTrainer) has options like NumberOfThreads and some other trainer-specific options you can use to handle the workload.\r\n\r\nIs it able to add something like this to AutoML API?\r\n\r\nBut the most brilliant solution is some sort of smart property like ResourceUsingRatio which can be from 0.0 to 1.0\r\nResourceUsingRatio = 1.0 means the experiment use the maximum of potential resources (mainly CPU) it needs or the machine has.","Url":"https://github.com/dotnet/machinelearning/issues/6061","RelatedDescription":"Open issue \"Ability to limit AutoML resource using (amount of parallel threads) \" (#6061)"},{"Id":"1117065994","IsPullRequest":false,"CreatedAt":"2022-01-28T07:00:03","Actor":"pgovind","Number":"6060","RawContent":null,"Title":"DataFrame.LoadCsv should consider supporting csv files living on Azure Blob Storage","State":"open","Body":"Somewhat related to https://github.com/dotnet/machinelearning/issues/5905 that I filed.\r\n\r\nJust something to consider. I'm not sure if this is something the ML.NET/library team can/should do on their own (or with the Azure C# SDK folks), but it'd be nice integration to have. I can see a use case where there is a data pipeline that writes to blob storage, and the last step of the pipeline could be a regular job that reads in the csv file from blob storage and does some transforms/processing of the DataFrame.","Url":"https://github.com/dotnet/machinelearning/issues/6060","RelatedDescription":"Open issue \"DataFrame.LoadCsv should consider supporting csv files living on Azure Blob Storage\" (#6060)"},{"Id":"1113747870","IsPullRequest":true,"CreatedAt":"2022-01-27T19:12:49","Actor":"joaocc","Number":"6057","RawContent":null,"Title":"Upgrading ONNXRuntime to v1.10 (Fixes #6056)","State":"closed","Body":"Trying to upgrade ONNXRuntime to v1.10.\r\nNew to the ml.net community so please excuse me if the PR is lacking some elements. \r\nWill try to fix issues that may be caught in testing.\r\nAny assistance is welcomed.\r\nThanks","Url":"https://github.com/dotnet/machinelearning/pull/6057","RelatedDescription":"Closed or merged PR \"Upgrading ONNXRuntime to v1.10 (Fixes #6056)\" (#6057)"},{"Id":"1113730509","IsPullRequest":false,"CreatedAt":"2022-01-27T19:12:17","Actor":"joaocc","Number":"6056","RawContent":null,"Title":"Upgrade ONNXRuntime to v1.10","State":"closed","Body":"ONNX Runtime has already reached v1.10, with improved opcode support, performance and other very useful features.\r\nWe are looking to implement some workloads on ml.net which use later opcodes (v1.6 is more than 2 years old already).\r\nhttps://github.com/Microsoft/onnxruntime/blob/master/docs/Versioning.md\r\n\r\nUpgrade ONNXRutime from v1.6 to v1.10\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6056","RelatedDescription":"Closed issue \"Upgrade ONNXRuntime to v1.10\" (#6056)"},{"Id":"1115525485","IsPullRequest":true,"CreatedAt":"2022-01-26T21:36:43","Actor":"LittleLittleCloud","Number":"6059","RawContent":null,"Title":"Migrate search space","State":"open","Body":"Move search space from model builder to ml repo\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6059","RelatedDescription":"Open PR \"Migrate search space\" (#6059)"},{"Id":"1114052359","IsPullRequest":false,"CreatedAt":"2022-01-25T15:46:27","Actor":"torronen","Number":"6058","RawContent":null,"Title":"Suggestion: Make TransformInference public","State":"open","Body":"Creating pipelines for big datasets can be complex. Datasets may have hundreds or thousands of columns. Type of columns may vary. Even if the type is text, some may be boolean, some may be categories, short sentences or long paragraphs. Developers would benefit from tools to help build the pipeline based on rules that analyse the contents.\r\n\r\nAutoML already has tooling for automating inference. However, TransormInferenceApi is internal to Microsoft.ML.  ColumnInference is public, but using it without TransformInference seems difficult.\r\n\r\n1) Could this TransformInferenceApi be public? https://github.com/dotnet/machinelearning/blob/04dda55ab0902982b16309c8e151f13a53e9366d/src/Microsoft.ML.AutoML/TransformInference/TransformInferenceApi.cs\r\n2) Or, is there another way to do transform inference from an application referencing the nuget package?\r\n\r\nBecause the methods are public but the type is internal, I suppose there might have been some discussion and reason for this choice. However, I could not find from Github so maybe it is possible to reconsider. For now, I will make it and related classes  public in a private build. I'll update here if any issues.\r\n\r\nRelated: TransformInference.Experts could benefit from an extension point. For example, a developer could register additional \"transform experts\" for specific dataset, or to improved general purpose experts. (In general, there could be more extension points so there would be less need for custom builds)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6058","RelatedDescription":"Open issue \"Suggestion: Make TransformInference public\" (#6058)"},{"Id":"1110769541","IsPullRequest":false,"CreatedAt":"2022-01-21T18:37:18","Actor":"jtsoftware","Number":"6054","RawContent":null,"Title":"Where's my data?","State":"closed","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version: ML.NET v1.7.0\r\n - .NET Version: .NET 4.7.2\r\n\r\n**Describe the bug**\r\n\r\nI'm a newbie, so this is likely my error, but I can't figure it out. I get this exception when calling EvaluateNonCalibrated:\r\n\r\nSystem.ArgumentOutOfRangeException: 'AUC is not defined when there is no positive class in the data\r\nParameter name: PosSample'\r\n\r\nI think it's related to my data not getting parsed correctly.  I added code to print a preview and save the data, and it appears that somewhere between LoadFromTextFile and MlContext.Transforms.Concatenate I get blank data column entries.\r\n\r\n**To Reproduce**\r\nHere's a solution demonstrating this:\r\n[LoadFromTextFileProblem.zip](https://github.com/dotnet/machinelearning/files/7915801/LoadFromTextFileProblem.zip)\r\n\r\nSteps to reproduce the behavior:\r\n1. Unzip LoadFromTextFileProblem.zip.\r\n2. Build LoadFromTextFileProject.\r\n3. Set debug \"Working directory to \"(solution dir)\\LoadFromTextFileProject\".\r\n4. Run LoadFromTextFileProject.\r\n\r\nSee the \"LoadFromTextFileProblem\\Files\\TrainingInput.txt\" file for the input data.\r\n\r\nDisplay output from the preview shows no data, i.e. \"Chapter   Verse   SentenceNumber 0  Word   Translation   Label False\".\r\n\r\nLook at the output file (also in the zip): \"(solution dir)\\LoadFromTextFileProblem\\Files\\OutSplit.txt\". There are rows for the data, but no data.\r\n\r\n**Expected behavior**\r\nI expected to get data from columns in the input files. What am I missing in loading the data?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6054","RelatedDescription":"Closed issue \"Where's my data?\" (#6054)"},{"Id":"1109436086","IsPullRequest":false,"CreatedAt":"2022-01-20T15:23:48","Actor":"Darth-Carrotpie","Number":"6053","RawContent":null,"Title":"Update Newtonsoft.json to latest version. Does not work in Unity (2021.2.7f1) anymore","State":"open","Body":"**System Information (please complete the following information):**\r\n - Windows 10]\r\n - ML.NET Version: current (via NuGet)\r\n - .NET Version: Unity (2021.2.7f1) - .NET Standard 2.1\r\n\r\n**Describe the bug**\r\nAssemblies throw up. Most cannot load due to errors somewhere.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Get Unity (2021.2.7f1)\r\n2. Install NuGet in Unity\r\n3. Get ML.NET via NuGet\r\n4. See errors\r\n\r\n**Expected behavior**\r\nAssemblies imported properly.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nThis is easily reproducible with all 2021 Unity versions.\r\n\r\n**Additional context**\r\nA big issue probably is a conflict between Newtonsoft.Json package versions. Unity uses newest, while ML.NET uses a heavily outdated version.\r\nPlease update dependencies of this package!\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6053","RelatedDescription":"Open issue \"Update Newtonsoft.json to latest version. Does not work in Unity (2021.2.7f1) anymore\" (#6053)"},{"Id":"1108905994","IsPullRequest":false,"CreatedAt":"2022-01-20T06:17:37","Actor":"shiqiangz-git","Number":"6052","RawContent":null,"Title":"Poor reasoning performance","State":"open","Body":"Gpu concurrent reasoning is too slow, CPU reasoning occupancy is too high, resNet50 image classification","Url":"https://github.com/dotnet/machinelearning/issues/6052","RelatedDescription":"Open issue \"Poor reasoning performance\" (#6052)"},{"Id":"1108704009","IsPullRequest":false,"CreatedAt":"2022-01-20T00:42:21","Actor":"infinitemind2","Number":"6051","RawContent":null,"Title":"Anomaly detection on rainfall data ","State":"open","Body":"Not exactly a feature request but a 'is it possible' type question. \r\nIf so any ideas on the direction to implement.\r\n\r\nHave data for various locations with differing length of records. All locations would have differing seasonality and intensities (very different distributions).\r\nLooking at updating/inserting records and wish to highlight possible anomalies.\r\nThe anomalies could be cause by error in the recording process and may need further investigation. (calibration data, typing error, etc)\r\n\r\nHave had a look at DetectAnomalyBySrCnn and not sure if I implemented it correctly.\r\nOnce I Fit the data and create the TimeSeriesEngine and use Predict I get a zero values in the resultant vector. \r\nIf I run the training data through the Predict function I get results that look promising. However the data appears to be added to the engine and skews further tests. (after I've used known bad data the predict gives different result next time)\r\n\r\nAm I barking up the correct tree? \r\nIf so any suggestions in the direction I should proceed?\r\n\r\nI know this is a big ask, thanks for any help.","Url":"https://github.com/dotnet/machinelearning/issues/6051","RelatedDescription":"Open issue \"Anomaly detection on rainfall data \" (#6051)"},{"Id":"1106432990","IsPullRequest":false,"CreatedAt":"2022-01-18T03:17:26","Actor":"tankhar","Number":"6050","RawContent":null,"Title":"Fit() method should be optimized when used with  DatabaseLoader or IEnumerable (with sqldatareader)","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nFit() method is not optimized when used with databaseloader or ienumerable(sqldatareader->yield return) and is causing delays in processing.\r\n\r\nThe training data that our ML.Net(v 1.7) project refers to resides in Sql Server database\r\n\r\nI do not want to load the entire data in memory for fitting\r\nIn order to fetch this data while training I have tried 2 ways:\r\n1. using Databaseloader which has a stored procedure as command text\r\n2. using IEnumerable which calls sqldatareader(with yield return)(this also calls a stored procedure)\r\nand then creating IDataView using LoadFromEnumerable()\r\n\r\nThe training data has 6 columns which are transformed as follows:\r\nFeaturizeText is being called for 4 columns\r\nOnehotencoding is being called for 2 columns\r\nConcatenation of all above transformed columns\r\n\r\n**Issue**\r\nIn both above ways of fetching:\r\n**The underlying stored procedure is getting called 15 times during each “Fit” call**\r\nI observed that the calls are due to the transforms being applied\r\nIf I reduce the number of transforms, the calls to stored procedure reduce accordingly\r\nThis causes the Fit() method to take considerable amount of time \r\n\r\n\r\n**Describe the solution you'd like**\r\n1. Ideally the data should be fetched just once and all preprocessing done on the fetched data\r\n2.Please share a sample that uses IEnumerable with sqldatareader, as this is my preferred approach\r\nI would compare it with my implementation\r\n\r\n**Describe alternatives you've considered**\r\nNone\r\n\r\n**Additional context**\r\nNone\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6050","RelatedDescription":"Open issue \"Fit() method should be optimized when used with  DatabaseLoader or IEnumerable (with sqldatareader)\" (#6050)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-02-09T03:30:22.3184381Z","RunDurationInMilliseconds":509}