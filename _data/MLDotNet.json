{"Data":{"GitHub":{"Issues":[{"Id":"687430294","IsPullRequest":false,"CreatedAt":"2020-08-28T04:45:50","Actor":"JulioAlbinatiCortez","Number":"5366","RawContent":null,"Title":"Issue when providing custom gains to LightGbmRanking","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Not sure, running on AML Compute.\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.0\r\n\r\n### Issue\r\n\r\n- **What did you do?** \r\nI am using the command line interface to train a LightGbmRanking model using a pre-defined set of custom gains. Full command is:\r\n_dotnet /mlnet/MML.dll TrainTest tr=LightGBMRanking{iter=500 customGains=\"0,82,189,435,1000\"} loader=TextLoader{col=SessionGuid:TX:0 col=Features:R4:5-47 col=Label:R4:225} xf=HashTransform{col=GroupId:SessionGuid} data=inputs/train.tsv test=inputs/test.tsv out=outputs/model.zip dout=outputs/pred.tsv\r\nmaml.exe TrainTest test=inputs/test.tsv tr=LightGBMRanking{iter=500 customGains=\"0,82,189,435,1000\"} dout=outputs/pred.tsv loader=TextLoader{col=SessionGuid:TX:0 col=Features:R4:5-47 col=Label:R4:225} data=inputs/train.tsv out=outputs/model.zip xf=HashTransform{col=GroupId:SessionGuid}_\r\n\r\n- **What happened?**\r\nCommand fails suggesting my custom gains are invalid. Full output:\r\n_'0,82,189,435,1000' is not a valid value for the 'customGains' command line option\r\nUsage For 'LightGBMRanking':\r\ncustomGains=<int>\r\n     An array of gains associated to each relevance label. Default value:'0, 3,\r\n     7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095' (short form gains)\r\nsigmoid=<double>\r\n     Parameter for the sigmoid function. Default value:'0.5'\r\nevaluationMetric=[None|Default|MeanAveragedPrecision|NormalizedDiscountedCumulativeGain]\r\n     Evaluation metrics. Default value:'NormalizedDiscountedCumulativeGain'\r\n     (short form em)\r\nnumberOfIterations=<int>\r\n     Number of iterations. Default value:'100' (short form iter)\r\nlearningRate=<double>\r\n     Shrinkage rate for trees, used to prevent over-fitting. Range: (0,1].\r\n     (short form lr)\r\nnumberOfLeaves=<int>\r\n     Maximum leaves for trees. (short form nl)\r\nminimumExampleCountPerLeaf=<int>\r\n     Minimum number of instances needed in a child. (short form mil)\r\nmaximumBinCountPerFeature=<int>\r\n     Maximum number of bucket bin for features. Default value:'255' (short form\r\n     mb)\r\nbooster=<name>{<options>}\r\n     Which booster to use, can be gbtree, gblinear or dart. gbtree and dart use\r\n     tree based model while gblinear uses linear function. Default value:'gbdt'\r\nverbose=[+|-]\r\n     Verbose Default value:'-' (short form v)\r\nsilent=[+|-]\r\n     Printing running messages. Default value:'+'\r\nnumberOfThreads=<int>\r\n     Number of parallel threads used to run LightGBM. (short form nt)\r\nearlyStoppingRound=<int>\r\n     Rounds of early stopping, 0 will disable it. Default value:'0' (short form\r\n     es)\r\nuseCategoricalSplit=[+|-]\r\n     Enable categorical split or not. (short form cat)\r\nhandleMissingValue=[+|-]\r\n     Enable special handling of missing value or not. Default value:'+' (short\r\n     form hmv)\r\nuseZeroAsMissingValue=[+|-]\r\n     Enable usage of zero (0) as missing value. Default value:'-' (short form\r\n     uzam)\r\nminimumExampleCountPerGroup=<int>\r\n     Minimum number of instances per categorical group. Default value:'100'\r\n     (short form mdpg)\r\nmaximumCategoricalSplitPointCount=<int>\r\n     Max number of categorical thresholds. Default value:'32' (short form\r\n     maxcat)\r\ncategoricalSmoothing=<double>\r\n     Lapalace smooth term in categorical feature spilt. Avoid the bias of small\r\n     categories. Default value:'10'\r\nl2CategoricalRegularization=<double>\r\n     L2 Regularization for categorical split. Default value:'10'\r\nseed=<int>\r\n     Sets the random seed for LightGBM to use.\r\nparallelTrainer=<name>{<options>}\r\n     Parallel LightGBM Learning Algorithm Default value:'Single' (short form\r\n     parag)\r\n@<file>\r\n     Read response file for more options\r\nError log has been saved to '/tmp/TLC/Error_20200826_065457_be780834-d247-476d-bb18-e336a332d1eb.log'. Please refer to https://aka.ms/MLNetIssue if you need assistance._\r\n- **What did you expect?**\r\nCustom gains provided are a list of integers, as suggested in the input. Not clear on what is the expected input pattern here beyond that.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5366","RelatedDescription":"Closed issue \"Issue when providing custom gains to LightGbmRanking\" (#5366)"},{"Id":"687543949","IsPullRequest":false,"CreatedAt":"2020-08-27T21:08:08","Actor":"Youssef1313","Number":"5368","RawContent":null,"Title":"Fix API reference snippets","State":"open","Body":"The API reference repository doesn't have issues turned on, so I think it might be suitable here, especially that the broken snippet references used to exist in this repository, but now they don't (or moved somewhere that I can't find).\r\n\r\nSee https://github.com/dotnet/ml-api-docs/pull/142 for details.\r\n\r\ncc: @luisquintanilla ","Url":"https://github.com/dotnet/machinelearning/issues/5368","RelatedDescription":"Open issue \"Fix API reference snippets\" (#5368)"},{"Id":"687530449","IsPullRequest":false,"CreatedAt":"2020-08-27T20:48:06","Actor":"shivanand870","Number":"5367","RawContent":null,"Title":"Method not found: 'Tensorflow.Tensor Tensorflow.tensorflow.truncated_normal(Int32[], Single, Single, Tensorflow.TF_DataType, System.Nullable`1<Int32>, System.String)'.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version 2019 (eg., dotnet --info)**: \r\n-**.Net Framework 4.8\r\n \r\n### Issue\r\ni am not able to Train a Model using C# with MulticlassClassification.Trainers.ImageClassification iam getting below error message\r\n\r\n- **What did you do?**\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\n  var options = new ImageClassificationTrainer.Options()\r\n            {\r\n                FeatureColumnName = \"Image\",\r\n                LabelColumnName = \"Label\",\r\n\r\n                Arch = ImageClassificationTrainer.Architecture.ResnetV2101,\r\n                Epoch = 50,\r\n                BatchSize = 10,\r\n                LearningRate = 0.01f,\r\n                MetricsCallback = (metrics) => Console.WriteLine(metrics),\r\n                ValidationSet = testDataset,\r\n                 EarlyStoppingCriteria = new ImageClassificationTrainer.EarlyStopping(minDelta: 0.001f, patience: 20, metric: ImageClassificationTrainer.EarlyStoppingMetric.Loss)\r\n            };\r\n \r\n            var pipeline = mlContext.MulticlassClassification.Trainers.ImageClassification(options)\r\n                .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName: \"PredictedLabel\", inputColumnName: \"PredictedLabel\"));\r\n\r\n            var trainedModel = pipeline.Fit(trainDataset);\r\n\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5367","RelatedDescription":"Open issue \"Method not found: 'Tensorflow.Tensor Tensorflow.tensorflow.truncated_normal(Int32[], Single, Single, Tensorflow.TF_DataType, System.Nullable`1<Int32>, System.String)'.\" (#5367)"},{"Id":"684630916","IsPullRequest":false,"CreatedAt":"2020-08-26T17:13:12","Actor":"aforoughi1","Number":"5362","RawContent":null,"Title":"Automl.net version 0.17.1, training a Binary Classification model returns misleading quality metrics","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nThe AutoMl Api, stops after one iteration when training a Binary Classification, and the best run model score is set to 1. Therefore, the quality metric always set to prefect values which are misleading. \r\n\r\n- **What happened?**\r\n\r\n// Deugging the source code, I can see  if model is perfect, break\r\nif (_metricsAgent.IsModelPerfect(suggestedPipelineRunDetail.Score))\r\n{\r\n   break;\r\n}\r\n\r\nsuggestedPipelineRunDetail. The score is always 1\r\n\r\n\r\nTrainer                                            Accuracy      AUC    AUPRC  F1-score  Duration\r\n1    AveragedPerceptronBinary        1.0000   1.0000   1.0000    1.0000       0.5\r\n\r\n- **What did you expect?**\r\n\r\n if you run with ML.Net for the same training dataset:\r\n\r\nAccuracy       AUC            F1-Score       Positive Precision  Positive Recall     Negative Precision  Negative Recall\r\n52.26%         52.86%         0.82%          1.00                0.00                0.52                100.00%\r\n\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5362","RelatedDescription":"Closed issue \"Automl.net version 0.17.1, training a Binary Classification model returns misleading quality metrics\" (#5362)"},{"Id":"686202441","IsPullRequest":false,"CreatedAt":"2020-08-26T10:21:22","Actor":"stulzq","Number":"5365","RawContent":null,"Title":"How to add new train data to exist model.","State":"open","Body":"When my dataset is large, retraining will take a lot of time.Is there any way add new training data to improve the model, not retrain all the data.","Url":"https://github.com/dotnet/machinelearning/issues/5365","RelatedDescription":"Open issue \"How to add new train data to exist model.\" (#5365)"},{"Id":"681774277","IsPullRequest":true,"CreatedAt":"2020-08-25T22:39:02","Actor":"yeeyang19","Number":"5354","RawContent":null,"Title":"Fixes #5352 issues caused by equality with non-string values for root cause localization ","State":"closed","Body":"Fixes #5352 \r\n\r\nComparison between dimension value and aggregated symbol failed or got the incorrect result when their values weren't string. \r\nNeed to support nullable object as the dimension value and aggregated symbol, so we use Object.Equals(a, b) instead of a == b and a.Equals(b).\r\n\r\nBesides, I replace object using Object to align with the data type of dimension and aggregated symbol in this extension.","Url":"https://github.com/dotnet/machinelearning/pull/5354","RelatedDescription":"Closed or merged PR \"Fixes #5352 issues caused by equality with non-string values for root cause localization \" (#5354)"},{"Id":"681434454","IsPullRequest":false,"CreatedAt":"2020-08-25T22:39:02","Actor":"nnoradie","Number":"5352","RawContent":null,"Title":"LocalizeRootCause does not return any root causes when RootCauseLocalizationInput includes dimensions with values of type long","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: .Net 4.8\r\n- **.NET Version (eg., dotnet --info)**: ML.Net 1.5.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI called LocalizeRootCause with a RootCauseLocalizationInput that included an aggregation symbol and dimension values of type long.\r\n\r\n- **What happened?**\r\nI got no root cause results. I get results when the dimension values are strings.\r\n\r\n\r\n- **What did you expect?**\r\nI expected to get some results based on earlier prototypes using this dataset.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\n\r\n**Repro:** [RCARepro.zip](https://github.com/dotnet/machinelearning/files/5093350/RCARepro.zip)\r\n\r\n#### Below I have two different RootCauseLocalizationInputs as json strings\r\n\r\n**Returned no results**\r\n```\r\nprivate static string jsonT =\r\n@\"{\r\n\t\"\"AnomalyTimestamp\"\": \"\"1998-02-02T00:00:00\"\",\r\n\t\"\"AnomalyDimension\"\": {\r\n\t\t\"\"[__Sandbox.Customers.ContactTitle__]\"\": -1\r\n\t},\r\n\t\"\"Slices\"\": [\r\n\t\t{\r\n\t\t\t\"\"TimeStamp\"\": \"\"1998-02-02T00:00:00\"\",\r\n\t\t\t\"\"Points\"\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"\"Value\"\": 16387.5,\r\n\t\t\t\t\t\"\"ExpectedValue\"\": 2187.2416694295504,\r\n\t\t\t\t\t\"\"IsAnomaly\"\": true,\r\n\t\t\t\t\t\"\"Dimension\"\": {\r\n\t\t\t\t\t\t\"\"[__Sandbox.Customers.ContactTitle__]\"\": 54\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"\"Delta\"\": 14200.25833057045\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"\"Value\"\": 723.15,\r\n\t\t\t\t\t\"\"ExpectedValue\"\": 800.1415610472596,\r\n\t\t\t\t\t\"\"IsAnomaly\"\": false,\r\n\t\t\t\t\t\"\"Dimension\"\": {\r\n\t\t\t\t\t\t\"\"[__Sandbox.Customers.ContactTitle__]\"\": 34\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"\"Delta\"\": -76.99156104725967\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"\"Value\"\": 17110.65,\r\n\t\t\t\t\t\"\"ExpectedValue\"\": 2193.535,\r\n\t\t\t\t\t\"\"IsAnomaly\"\": true,\r\n\t\t\t\t\t\"\"Dimension\"\": {\r\n\t\t\t\t\t\t\"\"[__Sandbox.Customers.ContactTitle__]\"\":-1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"\"Delta\"\": 14917.115000000002\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t],\r\n\t\"\"AggregateType\"\": 0,\r\n\t\"\"AggregateSymbol\"\": -1\r\n}\";\r\n```\r\n\r\n\r\n**Returned results**\r\n```\r\nprivate static string jsonString =\r\n\r\n@\"{\r\n\t\"\"AnomalyTimestamp\"\": \"\"1998-02-02T00:00:00\"\",\r\n\t\"\"AnomalyDimension\"\": {\r\n\t\t\"\"[__Sandbox.Customers.ContactTitle__]\"\": \"\"-1\"\"\r\n\t},\r\n\t\"\"Slices\"\": [\r\n\t\t{\r\n\t\t\t\"\"TimeStamp\"\": \"\"1998-02-02T00:00:00\"\",\r\n\t\t\t\"\"Points\"\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"\"Value\"\": 16387.5,\r\n\t\t\t\t\t\"\"ExpectedValue\"\": 2187.2416694295504,\r\n\t\t\t\t\t\"\"IsAnomaly\"\": true,\r\n\t\t\t\t\t\"\"Dimension\"\": {\r\n\t\t\t\t\t\t\"\"[__Sandbox.Customers.ContactTitle__]\"\": \"\"54\"\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"\"Delta\"\": 14200.25833057045\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"\"Value\"\": 723.15,\r\n\t\t\t\t\t\"\"ExpectedValue\"\": 800.1415610472596,\r\n\t\t\t\t\t\"\"IsAnomaly\"\": false,\r\n\t\t\t\t\t\"\"Dimension\"\": {\r\n\t\t\t\t\t\t\"\"[__Sandbox.Customers.ContactTitle__]\"\": \"\"34\"\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"\"Delta\"\": -76.99156104725967\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"\"Value\"\": 17110.65,\r\n\t\t\t\t\t\"\"ExpectedValue\"\": 2193.535,\r\n\t\t\t\t\t\"\"IsAnomaly\"\": true,\r\n\t\t\t\t\t\"\"Dimension\"\": {\r\n\t\t\t\t\t\t\"\"[__Sandbox.Customers.ContactTitle__]\"\":\"\"-1\"\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"\"Delta\"\": 14917.115000000002\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t],\r\n\t\"\"AggregateType\"\": 0,\r\n\t\"\"AggregateSymbol\"\": \"\"-1\"\"\r\n}\";\r\n\r\n```\r\n```\r\n        static void Main(string[] args)\r\n        {\r\n            var mlContext = new MLContext(0);\r\n\r\n            var rcaInputString = JsonConvert.DeserializeObject<RootCauseLocalizationInput>(jsonString);\r\n            var rcaInputLong = JsonConvert.DeserializeObject<RootCauseLocalizationInput>(jsonLong);\r\n\r\n            // one root cause item returned\r\n            var rcaString = mlContext.AnomalyDetection.LocalizeRootCause(rcaInputString).Items.OrderByDescending(e => e.Score).ToList();\r\n\r\n            // no root cause items returned\r\n            var rcaLong = mlContext.AnomalyDetection.LocalizeRootCause(rcaInputLong).Items.OrderByDescending(e => e.Score).ToList();\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5352","RelatedDescription":"Closed issue \"LocalizeRootCause does not return any root causes when RootCauseLocalizationInput includes dimensions with values of type long\" (#5352)"},{"Id":"684106075","IsPullRequest":false,"CreatedAt":"2020-08-25T22:19:12","Actor":"praveenraghuvanshi","Number":"5361","RawContent":null,"Title":"Second time prediction using PredictionEngine in ML.Net throws SEHException in Azure Function deployed to Cloud. Works fine locally.","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 64 bit\r\n- **.NET Version (eg., dotnet --info)**: \r\nC:\\Users\\praghuvanshi>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.401\r\n Commit:    5b6f5e5005\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19041\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.7\r\n  Commit:  fcfdef8d6b\r\n\r\n.NET Core SDKs installed:\r\n  3.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nI am working on a sample image classification problem of classifying dog and cat. I have used AutoML for Image Classification with 10 images each of cat and dog and generated the model(MLModel.zip~93MB) and c# code. ... I have been successful in loading the model in a function app locally and it works flawlessly giving the predictions properly. Source code attached.\r\n\r\nSteps: \r\n- Create Image Classification project using AutoML-Model Builder\r\n- Generate Model(MLModel.zip) and C# Code\r\n- Use MLModel.zip in Azure function\r\n- Run it locally - Works fine\r\n- Publish to Azure Function(Cloud) - Function App(Windows)\r\n- 'tensorflow' DllNotFound exception is thrown\r\n- Change 'Deployment Mode' to 'Self-Contained' and Target Runtime to 'win-x64'. Also change Platform Settings from 32-bit to 64-bit in Azure Function setting in portal.\r\n- Hit API from REST Client(Postman) : Classification is done successfuly\r\n- Hit API second time or consecutively - SSHException is thrown at PredictionEngine.Predict() method.\r\n\r\n**What happened?**\r\n- Deploying the same function over Azure Function(Cloud) gave DllNotFound exception for tensorflow dll during loading of the model. \r\n- Referred https://developers.de/2019/10/25/hosting-ml-net-in-appservice/ and changed Target Runtime to x64. Tensorflow dll not found error disappeared. \r\n- Hit Function API through Postman first time after above change and it was successful with proper prediction.\r\n- However, when API is hit second or consecutively, SSHException is thrown during prediction using PredictionEngine. \r\n\r\n**What did you expect?**\r\n- No exception at predictionEngine.Predict() while executing in Azure Function(cloud)\r\n- A similar issue reported over SO https://stackoverflow.com/questions/62947625/ml-net-tensorflow-image-clasification-crashes-with-sehexception-when-run-in-azur but there is no solution yet.\r\n- References\r\n - https://github.com/SciSharp/TensorFlow.NET/issues/485\r\n- https://github.com/dotnet/machinelearning/issues/4112\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\n**Source Code:** Attached zip file : src.zip\r\n**Azure Function Project:** TestImageClassificationFunctionApp\r\n**Steps, call stack, snippets, logs:** ./testimageclassification/**Readme.md**\r\n**Diagnostic logs:** ./testimageclassification/diagnosis/\r\n\r\n**Exception:** System.Runtime.InteropServices.SEHException\r\n**FailedMethod:** Tensorflow.c_api.TF_SessionRun\r\n\r\n```powershell\r\nSystem.Runtime.InteropServices.SEHException:\r\n   at Tensorflow.c_api.TF_SessionRun (TensorFlow.NET, Version=0.11.8.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils+Runner.Run (Microsoft.ML.TensorFlow, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Vision.ImageClassificationModelParameters+Classifier.Score (Microsoft.ML.Vision, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Vision.ImageClassificationModelParameters+<>c__DisplayClass22_0`2.<Microsoft.ML.Data.IValueMapper.GetMapper>b__0 (Microsoft.ML.Vision, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Data.PredictedLabelScorerBase.EnsureCachedPosition (Microsoft.ML.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Data.MulticlassClassificationScorer+<>c__DisplayClass16_0.<GetPredictedLabelGetter>b__0 (Microsoft.ML.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Transforms.KeyToValueMappingTransformer+Mapper+KeyToValueMap`2+<>c__DisplayClass8_0.<GetMappingGetter>b__0 (Microsoft.ML.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Data.TypedCursorable`1+TypedRowBase+<>c__DisplayClass9_0`2.<CreateConvertingActionSetter>b__0 (Microsoft.ML.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Data.TypedCursorable`1+TypedRowBase.FillValues (Microsoft.ML.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at TestImageClassificationFunctionApp.ClassifyImage+<Run>d__0.MoveNext (TestImageClassificationFunctionApp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null)\r\n```\r\n\r\n**Azure Function *.csproj **\r\n```poweshell\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n    <AzureFunctionsVersion>v3</AzureFunctionsVersion>\r\n    <UserSecretsId>xxxxx-xxxx-xxxxx-xxxxxx</UserSecretsId>\r\n    <Platforms>AnyCPU;x64</Platforms>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Azure.Storage.Blobs\" Version=\"12.5.1\" />\r\n    <PackageReference Include=\"Microsoft.Azure.WebJobs.Extensions.Storage\" Version=\"3.0.10\" />\r\n    <PackageReference Include=\"Microsoft.ML\" Version=\"1.5.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.ImageAnalytics\" Version=\"1.5.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.Vision\" Version=\"1.5.1\" />\r\n    <PackageReference Include=\"Microsoft.NET.Sdk.Functions\" Version=\"3.0.7\" />\r\n    <PackageReference Include=\"SciSharp.TensorFlow.Redist\" Version=\"2.1.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <None Update=\"host.json\">\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n    <None Update=\"local.settings.json\">\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n      <CopyToPublishDirectory>Never</CopyToPublishDirectory>\r\n    </None>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nLet me know in case any more information is required.\r\n\r\n[src.zip](https://github.com/dotnet/machinelearning/files/5113449/src.zip)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5361","RelatedDescription":"Closed issue \"Second time prediction using PredictionEngine in ML.Net throws SEHException in Azure Function deployed to Cloud. Works fine locally.\" (#5361)"},{"Id":"684003763","IsPullRequest":false,"CreatedAt":"2020-08-25T16:49:20","Actor":"galeese","Number":"5360","RawContent":null,"Title":"How to load python-trained LGB model file into  LightGbmBinaryTrainer  object, and use the trained model inside c#?","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 \r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI've trained a LGB-model from the python  lightgbm package.\r\n\r\n- **What happened?**\r\nI've obtained:\r\n  model-file -  \"model.txt\"\r\n  file of model-parameters:  \"predict.conf\" \r\n- **What did you expect?**\r\nI expect to somehow to create a LightGbmBinaryTrainer  object   based on the two files:\r\n   \"model.txt\" and \"predict.conf\" \r\n\r\nI don't want to run \"./lightgbm\"  config=predict.conf from c# each time in order to obtain the new prediciton inside the *.txt file.\r\nI want to apply the created model inside the c# environment and get the prediction inside the c# and not to load it from the txt file.\r\n### Source code / logs\r\n\r\nThe contents of the \"model.txt\":\r\ntree\r\nversion=v3\r\nnum_class=1\r\nnum_tree_per_iteration=1\r\nlabel_index=0\r\nmax_feature_idx=10307\r\nobjective=binary sigmoid:1\r\nfeature_names=Column_0 Column_1 Column_2 Column_3 Column_4\r\n\r\nThe contents of the \"predict.conf\" \r\ntask = predict \r\n\r\ndata = sharp_preds_string.csv\r\n\r\ninput_model =model.txt\r\n\r\noutput_result=  LightGBM_predict_result.txt\r\n\r\n\r\n\r\n\r\n\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5360","RelatedDescription":"Closed issue \"How to load python-trained LGB model file into  LightGbmBinaryTrainer  object, and use the trained model inside c#?\" (#5360)"},{"Id":"683978432","IsPullRequest":false,"CreatedAt":"2020-08-25T16:48:06","Actor":"asheesh1996","Number":"5359","RawContent":null,"Title":"How to feed frames from live video to a trained ONNX model","State":"closed","Body":"using System.Drawing classes I am able to read a .MP4 file and receive frames from it and store them as Bitmap,\r\nthis process is happening on a separate thread, simultaneously on another thread I want to feed this Bitmap data to my loaded pretrained .onnx model.\r\nI am not able to find any documentation or support on how to achieve this.\r\n\r\nAny suggestions will be helpful, thanks in advance","Url":"https://github.com/dotnet/machinelearning/issues/5359","RelatedDescription":"Closed issue \"How to feed frames from live video to a trained ONNX model\" (#5359)"},{"Id":"685321623","IsPullRequest":false,"CreatedAt":"2020-08-25T09:21:42","Actor":"crazyoutlook","Number":"5364","RawContent":null,"Title":"ML.Net - The first dimension of paddings must be the rank of inputs[4,2] [1,1,320,320,3]","State":"open","Body":"System information\r\nOS version/distro: Windows 10 Pro\r\n.NET Version (eg., dotnet --info): dotnet framework 4.7\r\nIssue :\r\nWe are working on how to consume the tensorflow model in .Net using ML.NET. We are using below tutorial as reference :\r\n\r\nTutorial Link : https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/image-classification\r\n\r\nWe tested with model that is used in the Tutorial and it worked fine. But, when we replace tutorial model with our tensorflow model (object detection model which we have exported from Azure Custom Vision), it is throwing an Exception saying -TensorflowException: The first dimension of paddings must be the rank of inputs[4,2] [1,1,320,320,3] [[{{node conv1/pad_size}}]]\r\nThe same custom vision model works fine when consumed in Python code.\r\n\r\nSource code / logs\r\nDetails:\r\n\r\nProject Name : TransferLearningTF\r\nClass name : program.cs\r\nMethod Name : GenerateModel\r\n\r\nCode :\r\n\r\n  IEstimator<ITransformer> pipeline = mlContext.Transforms.LoadImages(outputColumnName: \"image_tensor\", imageFolder: _imagesFolder, inputColumnName: nameof(ImageData.ImagePath))\r\n                .Append(mlContext.Transforms.ResizeImages(outputColumnName: \"image_tensor\", imageWidth: InceptionSettings.ImageWidth, imageHeight: InceptionSettings.ImageHeight, inputColumnName: \"image_tensor\"))\r\n                .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"image_tensor\"))\r\n                .Append(mlContext.Model.LoadTensorFlowModel(_inceptionTensorFlowModel)\r\n                .ScoreTensorFlowModel(outputColumnNames: new[] { \"detected_boxes\", \"detected_scores\", \"detected_classes\" }, inputColumnNames: new[] { \"image_tensor\" }, addBatchDimensionInput: true))            \r\n                .AppendCacheCheckpoint(mlContext);\r\n\t\t\t\t\r\n\t\t\tIDataView trainingData = mlContext.Data.LoadFromTextFile<ImageData>(path: _trainTagsTsv, hasHeader: false);\r\n            ITransformer model = pipeline.Fit(trainingData);\r\n            IDataView testData = mlContext.Data.LoadFromTextFile<ImageData>(path: _testTagsTsv, hasHeader: false);\r\n            IDataView predictions = model.Transform(testData);\r\n            IEnumerable<ImagePrediction> imagePredictionData = mlContext.Data.CreateEnumerable<ImagePrediction>(predictions, true);\r\n\r\nException Details :\r\n\r\nTensorflowException: The first dimension of paddings must be the rank of inputs[4,2] [1,1,320,320,3]\r\n                [[{{node conv1/pad_size}}]]\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5364","RelatedDescription":"Open issue \"ML.Net - The first dimension of paddings must be the rank of inputs[4,2] [1,1,320,320,3]\" (#5364)"},{"Id":"683795650","IsPullRequest":false,"CreatedAt":"2020-08-24T20:40:45","Actor":"wmundstock","Number":"5357","RawContent":null,"Title":"ML.NET 1.0.0.0 cannont read component 'HashTransform' of the model, because the model is too new.","State":"closed","Body":"### System information\r\n\r\n- **OS:** Windows 10\r\n- **Microsoft.Net Framework:** 4.7.2 \r\n- **Model Builder:** 16.1.1.2041102\r\n- **Visual Studio:** 16.6.3\r\n- **ML.NET (Nuget packages installed):** tried 1.5.1 and 1.5.0\r\n\r\n### Issue\r\n\r\n- I have a **working** ML.Net app built with .Net framework 4.7, that consumes a model generated with Model Builder. It was working really well until I generated a new model file with an extra \"feature\". \r\n1. Re-Trained ML.NET model.\r\n2. Generated the Model file and Input/output classes\r\n3. Copied the ModelInput, ModelOutput and ModelConsume code to my application. \r\n4. Build and run.\r\n\r\n- When I try to load the model it throws an exception **\"ML.NET 1.0.0.0 cannont read component 'HashTransform' of the model, because the model is too new.\"**. Refer to exception details below.\r\n\r\n**Note** that the *cannont* is not my typo, thats how the message shows.\r\n\r\n- Given that I updated the model files and the code files required it should work well. If I change the model file and load the old zip model it works well.\r\n\r\n### Source code / logs\r\n\r\n`ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var modelInputSchema);`\r\n\r\nThe line above throws the following exception:\r\n\r\n**Message:** Cause: ML.NET 1.0.0.0 cannont read component 'HashTransform' of the model, because the model is too new.\r\nSuggestion: Make sure the model is trained with ML.NET 1.0.0.0 or older.\r\nDebug details: Maximum expected version 65540, got 65538.\r\n**Source:** Microsoft.ML.Core\r\n**Stack trace:**    at Microsoft.ML.ModelHeader.CheckVersionInfo(ModelHeader& header, VersionInfo ver)\r\n   at Microsoft.ML.ModelLoadContext.CheckAtModel(VersionInfo ver)\r\n   at Microsoft.ML.Transforms.HashingTransformer.Create(IHostEnvironment env, ModelLoadContext ctx)\r\n\r\n### Notes\r\nI really don't know what could have changed. Maybe Model builder auto updated (auto update is enabled on this extension)??? I really did not change anything related to ML.Net versions.\r\n\r\nThings I already tried:\r\n- Changed version of the nuget package for ML.Net (1.5.1 and 1.5.0) - no luck.\r\n- Reinstalled model builder - no luck.\r\n- Re-trained the same model (without the extra feature/column) - No luck.\r\n- If I run the console app that is generated when I click generate code, that app is able to run. I suspect its because its .Net Core 3.1.\r\n\r\nThank you!","Url":"https://github.com/dotnet/machinelearning/issues/5357","RelatedDescription":"Closed issue \"ML.NET 1.0.0.0 cannont read component 'HashTransform' of the model, because the model is too new.\" (#5357)"},{"Id":"684936195","IsPullRequest":true,"CreatedAt":"2020-08-24T20:13:49","Actor":"frank-dong-ms","Number":"5363","RawContent":null,"Title":"add test for model not reload issue","State":"open","Body":"add unit test for #5351 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5363","RelatedDescription":"Open PR \"add test for model not reload issue\" (#5363)"},{"Id":"683903102","IsPullRequest":false,"CreatedAt":"2020-08-22T01:40:27","Actor":"boyedarat","Number":"5358","RawContent":null,"Title":"Support for FHE and SMPC","State":"open","Body":"Are there any plans or support for the following?\r\n\r\n- Full Homomorphic Encryption (FHE)\r\n- Secure Multi Party Computing (SMPC)\r\n\r\nThere seemed to have been some effort on FHE in the past, but unsuccessful:\r\n[SEAL Homomorphic Encryption support](https://github.com/dotnet/machinelearning/pull/4407)\r\n[WIP: Homomorphic encryption](https://github.com/dotnet/machinelearning/pull/4229)\r\n\r\nWith the above becoming popular in other ML frameworks (PySyft, Azure Encrypted Inference, XayNet, etc), it would be good to look into the above areas again. There doesn't seem to be anything similar for .Net (C# or F# for that matter).","Url":"https://github.com/dotnet/machinelearning/issues/5358","RelatedDescription":"Open issue \"Support for FHE and SMPC\" (#5358)"},{"Id":"682990322","IsPullRequest":false,"CreatedAt":"2020-08-21T20:52:57","Actor":"philiplai","Number":"5356","RawContent":null,"Title":"The first example is misleading.","State":"closed","Body":"This line of code is simply not working.\r\nvar linearPredictor = model.LastTransformer;\r\nThere is no LastTransformer property. \r\n\r\nCan someone post a working example?\r\n\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 5ec45442-8e5f-a544-cc9a-58483a383513\r\n* Version Independent ID: 040169f9-d169-cbbd-099e-f04a7a5a6b3f\r\n* Content: [PermutationFeatureImportanceExtensions.PermutationFeatureImportance Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet#Microsoft_ML_PermutationFeatureImportanceExtensions_PermutationFeatureImportance__1_Microsoft_ML_BinaryClassificationCatalog_Microsoft_ML_ISingleFeaturePredictionTransformer___0__Microsoft_ML_IDataView_System_String_System_Boolean_System_Nullable_System_Int32__System_Int32_)\r\n* Content Source: [dotnet/xml/Microsoft.ML/PermutationFeatureImportanceExtensions.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/PermutationFeatureImportanceExtensions.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/5356","RelatedDescription":"Closed issue \"The first example is misleading.\" (#5356)"},{"Id":"679633476","IsPullRequest":false,"CreatedAt":"2020-08-21T00:47:39","Actor":"alexandermujirishvili","Number":"5350","RawContent":null,"Title":"ML Model is not reloaded if prediction was made before","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:  Windows 10 Pro, version 2004, OS Build: 19041.450\r\n- **.NET Version (eg., dotnet --info)**: 3.1.302\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\n     After new record is available, I add it to training data and retrain model.\r\n\r\n- **What happened?**\r\n\r\n     New model was generated, but not reloaded in app.\r\n\r\n- **What did you expect?**\r\n\r\n     Reloaded model and better (expected) prediction\r\n\r\n### Source code / logs\r\n\r\nI use this code to add prediction engine pool:\r\n\r\n```\r\nservices.AddPredictionEnginePool<SentimentData, SentimentPrediction>()\r\n                  .FromFile(\r\n                  modelName: Constants.ModelName,\r\n                  filePath: Constants.ModelFileName,\r\n                  watchForChanges: true);\r\n```\r\n![image](https://user-images.githubusercontent.com/46314872/90320515-140e9100-df53-11ea-8392-f1f66364887b.png)\r\n\r\nSample project: https://github.com/alexandermujirishvili/DotnetMLWatchForChanges\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5350","RelatedDescription":"Closed issue \"ML Model is not reloaded if prediction was made before\" (#5350)"},{"Id":"682406193","IsPullRequest":false,"CreatedAt":"2020-08-20T04:44:04","Actor":"thicktao","Number":"5355","RawContent":null,"Title":"how to retrain the image classify model incrementally?","State":"open","Body":"\r\n### System information\r\n- **OS version/distro**:Windows 10 Enterprise\r\n- **.NET Version (eg., dotnet --info)**: .netcore 3.1 console\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI want to retrain the image classify model incrementally\r\n- **What happened?**\r\nwhen i predict it  after my second training, it report an error,as below\r\n\r\n![error](https://user-images.githubusercontent.com/40555417/90717625-9942ce80-e2e2-11ea-9ab1-25084386f459.png)\r\n\r\n- **What did you expect?**\r\nafter my retraining model ,it can works well\r\n\r\n### Source code / logs\r\n```csharp\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Drawing;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Trainers;\r\nnamespace Test\r\n{\r\n  public class ContinueGraphTrainingTest\r\n    {\r\n        private static readonly string PrePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"train\");\r\n        private static readonly string TrainModelPath2 = Path.Combine(PrePath, \"data2.zip\");\r\n        private static readonly string PreDataPath = Path.Combine(PrePath, \"preData.zip\");\r\n        private static readonly string DataModelPath = Path.Combine(PrePath, \"data.zip\");\r\n        private static readonly string InceptionPb = Path.Combine(PrePath, \"tensorflow_inception_graph.pb\");\r\n        private static readonly string FirstScanDir = Path.Combine(PrePath, \"TrainImage1\");\r\n        private static readonly string SecondScanDir = Path.Combine(PrePath, \"TrainImage2\");\r\n        private static readonly string PredictImgs = Path.Combine(PrePath, \"PredictImgs/111.png\");\r\n        private static readonly MLContext MlContext = new MLContext(1);\r\n\r\n        public static void SaveRetrainModel()\r\n        {\r\n\r\n            List<ImageData> list1 = new List<ImageData>();\r\n            ScanPic(list1, FirstScanDir);\r\n            var fulldata1 = MlContext.Data.LoadFromEnumerable(list1);\r\n            var trainTestData1 = MlContext.Data.TrainTestSplit(fulldata1);\r\n            var trainingDataView1 = trainTestData1.TrainSet;\r\n\r\n            var pipeline = MlContext.Transforms.Conversion.MapValueToKey(\"Label\")\r\n                .Append(MlContext.Transforms.ResizeImages(outputColumnName: \"input\", imageWidth: ImageSettings.ImageWidth, imageHeight: ImageSettings.ImageHeight, inputColumnName: \"Image\"))\r\n                .Append(MlContext.Transforms.ExtractPixels(outputColumnName: \"input\", interleavePixelColors: ImageSettings.ChannelsLast, offsetImage: ImageSettings.Mean))\r\n                .Append(MlContext.Model.LoadTensorFlowModel(InceptionPb).ScoreTensorFlowModel(outputColumnNames: new[] { \"softmax2_pre_activation\" }, inputColumnNames: new[] { \"input\" }, addBatchDimensionInput: true))\r\n                .AppendCacheCheckpoint(MlContext);\r\n\r\n            var trainingPipeline = pipeline.Append(MlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(labelColumnName: \"Label\", featureColumnName: \"softmax2_pre_activation\"));\r\n\r\n            var dataPiple = trainingPipeline.Append(MlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabelValue\", \"PredictedLabel\"));\r\n\r\n            var preDataTransform = trainingPipeline.Fit(trainingDataView1);\r\n            MlContext.Model.Save(preDataTransform, trainingDataView1.Schema, PreDataPath);\r\n\r\n            ITransformer dataTransform = dataPiple.Fit(trainingDataView1);\r\n            MlContext.Model.Save(dataTransform, trainingDataView1.Schema, DataModelPath);\r\n\r\n            PredictScore();\r\n\r\n        }\r\n\r\n        public static void SecondTrainAndPredit()\r\n        {\r\n            var list2 = new List<ImageData>();\r\n            ScanPic(list2, SecondScanDir);\r\n            var fulldata2 = MlContext.Data.LoadFromEnumerable(list2);\r\n            var trainTestData2 = MlContext.Data.TrainTestSplit(fulldata2);\r\n            var trainingDataView2 = trainTestData2.TrainSet;\r\n\r\n\r\n            var preDataModel = MlContext.Model.Load(PreDataPath, out DataViewSchema modelInputSchema2);\r\n            var originalModelParameters = (preDataModel as TransformerChain<ITransformer>)?.LastTransformer as MulticlassPredictionTransformer<MaximumEntropyModelParameters>;\r\n\r\n            ITransformer dataPrepPipeline = MlContext.Model.Load(DataModelPath, out var dataPrepPipelineSchema);\r\n            IDataView newDataForm = dataPrepPipeline.Transform(trainingDataView2);\r\n            var _keyToValueModel = MlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(labelColumnName: \"Label\", featureColumnName: \"softmax2_pre_activation\").Fit(newDataForm, originalModelParameters.Model);\r\n\r\n            MlContext.Model.Save(_keyToValueModel, trainingDataView2.Schema, TrainModelPath2);\r\n\r\n            PredictScore(TrainModelPath2);\r\n        }\r\n\r\n        public static void PredictScore(string dataModelPath = \"\")\r\n        {\r\n            if (string.IsNullOrEmpty(dataModelPath))\r\n            {\r\n                dataModelPath = DataModelPath;\r\n            }\r\n            var loadedModel = MlContext.Model.Load(dataModelPath, out var modelInputSchema);\r\n            var predictor = MlContext.Model.CreatePredictionEngine<ImageData, ImagePrediction>(loadedModel);\r\n            var imageData = new ImageData() { Image = (Bitmap)Image.FromFile(PredictImgs) };\r\n            var result = predictor.Predict(imageData);\r\n            Console.WriteLine(result.Score.Max());\r\n        }\r\n\r\n        private static void ScanPic(List<ImageData> list, string directory)\r\n        {\r\n            var files = Directory.GetFiles(directory, \"*.*\", SearchOption.AllDirectories);\r\n            StringBuilder imgTags = new StringBuilder();\r\n            foreach (var filePath in files)\r\n            {\r\n                if (!filePath.EndsWith(\".jpg\") && !filePath.EndsWith(\".png\"))\r\n                {\r\n                    continue;\r\n                }\r\n                var deviceModel = Directory.GetParent(filePath).Name;\r\n                string imgPath = $\"{deviceModel}/{Path.GetFileName(filePath)}\";\r\n                imgTags.AppendLine($\"{imgPath}\\t{deviceModel}\");\r\n                list.Add(new ImageData()\r\n                {\r\n\r\n\r\n\r\n                    Label = deviceModel,\r\n                    Image = (Bitmap)Image.FromFile(filePath)\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\npublic class ImagePrediction\r\n    {\r\n        public float[] Score;\r\n\r\n        public string PredictedLabelValue;\r\n    }\r\n\r\n public class ImageData\r\n    {\r\n        //[LoadColumn(0)]\r\n        //public string ImagePath;\r\n        [ImageType(227, 227)]\r\n        [LoadColumn(0)]\r\n        public Bitmap Image;\r\n\r\n        [LoadColumn(1)]\r\n        public string Label;\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n[train.zip](https://github.com/dotnet/machinelearning/files/5100711/train.zip)\r\n\r\nand file \"tensorflow_inception_graph.pb\" is too big to upload\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5355","RelatedDescription":"Open issue \"how to retrain the image classify model incrementally?\" (#5355)"},{"Id":"681653494","IsPullRequest":false,"CreatedAt":"2020-08-19T22:24:35","Actor":"LiQIjie","Number":"5353","RawContent":null,"Title":"Is recognition supported on .NET Framework？","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:Windows\r\n- **.NET Version (eg., dotnet --info)**: .NET Framework 4.7.2\r\n\r\n### Issue\r\n\r\n- **I am new to ML.NET. I noted ML.NET can run on .NET Framework and I curious about if recognition also be supported on .NET Framework or not?**\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5353","RelatedDescription":"Closed issue \"Is recognition supported on .NET Framework？\" (#5353)"},{"Id":"678030394","IsPullRequest":true,"CreatedAt":"2020-08-19T17:15:21","Actor":"LittleLittleCloud","Number":"5345","RawContent":null,"Title":"AutoML.Net filter infinity value when calculate average score","State":"closed","Body":"### Fix issue:\r\n- #5339 \r\n\r\nThis pr fixes #5339 by filtering out the infinity value when [calculating average scores](https://github.com/dotnet/machinelearning/blob/9d3e5452096ac61baf9d2a7ead5a963865fca7d5/src/Microsoft.ML.AutoML/Experiment/Runners/CrossValSummaryRunner.cs#L155) from the results of cross validation runner, so that the average score won't be infinity value in any situation, so that the return value of [GetIndexCloestToAverage](https://github.com/dotnet/machinelearning/blob/37af3f9db86414f4ec5b16a8734c90b498946caa/src/Microsoft.ML.AutoML/Experiment/Runners/CrossValSummaryRunner.cs#L84) will not be -1.\r\n\r\nIn rare case, when all the scores from cross-validation run are infinitive, the average score will be designated to nan. and the return value of [GetIndexCloestToAverage](https://github.com/dotnet/machinelearning/blob/37af3f9db86414f4ec5b16a8734c90b498946caa/src/Microsoft.ML.AutoML/Experiment/Runners/CrossValSummaryRunner.cs#L84) will be 0\r\n\r\nNoted: the +/- infinite value is filtered before calculating average score because of the same reason nan value is filtered. By doing that the evaluation for cross-validation runner might be better than the real situation.","Url":"https://github.com/dotnet/machinelearning/pull/5345","RelatedDescription":"Closed or merged PR \"AutoML.Net filter infinity value when calculate average score\" (#5345)"},{"Id":"674625047","IsPullRequest":false,"CreatedAt":"2020-08-19T17:15:21","Actor":"LittleLittleCloud","Number":"5339","RawContent":null,"Title":"AutoML.Net: CrossValSummaryRunner can't handle all-infinity metrics value.","State":"closed","Body":"CrossValSummaryRunner picks up the best model and score from cross validation in the following logic:\r\n- get results from all validation runs\r\n- if all run succeed, get the index of model with best score as return model, if all run's score is NaN or Infinity, uses the first model\r\n- if all run succeed, get the score which is closest to the average score as return training score, if average score is NaN, use the first score (**BUG**)\r\n\r\nThe possible place that causes the bug is sometimes the average score can be Infinity, in which case the following function will return -1 and causes an index out of error exception\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/37af3f9db86414f4ec5b16a8734c90b498946caa/src/Microsoft.ML.AutoML/Experiment/Runners/CrossValSummaryRunner.cs#L84\r\n\r\n### Related issue\r\n(The label column for this user's dataset is all empty, which is the root cause for this error) \r\n- https://github.com/dotnet/machinelearning-modelbuilder/issues/929","Url":"https://github.com/dotnet/machinelearning/issues/5339","RelatedDescription":"Closed issue \"AutoML.Net: CrossValSummaryRunner can't handle all-infinity metrics value.\" (#5339)"},{"Id":"680609239","IsPullRequest":true,"CreatedAt":"2020-08-18T17:53:50","Actor":"frank-dong-ms","Number":"5351","RawContent":null,"Title":"fix issue 5350, check file lock before reload model","State":"closed","Body":"fix issue #5350 \r\n\r\nThe issue here is we use a file system watcher to watch model file change and reload the new model file automatically. The problem here is when we try to load the new model file this file is still locked thus cause the reload to fail. \r\nPreviously we are wait for 50 milliseconds before reload the new model file but that fails to work sometimes so here change the strategy to consistently check whether the file can be reload every 50 milliseconds for at most 100 times (which is roughly at total 5 seconds). If we still can't reload new model file after 5 seconds, throw IOException.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5351","RelatedDescription":"Closed or merged PR \"fix issue 5350, check file lock before reload model\" (#5351)"},{"Id":"679507967","IsPullRequest":true,"CreatedAt":"2020-08-17T19:00:11","Actor":"antoniovs1029","Number":"5349","RawContent":null,"Title":"Throw when PCA generates invalid eigenvectors","State":"closed","Body":"Fixes https://github.com/microsoft/NimbusML/issues/497\r\n\r\nAs discussed there, the problem is that when PCA generates eigenvectors with NaN values, a cryptic exception is thrown on NimbusML during prediction and not during training. It's thrown during prediction because to do prediction NimbusML saves the model to disk and loads it back, and during deserialization there's a check that prevents loading eigenvectors that contain NaNs.\r\n\r\nIn this PR I'm adding an exception to the constructor of PcaModelParameters so that a more readable exception is thrown during training of either NimbusML or ML.NET, so there's no need to wait until prediction for NimbusML to throw it.","Url":"https://github.com/dotnet/machinelearning/pull/5349","RelatedDescription":"Closed or merged PR \"Throw when PCA generates invalid eigenvectors\" (#5349)"},{"Id":"679109446","IsPullRequest":false,"CreatedAt":"2020-08-17T18:05:52","Actor":"ladodc","Number":"5346","RawContent":null,"Title":"ML.Net CustomMapping with ONNX Model","State":"closed","Body":"### System information\r\n\r\n- **Win10\r\n- ** .Net Core 3.1 \r\n\r\n### Issue\r\n\r\nI do not know how to define output_column with sequence in CustomMapping.\r\n![Output_ONNX](https://user-images.githubusercontent.com/10833738/90246362-ca2f8900-de34-11ea-8f76-25b6c1f09414.PNG)\r\nFor output_label  it is simple Int64[] . But for output_probabilities I have no idea.\r\nI have tried in my InputClass \r\n`IEnumerable<IDictionary<Int64, float>> output_probability { get; set; } `\r\nor\r\n`OnnxSequenceType output_probability { get; set; } `\r\n\r\nBut witout success. \r\n\r\nHier ist fully functional sample. With dataset and onnx model.\r\n[TestCustomMapping.zip](https://github.com/dotnet/machinelearning/files/5074415/TestCustomMapping.zip)\r\nOr here is code :\r\n\r\n### Source code\r\n\r\n`using Microsoft.ML;\r\nusing Microsoft.ML.Transforms.Onnx;\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace TestCustomMapping\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var mlContext = new MLContext();\r\n\r\n            var data = new List<InputDataLinear>() { new InputDataLinear() { day = 3, hour = 4, temperature = 15.4F, vibration = 5.6F, name = \"Machine 1\", worker = \"Hans\", Fehler = true } };\r\n            var dataView = mlContext.Data.LoadFromEnumerable<InputDataLinear>(data);\r\n\r\n            // Define the operation code.\r\n            Action<InputRow, OutputRow> mapping = (input, output) => {                \r\n                output.PredictedLabelSingle = input.output_label[0];\r\n                output.ProbabilitySingle = 0/*input.output_probability*/;\r\n            };\r\n\r\n            var pipeline = mlContext.Transforms.ApplyOnnxModel(modelFile: @\"../../../Model/model2.onnx\", inputColumnNames: new string[] { \"day\", \"hour\", \"name\", \"worker\", \"temperature\", \"vibration\" },\r\n                    outputColumnNames: new[] { \"output_label\", \"output_probability\"});\r\n\r\n            IDataView predictions = pipeline.Fit(dataView).Transform(dataView);\r\n\r\n            IDataView predictions2 = mlContext.Transforms.CustomMapping(mapping, null).Fit(predictions).Transform(predictions);\r\n   \r\n            var metrics = mlContext.BinaryClassification.Evaluate(predictions2, labelColumnName: \"Fehler\", scoreColumnName: \"ScoreSingle\", probabilityColumnName: \"ProbabilitySingle\", predictedLabelColumnName: \"PredictedLabelSingle\");            \r\n        }\r\n    }\r\n\r\n    public class InputRow\r\n    {\r\n        //public IEnumerable<IDictionary<Int64, float>> output_probability { get; set; }\r\n        public IEnumerable<IDictionary<Int64, float>> output_probability { get; set; }\r\n\r\n        public Int64[] output_label { get; set; }\r\n\r\n    }\r\n\r\n    public class OutputRow\r\n    {\r\n        public float ScoreSingle { get; set; }\r\n\r\n        public float ProbabilitySingle { get; set; }\r\n\r\n        public bool PredictedLabelSingle { get; set; }\r\n\r\n    }\r\n\r\n    class InputDataLinear \r\n    {\r\n        public float day { get; set; }\r\n\r\n        public float hour { get; set; }\r\n\r\n        public float temperature { get; set; }\r\n\r\n        public float vibration { get; set; }\r\n\r\n        public string name { get; set; }\r\n\r\n        public string worker { get; set; }\r\n\r\n        public bool Fehler { get; set; }\r\n\r\n    }\r\n}\r\n`\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5346","RelatedDescription":"Closed issue \"ML.Net CustomMapping with ONNX Model\" (#5346)"},{"Id":"679456563","IsPullRequest":true,"CreatedAt":"2020-08-16T05:10:57","Actor":"harishsk","Number":"5348","RawContent":null,"Title":"Added IDisposable to OnnxTransformer and fixed memory leaks","State":"closed","Body":"Fixes #5342 \r\nA temp file was being created when the Onnx model was being loaded from within an ML.NET model. This file wasn't being deleted when the session exited because OnnxTransformer didn't support IDisposable. (Also added Dispose calls to OnnxTransformer objects in the tests)\r\n\r\nThanks to the reported bug, this also fixes memory leaks that we would see from OnnxRuntime.dll because the native memory associated with InferenceSession wasn't freed.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5348","RelatedDescription":"Closed or merged PR \"Added IDisposable to OnnxTransformer and fixed memory leaks\" (#5348)"},{"Id":"677545163","IsPullRequest":false,"CreatedAt":"2020-08-16T05:10:57","Actor":"pthinh14","Number":"5342","RawContent":null,"Title":"Load ONNX model creates temp file","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n- **.NET Version (eg., dotnet --info)**: .NET framework 4\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nLoad model saved by ML.NET, the base model is in ONNX format\r\n- **What happened?**\r\nEverytime I load the model, a new onnx model file is created in %temp% folder and it is not deleted after releasing model object or after exiting the application. File path: %temp%\\7bf1a39c-b65c-4874-927b-2bacbbf57b15\\model.onnx\r\nI tried to delete the file when the model was predicting but there is no error or exception and the result is the same.  \r\n- **What did you expect?**\r\nThis file should be deleted or better not be created since it exposes our model to the user consumes too much user's memory.\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5342","RelatedDescription":"Closed issue \"Load ONNX model creates temp file\" (#5342)"},{"Id":"677618310","IsPullRequest":false,"CreatedAt":"2020-08-15T06:17:59","Actor":"ladodc","Number":"5343","RawContent":null,"Title":"ONNX Model Evaluation in ML.Net not working","State":"closed","Body":"### System information\r\n\r\n- Win10\r\n- .NET Core 3.1\r\n\r\n### How can I evaluate ONNX Model in ML.Net\r\nI am loading already trained ONNX Model with ApplyOnnxModel then produce predictions based on my data(IDataView) and afterward I am going to evaluate the results with mlContext.BinaryClassification.Evaluate. That does not work. Becouse he expects scoreColumn as single float and not float[]. But ONNX Model returns always results in Vector<Single, -1, 1>. \r\nOn evaluating I got exception: \r\n\r\n> System.ArgumentOutOfRangeException\r\nSchema mismatch for score column 'Score': expected Single, got Vector<Single, 1, 1> (Parameter 'schema')\r\n\r\nAs you can see in the following model. Output Parameter are vectors float32[-1,1] but BinaryClassification.Evaluate expect single float. Is there any workaround. Or it is not possible to evaluate ONNX Model with ML.Net.\r\n\r\n[model.zip](https://github.com/dotnet/machinelearning/files/5062377/model.zip)\r\n\r\n\r\n### Source code / logs\r\n\r\n```\r\nvar pipeline = mlContext.Transforms.ApplyOnnxModel(modelFile: this.ModelFile, inputColumnNames: new string[] { \"day\",\"hour\",\"name\",\"worker\",\"temperature\",\"vibration\"},\r\n                    outputColumnNames: new[] { \"Probability.output\", \"PredictedLabel.output\",\"Score.output\" });\r\n\r\nIDataView predictions = model.Transform(dataView);\r\nvar metrics = mlContext.BinaryClassification.Evaluate(predictions, labelColumnName: labelColumnName, scoreColumnName: \"Score\", probabilityColumnName: \"Probability\", predictedLabelColumnName: \"PredictedLabel\");\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/5343","RelatedDescription":"Closed issue \"ONNX Model Evaluation in ML.Net not working\" (#5343)"},{"Id":"679344999","IsPullRequest":false,"CreatedAt":"2020-08-14T18:56:53","Actor":"LittleLittleCloud","Number":"5347","RawContent":null,"Title":"Feature request: Add support for saving/loading IDataView to/from csv/tsv directly and other pandas-like functionalities","State":"open","Body":"This will be a useful feature when using ML.Net to build pipeline in jupyter notebook, especially in data preprocessing steps.\r\n\r\nOther useful functions can be\r\n- IDataView.description -> similar to DataFrame.description, which prints summary information of current dataset.\r\n- IDataView.Head(n) -> print first n rows in nice table format\r\n- IDataView[ColumnName] -> get the column of ColumnName\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5347","RelatedDescription":"Open issue \"Feature request: Add support for saving/loading IDataView to/from csv/tsv directly and other pandas-like functionalities\" (#5347)"},{"Id":"677944230","IsPullRequest":true,"CreatedAt":"2020-08-13T00:14:45","Actor":"harishsk","Number":"5344","RawContent":null,"Title":"Integrated guardian SDL tools","State":"closed","Body":"The guardian tools allow us to run security tools. This PR adds the configuration for those tools into the repo.","Url":"https://github.com/dotnet/machinelearning/pull/5344","RelatedDescription":"Closed or merged PR \"Integrated guardian SDL tools\" (#5344)"},{"Id":"676413342","IsPullRequest":false,"CreatedAt":"2020-08-10T21:00:22","Actor":"LittleLittleCloud","Number":"5341","RawContent":null,"Title":"Image classification can't run on CPU that doesn't support AVX instruction","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Window10\r\n- **.NET Version (eg., dotnet --info)**:  3.1.302\r\n\r\n### Issue\r\n\r\nWe have a few users from Model Builder report on image classification failure because of loading error.\r\n- https://github.com/dotnet/machinelearning-modelbuilder/issues/915\r\n- https://github.com/dotnet/machinelearning-modelbuilder/issues/920\r\n\r\nAfter some investigation, I think it is because their CPU is too old and doesn't support AVX instruction, which is used to build tensorflow after v1.6. **But I'm not too sure about it, and that conclusion need double check**.\r\n\r\nIn the meanwhile, it would be great if we can catch the instruction not support error from exception thrown by mlnet. Right now the error message is \"Tensorflow exception triggered while loading model\", which is not really helpful in debugging. Is it possible to have a new exception, or a specific error message to highlight the avx not support exception?\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5341","RelatedDescription":"Open issue \"Image classification can't run on CPU that doesn't support AVX instruction\" (#5341)"},{"Id":"676165493","IsPullRequest":false,"CreatedAt":"2020-08-10T14:08:43","Actor":"ladodc","Number":"5340","RawContent":null,"Title":"How to re-train onnx model in ml.net","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win10\r\n\r\n\r\n- **.NET Version (eg., dotnet --info)**: .Net Core 3.1\r\n\r\n### Issue\r\n\r\nHi I am trying to re-train model saved in onnx format. I can inference this model with onnxruntime in .net but retraining without success. What I am doing wrong? Is this in .net possible? Here is my model:[logres_scikit_pipeline.zip](https://github.com/dotnet/machinelearning/files/5051258/logres_scikit_pipeline.zip)\r\n\r\n### Source code\r\n`\r\nvar MODEL_PATH = @\"..\\..\\..\\Model\\logres_scikit_pipeline.onnx\";\r\n                \r\n                var pipeline = mlContext.Transforms.ApplyOnnxModel(modelFile: MODEL_PATH, inputColumnNames: inputColumnNames,\r\n                    outputColumnNames: new[] { \"output_probability\", \"output_label\" });\r\n\r\n                var model = pipeline.Fit(newData);\r\n              \r\n                using (var stream = File.Create(MODEL_PATH))\r\n                {\r\n                    mlContext.Model.ConvertToOnnx(model, newData, stream);\r\n                }\r\n`\r\n\r\n> On ConvertToOnnx, I got following Exception: The targeted pipeline can not be fully converted into a well-defined ONNX model. Please check if all steps in that pipeline are convertible to ONNX and all necessary variables are not dropped (via command line arguments).","Url":"https://github.com/dotnet/machinelearning/issues/5340","RelatedDescription":"Open issue \"How to re-train onnx model in ml.net\" (#5340)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-08-28T05:30:37.2366797Z","RunDurationInMilliseconds":868}