{"Data":{"GitHub":{"Issues":[{"Id":"2471294751","IsPullRequest":true,"CreatedAt":"2024-08-17T02:48:49","Actor":"LittleLittleCloud","Number":"7220","RawContent":null,"Title":"[GenAI] Add LLaMA support","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n#7169 ","Url":"https://github.com/dotnet/machinelearning/pull/7220","RelatedDescription":"Open PR \"[GenAI] Add LLaMA support\" (#7220)"},{"Id":"2468081063","IsPullRequest":false,"CreatedAt":"2024-08-15T13:43:13","Actor":"schalke046","Number":"7219","RawContent":null,"Title":"ASP.NET vs ML.Net ObjectDetection","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Docker linux\r\n - ML.NET Version: latest\r\n - .NET Version: 8.0\r\n\r\n**Describe the bug**\r\nHi all,\r\n\r\nI'm currently having an issue with object detection in the docker container by using TorchSharp-Cpu. The first object detection is going fine by having around 2 GB in use, but after more like 100 the RAM usage is going up to 4GB and more. \r\nAnd the worst part of it is that this is running out of memory after a while. \r\nLooking at the process after the usage was done, there was no decrease in memory usage happening.\r\n\r\nThe model is created by images up to 9MB PNGs but resized in the model to only 250 by 250.\r\n\r\nI was already multiple times checking the using statements and all IDisposable objects.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Set Up ASP.Web API\r\n2. Add an object detection Model => train it etc.\r\n3. Add a controller to use the model\r\n4. Provide an upload function with IFormFile\r\n5. Add using on opening the IFormFileStream\r\n6. Add using for the ModelInput\r\n7. Add a result around the prediction, store the result of precision in that, and close or make a using the output image.\r\n8. Make sure all using's are there and all streams are going to be closed.\r\n9. Optional (Add a lock statement around prediction to make it anytime single-threaded)\r\n\r\n**Expected behavior**\r\nRAM usage for single-threaded usage should go not over 2.5 GB or come down after usage. Dot. Memory on Windows was only showing that there is a lot of unmanaged Memory in use (streams).\r\n\r\n**Screenshots, Code, Sample Projects**\r\n![image](https://github.com/user-attachments/assets/df8408cc-1c08-427c-9280-5a40dfb90c6d)\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7219","RelatedDescription":"Open issue \"ASP.NET vs ML.Net ObjectDetection\" (#7219)"},{"Id":"2460958274","IsPullRequest":true,"CreatedAt":"2024-08-12T13:06:53","Actor":"dotnet-maestro[bot]","Number":"7218","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c692823c-b896-437f-4f57-08dc434cc8f6)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: c692823c-b896-437f-4f57-08dc434cc8f6\r\n- **Build**: 20240816.2\r\n- **Date Produced**: August 16, 2024 10:55:26 PM UTC\r\n- **Commit**: 8fe02bab989df1265eee225df2c28af6dbdccc83\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 9.0.0-beta.24408.2 to 9.0.0-beta.24416.2][2]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 9.0.0-beta.24408.2 to 9.0.0-beta.24416.2][2]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 9.0.0-beta.24408.2 to 9.0.0-beta.24416.2][2]\r\n  - **Microsoft.DotNet.SignTool**: [from 9.0.0-beta.24408.2 to 9.0.0-beta.24416.2][2]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 9.0.0-beta.24408.2 to 9.0.0-beta.24416.2][2]\r\n  - **Microsoft.DotNet.XliffTasks**: [from 9.0.0-beta.24408.2 to 9.0.0-beta.24416.2][2]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 9.0.0-beta.24408.2 to 9.0.0-beta.24416.2][2]\r\n\r\n[2]: https://github.com/dotnet/arcade/compare/60ae233c3d...8fe02bab98\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:c692823c-b896-437f-4f57-08dc434cc8f6)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7218","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/arcade\" (#7218)"},{"Id":"2459374450","IsPullRequest":false,"CreatedAt":"2024-08-11T01:55:31","Actor":"IntegerMan","Number":"7217","RawContent":null,"Title":"Update or retire ROADMAP.md","State":"open","Body":"**System Information (please complete the following information):**\r\n- N/A\r\n\r\n**Describe the bug**\r\nhttps://github.com/dotnet/machinelearning/blob/main/ROADMAP.md is oriented around ML.NET 3.0 and may confuse others or look bad as this release has already occurred. This file comes up in SEO for searches for ML.NET 4.0 or ML.NET upcoming features.\r\n\r\n**To Reproduce**\r\nSee https://github.com/dotnet/machinelearning/blob/main/ROADMAP.md\r\n\r\n**Expected behavior**\r\nI'd love this page to get updated periodically, but barring that it should probably be removed\r\n\r\n**Screenshots, Code, Sample Projects**\r\n\r\n**Additional context**\r\nWas looking for resources to link to for ML.NET 4.0 and what to expect from ML.NET ahead for an article I'm writing.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7217","RelatedDescription":"Open issue \"Update or retire ROADMAP.md\" (#7217)"},{"Id":"2453823444","IsPullRequest":true,"CreatedAt":"2024-08-08T00:12:45","Actor":"michaelgsharp","Number":"7216","RawContent":null,"Title":"Update dependency versions.","State":"closed","Body":"This PR updates all our dependencies (minus a few that will require larger code changes).\r\n\r\nThere is a new analyzer rule is added by one of these dependencies, but we are suppressing that issue for now and @LittleLittleCloud will fix it in a separate PR.","Url":"https://github.com/dotnet/machinelearning/pull/7216","RelatedDescription":"Closed or merged PR \"Update dependency versions.\" (#7216)"},{"Id":"2450354515","IsPullRequest":false,"CreatedAt":"2024-08-06T09:07:14","Actor":"bbhxwl","Number":"7215","RawContent":null,"Title":"Yolov5    Why do the following models use the same method but have different results? Is it a C # issue?","State":"open","Body":"Why do the following models use the same method but have different results? Is it a C # issue?\r\n\r\nHow can C # achieve code with the same effect as Python?\r\n\r\n\r\n```C#\r\n// See https://aka.ms/new-console-template for more information\r\n\r\nusing System.Drawing;\r\nusing ConsoleApp3;\r\nusing Microsoft.ML.OnnxRuntime;\r\n\r\nInferenceSession session = new InferenceSession(\"D:\\\\yolov5\\\\yolov5x.onnx\");\r\nList<NamedOnnxValue> inputs = new List<NamedOnnxValue>();\r\nvar bit=(Bitmap)Bitmap.FromFile(\"C:\\\\Users\\\\47013\\\\Desktop\\\\2.jpeg\");\r\ninputs.Add(NamedOnnxValue.CreateFromTensor<float>(\"images\",test.PreprocessImage(bit)));\r\n\r\nvar results = session.Run(inputs);\r\nvar output=results.First().AsTensor<float>();\r\nvar boxes = new List<float[]>();\r\n\r\nfor (int i = 0; i < output.Dimensions[1]; i++)\r\n{\r\n    var boxData = new float[85];\r\n    for (int j = 0; j < 85; j++)\r\n    {\r\n        boxData[j] = output[0, i, j];\r\n    }\r\n    boxes.Add(boxData);\r\n}\r\n\r\nvar asd=test.DrawBoundingBoxes(bit,boxes,0.1f);\r\nasd.Save(\"test.jpg\");\r\nvar m=boxes.Max(s => s[4]);\r\nList<float> ll = new List<float>();\r\nforeach (var box in boxes)\r\n{\r\n    float confidence = box[4];\r\n    ll.Add(confidence);\r\n}\r\nvar sasd=ll.Max();\r\nConsole.WriteLine();\r\n```\r\n\r\n```\r\nimport datetime\r\n\r\nimport torch\r\n\r\n# 加载模型\r\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5x', pretrained=True)\r\n\r\n# 设置模型为评估模式\r\nmodel.eval()\r\n\r\n# 图像文件路径\r\nimg_path = 'C:\\\\Users\\\\47013\\\\Desktop\\\\新建文件夹\\\\2.jpeg'  # 替换为你自己的图像路径\r\nstart_time = datetime.datetime.now()\r\n# 进行推理\r\nresults = model(img_path)\r\nprint(datetime.datetime.now() - start_time)\r\n# 解析结果\r\nresults.print()  # 打印检测结果\r\nresults.show()   # 显示带检测框的图像\r\n\r\n# 访问结果数据\r\ndetections = results.xyxy[0]  # 访问检测结果，格式为 (x1, y1, x2, y2, confidence, class)\r\n\r\n# 打印检测框的详细信息\r\nfor *box, conf, cls in detections:\r\n    print(f\"Detected {model.names[int(cls)]} with confidence {conf:.2f} at [{box[0]:.2f}, {box[1]:.2f}, {box[2]:.2f}, {box[3]:.2f}]\")\r\n\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/7215","RelatedDescription":"Open issue \"Yolov5    Why do the following models use the same method but have different results? Is it a C # issue?\" (#7215)"},{"Id":"2449731515","IsPullRequest":false,"CreatedAt":"2024-08-06T01:12:46","Actor":"masoodafar-web","Number":"7214","RawContent":null,"Title":"Issue with onnxruntime.dll not found in .NET 7.0 project","State":"open","Body":"Hello,\r\n\r\nI am encountering an issue with my .NET 7.0 project using ONNX Runtime. Despite having Microsoft.ML.OnnxRuntime.dll in my project, the application fails with an error indicating that onnxruntime.dll cannot be found.\r\n\r\nHere are the steps I followed:\r\n\r\nI ensured onnxruntime.dll is located in bin\\Debug\\net7.0\\runtimes\\win-x64\\native.\r\nI manually copied onnxruntime.dll to bin\\Debug\\net7.0, but the issue persists.\r\nI updated my .csproj file with the following configuration to copy the DLL automatically:\r\n`\r\n<ItemGroup>\r\n    <None Update=\"runtimes\\win-x64\\native\\onnxruntime.dll\">\r\n        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n</ItemGroup>\r\n`\r\n The application crashes at the following line without throwing an error:\r\n `NativeApiStatus.VerifySuccess(NativeMethods.OrtCreateSessionOptions(out handle));`\r\nHowever, the problem remains unsolved. I would appreciate any guidance on resolving this issue.\r\n\r\nEnvironment:\r\n\r\n.NET 7.0\r\nMicrosoft.ML.OnnxRuntime version [1.18.1]\r\nWindows [11]\r\nThank you!","Url":"https://github.com/dotnet/machinelearning/issues/7214","RelatedDescription":"Open issue \"Issue with onnxruntime.dll not found in .NET 7.0 project\" (#7214)"},{"Id":"2449643579","IsPullRequest":false,"CreatedAt":"2024-08-05T23:33:27","Actor":"vsfeedback","Number":"7213","RawContent":null,"Title":"DataFrame LoadCsv improvements","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/DataFrame-LoadCsv-improvements/10714999)._\n\n---\nThe DataFrame.LoadCsv method could be improved in a number of ways:\n\n- Use double when the precision in the data allows it. Now float is always used when the data is floating point.\n- Allow the user to define NaN in floating point columns data. In R code that we are also using, NA is typically used.\n- Speed improvements if possible.\n- I think there is a problem with defining culture info in the parameter. I have to do:\nThread.CurrentThread.CurrentCulture = new CultureInfo(\"en-US\"); before the call to LoadCsv to make floating point data with decimal points load correctly (in Sweden).\n\n---\n### Original Comments\n\n#### Feedback Bot on 8/1/2024, 10:56 PM: \n\n(private comment, text removed)","Url":"https://github.com/dotnet/machinelearning/issues/7213","RelatedDescription":"Open issue \"DataFrame LoadCsv improvements\" (#7213)"},{"Id":"2440788701","IsPullRequest":true,"CreatedAt":"2024-08-05T20:36:00","Actor":"LittleLittleCloud","Number":"7206","RawContent":null,"Title":"[GenAI] Add readme to Microsoft.ML.GenAI.Phi","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7206","RelatedDescription":"Closed or merged PR \"[GenAI] Add readme to Microsoft.ML.GenAI.Phi\" (#7206)"},{"Id":"2448767235","IsPullRequest":false,"CreatedAt":"2024-08-05T14:56:28","Actor":"bbhxwl","Number":"7212","RawContent":null,"Title":"How to convert the following Python code into C # code to make it the same code?","State":"open","Body":"```\r\nimport torch\r\nimport torchvision.transforms as transforms\r\nfrom torchvision.models.detection import ssd300_vgg16\r\nfrom PIL import Image\r\nimport numpy as np\r\n\r\n\r\ndef preprocess_image(image_path):\r\n    \"\"\"\r\n    预处理输入图像，将其调整为模型需要的输入格式。\r\n    \"\"\"\r\n    # 定义图像转换\r\n    transform = transforms.Compose([\r\n        transforms.Resize((300, 300)),  # 调整图像大小\r\n        transforms.ToTensor(),  # 转换为张量\r\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  # 标准化\r\n    ])\r\n\r\n    # 打开图像并应用转换\r\n    image = Image.open(image_path).convert('RGB')\r\n    image_tensor = transform(image).unsqueeze(0)  # 添加批次维度\r\n\r\n    return image_tensor\r\n\r\ndef run_inference(image_tensor, threshold=0.5):\r\n    \"\"\"\r\n    使用 SSD 模型进行推理，并根据置信度分数过滤结果。\r\n    \"\"\"\r\n    # 加载预训练的 SSD 模型\r\n    model = ssd300_vgg16(pretrained=True)\r\n    model.eval()  # 切换模型到评估模式\r\n\r\n    with torch.no_grad():\r\n        # 进行推理\r\n        predictions = model(image_tensor)\r\n\r\n    # 提取检测结果\r\n    boxes = predictions[0]['boxes'].numpy()\r\n    labels = predictions[0]['labels'].numpy()\r\n    scores = predictions[0]['scores'].numpy()\r\n\r\n    # 根据置信度分数过滤结果\r\n    filtered_boxes = boxes[scores > threshold]\r\n    filtered_labels = labels[scores > threshold]\r\n    filtered_scores = scores[scores > threshold]\r\n\r\n    return filtered_boxes, filtered_labels, filtered_scores\r\n\r\ndef print_results(boxes, labels, scores):\r\n    \"\"\"\r\n    打印检测结果。\r\n    \"\"\"\r\n    print(\"检测结果：\")\r\n    for i in range(len(labels)):\r\n        print(f\"Box: {boxes[i]}\")\r\n        print(f\"Label: {labels[i]}\")\r\n        print(f\"Score: {scores[i]:.2f}\\n\")\r\n\r\nimage_path = \"/Users/xuzhibin/Downloads/6ee927a0d4f2c9862a918798de175f5.jpg\"  \r\nimage_tensor = preprocess_image(image_path)\r\nboxes, labels, scores = run_inference(image_tensor)\r\nprint_results(boxes, labels, scores)\r\n```\r\n\r\n```\r\n\r\nusing ConsoleApp10;\r\nusing Microsoft.ML.OnnxRuntime;\r\nusing Microsoft.ML.OnnxRuntime.Tensors;\r\n\r\nstring modelPath = \"/Users/xuzhibin/Desktop/python/myScript/ssd300_vgg16.onnx\";\r\nusing var session = new InferenceSession(modelPath);\r\nvar inputData=test.PreprocessImage(\"/Users/xuzhibin/Downloads/6ee927a0d4f2c9862a918798de175f5.jpg\");\r\n// 创建张量\r\nvar inputTensor = new DenseTensor<float>(inputData, new[] { 1, 3, 300, 300 });\r\n\r\n// 设置输入\r\nvar inputs = new List<NamedOnnxValue>\r\n{\r\n    NamedOnnxValue.CreateFromTensor(\"input\", inputTensor)\r\n};\r\n\r\n// 运行推理\r\nusing IDisposableReadOnlyCollection<DisposableNamedOnnxValue> results = session.Run(inputs);\r\n\r\n// 获取输出\r\nvar boxes = results.FirstOrDefault(x => x.Name == \"boxes\").AsEnumerable<float>().ToArray();\r\nvar labels = results.FirstOrDefault(x => x.Name == \"labels\").AsEnumerable<long>().ToArray();\r\nvar scores = results.FirstOrDefault(x => x.Name == \"scores\").AsEnumerable<float>().ToArray();\r\n\r\n// 输出前几个检测结果\r\nConsole.WriteLine(\"检测结果：\");\r\nfor (int i = 0; i < Math.Min(5, labels.Length); i++)\r\n{\r\n    Console.WriteLine($\"Box: {boxes[i * 4 + 0]}, {boxes[i * 4 + 1]}, {boxes[i * 4 + 2]}, {boxes[i * 4 + 3]}\");\r\n    Console.WriteLine($\"Label: {labels[i]}\");\r\n    Console.WriteLine($\"Score: {scores[i]}\");\r\n}\r\n```\r\n```\r\nusing System.Drawing;\r\nusing System.Drawing.Imaging;\r\nusing SkiaSharp;\r\n\r\nnamespace ConsoleApp10;\r\n\r\npublic class test\r\n{\r\n    public static float[] PreprocessImage(string imagePath)\r\n    {\r\n        // 读取图像为 SKBitmap\r\n        using var inputStream = File.OpenRead(imagePath);\r\n        using var originalBitmap = SKBitmap.Decode(inputStream);\r\n        // 创建新的 Bitmap，调整到模型需要的大小\r\n        using var resizedBitmap = originalBitmap.Resize(new SKImageInfo(300, 300), SKFilterQuality.High);\r\n        // 创建数据数组\r\n        var inputData = new float[1 * 3 * 300 * 300];\r\n        int index = 0;\r\n\r\n        // 遍历每个像素，将颜色值归一化到 [0, 1] 范围\r\n        for (int y = 0; y < resizedBitmap.Height; y++)\r\n        {\r\n            for (int x = 0; x < resizedBitmap.Width; x++)\r\n            {\r\n                var pixel = resizedBitmap.GetPixel(x, y);\r\n                inputData[index++] = pixel.Red / 255.0f;\r\n                inputData[index++] = pixel.Green / 255.0f;\r\n                inputData[index++] = pixel.Blue / 255.0f;\r\n            }\r\n        }\r\n\r\n        return inputData;\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7212","RelatedDescription":"Open issue \"How to convert the following Python code into C # code to make it the same code?\" (#7212)"},{"Id":"2448187812","IsPullRequest":false,"CreatedAt":"2024-08-05T10:22:55","Actor":"bbhxwl","Number":"7211","RawContent":null,"Title":"Can it be used on MAUI?","State":"open","Body":"Can it be used on MAUI?\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7211","RelatedDescription":"Open issue \"Can it be used on MAUI?\" (#7211)"},{"Id":"2448172594","IsPullRequest":false,"CreatedAt":"2024-08-05T10:15:13","Actor":"bbhxwl","Number":"7210","RawContent":null,"Title":"Why is there no ResizeImages method?","State":"open","Body":"Why is there no ResizeImages method?\r\n\r\n![image](https://github.com/user-attachments/assets/a9290955-5391-4db1-9311-1334f5a56506)\r\n![image](https://github.com/user-attachments/assets/ec728fb0-9371-48b6-8fd8-ef25c4443bfe)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7210","RelatedDescription":"Open issue \"Why is there no ResizeImages method?\" (#7210)"},{"Id":"2447141026","IsPullRequest":false,"CreatedAt":"2024-08-04T13:42:12","Actor":"vpenades","Number":"7209","RawContent":null,"Title":"Support scenario:  Input Bitmap + Training = ONNX model","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nRight now, ML supports several scenarios like image classification and detection which take a Bitmap as an input, and after training, it produces a ML Zip file.\r\n\r\nML also supports training over plain data, that after training, it can be exported to an ONNX model.\r\n\r\nBut there is no scenario, or example that covers both, that is: training a model using bitmaps as input, and being able to output an onnx model.\r\n\r\nApparently, the main roadblock being that the ONNX Converter toolchain being limited to a few data types, which does not include MLImage.\r\n\r\n**Describe the solution you'd like**\r\n\r\nThere's some solutions already proposed, for example: https://github.com/dotnet/machinelearning/issues/5271 proposes to exclude the input data pre-processing part of the training pipeline, which happens to be the part that cannot be exported to ONNX. Ideally, the export process would begin at the point of the pipeline where the input image has been converted to a tensor.\r\n\r\nAnother solution would be to make ONNX converter toolchain to handle any incoming MLImage type as a tensor. \r\n\r\nYet another solution would be to introduce a new \"image\" type, which is lower level and more \"palatable\" by the ONNX converter. Theoretically, this image type would represent the images in its already pre-processed state, like scaled to a fixed size.\r\n\r\nFinally, if this Bitmap + Training = ONNX scenario is already supported by the current libraries, it could be desirable to have an end-to-end example showcasing how to properly configure the input data and the pipeline so it can be successfully exported to ONNX. (And I've also looked for such an example in the examples repository with no success)\r\n\r\n**Describe alternatives you've considered**\r\n\r\nNot using ML at all and do the training with other frameworks.\r\n\r\n**Additional context**\r\n\r\nThis is a long standing issue that has been already highlighted by issues like https://github.com/dotnet/machinelearning/issues/6810, and I have to apologize for opening yet another one, but this problem seems to be kept unaswered for months (years?)...  from time to time I come here to look for news and see if the latest version of the ML libraries finally solved this problem, just to discover it remains unanswered.\r\n\r\nAdditinally, We're using OnnxRuntime at low level for inference, so we really do require to export to ONNX, ML.Zip is not an option to us.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7209","RelatedDescription":"Open issue \"Support scenario:  Input Bitmap + Training = ONNX model\" (#7209)"},{"Id":"2446279735","IsPullRequest":false,"CreatedAt":"2024-08-03T10:15:24","Actor":"ks1990cn","Number":"7208","RawContent":null,"Title":"Need documentation to use ML .Net for personalize recommendation ","State":"open","Body":"Hi,\r\n\r\nI am looking for documentation to use ML .Net for personalize recommendation with AWS in real time. Iam looking for AWS personalize alternative.\r\n\r\nhttps://aws.amazon.com/blogs/architecture/architecting-near-real-time-personalized-recommendations-with-amazon-personalize/\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7208","RelatedDescription":"Open issue \"Need documentation to use ML .Net for personalize recommendation \" (#7208)"},{"Id":"2433638086","IsPullRequest":false,"CreatedAt":"2024-08-02T18:44:01","Actor":"michaelgsharp","Number":"7203","RawContent":null,"Title":"AutoMLExperiment_finish_training_when_time_is_up_Async","State":"closed","Body":"Skipping AutoMLExperiment_finish_training_when_time_is_up_Async for now as it is failing on arm linux machines. Will need further investigation.\r\n<!--Known issue error report start -->\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n<!--Known issue error report end -->","Url":"https://github.com/dotnet/machinelearning/issues/7203","RelatedDescription":"Closed issue \"AutoMLExperiment_finish_training_when_time_is_up_Async\" (#7203)"},{"Id":"2443454847","IsPullRequest":true,"CreatedAt":"2024-08-02T18:44:00","Actor":"LittleLittleCloud","Number":"7207","RawContent":null,"Title":"Fix #7203","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\nfix #7203 ","Url":"https://github.com/dotnet/machinelearning/pull/7207","RelatedDescription":"Closed or merged PR \"Fix #7203\" (#7207)"},{"Id":"2438511825","IsPullRequest":false,"CreatedAt":"2024-07-30T19:17:06","Actor":"amueller","Number":"7205","RawContent":null,"Title":"Comment in example code not matching docstring for TimeSeriesCatalog.DetectSeasonality Method","State":"open","Body":"The docstring says the default value of `randomnessThreshold` is 0.95, the comment in the example says 0.99. I assume the comment is outdated and should be updated.\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for learn.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 7f265149-38bf-bc02-6aa4-f5a309e70745\r\n* Version Independent ID: 8c741572-b3ca-c5bf-9ba4-f40dcb83786d\r\n* Content: [TimeSeriesCatalog.DetectSeasonality Method (Microsoft.ML)](https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.timeseriescatalog.detectseasonality?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML/TimeSeriesCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/TimeSeriesCatalog.xml)\r\n* Service: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/7205","RelatedDescription":"Open issue \"Comment in example code not matching docstring for TimeSeriesCatalog.DetectSeasonality Method\" (#7205)"},{"Id":"2431308543","IsPullRequest":false,"CreatedAt":"2024-07-30T03:35:54","Actor":"Vanh253333","Number":"7201","RawContent":null,"Title":"[Tokenizers] How to use SentencePieceBpeTokenizer?","State":"closed","Body":"I have a sentencepiecebpe.model file. How can I use the SentencePieceBpeTokenizer to load this model file and use it to encode text?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7201","RelatedDescription":"Closed issue \"[Tokenizers] How to use SentencePieceBpeTokenizer?\" (#7201)"},{"Id":"2436792504","IsPullRequest":false,"CreatedAt":"2024-07-30T03:13:33","Actor":"tq01zuo","Number":"7204","RawContent":null,"Title":"How to convert multiple lines to one line ?","State":"open","Body":"Hi, everyone:\r\ni am a newer for ml.net, i have a more than one lines to indicate an individual process, so i want to convert them to one line, so i can use regression or classification to deal with these data.\r\n![1](https://github.com/user-attachments/assets/3e60f55f-d795-467c-833c-0404e350b3e3)\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7204","RelatedDescription":"Open issue \"How to convert multiple lines to one line ?\" (#7204)"},{"Id":"2433160890","IsPullRequest":true,"CreatedAt":"2024-07-28T22:55:03","Actor":"tarekgh","Number":"7202","RawContent":null,"Title":"Reduce Tiktoken Creation Memory Allocation","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/7202","RelatedDescription":"Closed or merged PR \"Reduce Tiktoken Creation Memory Allocation\" (#7202)"},{"Id":"2428335386","IsPullRequest":true,"CreatedAt":"2024-07-27T03:03:35","Actor":"michaelgsharp","Number":"7200","RawContent":null,"Title":"Add package readmes","State":"closed","Body":"Update to use preview 5 for building.\r\nFixed some minor formatting issues that came from the preview 5 update.\r\nAdded package readmes to 5 more packages for now, #7195","Url":"https://github.com/dotnet/machinelearning/pull/7200","RelatedDescription":"Closed or merged PR \"Add package readmes\" (#7200)"},{"Id":"2425480716","IsPullRequest":true,"CreatedAt":"2024-07-26T02:53:25","Actor":"stephentoub","Number":"7198","RawContent":null,"Title":"Make most Tokenizer abstract methods virtual","State":"closed","Body":"All of the functionality in all of the methods can be implemented in terms of just a single Decode and EncodeToTokens set of methods. Only those two need to be abstract; everything else that was abstract can instead be virtual and implemented in terms of those.","Url":"https://github.com/dotnet/machinelearning/pull/7198","RelatedDescription":"Closed or merged PR \"Make most Tokenizer abstract methods virtual\" (#7198)"},{"Id":"2403636217","IsPullRequest":true,"CreatedAt":"2024-07-24T19:09:42","Actor":"dotnet-maestro[bot]","Number":"7192","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:45c6fd49-3a4f-4675-f3da-08dc0c527e17)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 45c6fd49-3a4f-4675-f3da-08dc0c527e17\r\n- **Build**: 20240710.5\r\n- **Date Produced**: July 10, 2024 2:34:11 PM UTC\r\n- **Commit**: c9efa535175049eb9cba06cae1f8c3d5dbe768a9\r\n- **Branch**: refs/heads/release/8.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.24266.3 to 8.0.0-beta.24360.5][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 8.0.0-beta.24266.3 to 8.0.0-beta.24360.5][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.24266.3 to 8.0.0-beta.24360.5][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 8.0.0-beta.24266.3 to 8.0.0-beta.24360.5][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 8.0.0-beta.24266.3 to 8.0.0-beta.24360.5][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.24266.3 to 8.0.0-beta.24360.5][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/e6f70c7dd5...c9efa53517\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:45c6fd49-3a4f-4675-f3da-08dc0c527e17)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7192","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#7192)"},{"Id":"2421292075","IsPullRequest":true,"CreatedAt":"2024-07-24T19:01:44","Actor":"ankane","Number":"7196","RawContent":null,"Title":"Fix crash in Microsoft.ML.Recommender with validation set","State":"closed","Body":"This PR fixes a crash when calling `Fit` on the `MatrixFactorizationTrainer` class with a validation set. The crash is due to passing an incorrect length to LIBMF (it passes the length from the training set instead of the validation set).","Url":"https://github.com/dotnet/machinelearning/pull/7196","RelatedDescription":"Closed or merged PR \"Fix crash in Microsoft.ML.Recommender with validation set\" (#7196)"},{"Id":"2425483538","IsPullRequest":false,"CreatedAt":"2024-07-23T15:20:00","Actor":"stephentoub","Number":"7199","RawContent":null,"Title":"Tokenizer.Decode returns a nullable string?","State":"open","Body":"Why does Tokenizer.Decode return `string?` rather than `string`? It looks like it's doing so to return `null` when invalid input is provided? Would it not be better to throw an exception in this case and always return non-null?\n\ncc: @tarekgh ","Url":"https://github.com/dotnet/machinelearning/issues/7199","RelatedDescription":"Open issue \"Tokenizer.Decode returns a nullable string?\" (#7199)"},{"Id":"2422500598","IsPullRequest":false,"CreatedAt":"2024-07-22T10:18:50","Actor":"nietras","Number":"7197","RawContent":null,"Title":"[Tokenizers] How to load HF based tokenizers e.g. SmolLM","State":"open","Body":"Often LLM models are distributed on HuggingFace or similar where tokenizers are presumed created via transformers library. This often contains a bunch of json/txt files. I have found it hard to then now how to create a ML.Tokenizer from that. For example how would one create a tokenizer for:\r\n\r\nhttps://huggingface.co/HuggingFaceTB/SmolLM-135M-Instruct/tree/main\r\n\r\nCould there be a getting started document detailing how to load tokenizers from such files and how to identify what to use to load these?","Url":"https://github.com/dotnet/machinelearning/issues/7197","RelatedDescription":"Open issue \"[Tokenizers] How to load HF based tokenizers e.g. SmolLM\" (#7197)"},{"Id":"2411996505","IsPullRequest":false,"CreatedAt":"2024-07-16T20:33:17","Actor":"ericstj","Number":"7195","RawContent":null,"Title":"Missing NuGet Package readme for many Microsoft.ML packages","State":"open","Body":"**Describe the bug**\r\nMissing package readme for these top downloads:\r\n\r\n- microsoft.ml.fasttree\r\n- microsoft.ml.onnxtransformer\r\n- microsoft.ml.tensorflow\r\n- microsoft.ml.lightgbm\r\n- microsoft.ml.imageanalytics\r\n\r\nWe should also audit other packages.\r\n\r\n**To Reproduce**\r\nView package listing on nuget.org\r\n\r\n**Expected behavior**\r\nRich description like we have for Microsoft.ML\r\nhttps://www.nuget.org/packages/Microsoft.ML/4.0.0-preview.24271.1#readme-body-tab\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7195","RelatedDescription":"Open issue \"Missing NuGet Package readme for many Microsoft.ML packages\" (#7195)"},{"Id":"2408520484","IsPullRequest":false,"CreatedAt":"2024-07-15T11:39:40","Actor":"schalke046-1","Number":"7194","RawContent":null,"Title":"Higher CUDA / Tensorflow compatibility","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nThe currently used libraries like CUDA and Tensorflow are ancient and have not been updated since 2019.\r\n\r\n**Describe the solution you'd like**\r\nI would like to use the latest or newer libraries like CUDA, and TensorFlow to use their new abilities.\r\n\r\n**Describe alternatives you've considered**\r\nOr share simple a roadmap of ML.Net, because currently, it looks already dead.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7194","RelatedDescription":"Open issue \"Higher CUDA / Tensorflow compatibility\" (#7194)"},{"Id":"2407874482","IsPullRequest":false,"CreatedAt":"2024-07-15T05:13:15","Actor":"smp73","Number":"7193","RawContent":null,"Title":"Azure-SMP73 ","State":"open","Body":"\r\n[Enter feedback here]\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for learn.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: ea015ee3-bdc4-07c3-18a3-3e91d70abb0e\r\n* Version Independent ID: efbcc9a9-b025-0f0b-0035-6645ef433c0f\r\n* Content: [IPredictionTransformer&lt;TModel&gt;.Model Property (Microsoft.ML)](https://learn.microsoft.com/en-gb/dotnet/api/microsoft.ml.ipredictiontransformer-1.model?view=ml-dotnet-1.1.0)\r\n* Content Source: [dotnet/xml/Microsoft.ML/IPredictionTransformer`1.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/IPredictionTransformer`1.xml)\r\n* Service: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/7193","RelatedDescription":"Open issue \"Azure-SMP73 \" (#7193)"},{"Id":"2403351722","IsPullRequest":false,"CreatedAt":"2024-07-11T14:37:08","Actor":"vpenades","Number":"7191","RawContent":null,"Title":"ModelFilePath within a .mbconfig file stores an absolute path, which prevents the project to work correctly if moved or cloned.","State":"open","Body":"**System Information (please complete the following information):**\r\n - Windows 10\r\n - ML.NET v3.0.1\r\n - NET 8.0\r\n\r\n**Describe the bug**\r\n\r\nAt the end of a training run using the ML wizard, a .mbconfig file is created.\r\n\r\nThat file contains an entry called \"ModelFilePath:\" which points to the .mlnet file, which happens to be in the same directory as the .mbconfig file.\r\n\r\nBut, I've noticed that \"ModelFilePath:\" holds the full, absolute file path to the model, instead of just the file name, or the relative path name.\r\n\r\nThis can cause trouble if the project is moved to another directory, or it is cloned in another machine.\r\n\r\n**To Reproduce**\r\n\r\nJust do some training using the wizard, and check the \"ModelFilePath:\" entry inside the .mbconfig and check whether it's an absolute or a relative path.\r\n\r\n**Expected behavior**\r\n\r\n\"ModelFilePath:\" should not be an absolute path.","Url":"https://github.com/dotnet/machinelearning/issues/7191","RelatedDescription":"Open issue \"ModelFilePath within a .mbconfig file stores an absolute path, which prevents the project to work correctly if moved or cloned.\" (#7191)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-08-20T03:30:17.9502121Z","RunDurationInMilliseconds":382}