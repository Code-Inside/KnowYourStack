{"Data":{"GitHub":{"Issues":[{"Id":"1163342989","IsPullRequest":true,"CreatedAt":"2022-03-09T00:11:45","Actor":"ericstj","Number":"6122","RawContent":null,"Title":"Update versioning to 1.7.1 / 0.19.1","State":"closed","Body":"I missed this in the initial branding change.  In other repos we only define this in Versions.props.  Probably we should consolidate this moving forward.","Url":"https://github.com/dotnet/machinelearning/pull/6122","RelatedDescription":"Closed or merged PR \"Update versioning to 1.7.1 / 0.19.1\" (#6122)"},{"Id":"1163317040","IsPullRequest":true,"CreatedAt":"2022-03-08T23:36:43","Actor":"LittleLittleCloud","Number":"6121","RawContent":null,"Title":"make SearchSpace internal to reduce warning","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6121","RelatedDescription":"Open PR \"make SearchSpace internal to reduce warning\" (#6121)"},{"Id":"1163033487","IsPullRequest":true,"CreatedAt":"2022-03-08T20:58:47","Actor":"ericstj","Number":"6119","RawContent":null,"Title":"[release/1.7] upgrade to .NET Interactive 1.0.0-beta.22103.1 (#6089)","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/6119","RelatedDescription":"Closed or merged PR \"[release/1.7] upgrade to .NET Interactive 1.0.0-beta.22103.1 (#6089)\" (#6119)"},{"Id":"1159623545","IsPullRequest":false,"CreatedAt":"2022-03-08T16:27:59","Actor":"TusharMalap","Number":"6113","RawContent":null,"Title":"Decision Tree Algorithm in ml.net  ?","State":"closed","Body":"How I can  achieve that?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6113","RelatedDescription":"Closed issue \"Decision Tree Algorithm in ml.net  ?\" (#6113)"},{"Id":"1160263896","IsPullRequest":false,"CreatedAt":"2022-03-08T16:24:53","Actor":"TusharMalap","Number":"6115","RawContent":null,"Title":"Decision Tree Algorithm ","State":"closed","Body":"is this possible in ml.net ?\r\nhow can I achieve this one.  \r\nMy unanswered questioned no. 05","Url":"https://github.com/dotnet/machinelearning/issues/6115","RelatedDescription":"Closed issue \"Decision Tree Algorithm \" (#6115)"},{"Id":"1161937332","IsPullRequest":true,"CreatedAt":"2022-03-08T05:55:48","Actor":"ericstj","Number":"6117","RawContent":null,"Title":"[release/1.7] Porting fixes for 1.7.1 release","State":"closed","Body":"Cherry-pick of main commits we wish to ship in 1.7 release.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6117","RelatedDescription":"Closed or merged PR \"[release/1.7] Porting fixes for 1.7.1 release\" (#6117)"},{"Id":"1162020426","IsPullRequest":true,"CreatedAt":"2022-03-07T22:57:52","Actor":"LittleLittleCloud","Number":"6118","RawContent":null,"Title":"Proposal: Experiment API","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nThis proposal provides an easy way to create and train an AutoML experiment using sweepable pipeline\r\n\r\n#5993 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/6118","RelatedDescription":"Open PR \"Proposal: Experiment API\" (#6118)"},{"Id":"1150933845","IsPullRequest":true,"CreatedAt":"2022-03-07T21:20:40","Actor":"colombod","Number":"6099","RawContent":null,"Title":"create a data frame from tabular data resource","State":"closed","Body":"Adding api to create DataFrame objects from .NET Interactive tabular data resource.\r\nThis enables users to convert KQL and SQL kernel values to dataframe in notebooks","Url":"https://github.com/dotnet/machinelearning/pull/6099","RelatedDescription":"Closed or merged PR \"create a data frame from tabular data resource\" (#6099)"},{"Id":"1158842009","IsPullRequest":true,"CreatedAt":"2022-03-07T20:56:09","Actor":"ericstj","Number":"6112","RawContent":null,"Title":"[release/1.7] New build pools for official builds","State":"closed","Body":"Updating build pools for release build.\r\n\r\nCherry-pick of 94c789b180b2f08c6502e8fc59402064fb639915","Url":"https://github.com/dotnet/machinelearning/pull/6112","RelatedDescription":"Closed or merged PR \"[release/1.7] New build pools for official builds\" (#6112)"},{"Id":"1161425106","IsPullRequest":true,"CreatedAt":"2022-03-07T13:32:16","Actor":"dotnet-maestro[bot]","Number":"6116","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 97926d79-6b8b-4d32-c8db-08d9d479971c\r\n- **Build**: 20220304.3\r\n- **Date Produced**: March 4, 2022 11:44:49 PM UTC\r\n- **Commit**: 8ed47fcae6a5d2d40483ed81858f4ede8eab7ae2\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22154.3][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22154.3][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22154.3][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22154.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22154.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/f713662...8ed47fc\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6116","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/arcade\" (#6116)"},{"Id":"1159672723","IsPullRequest":false,"CreatedAt":"2022-03-04T13:54:28","Actor":"maheshlokhande","Number":"6114","RawContent":null,"Title":"LBFGSLogisticRegression trainer probability distribution issue","State":"open","Body":"We are using LBFGSLogisticRegression trainer for binary classification which seem to be working fine but in some cases (especially with larger training data) probability distribution isn't even. We are getting probability of above 90 and near 0 for positive and negative test samples respectively even though scores for these samples are quite apart. Is there a way to calculate probability which will linearly scale as per scores generated by transform operation.","Url":"https://github.com/dotnet/machinelearning/issues/6114","RelatedDescription":"Open issue \"LBFGSLogisticRegression trainer probability distribution issue\" (#6114)"},{"Id":"1158264999","IsPullRequest":false,"CreatedAt":"2022-03-03T10:58:32","Actor":"sportbilly21","Number":"6111","RawContent":null,"Title":"ONNX with ML.Net very slow performance in GPU","State":"open","Body":"System information\r\nWindos 10 build 19044\r\nML.Net 1.7.0\r\nMicrosoft.ML.OnnxRuntime.GPU 1.10.0\r\n\r\n Issue\r\n\r\nCurrently our application is in .Net and for deploying the models and getting the predictions we are using Flask and python. The models this way are running very fast all models run in around 10ms and GPU utilizsation is very low. GPU is a Quadro P400. We are trying to remove Flask and run everything within .NET so I have converted 4 models trained in Tensorflow/Keras to ONNX and I using them for inference with the use of ML.Net. I have created the pipeline and the prediction engine. I have installed CUDA and CuDNN needed for the package. I have both 10.2 and 11 Cuda versions in the PC. Performance when running with ML.Net is very poor and GPU is utilisation are 50%. Any suggestions or thoughts regarding this\r\n\r\nCode of pipeline and prediction engine:\r\n            \r\n\r\n                var pipeline = this.mlContext.Transforms.ResizeImages(\"input\", height, width, inputColumnName: nameof(ImageData.ImgInput), resizing: ImageResizingEstimator.ResizingKind.Fill)// inputColumnName: nameof(ImageInputData.Image))\r\n                .Append(mlContext.Transforms.ExtractPixels(inputLayer, \"input\", colorsToExtract: ImagePixelExtractingEstimator.ColorBits.Rgb, orderOfExtraction: ImagePixelExtractingEstimator.ColorsOrder.ARGB, interleavePixelColors: true, outputAsFloatArray: true))\r\n                    .Append(mlContext.Transforms.ApplyOnnxModel(outputLayer, inputLayer, modelFile, gpuDeviceId: gpuID));\r\n                //var pipeline = this.mlContext.Transforms.ExtractPixels(inputLayer, inputColumnName: nameof(ImageData.ImgInput), colorsToExtract: ImagePixelExtractingEstimator.ColorBits.Rgb, orderOfExtraction: ImagePixelExtractingEstimator.ColorsOrder.ARBG, interleavePixelColors: true);\r\n\r\n                var data = mlContext.Data.LoadFromEnumerable(new List<ImageData>());\r\n                var transformedData = pipeline.Fit(data).Transform(data);\r\n                //var data = mlContext.Data.LoadFromEnumerable(new ImageData());\r\n                this.model = pipeline.Fit(data); //;\r\n                this.categories = cats;\r\n                this.predictor = this.mlContext.Model.CreatePredictionEngine<ImageData, ImagePrediction>(this.model);","Url":"https://github.com/dotnet/machinelearning/issues/6111","RelatedDescription":"Open issue \"ONNX with ML.Net very slow performance in GPU\" (#6111)"},{"Id":"1158242659","IsPullRequest":false,"CreatedAt":"2022-03-03T10:36:48","Actor":"JD-Robbs","Number":"6110","RawContent":null,"Title":"DataFrameColumn: Unable to Filter by Null via ElementWiseXYZ Methods (System.NotSupportedException)","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version: Latest\r\n - .NET Version: .NET 6.0\r\n\r\n**Describe the bug**\r\nWhen passing `null` into `ElementWiseXYZ` methods, a `System.NotSupportedException` is thrown: 'Specified method is not supported.'\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\n            var col = new DoubleDataFrameColumn(\"col\", new double?[] {1.23, null, 2, 3 });\r\n            var dfTest = new DataFrame(col);\r\n\r\n            var filtered2Df = dfTest.Filter(dfTest[\"col\"].ElementwiseNotEquals(2));\r\n            var filteredNullDf = dfTest.Filter(dfTest[\"col\"].ElementwiseNotEquals(null));\r\n\r\n**Expected behavior**\r\nI expected the resulting `DataFrame` stored in `filteredNullDf` to not include the value `null` - much like `filered2Df` does not include the value `2`.\r\n\r\nThe only way of making it work is something like this:\r\n\r\n             dfTest.Filter(new PrimitiveDataFrameColumn<bool>(\"filter\", dfTest[\"col\"].Cast<double?>().Select(v => v != null)));","Url":"https://github.com/dotnet/machinelearning/issues/6110","RelatedDescription":"Open issue \"DataFrameColumn: Unable to Filter by Null via ElementWiseXYZ Methods (System.NotSupportedException)\" (#6110)"},{"Id":"1157216714","IsPullRequest":false,"CreatedAt":"2022-03-03T06:02:24","Actor":"TusharMalap","Number":"6106","RawContent":null,"Title":"is it possible to perform prediction on output of multiclass-classification prediction?","State":"closed","Body":"hierarchical classification in ml.net. \r\nLike I want to predict like this \r\nAnimal- -cat--breed\r\n  \r\n","Url":"https://github.com/dotnet/machinelearning/issues/6106","RelatedDescription":"Closed issue \"is it possible to perform prediction on output of multiclass-classification prediction?\" (#6106)"},{"Id":"1157981699","IsPullRequest":false,"CreatedAt":"2022-03-03T05:20:01","Actor":"TusharMalap","Number":"6109","RawContent":null,"Title":"Hierarchical Classification in ml.net ? ","State":"open","Body":"Is there way to achieve Hierarchical Classification in [ml.net](http://ml.net/)?\r\nLike Predict cat from animal category and then predict breed of that cat based on cat as a input? in multiclass-classification?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6109","RelatedDescription":"Open issue \"Hierarchical Classification in ml.net ? \" (#6109)"},{"Id":"1157792092","IsPullRequest":true,"CreatedAt":"2022-03-02T23:21:02","Actor":"LittleLittleCloud","Number":"6108","RawContent":null,"Title":"Add serializble pipeline && titanic example for sweepable api","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n\r\n#5992 ","Url":"https://github.com/dotnet/machinelearning/pull/6108","RelatedDescription":"Open PR \"Add serializble pipeline && titanic example for sweepable api\" (#6108)"},{"Id":"1157788861","IsPullRequest":true,"CreatedAt":"2022-03-02T23:19:55","Actor":"LittleLittleCloud","Number":"6107","RawContent":null,"Title":"U/xiaoyun/add searializable pipeline","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6107","RelatedDescription":"Closed or merged PR \"U/xiaoyun/add searializable pipeline\" (#6107)"},{"Id":"1155668396","IsPullRequest":true,"CreatedAt":"2022-03-02T22:23:21","Actor":"ericstj","Number":"6104","RawContent":null,"Title":"Updating to build '20220222.7' of 'https://github.com/dotnet/arcade'","State":"closed","Body":"Darc update of \".NET 6 Eng\" channel","Url":"https://github.com/dotnet/machinelearning/pull/6104","RelatedDescription":"Closed or merged PR \"Updating to build '20220222.7' of 'https://github.com/dotnet/arcade'\" (#6104)"},{"Id":"1145809718","IsPullRequest":true,"CreatedAt":"2022-03-02T00:59:11","Actor":"dotnet-maestro[bot]","Number":"6095","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 97926d79-6b8b-4d32-c8db-08d9d479971c\r\n- **Build**: 20220224.4\r\n- **Date Produced**: February 24, 2022 11:36:45 PM UTC\r\n- **Commit**: f7136626d0109856df867481219eb7366951985d\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 7.0.0-beta.22111.10 to 7.0.0-beta.22124.4][2]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22111.10 to 7.0.0-beta.22124.4][2]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 7.0.0-beta.22111.10 to 7.0.0-beta.22124.4][2]\r\n  - **Microsoft.DotNet.SignTool**: [from 7.0.0-beta.22111.10 to 7.0.0-beta.22124.4][2]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22111.10 to 7.0.0-beta.22124.4][2]\r\n\r\n[2]: https://github.com/dotnet/arcade/compare/ff6cc4e...f713662\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6095","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6095)"},{"Id":"1154083361","IsPullRequest":false,"CreatedAt":"2022-03-02T00:50:55","Actor":"AbhayGaur","Number":"6102","RawContent":null,"Title":"Analysis of score given as output by binary classification algorithms","State":"closed","Body":"Binary classification algorithm like Lbfgs, fasttree etc produce score generated by trained model for test cases but the range of score seems to be often very wide resulting in probability either showing as very close to 0 or very close to 1. Is there a way that range of the score function can be estimated before evaluating the results. Really helps with scenarios where threshold can be a variable and a custom calibration needs to be used. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/6102","RelatedDescription":"Closed issue \"Analysis of score given as output by binary classification algorithms\" (#6102)"},{"Id":"1150097318","IsPullRequest":false,"CreatedAt":"2022-03-02T00:39:48","Actor":"TusharMalap","Number":"6097","RawContent":null,"Title":"How can perform percentage predication in ml.net? ","State":"closed","Body":"I want my features percentage on targeted variable/label.\r\nFor example Movie -is my targeted variable and I want to predict genre of that movie like Romantic=99.98% Comedy=00.01% thriller=00.01\r\ni.e.. Romantic + comedy + Thriller =100%\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6097","RelatedDescription":"Closed issue \"How can perform percentage predication in ml.net? \" (#6097)"},{"Id":"1155843983","IsPullRequest":true,"CreatedAt":"2022-03-02T00:01:36","Actor":"LittleLittleCloud","Number":"6105","RawContent":null,"Title":"enable final newline for json file","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6105","RelatedDescription":"Closed or merged PR \"enable final newline for json file\" (#6105)"},{"Id":"1163268832","IsPullRequest":false,"CreatedAt":"2022-03-01T17:53:18","Actor":"LittleLittleCloud","Number":"6120","RawContent":null,"Title":"Probability is missing for FastForest binary classifier","State":"open","Body":"As title\r\n\r\n_Originally posted by @andrasfuchs in https://github.com/dotnet/machinelearning-modelbuilder/issues/2042#issuecomment-1054694178_","Url":"https://github.com/dotnet/machinelearning/issues/6120","RelatedDescription":"Open issue \"Probability is missing for FastForest binary classifier\" (#6120)"},{"Id":"1154790712","IsPullRequest":true,"CreatedAt":"2022-03-01T07:40:38","Actor":"michaelgsharp","Number":"6103","RawContent":null,"Title":"New build pools for official builds","State":"closed","Body":"New build pools for official build and any changes required for that.\r\n\r\nUpdated the api compat to the latest version.","Url":"https://github.com/dotnet/machinelearning/pull/6103","RelatedDescription":"Closed or merged PR \"New build pools for official builds\" (#6103)"},{"Id":"1150989358","IsPullRequest":true,"CreatedAt":"2022-02-26T00:23:03","Actor":"jeffhandley","Number":"6101","RawContent":null,"Title":"Test PR board automation","State":"closed","Body":"A blank line was added to create a test PR for testing our project board automation. Please ignore this PR.","Url":"https://github.com/dotnet/machinelearning/pull/6101","RelatedDescription":"Closed or merged PR \"Test PR board automation\" (#6101)"},{"Id":"1150979343","IsPullRequest":false,"CreatedAt":"2022-02-26T00:21:28","Actor":"jeffhandley","Number":"6100","RawContent":null,"Title":"Testing issue triage automation","State":"closed","Body":"This issue is being used to test the issue triage automation that has been added to the repository. Please ignore.","Url":"https://github.com/dotnet/machinelearning/issues/6100","RelatedDescription":"Closed issue \"Testing issue triage automation\" (#6100)"},{"Id":"1149981150","IsPullRequest":true,"CreatedAt":"2022-02-25T22:15:01","Actor":"jeffhandley","Number":"6096","RawContent":null,"Title":"Add the generated fabricbot config","State":"closed","Body":"Based on dotnet/runtime#65875. This adds a fabricbot config to the repo to set up automation for issue and PR boards.","Url":"https://github.com/dotnet/machinelearning/pull/6096","RelatedDescription":"Closed or merged PR \"Add the generated fabricbot config\" (#6096)"},{"Id":"1150824752","IsPullRequest":false,"CreatedAt":"2022-02-25T20:12:06","Actor":"gjiremadzeBECKMAN","Number":"6098","RawContent":null,"Title":"Protobuf Parsing Failed when loading Keras model with custom layer","State":"open","Body":"Hey all I'm having an error when trying to load a keras model with a custom layer. When trying to call Transforms.ApplyOnnxModel(modelFile) I'm receiving an exception:\r\n\r\nMicrosoft.ML.OnnxRuntime.OnnxRuntimeException: '[ErrorCode:InvalidProtobuf] Protobuf parsing failed.'\r\n\r\nHas anyone tried loading models with custom layers with onnxruntime and have you had any success?\r\n\r\nDoes anyone know which ONNX opsets are supported in the current ML.NET? Or where I can find this information?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6098","RelatedDescription":"Open issue \"Protobuf Parsing Failed when loading Keras model with custom layer\" (#6098)"},{"Id":"1143799501","IsPullRequest":true,"CreatedAt":"2022-02-18T23:41:23","Actor":"LittleLittleCloud","Number":"6093","RawContent":null,"Title":"Update MicrosoftCodeAnalysisCSharpVersion to 3.9.0","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6093","RelatedDescription":"Closed or merged PR \"Update MicrosoftCodeAnalysisCSharpVersion to 3.9.0\" (#6093)"},{"Id":"1141274245","IsPullRequest":false,"CreatedAt":"2022-02-17T12:26:51","Actor":"JulianusIV","Number":"6092","RawContent":null,"Title":"CL with Binary Logistic Regression","State":"open","Body":"Hello,\r\nI am currently testing some stuff with ML.NET, specifically Binary Logistic Regression, and trying to get CL to work on that.\r\nTo do that I found a few different articles, mainly [this one](https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/retrain-model-ml-net), which I followed as closely as the algorithm allowed.\r\nHowever when trying to get the parameters from a loaded model, and matching that to ``LinearRegressionModelParameters``, it just returns ``null`` despite previously having data.\r\n\r\nThis is how I save my model and pipeline:\r\n```cs\r\nMLContext mLContext = new MLContext();\r\n\r\nvar dataPrepEstimator = mLContext.Transforms.Text.FeaturizeText(inputColumnName: @\"comment_text\", outputColumnName: @\"comment_text\")\r\n  .Append(mLContext.Transforms.Concatenate(@\"Features\", new[] { @\"comment_text\" }))\r\n  .Append(mLContext.Transforms.NormalizeMinMax(@\"Features\", @\"Features\"));\r\n\r\nvar _data = GetData(mLContext);\r\n\r\nvar transformer = dataPrepEstimator.Fit(_data);\r\n\r\nvar lbfgs = mLContext.BinaryClassification.Trainers.LbfgsLogisticRegression(\"toxic\", \"Features\");\r\n\r\nvar transformedData = transformer.Transform(_data);\r\n\r\nvar trainedModel = lbfgs.Fit(transformedData);\r\n\r\nmLContext.Model.Save(transformer, _data.Schema, \"data_prep_pipeline.zip\");\r\nmLContext.Model.Save(trainedModel, _data.Schema, \"model.zip\");\r\n```\r\n\r\nAnd this is how I load them again:\r\n```cs\r\nvar dataPrepPipeline = mLContext.Model.Load(\"data_prep_pipeline.zip\", out _);\r\nvar _trainedModel = mLContext.Model.Load(\"model.zip\", out _);\r\n\r\n//This next line assigns a object of type Microsoft.ML.Calibrators.ParameterMixingCalibratedModelParameters<Microsoft.ML.Trainers.LinearBinaryModelParameters, Microsoft.ML.Calibrators.PlattCalibrator> to originalParams (according to the debugger)\r\nvar originalParams = ((ISingleFeaturePredictionTransformer<object>)_trainedModel).Model;\r\n//this next line just results in originalParamsAsLMP being null\r\nvar originalParamsAsLMP = originalParams as LinearModelParameters;\r\n\r\nvar newData = GetData(mLContext);\r\n\r\nvar transformedNewData = dataPrepPipeline.Transform(newData);\r\n\r\nvar retrainedModel = mLContext.BinaryClassification.Trainers.LbfgsLogisticRegression(\"toxic\", \"Features\").Fit(transformedNewData, originalParamsAsLMP);\r\n```\r\n\r\nI have seen in the article I mentioned that the algorithms have different parameter outputs, but cant seem to find the correct one for ``LbfgsLogisticRegression`` \r\nonly thing I found was the one I am currently using, which doesn't work for me, so it seems like I either missed something, or made a mistake in my implementation. Can anyone help me with this?","Url":"https://github.com/dotnet/machinelearning/issues/6092","RelatedDescription":"Open issue \"CL with Binary Logistic Regression\" (#6092)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-03-09T03:30:22.5406679Z","RunDurationInMilliseconds":503}