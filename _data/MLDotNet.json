{"Data":{"GitHub":{"Issues":[{"Id":"693584297","IsPullRequest":false,"CreatedAt":"2020-09-04T20:24:24","Actor":"rspaulino","Number":"5388","RawContent":null,"Title":"Typo - anMicrosoft","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/5370692f6d1e6f1f686596d530032b4226dc9e80/src/Microsoft.ML.Data/DataLoadSave/DataOperationsCatalog.cs#L66\r\n\r\nTypo:\r\ndata: The enumerable data containing type TRow to convert to anMicrosoft.ML.IDataView .\r\n\r\nShould be:\r\ndata: The enumerable data containing type TRow to convert to an Microsoft.ML.IDataView.\r\n\r\n<img width=\"625\" alt=\"Screen Shot 2020-09-04 at 4 22 45 PM\" src=\"https://user-images.githubusercontent.com/378671/92282080-f33eb900-eeca-11ea-87aa-c4d00817aaaa.png\">\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5388","RelatedDescription":"Open issue \"Typo - anMicrosoft\" (#5388)"},{"Id":"693178229","IsPullRequest":false,"CreatedAt":"2020-09-04T13:36:04","Actor":"PMGruber","Number":"5387","RawContent":null,"Title":"Image preprocessing in pipeline results in different prediction value then manual preprocessing","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n      Windows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\n      .net Core 3.1\r\n- **ML.NET Version (eg., dotnet --info)**: \r\n      ML.NET 1.5.1\r\n### Issue\r\n\r\n- **What did you do?**\r\nWith my ML.NET code I load an existing TensorFlow Model for image classification and execute it for a single image. This I do in two different ways where the difference is how I generate the input data for the prediction.\r\nV1: Load bitmap with \"normal\" C# code and manually create the float array that is used for prediction directly.\r\nV2: Use ML.NET pipeline for preprocessing (Load image, resize, extract pixels) before it goes into prediction.\r\n\r\n- **What happened?**\r\nThe two variants result in different prediction values.\r\n\r\n- **What did you expect?**\r\nThe same prediction result for both variants.\r\n\r\n### Source code / logs\r\n\r\nThe model uses an image in float representation as input (image count, image height, image width, image channels)\r\n`Vector<Single, 275, 384, 3>`\r\nand returns as result a list of probabilities.\r\n\r\nThe test bitmap is a grayscale image with the same size like expected from the model (384x275).\r\n\r\nWhen the model is executed with python code following preprocessing is performed (load image, copy channel to generate a \"RGB\" image, extend the required 4th dimension)\r\n```\r\nimg = plt.imread(path_image)\r\nimg = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)\r\nimg = np.expand_dims(img, axis=0)\r\n```\r\nWhen prediction is executed the best match is ~27,71%.\r\n\r\nThe same workflow I implemented with ML.NET. The classify method simply writes the results in console window.\r\n```\r\nvar image = new Bitmap(_predictSingleImagePath);\r\nvar floatImage = VerySlowBitmapTo1dFloatArrayConverter(image);\r\n\r\nMLContext mlContextV1 = new MLContext();\r\nITransformer modelV1 = GenerateModelV1(mlContextV1);\r\nClassifySingleImageV1(mlContextV1, modelV1, floatImage);\r\n```\r\n\r\nFor preprocessing I extract pixel values in a very easy way and \"convert and copy\" them to my 1d float representation of the image.\r\n```\r\nprivate static float[] VerySlowBitmapTo1dFloatArrayConverter(Bitmap image)\r\n{\r\n    List<float> floatImage = new List<float>();\r\n\r\n    for (int row = 0; row < image.Height; ++row)\r\n    {\r\n        for (int column = 0; column < image.Width; ++column)\r\n        {\r\n             var pixelValues = image.GetPixel(column, row);\r\n             floatImage.Add(pixelValues.R / 255.0f);\r\n             floatImage.Add(pixelValues.G / 255.0f);\r\n             floatImage.Add(pixelValues.B / 255.0f);\r\n        }\r\n    }\r\n\r\n    return floatImage.ToArray();\r\n }\r\n```\r\n\r\nAfter loading the model I create a pipeline that just contains the execution of the model.\r\n```\r\npublic static ITransformer GenerateModelV1(MLContext mlContext)\r\n{\r\n    IDataView trainingData = mlContext.Data.LoadFromEnumerable(new List<ImageDataV1>());\r\n           \r\n    var tensorFlowModel = mlContext.Model.LoadTensorFlowModel(_TensorFlowModel);\r\n           \r\n    IEstimator<ITransformer> pipeline = tensorFlowModel.ScoreTensorFlowModel(outputColumnNames: new[] { \"StatefulPartitionedCall\" }, inputColumnNames: new[] { \"serving_default_input_4\" }, addBatchDimensionInput: false);\r\n                                            \r\n    ITransformer model = pipeline.Fit(trainingData);\r\n\r\n    return model;\r\n}\r\n```\r\n\r\nFinally I perform a prediction and write the result to console.\r\n```\r\npublic static void ClassifySingleImageV1(MLContext mlContext, ITransformer model, float[] image)\r\n{\r\n    var imageData = new ImageDataV1()\r\n    {\r\n        Image = image\r\n    };\r\n\r\n    var predictor = mlContext.Model.CreatePredictionEngine<ImageDataV1, ImagePrediction>(model);\r\n    var prediction = predictor.Predict(imageData);\r\n\r\n    Console.WriteLine($\"Image predicted with score: {prediction.Scores.Max()} \");\r\n\r\n    foreach(var score in prediction.Scores)\r\n    {\r\n        Console.WriteLine(score.ToString());\r\n    }\r\n}\r\n\r\npublic class ImageDataV1\r\n{\r\n    [LoadColumn(0), ColumnName(\"serving_default_input_4\"), VectorType(316800)]\r\n    public float[] Image;\r\n}\r\n\r\npublic class ImagePrediction\r\n{\r\n    [ColumnName(\"StatefulPartitionedCall\")]\r\n    public float[] Scores;\r\n}\r\n```\r\nWith this code I get as best match the value 0,27709773, so ~27,71% like the python version.\r\n\r\n\r\n\r\nSo far so good. Now I make the same but instead of the manual image handling I use pipeline methods.\r\n\r\nSame workflow, just with different method calls.\r\n```\r\nMLContext mlContextV2 = new MLContext();\r\nITransformer modelV2 = GenerateModelV2(mlContextV2);\r\nClassifySingleImageV2(mlContextV1, modelV2);\r\n```\r\nAlso model execution is quite the same.\r\n```\r\npublic static void ClassifySingleImageV2(MLContext mlContext, ITransformer model)\r\n{\r\n    var imageData = new ImageDataV2()\r\n    {\r\n        ImagePath = _predictSingleImagePath\r\n    };\r\n\r\n    var predictor = mlContext.Model.CreatePredictionEngine<ImageDataV2, ImagePrediction>(model);\r\n    var prediction = predictor.Predict(imageData);\r\n\r\n    Console.WriteLine($\"Image: {Path.GetFileName(imageData.ImagePath)} predicted with score: {prediction.Scores.Max()} \");\r\n\r\n    foreach (var score in prediction.Scores)\r\n    {\r\n        Console.WriteLine(score.ToString());\r\n    }\r\n}\r\n```\r\nThe difference is the used pipeline.\r\nI load the image from the given path.\r\nThen I \"resize\" the image the get a \"known-size image\".\r\nFinal preprocessing step is to get float values from the bitmap.\r\n```\r\npublic static ITransformer GenerateModelV2(MLContext mlContext)\r\n{\r\n    IDataView trainingData = mlContext.Data.LoadFromEnumerable(new List<ImageDataV2>());\r\n\r\n    var tensorFlowModel = mlContext.Model.LoadTensorFlowModel(_TensorFlowModel);\r\n\r\n    IEstimator<ITransformer> pipeline = mlContext.Transforms.LoadImages(outputColumnName: \"serving_default_input_4\", imageFolder: _imagesFolder, inputColumnName: nameof(ImageDataV2.ImagePath));\r\n    pipeline = pipeline.Append(mlContext.Transforms.ResizeImages(outputColumnName: \"serving_default_input_4\", imageWidth: ImageSettings.ImageWidth, imageHeight: ImageSettings.ImageHeight, inputColumnName: \"serving_default_input_4\"));\r\n    pipeline = pipeline.Append(mlContext.Transforms.ExtractPixels(\r\n                                                        outputColumnName: \"serving_default_input_4\",\r\n                                                        inputColumnName: \"serving_default_input_4\",\r\n                                                        interleavePixelColors: false,\r\n                                                        offsetImage: 0,\r\n                                                        colorsToExtract: ImagePixelExtractingEstimator.ColorBits.Rgb,\r\n                                                        orderOfExtraction: ImagePixelExtractingEstimator.ColorsOrder.ARGB,\r\n                                                        scaleImage: 1,\r\n                                                        outputAsFloatArray: true));\r\n    pipeline = pipeline.Append(tensorFlowModel.ScoreTensorFlowModel(outputColumnNames: new[] { \"StatefulPartitionedCall\" }, inputColumnNames: new[] { \"serving_default_input_4\" }, addBatchDimensionInput: false));                   \r\n                    \r\n    ITransformer model = pipeline.Fit(trainingData);\r\n\r\n    return model;\r\n}\r\n\r\npublic class ImagePrediction\r\n{\r\n    [ColumnName(\"StatefulPartitionedCall\")]\r\n    public float[] Scores;\r\n}\r\n\r\npublic class ImageDataV2\r\n{\r\n    [LoadColumn(0)]\r\n    public string ImagePath;\r\n}\r\n```\r\nWith this pipeline I get a best match of ~49,79%. Quite different from the other implementation. I played a little bit with parameters but was not even close to 27%.\r\n\r\nSome suggestion what I'm doing wrong in preprocessing part of the pipeline?\r\n\r\nI searched for information how I can check the interim results from the pipeline to further trace down the difference. Unforunately I didn't find something that helps me (only things about schemas). Does anybody know some useful documentation/tutorial regarding that topic?\r\n\r\nThanks and regards","Url":"https://github.com/dotnet/machinelearning/issues/5387","RelatedDescription":"Open issue \"Image preprocessing in pipeline results in different prediction value then manual preprocessing\" (#5387)"},{"Id":"693045830","IsPullRequest":true,"CreatedAt":"2020-09-04T11:00:04","Actor":"mstfbl","Number":"5386","RawContent":null,"Title":"Added support for RankingMetrics with CrossValSummaryRunner","State":"open","Body":"Fix #5381 \r\n\r\nPreviously, `AutoFitRankingTest` was never testing `RankingMetrics` with `CrossValSummaryRunner` due to the row limit for cross validation testing, and as the MLSR dataset that `trainDataView` is pulling from is large:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/f87a3bbd8adb12934dae0a0060813ce9b7500664/test/Microsoft.ML.AutoML.Tests/AutoFitTests.cs#L123-L141\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/6bae29fc342bf192a36a69484d62db8d6266f8df/src/Microsoft.ML.AutoML/API/ExperimentBase.cs#L109-L130\r\n\r\nAs a result, this lacking of support for `RankingMetrics` with `CrossValSummaryRunner` was not noticed until Issue #5381. This PR adds support for this case, and edits the `RankingMetrics` AutoML unit tests to include testing of `RankingMetrics` with `CrossValSummaryRunner` as well.","Url":"https://github.com/dotnet/machinelearning/pull/5386","RelatedDescription":"Open PR \"Added support for RankingMetrics with CrossValSummaryRunner\" (#5386)"},{"Id":"692940167","IsPullRequest":false,"CreatedAt":"2020-09-04T09:08:58","Actor":"yousiftouma","Number":"5385","RawContent":null,"Title":"Using OnnxTransformer throws TypeInitializationException","State":"open","Body":"This issue is a duplicate of https://github.com/dotnet/machinelearning/issues/5262 which was closed until further feedback was provided. Feedback was provided but haven't received any activity. I don't know how to notify properly to get it reopened. IMO, the best course of action is to reopen that issue and close this. Sorry for any inconvenience.\r\n\r\n### System information\r\n\r\n- **OS version/distro**: Windows 7\r\n- **.NET Version (eg., dotnet --info)**: core 3.1\r\n\r\n### Issue\r\nWhen trying to use OnnxTransformer, the native libraries aren't loaded properly. I can see them under bin\\Debug\\netcoreapp3.1\\runtimes\\(platform)\\native.\r\nIf I use package version 1.4.0 of OnnxTransformer, without installing the runtime myself, it works.\r\nI couldn't find any docs regarding the requirement to install the runtime manually (I figured it out by browsing all over the place, but not through docs really). I suppose this should be clear when you're not using the onnxruntime package explicitly, but rather the higher level API of OnnxTransformer?\r\n\r\nOn a separate note: Is it sufficient to install the GPU natives and use the `fallbackToCpu` flag of `ApplyOnnxModel` to be able to run inferencing on both CPU and GPU? I'm having a hard time finding this documented.\r\n\r\n- **What did you do?**\r\nInstalled `Microsoft.ML.OnnxTransformer` 1.5.0 and `Microsoft.ML.OnnxRuntime` 1.3.0 and used `ApplyOnnxModel` in a pipeline.\r\n\r\n- **What happened?**\r\nCalling `ApplyOnnxModel` throws `System.TypeInitializationException`.\r\n\r\n- **What did you expect?**\r\nThat my ONNX model can be used.\r\n\r\n### Source code / logs\r\nInner exception message:\r\n\r\n\"Unable to load DLL 'onnxruntime' or one of its dependencies: The specified module could not be found. (0x8007007E)\"\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5385","RelatedDescription":"Open issue \"Using OnnxTransformer throws TypeInitializationException\" (#5385)"},{"Id":"689561257","IsPullRequest":false,"CreatedAt":"2020-09-04T06:10:32","Actor":"lisahua","Number":"5379","RawContent":null,"Title":"[AnomalyDetection] confidence bound should include non-anomaly points","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: ML.Net 1.5.1\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?** \r\nWe use the API `DetectEntireAnomalyBySrCnn`\r\n\r\n- **What happened?**\r\n\r\nWe see some points are outside of the confidence bound yet not detected as anomalies. This is a bit confusing on why these points are not anomalies.\r\n\r\n![image](https://user-images.githubusercontent.com/3010893/91775351-b8bddf00-eb9f-11ea-9bad-c2ab02d08601.png)\r\n\r\n- **What did you expect?**\r\n\r\nThe non-anomaly points should be included in the confidence bound.\r\n\r\n### Source code / logs\r\n\r\nPR: #5374 \r\n\r\nProposed change: Adjust the confidence bound so that it includes the non-anomaly points\r\n![image](https://user-images.githubusercontent.com/3010893/91775507-10f4e100-eba0-11ea-86e1-621b1f5dafd9.png)\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5379","RelatedDescription":"Closed issue \"[AnomalyDetection] confidence bound should include non-anomaly points\" (#5379)"},{"Id":"689021492","IsPullRequest":true,"CreatedAt":"2020-09-04T06:10:32","Actor":"guinao","Number":"5374","RawContent":null,"Title":"Optimize SR Cnn algorithm","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nChanges.\r\n1. Adjust the expected value for not anomaly points.\r\n2. Add minimum length checks for STL decompose to prevent exceptions. \r\n\r\nAssociated Issues.\r\n#5379 ","Url":"https://github.com/dotnet/machinelearning/pull/5374","RelatedDescription":"Closed or merged PR \"Optimize SR Cnn algorithm\" (#5374)"},{"Id":"691266607","IsPullRequest":false,"CreatedAt":"2020-09-03T09:40:15","Actor":"AdamMcIntosh","Number":"5383","RawContent":null,"Title":"Question about predictor output: Score and PredictedLabel columns","State":"closed","Body":"Using the linear svm algorithm in ML.NET I am trying to get the probability that a prediction is in a certain class. However, probability is never outputted and according to this GitHub issue (https://github.com/dotnet/machinelearning/issues/376#issuecomment-399282699), a regression SVM doesn't output probability.\r\n\r\nIs there something I am missing or is getting the probability of a linear svm prediction possible in ML.Net?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5383","RelatedDescription":"Closed issue \"Question about predictor output: Score and PredictedLabel columns\" (#5383)"},{"Id":"691555762","IsPullRequest":false,"CreatedAt":"2020-09-03T02:16:11","Actor":"rdorris","Number":"5384","RawContent":null,"Title":"States that TextFeaturizingEstimator handles TF-IDF","State":"closed","Body":"\r\n[Enter feedback here]\r\nNot seeing any reference to how to set TF, IDF or TF-IDF options. Are you sure TextFeaturizingEstimator actually uses that algorithm?\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: deeb31e0-6843-e9ae-e6ad-028c4ec9121b\r\n* Version Independent ID: bf1e4b11-7652-7da4-4791-aa2d9488971c\r\n* Content: [TextFeaturizingEstimator Class (Microsoft.ML.Transforms.Text)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.text.textfeaturizingestimator?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms.Text/TextFeaturizingEstimator.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms.Text/TextFeaturizingEstimator.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/5384","RelatedDescription":"Closed issue \"States that TextFeaturizingEstimator handles TF-IDF\" (#5384)"},{"Id":"690797243","IsPullRequest":false,"CreatedAt":"2020-09-02T07:42:15","Actor":"evo11x","Number":"5382","RawContent":null,"Title":"LightGbm System.InvalidOperationException after the latest update","State":"open","Body":"### System information\r\n\r\n- Win10/x64\r\n- .Net 4.8\r\n\r\n### Issue\r\n\r\n- It crashes in this line var model = pipeline.Fit(trainData); \r\n- I get this error: System.InvalidOperationException: 'LightGBM Error, code is -1, error message is 'Unknown importance type: only support split=0 and gain=1'.'\r\n\r\nWith the previous version everything worked fine and nothing was modified in my source code since it worked.\r\n\r\nThis is my gbm setting \r\n.Append(mlContext.Regression.Trainers.LightGbm(\"PercentPredict\", \"Features\",null,null,null,null,200));\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5382","RelatedDescription":"Open issue \"LightGbm System.InvalidOperationException after the latest update\" (#5382)"},{"Id":"689703001","IsPullRequest":true,"CreatedAt":"2020-09-01T22:29:06","Actor":"mstfbl","Number":"5380","RawContent":null,"Title":"Added check for paths with wildcards to LoadFromTextFile","State":"closed","Body":"Fix #5377 \r\n\r\nAdded validity check for a given path string that may contain wildcards such as \"*\", which result in errors when given to `Directory.Exists`.","Url":"https://github.com/dotnet/machinelearning/pull/5380","RelatedDescription":"Closed or merged PR \"Added check for paths with wildcards to LoadFromTextFile\" (#5380)"},{"Id":"689283644","IsPullRequest":false,"CreatedAt":"2020-09-01T22:29:06","Actor":"rspaulino","Number":"5377","RawContent":null,"Title":"LoadFromTextFile<ModelInput>(\"./data/*\") - System.ArgumentOutOfRangeException: File does not exist at path","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:macOS 10.15.6\r\n- **.NET Version (eg., dotnet --info)**: \r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.100-preview.8.20417.9\r\n Commit:    fc62663a35\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.15\r\n OS Platform: Darwin\r\n RID:         osx.10.15-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/5.0.100-preview.8.20417.9/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-preview.8.20407.11\r\n  Commit:  bf456654f9\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nFollow this instruction: https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/load-data-ml-net#load-from-files-in-a-single-directory\r\n- **What happened?**\r\n`Unhandled exception. System.ArgumentOutOfRangeException: File does not exist at path: ./data/* (Parameter 'path')`\r\n- **What did you expect?**\r\nI expected to load the files from the directory.\r\n\r\n### Source code / logs\r\n```c#\r\nvar mlContext = new MLContext();\r\n\r\nvar loader = mlContext.Data.CreateTextLoader<ModelInput>();\r\n\r\n//THIS WORK\r\nvar d = loader.Load(\"./data/*\");\r\n\r\n//THIS DOESN'T\r\nvar data = mlContext.Data.LoadFromTextFile<ModelInput>(\"./data/*\");\r\n```\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5377","RelatedDescription":"Closed issue \"LoadFromTextFile<ModelInput>(\"./data/*\") - System.ArgumentOutOfRangeException: File does not exist at path\" (#5377)"},{"Id":"690022657","IsPullRequest":false,"CreatedAt":"2020-09-01T10:25:06","Actor":"jwood803","Number":"5381","RawContent":null,"Title":"AutoML Ranking Error: \"RankingMetrics Not Implemented\"","State":"open","Body":"When running the Ranking AutoML experiment on [this data](https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KTrain720kRows.tsv) from the Ranking sample, I seem to get a `Metric Microsoft.ML.Data.RankingMetrics not implemented` error during the `Execute` method.\r\n\r\nI'm probably doing something wrong but I'm not sure what I'm missing.\r\n\r\n```csharp\r\nvar context = new MLContext();\r\n\r\nvar data = context.Data.LoadFromTextFile<RankingData>(\"./ranking.tsv\", separatorChar: '\\t');\r\n\r\nvar settings = new RankingExperimentSettings\r\n{\r\n      MaxExperimentTimeInSeconds = 300,\r\n      OptimizingMetric = RankingMetric.Ndcg\r\n};\r\n\r\nvar experiment = context.Auto().CreateRankingExperiment(settings);\r\n\r\nvar results = experiment.Execute(data);\r\n```\r\n\r\nHere's the [full code](https://github.com/jwood803/MLNetExamples/blob/master/MLNetExamples/AutoMLRanking/Program.cs), if needed.","Url":"https://github.com/dotnet/machinelearning/issues/5381","RelatedDescription":"Open issue \"AutoML Ranking Error: \"RankingMetrics Not Implemented\"\" (#5381)"},{"Id":"689460452","IsPullRequest":true,"CreatedAt":"2020-08-31T23:37:28","Actor":"mstfbl","Number":"5378","RawContent":null,"Title":"Added getter for InputObjectDataView's Data value in documentation","State":"closed","Body":"#Fixed #5371 \r\n\r\nAdded getter function to the `private readonly IEnumerable<InputObject> _data` to prevent call to `InputObjectDataView`'s private value.","Url":"https://github.com/dotnet/machinelearning/pull/5378","RelatedDescription":"Closed or merged PR \"Added getter for InputObjectDataView's Data value in documentation\" (#5378)"},{"Id":"688640817","IsPullRequest":false,"CreatedAt":"2020-08-31T23:37:28","Actor":"Villix-Main","Number":"5371","RawContent":null,"Title":"Cursor class attempts to access an private class member","State":"closed","Body":"\r\n[Enter feedback here]\r\nThe Cursor class that is showed in the code preview attempts to access the private member \"parent._data\" from it's constructor.\r\n```\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: cebd0074-01d3-d048-305a-cfea8b4083de\r\n* Version Independent ID: 7f1aaf72-e345-e334-6237-d92abd3aa6d3\r\n* Content: [IDataView Interface (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.idataview?view=ml-dotnet#feedback)\r\n* Content Source: [dotnet/xml/Microsoft.ML/IDataView.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/IDataView.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/5371","RelatedDescription":"Closed issue \"Cursor class attempts to access an private class member\" (#5371)"},{"Id":"689178366","IsPullRequest":false,"CreatedAt":"2020-08-31T21:47:03","Actor":"ladodc","Number":"5376","RawContent":null,"Title":"ApplyOnnxModel with parameter ONNX model as byte[] is missing, why?","State":"closed","Body":"Hi, \r\n\r\nin ONNX Runtime exists possibility to create session from byte array like this. \r\n**public InferenceSession(byte[] model);**\r\nWhy is such a possibility missing in ML.Net OnnxCatalog.ApplyOnnxModel method.\r\nApplyOnnxModel allows only:\r\n**ApplyOnnxModel ( ... string modelFile ...)**\r\nI think it would make definitely sense. Becouse it would allow loading onnx model direct from database and not only from file system.\r\nIs this planed for the future release? Or is there any workaround or some reason why is it not implemented?\r\nI would be happy for any comments. ","Url":"https://github.com/dotnet/machinelearning/issues/5376","RelatedDescription":"Closed issue \"ApplyOnnxModel with parameter ONNX model as byte[] is missing, why?\" (#5376)"},{"Id":"689077007","IsPullRequest":false,"CreatedAt":"2020-08-31T09:54:42","Actor":"marek-safar","Number":"5375","RawContent":null,"Title":"Error NETSDK1032: The RuntimeIdentifier platform 'browser-wasm' and the PlatformTarget 'x64' must be compatible","State":"open","Body":"---\r\n**Issue moved from dotnet/runtime#41556**\r\n- Please respond to @andersson09.\r\n\r\n---\r\n\r\n_From @andersson09 on Saturday, August 29, 2020 6:14:29 PM_\r\n\r\n<!--This is just a template - feel free to delete any and all of it and replace as appropriate.-->\r\n\r\n### Description\r\n\r\nI want to run **Microsoft.ML 1.5.1** in Blazor. When running the application (dotnet run) I get:\r\n\"Microsoft.ML currently supports 'x64' and 'x86' processor architectures. Please ensure your application is targeting 'x64' or 'x86'\". \r\n\r\nIf I add <PlatformTarget>x64</PlatformTarget> to csproj to fix the above issue I receive:\r\n\"Error NETSDK1032: The RuntimeIdentifier platform 'browser-wasm' and the PlatformTarget 'x64' must be compatible.\"\r\n\r\n<!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  -->\r\n\r\n### Configuration\r\n\r\n5.0.100-preview.8.20417.9\r\nWindows 10\r\n\r\n<!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n  -->\r\n\r\n### Regression?\r\n\r\nThis used to work fine with Blazor 3.2.1. \r\n\r\n<!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don't know, that's OK.\r\n  -->\r\n\r\n### Other information\r\n\r\n<!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  -->\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5375","RelatedDescription":"Open issue \"Error NETSDK1032: The RuntimeIdentifier platform 'browser-wasm' and the PlatformTarget 'x64' must be compatible\" (#5375)"},{"Id":"688769243","IsPullRequest":true,"CreatedAt":"2020-08-30T18:38:05","Actor":"harishsk","Number":"5373","RawContent":null,"Title":"Created v1.5.2 relase notes","State":"open","Body":"Created v1.5.2 release notes from v1.5.1 release notes. ","Url":"https://github.com/dotnet/machinelearning/pull/5373","RelatedDescription":"Open PR \"Created v1.5.2 relase notes\" (#5373)"},{"Id":"688744357","IsPullRequest":false,"CreatedAt":"2020-08-30T16:01:55","Actor":"sps014","Number":"5372","RawContent":null,"Title":"[Proposal] Create Keras Neural Network Like API in C# (Create Survey First)","State":"open","Body":"In the Last ML.NET Community Standup, we discussed the possibility of having a Keras Like API in C#. [(YouTube Talk Link) ](https://youtu.be/2gjMrZ9XbRQ?t=3339)\r\n\r\nThe goal is to have similar native C# API that can also take advantage of GPU and also being independent of Tensorflow Binding for DotNet for better performance scenarios.\r\n\r\nKeras is simple and easy to use, Keras API in Python looks like this\r\n```python\r\nnetwork = models.Sequential()\r\nnetwork.add(layers.Dense(784, activation='relu', input_shape=(28 * 28,)))\r\nnetwork.add(layers.Dense(784, activation='relu', input_shape=(28 * 28,)))\r\nnetwork.add(layers.Dense(10, activation='softmax'))\r\nnetwork.compile(optimizer='adam',\r\n                loss='categorical_crossentropy',\r\n                metrics=['accuracy'])\r\n```\r\n\r\n\r\nMost of us are aware of the community bindings and libraries like Tensorflow.Net etc to name a few but for high-performance scenarios, these libraries seem to struggle (i guess mainly due to Interop Cost)\r\n\r\nIn my case, with Unity Engine using  MLAgent which also depend on TF(Tensorflow).\r\nNow in Unity for vision-based experiments ie. with convolutional NN based problems, Unity struggles a bit because each frame of the game they need to send pixel data to TF, which is performance costly, now if we had a similar good implementation of Neural Network in C#,  Unity can also get performance improvements around 2 to 4 times (maybe), at least in iteration times.\r\n\r\n### I request ML.NET  Team to create a survey regarding this, so we can share our challenges and use cases and necessity to have a Keras like API.\r\n\r\nThank You.","Url":"https://github.com/dotnet/machinelearning/issues/5372","RelatedDescription":"Open issue \"[Proposal] Create Keras Neural Network Like API in C# (Create Survey First)\" (#5372)"},{"Id":"688233225","IsPullRequest":false,"CreatedAt":"2020-08-28T23:22:53","Actor":"barrybriggs","Number":"5369","RawContent":null,"Title":"Enable access to preloaded data in primitive data types","State":"closed","Body":"I have been using the Accord.Net framework for some time and would like to run it side-by-side with ML.NET in my application. In my application the data exists in memory as a 2D array ```double[,]```. Headings are kept as a separate 1D string array. It would be easy enough to convert to a jagged array or to a .NET DataTable (which I do in various instances for Accord). \r\n\r\nHowever, there does not appear to be any easy way to load the data to ML.NET this way. I've looked at ```mlContext.Data.LoadFromEnumerable``` but it appears that is looking for objects not raw data. It would be massively inefficient to convert the raw data to this approach.\r\n\r\nI'm a newbie to ML.NET so if I'm missing something, my apologies. \r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5369","RelatedDescription":"Closed issue \"Enable access to preloaded data in primitive data types\" (#5369)"},{"Id":"688361399","IsPullRequest":false,"CreatedAt":"2020-08-28T21:20:56","Actor":"sanketshah11","Number":"5370","RawContent":null,"Title":"PredictionEnginePool uses ObjectPool which is not supported on .Net Framework 4.6.2, can we get PredictionEnginePool support for .Net Framework 4.6.2 ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5370","RelatedDescription":"Open issue \"PredictionEnginePool uses ObjectPool which is not supported on .Net Framework 4.6.2, can we get PredictionEnginePool support for .Net Framework 4.6.2 \" (#5370)"},{"Id":"687430294","IsPullRequest":false,"CreatedAt":"2020-08-28T04:45:50","Actor":"JulioAlbinatiCortez","Number":"5366","RawContent":null,"Title":"Issue when providing custom gains to LightGbmRanking","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Not sure, running on AML Compute.\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.0\r\n\r\n### Issue\r\n\r\n- **What did you do?** \r\nI am using the command line interface to train a LightGbmRanking model using a pre-defined set of custom gains. Full command is:\r\n_dotnet /mlnet/MML.dll TrainTest tr=LightGBMRanking{iter=500 customGains=\"0,82,189,435,1000\"} loader=TextLoader{col=SessionGuid:TX:0 col=Features:R4:5-47 col=Label:R4:225} xf=HashTransform{col=GroupId:SessionGuid} data=inputs/train.tsv test=inputs/test.tsv out=outputs/model.zip dout=outputs/pred.tsv\r\nmaml.exe TrainTest test=inputs/test.tsv tr=LightGBMRanking{iter=500 customGains=\"0,82,189,435,1000\"} dout=outputs/pred.tsv loader=TextLoader{col=SessionGuid:TX:0 col=Features:R4:5-47 col=Label:R4:225} data=inputs/train.tsv out=outputs/model.zip xf=HashTransform{col=GroupId:SessionGuid}_\r\n\r\n- **What happened?**\r\nCommand fails suggesting my custom gains are invalid. Full output:\r\n_'0,82,189,435,1000' is not a valid value for the 'customGains' command line option\r\nUsage For 'LightGBMRanking':\r\ncustomGains=<int>\r\n     An array of gains associated to each relevance label. Default value:'0, 3,\r\n     7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095' (short form gains)\r\nsigmoid=<double>\r\n     Parameter for the sigmoid function. Default value:'0.5'\r\nevaluationMetric=[None|Default|MeanAveragedPrecision|NormalizedDiscountedCumulativeGain]\r\n     Evaluation metrics. Default value:'NormalizedDiscountedCumulativeGain'\r\n     (short form em)\r\nnumberOfIterations=<int>\r\n     Number of iterations. Default value:'100' (short form iter)\r\nlearningRate=<double>\r\n     Shrinkage rate for trees, used to prevent over-fitting. Range: (0,1].\r\n     (short form lr)\r\nnumberOfLeaves=<int>\r\n     Maximum leaves for trees. (short form nl)\r\nminimumExampleCountPerLeaf=<int>\r\n     Minimum number of instances needed in a child. (short form mil)\r\nmaximumBinCountPerFeature=<int>\r\n     Maximum number of bucket bin for features. Default value:'255' (short form\r\n     mb)\r\nbooster=<name>{<options>}\r\n     Which booster to use, can be gbtree, gblinear or dart. gbtree and dart use\r\n     tree based model while gblinear uses linear function. Default value:'gbdt'\r\nverbose=[+|-]\r\n     Verbose Default value:'-' (short form v)\r\nsilent=[+|-]\r\n     Printing running messages. Default value:'+'\r\nnumberOfThreads=<int>\r\n     Number of parallel threads used to run LightGBM. (short form nt)\r\nearlyStoppingRound=<int>\r\n     Rounds of early stopping, 0 will disable it. Default value:'0' (short form\r\n     es)\r\nuseCategoricalSplit=[+|-]\r\n     Enable categorical split or not. (short form cat)\r\nhandleMissingValue=[+|-]\r\n     Enable special handling of missing value or not. Default value:'+' (short\r\n     form hmv)\r\nuseZeroAsMissingValue=[+|-]\r\n     Enable usage of zero (0) as missing value. Default value:'-' (short form\r\n     uzam)\r\nminimumExampleCountPerGroup=<int>\r\n     Minimum number of instances per categorical group. Default value:'100'\r\n     (short form mdpg)\r\nmaximumCategoricalSplitPointCount=<int>\r\n     Max number of categorical thresholds. Default value:'32' (short form\r\n     maxcat)\r\ncategoricalSmoothing=<double>\r\n     Lapalace smooth term in categorical feature spilt. Avoid the bias of small\r\n     categories. Default value:'10'\r\nl2CategoricalRegularization=<double>\r\n     L2 Regularization for categorical split. Default value:'10'\r\nseed=<int>\r\n     Sets the random seed for LightGBM to use.\r\nparallelTrainer=<name>{<options>}\r\n     Parallel LightGBM Learning Algorithm Default value:'Single' (short form\r\n     parag)\r\n@<file>\r\n     Read response file for more options\r\nError log has been saved to '/tmp/TLC/Error_20200826_065457_be780834-d247-476d-bb18-e336a332d1eb.log'. Please refer to https://aka.ms/MLNetIssue if you need assistance._\r\n- **What did you expect?**\r\nCustom gains provided are a list of integers, as suggested in the input. Not clear on what is the expected input pattern here beyond that.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5366","RelatedDescription":"Closed issue \"Issue when providing custom gains to LightGbmRanking\" (#5366)"},{"Id":"687543949","IsPullRequest":false,"CreatedAt":"2020-08-27T21:08:08","Actor":"Youssef1313","Number":"5368","RawContent":null,"Title":"Fix API reference snippets","State":"open","Body":"The API reference repository doesn't have issues turned on, so I think it might be suitable here, especially that the broken snippet references used to exist in this repository, but now they don't (or moved somewhere that I can't find).\r\n\r\nSee https://github.com/dotnet/ml-api-docs/pull/142 for details.\r\n\r\ncc: @luisquintanilla ","Url":"https://github.com/dotnet/machinelearning/issues/5368","RelatedDescription":"Open issue \"Fix API reference snippets\" (#5368)"},{"Id":"687530449","IsPullRequest":false,"CreatedAt":"2020-08-27T20:48:06","Actor":"shivanand870","Number":"5367","RawContent":null,"Title":"Method not found: 'Tensorflow.Tensor Tensorflow.tensorflow.truncated_normal(Int32[], Single, Single, Tensorflow.TF_DataType, System.Nullable`1<Int32>, System.String)'.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version 2019 (eg., dotnet --info)**: \r\n-**.Net Framework 4.8\r\n \r\n### Issue\r\ni am not able to Train a Model using C# with MulticlassClassification.Trainers.ImageClassification iam getting below error message\r\n\r\n- **What did you do?**\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\n  var options = new ImageClassificationTrainer.Options()\r\n            {\r\n                FeatureColumnName = \"Image\",\r\n                LabelColumnName = \"Label\",\r\n\r\n                Arch = ImageClassificationTrainer.Architecture.ResnetV2101,\r\n                Epoch = 50,\r\n                BatchSize = 10,\r\n                LearningRate = 0.01f,\r\n                MetricsCallback = (metrics) => Console.WriteLine(metrics),\r\n                ValidationSet = testDataset,\r\n                 EarlyStoppingCriteria = new ImageClassificationTrainer.EarlyStopping(minDelta: 0.001f, patience: 20, metric: ImageClassificationTrainer.EarlyStoppingMetric.Loss)\r\n            };\r\n \r\n            var pipeline = mlContext.MulticlassClassification.Trainers.ImageClassification(options)\r\n                .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName: \"PredictedLabel\", inputColumnName: \"PredictedLabel\"));\r\n\r\n            var trainedModel = pipeline.Fit(trainDataset);\r\n\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\n*****************************************************Error  StackTrace****************************************************\r\nSystem.MissingMethodException\r\n  HResult=0x80131513\r\n  Message=Method not found: 'Tensorflow.Tensor Tensorflow.tensorflow.truncated_normal(Int32[], Single, Single, Tensorflow.TF_DataType, System.Nullable`1<Int32>, System.String)'.\r\n  Source=Microsoft.ML.Vision\r\n  StackTrace:\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.<>c__DisplayClass64_1.<AddFinalRetrainOps>b__4(NameScope <p0>)\r\n   at Tensorflow.Binding.tf_with[T](T py, Action`1 action)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.<>c__DisplayClass64_0.<AddFinalRetrainOps>b__1(NameScope scope)\r\n   at Tensorflow.Binding.tf_with[T](T py, Action`1 action)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.AddFinalRetrainOps(Int32 classCount, String labelColumn, String scoreColumnName, Tensor bottleneckTensor, Boolean isTraining, Boolean useLearningRateScheduler, Single learningRate)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.AddTransferLearningLayer(String labelColumn, String scoreColumnName, Single learningRate, Boolean useLearningRateScheduling, Int32 classCount)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at VWS.ML.API.VWSTrainObjectDetectionAdvancedOptions.CreateImagepipeline() in G:\\Automation\\3.Projects\\VS 2017\\Utility\\VWSMLStudio\\VWS.ML.API\\VWSImageClassification.cs:line 377\r\n   at VWS.ML.API.VWSImageClassification.TrainData(IDataView loadImageData1, String GetInputPath, String GetModelPath, String FeatureColumnName, String ScoreColumnName, String PredictedLabelColumnName, String LabelColumnName) in G:\\Automation\\3.Projects\\VS 2017\\Utility\\VWSMLStudio\\VWS.ML.API\\VWSImageClassification.cs:line 702\r\n   at ConsoleML.Program.Main(String[] args) in G:\\Automation\\3.Projects\\VS 2017\\Utility\\VWSMLStudio\\ConsoleML\\Program.cs:line 20\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5367","RelatedDescription":"Open issue \"Method not found: 'Tensorflow.Tensor Tensorflow.tensorflow.truncated_normal(Int32[], Single, Single, Tensorflow.TF_DataType, System.Nullable`1<Int32>, System.String)'.\" (#5367)"},{"Id":"684630916","IsPullRequest":false,"CreatedAt":"2020-08-26T17:13:12","Actor":"aforoughi1","Number":"5362","RawContent":null,"Title":"Automl.net version 0.17.1, training a Binary Classification model returns misleading quality metrics","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nThe AutoMl Api, stops after one iteration when training a Binary Classification, and the best run model score is set to 1. Therefore, the quality metric always set to prefect values which are misleading. \r\n\r\n- **What happened?**\r\n\r\n// Deugging the source code, I can see  if model is perfect, break\r\nif (_metricsAgent.IsModelPerfect(suggestedPipelineRunDetail.Score))\r\n{\r\n   break;\r\n}\r\n\r\nsuggestedPipelineRunDetail. The score is always 1\r\n\r\n\r\nTrainer                                            Accuracy      AUC    AUPRC  F1-score  Duration\r\n1    AveragedPerceptronBinary        1.0000   1.0000   1.0000    1.0000       0.5\r\n\r\n- **What did you expect?**\r\n\r\n if you run with ML.Net for the same training dataset:\r\n\r\nAccuracy       AUC            F1-Score       Positive Precision  Positive Recall     Negative Precision  Negative Recall\r\n52.26%         52.86%         0.82%          1.00                0.00                0.52                100.00%\r\n\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5362","RelatedDescription":"Closed issue \"Automl.net version 0.17.1, training a Binary Classification model returns misleading quality metrics\" (#5362)"},{"Id":"686202441","IsPullRequest":false,"CreatedAt":"2020-08-26T10:21:22","Actor":"stulzq","Number":"5365","RawContent":null,"Title":"Add re-training support for MatrixFactorization.","State":"open","Body":"When my dataset is large, retraining will take a lot of time.Is there any way add new training data to improve the model, not retrain all the data.","Url":"https://github.com/dotnet/machinelearning/issues/5365","RelatedDescription":"Open issue \"Add re-training support for MatrixFactorization.\" (#5365)"},{"Id":"684106075","IsPullRequest":false,"CreatedAt":"2020-08-25T22:19:12","Actor":"praveenraghuvanshi","Number":"5361","RawContent":null,"Title":"Second time prediction using PredictionEngine in ML.Net throws SEHException in Azure Function deployed to Cloud. Works fine locally.","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 64 bit\r\n- **.NET Version (eg., dotnet --info)**: \r\nC:\\Users\\praghuvanshi>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.401\r\n Commit:    5b6f5e5005\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19041\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.7\r\n  Commit:  fcfdef8d6b\r\n\r\n.NET Core SDKs installed:\r\n  3.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nI am working on a sample image classification problem of classifying dog and cat. I have used AutoML for Image Classification with 10 images each of cat and dog and generated the model(MLModel.zip~93MB) and c# code. ... I have been successful in loading the model in a function app locally and it works flawlessly giving the predictions properly. Source code attached.\r\n\r\nSteps: \r\n- Create Image Classification project using AutoML-Model Builder\r\n- Generate Model(MLModel.zip) and C# Code\r\n- Use MLModel.zip in Azure function\r\n- Run it locally - Works fine\r\n- Publish to Azure Function(Cloud) - Function App(Windows)\r\n- 'tensorflow' DllNotFound exception is thrown\r\n- Change 'Deployment Mode' to 'Self-Contained' and Target Runtime to 'win-x64'. Also change Platform Settings from 32-bit to 64-bit in Azure Function setting in portal.\r\n- Hit API from REST Client(Postman) : Classification is done successfuly\r\n- Hit API second time or consecutively - SSHException is thrown at PredictionEngine.Predict() method.\r\n\r\n**What happened?**\r\n- Deploying the same function over Azure Function(Cloud) gave DllNotFound exception for tensorflow dll during loading of the model. \r\n- Referred https://developers.de/2019/10/25/hosting-ml-net-in-appservice/ and changed Target Runtime to x64. Tensorflow dll not found error disappeared. \r\n- Hit Function API through Postman first time after above change and it was successful with proper prediction.\r\n- However, when API is hit second or consecutively, SSHException is thrown during prediction using PredictionEngine. \r\n\r\n**What did you expect?**\r\n- No exception at predictionEngine.Predict() while executing in Azure Function(cloud)\r\n- A similar issue reported over SO https://stackoverflow.com/questions/62947625/ml-net-tensorflow-image-clasification-crashes-with-sehexception-when-run-in-azur but there is no solution yet.\r\n- References\r\n - https://github.com/SciSharp/TensorFlow.NET/issues/485\r\n- https://github.com/dotnet/machinelearning/issues/4112\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\n**Source Code:** Attached zip file : src.zip\r\n**Azure Function Project:** TestImageClassificationFunctionApp\r\n**Steps, call stack, snippets, logs:** ./testimageclassification/**Readme.md**\r\n**Diagnostic logs:** ./testimageclassification/diagnosis/\r\n\r\n**Exception:** System.Runtime.InteropServices.SEHException\r\n**FailedMethod:** Tensorflow.c_api.TF_SessionRun\r\n\r\n```powershell\r\nSystem.Runtime.InteropServices.SEHException:\r\n   at Tensorflow.c_api.TF_SessionRun (TensorFlow.NET, Version=0.11.8.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils+Runner.Run (Microsoft.ML.TensorFlow, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Vision.ImageClassificationModelParameters+Classifier.Score (Microsoft.ML.Vision, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Vision.ImageClassificationModelParameters+<>c__DisplayClass22_0`2.<Microsoft.ML.Data.IValueMapper.GetMapper>b__0 (Microsoft.ML.Vision, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Data.PredictedLabelScorerBase.EnsureCachedPosition (Microsoft.ML.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Data.MulticlassClassificationScorer+<>c__DisplayClass16_0.<GetPredictedLabelGetter>b__0 (Microsoft.ML.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Transforms.KeyToValueMappingTransformer+Mapper+KeyToValueMap`2+<>c__DisplayClass8_0.<GetMappingGetter>b__0 (Microsoft.ML.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Data.TypedCursorable`1+TypedRowBase+<>c__DisplayClass9_0`2.<CreateConvertingActionSetter>b__0 (Microsoft.ML.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at Microsoft.ML.Data.TypedCursorable`1+TypedRowBase.FillValues (Microsoft.ML.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51)\r\n   at TestImageClassificationFunctionApp.ClassifyImage+<Run>d__0.MoveNext (TestImageClassificationFunctionApp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null)\r\n```\r\n\r\n**Azure Function *.csproj **\r\n```poweshell\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n    <AzureFunctionsVersion>v3</AzureFunctionsVersion>\r\n    <UserSecretsId>xxxxx-xxxx-xxxxx-xxxxxx</UserSecretsId>\r\n    <Platforms>AnyCPU;x64</Platforms>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Azure.Storage.Blobs\" Version=\"12.5.1\" />\r\n    <PackageReference Include=\"Microsoft.Azure.WebJobs.Extensions.Storage\" Version=\"3.0.10\" />\r\n    <PackageReference Include=\"Microsoft.ML\" Version=\"1.5.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.ImageAnalytics\" Version=\"1.5.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.Vision\" Version=\"1.5.1\" />\r\n    <PackageReference Include=\"Microsoft.NET.Sdk.Functions\" Version=\"3.0.7\" />\r\n    <PackageReference Include=\"SciSharp.TensorFlow.Redist\" Version=\"2.1.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <None Update=\"host.json\">\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n    <None Update=\"local.settings.json\">\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n      <CopyToPublishDirectory>Never</CopyToPublishDirectory>\r\n    </None>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nLet me know in case any more information is required.\r\n\r\n[src.zip](https://github.com/dotnet/machinelearning/files/5113449/src.zip)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5361","RelatedDescription":"Closed issue \"Second time prediction using PredictionEngine in ML.Net throws SEHException in Azure Function deployed to Cloud. Works fine locally.\" (#5361)"},{"Id":"684003763","IsPullRequest":false,"CreatedAt":"2020-08-25T16:49:20","Actor":"galeese","Number":"5360","RawContent":null,"Title":"How to load python-trained LGB model file into  LightGbmBinaryTrainer  object, and use the trained model inside c#?","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 \r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI've trained a LGB-model from the python  lightgbm package.\r\n\r\n- **What happened?**\r\nI've obtained:\r\n  model-file -  \"model.txt\"\r\n  file of model-parameters:  \"predict.conf\" \r\n- **What did you expect?**\r\nI expect to somehow to create a LightGbmBinaryTrainer  object   based on the two files:\r\n   \"model.txt\" and \"predict.conf\" \r\n\r\nI don't want to run \"./lightgbm\"  config=predict.conf from c# each time in order to obtain the new prediciton inside the *.txt file.\r\nI want to apply the created model inside the c# environment and get the prediction inside the c# and not to load it from the txt file.\r\n### Source code / logs\r\n\r\nThe contents of the \"model.txt\":\r\ntree\r\nversion=v3\r\nnum_class=1\r\nnum_tree_per_iteration=1\r\nlabel_index=0\r\nmax_feature_idx=10307\r\nobjective=binary sigmoid:1\r\nfeature_names=Column_0 Column_1 Column_2 Column_3 Column_4\r\n\r\nThe contents of the \"predict.conf\" \r\ntask = predict \r\n\r\ndata = sharp_preds_string.csv\r\n\r\ninput_model =model.txt\r\n\r\noutput_result=  LightGBM_predict_result.txt\r\n\r\n\r\n\r\n\r\n\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5360","RelatedDescription":"Closed issue \"How to load python-trained LGB model file into  LightGbmBinaryTrainer  object, and use the trained model inside c#?\" (#5360)"},{"Id":"683978432","IsPullRequest":false,"CreatedAt":"2020-08-25T16:48:06","Actor":"asheesh1996","Number":"5359","RawContent":null,"Title":"How to feed frames from live video to a trained ONNX model","State":"closed","Body":"using System.Drawing classes I am able to read a .MP4 file and receive frames from it and store them as Bitmap,\r\nthis process is happening on a separate thread, simultaneously on another thread I want to feed this Bitmap data to my loaded pretrained .onnx model.\r\nI am not able to find any documentation or support on how to achieve this.\r\n\r\nAny suggestions will be helpful, thanks in advance","Url":"https://github.com/dotnet/machinelearning/issues/5359","RelatedDescription":"Closed issue \"How to feed frames from live video to a trained ONNX model\" (#5359)"},{"Id":"685321623","IsPullRequest":false,"CreatedAt":"2020-08-25T09:21:42","Actor":"crazyoutlook","Number":"5364","RawContent":null,"Title":"ML.Net - The first dimension of paddings must be the rank of inputs[4,2] [1,1,320,320,3]","State":"open","Body":"System information\r\nOS version/distro: Windows 10 Pro\r\n.NET Version (eg., dotnet --info): dotnet framework 4.7\r\nIssue :\r\nWe are working on how to consume the tensorflow model in .Net using ML.NET. We are using below tutorial as reference :\r\n\r\nTutorial Link : https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/image-classification\r\n\r\nWe tested with model that is used in the Tutorial and it worked fine. But, when we replace tutorial model with our tensorflow model (object detection model which we have exported from Azure Custom Vision), it is throwing an Exception saying -TensorflowException: The first dimension of paddings must be the rank of inputs[4,2] [1,1,320,320,3] [[{{node conv1/pad_size}}]]\r\nThe same custom vision model works fine when consumed in Python code.\r\n\r\nSource code / logs\r\nDetails:\r\n\r\nProject Name : TransferLearningTF\r\nClass name : program.cs\r\nMethod Name : GenerateModel\r\n\r\nCode :\r\n\r\n  IEstimator<ITransformer> pipeline = mlContext.Transforms.LoadImages(outputColumnName: \"image_tensor\", imageFolder: _imagesFolder, inputColumnName: nameof(ImageData.ImagePath))\r\n                .Append(mlContext.Transforms.ResizeImages(outputColumnName: \"image_tensor\", imageWidth: InceptionSettings.ImageWidth, imageHeight: InceptionSettings.ImageHeight, inputColumnName: \"image_tensor\"))\r\n                .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"image_tensor\"))\r\n                .Append(mlContext.Model.LoadTensorFlowModel(_inceptionTensorFlowModel)\r\n                .ScoreTensorFlowModel(outputColumnNames: new[] { \"detected_boxes\", \"detected_scores\", \"detected_classes\" }, inputColumnNames: new[] { \"image_tensor\" }, addBatchDimensionInput: true))            \r\n                .AppendCacheCheckpoint(mlContext);\r\n\t\t\t\t\r\n\t\t\tIDataView trainingData = mlContext.Data.LoadFromTextFile<ImageData>(path: _trainTagsTsv, hasHeader: false);\r\n            ITransformer model = pipeline.Fit(trainingData);\r\n            IDataView testData = mlContext.Data.LoadFromTextFile<ImageData>(path: _testTagsTsv, hasHeader: false);\r\n            IDataView predictions = model.Transform(testData);\r\n            IEnumerable<ImagePrediction> imagePredictionData = mlContext.Data.CreateEnumerable<ImagePrediction>(predictions, true);\r\n\r\nException Details :\r\n\r\nTensorflowException: The first dimension of paddings must be the rank of inputs[4,2] [1,1,320,320,3]\r\n                [[{{node conv1/pad_size}}]]\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5364","RelatedDescription":"Open issue \"ML.Net - The first dimension of paddings must be the rank of inputs[4,2] [1,1,320,320,3]\" (#5364)"},{"Id":"684936195","IsPullRequest":true,"CreatedAt":"2020-08-24T20:13:49","Actor":"frank-dong-ms","Number":"5363","RawContent":null,"Title":"add test for model not reload issue","State":"open","Body":"add unit test for #5351 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5363","RelatedDescription":"Open PR \"add test for model not reload issue\" (#5363)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-09-05T05:30:33.7736991Z","RunDurationInMilliseconds":730}