{"Data":{"GitHub":{"Issues":[{"Id":"2255452625","IsPullRequest":true,"CreatedAt":"2024-04-22T02:31:25","Actor":"feiyun0112","Number":"7136","RawContent":null,"Title":"fix #7135","State":"open","Body":"Describe the bug\r\nAccessing data by column after adding columns to a DataFrame returns error data\r\n\r\n````\r\nvar df = DataFrame.LoadCsvFromString(\"a1,a2\\n1,2\\n3,4\");\r\nvar dc0 = DataFrameColumn.Create(\"a0\", new int[] { 0, 0 });\r\ndf.Columns.Insert(0, dc0);\r\nvar dc1 = df[\"a1\"];\r\nConsole.WriteLine(dc1.ToString());\r\n````\r\n\r\n\r\nThis code expected print: a1: 1 3\r\nBut it print: a0: 0 0","Url":"https://github.com/dotnet/machinelearning/pull/7136","RelatedDescription":"Open PR \"fix #7135\" (#7136)"},{"Id":"2254553728","IsPullRequest":false,"CreatedAt":"2024-04-21T12:33:49","Actor":"CodingOctocat","Number":"7134","RawContent":null,"Title":"How to predict text type based on input text?","State":"closed","Body":"I'm a newbie and I read the tutorial [github-issue-classification](https://learn.microsoft.com/en-us/dotnet/machine-learning/tutorials/github-issue-classification), but I don't quite understand it, and it seems that my question should be `classification`.\r\n\r\nMy specific requirement is to develop a database query function for a single text box (search box), where the program automatically predicts that the input keyword belongs to a certain column of data in the database and filters the query against it. For example:\r\n\r\n- text box input: _KS 25-3LM_, the program should be predicted to be: **Model**\r\n- text box input: _A543148543143_, the program should be predicted to be: **CertificateNumber**\r\n\r\nHere is my data model where `ProductCategory`, `ProductName`, `Models`, `Enterprise`, `CertificateNumber`, `ReportNumbers` are the fields that I need to involve in the training, note that `Models`, `ReportNumbers` are list types. ReportNumbers` are list types.\r\n\r\nMy database uses Ef Core/SQLite for storage and has a record size of about 150,000 rows.\r\n\r\nCan you all help me to implement this feature? I want to learn and understand ML.NET with this example.\r\n\r\n```csharp\r\n[Table(\"FooSet\")]\r\n[Index(nameof(CertificateNumber), nameof(ReportNumbers), nameof(Models), nameof(Enterprise), nameof(ProductName))]\r\npublic partial record Foo\r\n{\r\n    private string _productCategory = \"\";\r\n\r\n    [Column(\"cert_exp\")]\r\n    public DateOnly CertificateExpires { get; set; }\r\n\r\n    [Column(\"cert_iss\")]\r\n    public DateOnly CertificateIssue { get; set; }\r\n\r\n    [Key]\r\n    [Column(\"cert_no\")]\r\n    public string CertificateNumber { get; set; }\r\n\r\n    [Column(\"ent\")]\r\n    public string Enterprise { get; set; }\r\n\r\n    [Column(\"models\")]\r\n    public List<string> Models { get; set; }\r\n\r\n    [Column(\"cat\")]\r\n    public string ProductCategory\r\n    {\r\n        get => _productCategory ?? \"\";\r\n        set => _productCategory = value ?? \"\";\r\n    }\r\n\r\n    [Column(\"name\")]\r\n    public string ProductName { get; set; }\r\n\r\n    [Column(\"rpt_nos\")]\r\n    public List<string> ReportNumbers { get; set; }\r\n\r\n    [Column(\"status\")]\r\n    public string Status { get; set; }\r\n\r\n    public Foo(string productCategory, string productName, List<string> models, string enterprise,\r\n        string certificateNumber, List<string> reportNumbers,\r\n        DateOnly certificateIssue, DateOnly certificateExpires, string status)\r\n    {\r\n        ProductCategory = productCategory;\r\n        ProductName = productName;\r\n        Models = models;\r\n        Enterprise = enterprise;\r\n        CertificateNumber = certificateNumber;\r\n        ReportNumbers = reportNumbers;\r\n\r\n        CertificateIssue = certificateIssue;\r\n        CertificateExpires = certificateExpires;\r\n        Status = status;\r\n    }\r\n}\r\n```\r\n\r\nrefer link: [machinelearning-samples/issues/1028](https://github.com/dotnet/machinelearning-samples/issues/1028)","Url":"https://github.com/dotnet/machinelearning/issues/7134","RelatedDescription":"Closed issue \"How to predict text type based on input text?\" (#7134)"},{"Id":"2254864513","IsPullRequest":false,"CreatedAt":"2024-04-21T02:26:35","Actor":"wildwind2000","Number":"7135","RawContent":null,"Title":"Accessing data by column after adding columns to a DataFrame returns error  data","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n - ML.NET Version: 3.01\r\n - .NET Version: .NET 8.0\r\n\r\n**Describe the bug**\r\nAccessing data by column after adding columns to a DataFrame returns error data\r\n\r\n```code\r\nvar df = DataFrame.LoadCsvFromString(\"a1,a2\\n1,2\\n3,4\");\r\nvar dc0 = DataFrameColumn.Create(\"a0\", new int[] { 0, 0 });\r\ndf.Columns.Insert(0, dc0);\r\nvar dc1 = df[\"a1\"];\r\nConsole.WriteLine(dc1.ToString());\r\n```\r\nThis code expected print: a1: 1 3   \r\nBut it print: a0: 0 0\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7135","RelatedDescription":"Open issue \"Accessing data by column after adding columns to a DataFrame returns error  data\" (#7135)"},{"Id":"2247028859","IsPullRequest":false,"CreatedAt":"2024-04-19T22:56:52","Actor":"muhamedkarajic","Number":"7130","RawContent":null,"Title":"ML.NET can't add Evaluate logic into pipeline","State":"closed","Body":"**System Information (please complete the following information):**\r\n - OS & Version: macOS Monterey 12.6.6\r\n - ML.NET Version: ML.NET 3.0.1 (Had it also with 2.X)\r\n - .NET Version: .NET 6.0\r\n\r\n**Describe the bug**\r\nI want to split the training and test set and evaluate the model. Therefor I have created a function:\r\n```csharp\r\nprivate static void EvaluateModel(MLContext mlContext, ITransformer trainedModel, IDataView testData)\r\n{\r\n    var predictedData = trainedModel.Transform(testData);\r\n\r\n    var metrics = mlContext.BinaryClassification.EvaluateNonCalibrated(predictedData, \"target\", \"Score\", \"PredictedLabel\");\r\n\r\n    Console.WriteLine($\"Accurecy: {metrics.Accuracy: 0.###}\");\r\n    Console.WriteLine($\"---------------------------\");\r\n    Console.WriteLine($\"Confusion Matrix\");\r\n    Console.WriteLine(metrics.ConfusionMatrix.GetFormattedConfusionTable());\r\n    Console.WriteLine();\r\n}\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Run `mlnet classification --dataset \"./FILE_PATH/FILE_NAME.csv\" --label-col 11 --has-header true --train-time 60`\r\n2. Add to `SampleClassification.training.cs` the function `EvaluateModel`\r\n3. Adjust the already existing `Train` function by\r\n4. run `dotnet run`\r\n5. Error: `An unhandled exception of type 'System.ArgumentOutOfRangeException' occurred in Microsoft.ML.Data.dll: 'Schema mismatch for score column 'Score': expected Single, got Vector<Single, 2>'`\r\n\r\n**Expected behavior**\r\nI would expect the code to work since the Score is something which ML.NET creates. **It seems like it expects the score to be a sinle value while its a compex vector.**\r\n\r\n**Screenshots, Code, Sample Projects**\r\n\r\nHere is the adjusted train function:\r\n```csharp\r\npublic static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader)\r\n{\r\n    var mlContext = new MLContext();\r\n\r\n    var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader);\r\n    var splitedData = mlContext.Data.TrainTestSplit(data, 0.2, null, 0);\r\n    var model = RetrainModel(mlContext, splitedData.TrainSet);\r\n    EvaluateModel(mlContext, model, data);\r\n    SaveModel(mlContext, model, data, outputModelPath);\r\n}\r\n```\r\n\r\n\r\n**Additional context**\r\nI ahve found that I am supposed to use`EvaluateNonCalibrated` instead of `Evaluate`. Have similar when using `Evaluate` its says that its missing Predictions. Error in that case `Probability column 'Probability' not found (Parameter 'schema')`. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/7130","RelatedDescription":"Closed issue \"ML.NET can't add Evaluate logic into pipeline\" (#7130)"},{"Id":"2242316679","IsPullRequest":true,"CreatedAt":"2024-04-19T16:21:27","Actor":"tarekgh","Number":"7128","RawContent":null,"Title":"Tokenizer's APIs Update","State":"closed","Body":"Updating the Tokenizer's APIs:\r\n- Simplifying the APIs by merging the `Model` abstraction into the `Tokenizer` abstracted class.\r\n- Adding overloads to work with spans.\r\n- doing some clean up optimization and adding more tests.","Url":"https://github.com/dotnet/machinelearning/pull/7128","RelatedDescription":"Closed or merged PR \"Tokenizer's APIs Update\" (#7128)"},{"Id":"2249443247","IsPullRequest":true,"CreatedAt":"2024-04-18T00:29:47","Actor":"RussKie","Number":"7133","RawContent":null,"Title":"Update locker.yml","State":"closed","Body":"* Bump the Locker action version\r\nRefer to https://github.com/microsoft/vscode-github-triage-actions/pull/210\r\n\r\n* Restrict the Locker action to dotnet org","Url":"https://github.com/dotnet/machinelearning/pull/7133","RelatedDescription":"Closed or merged PR \"Update locker.yml\" (#7133)"},{"Id":"2248568194","IsPullRequest":true,"CreatedAt":"2024-04-18T00:10:16","Actor":"directhex","Number":"7132","RawContent":null,"Title":"[release/3.0] Don't use deprecated -pt images","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/7132","RelatedDescription":"Closed or merged PR \"[release/3.0] Don't use deprecated -pt images\" (#7132)"},{"Id":"2248565494","IsPullRequest":true,"CreatedAt":"2024-04-18T00:09:42","Actor":"directhex","Number":"7131","RawContent":null,"Title":"Don't use deprecated -pt images","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/7131","RelatedDescription":"Closed or merged PR \"Don't use deprecated -pt images\" (#7131)"},{"Id":"2242069777","IsPullRequest":false,"CreatedAt":"2024-04-17T19:56:53","Actor":"80LevelElf","Number":"7127","RawContent":null,"Title":"Regression FairLearn with AutoML?","State":"closed","Body":"At this moment we have a FairLearn extension method only for Binary Classification - SetBinaryClassificationMetricWithFairLearn method.\r\n\r\nBut during the code ML.net also have Regression Metric FairLearn support - https://github.com/dotnet/machinelearning/blob/main/src/Microsoft.ML.Fairlearn/Metrics/FairlearnMetricCatalog.cs\r\n\r\nIs it possible to use FairLearn with regression via AutoML?","Url":"https://github.com/dotnet/machinelearning/issues/7127","RelatedDescription":"Closed issue \"Regression FairLearn with AutoML?\" (#7127)"},{"Id":"2236137765","IsPullRequest":true,"CreatedAt":"2024-04-17T15:14:53","Actor":"dotnet-maestro[bot]","Number":"7125","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:45c6fd49-3a4f-4675-f3da-08dc0c527e17)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 45c6fd49-3a4f-4675-f3da-08dc0c527e17\r\n- **Build**: 20240404.3\r\n- **Date Produced**: April 4, 2024 5:15:15 PM UTC\r\n- **Commit**: 188340e12c0a372b1681ad6a5e72c608021efdba\r\n- **Branch**: refs/heads/release/8.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.24161.7 to 8.0.0-beta.24204.3][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 8.0.0-beta.24161.7 to 8.0.0-beta.24204.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.24161.7 to 8.0.0-beta.24204.3][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 8.0.0-beta.24161.7 to 8.0.0-beta.24204.3][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 8.0.0-beta.24161.7 to 8.0.0-beta.24204.3][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.24161.7 to 8.0.0-beta.24204.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/cd10e5d374...188340e12c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:45c6fd49-3a4f-4675-f3da-08dc0c527e17)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7125","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#7125)"},{"Id":"2243822616","IsPullRequest":false,"CreatedAt":"2024-04-16T00:58:56","Actor":"yueyinqiu","Number":"7129","RawContent":null,"Title":"Is there an equivalent to pandas' get_dummies, in Microsoft.Data.Analysis?","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/7129","RelatedDescription":"Closed issue \"Is there an equivalent to pandas' get_dummies, in Microsoft.Data.Analysis?\" (#7129)"},{"Id":"2237275563","IsPullRequest":false,"CreatedAt":"2024-04-11T09:17:22","Actor":"markbeij","Number":"7126","RawContent":null,"Title":"Create HTML from C# in Jupyter","State":"open","Body":"I hope someone here can help me with this.. I'm exploring the possibilities of data analysis using c# and see a lot of samples where you generate html from your Jupyter notebooks, like this blog from Microsoft: https://devblogs.microsoft.com/dotnet/an-introduction-to-dataframe/ by @pgovind\r\n\r\n```c#\r\nusing Microsoft.AspNetCore.Html;\r\nFormatter<DataFrame>.Register((df, writer) =>\r\n{\r\n    var headers = new List<IHtmlContent>();\r\n    headers.Add(th(i(\"index\")));\r\n    headers.AddRange(df.Columns.Select(c => (IHtmlContent) th(c.Name)));\r\n    var rows = new List<List<IHtmlContent>>();\r\n    var take = 20;\r\n    for (var i = 0; i < Math.Min(take, df.Rows.Count); i++)\r\n    {\r\n        var cells = new List<IHtmlContent>();\r\n        cells.Add(td(i));\r\n        foreach (var obj in df.Rows[i])\r\n        {\r\n            cells.Add(td(obj));\r\n        }\r\n        rows.Add(cells);\r\n    }\r\n\r\n    var t = table(\r\n        thead(\r\n            headers),\r\n        tbody(\r\n            rows.Select(\r\n                r => tr(r))));\r\n\r\n    writer.Write(t);\r\n}, \"text/html\");\r\n```\r\n\r\nIf I paste this in my notebook, I get\r\n`Error: (2,1): error CS0103: The name 'Formatter' does not exist in the current context`\r\n\r\nI also tried with a smaller example:\r\n\r\n```c#\r\nusing Microsoft.AspNetCore.Html;\r\nth(i(\"index\"))\r\n```\r\n\r\nBut I get \r\n`Error: (2,1): error CS0103: The name 'th' does not exist in the current context\r\n(2,4): error CS0103: The name 'i' does not exist in the current context`\r\n\r\nI'm using polyglot notebook in VS Code using C# Script.\r\nNot sure what more info is helpfull.","Url":"https://github.com/dotnet/machinelearning/issues/7126","RelatedDescription":"Open issue \"Create HTML from C# in Jupyter\" (#7126)"},{"Id":"2235172875","IsPullRequest":false,"CreatedAt":"2024-04-10T09:43:38","Actor":"Huochengyan","Number":"7124","RawContent":null,"Title":"How to gain progress when training for a long time？","State":"open","Body":"`ITransformer trainedModel = trainingPipeline.Fit(trainingData);`\r\nHow to obtain progress when the time is particularly long? I see many answers are before 2020. Is it currently supported in version 3.0.1? Or other methods can detect the required duration","Url":"https://github.com/dotnet/machinelearning/issues/7124","RelatedDescription":"Open issue \"How to gain progress when training for a long time？\" (#7124)"},{"Id":"2233175660","IsPullRequest":true,"CreatedAt":"2024-04-09T11:00:58","Actor":"asmirnov82","Number":"7123","RawContent":null,"Title":"Implement DataFrameColumn Apply and DropNulls methods","State":"open","Body":"Fixes #7107 as was asked in https://github.com/dotnet/machinelearning/issues/6144#issuecomment-2018430389\r\n\r\nAdditionaly:\r\n\r\n1) Fix incorrect IsNumeric method\r\n2) Fix error FillNulls crashes with NotImplemented exception on DataFrame with VBufferDataFrameColumn\r\n3) Improve speed and redesign API (legacy API marked as obsolete), internal methods are rewritten to use new API\r\n4) Add extra unit tests\r\n\r\nReasons for refactoring:\r\n\r\n1) Legacy implementation of ApplyElementwise is written not only to apply function on each element in the column, but also to be used for fast columns iteration, that's why it has rowIndex as one of it's arguments. This duplication of responsibilities is very confusing and absolutely not straightforward. More over, it is slow, as instead of only reading values, ApplyElementwise writes function results into into memory, also it converts read only columns to editable (and that again involves memory copy). So in some circumstances memory can be excessively copied even twice.\r\n2) Legacy method requires to provide function, that takes into account null values - this is not userfriendly. For working with Nulls there are already FillNulls and DropNulls methods. New method applies user function only to valuable values, this also leads to better performance\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7123","RelatedDescription":"Open PR \"Implement DataFrameColumn Apply and DropNulls methods\" (#7123)"},{"Id":"2232019976","IsPullRequest":false,"CreatedAt":"2024-04-08T20:24:17","Actor":"asmirnov82","Number":"7122","RawContent":null,"Title":"DataFrame IndexOufRange exception on attemp to call Apply method","State":"open","Body":"Test to reproduce:\r\n\r\n```cs\r\npublic void TestApplyMethod()\r\n{\r\n    PrimitiveDataFrameColumn<byte> column = new PrimitiveDataFrameColumn<byte>(\"Byte1\", int.MaxValue / 2 - 1);\r\n    PrimitiveDataFrameColumn<double> newColumn = column.Apply<double>(x => (double?)x);\r\n}\r\n```\r\nRoot cause is in Apply<TResult> method:\r\n\r\n```cs\r\npublic void Apply<TResult>(Func<T?, TResult?> func, PrimitiveColumnContainer<TResult> resultContainer)\r\n    where TResult : unmanaged\r\n{\r\n    for (int b = 0; b < Buffers.Count; b++)\r\n    {\r\n        var sourceBuffer = Buffers[b];\r\n        var sourceNullBitMap = NullBitMapBuffers[b].ReadOnlySpan;\r\n\r\n        Span<TResult> mutableResultBuffer = resultContainer.Buffers.GetOrCreateMutable(b).Span;\r\n        Span<byte> mutableResultNullBitMapBuffers = resultContainer.NullBitMapBuffers.GetOrCreateMutable(b).Span;\r\n\r\n        for (int i = 0; i < sourceBuffer.Length; i++)\r\n        {\r\n            bool isValid = BitUtility.IsValid(sourceNullBitMap, i);\r\n            TResult? value = func(isValid ? sourceBuffer[i] : null);\r\n            mutableResultBuffer[i] = value.GetValueOrDefault();\r\n            resultContainer.SetValidityBit(mutableResultNullBitMapBuffers, i, value != null);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`mutableResultBuffer` has TResult type of underlying data, so it's max length is 2Gb / sizeof(TResult)\r\n`sourceBuffer` has T type of underlying data, so it's max length is 2 Gb/ sizeof(T)\r\n\r\nwhen sizeof(TResult) > sizeof(T) and source buffer is large enough - it resulted in IndexOutOfRange exception","Url":"https://github.com/dotnet/machinelearning/issues/7122","RelatedDescription":"Open issue \"DataFrame IndexOufRange exception on attemp to call Apply method\" (#7122)"},{"Id":"2230049227","IsPullRequest":false,"CreatedAt":"2024-04-08T00:51:40","Actor":"NohaNLon","Number":"7121","RawContent":null,"Title":"trying to carry out the 'ML.NET in ten minutes' project, but the script for creating the machine learning model does not work on my computer","State":"open","Body":"\r\n - ML.NET Version: [e.g. ML.NET v1.5.5]\r\n - .NET Version: [e.g. .NET 5.0]\r\n\r\n**Describe the bug**\r\ntrying to carry out the 'ML.NET in ten minutes' project, but the script for creating the machine learning model does not work on my computer. I am using a Mac Book, and the error says that the required .NET is not installed in my computer (when I installed it five minutes prior).\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7121","RelatedDescription":"Open issue \"trying to carry out the 'ML.NET in ten minutes' project, but the script for creating the machine learning model does not work on my computer\" (#7121)"},{"Id":"2229275347","IsPullRequest":false,"CreatedAt":"2024-04-06T14:33:41","Actor":"lmxin123","Number":"7120","RawContent":null,"Title":"How to analyze speech by tensorflow.Net ","State":"open","Body":"              The limitation is part of the issue I guess, \"we\" state we do TF but do we.... \r\nDoing a search on the internet one can see nice samples using TF to analyse audio, text, price prediction housing  etc. The most interesting I guess as it allows comparison is if we would be able to demonstrate the [Iris sample](https://www.kaggle.com/pierrek20/multiclass-iris-prediction-with-tensorflow-keras)\r\n\r\n_Originally posted by @PeterPann23 in https://github.com/dotnet/machinelearning/issues/3770#issuecomment-495492045_\r\n            ","Url":"https://github.com/dotnet/machinelearning/issues/7120","RelatedDescription":"Open issue \"How to analyze speech by tensorflow.Net \" (#7120)"},{"Id":"2229252538","IsPullRequest":false,"CreatedAt":"2024-04-06T13:52:49","Actor":"lmxin123","Number":"7119","RawContent":null,"Title":"Urgent need for a speech recognition samples","State":"open","Body":"Urgent need for a speech recognition case.\r\nSupport understanding of environmental sounds, such as glass shattering sounds and knocking sounds.\r\nSupports recognizing profanity, insulting others, and other speech sounds.\r\nSupport for identifying anger emotions.","Url":"https://github.com/dotnet/machinelearning/issues/7119","RelatedDescription":"Open issue \"Urgent need for a speech recognition samples\" (#7119)"},{"Id":"2228782410","IsPullRequest":true,"CreatedAt":"2024-04-05T20:45:30","Actor":"asmirnov82","Number":"7118","RawContent":null,"Title":"Extend dataframe orderby method to allow defining preferred position for null values","State":"open","Body":"Fixes #7102 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7118","RelatedDescription":"Open PR \"Extend dataframe orderby method to allow defining preferred position for null values\" (#7118)"},{"Id":"2224087389","IsPullRequest":false,"CreatedAt":"2024-04-04T19:57:03","Actor":"jiafatom","Number":"7117","RawContent":null,"Title":"LightGbm does not exist in namespace Microsoft.ML.Trainers","State":"closed","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n - ML.NET Version: 3.0.1\r\n - .NET Version: .Net Framework 4.7.1\r\n\r\n**Describe the bug**\r\nCreate a console app, in the cs file, try to \r\nusing Microsoft.ML.Trainers.LightGbm;\r\nHowever, it says LightGbm does not exist in namespace.\r\n![lightgbm](https://github.com/dotnet/machinelearning/assets/30608893/86eb27bc-5131-4619-a4b8-a86aa78b9749)\r\n\r\nThanks.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7117","RelatedDescription":"Closed issue \"LightGbm does not exist in namespace Microsoft.ML.Trainers\" (#7117)"},{"Id":"2223818875","IsPullRequest":true,"CreatedAt":"2024-04-04T02:38:23","Actor":"asmirnov82","Number":"7116","RawContent":null,"Title":"Extend dataframe orderby method to allow define null values ordering","State":"closed","Body":"Duplicate of #7118\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7116","RelatedDescription":"Closed or merged PR \"Extend dataframe orderby method to allow define null values ordering\" (#7116)"},{"Id":"2215740418","IsPullRequest":true,"CreatedAt":"2024-04-03T23:59:34","Actor":"tarekgh","Number":"7110","RawContent":null,"Title":"More tokenizer's APIs cleanup","State":"closed","Body":"This change include the following:\r\n- The decoder abstracted class has been removed. During the implementation of Tiktoken, it became evident that the decoder abstracted interface will not be suited for decoding operation in models like Tiktoken. This is because this specific tokenizer requires decoding the IDs collectively rather than decoding each ID separately. We have already introduced the Decode method in the Model abstraction, which has proven effective and will also benefit all tokenizers, as tokenizer models can now leverage their internal state to perform more sophisticated decoding. The changes made include adding decoding code for the Bpe model, resulting in significantly improved results compared to before.\r\n- Addressing the handling of unknown tokens in the Bpe model to ensure consistency with the approach used in the Huggingface Bpe model.","Url":"https://github.com/dotnet/machinelearning/pull/7110","RelatedDescription":"Closed or merged PR \"More tokenizer's APIs cleanup\" (#7110)"},{"Id":"2221368696","IsPullRequest":true,"CreatedAt":"2024-04-03T18:09:24","Actor":"tarekgh","Number":"7114","RawContent":null,"Title":"Add more required Tokenizer APIs","State":"closed","Body":"The change is adding two new Tokenizer APIs:\r\n- Allow creating the Tiktoken tokenizer using the encoding name similar of what are doing when creating the tokenizer with the model name.\r\n- Introduce Tokenizer.EncodeToIds overload which can allow specifying the max token count to encode. This will help in some scenario spotted in some users code. ","Url":"https://github.com/dotnet/machinelearning/pull/7114","RelatedDescription":"Closed or merged PR \"Add more required Tokenizer APIs\" (#7114)"},{"Id":"2221709839","IsPullRequest":false,"CreatedAt":"2024-04-03T01:21:20","Actor":"johnnyg","Number":"7115","RawContent":null,"Title":"DataFrame doesn't decode boolean arrays correctly from Arrow","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version:  0.21.1\r\n - .NET Version: .NET 5.0\r\n\r\n**Describe the bug**\r\nCreating a dataframe from an arrow record batch where a column is a boolean array produces incorrect results (and occasionally even throws exceptions).\r\n\r\n**To Reproduce**\r\nRun:\r\n```csharp\r\npublic void DataFrameDecodeBooleans()\r\n{\r\n    BooleanArray boolArray = new BooleanArray.Builder().AppendNull().Append(false).Append(true).Build();\r\n    Field boolField = new Field(\"col\", BooleanType.Default, true);\r\n    Schema schema = new Schema(new[] { boolField }, null);\r\n    RecordBatch batch = new RecordBatch(schema, new IArrowArray[] { boolArray }, boolArray.Length);\r\n    DataFrame df = DataFrame.FromArrowRecordBatch(batch);\r\n    DataFrameColumn boolCol = df[\"col\"];\r\n    Assert.Equal(boolArray.Length, boolCol.Length);\r\n    for (int row = 0; row < boolArray.Length; row++)\r\n    {\r\n        Assert.Equal(boolArray.GetValue(row), boolCol[row]);\r\n    }\r\n}\r\n```\r\n\r\n**Expected behavior**\r\nAbove test passes\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7115","RelatedDescription":"Open issue \"DataFrame doesn't decode boolean arrays correctly from Arrow\" (#7115)"},{"Id":"2220965514","IsPullRequest":false,"CreatedAt":"2024-04-02T16:38:51","Actor":"cwford","Number":"7113","RawContent":null,"Title":"How to get actual topics used to make predictions by LDA","State":"open","Body":"\r\nWhen running the LatentDirichletAllocation.cs sample all that I receive are prediction (correlation) values for the three topics. I do not receive, nor can I find a way to retrieve, the actual three topics ML.NET LDA uses to make predictions.\r\n\r\nCan someone help me determine how to get the actual topics, as text strings, which ML.NET uses when performing a Latent Dirichlet Allocation against a set of sample documents?\r\n\r\nThank you.\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for learn.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 87b08415-641d-4246-280f-b19e3baa8857\r\n* Version Independent ID: 30d278f5-27f7-eee4-141f-d05dc1d34bfa\r\n* Content: [TextCatalog.LatentDirichletAllocation Method (Microsoft.ML)](https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.textcatalog.latentdirichletallocation?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML/TextCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/TextCatalog.xml)\r\n* Service: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/7113","RelatedDescription":"Open issue \"How to get actual topics used to make predictions by LDA\" (#7113)"},{"Id":"2220952802","IsPullRequest":false,"CreatedAt":"2024-04-02T16:33:36","Actor":"cwford","Number":"7112","RawContent":null,"Title":"Get Topics Used By LDA?","State":"open","Body":"Using ML.NET 3.0 on Windows 11.\r\n\r\nHow do I get the topics used by the Latent Dirichlet Allocation when predicting (correlating) the relationship between a set of documents and a set of topics?\r\n\r\nWhen I run the LatentDirichletAllocation.cs sample all I get are document correlations for three topics but I can see no way to actually get the topics, as text strings, that are used to make the predictions (correlations). There must be some way to know what topics ML.NET LDA has determined to use to make predictions.\r\n\r\nCan someone help me find a way to return as a text string each topic ML.NET LDA uses to make predictions?\r\n\r\nThank you in advance.","Url":"https://github.com/dotnet/machinelearning/issues/7112","RelatedDescription":"Open issue \"Get Topics Used By LDA?\" (#7112)"},{"Id":"2215830595","IsPullRequest":true,"CreatedAt":"2024-03-29T21:52:53","Actor":"tarekgh","Number":"7111","RawContent":null,"Title":"Add Tiktoken's missing model names","State":"closed","Body":"Adding `gpt-35-turbo` model names used by Azure deployment.","Url":"https://github.com/dotnet/machinelearning/pull/7111","RelatedDescription":"Closed or merged PR \"Add Tiktoken's missing model names\" (#7111)"},{"Id":"2212071578","IsPullRequest":true,"CreatedAt":"2024-03-29T01:12:58","Actor":"tarekgh","Number":"7109","RawContent":null,"Title":"Update the tokenizer migration guide","State":"closed","Body":"Updating the tokenizer migration guide to reflect the changes made in the tokenizer library and its public APIs.","Url":"https://github.com/dotnet/machinelearning/pull/7109","RelatedDescription":"Closed or merged PR \"Update the tokenizer migration guide\" (#7109)"},{"Id":"2206536388","IsPullRequest":true,"CreatedAt":"2024-03-27T18:24:30","Actor":"tarekgh","Number":"7108","RawContent":null,"Title":"Tokenizer's APIs Polishing","State":"closed","Body":"- Eliminate the perplexing specialTokens flag parameter from all APIs.\r\n- Standardize the casing of the Tiktoken name throughout the entire codebase and public interfaces.\r\n- Modify Model.Encode to operate with spans instead of strings. This change maintains consistency across all Model APIs and enables the possibility of incorporating Tokenizer's APIs that also operate with spans in the future.\r\n- Introduce support for precise Last/IndexOf functionality. This enhancement enables the retrieval of indices even within pre-tokenized unit strings passed to the Model. For instance, the Llama model, which does not pre-tokenize, requires this capability to be supported effectively.","Url":"https://github.com/dotnet/machinelearning/pull/7108","RelatedDescription":"Closed or merged PR \"Tokenizer's APIs Polishing\" (#7108)"},{"Id":"2206414932","IsPullRequest":false,"CreatedAt":"2024-03-25T18:31:10","Actor":"asmirnov82","Number":"7107","RawContent":null,"Title":"Make the Apply method available to StringDataFrame column","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/7107","RelatedDescription":"Open issue \"Make the Apply method available to StringDataFrame column\" (#7107)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-04-22T03:30:16.2544812Z","RunDurationInMilliseconds":409}