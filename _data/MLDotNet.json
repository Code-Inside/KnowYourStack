{"Data":{"GitHub":{"Issues":[{"Id":"716138735","IsPullRequest":false,"CreatedAt":"2020-10-07T02:07:22","Actor":"frogcrush","Number":"5419","RawContent":null,"Title":"Local GPU training fails with Image Classification scenario using Model Builder","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 2004\r\n- **.NET Version (eg., dotnet --info)**: 5.0.100-rc.1.20452.10\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried using ML.NET Model Builder with my GTX 1070 to run an image classification scenario.\r\n\r\n- **What happened?**\r\nVRAM spikes to 99% usage, then exceptions are printed in the logs and the training fails.\r\n\r\n- **What did you expect?**\r\nTraining to succeed.\r\n\r\n### Source code / logs\r\n[log.txt](https://github.com/dotnet/machinelearning/files/5337885/log.txt)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5419","RelatedDescription":"Open issue \"Local GPU training fails with Image Classification scenario using Model Builder\" (#5419)"},{"Id":"715893719","IsPullRequest":false,"CreatedAt":"2020-10-06T17:51:40","Actor":"robertlampe","Number":"5418","RawContent":null,"Title":"if all iterations are completed, I don't want to wait until the train-time reaches 0","State":"open","Body":"### System information\r\n\r\n- **Windows 10.0.19041**:\r\n- **.NET Core 3.1.402**: \r\n\r\n### Issue\r\n- **What did you do?**\r\nWith each command I need to specificy the train time. e.g.\r\n`mlnet regression --dataset \"Step2.csv\" --label-col \"Position\" --has-header true --train-time 3600 --cache on`\r\n- **What happened?**\r\nI noticed that there are max 70 iterations. If all the iterations are completed before the train-time ends, I have to wait untill it counts till 0 before it outputs the best iteration & generates the example code.\r\n- **What did you expect?**\r\nIf the max amount of iterations have been completed, the training should stop. There is no need to wait until the countdown goes to 0 while being idle.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5418","RelatedDescription":"Open issue \"if all iterations are completed, I don't want to wait until the train-time reaches 0\" (#5418)"},{"Id":"715031754","IsPullRequest":true,"CreatedAt":"2020-10-06T05:26:37","Actor":"eerhardt","Number":"5417","RawContent":null,"Title":"Fix perf regression in ShuffleRows","State":"closed","Body":"RowShufflingTransformer is using ChannelReader incorrectly. It needs to block waiting for items to read and was Thread.Sleeping in order to wait, but not spin the current core. This caused a major perf regression.\r\n\r\nThe fix is to block synchronously correctly - by calling AsTask() on the ValueTask that is returned from the ChannelReader and block on the Task.\r\n\r\nFix #5416\r\n\r\nResults of the added benchmark:\r\n\r\n||      Method |    Mean |    Error |   StdDev | Extra Metric |\r\n|------------|------------:|--------:|---------:|---------:|-------------:|\r\n|master | ShuffleRows | 2.911 s | 0.0379 s | 0.0354 s |            - |\r\n|PR | ShuffleRows | 2.736 ms | 0.0530 ms | 0.0470 ms |            - |\r\n\r\n\r\ncc @jwood803 @ogo-adp @stephentoub ","Url":"https://github.com/dotnet/machinelearning/pull/5417","RelatedDescription":"Closed or merged PR \"Fix perf regression in ShuffleRows\" (#5417)"},{"Id":"713511415","IsPullRequest":false,"CreatedAt":"2020-10-06T05:26:37","Actor":"ogo-adp","Number":"5416","RawContent":null,"Title":"ShuffleRows is broken (again) in 1.5.2","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows Server 2016\r\n- **.NET Version (eg., dotnet --info)**: .NET 4.8\r\n\r\n### Issue\r\n\r\nMy training tasks times exploded when going from 1.4 to 1.5.2 (from seconds to tens of hours). The culprit is ShuffleRows which is now extremely slow.\r\n\r\nShuffleRows was already broken in previous release (see issue #5312). The fix for that issue (#5313) is broken too in my opinion. It contains a line with a Thread.Sleep(1) to wait for async completion. This is a no go ... First the Sleep should not be there. And second, sleeping 1ms is dependent on timer resolution which is in general 15ms, so a wait will be in most cases 15ms. As my learning tasks read millions of datarows, this can not work and learning time explode to the point of being unusable. \r\n\r\nTo confirm that Thread.Sleep(1) is the culprit, I changed the timer resolution to 1ms on my server and learning time improved greatly but are still very far from the times I got with version 1.4. The fix for #5312 needs to be redone properly (sorry for being a bit harsh).\r\n\r\nSo ShuffleRows needs a fix, as I suspect this bug will impact many users. I'm not an async specialist so I can't fix the code myself.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5416","RelatedDescription":"Closed issue \"ShuffleRows is broken (again) in 1.5.2\" (#5416)"},{"Id":"711030632","IsPullRequest":false,"CreatedAt":"2020-10-05T20:19:02","Actor":"netilovefm1","Number":"5413","RawContent":null,"Title":"retinanet-bbox/regression_submodel/pyramid_regression_1/Relu:0_nchwc' Status Message: Input channels C is not equal to kernel channels * group. C: 40 kernel channels: 256 group: 1","State":"closed","Body":"### System information\r\n\r\n- windows8\r\n- .net core3.1\r\n\r\n### Issue\r\n\r\nI got a this issue \r\n\r\nbut I don't understand what it means ....\r\n\r\nhow can I change my code ? \r\n\r\nrelu is set by keras so I don't understand \r\n### Source code / logs\r\n\r\nretinanet-bbox/regression_submodel/pyramid_regression_1/Relu:0_nchwc' Status Message: Input channels C is not equal to kernel channels * group. C: 40 kernel channels: 256 group: 1\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5413","RelatedDescription":"Closed issue \"retinanet-bbox/regression_submodel/pyramid_regression_1/Relu:0_nchwc' Status Message: Input channels C is not equal to kernel channels * group. C: 40 kernel channels: 256 group: 1\" (#5413)"},{"Id":"700216175","IsPullRequest":false,"CreatedAt":"2020-09-30T21:39:36","Actor":"egmkang","Number":"5394","RawContent":null,"Title":"SVM IndexOutOfRangeException","State":"closed","Body":"### System information\r\n\r\n- CentOS 7.x(kernel 3.10.0-514.26.2.el7.x86_64)\r\n- .net core 2.1\r\n\r\n### Issue\r\n\r\ni use SVM to impl a classifier to test a short input text is AD. recently it throw Exception occasionally (both ML.NET 1.2 and 1.5.1).\r\n\r\n### Source code / logs\r\n\r\n```\r\nException:System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at Microsoft.ML.Internal.Utilities.Utils.CopyTo[T](List`1 src, Span`1 dst, Nullable`1 count)\r\n   at Microsoft.ML.Transforms.Text.WordTokenizingTransformer.Mapper.<>c__DisplayClass8_0.<MakeGetterOne>b__0(VBuffer`1& dst)\r\n   at Microsoft.ML.Transforms.ValueToKeyMappingTransformer.BoundTermMap.Base`1.<>c__DisplayClass3_0.<GetMappingGetter>b__1(VBuffer`1& dst)\r\n   at Microsoft.ML.Transforms.Text.NgramExtractingTransformer.Mapper.<>c__DisplayClass11_0.<MakeGetter>b__2(VBuffer`1& dst)\r\n   at Microsoft.ML.Transforms.LpNormNormalizingTransformer.Mapper.<>c__DisplayClass8_0.<MakeGetter>b__5(VBuffer`1& dst)\r\n   at Microsoft.ML.Data.ColumnConcatenatingTransformer.Mapper.BoundColumn.<>c__DisplayClass20_0`1.<MakeGetter>b__0(VBuffer`1& dst)\r\n   at Microsoft.ML.Data.SchemaBindablePredictorWrapperBase.<>c__DisplayClass19_0`2.<GetValueGetter>b__0(TDst& dst)\r\n   at Microsoft.ML.Data.PredictedLabelScorerBase.EnsureCachedPosition[TScore](Int64& cachedPosition, TScore& score, DataViewRow boundRow, ValueGetter`1 scoreGetter)\r\n   at Microsoft.ML.Data.BinaryClassifierScorer.<>c__DisplayClass15_0.<GetPredictedLabelGetter>b__0(Single& dst)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.<>c__DisplayClass10_0`1.<CreateDirectSetter>b__0(TRow row)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.FillValues(TRow row)\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5394","RelatedDescription":"Closed issue \"SVM IndexOutOfRangeException\" (#5394)"},{"Id":"706801803","IsPullRequest":false,"CreatedAt":"2020-09-30T20:40:19","Actor":"wenrongwu","Number":"5409","RawContent":null,"Title":"It's happened at EstimatorChain.fit at asp.net web site with .net 4.7 and 4.8. The code works fine at Visual Studio 2019 with IIS express.","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5409","RelatedDescription":"Closed issue \"It's happened at EstimatorChain.fit at asp.net web site with .net 4.7 and 4.8. The code works fine at Visual Studio 2019 with IIS express.\" (#5409)"},{"Id":"710396750","IsPullRequest":false,"CreatedAt":"2020-09-30T20:39:14","Actor":"eventxplore","Number":"5412","RawContent":null,"Title":"Issue with Graph.def invalid for a tensorflow model","State":"closed","Body":"Windows 10 latest\r\n.NET Core 3.1\r\n\r\nOpening savedmodel tensorflow pb file gives invalid Graph.def message.\r\n\r\nThe pb file is possible to open and view with this site:\r\nhttps://lutzroeder.github.io/netron/\r\n\r\nIt warns about huge model and it is huge with a complex network.\r\n\r\nWhen opening the file in ML.NET:\r\nLoadTensorFlowModel(<path>)  I get the message.\r\n\r\nI have opened another pb file ok so my environment is setup ok by this.\r\n\r\nI would like to get more info about what is wrong with the model file, to verify it before it is opened.\r\n\r\nIs there a verification tool or specification that could be matched to check the pb file, Thanks?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5412","RelatedDescription":"Closed issue \"Issue with Graph.def invalid for a tensorflow model\" (#5412)"},{"Id":"711737646","IsPullRequest":true,"CreatedAt":"2020-09-30T20:08:00","Actor":"antoniovs1029","Number":"5415","RawContent":null,"Title":"Change the _maxCalibrationExamples default on CalibratorUtils","State":"closed","Body":"As reported offline, ML.NET yielded different results than TLC when training a PlattCalibrator with the same dataset.\r\n\r\nUpon further investigation, it turns out that it only happened on datasets over 1 million rows, and the reason was that when porting the CalibratorUtils class from TLC, a \"_maxCalibrationExamples = 1000000\" default parameter was added.\r\n\r\nUpon reading through the code (in particular [CalibratorTrainingBase's ProcessingTrainingExample](https://github.com/dotnet/machinelearning/blob/4960f9de83351b25874e58d1ca504c9a32aa1112/src/Microsoft.ML.Data/Prediction/Calibrator.cs#L1437-L1443)) it turns out that on TLC `TrainCalibrator` was called with `maxRows = 0`, and this made that when training the PlattCalibrator, all the dataset was seen, but only 1M rows where selected randomly to be [added to the DataStore](https://github.com/dotnet/machinelearning/blob/4960f9de83351b25874e58d1ca504c9a32aa1112/src/Microsoft.ML.Data/Prediction/Calibrator.cs#L1402-L1417). In contrast, on ML.NET that same method was called with `maxRows = 1M`, and this made that only the first 1M rows were added to the DataStore (instead of randomly selecting them from the complete dataset). This caused bias and undesired results.","Url":"https://github.com/dotnet/machinelearning/pull/5415","RelatedDescription":"Closed or merged PR \"Change the _maxCalibrationExamples default on CalibratorUtils\" (#5415)"},{"Id":"706647770","IsPullRequest":true,"CreatedAt":"2020-09-30T18:13:21","Actor":"antoniovs1029","Number":"5406","RawContent":null,"Title":"Update to Onnxruntime 1.5.1","State":"closed","Body":"Updated to use Onnxruntime 1.5.1, and also added some variables to the Onnx-related tests so it's easier to manually test the onnxruntime GPU prereleases whenever it's necessary.","Url":"https://github.com/dotnet/machinelearning/pull/5406","RelatedDescription":"Closed or merged PR \"Update to Onnxruntime 1.5.1\" (#5406)"},{"Id":"706692416","IsPullRequest":true,"CreatedAt":"2020-09-30T04:58:50","Actor":"antoniovs1029","Number":"5407","RawContent":null,"Title":"[Draft] Test Onnx 1.4.0","State":"closed","Body":"[Draft] Test Onnx 1.4.0\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5407","RelatedDescription":"Closed or merged PR \"[Draft] Test Onnx 1.4.0\" (#5407)"},{"Id":"705720023","IsPullRequest":false,"CreatedAt":"2020-09-27T20:28:32","Actor":"CBrauer","Number":"5403","RawContent":null,"Title":"System.Collections.Immutable  not found in .Net Framework 4.8 and ML.NET 1.5.1/1.5.2","State":"closed","Body":"### System information\r\n\r\nWindows 10 Enterprise: Build:,19041.508\r\n\r\nMicrosoft Visual Studio Professional 2019, Version 16.7.3\r\nVisualStudio.16.Release/16.7.3+30503.244\r\nMicrosoft .NET Framework, Version 4.8.04084\r\n\r\n### Packages\r\n\r\n```\r\n<packages>\r\n  <package id=\"Google.Protobuf\" version=\"4.0.0-rc2\" targetFramework=\"net48\" />\r\n  <package id=\"LightGBM\" version=\"3.0.0\" targetFramework=\"net48\" />\r\n  <package id=\"Microsoft.ML\" version=\"1.5.1\" targetFramework=\"net48\" />\r\n  <package id=\"Microsoft.ML.CpuMath\" version=\"1.5.1\" targetFramework=\"net48\" />\r\n  <package id=\"Microsoft.ML.DataView\" version=\"1.5.1\" targetFramework=\"net48\" />\r\n  <package id=\"Microsoft.ML.FastTree\" version=\"1.5.1\" targetFramework=\"net48\" />\r\n  <package id=\"Microsoft.ML.LightGbm\" version=\"1.5.1\" targetFramework=\"net48\" />\r\n  <package id=\"Microsoft.ML.TensorFlow\" version=\"1.5.1\" targetFramework=\"net48\" />\r\n  <package id=\"Newtonsoft.Json\" version=\"12.0.3\" targetFramework=\"net48\" />\r\n  <package id=\"NumSharp\" version=\"0.20.5\" targetFramework=\"net48\" />\r\n  <package id=\"NumSharp.Lite\" version=\"0.1.8\" targetFramework=\"net48\" />\r\n  <package id=\"Protobuf.Text\" version=\"0.4.0\" targetFramework=\"net48\" />\r\n  <package id=\"System.Buffers\" version=\"4.5.1\" targetFramework=\"net48\" />\r\n  <package id=\"System.CodeDom\" version=\"5.0.0-preview.8.20407.11\" targetFramework=\"net48\" />\r\n  <package id=\"System.Collections.Immutable\" version=\"5.0.0-preview.8.20407.11\" targetFramework=\"net48\" />\r\n  <package id=\"System.IO.FileSystem.AccessControl\" version=\"5.0.0-preview.8.20407.11\" targetFramework=\"net48\" />\r\n  <package id=\"System.Memory\" version=\"4.5.4\" targetFramework=\"net48\" />\r\n  <package id=\"System.Numerics.Vectors\" version=\"4.6.0-preview5.19224.8\" targetFramework=\"net48\" />\r\n  <package id=\"System.Reflection.Emit.Lightweight\" version=\"4.7.0\" targetFramework=\"net48\" />\r\n  <package id=\"System.Runtime.CompilerServices.Unsafe\" version=\"5.0.0-preview.8.20407.11\" targetFramework=\"net48\" />\r\n  <package id=\"System.Security.AccessControl\" version=\"5.0.0-preview.8.20407.11\" targetFramework=\"net48\" />\r\n  <package id=\"System.Security.Principal.Windows\" version=\"5.0.0-preview.8.20407.11\" targetFramework=\"net48\" />\r\n  <package id=\"System.Threading.Channels\" version=\"5.0.0-preview.8.20407.11\" targetFramework=\"net48\" />\r\n  <package id=\"System.Threading.Tasks.Dataflow\" version=\"5.0.0-preview.8.20407.11\" targetFramework=\"net48\" />\r\n  <package id=\"System.Threading.Tasks.Extensions\" version=\"4.5.4\" targetFramework=\"net48\" />\r\n  <package id=\"TensorFlow.NET\" version=\"0.20.0-preview4\" targetFramework=\"net48\" />\r\n</packages>\r\n```\r\n\r\n### Issue\r\n\r\nAfter upgrading to prerelease ML.NET 1.5.1, I am now getting the following error:\r\n\r\n```\r\nSystem.IO.FileLoadException: Could not load file or assembly 'System.Collections.Immutable, Version=1.2.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\nFile name: 'System.Collections.Immutable, Version=1.2.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n```\r\n\r\n\r\nAny help will be greatly appreciated.\r\n\r\nCharles\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5403","RelatedDescription":"Closed issue \"System.Collections.Immutable  not found in .Net Framework 4.8 and ML.NET 1.5.1/1.5.2\" (#5403)"},{"Id":"709087481","IsPullRequest":false,"CreatedAt":"2020-09-25T18:40:50","Actor":"nnoradie","Number":"5411","RawContent":null,"Title":"DetectEntireAnomalyBySrCnn should not deseasonalize if given seasonal period = -1. Instead we see an error","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**:  1.5.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nPassed seasonality period -1 into DetectEntireAnomalyBySrCnn\r\n\r\n- **What happened?**\r\nAn error was thrown\r\n\r\n- **What did you expect?**\r\nNo error, just for deseasonalizing to be skipped\r\n\r\n### Source code / logs\r\n![image](https://user-images.githubusercontent.com/69877427/94292232-88a0fc00-ff11-11ea-8c12-51557613e5a7.png)\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5411","RelatedDescription":"Closed issue \"DetectEntireAnomalyBySrCnn should not deseasonalize if given seasonal period = -1. Instead we see an error\" (#5411)"},{"Id":"708562742","IsPullRequest":false,"CreatedAt":"2020-09-25T00:57:09","Actor":"lisahua","Number":"5410","RawContent":null,"Title":"SrCnnEntireAnomalyDetectorOptions should support Non-seasonal cases","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: .Net 4.8\r\n- **.NET Version (eg., dotnet --info)**: Ml.Net 1.5.2\r\n\r\n### Issue\r\n\r\n- **What did you do?** Try to apply detect anomaly\r\n- **What happened?** We expect to use the SrCnnEntireAnomalyDetectorOptions for non-seasonal data, yet it gives an assertion that period cannot be negative. Shouldn't we gracefully ignore deseasonalize if period < 0?\r\n\r\n- **What did you expect?**  SrCnnEntireAnomalyDetectorOptions should support Non-seasonal cases\r\n\r\n### Source code / logs\r\n\r\nWe expect to use the SrCnnEntireAnomalyDetectorOptions for non-seasonal data, yet it gives an assertion that period cannot be negative. **Shouldn't we gracefully ignore deseasonalize if period < 0?** \r\n\r\n```\r\n       seasonalPeriod = mlContext.AnomalyDetection.DetectSeasonality(..)\r\n            var anomalyDetectorOptions = new SrCnnEntireAnomalyDetectorOptions()\r\n            {\r\n                DetectMode = detectMode,\r\n                Threshold = adjustThreshold,\r\n                Sensitivity = this.inputMetadata.Sensitivity,\r\n                Period =seasonalPeriod < 0  ? 0 : seasonalPeriod,\r\n            };\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5410","RelatedDescription":"Open issue \"SrCnnEntireAnomalyDetectorOptions should support Non-seasonal cases\" (#5410)"},{"Id":"706719927","IsPullRequest":false,"CreatedAt":"2020-09-22T22:00:18","Actor":"justinormont","Number":"5408","RawContent":null,"Title":"Ranking AutoML Sample","State":"open","Body":"The [ML․NET samples repo](https://github.com/dotnet/machinelearning-samples) could use a ranking AutoML sample.\r\n\r\nCurrently there are AutoML samples for:\r\n* [Binary Classification sample](https://github.com/dotnet/machinelearning-samples/blob/master/samples/csharp/getting-started/BinaryClassification_AutoML)\r\n* [MultiClass Classification sample](https://github.com/dotnet/machinelearning-samples/blob/master/samples/csharp/getting-started/MulticlassClassification_AutoML)\r\n* [Regression sample](https://github.com/dotnet/machinelearning-samples/blob/master/samples/csharp/getting-started/Regression_AutoML)\r\n* [Advanced experiment sample](https://github.com/dotnet/machinelearning-samples/blob/master/samples/csharp/getting-started/AdvancedExperiment_AutoML)\r\n\r\nThese existing demos are missing how to use ranking in AutoML․NET.\r\n\r\nI would recommend basing on the [existing ranking sample](https://github.com/dotnet/machinelearning-samples/blob/master/samples/csharp/getting-started/Ranking_Web) and converting it to an AutoML sample.","Url":"https://github.com/dotnet/machinelearning/issues/5408","RelatedDescription":"Open issue \"Ranking AutoML Sample\" (#5408)"},{"Id":"706070373","IsPullRequest":false,"CreatedAt":"2020-09-22T04:31:52","Actor":"ntpthinh","Number":"5405","RawContent":null,"Title":"CustomMapping causes problem when used inside an Autodesk plugin","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n- **.NET Version (eg., dotnet --info)**:  .NET framework 4.7\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI use [Normalize CustomMapping](https://github.com/dotnet/machinelearning-samples/blob/master/samples/modelbuilder/ImageClassification_Azure_LandUse/LandUseML.Model/NormalizeMapping.cs) for ONNX model \r\nWithout the mapping, everything works fine and it stills worked in development environment. The model, the way I load the model are the same.\r\n\r\n- **What happened?**\r\nWhen I load my application as a plugin for another application (with all of needed libraries), they always ask for missing library although they have been added (exact version). New libraries are asked each time but all of them are releated to ML.NET (Microsoft.ML.Transforms, System.Memory for eg.). I wonder if CustomMapping causes incompatibility in library version. \r\n- **What did you expect?**\r\nI can load library without errors.\r\n### Source code / logs\r\nThe code is basically the same as tutorial but I will show here for validation\r\n```\r\nMLContext mlContext = new MLContext();\r\nvar data = mlContext.Data.LoadFromEnumerable(new List<ImageData>());\r\nvar pipeline = mlContext.Transforms.LoadImages(outputColumnName: \"image\", imageFolder: \"\", inputColumnName: nameof(ImageData.ImagePath))\r\n                    .Append(mlContext.Transforms.ResizeImages(outputColumnName: ModelSettings.ModelInput, imageWidth: ImageResNetSettings.imageWidth, imageHeight: ImageResNetSettings.imageHeight, inputColumnName: \"image\"))\r\n                    .Append(mlContext.Transforms.ExtractPixels(outputColumnName: ModelSettings.ModelInput))\r\n                    .Append(mlContext.Transforms.CustomMapping(new NormalizeMapping().GetMapping(), contractName: nameof(NormalizeMapping)))\r\n                    .Append(mlContext.Transforms.ApplyOnnxModel(modelFile: modelLocation, outputColumnNames: new[] { ModelSettings.ModelOutput }, inputColumnNames: new[] { ModelSettings.ModelInput }));\r\nvar model = pipeline.Fit(data);\r\nmlContext.ComponentCatalog.RegisterAssembly(typeof(NormalizeMapping).Assembly);\r\nmlContext.Model.Save(model, data.Schema, _outputModelFilePath);\r\n```\r\n\r\n```Uri uri = new Uri(modelLocation, UriKind.Relative);\r\nStreamResourceInfo info = Application.GetResourceStream(uri);                  \r\ntrainedModel = mlContext.Model.Load(info.Stream, out DataViewSchema modelSchema);\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5405","RelatedDescription":"Open issue \"CustomMapping causes problem when used inside an Autodesk plugin\" (#5405)"},{"Id":"700895060","IsPullRequest":false,"CreatedAt":"2020-09-21T21:26:20","Actor":"kikipoulet","Number":"5397","RawContent":null,"Title":"Can't use GPU","State":"closed","Body":"### System information\r\n\r\n- Windows 10\r\n- .NET Core 3.1\r\n\r\n### Issue\r\n\r\n- I tried to run the \"DeepLearning_ImageClassification_Training\" solution from the samples, the ImageClassification.Train project. Everything worked fine as expected. Then I tried to use the my GPU (Nvidia Quadro P400) to run it again. I did : \r\n     -> uninstalled the \"SciSharp.TensorFlow.Redist Nuget\" Package and installed the \"Windows-GPU\" one.\r\n     -> Installed CUDA V10 (cuda_10.0.130_411.31_win10) and Cudnn (cudnn-10.0-windows10-x64-v7.6.4.38) and put the cudnn dll in the CUDA bin folder.\r\n\r\n- The project still run correctly but does not use the Nvidia GPU at all and use the CPU.\r\n\r\n\r\n### Source code / logs\r\n\r\nLiterally this project : https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/DeepLearning_ImageClassification_Training/ImageClassification.Train\r\n\r\n\r\nThanks for your help ! :) ","Url":"https://github.com/dotnet/machinelearning/issues/5397","RelatedDescription":"Closed issue \"Can't use GPU\" (#5397)"},{"Id":"705875264","IsPullRequest":true,"CreatedAt":"2020-09-21T19:57:49","Actor":"LittleLittleCloud","Number":"5404","RawContent":null,"Title":"update tensorflow.net to 0.20.0","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n# Related issue\r\n#5401 ","Url":"https://github.com/dotnet/machinelearning/pull/5404","RelatedDescription":"Open PR \"update tensorflow.net to 0.20.0\" (#5404)"},{"Id":"704892710","IsPullRequest":false,"CreatedAt":"2020-09-21T18:57:23","Actor":"arafattehsin","Number":"5402","RawContent":null,"Title":"Model generated by Object Detection does not work with Windows.AI.MachineLearning libraries","State":"closed","Body":"Hi Team! Is this ML.NET's issue or WinML team's problem? Happy to close it here and open it there if it's the case.\r\n\r\n### System information\r\n\r\n- **Windows 10 / 19041.329*:\r\n- **UWP**: \r\n\r\n### Issue\r\n\r\n- **I tried to use the ONNX model created by ML.NET Object Detection (Azure ML)**\r\n- **I gave me an error**\r\n- **It must have worked fine**\r\n\r\n### Source code / logs\r\n\r\nHere's the issue I get; I have tried using last 3 builds and it works well with other ONNX models. \r\n\r\n![image](https://user-images.githubusercontent.com/16351038/93669522-30649700-fad8-11ea-9efa-1bb75339ffad.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5402","RelatedDescription":"Closed issue \"Model generated by Object Detection does not work with Windows.AI.MachineLearning libraries\" (#5402)"},{"Id":"711463242","IsPullRequest":false,"CreatedAt":"2020-09-21T03:42:05","Actor":"bizbizzz","Number":"5414","RawContent":null,"Title":"Can predictions be bounded?","State":"open","Body":"**Describe Bug**\r\nPredicted values are outside of expected range. Is there a way to bound the predictions? Or set to a minimum value?\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\nGenerate regression model using CLI and play with inputs\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5414","RelatedDescription":"Open issue \"Can predictions be bounded?\" (#5414)"},{"Id":"699288573","IsPullRequest":false,"CreatedAt":"2020-09-20T21:20:08","Actor":"JohnWasTakenWasTaken","Number":"5393","RawContent":null,"Title":"Error In Blazor When Creating Prediction Engine","State":"closed","Body":"I have a problem with Blazor. I tried to do what's said in the documentation about loading existing model from remote source. (https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/save-load-machine-learning-models-ml-net)\r\n\r\nThis is what I came up with:\r\n\r\n```\r\n@page \"/analyzer\"\r\n@inject HttpClient _client\r\n<h1>Analyzer</h1>\r\n\r\n<input class=\"form-control\" @bind:event=\"oninput\" @bind=\"InputText\"/>\r\n\r\n@if (InputText != null)\r\n{\r\n    <h1>@InputText</h1>\r\n}\r\n\r\n@code {\r\n    private string _inputText, mlPrediction;\r\n    DataViewSchema modelSchema;\r\n    MLContext mlContext = new MLContext();\r\n    public string InputText\r\n    {\r\n        get\r\n        {\r\n            return _inputText;\r\n        }\r\n        set\r\n        {\r\n            _inputText = value;\r\n            GetPrediction();\r\n        }\r\n    }\r\n    private PredictionEngine<ModelInput, ModelOutput> _predictionEngine;\r\n    protected override async Task OnInitializedAsync()\r\n    {\r\n        Stream modelFile = await _client.GetStreamAsync(\"<MODEL.ZIP ENDPOINT>\");\r\n        ITransformer trainedModel = mlContext.Model.Load(modelFile, out modelSchema);\r\n        _predictionEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(trainedModel);\r\n    }\r\n    private void GetPrediction()\r\n    {\r\n        ModelInput mlInput = new ModelInput();\r\n        mlInput.Sentiment = InputText;\r\n        ModelOutput mlOutput = _predictionEngine.Predict(mlInput);\r\n        mlPrediction = mlOutput.Prediction;\r\n    }\r\n}\r\n```\r\n\r\nWhen I initialize the page, there was an error, and the only thing I understood is there is an error in line 32:\r\n`_predictionEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(trainedModel);`\r\n\r\nHere's the error message:\r\n```\r\nMicrosoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRenderer[100]\r\n      Unhandled exception rendering component: Exception has been thrown by the target of an invocation.\r\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IO.FileNotFoundException: Could not load the file 'Microsoft.ML.Transforms, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n  at (wrapper managed-to-native) System.Reflection.RuntimeMethodInfo.InternalInvoke(System.Reflection.RuntimeMethodInfo,object,object[],System.Exception&)\r\n  at System.Reflection.RuntimeMethodInfo.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) <0x296c470 + 0x000ce> in <filename unknown>:0 \r\n   --- End of inner exception stack trace ---\r\n  at (wrapper managed-to-native) System.Reflection.RuntimeMethodInfo.InternalInvoke(System.Reflection.RuntimeMethodInfo,object,object[],System.Exception&)\r\n  at System.Reflection.RuntimeMethodInfo.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) <0x296c470 + 0x000ce> in <filename unknown>:0 \r\n   --- End of inner exception stack trace ---\r\n  at (wrapper managed-to-native) System.Reflection.RuntimeMethodInfo.InternalInvoke(System.Reflection.RuntimeMethodInfo,object,object[],System.Exception&)\r\n  at System.Reflection.RuntimeMethodInfo.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) <0x296c470 + 0x000ce> in <filename unknown>:0 \r\n   --- End of inner exception stack trace ---\r\n  at System.Reflection.RuntimeMethodInfo.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) <0x296c470 + 0x000f6> in <filename unknown>:0 \r\n  at System.Reflection.MethodBase.Invoke (System.Object obj, System.Object[] parameters) <0x296bd98 + 0x00014> in <filename unknown>:0 \r\n  at Microsoft.ML.Runtime.ComponentCatalog+LoadableClassInfo.CreateInstanceCore (System.Object[] ctorArgs) <0x545e428 + 0x000dc> in <filename unknown>:0 \r\n  at Microsoft.ML.Runtime.ComponentCatalog+LoadableClassInfo.CreateInstance (Microsoft.ML.Runtime.IHostEnvironment env, System.Object args, System.Object[] extra) <0x545e070 + 0x000c4> in <filename unknown>:0 \r\n  at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes] (Microsoft.ML.Runtime.IHostEnvironment env, System.Type signatureType, TRes& result, System.String name, System.String options, System.Object[] extra) <0x545d848 + 0x001c8> in <filename unknown>:0 \r\n  at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes,TSig] (Microsoft.ML.Runtime.IHostEnvironment env, TRes& result, System.String name, System.String options, System.Object[] extra) <0x545d488 + 0x00018> in <filename unknown>:0 \r\n  at Microsoft.ML.ModelLoadContext.TryLoadModelCore[TRes,TSig] (Microsoft.ML.Runtime.IHostEnvironment env, TRes& result, System.Object[] extra) <0x5365f30 + 0x00068> in <filename unknown>:0 \r\n  at Microsoft.ML.ModelLoadContext.TryLoadModel[TRes,TSig] (Microsoft.ML.Runtime.IHostEnvironment env, TRes& result, Microsoft.ML.RepositoryReader rep, Microsoft.ML.Repository+Entry ent, System.String dir, System.Object[] extra) <0x535cb38 + 0x00068> in <filename unknown>:0 \r\n  at Microsoft.ML.ModelLoadContext.LoadModel[TRes,TSig] (Microsoft.ML.Runtime.IHostEnvironment env, TRes& result, Microsoft.ML.RepositoryReader rep, Microsoft.ML.Repository+Entry ent, System.String dir, System.Object[] extra) <0x535c980 + 0x00038> in <filename unknown>:0 \r\n  at Microsoft.ML.ModelLoadContext.LoadModelOrNull[TRes,TSig] (Microsoft.ML.Runtime.IHostEnvironment env, TRes& result, Microsoft.ML.RepositoryReader rep, System.String dir, System.Object[] extra) <0x5351628 + 0x00064> in <filename unknown>:0 \r\n  at Microsoft.ML.ModelLoadContext.LoadModel[TRes,TSig] (Microsoft.ML.Runtime.IHostEnvironment env, TRes& result, Microsoft.ML.RepositoryReader rep, System.String dir, System.Object[] extra) <0x5351438 + 0x00034> in <filename unknown>:0 \r\n  at Microsoft.ML.ModelOperationsCatalog.Load (System.IO.Stream stream, Microsoft.ML.DataViewSchema& inputSchema) <0x5243828 + 0x000a0> in <filename unknown>:0 \r\n  at Deployments.Pages.SentimentAnalyzer2.OnInitializedAsync () [0x00096] in <PROJECTDIRECTORY>\\Pages\\SentimentAnalyzer2.razor:32 \r\n  at Microsoft.AspNetCore.Components.ComponentBase.RunInitAndSetParametersAsync () <0x2ecb9b0 + 0x0013a> in <filename unknown>:0 \r\n  at Microsoft.AspNetCore.Components.RenderTree.Renderer.GetErrorHandledTask (System.Threading.Tasks.Task taskToHandle) <0x31219d8 + 0x000b6> in <filename unknown>:0\r\n```\r\n\r\nIt seems like the real problem is: `System.IO.FileNotFoundException: Could not load the file 'Microsoft.ML.Transforms, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.`\r\n\r\nWhat workaround can I do to fix this?\r\n\r\nI tried getting the model from a cloud host and from wwwroot using GetStreamAsync. Both of their errors has to do with that line.","Url":"https://github.com/dotnet/machinelearning/issues/5393","RelatedDescription":"Closed issue \"Error In Blazor When Creating Prediction Engine\" (#5393)"},{"Id":"704607241","IsPullRequest":false,"CreatedAt":"2020-09-18T19:32:10","Actor":"JakeRadMSFT","Number":"5401","RawContent":null,"Title":"Upgrade TensorFlow to 2.3 / Tensorflow.NET to 0.20","State":"open","Body":"Hello,\r\nI'm opening this issue for our discussion around migrating our implementation of Image Classification to TF.NET 0.20. It's release is imminent and wanted to have a public place for the discussion.\r\n\r\nCheers,\r\nJake ","Url":"https://github.com/dotnet/machinelearning/issues/5401","RelatedDescription":"Open issue \"Upgrade TensorFlow to 2.3 / Tensorflow.NET to 0.20\" (#5401)"},{"Id":"702152822","IsPullRequest":true,"CreatedAt":"2020-09-15T20:51:33","Actor":"harishsk","Number":"5400","RawContent":null,"Title":"Updated branch version","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5400","RelatedDescription":"Closed or merged PR \"Updated branch version\" (#5400)"},{"Id":"701466963","IsPullRequest":true,"CreatedAt":"2020-09-14T22:11:54","Actor":"LittleLittleCloud","Number":"5399","RawContent":null,"Title":"[AutoML]  add SerializedProperties to PipelineNode class.","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n# Related issue\r\n- https://github.com/dotnet/machinelearning-modelbuilder/issues/792\r\n\r\nThis PR adds `SerializedProperties`, which is a `Dictionary<string, string>` with `PipelineNode`'s property's name as key and **the code to create this property** as value, so that Microsoft.ML.CodeGenerator can directly rely on it to recreate the pipeline. Through this model builder will be able to persist pipeline info in json format so that users will be able to re-add project even after they close model builder. ","Url":"https://github.com/dotnet/machinelearning/pull/5399","RelatedDescription":"Open PR \"[AutoML]  add SerializedProperties to PipelineNode class.\" (#5399)"},{"Id":"700344451","IsPullRequest":true,"CreatedAt":"2020-09-12T19:13:12","Actor":"jasallen","Number":"5395","RawContent":null,"Title":"Fixes #744 Perf improvement for TopK Accuracy and return all topK in Classification Evaluator","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n\r\n- Improved the perf of the Top K calculation in the ClassificationEvaluator\r\n- Added a new benchmark. Improvements are very small but still present with the tiny data set and only 4 classes. \r\n- outputting AllTopK for K=1..ClassCount always, but left Top k parameter and output of the singular TopK metric to not break compatibility.\r\n\r\nFixes #744","Url":"https://github.com/dotnet/machinelearning/pull/5395","RelatedDescription":"Open PR \"Fixes #744 Perf improvement for TopK Accuracy and return all topK in Classification Evaluator\" (#5395)"},{"Id":"694532943","IsPullRequest":false,"CreatedAt":"2020-09-11T21:24:39","Actor":"attiqeurrehman","Number":"5390","RawContent":null,"Title":"Implement different algorithms ","State":"closed","Body":"Hi,\r\n\r\nI am student and looking to implement different algorithms regarding forecast to better understand the workings of it and later use them. Following are the algorithms: \r\n\r\n1. Linear Regression\r\n2. Ensemble methods (Random Forest Regression)\r\n3. XGBoost\r\n4. Long Short-Term Memory (artificial recurrent neural network)\r\n5. ARIMA Time Series Forecasting\r\n\r\nIs there any document or guidelines that can help me get started. \r\n\r\nThanks,\r\nAttiqe\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5390","RelatedDescription":"Closed issue \"Implement different algorithms \" (#5390)"},{"Id":"697528817","IsPullRequest":false,"CreatedAt":"2020-09-11T16:45:20","Actor":"lyyblnl","Number":"5391","RawContent":null,"Title":"please help me","State":"closed","Body":"### System information\r\n\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n- **The program runtime class is not created,Can I use a dynamic collection to build a DataView.**\r\n\r\n### Source code / logs\r\n```C#\r\nvar values = ConvertJson.DeserializeObject<List<Dictionary<string,string>>>(str);\r\nMLContext mlContext = new MLContext();\r\nvar builder = new DataViewSchema.Builder();\r\nbuilder.AddColumn(\"Id\", TextDataViewType.Instance);\r\nbuilder.AddColumn(columns[1], NumberDataViewType.Int32);\r\nbuilder.AddColumn(columns[0], NumberDataViewType.Single);\r\nvar schema = builder.ToSchema();\r\nIDataView dataView = mlContext.Data.LoadFromEnumerable<Dictionary<string, string>>(values, schema);\r\n```\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5391","RelatedDescription":"Closed issue \"please help me\" (#5391)"},{"Id":"693584297","IsPullRequest":false,"CreatedAt":"2020-09-10T22:48:46","Actor":"rspaulino","Number":"5388","RawContent":null,"Title":"Typo - anMicrosoft","State":"closed","Body":"https://github.com/dotnet/machinelearning/blob/5370692f6d1e6f1f686596d530032b4226dc9e80/src/Microsoft.ML.Data/DataLoadSave/DataOperationsCatalog.cs#L66\r\n\r\nTypo:\r\ndata: The enumerable data containing type TRow to convert to anMicrosoft.ML.IDataView .\r\n\r\nShould be:\r\ndata: The enumerable data containing type TRow to convert to an Microsoft.ML.IDataView.\r\n\r\n<img width=\"625\" alt=\"Screen Shot 2020-09-04 at 4 22 45 PM\" src=\"https://user-images.githubusercontent.com/378671/92282080-f33eb900-eeca-11ea-87aa-c4d00817aaaa.png\">\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5388","RelatedDescription":"Closed issue \"Typo - anMicrosoft\" (#5388)"},{"Id":"693178229","IsPullRequest":false,"CreatedAt":"2020-09-10T21:08:05","Actor":"PMGruber","Number":"5387","RawContent":null,"Title":"Image preprocessing in pipeline results in different prediction value then manual preprocessing","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n      Windows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\n      .net Core 3.1\r\n- **ML.NET Version (eg., dotnet --info)**: \r\n      ML.NET 1.5.1\r\n### Issue\r\n\r\n- **What did you do?**\r\nWith my ML.NET code I load an existing TensorFlow Model for image classification and execute it for a single image. This I do in two different ways where the difference is how I generate the input data for the prediction.\r\nV1: Load bitmap with \"normal\" C# code and manually create the float array that is used for prediction directly.\r\nV2: Use ML.NET pipeline for preprocessing (Load image, resize, extract pixels) before it goes into prediction.\r\n\r\n- **What happened?**\r\nThe two variants result in different prediction values.\r\n\r\n- **What did you expect?**\r\nThe same prediction result for both variants.\r\n\r\n### Source code / logs\r\n\r\nThe model uses an image in float representation as input (image count, image height, image width, image channels)\r\n`Vector<Single, 275, 384, 3>`\r\nand returns as result a list of probabilities.\r\n\r\nThe test bitmap is a grayscale image with the same size like expected from the model (384x275).\r\n\r\nWhen the model is executed with python code following preprocessing is performed (load image, copy channel to generate a \"RGB\" image, extend the required 4th dimension)\r\n```\r\nimg = plt.imread(path_image)\r\nimg = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)\r\nimg = np.expand_dims(img, axis=0)\r\n```\r\nWhen prediction is executed the best match is ~27,71%.\r\n\r\nThe same workflow I implemented with ML.NET. The classify method simply writes the results in console window.\r\n```\r\nvar image = new Bitmap(_predictSingleImagePath);\r\nvar floatImage = VerySlowBitmapTo1dFloatArrayConverter(image);\r\n\r\nMLContext mlContextV1 = new MLContext();\r\nITransformer modelV1 = GenerateModelV1(mlContextV1);\r\nClassifySingleImageV1(mlContextV1, modelV1, floatImage);\r\n```\r\n\r\nFor preprocessing I extract pixel values in a very easy way and \"convert and copy\" them to my 1d float representation of the image.\r\n```\r\nprivate static float[] VerySlowBitmapTo1dFloatArrayConverter(Bitmap image)\r\n{\r\n    List<float> floatImage = new List<float>();\r\n\r\n    for (int row = 0; row < image.Height; ++row)\r\n    {\r\n        for (int column = 0; column < image.Width; ++column)\r\n        {\r\n             var pixelValues = image.GetPixel(column, row);\r\n             floatImage.Add(pixelValues.R / 255.0f);\r\n             floatImage.Add(pixelValues.G / 255.0f);\r\n             floatImage.Add(pixelValues.B / 255.0f);\r\n        }\r\n    }\r\n\r\n    return floatImage.ToArray();\r\n }\r\n```\r\n\r\nAfter loading the model I create a pipeline that just contains the execution of the model.\r\n```\r\npublic static ITransformer GenerateModelV1(MLContext mlContext)\r\n{\r\n    IDataView trainingData = mlContext.Data.LoadFromEnumerable(new List<ImageDataV1>());\r\n           \r\n    var tensorFlowModel = mlContext.Model.LoadTensorFlowModel(_TensorFlowModel);\r\n           \r\n    IEstimator<ITransformer> pipeline = tensorFlowModel.ScoreTensorFlowModel(outputColumnNames: new[] { \"StatefulPartitionedCall\" }, inputColumnNames: new[] { \"serving_default_input_4\" }, addBatchDimensionInput: false);\r\n                                            \r\n    ITransformer model = pipeline.Fit(trainingData);\r\n\r\n    return model;\r\n}\r\n```\r\n\r\nFinally I perform a prediction and write the result to console.\r\n```\r\npublic static void ClassifySingleImageV1(MLContext mlContext, ITransformer model, float[] image)\r\n{\r\n    var imageData = new ImageDataV1()\r\n    {\r\n        Image = image\r\n    };\r\n\r\n    var predictor = mlContext.Model.CreatePredictionEngine<ImageDataV1, ImagePrediction>(model);\r\n    var prediction = predictor.Predict(imageData);\r\n\r\n    Console.WriteLine($\"Image predicted with score: {prediction.Scores.Max()} \");\r\n\r\n    foreach(var score in prediction.Scores)\r\n    {\r\n        Console.WriteLine(score.ToString());\r\n    }\r\n}\r\n\r\npublic class ImageDataV1\r\n{\r\n    [LoadColumn(0), ColumnName(\"serving_default_input_4\"), VectorType(316800)]\r\n    public float[] Image;\r\n}\r\n\r\npublic class ImagePrediction\r\n{\r\n    [ColumnName(\"StatefulPartitionedCall\")]\r\n    public float[] Scores;\r\n}\r\n```\r\nWith this code I get as best match the value 0,27709773, so ~27,71% like the python version.\r\n\r\n\r\n\r\nSo far so good. Now I make the same but instead of the manual image handling I use pipeline methods.\r\n\r\nSame workflow, just with different method calls.\r\n```\r\nMLContext mlContextV2 = new MLContext();\r\nITransformer modelV2 = GenerateModelV2(mlContextV2);\r\nClassifySingleImageV2(mlContextV1, modelV2);\r\n```\r\nAlso model execution is quite the same.\r\n```\r\npublic static void ClassifySingleImageV2(MLContext mlContext, ITransformer model)\r\n{\r\n    var imageData = new ImageDataV2()\r\n    {\r\n        ImagePath = _predictSingleImagePath\r\n    };\r\n\r\n    var predictor = mlContext.Model.CreatePredictionEngine<ImageDataV2, ImagePrediction>(model);\r\n    var prediction = predictor.Predict(imageData);\r\n\r\n    Console.WriteLine($\"Image: {Path.GetFileName(imageData.ImagePath)} predicted with score: {prediction.Scores.Max()} \");\r\n\r\n    foreach (var score in prediction.Scores)\r\n    {\r\n        Console.WriteLine(score.ToString());\r\n    }\r\n}\r\n```\r\nThe difference is the used pipeline.\r\nI load the image from the given path.\r\nThen I \"resize\" the image the get a \"known-size image\".\r\nFinal preprocessing step is to get float values from the bitmap.\r\n```\r\npublic static ITransformer GenerateModelV2(MLContext mlContext)\r\n{\r\n    IDataView trainingData = mlContext.Data.LoadFromEnumerable(new List<ImageDataV2>());\r\n\r\n    var tensorFlowModel = mlContext.Model.LoadTensorFlowModel(_TensorFlowModel);\r\n\r\n    IEstimator<ITransformer> pipeline = mlContext.Transforms.LoadImages(outputColumnName: \"serving_default_input_4\", imageFolder: _imagesFolder, inputColumnName: nameof(ImageDataV2.ImagePath));\r\n    pipeline = pipeline.Append(mlContext.Transforms.ResizeImages(outputColumnName: \"serving_default_input_4\", imageWidth: ImageSettings.ImageWidth, imageHeight: ImageSettings.ImageHeight, inputColumnName: \"serving_default_input_4\"));\r\n    pipeline = pipeline.Append(mlContext.Transforms.ExtractPixels(\r\n                                                        outputColumnName: \"serving_default_input_4\",\r\n                                                        inputColumnName: \"serving_default_input_4\",\r\n                                                        interleavePixelColors: false,\r\n                                                        offsetImage: 0,\r\n                                                        colorsToExtract: ImagePixelExtractingEstimator.ColorBits.Rgb,\r\n                                                        orderOfExtraction: ImagePixelExtractingEstimator.ColorsOrder.ARGB,\r\n                                                        scaleImage: 1,\r\n                                                        outputAsFloatArray: true));\r\n    pipeline = pipeline.Append(tensorFlowModel.ScoreTensorFlowModel(outputColumnNames: new[] { \"StatefulPartitionedCall\" }, inputColumnNames: new[] { \"serving_default_input_4\" }, addBatchDimensionInput: false));                   \r\n                    \r\n    ITransformer model = pipeline.Fit(trainingData);\r\n\r\n    return model;\r\n}\r\n\r\npublic class ImagePrediction\r\n{\r\n    [ColumnName(\"StatefulPartitionedCall\")]\r\n    public float[] Scores;\r\n}\r\n\r\npublic class ImageDataV2\r\n{\r\n    [LoadColumn(0)]\r\n    public string ImagePath;\r\n}\r\n```\r\nWith this pipeline I get a best match of ~49,79%. Quite different from the other implementation. I played a little bit with parameters but was not even close to 27%.\r\n\r\nSome suggestion what I'm doing wrong in preprocessing part of the pipeline?\r\n\r\nI searched for information how I can check the interim results from the pipeline to further trace down the difference. Unforunately I didn't find something that helps me (only things about schemas). Does anybody know some useful documentation/tutorial regarding that topic?\r\n\r\nThanks and regards","Url":"https://github.com/dotnet/machinelearning/issues/5387","RelatedDescription":"Closed issue \"Image preprocessing in pipeline results in different prediction value then manual preprocessing\" (#5387)"},{"Id":"694260267","IsPullRequest":false,"CreatedAt":"2020-09-06T05:46:47","Actor":"BryanXBY","Number":"5389","RawContent":null,"Title":"I need documentation translated to Chinese","State":"open","Body":"\r\n[i need chinese]\r\n\r\n\r\n---\r\n#### 文档详细信息\r\n\r\n⚠ *请勿编辑此部分。 docs.microsoft.com ➟ GitHub 问题链接必须具有此部分。*\r\n\r\n* ID: ee2a2142-6919-89ca-2345-4d03b85dbb62\r\n* Version Independent ID: 33b41463-b4f4-68e6-3cd2-237177c396fa\r\n* Content: [Microsoft.ML.Transforms.Onnx Namespace](https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.ml.transforms.onnx?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/ns-Microsoft.ML.Transforms.Onnx.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/ns-Microsoft.ML.Transforms.Onnx.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/5389","RelatedDescription":"Open issue \"I need documentation translated to Chinese\" (#5389)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-10-07T05:30:34.0053717Z","RunDurationInMilliseconds":731}