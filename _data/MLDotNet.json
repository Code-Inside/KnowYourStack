{"Data":{"GitHub":{"Issues":[{"Id":"1213206121","IsPullRequest":false,"CreatedAt":"2022-04-23T05:34:08","Actor":"IncentWang","Number":"6170","RawContent":null,"Title":"Using ML.NET with Mono On Unity","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Android (Compile code from Mono)\r\n - ML.NET Version: ML.NET 1.7.1\r\n - .NET Version: .NET Standard 2.0\r\n\r\n**Describe the bug**\r\nWhen I am trying to load model from my device, I will get \"UnauthorizedAccessException: Access to the path \"/tmp\" is denied\".\r\n\r\n**To Reproduce**\r\n1. Use Mono to Compile your code,\r\n2. Run it on android,\r\n3. Get the exception.\r\n\r\n**Expected behavior**\r\nI expected it to load the model correctly. I think this is because the Mono makes \"Path.GetTempPath() \" you used to return \"/tmp/\", but I cannot get the permission to access that because my device is not rooted. Is there any chance to skip the code which use the temp path? \r\n\r\n**Screenshots, Code, Sample Projects**\r\nHere is the Exception Screenshot:\r\n![image](https://user-images.githubusercontent.com/60191615/164879167-8525d5c7-f5eb-402e-aaf3-c83e1fe1f8ce.png)\r\n\r\nAnd here is the Code:\r\n```\r\n            Debug.Log(Path.GetTempPath()); // This line will print \"/tmp/\"\r\n            DirectoryInfo dirInfo = new DirectoryInfo(Application.persistentDataPath + \"/MLModel\");\r\n            if (!dirInfo.Exists)\r\n            {\r\n                dirInfo.Create();\r\n            }\r\n\r\n            FileInfo info = new FileInfo(Application.persistentDataPath + ModelPath);\r\n            if (!info.Exists)\r\n            {\r\n                info.Create().Dispose();\r\n                InitializeModelFromStreamingData(Application.persistentDataPath + ModelPath);\r\n            }\r\n\r\n            Stream stream = info.OpenRead();\r\n            _transformer = _context.Model.Load(stream, out _schema); // This line will throw the exception.\r\n            _model = _context.Model.CreatePredictionEngine<ModelInput, ModelOutput>(_transformer);\r\n            stream.Close();\r\n```\r\n\r\n**Additional context**\r\nI am using Unity with C#. If this problem cannot be solved, is there any suggestion to make me load the model in Unity?\r\n\r\nThank you!\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6170","RelatedDescription":"Open issue \"Using ML.NET with Mono On Unity\" (#6170)"},{"Id":"1212685488","IsPullRequest":true,"CreatedAt":"2022-04-22T23:53:10","Actor":"LittleLittleCloud","Number":"6169","RawContent":null,"Title":"Remove 'this' prefix for some projects","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\nAccording to #6166 \r\n\r\nRemove `this` for\r\n- Microsoft.ML.AutoML\r\n- Microsoft.ML.AutoML.Test\r\n- Microsoft.ML.SearchSpace\r\n- Microsoft.ML.SearchSpace.Test\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6169","RelatedDescription":"Closed or merged PR \"Remove 'this' prefix for some projects\" (#6169)"},{"Id":"1211679148","IsPullRequest":true,"CreatedAt":"2022-04-22T00:31:21","Actor":"ericstj","Number":"6168","RawContent":null,"Title":"Update .NET libraries and runtime dependencies","State":"open","Body":"Update to the latest libraries for all dependencies of ML.NET that come from dotnet/runtime (and prior) repositories.\r\n\r\nI noticed that the dependency on `PlatformAbstractions.RuntimeEnvironment.GetRuntimeIdentifier();` was broken because DependencyModel stopped referencing PlatformAbstractions.  I was able to fix this by refactoring that code to use https://docs.microsoft.com/en-us/dotnet/api/system.runtime.loader.assemblydependencyresolver?view=net-6.0 which exists since .NETCore 3.0 and calls in to the host to probe for deps-file-defined dependencies.  I've tested that this works with both local runtime dependencies and nuget cache probing.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6168","RelatedDescription":"Open PR \"Update .NET libraries and runtime dependencies\" (#6168)"},{"Id":"1210313811","IsPullRequest":true,"CreatedAt":"2022-04-21T21:18:16","Actor":"ericstj","Number":"6167","RawContent":null,"Title":"Consolidate all dependencies in Versions.props","State":"closed","Body":"Can be reviewed commit-by-commit.\r\n\r\n1. Organized and removed unused properties.\r\n2. Applied the same naming convention of packageName.Replace(\".\", \"\") + \"Version\" for all properties\r\n3. Moved all static PackageReference/@Version from project files to central props.\r\n\r\nI expect this change to largely be no-difference with one small exception, noted below.","Url":"https://github.com/dotnet/machinelearning/pull/6167","RelatedDescription":"Closed or merged PR \"Consolidate all dependencies in Versions.props\" (#6167)"},{"Id":"1210065069","IsPullRequest":false,"CreatedAt":"2022-04-20T18:32:51","Actor":"LittleLittleCloud","Number":"6166","RawContent":null,"Title":"Remove this prefix in both Microsoft.ML.AutoML and Miicrosoft.ML.SearchSpace","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/6166","RelatedDescription":"Open issue \"Remove this prefix in both Microsoft.ML.AutoML and Miicrosoft.ML.SearchSpace\" (#6166)"},{"Id":"1209698316","IsPullRequest":false,"CreatedAt":"2022-04-20T13:33:46","Actor":"Phoenix-313","Number":"6165","RawContent":null,"Title":"NumericColumnNames won't return more than 1 column","State":"open","Body":"\r\nHi,\r\n\r\nAlthough CategoricalColumnNames returns the correct count of the categorical columns with their correct names, NumericColumnNames on the other hand returns the correct count and column name if the dataset has only one numerical column. However, if the dataset has more than one numerical column, it will always return a count of 1, and the column name will always be \"Features\" for some reason! \r\n\r\nFor example, imagine the following dataset:\r\n\r\nx1, x2, x3, x4\r\n1, T, 3, A\r\n2, T, 4, A\r\n3, L, 4, A\r\n4, L, 4, B\r\n\r\nCategoricalColumnNames will return a count of 2 categorical columns with the names x2 and x4. However, NumericColumnNames  will return a count of 1 instead of 2, and one column name which is \"Features\" instead of x1 and x3. \r\n\r\nThis is how they are implemented: \r\n\r\nColumnInferenceResults columnInference = MLContext.Auto().InferColumns(TrainingDataPath, labelColumnIndex: 4, hasHeader: true);\r\n\r\nColumnInformation columnInformation = columnInference.ColumnInformation;\r\n\r\nICollection<string> CatCols = columnInformation.CategoricalColumnNames;\r\n            \r\nICollection<string> NumCols = columnInformation.NumericColumnNames; \r\n\r\n\r\n\r\nPlease help. Thanks.\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: b000cf86-79fe-a677-3b39-f834e1c4b959\r\n* Version Independent ID: af43d324-d6c1-c104-c16b-81580a638de2\r\n* Content: [ColumnInformation.NumericColumnNames Property (Microsoft.ML.AutoML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.automl.columninformation.numericcolumnnames?view=ml-dotnet-preview#microsoft-ml-automl-columninformation-numericcolumnnames)\r\n* Content Source: [dotnet/xml/Microsoft.ML.AutoML/ColumnInformation.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.AutoML/ColumnInformation.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/6165","RelatedDescription":"Open issue \"NumericColumnNames won't return more than 1 column\" (#6165)"},{"Id":"1209540662","IsPullRequest":false,"CreatedAt":"2022-04-20T11:16:06","Actor":"torronen","Number":"6164","RawContent":null,"Title":"Q: Faster way to Filter DataView","State":"open","Body":"I filter data from a dataview to get all items within a specific time period.\r\nIt seems slow compared to filtering with LINQ from objects in memory. Is there a faster way to do it? \r\n\r\n```\r\n               var boolFilter = df[\"timestamp\"].ElementwiseGreaterThanOrEqual(unixStartTime);\r\n                var hourlydata = df.Filter(boolFilter);\r\n                var boolFilter2 = hourlydata[\"timestamp\"].ElementwiseLessThan(unixEndTime);\r\n                hourlydata = hourlydata.Filter(boolFilter2);\r\n```\r\n\r\nIn this example, I am creating predictions for a certain time period at a time. \r\nIn another example, I may need to filter by exact match. Normally, I might create a dictionary to help, but is there a way to support some type \"indices\" for DataViews?","Url":"https://github.com/dotnet/machinelearning/issues/6164","RelatedDescription":"Open issue \"Q: Faster way to Filter DataView\" (#6164)"},{"Id":"1207530846","IsPullRequest":true,"CreatedAt":"2022-04-19T20:47:17","Actor":"ericstj","Number":"6161","RawContent":null,"Title":"Update some test package dependencies","State":"closed","Body":"Avoid referencing some 1.x era packages.\r\n\r\nAdd a subscription for Microsoft.DotNet.XUnitExtensions since that comes from Arcade.\r\n\r\nThis is just a workaround, best fix would be to have all these packages target newer frameworks.\r\n- https://github.com/microsoft/testfx/issues/1073\r\n- https://github.com/AArnott/Xunit.Combinatorial/commit/309bc69c924401271ec865e0de999294cab2a7f3\r\n- Update to xUnit 3.0\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6161","RelatedDescription":"Closed or merged PR \"Update some test package dependencies\" (#6161)"},{"Id":"1208157416","IsPullRequest":false,"CreatedAt":"2022-04-19T10:36:15","Actor":"AbhayGaur","Number":"6163","RawContent":null,"Title":"Retrieve positive contributors and negative contributors from CalculateFeatureContribution","State":"open","Body":"For the explainability section of ml.net, I am using CalculateFeatureContribution to calculate the feature contribution of each individual feature and then represent it on a UI.\r\n\r\nProblem that I have right now is, even after using the number of positive contributors = 10 and number of negative contributors = 10, I still have to traverse through all the feature vector, which is highly sparse and large, to identify which actual features were the top contributing. \r\n\r\nIs there any optimal way to do this computation or the most optimal way is to traverse through all the features and then use the given information in O(n) where n=number of total features.","Url":"https://github.com/dotnet/machinelearning/issues/6163","RelatedDescription":"Open issue \"Retrieve positive contributors and negative contributors from CalculateFeatureContribution\" (#6163)"},{"Id":"1190711894","IsPullRequest":false,"CreatedAt":"2022-04-19T09:51:19","Actor":"1kamma","Number":"6146","RawContent":null,"Title":"Maximum number of collumns in DataFrame","State":"closed","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11 \r\n - ML.NET Version: 1.17\r\n - .NET Version: 6.0\r\n\r\n**Describe the bug**\r\nWhen I'm trying to load a csv to a DataFrame, and the csv contains more than 12 collumns, I get the error massege:\r\n'System.ArgumentException: Parameter.Count exceeds the number of columns(12) in the DataFrame'\r\nI can create by my own, a DataFrame with more than 12 collumns, but cannot import it\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6146","RelatedDescription":"Closed issue \"Maximum number of collumns in DataFrame\" (#6146)"},{"Id":"1207000719","IsPullRequest":true,"CreatedAt":"2022-04-19T02:33:16","Actor":"dotnet-maestro[bot]","Number":"6159","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 97926d79-6b8b-4d32-c8db-08d9d479971c\r\n- **Build**: 20220415.2\r\n- **Date Produced**: April 16, 2022 2:47:34 AM UTC\r\n- **Commit**: 4000024394df3049886c50e54ad0a2b903221ef0\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 7.0.0-beta.22206.10 to 7.0.0-beta.22215.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22206.10 to 7.0.0-beta.22215.2][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 7.0.0-beta.22206.10 to 7.0.0-beta.22215.2][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 7.0.0-beta.22206.10 to 7.0.0-beta.22215.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22206.10 to 7.0.0-beta.22215.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/549523c...4000024\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6159","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6159)"},{"Id":"1207472450","IsPullRequest":true,"CreatedAt":"2022-04-19T00:41:50","Actor":"ericstj","Number":"6160","RawContent":null,"Title":"Update dependency ApprovalTests to 5.4.7","State":"closed","Body":"This cleans up the dependencies of transitive reference `DiffEngine` which was referencing a bunch of old out of date packages.","Url":"https://github.com/dotnet/machinelearning/pull/6160","RelatedDescription":"Closed or merged PR \"Update dependency ApprovalTests to 5.4.7\" (#6160)"},{"Id":"1207535071","IsPullRequest":false,"CreatedAt":"2022-04-18T22:57:42","Actor":"ericstj","Number":"6162","RawContent":null,"Title":"Disable Drawing tests on non-windows","State":"open","Body":"PR validation regularly fails with \r\n```\r\n    Microsoft.ML.Tests.ImageTests.TestBackAndForthConversionWithoutAlphaNoInterleaveNoOffset [FAIL]\r\n[31;1m[m[37m      System.ArgumentException : Parameter is not valid.\r\n[m[30;1m      Stack Trace:\r\n[m[37m           at System.Drawing.SafeNativeMethods.Gdip.CheckStatus(Int32 status)\r\n[m[37m           at System.Drawing.Bitmap.UnlockBits(BitmapData bitmapdata)\r\n[m[37m        /__w/1/s/src/Microsoft.ML.ImageAnalytics/VectorToImageTransform.cs(421,0): at Microsoft.ML.Transforms.Image.VectorToImageConvertingTransformer.Mapper.<>c__DisplayClass5_0`1.<GetterFromType>b__0(Bitmap& dst)\r\n[m[37m        /__w/1/s/test/Microsoft.ML.Tests/ImagesTests.cs(804,0): at Microsoft.ML.Tests.ImageTests.TestBackAndForthConversionWithoutAlphaNoInterleaveNoOffset()\r\n[m[30;1m      Output:\r\n[m[37m        Test TestBackAndForthConversionWithoutAlphaNoInterleaveNoOffset: aborted: passed\r\n```\r\n\r\nThis is bug https://github.com/dotnet/runtime/issues/30184, but it will never be fixed now that Unix is no longer supported.  Let's disable Image tests on non-windows until we can replace the usage of drawing with a different library.","Url":"https://github.com/dotnet/machinelearning/issues/6162","RelatedDescription":"Open issue \"Disable Drawing tests on non-windows\" (#6162)"},{"Id":"1206883232","IsPullRequest":true,"CreatedAt":"2022-04-18T09:55:00","Actor":"mzasov","Number":"6158","RawContent":null,"Title":"Add callback for Merge procedure to filter out not suitable rows","State":"open","Body":"We've experienced the following limitation in DataFrame's Merge procedure:\r\n\r\nDuring the merging of two data frames with output ~20M rows it would be great to filter out not acceptable rows if possible (i.e. to have ability to check that the current row for left data frame (some columns) with the current row for right data frame (same or different columns) - is a incorrect combination and can be removed from the result). We can filter out that rows on the fly - and that's the idea.\r\n\r\nAnother idea - is apply filtering on the result when the merge is completed, but when count of rows ~20M (and ~100 columns) it requires a lot of time and memory (provide one more data frame with some amount of rows filtered) - is too expensive on big data.\r\n\r\nSo I proposed to add callback with signature:\r\n\r\nbool canAcceptRow (long? leftDataFrameRowIndex, long? rightDataFrameRowIndex);\r\n\r\nand on the caller side we can provide some filtration if needed (we have left/right data frames and their indexes). If callback is null then it will be ignored - no affected the current behaviour.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6158","RelatedDescription":"Open PR \"Add callback for Merge procedure to filter out not suitable rows\" (#6158)"},{"Id":"1205695786","IsPullRequest":false,"CreatedAt":"2022-04-16T14:26:03","Actor":"Sumanth9Nandamuri","Number":"6157","RawContent":null,"Title":"LightGbmRanker: Significance of having TrainingData rows sorted with respect to Rank order.","State":"closed","Body":"### System information\r\n\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.202\r\n Commit:    f8a55617d2\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19044\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n\r\n\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTrain and evaluate LightGbmRanker using ML.Net C# API.\r\nTraining and test data are clustered/grouped with respect to GroupId column.\r\n\r\n- **What happened?**\r\n**Experiment 1:** Rows in Training data are sorted with respect to RankLabel, in this case rows corresponding to a GroupId have RankLabel 13, 12, 11, ........1, 1, 1, ..etc (Max rank is 13 for our use case)\r\n**Experiment 2:** Rows in Training data are not sorted with respect to RankLabel, in this case rows corresponding to a GroupId have RankLabel in arbitrary order \r\n**TestData:** Even though test data has a RankLabel (for evaluation/ metric computation purpose), the rows corresponding to a GroupId are not sorted in any order.\r\n- **Results:**\r\nIn case of experiment 1, NDCG score on TestData is quite high (around 0.95)\r\nIn case of experiment 2, NDCG score on TestData is quite low (around 0.25)\r\n\r\n- **What did you expect?**\r\nSame NDCG Score from both experiments.\r\n\r\n### Source code / logs\r\n\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Transforms;\r\nusing Microsoft.ML.Trainers.LightGbm;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Diagnostics;\r\n\r\n\r\nnamespace Ranking\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            int maxRank = 13;\r\n\r\n            var loaderOptions = new TextLoader.Options\r\n            {\r\n                AllowQuoting = true,\r\n                HasHeader = false,\r\n                Separators = new char[] {'\\t'}\r\n            };\r\n\r\n            double lr = 0.05;\r\n            int n_leaves = 30;\r\n            int min_example_count_per_leaf = 50;\r\n            string param_string = $\"Dart_{n_leaves}_{min_example_count_per_leaf}_{lr}\";\r\n            var boosting = new DartBooster.Options();\r\n            boosting.XgboostDartMode = true;\r\n            \r\n            var trainerOptions = new LightGbmRankingTrainer.Options\r\n            {\r\n                RowGroupColumnName = \"GroupId\",\r\n                FeatureColumnName = \"Features\",\r\n                LabelColumnName = \"Label\",\r\n                BatchSize = 1048576,\r\n                CustomGains = new int[] {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096},\r\n                HandleMissingValue = true,\r\n                EvaluationMetric = LightGbmRankingTrainer.Options.EvaluateMetricType.NormalizedDiscountedCumulativeGain,\r\n                LearningRate = lr,\r\n                MaximumBinCountPerFeature = 255,\r\n                MinimumExampleCountPerLeaf = min_example_count_per_leaf,\r\n                NumberOfLeaves = n_leaves,\r\n                Seed = 42,\r\n                Booster = boosting,\r\n                EarlyStoppingRound = 0,\r\n                NumberOfIterations = 100\r\n            };\r\n\r\n\r\n            var evaluatorOptions = new RankingEvaluatorOptions\r\n            {\r\n                DcgTruncationLevel = maxRank,\r\n                LabelGains = \"1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096\"\r\n            };\r\n\r\n            StreamWriter sw = new StreamWriter($\"../Logs/LightGbm_{param_string}.txt\");\r\n            sw.WriteLine(\"=> Training Model\");\r\n            sw.WriteLine(\" \");\r\n            sw.WriteLine(\" \");\r\n            \r\n            sw.WriteLine($\"=> Printing Logs}\");\r\n\r\n            var watch = Stopwatch.StartNew();\r\n            ReadOnlyList<double> ndcg = Train(loaderOptions, trainerOptions, evaluatorOptions);\r\n            watch.Stop();\r\n            var elapsedMs = watch.ElapsedMilliseconds;\r\n            sw.WriteLine($\"=> Model trained and saved\");\r\n            sw.WriteLine($\"=> Metrics\");\r\n            for(int i=0; i<maxRank; i++)\r\n            {\r\n                sw.WriteLine($\"=> NDCG@{i+1} :  {ndcg[i]}\");\r\n            }\r\n            sw.WriteLine($\"=> Averaged NDCG: {ndcg.Average()}\");\r\n            sw.WriteLine($\"=> Time Elapsed: {elapsedMs/1000} sec\");\r\n\r\n            Console.WriteLine($\"=> Done. || Averaged NDCG: {ndcg.Average()} || Time elapsed {elapsedMs/1000} sec\");\r\n            }\r\n\r\n            sw.Flush();\r\n            sw.Close();\r\n        }\r\n\r\n        static IReadOnlyList<double> Train(\r\n                          TextLoader.Options loaderOptions, \r\n                          LightGbmRankingTrainer.Options trainerOptions,\r\n                          RankingEvaluatorOptions evaluatorOptions)\r\n        {\r\n            MLContext mlContext = new MLContext(seed: 42);\r\n\r\n            IDataView trainingData = mlContext.Data.LoadFromTextFile<DataSchema>($\"../RankingData/Train/RankingData_Train_RandOrder.tsv\", loaderOptions);\r\n            IDataView testData = mlContext.Data.LoadFromTextFile<DataSchema>($\"../RankingData/Test/RankingData_Test.tsv\", loaderOptions);\r\n\r\n            var pipeline = mlContext.Transforms.DropColumns(new string[] {\"C1\"})\r\n                           .Append(mlContext.Transforms.Categorical.OneHotHashEncoding(\"GroupId\", outputKind: OneHotEncodingEstimator.OutputKind.Key))\r\n                           .Append(mlContext.Transforms.Conversion.MapValueToKey(\"Label\"))\r\n                           .Append(mlContext.Ranking.Trainers.LightGbm(trainerOptions));\r\n\r\n            var model = pipeline.Fit(trainingData);\r\n\r\n            var predictions = model.Transform(testData);\r\n            var metrics = mlContext.Ranking.Evaluate(predictions, evaluatorOptions,\r\n                                                     labelColumnName: \"Label\", \r\n                                                     rowGroupColumnName: \"GroupId\",\r\n                                                     scoreColumnName: \"Score\");\r\n\r\n            mlContext.Model.Save(model, trainingData.Schema, $\"../Checkpoints/LightGbm.zip\");\r\n\r\n            return metrics.NormalizedDiscountedCumulativeGains;\r\n        }\r\n    }\r\n}\r\n\r\nIs this expected behavior, or am I missing something ?\r\n\r\nThanks.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6157","RelatedDescription":"Closed issue \"LightGbmRanker: Significance of having TrainingData rows sorted with respect to Rank order.\" (#6157)"},{"Id":"1205046697","IsPullRequest":false,"CreatedAt":"2022-04-14T21:55:27","Actor":"LittleLittleCloud","Number":"6156","RawContent":null,"Title":"Consider providing a source generator to generate ModelInput/Output class?","State":"open","Body":"schema should contain all required information to generate both input/output class\r\n\r\n## Usage\r\n\r\n- add `model.zip` as `AdditionalFiles` and set `IsMLNetModel` to `true`\r\n![image](https://user-images.githubusercontent.com/16876986/163893797-5000759b-6dbb-4b60-be32-35163a1b2f82.png)\r\n\r\n- mlnet generate both input and output class for project\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\n\r\nnamespace MLNetSourceGenerator.CodeGen\r\n{\r\n\r\npublic class TitanicInput\r\n{\r\n[ColumnName(@\"PassengerId\")]\r\npublic float PassengerId {get; set;}\r\n\r\n[ColumnName(@\"Survived\")]\r\npublic float Survived {get; set;}\r\n\r\n[ColumnName(@\"Pclass\")]\r\npublic float Pclass {get; set;}\r\n\r\n[ColumnName(@\"Name\")]\r\npublic string Name {get; set;}\r\n\r\n[ColumnName(@\"Sex\")]\r\npublic string Sex {get; set;}\r\n\r\n[ColumnName(@\"Age\")]\r\npublic float Age {get; set;}\r\n\r\n[ColumnName(@\"SibSp\")]\r\npublic float SibSp {get; set;}\r\n\r\n[ColumnName(@\"Parch\")]\r\npublic float Parch {get; set;}\r\n\r\n[ColumnName(@\"Ticket\")]\r\npublic string Ticket {get; set;}\r\n\r\n[ColumnName(@\"Fare\")]\r\npublic float Fare {get; set;}\r\n\r\n[ColumnName(@\"Cabin\")]\r\npublic string Cabin {get; set;}\r\n\r\n[ColumnName(@\"Embarked\")]\r\npublic string Embarked {get; set;}\r\n\r\n}\r\n\r\n\r\npublic class TitanicOutput\r\n{\r\n[ColumnName(@\"PassengerId\")]\r\npublic float PassengerId {get; set;}\r\n\r\n[ColumnName(@\"Survived\")]\r\npublic uint Survived {get; set;}\r\n\r\n[ColumnName(@\"Pclass\")]\r\npublic float Pclass {get; set;}\r\n\r\n[ColumnName(@\"Name\")]\r\npublic float[] Name {get; set;}\r\n\r\n[ColumnName(@\"Sex\")]\r\npublic float[] Sex {get; set;}\r\n\r\n[ColumnName(@\"Age\")]\r\npublic float Age {get; set;}\r\n\r\n[ColumnName(@\"SibSp\")]\r\npublic float SibSp {get; set;}\r\n\r\n[ColumnName(@\"Parch\")]\r\npublic float Parch {get; set;}\r\n\r\n[ColumnName(@\"Ticket\")]\r\npublic float[] Ticket {get; set;}\r\n\r\n[ColumnName(@\"Fare\")]\r\npublic float Fare {get; set;}\r\n\r\n[ColumnName(@\"Cabin\")]\r\npublic float[] Cabin {get; set;}\r\n\r\n[ColumnName(@\"Embarked\")]\r\npublic float[] Embarked {get; set;}\r\n\r\n[ColumnName(@\"Features\")]\r\npublic float[] Features {get; set;}\r\n\r\n[ColumnName(@\"PredictedLabel\")]\r\npublic float PredictedLabel {get; set;}\r\n\r\n[ColumnName(@\"Score\")]\r\npublic float[] Score {get; set;}\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n```\r\n\r\n### Example\r\n- https://github.com/LittleLittleCloud/MLNetModelSourceGenerator","Url":"https://github.com/dotnet/machinelearning/issues/6156","RelatedDescription":"Open issue \"Consider providing a source generator to generate ModelInput/Output class?\" (#6156)"},{"Id":"1200635394","IsPullRequest":true,"CreatedAt":"2022-04-13T17:01:43","Actor":"michaelgsharp","Number":"6154","RawContent":null,"Title":"Updating newtonsoft to latest version","State":"closed","Body":"Fixes #6053 by updating newtonsoft to the latest version.","Url":"https://github.com/dotnet/machinelearning/pull/6154","RelatedDescription":"Closed or merged PR \"Updating newtonsoft to latest version\" (#6154)"},{"Id":"1200654258","IsPullRequest":true,"CreatedAt":"2022-04-13T17:01:29","Actor":"michaelgsharp","Number":"6155","RawContent":null,"Title":"Removing Microsoft.ML.targets since its no longer needed.","State":"closed","Body":"Fixes #6141.\r\n\r\nNow that we can run where .NET itself runs we no longer need the `UnsupportedPlatform` check to limit to x86 and x64. This PR removes the Microsoft.ML.targets file since it would be empty after removing that check.","Url":"https://github.com/dotnet/machinelearning/pull/6155","RelatedDescription":"Closed or merged PR \"Removing Microsoft.ML.targets since its no longer needed.\" (#6155)"},{"Id":"1196111256","IsPullRequest":true,"CreatedAt":"2022-04-11T21:41:18","Actor":"mzasov","Number":"6150","RawContent":null,"Title":"Significantly improve speed performance and memory consumption for DataFrame Merge procedure","State":"closed","Body":"\r\nWe experienced a very low performance in DataFrame Merge procedure for big data frames with ~20K and ~70K rows with total 20M rows in the result.\r\n\r\nThe original idea that was implemented in the low performance code:\r\n\r\nforeach (var kvp in newOccurrences)\r\n{\r\n    var newValue = kvp.Value.Where(i => occurrences[kvp.Key].Contains(i)).ToArray();\r\n    if (newValue.Any())\r\n    {\r\n        shrinkedOccurences.Add(kvp.Key, newValue);\r\n    }\r\n}\r\n\r\nThe first optimization is to use hash sets and calculate intersection natively on each iteration:\r\n\r\nforeach (var newOccurrence in newOccurrences)\r\n{\r\n    var newOccurrenceKey = newOccurrence.Key;\r\n\r\n    var occurrencesHash = new HashSet<long>(occurrences[newOccurrenceKey]);\r\n    var newOccurrencesHash = new HashSet<long>(newOccurrence.Value);\r\n\r\n    newOccurrencesHash.IntersectWith(occurrencesHash);\r\n\r\n    if (newOccurrencesHash.Any())\r\n    {\r\n        shrinkedOccurences.Add(newOccurrenceKey, newOccurrencesHash);\r\n    }\r\n}\r\n\r\nBut there is a high memory consumption that we can improve.\r\n\r\nWe can avoid usage of hash sets when we know that occurrences are the collections of sorted indexes. Knowledge of that gives us the following implementation of two lists intersections:\r\n\r\nvar i = 0;\r\nvar j = 0;\r\n\r\nwhile (i < sortedList1.Count && j < sortedList2.Count)\r\n{\r\n  var item1 = sortedList1[i];\r\n\r\n  while (j < sortedList2.Count)\r\n  {\r\n    var item2 = sortedList2[j];\r\n\r\n    if (item1 < item2)\r\n    {\r\n      i++;\r\n      break;\r\n    }\r\n    else if (item1 == item2)\r\n    {\r\n      crossing.Add(item1);\r\n      i++;\r\n      j++;\r\n      break;\r\n    }\r\n    else\r\n    {\r\n      j++;\r\n    }\r\n  }\r\n}\r\n\r\nIn the version with hash sets we consumed ~20Gb of memory in our example, but in the optimized we see that consumed up to ~500Mb of memory. And speed performance also is the best.\r\n\r\nAlso there is splitted merge procedure to more smaller functions and improved readability of code.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6150","RelatedDescription":"Closed or merged PR \"Significantly improve speed performance and memory consumption for DataFrame Merge procedure\" (#6150)"},{"Id":"1199900733","IsPullRequest":true,"CreatedAt":"2022-04-11T19:41:39","Actor":"dotnet-maestro[bot]","Number":"6153","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 97926d79-6b8b-4d32-c8db-08d9d479971c\r\n- **Build**: 20220406.10\r\n- **Date Produced**: April 6, 2022 11:05:52 PM UTC\r\n- **Commit**: 549523c3fc8929da1a3073d1a97f298e0d1dc342\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 7.0.0-beta.22181.2 to 7.0.0-beta.22206.10][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22181.2 to 7.0.0-beta.22206.10][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 7.0.0-beta.22181.2 to 7.0.0-beta.22206.10][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 7.0.0-beta.22181.2 to 7.0.0-beta.22206.10][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22181.2 to 7.0.0-beta.22206.10][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/e0b311b...549523c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6153","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6153)"},{"Id":"1198712240","IsPullRequest":false,"CreatedAt":"2022-04-09T16:51:44","Actor":"raffaeler","Number":"6152","RawContent":null,"Title":"Model builder complains about version to use","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version: ML.NET v1.7.1\r\n - .NET Version: .NET 6.0\r\n - Model Builder version: 16.13.1.2210302\r\n\r\n**Describe the bug**\r\n![image](https://user-images.githubusercontent.com/5183152/162583473-cba321c1-96fe-41c5-af70-1e5e020ed335.png)\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Start from a Console app\r\n2. Add the model builder item\r\n3. Scenario: Value Prediction\r\n4. Follow the wizard\r\n5. At the end of training the weird message appears\r\n\r\n**Expected behavior**\r\nModel builder should suggest to downgrade the the version of the library\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6152","RelatedDescription":"Open issue \"Model builder complains about version to use\" (#6152)"},{"Id":"1197107371","IsPullRequest":false,"CreatedAt":"2022-04-08T09:56:05","Actor":"rishi-git","Number":"6151","RawContent":null,"Title":"VectorType attribute with dynamic dimension while dealing with csv files","State":"open","Body":"I am working on training and evaluation in ML.NET. The data comes from a .csv file. According to the requirements, there may be variable number of columns in the file. Until now, I have achieved this by providing a fixed vectorType dimension. But I am not aware of making this work dynamically.\r\n\r\nHere is the a block of code working using the fixed dimension,\r\n\r\npublic class InputClass \r\n{\r\n    public bool Lavel;\r\n    \r\n    [VectorType(5)] // I want this to be dynamic\r\n    public string[] SpecVec;\r\n\r\n    public string PredictedTarget;\r\n}\r\n\r\npublic static void Main(string[] args)\r\n{\r\n   MLContext mlContext = new MLContext(seed:0);\r\n   TextLoader.Columns[] columns = new TextLoader.Columns[3];\r\n   columns[0] = new TextLoader.Column(\"Label\", DataKind.Boolean, 0);\r\n   columns[2] = new TextLoader.Column(\"PredictedTarget\", DataKind.String, 1);\r\n   columns[1] = new TextLoader.Column(\"SpecVec\", DataKind.String, 2,6);\r\n\r\n   IDataView dataview = mlContext.Data.LoadFromTextFile(filepath, columns,        \r\n   separatorChar:',', hasHeader:true, allowQuoting:false, trimWhitespace: true, \r\n   allowSparse:true);\r\n\r\n   //-- creating pipeline and training a model further\r\n\r\n}\r\nThis code works without any issue. But I just need the VectorType to accept the dimension at runtime. Now it accepts only constant values. I am looking if there is any workaround to achieve this. I am a beginner into ML.Net, please do understand if I missed any steps or anything to be explained. I really appreciate any help to get this worked.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6151","RelatedDescription":"Open issue \"VectorType attribute with dynamic dimension while dealing with csv files\" (#6151)"},{"Id":"1191540742","IsPullRequest":true,"CreatedAt":"2022-04-05T21:20:05","Actor":"mzasov","Number":"6147","RawContent":null,"Title":"PrimitiveDataFrameColumnComputations provides wrong calculations in Max/Min functions","State":"closed","Body":"\r\n1. Fixed PrimitiveDataFrameColumnComputations Min/Max/CumulativeMin/CumulativeMax tt code templates\r\n2. Added and fixed tests","Url":"https://github.com/dotnet/machinelearning/pull/6147","RelatedDescription":"Closed or merged PR \"PrimitiveDataFrameColumnComputations provides wrong calculations in Max/Min functions\" (#6147)"},{"Id":"1192978831","IsPullRequest":false,"CreatedAt":"2022-04-05T10:52:23","Actor":"nhirschey","Number":"6149","RawContent":null,"Title":"Facilitate ML.NET for education by prioritizing cross-platform OLS","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nYou’re doing a lot of great work, but I think better OLS support would be really valuable. \r\n\r\nI know that your focus is industry-facing advanced ML, but it's hard to introduce the framework for those advanced models in an educational setting when ML.NET cannot handle basic OLS. I'd also guess that facilitating the use of ML.NET in an educational setting is helpful for meeting long-term performance objectives such as increasing industry adoption.\r\n\r\nMore specifically, it is frustrating to try using ML.NET in an educational setting. You have great advanced features, but OLS is the standard \"baseline\" trainer and it's impossible to use OLS with ML.NET for teaching because the OLS trainer in ML.NET relies on MKL and is thus not cross-platform. Accord.NET, MathNet.Numerics, and FSharp.Stats all have cross-platform OLS trainers. This is entirely feasible in managed code.\r\n\r\nRelated to below issues\r\n\r\n- https://github.com/dotnet/machinelearning/issues/5788#issuecomment-841230567\r\n- https://github.com/dotnet/machinelearning/issues/5696\r\n- https://github.com/dotnet/machinelearning/issues/5787\r\n\r\n\r\n**Describe the solution you'd like**\r\nI should be able to use an OLS trainer on windows, linux, macOS x64 and macOS apple silicon, and all dependencies should come via (possibly platform specific) nuget feeds (no homebrew!). DiffSharp and TorchSharp are good prior art of high performance platform-specific nuget packages.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6149","RelatedDescription":"Open issue \"Facilitate ML.NET for education by prioritizing cross-platform OLS\" (#6149)"},{"Id":"1191715399","IsPullRequest":true,"CreatedAt":"2022-04-04T20:39:55","Actor":"dotnet-maestro[bot]","Number":"6148","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 97926d79-6b8b-4d32-c8db-08d9d479971c\r\n- **Build**: 20220331.2\r\n- **Date Produced**: March 31, 2022 3:37:49 PM UTC\r\n- **Commit**: e0b311bcd81fc9e27bcf7715dcda62fa38dfa49a\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 7.0.0-beta.22171.2 to 7.0.0-beta.22181.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22171.2 to 7.0.0-beta.22181.2][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 7.0.0-beta.22171.2 to 7.0.0-beta.22181.2][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 7.0.0-beta.22171.2 to 7.0.0-beta.22181.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22171.2 to 7.0.0-beta.22181.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/c8a9529...e0b311b\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates tools.dotnet to 7.0.100-preview.2.22153.17\r\n\r\n[marker]: <> (End:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6148","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6148)"},{"Id":"1185673127","IsPullRequest":true,"CreatedAt":"2022-04-04T18:57:29","Actor":"tarekgh","Number":"6143","RawContent":null,"Title":"Support Loading ONNX model using GPU","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/6143","RelatedDescription":"Closed or merged PR \"Support Loading ONNX model using GPU\" (#6143)"},{"Id":"1188578677","IsPullRequest":false,"CreatedAt":"2022-03-31T19:24:43","Actor":"LittleLittleCloud","Number":"6145","RawContent":null,"Title":"AutoML.Net improvements tracking down list","State":"open","Body":"- AutoML Sweepable API (#5993)\r\n  - [x] implementation\r\n  - [ ] make it public && documents\r\n  - [ ] code example\r\n  - [ ] jupyter notebook example\r\n\r\n- AutoML Experiment API (#6118 )\r\n  - [x] implementation\r\n  - [ ] make it pubic && documents\r\n  - [ ] code example\r\n  - [ ] jupyter notebook example\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6145","RelatedDescription":"Open issue \"AutoML.Net improvements tracking down list\" (#6145)"},{"Id":"1186652282","IsPullRequest":false,"CreatedAt":"2022-03-30T15:44:17","Actor":"luisquintanilla","Number":"6144","RawContent":null,"Title":"Plan for DataFrame (Microsoft.Data.Analysis) ","State":"open","Body":"This issue tracks priorities and discussions around DataFrame improvements based on issues and feedback. \r\n\r\nMicrosoft.Data.Analysis Open Issue Query: https://github.com/dotnet/machinelearning/issues?q=is%3Aopen+is%3Aissue+label%3AMicrosoft.Data.Analysis\r\n\r\n## Create DataFrames\r\n\r\n- [ ] #5972\r\n- [ ] #6088\r\n- [ ] #5968\r\n- [ ] #5647\r\n- [ ] #5648\r\n- [ ] #5662\r\n- [ ] #5664\r\n- [ ] #5645\r\n- [ ] #5674\r\n\r\n## Reshape DataFrames\r\n\r\n- Pivot / Transpose\r\n- Create columns\r\n  - [ ] #5670\r\n- Reset indices\r\n  - [ ] #5658\r\n- Rename columns\r\n  - [ ] #6129 \r\n  - [ ] #5916\r\n\r\n## Filter / Sort DataFrames\r\n\r\n- Filter\r\n  - [ ] #6110\r\n\r\n## Combine DataFrames\r\n\r\n- Merge\r\n  - [ ] #6127\r\n- Join\r\n  - [ ] #6128\r\n  - [ ] #6133 \r\n- Concat\r\n  - [ ] #5932\r\n  - [ ] #6134\r\n\r\n## Group DataFrames\r\n\r\n- Grouping\r\n  - [ ] #5724\r\n  - [ ] #5691\r\n- Aggregate Functions\r\n  - [ ] #5681\r\n\r\n## Summarize DataFrames\r\n\r\n- Descriptive statistics\r\n\r\n## Handle Missing Data\r\n\r\n- Drop missing data\r\n- Impute / Fill missing data\r\n\r\n## DataTypes\r\n\r\n- [ ] #5872\r\n- [ ] #5746\r\n- [ ] #5721\r\n- [ ] #5690","Url":"https://github.com/dotnet/machinelearning/issues/6144","RelatedDescription":"Open issue \"Plan for DataFrame (Microsoft.Data.Analysis) \" (#6144)"},{"Id":"1185311823","IsPullRequest":true,"CreatedAt":"2022-03-30T01:45:47","Actor":"JakeRadMSFT","Number":"6142","RawContent":null,"Title":"WIP - Initial prototype of AutoML Visualizers","State":"closed","Body":"This PR is adding visualizers when using AutoML in Notebooks. Normally when your using AutoML in notebooks you only see a spinner for 100s of seconds. With this PR you'll be able to track it's progress with a chart and table.\r\n\r\n![image](https://user-images.githubusercontent.com/31937616/160690718-e6669490-cd5f-46a7-8003-c3aecd676c28.png)\r\n![image](https://user-images.githubusercontent.com/31937616/160690789-d66de33e-cc34-4bdd-bee0-c065c20cb441.png)\r\n\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6142","RelatedDescription":"Closed or merged PR \"WIP - Initial prototype of AutoML Visualizers\" (#6142)"},{"Id":"1185167351","IsPullRequest":false,"CreatedAt":"2022-03-29T17:08:59","Actor":"gjtorikian","Number":"6141","RawContent":null,"Title":"Remove unsupported platform check.","State":"open","Body":"I have the following build script:\r\n\r\n```\r\ndotnet publish -c Release --runtime linux-arm64 --self-contained\r\n```\r\n\r\nThis results in the following error:\r\n\r\n```\r\n/Users/gjtorikian/.nuget/packages/microsoft.ml/1.7.1/build/netstandard2.0/Microsoft.ML.targets(16,5): error : Microsoft.ML currently supports 'x64' and 'x86' processor architectures. Please ensure your application is targeting 'x64' or 'x86'. \r\n```\r\n\r\nIs arm64 not supported?","Url":"https://github.com/dotnet/machinelearning/issues/6141","RelatedDescription":"Open issue \"Remove unsupported platform check.\" (#6141)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-04-25T03:30:21.9115687Z","RunDurationInMilliseconds":535}