{"Data":{"GitHub":{"Issues":[{"Id":"1571152346","IsPullRequest":false,"CreatedAt":"2023-02-04T22:33:49","Actor":"dgorti","Number":"6555","RawContent":null,"Title":"DataFrame and PowerQuery Tables","State":"open","Body":"I used PowerQuery quite a bit. What is awesome about PowerQuery is that it has a very rich API for Tables.\r\nFor example\r\n`Table.AddColumn(table, \"name\", Func)` allows you to supply a function that generates values and add the column\r\n```\r\nTable.Pivot\r\nTable.RenameColumns\r\nTable.Distinct\r\nTable.Group\r\n```\r\nallow you to manipulate tables in a very efficient and easy way.\r\n\r\nI really would like to see a .NET version of PowerQuery or PowerQuery type API in DataFrame ","Url":"https://github.com/dotnet/machinelearning/issues/6555","RelatedDescription":"Open issue \"DataFrame and PowerQuery Tables\" (#6555)"},{"Id":"1562947899","IsPullRequest":true,"CreatedAt":"2023-01-30T18:17:13","Actor":"michaelgsharp","Number":"6554","RawContent":null,"Title":"Servicing 2.0 branch","State":"closed","Body":"Recreating PR since last time I accidentally squashed and merged and not just merged.\r\n\r\nAlready approved and tests already passed in #6551","Url":"https://github.com/dotnet/machinelearning/pull/6554","RelatedDescription":"Closed or merged PR \"Servicing 2.0 branch\" (#6554)"},{"Id":"1562943795","IsPullRequest":true,"CreatedAt":"2023-01-30T18:14:35","Actor":"michaelgsharp","Number":"6553","RawContent":null,"Title":"Revert \"Servicing for 2.0 branch\"","State":"closed","Body":"Reverts dotnet/machinelearning#6551 because I didn't want to squash and merge, just merge.","Url":"https://github.com/dotnet/machinelearning/pull/6553","RelatedDescription":"Closed or merged PR \"Revert \"Servicing for 2.0 branch\"\" (#6553)"},{"Id":"1557231422","IsPullRequest":true,"CreatedAt":"2023-01-30T18:13:47","Actor":"michaelgsharp","Number":"6551","RawContent":null,"Title":"Servicing for 2.0 branch","State":"closed","Body":"Servicing for 2.0 branch. Includes the bug fix for passing dynamic strings into onnx, as well as the fix for the official build machines.","Url":"https://github.com/dotnet/machinelearning/pull/6551","RelatedDescription":"Closed or merged PR \"Servicing for 2.0 branch\" (#6551)"},{"Id":"1561001536","IsPullRequest":false,"CreatedAt":"2023-01-28T20:30:22","Actor":"TT-Dev1","Number":"6552","RawContent":null,"Title":"AutoML 2 is way worse than 1.7.1 (for me)","State":"open","Body":"Win10 / **ML.NET 1.7.1 vs. 2.0.0** / .NET Framework 4.8\r\n\r\nAutoML 2.0 is way worse for me than the previous 1.7.1 release.  I tried using the Featurizer or even removing completely and doing it all by hand -- in 2 days of fiddling I can not create a model that is anywhere close to that created with the old CreateRegressionExperiment() version of the previous release.\r\n![image](https://user-images.githubusercontent.com/10066158/215285187-78616615-cc02-4aac-9f33-8c5162b269e0.png)\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\nFor 2.0 (where the problem is) I used the same code as this sample (but with my objects):  https://github.com/dotnet/machinelearning-samples/tree/main/samples/csharp/getting-started/MLNET2/AutoMLAdvanced\r\n\r\n```\r\n//Define pipeline\r\nSweepablePipeline pipeline =\r\n    ctx.Auto().Featurizer(data, columnInformation: columnInference.ColumnInformation)\r\n        .Append(ctx.Auto().Regression(labelColumnName: columnInference.ColumnInformation.LabelColumnName, useLgbm: false));\r\n\r\n// Create AutoML experiment\r\nAutoMLExperiment experiment = ctx.Auto().CreateExperiment();\r\n\r\n// Configure experiment\r\nexperiment\r\n    .SetPipeline(pipeline)\r\n    .SetRegressionMetric(RegressionMetric.RSquared, labelColumn: columnInference.ColumnInformation.LabelColumnName)\r\n    .SetTrainingTimeInSeconds(60)\r\n    .SetGridSearchTuner()\r\n    .SetDataset(trainValidationData);\r\n\r\n// Run experiment\r\nvar cts = new CancellationTokenSource();\r\nTrialResult experimentResults = await experiment.RunAsync(cts.Token);\r\n```\r\n\r\nI also unwound the featurizer and did all the same steps by hand and they worked with 1.7.1.\r\n\r\n**Expected behavior**\r\nTo be able to train a model that works as well as the last version.\r\n\r\n**Additional context**\r\nNOTE:  I had all kinds of different versions on my machine and completely uninstalled Visual Studio, deleted the directory, etc.\r\n\r\n_Maybe relevant?_\r\n\r\n* Now, after re-installing VS and adding ML.net, I no longer have the ability to edit notebooks (.ipynb).\r\n\r\n* Sometimes, when playing with the ML.NET Model Builder 2022 (16.13.9.2235601) and the same data, I don't get a Next button with my data.  [maybe there's something with my data that causes a problem with the 2.0 code?]\r\n![image](https://user-images.githubusercontent.com/10066158/215289551-df437b02-26c8-48d4-a5f0-243a5f59de2f.png)\r\n\r\n**ANY IDEAS WHERE I CAN DEBUG MORE?  OR TELL ME WHAT YOU WOULD LIKE TO HAVE ME CAN SHARE SO THAT I CAN BE MORE HELPFUL.**","Url":"https://github.com/dotnet/machinelearning/issues/6552","RelatedDescription":"Open issue \"AutoML 2 is way worse than 1.7.1 (for me)\" (#6552)"},{"Id":"1557139193","IsPullRequest":false,"CreatedAt":"2023-01-25T19:06:26","Actor":"pjsgsy","Number":"6550","RawContent":null,"Title":"Unhandled exception. System.Exception: col7 column not found. Make sure the name searched for matches the name in the schema.","State":"open","Body":"\r\nWin11\r\nML.net is the latest stable release from nuget\r\n.net 6.0 console app\r\n\r\n**Describe the bug**\r\nUsing the generated code from a simple tabular scenario with 1 label column with 3 possible values results in an exception.\r\n\r\nThis is the exact code offered by the model maker\r\n\r\n\"//Load sample data\r\nvar sampleData = new MLModel1.ModelInput()\r\n{\r\n    Col0 = -1.833333F,\r\n    Col1 = -0.9662699F,\r\n    Col2 = -0.8599034F,\r\n    Col3 = -0.2951389F,\r\n    Col4 = 4.972222F,\r\n    Col5 = -0.422619F,\r\n    Col6 = -0.1358025F,\r\n};\r\n\r\n//Load model and predict output\r\nvar result = MLModel1.Predict(sampleData);\r\n\"\r\nEven the plain sample project generated will not run and causing this exception.\r\n\r\nAsking for a prediction will cause the exception, and it always complains that the label column is missing, which does not make sense to me. I have also replicated this in a completely new project, from scratch. The source data feed consists of the 7 data columns, and the label column.\r\n\r\nThe exception will always be \r\nUnhandled exception. System.Exception: col7 column not found. Make sure the name searched for matches the name in the schema.\r\n\r\nNot sure what is happening here as I have done this in the past without issue (though at least a few months back!)","Url":"https://github.com/dotnet/machinelearning/issues/6550","RelatedDescription":"Open issue \"Unhandled exception. System.Exception: col7 column not found. Make sure the name searched for matches the name in the schema.\" (#6550)"},{"Id":"1555695854","IsPullRequest":true,"CreatedAt":"2023-01-24T21:29:57","Actor":"michaelgsharp","Number":"6549","RawContent":null,"Title":"mac python fix","State":"closed","Body":"Official build is having issues in the mac setup step again. Seems to be caused by a machine change. We used to remove python 3.8 cause it was causing problems, now 3.8 is no longer installed so removing the step to remove it.\r\n\r\nAlready tested/validated with the official build.","Url":"https://github.com/dotnet/machinelearning/pull/6549","RelatedDescription":"Closed or merged PR \"mac python fix\" (#6549)"},{"Id":"1553777319","IsPullRequest":true,"CreatedAt":"2023-01-24T19:52:56","Actor":"michaelgsharp","Number":"6547","RawContent":null,"Title":"fixes one dal dispatching issues","State":"closed","Body":"Fixes the onedal dispatching issues by using dynamic checking instead of static.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6547","RelatedDescription":"Closed or merged PR \"fixes one dal dispatching issues\" (#6547)"},{"Id":"1555552449","IsPullRequest":false,"CreatedAt":"2023-01-24T19:33:21","Actor":"zyw400","Number":"6548","RawContent":null,"Title":"Limiting CPU usage for ML.NET using SSA for timeseries forecasting","State":"open","Body":"We are using the SSA Forecaster for our ML training pipeline in C#. However, we observe high CPU spikes in the front-end machine that executes this program periodically. We are looking for ways to limit CPU usage but are unable to find good solutions. Please kindly suggest any methods that we can reduce the CPU usage ideally by limiting the max number of vcores to use.\r\n\r\n        /// <inheritdoc/>\r\n        public override void Train(IEnumerable<DataPoint> trainData)\r\n        {\r\n            int trainSize = trainData.Count();\r\n            var forecastingPipeline = this.BuildSSAForecaster(trainSize);\r\n            this.forecaster = forecastingPipeline.Fit(this.GetDataViewForEnumerable(trainData));\r\n        }","Url":"https://github.com/dotnet/machinelearning/issues/6548","RelatedDescription":"Open issue \"Limiting CPU usage for ML.NET using SSA for timeseries forecasting\" (#6548)"},{"Id":"1553589068","IsPullRequest":true,"CreatedAt":"2023-01-23T20:47:48","Actor":"LittleLittleCloud","Number":"6546","RawContent":null,"Title":"add checkAlive in NasBertTrainer","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n#6525 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/6546","RelatedDescription":"Closed or merged PR \"add checkAlive in NasBertTrainer\" (#6546)"},{"Id":"1553118094","IsPullRequest":false,"CreatedAt":"2023-01-23T13:38:43","Actor":"DevLob-zz","Number":"6545","RawContent":null,"Title":"Document processing AI model using Ml.net","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\nDocument Processing AI Model is currently popular and very important \r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\nMicrosoft already has it \r\nhttps://learn.microsoft.com/en-us/ai-builder/form-processing-train\r\nwhat if we can use our own models and integrate it using our existing applications \r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6545","RelatedDescription":"Open issue \"Document processing AI model using Ml.net\" (#6545)"},{"Id":"1551629106","IsPullRequest":false,"CreatedAt":"2023-01-21T01:02:37","Actor":"LanceElCamino","Number":"6544","RawContent":null,"Title":"Schema mismatch using AutoML API","State":"open","Body":"Windows 10\r\nMicrosoft.Ml 2.0\r\nMicorsoft.Ml.AutoML 0.20.0\r\n\r\nI receive this error :\r\n\r\nSystem.ArgumentOutOfRangeException: 'Schema mismatch for label column 'NextDayClose': expected Single, got Boolean (Parameter 'labelCol')'\r\n\r\nwhen running this code copied and pasted from the AutoML QuickStart sample:\r\n\r\n```\r\n// Initialize MLContext\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.AutoML;\r\nusing Microsoft.ML.Data;\r\nusing static Microsoft.ML.DataOperationsCatalog;\r\n\r\n// Initialize MLContext\r\nMLContext ctx = new MLContext();\r\n\r\n// Define data path\r\nvar dataPath = Path.GetFullPath(@\"CSATest.csv\");\r\n\r\n// Infer column information\r\nColumnInferenceResults columnInference =\r\n    ctx.Auto().InferColumns(dataPath, labelColumnName: \"NextDayClose\", groupColumns: false);\r\n\r\n// Create text loader\r\nTextLoader loader = ctx.Data.CreateTextLoader(columnInference.TextLoaderOptions);\r\n\r\n// Load data into IDataView\r\nIDataView data = loader.Load(dataPath);\r\n\r\n// Split into train (80%), validation (20%) sets\r\nTrainTestData trainValidationData = ctx.Data.TrainTestSplit(data, testFraction: 0.2);\r\n\r\n//Define pipeline\r\nSweepablePipeline pipeline =\r\n    ctx.Auto().Featurizer(data, columnInformation: columnInference.ColumnInformation)\r\n        .Append(ctx.Auto().MultiClassification(labelColumnName: columnInference.ColumnInformation.LabelColumnName));\r\n\r\n// Create AutoML experiment\r\nAutoMLExperiment experiment = ctx.Auto().CreateExperiment();\r\n\r\n// Configure experiment\r\nexperiment\r\n    .SetPipeline(pipeline)\r\n    .SetMulticlassClassificationMetric(MulticlassClassificatioMetric.MicroAccuracy, labelColumn:columnInference.ColumnInformation.LabelColumnName)\r\n    .SetTrainingTimeInSeconds(10)\r\n    .SetDataset(trainValidationData);\r\n\r\n// Log experiment trials\r\nctx.Log += (_, e) => {\r\n    if (e.Source.Equals(\"AutoMLExperiment\"))\r\n    {\r\n        Console.WriteLine(e.RawMessage);\r\n    }\r\n};\r\n\r\n// Run experiment\r\nTrialResult experimentResults = await experiment.RunAsync();\r\n\r\n// Get best model\r\nvar model = experimentResults.Model;\r\n```\r\nAttached is the csv file being called.\r\n\r\n[CSATest.csv](https://github.com/dotnet/machinelearning/files/10471206/CSATest.csv)\r\n\r\nIs there a way to override the data type that InferColumns is inferring? Looks like it's expecting a bool yet it's a single.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6544","RelatedDescription":"Open issue \"Schema mismatch using AutoML API\" (#6544)"},{"Id":"1550890008","IsPullRequest":false,"CreatedAt":"2023-01-20T13:58:20","Actor":"rzechu","Number":"6543","RawContent":null,"Title":"ML.NET Anomaly detection of missing values or gaps in data. ex. missing montly invoices ","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nI am looking for an easy way to implement ML.NET (or another? solution for finding missing data/gaps in data.\r\nWith current methods I am able to find spikes (upside/downside) but If there will be slight decreasing overtime to zero (zero or missing value won't be flagged as anomaly)\r\n\r\nFew potential scenarios\r\n1. Webservice receives requests and there's gaps indicating service was offline.\r\n2. I am receiving many invoices but for example I am receiving 1 phone bill monthly. If i don't get it (missing in my data). I'd like to find that in months between 05.2022-07.2022 is a gap and invoice is missing (I know I can implement manual checking for each month but looking for more complex solution to avoid manually checking or selecting for seconds/minutes/months/years a period. \r\n3. Same as above but more complex I am receiving 3-5 invoices and received none In some period of data (propably existing solutions can partially fit it)\r\n4. I have invoices and each should have 3-10 positions but I have few with only 1 (potentially some integrations broken and data is missing)","Url":"https://github.com/dotnet/machinelearning/issues/6543","RelatedDescription":"Open issue \"ML.NET Anomaly detection of missing values or gaps in data. ex. missing montly invoices \" (#6543)"},{"Id":"1548910140","IsPullRequest":false,"CreatedAt":"2023-01-19T10:43:50","Actor":"rzechu","Number":"6541","RawContent":null,"Title":"AutoML ExperimentResult plain TrainerName instead of \"ReplaceMissingValues=>OneHotHashEncoding=>Concatenate=>Unknown=>SdcaMaximumEntropyMulti=>Unknown\"","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n - ML.NET Version:  0.20\r\n - .NET Version: .NET 6.0\r\n\r\n**Describe the bug**\r\nResult of \r\nMicrosoft.ML.AutoML.MulticlassClassificationExperiment\r\npublic override ExperimentResult<MulticlassClassificationMetrics> Execute(IDataView trainData, string labelColumnName = \"Label\", string samplingKeyColumn = null, IEstimator<ITransformer> preFeaturizer = null, IProgress<RunDetail<MulticlassClassificationMetrics>> progressHandler = null)\r\n\r\n\r\n**Expected behavior**\r\nTrainer name should be used trainer name not this \"concatated long value\"\r\n\r\n**Screenshots, Code, Sample Projects**\r\nPrevious valid (0.17)\r\n![image](https://user-images.githubusercontent.com/45091660/213421504-046b5a63-d337-4b98-8f5c-fab80576d392.png)\r\n\r\nNew version (0.20)\r\n![image](https://user-images.githubusercontent.com/45091660/213421656-0b376edf-dcc8-4e90-bc83-cc8088c7ba27.png)\r\n![image](https://user-images.githubusercontent.com/45091660/213421752-e11a77a6-a542-4469-8cb1-c9000bb57cb0.png)","Url":"https://github.com/dotnet/machinelearning/issues/6541","RelatedDescription":"Open issue \"AutoML ExperimentResult plain TrainerName instead of \"ReplaceMissingValues=>OneHotHashEncoding=>Concatenate=>Unknown=>SdcaMaximumEntropyMulti=>Unknown\"\" (#6541)"},{"Id":"1532868557","IsPullRequest":true,"CreatedAt":"2023-01-13T20:23:31","Actor":"LittleLittleCloud","Number":"6539","RawContent":null,"Title":"Fairlearn","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6539","RelatedDescription":"Open PR \"Fairlearn\" (#6539)"},{"Id":"1531479375","IsPullRequest":true,"CreatedAt":"2023-01-13T04:37:52","Actor":"rgesteve","Number":"6538","RawContent":null,"Title":"Bail to default implementation upon any unforeseen situation","State":"closed","Body":"Upon any unanticipated circumstance, bail to default implementation of an algorithm.   \r\n\r\nMost likely the dispatch logic will need to become more sophisticated as accelerated alternative implementations are added.\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6538","RelatedDescription":"Closed or merged PR \"Bail to default implementation upon any unforeseen situation\" (#6538)"},{"Id":"1529856912","IsPullRequest":true,"CreatedAt":"2023-01-12T23:38:33","Actor":"michaelgsharp","Number":"6537","RawContent":null,"Title":"fixing bug with multi-threaded access for variable length string arrays for onnx models.","State":"closed","Body":"Fixes bug where multiple threads would change the same variable resulting in corrupted values.","Url":"https://github.com/dotnet/machinelearning/pull/6537","RelatedDescription":"Closed or merged PR \"fixing bug with multi-threaded access for variable length string arrays for onnx models.\" (#6537)"},{"Id":"1526854396","IsPullRequest":false,"CreatedAt":"2023-01-10T06:48:40","Actor":"zewditu","Number":"6536","RawContent":null,"Title":"Validate the similarity between training dataset and validation dataset Schema","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\n\r\n\r\n**Describe the solution you'd like**\r\nWhen the user wants to pass a separate validation dataset file. The two-dataset schema (train & validate) should be the same before we proceed to train.\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6536","RelatedDescription":"Open issue \"Validate the similarity between training dataset and validation dataset Schema\" (#6536)"},{"Id":"1521500514","IsPullRequest":true,"CreatedAt":"2023-01-06T22:24:22","Actor":"LittleLittleCloud","Number":"6535","RawContent":null,"Title":"add addKeyValueAnnotationsAsText flag in AutoML","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nhttps://github.com/dotnet/machinelearning-modelbuilder/issues/2418\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6535","RelatedDescription":"Closed or merged PR \"add addKeyValueAnnotationsAsText flag in AutoML\" (#6535)"},{"Id":"1521263465","IsPullRequest":false,"CreatedAt":"2023-01-05T19:24:14","Actor":"LittleLittleCloud","Number":"6534","RawContent":null,"Title":"Text classification : Target 4294967295 is out of bounds","State":"open","Body":"**System Information (please complete the following information):**\r\n - ML.NET Version: 2.0\r\n\r\n**Describe the bug**\r\n\r\nDetailed info can be found in\r\n#https://github.com/dotnet/machinelearning-modelbuilder/issues/2369","Url":"https://github.com/dotnet/machinelearning/issues/6534","RelatedDescription":"Open issue \"Text classification : Target 4294967295 is out of bounds\" (#6534)"},{"Id":"1519561735","IsPullRequest":false,"CreatedAt":"2023-01-04T20:57:22","Actor":"luisquintanilla","Number":"6533","RawContent":null,"Title":"oneDAL Binary Classification LBFGS - Index was outside the bounds of the array.","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n - ML.NET Version: ML.NET 3.0 prerelease\r\n - .NET Version: .NET 6 & .NET 6\r\n\r\n**Describe the bug**\r\n\r\nTraining a binary classification model using the Lbfgs trainer and setting the MLNET_BACKEND environment variable to ONEDAL produces the following error:\r\n\r\n```text\r\nUnhandled exception. System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at Microsoft.ML.Trainers.LbfgsTrainerBase`3.TrainCoreOneDal(IChannel ch, RoleMappedData data)\r\n   at Microsoft.ML.Trainers.LbfgsTrainerBase`3.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.Fit(IDataView input)\r\nat Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\nat Program.<Main>$(String[] args) in C:\\Dev\\OneDalTest\\OneDalTest\\Program.cs:line 31\r\n```\r\n\r\n**To Reproduce**\r\n\r\n1. Create a C# console application\r\n2. Install the latest prerelease versions of Microsoft.ML and Microsoft.ML.OneDAL packages.\r\n3. Paste the following code into the *Program.cs* file.\r\n\r\n```csharp\r\n// Initialize MLContext\r\nvar ctx = new MLContext();\r\n\r\n// Define data\r\nvar trainingData = new [] \r\n{\r\n    new {Arch=\"ARM\", Trainer=\"LightGBM\", oneDALSupport=false},\r\n    new {Arch=\"x86\", Trainer=\"FastTree\", oneDALSupport=true},\r\n    new {Arch=\"x86\", Trainer=\"LbfgsLogisticRegression\", oneDALSupport=true},\r\n    new {Arch=\"ARM\", Trainer=\"FastTree\", oneDALSupport=false}\r\n};\r\n\r\n// Load data into IDataView\r\nvar trainingDv = ctx.Data.LoadFromEnumerable(trainingData);\r\n\r\n// Define data processing pipeline & trainer\r\nvar pipeline = \r\n    ctx.Transforms.Categorical.OneHotEncoding(new [] {\r\n            new InputOutputColumnPair(\"ArchEncoded\", \"Arch\"),\r\n            new InputOutputColumnPair(\"TrainerEncoded\", \"Trainer\")})\r\n        .Append(ctx.Transforms.Concatenate(\"Features\", \"ArchEncoded\", \"TrainerEncoded\"))\r\n        .Append(ctx.BinaryClassification.Trainers.LbfgsLogisticRegression(labelColumnName:\"oneDALSupport\"));\r\n\r\n// Train model\r\nvar model = pipeline.Fit(trainingDv);\r\n```\r\n\r\n4. Set the `MLNET_BACKEND` environment variable to `ONEDAL` \r\n5. Run the application.\r\n\r\n**Expected behavior**\r\nThe model trains successfully. \r\n\r\n**Additional context**\r\n\r\nThe same code using the FastTree trainer trains the model successfully. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/6533","RelatedDescription":"Open issue \"oneDAL Binary Classification LBFGS - Index was outside the bounds of the array.\" (#6533)"},{"Id":"1519243840","IsPullRequest":false,"CreatedAt":"2023-01-04T16:17:59","Actor":"luisquintanilla","Number":"6532","RawContent":null,"Title":"Update or deprecate AutoML 1.x APIs","State":"open","Body":"## Problem\r\n\r\nCurrently both ML.NET 1.x and ML.NET 2.x AutoML APIs are available to users. Although users can still run old samples, the differences in the implementations cause confusion.\r\n\r\n## Proposal(s):\r\n\r\n1. Update 1.x APIs to use the latest FLAML AutoML implementation\r\n2. Deprecate  1.x APIs in favor of those introduced in 2.x\r\n\r\nPersonally I'd be in favor of 1 since it would not break old samples while at the same time providing an even higher layer of abstraction on top of the Experiment API. However, in the event the breaking changes are significant, I'd be in favor of 2. \r\n\r\n## User evidence\r\n\r\n- #6529 \r\n- #6446\r\n- #6470","Url":"https://github.com/dotnet/machinelearning/issues/6532","RelatedDescription":"Open issue \"Update or deprecate AutoML 1.x APIs\" (#6532)"},{"Id":"1517831051","IsPullRequest":false,"CreatedAt":"2023-01-03T19:35:21","Actor":"FaithlessDbo","Number":"6531","RawContent":null,"Title":"Model Builder (Image classification) CPU vs GPU accuracy","State":"open","Body":"**OS:**\r\n- Windows 11\r\n- Visual Studio 2022\r\n\r\n**Target framework version:**\r\n- .NET 6.0\r\n\r\n**Nuget packages:**\r\n![image](https://user-images.githubusercontent.com/69070238/210427803-69bdb383-8c11-4bf3-a5f5-f257e7f6e63f.png)\r\n\r\n**What I'm trying to achieve**\r\n_TL DR; classifying images with my GPU instead of CPU_. \r\n\r\nI'm trying to classify images based on 14 different categories. Currently I have about 40.000 images, but I'm planning to add more to try and get a better dataset. Initially I have trained my dataset with my CPU and had pretty decent accuracy (90-98% in most cases), but the training and prediction speed was rather slow. I saw some articles about a GPU improving this speed. I bought a GPU for this, but the results were rather unexpected.\r\n\r\n**What did I do?**\r\nIn my \"Environment\" tab from the model builder I selected the \"Local (GPU)\" box and I installed the required extensions and the checks became green. I uninstalled the nuget package I used for the CPU training (_SciSharp.TensorFlow.Redist_) and installed the one required for the GPU (_SciSharp.TensorFlow.Redist-Windows-GPU_). When I hit the _Train_ button in the \"Train\" tab I was amazed by the speed. It flew through the bottleneck computation, indicating the GPU is working (confirmed with GPU usage in my task manager).\r\nHowever my best MicroAccuracy dropped from ~0.93 to ~0.43 and I get about 8% accuracy in my evaluate tab, which is completely unexpected.\r\n\r\n\r\n- **Model builder config:**\r\n```\r\n{\r\n  \"Scenario\": \"ImageClassification\",\r\n  \"DataSource\": {\r\n    \"Type\": \"Folder\",\r\n    \"Version\": 1,\r\n    \"FolderPath\": \"path\\\\To\\\\Images\\\\Folder\"\r\n  },\r\n  \"Environment\": {\r\n    \"Type\": \"LocalGPU\",\r\n    \"Version\": 1\r\n  },\r\n  \"Type\": \"TrainingConfig\",\r\n  \"Version\": 3,\r\n  \"TrainingOption\": {\r\n    \"Version\": 0,\r\n    \"Type\": \"ClassificationTrainingOption\",\r\n    \"TrainingTime\": 2147483647,\r\n    \"Seed\": 0\r\n  }\r\n}\r\n```\r\n\r\n\r\n### What could be causing the low accuracy between my CPU and GPU settings?\r\nDo I require more training images, or did I overlook something else? I'm looking forward for any help or suggestions!\r\n**_Thank you for reading!_**\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6531","RelatedDescription":"Open issue \"Model Builder (Image classification) CPU vs GPU accuracy\" (#6531)"},{"Id":"1513264740","IsPullRequest":false,"CreatedAt":"2022-12-29T00:37:51","Actor":"dcostea","Number":"6530","RawContent":null,"Title":"Value of Loss in ReportBestTrial (from class AutoMLMonitor) is always negative of Metric","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n - ML.NET Version: v3.0\r\n - .NET Version: .NET 7.0\r\n\r\n**Describe the bug**\r\nThe Loss seems to be the negative of Metric.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Run a sample with AutoML\r\n2. Add a monitoring class (IMonitor)\r\n3. Check result.Loss in ReportBestTrial(TrialResult result)\r\n\r\n**Expected behavior**\r\nA correct value for Loss value.\r\n\r\n**Screenshots, Code, Sample Projects**\r\npublic void ReportBestTrial(TrialResult result)\r\n    {\r\n        // check result.Loss below, the values is negative of result.Metric, e.g. if result.Metric is 0.728, Loss is -0.728\r\n        _bestTrials.Add(result);\r\n    }\r\n\r\n**Additional context**\r\nNone","Url":"https://github.com/dotnet/machinelearning/issues/6530","RelatedDescription":"Open issue \"Value of Loss in ReportBestTrial (from class AutoMLMonitor) is always negative of Metric\" (#6530)"},{"Id":"1508154242","IsPullRequest":false,"CreatedAt":"2022-12-22T16:17:03","Actor":"HoLyDreaM","Number":"6529","RawContent":null,"Title":"Meaningless bug in the latest version","State":"open","Body":"microsoft.auto.ml gives errors in latest version. Especially when you run the command like below, cache memory error or different errors are returned. But when I downgrade, this error goes away.\r\n\r\nExperimentResult<RegressionMetrics> experiment = mlContext.Auto().CreateRegressionExperiment(settings).Execute(newData, labelColumnName: \"P\", progressHandler: progress);","Url":"https://github.com/dotnet/machinelearning/issues/6529","RelatedDescription":"Open issue \"Meaningless bug in the latest version\" (#6529)"},{"Id":"1507606884","IsPullRequest":false,"CreatedAt":"2022-12-22T10:16:37","Actor":"andrasfuchs","Number":"6528","RawContent":null,"Title":"Build error: MSML_TypeParamName reports \"TType\" as not standard","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11 v10.0.22621.963\r\n - ML.NET Version: ML.NET v2.0\r\n - .NET Version: .NET 7\r\n\r\n**Describe the bug**\r\nAfter successfully building the ML.NET project when I try to build it again in Visual Studio, I get the \"Type parameter name 'TType' not standard\" error and the build fails.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Clone this repo\r\n2. Run the `build.cmd` in PowerShell\r\n3. Open the `Microsoft.ML.sln` solution in Visual Studio 2022\r\n4. Try to build the project (F6)\r\n5. (optional) Open a source file that causes the failure (eg. [NormalizeColumnSng.cs](https://github.com/dotnet/machinelearning/blob/main/src/Microsoft.ML.Data/Transforms/NormalizeColumnSng.cs))\r\n6. See the errors in the Error List window\r\n\r\n**Expected behavior**\r\nAs described [in this document](https://github.com/dotnet/machinelearning/blob/main/docs/building/windows-instructions.md#building-from-visual-studio-2019), I would expect the build command to work in Visual Studio.\r\n\r\n**Screenshots, Code, Sample Projects**\r\n![image](https://user-images.githubusercontent.com/910321/209109755-42d1147d-6460-4156-a66b-f1a55e9f039f.png)\r\n\r\n**Additional context**\r\nI use Visual Studio Enterprise 2022 v17.4.3.\r\n\r\nIf I refactor the type `TType` to `TTest` then it works fine.\r\n\r\nI also tried to keep the `TType` class name, and change [the condition in `TypeParamNameAnalyzer` class](https://github.com/dotnet/machinelearning/blob/9d798f1bb3fb17fe97eba77a694c35e2cb46a4b7/tools-local/Microsoft.ML.InternalCodeAnalyzer/TypeParamNameAnalyzer.cs#L44) from\r\n```csharp\r\nif (name == null || (name.StartsWith(\"T\") && Utils.NameIsGood(name, 1, true))) return;\r\n```\r\nto\r\n```csharp\r\nif (name == null || (true && Utils.NameIsGood(name, 1, true))) return;\r\n```\r\nand it made it work, I could build the solution without any errors.\r\n\r\nIt doesn't make any sense to me, I hope someone else will understand what's the underlying issue here.","Url":"https://github.com/dotnet/machinelearning/issues/6528","RelatedDescription":"Open issue \"Build error: MSML_TypeParamName reports \"TType\" as not standard\" (#6528)"},{"Id":"1507217498","IsPullRequest":true,"CreatedAt":"2022-12-22T04:50:30","Actor":"michaelgsharp","Number":"6527","RawContent":null,"Title":"moving onedal nuget download from onedal to native where its needed for building.","State":"closed","Body":"Moving nuget download from onedal project to native project because its needed for building and when we build the \"official build\" \"native only\" components it fails without this.","Url":"https://github.com/dotnet/machinelearning/pull/6527","RelatedDescription":"Closed or merged PR \"moving onedal nuget download from onedal to native where its needed for building.\" (#6527)"},{"Id":"1503249527","IsPullRequest":false,"CreatedAt":"2022-12-19T16:42:42","Actor":"iharsuvorau","Number":"6526","RawContent":null,"Title":"TensorFlow support on Apple Silicon (M1, M2)","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nI'm blocked by the current lack of support for TensorFlow on Apple Silicon. The limitation is mentioned at https://github.com/dotnet/machinelearning/blob/main/docs/project-docs/platform-limitations.md\r\n\r\n**Describe the solution you'd like**\r\nUse ML.NET on Apple Silicon chips.\r\n\r\n**Describe alternatives you've considered**\r\nAs alternative, I don't use ML.NET.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6526","RelatedDescription":"Open issue \"TensorFlow support on Apple Silicon (M1, M2)\" (#6526)"},{"Id":"1499332611","IsPullRequest":false,"CreatedAt":"2022-12-16T00:24:20","Actor":"zewditu","Number":"6525","RawContent":null,"Title":"Text- classification | Sentence Similarity cancellation does not work ","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: [e.g. Windows 10] \r\n - ML.NET Version: [e.g. ML.NET v1.5.5]\r\n - .NET Version: [e.g. .NET 5.0]\r\n\r\n**Describe the bug**\r\nIt seems that Text-classification cancellation does not cooperate with mlContext cancellation.\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to '...'\r\n2. Click on '....'\r\n3. Scroll down to '....'\r\n4. See error\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nIf applicable, add screenshots, code snippets, or sample projects to help explain your problem.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6525","RelatedDescription":"Open issue \"Text- classification | Sentence Similarity cancellation does not work \" (#6525)"},{"Id":"1498854215","IsPullRequest":false,"CreatedAt":"2022-12-15T17:52:39","Actor":"Vivraan","Number":"6524","RawContent":null,"Title":"Query about outdated Unity Sample","State":"open","Body":"Copy of https://github.com/dotnet/machinelearning-samples/issues/981\r\n\r\n### System information\r\n\r\n- **OS version/distro**: Targeting Meta Quest 2, building on Windows 11 22621.963\r\n- **.NET Version (eg., dotnet --info)**: .NET Framework 4.7.1 (Unity)\r\n\r\n### Issue\r\nI am trying to adapt some code in the Unity sample in this project in my own project and using my own models from here: https://github.com/dotnet/machinelearning-samples/blob/main/samples/csharp/end-to-end-apps/Unity-HelloMLNET/HelloMLNET/Assets/Scenes/HelloML.cs\r\n\r\nHowever, it seems that the `ArrayDataViewBuilder` class is now an internal sealed class, and it cannot be accessed by external classes. This was documented as a workaround for `PredictionEngine` since it made use of `Reflection.Emit` which apparently \"throws up\": https://github.com/dotnet/machinelearning-samples/tree/main/samples/csharp/end-to-end-apps/Unity-HelloMLNET#known-workarounds\r\n\r\nWhat is a solution for this? I am in a position where I absolutely need a solution to this in the next 72 hours.\r\n\r\n### Source code / logs\r\nWill attach if necessary.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6524","RelatedDescription":"Open issue \"Query about outdated Unity Sample\" (#6524)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-02-05T03:30:21.4013716Z","RunDurationInMilliseconds":526}