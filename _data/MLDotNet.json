{"Data":{"GitHub":{"Issues":[{"Id":"1398252094","IsPullRequest":true,"CreatedAt":"2022-10-05T19:16:47","Actor":"ericstj","Number":"6355","RawContent":null,"Title":"Remove Microsoft.ML.Featurizers","State":"open","Body":"This component was built on https://github.com/microsoft/featurizerslibrary which is no longer actively developed.","Url":"https://github.com/dotnet/machinelearning/pull/6355","RelatedDescription":"Open PR \"Remove Microsoft.ML.Featurizers\" (#6355)"},{"Id":"1398172851","IsPullRequest":true,"CreatedAt":"2022-10-05T18:08:38","Actor":"dotnet-maestro[bot]","Number":"6354","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1c26c342-7dbd-4e18-3778-08daa2f83374)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 1c26c342-7dbd-4e18-3778-08daa2f83374\r\n- **Build**: 20220923.4\r\n- **Date Produced**: September 23, 2022 7:23:12 PM UTC\r\n- **Commit**: 86caedcb8d09e5631a8139aab1e1cb90726668f5\r\n- **Branch**: refs/heads/release/7.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22327.2 to 7.0.0-beta.22473.4][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 7.0.0-beta.22327.2 to 7.0.0-beta.22473.4][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22327.2 to 7.0.0-beta.22473.4][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 7.0.0-beta.22327.2 to 7.0.0-beta.22473.4][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 7.0.0-beta.22327.2 to 7.0.0-beta.22473.4][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 7.0.0-beta.22327.2 to 7.0.0-beta.22473.4][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/a264eb1...86caedc\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates tools.dotnet to 7.0.100-rc.1.22431.12\r\n\r\n[marker]: <> (End:1c26c342-7dbd-4e18-3778-08daa2f83374)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6354","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/arcade\" (#6354)"},{"Id":"1398103400","IsPullRequest":false,"CreatedAt":"2022-10-05T17:04:05","Actor":"nhirschey","Number":"6353","RawContent":null,"Title":"CreateEnumerable code fails in Visual Studio FSI but works in .NET Interactive notebook?","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11 \r\n - ML.NET Version: Microsoft.ML.AutoML, 0.20.0-preview.22356.1\r\n - .NET Version: failed on both 6.0.400 and 7.0.100-rc.1.22431.12\r\n\r\n**Describe the bug**\r\nI am trying to create an F# IEnumerable from predictions. The code works in .NET Interactive notebooks, but it does not work in Visual Studio 2022 17.3.2 via F# interactive. I have also tried pasting the code into F# interactive by running `dotnet fsi` at the command line, but I get the same error.\r\n\r\nWhen I run it in a notebook, I get predictions as expected. When I run it in a FSX script file in Visual Studio, I get the error \"Could not find  column 'Predicted@' (Parameter 'Schema')\", yet the schema has a parameter named \"Predicted\".\r\n\r\n**To Reproduce**\r\nCode\r\n```fsharp\r\n#i \"nuget:https://pkgs.dev.azure.com/dnceng/public/_packaging/MachineLearning/nuget/v3/index.json\"\r\n#r \"nuget: Microsoft.ML.AutoML, 0.20.0-preview.22356.1\"\r\n\r\nopen System\r\nopen Microsoft.ML\r\nopen Microsoft.ML.Data\r\n\r\nlet mlContext = new MLContext()\r\n\r\n[<CLIMutable>]\r\ntype Predictors =\r\n    {\r\n        Date: DateTime\r\n        Return: single\r\n        DividendPrice: single\r\n    }\r\n\r\nlet predictors =\r\n    [{ Date = DateTime(1872,2,1)\r\n       Return = 0.008688271977f\r\n       DividendPrice = 0.05482897535f };\r\n     { Date = DateTime(1872,3,1)\r\n       Return = 0.03739754111f\r\n       DividendPrice = 0.05333504081f };\r\n     { Date = DateTime(1872,4,1)\r\n       Return = 0.03229662776f\r\n       DividendPrice = 0.05175264552f};\r\n     { Date = DateTime(1872,5,1)\r\n       Return = 0.004451415502f\r\n       DividendPrice = 0.05051480234f }]\r\n\r\nlet mlData = mlContext.Data.LoadFromEnumerable(predictors)\r\n\r\nlet modelFit =\r\n    let model =\r\n        EstimatorChain()\r\n            .Append(mlContext.Transforms.CopyColumns(\"Label\",\"Return\"))\r\n            .Append(mlContext.Transforms.Concatenate(\"Features\",\"DividendPrice\"))\r\n            .Append(mlContext.Regression.Trainers.Ols())\r\n    model.Fit(mlData)\r\n\r\n[<CLIMutable>]\r\ntype Prediction =\r\n    {\r\n        Predicted: single\r\n        Date: DateTime\r\n    }\r\n\r\nlet pred = modelFit.Transform(mlData)\r\nlet renamePipeline = mlContext.Transforms.CopyColumns(\"Predicted\",\"Score\")\r\nlet renamed = renamePipeline.Fit(pred).Transform(pred)\r\nmlContext.Data.CreateEnumerable<Prediction>(renamed,reuseRowObject=false)\r\n```\r\n\r\n### Output in .NET interactive:\r\n<html>\r\n<body>\r\n<!--StartFragment-->\r\n\r\nindex | Predicted | Date\r\n-- | -- | --\r\n0 | 0.022715298 | 1872-02-01 00:00:00Z\r\n1 | 0.021365488 | 1872-03-01 00:00:00Z\r\n2 | 0.019935748 | 1872-04-01 00:00:00Z\r\n3 | 0.018817322 | 1872-05-01 00:00:00Z\r\n\r\n<!--EndFragment-->\r\n</body>\r\n</html>\r\n\r\n### Output in Visual Studio:\r\n```\r\nSystem.ArgumentOutOfRangeException: Could not find  column 'Predicted@' (Parameter 'Schema')\r\n   at Microsoft.ML.Data.TypedCursorable`1..ctor(IHostEnvironment env, IDataView data, Boolean ignoreMissingColumns, InternalSchemaDefinition schemaDefn)\r\n   at Microsoft.ML.Data.TypedCursorable`1.Create(IHostEnvironment env, IDataView data, Boolean ignoreMissingColumns, SchemaDefinition schemaDefinition)\r\n   at Microsoft.ML.Data.CursoringUtils.AsCursorable[TRow](IHostEnvironment env, IDataView data, Boolean ignoreMissingColumns, SchemaDefinition schemaDefinition)\r\n   at Microsoft.ML.PipeEngine`1..ctor(IHostEnvironment env, IDataView pipe, Boolean ignoreMissingColumns, SchemaDefinition schemaDefinition)\r\n   at Microsoft.ML.DataOperationsCatalog.CreateEnumerable[TRow](IDataView data, Boolean reuseRowObject, Boolean ignoreMissingColumns, SchemaDefinition schemaDefinition)\r\n   at <StartupCode$FSI_0004>.$FSI_0004.main@() in C:\\test.fsx:line 52\r\nStopped due to error\r\n```\r\n\r\nHere is the schema\r\n```fsharp\r\n> renamed.Schema |> Seq.toArray\r\nval it: DataViewSchema.Column[] =\r\n  [|Date@: DateTime {Annotations = ;\r\n                     Index = 0;\r\n                     IsHidden = false;\r\n                     Name = \"Date@\";\r\n                     Type = DateTime;}; Return@: Single {Annotations = ;\r\n                                                         Index = 1;\r\n                                                         IsHidden = false;\r\n                                                         Name = \"Return@\";\r\n                                                         Type = Single;};\r\n    DividendPrice@: Single {Annotations = ;\r\n                            Index = 2;\r\n                            IsHidden = false;\r\n                            Name = \"DividendPrice@\";\r\n                            Type = Single;}; Date: DateTime {Annotations = ;\r\n                                                             Index = 3;\r\n                                                             IsHidden = false;\r\n                                                             Name = \"Date\";\r\n                                                             Type = DateTime;};\r\n    Return: Single {Annotations = ;\r\n                    Index = 4;\r\n                    IsHidden = false;\r\n                    Name = \"Return\";\r\n                    Type = Single;};\r\n    DividendPrice: Single {Annotations = ;\r\n                           Index = 5;\r\n                           IsHidden = false;\r\n                           Name = \"DividendPrice\";\r\n                           Type = Single;}; Label: Single {Annotations = ;\r\n                                                           Index = 6;\r\n                                                           IsHidden = false;\r\n                                                           Name = \"Label\";\r\n                                                           Type = Single;};\r\n    Features: Vector<Single, 1> {SlotNames} {Annotations = SlotNames;\r\n                                             Index = 7;\r\n                                             IsHidden = false;\r\n                                             Name = \"Features\";\r\n                                             Type = Vector<Single, 1>;};\r\n    Score: Single {ScoreColumnSetId, ScoreColumnKind, ScoreValueKind}\r\n      {Annotations = ScoreColumnSetId, ScoreColumnKind, ScoreValueKind;\r\n       Index = 8;\r\n       IsHidden = false;\r\n       Name = \"Score\";\r\n       Type = Single;};\r\n    Predicted: Single {ScoreColumnSetId, ScoreColumnKind, ScoreValueKind}\r\n      {Annotations = ScoreColumnSetId, ScoreColumnKind, ScoreValueKind;\r\n       Index = 9;\r\n       IsHidden = false;\r\n       Name = \"Predicted\";\r\n       Type = Single;}|]\r\n```\r\n\r\n**Expected behavior**\r\nI expect the code to work in fsharp interactive\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6353","RelatedDescription":"Open issue \"CreateEnumerable code fails in Visual Studio FSI but works in .NET Interactive notebook?\" (#6353)"},{"Id":"1397301600","IsPullRequest":false,"CreatedAt":"2022-10-05T06:29:04","Actor":"KyGurasz","Number":"6352","RawContent":null,"Title":"Update to latest LightGBM version","State":"open","Body":"The current version in use with ML.net seems to be 2.3.1, which is from November 2019.  An updated version would bring functionality more in line to what we see in other environments. Also, see issue [#6296](https://github.com/dotnet/machinelearning/issues/6296).","Url":"https://github.com/dotnet/machinelearning/issues/6352","RelatedDescription":"Open issue \"Update to latest LightGBM version\" (#6352)"},{"Id":"1397293297","IsPullRequest":false,"CreatedAt":"2022-10-05T06:19:39","Actor":"KyGurasz","Number":"6351","RawContent":null,"Title":"Monotonic constraints for Regressors, especially LightGBM","State":"open","Body":"Would love to see monotonic constraints in ML.net, it's something gradient boosters have had for a while. ","Url":"https://github.com/dotnet/machinelearning/issues/6351","RelatedDescription":"Open issue \"Monotonic constraints for Regressors, especially LightGBM\" (#6351)"},{"Id":"1389972336","IsPullRequest":true,"CreatedAt":"2022-10-05T05:29:59","Actor":"michaelgsharp","Number":"6343","RawContent":null,"Title":"testing pool change for PR","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/6343","RelatedDescription":"Closed or merged PR \"testing pool change for PR\" (#6343)"},{"Id":"1396886089","IsPullRequest":true,"CreatedAt":"2022-10-04T21:53:21","Actor":"ericstj","Number":"6350","RawContent":null,"Title":"Add CodeQL to build","State":"open","Body":"Refactor build variables to avoid duplication.\r\n\r\nEnable CodeQL on Windows_x64\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6350","RelatedDescription":"Open PR \"Add CodeQL to build\" (#6350)"},{"Id":"1396853337","IsPullRequest":true,"CreatedAt":"2022-10-04T21:17:04","Actor":"dakersnar","Number":"6349","RawContent":null,"Title":"Update name of DataFrame.WriteCsv to SaveCsv","State":"open","Body":"It seems like there was [general agreement](https://github.com/dotnet/machinelearning/issues/5883) to update the name about a year ago, but it has been a while, so I want to resurface this and ask the following questions:\r\n\r\n1. Do we still want to go ahead with this change?\r\n2. Is this considered a \"breaking change\"? If yes, are there any repercussions we should be aware of?\r\n3. Is there anything else I'm missing that might need to be updated (documentation, other files, etc)?","Url":"https://github.com/dotnet/machinelearning/pull/6349","RelatedDescription":"Open PR \"Update name of DataFrame.WriteCsv to SaveCsv\" (#6349)"},{"Id":"1388489286","IsPullRequest":true,"CreatedAt":"2022-10-04T21:02:09","Actor":"dakersnar","Number":"6340","RawContent":null,"Title":"Fix problems with DataFrame WriteCsv when quotes are present in data","State":"closed","Body":"Fixes #6238, continuation of https://github.com/dotnet/machinelearning/pull/6303\r\n\r\nThere were no issues with Load, but Writing back to CSV didn't properly escape quotation marks within the data, preventing the CSV from being correctly loaded again.","Url":"https://github.com/dotnet/machinelearning/pull/6340","RelatedDescription":"Closed or merged PR \"Fix problems with DataFrame WriteCsv when quotes are present in data\" (#6340)"},{"Id":"1389889685","IsPullRequest":true,"CreatedAt":"2022-10-03T19:53:59","Actor":"michaelgsharp","Number":"6342","RawContent":null,"Title":"mac os 12 fix","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/6342","RelatedDescription":"Closed or merged PR \"mac os 12 fix\" (#6342)"},{"Id":"1395131311","IsPullRequest":false,"CreatedAt":"2022-10-03T18:15:06","Actor":"CBrauer","Number":"6348","RawContent":null,"Title":"Poor peerformance of TimeSeriesCatalog.ForecastBySsa Method","State":"open","Body":"**System Information:**\r\nWindows 11 \r\nMicrosoft Visual Studio Professional 2022 (64-bit) - Current\r\nVersion 17.3.5\r\n\r\n**Describe the bug**\r\nI am very disappointed in the Time Series Model Builder project. I have the following comments:\r\n1.\tThere are 144 rows in my data file (VERU_9_26_2022_144.csv).  The code that was generated by Model Builder set the value of “seriesLength” to 2118.  The documentation states that “seriesLength” is “The length of series that is kept in buffer for modeling (parameter N)”. What the hell does that mean?  The value of 2118 does not make sense.  Please explain.\r\n\r\n2.\tThe code that was generated by Model Builder set “windowSize” to 50.  I assume that “windowSize” and “seriesLength” ae hyperparameters.  Is that true? If so, it would sure be nice if you guys would share that code that generated the values.\r\n\r\n3.\tModel Builder gives the option to plot the error curve. That is necessary, but not sufficient.  A plot of the predicted values is what researchers want to see.  A table is not good enough.  If you plot the predicted values generated by Model Builder you will see how bad the predictions are.  Here is the plot of the predictions.  The red dots are the predicted values:\r\n![image](https://user-images.githubusercontent.com/1317234/193647990-608a56eb-0470-4a7e-b366-8dcfb28970d3.png)\r\nNo cigar!\r\nEither there is a serious bug in Model Builder, or the SsaForecast algorithm is worthless.\r\nI give this project a grade of D-.\r\nI have put the reproducible source code on GitHub so you can see the data file and code.\r\n[CBrauer/Poor-Performance-of-ModelBuilder (github.com)](https://github.com/CBrauer/Poor-Performance-of-ModelBuilder)\r\nCharles Brauer\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6348","RelatedDescription":"Open issue \"Poor peerformance of TimeSeriesCatalog.ForecastBySsa Method\" (#6348)"},{"Id":"1392564946","IsPullRequest":false,"CreatedAt":"2022-09-30T14:54:09","Actor":"lbitton93","Number":"6347","RawContent":null,"Title":"Precision loss When Reading in CSV data","State":"open","Body":"### Summary\r\nCSV fields not auto- reading In values correctly (losing precision)\r\n\r\n### Scenario\r\nI want to automatically read some Integer Id's into my dataframe. These integers are quite large and are losing precision.\r\n\r\n### Cause\r\nhttps://github.com/dotnet/machinelearning/blob/main/src/Microsoft.Data.Analysis/DataFrame.IO.cs\r\n***Method: GuessType()***\r\nWe don't make any attempt to read Int, Long or Double Types here. Hence the code-flow is truncating the long integers.\r\nI guess since this is primarily a ML framework, we favour floats, and therefore want to avoid the performance overhead of more complex type inference?\r\n\r\n### Suggestions\r\n**Numeric Preference**\r\nIt may be nice if the dev can specify a preferred numerical type to the Read_Csv method. i.e double, long, float, int. I suppose the disadvantage maybe unnecessary precision in some columns, however the default value could still be float. This would probably be the simplest change.\r\n\r\n**Enhance Dtypes Parameter**\r\nAlternatively it would be nice to modify the Dtypes[] parameter in Read_Csv to be a dictionary such that we can specify the particular type we want for a given column name. This will make it a little more robust. (I have customer data with the column names in different orders/ shifted in excel etc. It would be nicer to not have to rely on indexing). The disadvantage here is that we would have to check that column names exist etc.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6347","RelatedDescription":"Open issue \"Precision loss When Reading in CSV data\" (#6347)"},{"Id":"1391793672","IsPullRequest":false,"CreatedAt":"2022-09-30T04:09:22","Actor":"crazyoutlook","Number":"6346","RawContent":null,"Title":"Using Variables as parameters instead of constant in ML.NET","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: [e.g. Windows 10] - Windows 10\r\n - ML.NET Version: [e.g. ML.NET v1.5.5] - ML.Net 1.4\r\n - .NET Version: [e.g. .NET 5.0] - .Net 6.0\r\n\r\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\nI have some attribute value in code which is being used in ML.Net code. Ml.Net is accepting constants for these attributes. I need to use variables so that I can supply it at runtime.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nHave attached source code. Below class is used in ML.Net - public class ImageInput, public class ImagePredictions\r\nAbove class is used to initialize ML.Net as below :\r\n //Initialize MLContext\r\n MLContext mlContext = new MLContext();\r\n //Load Data      \r\nList<ImageInput> emptyData = new List<ImageInput>();\r\nvar data = mlContext.Data.LoadFromEnumerable(emptyData);\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\nI should be able to use variables when initializing ML.Net\r\n\r\n**Screenshots, Code, Sample Projects**\r\nIf applicable, add screenshots, code snippets, or sample projects to help explain your problem.\r\nCode sample attached. \r\n\r\n public struct ImageSettings\r\n    {      \r\n        public const int imageHeight = 416;\r\n        public const int imageWidth = 416;\r\n    }\r\n\r\n    public class ImageInput\r\n    {\r\n        [ImageType(ImageSettings.imageHeight, ImageSettings.imageWidth)]\r\n        public Bitmap Image { get; set; }\r\n    }\r\n\r\n    public class ImagePredictions\r\n    {\r\n        [ColumnName(\"model_outputs0\")]\r\n        public float[] PredictedLabels { get; set; }\r\n    }\r\n\t\r\n\t\r\n\t //Initialize MLContext\r\n     MLContext mlContext = new MLContext();\r\n\r\n     //Load Data\r\n                \r\n\tList<ImageInput> emptyData = new List<ImageInput>();\r\n    var data = mlContext.Data.LoadFromEnumerable(emptyData);\r\n\t\r\n\t var pipeline = mlContext.Transforms.ResizeImages(resizing: ImageResizingEstimator.ResizingKind.Fill, outputColumnName: \"data\", imageWidth: ImageSettings.imageWidth, imageHeight: ImageSettings.imageHeight, inputColumnName: nameof(ImageInput.Image))\r\n             .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"data\", orderOfExtraction: ImagePixelExtractingEstimator.ColorsOrder.ARGB))\r\n             .Append(mlContext.Transforms.ApplyOnnxModel(modelFile: modeltoInfer.ModelPath, outputColumnName: \"model_outputs0\", inputColumnName: \"data\"));\r\n                            \r\n     var model = pipeline.Fit(data);\r\n     predictionEngine = mlContext.Model.CreatePredictionEngine<ImageInput, ImagePredictions>(model);\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6346","RelatedDescription":"Open issue \"Using Variables as parameters instead of constant in ML.NET\" (#6346)"},{"Id":"1386573881","IsPullRequest":true,"CreatedAt":"2022-09-29T20:56:38","Actor":"LittleLittleCloud","Number":"6338","RawContent":null,"Title":"Improve RegressionExpeirment using AutoMLExperiment","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n- https://github.com/dotnet/machinelearning/issues/6145\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6338","RelatedDescription":"Closed or merged PR \"Improve RegressionExpeirment using AutoMLExperiment\" (#6338)"},{"Id":"1390801244","IsPullRequest":true,"CreatedAt":"2022-09-29T12:38:37","Actor":"rgesteve","Number":"6345","RawContent":null,"Title":"XGBoost integration infrastructure (still temporarily using Estimator rather than Trainer)","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nStrictly this is independent of OneDAL (XGBoost and OneDAL are separate libraries), but adding to this feature branch for convenience.  This payload includes the PInvoke infrastructure to call XGBoost (version 1.5 and above... current version is 1.7).  It mimics the design of the LightGBM integration as much as possible.  Most notable difference is that it does not serialize to `InternalEnsembleTree`, but uses its own model (also it uses the JSON dump to build such a model, but that's an implementation detail).   The actual Estimator/Transformer pair is preliminary, as it looks more like a standard transformation than a learner (in that the Model is not an independent entity).  This most likely will need to change.","Url":"https://github.com/dotnet/machinelearning/pull/6345","RelatedDescription":"Open PR \"XGBoost integration infrastructure (still temporarily using Estimator rather than Trainer)\" (#6345)"},{"Id":"1389489761","IsPullRequest":false,"CreatedAt":"2022-09-29T09:26:57","Actor":"JJJWD","Number":"6341","RawContent":null,"Title":"Robust Scaling result is different in ML.NET compared to scikit-learn","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 \r\n- **.NET Version (eg., dotnet --info)**:  .NET Framework 4.7.2\r\n- ML.NET v1.7.1\r\n- python v 3.8.10\r\n- scikit-learn v1.1.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI'm trying to convert my ML code in python using scikit-learn to C# using ML.NET\r\n- **What happened?**\r\nI noticed that the result with robust scaling in the pipeline using ML.NET did not match the results from python. The difference seems to be due to a different 'scale' value and the used function.\r\n- **What did you expect?**\r\nI have checked  the scale and offset of the data in EXCEL using the QUARTILE.INC() function and these results suggest that the values from python are correct. \r\nI've also derived from the [documentation ](https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.normalizingtransformer.affinenormalizermodelparameters-1?view=ml-dotnet#properties) that ML.NET seems to use the `(input - offset) * scale` function to calculate the normalized value while the python code uses `(input - offset) \\ scale`\r\n\r\n- I would like to know why this result is so different and whether this is bug or not.\r\n\r\nBelow you can find an example code to demonstrate the difference\r\n### Source code C#\r\n```\r\nprivate class TestInput\r\n{\r\n\t[ColumnName(@\"Test\")]\r\n\tpublic float Test { get; set; }\r\n}\r\n\r\n[TestMethod]\r\npublic void NormalizedTest()\r\n{\r\n\tList<TestInput> testInputs = new List<TestInput>()\r\n\t{\r\n\t\tnew TestInput(){Test = 2.114265f },\r\n\t\tnew TestInput(){Test = 2.837738f },\r\n\t\tnew TestInput(){Test = 2.909677f },\r\n\t\tnew TestInput(){Test = 3.769787f },\r\n\t};\r\n\r\n\tvar mlContext = new MLContext();\r\n\tIDataView dataView = mlContext.Data.LoadFromEnumerable<TestInput>(testInputs);\r\n\r\n\t//normalize\r\n\tvar normalize = mlContext.Transforms.NormalizeRobustScaling(new[] {\r\n\t\t\tnew InputOutputColumnPair(@\"Test\", @\"Test\") });\r\n\tvar normalizeTransform = normalize.Fit(dataView);\r\n\tvar transformedData = normalizeTransform.Transform(dataView);\r\n\tvar affineParams = normalizeTransform.GetNormalizerModelParameters(0) as AffineNormalizerModelParameters<float>;\r\n\tvar offset = affineParams.Offset;\r\n\tvar scale = affineParams.Scale;\r\n\tConsole.WriteLine($\"Offset: {offset}\");\r\n\tConsole.WriteLine($\"Scale: {scale}\");\r\n\tList<TestInput> vals = mlContext.Data.CreateEnumerable<TestInput>(\r\n\ttransformedData, reuseRowObject: false).ToList();\r\n\tfor (int i = 0; i < vals.Count; i++) {\r\n\t\t//y = (x - ({ offset})) * { scale}\r\n\t\tConsole.WriteLine($\"{(testInputs[i].Test - offset) * scale} \\t  {vals[i].Test}\");\r\n\t}\r\n}\r\n```\r\n\r\n**Output**\r\n```\r\nOffset: 2.873708\r\nScale: 1.208078\r\n-0.917466 \t  -0.917466\r\n-0.04345396  \t  -0.04345396\r\n0.04345396 \t  0.04345396\r\n1.082534 \t  1.082534\r\n```\r\n\r\n### Source code python\r\n```\r\nimport numpy as np\r\nfrom sklearn.preprocessing import RobustScaler\r\n\r\nvals= [2.114265, 2.837738,2.909677,3.769787]\r\nX = np.array(vals)\r\nscaler = RobustScaler()\r\ny= scaler.fit_transform(X.reshape(-1, 1))\r\nprint(f'Offset {scaler.center_}')\r\nprint(f'Scale {scaler.scale_}')\r\n\r\nprint(y)\r\nfor val in vals:\r\n    print((val-scaler.center_)/scaler.scale_)\r\n```\r\n\r\n**Output**\r\n```\r\nOffset [2.8737075]\r\nScale [0.46783475]\r\n[[-1.62331357]\r\n [-0.07688505]\r\n [ 0.07688505]\r\n [ 1.9153761 ]]\r\n[-1.62331357]\r\n[-0.07688505]\r\n[0.07688505]\r\n[1.9153761]\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/6341","RelatedDescription":"Closed issue \"Robust Scaling result is different in ML.NET compared to scikit-learn\" (#6341)"},{"Id":"1389986371","IsPullRequest":false,"CreatedAt":"2022-09-28T21:54:02","Actor":"LittleLittleCloud","Number":"6344","RawContent":null,"Title":"Add LDRandom tuner","State":"open","Body":"LDRandom to generate sobol sequence, which can cover the search space more evenly than random tuner\r\n\r\nsee details: \r\nhttps://github.com/dotnet/machinelearning/pull/6339#discussion_r981827891","Url":"https://github.com/dotnet/machinelearning/issues/6344","RelatedDescription":"Open issue \"Add LDRandom tuner\" (#6344)"},{"Id":"1373413309","IsPullRequest":true,"CreatedAt":"2022-09-27T21:29:25","Actor":"LittleLittleCloud","Number":"6325","RawContent":null,"Title":"use macos 10-15 in .vsts-dotnet-ci","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nsee also #6315 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/6325","RelatedDescription":"Closed or merged PR \"use macos 10-15 in .vsts-dotnet-ci\" (#6325)"},{"Id":"1388401112","IsPullRequest":true,"CreatedAt":"2022-09-27T21:27:15","Actor":"LittleLittleCloud","Number":"6339","RawContent":null,"Title":"add smac tuner in AutoMLExperiment","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\nThis PR makes `Smac` as a public-avaliable sweeper.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6339","RelatedDescription":"Open PR \"add smac tuner in AutoMLExperiment\" (#6339)"},{"Id":"1384157125","IsPullRequest":false,"CreatedAt":"2022-09-23T18:20:32","Actor":"luisquintanilla","Number":"6337","RawContent":null,"Title":"LightGBM Tracking Issue","State":"open","Body":"Issue to track LightGBM related bugs / requests.\r\n\r\n- [ ] #5022\r\n- [ ] #3603\r\n- [ ] #6351 \r\n- [ ] #6352 \r\n","Url":"https://github.com/dotnet/machinelearning/issues/6337","RelatedDescription":"Open issue \"LightGBM Tracking Issue\" (#6337)"},{"Id":"1383133724","IsPullRequest":false,"CreatedAt":"2022-09-22T23:50:57","Actor":"KevinDJones","Number":"6336","RawContent":null,"Title":"Manually Trigger Engine Pool Refresh that's From URI","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nI'm using the prediction engine pool from a URI as such:\r\n\r\n```\r\nservices.AddPredictionEnginePool<ModelInput, ModelOutput>().FromUri(\r\n    uri: $\"{URI}\",\r\n    period: TimeSpan.FromMinutes(5));\r\n```\r\n\r\nWhich is working great. However, I'd like to be able to get the engine pool updated on demand, rather than waiting up to 5 minutes for it to refresh itself.\r\n\r\n**Describe the solution you'd like**\r\nPerhaps a method on the `PredictionEnginePool` class that allows for a refresh i.e. `predictionEnginePool.RefreshFromUri()`\r\n\r\n**Describe alternatives you've considered**\r\nCan certainly shorten the period, but it seems unnecessary to have it checking every 30 seconds when I know exactly when it needs to update.\r\n\r\nIt could also be a local file using `FromFile` but the model lives elsewhere and I'd like it to stay that way.\r\n\r\n**Additional context**\r\nIs this something that has been explored at all? I'm not opposed to taking a stab at it but want to make sure it's not something that's already been discussed/attempted/etc.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6336","RelatedDescription":"Open issue \"Manually Trigger Engine Pool Refresh that's From URI\" (#6336)"},{"Id":"1380084346","IsPullRequest":true,"CreatedAt":"2022-09-20T22:56:00","Actor":"LittleLittleCloud","Number":"6335","RawContent":null,"Title":"Add ITrialResultManager for continue training in AutoML","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n## Resolved issue\r\n#5736\r\n\r\n## What's `ITrialResultManager`\r\n`ITrialResultManager` is a component used by `AutoMLExperiment` to save and load `TrialResult`. The default implementation for `ITrialResultManager` is `CsvTrialResultManager`, which saves all trial results in csv format\r\n\r\n## What's `ITrialResultManager` used for\r\nCurrently, it's used by some tuners (CostFrugalTuner, for example) to recover from previous training, suppose trialResult csv is provided or is available.\r\n\r\n## How to use it\r\n`ITrialResultManager` is not directly exposed to public users. User can use `SetCheckpoint(string folder)` path instead. If a folder is provided via `SetCheckpoint`, `AutoMLExperiment` will create that folder if not exists, and configures `CsvTrialResultManager` to save trial results to `folder/trialResults.csv`.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6335","RelatedDescription":"Open PR \"Add ITrialResultManager for continue training in AutoML\" (#6335)"},{"Id":"1379604385","IsPullRequest":false,"CreatedAt":"2022-09-20T15:24:05","Actor":"luisquintanilla","Number":"6334","RawContent":null,"Title":"Add ReplaceMissingTimeSeriesValues to docs","State":"open","Body":"Add [`ReplaceMissingTimeSeriesValues`](https://github.com/dotnet/machinelearning/blob/0577957256c296fdea2deb6b6e00e7be9b458167/src/Microsoft.ML.Featurizers/TimeSeriesImputer.cs) to reference API docs. It's missing from the latest 1.7.0 and 2.0.0 versions. \r\n\r\n[.NET API Browser](https://learn.microsoft.com/dotnet/api/?view=ml-dotnet&preserve-view=true&term=ReplaceMissingTimeSeriesValues)","Url":"https://github.com/dotnet/machinelearning/issues/6334","RelatedDescription":"Open issue \"Add ReplaceMissingTimeSeriesValues to docs\" (#6334)"},{"Id":"1379590334","IsPullRequest":false,"CreatedAt":"2022-09-20T15:14:21","Actor":"luisquintanilla","Number":"6333","RawContent":null,"Title":"Add FeaturizeDateTime transform to docs","State":"open","Body":"Add [`FeaturizeDateTime`](https://github.com/dotnet/machinelearning/blob/0577957256c296fdea2deb6b6e00e7be9b458167/src/Microsoft.ML.Featurizers/DateTimeTransformer.cs) transform to API docs. Currently it doesn't show up for the latest 1.7.0 and 2.0.0-preview versions. \r\n\r\n[.NET API Browser](https://learn.microsoft.com/dotnet/api/?view=ml-dotnet-2.0.0&term=FeaturizeDateTime)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6333","RelatedDescription":"Open issue \"Add FeaturizeDateTime transform to docs\" (#6333)"},{"Id":"1378886702","IsPullRequest":false,"CreatedAt":"2022-09-20T06:29:14","Actor":"torronen","Number":"6332","RawContent":null,"Title":"DataView.GetColumn: Multiple columns with same name but different type","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nI am running model.Transform.\r\n\r\nThen, I am would like to get the original field \"Quote\" with type string.\r\nI would expect the following to work, but it gives an exception about wrong type:\r\n`IDataView predictions= model.Transform(myDataFrame);\r\nvar quotes = predictions.GetColumn<string>(\"Quotes\").ToList();`\r\n\r\nThe problem seems to be transforms (Micorsoft.ML.AutoML in 1.6.0) has created transforms to different types.\r\n![image](https://user-images.githubusercontent.com/26261427/191181885-98105788-c6f7-4da9-b46e-b0cfce1f0c7b.png)\r\n\r\n`'Cannot map column (name: Quote, type: Vector<Single, 2>) in data to the user-defined type, System.String. Arg_ParamName_Name'`\r\n\r\n**Describe the solution you'd like**\r\nGetColumn should try to find column with the specified type <string> if multiple columns with the same name exists.\r\n\r\n**Describe alternatives you've considered**\r\nI have not yet solved this issue.\r\n\r\n I suppose my solution will be :\r\n1) get the values before Transform()\r\n2) looping through all columns and checking type and name would work.\r\n\r\n**Additional data**\r\nI would like to get the column here to be sure the row-order is the same. \r\n\r\nI assume Transform() should preserve order(?) . If so, then I suppose this is not a very important issue.","Url":"https://github.com/dotnet/machinelearning/issues/6332","RelatedDescription":"Open issue \"DataView.GetColumn: Multiple columns with same name but different type\" (#6332)"},{"Id":"1378730578","IsPullRequest":false,"CreatedAt":"2022-09-20T02:28:22","Actor":"luisquintanilla","Number":"6331","RawContent":null,"Title":"Column CustomMapping overload","State":"open","Body":"## Problem\r\n\r\nWhen I want to apply a custom transform to a single data column in my dataset, I have to provide the input and output types. If I've used TextLoader to load my data without defining schema classes, I now have to go and create new classes for my input and output. \r\n\r\n```csharp\r\nvar cols = new [] \r\n{\r\n    new TextLoader.Column(name: \"Text\",dataKind:DataKind.String,index:47),\r\n    new TextLoader.Column(\r\n        name: \"Categorical\",\r\n        dataKind: DataKind.String,\r\n        source: new TextLoader.Range[] {\r\n            new TextLoader.Range(19),\r\n            new TextLoader.Range(20),\r\n            new TextLoader.Range(21),\r\n            new TextLoader.Range(50),\r\n            new TextLoader.Range(59),\r\n            new TextLoader.Range(71),\r\n            new TextLoader.Range(83)}),\r\n    new TextLoader.Column(name:\"Label\",dataKind:DataKind.String,2)\r\n};\r\n\r\nvar dataLoader = ctx.Data.CreateTextLoader(columns:cols);\r\nvar idv = dataLoader.Load(path);\r\n\r\npublic class CustomData {public string Text {get;set;}};\r\n\r\nAction<CustomData,CustomData> customTransform = (rowIn,rowOut) => {\r\n    rowIn.Text = rowOut.Text.ToUpper()\r\n};\r\n```\r\n\r\n## Proposed Solution\r\n\r\nCreate an overload to `CustomMapping` that takes an InputColumnName and OutputColumnName parameters which perform the lookup and apply the transform to the specified columns.\r\n\r\n```csharp\r\nAction<string,string> capitalize = (colIn,colOut) => \r\n{\r\n    colOut = colIn.ToUpper();\r\n}\r\n\r\nvar capitalizeTransform = ctx.Transforms.CustomMapping(capitalize,\"capitalizeTransform\",inputColumnName: \"Text\", outputColumnName: \"CapitalizedText\");\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6331","RelatedDescription":"Open issue \"Column CustomMapping overload\" (#6331)"},{"Id":"1378718305","IsPullRequest":false,"CreatedAt":"2022-09-20T02:07:08","Actor":"luisquintanilla","Number":"6330","RawContent":null,"Title":"Infer T in CreateEnumerable<T> based in DataView schema","State":"open","Body":"## Problem\r\n\r\nToday, when an `IDataView` is created using `TextLoader`, there's no need to create classes that define the schema. \r\n\r\n```csharp\r\nvar cols = new [] \r\n{\r\n    new TextLoader.Column(name: \"Text\",dataKind:DataKind.String,index:47),\r\n    new TextLoader.Column(\r\n        name: \"Categorical\",\r\n        dataKind: DataKind.String,\r\n        source: new TextLoader.Range[] {\r\n            new TextLoader.Range(19),\r\n            new TextLoader.Range(20),\r\n            new TextLoader.Range(21),\r\n            new TextLoader.Range(50),\r\n            new TextLoader.Range(59),\r\n            new TextLoader.Range(71),\r\n            new TextLoader.Range(83)}),\r\n    new TextLoader.Column(name:\"Label\",dataKind:DataKind.String,2)\r\n};\r\n\r\nvar dataLoader = ctx.Data.CreateTextLoader(columns:cols);\r\nvar idv = dataLoader.Load(path);\r\n```\r\n\r\nHowever, if I want to export the `IDataView` as an `IEnumerable`, I can't because I need to explicitly provide the type of `IEnumerable<T>`. If no classes have been created, I now need to go and create a new class just to export to an `IEnumerable`.\r\n\r\n## Proposed solution\r\n\r\nJust like `LoadFromEnumerable` is able to infer and create an IDataView from `IEnumerable<T>`, `CreateEnumerable` should be able to infer `T` based on the DataView schema or bind to an object at runtime using `dynamic`.\r\n\r\n```csharp\r\nctx.Data.CreateEnumerable(idv,reuseRowObject:false,ignoreMissingColumns:false)\r\n```\r\n\r\nor \r\n\r\n```csharp\r\nctx.Data.CreateEnumerable<dynamic>(idv,reuseRowObject:false,ignoreMissingColumns:false)\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/6330","RelatedDescription":"Open issue \"Infer T in CreateEnumerable<T> based in DataView schema\" (#6330)"},{"Id":"1378203881","IsPullRequest":false,"CreatedAt":"2022-09-19T16:17:30","Actor":"tarekgh","Number":"6329","RawContent":null,"Title":"Samples pointing at wrong resources ","State":"open","Body":"The following sample is pointing at `https://aka.ms/mlnet-resources/datasets/cifar10.zip` but looks this resources is not valid.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bca5736c23e093006bb6a5a3f85a789c4a1cdcf2/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/ImageClassification/LearningRateSchedulingCifarResnetTransferLearning.cs\r\n\r\nLooks we have code in different places trying to get the same resources from other sources https://github.com/dotnet/machinelearning/blob/bca5736c23e093006bb6a5a3f85a789c4a1cdcf2/docs/samples/Microsoft.ML.AutoML.Samples/Cifar10.cs#L13\r\n\r\nAlso there is other samples pointing at `https://github.com/onnx/models/tree/master/vision/classification/squeezenet` which exists but the zipped files there contains a different structured files than what the sample expect.\r\nhttps://github.com/dotnet/machinelearning/blob/04dda55ab0902982b16309c8e151f13a53e9366d/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/ApplyONNXModelWithInMemoryImages.cs#L16\r\neven the comment suggest there is Microsoft.ML.Onnx.TestModels nuget which not exist either. The correct structured file can be found in https://s3.amazonaws.com/download.onnx/models/opset_8/squeezenet.tar.gz\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6329","RelatedDescription":"Open issue \"Samples pointing at wrong resources \" (#6329)"},{"Id":"1376003377","IsPullRequest":false,"CreatedAt":"2022-09-16T14:07:00","Actor":"wil70","Number":"6328","RawContent":null,"Title":"[ML.Net, c#]  LightGBM re-training and Importing LightGBM CLI/MPI model","State":"open","Body":"1. Can I retrain LightGBM? \r\n    1.a. I tried via AutoML and it seems to start from scratch when I do a FIT or I call MLModel1.Training.cs \" public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)\" auto generated code.\r\n    1.b. In the documentation [\"Re-train a model\"](https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/retrain-model-ml-net), LightGBM is not listed as re-traine-able? \r\n           1.b.1. is it still true (asking as the documentation is 9 months old)? TY!\r\n           1.b.2 I can see from Python or even XGBM c/c++ you can retrain? using init_model option of lightgbm.train\r\n2. Can I use the model generated by [LightGBM CLI/MPI ](https://lightgbm.readthedocs.io/en/latest/Installation-Guide.html#build-mpi-version) in ML.net?\r\nThanks!\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6328","RelatedDescription":"Open issue \"[ML.Net, c#]  LightGBM re-training and Importing LightGBM CLI/MPI model\" (#6328)"},{"Id":"1373907396","IsPullRequest":false,"CreatedAt":"2022-09-15T04:36:54","Actor":"luisquintanilla","Number":"6326","RawContent":null,"Title":"Create Pipeline Visualizer","State":"open","Body":"Create a visualization method that when given a pipeline displays a visual of the pipeline. This can work both for interactive and standard .NET projects. \r\n\r\n## API\r\n\r\n### Define pipeline\r\n\r\n```csharp\r\nvar pipeline = \r\n    mlContext.Transforms.Concatenate(outputColumnName:\"Features\", inputColumnNames: new [] {\"Col1\", \"Col2\" })\r\n        .Append(mlContext.Transforms.ReplaceMissingValues(outputColumnName:\"Features\",inputColumnName:\"Features\")\r\n        .Append(mlContext.Regression.Trainers.Sdca(labelColumnName:\"Label\", featureColumnName:\"Features\");\r\n```\r\n\r\n### Interactive\r\n\r\n```csharp\r\npipeline\r\n```\r\n\r\n### .NET project\r\n\r\n```csharp\r\npipeline.SaveToImage(\"image.png\");\r\n```\r\n\r\n## Samples\r\n\r\n```mermaid\r\nflowchart TB;\r\n  subgraph OutputColumns\r\n    OutputSchema[Score]\r\n  end\r\n  subgraph Pipeline\r\n    direction TB\r\n    Concatenate--Features-->ReplaceMissingValues\r\n    ReplaceMissingValues--Features-->Sdca\r\n    click Concatenate \"https://docs.microsoft.com/dotnet/api/microsoft.ml.transformextensionscatalog.concatenate?view=ml-dotnet#microsoft-ml-transformextensionscatalog-concatenate(microsoft-ml-transformscatalog-system-string-system-string())\"\r\n    click ReplaceMissingValues \"https://docs.microsoft.com/dotnet/api/microsoft.ml.extensionscatalog.replacemissingvalues?view=ml-dotnet#microsoft-ml-extensionscatalog-replacemissingvalues(microsoft-ml-transformscatalog-microsoft-ml-inputoutputcolumnpair()-microsoft-ml-transforms-missingvaluereplacingestimator-replacementmode-system-boolean)\"\r\n    click Sdca \"https://docs.microsoft.com/dotnet/api/microsoft.ml.trainers.sdcaregressiontrainer?view=ml-dotnet\"\r\n  end\r\n  subgraph InputColumns\r\n    InputSchema[\"Col1, Col2, Label\"]\r\n  end\r\n  InputColumns-->Pipeline\r\n  Pipeline-->OutputColumns\r\n```\r\n\r\n## Proposed Implementation\r\n\r\n```mermaid\r\nflowchart LR;\r\n    EstimatorChain --> Mermaid\r\n    Mermaid --> Markdig\r\n    Markdig --> HTML\r\n    HTML --> CustomFormatter\r\n    HTML --> Image\r\n```\r\n\r\n1. Take an ML.NET `EstimatorChain` and dynamically generate Mermaid diagram.\r\n2. Process Mermaid diagram as Markdown using Markdig\r\n3. Convert Mermaid diagram to HTML\r\n4. Display HTML\r\n    1. If in interactive environment, register a custom formatter.\r\n    1. If in standard .NET application, save as image.","Url":"https://github.com/dotnet/machinelearning/issues/6326","RelatedDescription":"Open issue \"Create Pipeline Visualizer\" (#6326)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-10-06T03:30:23.0430757Z","RunDurationInMilliseconds":578}