{"Data":{"GitHub":{"Issues":[{"Id":"646544444","IsPullRequest":true,"CreatedAt":"2020-06-26T22:34:33","Actor":"Lynx1820","Number":"5263","RawContent":null,"Title":"Enabling Ranking Cross Validation","State":"open","Body":"- Enabled Ranking Cross Validation \r\n- Fixed some syntax errors in the ranking CodeGen generated code\r\n\r\n**Issue**:  Cross Validation is needed in order to integrate the AutoML Ranking Experiment with ModelBuilder. \r\n**Resolves:** #2685 ","Url":"https://github.com/dotnet/machinelearning/pull/5263","RelatedDescription":"Open PR \"Enabling Ranking Cross Validation\" (#5263)"},{"Id":"645890659","IsPullRequest":true,"CreatedAt":"2020-06-26T17:15:31","Actor":"frank-dong-ms","Number":"5259","RawContent":null,"Title":"remove unnecessary output from lda native","State":"closed","Body":"issue: https://github.com/dotnet/machinelearning/issues/3192\r\n\r\nthese output looks like debug info and don't need output them\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5259","RelatedDescription":"Closed or merged PR \"remove unnecessary output from lda native\" (#5259)"},{"Id":"641380864","IsPullRequest":true,"CreatedAt":"2020-06-26T16:30:08","Actor":"michaelgsharp","Number":"5248","RawContent":null,"Title":"Changed default NGram length from 1 to 2.","State":"closed","Body":"~~This is part of the work for #4749, other PR's will follow to split the work up. When the default value for NGrams was changed from 1 to 2, we discovered that memory was exploding for FastTree training and was causing test failures in some x86 tests.  This PR changes the the default value for NGramLength from 1 to 2 and also changes FastTree so it handles sparse data better.~~\r\n\r\n~~The main portion of the sparse data change is changing from an array to a dictionary so that memory is only allocated when its needed instead of all up front. When running the previously failing test, it now passes with less memory usage and is actually faster due to less GC running.~~\r\n\r\n~~The slowdown to dense data appears to be very small. Running the benchmark for ranking before the change gives this result:~~\r\n|                                                     Method |    Mean |    Error |   StdDev | Extra Metric |\r\n|----------------------------------------------------------- |--------:|---------:|---------:|-------------:|\r\n| Test_Ranking_MSLRWeb10K_RawNumericFeatures_FastTreeRanking | 1.263 s | 0.0517 s | 0.0595 s |          - |\r\n\r\n~~After the change gives this result:~~\r\n|                                                     Method |    Mean |    Error |   StdDev | Extra Metric |\r\n|----------------------------------------------------------- |--------:|---------:|---------:|-------------:|\r\n| Test_Ranking_MSLRWeb10K_RawNumericFeatures_FastTreeRanking | 1.381 s | 0.0397 s | 0.0457 s |            - |\r\n\r\n~~This is about a 10% slowdown. In return, the memory used is lower. In one example NGram test with NGramLength = 2 the memory before the change was 3.4 GB. After this change was 400 MB.~~\r\n\r\nEdit, leaving in original text for context. After doing more testing and benchmarking, it was discovered the test case was wrong and the FastTree implementation was fine. This pr now just fixes the test case while updating the default NGramLength to 2.","Url":"https://github.com/dotnet/machinelearning/pull/5248","RelatedDescription":"Closed or merged PR \"Changed default NGram length from 1 to 2.\" (#5248)"},{"Id":"646240897","IsPullRequest":false,"CreatedAt":"2020-06-26T12:50:35","Actor":"yousiftouma","Number":"5262","RawContent":null,"Title":"Using OnnxTransformer throws TypeInitializationException","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 7\r\n- **.NET Version (eg., dotnet --info)**: core 3.1\r\n\r\n### Issue\r\nWhen trying to use OnnxTransformer, the native libraries aren't loaded properly. I can see them under bin\\Debug\\netcoreapp3.1\\runtimes\\(platform)\\native.\r\nIf I use package version 1.4.0 of OnnxTransformer, without installing the runtime myself, it works.\r\nI couldn't find any docs regarding the requirement to install the runtime manually (I figured it out by browsing all over the place, but not through docs really). I suppose this should be clear when you're not using the onnxruntime package explicitly, but rather the higher level API of OnnxTransformer?\r\n\r\nOn a separate note: Is it sufficient to install the GPU natives and use the `fallbackToCpu` flag of `ApplyOnnxModel` to be able to run inferencing on both CPU and GPU? I'm having a hard time finding this documented.\r\n\r\n- **What did you do?**\r\nInstalled `Microsoft.ML.OnnxTransformer` 1.5.0 and `Microsoft.ML.OnnxRuntime` 1.3.0 and used `ApplyOnnxModel` in a pipeline.\r\n\r\n- **What happened?**\r\nCalling `ApplyOnnxModel` throws `System.TypeInitializationException`.\r\n\r\n- **What did you expect?**\r\nThat my ONNX model can be used.\r\n\r\n### Source code / logs\r\nInner exception message:\r\n\r\n\"Unable to load DLL 'onnxruntime' or one of its dependencies: The specified module could not be found. (0x8007007E)\"\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5262","RelatedDescription":"Open issue \"Using OnnxTransformer throws TypeInitializationException\" (#5262)"},{"Id":"646129970","IsPullRequest":true,"CreatedAt":"2020-06-26T09:20:00","Actor":"mstfbl","Number":"5261","RawContent":null,"Title":"Fixed score column name and order bugs in CalibratorTransformer","State":"open","Body":"Fix #4700 \r\n\r\nAs explained in #4700, the column order in which the Score column is given to `PlattCalibratorTransformer` exposes a bug in `CalibratorTransformer` where the name and the location of the score column is hard-coded. This PR fixes this hard-coding, where now the name and order of the score column given to `CalibratorTransformer` can be different than the default values.\r\n\r\nI will also add unit tests to confirm these changes before marking PR as ready.","Url":"https://github.com/dotnet/machinelearning/pull/5261","RelatedDescription":"Open PR \"Fixed score column name and order bugs in CalibratorTransformer\" (#5261)"},{"Id":"646008734","IsPullRequest":true,"CreatedAt":"2020-06-26T05:01:30","Actor":"frank-dong-ms","Number":"5260","RawContent":null,"Title":"fix issue 4322, enable lda summary output","State":"open","Body":"fix issue 4322: https://github.com/dotnet/machinelearning/issues/4322\r\n1. output topic summary to model file when OutputTopicWordSummary is set to true\r\n2. open public API from lda transformer to get topic summary\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5260","RelatedDescription":"Open PR \"fix issue 4322, enable lda summary output\" (#5260)"},{"Id":"645862327","IsPullRequest":true,"CreatedAt":"2020-06-25T21:29:07","Actor":"michaelgsharp","Number":"5258","RawContent":null,"Title":"Updated AveragedPerceptron default iterations from 1 to 10","State":"open","Body":"Per issue #4749, changes the default AveragePerceptron iteration count from 1 to 10. Also updates all baseline files that were updated as a result.","Url":"https://github.com/dotnet/machinelearning/pull/5258","RelatedDescription":"Open PR \"Updated AveragedPerceptron default iterations from 1 to 10\" (#5258)"},{"Id":"645715124","IsPullRequest":true,"CreatedAt":"2020-06-25T16:56:01","Actor":"wangyems","Number":"5257","RawContent":null,"Title":"Add two-variable scenario in Tensor shape inference for TensorflowTransform[todo: adding test]","State":"open","Body":"fix [https://github.com/dotnet/machinelearning/issues/4364](url)\r\n\r\nThere are a couple of image related scenarios that tensor shape inference should handle (tensor usually has shape [W,H,C] or [N,W,H,C] and usually W = H)\r\n1, [?, ?, C]\r\n2, [?, W, H, C]\r\n3, [N, ?, ?, C]\r\n4, [?, ?, ?, C] (added in this PR)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5257","RelatedDescription":"Open PR \"Add two-variable scenario in Tensor shape inference for TensorflowTransform[todo: adding test]\" (#5257)"},{"Id":"645470923","IsPullRequest":false,"CreatedAt":"2020-06-25T11:02:46","Actor":"ladodc","Number":"5256","RawContent":null,"Title":"AutoML Exception: System.ArgumentOutOfRangeException: 'Could not find input column 'SamplingKeyColumn' (Parameter 'inputSchema')'","State":"open","Body":"Hi, I get an exception on prediction with AutoML. \r\nBefore you run the Problem you need to reference two NuGet Packages Microsoft.ML and Microsoft.ML.AutoML\r\nHere ist the complete code to reproduce the error. Run in VS2019:\r\n\r\n```C#\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.AutoML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Trainers.FastTree;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing static Microsoft.ML.DataOperationsCatalog;\r\n\r\nnamespace AutoML\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var mlContext = new MLContext(seed: 0);\r\n\r\n            var examples = GenerateData(100);\r\n\r\n            var dataview = mlContext.Data.LoadFromEnumerable(examples);\r\n\r\n            TrainTestData trainTestSplit = mlContext.Data.TrainTestSplit(dataview, testFraction: 0.1, samplingKeyColumnName: null);\r\n            IDataView trainingData = trainTestSplit.TrainSet;\r\n            IDataView testData = trainTestSplit.TestSet;\r\n\r\n            ITransformer model = TrainRegresionAutoML(trainingData);\r\n            ReportOnFeatureImportance(mlContext, model, dataview);            \r\n\r\n            OutputData prediction = PredictRegresinAutoML<InputData,OutputData>(model, new InputData(){A = 6, B = 6});          \r\n        }\r\n\r\n        static ITransformer TrainRegresionAutoML(IDataView trainData)\r\n        {\r\n            var mlContext = new MLContext(seed: 0);\r\n\r\n            var settings = new RegressionExperimentSettings\r\n            {\r\n                MaxExperimentTimeInSeconds = 10, // In Second\r\n                OptimizingMetric = RegressionMetric.RSquared,\r\n                CacheDirectory = null\r\n            };\r\n\r\n            var experiment = mlContext.Auto().CreateRegressionExperiment(settings);\r\n            \r\n            var model = experiment.Execute(trainData);            \r\n\r\n\r\n            return model.BestRun.Model;\r\n        }\r\n\r\n        private static void ReportOnFeatureImportance(MLContext context, ITransformer model, IDataView data)\r\n        {            \r\n            // Need to cast from the ITransformer interface to gain access to the LastTransformer property.\r\n            var typedModel = (TransformerChain<IPredictionTransformer<object>>)model;\r\n            var modelParams = typedModel.LastTransformer.Model as FastTreeRegressionModelParameters;\r\n            var weights = new VBuffer<float>();\r\n            modelParams.GetFeatureWeights(ref weights);            \r\n        }\r\n\r\n        static TDst PredictRegresinAutoML<TSrc, TDst>(ITransformer model, TSrc inputData) \r\n            where TSrc : class\r\n            where TDst : class, new()\r\n        {\r\n            var mlContext = new MLContext(seed: 0);\r\n\r\n            var predictor = mlContext.Model.CreatePredictionEngine<TSrc, TDst>(model);\r\n            return predictor.Predict(inputData);\r\n        }      \r\n\r\n        private static IEnumerable<InputData> GenerateData(int count,\r\n            int seed = 0)\r\n\r\n        {\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n                for (int ii = 0; ii < count; ii++)\r\n                {\r\n                    yield return new InputData\r\n                    {\r\n                        A = i,\r\n                        B = ii,\r\n                        Value = i * ii\r\n                    };\r\n                }\r\n            }\r\n        }       \r\n    }\r\n\r\n    public class InputData\r\n    {     \r\n        public float A { get; set; }\r\n        \r\n        public float B { get; set; }\r\n\r\n        [ColumnName(\"Label\")]\r\n        public float Value { get; set; }\r\n    }\r\n\r\n    public class OutputData\r\n    {\r\n        [ColumnName(\"Score\")]\r\n        public float Result;\r\n    }\r\n\r\n    public class FeatureImportance\r\n    {\r\n        public string Name { get; set; }\r\n\r\n        public double RSquaredMean { get; set; }\r\n\r\n        public double CorrelationCoefficient { get; set; }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/5256","RelatedDescription":"Open issue \"AutoML Exception: System.ArgumentOutOfRangeException: 'Could not find input column 'SamplingKeyColumn' (Parameter 'inputSchema')'\" (#5256)"},{"Id":"644511174","IsPullRequest":true,"CreatedAt":"2020-06-24T10:40:55","Actor":"mstfbl","Number":"5255","RawContent":null,"Title":"Added cross entropy and learning rate scheduler support to validation training, simplified metric reporting","State":"open","Body":"Fix #4807 \r\n\r\nIn this PR, I've added learning rate scheduler support for validation training, and added cross entropy metric calculation & reporting during validation training in the Image Classification Trainer. Now, validation training can use specified learning rate schedulers for validation and obtain cross entropy values for each epoch during validation training.\r\n\r\nI have attached below screenshots of training and validation metrics with this [repro](https://github.com/dotnet/machinelearning-samples/compare/master...gartangh:validation_metrics).\r\n\r\nBefore (note that learning rate is constant, even when the given `ExponentialLRDecay` is used, and cross entropy during validation is reported as 0):\r\n![before_2](https://user-images.githubusercontent.com/5262061/85540803-455e8680-b5cc-11ea-9928-dab19fd901a6.png)\r\n\r\nAfter (note that learning rate decays properly):\r\n![after](https://user-images.githubusercontent.com/5262061/85540045-5f4b9980-b5cb-11ea-8b70-bc6a9d0f9163.png)\r\n\r\nI have also simplified `ToString()` to report consistent metrics for both during training and validation, which included accuracy and cross entropy.\r\n\r\nI will add tests to verify changes made in this PR.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5255","RelatedDescription":"Open PR \"Added cross entropy and learning rate scheduler support to validation training, simplified metric reporting\" (#5255)"},{"Id":"644194064","IsPullRequest":false,"CreatedAt":"2020-06-23T22:41:30","Actor":"frank-dong-ms","Number":"5254","RawContent":null,"Title":"DnnFeaturizeImage for Resnet18 should return Vector<Single, 512> instead of Vector<Single, 1, 512, 1, 1>","State":"open","Body":"related to issue: https://github.com/dotnet/machinelearning/issues/4226\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5254","RelatedDescription":"Open issue \"DnnFeaturizeImage for Resnet18 should return Vector<Single, 512> instead of Vector<Single, 1, 512, 1, 1>\" (#5254)"},{"Id":"638338576","IsPullRequest":false,"CreatedAt":"2020-06-23T22:06:53","Actor":"DanBrook","Number":"5241","RawContent":null,"Title":"Missing method exception NumSharp.Shape TensorFlow.TensorShape.op_implicit on fit","State":"closed","Body":"System information\r\n\r\nWindows 10 pro/18362.836:\r\n.NET 4.7.2:\r\n\r\nIssue\r\n\r\nGot error “Missing method exception NumSharp.Shape TensorFlow.TensorShape.op_implicit” on fit, while trying to run Microsoft example for ML image classification.\r\n\r\nCode:\r\n\r\nIEstimator<ITransformer> pipeline = mlContext.Transforms.LoadImages(outputColumnName: \"input\", imageFolder: _imagesFolder, inputColumnName: nameof(ImageData.ImagePath))\r\n                // The image transforms transform the images into the model's expected format.\r\n                .Append(mlContext.Transforms.ResizeImages(outputColumnName: \"input\", imageWidth: InceptionSettings.ImageWidth, imageHeight: InceptionSettings.ImageHeight, inputColumnName: \"input\"))\r\n                .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"input\", interleavePixelColors: InceptionSettings.ChannelsLast, offsetImage: InceptionSettings.Mean))\r\n\r\n.Append(mlContext.Model.LoadTensorFlowModel(_inceptionTensorFlowModel).\r\n    ScoreTensorFlowModel(outputColumnNames: new[] { \"softmax2_pre_activation\" }, inputColumnNames: new[] { \"input\" }, addBatchDimensionInput: true))\r\n\r\n.Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: \"LabelKey\", inputColumnName: \"Label\"))\r\n\r\n\r\n.Append(mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(labelColumnName: \"LabelKey\", featureColumnName: \"softmax2_pre_activation\"))\r\n\r\n.Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabelValue\", \"PredictedLabel\"))\r\n.AppendCacheCheckpoint(mlContext);\r\n\r\nIDataView trainingData = mlContext.Data.LoadFromTextFile<ImageData>(path:  _trainTagsTsv, hasHeader: false);\r\n\r\n//code above is working properly data preview shows proper data was loaded\r\n\r\nITransformer model = pipeline.Fit(trainingData);\r\n// fit ends with error \r\n\r\n Numsharp is v0. 20. 5\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5241","RelatedDescription":"Closed issue \"Missing method exception NumSharp.Shape TensorFlow.TensorShape.op_implicit on fit\" (#5241)"},{"Id":"641576086","IsPullRequest":true,"CreatedAt":"2020-06-23T17:32:55","Actor":"Lynx1820","Number":"5249","RawContent":null,"Title":"Testing #4309 failure ","State":"closed","Body":"Do not review \r\n","Url":"https://github.com/dotnet/machinelearning/pull/5249","RelatedDescription":"Closed or merged PR \"Testing #4309 failure \" (#5249)"},{"Id":"638238233","IsPullRequest":false,"CreatedAt":"2020-06-22T17:44:37","Actor":"boyedarat","Number":"5240","RawContent":null,"Title":"DirectML support","State":"closed","Body":"Are there any plans to support DirectML as an alternative to TF?\r\nHave not seen this request in the Issues list.","Url":"https://github.com/dotnet/machinelearning/issues/5240","RelatedDescription":"Closed issue \"DirectML support\" (#5240)"},{"Id":"643067639","IsPullRequest":false,"CreatedAt":"2020-06-22T15:33:37","Actor":"oscarjaergren","Number":"5253","RawContent":null,"Title":"Exporting Custom Vision models no longer work","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n\r\n\r\n- **.NET Version (eg., dotnet --info)**: \r\n.net framework 4.8\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nDownloaded new exported model and replaced old one\r\n\r\n\r\n- **What happened?**\r\nGot exception \"\"Model variable data, expects Float[-1,3,416,416,], but binding was attempted with an incompatible type Image[544x480].'\"\"\r\n\r\n\"'The binding is incomplete or does not match the input/output description.\"\r\n\r\n- **What did you expect?**\r\n\r\nExpect: Model working\r\n\r\n\r\n\r\n### Source code / logs\r\n\r\nI would attach the models but cannot do so in this ticket \r\n\r\nStack overflow post (not from me) that has the same issue, so this is not only by me. \r\nhttps://stackoverflow.com/questions/62486386/custom-vision-onnx-models-stopped-working-with-windows-10-ml\r\n\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5253","RelatedDescription":"Closed issue \"Exporting Custom Vision models no longer work\" (#5253)"},{"Id":"642841584","IsPullRequest":true,"CreatedAt":"2020-06-22T07:51:12","Actor":"xiaoyan-ms","Number":"5252","RawContent":null,"Title":"ignore this","State":"closed","Body":"testing for PR ","Url":"https://github.com/dotnet/machinelearning/pull/5252","RelatedDescription":"Closed or merged PR \"ignore this\" (#5252)"},{"Id":"640799263","IsPullRequest":false,"CreatedAt":"2020-06-19T22:54:05","Actor":"jacobthamblett","Number":"5247","RawContent":null,"Title":"PermutationFeatureImportance not working with AutoML API","State":"closed","Body":"### System information\r\n\r\n- Windows 10 Pro, build 18363\r\n- Visual Studio 2019 Professional\r\n- C# Console Application, in .NET Core 3.1\r\n\r\n### Issue\r\n\r\n- Using the AutoML API to generate ML multiclassification model from large network datasets stored in CSV file. The model produced by the API provides accurate prediction, with reasonable results in the following metrics: MicroAccuracy, MacroAccuracy, LogLoss & LogLossReduction. Trying to get metrics on what feature selection was implemented by the API is proving impossible however. \r\n\r\n- Following all direction & [documentation ](https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/explain-machine-learning-model-permutation-feature-importance-ml-net#explain-the-model-with-permutation-feature-importance-pfi) on implementing the PermutationFeatureImportance method has no success. It is possible to extract the pipeline from the AutoML BestRun model, and putting together the list of features in the custom class type it is using is not a problem either. However, there would appear to be no LastTransformer attribute for the BestRun model produced by the API. According to the official documentation on how to execute the PFI method on multiclass model, this is one of the main hurdles. \r\n\r\n- Attempting to follow the specific Multiclassification PFI [documentation](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet#Microsoft_ML_PermutationFeatureImportanceExtensions_PermutationFeatureImportance__1_Microsoft_ML_MulticlassClassificationCatalog_Microsoft_ML_ISingleFeaturePredictionTransformer___0__Microsoft_ML_IDataView_System_String_System_Boolean_System_Nullable_System_Int32__System_Int32_) more exact, and defining a new pipeline with single multiclassification algorithm still throws an error. This is not ideal, as the new pipeline definition with single multiclassification algorithm does not necessarily match that used by the AutoML API's model, which is the model the PFI metrics are needed for.\r\n\r\n\r\n### Source code / logs\r\n\r\n**Example code following Multiclassification PFI Implementation from [ML.Net Documentation](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet#Microsoft_ML_PermutationFeatureImportanceExtensions_PermutationFeatureImportance__1_Microsoft_ML_MulticlassClassificationCatalog_Microsoft_ML_ISingleFeaturePredictionTransformer___0__Microsoft_ML_IDataView_System_String_System_Boolean_System_Nullable_System_Int32__System_Int32_), using pipeline extracted from AutoML bestRun Model:** \r\n```\r\n//PFI code attempting to extract and use pipeline from AutoML bestRun model\r\n            var featureColumns =\r\n                new string[] { \"Unnamed0\",\"FlowID\",\"SourceIP\",\"SourcePort\",\"DestinationIP\",\"DestinationPort\",\"Protocol\",\"Timestamp\",\"FlowDuration\",\"TotalFwdPackets\",\"TotalBackwardPackets\",\"TotalLengthofFwdPackets\",\"TotalLengthofBwdPackets\",\"FwdPacketLengthMax\",\"FwdPacketLengthMin\",\"FwdPacketLengthMean\",\"FwdPacketLengthStd\",\"BwdPacketLengthMax\",\"BwdPacketLengthMin\",\"BwdPacketLengthMean\",\"BwdPacketLengthStd\",\"FlowBytes\",\"FlowPackets\",\"FlowIATMean\",\"FlowIATStd\",\"FlowIATMax\",\"FlowIATMin\",\"FwdIATTotal\",\"FwdIATMean\",\"FwdIATStd\",\"FwdIATMax\",\"FwdIATMin\",\"BwdIATTotal\",\"BwdIATMean\",\"BwdIATStd\",\"BwdIATMax\",\"BwdIATMin\",\"FwdPSHFlags\",\"BwdPSHFlags\",\"FwdURGFlags\",\"BwdURGFlags\",\"FwdHeaderLength\",\"BwdHeaderLength\",\"FwdPackets\",\"BwdPackets\",\"MinPacketLength\",\"MaxPacketLength\",\"PacketLengthMean\",\"PacketLengthStd\",\"PacketLengthVariance\",\"FINFlagCount\",\"SYNFlagCount\",\"RSTFlagCount\",\"PSHFlagCount\",\"ACKFlagCount\",\"URGFlagCount\",\"CWEFlagCount\",\"ECEFlagCount\",\"DownUpRatio\",\"AveragePacketSize\",\"AvgFwdSegmentSize\",\"AvgBwdSegmentSize\",\"FwdHeaderLength1\",\"FwdAvgBytesBulk\",\"FwdAvgPacketsBulk\",\"FwdAvgBulkRate\",\"BwdAvgBytesBulk\",\"BwdAvgPacketsBulk\",\"BwdAvgBulkRate\",\"SubflowFwdPackets\",\"SubflowFwdBytes\",\"SubflowBwdPackets\",\"SubflowBwdBytes\",\"Init_Win_bytes_forward\",\"Init_Win_bytes_backward\",\"act_data_pkt_fwd\",\"min_seg_size_forward\",\"ActiveMean\",\"ActiveStd\",\"ActiveMax\",\"ActiveMin\",\"IdleMean\",\"IdleStd\",\"IdleMax\",\"IdleMin\",\"SimillarHTTP\",\"Inbound\" };\r\n\r\n            // Fit the pipeline to the data.\r\n            var PFI_model = bestRun.Estimator.Fit(trainDataView);\r\n\r\n            // Transform the dataset.\r\n            var transformedData = PFI_model.Transform(trainDataView);\r\n\r\n            // Extract the predictor.\r\n            var linearPredictor = PFI_model.LastTransformer;\r\n\r\n            // Compute the permutation metrics for the linear model using the\r\n            // normalized data.\r\n            var permutationMetrics = mlContext.MulticlassClassification\r\n                .PermutationFeatureImportance(linearPredictor, transformedData,\r\n                permutationCount: 30);\r\n\r\n            // Now let's look at which features are most important to the model\r\n            // overall. Get the feature indices sorted by their impact on\r\n            // microaccuracy.\r\n            var sortedIndices = permutationMetrics\r\n                .Select((metrics, index) => new { index, metrics.MicroAccuracy })\r\n                .OrderByDescending(feature => Math.Abs(feature.MicroAccuracy.Mean))\r\n                .Select(feature => feature.index);\r\n\r\n            Console.WriteLine(\"Feature\\tChange in MicroAccuracy\\t95% Confidence in \"\r\n                + \"the Mean Change in MicroAccuracy\");\r\n\r\n            var microAccuracy = permutationMetrics.Select(x => x.MicroAccuracy)\r\n                .ToArray();\r\n\r\n            foreach (int i in sortedIndices)\r\n            {\r\n                Console.WriteLine(\"{0}\\t{1:G4}\\t{2:G4}\",\r\n                    featureColumns[i],\r\n                    microAccuracy[i].Mean,\r\n                    1.96 * microAccuracy[i].StandardError);\r\n            }\r\n```\r\nError Produced: _Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS1061\t'ITransformer' does not contain a definition for 'LastTransformer' and no accessible extension method 'LastTransformer' accepting a first argument of type 'ITransformer' could be found (are you missing a using directive or an assembly reference?)_\r\n\r\n\r\n**Example code also following Multiclassification PFI Implementation from [ML.Net Documentation](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet#Microsoft_ML_PermutationFeatureImportanceExtensions_PermutationFeatureImportance__1_Microsoft_ML_MulticlassClassificationCatalog_Microsoft_ML_ISingleFeaturePredictionTransformer___0__Microsoft_ML_IDataView_System_String_System_Boolean_System_Nullable_System_Int32__System_Int32_), using a newly created pipeline and single multiclassification algorithm:** \r\n```\r\n//PFI code with new pipeline using single multiclassification algorithm\r\n            var featureColumns =\r\n                new string[] { \"Unnamed0\",\"FlowID\",\"SourceIP\",\"SourcePort\",\"DestinationIP\",\"DestinationPort\",\"Protocol\",\"Timestamp\",\"FlowDuration\",\"TotalFwdPackets\",\"TotalBackwardPackets\",\"TotalLengthofFwdPackets\",\"TotalLengthofBwdPackets\",\"FwdPacketLengthMax\",\"FwdPacketLengthMin\",\"FwdPacketLengthMean\",\"FwdPacketLengthStd\",\"BwdPacketLengthMax\",\"BwdPacketLengthMin\",\"BwdPacketLengthMean\",\"BwdPacketLengthStd\",\"FlowBytes\",\"FlowPackets\",\"FlowIATMean\",\"FlowIATStd\",\"FlowIATMax\",\"FlowIATMin\",\"FwdIATTotal\",\"FwdIATMean\",\"FwdIATStd\",\"FwdIATMax\",\"FwdIATMin\",\"BwdIATTotal\",\"BwdIATMean\",\"BwdIATStd\",\"BwdIATMax\",\"BwdIATMin\",\"FwdPSHFlags\",\"BwdPSHFlags\",\"FwdURGFlags\",\"BwdURGFlags\",\"FwdHeaderLength\",\"BwdHeaderLength\",\"FwdPackets\",\"BwdPackets\",\"MinPacketLength\",\"MaxPacketLength\",\"PacketLengthMean\",\"PacketLengthStd\",\"PacketLengthVariance\",\"FINFlagCount\",\"SYNFlagCount\",\"RSTFlagCount\",\"PSHFlagCount\",\"ACKFlagCount\",\"URGFlagCount\",\"CWEFlagCount\",\"ECEFlagCount\",\"DownUpRatio\",\"AveragePacketSize\",\"AvgFwdSegmentSize\",\"AvgBwdSegmentSize\",\"FwdHeaderLength1\",\"FwdAvgBytesBulk\",\"FwdAvgPacketsBulk\",\"FwdAvgBulkRate\",\"BwdAvgBytesBulk\",\"BwdAvgPacketsBulk\",\"BwdAvgBulkRate\",\"SubflowFwdPackets\",\"SubflowFwdBytes\",\"SubflowBwdPackets\",\"SubflowBwdBytes\",\"Init_Win_bytes_forward\",\"Init_Win_bytes_backward\",\"act_data_pkt_fwd\",\"min_seg_size_forward\",\"ActiveMean\",\"ActiveStd\",\"ActiveMax\",\"ActiveMin\",\"IdleMean\",\"IdleStd\",\"IdleMax\",\"IdleMin\",\"SimillarHTTP\",\"Inbound\" };\r\n\r\n            var pipeline = mlContext.Transforms\r\n                .Concatenate(\"Features\", featureColumns)\r\n                .Append(mlContext.Transforms.Conversion.MapValueToKey(\"Label\"))\r\n                .Append(mlContext.Transforms.NormalizeMinMax(\"Features\"))\r\n                .Append(mlContext.MulticlassClassification.Trainers\r\n                .SdcaMaximumEntropy());\r\n\r\n            // Fit the pipeline to the data.\r\n            var PFI_model = pipeline.Fit(trainDataView);\r\n\r\n            // Transform the dataset.\r\n            var transformedData = PFI_model.Transform(trainDataView);\r\n\r\n            // Extract the predictor.\r\n            var linearPredictor = PFI_model.LastTransformer;\r\n\r\n            // Compute the permutation metrics for the linear model using the\r\n            // normalized data.\r\n            var permutationMetrics = mlContext.MulticlassClassification\r\n                .PermutationFeatureImportance(linearPredictor, transformedData,\r\n                permutationCount: 30);\r\n\r\n            // Now let's look at which features are most important to the model\r\n            // overall. Get the feature indices sorted by their impact on\r\n            // microaccuracy.\r\n            var sortedIndices = permutationMetrics\r\n                .Select((metrics, index) => new { index, metrics.MicroAccuracy })\r\n                .OrderByDescending(feature => Math.Abs(feature.MicroAccuracy.Mean))\r\n                .Select(feature => feature.index);\r\n\r\n            Console.WriteLine(\"Feature\\tChange in MicroAccuracy\\t95% Confidence in \"\r\n                + \"the Mean Change in MicroAccuracy\");\r\n\r\n            var microAccuracy = permutationMetrics.Select(x => x.MicroAccuracy)\r\n                .ToArray();\r\n\r\n            foreach (int i in sortedIndices)\r\n            {\r\n                Console.WriteLine(\"{0}\\t{1:G4}\\t{2:G4}\",\r\n                    featureColumns[i],\r\n                    microAccuracy[i].Mean,\r\n                    1.96 * microAccuracy[i].StandardError);\r\n            }\r\n```\r\nCode builds but also fails at PFI_model definition: _System.ArgumentOutOfRangeException\r\n  HResult=0x80131502\r\n  Message=Schema mismatch for input column 'Features': expected vector or scalar of Single or Double, got Vector<String> \r\n  Source=Microsoft.ML.Data\r\n  StackTrace:\r\n   at Microsoft.ML.Transforms.NormalizingEstimator.GetOutputSchema(SchemaShape inputSchema)\r\n   at Microsoft.ML.Data.EstimatorChain`1.GetOutputSchema(SchemaShape inputSchema)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)_","Url":"https://github.com/dotnet/machinelearning/issues/5247","RelatedDescription":"Closed issue \"PermutationFeatureImportance not working with AutoML API\" (#5247)"},{"Id":"640703745","IsPullRequest":true,"CreatedAt":"2020-06-18T00:17:48","Actor":"wangyems","Number":"5245","RawContent":null,"Title":"Fix sample tests results preview","State":"closed","Body":"Since LoadFeaturizedAdultDataset() has been modified by https://github.com/dotnet/machinelearning/commit/9244e683d85f1c1c16eef4fcd2a5af42d56ac048#diff-eb95ea0c54ebcf8d695d8d73d5849b0cR138, any other sample tests that references LoadFeaturizedAdultDataset() will result in a different score. Change score preview to match.\r\nAlso remove unnecessary spaces.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5245","RelatedDescription":"Closed or merged PR \"Fix sample tests results preview\" (#5245)"},{"Id":"640777004","IsPullRequest":true,"CreatedAt":"2020-06-17T22:18:11","Actor":"Lynx1820","Number":"5246","RawContent":null,"Title":"Enabling custom groupId column in the Ranking AutoML experiment","State":"open","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5246","RelatedDescription":"Open PR \"Enabling custom groupId column in the Ranking AutoML experiment\" (#5246)"},{"Id":"637324717","IsPullRequest":true,"CreatedAt":"2020-06-17T20:52:47","Actor":"Lynx1820","Number":"5233","RawContent":null,"Title":"Adding option for custom groupId column name","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5233","RelatedDescription":"Closed or merged PR \"Adding option for custom groupId column name\" (#5233)"},{"Id":"640695418","IsPullRequest":true,"CreatedAt":"2020-06-17T19:43:29","Actor":"wangyems","Number":"5244","RawContent":null,"Title":"Fix sample test results ","State":"closed","Body":"Since LoadFeaturizedAdultDataset() has been modified by [https://github.com/dotnet/machinelearning/commit/9244e683d85f1c1c16eef4fcd2a5af42d56ac048#diff-eb95ea0c54ebcf8d695d8d73d5849b0cR138](url), any other sample tests that references LoadFeaturizedAdultDataset() will result in a different score. Change score preview to match.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5244","RelatedDescription":"Closed or merged PR \"Fix sample test results \" (#5244)"},{"Id":"637252975","IsPullRequest":true,"CreatedAt":"2020-06-17T04:56:46","Actor":"wangyems","Number":"5232","RawContent":null,"Title":"Improve exception msg by adding column name","State":"closed","Body":"For the issue https://github.com/dotnet/machinelearning/issues/5211\r\n\r\nIn this case, when user choose a big dataset and one or more columns have more than expected unique values, the crossvalidate() method throws overflow but it's difficult for users to realize which column in the dataset cause the problem. If we append column name to the overflow message, user can quickly find where goes wrong.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5232","RelatedDescription":"Closed or merged PR \"Improve exception msg by adding column name\" (#5232)"},{"Id":"639850720","IsPullRequest":true,"CreatedAt":"2020-06-16T17:36:09","Actor":"michaelgsharp","Number":"5243","RawContent":null,"Title":"Changed default NGrams for FeaturizerText from 1 to 2","State":"open","Body":"This fixes #4749. All the other changes in that issue have been done, this was the only one that was left, which will now allow us to close this issue.\r\n\r\n@justinormont can you just verify that is the correct NGramLength to change? Based on the issue, and the other linked issue, this is what I believe is the correct spot. The standard error does go down in the tests with this, which is the expected behavior based on the linked issues.","Url":"https://github.com/dotnet/machinelearning/pull/5243","RelatedDescription":"Open PR \"Changed default NGrams for FeaturizerText from 1 to 2\" (#5243)"},{"Id":"637477786","IsPullRequest":true,"CreatedAt":"2020-06-16T16:38:12","Actor":"michaelgsharp","Number":"5234","RawContent":null,"Title":"Fixes DateTimeTransformer file path issue for NimbusML","State":"closed","Body":"Fixes #5220. This is a regression issue that was resolved before, unless the fix only stayed in the private branch for the featurizers.","Url":"https://github.com/dotnet/machinelearning/pull/5234","RelatedDescription":"Closed or merged PR \"Fixes DateTimeTransformer file path issue for NimbusML\" (#5234)"},{"Id":"639304492","IsPullRequest":false,"CreatedAt":"2020-06-16T01:38:06","Actor":"frank-dong-ms","Number":"5242","RawContent":null,"Title":"TensorFlowTransformCifar test crash","State":"open","Body":"Test crash: https://dev.azure.com/dnceng/public/_build/results?buildId=684811&view=logs&j=d1af5113-e574-5a31-f7f3-02fc40ea7b26&t=b03e2d69-ce1a-5899-6643-e9b6085777b9&s=d654deb9-056d-50a2-1717-90c08683d50a\r\n\r\nerror message: \r\nThe active Test Run was aborted because the host process exited unexpectedly while executing following test(s):\r\nMicrosoft.ML.Scenarios.TensorFlowScenariosTests.TensorFlowTransformCifar\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5242","RelatedDescription":"Open issue \"TensorFlowTransformCifar test crash\" (#5242)"},{"Id":"638113689","IsPullRequest":true,"CreatedAt":"2020-06-13T18:59:23","Actor":"Nishikoh","Number":"5239","RawContent":null,"Title":"Fix comment in NormalizeRobustScaling","State":"closed","Body":"Fixes #5238","Url":"https://github.com/dotnet/machinelearning/pull/5239","RelatedDescription":"Closed or merged PR \"Fix comment in NormalizeRobustScaling\" (#5239)"},{"Id":"638097545","IsPullRequest":false,"CreatedAt":"2020-06-13T18:59:23","Actor":"justinormont","Number":"5238","RawContent":null,"Title":"Spell check in NormalizeRobustScaling","State":"closed","Body":"These should say, \"Whether to center the data around 0 by removing the median. Defaults to true.\"\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/207d466f94442ed58509e9f81dd6ec2a8ed193e7/src/Microsoft.ML.Transforms/NormalizerCatalog.cs#L366\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/207d466f94442ed58509e9f81dd6ec2a8ed193e7/src/Microsoft.ML.Transforms/NormalizerCatalog.cs#L366\r\n\r\nGood first PR for any community members; no need to ask first. In the PR description, add \"fixes #5238\", to auto-close this issue.","Url":"https://github.com/dotnet/machinelearning/issues/5238","RelatedDescription":"Closed issue \"Spell check in NormalizeRobustScaling\" (#5238)"},{"Id":"637972137","IsPullRequest":false,"CreatedAt":"2020-06-13T01:57:40","Actor":"CBrauer","Number":"5237","RawContent":null,"Title":"Problem with ML.NET RobustScaler","State":"closed","Body":"### System information\r\n\r\n- Windows 10 Enterprise 10.0 18363 Built 18363\r\n- Visual Studio 2019, build 16.6.2\r\n\r\n### Source code\r\n- I have put my reproduceable project on GitHUb at: https://github.com/CBrauer/Test_RobustScaler\r\n\r\n### Program output. Notice that RobustScaler produced an extra column for \"vwapGain\"\r\n\r\n![image](https://user-images.githubusercontent.com/1317234/84540742-e4b97a80-acaa-11ea-9c8c-8f1504f7a2a6.png)\r\n\r\n### Source code\r\nMy test program looks like:\r\n```\r\nnamespace Test_RobustScaller {\r\n  internal class Program {\r\n    #region MyHead\r\n    public static void MyHead(IDataView train, int numRows) {\r\n      var trainPreview = train.Preview(maxRows: numRows);\r\n      var nColumns = trainPreview.ColumnView.Length;\r\n      var maxCharInHeaderName = 0;\r\n      for (var k = 0; k < nColumns; k++) {\r\n        var columnName = trainPreview.Schema[k].Name;\r\n        maxCharInHeaderName = Math.Max(maxCharInHeaderName, columnName.Length);\r\n      }\r\n      var nSpaces = new int[nColumns];\r\n      for (var k = 0; k < nColumns; k++) {\r\n        var columnName = trainPreview.Schema[k].Name;\r\n        for (var j = 0; j < maxCharInHeaderName - columnName.Length + 1; j++) {\r\n          Console.Write(\" \");\r\n        }\r\n        Console.Write(\"{0}\", columnName);\r\n        nSpaces[k] = maxCharInHeaderName - columnName.Length + 1;\r\n      }\r\n      Console.Write(\"\\n\");\r\n\r\n      foreach (var row in trainPreview.RowView) {\r\n        for (var k = 0; k < row.Values.Length; k++) {\r\n          var field = string.Format(\"{0}\", row.Values[k].Value);\r\n          var nSpace = maxCharInHeaderName - field.Length + 1;\r\n          for (var j = 0; j < nSpace; j++) {\r\n            Console.Write(\" \");\r\n          }\r\n          Console.Write(row.Values[k].Value);\r\n        }\r\n        Console.Write(\"\\n\");\r\n      }\r\n\r\n      Console.Write(\"\\n\");\r\n    }\r\n    #endregion\r\n    public static void Run() {\r\n      var mlContext = new MLContext(seed: 1);\r\n\r\n      var df_full = DataFrame.LoadCsv(\"../../../data/model.csv\");\r\n\r\n      var header_names = new List<string> {\r\n        \"BoxRatio\", \"Thrust\", \"Acceleration\", \"Velocity\",\r\n        \"OnBalRun\", \"vwapGain\", \"Altitude\"\r\n      };\r\n      var nColumns = header_names.Count;\r\n      var df_columns = new DataFrameColumn[nColumns];\r\n      for (var k = 0; k < nColumns; k++) {\r\n        var name = header_names[k];\r\n        df_columns[k] = df_full.Columns[name];\r\n      }\r\n\r\n      var df = new DataFrame(df_columns);\r\n      Console.WriteLine(\"Before transform:\");\r\n      Console.WriteLine(df.Head(5));\r\n\r\n      var pipeline = mlContext.Transforms.RobustScaler(\"vwapGain\");\r\n      var model = pipeline.Fit(df);\r\n      var transformed = model.Transform(df);\r\n      Console.WriteLine(\"After Transform:\");\r\n      MyHead(transformed, 5);\r\n    }\r\n\r\n    static void Main() {\r\n      Run();\r\n      Console.WriteLine(\"Hit return to exit.\");\r\n      Console.ReadKey();\r\n    }\r\n  }\r\n}\r\n```\r\nCharles","Url":"https://github.com/dotnet/machinelearning/issues/5237","RelatedDescription":"Closed issue \"Problem with ML.NET RobustScaler\" (#5237)"},{"Id":"637880186","IsPullRequest":false,"CreatedAt":"2020-06-12T20:00:27","Actor":"JakeRadMSFT","Number":"5235","RawContent":null,"Title":"AutoML - Better error message && stop inferring type for label column in regression && classification","State":"closed","Body":"I have a dataset with sparse data and I can't perform value prediction. \r\n\r\nCan't upload dataset but I can share screen - Come Chat!","Url":"https://github.com/dotnet/machinelearning/issues/5235","RelatedDescription":"Closed issue \"AutoML - Better error message && stop inferring type for label column in regression && classification\" (#5235)"},{"Id":"637960499","IsPullRequest":true,"CreatedAt":"2020-06-12T19:27:54","Actor":"klausmh","Number":"5236","RawContent":null,"Title":"Returning multiple dimensions in RCA for anomaly detection","State":"open","Body":"This PR adds the ability to return multiple dimensions in Root Cause Analysis for anomaly detection.","Url":"https://github.com/dotnet/machinelearning/pull/5236","RelatedDescription":"Open PR \"Returning multiple dimensions in RCA for anomaly detection\" (#5236)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-06-29T05:30:35.8399015Z","RunDurationInMilliseconds":658}