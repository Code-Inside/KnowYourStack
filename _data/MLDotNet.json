{"Data":{"GitHub":{"Issues":[{"Id":"1178858366","IsPullRequest":false,"CreatedAt":"2022-03-24T02:20:16","Actor":"ness001","Number":"6138","RawContent":null,"Title":"Open question: does the dataframe no longer supported in the current version of machinelearning sdk?","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n- **What happened?**\r\n- **What did you expect?**\r\nI couldn't find the reference under Microsoft.dataAnalytics in the reference page. And, the code base is not changed since 21 months ago.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6138","RelatedDescription":"Open issue \"Open question: does the dataframe no longer supported in the current version of machinelearning sdk?\" (#6138)"},{"Id":"1178829505","IsPullRequest":true,"CreatedAt":"2022-03-24T01:21:40","Actor":"ericstj","Number":"6137","RawContent":null,"Title":"Remove checked in guardian config files","State":"open","Body":"We'll instead use the arcade integration that generates these.","Url":"https://github.com/dotnet/machinelearning/pull/6137","RelatedDescription":"Open PR \"Remove checked in guardian config files\" (#6137)"},{"Id":"1177445397","IsPullRequest":false,"CreatedAt":"2022-03-23T00:26:21","Actor":"chrisxfire","Number":"6136","RawContent":null,"Title":"Typo under description","State":"open","Body":"Typo under the description: _Returns a containing_.  Returns a _what?_\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: d2dc315d-96d7-e54f-6e90-fec6ed09481c\r\n* Version Independent ID: ab5d0a68-35d6-ef5f-786e-d89e7fee8034\r\n* Content: [DataFrameColumn.Info Method (Microsoft.Data.Analysis)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.data.analysis.dataframecolumn.info?view=ml-dotnet-preview)\r\n* Content Source: [dotnet/xml/Microsoft.Data.Analysis/DataFrameColumn.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.Data.Analysis/DataFrameColumn.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/6136","RelatedDescription":"Open issue \"Typo under description\" (#6136)"},{"Id":"1175312938","IsPullRequest":true,"CreatedAt":"2022-03-22T19:34:23","Actor":"dotnet-maestro[bot]","Number":"6135","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 97926d79-6b8b-4d32-c8db-08d9d479971c\r\n- **Build**: 20220318.2\r\n- **Date Produced**: March 18, 2022 11:42:47 PM UTC\r\n- **Commit**: bafd55901b50d6fc3507c8ed96a7777fcca1796f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22168.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22157.6 to 7.0.0-beta.22168.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/81001b4...bafd559\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6135","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6135)"},{"Id":"1174559690","IsPullRequest":false,"CreatedAt":"2022-03-20T14:05:08","Actor":"torronen","Number":"6134","RawContent":null,"Title":"Q: How to concatenate two DataViews?","State":"open","Body":"I have:\r\n\r\n- IDataView trainingData\r\n- IDataView testData\r\n\r\nI want to combine trainingData and testData\r\n`IDataView combinedData = trainingData + testData;`\r\n\r\nFinally, I want to retrain the model with it.\r\n**Q1. Is there are way to combine multiple IDataViews without converting to DataFrame?** \r\n\r\n**Q2. What is the syntax for combining IDataViews converted as DataFrame. I am trying to do something like this:**\r\n```\r\nDataFrame dfTrain = trainingData.ToDataFrame(-1);\r\nDataFrame df2 = testdata.ToDataFrame(-1);\r\ndf.Add(df2.Rows);\r\n```\r\n\r\n\r\nThe [sample in machinelearning-samples](https://github.com/dotnet/machinelearning-samples/blob/ba98d520e67a2840a3c50410885a24f361632567/samples/csharp/getting-started/AdvancedExperiment_AutoML/AdvancedTaxiFarePrediction/Program.cs#L194) re-reads the data from a file source. However, it the data might not always be in a file, or the big may be very big\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6134","RelatedDescription":"Open issue \"Q: How to concatenate two DataViews?\" (#6134)"},{"Id":"1171434633","IsPullRequest":true,"CreatedAt":"2022-03-18T21:33:57","Actor":"LittleLittleCloud","Number":"6132","RawContent":null,"Title":"add doc to search space and make it public","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6132","RelatedDescription":"Closed or merged PR \"add doc to search space and make it public\" (#6132)"},{"Id":"1172071048","IsPullRequest":false,"CreatedAt":"2022-03-17T08:25:13","Actor":"olavt","Number":"6133","RawContent":null,"Title":"Microsoft.Data.Analysis.DataFrame Join should produce a result with a single joined column","State":"open","Body":"Given two DataFame objects it should be easy to perform a simple outer join to achieve these results:\r\n\r\nDataFrame1:\r\nDate | ClosePrice\r\n-- | --\r\n3/1/2022   12:00:00 AM | 10.5\r\n3/2/2022   12:00:00 AM | 12.4\r\n3/3/2022   12:00:00 AM | 11.3\r\n\r\nDataFrame2:\r\nDate | ShortPercent\r\n-- | --\r\n3/1/2022   12:00:00 AM | 2.34\r\n3/2/2022   12:00:00 AM | 2.36\r\n3/3/2022   12:00:00 AM | 3.01\r\n3/4/2022   12:00:00 AM | 3.04\r\n\r\nResulting DataFrame:\r\nDate | ClosePrice | ShortPercent\r\n-- | -- | --\r\n3/1/2022   12:00:00 AM | 10.5 | 2.34\r\n3/2/2022   12:00:00 AM | 12.4 | 2.36\r\n3/3/2022   12:00:00 AM | 11.3 | 3.01\r\n3/4/2022   12:00:00 AM | null | 3.04\r\n\r\nThis does not seem to be possible with the current Merge or Join methods, since they end up with two columns for Date (Date_left and Date_right) in the resulting DataFrame and combining those to a single column seems complex and error prone.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6133","RelatedDescription":"Open issue \"Microsoft.Data.Analysis.DataFrame Join should produce a result with a single joined column\" (#6133)"},{"Id":"1171421146","IsPullRequest":true,"CreatedAt":"2022-03-16T22:21:44","Actor":"jeffhandley","Number":"6131","RawContent":null,"Title":"Update fabricbot config to incorporate more issue/pr tasks and reflect area pod board name change","State":"closed","Body":"This includes changes to the fabricbot config for:\r\n\r\n1. [Label needs-author-action is not getting automatically applied/removed in machinelearning · Issue #1 · dotnet/fabricbot-config](https://github.com/dotnet/fabricbot-config/issues/1)\r\n2. [Label untriaged should get automatically removed when an issue is triaged · Issue #2 · dotnet/fabricbot-config](https://github.com/dotnet/fabricbot-config/issues/2)\r\n3. [Archived issues are not resurrected into Needs Triage column · Issue #4 · dotnet/fabricbot-config](https://github.com/dotnet/fabricbot-config/issues/4)\r\n\r\nThere were a bunch of fabricbot tasks configured in the dotnet/runtime repo related to https://github.com/dotnet/machinelearning/labels/needs-author-action https://github.com/dotnet/machinelearning/labels/needs-further-triage and https://github.com/dotnet/machinelearning/labels/no-recent-activity. Those tasks are now scripted into dotnet/fabric-bot config and generated into the fabricbot config in this repository.\r\n\r\nWe've also renamed the area pod boards to reflect @dakersnar joining the area pod, and the config needs to compensate for that.\r\n\r\n/cc @tannergooding @ericstj ","Url":"https://github.com/dotnet/machinelearning/pull/6131","RelatedDescription":"Closed or merged PR \"Update fabricbot config to incorporate more issue/pr tasks and reflect area pod board name change\" (#6131)"},{"Id":"1170724746","IsPullRequest":false,"CreatedAt":"2022-03-16T08:59:37","Actor":"cvixxt","Number":"6130","RawContent":null,"Title":"Use Custom Vision to output .ONNX, the result on the local side is different from the result on the cloud","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version: ML.NET v1.7.1\r\n - .NET Version: .NETCore 3.1\r\n\r\n**Describe the bug**\r\nUse Custom Vision to output .ONNX, the result on the local side is different from the result on the cloud\r\n\r\n**To Reproduce**\r\n1. Using Onnx Object Detection App (from dotnet/machine learning/sample)\r\n2. Delete TinyYolo_model.onnx, put the onnx.zip downloaded by Custom Vision in the corresponding path to read the Model file.\r\n3. Under the method of DetectObjectsUsingModel, the result of  \"var boundingBoxes \" is different from the result on cloud.\r\n\r\n**Expected behavior**\r\nAs expected, it should be the same as the result on the cloud.\r\n\r\n**Screenshots, Code, Sample Projects**\r\n1. I confirmed that my output model is None x None2 x 13 x 13,  where None = variable number. Fg.1 \r\n![image](https://user-images.githubusercontent.com/52907433/158550268-34890bbd-816a-4c39-81ef-e55c862c7d9e.png)\r\n\r\n2. I confirmed that I have 6 labels and will return 5 parameters, plus 5 anchor boxes, so the output will be (6+5)*5 = 55.\r\n\r\n3. In the code section, I also confirmed that my Label return array is 55x1x13x13 = btye[9295].  ->Fg.2\r\n![image](https://user-images.githubusercontent.com/52907433/158551115-6e683a80-ab68-47c1-af48-4b3a1b8f0a28.png)\r\n\r\n4. After reading the same image, I return a set of corresponding labels. Fg.3\r\n![image](https://user-images.githubusercontent.com/52907433/158552225-80ad8360-23c5-473c-8e32-a71c81561ab1.png)\r\n\r\n5. When I used Custom Vision's Web API to make predictions, I found that the results for the same image were completely inconsistent with the results on the local side. Fg.4\r\n![image](https://user-images.githubusercontent.com/52907433/158552706-8c5568ee-2f35-4808-b320-90462cec2884.png)\r\n\r\n6.The Label output on the local side is \"綠膠囊\" (\"means green capsule\"), while the result on the Web API is \"橘膠囊\" (\"means orange capsule\").\r\n\r\n7.Not sure what I'm doing wrong, has anyone encountered a similar problem?\r\n\r\nThank you for reading this question.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6130","RelatedDescription":"Open issue \"Use Custom Vision to output .ONNX, the result on the local side is different from the result on the cloud\" (#6130)"},{"Id":"1168884700","IsPullRequest":false,"CreatedAt":"2022-03-14T20:44:39","Actor":"olavt","Number":"6129","RawContent":null,"Title":"Microsoft.Data.Analysis DataFrameColumns.SetName method is weird","State":"open","Body":".Net Core 3.1\r\nMicrosoft.Data.Analysis Nuget package version: 0.19.1\r\n\r\nThis would be the logical way to call the method:\r\n\r\ndataFrame.Columns[\"Date_left\"].SetName(\"Date\");\r\n\r\nBut, this does not result in the column being properly renamed.\r\n\r\nThe method needs to be called like this in order to work properly:\r\n\r\ndataFrame.Columns[\"Date_left\"].SetName(\"Date\", dataFrame);\r\n\r\nHere's a program to reproduce the issue:\r\n\r\nusing Microsoft.Data.Analysis;\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace TestDataFRame\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            DateTime?[] dates1 = { new DateTime(2022, 03, 01), new DateTime(2022, 03, 02), new DateTime(2022, 03, 03) };\r\n            double?[] closePrices = { 10.5, 12.4, 11.3 };\r\n\r\n            DateTime?[] dates2 = { new DateTime(2022, 03, 01), new DateTime(2022, 03, 02), new DateTime(2022, 03, 03), new DateTime(2022, 03, 04) };\r\n            double[] shortPercentages = { 2.34, 2.36, 3.01, 3.04 };\r\n\r\n            DataFrame dataFrame1 = new DataFrame();\r\n            dataFrame1.Columns.Add(new PrimitiveDataFrameColumn<DateTime>(\"Date\", dates1));\r\n            dataFrame1.Columns.Add(new DoubleDataFrameColumn(\"ClosePrice\", closePrices));\r\n\r\n            var numbers1 = dataFrame1.Columns.GetDoubleColumn(\"ClosePrice\").ToArray();\r\n\r\n            DataFrame dataFrame2 = new DataFrame();\r\n            dataFrame2.Columns.Add(new PrimitiveDataFrameColumn<DateTime>(\"Date\", dates2));\r\n            dataFrame2.Columns.Add(new DoubleDataFrameColumn(\"ShortPercentage\", shortPercentages));\r\n\r\n            var numbers2 = dataFrame2.Columns.GetDoubleColumn(\"ShortPercentage\").ToArray();\r\n\r\n            DataFrame dataFrame = dataFrame1.Merge<DateTime>(dataFrame2, \"Date\", \"Date\", joinAlgorithm: JoinAlgorithm.Left);\r\n            dataFrame.Columns[\"Date_left\"].SetName(\"Date\");\r\n\r\n            var dates = dataFrame.Columns.GetPrimitiveColumn<DateTime>(\"Date\").ToArray();\r\n        }\r\n    }\r\n}\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6129","RelatedDescription":"Open issue \"Microsoft.Data.Analysis DataFrameColumns.SetName method is weird\" (#6129)"},{"Id":"1168742049","IsPullRequest":false,"CreatedAt":"2022-03-14T18:15:16","Actor":"olavt","Number":"6128","RawContent":null,"Title":"Microsoft.Data.Analysis DataFrame.Join infinite loop","State":"open","Body":".Net Core 3.1\r\nMicrosoft.Data.Analysis Nuget package version: 0.19.1\r\n\r\nThis code results in a hang in DataFrame.Join:\r\n\r\nusing Microsoft.Data.Analysis;\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace TestDataFRame\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            DateTime?[] dates1 = { new DateTime(2022, 03, 01), new DateTime(2022, 03, 02), new DateTime(2022, 03, 03) };\r\n            double?[] closePrices = { 10.5, 12.4, 11.3 };\r\n\r\n            DateTime?[] dates2 = { new DateTime(2022, 03, 01), new DateTime(2022, 03, 02), new DateTime(2022, 03, 03), new DateTime(2022, 03, 04) };\r\n            double[] shortPercentages = { 2.34, 2.36, 3.01, 3.04 };\r\n\r\n            DataFrame dataFrame1 = new DataFrame();\r\n            dataFrame1.Columns.Add(new PrimitiveDataFrameColumn<DateTime>(\"Date\", dates1));\r\n            dataFrame1.Columns.Add(new DoubleDataFrameColumn(\"ClosePrice\", closePrices));\r\n\r\n            var numbers1 = dataFrame1.Columns.GetDoubleColumn(\"ClosePrice\").ToArray();\r\n\r\n            DataFrame dataFrame2 = new DataFrame();\r\n            dataFrame2.Columns.Add(new PrimitiveDataFrameColumn<DateTime>(\"Date\", dates2));\r\n            dataFrame2.Columns.Add(new DoubleDataFrameColumn(\"ShortPercentage\", shortPercentages));\r\n\r\n            var numbers2 = dataFrame2.Columns.GetDoubleColumn(\"ShortPercentage\").ToArray();\r\n\r\n            DataFrame dataFrame = dataFrame1.Join(dataFrame2, \"Date\", \"Date\", joinAlgorithm: JoinAlgorithm.FullOuter);\r\n        }\r\n    }\r\n}\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6128","RelatedDescription":"Open issue \"Microsoft.Data.Analysis DataFrame.Join infinite loop\" (#6128)"},{"Id":"1168311530","IsPullRequest":true,"CreatedAt":"2022-03-14T16:53:03","Actor":"dotnet-maestro[bot]","Number":"6126","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 97926d79-6b8b-4d32-c8db-08d9d479971c\r\n- **Build**: 20220307.6\r\n- **Date Produced**: March 8, 2022 12:36:44 AM UTC\r\n- **Commit**: 81001b45bd54f9223905bf55f6ed0125273580fa\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 7.0.0-beta.22154.3 to 7.0.0-beta.22157.6][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22154.3 to 7.0.0-beta.22157.6][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 7.0.0-beta.22154.3 to 7.0.0-beta.22157.6][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 7.0.0-beta.22154.3 to 7.0.0-beta.22157.6][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22154.3 to 7.0.0-beta.22157.6][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/8ed47fc...81001b4\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6126","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6126)"},{"Id":"1168515787","IsPullRequest":false,"CreatedAt":"2022-03-14T15:08:05","Actor":"olavt","Number":"6127","RawContent":null,"Title":"DataFrame merge results in column datatype problem","State":"open","Body":".Net Core 3.1\r\nMicrosoft.Data.Analysis Nuget package version: 0.19.1\r\n\r\nThe last line of the following program crashes with the exception:\r\n\r\nSystem.ArgumentException: 'Cannot cast column holding System.Double values to type System.Double'\r\n\r\nusing Microsoft.Data.Analysis;\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace TestDataFRame\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            DateTime?[] dates1 = { new DateTime(2022, 03, 01), new DateTime(2022, 03, 02), new DateTime(2022, 03, 03) };\r\n            double?[] closePrices = { 10.5, 12.4, 11.3 };\r\n\r\n            DateTime?[] dates2 = { new DateTime(2022, 03, 01), new DateTime(2022, 03, 02), new DateTime(2022, 03, 03) };\r\n            double[] shortPercentages = { 2.34, 2.36, 3.01 };\r\n\r\n            DataFrame dataFrame1 = new DataFrame();\r\n            dataFrame1.Columns.Add(new PrimitiveDataFrameColumn<DateTime>(\"Date\", dates1));\r\n            dataFrame1.Columns.Add(new DoubleDataFrameColumn(\"ClosePrice\", closePrices));\r\n\r\n            var numbers1 = dataFrame1.Columns.GetDoubleColumn(\"ClosePrice\").ToArray();\r\n\r\n            DataFrame dataFrame2 = new DataFrame();\r\n            dataFrame2.Columns.Add(new PrimitiveDataFrameColumn<DateTime>(\"Date\", dates1));\r\n            dataFrame2.Columns.Add(new DoubleDataFrameColumn(\"ShortPercentage\", shortPercentages));\r\n\r\n            var numbers2 = dataFrame2.Columns.GetDoubleColumn(\"ShortPercentage\").ToArray();\r\n\r\n            DataFrame dataFrame = dataFrame1.Merge<DateTime>(dataFrame2, \"Date\", \"Date\", joinAlgorithm: JoinAlgorithm.Left);\r\n            var numbers = dataFrame.Columns.GetDoubleColumn(\"ClosePrice\").ToArray();\r\n        }\r\n    }\r\n}\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6127","RelatedDescription":"Open issue \"DataFrame merge results in column datatype problem\" (#6127)"},{"Id":"1166960175","IsPullRequest":true,"CreatedAt":"2022-03-11T22:59:26","Actor":"LittleLittleCloud","Number":"6125","RawContent":null,"Title":"Generate built-in SweepableEstimator classes for all available estimators","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n#5993 \r\n\r\n## What does this PR do\r\n\r\nThis PR includes a source generator which generates `SweepableEstimator` class for all built-in estimators that defined in [trainer-estimator.json](https://github.com/LittleLittleCloud/machinelearning/blob/u/xiaoyun/addRuntime2/src/Microsoft.ML.AutoML/CodeGen/trainer-estimators.json) and [transformer-estimator.json](https://github.com/LittleLittleCloud/machinelearning/blob/u/xiaoyun/addRuntime2/src/Microsoft.ML.AutoML/CodeGen/transformer-estimators.json)\r\n\r\nOne example class looks like (kindly notice that the generated class is a partial class, and we manually code the rest of this class) \r\n``` csharp\r\ninternal partial class LightGbmBinary : SweepableEstimator<LgbmOption>\r\n{\r\n        public LightGbmBinary(LgbmOption defaultOption, SearchSpace<LgbmOption> searchSpace = null)\r\n        {\r\n            this.TParameter = defaultOption;\r\n            this.SearchSpace = searchSpace;\r\n            this.EstimatorType = EstimatorType.LightGbmBinary;\r\n        }\r\n\r\n        internal LightGbmBinary()\r\n        {\r\n            this.EstimatorType = EstimatorType.LightGbmBinary;\r\n            this.TParameter = new LgbmOption();\r\n        }\r\n    \r\n        internal override IEnumerable<string> CSharpUsingStatements \r\n        {\r\n            get => new string[] {\"using Microsoft.ML;\", \"using Microsoft.ML.Trainers;\", \"using Microsoft.ML.Trainers.LightGbm;\", };\r\n        }\r\n\r\n        internal override IEnumerable<string> NugetDependencies\r\n        {\r\n            get => new string[] {\"Microsoft.ML\", \"Microsoft.ML.LightGbm\", };\r\n        }\r\n\r\n        internal override string FunctionName \r\n        {\r\n            get => \"BinaryClassification.Trainers.LightGbm\";\r\n        }\r\n}\r\n``` \r\n\r\nThe other half, which is manually coded, looks like this\r\n```csharp\r\ninternal partial class LightGbmBinary\r\n{\r\n        public override IEstimator<ITransformer> BuildFromOption(MLContext context, LgbmOption param)\r\n        {\r\n            var option = new LightGbmBinaryTrainer.Options()\r\n            {\r\n                NumberOfLeaves = param.NumberOfLeaves,\r\n                NumberOfIterations = param.NumberOfTrees,\r\n                MinimumExampleCountPerLeaf = param.MinimumExampleCountPerLeaf,\r\n                LearningRate = param.LearningRate,\r\n                NumberOfThreads = AutoMlUtils.GetNumberOfThreadFromEnvrionment(),\r\n                LabelColumnName = param.LabelColumnName,\r\n                FeatureColumnName = param.FeatureColumnName,\r\n                ExampleWeightColumnName = param.ExampleWeightColumnName,\r\n                Booster = new GradientBooster.Options()\r\n                {\r\n                    SubsampleFraction = param.SubsampleFraction,\r\n                    FeatureFraction = param.FeatureFraction,\r\n                    L1Regularization = param.L1Regularization,\r\n                    L2Regularization = param.L2Regularization,\r\n                },\r\n                MaximumBinCountPerFeature = param.MaximumBinCountPerFeature,\r\n            };\r\n\r\n            return context.BinaryClassification.Trainers.LightGbm(option);\r\n        }\r\n}\r\n```\r\n\r\n## Why create this bunch of `SweepableEstimator` classes instead of just having a factory class for all estimators\r\nThis is because of \r\n- Avoiding having a giant factory class.\r\n- the generated `SweepableEstimator` class includes useful information for modelbuilder to reconstruct source code training pipeline ( such as `UsingStatement`/`NugetDependency` )\r\n\r\n## Will those generated classes be internal only\r\n\r\nThat's the plan, external users will have to use `CreateSweepableEstimator` if they want to create a sweepable estimator.","Url":"https://github.com/dotnet/machinelearning/pull/6125","RelatedDescription":"Open PR \"Generate built-in SweepableEstimator classes for all available estimators\" (#6125)"},{"Id":"1157792092","IsPullRequest":true,"CreatedAt":"2022-03-11T22:12:55","Actor":"LittleLittleCloud","Number":"6108","RawContent":null,"Title":"Add serializble pipeline && titanic example for sweepable api","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n\r\n#5992 ","Url":"https://github.com/dotnet/machinelearning/pull/6108","RelatedDescription":"Closed or merged PR \"Add serializble pipeline && titanic example for sweepable api\" (#6108)"},{"Id":"1166590834","IsPullRequest":false,"CreatedAt":"2022-03-11T16:02:13","Actor":"zweistein22","Number":"6124","RawContent":null,"Title":"mlContext.Data.LoadFromEnumerable    error if data is not known at compile time?","State":"open","Body":"Hello, \r\n\r\nI am trying to set up a simple in memory text featurization pipeline.\r\n\r\nAs long as my sample data is known at compile time all works fine and the feature vectors are calculated correctly,\r\nAs soon as I try to create  the sample data at run time all featurevectors always result 0.\r\n\r\nActually all microsoft examples I found similar to this code  are fixed values and known at compile time.\r\n\r\nI attach my pipeline code below,  is this a bug, a behaviour or some error in my logic?  How to resolve the issue ?\r\n\r\nBest regards \r\nAndreas\r\n` \r\n```\r\npublic class OnlyText\r\n{\r\n        public string Text { get; set;  }\r\n}\r\n```\r\n```\r\n\r\n   // ot[]  is an array of strings generated  by code \r\n  \r\n\r\n    var samples = new Rokin.Data.OnlyText[]{\r\n      new Rokin.Data.OnlyText(ot[0]),\r\n       new Rokin.Data.OnlyText(ot[1]),\r\n//   the  var features below is all zeros \r\n// unless I comment above and uncomment below (making data known at compile time)\r\n  //    new Rokin.Data.OnlyText(\"aa bb\"),\r\n  //     new Rokin.Data.OnlyText(\"cc dd\"),\r\n\r\n    };\r\nvar mlContext = new MLContext();\r\n    var dataview = mlContext.Data.LoadFromEnumerable<Rokin.Data.OnlyText>(samples);\r\n    var featurizeTextOptions = new TextFeaturizingEstimator.Options()\r\n    {\r\n        OutputTokensColumnName = \"OutputTokens\",\r\n        KeepDiacritics = true,\r\n        KeepPunctuations = false,\r\n        KeepNumbers = true,\r\n        CaseMode = TextNormalizingEstimator.CaseMode.None,\r\n        Norm = TextFeaturizingEstimator.NormFunction.L2,\r\n        WordFeatureExtractor = new WordBagEstimator.Options()\r\n        {\r\n            NgramLength = 2,\r\n            MaximumNgramsCount = new int[] { 50 },\r\n            UseAllLengths = true, // Produce both unigrams and bigrams\r\n            Weighting = NgramExtractingEstimator.WeightingCriteria.TfIdf, // TF-IDF\r\n        },\r\n        // chargram options\r\n        CharFeatureExtractor = null /*new WordBagEstimator.Options()\r\n                {\r\n                    NgramLength = 3,\r\n                    UseAllLengths = false, // Produce only tri-chargrams and not single/double characters\r\n                    Weighting = NgramExtractingEstimator.WeightingCriteria.TfIdf, // TF-IDF\r\n                }*/\r\n        ,\r\n    };\r\n    var textPipeline = mlContext.Transforms.Text.FeaturizeText(\"Features\",\r\n        featurizeTextOptions, \"Text\");\r\n    var textTransformer = textPipeline.Fit(dataview);\r\n    var predictionEngine = mlContext.Model.CreatePredictionEngine<Rokin.Data.OnlyText,\r\n        Levensthein.TransformedTextData>(textTransformer);\r\n\r\n    var features = predictionEngine.Predict(samples[0]);`\r\n\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/6124","RelatedDescription":"Open issue \"mlContext.Data.LoadFromEnumerable    error if data is not known at compile time?\" (#6124)"},{"Id":"1165114786","IsPullRequest":true,"CreatedAt":"2022-03-11T01:57:13","Actor":"colombod","Number":"6123","RawContent":null,"Title":"Load extension methods in notebook","State":"closed","Body":"After loading the extension the dll will now be loaded in the notebook environment to give the user access to new api like the `ToDataFrame` that transforms a `TabularDataResource` into a `DataFrame` instance","Url":"https://github.com/dotnet/machinelearning/pull/6123","RelatedDescription":"Closed or merged PR \"Load extension methods in notebook\" (#6123)"},{"Id":"1161425106","IsPullRequest":true,"CreatedAt":"2022-03-09T22:12:37","Actor":"dotnet-maestro[bot]","Number":"6116","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 97926d79-6b8b-4d32-c8db-08d9d479971c\r\n- **Build**: 20220304.3\r\n- **Date Produced**: March 4, 2022 11:44:49 PM UTC\r\n- **Commit**: 8ed47fcae6a5d2d40483ed81858f4ede8eab7ae2\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22154.3][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22154.3][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22154.3][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22154.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22124.4 to 7.0.0-beta.22154.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/f713662...8ed47fc\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6116","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6116)"},{"Id":"1163317040","IsPullRequest":true,"CreatedAt":"2022-03-09T20:50:19","Actor":"LittleLittleCloud","Number":"6121","RawContent":null,"Title":"make SearchSpace internal to reduce warning","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6121","RelatedDescription":"Closed or merged PR \"make SearchSpace internal to reduce warning\" (#6121)"},{"Id":"1163342989","IsPullRequest":true,"CreatedAt":"2022-03-09T00:11:45","Actor":"ericstj","Number":"6122","RawContent":null,"Title":"Update versioning to 1.7.1 / 0.19.1","State":"closed","Body":"I missed this in the initial branding change.  In other repos we only define this in Versions.props.  Probably we should consolidate this moving forward.","Url":"https://github.com/dotnet/machinelearning/pull/6122","RelatedDescription":"Closed or merged PR \"Update versioning to 1.7.1 / 0.19.1\" (#6122)"},{"Id":"1163033487","IsPullRequest":true,"CreatedAt":"2022-03-08T20:58:47","Actor":"ericstj","Number":"6119","RawContent":null,"Title":"[release/1.7] upgrade to .NET Interactive 1.0.0-beta.22103.1 (#6089)","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/6119","RelatedDescription":"Closed or merged PR \"[release/1.7] upgrade to .NET Interactive 1.0.0-beta.22103.1 (#6089)\" (#6119)"},{"Id":"1159623545","IsPullRequest":false,"CreatedAt":"2022-03-08T16:27:59","Actor":"TusharMalap","Number":"6113","RawContent":null,"Title":"Decision Tree Algorithm in ml.net  ?","State":"closed","Body":"How I can  achieve that?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6113","RelatedDescription":"Closed issue \"Decision Tree Algorithm in ml.net  ?\" (#6113)"},{"Id":"1160263896","IsPullRequest":false,"CreatedAt":"2022-03-08T16:24:53","Actor":"TusharMalap","Number":"6115","RawContent":null,"Title":"Decision Tree Algorithm ","State":"closed","Body":"is this possible in ml.net ?\r\nhow can I achieve this one.  \r\nMy unanswered questioned no. 05","Url":"https://github.com/dotnet/machinelearning/issues/6115","RelatedDescription":"Closed issue \"Decision Tree Algorithm \" (#6115)"},{"Id":"1161937332","IsPullRequest":true,"CreatedAt":"2022-03-08T05:55:48","Actor":"ericstj","Number":"6117","RawContent":null,"Title":"[release/1.7] Porting fixes for 1.7.1 release","State":"closed","Body":"Cherry-pick of main commits we wish to ship in 1.7 release.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6117","RelatedDescription":"Closed or merged PR \"[release/1.7] Porting fixes for 1.7.1 release\" (#6117)"},{"Id":"1162020426","IsPullRequest":true,"CreatedAt":"2022-03-07T22:57:52","Actor":"LittleLittleCloud","Number":"6118","RawContent":null,"Title":"Proposal: Experiment API","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nThis proposal provides an easy way to create and train an AutoML experiment using sweepable pipeline\r\n\r\n#5993 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/6118","RelatedDescription":"Open PR \"Proposal: Experiment API\" (#6118)"},{"Id":"1158842009","IsPullRequest":true,"CreatedAt":"2022-03-07T20:56:09","Actor":"ericstj","Number":"6112","RawContent":null,"Title":"[release/1.7] New build pools for official builds","State":"closed","Body":"Updating build pools for release build.\r\n\r\nCherry-pick of 94c789b180b2f08c6502e8fc59402064fb639915","Url":"https://github.com/dotnet/machinelearning/pull/6112","RelatedDescription":"Closed or merged PR \"[release/1.7] New build pools for official builds\" (#6112)"},{"Id":"1159672723","IsPullRequest":false,"CreatedAt":"2022-03-04T13:54:28","Actor":"maheshlokhande","Number":"6114","RawContent":null,"Title":"LBFGSLogisticRegression trainer probability distribution issue","State":"open","Body":"We are using LBFGSLogisticRegression trainer for binary classification which seem to be working fine but in some cases (especially with larger training data) probability distribution isn't even. We are getting probability of above 90 and near 0 for positive and negative test samples respectively even though scores for these samples are quite apart. Is there a way to calculate probability which will linearly scale as per scores generated by transform operation.","Url":"https://github.com/dotnet/machinelearning/issues/6114","RelatedDescription":"Open issue \"LBFGSLogisticRegression trainer probability distribution issue\" (#6114)"},{"Id":"1158264999","IsPullRequest":false,"CreatedAt":"2022-03-03T10:58:32","Actor":"sportbilly21","Number":"6111","RawContent":null,"Title":"ONNX with ML.Net very slow performance in GPU","State":"open","Body":"System information\r\nWindos 10 build 19044\r\nML.Net 1.7.0\r\nMicrosoft.ML.OnnxRuntime.GPU 1.10.0\r\n\r\n Issue\r\n\r\nCurrently our application is in .Net and for deploying the models and getting the predictions we are using Flask and python. The models this way are running very fast all models run in around 10ms and GPU utilizsation is very low. GPU is a Quadro P400. We are trying to remove Flask and run everything within .NET so I have converted 4 models trained in Tensorflow/Keras to ONNX and I using them for inference with the use of ML.Net. I have created the pipeline and the prediction engine. I have installed CUDA and CuDNN needed for the package. I have both 10.2 and 11 Cuda versions in the PC. Performance when running with ML.Net is very poor and GPU is utilisation are 50%. Any suggestions or thoughts regarding this\r\n\r\nCode of pipeline and prediction engine:\r\n            \r\n\r\n                var pipeline = this.mlContext.Transforms.ResizeImages(\"input\", height, width, inputColumnName: nameof(ImageData.ImgInput), resizing: ImageResizingEstimator.ResizingKind.Fill)// inputColumnName: nameof(ImageInputData.Image))\r\n                .Append(mlContext.Transforms.ExtractPixels(inputLayer, \"input\", colorsToExtract: ImagePixelExtractingEstimator.ColorBits.Rgb, orderOfExtraction: ImagePixelExtractingEstimator.ColorsOrder.ARGB, interleavePixelColors: true, outputAsFloatArray: true))\r\n                    .Append(mlContext.Transforms.ApplyOnnxModel(outputLayer, inputLayer, modelFile, gpuDeviceId: gpuID));\r\n                //var pipeline = this.mlContext.Transforms.ExtractPixels(inputLayer, inputColumnName: nameof(ImageData.ImgInput), colorsToExtract: ImagePixelExtractingEstimator.ColorBits.Rgb, orderOfExtraction: ImagePixelExtractingEstimator.ColorsOrder.ARBG, interleavePixelColors: true);\r\n\r\n                var data = mlContext.Data.LoadFromEnumerable(new List<ImageData>());\r\n                var transformedData = pipeline.Fit(data).Transform(data);\r\n                //var data = mlContext.Data.LoadFromEnumerable(new ImageData());\r\n                this.model = pipeline.Fit(data); //;\r\n                this.categories = cats;\r\n                this.predictor = this.mlContext.Model.CreatePredictionEngine<ImageData, ImagePrediction>(this.model);","Url":"https://github.com/dotnet/machinelearning/issues/6111","RelatedDescription":"Open issue \"ONNX with ML.Net very slow performance in GPU\" (#6111)"},{"Id":"1158242659","IsPullRequest":false,"CreatedAt":"2022-03-03T10:36:48","Actor":"JD-Robbs","Number":"6110","RawContent":null,"Title":"DataFrameColumn: Unable to Filter by Null via ElementWiseXYZ Methods (System.NotSupportedException)","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version: Latest\r\n - .NET Version: .NET 6.0\r\n\r\n**Describe the bug**\r\nWhen passing `null` into `ElementWiseXYZ` methods, a `System.NotSupportedException` is thrown: 'Specified method is not supported.'\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\n            var col = new DoubleDataFrameColumn(\"col\", new double?[] {1.23, null, 2, 3 });\r\n            var dfTest = new DataFrame(col);\r\n\r\n            var filtered2Df = dfTest.Filter(dfTest[\"col\"].ElementwiseNotEquals(2));\r\n            var filteredNullDf = dfTest.Filter(dfTest[\"col\"].ElementwiseNotEquals(null));\r\n\r\n**Expected behavior**\r\nI expected the resulting `DataFrame` stored in `filteredNullDf` to not include the value `null` - much like `filered2Df` does not include the value `2`.\r\n\r\nThe only way of making it work is something like this:\r\n\r\n             dfTest.Filter(new PrimitiveDataFrameColumn<bool>(\"filter\", dfTest[\"col\"].Cast<double?>().Select(v => v != null)));","Url":"https://github.com/dotnet/machinelearning/issues/6110","RelatedDescription":"Open issue \"DataFrameColumn: Unable to Filter by Null via ElementWiseXYZ Methods (System.NotSupportedException)\" (#6110)"},{"Id":"1157981699","IsPullRequest":false,"CreatedAt":"2022-03-03T05:20:01","Actor":"TusharMalap","Number":"6109","RawContent":null,"Title":"Hierarchical Classification in ml.net ? ","State":"open","Body":"Is there way to achieve Hierarchical Classification in [ml.net](http://ml.net/)?\r\nLike Predict cat from animal category and then predict breed of that cat based on cat as a input? in multiclass-classification?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6109","RelatedDescription":"Open issue \"Hierarchical Classification in ml.net ? \" (#6109)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-03-24T03:30:21.3286181Z","RunDurationInMilliseconds":549}