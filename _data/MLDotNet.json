{"Data":{"GitHub":{"Issues":[{"Id":"839331529","IsPullRequest":false,"CreatedAt":"2021-03-24T04:24:14","Actor":"ChengYen-Tang","Number":"5728","RawContent":null,"Title":"Does ml.net add a pipeline similar to nvidia deepstream? ","State":"open","Body":"In real-time streaming image analysis, such as rtmp and rtsp, we use emgucv, opencvsharp... or other tools to pull the stream, and capture the image in it for object detection and object classification. Video stream -> GPU decoding -> CPU conversion image format -> ML.net GPU detection, and then returns the result -> C# statistics and drawing the box.\r\n\r\nThis process seems inefficient and the CPU usage is very high. If ML.net's pipelines can pull images -> detection -> drawing are all done on the GPU, it should greatly reduce the load.","Url":"https://github.com/dotnet/machinelearning/issues/5728","RelatedDescription":"Open issue \"Does ml.net add a pipeline similar to nvidia deepstream? \" (#5728)"},{"Id":"829626170","IsPullRequest":true,"CreatedAt":"2021-03-23T19:21:06","Actor":"pgovind","Number":"5711","RawContent":null,"Title":"Improve csv parsing","State":"closed","Body":"This PR implements part 2 of improving our csv parsing:\r\n1) It finishes the implementation of TextFieldParser\r\n2) It makes `LoadCsv` use the new TextFieldParser implementation\r\n\r\nAs a result, we are now able to handle quotes (and quotes split across new lines) in csv files which is a huge improvement over what we are shipping currently.","Url":"https://github.com/dotnet/machinelearning/pull/5711","RelatedDescription":"Closed or merged PR \"Improve csv parsing\" (#5711)"},{"Id":"829489588","IsPullRequest":false,"CreatedAt":"2021-03-23T16:26:59","Actor":"michaelgsharp","Number":"5709","RawContent":null,"Title":"Master to Main rename","State":"closed","Body":"We will be renaming the Master branch to Main next week on Tuesday March 16.","Url":"https://github.com/dotnet/machinelearning/issues/5709","RelatedDescription":"Closed issue \"Master to Main rename\" (#5709)"},{"Id":"838575046","IsPullRequest":false,"CreatedAt":"2021-03-23T10:28:26","Actor":"Xilosof","Number":"5727","RawContent":null,"Title":"[Question] How realize ranking (scoring) images? ","State":"open","Body":"Hi! I didn't have any problems, but I want to ask a question.\r\nI don't know where it is better to ask a question, so I decided to do it in the developer repository. \r\nSorry if I shouldn't have done this here.\r\n\r\nI train in ml and came up with a task for myself.\r\nThe essence of the task:\r\n- **Find images with cars (Using ImageClassification with 2 labels)**\r\n- **Then the images with the cars are additionally tagged, for example, brand, color, purity, etc.**\r\n\r\nI think the best way would be to use a separate model for each tag. Check it out if I'm wrong.\r\nI think that the task of determining the brand or model will be more difficult and decided to start with the ranking.\r\n\r\nThe question is how to implement image ranking in ml.net. Should I use ImageClassification with 10 labels (1, 2, 3, ...), which are the evaluation of the beauty/cleanliness of the car? \r\nOr is there another more concise way to get the output of a single normalized number from 0 to 1 that represents the beauty/cleanliness score of the machine","Url":"https://github.com/dotnet/machinelearning/issues/5727","RelatedDescription":"Open issue \"[Question] How realize ranking (scoring) images? \" (#5727)"},{"Id":"830460540","IsPullRequest":true,"CreatedAt":"2021-03-22T17:09:13","Actor":"pgovind","Number":"5712","RawContent":null,"Title":"IDataView to DataFrame","State":"closed","Body":"An extension method to convert an IDataView to a DataFrame.\r\n\r\ncc @LittleLittleCloud \r\n","Url":"https://github.com/dotnet/machinelearning/pull/5712","RelatedDescription":"Closed or merged PR \"IDataView to DataFrame\" (#5712)"},{"Id":"837849914","IsPullRequest":false,"CreatedAt":"2021-03-22T15:38:19","Actor":"luisquintanilla","Number":"5726","RawContent":null,"Title":"Why not newer than CUDA 10.0?","State":"open","Body":"Transferring product question posted in .NET Docs repo from @zleepy\r\n\r\nOriginal Issue (dotnet/docs#23312)\r\n\r\nWhy should i not install CUDA newer than v10.0? 10.0 does not support newer versions of VS 2019.\r\nA newer version of CUDA 10 says it does support VS 2019, see: https://docs.nvidia.com/cuda/archive/10.2/cuda-installation-guide-microsoft-windows/index.html.\r\n\r\nAnd even newer, CUDA 11.2.1 does also say it supports VS, see: https://docs.nvidia.com/cuda/archive/11.2.1/cuda-installation-guide-microsoft-windows/index.html\r\n\r\nWhat is the reason this page explicit says that i should not install anything that Nvidia says is supported by newer versions of VS?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5726","RelatedDescription":"Open issue \"Why not newer than CUDA 10.0?\" (#5726)"},{"Id":"837515425","IsPullRequest":false,"CreatedAt":"2021-03-22T09:29:09","Actor":"manuelfuchs","Number":"5725","RawContent":null,"Title":"Support for Hierarchical Clustering","State":"open","Body":"### Issue\r\n\r\nThis issue is based on #4961.\r\nIt would be nice to see support for Hierarchical Clustering besides the KMeans implementation in ML.NET.\r\nAn open source implementation of the AGNES algorithm [Kaufman & Rousseeuw, 1990] already exists in this open-source library [Aglomera](https://github.com/pedrodbs/Aglomera) that's licensed under the MIT license.\r\n\r\n> Currently, Aglomera.NET implements program AGNES (AGglomerative NESting) of [Kaufman & Rousseeuw, 1990], i.e., the bottom-up approach, the It supports different linkage criteria and also provides several metrics to perform internal and external evaluation of clustering results. The results of clustering can be exported to a Json file to be visualized as a dendrogram in Dendrogram Viewer, an interactive web-application using D3.js.\r\n\r\nBased on the description of Hierarchical Clustering by Aglomera ...\r\n\r\n> The clustering result is a list containing the cluster-set and the corresponding dissimilarity / distance at which it was created at each step of the algorithm. The result is organized in a hierarchical form, i.e., where each cluster references either the two parents that were merged for its creation (in the agglomerative approach), or the two children resulting from splitting the cluster (in the divisive approach). Due to their hierarchical nature, clustering results can be visualized via a dendrogram.\r\n\r\n... the expected result of this additional Model would not be a fixed amount of clusters (as with KMeans), but rather a tree containing the d.\r\nThe actual clusters can then be obtained by cutting the three at a certain height.\r\nBesides visualizing the hierarchical dependencies between clusters, this would give the developer more control regarding the amount of clusters, since this can be decided after the tree was calculated.\r\n\r\nReferences\r\n\r\n1. Kaufman, L., & Rousseeuw, P. J. (1990). [Finding groups in data: an introduction to cluster analysis](https://books.google.com/books?hl=en&lr=&id=YeFQHiikNo0C&oi=fnd&pg=PR11&ots=5ApcG5OEwC&sig=Sx5Bhqfaymzg1U9aRQVIFxmqiHY). John Wiley & Sons.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5725","RelatedDescription":"Open issue \"Support for Hierarchical Clustering\" (#5725)"},{"Id":"837268639","IsPullRequest":false,"CreatedAt":"2021-03-22T02:52:58","Actor":"trilochan","Number":"5724","RawContent":null,"Title":"Enable multi column group by for Dataframe","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:windows\r\n- **.NET Version (eg., dotnet --info)**: .net core 5.0\r\n\r\n### Issue\r\nI am using the Dataframe object from Microsoft.Data.Analytics, currently GroupBy only allows to group by only one column. There isnâ€™t an option to group by multiple columns. \r\n- **What did you do?**\r\n- created a Dataframe with a few columns\r\n- **What happened?**\r\n- tried to use group by multiple columns \r\n- **What did you expect?**\r\n- Expected a method that took a list of columns names to group the Dataframe by\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5724","RelatedDescription":"Open issue \"Enable multi column group by for Dataframe\" (#5724)"},{"Id":"837222955","IsPullRequest":false,"CreatedAt":"2021-03-22T00:27:06","Actor":"axiom2018","Number":"5723","RawContent":null,"Title":"ML.Net Schema mismatch for feature column 'ImagePath': expected VarVector<Byte>, got String","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI'm learning ML.Net, and this maybe a simple question so forgive me in advance if it is but hardly any tutorials I've watched on youtube take the time to explain the code to the viewer. All I'm trying to do is follow a tutorial found [here](https://www.youtube.com/watch?v=bXTN-rnwDso&t=421s&ab_channel=JonWood), I got stuck at 6:58 in the video when I'm supposed to call the fit function. \r\n\r\n- **What happened?**\r\nI get the error \"'Schema mismatch for feature column 'ImagePath': expected VarVector<Byte>, got String (Parameter 'inputSchema')'\" Which is weird because of course the video uploader didn't get this.\r\n\r\n- **What did you expect?**\r\nI just expected to get the model when the fit function was called and continue the code.\r\n\r\n### Source code / logs\r\n\r\n1) **Main Code (Program.cs)**\r\n\r\n`            string baseDir = Directory.GetCurrentDirectory();\r\n            string realDir = Path.GetFullPath(Path.Combine(baseDir, @\"..\\..\\..\\\"));\r\n            string imgFolderDir = realDir + \"images\\\\\";\r\n\r\n            // Get ref to images folder.\r\n            //var imgFolder = Path.Combine(Environment.CurrentDirectory, \"..\", \"..\", \"..\", \"images\");\r\n\r\n            // Go to images folder, get all files (*) from both folders.\r\n            var file = Directory.GetFiles(imgFolderDir, \"*\", SearchOption.AllDirectories);\r\n\r\n            /* For each file, create an imagedata object.  */\r\n            var images = file.Select(f => new ImageData\r\n            {\r\n                ImagePath = f,\r\n                Label = Directory.GetParent(f).Name\r\n            });\r\n\r\n\r\n            // Begin algorithm for ML.\r\n            MLContext ml = new MLContext();\r\n\r\n            /* Load the images.\r\n               Shuffle them (for more randomness?)\r\n            */\r\n            var imageData = ml.Data.LoadFromEnumerable(images);\r\n            var imgDataShuffle = ml.Data.ShuffleRows(imageData);\r\n\r\n            // Split because we'd like to get a portion for training and another for testing.\r\n            var testTrainData = ml.Data.TrainTestSplit(imgDataShuffle, testFraction: 0.2);\r\n\r\n\r\n            var validateData = ml.Transforms.Conversion.MapValueToKey(\"LabelKey\", \"Label\",\r\n                keyOrdinality: Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue)\r\n                .Fit(testTrainData.TestSet)\r\n                .Transform(testTrainData.TestSet);\r\n\r\n\r\n            var pipeline = ml.MulticlassClassification.Trainers.ImageClassification(featureColumnName: \"ImagePath\")\r\n                .Append(ml.Transforms.Conversion.MapKeyToValue(outputColumnName: \"PredictedLabel\",\r\n                inputColumnName: \"PredictedLabel\"));\r\n\r\n            var model = pipeline.Fit(testTrainData.TrainSet);\r\n\r\n            var predictions = model.Transform(testTrainData.TestSet);\r\n            var metrics = ml.MulticlassClassification.Evaluate(predictions, labelColumnName: \"LabelKey\",\r\n                predictedLabelColumnName: \"PredictedLabel\");\r\n\r\n            Console.WriteLine(\"Log loss: {0}.\", metrics.LogLoss);\r\n\r\n            var predictionEngine = ml.Model.CreatePredictionEngine<ImageData, ImagePrediction>(model);\r\n\r\n\r\n\r\n            var testImagesFolder = Path.Combine(Environment.CurrentDirectory, \"..\", \"..\", \"..\", \"test\");\r\n            var testFiles = Directory.GetFiles(testImagesFolder, \"*\", SearchOption.AllDirectories);\r\n            var testImages = testFiles.Select(file => new ImageData\r\n            {\r\n                ImagePath = file\r\n            });\r\n\r\n\r\n\r\n            VBuffer<ReadOnlyMemory<char>> keys = default;\r\n            predictionEngine.OutputSchema[\"LabelKey\"].GetKeyValues(ref keys);\r\n            var originalLabels = keys.DenseValues().ToArray();\r\n\r\n            foreach (var image in testImages)\r\n            {\r\n                // Get the prediction using the prediction engine itself of course.\r\n                var prediction = predictionEngine.Predict(image);\r\n\r\n                // And get the label.\r\n                var labelIndex = prediction.PredictedLabel;\r\n\r\n                // Write it out.\r\n                Console.WriteLine(\"-Image Path:- {0}. -Score:- {1}. -Predicted Label- {2}.\",\r\n                    Path.GetFileName(image.ImagePath),\r\n                    prediction.Score.Max(),\r\n                    originalLabels[labelIndex]);\r\n            }\r\n\r\n            Console.ReadLine();\r\n\r\n\r\n\r\n2) **ImageData (Input)**\r\n\r\n`  public class ImageData\r\n    {\r\n        [LoadColumn(0)]\r\n        public string ImagePath;\r\n\r\n        [LoadColumn(1)]\r\n        public string Label;\r\n    }`\r\n\r\n\r\n\r\n\r\n3) **ImagePrediction (Output)**\r\n\r\n`    public class ImagePrediction\r\n    {\r\n        // Scores we get from the model. How sure it is on a guess.\r\n        [ColumnName(\"Score\")]\r\n        public float[] Score;\r\n\r\n        // The actual label. DNN doesn't give us a string for it.\r\n        [ColumnName(\"PredictedLabel\")]\r\n        public uint PredictedLabel;\r\n    }`\r\n\r\n\r\nAlso, here's a [link](https://github.com/jwood803/MLNetExamples/blob/master/MLNetExamples/DeepNeuralNetwork/Program.cs) to the guy in the videos github so you can compare and contrast my code to his. What exactly am I doing wrong?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5723","RelatedDescription":"Open issue \"ML.Net Schema mismatch for feature column 'ImagePath': expected VarVector<Byte>, got String\" (#5723)"},{"Id":"836714288","IsPullRequest":false,"CreatedAt":"2021-03-20T06:34:33","Actor":"Youssef1313","Number":"5722","RawContent":null,"Title":"wikipedia-detox-250-line-data.tsv file has an error","State":"closed","Body":"![image](https://user-images.githubusercontent.com/31348972/111859793-0fc4af00-894c-11eb-977e-52752ecf4f46.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5722","RelatedDescription":"Closed issue \"wikipedia-detox-250-line-data.tsv file has an error\" (#5722)"},{"Id":"836257894","IsPullRequest":false,"CreatedAt":"2021-03-19T18:27:52","Actor":"pgovind","Number":"5721","RawContent":null,"Title":"DataFrame needs to support vector columns.","State":"open","Body":"With https://github.com/dotnet/machinelearning/pull/5712/files, DataFrames can now be constructed from `IDataView`s. However, IDataView supports vector types while DataFrame doesn't, so this will throw an exception. We should add support for vector types. 1 thing to consider here is that Arrow also supports vector types, so the backing memory store for a vector type column is already defined. (ArrowStringDataFrameColumn is the closest reference for how the backing store ought to be implemented)","Url":"https://github.com/dotnet/machinelearning/issues/5721","RelatedDescription":"Open issue \"DataFrame needs to support vector columns.\" (#5721)"},{"Id":"835188253","IsPullRequest":true,"CreatedAt":"2021-03-19T17:34:03","Actor":"michaelgsharp","Number":"5719","RawContent":null,"Title":"Renamed master to main","State":"closed","Body":"Renamed the last references of dotnet/machinelearning-samples/master to main.\r\n\r\nRemoved master a trigger in the yml files.","Url":"https://github.com/dotnet/machinelearning/pull/5719","RelatedDescription":"Closed or merged PR \"Renamed master to main\" (#5719)"},{"Id":"835516580","IsPullRequest":false,"CreatedAt":"2021-03-19T03:33:01","Actor":"alexlee0905","Number":"5720","RawContent":null,"Title":"[Question] How to implement MultiClassClassification with tree data structure using ML.Net","State":"open","Body":"### System information\r\n\r\nML.Net 1.5.2\r\n.Net Framework 4.7.2\r\n\r\n### Issue\r\n\r\nI have hundreds of projects, and they all have tree data structure like this:  \r\n```\r\nA\r\n  AA\r\n     AAA\r\n  BB\r\n     BBB\r\n```\r\nOr like this:\r\n```\r\nA\r\n  AA1\r\n     AAA1\r\n  BB2\r\n     BBB2\r\n```\r\nEach project has its own tree structure which is modified from a standard tree structure. What I am trying to do is to map project's tree structure to the standard tree structure, like this:\r\n```\r\nA          <--- A\r\n  AA       <---   AA1\r\n     AAA   <---      AAA1\r\n  BB       <---   BB2\r\n     BBB   <---      BBB2\r\n```\r\nOr like this:\r\n\r\n![(img)mapping to standard tree][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/QQauK.png\r\n\r\n(The mapping really depends on the text instead of the node's level. )  \r\n    \r\nNow I'm using multi class classification in ML.Net. First I map the existing projects' tree to the standard tree manually and save the results in the database, like this:\r\n\r\n```\r\n| Label      | Level1         | Level2         | Level3         |\r\n| --------   | -------------- | -------------- | -------------- |\r\n| A          | A              |      *         |       *        |\r\n| A-AA       | A              |      AA1       |       *        |\r\n| A-AA-AAA   | A              |      AA1       |      AAA1      |\r\n| A-BB       | A              |      BB2       |       *        |\r\n| A-BB-BBB   | A              |      BB2       |      BBB2      |\r\n| A          | A              |      *         |       *        |\r\n| A-AA-AAA   | A              |      AAA1      |       *        |\r\n| A-BB       | A              |      BB2       |       *        |\r\n| A-BB-BBB   | A              |      BB2       |      BBB2      |  \r\n```\r\n  \r\nBecause data in the column in ML.Net cannot be a missing value, so I replace them with *. And my tree has 15 levels (feature columns).  \r\n  \r\nThe multi class classification algorithm I choose is SdcaMaximumEntropy. Hopefully I can use the prediction to map the tree instead of doing this manually. \r\n   \r\nI successfully implemented the prediction. However, the prediction result is really poor.\r\n\r\nSo my question is:\r\n\r\n1. Is the way I do this right?\r\n2. If yes, should I remove the duplicate rows and should I replace the missing value with `*`?  \r\n  \r\nThanks in advance.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5720","RelatedDescription":"Open issue \"[Question] How to implement MultiClassClassification with tree data structure using ML.Net\" (#5720)"},{"Id":"834473033","IsPullRequest":false,"CreatedAt":"2021-03-18T07:16:51","Actor":"jamsoft","Number":"5718","RawContent":null,"Title":"Loading Existing ML.NET Image Classification Model and Adapting Predict To Use InMemory Images","State":"open","Body":"I originally raised this as a question on SO to which @michaelgsharp asked if I could bring this discussion to an issue here to track against the repo.\r\n-----------------------------------------------------\r\nI've been looking at the various examples for achieving this and struggling to get it working in my situation. It seems the advice used to be to create a completely [Custom IDataView](https://github.com/dotnet/machinelearning/issues/3460#issuecomment-485490908) according to this answer on GitHub.\r\n\r\nBut this was before there was a new attribute denoting Image types making the first example obsolete as far as I can tell. There is a unit test showing this newer approach [here](https://github.com/dotnet/machinelearning/blob/8dd47c13bf815d748a4fa78e9313a83827bb2057/test/Microsoft.ML.Tests/ImagesTests.cs#L220).\r\n\r\nThe issue is these all seem to re-save the MLModel.zip file as part of their setup setting a new input schema whereas I just want to adapt the inputs at runtime. The examples all seem to be much more complex situations where they are either adapting TensorFlow models in the pipelines or standardizing images. My datasets are all already standardized and in ML.NET formats.\r\n\r\nThe original input object looks like this:\r\n\r\n```\r\npublic class ModelInput\r\n{\r\n    [ColumnName(\"Label\"), LoadColumn(0)]\r\n    public string Label { get; set; }    \r\n\r\n    [ColumnName(\"ImageSource\"), LoadColumn(1)]\r\n    public string ImageSource { get; set; }\r\n}\r\n```\r\nAnd I would like to be able to pass in an object like this:\r\n\r\n```\r\npublic class MlClientModelInput\r\n{\r\n    [ColumnName(\"Label\"), LoadColumn(0)]\r\n    public string Label { get; set; }\r\n\r\n\r\n    [ColumnName(\"Image\"), LoadColumn(1), ImageType(328, 256)]\r\n    public Bitmap Image { get; set; }\r\n}\r\n```\r\nI've been trying various things for hours and getting nowhere at all. Even attempting the re-saving option isn't working as I can't get the methodology of not having to process the images and loading the existing model. It always complains about the schema is wrong.\r\n\r\nSo far I've been trying with this code:\r\n\r\n```\r\npublic static PredictionEngine<MlClientModelInput, MlClientModelOutput> Create()\r\n{\r\n    // Create new MLContext\r\n    MLContext mlContext = new MLContext();\r\n\r\n    var dataProcessPipeline = mlContext.Transforms.ResizeImages(\"Image\", 328, 256);\r\n\r\n    //var model = mlContext.Model.Load(MLNetModelPath, out var modelInputSchema);\r\n    //var pipeline = mlContext.Transforms.ConvertToGrayscale(\"GrayImage\", \"Image\");\r\n\r\n    ITransformer model = dataProcessPipeline.Fit(CreateEmptyDataView(mlContext));\r\n    // Load model & create prediction engine\r\n    ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var modelInputSchema);\r\n\r\n    mlContext.Model.Save(mlModel, null, MLNetModelPathEdited);\r\n\r\n    // Create new MLContext\r\n    MLContext mlContext2 = new MLContext();\r\n    ITransformer mlModel2 = mlContext.Model.Load(MLNetModelPathEdited, out var modelInputSchema2);\r\n    var predEngine = mlContext.Model.CreatePredictionEngine<MlClientModelInput, MlClientModelOutput>(mlModel);\r\n\r\n    return predEngine;\r\n}\r\n```\r\nI've now found [an example](https://github.com/ma-gu/machinelearning-samples/blob/bitmap-dataview/samples/csharp/getting-started/DeepLearning_ObjectDetection_Onnx_Visualization/ObjectDetection.Core/OnnxModelScorer.cs) that is almost exactly what I need but it's also loading a model differently so I'm still unsure how to implement a pipeline without having to standardize the data. It's all very confusing.\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Drawing;\r\nusing System.Linq;\r\nusing Microsoft.ML;\r\nusing ObjectDetection.Core;\r\n\r\nnamespace ObjectDetection\r\n{\r\n    public class OnnxModelScorer\r\n    {\r\n        private readonly string imagesLocation;\r\n        private readonly string imagesFolder;\r\n        private readonly string modelLocation;\r\n        private readonly MLContext mlContext;\r\n\r\n        private IList<YoloBoundingBox> _boxes = new List<YoloBoundingBox>();\r\n        private readonly YoloWinMlParser _parser = new YoloWinMlParser();\r\n\r\n        public OnnxModelScorer(string modelLocation)\r\n        {\r\n            this.modelLocation = modelLocation;\r\n\r\n            mlContext = new MLContext();\r\n        }\r\n\r\n        public struct ImageNetSettings\r\n        {\r\n            public const int imageHeight = 416;\r\n            public const int imageWidth = 416;\r\n        }\r\n\r\n        public struct TinyYoloModelSettings\r\n        {\r\n            // for checking TIny yolo2 Model input and  output  parameter names,\r\n            //you can use tools like Netron, \r\n            // which is installed by Visual Studio AI Tools\r\n\r\n            // input tensor name\r\n            public const string ModelInput = \"image\";\r\n\r\n            // output tensor name\r\n            public const string ModelOutput = \"grid\";\r\n        }\r\n\r\n        public void Score(Bitmap image)\r\n        {\r\n            var imageData = new BitmapDataView(image);\r\n            var model = LoadModel(imageData);\r\n\r\n            PredictDataUsingModel(imageData, model);\r\n        }\r\n\r\n        private PredictionEngine<BitmapDataView, ImageNetPrediction> LoadModel(BitmapDataView imageData)\r\n        {\r\n            Console.WriteLine(\"Read model\");\r\n            Console.WriteLine($\"Model location: {modelLocation}\");\r\n            Console.WriteLine($\"Images folder: {imagesFolder}\");\r\n            Console.WriteLine($\"Default parameters: image size=({ImageNetSettings.imageWidth},{ImageNetSettings.imageHeight})\");\r\n\r\n            //var data = mlContext.Data.LoadFromTextFile<ImageNetData>(imagesLocation, hasHeader: true);\r\n\r\n            var pipeline = mlContext.Transforms.ResizeImages(outputColumnName: \"image\", imageWidth: ImageNetSettings.imageWidth, imageHeight: ImageNetSettings.imageHeight, inputColumnName: \"image\")\r\n                            .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"image\"))\r\n                            .Append(mlContext.Transforms.ApplyOnnxModel(modelFile: modelLocation, outputColumnNames: new[] { TinyYoloModelSettings.ModelOutput }, inputColumnNames: new[] { TinyYoloModelSettings.ModelInput }));\r\n\r\n            var model = pipeline.Fit(imageData);\r\n\r\n            var predictionEngine = mlContext.Model.CreatePredictionEngine<BitmapDataView, ImageNetPrediction>(model);\r\n\r\n            return predictionEngine;\r\n        }\r\n\r\n        protected void PredictDataUsingModel(BitmapDataView data, PredictionEngine<BitmapDataView, ImageNetPrediction> model)\r\n        {\r\n            Console.WriteLine($\"Tags file location: {imagesLocation}\");\r\n            Console.WriteLine(\"\");\r\n            Console.WriteLine(\"=====Identify the objects in the images=====\");\r\n            Console.WriteLine(\"\");\r\n\r\n\r\n\r\n            var probs = model.Predict(data).PredictedLabels;\r\n            IList<YoloBoundingBox> boundingBoxes = _parser.ParseOutputs(probs);\r\n            var filteredBoxes = _parser.NonMaxSuppress(boundingBoxes, 5, .5F);\r\n\r\n            //Console.WriteLine(\".....The objects in the image {0} are detected as below....\", sample.Label);\r\n            foreach (var box in filteredBoxes)\r\n            {\r\n                Console.WriteLine(box.Label + \" and its Confidence score: \" + box.Confidence);\r\n            }\r\n            Console.WriteLine(\"\");\r\n\r\n\r\n\r\n            //var testData = ImageNetData.ReadFromCsv(imagesLocation, imagesFolder);\r\n\r\n            //foreach (var sample in testData)\r\n            //{\r\n            //    var probs = model.Predict(sample).PredictedLabels;\r\n            //    IList<YoloBoundingBox> boundingBoxes = _parser.ParseOutputs(probs);\r\n            //    var filteredBoxes = _parser.NonMaxSuppress(boundingBoxes, 5, .5F);\r\n\r\n            //    Console.WriteLine(\".....The objects in the image {0} are detected as below....\", sample.Label);\r\n            //    foreach (var box in filteredBoxes)\r\n            //    {\r\n            //        Console.WriteLine(box.Label + \" and its Confidence score: \" + box.Confidence);\r\n            //    }\r\n            //    Console.WriteLine(\"\");\r\n            //}\r\n        }\r\n    }\r\n}\r\n```\r\nWhat I'm trying to get to is being able to call the prediction engine like this:\r\n\r\n```\r\npublic static MlClientModelOutput Score(Bitmap image)\r\n{\r\n    var imageData = new BitmapDataView(image);\r\n    var model = LoadModel(imageData);\r\n\r\n    return model.Predict(imageData);\r\n}\r\n```\r\n\r\nWhat's so confusing is in every example I can find doing what I'm trying to do, they never seem to load the actual model I have in .ZIP format. Even in this [full example](https://github.com/dotnet/machinelearning/blob/02a857a7646188fec2d1cba5e187a6c9d0838e23/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/CustomMappingWithInMemoryCustomType.cs#L9) they never load anything from a generated ML.NET model zip file. In my code, if I copied this pattern it would blow up as I wouldn't have executed this code:\r\n\r\n`ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var modelInputSchema);`","Url":"https://github.com/dotnet/machinelearning/issues/5718","RelatedDescription":"Open issue \"Loading Existing ML.NET Image Classification Model and Adapting Predict To Use InMemory Images\" (#5718)"},{"Id":"834086075","IsPullRequest":true,"CreatedAt":"2021-03-17T22:53:20","Actor":"michaelgsharp","Number":"5717","RawContent":null,"Title":"Renamed master to main","State":"closed","Body":"Rename all references to machinelearning/master to machinelearning/main.","Url":"https://github.com/dotnet/machinelearning/pull/5717","RelatedDescription":"Closed or merged PR \"Renamed master to main\" (#5717)"},{"Id":"833249875","IsPullRequest":false,"CreatedAt":"2021-03-16T22:40:57","Actor":"Hulkstance","Number":"5716","RawContent":null,"Title":"[Question] Microsoft.Data.Analysis","State":"open","Body":"I was waiting on `Microsoft.Data.Analysis` for a long time and more specifically `.Shift()`, `.Resample()` operations. I literally saw an issue about that, but not sure what happened. I recently saw that you moved the repo over here. What is the newest repo that I can use?\r\n\r\nhttps://github.com/xadupre/machinelearning_dataframe doesn't seem to be maintained.","Url":"https://github.com/dotnet/machinelearning/issues/5716","RelatedDescription":"Open issue \"[Question] Microsoft.Data.Analysis\" (#5716)"},{"Id":"833126387","IsPullRequest":true,"CreatedAt":"2021-03-16T22:31:12","Actor":"michaelgsharp","Number":"5715","RawContent":null,"Title":"Added main branch to yml files","State":"closed","Body":"This adds the branch \"main\" to the yml files in preparation for the rename of master to main.","Url":"https://github.com/dotnet/machinelearning/pull/5715","RelatedDescription":"Closed or merged PR \"Added main branch to yml files\" (#5715)"},{"Id":"832306389","IsPullRequest":false,"CreatedAt":"2021-03-16T00:34:56","Actor":"iluveu28","Number":"5714","RawContent":null,"Title":"ERROR : Schema mismatch for input column","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Linux\r\n- **.NET Version (eg., dotnet --info)**: 5\r\n\r\n### Issue\r\n\r\nWhen I got to the training step - https://dotnet.microsoft.com/learn/ml-dotnet/get-started-tutorial/train\r\n\r\nIt failed with below error. Why and how to fix it?\r\n\r\n### Source code / logs\r\n\r\nSchema mismatch for input column 'TIU_SOC_tf_CharExtractor': expected Expected known-size vector of Single, got Vector<Single>\r\nParameter name: inputSchema\r\n\r\n   at Microsoft.ML.ModelBuilder.AutoMLService.Experiments.AutoMLExperiment`3.<ExecuteAsync>d__21.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.ML.ModelBuilder.AutoMLEngine.<StartTrainingAsync>d__26.MoveNext() in /_/src/Microsoft.ML.ModelBuilder.AutoMLService/AutoMLEngineService/AutoMLEngine.cs:line 150\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5714","RelatedDescription":"Open issue \"ERROR : Schema mismatch for input column\" (#5714)"},{"Id":"829516465","IsPullRequest":true,"CreatedAt":"2021-03-15T16:52:19","Actor":"eerhardt","Number":"5710","RawContent":null,"Title":"Update to the latest Microsoft.DotNet.Interactive","State":"closed","Body":"This allows the DataFrame extension to work with the latest .NET Interactive.\r\n\r\nI also needed to change the DataFrame .csproj so it gets packed by including the right Pack.props file. \r\n\r\nAdded an .editorconfig entry so .csproj files are uniform in their spacing.\r\n\r\nThe only meaningful code change is the rows per page going from 10 to 25. 10 is just too small IMO.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5710","RelatedDescription":"Closed or merged PR \"Update to the latest Microsoft.DotNet.Interactive\" (#5710)"},{"Id":"831157625","IsPullRequest":false,"CreatedAt":"2021-03-14T13:34:37","Actor":"neoffer","Number":"5713","RawContent":null,"Title":"Native .NET alternatives of Python's data science and AI libraries","State":"open","Body":"I don't know how to develop on-premise chatbot app using .NET. Because .NET does not provide native data science and ai libraries.\r\n\r\nPlease develop native libraries for data science, machine learning and deep learning in .NET like TensorFlow, NumPy, SciPy, Matplotlab, Keras, NLTK, Pandas so we can develop on-premise ChatBot application in .NET Core using Microsoft's NuGet Packages.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5713","RelatedDescription":"Open issue \"Native .NET alternatives of Python's data science and AI libraries\" (#5713)"},{"Id":"826810260","IsPullRequest":true,"CreatedAt":"2021-03-11T19:48:53","Actor":"michaelgsharp","Number":"5699","RawContent":null,"Title":"Fixes for tlc build breaks","State":"closed","Body":"With the removal of the TLC subscription which was hosting some assets we had errors trying to build. These assets have been moved into another azure devops repo and turned into a nuget package.\r\n\r\nThis pr changes the build process so it uses the nuget instead of directly downloading the assets. This involves some build changes as well as some test file changes.","Url":"https://github.com/dotnet/machinelearning/pull/5699","RelatedDescription":"Closed or merged PR \"Fixes for tlc build breaks\" (#5699)"},{"Id":"828443643","IsPullRequest":true,"CreatedAt":"2021-03-11T19:47:56","Actor":"michaelgsharp","Number":"5701","RawContent":null,"Title":"Nuget feed update","State":"closed","Body":"Renamed nuget feed from mlnet-testdata to mlnet-assets.","Url":"https://github.com/dotnet/machinelearning/pull/5701","RelatedDescription":"Closed or merged PR \"Nuget feed update\" (#5701)"},{"Id":"821382240","IsPullRequest":true,"CreatedAt":"2021-03-11T19:41:26","Actor":"pgovind","Number":"5641","RawContent":null,"Title":"Move DataFrame to machinelearning","State":"closed","Body":"Move MDA, MDAI, MDA.Tests and MDAI.Tests to machinelearning. \r\n\r\nFor an easier time reviewing, the real changes are after the `Merge branch 'port' of ../corefxlab into DataFrame_1` commit.\r\n\r\nJust for posterity, I used `git-filter-repo` to pare down corefxlab locally to just the MDA and MDAI parts that I was interested in and then moved them over to the machinelearning repo. `git-filter-repo` was way faster than `git filter-branch` on my machine.","Url":"https://github.com/dotnet/machinelearning/pull/5641","RelatedDescription":"Closed or merged PR \"Move DataFrame to machinelearning\" (#5641)"},{"Id":"827023644","IsPullRequest":false,"CreatedAt":"2021-03-10T03:26:17","Actor":"michaelgsharp","Number":"5700","RawContent":null,"Title":"Fix URL and datasets for samples.","State":"open","Body":"With the removal of the TLC subscription, all the URL's in the samples for the datasets need to be fixed.\r\n\r\nIf we don't have access to those datasets anymore, we will need to either create them again or come up with new ones.","Url":"https://github.com/dotnet/machinelearning/issues/5700","RelatedDescription":"Open issue \"Fix URL and datasets for samples.\" (#5700)"},{"Id":"823967636","IsPullRequest":false,"CreatedAt":"2021-03-07T17:18:02","Actor":"WalternativE","Number":"5698","RawContent":null,"Title":"DateTime columns cause schema type lookups to fail in DataFrame","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:  Windows 10 20H2 19042.844\r\n- **.NET Version (eg., dotnet --info)**:  5.0.200\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n  I tried to use the `Explore()` and `ExploreWithSandDance()` extension methods on the\r\n  `IDataView` type of the underlying `DataFrame` which contained a column of the type\r\n  `PrimitiveDataFrameColumn<DateTime>`.\r\n\r\n- **What happened?**\r\n  I received the following error\r\n  ```\r\n  Error: System.NotSupportedException: Specified method is not supported.\r\n  at Microsoft.Data.Analysis.PrimitiveDataFrameColumn`1.GetDataViewType()\r\n  at Microsoft.Data.Analysis.PrimitiveDataFrameColumn`1.AddDataViewColumn(Builder builder)\r\n  at Microsoft.Data.Analysis.DataFrame.get_DataViewSchema()\r\n  at Microsoft.ML.DataViewExtensions.ToTabularJsonString(IDataView source)\r\n  at Microsoft.ML.DataViewExtensions.ExploreWithSandDance(IDataView source)\r\n  at <StartupCode$FSI_0011>.$FSI_0011.main@()\r\n  ``` \r\n\r\n- **What did you expect?**\r\n  I expected the same behavior as when I tried the same procedure with a `DataFrame` which did not contain a\r\n  `DateTime` column.\r\n\r\n### Source code / logs\r\n\r\nAs explained above I received a `NotSupportedException`. I assume, that it is connected to the execution of this line\r\n`source.Schema.ToDictionary(column => column.Name, column => column.Type.RawType);` in the extension method to create the `TabularJsonObject` [here](https://github.com/dotnet/interactive/blob/4f22e1b0cd1023ee8e4ddff30de6b7c845a674c4/src/Microsoft.DotNet.Interactive.ExtensionLab/DataFrameKernelExtension.cs#L178).\r\n\r\nI created a [notebook](https://github.com/WalternativE/DotnetInteractiveExperiments/blob/main/notebooks/DataFrameDateTimeProblem.ipynb) which showcases how I stumbled upon the error. It should be possible to use the binder link in the readme for this, even though it botches up the last redirect for some reason.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5698","RelatedDescription":"Open issue \"DateTime columns cause schema type lookups to fail in DataFrame\" (#5698)"},{"Id":"823950980","IsPullRequest":false,"CreatedAt":"2021-03-07T16:02:23","Actor":"jamsoft","Number":"5697","RawContent":null,"Title":"Attempting to use In Memory Images for Prediction","State":"open","Body":"### System information\r\n\r\n- Windows 10\r\n\r\n### Issue\r\n\r\n- **I'm trying to use in memory images with an ML Model Loaded from an MLModel.zip file**\r\n- **I cannot work our how to build the pipeline in order to adapt the input schema?**\r\n\r\n### Source code / logs\r\n\r\nI'm following the examples I can find in the ML repository. The such as the WebApp and WebApi Images classification example applications but they all wrap a tensorflow model in order to then be able to pass a Bitmap to the Prediction method.\r\n\r\nI've been trying all day to find either simpler examples or the right syntax and I've completely failed so far. The examples build pipelines to do things like resizing, extracting pixels and recolorising whereas all my images are pre-prepared and I'm using an ML.NET model which should be the simplest use case but there aren't currently any of these simpler examples.\r\n\r\nWhat I cant find out how to do, or even identify if it's the right approach, is create a pipeline that loads an ML.NET \"native\" model created by Model Builder then adapt this to take in a Bitmap using the same type of class as in the [demos](https://github.com/CESARDELATORRE/TensorFlowImageClassificationWebApp):\r\n\r\nSuch as this:\r\n\r\n```\r\n    public class ImageInputData\r\n    {\r\n        [ImageType(227, 227)]\r\n        public Bitmap Image { get; set; }\r\n    }\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5697","RelatedDescription":"Open issue \"Attempting to use In Memory Images for Prediction\" (#5697)"},{"Id":"823538954","IsPullRequest":false,"CreatedAt":"2021-03-06T02:25:49","Actor":"zyzhu","Number":"5696","RawContent":null,"Title":"OLS regression outputs wrong TStats and PValue","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.200\r\n Commit:    70b3e65d53\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19042\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.200\\\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI tried to use ML.Net to run a stats 101 case to get familiar with the library.\r\nThe data points are generated so that y = x * 2 + random(). I use OLS trainer to estimate its slope and output its tstats and pvalues.\r\n- **What happened?**\r\npValue turns out to be 1 and tstat turns out to be 0.\r\n- **What did you expect?**\r\npValue is supposed to be close to zero and tstat is supposed to be very large.\r\n\r\nHere is the equivalent R code\r\n```r\r\ndf <- data.frame(x = 1:100, y = 1:100*2 + runif(100))\r\nmodel <- lm(y ~ x, df)\r\nsummary(model)\r\n```\r\noutput of R\r\n```\r\nResiduals:\r\n     Min       1Q   Median       3Q      Max \r\n-0.48638 -0.20409 -0.04365  0.22835  0.52931 \r\n\r\nCoefficients:\r\n             Estimate Std. Error  t value Pr(>|t|)    \r\n(Intercept) 0.5067878  0.0562763    9.005 1.74e-14 ***\r\nx           1.9994857  0.0009675 2066.691  < 2e-16 ***\r\n---\r\nSignif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1\r\n\r\nResidual standard error: 0.2793 on 98 degrees of freedom\r\nMultiple R-squared:      1,\tAdjusted R-squared:      1 \r\nF-statistic: 4.271e+06 on 1 and 98 DF,  p-value: < 2.2e-16\r\n```\r\n\r\n### Source code / logs\r\nThe following is the F# script file. Or you can run it in Jupyter notebook via dotnet interactive kernel.\r\n```fsharp\r\n#r \"nuget: Microsoft.ML\"\r\n#r \"nuget: Microsoft.ML.Mkl.Components\"\r\nopen System\r\nopen Microsoft.ML\r\nopen Microsoft.ML.Data\r\n\r\n[<CLIMutable>]\r\ntype Factor = {\r\n    [<ColumnName(\"Label\")>]\r\n    y : float32\r\n    intercept: float32\r\n    x : float32\r\n}\r\n\r\n// Generate data: y = x * 2 + rnd\r\nlet rnd = Random()\r\nlet rows =\r\n    [1.0 .. 100.0]\r\n    |> Seq.map(fun v ->\r\n        {\r\n            y = float32 (v * 2.0 + rnd.NextDouble())\r\n            intercept = float32 1.\r\n            x = float32 v\r\n        }\r\n    )\r\n\r\nlet context = new MLContext()\r\nlet dataView = context.Data.LoadFromEnumerable(rows)\r\nlet pipeline =\r\n    EstimatorChain()\r\n        .Append(context.Transforms.Concatenate(\"Features\", \"intercept\", \"x\"))\r\n        .Append(context.Regression.Trainers.Ols())\r\n\r\nlet model = dataView |> pipeline.Fit\r\nlet modelParams = model.LastTransformer.Model\r\nSeq.zip3 modelParams.Weights modelParams.TValues modelParams.PValues\r\n|> Array.ofSeq\r\n|> Array.iteri(fun i (w, t, p) ->\r\n    printfn $\"Beta {i}, w: {w:f3}, tStats: {t:f3}, pValue: {p:f3}\")\r\n```\r\nOutput\r\n```\r\nBeta 0, w: 0.005, tStats: 0.000, pValue: 1.000\r\nBeta 1, w: 2.000, tStats: 0.000, pValue: 1.000\r\n```\r\n\r\nAnother general feedback is that the ceremony in ML.NET is so complicated, compared to the simplicity in R sample above. I do not expect users from R/Python community can embrace this complexity. The library seems to be designed for software engineers only in mind. Maybe there's a balance in between R/Python and dotnet.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5696","RelatedDescription":"Open issue \"OLS regression outputs wrong TStats and PValue\" (#5696)"},{"Id":"822360014","IsPullRequest":false,"CreatedAt":"2021-03-04T21:46:13","Actor":"MichaelBetser","Number":"5643","RawContent":null,"Title":"ml.net 1.5.2 not compiling on windows because missing dependencies","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: windows 10 x64 pro version 10.0.19042\r\n- **.NET Version (eg., dotnet --info)**: 5.0.200\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried to compile ml.net 1.5.2 on windows to get compatible maml.exe binary\r\n- **What happened?**\r\ncompile is failing when resolving dependencies\r\n- **What did you expect?**\r\nto compile\r\n\r\n### Source code / logs\r\nE:\\git\\ml.net_1.5.2\\machinelearning>.\\build.cmd\r\nInstalling procdump.exe\r\nFinish install procdump.exe\r\nInstalling dotnet runtime 2.1.12...\r\nInstalling dotnet cli 3.1.102...\r\nRestoring BuildTools version 3.0.0-preview4-04926-01...\r\nERROR: Could not restore build tools correctly.\r\nPlease check the detailed log that follows.\r\nRunning \"E:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.cmd\"\r\nInstalling 'https://dotnetcli.azureedge.net/dotnet/Runtime/2.1.12/dotnet-runtime-2.1.12-win-x64.zip' to 'E:\\git\\ml.net_1.5.2\\machinelearning\\Tools\\dotnetcli\\dotnet-runtime-2.1.12-win-x64.zip'\r\nInstalling 'https://dotnetcli.azureedge.net/dotnet/Sdk/3.1.102/dotnet-sdk-3.1.102-win-x64.zip' to 'E:\\git\\ml.net_1.5.2\\machinelearning\\Tools\\dotnetcli\\dotnet-sdk-3.1.102-win-x64.zip'\r\nRunning: \"E:\\git\\ml.net_1.5.2\\machinelearning\\Tools\\dotnetcli\\dotnet.exe\" restore \"E:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.msbuild\" --no-cache --packages \"E:\\git\\ml.net_1.5.2\\machinelearning\\packages\" --source \"https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\" /p:BuildToolsPackageVersion=3.0.0-preview4-04926-01 /p:ToolsDir=E:\\git\\ml.net_1.5.2\\machinelearning\\Tools\r\nE:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.msbuild : error NU1101: Unable to find package Microsoft.SymbolUploader.Build.Task. No packages exist with this id in source(s): https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\r\nE:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.msbuild : error NU1101: Unable to find package Microsoft.DotNet.BuildTools. No packages exist with this id in source(s): https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\r\n  Restore failed in 1.06 sec for E:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.msbuild.","Url":"https://github.com/dotnet/machinelearning/issues/5643","RelatedDescription":"Closed issue \"ml.net 1.5.2 not compiling on windows because missing dependencies\" (#5643)"},{"Id":"821497223","IsPullRequest":true,"CreatedAt":"2021-03-04T02:56:46","Actor":"michaelgsharp","Number":"5642","RawContent":null,"Title":"Updating version after release","State":"closed","Body":"Update the version after the last release.\r\nSetting new version to 1.5.6 for non-preview packages.\r\nSetting new version to 0.17.6 for preview packages.","Url":"https://github.com/dotnet/machinelearning/pull/5642","RelatedDescription":"Closed or merged PR \"Updating version after release\" (#5642)"},{"Id":"821312065","IsPullRequest":false,"CreatedAt":"2021-03-03T17:12:11","Actor":"lisahua","Number":"5640","RawContent":null,"Title":"[AnomalyDetection] Some points marked as anomaly with little deviation","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: master\r\n\r\n### Issue\r\n\r\n- **What did you do?** Apply AnomalyDetection API\r\n- **What happened?** Some points are marked as anomaly while some others that look more like anomaly are not marked as anomaly.\r\n- **What did you expect?** I expect the points that look has more deviations mark as anomaly, rather than the ones with small deviation.\r\n![image](https://user-images.githubusercontent.com/3010893/109843877-6d44c600-7c00-11eb-8049-69d579ee8bdb.png)\r\n\r\nExpecting the highlighted points with higher deviation to be anomalies.\r\n\r\n**Please assign the issue** to: https://github.com/guinao and https://github.com/mengaims\r\n\r\n### Source code / logs\r\n\r\n[Sales vs Date.csv](https://aiteststracc.blob.core.windows.net/testfiles/Sales%20%20Profit%20by%20Year,%20Quarter,%20Month%20and%20Day.csv?sv=2019-02-02&st=2021-03-03T16%3A54%3A18Z&se=2023-03-04T16%3A54%3A00Z&sr=b&sp=racw&sig=xBnvuqciOfsqx90DtS8USnxBXMbRz7%2BJRuo5CD28u%2BY%3D) (Input data)\r\n\r\n           var anomalyDetectorOptions = new SrCnnEntireAnomalyDetectorOptions()\r\n            {\r\n                DetectMode = //WithMargin,\r\n                Sensitivity = 20,\r\n                DeseasonalityMode = SrCnnDeseasonalityMode.Median,\r\n                Period = -1,\r\n                Threshold =0.18,\r\n            };\r\n\r\n            anomalyResult = this.mlContext.AnomalyDetection.DetectEntireAnomalyBySrCnn(\r\n      ...\r\n            anomalyDetectorOptions);\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5640","RelatedDescription":"Open issue \"[AnomalyDetection] Some points marked as anomaly with little deviation\" (#5640)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-03-24T05:30:30.5404071Z","RunDurationInMilliseconds":534}