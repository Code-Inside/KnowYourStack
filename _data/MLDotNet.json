{"Data":{"GitHub":{"Issues":[{"Id":"2792226030","IsPullRequest":false,"CreatedAt":"2025-01-16T09:52:59","Actor":"aforoughi1","Number":"7367","RawContent":null,"Title":"Direct Accces to Microsoft.ML.GenAI.LLaMA Model","State":"open","Body":"I would like to convert a LLama model to a Multiclass Classification Model and then finetune the model on my classification labels. \n\nCurrently, the Microsoft.ML.GenAI.LLaMA/Module/LlamaModel is internal.\n\nStep 1\nLoad the pre-trained LLaMA model\n\nstring device = \"cpu\";\nstring weightFolder = @\".\\Llama3.1-8B\";\nstring originalWeightFolder = Path.Combine(weightFolder, \"original\");\nstring configName = \"config.json\";\nstring modelFile = \"tokenizer.model\";\nstring checkPointName = \"model.safetensors.index.json\";\n\n// Load the Pretrained Model: First, load the pretrained LLaMA model using TorchSharp.\nmodel = LlamaForCausalLM.FromPretrained(weightFolder, configName, checkPointName: checkPointName, layersOnTargetDevice: -1, quantizeToInt8: false, targetDevice: device);\n\nStep 2\nCreate a classification head \n\npublic class ClassificationHead : Module<Tensor, Tensor>\n{\n    private readonly Module<Tensor, Tensor> linear1;\n    private readonly Module<Tensor, Tensor> relu;\n    private readonly Module<Tensor, Tensor> linear2;\n\n    public ClassificationHead(int d_model,int outputSize, int num_classes) : base(nameof(ClassificationHead))\n    {\n        linear1 = Linear(d_model, outputSize);     // Intermediate layer\n        relu = ReLU();                      // Activation\n        linear2 = Linear(outputSize, num_classes); // Output layer\n\n        RegisterComponents();\n    }\n\n    public override Tensor forward(Tensor x)\n    {\n        var output = linear1.forward(x);\n        output = relu.forward(output);\n        output = linear2.forward(output);\n        return output;\n    }\n}\n\nstep 3\nIntegrate the classification head into the LLaMA model\n\nThis step is not possible to override the Forward Pass: The input is passed through the LLaMA model and then through the classification head to get the output logits.\n\n\nstep 4\nSet up the training loop to optimize the model using my data\n\nI intend to use Microsoft.ML.GenAI.Core/Trainer/CasualLMSupervisedFineTuningTrainer\n","Url":"https://github.com/dotnet/machinelearning/issues/7367","RelatedDescription":"Open issue \"Direct Accces to Microsoft.ML.GenAI.LLaMA Model\" (#7367)"},{"Id":"2790471917","IsPullRequest":true,"CreatedAt":"2025-01-15T17:48:02","Actor":"michaelgsharp","Number":"7366","RawContent":null,"Title":"Servicing version update","State":"open","Body":"Updating servicing version to 4.0.2.","Url":"https://github.com/dotnet/machinelearning/pull/7366","RelatedDescription":"Open PR \"Servicing version update\" (#7366)"},{"Id":"2769826136","IsPullRequest":true,"CreatedAt":"2025-01-14T23:49:08","Actor":"dotnet-maestro[bot]","Number":"7354","RawContent":null,"Title":"[release/4.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:a547de0d-c7ea-4682-b0d2-c8a549cede14)\n## From https://github.com/dotnet/arcade\n- **Subscription**: a547de0d-c7ea-4682-b0d2-c8a549cede14\n- **Build**: 20250108.5\n- **Date Produced**: January 8, 2025 8:49:48 PM UTC\n- **Commit**: 8cc6ecd76c24ef6665579a5c5e386a211a1e7c54\n- **Branch**: refs/heads/release/9.0\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 9.0.0-beta.24572.2 to 9.0.0-beta.25058.5][2]\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 9.0.0-beta.24572.2 to 9.0.0-beta.25058.5][2]\n  - **Microsoft.DotNet.Helix.Sdk**: [from 9.0.0-beta.24572.2 to 9.0.0-beta.25058.5][2]\n  - **Microsoft.DotNet.SignTool**: [from 9.0.0-beta.24572.2 to 9.0.0-beta.25058.5][2]\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 9.0.0-beta.24572.2 to 9.0.0-beta.25058.5][2]\n  - **Microsoft.DotNet.XliffTasks**: [from 9.0.0-beta.24572.2 to 9.0.0-beta.25058.5][2]\n  - **Microsoft.DotNet.XUnitExtensions**: [from 9.0.0-beta.24572.2 to 9.0.0-beta.25058.5][2]\n\n[2]: https://github.com/dotnet/arcade/compare/b41381d5cd...8cc6ecd76c\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:a547de0d-c7ea-4682-b0d2-c8a549cede14)\n\n\n\n\n\n","Url":"https://github.com/dotnet/machinelearning/pull/7354","RelatedDescription":"Closed or merged PR \"[release/4.0] Update dependencies from dotnet/arcade\" (#7354)"},{"Id":"2788446742","IsPullRequest":true,"CreatedAt":"2025-01-14T23:30:28","Actor":"michaelgsharp","Number":"7365","RawContent":null,"Title":"Adding 4.0.1 servicing notes","State":"closed","Body":"Adding 4.0.1 servicing notes","Url":"https://github.com/dotnet/machinelearning/pull/7365","RelatedDescription":"Closed or merged PR \"Adding 4.0.1 servicing notes\" (#7365)"},{"Id":"2788427470","IsPullRequest":true,"CreatedAt":"2025-01-14T23:12:02","Actor":"github-actions[bot]","Number":"7363","RawContent":null,"Title":"[release/4.0] Fix up docs for MLContext","State":"closed","Body":"Backport of #7334 to release/4.0\n\n/cc @michaelgsharp @gewarren\n\n## Customer Impact\n\n## Testing\n\n## Risk\n","Url":"https://github.com/dotnet/machinelearning/pull/7363","RelatedDescription":"Closed or merged PR \"[release/4.0] Fix up docs for MLContext\" (#7363)"},{"Id":"2788428247","IsPullRequest":true,"CreatedAt":"2025-01-14T22:55:07","Actor":"github-actions[bot]","Number":"7364","RawContent":null,"Title":"[release/4.0] Some tweaks to the Microsoft.ML.Tokenizers PACKAGE.md","State":"closed","Body":"Backport of #7360 to release/4.0\n\n/cc @michaelgsharp @stephentoub\n\n## Customer Impact\n\n## Testing\n\n## Risk\n","Url":"https://github.com/dotnet/machinelearning/pull/7364","RelatedDescription":"Closed or merged PR \"[release/4.0] Some tweaks to the Microsoft.ML.Tokenizers PACKAGE.md\" (#7364)"},{"Id":"2787401224","IsPullRequest":true,"CreatedAt":"2025-01-14T14:58:40","Actor":"dotnet-maestro[bot]","Number":"7362","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:45c6fd49-3a4f-4675-f3da-08dc0c527e17)\n## From https://github.com/dotnet/arcade\n- **Subscription**: 45c6fd49-3a4f-4675-f3da-08dc0c527e17\n- **Build**: 20250110.1\n- **Date Produced**: January 10, 2025 3:11:29 PM UTC\n- **Commit**: c255aae7f2b128fa20a4441f0e192c3c53561621\n- **Branch**: refs/heads/release/8.0\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 8.0.0-beta.24360.5 to 8.0.0-beta.25060.1][1]\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 8.0.0-beta.24360.5 to 8.0.0-beta.25060.1][1]\n  - **Microsoft.DotNet.Helix.Sdk**: [from 8.0.0-beta.24360.5 to 8.0.0-beta.25060.1][1]\n  - **Microsoft.DotNet.SignTool**: [from 8.0.0-beta.24360.5 to 8.0.0-beta.25060.1][1]\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 8.0.0-beta.24360.5 to 8.0.0-beta.25060.1][1]\n  - **Microsoft.DotNet.XUnitExtensions**: [from 8.0.0-beta.24360.5 to 8.0.0-beta.25060.1][1]\n\n[1]: https://github.com/dotnet/arcade/compare/c9efa53517...c255aae7f2\n\n[DependencyUpdate]: <> (End)\n\n- **Updates to .NET SDKs:**\n  - Updates tools.dotnet to 8.0.110\n\n[marker]: <> (End:45c6fd49-3a4f-4675-f3da-08dc0c527e17)\n\n","Url":"https://github.com/dotnet/machinelearning/pull/7362","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#7362)"},{"Id":"2772409713","IsPullRequest":true,"CreatedAt":"2025-01-13T19:51:45","Actor":"asmirnov82","Number":"7356","RawContent":null,"Title":"Consolidate System.Numerics.Tensors dependency","State":"closed","Body":"After #7319 is done, System.Numerics.Tensors library dependency can be consolidated to 9.0","Url":"https://github.com/dotnet/machinelearning/pull/7356","RelatedDescription":"Closed or merged PR \"Consolidate System.Numerics.Tensors dependency\" (#7356)"},{"Id":"2753810988","IsPullRequest":true,"CreatedAt":"2025-01-13T19:51:35","Actor":"Youssef1313","Number":"7349","RawContent":null,"Title":"Update MSTest to latest","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7349","RelatedDescription":"Closed or merged PR \"Update MSTest to latest\" (#7349)"},{"Id":"2772956385","IsPullRequest":true,"CreatedAt":"2025-01-13T19:04:53","Actor":"asmirnov82","Number":"7358","RawContent":null,"Title":"Fix DateTime  export to csv with culture info","State":"closed","Body":"Fixes #7333 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7358","RelatedDescription":"Closed or merged PR \"Fix DateTime  export to csv with culture info\" (#7358)"},{"Id":"2779543263","IsPullRequest":false,"CreatedAt":"2025-01-13T18:18:09","Actor":"oguzhanet","Number":"7361","RawContent":null,"Title":"Self-learning of the model","State":"closed","Body":"How can a model trained with millions of data learn on its own? How do we ensure this?","Url":"https://github.com/dotnet/machinelearning/issues/7361","RelatedDescription":"Closed issue \"Self-learning of the model\" (#7361)"},{"Id":"2772347856","IsPullRequest":true,"CreatedAt":"2025-01-13T18:01:56","Actor":"asmirnov82","Number":"7355","RawContent":null,"Title":"Update System.Numerics.Tensors version (#7322)","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/7355","RelatedDescription":"Closed or merged PR \"Update System.Numerics.Tensors version (#7322)\" (#7355)"},{"Id":"2755225011","IsPullRequest":true,"CreatedAt":"2025-01-13T18:00:41","Actor":"dotnet-maestro[bot]","Number":"7352","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:c692823c-b896-437f-4f57-08dc434cc8f6)\n## From https://github.com/dotnet/arcade\n- **Subscription**: c692823c-b896-437f-4f57-08dc434cc8f6\n- **Build**: 20250111.1\n- **Date Produced**: January 12, 2025 1:44:25 AM UTC\n- **Commit**: 98b4ae348fa01b99dc6fbfc8f601efd9b90090db\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.25061.1][5]\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.25061.1][5]\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.25061.1][5]\n  - **Microsoft.DotNet.SignTool**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.25061.1][5]\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.25061.1][5]\n  - **Microsoft.DotNet.XliffTasks**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.25061.1][5]\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.25061.1][5]\n\n[5]: https://github.com/dotnet/arcade/compare/255d5e0c89...98b4ae348f\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:c692823c-b896-437f-4f57-08dc434cc8f6)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","Url":"https://github.com/dotnet/machinelearning/pull/7352","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#7352)"},{"Id":"2776830858","IsPullRequest":true,"CreatedAt":"2025-01-13T18:00:11","Actor":"stephentoub","Number":"7360","RawContent":null,"Title":"Some tweaks to the Microsoft.ML.Tokenizers PACKAGE.md","State":"closed","Body":"A bit of cleanup","Url":"https://github.com/dotnet/machinelearning/pull/7360","RelatedDescription":"Closed or merged PR \"Some tweaks to the Microsoft.ML.Tokenizers PACKAGE.md\" (#7360)"},{"Id":"2772953959","IsPullRequest":false,"CreatedAt":"2025-01-08T14:38:39","Actor":"asmirnov82","Number":"7357","RawContent":null,"Title":"DataFrame doesn't read empty values from csv in case of only 1 column","State":"closed","Body":"Test to reproduce:\n\n```C#\n[Fact]\npublic void TestSaveAndReadCsvWithOnlyOneColumnAndNullValues()\n{\n    using MemoryStream csvStream = new MemoryStream();\n    var column = new SingleDataFrameColumn(\"Data\", 3);\n    DataFrame dataFrame = new DataFrame();\n    dataFrame.Columns.Add(column);\n    column[0] = 0;\n    column[1] = null;\n    column[2] = 2;\n\n    DataFrame.SaveCsv(dataFrame, csvStream, header: true);\n\n    csvStream.Seek(0, SeekOrigin.Begin);\n\n    DataFrame readIn = DataFrame.LoadCsv(csvStream);\n\n    Assert.Equal(column[0], readIn[0, 0]);\n    Assert.Null(readIn[1, 0]);\n    Assert.Equal(column[2], readIn[2, 0]);\n}\n```\n\nIn case of adding additional column with the same values - everything works fine","Url":"https://github.com/dotnet/machinelearning/issues/7357","RelatedDescription":"Closed issue \"DataFrame doesn't read empty values from csv in case of only 1 column\" (#7357)"},{"Id":"2774310874","IsPullRequest":false,"CreatedAt":"2025-01-08T05:08:38","Actor":"eddylai","Number":"7359","RawContent":null,"Title":"ObjectDetection-Onnx System.AccessViolationException: 'Attempted to read or write protected memory.","State":"open","Body":"**System Information (please complete the following information):**\n - OS & Version: Windows 10/11\n - ML.NET Version: ML.NET v1.6\n - .NET Version: .NET 8.0\n\n**Describe the bug**\nbulild and run the download OnnxObjectDetectionApp code got exception:\nSystem.AccessViolationException: 'Attempted to read or write protected memory. This is often an indication that other memory is corrupt.'\n(Visual Studo 2022 17.13.0)\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. open project samples\\csharp\\end-to-end-apps\\ObjectDetection-Onnx\\OnnxObjectDetection.sln\n2. buld and run OnnxObjectDetectionApp\n3. See error\n\n**Expected behavior**\nrenders a live-stream of the device's web cam, runs the video frames through an object detection model using ML.NET, and paints bounding boxes with labels indicating the objects detected in real-time.\n\n**Screenshots, Code, Sample Projects**\n\n![Image](https://github.com/user-attachments/assets/a3093efc-7848-42af-8e6c-6b8f70fba65d)\n\n","Url":"https://github.com/dotnet/machinelearning/issues/7359","RelatedDescription":"Open issue \"ObjectDetection-Onnx System.AccessViolationException: 'Attempted to read or write protected memory.\" (#7359)"},{"Id":"2754903044","IsPullRequest":true,"CreatedAt":"2025-01-07T00:27:18","Actor":"dotnet-maestro[bot]","Number":"7351","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c692823c-b896-437f-4f57-08dc434cc8f6)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: c692823c-b896-437f-4f57-08dc434cc8f6\r\n- **Build**: 20241226.1\r\n- **Date Produced**: December 27, 2024 1:43:05 AM UTC\r\n- **Commit**: ae8d2a08f1021624ae37cdd5b65f6c05e58a051b\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n  - **Microsoft.DotNet.SignTool**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n  - **Microsoft.DotNet.XliffTasks**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n\r\n[2]: https://github.com/dotnet/arcade/compare/255d5e0c89...ae8d2a08f1\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:c692823c-b896-437f-4f57-08dc434cc8f6)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7351","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#7351)"},{"Id":"2756683010","IsPullRequest":false,"CreatedAt":"2024-12-23T20:34:03","Actor":"MithrilMan","Number":"7353","RawContent":null,"Title":"Whisper Tokenizer support","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\nWhisper tokenizer support needed\n\n**Describe the solution you'd like**\nWould be nice to have support for the Whisper tokenizer.\n\n**Describe alternatives you've considered**\nI'm new to tokenizers so I'm not sure if what I'm doing right now is correct but I'm trying to use a BpeTokenizer passing vocab and merges files and the special tokens (not straightforward because for example I'm reading this file https://huggingface.co/onnx-community/whisper-large-v3-turbo/blob/main/special_tokens_map.json and I need to read vocab file too to get the max id to know where to start from to map special token to id number)\n\nThe linked repository has even a tokenizer.json that I suppose contains already everything without the need to pass vocab and merges, but I don't see a way to use it out of the box (I haven't find a constructor that accepts a tokenizer.json file)\n\n\n","Url":"https://github.com/dotnet/machinelearning/issues/7353","RelatedDescription":"Open issue \"Whisper Tokenizer support\" (#7353)"},{"Id":"2754555542","IsPullRequest":false,"CreatedAt":"2024-12-22T08:47:21","Actor":"piercarlo62","Number":"7350","RawContent":null,"Title":"ML.NET NER - Mismatched state_dict sizes: expected 60, but found 126 entries.","State":"open","Body":"Hello,\nI'm testing the NER capabilities of ML.NET and on training I'm getting following error:\nError: Mismatched state_dict sizes: expected 60, but found 126 entries.\n\n---\n**System Information:**\n - OS & Version: Windows 10\n - ML.NET Version: ML.NET v4.0.0\n - .NET Version: .NET 8.0\n\n**Description of the bug**\non `var transformer = estimator.Fit(dataView);` -> **Mismatched state_dict sizes: expected 60, but found 126 entries**\n\n```\nMismatched state_dict sizes: expected 60, but found 126 entries.\nin TorchSharp.torch.nn.Module.load(BinaryReader reader, Boolean strict, IList`1 skip, Dictionary`2 loadedParameters)\n   in TorchSharp.torch.nn.Module.load(String location, Boolean strict, IList`1 skip, Dictionary`2 loadedParameters)\n   in Microsoft.ML.TorchSharp.NasBert.NasBertTrainer`2.NasBertTrainerBase.CreateModule(IChannel ch, IDataView input)\n   in Microsoft.ML.TorchSharp.TorchSharpBaseTrainer`2.TrainerBase..ctor(TorchSharpBaseTrainer`2 parent, IChannel ch, IDataView input, String modelUrl)\n   in Microsoft.ML.TorchSharp.NasBert.NasBertTrainer`2.NasBertTrainerBase..ctor(TorchSharpBaseTrainer`2 parent, IChannel ch, IDataView input, String modelUrl)\n   in Microsoft.ML.TorchSharp.NasBert.NerTrainer.Trainer..ctor(TorchSharpBaseTrainer`2 parent, IChannel ch, IDataView input)\n   in Microsoft.ML.TorchSharp.NasBert.NerTrainer.CreateTrainer(TorchSharpBaseTrainer`2 parent, IChannel ch, IDataView input)\n   in Microsoft.ML.TorchSharp.TorchSharpBaseTrainer`2.Fit(IDataView input)\n   in Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\n   in Program.Main(String[] args) in C:\\Users\\pierc\\source\\repos\\ML_NER_TEST\\Program.cs: riga 64\n```\n**Sample Projects**\n\n```\nusing Microsoft.ML;\nusing Microsoft.ML.Data;\nusing Microsoft.ML.TorchSharp;\n\nnamespace ML_NER_TEST\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            try\n            {\n                var context = new MLContext()\n                {\n                    FallbackToCpu = true,\n                    GpuDeviceId = 0\n                };\n\n                var labels = context.Data.LoadFromEnumerable(\n                    [\n                            new Label { Key = \"PERSON\" },       // People, including fictional.\n                            new Label { Key = \"NORP\" },         // Nationalities or religious or political groups.\n                            new Label { Key = \"FAC\" },          // Buildings, airports, highways, bridges, etc.\n                            new Label { Key = \"ORG\" },          // Companies, agencies, institutions, etc.\n                            new Label { Key = \"GPE\" },          // Countries, cities, states.\n                            new Label { Key = \"LOC\" },          // Non-GPE locations, mountain ranges, bodies of water.\n                            new Label { Key = \"PRODUCT\" },      // Objects, vehicles, foods, etc. (Not services.)\n                            new Label { Key = \"EVENT\" },        // Named hurricanes, battles, wars, sports events, etc.\n                            new Label { Key = \"WORK_OF_ART\" },  // Titles of books, songs, etc.\n                            new Label { Key = \"LAW\" },          // Named documents made into laws.\n                            new Label { Key = \"LANGUAGE\" },     // Any named language.\n                            new Label { Key = \"DATE\" },         // Absolute or relative dates or periods.\n                            new Label { Key = \"TIME\" },         // Times smaller than a day.\n                            new Label { Key = \"PERCENT\" },      // Percentage, including \"%\".\n                            new Label { Key = \"MONEY\" },        // Monetary values, including unit.\n                            new Label { Key = \"QUANTITY\" },     // Measurements, as of weight or distance.\n                            new Label { Key = \"ORDINAL\" },      // \"first\", \"second\", etc.\n                            new Label { Key = \"CARDINAL\" },     // Numerals that do not fall under another type.\n                            new Label { Key = \"OBJECT\" },       // An Object, Entity might be a Spoon, or a Soccer Ball. Needs Sub Categories.\n                ]);\n\n                var dataView = context.Data.LoadFromEnumerable(\n                    new List<InputTrainingData>([\n                        new InputTrainingData()\n                    {   \n                        // Testing longer than 512 words.\n                        Sentence = \"Alice and Bob live in the USA\",\n                        Label = [\"PERSON\", \"0\", \"PERSON\", \"0\", \"0\", \"0\", \"COUNTRY\"]\n                    },\n                    new InputTrainingData()\n                     {\n                        Sentence = \"Frank and Alice traveled along the California coast.\",\n                        Label = [\"PERSON\", \"0\", \"PERSON\", \"0\", \"0\", \"0\", \"COUNTRY\", \"0\"]\n                     },\n                    ]));\n\n                var chain = new EstimatorChain<ITransformer>();\n\n                var estimator = chain.Append(context.Transforms.Conversion.MapValueToKey(\"Label\", keyData: labels))\n                   .Append(context.MulticlassClassification.Trainers.NamedEntityRecognition(outputColumnName: \"Predictions\"))\n                   .Append(context.Transforms.Conversion.MapKeyToValue(\"Predictions\"));\n\n                Console.WriteLine(\"Training the model...\");\n\n                var transformer = estimator.Fit(dataView);\n\n                Console.WriteLine(\"Model trained!\");\n\n                var transformerSchema = transformer.GetOutputSchema(dataView.Schema);\n\n                string sentence = \"Alice and Bob live in the USA\";\n                var engine = context.Model.CreatePredictionEngine<Input, Output>(transformer);\n\n                Console.WriteLine(\"Predicting...\");\n\n                Output predictions = engine.Predict(new Input { Sentence = sentence });\n\n                Console.WriteLine($\"Predictions: {sentence} - {string.Join(\", \", predictions.Predictions)}\");\n\n                transformer.Dispose();\n                Console.WriteLine(\"Success!\");\n                Console.ReadLine();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"Error: {ex.Message}\");\n                Console.ReadLine();\n            }\n        }\n        private class Input\n        {\n            public string Sentence;\n            public string[] Label;\n        }\n        private class Output\n        {\n            public string[] Predictions;\n        }\n        public class Label\n        {\n            public string Key { get; set; }\n        }\n        private class InputTrainingData\n        {\n            public string Sentence;\n            public string[] Label;\n        }\n    }\n}\n```\n\n**Additional context**\n\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>disable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"libtorch-cpu-win-x64\" Version=\"2.5.1\" />\n    <PackageReference Include=\"Microsoft.ML\" Version=\"4.0.0\" />\n    <PackageReference Include=\"Microsoft.ML.Tokenizers\" Version=\"1.0.0\" />\n    <PackageReference Include=\"Microsoft.ML.TorchSharp\" Version=\"0.22.0\" />\n    <PackageReference Include=\"TorchSharp\" Version=\"0.105.0\" />\n  </ItemGroup>\n\n</Project>\n```","Url":"https://github.com/dotnet/machinelearning/issues/7350","RelatedDescription":"Open issue \"ML.NET NER - Mismatched state_dict sizes: expected 60, but found 126 entries.\" (#7350)"},{"Id":"2746656489","IsPullRequest":false,"CreatedAt":"2024-12-20T02:42:25","Actor":"chengqun","Number":"7346","RawContent":null,"Title":"iphone (ios) can use ml.net ?","State":"closed","Body":"net9.0-ios 失败，出现 1 错误 (0.0)\n    /Users/../.nuget/packages/microsoft.ml/4.0.0/build/netstandard2.0/Microsoft.ML.targets(16,5): error : Microsoft.ML currently supports 'x64' and 'x86' processor architectures. Please ensure your application is targeting 'x64' or 'x86'.\n\nmaui use \"Microsoft.ML\" load \"model.zip\" ERROR\n\nos : iphone 14 pro max ","Url":"https://github.com/dotnet/machinelearning/issues/7346","RelatedDescription":"Closed issue \"iphone (ios) can use ml.net ?\" (#7346)"},{"Id":"2751070646","IsPullRequest":false,"CreatedAt":"2024-12-19T17:48:19","Actor":"Eddie-Hartman","Number":"7348","RawContent":null,"Title":"OnnxTransformer GetNamedOnnxValueUnknownSize Index Error","State":"open","Body":"**System Information (please complete the following information):**\n - OS & Version: Windows 11\n - ML.NET Version: 3.0.1 (Also applicable for 4.0)\n - .NET Version: .NET 8.0\n\n**Describe the bug**\n`Splitter/consolidator worker encountered exception while consuming source data` error, but seems like the underlying ML.NET library code is the cause of the issue.\nIn OnnxTransform.cs, there is a _zeroIndex variable that looks for the tensorShape IndexOf(0). When not found, that will return -1, but then it tries to use that value in assignment for GetNamedOnnxValueUnknownSize() method, thus causing an index out of bounds error.\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. See below about getting access to repo and code.\n2. Unfortunately, other than that I'm not going to be really helpful other than pointing out where in the library it's occurring. The size is looking for a 0 in the shape, but there isn't one. I'm also a bit confused by the \"UnknownSize\" part in general since in my example I know the size of each input and output at each step.\n\n**Expected behavior**\nError not to be thrown.\n\n**Screenshots, Code, Sample Projects**\nI can give temporary access to git repo to a Microsoft employee or contributor who'd look into this, but not making it public. The repo shows a model that runs successfully without using ML.NET pipelines (straight ONNX runtime) and has a separate method where this issue is occurring where I was trying to set up the ML.NET pipeline to work.\n\nHere's a really trimmed down version where I'm just trying to get an EfficientNet model running. Last line is what throws the error.\n\n```Csharp\n        var pipeline = mlContext.Transforms.ResizeImages(\"resizedImage\", classificationModelImageWidth, classificationModelImageHeight, nameof(ImageFile.Input), ImageResizingEstimator.ResizingKind.Fill)\n            .Append(mlContext.Transforms.ExtractPixels(\"tensored_image\", \"resizedImage\", ImagePixelExtractingEstimator.ColorBits.Rgb,\n                ImagePixelExtractingEstimator.ColorsOrder.ARGB, true, scaleImage: 1f / 255f))\n            .Append(mlContext.Transforms.CustomMapping<ImagePixelInput, ImagePixelOutput>((input, output) =>\n            {\n                //Normalize the values.\n                //Since we are in CHW format, we will go through all R, G, then B pixels in that order.\n                //So for each third us the appropriate value.\n                output.NormalizedPixels = new float[input.ImagePixels.Length];\n                float[] means = [0.485f, 0.456f, 0.406f];\n                float[] stds = [0.229f, 0.224f, 0.225f];\n                int colorLength = input.ImagePixels.Length / 3; //The number of values for a single color\n                for (int c = 0; c < 3; c++)\n                {\n                    for (int i = 0; i < colorLength; i++)\n                    {\n                        output.NormalizedPixels[c * colorLength + i] = (input.ImagePixels[c * colorLength + i] - means[c]) / stds[c];\n                    }\n                }\n\n                Console.WriteLine($\"First 10 normalized pixels: {string.Join(\", \", output.NormalizedPixels.Take(10))}\");\n            },\n            \"NormalizeImage\"))\n            .Append(mlContext.Transforms.ApplyOnnxModel(\"output\", \"input\", classificationFilePath));\n\n        var model = pipeline.Fit(data);\n\n        // Read image into stream.\n        using MemoryStream memoryStream = new(imageBytes);\n\n        IEnumerable<ImageFile> images = [new(memoryStream)];\n        IDataView imageDataView = mlContext.Data.LoadFromEnumerable(images);\n        IDataView scoredData = model.Transform(imageDataView);\n\n        var schema = scoredData.Schema;\n        foreach (var column in schema)\n        {\n            Console.WriteLine($\"{column.Name}: {column.Type}\");\n        }\n\n        var test = scoredData.GetColumn<float[]>(\"input\").First();\n\n        // EDDIE current issue seems to be that _zeroIndex in get GetNamedOnnxValueUnknownSize in OnnxTransformer.cs\n\n        var test2 = scoredData.GetColumn<float[]>(\"output\").ToArray();\n```\n\n**Additional context**\nI stumbled upon this after getting one ONNX model working fine with a transformer pipeline, but when I tried to do something similar with a different ONNX model some of the same code throws errors. I then set everything up to run as an InferenceSession instead and that works fine. So revisiting and working backwards to make sure everything was working the same in the transformers is what lead me to dig deeper and currently believe this is a bug.\n\nTo be clear, I'm new to this library and not super knowledgeable about this subject overall, so take everything I'm saying with a grain of salt.","Url":"https://github.com/dotnet/machinelearning/issues/7348","RelatedDescription":"Open issue \"OnnxTransformer GetNamedOnnxValueUnknownSize Index Error\" (#7348)"},{"Id":"2749695630","IsPullRequest":false,"CreatedAt":"2024-12-19T09:12:09","Actor":"EachShow","Number":"7347","RawContent":null,"Title":"Why is the prediction so much slower after upgrading to version ML Fast Tree 4.0?","State":"open","Body":"**System Information (please complete the following information):**\n - OS & Version: Windows 11 \n - ML.NET Version: V4.0\n - .NET Version: 9.0.101\n\n**Describe the bug**\nthe prediction is so much slower than ML V3\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. run the program in V3\n2. run the same program in V4\n3. the prediction speed is so much slower\n\n**Expected behavior**\nthe prediction speed is no significant change than V3","Url":"https://github.com/dotnet/machinelearning/issues/7347","RelatedDescription":"Open issue \"Why is the prediction so much slower after upgrading to version ML Fast Tree 4.0?\" (#7347)"},{"Id":"2745265578","IsPullRequest":false,"CreatedAt":"2024-12-17T15:39:59","Actor":"lolsoftware","Number":"7345","RawContent":null,"Title":"PFI (Permutation Feature Importance) takes forever on some regression models created using AutoML","State":"open","Body":"**System Information**\n - Windows 11\n - ML.NET v4.0.0\n - .NET 8.0\n\n**Describe the bug**\nCalculating PFI seems to hang (take forever) for some regression models created using AutoML. For other models (created against the same learning data) calculating PFI takes just a couple of seconds.\n\n**To Reproduce**\nRun the attached program.\n\n**Expected behavior**\nI would expect PFI to complete in a timely fashion. Or at least provide a mechanism to monitor the progress of PFI calculation with the ability to cancel it.\n\n**Screenshots, Code, Sample Projects**\nThe attached program contains two regression models created using AutoML, and a set of data used to create the two models. The program first calculates PFI against the first model which takes just a couple of seconds. Then the program tries to calculate PFI against the second model which takes forever.\n[test project.zip](https://github.com/user-attachments/files/18167832/test.project.zip)\n\n","Url":"https://github.com/dotnet/machinelearning/issues/7345","RelatedDescription":"Open issue \"PFI (Permutation Feature Importance) takes forever on some regression models created using AutoML\" (#7345)"},{"Id":"2743502252","IsPullRequest":true,"CreatedAt":"2024-12-17T07:48:28","Actor":"ericstj","Number":"7342","RawContent":null,"Title":"Update MicrosoftExtensionsDependencyModelVersion","State":"closed","Body":"backport https://github.com/dotnet/machinelearning/pull/7338","Url":"https://github.com/dotnet/machinelearning/pull/7342","RelatedDescription":"Closed or merged PR \"Update MicrosoftExtensionsDependencyModelVersion\" (#7342)"},{"Id":"2743672834","IsPullRequest":false,"CreatedAt":"2024-12-17T00:28:58","Actor":"ericstj","Number":"7344","RawContent":null,"Title":"Run helix tests still fails the build when all issues are known","State":"open","Body":"https://github.com/dotnet/machinelearning/pull/7266/checks?check_run_id=34504009688\n\n![Image](https://github.com/user-attachments/assets/4633958f-7df1-4c50-9fe8-3838fa56f4bf)\n\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=896796&view=logs&j=5de11fe4-b78c-5e85-6c71-18cb0c3c520b&t=1bd76744-ce54-5897-6864-351eb3621929&l=31\n\n```\n/Users/runner/.nuget/packages/microsoft.dotnet.helix.sdk/10.0.0-beta.24613.2/tools/azure-pipelines/AzurePipelines.MultiQueue.targets(44,5): error : Test Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression has failed. Check the Test tab or this console log: https://helix.dot.net/api/2019-06-17/jobs/e87e490f-2d11-4e22-b317-ddb93ea4a25a/workitems/Microsoft.ML.Tests/console [/Users/runner/work/1/s/eng/helix.proj]\n\nBuild FAILED.\n\n/Users/runner/.nuget/packages/microsoft.dotnet.helix.sdk/10.0.0-beta.24613.2/tools/azure-pipelines/AzurePipelines.MultiQueue.targets(44,5): error : Test Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression has failed. Check the Test tab or this console log: https://helix.dot.net/api/2019-06-17/jobs/e87e490f-2d11-4e22-b317-ddb93ea4a25a/workitems/Microsoft.ML.Tests/console [/Users/runner/work/1/s/eng/helix.proj]\n    0 Warning(s)\n    1 Error(s)\n```\n\nI'm not sure why this is happening, we might need to ask the infra team what we're supposed to do in order to get BuildAnalysis to turn itself green here.","Url":"https://github.com/dotnet/machinelearning/issues/7344","RelatedDescription":"Open issue \"Run helix tests still fails the build when all issues are known\" (#7344)"},{"Id":"2743599249","IsPullRequest":false,"CreatedAt":"2024-12-16T23:26:00","Actor":"ericstj","Number":"7343","RawContent":null,"Title":"SdcaLogisticRegression failing with LogLoss value above 0.5 on Apple M1","State":"open","Body":"## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=894906\nBuild error leg or test failing: Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression\nPull request: https://github.com/dotnet/machinelearning/pull/7319\n<!-- Error message template  -->\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n<!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->\n\n```json\n{\n  \"ErrorMessage\": [ \"Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression\", \"Assert.InRange() Failure: Value not in range\",  \"Range:  (0 - 0.5)\" ],\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n```\nException Message\nAssert.InRange() Failure: Value not in range\nRange:  (0 - 0.5)\nActual: 0.52012587333147553\nCallStack\n   at Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression() in /Users/runner/work/1/s/test/Microsoft.ML.Tests/TrainerEstimators/SdcaTests.cs:line 86\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\n```\n\nSome sample logs from recent builds:\nhttps://helixr1107v0xdeko0k025g8.blob.core.windows.net/dotnet-machinelearning-refs-pull-7319-merge-3b48a7c42a8e4e058e/Microsoft.ML.Tests/1/console.d0d11103.log?helixlogtype=result\nhttps://helixr1107v0xdeko0k025g8.blob.core.windows.net/dotnet-machinelearning-refs-pull-7266-merge-e87e490f2d114e22b3/Microsoft.ML.Tests/1/console.41404a72.log\n\n\nI wonder if we have a math problem here worth investigating or if we should just increase the threshold?\r\n<!-- Known issue validation start -->\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=894906\r\n**Error message validated:** `[Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression Assert.InRange() Failure: Value not in range Range:  (0 - 0.5)`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 12/16/2024 11:26:11 PM UTC\r\n<!-- Known issue validation end -->\r\n<!--Known issue error report start -->\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[916018](https://dev.azure.com/dnceng-public/public/_build/results?buildId=916018)|dotnet/machinelearning|[Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression](https://dev.azure.com/dnceng-public/public/_build/results?buildId=916018&view=ms.vss-test-web.build-test-results-tab&runId=24194620&resultId=101739)||\r\n|[916015](https://dev.azure.com/dnceng-public/public/_build/results?buildId=916015)|dotnet/machinelearning|[Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression](https://dev.azure.com/dnceng-public/public/_build/results?buildId=916015&view=ms.vss-test-web.build-test-results-tab&runId=24194558&resultId=101739)||\r\n|[909099](https://dev.azure.com/dnceng-public/public/_build/results?buildId=909099)|dotnet/machinelearning|[Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression](https://dev.azure.com/dnceng-public/public/_build/results?buildId=909099&view=ms.vss-test-web.build-test-results-tab&runId=23958872&resultId=101739)|dotnet/machinelearning#7358|\r\n|[901744](https://dev.azure.com/dnceng-public/public/_build/results?buildId=901744)|dotnet/machinelearning|[Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression](https://dev.azure.com/dnceng-public/public/_build/results?buildId=901744&view=ms.vss-test-web.build-test-results-tab&runId=23673314&resultId=101737)|dotnet/machinelearning#7351|\r\n|[901263](https://dev.azure.com/dnceng-public/public/_build/results?buildId=901263)|dotnet/machinelearning|[Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression](https://dev.azure.com/dnceng-public/public/_build/results?buildId=901263&view=ms.vss-test-web.build-test-results-tab&runId=23655278&resultId=101737)|dotnet/machinelearning#7349|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|2|5|\r\n<!--Known issue error report end -->","Url":"https://github.com/dotnet/machinelearning/issues/7343","RelatedDescription":"Open issue \"SdcaLogisticRegression failing with LogLoss value above 0.5 on Apple M1\" (#7343)"},{"Id":"2743483632","IsPullRequest":false,"CreatedAt":"2024-12-16T22:00:39","Actor":"ericstj","Number":"7341","RawContent":null,"Title":"LibMF submodule","State":"open","Body":"Does it make sense to keep this as a submodule?  It looks like it receives very few changes.\n\nWe could just fork it and keep a local copy, like we do for dependencies in dotnet/runtime.  That allows us to more easily update.\n\n\n","Url":"https://github.com/dotnet/machinelearning/issues/7341","RelatedDescription":"Open issue \"LibMF submodule\" (#7341)"},{"Id":"2743460059","IsPullRequest":true,"CreatedAt":"2024-12-16T21:45:27","Actor":"ericstj","Number":"7340","RawContent":null,"Title":"Enable APICompat for non-stable projects","State":"open","Body":"Should help folks avoid problems like https://github.com/dotnet/machinelearning/pull/7331\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7340","RelatedDescription":"Open PR \"Enable APICompat for non-stable projects\" (#7340)"},{"Id":"2743179003","IsPullRequest":true,"CreatedAt":"2024-12-16T21:40:44","Actor":"ericstj","Number":"7338","RawContent":null,"Title":"Update DependencyModel","State":"closed","Body":"This was transitively bringing in an older System.Text.Json in the test projects\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7338","RelatedDescription":"Closed or merged PR \"Update DependencyModel\" (#7338)"},{"Id":"2743412824","IsPullRequest":false,"CreatedAt":"2024-12-16T21:15:04","Actor":"ericstj","Number":"7339","RawContent":null,"Title":"Tests using Onnx fail with `LoadOrtModelWithLoader ORT model verification failed`","State":"open","Body":"## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=895122\nBuild error leg or test failing: Microsoft.ML.Tests.DnnImageFeaturizerTests.TestDnnImageFeaturizer\nPull request: https://github.com/dotnet/machinelearning/pull/7334\n<!-- Error message template  -->\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n<!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->\n\n```json\n{\n  \"ErrorMessage\": \"LoadOrtModelWithLoader ORT model verification failed.\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\nSample stack:\n```\nSystem.InvalidOperationException : Error during class instantiation\n---- System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation.\n-------- System.InvalidOperationException : Error during class instantiation\n------------ System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation.\n---------------- System.InvalidOperationException : Error initializing model :Microsoft.ML.OnnxRuntime.OnnxRuntimeException: [ErrorCode:Fail] inference_session.cc:1357 onnxruntime::InferenceSession::LoadOrtModelWithLoader ORT model verification failed.\n   at Microsoft.ML.OnnxRuntime.InferenceSession.Init(String modelPath, SessionOptions options, PrePackedWeightsContainer prepackedWeightsContainer)\n   at Microsoft.ML.OnnxRuntime.InferenceSession..ctor(String modelPath, SessionOptions options)\n   at Microsoft.ML.Transforms.Onnx.OnnxModel..ctor(IHostEnvironment env, String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu, Boolean ownModelFile, IDictionary`2 shapeDictionary, Int32 recursionLimit, Nullable`1 interOpNumThreads, Nullable`1 intraOpNumThreads) in D:\\a\\_work\\1\\s\\src\\Microsoft.ML.OnnxTransformer\\OnnxUtils.cs:line 242\n   at Microsoft.ML.Transforms.Onnx.OnnxModel.CreateFromBytes(Byte[] modelBytes, IHostEnvironment env, Nullable`1 gpuDeviceId, Boolean fallbackToCpu, IDictionary`2 shapeDictionary, Int32 recursionLimit) in D:\\a\\_work\\1\\s\\src\\Microsoft.ML.OnnxTransformer\\OnnxUtils.cs:line 410\n   at Microsoft.ML.Transforms.Onnx.OnnxTransformer..ctor(IHostEnvironment env, Options options, Byte[] modelBytes) in D:\\a\\_work\\1\\s\\src\\Microsoft.ML.OnnxTransformer\\OnnxTransform.cs:line 280\n-------------------- Microsoft.ML.OnnxRuntime.OnnxRuntimeException : [ErrorCode:Fail] inference_session.cc:1357 onnxruntime::InferenceSession::LoadOrtModelWithLoader ORT model verification failed.\n```\n\r\n<!-- Known issue validation start -->\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=895122\r\n**Error message validated:** `[LoadOrtModelWithLoader ORT model verification failed.`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 12/16/2024 9:15:15 PM UTC\r\n<!-- Known issue validation end -->\r\n<!--Known issue error report start -->\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n<!--Known issue error report end -->","Url":"https://github.com/dotnet/machinelearning/issues/7339","RelatedDescription":"Open issue \"Tests using Onnx fail with `LoadOrtModelWithLoader ORT model verification failed`\" (#7339)"}],"ResultType":"GitHubIssue"}},"RunOn":"2025-01-17T03:30:18.5376494Z","RunDurationInMilliseconds":472}