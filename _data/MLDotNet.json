{"Data":{"GitHub":{"Issues":[{"Id":"623733113","IsPullRequest":false,"CreatedAt":"2020-05-23T20:08:35","Actor":"dcostea","Number":"5156","RawContent":null,"Title":"CustomMappingEstimator Exportable to ONNX?","State":"open","Body":"### Question\r\n\r\n- **Will be CustomMappingEstimator exportable to ONNX in the future?**\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5156","RelatedDescription":"Open issue \"CustomMappingEstimator Exportable to ONNX?\" (#5156)"},{"Id":"623665093","IsPullRequest":false,"CreatedAt":"2020-05-23T13:52:11","Actor":"shywa","Number":"5155","RawContent":null,"Title":"Application crashes inside Docker containing when using .Fit()","State":"open","Body":"When creating a model for a recommender system that uses MatrixFactorization, the Docker Container crashes on an Ubuntu server without further notice.\r\n\r\nThe only note in the kernel log is\r\n`kernel: [12922.080806] traps: dotnet[30957] trap invalid opcode ip:7f07d81b5efc sp:7ffdc5965110 error:0 in libMatrixFactorizationNative.so[7f07d81a5000+2a000]`\r\n\r\nIn the local version the recommender system and the training of the model are working.\r\n\r\n### System information\r\n\r\n- **OS version/distro**:\r\nUbuntu 18.04.4 LTS (GNU/Linux 4.15.0-101-generic x86_64)\r\n- **.NET Version (eg., dotnet --info)**: \r\nHost (useful for support):\r\n  Version: 3.1.4\r\n  Commit:  0c2e69caa6\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nStarting training of a new model using matrix factorization\r\n- **What happened?**\r\nThe application and the Docker Container crash without further message or exception.\r\n- **What did you expect?**\r\nTraining of a new model or at least an exception\r\n\r\n### Source code / logs\r\n\r\n#### Implementation:\r\n```\r\nLog.Information(\"Extracting train data...\");\r\nvar trainingData = GetDataView(trainData);\r\n\r\nvar options = new MatrixFactorizationTrainer.Options\r\n{\r\n    MatrixColumnIndexColumnName = UserIdEncoding,\r\n    MatrixRowIndexColumnName = MusicIdEncoding,\r\n    LabelColumnName = \"Label\",\r\n    NumberOfIterations = 20,\r\n    ApproximationRank = 100,\r\n    //Quiet = false\r\n};\r\nLog.Information(\"Setting Matrix Factorization\");\r\nvar trainingPipeline = trainingData.Transformer.Append(\r\n    MLContext.Recommendation().Trainers.MatrixFactorization(options));\r\n\r\nLog.Information(\"Starting training...\");\r\nITransformer trainedModel = trainingPipeline.Fit(trainingData.DataView);\r\n\r\nLog.Information(\"Saving model...\");\r\nMLContext.Model.Save(trainedModel, trainingData.DataView.Schema, ModelPath);\r\n\r\nLog.Information(\"Extracting test data...\"); ;\r\nvar testingData = GetDataView(testData);\r\n\r\nLog.Information(\"Starting model testing...\");\r\nvar testingTransform = trainedModel.Transform(testingData.DataView);\r\n\r\nLog.Information(\"Evaluating model\");\r\nreturn MLContext.Recommendation().Evaluate(testingTransform);\r\n```\r\n\r\n#### Container Logs:\r\n\r\n```\r\n[13:45:25 Information]\r\nPreparing prediction Model\r\n\r\n[13:45:25 Information]\r\nStarting Model Training...\r\n\r\n[13:45:25 Information]\r\nExtracting train data...\r\n\r\n[13:45:25 Information]\r\nSetting Matrix Factorization\r\n\r\n[13:45:25 Information]\r\nStarting training...\r\n\r\nWarning: insufficient blocks may slow down the trainingprocess (4*nr_threads^2+1 blocks is suggested)\r\nWarning: insufficient blocks may slow down the trainingprocess (4*nr_threads^2+1 blocks is suggested)\r\n--> Application crash\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5155","RelatedDescription":"Open issue \"Application crashes inside Docker containing when using .Fit()\" (#5155)"},{"Id":"623596875","IsPullRequest":true,"CreatedAt":"2020-05-23T06:54:07","Actor":"antoniovs1029","Number":"5154","RawContent":null,"Title":"Created DoubleParser.OptionFlags to be used by TextLoader","State":"open","Body":"As mentioned on https://github.com/dotnet/machinelearning/pull/5145#issuecomment-632255971 , PR #5145 opened the possibility of an issue to occur when running, _at the same time_, different cursors coming from different `TextLoaders `with different `DecimalMarkers`, as race conditions could occur. Although [we originally agreed](https://github.com/dotnet/machinelearning/pull/5145#issuecomment-632467994) to accept that fringe scenario, this PR fixes that problem, and adds a test for that scenario.\r\n\r\nThis PR also addresses the general problem, that if we add new options to `TextLoader `that need to affect how we parse Single/Doubles, then there was no direct/thread-safe way to make these options affect how `DoubleParser `works... For example, issue #4132 would require adding a new `TextLoader.Option` \"impute\" that needs to affect how `DoubleParser `works. Other case would be the offline suggestion of also adding a `ThousandsMarker` option to be able to parse `10,332.05` or `10.332,05` into `10332.05` depending on that option.\r\n\r\n### General explanation of the PR\r\nWithout this PR the behavior was that `TextLoader.Parser` would use the singleton `TextLoader.ValueCreatorCache.Instance` to get the delegates to parse the fields loaded from a file. In turn, the `ValueCreatorCache` singleton would have gotten those delegates from the singleton `Conversion.Instance`, whose methods for parsing text to single/doubles would, then, call static methods in `DoubleParser`.\r\n\r\n**I am assuming that the only reason to have both `ValueCreatorCache` and `Conversion `follow the singleton pattern was for performance reasons, so that they didn't have to create the delegates every time somewhere in the code their instances were needed**\r\n\r\nWith this PR:\r\n1. I created a new `DoubleParser.OptionFlags` enum that is used by `TextLoader`, and gets propagated through `ValueCreatorCache `up to `Conversion `in order to call the static `DoubleParser `methods with the correct options.\r\n2. I added code to `ValueCreatorCache `and `Conversion `to let them create other instances besides its default instance. Most of the codebase would still use their default instance, so this PR doesn't affect performance or behavior there. It's only in `TextLoader`, and only in the case when using custom options for `DoubleParser`, that a custom instance of `ValueCreatorCache `and `Conversion `gets created. So then performance would only be somewhat affected when creating those instances for that particular case. To have minimum impact in performance, I also added a `ConcurrentDictionary `to hold the `_customInstances `of `ValueCreatorCache `(i.e. those which were created using non-default `DoubleParser.OptionFlags`)... this way, when using custom options, the custom instance of `ValueCreatorCache `and Conversion would only be created once, and would be reused afterwards.","Url":"https://github.com/dotnet/machinelearning/pull/5154","RelatedDescription":"Open PR \"Created DoubleParser.OptionFlags to be used by TextLoader\" (#5154)"},{"Id":"621419479","IsPullRequest":true,"CreatedAt":"2020-05-22T22:01:37","Actor":"mstfbl","Number":"5145","RawContent":null,"Title":"Added decimal marker option in TextLoader","State":"closed","Body":"This PR adds the decimal marker option in TextLoader, so that cultures where a comma is the decimal marker (as in 3,5 = 3.5 * 10^1) can use their appropriate datasets. This also updates `verWrittenCur` as it is now writing `decimalMarker` during serialization as well. In addition, this PR also adds in a unit test to check whether or not a dataset with `','` as its decimal marker is read in and processed correctly.\r\n\r\nFix #4910 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5145","RelatedDescription":"Closed or merged PR \"Added decimal marker option in TextLoader\" (#5145)"},{"Id":"623380398","IsPullRequest":true,"CreatedAt":"2020-05-22T17:39:39","Actor":"harishsk","Number":"5153","RawContent":null,"Title":"Updated doc comments and renamed public types","State":"open","Body":"@gvashishtha Left a few doc comments on the earlier anomaly and time series PRs. I am addressing them here. The comments I could not address, I have copied them here. \r\nPlease review the changes and help me with the questions. \r\n\r\nSince this is part of the public API, I have also taken the liberty to rename the following types and names:\r\n- Name `AggType` to `AggregateType`\r\n- Name `AggSymbol` to `AggregateSymbol`\r\n- Type `Point` to `TimeSeriesPoint`\r\n\r\nPlease review whether these renames are appropriate. ","Url":"https://github.com/dotnet/machinelearning/pull/5153","RelatedDescription":"Open PR \"Updated doc comments and renamed public types\" (#5153)"},{"Id":"623056332","IsPullRequest":true,"CreatedAt":"2020-05-22T08:47:17","Actor":"yaeldekel","Number":"5152","RawContent":null,"Title":"Change back previous version hashing of 8 byte types","State":"open","Body":"In PR #5104 he hashing function of 8 byte numeric types was changed, but there still needs to be an unchanged implementation for old version models.\r\n\r\nIn addition, found a bug in ONNX conversion of hashing of keys that have underlying type different than uint.","Url":"https://github.com/dotnet/machinelearning/pull/5152","RelatedDescription":"Open PR \"Change back previous version hashing of 8 byte types\" (#5152)"},{"Id":"622019042","IsPullRequest":true,"CreatedAt":"2020-05-21T23:49:33","Actor":"LittleLittleCloud","Number":"5148","RawContent":null,"Title":"support sweeping multiline option in AutoML","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5148","RelatedDescription":"Closed or merged PR \"support sweeping multiline option in AutoML\" (#5148)"},{"Id":"622845782","IsPullRequest":true,"CreatedAt":"2020-05-21T23:15:38","Actor":"harishsk","Number":"5151","RawContent":null,"Title":"Added release notes for v1.5 release and updated version info","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5151","RelatedDescription":"Open PR \"Added release notes for v1.5 release and updated version info\" (#5151)"},{"Id":"622841728","IsPullRequest":true,"CreatedAt":"2020-05-21T23:03:27","Actor":"Lynx1820","Number":"5150","RawContent":null,"Title":"Adding Ranking AutoML Task","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5150","RelatedDescription":"Open PR \"Adding Ranking AutoML Task\" (#5150)"},{"Id":"621678836","IsPullRequest":true,"CreatedAt":"2020-05-21T20:30:30","Actor":"antoniovs1029","Number":"5147","RawContent":null,"Title":"Add escapeChar support to TextLoader and added benchmark for TextLoader","State":"closed","Body":"Adds feature requested here: https://github.com/dotnet/machinelearning/pull/5125#discussion_r425735487\r\n\r\nAnd also a benchmark for TextLoader, whose results are reported here:\r\nhttps://github.com/dotnet/machinelearning/pull/5147#discussion_r428583991\r\n\r\nThe feature is exposing a new option called escapeChar to the users, which is used to escape quote characters inside quoted fields.\r\n\r\nSo if `escapeChar = \\`, then the second field of the following row:\r\n`1,\"this \\\" quote was escaped\",true`\r\n\r\nwill be loaded as\r\n`this \" quote was escaped`\r\n\r\nDefault behavior (which was the behavior even before this PR) is that `escapeChar = \"` since 2 double quotes (\"\") has always been used to escape quotes inside quoted fields by ML.NET.","Url":"https://github.com/dotnet/machinelearning/pull/5147","RelatedDescription":"Closed or merged PR \"Add escapeChar support to TextLoader and added benchmark for TextLoader\" (#5147)"},{"Id":"618966627","IsPullRequest":true,"CreatedAt":"2020-05-21T19:44:55","Actor":"mengaims","Number":"5135","RawContent":null,"Title":"Add SrCnn entire API by implementing function","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5135","RelatedDescription":"Closed or merged PR \"Add SrCnn entire API by implementing function\" (#5135)"},{"Id":"619337977","IsPullRequest":true,"CreatedAt":"2020-05-21T18:34:10","Actor":"Lynx1820","Number":"5138","RawContent":null,"Title":"Adding support for MurmurHash KeyDataTypes ","State":"closed","Body":"ML.NET's behavior is to map zero input values to zero, instead of hashes. \r\n- Adding that behavior to the onnx export and a test. \r\n\r\nTODO:  rebase once other murmurhash PR are merged \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5138","RelatedDescription":"Closed or merged PR \"Adding support for MurmurHash KeyDataTypes \" (#5138)"},{"Id":"622228315","IsPullRequest":true,"CreatedAt":"2020-05-21T03:55:22","Actor":"frank-dong-ms","Number":"5149","RawContent":null,"Title":"set Session as public so user can have access to tf graph","State":"open","Body":"Address issue: https://github.com/dotnet/machinelearning/issues/4568\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5149","RelatedDescription":"Open PR \"set Session as public so user can have access to tf graph\" (#5149)"},{"Id":"621430363","IsPullRequest":true,"CreatedAt":"2020-05-20T03:25:04","Actor":"wangyems","Number":"5146","RawContent":null,"Title":"Uniform onnx conversion method when using non-default column names","State":"open","Body":"Resolve https://github.com/dotnet/machinelearning/issues/3089\r\n\r\nAccording to https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/Commands/DefaultColumnNames.cs#L8, the intention of using default column names is to uniform public API surface. Instead of silently return(which causes the onnx conversion failed), throw an exception that tells customer to correct the column name.\r\n\r\nIn BinaryClassification: using runtime error instead of silently return\r\nIn MultiClassification: the existing implementation already throws with informational message\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5146","RelatedDescription":"Open PR \"Uniform onnx conversion method when using non-default column names\" (#5146)"},{"Id":"618708640","IsPullRequest":true,"CreatedAt":"2020-05-19T22:35:38","Actor":"frank-dong-ms","Number":"5133","RawContent":null,"Title":"use new meta file from premium storage account","State":"closed","Body":"Recently we are seeing couple of download meta file timeout/failure, checked the old blob storage for meta files, it is using Standard configuration and can't upgrade to premium once created.\r\n\r\nCreated new premium storage account as below to see if we get better stability: \r\nhttps://ms.portal.azure.com/#@microsoft.onmicrosoft.com/resource/subscriptions/00c06639-6ee4-454e-8058-8d8b1703bd87/resourcegroups/ML.NET/providers/Microsoft.Storage/storageAccounts/mlnetresources/overview\r\n\r\n\r\ndifference between Standard vs Premium:\r\nhttps://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-performance-tiers","Url":"https://github.com/dotnet/machinelearning/pull/5133","RelatedDescription":"Closed or merged PR \"use new meta file from premium storage account\" (#5133)"},{"Id":"621283052","IsPullRequest":false,"CreatedAt":"2020-05-19T21:02:49","Actor":"antoniovs1029","Number":"5144","RawContent":null,"Title":"Add line limit to readMultilines in TextLoader","State":"open","Body":"_(This issue tracks @justinormont 's suggestion [here](https://github.com/dotnet/machinelearning/pull/5125#discussion_r427002585))_\r\n\r\nRecent PR #5125 added a `readMultilines `option to `TextLoader `to enable the posibility of including newlines inside quoted fields.\r\n\r\nA problem with this is that if the input file isn't correctly formatted (i.e., if it has a quote that opens a quoted field, that is never closed) then the `Multilinereader `will actually load every line until it finds another quote. Depending on the dataset (and on how many incorrectly formatted rows it has) it could actually load into memory the whole dataset (or as much as the `StringBuilder `supports, which is [typically 2^32 chars ](https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.maxcapacity?view=netcore-3.1#System_Text_StringBuilder_MaxCapacity))\r\n\r\nFor example:\r\n```\r\nid,description,animal\r\n0,\"this quoted field isnt closed,cat\r\n1,this field doesnt include quotes,dog\r\n... // no quoted fields in here\r\n2555,\"it is until this quoted field that the multilinereader actually stops reading row 0\",bird\r\n2556,\"this row will be read correctly\",dog\r\n```\r\n\r\n@justinormont 's suggestion here: https://github.com/dotnet/machinelearning/pull/5125#discussion_r427002585\r\n\r\nis to add another option to the `TextLoader `that let the user set the maximum length of a row, and if that threshold is passed, then simply ignore the line and continue reading the input file without loading everything into it.\r\n\r\nI think that before introducing more options to the `TextLoader`, it's better to see if users actually hit this problem when using `readMultilines`.","Url":"https://github.com/dotnet/machinelearning/issues/5144","RelatedDescription":"Open issue \"Add line limit to readMultilines in TextLoader\" (#5144)"},{"Id":"620810508","IsPullRequest":false,"CreatedAt":"2020-05-19T20:17:35","Actor":"ThomasArdal","Number":"5142","RawContent":null,"Title":"Is it possible to avoid the runtimes folder in build output","State":"closed","Body":"I have included the `Microsoft.ML` and `Microsoft.ML.TimeSeries` packages in an ASP.NET Core 3.1 project. Things are working great. I noticed that when including those packages in my project, I get a `runtimes` folder (almost 300 MB) in my build output. Setting `--self-contained false` as a parameter for my `deploy` command still include this folder. I have been reading about this folder being included when project includes code generating assemblies. Do one of these packages include such assemblies and is it possible to avoid having this `runtimes` folder as part of the build output?","Url":"https://github.com/dotnet/machinelearning/issues/5142","RelatedDescription":"Closed issue \"Is it possible to avoid the runtimes folder in build output\" (#5142)"},{"Id":"621152525","IsPullRequest":true,"CreatedAt":"2020-05-19T20:17:24","Actor":"mstfbl","Number":"5143","RawContent":null,"Title":"Updated installation of libomp on Mac trusted CI builds","State":"closed","Body":"This PR fixes the error our Mac trusted CI builds were showing with regards to the installation of `libomp` with Homebrew, and mirrors the changes done in #5141.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5143","RelatedDescription":"Closed or merged PR \"Updated installation of libomp on Mac trusted CI builds\" (#5143)"},{"Id":"620480348","IsPullRequest":true,"CreatedAt":"2020-05-19T05:58:08","Actor":"frank-dong-ms","Number":"5140","RawContent":null,"Title":"fix build issue","State":"closed","Body":"make docker update to nightlybuild pipeline and outer loop pipeline as well\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5140","RelatedDescription":"Closed or merged PR \"fix build issue\" (#5140)"},{"Id":"620525215","IsPullRequest":true,"CreatedAt":"2020-05-19T01:08:57","Actor":"mstfbl","Number":"5141","RawContent":null,"Title":"Fix libomp installation for MacOS CI Builds","State":"closed","Body":"Fix the part of installing dependencies on MacOS where libomp is added","Url":"https://github.com/dotnet/machinelearning/pull/5141","RelatedDescription":"Closed or merged PR \"Fix libomp installation for MacOS CI Builds\" (#5141)"},{"Id":"618500639","IsPullRequest":true,"CreatedAt":"2020-05-18T23:14:46","Actor":"justinormont","Number":"5130","RawContent":null,"Title":"Error message for non-parsable datasets in AutoML","State":"closed","Body":"Fixes: #5129\r\n\r\n> I'd recommend improving the current error message:\r\n> https://github.com/dotnet/machinelearning/blob/e5a19af589dfb1468cd99628e82f6b49fb125323/src/Microsoft.ML.AutoML/ColumnInference/ColumnInferenceApi.cs#L120-L123\r\n> \r\n> It currently says, `\"Unable to split the file provided into multiple, consistent columns.\"`, which is rather uninformative and non-actionable.\r\n> \r\n> Perhaps, as I think @briacht is suggesting, have it list the acceptable file formats we can parse: `\"Unable to split the file provided into multiple, consistent columns. Readable formats include delimited files such as CSV/TSV. Check for a consistent number of columns and proper escaping and quoting.\"`.\r\n> \r\n> This messaging now includes, the problem, and next steps for the user.\r\n> \r\n> I mention delimited as AutoML supports more than CSV/TSV as it tries tab, comma, space, semi-colon as the separator ([src](https://github.com/dotnet/machinelearning/blob/e50c4d20012e0d62852f404ae443afca7dad043e/src/Microsoft.ML.AutoML/ColumnInference/TextFileContents.cs#L40)). If we run into other common separators, we can trivially augment this list. One candidate is the vertical bar `|`.","Url":"https://github.com/dotnet/machinelearning/pull/5130","RelatedDescription":"Closed or merged PR \"Error message for non-parsable datasets in AutoML\" (#5130)"},{"Id":"618498354","IsPullRequest":false,"CreatedAt":"2020-05-18T23:14:46","Actor":"justinormont","Number":"5129","RawContent":null,"Title":"Improve error messaging for non-parsable datasets","State":"closed","Body":"I'd recommend improving the current error message:\r\nhttps://github.com/dotnet/machinelearning/blob/e5a19af589dfb1468cd99628e82f6b49fb125323/src/Microsoft.ML.AutoML/ColumnInference/ColumnInferenceApi.cs#L120-L123\r\n\r\nIt currently says, `\"Unable to split the file provided into multiple, consistent columns.\"`, which is rather uninformative and non-actionable.\r\n\r\nPerhaps, as I think @briacht is suggesting, have it list the acceptable file formats we can parse: `\"Unable to split the file provided into multiple, consistent columns. Readable formats include delimited files such as CSV/TSV. Check for a consistent number of columns and proper escaping and quoting.\"`.\r\n\r\nThis messaging now includes, the problem, and next steps for the user.\r\n\r\nI mention delimited as AutoML supports more than CSV/TSV as it tries tab, comma, space, semi-colon as the separator ([src](https://github.com/dotnet/machinelearning/blob/e50c4d20012e0d62852f404ae443afca7dad043e/src/Microsoft.ML.AutoML/ColumnInference/TextFileContents.cs#L40)). If we run into other common separators, we can trivially augment this list. One candidate is the vertical bar `|`.","Url":"https://github.com/dotnet/machinelearning/issues/5129","RelatedDescription":"Closed issue \"Improve error messaging for non-parsable datasets\" (#5129)"},{"Id":"619233862","IsPullRequest":true,"CreatedAt":"2020-05-18T18:02:42","Actor":"eerhardt","Number":"5136","RawContent":null,"Title":"Fix Microsoft.ML.DataView references","State":"closed","Body":"The assembly in the package references Collections.Immutable, but the nuget package doesn't. This can cause errors if someone just references the Microsoft.ML.DataView package.\r\n\r\nFixing by adding the reference.\r\n\r\nSee the .csproj here:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/212081c62855a835e0612887f705a8f87a899624/src/Microsoft.ML.DataView/Microsoft.ML.DataView.csproj#L8-L11","Url":"https://github.com/dotnet/machinelearning/pull/5136","RelatedDescription":"Closed or merged PR \"Fix Microsoft.ML.DataView references\" (#5136)"},{"Id":"618868922","IsPullRequest":true,"CreatedAt":"2020-05-16T05:39:01","Actor":"antoniovs1029","Number":"5134","RawContent":null,"Title":"Add public generic methods to TextLoader catalog that accept Options objects","State":"closed","Body":"The `TextLoaderSaverCatalog` contains 2 overloads of non-generic `CreateTextLoader` and `LoadFromTextFile`; one overload accepts a [given set of a parameters ](https://github.com/dotnet/machinelearning/blob/3da9e1e7a64f3485b811b99eaab05276a310192c/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoaderSaverCatalog.cs#L51-L58) and the other overload [accepts a TexLoader.Options object](https://github.com/dotnet/machinelearning/blob/3da9e1e7a64f3485b811b99eaab05276a310192c/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoaderSaverCatalog.cs#L83-L86).\r\n\r\nThe generic methods for `CreateTextLoader<TInput>` and `LoadFromTextFile<TInput>` only [have 1 method](https://github.com/dotnet/machinelearning/blob/3da9e1e7a64f3485b811b99eaab05276a310192c/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoaderSaverCatalog.cs#L112-L120) that accepts a given set of parameters. So in this PR I add another overload for those 2 methods that also accepts an Options object.\r\n\r\nThe reason to do this is that if we add new parameters to TextLoader (for example, as done in #5125) then they're only accessible through a TextLoader.Options (so without this PR `CreateTextLoader<TInput>` and `LoadFromTextFile<TInput>` won't be able to use the new options). Notice that we can't simply add a new parameter to the existing `CreateTextLoader<TInput>` and `LoadFromTextFile<TInput>` methods, since that is considered a breaking API change, and we can't do those until ML.NET version 2.","Url":"https://github.com/dotnet/machinelearning/pull/5134","RelatedDescription":"Closed or merged PR \"Add public generic methods to TextLoader catalog that accept Options objects\" (#5134)"},{"Id":"619369371","IsPullRequest":false,"CreatedAt":"2020-05-16T03:46:16","Actor":"frank-dong-ms","Number":"5139","RawContent":null,"Title":"Legacy tests - partially disabled tests","State":"closed","Body":"We have some tests that are partially disabled based on OS, arch or netcore version, resolve them or at least root cause them and let test running on all platform.\r\n\r\n\r\nTest | Category | Status | Owner\r\n-- | -- | -- | --\r\nMulticlassTreeFeaturizedLRTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nLinearClassifierTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nBinaryClassifierLogisticRegressionTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nBinaryClassifierSymSgdTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nBinaryClassifierTesterThresholdingTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastForestClassificationTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastTreeBinaryClassificationTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastTreeBinaryClassificationCategoricalSplitTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastTreeBinaryClassificationNoOpGroupIdTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastTreeHighMinDocsTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nCommandCrossValidationKeyLabelWithFloatKeyValues | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nTestTreeEnsembleCombiner | [X64Fact(\"x86   fails. Associated GitHubIssue:   https://github.com/dotnet/machinelearning/issues/1216\")] | resolve | Frank\r\nTestTreeEnsembleCombinerWithCategoricalSplits | [X64Fact(\"x86   fails. Associated GitHubIssue:   https://github.com/dotnet/machinelearning/issues/1216\")] | resolve | Frank\r\nTestEnsembleCombiner | [X64Fact(\"x86   fails. Associated GitHubIssue:   https://github.com/dotnet/machinelearning/issues/1216\")] | resolve | Frank\r\nTestMulticlassEnsembleCombiner | [X64Fact(\"x86   fails. Associated GitHubIssue:   https://github.com/dotnet/machinelearning/issues/1216\")] | TextLoader is   throwing exception: Unhandled exception at 0x15B296B3 (coreclr.dll) in   dotnet.exe.14324.dmp: 0xC0000005: Access violation writing location   0x17A41000.   resolve | Frank\r\nExprBind | [X64Fact(\"sin(1e+30)   gives different value on x86.\"), TestCategory(\"Expr   Language\")] | Resolve       Math.Sin has valid   value range from approximately -9223372036854775295 to approximately   9223372036854775295: https://docs.microsoft.com/en-us/dotnet/api/system.math.sin?view=netcore-3.1.   If value is out of range, Math.Sin will return value passed in and not   throwing exception.       Below is some test   result:       Math.Sin(1e+30):       NetCoreApp X64:   0.0093314689311758247   NetCoreApp X86:   -0.75626273033357649   Net FX: 1e+30           Math.Sin(1e+10):       NetCoreApp X64:   -0.48750602508751067   NetCoreApp X86:   -0.48750602507627   Net FX:         -0.48750602507627           So this is   acceptable to skip in x86 and net framework, but we should consider to use   Math.Sin within its valid range. | Frank\r\nEntryPointPipelineEnsembleGetSummary | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nTestCrossValidationMacro | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nMulticlassLRTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nMulticlassLRNonNegativeTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierLogisticRegressionBinNormTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nDefaultCalibratorPerceptronTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nPAVCalibratorPerceptronTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierLDSvmTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierLDSvmNoBiasTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nCommandTrainMlrWithStats | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nKmeansOnnxConversionTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nSavePipeSsaSpikeNoData | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nEnsemblesMultiClassBootstrapSelectorTest | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nEnsemblesMultiAveragerTest | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nEnsemblesMultiVotingCombinerTest | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nEnsemblesMultiStackCombinerTest | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nChangePointDetectionWithSeasonality | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nChangePointDetectionWithSeasonalityPredictionEngineNoColumn | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nChangePointDetectionWithSeasonalityPredictionEngine | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nSsaForecast | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nSsaForecastPredictionEngine | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nBinaryClassifierLogisticRegressionNonNegativeTest | [LessThanNetCore30OrNotNetCoreAndX64Fact(\"netcoreapp3.1   and x86 output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierLogisticRegressionGaussianNormTest | [LessThanNetCore30OrNotNetCoreAndX64Fact(\"netcoreapp3.1   and x86 output differs from Baseline\")] | resolve | Frank\r\nRandomCalibratorPerceptronTest | [LessThanNetCore30OrNotNetCoreAndX64Fact(\"netcoreapp3.1   and x86 output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierSymSgdTest | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Root cause: Linux uses a version of   MKL that doesn't support conditional numerical reproducibility the same way   as Windows runs.       The different   during different OS as well as unstable result for Linux is from MKL library   (method cblas_sdot). | Frank\r\nCommandTrainingBinaryFactorizationMachineWithValidation | RuntimeInformation.IsOSPlatform | Resolve   -    Lower   precision on Linux platforms       This   test is skipped due to missing dataset, also   Linux   uses lower precision due to below issue:   https://github.com/dotnet/machinelearning/issues/404 | Frank\r\nCommandTrainingBinaryFactorizationMachineWithValidationAndInitialization | RuntimeInformation.IsOSPlatform | Resolve -    Lower precision on   Linux platforms       Linux uses lower   precision due to below issue and PR:   https://github.com/dotnet/machinelearning/issues/404   https://github.com/dotnet/machinelearning/pull/1206 | Frank\r\nIrisLightGbm | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   resolve PR #5080 | Mustafa\r\nIrisLightGbmWithLoadColumnName | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Resolve PR #5080 | Mustafa\r\nIrisVectorLightGbm | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Resolve PR #5080 | Mustafa\r\nIrisVectorLightGbmWithLoadColumnName | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Resolve PR #5080 | Mustafa\r\nIrisSdcaMaximumEntropy | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Resolve PR #5080 | Mustafa\r\nTextNormalizingOnnxConversionTest | RuntimeInformation.IsOSPlatform | Skipped on Linux   platforms       Skipped due to   below locale exception:   Failed to   construct locale with name:en_US.UTF-8:locale::facet::_S_create_c_locale name   not valid:Please, install necessary language-pack-XX and configure locales       https://github.com/dotnet/machinelearning/issues/5093       Mustafa will work   on a fix later | Mustafa\r\nTensorFlowTransformCifar | RuntimeInformation.IsOSPlatform | Resolved -    Different expected   results between Windows vs. Linux/OSX, runs only on 64-bit due to TF       By Design, this   difference is explained below:       //   taco_invalidpixelformat.jpg has '8207' pixel format on Windows but this   format translates to Format32bppRgb               // on macOS and Linux, hence on   Windows this image's pixel format is converted in resize transformer to   Format32bppArgb               // and on linux and macOS it is   not converted in resize transform since pixel format 'Format32bppRgb' can be   resized but               // in   ImagePixelExtractingTransformer it is converted to Format32bppArgb since   there we just support two                // pixel formats, i.e   Format32bppArgb and Format16bppArgb. | Frank\r\nTensorFlowImageClassificationDefault | RuntimeInformation.IsOSPlatform | Resolved – already   runs on all OS's, runs only on 64-bit due to TF | Mustafa\r\nTensorFlowImageClassification | RuntimeInformation.IsOSPlatform | Resolved – already   runs on all OS's, runs only on 64-bit due to TF | Mustafa\r\nMatrixFactorizationSimpleTrainAndPredict | RuntimeInformation.IsOSPlatform | Lower precision on   Linux, skipped on OSX | Mustafa   Mustafa\r\nOneClassMatrixFactorizationInMemoryDataZeroBaseIndex | RuntimeInformation.IsOSPlatform | Resolved -    Lower precision on   non-Windows platforms       There are   randomness during initialization in native matrix factorization   library(default_random_engine). This default_random_engine seems have   different implementation on different OS.   https://stackoverflow.com/questions/32730906/random-generates-same-number-in-linux-but-not-in-windows/32731387 | Frank\r\nMulticlassLRTest | Debug   Release Different Baseline | resolve | Mustafa\r\nRandomCalibratorPerceptronTest | Debug   Release Different Baseline | resolve | Mustafa\r\nLinearClassifierTest | Debug   Release Different Baseline | resolve | Mustafa\r\nMulticlassTreeFeaturizedLRTest | Debug   Release Different Baseline | resolve | Mustafa\r\nFastForestClassificationTest | Debug   Release Different Baseline | resolve | Mustafa\r\nBinaryClassifierLogisticRegressionNormTest | Debug   Release Different Baseline | resolve | Mustafa\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5139","RelatedDescription":"Closed issue \"Legacy tests - partially disabled tests\" (#5139)"},{"Id":"619270991","IsPullRequest":true,"CreatedAt":"2020-05-15T22:59:56","Actor":"mstfbl","Number":"5137","RawContent":null,"Title":"Update Ubuntu build and reenable TextNormalizingOnnxConversionTest() on Linux","State":"closed","Body":"This PR updates our Ubuntu CI builds with the correct installation pattern for `libomp-dev`, and the correct updating of its locale setting, which enables us to re-activate the unit test TextNormalizingOnnxConversionTest().","Url":"https://github.com/dotnet/machinelearning/pull/5137","RelatedDescription":"Closed or merged PR \"Update Ubuntu build and reenable TextNormalizingOnnxConversionTest() on Linux\" (#5137)"},{"Id":"618676888","IsPullRequest":true,"CreatedAt":"2020-05-15T18:21:47","Actor":"frank-dong-ms","Number":"5131","RawContent":null,"Title":"disable download meta file by default, only enable on CI","State":"closed","Body":"As download meta files sometime hangs, disable download from build stage by default, only enable meta files download at CI\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5131","RelatedDescription":"Closed or merged PR \"disable download meta file by default, only enable on CI\" (#5131)"},{"Id":"618486604","IsPullRequest":true,"CreatedAt":"2020-05-15T17:10:23","Actor":"beccamc","Number":"5128","RawContent":null,"Title":"Update TexFileSample to use FileShare.ReadWrite","State":"closed","Body":"Associated issue is in Model Builder repo Issue [530](https://github.com/dotnet/machinelearning-modelbuilder/issues/530) (let me know if I need to open one here). \r\n\r\nBasic problem is when .csv training files are open in excel customers cannot train in Model Builder. The root cause is incorrect `FileShare` setting on the FileStream. `FileAccess` specifies how we want to use the file. `FileShare` specifies how we allow other programs to use the file. Even though we're opening files as FileAccess.Read, setting to FileShare.Read means we won't allow other programs to write. This blocks us from reading a file already opened as ReadWrite by Excel. If found [this](https://stackoverflow.com/questions/897796/how-do-i-open-an-already-opened-file-with-a-net-streamreader) stack overflow to have the best explanation. \r\n\r\nI'm not familiar with how the TextLoad code works, so there may be other spots this should be updated. If anyone has advice let me know, or we can proceed with this change and see if other come up later. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/5128","RelatedDescription":"Closed or merged PR \"Update TexFileSample to use FileShare.ReadWrite\" (#5128)"},{"Id":"618701984","IsPullRequest":false,"CreatedAt":"2020-05-15T05:09:36","Actor":"iluveu28","Number":"5132","RawContent":null,"Title":"Method to check if a modelName already exists in the PredictionEnginePool","State":"open","Body":"This is related to an issue I brought up in Stack Overflow - https://stackoverflow.com/questions/61695078/ml-net-how-to-detect-a-model-is-missing-from-the-predictionenginepool/61773814#61773814\r\n\r\nIn the Web API, I need someway to PredictionEnginePool.GetModel by model name. I'd like to also do AddPredictionEnginePool outside of the Startup.cs. In my service layer, I check if a model doesnt exists then I will add it on the fly coz the new model had just been created post startup.\r\n\r\nThanks you very much in advance","Url":"https://github.com/dotnet/machinelearning/issues/5132","RelatedDescription":"Open issue \"Method to check if a modelName already exists in the PredictionEnginePool\" (#5132)"},{"Id":"618484474","IsPullRequest":true,"CreatedAt":"2020-05-14T23:08:04","Actor":"LittleLittleCloud","Number":"5127","RawContent":null,"Title":"Revert code gen","State":"closed","Body":"Revert CodeGen to take project reference to AutoML","Url":"https://github.com/dotnet/machinelearning/pull/5127","RelatedDescription":"Closed or merged PR \"Revert code gen\" (#5127)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-05-24T05:30:35.4110231Z","RunDurationInMilliseconds":646}