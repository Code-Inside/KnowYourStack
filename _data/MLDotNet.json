{"Data":{"GitHub":{"Issues":[{"Id":"728633113","IsPullRequest":true,"CreatedAt":"2020-10-24T02:10:37","Actor":"frank-dong-ms","Number":"5455","RawContent":null,"Title":"handle exception during GetNextPipeline for AutoML","State":"open","Body":"fix part of issue found from #5428 \r\n\r\nhandle exception during GetNextPipeline for AutoML experiment to avoid exception crash the whole AutoML pipeline.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5455","RelatedDescription":"Open PR \"handle exception during GetNextPipeline for AutoML\" (#5455)"},{"Id":"727317860","IsPullRequest":false,"CreatedAt":"2020-10-23T20:26:42","Actor":"Gaopeng-Bai","Number":"5449","RawContent":null,"Title":"Unable to load DLL 'tensorflow' or one of its dependencies","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Azure windows app service\r\n- **.NET Version (eg., dotnet --info)**:  3.1 \r\n- **ASP.NET Version (eg., dotnet --info)**:  3.1.7\r\n#### Packages\r\n- Microsoft.ML                          1.5.2\r\n- Microsoft.ML.ImageAnalytics 1.5.2\r\n- Microsoft.ML.Vision               1.5.2\r\n- Microsoft.ML.TensorFlow        1.5.2\r\n\r\n- SciSharp.TensorFlow.Redist     2.3.0\r\n- TensorFlow.NET                       0.21.0\r\n\r\n### Issue\r\nI create a web application with ML.Net. Everything works on my local machine,  But the Azure server catch the error when I debugged on app service.\r\n\r\n`System.FormatException: Tensorflow exception triggered while loading model. ---> System.DllNotFoundException: Unable to load DLL 'tensorflow' or one of its dependencies: The specified module could not be found. (Exception from HRESULT: 0x8007007E)\r\n   at Tensorflow.c_api.TF_NewGraph()\r\n   at Tensorflow.Graph..ctor()`\r\n\r\n- **What did you do?**\r\nDeploy a web application with ML.NET to azure.\r\n- **What happened?**\r\nSystem.DllNotFoundException: Unable to load DLL 'tensorflow' or one of its dependencies\r\n- **What did you expect?**\r\nThe program can run the same as local.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5449","RelatedDescription":"Closed issue \"Unable to load DLL 'tensorflow' or one of its dependencies\" (#5449)"},{"Id":"728503780","IsPullRequest":true,"CreatedAt":"2020-10-23T20:25:44","Actor":"mstfbl","Number":"5454","RawContent":null,"Title":"Fix MacOS Pipelines build","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5454","RelatedDescription":"Open PR \"Fix MacOS Pipelines build\" (#5454)"},{"Id":"727741648","IsPullRequest":true,"CreatedAt":"2020-10-23T03:34:42","Actor":"frank-dong-ms","Number":"5453","RawContent":null,"Title":"issue 5336","State":"closed","Body":"fix issue #5336 \r\n1. use byte array to create tensor instead of string\r\n2. use Unicode encode instead of UTF8\r\n\r\nThis issue is little bit complicated so please read through below:\r\n\r\nUser want to load a pb model in ML.NET, the input tensor looks like below which is a serialized Example object (a binary buffer, not a text string):\r\n`\r\n      inputs['inputs'] tensor_info:\r\n      dtype: DT_STRING\r\n      shape: (-1)\r\n      name: input_example_tensor:0\r\n`\r\n\r\nI find a workable solution is first convert Example object to protobuf encoded byte array using:\r\n`\r\nexample.ToByteArray()\r\n`\r\nthen convert byte array to string (char array) using some sort of reliable encoding (ideally Unicode or Base64 encoding):\r\n`\r\nEncoding.Unicode.GetString(example.ToByteArray())\r\n`\r\nThen ML.NET will convert the string back to byte array with same encoding and pass to tf.net:\r\n`\r\nEncoding.Unicode.GetBytes(((ReadOnlyMemory<char>)(object)data[i]).ToArray());\r\n`\r\n\r\nThe method ML.NET uses to create Tensor is [CastDataAndReturnAsTensor](https://github.com/dotnet/machinelearning/blob/release/1.5.2/src/Microsoft.ML.TensorFlow/TensorflowTransform.cs#L808), previously we are using [UTF8](https://github.com/dotnet/machinelearning/blob/release/1.5.2/src/Microsoft.ML.TensorFlow/TensorflowTransform.cs#L832-L838) to decode the string and convert to byte array, UTF8 is not reliable encoding as I described in this [comment](https://github.com/dotnet/machinelearning/issues/5336#issuecomment-714278364) so I would like to change the encoding to Unicode.\r\nAlso, recently Xiaoyun upgrade our TF version in this [PR](https://github.com/dotnet/machinelearning/pull/5404) and changed to use string[] instead of byte[][] to create Tensor, in this case we need to use byte[][] as the input string itself is converted from binary buffer(protobuf encoded). ","Url":"https://github.com/dotnet/machinelearning/pull/5453","RelatedDescription":"Closed or merged PR \"issue 5336\" (#5453)"},{"Id":"725064176","IsPullRequest":false,"CreatedAt":"2020-10-23T01:00:37","Actor":"scyentyfyc","Number":"5443","RawContent":null,"Title":"NoColumn Attribute not recognized by TextLoaderSaverCatalog.LoadFromTextFile Method","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10/ Home\r\n\r\n- **.NET Version (eg., dotnet --info)**: \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.101\r\n Commit:    b377529961\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19041\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.101\\\r\n\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried to run the following code to load my training data out of a CSV file.  I've been using the AutoML CLI to this point to generate my models, and thought I'd take crack at doing it via my .NET code.  The `ModelInput` class has been working at runtime to load my metrics into, and pass to the model trained using the CLI, for predictions, even with the extra columns in the class.\r\n\r\n```csharp\r\nMLContext mlContext = new MLContext();\r\nIDataView trainDataView = mlContext.Data.LoadFromTextFile<ModelInput>(\"data/data.csv\", hasHeader: true);\r\n```\r\n- **What happened?**\r\nGet error:\r\n```\r\nSystem.InvalidOperationException: Property 'Change_Tomorrow' is missing the LoadColumnAttribute attribute\r\n   at Microsoft.ML.Data.TextLoader.CreateTextLoader[TInput](IHostEnvironment host, Options options, IMultiStreamSource dataSample)\r\n   at Microsoft.ML.Data.TextLoader.CreateTextLoader[TInput](IHostEnvironment host, Boolean hasHeader, Char separator, Boolean allowQuoting, Boolean supportSparse, Boolean trimWhitespace, IMultiStreamSource dataSample)\r\n   at Microsoft.ML.TextLoaderSaverCatalog.LoadFromTextFile[TInput](DataOperationsCatalog catalog, String path, Char separatorChar, Boolean hasHeader, Boolean allowQuoting, Boolean trimWhitespace, Boolean allowSparse)\r\n```\r\n- **What did you expect?**\r\nData to be loaded from my csv file into an IDataView\r\n\r\n### Source code / logs\r\n- **ModelInput Class**\r\nThis is a trimmed down version of my ModelInput class.  Note that the \"Index(0)\" attribute and the \"Ignore\" attribute come from the \"CsvHelper\" Nuget package, as I use this ModelInput class for both writing to Csv, and for input for model predictions.\r\n```csharp\r\n    public class ModelInput\r\n    {\r\n        [ColumnName(\"Country\"), LoadColumn(0), Index(0)]\r\n        public string Country { get; set; }\r\n        [Ignore, NoColumn]\r\n        public float Change_Tomorrow { get; set; }\r\n        [Ignore, NoColumn]\r\n        public DateTime DateTomorrow { get; set; }\r\n    }\r\n```\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5443","RelatedDescription":"Closed issue \"NoColumn Attribute not recognized by TextLoaderSaverCatalog.LoadFromTextFile Method\" (#5443)"},{"Id":"727336968","IsPullRequest":false,"CreatedAt":"2020-10-22T22:17:36","Actor":"WEMAPP","Number":"5450","RawContent":null,"Title":"how to use FastTextWikipedia300D","State":"closed","Body":"Hi if I wanted to use a pre-trained file, for example Wiki word vectors by fasttext is it possible? and how?","Url":"https://github.com/dotnet/machinelearning/issues/5450","RelatedDescription":"Closed issue \"how to use FastTextWikipedia300D\" (#5450)"},{"Id":"727538486","IsPullRequest":false,"CreatedAt":"2020-10-22T21:55:39","Actor":"galeese","Number":"5451","RawContent":null,"Title":"Parameter mapping betbeen python Booster model and ML.Trainers.LightGbm.GradientBooster object","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Win10\r\n- **.NET Version (eg., dotnet --info)**: 3.1.3\r\n\r\n### Issue\r\n\r\n- **What did you do?** I trained a model within python LGBM API via Byessian optimization\r\n- **What happened?** I've received from the optimization a model file with the defined parameters. I want to train this optimized model within the ML.NET environment. The obstacle is: a confusion, that I can't make confindent matching between  parameters presented on the page https://lightgbm.readthedocs.io/en/latest/Parameters.html  and the properties of  the  ML.Trainers.LightGbm.GradientBooster object:\r\n \r\n                    FeatureFraction  \r\n                    L1Regularization  \r\n                    L2Regularization  \r\n                    MaximumTreeDepth \r\n                    MinimumChildWeight \r\n                    MinimumSplitGain  \r\n                    SubsampleFraction   \r\n                    SubsampleFrequency \r\n \r\n- **What did you expect?** So below is presented my matching between python parameters and GradientBooster object, I want you to verify whether my matching is correct , and point out how is the \"SubsampleFraction \" named in python parameters.\r\n\r\n### Source code / logs\r\n\r\n            var options = new LightGbmBinaryTrainer.Options\r\n            {\r\n                Booster = new Microsoft.ML.Trainers.LightGbm.GradientBooster.Options   \r\n                {\r\n                    FeatureFraction = 0.855937, //   -- > feature_fraction \r\n                    L1Regularization = 0.973817, // ---> lambda_l1 \r\n                    L2Regularization = 2.27,    // ---> lambda_l2\r\n                    MaximumTreeDepth = 8, //   -- > max_depth \r\n                    MinimumChildWeight = 17.9015, //    -- > min_sum_hessian_in_leaf \r\n                    MinimumSplitGain = 0.076047,  //    -- >  min_gain_to_split\r\n                    SubsampleFraction =1,  // ???? can't determine the analoguos within https://lightgbm.readthedocs.io/en/latest/Parameters.html \r\n                    SubsampleFrequency = 10, //     -- > bagging_fraction\r\n                }\r\n            };\r\n\r\nThe criterion of the successful answer is: \r\nThe two models give the same classification probabilities  trained in python and with GradientBooster object. Wen you present me the correct matching of the parameters, i run the two models, and check the output difference. \r\nThank you!","Url":"https://github.com/dotnet/machinelearning/issues/5451","RelatedDescription":"Closed issue \"Parameter mapping betbeen python Booster model and ML.Trainers.LightGbm.GradientBooster object\" (#5451)"},{"Id":"727671075","IsPullRequest":false,"CreatedAt":"2020-10-22T19:40:58","Actor":"galeese","Number":"5452","RawContent":null,"Title":"BinaryClassification.Trainer  produces System.ArgumentOutOfRangeException: 'Not large enough to hold these values. Parameter Name: destinantion","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: win 10 \r\n- **.NET Version (eg., dotnet --info)**: 3.3\r\n\r\n### Issue\r\n\r\n- **What did you do?** i'm running my c# script , which takes the two(training and validation ) plain files containing  more than 10 000 features in each of files.\r\n- **What happened?**  the script string \"var model = pipeline.Fit( trainingData, validationData);\"   produced: System.ArgumentOutOfRangeException: 'Not large enough to hold these values. Parameter's name: destinantion\r\n- **What did you expect?** I expect  you to see the ecnlosed code \"mlnet.txt\" and the zipped source data which i use for training and validation.\r\n\r\n\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n[source_data.zip](https://github.com/dotnet/machinelearning/files/5425302/source_data.zip)\r\n\r\n[mlnet.txt](https://github.com/dotnet/machinelearning/files/5425306/mlnet.txt)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5452","RelatedDescription":"Open issue \"BinaryClassification.Trainer  produces System.ArgumentOutOfRangeException: 'Not large enough to hold these values. Parameter Name: destinantion\" (#5452)"},{"Id":"726983837","IsPullRequest":false,"CreatedAt":"2020-10-22T02:07:04","Actor":"gharibkhani","Number":"5447","RawContent":null,"Title":"System.InvalidOperationException: 'LightGBM Error, code is -1 (LightGbm 3.0.0)","State":"open","Body":"- Tested on Windows 10 and Server 2019:\r\n- .NET 4.7: \r\n- Microsoft.ML (1.5.2) \r\n- Microsoft.ML.LightGbm (1.5.2)\r\n- LightGbm (3.0.0)\r\n\r\n**Issue**\r\nIt crashes in this line \r\n\r\n- var model = pipeline.Fit(trainData);\r\n\r\n- I get this error: System.InvalidOperationException: 'LightGBM Error, code is -1, error message is 'Unknown importance type: only support split=0 and gain=1'.'\r\n\r\nThis error can be reproduced by an example. I just used the example in docs.microsoft.com and able to reproduce it.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.lightgbmextensions.lightgbm?view=ml-dotnet\r\n\r\nI created a console app and you can access it from the link below:\r\n\r\nhttps://drive.google.com/drive/folders/1-wc04CM75-IGoxjRAniDuhqI-zrHTWwM?usp=sharing\r\n\r\nI talked to the LightGBM team and they mentioned this issue exists in .Net code and not theirs. This is the third time this issue has been reported (#5431 and #5382) and each time it has been closed without any resolution.","Url":"https://github.com/dotnet/machinelearning/issues/5447","RelatedDescription":"Open issue \"System.InvalidOperationException: 'LightGBM Error, code is -1 (LightGbm 3.0.0)\" (#5447)"},{"Id":"726911615","IsPullRequest":false,"CreatedAt":"2020-10-21T22:40:46","Actor":"bsambrone","Number":"5446","RawContent":null,"Title":"Multidimensional Vectors causing AutoML to throw null reference exception","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win10\r\n- **.NET Version (eg., dotnet --info)**: 3.1.7\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried to use a 2 dimensional float array as a vector\r\n- **What happened?**\r\nGot a null reference exception when trying to run an experiment\r\n- **What did you expect?**\r\nTh experiment to run\r\n\r\nThe documentation seems to indicate my setup is correct: https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.data.vectortypeattribute.-ctor?view=ml-dotnet#Microsoft_ML_Data_VectorTypeAttribute__ctor_System_Int32___\r\n\r\nTo fix my multidimension vector problem, I've tried:\r\n* Adding/Removing the float[,] initializers in InputData\r\n* Specifying the exact size with [VectorType(3,60)]\r\n* Leaving the [VectorType] attribute off altogether and using autoschema to set it.\r\n* Leaving the [VectorType] attribute off altogether and not using autoschema to let ML.net figure it out on its own\r\n* Adding just [VectorType()], although the docs say that is for single dimension arrays.\r\n\r\n### Source code / logs\r\n\r\nHere is a minimal reproduction of the issue:\r\n```\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var mlContext = new MLContext();\r\n\r\n        // create schema for multidimensional vector\r\n        var autoSchema = SchemaDefinition.Create(typeof(InputData));\r\n        var col = autoSchema[1];\r\n        col.ColumnType = new VectorDataViewType(NumberDataViewType.Single, 3, 60);\r\n\r\n        // fabricate some data\r\n        var trainingData = new List<InputData>();\r\n        var inputData = new InputData();\r\n        inputData.MultiDimensional = new float[20,20];\r\n        for (int i = 0; i < inputData.MultiDimensional.GetUpperBound(0); i++)\r\n        {\r\n            for (int j = 0; j < inputData.MultiDimensional.GetUpperBound(1); j++)\r\n            {\r\n                inputData.MultiDimensional[i,j] = 5; // doesn't matter\r\n            }\r\n        }\r\n        trainingData.Add(inputData);\r\n\r\n        // setup a data view\r\n        IDataView trainingDataView = mlContext.Data.LoadFromEnumerable<InputData>(trainingData, autoSchema);\r\n\r\n        // preview it (goes BOOM)\r\n        var preview = trainingDataView.Preview();\r\n\r\n        // run the experiment\r\n        var settings = new BinaryExperimentSettings();\r\n        settings.MaxExperimentTimeInSeconds = 60;\r\n        ExperimentResult<BinaryClassificationMetrics> experimentResult = mlContext.Auto()\r\n            .CreateBinaryClassificationExperiment(settings)\r\n            .Execute(trainingDataView);\r\n    }\r\n}\r\n\r\npublic class InputData\r\n{\r\n    public bool Label { get; set; }\r\n    public float[,] MultiDimensional { get; set; }\r\n}\r\n```\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5446","RelatedDescription":"Open issue \"Multidimensional Vectors causing AutoML to throw null reference exception\" (#5446)"},{"Id":"726827215","IsPullRequest":true,"CreatedAt":"2020-10-21T20:06:34","Actor":"mstfbl","Number":"5445","RawContent":null,"Title":"Use Timer and ctx.CancelExecution() to fix AutoML max-time experiment bug","State":"open","Body":"Fix #5437 \r\n\r\nThis PR utilizes `Timer` and `ctx.CancelExecution` in AutoML's `Experiment` to listen for and cancel ongoing experiment after given `MaxExperimentTime` has elapsed.","Url":"https://github.com/dotnet/machinelearning/pull/5445","RelatedDescription":"Open PR \"Use Timer and ctx.CancelExecution() to fix AutoML max-time experiment bug\" (#5445)"},{"Id":"725990643","IsPullRequest":true,"CreatedAt":"2020-10-20T22:34:14","Actor":"Lynx1820","Number":"5444","RawContent":null,"Title":"Improving error message ","State":"open","Body":"PR to close #3995 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/5444","RelatedDescription":"Open PR \"Improving error message \" (#5444)"},{"Id":"723792084","IsPullRequest":false,"CreatedAt":"2020-10-20T17:02:33","Actor":"RaoHammas","Number":"5442","RawContent":null,"Title":"Incompatible package sign on Ml 1.5.2 in Visual Studio","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 Pro 1909 Build: 18363.1139\r\n- **.NET Version (eg., dotnet --info)**: 3.1.401\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nCreated new core console project and added `ML.Net` version `1.5.2` nuget package.\r\n- **What happened?**\r\nI'm seeing yellow incompatible package sign on package in dependency tree. Although everything works just fine.\r\n- **What did you expect?**\r\nObviously, it shouldn't show this sign.\r\n### Source code / logs\r\n\r\n![image](https://user-images.githubusercontent.com/16499626/96347709-fb3e6b00-10bc-11eb-9878-c8d13dd781ca.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5442","RelatedDescription":"Closed issue \"Incompatible package sign on Ml 1.5.2 in Visual Studio\" (#5442)"},{"Id":"721915897","IsPullRequest":true,"CreatedAt":"2020-10-20T02:43:12","Actor":"antoniovs1029","Number":"5439","RawContent":null,"Title":"Update OnnxRuntime to 1.5.2","State":"closed","Body":"Update OnnxRuntime to 1.5.2\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5439","RelatedDescription":"Closed or merged PR \"Update OnnxRuntime to 1.5.2\" (#5439)"},{"Id":"719875778","IsPullRequest":false,"CreatedAt":"2020-10-20T02:42:50","Actor":"gharibkhani","Number":"5431","RawContent":null,"Title":"System.InvalidOperationException: 'LightGBM Error, code is -1","State":"closed","Body":"- Tested on Windows 10 and Server 2019:\r\n- .NET 4.7: \r\n- Microsoft.ML (1.5.2) \r\n- LightGbm (3.0.0)\r\n\r\n**Issue**\r\nIt crashes in this line \r\n\r\n- var model = pipeline.Fit(trainData);\r\n\r\n- I get this error: System.InvalidOperationException: 'LightGBM Error, code is -1, error message is 'Unknown importance type: only support split=0 and gain=1'.'\r\n\r\nThis error can be reproduced by an example. I just used the example in docs.microsoft.com and able to reproduce it.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.lightgbmextensions.lightgbm?view=ml-dotnet\r\n\r\nI created a console app and you can access it from the link below:\r\n\r\nhttps://drive.google.com/drive/folders/1-wc04CM75-IGoxjRAniDuhqI-zrHTWwM?usp=sharing\r\n\r\nI talked to the LightGBM team and they mentioned this issue exists in .Net code and not theirs.","Url":"https://github.com/dotnet/machinelearning/issues/5431","RelatedDescription":"Closed issue \"System.InvalidOperationException: 'LightGBM Error, code is -1\" (#5431)"},{"Id":"722707804","IsPullRequest":false,"CreatedAt":"2020-10-19T21:23:48","Actor":"nnoradie","Number":"5441","RawContent":null,"Title":"Anomaly detection returns scores of infinite value","State":"closed","Body":"\r\n\r\n### System information\r\n\r\n- **OS version/distro**: .Net 4.8\r\n- **.NET Version (eg., dotnet --info)**: built from guinao:yuyi/dev/new_boundary\r\n![image](https://user-images.githubusercontent.com/69877427/96190993-085e2d00-0ef8-11eb-9dac-eee1845063d5.png)\r\n\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nRun anomaly detection\r\n\r\n- **What happened?**\r\nAnomalies were detected, but some of the scores returned were infinite. Looks like there might be a regression in how AD scores are calculated.\r\n![image](https://user-images.githubusercontent.com/69877427/96190093-802b5800-0ef6-11eb-8280-f38934fdd78a.png)\r\n\r\n- **What did you expect?**\r\nResults to return scores that are not infinite\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\nAnomaly detector options\r\n![image](https://user-images.githubusercontent.com/69877427/96190860-c46b2800-0ef7-11eb-8af8-e0c09a254788.png)\r\n\r\nDLLs used\r\n[dlls.zip](https://github.com/dotnet/machinelearning/files/5388145/dlls.zip)\r\n\r\nCSV\r\n[csv](https://github.com/dotnet/machinelearning/files/5388216/covid.zip)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5441","RelatedDescription":"Closed issue \"Anomaly detection returns scores of infinite value\" (#5441)"},{"Id":"721319211","IsPullRequest":true,"CreatedAt":"2020-10-19T21:23:48","Actor":"guinao","Number":"5436","RawContent":null,"Title":"[SrCnnEntireAnomalyDetector] Upgrade boundary calculation and expected value calculation","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n#5430 \r\n#5429 \r\n#5441 \r\n\r\nChanges.\r\n1. Check the data range of input data and the output expected values so that they are aligned.\r\n2. Upgrade the boundary unit calculation.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5436","RelatedDescription":"Closed or merged PR \"[SrCnnEntireAnomalyDetector] Upgrade boundary calculation and expected value calculation\" (#5436)"},{"Id":"719613873","IsPullRequest":false,"CreatedAt":"2020-10-19T21:23:48","Actor":"nnoradie","Number":"5429","RawContent":null,"Title":"Cannot detect anomalies on percent of grand total ","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:.Net 4.8\r\n- **.NET Version (eg., dotnet --info)**:  ML.Net 1.5.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nDetect anomalies on the percent of grand total of a value that returned multiple anomalies.\r\n\r\n- **What happened?**\r\nNo anomalies were returned\r\n![image](https://user-images.githubusercontent.com/69877427/95783665-2ffa8e80-0c87-11eb-9e77-b910cc88e095.png)\r\n![image](https://user-images.githubusercontent.com/69877427/95783686-3983f680-0c87-11eb-91d3-2514fc1fbe25.png)\r\n\r\n\r\n- **What did you expect?**\r\nTo see anomalies at the same points in time as in the original value,\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\nCsvs, gif, and email correspondence\r\n[percent of grand total.zip](https://github.com/dotnet/machinelearning/files/5367178/percent.of.grand.total.zip)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5429","RelatedDescription":"Closed issue \"Cannot detect anomalies on percent of grand total \" (#5429)"},{"Id":"718428900","IsPullRequest":false,"CreatedAt":"2020-10-19T21:09:13","Actor":"ppampati","Number":"5426","RawContent":null,"Title":"Exception while inferencing ML.NET ONNX model that uses TextFeatures","State":"closed","Body":"[###](url) System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**:  .NET Core 3.1\r\n\r\n### Issue\r\n\r\n- **What did you do?\r\n     Trained a Fast tree model on text data.\r\n     Saved the trained model to ONNX format\r\n     Load the ONNX model and run Prediction\r\n- **What happened?\r\n      Prediction code threw an exception and application crashed.\r\n- **What did you expect?**\r\n      Prediction code to return score and predict label.\r\nSample code is attached\r\n[MLNetONNXSample.zip](https://github.com/dotnet/machinelearning/files/5357598/MLNetONNXSample.zip)\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5426","RelatedDescription":"Closed issue \"Exception while inferencing ML.NET ONNX model that uses TextFeatures\" (#5426)"},{"Id":"719249606","IsPullRequest":false,"CreatedAt":"2020-10-19T20:48:48","Actor":"zjdandy99ge","Number":"5427","RawContent":null,"Title":"object detection on local ML","State":"closed","Body":"there is object detect ml on Azure， I want to do that on local, anyone can give me some advice or demo?\r\n\r\nthanks a  lot.","Url":"https://github.com/dotnet/machinelearning/issues/5427","RelatedDescription":"Closed issue \"object detection on local ML\" (#5427)"},{"Id":"720807403","IsPullRequest":false,"CreatedAt":"2020-10-19T20:43:54","Actor":"dcostea","Number":"5434","RawContent":null,"Title":"Models build with SDCA trainers and seeded ML context are getting different values for accuracy  ","State":"closed","Body":"### System information\r\n\r\n- **Windows 10**:\r\n- **.NET 5 RC1 & RC2**: \r\n\r\n### Issue\r\n\r\n- **I build a model using a MLContext with seed parameter set and I use SDCAMaximumEntropy or SDCANonCalibrated**\r\n- **The accuracy fluctuates with every build**\r\n- **I expect the accuracy to be the same. If I'm using other trainers like LighGbm, the accuracy is consistent, the same with every build.**\r\n\r\n### Source code / logs\r\nYou can find the notebook here: https://github.com/dcostea/SmartFireAlarm/blob/master/SmartFireAlarm/Jupyter/sample.ipynb\r\nI have extracted here the code:\r\n```\r\n#r \"nuget:Microsoft.ML,1.5.2\"\r\n#r \"nuget:Microsoft.ML.LightGBM,1.5.2\"\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Trainers.LightGbm;\r\nusing Microsoft.ML.Data;\r\n\r\nMLContext mlContext = new MLContext(seed: 123);\r\n\r\nconst string TRAIN_DATASET_PATH = \"./sensors_data_train.csv\";\r\nIDataView trainingData = mlContext.Data.LoadFromTextFile<ModelInput>(\r\n    path: TRAIN_DATASET_PATH,\r\n    hasHeader: true,\r\n    separatorChar: ',');\r\n\r\nconst string TEST_DATASET_PATH = \"./sensors_data_test.csv\";\r\nIDataView testingData = mlContext.Data.LoadFromTextFile<ModelInput>(\r\n    path: TEST_DATASET_PATH,\r\n    hasHeader: true,\r\n    separatorChar: ',');\r\n\r\nvar featureColumns = new string[] { \"Temperature\", \"Luminosity\", \"Infrared\", \"Distance\" };\r\n\r\nvar trainingPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\")\r\n    .Append(mlContext.Transforms.Concatenate(\"Features\", featureColumns))\r\n    .Append(mlContext.MulticlassClassification.Trainers.SDCAMaximumEntropy(\"Label\", \"Features\"))\r\n    .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\n\r\nvar model = trainingPipeline.Fit(trainingData);\r\n\r\nvar predictions = model.Transform(testingData);\r\nvar metrics = mlContext.MulticlassClassification.Evaluate(predictions, \"Label\", \"Score\", \"PredictedLabel\");\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5434","RelatedDescription":"Closed issue \"Models build with SDCA trainers and seeded ML context are getting different values for accuracy  \" (#5434)"},{"Id":"721011426","IsPullRequest":true,"CreatedAt":"2020-10-15T06:01:34","Actor":"Lynx1820","Number":"5435","RawContent":null,"Title":"ProduceWordBags Onnx Export Fix ","State":"closed","Body":"`ProduceWordBags` Onnx export assumes that the input will be a string of untokenized text. However, in ML.NET the user can choose to tokenize the text before passing it. Even though this is an unnecessary step, since a `WordTokenizer` is added before the `NgramExtraction` transformer, there is no error in ML.NET but there is an error in OnnxRuntime because a double tokenization resulted in more dimensions in Onnx. I have changed the Squeeze transformer to Reshape, so the dimension can remain consistent in this edge case. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5435","RelatedDescription":"Closed or merged PR \"ProduceWordBags Onnx Export Fix \" (#5435)"},{"Id":"721836234","IsPullRequest":false,"CreatedAt":"2020-10-14T22:31:32","Actor":"LittleLittleCloud","Number":"5438","RawContent":null,"Title":"Discuss - Image classification in AutoML.Net","State":"open","Body":"### What's the problem\r\nCurrently, Image classification in automl.net is brutal. By meaning brutal, it's because of the way automl.net run cross-validation on ImageClassification trainer: It's ten times longer than using ImageClassification API directly, with little difference. Here are some statistics.\r\n\r\nThe weather report is a dataset which includes around 1K images, the training time for using ImageClassification trainer directly is about 6 mins on `Xeon W 2133` CPU, using resnet_v2_50_299, the time using AutoML.Net to train on the same dataset is astonishingly 60 minutes. However, the result is quite similar: Macro accuracy from using ImageClassification API is 96.07%, and from AutoML.Net is 96.29%. \r\n\r\nWhy the difference in the time is huge while the difference in evaluation result is small? It's because AutoML.Net runs a cross-validation check on a small dataset. (FYI small is defined as a dataset with less than 15000 rows). And the default fold number for cross-validation is 10, which means AutoML.Net will run the same trail for ten times with different dataset, and return the average evaluation metric and the model with evaluation closest to that metric. On the other hand, if I use a larger dataset with over 15000 pictures, the training time should be similar because AutoML.Net will use a train-validation split instead of cross-validation to run a single trail.\r\n\r\nIs CV really necessary for image classification, especially when AutoML.Net only uses one trainer and the hyper-parameter tuning for that trainer is disabled? To answer this, let's first look back on what's CV's pro and cons, and why AutoML.Net uses CV. The pros of using CV is 1) it reduces the variance of the validation score, so less bias in evaluation result 2) it helps reduce the overfitting problem. The con is it's time-costy. In most of the case, CV is necessary for AutoML.Net because AutoML's smart sweeper relies on the validation score of each trail to perform SMBO algo, a less bias evaluation result helps produce better model. Moreover, the final evaluation metrics summary will be more objective because of CV. The time-costy problem still exists, but that's not a big one in normal cases because most of AutoML.Net trails only uses a rather short time to complete, and it's worthwhile to use the extra time in exchange for better result.\r\n\r\nHowever, when it comes to image classification, the pros of running cross-validation disappear and the cons of CV becomes even more serious. As I mentioned above, there's only one trainer and no hyper-parameter tuning is available for that trainer, so a less bias validation score doesn't help sweeper to produce a better model. What makes things worse is the time for a single trail for image classification is much longer than a normal trail because of ImageClassification trainer. The only pros for using CV in image classification cases is left to be a more objective evaluation score in the summary, but is that really worthwhile enough with the cost of 10-time longer training time?\r\n\r\nMy answer is no, at least not for model builder users, where Azure training is available at hand. They can accept a lousy but faster (actually not too lousy, the model is the same, only evaluation score might be biased because of high variance) instead of better (not too better, see above) but much slower local training.\r\n\r\n### What we need to change\r\nWe have two ways to make image classification having a better experience in AutoML.Net, both training performance and training time.  The first way is simple but with less improvement: simply disable CV in image classification, or at least make it a flag in the MultiClassificationExperiment option so the user can disable it. The second way is more of an AutoML-style solution: Use DNN featurizers along with traditional multiclassification trainers, The single trail time will be shorter, and it provides more space for its smart sweeper to tune over the hyper-parameter to find out the best combination.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5438","RelatedDescription":"Open issue \"Discuss - Image classification in AutoML.Net\" (#5438)"},{"Id":"721354512","IsPullRequest":false,"CreatedAt":"2020-10-14T10:53:36","Actor":"taha-ghadirian","Number":"5437","RawContent":null,"Title":"Auto train pipeline Bug","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows server 2012r2 - windows 10\r\n- **.NET Version**: .net core 3.1\r\n- **Ml.net Version**: Last Stable Version.\r\n\r\n### Issue\r\n\r\n- **What did you do?**: Set a auto Training pipeline using API, set a long MaxExperimentTimeInSeconds (For example 600) for small dataset.\r\n- **What happened?**: Program hanged without any response.\r\n- **What did you expect?**: the program should stop training after 600 seconds. and show me the result.\r\n- **Am I Tested it with shorter time?**: Yes! I Tested it with 120Seconds and 100 Seconds. Its work currectly!\r\n\r\n### Source code / logs\r\n\r\n```\r\nvar experimentSettings = new MulticlassExperimentSettings()\r\n            {\r\n                MaxExperimentTimeInSeconds = 600,\r\n                CacheDirectory = new DirectoryInfo(\"cache\"),\r\n                CacheBeforeTrainer = CacheBeforeTrainer.Auto,\r\n                OptimizingMetric = MulticlassClassificationMetric.MicroAccuracy,\r\n            };\r\n```\r\n\r\n            var experiment = mlContext.Auto().CreateMulticlassClassificationExperiment(experimentSettings);\r\n\r\n            var crossValidationExperimentResult = experiment.Execute(\r\n                trainData: mappedInputData,\r\n                labelColumnName: \"Label\",\r\n                progressHandler: new Progress<RunDetail<MulticlassClassificationMetrics>>()\r\n            );\r\n\r\n![toplearn](https://user-images.githubusercontent.com/36773254/95979375-68859e00-0e28-11eb-95d9-3c44f742709d.png)","Url":"https://github.com/dotnet/machinelearning/issues/5437","RelatedDescription":"Open issue \"Auto train pipeline Bug\" (#5437)"},{"Id":"720536960","IsPullRequest":true,"CreatedAt":"2020-10-13T16:52:49","Actor":"michaelgsharp","Number":"5433","RawContent":null,"Title":"added in DcgTruncationLevel to AutoML api","State":"open","Body":"Fixes issue #5425. Adds in DcgTruncation level to the AutoML api to match the normal ML.Net API.","Url":"https://github.com/dotnet/machinelearning/pull/5433","RelatedDescription":"Open PR \"added in DcgTruncationLevel to AutoML api\" (#5433)"},{"Id":"719613909","IsPullRequest":false,"CreatedAt":"2020-10-13T16:28:28","Actor":"nnoradie","Number":"5430","RawContent":null,"Title":"The expected value calculation does not have knowledge of the data range of the series","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: .Net 4.8\r\n- **.NET Version (eg., dotnet --info)**:  ML.Net 1.5.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nDetected anomalies on dataset with only non-negative values and saw a negative expected value range.\r\n\r\n- **What happened?**\r\n![image](https://user-images.githubusercontent.com/69877427/95783099-f7a68080-0c85-11eb-97a7-414329c36faf.png)\r\n\r\n- **What did you expect?**\r\nThe expected value range to be non-negative.\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\nCsv and email correspondence \r\n[covid19_deaths.zip](https://github.com/dotnet/machinelearning/files/5367173/covid19_deaths.zip)\r\n\r\n\r\nThe options set for anomaly detection:\r\nvar options = new SrCnnEntireAnomalyDetectorOptions()\r\n            {\r\n                Threshold = 0.05,\r\n                BatchSize = -1, // not set, so we are using the default, is that -1?\r\n                Sensitivity = 75.0,\r\n                DetectMode = SrCnnDetectMode.AnomalyAndMargin,\r\n                Period = -1,\r\n                DeseasonalityMode = SrCnnDeseasonalityMode.Median // the period is -1, so I assume deseasonalize is not applied?\r\n            };\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5430","RelatedDescription":"Closed issue \"The expected value calculation does not have knowledge of the data range of the series\" (#5430)"},{"Id":"720200029","IsPullRequest":false,"CreatedAt":"2020-10-13T12:38:58","Actor":"ddobric","Number":"5432","RawContent":null,"Title":"Webhosting of models and high memory consumption","State":"open","Body":"We have a web application that hosts a trained model to enable users for prediction scenarios.\r\nThe solution is based on the *ImageClassificationModelTraining.Solution*  in the *machinelearning-samples* repo. \r\nThe training was done by following code (just a snippet for a case that it is important):\r\n\r\n```csharp\r\n            var pipeline = mlContext.MulticlassClassification.Trainers.ImageClassification(options: hyperParams)\r\n            .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName: \"PredictedLabel\",\r\n                                                                      inputColumnName: \"PredictedLabel\"));\r\n\r\n            // Apply 5-fold cross validation\r\n            var cvResults = mlContext.MulticlassClassification.CrossValidate(cvDataView, pipeline, numberOfFolds: numOfFolds, labelColumnName: \"LabelAsKey\", seed: 8881);\r\n\r\n            // Get best Model which is on the first place\r\n            var topModel = cvResults[0].Model;\r\n\r\n            //Show the performance metrics for the multi-class classification            \r\n            var metrics = mlContext.MulticlassClassification.Evaluate(cvResults[0].ScoredHoldOutSet, labelColumnName: \"LabelAsKey\", predictedLabelColumnName: \"PredictedLabel\");\r\n ``` \r\n\r\nTo make this working, we have loaded a pool of Prediction Engine instances, which will be assigned to incoming requests. Following code shows how instances are created on startup.\r\n\r\n```csharp\r\n       private List<PredictionEngine<TSrc, TDest>> LoadPool(string modelFullPathName)\r\n        {\r\n            List<PredictionEngine<TSrc, TDest>> engines = new List<PredictionEngine<TSrc, TDest>>();\r\n\r\n            for (int i = 0; i < config.PoolSize; i++)\r\n            {\r\n                var mlnetModel = mlContext.Model.Load(modelFullPathName, out _);//ModelInfo.ServerFilePath\r\n                var predictionEngine = mlContext.Model.CreatePredictionEngine<TSrc, TDest>(mlnetModel);\r\n                engines.Add(predictionEngine);\r\n            }\r\n\r\n            return engines;\r\n        }\r\n```\r\nThis part works fine. As next, we have measured how much RAM the application will need when deployed to the *AppService* (or anything else). We figured out that the memory consumption of trained model is extremely high.\r\nFollowing diagram shows the behaviour of the prediction engine. First, we load a set of prediction engines (in this example 6 instances) by using the code shown above.\r\n\r\n![image](https://user-images.githubusercontent.com/1756871/95859723-53910800-0d5f-11eb-8758-917ba4499a15.png)\r\n\r\nAfter loading some space in RAM is consumed. However on the first *Predict* invoke of the particular instance of the prediction engine, there is a peak of 1.5-2.0 GB. After the peak, the memory consumption gets stable again.\r\n\r\nThe issue with the peak is that, when it happens, it causes the AppService health feature sometimes to restart the service. Ok, it is not nice, but it can be fixed by using higher AppService offering. However, it would be good to know where does the peak comes from for the case that it can get higher than 2GB.\r\n\r\nAnother negative observation is the high memory consumption of the single instance of the prediction engine. Following diagram shows the consumption in dependence on the number of instances of the prediction engine.\r\n\r\n![image](https://user-images.githubusercontent.com/1756871/95860311-2bee6f80-0d60-11eb-9c23-3fe86514b31a.png)\r\n\r\nThe blue line shows the consumption after the load of the predication engine and the green one shows consumption of the prediction engine instances after the ```Predict``` method has been invoked on each of them.\r\n\r\nThe dotted line is the memory consumption as calculated by the formel shown in the diagram. The issue with behaviour is that the consumption of the single prediction engine instance is approx. **600MB**, which is too much. We could easily calculate here how much would cost the App Service with just 100 concurrent users. It is too much for this scenario.\r\n\r\nWe can understand and agree that training is a heavy scenario and might require a lot of memory and CPU resources. However trained models must be more lightweight.\r\n\r\n### System information\r\n\r\n- **Windows 10**:\r\n- **  DotNet 3.1.402**: \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5432","RelatedDescription":"Open issue \"Webhosting of models and high memory consumption\" (#5432)"},{"Id":"719359145","IsPullRequest":false,"CreatedAt":"2020-10-12T12:57:16","Actor":"patricia-ikosoft","Number":"5428","RawContent":null,"Title":"\"Input string was not in a correct format.\" exception when executing experiment with ML.AutoML","State":"open","Body":"\r\n\r\n### System information\r\n\r\n- Microsoft Windows 7 Professional, Version\t6.1.7601 Service Pack 1 Build 7601\r\n- .Net Core 3.1\r\n- Microsoft.ML.AutoML 0.17.2\r\n\r\n### Issue\r\n\r\n- I am executing an experiment with ML.AutoML, using the data from test2.csv\r\n-  I constantly have a parsing exception on experiment.Execute(data, labelProperty.Name),\r\nno matter what label I'm choosing, or if I'm loading the data directly from the file or I'm reading and parsing it myself.\r\n\r\n\r\n\r\n at System.Number.ThrowOverflowOrFormatException(ParsingStatus status, TypeCode type)\r\n   at Microsoft.ML.AutoML.SweeperProbabilityUtils.ParameterSetAsFloatArray(IValueGenerator[] sweepParams, ParameterSet ps, Boolean expandCategoricals)\r\n   at Microsoft.ML.AutoML.SmacSweeper.FitModel(IEnumerable`1 previousRuns)\r\n   at Microsoft.ML.AutoML.SmacSweeper.ProposeSweeps(Int32 maxSweeps, IEnumerable`1 previousRuns)\r\n   at Microsoft.ML.AutoML.PipelineSuggester.SampleHyperparameters(MLContext context, SuggestedTrainer trainer, IEnumerable`1 history, Boolean isMaximizingMetric)\r\n   at Microsoft.ML.AutoML.PipelineSuggester.GetNextInferredPipeline(MLContext context, IEnumerable`1 history, DatasetColumnInfo[] columns, TaskKind task, Boolean isMaximizingMetric, CacheBeforeTrainer cacheBeforeTrainer, IEnumerable`1 trainerAllowList)\r\n   at Microsoft.ML.AutoML.Experiment`2.Execute()\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.Execute(ColumnInformation columnInfo, DatasetColumnInfo[] columns, IEstimator`1 preFeaturizer, IProgress`1 progressHandler, IRunner`1 runner)\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.ExecuteCrossValSummary(IDataView[] trainDatasets, ColumnInformation columnInfo, IDataView[] validationDatasets, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.Execute(IDataView trainData, ColumnInformation columnInformation, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.Execute(IDataView trainData, String labelColumnName, String samplingKeyColumn, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n   at MLPoc.Services.LoadDataService.TrainDataAndCreateModel(List`1 properties, DynamicTypeProperty labelProperty, List`1 lineValues) in C:\\DevITPAzurePatricia\\Ikosoft\\MLPoc\\Services\\LoadDataService.cs:line 81\r\n\r\n\r\n### Source code / logs\r\n[code.zip](https://github.com/dotnet/machinelearning/files/5365217/code.zip)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5428","RelatedDescription":"Open issue \"\"Input string was not in a correct format.\" exception when executing experiment with ML.AutoML\" (#5428)"},{"Id":"717765883","IsPullRequest":false,"CreatedAt":"2020-10-09T00:48:23","Actor":"jwood803","Number":"5425","RawContent":null,"Title":"Add DcgTruncationLevel to Ranking AutoML API","State":"open","Body":"When performing Ranking in AutoML, it will always return back a length of 3 in the DCG and nDCG metrics. However, when using the Evaluate method for Ranking, it has a property in the `RankingEvaluatorOptions` to specify the DcgTruncationLevel.\r\n\r\n```csharp\r\nvar rankingEvaluatorOptions = new RankingEvaluatorOptions { DcgTruncationLevel = 10 };\r\n```\r\n\r\nThis was noticed when adding the Ranking AutoML sample in [this comment](https://github.com/dotnet/machinelearning-samples/pull/852#discussion_r498425201)","Url":"https://github.com/dotnet/machinelearning/issues/5425","RelatedDescription":"Open issue \"Add DcgTruncationLevel to Ranking AutoML API\" (#5425)"},{"Id":"717003033","IsPullRequest":true,"CreatedAt":"2020-10-08T17:18:04","Actor":"frank-dong-ms","Number":"5424","RawContent":null,"Title":"merge master to arcade branch","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5424","RelatedDescription":"Closed or merged PR \"merge master to arcade branch\" (#5424)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-10-24T05:30:37.5016208Z","RunDurationInMilliseconds":749}