{"Data":{"GitHub":{"Issues":[{"Id":"834086075","IsPullRequest":true,"CreatedAt":"2021-03-17T22:53:20","Actor":"michaelgsharp","Number":"5717","RawContent":null,"Title":"Renamed master to main","State":"closed","Body":"Rename all references to machinelearning/master to machinelearning/main.","Url":"https://github.com/dotnet/machinelearning/pull/5717","RelatedDescription":"Closed or merged PR \"Renamed master to main\" (#5717)"},{"Id":"833249875","IsPullRequest":false,"CreatedAt":"2021-03-16T22:40:57","Actor":"Hulkstance","Number":"5716","RawContent":null,"Title":"[Question] Microsoft.Data.Analysis","State":"open","Body":"I was waiting on `Microsoft.Data.Analysis` for a long time and more specifically `.Shift()`, `.Resample()` operations. I literally saw an issue about that, but not sure what happened. I recently saw that you moved the repo over here. What is the newest repo that I can use?\r\n\r\nhttps://github.com/xadupre/machinelearning_dataframe doesn't seem to be maintained.","Url":"https://github.com/dotnet/machinelearning/issues/5716","RelatedDescription":"Open issue \"[Question] Microsoft.Data.Analysis\" (#5716)"},{"Id":"833126387","IsPullRequest":true,"CreatedAt":"2021-03-16T22:31:12","Actor":"michaelgsharp","Number":"5715","RawContent":null,"Title":"Added main branch to yml files","State":"closed","Body":"This adds the branch \"main\" to the yml files in preparation for the rename of master to main.","Url":"https://github.com/dotnet/machinelearning/pull/5715","RelatedDescription":"Closed or merged PR \"Added main branch to yml files\" (#5715)"},{"Id":"832306389","IsPullRequest":false,"CreatedAt":"2021-03-16T00:34:56","Actor":"iluveu28","Number":"5714","RawContent":null,"Title":"ERROR : Schema mismatch for input column","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Linux\r\n- **.NET Version (eg., dotnet --info)**: 5\r\n\r\n### Issue\r\n\r\nWhen I got to the training step - https://dotnet.microsoft.com/learn/ml-dotnet/get-started-tutorial/train\r\n\r\nIt failed with below error. Why and how to fix it?\r\n\r\n### Source code / logs\r\n\r\nSchema mismatch for input column 'TIU_SOC_tf_CharExtractor': expected Expected known-size vector of Single, got Vector<Single>\r\nParameter name: inputSchema\r\n\r\n   at Microsoft.ML.ModelBuilder.AutoMLService.Experiments.AutoMLExperiment`3.<ExecuteAsync>d__21.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.ML.ModelBuilder.AutoMLEngine.<StartTrainingAsync>d__26.MoveNext() in /_/src/Microsoft.ML.ModelBuilder.AutoMLService/AutoMLEngineService/AutoMLEngine.cs:line 150\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5714","RelatedDescription":"Open issue \"ERROR : Schema mismatch for input column\" (#5714)"},{"Id":"829516465","IsPullRequest":true,"CreatedAt":"2021-03-15T16:52:19","Actor":"eerhardt","Number":"5710","RawContent":null,"Title":"Update to the latest Microsoft.DotNet.Interactive","State":"closed","Body":"This allows the DataFrame extension to work with the latest .NET Interactive.\r\n\r\nI also needed to change the DataFrame .csproj so it gets packed by including the right Pack.props file. \r\n\r\nAdded an .editorconfig entry so .csproj files are uniform in their spacing.\r\n\r\nThe only meaningful code change is the rows per page going from 10 to 25. 10 is just too small IMO.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5710","RelatedDescription":"Closed or merged PR \"Update to the latest Microsoft.DotNet.Interactive\" (#5710)"},{"Id":"831157625","IsPullRequest":false,"CreatedAt":"2021-03-14T13:34:37","Actor":"neoffer","Number":"5713","RawContent":null,"Title":"Native .NET alternatives of Python's data science and AI libraries","State":"open","Body":"I don't know how to develop on-premise chatbot app using .NET. Because .NET does not provide native data science and ai libraries.\r\n\r\nPlease develop native libraries for data science, machine learning and deep learning in .NET like TensorFlow, NumPy, SciPy, Matplotlab, Keras, NLTK, Pandas so we can develop on-premise ChatBot application in .NET Core using Microsoft's NuGet Packages.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5713","RelatedDescription":"Open issue \"Native .NET alternatives of Python's data science and AI libraries\" (#5713)"},{"Id":"830460540","IsPullRequest":true,"CreatedAt":"2021-03-12T21:05:55","Actor":"pgovind","Number":"5712","RawContent":null,"Title":"IDataView to DataFrame","State":"open","Body":"An extension method to convert an IDataView to a DataFrame.\r\n\r\ncc @LittleLittleCloud \r\n","Url":"https://github.com/dotnet/machinelearning/pull/5712","RelatedDescription":"Open PR \"IDataView to DataFrame\" (#5712)"},{"Id":"829626170","IsPullRequest":true,"CreatedAt":"2021-03-11T23:54:35","Actor":"pgovind","Number":"5711","RawContent":null,"Title":"Improve csv parsing","State":"open","Body":"This PR implements part 2 of improving our csv parsing:\r\n1) It finishes the implementation of TextFieldParser\r\n2) It makes `LoadCsv` use the new TextFieldParser implementation\r\n\r\nAs a result, we are now able to handle quotes (and quotes split across new lines) in csv files which is a huge improvement over what we are shipping currently.","Url":"https://github.com/dotnet/machinelearning/pull/5711","RelatedDescription":"Open PR \"Improve csv parsing\" (#5711)"},{"Id":"829489588","IsPullRequest":false,"CreatedAt":"2021-03-11T20:15:12","Actor":"michaelgsharp","Number":"5709","RawContent":null,"Title":"Master to Main rename","State":"open","Body":"We will be renaming the Master branch to Main next week on Tuesday March 16.","Url":"https://github.com/dotnet/machinelearning/issues/5709","RelatedDescription":"Open issue \"Master to Main rename\" (#5709)"},{"Id":"826810260","IsPullRequest":true,"CreatedAt":"2021-03-11T19:48:53","Actor":"michaelgsharp","Number":"5699","RawContent":null,"Title":"Fixes for tlc build breaks","State":"closed","Body":"With the removal of the TLC subscription which was hosting some assets we had errors trying to build. These assets have been moved into another azure devops repo and turned into a nuget package.\r\n\r\nThis pr changes the build process so it uses the nuget instead of directly downloading the assets. This involves some build changes as well as some test file changes.","Url":"https://github.com/dotnet/machinelearning/pull/5699","RelatedDescription":"Closed or merged PR \"Fixes for tlc build breaks\" (#5699)"},{"Id":"828443643","IsPullRequest":true,"CreatedAt":"2021-03-11T19:47:56","Actor":"michaelgsharp","Number":"5701","RawContent":null,"Title":"Nuget feed update","State":"closed","Body":"Renamed nuget feed from mlnet-testdata to mlnet-assets.","Url":"https://github.com/dotnet/machinelearning/pull/5701","RelatedDescription":"Closed or merged PR \"Nuget feed update\" (#5701)"},{"Id":"821382240","IsPullRequest":true,"CreatedAt":"2021-03-11T19:41:26","Actor":"pgovind","Number":"5641","RawContent":null,"Title":"Move DataFrame to machinelearning","State":"closed","Body":"Move MDA, MDAI, MDA.Tests and MDAI.Tests to machinelearning. \r\n\r\nFor an easier time reviewing, the real changes are after the `Merge branch 'port' of ../corefxlab into DataFrame_1` commit.\r\n\r\nJust for posterity, I used `git-filter-repo` to pare down corefxlab locally to just the MDA and MDAI parts that I was interested in and then moved them over to the machinelearning repo. `git-filter-repo` was way faster than `git filter-branch` on my machine.","Url":"https://github.com/dotnet/machinelearning/pull/5641","RelatedDescription":"Closed or merged PR \"Move DataFrame to machinelearning\" (#5641)"},{"Id":"827023644","IsPullRequest":false,"CreatedAt":"2021-03-10T03:26:17","Actor":"michaelgsharp","Number":"5700","RawContent":null,"Title":"Fix URL and datasets for samples.","State":"open","Body":"With the removal of the TLC subscription, all the URL's in the samples for the datasets need to be fixed.\r\n\r\nIf we don't have access to those datasets anymore, we will need to either create them again or come up with new ones.","Url":"https://github.com/dotnet/machinelearning/issues/5700","RelatedDescription":"Open issue \"Fix URL and datasets for samples.\" (#5700)"},{"Id":"823967636","IsPullRequest":false,"CreatedAt":"2021-03-07T17:18:02","Actor":"WalternativE","Number":"5698","RawContent":null,"Title":"DateTime columns cause schema type lookups to fail in DataFrame","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:  Windows 10 20H2 19042.844\r\n- **.NET Version (eg., dotnet --info)**:  5.0.200\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n  I tried to use the `Explore()` and `ExploreWithSandDance()` extension methods on the\r\n  `IDataView` type of the underlying `DataFrame` which contained a column of the type\r\n  `PrimitiveDataFrameColumn<DateTime>`.\r\n\r\n- **What happened?**\r\n  I received the following error\r\n  ```\r\n  Error: System.NotSupportedException: Specified method is not supported.\r\n  at Microsoft.Data.Analysis.PrimitiveDataFrameColumn`1.GetDataViewType()\r\n  at Microsoft.Data.Analysis.PrimitiveDataFrameColumn`1.AddDataViewColumn(Builder builder)\r\n  at Microsoft.Data.Analysis.DataFrame.get_DataViewSchema()\r\n  at Microsoft.ML.DataViewExtensions.ToTabularJsonString(IDataView source)\r\n  at Microsoft.ML.DataViewExtensions.ExploreWithSandDance(IDataView source)\r\n  at <StartupCode$FSI_0011>.$FSI_0011.main@()\r\n  ``` \r\n\r\n- **What did you expect?**\r\n  I expected the same behavior as when I tried the same procedure with a `DataFrame` which did not contain a\r\n  `DateTime` column.\r\n\r\n### Source code / logs\r\n\r\nAs explained above I received a `NotSupportedException`. I assume, that it is connected to the execution of this line\r\n`source.Schema.ToDictionary(column => column.Name, column => column.Type.RawType);` in the extension method to create the `TabularJsonObject` [here](https://github.com/dotnet/interactive/blob/4f22e1b0cd1023ee8e4ddff30de6b7c845a674c4/src/Microsoft.DotNet.Interactive.ExtensionLab/DataFrameKernelExtension.cs#L178).\r\n\r\nI created a [notebook](https://github.com/WalternativE/DotnetInteractiveExperiments/blob/main/notebooks/DataFrameDateTimeProblem.ipynb) which showcases how I stumbled upon the error. It should be possible to use the binder link in the readme for this, even though it botches up the last redirect for some reason.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5698","RelatedDescription":"Open issue \"DateTime columns cause schema type lookups to fail in DataFrame\" (#5698)"},{"Id":"823950980","IsPullRequest":false,"CreatedAt":"2021-03-07T16:02:23","Actor":"jamsoft","Number":"5697","RawContent":null,"Title":"Attempting to use In Memory Images for Prediction","State":"open","Body":"### System information\r\n\r\n- Windows 10\r\n\r\n### Issue\r\n\r\n- **I'm trying to use in memory images with an ML Model Loaded from an MLModel.zip file**\r\n- **I cannot work our how to build the pipeline in order to adapt the input schema?**\r\n\r\n### Source code / logs\r\n\r\nI'm following the examples I can find in the ML repository. The such as the WebApp and WebApi Images classification example applications but they all wrap a tensorflow model in order to then be able to pass a Bitmap to the Prediction method.\r\n\r\nI've been trying all day to find either simpler examples or the right syntax and I've completely failed so far. The examples build pipelines to do things like resizing, extracting pixels and recolorising whereas all my images are pre-prepared and I'm using an ML.NET model which should be the simplest use case but there aren't currently any of these simpler examples.\r\n\r\nWhat I cant find out how to do, or even identify if it's the right approach, is create a pipeline that loads an ML.NET \"native\" model created by Model Builder then adapt this to take in a Bitmap using the same type of class as in the [demos](https://github.com/CESARDELATORRE/TensorFlowImageClassificationWebApp):\r\n\r\nSuch as this:\r\n\r\n```\r\n    public class ImageInputData\r\n    {\r\n        [ImageType(227, 227)]\r\n        public Bitmap Image { get; set; }\r\n    }\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5697","RelatedDescription":"Open issue \"Attempting to use In Memory Images for Prediction\" (#5697)"},{"Id":"823538954","IsPullRequest":false,"CreatedAt":"2021-03-06T02:25:49","Actor":"zyzhu","Number":"5696","RawContent":null,"Title":"OLS regression outputs wrong TStats and PValue","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.200\r\n Commit:    70b3e65d53\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19042\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.200\\\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI tried to use ML.Net to run a stats 101 case to get familiar with the library.\r\nThe data points are generated so that y = x * 2 + random(). I use OLS trainer to estimate its slope and output its tstats and pvalues.\r\n- **What happened?**\r\npValue turns out to be 1 and tstat turns out to be 0.\r\n- **What did you expect?**\r\npValue is supposed to be close to zero and tstat is supposed to be very large.\r\n\r\nHere is the equivalent R code\r\n```r\r\ndf <- data.frame(x = 1:100, y = 1:100*2 + runif(100))\r\nmodel <- lm(y ~ x, df)\r\nsummary(model)\r\n```\r\noutput of R\r\n```\r\nResiduals:\r\n     Min       1Q   Median       3Q      Max \r\n-0.48638 -0.20409 -0.04365  0.22835  0.52931 \r\n\r\nCoefficients:\r\n             Estimate Std. Error  t value Pr(>|t|)    \r\n(Intercept) 0.5067878  0.0562763    9.005 1.74e-14 ***\r\nx           1.9994857  0.0009675 2066.691  < 2e-16 ***\r\n---\r\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\r\n\r\nResidual standard error: 0.2793 on 98 degrees of freedom\r\nMultiple R-squared:      1,\tAdjusted R-squared:      1 \r\nF-statistic: 4.271e+06 on 1 and 98 DF,  p-value: < 2.2e-16\r\n```\r\n\r\n### Source code / logs\r\nThe following is the F# script file. Or you can run it in Jupyter notebook via dotnet interactive kernel.\r\n```fsharp\r\n#r \"nuget: Microsoft.ML\"\r\n#r \"nuget: Microsoft.ML.Mkl.Components\"\r\nopen System\r\nopen Microsoft.ML\r\nopen Microsoft.ML.Data\r\n\r\n[<CLIMutable>]\r\ntype Factor = {\r\n    [<ColumnName(\"Label\")>]\r\n    y : float32\r\n    intercept: float32\r\n    x : float32\r\n}\r\n\r\n// Generate data: y = x * 2 + rnd\r\nlet rnd = Random()\r\nlet rows =\r\n    [1.0 .. 100.0]\r\n    |> Seq.map(fun v ->\r\n        {\r\n            y = float32 (v * 2.0 + rnd.NextDouble())\r\n            intercept = float32 1.\r\n            x = float32 v\r\n        }\r\n    )\r\n\r\nlet context = new MLContext()\r\nlet dataView = context.Data.LoadFromEnumerable(rows)\r\nlet pipeline =\r\n    EstimatorChain()\r\n        .Append(context.Transforms.Concatenate(\"Features\", \"intercept\", \"x\"))\r\n        .Append(context.Regression.Trainers.Ols())\r\n\r\nlet model = dataView |> pipeline.Fit\r\nlet modelParams = model.LastTransformer.Model\r\nSeq.zip3 modelParams.Weights modelParams.TValues modelParams.PValues\r\n|> Array.ofSeq\r\n|> Array.iteri(fun i (w, t, p) ->\r\n    printfn $\"Beta {i}, w: {w:f3}, tStats: {t:f3}, pValue: {p:f3}\")\r\n```\r\nOutput\r\n```\r\nBeta 0, w: 0.005, tStats: 0.000, pValue: 1.000\r\nBeta 1, w: 2.000, tStats: 0.000, pValue: 1.000\r\n```\r\n\r\nAnother general feedback is that the ceremony in ML.NET is so complicated, compared to the simplicity in R sample above. I do not expect users from R/Python community can embrace this complexity. The library seems to be designed for software engineers only in mind. Maybe there's a balance in between R/Python and dotnet.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5696","RelatedDescription":"Open issue \"OLS regression outputs wrong TStats and PValue\" (#5696)"},{"Id":"822360014","IsPullRequest":false,"CreatedAt":"2021-03-04T21:46:13","Actor":"MichaelBetser","Number":"5643","RawContent":null,"Title":"ml.net 1.5.2 not compiling on windows because missing dependencies","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: windows 10 x64 pro version 10.0.19042\r\n- **.NET Version (eg., dotnet --info)**: 5.0.200\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried to compile ml.net 1.5.2 on windows to get compatible maml.exe binary\r\n- **What happened?**\r\ncompile is failing when resolving dependencies\r\n- **What did you expect?**\r\nto compile\r\n\r\n### Source code / logs\r\nE:\\git\\ml.net_1.5.2\\machinelearning>.\\build.cmd\r\nInstalling procdump.exe\r\nFinish install procdump.exe\r\nInstalling dotnet runtime 2.1.12...\r\nInstalling dotnet cli 3.1.102...\r\nRestoring BuildTools version 3.0.0-preview4-04926-01...\r\nERROR: Could not restore build tools correctly.\r\nPlease check the detailed log that follows.\r\nRunning \"E:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.cmd\"\r\nInstalling 'https://dotnetcli.azureedge.net/dotnet/Runtime/2.1.12/dotnet-runtime-2.1.12-win-x64.zip' to 'E:\\git\\ml.net_1.5.2\\machinelearning\\Tools\\dotnetcli\\dotnet-runtime-2.1.12-win-x64.zip'\r\nInstalling 'https://dotnetcli.azureedge.net/dotnet/Sdk/3.1.102/dotnet-sdk-3.1.102-win-x64.zip' to 'E:\\git\\ml.net_1.5.2\\machinelearning\\Tools\\dotnetcli\\dotnet-sdk-3.1.102-win-x64.zip'\r\nRunning: \"E:\\git\\ml.net_1.5.2\\machinelearning\\Tools\\dotnetcli\\dotnet.exe\" restore \"E:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.msbuild\" --no-cache --packages \"E:\\git\\ml.net_1.5.2\\machinelearning\\packages\" --source \"https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\" /p:BuildToolsPackageVersion=3.0.0-preview4-04926-01 /p:ToolsDir=E:\\git\\ml.net_1.5.2\\machinelearning\\Tools\r\nE:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.msbuild : error NU1101: Unable to find package Microsoft.SymbolUploader.Build.Task. No packages exist with this id in source(s): https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\r\nE:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.msbuild : error NU1101: Unable to find package Microsoft.DotNet.BuildTools. No packages exist with this id in source(s): https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\r\n  Restore failed in 1.06 sec for E:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.msbuild.","Url":"https://github.com/dotnet/machinelearning/issues/5643","RelatedDescription":"Closed issue \"ml.net 1.5.2 not compiling on windows because missing dependencies\" (#5643)"},{"Id":"821497223","IsPullRequest":true,"CreatedAt":"2021-03-04T02:56:46","Actor":"michaelgsharp","Number":"5642","RawContent":null,"Title":"Updating version after release","State":"closed","Body":"Update the version after the last release.\r\nSetting new version to 1.5.6 for non-preview packages.\r\nSetting new version to 0.17.6 for preview packages.","Url":"https://github.com/dotnet/machinelearning/pull/5642","RelatedDescription":"Closed or merged PR \"Updating version after release\" (#5642)"},{"Id":"819368089","IsPullRequest":true,"CreatedAt":"2021-03-03T18:36:10","Actor":"pgovind","Number":"5636","RawContent":null,"Title":"[WIP]Move MDA and MDAI to machinelearning","State":"closed","Body":"Move the DataFrame and DataFrame.Interactive projects to the machinelearning sln.\r\n\r\nDon't review yet. I'm working on moving the test projects to this repo too.\r\n\r\ncc @eerhardt @michaelgsharp ","Url":"https://github.com/dotnet/machinelearning/pull/5636","RelatedDescription":"Closed or merged PR \"[WIP]Move MDA and MDAI to machinelearning\" (#5636)"},{"Id":"821312065","IsPullRequest":false,"CreatedAt":"2021-03-03T17:12:11","Actor":"lisahua","Number":"5640","RawContent":null,"Title":"[AnomalyDetection] Some points marked as anomaly with little deviation","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: master\r\n\r\n### Issue\r\n\r\n- **What did you do?** Apply AnomalyDetection API\r\n- **What happened?** Some points are marked as anomaly while some others that look more like anomaly are not marked as anomaly.\r\n- **What did you expect?** I expect the points that look has more deviations mark as anomaly, rather than the ones with small deviation.\r\n![image](https://user-images.githubusercontent.com/3010893/109843877-6d44c600-7c00-11eb-8049-69d579ee8bdb.png)\r\n\r\nExpecting the highlighted points with higher deviation to be anomalies.\r\n\r\n**Please assign the issue** to: https://github.com/guinao and https://github.com/mengaims\r\n\r\n### Source code / logs\r\n\r\n[Sales vs Date.csv](https://aiteststracc.blob.core.windows.net/testfiles/Sales%20%20Profit%20by%20Year,%20Quarter,%20Month%20and%20Day.csv?sv=2019-02-02&st=2021-03-03T16%3A54%3A18Z&se=2023-03-04T16%3A54%3A00Z&sr=b&sp=racw&sig=xBnvuqciOfsqx90DtS8USnxBXMbRz7%2BJRuo5CD28u%2BY%3D) (Input data)\r\n\r\n           var anomalyDetectorOptions = new SrCnnEntireAnomalyDetectorOptions()\r\n            {\r\n                DetectMode = //WithMargin,\r\n                Sensitivity = 20,\r\n                DeseasonalityMode = SrCnnDeseasonalityMode.Median,\r\n                Period = -1,\r\n                Threshold =0.18,\r\n            };\r\n\r\n            anomalyResult = this.mlContext.AnomalyDetection.DetectEntireAnomalyBySrCnn(\r\n      ...\r\n            anomalyDetectorOptions);\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5640","RelatedDescription":"Open issue \"[AnomalyDetection] Some points marked as anomaly with little deviation\" (#5640)"},{"Id":"820363740","IsPullRequest":true,"CreatedAt":"2021-03-03T03:19:36","Actor":"michaelgsharp","Number":"5639","RawContent":null,"Title":"Added in release notes for 1.5.5","State":"closed","Body":"Here are the release notes for 1.5.5. #5634 needs to go in before these notes do.","Url":"https://github.com/dotnet/machinelearning/pull/5639","RelatedDescription":"Closed or merged PR \"Added in release notes for 1.5.5\" (#5639)"},{"Id":"819095978","IsPullRequest":true,"CreatedAt":"2021-03-03T03:19:24","Actor":"michaelgsharp","Number":"5634","RawContent":null,"Title":"Treat TensorFlow output as non-batched.","State":"closed","Body":"Currently, if TensorFlow has a -1 as the first dimension in an output tensor then ML.NET always treats it as the batch number. There are some cases where we don't want it treated as a batch number, but an actual dimension. This PR gives the user the ability to specify whether its batch output or not but keeps the default behavior of assuming it is batched.\r\n\r\nThis issue originally stems from #5364, though there was a lot of offline conversation about it.","Url":"https://github.com/dotnet/machinelearning/pull/5634","RelatedDescription":"Closed or merged PR \"Treat TensorFlow output as non-batched.\" (#5634)"},{"Id":"814853973","IsPullRequest":true,"CreatedAt":"2021-03-02T20:23:39","Actor":"michaelgsharp","Number":"5629","RawContent":null,"Title":"CI testing for the new ORT package","State":"closed","Body":"CI testing for the new ORT package.","Url":"https://github.com/dotnet/machinelearning/pull/5629","RelatedDescription":"Closed or merged PR \"CI testing for the new ORT package\" (#5629)"},{"Id":"817068034","IsPullRequest":true,"CreatedAt":"2021-03-02T17:49:22","Actor":"michaelgsharp","Number":"5631","RawContent":null,"Title":"AutoML aggregate exception","State":"closed","Body":"Fixes #5612. In AutoML when the max experiment time is up a cancellation token is used to cancel any runs in progress. We catch the `OperationCanceledException` so that it doesn't prevent the finished models from being returned. However for some trainers, like FastTree, because training is done in parallel it can throw multiple `OperationCancelledExceptions` grouped together in an `AggregateException`. This was missing the original `catch` block and so was causing no results to be returned. This PR adds in another check for the `AggregateException` where all inner exceptions are of type `OperationCancelledException`, and treats it the same was as a plain `OperationCancelledException`.\r\n\r\nI was not sure how to really add tests for this, It was brought up by a user and you _can_ repro it locally though its not consistent. If any of you have ideas for good tests let me know.","Url":"https://github.com/dotnet/machinelearning/pull/5631","RelatedDescription":"Closed or merged PR \"AutoML aggregate exception\" (#5631)"},{"Id":"819959310","IsPullRequest":false,"CreatedAt":"2021-03-02T12:11:28","Actor":"HollandRisley","Number":"5638","RawContent":null,"Title":"Is Multivariate Time based series forecasting in the roadmap for ML.Net?","State":"open","Body":"Is Multivariate Time based series forecasting in the roadmap for ML.Net?","Url":"https://github.com/dotnet/machinelearning/issues/5638","RelatedDescription":"Open issue \"Is Multivariate Time based series forecasting in the roadmap for ML.Net?\" (#5638)"},{"Id":"819293881","IsPullRequest":true,"CreatedAt":"2021-03-02T06:45:23","Actor":"michaelgsharp","Number":"5635","RawContent":null,"Title":"Documentation updates","State":"closed","Body":"Just documentation changes and updates that fixes #5615, fixes #5594, and fixes #5588. \r\n\r\nUpdates to document the correct version of CUDA for TensorFlow.\r\nDocuments an issue with brew and installing libomp.\r\nChanges an ONNX url to be the correct URL.","Url":"https://github.com/dotnet/machinelearning/pull/5635","RelatedDescription":"Closed or merged PR \"Documentation updates\" (#5635)"},{"Id":"819566850","IsPullRequest":false,"CreatedAt":"2021-03-02T03:23:53","Actor":"iluveu28","Number":"5637","RawContent":null,"Title":"Dynamic Training Pipeline","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win x64 and Linux x64\r\n- **.NET Version (eg., dotnet --info)**: 3.1 and 5.0\r\n\r\n### Issue\r\n\r\nI create a web api application that accepts a csv file. I want to train and predict without hardcoding any fields coz the user can upload any csv file with any header names they desire. We can assume the last column is the label.\r\n\r\nSomething like how your tutorial here generates the codes on the fly - https://dotnet.microsoft.com/learn/ml-dotnet/get-started-tutorial/create\r\n\r\nI'm OK to fix the algo & assume the last column is the label. However, How can I pick the feature columns, one hot encoding and one hot hash encoding columns on the fly?\r\n\r\n### Source code / logs\r\n\r\nExample with LigthtGbm algo :-\r\n----------------------------------\r\n\r\n            var dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"BinRootCause\", \"BinRootCause\")\r\n                                      .Append(mlContext.Transforms.Categorical.OneHotEncoding(new[] { new InputOutputColumnPair(\"Lot\", \"Lot\"), new InputOutputColumnPair(\"Program\", \"Program\"), new InputOutputColumnPair(\"SBLTriggeredBin\", \"SBLTriggeredBin\"), new InputOutputColumnPair(\"SBLTriggerRule\", \"SBLTriggerRule\"), new InputOutputColumnPair(\"WW\", \"WW\"), new InputOutputColumnPair(\"DevRevStep\", \"DevRevStep\"), new InputOutputColumnPair(\"SummaryId\", \"SummaryId\"), new InputOutputColumnPair(\"Product\", \"Product\"), new InputOutputColumnPair(\"Family\", \"Family\"), new InputOutputColumnPair(\"TIU_SOC\", \"TIU_SOC\"), new InputOutputColumnPair(\"TESTER_SOC_TH\", \"TESTER_SOC_TH\") }))\r\n                                      .Append(mlContext.Transforms.Categorical.OneHotHashEncoding(new[] { new InputOutputColumnPair(\"Operation\", \"Operation\"), new InputOutputColumnPair(\"TestedQty\", \"TestedQty\"), new InputOutputColumnPair(\"TestEndDate\", \"TestEndDate\"), new InputOutputColumnPair(\"InterfaceBin\", \"InterfaceBin\"), new InputOutputColumnPair(\"FunctionalBin\", \"FunctionalBin\") }))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"VisualId_tf\", \"VisualId\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"SortLot_tf\", \"SortLot\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TESTER_CELL_tf\", \"TESTER_CELL\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TESTER_tf\", \"TESTER\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TIU_tf\", \"TIU\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TH_tf\", \"TH\"))\r\n                                      .Append(mlContext.Transforms.Concatenate(\"Features\", new[] { \"Lot\", \"Program\", \"SBLTriggeredBin\", \"SBLTriggerRule\", \"WW\", \"DevRevStep\", \"SummaryId\", \"Product\", \"Family\", \"TIU_SOC\", \"TESTER_SOC_TH\", \"Operation\", \"TestedQty\", \"TestEndDate\", \"InterfaceBin\", \"FunctionalBin\", \"VisualId_tf\", \"SortLot_tf\", \"TESTER_CELL_tf\", \"TESTER_tf\", \"TIU_tf\", \"TH_tf\", \"SBLValue\", \"SBLLimit\", \"SortX\", \"SortY\", \"SortWafer\" }));\r\n            // Set the training algorithm \r\n            var trainer = mlContext.MulticlassClassification.Trainers.LightGbm(labelColumnName: @\"BinRootCause\", featureColumnName: \"Features\")\r\n                                      .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\r\n\r\n\r\nExample with FastTree algo :\r\n------------------------------\r\n\r\n            var dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"BinRootCause\", \"BinRootCause\")\r\n                                      .Append(mlContext.Transforms.Categorical.OneHotEncoding(new[] { new InputOutputColumnPair(\"Lot\", \"Lot\"), new InputOutputColumnPair(\"Program\", \"Program\"), new InputOutputColumnPair(\"SBLTriggeredBin\", \"SBLTriggeredBin\"), new InputOutputColumnPair(\"SBLTriggerRule\", \"SBLTriggerRule\"), new InputOutputColumnPair(\"WW\", \"WW\"), new InputOutputColumnPair(\"DevRevStep\", \"DevRevStep\"), new InputOutputColumnPair(\"SummaryId\", \"SummaryId\"), new InputOutputColumnPair(\"Product\", \"Product\"), new InputOutputColumnPair(\"Family\", \"Family\"), new InputOutputColumnPair(\"TIU_SOC\", \"TIU_SOC\"), new InputOutputColumnPair(\"TESTER_SOC_TH\", \"TESTER_SOC_TH\") }))\r\n                                      .Append(mlContext.Transforms.Categorical.OneHotHashEncoding(new[] { new InputOutputColumnPair(\"Operation\", \"Operation\"), new InputOutputColumnPair(\"TestedQty\", \"TestedQty\"), new InputOutputColumnPair(\"TestEndDate\", \"TestEndDate\"), new InputOutputColumnPair(\"InterfaceBin\", \"InterfaceBin\"), new InputOutputColumnPair(\"FunctionalBin\", \"FunctionalBin\") }))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"VisualId_tf\", \"VisualId\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"SortLot_tf\", \"SortLot\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TESTER_CELL_tf\", \"TESTER_CELL\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TESTER_tf\", \"TESTER\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TIU_tf\", \"TIU\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TH_tf\", \"TH\"))\r\n                                      .Append(mlContext.Transforms.Concatenate(\"Features\", new[] { \"Lot\", \"Program\", \"SBLTriggeredBin\", \"SBLTriggerRule\", \"WW\", \"DevRevStep\", \"SummaryId\", \"Product\", \"Family\", \"TIU_SOC\", \"TESTER_SOC_TH\", \"Operation\", \"TestedQty\", \"TestEndDate\", \"InterfaceBin\", \"FunctionalBin\", \"VisualId_tf\", \"SortLot_tf\", \"TESTER_CELL_tf\", \"TESTER_tf\", \"TIU_tf\", \"TH_tf\", \"SBLValue\", \"SBLLimit\", \"SortX\", \"SortY\", \"SortWafer\" }))\r\n                                      .AppendCacheCheckpoint(mlContext);\r\n            // Set the training algorithm \r\n            var trainer = mlContext.MulticlassClassification.Trainers.OneVersusAll(mlContext.BinaryClassification.Trainers.FastTree(labelColumnName: @\"BinRootCause\", featureColumnName: \"Features\"), labelColumnName: @\"BinRootCause\")\r\n                                      .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5637","RelatedDescription":"Open issue \"Dynamic Training Pipeline\" (#5637)"},{"Id":"818953302","IsPullRequest":false,"CreatedAt":"2021-03-01T15:03:14","Actor":"nubcake94","Number":"5633","RawContent":null,"Title":"Tensorflow prediction failure with MSTest","State":"open","Body":"### System information\r\n\r\n- **OS version/distro** Windows 10:\r\n- **.NET Version (eg., dotnet --info)** 4.8: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nLoaded Tensorflow model then called MakePrediction.\r\n\r\n- **What happened?**\r\n\r\nA Tensorflow.TensorflowException was raised\r\n\r\n- **What did you expect?**\r\n\r\nNo exception, expected functionality\r\n\r\n### Source code\r\n\r\n```\r\npublic float PredictOne(Bitmap image)\r\n        {\r\n            if(image == null)\r\n            {\r\n                throw new ArgumentNullException();\r\n            }\r\n\r\n            float[] floatArrayImage = BitmapToFloatArrayWithPreprocessing(image);\r\n            ImageInputData[] input = new ImageInputData[] { new ImageInputData() { serving_default_input_1 = floatArrayImage } };\r\n            var outScores = MakePrediction(input);\r\n\r\n            float result = 0;\r\n\r\n            foreach(var prediction in outScores)\r\n            {\r\n                result = prediction.StatefulPartitionedCall[0];\r\n            }\r\n\r\n            return result;\r\n        }\r\n```\r\n\r\n### Log\r\n\r\n```\r\nTest method HardhatDet.Tests.HardhatDetTest.PredictOneTestNoHardhat threw exception: \r\nSystem.InvalidOperationException: Splitter/consolidator worker encountered exception while consuming source data ---> Tensorflow.TensorflowException: Op type not registered 'FusedBatchNormV3' in binary running on GITLAB-RUNNER. Make sure the Op and Kernel are registered in the binary running in this process. Note that if you are loading a saved graph which used ops from tf.contrib, accessing (e.g.) `tf.contrib.resampler` should be done before importing the graph, as contrib ops are lazily registered when the module is first accessed.\r\n\t [[{{node StatefulPartitionedCall}}]]\r\n\t [[{{node StatefulPartitionedCall}}]]\r\n  Stack Trace:\r\n      at Microsoft.ML.TensorFlow.TensorFlowUtils.Runner.Run()\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.Mapper.UpdateCacheIfNeeded(Int64 position, ITensorValueGetter[] srcTensorGetters, String[] activeOutputColNames, OutputCache outputCache)\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.Mapper.<>c__DisplayClass9_0`1.<MakeGetter>b__4(VBuffer`1& dst)\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.InPipe.Impl`1.Fill()\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.<>c__DisplayClass7_1.<ConsolidateCore>b__2()\r\n--- End of inner exception stack trace ---\r\n    at Microsoft.ML.Data.DataViewUtils.Splitter.Batch.SetAll(OutPipe[] pipes)\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.Cursor.MoveNextCore()\r\n   at Microsoft.ML.Data.RootCursorBase.MoveNext()\r\n   at Microsoft.ML.Data.TypedCursorable`1.RowCursorImplementation.MoveNext()\r\n   at Microsoft.ML.PipeEngine`1.<RunPipe>d__3.MoveNext()\r\n   at HardhatDet.HardhatDetector.PredictOne(Bitmap image) in D:\\Gitlabrunner\\builds\\gb6xNTch\\0\\ftf\\door\\HardhatDet\\HardhatDetector.cs:line 55\r\n   at HardhatDet.Tests.HardhatDetTest.PredictOneTestNoHardhat() in D:\\Gitlabrunner\\builds\\gb6xNTch\\0\\ftf\\door\\GuardTests\\HardhatDetTest.cs:line 123\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5633","RelatedDescription":"Open issue \"Tensorflow prediction failure with MSTest\" (#5633)"},{"Id":"817620250","IsPullRequest":false,"CreatedAt":"2021-02-26T19:51:10","Actor":"justinormont","Number":"5632","RawContent":null,"Title":"Log message passing in AutoML child contexts","State":"open","Body":"### Method of passing log messages\r\nTo support the the ability to cancel runs, we needed a separate context for the child runs, and we pass the log messages from the child to parent. \r\n\r\nCurrent method of passing the messages is imperfect.\r\n\r\n**Current returned log format:**\r\n`\"[Source=AutoML, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Bottleneck Computation, Dataset used:      Train, Image Index: 3954\"`\r\n\r\nThis duplicates the header on the messages (`[Source=AutoML, Kind=Trace]` and `[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace]`),  and makes it difficult to filter/select to the wanted log lines.\r\n\r\n**Correct format:**\r\n`\"[Source=AutoML; ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Bottleneck Computation, Dataset used:      Train, Image Index: 3954\"`\r\n\r\nThis single header then lets you filter on the log line properties (e.g. `e.Source == \"xyz\"`) instead of parsing its free text.","Url":"https://github.com/dotnet/machinelearning/issues/5632","RelatedDescription":"Open issue \"Log message passing in AutoML child contexts\" (#5632)"},{"Id":"816591248","IsPullRequest":false,"CreatedAt":"2021-02-25T16:24:27","Actor":"lisahua","Number":"5630","RawContent":null,"Title":"[AnomalyDetection] ExpectedRange higher than expected?","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: master\r\n\r\n### Issue\r\n\r\n- **What did you do?** I apply anomaly detection with csv file below\r\n- **What happened?** Expected the expectedRange around 30K-40K, yet it's >50K.\r\n- **What did you expect?** same above\r\n![image](https://user-images.githubusercontent.com/3010893/109183600-f95b7700-7742-11eb-9338-9563e377a9d7.png)\r\n\r\n**Please assign the issue** to: https://github.com/guinao and https://github.com/mengaims\r\n\r\n### Source code / logs\r\n```\r\n            var anomalyDetectorOptions = new SrCnnEntireAnomalyDetectorOptions()\r\n            {\r\n                DetectMode = //WithMargin,\r\n                Sensitivity = 84,\r\n                DeseasonalityMode = SrCnnDeseasonalityMode.Median,\r\n                Period = -1,\r\n                Threshold =0.12,\r\n            };\r\n\r\n            anomalyResult = this.mlContext.AnomalyDetection.DetectEntireAnomalyBySrCnn(\r\n...\r\n            anomalyDetectorOptions);\r\n```\r\n\r\nInput data:\r\nValue,Date\r\n39800,2020-01-01 00:00:00\r\n35000,2020-02-01 00:00:00\r\n35600,2020-03-01 00:00:00\r\n31700,2020-04-01 00:00:00\r\n34900,2020-05-01 00:00:00\r\n35200,2020-06-01 00:00:00\r\n38900,2020-07-01 00:00:00\r\n63981,2020-08-01 00:00:00\r\n42000,2020-09-01 00:00:00\r\n39400,2020-10-01 00:00:00\r\n33700,2020-11-01 00:00:00\r\n37800,2020-12-01 00:00:00\r\n34200,2021-01-01 00:00:00\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5630","RelatedDescription":"Open issue \"[AnomalyDetection] ExpectedRange higher than expected?\" (#5630)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-03-18T05:30:29.2358103Z","RunDurationInMilliseconds":514}