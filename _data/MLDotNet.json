{"Data":{"GitHub":{"Issues":[{"Id":"1378730578","IsPullRequest":false,"CreatedAt":"2022-09-20T02:28:22","Actor":"luisquintanilla","Number":"6331","RawContent":null,"Title":"Column CustomMapping overload","State":"open","Body":"## Problem\r\n\r\nWhen I want to apply a custom transform to a single data column in my dataset, I have to provide the input and output types. If I've used TextLoader to load my data without defining schema classes, I now have to go and create new classes for my input and output. \r\n\r\n```csharp\r\nvar cols = new [] \r\n{\r\n    new TextLoader.Column(name: \"Text\",dataKind:DataKind.String,index:47),\r\n    new TextLoader.Column(\r\n        name: \"Categorical\",\r\n        dataKind: DataKind.String,\r\n        source: new TextLoader.Range[] {\r\n            new TextLoader.Range(19),\r\n            new TextLoader.Range(20),\r\n            new TextLoader.Range(21),\r\n            new TextLoader.Range(50),\r\n            new TextLoader.Range(59),\r\n            new TextLoader.Range(71),\r\n            new TextLoader.Range(83)}),\r\n    new TextLoader.Column(name:\"Label\",dataKind:DataKind.String,2)\r\n};\r\n\r\nvar dataLoader = ctx.Data.CreateTextLoader(columns:cols);\r\nvar idv = dataLoader.Load(path);\r\n\r\npublic class CustomData {public string Text {get;set;}};\r\n\r\nAction<CustomData,CustomData> customTransform = (rowIn,rowOut) => {\r\n    rowIn.Text = rowOut.Text.ToUpper()\r\n};\r\n```\r\n\r\n## Proposed Solution\r\n\r\nCreate an overload to `CustomMapping` that takes an InputColumnName and OutputColumnName parameters which perform the lookup and apply the transform to the specified columns.\r\n\r\n```csharp\r\nAction<string,string> capitalize = (colIn,colOut) => \r\n{\r\n    colOut = colIn.ToUpper();\r\n}\r\n\r\nvar capitalizeTransform = ctx.Transforms.CustomMapping(capitalize,\"capitalizeTransform\",inputColumnName: \"Text\", outputColumnName: \"CapitalizedText\");\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6331","RelatedDescription":"Open issue \"Column CustomMapping overload\" (#6331)"},{"Id":"1378718305","IsPullRequest":false,"CreatedAt":"2022-09-20T02:07:08","Actor":"luisquintanilla","Number":"6330","RawContent":null,"Title":"Infer T in CreateEnumerable<T> based in DataView schema","State":"open","Body":"## Problem\r\n\r\nToday, when an `IDataView` is created using `TextLoader`, there's no need to create classes that define the schema. \r\n\r\n```csharp\r\nvar cols = new [] \r\n{\r\n    new TextLoader.Column(name: \"Text\",dataKind:DataKind.String,index:47),\r\n    new TextLoader.Column(\r\n        name: \"Categorical\",\r\n        dataKind: DataKind.String,\r\n        source: new TextLoader.Range[] {\r\n            new TextLoader.Range(19),\r\n            new TextLoader.Range(20),\r\n            new TextLoader.Range(21),\r\n            new TextLoader.Range(50),\r\n            new TextLoader.Range(59),\r\n            new TextLoader.Range(71),\r\n            new TextLoader.Range(83)}),\r\n    new TextLoader.Column(name:\"Label\",dataKind:DataKind.String,2)\r\n};\r\n\r\nvar dataLoader = ctx.Data.CreateTextLoader(columns:cols);\r\nvar idv = dataLoader.Load(path);\r\n```\r\n\r\nHowever, if I want to export the `IDataView` as an `IEnumerable`, I can't because I need to explicitly provide the type of `IEnumerable<T>`. If no classes have been created, I now need to go and create a new class just to export to an `IEnumerable`.\r\n\r\n## Proposed solution\r\n\r\nJust like `LoadFromEnumerable` is able to infer and create an IDataView from `IEnumerable<T>`, `CreateEnumerable` should be able to infer `T` based on the DataView schema or bind to an object at runtime using `dynamic`.\r\n\r\n```csharp\r\nctx.Data.CreateEnumerable(idv,reuseRowObject:false,ignoreMissingColumns:false)\r\n```\r\n\r\nor \r\n\r\n```csharp\r\nctx.Data.CreateEnumerable<dynamic>(idv,reuseRowObject:false,ignoreMissingColumns:false)\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/6330","RelatedDescription":"Open issue \"Infer T in CreateEnumerable<T> based in DataView schema\" (#6330)"},{"Id":"1370417166","IsPullRequest":true,"CreatedAt":"2022-09-19T22:54:45","Actor":"LittleLittleCloud","Number":"6323","RawContent":null,"Title":"add loss to TrialResult","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n\r\nThis PR adds a new property `Loss` in `TrialResult` class and remove `AutoMLExperimentSettings.IsMaximize`. The `Loss` is always smaller the better and will be used to optimize tuners.\r\n\r\nThis PR also adds a replay test to `CFO` tuners, which verifies that the status of cfo can be recovered from previous training history.\r\n\r\nThis PR also removes `ITrialRunner.Run` method as this method has been replaced by `ITrialRunner.RunAsync`\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6323","RelatedDescription":"Closed or merged PR \"add loss to TrialResult\" (#6323)"},{"Id":"1378203881","IsPullRequest":false,"CreatedAt":"2022-09-19T16:17:30","Actor":"tarekgh","Number":"6329","RawContent":null,"Title":"Samples pointing at wrong resources ","State":"open","Body":"The following sample is pointing at `https://aka.ms/mlnet-resources/datasets/cifar10.zip` but looks this resources is not valid.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bca5736c23e093006bb6a5a3f85a789c4a1cdcf2/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/ImageClassification/LearningRateSchedulingCifarResnetTransferLearning.cs\r\n\r\nLooks we have code in different places trying to get the same resources from other sources https://github.com/dotnet/machinelearning/blob/bca5736c23e093006bb6a5a3f85a789c4a1cdcf2/docs/samples/Microsoft.ML.AutoML.Samples/Cifar10.cs#L13\r\n\r\nAlso there is other samples pointing at `https://github.com/onnx/models/tree/master/vision/classification/squeezenet` which exists but the zipped files there contains a different structured files than what the sample expect.\r\nhttps://github.com/dotnet/machinelearning/blob/04dda55ab0902982b16309c8e151f13a53e9366d/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/ApplyONNXModelWithInMemoryImages.cs#L16\r\neven the comment suggest there is Microsoft.ML.Onnx.TestModels nuget which not exist either. The correct structured file can be found in https://s3.amazonaws.com/download.onnx/models/opset_8/squeezenet.tar.gz\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6329","RelatedDescription":"Open issue \"Samples pointing at wrong resources \" (#6329)"},{"Id":"1376003377","IsPullRequest":false,"CreatedAt":"2022-09-16T14:07:00","Actor":"wil70","Number":"6328","RawContent":null,"Title":"[ML.Net, c#]  LightGBM re-training and Importing LightGBM CLI/MPI model","State":"open","Body":"1. Can I retrain LightGBM? \r\n    1.a. I tried via AutoML and it seems to start from scratch when I do a FIT or I call MLModel1.Training.cs \" public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)\" auto generated code.\r\n    1.b. In the documentation [\"Re-train a model\"](https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/retrain-model-ml-net), LightGBM is not listed as re-traine-able? \r\n           1.b.1. is it still true (asking as the documentation is 9 months old)? TY!\r\n           1.b.2 I can see from Python or even XGBM c/c++ you can retrain? using init_model option of lightgbm.train\r\n2. Can I use the model generated by [LightGBM CLI/MPI ](https://lightgbm.readthedocs.io/en/latest/Installation-Guide.html#build-mpi-version) in ML.net?\r\nThanks!\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6328","RelatedDescription":"Open issue \"[ML.Net, c#]  LightGBM re-training and Importing LightGBM CLI/MPI model\" (#6328)"},{"Id":"1375312748","IsPullRequest":false,"CreatedAt":"2022-09-16T02:34:53","Actor":"christopherfowers","Number":"6327","RawContent":null,"Title":"CLI --ignore-cols ignored on MacOS","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: MacOS 12.6\r\n - ML.NET Version: mlnet-osx-x64 - 16.13.9  \r\n - .NET Version: .NET 6.0.302\r\n\r\n**Describe the bug**\r\nWhen using the CLI from terminal to train a model using data from a csv file and specifying columns to ignore using `--ignore-cols 1, 2, 3` results in an output model and sample project that does in fact use the columns intended to be ignored as inputs for classification predictions. \r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. create a multi-column csv for text classification and call it `data.csv`. Include columns you don't with to be used in the predictions at all. (fill it with some meaningful data to train classification models.)\r\n2. open a terminal and navigate to the folder containing the csv.\r\n3. `mlnet classification --dataset \"data.csv\" --has-header true --train-time 10 --label-col 8 --ignore-cols 1, 2, 3, 4, 5, 6, 7, 9`\r\n(obviously this step should include the appropriate label column (0 indexed) and ignore columns (also 0 indexed))\r\n\r\n**Expected behavior**\r\nGenerated model and sample project should not use columns listed in the `--ignore-cols` flag arguments. \r\n\r\n**Actual behavior**\r\nEach of the ignored columns are still used. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/6327","RelatedDescription":"Open issue \"CLI --ignore-cols ignored on MacOS\" (#6327)"},{"Id":"1373907396","IsPullRequest":false,"CreatedAt":"2022-09-15T04:36:54","Actor":"luisquintanilla","Number":"6326","RawContent":null,"Title":"Create Pipeline Visualizer","State":"open","Body":"Create a visualization method that when given a pipeline displays a visual of the pipeline. This can work both for interactive and standard .NET projects. \r\n\r\n## API\r\n\r\n### Define pipeline\r\n\r\n```csharp\r\nvar pipeline = \r\n    mlContext.Transforms.Concatenate(outputColumnName:\"Features\", inputColumnNames: new [] {\"Col1\", \"Col2\" })\r\n        .Append(mlContext.Transforms.ReplaceMissingValues(outputColumnName:\"Features\",inputColumnName:\"Features\")\r\n        .Append(mlContext.Regression.Trainers.Sdca(labelColumnName:\"Label\", featureColumnName:\"Features\");\r\n```\r\n\r\n### Interactive\r\n\r\n```csharp\r\npipeline\r\n```\r\n\r\n### .NET project\r\n\r\n```csharp\r\npipeline.SaveToImage(\"image.png\");\r\n```\r\n\r\n## Samples\r\n\r\n```mermaid\r\nflowchart TB;\r\n  subgraph OutputColumns\r\n    OutputSchema[Score]\r\n  end\r\n  subgraph Pipeline\r\n    direction TB\r\n    Concatenate--Features-->ReplaceMissingValues\r\n    ReplaceMissingValues--Features-->Sdca\r\n    click Concatenate \"https://docs.microsoft.com/dotnet/api/microsoft.ml.transformextensionscatalog.concatenate?view=ml-dotnet#microsoft-ml-transformextensionscatalog-concatenate(microsoft-ml-transformscatalog-system-string-system-string())\"\r\n    click ReplaceMissingValues \"https://docs.microsoft.com/dotnet/api/microsoft.ml.extensionscatalog.replacemissingvalues?view=ml-dotnet#microsoft-ml-extensionscatalog-replacemissingvalues(microsoft-ml-transformscatalog-microsoft-ml-inputoutputcolumnpair()-microsoft-ml-transforms-missingvaluereplacingestimator-replacementmode-system-boolean)\"\r\n    click Sdca \"https://docs.microsoft.com/dotnet/api/microsoft.ml.trainers.sdcaregressiontrainer?view=ml-dotnet\"\r\n  end\r\n  subgraph InputColumns\r\n    InputSchema[\"Col1, Col2, Label\"]\r\n  end\r\n  InputColumns-->Pipeline\r\n  Pipeline-->OutputColumns\r\n```\r\n\r\n## Proposed Implementation\r\n\r\n```mermaid\r\nflowchart LR;\r\n    EstimatorChain --> Mermaid\r\n    Mermaid --> Markdig\r\n    Markdig --> HTML\r\n    HTML --> CustomFormatter\r\n    HTML --> Image\r\n```\r\n\r\n1. Take an ML.NET `EstimatorChain` and dynamically generate Mermaid diagram.\r\n2. Process Mermaid diagram as Markdown using Markdig\r\n3. Convert Mermaid diagram to HTML\r\n4. Display HTML\r\n    1. If in interactive environment, register a custom formatter.\r\n    1. If in standard .NET application, save as image.","Url":"https://github.com/dotnet/machinelearning/issues/6326","RelatedDescription":"Open issue \"Create Pipeline Visualizer\" (#6326)"},{"Id":"1373413309","IsPullRequest":true,"CreatedAt":"2022-09-14T18:26:36","Actor":"LittleLittleCloud","Number":"6325","RawContent":null,"Title":"use macos 10-15 in .vsts-dotnet-ci","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nsee also #6315 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/6325","RelatedDescription":"Open PR \"use macos 10-15 in .vsts-dotnet-ci\" (#6325)"},{"Id":"1370979646","IsPullRequest":false,"CreatedAt":"2022-09-13T07:20:39","Actor":"crazyoutlook","Number":"6324","RawContent":null,"Title":"ML.Net incorrect results with ONNX model","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10/11\r\n- **.NET Version (eg., dotnet --info)**: Dot Net versions 2.1/5/6\r\n[ML.Net_Onnx.zip](https://github.com/dotnet/machinelearning/files/9554463/ML.Net_Onnx.zip)\r\n\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI created a object detection model in Azure Custom Vision then exported it as ONNX and tried consuming it with ML.Net. I am using following ML package versions : Microsoft.ML (1.4.0), Microsoft.ML.ImageAnalytics (1.4.0). Microsoft.ML.OnnxTransformer (1.4.0)\r\n\r\n- **What happened?**\r\nML.Net with ONNX model is giving me incorrect prediction results or no results or very poor confidence levels.\r\n\r\n- **What did you expect?**\r\nI am expecting correct results when working with ONNX model and ML.Net. To re-confirm the issue I consumed same ONNX model with Python code and it worked correct and prediction results were as expected. So there does not seem to be any issue with ONNX model file. The issue seems to be with ML.Net code in the way predictions are done\r\n\r\n### Source code / logs\r\nI am attaching ML.Net source code which I am using to consume ONNX model\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6324","RelatedDescription":"Open issue \"ML.Net incorrect results with ONNX model\" (#6324)"},{"Id":"1369442351","IsPullRequest":false,"CreatedAt":"2022-09-13T07:20:19","Actor":"andrasfuchs","Number":"6320","RawContent":null,"Title":"Add resource (CPU,RAM,GPU,thread count) monitoring to AutoML experiments","State":"closed","Body":"**Is your feature request related to a problem? Please describe.**\r\nAs others also experienced, AutoML training is heavy on CPU and RAM and it can cause slowdowns and crashes (#6175, #6286, #6288, #6297). I sometimes run into an issue where some of my trials run longer than expected, potentially because my systems ran out of one of my resources. I had a few system crashes as well, when running AutoML forced Windows to start closing other applications.\r\n\r\n**Describe the solution you'd like**\r\nIt would be great to have more information about the running AutoML trials, including how much CPU, RAM, GPU are using on how many threads. Ideally it would be included in a new, periodically called method on AutoML's [IMonitor interface](https://github.com/dotnet/machinelearning/blob/main/src/Microsoft.ML.AutoML/AutoMLExperiment/IMonitor.cs).\r\nIf this was combined with an extended experiment control ([#5736](https://github.com/dotnet/machinelearning/issues/5736#issuecomment-1243329798)), we could make clever decisions about a trial or experiment depending on its resource usage. We could pause the experiment if the system is out of resources, or even cancel a trial if it uses suspiciously high amount of RAM to prevent system failure, for example. (As it happens sometimes with my experiments.)\r\n\r\n**Describe alternatives you've considered**\r\nWell, theoretically I could monitor my system resources constantly on a separate thread, but I still couldn't determine if AutoML is the reason for an elevated CPU, RAM or GPU usage, or something else running on the system independently from AutoML.\r\n\r\n**Additional context**\r\nThis issue is related to AutoML experiment resource usage limiting (#6061) and AutoML experiment control (#5736).\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6320","RelatedDescription":"Closed issue \"Add resource (CPU,RAM,GPU,thread count) monitoring to AutoML experiments\" (#6320)"},{"Id":"1370015938","IsPullRequest":false,"CreatedAt":"2022-09-12T14:34:14","Actor":"luisquintanilla","Number":"6322","RawContent":null,"Title":"Machine Learning for .NET Developers Survey - 2022","State":"open","Body":"Every year we conduct a survey to gather feedback on pain points and feature requests that help shape the direction of Machine Learning in .NET.\r\n\r\nThis past year we have made major improvements to [ML.NET](https://dot.net/ml) tooling and APIs, and now we're investigating new areas to improve and grow, including documentation, data prep, notebooks, deep learning, MLOps, model explainability, and more.\r\n\r\nPlease take this ~10 minute survey to give your input on what you want to see next in ML.NET, and optionally leave your contact information at the end if you'd like to talk with the ML.NET team about your feedback.\r\n\r\n## [Take the Survey](https://www.surveymonkey.com/r/mlnet-gh-2022)","Url":"https://github.com/dotnet/machinelearning/issues/6322","RelatedDescription":"Open issue \"Machine Learning for .NET Developers Survey - 2022\" (#6322)"},{"Id":"1370014259","IsPullRequest":false,"CreatedAt":"2022-09-12T14:33:16","Actor":"AM-Site1","Number":"6321","RawContent":null,"Title":"Suspicious fragments found by PVS-Studio Static Analyzer","State":"open","Body":"Hey!\r\n\r\nI checked the ML.NET framework with the PVS-Studio static code analyzer. I described the suspicious code fragments detected by the analyzer in my article ''[ML.NET: can Microsoft's machine learning be trusted?](https://pvs-studio.com/en/blog/posts/csharp/0988/)''. I thought you might be interested to read it.","Url":"https://github.com/dotnet/machinelearning/issues/6321","RelatedDescription":"Open issue \"Suspicious fragments found by PVS-Studio Static Analyzer\" (#6321)"},{"Id":"1368522049","IsPullRequest":false,"CreatedAt":"2022-09-10T06:25:46","Actor":"deiruch","Number":"6319","RawContent":null,"Title":"Using LoadFromTextFile to load CSVs should work with ColumnName attributes","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nI have generated a ModelInput class using AutoML. It contains several columns, all annotated with `[ColumnName]`, like this:\r\n```\r\n        /// <summary>\r\n        /// model input class for MLModel1.\r\n        /// </summary>\r\n        #region model input class\r\n        public class ModelInput\r\n        {\r\n            [ColumnName(@\"columnA\")]\r\n            public string columnA { get; set; }\r\n\r\n            [ColumnName(@\"columnB\")]\r\n            public string columnB { get; set; }\r\n\r\n            [ColumnName(@\"columnC\")]\r\n            public float columnC { get; set; }\r\n            ...\r\n```\r\n\r\nThen I try to load CSV data for this model:\r\n```\r\nvar data = new MLContext().Data.LoadFromTextFile<MLModel1.ModelInput>(\"data.csv\", hasHeader: true, separatorChar: ',');\r\n```\r\n\r\nThis fails, because the fields in `ModelInput` do not contain a `LoadColumn` attribute.\r\n\r\n**Describe the solution you'd like**\r\nLoadFromTextFile should try to use the `ColumnName` attribute, if the `LoadColumn` attribute is not specified.\r\n\r\n**Describe alternatives you've considered**\r\nAutoML could generate `LoadColumn` attributes.","Url":"https://github.com/dotnet/machinelearning/issues/6319","RelatedDescription":"Open issue \"Using LoadFromTextFile to load CSVs should work with ColumnName attributes\" (#6319)"},{"Id":"1368174754","IsPullRequest":true,"CreatedAt":"2022-09-10T00:47:49","Actor":"LittleLittleCloud","Number":"6318","RawContent":null,"Title":"remove microsoft.ml.core dependency from microsoft.ml.searchspace","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n\r\nAnd use `Contract.Assert` to replace `Contracts.Check`\r\n\r\nAnd remove `StringEnumConverter` on top of enum type.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6318","RelatedDescription":"Closed or merged PR \"remove microsoft.ml.core dependency from microsoft.ml.searchspace\" (#6318)"},{"Id":"1367987349","IsPullRequest":false,"CreatedAt":"2022-09-09T15:24:02","Actor":"jonathanpeppers","Number":"6317","RawContent":null,"Title":"TextFeaturizingEstimator.Options KeepNumbers and KeepPunctuations not exportable to ONNX?","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - .NET Version: .NET 6\r\n\r\n```xml\r\n<PackageReference Update=\"Microsoft.ML\" Version=\"2.0.0-preview.22410.1\" />\r\n<PackageReference Update=\"Microsoft.ML.OnnxConverter\" Version=\"0.20.0-preview.22410.1\" />\r\n```\r\n\r\n**Describe the bug**\r\n\r\nAs seen here: https://github.com/jonathanpeppers/inclusive-code-reviews-ml/pull/29#discussion_r944879120\r\n\r\nA pipeline such as:\r\n\r\n```csharp\r\n            var dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"isnegative\", \"isnegative\")\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"text_tf\", new TextFeaturizingEstimator.Options\r\n                                      {\r\n                                          //NOTE: not exportable to ONNX\r\n                                          KeepNumbers = false,\r\n                                          KeepPunctuations = false,\r\n                                          // NOTE: these work\r\n                                          KeepDiacritics = true,\r\n                                          CaseMode = TextNormalizingEstimator.CaseMode.Lower,\r\n                                      }, \"text\"))\r\n```\r\n\r\nHits an exception such as:\r\n\r\n```\r\nUnhandled exception. System.Collections.Generic.KeyNotFoundException: The given key 'text_TextNormalizer' was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.ML.Model.OnnxConverter.OnnxContextImpl.GetVariableName(String colName)\r\n   at Microsoft.ML.Transforms.Text.WordTokenizingTransformer.Mapper.SaveAsOnnx(OnnxContext ctx)\r\n   at Microsoft.ML.Data.RowToRowMapperTransform.Microsoft.ML.Model.OnnxConverter.ISaveAsOnnx.SaveAsOnnx(OnnxContext ctx)\r\n   at Microsoft.ML.Model.OnnxConverter.SaveOnnxCommand.ConvertTransformListToOnnxModel(OnnxContextImpl ctx, IChannel ch, IDataView inputData, IDataView outputData, LinkedList`1 transforms, HashSet`1 inputColumnNamesToDrop, HashSet`1 outputColumnNamesToDrop)\r\n   at Microsoft.ML.OnnxExportExtensions.ConvertToOnnxProtobufCore(IHostEnvironment env, OnnxContextImpl ctx, ITransformer transform, IDataView inputData, String[] outputColumnNamesToKeep)\r\n   at Microsoft.ML.OnnxExportExtensions.ConvertToOnnxProtobuf(ModelOperationsCatalog catalog, ITransformer transfor   at Microsoft.ML.OnnxExportExtensions.ConvertToOnnx(ModelOperationsCatalog catalog, ITransformer transform, IDataView inputData, Stream stream)\r\n   at InclusiveCodeReviews.ConsoleApp.ModelBuilder.SaveModel(MLContext mlContext, IDataView dataView, ITransformer \r\nmlModel, String modelRelativePath, DataViewSchema modelInputSchema) in C:\\src\\inclusive-code-reviews-ml\\ml.net\\InclusiveCodeReviews.ConsoleApp\\ModelBuilder.cs:line 102\r\n   at InclusiveCodeReviews.ConsoleApp.ModelBuilder.CreateModel() in C:\\src\\inclusive-code-reviews-ml\\ml.net\\InclusiveCodeReviews.ConsoleApp\\ModelBuilder.cs:line 49\r\n   at Program.<Main>$(String[] args) in C:\\src\\inclusive-code-reviews-ml\\ml.net\\InclusiveCodeReviews.Convert\\Program.cs:line 4\r\n```\r\n\r\n**To Reproduce**\r\n\r\nSteps to reproduce the behavior:\r\n1. Run this project:\r\n\r\nhttps://github.com/jonathanpeppers/inclusive-code-reviews-ml/tree/main/ml.net/InclusiveCodeReviews.Convert\r\n\r\n2. Uncomment these two lines:\r\n\r\nhttps://github.com/jonathanpeppers/inclusive-code-reviews-ml/blob/486f7737174702233825ceddf28adb5cc7912f43/ml.net/InclusiveCodeReviews.ConsoleApp/ModelBuilder.cs#L59-L61\r\n\r\n**Expected behavior**\r\n\r\nIn particular, we want to use `KeepPunctuations=false` and export to ONNX.\r\n\r\n**Screenshots, Code, Sample Projects**\r\n\r\nSee above.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6317","RelatedDescription":"Open issue \"TextFeaturizingEstimator.Options KeepNumbers and KeepPunctuations not exportable to ONNX?\" (#6317)"},{"Id":"1367057807","IsPullRequest":true,"CreatedAt":"2022-09-08T22:32:50","Actor":"LittleLittleCloud","Number":"6316","RawContent":null,"Title":"wip - add diskConvert option in fast tree search space","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n#6297 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/6316","RelatedDescription":"Open PR \"wip - add diskConvert option in fast tree search space\" (#6316)"},{"Id":"1352726298","IsPullRequest":true,"CreatedAt":"2022-09-08T06:56:49","Actor":"LittleLittleCloud","Number":"6305","RawContent":null,"Title":"Add SetMaximumMemoryUsageInMegaByte in AutoMLExperiment","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\nThis PR adds `SetMaximumMemoryUsageInMegaByte`, which sets limit to the maximum memory a trial can use, and cancel that running trial if it exceeds the maximum memory limitation.\r\n\r\n#6293 \r\n### Example\r\n```csharp\r\n// set maximum memory usage to 8gb\r\nexperiment.SetMaximumMemoryUsageInMegaByte(8 * 1024);\r\n```\r\n\r\n### How it work\r\n`AutoMLExperiment` monitors the memory and cpu usage periodically (the default period is 2 seconds) using `IPerformanceMonitor`, and once the trial exceed the boundary, `AutoMLExperiment` cancel that trial via `MLContext.CancelExecution` and does clean up.\r\n\r\n### Known limitation\r\nThis requires estimator support cancel during training by checking if context is still alive from time to time, which is not true for all estimators in ML.Net. \r\nFor example, `LGBM` can't  check if context is alive in unmanaged code part, which makes it can't be cancelled during the time when it's calling into native LightGbm dll. In that situation, tiral memory usage might still exceed maximum limit.","Url":"https://github.com/dotnet/machinelearning/pull/6305","RelatedDescription":"Closed or merged PR \"Add SetMaximumMemoryUsageInMegaByte in AutoMLExperiment\" (#6305)"},{"Id":"1360499896","IsPullRequest":false,"CreatedAt":"2022-09-07T17:41:02","Actor":"LittleLittleCloud","Number":"6314","RawContent":null,"Title":"Update MacOS vm in building pipeline?","State":"closed","Body":"We are using macos_10_15 in building pipeline, which is starting deprecated. We should consider upgrade it to macOS_12\r\n\r\nmore info: https://github.com/actions/runner-images/issues/5583\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6314","RelatedDescription":"Closed issue \"Update MacOS vm in building pipeline?\" (#6314)"},{"Id":"1360546639","IsPullRequest":true,"CreatedAt":"2022-09-07T17:41:01","Actor":"LittleLittleCloud","Number":"6315","RawContent":null,"Title":"Use MacOS-12","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n#6314 ","Url":"https://github.com/dotnet/machinelearning/pull/6315","RelatedDescription":"Closed or merged PR \"Use MacOS-12\" (#6315)"},{"Id":"1355457789","IsPullRequest":false,"CreatedAt":"2022-09-07T16:35:31","Actor":"aswin-integration","Number":"6310","RawContent":null,"Title":"High vulnerability alert in Newtonsoft.Json v10.0.3","State":"closed","Body":"**System Information :**\r\n - Windows 10\r\n - ML.NET v1.7.1\r\n - .NET 5.0\r\n\r\n**Describe the bug**\r\nThe Microsoft.ML v1.7.1 library currently uses Newtonsoft.Json **v10.0.3** which have a ['high' level vulnerability reported](https://github.com/advisories/GHSA-5crp-9r3c-p9vr) . The vulnerability fix is available in Newtonsoft.Json **v13.0.1** (https://www.nuget.org/packages/Newtonsoft.Json/13.0.1). Is there going to be a official release fixing the dependency of Newtonsoft to the latest ? \r\n\r\n**Screenshots, Code, Sample Projects**\r\nhttps://github.com/advisories/GHSA-5crp-9r3c-p9vr\r\nhttps://www.nuget.org/packages/Microsoft.ML/1.7.1#dependencies-body-tab\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6310","RelatedDescription":"Closed issue \"High vulnerability alert in Newtonsoft.Json v10.0.3\" (#6310)"},{"Id":"1353205324","IsPullRequest":false,"CreatedAt":"2022-09-02T18:38:47","Actor":"wil70","Number":"6309","RawContent":null,"Title":"[ML.Net c#, CLI, VS Builder] 1KB csv input file. Not sure what to do + NoColumn how-to","State":"closed","Body":"I'm have simple data set with 2 fields: c10 and c11. c10 is a float, c11 is a string. First row is the header.\r\n\t\tc10,c11\r\n\t\t-1,a-1\r\n\t\t1,a+1\r\n\t\t-1,a-1\r\n\t\t1,a+1\r\n\t\t0,a+0\r\n\t\t1,a+1\r\n\t\t1,a+1\r\n\t\t-1,a-1\r\n\t\t1,a+1\r\n\t\t1,a+1\r\n\t\t-1,a-1\r\n\t\t-1,a-1\r\n\t\t-1,a-1\r\n\t\t1,a+1\r\n\t\t-1,a-1\r\n\t\t-1,a-1\r\n\t\t-1,a-1\r\n\t\t0,a+0\r\n\t\t1,a+1\r\n\t\t1,a+1\r\n\t\t1,a+1\r\n\t\t1,a+1\r\n\t\t-1,a-1\r\n\t\t-1,a-1\r\n\r\nAs you can see this is very easy to solve visually:\r\n  ```\r\n  if -1 is presented the answer is a-1\r\n  if +1 is presented the answer is a+1\r\n  if 0 is presented the answer is a+0\r\n\r\n```\r\nIf I run AutoML with the VS builder UI, it crash at the end with this\r\n\r\n\t   at System.Version.VersionResult.SetFailure(ParseFailureKind failure, String argument)\r\n\t   at System.Version.TryParseVersion(String version, VersionResult& result)\r\n\t   at System.Version.Parse(String input)\r\n\t   at System.Version..ctor(String version)\r\n\t   at Microsoft.ML.ModelBuilder.Utils.Utilities.InstalledVersionNeedsUpdate(String installedString, String requestedString)\r\n\t   at Microsoft.ML.ModelBuilder.Utils.Utilities.<InstallNugetPackageAsync>d__17.MoveNext()\r\n\t--- End of stack trace from previous location where exception was thrown ---\r\n\t   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\t   at Microsoft.ML.ModelBuilder.ViewModels.TrainViewModel.<UpdateNugetDependenciesAsync>d__105.MoveNext()\r\n\t--- End of stack trace from previous location where exception was thrown ---\r\n\t   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\t   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n\t   at Microsoft.ML.ModelBuilder.ViewModels.TrainViewModel.<GenerateCodeBehindFilesAsync>d__104.MoveNext()\r\n   \r\nHere is the log\r\n\r\n\t\t\tSet log file path to C:\\Users\\Wilhelm\\AppData\\Local\\Temp\\MLVSTools\\logs\\MLModel1-JSSGYE.txt\r\n\t\t\tstart nni training\r\n\t\t\tExperiment output folder: C:\\Users\\Wilhelm\\AppData\\Local\\Temp\\AutoML-NNI\\Experiment-4BLNIV\r\n\t\t\t|     Trainer                              MicroAccuracy  MacroAccuracy  Duration #Iteration                     |\r\n\t\t\t|0    SdcaMaximumEntropyMulti                     0.8250         0.8167       1.7          0                     |\r\n\t\t\t|1    SdcaLogisticRegressionOva                   0.8250         0.8167       3.5          1                     |\r\n\t\t\t|2    FastTreeOva                                 0.3967         0.3333       0.9          2                     |\r\n\t\t\t|3    LightGbmMulti                               0.0783         0.1333       0.2          3                     |\r\n\t\t\t|4    FastForestOva                               0.1783         0.2333       0.9          4                     |\r\n\t\t\t|5    SdcaLogisticRegressionOva                   0.8250         0.8167       3.4          5                     |\r\n\t\t\t|6    SdcaMaximumEntropyMulti                     0.8250         0.8167       0.9          6                     |\r\n\t\t\t|7    LbfgsMaximumEntropyMulti                    0.8250         0.8167       0.2          7                     |\r\n\t\t\t|8    LbfgsLogisticRegressionOva                  0.8250         0.8167       0.2          8                     |\r\n\t\t\t|9    FastTreeOva                                 0.8550         0.8167       0.9          9                     |\r\n\t\t\t|10   LightGbmMulti                               0.0783         0.1333       0.1         10                     |\r\n\t\t\t|11   SdcaLogisticRegressionOva                   0.8250         0.8167       3.5         11                     |\r\n\t\t\t|12   FastForestOva                               0.1783         0.2333       1.1         12                     |\r\n\t\t\t|13   SdcaMaximumEntropyMulti                     0.8250         0.8167       0.9         13                     |\r\n\t\t\t|14   LbfgsMaximumEntropyMulti                    0.8250         0.8167       0.1         14                     |\r\n\t\t\t|15   LightGbmMulti                               0.0783         0.1333       0.1         15                     |\r\n\t\t\t|16   FastTreeOva                                 0.3967         0.3333       1.2         16                     |\r\n\t\t\t|17   LbfgsLogisticRegressionOva                  0.6450         0.6667       0.2         17                     |\r\n\t\t\t|18   SdcaMaximumEntropyMulti                     0.3967         0.3333       0.9         18                     |\r\n\t\t\t|19   SdcaLogisticRegressionOva                   0.8250         0.8167       3.6         19                     |\r\n\t\t\t|20   FastForestOva                               0.1783         0.2333       1.2         20                     |\r\n\t\t\t|21   LbfgsMaximumEntropyMulti                    0.0783         0.1333       0.1         21                     |\r\n\t\t\t|22   FastTreeOva                                 0.9000         0.9000       1.3         22                     |\r\n\t\t\t|23   LightGbmMulti                               0.0783         0.1333       0.1         23                     |\r\n\t\t\t|24   SdcaMaximumEntropyMulti                     0.8250         0.8167       0.9         24                     |\r\n\t\t\t|25   LbfgsLogisticRegressionOva                  0.8250         0.8167       0.2         25                     |\r\n\t\t\t|26   FastForestOva                               0.1783         0.2333       1.5         26                     |\r\n\t\t\t|27   SdcaLogisticRegressionOva                   0.8250         0.8167       3.6         27                     |\r\n\t\t\t|28   FastTreeOva                                 0.9000         0.9000       1.8         28                     |\r\n\t\t\t|29   LbfgsMaximumEntropyMulti                    0.8250         0.8167       0.1         29                     |\r\n\t\t\t|30   LbfgsLogisticRegressionOva                  0.8250         0.8167       0.2         30                     |\r\n\t\t\t|31   SdcaMaximumEntropyMulti                     0.8250         0.8167       0.9         31                     |\r\n\t\t\t|32   LightGbmMulti                               0.0783         0.1333       0.1         32                     |\r\n\t\t\t|34   LightGbmMulti                               0.0783         0.1333       0.1         34                     |\r\n\t\t\t|35   SdcaLogisticRegressionOva                   0.8250         0.8167       3.7         35                     |\r\n\t\t\t|36   FastTreeOva                                 0.3967         0.3333       1.7         36                     |\r\n\t\t\t|37   SdcaMaximumEntropyMulti                     0.8250         0.8167       0.9         37                     |\r\n\t\t\t|38   LightGbmMulti                               0.0783         0.1333       0.1         38                     |\r\n\t\t\t|39   LbfgsMaximumEntropyMulti                    0.8250         0.8167       0.1         39                     |\r\n\t\t\t|40   LbfgsLogisticRegressionOva                  0.2283         0.2833       0.2         40                     |\r\n\t\t\t|41   FastForestOva                               0.1783         0.2333       1.9         41                     |\r\n\t\t\t|42   FastForestOva                               0.1783         0.2333       1.8         42                     |\r\n\t\t\t|43   SdcaLogisticRegressionOva                   0.3967         0.3333       3.7         43                     |\r\n\t\t\t|44   FastTreeOva                                 0.3967         0.3333       2.0         44                     |\r\n\t\t\t|45   LbfgsLogisticRegressionOva                  0.8250         0.8167       0.2         45                     |\r\n\t\t\t|46   LbfgsMaximumEntropyMulti                    0.8500         0.8500       0.1         46                     |\r\n\t\t\t|47   SdcaMaximumEntropyMulti                     0.8250         0.8167       1.0         47                     |\r\n\t\t\t|48   LightGbmMulti                               0.0783         0.1333       0.1         48                     |\r\n\t\t\t|49   FastForestOva                               0.1783         0.2333       2.1         49                     |\r\n\r\n\t\t\t===============================================Experiment Results=================================================\r\n\t\t\t------------------------------------------------------------------------------------------------------------------\r\n\t\t\t|                                                     Summary                                                    |\r\n\t\t\t------------------------------------------------------------------------------------------------------------------\r\n\t\t\t|ML Task: Classification                                                                                         |\r\n\t\t\t|Dataset: S:\\CATS\\files\\data_analysis\\output\\AggregatedFile\\small_2.csv                                          |\r\n\t\t\t|Label : c11                                                                                                     |\r\n\t\t\t|Total experiment time : 56.28 Secs                                                                              |\r\n\t\t\t|Total number of models explored: 49                                                                             |\r\n\t\t\t------------------------------------------------------------------------------------------------------------------\r\n\r\n\t\t\t|                                              Top 5 models explored                                             |\r\n\t\t\t------------------------------------------------------------------------------------------------------------------\r\n\t\t\t|     Trainer                              MicroAccuracy  MacroAccuracy  Duration #Iteration                     |\r\n\t\t\t|28   FastTreeOva                                 0.9000         0.9000       1.8         28                     |\r\n\t\t\t|22   FastTreeOva                                 0.9000         0.9000       1.3         22                     |\r\n\t\t\t|9    FastTreeOva                                 0.8550         0.8167       0.9          9                     |\r\n\t\t\t|45   LbfgsMaximumEntropyMulti                    0.8500         0.8500       0.1         45                     |\r\n\t\t\t|46   SdcaMaximumEntropyMulti                     0.8250         0.8167       1.0         46                     |\r\n\t\t\t------------------------------------------------------------------------------------------------------------------\r\n\r\n\t\t\tGenerate code behind files\r\n\r\n\r\n\t\t\tCopying generated code to project...\r\n\t\t\tCopying MLModel1.consumption.cs to folder: G:\\Users\\Wilhelm\\dev\\MachineLearning\\ML1\r\n\t\t\tCopying MLModel1.training.cs to folder: G:\\Users\\Wilhelm\\dev\\MachineLearning\\ML1\r\n\t\t\tCOMPLETED\r\n\r\n\r\n\t\t\tUpdating nuget dependencies...\r\n\t\t\tStarting update NuGet dependencies async.\r\n\t\t\tInstalling nuget package, package ID: Microsoft.ML, package Version: 1.7.1\r\n\r\nI extended the time to train\r\n\r\nCrash:\r\n\r\n\t   at System.Version.VersionResult.SetFailure(ParseFailureKind failure, String argument)\r\n\t   at System.Version.TryParseVersion(String version, VersionResult& result)\r\n\t   at System.Version.Parse(String input)\r\n\t   at System.Version..ctor(String version)\r\n\t   at Microsoft.ML.ModelBuilder.Utils.Utilities.InstalledVersionNeedsUpdate(String installedString, String requestedString)\r\n\t   at Microsoft.ML.ModelBuilder.Utils.Utilities.<InstallNugetPackageAsync>d__17.MoveNext()\r\n\t--- End of stack trace from previous location where exception was thrown ---\r\n\t   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\t   at Microsoft.ML.ModelBuilder.ViewModels.TrainViewModel.<UpdateNugetDependenciesAsync>d__105.MoveNext()\r\n\t--- End of stack trace from previous location where exception was thrown ---\r\n\t   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\t   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n\t   at Microsoft.ML.ModelBuilder.ViewModels.TrainViewModel.<GenerateCodeBehindFilesAsync>d__104.MoveNext()\r\n\t   \r\nLog:\r\n\r\n\t\t\t\r\n\t\tGenerate code behind files\r\n\r\n\r\n\t\tCopying generated code to project...\r\n\t\tCopying MLModel1.consumption.cs to folder: G:\\Users\\Wilhelm\\dev\\MachineLearning\\ML1\r\n\t\tCopying MLModel1.training.cs to folder: G:\\Users\\Wilhelm\\dev\\MachineLearning\\ML1\r\n\t\tCOMPLETED\r\n\r\n\r\n\t\tUpdating nuget dependencies...\r\n\t\tStarting update NuGet dependencies async.\r\n\t\tInstalling nuget package, package ID: Microsoft.ML, package Version: 1.7.1\r\n\t\tstart nni training\r\n\t\tExperiment output folder: C:\\Users\\Wilhelm\\AppData\\Local\\Temp\\AutoML-NNI\\Experiment-O11PPN\r\n\t\t|     Trainer                              MicroAccuracy  MacroAccuracy  Duration #Iteration                     |\r\n\t\t|0    SdcaMaximumEntropyMulti                     0.8000         0.8000       1.6          0                     |\r\n\t\t|1    LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.2          1                     |\r\n\t\t|2    FastForestOva                               0.4067         0.4500       0.9          2                     |\r\n\t\t|3    SdcaMaximumEntropyMulti                     0.8000         0.8000       0.9          3                     |\r\n\t\t|4    SdcaLogisticRegressionOva                   0.8000         0.8000       3.4          4                     |\r\n\t\t|5    FastTreeOva                                 0.3400         0.3500       0.8          5                     |\r\n\t\t|6    LbfgsLogisticRegressionOva                  0.8000         0.8000       0.1          6                     |\r\n\t\t|7    LightGbmMulti                               0.3067         0.3500       0.2          7                     |\r\n\t\t|8    FastForestOva                               0.4067         0.4500       0.9          8                     |\r\n\t\t|9    SdcaMaximumEntropyMulti                     0.3400         0.3500       0.9          9                     |\r\n\t\t|10   LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1         10                     |\r\n\t\t|11   LightGbmMulti                               0.3067         0.3500       0.1         11                     |\r\n\t\t|12   FastTreeOva                                 0.3400         0.3500       1.0         12                     |\r\n\t\t|13   SdcaLogisticRegressionOva                   0.8000         0.8000       3.4         13                     |\r\n\t\t|14   FastForestOva                               0.4067         0.4500       1.0         14                     |\r\n\t\t|15   LbfgsLogisticRegressionOva                  0.8000         0.8000       0.1         15                     |\r\n\t\t|16   FastTreeOva                                 0.3400         0.3500       1.1         16                     |\r\n\t\t|17   LightGbmMulti                               0.3067         0.3500       0.1         17                     |\r\n\t\t|18   SdcaMaximumEntropyMulti                     0.8000         0.8000       0.9         18                     |\r\n\t\t|19   LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1         19                     |\r\n\t\t|20   FastForestOva                               0.4067         0.4500       1.2         20                     |\r\n\t\t|21   SdcaLogisticRegressionOva                   0.3400         0.3500       3.5         21                     |\r\n\t\t|22   FastTreeOva                                 0.3400         0.3500       1.2         22                     |\r\n\t\t|23   LbfgsLogisticRegressionOva                  0.8000         0.8000       0.2         23                     |\r\n\t\t|24   SdcaMaximumEntropyMulti                     0.8000         0.8000       0.9         24                     |\r\n\t\t|25   LightGbmMulti                               0.3067         0.3500       0.1         25                     |\r\n\t\t|26   SdcaMaximumEntropyMulti                     0.8000         0.8000       0.9         26                     |\r\n\t\t|27   FastForestOva                               0.4067         0.4500       1.4         27                     |\r\n\t\t|28   LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1         28                     |\r\n\t\t|29   SdcaLogisticRegressionOva                   0.8000         0.8000       3.5         29                     |\r\n\t\t|30   SdcaMaximumEntropyMulti                     0.3400         0.3500       1.0         30                     |\r\n\t\t|31   LbfgsLogisticRegressionOva                  0.3067         0.3500       0.2         31                     |\r\n\t\t|32   FastTreeOva                                 0.3400         0.3500       1.5         32                     |\r\n\t\t|33   LightGbmMulti                               0.3067         0.3500       0.1         33                     |\r\n\t\t|34   SdcaLogisticRegressionOva                   0.3400         0.3500       3.5         34                     |\r\n\t\t|35   LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1         35                     |\r\n\t\t|36   FastForestOva                               0.4067         0.4500       1.7         36                     |\r\n\t\t|37   LbfgsLogisticRegressionOva                  0.8000         0.8000       0.2         37                     |\r\n\t\t|38   SdcaMaximumEntropyMulti                     0.8000         0.8000       0.9         38                     |\r\n\t\t|39   LightGbmMulti                               0.3067         0.3500       0.1         39                     |\r\n\t\t|40   FastTreeOva                                 0.3400         0.3500       1.7         40                     |\r\n\t\t|41   FastForestOva                               0.4067         0.4500       1.9         41                     |\r\n\t\t|42   LbfgsMaximumEntropyMulti                    0.3067         0.3500       0.1         42                     |\r\n\t\t|43   SdcaLogisticRegressionOva                   0.3400         0.3500       3.6         43                     |\r\n\t\t|44   LbfgsLogisticRegressionOva                  0.3067         0.3500       0.2         44                     |\r\n\t\t|45   SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0         45                     |\r\n\t\t|46   FastTreeOva                                 0.3400         0.3500       1.9         46                     |\r\n\t\t|47   LightGbmMulti                               0.3067         0.3500       0.1         47                     |\r\n\t\t|48   FastForestOva                               0.4067         0.4500       2.0         48                     |\r\n\t\t|49   LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1         49                     |\r\n\t\t|50   SdcaMaximumEntropyMulti                     0.3400         0.3500       1.0         50                     |\r\n\t\t|51   LbfgsLogisticRegressionOva                  0.8000         0.8000       0.2         51                     |\r\n\t\t|52   SdcaLogisticRegressionOva                   0.8000         0.8000       3.7         52                     |\r\n\t\t|53   FastTreeOva                                 0.3400         0.3500       2.1         53                     |\r\n\t\t|54   SdcaMaximumEntropyMulti                     0.8000         0.8000       0.9         54                     |\r\n\t\t|55   LightGbmMulti                               0.3067         0.3500       0.1         55                     |\r\n\t\t|57   SdcaLogisticRegressionOva                   0.8000         0.8000       3.7         57                     |\r\n\t\t|58   LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1         58                     |\r\n\t\t|59   SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0         59                     |\r\n\t\t|60   LbfgsLogisticRegressionOva                  0.3067         0.3500       0.2         60                     |\r\n\t\t|61   FastTreeOva                                 0.3400         0.3500       2.4         61                     |\r\n\t\t|62   SdcaLogisticRegressionOva                   0.8000         0.8000       3.6         62                     |\r\n\t\t|63   LightGbmMulti                               0.3067         0.3500       0.1         63                     |\r\n\t\t|64   SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0         64                     |\r\n\t\t|66   LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1         66                     |\r\n\t\t|67   LbfgsLogisticRegressionOva                  0.8000         0.8000       0.2         67                     |\r\n\t\t|68   FastTreeOva                                 0.3400         0.3500       2.5         68                     |\r\n\t\t|69   LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1         69                     |\r\n\t\t|70   SdcaLogisticRegressionOva                   0.8000         0.8000       3.7         70                     |\r\n\t\t|71   LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1         71                     |\r\n\t\t|72   FastForestOva                               0.4067         0.4500       2.6         72                     |\r\n\t\t|73   SdcaMaximumEntropyMulti                     0.3400         0.3500       1.0         73                     |\r\n\t\t|74   LightGbmMulti                               0.3067         0.3500       0.1         74                     |\r\n\t\t|75   FastTreeOva                                 0.3400         0.3500       2.6         75                     |\r\n\t\t|76   LbfgsLogisticRegressionOva                  0.3067         0.3500       0.2         76                     |\r\n\t\t|77   FastForestOva                               0.4067         0.4500       2.7         77                     |\r\n\t\t|78   SdcaLogisticRegressionOva                   0.3400         0.3500       3.6         78                     |\r\n\t\t|79   LightGbmMulti                               0.3067         0.3500       0.1         79                     |\r\n\t\t|80   SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0         80                     |\r\n\t\t|81   LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1         81                     |\r\n\t\t|82   FastForestOva                               0.4067         0.4500       2.8         82                     |\r\n\t\t|83   LbfgsLogisticRegressionOva                  0.8000         0.8000       0.2         83                     |\r\n\t\t|84   SdcaLogisticRegressionOva                   0.8000         0.8000       3.6         84                     |\r\n\t\t|85   FastTreeOva                                 0.3400         0.3500       2.9         85                     |\r\n\t\t|86   LightGbmMulti                               0.3067         0.3500       0.1         86                     |\r\n\t\t|87   FastForestOva                               0.4067         0.4500       3.0         87                     |\r\n\t\t|88   LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3         88                     |\r\n\t\t|89   SdcaMaximumEntropyMulti                     0.8000         0.8000       0.9         89                     |\r\n\t\t|90   LbfgsMaximumEntropyMulti                    0.3067         0.3500       0.1         90                     |\r\n\t\t|91   FastForestOva                               0.4067         0.4500       3.1         91                     |\r\n\t\t|92   FastTreeOva                                 0.3400         0.3500       3.1         92                     |\r\n\t\t|93   SdcaLogisticRegressionOva                   0.3400         0.3500       3.7         93                     |\r\n\t\t|94   LbfgsLogisticRegressionOva                  0.3067         0.3500       0.2         94                     |\r\n\t\t|95   LightGbmMulti                               0.3067         0.3500       0.1         95                     |\r\n\t\t|96   LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1         96                     |\r\n\t\t|97   SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0         97                     |\r\n\t\t|98   FastForestOva                               0.4067         0.4500       3.5         98                     |\r\n\t\t|99   SdcaLogisticRegressionOva                   0.8000         0.8000       3.7         99                     |\r\n\t\t|100  FastTreeOva                                 0.3400         0.3500       3.3        100                     |\r\n\t\t|101  LightGbmMulti                               0.3067         0.3500       0.1        101                     |\r\n\t\t|102  SdcaLogisticRegressionOva                   0.8000         0.8000       3.7        102                     |\r\n\t\t|103  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.2        103                     |\r\n\t\t|104  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3        104                     |\r\n\t\t|105  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1        105                     |\r\n\t\t|106  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0        106                     |\r\n\t\t|107  FastForestOva                               0.4067         0.4500       3.5        107                     |\r\n\t\t|108  FastTreeOva                                 0.3400         0.3500       3.5        108                     |\r\n\t\t|109  SdcaLogisticRegressionOva                   0.8000         0.8000       3.8        109                     |\r\n\t\t|110  LightGbmMulti                               0.3067         0.3500       0.1        110                     |\r\n\t\t|111  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1        111                     |\r\n\t\t|112  FastForestOva                               0.4067         0.4500       3.6        112                     |\r\n\t\t|113  FastTreeOva                                 0.3400         0.3500       3.6        113                     |\r\n\t\t|114  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.2        114                     |\r\n\t\t|115  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0        115                     |\r\n\t\t|116  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1        116                     |\r\n\t\t|117  LightGbmMulti                               0.3067         0.3500       0.1        117                     |\r\n\t\t|118  SdcaLogisticRegressionOva                   0.3400         0.3500       3.8        118                     |\r\n\t\t|119  FastForestOva                               0.4067         0.4500       3.7        119                     |\r\n\t\t|120  FastTreeOva                                 0.3400         0.3500       4.2        120                     |\r\n\t\t|121  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3        121                     |\r\n\t\t|122  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1        122                     |\r\n\t\t|123  LightGbmMulti                               0.3067         0.3500       0.1        123                     |\r\n\t\t|124  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0        124                     |\r\n\t\t|125  SdcaLogisticRegressionOva                   0.8000         0.8000       3.8        125                     |\r\n\t\t|126  FastForestOva                               0.4067         0.4500       3.8        126                     |\r\n\t\t|127  LightGbmMulti                               0.3067         0.3500       0.1        127                     |\r\n\t\t|128  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3        128                     |\r\n\t\t|129  FastTreeOva                                 0.3400         0.3500       4.0        129                     |\r\n\t\t|130  SdcaLogisticRegressionOva                   0.8000         0.8000       3.7        130                     |\r\n\t\t|131  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1        131                     |\r\n\t\t|132  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0        132                     |\r\n\t\t|133  LightGbmMulti                               0.3067         0.3500       0.2        133                     |\r\n\t\t|134  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3        134                     |\r\n\t\t|135  FastForestOva                               0.4067         0.4500       4.6        135                     |\r\n\t\t|136  SdcaLogisticRegressionOva                   0.8000         0.8000       3.8        136                     |\r\n\t\t|137  FastTreeOva                                 0.3400         0.3500       4.5        137                     |\r\n\t\t|138  LightGbmMulti                               0.3067         0.3500       0.1        138                     |\r\n\t\t|139  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3        139                     |\r\n\t\t|140  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0        140                     |\r\n\t\t|141  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1        141                     |\r\n\t\t|142  FastForestOva                               0.4067         0.4500       4.5        142                     |\r\n\t\t|143  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3        143                     |\r\n\t\t|144  SdcaLogisticRegressionOva                   0.8000         0.8000       3.9        144                     |\r\n\t\t|145  FastTreeOva                                 0.3400         0.3500       4.2        145                     |\r\n\t\t|146  LightGbmMulti                               0.3067         0.3500       0.1        146                     |\r\n\t\t|147  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1        147                     |\r\n\t\t|148  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0        148                     |\r\n\t\t|149  FastForestOva                               0.4067         0.4500       4.3        149                     |\r\n\t\t|150  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3        150                     |\r\n\t\t|151  LightGbmMulti                               0.3067         0.3500       0.1        151                     |\r\n\t\t|152  SdcaLogisticRegressionOva                   0.8000         0.8000       3.8        152                     |\r\n\t\t|153  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.1        153                     |\r\n\t\t|154  FastTreeOva                                 0.3400         0.3500       4.6        154                     |\r\n\t\t|155  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1        155                     |\r\n\t\t|156  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3        156                     |\r\n\t\t|157  SdcaLogisticRegressionOva                   0.8000         0.8000       3.8        157                     |\r\n\t\t|158  FastForestOva                               0.4067         0.4500       5.1        158                     |\r\n\t\t|159  LightGbmMulti                               0.3067         0.3500       0.1        159                     |\r\n\t\t|160  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0        160                     |\r\n\t\t|161  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1        161                     |\r\n\t\t|162  FastTreeOva                                 0.3400         0.3500       5.0        162                     |\r\n\t\t|163  SdcaLogisticRegressionOva                   0.8000         0.8000       3.9        163                     |\r\n\t\t|164  LightGbmMulti                               0.3067         0.3500       0.2        164                     |\r\n\t\t|166  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3        166                     |\r\n\t\t|167  LightGbmMulti                               0.3067         0.3500       0.1        167                     |\r\n\t\t|168  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.2        168                     |\r\n\t\t|169  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0        169                     |\r\n\t\t|170  SdcaLogisticRegressionOva                   0.8000         0.8000       3.9        170                     |\r\n\t\t|171  FastForestOva                               0.4067         0.4500       4.7        171                     |\r\n\t\t|172  FastTreeOva                                 0.3400         0.3500       5.1        172                     |\r\n\t\t|173  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3        173                     |\r\n\t\t|174  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1        174                     |\r\n\t\t|175  LightGbmMulti                               0.3067         0.3500       0.2        175                     |\r\n\t\t|177  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0        177                     |\r\n\t\t|178  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3        178                     |\r\n\t\t|179  SdcaLogisticRegressionOva                   0.8000         0.8000       3.9        179                     |\r\n\t\t|180  FastTreeOva                                 0.3400         0.3500       4.8        180                     |\r\n\t\t|181  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0        181                     |\r\n\t\t|182  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.1        182                     |\r\n\t\t|183  FastForestOva                               0.4067         0.4500       5.0        183                     |\r\n\t\t|184  LightGbmMulti                               0.3067         0.3500       0.2        184                     |\r\n\t\t|185  SdcaLogisticRegressionOva                   0.8000         0.8000       3.9        185                     |\r\n\t\t|186  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.1        186                     |\r\n\t\t|187  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3        187                     |\r\n\t\t|188  FastTreeOva                                 0.3400         0.3500       5.0        188                     |\r\n\t\t|189  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0        189                     |\r\n\t\t|190  SdcaLogisticRegressionOva                   0.8000         0.8000       4.0        190                     |\r\n\t\t|191  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.2        191                     |\r\n\r\n\t\t===============================================Experiment Results=================================================\r\n\t\t------------------------------------------------------------------------------------------------------------------\r\n\t\t|                                                     Summary                                                    |\r\n\t\t------------------------------------------------------------------------------------------------------------------\r\n\t\t|ML Task: Classification                                                                                         |\r\n\t\t|Dataset: S:\\CATS\\files\\data_analysis\\output\\AggregatedFile\\small_2.csv                                          |\r\n\t\t|Label : c11                                                                                                     |\r\n\t\t|Total experiment time : 295.89 Secs                                                                             |\r\n\t\t|Total number of models explored: 188                                                                            |\r\n\t\t------------------------------------------------------------------------------------------------------------------\r\n\r\n\t\t|                                              Top 5 models explored                                             |\r\n\t\t------------------------------------------------------------------------------------------------------------------\r\n\t\t|     Trainer                              MicroAccuracy  MacroAccuracy  Duration #Iteration                     |\r\n\t\t|187  LbfgsMaximumEntropyMulti                    0.8000         0.8000       0.2        187                     |\r\n\t\t|186  SdcaLogisticRegressionOva                   0.8000         0.8000       4.0        186                     |\r\n\t\t|185  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.0        185                     |\r\n\t\t|183  LbfgsLogisticRegressionOva                  0.8000         0.8000       0.3        183                     |\r\n\t\t|182  SdcaMaximumEntropyMulti                     0.8000         0.8000       1.1        182                     |\r\n\t\t------------------------------------------------------------------------------------------------------------------\r\n\r\n\t\tGenerate code behind files\r\n\r\n\r\n\t\tCopying generated code to project...\r\n\t\tCopying MLModel1.consumption.cs to folder: G:\\Users\\Wilhelm\\dev\\MachineLearning\\ML1\r\n\t\tCopying MLModel1.training.cs to folder: G:\\Users\\Wilhelm\\dev\\MachineLearning\\ML1\r\n\t\tCOMPLETED\r\n\r\n\r\n\t\tUpdating nuget dependencies...\r\n\t\tStarting update NuGet dependencies async.\r\n\t\tInstalling nuget package, package ID: Microsoft.ML, package Version: 1.7.1\r\n\r\nI would have excepted it to have found a good results\r\n\r\nSo I tried with 1 algo via c# and I got this:\r\n\r\n\t\tProcessing LightGbm\r\n\t\tBestRun TrainerName:        LightGbmMulti\r\n\t\t\t- MicroAccuracy:        1\r\n\t\t\t- MacroAccuracy:        1\r\n\t\t\t- LogLoss:              0.08765842991120704\r\n\t\t\t- CLogLossReduction:    Infinity\r\n\r\n\t\tClass log loss:\r\n\t\t\t- class 1: 0\r\n\t\t\t- class 2: 0.09051613072327441\r\n\t\t\t- class 3: 0\r\n\r\n\t\tConfusionMatrix.PerClassPrecision:\r\n\t\tclass 1: 0\r\n\t\tclass 2: 1\r\n\t\tclass 3: 0\r\n\r\n\t\tConfusionMatrix.PerClassPrecision:\r\n\t\t\t- class 1: 0, 0, 0,\r\n\t\t\t- class 2: 0, 3, 0,\r\n\t\t\t- class 3: 0, 0, 0,\r\n\t\tSaving model!!!\r\n\t\tDone saving...\r\n\t\t\r\n**Shouldn't the Confusion Matrix look like this?**\r\n\t\t\t- class 1: 11, 0, 0,\r\n\t\t\t- class 2: 0, 11, 0,\r\n\t\t\t- class 3: 0, 0, 2,\r\n\r\nI'm running the other Trainer and will post once done...right now it seems stuck on \tAveragedPerceptronOva, its been 20 min already....\r\n\r\n\t\t\r\nUpdate after some time (I kill the program when too long so it can move to the next trainer):\r\n\r\n  \t\t  Processing LightGbm\r\n\t\t  BestRun TrainerName:        LightGbmMulti\r\n\t\t\t  - MicroAccuracy:        1\r\n\t\t\t  - MacroAccuracy:        1\r\n\t\t\t  - LogLoss:              0.08765842991120704\r\n\t\t\t  - CLogLossReduction:    Infinity\r\n\t\t  \r\n\t\t  Class log loss:\r\n\t\t\t  - class 1: 0\r\n\t\t\t  - class 2: 0.09051613072327441\r\n\t\t\t  - class 3: 0\r\n\t\t  \r\n\t\t  ConfusionMatrix.PerClassPrecision:\r\n\t\t  class 1: 0\r\n\t\t  class 2: 1\r\n\t\t  class 3: 0\r\n\t\t  \r\n\t\t  ConfusionMatrix.PerClassPrecision:\r\n\t\t\t  - class 1: 0, 0, 0,\r\n\t\t\t  - class 2: 0, 3, 0,\r\n\t\t\t  - class 3: 0, 0, 0,\r\n\t\t  Saving model!!!\r\n\t\t  Done saving...\r\n\t\t  \r\n\t\t  Duration: 00:00:00.7684543\r\n\t\t  ---------------------\r\n\t\t  \r\n\t\t \r\n\t\t  Processing AveragedPerceptronOva\r\n\t\t  ^CTerminate batch job (Y/N)? n\r\n\t\t  \r\n\t\t  --------------------------------\r\n\t\t  Processing FastForestOva\r\n\t\t  BestRun TrainerName:        FastForestOva\r\n\t\t\t  - MicroAccuracy:        1\r\n\t\t\t  - MacroAccuracy:        1\r\n\t\t\t  - LogLoss:              0.13785668008671875\r\n\t\t\t  - CLogLossReduction:    Infinity\r\n\t\t  \r\n\t\t  Class log loss:\r\n\t\t\t  - class 1: 0\r\n\t\t\t  - class 2: 0.1283592552410416\r\n\t\t\t  - class 3: 0\r\n\t\t  \r\n\t\t  ConfusionMatrix.PerClassPrecision:\r\n\t\t  class 1: 0\r\n\t\t  class 2: 1\r\n\t\t  class 3: 0\r\n\t\t  \r\n\t\t  ConfusionMatrix.PerClassPrecision:\r\n\t\t\t  - class 1: 0, 0, 0,\r\n\t\t\t  - class 2: 0, 3, 0,\r\n\t\t\t  - class 3: 0, 0, 0,\r\n\t\t  Saving model!!!\r\n\t\t  Done saving...\r\n\t\t  \r\n\t\t  Duration: 00:00:01.3639996\r\n\t\t  ---------------------\r\n\t\t  \r\n\t\t \r\n\t\t  Processing FastTreeOva\r\n\t\t  BestRun TrainerName:        FastTreeOva\r\n\t\t\t  - MicroAccuracy:        1\r\n\t\t\t  - MacroAccuracy:        1\r\n\t\t\t  - LogLoss:              0.38632734814558706\r\n\t\t\t  - CLogLossReduction:    Infinity\r\n\t\t  \r\n\t\t  Class log loss:\r\n\t\t\t  - class 1: 0\r\n\t\t\t  - class 2: 0.3665745755147897\r\n\t\t\t  - class 3: 0\r\n\t\t  \r\n\t\t  ConfusionMatrix.PerClassPrecision:\r\n\t\t  class 1: 0\r\n\t\t  class 2: 1\r\n\t\t  class 3: 0\r\n\t\t  \r\n\t\t  ConfusionMatrix.PerClassPrecision:\r\n\t\t\t  - class 1: 0, 0, 0,\r\n\t\t\t  - class 2: 0, 3, 0,\r\n\t\t\t  - class 3: 0, 0, 0,\r\n\t\t  Saving model!!!\r\n\t\t  Done saving...\r\n\t\t  \r\n\t\t  Duration: 00:00:02.0520908\r\n\t\t  ---------------------\r\n\t\t  \r\n\t\t \r\n\t\t  Processing LinearSupportVectorMachinesOva\r\n\t\t  ^CTerminate batch job (Y/N)? n\r\n\t\t  \r\n\t\t  -----------------------------------------\r\n\t\t  Processing LbfgsMaximumEntropy\r\n\t\t  ^CTerminate batch job (Y/N)? n\r\n\t\t  \r\n\t\t  -----------------------------------------------------------\r\n\t\t  Processing LbfgsLogisticRegressionOva\r\n\t\t  ^CTerminate batch job (Y/N)? n\r\n\t\t  \r\n\t\t -------------------------------------------------------\r\n\t\t  Processing SdcaMaximumEntropy\r\n\t\t  BestRun TrainerName:        SdcaMaximumEntropyMulti\r\n\t\t\t  - MicroAccuracy:        1\r\n\t\t\t  - MacroAccuracy:        1\r\n\t\t\t  - LogLoss:              0.0034730878249029256\r\n\t\t\t  - CLogLossReduction:    Infinity\r\n\t\t  \r\n\t\t  Class log loss:\r\n\t\t\t  - class 1: 0\r\n\t\t\t  - class 2: 0.0021820014848649345\r\n\t\t\t  - class 3: 0\r\n\t\t  \r\n\t\t  ConfusionMatrix.PerClassPrecision:\r\n\t\t  class 1: 0\r\n\t\t  class 2: 1\r\n\t\t  class 3: 0\r\n\t\t  \r\n\t\t  ConfusionMatrix.PerClassPrecision:\r\n\t\t\t  - class 1: 0, 0, 0,\r\n\t\t\t  - class 2: 0, 3, 0,\r\n\t\t\t  - class 3: 0, 0, 0,\r\n\t\t  Saving model!!!\r\n\t\t  Done saving...\r\n\t\t  \r\n\t\t  Duration: 00:00:02.0249306\r\n\t\t  ---------------------\r\n\t\t  \r\n\t\t \r\n\t\t  Processing SgdCalibratedOva\r\n\t\t  ^CTerminate batch job (Y/N)? n\r\n\t\t  \r\n\t\t  -------------------------------\r\n\t\t  Processing SymbolicSgdLogisticRegressionOva\r\n\t\t  ^CTerminate batch job (Y/N)? n\r\n\r\n\r\n\r\n=====================================\r\nMore or less related issues: \r\n- https://github.com/dotnet/machinelearning/issues/6309\r\n- https://github.com/dotnet/machinelearning/issues/6297\r\n- https://github.com/dotnet/machinelearning/issues/6309","Url":"https://github.com/dotnet/machinelearning/issues/6309","RelatedDescription":"Closed issue \"[ML.Net c#, CLI, VS Builder] 1KB csv input file. Not sure what to do + NoColumn how-to\" (#6309)"},{"Id":"1358137670","IsPullRequest":true,"CreatedAt":"2022-09-01T01:59:11","Actor":"alexperovich","Number":"6313","RawContent":null,"Title":"Update public pool names","State":"open","Body":"This change is required for builds to continue working in the new org, dev.azure.com/dnceng-public.","Url":"https://github.com/dotnet/machinelearning/pull/6313","RelatedDescription":"Open PR \"Update public pool names\" (#6313)"},{"Id":"1358137613","IsPullRequest":true,"CreatedAt":"2022-09-01T01:59:03","Actor":"alexperovich","Number":"6312","RawContent":null,"Title":"Update public pool names","State":"open","Body":"This change is required for builds to continue working in the new org, dev.azure.com/dnceng-public.","Url":"https://github.com/dotnet/machinelearning/pull/6312","RelatedDescription":"Open PR \"Update public pool names\" (#6312)"},{"Id":"1355647969","IsPullRequest":false,"CreatedAt":"2022-08-30T11:54:00","Actor":"superichmann","Number":"6311","RawContent":null,"Title":"possible wrong value on example table","State":"open","Body":"The example described in the article consists of test data table value that does not exist in the output table.\r\n\r\n`the output of applying this Estimator would keep the first and the third slots only `\r\n\r\nIn the table the value of the last line is\r\n<html>\r\n<body>\r\n<!--StartFragment-->\r\n\r\nFalse | 0,5\r\n-- | --\r\n\r\n\r\n<!--EndFragment-->\r\n</body>\r\n</html>\r\n\r\nWhich perhaps should be\r\n\r\n<html>\r\n<body>\r\n<!--StartFragment-->\r\n\r\nFalse | 0,0\r\n-- | --\r\n\r\n\r\n<!--EndFragment-->\r\n</body>\r\n</html>\r\n\r\nOr maybe the last line of the input table is wrong?\r\n\r\n<html>\r\n<body>\r\n<!--StartFragment-->\r\n\r\nFalse | 0,7,0\r\n-- | --\r\n\r\n\r\n<!--EndFragment-->\r\n</body>\r\n</html>\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 58a8434a-e5b9-a96f-e70a-c281f071d0c9\r\n* Version Independent ID: 26f433a0-138d-54b4-86a8-6c1b0f7088f7\r\n* Content: [MutualInformationFeatureSelectingEstimator Class (Microsoft.ML.Transforms)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.mutualinformationfeatureselectingestimator?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms/MutualInformationFeatureSelectingEstimator.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms/MutualInformationFeatureSelectingEstimator.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/6311","RelatedDescription":"Open issue \"possible wrong value on example table\" (#6311)"},{"Id":"1352983294","IsPullRequest":false,"CreatedAt":"2022-08-27T08:26:38","Actor":"PerfectEngineer","Number":"6308","RawContent":null,"Title":"Image Prediction : OOM when allocating tensor with shape","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win 10\r\n- **.NET Version (eg., dotnet --info)**:  6.0\r\n- **ML.NET Version**: ML.NET v1.7.1\r\n- **SciSharp.TensorFlow.Redis: 2.3.1**\r\n\r\n**Issue OOM when allocating tensor**\r\n\r\n \r\n### Code\r\nBitmapImage imageAsBitmap = new BitmapImage(new Uri(\"D:/ImageToGetPrediction.jpeg\"));\r\nvar encoder = new JpegBitmapEncoder();\r\nencoder.Frames.Add(BitmapFrame.Create(imageAsBitmap));\r\nvar input = new Input();\r\n\r\nusing (MemoryStream ms = new MemoryStream())\r\n{\r\nencoder.Save(ms);\r\ninput.Image = ms.ToArray();\r\n}\r\nvar prediction = _predictor.Predict(input);\r\n\r\n\r\n\r\n### Exception \r\nOOM when allocating tensor with shape[1,75,75,256] and type float on /job:localhost/replica:0/task:0/device:CPU:0 by allocator cpu\r\n\t [[{{node resnet_v2_101/block1/unit_1/bottleneck_v2/conv3/BiasAdd}}]]\r\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info.\r\nINNERMESSAGE \r\nSTACKTRACE:    at Microsoft.ML.TensorFlow.TensorFlowUtils.Runner.Run()\r\n   at Microsoft.ML.Vision.ImageClassificationModelParameters.Classifier.Score(VBuffer`1& image, Span`1 classProbabilities)\r\n   at Microsoft.ML.Vision.ImageClassificationModelParameters.<>c__DisplayClass22_0`2.<Microsoft.ML.Data.IValueMapper.GetMapper>b__0(VBuffer`1& src, VBuffer`1& dst)\r\n   at Microsoft.ML.Data.SchemaBindablePredictorWrapperBase.<>c__DisplayClass19_0`2.<GetValueGetter>b__0(TDst& dst)\r\n   at Microsoft.ML.Data.PredictedLabelScorerBase.EnsureCachedPosition[TScore](Int64& cachedPosition, TScore& score, DataViewRow boundRow, ValueGetter`1 scoreGetter)\r\n   at Microsoft.ML.Data.MulticlassClassificationScorer.<>c__DisplayClass16_0.<GetPredictedLabelGetter>b__1(VBuffer`1& dst)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.<>c__DisplayClass8_0`1.<CreateDirectVBufferSetter>b__0(TRow row)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.FillValues(TRow row)\r\n   at Microsoft.ML.Data.TypedCursorable`1.RowImplementation.FillValues(TRow row)\r\n   at Microsoft.ML.PredictionEngineBase`2.FillValues(TDst prediction)\r\n   at Microsoft.ML.PredictionEngine`2.Predict(TSrc example, TDst& prediction)\r\n   at Microsoft.ML.PredictionEngineBase`2.Predict(TSrc example)","Url":"https://github.com/dotnet/machinelearning/issues/6308","RelatedDescription":"Open issue \"Image Prediction : OOM when allocating tensor with shape\" (#6308)"},{"Id":"1352968739","IsPullRequest":false,"CreatedAt":"2022-08-27T07:12:42","Actor":"PerfectEngineer","Number":"6307","RawContent":null,"Title":"Exception during Predict ","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version:  ML.NET v1.7.1\r\n - .NET Version:  .NET 6.0\r\n - SciSharp.TensorFlow.Redis: 2.3.1\r\n**Expected behavior**\r\nShould able to get prediction \r\n\r\n**CODE**\r\n\r\nBitmapImage imageAsBitmap = new BitmapImage(new Uri(\"D:/ImageToGetPrediction.jpeg\"));\r\nvar encoder = new JpegBitmapEncoder();\r\nencoder.Frames.Add(BitmapFrame.Create(imageAsBitmap));\r\nvar input = new Input();\r\n\r\nusing (MemoryStream ms = new MemoryStream())\r\n{\r\n    encoder.Save(ms);\r\n    input.Image = ms.ToArray();\r\n}\r\n    var prediction = _predictor.Predict(input);\r\n\r\n**STACKTRACE**\r\n\r\nError: External component has thrown an exception \r\n\r\nSTACKTRACE:    at Tensorflow.c_api.TF_SessionRun(IntPtr session, TF_Buffer* run_options, TF_Output[] inputs, IntPtr[] input_values, Int32 ninputs, TF_Output[] outputs, IntPtr[] output_values, Int32 noutputs, IntPtr[] target_opers, Int32 ntargets, IntPtr run_metadata, SafeStatusHandle status)\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.Runner.Run()\r\n   at Microsoft.ML.Vision.ImageClassificationModelParameters.Classifier.Score(VBuffer`1& image, Span`1 classProbabilities)\r\n   at Microsoft.ML.Vision.ImageClassificationModelParameters.<>c__DisplayClass22_0`2.<Microsoft.ML.Data.IValueMapper.GetMapper>b__0(VBuffer`1& src, VBuffer`1& dst)\r\n   at Microsoft.ML.Data.SchemaBindablePredictorWrapperBase.<>c__DisplayClass19_0`2.<GetValueGetter>b__0(TDst& dst)\r\n   at Microsoft.ML.Data.PredictedLabelScorerBase.EnsureCachedPosition[TScore](Int64& cachedPosition, TScore& score, DataViewRow boundRow, ValueGetter`1 scoreGetter)\r\n   at Microsoft.ML.Data.MulticlassClassificationScorer.<>c__DisplayClass16_0.<GetPredictedLabelGetter>b__1(VBuffer`1& dst)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.<>c__DisplayClass8_0`1.<CreateDirectVBufferSetter>b__0(TRow row)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.FillValues(TRow row)\r\n   at Microsoft.ML.Data.TypedCursorable`1.RowImplementation.FillValues(TRow row)\r\n   at Microsoft.ML.PredictionEngineBase`2.FillValues(TDst prediction)\r\n   at Microsoft.ML.PredictionEngine`2.Predict(TSrc example, TDst& prediction)\r\n   at Microsoft.ML.PredictionEngineBase`2.Predict(TSrc example)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6307","RelatedDescription":"Open issue \"Exception during Predict \" (#6307)"},{"Id":"1352965598","IsPullRequest":false,"CreatedAt":"2022-08-27T06:57:38","Actor":"PerfectEngineer","Number":"6306","RawContent":null,"Title":"0x80004005 during CreatePredictionEngine","State":"open","Body":"### System information\r\n\r\n- **OS  Win 10\r\n- **.NET Version    Dot Net 6.0\r\n\r\n### Issue\r\nException and System Hang \r\n- **What did you do?**\r\nI am getting Prediction from the model generated for Image classification \r\n- **What happened?**\r\nSystem Hangs \r\n- **What did you expect?**\r\nShould predict the result\r\n### Source code / logs\r\n\r\n**Code**\r\n \r\nvar context = new MLContext(seed: 0);\r\nvar model = context.Model.Load(_modelPath, out DataViewSchema schema);\r\nPredictionEngine<Input, Output> _predicto = context.Model.CreatePredictionEngine<Input, Output>(model);\r\n\r\n\r\n**Exception Log**\r\nConstructor  Details: Error during class instantiationINNERMESSAGE System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\r\n ---> System.InvalidOperationException: Error during class instantiation\r\n ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\r\n ---> System.InvalidOperationException: Error during class instantiation\r\n ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\r\n ---> System.FormatException: Tensorflow exception triggered while loading model.\r\n ---> System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception.\r\n   at Tensorflow.c_api.TF_GraphImportGraphDef(IntPtr graph, SafeBufferHandle graph_def, SafeImportGraphDefOptionsHandle options, SafeStatusHandle status)\r\n   at Tensorflow.Graph.Import(Byte[] bytes, String prefix)\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSession(IExceptionContext ectx, Byte[] modelBytes, String modelFile)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSession(IExceptionContext ectx, Byte[] modelBytes, String modelFile)\r\n   at Microsoft.ML.Vision.ImageClassificationModelParameters..ctor(IHostEnvironment env, ModelLoadContext ctx)\r\n   at Microsoft.ML.Vision.ImageClassificationModelParameters.Create(IHostEnvironment env, ModelLoadContext ctx)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Span`1& arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstanceCore(Object[] ctorArgs)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstanceCore(Object[] ctorArgs)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes](IHostEnvironment env, Type signatureType, TRes& result, String name, String options, Object[] extra)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes,TSig](IHostEnvironment env, TRes& result, String name, String options, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.TryLoadModelCore[TRes,TSig](IHostEnvironment env, TRes& result, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.TryLoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, Entry ent, String dir, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, Entry ent, String dir, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModelOrNull[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, String dir, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModelOrNull[TRes,TSig](IHostEnvironment env, TRes& result, String name, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, String name, Object[] extra)\r\n   at Microsoft.ML.Data.MulticlassPredictionTransformer.Create(IHostEnvironment env, ModelLoadContext ctx)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Span`1& arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstanceCore(Object[] ctorArgs)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstanceCore(Object[] ctorArgs)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes](IHostEnvironment env, Type signatureType, TRes& result, String name, String options, Object[] extra)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes,TSig](IHostEnvironment env, TRes& result, String name, String options, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.TryLoadModelCore[TRes,TSig](IHostEnvironment env, TRes& result, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.TryLoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, Entry ent, String dir, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, Entry ent, String dir, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModelOrNull[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, String dir, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModelOrNull[TRes,TSig](IHostEnvironment env, TRes& result, String name, Object[] extra)\r\n   at Microsoft.ML.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, String name, Object[] extra)\r\n   at Microsoft.ML.Data.TransformerChain`1..ctor(IHostEnvironment env, ModelLoadContext ctx)\r\n   at Microsoft.ML.Data.TransformerChain.Create(IHostEnvironment env, ModelLoadContext ctx)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Span`1& arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstanceCore(Object[] ctorArgs)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6306","RelatedDescription":"Open issue \"0x80004005 during CreatePredictionEngine\" (#6306)"},{"Id":"1352701951","IsPullRequest":false,"CreatedAt":"2022-08-26T20:24:28","Actor":"luisquintanilla","Number":"6304","RawContent":null,"Title":"[AutoML API] API Suggestions","State":"open","Body":"- When setting evaluation metrics using methods like `SetBinaryClassificationMetric`, the default value for `labelColumn` parameter is *label*. This is inconsistent with like the `predictColumn` parameter and the rest of ML.NET. Suggest change to `Label`. \r\n- When setting evaluation metrics using methods like `SetBinaryClassificationMetric`, the parameter names are `labelColumn` and `predictColumn`. In ML.NET, typically parameters referring to column names include name. Suggest change of parameter names to `labelColumnName` and `predictColumnName`. ","Url":"https://github.com/dotnet/machinelearning/issues/6304","RelatedDescription":"Open issue \"[AutoML API] API Suggestions\" (#6304)"},{"Id":"1351588693","IsPullRequest":true,"CreatedAt":"2022-08-26T00:38:22","Actor":"dakersnar","Number":"6303","RawContent":null,"Title":"Fix problems with DataFrame WriteCsv","State":"open","Body":"https://github.com/dotnet/machinelearning/issues/5647 is no longer present, but while investigating that issue I discovered some bugs with `WriteCsv`. This PR does the following:\r\n\r\n- Fixes bugs where text qualifiers (quotation marks) were not properly added to the CSV output by `WriteCsv` in the following cases:\r\n    - There are separators in a row entry\r\n    - There are separators in a header name\r\n    - There are newlines in a row entry\r\n    - There are newlines in a header name\r\n- Adds test cases both confirming https://github.com/dotnet/machinelearning/issues/5647 is solved and validating that the above bugs are fixed.\r\n\r\nThis is my first contribution to this repo so style criticism appreciated.","Url":"https://github.com/dotnet/machinelearning/pull/6303","RelatedDescription":"Open PR \"Fix problems with DataFrame WriteCsv\" (#6303)"},{"Id":"1349798471","IsPullRequest":true,"CreatedAt":"2022-08-24T17:30:27","Actor":"beccamc","Number":"6302","RawContent":null,"Title":"DataFrame: Add DateTime column type","State":"open","Body":"Fixes #6213, #5698, #5676\r\n\r\nAdd the DateTime type as a PrimitiveDataFrameColumn. This will better allow conversion between IDataView and the DataFrame. \r\n\r\nSome DateTime code exists already, like the DateTime computations. However, the partial implementation left bugs, particularly when trying to convert between IDataView and DataFrame. \r\n\r\nI tried to follow the existing patterns but if this shouldn't be bucketed in with the PrimitiveDataFrameColumns I can make changes. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6302","RelatedDescription":"Open PR \"DataFrame: Add DateTime column type\" (#6302)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-09-20T03:30:23.7373537Z","RunDurationInMilliseconds":505}