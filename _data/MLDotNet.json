{"Data":{"GitHub":{"Issues":[{"Id":"1143799501","IsPullRequest":true,"CreatedAt":"2022-02-18T23:41:23","Actor":"LittleLittleCloud","Number":"6093","RawContent":null,"Title":"Update MicrosoftCodeAnalysisCSharpVersion to 3.9.0","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6093","RelatedDescription":"Closed or merged PR \"Update MicrosoftCodeAnalysisCSharpVersion to 3.9.0\" (#6093)"},{"Id":"1118602652","IsPullRequest":false,"CreatedAt":"2022-02-18T10:58:33","Actor":"torronen","Number":"6065","RawContent":null,"Title":"Q: Roadmap for LightGBM interface in .NET","State":"closed","Body":"LightGBM 2.3.1 has some parameters and features which are missing from Microsoft.ML.LightGBM. One such is refitting / re-training:\r\n- https://lightgbm.readthedocs.io/en/latest/pythonapi/lightgbm.Booster.html#lightgbm.Booster.refit\r\n- https://github.com/microsoft/LightGBM/issues/1473\r\n- https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/retrain-model-ml-net\r\n\r\nRe-fitting is missing from all tree-based trainers in Microsoft.ML. It has been requested at least in #6010 albeit for FastTree, as well something useful for some of my use cases. Another useful would be GPU-support which is mentioned multiple issues, e.g. https://github.com/dotnet/machinelearning/pull/452\r\n\r\nThere was also [PR about LightGBM upgrade to 3.x](https://github.com/dotnet/machinelearning/pull/5851) versions but it was decided to not upgrade it at this time. Upgrade requirements are listed in issue https://github.com/dotnet/machinelearning/issues/5447 .NET might be missing out on the improvements, as well as throws \"Bad allocation\" errors in some combination of hyperparameters.\r\n\r\nIn my experiments, FastTree often outperforms LightGBM. Based on online discussion sentiment about LightGBM this should not be the case. LightGBM is considered a high-performing algorithm and has continued development which I think LightGBM integration should be important for performance of Microsoft.ML.\r\n\r\nFinally, there may be some misconfiguration which prevents Microsoft.ML.LightGBM getting similar results with same hyperparameters as through Python interface (links in https://github.com/dotnet/machinelearning/pull/6064 , sample code https://github.com/torronen/lightgbm-comparison )\r\n\r\nIs the intent to have a complete LightGBM interface in .NET, or is it better to use Python for advanced uses cases (and e.g. export to ONNX from Python)? Any roadmaps / estimated priority for upgrade of LightGBM? \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6065","RelatedDescription":"Closed issue \"Q: Roadmap for LightGBM interface in .NET\" (#6065)"},{"Id":"1123393293","IsPullRequest":false,"CreatedAt":"2022-02-17T21:38:19","Actor":"papyr","Number":"6069","RawContent":null,"Title":"NLP in voice /audio","State":"closed","Body":"Currently we have some alexa enabled customer care options.\r\n\r\nWe want to port that to ML.NET , do you have any native language parsers on a voice stream like google or Amazon","Url":"https://github.com/dotnet/machinelearning/issues/6069","RelatedDescription":"Closed issue \"NLP in voice /audio\" (#6069)"},{"Id":"1141274245","IsPullRequest":false,"CreatedAt":"2022-02-17T12:26:51","Actor":"JulianusIV","Number":"6092","RawContent":null,"Title":"CL with Binary Logistic Regression","State":"open","Body":"Hello,\r\nI am currently testing some stuff with ML.NET, specifically Binary Logistic Regression, and trying to get CL to work on that.\r\nTo do that I found a few different articles, mainly [this one](https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/retrain-model-ml-net), which I followed as closely as the algorithm allowed.\r\nHowever when trying to get the parameters from a loaded model, and matching that to ``LinearRegressionModelParameters``, it just returns ``null`` despite previously having data.\r\n\r\nThis is how I save my model and pipeline:\r\n```cs\r\nMLContext mLContext = new MLContext();\r\n\r\nvar dataPrepEstimator = mLContext.Transforms.Text.FeaturizeText(inputColumnName: @\"comment_text\", outputColumnName: @\"comment_text\")\r\n  .Append(mLContext.Transforms.Concatenate(@\"Features\", new[] { @\"comment_text\" }))\r\n  .Append(mLContext.Transforms.NormalizeMinMax(@\"Features\", @\"Features\"));\r\n\r\nvar _data = GetData(mLContext);\r\n\r\nvar transformer = dataPrepEstimator.Fit(_data);\r\n\r\nvar lbfgs = mLContext.BinaryClassification.Trainers.LbfgsLogisticRegression(\"toxic\", \"Features\");\r\n\r\nvar transformedData = transformer.Transform(_data);\r\n\r\nvar trainedModel = lbfgs.Fit(transformedData);\r\n\r\nmLContext.Model.Save(transformer, _data.Schema, \"data_prep_pipeline.zip\");\r\nmLContext.Model.Save(trainedModel, _data.Schema, \"model.zip\");\r\n```\r\n\r\nAnd this is how I load them again:\r\n```cs\r\nvar dataPrepPipeline = mLContext.Model.Load(\"data_prep_pipeline.zip\", out _);\r\nvar _trainedModel = mLContext.Model.Load(\"model.zip\", out _);\r\n\r\n//This next line assigns a object of type Microsoft.ML.Calibrators.ParameterMixingCalibratedModelParameters<Microsoft.ML.Trainers.LinearBinaryModelParameters, Microsoft.ML.Calibrators.PlattCalibrator> to originalParams (according to the debugger)\r\nvar originalParams = ((ISingleFeaturePredictionTransformer<object>)_trainedModel).Model;\r\n//this next line just results in originalParamsAsLMP being null\r\nvar originalParamsAsLMP = originalParams as LinearModelParameters;\r\n\r\nvar newData = GetData(mLContext);\r\n\r\nvar transformedNewData = dataPrepPipeline.Transform(newData);\r\n\r\nvar retrainedModel = mLContext.BinaryClassification.Trainers.LbfgsLogisticRegression(\"toxic\", \"Features\").Fit(transformedNewData, originalParamsAsLMP);\r\n```\r\n\r\nI have seen in the article I mentioned that the algorithms have different parameter outputs, but cant seem to find the correct one for ``LbfgsLogisticRegression`` \r\nonly thing I found was the one I am currently using, which doesn't work for me, so it seems like I either missed something, or made a mistake in my implementation. Can anyone help me with this?","Url":"https://github.com/dotnet/machinelearning/issues/6092","RelatedDescription":"Open issue \"CL with Binary Logistic Regression\" (#6092)"},{"Id":"1139238156","IsPullRequest":true,"CreatedAt":"2022-02-17T04:06:07","Actor":"colombod","Number":"6089","RawContent":null,"Title":"upgrade to .NET Interactive 1.0.0-beta.22103.1","State":"closed","Body":"Upgrade .NET Interactive dependencies to version 1.0.0-beta.22103.1, the latest available in nuget feed.\nFix workaround in tests by updating test dependency to System.Text.Encodings.Web 6.0.0\n","Url":"https://github.com/dotnet/machinelearning/pull/6089","RelatedDescription":"Closed or merged PR \"upgrade to .NET Interactive 1.0.0-beta.22103.1\" (#6089)"},{"Id":"1140605667","IsPullRequest":true,"CreatedAt":"2022-02-16T21:31:00","Actor":"rgesteve","Number":"6091","RawContent":null,"Title":"OneDAL integration -- WIP: includes LBFGS/OLS-driven algorithms","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x ] You have included any necessary tests in the same PR.\r\n\r\n(a detailed description of the changes in this PR, as well as how to build and test it are included in `README-onedal.md`\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6091","RelatedDescription":"Open PR \"OneDAL integration -- WIP: includes LBFGS/OLS-driven algorithms\" (#6091)"},{"Id":"1140503013","IsPullRequest":true,"CreatedAt":"2022-02-16T20:10:22","Actor":"LittleLittleCloud","Number":"6090","RawContent":null,"Title":"Add source generator to generate search space class for all trainers/transformers","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n#5993 \r\n\r\nThis PR adds a source generator that generates `SearchSpace` classes for all estimators used in AutoML.Net and associated search space configurations which is in Json format.\r\n\r\nThe generated `SearchSpace` class looks like this (following is SearchSpace for LGBM)\r\n\r\n``` csharp\r\n\r\nusing Microsoft.ML.SearchSpace;\r\nusing OptionAttribute = Microsoft.ML.SearchSpace.OptionAttribute;\r\nusing ColorsOrder = Microsoft.ML.Transforms.Image.ImagePixelExtractingEstimator.ColorsOrder;\r\nusing ColorBits = Microsoft.ML.Transforms.Image.ImagePixelExtractingEstimator.ColorBits;\r\nusing ResizingKind = Microsoft.ML.Transforms.Image.ImageResizingEstimator.ResizingKind;\r\nusing Anchor = Microsoft.ML.Transforms.Image.ImageResizingEstimator.Anchor;\r\n\r\n#nullable enable\r\n\r\nnamespace Microsoft.ML.AutoML.CodeGen\r\n{\r\n    public class LgbmOption\r\n    {\r\n        [Range((int)4, (int)32768, init: (int)4, logBase: true)]\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Declaration\", \"MSML_NoInstanceInitializers:No initializers on instance fields or properties\")]\r\n        public int NumberOfLeaves {get; set;} = 4;\r\n        [Range((int)20, (int)1024, init: (int)20, logBase: true)]\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Declaration\", \"MSML_NoInstanceInitializers:No initializers on instance fields or properties\")]\r\n        public int MinimumExampleCountPerLeaf {get; set;} = 20;\r\n        [Range((double)2E-10, (double)1, init: (double)1, logBase: true)]\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Declaration\", \"MSML_NoInstanceInitializers:No initializers on instance fields or properties\")]\r\n        public double LearningRate {get; set;} = 1;\r\n        [Range((int)4, (int)32768, init: (int)4, logBase: true)]\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Declaration\", \"MSML_NoInstanceInitializers:No initializers on instance fields or properties\")]\r\n        public int NumberOfTrees {get; set;} = 4;\r\n        [Range((double)2E-10, (double)1, init: (double)1, logBase: true)]\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Declaration\", \"MSML_NoInstanceInitializers:No initializers on instance fields or properties\")]\r\n        public double SubsampleFraction {get; set;} = 1;\r\n        [Range((int)8, (int)1024, init: (int)256, logBase: true)]\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Declaration\", \"MSML_NoInstanceInitializers:No initializers on instance fields or properties\")]\r\n        public int MaximumBinCountPerFeature {get; set;} = 256;\r\n        [Range((double)2E-10, (double)1, init: (double)1, logBase: false)]\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Declaration\", \"MSML_NoInstanceInitializers:No initializers on instance fields or properties\")]\r\n        public double FeatureFraction {get; set;} = 1;\r\n        [Range((double)2E-10, (double)1, init: (double)2E-10, logBase: true)]\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Declaration\", \"MSML_NoInstanceInitializers:No initializers on instance fields or properties\")]\r\n        public double L1Regularization {get; set;} = 2E-10;\r\n        [Range((double)2E-10, (double)1, init: (double)1, logBase: true)]\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Declaration\", \"MSML_NoInstanceInitializers:No initializers on instance fields or properties\")]\r\n        public double L2Regularization {get; set;} = 1;\r\n        \r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Declaration\", \"MSML_NoInstanceInitializers:No initializers on instance fields or properties\")]\r\n        public string LabelColumnName {get; set;} = \"Label\";\r\n        \r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Declaration\", \"MSML_NoInstanceInitializers:No initializers on instance fields or properties\")]\r\n        public string FeatureColumnName {get; set;} = \"Feature\";\r\n        \r\n        public string? ExampleWeightColumnName {get; set;}\r\n\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/pull/6090","RelatedDescription":"Open PR \"Add source generator to generate search space class for all trainers/transformers\" (#6090)"},{"Id":"1124440724","IsPullRequest":true,"CreatedAt":"2022-02-15T23:55:04","Actor":"ericstj","Number":"6075","RawContent":null,"Title":"Update Google.Protobuf to 3.19.4","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/6075","RelatedDescription":"Closed or merged PR \"Update Google.Protobuf to 3.19.4\" (#6075)"},{"Id":"1137982502","IsPullRequest":false,"CreatedAt":"2022-02-15T18:29:07","Actor":"ericjohannsen","Number":"6084","RawContent":null,"Title":"Exception Retrieving PFI from AutoML Model","State":"closed","Body":"**System Information (please complete the following information):**\r\n - Windows 11\r\n - ML.NET Version 1.7, AutoML 0.19.0\r\n - .NET Version: .NET Core 3.1\r\n \r\n**Describe the bug**\r\nArgumentNullException while attempting to retrieve PFI\r\nThe model provided does not have a compatible predictor (Parameter 'lastTransformer')\r\n\r\nStack trace\r\n   at Microsoft.ML.Runtime.Contracts.CheckValue[T](IExceptionContext ctx, T val, String paramName, String msg)\r\n   at Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance[TMetric,TResult](IHostEnvironment env, ITransformer model, IDataView data, Func`1 resultInitializer, Func`2 evaluationFunc, Func`3 deltaFunc, Int32 permutationCount, Boolean useFeatureWeightFilter, Nullable`1 numberOfExamplesToUse)\r\n   at Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance(RegressionCatalog catalog, ITransformer model, IDataView data, String labelColumnName, Boolean useFeatureWeightFilter, Nullable`1 numberOfExamplesToUse, Int32 permutationCount)\r\n\r\n**To Reproduce**\r\n\r\nNot sure how best to create a minimal reproducible example including data, but here's the core of what I did (based on https://github.com/dotnet/machinelearning/pull/5934)\r\n\r\n```\r\nMLContext mlContext = new MLContext();\r\n\r\nColumnInferenceResults columnInference = mlContext.Auto().InferColumns(trainDataPath, \"Label\", groupColumns: false);\r\n\r\nTextLoader textLoader = mlContext.Data.CreateTextLoader(columnInference.TextLoaderOptions);\r\nIDataView trainDataView = textLoader.Load(trainDataPath);\r\nIDataView testDataView = textLoader.Load(testDataPath);\r\n\r\nIEstimator<ITransformer> preFeaturizer = \r\n\tmlContext.Transforms.Categorical.OneHotEncoding(\r\n\t\tnew T().GetOneHotInputColumnNames().Select(_ => new InputOutputColumnPair(_)).ToArray()\r\n\t\t);\r\n\r\nColumnInformation columnInformation = columnInference.ColumnInformation;\r\ncolumnInformation.IgnoredColumnNames.AddIfMissing(\"Foo\");\r\ncolumnInformation.CategoricalColumnNames.Remove(\"Foo\");\r\ncolumnInformation.NumericColumnNames.Remove(\"Foo\");\r\n\r\nBinaryExperimentSettings experimentSettings = new BinaryExperimentSettings()\r\n{\r\n\tMaxExperimentTimeInSeconds = experimentTime,\r\n\tOptimizingMetric = BinaryClassificationMetric.F1Score\r\n};\r\n\r\nvar experiment = mlContext.Auto().CreateBinaryClassificationExperiment(experimentSettings);\r\n\r\nExperimentResult<BinaryClassificationMetrics> experimentResult = experiment.Execute(trainDataView, columnInformation, preFeaturizer, progress);\r\n\r\nRunDetail<BinaryClassificationMetrics> bestRun = experimentResult.BestRun;\r\n\r\n// Exception thrown here\r\nvar permutationFeatureImportance = mlContext\r\n\t   .Regression\r\n\t   .PermutationFeatureImportance(bestRun.Model, testDataViewWithBestScore, permutationCount: 3);\r\n```\r\nThe `LastTransformer` of `bestRun.Model` is `BinaryPredictionTransformer<Microsoft.ML.Calibrators.CalibratedModelParametersBase<Microsoft.ML.Trainers.lightGbm.LightGbmBinaryModelParameters, ...>>`\r\n\r\n**Expected behavior**\r\nRetrieve the PFI information.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6084","RelatedDescription":"Closed issue \"Exception Retrieving PFI from AutoML Model\" (#6084)"},{"Id":"1138991051","IsPullRequest":false,"CreatedAt":"2022-02-15T17:22:59","Actor":"GKrivosheev-rms","Number":"6088","RawContent":null,"Title":"DataFrame enhancements","State":"open","Body":"I see dozens of issues and enhancement suggestions for DataFrame in Microsoft.Data.Analysis namespace untouched for almost a year.\r\nAre there any resources allocated to address those?\r\nIs the project dead? \r\nAre there any plans to fund the work on those features in the future?\r\nShould we base any future development on these?\r\n\r\nSpecific enhancements desired:\r\n- Array/VBuffer column types\r\n- Sort by multiple columns\r\n- GroupBy by multiple columns\r\n- Parquet read/Write (currently the [ParquetSharp.DataFrame](https://github.com/G-Research/ParquetSharp.DataFrame) has some limited support)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6088","RelatedDescription":"Open issue \"DataFrame enhancements\" (#6088)"},{"Id":"1138863477","IsPullRequest":false,"CreatedAt":"2022-02-15T15:42:12","Actor":"luisquintanilla","Number":"6087","RawContent":null,"Title":"SlotNames behave differently based on column type","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n - ML.NET Version: 1.7.0\r\n - .NET Version: .NET 6.0\r\n\r\n**Describe the bug**\r\n\r\nFor multiclass classification problems, SlotNames are only available when the columns are of type `string`. Even though, the value and meaning of that value are the same, the SlotName behavior is different based on the data type. \r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Train a multiclass classification model\r\n2. Map labels to scores. You can do it with code similar to the following:\r\n\r\n```csharp\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing myMLApp;\r\n\r\n// Add input data\r\nvar sampleData = new SentimentModel.ModelInput()\r\n{\r\n    Col0 = \"This restaurant was wonderful.\"\r\n};\r\n\r\n// Load model and predict output of sample data\r\nvar result = SentimentModel.Predict(sampleData);\r\n\r\n// If PredictedLabel is 1, sentiment is \"Positive\"; otherwise, sentiment is \"Negative\"\r\nstring sentiment = result.PredictedLabel == \"1\" ? \"Positive\" : \"Negative\";\r\nConsole.WriteLine($\"Text: {sampleData.Col0}\\nSentiment: {sentiment}\");\r\n\r\nvar sortedLabels = GetScoresWithLabelsSorted(SentimentModel.PredictEngine.Value.OutputSchema, nameof(result.Score), result.Score);\r\n\r\nforeach(var (k,v) in sortedLabels)\r\n{\r\n\tConsole.WriteLine($\"{k}: {v}\");\r\n}\r\n\r\nstatic Dictionary<string, float> GetScoresWithLabelsSorted(DataViewSchema schema, string name, float[] scores)\r\n{\r\n\tDictionary<string, float> result = new Dictionary<string, float>();\r\n\r\n\tvar column = schema.GetColumnOrNull(name);\r\n\r\n\tvar slotNames = new VBuffer<ReadOnlyMemory<char>>();\r\n\tcolumn.Value.GetSlotNames(ref slotNames);\r\n\tvar names = new string[slotNames.Length];\r\n\tvar num = 0;\r\n\tforeach (var denseValue in slotNames.DenseValues())\r\n\t{\r\n\t\tresult.Add(denseValue.ToString(), scores[num++]);\r\n\t}\r\n\r\n\treturn result.OrderByDescending(c => c.Value).ToDictionary(i => i.Key, i => i.Value);\r\n}\r\n```\r\n\r\n**Expected behavior**\r\n\r\nNot sure? I would think that if the value and \"meaning\" of that value are the same, the type shouldn't matter and SlotNames are made available.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6087","RelatedDescription":"Open issue \"SlotNames behave differently based on column type\" (#6087)"},{"Id":"1138108920","IsPullRequest":true,"CreatedAt":"2022-02-15T06:22:40","Actor":"michaelgsharp","Number":"6086","RawContent":null,"Title":"Version update to 2.0.0","State":"closed","Body":"Updated ML.NET version to 2.0.0 which is the next big release for November of this year.","Url":"https://github.com/dotnet/machinelearning/pull/6086","RelatedDescription":"Closed or merged PR \"Version update to 2.0.0\" (#6086)"},{"Id":"1126927141","IsPullRequest":true,"CreatedAt":"2022-02-15T03:29:25","Actor":"GitHubPang","Number":"6077","RawContent":null,"Title":"Fix typo","State":"closed","Body":"Reference: https://github.com/dotnet/docs/pull/28105","Url":"https://github.com/dotnet/machinelearning/pull/6077","RelatedDescription":"Closed or merged PR \"Fix typo\" (#6077)"},{"Id":"1138006114","IsPullRequest":true,"CreatedAt":"2022-02-15T03:00:26","Actor":"michaelgsharp","Number":"6085","RawContent":null,"Title":"Fixed PFI bug with transformer chains","State":"closed","Body":"Fixes #6027 \r\n\r\nThe new pfi APi we added to make it easier for users has an issue with handling Transformer chains incorrectly. This PR fixes that and adds a test using Transformer chains.","Url":"https://github.com/dotnet/machinelearning/pull/6085","RelatedDescription":"Closed or merged PR \"Fixed PFI bug with transformer chains\" (#6085)"},{"Id":"1137304532","IsPullRequest":true,"CreatedAt":"2022-02-15T02:53:48","Actor":"dotnet-maestro[bot]","Number":"6081","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 97926d79-6b8b-4d32-c8db-08d9d479971c\r\n- **Build**: 20220211.10\r\n- **Date Produced**: February 12, 2022 2:40:37 AM UTC\r\n- **Commit**: ff6cc4e9c3eef575f62a33a642ca80e79d27c9bb\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 7.0.0-beta.22111.9 to 7.0.0-beta.22111.10][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22111.9 to 7.0.0-beta.22111.10][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 7.0.0-beta.22111.9 to 7.0.0-beta.22111.10][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 7.0.0-beta.22111.9 to 7.0.0-beta.22111.10][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22111.9 to 7.0.0-beta.22111.10][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/a50e5e6...ff6cc4e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6081","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6081)"},{"Id":"1137948448","IsPullRequest":true,"CreatedAt":"2022-02-15T02:19:10","Actor":"ericstj","Number":"6083","RawContent":null,"Title":"Add call to SBOM template to official builds","State":"closed","Body":"Adopt template added in https://github.com/dotnet/machinelearning/commit/4e716f91bd4d962aeec5cea3a76243cc7af624e1.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6083","RelatedDescription":"Closed or merged PR \"Add call to SBOM template to official builds\" (#6083)"},{"Id":"1137901676","IsPullRequest":true,"CreatedAt":"2022-02-15T00:46:10","Actor":"luisquintanilla","Number":"6082","RawContent":null,"Title":"Automatically add enhancement label to issue template","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [X] There's a descriptive title that will make sense to other developers some time from now. \r\n- [X] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [X] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [X] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6082","RelatedDescription":"Closed or merged PR \"Automatically add enhancement label to issue template\" (#6082)"},{"Id":"1125998665","IsPullRequest":true,"CreatedAt":"2022-02-12T18:01:22","Actor":"dotnet-maestro[bot]","Number":"6076","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 97926d79-6b8b-4d32-c8db-08d9d479971c\r\n- **Build**: 20220211.9\r\n- **Date Produced**: February 11, 2022 10:10:52 PM UTC\r\n- **Commit**: a50e5e6c5f9101a3beb7887e5554f359ada13455\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22111.9][2]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22111.9][2]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22111.9][2]\r\n  - **Microsoft.DotNet.SignTool**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22111.9][2]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 7.0.0-beta.22080.1 to 7.0.0-beta.22111.9][2]\r\n\r\n[2]: https://github.com/dotnet/arcade/compare/4d6406f...a50e5e6\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:97926d79-6b8b-4d32-c8db-08d9d479971c)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6076","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#6076)"},{"Id":"1129142765","IsPullRequest":true,"CreatedAt":"2022-02-09T22:57:33","Actor":"michaelgsharp","Number":"6080","RawContent":null,"Title":"Fixing nuget packages to hardlink.","State":"open","Body":"Making nuget package also hardlink for space saving.","Url":"https://github.com/dotnet/machinelearning/pull/6080","RelatedDescription":"Open PR \"Fixing nuget packages to hardlink.\" (#6080)"},{"Id":"1123595956","IsPullRequest":false,"CreatedAt":"2022-02-09T01:01:02","Actor":"r-pankevicius","Number":"6071","RawContent":null,"Title":"Can't compile sample programs (VS2022: IDE0055, VS2019: Microsoft.CodeAnalysis.CodeStyle.CSharpFormattingAnalyzer)","State":"closed","Body":"**System Information:**\r\n - OS & Version: Windows 11\r\n - ML.NET Version: latest from main: e25dce7 12 hours ago \r\n - .NET Version: \r\n```\r\n C:\\~src\\machinelearning>dotnet --list-sdks\r\n3.1.416 [C:\\Program Files\\dotnet\\sdk]\r\n5.0.303 [C:\\Program Files\\dotnet\\sdk]\r\n5.0.403 [C:\\Program Files\\dotnet\\sdk]\r\n5.0.404 [C:\\Program Files\\dotnet\\sdk]\r\n6.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n\r\n**Describe the bug**\r\nCan't compile sample programs (tried Microsoft.ML.AutoML.Samples, Microsoft.ML.Samples).\r\nGetting code analyzers errors (what tf?) like CSharpFormattingAnalyzer:\r\n`Could not load file or assembly 'Microsoft.CodeAnalysis, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'`\r\nA sample error:\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS8032\tAn instance of analyzer Microsoft.CodeAnalysis.CodeStyle.CSharpFormattingAnalyzer cannot be created from C:\\Program Files\\dotnet\\sdk\\6.0.101\\Sdks\\Microsoft.NET.Sdk\\codestyle\\cs\\Microsoft.CodeAnalysis.CSharp.CodeStyle.dll : Could not load file or assembly 'Microsoft.CodeAnalysis, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..\tMicrosoft.ML.InternalCodeAnalyzer\tC:\\~src\\machinelearning\\tools-local\\Microsoft.ML.InternalCodeAnalyzer\\CSC\t1\tN/A\r\n```\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. git clone...\r\n2. cd machinelearning\r\n3. build.cmd\r\nKind of succeeded, but strange warnings I've never seen before at the end (IDE0055: Fix formatting):\r\n```\r\n...\r\n  Microsoft.ML.Core.Tests -> C:\\~src\\machinelearning\\artifacts\\bin\\Microsoft.ML.Core.Tests\\Debug\\netcoreapp3.1\\Microsoft.ML.Core.Tests.dll\r\n\r\nBuild succeeded.\r\n\r\nC:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\UserInputValidationTests.cs(410,1): warning IDE0055: Fix formatting [C:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\Microsoft.ML.AutoML.Tests.csproj]\r\nC:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\UserInputValidationTests.cs(425,1): warning IDE0055: Fix formatting [C:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\Microsoft.ML.AutoML.Tests.csproj]\r\nC:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\UserInputValidationTests.cs(410,1): warning IDE0055: Fix formatting [C:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\Microsoft.ML.AutoML.Tests.csproj]\r\nC:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\UserInputValidationTests.cs(425,1): warning IDE0055: Fix formatting [C:\\~src\\machinelearning\\test\\Microsoft.ML.AutoML.Tests\\Microsoft.ML.AutoML.Tests.csproj]\r\n    4 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:06:27.32\r\n```\r\n4. Opened Microsoft.ML.sln with default Visual Studio (it was 2019, not 2022; I have both installed). Set default project to Microsoft.ML.Samples, tried to build.\r\n5. Got an error (see A sample error above).\r\n\r\n**To Reproduce (2)**\r\nSame as above, but opened Microsoft.ML.sln with Visual Studio 2022.\r\nGot two IDE0055 Fix formatting errors, no idea why.\r\n![image](https://user-images.githubusercontent.com/1467109/152435410-0be7c0b6-deb0-4d0a-9ce7-df657639b172.png)\r\n\r\n**Expected behavior**\r\nCompiling sample without errors.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nAdded scrreenshot.\r\n\r\n**Additional context**\r\nN/A\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6071","RelatedDescription":"Closed issue \"Can't compile sample programs (VS2022: IDE0055, VS2019: Microsoft.CodeAnalysis.CodeStyle.CSharpFormattingAnalyzer)\" (#6071)"},{"Id":"1127838390","IsPullRequest":false,"CreatedAt":"2022-02-08T22:46:42","Actor":"ChadMGeek","Number":"6079","RawContent":null,"Title":"Unable to load KMeans model as original data type","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10 \r\n - ML.NET Version: ML.Net 1.7.0\r\n - .NET Version: .Net 6.0\r\n\r\n**Describe the bug**\r\nAfter fitting a KMeans model, the trained model is of type TransformerChain<ClusteringPredictionTransformer<KMeansModelParameters>>.  After saving the model to a file using mlContext.Model.Save and reloading it using mlContext.Model.Load, there is no way to get the model back to TransformerChain<ClusteringPredictionTransformer<KMeansModelParameters>>. The initial object loaded is of type TransformerChain<ITransformer>. If you look at the object.LastTransformer, it is of type ClusteringPredictionTransformer<IPredictorProducing<Vector<float>>>. Casting either the loaded object or the LastTransformer gives a System.InvalidCastException. Using mlContext.Model.Load(...) as ... gives you null. Leaving LastTransformer as ITransformer does not provide you with the \"Model\" property.\r\n\r\n**To Reproduce**\r\n\r\nCode below for simple Console app, based on MS KMeans example.\r\n\r\n```\r\nusing System;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Trainers;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\n\r\nnamespace KMeansSample\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            // Create a new context for ML.NET operations. It can be used for\r\n            // exception tracking and logging, as a catalog of available operations\r\n            // and as the source of randomness. Setting the seed to a fixed number\r\n            // in this example to make outputs deterministic.\r\n            var mlContext = new MLContext(seed: 0);\r\n\r\n            // Create a list of training data points.\r\n            var dataPoints = GenerateRandomDataPoints(1000, 0);\r\n\r\n            var _model = mlContext.Clustering.Trainers.KMeans(numberOfClusters: 3, featureColumnName: \"Features\");\r\n\r\n            // Convert the list of data points to an IDataView object, which is\r\n            // consumable by ML.NET API.\r\n            IDataView trainingData = mlContext.Data.LoadFromEnumerable(dataPoints);\r\n            var dataProcessPipeline = mlContext.Transforms.Concatenate(\"Features\", nameof(DataPoint.val1),\r\n                nameof(DataPoint.val2),\r\n                nameof(DataPoint.val3),\r\n                nameof(DataPoint.val4)).AppendCacheCheckpoint(mlContext);\r\n            var trainingPipeline = dataProcessPipeline.Append(_model);\r\n\r\n            var trainedModel = trainingPipeline.Fit(trainingData);\r\n\r\n            mlContext.Model.Save(trainedModel, trainingData.Schema, \"C:\\\\temp\\\\trainedModel.ms\");\r\n\r\n            //This version will produce a System.InvalidCastException\r\n           using (var stream = new FileStream(\"C:\\\\temp\\\\trainedModel.ms\", FileMode.Open, FileAccess.Read, FileShare.Read))\r\n            { \r\n                var loadedModel = (TransformerChain<ClusteringPredictionTransformer<KMeansModelParameters>>)(mlContext.Model.Load(stream, out var modelInputSchema1));\r\n                var lastTransformer = loadedModel.LastTransformer;\r\n                var modelParameters = lastTransformer.Model;\r\n            }\r\n\r\n           //This version will produce a null reference exception\r\n            using (var stream = new FileStream(\"C:\\\\temp\\\\trainedModel.ms\", FileMode.Open, FileAccess.Read, FileShare.Read))\r\n            {\r\n                var loadedModel = mlContext.Model.Load(stream, out var modelInputSchema1) as TransformerChain<ClusteringPredictionTransformer<KMeansModelParameters>>;\r\n                var lastTransformer = loadedModel.LastTransformer;\r\n                var modelParameters = lastTransformer.Model;\r\n            }\r\n\r\n            //This version gives a compiler error\r\n            \r\n            using (var stream = new FileStream(\"C:\\\\temp\\\\trainedModel.ms\", FileMode.Open, FileAccess.Read, FileShare.Read))\r\n            {\r\n                var loadedModel = mlContext.Model.Load(stream, out var modelInputSchema1) as TransformerChain<ITransformer> ;\r\n                var lastTransformer = loadedModel.LastTransformer;\r\n                var modelParameters = lastTransformer.Model;\r\n            }\r\n\r\n            //This version also gives a compiler error\r\n            using (var stream = new FileStream(\"C:\\\\temp\\\\trainedModel.ms\", FileMode.Open, FileAccess.Read, FileShare.Read))\r\n            {\r\n                var loadedModel = mlContext.Model.Load(stream, out var modelInputSchema1);\r\n                var lastTransformer = loadedModel.LastTransformer;\r\n                var modelParameters = lastTransformer.Model;\r\n            }\r\n            \r\n        }\r\n\r\n    \r\n\r\n        private static IEnumerable<DataPoint> GenerateRandomDataPoints(int count,\r\n            int seed = 0)\r\n        {\r\n            var random = new Random(seed);\r\n            float randomFloat() => (float)random.NextDouble();\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n               \r\n                yield return new DataPoint\r\n                {\r\n                 val1 = randomFloat(),\r\n                 val2 = randomFloat(),\r\n                 val3 = randomFloat(),\r\n                 val4 = randomFloat()\r\n                   \r\n                };\r\n            }\r\n        }\r\n\r\n        // Example with label and 50 feature values. A data set is a collection of\r\n        // such examples.\r\n        private class DataPoint\r\n        {\r\n         \r\n            public float val1 { get; set; }\r\n            public float val2 { get; set; }\r\n            public float val3 { get; set; }\r\n            public float val4 { get; set; }\r\n\r\n      \r\n        }\r\n\r\n        // Class used to capture predictions.\r\n        private class Prediction\r\n        {\r\n            // Original label (not used during training, just for comparison).\r\n            public uint Label { get; set; }\r\n            // Predicted label from the trainer.\r\n            public uint PredictedLabel { get; set; }\r\n        }\r\n\r\n        // Pretty-print of ClusteringMetrics object.\r\n        private static void PrintMetrics(ClusteringMetrics metrics)\r\n        {\r\n            Console.WriteLine($\"Normalized Mutual Information: \" +\r\n                $\"{metrics.NormalizedMutualInformation:F2}\");\r\n\r\n            Console.WriteLine($\"Average Distance: \" +\r\n                $\"{metrics.AverageDistance:F2}\");\r\n\r\n            Console.WriteLine($\"Davies Bouldin Index: \" +\r\n                $\"{metrics.DaviesBouldinIndex:F2}\");\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n**Expected behavior**\r\nAble to load object back into the same type as the object that was saved.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6079","RelatedDescription":"Open issue \"Unable to load KMeans model as original data type\" (#6079)"},{"Id":"1126977706","IsPullRequest":false,"CreatedAt":"2022-02-08T09:09:36","Actor":"stamen-petrov","Number":"6078","RawContent":null,"Title":"The example ApplyCustomWordEmbedding is not correct, \"product\" is not found.","State":"open","Body":"The example ApplyCustomWordEmbedding is not correct, because the method NormalizeText in ML 1.6, has by default keepPunctuation = true, which leads to extracting \"product.\", not \"product\". The output is as shown, but the explanation is not, because the 2nd position of the output should be -2, if \"product\" is considered. I suggest either to remove the \"product\" row from the custom embeddings, or modify the example accordingly.\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 80b1e2db-bc79-cead-9e39-ff830d8b211b\r\n* Version Independent ID: c6b67859-e2d9-2b15-8ace-973a164c8ff3\r\n* Content: [TextCatalog.ApplyWordEmbedding Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.textcatalog.applywordembedding?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML/TextCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/TextCatalog.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/6078","RelatedDescription":"Open issue \"The example ApplyCustomWordEmbedding is not correct, \"product\" is not found.\" (#6078)"},{"Id":"1124432954","IsPullRequest":true,"CreatedAt":"2022-02-06T07:24:26","Actor":"ericstj","Number":"6074","RawContent":null,"Title":"Update SharpZipLib to 1.3.3","State":"closed","Body":"There's a new version of this dependency used by our samples.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6074","RelatedDescription":"Closed or merged PR \"Update SharpZipLib to 1.3.3\" (#6074)"},{"Id":"1122220162","IsPullRequest":true,"CreatedAt":"2022-02-05T11:17:23","Actor":"torronen","Number":"6068","RawContent":null,"Title":"Use LightGBM default seed if not set explicitly","State":"closed","Body":"\r\n - Fixes #6062 \r\n \r\nLightGBM has a default value for seeds. If we set random_seed, then more specific seeds will get overridden. ML.NET interface does not provide option to set the other seeds explicitly. This makes it impossible to train LightGBM with default values. Further, if we a new random seed is set from MLContext it may change for each call. This will affect models which use feature_fraction or other features which use randomity\r\n\r\nThis PR updates LightGBM to not set seed from .NET unless it has been explicitly set.\r\n\r\nLinks:\r\nhttps://lightgbm.readthedocs.io/en/latest/Parameters.html#seed\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6068","RelatedDescription":"Closed or merged PR \"Use LightGBM default seed if not set explicitly\" (#6068)"},{"Id":"1123689202","IsPullRequest":true,"CreatedAt":"2022-02-05T06:29:51","Actor":"michaelgsharp","Number":"6073","RawContent":null,"Title":"Testing Hardlinking for space saving","State":"closed","Body":"Having space issues again. This PR is testing using hardlinks and clearing of the non-windows nuget binaries (already been done for the OS other than windows.)","Url":"https://github.com/dotnet/machinelearning/pull/6073","RelatedDescription":"Closed or merged PR \"Testing Hardlinking for space saving\" (#6073)"},{"Id":"1123590534","IsPullRequest":true,"CreatedAt":"2022-02-04T01:00:55","Actor":"michaelgsharp","Number":"6070","RawContent":null,"Title":"Disabling flaky tests on unix/arm systems for stability.","State":"closed","Body":"Disabling 3 more flaky System.Drawing tests on unix/arm systems.\r\n\r\nTracked in #6043","Url":"https://github.com/dotnet/machinelearning/pull/6070","RelatedDescription":"Closed or merged PR \"Disabling flaky tests on unix/arm systems for stability.\" (#6070)"},{"Id":"1123631051","IsPullRequest":false,"CreatedAt":"2022-02-03T22:46:51","Actor":"michaelgsharp","Number":"6072","RawContent":null,"Title":"Community Survey","State":"open","Body":"A couple years ago we surveyed you the members of the community in this repo to learn how we were doing as maintainers.\r\n\r\nIt's time to repeat the same survey. Whether you've been involved for years or you're relatively new please tell us about your experience participating and contributing to the project. It should only take a few minutes, and you can answer for up to 3 repos:\r\n\r\nhttps://www.surveymonkey.com/r/8QTQTGJ?Source=machinelearning","Url":"https://github.com/dotnet/machinelearning/issues/6072","RelatedDescription":"Open issue \"Community Survey\" (#6072)"},{"Id":"1118500174","IsPullRequest":true,"CreatedAt":"2022-02-01T15:00:29","Actor":"torronen","Number":"6064","RawContent":null,"Title":"LightGBM parameter changes to match Python implementation results","State":"closed","Body":"Suggested changes for LightGBM results through ML.NET similar as through Python:\r\n* keep LightGBM default seed if seed has not been set\r\n* add mapping from NumberOfIterations to num_iterations\r\n* add NumberOfIterations to parameters array for LightGBM\r\n* change sigmoid default value to match LightGBM\r\n* Default Evaluation Metric to None per LightGBM default\r\n\r\nProject that can be used for comparison between LightGBM in Python and Microsoft.ML.LightGBM and also compare ModelBuilder with python-FLAML: https://github.com/torronen/lightgbm-comparison\r\n\r\nRationale: https://github.com/microsoft/FLAML/discussions/409#discussioncomment-2058431\r\nReasons for changes explained in the issues:\r\n* fixes #6063 \r\n* fixes #6062 \r\n* fixes #654\r\n\r\nI suggest the results should be equal through Python and ML.NET so that developers can discuss and share best practices about hyperparameters. Also, it enables to use tuning from Python. \r\n\r\nSigmoid value change has been propose before but was not implemented.\r\nIt may need more consideration:  https://github.com/dotnet/machinelearning/pull/667\r\n\r\nPR is for comments and discussions for now. Results are not yet equal through ML.Net and Python.","Url":"https://github.com/dotnet/machinelearning/pull/6064","RelatedDescription":"Closed or merged PR \"LightGBM parameter changes to match Python implementation results\" (#6064)"},{"Id":"1120335215","IsPullRequest":false,"CreatedAt":"2022-02-01T07:50:55","Actor":"DeveloperNo579212","Number":"6067","RawContent":null,"Title":"Validation of Onnx input using ApplyOnnxModel","State":"open","Body":" - Windows 10 build (19044.1469)\r\nLatest of these as per (2022-02-01):\r\n - Microsoft.ML.NET Version: 1.7\r\n - Microsoft.ML.ImageAnalytics: 1.7.0\r\n - Microsoft.OnnxRuntime: 1.10\r\n - Microsoft.OnnxRuntime.GPU: 1.10\r\n - Microsoft.OnnxTransformer: 1.7.0\r\n - .NET Framework 4.8\r\n\r\nI created a very simple ImagePrediction model that I converted from savedmodel to onnx using tf2onnx.\r\nI have verified the conversion is ok using python.\r\n\r\nUsing the onnx file in ML.Net does not verify ok but does fail in classification,\r\nI get a high prediction score in the image itself but it assigned to wrong column (class).\r\n\r\nThe image is normalized between (1 ,-1) in python and in my ML.net implementation. Removing\r\nthe normalization in python gives same sort of problem as shows with normalization in ML.net.\r\nImageformat in use is PNG.\r\n\r\nModel is very simple with two classes of 10 images each and gives 100% hit using a training image\r\nin validation when training, the conversion from savedmodel to onnx is confirmed ok and predictable\r\neven if not as good as in training.  \r\n\r\nI need some reference implementation with image classification in ML.net with Onnx model as input as\r\nmy last step in verification.\r\n\r\nI used a slightly modifed version of this (section Verifying a Converted Model) adding normalization of input image:\r\nhttps://onnxruntime.ai/docs/tutorials/tf-get-started.html\r\n\r\nI want to verify my onnx model in ML.net to be identical as in the output from python as above.\r\n\r\nI used opset 11 as noted in (https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.onnx.onnxscoringestimator?view=ml-dotnet)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6067","RelatedDescription":"Open issue \"Validation of Onnx input using ApplyOnnxModel\" (#6067)"},{"Id":"1119986759","IsPullRequest":false,"CreatedAt":"2022-01-31T22:09:43","Actor":"jannickj","Number":"6066","RawContent":null,"Title":"Add support for multi-dimensional arrays for model input/output.","State":"open","Body":"I have a fully working tensorflow model and I litterally just need the last step of having C# run my model, but I am stuck on a null exception.\r\n\r\nI have a very simple setup, and I've locked down both sequence length and  batch size, however no matter what i do it gives me the exception:\r\n\r\n```\r\n  at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.<>c__DisplayClass8_0`1.<CreateDirectVBufferSetter>b__0(TRow row)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.FillValues(TRow row)\r\n   at Microsoft.ML.Data.TypedCursorable`1.RowImplementation.FillValues(TRow row)\r\n   at Microsoft.ML.PredictionEngineBase`2.FillValues(TDst prediction)\r\n   at Microsoft.ML.PredictionEngine`2.Predict(TSrc example, TDst& prediction)\r\n   at MyProject.Model.Run() in \r\n```\r\n\r\nI have tested that the model works in python and I've made 100% sure the dimensions fit exactly.\r\n\r\n```csharp\r\npublic record Features\r\n\t{\r\n\r\n\t\t[ColumnName(\"x_1\")]\r\n\t\t[VectorType(1, 41, 3)]\r\n\t\tpublic int[,,] UnigramWindows { get; set; } = null!;\r\n\t\t[ColumnName(\"x_2\")]\r\n\t\t[VectorType(1, 41, 3)]\r\n\t\tpublic int[,,] BigramWindows { get; set; } = null!;\r\n\t\t[ColumnName(\"x_3\")]\r\n\t\t[VectorType(1, 41, 3)]\r\n\t\tpublic int[,,] CharTypeWindows { get; set; } = null!;\r\n\t\t[ColumnName(\"x_4\")]\r\n\t\t[VectorType(1, 41, 41)]\r\n\t\tpublic int[,,] WordsStartingAt { get; set; } = null!;\r\n\t\t[ColumnName(\"x_5\")]\r\n\t\t[VectorType(1, 41, 41)]\r\n\t\tpublic int[,,] WordsEndingAt { get; set; } = null!;\r\n\t\t[ColumnName(\"x\")]\r\n\t\t[VectorType(1)]\r\n\t\tpublic int[] SeqLen { get; set; } = null!;\r\n\t}\r\n\r\nprivate record Output\r\n{\r\n\t[VectorType(1, 41, 6)]\r\n\tpublic float[,,] Identity;\r\n}\r\n\r\n\r\nprivate static ITransformer LoadModel(\r\n\tMLContext mlContext,\r\n\tstring modelPath)\r\n{\r\n\tvar tfModel = mlContext.Model\r\n\t\t.LoadTensorFlowModel(modelPath);\r\n\tvar schema = tfModel.GetModelSchema();\r\n\tvar revSchema = schema.Reverse().ToArray();\r\n\tvar pipeline =\r\n\t\ttfModel\r\n\t\t.ScoreTensorFlowModel(\r\n\t\t\t\toutputColumnNames: new[] { \"Identity\" },\r\n\t\t\t\tinputColumnNames:\r\n\t\t\t \tnew[] {\r\n\t\t\t \t\t\"x\",\r\n\t\t\t \t\t\"x_1\",\r\n\t\t\t \t\t\"x_2\",\r\n\t\t\t \t\t\"x_3\",\r\n\t\t\t \t\t\"x_4\",\r\n\t\t\t \t\t\"x_5\",\r\n\t\t\t \t},\r\n\t\t\t\taddBatchDimensionInput: false);\r\n\r\n\r\n\r\n\tvar dataView = mlContext.Data.LoadFromEnumerable(Enumerable.Empty<Features>());\r\n\tITransformer mlModel = pipeline.Fit(dataView);\r\n\r\n\treturn mlModel;\r\n}\r\n\r\npublic static run() \r\n{\r\n        var model = LoadModel(mlContext, \"model.pb\");\r\n\tvar predictionEngine = mlContext\r\n\t\t.Model\r\n\t\t.CreatePredictionEngine<Features, Output>(model);\r\n\r\n        var res = predictionEngine.Predict(features);\r\n\r\n\tConsole.WriteLine(System.Text.Json.JsonSerializer.Serialize(res));\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6066","RelatedDescription":"Open issue \"Add support for multi-dimensional arrays for model input/output.\" (#6066)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-02-20T03:30:23.62537Z","RunDurationInMilliseconds":532}