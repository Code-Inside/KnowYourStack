{"Data":{"GitHub":{"Issues":[{"Id":"771751039","IsPullRequest":false,"CreatedAt":"2020-12-21T00:17:26","Actor":"dcostea","Number":"5564","RawContent":null,"Title":"Microsoft.ML.Data attributes are not supported by C# 9 positional records","State":"open","Body":"### System information\r\n\r\n- Windows 10:\r\n- .NET 5.0.1: \r\n\r\n### Issue\r\n\r\n- I have replaced class with record inside an input data model class.\r\n- Positional records from C# 9 doesn't not support Microsoft.ML.Data attributes like: ColumnNameAttribute, LoadColumnAttribute, VectorTypeAttribute.\r\n- I expect that all Microsoft.ML.Data attributes to be supported by records.\r\n\r\n```record Product([VectorType(2)] string Brand, string Model, decimal Price);```\r\n\r\n![attribute](https://user-images.githubusercontent.com/15055082/102728066-f2bb1880-4329-11eb-9f91-dc9531fd7f49.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5564","RelatedDescription":"Open issue \"Microsoft.ML.Data attributes are not supported by C# 9 positional records\" (#5564)"},{"Id":"771508773","IsPullRequest":false,"CreatedAt":"2020-12-20T04:14:38","Actor":"tasmektep","Number":"5563","RawContent":null,"Title":"TrainTestSplit is not working properly, when the column name provided","State":"open","Body":"I think there is a issue with \"TrainTestSplit\" function.\r\n\r\nWhen I tried to split data that consist of 500 samples which have equal number of sample from each class, it returns the testset as 0 number of rows. However when I try to split it without \"label\" with 0.1 ratio, it returns as 49 to testset rows and 451 to trainset rows.\r\n\r\nIs there a way to solve this problem?\r\n\r\nI'm using final packages.","Url":"https://github.com/dotnet/machinelearning/issues/5563","RelatedDescription":"Open issue \"TrainTestSplit is not working properly, when the column name provided\" (#5563)"},{"Id":"771259310","IsPullRequest":false,"CreatedAt":"2020-12-19T00:39:21","Actor":"Jrjuniorjr","Number":"5562","RawContent":null,"Title":"Question about TFIDF","State":"open","Body":"Hi to all, I'm new on ML.NET and I'm trying to FeaturizeText with TF-IDF.\r\nIn the Jupyter Notebook and in .NET Interactive, this code gets an error:\r\n```\r\n\r\n`\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing System;\r\nusing Microsoft.ML.Transforms.Text;\r\nusing System.Collections.Generic;\r\n\r\nnamespace SentimentAnalysis\r\n{\r\n    public class Input\r\n    {\r\n        [LoadColumn(0)]\r\n        public string Text { get; set; }\r\n        [LoadColumn(1)]\r\n        public int Rating { get; set; }\r\n    }\r\n    public class Output\r\n    {\r\n        public float[] Features { get; set; }\r\n    }\r\n    class Program\r\n    {\r\n        public static TextFeaturizingEstimator.Options GetOptions()\r\n        {\r\n            var vectorizedTextOptions = new TextFeaturizingEstimator.Options()\r\n            {\r\n                KeepDiacritics = false,\r\n                KeepPunctuations = false,\r\n                KeepNumbers = true,\r\n                CaseMode = TextNormalizingEstimator.CaseMode.Lower,\r\n                StopWordsRemoverOptions = new StopWordsRemovingEstimator.Options()\r\n                {\r\n                    Language = TextFeaturizingEstimator.Language.English\r\n                },\r\n\r\n                // ngram options\r\n                WordFeatureExtractor = new WordBagEstimator.Options()\r\n                {\r\n                    NgramLength = 1,\r\n                    UseAllLengths = false, // Produce both unigrams and bigrams\r\n                    Weighting = NgramExtractingEstimator.WeightingCriteria.TfIdf, // TF-IDF\r\n                },\r\n\r\n                // chargram options\r\n                CharFeatureExtractor = null\r\n            };\r\n            return vectorizedTextOptions;\r\n\r\n        }\r\n        static void Main(string[] args)\r\n        {\r\n            var context = new MLContext();\r\n            var list = new List<Input>()\r\n            {\r\n                new Input()\r\n                {\r\n                    Text = \"This is machine learning example\", Rating = 4\r\n                },\r\n                new Input()\r\n                {\r\n                    Text = \"I like .NET\", Rating = 5\r\n                }\r\n            };\r\n            var samples = context.Data.LoadFromEnumerable<Input>(list);\r\n            var options = GetOptions();\r\n            var transformFitted = context.Transforms.Text.FeaturizeText(\r\n                    \"Features\",\r\n                    options,\r\n                    \"Text\"\r\n                ).Fit(samples);\r\n\r\n            var tfIdfTransformed = transformFitted.Transform(samples);\r\n\r\n            var predictionEngine = context.Model.CreatePredictionEngine<Input, Output>(transformFitted);\r\n            Output prediction = null;\r\n\r\n            VBuffer<ReadOnlyMemory<char>> slotNames = default;\r\n            tfIdfTransformed.Schema[\"Features\"].GetSlotNames(ref slotNames);\r\n\r\n            var tfIdfColumn = tfIdfTransformed.GetColumn<VBuffer<float>>(tfIdfTransformed.Schema[\"Features\"]);\r\n            var slots = slotNames.GetValues();\r\n\r\n            Console.Write(\"NGrams: \");\r\n            foreach (var featureRow in tfIdfColumn)\r\n            {\r\n                foreach (var item in featureRow.Items())\r\n                {\r\n                    Console.Write($\"{slots[item.Key]}  \");\r\n                }\r\n                Console.WriteLine();\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n```\r\n\r\nAnd I do var slot = slotNames.GetValues() what I'm getting is:\r\n\r\nError: (3.1): error CS8345: The field or a self-implemented property cannot be of type 'ReadOnlySpan <ReadOnlyMemory <char>>', unless it is an instance member of a reference struct.\r\n\r\nAnd in Visual Studio 2019, it works well, but when I try to loop over the columns:\r\n```\r\n\r\n`\r\n       Console.Write(\"NGrams: \");\r\n        foreach (var featureRow in tfIdfColumn)\r\n        {\r\n            foreach (var item in featureRow.Items())\r\n            {\r\n                Console.Write($\"{slots[item.Key]}  \");\r\n            }\r\n            Console.WriteLine();\r\n        }\r\n`\r\n```\r\n\r\nIt repeats some words.\r\n\r\nFor example: If I get two input: \"This is a test\", \"I like dotnet\", what I got print is:\r\nThis is a test\r\ntest I like dotnet\r\n\r\nIt is just an example.\r\n\r\nAnother question is how can I get do something like this in ML.NET:\r\n\r\nThis code is in python:\r\n`\r\n\r\n```\r\ndocs = []\r\nfor index, row in df_balenceado.iterrows():\r\n    docs.append(row[\"CleanReview-NoStemming\"])\r\n\r\ntfidf_vectorizer=TfidfVectorizer()\r\nfitted_vectorizer=tfidf_vectorizer.fit(docs)\r\ntfidf_vectorizer_vectors=fitted_vectorizer.transform(docs)\r\nfeature_names = tfidf_vectorizer.get_feature_names()\r\ndictonary = pd.DataFrame(tfidf_vectorizer_vectors.todense().tolist(), columns=feature_names)\r\ndictonary.head()\r\npickle.dump(fitted_vectorizer, open(\"tfidf_nostemming.pkl\", \"wb\"))\r\ndictonary = variance_threshold_selector(dictonary, 0.00005)\r\ndictonary.to_csv(\"DictionaryNoStemming.csv\", index=False)\r\n\r\n```\r\n\r\n`","Url":"https://github.com/dotnet/machinelearning/issues/5562","RelatedDescription":"Open issue \"Question about TFIDF\" (#5562)"},{"Id":"770284091","IsPullRequest":true,"CreatedAt":"2020-12-18T03:43:17","Actor":"antoniovs1029","Number":"5559","RawContent":null,"Title":"Add SymSgdNative reference to AutoML.Tests.csproj","State":"closed","Body":"This AutoML test was sometimes failing, because it was unable to load the SymSgdNative library, but in that test we were actually another exception to be caught by the automl runner:\r\nhttps://github.com/dotnet/machinelearning/pull/5528#issuecomment-739040897\r\n\r\nI was able to reproduce this locally by only using the SymbolicSgdLogisticRegression trainer on the Experiment settings of that test, and this was fixed by adding a missing Naitve reference to the test .csproj.","Url":"https://github.com/dotnet/machinelearning/pull/5559","RelatedDescription":"Closed or merged PR \"Add SymSgdNative reference to AutoML.Tests.csproj\" (#5559)"},{"Id":"770462769","IsPullRequest":true,"CreatedAt":"2020-12-18T03:42:31","Actor":"harishsk","Number":"5561","RawContent":null,"Title":"Renamed release notes file","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5561","RelatedDescription":"Closed or merged PR \"Renamed release notes file\" (#5561)"},{"Id":"770461057","IsPullRequest":true,"CreatedAt":"2020-12-18T03:42:01","Actor":"harishsk","Number":"5560","RawContent":null,"Title":"Updated version to 1.5.5 and 0.17.5","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5560","RelatedDescription":"Closed or merged PR \"Updated version to 1.5.5 and 0.17.5\" (#5560)"},{"Id":"767899362","IsPullRequest":false,"CreatedAt":"2020-12-17T23:45:20","Actor":"eerhardt","Number":"5552","RawContent":null,"Title":"Can't find symbols for Microsoft.ML.Core or Microsoft.ML.Data","State":"closed","Body":"I tried debugging an application today that uses the latest release of ML.NET – 1.5.3. I believe this is the first release since the upgrade to Arcade.\r\n\r\nHowever, I can’t load symbols for some of the assemblies. For the assemblies that are 1:1 with NuGet packages, those symbols appear to be loaded. But the core assemblies – ML.Core and ML.Data – don’t have their symbols loaded:\r\n\r\n![image](https://user-images.githubusercontent.com/8291187/102251329-45c84200-3eca-11eb-9855-6e66b958543a.png)\r\n\r\nWe need to:\r\n\r\n1. Upload the symbols for this release since it is an officially released version.\r\n2. Fix the build so it automatically publishes the symbols for all assemblies.\r\n\r\ncc @harishsk @michaelgsharp @mstfbl @frank-dong-ms ","Url":"https://github.com/dotnet/machinelearning/issues/5552","RelatedDescription":"Closed issue \"Can't find symbols for Microsoft.ML.Core or Microsoft.ML.Data\" (#5552)"},{"Id":"770241480","IsPullRequest":true,"CreatedAt":"2020-12-17T19:34:51","Actor":"harishsk","Number":"5558","RawContent":null,"Title":"Fixed version numbers in the right place","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5558","RelatedDescription":"Closed or merged PR \"Fixed version numbers in the right place\" (#5558)"},{"Id":"769730159","IsPullRequest":true,"CreatedAt":"2020-12-17T16:50:41","Actor":"harishsk","Number":"5557","RawContent":null,"Title":"Updated version to 1.5.4","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5557","RelatedDescription":"Closed or merged PR \"Updated version to 1.5.4\" (#5557)"},{"Id":"766500599","IsPullRequest":false,"CreatedAt":"2020-12-17T15:09:24","Actor":"gutosys","Number":"5551","RawContent":null,"Title":"When publish solution with ML.Net and Tensor Flow, Got error \" ---> System.DllNotFoundException: Unable to load DLL 'tensorflow' or one of its dependencies\"","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:  Windows Server\r\n- **.NET Version (eg., dotnet --info)**:  .Net Core 3.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nWhen publish, the application installed tensorflow.dll, Tensorflow.Keras.dll and TensorFlow.NET.dll, but this error persist.\r\n\r\nFor information the dll SciSharp.TensorFlow.Redist not installed.\r\n\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5551","RelatedDescription":"Closed issue \"When publish solution with ML.Net and Tensor Flow, Got error \" ---> System.DllNotFoundException: Unable to load DLL 'tensorflow' or one of its dependencies\"\" (#5551)"},{"Id":"769500071","IsPullRequest":true,"CreatedAt":"2020-12-17T08:07:54","Actor":"antoniovs1029","Number":"5556","RawContent":null,"Title":"Fix publishing symbols","State":"closed","Body":"This PR:\r\n- Fixes the issues with publishing symbols described in #5552 \r\n- Fixes the warnings we had on the publishing CI because no portable PDBs were found to convert them to Windows PDBs: this is because arcade already creates Windows PDBs so the ConvertPortablePdbsToWindowsPdbs can be set to false now.\r\n- Publish the .nupkgs and .snupkgs the CI generates to Azure Artifacts before publishing them to the feeds and symbol servers, in case we need to debug them in the future.\r\n- Adds the missing flags to the last step on our CI which tests `build -pack`\r\n\r\nBIG THANKS to @michaelgsharp for figuring out the key changes needed to correctly publish the symbols!\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5556","RelatedDescription":"Closed or merged PR \"Fix publishing symbols\" (#5556)"},{"Id":"769252149","IsPullRequest":true,"CreatedAt":"2020-12-16T21:48:43","Actor":"antoniovs1029","Number":"5555","RawContent":null,"Title":"continueOnError on Brew Workaround","State":"closed","Body":"The \"Brew workaround\" step has suddenly started failing on our nuget-producing pipelines.\r\n\r\nIt seems this is because this week they're updating the MacOS machines, and this is breaking the workaround:\r\nhttps://github.com/actions/virtual-environments/issues/2248\r\n\r\nIt seems that for the machines where the update is done, the workaround not only breaks, but is no longer necessary. But it's still necessary on the CI machines that aren't updated.\r\n\r\nOnce all the machines are updated, we'll be able to remove the Workaround step completely.\r\n\r\nNOTE: if the machine is updated, then the Brew Workaround step will fail, but the build will continue, and the nugets will be published. Still, since there was an error, the CI will show the error. We should simply ignore this. Once all of the machines are updated, we can remove the Brew Workaround step.\r\n\r\nNOTE2: As suggested by Mustafa, I've also added this to our PR's CI builds, which has just started to fail because of this. With the change on the PR they do show a Failure on the logs, but they pass on github, so they aren't blocking the PRs.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5555","RelatedDescription":"Closed or merged PR \"continueOnError on Brew Workaround\" (#5555)"},{"Id":"763027756","IsPullRequest":true,"CreatedAt":"2020-12-16T21:33:42","Actor":"antoniovs1029","Number":"5550","RawContent":null,"Title":"Update Stale docs","State":"closed","Body":"* Updated the MlNetMklDeps docs, on how to build that nuget. Most changes are mostly about formatting.\r\n* Updated the OnnxMl.md doc, on how to update the OnnxMl.cs file, with the latest information about the last time we needed to update that file.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5550","RelatedDescription":"Closed or merged PR \"Update Stale docs\" (#5550)"},{"Id":"768783069","IsPullRequest":true,"CreatedAt":"2020-12-16T18:51:44","Actor":"mstfbl","Number":"5554","RawContent":null,"Title":"Forward logs of Experiment's sub MLContexts to main MLContext","State":"closed","Body":"Fix Issue #5553 \r\n\r\nI've added the forwarding of logs generated in `Experiment` class's sub `MLContext`s to the main `MLContext` by sending their log messages to `Experiment`'s `_logger`. Also added unit test to verify.","Url":"https://github.com/dotnet/machinelearning/pull/5554","RelatedDescription":"Closed or merged PR \"Forward logs of Experiment's sub MLContexts to main MLContext\" (#5554)"},{"Id":"768032691","IsPullRequest":false,"CreatedAt":"2020-12-16T18:51:44","Actor":"LittleLittleCloud","Number":"5553","RawContent":null,"Title":"AutoML - Can't get training progress during image training","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: win10\r\n- **.NET Version (eg., dotnet --info)**: 3.1.4\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n-  I use AutoML API to launch an image classification training, and in order to get training progress, I attach a logger to the current context. However, no training progress shows after I attach to logger and start training.\r\n\r\n### What might happen\r\nAfter some investigation, I believe the error is caused by one of the latest changes we made on how a trial is launched. In this PR #5445, it creates a new context instead of reusing the current context when starting a trial at the beginning. So when I subscribe to the log channel when calling API, it is actually listening to the current context's channel where no trial is ongoing. However, since that new context where the trial is ongoing is not available externally, there's no way to have a peek at training progress right now.","Url":"https://github.com/dotnet/machinelearning/issues/5553","RelatedDescription":"Closed issue \"AutoML - Can't get training progress during image training\" (#5553)"},{"Id":"760712652","IsPullRequest":true,"CreatedAt":"2020-12-12T03:37:57","Actor":"harishsk","Number":"5543","RawContent":null,"Title":"Created release notes for v1.5.3","State":"closed","Body":"There is still a TODO for the PR for the new Onnx API. I will update the PR when that is ready. Until then, please review the rest.","Url":"https://github.com/dotnet/machinelearning/pull/5543","RelatedDescription":"Closed or merged PR \"Created release notes for v1.5.3\" (#5543)"},{"Id":"762228918","IsPullRequest":false,"CreatedAt":"2020-12-11T10:48:16","Actor":"mentorfloat","Number":"5549","RawContent":null,"Title":"Predictions of converted LightGbm ONNX model completely mismatched ML.Net equivalent","State":"open","Body":"### System information\r\n\r\n- **OS version**: 10.0.19041\r\n- **.NET SDKs**: 3.1.402, 5.0.100-preview.7.20366.6\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nConvert three trained ML.Net models (LightGbm, SdcaMaximumEntropy, LbfgsMaximumEntropy) to ONNX models with ConvertToOnnx and make predictions with 100 randomly selected data, using both the original ML.Net models and the converted ONNX models.\r\n\r\n- **What happened?**\r\nWhen making predictions with the converted LightGbm ONNX model, **none** of the predicted values match the predicted values made using the original ML.Net model. To test further, I repeated the pipeline with different trainers, SdcaMaximumEntropy and LbfgsMaximumEntropy. The converted ONNX models for these two returned predicted values that match the predictions made using their ML.Net equivalents.\r\n\r\n- **What did you expect?**\r\nLightGbm's converted ONNX model generate the same predictions as its ML.Net counterpart. Similar to how the other two trainers' did.\r\n\r\n- **Side notes:**\r\nInitially I couldn't get LightGbm to convert to ONNX, but that's resolved now. Closed Issue #5542 , but likely unrelated to the above.","Url":"https://github.com/dotnet/machinelearning/issues/5549","RelatedDescription":"Open issue \"Predictions of converted LightGbm ONNX model completely mismatched ML.Net equivalent\" (#5549)"},{"Id":"760161649","IsPullRequest":false,"CreatedAt":"2020-12-11T10:12:09","Actor":"mentorfloat","Number":"5542","RawContent":null,"Title":"ConvertToOnnx with LightGbm Model Throws KeyNotFoundException","State":"closed","Body":"### System information\r\n\r\n- **OS version**: 10.0.19041\r\n- **.NET SDKs**: 3.1.402, 5.0.100-preview.7.20366.6\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nAttempted to convert a trained ML.Net LightGbm model to ONNX model with ConvertToOnnx.\r\n\r\n- **What happened?**\r\n```\r\nException thrown: 'System.Collections.Generic.KeyNotFoundException' in System.Private.CoreLib.dll\r\nAn unhandled exception of type 'System.Collections.Generic.KeyNotFoundException' occurred in System.Private.CoreLib.dll\r\nThe given key 'Mates4_TextNormalizer' was not present in the dictionary.\r\n```\r\n\r\n- **What did you expect?**\r\nONNX model converted and saved to file without errors.\r\n\r\n### Source code\r\n\r\nModel was trained with LightGbm, evaluated and tested working before conversion is applied.\r\n\r\nTried two versions: 1. loading a saved model and apply conversion; 2. end-to-end (train, evaluate and apply conversion). Both threw the same exception.\r\n\r\nThere's nothing with 'TextNormalizer' anywhere during training but there is a string named 'Mates4' in the `ItemRating` class, which was featurized during training with `Transforms.Text.FeaturizeText`. This could be related.\r\n\r\n```cs\r\nMLContext mlContext = new MLContext();\r\n\r\nvar data = mlContext.Data.LoadFromTextFile<ItemRating>(path: TrainingDataLocation, hasHeader: true, separatorChar: ',');\r\n\r\nvar trainTestData = mlContext.Data.TrainTestSplit(data, testFraction: 0.1);\r\nvar trainingDataView = trainTestData.TrainSet;\r\n\r\ntrainingDataView = mlContext.Data.Cache(trainingDataView);\r\n\r\nITransformer trainedModel;\r\nusing (FileStream stream = new FileStream(ModelPath, FileMode.Open, FileAccess.Read, FileShare.Read))\r\n{\r\n    trainedModel = mlContext.Model.Load(stream, out var modelInputSchema);\r\n}\r\nusing (FileStream streamfile = File.Create(onnxModelPath))\r\n{\r\n    mlContext.Model.ConvertToOnnx(trainedModel, trainingDataView, streamfile);\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/5542","RelatedDescription":"Closed issue \"ConvertToOnnx with LightGbm Model Throws KeyNotFoundException\" (#5542)"},{"Id":"761642892","IsPullRequest":true,"CreatedAt":"2020-12-11T04:40:12","Actor":"frank-dong-ms","Number":"5547","RawContent":null,"Title":"Tensorflow fix","State":"closed","Body":"1. Fix tensorflow transformer bug introduced at #5468 for supporting primitive type as tensorflow model input. Deal with primitive type and vector type as input separately.\r\n2. Enhance test.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5547","RelatedDescription":"Closed or merged PR \"Tensorflow fix\" (#5547)"},{"Id":"761656552","IsPullRequest":true,"CreatedAt":"2020-12-11T00:20:57","Actor":"antoniovs1029","Number":"5548","RawContent":null,"Title":"Fixed AutoML CrossValSummaryRunner for TopKAccuracyForAllK","State":"closed","Body":"PR #5395 introduced a new TopKAccuracyForAllK array for the MulticlassClassificationMetrics. But there's a bug in how it was handled on AutoML CrossValidationSummaryRunner, because if the array is null (which is expected if topKPredictionCount isn't a valid number), then the GetAverageOfNonNaNScoresInNestedEnumerable() would throw an error.\r\n\r\nThis wasn't catched on our existing tests, because we didn't have a test that runs AutoML multiclass task with CrossValidationSummaryRunner. So I've also added a test for this.","Url":"https://github.com/dotnet/machinelearning/pull/5548","RelatedDescription":"Closed or merged PR \"Fixed AutoML CrossValSummaryRunner for TopKAccuracyForAllK\" (#5548)"},{"Id":"761520009","IsPullRequest":true,"CreatedAt":"2020-12-10T21:35:45","Actor":"LittleLittleCloud","Number":"5546","RawContent":null,"Title":"[CodeGenerator] Fix MLNet.CLI build error.","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n# What's the issue\r\nIn short, the issue is the projects generated from mlnet.cli can't be compiled through dotnet cli because it can't find the generated model. The error is in generated project, where in this line (consume.cs)\r\n```\r\npublic static string MLNetModelPath = Path.GetFullPath(\"MLModel.zip\");\r\n```\r\n`Path.GetFullPath` will return the cwd where user calls `dotnet build` instead of the cwd of assembly location. That's why generated project complains it can't find the model.\r\n\r\nThe fix is to replace the line with\r\n```\r\npublic static string MLNetModelPath = Path.Combine(System.AppContext.BaseDirectory, \"MLModel.zip\");\r\n```.\r\n\r\nSee [this](https://github.com/dotnet/machinelearning-modelbuilder/issues/1142) for detailed information\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5546","RelatedDescription":"Closed or merged PR \"[CodeGenerator] Fix MLNet.CLI build error.\" (#5546)"},{"Id":"760833760","IsPullRequest":true,"CreatedAt":"2020-12-10T06:24:36","Actor":"frank-dong-ms","Number":"5545","RawContent":null,"Title":"Add back missing test project from running on arcade","State":"closed","Body":"1. add back missing test projects from running on arcade\r\n2. Correct test result publish so we can view test results on build pipeline\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5545","RelatedDescription":"Closed or merged PR \"Add back missing test project from running on arcade\" (#5545)"},{"Id":"760773467","IsPullRequest":true,"CreatedAt":"2020-12-10T02:34:00","Actor":"michaelgsharp","Number":"5544","RawContent":null,"Title":"Changes to onnx export.","State":"closed","Body":"Removed more old pkg references.\r\n\r\nAdded new way to export onnx models without only certain outputs.\r\n\r\nNow pass in the list of active columns to ORT when it runs.","Url":"https://github.com/dotnet/machinelearning/pull/5544","RelatedDescription":"Closed or merged PR \"Changes to onnx export.\" (#5544)"},{"Id":"758947802","IsPullRequest":true,"CreatedAt":"2020-12-10T01:19:09","Actor":"antoniovs1029","Number":"5539","RawContent":null,"Title":"[Debug] Sdca exception","State":"closed","Body":"...\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5539","RelatedDescription":"Closed or merged PR \"[Debug] Sdca exception\" (#5539)"},{"Id":"758898484","IsPullRequest":true,"CreatedAt":"2020-12-09T00:35:57","Actor":"michaelgsharp","Number":"5537","RawContent":null,"Title":"Removed the rest of the old pkg references:","State":"closed","Body":"Removed the rest of the old pkg references from the ML.Net solution file.","Url":"https://github.com/dotnet/machinelearning/pull/5537","RelatedDescription":"Closed or merged PR \"Removed the rest of the old pkg references:\" (#5537)"},{"Id":"759037135","IsPullRequest":true,"CreatedAt":"2020-12-08T19:41:08","Actor":"frank-dong-ms","Number":"5541","RawContent":null,"Title":"Fix warnings from CI Build","State":"closed","Body":"Fix/suppress all warnings from CI build:\r\n1. Skip some dll copy at build stage on CI build, this copy is only necessary for official build\r\n2. Suppress NU5118 warning for all projects that generating nuget packages. mlnet has its own logo file and the warning is complaining about mlnet logo file and the default logo file shares same PackagePath, we can just ignore this warning.\r\n3. Suppress NU5127 and NU5128 for Microsoft.ML project. These warnings are complaining about missing some default folder structure or file from Microsoft.ML nuget package. Microsoft.ML package is built from several projects and these missing default folder and file are actually present but nuget seems not able to correctly see this condition so ignore these warnings.\r\n4. Remove unnecessary stage from CI pipeline.","Url":"https://github.com/dotnet/machinelearning/pull/5541","RelatedDescription":"Closed or merged PR \"Fix warnings from CI Build\" (#5541)"},{"Id":"758983328","IsPullRequest":true,"CreatedAt":"2020-12-08T02:40:55","Actor":"antoniovs1029","Number":"5540","RawContent":null,"Title":"Updated prerelease label","State":"closed","Body":"Forgot to add this on my PR #5538\r\n\r\nUsing \"preview\" as prerelease label instead of \"dev\" matches what is found on arcade's docs:\r\nhttps://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/Versioning.md#package-version\r\n\r\nSince the \"dev\" label is meant to signify builds made locally on the dev's machine, whereas \"preview\" is for the nightly nugets.","Url":"https://github.com/dotnet/machinelearning/pull/5540","RelatedDescription":"Closed or merged PR \"Updated prerelease label\" (#5540)"},{"Id":"758930461","IsPullRequest":true,"CreatedAt":"2020-12-08T00:55:54","Actor":"antoniovs1029","Number":"5538","RawContent":null,"Title":"Fix publishing problems","State":"closed","Body":"This PR fixes 3 problems:\r\n\r\n1. Removed our dependency to BuildTools by using the NugetCommand Azure Task.\r\n2. We should publish a nuget named \"SampleUtils\", but we were publishing it with the name \"SamplesUtils\"\r\n3. The naming conventions of our published nugets didn't match the ones described on arcade's docs: [Versioning.md](https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/Versioning.md#package-version). I've also added the option so that when queuing the publishing build, we can pass the VERSIONKIND variable with value \"release\", so that it produces the nugets with arcade's conventions for \"Release official build\" nugets (as opposed to the \"Daily official build\" naming convention that's going to be used now by our CI that publishes nightly nugets).\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5538","RelatedDescription":"Closed or merged PR \"Fix publishing problems\" (#5538)"},{"Id":"758816752","IsPullRequest":true,"CreatedAt":"2020-12-07T23:18:38","Actor":"harishsk","Number":"5535","RawContent":null,"Title":"Removed CODEOWNERS file to unify review process","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5535","RelatedDescription":"Closed or merged PR \"Removed CODEOWNERS file to unify review process\" (#5535)"},{"Id":"758853916","IsPullRequest":false,"CreatedAt":"2020-12-07T21:15:23","Actor":"Yuzabotov","Number":"5536","RawContent":null,"Title":"Small bug in AutoMl \"Value prediction\" scenario input","State":"open","Body":"### System information\r\n\r\n(should be irrelevant)\r\n- Windows 10, build 2004\r\n- .net core 3.1\r\n\r\n### Issue\r\n\r\nAutoMl has a scenario for regression, based on values from a txt or csv file. (named \"Value prediction\")\r\nIf you give it a text file, with a bunch of columns at tell it to predict one of them, there is a bug with the input.\r\nIf the column you are trying to predict, is only 1 or 0,\r\nit will think that the column represents strings, while the column actually represents floats.\r\nIt then gives an issue that only shorts (floats) can be in the column\r\n\r\nfor example given the file:\r\n\r\n0.1,  0.3,   1\r\n0.6,  0.23, 1\r\n0.8,  0.3,   0\r\n\r\nand told to predict column 3, it will fail since it thinks the column holds strings instead of numbers\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5536","RelatedDescription":"Open issue \"Small bug in AutoMl \"Value prediction\" scenario input\" (#5536)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-12-21T05:30:34.2679241Z","RunDurationInMilliseconds":633}