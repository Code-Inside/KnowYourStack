{"Data":{"GitHub":{"Issues":[{"Id":"625282035","IsPullRequest":true,"CreatedAt":"2020-05-27T00:21:45","Actor":"harishsk","Number":"5167","RawContent":null,"Title":"Updated version to v1.5.1","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5167","RelatedDescription":"Open PR \"Updated version to v1.5.1\" (#5167)"},{"Id":"625222103","IsPullRequest":true,"CreatedAt":"2020-05-26T21:50:32","Actor":"michaelgsharp","Number":"5166","RawContent":null,"Title":"Robust Scaler now added to the Normalizer catalog","State":"open","Body":"One of the featurizers that was added in the past was the RobustScalerFeaturizer. After talking with the ML.Net team, it was decided that since this is just a normalizer it makes more sense to have it be part of the existing collection of normalizers that ML.Net already has. This PR adds that functionality. It is the equivalent of the [RobustScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.RobustScaler.html) in pandas. Once this PR goes in, we can remove the original transformer that was added.","Url":"https://github.com/dotnet/machinelearning/pull/5166","RelatedDescription":"Open PR \"Robust Scaler now added to the Normalizer catalog\" (#5166)"},{"Id":"625170781","IsPullRequest":false,"CreatedAt":"2020-05-26T20:16:53","Actor":"mstfbl","Number":"5165","RawContent":null,"Title":"Tracking ML .NET behavior on AMD builds","State":"open","Body":"This issue is for tracking ML .NET behavior on AMD builds.\r\n\r\nCurrently we are testing our builds on Intel CPUs and NVIDIA GPUs (please correct me if I'm wrong!) However, as Issue #4703 indicates, we might be obtaining different results on other builds such as:\r\n\r\n- AMD CPU/ No GPU\r\n    - Currently testing through [D4as_v4 ](https://docs.microsoft.com/en-us/azure/virtual-machines/dav4-dasv4-series#dasv4-series)VM on Azure\r\n- AMD CPU/ NVIDIA GPU (build of Issue #4703's author)\r\n- AMD CPU/AMD GPU\r\n\r\nI don't fully understand why exactly we obtain different behavior in these builds. However it is important to track these, and perhaps do regular CI test builds on these possibilities. ","Url":"https://github.com/dotnet/machinelearning/issues/5165","RelatedDescription":"Open issue \"Tracking ML .NET behavior on AMD builds\" (#5165)"},{"Id":"623665093","IsPullRequest":false,"CreatedAt":"2020-05-26T18:55:51","Actor":"shywa","Number":"5155","RawContent":null,"Title":"Application crashes inside Docker containing when using .Fit()","State":"closed","Body":"When creating a model for a recommender system that uses MatrixFactorization, the Docker Container crashes on an Ubuntu server without further notice.\r\n\r\nThe only note in the kernel log is\r\n`kernel: [12922.080806] traps: dotnet[30957] trap invalid opcode ip:7f07d81b5efc sp:7ffdc5965110 error:0 in libMatrixFactorizationNative.so[7f07d81a5000+2a000]`\r\n\r\nIn the local version the recommender system and the training of the model are working.\r\n\r\n### System information\r\n\r\n- **OS version/distro**:\r\nUbuntu 18.04.4 LTS (GNU/Linux 4.15.0-101-generic x86_64)\r\n- **.NET Version (eg., dotnet --info)**: \r\nHost (useful for support):\r\n  Version: 3.1.4\r\n  Commit:  0c2e69caa6\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nStarting training of a new model using matrix factorization\r\n- **What happened?**\r\nThe application and the Docker Container crash without further message or exception.\r\n- **What did you expect?**\r\nTraining of a new model or at least an exception\r\n\r\n### Source code / logs\r\n\r\n#### Implementation:\r\n```\r\nLog.Information(\"Extracting train data...\");\r\nvar trainingData = GetDataView(trainData);\r\n\r\nvar options = new MatrixFactorizationTrainer.Options\r\n{\r\n    MatrixColumnIndexColumnName = UserIdEncoding,\r\n    MatrixRowIndexColumnName = MusicIdEncoding,\r\n    LabelColumnName = \"Label\",\r\n    NumberOfIterations = 20,\r\n    ApproximationRank = 100,\r\n    //Quiet = false\r\n};\r\nLog.Information(\"Setting Matrix Factorization\");\r\nvar trainingPipeline = trainingData.Transformer.Append(\r\n    MLContext.Recommendation().Trainers.MatrixFactorization(options));\r\n\r\nLog.Information(\"Starting training...\");\r\nITransformer trainedModel = trainingPipeline.Fit(trainingData.DataView);\r\n\r\nLog.Information(\"Saving model...\");\r\nMLContext.Model.Save(trainedModel, trainingData.DataView.Schema, ModelPath);\r\n\r\nLog.Information(\"Extracting test data...\"); ;\r\nvar testingData = GetDataView(testData);\r\n\r\nLog.Information(\"Starting model testing...\");\r\nvar testingTransform = trainedModel.Transform(testingData.DataView);\r\n\r\nLog.Information(\"Evaluating model\");\r\nreturn MLContext.Recommendation().Evaluate(testingTransform);\r\n```\r\n\r\n#### Container Logs:\r\n\r\n```\r\n[13:45:25 Information]\r\nPreparing prediction Model\r\n\r\n[13:45:25 Information]\r\nStarting Model Training...\r\n\r\n[13:45:25 Information]\r\nExtracting train data...\r\n\r\n[13:45:25 Information]\r\nSetting Matrix Factorization\r\n\r\n[13:45:25 Information]\r\nStarting training...\r\n\r\nWarning: insufficient blocks may slow down the trainingprocess (4*nr_threads^2+1 blocks is suggested)\r\nWarning: insufficient blocks may slow down the trainingprocess (4*nr_threads^2+1 blocks is suggested)\r\n--> Application crash\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5155","RelatedDescription":"Closed issue \"Application crashes inside Docker containing when using .Fit()\" (#5155)"},{"Id":"622845782","IsPullRequest":true,"CreatedAt":"2020-05-26T17:53:02","Actor":"harishsk","Number":"5151","RawContent":null,"Title":"Added release notes for v1.5 release and updated version info","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5151","RelatedDescription":"Closed or merged PR \"Added release notes for v1.5 release and updated version info\" (#5151)"},{"Id":"623943896","IsPullRequest":true,"CreatedAt":"2020-05-26T17:51:47","Actor":"harishsk","Number":"5160","RawContent":null,"Title":"Fixed onnx export for key types other than uint","State":"closed","Body":"In PR #5152 @yaeldekel modified the test for onnx export for key types and disabled the test for types other than uint because of a bug in onnx export for those other types. This PR takes the test from @yaeldekel's PR and adds the fix for the onnx export bug.  ","Url":"https://github.com/dotnet/machinelearning/pull/5160","RelatedDescription":"Closed or merged PR \"Fixed onnx export for key types other than uint\" (#5160)"},{"Id":"624937784","IsPullRequest":false,"CreatedAt":"2020-05-26T16:29:28","Actor":"thibaultfalque","Number":"5164","RawContent":null,"Title":"How RMSE is calculated ? ","State":"closed","Body":"### System information\r\n\r\nSDK .NET Core (reflétant tous les global.json) :\r\n Version:   3.1.300\r\n Commit:    b2475c1295\r\n\r\nEnvironnement d'exécution :\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.1.300/\r\n\r\nHost (useful for support):\r\n  Version: 3.1.4\r\n  Commit:  0090613580\r\n\r\n.NET Core SDKs installed:\r\n  3.1.300 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nI wanted to calculate the RMSE of a FastTree model. \r\n\r\nI created a FastTree model. I trained him. I evaluated it on a test dataset.\r\n\r\nI displayed the result using the `Evaluate()` function.\r\n\r\n```csharp\r\npublic static void TrainTest(....){\r\n..... // train and test method\r\nvar metrics = mlContext.Regression.Evaluate(predictions, \"Label\", \"Score\");\r\nDumpMetrics(name, metrics);\r\n}\r\n\r\npublic static void DumpMetrics(string name, RegressionMetrics metrics)\r\n        {\r\n            Console.WriteLine();\r\n            Console.WriteLine($\"*************************************************\");\r\n            Console.WriteLine($\"*       Model quality metrics evaluation         \");\r\n            Console.WriteLine($\"*       \" + name);\r\n            Console.WriteLine($\"*------------------------------------------------\");\r\n            Console.WriteLine($\"*       R2 Score:      {metrics.RSquared:0.###}\");\r\n            Console.WriteLine($\"*       RMS loss:      {metrics.RootMeanSquaredError:#.###}\");\r\n            Console.WriteLine($\"*       MAE loss:      {metrics.MeanAbsoluteError:#.###}\");\r\n            Console.WriteLine($\"*************************************************\");\r\n        }\r\n```\r\n\r\n- **What happened?**\r\n\r\n```bash \r\n*************************************************\r\n*       Model quality metrics evaluation         \r\n*       \r\n*------------------------------------------------\r\n*       R2 Score:      0,882\r\n*       RMS loss:      30,57\r\n*       MAE loss:      20,03\r\n*************************************************\r\n```\r\n\r\nSo the RMSE is: `30,57`.\r\n\r\n- **What did you expect?**\r\n\r\nI saved the output of the model to a CSV file.\r\n\r\nI used the `mean_squared_error` function from the Python scikit-learn library and got a completely different value for RMSE. \r\n\r\n```python\r\nimport pandas as pd\r\nimport math\r\ndf =pd.read_csv('test.csv',decimal=',',sep=';')\r\nprint(math.sqrt(mean_squared_error(df['label'],df['prediction'])))\r\n```\r\nThe result is: \r\n\r\n```bash \r\n125.30721032995426\r\n```\r\n\r\n```python\r\ndef rmse(predictions, targets):\r\n    return np.sqrt(((predictions - targets) ** 2).mean())\r\nrmse(df['prediction'].values,df['label'].values)\r\n```\r\n\r\nThe result is: \r\n```bash\r\n125.30721032995426\r\n```\r\n\r\nSo my questions are: does the value found in the object returned by the `Evaluate` function apply the following formula between  `target` and `prediction`? If yes, why the results are different ? \r\n\r\n![RMSE](http://www.sciweavers.org/tex2img.php?eq=%5Csqrt%7B%28%5Cfrac%7B1%7D%7Bn%7D%29%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%28y_%7Bi%7D%20-%20x_%7Bi%7D%29%5E%7B2%7D%7D&bc=White&fc=Black&im=jpg&fs=12&ff=arev&edit=0)\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5164","RelatedDescription":"Closed issue \"How RMSE is calculated ? \" (#5164)"},{"Id":"623380398","IsPullRequest":true,"CreatedAt":"2020-05-26T05:49:42","Actor":"harishsk","Number":"5153","RawContent":null,"Title":"Updated doc comments and renamed public types","State":"closed","Body":"@gvashishtha Left a few doc comments on the earlier anomaly and time series PRs. I am addressing them here. The comments I could not address, I have copied them here. \r\nPlease review the changes and help me with the questions. \r\n\r\nSince this is part of the public API, I have also taken the liberty to rename the following types and names:\r\n- Name `AggType` to `AggregateType`\r\n- Name `AggSymbol` to `AggregateSymbol`\r\n- Type `Point` to `TimeSeriesPoint`\r\n\r\nPlease review whether these renames are appropriate. ","Url":"https://github.com/dotnet/machinelearning/pull/5153","RelatedDescription":"Closed or merged PR \"Updated doc comments and renamed public types\" (#5153)"},{"Id":"623056332","IsPullRequest":true,"CreatedAt":"2020-05-26T04:20:48","Actor":"yaeldekel","Number":"5152","RawContent":null,"Title":"Change back previous version hashing of 8 byte types","State":"closed","Body":"In PR #5104 he hashing function of 8 byte numeric types was changed, but there still needs to be an unchanged implementation for old version models.\r\n\r\nIn addition, found a bug in ONNX conversion of hashing of keys that have underlying type different than uint.","Url":"https://github.com/dotnet/machinelearning/pull/5152","RelatedDescription":"Closed or merged PR \"Change back previous version hashing of 8 byte types\" (#5152)"},{"Id":"624304798","IsPullRequest":true,"CreatedAt":"2020-05-25T13:34:58","Actor":"ptelman","Number":"5163","RawContent":null,"Title":"Auto.ML: Fix issue when parsing float string fails on pl-PL culture set using Regression Experiment","State":"open","Body":"Float parsing fails when culture = `pl-PL` despite the fact that it does not need to parse anything here.\r\nVariable `pset` is in fact `IParameterValue<float>` - it has `float Value` property with correct `float` type which should be used.","Url":"https://github.com/dotnet/machinelearning/pull/5163","RelatedDescription":"Open PR \"Auto.ML: Fix issue when parsing float string fails on pl-PL culture set using Regression Experiment\" (#5163)"},{"Id":"624303051","IsPullRequest":false,"CreatedAt":"2020-05-25T13:31:59","Actor":"ptelman","Number":"5162","RawContent":null,"Title":"Auto.ML Regression Experiment throwing Exception when culture is pl-PL","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 3.1.300-preview-015135\r\n- **Auto.ML Version**: v0.17.0-preview2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nAutoML experiment using Boston houses dataset, RegressionExperiment and pl-PL culture\r\n- **What happened?**\r\nException was thrown after ~3 minutes of experiment - `float.Parse` could not parse string.\r\n- **What did you expect?**\r\nException should not be thrown.\r\n\r\n### Source code / logs\r\n\r\nCall stack:\r\n\r\nUnhandled exception. System.OverflowException: Value was either too large or too small for a Decimal.\r\n   at System.Number.ThrowOverflowOrFormatException(ParsingStatus status, TypeCode type)\r\n   at System.Single.Parse(String s)\r\n   at Microsoft.ML.AutoML.SweeperProbabilityUtils.ParameterSetAsFloatArray(IValueGenerator[] sweepParams, ParameterSet ps, Boolean expandCategoricals)\r\n   at Microsoft.ML.AutoML.SmacSweeper.FitModel(IEnumerable`1 previousRuns)\r\n   at Microsoft.ML.AutoML.SmacSweeper.ProposeSweeps(Int32 maxSweeps, IEnumerable`1 previousRuns)\r\n   at Microsoft.ML.AutoML.PipelineSuggester.SampleHyperparameters(MLContext context, SuggestedTrainer trainer, IEnumerable`1 history, Boolean isMaximizingMetric)\r\n   at Microsoft.ML.AutoML.PipelineSuggester.GetNextInferredPipeline(MLContext context, IEnumerable`1 history, DatasetColumnInfo[] columns, TaskKind task, Boolean isMaximizingMetric, CacheBeforeTrainer cacheBeforeTrainer, IEnu\r\nmerable`1 trainerWhitelist)\r\n   at Microsoft.ML.AutoML.Experiment`2.Execute()\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.ExecuteCrossVal(IDataView[] trainDatasets, ColumnInformation columnInfo, IDataView[] validationDatasets, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.Execute(IDataView trainData, UInt32 numberOfCVFolds, ColumnInformation columnInformation, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n   at Playground.Program.AutoMl() in C:\\GIT\\ML\\dotnet\\AI\\Playground\\Program.cs:line 37\r\n   at Playground.Program.Main(String[] args) in C:\\GIT\\ML\\dotnet\\AI\\Playground\\Program.cs:line 19\r\n\r\nManual setting culture using `Thread.CurrentThread.CurrentCulture = new CultureInfo(\"en-US\");` solves issue.","Url":"https://github.com/dotnet/machinelearning/issues/5162","RelatedDescription":"Open issue \"Auto.ML Regression Experiment throwing Exception when culture is pl-PL\" (#5162)"},{"Id":"624250995","IsPullRequest":false,"CreatedAt":"2020-05-25T11:51:16","Actor":"akshayabnave","Number":"5161","RawContent":null,"Title":"Gradual Memory Increase","State":"open","Body":"I am not sure whether this is write channel but I need quick help\r\n\r\nWe have observed that gradual increase in memory of Host object of module Microsoft.ML.Data.\r\n\r\nWe have .net core worker service running as windows service.\r\n\r\nIt does prediction for 50 ML models in parallel.\r\n\r\n1. We are loading all models into memory then creating 50 threads for 50 models which would be running continuously and predicting values.\r\n\r\n2. For testing purpose we stop all threads ever 1hour and dispose it. Then calling GC.Collect().\r\n\r\n3. Also taking memory snapshot every 1 hour using VS performance profiler. We have observed that\r\ngradual increase in memory of Host object of module Microsoft.ML.Data. \r\n\r\n4. If we remove all loded models from memory and call GC.  the the memory consumed by Host object of module Microsoft.ML.Data gets freed.\r\n\r\nCould you please suggest anything if we want to resolve gradual increase of memory without removing models from memory.\r\n\r\n``` csharp\r\n\r\nprivate List<PredictionResult> ExecuteModel(ModelTransformer modelTransformer, IDataView dataView, DateTime requestDateTime) \r\n        {\r\n            List<PredictionResult> predictionResults = null;\r\n            try\r\n            {\r\n                if (modelTransformer.Transformer != null)\r\n                {\r\n                    string modelConfigId = modelTransformer.ModelConfigId;\r\n                    string actualValueColumnName = modelTransformer.TextLoaderOutputColumn;\r\n                    string tagNameForPredictedValue = modelTransformer.PredictedTagName;\r\n                    string tagNameForActualValue = modelTransformer.TargetVariable;\r\n\r\n                    predictionResults = new List<PredictionResult>();\r\n                    IDataView predictions = modelTransformer.Transformer.Transform(dataView);\r\n\r\n                    Logger.log.InfoFormat(\"[Request at {0} Model Id: {1}] prediction value extraction\", requestDateTime, modelConfigId);\r\n\r\n                    IEnumerable<float> listScore = predictions.GetColumn<float>(\"Score\");\r\n\r\n                    Logger.log.InfoFormat(\"[Request at {0} Model Id: {1}] score extraction completed\", requestDateTime, modelConfigId);\r\n\r\n                    IEnumerable<string> listTime = predictions.GetColumn<string>(preModelExecutionDetails.TextLoaderColumn[0].Name);\r\n\r\n                    Logger.log.InfoFormat(\"[Request at {0} Model Id: {1}] Time extraction completed\", requestDateTime, modelConfigId);\r\n\r\n                    IEnumerable<float> listActualValues = predictions.GetColumn<float>(actualValueColumnName);\r\n\r\n                    predictions = null;\r\n\r\n                    Logger.log.InfoFormat(\"[Request at {0} Model Id: {1}] actual value extraction completed\", requestDateTime, modelConfigId);\r\n\r\n                    predictionResults.AddRange(\r\n                        listTime.Zip(listScore, (time, score) => new PredictionResult\r\n                        {\r\n                            TagName = tagNameForPredictedValue,\r\n                            Timestamp = Convert.ToDateTime(time),\r\n                            Confidence = ConfigParameters.TagValueDefaultConfidence,\r\n                            Value = score.ToString(),\r\n                            ValueType = Models.ValueType.SCORE.ToString()\r\n                        }).ToList());\r\n\r\n                    predictionResults.AddRange(\r\n                        listTime.Zip(listActualValues, (time, actualVal) => new PredictionResult\r\n                        {\r\n                            TagName = tagNameForActualValue,\r\n                            Timestamp = Convert.ToDateTime(time),\r\n                            Confidence = ConfigParameters.TagValueDefaultConfidence,\r\n                            Value = actualVal.ToString(),\r\n                            ValueType = Models.ValueType.ACTUAL.ToString()\r\n                        }).ToList());\r\n                }\r\n            }\r\n            finally\r\n            {\r\n                modelTransformer = null;\r\n            }\r\n            return predictionResults;\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5161","RelatedDescription":"Open issue \"Gradual Memory Increase\" (#5161)"},{"Id":"623844319","IsPullRequest":false,"CreatedAt":"2020-05-25T08:14:22","Actor":"szymenn","Number":"5157","RawContent":null,"Title":"KeyNotFoundException after Bottleneck Computation phase finishes while training image classification model","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 3.1.1\r\n\r\n### Issue\r\n\r\n- While trying to train an image classification model I get \r\n**KeyNotFoundException: The given key '3711' was not present in the dictionary.** (key varies  every new time I start the app)\r\njust after the Bottleneck Computation phase using the validation dataset finishes.\r\nThe only solution I found was [this article](https://developers.de/2020/03/05/ml-net-fails-with-keynotfoundexception/)\r\nHowever I didn't find any cache folders, so I just deleted workspace files and although the app starts to train the model from scratch, I still get the same error.\r\n\r\n### Source code / logs\r\nMy Program.cs file: \r\n\r\n`\r\n \r\n\r\n\r\n\r\n     class Program\r\n           {\r\n           static void Main(string[] args)\r\n            {\r\n            var mlContext = new MLContext();\r\n            \r\n            var projectDirectory = Path.GetFullPath(Path.Combine(AppContext.BaseDirectory, \"../../../\"));\r\n            var trainRelativePath = Path.Combine(projectDirectory, \"Data\\\\train\");\r\n            var testRelativePath = Path.Combine(projectDirectory, \"Data\\\\test1\");\r\n            var workspaceRelativePath = Path.Combine(projectDirectory, \"Workspace\");\r\n\r\n            var trainImages = LoadImagesFromDirectory(trainRelativePath);\r\n            var testImages = LoadImagesFromDirectory(testRelativePath);\r\n\r\n            var trainData = mlContext.Data.LoadFromEnumerable(trainImages);\r\n            var testData = mlContext.Data.LoadFromEnumerable(testImages);\r\n\r\n            var shuffledData = mlContext.Data.ShuffleRows(trainData);            \r\n            \r\n            var preprocessingPipeline = mlContext.Transforms.Conversion.MapValueToKey(\r\n                    inputColumnName: \"Label\",\r\n                    outputColumnName: \"LabelAsKey\")\r\n                .Append(mlContext.Transforms.LoadRawImageBytes(\r\n                    outputColumnName: \"Image\",\r\n                    imageFolder: trainRelativePath,\r\n                    inputColumnName: \"ImagePath\"));\r\n\r\n            var preProcessedData = preprocessingPipeline\r\n                .Fit(shuffledData)\r\n                .Transform(shuffledData);\r\n            \r\n            var testProcessedData = preprocessingPipeline\r\n                .Fit(testData)\r\n                .Transform(testData);\r\n\r\n            var trainProcessedSet = mlContext.Data.TrainTestSplit(preProcessedData, testFraction: 0.999f);\r\n\r\n            var testSplit = mlContext.Data.TrainTestSplit(testProcessedData, testFraction: 0.999f);\r\n            var validationSet = testSplit.TrainSet;\r\n            var testSet = testSplit.TestSet;\r\n\r\n            var classifierOptions = new ImageClassificationTrainer.Options()\r\n            {\r\n                FeatureColumnName = \"Image\",\r\n                LabelColumnName = \"LabelAsKey\",\r\n                ValidationSet = validationSet,\r\n                Arch = ImageClassificationTrainer.Architecture.ResnetV2101,\r\n                MetricsCallback = Console.WriteLine,\r\n                TestOnTrainSet = false,\r\n                ReuseTrainSetBottleneckCachedValues = false,\r\n                ReuseValidationSetBottleneckCachedValues = false,\r\n                WorkspacePath=workspaceRelativePath,\r\n                Epoch = 100\r\n            };\r\n            \r\n            var trainingPipeline = mlContext.MulticlassClassification.Trainers.ImageClassification(classifierOptions)\r\n                .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\n\r\n            var trainedModel = trainingPipeline.Fit(trainProcessedSet.TrainSet);\r\n            mlContext.Model.Save(trainedModel, trainData.Schema,\"Model.zip\");\r\n            \r\n            Console.ReadLine();\r\n        }\r\n\r\n        private static IEnumerable<ImageData> LoadImagesFromDirectory(string folder)\r\n        {\r\n            var files = Directory.GetFiles(folder, \"*\",\r\n                searchOption: SearchOption.AllDirectories);\r\n\r\n            foreach (var file in files)\r\n            {\r\n                    var label = Path.GetFileName(file).Split(\".\")[0];\r\n                    \r\n                    yield return new ImageData()\r\n                    {\r\n                        ImagePath = file,\r\n                        Label = label\r\n                    };\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nImageData.cs: \r\n` \r\n    \r\n           public class ImageData\r\n           {\r\n                    public string ImagePath { get; set; }\r\n\r\n                    public string Label { get; set; }\r\n            }\r\n\r\n`\r\n\r\nModelInput.cs: \r\n`\r\n\r\n    public class ModelInput\r\n    {\r\n        public byte[] Image { get; set; }\r\n        \r\n        public UInt32 LabelAsKey { get; set; }\r\n\r\n        public string ImagePath { get; set; }\r\n\r\n        public string Label { get; set; }\r\n    }\r\n\r\n\r\n\r\n\r\n`\r\nModelOutput.cs:\r\n`\r\n\r\n\r\n    public class ModelOutput\r\n    {\r\n        public string ImagePath { get; set; }\r\n\r\n        public string Label { get; set; }\r\n\r\n        public string PredictedLabel { get; set; }\r\n    }\r\n\r\n\r\n`\r\n\r\nDetailed Exception info: \r\n**Unhandled exception. System.Collections.Generic.KeyNotFoundException: The given key '3711' was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary 2.get_Item(TKey key)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.TrainAndEvaluateClassificationLayer(String trainBottleneckFilePath, Options options, String validationSetBottleneckFilePath, Int32 trainingsetSize)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase 2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase 2.Fit(IDataView input)\r\n   at Microsoft.ML.Data.EstimatorChain 1.Fit(IDataView input)\r\n   at ModelBuilder.Program.Main(String[] args) in C:\\Users\\User\\RiderProjects\\CatVsDogsBinaryClassification\\ModelBuilder\\Program.cs:line 71**\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5157","RelatedDescription":"Closed issue \"KeyNotFoundException after Bottleneck Computation phase finishes while training image classification model\" (#5157)"},{"Id":"623890544","IsPullRequest":false,"CreatedAt":"2020-05-24T15:47:36","Actor":"deiruch","Number":"5159","RawContent":null,"Title":"Feature request: Built-in support for word/sentence/document embeddings","State":"open","Body":"# Intro\r\nML.NET is not yet very well equipped for some natural-language processing (NLP) workloads. While there is already support for basic processing steps (tokenization, stop word removal, ...) and sentiment, other, higher-level workloads are not yet supported.\r\n\r\n# Feature request\r\n\r\n- Pre-trained embeddings, like BERT or GloVe, for documents are useful for down-level tasks.\r\n- It'd be even better if there was an easy to use API to tune or train custom models on custom datasets.\r\n\r\n# Use case\r\nIn our specific use case, we develop document classifiers. We only have a limited set of labeled documents to train with. Our plan is to use a pretrained or trained document embeddings, and learn a simple classifier on top, using the labeled documents.\r\n\r\n# Workarounds\r\nThere is already a project that runs BERT as ONNX on top of ML.NET, see https://github.com/GerjanVlot/BERT-ML.NET. I'd like to see this become an official part of ML.NET, with a good API, properly maintained and updated.\r\n\r\n# Outlook\r\nThese models are building-blocks for other features, like entity recognition (#630). Ideally ML.NET would support many more NLP tasks, as listed in https://github.com/microsoft/nlp-recipes#content. Generally, we notice an uptake in NLP-related project inquiries.","Url":"https://github.com/dotnet/machinelearning/issues/5159","RelatedDescription":"Open issue \"Feature request: Built-in support for word/sentence/document embeddings\" (#5159)"},{"Id":"623596875","IsPullRequest":true,"CreatedAt":"2020-05-24T08:53:12","Actor":"antoniovs1029","Number":"5154","RawContent":null,"Title":"Created DoubleParser.OptionFlags to be used by TextLoader","State":"closed","Body":"As mentioned on https://github.com/dotnet/machinelearning/pull/5145#issuecomment-632255971 , PR #5145 opened the possibility of an issue to occur when running, _at the same time_, different cursors coming from different `TextLoaders `with different `DecimalMarkers`, as race conditions could occur. Although [we originally agreed](https://github.com/dotnet/machinelearning/pull/5145#issuecomment-632467994) to accept that fringe scenario, this PR fixes that problem, and adds a test for that scenario.\r\n\r\nThis PR also addresses the general problem, that if we add new options to `TextLoader `that need to affect how we parse Single/Doubles, then there was no direct/thread-safe way to make these options affect how `DoubleParser `works... For example, issue #4132 would require adding a new `TextLoader.Option` \"impute\" that needs to affect how `DoubleParser `works. Other case would be the offline suggestion of also adding a `ThousandsMarker` option to be able to parse `10,332.05` or `10.332,05` into `10332.05` depending on that option.\r\n\r\n### General explanation of the PR\r\nWithout this PR the behavior was that `TextLoader.Parser` would use the singleton `TextLoader.ValueCreatorCache.Instance` to get the delegates to parse the fields loaded from a file. In turn, the `ValueCreatorCache` singleton would have gotten those delegates from the singleton `Conversion.Instance`, whose methods for parsing text to single/doubles would, then, call static methods in `DoubleParser`.\r\n\r\n**I am assuming that the only reason to have both `ValueCreatorCache` and `Conversion `follow the singleton pattern was for performance reasons, so that they didn't have to create the delegates every time somewhere in the code their instances were needed**\r\n\r\nWith this PR:\r\n1. I created a new `DoubleParser.OptionFlags` enum that is used by `TextLoader`, and gets propagated through `ValueCreatorCache `up to `Conversion `in order to call the static `DoubleParser `methods with the correct options.\r\n2. I added code to `ValueCreatorCache `and `Conversion `to let them create other instances besides its default instance. Most of the codebase would still use their default instance, so this PR doesn't affect performance or behavior there. It's only in `TextLoader`, and only in the case when using custom options for `DoubleParser`, that a custom instance of `ValueCreatorCache `and `Conversion `gets created. So then performance would only be somewhat affected when creating those instances for that particular case. To have minimum impact in performance, I also added a `ConcurrentDictionary `to hold the `_customInstances `of `ValueCreatorCache `(i.e. those which were created using non-default `DoubleParser.OptionFlags`)... this way, when using custom options, the custom instance of `ValueCreatorCache `and Conversion would only be created once, and would be reused afterwards.","Url":"https://github.com/dotnet/machinelearning/pull/5154","RelatedDescription":"Closed or merged PR \"Created DoubleParser.OptionFlags to be used by TextLoader\" (#5154)"},{"Id":"623733113","IsPullRequest":false,"CreatedAt":"2020-05-23T20:08:35","Actor":"dcostea","Number":"5156","RawContent":null,"Title":"CustomMappingEstimator Exportable to ONNX?","State":"open","Body":"### Question\r\n\r\n- **Will be CustomMappingEstimator exportable to ONNX in the future?**\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5156","RelatedDescription":"Open issue \"CustomMappingEstimator Exportable to ONNX?\" (#5156)"},{"Id":"621419479","IsPullRequest":true,"CreatedAt":"2020-05-22T22:01:37","Actor":"mstfbl","Number":"5145","RawContent":null,"Title":"Added decimal marker option in TextLoader","State":"closed","Body":"This PR adds the decimal marker option in TextLoader, so that cultures where a comma is the decimal marker (as in 3,5 = 3.5 * 10^1) can use their appropriate datasets. This also updates `verWrittenCur` as it is now writing `decimalMarker` during serialization as well. In addition, this PR also adds in a unit test to check whether or not a dataset with `','` as its decimal marker is read in and processed correctly.\r\n\r\nFix #4910 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5145","RelatedDescription":"Closed or merged PR \"Added decimal marker option in TextLoader\" (#5145)"},{"Id":"622019042","IsPullRequest":true,"CreatedAt":"2020-05-21T23:49:33","Actor":"LittleLittleCloud","Number":"5148","RawContent":null,"Title":"support sweeping multiline option in AutoML","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5148","RelatedDescription":"Closed or merged PR \"support sweeping multiline option in AutoML\" (#5148)"},{"Id":"622841728","IsPullRequest":true,"CreatedAt":"2020-05-21T23:03:27","Actor":"Lynx1820","Number":"5150","RawContent":null,"Title":"Adding Ranking AutoML Task","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5150","RelatedDescription":"Open PR \"Adding Ranking AutoML Task\" (#5150)"},{"Id":"621678836","IsPullRequest":true,"CreatedAt":"2020-05-21T20:30:30","Actor":"antoniovs1029","Number":"5147","RawContent":null,"Title":"Add escapeChar support to TextLoader and added benchmark for TextLoader","State":"closed","Body":"Adds feature requested here: https://github.com/dotnet/machinelearning/pull/5125#discussion_r425735487\r\n\r\nAnd also a benchmark for TextLoader, whose results are reported here:\r\nhttps://github.com/dotnet/machinelearning/pull/5147#discussion_r428583991\r\n\r\nThe feature is exposing a new option called escapeChar to the users, which is used to escape quote characters inside quoted fields.\r\n\r\nSo if `escapeChar = \\`, then the second field of the following row:\r\n`1,\"this \\\" quote was escaped\",true`\r\n\r\nwill be loaded as\r\n`this \" quote was escaped`\r\n\r\nDefault behavior (which was the behavior even before this PR) is that `escapeChar = \"` since 2 double quotes (\"\") has always been used to escape quotes inside quoted fields by ML.NET.","Url":"https://github.com/dotnet/machinelearning/pull/5147","RelatedDescription":"Closed or merged PR \"Add escapeChar support to TextLoader and added benchmark for TextLoader\" (#5147)"},{"Id":"619337977","IsPullRequest":true,"CreatedAt":"2020-05-21T18:34:10","Actor":"Lynx1820","Number":"5138","RawContent":null,"Title":"Adding support for MurmurHash KeyDataTypes ","State":"closed","Body":"ML.NET's behavior is to map zero input values to zero, instead of hashes. \r\n- Adding that behavior to the onnx export and a test. \r\n\r\nTODO:  rebase once other murmurhash PR are merged \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5138","RelatedDescription":"Closed or merged PR \"Adding support for MurmurHash KeyDataTypes \" (#5138)"},{"Id":"622228315","IsPullRequest":true,"CreatedAt":"2020-05-21T03:55:22","Actor":"frank-dong-ms","Number":"5149","RawContent":null,"Title":"set Session as public so user can have access to tf graph","State":"open","Body":"Address issue: https://github.com/dotnet/machinelearning/issues/4568\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5149","RelatedDescription":"Open PR \"set Session as public so user can have access to tf graph\" (#5149)"},{"Id":"621430363","IsPullRequest":true,"CreatedAt":"2020-05-20T03:25:04","Actor":"wangyems","Number":"5146","RawContent":null,"Title":"Uniform onnx conversion method when using non-default column names","State":"open","Body":"Resolve https://github.com/dotnet/machinelearning/issues/3089\r\n\r\nFix for BinaryClassification, not find any issue with Multi-Classification.\r\nAdd tests for the above scenarios \r\n","Url":"https://github.com/dotnet/machinelearning/pull/5146","RelatedDescription":"Open PR \"Uniform onnx conversion method when using non-default column names\" (#5146)"},{"Id":"621283052","IsPullRequest":false,"CreatedAt":"2020-05-19T21:02:49","Actor":"antoniovs1029","Number":"5144","RawContent":null,"Title":"Add line limit to readMultilines in TextLoader","State":"open","Body":"_(This issue tracks @justinormont 's suggestion [here](https://github.com/dotnet/machinelearning/pull/5125#discussion_r427002585))_\r\n\r\nRecent PR #5125 added a `readMultilines `option to `TextLoader `to enable the posibility of including newlines inside quoted fields.\r\n\r\nA problem with this is that if the input file isn't correctly formatted (i.e., if it has a quote that opens a quoted field, that is never closed) then the `Multilinereader `will actually load every line until it finds another quote. Depending on the dataset (and on how many incorrectly formatted rows it has) it could actually load into memory the whole dataset (or as much as the `StringBuilder `supports, which is [typically 2^32 chars ](https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.maxcapacity?view=netcore-3.1#System_Text_StringBuilder_MaxCapacity))\r\n\r\nFor example:\r\n```\r\nid,description,animal\r\n0,\"this quoted field isnt closed,cat\r\n1,this field doesnt include quotes,dog\r\n... // no quoted fields in here\r\n2555,\"it is until this quoted field that the multilinereader actually stops reading row 0\",bird\r\n2556,\"this row will be read correctly\",dog\r\n```\r\n\r\n@justinormont 's suggestion here: https://github.com/dotnet/machinelearning/pull/5125#discussion_r427002585\r\n\r\nis to add another option to the `TextLoader `that let the user set the maximum length of a row, and if that threshold is passed, then simply ignore the line and continue reading the input file without loading everything into it.\r\n\r\nI think that before introducing more options to the `TextLoader`, it's better to see if users actually hit this problem when using `readMultilines`.","Url":"https://github.com/dotnet/machinelearning/issues/5144","RelatedDescription":"Open issue \"Add line limit to readMultilines in TextLoader\" (#5144)"},{"Id":"620810508","IsPullRequest":false,"CreatedAt":"2020-05-19T20:17:35","Actor":"ThomasArdal","Number":"5142","RawContent":null,"Title":"Is it possible to avoid the runtimes folder in build output","State":"closed","Body":"I have included the `Microsoft.ML` and `Microsoft.ML.TimeSeries` packages in an ASP.NET Core 3.1 project. Things are working great. I noticed that when including those packages in my project, I get a `runtimes` folder (almost 300 MB) in my build output. Setting `--self-contained false` as a parameter for my `deploy` command still include this folder. I have been reading about this folder being included when project includes code generating assemblies. Do one of these packages include such assemblies and is it possible to avoid having this `runtimes` folder as part of the build output?","Url":"https://github.com/dotnet/machinelearning/issues/5142","RelatedDescription":"Closed issue \"Is it possible to avoid the runtimes folder in build output\" (#5142)"},{"Id":"621152525","IsPullRequest":true,"CreatedAt":"2020-05-19T20:17:24","Actor":"mstfbl","Number":"5143","RawContent":null,"Title":"Updated installation of libomp on Mac trusted CI builds","State":"closed","Body":"This PR fixes the error our Mac trusted CI builds were showing with regards to the installation of `libomp` with Homebrew, and mirrors the changes done in #5141.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5143","RelatedDescription":"Closed or merged PR \"Updated installation of libomp on Mac trusted CI builds\" (#5143)"},{"Id":"620480348","IsPullRequest":true,"CreatedAt":"2020-05-19T05:58:08","Actor":"frank-dong-ms","Number":"5140","RawContent":null,"Title":"fix build issue","State":"closed","Body":"make docker update to nightlybuild pipeline and outer loop pipeline as well\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5140","RelatedDescription":"Closed or merged PR \"fix build issue\" (#5140)"},{"Id":"620525215","IsPullRequest":true,"CreatedAt":"2020-05-19T01:08:57","Actor":"mstfbl","Number":"5141","RawContent":null,"Title":"Fix libomp installation for MacOS CI Builds","State":"closed","Body":"Fix the part of installing dependencies on MacOS where libomp is added","Url":"https://github.com/dotnet/machinelearning/pull/5141","RelatedDescription":"Closed or merged PR \"Fix libomp installation for MacOS CI Builds\" (#5141)"},{"Id":"619369371","IsPullRequest":false,"CreatedAt":"2020-05-16T03:46:16","Actor":"frank-dong-ms","Number":"5139","RawContent":null,"Title":"Legacy tests - partially disabled tests","State":"closed","Body":"We have some tests that are partially disabled based on OS, arch or netcore version, resolve them or at least root cause them and let test running on all platform.\r\n\r\n\r\nTest | Category | Status | Owner\r\n-- | -- | -- | --\r\nMulticlassTreeFeaturizedLRTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nLinearClassifierTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nBinaryClassifierLogisticRegressionTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nBinaryClassifierSymSgdTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nBinaryClassifierTesterThresholdingTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastForestClassificationTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastTreeBinaryClassificationTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastTreeBinaryClassificationCategoricalSplitTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastTreeBinaryClassificationNoOpGroupIdTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastTreeHighMinDocsTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nCommandCrossValidationKeyLabelWithFloatKeyValues | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nTestTreeEnsembleCombiner | [X64Fact(\"x86   fails. Associated GitHubIssue:   https://github.com/dotnet/machinelearning/issues/1216\")] | resolve | Frank\r\nTestTreeEnsembleCombinerWithCategoricalSplits | [X64Fact(\"x86   fails. Associated GitHubIssue:   https://github.com/dotnet/machinelearning/issues/1216\")] | resolve | Frank\r\nTestEnsembleCombiner | [X64Fact(\"x86   fails. Associated GitHubIssue:   https://github.com/dotnet/machinelearning/issues/1216\")] | resolve | Frank\r\nTestMulticlassEnsembleCombiner | [X64Fact(\"x86   fails. Associated GitHubIssue:   https://github.com/dotnet/machinelearning/issues/1216\")] | TextLoader is   throwing exception: Unhandled exception at 0x15B296B3 (coreclr.dll) in   dotnet.exe.14324.dmp: 0xC0000005: Access violation writing location   0x17A41000.   resolve | Frank\r\nExprBind | [X64Fact(\"sin(1e+30)   gives different value on x86.\"), TestCategory(\"Expr   Language\")] | Resolve       Math.Sin has valid   value range from approximately -9223372036854775295 to approximately   9223372036854775295: https://docs.microsoft.com/en-us/dotnet/api/system.math.sin?view=netcore-3.1.   If value is out of range, Math.Sin will return value passed in and not   throwing exception.       Below is some test   result:       Math.Sin(1e+30):       NetCoreApp X64:   0.0093314689311758247   NetCoreApp X86:   -0.75626273033357649   Net FX: 1e+30           Math.Sin(1e+10):       NetCoreApp X64:   -0.48750602508751067   NetCoreApp X86:   -0.48750602507627   Net FX:         -0.48750602507627           So this is   acceptable to skip in x86 and net framework, but we should consider to use   Math.Sin within its valid range. | Frank\r\nEntryPointPipelineEnsembleGetSummary | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nTestCrossValidationMacro | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nMulticlassLRTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nMulticlassLRNonNegativeTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierLogisticRegressionBinNormTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nDefaultCalibratorPerceptronTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nPAVCalibratorPerceptronTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierLDSvmTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierLDSvmNoBiasTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nCommandTrainMlrWithStats | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nKmeansOnnxConversionTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nSavePipeSsaSpikeNoData | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nEnsemblesMultiClassBootstrapSelectorTest | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nEnsemblesMultiAveragerTest | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nEnsemblesMultiVotingCombinerTest | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nEnsemblesMultiStackCombinerTest | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nChangePointDetectionWithSeasonality | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nChangePointDetectionWithSeasonalityPredictionEngineNoColumn | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nChangePointDetectionWithSeasonalityPredictionEngine | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nSsaForecast | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nSsaForecastPredictionEngine | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nBinaryClassifierLogisticRegressionNonNegativeTest | [LessThanNetCore30OrNotNetCoreAndX64Fact(\"netcoreapp3.1   and x86 output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierLogisticRegressionGaussianNormTest | [LessThanNetCore30OrNotNetCoreAndX64Fact(\"netcoreapp3.1   and x86 output differs from Baseline\")] | resolve | Frank\r\nRandomCalibratorPerceptronTest | [LessThanNetCore30OrNotNetCoreAndX64Fact(\"netcoreapp3.1   and x86 output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierSymSgdTest | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Root cause: Linux uses a version of   MKL that doesn't support conditional numerical reproducibility the same way   as Windows runs.       The different   during different OS as well as unstable result for Linux is from MKL library   (method cblas_sdot). | Frank\r\nCommandTrainingBinaryFactorizationMachineWithValidation | RuntimeInformation.IsOSPlatform | Resolve   -    Lower   precision on Linux platforms       This   test is skipped due to missing dataset, also   Linux   uses lower precision due to below issue:   https://github.com/dotnet/machinelearning/issues/404 | Frank\r\nCommandTrainingBinaryFactorizationMachineWithValidationAndInitialization | RuntimeInformation.IsOSPlatform | Resolve -    Lower precision on   Linux platforms       Linux uses lower   precision due to below issue and PR:   https://github.com/dotnet/machinelearning/issues/404   https://github.com/dotnet/machinelearning/pull/1206 | Frank\r\nIrisLightGbm | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   resolve PR #5080 | Mustafa\r\nIrisLightGbmWithLoadColumnName | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Resolve PR #5080 | Mustafa\r\nIrisVectorLightGbm | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Resolve PR #5080 | Mustafa\r\nIrisVectorLightGbmWithLoadColumnName | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Resolve PR #5080 | Mustafa\r\nIrisSdcaMaximumEntropy | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Resolve PR #5080 | Mustafa\r\nTextNormalizingOnnxConversionTest | RuntimeInformation.IsOSPlatform | Skipped on Linux   platforms       Skipped due to   below locale exception:   Failed to   construct locale with name:en_US.UTF-8:locale::facet::_S_create_c_locale name   not valid:Please, install necessary language-pack-XX and configure locales       https://github.com/dotnet/machinelearning/issues/5093       Mustafa will work   on a fix later | Mustafa\r\nTensorFlowTransformCifar | RuntimeInformation.IsOSPlatform | Resolved -    Different expected   results between Windows vs. Linux/OSX, runs only on 64-bit due to TF       By Design, this   difference is explained below:       //   taco_invalidpixelformat.jpg has '8207' pixel format on Windows but this   format translates to Format32bppRgb               // on macOS and Linux, hence on   Windows this image's pixel format is converted in resize transformer to   Format32bppArgb               // and on linux and macOS it is   not converted in resize transform since pixel format 'Format32bppRgb' can be   resized but               // in   ImagePixelExtractingTransformer it is converted to Format32bppArgb since   there we just support two                // pixel formats, i.e   Format32bppArgb and Format16bppArgb. | Frank\r\nTensorFlowImageClassificationDefault | RuntimeInformation.IsOSPlatform | Resolved – already   runs on all OS's, runs only on 64-bit due to TF | Mustafa\r\nTensorFlowImageClassification | RuntimeInformation.IsOSPlatform | Resolved – already   runs on all OS's, runs only on 64-bit due to TF | Mustafa\r\nMatrixFactorizationSimpleTrainAndPredict | RuntimeInformation.IsOSPlatform | Lower precision on   Linux, skipped on OSX | Mustafa   Mustafa\r\nOneClassMatrixFactorizationInMemoryDataZeroBaseIndex | RuntimeInformation.IsOSPlatform | Resolved -    Lower precision on   non-Windows platforms       There are   randomness during initialization in native matrix factorization   library(default_random_engine). This default_random_engine seems have   different implementation on different OS.   https://stackoverflow.com/questions/32730906/random-generates-same-number-in-linux-but-not-in-windows/32731387 | Frank\r\nMulticlassLRTest | Debug   Release Different Baseline | resolve | Mustafa\r\nRandomCalibratorPerceptronTest | Debug   Release Different Baseline | resolve | Mustafa\r\nLinearClassifierTest | Debug   Release Different Baseline | resolve | Mustafa\r\nMulticlassTreeFeaturizedLRTest | Debug   Release Different Baseline | resolve | Mustafa\r\nFastForestClassificationTest | Debug   Release Different Baseline | resolve | Mustafa\r\nBinaryClassifierLogisticRegressionNormTest | Debug   Release Different Baseline | resolve | Mustafa\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5139","RelatedDescription":"Closed issue \"Legacy tests - partially disabled tests\" (#5139)"},{"Id":"619270991","IsPullRequest":true,"CreatedAt":"2020-05-15T22:59:56","Actor":"mstfbl","Number":"5137","RawContent":null,"Title":"Update Ubuntu build and reenable TextNormalizingOnnxConversionTest() on Linux","State":"closed","Body":"This PR updates our Ubuntu CI builds with the correct installation pattern for `libomp-dev`, and the correct updating of its locale setting, which enables us to re-activate the unit test TextNormalizingOnnxConversionTest().","Url":"https://github.com/dotnet/machinelearning/pull/5137","RelatedDescription":"Closed or merged PR \"Update Ubuntu build and reenable TextNormalizingOnnxConversionTest() on Linux\" (#5137)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-05-27T05:30:36.7590357Z","RunDurationInMilliseconds":795}