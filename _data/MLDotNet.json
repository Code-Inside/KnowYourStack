{"Data":{"GitHub":{"Issues":[{"Id":"3555064604","IsPullRequest":true,"CreatedAt":"2025-10-27T22:37:38","Actor":"dotnet-maestro[bot]","Number":"7532","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:c692823c-b896-437f-4f57-08dc434cc8f6)\n## From https://github.com/dotnet/arcade\n- **Subscription**: [c692823c-b896-437f-4f57-08dc434cc8f6](https://maestro.dot.net/subscriptions?search=c692823c-b896-437f-4f57-08dc434cc8f6)\n- **Build**: [20251024.1](https://dev.azure.com/dnceng/internal/_build/results?buildId=2823777) ([288493](https://maestro.dot.net/channel/2/github:dotnet:arcade/build/288493))\n- **Date Produced**: October 24, 2025 4:06:26 PM UTC\n- **Commit**: [904bfd153de2a88471c00a7cdd3450948e758db8](https://github.com/dotnet/arcade/commit/904bfd153de2a88471c00a7cdd3450948e758db8)\n- **Branch**: [main](https://github.com/dotnet/arcade/tree/main)\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - From [11.0.0-beta.25509.1 to 11.0.0-beta.25524.1][1]\n     - Microsoft.DotNet.Arcade.Sdk\n     - Microsoft.DotNet.Build.Tasks.Feed\n     - Microsoft.DotNet.Helix.Sdk\n     - Microsoft.DotNet.SignTool\n     - Microsoft.DotNet.SwaggerGenerator.MSBuild\n     - Microsoft.DotNet.XliffTasks\n     - Microsoft.DotNet.XUnitExtensions\n\n[1]: https://github.com/dotnet/arcade/compare/488413fe10...904bfd153d\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:c692823c-b896-437f-4f57-08dc434cc8f6)\n\n","Url":"https://github.com/dotnet/machinelearning/pull/7532","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#7532)"},{"Id":"3558879151","IsPullRequest":true,"CreatedAt":"2025-10-27T22:36:48","Actor":"github-actions[bot]","Number":"7536","RawContent":null,"Title":"[release/4.0] Update release-4.0.3.md","State":"closed","Body":"Backport of #7535 to release/4.0\r\n\r\n/cc @ericstj\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7536","RelatedDescription":"Closed or merged PR \"[release/4.0] Update release-4.0.3.md\" (#7536)"},{"Id":"3558665620","IsPullRequest":true,"CreatedAt":"2025-10-27T22:29:07","Actor":"ericstj","Number":"7535","RawContent":null,"Title":"Update release-4.0.3.md","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/7535","RelatedDescription":"Closed or merged PR \"Update release-4.0.3.md\" (#7535)"},{"Id":"3558639158","IsPullRequest":true,"CreatedAt":"2025-10-27T21:01:31","Actor":"github-actions[bot]","Number":"7534","RawContent":null,"Title":"[release/4.0] Use arcade script for installing MacOS dependencies","State":"closed","Body":"Backport of #7533 to release/4.0\n\n/cc @ericstj\n\n## Customer Impact\n\n## Testing\n\n## Risk\n","Url":"https://github.com/dotnet/machinelearning/pull/7534","RelatedDescription":"Closed or merged PR \"[release/4.0] Use arcade script for installing MacOS dependencies\" (#7534)"},{"Id":"3557731702","IsPullRequest":true,"CreatedAt":"2025-10-27T21:00:24","Actor":"ericstj","Number":"7533","RawContent":null,"Title":"Use arcade script for installing MacOS dependencies","State":"closed","Body":"Building on MacOS was taking an additional 30+ minutes as it built dependencies like CMake, OpenSSL, etc from source.\r\n\r\nLeverage the common script for installing dependencies used by runtime and other dotnet repos.","Url":"https://github.com/dotnet/machinelearning/pull/7533","RelatedDescription":"Closed or merged PR \"Use arcade script for installing MacOS dependencies\" (#7533)"},{"Id":"3551217594","IsPullRequest":true,"CreatedAt":"2025-10-27T16:29:34","Actor":"github-actions[bot]","Number":"7531","RawContent":null,"Title":"[release/4.0] Add release notes for 4.0.3","State":"closed","Body":"Backport of #7530 to release/4.0\n\n/cc @ericstj\n\n## Customer Impact\n\n## Testing\n\n## Risk\n","Url":"https://github.com/dotnet/machinelearning/pull/7531","RelatedDescription":"Closed or merged PR \"[release/4.0] Add release notes for 4.0.3\" (#7531)"},{"Id":"3551215556","IsPullRequest":true,"CreatedAt":"2025-10-24T22:35:54","Actor":"ericstj","Number":"7530","RawContent":null,"Title":"Add release notes for 4.0.3","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/7530","RelatedDescription":"Closed or merged PR \"Add release notes for 4.0.3\" (#7530)"},{"Id":"3542258183","IsPullRequest":true,"CreatedAt":"2025-10-24T21:52:45","Actor":"github-actions[bot]","Number":"7528","RawContent":null,"Title":"[release/4.0] Improve unique directory generation for temp files","State":"closed","Body":"Backport of #7520 to release/4.0\r\n\r\n/cc @ericstj\r\n\r\n## Customer Impact\r\nFor each model opened ML.NET would leave behind a temp folder which would slowly accumulate in the temp directory.  It also had an algorithm for temp folder creation which would linearly degrade with each new folder.\r\n\r\n## Testing\r\nTested fix that the folder is deleted and the creation algorithm does not degrade linearly if folders happen to be left behind because it uses GetTempFileName to produce significantly random folder name candidates.\r\n\r\n## Risk\r\nThis fix doesn't clean up past folders, we should release-note that users may want to do this manually.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7528","RelatedDescription":"Closed or merged PR \"[release/4.0] Improve unique directory generation for temp files\" (#7528)"},{"Id":"3551037427","IsPullRequest":false,"CreatedAt":"2025-10-24T21:18:06","Actor":"dangaier","Number":"7529","RawContent":null,"Title":"FeaturizeText: System.ArgumentOutOfRangeException: Schema mismatch for input column 'Text_CharExtractor': expected Expected known-size vector of Single, got Vector<Single>","State":"open","Body":"When using FeaturizeText, there are a couple scenarios that could result in the following exception:\nSystem.ArgumentOutOfRangeException: Schema mismatch for input column 'Text_CharExtractor': expected Expected known-size vector of Single, got Vector<Single> \n\nScenario #1: The text for all the rows are string.Empty\nScenario #2: The resulting text for all the rows are string.Empty because they only contained stop words that are removed.\n\n`var mlContext = new MLContext();\n\nvar options = new TextFeaturizingEstimator.Options()\n{\n  StopWordsRemoverOptions = new StopWordsRemovingEstimator.Options()\n  {\n    Language = TextFeaturizingEstimator.Language.English\n  },\n}; \n\n// Create a small dataset as an IEnumerable.\nvar samples = new List<TextData>()\n  {    \n    // Scenario #1 - All Empty strings\n    new TextData(){ Text = string.Empty },\n    new TextData(){ Text = string.Empty },\n    new TextData(){ Text = string.Empty },\n\n    // Scenario #2 - All Empty strings because that's the result after removing all stop words.\n    //new TextData(){ Text = \"is\" },                \n    //new TextData(){ Text = \"the\" },\n    //new TextData(){ Text = \"a\" },\n  };\n\n\nvar dataview = mlContext.Data.LoadFromEnumerable(samples);\nvar textPipeline = mlContext.Transforms.Text.FeaturizeText(\"Text\", options);\nvar model = textPipeline.Fit(dataview);\n\npublic class TextData\n{\n  public string Text { get; set; }   \n}\n`\n\nIt's fairly easy to workaround scenario #1 by inspecting the data before even calling FeaturizeText.\nBut the second scenario is much harder to workaround since it's happening inside ML.NET's pipeline. If you're programatically receiving various custom datasets to train on that you don't control, it's possible it has only has stop words in a given text column, and in that case you'll get the unhandled exception. Short of looking for this scenario by looking to see if the column only has stop words before calling FeaturizeText, there's not a good workaround.\n\nNote that it will also happen \"WordExtractor\" (e.g. Text_WordExtractor) if you turn off creating chargram.\nAlso, scenario #2 doesn't happen when calling FeaturizeText without the \"options\" parameter, which means you're using defaults. It appears like the default may not be removing stop words despite what the documentation says.\n\nRelated to:\nhttps://github.com/dotnet/machinelearning/issues/6621\nhttps://github.com/dotnet/machinelearning/issues/5714","Url":"https://github.com/dotnet/machinelearning/issues/7529","RelatedDescription":"Open issue \"FeaturizeText: System.ArgumentOutOfRangeException: Schema mismatch for input column 'Text_CharExtractor': expected Expected known-size vector of Single, got Vector<Single>\" (#7529)"},{"Id":"3485693378","IsPullRequest":true,"CreatedAt":"2025-10-22T01:18:47","Actor":"dotnet-maestro[bot]","Number":"7521","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:c692823c-b896-437f-4f57-08dc434cc8f6)\n## From https://github.com/dotnet/arcade\n- **Subscription**: [c692823c-b896-437f-4f57-08dc434cc8f6](https://maestro.dot.net/subscriptions?search=c692823c-b896-437f-4f57-08dc434cc8f6)\n- **Build**: [20251009.1](https://dev.azure.com/dnceng/internal/_build/results?buildId=2811863) ([286336](https://maestro.dot.net/channel/2/github:dotnet:arcade/build/286336))\n- **Date Produced**: October 9, 2025 12:35:11 PM UTC\n- **Commit**: [488413fe104056170673a048a07906314e101e5d](https://github.com/dotnet/arcade/commit/488413fe104056170673a048a07906314e101e5d)\n- **Branch**: [main](https://github.com/dotnet/arcade/tree/main)\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - From [11.0.0-beta.25502.2 to 11.0.0-beta.25509.1][2]\n     - Microsoft.DotNet.Arcade.Sdk\n     - Microsoft.DotNet.Build.Tasks.Feed\n     - Microsoft.DotNet.Helix.Sdk\n     - Microsoft.DotNet.SignTool\n     - Microsoft.DotNet.SwaggerGenerator.MSBuild\n     - Microsoft.DotNet.XliffTasks\n     - Microsoft.DotNet.XUnitExtensions\n\n[2]: https://github.com/dotnet/arcade/compare/bac4c2c4ad...488413fe10\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:c692823c-b896-437f-4f57-08dc434cc8f6)\n\n\n\n\n\n","Url":"https://github.com/dotnet/machinelearning/pull/7521","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#7521)"},{"Id":"3481890706","IsPullRequest":true,"CreatedAt":"2025-10-21T21:26:56","Actor":"ericstj","Number":"7520","RawContent":null,"Title":"Improve unique directory generation for temp files","State":"closed","Body":"Refactor unique directory creation logic to use random file names.\r\n\r\nFixes https://github.com/dotnet/machinelearning/issues/7485\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7520","RelatedDescription":"Closed or merged PR \"Improve unique directory generation for temp files\" (#7520)"},{"Id":"3420501783","IsPullRequest":false,"CreatedAt":"2025-10-20T02:12:26","Actor":"williamlzw","Number":"7507","RawContent":null,"Title":"vocab.json of qwen3 model cannot be loaded into Tokenizer","State":"closed","Body":"The vocab.json of the qwen3 model does not contain \"added_tokens\" and cannot be loaded into the Tokenizer.\n\n<img width=\"420\" height=\"647\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/938bce80-4d52-46dd-bd90-39ab82a59095\" />","Url":"https://github.com/dotnet/machinelearning/issues/7507","RelatedDescription":"Closed issue \"vocab.json of qwen3 model cannot be loaded into Tokenizer\" (#7507)"},{"Id":"3521518834","IsPullRequest":false,"CreatedAt":"2025-10-16T11:45:46","Actor":"ste-agolabs","Number":"7527","RawContent":null,"Title":"ML.NET LightGBM linear-tree","State":"open","Body":"Is LightGBM linear-tree option going to be supported in ML.NET future releases (e.g 5.0)?","Url":"https://github.com/dotnet/machinelearning/issues/7527","RelatedDescription":"Open issue \"ML.NET LightGBM linear-tree\" (#7527)"},{"Id":"3480645030","IsPullRequest":true,"CreatedAt":"2025-10-13T16:32:40","Actor":"krwq","Number":"7518","RawContent":null,"Title":"Modify expiration dates in .gdnbaselines","State":"closed","Body":"Updated expiration dates for baseline results - those should still be suppressed in order for BinSkim to not complain. We do not have control over external components.","Url":"https://github.com/dotnet/machinelearning/pull/7518","RelatedDescription":"Closed or merged PR \"Modify expiration dates in .gdnbaselines\" (#7518)"},{"Id":"3509194074","IsPullRequest":true,"CreatedAt":"2025-10-13T15:22:02","Actor":"krwq","Number":"7526","RawContent":null,"Title":"Remove baselines","State":"closed","Body":"Me & @rokonec came into conclusions that removing these should re-create BinSkim issues and not cause issues with other tooling. Baselines should contain entries for all active issues or issues already fixed since last baseline. Since we currently only have BinSkim entries in there we expect that after merging following will happen:\r\n- automatic PR with baselines update\r\n- BinSkim issues created\r\n\r\nafter this we should move permanent errors into suppression file and close out the issues\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7526","RelatedDescription":"Closed or merged PR \"Remove baselines\" (#7526)"},{"Id":"3506687290","IsPullRequest":true,"CreatedAt":"2025-10-12T05:16:20","Actor":"asp2286","Number":"7525","RawContent":null,"Title":"🧩 Add pluggable SIMD-accelerated random generator (Mersenne Twister) and RNG abstraction for deterministic ML pipelines","State":"open","Body":"### 📖 Overview\r\nThis PR introduces a new **pluggable random number generation (RNG) infrastructure** into ML.NET, replacing the previous `System.Random` dependency with a **deterministic, high-performance SIMD-accelerated Mersenne Twister (MT19937)** implementation.\r\n\r\nThe goal is to provide a **faster, deterministic, and cross-platform reproducible** RNG foundation for all stochastic algorithms (e.g., Random Forest, KMeans++, Isolation Forest, etc.) while maintaining full backward compatibility.\r\n\r\n---\r\n\r\n### 🚀 Key Changes\r\n- **New interfaces:**\r\n  - `IRandomSource` — unified, injectable RNG abstraction  \r\n  - `IRandomBulkSource` — efficient vectorized bulk fill API  \r\n\r\n- **New RNG backend:**\r\n  - `MersenneTwister` — pure C# MT19937 implementation  \r\n  - `MersenneTwisterRandomSource` — SIMD-optimized version using  \r\n    - `System.Runtime.Intrinsics.X86.Avx2`  \r\n    - `System.Runtime.Intrinsics.Arm.AdvSimd`  \r\n    with automatic scalar fallback  \r\n\r\n- **Integration:**\r\n  - Updated `HostEnvironmentBase`, `ConsoleEnvironment`, `LocalEnvironment`, and `MLContext`  \r\n  - New `RandomSource` property available on all `IHost` and `MLContext` instances  \r\n  - Backward-compatible `Rand` property retained and wired through adapters  \r\n\r\n- **Adapters for compatibility:**\r\n  - `RandomSourceAdapter`  \r\n  - `RandomFromRandomSource`  \r\n  - `RandomShim`  \r\n\r\n- **Testing and validation:**\r\n  - Determinism tests for same-seed consistency  \r\n  - Mixed consumption tests (`Rand` + `RandomSource`)  \r\n  - Cross-platform reproducibility (Windows/macOS/ARM64)  \r\n  - Performance microbenchmarks  \r\n\r\n---\r\n\r\n### ⚡ Performance Impact\r\nThe new RNG is up to **5× faster** in real workloads.  \r\nIt eliminates per-call allocations and leverages vectorized bit-generation via SIMD instructions.\r\n\r\n<details>\r\n<summary>📊 Benchmark results (Isolation Forest prototype)</summary>\r\n\r\n| Environment | Library | Mean Fit Time | Speedup |\r\n|--------------|----------|---------------|----------|\r\n| .NET 9 + ML.NET (SIMD MT19937) | C# | **0.21 s** | 🟢 **5× faster** |\r\n| Python 3.11 + scikit-learn 1.5 | C/Python | 1.05 s | — |\r\n\r\nAll benchmarks use identical seeds and datasets.  \r\nDeterministic equivalence confirmed across runs and architectures.\r\n</details>\r\n\r\n---\r\n\r\n### 🔬 Determinism & Reproducibility\r\n- Bit-for-bit identical sequences across architectures (x86 ↔ ARM64)  \r\n- Fallback to scalar path ensures deterministic output when SIMD unavailable  \r\n- Each `IHost` and `MLContext` obtains an independent deterministic stream  \r\n- Legacy `IHost.Rand` remains functional and maps to new RNG internally  \r\n\r\n---\r\n\r\n### 🧠 Motivation\r\nThis refactor lays the foundation for future high-performance stochastic algorithms in ML.NET.  \r\nReliable, cross-platform determinism and reproducible random streams are critical for modern ML workloads, testing, and research reproducibility.\r\n\r\nIt also unlocks future optimizations for:\r\n- Tree-based ensembles (RandomForest, IsolationForest, GBDT)\r\n- Sampling-based learners (KMeans++, NaiveBayes)\r\n- Data shuffling, augmentation, and stochastic pipelines\r\n\r\n---\r\n\r\n### 🔜 Next Steps\r\nIn the **next PR**, I will introduce a **native Isolation Forest implementation** built entirely in C# using this RNG backend.\r\n\r\nPreliminary testing shows the Isolation Forest algorithm using `MersenneTwisterRandomSource` performs **~5× faster** than scikit-learn’s Python version while producing numerically consistent anomaly scores.\r\n\r\nThis follow-up contribution will:\r\n- Add the new `IsolationForestTrainer` to ML.NET  \r\n- Include SHAP-style explainability support  \r\n- Extend anomaly detection benchmarks and documentation\r\n\r\n---\r\n\r\n### ✅ Checklist\r\n- [x] Added RNG abstraction layer (`IRandomSource`, `IRandomBulkSource`)  \r\n- [x] Implemented SIMD-accelerated Mersenne Twister (MT19937)  \r\n- [x] Integrated with host environments and `MLContext`  \r\n- [x] Ensured deterministic results across platforms  \r\n- [x] Added backward-compatibility adapters (`Rand`, `RandomShim`, etc.)  \r\n- [x] Added extensive unit tests  \r\n- [x] Benchmarked vs scikit-learn  \r\n- [ ] **Upcoming:** Isolation Forest algorithm using this RNG  \r\n\r\n---\r\n\r\n### 🧾 References\r\n- Matsumoto & Nishimura, *Mersenne Twister: A 623-dimensionally equidistributed uniform pseudorandom number generator*, ACM TOMS 1998  \r\n- .NET Hardware Intrinsics Docs: <https://learn.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics>  \r\n- Internal discussions and performance notes related to RNG determinism in ML.NET #7502 \r\n\r\n---\r\n\r\n### 🧩 Example usage\r\n```csharp\r\nvar mlContext = new MLContext(seed: 2024);\r\nvar rng = mlContext.RandomSource;\r\n\r\n// deterministic sequence\r\nuint a = rng.NextUInt();\r\nuint b = rng.NextUInt();","Url":"https://github.com/dotnet/machinelearning/pull/7525","RelatedDescription":"Open PR \"🧩 Add pluggable SIMD-accelerated random generator (Mersenne Twister) and RNG abstraction for deterministic ML pipelines\" (#7525)"},{"Id":"3505684392","IsPullRequest":true,"CreatedAt":"2025-10-11T11:50:37","Actor":"asp2286","Number":"7524","RawContent":null,"Title":"Qwe","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7524","RelatedDescription":"Closed or merged PR \"Qwe\" (#7524)"},{"Id":"3504967250","IsPullRequest":false,"CreatedAt":"2025-10-11T01:41:47","Actor":"syp10000","Number":"7523","RawContent":null,"Title":"text tokenizer EncodeToTokens repeat","State":"open","Body":"input text：\"如果此时在位检测传感器的橙色LED灯熄灭\"\nEncodes input text to a list of EncodedTokens.  offset value repeat\n\n<img width=\"1249\" height=\"678\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/042c5280-aff0-457c-a29e-ad11ce808391\" />","Url":"https://github.com/dotnet/machinelearning/issues/7523","RelatedDescription":"Open issue \"text tokenizer EncodeToTokens repeat\" (#7523)"},{"Id":"3493050985","IsPullRequest":false,"CreatedAt":"2025-10-07T21:09:28","Actor":"AngeloAtCadence","Number":"7522","RawContent":null,"Title":"MulticlassClassificationExperiment preFeaturizer not acting on the schema","State":"open","Body":"**System Information (please complete the following information):**\n - OS & Version: Windows 11\n - ML.NET Version: ML.NET v4.0.2 & Auto ML.NET v0.22.2\n - .NET Version:  .NET 10\n\n**Describe the bug**\nWhen using a transform like DropColumns or CustomMapping the resulting transform is not taken into account as the new schema. This causes Schema validation errors with our even applying the transforms. For instance, with the following code applied outside of the will work when passed outside of the preFeaturizer, but when used as an input it fails saying it cannot find the column. If a custom mapper is used the reverse problems happen where an output schema is not seen and the columns type is rejected.\n\"`csharp\nvar transformedData = ctx.Transforms.DropColumns([HybridClassifierInputModel.imageSource]).Fit(fullData).Transform(fullData);`\"\n\nThis will also result in errors after training where you will need to manually apply the transform before the predictor.\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. Create a IDataView with a schema\n2. Set up an experiment for the MulticlassExperimentSettings\n3. Try any preFeaturizer where you would drop a column or try to change the schema too much. DropColumns or SelectColumns are perfect examples\n\n**Expected behavior**\nI would expect the transformer in preFeaturizer to be applied before the validation. Thus, it would allow for column drops or when working with data that must be massaged, or you are using in multiple ways. \n\n**Screenshots, Code, Sample Projects**\n\n```csharp\nMulticlassExperimentSettings textModelSettings = new MulticlassExperimentSettings()\n{\n\tOptimizingMetric = OptimizingMetric,\n\tMaxExperimentTimeInSeconds = maxTrainTimeInSeconds,\n\t//CacheBeforeTrainer = CacheBeforeTrainer.On,\n\tCacheDirectoryName = Environment.CurrentDirectory, // Skip the disk and store in-memory\n};\n\n//var transformedData = ctx.Transforms.DropColumns([HybridClassifierInputModel.imageSource]).Fit(fullData).Transform(fullData);\nMulticlassClassificationExperiment experiment = ctx.Auto().CreateMulticlassClassificationExperiment(textModelSettings);\n\nTrainTestData trainValidationData = ctx.Data.TrainTestSplit(ctx.Data.ShuffleRows(transformedData), testFraction: 0.2);\n\nExperimentResult <MulticlassClassificationMetrics> result = experiment.Execute(trainData: trainValidationData.TrainSet,\n\t\t\t\t\t\t\t\t//preFeaturizer: ctx.Transforms.CustomMapping<HybridClassifierInputModel, TextClassifierInputModel>(HybridToTextCustomAction.CustomAction, nameof(HybridToTextCustomAction), outputSchemaDefinition: SchemaDefinition.Create(typeof(TextClassifierInputModel))),\n\t\t\t\t\t\t\t\tpreFeaturizer: ctx.Transforms.DropColumns([HybridClassifierInputModel.imageSource]),\n\t\t\t\t\t\t\t\tvalidationData: trainValidationData.TestSet,\n\t\t\t\t\t\t\t\tlabelColumnName: HybridClassifierInputModel.target,\n\t\t\t\t\t\t\t\tprogressHandler: new TextCPUMlClassifierProgressHandler<IHybridMlClassifierService>(Logger)); \n```\n\n**Additional context**\nI would have like to use the data to train more than one model, but it needs some small data changes for either one. I have a custom IDataView that attaches to a DbLite. It would be good if the preFeature worked so that it could stream the data.\n","Url":"https://github.com/dotnet/machinelearning/issues/7522","RelatedDescription":"Open issue \"MulticlassClassificationExperiment preFeaturizer not acting on the schema\" (#7522)"},{"Id":"3479576251","IsPullRequest":true,"CreatedAt":"2025-10-03T19:58:29","Actor":"ericstj","Number":"7516","RawContent":null,"Title":"Improve native build and mark our official build as CFS Clean","State":"closed","Body":"The CFS Clean marking will prevent our build from accessing public packaging endpoints (like NuGet.org, myget.org, etc).\r\nSee https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-build/cloudbuild/resolving-cfs-s360-items\r\n\r\nThe other settings are just various native toolchain improvements like deterministic build, source linking, etc.  I also enabled the repo to build with Dev18 while I was at it.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7516","RelatedDescription":"Closed or merged PR \"Improve native build and mark our official build as CFS Clean\" (#7516)"},{"Id":"3481545966","IsPullRequest":true,"CreatedAt":"2025-10-03T17:02:36","Actor":"dotnet-maestro[bot]","Number":"7519","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:c692823c-b896-437f-4f57-08dc434cc8f6)\n## From https://github.com/dotnet/arcade\n- **Subscription**: [c692823c-b896-437f-4f57-08dc434cc8f6](https://maestro.dot.net/subscriptions?search=c692823c-b896-437f-4f57-08dc434cc8f6)\n- **Build**: [20251002.2](https://dev.azure.com/dnceng/internal/_build/results?buildId=2807056) ([285551](https://maestro.dot.net/channel/2/github:dotnet:arcade/build/285551))\n- **Date Produced**: October 2, 2025 7:59:28 PM UTC\n- **Commit**: [bac4c2c4add004bbce35ff5d17bc295dd4ebcd57](https://github.com/dotnet/arcade/commit/bac4c2c4add004bbce35ff5d17bc295dd4ebcd57)\n- **Branch**: [main](https://github.com/dotnet/arcade/tree/main)\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - From [11.0.0-beta.25477.2 to 11.0.0-beta.25502.2][1]\n     - Microsoft.DotNet.Arcade.Sdk\n     - Microsoft.DotNet.Build.Tasks.Feed\n     - Microsoft.DotNet.Helix.Sdk\n     - Microsoft.DotNet.SignTool\n     - Microsoft.DotNet.SwaggerGenerator.MSBuild\n     - Microsoft.DotNet.XliffTasks\n     - Microsoft.DotNet.XUnitExtensions\n\n[1]: https://github.com/dotnet/arcade/compare/e19df00378...bac4c2c4ad\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:c692823c-b896-437f-4f57-08dc434cc8f6)\n\n","Url":"https://github.com/dotnet/machinelearning/pull/7519","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#7519)"},{"Id":"3420510489","IsPullRequest":false,"CreatedAt":"2025-10-03T16:24:13","Actor":"williamlzw","Number":"7508","RawContent":null,"Title":"Hope to simplify torchsharp's Tokenizer to facilitate expansion","State":"closed","Body":"https://github.com/dotnet/machinelearning/issues/7507","Url":"https://github.com/dotnet/machinelearning/issues/7508","RelatedDescription":"Closed issue \"Hope to simplify torchsharp's Tokenizer to facilitate expansion\" (#7508)"},{"Id":"3479824904","IsPullRequest":false,"CreatedAt":"2025-10-03T05:16:45","Actor":"ntoan69","Number":"7517","RawContent":null,"Title":"Support 16 KB page sizes","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\n\n16 KB Google Play compatibility requirement\nStarting November 1st, 2025, all new apps and updates to existing apps submitted to Google Play and targeting Android 15+ devices must support 16 KB page sizes on 64-bit devices.\n\n**Describe the solution you'd like**\n\nCompile 16 KB-aligned shared libraries\n\n**Describe alternatives you've considered**\n\n\n**Additional context**\n\n","Url":"https://github.com/dotnet/machinelearning/issues/7517","RelatedDescription":"Open issue \"Support 16 KB page sizes\" (#7517)"},{"Id":"3479076528","IsPullRequest":true,"CreatedAt":"2025-10-03T01:22:49","Actor":"tarekgh","Number":"7514","RawContent":null,"Title":"BpeTokenizer Cleanup","State":"closed","Body":"This change is a simple clean-up for the BPE tokenizer:\r\n\r\n* Adds support for `BeginningOfSentenceToken` and `EndOfSentenceToken` when these tokens are not present in the vocabulary but are instead provided as special tokens by the tokenizer.\r\n* Simplifies the implementation of the `Decode` method.","Url":"https://github.com/dotnet/machinelearning/pull/7514","RelatedDescription":"Closed or merged PR \"BpeTokenizer Cleanup\" (#7514)"},{"Id":"3479297049","IsPullRequest":true,"CreatedAt":"2025-10-03T00:42:55","Actor":"ericstj","Number":"7515","RawContent":null,"Title":"Update Windows image, fix mac build","State":"closed","Body":"Public CI doesn't test this.  Will kick off official build\r\n\r\nhttps://dev.azure.com/dnceng/internal/_build/results?buildId=2807210&view=results","Url":"https://github.com/dotnet/machinelearning/pull/7515","RelatedDescription":"Closed or merged PR \"Update Windows image, fix mac build\" (#7515)"},{"Id":"3465721926","IsPullRequest":false,"CreatedAt":"2025-10-01T22:34:41","Actor":"tarekgh","Number":"7512","RawContent":null,"Title":"Added Tokenizer's APIs for v2","State":"closed","Body":"This issue tracks the APIs added to the tokenizer library.\n\n## Proposal\n\n### BpeTokenizer \n\nWe’ve already established a pattern for creating tokenizers using `Tokenizer.Create(...)`. When multiple parameters are required, we wrap them in an `Options` object. For example, `BertTokenizer.Create` accepts a `BertOptions` parameter.\n\nFollowing this pattern, we’re adding a new `Create` method to `BpeTokenizer` and introducing the `BpeOptions` class to encapsulate the parameters passed to `Create`. Currently, `BpeTokenizer` has a `Create` method that takes flat parameters:\n\n```C#\n        public static BpeTokenizer Create(\n                                string vocabFile,\n                                string? mergesFile,\n                                PreTokenizer? preTokenizer = null,\n                                Normalizer? normalizer = null,\n                                IReadOnlyDictionary<string, int>? specialTokens = null,\n                                string? unknownToken = null,\n                                string? continuingSubwordPrefix = null,\n                                string? endOfWordSuffix = null,\n                                bool fuseUnknownTokens = false)\n```\n\nThe proposal here is wrapping all parameters into `BpeOptions` object. \n\n```diff\n\n  namespace Microsoft.ML.Tokenizers\n  {\n      public sealed class BpeTokenizer : Tokenizer\n      {\n+         public static BpeTokenizer Create(BpeOptions options);\n         \n+          public bool? ByteLevel { get; }\n+           public string? BeginningOfSentenceToken { get; }\n\n      }\n\n+     public sealed class BpeOptions\n+     {\n+         public BpeOptions(System.Collections.Generic.IEnumerable<(string, int)> vocabulary);\n+\n+         public string? BeginningOfSentenceToken { get; set; }\n+         public string? ContinuingSubwordPrefix { get; set; }\n+         public string? EndOfSentenceToken { get; set; }\n+         public string? EndOfWordSuffix { get; set; }\n+         public bool? FuseUnknownTokens { get; set; }\n+         public IEnumerable<string>? Merges { get; set; }\n+         public Normalizer? Normalizer { get; set; }\n+         public PreTokenizer? PreTokenizer { get; set; }\n+         public IReadOnlyDictionary<string, int> SpecialTokens { get; set; }\n+         public string? UnknownToken { get; set; }\n+         public IEnumerable<(string, int)> Vocabulary { get; }\n+         public bool? ByteLevel { get; set; }\n+     }\n```\n\n**Notes**\n\n* Added a new `ByteLevel` property to enable BPE tokenizer support for [`ByteLevel`](https://github.com/huggingface/tokenizers/blob/916df542684d5f2333c0ba1140deda64efa5cf91/bindings/python/py_src/tokenizers/implementations/byte_level_bpe.py#L10). This handles vocabularies stored as bytes (typically UTF-8 encoded) and ensures text is pre-tokenized accordingly.\n* Introduced `BeginningOfSentenceToken`, an optional token that can be inserted at the start when encoding text.\n* `Vocab` and `Merges` are now passed as `IEnumerable` to provide flexibility, since these data sources may come from different origins.\n\n### SentencePieceTokenizer \n\nWe already have `LlamaTokenizer.Create`, with `LlamaTokenizer` subclassing `SentencePieceTokenizer`. Since `SentencePieceTokenizer` now supports multiple internal models (`Bpe` and `Unigram`), we should expose the `Create` method directly from `SentencePieceTokenizer` rather than exposing separate classes for each model. The model type is already embedded in the tokenizer file passed to `Create`.\n\n```C#\n        public static new LlamaTokenizer.Create(Stream modelStream, bool addBeginOfSentence = true, bool addEndOfSentence = false, IReadOnlyDictionary<string, int>? specialTokens = null)\n```\n\nThe proposal is to have the following Create method:\n\n```diff\n  namespace Microsoft.ML.Tokenizers\n  {\n\n      public class SentencePieceTokenizer : Microsoft.ML.Tokenizers.Tokenizer\n      {\n+         public static SentencePieceTokenizer Create(Stream modelStream, bool addBeginOfSentence = true, bool addEndOfSentence = false, IReadOnlyDictionary<string, int> specialTokens = null);\n      }\n   }\n```\n\n### CompositePreTokenizer\n\nA pre-tokenizer is used to split input text into smaller chunks before tokenization and encoding. In some scenarios, such as DeepSeek, multiple pre-tokenizers are required to run in sequence. To support this, the proposal is to introduce a `CompositePreTokenizer`, which implements the `PreTokenizer` abstraction.\n\n```diff\n  namespace Microsoft.ML.Tokenizers\n  {\n+     public class CompositePreTokenizer : PreTokenizer\n+     {\n+         public CompositePreTokenizer(IReadOnlyList<Tokenizers.PreTokenizer> preTokenizers, IReadOnlyDictionary<string, int> specialTokens = null);\n+         public IReadOnlyList<PreTokenizer> PreTokenizers { get; }\n\n           public override IEnumerable<(int, int)> PreTokenize(System.ReadOnlySpan<char> text);\n           public override IEnumerable<(int, int)> PreTokenize(string text);\n+     }\n   }\n```","Url":"https://github.com/dotnet/machinelearning/issues/7512","RelatedDescription":"Closed issue \"Added Tokenizer's APIs for v2\" (#7512)"},{"Id":"3474798955","IsPullRequest":true,"CreatedAt":"2025-10-01T22:34:40","Actor":"tarekgh","Number":"7513","RawContent":null,"Title":"Address the design review feedback","State":"closed","Body":"Fixes https://github.com/dotnet/machinelearning/issues/7512","Url":"https://github.com/dotnet/machinelearning/pull/7513","RelatedDescription":"Closed or merged PR \"Address the design review feedback\" (#7513)"},{"Id":"3428821552","IsPullRequest":false,"CreatedAt":"2025-10-01T17:32:09","Actor":"asp2286","Number":"7509","RawContent":null,"Title":"MacOS_x64 Debug/Release build jobs fail in MachineLearning-CI: “Bash exited with code '1' – Install MacOS build dependencies”","State":"closed","Body":" - OS & Version: macOS hosted agents (Azure Pipelines), osx.13 (macOS 13.x), x64 only\n - ML.NET Version: current main (MachineLearning-CI)\n - .NET Version: per repo global.json (targets .NET 8)\n\nIn the MachineLearning-CI pipeline, only the macOS x64 jobs fail at the Install MacOS build dependencies step with:\nBash exited with code '1'\n\nSteps to reproduce the behavior:\n1. Azure DevOps → Pipelines → MachineLearning-CI.\n2. Queue on main with defaults.\n3. Observe MacOS_x64 Debug_Build and MacOS_x64 Release_Build.\n4. See error\n\nExpected behavior\nmacOS x64 Debug/Release should install dependencies and proceed to build/tests like other jobs.\n\nScreenshots\n<img width=\"1709\" height=\"1029\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/bc1c9f24-56b5-4f0b-a79b-3d64ce81e38b\" />\n\nAdditional context\nLikely macOS dependency bootstrap issue, possibly due to:\nHomebrew formula drift (OpenMP): libomp standalone formula may be missing/renamed on current images","Url":"https://github.com/dotnet/machinelearning/issues/7509","RelatedDescription":"Closed issue \"MacOS_x64 Debug/Release build jobs fail in MachineLearning-CI: “Bash exited with code '1' – Install MacOS build dependencies”\" (#7509)"},{"Id":"3429005106","IsPullRequest":true,"CreatedAt":"2025-10-01T17:32:08","Actor":"asp2286","Number":"7510","RawContent":null,"Title":"macOS x64 CI: fix dependency install and OpenMP runtime copy (use Homebrew libomp, adjust Helix payload)","State":"closed","Body":"# PR: macOS x64 CI: fix dependency install and OpenMP runtime copy\r\n\r\n### Summary\r\nThis PR fixes **MachineLearning-CI** failures on **macOS x64** where jobs stop at *Install MacOS build dependencies* with:\r\n\r\n```\r\nBash exited with code '1'\r\n```\r\n\r\nThe breakage comes from two areas:\r\n1. **Dependency install**: The pipeline relied on a custom `libomp.rb` path that no longer works on hosted macOS images.\r\n2. **Helix payload**: The script attempted to copy both `libomp.dylib` and `libiomp5.dylib`, but `libiomp5.dylib` is not available when installing `libomp` from Homebrew core.\r\n\r\n**Fixes #7509**\r\n\r\n---\r\n\r\n### Changes\r\n#### `build/ci/job-template.yml`\r\n- Replace custom `brew install …/build/libomp.rb` with standard Homebrew:\r\n  ```bash\r\n  brew update\r\n  brew install -f --overwrite python@3.13\r\n  brew install libomp\r\n  brew link libomp --force\r\n  ```\r\n- Note added: Homebrew ≥4.6 rejects installing formulae from raw paths.\r\n\r\n#### `eng/helix.proj`\r\n- macOS **x64 only**:\r\n  - Set `DYLD_LIBRARY_PATH` so Helix can find `libomp.dylib`.\r\n  - Copy only `/usr/local/opt/libomp/lib/libomp.dylib` into the publish folder.\r\n  - Remove copying of `libiomp5.dylib` (not present with `libomp` from Homebrew).\r\n  - Add install-name fix so binaries reference `@loader_path/libomp.dylib`.\r\n\r\n---\r\n\r\n### Why\r\n- Hosted macOS runners changed: raw formula paths are blocked, and only `libomp` is available via core.\r\n- Ensures reliable dependency install and payload runtime linking.\r\n- Other platforms (Linux, Windows, macOS arm64) are unaffected.\r\n\r\n---\r\n\r\n### Testing\r\n- Reproduced failure on `osx.13.amd64.open` queue.\r\n- With these changes:\r\n  - Dependency install step completes successfully.\r\n  - `libomp.dylib` is present in publish folder.\r\n  - Helix payload runs with `DYLD_LIBRARY_PATH` set correctly.\r\n- Validated in a test run: both macOS x64 Debug/Release proceed past dependency install and build succeeds.\r\n\r\n---\r\n\r\n### Risk / Impact\r\n- **Low**: scoped only to macOS x64 build dependencies and Helix payload.\r\n- No product code changes, only CI infra adjustments.\r\n\r\n---\r\n\r\n### Additional Notes\r\n- Linux and Windows jobs were already green.\r\n- If maintainers prefer `llvm` over `libomp` as the OpenMP provider, happy to adjust.\r\n\r\n---\r\n\r\n### PR Checklist\r\n- [x] **CLA signed**\r\n- [x] **Tests**: N/A (CI infra only)\r\n- [x] **Docs**: N/A (no public-facing change)\r\n- [x] **Breaking change**: No\r\n- [x] **Linked issue**: #7509\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7510","RelatedDescription":"Closed or merged PR \"macOS x64 CI: fix dependency install and OpenMP runtime copy (use Homebrew libomp, adjust Helix payload)\" (#7510)"},{"Id":"3455354145","IsPullRequest":true,"CreatedAt":"2025-09-26T01:24:01","Actor":"tarekgh","Number":"7511","RawContent":null,"Title":"Mark internal classes as internal","State":"closed","Body":"We unintentionally marked two internal classes as public. The change is to mark them back as internal. ","Url":"https://github.com/dotnet/machinelearning/pull/7511","RelatedDescription":"Closed or merged PR \"Mark internal classes as internal\" (#7511)"}],"ResultType":"GitHubIssue"}},"RunOn":"2025-10-28T03:30:21.6011257Z","RunDurationInMilliseconds":508}