{"Data":{"GitHub":{"Issues":[{"Id":"805757049","IsPullRequest":false,"CreatedAt":"2021-02-18T20:22:35","Actor":"GeorgeS2019","Number":"5618","RawContent":null,"Title":"Microsoft Doc need a main page on OnnxRuntime Csharp (API)","State":"closed","Body":"- **What did you expect?**\r\n- Microsoft Doc need a main page on OnnxRuntime Csharp (API)\r\n- https://www.onnxruntime.ai/docs/reference/api/csharp-api.html#disposablenamedonnxvalue\r\n\r\nBy putting this page as one main Microsoft Doc. we can speed up the feedback loop to drive ONNX for .NET developer\r\n\r\nCurrently, the only Microsoft Doc on ONNX is [microsoft.ml.transforms.onnx](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.onnx?view=ml-dotnet)\r\n\r\nTo drive more interest of Machine Learning using Microsoft technology, we must start with having a main Microsoft Doc on OnnxRuntime Csharp AI\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5618","RelatedDescription":"Closed issue \"Microsoft Doc need a main page on OnnxRuntime Csharp (API)\" (#5618)"},{"Id":"808478714","IsPullRequest":true,"CreatedAt":"2021-02-18T17:44:54","Actor":"esso23","Number":"5623","RawContent":null,"Title":"TimeSeries - fix confidence parameter type for some detectors (#4058)","State":"closed","Body":"Fixes https://github.com/dotnet/machinelearning/issues/4058\r\n\r\n- The public API exposed confidence parameters as int even though it's internally implemented as double\r\n- There was no workaround since all classes where double is used are internal\r\n- This caused major issues for software requiring high precision predictions (we are currently forced to use modified version of ML.NET in our applications)\r\n- This change to API should be backwards compatible since int can be passed to parameter of type double\r\n\r\nEdit: Not sure why the build is not passing. I was able to build the solution without any problems on my Win10 machine.\r\nEdit 2: Oh I see, it breaks the API. But as mentioned above, it should be backwards compatible, because it only replaces int with double.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5623","RelatedDescription":"Closed or merged PR \"TimeSeries - fix confidence parameter type for some detectors (#4058)\" (#5623)"},{"Id":"809316837","IsPullRequest":true,"CreatedAt":"2021-02-18T00:00:57","Actor":"Crabzmatic","Number":"5624","RawContent":null,"Title":"Offer suggestions for possibly mistyped label column names in AutoML (#5574)","State":"closed","Body":"Inconvenience is described in the issue: https://github.com/dotnet/machinelearning/issues/5574.\r\n\r\nClosest named column is found using the Levenshtein distance (https://en.wikipedia.org/wiki/Levenshtein_distance).\r\nAllowable distance is set to 2, as I think this is a good approximation of a small typo. Anyway, code is written in a way that allows this to be changed easily.\r\n\r\nAccompanying unit test is also written.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5624","RelatedDescription":"Closed or merged PR \"Offer suggestions for possibly mistyped label column names in AutoML (#5574)\" (#5624)"},{"Id":"809719895","IsPullRequest":false,"CreatedAt":"2021-02-16T23:19:52","Actor":"jpepg4","Number":"5626","RawContent":null,"Title":"Add way to customize when cross validation is used / easier way to use cross validation with AutoML ","State":"open","Body":"### System information\r\nAutoML 0.17.4\r\n\r\n### Issue\r\n\r\nAfter looking through the code it appears that cross validation will be used in AutoML IF you have less than 15,000 rows and you don't provide a custom validation set.  I would make a couple of recommendations:\r\n\r\n1) Document the 15,000 and the 10 fold somewhere beyond just in the source code.  It was more difficult than it should be to find those 2 numbers\r\n2) Allow the 15,000 and 10 fold to be customized.  I realize that the 10 fold can be changed with an override of the execute method. However it then returns a CrossValidationExperimentResult which requires extensive custom code to retrieve scores averaged over the folds vs. when AutoML automatically chooses to utilize cross validation and generates summary ExperimentResult  \r\n","Url":"https://github.com/dotnet/machinelearning/issues/5626","RelatedDescription":"Open issue \"Add way to customize when cross validation is used / easier way to use cross validation with AutoML \" (#5626)"},{"Id":"809536801","IsPullRequest":false,"CreatedAt":"2021-02-16T18:09:15","Actor":"JakeRadMSFT","Number":"5625","RawContent":null,"Title":"API Proposal: Update PFI API to be easier to use","State":"open","Body":"## Background and Motivation\r\n\r\nThe current PFI API is difficult to use. We've had a few issues opened to make it easier but we can use this issue to track a proposed API.\r\n\r\nPrior Issue:\r\nhttps://github.com/dotnet/machinelearning/issues/4216\r\n\r\nExample Support Issue to help developers use it:\r\nhttps://github.com/dotnet/machinelearning-modelbuilder/issues/1031#issuecomment-708033701\r\n\r\nThe main issue with the API is that it returns an array and it's not easy to get back to the column name/feature name from the index. \r\n\r\n``` C#\r\nVBuffer<ReadOnlyMemory<char>> nameBuffer = default;\r\n            preprocessedTrainData.Schema[\"Features\"].Annotations.GetValue(\"SlotNames\", ref nameBuffer); // NOTE: The column name \"Features\" needs to match the featureColumnName used in the trainer, the name \"SlotNames\" is always the same regardless of trainer.\r\n            var featureColumnNames = nameBuffer.DenseValues().ToList();\r\n\r\n```\r\n\r\nThe second biggest issue (which actually comes earlier in the process :). Is that it's hard to know what to pass for ISingleFeaturePredictionTransformer argument. Perhaps this is something we can figure out how to extract for them from the training pipeline?\r\n\r\n``` C#\r\n// Option 1: to extract predictor, requires to know the type in advance:\r\n            // var predictor = ((TransformerChain<RegressionPredictionTransformer<LightGbmRegressionModelParameters>>)mlModel).LastTransformer;\r\n\r\n            // Option 2: Should work always, as long as you _know_ the predictor is the last transformer in the chain.\r\n            var predictor = ((IEnumerable<ITransformer>)mlModel).Last();\r\n\r\n            // Option 3, need to load from disk the model first\r\n            //var path = @\"C:\\Users\\anvelazq\\Desktop\\PfiSample\\model.zip\";\r\n            //mlContext.Model.Save(mlModel, trainingDataView.Schema, path);\r\n            //var mlModel2 = mlContext.Model.Load(path, out var _);\r\n            //var predictor = ((TransformerChain<ITransformer>) mlModel2).LastTransformer;\r\n\r\n```\r\n If we can do that ... then we can just take in \"Microsoft.ML.IEstimator<Microsoft.ML.ITransformer> estimator\" similar to the CrossValidate APIs.\r\n \r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.ML\r\n{\r\n     public static class PermutationFeatureImportanceExtensions {\r\n\r\n     public static System.Collections.Immutable.ImmutableArray<Microsoft.ML.Data.RegressionMetricsStatistics> PermutationFeatureImportance<TModel> (this Microsoft.ML.RegressionCatalog catalog, Microsoft.ML.ISingleFeaturePredictionTransformer<TModel> predictionTransformer, Microsoft.ML.IDataView data, string labelColumnName = \"Label\", bool useFeatureWeightFilter = false, int? numberOfExamplesToUse = default, int permutationCount = 1) where TModel : class;\r\n+    public static System.Collections.Dictionary<string, Microsoft.ML.Data.RegressionMetricsStatistics> PermutationFeatureImportance<TModel> (this Microsoft.ML.RegressionCatalog catalog, Microsoft.ML.IEstimator<Microsoft.ML.ITransformer> estimator, Microsoft.ML.IDataView data, string labelColumnName = \"Label\", bool useFeatureWeightFilter = false, int? numberOfExamplesToUse = default, int permutationCount = 1) where TModel : class;\r\n     }\r\n```\r\nYou may find the [Framework Design Guidelines](https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/framework-design-guidelines-digest.md) helpful.\r\n\r\n## Usage Examples\r\nThis is how it works today: https://github.com/dotnet/machinelearning-modelbuilder/issues/1031#issuecomment-708033701\r\nBelow is how I think it should work. The key things to note is the similarities to CrossValidate API.\r\n\r\n``` C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing PfiSample.Model;\r\nusing System.Collections.Immutable;\r\n\r\nnamespace PfiSample.ConsoleApp\r\n{\r\n    public static class ModelBuilder\r\n    {\r\n        private static string TRAIN_DATA_FILEPATH = @\"C:\\Users\\anvelazq\\Desktop\\PfiSample\\PfiSample.ConsoleApp\\taxi-fare-train.csv\";\r\n        private static string MODEL_FILE = ConsumeModel.MLNetModelPath;\r\n\r\n        // Create MLContext to be shared across the model creation workflow objects \r\n        // Set a random seed for repeatable/deterministic results across multiple trainings.\r\n        private static MLContext mlContext = new MLContext(seed: 1);\r\n\r\n        public static void CreateModel()\r\n        {\r\n            // Load Data\r\n            IDataView trainingDataView = mlContext.Data.LoadFromTextFile<ModelInput>(\r\n                                            path: TRAIN_DATA_FILEPATH,\r\n                                            hasHeader: true,\r\n                                            separatorChar: ',',\r\n                                            allowQuoting: true,\r\n                                            allowSparse: false);\r\n\r\n            // Build training pipeline and Train Model\r\n\r\n            // Data process configuration with pipeline data transformations \r\n            var dataProcessPipeline = mlContext.Transforms.Categorical.OneHotEncoding(new[] { new InputOutputColumnPair(\"vendor_id\", \"vendor_id\"), new InputOutputColumnPair(\"payment_type\", \"payment_type\") })\r\n                                      .Append(mlContext.Transforms.Concatenate(\"Features\", new[] { \"vendor_id\", \"payment_type\", \"rate_code\", \"passenger_count\", \"trip_time_in_secs\", \"trip_distance\" }));\r\n            // Set the training algorithm \r\n            var trainer = mlContext.Regression.Trainers.LightGbm(labelColumnName: \"fare_amount\", featureColumnName: \"Features\");\r\n\r\n            IEstimator<ITransformer> trainingPipeline = dataProcessPipeline.Append(trainer);\r\n           \r\n           ITransformer model = trainingPipeline.Fit(trainingDataView);\r\n            \r\n            // Calculate PFI\r\n            CalculatePFI(mlContext, trainingDataView, trainingPipeline);\r\n            \r\n            // Evaluate quality of Model\r\n            Evaluate(mlContext, trainingDataView, trainingPipeline);\r\n\r\n            // Save model\r\n            SaveModel(mlContext, mlModel, MODEL_FILE, trainingDataView.Schema);\r\n        }\r\n\r\n\r\n        private static void Evaluate(MLContext mlContext, IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)\r\n        {\r\n            // Cross-Validate with single dataset (since we don't have two datasets, one for training and for evaluate)\r\n            // in order to evaluate and get the model's accuracy metrics\r\n            Console.WriteLine(\"=============== Cross-validating to get model's accuracy metrics ===============\");\r\n            var crossValidationResults = mlContext.Regression.CrossValidate(trainingDataView, trainingPipeline, numberOfFolds: 5, labelColumnName: \"fare_amount\");\r\n            PrintRegressionFoldsAverageMetrics(crossValidationResults);\r\n        }\r\n\r\n        private static void CalculatePFI(MLContext mlContext, IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)\r\n        {\r\n            \r\n\r\n            Dictionary<string, RegressionMetricsStatistics> permutationFeatureImportance =\r\n                mlContext\r\n                .Regression\r\n                .PermutationFeatureImportance(trainingPipeline, trainingDataView, permutationCount: 1, labelColumnName: \"fare_amount\");\r\n\r\n\r\n\r\n            Console.WriteLine(\"Feature\\tPFI\");\r\n            foreach (KeyValuePair<string, RegressionMetricsStatistics> entry in permutationFeatureImportance )\r\n            {\r\n                Console.WriteLine($\"{entry.Key}\\t{entry.Value.RSquared.Mean:F6}\");\r\n            }\r\n        }\r\n\r\n        private static void SaveModel(MLContext mlContext, ITransformer mlModel, string modelRelativePath, DataViewSchema modelInputSchema)\r\n        {\r\n            // Save/persist the trained model to a .ZIP file\r\n            Console.WriteLine($\"=============== Saving the model  ===============\");\r\n            mlContext.Model.Save(mlModel, modelInputSchema, GetAbsolutePath(modelRelativePath));\r\n            Console.WriteLine(\"The model is saved to {0}\", GetAbsolutePath(modelRelativePath));\r\n        }\r\n\r\n        public static string GetAbsolutePath(string relativePath)\r\n        {\r\n            FileInfo _dataRoot = new FileInfo(typeof(Program).Assembly.Location);\r\n            string assemblyFolderPath = _dataRoot.Directory.FullName;\r\n\r\n            string fullPath = Path.Combine(assemblyFolderPath, relativePath);\r\n\r\n            return fullPath;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Alternative Designs\r\nIf there is any opposition or technical challenges for making PFI have a similar API to CrossValidate ... I'm open to alternatives but I don't know the ML.NET APIs well enough to come up with other patterns.\r\n\r\n## Risks\r\nI think the biggest risk/challenge is that folks can do a lot of things with pipelines and models to make them incompatible with PFI. I believe it takes exponentially longer to calculate PFI relative to number of columns. Certain things like OneHotHash can create hundreds of columns ...\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5625","RelatedDescription":"Open issue \"API Proposal: Update PFI API to be easier to use\" (#5625)"},{"Id":"808156562","IsPullRequest":true,"CreatedAt":"2021-02-15T04:32:12","Actor":"dhilmathy","Number":"5622","RawContent":null,"Title":"Removed excessive verbose logging - Info Level","State":"open","Body":"Updated excessive info logging from `Info` to `Trace`. Fixes #5598.\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5622","RelatedDescription":"Open PR \"Removed excessive verbose logging - Info Level\" (#5622)"},{"Id":"806831531","IsPullRequest":false,"CreatedAt":"2021-02-11T23:36:50","Actor":"caitisgreat","Number":"5621","RawContent":null,"Title":"More Parameterized Column Names for .CrossValidate()","State":"open","Body":"### System information\r\n\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.100\r\n Commit:    5044b93829\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0\r\n  Commit:  cf258a14b7\r\n\r\n.NET SDKs installed:\r\n  3.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nML.NET Package Version: v1.5.2\r\n\r\n### Request\r\n\r\nWould it be possible to include the same parameterized column names from the Evaluate method (Multiclass/Binary Classifiers) in the CrossValidate method?  I'm performing a bunch of column manipulation in order to distinguish elements in a sequenced ML pipeline (performing multiclass classification then sentiment analysis)\r\n\r\n### Source code / logs\r\n\r\n![image](https://user-images.githubusercontent.com/26882453/107712748-cd3df180-6c7e-11eb-8dae-44572026e596.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5621","RelatedDescription":"Open issue \"More Parameterized Column Names for .CrossValidate()\" (#5621)"},{"Id":"806331180","IsPullRequest":false,"CreatedAt":"2021-02-11T12:08:05","Actor":"thoron","Number":"5620","RawContent":null,"Title":"System.OperationCanceledException after AutoML experiment","State":"open","Body":"### System information\r\n\r\n> .NET SDK (reflecting any global.json):\r\n>  Version:   5.0.103\r\n>  Commit:    72dec52dbd\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     Windows\r\n>  OS Version:  10.0.19042\r\n>  OS Platform: Windows\r\n>  RID:         win10-x64\r\n>  Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.103\\\r\n> \r\n> Host (useful for support):\r\n>   Version: 5.0.3\r\n>   Commit:  c636bbdc8a\r\n> \r\n> .NET SDKs installed:\r\n>   5.0.103 [C:\\Program Files\\dotnet\\sdk]\r\n> \r\n> .NET runtimes installed:\r\n>   Microsoft.AspNetCore.All 2.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.App 2.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 3.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 5.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.NETCore.App 2.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 3.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 5.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.WindowsDesktop.App 3.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n>   Microsoft.WindowsDesktop.App 5.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n### Issue\r\nAfter an experiment ended (TimeOut elapsed, with `token: CancellationToken.None`) \r\nSometimes the access of `experimentResult.BestRun.Estimator.Fit(_exDataView)` will raise `System.OperationCanceledException`.\r\n\r\n- **What happened?**\r\n\r\n```\r\n System.OperationCanceledException: Operation was canceled.\r\n      at Microsoft.ML.Runtime.Contracts.CheckAlive(IHostEnvironment env)\r\n  at Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Train(IHostEnvironment env, IChannel ch, ColInfo[] infos, IDataView keyData, ColumnOptionsBase[] columns, IDataView trainingData, Boolean autoConvert)\r\n  at Microsoft.ML.Transforms.ValueToKeyMappingTransformer..ctor(IHostEnvironment env, IDataView input, ColumnOptionsBase[] columns, IDataView keyData, Boolean autoConvert)\r\n  at Microsoft.ML.Transforms.ValueToKeyMappingEstimator.Fit(IDataView input)\r\n  at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n  at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n  at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n  at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n```\r\n\r\n- **What did you expect?**\r\n\r\nThis exception does not occur all the time when accessing `BestRun` prop.\r\n\r\n### Source code / logs\r\n```\r\nvar experimentSettings = new MulticlassExperimentSettings\r\n{\r\n    MaxExperimentTimeInSeconds = _maxExperimentTimeInSeconds,\r\n    CancellationToken = pManager.Token, // CancellationToken.None\r\n    OptimizingMetric = MulticlassClassificationMetric.MacroAccuracy\r\n}\r\nvar experiment= _mlContext.Auto().CreateMulticlassClassificationExperiment(experimentSettings);\r\nvar experimentResult= experiment.Execute(_trainDataView, progressHandler: experimentProgress,\r\n                preFeaturizer: _mlContext.Transforms.DropColumns(\"LabelFeaturized\"));\r\nexperimentResult.BestRun.Estimator.Fit(_trainDataView);\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/5620","RelatedDescription":"Open issue \"System.OperationCanceledException after AutoML experiment\" (#5620)"},{"Id":"806123829","IsPullRequest":false,"CreatedAt":"2021-02-11T06:44:17","Actor":"daryalove","Number":"5619","RawContent":null,"Title":"Error 'Could not find feature column 'Image' (Parameter 'inputSchema')' converting models to ONNX trained with the ML.NET Image Classification API","State":"open","Body":"Hi, \r\n\r\nI am trying to convert a trained ML.NET model (model.pb) into onnx format. I need to convert the trained model to onnx format for Object Detection Algorithm: https://docs.microsoft.com/ru-ru/dotnet/machine-learning/tutorials/object-detection-onnx\r\n\r\nI used this method for converting:\r\n`mlContext.Model.ConvertToOnnx(trainedModel, imageData, writingStream);`\r\n\r\nBut I caught the error: Could not find feature column 'Image' (Parameter 'inputSchema')\r\nCan I convert the ML.NET model into onnx format using ML.OnnxConverter? Or are there any ways of creating the custom object detection model (without Azure)? Please, help me with this issue.\r\n\r\nMy source code:\r\n\r\n`using Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Vision;\r\nusing RopeDetection.Shared;\r\nusing RopeDetection.Shared.DataModels;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing static Microsoft.ML.DataOperationsCatalog;\r\n\r\nnamespace RopeDetection.Train\r\n{\r\n    public class ModelBuilder\r\n    {\r\n        private static string projectDirectory = System.IO.Path.GetFullPath(System.IO.Path.Combine(AppContext.BaseDirectory, \"../../../../\"));\r\n        private static string workspaceRelativePath = System.IO.Path.Combine(projectDirectory, \"RopeDetection.Train\", \"workspace\");\r\n        private static string assetsRelativePath = System.IO.Path.Combine(projectDirectory, \"RopeDetection.Train\", \"assets\");\r\n\r\n        private static string modelDirectory = Path.GetFullPath(System.IO.Path.Combine(AppContext.BaseDirectory, \"../../../../\"));\r\n        private static string path = System.IO.Path.Combine(modelDirectory, \"RopeDetection.Predict\", \"MLNETModel\", \"model2.zip\");\r\n        private static string onnx_path = System.IO.Path.Combine(modelDirectory, \"RopeDetection.Predict\", \"MLNETModel\", \"model.onnx\");\r\n        public static string ModelPath = \"\";\r\n        \r\n        private static IDataView testSet;\r\n        private static ITransformer trainedModel;\r\n        private static IDataView shuffledData;\r\n\r\n        private static MLContext mlContext = new MLContext(seed: 1);\r\n      \r\n\r\n        public static void CreateModel(string modelId = null)\r\n        {\r\n            try\r\n            {\r\n               \r\n                IEnumerable<ImageData> images = FileUtils.LoadImagesFromDirectory(folder: assetsRelativePath, useFolderNameAsLabel: true);\r\n            \r\n                \r\n                IDataView imageData = mlContext.Data.LoadFromEnumerable(images);\r\n                var DataList = images.ToList();\r\n              \r\n                shuffledData = mlContext.Data.ShuffleRows(imageData);\r\n\r\n                // Build training pipeline\r\n                IEstimator<ITransformer> trainingPipeline = BuildTrainingPipeline(mlContext);\r\n\r\n               \r\n                IDataView preProcessedData = trainingPipeline\r\n                        .Fit(shuffledData)\r\n                        .Transform(shuffledData);\r\n\r\n                \r\n\r\n                TrainTestData trainSplit = mlContext.Data.TrainTestSplit(data: preProcessedData, testFraction: 0.3);\r\n                TrainTestData validationTestSplit = mlContext.Data.TrainTestSplit(trainSplit.TestSet);\r\n\r\n                IDataView trainSet = trainSplit.TrainSet;\r\n                IDataView validationSet = validationTestSplit.TrainSet;\r\n                testSet = validationTestSplit.TestSet;\r\n\r\n                // Defining the learning pipeline\r\n                var classifierOptions = new ImageClassificationTrainer.Options()\r\n                {\r\n                    FeatureColumnName = \"Image\",\r\n                    LabelColumnName = \"LabelAsKey\",\r\n                    ValidationSet = validationSet,\r\n                    Arch = ImageClassificationTrainer.Architecture.ResnetV2101,\r\n                    MetricsCallback = (metrics) => Console.WriteLine(metrics),\r\n                    TestOnTrainSet = false,\r\n                    ReuseTrainSetBottleneckCachedValues = true,\r\n                    ReuseValidationSetBottleneckCachedValues = true,\r\n                    WorkspacePath = workspaceRelativePath,\r\n                };\r\n\r\n                trainingPipeline = mlContext.MulticlassClassification.Trainers.ImageClassification(classifierOptions)\r\n        .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\n\r\n                // Train Model\r\n                trainedModel = TrainModel(trainingPipeline, trainSet);\r\n\r\n                // Create Stream object via Constructor of FileStream.\r\n                // FileMode.Create: Create file, if it already exists, it will be overwritten.\r\n                Stream writingStream = new FileStream(onnx_path, FileMode.Create);\r\n                mlContext.Model.ConvertToOnnx(trainedModel, imageData, writingStream);\r\n\r\n                // Evaluate quality of Model\r\n                //Evaluate(mlContext, imageData, trainingPipeline);\r\n\r\n                // Save model\r\n                SaveModel(trainSet, modelId);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                throw new Exception(ex.Message);\r\n            }\r\n        }`\r\n        `public static IEstimator<ITransformer> BuildTrainingPipeline(MLContext mlContext)\r\n        {\r\n            \r\n            IEstimator<ITransformer> preprocessingPipeline = mlContext.Transforms.Conversion.MapValueToKey(\r\n                inputColumnName: \"Label\",\r\n                outputColumnName: \"LabelAsKey\")\r\n            .Append(mlContext.Transforms.LoadRawImageBytes(\r\n                outputColumnName: \"Image\",\r\n                imageFolder: assetsRelativePath,\r\n                inputColumnName: \"ImagePath\"));\r\n\r\n          \r\n            return preprocessingPipeline;\r\n        }\r\n\r\n        public static ITransformer TrainModel(IEstimator<ITransformer> trainingPipeline, IDataView trainSet)\r\n        {\r\n            Console.WriteLine(\"=============== Training  model ===============\");\r\n\r\n            trainedModel = trainingPipeline.Fit(trainSet);\r\n\r\n            Console.WriteLine(\"=============== End of training process ===============\");\r\n            return trainedModel;\r\n        }`\r\n\r\n`private static void SaveModel(IDataView trainSet, string modelId)\r\n        {\r\n            // Save/persist the trained model to a .ZIP file\r\n            Console.WriteLine($\"=============== Saving the model  ===============\");\r\n\r\n            mlContext.Model.Save(trainedModel, trainSet.Schema, path);\r\n\r\n            if (!string.IsNullOrEmpty(modelId))\r\n            {\r\n                ModelPath = Path.Combine(Directory.GetCurrentDirectory(), @\"wwwroot\\files\\trained_models\", modelId + \".zip\");\r\n                mlContext.Model.Save(trainedModel, trainSet.Schema, ModelPath);\r\n            }\r\n     \r\n            Console.WriteLine(\"The model is saved to {0} \", path);\r\n        }\r\n`\r\n\r\n### System information\r\n\r\n- Windows 10 Pro:\r\n- .NET Core SDK:\r\n Version:   3.1.403\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5619","RelatedDescription":"Open issue \"Error 'Could not find feature column 'Image' (Parameter 'inputSchema')' converting models to ONNX trained with the ML.NET Image Classification API\" (#5619)"},{"Id":"804974975","IsPullRequest":false,"CreatedAt":"2021-02-10T21:34:52","Actor":"Titouan128","Number":"5617","RawContent":null,"Title":"ml.net Unable to cast object of type 'System.Double' to type 'System.Single'","State":"closed","Body":"C# with ml.net\r\n### Issue\r\n\r\n- when I train the model with **fit** ([https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.data.estimatorchain-1.fit?view=ml-dotnet](url)), I get an exception:\r\n\r\n_System.InvalidOperationException_\r\n[...]\r\n_Inner Exception 1:_\r\n_InvalidOperationException: Splitter/consolidator worker encountered exception while consuming source data_\r\n\r\n_Inner Exception 2:_\r\n_InvalidOperationException: Splitter/consolidator worker encountered exception while consuming source data_\r\n\r\n_Inner Exception 3:_\r\n_InvalidCastException: Unable to cast object of type 'System.Double' to type 'System.Single'._\r\n\r\n### Source code\r\n\r\n`IEstimator<ITransformer> pipeline =\r\n                                        mlContext.Transforms.Categorical.OneHotEncoding(new[] { new InputOutputColumnPair(\"Competition\", \"Competition\") })\r\n                                        .Append(mlContext.Transforms.Categorical.OneHotHashEncoding(new[] { new InputOutputColumnPair(\"Team1\", \"Team1\"), new InputOutputColumnPair(\"Team2\", \"Team2\"), new InputOutputColumnPair(\"EndBet\", \"EndBet\") }))\r\n                                        .Append(mlContext.Transforms.Concatenate(\"Features\", new[] { \"Competition\", \"Team1\", \"Team2\", \"EndBet\", \"DiffRank\", \"DiffPoint\", \"WinAllMeet\", \"DiffAvgGoals\", \"AvgGoals\", \"DiffOverallGoals\", \"DiffBetterVictory\", \"BetterVictory\", \"DiffLatsMatch1\", \"DiffLatsMatch2\", \"DiffLatsMatch3\", \"DiffLatsMatch4\", \"DiffLatsMatch5\", \"DiffLatsMatchAll\" }))\r\n                                        .AppendCacheCheckpoint(mlContext)\r\n                                        .Append(mlContext.Regression.Trainers.FastTree(labelColumnName: \"FinalResult\"));\r\nvar model = pipeline.Fit(trainData);`\r\n\r\n- Columns are loaded from a database:\r\n\r\n`[ColumnName(\"FinalResult\"), LoadColumn(0)]\r\n        public float FinalResult { get; set; }\r\n\r\n        [ColumnName(\"Team1\"), LoadColumn(1)]\r\n        public string Team1 { get; set; }\r\n\r\n        [ColumnName(\"Team2\"), LoadColumn(2)]\r\n        public string Team2 { get; set; }\r\n\r\n        [ColumnName(\"Competition\"), LoadColumn(3)]\r\n        public string Competition { get; set; }\r\n\r\n        [ColumnName(\"DiffRank\"), LoadColumn(4)]\r\n        public float DiffRank { get; set; }\r\n\r\n        [ColumnName(\"DiffPoint\"), LoadColumn(5)]\r\n        public float DiffPoint { get; set; }[...]`\r\n\r\n\r\n**Any ideas?**","Url":"https://github.com/dotnet/machinelearning/issues/5617","RelatedDescription":"Closed issue \"ml.net Unable to cast object of type 'System.Double' to type 'System.Single'\" (#5617)"},{"Id":"804791801","IsPullRequest":true,"CreatedAt":"2021-02-10T18:40:46","Actor":"dotnet-bot","Number":"5616","RawContent":null,"Title":"[master] NuGet Feed Update","State":"closed","Body":"# NuGet Feed Update\r\nThis pull request updates the usage of NuGet.org in cases where it is used in conjunction with other feeds.\r\n\r\n## Is this PR required?\r\nGenerally yes. If the target branch is no longer in use and will not need to be built in the future, please close this PR.\r\n\r\n## This PR is broken build, what do I do?\r\nIf packages are missing, please tag 'dotnet/dnceng' or 'mmitche' on this PR and note the missing packages.\r\nIf there are other unexpected failures, please contact 'dotnet/dnceng'.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5616","RelatedDescription":"Closed or merged PR \"[master] NuGet Feed Update\" (#5616)"},{"Id":"804084895","IsPullRequest":true,"CreatedAt":"2021-02-09T17:14:19","Actor":"michaelgsharp","Number":"5614","RawContent":null,"Title":"fixed nuget.config multi-feed","State":"closed","Body":"This fixes the nuget multi-feed issue we are having with out trusted-build.","Url":"https://github.com/dotnet/machinelearning/pull/5614","RelatedDescription":"Closed or merged PR \"fixed nuget.config multi-feed\" (#5614)"},{"Id":"804699821","IsPullRequest":false,"CreatedAt":"2021-02-09T16:17:56","Actor":"luisquintanilla","Number":"5615","RawContent":null,"Title":"MacOS fails to install libomp","State":"open","Body":"Copying issue raised by user dotnet/docs#21225\r\n\r\n```\r\nRunnning brew update && brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/f5b1ac99a7fba27c19cee0bc4f036775c889b359/Formula/libomp.rb && brew link libomp --force fails with the error:\r\n\r\nError: Calling Installation of libomp from a GitHub commit URL is disabled! Use 'brew extract libomp' to stable tap on GitHub instead.\r\n\r\nHomebrew 2.5.7-2-gc8fcd05\r\nHomebrew/homebrew-core (git revision cba702; last commit 2020-10-26)\r\nHomebrew/homebrew-cask (git revision 8de20; last commit 2020-10-26)\r\n\r\nMacOS: 10.15.7\r\n```\r\n\r\nPlease confirm that the Mac instructions in the doc are still valid:\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/install-extra-dependencies\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5615","RelatedDescription":"Open issue \"MacOS fails to install libomp\" (#5615)"},{"Id":"803824022","IsPullRequest":false,"CreatedAt":"2021-02-08T18:40:15","Actor":"tghamm","Number":"5613","RawContent":null,"Title":"AutoML + Can't create PredictionEngine because of type error","State":"open","Body":"### System information\r\n\r\n- **Windows 10.0.19042**:\r\n- **.NET 3.1.11**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI'm using AutoML to train and save a model.  When I try to create a `PredictionEngine` it complains about the schema.\r\n- **What happened?**\r\nI successfully generated a model from a combination of bool, string, and float columns.  When I recall that model and try and instantiate a PredictionEngine, the main string property causes an InvalidOperationException because it is expecting type `Vector<Single,55536>` instead of `System.String`.\r\n- **What did you expect?**\r\nLike my other models that use strings, I expected that it would work fine with the strings.\r\n### Source code / logs\r\n```c#\r\n public class FBResultData\r\n    {\r\n        [LoadColumn(0)]\r\n        public string EventValue { get; set; }\r\n.......\r\n        [LoadColumn(14), ColumnName(\"Label\")]\r\n        public bool NotificationSent { get; set; }\r\n    }\r\n```\r\n```c#\r\npublic IDataView LoadFBResultData(MLContext mlContext)\r\n        {\r\n\r\n//loads data into a List<FBResultData>\r\n            var data = GetFBData();\r\n            \r\n\r\n            IDataView dataView = mlContext.Data.LoadFromEnumerable(data,\r\n                SchemaDefinition.Create(typeof(FBResultData), SchemaDefinition.Direction.Both));\r\n\r\n            return dataView;\r\n        }\r\n```\r\n```c#\r\npublic ContextAnalyzerService()\r\n        {\r\n            \r\n            _fbContext = new MLContext();\r\n            _fbModel =\r\n                _fbContext.Model.Load(GetModel(ModelType.FBResult), out schema);\r\n\r\n        }\r\n\r\n        public FBResultDataPrediction AnalyzeFB(FBResultData result)\r\n        {\r\n            var res = new ContextResult();\r\n            //the line below produces an InvalidOperationException\r\n            var predictionFunction = _fbContext.Model.CreatePredictionEngine<FBResultData, FBResultDataPrediction>(_fbModel);\r\n            return sentiment;\r\n        }\r\n```\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n![image](https://user-images.githubusercontent.com/5253107/107266085-070ac000-6a13-11eb-93d5-9b38e0788a22.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5613","RelatedDescription":"Open issue \"AutoML + Can't create PredictionEngine because of type error\" (#5613)"},{"Id":"802002319","IsPullRequest":false,"CreatedAt":"2021-02-05T09:28:47","Actor":"aforoughi1","Number":"5612","RawContent":null,"Title":"How to get around the exception caused because of #5506 fix?","State":"open","Body":"Using the AutoML version 0.17.2 and 0.17.4, I get a few exceptions during SdcaRegression (simillar to #4363)\r\nHowever, a new behaviour using 0.17.4, I get the AggregateException (changes because of #5445).\r\n\r\nException during AutoML iteration: System.InvalidOperationException: The weights/bias contain invalid values (NaN or Infinite). Potential causes: high learning rates, no normalization, high initial weights, etc.\r\n   at Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String groupId, String labelColumn, IMetricsAgent`1 \r\nmetricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, IChannel logger)\r\n\r\n\r\n\r\nSystem.AggregateException\r\n  HResult=0x80131500\r\n  Message=One or more errors occurred. (Operation was canceled.) (Operation was canceled.) (Operation was canceled.) (Operation was canceled.)\r\n  Source=System.Private.CoreLib\r\n  StackTrace:\r\n   at System.ThrowHelper.ThrowAggregateException(List`1 exceptions)\r\n   at System.Threading.Tasks.Task.WaitAllCore(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Parallel.Invoke(ParallelOptions parallelOptions, Action[] actions)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw(Exception source)\r\n   at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)\r\n   at System.Threading.Tasks.Parallel.Invoke(ParallelOptions parallelOptions, Action[] actions)\r\n   at Microsoft.ML.Trainers.FastTree.ThreadTaskManager.ThreadTask.RunTask()\r\n   at Microsoft.ML.Trainers.FastTree.LeastSquaresRegressionTreeLearner.FindBestSplitOfRoot(Double[] targets)\r\n   at Microsoft.ML.Trainers.FastTree.LeastSquaresRegressionTreeLearner.FitTargets(IChannel ch, Boolean[] activeFeatures, Double[] targets)\r\n   at Microsoft.ML.Trainers.FastTree.RandomForestLeastSquaresTreeLearner.FitTargets(IChannel ch, Boolean[] activeFeatures, Double[] weightedtargets, Double[] targets, Double[] weights)\r\n   at Microsoft.ML.Trainers.FastTree.RandomForestOptimizer.TrainingIteration(IChannel ch, Boolean[] activeFeatures)\r\n   at Microsoft.ML.Trainers.FastTree.FastTreeTrainerBase`3.Train(IChannel ch)\r\n   at Microsoft.ML.Trainers.FastTree.FastTreeTrainerBase`3.TrainCore(IChannel ch)\r\n   at Microsoft.ML.Trainers.FastTree.FastForestRegressionTrainer.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.AutoML.SmacSweeper.FitModel(IEnumerable`1 previousRuns)\r\n   at Microsoft.ML.AutoML.SmacSweeper.ProposeSweeps(Int32 maxSweeps, IEnumerable`1 previousRuns)\r\n   at Microsoft.ML.AutoML.PipelineSuggester.SampleHyperparameters(MLContext context, SuggestedTrainer trainer, IEnumerable`1 history, Boolean isMaximizingMetric, IChannel logger)\r\n   at Microsoft.ML.AutoML.PipelineSuggester.GetNextInferredPipeline(MLContext context, IEnumerable`1 history, DatasetColumnInfo[] columns, TaskKind task, Boolean isMaximizingMetric, CacheBeforeTrainer cacheBeforeTrainer, IChannel logger, IEnumerable`1 trainerAllowList)\r\n   at Microsoft.ML.AutoML.Experiment`2.Execute()\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.Execute(ColumnInformation columnInfo, DatasetColumnInfo[] columns, IEstimator`1 preFeaturizer, IProgress`1 progressHandler, IRunner`1 runner)\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.ExecuteTrainValidate(IDataView trainData, ColumnInformation columnInfo, IDataView validationData, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.Execute(IDataView trainData, IDataView validationData, ColumnInformation columnInformation, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.Execute(IDataView trainData, IDataView validationData, String labelColumnName, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n   at AutoMLApp.Experiment2Template.Train() in C:\\Users\\abbas\\OneDrive\\Documents\\WorkingProgress\\MLStcokMarketPrediction\\AutoMLApp\\Class1.cs:line 446\r\n   at AutoMLApp.MlModelTemplate.BuildModel() in C:\\Users\\abbas\\OneDrive\\Documents\\WorkingProgress\\MLStcokMarketPrediction\\AutoMLApp\\Class1.cs:line 363\r\n   at AutoMLApp.MlExperimentsFactory.Experiment2Tasks(Kind kind, OutputLabels op, BinaryClassificationMetric optimizingMetric, List`1 trainers) in C:\\Users\\abbas\\OneDrive\\Documents\\WorkingProgress\\MLStcokMarketPrediction\\AutoMLApp\\Class1.cs:line 177\r\n   at AutoMLApp.MlExperimentsFactory.<>c__DisplayClass30_1.<GetTask>b__1() in C:\\Users\\abbas\\OneDrive\\Documents\\WorkingProgress\\MLStcokMarketPrediction\\AutoMLApp\\Class1.cs:line 135\r\n   at AutoMLApp.MlExperimentsFactory.StartNew(String ticker, ExperimentElementCollection expColl, PredictionTestDataElement testData) in C:\\Users\\abbas\\OneDrive\\Documents\\WorkingProgress\\MLStcokMarketPrediction\\AutoMLApp\\Class1.cs:line 109\r\n   at AutoMLApp.Program.Main(String[] args) in C:\\Users\\abbas\\OneDrive\\Documents\\WorkingProgress\\MLStcokMarketPrediction\\AutoMLApp\\Program.cs:line 31\r\n\r\n  This exception was originally thrown at this call stack:\r\n    [External Code]\r\n\r\nInner Exception 1:\r\nOperationCanceledException: Operation was canceled.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5612","RelatedDescription":"Open issue \"How to get around the exception caused because of #5506 fix?\" (#5612)"},{"Id":"799670921","IsPullRequest":true,"CreatedAt":"2021-02-03T01:22:43","Actor":"LittleLittleCloud","Number":"5611","RawContent":null,"Title":"Make ColumnInference serializable","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n# What does this PR do?\r\nThis PR adds `JsonProperty` attribution to `AutoML.ColumnInference`'s properties so it can be serialized and de-serialized to/from json using NewtonSoft.Net.\r\n\r\nPlus, this PR also make changes to `Assembly.cs` of `Microsoft.ML.AutoML` and `Microsoft.ML.CodeGenerator` so that their internal classes are visible to ModelBuilder.\r\n\r\n# What's the purpose of this PR?\r\nTo enable ModelBuilder re-entrancy feature.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5611","RelatedDescription":"Closed or merged PR \"Make ColumnInference serializable\" (#5611)"},{"Id":"799554370","IsPullRequest":false,"CreatedAt":"2021-02-02T18:27:41","Actor":"bbday","Number":"5610","RawContent":null,"Title":"Use function to create dynamic Bitmap runtime","State":"open","Body":"I would like to build a Image Classificator with ml.net, the classification should be by auto rotate image.\r\nIdea is have X images rotated right, then create dynamic at runtime Z images for each X rotated ad random value than use rotation as Label.\r\nI need to rotate at runtime cause train set is around 2gb, do on disk for random angles will require around 1Tb and is not possible.\r\n\r\n```\r\nIDataView shuffledFullImagesDataset = mlContext.Transforms.Conversion.\r\n                MapValueToKey(outputColumnName: \"LabelAsKey\", inputColumnName: nameof(ImageData.Label), keyOrdinality: ValueToKeyMappingEstimator.KeyOrdinality.ByValue)\r\n                .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"ImgInput\", inputColumnName: \"Image\"))\r\n\r\n        public ImageData(string pathFile, int label)\r\n        {\r\n            PathFile = pathFile;\r\n            Label = label;\r\n        }\r\n\r\n        [ImageType(110, 110)]\r\n        public Bitmap Image => BitmapHelper.GetRotatedByteArrayToBitmap(File.ReadAllBytes(PathFile), Label);\r\n\r\n        public readonly int Label;\r\n\r\n        public readonly string PathFile;\r\n```\r\nBut i have error when try to call Image look like not exist.\r\nI found a python script that use keras to create random Imgs rotared at runtime when elaborate each Batch, then will avoid to allocate so much memory, but i didnt found some behavior on ml.net, look like it wanna allocate all imgs before training.","Url":"https://github.com/dotnet/machinelearning/issues/5610","RelatedDescription":"Open issue \"Use function to create dynamic Bitmap runtime\" (#5610)"},{"Id":"799542514","IsPullRequest":false,"CreatedAt":"2021-02-02T18:14:15","Actor":"jpepg4","Number":"5609","RawContent":null,"Title":"Add missing trainers to AutoML BinaryClassificationExperiment ","State":"open","Body":"### System information\r\n\r\nAutoML 0.17.4 \r\n\r\n### Issue\r\n\r\nAutoML BinaryClassificationExperiment is currently missing support for several binary classification trainers (LDSVM, GAM, etc).  In particular adding LDSVM would be helpful as it has a large number of parameters and it isn't really overlapped with other existing trainers.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5609","RelatedDescription":"Open issue \"Add missing trainers to AutoML BinaryClassificationExperiment \" (#5609)"},{"Id":"799520146","IsPullRequest":false,"CreatedAt":"2021-02-02T17:50:16","Actor":"jpepg4","Number":"5608","RawContent":null,"Title":"Improve/Add new AutoML Sweeping Algorithms","State":"open","Body":"### System information\r\n\r\nWindows 10\r\nAutoML 0.17.4 \r\nMicrosoft.ML 1.5.4\r\n\r\n### Issue\r\n\r\nWhen running an experiment AutoML, often after as little as one run, will quickly fixate on 2 trainers until completion.  While this can produce optimal results for those trainers, in ignoring other options it will often miss the best result.  In particular it has a propensity to fixate on the faster logistic regressions vs. slower (but often more effective) SVM, Trees, or GBM trainers. The only workaround seems to be using something like the code below to test two trainers at a time until the best one is found.\r\nexperimentSettings.Trainers.Clear();\r\nexperimentSettings.Trainers.Add(BinaryClassificationTrainer.LinearSvm);\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5608","RelatedDescription":"Open issue \"Improve/Add new AutoML Sweeping Algorithms\" (#5608)"},{"Id":"799508738","IsPullRequest":false,"CreatedAt":"2021-02-02T17:37:58","Actor":"jpepg4","Number":"5607","RawContent":null,"Title":"NimbusML Archived?","State":"open","Body":"I noticed that NimbusML has been archived.  As ML.NET evolves will Microsoft be providing a different path to run the platform through Python?  A couple of the models in ML.NET are unique and produce very good results but having this accessibility on the more commonly used Python platform is important for adaptation.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5607","RelatedDescription":"Open issue \"NimbusML Archived?\" (#5607)"},{"Id":"796237997","IsPullRequest":false,"CreatedAt":"2021-01-28T18:14:06","Actor":"clthorre","Number":"5606","RawContent":null,"Title":"Cannot use LearnerFeatureSelectionTransform due to \"does not derive from 'Microsoft.ML.ITrainer\" error","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: ubuntu 18.04\r\n- **.NET Version (eg., dotnet --info)**:  2.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI build mlnet from source and I'm running a command like this:\r\n`dotnet path_to/MML.dll Train trainer=LightGBMBinary{} loader=TextLoader{col=Label:R4:0 col=Features:R4:1-5 col=Text:TX:6  hasHeader=-} xf=TextTransform{col=TextTransformed:Text wordExtractor=NGramExtractorTransform{ngram=2}} xf=LearnerFeatureSelectionTransform{topk=1000 f=AveragedPerceptron{iter=10} feat=TextTransformed} xf=Concat{col=Features:Features,TextTransformed} cache=- randomSeed=1 norm=No v=+`\r\n\r\n- **What happened?**\r\nThe program failed with this error:\r\n\r\nError during class instantiation\r\nLoadable class 'AveragedPerceptron' does not derive from 'Microsoft.ML.ITrainer`1[[Microsoft.ML.Model.IPredictorWithFeatureWeights`1[[System.Single, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.ML.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]]'\r\n\r\nException context:\r\n    Throwing component: Environment\r\n\r\n\r\n- **What did you expect?**\r\nI expected it to train a model using the LearnerFeatureSelectionTransform on the Text features.\r\n\r\nI think it may be related to this issue: https://github.com/dotnet/machinelearning/issues/726\r\nThe code has this comment which may also be related. https://github.com/dotnet/machinelearning/blob/5dbfd8acac0bf798957eea122f1413209cdf07dc/src/Microsoft.ML.Transforms/LearnerFeatureSelection.cs#L43\r\n\r\n// ML.Transforms doesn't have a direct reference to ML.StandardTrainers, so use ComponentCatalog to create the Filter\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5606","RelatedDescription":"Open issue \"Cannot use LearnerFeatureSelectionTransform due to \"does not derive from 'Microsoft.ML.ITrainer\" error\" (#5606)"},{"Id":"794608416","IsPullRequest":true,"CreatedAt":"2021-01-28T07:39:37","Actor":"michaelgsharp","Number":"5601","RawContent":null,"Title":"Release/1.5.2 nuget fixes","State":"closed","Body":"Since the myget feeds are deprecated, this PR is to change the feeds to the new URLs. Any version changes are due to different version being in the new feeds. It is the same fix as #5599, expect that since this release is on the old build system, it has additional changes relating to that.\r\n\r\nI decided to fix this release since its the last one on the old build system and its also the last release that uses version 1 of tensorflow. I can imagine that people who can't upgrade to version 2 will need to use this in the future.","Url":"https://github.com/dotnet/machinelearning/pull/5601","RelatedDescription":"Closed or merged PR \"Release/1.5.2 nuget fixes\" (#5601)"},{"Id":"795552318","IsPullRequest":true,"CreatedAt":"2021-01-28T00:14:16","Actor":"michaelgsharp","Number":"5604","RawContent":null,"Title":"Release/1.5.4 fix","State":"closed","Body":"Monday I made this PR but I accidentally had it go into master (#5599). Since the same code was already in there, it caused no code changes. This PR is to actually take the changes to fix the nuget feeds into the correct release/1.5.4 branch.","Url":"https://github.com/dotnet/machinelearning/pull/5604","RelatedDescription":"Closed or merged PR \"Release/1.5.4 fix\" (#5604)"},{"Id":"795429145","IsPullRequest":false,"CreatedAt":"2021-01-27T20:42:18","Actor":"Pierre-datascience","Number":"5603","RawContent":null,"Title":"Discrepancies between nimbusml.LightGbmClassifier and lightgbm.LGBMClassifier scores","State":"open","Body":"### System information\r\n\r\n- **OS**\r\ncompiler   : GCC 7.5.0\r\nsystem     : Linux\r\nrelease    : 4.19.121-linuxkit\r\nmachine    : x86_64\r\nprocessor  : x86_64\r\nCPU cores  : 10\r\ninterpreter: 64bit\r\n\r\n- **libraries (including nimbusml)**: \r\nnumpy 1.19.2\r\npandas 0.25.3\r\nlightgbm 2.3.1\r\nnimbusml 1.8.0\r\n\r\n### Issue\r\n\r\nHello!\r\n\r\nI've been experimenting with nimbusml.LightGbmClassifier to replicate the results from the actual lightgbm.LGBMClassifier.\r\n\r\nFirst, I mapped all the parameters from NimbusML to the LightGBM equivalents (https://lightgbm.readthedocs.io/en/latest/pythonapi/lightgbm.LGBMClassifier.html). It seems that some parameters are missing from the NimbusML implementation (like `subsample_for_bin`). In principle, both models should be identical.\r\n\r\nThen, I trained the two models on a toy dataset with 100_000 rows and only 1 column. As you can see below, the stdout/stderr from the .fit() returns the same info (Total Bins=255, Start training from score=0.003080). But the predicted probabilities are slightly different, while I would expect them to be exactly the same.\r\n\r\nGiven the parameters I chose, there shouldn't be any source of randomness, as confirmed by the use of different random seeds for the lightgbm that give the same results. But when I change the `random_state` to None for the nimbusml model, the results are different.\r\n\r\nSo my two (related) questions are\r\n- why are the results different given all parameters (including random state) are identical?\r\n- why changing `random_state` to None gives different results for the nimbusml model? Even though there's no randomness from the model in this example.\r\n\r\n### Source code / logs\r\n\r\n```python3\r\n\r\nfrom nimbusml.ensemble import LightGbmBinaryClassifier\r\nfrom nimbusml.ensemble.booster import Gbdt\r\n\r\nfrom lightgbm import LGBMClassifier\r\n\r\nnimbus_params={\r\n    'number_of_iterations': 1,  # n_estimators\r\n    'learning_rate': 0.1,  # learning_rate\r\n    # subsample_for_bin=200_000,\r\n    'number_of_leaves': 100,  # num_leaves\r\n    'minimum_example_count_per_leaf': 5_000,  # min_child_samples\r\n    'booster': Gbdt(\r\n        feature_fraction=1.0,  # colsample_bytree,\r\n        l1_regularization=0.0,  # reg_alpha\r\n        l2_regularization=0.0,  # reg_lambda\r\n        maximum_tree_depth=0,  # max_depth\r\n        minimum_child_weight=0.001,  # min_child_weight\r\n        minimum_split_gain=0.0,  # min_split_gain\r\n        subsample_fraction=1.0,  # subsample\r\n        subsample_frequency=0,  # subsample_freq\r\n    ),\r\n    'unbalanced_sets': False,  # is_unbalance\r\n    'sigmoid': 1.0,  # sigmoid\r\n    'evaluation_metric': 'Logloss',  # metric\r\n    'maximum_bin_count_per_feature': 254,  # max_bin (matches the 255 from ligthgbm)\r\n    'verbose': 10,  # verbose\r\n    'silent': False,  # silent\r\n    'number_of_threads': 1,  # num_threads, n_jobs\r\n    'early_stopping_round': 0,  # early_stopping_round\r\n    'use_categorical_split': True,  # ?\r\n    'handle_missing_value': True,  # use_missing\r\n    'use_zero_as_missing_value': False,  # zero_as_missing\r\n    'minimum_example_count_per_group': 100,  # min_data_per_group\r\n    'maximum_categorical_split_point_count': 32,  # max_cat_threshold\r\n    'categorical_smoothing': 10.0,  # cat_smooth\r\n    'l2_categorical_regularization': 10.0,  # cat_l2\r\n    'random_state': None,  # random_state,\r\n    'batch_size': None,\r\n    'normalize': None,\r\n    'caching': None,\r\n    'parallel_trainer': None,\r\n    'feature': None,\r\n    'group_id': None,\r\n    'label': None,\r\n    'weight': None,\r\n}\r\n\r\nlgbm_params = {\r\n    'n_estimators': 1,\r\n    'learning_rate': 0.1,\r\n    'subsample_for_bin': 200_000, # Nb of sample for constructing bins (bin_construct_sample_cnt)\r\n    'num_leaves': 100,  # num_leaves\r\n    'min_child_samples': 5_000,\r\n    'boosting_type': 'gbdt',\r\n    'colsample_bytree': 1.0,\r\n    'reg_alpha': 0.0,\r\n    'reg_lambda': 0.0,\r\n    'max_depth': -1,\r\n    'min_child_weight': 0.001,\r\n    'min_split_gain': 0.0,\r\n    'subsample': 1.0,\r\n    'subsample_freq': 0,\r\n    'is_unbalance': False,\r\n    'class_weight': None,\r\n    'sigmoid': 1.0,  # default=1.0\r\n    'metric': 'Logloss',\r\n    'max_bin': 255,\r\n    'verbose': 10,\r\n    'silent': False,\r\n    'n_jobs': 1,\r\n    'early_stopping_round': None,\r\n    'use_missing': True,\r\n    'zero_as_missing': False,\r\n    'min_data_per_group': 100,\r\n    'max_cat_threshold': 32,\r\n    'cat_smooth': 10.0,\r\n    'cat_l2': 10.0,\r\n    'random_state': 42,\r\n}\r\n```\r\n```python3\r\n# Data\r\nX_train = np.random.randn(100_000, 1)\r\ny_train = np.random.binomial(1, .5, size=(100_000, 1)).ravel()\r\n\r\n# Train (actual) lightgbm classifier\r\nlgbm = LGBMClassifier(**lgbm_params)\r\nlgbm.fit(\r\n    X=X_train,\r\n    y=y_train,\r\n)\r\n# Train NimbusML lightgbm classifier\r\nnimbus_lgbm = LightGbmBinaryClassifier(**nimbus_params)\r\nnimbus_lgbm.fit(\r\n    X=X_train,\r\n    y=y_train,\r\n)\r\n```\r\nConsole output\r\n```sh\r\n[LightGBM] [Warning] Starting from the 2.1.2 version, default value for the \"boost_from_average\" parameter in \"binary\" objective is true.\r\nThis may cause significantly different results comparing to the previous versions of LightGBM.\r\nTry to set boost_from_average=false, if your old models produce bad results\r\n[LightGBM] [Info] Number of positive: 50077, number of negative: 49923\r\n[LightGBM] [Info] Total Bins 255\r\n[LightGBM] [Info] Number of data: 100000, number of used features: 1\r\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500770 -> initscore=0.003080\r\n[LightGBM] [Info] Start training from score 0.003080\r\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\r\n[LightGBM] [Debug] Trained a tree with leaves = 16 and max_depth = 6\r\n\r\n[LightGBM] [Warning] Starting from the 2.1.2 version, default value for the \"boost_from_average\" parameter in \"binary\" objective is true.\r\nThis may cause significantly different results comparing to the previous versions of LightGBM.\r\nTry to set boost_from_average=false, if your old models produce bad results\r\n[LightGBM] [Info] Number of positive: 50077, number of negative: 49923\r\n[LightGBM] [Info] Total Bins 255\r\n[LightGBM] [Info] Number of data: 100000, number of used features: 1\r\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500770 -> initscore=0.003080\r\n[LightGBM] [Info] Start training from score 0.003080\r\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\r\n```\r\n```python3\r\npd.DataFrame({\r\n    'lightgbm': lgbm.predict_proba(X_train)[:, 1],\r\n    'nimbus_ml': nimbus_lgbm.predict_proba(X_train)[:, 1],\r\n}).head()\r\n```\r\nlightgbm | nimbus_ml\r\n-- | --\r\n0.499577 | 0.499775\r\n0.499391 | 0.499388\r\n0.501513 | 0.501395\r\n0.499577 | 0.501532\r\n0.502616 | 0.50232\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5603","RelatedDescription":"Open issue \"Discrepancies between nimbusml.LightGbmClassifier and lightgbm.LGBMClassifier scores\" (#5603)"},{"Id":"794664693","IsPullRequest":true,"CreatedAt":"2021-01-27T20:32:14","Actor":"ericstj","Number":"5602","RawContent":null,"Title":"Remove references to Microsoft.ML.Scoring","State":"closed","Body":"This was the very first ONNX .NET bindings, it was replaced with Microsoft.ML.OnnxRuntime\r\nthen Microsoft.ML.OnnxRuntime.Managed.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5602","RelatedDescription":"Closed or merged PR \"Remove references to Microsoft.ML.Scoring\" (#5602)"},{"Id":"794421397","IsPullRequest":true,"CreatedAt":"2021-01-26T19:58:16","Actor":"michaelgsharp","Number":"5599","RawContent":null,"Title":" Release/1.5.4 fix","State":"closed","Body":"Updating 1.5.4 with cherry-picked commits to correct the nuget feeds and CI fixes so it will build correctly. ","Url":"https://github.com/dotnet/machinelearning/pull/5599","RelatedDescription":"Closed or merged PR \" Release/1.5.4 fix\" (#5599)"},{"Id":"794460577","IsPullRequest":false,"CreatedAt":"2021-01-26T18:25:39","Actor":"ericstj","Number":"5600","RawContent":null,"Title":"Enable SDL / release tooling on ML.NET","State":"open","Body":"We should try to plug ML.NET into the automated engineering tooling that we use on other dotnet repos.\r\n\r\nFor example:\r\nbinskim\r\napiscan\r\npolicheck\r\n\r\ncc @Anipik @michaelgsharp ","Url":"https://github.com/dotnet/machinelearning/issues/5600","RelatedDescription":"Open issue \"Enable SDL / release tooling on ML.NET\" (#5600)"},{"Id":"793289923","IsPullRequest":false,"CreatedAt":"2021-01-25T11:14:46","Actor":"justinormont","Number":"5598","RawContent":null,"Title":"SymSGD Excessively Verbose","State":"open","Body":"Remove logging line, or modify from `ch.Info` to `ch.Trace`:\r\nhttps://github.com/dotnet/machinelearning/blob/5dbfd8acac0bf798957eea122f1413209cdf07dc/src/Microsoft.ML.Mkl.Components/SymSgdClassificationTrainer.cs#L813\r\n\r\nFor my text dataset, this logging line dumps ~100 pages of floats to my console. That level of verbosity is unneeded at the `Info` level.\r\n\r\nI'd recommend just removing the logging line.","Url":"https://github.com/dotnet/machinelearning/issues/5598","RelatedDescription":"Open issue \"SymSGD Excessively Verbose\" (#5598)"},{"Id":"792266526","IsPullRequest":true,"CreatedAt":"2021-01-22T21:53:47","Actor":"michaelgsharp","Number":"5596","RawContent":null,"Title":"Fixing official build","State":"closed","Body":"Last week we fixed the CI build with a macos homebrew bug workaround. The official build YAML and the CI YAML are different files, and the workaround was not added to the official build YAML. This PR adds in the fix so the official builds will pass.","Url":"https://github.com/dotnet/machinelearning/pull/5596","RelatedDescription":"Closed or merged PR \"Fixing official build\" (#5596)"},{"Id":"792304346","IsPullRequest":false,"CreatedAt":"2021-01-22T21:04:28","Actor":"farhanrw","Number":"5597","RawContent":null,"Title":"Slow inference on CPU ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10.0 Build 18363\r\n- **.NET Version (eg., dotnet --info)**: 3.1.405 / 5.0.102\r\n\r\n![image](https://user-images.githubusercontent.com/43019847/105546891-bd03a980-5cb2-11eb-9500-cb28ea81dd2a.png)\r\n\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n- I am very new to ML.Net, to be honest, I have never used it until recently. I have a model trained on pytorch which I exported to ONNX. I used a yolov5 network (_https://github.com/ultralytics/yolov5_) and used this code (_https://github.com/BobLd/YOLOv4MLNet/tree/yolo-v5-incl_) to run the inference. Please note that I am not running tests in batches, rather one image at a time or **batch size = 1**. My inferences are all the time ran in the **CPU**.\r\n- **What happened?**\r\n- In python/using pytorch the inference time for one image on the CPU would take me around **100~300 ms** on average. However, when I ran it using the implementation I found on the second repo I mentioned above the runtime for each image varies from **2000~3700 ms**. And these timings are just to run the prediction function, not to setup the model or anything else. \r\n- **What did you expect?**\r\n- I was expecting to get a runtime similar to the one I go in python if not better. As I am not including the times taken for post-processing or the time for parsing the outputs the timing should stay close if not a little better/worse. But going from about 200/300ms to 2000/4000ms is a big jump.\r\n\r\n### Source code / logs\r\nOnce again these two are the repos \r\nhttps://github.com/ultralytics/yolov5 (Original python implementation of yolov5)\r\nhttps://github.com/BobLd/YOLOv4MLNet/tree/yolo-v5-incl (ML.Net code to take the ONNX model and run inference)\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n![image](https://user-images.githubusercontent.com/43019847/105546216-f38cf480-5cb1-11eb-9b73-09a721c96214.png)\r\n\r\nLastly, **line number 75** is what is taking the longest amount of time. It takes **80-90%** of the total runtime.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5597","RelatedDescription":"Open issue \"Slow inference on CPU \" (#5597)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-02-19T05:30:25.6715342Z","RunDurationInMilliseconds":539}