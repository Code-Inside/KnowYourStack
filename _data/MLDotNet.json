{"Data":{"GitHub":{"Issues":[{"Id":"1392564946","IsPullRequest":false,"CreatedAt":"2022-09-30T14:54:09","Actor":"lbitton93","Number":"6347","RawContent":null,"Title":"Precision loss When Reading in CSV data","State":"open","Body":"### Summary\r\nCSV fields not auto- reading In values correctly (losing precision)\r\n\r\n### Scenario\r\nI want to automatically read some Integer Id's into my dataframe. These integers are quite large and are losing precision.\r\n\r\n### Cause\r\nhttps://github.com/dotnet/machinelearning/blob/main/src/Microsoft.Data.Analysis/DataFrame.IO.cs\r\n***Method: GuessType()***\r\nWe don't make any attempt to read Int, Long or Double Types here. Hence the code-flow is truncating the long integers.\r\nI guess since this is primarily a ML framework, we favour floats, and therefore want to avoid the performance overhead of more complex type inference?\r\n\r\n### Suggestions\r\n**Numeric Preference**\r\nIt may be nice if the dev can specify a preferred numerical type to the Read_Csv method. i.e double, long, float, int. I suppose the disadvantage maybe unnecessary precision in some columns, however the default value could still be float. This would probably be the simplest change.\r\n\r\n**Enhance Dtypes Parameter**\r\nAlternatively it would be nice to modify the Dtypes[] parameter in Read_Csv to be a dictionary such that we can specify the particular type we want for a given column name. This will make it a little more robust. (I have customer data with the column names in different orders/ shifted in excel etc. It would be nicer to not have to rely on indexing). The disadvantage here is that we would have to check that column names exist etc.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6347","RelatedDescription":"Open issue \"Precision loss When Reading in CSV data\" (#6347)"},{"Id":"1391793672","IsPullRequest":false,"CreatedAt":"2022-09-30T04:09:22","Actor":"crazyoutlook","Number":"6346","RawContent":null,"Title":"Using Variables as parameters instead of constant in ML.NET","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: [e.g. Windows 10] - Windows 10\r\n - ML.NET Version: [e.g. ML.NET v1.5.5] - ML.Net 1.4\r\n - .NET Version: [e.g. .NET 5.0] - .Net 6.0\r\n\r\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\nI have some attribute value in code which is being used in ML.Net code. Ml.Net is accepting constants for these attributes. I need to use variables so that I can supply it at runtime.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nHave attached source code. Below class is used in ML.Net - public class ImageInput, public class ImagePredictions\r\nAbove class is used to initialize ML.Net as below :\r\n //Initialize MLContext\r\n MLContext mlContext = new MLContext();\r\n //Load Data      \r\nList<ImageInput> emptyData = new List<ImageInput>();\r\nvar data = mlContext.Data.LoadFromEnumerable(emptyData);\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\nI should be able to use variables when initializing ML.Net\r\n\r\n**Screenshots, Code, Sample Projects**\r\nIf applicable, add screenshots, code snippets, or sample projects to help explain your problem.\r\nCode sample attached. \r\n\r\n public struct ImageSettings\r\n    {      \r\n        public const int imageHeight = 416;\r\n        public const int imageWidth = 416;\r\n    }\r\n\r\n    public class ImageInput\r\n    {\r\n        [ImageType(ImageSettings.imageHeight, ImageSettings.imageWidth)]\r\n        public Bitmap Image { get; set; }\r\n    }\r\n\r\n    public class ImagePredictions\r\n    {\r\n        [ColumnName(\"model_outputs0\")]\r\n        public float[] PredictedLabels { get; set; }\r\n    }\r\n\t\r\n\t\r\n\t //Initialize MLContext\r\n     MLContext mlContext = new MLContext();\r\n\r\n     //Load Data\r\n                \r\n\tList<ImageInput> emptyData = new List<ImageInput>();\r\n    var data = mlContext.Data.LoadFromEnumerable(emptyData);\r\n\t\r\n\t var pipeline = mlContext.Transforms.ResizeImages(resizing: ImageResizingEstimator.ResizingKind.Fill, outputColumnName: \"data\", imageWidth: ImageSettings.imageWidth, imageHeight: ImageSettings.imageHeight, inputColumnName: nameof(ImageInput.Image))\r\n             .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"data\", orderOfExtraction: ImagePixelExtractingEstimator.ColorsOrder.ARGB))\r\n             .Append(mlContext.Transforms.ApplyOnnxModel(modelFile: modeltoInfer.ModelPath, outputColumnName: \"model_outputs0\", inputColumnName: \"data\"));\r\n                            \r\n     var model = pipeline.Fit(data);\r\n     predictionEngine = mlContext.Model.CreatePredictionEngine<ImageInput, ImagePredictions>(model);\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6346","RelatedDescription":"Open issue \"Using Variables as parameters instead of constant in ML.NET\" (#6346)"},{"Id":"1386573881","IsPullRequest":true,"CreatedAt":"2022-09-29T20:56:38","Actor":"LittleLittleCloud","Number":"6338","RawContent":null,"Title":"Improve RegressionExpeirment using AutoMLExperiment","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n- https://github.com/dotnet/machinelearning/issues/6145\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6338","RelatedDescription":"Closed or merged PR \"Improve RegressionExpeirment using AutoMLExperiment\" (#6338)"},{"Id":"1390801244","IsPullRequest":true,"CreatedAt":"2022-09-29T12:38:37","Actor":"rgesteve","Number":"6345","RawContent":null,"Title":"XGBoost integration infrastructure (still temporarily using Estimator rather than Trainer)","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nStrictly this is independent of OneDAL (XGBoost and OneDAL are separate libraries), but adding to this feature branch for convenience.  This payload includes the PInvoke infrastructure to call XGBoost (version 1.5 and above... current version is 1.7).  It mimics the design of the LightGBM integration as much as possible.  Most notable difference is that it does not serialize to `InternalEnsembleTree`, but uses its own model (also it uses the JSON dump to build such a model, but that's an implementation detail).   The actual Estimator/Transformer pair is preliminary, as it looks more like a standard transformation than a learner (in that the Model is not an independent entity).  This most likely will need to change.","Url":"https://github.com/dotnet/machinelearning/pull/6345","RelatedDescription":"Open PR \"XGBoost integration infrastructure (still temporarily using Estimator rather than Trainer)\" (#6345)"},{"Id":"1389489761","IsPullRequest":false,"CreatedAt":"2022-09-29T09:26:57","Actor":"JJJWD","Number":"6341","RawContent":null,"Title":"Robust Scaling result is different in ML.NET compared to scikit-learn","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 \r\n- **.NET Version (eg., dotnet --info)**:  .NET Framework 4.7.2\r\n- ML.NET v1.7.1\r\n- python v 3.8.10\r\n- scikit-learn v1.1.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI'm trying to convert my ML code in python using scikit-learn to C# using ML.NET\r\n- **What happened?**\r\nI noticed that the result with robust scaling in the pipeline using ML.NET did not match the results from python. The difference seems to be due to a different 'scale' value and the used function.\r\n- **What did you expect?**\r\nI have checked  the scale and offset of the data in EXCEL using the QUARTILE.INC() function and these results suggest that the values from python are correct. \r\nI've also derived from the [documentation ](https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.normalizingtransformer.affinenormalizermodelparameters-1?view=ml-dotnet#properties) that ML.NET seems to use the `(input - offset) * scale` function to calculate the normalized value while the python code uses `(input - offset) \\ scale`\r\n\r\n- I would like to know why this result is so different and whether this is bug or not.\r\n\r\nBelow you can find an example code to demonstrate the difference\r\n### Source code C#\r\n```\r\nprivate class TestInput\r\n{\r\n\t[ColumnName(@\"Test\")]\r\n\tpublic float Test { get; set; }\r\n}\r\n\r\n[TestMethod]\r\npublic void NormalizedTest()\r\n{\r\n\tList<TestInput> testInputs = new List<TestInput>()\r\n\t{\r\n\t\tnew TestInput(){Test = 2.114265f },\r\n\t\tnew TestInput(){Test = 2.837738f },\r\n\t\tnew TestInput(){Test = 2.909677f },\r\n\t\tnew TestInput(){Test = 3.769787f },\r\n\t};\r\n\r\n\tvar mlContext = new MLContext();\r\n\tIDataView dataView = mlContext.Data.LoadFromEnumerable<TestInput>(testInputs);\r\n\r\n\t//normalize\r\n\tvar normalize = mlContext.Transforms.NormalizeRobustScaling(new[] {\r\n\t\t\tnew InputOutputColumnPair(@\"Test\", @\"Test\") });\r\n\tvar normalizeTransform = normalize.Fit(dataView);\r\n\tvar transformedData = normalizeTransform.Transform(dataView);\r\n\tvar affineParams = normalizeTransform.GetNormalizerModelParameters(0) as AffineNormalizerModelParameters<float>;\r\n\tvar offset = affineParams.Offset;\r\n\tvar scale = affineParams.Scale;\r\n\tConsole.WriteLine($\"Offset: {offset}\");\r\n\tConsole.WriteLine($\"Scale: {scale}\");\r\n\tList<TestInput> vals = mlContext.Data.CreateEnumerable<TestInput>(\r\n\ttransformedData, reuseRowObject: false).ToList();\r\n\tfor (int i = 0; i < vals.Count; i++) {\r\n\t\t//y = (x - ({ offset})) * { scale}\r\n\t\tConsole.WriteLine($\"{(testInputs[i].Test - offset) * scale} \\t  {vals[i].Test}\");\r\n\t}\r\n}\r\n```\r\n\r\n**Output**\r\n```\r\nOffset: 2.873708\r\nScale: 1.208078\r\n-0.917466 \t  -0.917466\r\n-0.04345396  \t  -0.04345396\r\n0.04345396 \t  0.04345396\r\n1.082534 \t  1.082534\r\n```\r\n\r\n### Source code python\r\n```\r\nimport numpy as np\r\nfrom sklearn.preprocessing import RobustScaler\r\n\r\nvals= [2.114265, 2.837738,2.909677,3.769787]\r\nX = np.array(vals)\r\nscaler = RobustScaler()\r\ny= scaler.fit_transform(X.reshape(-1, 1))\r\nprint(f'Offset {scaler.center_}')\r\nprint(f'Scale {scaler.scale_}')\r\n\r\nprint(y)\r\nfor val in vals:\r\n    print((val-scaler.center_)/scaler.scale_)\r\n```\r\n\r\n**Output**\r\n```\r\nOffset [2.8737075]\r\nScale [0.46783475]\r\n[[-1.62331357]\r\n [-0.07688505]\r\n [ 0.07688505]\r\n [ 1.9153761 ]]\r\n[-1.62331357]\r\n[-0.07688505]\r\n[0.07688505]\r\n[1.9153761]\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/6341","RelatedDescription":"Closed issue \"Robust Scaling result is different in ML.NET compared to scikit-learn\" (#6341)"},{"Id":"1389986371","IsPullRequest":false,"CreatedAt":"2022-09-28T21:54:02","Actor":"LittleLittleCloud","Number":"6344","RawContent":null,"Title":"Add LDRandom tuner","State":"open","Body":"LDRandom to generate sobol sequence, which can cover the search space more evenly than random tuner\r\n\r\nsee details: \r\nhttps://github.com/dotnet/machinelearning/pull/6339#discussion_r981827891","Url":"https://github.com/dotnet/machinelearning/issues/6344","RelatedDescription":"Open issue \"Add LDRandom tuner\" (#6344)"},{"Id":"1389972336","IsPullRequest":true,"CreatedAt":"2022-09-28T21:36:25","Actor":"michaelgsharp","Number":"6343","RawContent":null,"Title":"testing pool change for PR","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/6343","RelatedDescription":"Open PR \"testing pool change for PR\" (#6343)"},{"Id":"1389889685","IsPullRequest":true,"CreatedAt":"2022-09-28T20:08:22","Actor":"michaelgsharp","Number":"6342","RawContent":null,"Title":"mac os 12 testing","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/6342","RelatedDescription":"Open PR \"mac os 12 testing\" (#6342)"},{"Id":"1388489286","IsPullRequest":true,"CreatedAt":"2022-09-27T23:03:20","Actor":"dakersnar","Number":"6340","RawContent":null,"Title":"Fix problems with DataFrame WriteCsv when quotes are present in data","State":"open","Body":"Fixes #6238, continuation of https://github.com/dotnet/machinelearning/pull/6303\r\n\r\nThere were no issues with Load, but Writing back to CSV didn't properly escape quotation marks within the data, preventing the CSV from being correctly loaded again.","Url":"https://github.com/dotnet/machinelearning/pull/6340","RelatedDescription":"Open PR \"Fix problems with DataFrame WriteCsv when quotes are present in data\" (#6340)"},{"Id":"1373413309","IsPullRequest":true,"CreatedAt":"2022-09-27T21:29:25","Actor":"LittleLittleCloud","Number":"6325","RawContent":null,"Title":"use macos 10-15 in .vsts-dotnet-ci","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nsee also #6315 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/6325","RelatedDescription":"Closed or merged PR \"use macos 10-15 in .vsts-dotnet-ci\" (#6325)"},{"Id":"1388401112","IsPullRequest":true,"CreatedAt":"2022-09-27T21:27:15","Actor":"LittleLittleCloud","Number":"6339","RawContent":null,"Title":"add smac tuner in AutoMLExperiment","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\nThis PR makes `Smac` as a public-avaliable sweeper.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6339","RelatedDescription":"Open PR \"add smac tuner in AutoMLExperiment\" (#6339)"},{"Id":"1384157125","IsPullRequest":false,"CreatedAt":"2022-09-23T18:20:32","Actor":"luisquintanilla","Number":"6337","RawContent":null,"Title":"LightGBM Tracking Issue","State":"open","Body":"Issue to track LightGBM related bugs / requests.\r\n\r\n- [ ] #5022\r\n- [ ] #3603\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6337","RelatedDescription":"Open issue \"LightGBM Tracking Issue\" (#6337)"},{"Id":"1383133724","IsPullRequest":false,"CreatedAt":"2022-09-22T23:50:57","Actor":"KevinDJones","Number":"6336","RawContent":null,"Title":"Manually Trigger Engine Pool Refresh that's From URI","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nI'm using the prediction engine pool from a URI as such:\r\n\r\n```\r\nservices.AddPredictionEnginePool<ModelInput, ModelOutput>().FromUri(\r\n    uri: $\"{URI}\",\r\n    period: TimeSpan.FromMinutes(5));\r\n```\r\n\r\nWhich is working great. However, I'd like to be able to get the engine pool updated on demand, rather than waiting up to 5 minutes for it to refresh itself.\r\n\r\n**Describe the solution you'd like**\r\nPerhaps a method on the `PredictionEnginePool` class that allows for a refresh i.e. `predictionEnginePool.RefreshFromUri()`\r\n\r\n**Describe alternatives you've considered**\r\nCan certainly shorten the period, but it seems unnecessary to have it checking every 30 seconds when I know exactly when it needs to update.\r\n\r\nIt could also be a local file using `FromFile` but the model lives elsewhere and I'd like it to stay that way.\r\n\r\n**Additional context**\r\nIs this something that has been explored at all? I'm not opposed to taking a stab at it but want to make sure it's not something that's already been discussed/attempted/etc.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6336","RelatedDescription":"Open issue \"Manually Trigger Engine Pool Refresh that's From URI\" (#6336)"},{"Id":"1380084346","IsPullRequest":true,"CreatedAt":"2022-09-20T22:56:00","Actor":"LittleLittleCloud","Number":"6335","RawContent":null,"Title":"Add ITrialResultManager for continue training in AutoML","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n## Resolved issue\r\n#5736\r\n\r\n## What's `ITrialResultManager`\r\n`ITrialResultManager` is a component used by `AutoMLExperiment` to save and load `TrialResult`. The default implementation for `ITrialResultManager` is `CsvTrialResultManager`, which saves all trial results in csv format\r\n\r\n## What's `ITrialResultManager` used for\r\nCurrently, it's used by some tuners (CostFrugalTuner, for example) to recover from previous training, suppose trialResult csv is provided or is available.\r\n\r\n## How to use it\r\n`ITrialResultManager` is not directly exposed to public users. User can use `SetCheckpoint(string folder)` path instead. If a folder is provided via `SetCheckpoint`, `AutoMLExperiment` will create that folder if not exists, and configures `CsvTrialResultManager` to save trial results to `folder/trialResults.csv`.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6335","RelatedDescription":"Open PR \"Add ITrialResultManager for continue training in AutoML\" (#6335)"},{"Id":"1379604385","IsPullRequest":false,"CreatedAt":"2022-09-20T15:24:05","Actor":"luisquintanilla","Number":"6334","RawContent":null,"Title":"Add ReplaceMissingTimeSeriesValues to docs","State":"open","Body":"Add [`ReplaceMissingTimeSeriesValues`](https://github.com/dotnet/machinelearning/blob/0577957256c296fdea2deb6b6e00e7be9b458167/src/Microsoft.ML.Featurizers/TimeSeriesImputer.cs) to reference API docs. It's missing from the latest 1.7.0 and 2.0.0 versions. \r\n\r\n[.NET API Browser](https://learn.microsoft.com/dotnet/api/?view=ml-dotnet&preserve-view=true&term=ReplaceMissingTimeSeriesValues)","Url":"https://github.com/dotnet/machinelearning/issues/6334","RelatedDescription":"Open issue \"Add ReplaceMissingTimeSeriesValues to docs\" (#6334)"},{"Id":"1379590334","IsPullRequest":false,"CreatedAt":"2022-09-20T15:14:21","Actor":"luisquintanilla","Number":"6333","RawContent":null,"Title":"Add FeaturizeDateTime transform to docs","State":"open","Body":"Add [`FeaturizeDateTime`](https://github.com/dotnet/machinelearning/blob/0577957256c296fdea2deb6b6e00e7be9b458167/src/Microsoft.ML.Featurizers/DateTimeTransformer.cs) transform to API docs. Currently it doesn't show up for the latest 1.7.0 and 2.0.0-preview versions. \r\n\r\n[.NET API Browser](https://learn.microsoft.com/dotnet/api/?view=ml-dotnet-2.0.0&term=FeaturizeDateTime)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6333","RelatedDescription":"Open issue \"Add FeaturizeDateTime transform to docs\" (#6333)"},{"Id":"1378886702","IsPullRequest":false,"CreatedAt":"2022-09-20T06:29:14","Actor":"torronen","Number":"6332","RawContent":null,"Title":"DataView.GetColumn: Multiple columns with same name but different type","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nI am running model.Transform.\r\n\r\nThen, I am would like to get the original field \"Quote\" with type string.\r\nI would expect the following to work, but it gives an exception about wrong type:\r\n`IDataView predictions= model.Transform(myDataFrame);\r\nvar quotes = predictions.GetColumn<string>(\"Quotes\").ToList();`\r\n\r\nThe problem seems to be transforms (Micorsoft.ML.AutoML in 1.6.0) has created transforms to different types.\r\n![image](https://user-images.githubusercontent.com/26261427/191181885-98105788-c6f7-4da9-b46e-b0cfce1f0c7b.png)\r\n\r\n`'Cannot map column (name: Quote, type: Vector<Single, 2>) in data to the user-defined type, System.String. Arg_ParamName_Name'`\r\n\r\n**Describe the solution you'd like**\r\nGetColumn should try to find column with the specified type <string> if multiple columns with the same name exists.\r\n\r\n**Describe alternatives you've considered**\r\nI have not yet solved this issue.\r\n\r\n I suppose my solution will be :\r\n1) get the values before Transform()\r\n2) looping through all columns and checking type and name would work.\r\n\r\n**Additional data**\r\nI would like to get the column here to be sure the row-order is the same. \r\n\r\nI assume Transform() should preserve order(?) . If so, then I suppose this is not a very important issue.","Url":"https://github.com/dotnet/machinelearning/issues/6332","RelatedDescription":"Open issue \"DataView.GetColumn: Multiple columns with same name but different type\" (#6332)"},{"Id":"1378730578","IsPullRequest":false,"CreatedAt":"2022-09-20T02:28:22","Actor":"luisquintanilla","Number":"6331","RawContent":null,"Title":"Column CustomMapping overload","State":"open","Body":"## Problem\r\n\r\nWhen I want to apply a custom transform to a single data column in my dataset, I have to provide the input and output types. If I've used TextLoader to load my data without defining schema classes, I now have to go and create new classes for my input and output. \r\n\r\n```csharp\r\nvar cols = new [] \r\n{\r\n    new TextLoader.Column(name: \"Text\",dataKind:DataKind.String,index:47),\r\n    new TextLoader.Column(\r\n        name: \"Categorical\",\r\n        dataKind: DataKind.String,\r\n        source: new TextLoader.Range[] {\r\n            new TextLoader.Range(19),\r\n            new TextLoader.Range(20),\r\n            new TextLoader.Range(21),\r\n            new TextLoader.Range(50),\r\n            new TextLoader.Range(59),\r\n            new TextLoader.Range(71),\r\n            new TextLoader.Range(83)}),\r\n    new TextLoader.Column(name:\"Label\",dataKind:DataKind.String,2)\r\n};\r\n\r\nvar dataLoader = ctx.Data.CreateTextLoader(columns:cols);\r\nvar idv = dataLoader.Load(path);\r\n\r\npublic class CustomData {public string Text {get;set;}};\r\n\r\nAction<CustomData,CustomData> customTransform = (rowIn,rowOut) => {\r\n    rowIn.Text = rowOut.Text.ToUpper()\r\n};\r\n```\r\n\r\n## Proposed Solution\r\n\r\nCreate an overload to `CustomMapping` that takes an InputColumnName and OutputColumnName parameters which perform the lookup and apply the transform to the specified columns.\r\n\r\n```csharp\r\nAction<string,string> capitalize = (colIn,colOut) => \r\n{\r\n    colOut = colIn.ToUpper();\r\n}\r\n\r\nvar capitalizeTransform = ctx.Transforms.CustomMapping(capitalize,\"capitalizeTransform\",inputColumnName: \"Text\", outputColumnName: \"CapitalizedText\");\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6331","RelatedDescription":"Open issue \"Column CustomMapping overload\" (#6331)"},{"Id":"1378718305","IsPullRequest":false,"CreatedAt":"2022-09-20T02:07:08","Actor":"luisquintanilla","Number":"6330","RawContent":null,"Title":"Infer T in CreateEnumerable<T> based in DataView schema","State":"open","Body":"## Problem\r\n\r\nToday, when an `IDataView` is created using `TextLoader`, there's no need to create classes that define the schema. \r\n\r\n```csharp\r\nvar cols = new [] \r\n{\r\n    new TextLoader.Column(name: \"Text\",dataKind:DataKind.String,index:47),\r\n    new TextLoader.Column(\r\n        name: \"Categorical\",\r\n        dataKind: DataKind.String,\r\n        source: new TextLoader.Range[] {\r\n            new TextLoader.Range(19),\r\n            new TextLoader.Range(20),\r\n            new TextLoader.Range(21),\r\n            new TextLoader.Range(50),\r\n            new TextLoader.Range(59),\r\n            new TextLoader.Range(71),\r\n            new TextLoader.Range(83)}),\r\n    new TextLoader.Column(name:\"Label\",dataKind:DataKind.String,2)\r\n};\r\n\r\nvar dataLoader = ctx.Data.CreateTextLoader(columns:cols);\r\nvar idv = dataLoader.Load(path);\r\n```\r\n\r\nHowever, if I want to export the `IDataView` as an `IEnumerable`, I can't because I need to explicitly provide the type of `IEnumerable<T>`. If no classes have been created, I now need to go and create a new class just to export to an `IEnumerable`.\r\n\r\n## Proposed solution\r\n\r\nJust like `LoadFromEnumerable` is able to infer and create an IDataView from `IEnumerable<T>`, `CreateEnumerable` should be able to infer `T` based on the DataView schema or bind to an object at runtime using `dynamic`.\r\n\r\n```csharp\r\nctx.Data.CreateEnumerable(idv,reuseRowObject:false,ignoreMissingColumns:false)\r\n```\r\n\r\nor \r\n\r\n```csharp\r\nctx.Data.CreateEnumerable<dynamic>(idv,reuseRowObject:false,ignoreMissingColumns:false)\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/6330","RelatedDescription":"Open issue \"Infer T in CreateEnumerable<T> based in DataView schema\" (#6330)"},{"Id":"1370417166","IsPullRequest":true,"CreatedAt":"2022-09-19T22:54:45","Actor":"LittleLittleCloud","Number":"6323","RawContent":null,"Title":"add loss to TrialResult","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n\r\nThis PR adds a new property `Loss` in `TrialResult` class and remove `AutoMLExperimentSettings.IsMaximize`. The `Loss` is always smaller the better and will be used to optimize tuners.\r\n\r\nThis PR also adds a replay test to `CFO` tuners, which verifies that the status of cfo can be recovered from previous training history.\r\n\r\nThis PR also removes `ITrialRunner.Run` method as this method has been replaced by `ITrialRunner.RunAsync`\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6323","RelatedDescription":"Closed or merged PR \"add loss to TrialResult\" (#6323)"},{"Id":"1378203881","IsPullRequest":false,"CreatedAt":"2022-09-19T16:17:30","Actor":"tarekgh","Number":"6329","RawContent":null,"Title":"Samples pointing at wrong resources ","State":"open","Body":"The following sample is pointing at `https://aka.ms/mlnet-resources/datasets/cifar10.zip` but looks this resources is not valid.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bca5736c23e093006bb6a5a3f85a789c4a1cdcf2/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/ImageClassification/LearningRateSchedulingCifarResnetTransferLearning.cs\r\n\r\nLooks we have code in different places trying to get the same resources from other sources https://github.com/dotnet/machinelearning/blob/bca5736c23e093006bb6a5a3f85a789c4a1cdcf2/docs/samples/Microsoft.ML.AutoML.Samples/Cifar10.cs#L13\r\n\r\nAlso there is other samples pointing at `https://github.com/onnx/models/tree/master/vision/classification/squeezenet` which exists but the zipped files there contains a different structured files than what the sample expect.\r\nhttps://github.com/dotnet/machinelearning/blob/04dda55ab0902982b16309c8e151f13a53e9366d/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/ApplyONNXModelWithInMemoryImages.cs#L16\r\neven the comment suggest there is Microsoft.ML.Onnx.TestModels nuget which not exist either. The correct structured file can be found in https://s3.amazonaws.com/download.onnx/models/opset_8/squeezenet.tar.gz\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6329","RelatedDescription":"Open issue \"Samples pointing at wrong resources \" (#6329)"},{"Id":"1376003377","IsPullRequest":false,"CreatedAt":"2022-09-16T14:07:00","Actor":"wil70","Number":"6328","RawContent":null,"Title":"[ML.Net, c#]  LightGBM re-training and Importing LightGBM CLI/MPI model","State":"open","Body":"1. Can I retrain LightGBM? \r\n    1.a. I tried via AutoML and it seems to start from scratch when I do a FIT or I call MLModel1.Training.cs \" public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)\" auto generated code.\r\n    1.b. In the documentation [\"Re-train a model\"](https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/retrain-model-ml-net), LightGBM is not listed as re-traine-able? \r\n           1.b.1. is it still true (asking as the documentation is 9 months old)? TY!\r\n           1.b.2 I can see from Python or even XGBM c/c++ you can retrain? using init_model option of lightgbm.train\r\n2. Can I use the model generated by [LightGBM CLI/MPI ](https://lightgbm.readthedocs.io/en/latest/Installation-Guide.html#build-mpi-version) in ML.net?\r\nThanks!\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6328","RelatedDescription":"Open issue \"[ML.Net, c#]  LightGBM re-training and Importing LightGBM CLI/MPI model\" (#6328)"},{"Id":"1373907396","IsPullRequest":false,"CreatedAt":"2022-09-15T04:36:54","Actor":"luisquintanilla","Number":"6326","RawContent":null,"Title":"Create Pipeline Visualizer","State":"open","Body":"Create a visualization method that when given a pipeline displays a visual of the pipeline. This can work both for interactive and standard .NET projects. \r\n\r\n## API\r\n\r\n### Define pipeline\r\n\r\n```csharp\r\nvar pipeline = \r\n    mlContext.Transforms.Concatenate(outputColumnName:\"Features\", inputColumnNames: new [] {\"Col1\", \"Col2\" })\r\n        .Append(mlContext.Transforms.ReplaceMissingValues(outputColumnName:\"Features\",inputColumnName:\"Features\")\r\n        .Append(mlContext.Regression.Trainers.Sdca(labelColumnName:\"Label\", featureColumnName:\"Features\");\r\n```\r\n\r\n### Interactive\r\n\r\n```csharp\r\npipeline\r\n```\r\n\r\n### .NET project\r\n\r\n```csharp\r\npipeline.SaveToImage(\"image.png\");\r\n```\r\n\r\n## Samples\r\n\r\n```mermaid\r\nflowchart TB;\r\n  subgraph OutputColumns\r\n    OutputSchema[Score]\r\n  end\r\n  subgraph Pipeline\r\n    direction TB\r\n    Concatenate--Features-->ReplaceMissingValues\r\n    ReplaceMissingValues--Features-->Sdca\r\n    click Concatenate \"https://docs.microsoft.com/dotnet/api/microsoft.ml.transformextensionscatalog.concatenate?view=ml-dotnet#microsoft-ml-transformextensionscatalog-concatenate(microsoft-ml-transformscatalog-system-string-system-string())\"\r\n    click ReplaceMissingValues \"https://docs.microsoft.com/dotnet/api/microsoft.ml.extensionscatalog.replacemissingvalues?view=ml-dotnet#microsoft-ml-extensionscatalog-replacemissingvalues(microsoft-ml-transformscatalog-microsoft-ml-inputoutputcolumnpair()-microsoft-ml-transforms-missingvaluereplacingestimator-replacementmode-system-boolean)\"\r\n    click Sdca \"https://docs.microsoft.com/dotnet/api/microsoft.ml.trainers.sdcaregressiontrainer?view=ml-dotnet\"\r\n  end\r\n  subgraph InputColumns\r\n    InputSchema[\"Col1, Col2, Label\"]\r\n  end\r\n  InputColumns-->Pipeline\r\n  Pipeline-->OutputColumns\r\n```\r\n\r\n## Proposed Implementation\r\n\r\n```mermaid\r\nflowchart LR;\r\n    EstimatorChain --> Mermaid\r\n    Mermaid --> Markdig\r\n    Markdig --> HTML\r\n    HTML --> CustomFormatter\r\n    HTML --> Image\r\n```\r\n\r\n1. Take an ML.NET `EstimatorChain` and dynamically generate Mermaid diagram.\r\n2. Process Mermaid diagram as Markdown using Markdig\r\n3. Convert Mermaid diagram to HTML\r\n4. Display HTML\r\n    1. If in interactive environment, register a custom formatter.\r\n    1. If in standard .NET application, save as image.","Url":"https://github.com/dotnet/machinelearning/issues/6326","RelatedDescription":"Open issue \"Create Pipeline Visualizer\" (#6326)"},{"Id":"1370979646","IsPullRequest":false,"CreatedAt":"2022-09-13T07:20:39","Actor":"crazyoutlook","Number":"6324","RawContent":null,"Title":"ML.Net incorrect results with ONNX model","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10/11\r\n- **.NET Version (eg., dotnet --info)**: Dot Net versions 2.1/5/6\r\n[ML.Net_Onnx.zip](https://github.com/dotnet/machinelearning/files/9554463/ML.Net_Onnx.zip)\r\n\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI created a object detection model in Azure Custom Vision then exported it as ONNX and tried consuming it with ML.Net. I am using following ML package versions : Microsoft.ML (1.4.0), Microsoft.ML.ImageAnalytics (1.4.0). Microsoft.ML.OnnxTransformer (1.4.0)\r\n\r\n- **What happened?**\r\nML.Net with ONNX model is giving me incorrect prediction results or no results or very poor confidence levels.\r\n\r\n- **What did you expect?**\r\nI am expecting correct results when working with ONNX model and ML.Net. To re-confirm the issue I consumed same ONNX model with Python code and it worked correct and prediction results were as expected. So there does not seem to be any issue with ONNX model file. The issue seems to be with ML.Net code in the way predictions are done\r\n\r\n### Source code / logs\r\nI am attaching ML.Net source code which I am using to consume ONNX model\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6324","RelatedDescription":"Open issue \"ML.Net incorrect results with ONNX model\" (#6324)"},{"Id":"1369442351","IsPullRequest":false,"CreatedAt":"2022-09-13T07:20:19","Actor":"andrasfuchs","Number":"6320","RawContent":null,"Title":"Add resource (CPU,RAM,GPU,thread count) monitoring to AutoML experiments","State":"closed","Body":"**Is your feature request related to a problem? Please describe.**\r\nAs others also experienced, AutoML training is heavy on CPU and RAM and it can cause slowdowns and crashes (#6175, #6286, #6288, #6297). I sometimes run into an issue where some of my trials run longer than expected, potentially because my systems ran out of one of my resources. I had a few system crashes as well, when running AutoML forced Windows to start closing other applications.\r\n\r\n**Describe the solution you'd like**\r\nIt would be great to have more information about the running AutoML trials, including how much CPU, RAM, GPU are using on how many threads. Ideally it would be included in a new, periodically called method on AutoML's [IMonitor interface](https://github.com/dotnet/machinelearning/blob/main/src/Microsoft.ML.AutoML/AutoMLExperiment/IMonitor.cs).\r\nIf this was combined with an extended experiment control ([#5736](https://github.com/dotnet/machinelearning/issues/5736#issuecomment-1243329798)), we could make clever decisions about a trial or experiment depending on its resource usage. We could pause the experiment if the system is out of resources, or even cancel a trial if it uses suspiciously high amount of RAM to prevent system failure, for example. (As it happens sometimes with my experiments.)\r\n\r\n**Describe alternatives you've considered**\r\nWell, theoretically I could monitor my system resources constantly on a separate thread, but I still couldn't determine if AutoML is the reason for an elevated CPU, RAM or GPU usage, or something else running on the system independently from AutoML.\r\n\r\n**Additional context**\r\nThis issue is related to AutoML experiment resource usage limiting (#6061) and AutoML experiment control (#5736).\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6320","RelatedDescription":"Closed issue \"Add resource (CPU,RAM,GPU,thread count) monitoring to AutoML experiments\" (#6320)"},{"Id":"1370015938","IsPullRequest":false,"CreatedAt":"2022-09-12T14:34:14","Actor":"luisquintanilla","Number":"6322","RawContent":null,"Title":"Machine Learning for .NET Developers Survey - 2022","State":"open","Body":"Every year we conduct a survey to gather feedback on pain points and feature requests that help shape the direction of Machine Learning in .NET.\r\n\r\nThis past year we have made major improvements to [ML.NET](https://dot.net/ml) tooling and APIs, and now we're investigating new areas to improve and grow, including documentation, data prep, notebooks, deep learning, MLOps, model explainability, and more.\r\n\r\nPlease take this ~10 minute survey to give your input on what you want to see next in ML.NET, and optionally leave your contact information at the end if you'd like to talk with the ML.NET team about your feedback.\r\n\r\n## [Take the Survey](https://www.surveymonkey.com/r/mlnet-gh-2022)","Url":"https://github.com/dotnet/machinelearning/issues/6322","RelatedDescription":"Open issue \"Machine Learning for .NET Developers Survey - 2022\" (#6322)"},{"Id":"1370014259","IsPullRequest":false,"CreatedAt":"2022-09-12T14:33:16","Actor":"AM-Site1","Number":"6321","RawContent":null,"Title":"Suspicious fragments found by PVS-Studio Static Analyzer","State":"open","Body":"Hey!\r\n\r\nI checked the ML.NET framework with the PVS-Studio static code analyzer. I described the suspicious code fragments detected by the analyzer in my article ''[ML.NET: can Microsoft's machine learning be trusted?](https://pvs-studio.com/en/blog/posts/csharp/0988/)''. I thought you might be interested to read it.","Url":"https://github.com/dotnet/machinelearning/issues/6321","RelatedDescription":"Open issue \"Suspicious fragments found by PVS-Studio Static Analyzer\" (#6321)"},{"Id":"1368174754","IsPullRequest":true,"CreatedAt":"2022-09-10T00:47:49","Actor":"LittleLittleCloud","Number":"6318","RawContent":null,"Title":"remove microsoft.ml.core dependency from microsoft.ml.searchspace","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n\r\nAnd use `Contract.Assert` to replace `Contracts.Check`\r\n\r\nAnd remove `StringEnumConverter` on top of enum type.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6318","RelatedDescription":"Closed or merged PR \"remove microsoft.ml.core dependency from microsoft.ml.searchspace\" (#6318)"},{"Id":"1367987349","IsPullRequest":false,"CreatedAt":"2022-09-09T15:24:02","Actor":"jonathanpeppers","Number":"6317","RawContent":null,"Title":"TextFeaturizingEstimator.Options KeepNumbers and KeepPunctuations not exportable to ONNX?","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - .NET Version: .NET 6\r\n\r\n```xml\r\n<PackageReference Update=\"Microsoft.ML\" Version=\"2.0.0-preview.22410.1\" />\r\n<PackageReference Update=\"Microsoft.ML.OnnxConverter\" Version=\"0.20.0-preview.22410.1\" />\r\n```\r\n\r\n**Describe the bug**\r\n\r\nAs seen here: https://github.com/jonathanpeppers/inclusive-code-reviews-ml/pull/29#discussion_r944879120\r\n\r\nA pipeline such as:\r\n\r\n```csharp\r\n            var dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"isnegative\", \"isnegative\")\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"text_tf\", new TextFeaturizingEstimator.Options\r\n                                      {\r\n                                          //NOTE: not exportable to ONNX\r\n                                          KeepNumbers = false,\r\n                                          KeepPunctuations = false,\r\n                                          // NOTE: these work\r\n                                          KeepDiacritics = true,\r\n                                          CaseMode = TextNormalizingEstimator.CaseMode.Lower,\r\n                                      }, \"text\"))\r\n```\r\n\r\nHits an exception such as:\r\n\r\n```\r\nUnhandled exception. System.Collections.Generic.KeyNotFoundException: The given key 'text_TextNormalizer' was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.ML.Model.OnnxConverter.OnnxContextImpl.GetVariableName(String colName)\r\n   at Microsoft.ML.Transforms.Text.WordTokenizingTransformer.Mapper.SaveAsOnnx(OnnxContext ctx)\r\n   at Microsoft.ML.Data.RowToRowMapperTransform.Microsoft.ML.Model.OnnxConverter.ISaveAsOnnx.SaveAsOnnx(OnnxContext ctx)\r\n   at Microsoft.ML.Model.OnnxConverter.SaveOnnxCommand.ConvertTransformListToOnnxModel(OnnxContextImpl ctx, IChannel ch, IDataView inputData, IDataView outputData, LinkedList`1 transforms, HashSet`1 inputColumnNamesToDrop, HashSet`1 outputColumnNamesToDrop)\r\n   at Microsoft.ML.OnnxExportExtensions.ConvertToOnnxProtobufCore(IHostEnvironment env, OnnxContextImpl ctx, ITransformer transform, IDataView inputData, String[] outputColumnNamesToKeep)\r\n   at Microsoft.ML.OnnxExportExtensions.ConvertToOnnxProtobuf(ModelOperationsCatalog catalog, ITransformer transfor   at Microsoft.ML.OnnxExportExtensions.ConvertToOnnx(ModelOperationsCatalog catalog, ITransformer transform, IDataView inputData, Stream stream)\r\n   at InclusiveCodeReviews.ConsoleApp.ModelBuilder.SaveModel(MLContext mlContext, IDataView dataView, ITransformer \r\nmlModel, String modelRelativePath, DataViewSchema modelInputSchema) in C:\\src\\inclusive-code-reviews-ml\\ml.net\\InclusiveCodeReviews.ConsoleApp\\ModelBuilder.cs:line 102\r\n   at InclusiveCodeReviews.ConsoleApp.ModelBuilder.CreateModel() in C:\\src\\inclusive-code-reviews-ml\\ml.net\\InclusiveCodeReviews.ConsoleApp\\ModelBuilder.cs:line 49\r\n   at Program.<Main>$(String[] args) in C:\\src\\inclusive-code-reviews-ml\\ml.net\\InclusiveCodeReviews.Convert\\Program.cs:line 4\r\n```\r\n\r\n**To Reproduce**\r\n\r\nSteps to reproduce the behavior:\r\n1. Run this project:\r\n\r\nhttps://github.com/jonathanpeppers/inclusive-code-reviews-ml/tree/main/ml.net/InclusiveCodeReviews.Convert\r\n\r\n2. Uncomment these two lines:\r\n\r\nhttps://github.com/jonathanpeppers/inclusive-code-reviews-ml/blob/486f7737174702233825ceddf28adb5cc7912f43/ml.net/InclusiveCodeReviews.ConsoleApp/ModelBuilder.cs#L59-L61\r\n\r\n**Expected behavior**\r\n\r\nIn particular, we want to use `KeepPunctuations=false` and export to ONNX.\r\n\r\n**Screenshots, Code, Sample Projects**\r\n\r\nSee above.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6317","RelatedDescription":"Open issue \"TextFeaturizingEstimator.Options KeepNumbers and KeepPunctuations not exportable to ONNX?\" (#6317)"},{"Id":"1367057807","IsPullRequest":true,"CreatedAt":"2022-09-08T22:32:50","Actor":"LittleLittleCloud","Number":"6316","RawContent":null,"Title":"wip - add diskConvert option in fast tree search space","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n#6297 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/6316","RelatedDescription":"Open PR \"wip - add diskConvert option in fast tree search space\" (#6316)"}],"ResultType":"GitHubIssue"}},"RunOn":"2022-10-03T03:30:23.0014433Z","RunDurationInMilliseconds":522}