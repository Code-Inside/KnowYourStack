{"Data":{"GitHub":{"Issues":[{"Id":"618868922","IsPullRequest":true,"CreatedAt":"2020-05-16T05:39:01","Actor":"antoniovs1029","Number":"5134","RawContent":null,"Title":"Add public generic methods to TextLoader catalog that accept Options objects","State":"closed","Body":"The `TextLoaderSaverCatalog` contains 2 overloads of non-generic `CreateTextLoader` and `LoadFromTextFile`; one overload accepts a [given set of a parameters ](https://github.com/dotnet/machinelearning/blob/3da9e1e7a64f3485b811b99eaab05276a310192c/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoaderSaverCatalog.cs#L51-L58) and the other overload [accepts a TexLoader.Options object](https://github.com/dotnet/machinelearning/blob/3da9e1e7a64f3485b811b99eaab05276a310192c/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoaderSaverCatalog.cs#L83-L86).\r\n\r\nThe generic methods for `CreateTextLoader<TInput>` and `LoadFromTextFile<TInput>` only [have 1 method](https://github.com/dotnet/machinelearning/blob/3da9e1e7a64f3485b811b99eaab05276a310192c/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoaderSaverCatalog.cs#L112-L120) that accepts a given set of parameters. So in this PR I add another overload for those 2 methods that also accepts an Options object.\r\n\r\nThe reason to do this is that if we add new parameters to TextLoader (for example, as done in #5125) then they're only accessible through a TextLoader.Options (so without this PR `CreateTextLoader<TInput>` and `LoadFromTextFile<TInput>` won't be able to use the new options). Notice that we can't simply add a new parameter to the existing `CreateTextLoader<TInput>` and `LoadFromTextFile<TInput>` methods, since that is considered a breaking API change, and we can't do those until ML.NET version 2.","Url":"https://github.com/dotnet/machinelearning/pull/5134","RelatedDescription":"Closed or merged PR \"Add public generic methods to TextLoader catalog that accept Options objects\" (#5134)"},{"Id":"619369371","IsPullRequest":false,"CreatedAt":"2020-05-16T03:46:16","Actor":"frank-dong-ms","Number":"5139","RawContent":null,"Title":"Legacy tests - partially disabled tests","State":"closed","Body":"We have some tests that are partially disabled based on OS, arch or netcore version, resolve them or at least root cause them and let test running on all platform.\r\n\r\n\r\nTest | Category | Status | Owner\r\n-- | -- | -- | --\r\nMulticlassTreeFeaturizedLRTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nLinearClassifierTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nBinaryClassifierLogisticRegressionTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nBinaryClassifierSymSgdTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nBinaryClassifierTesterThresholdingTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastForestClassificationTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastTreeBinaryClassificationTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastTreeBinaryClassificationCategoricalSplitTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastTreeBinaryClassificationNoOpGroupIdTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nFastTreeHighMinDocsTest | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nCommandCrossValidationKeyLabelWithFloatKeyValues | [X64Fact(\"x86   output differs from Baseline\")] | resolve | Mustafa\r\nTestTreeEnsembleCombiner | [X64Fact(\"x86   fails. Associated GitHubIssue:   https://github.com/dotnet/machinelearning/issues/1216\")] | resolve | Frank\r\nTestTreeEnsembleCombinerWithCategoricalSplits | [X64Fact(\"x86   fails. Associated GitHubIssue:   https://github.com/dotnet/machinelearning/issues/1216\")] | resolve | Frank\r\nTestEnsembleCombiner | [X64Fact(\"x86   fails. Associated GitHubIssue:   https://github.com/dotnet/machinelearning/issues/1216\")] | resolve | Frank\r\nTestMulticlassEnsembleCombiner | [X64Fact(\"x86   fails. Associated GitHubIssue:   https://github.com/dotnet/machinelearning/issues/1216\")] | TextLoader is   throwing exception: Unhandled exception at 0x15B296B3 (coreclr.dll) in   dotnet.exe.14324.dmp: 0xC0000005: Access violation writing location   0x17A41000.   resolve | Frank\r\nExprBind | [X64Fact(\"sin(1e+30)   gives different value on x86.\"), TestCategory(\"Expr   Language\")] | Resolve       Math.Sin has valid   value range from approximately -9223372036854775295 to approximately   9223372036854775295: https://docs.microsoft.com/en-us/dotnet/api/system.math.sin?view=netcore-3.1.   If value is out of range, Math.Sin will return value passed in and not   throwing exception.       Below is some test   result:       Math.Sin(1e+30):       NetCoreApp X64:   0.0093314689311758247   NetCoreApp X86:   -0.75626273033357649   Net FX: 1e+30           Math.Sin(1e+10):       NetCoreApp X64:   -0.48750602508751067   NetCoreApp X86:   -0.48750602507627   Net FX:         -0.48750602507627           So this is   acceptable to skip in x86 and net framework, but we should consider to use   Math.Sin within its valid range. | Frank\r\nEntryPointPipelineEnsembleGetSummary | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nTestCrossValidationMacro | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nMulticlassLRTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nMulticlassLRNonNegativeTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierLogisticRegressionBinNormTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nDefaultCalibratorPerceptronTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nPAVCalibratorPerceptronTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierLDSvmTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierLDSvmNoBiasTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nCommandTrainMlrWithStats | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nKmeansOnnxConversionTest | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nSavePipeSsaSpikeNoData | [LessThanNetCore30OrNotNetCoreFact(\"netcoreapp3.1   output differs from Baseline\")] | resolve | Frank\r\nEnsemblesMultiClassBootstrapSelectorTest | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nEnsemblesMultiAveragerTest | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nEnsemblesMultiVotingCombinerTest | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nEnsemblesMultiStackCombinerTest | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nChangePointDetectionWithSeasonality | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nChangePointDetectionWithSeasonalityPredictionEngineNoColumn | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nChangePointDetectionWithSeasonalityPredictionEngine | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nSsaForecast | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nSsaForecastPredictionEngine | [LessThanNetCore30OrNotNetCoreFact(\"output   on .NetCore 3.0 differs. Tracked on issue 3856 in GitHub.\")] | resolve | Frank\r\nBinaryClassifierLogisticRegressionNonNegativeTest | [LessThanNetCore30OrNotNetCoreAndX64Fact(\"netcoreapp3.1   and x86 output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierLogisticRegressionGaussianNormTest | [LessThanNetCore30OrNotNetCoreAndX64Fact(\"netcoreapp3.1   and x86 output differs from Baseline\")] | resolve | Frank\r\nRandomCalibratorPerceptronTest | [LessThanNetCore30OrNotNetCoreAndX64Fact(\"netcoreapp3.1   and x86 output differs from Baseline\")] | resolve | Frank\r\nBinaryClassifierSymSgdTest | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Root cause: Linux uses a version of   MKL that doesn't support conditional numerical reproducibility the same way   as Windows runs.       The different   during different OS as well as unstable result for Linux is from MKL library   (method cblas_sdot). | Frank\r\nCommandTrainingBinaryFactorizationMachineWithValidation | RuntimeInformation.IsOSPlatform | Resolve   -    Lower   precision on Linux platforms       This   test is skipped due to missing dataset, also   Linux   uses lower precision due to below issue:   https://github.com/dotnet/machinelearning/issues/404 | Frank\r\nCommandTrainingBinaryFactorizationMachineWithValidationAndInitialization | RuntimeInformation.IsOSPlatform | Resolve -    Lower precision on   Linux platforms       Linux uses lower   precision due to below issue and PR:   https://github.com/dotnet/machinelearning/issues/404   https://github.com/dotnet/machinelearning/pull/1206 | Frank\r\nIrisLightGbm | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   resolve PR #5080 | Mustafa\r\nIrisLightGbmWithLoadColumnName | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Resolve PR #5080 | Mustafa\r\nIrisVectorLightGbm | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Resolve PR #5080 | Mustafa\r\nIrisVectorLightGbmWithLoadColumnName | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Resolve PR #5080 | Mustafa\r\nIrisSdcaMaximumEntropy | RuntimeInformation.IsOSPlatform | Skipped on   Non-Windows platforms   Resolve PR #5080 | Mustafa\r\nTextNormalizingOnnxConversionTest | RuntimeInformation.IsOSPlatform | Skipped on Linux   platforms       Skipped due to   below locale exception:   Failed to   construct locale with name:en_US.UTF-8:locale::facet::_S_create_c_locale name   not valid:Please, install necessary language-pack-XX and configure locales       https://github.com/dotnet/machinelearning/issues/5093       Mustafa will work   on a fix later | Mustafa\r\nTensorFlowTransformCifar | RuntimeInformation.IsOSPlatform | Resolved -    Different expected   results between Windows vs. Linux/OSX, runs only on 64-bit due to TF       By Design, this   difference is explained below:       //   taco_invalidpixelformat.jpg has '8207' pixel format on Windows but this   format translates to Format32bppRgb               // on macOS and Linux, hence on   Windows this image's pixel format is converted in resize transformer to   Format32bppArgb               // and on linux and macOS it is   not converted in resize transform since pixel format 'Format32bppRgb' can be   resized but               // in   ImagePixelExtractingTransformer it is converted to Format32bppArgb since   there we just support two                // pixel formats, i.e   Format32bppArgb and Format16bppArgb. | Frank\r\nTensorFlowImageClassificationDefault | RuntimeInformation.IsOSPlatform | Resolved – already   runs on all OS's, runs only on 64-bit due to TF | Mustafa\r\nTensorFlowImageClassification | RuntimeInformation.IsOSPlatform | Resolved – already   runs on all OS's, runs only on 64-bit due to TF | Mustafa\r\nMatrixFactorizationSimpleTrainAndPredict | RuntimeInformation.IsOSPlatform | Lower precision on   Linux, skipped on OSX | Mustafa   Mustafa\r\nOneClassMatrixFactorizationInMemoryDataZeroBaseIndex | RuntimeInformation.IsOSPlatform | Resolved -    Lower precision on   non-Windows platforms       There are   randomness during initialization in native matrix factorization   library(default_random_engine). This default_random_engine seems have   different implementation on different OS.   https://stackoverflow.com/questions/32730906/random-generates-same-number-in-linux-but-not-in-windows/32731387 | Frank\r\nMulticlassLRTest | Debug   Release Different Baseline | resolve | Mustafa\r\nRandomCalibratorPerceptronTest | Debug   Release Different Baseline | resolve | Mustafa\r\nLinearClassifierTest | Debug   Release Different Baseline | resolve | Mustafa\r\nMulticlassTreeFeaturizedLRTest | Debug   Release Different Baseline | resolve | Mustafa\r\nFastForestClassificationTest | Debug   Release Different Baseline | resolve | Mustafa\r\nBinaryClassifierLogisticRegressionNormTest | Debug   Release Different Baseline | resolve | Mustafa\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5139","RelatedDescription":"Closed issue \"Legacy tests - partially disabled tests\" (#5139)"},{"Id":"619337977","IsPullRequest":true,"CreatedAt":"2020-05-16T00:27:26","Actor":"Lynx1820","Number":"5138","RawContent":null,"Title":"Adding support for MurmurHash KeyDataTypes ","State":"open","Body":"ML.NET's behavior is to map zero input values to zero, instead of hashes. \r\n- Adding that behavior to the onnx export and a test. \r\n\r\nTODO:  rebase once other murmurhash PR are merged \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5138","RelatedDescription":"Open PR \"Adding support for MurmurHash KeyDataTypes \" (#5138)"},{"Id":"619270991","IsPullRequest":true,"CreatedAt":"2020-05-15T22:59:56","Actor":"mstfbl","Number":"5137","RawContent":null,"Title":"Update Ubuntu build and reenable TextNormalizingOnnxConversionTest() on Linux","State":"closed","Body":"This PR updates our Ubuntu CI builds with the correct installation pattern for `libomp-dev`, and the correct updating of its locale setting, which enables us to re-activate the unit test TextNormalizingOnnxConversionTest().","Url":"https://github.com/dotnet/machinelearning/pull/5137","RelatedDescription":"Closed or merged PR \"Update Ubuntu build and reenable TextNormalizingOnnxConversionTest() on Linux\" (#5137)"},{"Id":"619233862","IsPullRequest":true,"CreatedAt":"2020-05-15T20:33:08","Actor":"eerhardt","Number":"5136","RawContent":null,"Title":"Fix Microsoft.ML.DataView references","State":"open","Body":"The assembly in the package references Collections.Immutable, but the nuget package doesn't. This can cause errors if someone just references the Microsoft.ML.DataView package.\r\n\r\nFixing by adding the reference.\r\n\r\nSee the .csproj here:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/212081c62855a835e0612887f705a8f87a899624/src/Microsoft.ML.DataView/Microsoft.ML.DataView.csproj#L8-L11","Url":"https://github.com/dotnet/machinelearning/pull/5136","RelatedDescription":"Open PR \"Fix Microsoft.ML.DataView references\" (#5136)"},{"Id":"618676888","IsPullRequest":true,"CreatedAt":"2020-05-15T18:21:47","Actor":"frank-dong-ms","Number":"5131","RawContent":null,"Title":"disable download meta file by default, only enable on CI","State":"closed","Body":"As download meta files sometime hangs, disable download from build stage by default, only enable meta files download at CI\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5131","RelatedDescription":"Closed or merged PR \"disable download meta file by default, only enable on CI\" (#5131)"},{"Id":"618486604","IsPullRequest":true,"CreatedAt":"2020-05-15T17:10:23","Actor":"beccamc","Number":"5128","RawContent":null,"Title":"Update TexFileSample to use FileShare.ReadWrite","State":"closed","Body":"Associated issue is in Model Builder repo Issue [530](https://github.com/dotnet/machinelearning-modelbuilder/issues/530) (let me know if I need to open one here). \r\n\r\nBasic problem is when .csv training files are open in excel customers cannot train in Model Builder. The root cause is incorrect `FileShare` setting on the FileStream. `FileAccess` specifies how we want to use the file. `FileShare` specifies how we allow other programs to use the file. Even though we're opening files as FileAccess.Read, setting to FileShare.Read means we won't allow other programs to write. This blocks us from reading a file already opened as ReadWrite by Excel. If found [this](https://stackoverflow.com/questions/897796/how-do-i-open-an-already-opened-file-with-a-net-streamreader) stack overflow to have the best explanation. \r\n\r\nI'm not familiar with how the TextLoad code works, so there may be other spots this should be updated. If anyone has advice let me know, or we can proceed with this change and see if other come up later. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/5128","RelatedDescription":"Closed or merged PR \"Update TexFileSample to use FileShare.ReadWrite\" (#5128)"},{"Id":"618966627","IsPullRequest":true,"CreatedAt":"2020-05-15T13:26:35","Actor":"mengaims","Number":"5135","RawContent":null,"Title":"Add SrCnn entire API by implementing funciton","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5135","RelatedDescription":"Open PR \"Add SrCnn entire API by implementing funciton\" (#5135)"},{"Id":"618708640","IsPullRequest":true,"CreatedAt":"2020-05-15T05:29:21","Actor":"frank-dong-ms","Number":"5133","RawContent":null,"Title":"test new meta file url","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5133","RelatedDescription":"Open PR \"test new meta file url\" (#5133)"},{"Id":"618701984","IsPullRequest":false,"CreatedAt":"2020-05-15T05:09:36","Actor":"iluveu28","Number":"5132","RawContent":null,"Title":"Method to check if a modelName already exists in the PredictionEnginePool","State":"open","Body":"This is related to an issue I brought up in Stack Overflow - https://stackoverflow.com/questions/61695078/ml-net-how-to-detect-a-model-is-missing-from-the-predictionenginepool/61773814#61773814\r\n\r\nIn the Web API, I need someway to PredictionEnginePool.GetModel by model name. I'd like to also do AddPredictionEnginePool outside of the Startup.cs. In my service layer, I check if a model doesnt exists then I will add it on the fly coz the new model had just been created post startup.\r\n\r\nThanks you very much in advance","Url":"https://github.com/dotnet/machinelearning/issues/5132","RelatedDescription":"Open issue \"Method to check if a modelName already exists in the PredictionEnginePool\" (#5132)"},{"Id":"618484474","IsPullRequest":true,"CreatedAt":"2020-05-14T23:08:04","Actor":"LittleLittleCloud","Number":"5127","RawContent":null,"Title":"Revert code gen","State":"closed","Body":"Revert CodeGen to take project reference to AutoML","Url":"https://github.com/dotnet/machinelearning/pull/5127","RelatedDescription":"Closed or merged PR \"Revert code gen\" (#5127)"},{"Id":"618500639","IsPullRequest":true,"CreatedAt":"2020-05-14T20:02:25","Actor":"justinormont","Number":"5130","RawContent":null,"Title":"Error message for non-parsable datasets in AutoML","State":"open","Body":"Fixes: #5129\r\n\r\n> I'd recommend improving the current error message:\r\n> https://github.com/dotnet/machinelearning/blob/e5a19af589dfb1468cd99628e82f6b49fb125323/src/Microsoft.ML.AutoML/ColumnInference/ColumnInferenceApi.cs#L120-L123\r\n> \r\n> It currently says, `\"Unable to split the file provided into multiple, consistent columns.\"`, which is rather uninformative and non-actionable.\r\n> \r\n> Perhaps, as I think @briacht is suggesting, have it list the acceptable file formats we can parse: `\"Unable to split the file provided into multiple, consistent columns. Readable formats include delimited files such as CSV/TSV. Check for a consistent number of columns and proper escaping and quoting.\"`.\r\n> \r\n> This messaging now includes, the problem, and next steps for the user.\r\n> \r\n> I mention delimited as AutoML supports more than CSV/TSV as it tries tab, comma, space, semi-colon as the separator ([src](https://github.com/dotnet/machinelearning/blob/e50c4d20012e0d62852f404ae443afca7dad043e/src/Microsoft.ML.AutoML/ColumnInference/TextFileContents.cs#L40)). If we run into other common separators, we can trivially augment this list. One candidate is the vertical bar `|`.","Url":"https://github.com/dotnet/machinelearning/pull/5130","RelatedDescription":"Open PR \"Error message for non-parsable datasets in AutoML\" (#5130)"},{"Id":"618498354","IsPullRequest":false,"CreatedAt":"2020-05-14T18:33:58","Actor":"justinormont","Number":"5129","RawContent":null,"Title":"Improve error messaging for non-parsable datasets","State":"open","Body":"I'd recommend improving the current error message:\r\nhttps://github.com/dotnet/machinelearning/blob/e5a19af589dfb1468cd99628e82f6b49fb125323/src/Microsoft.ML.AutoML/ColumnInference/ColumnInferenceApi.cs#L120-L123\r\n\r\nIt currently says, `\"Unable to split the file provided into multiple, consistent columns.\"`, which is rather uninformative and non-actionable.\r\n\r\nPerhaps, as I think @briacht is suggesting, have it list the acceptable file formats we can parse: `\"Unable to split the file provided into multiple, consistent columns. Readable formats include delimited files such as CSV/TSV. Check for a consistent number of columns and proper escaping and quoting.\"`.\r\n\r\nThis messaging now includes, the problem, and next steps for the user.\r\n\r\nI mention delimited as AutoML supports more than CSV/TSV as it tries tab, comma, space, semi-colon as the separator ([src](https://github.com/dotnet/machinelearning/blob/e50c4d20012e0d62852f404ae443afca7dad043e/src/Microsoft.ML.AutoML/ColumnInference/TextFileContents.cs#L40)). If we run into other common separators, we can trivially augment this list. One candidate is the vertical bar `|`.","Url":"https://github.com/dotnet/machinelearning/issues/5129","RelatedDescription":"Open issue \"Improve error messaging for non-parsable datasets\" (#5129)"},{"Id":"617793842","IsPullRequest":true,"CreatedAt":"2020-05-14T16:59:01","Actor":"frank-dong-ms","Number":"5122","RawContent":null,"Title":"enable build step timeout also some code cleanup","State":"closed","Body":"1. set the build steps to timeout at 20 minutes\r\n2. remove MatrixFactorizationFact\r\n3. remove RetryFact and related class\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5122","RelatedDescription":"Closed or merged PR \"enable build step timeout also some code cleanup\" (#5122)"},{"Id":"618190939","IsPullRequest":false,"CreatedAt":"2020-05-14T12:30:27","Actor":"Aamirkhan10218","Number":"5126","RawContent":null,"Title":"Hi Please tell me about the description of the dataset of Product.stats.csv of eShopDashboard Machine Learning Project of Sales Forecasting  like","State":"open","Body":"Hi Please tell me about the description of the dataset of Product.stats.csv of eShopDashboard Machine Learning Project of Sales Forecasting  like \r\nwhat is the meaning of \r\nnext\r\navg\r\ncount\r\nmax\r\nmin\r\nprev\r\n[products.stats.xlsx](https://github.com/dotnet/machinelearning-samples/files/4628273/products.stats.xlsx)\r\ni'll be very grateful to you\r\n\r\n_Originally posted by @Aamirkhan10218 in https://github.com/dotnet/machinelearning-samples/pull/661#issuecomment-628601541_","Url":"https://github.com/dotnet/machinelearning/issues/5126","RelatedDescription":"Open issue \"Hi Please tell me about the description of the dataset of Product.stats.csv of eShopDashboard Machine Learning Project of Sales Forecasting  like\" (#5126)"},{"Id":"618107979","IsPullRequest":true,"CreatedAt":"2020-05-14T10:18:58","Actor":"antoniovs1029","Number":"5125","RawContent":null,"Title":"Enable TextLoader to accept new lines in quoted fields","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning-automl/issues/193\r\n\r\nAddresses these issues (see below):\r\nhttps://github.com/dotnet/machinelearning/issues/4460\r\nhttps://github.com/dotnet/machinelearning-modelbuilder/issues/702\r\n\r\nBased on @LittleLittleCloud 's PR: \r\nhttps://github.com/dotnet/machinelearning/pull/4584\r\n\r\nThis PR enables TextLoader to load rows which have new line characters inside quoted fields. So, for example, if the input CSV file has:\r\n\r\n```\r\nid,description,animal\r\n11,\"this is a\r\nquoted field with\r\nnewlines,cat\r\n```\r\nthen all of that will actually be loaded into a single row. Previously, if the TextLoader was presented with such a case, it would typically throw exceptions because it wasn't able to parse it correctly.\r\n\r\nI took @LittleLittleCloud 's PR which had most of the work done, and added some corner cases, public interfaces to this feature, and made and ran different tests, addressing the comments on that other PR.\r\n\r\n### Complying with RFC 4180\r\nI was tasked to take care of this issue, while also making the TextLoader compliant with [RFC 4180](https://tools.ietf.org/html/rfc4180) (on CSV format). Turns out the TextLoader already accepted pretty much everything that the RFC states, except for accepting new lines inside quoted fields, which is pretty much the only thing fixed in this PR.\r\n\r\n1. Notice that this means that TextLoader was already able to escape 2 double quotes (\"\") inside quoted fields; i.e. `\"this is \"\"an\"\" example\"` will correctly be loaded as `this is \"an\" example`.\r\n2. When loading CSV files TextLoader also accepts and do other things that the RFC doesn't mention. For example, filtering lines that start with \"//\" as if they were comments, or accepting 1 double quote (\") in the middle of a field when allowQuoting is false.\r\n3. It seems to me the only thing that the RFC states and that ML.NET doesn't follow, is that the RFC says that spaces should also be considered part of the fields, and not be ignored... but in general ML.NET ignores spaces at [the beginning](https://github.com/dotnet/machinelearning/blob/8e5f7b42cd65660393b3ac59765ae166ee7ea4ad/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoaderParser.cs#L1095) and [at the end](https://github.com/dotnet/machinelearning/blob/8e5f7b42cd65660393b3ac59765ae166ee7ea4ad/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoaderParser.cs#L802) of each field, and line.\r\n\r\n### Modelbuilder and AutoML issues\r\nThere are different issues in Modelbuilder and AutoML that were supposed to be caused by TextLoader and I was supposed to fix them on this PR. But after looking into them, it doesn't seem that they are caused by the TextLoader. I have opened [this issue](https://github.com/dotnet/machinelearning-modelbuilder/issues/747) in ModelBuilder explaining this in more detail, but in general, for some reason, if the first line (after the header) of a CSV file contains a comma inside a quoted field, then ModelBuilder shows an error saying it can't be loaded; it was said that the problem was on TextLoader, but it isn't, particularly because TextLoader doesn't have any problem escaping commas inside quoted fields.\r\n\r\nSo, regarding issue https://github.com/dotnet/machinelearning-modelbuilder/issues/702\r\n1. ML.NET's TextLoader was able to load most of the datasets pointed there, despite the fact that ModelBuilder shows an error message when the user selects them on the GUI.\r\n2. Only some of the jigsaw datasets (such as jigsaw-toxic-comment-train.csv) and the Airbnb datasets included new lines inside quoted fields so they couldn't be loaded by ML.NET. This is fixed on this PR.\r\n\r\nRegarding issue https://github.com/dotnet/machinelearning/issues/4460\r\n1. @LittleLittleCloud mentioned that there were problems using InferColumns() with CSV files that contained new lines inside quotes, so this is fixed on this PR and I add a test reproducing that.\r\n2. @LittleLittleCloud also provided a listings.csv dataset, which doesn't include new lines inside quotes, and so this PR doesn't really affect that. Regarding this dataset, he didn't mentioned problems loading it, but that there were some problems with how the InferColumns method worked with double quotes. It looks to me that that dataset is loaded correctly (i.e. scaping \"\" as expected), so I further discussions would be needed about this to see where's the real root cause, as it's likely not in TextLoader.\r\n\r\n### Testing this PR\r\nTo test this PR I:\r\n1. Added 2 new tests\r\n2. Ran locally all existing ML.NET tests, using ReadMultilines = true as default. And it all worked as expected. I did this both using 1 thread or multiple threads for the text loader, to check the effect of multithreading.\r\n3. Loaded all the datasets provided by ModelBuilder team successfully in ML.NET.","Url":"https://github.com/dotnet/machinelearning/pull/5125","RelatedDescription":"Open PR \"Enable TextLoader to accept new lines in quoted fields\" (#5125)"},{"Id":"617917257","IsPullRequest":true,"CreatedAt":"2020-05-14T04:36:26","Actor":"frank-dong-ms","Number":"5124","RawContent":null,"Title":"test on OneClassMatrixFactorizationInMemoryDataZeroBaseIndex","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5124","RelatedDescription":"Open PR \"test on OneClassMatrixFactorizationInMemoryDataZeroBaseIndex\" (#5124)"},{"Id":"616311940","IsPullRequest":true,"CreatedAt":"2020-05-14T04:36:07","Actor":"frank-dong-ms","Number":"5119","RawContent":null,"Title":"test os specific tests","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5119","RelatedDescription":"Closed or merged PR \"test os specific tests\" (#5119)"},{"Id":"617262411","IsPullRequest":true,"CreatedAt":"2020-05-14T02:38:23","Actor":"mstfbl","Number":"5121","RawContent":null,"Title":"Updated libmf and corresponding MatrixFactorizationSimpleTrainAndPredict() baselines per build","State":"closed","Body":"Fixes #4874 \r\n\r\nThis PR updates the libmf submodule, where its recent changes in libmf [PR #41](https://github.com/cjlin1/libmf/pull/41) and [PR #42](https://github.com/cjlin1/libmf/pull/42) address the shuffling of values in a given matrix. \r\n\r\nThe C++ function `void random_shuffle(_RanIt _First, _RanIt _Last)` is implemented differently on Windows vs. MacOS vs. Linux. This resulted in inconsistent results on MacOS and more-predictable yet still inconsistent results on Linux. As a result, a given matrix factorization problem, even with a constant seed, produced differing MSEs between each run on each system. The libmf codebase has been updated to prevent this, and baseline MSE values in the unit test `MatrixFactorizationSimpleTrainAndPredict()` have been updated to reflect this.","Url":"https://github.com/dotnet/machinelearning/pull/5121","RelatedDescription":"Closed or merged PR \"Updated libmf and corresponding MatrixFactorizationSimpleTrainAndPredict() baselines per build\" (#5121)"},{"Id":"617805132","IsPullRequest":true,"CreatedAt":"2020-05-13T22:54:20","Actor":"jwood803","Number":"5123","RawContent":null,"Title":"Use Channel Instead of BufferBlock","State":"open","Body":"Updates for #4482.\r\n\r\n@eerhardt I took a shot at a single replacement to make sure it looks good before continuing. Does this look good or am I missing anything?","Url":"https://github.com/dotnet/machinelearning/pull/5123","RelatedDescription":"Open PR \"Use Channel Instead of BufferBlock\" (#5123)"},{"Id":"617142500","IsPullRequest":true,"CreatedAt":"2020-05-13T06:20:21","Actor":"frank-dong-ms","Number":"5120","RawContent":null,"Title":"move tf meta file download to build stage","State":"closed","Body":"recently observe several test fail due to meta file download fail, move download to build stage which has 2 advantage,\r\n1. if download fail, fail fast at build stage\r\n2. we used to download large benchmark data (over 800 MB) and this download is quite stable, try download here\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=637938&view=logs&j=5aa5c7df-492a-5eaf-973a-62b7b0f0ee3b&t=ffdbd604-f3e2-5332-cf61-c8dd00799b47\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=639940&view=logs&j=4e8eb92e-b635-5c96-398c-05943bacd8c5&t=cf6d66af-7fee-5841-f0be-a4bf6642a2ae\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=640227&view=logs&j=c54dae93-d956-5713-8cb2-8e90b1d124e1&t=87b64192-025a-5709-ee76-220b68eba827","Url":"https://github.com/dotnet/machinelearning/pull/5120","RelatedDescription":"Closed or merged PR \"move tf meta file download to build stage\" (#5120)"},{"Id":"616277104","IsPullRequest":true,"CreatedAt":"2020-05-12T03:21:13","Actor":"frank-dong-ms","Number":"5117","RawContent":null,"Title":"ensure benchmark dataset is downloaded before using","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5117","RelatedDescription":"Closed or merged PR \"ensure benchmark dataset is downloaded before using\" (#5117)"},{"Id":"616279268","IsPullRequest":true,"CreatedAt":"2020-05-12T02:03:02","Actor":"frank-dong-ms","Number":"5118","RawContent":null,"Title":"move nightly build pipeline and outer pipeline back to hosted","State":"closed","Body":"move nightly build pipeline and outer loop pipeline back to hosted\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5118","RelatedDescription":"Closed or merged PR \"move nightly build pipeline and outer pipeline back to hosted\" (#5118)"},{"Id":"616188351","IsPullRequest":false,"CreatedAt":"2020-05-11T21:07:28","Actor":"JulioAlbinatiCortez","Number":"5116","RawContent":null,"Title":"FileNotFound error when saving the model.zip file on AML","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Not sure, running on AML Compute.\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.0\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI have an AML pipeline where I use ML.NET to train a LightGBM model and save results on a blob storage. This pipeline reads data from ADLS.\r\n- **What happened?**\r\nThe training stage failed with an exception that suggests an I/O error (file not found).\r\n- **What did you expect?**\r\nThis same pipeline have worked in the recent past. This is the first time I'm seeing this error.\r\n\r\n### Source code / logs\r\n\r\nLogs from the training stage:\r\n_[1] 'Loading data for LightGBM' finished in 00:27:01.1484891.\r\n[2] 'Training with LightGBM' started.\r\n.***** Unexpected failure. Please refer to https://aka.ms/MLNetIssue to file an issue with details *****\r\n***** Error log has been saved to '/tmp/TLC/Error_20200511_192219_facb0cb4-1e59-4354-b1c2-870a44ba1ca4.log', please refer to https://aka.ms/MLNetIssue to file an issue with details *****\r\n===== Begin detailed dump =====\r\n(1) Unexpected exception: Could not find file '/mnt/batch/tasks/shared/LS_root/jobs/devexperimentation/azureml/bdaad31a-ef2f-47cd-b99b-85119e487d7c/mounts/workspaceblobstore/azureml/bdaad31a-ef2f-47cd-b99b-85119e487d7c/ModelOutput/model.zip'., 'System.IO.FileNotFoundException'\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at Microsoft.ML.Data.SimpleFileHandle.OpenReadStream() in /machinelearning/src/Microsoft.ML.Core/Data/IFileHandle.cs:line 193\r\n   at Microsoft.ML.Tools.SavePredictorCommand.Run() in /machinelearning/src/Microsoft.ML.Data/Commands/SavePredictorCommand.cs:line 82\r\n   at Microsoft.ML.Tools.Maml.MainCore(IHostEnvironment env, String args, Boolean alwaysPrintStacktrace) in /machinelearning/src/Microsoft.ML.Maml/MAML.cs:line 142\r\n====== End detailed dump =====_\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5116","RelatedDescription":"Open issue \"FileNotFound error when saving the model.zip file on AML\" (#5116)"},{"Id":"616105156","IsPullRequest":false,"CreatedAt":"2020-05-11T18:53:04","Actor":"terrajobst","Number":"5115","RawContent":null,"Title":"Survey: repo contribution experience","State":"open","Body":"We’ve been working as a team, and community, for five years in the dotnet org on the .NET Core project. Many of the same GitHub handles have remained constant over that time, some are new, and others have come and gone. Thanks to everyone that has contributed! We normally focus on how to improve the product, but we’re turning our focus to improving the open source project. We’ve created a survey to better understand your individual experience of participating and contributing in this project.\r\n\r\nWe would appreciate your feedback so we can work to address shortcomings and missed opportunities. If you don’t supply contact details, then responses will be anonymous.\r\n\r\n[Survey](https://www.surveymonkey.com/r/ZLPVNX9?SourceRepo=dotnet%2Fmachinelearning)\r\n\r\nThank you for your time!\r\n\r\n### Discussion\r\n\r\nFor discussion, please go to https://github.com/dotnet/runtime/issues/36235.","Url":"https://github.com/dotnet/machinelearning/issues/5115","RelatedDescription":"Open issue \"Survey: repo contribution experience\" (#5115)"},{"Id":"616072768","IsPullRequest":true,"CreatedAt":"2020-05-11T18:00:06","Actor":"wangyems","Number":"5114","RawContent":null,"Title":"Improve error message when defining custom type for variables","State":"open","Body":"resolve https://github.com/dotnet/machinelearning/issues/4122\r\n\r\nThe unhelpful message stuff is a bit different from the above link's description. ML.NET throws unhelpful message not because the customer uses the wrong type(different from the type defined in onnx), but defining the variable using the same type as OnnxSequenceType. However, the correct type should be IEnumerable<OnnxSequenceType>.\r\n\r\nThis change adds more information to existing exception message and adds a special error message for errors like this when customer carelessly defines a container variable without using container type\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5114","RelatedDescription":"Open PR \"Improve error message when defining custom type for variables\" (#5114)"},{"Id":"615403389","IsPullRequest":false,"CreatedAt":"2020-05-10T14:29:31","Actor":"adriansd27","Number":"5113","RawContent":null,"Title":"Evaluating model that loads images from disk throws an exception in ASP.NET core","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: ASP.NET Core 3.1\r\n\r\n### Issue\r\n\r\nI'm running ASP.NET Core 3.1. Training the model works fine. PredictionEnginePool predicts fine. However if I try to get the metrics of the trained model I'm getting the below exception. Is it that ASP.NET Core doesn't support System.Drawing.Bitmap? If so, is there any alternative option to evaluate a model in ASP.NET Core?\r\n\r\n### Source code / logs\r\n\r\n     var trainingData = _mlContext.Data.LoadFromEnumerable(imageDataTags);\r\n     var model = pipeline.Fit(trainingData);\r\n     var testingData = _mlContext.Data.LoadFromEnumerable(testImageDataTags);\r\n     var predictions = model.Transform(testingData);\r\n     var metrics = _mlContext.MulticlassClassification.Evaluate(predictions,\"LabelKey\");\r\n\r\n```System.InvalidOperationException: Splitter/consolidator worker encountered exception while consuming source data\r\n ---> System.ArgumentException: Parameter is not valid.\r\n   at System.Drawing.Bitmap..ctor(String filename, Boolean useIcm)\r\n   at System.Drawing.Bitmap..ctor(String filename)\r\n   at Microsoft.ML.Data.ImageLoadingTransformer.Mapper.<>c__DisplayClass4_0.<MakeGetterImageDataViewType>b__0(Bitmap& dst)\r\n   at Microsoft.ML.Transforms.Image.ImageResizingTransformer.Mapper.<>c__DisplayClass3_0.<MakeGetter>b__1(Bitmap& dst)\r\n   at Microsoft.ML.Transforms.Image.ImagePixelExtractingTransformer.Mapper.<>c__DisplayClass5_0`1.<GetGetterCore>b__1(VBuffer`1& dst)\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.TensorValueGetterVec`1.GetTensor()\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.Mapper.UpdateCacheIfNeeded(Int64 position, ITensorValueGetter[] srcTensorGetters, String[] activeOutputColNames, OutputCache outputCache)\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.Mapper.<>c__DisplayClass9_0`1.<MakeGetter>b__4(VBuffer`1& dst)\r\n   at Microsoft.ML.Data.SchemaBindablePredictorWrapperBase.<>c__DisplayClass18_0`2.<GetValueGetter>b__0(TDst& dst)\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.InPipe.Impl`1.Fill()\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.<>c__DisplayClass5_1.<ConsolidateCore>b__2()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.Batch.SetAll(OutPipe[] pipes)\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.Cursor.MoveNextCore()\r\n   at Microsoft.ML.Data.RootCursorBase.MoveNext()\r\n   at Microsoft.ML.Data.EvaluatorBase`1.ProcessData(IDataView data, RoleMappedSchema schema, Func`2 activeColsIndices, TAgg aggregator, AggregatorDictionaryBase[] dictionaries)\r\n   at Microsoft.ML.Data.EvaluatorBase`1.Microsoft.ML.Data.IEvaluator.Evaluate(RoleMappedData data)\r\n   at Microsoft.ML.Data.MulticlassClassificationEvaluator.Evaluate(IDataView data, String label, String score, String predictedLabel)\r\n   at Microsoft.ML.MulticlassClassificationCatalog.Evaluate(IDataView data, String labelColumnName, String scoreColumnName, String predictedLabelColumnName, Int32 topKPredictionCount)\r\n   at PDCSBE.Services.Implementation.PredictionService.TrainModel() in D:\\...\\Services\\Implementation\\PredictionService.cs:line 91\r\n   at PDCSBE.Api.Controllers.PredictController.TrainModel(ModelTrainerDataInputDto input) in D:\\...\\Controllers\\PredictController.cs:line 26\r\n   at lambda_method(Closure , Object , Object[] )\r\n   at Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(Object target, Object[] parameters)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Logged|12_1(ControllerActionInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware.<Invoke>g__AwaitMatcher|8_0(EndpointRoutingMiddleware middleware, HttpContext httpContext, Task`1 matcherTask)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n\r\nHEADERS\r\n=======\r\nAccept: */*\r\nAccept-Encoding: gzip, deflate, br\r\nCache-Control: no-cache\r\nConnection: keep-alive\r\nContent-Length: 214\r\nContent-Type: application/json\r\nHost: localhost:44370\r\nUser-Agent: PostmanRuntime/7.24.1\r\nPostman-Token: ced1eca6-9e0b-4292-9887-f46a6d1c57d5\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/5113","RelatedDescription":"Open issue \"Evaluating model that loads images from disk throws an exception in ASP.NET core\" (#5113)"},{"Id":"615394321","IsPullRequest":false,"CreatedAt":"2020-05-10T13:41:21","Actor":"ddobric","Number":"5112","RawContent":null,"Title":"Training ImageClassification in parallel throws when trying to use the same WorkspacePath","State":"open","Body":"Using ImageClassification (ImageClassificationTrainer) on the machine as a job.\r\nThe job is implemented as a Azure Function, which is triggered by message in the storage queue. Every time the job receive a message the training process is calculated. The training runs for different data sets. That means, the function can observe multiple requests \r\n\r\nUnfortunately, when two training are running simultaneously on the same machine, we get following error:\r\n```\r\n\r\n2020-05-10T13:27:27  PID[11748] Information  ---> System.IO.IOException: Could not open file 'C:\\DWASFiles\\Sites\\#1prodidentweb-training-webjob\\LocalAppData\\cache\\bottleneck_train_cache.cac'. Error is: The process cannot access the file 'C:\\DWASFiles\\Sites\\#1prodidentweb-training-webjob\\LocalAppData\\cache\\bottleneck_train_cache.cac' because it is being used by another process.\r\n2020-05-10T13:27:27  PID[11748] Information  ---> System.IO.IOException: The process cannot access the file '***\\LocalAppData\\cache\\bottleneck_train_cache.cac' because it is being used by another process.\r\n2020-05-10T13:27:27  PID[11748] Information    at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n2020-05-10T13:27:27  PID[11748] Information    at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n2020-05-10T13:27:27  PID[11748] Information    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n2020-05-10T13:27:27  PID[11748] Information    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n2020-05-10T13:27:27  PID[11748] Information    at Microsoft.ML.Internal.Utilities.StreamUtils.OpenInStream(String fileName)\r\n2020-05-10T13:27:27  PID[11748] Information    at Microsoft.ML.Data.MultiFileSource.Open(Int32 index)\r\n2020-05-10T13:27:27  PID[11748] Information    --- End of inner exception stack trace ---\r\n```\r\n\r\nBy following the error shown above, it looks as trainer uses internal a local file(s), which should not be touched by multiple threads.\r\nI guess, this can be solved by providing a different 'WorkspacePath' for every request? In any case, such internal details, should be transparent for developers. Moreover, ML algorithms, at least in the .NET ecosystem should not internal create any kind of singleton inside of process and also machine.\r\nThis is very untypical for .NET. \r\n\r\nIn my opinion this is a not best design and it should should be fixed. ","Url":"https://github.com/dotnet/machinelearning/issues/5112","RelatedDescription":"Open issue \"Training ImageClassification in parallel throws when trying to use the same WorkspacePath\" (#5112)"},{"Id":"615265479","IsPullRequest":false,"CreatedAt":"2020-05-09T21:42:00","Actor":"ddobric","Number":"5111","RawContent":null,"Title":"Issue with image classification trainer creating files (such as TrainingSetSize.txt) on WebJobs","State":"open","Body":"Running the ML.NET image classification inside of WebJob (windows platform/.NET Core 3.1)\r\nAll works fine when executed locally. Unfortunately, when running as job it fails with the following error: \r\n\r\n> 2020-05-09T19:30:04  PID[9552] Information       The building model process has failed.\r\n> 2020-05-09T19:30:04  PID[9552] Information System.IO.FileNotFoundException: Could not find file 'C:\\DWASFiles\\Sites\\#1prodidentweb-training-webjob\\cache\\TrainingSetSize.txt'.\r\n> 2020-05-09T19:30:04  PID[9552] Information File name: 'C:\\DWASFiles\\Sites\\#1prodidentweb-training-webjob\\cache\\TrainingSetSize.txt'\r\n> 2020-05-09T19:30:04  PID[9552] Information    at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n> 2020-05-09T19:30:04  PID[9552] Information    at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n> 2020-05-09T19:30:04  PID[9552] Information    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n> 2020-05-09T19:30:04  PID[9552] Information    at System.IO.StreamReader.ValidateArgsAndOpenPath(String path, Encoding encoding, Int32 bufferSize)\r\n> 2020-05-09T19:30:04  PID[9552] Information    at System.IO.StreamReader..ctor(String path)\r\n> 2020-05-09T19:30:04  PID[9552] Information    at System.IO.File.OpenText(String path)\r\n> 2020-05-09T19:30:04  PID[9552] Information    at Microsoft.ML.Vision.ImageClassificationTrainer.GetNumSamples(String path)\r\n> 2020-05-09T19:30:04  PID[9552] Information    at Microsoft.ML.Vision.ImageClassificationTrainer.TrainAndEvaluateClassificationLayer(String trainBottleneckFilePath, Options options, String validationSetBottleneckFilePath, Int32 trainingsetSize)\r\n> 2020-05-09T19:30:04  PID[9552] Information    at Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n> 2020-05-09T19:30:04  PID[9552] Information    at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n> 2020-05-09T19:30:04  PID[9552] Information    at Microsoft.ML.Trainers.TrainerEstimatorBase`2.Fit(IDataView input)\r\n> 2020-05-09T19:30:04  PID[9552] Information    at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n> 2020-05-09T19:30:04  PID[9552] Information    at Microsoft.ML.TrainCatalogBase.CrossValidateTrain(IDataView data, IEstimator`1 estimator, Int32 numFolds, String samplingKeyColumn, Nullable`1 seed)\r\n> 2020-05-09T19:30:04  PID[9552] Information    at Microsoft.ML.MulticlassClassificationCatalog.CrossValidate(IDataView data, IEstimator`1 estimator, Int32 numberOfFolds, String labelColumnName, String samplingKeyColumnName, Nullable`1 seed)\r\n\r\nCreating of the text file seems not to be correctly implemented. If the path is not set to the permitted location, the required text file will not be created. In that case another error message should be created. \r\nFor example, following path is in WebJob (hosted in IIS) not allowed:\r\n\r\n`C:\\DWASFiles\\Sites\\#1prodidentweb-training-webjob`\r\n\r\nIt corresponds to %AppData% of the local machine. It is the working folder of IIS in context of an Azure Job. By changing the path to following one, all will work fine:\r\n\r\n`C:\\DWASFiles\\Sites\\#1prodidentweb-training-webjob\\Local`\r\n \r\nIn the code, this can be achieved by following:\r\n~~~\r\nWorkspacePath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),\r\n~~~\r\n\r\n### Recap\r\nTrainer creates internally many files. One of them is *TrainingSetSize.txt*. If the *options.WorkspacePath* is set to location on which the process has no write permission, the correct exception should be thrown. \r\n\r\nThis might also be a security issue is one chose path like \"WorkspacePath = \"..\\..\\xy\". That would lead the job process to touch the path, which possibly belongs to the job owned by some other customer. At the moment of writing of this, I didn't see security issue here, but who know what might happen in the future.","Url":"https://github.com/dotnet/machinelearning/issues/5111","RelatedDescription":"Open issue \"Issue with image classification trainer creating files (such as TrainingSetSize.txt) on WebJobs\" (#5111)"},{"Id":"614980242","IsPullRequest":true,"CreatedAt":"2020-05-09T05:47:37","Actor":"mstfbl","Number":"5110","RawContent":null,"Title":"Disabled BinaryClassifierSymSgdTest for test stability","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5110","RelatedDescription":"Closed or merged PR \"Disabled BinaryClassifierSymSgdTest for test stability\" (#5110)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-05-18T05:30:35.2047332Z","RunDurationInMilliseconds":681}