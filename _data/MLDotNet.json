{"Data":{"GitHub":{"Issues":[{"Id":"1986189202","IsPullRequest":true,"CreatedAt":"2023-11-16T23:42:39","Actor":"michaelgsharp","Number":"6880","RawContent":null,"Title":"Updates LightGBM from 2.X.X to 3.X.X","State":"closed","Body":"Updates LightGBM from 2.X.X to 3.X.X and all the associated baseline test files.\r\n\r\nAlso updates the SQL nuget package for its security update.","Url":"https://github.com/dotnet/machinelearning/pull/6880","RelatedDescription":"Closed or merged PR \"Updates LightGBM from 2.X.X to 3.X.X\" (#6880)"},{"Id":"1997644840","IsPullRequest":false,"CreatedAt":"2023-11-16T19:49:11","Actor":"asmirnov82","Number":"6887","RawContent":null,"Title":"Move DataFrame into separate repo without any dependency on ML .Net libraries","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nCurrently DataFrame release cycle depends on ML .NET (major version of the DataFrame is released with ML .NET once a year) \r\nDataFrame nuget package also has depency on Microsoft.ML.DataView (which is not required for some of the users, that use DataFrame for data analysis without using ML .Net features).\r\n\r\nHaving separate DataFrame repo without dependency on ML. NET will allow to increase the speed of development  new DataFrame \r\nfeatures and decrease time to market.\r\nHaving ML .NET dependency on particular version of DataFrame nuget package instead of the latest on the other hand increases stability of ML .NET. It aslo allows ML .NET to support wider range of .Net framework, while the newest version of the DataFrame may drop support of legacy .Net standard and go on with the latest LTS only.\r\n\r\n**Describe the solution you'd like**\r\nML .Net should provide extension methods for converting the DataFrame into IDataView and backward, also it should provide ML specific columns (currently VBufferDataFrameColumn) .\r\n\r\nThe DataFrame shouldn't have any specific ML .NET columns and functionality (only Apache Arrow compatible types) and no dependencies on ML .NET packages.\r\n\r\nThe DataFrame should be moved to a separate repo.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6887","RelatedDescription":"Open issue \"Move DataFrame into separate repo without any dependency on ML .Net libraries\" (#6887)"},{"Id":"1974986500","IsPullRequest":true,"CreatedAt":"2023-11-15T05:46:16","Actor":"michaelgsharp","Number":"6875","RawContent":null,"Title":"Changes some of the CPU Math implemenation from our current version to use the new TensorPrimitives package.","State":"closed","Body":"This changes some of the CPU Math implementation from our current version to use the new TensorPrimitives package.\r\n\r\nCurrently we are pointing to the rc2 version, but the following benchmarks have been done with a local copy of the GA version.\r\n\r\nThis also changes CPUMath to target .NET 8 instead of .NET 6. Did we want that for this version? Or should I change it back to 6 for this release? @ericstj @jeffhandley\r\n\r\nThe following is a summary of the methods in CPUMath, the old vs new benchmarks, and whether I updated it to use the new TensorPrimitives package. @tannergooding @stephentoub @jeffhandley @ericstj @luisquintanilla This is where we need to discuss. Is any performance hit worth taking? Or should anything that is slower be kept on the existing code?\r\n\r\nNET 8\r\n\r\n|          Method | arrayLength | Mean - Original | Mean - New | % Faster | Comments |\r\n|---------------- |------------ |---------------- |------------|--------- | -------- |\r\n|      AddScalarU |         512 |  25.30 ns       |  20.32 ns  | 25%      | |\r\n|           Scale |         512 |  19.91 ns       |  19.29 ns  |  3%      | |\r\n|       ScaleSrcU |         512 |  27.58 ns       |  20.74 ns  | 33%      | |\r\n|       ScaleAddU |         512 |  28.46 ns       |  29.05 ns  |          | Method Unchanged, composite function so slower with new code |\r\n|       AddScaleU |         512 |  29.74 ns       |  28.59 ns  |  4%      | |\r\n|      AddScaleSU |         512 | 345.92 ns       | 327.68 ns  |  6%      | Method Unchanged, dont have Sparse in Tensor Primitives. Can simulate but is slower. |\r\n|   AddScaleCopyU |         512 |  34.01 ns       |  27.03 ns  | 26%      | |\r\n|            AddU |         512 |  29.80 ns       |  26.71 ns  | 12%      | |\r\n|           AddSU |         512 | 325.32 ns       | 349.46 ns  |          | Method Unchanged, dont have Sparse in Tensor Primitives. Can simulate but is slower. |\r\n| MulElementWiseU |         512 |  33.92 ns       |  27.29 ns  | 24%      | |\r\n|             Sum |         512 |  36.57 ns       |  34.34 ns  |  6%      | |\r\n|          SumSqU |         512 |  37.50 ns       |  39.34 ns  | -5%      | |\r\n|      SumSqDiffU |         512 |  41.23 ns       |  43.38 ns  |          | Method Unchanged, composite function so slower with new code |\r\n|         SumAbsU |         512 |  43.74 ns       |  39.27 ns  | 11%      | |\r\n|     SumAbsDiffU |         512 |  47.23 ns       |  37.48 ns  | 26%      | |\r\n|         MaxAbsU |         512 |  42.30 ns       |  43.26 ns  |          | Method Unchanged, in GA MaxMagnitude is slow, has been fixed for next release |\r\n|     MaxAbsDiffU |         512 |  46.94 ns       |  47.73 ns  |         | Method Unchanged, in GA MaxMagnitude is slow, has been fixed for next release. Is composite function. |\r\n|            DotU |         512 |  50.34 ns       |  43.20 ns  | 17%      | |\r\n|           DotSU |         512 | 212.19 ns       | 213.18 ns  |          | Method Unchanged, dont have Sparse in Tensor Primitives. Can simulate but is slower. |\r\n|           Dist2 |         512 |  55.48 ns       |  47.43 ns  | 17%      | |\r\n\r\nFramework\r\n\r\n|          Method | arrayLength | Mean - Original | Mean - New | % Faster | Comments |\r\n|---------------- |------------ |---------------- |----------- |--------- |--------- |\r\n|      AddScalarU |         256 |  48.48 ns       |  29.88 ns  |  62%     | |\r\n|           Scale |         256 |  43.45 ns       |  28.55 ns  |  52%     | |\r\n|       ScaleSrcU |         256 |  49.87 ns       |  38.13 ns  |  31%     | |\r\n|       ScaleAddU |         256 |  47.87 ns       |  45.76 ns  |          | Method Unchanged, composite function so slower with new code |\r\n|       AddScaleU |         256 |  52.63 ns       |  62.58 ns  | -16%     | Slightly slower in new code. Do we want to keep it? |\r\n|      AddScaleSU |         256 | 151.00 ns       | 152.77 ns  |          | Method Unchanged, dont have Sparse in Tensor Primitives. Can simulate but is slower. |\r\n|   AddScaleCopyU |         256 |  48.35 ns       |  63.94 ns  | -24%     | Slightly slower in new code. Do we want to keep it? |\r\n|            AddU |         256 |  49.68 ns       |  59.32 ns  | -16%     | Slightly slower in new code. Do we want to keep it? |\r\n|           AddSU |         256 | 150.34 ns       | 153.89 ns  |          | Method Unchanged, dont have Sparse in Tensor Primitives. Can simulate but is slower. |\r\n| MulElementWiseU |         256 |  48.26 ns       |  69.89 ns  | -31%     | |\r\n|             Sum |         256 |  68.05 ns       |  59.74 ns  |  14%     | |\r\n|          SumSqU |         256 |  68.21 ns       |  62.08 ns  |  10%     | |\r\n|      SumSqDiffU |         256 |  57.52 ns       |  57.64 ns  |          | Method Unchanged, composite function so slower with new code |\r\n|         SumAbsU |         256 |  72.88 ns       |  65.01 ns  |  12%     | |\r\n|     SumAbsDiffU |         256 |  59.51 ns       |  68.23 ns  | -13%     | Slightly slower in new code. Do we want to keep it? |\r\n|         MaxAbsU |         256 |  72.26 ns       |  71.48 ns  |          | Method Unchanged, in GA MaxMagnitude is slow, has been fixed for next release |\r\n|     MaxAbsDiffU |         256 |  59.30 ns       |  58.87 ns  |          | Method Unchanged, in GA MaxMagnitude is slow, has been fixed for next release. Is composite function. |\r\n|            DotU |         256 |  58.93 ns       |  68.42 ns  | -14%     | Slightly slower in new code. Do we want to keep it? |\r\n|           DotSU |         256 | 109.76 ns       | 113.78 ns  |          | Method Unchanged, dont have Sparse in Tensor Primitives. Can simulate but is slower. |\r\n|           Dist2 |         256 |  59.49 ns       |  86.97 ns  | -32%     | Slightly slower in new code. Do we want to keep it? |\r\n\r\nI think that even if we don't want to keep the TensorPrimitives code in the cases where its slower, at least for .NET Framework we should add a check and if the native code doesn't exist to run these accelerated, we should fallback to the TensorPrimitives approach. That would have to be added in though.\r\n\r\nAll this was done with AVX256.","Url":"https://github.com/dotnet/machinelearning/pull/6875","RelatedDescription":"Closed or merged PR \"Changes some of the CPU Math implemenation from our current version to use the new TensorPrimitives package.\" (#6875)"},{"Id":"1988590716","IsPullRequest":true,"CreatedAt":"2023-11-14T22:10:27","Actor":"jeffhandley","Number":"6881","RawContent":null,"Title":"FabricBot: Remove area pod project board automation","State":"closed","Body":"Generated via https://github.com/dotnet/fabricbot-config/pull/81","Url":"https://github.com/dotnet/machinelearning/pull/6881","RelatedDescription":"Closed or merged PR \"FabricBot: Remove area pod project board automation\" (#6881)"},{"Id":"1993335134","IsPullRequest":false,"CreatedAt":"2023-11-14T18:40:27","Actor":"gktval","Number":"6886","RawContent":null,"Title":"Image clasification not working for onnx model","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n - ML.NET Version: 2.0.1\r\n - .NET Version: .Net 7\r\n\r\n**Describe the bug**\r\nI am loading an model trained in tensorflow and then converted to an onnx model. When making predictions, all the outputs are the first class even though they should not be. Also the prediction values vary only by a little. Here is an example of two output predictions:\r\n\r\n[1.5047534,  -0.16131932, 0.71119475]\r\n[1.5056, -0.16168906, 0.7110559]\r\n\r\nThis seems odd that there are negative values. So I don't think it is correct from that aspect. I thought it might be because the model was trained on RGBA but the MLContext transform uses ARGB/ABGR/etc. I tried switching the channels of the input images, but this did not help.  Any ideas of what I am doing wrong with my code below?\r\n\r\nThis classification model is almost identical to the model I trained with, except I am using 4 bands instead of 3: https://www.tensorflow.org/tutorials/images/classification\r\n\r\nHere is the code for loading the model: \r\n\r\n```\r\nITransformer GetPredictionPipeline(MLContext mlContext)\r\n{\r\nvar pipeline2 = mlContext\r\n.Transforms\r\n// Adjust the image to the required model input size\r\n.ResizeImages(\r\n    inputColumnName: \"sequential_input\",\r\n    imageWidth: 224,\r\n    imageHeight: 224,\r\n    outputColumnName: \"resized\"\r\n)\r\n// Extract the pixels form the image as a 1D float array, but keep them in the same order as they appear in the image.\r\n.Append(mlContext.Transforms.ExtractPixels(\r\n    inputColumnName: \"resized\",\r\n    colorsToExtract: Microsoft.ML.Transforms.Image.ImagePixelExtractingEstimator.ColorBits.All,\r\n    orderOfExtraction: Microsoft.ML.Transforms.Image.ImagePixelExtractingEstimator.ColorsOrder.ARGB,\r\n    outputColumnName: \"sequential_input\",\r\n    scaleImage: 1 / 255f)\r\n)\r\n// Perform the estimation\r\n.Append(mlContext.Transforms.ApplyOnnxModel(\r\n        modelFile: \"./model.onnx\",\r\n        inputColumnName: \"sequential_input\",\r\n        outputColumnName: \"dense_1,\r\n        gpuDeviceId: 0\r\n    )\r\n);\r\n\r\nvar emptyDv = mlContext.Data.LoadFromEnumerable(new OnnxInput[] { });\r\n\r\nvar model = pipeline2.Fit(emptyDv);\r\nreturn model;\r\n}\r\n```\r\n\r\nMy input/output look like this:\r\n```\r\npublic class OnnxInput\r\n{\r\n    public const int ImageWidth = 224;\r\n    public const int ImageHeight = 224;\r\n\r\n    [ColumnName(\"sequential_input\")]\r\n    [ImageType(ImageWidth, ImageHeight)]\r\n    public MLImage Image { get; set; }\r\n}\r\n\r\npublic class OnnxOutput\r\n{\r\n    [ColumnName(\"dense_1\")]\r\n    public float[] Output { get; set; }\r\n}\r\n```\r\n\r\nFinally, the prediction looks like this:\r\n```\r\nMLContext mlContext = new MLContext();\r\nvar onnxPredictionPipeline = GetPredictionPipeline(mlContext);\r\nvar onnxPredictionEngine = mlContext.Model.CreatePredictionEngine<OnnxInput, OnnxOutput>(onnxPredictionPipeline);\r\n\r\nfor (int j = 0; j < files.Length; j++)\r\n{\r\n    string pngFile = files[i];\r\n\r\n    // Create single instance of sample data from first line of dataset for model input\r\n    var mlImage = MLImage.CreateFromFile(pngFile);\r\n    var testInput = new OnnxInput\r\n    {\r\n        Image = mlImage \r\n    };\r\n    var prediction = onnxPredictionEngine.Predict(testInput);\r\n}\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6886","RelatedDescription":"Open issue \"Image clasification not working for onnx model\" (#6886)"},{"Id":"1991865031","IsPullRequest":true,"CreatedAt":"2023-11-14T02:28:38","Actor":"tearlant","Number":"6885","RawContent":null,"Title":"Issue #6606 - Add sample variance and standard deviation to NormalizeMeanVariance","State":"open","Body":"Fixes #6606 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/6885","RelatedDescription":"Open PR \"Issue #6606 - Add sample variance and standard deviation to NormalizeMeanVariance\" (#6885)"},{"Id":"1991547787","IsPullRequest":false,"CreatedAt":"2023-11-13T21:53:58","Actor":"anrouxel","Number":"6884","RawContent":null,"Title":"ONNX Named Entity Recognizer #6883 ","State":"open","Body":"Hello,\r\n**Is your feature request related to a problem? Please describe.**\r\nMy problem is that the Named Entity Recognizer doesn't support saving in ONNX. And, I'm working on a student project which is the creation of a medical application. And I need to extract information from a prescription (stored in a string) such as the name of the medicine. This model needs to be able to be used on other libraries.\r\n\r\n**Describe the solution you'd like**\r\nThe solution would be for the Named Entity Recognizer to support ONNX registration.\r\n\r\n**Describe alternatives you've considered**\r\n\r\n**Additional context**\r\n\r\nBest Regards,\r\n\r\nanrouxel","Url":"https://github.com/dotnet/machinelearning/issues/6884","RelatedDescription":"Open issue \"ONNX Named Entity Recognizer #6883 \" (#6884)"},{"Id":"1991542117","IsPullRequest":false,"CreatedAt":"2023-11-13T21:49:33","Actor":"anrouxel","Number":"6883","RawContent":null,"Title":"French Named Entity Recognizer","State":"open","Body":"Hello,\r\n**Is your feature request related to a problem? Please describe.**\r\nMy problem is that the Named Entity Recognizer doesn't support French. And, I'm working on a student project which is the creation of a medical application. And I need to extract information from a prescription (stored in a string) such as the name of the medicine.\r\n\r\n**Describe the solution you'd like**\r\nThe solution would be for \"Named Entity Recognizer\" to support French.\r\n\r\n**Describe alternatives you've considered**\r\n\r\n**Additional context**\r\n\r\nBest Regards,\r\n\r\nanrouxel","Url":"https://github.com/dotnet/machinelearning/issues/6883","RelatedDescription":"Open issue \"French Named Entity Recognizer\" (#6883)"},{"Id":"1988928712","IsPullRequest":false,"CreatedAt":"2023-11-11T12:34:16","Actor":"80LevelElf","Number":"6882","RawContent":null,"Title":"AutoML Binary Classification Experiment run for few second and finished without models","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: mcr.microsoft.com/dotnet/sdk:5.0 docker image (Linux Alpine)\r\n - ML.NET Version: 3.0.0-preview.23511.1\r\n - .NET Version: NET 5.0\r\n\r\n**Describe the bug**\r\nAt this moment we use ML.net 2, but because of the bug fix of https://github.com/dotnet/machinelearning/pull/6571 we have to switch to 3 version of ML.net to train our Binary Classification models (we need Positive Recall optimization metric).\r\n\r\nBut looks like Binary Classification Experiment is somehow broken in 3 version of ML.net:\r\n\r\n            var settings = new BinaryExperimentSettings\r\n            {\r\n                MaxExperimentTimeInSeconds = 30 * 60,\r\n                //MaxModels = 10,\r\n                OptimizingMetric = BinaryClassificationMetric.PositiveRecall,\r\n                MaximumMemoryUsageInMegaByte = 7500,\r\n                UseAutoZeroTuner = false\r\n            };\r\n\r\n            ExperimentResult<BinaryClassificationMetrics> experimentResult = experiment\r\n                .Execute(trainDataView, nameof(MlModelRow.Label), nameof(MlModelRow.LearningGroup));\r\n\r\n**_We use only FastForest and LightGBM trainers._** On my local PC (Windows 10) it's working great, but in the production docker image (Alpine Linux) the learning is finished after 10-30 seconds with:\r\n\r\n> Training time finished without completing a successful trial. Either no trial completed or the metric for all completed trials are NaN or Infinity\r\n\r\nI have tried to:\r\n\r\n1. Use MaxModels = 10 with MaxExperimentTimeInSeconds \r\n2. Use MaxModels = 10 insted of MaxExperimentTimeInSeconds \r\n3. Turn UseAutoZeroTuner to true\r\n\r\nBut nothing is working for me. Important point - MLNET_BACKEND is not set so we are not using OneDAL on production or test environment.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6882","RelatedDescription":"Open issue \"AutoML Binary Classification Experiment run for few second and finished without models\" (#6882)"},{"Id":"1976794108","IsPullRequest":true,"CreatedAt":"2023-11-09T19:59:54","Actor":"tearlant","Number":"6879","RawContent":null,"Title":"Issue #6606 - Add sample variance and standard deviation to NormalizeMeanVariance","State":"closed","Body":"Associated issue: https://github.com/dotnet/machinelearning/issues/6606\r\n\r\nAdding a flag so that NormalizeMeanVariance can use the sample variance/standard deviation instead of the population variance/standard deviation","Url":"https://github.com/dotnet/machinelearning/pull/6879","RelatedDescription":"Closed or merged PR \"Issue #6606 - Add sample variance and standard deviation to NormalizeMeanVariance\" (#6879)"},{"Id":"1976548312","IsPullRequest":false,"CreatedAt":"2023-11-03T16:28:46","Actor":"mvphelps","Number":"6878","RawContent":null,"Title":"Cannot cancel AutoML tasks when invoked via .Execute()","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nAutoML tasks created like mlContext.Auto().CreateRegressionExperiment(), when .Execute is invoked, are not cancellable. The cancellation token passed in the the settings on the Create call is ignored. Therefore a training run cannot be cancelled gracefully.\r\n\r\n**Describe the solution you'd like**\r\n1. Add an optional parameter to AutoMLExperiment.Run() that is a cancellation token with a default (identical to .RunAsync). \r\n2. Passed the new token on to .RunAsync. \r\n3. Update the callers to pass along their settings token. For example, in RegressionExperiment.Execute, the call to _experiment.Run() would become _experiment.Run(Settings.CancellationToken).\r\n\r\n**Describe alternatives you've considered**\r\nI do not see any alternatives. \r\n\r\n**Additional context**\r\nI am prepared to offer a PR for this. It would include connecting this functionality for RegressionExperiment, BinaryClassificationExperiment, and MulticlassClassificationExperiment, all of which suffer the same issue. For test coverage it appears something similar to AutoMLExperimentTests.AutoMLExperiment_throw_timeout_exception_when_ct_is_canceled_and_no_trial_completed_Async; invoking the synchronous version via another test would cover ensuring the token is passed along. For the individual experiment types, I don't see any tests that cover running these experiments via this api style, except for GridSearchTest.TestGridSearchTrialRunner2. I can attempt to follow a similar pattern such as this for each of the three experiment types. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/6878","RelatedDescription":"Open issue \"Cannot cancel AutoML tasks when invoked via .Execute()\" (#6878)"},{"Id":"1975102129","IsPullRequest":false,"CreatedAt":"2023-11-03T15:52:50","Actor":"gktval","Number":"6876","RawContent":null,"Title":"Image Classification does not evaluate data","State":"closed","Body":"**System Information (please complete the following information):**\r\n - Windows 11\r\n - ML.NET Version: 2.0.0\r\n - .NET Version: .Net 8 rc 2.95.11\r\n\r\n**Describe the bug**\r\nRunning an image classification, the training runs through very quickly (11 sec), the Accuracy and Cross-Entropy for each epoch is Nan. Is there a reason that the data did not train or a log where I can see problems? \r\n\r\nTraining another dataset very similar runs fine, but this particular dataset does not evaluate any of the data.\r\nPerhaps there is a minimum width/height the images can be for training? The images are varying size, but they should all have a w/h > 40px.\r\n\r\nBelow is a screenshot of the data: \r\n![image](https://github.com/dotnet/machinelearning/assets/7605046/67389875-af37-44d1-948d-fd6e7345a587)\r\n\r\nAlso, here is a snippet of the training:\r\nrestore \"C:\\PROGRAM FILES\\MICROSOFT VISUAL STUDIO\\2022\\PROFESSIONAL\\COMMON7\\IDE\\COMMONEXTENSIONS\\MICROSOFT\\MODELBUILDER\\AUTOMLSERVICE\\RuntimeManager\\tensorflow.gpu.csproj\" --configfile \"C:\\PROGRAM FILES\\MICROSOFT VISUAL STUDIO\\2022\\PROFESSIONAL\\COMMON7\\IDE\\COMMONEXTENSIONS\\MICROSOFT\\MODELBUILDER\\AUTOMLSERVICE\\RuntimeManager\\NuGet.config\" -r win-x64 /p:UsingToolXliff=false /p:TorchSharpVersion=0.98.3 /p:TorchSharpCudaRuntimeVersion=1.11.0.1 /p:TensorflowRuntimeVersion=2.3.1 /p:BaseIntermediateOutputPath=\"C:\\Users\\user\\AppData\\Local\\Temp\\ModelBuilder\\tensorflow-cuda.2.3.1\\obj\"\r\npublish \"C:\\PROGRAM FILES\\MICROSOFT VISUAL STUDIO\\2022\\PROFESSIONAL\\COMMON7\\IDE\\COMMONEXTENSIONS\\MICROSOFT\\MODELBUILDER\\AUTOMLSERVICE\\RuntimeManager\\tensorflow.gpu.csproj\" -r win-x64 -c Release --no-self-contained -o C:\\Users\\user\\AppData\\Local\\Temp\\ModelBuilder\\tensorflow-cuda.2.3.1 --no-restore /p:UsingToolXliff=false /p:TorchSharpVersion=0.98.3 /p:TorchSharpCudaRuntimeVersion=1.11.0.1 /p:TensorflowRuntimeVersion=2.3.1 /p:BaseOutputPath=\"C:\\Users\\user\\AppData\\Local\\Temp\\ModelBuilder\\tensorflow-cuda.2.3.1\\bin\\\\\" /p:BaseIntermediateOutputPath=\"C:\\Users\\user\\AppData\\Local\\Temp\\ModelBuilder\\tensorflow-cuda.2.3.1\\obj\\\\\"\r\nstart installing runtime in C:\\Users\\user\\AppData\\Local\\Temp\\ModelBuilder\\tensorflow-cuda.2.3.1\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\nMSBuild version 17.8.0+6cdef4241 for .NET\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(311,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [C:\\PROGRAM FILES\\MICROSOFT VISUAL STUDIO\\2022\\PROFESSIONAL\\COMMON7\\IDE\\COMMONEXTENSIONS\\MICROSOFT\\MODELBUILDER\\AUTOMLSERVICE\\RuntimeManager\\tensorflow.gpu.csproj]\r\n  tensorflow.gpu -> C:\\Users\\user\\AppData\\Local\\Temp\\ModelBuilder\\tensorflow-cuda.2.3.1\\bin\\Release\\netstandard2.0\\win-x64\\tensorflow.gpu.dll\r\n  tensorflow.gpu -> C:\\Users\\user\\AppData\\Local\\Temp\\ModelBuilder\\tensorflow-cuda.2.3.1\\\r\ninstall runtime successfully\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Channel started\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel started\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel finished. Elapsed 00:00:00.0037993.\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; Ensuring meta files are present., Kind=Trace] Channel disposed\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used:      Train, Batch Processed Count:   0, Epoch:   0, Accuracy:        NaN, Cross-Entropy:        NaN, Learning Rate:       0.01\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used: Validation, Batch Processed Count:   0, Epoch:   0, Accuracy:        NaN, Cross-Entropy:        NaN\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used:      Train, Batch Processed Count:   0, Epoch:   1, Accuracy:        NaN, Cross-Entropy:        NaN, Learning Rate:       0.01\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used: Validation, Batch Processed Count:   0, Epoch:   1, Accuracy:        NaN, Cross-Entropy:        NaN\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used:      Train, Batch Processed Count:   0, Epoch:   2, Accuracy:        NaN, Cross-Entropy:        NaN, Learning Rate:       0.01\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used: Validation, Batch Processed Count:   0, Epoch:   2, Accuracy:        NaN, Cross-Entropy:        NaN\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used:      Train, Batch Processed Count:   0, Epoch:   3, Accuracy:        NaN, Cross-Entropy:        NaN, Learning Rate:       0.01\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used: Validation, Batch Processed Count:   0, Epoch:   3, Accuracy:        NaN, Cross-Entropy:        NaN\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used:      Train, Batch Processed Count:   0, Epoch:   4, Accuracy:        NaN, Cross-Entropy:        NaN, Learning Rate:       0.01\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used: Validation, Batch Processed Count:   0, Epoch:   4, Accuracy:        NaN, Cross-Entropy:        NaN\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used:      Train, Batch Processed Count:   0, Epoch:   5, Accuracy:        NaN, Cross-Entropy:        NaN, Learning Rate:       0.01\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used: Validation, Batch Processed Count:   0, Epoch:   5, Accuracy:        NaN, Cross-Entropy:        NaN\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used:      Train, Batch Processed Count:   0, Epoch:   6, Accuracy:        NaN, Cross-Entropy:        NaN, Learning Rate:       0.01\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used: Validation, Batch Processed Count:   0, Epoch:   6, Accuracy:        NaN, Cross-Entropy:        NaN\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used:      Train, Batch Processed Count:   0, Epoch:   7, Accuracy:        NaN, Cross-Entropy:        NaN, Learning Rate:       0.01\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used: Validation, Batch Processed Count:   0, Epoch:   7, Accuracy:        NaN, Cross-Entropy:        NaN\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used:      Train, Batch Processed Count:   0, Epoch:   8, Accuracy:        NaN, Cross-Entropy:        NaN, Learning Rate:       0.01\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used: Validation, Batch Processed Count:   0, Epoch:   8, Accuracy:        NaN, Cross-Entropy:        NaN\r\n[Source=AutoMLExperiment-ChildContext, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Training, Dataset used:      Train, Batch Processed Count:   0, Epoch:   9, Accuracy:        NaN, Cross-Entropy:        NaN, Learning Rate:       0.01\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Image Training\r\n2. Load the data into the model\r\n3. Train with Cuda\r\n4. Notice that the data is not evaluated\r\n\r\n**Expected behavior**\r\nAccuracy and cross entropy to not be Nan\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6876","RelatedDescription":"Closed issue \"Image Classification does not evaluate data\" (#6876)"},{"Id":"1975988282","IsPullRequest":false,"CreatedAt":"2023-11-03T11:31:44","Actor":"torronen","Number":"6877","RawContent":null,"Title":"AutoML 2.0: Save intermediate models ","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nI am using AutoML 2.0. However, I want to do some re-evaluation with new data down the line. That means I would like to save the intermediate models for further analysis as zip files. At the moment, they are not stored to the checkpoint folder. \r\n\r\n**Describe the solution you'd like**\r\nWe can set checkpoint folder, so I suggest we could also set a temporary models folder. As I remember it was possible in the \"old\" AutoML API. Perhaps, it still is, I just did not find it for some reaon.\r\n\r\n**Describe alternatives you've considered**\r\nThe models are possible saved in AppData subfolders but I did not yet find them.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6877","RelatedDescription":"Open issue \"AutoML 2.0: Save intermediate models \" (#6877)"},{"Id":"1967814137","IsPullRequest":false,"CreatedAt":"2023-10-30T08:40:21","Actor":"lingo1357","Number":"6874","RawContent":null,"Title":"Chatbot scenario in scenario page","State":"open","Body":"Hi,\r\nI want to make an AI girlfriend with ML.net model builder.\r\nI use the VS community edition. In the scenario page, I can't see any chatbot or text classification.\r\nWhich scenario should I pick?\r\nIs there any Nuget package that helps me in this issue?\r\n\r\nthanks,\r\nSaeed","Url":"https://github.com/dotnet/machinelearning/issues/6874","RelatedDescription":"Open issue \"Chatbot scenario in scenario page\" (#6874)"},{"Id":"1965362503","IsPullRequest":false,"CreatedAt":"2023-10-27T11:52:59","Actor":"Braysoft","Number":"6873","RawContent":null,"Title":"ML.TimeSeries nuget packages cause WACK (Windows App Cert Kit) fail on release build","State":"open","Body":"\r\nI have tried including the ML.Mkl.Components Nuget but this and all versions of ML.Timeseries upto and including the latest prerelase also fail.\r\n\r\nTo Replicate the issue create a blank UWP project in VS,add the timeseries nuget along with ML.net.\r\nThen release build (create app package) with .NET native compiler.\r\nUse latest WACK to test:\r\n\r\nFAILED\r\nSupported APIs\r\nError Found: The supported APIs test detected the following errors:\r\nAPI K32EnumProcessModules in kernel32.dll is not supported for this application type. libiomp5md.dll calls this API.\r\nAPI GetDllDirectoryA in kernel32.dll is not supported for this application type. MklImports.dll calls this API.\r\nImpact if not fixed: Using an API that is not part of the Windows SDK for Microsoft Store apps violates the Microsoft Store certification requirements.\r\nHow to fix: Review the error messages to identify the API that is not part of the Windows SDK for Microsoft Store apps. If the DLL listed is an allowable redistributable from a NuGET package, SDK or other toolkit, did you forget to add the DLL to your app? Please note, apps that are built in a debug configuration or without .NET Native enabled (where applicable) can fail this test as these environments may pull in unsupported APIs. Retest your app in a release configuration, and with .NET Native enabled if applicable. See the link below for more information:\r\n[Alternatives to Windows APIs in Microsoft Store apps.](http://go.microsoft.com/fwlink/?LinkID=244022)\r\n\r\n\r\nAny workarounds or similar would be very helpful!","Url":"https://github.com/dotnet/machinelearning/issues/6873","RelatedDescription":"Open issue \"ML.TimeSeries nuget packages cause WACK (Windows App Cert Kit) fail on release build\" (#6873)"},{"Id":"1956931949","IsPullRequest":true,"CreatedAt":"2023-10-23T11:18:28","Actor":"asmirnov82","Number":"6872","RawContent":null,"Title":"Reorganize dataframe files","State":"open","Body":"Code is not changed. This PR only reorganizes files (moves all PrimitiveDataFrameColumns and internal util under separate folders, split unit tests into separate files based on the area being tested). The aim of this PR is to make futher development easier.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6872","RelatedDescription":"Open PR \"Reorganize dataframe files\" (#6872)"},{"Id":"1951782624","IsPullRequest":true,"CreatedAt":"2023-10-23T05:23:12","Actor":"asmirnov82","Number":"6869","RawContent":null,"Title":"Improve performance of DataFrame binary comparison operations","State":"closed","Body":"Goal of this PR is to improve performance of comparison operation and is the next step in aligning datafrane arithmetic API with the new TensorPrimitives API\r\n\r\nIn DataFrame 0.20.1:\r\n\r\n|                          Method |     Mean |    Error |   StdDev |\r\n|-------------------------------- |---------:|---------:|---------:|\r\n|   ElementwiseEquals_Int32_Int32 | 38.00 ms | 0.145 ms | 0.121 ms |\r\n|   ElementwiseEquals_Int16_Int16 | 39.55 ms | 0.291 ms | 0.258 ms |\r\n| ElementwiseEquals_Double_Double | 40.28 ms | 0.367 ms | 0.343 ms |\r\n|   ElementwiseEquals_Float_Float | 41.18 ms | 0.805 ms | 1.074 ms |\r\n\r\nAfter this PR:\r\n\r\n|                          Method |      Mean |     Error |    StdDev |\r\n|-------------------------------- |----------:|----------:|----------:|\r\n|   ElementwiseEquals_Int32_Int32 |  1.171 ms | 0.0228 ms | 0.0263 ms |\r\n|   ElementwiseEquals_Int16_Int16 |  1.090 ms | 0.0569 ms | 0.0475 ms |\r\n| ElementwiseEquals_Double_Double |  1.388 ms | 0.0264 ms | 0.0247 ms |\r\n|   ElementwiseEquals_Float_Float |  1.250 ms | 0.0215 ms | 0.0190 ms |``\r\n\r\nOther comparison operations shows the same boost in performance","Url":"https://github.com/dotnet/machinelearning/pull/6869","RelatedDescription":"Closed or merged PR \"Improve performance of DataFrame binary comparison operations\" (#6869)"},{"Id":"1955973599","IsPullRequest":true,"CreatedAt":"2023-10-22T16:53:40","Actor":"asmirnov82","Number":"6871","RawContent":null,"Title":"Add support for Apache.Arrow.Types.TimestampType to DataFrame","State":"open","Body":"Fixes #6809\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6871","RelatedDescription":"Open PR \"Add support for Apache.Arrow.Types.TimestampType to DataFrame\" (#6871)"},{"Id":"1953689312","IsPullRequest":true,"CreatedAt":"2023-10-20T07:18:26","Actor":"computerscienceiscool","Number":"6870","RawContent":null,"Title":"Update developer-guide.md","State":"open","Body":"Fixed a couple of spelling errors\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6870","RelatedDescription":"Open PR \"Update developer-guide.md\" (#6870)"},{"Id":"1949679239","IsPullRequest":false,"CreatedAt":"2023-10-18T12:51:21","Actor":"Braysoft","Number":"6868","RawContent":null,"Title":"Microsoft.ML.Data.ApiUtils.GeneratePeek is not .NET native compiler compatible","State":"open","Body":"Windows 10\r\nML.NET 2.0.1 but applies to all including latest prerelease.\r\nNET nuget 2.0.3\r\nVisual Studio 2022 latest.\r\n\r\nUser code mlContext.Data.LoadFromInumerable() causes:\r\nMicrosoft.ML.Data.ApiUtils.GeneratePeek uses JIT on release so a release build that uses this will never work with NET native compiler and can not be used on the Microsoft Store rendering any project (such as mine) useless without a workaround.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1.Create a blank UWP project\r\n2.Add the following code where it does not already exist: \r\n   \r\n        public MainPage()\r\n        {\r\n            this.InitializeComponent();\r\n            MLContext mlContext=new MLContext();\r\n           \r\n            IDataView emptyDv = mlContext.Data.LoadFromEnumerable(new OnnxInput[] { });\r\n           \r\n        }\r\n    }\r\n    public class OnnxInput\r\n    {\r\n        [VectorType(1 * 24 * 1)]\r\n        [ColumnName(\"lambda_input\")]\r\n        public float[] Open { get; set; }\r\n    }\r\n3.build in release mode with .NET native compiler (or debug with .NET native compiler checked and F5)\r\n4.run app(ctrl+F5 release mode) or F5\r\n\r\n\r\n**Expected behavior**\r\nApp will run and then exit/fail.\r\nInserting Dynamic into the default.rd.xml has no effect due to the JIT nature of the GeneratePeek using il.emit? as mentioned below that is fundamentally incompatible with NET native compiler.\r\nI have had frequent communications with someone from NET native at microsoft who has confirmed this issue.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nResults of error:\r\nSystem.TypeInitializationException\r\n  HResult=0x80131534\r\n  Message=A type initializer threw an exception. To determine which type, inspect the InnerException's StackTrace property.\r\n  Source=<Cannot evaluate the exception source>\r\n  StackTrace:\r\n<Cannot evaluate the exception stack trace>\r\n\r\nInner Exception 1:\r\nMissingRuntimeArtifactException: Cannot retrieve a MethodInfo for this delegate because the method it targeted (Microsoft.ML.ApiUtils.GeneratePeek[TOwn, TRow, TValue](FieldInfo, OpCode)) was not enabled for metadata using the Dynamic attribute. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=616868\r\n\r\nAdditionaly a reference to the offending code:\r\n[https://github.com/dotnet/machinelearning/blob/766569b86a2ce121321132af46065230851b6559/src/Microsoft.ML.Data/Utils/ApiUtils.cs#L89C1-L107C10]\r\n\r\n**Additional context**\r\nIf you require any other information please contact me.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6868","RelatedDescription":"Open issue \"Microsoft.ML.Data.ApiUtils.GeneratePeek is not .NET native compiler compatible\" (#6868)"},{"Id":"1947101474","IsPullRequest":true,"CreatedAt":"2023-10-17T20:31:51","Actor":"asmirnov82","Number":"6867","RawContent":null,"Title":"Avoid Boxing/Unboxing on accessing elements of VBufferDataFrameColumn (fix merge issues)","State":"closed","Body":"Fixes #6864\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6867","RelatedDescription":"Closed or merged PR \"Avoid Boxing/Unboxing on accessing elements of VBufferDataFrameColumn (fix merge issues)\" (#6867)"},{"Id":"1945028551","IsPullRequest":false,"CreatedAt":"2023-10-16T23:32:44","Actor":"asmirnov82","Number":"6864","RawContent":null,"Title":"Avoid boxing/unboxing in VBufferDataFrameColumn","State":"closed","Body":"VBufferDataFrameColumn stores public readonly struct Vbuffer<T> items.\r\nThis column is implemented based on current StringDataFrame column implementation, however any string is a reference type and any Vbuffer is a value type, so there are several issues with current implementation. One is boxing/unboxing that happens on ever access by row index, another - unability to store null elements (#6852)\r\n\r\nThe goal of this issue is to avoid boxing/unboxing on indexing and throw NotSupported exception with clear explanation instead of null reference exception\r\n \r\n","Url":"https://github.com/dotnet/machinelearning/issues/6864","RelatedDescription":"Closed issue \"Avoid boxing/unboxing in VBufferDataFrameColumn\" (#6864)"},{"Id":"1945053783","IsPullRequest":true,"CreatedAt":"2023-10-16T23:32:43","Actor":"asmirnov82","Number":"6865","RawContent":null,"Title":"Avoid Boxing/Unboxing on accessing elements of VBufferDataFrameColumn","State":"closed","Body":"Fixes #6864 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6865","RelatedDescription":"Closed or merged PR \"Avoid Boxing/Unboxing on accessing elements of VBufferDataFrameColumn\" (#6865)"},{"Id":"1945060845","IsPullRequest":false,"CreatedAt":"2023-10-16T12:06:51","Actor":"asmirnov82","Number":"6866","RawContent":null,"Title":"Use new TensorPrimitives API for dataframe math","State":"open","Body":"Use new API from\r\n[[API Proposal]: Extend System.Numerics.Tensors.TensorPrimitives with primitive types other than float · Issue #93474 · dotnet/runtime (github.com)](https://github.com/dotnet/runtime/issues/93474)\r\nwhen it's implemented","Url":"https://github.com/dotnet/machinelearning/issues/6866","RelatedDescription":"Open issue \"Use new TensorPrimitives API for dataframe math\" (#6866)"},{"Id":"1944586807","IsPullRequest":false,"CreatedAt":"2023-10-16T07:45:40","Actor":"wvaughn409","Number":"6863","RawContent":null,"Title":"decision to throw an exception in here if labelCount is 1 has compromised learning resources","State":"open","Body":"              So I've just talked with @codemzs and we decided the best option is to simply throw an exception in here if `labelCount` is 1:\r\nhttps://github.com/dotnet/machinelearning/blob/c4e4263188dccf16903b8f3fea7e65213a69c6e3/src/Microsoft.ML.Vision/ImageClassificationTrainer.cs#L606\r\n\r\nInstead of trying to make all the different changes required to support the corner case of having only 1 class represented on the dataset.\r\n\r\n_Originally posted by @antoniovs1029 in https://github.com/dotnet/machinelearning/issues/4660#issuecomment-574884432_\r\n            \r\n\r\n@antoniovs1029  This \"corner case\" as you phrased it, having only 1 class represented on the dataset has created a myriad of confusion and frustration for eager young minds attempting to break into this interesting space of machine learning within Visual Studio. The .NET ML Model Builder online documentation offers many learning resources, one of the more popular ones being _\"Tutorial: Train an ML.NET classification model to categorize images\"_    ...found here:\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/machine-learning/tutorials/image-classification\r\n\r\nThe tutorial instructs the user to download an \"assets.zip\" file:  https://github.com/dotnet/samples/blob/main/machine-learning/tutorials/TransferLearningTF/image-classifier-assets.zip\r\n\r\n..and the inceptionV1 model :  https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip\r\n\r\n...and then further steps in the tutorial allow the user to select Local (GPU) during the training environment step. After 3 tries of installing the wrong CUDA version containing incorrect binaries, I finally found the correct version only to be greeted with your unfortunate exception during the Train step.\r\n\r\nAfter spending hours compiling the machine learning repo from source, a little gotcha being needing to change the ps1 script to include --configuration and --platform arguments so as to compile successfully without needing Microsoft.ML.CpuMath native dll files, and attempting to circumvent your exception by changing your code, I stumbled upon a much easier win...\r\n\r\nWhen I found this tutorial:\r\nhttps://learn.microsoft.com/en-us/dotnet/machine-learning/tutorials/image-classification-model-builder\r\n\r\nI was able to use these assets instead of the original files supplied by the earlier tutorial (not involving Azure/cloud etc), and then was able to train the model successfully and generate a solution using GPU.\r\n\r\n-------------------------------------------------------------------------------\r\n\r\nMy suggestion to resolve this issue is choose one of the following:\r\n\r\n1. Take down the learning resource here as it only creates confusion when users are unable to follow the steps successfully:\r\nhttps://learn.microsoft.com/en-us/dotnet/machine-learning/tutorials/image-classification\r\n\r\n2. Update the aforementioned resource, specifically the downloadable assets.zip and inception model to include a second class on the dataset.\r\n\r\n3. restore the corner-case of allowing a single class to be present.\r\n\r\nAs it may be tempting to do nothing in this particular scenario, as Microsoft prioritizes learning activities that use Azure cloud resources over on-premises installations, such as local VS 2022 + CUDA Toolkit etc., for monetary gain reaped from cloud subscription fees, I would remind you of Microsoft's commitment to support its entire product line, not just the high dollar solutions, and also of its assurance to the coding community of its desire for transparency and supporting open source technology and low barriers of entry concerning all things machine learning. With the advent of Open AI chatbot being available to use free of charge, I don't think MS can afford to lobotomize its more economy offerings in this way, unless y'all are playing the short game these days.   [stepping off soap-box...]\r\n\r\nAlso, please give me a job (former employee).\r\n\r\n-Christian (v-chrisv)","Url":"https://github.com/dotnet/machinelearning/issues/6863","RelatedDescription":"Open issue \"decision to throw an exception in here if labelCount is 1 has compromised learning resources\" (#6863)"},{"Id":"1943776082","IsPullRequest":false,"CreatedAt":"2023-10-15T07:56:32","Actor":"superichmann","Number":"6862","RawContent":null,"Title":"LightGbm Fit Error","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: win10\r\n - .NET Version: 7\r\nMicrosoft.ML,3.0.0-preview.23504.1\r\nMicrosoft.ML.TimeSeries,3.0.0-preview.23504.1\r\nMicrosoft.Data.Analysis,0.21.0-preview.23424.1\r\nMicrosoft.ML.AutoML,0.21.0-preview.23504.1\r\nMicrosoft.ML.OneDal,0.21.0-preview.23504.1\r\n\r\n**Describe the bug**\r\nRunning automl regression with only lightgbm, refitting best pipeline:\r\n```\r\nfinalmodel = regression_result.Estimator.Fit(idataview);\r\n```\r\ngot error\r\n\r\n```\r\nError: System.AggregateException: One or more errors occurred. (Index was outside the bounds of the array.)\r\n---> System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\nat Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4.CopyToCsr(IChannel ch, FloatLabelCursor cursor, Int32[] indices, Single[] features, CategoricalMetaData catMetaData, Random rand, Int32& numElem)\r\nat Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4.LoadDataset(IChannel ch, Factory factory, Dataset dataset, Int32 numRow, Int32 batchSize, CategoricalMetaData catMetaData)\r\nat Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4.LoadTrainingData(IChannel ch, RoleMappedData trainData, CategoricalMetaData& catMetaData)\r\nat Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4.TrainModelCore(TrainContext context)\r\nat Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\nat Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/6862","RelatedDescription":"Open issue \"LightGbm Fit Error\" (#6862)"},{"Id":"1939736443","IsPullRequest":true,"CreatedAt":"2023-10-14T05:23:43","Actor":"asmirnov82","Number":"6860","RawContent":null,"Title":"Fix DataFrame Saving csv with VBufferDataFrameColumn","State":"closed","Body":"Fixed saving DataFrame with VBufferDataFrame column into csv file. Loading VBufferDataFrame from csv is out of scope of this PR. Currently it's load as a string column. Correct reading of csv requires redesign of the DataFrame to support save/load of user defined types (part of #6859)\r\n\r\nFixes #6858\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6860","RelatedDescription":"Closed or merged PR \"Fix DataFrame Saving csv with VBufferDataFrameColumn\" (#6860)"},{"Id":"1940529748","IsPullRequest":false,"CreatedAt":"2023-10-12T18:09:06","Actor":"andrewkittredge","Number":"6861","RawContent":null,"Title":"LightGBM says Microsoft.ML.LightGbm is wrong","State":"open","Body":"Is this still accurate?  https://github.com/microsoft/LightGBM/issues/5535#issuecomment-1275362917","Url":"https://github.com/dotnet/machinelearning/issues/6861","RelatedDescription":"Open issue \"LightGBM says Microsoft.ML.LightGbm is wrong\" (#6861)"},{"Id":"1939732918","IsPullRequest":false,"CreatedAt":"2023-10-12T10:54:52","Actor":"asmirnov82","Number":"6859","RawContent":null,"Title":"DataFrame should provide ability to load/save to csv columns of user defined types","State":"open","Body":"DataFrame allows to define PrimitiveDataFrameColumn<UserType>, where UserType is userdefined structure.\r\nAbility to load/save dataframe with such columns from/to csv files is required\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6859","RelatedDescription":"Open issue \"DataFrame should provide ability to load/save to csv columns of user defined types\" (#6859)"},{"Id":"1938092446","IsPullRequest":false,"CreatedAt":"2023-10-11T15:26:09","Actor":"colombod","Number":"6858","RawContent":null,"Title":"VBuffer columns are not saved or laoded correctly","State":"open","Body":"When writing a DataFrame to csv file `VBuffer` columns are saved as `ToString()` and do not contain the data.\nWhen reading back the csv the column is now a string type describing the size of the data.","Url":"https://github.com/dotnet/machinelearning/issues/6858","RelatedDescription":"Open issue \"VBuffer columns are not saved or laoded correctly\" (#6858)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-11-19T03:30:17.8219999Z","RunDurationInMilliseconds":486}