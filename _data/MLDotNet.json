{"Data":{"GitHub":{"Issues":[{"Id":"779911512","IsPullRequest":false,"CreatedAt":"2021-01-08T01:37:34","Actor":"nnoradie","Number":"5578","RawContent":null,"Title":"Boundaries and anomalies not correct after implementing 3-sigma approach for < 12 data points","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: \r\n- **.NET Version (eg., dotnet --info)**: \r\n![image](https://user-images.githubusercontent.com/69877427/103716200-4d35b500-4f77-11eb-9b10-41c9396b4dc1.png)\r\n\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n    - Ran 3-sigma approach then passed the padded dataset to SR\r\n        1. Calculated a range of 3 standard deviations above and below the mean of the data\r\n        2. Removed any outliers from the sum and recalculated the sum and a new mean without the outliers (in this case, no points were detected as outliers)\r\n        3. Evenly added enough points to fill out the batch to at least 12 points (ex. if the original data had 8 points, we added 2 points of the new mean value to the beginning and another 2 points to the end of the data)\r\n        4. Passed that data (in zip below) to DetectEntireAnomalyBySrCnn\r\n\r\n- **What happened?**\r\n    - Even though we found no outliers, the data point at the end was detected as an anomaly \r\n    - The confidence band was very off, many points were outside of the band, but none were detected as anomalies\r\n    \r\n![image](https://user-images.githubusercontent.com/69877427/103722432-ca1b5b80-4f84-11eb-8a98-3396d36eee41.png)\r\n(One point in the csv is not present here (11/1/1997) it was filtered out in post-processing since it was an interpolated data point)\r\n\r\n- **What did you expect?**\r\n    - No anomalies to be detected in this case\r\n\r\n### Source code / logs\r\n**3sigma code changes**\r\nhttps://powerbi.visualstudio.com/AI/_git/AI/pullrequest/131502?_a=files&path=%2Fsrc%2Fextensions%2FMicrosoft.AI.Dax.Extensions%2FAnomalies%2FDetection%2FAnomalyDetector.cs\r\n\r\n**AD options**\r\n![image](https://user-images.githubusercontent.com/69877427/103720633-a5bd8000-4f80-11eb-928f-9d1a23ca1167.png)\r\n\r\n**Data**\r\n[3sigma_data.zip](https://github.com/dotnet/machinelearning/files/5773621/3sigma_data.zip)\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5578","RelatedDescription":"Closed issue \"Boundaries and anomalies not correct after implementing 3-sigma approach for < 12 data points\" (#5578)"},{"Id":"781449346","IsPullRequest":false,"CreatedAt":"2021-01-07T16:41:39","Actor":"voges316","Number":"5580","RawContent":null,"Title":"Mlnet CLI tool 16.2 generated model fails when being loaded to create a prediction engine","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: CentOS 7.9\r\n- **.NET Version (eg., dotnet --info)**: 3.1.404\r\n\r\n### Issue\r\nUpgrading from the mlnet cli tool from v0.15.1 to v16.2 I am unable to import a generated model using the C# api that is generated using the most recent mlnet cli tool on a yelp sentiment dataset.\r\n\r\n- **What did you do?**\r\nTried to import a model generated from mlnet cli v16.2 and predict an input.\r\n```\r\nITransformer predictionPipeline = mlContext.Model.Load(\"models/MLModelv16.2.zip\", out predictionPipelineSchema);\r\nPredictionEngine<ModelInput, ModelOutput> predictionEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(predictionPipeline);\r\nModelInput input = new ModelInput{ Col0 = \"Meh, food was cold.\" };\r\nvar result = predictionEngine.Predict(input);\r\n```\r\n\r\n- **What happened?**\r\n\r\nI get the following error\r\n```\r\nUnhandled exception. System.ArgumentOutOfRangeException: Could not find input column 'col1' (Parameter 'inputSchema')\r\n   at Microsoft.ML.Data.OneToOneTransformerBase.CheckInput(DataViewSchema inputSchema, Int32 col, Int32& srcCol)\r\n   at Microsoft.ML.Data.OneToOneTransformerBase.OneToOneMapperBase..ctor(IHost host, OneToOneTransformerBase parent, DataViewSchema inputSchema)\r\n   at Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Mapper..ctor(ValueToKeyMappingTransformer parent, DataViewSchema inputSchema)\r\n   at Microsoft.ML.Transforms.ValueToKeyMappingTransformer.MakeRowMapper(DataViewSchema schema)\r\n   at Microsoft.ML.Data.RowToRowTransformerBase.Microsoft.ML.ITransformer.GetRowToRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.Data.TransformerChain`1.Microsoft.ML.ITransformer.GetRowToRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.Data.TransformerChain`1.Microsoft.ML.ITransformer.GetRowToRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.Data.TransformerChain`1.Microsoft.ML.ITransformer.GetRowToRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.PredictionEngineBase`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.PredictionEngine`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.PredictionEngineExtensions.CreatePredictionEngine[TSrc,TDst](ITransformer transformer, IHostEnvironment env, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.ModelOperationsCatalog.CreatePredictionEngine[TSrc,TDst](ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at MLConsoleApp.Program.Main(String[] args) in /home/devel/code/mlnet_example/MLConsoleApp/Program.cs:line 34\r\n```\r\n- **What did you expect?**\r\nUsing v0.15.1 of the mlnet cli tool I am able to train a model, and then in dotnet load the model, create a prediction engine and score a new input correctly.\r\nI expected to have the same behavior using the latest mlnet cli tool, but it doesn't work.\r\n\r\n### Source code / logs\r\n\r\nPrevious mlnet cli tool:\r\nMlnet --version => 0.15.28007.4\r\nYelp labelled datset from here http://archive.ics.uci.edu/ml/machine-learning-databases/00331/sentiment%20labelled%20sentences.zip\r\n\r\nPrevious command to train a model on a dataset:\r\nmlnet auto-train --task binary-classification --dataset data/yelp_labelled.txt --label-column-index 1 --has-header false --max-exploration-time 30 --name YelpDemo\r\n\r\nNow I can load that model into a console app and run it fine. Showing the ModelInput.cs generated by the mlnet cli tool. I can just create another input class like this and use it to load the model, create a prediction engine, and score a new input.\r\n\r\n![image](https://user-images.githubusercontent.com/6192880/103916547-2dff6a80-50d2-11eb-9cf2-fb32dc363bcb.png)\r\n\r\nHowever, if I upgrade the mlnet cli tool it doesn't work\r\nmlnet â€“version => 16.2.0\r\nCommand to train a model:\r\nmlnet classification --dataset data/yelp_labelled.txt --has-header false --label-col 1 --train-time 30 --name YelpML16\r\nThe tool appears to pring a warning about a header being detected in the dataset, even though no header is used in this dataset.\r\n![image](https://user-images.githubusercontent.com/6192880/103916757-6b63f800-50d2-11eb-85dd-fc93df9b2c6c.png)\r\n\r\nWhen I try and import the model and create a prediction engine I encounter the error I pasted above, saying: \r\nUnhandled exception. System.ArgumentOutOfRangeException: Could not find input column 'col1' (Parameter 'inputSchema')\r\n\r\nDiving into the mlnet v16.2 classes, it appears the ModelInput.cs has changed. The second column is no longer a boolean Label, but a string Col1\r\n![image](https://user-images.githubusercontent.com/6192880/103917197-ee854e00-50d2-11eb-8539-897211a81e78.png)\r\n\r\nThis is different than the ModelInput.cs generated by v0.15.1, but if I change the modelinput class to match the mlnet cli output I still get an exception loading the model and creating the prediction engine.\r\n\r\n```\r\nUnhandled exception. System.InvalidOperationException: Can't bind the IDataView column 'PredictedLabel' of type 'String' to field or property 'Prediction' of type 'System.Boolean'.\r\n   at Microsoft.ML.Data.TypedCursorable`1..ctor(IHostEnvironment env, IDataView data, Boolean ignoreMissingColumns, InternalSchemaDefinition schemaDefn)\r\n   at Microsoft.ML.Data.TypedCursorable`1.Create(IHostEnvironment env, IDataView data, Boolean ignoreMissingColumns, SchemaDefinition schemaDefinition)\r\n   at Microsoft.ML.PredictionEngineBase`2.PredictionEngineCore(IHostEnvironment env, InputRow`1 inputRow, IRowToRowMapper mapper, Boolean ignoreMissingColumns, SchemaDefinition outputSchemaDefinition, Action& disposer, IRowReadableAs`1& outputRow)\r\n   at Microsoft.ML.PredictionEngineBase`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.PredictionEngine`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.PredictionEngineExtensions.CreatePredictionEngine[TSrc,TDst](ITransformer transformer, IHostEnvironment env, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.ModelOperationsCatalog.CreatePredictionEngine[TSrc,TDst](ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at MLConsoleApp.Program.Main(String[] args) in /home/devel/code/mlnet_example/MLConsoleApp/Program.cs:line 37\r\n\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5580","RelatedDescription":"Open issue \"Mlnet CLI tool 16.2 generated model fails when being loaded to create a prediction engine\" (#5580)"},{"Id":"781190132","IsPullRequest":true,"CreatedAt":"2021-01-07T10:03:58","Actor":"guinao","Number":"5579","RawContent":null,"Title":"Fix issue in SRCnnEntireAnomalyDetector","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n#5516 ","Url":"https://github.com/dotnet/machinelearning/pull/5579","RelatedDescription":"Open PR \"Fix issue in SRCnnEntireAnomalyDetector\" (#5579)"},{"Id":"779748188","IsPullRequest":true,"CreatedAt":"2021-01-05T23:53:48","Actor":"Lynx1820","Number":"5577","RawContent":null,"Title":"Onnx Export for ValueMapping estimator","State":"open","Body":"LabelEncoder, the onnx operator used for this export, doesn't support mapping between the same types, which is allowed in ML.NET. This can be bypassed by casting to other types, except for String to String mappings. \r\n\r\n   \r\n","Url":"https://github.com/dotnet/machinelearning/pull/5577","RelatedDescription":"Open PR \"Onnx Export for ValueMapping estimator\" (#5577)"},{"Id":"771259310","IsPullRequest":false,"CreatedAt":"2021-01-05T03:52:35","Actor":"Jrjuniorjr","Number":"5562","RawContent":null,"Title":"Question about TFIDF","State":"closed","Body":"Hi to all, I'm new on ML.NET and I'm trying to FeaturizeText with TF-IDF.\r\nIn the Jupyter Notebook and in .NET Interactive, this code gets an error:\r\n\r\n```C#\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing System;\r\nusing Microsoft.ML.Transforms.Text;\r\nusing System.Collections.Generic;\r\n\r\nnamespace SentimentAnalysis\r\n{\r\n    public class Input\r\n    {\r\n        [LoadColumn(0)]\r\n        public string Text { get; set; }\r\n        [LoadColumn(1)]\r\n        public int Rating { get; set; }\r\n    }\r\n    public class Output\r\n    {\r\n        public float[] Features { get; set; }\r\n    }\r\n    class Program\r\n    {\r\n        public static TextFeaturizingEstimator.Options GetOptions()\r\n        {\r\n            var vectorizedTextOptions = new TextFeaturizingEstimator.Options()\r\n            {\r\n                KeepDiacritics = false,\r\n                KeepPunctuations = false,\r\n                KeepNumbers = true,\r\n                CaseMode = TextNormalizingEstimator.CaseMode.Lower,\r\n                StopWordsRemoverOptions = new StopWordsRemovingEstimator.Options()\r\n                {\r\n                    Language = TextFeaturizingEstimator.Language.English\r\n                },\r\n\r\n                // ngram options\r\n                WordFeatureExtractor = new WordBagEstimator.Options()\r\n                {\r\n                    NgramLength = 1,\r\n                    UseAllLengths = false, // Produce both unigrams and bigrams\r\n                    Weighting = NgramExtractingEstimator.WeightingCriteria.TfIdf, // TF-IDF\r\n                },\r\n\r\n                // chargram options\r\n                CharFeatureExtractor = null\r\n            };\r\n            return vectorizedTextOptions;\r\n\r\n        }\r\n        static void Main(string[] args)\r\n        {\r\n            var context = new MLContext();\r\n            var list = new List<Input>()\r\n            {\r\n                new Input()\r\n                {\r\n                    Text = \"This is machine learning example\", Rating = 4\r\n                },\r\n                new Input()\r\n                {\r\n                    Text = \"I like .NET\", Rating = 5\r\n                }\r\n            };\r\n            var samples = context.Data.LoadFromEnumerable<Input>(list);\r\n            var options = GetOptions();\r\n            var transformFitted = context.Transforms.Text.FeaturizeText(\r\n                    \"Features\",\r\n                    options,\r\n                    \"Text\"\r\n                ).Fit(samples);\r\n\r\n            var tfIdfTransformed = transformFitted.Transform(samples);\r\n\r\n            var predictionEngine = context.Model.CreatePredictionEngine<Input, Output>(transformFitted);\r\n            Output prediction = null;\r\n\r\n            VBuffer<ReadOnlyMemory<char>> slotNames = default;\r\n            tfIdfTransformed.Schema[\"Features\"].GetSlotNames(ref slotNames);\r\n\r\n            var tfIdfColumn = tfIdfTransformed.GetColumn<VBuffer<float>>(tfIdfTransformed.Schema[\"Features\"]);\r\n            var slots = slotNames.GetValues();\r\n\r\n            Console.Write(\"NGrams: \");\r\n            foreach (var featureRow in tfIdfColumn)\r\n            {\r\n                foreach (var item in featureRow.Items())\r\n                {\r\n                    Console.Write($\"{slots[item.Key]}  \");\r\n                }\r\n                Console.WriteLine();\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd I do var slot = slotNames.GetValues() what I'm getting is:\r\n\r\nError: (3.1): error CS8345: The field or a self-implemented property cannot be of type 'ReadOnlySpan <ReadOnlyMemory <char>>', unless it is an instance member of a reference struct.\r\n\r\nAnd in Visual Studio 2019, it works well, but when I try to loop over the columns:\r\n\r\n```C#\r\n       Console.Write(\"NGrams: \");\r\n        foreach (var featureRow in tfIdfColumn)\r\n        {\r\n            foreach (var item in featureRow.Items())\r\n            {\r\n                Console.Write($\"{slots[item.Key]}  \");\r\n            }\r\n            Console.WriteLine();\r\n        }\r\n```\r\n\r\nIt repeats some words.\r\n\r\nFor example: If I get two input: \"This is a test\", \"I like dotnet\", what I got print is:\r\nThis is a test\r\ntest I like dotnet\r\n\r\nIt is just an example.\r\n\r\nAnother question is how can I get do something like this in ML.NET:\r\n\r\nThis code is in python:\r\n\r\n```python\r\ndocs = []\r\nfor index, row in df_balenceado.iterrows():\r\n    docs.append(row[\"CleanReview-NoStemming\"])\r\n\r\ntfidf_vectorizer=TfidfVectorizer()\r\nfitted_vectorizer=tfidf_vectorizer.fit(docs)\r\ntfidf_vectorizer_vectors=fitted_vectorizer.transform(docs)\r\nfeature_names = tfidf_vectorizer.get_feature_names()\r\ndictonary = pd.DataFrame(tfidf_vectorizer_vectors.todense().tolist(), columns=feature_names)\r\ndictonary.head()\r\npickle.dump(fitted_vectorizer, open(\"tfidf_nostemming.pkl\", \"wb\"))\r\ndictonary = variance_threshold_selector(dictonary, 0.00005)\r\ndictonary.to_csv(\"DictionaryNoStemming.csv\", index=False)\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/5562","RelatedDescription":"Closed issue \"Question about TFIDF\" (#5562)"},{"Id":"778292188","IsPullRequest":false,"CreatedAt":"2021-01-04T18:55:52","Actor":"eerhardt","Number":"5576","RawContent":null,"Title":"AutoML should skip/ignore trainers that don't work on the current machine","State":"open","Body":"Following up from https://github.com/dotnet/machinelearning/issues/3903#issuecomment-739542538.\r\n\r\nWe should consider not failing an AutoML experiment because the dependencies necessary for MKL to load are not available on the current machine. We could log a warning or tell the user some other way that MKL can't be loaded. But this shouldn't block the user, and force them to figure out how to exclude the problematic trainer (Ols in the case above).","Url":"https://github.com/dotnet/machinelearning/issues/5576","RelatedDescription":"Open issue \"AutoML should skip/ignore trainers that don't work on the current machine\" (#5576)"},{"Id":"776063367","IsPullRequest":false,"CreatedAt":"2021-01-04T11:42:48","Actor":"WEMAPP","Number":"5570","RawContent":null,"Title":"Deep learning and text recognition ","State":"closed","Body":"Hi everyone.\r\ncould you help me understand how to use deep learning for text recognition in ml.net","Url":"https://github.com/dotnet/machinelearning/issues/5570","RelatedDescription":"Closed issue \"Deep learning and text recognition \" (#5570)"},{"Id":"777945435","IsPullRequest":false,"CreatedAt":"2021-01-04T09:11:04","Actor":"justinormont","Number":"5575","RawContent":null,"Title":"OVA-PriorPredictor fails","State":"open","Body":"When placed in a One-vs-All (OVA), `PriorPredictor` throws a \"Nullable object must have a value\" error.\r\n\r\n**Error:**\r\n```\r\nUnhandled exception. System.InvalidOperationException: Nullable object must have a value.\r\n   at System.Nullable`1.get_Value()\r\n   at Microsoft.ML.Data.SchemaBindablePredictorWrapperBase.SingleValueRowMapper.GetInputColumnRoles()+MoveNext()\r\n   at Microsoft.ML.Data.RoleMappedSchema.MapFromNames(DataViewSchema schema, IEnumerable`1 roles, Boolean opt)\r\n   at Microsoft.ML.Data.RoleMappedSchema..ctor(DataViewSchema schema, IEnumerable`1 roles, Boolean opt)\r\n   at Microsoft.ML.Data.PredictedLabelScorerBase.BindingsImpl.ApplyToSchema(DataViewSchema input, ISchemaBindableMapper bindable, IHostEnvironment env)\r\n   at Microsoft.ML.Data.PredictedLabelScorerBase..ctor(IHostEnvironment env, PredictedLabelScorerBase transform, IDataView newSource, String registrationName)\r\n   at Microsoft.ML.Data.MulticlassClassificationScorer..ctor(IHostEnvironment env, MulticlassClassificationScorer transform, IDataView newSource)\r\n   at Microsoft.ML.Data.MulticlassClassificationScorer.ApplyToDataCore(IHostEnvironment env, IDataView newSource)\r\n   at Microsoft.ML.Data.RowToRowScorerBase.ApplyToData(IHostEnvironment env, IDataView newSource)\r\n   at Microsoft.ML.Data.PredictionTransformerBase`1.Transform(IDataView input)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Program.Main()\r\n```\r\n\r\n`PriorPredictor` does work properly when not in an OVA (aka, used as a normal binary trainer).\r\n\r\n**Repro:**\r\n\r\nSee fiddle: https://dotnetfiddle.net/bs5hiw\r\n\r\nFiddle demonstrates:\r\n* Binary `PriorPredictor` is successful\r\n* `OVA-AveragedPerceptron` is successful\r\n* `OVA-PriorPredictor` **fails**\r\n\r\nRelevant code:\r\n```c#\r\nvar baselineMulticlassPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\", \"Label\")\r\n\t\t\t.Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(mlContext.BinaryClassification.Trainers.Prior(labelColumnName: \"Label\"), labelColumnName: \"Label\"));\r\n\t\tvar multiclassModel = baselineMulticlassPipeline.Fit(split.TrainSet);\r\n```\r\n\r\n**Cause:**\r\n`PriorPredictor` differs from other trainers in part as it doesn't take in a `Features` column (and only looks at the `Label` column). My first guess would be when wrapping the One-vs-All in an Estimators API, we missed the part that the `Features` column won't exist for the `PriorPredictor`.","Url":"https://github.com/dotnet/machinelearning/issues/5575","RelatedDescription":"Open issue \"OVA-PriorPredictor fails\" (#5575)"},{"Id":"777808773","IsPullRequest":false,"CreatedAt":"2021-01-04T04:41:57","Actor":"justinormont","Number":"5574","RawContent":null,"Title":"Improve usability of AutoML column not found error","State":"open","Body":"Let's make the error message more actionable. \r\n\r\n**Error user sees:**\r\n![image](https://user-images.githubusercontent.com/4080826/103501081-fe1a4380-4e01-11eb-9376-e41af9105813.png)\r\n\r\nI would recommend adding similar named column(s):\r\n```diff\r\n- $\"Provided {columnPurpose} column '{columnName}' not found in training data.\"\r\n+ $\"Provided {columnPurpose} column '{columnName}' not found in training data. Did you mean '{closestNamed}'.\"\r\n```\r\n\r\nFor my current example, this would print: `Provided ignored column 'tagMaxTotalItem' not found in training data. Did you mean 'tagMaxTotalItems'.`\r\n\r\nI'd recommend using Levenshtein distance to find the closest named column ([code](https://github.com/dotnet/command-line-api/blob/34a2df49f1dcf3fdc46d0c4a3daedf84b3057e05/src/System.CommandLine/Invocation/TypoCorrection.cs#L79-L146)).\r\n\r\n**Code location:**\r\nhttps://github.com/dotnet/machinelearning/blob/5dbfd8acac0bf798957eea122f1413209cdf07dc/src/Microsoft.ML.AutoML/Utils/UserInputValidationUtil.cs#L248-L252\r\n\r\n**Background:**\r\nIt took me ~20min to debug why this error was occurring (obvious in retrospect). My column existed in the dataset, it existed in my loader function, it existed in my IDataView, ...; simply was just misspelt (\"tagMaxTotalItem\" instead of \"tagMaxTotalItems\"). \r\n\r\nImproving the usability of this error message will save future users' time.","Url":"https://github.com/dotnet/machinelearning/issues/5574","RelatedDescription":"Open issue \"Improve usability of AutoML column not found error\" (#5574)"},{"Id":"777288669","IsPullRequest":false,"CreatedAt":"2021-01-01T13:51:53","Actor":"justinormont","Number":"5573","RawContent":null,"Title":"AutoML doesn't allow ignored columns of incorrect type","State":"open","Body":"When we are validating the datatypes of the incoming columns, we throw an error even if the column is marked as ignored.\r\n\r\nFor AutoML, any columns marked as ignored should skip this validation check. Users are currently blocked from handling the column featurization independently of AutoML in a [preFeaturizer](https://github.com/dotnet/machinelearning-samples/blob/0f01ae23a204d142923fb678c5f178b10592674d/samples/csharp/getting-started/AdvancedExperiment_AutoML/AdvancedTaxiFarePrediction/Program.cs#L99-L105) or for other purposes after AutoML completes.\r\n\r\n### Error\r\n<!--![image](https://user-images.githubusercontent.com/4080826/103439305-8b864980-4bf0-11eb-94cf-dc63a8130551.png)-->\r\n\r\nUnhandled exception. System.ArgumentException: Only supported feature column types are Boolean, Single, and String. Please change the feature column unixTimeStamp of type Int64 to one of the supported types. (Parameter 'trainData')\r\n\r\nStack:\r\n````\r\nUnhandled exception. System.ArgumentException: Only supported feature column types are Boolean, Single, and String. Please change the feature column unixTimeStamp of type Int64 to one of the supported types. (Parameter 'trainData')\r\n   at Microsoft.ML.AutoML.UserInputValidationUtil.ValidateTrainData(IDataView trainData, ColumnInformation colum\r\nnInformation)\r\n   at Microsoft.ML.AutoML.UserInputValidationUtil.ValidateExperimentExecuteArgs(IDataView trainData, ColumnInformation columnInformation, IDataView validationData, TaskKind task)\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.ExecuteTrainValidate(IDataView trainData, ColumnInformation columnInfo, IDataView validationData, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.Execute(IDataView trainData, IDataView validationData, ColumnInformation columnInformation, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n   at ImgurClassifier.ConsoleApp.ModelBuilder.TrainAutoMLSubPipeline2(MLContext mlContext, IDataView trainDataView, IDataView validationDataView) in /Users/justinormont/Documents/src/ImgurClassifier/ImgurClassifier.ConsoleApp/ModelBuilder.cs:line 439\r\n   at ImgurClassifier.ConsoleApp.ModelBuilder.BuildTrainingPipelineUsingAutoML(MLContext mlContext, IDataView trainDataView, IDataView validationDataView, Boolean useAutoML) in /Users/justinormont/Documents/src/ImgurClassifier/ImgurClassifier.ConsoleApp/ModelBuilder.cs:line 159\r\n   at ImgurClassifier.ConsoleApp.ModelBuilder.CreateModel(MLContext mlContext) in /Users/justinormont/Documents/src/ImgurClassifier/ImgurClassifier.ConsoleApp/ModelBuilder.cs:line 65\r\n   at ImgurClassifier.ConsoleApp.Program.Main(String[] args) in /Users/justinormont/Documents/src/ImgurClassifier/ImgurClassifier.ConsoleApp/Program.cs:line 32\r\n````\r\nLocation in code:\r\nhttps://github.com/dotnet/machinelearning/blob/5dbfd8acac0bf798957eea122f1413209cdf07dc/src/Microsoft.ML.AutoML/Utils/UserInputValidationUtil.cs#L87-L100\r\n\r\n### Repro\r\nAdd a column of type `long` to your loader class:\r\n```c#\r\n        [ColumnName(\"unixTimeStamp\"), LoadColumn(25)]\r\n        public long UnixTimeStamp { get; set; }\r\n```\r\n\r\nIn the AutoML column information, set column as ignored: ([example code](https://github.com/dotnet/machinelearning-samples/blob/0f01ae23a204d142923fb678c5f178b10592674d/samples/csharp/getting-started/AdvancedExperiment_AutoML/AdvancedTaxiFarePrediction/Program.cs#L107-L110))\r\n```c#\r\ncolumnInformation.IgnoredColumnNames.Add(\"unixTimeStamp\");\r\n```\r\n\r\nLoad dataset in using AutoML, and receive the given error.\r\n\r\n#### Work around\r\n\r\nMitigations:\r\n* User can modify their loader function to either remove the column completely, though as the column is fully removed from the IDataView, this blocks them from working with the column in a [preFeaturizer](https://github.com/dotnet/machinelearning-samples/blob/0f01ae23a204d142923fb678c5f178b10592674d/samples/csharp/getting-started/AdvancedExperiment_AutoML/AdvancedTaxiFarePrediction/Program.cs#L99-L105) or for other MLâ€¤NET uses (e.g. having an [AutoML based stacked ensemble](https://github.com/justinormont/ImgurClassifier/blob/13b034fa311e0e314a74faf955066ca276296be7/ImgurClassifier.ConsoleApp/ModelBuilder.cs#L238-L240), and handling the specific column featurization in the main MLâ€¤NET pipeline).<br/><br/>\r\n* User can load the column as a `string` type and use the [ConvertType](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.conversionsextensionscatalog.converttype?view=ml-dotnet) transform to convert to the needed type (e.g. `long`). AutoML will see the column as the acceptable `string` type, and still rightfully ignore the column.\r\n\r\n### Fix\r\nWe should skip validation of any columns which are marked as `ColumnPurpose.Ignore`.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5573","RelatedDescription":"Open issue \"AutoML doesn't allow ignored columns of incorrect type\" (#5573)"},{"Id":"776655431","IsPullRequest":false,"CreatedAt":"2020-12-31T11:59:10","Actor":"nsulikowski","Number":"5572","RawContent":null,"Title":"ConvertToOnnx produces binary not compatible with TSQL PREDICT","State":"closed","Body":"### System information\r\n\r\nWindows, NET 5\r\n\r\n### Issue\r\n\r\nI converted my binary classification model to ONNX format using context.Model.ConvertToOnnx and inserted it into SQL 2019.\r\nThen I tried to run a prediction using the TSQL command PREDICT, and it complained that the model was invalid or corrupt.","Url":"https://github.com/dotnet/machinelearning/issues/5572","RelatedDescription":"Closed issue \"ConvertToOnnx produces binary not compatible with TSQL PREDICT\" (#5572)"},{"Id":"776536968","IsPullRequest":false,"CreatedAt":"2020-12-30T16:40:03","Actor":"AniaBerthelot","Number":"5571","RawContent":null,"Title":"producengrams error","State":"closed","Body":"### System information\r\n- ML.NET 1.5.4\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI'm trying to reproduce this tutorial\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.textcatalog.producengrams?view=ml-dotnet\r\n\r\n- **What happened?**\r\nI was surprised by this error \r\n`System.InvalidOperationException: Can't bind the IDataView column 'Tokens' of type 'Vector<Key<UInt32, 0-47>>' to field or property 'Tokens' of type 'System.Single[]'.`\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5571","RelatedDescription":"Closed issue \"producengrams error\" (#5571)"},{"Id":"775136444","IsPullRequest":false,"CreatedAt":"2020-12-28T00:34:19","Actor":"justinormont","Number":"5569","RawContent":null,"Title":"OMP: Error #15: Initializing libiomp5.dylib in Image Classification with AutoML","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n>  OS Name:     Mac OS X\r\n>  OS Version:  10.14\r\n>  OS Platform: Darwin\r\n>  RID:         osx.10.14-x64\r\n>  Base Path:   /usr/local/share/dotnet/sdk/5.0.101/\r\n\r\n- **.NET Version (eg., dotnet --info)**: \r\n> Version:   5.0.101\r\n>  Commit:    d05174dc5a\r\n>  \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI was creating a new MLâ€¤NET sample showcasing [multi-modal ](https://en.wikipedia.org/wiki/Multimodal_learning)(photos, text, categorical, numeric) techniques and [model stacking](https://en.wikipedia.org/wiki/Model_stacking). \r\n\r\n- **What happened?**\r\nWhen I stack an AutoML model using image features, I get the below error.\r\n\r\nError:\r\n\r\n> `OMP: Error #15: Initializing libiomp5.dylib, but found libomp.dylib already initialized.`\r\n> `OMP: Hint This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented work a round you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.`\r\n\r\n![image](https://user-images.githubusercontent.com/4080826/103181044-5c1eb800-4851-11eb-8585-83703553c332.png)\r\n\r\nThis seems to occur only after adding the second AutoML model which works on the image features:\r\nhttps://github.com/justinormont/ImgurClassifier/blob/13b034fa311e0e314a74faf955066ca276296be7/ImgurClassifier.ConsoleApp/ModelBuilder.cs#L154-L169\r\n\r\nThe same image pipeline is present (and causes no errors) within the main pipeline:\r\nhttps://github.com/justinormont/ImgurClassifier/blob/13b034fa311e0e314a74faf955066ca276296be7/ImgurClassifier.ConsoleApp/ModelBuilder.cs#L222-L232\r\n\r\nSpeculation on cause:\r\n* Error didn't occur until an AutoML stacked model was created for the image features. Perhaps it occurs when having two sets of the image featurizers? \r\n* The error is possibly/likely system dependent (and on macOS)\r\n* NuGet [runtime.osx.10.10-x64.CoreCompat.System.Drawing](https://www.nuget.org/packages/runtime.osx.10.10-x64.CoreCompat.System.Drawing/) is included in the project to get around a [libgdiplus error](https://gist.github.com/mtolly/384dbe51f4a78d6d2818#gistcomment-3573216); this may link to a separate version of libomp\r\n\r\n### Source code / logs\r\n\r\n#### Repro\r\nCheckout sample at current commit:\r\n```bash\r\ngit clone https://github.com/justinormont/ImgurClassifier.git\r\ncd ImgurClassifier\r\ngit checkout 13b034fa311e0e314a74faf955066ca276296be7\r\n```\r\nRuntime is expected to be ~2hr, and fails at ~30-45min. You may want reduce the AutoML time to `0` seconds ([code](https://github.com/justinormont/ImgurClassifier/blob/13b034fa311e0e314a74faf955066ca276296be7/ImgurClassifier.ConsoleApp/ModelBuilder.cs#L139), [code](https://github.com/justinormont/ImgurClassifier/blob/13b034fa311e0e314a74faf955066ca276296be7/ImgurClassifier.ConsoleApp/ModelBuilder.cs#L178)), so only one model will be created. Though, the error may be occurring within the fourth model created (SymbolicSgdLogisticRegressionOva); I'll catch the stack trace on my next run.\r\n\r\n#### Anti-Repro\r\nThe error doesn't occur if the [second AutoML sub-pipeline](https://github.com/justinormont/ImgurClassifier/blob/13b034fa311e0e314a74faf955066ca276296be7/ImgurClassifier.ConsoleApp/ModelBuilder.cs#L135-L170) (using images) is removed, even though the same image featurizers are still utilized in the [main pipeline](https://github.com/justinormont/ImgurClassifier/blob/13b034fa311e0e314a74faf955066ca276296be7/ImgurClassifier.ConsoleApp/ModelBuilder.cs#L199-L252).\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5569","RelatedDescription":"Open issue \"OMP: Error #15: Initializing libiomp5.dylib in Image Classification with AutoML\" (#5569)"},{"Id":"774819768","IsPullRequest":false,"CreatedAt":"2020-12-26T04:27:05","Actor":"justinormont","Number":"5568","RawContent":null,"Title":"AveragedPerceptron default iterations","State":"open","Body":"When changing AveragedPerceptron's default number of iterations from 1 to 10 in https://github.com/dotnet/machinelearning/pull/5258, we missed one.\r\n\r\nThe main interface continues to default to 1 iteration:\r\n![image](https://user-images.githubusercontent.com/4080826/103145371-35943c00-46ee-11eb-99c8-3f44f0b27ee4.png)\r\n\r\nPrevious issues:\r\n* https://github.com/dotnet/machinelearning/issues/4749\r\n* https://github.com/dotnet/machinelearning/pull/5258\r\n\r\n### Code location\r\nDefault is set here:\r\nhttps://github.com/dotnet/machinelearning/blob/5dbfd8acac0bf798957eea122f1413209cdf07dc/src/Microsoft.ML.StandardTrainers/Standard/Online/AveragedPerceptron.cs#L172\r\n\r\nWhich originates from:\r\nhttps://github.com/dotnet/machinelearning/blob/5dbfd8acac0bf798957eea122f1413209cdf07dc/src/Microsoft.ML.StandardTrainers/Standard/Online/AveragedLinear.cs#L108-L113\r\n\r\nWhich in-turn inherits its value from:\r\nhttps://github.com/dotnet/machinelearning/blob/5dbfd8acac0bf798957eea122f1413209cdf07dc/src/Microsoft.ML.StandardTrainers/Standard/Online/OnlineLinear.cs#L62-L65\r\n\r\n### Possible fix\r\nWe may want to make a new class within AveragedPerceptron to hold its overrides:\r\n```c#\r\n        internal class AveragedPerceptronDefault : AveragedDefault\r\n        { \r\n            public const float NumberOfIterations = 10; \r\n        } \r\n```\r\n\r\n/cc @michaelgsharp ","Url":"https://github.com/dotnet/machinelearning/issues/5568","RelatedDescription":"Open issue \"AveragedPerceptron default iterations\" (#5568)"},{"Id":"774066605","IsPullRequest":false,"CreatedAt":"2020-12-23T22:08:30","Actor":"justinormont","Number":"5567","RawContent":null,"Title":"Improve SamplingKeyColumn documentation and usability","State":"open","Body":"The use `SamplingKeyColumn` is rather confusing. Perhaps we can improve it with documentation and runtime checks/warnings.\r\n\r\n> @tasmektep: In your sample, you're using the [SamplingKeyColumn with your Label](https://github.com/tasmektep/DotNetMLSplit/blob/cf7ee532fd00221e5ad1fa420bd28678c4f52c85/DotNetMLSplit/Program.cs#L23 ) in it. \r\n> \r\n> Using your Label as your SamplingKeyColumn will cause all rows with the same Label value to be placed together in the same splits/folds (as you're seeing). \r\n> \r\n> Description from docs: \r\n> > **SamplingKeyColumn**: \r\n> > Name of a column to use for grouping rows. If two examples share the same value of the samplingKeyColumnName, they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set. Note that when performing a Ranking Experiment, the samplingKeyColumnName must be the GroupId column. If null no row grouping will be performed.\r\n> >\r\n> > https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.dataoperationscatalog.traintestsplit?view=ml-dotnet\r\n> \r\n> You are likely thinking of the related, but inverse, concept of [Stratification](https://scikit-learn.org/stable/modules/cross_validation.html#stratified-k-fold) where the rows are evenly represented between the splits/folds. Stratification has some downsides causing it be less helpful.\r\n\r\n_Originally posted by @justinormont in https://github.com/dotnet/machinelearning/issues/5563#issuecomment-749811593_\r\n\r\n> @tasmektep: Keep posting issues that you run into.  And thanks for posting your repro.\r\n>\r\n> Work on MLâ€¤NET side:\r\n> * Warning -- Have the splitter warn when zero rows are present in a split, with a special warning if SamplingKeyColumn is used. In the same fix, we could warn of unbalanced splits/folds to help https://github.com/dotnet/machinelearning/issues/3711. Down side is the user would need to attach a logger to see the warning.\r\n> * Documentation\r\n>   * Param hover -- Ensure the hover description for SamplingKeyColumn in Visual Studio is well worded to explain the concept, and perhaps mention what it does not do.\r\n>    * Samples/main docs -- Further explain the concept of SamplingKeyColumn, why its useful, and also what it does not do.\r\n> \r\n\r\n_Originally posted by @justinormont in https://github.com/dotnet/machinelearning/issues/5563#issuecomment-749822566_\r\n\r\nIn the param hover for `SamplingKeyColumn` in Visual Studio, mentioned above, we can also say to not put your `Label` column in `SamplingKeyColumn`.\r\n\r\nIt would be nice to automatically check this in `TrainTestSplit`, but the `SamplingKeyColumn` and `Label` aren't in the `TrainTestSplit` parameters together. The AutoML APIs can have this check as `SamplingKeyColumn` and `Label` are both in the parameters (and may want to throw an `ArgumentException` instead of warn).","Url":"https://github.com/dotnet/machinelearning/issues/5567","RelatedDescription":"Open issue \"Improve SamplingKeyColumn documentation and usability\" (#5567)"},{"Id":"772088487","IsPullRequest":false,"CreatedAt":"2020-12-23T20:00:10","Actor":"minotru","Number":"5565","RawContent":null,"Title":"IHost, IHostEnvironment and IChannel usage","State":"closed","Body":"Hello all,\r\nThank you for such a great framework as ML.NET.\r\n\r\nI would like to know is there any documentation for IHost and Channels and how should I used them in custom algorithms.\r\n\r\nBackground:\r\n* We have a custom algorithm on my project, I am trying to implement this algorithm as an ML.NET-compatible transformer so that it can be used inside ML.NET Pipelines.\r\n* This algorithm is a variation of FastText/Glove with vectors stored in a database.\r\n* I decided to investigate `WordEmbeddingExtractor` source code as a starting point for my implementation.\r\n* And was surprised to see a lot of `Host`, `IHostEnvironment` and `Channel` calls.\r\n\r\nThere are a lot of parts like:\r\n```cs\r\nusing (var ch = host.Start(\"step X\"))\r\n{\r\n   //\r\n}\r\n```\r\n\r\nUnfortunately, I have not found any comprehensive documentation on `IHost` and `IChannel`, why it is needed, how it is used.\r\n\r\nCould you please explain in short what is `IChannel` and `IHost` and how to use them in custom code?\r\n\r\nThanks,\r\nSimon","Url":"https://github.com/dotnet/machinelearning/issues/5565","RelatedDescription":"Closed issue \"IHost, IHostEnvironment and IChannel usage\" (#5565)"},{"Id":"771508773","IsPullRequest":false,"CreatedAt":"2020-12-23T16:31:15","Actor":"tasmektep","Number":"5563","RawContent":null,"Title":"TrainTestSplit is not working properly, when the column name provided","State":"closed","Body":"I think there is a issue with \"TrainTestSplit\" function.\r\n\r\nWhen I tried to split data that consist of 500 samples which have equal number of sample from each class, it returns the testset as 0 number of rows. However when I try to split it without \"label\" with 0.1 ratio, it returns as 49 to testset rows and 451 to trainset rows.\r\n\r\nIs there a way to solve this problem?\r\n\r\nI'm using final packages.","Url":"https://github.com/dotnet/machinelearning/issues/5563","RelatedDescription":"Closed issue \"TrainTestSplit is not working properly, when the column name provided\" (#5563)"},{"Id":"772962719","IsPullRequest":false,"CreatedAt":"2020-12-22T13:52:18","Actor":"justinormont","Number":"5566","RawContent":null,"Title":"SVMLightLoader Fails above 128 dense rows","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: macOS 10.14.6\r\n- **.NET Version (eg., dotnet --info)**: 5.0.101\r\n\r\n### Issue\r\n\r\nSVMLightLoader dies if when you load >128 dense rows.\r\n\r\nWhen the feature [column sparsity is >0.25](https://github.com/dotnet/machinelearning/blob/cf7dbffa50f7bd65172bfcb11537207a81250994/src/Microsoft.ML.Core/Utilities/VBufferUtils.cs#L21), internally the column is represented in sparse format, else dense. SVMLightLoader works if either the column is sparse (many missing values), or if the number of rows is < 128.\r\n\r\n#### Error\r\nFails with one of three errors: _(dataset dependent)_\r\n* > System.InvalidOperationException: Duplicate keys found in dataset  \r\n* > System.ArgumentException: Destination is too short. (Parameter 'destination')\r\n* > System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n\r\nStack trace:\r\n\r\n> ```\r\n> Unhandled exception. System.InvalidOperationException: Splitter/consolidator worker encountered exception while consuming source data\r\n>  ---> System.InvalidOperationException: Duplicate keys found in dataset\r\n>    at Microsoft.ML.Data.SvmLightLoader.OutputMapper.MapCore(VBuffer`1& keys, VBuffer`1& values, Output output)\r\n>    at Microsoft.ML.Data.SvmLightLoader.OutputMapper.Map(IntermediateOut intermediate, Output output)\r\n>    at Microsoft.ML.Transforms.CustomMappingTransformer`2.Mapper.<>c__DisplayClass5_0.<Microsoft.ML.Data.IRowMapper.CreateGetters>b__0()\r\n>    at Microsoft.ML.Transforms.CustomMappingTransformer`2.Mapper.<>c__DisplayClass6_0`1.<GetDstGetter>b__0(T& dst)\r\n>    at Microsoft.ML.Data.DataViewUtils.Splitter.InPipe.Impl`1.Fill()\r\n>    at Microsoft.ML.Data.DataViewUtils.Splitter.<>c__DisplayClass7_1.<ConsolidateCore>b__2()\r\n>    --- End of inner exception stack trace ---\r\n>    at Microsoft.ML.Data.DataViewUtils.Splitter.Batch.SetAll(OutPipe[] pipes)\r\n>    at Microsoft.ML.Data.DataViewUtils.Splitter.Cursor.MoveNextCore()\r\n>    at Microsoft.ML.Data.RootCursorBase.MoveNext()\r\n>    at Microsoft.ML.Data.SynchronizedCursorBase.MoveNext()\r\n>    at SVMLightLoaderTest.Program.PrintData(IDataView svmData) in /Users/justinormont/Projects/SVMLightLoaderTest/SVMLightLoaderTest/Program.cs:line 121\r\n>    at SVMLightLoaderTest.Program.Main() in /Users/justinormont/Projects/SVMLightLoaderTest/SVMLightLoaderTest/Program.cs:line 45\r\n> ```\r\n\r\nPoints to:\r\nhttps://github.com/dotnet/machinelearning/blob/5dbfd8acac0bf798957eea122f1413209cdf07dc/src/Microsoft.ML.Transforms/SvmLight/SvmLightLoader.cs#L364-L388\r\n\r\nSide note: It looks like Visual Studio on MacOS is not loading the symbols (or source) for MLâ€¤NET.\r\n\r\n\r\n### Source code / logs\r\n\r\nRepro:\r\n* .NET Fiddle -- https://dotnetfiddle.net/WbKlzS\r\n* Visual Studio Solution: [SVMLightLoaderTest.zip](https://github.com/dotnet/machinelearning/files/5730051/SVMLightLoaderTest.zip)\r\n\r\n\r\nBug exists in MLâ€¤NET v1.5.0 to v.1.5.4 (current). SvmLightLoader was added in v1.5.0.\r\n\r\n## Background\r\n\r\nI was attempting to run AutoMLâ€¤NET on a [SVM Light dataset](https://www.sysnet.ucsd.edu/projects/url/) ([download](https://www.sysnet.ucsd.edu/projects/url/url_svmlight.tar.gz)) using the CLI. But we lack SVM Light support in AutoMLâ€¤NET, so I was attempting to convert the SVM Light file to a sparse TSV. The goal was to have AutoMLâ€¤NET read the converted sparse TSV file, but the conversion failed.\r\n\r\nUsing MAML in v1.5.4: _(fails)_\r\n`dotnet ./bin/AnyCPU.Release/Microsoft.ML.Console/netcoreapp2.1/MML.dll SaveData data=Day0.svm loader=SvmLightLoader{} xf=SelectColumns{keep=Label keep=Features} saver=Text{schema=- dense=-} dout=Day0.tsv`\r\n\r\nThis fails with the above errors, as the current SvmLightLoader fails.\r\n\r\nUsing TLC's MAML: _(works)_\r\n`maml.exe SaveData data=Day0.svm loader=SvmLightLoader{} xf=KeepColumns{col=Label col=Features} saver=Text{schema=- dense=-} dout=Day0.tsv`\r\n\r\nThe old internal version of MLâ€¤NET (TLC) works properly in reading the SVM Light format and writing a TSV. The implies there was a bug introduced when we released SvmLightLoader with v1.5.0 of MLâ€¤NET.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5566","RelatedDescription":"Open issue \"SVMLightLoader Fails above 128 dense rows\" (#5566)"},{"Id":"771751039","IsPullRequest":false,"CreatedAt":"2020-12-21T00:17:26","Actor":"dcostea","Number":"5564","RawContent":null,"Title":"Microsoft.ML.Data attributes are not supported by C# 9 positional records","State":"open","Body":"### System information\r\n\r\n- Windows 10:\r\n- .NET 5.0.1: \r\n\r\n### Issue\r\n\r\n- I have replaced class with record inside an input data model class.\r\n- Positional records from C# 9 doesn't not support Microsoft.ML.Data attributes like: ColumnNameAttribute, LoadColumnAttribute, VectorTypeAttribute.\r\n- I expect that all Microsoft.ML.Data attributes to be supported by records.\r\n\r\n```record Product([VectorType(2)] string Brand, string Model, decimal Price);```\r\n\r\n![attribute](https://user-images.githubusercontent.com/15055082/102728066-f2bb1880-4329-11eb-9f91-dc9531fd7f49.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5564","RelatedDescription":"Open issue \"Microsoft.ML.Data attributes are not supported by C# 9 positional records\" (#5564)"},{"Id":"770284091","IsPullRequest":true,"CreatedAt":"2020-12-18T03:43:17","Actor":"antoniovs1029","Number":"5559","RawContent":null,"Title":"Add SymSgdNative reference to AutoML.Tests.csproj","State":"closed","Body":"This AutoML test was sometimes failing, because it was unable to load the SymSgdNative library, but in that test we were actually another exception to be caught by the automl runner:\r\nhttps://github.com/dotnet/machinelearning/pull/5528#issuecomment-739040897\r\n\r\nI was able to reproduce this locally by only using the SymbolicSgdLogisticRegression trainer on the Experiment settings of that test, and this was fixed by adding a missing Naitve reference to the test .csproj.","Url":"https://github.com/dotnet/machinelearning/pull/5559","RelatedDescription":"Closed or merged PR \"Add SymSgdNative reference to AutoML.Tests.csproj\" (#5559)"},{"Id":"770462769","IsPullRequest":true,"CreatedAt":"2020-12-18T03:42:31","Actor":"harishsk","Number":"5561","RawContent":null,"Title":"Renamed release notes file","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5561","RelatedDescription":"Closed or merged PR \"Renamed release notes file\" (#5561)"},{"Id":"770461057","IsPullRequest":true,"CreatedAt":"2020-12-18T03:42:01","Actor":"harishsk","Number":"5560","RawContent":null,"Title":"Updated version to 1.5.5 and 0.17.5","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5560","RelatedDescription":"Closed or merged PR \"Updated version to 1.5.5 and 0.17.5\" (#5560)"},{"Id":"767899362","IsPullRequest":false,"CreatedAt":"2020-12-17T23:45:20","Actor":"eerhardt","Number":"5552","RawContent":null,"Title":"Can't find symbols for Microsoft.ML.Core or Microsoft.ML.Data","State":"closed","Body":"I tried debugging an application today that uses the latest release of ML.NET â€“ 1.5.3. I believe this is the first release since the upgrade to Arcade.\r\n\r\nHowever, I canâ€™t load symbols for some of the assemblies. For the assemblies that are 1:1 with NuGet packages, those symbols appear to be loaded. But the core assemblies â€“ ML.Core and ML.Data â€“ donâ€™t have their symbols loaded:\r\n\r\n![image](https://user-images.githubusercontent.com/8291187/102251329-45c84200-3eca-11eb-9855-6e66b958543a.png)\r\n\r\nWe need to:\r\n\r\n1. Upload the symbols for this release since it is an officially released version.\r\n2. Fix the build so it automatically publishes the symbols for all assemblies.\r\n\r\ncc @harishsk @michaelgsharp @mstfbl @frank-dong-ms ","Url":"https://github.com/dotnet/machinelearning/issues/5552","RelatedDescription":"Closed issue \"Can't find symbols for Microsoft.ML.Core or Microsoft.ML.Data\" (#5552)"},{"Id":"770241480","IsPullRequest":true,"CreatedAt":"2020-12-17T19:34:51","Actor":"harishsk","Number":"5558","RawContent":null,"Title":"Fixed version numbers in the right place","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5558","RelatedDescription":"Closed or merged PR \"Fixed version numbers in the right place\" (#5558)"},{"Id":"769730159","IsPullRequest":true,"CreatedAt":"2020-12-17T16:50:41","Actor":"harishsk","Number":"5557","RawContent":null,"Title":"Updated version to 1.5.4","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/5557","RelatedDescription":"Closed or merged PR \"Updated version to 1.5.4\" (#5557)"},{"Id":"766500599","IsPullRequest":false,"CreatedAt":"2020-12-17T15:09:24","Actor":"gutosys","Number":"5551","RawContent":null,"Title":"When publish solution with ML.Net and Tensor Flow, Got error \" ---> System.DllNotFoundException: Unable to load DLL 'tensorflow' or one of its dependencies\"","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:  Windows Server\r\n- **.NET Version (eg., dotnet --info)**:  .Net Core 3.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nWhen publish, the application installed tensorflow.dll, Tensorflow.Keras.dll and TensorFlow.NET.dll, but this error persist.\r\n\r\nFor information the dll SciSharp.TensorFlow.Redist not installed.\r\n\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5551","RelatedDescription":"Closed issue \"When publish solution with ML.Net and Tensor Flow, Got error \" ---> System.DllNotFoundException: Unable to load DLL 'tensorflow' or one of its dependencies\"\" (#5551)"},{"Id":"769500071","IsPullRequest":true,"CreatedAt":"2020-12-17T08:07:54","Actor":"antoniovs1029","Number":"5556","RawContent":null,"Title":"Fix publishing symbols","State":"closed","Body":"This PR:\r\n- Fixes the issues with publishing symbols described in #5552 \r\n- Fixes the warnings we had on the publishing CI because no portable PDBs were found to convert them to Windows PDBs: this is because arcade already creates Windows PDBs so the ConvertPortablePdbsToWindowsPdbs can be set to false now.\r\n- Publish the .nupkgs and .snupkgs the CI generates to Azure Artifacts before publishing them to the feeds and symbol servers, in case we need to debug them in the future.\r\n- Adds the missing flags to the last step on our CI which tests `build -pack`\r\n\r\nBIG THANKS to @michaelgsharp for figuring out the key changes needed to correctly publish the symbols!\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5556","RelatedDescription":"Closed or merged PR \"Fix publishing symbols\" (#5556)"},{"Id":"769252149","IsPullRequest":true,"CreatedAt":"2020-12-16T21:48:43","Actor":"antoniovs1029","Number":"5555","RawContent":null,"Title":"continueOnError on Brew Workaround","State":"closed","Body":"The \"Brew workaround\" step has suddenly started failing on our nuget-producing pipelines.\r\n\r\nIt seems this is because this week they're updating the MacOS machines, and this is breaking the workaround:\r\nhttps://github.com/actions/virtual-environments/issues/2248\r\n\r\nIt seems that for the machines where the update is done, the workaround not only breaks, but is no longer necessary. But it's still necessary on the CI machines that aren't updated.\r\n\r\nOnce all the machines are updated, we'll be able to remove the Workaround step completely.\r\n\r\nNOTE: if the machine is updated, then the Brew Workaround step will fail, but the build will continue, and the nugets will be published. Still, since there was an error, the CI will show the error. We should simply ignore this. Once all of the machines are updated, we can remove the Brew Workaround step.\r\n\r\nNOTE2: As suggested by Mustafa, I've also added this to our PR's CI builds, which has just started to fail because of this. With the change on the PR they do show a Failure on the logs, but they pass on github, so they aren't blocking the PRs.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5555","RelatedDescription":"Closed or merged PR \"continueOnError on Brew Workaround\" (#5555)"},{"Id":"768783069","IsPullRequest":true,"CreatedAt":"2020-12-16T18:51:44","Actor":"mstfbl","Number":"5554","RawContent":null,"Title":"Forward logs of Experiment's sub MLContexts to main MLContext","State":"closed","Body":"Fix Issue #5553 \r\n\r\nI've added the forwarding of logs generated in `Experiment` class's sub `MLContext`s to the main `MLContext` by sending their log messages to `Experiment`'s `_logger`. Also added unit test to verify.","Url":"https://github.com/dotnet/machinelearning/pull/5554","RelatedDescription":"Closed or merged PR \"Forward logs of Experiment's sub MLContexts to main MLContext\" (#5554)"},{"Id":"768032691","IsPullRequest":false,"CreatedAt":"2020-12-16T18:51:44","Actor":"LittleLittleCloud","Number":"5553","RawContent":null,"Title":"AutoML - Can't get training progress during image training","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: win10\r\n- **.NET Version (eg., dotnet --info)**: 3.1.4\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n-  I use AutoML API to launch an image classification training, and in order to get training progress, I attach a logger to the current context. However, no training progress shows after I attach to logger and start training.\r\n\r\n### What might happen\r\nAfter some investigation, I believe the error is caused by one of the latest changes we made on how a trial is launched. In this PR #5445, it creates a new context instead of reusing the current context when starting a trial at the beginning. So when I subscribe to the log channel when calling API, it is actually listening to the current context's channel where no trial is ongoing. However, since that new context where the trial is ongoing is not available externally, there's no way to have a peek at training progress right now.","Url":"https://github.com/dotnet/machinelearning/issues/5553","RelatedDescription":"Closed issue \"AutoML - Can't get training progress during image training\" (#5553)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-01-09T05:30:34.622135Z","RunDurationInMilliseconds":600}