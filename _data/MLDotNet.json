{"Data":{"GitHub":{"Issues":[{"Id":"827023644","IsPullRequest":false,"CreatedAt":"2021-03-10T03:26:17","Actor":"michaelgsharp","Number":"5700","RawContent":null,"Title":"Fix URL and datasets for samples.","State":"open","Body":"With the removal of the TLC subscription, all the URL's in the samples for the datasets need to be fixed.\r\n\r\nIf we don't have access to those datasets anymore, we will need to either create them again or come up with new ones.","Url":"https://github.com/dotnet/machinelearning/issues/5700","RelatedDescription":"Open issue \"Fix URL and datasets for samples.\" (#5700)"},{"Id":"826810260","IsPullRequest":true,"CreatedAt":"2021-03-09T23:44:17","Actor":"michaelgsharp","Number":"5699","RawContent":null,"Title":"Fixes for tlc build breaks","State":"open","Body":"With the removal of the TLC subscription which was hosting some assets we had errors trying to build. These assets have been moved into another azure devops repo and turned into a nuget package.\r\n\r\nThis pr changes the build process so it uses the nuget instead of directly downloading the assets. This involves some build changes as well as some test file changes.","Url":"https://github.com/dotnet/machinelearning/pull/5699","RelatedDescription":"Open PR \"Fixes for tlc build breaks\" (#5699)"},{"Id":"823967636","IsPullRequest":false,"CreatedAt":"2021-03-07T17:18:02","Actor":"WalternativE","Number":"5698","RawContent":null,"Title":"DateTime columns cause schema type lookups to fail in DataFrame","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:  Windows 10 20H2 19042.844\r\n- **.NET Version (eg., dotnet --info)**:  5.0.200\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n  I tried to use the `Explore()` and `ExploreWithSandDance()` extension methods on the\r\n  `IDataView` type of the underlying `DataFrame` which contained a column of the type\r\n  `PrimitiveDataFrameColumn<DateTime>`.\r\n\r\n- **What happened?**\r\n  I received the following error\r\n  ```\r\n  Error: System.NotSupportedException: Specified method is not supported.\r\n  at Microsoft.Data.Analysis.PrimitiveDataFrameColumn`1.GetDataViewType()\r\n  at Microsoft.Data.Analysis.PrimitiveDataFrameColumn`1.AddDataViewColumn(Builder builder)\r\n  at Microsoft.Data.Analysis.DataFrame.get_DataViewSchema()\r\n  at Microsoft.ML.DataViewExtensions.ToTabularJsonString(IDataView source)\r\n  at Microsoft.ML.DataViewExtensions.ExploreWithSandDance(IDataView source)\r\n  at <StartupCode$FSI_0011>.$FSI_0011.main@()\r\n  ``` \r\n\r\n- **What did you expect?**\r\n  I expected the same behavior as when I tried the same procedure with a `DataFrame` which did not contain a\r\n  `DateTime` column.\r\n\r\n### Source code / logs\r\n\r\nAs explained above I received a `NotSupportedException`. I assume, that it is connected to the execution of this line\r\n`source.Schema.ToDictionary(column => column.Name, column => column.Type.RawType);` in the extension method to create the `TabularJsonObject` [here](https://github.com/dotnet/interactive/blob/4f22e1b0cd1023ee8e4ddff30de6b7c845a674c4/src/Microsoft.DotNet.Interactive.ExtensionLab/DataFrameKernelExtension.cs#L178).\r\n\r\nI created a [notebook](https://github.com/WalternativE/DotnetInteractiveExperiments/blob/main/notebooks/DataFrameDateTimeProblem.ipynb) which showcases how I stumbled upon the error. It should be possible to use the binder link in the readme for this, even though it botches up the last redirect for some reason.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5698","RelatedDescription":"Open issue \"DateTime columns cause schema type lookups to fail in DataFrame\" (#5698)"},{"Id":"823950980","IsPullRequest":false,"CreatedAt":"2021-03-07T16:02:23","Actor":"jamsoft","Number":"5697","RawContent":null,"Title":"Attempting to use In Memory Images for Prediction","State":"open","Body":"### System information\r\n\r\n- Windows 10\r\n\r\n### Issue\r\n\r\n- **I'm trying to use in memory images with an ML Model Loaded from an MLModel.zip file**\r\n- **I cannot work our how to build the pipeline in order to adapt the input schema?**\r\n\r\n### Source code / logs\r\n\r\nI'm following the examples I can find in the ML repository. The such as the WebApp and WebApi Images classification example applications but they all wrap a tensorflow model in order to then be able to pass a Bitmap to the Prediction method.\r\n\r\nI've been trying all day to find either simpler examples or the right syntax and I've completely failed so far. The examples build pipelines to do things like resizing, extracting pixels and recolorising whereas all my images are pre-prepared and I'm using an ML.NET model which should be the simplest use case but there aren't currently any of these simpler examples.\r\n\r\nWhat I cant find out how to do, or even identify if it's the right approach, is create a pipeline that loads an ML.NET \"native\" model created by Model Builder then adapt this to take in a Bitmap using the same type of class as in the [demos](https://github.com/CESARDELATORRE/TensorFlowImageClassificationWebApp):\r\n\r\nSuch as this:\r\n\r\n```\r\n    public class ImageInputData\r\n    {\r\n        [ImageType(227, 227)]\r\n        public Bitmap Image { get; set; }\r\n    }\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5697","RelatedDescription":"Open issue \"Attempting to use In Memory Images for Prediction\" (#5697)"},{"Id":"823538954","IsPullRequest":false,"CreatedAt":"2021-03-06T02:25:49","Actor":"zyzhu","Number":"5696","RawContent":null,"Title":"OLS regression outputs wrong TStats and PValue","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.200\r\n Commit:    70b3e65d53\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19042\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.200\\\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI tried to use ML.Net to run a stats 101 case to get familiar with the library.\r\nThe data points are generated so that y = x * 2 + random(). I use OLS trainer to estimate its slope and output its tstats and pvalues.\r\n- **What happened?**\r\npValue turns out to be 1 and tstat turns out to be 0.\r\n- **What did you expect?**\r\npValue is supposed to be close to zero and tstat is supposed to be very large.\r\n\r\nHere is the equivalent R code\r\n```r\r\ndf <- data.frame(x = 1:100, y = 1:100*2 + runif(100))\r\nmodel <- lm(y ~ x, df)\r\nsummary(model)\r\n```\r\noutput of R\r\n```\r\nResiduals:\r\n     Min       1Q   Median       3Q      Max \r\n-0.48638 -0.20409 -0.04365  0.22835  0.52931 \r\n\r\nCoefficients:\r\n             Estimate Std. Error  t value Pr(>|t|)    \r\n(Intercept) 0.5067878  0.0562763    9.005 1.74e-14 ***\r\nx           1.9994857  0.0009675 2066.691  < 2e-16 ***\r\n---\r\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\r\n\r\nResidual standard error: 0.2793 on 98 degrees of freedom\r\nMultiple R-squared:      1,\tAdjusted R-squared:      1 \r\nF-statistic: 4.271e+06 on 1 and 98 DF,  p-value: < 2.2e-16\r\n```\r\n\r\n### Source code / logs\r\nThe following is the F# script file. Or you can run it in Jupyter notebook via dotnet interactive kernel.\r\n```fsharp\r\n#r \"nuget: Microsoft.ML\"\r\n#r \"nuget: Microsoft.ML.Mkl.Components\"\r\nopen System\r\nopen Microsoft.ML\r\nopen Microsoft.ML.Data\r\n\r\n[<CLIMutable>]\r\ntype Factor = {\r\n    [<ColumnName(\"Label\")>]\r\n    y : float32\r\n    intercept: float32\r\n    x : float32\r\n}\r\n\r\n// Generate data: y = x * 2 + rnd\r\nlet rnd = Random()\r\nlet rows =\r\n    [1.0 .. 100.0]\r\n    |> Seq.map(fun v ->\r\n        {\r\n            y = float32 (v * 2.0 + rnd.NextDouble())\r\n            intercept = float32 1.\r\n            x = float32 v\r\n        }\r\n    )\r\n\r\nlet context = new MLContext()\r\nlet dataView = context.Data.LoadFromEnumerable(rows)\r\nlet pipeline =\r\n    EstimatorChain()\r\n        .Append(context.Transforms.Concatenate(\"Features\", \"intercept\", \"x\"))\r\n        .Append(context.Regression.Trainers.Ols())\r\n\r\nlet model = dataView |> pipeline.Fit\r\nlet modelParams = model.LastTransformer.Model\r\nSeq.zip3 modelParams.Weights modelParams.TValues modelParams.PValues\r\n|> Array.ofSeq\r\n|> Array.iteri(fun i (w, t, p) ->\r\n    printfn $\"Beta {i}, w: {w:f3}, tStats: {t:f3}, pValue: {p:f3}\")\r\n```\r\nOutput\r\n```\r\nBeta 0, w: 0.005, tStats: 0.000, pValue: 1.000\r\nBeta 1, w: 2.000, tStats: 0.000, pValue: 1.000\r\n```\r\n\r\nAnother general feedback is that the ceremony in ML.NET is so complicated, compared to the simplicity in R sample above. I do not expect users from R/Python community can embrace this complexity. The library seems to be designed for software engineers only in mind. Maybe there's a balance in between R/Python and dotnet.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5696","RelatedDescription":"Open issue \"OLS regression outputs wrong TStats and PValue\" (#5696)"},{"Id":"822360014","IsPullRequest":false,"CreatedAt":"2021-03-04T21:46:13","Actor":"MichaelBetser","Number":"5643","RawContent":null,"Title":"ml.net 1.5.2 not compiling on windows because missing dependencies","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: windows 10 x64 pro version 10.0.19042\r\n- **.NET Version (eg., dotnet --info)**: 5.0.200\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried to compile ml.net 1.5.2 on windows to get compatible maml.exe binary\r\n- **What happened?**\r\ncompile is failing when resolving dependencies\r\n- **What did you expect?**\r\nto compile\r\n\r\n### Source code / logs\r\nE:\\git\\ml.net_1.5.2\\machinelearning>.\\build.cmd\r\nInstalling procdump.exe\r\nFinish install procdump.exe\r\nInstalling dotnet runtime 2.1.12...\r\nInstalling dotnet cli 3.1.102...\r\nRestoring BuildTools version 3.0.0-preview4-04926-01...\r\nERROR: Could not restore build tools correctly.\r\nPlease check the detailed log that follows.\r\nRunning \"E:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.cmd\"\r\nInstalling 'https://dotnetcli.azureedge.net/dotnet/Runtime/2.1.12/dotnet-runtime-2.1.12-win-x64.zip' to 'E:\\git\\ml.net_1.5.2\\machinelearning\\Tools\\dotnetcli\\dotnet-runtime-2.1.12-win-x64.zip'\r\nInstalling 'https://dotnetcli.azureedge.net/dotnet/Sdk/3.1.102/dotnet-sdk-3.1.102-win-x64.zip' to 'E:\\git\\ml.net_1.5.2\\machinelearning\\Tools\\dotnetcli\\dotnet-sdk-3.1.102-win-x64.zip'\r\nRunning: \"E:\\git\\ml.net_1.5.2\\machinelearning\\Tools\\dotnetcli\\dotnet.exe\" restore \"E:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.msbuild\" --no-cache --packages \"E:\\git\\ml.net_1.5.2\\machinelearning\\packages\" --source \"https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\" /p:BuildToolsPackageVersion=3.0.0-preview4-04926-01 /p:ToolsDir=E:\\git\\ml.net_1.5.2\\machinelearning\\Tools\r\nE:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.msbuild : error NU1101: Unable to find package Microsoft.SymbolUploader.Build.Task. No packages exist with this id in source(s): https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\r\nE:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.msbuild : error NU1101: Unable to find package Microsoft.DotNet.BuildTools. No packages exist with this id in source(s): https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\r\n  Restore failed in 1.06 sec for E:\\git\\ml.net_1.5.2\\machinelearning\\init-tools.msbuild.","Url":"https://github.com/dotnet/machinelearning/issues/5643","RelatedDescription":"Closed issue \"ml.net 1.5.2 not compiling on windows because missing dependencies\" (#5643)"},{"Id":"821497223","IsPullRequest":true,"CreatedAt":"2021-03-04T02:56:46","Actor":"michaelgsharp","Number":"5642","RawContent":null,"Title":"Updating version after release","State":"closed","Body":"Update the version after the last release.\r\nSetting new version to 1.5.6 for non-preview packages.\r\nSetting new version to 0.17.6 for preview packages.","Url":"https://github.com/dotnet/machinelearning/pull/5642","RelatedDescription":"Closed or merged PR \"Updating version after release\" (#5642)"},{"Id":"821382240","IsPullRequest":true,"CreatedAt":"2021-03-03T18:41:27","Actor":"pgovind","Number":"5641","RawContent":null,"Title":"Move DataFrame to machinelearning","State":"open","Body":"Move MDA, MDAI, MDA.Tests and MDAI.Tests to machinelearning. \r\n\r\nFor an easier time reviewing, the real changes are after the `Merge branch 'port' of ../corefxlab into DataFrame_1` commit.\r\n\r\nJust for posterity, I used `git-filter-repo` to pare down corefxlab locally to just the MDA and MDAI parts that I was interested in and then moved them over to the machinelearning repo. `git-filter-repo` was way faster than `git filter-branch` on my machine.","Url":"https://github.com/dotnet/machinelearning/pull/5641","RelatedDescription":"Open PR \"Move DataFrame to machinelearning\" (#5641)"},{"Id":"819368089","IsPullRequest":true,"CreatedAt":"2021-03-03T18:36:10","Actor":"pgovind","Number":"5636","RawContent":null,"Title":"[WIP]Move MDA and MDAI to machinelearning","State":"closed","Body":"Move the DataFrame and DataFrame.Interactive projects to the machinelearning sln.\r\n\r\nDon't review yet. I'm working on moving the test projects to this repo too.\r\n\r\ncc @eerhardt @michaelgsharp ","Url":"https://github.com/dotnet/machinelearning/pull/5636","RelatedDescription":"Closed or merged PR \"[WIP]Move MDA and MDAI to machinelearning\" (#5636)"},{"Id":"821312065","IsPullRequest":false,"CreatedAt":"2021-03-03T17:12:11","Actor":"lisahua","Number":"5640","RawContent":null,"Title":"[AnomalyDetection] Some points marked as anomaly with little deviation","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: master\r\n\r\n### Issue\r\n\r\n- **What did you do?** Apply AnomalyDetection API\r\n- **What happened?** Some points are marked as anomaly while some others that look more like anomaly are not marked as anomaly.\r\n- **What did you expect?** I expect the points that look has more deviations mark as anomaly, rather than the ones with small deviation.\r\n![image](https://user-images.githubusercontent.com/3010893/109843877-6d44c600-7c00-11eb-8049-69d579ee8bdb.png)\r\n\r\nExpecting the highlighted points with higher deviation to be anomalies.\r\n\r\n**Please assign the issue** to: https://github.com/guinao and https://github.com/mengaims\r\n\r\n### Source code / logs\r\n\r\n[Sales vs Date.csv](https://aiteststracc.blob.core.windows.net/testfiles/Sales%20%20Profit%20by%20Year,%20Quarter,%20Month%20and%20Day.csv?sv=2019-02-02&st=2021-03-03T16%3A54%3A18Z&se=2023-03-04T16%3A54%3A00Z&sr=b&sp=racw&sig=xBnvuqciOfsqx90DtS8USnxBXMbRz7%2BJRuo5CD28u%2BY%3D) (Input data)\r\n\r\n           var anomalyDetectorOptions = new SrCnnEntireAnomalyDetectorOptions()\r\n            {\r\n                DetectMode = //WithMargin,\r\n                Sensitivity = 20,\r\n                DeseasonalityMode = SrCnnDeseasonalityMode.Median,\r\n                Period = -1,\r\n                Threshold =0.18,\r\n            };\r\n\r\n            anomalyResult = this.mlContext.AnomalyDetection.DetectEntireAnomalyBySrCnn(\r\n      ...\r\n            anomalyDetectorOptions);\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5640","RelatedDescription":"Open issue \"[AnomalyDetection] Some points marked as anomaly with little deviation\" (#5640)"},{"Id":"820363740","IsPullRequest":true,"CreatedAt":"2021-03-03T03:19:36","Actor":"michaelgsharp","Number":"5639","RawContent":null,"Title":"Added in release notes for 1.5.5","State":"closed","Body":"Here are the release notes for 1.5.5. #5634 needs to go in before these notes do.","Url":"https://github.com/dotnet/machinelearning/pull/5639","RelatedDescription":"Closed or merged PR \"Added in release notes for 1.5.5\" (#5639)"},{"Id":"819095978","IsPullRequest":true,"CreatedAt":"2021-03-03T03:19:24","Actor":"michaelgsharp","Number":"5634","RawContent":null,"Title":"Treat TensorFlow output as non-batched.","State":"closed","Body":"Currently, if TensorFlow has a -1 as the first dimension in an output tensor then ML.NET always treats it as the batch number. There are some cases where we don't want it treated as a batch number, but an actual dimension. This PR gives the user the ability to specify whether its batch output or not but keeps the default behavior of assuming it is batched.\r\n\r\nThis issue originally stems from #5364, though there was a lot of offline conversation about it.","Url":"https://github.com/dotnet/machinelearning/pull/5634","RelatedDescription":"Closed or merged PR \"Treat TensorFlow output as non-batched.\" (#5634)"},{"Id":"814853973","IsPullRequest":true,"CreatedAt":"2021-03-02T20:23:39","Actor":"michaelgsharp","Number":"5629","RawContent":null,"Title":"CI testing for the new ORT package","State":"closed","Body":"CI testing for the new ORT package.","Url":"https://github.com/dotnet/machinelearning/pull/5629","RelatedDescription":"Closed or merged PR \"CI testing for the new ORT package\" (#5629)"},{"Id":"817068034","IsPullRequest":true,"CreatedAt":"2021-03-02T17:49:22","Actor":"michaelgsharp","Number":"5631","RawContent":null,"Title":"AutoML aggregate exception","State":"closed","Body":"Fixes #5612. In AutoML when the max experiment time is up a cancellation token is used to cancel any runs in progress. We catch the `OperationCanceledException` so that it doesn't prevent the finished models from being returned. However for some trainers, like FastTree, because training is done in parallel it can throw multiple `OperationCancelledExceptions` grouped together in an `AggregateException`. This was missing the original `catch` block and so was causing no results to be returned. This PR adds in another check for the `AggregateException` where all inner exceptions are of type `OperationCancelledException`, and treats it the same was as a plain `OperationCancelledException`.\r\n\r\nI was not sure how to really add tests for this, It was brought up by a user and you _can_ repro it locally though its not consistent. If any of you have ideas for good tests let me know.","Url":"https://github.com/dotnet/machinelearning/pull/5631","RelatedDescription":"Closed or merged PR \"AutoML aggregate exception\" (#5631)"},{"Id":"819959310","IsPullRequest":false,"CreatedAt":"2021-03-02T12:11:28","Actor":"HollandRisley","Number":"5638","RawContent":null,"Title":"Is Multivariate Time based series forecasting in the roadmap for ML.Net?","State":"open","Body":"Is Multivariate Time based series forecasting in the roadmap for ML.Net?","Url":"https://github.com/dotnet/machinelearning/issues/5638","RelatedDescription":"Open issue \"Is Multivariate Time based series forecasting in the roadmap for ML.Net?\" (#5638)"},{"Id":"819293881","IsPullRequest":true,"CreatedAt":"2021-03-02T06:45:23","Actor":"michaelgsharp","Number":"5635","RawContent":null,"Title":"Documentation updates","State":"closed","Body":"Just documentation changes and updates that fixes #5615, fixes #5594, and fixes #5588. \r\n\r\nUpdates to document the correct version of CUDA for TensorFlow.\r\nDocuments an issue with brew and installing libomp.\r\nChanges an ONNX url to be the correct URL.","Url":"https://github.com/dotnet/machinelearning/pull/5635","RelatedDescription":"Closed or merged PR \"Documentation updates\" (#5635)"},{"Id":"819566850","IsPullRequest":false,"CreatedAt":"2021-03-02T03:23:53","Actor":"iluveu28","Number":"5637","RawContent":null,"Title":"Dynamic Training Pipeline","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win x64 and Linux x64\r\n- **.NET Version (eg., dotnet --info)**: 3.1 and 5.0\r\n\r\n### Issue\r\n\r\nI create a web api application that accepts a csv file. I want to train and predict without hardcoding any fields coz the user can upload any csv file with any header names they desire. We can assume the last column is the label.\r\n\r\nSomething like how your tutorial here generates the codes on the fly - https://dotnet.microsoft.com/learn/ml-dotnet/get-started-tutorial/create\r\n\r\nI'm OK to fix the algo & assume the last column is the label. However, How can I pick the feature columns, one hot encoding and one hot hash encoding columns on the fly?\r\n\r\n### Source code / logs\r\n\r\nExample with LigthtGbm algo :-\r\n----------------------------------\r\n\r\n            var dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"BinRootCause\", \"BinRootCause\")\r\n                                      .Append(mlContext.Transforms.Categorical.OneHotEncoding(new[] { new InputOutputColumnPair(\"Lot\", \"Lot\"), new InputOutputColumnPair(\"Program\", \"Program\"), new InputOutputColumnPair(\"SBLTriggeredBin\", \"SBLTriggeredBin\"), new InputOutputColumnPair(\"SBLTriggerRule\", \"SBLTriggerRule\"), new InputOutputColumnPair(\"WW\", \"WW\"), new InputOutputColumnPair(\"DevRevStep\", \"DevRevStep\"), new InputOutputColumnPair(\"SummaryId\", \"SummaryId\"), new InputOutputColumnPair(\"Product\", \"Product\"), new InputOutputColumnPair(\"Family\", \"Family\"), new InputOutputColumnPair(\"TIU_SOC\", \"TIU_SOC\"), new InputOutputColumnPair(\"TESTER_SOC_TH\", \"TESTER_SOC_TH\") }))\r\n                                      .Append(mlContext.Transforms.Categorical.OneHotHashEncoding(new[] { new InputOutputColumnPair(\"Operation\", \"Operation\"), new InputOutputColumnPair(\"TestedQty\", \"TestedQty\"), new InputOutputColumnPair(\"TestEndDate\", \"TestEndDate\"), new InputOutputColumnPair(\"InterfaceBin\", \"InterfaceBin\"), new InputOutputColumnPair(\"FunctionalBin\", \"FunctionalBin\") }))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"VisualId_tf\", \"VisualId\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"SortLot_tf\", \"SortLot\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TESTER_CELL_tf\", \"TESTER_CELL\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TESTER_tf\", \"TESTER\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TIU_tf\", \"TIU\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TH_tf\", \"TH\"))\r\n                                      .Append(mlContext.Transforms.Concatenate(\"Features\", new[] { \"Lot\", \"Program\", \"SBLTriggeredBin\", \"SBLTriggerRule\", \"WW\", \"DevRevStep\", \"SummaryId\", \"Product\", \"Family\", \"TIU_SOC\", \"TESTER_SOC_TH\", \"Operation\", \"TestedQty\", \"TestEndDate\", \"InterfaceBin\", \"FunctionalBin\", \"VisualId_tf\", \"SortLot_tf\", \"TESTER_CELL_tf\", \"TESTER_tf\", \"TIU_tf\", \"TH_tf\", \"SBLValue\", \"SBLLimit\", \"SortX\", \"SortY\", \"SortWafer\" }));\r\n            // Set the training algorithm \r\n            var trainer = mlContext.MulticlassClassification.Trainers.LightGbm(labelColumnName: @\"BinRootCause\", featureColumnName: \"Features\")\r\n                                      .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\r\n\r\n\r\nExample with FastTree algo :\r\n------------------------------\r\n\r\n            var dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"BinRootCause\", \"BinRootCause\")\r\n                                      .Append(mlContext.Transforms.Categorical.OneHotEncoding(new[] { new InputOutputColumnPair(\"Lot\", \"Lot\"), new InputOutputColumnPair(\"Program\", \"Program\"), new InputOutputColumnPair(\"SBLTriggeredBin\", \"SBLTriggeredBin\"), new InputOutputColumnPair(\"SBLTriggerRule\", \"SBLTriggerRule\"), new InputOutputColumnPair(\"WW\", \"WW\"), new InputOutputColumnPair(\"DevRevStep\", \"DevRevStep\"), new InputOutputColumnPair(\"SummaryId\", \"SummaryId\"), new InputOutputColumnPair(\"Product\", \"Product\"), new InputOutputColumnPair(\"Family\", \"Family\"), new InputOutputColumnPair(\"TIU_SOC\", \"TIU_SOC\"), new InputOutputColumnPair(\"TESTER_SOC_TH\", \"TESTER_SOC_TH\") }))\r\n                                      .Append(mlContext.Transforms.Categorical.OneHotHashEncoding(new[] { new InputOutputColumnPair(\"Operation\", \"Operation\"), new InputOutputColumnPair(\"TestedQty\", \"TestedQty\"), new InputOutputColumnPair(\"TestEndDate\", \"TestEndDate\"), new InputOutputColumnPair(\"InterfaceBin\", \"InterfaceBin\"), new InputOutputColumnPair(\"FunctionalBin\", \"FunctionalBin\") }))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"VisualId_tf\", \"VisualId\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"SortLot_tf\", \"SortLot\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TESTER_CELL_tf\", \"TESTER_CELL\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TESTER_tf\", \"TESTER\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TIU_tf\", \"TIU\"))\r\n                                      .Append(mlContext.Transforms.Text.FeaturizeText(\"TH_tf\", \"TH\"))\r\n                                      .Append(mlContext.Transforms.Concatenate(\"Features\", new[] { \"Lot\", \"Program\", \"SBLTriggeredBin\", \"SBLTriggerRule\", \"WW\", \"DevRevStep\", \"SummaryId\", \"Product\", \"Family\", \"TIU_SOC\", \"TESTER_SOC_TH\", \"Operation\", \"TestedQty\", \"TestEndDate\", \"InterfaceBin\", \"FunctionalBin\", \"VisualId_tf\", \"SortLot_tf\", \"TESTER_CELL_tf\", \"TESTER_tf\", \"TIU_tf\", \"TH_tf\", \"SBLValue\", \"SBLLimit\", \"SortX\", \"SortY\", \"SortWafer\" }))\r\n                                      .AppendCacheCheckpoint(mlContext);\r\n            // Set the training algorithm \r\n            var trainer = mlContext.MulticlassClassification.Trainers.OneVersusAll(mlContext.BinaryClassification.Trainers.FastTree(labelColumnName: @\"BinRootCause\", featureColumnName: \"Features\"), labelColumnName: @\"BinRootCause\")\r\n                                      .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5637","RelatedDescription":"Open issue \"Dynamic Training Pipeline\" (#5637)"},{"Id":"818953302","IsPullRequest":false,"CreatedAt":"2021-03-01T15:03:14","Actor":"nubcake94","Number":"5633","RawContent":null,"Title":"Tensorflow prediction failure with MSTest","State":"open","Body":"### System information\r\n\r\n- **OS version/distro** Windows 10:\r\n- **.NET Version (eg., dotnet --info)** 4.8: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nLoaded Tensorflow model then called MakePrediction.\r\n\r\n- **What happened?**\r\n\r\nA Tensorflow.TensorflowException was raised\r\n\r\n- **What did you expect?**\r\n\r\nNo exception, expected functionality\r\n\r\n### Source code\r\n\r\n```\r\npublic float PredictOne(Bitmap image)\r\n        {\r\n            if(image == null)\r\n            {\r\n                throw new ArgumentNullException();\r\n            }\r\n\r\n            float[] floatArrayImage = BitmapToFloatArrayWithPreprocessing(image);\r\n            ImageInputData[] input = new ImageInputData[] { new ImageInputData() { serving_default_input_1 = floatArrayImage } };\r\n            var outScores = MakePrediction(input);\r\n\r\n            float result = 0;\r\n\r\n            foreach(var prediction in outScores)\r\n            {\r\n                result = prediction.StatefulPartitionedCall[0];\r\n            }\r\n\r\n            return result;\r\n        }\r\n```\r\n\r\n### Log\r\n\r\n```\r\nTest method HardhatDet.Tests.HardhatDetTest.PredictOneTestNoHardhat threw exception: \r\nSystem.InvalidOperationException: Splitter/consolidator worker encountered exception while consuming source data ---> Tensorflow.TensorflowException: Op type not registered 'FusedBatchNormV3' in binary running on GITLAB-RUNNER. Make sure the Op and Kernel are registered in the binary running in this process. Note that if you are loading a saved graph which used ops from tf.contrib, accessing (e.g.) `tf.contrib.resampler` should be done before importing the graph, as contrib ops are lazily registered when the module is first accessed.\r\n\t [[{{node StatefulPartitionedCall}}]]\r\n\t [[{{node StatefulPartitionedCall}}]]\r\n  Stack Trace:\r\n      at Microsoft.ML.TensorFlow.TensorFlowUtils.Runner.Run()\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.Mapper.UpdateCacheIfNeeded(Int64 position, ITensorValueGetter[] srcTensorGetters, String[] activeOutputColNames, OutputCache outputCache)\r\n   at Microsoft.ML.Transforms.TensorFlowTransformer.Mapper.<>c__DisplayClass9_0`1.<MakeGetter>b__4(VBuffer`1& dst)\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.InPipe.Impl`1.Fill()\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.<>c__DisplayClass7_1.<ConsolidateCore>b__2()\r\n--- End of inner exception stack trace ---\r\n    at Microsoft.ML.Data.DataViewUtils.Splitter.Batch.SetAll(OutPipe[] pipes)\r\n   at Microsoft.ML.Data.DataViewUtils.Splitter.Cursor.MoveNextCore()\r\n   at Microsoft.ML.Data.RootCursorBase.MoveNext()\r\n   at Microsoft.ML.Data.TypedCursorable`1.RowCursorImplementation.MoveNext()\r\n   at Microsoft.ML.PipeEngine`1.<RunPipe>d__3.MoveNext()\r\n   at HardhatDet.HardhatDetector.PredictOne(Bitmap image) in D:\\Gitlabrunner\\builds\\gb6xNTch\\0\\ftf\\door\\HardhatDet\\HardhatDetector.cs:line 55\r\n   at HardhatDet.Tests.HardhatDetTest.PredictOneTestNoHardhat() in D:\\Gitlabrunner\\builds\\gb6xNTch\\0\\ftf\\door\\GuardTests\\HardhatDetTest.cs:line 123\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5633","RelatedDescription":"Open issue \"Tensorflow prediction failure with MSTest\" (#5633)"},{"Id":"817620250","IsPullRequest":false,"CreatedAt":"2021-02-26T19:51:10","Actor":"justinormont","Number":"5632","RawContent":null,"Title":"Log message passing in AutoML child contexts","State":"open","Body":"### Method of passing log messages\r\nTo support the the ability to cancel runs, we needed a separate context for the child runs, and we pass the log messages from the child to parent. \r\n\r\nCurrent method of passing the messages is imperfect.\r\n\r\n**Current returned log format:**\r\n`\"[Source=AutoML, Kind=Trace] [Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Bottleneck Computation, Dataset used:      Train, Image Index: 3954\"`\r\n\r\nThis duplicates the header on the messages (`[Source=AutoML, Kind=Trace]` and `[Source=ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace]`),  and makes it difficult to filter/select to the wanted log lines.\r\n\r\n**Correct format:**\r\n`\"[Source=AutoML; ImageClassificationTrainer; ImageClassificationTrainer, Kind=Trace] Phase: Bottleneck Computation, Dataset used:      Train, Image Index: 3954\"`\r\n\r\nThis single header then lets you filter on the log line properties (e.g. `e.Source == \"xyz\"`) instead of parsing its free text.","Url":"https://github.com/dotnet/machinelearning/issues/5632","RelatedDescription":"Open issue \"Log message passing in AutoML child contexts\" (#5632)"},{"Id":"816591248","IsPullRequest":false,"CreatedAt":"2021-02-25T16:24:27","Actor":"lisahua","Number":"5630","RawContent":null,"Title":"[AnomalyDetection] ExpectedRange higher than expected?","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: master\r\n\r\n### Issue\r\n\r\n- **What did you do?** I apply anomaly detection with csv file below\r\n- **What happened?** Expected the expectedRange around 30K-40K, yet it's >50K.\r\n- **What did you expect?** same above\r\n![image](https://user-images.githubusercontent.com/3010893/109183600-f95b7700-7742-11eb-9338-9563e377a9d7.png)\r\n\r\n**Please assign the issue** to: https://github.com/guinao and https://github.com/mengaims\r\n\r\n### Source code / logs\r\n```\r\n            var anomalyDetectorOptions = new SrCnnEntireAnomalyDetectorOptions()\r\n            {\r\n                DetectMode = //WithMargin,\r\n                Sensitivity = 84,\r\n                DeseasonalityMode = SrCnnDeseasonalityMode.Median,\r\n                Period = -1,\r\n                Threshold =0.12,\r\n            };\r\n\r\n            anomalyResult = this.mlContext.AnomalyDetection.DetectEntireAnomalyBySrCnn(\r\n...\r\n            anomalyDetectorOptions);\r\n```\r\n\r\nInput data:\r\nValue,Date\r\n39800,2020-01-01 00:00:00\r\n35000,2020-02-01 00:00:00\r\n35600,2020-03-01 00:00:00\r\n31700,2020-04-01 00:00:00\r\n34900,2020-05-01 00:00:00\r\n35200,2020-06-01 00:00:00\r\n38900,2020-07-01 00:00:00\r\n63981,2020-08-01 00:00:00\r\n42000,2020-09-01 00:00:00\r\n39400,2020-10-01 00:00:00\r\n33700,2020-11-01 00:00:00\r\n37800,2020-12-01 00:00:00\r\n34200,2021-01-01 00:00:00\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5630","RelatedDescription":"Open issue \"[AnomalyDetection] ExpectedRange higher than expected?\" (#5630)"},{"Id":"814767755","IsPullRequest":true,"CreatedAt":"2021-02-23T19:31:48","Actor":"michaelgsharp","Number":"5628","RawContent":null,"Title":"Added initial design doc for cross platform","State":"open","Body":"This is the initial design/proposal doc for our cross platform approach.\r\n\r\nI would appreciate it if you could each review it and give me your feedback. ","Url":"https://github.com/dotnet/machinelearning/pull/5628","RelatedDescription":"Open PR \"Added initial design doc for cross platform\" (#5628)"},{"Id":"812638657","IsPullRequest":true,"CreatedAt":"2021-02-22T18:15:24","Actor":"4201104140","Number":"5627","RawContent":null,"Title":"Update Conversion.cs","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5627","RelatedDescription":"Closed or merged PR \"Update Conversion.cs\" (#5627)"},{"Id":"808478714","IsPullRequest":true,"CreatedAt":"2021-02-18T17:44:54","Actor":"esso23","Number":"5623","RawContent":null,"Title":"TimeSeries - fix confidence parameter type for some detectors (#4058)","State":"closed","Body":"Fixes https://github.com/dotnet/machinelearning/issues/4058\r\n\r\n- The public API exposed confidence parameters as int even though it's internally implemented as double\r\n- There was no workaround since all classes where double is used are internal\r\n- This caused major issues for software requiring high precision predictions (we are currently forced to use modified version of ML.NET in our applications)\r\n- This change to API should be backwards compatible since int can be passed to parameter of type double\r\n\r\nEdit: Not sure why the build is not passing. I was able to build the solution without any problems on my Win10 machine.\r\nEdit 2: Oh I see, it breaks the API. But as mentioned above, it should be backwards compatible, because it only replaces int with double.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5623","RelatedDescription":"Closed or merged PR \"TimeSeries - fix confidence parameter type for some detectors (#4058)\" (#5623)"},{"Id":"809316837","IsPullRequest":true,"CreatedAt":"2021-02-18T00:00:57","Actor":"Crabzmatic","Number":"5624","RawContent":null,"Title":"Offer suggestions for possibly mistyped label column names in AutoML (#5574)","State":"closed","Body":"Inconvenience is described in the issue: https://github.com/dotnet/machinelearning/issues/5574.\r\n\r\nClosest named column is found using the Levenshtein distance (https://en.wikipedia.org/wiki/Levenshtein_distance).\r\nAllowable distance is set to 2, as I think this is a good approximation of a small typo. Anyway, code is written in a way that allows this to be changed easily.\r\n\r\nAccompanying unit test is also written.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5624","RelatedDescription":"Closed or merged PR \"Offer suggestions for possibly mistyped label column names in AutoML (#5574)\" (#5624)"},{"Id":"809719895","IsPullRequest":false,"CreatedAt":"2021-02-16T23:19:52","Actor":"jpepg4","Number":"5626","RawContent":null,"Title":"Add way to customize when cross validation is used / easier way to use cross validation with AutoML ","State":"open","Body":"### System information\r\nAutoML 0.17.4\r\n\r\n### Issue\r\n\r\nAfter looking through the code it appears that cross validation will be used in AutoML IF you have less than 15,000 rows and you don't provide a custom validation set.  I would make a couple of recommendations:\r\n\r\n1) Document the 15,000 and the 10 fold somewhere beyond just in the source code.  It was more difficult than it should be to find those 2 numbers\r\n2) Allow the 15,000 and 10 fold to be customized.  I realize that the 10 fold can be changed with an override of the execute method. However it then returns a CrossValidationExperimentResult which requires extensive custom code to retrieve scores averaged over the folds vs. when AutoML automatically chooses to utilize cross validation and generates summary ExperimentResult  \r\n","Url":"https://github.com/dotnet/machinelearning/issues/5626","RelatedDescription":"Open issue \"Add way to customize when cross validation is used / easier way to use cross validation with AutoML \" (#5626)"},{"Id":"809536801","IsPullRequest":false,"CreatedAt":"2021-02-16T18:09:15","Actor":"JakeRadMSFT","Number":"5625","RawContent":null,"Title":"API Proposal: Update PFI API to be easier to use","State":"open","Body":"## Background and Motivation\r\n\r\nThe current PFI API is difficult to use. We've had a few issues opened to make it easier but we can use this issue to track a proposed API.\r\n\r\nPrior Issue:\r\nhttps://github.com/dotnet/machinelearning/issues/4216\r\n\r\nExample Support Issue to help developers use it:\r\nhttps://github.com/dotnet/machinelearning-modelbuilder/issues/1031#issuecomment-708033701\r\n\r\nThe main issue with the API is that it returns an array and it's not easy to get back to the column name/feature name from the index. \r\n\r\n``` C#\r\nVBuffer<ReadOnlyMemory<char>> nameBuffer = default;\r\n            preprocessedTrainData.Schema[\"Features\"].Annotations.GetValue(\"SlotNames\", ref nameBuffer); // NOTE: The column name \"Features\" needs to match the featureColumnName used in the trainer, the name \"SlotNames\" is always the same regardless of trainer.\r\n            var featureColumnNames = nameBuffer.DenseValues().ToList();\r\n\r\n```\r\n\r\nThe second biggest issue (which actually comes earlier in the process :). Is that it's hard to know what to pass for ISingleFeaturePredictionTransformer argument. Perhaps this is something we can figure out how to extract for them from the training pipeline?\r\n\r\n``` C#\r\n// Option 1: to extract predictor, requires to know the type in advance:\r\n            // var predictor = ((TransformerChain<RegressionPredictionTransformer<LightGbmRegressionModelParameters>>)mlModel).LastTransformer;\r\n\r\n            // Option 2: Should work always, as long as you _know_ the predictor is the last transformer in the chain.\r\n            var predictor = ((IEnumerable<ITransformer>)mlModel).Last();\r\n\r\n            // Option 3, need to load from disk the model first\r\n            //var path = @\"C:\\Users\\anvelazq\\Desktop\\PfiSample\\model.zip\";\r\n            //mlContext.Model.Save(mlModel, trainingDataView.Schema, path);\r\n            //var mlModel2 = mlContext.Model.Load(path, out var _);\r\n            //var predictor = ((TransformerChain<ITransformer>) mlModel2).LastTransformer;\r\n\r\n```\r\n If we can do that ... then we can just take in \"Microsoft.ML.IEstimator<Microsoft.ML.ITransformer> estimator\" similar to the CrossValidate APIs.\r\n \r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.ML\r\n{\r\n     public static class PermutationFeatureImportanceExtensions {\r\n\r\n     public static System.Collections.Immutable.ImmutableArray<Microsoft.ML.Data.RegressionMetricsStatistics> PermutationFeatureImportance<TModel> (this Microsoft.ML.RegressionCatalog catalog, Microsoft.ML.ISingleFeaturePredictionTransformer<TModel> predictionTransformer, Microsoft.ML.IDataView data, string labelColumnName = \"Label\", bool useFeatureWeightFilter = false, int? numberOfExamplesToUse = default, int permutationCount = 1) where TModel : class;\r\n+    public static System.Collections.Dictionary<string, Microsoft.ML.Data.RegressionMetricsStatistics> PermutationFeatureImportance<TModel> (this Microsoft.ML.RegressionCatalog catalog, Microsoft.ML.IEstimator<Microsoft.ML.ITransformer> estimator, Microsoft.ML.IDataView data, string labelColumnName = \"Label\", bool useFeatureWeightFilter = false, int? numberOfExamplesToUse = default, int permutationCount = 1) where TModel : class;\r\n     }\r\n```\r\nYou may find the [Framework Design Guidelines](https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/framework-design-guidelines-digest.md) helpful.\r\n\r\n## Usage Examples\r\nThis is how it works today: https://github.com/dotnet/machinelearning-modelbuilder/issues/1031#issuecomment-708033701\r\nBelow is how I think it should work. The key things to note is the similarities to CrossValidate API.\r\n\r\n``` C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing PfiSample.Model;\r\nusing System.Collections.Immutable;\r\n\r\nnamespace PfiSample.ConsoleApp\r\n{\r\n    public static class ModelBuilder\r\n    {\r\n        private static string TRAIN_DATA_FILEPATH = @\"C:\\Users\\anvelazq\\Desktop\\PfiSample\\PfiSample.ConsoleApp\\taxi-fare-train.csv\";\r\n        private static string MODEL_FILE = ConsumeModel.MLNetModelPath;\r\n\r\n        // Create MLContext to be shared across the model creation workflow objects \r\n        // Set a random seed for repeatable/deterministic results across multiple trainings.\r\n        private static MLContext mlContext = new MLContext(seed: 1);\r\n\r\n        public static void CreateModel()\r\n        {\r\n            // Load Data\r\n            IDataView trainingDataView = mlContext.Data.LoadFromTextFile<ModelInput>(\r\n                                            path: TRAIN_DATA_FILEPATH,\r\n                                            hasHeader: true,\r\n                                            separatorChar: ',',\r\n                                            allowQuoting: true,\r\n                                            allowSparse: false);\r\n\r\n            // Build training pipeline and Train Model\r\n\r\n            // Data process configuration with pipeline data transformations \r\n            var dataProcessPipeline = mlContext.Transforms.Categorical.OneHotEncoding(new[] { new InputOutputColumnPair(\"vendor_id\", \"vendor_id\"), new InputOutputColumnPair(\"payment_type\", \"payment_type\") })\r\n                                      .Append(mlContext.Transforms.Concatenate(\"Features\", new[] { \"vendor_id\", \"payment_type\", \"rate_code\", \"passenger_count\", \"trip_time_in_secs\", \"trip_distance\" }));\r\n            // Set the training algorithm \r\n            var trainer = mlContext.Regression.Trainers.LightGbm(labelColumnName: \"fare_amount\", featureColumnName: \"Features\");\r\n\r\n            IEstimator<ITransformer> trainingPipeline = dataProcessPipeline.Append(trainer);\r\n           \r\n           ITransformer model = trainingPipeline.Fit(trainingDataView);\r\n            \r\n            // Calculate PFI\r\n            CalculatePFI(mlContext, trainingDataView, trainingPipeline);\r\n            \r\n            // Evaluate quality of Model\r\n            Evaluate(mlContext, trainingDataView, trainingPipeline);\r\n\r\n            // Save model\r\n            SaveModel(mlContext, mlModel, MODEL_FILE, trainingDataView.Schema);\r\n        }\r\n\r\n\r\n        private static void Evaluate(MLContext mlContext, IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)\r\n        {\r\n            // Cross-Validate with single dataset (since we don't have two datasets, one for training and for evaluate)\r\n            // in order to evaluate and get the model's accuracy metrics\r\n            Console.WriteLine(\"=============== Cross-validating to get model's accuracy metrics ===============\");\r\n            var crossValidationResults = mlContext.Regression.CrossValidate(trainingDataView, trainingPipeline, numberOfFolds: 5, labelColumnName: \"fare_amount\");\r\n            PrintRegressionFoldsAverageMetrics(crossValidationResults);\r\n        }\r\n\r\n        private static void CalculatePFI(MLContext mlContext, IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)\r\n        {\r\n            \r\n\r\n            Dictionary<string, RegressionMetricsStatistics> permutationFeatureImportance =\r\n                mlContext\r\n                .Regression\r\n                .PermutationFeatureImportance(trainingPipeline, trainingDataView, permutationCount: 1, labelColumnName: \"fare_amount\");\r\n\r\n\r\n\r\n            Console.WriteLine(\"Feature\\tPFI\");\r\n            foreach (KeyValuePair<string, RegressionMetricsStatistics> entry in permutationFeatureImportance )\r\n            {\r\n                Console.WriteLine($\"{entry.Key}\\t{entry.Value.RSquared.Mean:F6}\");\r\n            }\r\n        }\r\n\r\n        private static void SaveModel(MLContext mlContext, ITransformer mlModel, string modelRelativePath, DataViewSchema modelInputSchema)\r\n        {\r\n            // Save/persist the trained model to a .ZIP file\r\n            Console.WriteLine($\"=============== Saving the model  ===============\");\r\n            mlContext.Model.Save(mlModel, modelInputSchema, GetAbsolutePath(modelRelativePath));\r\n            Console.WriteLine(\"The model is saved to {0}\", GetAbsolutePath(modelRelativePath));\r\n        }\r\n\r\n        public static string GetAbsolutePath(string relativePath)\r\n        {\r\n            FileInfo _dataRoot = new FileInfo(typeof(Program).Assembly.Location);\r\n            string assemblyFolderPath = _dataRoot.Directory.FullName;\r\n\r\n            string fullPath = Path.Combine(assemblyFolderPath, relativePath);\r\n\r\n            return fullPath;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Alternative Designs\r\nIf there is any opposition or technical challenges for making PFI have a similar API to CrossValidate ... I'm open to alternatives but I don't know the ML.NET APIs well enough to come up with other patterns.\r\n\r\n## Risks\r\nI think the biggest risk/challenge is that folks can do a lot of things with pipelines and models to make them incompatible with PFI. I believe it takes exponentially longer to calculate PFI relative to number of columns. Certain things like OneHotHash can create hundreds of columns ...\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5625","RelatedDescription":"Open issue \"API Proposal: Update PFI API to be easier to use\" (#5625)"},{"Id":"808156562","IsPullRequest":true,"CreatedAt":"2021-02-15T04:32:12","Actor":"dhilmathy","Number":"5622","RawContent":null,"Title":"Removed excessive verbose logging - Info Level","State":"open","Body":"Updated excessive info logging from `Info` to `Trace`. Fixes #5598.\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5622","RelatedDescription":"Open PR \"Removed excessive verbose logging - Info Level\" (#5622)"},{"Id":"806831531","IsPullRequest":false,"CreatedAt":"2021-02-11T23:36:50","Actor":"caitisgreat","Number":"5621","RawContent":null,"Title":"More Parameterized Column Names for .CrossValidate()","State":"open","Body":"### System information\r\n\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.100\r\n Commit:    5044b93829\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0\r\n  Commit:  cf258a14b7\r\n\r\n.NET SDKs installed:\r\n  3.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nML.NET Package Version: v1.5.2\r\n\r\n### Request\r\n\r\nWould it be possible to include the same parameterized column names from the Evaluate method (Multiclass/Binary Classifiers) in the CrossValidate method?  I'm performing a bunch of column manipulation in order to distinguish elements in a sequenced ML pipeline (performing multiclass classification then sentiment analysis)\r\n\r\n### Source code / logs\r\n\r\n![image](https://user-images.githubusercontent.com/26882453/107712748-cd3df180-6c7e-11eb-8dae-44572026e596.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5621","RelatedDescription":"Open issue \"More Parameterized Column Names for .CrossValidate()\" (#5621)"},{"Id":"806331180","IsPullRequest":false,"CreatedAt":"2021-02-11T12:08:05","Actor":"thoron","Number":"5620","RawContent":null,"Title":"System.OperationCanceledException after AutoML experiment","State":"open","Body":"### System information\r\n\r\n> .NET SDK (reflecting any global.json):\r\n>  Version:   5.0.103\r\n>  Commit:    72dec52dbd\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     Windows\r\n>  OS Version:  10.0.19042\r\n>  OS Platform: Windows\r\n>  RID:         win10-x64\r\n>  Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.103\\\r\n> \r\n> Host (useful for support):\r\n>   Version: 5.0.3\r\n>   Commit:  c636bbdc8a\r\n> \r\n> .NET SDKs installed:\r\n>   5.0.103 [C:\\Program Files\\dotnet\\sdk]\r\n> \r\n> .NET runtimes installed:\r\n>   Microsoft.AspNetCore.All 2.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.App 2.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 3.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 5.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.NETCore.App 2.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 3.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 5.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.WindowsDesktop.App 3.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n>   Microsoft.WindowsDesktop.App 5.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n### Issue\r\nAfter an experiment ended (TimeOut elapsed, with `token: CancellationToken.None`) \r\nSometimes the access of `experimentResult.BestRun.Estimator.Fit(_exDataView)` will raise `System.OperationCanceledException`.\r\n\r\n- **What happened?**\r\n\r\n```\r\n System.OperationCanceledException: Operation was canceled.\r\n      at Microsoft.ML.Runtime.Contracts.CheckAlive(IHostEnvironment env)\r\n  at Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Train(IHostEnvironment env, IChannel ch, ColInfo[] infos, IDataView keyData, ColumnOptionsBase[] columns, IDataView trainingData, Boolean autoConvert)\r\n  at Microsoft.ML.Transforms.ValueToKeyMappingTransformer..ctor(IHostEnvironment env, IDataView input, ColumnOptionsBase[] columns, IDataView keyData, Boolean autoConvert)\r\n  at Microsoft.ML.Transforms.ValueToKeyMappingEstimator.Fit(IDataView input)\r\n  at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n  at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n  at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n  at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n```\r\n\r\n- **What did you expect?**\r\n\r\nThis exception does not occur all the time when accessing `BestRun` prop.\r\n\r\n### Source code / logs\r\n```\r\nvar experimentSettings = new MulticlassExperimentSettings\r\n{\r\n    MaxExperimentTimeInSeconds = _maxExperimentTimeInSeconds,\r\n    CancellationToken = pManager.Token, // CancellationToken.None\r\n    OptimizingMetric = MulticlassClassificationMetric.MacroAccuracy\r\n}\r\nvar experiment= _mlContext.Auto().CreateMulticlassClassificationExperiment(experimentSettings);\r\nvar experimentResult= experiment.Execute(_trainDataView, progressHandler: experimentProgress,\r\n                preFeaturizer: _mlContext.Transforms.DropColumns(\"LabelFeaturized\"));\r\nexperimentResult.BestRun.Estimator.Fit(_trainDataView);\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/5620","RelatedDescription":"Open issue \"System.OperationCanceledException after AutoML experiment\" (#5620)"},{"Id":"806123829","IsPullRequest":false,"CreatedAt":"2021-02-11T06:44:17","Actor":"daryalove","Number":"5619","RawContent":null,"Title":"Error 'Could not find feature column 'Image' (Parameter 'inputSchema')' converting models to ONNX trained with the ML.NET Image Classification API","State":"open","Body":"Hi, \r\n\r\nI am trying to convert a trained ML.NET model (model.pb) into onnx format. I need to convert the trained model to onnx format for Object Detection Algorithm: https://docs.microsoft.com/ru-ru/dotnet/machine-learning/tutorials/object-detection-onnx\r\n\r\nI used this method for converting:\r\n`mlContext.Model.ConvertToOnnx(trainedModel, imageData, writingStream);`\r\n\r\nBut I caught the error: Could not find feature column 'Image' (Parameter 'inputSchema')\r\nCan I convert the ML.NET model into onnx format using ML.OnnxConverter? Or are there any ways of creating the custom object detection model (without Azure)? Please, help me with this issue.\r\n\r\nMy source code:\r\n\r\n`using Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Vision;\r\nusing RopeDetection.Shared;\r\nusing RopeDetection.Shared.DataModels;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing static Microsoft.ML.DataOperationsCatalog;\r\n\r\nnamespace RopeDetection.Train\r\n{\r\n    public class ModelBuilder\r\n    {\r\n        private static string projectDirectory = System.IO.Path.GetFullPath(System.IO.Path.Combine(AppContext.BaseDirectory, \"../../../../\"));\r\n        private static string workspaceRelativePath = System.IO.Path.Combine(projectDirectory, \"RopeDetection.Train\", \"workspace\");\r\n        private static string assetsRelativePath = System.IO.Path.Combine(projectDirectory, \"RopeDetection.Train\", \"assets\");\r\n\r\n        private static string modelDirectory = Path.GetFullPath(System.IO.Path.Combine(AppContext.BaseDirectory, \"../../../../\"));\r\n        private static string path = System.IO.Path.Combine(modelDirectory, \"RopeDetection.Predict\", \"MLNETModel\", \"model2.zip\");\r\n        private static string onnx_path = System.IO.Path.Combine(modelDirectory, \"RopeDetection.Predict\", \"MLNETModel\", \"model.onnx\");\r\n        public static string ModelPath = \"\";\r\n        \r\n        private static IDataView testSet;\r\n        private static ITransformer trainedModel;\r\n        private static IDataView shuffledData;\r\n\r\n        private static MLContext mlContext = new MLContext(seed: 1);\r\n      \r\n\r\n        public static void CreateModel(string modelId = null)\r\n        {\r\n            try\r\n            {\r\n               \r\n                IEnumerable<ImageData> images = FileUtils.LoadImagesFromDirectory(folder: assetsRelativePath, useFolderNameAsLabel: true);\r\n            \r\n                \r\n                IDataView imageData = mlContext.Data.LoadFromEnumerable(images);\r\n                var DataList = images.ToList();\r\n              \r\n                shuffledData = mlContext.Data.ShuffleRows(imageData);\r\n\r\n                // Build training pipeline\r\n                IEstimator<ITransformer> trainingPipeline = BuildTrainingPipeline(mlContext);\r\n\r\n               \r\n                IDataView preProcessedData = trainingPipeline\r\n                        .Fit(shuffledData)\r\n                        .Transform(shuffledData);\r\n\r\n                \r\n\r\n                TrainTestData trainSplit = mlContext.Data.TrainTestSplit(data: preProcessedData, testFraction: 0.3);\r\n                TrainTestData validationTestSplit = mlContext.Data.TrainTestSplit(trainSplit.TestSet);\r\n\r\n                IDataView trainSet = trainSplit.TrainSet;\r\n                IDataView validationSet = validationTestSplit.TrainSet;\r\n                testSet = validationTestSplit.TestSet;\r\n\r\n                // Defining the learning pipeline\r\n                var classifierOptions = new ImageClassificationTrainer.Options()\r\n                {\r\n                    FeatureColumnName = \"Image\",\r\n                    LabelColumnName = \"LabelAsKey\",\r\n                    ValidationSet = validationSet,\r\n                    Arch = ImageClassificationTrainer.Architecture.ResnetV2101,\r\n                    MetricsCallback = (metrics) => Console.WriteLine(metrics),\r\n                    TestOnTrainSet = false,\r\n                    ReuseTrainSetBottleneckCachedValues = true,\r\n                    ReuseValidationSetBottleneckCachedValues = true,\r\n                    WorkspacePath = workspaceRelativePath,\r\n                };\r\n\r\n                trainingPipeline = mlContext.MulticlassClassification.Trainers.ImageClassification(classifierOptions)\r\n        .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\n\r\n                // Train Model\r\n                trainedModel = TrainModel(trainingPipeline, trainSet);\r\n\r\n                // Create Stream object via Constructor of FileStream.\r\n                // FileMode.Create: Create file, if it already exists, it will be overwritten.\r\n                Stream writingStream = new FileStream(onnx_path, FileMode.Create);\r\n                mlContext.Model.ConvertToOnnx(trainedModel, imageData, writingStream);\r\n\r\n                // Evaluate quality of Model\r\n                //Evaluate(mlContext, imageData, trainingPipeline);\r\n\r\n                // Save model\r\n                SaveModel(trainSet, modelId);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                throw new Exception(ex.Message);\r\n            }\r\n        }`\r\n        `public static IEstimator<ITransformer> BuildTrainingPipeline(MLContext mlContext)\r\n        {\r\n            \r\n            IEstimator<ITransformer> preprocessingPipeline = mlContext.Transforms.Conversion.MapValueToKey(\r\n                inputColumnName: \"Label\",\r\n                outputColumnName: \"LabelAsKey\")\r\n            .Append(mlContext.Transforms.LoadRawImageBytes(\r\n                outputColumnName: \"Image\",\r\n                imageFolder: assetsRelativePath,\r\n                inputColumnName: \"ImagePath\"));\r\n\r\n          \r\n            return preprocessingPipeline;\r\n        }\r\n\r\n        public static ITransformer TrainModel(IEstimator<ITransformer> trainingPipeline, IDataView trainSet)\r\n        {\r\n            Console.WriteLine(\"=============== Training  model ===============\");\r\n\r\n            trainedModel = trainingPipeline.Fit(trainSet);\r\n\r\n            Console.WriteLine(\"=============== End of training process ===============\");\r\n            return trainedModel;\r\n        }`\r\n\r\n`private static void SaveModel(IDataView trainSet, string modelId)\r\n        {\r\n            // Save/persist the trained model to a .ZIP file\r\n            Console.WriteLine($\"=============== Saving the model  ===============\");\r\n\r\n            mlContext.Model.Save(trainedModel, trainSet.Schema, path);\r\n\r\n            if (!string.IsNullOrEmpty(modelId))\r\n            {\r\n                ModelPath = Path.Combine(Directory.GetCurrentDirectory(), @\"wwwroot\\files\\trained_models\", modelId + \".zip\");\r\n                mlContext.Model.Save(trainedModel, trainSet.Schema, ModelPath);\r\n            }\r\n     \r\n            Console.WriteLine(\"The model is saved to {0} \", path);\r\n        }\r\n`\r\n\r\n### System information\r\n\r\n- Windows 10 Pro:\r\n- .NET Core SDK:\r\n Version:   3.1.403\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5619","RelatedDescription":"Open issue \"Error 'Could not find feature column 'Image' (Parameter 'inputSchema')' converting models to ONNX trained with the ML.NET Image Classification API\" (#5619)"}],"ResultType":"GitHubIssue"}},"RunOn":"2021-03-10T05:30:30.0976052Z","RunDurationInMilliseconds":685}