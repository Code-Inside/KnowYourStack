{"Data":{"GitHub":{"Issues":[{"Id":"2223818875","IsPullRequest":true,"CreatedAt":"2024-04-04T02:38:23","Actor":"asmirnov82","Number":"7116","RawContent":null,"Title":"Extend dataframe orderby method to allow define null values ordering","State":"closed","Body":"Fixes  #7102 \r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7116","RelatedDescription":"Closed or merged PR \"Extend dataframe orderby method to allow define null values ordering\" (#7116)"},{"Id":"2215740418","IsPullRequest":true,"CreatedAt":"2024-04-03T23:59:34","Actor":"tarekgh","Number":"7110","RawContent":null,"Title":"More tokenizer's APIs cleanup","State":"closed","Body":"This change include the following:\r\n- The decoder abstracted class has been removed. During the implementation of Tiktoken, it became evident that the decoder abstracted interface will not be suited for decoding operation in models like Tiktoken. This is because this specific tokenizer requires decoding the IDs collectively rather than decoding each ID separately. We have already introduced the Decode method in the Model abstraction, which has proven effective and will also benefit all tokenizers, as tokenizer models can now leverage their internal state to perform more sophisticated decoding. The changes made include adding decoding code for the Bpe model, resulting in significantly improved results compared to before.\r\n- Addressing the handling of unknown tokens in the Bpe model to ensure consistency with the approach used in the Huggingface Bpe model.","Url":"https://github.com/dotnet/machinelearning/pull/7110","RelatedDescription":"Closed or merged PR \"More tokenizer's APIs cleanup\" (#7110)"},{"Id":"2224087389","IsPullRequest":false,"CreatedAt":"2024-04-03T23:02:23","Actor":"jiafatom","Number":"7117","RawContent":null,"Title":"LightGbm does not exist in namespace Microsoft.ML.Trainers","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n - ML.NET Version: 3.0.1\r\n - .NET Version: .Net Framework 4.7.1\r\n\r\n**Describe the bug**\r\nCreate a console app, in the cs file, try to \r\nusing Microsoft.ML.Trainers.LightGbm;\r\nHowever, it says LightGbm does not exist in namespace.\r\n![lightgbm](https://github.com/dotnet/machinelearning/assets/30608893/86eb27bc-5131-4619-a4b8-a86aa78b9749)\r\n\r\nThanks.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7117","RelatedDescription":"Open issue \"LightGbm does not exist in namespace Microsoft.ML.Trainers\" (#7117)"},{"Id":"2199388717","IsPullRequest":false,"CreatedAt":"2024-04-03T19:50:45","Actor":"asmirnov82","Number":"7089","RawContent":null,"Title":"DataFrame NullCount property of StringDataFrameColumn works incorrectly","State":"closed","Body":"**Describe the bug**\r\nDataFrame NullCount property of StringDataFrameColumn works incorrectly in several scenarios:\r\n\r\n1. Using constructor with length property\r\n```cs \r\nvar strCol = new StringDataFrameColumn(\"String Column\", 5);\r\n```\r\nActual behavior: creates string column with 5 null elements, however NullCount property is set to 0\r\nExpected behavior: NullCount property is set to 5\r\n\r\n2. Clone method\r\n```cs \r\n//creates string column with 3 null values and NullCount 3\r\nvar strCol = new StringDataFrameColumn(\"String Column\");\r\n\r\nfor (int i = 0; i < 3; i++)\r\n    strCol.Append(null);\r\n\r\n//Clone\r\nvar clonedColumn = strCol.Clone();\r\n```\r\n\r\nActual behavior: NullCount of cloned column is 0\r\nExpected behavior: NullCount property is set to 5\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7089","RelatedDescription":"Closed issue \"DataFrame NullCount property of StringDataFrameColumn works incorrectly\" (#7089)"},{"Id":"2199449326","IsPullRequest":true,"CreatedAt":"2024-04-03T19:50:44","Actor":"asmirnov82","Number":"7090","RawContent":null,"Title":"Fix DataFrame NullCount property of StringDataFrameColumn","State":"closed","Body":"Fixes #7089\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7090","RelatedDescription":"Closed or merged PR \"Fix DataFrame NullCount property of StringDataFrameColumn\" (#7090)"},{"Id":"2202776179","IsPullRequest":false,"CreatedAt":"2024-04-03T19:41:58","Actor":"asmirnov82","Number":"7101","RawContent":null,"Title":"Override ToString() method of DataFrame column to provide list of values ","State":"closed","Body":"Override ToString() method of DataFrame column to provide list of values (similar way as DataFrame.ToString())\r\n\r\nAdd method ToString(long rowsToShow) that allows to define max amount of rows returned by the method (and exceed default limit of 25 rows). ","Url":"https://github.com/dotnet/machinelearning/issues/7101","RelatedDescription":"Closed issue \"Override ToString() method of DataFrame column to provide list of values \" (#7101)"},{"Id":"2203063805","IsPullRequest":true,"CreatedAt":"2024-04-03T19:41:57","Actor":"asmirnov82","Number":"7103","RawContent":null,"Title":"Implement ToString() method for DataFrameColumn class","State":"closed","Body":"Fixes #7101 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/7103","RelatedDescription":"Closed or merged PR \"Implement ToString() method for DataFrameColumn class\" (#7103)"},{"Id":"2221368696","IsPullRequest":true,"CreatedAt":"2024-04-03T18:09:24","Actor":"tarekgh","Number":"7114","RawContent":null,"Title":"Add more required Tokenizer APIs","State":"closed","Body":"The change is adding two new Tokenizer APIs:\r\n- Allow creating the Tiktoken tokenizer using the encoding name similar of what are doing when creating the tokenizer with the model name.\r\n- Introduce Tokenizer.EncodeToIds overload which can allow specifying the max token count to encode. This will help in some scenario spotted in some users code. ","Url":"https://github.com/dotnet/machinelearning/pull/7114","RelatedDescription":"Closed or merged PR \"Add more required Tokenizer APIs\" (#7114)"},{"Id":"2221709839","IsPullRequest":false,"CreatedAt":"2024-04-03T01:21:20","Actor":"johnnyg","Number":"7115","RawContent":null,"Title":"DataFrame doesn't decode boolean arrays correctly from Arrow","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version:  0.21.1\r\n - .NET Version: .NET 5.0\r\n\r\n**Describe the bug**\r\nCreating a dataframe from an arrow record batch where a column is a boolean array produces incorrect results (and occasionally even throws exceptions).\r\n\r\n**To Reproduce**\r\nRun:\r\n```csharp\r\npublic void DataFrameDecodeBooleans()\r\n{\r\n    BooleanArray boolArray = new BooleanArray.Builder().AppendNull().Append(false).Append(true).Build();\r\n    Field boolField = new Field(\"col\", BooleanType.Default, true);\r\n    Schema schema = new Schema(new[] { boolField }, null);\r\n    RecordBatch batch = new RecordBatch(schema, new IArrowArray[] { boolArray }, boolArray.Length);\r\n    DataFrame df = DataFrame.FromArrowRecordBatch(batch);\r\n    DataFrameColumn boolCol = df[\"col\"];\r\n    Assert.Equal(boolArray.Length, boolCol.Length);\r\n    for (int row = 0; row < boolArray.Length; row++)\r\n    {\r\n        Assert.Equal(boolArray.GetValue(row), boolCol[row]);\r\n    }\r\n}\r\n```\r\n\r\n**Expected behavior**\r\nAbove test passes\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7115","RelatedDescription":"Open issue \"DataFrame doesn't decode boolean arrays correctly from Arrow\" (#7115)"},{"Id":"2220965514","IsPullRequest":false,"CreatedAt":"2024-04-02T16:38:51","Actor":"cwford","Number":"7113","RawContent":null,"Title":"How to get actual topics used to make predictions by LDA","State":"open","Body":"\r\nWhen running the LatentDirichletAllocation.cs sample all that I receive are prediction (correlation) values for the three topics. I do not receive, nor can I find a way to retrieve, the actual three topics ML.NET LDA uses to make predictions.\r\n\r\nCan someone help me determine how to get the actual topics, as text strings, which ML.NET uses when performing a Latent Dirichlet Allocation against a set of sample documents?\r\n\r\nThank you.\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for learn.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 87b08415-641d-4246-280f-b19e3baa8857\r\n* Version Independent ID: 30d278f5-27f7-eee4-141f-d05dc1d34bfa\r\n* Content: [TextCatalog.LatentDirichletAllocation Method (Microsoft.ML)](https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.textcatalog.latentdirichletallocation?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML/TextCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/TextCatalog.xml)\r\n* Service: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/7113","RelatedDescription":"Open issue \"How to get actual topics used to make predictions by LDA\" (#7113)"},{"Id":"2220952802","IsPullRequest":false,"CreatedAt":"2024-04-02T16:33:36","Actor":"cwford","Number":"7112","RawContent":null,"Title":"Get Topics Used By LDA?","State":"open","Body":"Using ML.NET 3.0 on Windows 11.\r\n\r\nHow do I get the topics used by the Latent Dirichlet Allocation when predicting (correlating) the relationship between a set of documents and a set of topics?\r\n\r\nWhen I run the LatentDirichletAllocation.cs sample all I get are document correlations for three topics but I can see no way to actually get the topics, as text strings, that are used to make the predictions (correlations). There must be some way to know what topics ML.NET LDA has determined to use to make predictions.\r\n\r\nCan someone help me find a way to return as a text string each topic ML.NET LDA uses to make predictions?\r\n\r\nThank you in advance.","Url":"https://github.com/dotnet/machinelearning/issues/7112","RelatedDescription":"Open issue \"Get Topics Used By LDA?\" (#7112)"},{"Id":"2215830595","IsPullRequest":true,"CreatedAt":"2024-03-29T21:52:53","Actor":"tarekgh","Number":"7111","RawContent":null,"Title":"Add Tiktoken's missing model names","State":"closed","Body":"Adding `gpt-35-turbo` model names used by Azure deployment.","Url":"https://github.com/dotnet/machinelearning/pull/7111","RelatedDescription":"Closed or merged PR \"Add Tiktoken's missing model names\" (#7111)"},{"Id":"2212071578","IsPullRequest":true,"CreatedAt":"2024-03-29T01:12:58","Actor":"tarekgh","Number":"7109","RawContent":null,"Title":"Update the tokenizer migration guide","State":"closed","Body":"Updating the tokenizer migration guide to reflect the changes made in the tokenizer library and its public APIs.","Url":"https://github.com/dotnet/machinelearning/pull/7109","RelatedDescription":"Closed or merged PR \"Update the tokenizer migration guide\" (#7109)"},{"Id":"2202300231","IsPullRequest":false,"CreatedAt":"2024-03-27T22:29:00","Actor":"stephentoub","Number":"7099","RawContent":null,"Title":"Inconsistent capitalization of tiktoken in public API","State":"closed","Body":"eg \"TikTokenPreTokenizer\" vs \"Tiktoken\"","Url":"https://github.com/dotnet/machinelearning/issues/7099","RelatedDescription":"Closed issue \"Inconsistent capitalization of tiktoken in public API\" (#7099)"},{"Id":"2200689238","IsPullRequest":false,"CreatedAt":"2024-03-27T22:19:12","Actor":"ericstj","Number":"7095","RawContent":null,"Title":"Tokenizers tests fail to download tokenizer data","State":"closed","Body":"## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=611349\r\nBuild error leg or test failing: Microsoft.ML.Tokenizers.Tests.TiktokenTests.TestCreationUsingModel\r\nPull request: https://github.com/dotnet/machinelearning/pull/7090\r\n<!-- Error message template  -->\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n<!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->\r\n\r\n(build analysis isn't matching up to the instance failure of the theory, so including console log)\r\n```json\r\n{\r\n  \"ErrorMessage\": \"at Microsoft.ML.Tokenizers.Helpers.GetStream(HttpClient client, String url)\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n```\r\nUnhandled exception. System.Net.Http.HttpRequestException: An error occurred while sending the request.\r\n ---> System.IO.IOException: Unable to read data from the transport connection: Connection reset by peer.\r\n ---> System.Net.Sockets.SocketException (54): Connection reset by peer\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource<System.Int32>.GetResult(Int16 token)\r\n   at System.Net.Security.SslStream.EnsureFullTlsFrameAsync[TIOAdapter](TIOAdapter adapter)\r\n   at System.Net.Security.SslStream.ReadAsyncInternal[TIOAdapter](TIOAdapter adapter, Memory`1 buffer)\r\n   at System.Net.Http.HttpConnection.InitialFillAsync(Boolean async)\r\n   at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithVersionDetectionAndRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.GetStreamAsyncCore(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.ML.Tokenizers.Helpers.GetStream(HttpClient client, String url) in /Users/runner/work/1/s/src/Microsoft.ML.Tokenizers/Utils/Helpers.netstandard.cs:line 29\r\n   at Microsoft.ML.Tokenizers.Tiktoken.CreateTokenizerForModel(String modelName, IReadOnlyDictionary`2 extraSpecialTokens, Normalizer normalizer) in /Users/runner/work/1/s/src/Microsoft.ML.Tokenizers/Model/Tiktoken.cs:line 820\r\n   at Microsoft.ML.Tokenizers.Tokenizer.CreateTiktokenForModel(String modelName, IReadOnlyDictionary`2 extraSpecialTokens, Normalizer normalizer) in /Users/runner/work/1/s/src/Microsoft.ML.Tokenizers/Tokenizer.cs:line 330\r\n   at Microsoft.ML.Tokenizers.Tests.TiktokenTests.<>c.<TestCreationUsingModel>b__30_1(String name) in /Users/runner/work/1/s/test/Microsoft.ML.Tokenizers.Tests/TitokenTests.cs:line 331\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.DotNet.RemoteExecutor.Program.Main(String[] args) in /_/src/Microsoft.DotNet.RemoteExecutor/src/Program.cs:line 97\r\n```\r\n\r\n\r\n<!--Known issue error report start -->\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[611349](https://dev.azure.com/dnceng-public/public/_build/results?buildId=611349)|dotnet/machinelearning|[Microsoft.ML.Tokenizers.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=611349&view=ms.vss-test-web.build-test-results-tab&runId=14923776&resultId=101936)|dotnet/machinelearning#7090|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|1|1|\r\n<!--Known issue error report end -->\r\n<!-- Known issue validation start -->\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=611349\r\n**Error message validated:** `[at Microsoft.ML.Tokenizers.Helpers.GetStream(HttpClient client, String url)`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 3/21/2024 9:21:47 PM UTC\r\n<!-- Known issue validation end -->","Url":"https://github.com/dotnet/machinelearning/issues/7095","RelatedDescription":"Closed issue \"Tokenizers tests fail to download tokenizer data\" (#7095)"},{"Id":"2201455140","IsPullRequest":true,"CreatedAt":"2024-03-27T22:19:11","Actor":"tarekgh","Number":"7098","RawContent":null,"Title":"Embed Tiktoken data files","State":"closed","Body":"Fixes https://github.com/dotnet/machinelearning/issues/7095\r\n\r\nThis change is embedding the Tiktoken tokenizer data files to avoid downloads at runtime. The files are embedded in compressed form to reduce the size and we decompress the data at runtime.\r\n\r\n| File | Compressed Size |\r\n|------------------|---------------------:|\r\n| cl100k_base.tiktoken.zip | 784541 bytes |\r\n| gpt2.tiktoken.zip | 370795 bytes |\r\n| p50k_base.tiktoken.zip | 370930 bytes |\r\n| r50k_base.tiktoken.zip | 370795 bytes |\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7098","RelatedDescription":"Closed or merged PR \"Embed Tiktoken data files\" (#7098)"},{"Id":"2206536388","IsPullRequest":true,"CreatedAt":"2024-03-27T18:24:30","Actor":"tarekgh","Number":"7108","RawContent":null,"Title":"Tokenizer's APIs Polishing","State":"closed","Body":"- Eliminate the perplexing specialTokens flag parameter from all APIs.\r\n- Standardize the casing of the Tiktoken name throughout the entire codebase and public interfaces.\r\n- Modify Model.Encode to operate with spans instead of strings. This change maintains consistency across all Model APIs and enables the possibility of incorporating Tokenizer's APIs that also operate with spans in the future.\r\n- Introduce support for precise Last/IndexOf functionality. This enhancement enables the retrieval of indices even within pre-tokenized unit strings passed to the Model. For instance, the Llama model, which does not pre-tokenize, requires this capability to be supported effectively.","Url":"https://github.com/dotnet/machinelearning/pull/7108","RelatedDescription":"Closed or merged PR \"Tokenizer's APIs Polishing\" (#7108)"},{"Id":"2203587977","IsPullRequest":true,"CreatedAt":"2024-03-25T19:26:57","Actor":"GrabYourPitchforks","Number":"7105","RawContent":null,"Title":"Add CodeQL exclusions file","State":"closed","Body":"To make TSA and the new pipelines happy. This is the only submodule I found in this repo, but if there are others, they should be similarly listed here so they're excluded from analysis.\r\n\r\n/cc @ericstj @tarekgh \r\n","Url":"https://github.com/dotnet/machinelearning/pull/7105","RelatedDescription":"Closed or merged PR \"Add CodeQL exclusions file\" (#7105)"},{"Id":"2206414932","IsPullRequest":false,"CreatedAt":"2024-03-25T18:31:10","Actor":"asmirnov82","Number":"7107","RawContent":null,"Title":"Make the Apply and ApplyElementwise method available to StringDataFrame column","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/7107","RelatedDescription":"Open issue \"Make the Apply and ApplyElementwise method available to StringDataFrame column\" (#7107)"},{"Id":"2205437630","IsPullRequest":false,"CreatedAt":"2024-03-25T10:43:39","Actor":"ManuK001","Number":"7106","RawContent":null,"Title":"ML.net models binaries that runs locally  in Windows 2019 server throws exception","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10 \r\n - ML.NET Version: 1.5\r\n - .NET Version: .NET 4.7.2 and .NET 6\r\n\r\n**Describe the bug**\r\n![Uploading ML Error.png…]()\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create .net application in Visual studio 2022 with .NET 4.7.2 \r\n2. Build the project to get binaries\r\n3. Test .exe from binaries in .net to test locally\r\n4.  then move the files to Windows 2019 server where visual studio is installed already.\r\n\r\n**Expected behavior**\r\nSame .exe that works on local machine should work on Windows 2019 server too.\r\n\r\n**Screenshots, Code, Sample Projects**\r\n\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7106","RelatedDescription":"Open issue \"ML.net models binaries that runs locally  in Windows 2019 server throws exception\" (#7106)"},{"Id":"2203429826","IsPullRequest":true,"CreatedAt":"2024-03-22T22:59:33","Actor":"tarekgh","Number":"7104","RawContent":null,"Title":"Update PACKAGE.md to include Llama info","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/7104","RelatedDescription":"Closed or merged PR \"Update PACKAGE.md to include Llama info\" (#7104)"},{"Id":"2200756255","IsPullRequest":true,"CreatedAt":"2024-03-22T16:02:44","Actor":"ericstj","Number":"7096","RawContent":null,"Title":"Don't trigger PR validation builds for docs only changes","State":"closed","Body":"This applies the same filters we use in runtime to avoid building the repo when only docs change.\r\n\r\nI tried to do this previously but I missed that the filter only applied to the rolling build and not PR validation.","Url":"https://github.com/dotnet/machinelearning/pull/7096","RelatedDescription":"Closed or merged PR \"Don't trigger PR validation builds for docs only changes\" (#7096)"},{"Id":"2202797935","IsPullRequest":false,"CreatedAt":"2024-03-22T15:48:21","Actor":"asmirnov82","Number":"7102","RawContent":null,"Title":"DataFrame.OrderBy methods incorrect behavior with null values","State":"open","Body":"DataFrame OrderBy method should always place null values at the bottom of the list (after not nullable values) independently of sorting (ascending or descending). This is how Python does and how DataFrameColumn.Sort method works.\r\n\r\n**To Reproduce:**\r\n\r\n```cs\r\nvar col1 = new Int32DataFrameColumn(\"Index\", new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });\r\nvar col2 = new StringDataFrameColumn(\"Country\", new[] { \"USA\", \"France\", \"UK\", \"Brazil\", \"Russia\", \"India\", null, \"China\", null });\r\nvar col3 = new StringDataFrameColumn(\"Capital\", new[] { \"Washington\", \"Paris\", \"London\", \"Brasilia\", \"Moscow\", \"New Dehli\", null, \"Beijing\", null});\r\n\r\nvar df = new DataFrame(col1, col2, col3);\r\nConsole.WriteLine(df.OrderByDescending(\"Capital\"));\r\n```\r\n\r\n**Actual behaiour:**\r\n\r\nIndex     Country   Capital\r\n9         null      null\r\n7         null      null\r\n1         USA       Washington\r\n2         France    Paris\r\n6         India     New Dehli\r\n5         Russia    Moscow\r\n3         UK        London\r\n4         Brazil    Brasilia\r\n8         China     Beijing\r\n\r\n**Expected behaiour:**\r\n\r\nIndex     Country   Capital\r\n1         USA       Washington\r\n2         France    Paris\r\n6         India     New Dehli\r\n5         Russia    Moscow\r\n3         UK        London\r\n4         Brazil    Brasilia\r\n8         China     Beijing\r\n9         null      null\r\n7         null      null\r\n\r\n**Notes:**\r\n\r\n'Console.WriteLine(new DataFrame([col3.Sort(ascending: false)]));' works correctly\r\n\r\nCapital\r\nWashington\r\nParis\r\nNew Dehli\r\nMoscow\r\nLondon\r\nBrasilia\r\nBeijing\r\nnull\r\nnull\r\n\r\nIssue was already mention in https://github.com/dotnet/machinelearning/pull/5776/files#r624316355","Url":"https://github.com/dotnet/machinelearning/issues/7102","RelatedDescription":"Open issue \"DataFrame.OrderBy methods incorrect behavior with null values\" (#7102)"},{"Id":"2202323680","IsPullRequest":true,"CreatedAt":"2024-03-22T11:52:45","Actor":"asmirnov82","Number":"7100","RawContent":null,"Title":"Fix inconsistency in DataFrameColumns Clone API implementation","State":"open","Body":"There are no breaking changes on Public API, mosty only internal implementation is changed\r\n\r\nFixes #7092 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7100","RelatedDescription":"Open PR \"Fix inconsistency in DataFrameColumns Clone API implementation\" (#7100)"},{"Id":"2201029094","IsPullRequest":true,"CreatedAt":"2024-03-21T19:45:39","Actor":"ericstj","Number":"7097","RawContent":null,"Title":"Make ML.NET tests target net8.0 and net9.0 instead of net6.0","State":"open","Body":"This is a portion of the work from https://github.com/dotnet/machinelearning/pull/6749\r\n\r\nThis moves the tests forward to net8.0, and cleans up RemoteExecutor (which I noticed in @tarekgh's PR).\r\n\r\nI minimized the product changes so as to not break compat (thought CPU math is changing it's TFM based on net6.0 going OOS by Nov).\r\n\r\nWhere possible I tried to use `NetMinimum` and `NetCurrent` to make this easier next time.\r\n\r\nI'm not thrilled about all the TFM duplication in the PR pipeline.  I think we should clean that up in a follow-up PR though.","Url":"https://github.com/dotnet/machinelearning/pull/7097","RelatedDescription":"Open PR \"Make ML.NET tests target net8.0 and net9.0 instead of net6.0\" (#7097)"},{"Id":"2199648335","IsPullRequest":false,"CreatedAt":"2024-03-21T16:47:46","Actor":"RaphaelPliessnig","Number":"7091","RawContent":null,"Title":"DataFrameColumn.And System.NotSupportedException: Specified method is not supported.","State":"closed","Body":"\r\n - OS & Version: Windows 10\r\n - ML.NET Version: Data.Analysis 21.1\r\n - .NET Version: .NET 8.0\r\n\r\n\r\nSince i upgraded to Data.Analysis 21.1 from 20.0 the \".And\" method does not work anymore. \r\nI also cant \"downgrade to 20.0 anymore since i get this error: Error: Microsoft.DotNet.Interactive.KernelExtensionLoadException: Failure loading Kernel Extension\r\n\r\n```\r\n#r \"nuget: Microsoft.Data.Analysis, 0.21.1\"\r\n\r\nusing System;\r\n\r\nusing Microsoft.Data.Analysis;\r\n\r\nvar col1 = new BooleanDataFrameColumn(\"col1\", new Boolean[]{true, false, true});\r\nvar col2 = new BooleanDataFrameColumn(\"col2\", new Boolean[]{false, true, true});\r\nvar dfTest = new DataFrame(col1,col2);\r\ndfTest[\"and\"] = dfTest[\"col1\"].And(dfTest[\"col2\"])\r\n```\r\nbefore the update to 21.1 everything worked as expected but i am now getting this error: \r\nError: System.NotSupportedException: Specified method is not supported.\r\nat Microsoft.Data.Analysis.PrimitiveDataFrameColumn`1.HandleOperationImplementation[U](BinaryOperation operation, PrimitiveDataFrameColumn`1 column, Boolean inPlace)\r\nat Microsoft.Data.Analysis.PrimitiveDataFrameColumn`1.And(DataFrameColumn column, Boolean inPlace)\r\nat Submission#3.<<Initialize>>d__0.MoveNext()\r\n--- End of stack trace from previous location ---\r\nat Microsoft.CodeAnalysis.Scripting.ScriptExecutionState.RunSubmissionsAsync[TResult](ImmutableArray`1 precedingExecutors, Func`2 currentExecutor, StrongBox`1 exceptionHolderOpt, Func`2 catchExceptionOpt, CancellationToken cancellationToken)\r\n\r\nam i missing some dependencies or is this method just no longer supported? \r\n\r\nThank you in advance\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7091","RelatedDescription":"Closed issue \"DataFrameColumn.And System.NotSupportedException: Specified method is not supported.\" (#7091)"},{"Id":"2199818683","IsPullRequest":true,"CreatedAt":"2024-03-21T16:47:45","Actor":"asmirnov82","Number":"7093","RawContent":null,"Title":"Fix Logical binary operations not supported exception","State":"closed","Body":"Fixes #7091 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7093","RelatedDescription":"Closed or merged PR \"Fix Logical binary operations not supported exception\" (#7093)"},{"Id":"2200221688","IsPullRequest":true,"CreatedAt":"2024-03-21T13:35:12","Actor":"piyushdubey","Number":"7094","RawContent":null,"Title":"Add support for Apache.Arrow.Types.Decimal128Type","State":"open","Body":"Fixes #7082 ","Url":"https://github.com/dotnet/machinelearning/pull/7094","RelatedDescription":"Open PR \"Add support for Apache.Arrow.Types.Decimal128Type\" (#7094)"},{"Id":"2199678667","IsPullRequest":false,"CreatedAt":"2024-03-21T09:48:16","Actor":"asmirnov82","Number":"7092","RawContent":null,"Title":"Inconsistent dataframe columns API for Clone functionality","State":"open","Body":"1) API of Clone method for String dataframe columns is inconsistent with other columns\r\n\r\nIt's possible to have code like this:\r\n```cs\r\nPrimitiveDataFrameColumn<int> column = new PrimitiveDataFrameColumn<int>(\"Column name\");\r\nPrimitiveDataFrameColumn<int> cloneColumn = column.Clone();\r\n```\r\n\r\nHowever \r\n```cs\r\nStringDataFrameColumn column = StringDataFrameColumn(\"Column name\");\r\nStringDataFrameColumn cloneColumn = column.Clone();\r\n```\r\nor\r\n```cs\r\nArrowStringDataFrameColumn column = ArrowDataFrameColumn(\"Column name\");\r\nArrowStringDataFrameColumn cloneColumn = column.Clone();\r\n```\r\nfails to compile as Clone method returns base DataFrameColumn class \r\n\r\n2) User is able to create inheritor of DataFrameColumn without overriding Clone() method. Adding such columns to DataFrame brokes it functionality at runtime, as it will crashes with NotImplemented exception. Code should force user to implement all required essential methods\r\n\r\n3) StringDataFrameColumn, ArrowStringDataFrameColumn and VBufferDataFrameColumn provides their own private Clone and CloneImplementation methods, so it's really hard to understand what method would be actually called, it very error prone. For example, PrimitiveDataFrameColumn provides:\r\n\r\n```cs\r\npublic PrimitiveDataFrameColumn<T> Clone(PrimitiveDataFrameColumn<long> mapIndices = null, bool invertMapIndices = false)\r\n```\r\nand also it inherits from the base class\r\n```cs\r\npublic virtual DataFrameColumn Clone(DataFrameColumn mapIndices = null, bool invertMapIndices = false, long numberOfNullsToAppend = 0)\r\n```\r\nso the call to Clone() without providing any arguments looks ambiguous\r\n\r\n\r\nThe fact, that in addition it has\r\n```cs\r\npublic PrimitiveDataFrameColumn<T> Clone(IEnumerable<long> mapIndices)\r\n```\r\ntaking into account, that PrimitiveDataFrameColumn implements IEnumerable<long> and inherits from DataFrameColumn makes the situation even worse\r\n\r\n4) InvertMapIndices argument doesn't have any sence in case if mapIndices is null or not provided. So ability to call method `Clone(invertMapIndices: true)` is logicaly incorrect","Url":"https://github.com/dotnet/machinelearning/issues/7092","RelatedDescription":"Open issue \"Inconsistent dataframe columns API for Clone functionality\" (#7092)"},{"Id":"2198036699","IsPullRequest":false,"CreatedAt":"2024-03-20T16:54:32","Actor":"richlander","Number":"7088","RawContent":null,"Title":"Update `dotnet-buildtools-prereqs-docker` images","State":"open","Body":"We are no longer supporting Ubuntu 18.04 images.\r\n\r\nI tried to update them, but there doesn't seem to be matching images for a higher Ubuntu version.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/70e191b3fae444f6625fdc001071de1e2bd1080b/.vsts-dotnet-ci.yml#L33-L40\r\n\r\nThe CentOS 8 stream image will soon be EOL. We need to move off of it, too.\r\n\r\nhttps://blog.centos.org/2023/04/end-dates-are-coming-for-centos-stream-8-and-centos-linux-7/\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/70e191b3fae444f6625fdc001071de1e2bd1080b/.vsts-dotnet-ci.yml#L31\r\n\r\nI did update your VM images: https://github.com/dotnet/machinelearning/pull/7087","Url":"https://github.com/dotnet/machinelearning/issues/7088","RelatedDescription":"Open issue \"Update `dotnet-buildtools-prereqs-docker` images\" (#7088)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-04-04T03:30:14.958043Z","RunDurationInMilliseconds":387}